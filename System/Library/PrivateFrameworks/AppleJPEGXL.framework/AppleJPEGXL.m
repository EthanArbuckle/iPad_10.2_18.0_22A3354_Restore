float sub_236760454(float *a1, _WORD *a2, float a3)
{
  float result;

  LOWORD(a3) = *a2;
  result = (float)LODWORD(a3) / 65535.0;
  *a1 = result;
  return result;
}

float sub_236760470(float *a1, unsigned __int16 *a2)
{
  float result;

  result = (float)(bswap32(*a2) >> 16) / 65535.0;
  *a1 = result;
  return result;
}

double sub_236760494(double *a1, _WORD *a2, float a3)
{
  double result;

  LOWORD(a3) = *a2;
  result = (float)((float)LODWORD(a3) / 65535.0);
  *a1 = result;
  return result;
}

double sub_2367604B4(double *a1, unsigned __int16 *a2)
{
  double result;

  result = (float)((float)(bswap32(*a2) >> 16) / 65535.0);
  *a1 = result;
  return result;
}

uint64_t sub_2367604DC(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int *v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  uint64_t v65;
  _OWORD v67[4];
  _OWORD v68[4];
  _OWORD v69[8];
  _OWORD v70[8];
  unsigned int v71[16];
  _DWORD v72[16];
  unsigned int v73[16];
  _DWORD __dst[16];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(result + 211) & 4) != 0)
  {
    v7 = a3;
    v9 = result;
    v11 = *(unsigned int *)result;
    v10 = *(unsigned int *)(result + 4);
    if (a2 != a3 || (_DWORD)v11 != (_DWORD)v10)
    {
      v12 = (v11 >> 7) & 7;
      v64 = v12;
      if ((_DWORD)v12 && (_DWORD)v12 == ((v10 >> 7) & 7))
      {
        sub_2367607F0(v11, a6[2], __dst, v73);
        sub_2367607F0(v10, a6[3], v72, v71);
        v14 = sub_236760A98(v11);
        result = sub_236760A98(v10);
        if (v14 > 4 || (result & 0x80000000) != 0 || (int)result >= 5)
        {
          result = sub_2367644B8(*(uint64_t **)(v9 + 232), 8, "Unrecognized alpha channel width", v15, v16, v17, v18, v19, v58);
          v20 = 0;
        }
        else
        {
          v20 = (uint64_t (*)(uint64_t, uint64_t))*(&off_250800500[6 * v14] + result);
        }
        if ((_DWORD)v64 == 1)
        {
          if (a5)
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            v65 = a2 + __dst[0];
            v61 = v7 + v72[0];
            v24 = v73[0];
            v25 = v71[0];
            do
            {
              if (a4)
              {
                v26 = v61 + v21;
                v27 = a4;
                v28 = v65 + v22;
                do
                {
                  result = v20(v26, v28);
                  v28 += v24;
                  v26 += v25;
                  --v27;
                }
                while (v27);
              }
              v22 += *a6;
              v21 += a6[1];
              ++v23;
            }
            while (v23 != a5);
          }
        }
        else
        {
          memset(v70, 0, sizeof(v70));
          memset(v69, 0, sizeof(v69));
          memset(v68, 0, sizeof(v68));
          memset(v67, 0, sizeof(v67));
          if (a5)
          {
            v29 = 0;
            v59 = v7;
            v60 = a6;
            do
            {
              v62 = v29;
              v30 = v69;
              v31 = (unsigned int *)v67;
              v32 = v72;
              v33 = v70;
              v34 = (unsigned int *)v68;
              v35 = __dst;
              v36 = v64;
              do
              {
                v37 = *v35++;
                v38 = a2 + v37;
                v39 = *v34++;
                *v33++ = v38 + v39;
                v40 = *v32++;
                v41 = v7 + v40;
                v42 = *v31++;
                *v30++ = v41 + v42;
                --v36;
              }
              while (v36);
              if (a4)
              {
                v43 = 0;
                do
                {
                  v44 = v71;
                  v45 = v73;
                  v46 = (uint64_t *)v70;
                  v47 = (uint64_t *)v69;
                  v48 = v64;
                  do
                  {
                    v49 = *v47;
                    v50 = *v46;
                    result = v20(*v47, *v46);
                    v51 = *v45++;
                    *v46++ = v50 + v51;
                    v52 = *v44++;
                    *v47++ = v49 + v52;
                    --v48;
                  }
                  while (v48);
                  ++v43;
                }
                while (v43 != a4);
              }
              v53 = *v60;
              v54 = v60[1];
              v55 = v67;
              v56 = v68;
              v57 = v64;
              do
              {
                *v56++ += v53;
                *v55++ += v54;
                --v57;
              }
              while (v57);
              v29 = v62 + 1;
              v7 = v59;
            }
            while (v62 + 1 != a5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2367607F0(uint64_t result, int a2, void *__dst, unsigned int *a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t v15;
  int v16;
  int64x2_t v17;
  int64x2_t v18;
  int32x2_t v19;
  int v20;
  int v21;
  int v22;
  __int128 *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64x2_t v28;
  int v29;
  int64x2_t v30;
  int64x2_t v31;
  int32x2_t v32;
  int v33;
  int v34;
  int v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = result >> 7;
  v6 = (result >> 7) & 7;
  v7 = result >> 3;
  v8 = (result >> 3) & 0xF;
  v9 = v8 + v6;
  if ((result & 7) != 0)
    v10 = result & 7;
  else
    v10 = 8;
  v11 = v9 - 16;
  if ((result & 0x1000) != 0)
  {
    if (v11 < 0xFFFFFFF1)
      return result;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    if (v6)
    {
      v25 = (result >> 7) & 7;
      do
      {
        *a4++ = v10;
        --v25;
      }
      while (v25);
    }
    v26 = 0;
    v27 = ((_BYTE)v8 + (_BYTE)v6 + 1) & 0x3E;
    v28 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    v29 = v6 + v8 - 1;
    v30 = (int64x2_t)xmmword_2368AF310;
    v31 = vdupq_n_s64(2uLL);
    do
    {
      v32 = vmovn_s64((int64x2_t)vcgeq_u64(v28, (uint64x2_t)v30));
      if ((v32.i8[0] & 1) != 0)
      {
        if ((result & 0x400) != 0)
          v33 = v29;
        else
          v33 = v26;
        *((_DWORD *)&v37 + v26) = v33;
      }
      if ((v32.i8[4] & 1) != 0)
      {
        v34 = v9 + (v26 ^ 0xFFFFFFFE);
        if ((result & 0x400) == 0)
          v34 = v26 + 1;
        *((_DWORD *)&v37 + v26 + 1) = v34;
      }
      v26 += 2;
      v30 = vaddq_s64(v30, v31);
      v29 -= 2;
    }
    while (v27 != v26);
    if ((result & 0x4000) != 0)
    {
      v35 = v37;
      if ((_DWORD)v9 != 1)
        result = (uint64_t)memmove(&v37, (char *)&v37 + 4, 4 * (v9 - 2) + 4);
      *((_DWORD *)&v37 + (v9 - 1)) = v35;
    }
    v36 = &v37;
    do
    {
      *(_DWORD *)v36 *= a2;
      v36 = (__int128 *)((char *)v36 + 4);
      --v9;
    }
    while (v9);
  }
  else
  {
    if (v11 < 0xFFFFFFF1)
      return result;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    if (v6)
    {
      v12 = (result >> 7) & 7;
      do
      {
        *a4++ = v10 * v9;
        --v12;
      }
      while (v12);
    }
    v13 = 0;
    v14 = ((_BYTE)v8 + (_BYTE)v6 + 1) & 0x3E;
    v15 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    v16 = v6 + v8 - 1;
    v17 = (int64x2_t)xmmword_2368AF310;
    v18 = vdupq_n_s64(2uLL);
    do
    {
      v19 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v17));
      if ((v19.i8[0] & 1) != 0)
      {
        if ((result & 0x400) != 0)
          v20 = v16;
        else
          v20 = v13;
        *((_DWORD *)&v37 + v13) = v20;
      }
      if ((v19.i8[4] & 1) != 0)
      {
        v21 = v9 + (v13 ^ 0xFFFFFFFE);
        if ((result & 0x400) == 0)
          v21 = v13 + 1;
        *((_DWORD *)&v37 + v13 + 1) = v21;
      }
      v13 += 2;
      v17 = vaddq_s64(v17, v18);
      v16 -= 2;
    }
    while (v14 != v13);
    if ((result & 0x4000) != 0 && v9 >= 2)
    {
      v22 = v37;
      result = (uint64_t)memmove(&v37, (char *)&v37 + 4, 4 * (v9 - 2) + 4);
      *((_DWORD *)&v37 + (v9 - 1)) = v22;
    }
    if (v10 >= 2)
    {
      v23 = &v37;
      do
      {
        *(_DWORD *)v23 *= v10;
        v23 = (__int128 *)((char *)v23 + 4);
        --v9;
      }
      while (v9);
    }
  }
  if (v6)
    return (uint64_t)memcpy(__dst, (char *)&v37 + 4 * (v7 & 0xF), 4 * (v5 & 7));
  return result;
}

uint64_t sub_236760A98(int a1)
{
  int v1;

  v1 = a1 & 0x400007;
  if ((a1 & 0x400007u) < 0x400000)
  {
    if (v1 == 1)
      return 0;
    if (v1 == 2)
      return 1;
  }
  else
  {
    switch(v1)
    {
      case 4194304:
        return 5;
      case 4194306:
        return 3;
      case 4194308:
        return 4;
    }
  }
  if ((a1 & 0x807) == 0x802)
    return 3;
  else
    return 0xFFFFFFFFLL;
}

_BYTE *sub_236760B1C(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

_WORD *sub_236760B28(_WORD *result, unsigned __int8 *a2)
{
  *result = *a2 | (*a2 << 8);
  return result;
}

_WORD *sub_236760B38(_WORD *result, unsigned __int8 *a2)
{
  *result = *a2 | (*a2 << 8);
  return result;
}

float sub_236760B48(_WORD *a1, _BYTE *a2, float a3)
{
  float result;

  LOBYTE(a3) = *a2;
  result = (float)LODWORD(a3) / 255.0;
  *a1 = word_2368B2D80[(unint64_t)LODWORD(result) >> 23]
      + ((LODWORD(result) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(result) >> 23]);
  return result;
}

float sub_236760B90(float *a1, _BYTE *a2, float a3)
{
  float result;

  LOBYTE(a3) = *a2;
  result = (float)LODWORD(a3) / 255.0;
  *a1 = result;
  return result;
}

double sub_236760BAC(double *a1, _BYTE *a2, double a3)
{
  double result;

  LOBYTE(a3) = *a2;
  result = (double)*(unint64_t *)&a3 / 255.0;
  *a1 = result;
  return result;
}

_BYTE *sub_236760BC8(_BYTE *result, unsigned __int16 *a2)
{
  *result = (65281 * *a2 + 0x800000) >> 24;
  return result;
}

_WORD *sub_236760BE4(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

_WORD *sub_236760BF0(_WORD *result, unsigned __int16 *a2)
{
  *result = bswap32(*a2) >> 16;
  return result;
}

float sub_236760C04(_WORD *a1, _WORD *a2, float a3)
{
  float result;

  LOWORD(a3) = *a2;
  result = (float)LODWORD(a3) / 65535.0;
  *a1 = word_2368B2D80[(unint64_t)LODWORD(result) >> 23]
      + ((LODWORD(result) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(result) >> 23]);
  return result;
}

_BYTE *sub_236760C4C(_BYTE *result, unsigned __int16 *a2)
{
  *result = (65281 * (bswap32(*a2) >> 16) + 0x800000) >> 24;
  return result;
}

float sub_236760C70(_WORD *a1, unsigned __int16 *a2)
{
  float result;

  result = (float)(bswap32(*a2) >> 16) / 65535.0;
  *a1 = word_2368B2D80[(unint64_t)LODWORD(result) >> 23]
      + ((LODWORD(result) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(result) >> 23]);
  return result;
}

char *sub_236760CC0(char *result, _WORD *a2)
{
  double v2;
  char v3;

  v2 = (float)(COERCE_FLOAT(dword_2368B2C80[(unint64_t)(unsigned __int16)*a2 >> 10]+ dword_2368B0C00[(*a2 & 0x3FF) + word_2368B2C00[(unint64_t)(unsigned __int16)*a2 >> 10]])* 255.0)+ 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 255.0)
  {
    v3 = -1;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) - 1;
  }
  *result = v3;
  return result;
}

__int16 *sub_236760D68(__int16 *result, _WORD *a2)
{
  double v2;
  __int16 v3;

  v2 = (float)(COERCE_FLOAT(dword_2368B2C80[(unint64_t)(unsigned __int16)*a2 >> 10]+ dword_2368B0C00[(*a2 & 0x3FF) + word_2368B2C00[(unint64_t)(unsigned __int16)*a2 >> 10]])* 65535.0)+ 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 65535.0)
  {
    v3 = -1;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = v3;
  return result;
}

_WORD *sub_236760E14(_WORD *result, _WORD *a2)
{
  double v2;
  unsigned int v3;

  v2 = (float)(COERCE_FLOAT(dword_2368B2C80[(unint64_t)(unsigned __int16)*a2 >> 10]+ dword_2368B0C00[(*a2 & 0x3FF) + word_2368B2C00[(unint64_t)(unsigned __int16)*a2 >> 10]])* 65535.0)+ 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 65535.0)
  {
    v3 = 0xFFFF;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = bswap32(v3) >> 16;
  return result;
}

_DWORD *sub_236760EC8(_DWORD *result, _WORD *a2)
{
  *result = dword_2368B2C80[(unint64_t)(unsigned __int16)*a2 >> 10]
          + dword_2368B0C00[(*a2 & 0x3FF) + word_2368B2C00[(unint64_t)(unsigned __int16)*a2 >> 10]];
  return result;
}

double sub_236760F08(double *a1, _WORD *a2)
{
  double result;

  result = COERCE_FLOAT(dword_2368B2C80[(unint64_t)(unsigned __int16)*a2 >> 10]+ dword_2368B0C00[(*a2 & 0x3FF) + word_2368B2C00[(unint64_t)(unsigned __int16)*a2 >> 10]]);
  *a1 = result;
  return result;
}

char *sub_236760F50(char *result, float *a2)
{
  double v2;
  char v3;

  v2 = (float)(*a2 * 255.0) + 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 255.0)
  {
    v3 = -1;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) - 1;
  }
  *result = v3;
  return result;
}

__int16 *sub_236760FC0(__int16 *result, float *a2)
{
  double v2;
  __int16 v3;

  v2 = (float)(*a2 * 65535.0) + 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 65535.0)
  {
    v3 = -1;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = v3;
  return result;
}

_WORD *sub_236761034(_WORD *result, float *a2)
{
  double v2;
  unsigned int v3;

  v2 = (float)(*a2 * 65535.0) + 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 65535.0)
  {
    v3 = 0xFFFF;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = bswap32(v3) >> 16;
  return result;
}

_WORD *sub_2367610B0(_WORD *result, _DWORD *a2)
{
  *result = word_2368B2D80[(unint64_t)*a2 >> 23]
          + ((*a2 & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)*a2 >> 23]);
  return result;
}

_DWORD *sub_2367610E4(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

double sub_2367610F0(double *a1, float *a2)
{
  double result;

  result = *a2;
  *a1 = result;
  return result;
}

char *sub_236761100(char *result, double *a2)
{
  double v2;
  char v3;

  v2 = *a2 * 255.0 + 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 255.0)
  {
    v3 = -1;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) - 1;
  }
  *result = v3;
  return result;
}

__int16 *sub_236761164(__int16 *result, double *a2)
{
  double v2;
  __int16 v3;

  v2 = *a2 * 65535.0 + 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 65535.0)
  {
    v3 = -1;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = v3;
  return result;
}

_WORD *sub_2367611CC(_WORD *result, double *a2)
{
  double v2;
  unsigned int v3;

  v2 = *a2 * 65535.0 + 0.5;
  if (v2 <= 0.0)
  {
    v3 = 0;
  }
  else if (v2 >= 65535.0)
  {
    v3 = 0xFFFF;
  }
  else
  {
    v3 = (COERCE_UNSIGNED_INT64(v2 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = bswap32(v3) >> 16;
  return result;
}

float sub_23676123C(_WORD *a1, double *a2)
{
  float result;

  result = *a2;
  *a1 = word_2368B2D80[(unint64_t)LODWORD(result) >> 23]
      + ((LODWORD(result) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(result) >> 23]);
  return result;
}

float sub_236761278(float *a1, double *a2)
{
  float result;

  result = *a2;
  *a1 = result;
  return result;
}

_QWORD *sub_236761288(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *sub_236761294(uint64_t *a1, unsigned int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v23;
  int v24;
  int *v26;
  int *v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int32x2_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int32x2_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  int32x2_t *v61;
  int32x2_t *v62;
  int32x2_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  int v79;
  int32x2_t *v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  int32x2_t *v89;
  int32x2_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int32x2_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t i;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t ***v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t ***v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ***v134;
  uint64_t v135;
  int32x2_t *v136;
  int32x2_t *v137;
  uint64_t v138;
  int32x2_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int32x2_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t *v148;
  __int32 v149;
  uint64_t *v150;
  uint64_t *v151;
  __int128 *v152;
  int32x2_t *v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t *v157;
  __int16 v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _OWORD v173[4];
  uint64_t v174;
  double v175[10];
  uint64_t ***v176[6];

  v176[3] = *(uint64_t ****)MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v17 = (uint64_t *)sub_23676D59C(a1, 0, 0);
  if (!v17)
    return v17;
  v157 = a1;
  v158 = a7;
  v18 = 0;
  v172 = 0;
  v170 = 0u;
  v171 = 0u;
  v159 = a2;
  v160 = a2;
  v168 = 0u;
  v169 = 0u;
  v166 = 0;
  v167 = 0;
  v165 = 0;
  v19 = *(_DWORD *)(*(_QWORD *)a4 + 80);
  v161 = a4;
  v162 = a3;
  do
  {
    v20 = *(_QWORD *)(a4 + 8 * v18);
    v21 = *(_DWORD *)(v20 + 76);
    v164 = v18;
    if (!v18 && v21 != 1633842036 && v21 != 1818848875)
    {
      v28 = *a3;
LABEL_20:
      v24 = 1;
      goto LABEL_21;
    }
    v23 = v19 == 1281450528 || v19 == 1482250784;
    v28 = a3[v18];
    if (!v23)
      goto LABEL_20;
    v24 = 0;
    if (v21 != 1818848875 && v21 != 1633842036)
    {
      v26 = (int *)(v20 + 84);
      v27 = (int *)(v20 + 80);
      goto LABEL_22;
    }
LABEL_21:
    v26 = (int *)(v20 + 80);
    v27 = (int *)(v20 + 84);
LABEL_22:
    v29 = *v26;
    if (*v26 != v19
      && (v19 != 1129142603 || v29 != 876825682)
      && (v19 != 876825682 || v29 != 1129142603)
      && (v19 != 1281450528 || v29 != 1482250784)
      && (v19 != 1482250784 || v29 != 1281450528))
    {
      sub_2367644B8(v157, 9, "ColorSpace mismatch", v12, v13, v14, v15, v16, v156);
      goto LABEL_236;
    }
    v30 = v21 == 1633842036 || v21 == 1818848875;
    v163 = *v27;
    if (!v30 && (v159 != 1 || v21 != 1852662636))
    {
      if (v24)
      {
        v34 = sub_23676AD4C(v20, v28);
        if (!v34)
          goto LABEL_236;
        goto LABEL_124;
      }
      v53 = v19;
      v54 = *(uint64_t **)(v20 + 8);
      v55 = v28;
      if (v28 <= 3)
      {
        v56 = *(unsigned int *)(v20 + 132);
        if ((int)v56 >= 1)
        {
          v57 = 0;
          v58 = dword_2368B33B0[v28];
          while (*(_DWORD *)(v20 + 4 * v57 + 136) != v58)
          {
            if (v56 == ++v57)
              goto LABEL_146;
          }
          if ((v57 & 0x80000000) == 0)
          {
            v74 = *v26;
            v75 = sub_23676A304((uint64_t *)v20, v58);
            v76 = sub_23676DA44(v75);
            if (!v76)
              goto LABEL_236;
            v34 = (uint64_t *)v76;
            v77 = v54;
            v79 = *(_DWORD *)(v20 + 80);
            v78 = *(_DWORD *)(v20 + 84);
            if (v78 == 1482250784)
            {
              v80 = sub_23676C120(v77, 3, 3u, qword_2368B35A0, 0);
              if (!v80)
                goto LABEL_235;
              v81 = 2016568352;
            }
            else
            {
              if (v78 != 1281450528)
                goto LABEL_205;
              v80 = sub_23676C120(v77, 3, 3u, qword_2368B3540, qword_2368B3588);
              if (!v80)
                goto LABEL_235;
              v81 = 1815241760;
            }
            v80[1].i32[1] = v81;
            v80[7] = (int32x2_t)*v34;
            *v34 = (uint64_t)v80;
            if (!sub_23676D8DC(v34))
              goto LABEL_235;
LABEL_205:
            if (v79 == 1482250784)
            {
              v139 = sub_23676C120(v77, 3, 3u, qword_2368B34F8, 0);
              if (!v139)
                goto LABEL_235;
              v139[1].i32[1] = 1681029152;
              v142 = *v34;
              if (*v34)
              {
                do
                {
                  v141 = v142;
                  v142 = *(_QWORD *)(v142 + 56);
                }
                while (v142);
                goto LABEL_214;
              }
            }
            else
            {
              if (v79 != 1281450528)
                goto LABEL_233;
              v139 = sub_23676C120(v77, 3, 3u, qword_2368B3498, qword_2368B34E0);
              if (!v139)
                goto LABEL_235;
              v139[1].i32[1] = 1681026080;
              v140 = *v34;
              if (*v34)
              {
                do
                {
                  v141 = v140;
                  v140 = *(_QWORD *)(v140 + 56);
                }
                while (v140);
LABEL_214:
                *(_QWORD *)(v141 + 56) = v139;
                v139[7] = 0;
                goto LABEL_222;
              }
            }
            *v34 = (uint64_t)v139;
LABEL_222:
            if (sub_23676D8DC(v34))
              goto LABEL_232;
            goto LABEL_235;
          }
LABEL_146:
          v82 = 0;
          v83 = dword_2368B33A0[v55];
          while (*(_DWORD *)(v20 + 136 + 4 * v82) != v83)
          {
            if (v56 == ++v82)
              goto LABEL_151;
          }
          if ((v82 & 0x80000000) == 0)
            goto LABEL_152;
        }
LABEL_151:
        v83 = 1110589744;
LABEL_152:
        if ((int)v56 >= 1)
        {
          v84 = 0;
          while (*(_DWORD *)(v20 + 4 * v84 + 136) != v83)
          {
            if (v56 == ++v84)
              goto LABEL_171;
          }
          if ((v84 & 0x80000000) == 0)
          {
            v74 = v29;
            v85 = sub_23676A304((uint64_t *)v20, v83);
            if (!v85)
              goto LABEL_236;
            v86 = v85;
            v87 = sub_23676A71C(v20, v83);
            v88 = (uint64_t *)sub_23676DA44(v86);
            if (!v88)
              goto LABEL_236;
            v34 = v88;
            if (*(_DWORD *)(v20 + 84) == 1281450528)
              sub_23676B53C(v88);
            if (v87 == 1835430962 && *(_DWORD *)(v20 + 84) == 1281450528)
            {
              v89 = sub_23676C120(v54, 3, 3u, qword_2368B3450, 0);
              if (!v89)
                goto LABEL_235;
              v89[1].i32[1] = 874525216;
              v89[7] = (int32x2_t)*v34;
              *v34 = (uint64_t)v89;
              if (!sub_23676D8DC(v34))
                goto LABEL_235;
              if (*(_DWORD *)(v20 + 80) == 1281450528)
              {
                v90 = sub_23676C120(v54, 3, 3u, qword_2368B3408, 0);
                if (v90)
                  v90[1].i32[1] = 840971296;
                if (!sub_23676DB6C(v34, 1, (uint64_t)v90))
                  goto LABEL_235;
              }
            }
            goto LABEL_233;
          }
        }
      }
LABEL_171:
      v74 = v29;
      if (*(_DWORD *)(v20 + 80) != 1196573017)
      {
        memset(v175, 0, 72);
        v174 = 0;
        memset(v173, 0, sizeof(v173));
        if (!sub_23676B488(v175, (uint64_t *)v20) || !sub_23676DCF8(v175, (double *)v173))
          goto LABEL_231;
        v104 = 0;
        v105 = v173;
        do
        {
          for (i = 0; i != 24; i += 8)
            *(double *)((char *)v105 + i) = *(double *)((char *)v105 + i) * 1.99996948;
          ++v104;
          v105 = (_OWORD *)((char *)v105 + 24);
        }
        while (v104 != 3);
        v107 = sub_23676A304((uint64_t *)v20, 0x72545243u);
        v108 = sub_23676A304((uint64_t *)v20, 0x67545243u);
        v109 = sub_23676A304((uint64_t *)v20, 0x62545243u);
        v34 = 0;
        if (!v107)
          goto LABEL_232;
        if (!v108)
          goto LABEL_232;
        v117 = v109;
        if (!v109
          || (v118 = (uint64_t ***)sub_2367658E8(v107, v110, v111, v112, v113, v114, v115, v116),
              v176[0] = v118,
              v126 = (uint64_t ***)sub_2367658E8(v108, v119, v120, v121, v122, v123, v124, v125),
              v176[1] = v126,
              v134 = (uint64_t ***)sub_2367658E8(v117, v127, v128, v129, v130, v131, v132, v133),
              v34 = 0,
              v176[2] = v134,
              !v118)
          || !v126
          || !v134)
        {
LABEL_232:
          if (!v34)
            goto LABEL_236;
LABEL_233:
          if (!sub_236762274())
            goto LABEL_235;
          v67 = (uint64_t)v17;
          v68 = v53;
          v69 = v74;
          goto LABEL_123;
        }
        v34 = (uint64_t *)sub_23676D59C(v54, 3u, 3);
        if (!v34
          || (*(_DWORD *)(v20 + 84) != 1281450528 || (sub_23676D10C(v54), sub_23676DB6C(v34, 1, v135)))
          && (v136 = sub_23676C120(v54, 3, 3u, (uint64_t *)v173, 0),
              sub_23676DB6C(v34, 1, (uint64_t)v136))
          && (v137 = sub_23676BAB0(v54, 3, (uint64_t)v176), sub_23676DB6C(v34, 1, (uint64_t)v137)))
        {
          sub_236765878(v176);
          goto LABEL_232;
        }
        sub_236765878(v176);
        goto LABEL_230;
      }
      v91 = sub_23676A304((uint64_t *)v20, 0x6B545243u);
      if (!v91)
        goto LABEL_231;
      v99 = sub_2367658E8(v91, v92, v93, v94, v95, v96, v97, v98);
      *(_QWORD *)&v175[0] = v99;
      if (!v99)
        goto LABEL_231;
      v100 = v99;
      v34 = (uint64_t *)sub_23676D59C(v54, 3u, 1);
      if (!v34)
      {
LABEL_228:
        sub_236765578((uint64_t ***)v100);
        goto LABEL_232;
      }
      if (*(_DWORD *)(v20 + 84) == 1281450528)
      {
        v101 = sub_23676C120(v54, 1, 3u, qword_2368B33D8, 0);
        if (v101)
        {
          v102 = *v34;
          if (*v34)
          {
            do
            {
              v103 = v102;
              v102 = *(_QWORD *)(v102 + 56);
            }
            while (v102);
LABEL_201:
            *(_QWORD *)(v103 + 56) = v101;
            v101[7] = 0;
            goto LABEL_216;
          }
          goto LABEL_215;
        }
      }
      else
      {
        v101 = sub_23676C120(v54, 1, 3u, qword_2368B33F0, 0);
        if (v101)
        {
          v138 = *v34;
          if (*v34)
          {
            do
            {
              v103 = v138;
              v138 = *(_QWORD *)(v138 + 56);
            }
            while (v138);
            goto LABEL_201;
          }
LABEL_215:
          *v34 = (uint64_t)v101;
LABEL_216:
          if (sub_23676D8DC(v34))
          {
            v143 = sub_23676BAB0(v54, 1, (uint64_t)v175);
            if (v143)
            {
              v144 = *v34;
              if (*v34)
              {
                do
                {
                  v145 = v144;
                  v144 = *(_QWORD *)(v144 + 56);
                }
                while (v144);
                *(_QWORD *)(v145 + 56) = v143;
                v143[7] = 0;
              }
              else
              {
                *v34 = (uint64_t)v143;
              }
              v146 = sub_23676D8DC(v34);
              v100 = *(_QWORD *)&v175[0];
              if (v146)
                goto LABEL_228;
            }
            else
            {
              v100 = *(_QWORD *)&v175[0];
            }
          }
        }
      }
      sub_236765578((uint64_t ***)v100);
LABEL_230:
      sub_23676D934(v34);
LABEL_231:
      v34 = 0;
      goto LABEL_232;
    }
    if (v28 > 3)
      goto LABEL_236;
    v31 = *(uint64_t **)(v20 + 8);
    if (v21 == 1852662636)
    {
      v32 = sub_23676A304((uint64_t *)v20, 0x6E636C32u);
      if (!v32)
        goto LABEL_236;
      v33 = v32;
      v34 = (uint64_t *)sub_23676D59C(v31, 0, 0);
      if (!v34
        || (sub_23676ECCC(v33, 0), !v35)
        || (*(_QWORD *)(v35 + 56) = *v34, *v34 = v35, !sub_23676D8DC(v34)))
      {
LABEL_239:
        sub_23676D934(v34);
        sub_23676E97C(v33);
        goto LABEL_236;
      }
      if (*(_DWORD *)(v20 + 80) != 1281450528)
        goto LABEL_121;
      v36 = sub_23676C120(v31, 3, 3u, qword_2368B3408, 0);
      if (!v36)
        goto LABEL_239;
      v36[1].i32[1] = 840971296;
      v37 = *v34;
      if (*v34)
      {
        do
        {
          v38 = v37;
          v37 = *(_QWORD *)(v37 + 56);
        }
        while (v37);
        *(_QWORD *)(v38 + 56) = v36;
        v36[7] = 0;
      }
      else
      {
        *v34 = (uint64_t)v36;
      }
      if (!sub_23676D8DC(v34))
        goto LABEL_239;
      goto LABEL_116;
    }
    v39 = *(unsigned int *)(v20 + 132);
    if ((int)v39 < 1)
      goto LABEL_236;
    v40 = 0;
    v41 = dword_2368B3380[v28];
    v42 = dword_2368B3390[v28];
    while (*(_DWORD *)(v20 + 4 * v40 + 136) != v42)
    {
      if (v39 == ++v40)
        goto LABEL_63;
    }
    if ((v40 & 0x80000000) == 0)
    {
      v43 = sub_23676A304((uint64_t *)v20, v42);
      v44 = sub_23676DA44(v43);
      if (!v44)
        goto LABEL_236;
      v34 = (uint64_t *)v44;
      v45 = *(_DWORD *)(v20 + 80);
      v46 = *(_DWORD *)(v20 + 84);
      if (v45 == 1482250784)
      {
        v47 = sub_23676C120(v31, 3, 3u, qword_2368B35A0, 0);
        if (!v47)
          goto LABEL_235;
        v48 = 2016568352;
        goto LABEL_103;
      }
      if (v45 == 1281450528)
      {
        v47 = sub_23676C120(v31, 3, 3u, qword_2368B3540, qword_2368B3588);
        if (!v47)
          goto LABEL_235;
        v48 = 1815241760;
LABEL_103:
        v47[1].i32[1] = v48;
        v47[7] = (int32x2_t)*v34;
        *v34 = (uint64_t)v47;
        if (!sub_23676D8DC(v34))
          goto LABEL_235;
      }
      if (v46 == 1482250784)
      {
        v63 = sub_23676C120(v31, 3, 3u, qword_2368B34F8, 0);
        if (!v63)
          goto LABEL_235;
        v63[1].i32[1] = 1681029152;
        v66 = *v34;
        if (!*v34)
          goto LABEL_114;
        do
        {
          v65 = v66;
          v66 = *(_QWORD *)(v66 + 56);
        }
        while (v66);
LABEL_113:
        *(_QWORD *)(v65 + 56) = v63;
        v63[7] = 0;
      }
      else
      {
        if (v46 != 1281450528)
          goto LABEL_117;
        v63 = sub_23676C120(v31, 3, 3u, qword_2368B3498, qword_2368B34E0);
        if (!v63)
          goto LABEL_235;
        v63[1].i32[1] = 1681026080;
        v64 = *v34;
        if (*v34)
        {
          do
          {
            v65 = v64;
            v64 = *(_QWORD *)(v64 + 56);
          }
          while (v64);
          goto LABEL_113;
        }
LABEL_114:
        *v34 = (uint64_t)v63;
      }
      if (!sub_23676D8DC(v34))
        goto LABEL_235;
LABEL_116:
      if (!v34)
        goto LABEL_236;
      goto LABEL_117;
    }
LABEL_63:
    v49 = 0;
    while (*(_DWORD *)(v20 + 4 * v49 + 136) != 1144144432)
    {
      if (v39 == ++v49)
        goto LABEL_69;
    }
    if ((v49 & 0x80000000) == 0)
    {
      v50 = sub_23676A304((uint64_t *)v20, 0x44324230u);
      v34 = (uint64_t *)sub_23676DA44(v50);
      goto LABEL_116;
    }
LABEL_69:
    v51 = 0;
    while (*(_DWORD *)(v20 + 4 * v51 + 136) != v41)
    {
      if (v39 == ++v51)
        goto LABEL_74;
    }
    if ((v51 & 0x80000000) != 0)
    {
LABEL_74:
      v52 = 0;
      v41 = 1093812784;
      while (*(_DWORD *)(v20 + 136 + 4 * v52) != 1093812784)
      {
        if (v39 == ++v52)
          goto LABEL_236;
      }
      if ((v52 & 0x80000000) != 0)
        goto LABEL_236;
    }
    v59 = sub_23676A304((uint64_t *)v20, v41);
    if (!v59)
      goto LABEL_236;
    v60 = (uint64_t *)sub_23676DA44(v59);
    if (!v60)
      goto LABEL_236;
    v34 = v60;
    if (*(_DWORD *)(v20 + 84) == 1281450528)
      sub_23676B53C(v60);
    if (sub_23676A71C(v20, v41) == 1835430962)
    {
      if (*(_DWORD *)(v20 + 80) == 1281450528)
      {
        v61 = sub_23676C120(v31, 3, 3u, qword_2368B3450, 0);
        if (!v61)
          goto LABEL_235;
        v61[1].i32[1] = 874525216;
        v61[7] = (int32x2_t)*v34;
        *v34 = (uint64_t)v61;
        if (!sub_23676D8DC(v34))
          goto LABEL_235;
      }
      if (*(_DWORD *)(v20 + 84) == 1281450528)
      {
        v62 = sub_23676C120(v31, 3, 3u, qword_2368B3408, 0);
        if (v62)
          v62[1].i32[1] = 840971296;
        if (!sub_23676DB6C(v34, 1, (uint64_t)v62))
          goto LABEL_235;
      }
    }
LABEL_117:
    if (v164 && v21 == 1633842036)
    {
      if (!sub_236762274())
        goto LABEL_235;
      goto LABEL_122;
    }
LABEL_121:
    v169 = 0uLL;
    v167 = 0;
    v168 = 0x3FF0000000000000uLL;
    v170 = 0x3FF0000000000000uLL;
    v171 = 0uLL;
    v172 = 0x3FF0000000000000;
    v165 = 0;
    v166 = 0;
LABEL_122:
    v67 = (uint64_t)v17;
    v68 = v19;
    v69 = v29;
LABEL_123:
    if (!sub_236762C5C(v67, v68, v69, (uint64_t *)&v168, &v165))
      goto LABEL_235;
LABEL_124:
    v70 = *v34;
    if (*v17)
    {
      a3 = v162;
      if (!v70)
        goto LABEL_137;
LABEL_128:
      while (1)
      {
        v71 = sub_23676D43C(v70);
        if (!v71)
          break;
        v72 = *v17;
        if (*v17)
        {
          do
          {
            v73 = v72;
            v72 = *(_QWORD *)(v72 + 56);
          }
          while (v72);
          *(_QWORD *)(v73 + 56) = v71;
          v71[7] = 0;
        }
        else
        {
          *v17 = (uint64_t)v71;
        }
        if (!sub_23676D8DC(v17))
          break;
        v70 = *(_QWORD *)(v70 + 56);
        if (!v70)
          goto LABEL_137;
      }
LABEL_235:
      sub_23676D934(v34);
LABEL_236:
      sub_23676D934(v17);
      return 0;
    }
    a3 = v162;
    if (v70)
      goto LABEL_128;
    v17[1] = v34[1];
LABEL_137:
    a4 = v161;
    if (!sub_23676D8DC(v17))
      goto LABEL_235;
    sub_23676D934(v34);
    v18 = v164 + 1;
    v19 = v163;
  }
  while (v164 + 1 != v160);
  if (v158 < 0 && (v163 == 1129142603 || v163 == 1380401696 || v163 == 1196573017))
  {
    v148 = (uint64_t *)v17[7];
    v149 = sub_23677604C(v163);
    if (v148)
    {
      v150 = &qword_25642E910;
      v151 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v150 = (uint64_t *)*v150;
        if (!v150)
          break;
        if (v150 == v148)
        {
          v151 = v148;
          break;
        }
      }
    }
    else
    {
      v151 = (uint64_t *)&unk_250800620;
    }
    v152 = (__int128 *)v151[6];
    if (!v152)
      v152 = &xmmword_2542ABF08;
    v153 = (int32x2_t *)(*((uint64_t (**)(uint64_t *, uint64_t))v152 + 1))(v148, 64);
    if (!v153)
      goto LABEL_236;
    *v153 = (int32x2_t)v148;
    v153[1] = vdup_n_s32(0x636C7020u);
    v153[2].i32[0] = v149;
    v153[2].i32[1] = v149;
    v153[3] = (int32x2_t)sub_23676D2D0;
    v153[4] = 0;
    v153[5] = 0;
    v153[6] = 0;
    v154 = *v17;
    if (*v17)
    {
      do
      {
        v155 = v154;
        v154 = *(_QWORD *)(v154 + 56);
      }
      while (v154);
      *(_QWORD *)(v155 + 56) = v153;
      v153[7] = 0;
    }
    else
    {
      *v17 = (uint64_t)v153;
    }
    if (!sub_23676D8DC(v17))
      goto LABEL_236;
  }
  return v17;
}

uint64_t sub_236762274()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  double v36;
  float64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t result;
  float64x2_t *v44;
  int8x16_t *v45;
  uint64_t i;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  unint64_t v76;
  double v78;
  uint64_t v79;
  char v80;
  double v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  uint64_t v85;
  int v86;
  double v87;
  double v88;
  double v89;
  double v91;
  double *v92;
  char v93;
  __int128 v94;
  int8x16_t v95;
  _OWORD v96[2];
  __int128 v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  __int128 v101;
  __int128 v102;
  float64x2_t v103;
  double v104;
  int8x16_t v105[4];
  uint64_t v106;
  __int128 v107;
  double v108;
  double v109;
  double v110;
  double v111;
  _OWORD v112[4];
  uint64_t v113;
  float64x2_t v114;
  _BYTE v115[32];
  float64x2_t v116;
  double v117;
  _OWORD v118[3];
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  __int128 v122;
  __int128 v123;
  float64x2_t v124;
  double v125;
  double v126;
  float64x2_t v127;
  uint64_t v128;
  float64x2_t v129;
  uint64_t v130;
  float64x2_t v131;
  double v132;
  uint64_t v133;

  v0 = MEMORY[0x24BDAC7A8]();
  v9 = v5;
  v10 = (double *)v4;
  v11 = v1;
  v12 = v0;
  v133 = *MEMORY[0x24BDAC8D0];
  *v4 = 0x3FF0000000000000;
  v4[1] = 0;
  v13 = v4 + 1;
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0x3FF0000000000000;
  v4[5] = 0;
  v14 = v4 + 5;
  v4[6] = 0;
  v4[7] = 0;
  v4[8] = 0x3FF0000000000000;
  *v5 = 0.0;
  v5[1] = 0.0;
  v5[2] = 0.0;
  if ((_DWORD)v2 != 3)
  {
    if (!(_DWORD)v3)
      goto LABEL_29;
    v27 = v2;
    v109 = 0.0;
    v110 = 0.0;
    v111 = 0.0;
    v107 = 0uLL;
    v108 = 0.0;
    sub_2367769FC((uint64_t)&v109, *(_QWORD *)(v1 + 8 * (v0 - 1)), v2, v3, (uint64_t)v4, (uint64_t)v5, v6, v7);
    v33 = *(_QWORD *)(v11 + 8 * v12);
    v34 = *(_DWORD *)(v33 + 76);
    if (v34 == 1633842036 || v34 == 1852662636 || v34 == 1818848875 || v27 >= 3)
      goto LABEL_17;
    if ((v27 & 0xFFFFFFFD) == 0 && *(_DWORD *)(v33 + 72) >> 26)
    {
      if (sub_23676B5A0(v33))
      {
        sub_236776B08(v33, 1, (double *)&v107, v57, v58, v59, v60, v61);
      }
      else
      {
        v107 = xmmword_2368AF330;
        v108 = 0.00287;
      }
      goto LABEL_18;
    }
    v62 = *(_DWORD *)(v33 + 80);
    if (sub_23676B758(v33, v27, 1, v28, v29, v30, v31, v32)
      && (v62 == 1129142603 || v62 == 1196573017 || v62 == 1380401696))
    {
      memset(v105, 0, 24);
      *(_QWORD *)&v101 = 0;
      v68 = v27;
      v100 = 0uLL;
      if ((_DWORD)v27 == 1)
      {
        v127 = 0uLL;
        v128 = 0;
        if (!sub_2367769FC((uint64_t)&v127, v33, 1, v63, v64, v65, v66, v67))
          goto LABEL_18;
        sub_236775A4C((double *)v105[0].i64, v127.f64);
        v68 = 1;
      }
      v69 = sub_236777148((uint64_t *)v33, v68);
      if (v69)
      {
        v70 = v69;
        v71 = 0;
        v72 = (float64x2_t)vdupq_n_s64(0xC049000000000000);
        v94 = *(__int128 *)((char *)v105 + 8);
        v73 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v72, *(float64x2_t *)((char *)v105 + 8)), (int8x16_t)v72, *(int8x16_t *)((char *)v105 + 8));
        v74 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
        v95 = vbslq_s8((int8x16_t)vcgtq_f64(v73, v74), (int8x16_t)v74, (int8x16_t)v73);
        do
        {
          *(double *)v96 = (double)(int)v71 * 100.0 / 255.0;
          *(int8x16_t *)((char *)v96 + 8) = v95;
          *(_QWORD *)&v118[0] = 0;
          *((_QWORD *)&v118[0] + 1) = 0x100000001;
          (*(void (**)(uint64_t, _OWORD *, float64x2_t *, uint64_t, uint64_t, _OWORD *))(v70 + 8))(v70, v96, &v100, 1, 1, v118);
          v127.f64[v71] = *(float64_t *)v96;
          v121.f64[v71++] = v100.f64[0];
        }
        while (v71 != 256);
        v75 = v126;
        v76 = 254;
        do
        {
          if (v121.f64[v76] < v75)
            v75 = v121.f64[v76];
          v121.f64[v76] = v75;
        }
        while (v76-- > 1);
        if (v121.f64[0] >= v126)
          goto LABEL_83;
        v78 = v126 - v121.f64[0];
        if ((_DWORD)v27 != 1)
          goto LABEL_71;
        v79 = 0;
        v80 = 0;
        do
        {
          while (1)
          {
            v81 = v127.f64[v79];
            if (v81 <= v121.f64[0] + v78 * 0.2 || vabdd_f64(v81, v121.f64[v79]) < 4.0)
              break;
            ++v79;
            v80 = 1;
            if (v79 == 256)
              goto LABEL_71;
          }
          ++v79;
        }
        while (v79 != 256);
        if ((v80 & 1) == 0)
        {
          v92 = (double *)v105;
        }
        else
        {
LABEL_71:
          v82 = 0;
          v83 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v121.f64[0], 0);
          v84 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78, 0);
          do
          {
            v118[v82] = vdivq_f64(vsubq_f64(*(float64x2_t *)((char *)&v121 + v82 * 16), v83), v84);
            ++v82;
          }
          while (v82 != 128);
          v85 = 0;
          v86 = 0;
          v87 = dbl_2368AF320[(_DWORD)v27 == 1];
          v88 = 0.25;
          if ((_DWORD)v27 == 1)
            v88 = 0.5;
          do
          {
            v89 = *(double *)((char *)v118 + v85 * 8);
            if (v89 >= v87 && v89 < v88)
            {
              v114.f64[v86] = v127.f64[v85];
              *((double *)v112 + v86++) = v89;
            }
            ++v85;
          }
          while (v85 != 256);
          if (v86 <= 2)
          {
LABEL_83:
            sub_236784540(v70);
LABEL_17:
            v107 = 0uLL;
            v108 = 0.0;
            goto LABEL_18;
          }
          v91 = sub_236777230(v86, v114.f64, (double *)v112);
          if (v91 < 0.0)
            v91 = 0.0;
          *(double *)v96 = v91;
          *(_OWORD *)((char *)v96 + 8) = v94;
          v92 = (double *)v96;
        }
        sub_236775B70((float64x2_t *)&v107, v92);
        sub_236784540(v70);
      }
    }
    else
    {
      sub_2367769FC((uint64_t)&v107, v33, v27, v63, v64, v65, v66, v67);
    }
LABEL_18:
    v35 = v109 == *(double *)&v107 && v110 == *((double *)&v107 + 1);
    if (!v35 || v111 != v108)
    {
      v36 = v111 - *(double *)&qword_25642E850;
      v37 = (*((double *)&v107 + 1) - *((double *)&xmmword_25642E840 + 1))
          / (v110 - *((double *)&xmmword_25642E840 + 1));
      v38 = (v108 - *(double *)&qword_25642E850) / (v111 - *(double *)&qword_25642E850);
      v39 = -(*(double *)&xmmword_25642E840 * (*(double *)&v107 - v109)) / (v109 - *(double *)&xmmword_25642E840);
      v40 = -(*((double *)&xmmword_25642E840 + 1) * (*((double *)&v107 + 1) - v110))
          / (v110 - *((double *)&xmmword_25642E840 + 1));
      v41 = -(*(double *)&qword_25642E850 * (v108 - v111));
      *v10 = (*(double *)&v107 - *(double *)&xmmword_25642E840) / (v109 - *(double *)&xmmword_25642E840);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v10[4] = v37;
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      v10[8] = v38;
      *v9 = v39;
      v9[1] = v40;
      v9[2] = v41 / v36;
    }
    goto LABEL_29;
  }
  v15 = v8;
  v104 = 0.0;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v99 = 0.0;
  v97 = 0u;
  v98 = 0u;
  v16 = v0 - 1;
  memset(v96, 0, sizeof(v96));
  v17 = *(_QWORD *)(v1 + 8 * v16);
  v18 = (double *)sub_23676A304((uint64_t *)v17, 0x77747074u);
  if (!v18 || !(*(_DWORD *)(v17 + 72) >> 26) && *(_DWORD *)(v17 + 76) == 1835955314)
    v18 = (double *)&xmmword_25642E840;
  v20 = *v18;
  v19 = v18[1];
  v21 = v18[2];
  sub_23676AC50((uint64_t)&v100, *(_QWORD *)(v11 + 8 * v16));
  v22 = *(_QWORD *)(v11 + 8 * v12);
  v23 = (double *)sub_23676A304((uint64_t *)v22, 0x77747074u);
  if (!v23 || !(*(_DWORD *)(v22 + 72) >> 26) && *(_DWORD *)(v22 + 76) == 1835955314)
    v23 = (double *)&xmmword_25642E840;
  v25 = *v23;
  v24 = v23[1];
  v26 = v23[2];
  sub_23676AC50((uint64_t)v96, *(_QWORD *)(v11 + 8 * v12));
  if (v15 == 1.0)
  {
    *v10 = v20 / v25;
    v13[1] = 0;
    v13[2] = 0;
    *v13 = 0;
    v10[4] = v19 / v24;
    v14[1] = 0;
    v14[2] = 0;
    *v14 = 0;
    v10[8] = v21 / v26;
    goto LABEL_29;
  }
  v120 = 0.0;
  v119 = 0u;
  memset(v118, 0, sizeof(v118));
  memset(v112, 0, sizeof(v112));
  v113 = 0;
  v127.f64[0] = v20 / v25;
  v129.f64[0] = 0.0;
  v127.f64[1] = 0.0;
  v128 = 0;
  v129.f64[1] = v19 / v24;
  v130 = 0;
  v131 = 0uLL;
  v42 = v21 / v26;
  v132 = v42;
  if (v15 == 0.0)
  {
    v121 = (float64x2_t)v96[0];
    v122 = v96[1];
    v123 = v97;
    v124 = v98;
    v125 = v99;
    v118[0] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v129, *((double *)v96 + 1)), v127, *(double *)v96), v131, *(double *)&v96[1]);
    *(double *)&v118[1] = *((double *)v96 + 1) * 0.0 + *(double *)v96 * 0.0 + *(double *)&v96[1] * v42;
    *(float64x2_t *)((char *)&v118[1] + 8) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v129, *(double *)&v97), v127, *((double *)&v96[1] + 1)), v131, *((double *)&v97 + 1));
    *((double *)&v118[2] + 1) = *(double *)&v97 * 0.0 + *((double *)&v96[1] + 1) * 0.0 + *((double *)&v97 + 1) * v42;
    v119 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v129, v98.f64[1]), v127, v98.f64[0]), v131, v99);
    v120 = v98.f64[1] * 0.0 + v98.f64[0] * 0.0 + v99 * v42;
    sub_23676DC34((uint64_t)v10, (double *)v118, (uint64_t)v96);
    *(_OWORD *)&v115[16] = v102;
    v116 = v103;
    v117 = v104;
    *(_OWORD *)v115 = v101;
    v114 = v100;
    result = sub_23676DCF8(v114.f64, (double *)v112);
    if (!(_DWORD)result)
      return result;
    v44 = (float64x2_t *)v118;
    v45 = (int8x16_t *)v112;
    goto LABEL_28;
  }
  v106 = 0;
  memset(v105, 0, sizeof(v105));
  v123 = v102;
  v124 = v103;
  v125 = v104;
  v122 = v101;
  v121 = v100;
  if (!sub_23676DCF8(v121.f64, (double *)v118))
    return 0;
  v114 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v129, *((double *)v118 + 1)), v127, *(double *)v118), v131, *(double *)&v118[1]);
  *(double *)v115 = *((double *)v118 + 1) * 0.0 + *(double *)v118 * 0.0 + *(double *)&v118[1] * v42;
  *(float64x2_t *)&v115[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v129, *(double *)&v118[2]), v127, *((double *)&v118[1] + 1)), v131, *((double *)&v118[2] + 1));
  *(double *)&v115[24] = *(double *)&v118[2] * 0.0 + *((double *)&v118[1] + 1) * 0.0 + *((double *)&v118[2] + 1) * v42;
  v116 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v129, v119.f64[1]), v127, v119.f64[0]), v131, v120);
  v117 = v119.f64[1] * 0.0 + v119.f64[0] * 0.0 + v120 * v42;
  v47 = sub_236762F20((uint64_t)&v100);
  v48 = sub_236762F20((uint64_t)v96);
  if (v47 < 0.0)
    return 0;
  v49 = v48;
  if (v48 < 0.0)
    return 0;
  if (!sub_23676DBBC((uint64_t)&v127) || vabdd_f64(v47, v49) >= 0.01)
  {
    v107 = 0uLL;
    v108 = 0.0;
    sub_236784218((uint64_t)&v107, v47 * v15 + (1.0 - v15) * v49, v50, v51, v52, v53, v54, v55, v56, v93);
    v109 = *(double *)&v107 / *((double *)&v107 + 1) * v108;
    v110 = v108;
    v111 = v108 * ((1.0 - *(double *)&v107 - *((double *)&v107 + 1)) / *((double *)&v107 + 1));
    sub_23678434C((uint64_t)v105, &v109, (double *)&xmmword_25642E840);
    v44 = &v114;
    v45 = v105;
LABEL_28:
    sub_23676DC34((uint64_t)v10, v44->f64, (uint64_t)v45);
    goto LABEL_29;
  }
  *v10 = 1.0;
  v13[1] = 0;
  v13[2] = 0;
  *v13 = 0;
  v10[4] = 1.0;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  v10[8] = 1.0;
LABEL_29:
  for (i = 0; i != 3; ++i)
    v9[i] = v9[i] / 1.99996948;
  return 1;
}

uint64_t sub_236762C5C(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  int32x2_t *v8;
  uint64_t v9;
  uint64_t result;
  int32x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 == 1281450528)
  {
    if (a3 != 1281450528)
    {
      if (a3 != 1482250784)
        return 0;
      sub_23676D10C(*(uint64_t **)(a1 + 56));
      result = sub_23676DB6C((uint64_t *)a1, 1, v9);
      if ((_DWORD)result)
      {
        if (sub_236762E88((uint64_t)a4, (uint64_t)a5))
          return 1;
        v11 = sub_23676C120(*(uint64_t **)(a1 + 56), 3, 3u, a4, a5);
        result = 0;
        if (a1)
        {
          if (v11)
          {
            v12 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              do
              {
                v13 = v12;
                v12 = *(_QWORD *)(v12 + 56);
              }
              while (v12);
              *(_QWORD *)(v13 + 56) = v11;
              v11[7] = 0;
            }
            else
            {
              *(_QWORD *)a1 = v11;
            }
            result = sub_23676D8DC((uint64_t *)a1);
            if ((_DWORD)result)
              return 1;
          }
        }
      }
      return result;
    }
    if (sub_236762E88((uint64_t)a4, (uint64_t)a5))
      return 1;
    sub_23676D10C(*(uint64_t **)(a1 + 56));
    result = sub_23676DB6C((uint64_t *)a1, 1, v15);
    if (!(_DWORD)result)
      return result;
    v16 = sub_23676C120(*(uint64_t **)(a1 + 56), 3, 3u, a4, a5);
    result = 0;
    if (!a1 || !v16)
      return result;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      do
      {
        v18 = v17;
        v17 = *(_QWORD *)(v17 + 56);
      }
      while (v17);
      *(_QWORD *)(v18 + 56) = v16;
      v16[7] = 0;
    }
    else
    {
      *(_QWORD *)a1 = v16;
    }
    result = sub_23676D8DC((uint64_t *)a1);
    if (!(_DWORD)result)
      return result;
LABEL_33:
    sub_23676D2F8(*(uint64_t **)(a1 + 56));
LABEL_34:
    result = sub_23676DB6C((uint64_t *)a1, 1, (uint64_t)v8);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  if (a2 != 1482250784)
    return a2 == a3;
  if (a3 != 1281450528)
  {
    if (a3 == 1482250784)
    {
      if (!sub_236762E88((uint64_t)a4, (uint64_t)a5))
      {
        v8 = sub_23676C120(*(uint64_t **)(a1 + 56), 3, 3u, a4, a5);
        goto LABEL_34;
      }
      return 1;
    }
    return 0;
  }
  if (sub_236762E88((uint64_t)a4, (uint64_t)a5))
    goto LABEL_33;
  v14 = sub_23676C120(*(uint64_t **)(a1 + 56), 3, 3u, a4, a5);
  result = sub_23676DB6C((uint64_t *)a1, 1, (uint64_t)v14);
  if ((_DWORD)result)
    goto LABEL_33;
  return result;
}

BOOL sub_236762E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t i;
  _QWORD v6[9];

  if (!(a1 | a2))
    return 1;
  if (!a1 && a2)
    return 0;
  v3 = 0;
  v6[0] = 0x3FF0000000000000;
  memset(&v6[1], 0, 24);
  v6[4] = 0x3FF0000000000000;
  memset(&v6[5], 0, 24);
  v4 = 0.0;
  v6[8] = 0x3FF0000000000000;
  do
  {
    v4 = v4 + vabdd_f64(*(double *)(a1 + v3 * 8), *(double *)&v6[v3]);
    ++v3;
  }
  while (v3 != 9);
  for (i = 0; i != 24; i += 8)
    v4 = v4 + fabs(*(double *)(a2 + i));
  return v4 < 0.002;
}

double sub_236762F20(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  _OWORD v23[4];
  uint64_t v24;

  v22 = 0.0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v1 = *(_OWORD *)(a1 + 48);
  v23[2] = *(_OWORD *)(a1 + 32);
  v23[3] = v1;
  v24 = *(_QWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 16);
  v23[0] = *(_OWORD *)a1;
  v23[1] = v2;
  if (!sub_23676DCF8((double *)v23, (double *)&v18))
    return 0.0;
  v3 = 0;
  v4 = *((double *)&v18 + 1) * *((double *)&xmmword_25642E840 + 1)
     + *(double *)&v18 * *(double *)&xmmword_25642E840
     + *(double *)&v19 * *(double *)&qword_25642E850;
  v5 = *(double *)&v20 * *((double *)&xmmword_25642E840 + 1)
     + *((double *)&v19 + 1) * *(double *)&xmmword_25642E840
     + *((double *)&v20 + 1) * *(double *)&qword_25642E850;
  v6 = 1.0
     / (v4
      + v5
      + *((double *)&v21 + 1) * *((double *)&xmmword_25642E840 + 1)
      + *(double *)&v21 * *(double *)&xmmword_25642E840
      + v22 * *(double *)&qword_25642E850);
  v7 = v4 * v6;
  v8 = v5 * v6;
  v9 = v7 + v7;
  v10 = 1.5 - (v7 - v8 * 6.0);
  v11 = v9 / v10;
  v12 = v8 * 3.0 / v10;
  v13 = 0.0;
  v14 = 0.0;
  while (1)
  {
    v15 = v14;
    v16 = v13;
    v13 = *(double *)((char *)&unk_2368B3A68 + v3);
    v14 = (v12
         - *(double *)((char *)&unk_2368B3A68 + v3 + 16)
         - *(double *)((char *)&unk_2368B3A68 + v3 + 24) * (v11 - *(double *)((char *)&unk_2368B3A68 + v3 + 8)))
        / sqrt(*(double *)((char *)&unk_2368B3A68 + v3 + 24) * *(double *)((char *)&unk_2368B3A68 + v3 + 24) + 1.0);
    if (v3)
    {
      if (v15 / v14 < 0.0)
        break;
    }
    v3 += 32;
    if (v3 == 992)
      return -1.0;
  }
  return 1000000.0 / (v16 + v15 / (v15 - v14) * (v13 - v16));
}

uint64_t *sub_23676307C(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v7;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v25;
  uint64_t ***v26;
  unsigned int v27[256];
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a2 - 256 < 0xFFFFFF01)
    return 0;
  v14 = 0;
  do
  {
    v15 = *(_DWORD *)(a3 + v14 * 4);
    if (v15 - 10 <= 5)
      v15 = dword_2368B0BE8[v15 - 10];
    v27[v14++] = v15;
  }
  while (a2 != v14);
  if (*(_DWORD *)(*(_QWORD *)a4 + 80) != 1129142603
    || *(_DWORD *)(*(_QWORD *)(a4 + 8 * (a2 - 1)) + 80) != 1129142603)
  {
    return sub_236761294(a1, a2, v27, a4, a5, a6, a7);
  }
  v26 = 0;
  v7 = (uint64_t *)sub_23676D59C(a1, 4u, 4);
  if (v7)
  {
    v16 = sub_236761294(a1, a2, v27, a4, a5, a6, a7);
    v25 = v16;
    if (v16)
    {
      v17 = v16;
      v26 = sub_236765E44(a1, a2, (uint64_t)v27, a4);
      if (!v26)
        goto LABEL_19;
      v28[0] = vdupq_n_s32(sub_236775FC8(1129142603, a7));
      v28[1] = v28[0];
      v21 = sub_23676C698(a1, (int *)v28, 4u, 4, 0, v18, v19, v20);
      if (!v21)
        goto LABEL_19;
      v22 = (uint64_t)v21;
      v21[7] = (int32x2_t)*v7;
      *v7 = (uint64_t)v21;
      if (!sub_23676D8DC(v7))
        goto LABEL_19;
      v23 = sub_23676CE98(v22, (uint64_t (*)(_QWORD, _QWORD))sub_236763EF0, (uint64_t)&v25);
      v17 = v25;
      if (v23)
      {
        sub_23676D934(v25);
        sub_236765578(v26);
        return v7;
      }
      if (v25)
LABEL_19:
        sub_23676D934(v17);
    }
    if (v26)
      sub_236765578(v26);
    sub_23676D934(v7);
    return 0;
  }
  return v7;
}

uint64_t *sub_2367632B4(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v7;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  double v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  double v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  unsigned int v58[256];
  uint64_t v59;
  int v60;
  _WORD v61[16];
  _OWORD v62[4];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a2 - 256 < 0xFFFFFF01)
    return 0;
  v14 = 0;
  do
  {
    v15 = *(_DWORD *)(a3 + v14 * 4);
    if (v15 - 10 <= 5)
      v15 = dword_2368B0BE8[v15 - 10];
    v58[v14++] = v15;
  }
  while (a2 != v14);
  if (*(_DWORD *)(*(_QWORD *)a4 + 80) != 1129142603)
    return sub_236761294(a1, a2, v58, a4, a5, a6, a7);
  v16 = a2 - 1;
  v17 = *(_QWORD *)(a4 + 8 * v16);
  if (*(_DWORD *)(v17 + 80) != 1129142603 && *(_DWORD *)(v17 + 76) != 1886549106)
    return sub_236761294(a1, a2, v58, a4, a5, a6, a7);
  v7 = (uint64_t *)sub_23676D59C(a1, 4u, 4);
  if (v7)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_QWORD *)&v55 = sub_23676AD4C(*(_QWORD *)(a4 + 8 * v16), 1u);
    if ((_QWORD)v55)
    {
      v18 = *(_QWORD *)(a4 + 8 * v16);
      if (v18)
        v19 = *(uint64_t **)(v18 + 8);
      else
        v19 = 0;
      v21 = 0.0;
      if (*(_DWORD *)(v18 + 76) == 1886549106)
      {
        v22 = *(_DWORD *)(v18 + 80);
        v51 = sub_23677604C(v22);
        v23 = sub_236783FA8(v19);
        if (v23)
        {
          v24 = v23;
          sub_236776338(v22);
          v25 = sub_236785A68();
          sub_236769708(v24);
          v50 = v25;
          if (v25)
          {
            v59 = 0x4A00000006;
            v60 = 74;
            v26 = 1;
            v27 = 8;
            while (v27 != -4)
            {
              v28 = *(_DWORD *)((char *)&v59 + v27);
              if (v28)
              {
                v26 *= v28;
                v27 -= 4;
                if (((v28 * (unint64_t)v26) & 0xFFFFFFFF00000000) == 0)
                  continue;
              }
              goto LABEL_44;
            }
            if (!v26)
            {
LABEL_44:
              v31 = 0.0;
              goto LABEL_46;
            }
            if (v26 < 1)
            {
              v31 = 0.0;
            }
            else
            {
              v29 = 0;
              v30 = 4 * v51;
              v31 = 0.0;
              v49 = v51;
              do
              {
                v32 = 2;
                v52 = v29;
                do
                {
                  v33 = *((_DWORD *)&v59 + v32);
                  v34 = v29;
                  v29 /= v33;
                  v35 = (double)(v34 - v29 * v33) * 65535.0 / (double)(v33 - 1) + 0.5;
                  if (v35 <= 0.0)
                  {
                    v36 = 0;
                  }
                  else if (v35 >= 65535.0)
                  {
                    v36 = -1;
                  }
                  else
                  {
                    v36 = (COERCE_UNSIGNED_INT64(v35 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
                  }
                  v61[v32] = v36;
                  v37 = v32-- + 1;
                }
                while (v37 > 1);
                v57[0] = 0;
                v57[1] = 0x100000001;
                (*(void (**)(uint64_t, _WORD *, _OWORD *, uint64_t, uint64_t, _QWORD *))(v50 + 8))(v50, v61, v62, 1, 1, v57);
                v38 = 0;
                v39 = 0.0;
                do
                {
                  v39 = v39 + *(float *)((char *)v62 + v38);
                  v38 += 4;
                }
                while (v30 != v38);
                if (v39 > v31)
                {
                  v40 = v49;
                  do
                    --v40;
                  while (v40);
                  v31 = v39;
                }
                v29 = v52 + 1;
              }
              while (v52 + 1 != v26);
            }
LABEL_46:
            sub_236784540(v50);
            v21 = v31;
          }
        }
      }
      *((double *)&v56 + 1) = v21 / 100.0;
      if (v21 / 100.0 > 0.0)
      {
        v41 = sub_236761294(a1, a2, v58, a4, a5, a6, a7);
        *(_QWORD *)&v53 = v41;
        if (v41)
        {
          v42 = v41;
          *((_QWORD *)&v54 + 1) = sub_236765E44(a1, a2, (uint64_t)v58, a4);
          if (!*((_QWORD *)&v54 + 1))
            goto LABEL_55;
          v43 = sub_236783FA8(a1);
          *((_QWORD *)&v53 + 1) = sub_236785A68();
          if (!*((_QWORD *)&v53 + 1))
            goto LABEL_55;
          *(_QWORD *)&v54 = sub_236785A68();
          if (!(_QWORD)v54)
            goto LABEL_55;
          sub_236769708(v43);
          *((_QWORD *)&v55 + 1) = 0;
          v62[0] = vdupq_n_s32(sub_236775FC8(1129142603, a7));
          v62[1] = v62[0];
          v47 = sub_23676C698(a1, (int *)v62, 4u, 4, 0, v44, v45, v46);
          if (!v47
            || (v48 = (uint64_t)v47, v47[7] = (int32x2_t)*v7, *v7 = (uint64_t)v47, !sub_23676D8DC(v7))
            || (sub_23676CE98(v48, (uint64_t (*)(_QWORD, _QWORD))sub_236763834, (uint64_t)&v53),
                (v42 = (uint64_t *)v53) != 0))
          {
LABEL_55:
            sub_23676D934(v42);
          }
        }
      }
    }
    if ((_QWORD)v54)
      sub_236784540(v54);
    if (*((_QWORD *)&v53 + 1))
      sub_236784540(*((uint64_t *)&v53 + 1));
    if (*((_QWORD *)&v54 + 1))
      sub_236765578(*((uint64_t ****)&v54 + 1));
    if ((_QWORD)v55)
      sub_23676D934((_QWORD *)v55);
  }
  return v7;
}

uint64_t sub_236763834(uint16x4_t *a1, __int16 *a2, uint64_t a3)
{
  uint32x4_t v6;
  uint64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float v11;
  float v12;
  __int16 v13;
  uint64_t i;
  double v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  float v22;
  double v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  float v30;
  float32x2_t v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  __int16 v45;
  double v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  float64x2_t v54;
  double v55;
  uint64_t v57;
  _OWORD v58[4];
  uint64_t v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  double v63;
  float32x2_t v64;
  float v65;
  float v66;
  uint64_t __dst;
  float v68;
  float v69;
  float32x4_t v70;
  float v71[4];
  __int128 v72;
  __int128 __src;
  float32x2_t v74;
  float v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v6 = vmovl_u16(*a1);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = vcvtq_f64_u64(v7);
  v7.i64[0] = v6.u32[2];
  v7.i64[1] = v6.u32[3];
  v9 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
  v10 = vdivq_f64(vcvtq_f64_u64(v7), v9);
  v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v8, v9)), v10);
  v11 = sub_236765B54(*(_DWORD **)(a3 + 24), COERCE_FLOAT(vcvt_f32_f64(v10).i32[1]));
  v12 = v11;
  v66 = v11;
  if (a1->i16[0] || a1->i16[1] || (v13 = a1->i16[2]) != 0)
  {
    (*(void (**)(float32x4_t *, uint64_t *))(*(_QWORD *)a3 + 32))(&v70, &__dst);
    for (i = 0; i != 4; ++i)
    {
      v15 = *((float *)&__dst + i) * 65535.0 + 0.5;
      if (v15 <= 0.0)
      {
        v16 = 0;
      }
      else if (v15 >= 65535.0)
      {
        v16 = -1;
      }
      else
      {
        v16 = (COERCE_UNSIGNED_INT64(v15 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      a2[i] = v16;
    }
    if (vabds_f32(v69, v12) >= 0.0000457770657)
    {
      v17 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)&v58[0] = 0;
      *((_QWORD *)&v58[0] + 1) = 0x100000001;
      (*(void (**)(void))(v17 + 8))();
      v18 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)&v58[0] = 0;
      *((_QWORD *)&v58[0] + 1) = 0x100000001;
      (*(void (**)(void))(v18 + 8))();
      v57 = a3;
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_DWORD *)(v19 + 8);
      if ((v20 - 3) <= 1 && *(_DWORD *)(v19 + 12) == 3)
      {
        v21 = 0;
        *(_QWORD *)&__src = __dst;
        *((float *)&__src + 2) = v68;
        v22 = v66;
        if (v20 != 4)
          v22 = 0.0;
        v63 = 0.0;
        v62 = 0uLL;
        memset(v58, 0, sizeof(v58));
        *((float *)&__src + 3) = v22;
        v23 = 1.0e20;
        v59 = 0;
        do
        {
          (*(void (**)(__int128 *, float32x2_t *, uint64_t))(v19 + 32))(&__src, &v74, v19);
          v24 = 0;
          v25 = 0.0;
          do
          {
            v25 = v25 + (float)((float)(v64.f32[v24] - v74.f32[v24]) * (float)(v64.f32[v24] - v74.f32[v24]));
            ++v24;
          }
          while (v24 != 3);
          v26 = sqrtf(v25);
          if (v23 <= v26)
            break;
          v27 = *(unsigned int *)(v19 + 8);
          if ((_DWORD)v27)
            memcpy(&__dst, &__src, 4 * v27);
          if (v26 <= 0.0)
            break;
          v28 = 0;
          v29 = (double *)&v58[1] + 1;
          do
          {
            v72 = __src;
            *(float *)((char *)&v72 + v28) = *(float *)((char *)&v72 + v28)
                                           + flt_2368AFC68[*(float *)((char *)&v72 + v28) < 0.999];
            (*(void (**)(__int128 *, float *, uint64_t))(v19 + 32))(&v72, v71, v19);
            v30 = v71[1];
            v31 = v74;
            *(v29 - 3) = (float)((float)(v71[0] - v74.f32[0]) / 0.001);
            *v29 = (float)((float)(v30 - v31.f32[1]) / 0.001);
            v32 = v75;
            v29[3] = (float)((float)(v71[2] - v75) / 0.001);
            v28 += 4;
            ++v29;
          }
          while (v28 != 12);
          v60 = vcvtq_f64_f32(vsub_f32(v31, v64));
          v61 = (float)(v32 - v65);
          if (!sub_23676DE00(v62.f64, (uint64_t)v58, v60.f64))
            return 1;
          v33 = 0;
          *(float32x2_t *)&__src = vsub_f32(*(float32x2_t *)&__src, vcvt_f32_f64(v62));
          v34 = v63;
          *((float *)&__src + 2) = *((float *)&__src + 2) - v34;
          do
          {
            v35 = *(float *)((char *)&__src + v33);
            v36 = 0.0;
            if (v35 < 0.0 || (v36 = 1.0, v35 > 1.0))
              *(float *)((char *)&__src + v33) = v36;
            v33 += 4;
          }
          while (v33 != 12);
          ++v21;
          v23 = v26;
        }
        while (v21 != 30);
        v69 = v66;
        v38 = *((float *)&__dst + 1);
        v37 = v68;
        v39 = (float)((float)(*(float *)&__dst + *((float *)&__dst + 1)) + v68);
        v40 = v66;
        v41 = v66 + v39;
        v42 = *(double *)(v57 + 56);
        v43 = 1.0;
        if (v41 > v42)
        {
          v43 = 1.0 - (v41 - v42) / v39;
          if (v43 < 0.0)
            v43 = 0.0;
        }
        v44 = v43 * *(float *)&__dst * 65535.0 + 0.5;
        if (v44 <= 0.0)
        {
          v45 = 0;
        }
        else if (v44 >= 65535.0)
        {
          v45 = -1;
        }
        else
        {
          v45 = (COERCE_UNSIGNED_INT64(v44 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        *a2 = v45;
        v47 = v43 * v38 * 65535.0 + 0.5;
        if (v47 <= 0.0)
        {
          v48 = 0;
        }
        else if (v47 >= 65535.0)
        {
          v48 = -1;
        }
        else
        {
          v48 = (COERCE_UNSIGNED_INT64(v47 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        a2[1] = v48;
        v49 = v43 * v37 * 65535.0 + 0.5;
        if (v49 <= 0.0)
        {
          v50 = 0;
        }
        else if (v49 >= 65535.0)
        {
          v50 = -1;
        }
        else
        {
          v50 = (COERCE_UNSIGNED_INT64(v49 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        a2[2] = v50;
        v51 = v40 * 65535.0 + 0.5;
        if (v51 <= 0.0)
        {
          v52 = 0;
        }
        else if (v51 >= 65535.0)
        {
          v52 = -1;
        }
        else
        {
          v52 = (COERCE_UNSIGNED_INT64(v51 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        a2[3] = v52;
        v53 = *(_QWORD *)(v57 + 8);
        *(_QWORD *)&v58[0] = 0;
        *((_QWORD *)&v58[0] + 1) = 0x100000001;
        (*(void (**)(void))(v53 + 8))();
        v54 = vsubq_f64((float64x2_t)0, (float64x2_t)0);
        v55 = fabs(sqrt(vaddvq_f64(vmulq_f64(v54, v54)) + (0.0 - 0.0) * (0.0 - 0.0)));
        if (v55 > *(double *)(v57 + 40))
          *(double *)(v57 + 40) = v55;
      }
    }
  }
  else
  {
    a2[2] = 0;
    *(_DWORD *)a2 = 0;
    v46 = v11 * 65535.0 + 0.5;
    if (v46 > 0.0)
    {
      if (v46 >= 65535.0)
        v13 = -1;
      else
        v13 = (COERCE_UNSIGNED_INT64(v46 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
    }
    a2[3] = v13;
  }
  return 1;
}

uint64_t sub_236763EF0(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;

  if (*a1 || a1[1] || a1[2])
  {
    (*(void (**)(void))(*a3 + 24))();
  }
  else
  {
    *(_WORD *)(a2 + 4) = 0;
    *(_DWORD *)a2 = 0;
    v5 = a3[1];
    v7 = a1[3];
    v6 = 0;
    (*(void (**)(__int16 *, __int16 *))(*(_QWORD *)v5 + 128))(&v7, &v6);
    *(_WORD *)(a2 + 6) = v6;
  }
  return 1;
}

void *sub_236763F78(int a1, size_t size)
{
  if (size <= 0x20000000)
    return malloc_type_malloc(size, 0x56E2CBA4uLL);
  else
    return 0;
}

void *sub_236763F9C(uint64_t *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t (**v5)(void);
  void *v6;
  void *v7;

  if (a1)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == a1)
      {
        v4 = a1;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = (uint64_t (**)(void))v4[6];
  if (!v5)
    v5 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v6 = (void *)(*v5)();
  v7 = v6;
  if (v6)
    bzero(v6, a2);
  return v7;
}

void sub_236764024(int a1, void *a2)
{
  if (a2)
    free(a2);
}

void *sub_236764034(int a1, void *ptr, size_t size)
{
  if (size <= 0x20000000)
    return malloc_type_realloc(ptr, size, 0xA1FF8175uLL);
  else
    return 0;
}

uint64_t sub_236764060(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;

  v4 = a3 * a2;
  if (!v4)
    return 0;
  v5 = 0xFFFFFFFF / a3 <= a2 || v4 > 0x20000000;
  v6 = !v5 && v4 >= a2;
  if (!v6 || v4 < a3)
    return 0;
  if (a1)
  {
    v9 = &qword_25642E910;
    v10 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == a1)
      {
        v10 = a1;
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)&unk_250800620;
  }
  v11 = (__int128 *)v10[6];
  if (!v11)
    v11 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v11 + 1))();
}

void *sub_2367640E4(uint64_t *a1, const void *a2, unsigned int a3)
{
  void *v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t (**v8)(void);
  void *v9;

  if (a3 > 0x20000000)
    return 0;
  if (a1)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == a1)
      {
        v7 = a1;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (uint64_t (**)(void))v7[6];
  if (!v8)
    v8 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v9 = (void *)(*v8)();
  v3 = v9;
  if (a2 && v9)
    memmove(v9, a2, a3);
  return v3;
}

pthread_mutex_t *sub_236764198(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t (**v3)(void);
  pthread_mutex_t *v4;

  if (a1)
  {
    v1 = &qword_25642E910;
    v2 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v1 = (uint64_t *)*v1;
      if (!v1)
        break;
      if (v1 == a1)
      {
        v2 = a1;
        break;
      }
    }
  }
  else
  {
    v2 = (uint64_t *)&unk_250800620;
  }
  v3 = (uint64_t (**)(void))v2[6];
  if (!v3)
    v3 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v4 = (pthread_mutex_t *)(*v3)();
  pthread_mutex_init(v4, 0);
  return v4;
}

uint64_t sub_236764214(uint64_t *a1, pthread_mutex_t *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  __int128 *v7;

  result = pthread_mutex_destroy(a2);
  if (a2)
  {
    if (a1)
    {
      v5 = &qword_25642E910;
      v6 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v5 = (uint64_t *)*v5;
        if (!v5)
          break;
        if (v5 == a1)
        {
          v6 = a1;
          break;
        }
      }
    }
    else
    {
      v6 = (uint64_t *)&unk_250800620;
    }
    v7 = (__int128 *)v6[6];
    if (!v7)
      v7 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(uint64_t *, pthread_mutex_t *))v7 + 2))(a1, a2);
  }
  return result;
}

BOOL sub_2367642A0(int a1, pthread_mutex_t *a2)
{
  return pthread_mutex_lock(a2) == 0;
}

uint64_t sub_2367642C0(int a1, pthread_mutex_t *a2)
{
  return pthread_mutex_unlock(a2);
}

void *sub_2367642C8(uint64_t a1, void *__src, size_t __n)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  if (!__src)
    return 0;
  v3 = __n;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v6 + 8);
  v7 = *(_DWORD *)(v6 + 12);
  v9 = (__n + 7) & 0xFFFFFFF8;
  if (v9 > v8 - v7)
  {
    if (2 * v8 <= v9)
      v10 = (__n + 7) & 0xFFFFFFF8;
    else
      v10 = 2 * v8;
    v6 = sub_23676436C(*(uint64_t **)a1, v10);
    if (!v6)
      return 0;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_DWORD *)(v6 + 12);
  }
  v11 = *(_QWORD *)v6;
  *(_DWORD *)(v6 + 12) = v7 + v9;
  if (!v11)
    return 0;
  v12 = (void *)(v11 + v7);
  memcpy(v12, __src, v3);
  return v12;
}

uint64_t sub_23676436C(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;

  if (a2)
    v3 = a2;
  else
    v3 = 20480;
  if (a1)
  {
    v4 = &qword_25642E910;
    v5 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == a1)
      {
        v5 = a1;
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)&unk_250800620;
  }
  v6 = (__int128 *)v5[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (*((uint64_t (**)(uint64_t *, uint64_t))v6 + 1))(a1, 24);
  if (v7)
  {
    if (a1)
    {
      v8 = &qword_25642E910;
      v9 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          break;
        if (v8 == a1)
        {
          v9 = a1;
          break;
        }
      }
    }
    else
    {
      v9 = (uint64_t *)&unk_250800620;
    }
    v10 = (__int128 *)v9[6];
    if (!v10)
      v10 = &xmmword_2542ABF08;
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t))v10)(a1, v3);
    *(_QWORD *)v7 = v11;
    if (v11)
    {
      *(_DWORD *)(v7 + 8) = v3;
      *(_DWORD *)(v7 + 12) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      if (a1)
      {
        v12 = &qword_25642E910;
        v13 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v12 = (uint64_t *)*v12;
          if (!v12)
            break;
          if (v12 == a1)
          {
            v13 = a1;
            break;
          }
        }
      }
      else
      {
        v13 = (uint64_t *)&unk_250800620;
      }
      v14 = (__int128 *)v13[6];
      if (!v14)
        v14 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v14 + 2))(a1, v7);
      return 0;
    }
  }
  return v7;
}

uint64_t sub_2367644B8(uint64_t *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t (**v14)();
  uint64_t (*v15)();
  char __str[1024];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = vsnprintf(__str, 0x3FFuLL, a3, &a9);
  if (a1)
  {
    v12 = &qword_25642E910;
    v13 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == a1)
      {
        v13 = a1;
        break;
      }
    }
  }
  else
  {
    v13 = (uint64_t *)&unk_250800620;
  }
  v14 = (uint64_t (**)())v13[3];
  if (!v14)
    v14 = &off_2542ABF00;
  v15 = *v14;
  if (v15)
    return ((uint64_t (*)(uint64_t *, uint64_t, char *))v15)(a1, a2, __str);
  return result;
}

uint64_t sub_236764590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v11;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  const float *v44;
  float32x4_t v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  __int128 *v49;
  int *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  __int128 *v54;
  uint64_t *v55;
  uint64_t *v56;
  __int128 *v57;
  uint64_t *v58;
  uint64_t *v59;
  __int128 *v60;
  uint64_t *v61;
  uint64_t *v62;
  __int128 *v63;
  int32x4_t v64;
  float32x4_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0xFFFB)
  {
    v9 = "Couldn't create tone curve of more than 65530 entries";
LABEL_10:
    sub_2367644B8(a1, 2, v9, a4, a5, a6, a7, a8, v64.i8[0]);
    return 0;
  }
  v11 = a2;
  if (!(a3 | a2))
  {
    v9 = "Couldn't create tone curve with zero segments and no table";
    goto LABEL_10;
  }
  if (a1)
  {
    v14 = &qword_25642E910;
    v15 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v14 = (uint64_t *)*v14;
      if (!v14)
        break;
      if (v14 == a1)
      {
        v15 = a1;
        break;
      }
    }
  }
  else
  {
    v15 = (uint64_t *)&unk_250800620;
  }
  v18 = (__int128 *)v15[6];
  if (!v18)
    v18 = &xmmword_2542ABF08;
  v19 = (*((uint64_t (**)(uint64_t *, uint64_t))v18 + 1))(a1, 56);
  v16 = v19;
  if (v19)
  {
    if ((_DWORD)a3)
    {
      if (a1)
      {
        v22 = &qword_25642E910;
        v23 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v22 = (uint64_t *)*v22;
          if (!v22)
            break;
          if (v22 == a1)
          {
            v23 = a1;
            break;
          }
        }
      }
      else
      {
        v23 = (uint64_t *)&unk_250800620;
      }
      v24 = (__int128 *)v23[6];
      if (!v24)
        v24 = &xmmword_2542ABF08;
      v25 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v24 + 4))(a1, a3, 112);
      *(_QWORD *)(v16 + 16) = v25;
      if (!v25)
        goto LABEL_82;
      if (a1)
      {
        v26 = &qword_25642E910;
        v27 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v26 = (uint64_t *)*v26;
          if (!v26)
            break;
          if (v26 == a1)
          {
            v27 = a1;
            break;
          }
        }
      }
      else
      {
        v27 = (uint64_t *)&unk_250800620;
      }
      v28 = (__int128 *)v27[6];
      if (!v28)
        v28 = &xmmword_2542ABF08;
      v29 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v28 + 4))(a1, a3, 8);
      *(_QWORD *)(v16 + 32) = v29;
      if (!v29)
        goto LABEL_82;
    }
    else
    {
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 32) = 0;
    }
    *(_DWORD *)(v16 + 8) = a3;
    if ((_DWORD)v11)
    {
      if (a1)
      {
        v30 = &qword_25642E910;
        v31 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v30 = (uint64_t *)*v30;
          if (!v30)
            break;
          if (v30 == a1)
          {
            v31 = a1;
            break;
          }
        }
      }
      else
      {
        v31 = (uint64_t *)&unk_250800620;
      }
      v33 = (__int128 *)v31[6];
      if (!v33)
        v33 = &xmmword_2542ABF08;
      v34 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v33 + 4))(a1, v11, 2);
      *(_QWORD *)(v16 + 48) = v34;
      if (!v34)
        goto LABEL_82;
      v32 = v34;
      *(_DWORD *)(v16 + 40) = v11;
      if (a5)
      {
        v35 = 0;
        do
        {
          *(_WORD *)(v34 + 2 * v35) = *(_WORD *)(a5 + 2 * v35);
          ++v35;
        }
        while (v11 != v35);
      }
    }
    else
    {
      v32 = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_DWORD *)(v16 + 40) = 0;
    }
    if (!(_DWORD)a3 || !a4)
      goto LABEL_81;
    if (a1)
    {
      v36 = &qword_25642E910;
      v37 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v36 = (uint64_t *)*v36;
        if (!v36)
          break;
        if (v36 == a1)
        {
          v37 = a1;
          break;
        }
      }
    }
    else
    {
      v37 = (uint64_t *)&unk_250800620;
    }
    v38 = (__int128 *)v37[6];
    if (!v38)
      v38 = &xmmword_2542ABF08;
    v39 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v38 + 4))(a1, a3, 8);
    *(_QWORD *)(v16 + 24) = v39;
    if (v39)
    {
      v40 = 0;
      do
      {
        v41 = a4 + 112 * v40;
        v43 = *(_DWORD *)(v41 + 8);
        v42 = (int *)(v41 + 8);
        if (!v43)
        {
          v44 = (const float *)(a4 + 112 * v40 + 96);
          v45 = vld1q_dup_f32(v44);
          v64 = (int32x4_t)v45;
          v65 = v45;
          *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v40) = sub_236768588(a1, v64.i32, 1u, 1, 0, 1, v20, v21);
        }
        memmove((void *)(*(_QWORD *)(v16 + 16) + 112 * v40), (const void *)(a4 + 112 * v40), 0x70uLL);
        v46 = *v42;
        if (*v42 || !*(_QWORD *)(a4 + 112 * v40 + 104))
        {
          *(_QWORD *)(*(_QWORD *)(v16 + 16) + 112 * v40 + 104) = 0;
        }
        else
        {
          if (a1)
          {
            v47 = &qword_25642E910;
            while (1)
            {
              v47 = (uint64_t *)*v47;
              if (!v47)
                break;
              if (v47 == a1)
              {
                v48 = a1;
                goto LABEL_74;
              }
            }
          }
          v48 = (uint64_t *)&unk_250800620;
LABEL_74:
          v49 = (__int128 *)v48[6];
          if (!v49)
            v49 = &xmmword_2542ABF08;
          *(_QWORD *)(*(_QWORD *)(v16 + 16) + 112 * v40 + 104) = (*((uint64_t (**)(uint64_t *))v49 + 5))(a1);
          v46 = *v42;
        }
        v50 = sub_236764B0C(a1, v46, 0);
        if (v50)
          *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v40) = *((_QWORD *)v50 + 21);
        ++v40;
      }
      while (v40 != a3);
      LODWORD(v11) = *(_DWORD *)(v16 + 40);
      v32 = *(_QWORD *)(v16 + 48);
LABEL_81:
      v64 = vdupq_n_s32(v11);
      v65 = (float32x4_t)v64;
      v51 = sub_236768588(a1, v64.i32, 1u, 1, v32, 0, v20, v21);
      *(_QWORD *)v16 = v51;
      if (v51)
        return v16;
    }
LABEL_82:
    if (*(_QWORD *)(v16 + 16))
    {
      if (a1)
      {
        v52 = &qword_25642E910;
        v53 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v52 = (uint64_t *)*v52;
          if (!v52)
            break;
          if (v52 == a1)
          {
            v53 = a1;
            break;
          }
        }
      }
      else
      {
        v53 = (uint64_t *)&unk_250800620;
      }
      v54 = (__int128 *)v53[6];
      if (!v54)
        v54 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *))v54 + 2))(a1);
    }
    if (*(_QWORD *)(v16 + 32))
    {
      if (a1)
      {
        v55 = &qword_25642E910;
        v56 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v55 = (uint64_t *)*v55;
          if (!v55)
            break;
          if (v55 == a1)
          {
            v56 = a1;
            break;
          }
        }
      }
      else
      {
        v56 = (uint64_t *)&unk_250800620;
      }
      v57 = (__int128 *)v56[6];
      if (!v57)
        v57 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *))v57 + 2))(a1);
    }
    if (*(_QWORD *)(v16 + 48))
    {
      if (a1)
      {
        v58 = &qword_25642E910;
        v59 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v58 = (uint64_t *)*v58;
          if (!v58)
            break;
          if (v58 == a1)
          {
            v59 = a1;
            break;
          }
        }
      }
      else
      {
        v59 = (uint64_t *)&unk_250800620;
      }
      v60 = (__int128 *)v59[6];
      if (!v60)
        v60 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *))v60 + 2))(a1);
    }
    if (a1)
    {
      v61 = &qword_25642E910;
      v62 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v61 = (uint64_t *)*v61;
        if (!v61)
          break;
        if (v61 == a1)
        {
          v62 = a1;
          break;
        }
      }
    }
    else
    {
      v62 = (uint64_t *)&unk_250800620;
    }
    v63 = (__int128 *)v62[6];
    if (!v63)
      v63 = &xmmword_2542ABF08;
    (*((void (**)(uint64_t *, uint64_t))v63 + 2))(a1, v16);
    return 0;
  }
  return v16;
}

int *sub_236764B0C(uint64_t *a1, int a2, _DWORD *a3)
{
  uint64_t *v3;
  int **v4;
  int *result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
  {
    v3 = &qword_25642E910;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == a1)
        goto LABEL_8;
    }
    a1 = (uint64_t *)&unk_250800620;
  }
  else
  {
    a1 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v4 = (int **)&unk_25642E920;
  if (a1[8])
    v4 = (int **)a1[8];
  result = *v4;
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = -a2;
  if (result)
  {
    while (1)
    {
      v7 = *result;
      if ((int)v7 >= 1)
      {
        v8 = 0;
        while (v6 != result[v8 + 1])
        {
          if (v7 == ++v8)
            goto LABEL_20;
        }
        if ((_DWORD)v8 != -1)
          break;
      }
LABEL_20:
      result = (int *)*((_QWORD *)result + 22);
      if (!result)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    result = &dword_2542A9598;
    while (1)
    {
      v9 = *result;
      if ((int)v9 >= 1)
      {
        v10 = 0;
        while (v6 != result[v10 + 1])
        {
          if (v9 == ++v10)
            goto LABEL_28;
        }
        if ((_DWORD)v10 != -1)
          break;
      }
LABEL_28:
      result = (int *)*((_QWORD *)result + 22);
      if (!result)
        return result;
    }
    LODWORD(v8) = v10;
  }
  if (a3)
    *a3 = v8;
  return result;
}

double sub_236764C04(int a1, uint64_t a2, long double a3)
{
  double result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  double v13;
  long double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  long double v45;
  long double v46;
  long double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  BOOL v52;
  double v53;
  BOOL v54;

  result = 0.0;
  switch(a1)
  {
    case -8:
      v6 = a3 - *(double *)(a2 + 32);
      if (v6 < 0.0 || fabs(*(double *)a2) < 0.0001)
        return 0.0;
      v7 = *(double *)(a2 + 16);
      result = 0.0;
      if (fabs(v7) >= 0.0001)
      {
        v8 = log(v6 / *(double *)a2);
        v9 = v8 / log(*(long double *)(a2 + 8));
        v10 = *(double *)(a2 + 24);
        goto LABEL_83;
      }
      return result;
    case -7:
      v28 = *(double *)a2;
      if (fabs(*(double *)a2) < 0.0001)
        return 0.0;
      v29 = *(double *)(a2 + 8);
      if (fabs(v29) < 0.0001)
        return 0.0;
      v30 = *(double *)(a2 + 16);
      result = 0.0;
      if (fabs(v30) >= 0.0001)
      {
        v14 = (__exp10((a3 - *(double *)(a2 + 32)) / v29) - *(double *)(a2 + 24)) / v30;
        v15 = 1.0 / v28;
        return pow(v14, v15);
      }
      return result;
    case -6:
      v7 = *(double *)(a2 + 8);
      if (fabs(v7) < 0.0001)
        return 0.0;
      v16 = *(double *)(a2 + 24);
      goto LABEL_81;
    case -5:
      v7 = *(double *)(a2 + 8);
      if (fabs(v7) < 0.0001)
        return 0.0;
      v17 = *(double *)(a2 + 24);
      if (fabs(v17) < 0.0001)
        return 0.0;
      v18 = *(double *)(a2 + 48);
      if (v18 + v17 * *(double *)(a2 + 32) > a3)
        return (a3 - v18) / v17;
      v16 = *(double *)(a2 + 40);
LABEL_81:
      v53 = a3 - v16;
      v52 = a3 - v16 < 0.0;
      result = 0.0;
      if (!v52)
        goto LABEL_82;
      return result;
    case -4:
      v31 = *(double *)a2;
      if (fabs(*(double *)a2) < 0.0001)
        return 0.0;
      v32 = *(double *)(a2 + 8);
      if (fabs(v32) < 0.0001)
        return 0.0;
      v33 = *(double *)(a2 + 24);
      result = 0.0;
      if (fabs(v33) >= 0.0001)
      {
        v34 = *(double *)(a2 + 16);
        v35 = v34 + v32 * *(double *)(a2 + 32);
        v36 = pow(v35, *(long double *)a2);
        if (v35 < 0.0)
          v36 = 0.0;
        if (v36 <= a3)
          return (pow(a3, 1.0 / v31) - v34) / v32;
        else
          return a3 / v33;
      }
      return result;
    case -3:
      v7 = *(double *)(a2 + 8);
      if (fabs(v7) < 0.0001)
        return 0.0;
      v19 = *(double *)(a2 + 24);
      if (v19 <= a3)
      {
        v53 = a3 - v19;
        v54 = a3 - v19 <= 0.0;
        result = 0.0;
        if (v54)
          return result;
LABEL_82:
        v9 = pow(v53, 1.0 / *(double *)a2);
        v10 = *(double *)(a2 + 16);
LABEL_83:
        v20 = v9 - v10;
      }
      else
      {
        v20 = -*(double *)(a2 + 16);
      }
      return v20 / v7;
    case -2:
      if (fabs(*(double *)a2) >= 0.0001 && a3 >= 0.0)
      {
        v37 = *(double *)(a2 + 8);
        if (fabs(v37) >= 0.0001)
        {
          result = (pow(a3, 1.0 / *(double *)a2) - *(double *)(a2 + 16)) / v37;
          if (result >= 0.0)
            return result;
        }
      }
      return 0.0;
    case -1:
      v38 = *(double *)a2;
      if (*(double *)a2 == 1.0)
        return a3;
      if (a3 < 0.0)
      {
        v39 = v38 + -1.0;
        goto LABEL_72;
      }
      if (fabs(v38) < 0.0001)
        return 9.99999978e21;
      v15 = 1.0 / v38;
      goto LABEL_86;
    case 0:
      return result;
    case 1:
      v15 = *(double *)a2;
      if (*(double *)a2 == 1.0)
        return a3;
      if (a3 >= 0.0)
      {
LABEL_86:
        v14 = a3;
        return pow(v14, v15);
      }
      v39 = v15 + -1.0;
LABEL_72:
      v52 = fabs(v39) < 0.0001;
      result = 0.0;
      if (v52)
        return a3;
      return result;
    case 2:
      v40 = *(double *)(a2 + 8);
      if (fabs(v40) < 0.0001)
        return 0.0;
      v41 = *(double *)(a2 + 16);
      if (-v41 / v40 > a3)
        return 0.0;
      goto LABEL_62;
    case 3:
      v21 = *(double *)(a2 + 8);
      result = 0.0;
      if (fabs(v21) < 0.0001)
        return result;
      v22 = *(double *)(a2 + 16);
      v23 = -v22 / v21;
      result = 0.0;
      if (v23 < 0.0)
        v23 = 0.0;
      if (v23 > a3)
        return *(double *)(a2 + 24);
      v24 = v22 + v21 * a3;
      if (v24 <= 0.0)
        return result;
      v25 = *(double *)a2;
      v26 = v24;
LABEL_65:
      v49 = pow(v26, v25);
      v50 = *(double *)(a2 + 24);
      goto LABEL_68;
    case 4:
      if (*(double *)(a2 + 32) > a3)
        return *(double *)(a2 + 24) * a3;
      v40 = *(double *)(a2 + 8);
      v41 = *(double *)(a2 + 16);
LABEL_62:
      v48 = v41 + v40 * a3;
      result = 0.0;
      if (v48 <= 0.0)
        return result;
      v15 = *(double *)a2;
      v14 = v48;
      return pow(v14, v15);
    case 5:
      if (*(double *)(a2 + 32) > a3)
      {
        v42 = *(double *)(a2 + 24);
        v43 = *(double *)(a2 + 48);
        goto LABEL_59;
      }
      v51 = *(double *)(a2 + 16) + *(double *)(a2 + 8) * a3;
      if (v51 <= 0.0)
      {
        result = *(double *)(a2 + 40);
      }
      else
      {
        v49 = pow(v51, *(long double *)a2);
        v50 = *(double *)(a2 + 40);
LABEL_68:
        result = v49 + v50;
      }
      break;
    case 6:
      v26 = *(double *)(a2 + 16) + *(double *)(a2 + 8) * a3;
      if (v26 < 0.0)
        return *(double *)(a2 + 24);
      v25 = *(double *)a2;
      goto LABEL_65;
    case 7:
      v44 = *(double *)(a2 + 16);
      v45 = *(double *)(a2 + 24) + v44 * pow(a3, *(long double *)a2);
      if (v45 <= 0.0)
      {
        result = *(double *)(a2 + 32);
      }
      else
      {
        a3 = *(double *)(a2 + 8);
        v42 = log10(v45);
        v43 = *(double *)(a2 + 32);
LABEL_59:
        result = v43 + a3 * v42;
      }
      break;
    case 8:
      v27 = *(double *)a2;
      return *(double *)(a2 + 32)
           + v27 * pow(*(long double *)(a2 + 8), *(double *)(a2 + 24) + *(double *)(a2 + 16) * a3);
    default:
      if (a1 == -108)
      {
        v46 = *(double *)a2;
        v47 = pow(a3, *(long double *)a2);
        return 1.0 - pow(1.0 - v47, v46);
      }
      else if (a1 == 108)
      {
        v11 = *(double *)a2;
        result = 0.0;
        if (fabs(*(double *)a2) >= 0.0001)
        {
          v12 = 1.0 - a3;
          v13 = 1.0 / v11;
          v14 = 1.0 - pow(v12, 1.0 / v11);
          v15 = v13;
          return pow(v14, v15);
        }
      }
      else
      {
        return 0.0;
      }
      return result;
  }
  return result;
}

uint64_t sub_23676518C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  __int16 v12;

  if ((_DWORD)a2 == 1)
  {
    v8 = 4096;
    if (*(_DWORD *)(a3 + 8) == 1)
    {
      if (fabs(*(double *)(a3 + 16) + -1.0) >= 0.001)
        v8 = 4096;
      else
        v8 = 2;
    }
  }
  else
  {
    v8 = 4096;
  }
  v9 = sub_236764590(a1, v8, a2, a3, 0, a6, a7, a8);
  if (v9)
  {
    v10 = 0;
    do
    {
      v11 = sub_2367652B8(v9, (double)v10 / (double)(v8 - 1)) * 65535.0 + 0.5;
      if (v11 <= 0.0)
      {
        v12 = 0;
      }
      else if (v11 >= 65535.0)
      {
        v12 = -1;
      }
      else
      {
        v12 = (COERCE_UNSIGNED_INT64(v11 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      *(_WORD *)(*(_QWORD *)(v9 + 48) + 2 * v10++) = v12;
    }
    while (v8 != v10);
  }
  return v9;
}

double sub_2367652B8(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v15;
  float v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = -9.99999978e21;
  if ((int)v2 >= 1)
  {
    v16 = 0.0;
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v2 + 1;
    while (1)
    {
      v6 = (v5 - 2);
      v7 = *(float *)(v4 + 112 * v6);
      if (v7 < a2)
      {
        v8 = *(float *)(v4 + 112 * v6 + 4);
        if (v8 >= a2)
          break;
      }
      if ((unint64_t)--v5 <= 1)
        return v3;
    }
    v9 = *(unsigned int *)(v4 + 112 * v6 + 8);
    if ((_DWORD)v9)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 8 * v6))(v9, v4 + 112 * v6 + 16);
    }
    else
    {
      v11 = a2 - v7;
      v15 = v11 / (float)(v8 - v7);
      v12 = *(_QWORD *)(v4 + 112 * v6 + 104);
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(*(_QWORD *)(v13 + 8 * v6) + 120) = v12;
      (*(void (**)(float *, float *))(*(_QWORD *)(v13 + 8 * v6) + 128))(&v15, &v16);
      v10 = v16;
    }
    if (fabs(v10) == INFINITY)
      return 9.99999978e21;
    else
      return v10;
  }
  return v3;
}

uint64_t sub_2367653E4(uint64_t *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  float *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v9 = 3825698424;
  v10 = 6;
  v12 = 0;
  v13 = 0;
  v11 = 0x3FF0000000000000;
  v14 = *a2;
  v15 = 0;
  v16 = 0x3F80000000000000;
  v17 = 0;
  v18 = 4096;
  v19 = a2;
  v20 = 0x640786783F800000;
  v21 = 6;
  v23 = 0;
  v24 = 0;
  v22 = 0x3FF0000000000000;
  v25 = a2[4095];
  v26 = 0;
  return sub_23676518C(a1, 3, (uint64_t)&v9, a4, a5, a6, a7, a8);
}

uint64_t sub_2367654B0(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v15 = 0;
  if (sub_236764B0C(a1, a2, &v15))
  {
    v17 = 0u;
    v23 = 0;
    v22 = 0u;
    v21 = 0u;
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v16 = 0x64078678E4078678;
    LODWORD(v17) = a2;
    __memmove_chk();
    return sub_23676518C(a1, 1, (uint64_t)&v16, v9, v10, v11, v12, v13);
  }
  else
  {
    sub_2367644B8(a1, 8, "Invalid parametric curve type %d", v4, v5, v6, v7, v8, a2);
    return 0;
  }
}

uint64_t ***sub_236765578(uint64_t ***result)
{
  uint64_t ***v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 *v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 *v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 *v28;

  if (result)
  {
    v1 = result;
    v2 = **result;
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = **result;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    (*((void (**)(uint64_t *))v5 + 2))(**result);
    if (v1[6])
    {
      if (v2)
      {
        v6 = &qword_25642E910;
        v7 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v6 = (uint64_t *)*v6;
          if (!v6)
            break;
          if (v6 == v2)
          {
            v7 = v2;
            break;
          }
        }
      }
      else
      {
        v7 = (uint64_t *)&unk_250800620;
      }
      v8 = (__int128 *)v7[6];
      if (!v8)
        v8 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *))v8 + 2))(v2);
    }
    if (v1[2])
    {
      if (!*((_DWORD *)v1 + 2))
        goto LABEL_46;
      v9 = 0;
      do
      {
        if (v1[2][14 * v9 + 13])
        {
          if (v2)
          {
            v10 = &qword_25642E910;
            while (1)
            {
              v10 = (uint64_t *)*v10;
              if (!v10)
                break;
              if (v10 == v2)
              {
                v11 = v2;
                goto LABEL_31;
              }
            }
          }
          v11 = (uint64_t *)&unk_250800620;
LABEL_31:
          v12 = (__int128 *)v11[6];
          if (!v12)
            v12 = &xmmword_2542ABF08;
          (*((void (**)(uint64_t *))v12 + 2))(v2);
        }
        v13 = (uint64_t **)v1[3][v9];
        if (v13)
        {
          if (*v13)
          {
            v14 = &qword_25642E910;
            while (1)
            {
              v14 = (uint64_t *)*v14;
              if (!v14)
                break;
              if (v14 == *v13)
              {
                v15 = *v13;
                goto LABEL_41;
              }
            }
          }
          v15 = (uint64_t *)&unk_250800620;
LABEL_41:
          v16 = (__int128 *)v15[6];
          if (!v16)
            v16 = &xmmword_2542ABF08;
          (*((void (**)(void))v16 + 2))();
        }
        ++v9;
      }
      while (v9 < *((unsigned int *)v1 + 2));
      if (v1[2])
      {
LABEL_46:
        if (v2)
        {
          v17 = &qword_25642E910;
          v18 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v17 = (uint64_t *)*v17;
            if (!v17)
              break;
            if (v17 == v2)
            {
              v18 = v2;
              break;
            }
          }
        }
        else
        {
          v18 = (uint64_t *)&unk_250800620;
        }
        v19 = (__int128 *)v18[6];
        if (!v19)
          v19 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *))v19 + 2))(v2);
      }
      if (v1[3])
      {
        if (v2)
        {
          v20 = &qword_25642E910;
          v21 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v20 = (uint64_t *)*v20;
            if (!v20)
              break;
            if (v20 == v2)
            {
              v21 = v2;
              break;
            }
          }
        }
        else
        {
          v21 = (uint64_t *)&unk_250800620;
        }
        v22 = (__int128 *)v21[6];
        if (!v22)
          v22 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *))v22 + 2))(v2);
      }
    }
    if (v1[4])
    {
      if (v2)
      {
        v23 = &qword_25642E910;
        v24 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v23 = (uint64_t *)*v23;
          if (!v23)
            break;
          if (v23 == v2)
          {
            v24 = v2;
            break;
          }
        }
      }
      else
      {
        v24 = (uint64_t *)&unk_250800620;
      }
      v25 = (__int128 *)v24[6];
      if (!v25)
        v25 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *))v25 + 2))(v2);
    }
    if (v2)
    {
      v26 = &qword_25642E910;
      v27 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v26 = (uint64_t *)*v26;
        if (!v26)
          break;
        if (v26 == v2)
        {
          v27 = v2;
          break;
        }
      }
    }
    else
    {
      v27 = (uint64_t *)&unk_250800620;
    }
    v28 = (__int128 *)v27[6];
    if (!v28)
      v28 = &xmmword_2542ABF08;
    return (uint64_t ***)(*((uint64_t (**)(uint64_t *, uint64_t ***))v28 + 2))(v2, v1);
  }
  return result;
}

uint64_t ***sub_236765878(uint64_t ****a1)
{
  uint64_t ***v2;
  uint64_t ***v3;
  uint64_t ***result;

  v2 = *a1;
  if (v2)
    sub_236765578(v2);
  v3 = a1[1];
  if (v3)
    sub_236765578(v3);
  result = a1[2];
  if (result)
    result = sub_236765578(result);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_2367658C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
    return sub_236764590(**(uint64_t ***)result, *(unsigned int *)(result + 40), *(unsigned int *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 48), a6, a7, a8);
  return result;
}

uint64_t sub_2367658E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unsigned int v29;
  double v30;
  double v31;
  unsigned int v34;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __int16 v42;

  if (*(_DWORD *)(a1 + 8) == 1)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 8);
    v11 = *(uint64_t ***)a1;
    if (v10 >= 1)
    {
      v12 = *v11;
      if (sub_236764B0C(*v11, *(_DWORD *)(v9 + 8), 0))
        return sub_2367654B0(v12, -v10);
    }
  }
  else
  {
    v11 = *(uint64_t ***)a1;
  }
  result = sub_236764590(*v11, 4096, 0, 0, 0, a6, a7, a8);
  if (result)
  {
    v14 = 0;
    v15 = *(unsigned __int16 **)(a1 + 48);
    v16 = *(_DWORD *)(a1 + 40) - 1;
    v17 = v15[v16];
    v18 = *v15;
    v19 = *(unsigned int *)(*(_QWORD *)a1 + 52);
    v20 = (double)v16;
    v21 = *(_QWORD *)(result + 48);
    v22 = 0.0;
    v23 = 0.0;
    do
    {
      v24 = (double)(int)v14 * 65535.0 / 4095.0;
      if ((_DWORD)v19)
      {
        v25 = *v15;
        if (v25 < v15[v19])
        {
          if ((int)v19 >= 1)
          {
            v26 = v19;
            while (1)
            {
              i = v26 - 1;
              v28 = v15[(v26 - 1)];
              v29 = v15[v26];
              v30 = (double)v29;
              v31 = (double)v28;
              if (v28 <= v29)
              {
                if (v24 >= v31 && v24 <= v30)
                  goto LABEL_40;
              }
              else if (v24 <= v31 && v24 >= v30)
              {
                goto LABEL_40;
              }
              v26 = i;
              if ((unint64_t)(i + 1) <= 1)
                goto LABEL_46;
            }
          }
          goto LABEL_46;
        }
        if ((int)v19 >= 1)
        {
          for (i = 0; v19 != i; ++i)
          {
            v34 = v15[i + 1];
            v30 = (double)v34;
            v31 = (double)(unsigned __int16)v25;
            if (v34 >= (unsigned __int16)v25)
            {
              if (v24 >= v31 && v24 <= v30)
              {
LABEL_40:
                if ((i & 0x80000000) == 0)
                {
                  LOWORD(v30) = v15[i];
                  v37 = (double)*(unint64_t *)&v30;
                  LOWORD(v31) = v15[(i + 1)];
                  v38 = (double)*(unint64_t *)&v31;
                  v39 = (double)((int)i + 1) * 65535.0 / v20;
                  if (v37 == v38)
                  {
                    if (v18 <= v17)
                      v40 = (double)((int)i + 1) * 65535.0 / v20;
                    else
                      v40 = (double)(int)i * 65535.0 / v20;
                    goto LABEL_47;
                  }
                  v23 = (v39 - (double)(int)i * 65535.0 / v20) / (v38 - v37);
                  v22 = v39 - v23 * v38;
                }
                break;
              }
            }
            else if (v24 <= v31 && v24 >= v30)
            {
              goto LABEL_40;
            }
            LOWORD(v25) = v34;
          }
        }
      }
LABEL_46:
      v40 = v22 + v23 * v24;
LABEL_47:
      v41 = v40 + 0.5;
      if (v41 <= 0.0)
      {
        v42 = 0;
      }
      else if (v41 >= 65535.0)
      {
        v42 = -1;
      }
      else
      {
        v42 = (COERCE_UNSIGNED_INT64(v41 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      *(_WORD *)(v21 + 2 * v14++) = v42;
    }
    while (v14 != 4096);
  }
  return result;
}

float sub_236765B54(_DWORD *a1, float a2)
{
  double v2;
  double v4;
  __int16 v5;
  __n128 v6;
  unsigned __int16 v8;
  __int16 v9;

  v2 = a2;
  if (a1[2])
  {
    return sub_2367652B8((uint64_t)a1, v2);
  }
  else
  {
    v4 = v2 * 65535.0 + 0.5;
    if (v4 <= 0.0)
    {
      v5 = 0;
    }
    else if (v4 >= 65535.0)
    {
      v5 = -1;
    }
    else
    {
      v5 = (COERCE_UNSIGNED_INT64(v4 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
    }
    v9 = v5;
    v8 = 0;
    v6 = ((__n128 (*)(__int16 *, unsigned __int16 *))*(_QWORD *)(*(_QWORD *)a1 + 128))(&v9, &v8);
    v6.n128_u16[0] = v8;
    return (double)v6.n128_u64[0] / 65535.0;
  }
}

uint64_t sub_236765C10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  unsigned __int16 v4;
  int v5;

  v1 = *(int *)(a1 + 40);
  if ((int)v1 < 1)
    return 1;
  v2 = 0;
  while (1)
  {
    v3 = (double)(int)v2 * 65535.0 / (double)(v1 - 1) + 0.5;
    if (v3 <= 0.0)
      v4 = 0;
    else
      v4 = v3 >= 65535.0 ? -1 : (COERCE_UNSIGNED_INT64(v3 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
    v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v2) - v4;
    if (v5 < 0)
      v5 = -v5;
    if (v5 >= 0x10)
      break;
    if (v1 == ++v2)
      return 1;
  }
  return 0;
}

uint64_t sub_236765CC4(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;

  v1 = *(unsigned int *)(a1 + 40);
  if (v1 < 2)
    return 1;
  v2 = *(unsigned __int16 **)(a1 + 48);
  v3 = *v2;
  v4 = v2[(v1 - 1)];
  if (v3 <= v4)
  {
    if ((int)v1 >= 2)
    {
      v9 = v1 - 2;
      while ((int)(v2[v9] - v4) < 3)
      {
        v4 = v2[v9];
        v10 = __OFSUB__(v9--, 1);
        if (v9 < 0 != v10)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((int)v1 < 2)
    return 1;
  v5 = v2 + 1;
  v6 = v1 - 1;
  while (1)
  {
    v8 = *v5++;
    v7 = v8;
    if ((int)(v8 - v3) > 2)
      break;
    v3 = v7;
    if (!--v6)
      return 1;
  }
  return 0;
}

void sub_236765D50(_DWORD *a1)
{
  double v2;
  int v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  double v10;
  long double v11;

  v2 = 0.0;
  v3 = 4095;
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  do
  {
    v7 = v4 * 0.000244140625;
    v8 = sub_236765B54(a1, v7);
    if (v4 * 0.000244140625 > 0.07 && v8 > 0.0 && v8 < 1.0)
    {
      v10 = log(v8);
      v11 = v10 / log(v4 * 0.000244140625);
      v6 = v6 + v11;
      v5 = v5 + v11 * v11;
      v2 = v2 + 1.0;
    }
    v4 = v4 + 1.0;
    --v3;
  }
  while (v3);
}

uint64_t ***sub_236765E44(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t ***v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t ***v21;
  __int128 *v22;
  uint64_t v23;
  float *v24;
  uint64_t i;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 *v35;

  if (*(_DWORD *)(*(_QWORD *)a4 + 80) != 1129142603)
    return 0;
  v4 = a4 + 8 * (a2 - 1);
  if (*(_DWORD *)(*(_QWORD *)v4 + 80) != 1129142603)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)v4 + 76) != 1886549106)
    return 0;
  v6 = sub_236766060();
  if (!v6)
    return 0;
  v7 = (uint64_t ***)v6;
  v8 = sub_236766060();
  if (!v8)
  {
    v21 = v7;
LABEL_33:
    sub_236765578(v21);
    return 0;
  }
  v16 = (uint64_t ***)v8;
  v17 = sub_2367658E8(v8, v9, v10, v11, v12, v13, v14, v15);
  if (v17)
  {
    v18 = (uint64_t ***)v17;
    if (a1)
    {
      v19 = &qword_25642E910;
      v20 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v19 = (uint64_t *)*v19;
        if (!v19)
          break;
        if (v19 == a1)
        {
          v20 = a1;
          break;
        }
      }
    }
    else
    {
      v20 = (uint64_t *)&unk_250800620;
    }
    v22 = (__int128 *)v20[6];
    if (!v22)
      v22 = &xmmword_2542ABF08;
    v23 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v22 + 4))(a1, 4096, 4);
    if (v23)
    {
      v24 = (float *)v23;
      for (i = 0; i != 4096; ++i)
      {
        v26 = sub_236765B54(v7, (float)i / 4095.0);
        v24[i] = sub_236765B54(v18, v26);
      }
      v21 = (uint64_t ***)sub_2367653E4(a1, v24, v27, v28, v29, v30, v31, v32);
      if (a1)
      {
        v33 = &qword_25642E910;
        v34 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v33 = (uint64_t *)*v33;
          if (!v33)
            break;
          if (v33 == a1)
          {
            v34 = a1;
            break;
          }
        }
      }
      else
      {
        v34 = (uint64_t *)&unk_250800620;
      }
      v35 = (__int128 *)v34[6];
      if (!v35)
        v35 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, float *))v35 + 2))(a1, v24);
    }
    else
    {
      v21 = 0;
    }
    sub_236765578(v18);
  }
  else
  {
    v21 = 0;
  }
  sub_236765578(v7);
  sub_236765578(v16);
  if (v21 && !sub_236765CC4((uint64_t)v21))
    goto LABEL_33;
  return v21;
}

uint64_t sub_236766060()
{
  uint64_t *v0;
  unsigned int v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 *v36;
  int v37[256];
  _QWORD v38[256];
  uint64_t __dst;
  int v40;
  float v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v74 = *MEMORY[0x24BDAC8D0];
  if (v1 > 0xFE)
    return 0;
  v7 = v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  v11 = v2;
  v12 = v1;
  v13 = v0;
  v14 = sub_236783FA8(v0);
  if (!v14)
    return 0;
  v15 = v14;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  if (v12)
  {
    v16 = v12;
    memcpy(&v42, v10, 8 * v12);
    memcpy(&__dst, v9, 4 * v12);
    memcpy(v38, v8, 8 * v12);
    memcpy(v37, v11, 4 * v12);
  }
  else
  {
    v16 = 0;
  }
  *((_QWORD *)&v42 + v16) = v15;
  *((_DWORD *)&__dst + v16) = 0;
  v38[v16] = 0x3FF0000000000000;
  v37[v16] = 1;
  v17 = sub_236784600(v13, v12 + 1, (uint64_t **)&v42, (uint64_t)&__dst, v37, (uint64_t)v38, 4587556, 4849688, v7);
  sub_236769708(v15);
  if (!v17)
    return 0;
  if (v13)
  {
    v18 = &qword_25642E910;
    v19 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v18 = (uint64_t *)*v18;
      if (!v18)
        break;
      if (v18 == v13)
      {
        v19 = v13;
        break;
      }
    }
  }
  else
  {
    v19 = (uint64_t *)&unk_250800620;
  }
  v20 = (__int128 *)v19[6];
  if (!v20)
    v20 = &xmmword_2542ABF08;
  v21 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v20 + 4))(v13, 4096, 4);
  if (!v21)
  {
    sub_236784540(v17);
    return 0;
  }
  v22 = (float *)v21;
  v23 = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0;
  do
  {
    __dst = 0;
    v40 = 0;
    v24 = (double)v23 * 100.0 / 4095.0;
    v41 = v24;
    v38[0] = 0;
    v38[1] = 0x100000001;
    (*(void (**)(uint64_t, uint64_t *, __int128 *, uint64_t, uint64_t, _QWORD *))(v17 + 8))(v17, &__dst, &v42, 1, 1, v38);
    v31 = 1.0 - *(double *)&v42 / 100.0;
    v22[v23++] = v31;
  }
  while (v23 != 4096);
  v32 = sub_2367653E4(v13, v22, v25, v26, v27, v28, v29, v30);
  sub_236784540(v17);
  if (v13)
  {
    v33 = &qword_25642E910;
    v34 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v33 = (uint64_t *)*v33;
      if (!v33)
        break;
      if (v33 == v13)
      {
        v34 = v13;
        break;
      }
    }
  }
  else
  {
    v34 = (uint64_t *)&unk_250800620;
  }
  v36 = (__int128 *)v34[6];
  if (!v36)
    v36 = &xmmword_2542ABF08;
  (*((void (**)(uint64_t *, float *))v36 + 2))(v13, v22);
  return v32;
}

BOOL sub_2367663E4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD);
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  void *v10;
  void *v11;
  float *(*v12)(float *, float *, uint64_t);
  void *v13;
  void *v14;
  void *v15;

  if (a1)
  {
    v3 = &qword_25642E910;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == a1)
        goto LABEL_8;
    }
    a1 = (uint64_t *)&unk_250800620;
  }
  else
  {
    a1 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v4 = (void *)a1[7];
  if (!v4)
    v4 = &unk_25642E918;
  *(_QWORD *)(a2 + 128) = 0;
  v5 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))v4;
  if (!v5
    || (v6 = v5(*(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 8)),
        (*(_QWORD *)(a2 + 128) = v6) == 0))
  {
    v8 = *(_DWORD *)(a2 + 12);
    v7 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 8);
    if (v8 < 4 || v7 <= 0x7F)
    {
      switch(v8)
      {
        case 1u:
          v10 = sub_236766728;
          v11 = sub_236766624;
          if ((*(_DWORD *)(a2 + 8) & 1) == 0)
          {
            v10 = sub_236766698;
            v11 = sub_2367665A8;
          }
          if (v7 == 1)
            v6 = (uint64_t)v11;
          else
            v6 = (uint64_t)v10;
          break;
        case 2u:
          v12 = sub_2367668E0;
          v13 = sub_2367667D4;
          goto LABEL_34;
        case 3u:
          v14 = sub_2367670D8;
          if ((v9 & 1) == 0)
            v14 = sub_236766D9C;
          v15 = sub_2367669F4;
          if ((v9 & 1) != 0)
            v15 = sub_236766BE0;
          if ((v9 & 0x100) != 0)
            v6 = (uint64_t)v15;
          else
            v6 = (uint64_t)v14;
          break;
        case 4u:
          v12 = sub_2367678D8;
          v13 = sub_236767364;
          goto LABEL_34;
        case 5u:
          v12 = sub_236767B9C;
          v13 = sub_236767A48;
          goto LABEL_34;
        case 6u:
          v12 = sub_236767E64;
          v13 = sub_236767D04;
          goto LABEL_34;
        case 7u:
          v12 = sub_236768138;
          v13 = sub_236767FD8;
          goto LABEL_34;
        case 8u:
          v12 = sub_236768410;
          v13 = sub_2367682AC;
LABEL_34:
          if ((v9 & 1) != 0)
            v6 = (uint64_t)v12;
          else
            v6 = (uint64_t)v13;
          break;
        default:
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v6 = 0;
    }
    *(_QWORD *)(a2 + 128) = v6;
  }
  return v6 != 0;
}

unsigned __int16 *sub_2367665A8(unsigned __int16 *result, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *(_QWORD *)(a3 + 120);
  v4 = *result;
  if (v4 == 0xFFFF)
  {
    LOWORD(v3) = *(_WORD *)(v3 + 2 * *(unsigned int *)(a3 + 52));
  }
  else
  {
    v5 = (*(_DWORD *)(a3 + 52) * v4 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v4;
    LODWORD(v3) = *(unsigned __int16 *)(v3 + 2 * (v5 >> 16))
                + (((unsigned __int16)v5
                  * (*(unsigned __int16 *)(v3 + 2 * (v5 >> 16) + 2)
                   - *(unsigned __int16 *)(v3 + 2 * (v5 >> 16)))
                  + 0x8000) >> 16);
  }
  *a2 = v3;
  return result;
}

float *sub_236766624(float *result, float *a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;

  v3 = *(_QWORD *)(a3 + 120);
  if (*result <= 1.0)
    v4 = *result;
  else
    v4 = 1.0;
  v5 = 0.0;
  if (*result >= 0.000000001)
    v5 = v4;
  v6 = *(unsigned int *)(a3 + 52);
  if (v5 == 1.0)
  {
    v7 = *(float *)(v3 + 4 * v6);
  }
  else
  {
    v8 = v5 * (float)v6;
    v9 = vcvtmd_s64_f64(v8);
    v7 = *(float *)(v3 + 4 * v9)
       + (float)((float)(*(float *)(v3 + 4 * (int)vcvtpd_s64_f64(v8)) - *(float *)(v3 + 4 * v9))
               * (float)(v8 - (float)v9));
  }
  *a2 = v7;
  return result;
}

unsigned __int16 *sub_236766698(unsigned __int16 *result, _WORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v3 = *result;
  v4 = (*(_DWORD *)(a3 + 52) * v3 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v3;
  v5 = v4 >> 16;
  if (v3 == 0xFFFF)
    v6 = v4 >> 16;
  else
    v6 = v5 + 1;
  v7 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a3 + 120);
    v9 = *(_DWORD *)(a3 + 84);
    v10 = v5 * v9;
    v11 = v6 * v9;
    do
    {
      v12 = *(unsigned __int16 *)(v8 + 2 * v10);
      *a2++ = v12
            + (((*(unsigned __int16 *)(v8 + 2 * v11++) - v12) * (unsigned __int16)v4 + 0x8000) >> 16);
      ++v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

float *sub_236766728(float *result, float *a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  int v11;
  unsigned int v12;
  float v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *(_QWORD *)(a3 + 120);
  if (*result <= 1.0)
    v4 = *result;
  else
    v4 = 1.0;
  v5 = 0.0;
  if (*result >= 0.000000001)
    v5 = v4;
  v6 = *(unsigned int *)(a3 + 52);
  if (v5 == 1.0)
  {
    v7 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD *)(v3 + 4 * v6);
      do
      {
        *(_DWORD *)a2++ = v8;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    v9 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v9)
    {
      v10 = v5 * (float)v6;
      v11 = vcvtmd_s64_f64(v10);
      v12 = vcvtpd_s64_f64(v10);
      v13 = v10 - (float)v11;
      v14 = *(_DWORD *)(a3 + 84);
      v15 = v14 * v11;
      v16 = v14 * v12;
      do
      {
        *a2++ = *(float *)(v3 + 4 * v15)
              + (float)((float)(*(float *)(v3 + 4 * v16++) - *(float *)(v3 + 4 * v15)) * v13);
        ++v15;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

unint64_t sub_2367667D4(unint64_t result, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int16 *v15;
  int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;

  v3 = *(unsigned int *)(a3 + 16);
  if ((int)v3 >= 1)
  {
    v4 = *(_QWORD *)(a3 + 120);
    v5 = *(unsigned __int16 *)result;
    v6 = (*(_DWORD *)(a3 + 52) * v5 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v5;
    v7 = *(unsigned __int16 *)(result + 2);
    v8 = (*(_DWORD *)(a3 + 56) * v7 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 56) * v7;
    v9 = (v8 >> 16) * *(_DWORD *)(a3 + 84);
    if (v7 == 0xFFFF)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a3 + 84);
    v11 = v9 + v10;
    v12 = (v6 >> 16) * *(_DWORD *)(a3 + 88);
    if (v5 == 0xFFFF)
      v13 = 0;
    else
      v13 = *(_DWORD *)(a3 + 88);
    v14 = v12 + v13;
    v15 = (unsigned __int16 *)(v4 + 2 * (v11 + v12 + v13));
    v16 = v9 + v12;
    v17 = (unsigned __int16 *)(v4 + 2 * (v9 + v14));
    v18 = (unsigned __int16 *)(v4 + 2 * (v11 + v12));
    v19 = (unsigned __int16 *)(v4 + 2 * v16);
    do
    {
      v21 = *v19++;
      v20 = v21;
      v23 = *v18++;
      v22 = v23;
      v25 = *v17++;
      v24 = v25;
      v26 = *v15++;
      result = v26;
      v27 = v20 + (((v24 - v20) * (unsigned __int16)v6 + 0x8000) >> 16);
      *a2++ = v27
            + ((((unsigned __int16)(v22 + (((v26 - v22) * (unsigned __int16)v6 + 0x8000) >> 16)) - (unsigned __int16)v27)
              * (unsigned __int16)v8
              + 0x8000) >> 16);
      --v3;
    }
    while (v3);
  }
  return result;
}

float *sub_2367668E0(float *result, float *a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  double v11;
  int v12;
  float v13;
  double v14;
  int v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float *v23;
  float v24;
  int v25;
  float *v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v3 = *(unsigned int *)(a3 + 16);
  v4 = result[1];
  if (*result <= 1.0)
    v5 = *result;
  else
    v5 = 1.0;
  if (*result < 0.000000001)
    v5 = 0.0;
  if (v4 <= 1.0)
    v6 = result[1];
  else
    v6 = 1.0;
  if (v4 < 0.000000001)
    v7 = 0.0;
  else
    v7 = v6;
  if ((int)v3 >= 1)
  {
    v8 = *(_QWORD *)(a3 + 120);
    v9 = v5 * (float)*(unsigned int *)(a3 + 52);
    v10 = v7 * (float)*(unsigned int *)(a3 + 56);
    v11 = v9 + 1.03079215e11;
    v12 = SLODWORD(v11) >> 16;
    v13 = v9 - (float)(SLODWORD(v11) >> 16);
    v14 = v10 + 1.03079215e11;
    v15 = SLODWORD(v14) >> 16;
    v16 = (float)(SLODWORD(v14) >> 16);
    v17 = *(_DWORD *)(a3 + 84);
    v18 = v15 * v17;
    if (v7 >= 1.0)
      v17 = 0;
    v19 = v18 + v17;
    v20 = v12 * *(_DWORD *)(a3 + 88);
    if (v5 >= 1.0)
      v21 = 0;
    else
      v21 = *(_DWORD *)(a3 + 88);
    v22 = v20 + v21;
    v23 = (float *)(v8 + 4 * (v19 + v20 + v21));
    v24 = v10 - v16;
    v25 = v18 + v20;
    v26 = (float *)(v8 + 4 * (v18 + v22));
    v27 = (float *)(v8 + 4 * (v19 + v20));
    v28 = (float *)(v8 + 4 * v25);
    do
    {
      v29 = *v28++;
      v30 = v29;
      v31 = *v27++;
      v32 = v31;
      v33 = *v26++;
      v34 = v33;
      v35 = *v23++;
      *a2++ = (float)(v30 + (float)((float)(v34 - v30) * v13))
            + (float)((float)((float)(v32 + (float)((float)(v35 - v32) * v13))
                            - (float)(v30 + (float)((float)(v34 - v30) * v13)))
                    * v24);
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t sub_2367669F4(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 v35;
  unsigned int v36;

  v3 = *(unsigned int *)(a3 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a3 + 120);
    v6 = *(unsigned __int16 *)result;
    v7 = (*(_DWORD *)(a3 + 52) * v6 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v6;
    v8 = *(unsigned __int16 *)(result + 2);
    v9 = (*(_DWORD *)(a3 + 56) * v8 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 56) * v8;
    v10 = *(unsigned __int16 *)(result + 4);
    LODWORD(result) = (*(_DWORD *)(a3 + 60) * v10 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 60) * v10;
    v11 = ((int)result >> 16) * *(_DWORD *)(a3 + 84);
    if (v10 == 0xFFFF)
      v12 = 0;
    else
      v12 = *(_DWORD *)(a3 + 84);
    v13 = v11 + v12;
    v14 = (v9 >> 16) * *(_DWORD *)(a3 + 88);
    if (v8 == 0xFFFF)
      v15 = 0;
    else
      v15 = *(_DWORD *)(a3 + 88);
    v16 = v14 + v15;
    v17 = *(_DWORD *)(a3 + 92);
    v18 = v17 * (v7 >> 16);
    if (v6 == 0xFFFF)
      v19 = 0;
    else
      v19 = v17;
    v20 = v18 + v19;
    v21 = v16 + v18 + v19;
    v22 = v5 + 2 * (v13 + v21);
    v23 = v5 + 2 * (v21 + v11);
    v24 = v14 + v20;
    v25 = v5 + 2 * (v13 + v14 + v20);
    v26 = v5 + 2 * (v11 + v24);
    v27 = v14 + v18;
    v28 = v16 + v18;
    v29 = v5 + 2 * (v13 + v28);
    v30 = 2 * v3;
    result = (unsigned __int16)result;
    v31 = v5 + 2 * (v28 + v11);
    v32 = v5 + 2 * (v13 + v27);
    v33 = v5 + 2 * (v11 + v27);
    do
    {
      v34 = *(unsigned __int16 *)(v33 + v4)
          + (((*(unsigned __int16 *)(v26 + v4) - *(unsigned __int16 *)(v33 + v4)) * (unsigned __int16)v7
            + 0x8000) >> 16);
      v35 = *(_WORD *)(v32 + v4)
          + (((*(unsigned __int16 *)(v25 + v4) - *(unsigned __int16 *)(v32 + v4)) * (unsigned __int16)v7
            + 0x8000) >> 16);
      v36 = v34
          + ((((unsigned __int16)(*(_WORD *)(v31 + v4)
                                + (((*(unsigned __int16 *)(v23 + v4) - *(unsigned __int16 *)(v31 + v4))
                                  * (unsigned __int16)v7
                                  + 0x8000) >> 16))
             - (unsigned __int16)v34)
            * (unsigned __int16)v9
            + 0x8000) >> 16);
      *(_WORD *)(a2 + v4) = v36
                          + ((((unsigned __int16)(v35
                                                + ((((unsigned __int16)(*(_WORD *)(v29 + v4)
                                                                      + (((*(unsigned __int16 *)(v22 + v4)
                                                                         - *(unsigned __int16 *)(v29 + v4))
                                                                        * (unsigned __int16)v7
                                                                        + 0x8000) >> 16))
                                                   - v35)
                                                  * (unsigned __int16)v9
                                                  + 0x8000) >> 16))
                             - (unsigned __int16)v36)
                            * (unsigned __int16)result
                            + 0x8000) >> 16);
      v4 += 2;
    }
    while (v30 != v4);
  }
  return result;
}

float sub_236766BE0(float *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float result;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  float v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  signed int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;

  v3 = *(unsigned int *)(a3 + 16);
  v4 = a1[1];
  if (*a1 <= 1.0)
    v5 = *a1;
  else
    v5 = 1.0;
  result = 0.0;
  if (*a1 < 0.000000001)
    v5 = 0.0;
  if (v4 <= 1.0)
    v7 = a1[1];
  else
    v7 = 1.0;
  if (v4 < 0.000000001)
    v7 = 0.0;
  v8 = a1[2];
  if (v8 <= 1.0)
    v9 = a1[2];
  else
    v9 = 1.0;
  if (v8 < 0.000000001)
    v10 = 0.0;
  else
    v10 = v9;
  if ((int)v3 >= 1)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a3 + 120);
    v13 = v5 * (float)*(unsigned int *)(a3 + 52);
    v14 = v7 * (float)*(unsigned int *)(a3 + 56);
    v15 = v10 * (float)*(unsigned int *)(a3 + 60);
    v16 = vcvtms_s32_f32(v13);
    result = v13 - (float)(int)floorf(v13);
    v17 = vcvtms_s32_f32(v14);
    v18 = v14 - (float)(int)floorf(v14);
    v19 = floorf(v15);
    v20 = *(_DWORD *)(a3 + 84) * vcvtms_s32_f32(v15);
    if (v10 >= 1.0)
      v21 = 0;
    else
      v21 = *(_DWORD *)(a3 + 84);
    v22 = v20 + v21;
    v23 = *(_DWORD *)(a3 + 88) * v17;
    if (v7 >= 1.0)
      v24 = 0;
    else
      v24 = *(_DWORD *)(a3 + 88);
    v25 = v23 + v24;
    v26 = *(_DWORD *)(a3 + 92);
    v27 = v26 * v16;
    v28 = 4 * v3;
    if (v5 >= 1.0)
      v29 = 0;
    else
      v29 = v26;
    v30 = v27 + v29;
    v31 = v25 + v27 + v29;
    v32 = v31 + v20;
    v33 = v12 + 4 * (v22 + v31);
    v34 = v12 + 4 * v32;
    v35 = v23 + v30;
    v36 = v20 + v35;
    v37 = v12 + 4 * (v22 + v35);
    v38 = v12 + 4 * v36;
    v39 = v23 + v27;
    v40 = v25 + v27;
    v41 = v12 + 4 * (v22 + v40);
    v42 = v20 + v39;
    v43 = v12 + 4 * (int)(v40 + v20);
    v44 = v12 + 4 * (v22 + v39);
    v45 = v12 + 4 * v42;
    do
    {
      v46 = *(float *)(v45 + v11) + (float)((float)(*(float *)(v38 + v11) - *(float *)(v45 + v11)) * result);
      v47 = *(float *)(v44 + v11) + (float)((float)(*(float *)(v37 + v11) - *(float *)(v44 + v11)) * result);
      v48 = v46
          + (float)((float)((float)(*(float *)(v43 + v11)
                                  + (float)((float)(*(float *)(v34 + v11) - *(float *)(v43 + v11)) * result))
                          - v46)
                  * v18);
      *(float *)(a2 + v11) = v48
                           + (float)((float)((float)(v47
                                                   + (float)((float)((float)(*(float *)(v41 + v11)
                                                                           + (float)((float)(*(float *)(v33 + v11)
                                                                                           - *(float *)(v41 + v11))
                                                                                   * result))
                                                                   - v47)
                                                           * v18))
                                           - v48)
                                   * (float)(v15 - (float)(int)v19));
      v11 += 4;
    }
    while (v28 != v11);
  }
  return result;
}

uint64_t sub_236766D9C(unsigned __int16 *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;

  v3 = *(_QWORD *)(a3 + 120);
  v4 = *(_DWORD *)(a3 + 16);
  v5 = *a1;
  v6 = a1[1];
  v7 = (*(_DWORD *)(a3 + 56) * v6 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 56) * v6;
  v8 = a1[2];
  result = (v7 >> 16);
  v10 = ((*(_DWORD *)(a3 + 60) * v8 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 60) * v8) >> 16;
  v11 = (unsigned __int16)((*(_DWORD *)(a3 + 52) * v5 + 0x7FFF) / 0xFFFF + *(_WORD *)(a3 + 52) * v5);
  v12 = (unsigned __int16)((*(_DWORD *)(a3 + 56) * v6 + 0x7FFF) / 0xFFFF + *(_WORD *)(a3 + 56) * v6);
  v13 = (unsigned __int16)((*(_DWORD *)(a3 + 60) * v8 + 0x7FFF) / 0xFFFF + *(_WORD *)(a3 + 60) * v8);
  v14 = *(_DWORD *)(a3 + 92) * (((*(_DWORD *)(a3 + 52) * v5 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v5) >> 16);
  if (v5 == 0xFFFF)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a3 + 92);
  v18 = a3 + 84;
  v16 = *(_DWORD *)(a3 + 84);
  v17 = *(_DWORD *)(v18 + 4);
  if (v6 == 0xFFFF)
    v19 = 0;
  else
    v19 = v17;
  if (v8 == 0xFFFF)
    v20 = 0;
  else
    v20 = v16;
  v21 = (unsigned __int16 *)(v3 + 2 * (v14 + (int)result * v17 + v10 * v16));
  if (v11 >= (unsigned __int16)v7)
  {
    if (v12 >= v13)
    {
      if (v4)
      {
        v45 = v19 + v15;
        do
        {
          v46 = v21[v15];
          v47 = v21[v45];
          v48 = v21[v20 + v45];
          v49 = *v21++;
          result = (v48 - v47) * v13 + (v47 - v46) * v12;
          *a2++ = v49
                + ((result + (v46 - v49) * v11 + 32769 + ((int)(result + (v46 - v49) * v11 + 32769) >> 16)) >> 16);
          --v4;
        }
        while (v4);
      }
    }
    else if (v13 >= v11)
    {
      if (v4)
      {
        v59 = v20 + v15;
        v60 = v20 + v15;
        v61 = v59 + v19;
        do
        {
          v62 = v21[v60];
          v63 = v21[v61];
          v64 = v21[v20];
          v65 = *v21++;
          result = (v63 - v62);
          v66 = (v62 - v64) * v11 + result * v12 + (v64 - v65) * v13 + 32769;
          *a2++ = v65 + ((v66 + (v66 >> 16)) >> 16);
          --v4;
        }
        while (v4);
      }
    }
    else if (v4)
    {
      v30 = v20 + v15 + v19;
      do
      {
        v31 = v21[v15];
        v32 = v21[v30];
        v33 = v21[v20 + v15];
        v34 = *v21++;
        result = (v33 - v31) * v13 + (v32 - v33) * v12;
        *a2++ = v34
              + ((result + (v31 - v34) * v11 + 32769 + ((int)(result + (v31 - v34) * v11 + 32769) >> 16)) >> 16);
        --v4;
      }
      while (v4);
    }
  }
  else if (v11 >= v13)
  {
    if (v4)
    {
      v35 = v19 + v15;
      v36 = v19 + v15;
      v37 = v20 + v35;
      do
      {
        v38 = v21[v36];
        v39 = v21[v19];
        v40 = v21[v37];
        v41 = *v21++;
        v42 = v40 - v38;
        v43 = v38 - v39;
        result = (v39 - v41);
        v44 = v42 * v13 + v43 * v11 + result * v12 + 32769;
        *a2++ = v41 + ((v44 + (v44 >> 16)) >> 16);
        --v4;
      }
      while (v4);
    }
  }
  else if (v12 >= v13)
  {
    if (v4)
    {
      v50 = v20 + v19;
      v51 = v20 + v19 + v15;
      do
      {
        v52 = v21[v51];
        v53 = v21[v19];
        v54 = v21[v50];
        v55 = *v21++;
        v56 = v52 - v54;
        v57 = v54 - v53;
        result = (v53 - v55);
        v58 = v57 * v13 + v56 * v11 + result * v12 + 32769;
        *a2++ = v55 + ((v58 + (v58 >> 16)) >> 16);
        --v4;
      }
      while (v4);
    }
  }
  else if (v4)
  {
    v22 = v20 + v19;
    v23 = v20 + v19 + v15;
    do
    {
      v24 = v21[v23];
      v25 = v21[v22];
      v26 = v21[v20];
      v27 = *v21++;
      v28 = v24 - v25;
      result = (v25 - v26) * v12;
      v29 = result + v28 * v11 + (v26 - v27) * v13 + 32769;
      *a2++ = v27 + ((v29 + (v29 >> 16)) >> 16);
      --v4;
    }
    while (v4);
  }
  return result;
}

float *sub_2367670D8(float *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  float v18;
  unsigned int v19;
  float v20;
  unsigned int v21;
  float v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v3 = *(unsigned int *)(a3 + 16);
  v4 = result[1];
  if (*result <= 1.0)
    v5 = *result;
  else
    v5 = 1.0;
  if (*result < 0.000000001)
    v6 = 0.0;
  else
    v6 = v5;
  if (v4 <= 1.0)
    v7 = result[1];
  else
    v7 = 1.0;
  if (v4 < 0.000000001)
    v8 = 0.0;
  else
    v8 = v7;
  v9 = result[2];
  if (v9 <= 1.0)
    v10 = result[2];
  else
    v10 = 1.0;
  if (v9 < 0.000000001)
    v11 = 0.0;
  else
    v11 = v10;
  if ((int)v3 >= 1)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a3 + 120);
    v14 = v6 * (float)*(unsigned int *)(a3 + 52);
    v15 = v8 * (float)*(unsigned int *)(a3 + 56);
    v16 = v11 * (float)*(unsigned int *)(a3 + 60);
    v17 = vcvtms_s32_f32(v14);
    v18 = v14 - (float)(int)floorf(v14);
    v19 = vcvtms_s32_f32(v15);
    v20 = v15 - (float)(int)floorf(v15);
    v21 = vcvtms_s32_f32(v16);
    v22 = v16 - (float)(int)floorf(v16);
    v23 = *(_DWORD *)(a3 + 84);
    v24 = v23 * v21;
    if (v11 >= 1.0)
      v23 = 0;
    v25 = v24 + v23;
    v26 = *(_DWORD *)(a3 + 88) * v19;
    if (v8 >= 1.0)
      v27 = 0;
    else
      v27 = *(_DWORD *)(a3 + 88);
    v28 = v26 + v27;
    v29 = *(_DWORD *)(a3 + 92) * v17;
    if (v6 >= 1.0)
      v30 = 0;
    else
      v30 = *(_DWORD *)(a3 + 92);
    v31 = v29 + v30;
    v32 = v26 + v29;
    v33 = v24 + v26 + v29;
    v34 = v18 < v20;
    v35 = v20 < v22;
    v36 = v20 < v22 || v18 < v20;
    v37 = v26 + v31 + v24;
    v38 = v28 + v31 + v24;
    v39 = v25 + v28 + v31;
    v40 = 4 * v3;
    v41 = v28 + v29;
    v42 = v18 < v22 || v20 < v18;
    v43 = v41 + v24;
    v44 = v13 + 4 * (v25 + v32);
    v45 = v13 + 4 * (v25 + v41);
    v46 = v13 + 4 * v39;
    v47 = v13 + 4 * v43;
    if (v22 < v18)
    {
      v34 = 1;
      v35 = 1;
    }
    v48 = v25 + v26 + v31;
    v49 = v25 + v31 + v26;
    result = (float *)(v13 + 4 * v38);
    v50 = v13 + 4 * v49;
    v51 = v13 + 4 * v48;
    v52 = v22 < v20 || v18 < v22;
    v53 = v22 < v20 || v20 < v18;
    v54 = v13 + 4 * v37;
    v55 = v13 + 4 * v33;
    while (1)
    {
      v56 = *(float *)(v55 + v12);
      if (!v36)
      {
        v62 = *(float *)(v54 + v12);
        v57 = v62 - v56;
        v63 = result[v12 / 4];
        v58 = v63 - v62;
        goto LABEL_51;
      }
      if (!v52)
        break;
      if (!v34)
      {
        v65 = *(float *)(v50 + v12);
        v61 = *(float *)(v44 + v12);
        v57 = v65 - v61;
        v58 = *(float *)(v46 + v12) - v65;
        goto LABEL_57;
      }
      if (!v42)
      {
        v63 = result[v12 / 4];
        v66 = *(float *)(v47 + v12);
        v57 = v63 - v66;
        v58 = v66 - v56;
LABEL_51:
        v64 = *(float *)(v46 + v12);
LABEL_53:
        v59 = v64 - v63;
        goto LABEL_54;
      }
      if (!v35)
      {
        v67 = *(float *)(v45 + v12);
        v57 = *(float *)(v46 + v12) - v67;
        v68 = *(float *)(v47 + v12);
        v58 = v68 - v56;
        v59 = v67 - v68;
        goto LABEL_54;
      }
      v57 = 0.0;
      v58 = 0.0;
      v59 = 0.0;
      if (!v53)
      {
        v60 = *(float *)(v45 + v12);
        v57 = *(float *)(v46 + v12) - v60;
        v61 = *(float *)(v44 + v12);
        v58 = v60 - v61;
LABEL_57:
        v59 = v61 - v56;
      }
LABEL_54:
      *(float *)(a2 + v12) = (float)((float)(v56 + (float)(v57 * v18)) + (float)(v58 * v20)) + (float)(v59 * v22);
      v12 += 4;
      if (v40 == v12)
        return result;
    }
    v63 = *(float *)(v54 + v12);
    v57 = v63 - v56;
    v64 = *(float *)(v51 + v12);
    v58 = *(float *)(v46 + v12) - v64;
    goto LABEL_53;
  }
  return result;
}

unint64_t sub_236767364(unint64_t result, _WORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  _WORD v87[128];
  _WORD v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int16 *)result;
  if (v3 == 0xFFFF)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a3 + 96);
  v5 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (*(_DWORD *)(a3 + 52) * v3 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v3;
    v8 = *(unsigned __int16 *)(result + 2);
    v9 = *(unsigned __int16 *)(result + 4);
    v10 = *(unsigned __int16 *)(result + 6);
    v11 = (unsigned __int16)((*(_DWORD *)(a3 + 56) * v8 + 0x7FFF) / 0xFFFF + *(_WORD *)(a3 + 56) * v8);
    v12 = (unsigned __int16)((*(_DWORD *)(a3 + 60) * v9 + 0x7FFF) / 0xFFFF + *(_WORD *)(a3 + 60) * v9);
    v13 = (unsigned __int16)((*(_DWORD *)(a3 + 64) * v10 + 0x7FFF) / 0xFFFF + *(_WORD *)(a3 + 64) * v10);
    v14 = *(_DWORD *)(a3 + 96) * (v7 >> 16);
    v81 = v14 + v4;
    v80 = *(_QWORD *)(a3 + 120);
    v15 = v80 + 2 * v14;
    v16 = (((*(_DWORD *)(a3 + 64) * v10 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 64) * v10) >> 16) * *(_DWORD *)(a3 + 84);
    if (v10 == 0xFFFF)
      v17 = 0;
    else
      v17 = *(_DWORD *)(a3 + 84);
    v18 = *(_DWORD *)(a3 + 88) * (((*(_DWORD *)(a3 + 60) * v9 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 60) * v9) >> 16);
    if (v9 == 0xFFFF)
      v19 = 0;
    else
      v19 = *(_DWORD *)(a3 + 88);
    v20 = *(_DWORD *)(a3 + 92);
    v21 = v20 * (((*(_DWORD *)(a3 + 56) * v8 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 56) * v8) >> 16);
    if (v8 == 0xFFFF)
      v22 = 0;
    else
      v22 = v20;
    v23 = v11 < v12;
    v24 = v12 < v13 || v11 < v12;
    v25 = v11 < v13;
    v26 = v11 < v13 || v12 < v11;
    v86 = v26;
    if (v13 >= v11)
    {
      v27 = v12 < v13;
    }
    else
    {
      v23 = 1;
      v27 = 1;
    }
    v85 = v27;
    if (v13 >= v12)
    {
      v28 = v12 < v11;
    }
    else
    {
      v25 = 1;
      v28 = 1;
    }
    v84 = v28;
    v29 = v17 + v21 + v18 + v16;
    v30 = v19 + v21 + v18 + v16;
    v78 = v17;
    v79 = v19;
    v83 = v30 + v17;
    v31 = v29 + v22;
    v32 = v29 + v22 + v19;
    v33 = v30 + v22;
    v82 = v16;
    v34 = v21 + v16 + v22 + v18;
    v35 = v18 + v21 + v16;
    while (1)
    {
      v36 = *(unsigned __int16 *)(v15 + 2 * (v35 + v6));
      if (v24)
      {
        if (!v25)
        {
          v42 = *(unsigned __int16 *)(v15 + 2 * (v34 + v6));
          v37 = v42 - v36;
          v43 = *(unsigned __int16 *)(v15 + 2 * (v31 + v6));
          v38 = *(unsigned __int16 *)(v15 + 2 * (v32 + v6)) - v43;
LABEL_39:
          v39 = v43 - v42;
          goto LABEL_40;
        }
        if (v23)
        {
          if (v86)
          {
            if (v85)
            {
              if (v84)
              {
                v37 = 0;
                v38 = 0;
                v39 = 0;
              }
              else
              {
                v48 = *(unsigned __int16 *)(v15 + 2 * (v83 + v6));
                v37 = *(unsigned __int16 *)(v15 + 2 * (v32 + v6)) - v48;
                v49 = *(unsigned __int16 *)(v15 + 2 * (v29 + v6));
                v38 = v48 - v49;
                v39 = v49 - v36;
              }
              goto LABEL_40;
            }
            v43 = *(unsigned __int16 *)(v15 + 2 * (v83 + v6));
            v37 = *(unsigned __int16 *)(v15 + 2 * (v32 + v6)) - v43;
            v42 = *(unsigned __int16 *)(v15 + 2 * (v30 + v6));
            v38 = v42 - v36;
          }
          else
          {
            v42 = *(unsigned __int16 *)(v15 + 2 * (v33 + v6));
            v46 = *(unsigned __int16 *)(v15 + 2 * (v30 + v6));
            v37 = v42 - v46;
            v38 = v46 - v36;
            v43 = *(unsigned __int16 *)(v15 + 2 * (v32 + v6));
          }
          goto LABEL_39;
        }
        v44 = *(unsigned __int16 *)(v15 + 2 * (v31 + v6));
        v45 = *(unsigned __int16 *)(v15 + 2 * (v29 + v6));
        v37 = v44 - v45;
        v38 = *(unsigned __int16 *)(v15 + 2 * (v32 + v6)) - v44;
        v39 = v45 - v36;
      }
      else
      {
        v40 = *(unsigned __int16 *)(v15 + 2 * (v34 + v6));
        v41 = *(unsigned __int16 *)(v15 + 2 * (v33 + v6));
        v37 = v40 - v36;
        v38 = v41 - v40;
        v39 = *(unsigned __int16 *)(v15 + 2 * (v32 + v6)) - v41;
      }
LABEL_40:
      v47 = v37 * v11 + v38 * v12 + v39 * v13;
      v88[v6++] = v36 + ((v47 + (v47 + 0x7FFF) / 0xFFFF + 0x8000) >> 16);
      if (v5 == v6)
      {
        v50 = 0;
        v51 = v80 + 2 * v81;
        v52 = v78 + v21 + v18 + v82;
        v53 = v79 + v21 + v18 + v82;
        v54 = v53 + v78;
        v55 = v52 + v22;
        v56 = v52 + v22 + v79;
        v57 = v53 + v22;
        result = (v21 + v82 + v22 + v18);
        v58 = v21 + v82 + v18;
        while (1)
        {
          v59 = *(unsigned __int16 *)(v51 + 2 * (v58 + v50));
          if (v24)
          {
            if (!v25)
            {
              v65 = *(unsigned __int16 *)(v51 + 2 * (result + v50));
              v60 = v65 - v59;
              v66 = *(unsigned __int16 *)(v51 + 2 * (v55 + v50));
              v61 = *(unsigned __int16 *)(v51 + 2 * (v56 + v50)) - v66;
LABEL_55:
              v62 = v66 - v65;
              goto LABEL_56;
            }
            if (v23)
            {
              if (v86)
              {
                if (v85)
                {
                  if (v84)
                  {
                    v60 = 0;
                    v61 = 0;
                    v62 = 0;
                  }
                  else
                  {
                    v71 = *(unsigned __int16 *)(v51 + 2 * (v54 + v50));
                    v60 = *(unsigned __int16 *)(v51 + 2 * (v56 + v50)) - v71;
                    v72 = *(unsigned __int16 *)(v51 + 2 * (v52 + v50));
                    v61 = v71 - v72;
                    v62 = v72 - v59;
                  }
                  goto LABEL_56;
                }
                v66 = *(unsigned __int16 *)(v51 + 2 * (v54 + v50));
                v60 = *(unsigned __int16 *)(v51 + 2 * (v56 + v50)) - v66;
                v65 = *(unsigned __int16 *)(v51 + 2 * (v53 + v50));
                v61 = v65 - v59;
              }
              else
              {
                v65 = *(unsigned __int16 *)(v51 + 2 * (v57 + v50));
                v69 = *(unsigned __int16 *)(v51 + 2 * (v53 + v50));
                v60 = v65 - v69;
                v61 = v69 - v59;
                v66 = *(unsigned __int16 *)(v51 + 2 * (v56 + v50));
              }
              goto LABEL_55;
            }
            v67 = *(unsigned __int16 *)(v51 + 2 * (v55 + v50));
            v68 = *(unsigned __int16 *)(v51 + 2 * (v52 + v50));
            v60 = v67 - v68;
            v61 = *(unsigned __int16 *)(v51 + 2 * (v56 + v50)) - v67;
            v62 = v68 - v59;
          }
          else
          {
            v63 = *(unsigned __int16 *)(v51 + 2 * (result + v50));
            v64 = *(unsigned __int16 *)(v51 + 2 * (v57 + v50));
            v60 = v63 - v59;
            v61 = v64 - v63;
            v62 = *(unsigned __int16 *)(v51 + 2 * (v56 + v50)) - v64;
          }
LABEL_56:
          v70 = v60 * v11 + v61 * v12 + v62 * v13;
          v87[v50++] = v59 + ((v70 + (v70 + 0x7FFF) / 0xFFFF + 0x8000) >> 16);
          if (v5 == v50)
          {
            v73 = v87;
            v74 = v88;
            do
            {
              v76 = *v74++;
              v75 = v76;
              v77 = *v73++;
              *a2++ = v75 + (((v77 - v75) * (unsigned __int16)v7 + 0x8000) >> 16);
              --v5;
            }
            while (v5);
            return result;
          }
        }
      }
    }
  }
  return result;
}

float *sub_2367678D8(float *a1, float *a2, uint64_t a3)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  int v10;
  double v11;
  int v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float *result;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  _OWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[512];
  _BYTE v35[512];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 1;
  if (*a1 <= 1.0)
    v6 = *a1;
  else
    v6 = 1.0;
  v7 = 0.0;
  if (*a1 >= 0.000000001)
    v7 = v6;
  v8 = v7 * (float)*(unsigned int *)(a3 + 52);
  v9 = *(_OWORD *)(a3 + 112);
  v31 = *(_OWORD *)(a3 + 96);
  v32 = v9;
  v10 = *(_DWORD *)(a3 + 96);
  v11 = v8 + 1.03079215e11;
  v12 = SLODWORD(v11) >> 16;
  v13 = (SLODWORD(v11) >> 16) * v10;
  v14 = *(_OWORD *)(a3 + 48);
  if (v7 >= 1.0)
    v10 = 0;
  v15 = v13 + v10;
  v27[2] = *(_OWORD *)(a3 + 32);
  v28 = v14;
  *(_QWORD *)((char *)&v28 + 4) = *(_QWORD *)(a3 + 56);
  HIDWORD(v28) = *(_DWORD *)(a3 + 64);
  v17 = *(_QWORD *)(a3 + 120);
  v16 = *(_QWORD *)(a3 + 128);
  v18 = *(_OWORD *)(a3 + 80);
  v29 = *(_OWORD *)(a3 + 64);
  v30 = v18;
  v19 = *(_OWORD *)(a3 + 16);
  v27[0] = *(_OWORD *)a3;
  v27[1] = v19;
  *((_QWORD *)&v32 + 1) = v17 + 4 * v13;
  v33 = v16;
  sub_2367670D8(a1 + 1, (uint64_t)v35, (uint64_t)v27);
  *((_QWORD *)&v32 + 1) = v17 + 4 * v15;
  result = sub_2367670D8(v5, (uint64_t)v34, (uint64_t)v27);
  v21 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v21)
  {
    v22 = (float *)v34;
    v23 = (float *)v35;
    do
    {
      v24 = *v23++;
      v25 = v24;
      v26 = *v22++;
      *a2++ = v25 + (float)((float)(v26 - v25) * (float)(v8 - (float)v12));
      --v21;
    }
    while (v21);
  }
  return result;
}

unint64_t sub_236767A48(unsigned __int16 *a1, _WORD *a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t result;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  int v25;
  _OWORD v26[3];
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _WORD v32[128];
  _WORD v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t)(a1 + 1);
  v5 = *a1;
  v7 = v5 == 0xFFFF;
  v8 = *(_DWORD *)(a3 + 52) * v5;
  v9 = *(_DWORD *)(a3 + 100);
  v10 = *(_OWORD *)(a3 + 112);
  v29 = *(_OWORD *)(a3 + 96);
  v30 = v10;
  v11 = (v8 + 0x7FFF) / 0xFFFF + v8;
  v12 = v11 >> 16;
  if (!v7)
    ++v12;
  v13 = v12 * v9;
  v15 = *(_QWORD *)(a3 + 120);
  v14 = *(_QWORD *)(a3 + 128);
  v16 = *(_OWORD *)(a3 + 48);
  v26[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v27 = v16;
  v17 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v27[16] = *(_OWORD *)(a3 + 64);
  v28 = v17;
  v18 = *(_OWORD *)(a3 + 16);
  v26[0] = *(_OWORD *)a3;
  v26[1] = v18;
  *(_OWORD *)&v27[4] = *(_OWORD *)(a3 + 56);
  *((_QWORD *)&v30 + 1) = v15 + 2 * (v11 >> 16) * v9;
  v31 = v14;
  sub_236767364((unint64_t)(a1 + 1), v33, (uint64_t)v26);
  *((_QWORD *)&v30 + 1) = v15 + 2 * v13;
  result = sub_236767364(v6, v32, (uint64_t)v26);
  v20 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v20)
  {
    v21 = v32;
    v22 = v33;
    do
    {
      v24 = *v22++;
      v23 = v24;
      v25 = *v21++;
      *a2++ = v23 + (((v25 - v23) * (unsigned __int16)v11 + 0x8000) >> 16);
      --v20;
    }
    while (v20);
  }
  return result;
}

float *sub_236767B9C(float *a1, float *a2, uint64_t a3)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  int v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float *result;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  _OWORD v27[3];
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  float v33[128];
  float v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 1;
  if (*a1 <= 1.0)
    v6 = *a1;
  else
    v6 = 1.0;
  v7 = 0.0;
  if (*a1 >= 0.000000001)
    v7 = v6;
  v8 = v7 * (float)*(unsigned int *)(a3 + 52);
  v9 = *(_OWORD *)(a3 + 112);
  v30 = *(_OWORD *)(a3 + 96);
  v31 = v9;
  v10 = *(_DWORD *)(a3 + 100);
  v11 = v8 + 1.03079215e11;
  v12 = SLODWORD(v11) >> 16;
  v14 = *(_QWORD *)(a3 + 120);
  v13 = *(_QWORD *)(a3 + 128);
  v15 = (SLODWORD(v11) >> 16) * v10;
  if (v7 >= 1.0)
    v10 = 0;
  v16 = v15 + v10;
  v17 = *(_OWORD *)(a3 + 48);
  v27[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v28 = v17;
  v18 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v28[16] = *(_OWORD *)(a3 + 64);
  v29 = v18;
  v19 = *(_OWORD *)(a3 + 16);
  v27[0] = *(_OWORD *)a3;
  v27[1] = v19;
  *(_OWORD *)&v28[4] = *(_OWORD *)(a3 + 56);
  *((_QWORD *)&v31 + 1) = v14 + 4 * v15;
  v32 = v13;
  sub_2367678D8(a1 + 1, v34, (uint64_t)v27);
  *((_QWORD *)&v31 + 1) = v14 + 4 * v16;
  result = sub_2367678D8(v5, v33, (uint64_t)v27);
  v21 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v21)
  {
    v22 = v33;
    v23 = v34;
    do
    {
      v24 = *v23++;
      v25 = v24;
      v26 = *v22++;
      *a2++ = v25 + (float)((float)(v26 - v25) * (float)(v8 - (float)v12));
      --v21;
    }
    while (v21);
  }
  return result;
}

unint64_t sub_236767D04(unsigned __int16 *a1, _WORD *a2, uint64_t a3)
{
  int v5;
  unsigned __int16 *v6;
  BOOL v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t result;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  _OWORD v25[3];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _WORD v31[128];
  _WORD v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 1;
  v5 = *a1;
  v7 = v5 == 0xFFFF;
  v8 = *(_DWORD *)(a3 + 104);
  v9 = *(_OWORD *)(a3 + 80);
  v10 = *(_OWORD *)(a3 + 112);
  v11 = (*(_DWORD *)(a3 + 52) * v5 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v5;
  v28 = *(_OWORD *)(a3 + 96);
  v29 = v10;
  v12 = v11 >> 16;
  if (!v7)
    ++v12;
  v13 = v12 * v8;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a3 + 64);
  v27 = v9;
  *(_DWORD *)&v26[20] = *(_DWORD *)(a3 + 72);
  v15 = *(_QWORD *)(a3 + 120);
  v14 = *(_QWORD *)(a3 + 128);
  v16 = *(_OWORD *)(a3 + 48);
  v25[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v26 = v16;
  v17 = *(_OWORD *)(a3 + 16);
  v25[0] = *(_OWORD *)a3;
  v25[1] = v17;
  *(_OWORD *)&v26[4] = *(_OWORD *)(a3 + 56);
  *((_QWORD *)&v29 + 1) = v15 + 2 * (v11 >> 16) * v8;
  v30 = v14;
  sub_236767A48(a1 + 1, v32, (uint64_t)v25);
  *((_QWORD *)&v29 + 1) = v15 + 2 * v13;
  result = sub_236767A48(v6, v31, (uint64_t)v25);
  v19 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v19)
  {
    v20 = v31;
    v21 = v32;
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      *a2++ = v22 + (((v24 - v22) * (unsigned __int16)v11 + 0x8000) >> 16);
      --v19;
    }
    while (v19);
  }
  return result;
}

float *sub_236767E64(float *a1, float *a2, uint64_t a3)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  double v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float *result;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  _OWORD v27[3];
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  float v33[128];
  float v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 1;
  if (*a1 <= 1.0)
    v6 = *a1;
  else
    v6 = 1.0;
  v7 = 0.0;
  if (*a1 >= 0.000000001)
    v7 = v6;
  v8 = v7 * (float)*(unsigned int *)(a3 + 52);
  v9 = *(_OWORD *)(a3 + 80);
  v10 = v8 + 1.03079215e11;
  v11 = *(_OWORD *)(a3 + 112);
  v30 = *(_OWORD *)(a3 + 96);
  v31 = v11;
  v12 = *(_DWORD *)(a3 + 104);
  v13 = SLODWORD(v10) >> 16;
  v14 = (SLODWORD(v10) >> 16) * v12;
  if (v7 >= 1.0)
    v12 = 0;
  v15 = v14 + v12;
  *(_OWORD *)&v28[16] = *(_OWORD *)(a3 + 64);
  v29 = v9;
  *(_DWORD *)&v28[20] = *(_DWORD *)(a3 + 72);
  v17 = *(_QWORD *)(a3 + 120);
  v16 = *(_QWORD *)(a3 + 128);
  v18 = *(_OWORD *)(a3 + 48);
  v27[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v28 = v18;
  v19 = *(_OWORD *)(a3 + 16);
  v27[0] = *(_OWORD *)a3;
  v27[1] = v19;
  *(_OWORD *)&v28[4] = *(_OWORD *)(a3 + 56);
  *((_QWORD *)&v31 + 1) = v17 + 4 * v14;
  v32 = v16;
  sub_236767B9C(a1 + 1, v34, (uint64_t)v27);
  *((_QWORD *)&v31 + 1) = v17 + 4 * v15;
  result = sub_236767B9C(v5, v33, (uint64_t)v27);
  v21 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v21)
  {
    v22 = v33;
    v23 = v34;
    do
    {
      v24 = *v23++;
      v25 = v24;
      v26 = *v22++;
      *a2++ = v25 + (float)((float)(v26 - v25) * (float)(v8 - (float)v13));
      --v21;
    }
    while (v21);
  }
  return result;
}

unint64_t sub_236767FD8(unsigned __int16 *a1, _WORD *a2, uint64_t a3)
{
  int v5;
  unsigned __int16 *v6;
  BOOL v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t result;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  int v24;
  _OWORD v25[3];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _WORD v31[128];
  _WORD v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 1;
  v5 = *a1;
  v7 = v5 == 0xFFFF;
  v8 = *(_DWORD *)(a3 + 108);
  v9 = *(_OWORD *)(a3 + 80);
  v10 = *(_OWORD *)(a3 + 112);
  v11 = (*(_DWORD *)(a3 + 52) * v5 + 0x7FFF) / 0xFFFF + *(_DWORD *)(a3 + 52) * v5;
  v28 = *(_OWORD *)(a3 + 96);
  v29 = v10;
  v12 = v11 >> 16;
  if (!v7)
    ++v12;
  v13 = v12 * v8;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a3 + 64);
  v27 = v9;
  *(_QWORD *)&v26[20] = *(_QWORD *)(a3 + 72);
  v15 = *(_QWORD *)(a3 + 120);
  v14 = *(_QWORD *)(a3 + 128);
  v16 = *(_OWORD *)(a3 + 48);
  v25[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v26 = v16;
  v17 = *(_OWORD *)(a3 + 16);
  v25[0] = *(_OWORD *)a3;
  v25[1] = v17;
  *(_OWORD *)&v26[4] = *(_OWORD *)(a3 + 56);
  *((_QWORD *)&v29 + 1) = v15 + 2 * (v11 >> 16) * v8;
  v30 = v14;
  sub_236767D04(a1 + 1, v32, (uint64_t)v25);
  *((_QWORD *)&v29 + 1) = v15 + 2 * v13;
  result = sub_236767D04(v6, v31, (uint64_t)v25);
  v19 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v19)
  {
    v20 = v31;
    v21 = v32;
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      *a2++ = v22 + (((v24 - v22) * (unsigned __int16)v11 + 0x8000) >> 16);
      --v19;
    }
    while (v19);
  }
  return result;
}

float *sub_236768138(float *a1, float *a2, uint64_t a3)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  double v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float *result;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  _OWORD v27[3];
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  float v33[128];
  float v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 1;
  if (*a1 <= 1.0)
    v6 = *a1;
  else
    v6 = 1.0;
  v7 = 0.0;
  if (*a1 >= 0.000000001)
    v7 = v6;
  v8 = v7 * (float)*(unsigned int *)(a3 + 52);
  v9 = *(_OWORD *)(a3 + 80);
  v10 = v8 + 1.03079215e11;
  v11 = *(_OWORD *)(a3 + 112);
  v30 = *(_OWORD *)(a3 + 96);
  v31 = v11;
  v12 = *(_DWORD *)(a3 + 108);
  v13 = SLODWORD(v10) >> 16;
  v14 = (SLODWORD(v10) >> 16) * v12;
  if (v7 >= 1.0)
    v12 = 0;
  v15 = v14 + v12;
  *(_OWORD *)&v28[16] = *(_OWORD *)(a3 + 64);
  v29 = v9;
  *(_QWORD *)&v28[20] = *(_QWORD *)(a3 + 72);
  v17 = *(_QWORD *)(a3 + 120);
  v16 = *(_QWORD *)(a3 + 128);
  v18 = *(_OWORD *)(a3 + 48);
  v27[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v28 = v18;
  v19 = *(_OWORD *)(a3 + 16);
  v27[0] = *(_OWORD *)a3;
  v27[1] = v19;
  *(_OWORD *)&v28[4] = *(_OWORD *)(a3 + 56);
  *((_QWORD *)&v31 + 1) = v17 + 4 * v14;
  v32 = v16;
  sub_236767E64(a1 + 1, v34, (uint64_t)v27);
  *((_QWORD *)&v31 + 1) = v17 + 4 * v15;
  result = sub_236767E64(v5, v33, (uint64_t)v27);
  v21 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v21)
  {
    v22 = v33;
    v23 = v34;
    do
    {
      v24 = *v23++;
      v25 = v24;
      v26 = *v22++;
      *a2++ = v25 + (float)((float)(v26 - v25) * (float)(v8 - (float)v13));
      --v21;
    }
    while (v21);
  }
  return result;
}

unint64_t sub_2367682AC(unsigned __int16 *a1, _WORD *a2, uint64_t a3)
{
  int v5;
  unsigned __int16 *v6;
  BOOL v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t result;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  int v25;
  _OWORD v26[3];
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _WORD v32[128];
  _WORD v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 1;
  v5 = *a1;
  v7 = v5 == 0xFFFF;
  v8 = *(_DWORD *)(a3 + 52) * v5;
  v9 = *(_OWORD *)(a3 + 80);
  v10 = *(_OWORD *)(a3 + 96);
  v30 = *(_OWORD *)(a3 + 112);
  v11 = (v8 + 0x7FFF) / 0xFFFF + v8;
  v12 = v11 >> 16;
  if (!v7)
    ++v12;
  v13 = v12 * v30;
  v15 = *(_QWORD *)(a3 + 120);
  v14 = *(_QWORD *)(a3 + 128);
  v16 = *(_OWORD *)(a3 + 48);
  v26[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v27 = v16;
  *(_OWORD *)&v27[16] = *(_OWORD *)(a3 + 64);
  v28 = v9;
  v17 = *(_OWORD *)(a3 + 16);
  v26[0] = *(_OWORD *)a3;
  v26[1] = v17;
  *(_OWORD *)&v27[4] = *(_OWORD *)(a3 + 56);
  v18 = *(_OWORD *)(a3 + 68);
  v29 = v10;
  *(_OWORD *)&v27[16] = v18;
  *((_QWORD *)&v30 + 1) = v15 + 2 * (v11 >> 16) * (int)v30;
  v31 = v14;
  sub_236767FD8(a1 + 1, v33, (uint64_t)v26);
  *((_QWORD *)&v30 + 1) = v15 + 2 * v13;
  result = sub_236767FD8(v6, v32, (uint64_t)v26);
  v20 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v20)
  {
    v21 = v32;
    v22 = v33;
    do
    {
      v24 = *v22++;
      v23 = v24;
      v25 = *v21++;
      *a2++ = v23 + (((v25 - v23) * (unsigned __int16)v11 + 0x8000) >> 16);
      --v20;
    }
    while (v20);
  }
  return result;
}

float *sub_236768410(float *a1, float *a2, uint64_t a3)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  int v9;
  double v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float *result;
  uint64_t v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  _OWORD v29[3];
  _BYTE v30[32];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  float v35[128];
  float v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 1;
  if (*a1 <= 1.0)
    v6 = *a1;
  else
    v6 = 1.0;
  v7 = 0.0;
  if (*a1 >= 0.000000001)
    v7 = v6;
  v8 = v7 * (float)*(unsigned int *)(a3 + 52);
  v33 = *(_OWORD *)(a3 + 112);
  v9 = *(_DWORD *)(a3 + 112);
  v10 = v8 + 1.03079215e11;
  v11 = LODWORD(v10);
  v12 = *(_OWORD *)(a3 + 80);
  v13 = *(_OWORD *)(a3 + 96);
  v14 = v11 >> 16;
  v16 = *(_QWORD *)(a3 + 120);
  v15 = *(_QWORD *)(a3 + 128);
  v17 = v14 * v9;
  if (v7 >= 1.0)
    v9 = 0;
  v18 = v17 + v9;
  v19 = *(_OWORD *)(a3 + 48);
  v29[2] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v30 = v19;
  *(_OWORD *)&v30[16] = *(_OWORD *)(a3 + 64);
  v31 = v12;
  v20 = *(_OWORD *)(a3 + 16);
  v29[0] = *(_OWORD *)a3;
  v29[1] = v20;
  *(_OWORD *)&v30[4] = *(_OWORD *)(a3 + 56);
  v21 = *(_OWORD *)(a3 + 68);
  v32 = v13;
  *(_OWORD *)&v30[16] = v21;
  *((_QWORD *)&v33 + 1) = v16 + 4 * v17;
  v34 = v15;
  sub_236768138(a1 + 1, v36, (uint64_t)v29);
  *((_QWORD *)&v33 + 1) = v16 + 4 * v18;
  result = sub_236768138(v5, v35, (uint64_t)v29);
  v23 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v23)
  {
    v24 = v35;
    v25 = v36;
    do
    {
      v26 = *v25++;
      v27 = v26;
      v28 = *v24++;
      *a2++ = v27 + (float)((float)(v28 - v27) * (float)(v8 - (float)v14));
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_236768588(uint64_t *a1, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v13;
  uint64_t *v15;
  uint64_t *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t *v33;
  __int128 *v34;

  if (a3 >= 9)
  {
    sub_2367644B8(a1, 2, "Too many input channels (%d channels, max=%d)", a4, a5, a6, a7, a8, a3);
    return 0;
  }
  v11 = a6;
  v13 = a4;
  if (a1)
  {
    v15 = &qword_25642E910;
    v16 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v15 = (uint64_t *)*v15;
      if (!v15)
        break;
      if (v15 == a1)
      {
        v16 = a1;
        break;
      }
    }
  }
  else
  {
    v16 = (uint64_t *)&unk_250800620;
  }
  v17 = (__int128 *)v16[6];
  if (!v17)
    v17 = &xmmword_2542ABF08;
  v18 = (*((uint64_t (**)(uint64_t *, uint64_t))v17 + 1))(a1, 136);
  v10 = v18;
  if (v18)
  {
    *(_DWORD *)(v18 + 8) = v11;
    *(_DWORD *)(v18 + 12) = a3;
    *(_DWORD *)(v18 + 16) = v13;
    *(_QWORD *)(v18 + 120) = a5;
    *(_QWORD *)v18 = a1;
    if (a3)
    {
      v19 = a3;
      v20 = (_DWORD *)(v18 + 52);
      v21 = a2;
      v22 = a3;
      do
      {
        *(v20 - 8) = *v21;
        v23 = *v21++;
        *v20++ = v23 - 1;
        --v22;
      }
      while (v22);
      *(_DWORD *)(v18 + 84) = v13;
      if (a3 >= 2)
      {
        v24 = (_DWORD *)(v18 + 88);
        v25 = v13;
        do
        {
          v25 *= a2[--v19];
          *v24++ = v25;
        }
        while (v19 != 1);
      }
    }
    else
    {
      *(_DWORD *)(v18 + 84) = v13;
    }
    if (!sub_2367663E4(a1, v18))
    {
      sub_2367644B8(a1, 8, "Unsupported interpolation (%d->%d channels)", v26, v27, v28, v29, v30, a3);
      if (a1)
      {
        v32 = &qword_25642E910;
        v33 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v32 = (uint64_t *)*v32;
          if (!v32)
            break;
          if (v32 == a1)
          {
            v33 = a1;
            break;
          }
        }
      }
      else
      {
        v33 = (uint64_t *)&unk_250800620;
      }
      v34 = (__int128 *)v33[6];
      if (!v34)
        v34 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v34 + 2))(a1, v10);
      return 0;
    }
  }
  return v10;
}

uint64_t sub_236768758(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;

  if (a1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == a1)
      {
        v3 = a1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  v5 = (*((uint64_t (**)(uint64_t *, uint64_t))v4 + 1))(a1, 320);
  if (v5)
  {
    if (a1)
    {
      v6 = &qword_25642E910;
      v7 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v6 = (uint64_t *)*v6;
        if (!v6)
          break;
        if (v6 == a1)
        {
          v7 = a1;
          break;
        }
      }
    }
    else
    {
      v7 = (uint64_t *)&unk_250800620;
    }
    v8 = (__int128 *)v7[6];
    if (!v8)
      v8 = &xmmword_2542ABF08;
    v9 = (_DWORD *)(*((uint64_t (**)(uint64_t *, uint64_t))v8 + 1))(a1, 4);
    if (v9)
    {
      *v9 = 0;
      *(_QWORD *)v5 = v9;
      *(_QWORD *)(v5 + 8) = a1;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 280) = sub_2367688D0;
      *(_QWORD *)(v5 + 288) = sub_2367688E8;
      *(_BYTE *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 296) = sub_2367688F8;
      *(_QWORD *)(v5 + 304) = sub_2367689C0;
      *(_QWORD *)(v5 + 312) = sub_2367689CC;
    }
    else
    {
      if (a1)
      {
        v10 = &qword_25642E910;
        v11 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v10 = (uint64_t *)*v10;
          if (!v10)
            break;
          if (v10 == a1)
          {
            v11 = a1;
            break;
          }
        }
      }
      else
      {
        v11 = (uint64_t *)&unk_250800620;
      }
      v12 = (__int128 *)v11[6];
      if (!v12)
        v12 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v12 + 2))(a1, v5);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_2367688D0(_DWORD **a1, uint64_t a2, int a3, uint64_t a4)
{
  **a1 += a4 * a3;
  return a4;
}

uint64_t sub_2367688E8(_DWORD **a1, int a2)
{
  **a1 = a2;
  return 1;
}

uint64_t sub_2367688F8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;

  v3 = *a1;
  v2 = (uint64_t *)a1[1];
  if (v3)
  {
    if (v2)
    {
      v4 = &qword_25642E910;
      v5 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          break;
        if (v4 == v2)
        {
          v5 = v2;
          break;
        }
      }
    }
    else
    {
      v5 = (uint64_t *)&unk_250800620;
    }
    v6 = (__int128 *)v5[6];
    if (!v6)
      v6 = &xmmword_2542ABF08;
    (*((void (**)(void))v6 + 2))();
    v2 = (uint64_t *)a1[1];
  }
  if (v2)
  {
    v7 = &qword_25642E910;
    v8 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == v2)
      {
        v8 = v2;
        break;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)&unk_250800620;
  }
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  (*((void (**)(void))v9 + 2))();
  return 1;
}

uint64_t sub_2367689C0(unsigned int **a1)
{
  return **a1;
}

uint64_t sub_2367689CC(uint64_t a1, int a2)
{
  unsigned int v2;

  v2 = **(_DWORD **)a1 + a2;
  **(_DWORD **)a1 = v2;
  if (v2 > *(_DWORD *)(a1 + 16))
    *(_DWORD *)(a1 + 16) = v2;
  return 1;
}

uint64_t sub_2367689F4(uint64_t *a1, const void *a2, uint64_t a3, char *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 *v32;
  _QWORD *v33;
  int v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  __int128 *v38;
  void *v39;
  uint64_t *v40;
  uint64_t *v41;
  __int128 *v42;
  uint64_t *v43;
  uint64_t *v44;
  __int128 *v45;
  uint64_t *v46;
  uint64_t *v47;
  __int128 *v48;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  if (a1)
  {
    v8 = &qword_25642E910;
    v9 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == a1)
      {
        v9 = a1;
        break;
      }
    }
  }
  else
  {
    v9 = (uint64_t *)&unk_250800620;
  }
  v10 = (__int128 *)v9[6];
  if (!v10)
    v10 = &xmmword_2542ABF08;
  v16 = (*((uint64_t (**)(uint64_t *, uint64_t))v10 + 1))(a1, 320);
  if (v16)
  {
    v17 = *a4;
    if (v17 == 119)
    {
      if (a1)
      {
        v20 = &qword_25642E910;
        v21 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v20 = (uint64_t *)*v20;
          if (!v20)
            break;
          if (v20 == a1)
          {
            v21 = a1;
            break;
          }
        }
      }
      else
      {
        v21 = (uint64_t *)&unk_250800620;
      }
      v32 = (__int128 *)v21[6];
      if (!v32)
        v32 = &xmmword_2542ABF08;
      v33 = (_QWORD *)(*((uint64_t (**)(uint64_t *, uint64_t))v32 + 1))(a1, 24);
      if (v33)
      {
        v29 = v33;
        v34 = 0;
        v35 = 0;
        *v33 = a2;
LABEL_49:
        v29[3] = 0;
        v29[4] = v34;
        v29[2] = a3;
        *(_QWORD *)v16 = v29;
        *(_QWORD *)(v16 + 8) = a1;
        *(_DWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 20) = v35;
        *(_BYTE *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 280) = sub_236768DBC;
        *(_QWORD *)(v16 + 288) = sub_236768E4C;
        *(_QWORD *)(v16 + 296) = sub_236768E90;
        *(_QWORD *)(v16 + 304) = sub_236768FCC;
        *(_QWORD *)(v16 + 312) = sub_236768FE4;
        return v16;
      }
    }
    else
    {
      if (v17 != 114)
      {
        sub_2367644B8(a1, 8, "Unknown access mode '%c'", v11, v12, v13, v14, v15, *a4);
        return 0;
      }
      if (a1)
      {
        v18 = &qword_25642E910;
        v19 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v18 = (uint64_t *)*v18;
          if (!v18)
            break;
          if (v18 == a1)
          {
            v19 = a1;
            break;
          }
        }
      }
      else
      {
        v19 = (uint64_t *)&unk_250800620;
      }
      v22 = (__int128 *)v19[6];
      if (!v22)
        v22 = &xmmword_2542ABF08;
      v23 = (*((uint64_t (**)(uint64_t *, uint64_t))v22 + 1))(a1, 24);
      if (v23)
      {
        v29 = (_DWORD *)v23;
        if (a2)
        {
          if (a1)
          {
            v30 = &qword_25642E910;
            v31 = (uint64_t *)&unk_250800620;
            while (1)
            {
              v30 = (uint64_t *)*v30;
              if (!v30)
                break;
              if (v30 == a1)
              {
                v31 = a1;
                break;
              }
            }
          }
          else
          {
            v31 = (uint64_t *)&unk_250800620;
          }
          v38 = (__int128 *)v31[6];
          if (!v38)
            v38 = &xmmword_2542ABF08;
          v39 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t))v38)(a1, a3);
          *(_QWORD *)v29 = v39;
          if (v39)
          {
            memmove(v39, a2, a3);
            v34 = 1;
            v35 = a3;
            goto LABEL_49;
          }
          if (a1)
          {
            v40 = &qword_25642E910;
            v41 = (uint64_t *)&unk_250800620;
            while (1)
            {
              v40 = (uint64_t *)*v40;
              if (!v40)
                break;
              if (v40 == a1)
              {
                v41 = a1;
                break;
              }
            }
            v42 = (__int128 *)v41[6];
            if (!v42)
              v42 = &xmmword_2542ABF08;
            (*((void (**)(uint64_t *, _DWORD *))v42 + 2))(a1, v29);
            v43 = &qword_25642E910;
            v44 = (uint64_t *)&unk_250800620;
            while (1)
            {
              v43 = (uint64_t *)*v43;
              if (!v43)
                break;
              if (v43 == a1)
              {
                v44 = a1;
                break;
              }
            }
          }
          else
          {
            off_2542ABF18(0, v29);
            v44 = (uint64_t *)&unk_250800620;
          }
          v50 = (__int128 *)v44[6];
          if (!v50)
            v50 = &xmmword_2542ABF08;
          (*((void (**)(uint64_t *, uint64_t))v50 + 2))(a1, v16);
          sub_2367644B8(a1, 5, "Couldn't allocate %ld bytes for profile", v51, v52, v53, v54, v55, a3);
          return 0;
        }
        sub_2367644B8(a1, 5, "Couldn't read profile from NULL pointer", v24, v25, v26, v27, v28, v56);
        if (a1)
        {
          v36 = &qword_25642E910;
          v37 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v36 = (uint64_t *)*v36;
            if (!v36)
              break;
            if (v36 == a1)
            {
              v37 = a1;
              break;
            }
          }
        }
        else
        {
          v37 = (uint64_t *)&unk_250800620;
        }
        v45 = (__int128 *)v37[6];
        if (!v45)
          v45 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *, _DWORD *))v45 + 2))(a1, v29);
      }
    }
    if (a1)
    {
      v46 = &qword_25642E910;
      v47 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v46 = (uint64_t *)*v46;
        if (!v46)
          break;
        if (v46 == a1)
        {
          v47 = a1;
          break;
        }
      }
    }
    else
    {
      v47 = (uint64_t *)&unk_250800620;
    }
    v48 = (__int128 *)v47[6];
    if (!v48)
      v48 = &xmmword_2542ABF08;
    (*((void (**)(uint64_t *, uint64_t))v48 + 2))(a1, v16);
    return 0;
  }
  return v16;
}

uint64_t sub_236768DBC(uint64_t **a1, void *__dst, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v8 = *a1;
  v9 = a4 * a3;
  v11 = *((_DWORD *)*a1 + 2);
  v10 = *((unsigned int *)*a1 + 3);
  if ((int)v10 + (int)a4 * a3 <= v11)
  {
    v12 = a4;
    memmove(__dst, (const void *)(*v8 + v10), (a4 * a3));
    *((_DWORD *)v8 + 3) += v9;
  }
  else
  {
    sub_2367644B8(a1[1], 5, "Read from memory error. Got %d bytes, block should be of %d bytes", a4, a5, a6, a7, a8, v11 - v10);
    return 0;
  }
  return v12;
}

uint64_t sub_236768E4C(uint64_t **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (*((_DWORD *)*a1 + 2) >= a2)
  {
    *((_DWORD *)*a1 + 3) = a2;
    return 1;
  }
  else
  {
    sub_2367644B8(a1[1], 6, "Too few data; probably corrupted profile", a4, a5, a6, a7, a8, vars0);
    return 0;
  }
}

uint64_t sub_236768E90(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;

  if (*((_DWORD *)*a1 + 4) && **a1)
  {
    v3 = a1 + 1;
    v2 = a1[1];
    if (v2)
    {
      v4 = &qword_25642E910;
      v5 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          break;
        if (v4 == v2)
        {
          v5 = a1[1];
          break;
        }
      }
    }
    else
    {
      v5 = (uint64_t *)&unk_250800620;
    }
    v6 = (__int128 *)v5[6];
    if (!v6)
      v6 = &xmmword_2542ABF08;
    (*((void (**)(void))v6 + 2))();
  }
  else
  {
    v3 = a1 + 1;
  }
  if (*v3)
  {
    v7 = &qword_25642E910;
    v8 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == *v3)
      {
        v8 = *v3;
        break;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)&unk_250800620;
  }
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  (*((void (**)(void))v9 + 2))();
  if (*v3)
  {
    v10 = &qword_25642E910;
    v11 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == *v3)
      {
        v11 = *v3;
        break;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)&unk_250800620;
  }
  v12 = (__int128 *)v11[6];
  if (!v12)
    v12 = &xmmword_2542ABF08;
  (*((void (**)(void))v12 + 2))();
  return 1;
}

uint64_t sub_236768FCC(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return *(unsigned int *)(*(_QWORD *)a1 + 12);
  else
    return 0;
}

uint64_t sub_236768FE4(uint64_t *a1, unsigned int a2, void *__src)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  unsigned int v8;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 + 8);
  v4 = *(unsigned int *)(v3 + 12);
  if (v4 + a2 <= v5)
    v6 = a2;
  else
    v6 = v5 - v4;
  if ((_DWORD)v6)
  {
    memmove((void *)(*(_QWORD *)v3 + v4), __src, v6);
    v8 = *(_DWORD *)(v3 + 12) + v6;
    *(_DWORD *)(v3 + 12) = v8;
    if (v8 > *((_DWORD *)a1 + 4))
      *((_DWORD *)a1 + 4) = v8;
  }
  return 1;
}

size_t sub_236769064(uint64_t a1, void *__ptr, size_t __size, size_t __nitems)
{
  size_t v4;
  char v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __nitems;
  v5 = __size;
  v7 = fread(__ptr, __size, __nitems, *(FILE **)a1);
  if (v7 != (_DWORD)v4)
  {
    sub_2367644B8(*(uint64_t **)(a1 + 8), 1, "Read error. Got %d bytes, block should be of %d bytes", v8, v9, v10, v11, v12, v7 * v5);
    return 0;
  }
  return v4;
}

uint64_t sub_2367690E4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (!fseek(*(FILE **)a1, a2, 0))
    return 1;
  sub_2367644B8(*(uint64_t **)(a1 + 8), 1, "Seek error; probably corrupted file", v3, v4, v5, v6, v7, v9);
  return 0;
}

uint64_t sub_236769134(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  __int128 *v6;

  if (fclose(*(FILE **)a1))
    return 0;
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v4 = &qword_25642E910;
    v5 = &unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == v3)
      {
        v5 = *(void **)(a1 + 8);
        break;
      }
    }
  }
  else
  {
    v5 = &unk_250800620;
  }
  v6 = (__int128 *)*((_QWORD *)v5 + 6);
  if (!v6)
    v6 = &xmmword_2542ABF08;
  (*((void (**)(void))v6 + 2))();
  return 1;
}

uint64_t sub_2367691C0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = MEMORY[0x23B7F90E0](*(_QWORD *)a1);
  if (result == -1)
  {
    sub_2367644B8(*(uint64_t **)(a1 + 8), 1, "Tell error; probably corrupted file", v3, v4, v5, v6, v7, v8);
    return 0;
  }
  return result;
}

BOOL sub_236769204(uint64_t a1, size_t __size, void *__ptr)
{
  if (!(_DWORD)__size)
    return 1;
  *(_DWORD *)(a1 + 16) += __size;
  return fwrite(__ptr, __size, 1uLL, *(FILE **)a1) == 1;
}

uint64_t sub_236769248(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  tm *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t (**v13)();
  uint64_t (*v14)();
  uint64_t v15;
  time_t v17;

  v17 = time(0);
  if (a1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == a1)
      {
        v3 = a1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  v5 = (*((uint64_t (**)(uint64_t *, uint64_t))v4 + 1))(a1, 3752);
  v6 = v5;
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = a1;
    *(_DWORD *)(v5 + 132) = 0;
    *(_DWORD *)(v5 + 72) = 34603008;
    v7 = gmtime(&v17);
    v9 = *(_OWORD *)&v7->tm_mon;
    v8 = *(_OWORD *)&v7->tm_isdst;
    v10 = *(_OWORD *)&v7->tm_sec;
    *(_QWORD *)(v6 + 64) = v7->tm_zone;
    *(_OWORD *)(v6 + 32) = v9;
    *(_OWORD *)(v6 + 48) = v8;
    *(_OWORD *)(v6 + 16) = v10;
    if (a1)
    {
      v11 = &qword_25642E910;
      v12 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v11 = (uint64_t *)*v11;
        if (!v11)
          break;
        if (v11 == a1)
        {
          v12 = a1;
          break;
        }
      }
    }
    else
    {
      v12 = (uint64_t *)&unk_250800620;
    }
    v13 = (uint64_t (**)())v12[16];
    if (!v13)
      v13 = &off_2542ABF38;
    v14 = *v13;
    if (v14)
      v15 = ((uint64_t (*)(uint64_t *))v14)(a1);
    else
      v15 = 0;
    *(_QWORD *)(v6 + 3744) = v15;
  }
  return v6;
}

uint64_t sub_236769370(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  _DWORD *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int8x16_t v23;
  __int16 v24;
  __int16 v25;
  int16x4_t v26;
  uint64_t v27;
  int8x8_t v28;
  unsigned int v29;
  int8x8_t v30;
  unsigned int v31;
  int8x8_t v32;
  unsigned int v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V2.2D, #0.5 }
  v19 = 0;
  v18 = 0;
  v21 = bswap32(a2);
  v22 = 1936548716;
  v23 = vrev32q_s8(*(int8x16_t *)(a1 + 9));
  v26 = vrev64_s16((int16x4_t)vrev16_s8((int8x8_t)vmovn_s32(*((int32x4_t *)a1 + 1))));
  v25 = bswap32(*((unsigned __int16 *)a1 + 16) + 1) >> 16;
  v24 = bswap32(*((unsigned __int16 *)a1 + 18) + 1900) >> 16;
  v27 = 0x4C50504170736361;
  v28 = vrev32_s8(*(int8x8_t *)((char *)a1 + 92));
  v29 = bswap32(*((_DWORD *)a1 + 25));
  v30 = vrev64_s8((int8x8_t)a1[13]);
  v31 = bswap32(*((_DWORD *)a1 + 22));
  v32 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL), (float64x2_t)xmmword_25642E840)))));
  v33 = bswap32(vcvtmd_s64_f64(*(double *)&qword_25642E850 * 65536.0 + 0.5));
  v34 = 1936548716;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v35 = *(_OWORD *)((char *)a1 + 116);
  result = (*(uint64_t (**)(void))(*a1 + 312))();
  if ((_DWORD)result)
  {
    v9 = *((unsigned int *)a1 + 33);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = a1 + 17;
      do
      {
        if (*v11++)
          ++v10;
        --v9;
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = *a1;
    v20 = bswap32(v10);
    if ((*(unsigned int (**)(void))(v13 + 312))() == 1)
    {
      v14 = *((unsigned int *)a1 + 33);
      if ((_DWORD)v14)
      {
        for (i = 0; i < v14; ++i)
        {
          v16 = (_DWORD *)a1 + i;
          v17 = v16[34];
          if (v17)
          {
            v18 = __PAIR64__(bswap32(v16[334]), bswap32(v17));
            v19 = bswap32(v16[234]);
            result = (*(uint64_t (**)(void))(*a1 + 312))();
            if (!(_DWORD)result)
              return result;
            v14 = *((unsigned int *)a1 + 33);
          }
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_236769590(uint64_t result, double a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[100];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = vcvtmd_u64_f64(a2 * 100.0 + 0.5);
  if (v2)
  {
    v3 = 0;
    do
    {
      v9[v3] = v2 % 0xA;
      v4 = v3 + 1;
      if (v3 > 0x62)
        break;
      ++v3;
      v5 = v2 > 9;
      v2 /= 0xAu;
    }
    while (v5);
    v6 = 0;
    v7 = v4 - 1;
    do
    {
      v6 = (char)v9[v7] + 16 * v6;
      v8 = v7-- + 1;
    }
    while (v8 > 1);
    v2 = v6 << 16;
  }
  *(_DWORD *)(result + 72) = v2;
  return result;
}

double sub_236769658(unsigned int a1)
{
  double v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[100];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = 0.0;
  if (a1 >= 0x10000)
  {
    v2 = 0;
    v3 = HIWORD(a1);
    do
    {
      v9[v2++] = v3 & 0xF;
      v4 = v3 > 0xF;
      v3 >>= 4;
    }
    while (v4);
    v5 = 0;
    v6 = v2 - 1;
    do
    {
      v5 = (char)v9[v6] + 10 * v5;
      v7 = v6-- + 1;
    }
    while (v7 > 1);
    v1 = (double)v5;
  }
  return v1 / 100.0;
}

uint64_t sub_236769708(uint64_t result)
{
  uint64_t v1;
  const std::__fs::filesystem::path *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  const std::__fs::filesystem::path *v9;
  FILE *v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t (**v16)();
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t i;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t (**v34)();
  void (*v35)(void);
  char v36;
  std::error_code *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  __int128 *v53;
  uint64_t *v54;
  uint64_t *v55;
  void *v56;
  uint64_t (**v57)();
  void (*v58)(void);
  uint64_t *v59;
  uint64_t *v60;
  __int128 *v61;
  uint64_t (**v62)();
  void (*v63)(void);
  _OWORD __dst[235];

  if (!result)
    return result;
  v1 = result;
  if (*(_DWORD *)(result + 3736))
  {
    *(_DWORD *)(result + 3736) = 0;
    v2 = *(const std::__fs::filesystem::path **)result;
    v3 = *(uint64_t **)(result + 8);
    if (v3)
    {
      v4 = &qword_25642E910;
      v5 = &unk_250800620;
      while (1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          break;
        if (v4 == v3)
        {
          v5 = *(void **)(result + 8);
          break;
        }
      }
    }
    else
    {
      v5 = &unk_250800620;
    }
    v6 = (__int128 *)*((_QWORD *)v5 + 6);
    if (!v6)
      v6 = &xmmword_2542ABF08;
    v7 = (*((uint64_t (**)(_QWORD, uint64_t))v6 + 1))(*(_QWORD *)(result + 8), 320);
    if (v7)
    {
      v8 = v7;
      v9 = v2 + 1;
      v10 = fopen((const char *)v9, "wb");
      if (!v10)
      {
        if (v3)
        {
          v14 = &qword_25642E910;
          v15 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v14 = (uint64_t *)*v14;
            if (!v14)
              break;
            if (v14 == v3)
            {
              v15 = v3;
              break;
            }
          }
        }
        else
        {
          v15 = (uint64_t *)&unk_250800620;
        }
        v38 = (__int128 *)v15[6];
        if (!v38)
          v38 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *, uint64_t))v38 + 2))(v3, v8);
        sub_2367644B8(v3, 1, "Couldn't create '%s'", v39, v40, v41, v42, v43, (char)v9);
        goto LABEL_76;
      }
      *(_QWORD *)v8 = v10;
      *(_QWORD *)(v8 + 8) = v3;
      *(_QWORD *)(v8 + 16) = 0;
      strncpy((char *)(v8 + 24), (const char *)v9, 0xFFuLL);
      *(_BYTE *)(v8 + 279) = 0;
      *(_QWORD *)(v8 + 280) = sub_236769064;
      *(_QWORD *)(v8 + 288) = sub_2367690E4;
      *(_QWORD *)(v8 + 296) = sub_236769134;
      *(_QWORD *)(v8 + 304) = sub_2367691C0;
      *(_QWORD *)(v8 + 312) = sub_236769204;
      v11 = *(uint64_t **)(v1 + 8);
      if (v11)
      {
        v12 = &qword_25642E910;
        v13 = &unk_250800620;
        while (1)
        {
          v12 = (uint64_t *)*v12;
          if (!v12)
            break;
          if (v12 == v11)
          {
            v13 = *(void **)(v1 + 8);
            break;
          }
        }
      }
      else
      {
        v13 = &unk_250800620;
      }
      v16 = (uint64_t (**)())*((_QWORD *)v13 + 16);
      if (!v16)
        v16 = &off_2542ABF38;
      v17 = v16[2];
      if (v17)
      {
        if (!((unsigned int (*)(_QWORD, _QWORD))v17)(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 3744)))
        {
LABEL_68:
          v26 = 0;
LABEL_69:
          v36 = (*(uint64_t (**)(uint64_t))(v8 + 296))(v8);
          if (!v26 || (v36 & 1) == 0)
            remove(v9, v37);
          goto LABEL_76;
        }
        v11 = *(uint64_t **)(v1 + 8);
      }
      memcpy(__dst, (const void *)v1, 0xEA8uLL);
      v18 = sub_236768758(v11);
      *(_QWORD *)v1 = v18;
      if (v18)
      {
        v19 = v18;
        if (sub_236769370((uint64_t *)v1, 0) && sub_236769C78(v1, (uint64_t)__dst))
        {
          v20 = *(_DWORD *)(v19 + 16);
          *(_QWORD *)v1 = v8;
          v21 = *(unsigned int *)(v1 + 132);
          if ((_DWORD)v21)
          {
            for (i = 0; i != v21; ++i)
            {
              if ((int)v21 >= 1)
              {
                v23 = *(_DWORD *)(v1 + 4 * i + 536);
                if (v23)
                {
                  v24 = 0;
                  while (*(_DWORD *)(v1 + 136 + 4 * v24) != v23)
                  {
                    if (v21 == ++v24)
                      goto LABEL_42;
                  }
                  if ((v24 & 0x80000000) == 0)
                  {
                    v25 = 4 * v24;
                    *(_DWORD *)(v1 + 1336 + 4 * i) = *(_DWORD *)(v1 + 1336 + v25);
                    *(_DWORD *)(v1 + 936 + 4 * i) = *(_DWORD *)(v1 + 936 + v25);
                  }
                }
              }
LABEL_42:
              ;
            }
          }
          if (sub_236769370((uint64_t *)v1, v20) && sub_236769C78(v1, (uint64_t)__dst))
          {
            memcpy((void *)v1, __dst, 0xEA8uLL);
            if ((*(unsigned int (**)(uint64_t))(v19 + 296))(v19))
              v26 = v20;
            else
              v26 = 0;
            v27 = *(uint64_t **)(v1 + 8);
            if (v27)
            {
              v28 = &qword_25642E910;
              v29 = &unk_250800620;
              while (1)
              {
                v28 = (uint64_t *)*v28;
                if (!v28)
                  break;
                if (v28 == v27)
                {
                  v29 = *(void **)(v1 + 8);
                  break;
                }
              }
            }
            else
            {
              v29 = &unk_250800620;
            }
            v62 = (uint64_t (**)())*((_QWORD *)v29 + 16);
            if (!v62)
              v62 = &off_2542ABF38;
            v63 = (void (*)(void))v62[3];
            if (v63)
              v63();
            goto LABEL_69;
          }
        }
        (*(void (**)(uint64_t))(v19 + 296))(v19);
        memcpy((void *)v1, __dst, 0xEA8uLL);
        v30 = *(uint64_t **)(v1 + 8);
        if (v30)
        {
          v31 = &qword_25642E910;
          v32 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v31 = (uint64_t *)*v31;
            if (!v31)
              goto LABEL_64;
            if (v31 == v30)
              goto LABEL_62;
          }
        }
      }
      else
      {
        v30 = *(uint64_t **)(v1 + 8);
        if (v30)
        {
          v33 = &qword_25642E910;
          v32 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_64;
            if (v33 == v30)
            {
LABEL_62:
              v32 = v30;
              goto LABEL_64;
            }
          }
        }
      }
      v32 = (uint64_t *)&unk_250800620;
LABEL_64:
      v34 = (uint64_t (**)())v32[16];
      if (!v34)
        v34 = &off_2542ABF38;
      v35 = (void (*)(void))v34[3];
      if (v35)
        v35();
      goto LABEL_68;
    }
  }
LABEL_76:
  if (*(_DWORD *)(v1 + 132))
  {
    v44 = 0;
    do
    {
      v45 = v1 + 8 * v44;
      if (*(_QWORD *)(v45 + 2136))
      {
        v46 = *(__int128 **)(v45 + 2936);
        if (v46)
        {
          *(_QWORD *)&__dst[3] = 0;
          memset(&__dst[1], 0, 32);
          __dst[0] = 0u;
          v47 = *v46;
          v48 = *((_QWORD *)v46 + 6);
          v49 = v46[2];
          __dst[1] = v46[1];
          __dst[2] = v49;
          __dst[0] = v47;
          *((_QWORD *)&__dst[2] + 1) = *(_QWORD *)(v1 + 8);
          *(_QWORD *)&__dst[3] = v48;
          LODWORD(__dst[3]) = *(_DWORD *)(v1 + 72);
          ((void (*)(_OWORD *))v49)(__dst);
        }
        else
        {
          v50 = *(uint64_t **)(v1 + 8);
          if (v50)
          {
            v51 = &qword_25642E910;
            while (1)
            {
              v51 = (uint64_t *)*v51;
              if (!v51)
                break;
              if (v51 == v50)
              {
                v52 = *(void **)(v1 + 8);
                goto LABEL_87;
              }
            }
          }
          v52 = &unk_250800620;
LABEL_87:
          v53 = (__int128 *)*((_QWORD *)v52 + 6);
          if (!v53)
            v53 = &xmmword_2542ABF08;
          (*((void (**)(uint64_t *))v53 + 2))(v50);
        }
      }
      ++v44;
    }
    while (v44 < *(unsigned int *)(v1 + 132));
  }
  if (*(_QWORD *)v1)
    (*(void (**)(void))(*(_QWORD *)v1 + 296))();
  v54 = *(uint64_t **)(v1 + 8);
  if (v54)
  {
    v55 = &qword_25642E910;
    v56 = &unk_250800620;
    while (1)
    {
      v55 = (uint64_t *)*v55;
      if (!v55)
        break;
      if (v55 == v54)
      {
        v56 = *(void **)(v1 + 8);
        break;
      }
    }
  }
  else
  {
    v56 = &unk_250800620;
  }
  v57 = (uint64_t (**)())*((_QWORD *)v56 + 16);
  if (!v57)
    v57 = &off_2542ABF38;
  v58 = (void (*)(void))v57[1];
  if (v58)
  {
    v58();
    v54 = *(uint64_t **)(v1 + 8);
  }
  if (v54)
  {
    v59 = &qword_25642E910;
    v60 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v59 = (uint64_t *)*v59;
      if (!v59)
        break;
      if (v59 == v54)
      {
        v60 = v54;
        break;
      }
    }
  }
  else
  {
    v60 = (uint64_t *)&unk_250800620;
  }
  v61 = (__int128 *)v60[6];
  if (!v61)
    v61 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v61 + 2))();
}

uint64_t sub_236769C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t (*v23)(uint64_t, double);
  int v24;
  uint64_t (**v25)(void);
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  __int128 *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unsigned int v51;
  int v52;

  v4 = *(_QWORD *)a1;
  v5 = sub_236769658(*(_DWORD *)(a1 + 72));
  if (!*(_DWORD *)(a1 + 132))
    return 1;
  v6 = v5;
  v7 = 0;
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  while (1)
  {
    v8 = a1 + 4 * v7;
    v11 = *(_DWORD *)(v8 + 136);
    v10 = (_DWORD *)(v8 + 136);
    v9 = v11;
    if (!v11 || *(_DWORD *)(a1 + 4 * v7 + 536))
      goto LABEL_41;
    v12 = *(_DWORD *)(v4 + 16);
    v13 = a1 + 4 * v7;
    *(_DWORD *)(v13 + 1336) = v12;
    v14 = *(_QWORD *)(a1 + 8 * v7 + 2136);
    if (!v14)
    {
      if (a2 && v12)
      {
        v15 = *(unsigned int *)(a2 + 4 * v7 + 936);
        result = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 288))();
        if (!(_DWORD)result)
          return result;
        v17 = *(uint64_t **)(a1 + 8);
        if (v17)
        {
          v18 = &qword_25642E910;
          while (1)
          {
            v18 = (uint64_t *)*v18;
            if (!v18)
              break;
            if (v18 == v17)
            {
              v19 = *(void **)(a1 + 8);
              goto LABEL_22;
            }
          }
          v19 = &unk_250800620;
        }
        else
        {
          v19 = &unk_250800620;
        }
LABEL_22:
        v25 = (uint64_t (**)(void))*((_QWORD *)v19 + 6);
        if (!v25)
          v25 = (uint64_t (**)(void))&xmmword_2542ABF08;
        result = (*v25)();
        if (!result)
          return result;
        v26 = result;
        if ((*(unsigned int (**)(void))(*(_QWORD *)a2 + 280))() != 1)
          return 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 312))(v4, v15, v26);
        if (!(_DWORD)result)
          return result;
        v27 = *(uint64_t **)(a1 + 8);
        if (v27)
        {
          v28 = &qword_25642E910;
          while (1)
          {
            v28 = (uint64_t *)*v28;
            if (!v28)
              break;
            if (v28 == v27)
            {
              v29 = *(void **)(a1 + 8);
              goto LABEL_33;
            }
          }
        }
        v29 = &unk_250800620;
LABEL_33:
        v30 = (__int128 *)*((_QWORD *)v29 + 6);
        if (!v30)
          v30 = &xmmword_2542ABF08;
        (*((void (**)(void))v30 + 2))();
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (*(_DWORD *)(v13 + 1736))
    {
      if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v4 + 312))(v4, *(unsigned int *)(a1 + 4 * v7 + 936), v14) != 1)return 0;
      goto LABEL_40;
    }
    v20 = *(uint64_t **)(a1 + 8);
    v21 = sub_236783C34(v20, v9);
    if (v21)
      break;
LABEL_41:
    if (++v7 >= (unint64_t)*(unsigned int *)(a1 + 132))
      return 1;
  }
  v22 = v21;
  v23 = (uint64_t (*)(uint64_t, double))*((_QWORD *)v21 + 11);
  if (v23)
  {
    v24 = v23(v14, v6);
    v20 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    v24 = *((_DWORD *)v21 + 2);
  }
  v31 = (unsigned int *)sub_236777368(v20, v24);
  if (!v31)
  {
    sub_2367644B8(v20, 3, "(Internal) no handler for tag %x", v32, v33, v34, v35, v36, *v10);
    goto LABEL_41;
  }
  v37 = v31;
  v38 = bswap32(*v31);
  v51 = v38;
  v52 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(v4 + 312))(v4, 8, &v51);
  if (!(_DWORD)result)
    return result;
  v39 = *(_OWORD *)v37;
  v40 = *((_QWORD *)v37 + 6);
  v41 = *((_OWORD *)v37 + 2);
  v48 = *((_OWORD *)v37 + 1);
  v49 = v41;
  v47 = v39;
  *((_QWORD *)&v49 + 1) = *(_QWORD *)(a1 + 8);
  v50 = v40;
  LODWORD(v50) = *(_DWORD *)(a1 + 72);
  if (((unsigned int (*)(__int128 *, uint64_t, uint64_t, _QWORD))v48)(&v47, v4, v14, *(unsigned int *)v22))
  {
LABEL_40:
    *(_DWORD *)(a1 + 4 * v7 + 936) = *(_DWORD *)(v4 + 16) - v12;
    result = sub_236776980(v4);
    if (!(_DWORD)result)
      return result;
    goto LABEL_41;
  }
  v51 = v38;
  LOBYTE(v52) = 0;
  sub_2367644B8(*(uint64_t **)(a1 + 8), 7, "Couldn't write type '%s'", v42, v43, v44, v45, v46, (char)&v51);
  return 0;
}

uint64_t sub_236769F9C(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  unsigned int v44;
  _OWORD v45[4];
  __int128 v46;
  _OWORD v47[3];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v6 = sub_236769248(a1);
  if (v6)
  {
    v7 = sub_2367689F4(a1, a2, a3, "r");
    *(_QWORD *)v6 = v7;
    if (v7)
    {
      v8 = v7;
      v46 = 0u;
      memset(v47, 0, sizeof(v47));
      memset(v45, 0, sizeof(v45));
      if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v7 + 280))(v7, v45, 128, 1) == 1)
      {
        if (DWORD1(v45[2]) == 1886610273)
        {
          v14.i64[0] = *(_QWORD *)((char *)v45 + 12);
          v14.i64[1] = __PAIR64__(v46, DWORD1(v45[1]));
          *(int8x16_t *)(v6 + 76) = vrev32q_s8(v14);
          *(int8x8_t *)(v6 + 92) = vrev32_s8(*(int8x8_t *)((char *)&v45[2] + 12));
          *(_DWORD *)(v6 + 100) = bswap32(DWORD1(v45[3]));
          *(_DWORD *)(v6 + 112) = bswap32(v47[0]);
          *(int8x8_t *)(v6 + 104) = vrev64_s8(*(int8x8_t *)((char *)&v45[3] + 8));
          v15 = v45[0];
          v16 = (DWORD2(v45[0]) >> 8) & 0xF0;
          if ((WORD4(v45[0]) & 0xF000u) > 0x9000)
            v16 = 144;
          v17 = (DWORD2(v45[0]) >> 8) & 0xF;
          if ((WORD4(v45[0]) & 0xE00u) > 0x900)
            v17 = 9;
          v18 = v16 | v17;
          if ((BYTE8(v45[0]) & 0xFEu) <= 9)
            v19 = BYTE8(v45[0]);
          else
            v19 = 9;
          *(_DWORD *)(v6 + 72) = bswap32(v19 | (v18 << 8));
          v20 = bswap32(v15);
          if (v20 >= *(_DWORD *)(*(_QWORD *)v6 + 20))
            v21 = *(_DWORD *)(*(_QWORD *)v6 + 20);
          else
            v21 = v20;
          v22 = (int8x16_t)vrev64q_s32((int32x4_t)vmovl_u16((uint16x4_t)vrev16_s8(*(int8x8_t *)((char *)&v45[1] + 12))));
          *(int8x16_t *)(v6 + 16) = vextq_s8(v22, v22, 8uLL);
          v23 = bswap32(WORD4(v45[1]));
          *(_DWORD *)(v6 + 32) = (bswap32(WORD5(v45[1])) >> 16) - 1;
          *(_DWORD *)(v6 + 36) = HIWORD(v23) - 1900;
          *(_QWORD *)(v6 + 40) = -1;
          *(_DWORD *)(v6 + 48) = 0;
          *(_OWORD *)(v6 + 116) = *(_OWORD *)((char *)v47 + 4);
          v44 = 0;
          if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(v8 + 280))(v8, &v44, 4, 1) == 1)
          {
            v29 = v44;
            v30 = bswap32(v44);
            if (v30 < 0x65)
            {
              *(_DWORD *)(v6 + 132) = 0;
              if (!v29)
                return v6;
              v32 = 0;
              while (1)
              {
                v44 = 0;
                if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(v8 + 280))(v8, &v44, 4, 1) != 1)break;
                v33 = v44;
                v44 = 0;
                if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(v8 + 280))(v8, &v44, 4, 1) != 1)break;
                v34 = v44;
                v44 = 0;
                if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(v8 + 280))(v8, &v44, 4, 1) != 1)break;
                v35 = bswap32(v34);
                v36 = bswap32(v44);
                v37 = __CFADD__(v36, v35);
                if (v36 + v35 <= v21 && !v37)
                {
                  v38 = *(unsigned int *)(v6 + 132);
                  v39 = (_DWORD *)(v6 + 4 * v38);
                  v39[34] = bswap32(v33);
                  v39[334] = v35;
                  v39[234] = v36;
                  if ((_DWORD)v38)
                  {
                    v40 = v39 + 134;
                    v41 = v38;
                    v42 = (_DWORD *)v6;
                    do
                    {
                      if (v42[334] == v35 && v42[234] == v36)
                        *v40 = v42[34];
                      ++v42;
                      --v41;
                    }
                    while (v41);
                  }
                  *(_DWORD *)(v6 + 132) = v38 + 1;
                }
                if (++v32 == v30)
                  return v6;
              }
            }
            else
            {
              sub_2367644B8(*(uint64_t **)(v6 + 8), 2, "Too many tags (%d)", v24, v25, v26, v27, v28, v30);
            }
          }
        }
        else
        {
          sub_2367644B8(*(uint64_t **)(v6 + 8), 11, "not an ICC profile, invalid signature", v9, v10, v11, v12, v13, v43);
        }
      }
    }
    sub_236769708(v6);
    return 0;
  }
  return v6;
}

uint64_t sub_23676A304(uint64_t *a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (**v8)();
  unsigned int (*v9)(void);
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  const char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t (**v45)();
  uint64_t (*v46)();
  char *v48;
  const char *v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t (**v54)();
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  void *v59;
  uint64_t (**v60)();
  unsigned int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v4 = (uint64_t *)a1[1];
  if (v4)
  {
    v5 = &qword_25642E910;
    v6 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v5 = (uint64_t *)*v5;
      if (!v5)
        break;
      if (v5 == v4)
      {
        v6 = v4;
        break;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)&unk_250800620;
  }
  v7 = *a1;
  v8 = (uint64_t (**)())v6[16];
  if (!v8)
    v8 = &off_2542ABF38;
  v9 = (unsigned int (*)(void))v8[2];
  if (v9 && !v9())
    return 0;
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v61 = 0;
  v10 = *((unsigned int *)a1 + 33);
  if ((int)v10 < 1)
    goto LABEL_52;
  v11 = a2;
  do
  {
    v12 = 0;
    while (*((_DWORD *)a1 + v12 + 34) != v11)
    {
      if (v10 == ++v12)
        goto LABEL_52;
    }
    if ((v12 & 0x80000000) != 0)
      goto LABEL_52;
    v11 = *((_DWORD *)a1 + v12 + 134);
  }
  while (v11);
  v13 = v12;
  v14 = &a1[v12];
  v15 = v14 + 267;
  v16 = v14[267];
  if (v16)
  {
    v17 = (int *)v14[367];
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        v19 = (uint64_t *)a1[1];
        v20 = sub_236783C34(v19, a2);
        if (!v20)
          goto LABEL_53;
        LODWORD(v21) = *((_DWORD *)v20 + 1);
        v21 = v21 >= 0x14 ? 20 : v21;
        if ((_DWORD)v21)
        {
          v22 = (int *)(v20 + 8);
          while (1)
          {
            v23 = *v22++;
            if (v23 == v18)
              break;
            if (!--v21)
              goto LABEL_52;
          }
          if (!*((_DWORD *)a1 + v13 + 434))
          {
            if (v19)
            {
              v38 = &qword_25642E910;
              v39 = (uint64_t *)&unk_250800620;
              while (1)
              {
                v38 = (uint64_t *)*v38;
                if (!v38)
                  break;
                if (v38 == v19)
                {
                  v39 = v19;
                  break;
                }
              }
            }
            else
            {
              v39 = (uint64_t *)&unk_250800620;
            }
            v54 = (uint64_t (**)())v39[16];
            if (!v54)
              v54 = &off_2542ABF38;
            v55 = v54[3];
            if (v55)
            {
              v56 = a1[468];
              v57 = v19;
LABEL_74:
              ((void (*)(uint64_t *, uint64_t))v55)(v57, v56);
              return *v15;
            }
            return v16;
          }
        }
      }
    }
    goto LABEL_52;
  }
  v24 = (uint64_t)a1 + 4 * v12;
  v25 = *(_DWORD *)(v24 + 936);
  v26 = v25 - 8;
  if (v25 < 8 || !(*(unsigned int (**)(uint64_t, _QWORD))(v7 + 288))(v7, *(unsigned int *)(v24 + 1336)))
    goto LABEL_52;
  v27 = (uint64_t *)a1[1];
  v28 = sub_236783C34(v27, a2);
  if (!v28)
  {
    LODWORD(v66) = bswap32(a2);
    BYTE4(v66) = 0;
    v40 = "Unknown tag type '%s' found.";
    v41 = v27;
    v42 = 8;
LABEL_51:
    sub_2367644B8(v41, v42, v40, v29, v30, v31, v32, v33, (char)&v66);
    goto LABEL_52;
  }
  if ((v34 = v28,
        v66 = 0,
        (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v7 + 280))(v7, &v66, 8, 1) != 1)
    || !(_DWORD)v66
    || (*((_DWORD *)v34 + 1) >= 0x14u ? (v35 = 20) : (v35 = *((_DWORD *)v34 + 1)), !v35))
  {
LABEL_52:
    v19 = (uint64_t *)a1[1];
LABEL_53:
    if (v19)
    {
      v43 = &qword_25642E910;
      v44 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v43 = (uint64_t *)*v43;
        if (!v43)
          break;
        if (v43 == v19)
        {
          v44 = v19;
          break;
        }
      }
    }
    else
    {
      v44 = (uint64_t *)&unk_250800620;
    }
    v45 = (uint64_t (**)())v44[16];
    if (!v45)
      v45 = &off_2542ABF38;
    v46 = v45[3];
    if (v46)
      ((void (*)(uint64_t *, uint64_t))v46)(v19, a1[468]);
    return 0;
  }
  v36 = 0;
  v37 = bswap32(v66);
  while (*(_DWORD *)&v34[v36 + 8] != v37)
  {
    v36 += 4;
    if (4 * v35 == v36)
      goto LABEL_52;
  }
  v48 = v34;
  v19 = (uint64_t *)a1[1];
  v49 = sub_236777368(v19, v37);
  if (!v49)
    goto LABEL_53;
  v50 = *(_OWORD *)v49;
  v51 = *((_QWORD *)v49 + 6);
  v52 = *((_OWORD *)v49 + 2);
  v63 = *((_OWORD *)v49 + 1);
  *(_QWORD *)&v64 = v52;
  v62 = v50;
  a1[v13 + 367] = (uint64_t)v49;
  *((_QWORD *)&v64 + 1) = v19;
  v65 = v51;
  LODWORD(v65) = *((_DWORD *)a1 + 18);
  v53 = (*((uint64_t (**)(__int128 *, uint64_t, unsigned int *, uint64_t))&v62 + 1))(&v62, v7, &v61, v26);
  *v15 = v53;
  if (!v53)
  {
    LODWORD(v66) = bswap32(a2);
    BYTE4(v66) = 0;
    v41 = (uint64_t *)a1[1];
    v40 = "Corrupted tag '%s'";
    goto LABEL_76;
  }
  if (v61 < *(_DWORD *)v48)
  {
    LODWORD(v66) = bswap32(a2);
    BYTE4(v66) = 0;
    v41 = (uint64_t *)a1[1];
    v40 = "'%s' Inconsistent number of items: expected %d, got %d";
LABEL_76:
    v42 = 12;
    goto LABEL_51;
  }
  v16 = v53;
  v57 = (uint64_t *)a1[1];
  if (v57)
  {
    v58 = &qword_25642E910;
    v59 = &unk_250800620;
    while (1)
    {
      v58 = (uint64_t *)*v58;
      if (!v58)
        break;
      if (v58 == v57)
      {
        v59 = (void *)a1[1];
        break;
      }
    }
  }
  else
  {
    v59 = &unk_250800620;
  }
  v60 = (uint64_t (**)())*((_QWORD *)v59 + 16);
  if (!v60)
    v60 = &off_2542ABF38;
  v55 = v60[3];
  if (v55)
  {
    v56 = a1[468];
    goto LABEL_74;
  }
  return v16;
}

uint64_t sub_23676A71C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a1 + 132);
  if ((int)v2 >= 1)
  {
    while (1)
    {
      v3 = 0;
      while (*(_DWORD *)(a1 + 136 + 4 * v3) != a2)
      {
        if (v2 == ++v3)
          return 0;
      }
      if ((v3 & 0x80000000) != 0)
        break;
      a2 = *(_DWORD *)(a1 + 4 * v3 + 536);
      if (!a2)
        return **(unsigned int **)(a1 + 8 * v3 + 2936);
    }
  }
  return 0;
}

uint64_t sub_23676A778(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t (**v14)();
  uint64_t (*v15)(void);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double v29;
  uint64_t (*v30)(uint64_t, double);
  unsigned int v31;
  const char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  void *v43;
  uint64_t (**v44)();
  void (*v45)(void);
  uint64_t *v46;
  const char *v47;
  uint64_t v48;
  _DWORD *v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t (**v60)();
  void (*v61)(void);
  unsigned int *v62;
  unsigned int v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v11 = *(uint64_t **)(a1 + 8);
  if (v11)
  {
    v12 = &qword_25642E910;
    v13 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == v11)
      {
        v13 = v11;
        break;
      }
    }
  }
  else
  {
    v13 = (uint64_t *)&unk_250800620;
  }
  v14 = (uint64_t (**)())v13[16];
  if (!v14)
    v14 = &off_2542ABF38;
  v15 = v14[2];
  if (!v15 || (result = v15(), (_DWORD)result))
  {
    v68 = 0;
    v66 = 0u;
    v67 = 0u;
    v65 = 0u;
    v17 = *(unsigned int *)(a1 + 132);
    if (!a3)
    {
      if ((int)v17 >= 1)
      {
        v19 = 0;
        while (*(_DWORD *)(a1 + 4 * v19 + 136) != a2)
        {
          if (v17 == ++v19)
            goto LABEL_47;
        }
        if ((v19 & 0x80000000) == 0)
        {
          sub_23676AB6C(a1, v19);
          *(_DWORD *)(a1 + 4 * v19 + 136) = 0;
          v34 = *(uint64_t **)(a1 + 8);
          if (v34)
          {
            v35 = &qword_25642E910;
            v36 = (uint64_t *)&unk_250800620;
            while (1)
            {
              v35 = (uint64_t *)*v35;
              if (!v35)
                goto LABEL_67;
              if (v35 == v34)
              {
LABEL_65:
                v36 = v34;
                goto LABEL_67;
              }
            }
          }
          goto LABEL_66;
        }
      }
      goto LABEL_47;
    }
    if ((int)v17 < 1)
      goto LABEL_24;
    v18 = 0;
    while (*(_DWORD *)(a1 + 4 * v18 + 136) != a2)
    {
      if (v17 == ++v18)
        goto LABEL_24;
    }
    if ((v18 & 0x80000000) != 0)
    {
LABEL_24:
      if (v17 > 0x63)
      {
        sub_2367644B8(*(uint64_t **)(a1 + 8), 2, "Too many tags (%d)", a4, a5, a6, a7, a8, 100);
        goto LABEL_47;
      }
      *(_DWORD *)(a1 + 132) = v17 + 1;
      LODWORD(v18) = v17;
    }
    else
    {
      sub_23676AB6C(a1, v18);
    }
    v20 = a1 + 4 * (int)v18;
    *(_DWORD *)(v20 + 1736) = 0;
    *(_DWORD *)(v20 + 536) = 0;
    v21 = *(uint64_t **)(a1 + 8);
    v22 = sub_236783C34(v21, a2);
    if (v22)
    {
      v28 = v22;
      v29 = sub_236769658(*(_DWORD *)(a1 + 72));
      v30 = (uint64_t (*)(uint64_t, double))*((_QWORD *)v28 + 11);
      if (v30)
        v31 = v30(a3, v29);
      else
        v31 = *((_DWORD *)v28 + 2);
      if (*((_DWORD *)v28 + 1) >= 0x14u)
        v37 = 20;
      else
        v37 = *((_DWORD *)v28 + 1);
      if (v37)
      {
        v38 = 0;
        v39 = (int)v18;
        v40 = 4 * v37;
        while (*(_DWORD *)&v28[v38 + 8] != v31)
        {
          v38 += 4;
          if (v40 == v38)
            goto LABEL_45;
        }
        v46 = *(uint64_t **)(a1 + 8);
        v47 = sub_236777368(v46, v31);
        if (v47)
        {
          v48 = a1 + 8 * v39;
          *(_QWORD *)(v48 + 2936) = v47;
          v49 = (_DWORD *)(a1 + 4 * v39);
          v49[34] = a2;
          v49[234] = 0;
          v49[334] = 0;
          v50 = *(_OWORD *)v47;
          v51 = *((_QWORD *)v47 + 6);
          v52 = *((_OWORD *)v47 + 2);
          v66 = *((_OWORD *)v47 + 1);
          v67 = v52;
          v65 = v50;
          *((_QWORD *)&v67 + 1) = *(_QWORD *)(a1 + 8);
          v68 = v51;
          LODWORD(v68) = *(_DWORD *)(a1 + 72);
          v53 = (*((uint64_t (**)(__int128 *, uint64_t, _QWORD))&v66 + 1))(&v65, a3, *(unsigned int *)v28);
          *(_QWORD *)(v48 + 2136) = v53;
          if (v53)
          {
            v34 = *(uint64_t **)(a1 + 8);
            if (v34)
            {
              v59 = &qword_25642E910;
              v36 = (uint64_t *)&unk_250800620;
              while (1)
              {
                v59 = (uint64_t *)*v59;
                if (!v59)
                  goto LABEL_67;
                if (v59 == v34)
                  goto LABEL_65;
              }
            }
LABEL_66:
            v36 = (uint64_t *)&unk_250800620;
LABEL_67:
            v60 = (uint64_t (**)())v36[16];
            if (!v60)
              v60 = &off_2542ABF38;
            v61 = (void (*)(void))v60[3];
            if (v61)
              v61();
            return 1;
          }
          v63 = bswap32(v31);
          v64 = 0;
          sub_2367644B8(*(uint64_t **)(a1 + 8), 12, "Malformed struct in type '%s' for tag '%s'", v54, v55, v56, v57, v58, (char)&v63);
          goto LABEL_47;
        }
        v63 = bswap32(v31);
        v64 = 0;
        v62 = &v63;
        v32 = "Unsupported type '%s' for tag '%s'";
        v33 = v46;
      }
      else
      {
LABEL_45:
        v63 = bswap32(v31);
        v64 = 0;
        v33 = *(uint64_t **)(a1 + 8);
        v62 = &v63;
        v32 = "Unsupported type '%s' for tag '%s'";
      }
    }
    else
    {
      LOBYTE(v62) = a2;
      v32 = "Unsupported tag '%x'";
      v33 = v21;
    }
    sub_2367644B8(v33, 8, v32, v23, v24, v25, v26, v27, (char)v62);
LABEL_47:
    v41 = *(uint64_t **)(a1 + 8);
    if (v41)
    {
      v42 = &qword_25642E910;
      v43 = &unk_250800620;
      while (1)
      {
        v42 = (uint64_t *)*v42;
        if (!v42)
          break;
        if (v42 == v41)
        {
          v43 = *(void **)(a1 + 8);
          break;
        }
      }
    }
    else
    {
      v43 = &unk_250800620;
    }
    v44 = (uint64_t (**)())*((_QWORD *)v43 + 16);
    if (!v44)
      v44 = &off_2542ABF38;
    v45 = (void (*)(void))v44[3];
    if (v45)
      v45();
    return 0;
  }
  return result;
}

uint64_t sub_23676AB6C(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v2 = result + 8 * a2;
  if (*(_QWORD *)(v2 + 2136))
  {
    if (*(_DWORD *)(result + 4 * a2 + 1736))
    {
      v3 = *(uint64_t **)(result + 8);
      if (v3)
      {
        v4 = &qword_25642E910;
        v5 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v4 = (uint64_t *)*v4;
          if (!v4)
            break;
          if (v4 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      else
      {
        v5 = (uint64_t *)&unk_250800620;
      }
      v11 = (__int128 *)v5[6];
      if (!v11)
        v11 = &xmmword_2542ABF08;
      return (*((uint64_t (**)(void))v11 + 2))();
    }
    else
    {
      v6 = *(__int128 **)(result + 8 * a2 + 2936);
      if (v6)
      {
        v7 = (_QWORD *)(v2 + 2136);
        v8 = *v6;
        v9 = *((_QWORD *)v6 + 6);
        v10 = v6[2];
        v12[1] = v6[1];
        v13 = v10;
        v12[0] = v8;
        *((_QWORD *)&v13 + 1) = *(_QWORD *)(result + 8);
        v14 = v9;
        LODWORD(v14) = *(_DWORD *)(result + 72);
        result = ((uint64_t (*)(_OWORD *))v10)(v12);
        *v7 = 0;
      }
    }
  }
  return result;
}

uint64_t sub_23676AC50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = sub_23676A304((uint64_t *)a2, 0x63686164u);
  if (result)
  {
    *(_OWORD *)a1 = *(_OWORD *)result;
    v5 = *(_OWORD *)(result + 16);
    v6 = *(_OWORD *)(result + 32);
    v7 = *(_OWORD *)(result + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(result + 64);
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
    if (!(*(_DWORD *)(a2 + 72) >> 26) && *(_DWORD *)(a2 + 76) == 1835955314)
    {
      result = sub_23676A304((uint64_t *)a2, 0x77747074u);
      if (result)
      {
        return sub_23678434C(a1, (double *)result, (double *)&xmmword_25642E840);
      }
      else
      {
        *(_QWORD *)a1 = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
      }
    }
  }
  return result;
}

uint64_t *sub_23676AD4C(uint64_t a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  int32x2_t *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int32x2_t *v27;
  int32x2_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t ***v31;
  uint64_t ***v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ***v37;
  int32x2_t *v38;
  int32x2_t *v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t i;
  uint64_t ***v44;
  uint64_t ***v45;
  int32x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  int32x2_t *v49;
  uint64_t v50;
  uint64_t v51;
  int32x2_t *v52;
  uint64_t v53;
  int32x2_t *v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t ***v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (a1)
    v3 = *(uint64_t **)(a1 + 8);
  else
    v3 = 0;
  if (*(_DWORD *)(a1 + 76) != 1852662636)
  {
    if (a2 > 3)
      goto LABEL_47;
    v11 = *(unsigned int *)(a1 + 132);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = a2;
      v14 = dword_2368B3390[a2];
      while (*(_DWORD *)(a1 + 4 * v12 + 136) != v14)
      {
        if (v11 == ++v12)
          goto LABEL_26;
      }
      if ((v12 & 0x80000000) != 0)
      {
LABEL_26:
        v21 = 0;
        v22 = dword_2368B3380[v13];
        while (*(_DWORD *)(a1 + 136 + 4 * v21) != v22)
        {
          if (v11 == ++v21)
            goto LABEL_31;
        }
        if ((v21 & 0x80000000) == 0)
          goto LABEL_32;
        goto LABEL_31;
      }
      v15 = *(uint64_t **)(a1 + 8);
      v16 = sub_23676A304((uint64_t *)a1, v14);
      v6 = (uint64_t *)sub_23676DA44(v16);
      if (!v6)
        return v6;
      v17 = *(_DWORD *)(a1 + 80);
      v18 = *(_DWORD *)(a1 + 84);
      if (v17 == 1482250784)
      {
        v19 = sub_23676C120(v15, 3, 3u, qword_2368B35A0, 0);
        if (!v19)
          goto LABEL_84;
        v20 = 2016568352;
      }
      else
      {
        if (v17 != 1281450528)
        {
LABEL_90:
          if (v18 == 1482250784)
          {
            v8 = sub_23676C120(v15, 3, 3u, qword_2368B34F8, 0);
            if (!v8)
              goto LABEL_84;
            v8[1].i32[1] = 1681029152;
            v57 = *v6;
            if (*v6)
            {
              do
              {
                v10 = v57;
                v57 = *(_QWORD *)(v57 + 56);
              }
              while (v57);
              goto LABEL_12;
            }
            goto LABEL_100;
          }
          if (v18 != 1281450528)
            return v6;
          v8 = sub_23676C120(v15, 3, 3u, qword_2368B3498, qword_2368B34E0);
          if (!v8)
            goto LABEL_84;
          v8[1].i32[1] = 1681026080;
          v56 = *v6;
          if (!*v6)
            goto LABEL_100;
          do
          {
            v10 = v56;
            v56 = *(_QWORD *)(v56 + 56);
          }
          while (v56);
          goto LABEL_12;
        }
        v19 = sub_23676C120(v15, 3, 3u, qword_2368B3540, qword_2368B3588);
        if (!v19)
          goto LABEL_84;
        v20 = 1815241760;
      }
      v19[1].i32[1] = v20;
      v19[7] = (int32x2_t)*v6;
      *v6 = (uint64_t)v19;
      if (!sub_23676D8DC(v6))
        goto LABEL_84;
      goto LABEL_90;
    }
LABEL_31:
    v22 = 1093812784;
LABEL_32:
    if ((int)v11 < 1)
      goto LABEL_47;
    v23 = 0;
    while (*(_DWORD *)(a1 + 4 * v23 + 136) != v22)
    {
      if (v11 == ++v23)
        goto LABEL_47;
    }
    if ((v23 & 0x80000000) != 0)
    {
LABEL_47:
      if (*(_DWORD *)(a1 + 80) == 1196573017)
      {
        v30 = *(uint64_t **)(a1 + 8);
        v31 = (uint64_t ***)sub_23676A304((uint64_t *)a1, 0x6B545243u);
        v59[0] = v31;
        if (v31)
        {
          v32 = v31;
          v6 = (uint64_t *)sub_23676D59C(v30, 1u, 3);
          if (v6)
          {
            if (*(_DWORD *)(a1 + 84) == 1281450528)
            {
              v58 = -2139062144;
              v36 = sub_236764590(v30, 2, 0, 0, (uint64_t)&v58, v33, v34, v35);
              if (v36)
              {
                v37 = (uint64_t ***)v36;
                *(_QWORD *)&v60 = v32;
                *((_QWORD *)&v60 + 1) = v36;
                *(_QWORD *)&v61 = v36;
                v38 = sub_23676C120(v30, 3, 1u, (uint64_t *)&xmmword_236925E20, 0);
                if (sub_23676DB6C(v6, 1, (uint64_t)v38))
                {
                  v39 = sub_23676BAB0(v30, 3, (uint64_t)&v60);
                  if (sub_23676DB6C(v6, 1, (uint64_t)v39))
                  {
                    sub_236765578(v37);
                    return v6;
                  }
                }
                sub_236765578(v37);
              }
            }
            else
            {
              v49 = sub_23676BAB0(v30, 1, (uint64_t)v59);
              if (v49)
              {
                v50 = *v6;
                if (*v6)
                {
                  do
                  {
                    v51 = v50;
                    v50 = *(_QWORD *)(v50 + 56);
                  }
                  while (v50);
                  *(_QWORD *)(v51 + 56) = v49;
                  v49[7] = 0;
                }
                else
                {
                  *v6 = (uint64_t)v49;
                }
                if (sub_23676D8DC(v6))
                {
                  v54 = sub_23676C120(v30, 3, 1u, qword_2368B33C0, 0);
                  if (sub_23676DB6C(v6, 1, (uint64_t)v54))
                    return v6;
                }
              }
            }
          }
          sub_236765578(v59[0]);
          goto LABEL_84;
        }
        return 0;
      }
      v64 = 0;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v40 = *(uint64_t **)(a1 + 8);
      if (!sub_23676B488(&v60, (uint64_t *)a1))
        return 0;
      v41 = 0;
      v42 = &v60;
      do
      {
        for (i = 0; i != 24; i += 8)
          *(double *)((char *)v42 + i) = *(double *)((char *)v42 + i) * 0.50000763;
        ++v41;
        v42 = (__int128 *)((char *)v42 + 24);
      }
      while (v41 != 3);
      v59[0] = (uint64_t ***)sub_23676A304((uint64_t *)a1, 0x72545243u);
      v44 = (uint64_t ***)sub_23676A304((uint64_t *)a1, 0x67545243u);
      v59[1] = v44;
      v45 = (uint64_t ***)sub_23676A304((uint64_t *)a1, 0x62545243u);
      v6 = 0;
      v59[2] = v45;
      if (!v59[0])
        return v6;
      if (!v44)
        return v6;
      if (!v45)
        return v6;
      v6 = (uint64_t *)sub_23676D59C(v40, 3u, 3);
      if (!v6)
        return v6;
      v46 = sub_23676BAB0(v40, 3, (uint64_t)v59);
      if (!v46)
        goto LABEL_84;
      v47 = *v6;
      if (*v6)
      {
        do
        {
          v48 = v47;
          v47 = *(_QWORD *)(v47 + 56);
        }
        while (v47);
        *(_QWORD *)(v48 + 56) = v46;
        v46[7] = 0;
      }
      else
      {
        *v6 = (uint64_t)v46;
      }
      if (!sub_23676D8DC(v6))
        goto LABEL_84;
      v52 = sub_23676C120(v40, 3, 3u, (uint64_t *)&v60, 0);
      if (!sub_23676DB6C(v6, 1, (uint64_t)v52))
        goto LABEL_84;
      if (*(_DWORD *)(a1 + 84) != 1281450528)
        return v6;
      sub_23676D2F8(v40);
      v29 = v53;
    }
    else
    {
      v24 = sub_23676A304((uint64_t *)a1, v22);
      if (!v24)
        return 0;
      v25 = v24;
      v26 = sub_23676A71C(a1, v22);
      v6 = (uint64_t *)sub_23676DA44(v25);
      if (v26 != 1835430962 || *(_DWORD *)(a1 + 84) != 1281450528)
        return v6;
      if (*(_DWORD *)(a1 + 80) == 1281450528)
      {
        v27 = sub_23676C120(v3, 3, 3u, qword_2368B3450, 0);
        if (!v27)
          goto LABEL_84;
        v27[1].i32[1] = 874525216;
        if (!v6)
          goto LABEL_84;
        v27[7] = (int32x2_t)*v6;
        *v6 = (uint64_t)v27;
        if (!sub_23676D8DC(v6))
          goto LABEL_84;
      }
      v28 = sub_23676C120(v3, 3, 3u, qword_2368B3408, 0);
      v29 = (uint64_t)v28;
      if (v28)
        v28[1].i32[1] = 840971296;
    }
    if (!sub_23676DB6C(v6, 1, v29))
      goto LABEL_84;
    return v6;
  }
  v4 = sub_23676A304((uint64_t *)a1, 0x6E636C32u);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (uint64_t *)sub_23676D59C(v3, 0, 0);
  if (v6)
  {
    sub_23676ECCC(v5, 1);
    if (v7)
    {
      *(_QWORD *)(v7 + 56) = *v6;
      *v6 = v7;
      if (sub_23676D8DC(v6))
      {
        v8 = sub_23676C120(v3, 3, 3u, qword_2368B3408, 0);
        if (v8)
        {
          v8[1].i32[1] = 840971296;
          v9 = *v6;
          if (!*v6)
          {
LABEL_100:
            *v6 = (uint64_t)v8;
LABEL_101:
            if (sub_23676D8DC(v6))
              return v6;
            goto LABEL_84;
          }
          do
          {
            v10 = v9;
            v9 = *(_QWORD *)(v9 + 56);
          }
          while (v9);
LABEL_12:
          *(_QWORD *)(v10 + 56) = v8;
          v8[7] = 0;
          goto LABEL_101;
        }
      }
    }
LABEL_84:
    sub_23676D934(v6);
    return 0;
  }
  sub_23676E97C(v5);
  return v6;
}

uint64_t sub_23676B488(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)sub_23676A304(a2, 0x7258595Au);
  v5 = (uint64_t *)sub_23676A304(a2, 0x6758595Au);
  v6 = (uint64_t *)sub_23676A304(a2, 0x6258595Au);
  v7 = 0;
  if (v4 && v5 && v6)
  {
    v8 = *v5;
    v9 = *v6;
    *a1 = *v4;
    a1[1] = v8;
    a1[2] = v9;
    v10 = v5[1];
    v11 = v6[1];
    a1[3] = v4[1];
    a1[4] = v10;
    a1[5] = v11;
    v12 = v5[2];
    v13 = v6[2];
    a1[6] = v4[2];
    a1[7] = v12;
    a1[8] = v13;
    return 1;
  }
  return v7;
}

_QWORD *sub_23676B53C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    do
    {
      if (*(_DWORD *)(v1 + 8) == 1668052340)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8);
        *(_DWORD *)(v3 + 8) |= 0x100u;
        result = (_QWORD *)sub_2367663E4((uint64_t *)v2[7], v3);
      }
      v1 = *(_QWORD *)(v1 + 56);
    }
    while (v1);
  }
  return result;
}

uint64_t sub_23676B5A0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 80);
  if (v1 == 1380401696)
  {
    v4 = *(unsigned int *)(a1 + 132);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      while (*(_DWORD *)(a1 + 136 + 4 * v5) != 1918392666)
      {
        if (v4 == ++v5)
          return 0;
      }
      if ((v5 & 0x80000000) == 0)
      {
        v8 = 0;
        while (*(_DWORD *)(a1 + 136 + 4 * v8) != 1733843290)
        {
          v7 = 0;
          if (v4 == ++v8)
            return v7;
        }
        if ((v8 & 0x80000000) == 0)
        {
          v9 = 0;
          while (*(_DWORD *)(a1 + 136 + 4 * v9) != 1649957210)
          {
            v7 = 0;
            if (v4 == ++v9)
              return v7;
          }
          if ((v9 & 0x80000000) == 0)
          {
            v10 = 0;
            while (*(_DWORD *)(a1 + 136 + 4 * v10) != 1918128707)
            {
              v7 = 0;
              if (v4 == ++v10)
                return v7;
            }
            if ((v10 & 0x80000000) == 0)
            {
              v11 = 0;
              while (*(_DWORD *)(a1 + 136 + 4 * v11) != 1733579331)
              {
                v7 = 0;
                if (v4 == ++v11)
                  return v7;
              }
              if ((v11 & 0x80000000) == 0)
              {
                v12 = 0;
                while (*(_DWORD *)(a1 + 136 + 4 * v12) != 1649693251)
                {
                  v7 = 0;
                  if (v4 == ++v12)
                    return v7;
                }
                v6 = ~(_DWORD)v12;
                return v6 >> 31;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (v1 != 1196573017)
    return 0;
  v2 = *(unsigned int *)(a1 + 132);
  if ((int)v2 < 1)
    return 0;
  v3 = 0;
  while (*(_DWORD *)(a1 + 136 + 4 * v3) != 1800688195)
  {
    if (v2 == ++v3)
      return 0;
  }
  v6 = ~(_DWORD)v3;
  return v6 >> 31;
}

BOOL sub_23676B758(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (*(_DWORD *)(a1 + 76) == 1818848875)
    return *(_DWORD *)(a1 + 88) == a2;
  if (a3)
  {
    if (a3 != 1)
    {
      sub_2367644B8(*(uint64_t **)(a1 + 8), 2, "Unexpected direction (%d)", a4, a5, a6, a7, a8, a3);
      return 0;
    }
    v9 = &unk_2368B33A0;
  }
  else
  {
    v9 = &unk_2368B3380;
  }
  v10 = *(unsigned int *)(a1 + 132);
  if ((int)v10 < 1)
    return 0;
  v11 = 0;
  v12 = v9[a2];
  while (*(_DWORD *)(a1 + 136 + 4 * v11) != v12)
  {
    if (v10 == ++v11)
      return 0;
  }
  return (int)v11 >= 0;
}

uint64_t sub_23676B810(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_23676B758(a1, a2, 0, a4, a5, a6, a7, a8))
    return 1;
  else
    return sub_23676B5A0(a1);
}

uint64_t sub_23676B84C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2;
  v5 = sub_23676EFD4(a1, a2);
  if (v5)
  {
    v6 = v4;
    v7 = 56;
    do
    {
      v8 = *(_QWORD *)(v5 + 16);
      v9 = v8 + v7;
      v10 = *a3;
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(*a3 + 104);
      *(_OWORD *)(v9 - 36) = *(_OWORD *)(v10 + 116);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(v10 + 96);
      v11 = (int *)sub_23676A304((uint64_t *)v10, 0x74656368u);
      if (v11)
        v12 = *v11;
      else
        v12 = 0;
      *(_DWORD *)(v9 - 40) = v12;
      v13 = sub_23676A304((uint64_t *)v10, 0x646D6E64u);
      if (v13)
        v13 = (uint64_t)sub_23676E3C0(v13);
      *(_QWORD *)(v8 + v7 - 16) = v13;
      v14 = sub_23676A304((uint64_t *)v10, 0x646D6464u);
      if (v14)
        v14 = (uint64_t)sub_23676E3C0(v14);
      *(_QWORD *)(v8 + v7 - 8) = v14;
      v15 = sub_23676A304((uint64_t *)v10, 0x64657363u);
      if (v15)
        v15 = (uint64_t)sub_23676E3C0(v15);
      *(_QWORD *)(v8 + v7) = v15;
      v7 += 64;
      ++a3;
      --v6;
    }
    while (v6);
  }
  return v5;
}

int32x2_t sub_23676B950(uint64_t *a1, __int32 a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  int32x2_t *v7;
  int32x2_t result;

  if (a1)
  {
    v4 = &qword_25642E910;
    v5 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == a1)
      {
        v5 = a1;
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)&unk_250800620;
  }
  v6 = (__int128 *)v5[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (int32x2_t *)(*((uint64_t (**)(uint64_t *, uint64_t))v6 + 1))(a1, 64);
  if (v7)
  {
    *v7 = (int32x2_t)a1;
    result = vdup_n_s32(0x69646E20u);
    v7[1] = result;
    v7[2].i32[0] = a2;
    v7[2].i32[1] = a2;
    v7[3] = (int32x2_t)sub_23676B9F4;
    v7[4] = 0;
    v7[5] = 0;
    v7[6] = 0;
  }
  return result;
}

void *sub_23676B9F4(void *__src, void *__dst, uint64_t a3)
{
  return memmove(__dst, __src, 4 * *(unsigned int *)(a3 + 16));
}

uint64_t sub_23676BA0C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v19;

  v9 = *a1;
  if (*a1)
  {
    v10 = 0;
    do
    {
      ++v10;
      v9 = *(_QWORD *)(v9 + 56);
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }
  if (v10 == a2)
  {
    v19 = &a9;
    v11 = a2;
    v12 = a1;
    while (1)
    {
      v13 = *v12;
      v14 = v19;
      v19 += 8;
      if (*(_DWORD *)(v13 + 8) != *(_DWORD *)v14)
        break;
      v12 = (uint64_t *)(v13 + 56);
      if (!--v11)
      {
        do
        {
          v15 = *a1;
          v16 = v19;
          v19 += 8;
          v17 = *(_QWORD **)v16;
          if (v17)
            *v17 = v15;
          a1 = (uint64_t *)(v15 + 56);
          --a2;
        }
        while (a2);
        return 1;
      }
    }
  }
  return 0;
}

int32x2_t *sub_23676BAB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(int32x2_t *);
  uint64_t *v31;
  uint64_t *v32;
  __int128 *v33;

  if (a1)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == a1)
      {
        v7 = a1;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (__int128 *)v7[6];
  if (!v8)
    v8 = &xmmword_2542ABF08;
  v9 = (int32x2_t *)(*((uint64_t (**)(uint64_t *, uint64_t))v8 + 1))(a1, 64);
  v10 = v9;
  if (v9)
  {
    *v9 = (int32x2_t)a1;
    v9[1] = vdup_n_s32(0x63767374u);
    v9[2].i32[0] = a2;
    v9[2].i32[1] = a2;
    v9[3] = (int32x2_t)sub_23676BD08;
    v9[4] = (int32x2_t)sub_23676BD70;
    v9[5] = (int32x2_t)sub_23676BF80;
    v9[6] = 0;
    if (a1)
    {
      v11 = &qword_25642E910;
      v12 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v11 = (uint64_t *)*v11;
        if (!v11)
          break;
        if (v11 == a1)
        {
          v12 = a1;
          break;
        }
      }
    }
    else
    {
      v12 = (uint64_t *)&unk_250800620;
    }
    v13 = (__int128 *)v12[6];
    if (!v13)
      v13 = &xmmword_2542ABF08;
    v14 = (_DWORD *)(*((uint64_t (**)(uint64_t *, uint64_t))v13 + 1))(a1, 16);
    if (v14)
    {
      v15 = v14;
      v10[6] = (int32x2_t)v14;
      *v14 = a2;
      if (a1)
      {
        v16 = &qword_25642E910;
        v17 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v16 = (uint64_t *)*v16;
          if (!v16)
            break;
          if (v16 == a1)
          {
            v17 = a1;
            break;
          }
        }
      }
      else
      {
        v17 = (uint64_t *)&unk_250800620;
      }
      v18 = (__int128 *)v17[6];
      if (!v18)
        v18 = &xmmword_2542ABF08;
      v19 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v18 + 4))(a1, a2, 8);
      *((_QWORD *)v15 + 1) = v19;
      if (v19)
      {
        if (!(_DWORD)a2)
          return v10;
        v27 = 0;
        v28 = 8 * a2;
        while (1)
        {
          v29 = a3 ? sub_2367658C0(*(_QWORD *)(a3 + v27), v20, v21, v22, v23, v24, v25, v26) : sub_2367654B0(a1, 1);
          *(_QWORD *)(*((_QWORD *)v15 + 1) + v27) = v29;
          if (!*(_QWORD *)(*((_QWORD *)v15 + 1) + v27))
            break;
          v27 += 8;
          if (v28 == v27)
            return v10;
        }
      }
    }
    v30 = (void (*)(int32x2_t *))v10[5];
    if (v30)
      v30(v10);
    if (*v10)
    {
      v31 = &qword_25642E910;
      v32 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v31 = (uint64_t *)*v31;
        if (!v31)
          break;
        if (v31 == (uint64_t *)*v10)
        {
          v32 = (uint64_t *)*v10;
          break;
        }
      }
    }
    else
    {
      v32 = (uint64_t *)&unk_250800620;
    }
    v33 = (__int128 *)v32[6];
    if (!v33)
      v33 = &xmmword_2542ABF08;
    (*((void (**)(void))v33 + 2))();
    return 0;
  }
  return v10;
}

void sub_23676BD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t v6;

  v3 = *(unsigned int **)(a3 + 48);
  if (v3 && *((_QWORD *)v3 + 1) && *v3)
  {
    v6 = 0;
    do
    {
      *(float *)(a2 + 4 * v6) = sub_236765B54(*(_DWORD **)(*((_QWORD *)v3 + 1) + 8 * v6), *(float *)(a1 + 4 * v6));
      ++v6;
    }
    while (v6 < *v3);
  }
}

unsigned int *sub_23676BD70(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  uint64_t ***v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 *v27;
  uint64_t *v28;
  uint64_t *v29;
  __int128 *v30;

  v2 = *a1;
  if (v2)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == v2)
      {
        v4 = v2;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = a1[6];
  v6 = (__int128 *)v4[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (unsigned int *)(*((uint64_t (**)(void))v6 + 1))();
  v8 = v7;
  if (v7)
  {
    *v7 = *(_DWORD *)v5;
    if (*a1)
    {
      v9 = &qword_25642E910;
      v10 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v9 = (uint64_t *)*v9;
        if (!v9)
          break;
        if (v9 == *a1)
        {
          v10 = *a1;
          break;
        }
      }
    }
    else
    {
      v10 = (uint64_t *)&unk_250800620;
    }
    v11 = (__int128 *)v10[6];
    if (!v11)
      v11 = &xmmword_2542ABF08;
    v12 = (*((uint64_t (**)(void))v11 + 4))();
    *((_QWORD *)v8 + 1) = v12;
    if (!v12)
      goto LABEL_40;
    if (!*v8)
      return v8;
    v20 = 0;
    while (1)
    {
      *(_QWORD *)(*((_QWORD *)v8 + 1) + 8 * v20) = sub_2367658C0(*(_QWORD *)(v5[1] + 8 * v20), v13, v14, v15, v16, v17, v18, v19);
      v13 = *((_QWORD *)v8 + 1);
      if (!*(_QWORD *)(v13 + 8 * v20))
        break;
      if (++v20 >= (unint64_t)*v8)
        return v8;
    }
    v21 = *v8;
    if ((_DWORD)v21)
    {
      for (i = 0; i < v21; ++i)
      {
        v23 = *(uint64_t ****)(*((_QWORD *)v8 + 1) + 8 * i);
        if (v23)
        {
          sub_236765578(v23);
          v21 = *v8;
        }
      }
      v24 = *a1;
      if (!*((_QWORD *)v8 + 1))
        goto LABEL_41;
      if (v24)
        goto LABEL_31;
    }
    else
    {
      v24 = *a1;
      if (*a1)
      {
LABEL_31:
        v25 = &qword_25642E910;
        v26 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v25 = (uint64_t *)*v25;
          if (!v25)
            goto LABEL_37;
          if (v25 == v24)
          {
            v26 = v24;
            goto LABEL_37;
          }
        }
      }
    }
    v26 = (uint64_t *)&unk_250800620;
LABEL_37:
    v27 = (__int128 *)v26[6];
    if (!v27)
      v27 = &xmmword_2542ABF08;
    (*((void (**)(void))v27 + 2))();
LABEL_40:
    v24 = *a1;
LABEL_41:
    if (v24)
    {
      v28 = &qword_25642E910;
      v29 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v28 = (uint64_t *)*v28;
        if (!v28)
          break;
        if (v28 == v24)
        {
          v29 = v24;
          break;
        }
      }
    }
    else
    {
      v29 = (uint64_t *)&unk_250800620;
    }
    v30 = (__int128 *)v29[6];
    if (!v30)
      v30 = &xmmword_2542ABF08;
    (*((void (**)(void))v30 + 2))();
    return 0;
  }
  return v8;
}

void **sub_23676BF80(void **result)
{
  unsigned int *v1;
  void **v2;
  unint64_t v3;
  unint64_t i;
  uint64_t ***v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;

  v1 = (unsigned int *)result[6];
  if (!v1)
    return result;
  v2 = result;
  if (!*((_QWORD *)v1 + 1))
    goto LABEL_20;
  v3 = *v1;
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(uint64_t ****)(*((_QWORD *)v1 + 1) + 8 * i);
      if (v5)
      {
        sub_236765578(v5);
        v3 = *v1;
      }
    }
    v6 = (uint64_t *)*v2;
    if (!*((_QWORD *)v1 + 1))
      goto LABEL_21;
    if (v6)
      goto LABEL_10;
  }
  else
  {
    v6 = (uint64_t *)*result;
    if (*v2)
    {
LABEL_10:
      v7 = &qword_25642E910;
      v8 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v7 = (uint64_t *)*v7;
        if (!v7)
          goto LABEL_17;
        if (v7 == v6)
        {
          v8 = v6;
          goto LABEL_17;
        }
      }
    }
  }
  v8 = (uint64_t *)&unk_250800620;
LABEL_17:
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  (*((void (**)(void))v9 + 2))();
LABEL_20:
  v6 = (uint64_t *)*v2;
LABEL_21:
  if (v6)
  {
    v10 = &qword_25642E910;
    v11 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v6)
      {
        v11 = v6;
        break;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)&unk_250800620;
  }
  v12 = (__int128 *)v11[6];
  if (!v12)
    v12 = &xmmword_2542ABF08;
  return (void **)(*((uint64_t (**)(void))v12 + 2))();
}

uint64_t sub_23676C0A0(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  v2 = a1[5];
  if (v2)
    ((void (*)(uint64_t **))v2)(a1);
  if (*a1)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == *a1)
      {
        v4 = *a1;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = (__int128 *)v4[6];
  if (!v5)
    v5 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v5 + 2))();
}

int32x2_t *sub_23676C120(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  int32x2_t *v8;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;
  int32x2_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = a3 * a2;
  if (!(_DWORD)v5 || v5 >= 0xFFFFFFFF / a3 || v5 >= 0xFFFFFFFF / a2)
    return 0;
  v8 = 0;
  if (v5 >= a2 && v5 >= a3)
  {
    if (a1)
    {
      v12 = &qword_25642E910;
      v13 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v12 = (uint64_t *)*v12;
        if (!v12)
          break;
        if (v12 == a1)
        {
          v13 = a1;
          break;
        }
      }
    }
    else
    {
      v13 = (uint64_t *)&unk_250800620;
    }
    v14 = (__int128 *)v13[6];
    if (!v14)
      v14 = &xmmword_2542ABF08;
    v15 = (int32x2_t *)(*((uint64_t (**)(uint64_t *, uint64_t))v14 + 1))(a1, 64);
    v8 = v15;
    if (v15)
    {
      *v15 = (int32x2_t)a1;
      v15[1] = vdup_n_s32(0x6D617466u);
      v15[2].i32[0] = a3;
      v15[2].i32[1] = a2;
      v15[3] = (int32x2_t)sub_23676C388;
      v15[4] = (int32x2_t)sub_23676C410;
      v15[5] = (int32x2_t)sub_23676C55C;
      v15[6] = 0;
      if (a1)
      {
        v16 = &qword_25642E910;
        v17 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v16 = (uint64_t *)*v16;
          if (!v16)
            break;
          if (v16 == a1)
          {
            v17 = a1;
            break;
          }
        }
      }
      else
      {
        v17 = (uint64_t *)&unk_250800620;
      }
      v18 = (__int128 *)v17[6];
      if (!v18)
        v18 = &xmmword_2542ABF08;
      v19 = (*((uint64_t (**)(uint64_t *, uint64_t))v18 + 1))(a1, 16);
      if (v19)
      {
        v20 = (_QWORD *)v19;
        if (a1)
        {
          v21 = &qword_25642E910;
          v22 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v21 = (uint64_t *)*v21;
            if (!v21)
              break;
            if (v21 == a1)
            {
              v22 = a1;
              break;
            }
          }
        }
        else
        {
          v22 = (uint64_t *)&unk_250800620;
        }
        v23 = (__int128 *)v22[6];
        if (!v23)
          v23 = &xmmword_2542ABF08;
        v24 = (_QWORD *)(*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v23 + 4))(a1, v5, 8);
        *v20 = v24;
        if (v24)
        {
          do
          {
            v25 = *a4++;
            *v24++ = v25;
            --v5;
          }
          while (v5);
          if (!a5)
            goto LABEL_47;
          if (a1)
          {
            v26 = &qword_25642E910;
            v27 = (uint64_t *)&unk_250800620;
            while (1)
            {
              v26 = (uint64_t *)*v26;
              if (!v26)
                break;
              if (v26 == a1)
              {
                v27 = a1;
                break;
              }
            }
          }
          else
          {
            v27 = (uint64_t *)&unk_250800620;
          }
          v28 = (__int128 *)v27[6];
          if (!v28)
            v28 = &xmmword_2542ABF08;
          v29 = (_QWORD *)(*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v28 + 4))(a1, a2, 8);
          v20[1] = v29;
          if (v29)
          {
            if ((_DWORD)a2)
            {
              v30 = a2;
              do
              {
                v31 = *a5++;
                *v29++ = v31;
                --v30;
              }
              while (v30);
            }
LABEL_47:
            v8[6] = (int32x2_t)v20;
            return v8;
          }
        }
        sub_23676C55C((uint64_t **)v8);
      }
      return 0;
    }
  }
  return v8;
}

float sub_23676C388(float *a1, uint64_t a2, uint64_t a3, float result)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float *v11;
  unsigned int v12;
  uint64_t v13;
  float v14;

  v4 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD **)(a3 + 48);
    v8 = *(unsigned int *)(a3 + 16);
    v9 = v7[1];
    do
    {
      if ((_DWORD)v8)
      {
        v10 = 0.0;
        v11 = a1;
        v12 = v5;
        v13 = v8;
        do
        {
          v14 = *v11++;
          v10 = v10 + v14 * *(double *)(*v7 + 8 * v12++);
          --v13;
        }
        while (v13);
        if (!v9)
          goto LABEL_8;
      }
      else
      {
        v10 = 0.0;
        if (!v9)
          goto LABEL_8;
      }
      v10 = v10 + *(double *)(v9 + 8 * v6);
LABEL_8:
      result = v10;
      *(float *)(a2 + 4 * v6++) = result;
      v5 += v8;
    }
    while (v6 != v4);
  }
  return result;
}

_QWORD *sub_23676C410(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;

  v2 = *a1;
  if (v2)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == v2)
      {
        v4 = v2;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = a1[6];
  v6 = (__int128 *)v4[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (_QWORD *)(*((uint64_t (**)(void))v6 + 1))();
  if (v7)
  {
    if (*a1)
    {
      v8 = &qword_25642E910;
      v9 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          break;
        if (v8 == *a1)
        {
          v9 = *a1;
          break;
        }
      }
    }
    else
    {
      v9 = (uint64_t *)&unk_250800620;
    }
    v10 = (__int128 *)v9[6];
    if (!v10)
      v10 = &xmmword_2542ABF08;
    *v7 = (*((uint64_t (**)(void))v10 + 5))();
    if (v5[1])
    {
      if (*a1)
      {
        v11 = &qword_25642E910;
        v12 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v11 = (uint64_t *)*v11;
          if (!v11)
            break;
          if (v11 == *a1)
          {
            v12 = *a1;
            break;
          }
        }
      }
      else
      {
        v12 = (uint64_t *)&unk_250800620;
      }
      v13 = (__int128 *)v12[6];
      if (!v13)
        v13 = &xmmword_2542ABF08;
      v7[1] = (*((uint64_t (**)(void))v13 + 5))();
    }
  }
  return v7;
}

uint64_t **sub_23676C55C(uint64_t **result)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;

  v1 = result[6];
  if (v1)
  {
    v2 = result;
    if (*v1)
    {
      v3 = *result;
      if (*v2)
      {
        v4 = &qword_25642E910;
        v5 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v4 = (uint64_t *)*v4;
          if (!v4)
            break;
          if (v4 == v3)
          {
            v5 = *v2;
            break;
          }
        }
      }
      else
      {
        v5 = (uint64_t *)&unk_250800620;
      }
      v6 = (__int128 *)v5[6];
      if (!v6)
        v6 = &xmmword_2542ABF08;
      result = (uint64_t **)(*((uint64_t (**)(void))v6 + 2))();
    }
    if (v1[1])
    {
      if (*v2)
      {
        v7 = &qword_25642E910;
        v8 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v7 = (uint64_t *)*v7;
          if (!v7)
            break;
          if (v7 == *v2)
          {
            v8 = *v2;
            break;
          }
        }
      }
      else
      {
        v8 = (uint64_t *)&unk_250800620;
      }
      v9 = (__int128 *)v8[6];
      if (!v9)
        v9 = &xmmword_2542ABF08;
      result = (uint64_t **)(*((uint64_t (**)(void))v9 + 2))();
    }
    if (v2[6])
    {
      if (*v2)
      {
        v10 = &qword_25642E910;
        v11 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v10 = (uint64_t *)*v10;
          if (!v10)
            break;
          if (v10 == *v2)
          {
            v11 = *v2;
            break;
          }
        }
      }
      else
      {
        v11 = (uint64_t *)&unk_250800620;
      }
      v12 = (__int128 *)v11[6];
      if (!v12)
        v12 = &xmmword_2542ABF08;
      return (uint64_t **)(*((uint64_t (**)(void))v12 + 2))();
    }
  }
  return result;
}

int32x2_t *sub_23676C698(uint64_t *a1, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;
  int32x2_t *v16;
  int32x2_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void (*v29)(int32x2_t *);
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  void (*v33)(int32x2_t *);
  uint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  void (*v41)(int32x2_t *);
  uint64_t *v42;
  uint64_t v43;
  void (*v44)(int32x2_t *);
  uint64_t *v45;
  __int128 *v46;

  if (a3 >= 9)
  {
    sub_2367644B8(a1, 2, "Too many input channels (%d channels, max=%d)", a4, a5, a6, a7, a8, a3);
    return 0;
  }
  if (a1)
  {
    v13 = &qword_25642E910;
    v14 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v13 == a1)
      {
        v14 = a1;
        break;
      }
    }
  }
  else
  {
    v14 = (uint64_t *)&unk_250800620;
  }
  v15 = (__int128 *)v14[6];
  if (!v15)
    v15 = &xmmword_2542ABF08;
  v16 = (int32x2_t *)(*((uint64_t (**)(uint64_t *, uint64_t))v15 + 1))(a1, 64);
  v17 = v16;
  if (v16)
  {
    *v16 = (int32x2_t)a1;
    v16[1] = vdup_n_s32(0x636C7574u);
    v16[2].i32[0] = a3;
    v16[2].i32[1] = a4;
    v16[3] = (int32x2_t)sub_23676CA0C;
    v16[4] = (int32x2_t)sub_23676CB2C;
    v16[5] = (int32x2_t)sub_23676CD28;
    v16[6] = 0;
    if (a1)
    {
      v18 = &qword_25642E910;
      v19 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v18 = (uint64_t *)*v18;
        if (!v18)
          break;
        if (v18 == a1)
        {
          v19 = a1;
          break;
        }
      }
    }
    else
    {
      v19 = (uint64_t *)&unk_250800620;
    }
    v20 = (__int128 *)v19[6];
    if (!v20)
      v20 = &xmmword_2542ABF08;
    v21 = (*((uint64_t (**)(uint64_t *, uint64_t))v20 + 1))(a1, 24);
    if (!v21)
    {
      v29 = (void (*)(int32x2_t *))v17[5];
      if (v29)
        v29(v17);
      v30 = (uint64_t *)*v17;
      if (*v17)
      {
        v31 = &qword_25642E910;
        v32 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v31 = (uint64_t *)*v31;
          if (!v31)
            goto LABEL_71;
          if (v31 == v30)
          {
LABEL_69:
            v32 = v30;
            goto LABEL_71;
          }
        }
      }
      goto LABEL_70;
    }
    v22 = (uint64_t *)v21;
    v17[6] = (int32x2_t)v21;
    v23 = a3;
    v24 = 1;
    while (v23 * 4)
    {
      v25 = a2[v23 - 1];
      if (v25)
      {
        v24 *= v25;
        --v23;
        if (((v25 * (unint64_t)v24) & 0xFFFFFFFF00000000) == 0)
          continue;
      }
      v24 = 0;
      break;
    }
    v26 = v24 * a4;
    *(_QWORD *)(v21 + 16) = v26;
    if (!(_DWORD)v26)
    {
      v33 = (void (*)(int32x2_t *))v17[5];
      if (v33)
        v33(v17);
      v30 = (uint64_t *)*v17;
      if (*v17)
      {
        v34 = &qword_25642E910;
        v32 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v34 = (uint64_t *)*v34;
          if (!v34)
            goto LABEL_71;
          if (v34 == v30)
            goto LABEL_69;
        }
      }
      goto LABEL_70;
    }
    if (a1)
    {
      v27 = &qword_25642E910;
      v28 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v27 = (uint64_t *)*v27;
        if (!v27)
          break;
        if (v27 == a1)
        {
          v28 = a1;
          break;
        }
      }
    }
    else
    {
      v28 = (uint64_t *)&unk_250800620;
    }
    v35 = (__int128 *)v28[6];
    if (!v35)
      v35 = &xmmword_2542ABF08;
    v36 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v35 + 4))(a1, v26, 2);
    *v22 = v36;
    if (!v36)
    {
      v41 = (void (*)(int32x2_t *))v17[5];
      if (v41)
        v41(v17);
      v30 = (uint64_t *)*v17;
      if (*v17)
      {
        v42 = &qword_25642E910;
        v32 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v42 = (uint64_t *)*v42;
          if (!v42)
            goto LABEL_71;
          if (v42 == v30)
            goto LABEL_69;
        }
      }
      goto LABEL_70;
    }
    if (a5)
    {
      for (i = 0; i != v26; ++i)
        *(_WORD *)(*v22 + 2 * i) = *(_WORD *)(a5 + 2 * i);
      v40 = *v22;
    }
    else
    {
      v40 = v36;
    }
    v43 = sub_236768588(a1, a2, a3, a4, v40, 0, v37, v38);
    v22[1] = v43;
    if (!v43)
    {
      v44 = (void (*)(int32x2_t *))v17[5];
      if (v44)
        v44(v17);
      v30 = (uint64_t *)*v17;
      if (*v17)
      {
        v45 = &qword_25642E910;
        v32 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v45 = (uint64_t *)*v45;
          if (!v45)
            goto LABEL_71;
          if (v45 == v30)
            goto LABEL_69;
        }
      }
LABEL_70:
      v32 = (uint64_t *)&unk_250800620;
LABEL_71:
      v46 = (__int128 *)v32[6];
      if (!v46)
        v46 = &xmmword_2542ABF08;
      (*((void (**)(void))v46 + 2))();
      return 0;
    }
  }
  return v17;
}

uint64_t sub_23676CA0C(float *a1, float *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  double v8;
  __int16 v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _BYTE v14[256];
  _BYTE v15[256];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 48);
  v6 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v6)
  {
    v7 = (__int16 *)v15;
    do
    {
      v8 = *a1 * 65535.0 + 0.5;
      if (v8 <= 0.0)
      {
        v9 = 0;
      }
      else if (v8 >= 65535.0)
      {
        v9 = -1;
      }
      else
      {
        v9 = (COERCE_UNSIGNED_INT64(v8 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      *v7++ = v9;
      ++a1;
      --v6;
    }
    while (v6);
  }
  result = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v5 + 8) + 128))(v15, v14);
  v11 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v11)
  {
    v12 = (unsigned __int16 *)v14;
    do
    {
      v13 = *v12++;
      *a2++ = (float)v13 / 65535.0;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_23676CB2C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 *v23;

  v2 = *(uint64_t **)a1;
  if (v2)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == v2)
      {
        v4 = v2;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = *(_QWORD *)(a1 + 48);
  v6 = (__int128 *)v4[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (uint64_t *)(*((uint64_t (**)(void))v6 + 1))();
  v10 = v7;
  if (v7)
  {
    v7[2] = *(_QWORD *)(v5 + 16);
    if (!*(_QWORD *)v5)
    {
      v14 = *v7;
      goto LABEL_27;
    }
    v11 = *(uint64_t **)a1;
    if (*(_DWORD *)(v5 + 20))
    {
      if (v11)
      {
        v12 = &qword_25642E910;
        v13 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v12 = (uint64_t *)*v12;
          if (!v12)
            goto LABEL_24;
          if (v12 == v11)
            goto LABEL_22;
        }
      }
    }
    else if (v11)
    {
      v15 = &qword_25642E910;
      v13 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v15 = (uint64_t *)*v15;
        if (!v15)
          break;
        if (v15 == v11)
        {
LABEL_22:
          v13 = *(uint64_t **)a1;
          break;
        }
      }
LABEL_24:
      v16 = (__int128 *)v13[6];
      if (!v16)
        v16 = &xmmword_2542ABF08;
      v14 = (*((uint64_t (**)(void))v16 + 5))();
      *v10 = v14;
      if (!v14)
      {
LABEL_38:
        if (*(_QWORD *)a1)
        {
          v21 = &qword_25642E910;
          v22 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v21 = (uint64_t *)*v21;
            if (!v21)
              break;
            if (v21 == *(uint64_t **)a1)
            {
              v22 = *(uint64_t **)a1;
              break;
            }
          }
        }
        else
        {
          v22 = (uint64_t *)&unk_250800620;
        }
        v23 = (__int128 *)v22[6];
        if (!v23)
          v23 = &xmmword_2542ABF08;
        (*((void (**)(void))v23 + 2))();
        return 0;
      }
LABEL_27:
      v17 = sub_236768588(*(uint64_t **)a1, (int *)(*(_QWORD *)(v5 + 8) + 20), *(_DWORD *)(*(_QWORD *)(v5 + 8) + 12), *(unsigned int *)(*(_QWORD *)(v5 + 8) + 16), v14, *(unsigned int *)(*(_QWORD *)(v5 + 8) + 8), v8, v9);
      v10[1] = v17;
      if (v17)
        return v10;
      if (*v10)
      {
        if (*(_QWORD *)a1)
        {
          v18 = &qword_25642E910;
          v19 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v18 = (uint64_t *)*v18;
            if (!v18)
              break;
            if (v18 == *(uint64_t **)a1)
            {
              v19 = *(uint64_t **)a1;
              break;
            }
          }
        }
        else
        {
          v19 = (uint64_t *)&unk_250800620;
        }
        v20 = (__int128 *)v19[6];
        if (!v20)
          v20 = &xmmword_2542ABF08;
        (*((void (**)(void))v20 + 2))();
      }
      goto LABEL_38;
    }
    v13 = (uint64_t *)&unk_250800620;
    goto LABEL_24;
  }
  return v10;
}

uint64_t **sub_23676CD28(uint64_t **result)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;

  v1 = result[6];
  if (v1)
  {
    v2 = result;
    if (*v1)
    {
      v3 = *result;
      if (*v2)
      {
        v4 = &qword_25642E910;
        v5 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v4 = (uint64_t *)*v4;
          if (!v4)
            break;
          if (v4 == v3)
          {
            v5 = *v2;
            break;
          }
        }
      }
      else
      {
        v5 = (uint64_t *)&unk_250800620;
      }
      v6 = (__int128 *)v5[6];
      if (!v6)
        v6 = &xmmword_2542ABF08;
      result = (uint64_t **)(*((uint64_t (**)(void))v6 + 2))();
    }
    v7 = (uint64_t **)v1[1];
    if (v7)
    {
      if (*v7)
      {
        v8 = &qword_25642E910;
        v9 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v8 = (uint64_t *)*v8;
          if (!v8)
            break;
          if (v8 == *v7)
          {
            v9 = *v7;
            break;
          }
        }
      }
      else
      {
        v9 = (uint64_t *)&unk_250800620;
      }
      v10 = (__int128 *)v9[6];
      if (!v10)
        v10 = &xmmword_2542ABF08;
      result = (uint64_t **)(*((uint64_t (**)(void))v10 + 2))();
    }
    if (v2[6])
    {
      if (*v2)
      {
        v11 = &qword_25642E910;
        v12 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v11 = (uint64_t *)*v11;
          if (!v11)
            break;
          if (v11 == *v2)
          {
            v12 = *v2;
            break;
          }
        }
      }
      else
      {
        v12 = (uint64_t *)&unk_250800620;
      }
      v13 = (__int128 *)v12[6];
      if (!v13)
        v13 = &xmmword_2542ABF08;
      return (uint64_t **)(*((uint64_t (**)(void))v13 + 2))();
    }
  }
  return result;
}

uint64_t sub_23676CE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8) + 128))();
}

uint64_t sub_23676CE74(__int16 *a1, _WORD *a2, unsigned int *a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *a3;
  if ((int)v3 >= 1)
  {
    do
    {
      v4 = *a1++;
      *a2++ = v4;
      --v3;
    }
    while (v3);
  }
  return 1;
}

uint64_t sub_23676CE98(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 *v25;
  _WORD *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD, _QWORD);
  __int16 *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  int v35;
  _OWORD v36[16];
  _QWORD v37[2];
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!result)
    return result;
  v3 = *(_QWORD **)(result + 48);
  if (!v3)
    return 0;
  result = 0;
  v4 = v3[1];
  v7 = *(_DWORD *)(v4 + 16);
  v5 = v4 + 16;
  v6 = v7;
  v8 = *(unsigned int *)(v5 - 4);
  v9 = (v8 - 9) < 0xFFFFFFF8 || (_DWORD)v6 == 0;
  if (v9 || v6 > 0x7F)
    return result;
  v11 = v5 + 4;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  memset(v36, 0, sizeof(v36));
  v12 = 4 * v8;
  v13 = 1;
  while (v12)
  {
    v14 = *(_DWORD *)(v5 + v12);
    if (v14)
    {
      v13 *= v14;
      v12 -= 4;
      if (((v14 * (unint64_t)v13) & 0xFFFFFFFF00000000) == 0)
        continue;
    }
    return 0;
  }
  if (!v13)
    return 0;
  if (v13 < 1)
    return 1;
  v15 = 0;
  v16 = 0;
  v34 = v8 + 1;
  v35 = v8;
  do
  {
    if ((int)v8 >= 1)
    {
      v17 = v34;
      v18 = v16;
      do
      {
        v19 = (v17 - 2);
        v20 = *(_DWORD *)(v11 + 4 * v19);
        v21 = v18;
        v18 /= v20;
        v22 = (double)(v21 - v18 * v20) * 65535.0 / (double)(v20 - 1) + 0.5;
        if (v22 <= 0.0)
        {
          v23 = 0;
        }
        else if (v22 >= 65535.0)
        {
          v23 = -1;
        }
        else
        {
          v23 = (COERCE_UNSIGNED_INT64(v22 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        *((_WORD *)v37 + v19) = v23;
        --v17;
      }
      while (v17 > 1);
    }
    v24 = 2 * v15;
    if (*v3)
    {
      v25 = (__int16 *)(*v3 + v24);
      v26 = v36;
      v27 = v6;
      do
      {
        v28 = *v25++;
        *v26++ = v28;
        --v27;
      }
      while (v27);
    }
    v29 = a3;
    v30 = a2;
    result = a2(v37, v36);
    if (!(_DWORD)result)
      break;
    if (*v3)
    {
      v31 = (__int16 *)v36;
      v32 = v6;
      do
      {
        v33 = *v31++;
        *(_WORD *)(*v3 + v24) = v33;
        v24 += 2;
        --v32;
      }
      while (v32);
    }
    v15 += v6;
    ++v16;
    result = 1;
    a3 = v29;
    a2 = v30;
    LODWORD(v8) = v35;
  }
  while (v16 != v13);
  return result;
}

double sub_23676D10C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  uint64_t v5;
  double result;

  if (a1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == a1)
      {
        v3 = a1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  v5 = (*((uint64_t (**)(uint64_t *, uint64_t))v4 + 1))(a1, 64);
  if (v5)
  {
    *(_QWORD *)v5 = a1;
    result = 9.73243756e270;
    *(_OWORD *)(v5 + 8) = xmmword_2368AF340;
    *(_QWORD *)(v5 + 24) = sub_23676D1A4;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
  }
  return result;
}

float32_t sub_23676D1A4(uint64_t a1, float32x2_t *a2)
{
  float64x2_t v3;
  float64x2_t v10;
  double v11;
  double v12;
  float32_t result;

  _Q3 = vmlaq_f64((float64x2_t)vdupq_n_s64(0xC060000000000000), (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL), vcvtq_f64_f32(*(float32x2_t *)(a1 + 4)));
  v3.f64[0] = vmlad_n_f64((*(float *)a1 * 100.0 + 16.0) / 116.0, 0.002, _Q3.f64[0]);
  _D1 = 0xBF747AE147AE147BLL;
  v3.f64[1] = (*(float *)a1 * 100.0 + 16.0) / 116.0;
  __asm { FMLA            D0, D1, V3.D[1] }
  v10 = vmulq_f64((float64x2_t)xmmword_25642E840, (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3FCA7B9611A7B961uLL), v3), (int8x16_t)vmulq_f64(vaddq_f64(v3, (float64x2_t)vdupq_n_s64(0xBFC1A7B9611A7B96)), (float64x2_t)vdupq_n_s64(0x3FC07004DED20922uLL)), (int8x16_t)vmulq_f64(v3, vmulq_f64(v3, v3))));
  if (_D0 <= 0.206896552)
    v11 = (_D0 + -0.137931034) * 0.128418549;
  else
    v11 = _D0 * (_D0 * _D0);
  v12 = v11 * *(double *)&qword_25642E850;
  *a2 = vcvt_f32_f64(vdivq_f64(v10, (float64x2_t)vdupq_n_s64(0x3FFFFFE000000000uLL)));
  result = v12 / 1.99996948;
  a2[1].f32[0] = result;
  return result;
}

float *sub_23676D2D0(float *result, float *a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;

  v3 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v3)
  {
    do
    {
      v4 = *result++;
      v5 = v4;
      if (v4 < 0.0)
        v5 = 0.0;
      *a2++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

double sub_23676D2F8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  uint64_t v5;
  double result;

  if (a1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == a1)
      {
        v3 = a1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  v5 = (*((uint64_t (**)(uint64_t *, uint64_t))v4 + 1))(a1, 64);
  if (v5)
  {
    *(_QWORD *)v5 = a1;
    result = 1.5544118e213;
    *(_OWORD *)(v5 + 8) = xmmword_2368AF350;
    *(_QWORD *)(v5 + 24) = sub_23676D390;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
  }
  return result;
}

float32_t sub_23676D390(float32x2_t *a1, float32x2_t *a2)
{
  float64x2_t v3;
  float32_t result;
  float64x2_t v5;
  double v6;
  __int128 v7;
  double v8;

  v7 = 0uLL;
  v8 = 0.0;
  v5 = vmulq_f64(vcvtq_f64_f32(*a1), (float64x2_t)vdupq_n_s64(0x3FFFFFE000000000uLL));
  v6 = a1[1].f32[0] * 1.99996948;
  sub_236775A4C((double *)&v7, v5.f64);
  *(_QWORD *)&v3.f64[0] = v7;
  v3.f64[1] = *((double *)&v7 + 1) + 128.0;
  *a2 = vcvt_f32_f64(vdivq_f64(v3, (float64x2_t)xmmword_2368AF360));
  result = (v8 + 128.0) / 255.0;
  a2[1].f32[0] = result;
  return result;
}

uint64_t **sub_23676D43C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t **v9;
  __int128 v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 *v16;
  uint64_t v18;
  __int128 v19;

  if (!a1)
    return 0;
  v2 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == v2)
      {
        v4 = *(uint64_t **)a1;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = *(_DWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_OWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (__int128 *)v4[6];
  if (!v7)
    v7 = &xmmword_2542ABF08;
  v8 = (*((uint64_t (**)(uint64_t *, uint64_t))v7 + 1))(v2, 64);
  v9 = (uint64_t **)v8;
  if (v8)
  {
    *(_QWORD *)v8 = v2;
    LODWORD(v10) = v5;
    *((_QWORD *)&v10 + 1) = v18;
    DWORD1(v10) = v5;
    *(_OWORD *)(v8 + 8) = v10;
    *(_OWORD *)(v8 + 24) = v19;
    *(_QWORD *)(v8 + 40) = v6;
    *(_QWORD *)(v8 + 48) = 0;
    *(_DWORD *)(v8 + 12) = *(_DWORD *)(a1 + 12);
    v11 = *(uint64_t (**)(uint64_t))(a1 + 32);
    if (v11)
    {
      v12 = v11(a1);
      v9[6] = (uint64_t *)v12;
      if (!v12)
      {
        v13 = v9[5];
        if (v13)
          ((void (*)(uint64_t **))v13)(v9);
        if (*v9)
        {
          v14 = &qword_25642E910;
          v15 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v14 = (uint64_t *)*v14;
            if (!v14)
              break;
            if (v14 == *v9)
            {
              v15 = *v9;
              break;
            }
          }
        }
        else
        {
          v15 = (uint64_t *)&unk_250800620;
        }
        v16 = (__int128 *)v15[6];
        if (!v16)
          v16 = &xmmword_2542ABF08;
        (*((void (**)(void))v16 + 2))();
        return 0;
      }
    }
  }
  return v9;
}

uint64_t sub_23676D59C(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;

  if ((a3 | a2) > 0xF)
    return 0;
  if (a1)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == a1)
      {
        v7 = a1;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (__int128 *)v7[6];
  if (!v8)
    v8 = &xmmword_2542ABF08;
  v9 = (*((uint64_t (**)(uint64_t *, uint64_t))v8 + 1))(a1, 72);
  v10 = v9;
  if (v9)
  {
    *(_DWORD *)(v9 + 8) = a2;
    *(_DWORD *)(v9 + 12) = a3;
    *(_QWORD *)(v9 + 32) = sub_23676D810;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 16) = v9;
    *(_QWORD *)(v9 + 24) = sub_23676D6C0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = a1;
    if (!sub_23676D8DC((uint64_t *)v9))
    {
      if (a1)
      {
        v11 = &qword_25642E910;
        v12 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v11 = (uint64_t *)*v11;
          if (!v11)
            break;
          if (v11 == a1)
          {
            v12 = a1;
            break;
          }
        }
      }
      else
      {
        v12 = (uint64_t *)&unk_250800620;
      }
      v13 = (__int128 *)v12[6];
      if (!v13)
        v13 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v13 + 2))(a1, v10);
      return 0;
    }
  }
  return v10;
}

unsigned __int16 *sub_23676D6C0(unsigned __int16 *result, __int16 *a2, uint64_t *a3)
{
  uint64_t v5;
  float *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  double v13;
  __int16 v14;
  _BYTE v15[1024];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v5)
  {
    v6 = (float *)v15;
    do
    {
      v7 = *result++;
      *v6++ = (float)v7 / 65535.0;
      --v5;
    }
    while (v5);
  }
  v8 = *a3;
  if (*a3)
  {
    v9 = 0;
    do
    {
      v10 = v9 ^ 1;
      result = (unsigned __int16 *)(*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 24))(&v15[512 * v9], &v15[512 * (v9 ^ 1)], v8);
      v8 = *(_QWORD *)(v8 + 56);
      v9 = v10;
    }
    while (v8);
  }
  else
  {
    v10 = 0;
  }
  v11 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v11)
  {
    v12 = (float *)&v15[512 * v10];
    do
    {
      v13 = *v12 * 65535.0 + 0.5;
      if (v13 <= 0.0)
      {
        v14 = 0;
      }
      else if (v13 >= 65535.0)
      {
        v14 = -1;
      }
      else
      {
        v14 = (COERCE_UNSIGNED_INT64(v13 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      *a2++ = v14;
      ++v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

void *sub_23676D810(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[1024];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  __memmove_chk();
  v5 = *a3;
  if (*a3)
  {
    v6 = 0;
    do
    {
      v7 = v6 ^ 1;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 24))(&v9[512 * v6], &v9[512 * (v6 ^ 1)], v5);
      v5 = *(_QWORD *)(v5 + 56);
      v6 = v7;
    }
    while (v5);
  }
  else
  {
    v7 = 0;
  }
  return memcpy(a2, &v9[512 * v7], 4 * *((unsigned int *)a3 + 3));
}

uint64_t sub_23676D8DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *a1;
  if (!*a1)
    return 1;
  v2 = *a1;
  do
  {
    v3 = v2;
    v2 = *(_QWORD *)(v2 + 56);
  }
  while (v2);
  v4 = *(_DWORD *)(v3 + 20);
  *((_DWORD *)a1 + 2) = *(_DWORD *)(v1 + 16);
  *((_DWORD *)a1 + 3) = v4;
  v5 = *(_QWORD *)(v1 + 56);
  if (!v5)
    return 1;
  while (*(_DWORD *)(v5 + 16) == *(_DWORD *)(v1 + 20))
  {
    v1 = *(_QWORD *)(v1 + 56);
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      return 1;
  }
  return 0;
}

_QWORD *sub_23676D934(_QWORD *result)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  __int128 *v7;
  void (*v8)(_QWORD, _QWORD);
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  __int128 *v12;

  if (result)
  {
    v1 = result;
    v2 = (uint64_t **)*result;
    if (*result)
    {
      do
      {
        v3 = v2;
        v2 = (uint64_t **)v2[7];
        v4 = v3[5];
        if (v4)
          ((void (*)(uint64_t **))v4)(v3);
        if (*v3)
        {
          v5 = &qword_25642E910;
          while (1)
          {
            v5 = (uint64_t *)*v5;
            if (!v5)
              break;
            if (v5 == *v3)
            {
              v6 = *v3;
              goto LABEL_11;
            }
          }
        }
        v6 = (uint64_t *)&unk_250800620;
LABEL_11:
        v7 = (__int128 *)v6[6];
        if (!v7)
          v7 = &xmmword_2542ABF08;
        (*((void (**)(void))v7 + 2))();
      }
      while (v2);
    }
    v8 = (void (*)(_QWORD, _QWORD))v1[5];
    if (v8)
      v8(v1[7], v1[2]);
    v9 = (uint64_t *)v1[7];
    if (v9)
    {
      v10 = &qword_25642E910;
      v11 = &unk_250800620;
      while (1)
      {
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        if (v10 == v9)
        {
          v11 = (void *)v1[7];
          break;
        }
      }
    }
    else
    {
      v11 = &unk_250800620;
    }
    v12 = (__int128 *)*((_QWORD *)v11 + 6);
    if (!v12)
      v12 = &xmmword_2542ABF08;
    return (_QWORD *)(*((uint64_t (**)(void))v12 + 2))();
  }
  return result;
}

uint64_t sub_23676DA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t **v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  __int128 *v12;

  if (!a1)
    return 0;
  v2 = sub_23676D59C(*(uint64_t **)(a1 + 56), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  if (v2)
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v4 = 0;
      v5 = 0;
      while (1)
      {
        v6 = sub_23676D43C(v3);
        if (!v6)
        {
          sub_23676D934((_QWORD *)v2);
          return 0;
        }
        v7 = (_QWORD *)v2;
        if ((v4 & 1) == 0)
          goto LABEL_9;
        if (v5)
          break;
LABEL_10:
        v3 = *(_QWORD *)(v3 + 56);
        v4 = 1;
        v5 = v6;
        if (!v3)
          goto LABEL_11;
      }
      v7 = v5 + 7;
LABEL_9:
      *v7 = v6;
      goto LABEL_10;
    }
LABEL_11:
    *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
    v8 = *(uint64_t (**)(_QWORD, _QWORD))(a1 + 48);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v2 + 48) = v8;
    if (v8)
      *(_QWORD *)(v2 + 16) = v8(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 16));
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
    if (!sub_23676D8DC((uint64_t *)v2))
    {
      v9 = *(uint64_t **)(a1 + 56);
      if (v9)
      {
        v10 = &qword_25642E910;
        v11 = &unk_250800620;
        while (1)
        {
          v10 = (uint64_t *)*v10;
          if (!v10)
            break;
          if (v10 == v9)
          {
            v11 = *(void **)(a1 + 56);
            break;
          }
        }
      }
      else
      {
        v11 = &unk_250800620;
      }
      v12 = (__int128 *)*((_QWORD *)v11 + 6);
      if (!v12)
        v12 = &xmmword_2542ABF08;
      (*((void (**)(void))v12 + 2))();
      return 0;
    }
  }
  return v2;
}

uint64_t sub_23676DB6C(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a1 || !a3)
    return 0;
  if (a2 != 1)
  {
    if (!a2)
    {
      *(_QWORD *)(a3 + 56) = *a1;
      goto LABEL_11;
    }
    return 0;
  }
  v4 = *a1;
  if (*a1)
  {
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 56);
    }
    while (v4);
    *(_QWORD *)(v5 + 56) = a3;
    *(_QWORD *)(a3 + 56) = 0;
    return sub_23676D8DC(a1);
  }
LABEL_11:
  *a1 = a3;
  return sub_23676D8DC(a1);
}

uint64_t sub_23676DBBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t i;
  _QWORD v5[9];

  v1 = 0;
  v5[0] = 0x3FF0000000000000;
  memset(&v5[1], 0, 24);
  v5[4] = 0x3FF0000000000000;
  memset(&v5[5], 0, 24);
  v5[8] = 0x3FF0000000000000;
  v2 = v5;
  while (2)
  {
    for (i = 0; i != 3; ++i)
    {
      if (vabdd_f64(*(double *)&v2[i], *(double *)(a1 + i * 8)) >= 0.0000152590219)
        return 0;
    }
    ++v1;
    v2 += 3;
    a1 += 24;
    if (v1 != 3)
      continue;
    break;
  }
  return 1;
}

float64x2_t sub_23676DC34(uint64_t a1, double *a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t result;

  v3 = a2[1];
  v4 = a2[2];
  v5 = v3 * *(double *)(a3 + 40) + *a2 * *(double *)(a3 + 16) + v4 * *(double *)(a3 + 64);
  *(float64x2_t *)a1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 24), v3), *(float64x2_t *)a3, *a2), *(float64x2_t *)(a3 + 48), v4);
  *(double *)(a1 + 16) = v5;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v7 * *(double *)(a3 + 40) + v6 * *(double *)(a3 + 16) + v8 * *(double *)(a3 + 64);
  *(float64x2_t *)(a1 + 24) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 24), v7), *(float64x2_t *)a3, v6), *(float64x2_t *)(a3 + 48), v8);
  *(double *)(a1 + 40) = v9;
  v10 = a2[6];
  v11 = a2[7];
  v12 = a2[8];
  v13 = v11 * *(double *)(a3 + 40) + v10 * *(double *)(a3 + 16) + v12 * *(double *)(a3 + 64);
  v14 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 24), v11), *(float64x2_t *)a3, v10);
  result = *(float64x2_t *)(a3 + 48);
  *(float64x2_t *)(a1 + 48) = vmlaq_n_f64(v14, result, v12);
  *(double *)(a1 + 64) = v13;
  return result;
}

uint64_t sub_23676DCF8(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a1[7];
  v2 = a1[8];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = v4 * v2 - v5 * v3;
  v8 = a1[3];
  v9 = v5 * v6 - v8 * v2;
  v10 = v8 * v3 - v4 * v6;
  v11 = a1[1] * v9 + *a1 * v7 + a1[2] * v10;
  if (fabs(v11) < 0.0001)
    return 0;
  *a2 = v7 / v11;
  a2[1] = (a1[2] * a1[7] - a1[1] * a1[8]) / v11;
  a2[2] = (a1[1] * a1[5] - a1[2] * a1[4]) / v11;
  a2[3] = v9 / v11;
  a2[4] = (*a1 * a1[8] - a1[2] * a1[6]) / v11;
  a2[5] = (a1[2] * a1[3] - *a1 * a1[5]) / v11;
  a2[6] = v10 / v11;
  a2[7] = (a1[1] * a1[6] - *a1 * a1[7]) / v11;
  a2[8] = (*a1 * a1[4] - a1[1] * a1[3]) / v11;
  return 1;
}

uint64_t sub_23676DE00(double *a1, uint64_t a2, double *a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t result;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  _OWORD v14[4];
  uint64_t v15;

  v13 = 0.0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v5 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v5;
  v15 = *(_QWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v6;
  result = sub_23676DCF8((double *)v14, (double *)&v9);
  if ((_DWORD)result)
  {
    v8 = *((double *)&v10 + 1);
    *a1 = *((double *)&v9 + 1) * a3[1] + *(double *)&v9 * *a3 + *(double *)&v10 * a3[2];
    a1[1] = *(double *)&v11 * a3[1] + v8 * *a3 + *((double *)&v11 + 1) * a3[2];
    a1[2] = *((double *)&v12 + 1) * a3[1] + *(double *)&v12 * *a3 + v13 * a3[2];
    return 1;
  }
  return result;
}

uint64_t **sub_23676DEC0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;

  if (a2)
    v3 = a2;
  else
    v3 = 2;
  if (a1)
  {
    v4 = &qword_25642E910;
    v5 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == a1)
      {
        v5 = a1;
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)&unk_250800620;
  }
  v6 = (__int128 *)v5[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (uint64_t **)(*((uint64_t (**)(uint64_t *, uint64_t))v6 + 1))(a1, 40);
  v8 = v7;
  if (v7)
  {
    *v7 = a1;
    if (a1)
    {
      v9 = &qword_25642E910;
      v10 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v9 = (uint64_t *)*v9;
        if (!v9)
          break;
        if (v9 == a1)
        {
          v10 = a1;
          break;
        }
      }
    }
    else
    {
      v10 = (uint64_t *)&unk_250800620;
    }
    v11 = (__int128 *)v10[6];
    if (!v11)
      v11 = &xmmword_2542ABF08;
    v12 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v11 + 4))(a1, v3, 12);
    v8[2] = (uint64_t *)v12;
    if (v12)
    {
      *((_DWORD *)v8 + 2) = v3;
      *((_DWORD *)v8 + 3) = 0;
    }
    else
    {
      if (a1)
      {
        v13 = &qword_25642E910;
        v14 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v13 = (uint64_t *)*v13;
          if (!v13)
            break;
          if (v13 == a1)
          {
            v14 = a1;
            break;
          }
        }
      }
      else
      {
        v14 = (uint64_t *)&unk_250800620;
      }
      v15 = (__int128 *)v14[6];
      if (!v15)
        v15 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t **))v15 + 2))(a1, v8);
      return 0;
    }
  }
  return v8;
}

uint64_t sub_23676E010(uint64_t **a1, __int16 a2, unsigned __int8 a3, __int16 a4, unsigned __int8 a5, char *__s)
{
  char *v6;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 *v16;
  _DWORD *v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 *v26;

  v6 = __s;
  v12 = strlen(__s);
  if (!a1)
    return 0;
  v13 = v12;
  if (*a1)
  {
    v14 = &qword_25642E910;
    v15 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v14 = (uint64_t *)*v14;
      if (!v14)
        break;
      if (v14 == *a1)
      {
        v15 = *a1;
        break;
      }
    }
  }
  else
  {
    v15 = (uint64_t *)&unk_250800620;
  }
  v16 = (__int128 *)v15[6];
  if (!v16)
    v16 = &xmmword_2542ABF08;
  v17 = (_DWORD *)(*((uint64_t (**)(void))v16 + 4))();
  if (!v17)
    return 0;
  v18 = a3 | (unsigned __int16)(a2 << 8);
  v19 = a5 | (unsigned __int16)(a4 << 8);
  if (v13)
  {
    v20 = v13;
    v21 = v17;
    do
    {
      v22 = *v6++;
      *v21++ = v22;
      --v20;
    }
    while (v20);
  }
  v23 = sub_23676E170((uint64_t)a1, 4 * v13, v17, v18, v19);
  if (*a1)
  {
    v24 = &qword_25642E910;
    v25 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v24 = (uint64_t *)*v24;
      if (!v24)
        break;
      if (v24 == *a1)
      {
        v25 = *a1;
        break;
      }
    }
  }
  else
  {
    v25 = (uint64_t *)&unk_250800620;
  }
  v26 = (__int128 *)v25[6];
  if (!v26)
    v26 = &xmmword_2542ABF08;
  (*((void (**)(void))v26 + 2))();
  return v23;
}

uint64_t sub_23676E170(uint64_t a1, unsigned int a2, const void *a3, int a4, int a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;
  uint64_t result;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v26;

  v11 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v10 < v11)
  {
LABEL_13:
    if (v10)
    {
      v17 = 0;
      v18 = (unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2);
      while (*v18 != a5 || *(v18 - 1) != a4)
      {
        ++v17;
        v18 += 6;
        if (v10 == v17)
          goto LABEL_21;
      }
      if ((v17 & 0x80000000) == 0)
        return 0;
    }
LABEL_21:
    v20 = *(_DWORD *)(a1 + 24);
    v19 = *(_DWORD *)(a1 + 28);
    if (v20 - v19 < a2)
    {
      while (1)
      {
        v21 = v20;
        if (v20)
          v20 *= 2;
        else
          v20 = 256;
        if (v20 < v21)
          return 0;
        if (*(_QWORD *)a1)
        {
          v22 = &qword_25642E910;
          while (1)
          {
            v22 = (uint64_t *)*v22;
            if (!v22)
              break;
            if (v22 == *(uint64_t **)a1)
            {
              v23 = *(uint64_t **)a1;
              goto LABEL_32;
            }
          }
        }
        v23 = (uint64_t *)&unk_250800620;
LABEL_32:
        v24 = (__int128 *)v23[6];
        if (!v24)
          v24 = &xmmword_2542ABF08;
        result = (*((uint64_t (**)(void))v24 + 3))();
        if (!result)
          return result;
        *(_QWORD *)(a1 + 32) = result;
        *(_DWORD *)(a1 + 24) = v20;
        v19 = *(_DWORD *)(a1 + 28);
        if (v20 - v19 >= a2)
          goto LABEL_38;
      }
    }
    result = *(_QWORD *)(a1 + 32);
    if (result)
    {
LABEL_38:
      memmove((void *)(result + v19), a3, a2);
      *(_DWORD *)(a1 + 28) += a2;
      v25 = *(_DWORD *)(a1 + 12);
      v26 = *(_QWORD *)(a1 + 16) + 12 * v25;
      *(_DWORD *)(v26 + 4) = v19;
      *(_DWORD *)(v26 + 8) = a2;
      *(_WORD *)(v26 + 2) = a5;
      *(_WORD *)v26 = a4;
      *(_DWORD *)(a1 + 12) = v25 + 1;
      return 1;
    }
    return result;
  }
  if ((v11 & 0x80000000) != 0)
    return 0;
  v12 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v13 = &qword_25642E910;
    v14 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v13 == v12)
      {
        v14 = *(uint64_t **)a1;
        break;
      }
    }
  }
  else
  {
    v14 = (uint64_t *)&unk_250800620;
  }
  v15 = (__int128 *)v14[6];
  if (!v15)
    v15 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(void))v15 + 3))();
  if (result)
  {
    *(_QWORD *)(a1 + 16) = result;
    *(_DWORD *)(a1 + 8) = 2 * v11;
    v10 = *(_DWORD *)(a1 + 12);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_23676E390(uint64_t a1, char *a2)
{
  char *v2;
  int v3;

  if (!a2)
    return 0;
  v2 = a2 - 4;
  do
  {
    v3 = *((_DWORD *)v2 + 1);
    v2 += 4;
  }
  while (v3);
  return sub_23676E170(a1, ((_DWORD)v2 - (_DWORD)a2) & 0xFFFFFFFC, a2, 25966, 21843);
}

uint64_t **sub_23676E3C0(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t (**v9)(void);
  uint64_t *v10;
  size_t v11;
  const void *v12;

  if (!a1)
    return 0;
  v2 = sub_23676DEC0(*(uint64_t **)a1, *(_DWORD *)(a1 + 12));
  v3 = v2;
  if (v2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (*((_DWORD *)v2 + 2) >= v4)
    {
      v5 = v2[2];
      if (v5)
      {
        v6 = *(const void **)(a1 + 16);
        if (v6)
        {
          memmove(v5, v6, 12 * v4);
          *((_DWORD *)v3 + 3) = *(_DWORD *)(a1 + 12);
          if (*(_DWORD *)(a1 + 28))
          {
            if (*(_QWORD *)a1)
            {
              v7 = &qword_25642E910;
              v8 = (uint64_t *)&unk_250800620;
              while (1)
              {
                v7 = (uint64_t *)*v7;
                if (!v7)
                  break;
                if (v7 == *(uint64_t **)a1)
                {
                  v8 = *(uint64_t **)a1;
                  break;
                }
              }
            }
            else
            {
              v8 = (uint64_t *)&unk_250800620;
            }
            v9 = (uint64_t (**)(void))v8[6];
            if (!v9)
              v9 = (uint64_t (**)(void))&xmmword_2542ABF08;
            v10 = (uint64_t *)(*v9)();
            v3[4] = v10;
            if (v10)
            {
              v11 = *(unsigned int *)(a1 + 28);
              *((_DWORD *)v3 + 6) = v11;
              v12 = *(const void **)(a1 + 32);
              if (v12)
              {
                memmove(v10, v12, v11);
                *((_DWORD *)v3 + 7) = *(_DWORD *)(a1 + 28);
                return v3;
              }
            }
          }
          else
          {
            v3[4] = 0;
            *((_DWORD *)v3 + 6) = 0;
          }
        }
      }
    }
    sub_23676E4C8(v3);
    return 0;
  }
  return v3;
}

uint64_t **sub_23676E4C8(uint64_t **result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;

  if (result)
  {
    v1 = result;
    if (result[2])
    {
      v2 = *result;
      if (*v1)
      {
        v3 = &qword_25642E910;
        v4 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v3 = (uint64_t *)*v3;
          if (!v3)
            break;
          if (v3 == v2)
          {
            v4 = *v1;
            break;
          }
        }
      }
      else
      {
        v4 = (uint64_t *)&unk_250800620;
      }
      v5 = (__int128 *)v4[6];
      if (!v5)
        v5 = &xmmword_2542ABF08;
      (*((void (**)(void))v5 + 2))();
    }
    if (v1[4])
    {
      if (*v1)
      {
        v6 = &qword_25642E910;
        v7 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v6 = (uint64_t *)*v6;
          if (!v6)
            break;
          if (v6 == *v1)
          {
            v7 = *v1;
            break;
          }
        }
      }
      else
      {
        v7 = (uint64_t *)&unk_250800620;
      }
      v8 = (__int128 *)v7[6];
      if (!v8)
        v8 = &xmmword_2542ABF08;
      (*((void (**)(void))v8 + 2))();
    }
    if (*v1)
    {
      v9 = &qword_25642E910;
      v10 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v9 = (uint64_t *)*v9;
        if (!v9)
          break;
        if (v9 == *v1)
        {
          v10 = *v1;
          break;
        }
      }
    }
    else
    {
      v10 = (uint64_t *)&unk_250800620;
    }
    v11 = (__int128 *)v10[6];
    if (!v11)
      v11 = &xmmword_2542ABF08;
    return (uint64_t **)(*((uint64_t (**)(void))v11 + 2))();
  }
  return result;
}

int *sub_23676E5E8(int *result, __int16 a2, unsigned __int8 a3, unsigned __int16 *a4, _BYTE *a5, unsigned int a6)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;

  v13 = 0;
  if (result)
  {
    result = (int *)sub_23676E694((uint64_t)result, &v13, (unsigned __int16)(a3 | (unsigned __int16)(a2 << 8)), bswap32(*a4) >> 16);
    if (result)
    {
      LODWORD(v8) = v13 >> 2;
      if (a5)
      {
        if (a6)
        {
          if (v8 >= a6)
            v8 = a6 - 1;
          else
            v8 = v8;
          if ((_DWORD)v8)
          {
            v9 = a5;
            v10 = v8;
            do
            {
              v11 = *result++;
              *v9++ = v11;
              --v10;
            }
            while (v10);
            v12 = v8;
          }
          else
          {
            v12 = 0;
          }
          a5[v12] = 0;
          return (int *)(v8 + 1);
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return (int *)(v8 + 1);
      }
    }
  }
  return result;
}

uint64_t sub_23676E694(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;

  if (!*(_DWORD *)(a1 + 8))
    return 0;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (unsigned __int16 *)(v5 + 2);
    v8 = -1;
    while (1)
    {
      if (*(v7 - 1) == a3)
      {
        if (v8 == -1)
          v8 = v6;
        if (*v7 == a4)
          break;
      }
      ++v6;
      v7 += 6;
      if (v4 == v6)
      {
        if (v8 != -1)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v8 = 0;
LABEL_11:
    v6 = v8;
  }
  if (a2)
    *a2 = *(_DWORD *)(v5 + 12 * v6 + 8);
  return *(_QWORD *)(a1 + 32) + *(unsigned int *)(v5 + 12 * v6 + 4);
}

uint64_t sub_23676E728(uint64_t *a1, unsigned int a2, int a3, const char *a4, const char *a5)
{
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 *v17;

  if (a1)
  {
    v10 = &qword_25642E910;
    v11 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == a1)
      {
        v11 = a1;
        break;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)&unk_250800620;
  }
  v12 = (__int128 *)v11[6];
  if (!v12)
    v12 = &xmmword_2542ABF08;
  v13 = (*((uint64_t (**)(uint64_t *, uint64_t))v12 + 1))(a1, 96);
  v14 = v13;
  if (v13)
  {
    *(_DWORD *)v13 = 0;
    *(_QWORD *)(v13 + 80) = 0;
    *(_QWORD *)(v13 + 88) = a1;
    do
    {
      if (*(_DWORD *)(v14 + 4) >= a2)
      {
        strncpy((char *)(v14 + 12), a4, 0x20uLL);
        strncpy((char *)(v14 + 45), a5, 0x20uLL);
        *(_BYTE *)(v14 + 77) = 0;
        *(_BYTE *)(v14 + 44) = 0;
        *(_DWORD *)(v14 + 8) = a3;
        return v14;
      }
    }
    while (sub_23676E874(v14));
    if (a1)
    {
      v15 = &qword_25642E910;
      v16 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v15 = (uint64_t *)*v15;
        if (!v15)
          break;
        if (v15 == a1)
        {
          v16 = a1;
          break;
        }
      }
    }
    else
    {
      v16 = (uint64_t *)&unk_250800620;
    }
    v17 = (__int128 *)v16[6];
    if (!v17)
      v17 = &xmmword_2542ABF08;
    (*((void (**)(uint64_t *, uint64_t))v17 + 2))(a1, v14);
    return 0;
  }
  return v14;
}

uint64_t sub_23676E874(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t result;
  __int128 *v11;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2)
    v3 = 2 * v2;
  else
    v3 = 64;
  v4 = *(uint64_t **)(a1 + 88);
  if (v3 <= 0x19000)
  {
    if (v4)
    {
      v7 = &qword_25642E910;
      v8 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v7 = (uint64_t *)*v7;
        if (!v7)
          break;
        if (v7 == v4)
        {
          v8 = v4;
          break;
        }
      }
    }
    else
    {
      v8 = (uint64_t *)&unk_250800620;
    }
    v9 = (__int128 *)v8[6];
    if (!v9)
      v9 = &xmmword_2542ABF08;
    result = (*((uint64_t (**)(void))v9 + 3))();
    if (result)
    {
      *(_QWORD *)(a1 + 80) = result;
      *(_DWORD *)(a1 + 4) = v3;
      return 1;
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 80))
    {
      if (v4)
      {
        v5 = &qword_25642E910;
        v6 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v5 = (uint64_t *)*v5;
          if (!v5)
            break;
          if (v5 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      else
      {
        v6 = (uint64_t *)&unk_250800620;
      }
      v11 = (__int128 *)v6[6];
      if (!v11)
        v11 = &xmmword_2542ABF08;
      (*((void (**)(void))v11 + 2))();
    }
    result = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  return result;
}

uint64_t sub_23676E97C(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  __int128 *v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  __int128 *v9;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 80))
    {
      v2 = *(uint64_t **)(result + 88);
      if (v2)
      {
        v3 = &qword_25642E910;
        v4 = &unk_250800620;
        while (1)
        {
          v3 = (uint64_t *)*v3;
          if (!v3)
            break;
          if (v3 == v2)
          {
            v4 = *(void **)(v1 + 88);
            break;
          }
        }
      }
      else
      {
        v4 = &unk_250800620;
      }
      v5 = (__int128 *)*((_QWORD *)v4 + 6);
      if (!v5)
        v5 = &xmmword_2542ABF08;
      (*((void (**)(void))v5 + 2))();
    }
    v6 = *(uint64_t **)(v1 + 88);
    if (v6)
    {
      v7 = &qword_25642E910;
      v8 = &unk_250800620;
      while (1)
      {
        v7 = (uint64_t *)*v7;
        if (!v7)
          break;
        if (v7 == v6)
        {
          v8 = *(void **)(v1 + 88);
          break;
        }
      }
    }
    else
    {
      v8 = &unk_250800620;
    }
    v9 = (__int128 *)*((_QWORD *)v8 + 6);
    if (!v9)
      v9 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v9 + 2))();
  }
  return result;
}

uint64_t sub_23676EA48(unsigned int *a1)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (!a1)
    return 0;
  v2 = (__int128 *)(a1 + 3);
  v3 = (__int128 *)((char *)a1 + 45);
  v4 = sub_23676E728(*((uint64_t **)a1 + 11), *a1, a1[2], (const char *)a1 + 12, (const char *)a1 + 45);
  if (v4)
  {
    while (*(_DWORD *)(v4 + 4) < a1[1])
    {
      if (!sub_23676E874(v4))
        return 0;
    }
    v5 = *v2;
    v6 = *(_OWORD *)(a1 + 7);
    *(_BYTE *)(v4 + 44) = *((_BYTE *)a1 + 44);
    *(_OWORD *)(v4 + 28) = v6;
    *(_OWORD *)(v4 + 12) = v5;
    v7 = *v3;
    v8 = *(_OWORD *)((char *)a1 + 61);
    *(_BYTE *)(v4 + 77) = *((_BYTE *)a1 + 77);
    *(_OWORD *)(v4 + 61) = v8;
    *(_OWORD *)(v4 + 45) = v7;
    *(_DWORD *)(v4 + 8) = a1[2];
    memmove(*(void **)(v4 + 80), *((const void **)a1 + 10), 294 * *a1);
    *(_DWORD *)v4 = *a1;
  }
  return v4;
}

uint64_t sub_23676EB10(uint64_t result, char *__src, uint64_t a3, __int16 *a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int16 *v12;
  __int16 v13;
  uint64_t i;
  __int16 v15;
  char *v16;

  if (result)
  {
    v7 = (unsigned int *)result;
    if ((*(_DWORD *)result + 1) <= *(_DWORD *)(result + 4)
      || (result = sub_23676E874(result), (_DWORD)result))
    {
      v8 = v7[2];
      if ((_DWORD)v8)
      {
        v9 = *((_QWORD *)v7 + 10);
        v10 = *v7;
        v11 = 294 * *v7 + 262;
        v12 = a4;
        do
        {
          if (a4)
            v13 = *v12;
          else
            v13 = 0;
          *(_WORD *)(v9 + v11) = v13;
          v11 += 2;
          ++v12;
          --v8;
        }
        while (v8);
      }
      else
      {
        v9 = *((_QWORD *)v7 + 10);
        v10 = *v7;
      }
      for (i = 0; i != 6; i += 2)
      {
        if (a3)
          v15 = *(_WORD *)(a3 + i);
        else
          v15 = 0;
        *(_WORD *)(v9 + 294 * v10 + 256 + i) = v15;
      }
      v16 = (char *)(v9 + 294 * v10);
      if (__src)
      {
        strncpy(v16, __src, 0xFFuLL);
        *(_BYTE *)(*((_QWORD *)v7 + 10) + 294 * *v7 + 255) = 0;
      }
      else
      {
        *v16 = 0;
      }
      ++*v7;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23676EC24(uint64_t result, unsigned int a2, char *__dst, uint64_t a4, void *a5)
{
  uint64_t v6;
  uint64_t v9;
  int v10;

  if (result)
  {
    v6 = result;
    if (*(_DWORD *)result <= a2)
    {
      return 0;
    }
    else
    {
      if (__dst)
        strcpy(__dst, (const char *)(*(_QWORD *)(result + 80) + 294 * a2));
      if (a4)
      {
        v9 = *(_QWORD *)(v6 + 80) + 294 * a2;
        v10 = *(_DWORD *)(v9 + 256);
        *(_WORD *)(a4 + 4) = *(_WORD *)(v9 + 260);
        *(_DWORD *)a4 = v10;
      }
      if (a5)
        memmove(a5, (const void *)(*(_QWORD *)(v6 + 80) + 294 * a2 + 262), 2 * *(unsigned int *)(v6 + 8));
      return 1;
    }
  }
  return result;
}

int32x2_t sub_23676ECCC(uint64_t a1, int a2)
{
  uint64_t *v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  int32x2_t *v9;
  int32x2_t result;

  v2 = *(uint64_t **)(a1 + 88);
  if (a2)
  {
    v3 = 3;
    v4 = sub_23676EDA8;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = sub_23676EEB8;
  }
  v5 = sub_23676EA48((unsigned int *)a1);
  if (v2)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == v2)
      {
        v7 = v2;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (__int128 *)v7[6];
  if (!v8)
    v8 = &xmmword_2542ABF08;
  v9 = (int32x2_t *)(*((uint64_t (**)(uint64_t *, uint64_t))v8 + 1))(v2, 64);
  if (v9)
  {
    *v9 = (int32x2_t)v2;
    result = vdup_n_s32(0x6E636C20u);
    v9[1] = result;
    v9[2].i32[0] = 1;
    v9[2].i32[1] = v3;
    v9[3] = (int32x2_t)v4;
    v9[4] = (int32x2_t)sub_23676EFC4;
    v9[5] = (int32x2_t)sub_23676EFCC;
    v9[6] = (int32x2_t)v5;
  }
  return result;
}

float *sub_23676EDA8(float *result, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  double v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  uint64x2_t v13;
  float64x2_t v14;
  float32x2_t v15;
  float v16;

  v9 = *(_QWORD *)(a3 + 48);
  v10 = *result * 65535.0 + 0.5;
  if (v10 <= 0.0)
  {
    v11 = 0;
  }
  else if (v10 >= 65535.0)
  {
    v11 = -1;
  }
  else
  {
    v11 = (COERCE_UNSIGNED_INT64(v10 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  if (*(_DWORD *)v9 <= v11)
  {
    result = (float *)sub_2367644B8(*(uint64_t **)(v9 + 88), 2, "Color %d out of range", a4, a5, a6, a7, a8, v11);
    v15 = 0;
    v16 = 0.0;
  }
  else
  {
    v12 = (unsigned __int16 *)(*(_QWORD *)(v9 + 80) + 294 * v11);
    v13.i64[0] = v12[128];
    v13.i64[1] = v12[129];
    v14 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    v15 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_u64(v13), v14));
    LOWORD(v14.f64[0]) = v12[130];
    v16 = (double)*(unint64_t *)&v14.f64[0] / 65535.0;
  }
  *a2 = v15;
  a2[1].f32[0] = v16;
  return result;
}

void sub_23676EEB8(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  double v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  float v16;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 + 48);
  v10 = *a1 * 65535.0 + 0.5;
  if (v10 <= 0.0)
  {
    v11 = 0;
  }
  else if (v10 >= 65535.0)
  {
    v11 = -1;
  }
  else
  {
    v11 = (COERCE_UNSIGNED_INT64(v10 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  v12 = v11;
  if (*(_DWORD *)v9 <= v11)
  {
    sub_2367644B8(*(uint64_t **)(v9 + 88), 2, "Color %d out of range", a4, a5, a6, a7, a8, v11);
    v17 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v17)
      bzero(a2, 4 * v17);
  }
  else
  {
    v13 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v13)
    {
      v14 = (unsigned __int16 *)(*(_QWORD *)(v9 + 80) + 294 * v12 + 262);
      do
      {
        v15 = *v14++;
        v16 = (double)v15 / 65535.0;
        *a2++ = v16;
        --v13;
      }
      while (v13);
    }
  }
}

uint64_t sub_23676EFC4(uint64_t a1)
{
  return sub_23676EA48(*(unsigned int **)(a1 + 48));
}

uint64_t sub_23676EFCC(uint64_t a1)
{
  return sub_23676E97C(*(_QWORD *)(a1 + 48));
}

uint64_t sub_23676EFD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;

  if ((a2 - 256) < 0xFFFFFF01)
    return 0;
  if (a1)
  {
    v5 = &qword_25642E910;
    v6 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v5 = (uint64_t *)*v5;
      if (!v5)
        break;
      if (v5 == a1)
      {
        v6 = a1;
        break;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)&unk_250800620;
  }
  v7 = (__int128 *)v6[6];
  if (!v7)
    v7 = &xmmword_2542ABF08;
  v8 = (*((uint64_t (**)(uint64_t *, uint64_t))v7 + 1))(a1, 24);
  v2 = v8;
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = a1;
    if (a1)
    {
      v9 = &qword_25642E910;
      v10 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v9 = (uint64_t *)*v9;
        if (!v9)
          break;
        if (v9 == a1)
        {
          v10 = a1;
          break;
        }
      }
    }
    else
    {
      v10 = (uint64_t *)&unk_250800620;
    }
    v11 = (__int128 *)v10[6];
    if (!v11)
      v11 = &xmmword_2542ABF08;
    v12 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v11 + 4))(a1, a2, 64);
    *(_QWORD *)(v2 + 16) = v12;
    *(_DWORD *)v2 = a2;
    if (!v12)
    {
      if (a1)
      {
        v16 = &qword_25642E910;
        v17 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v16 = (uint64_t *)*v16;
          if (!v16)
            break;
          if (v16 == a1)
          {
            v17 = a1;
            break;
          }
        }
      }
      else
      {
        v17 = (uint64_t *)&unk_250800620;
      }
      v18 = (__int128 *)v17[6];
      if (!v18)
        v18 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v18 + 2))(a1, v2);
      return 0;
    }
    v13 = a2;
    v14 = (_QWORD *)(v12 + 40);
    do
    {
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v14 += 8;
      --v13;
    }
    while (v13);
  }
  return v2;
}

uint64_t sub_23676F148(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  __int128 *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  __int128 *v15;

  if (*a1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)a1 + 2);
      v5 = *(uint64_t ***)(v4 + v2 + 40);
      if (v5)
      {
        sub_23676E4C8(v5);
        v4 = *((_QWORD *)a1 + 2);
      }
      v6 = *(uint64_t ***)(v4 + v2 + 48);
      if (v6)
      {
        sub_23676E4C8(v6);
        v4 = *((_QWORD *)a1 + 2);
      }
      v7 = *(uint64_t ***)(v4 + v2 + 56);
      if (v7)
        sub_23676E4C8(v7);
      ++v3;
      v2 += 64;
    }
    while (v3 < *a1);
  }
  if (*((_QWORD *)a1 + 2))
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    if (v8)
    {
      v9 = &qword_25642E910;
      v10 = &unk_250800620;
      while (1)
      {
        v9 = (uint64_t *)*v9;
        if (!v9)
          break;
        if (v9 == v8)
        {
          v10 = (void *)*((_QWORD *)a1 + 1);
          break;
        }
      }
    }
    else
    {
      v10 = &unk_250800620;
    }
    v11 = (__int128 *)*((_QWORD *)v10 + 6);
    if (!v11)
      v11 = &xmmword_2542ABF08;
    (*((void (**)(void))v11 + 2))();
  }
  v12 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (v12)
  {
    v13 = &qword_25642E910;
    v14 = &unk_250800620;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v13 == v12)
      {
        v14 = (void *)*((_QWORD *)a1 + 1);
        break;
      }
    }
  }
  else
  {
    v14 = &unk_250800620;
  }
  v15 = (__int128 *)*((_QWORD *)v14 + 6);
  if (!v15)
    v15 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v15 + 2))();
}

uint64_t sub_23676F274(unsigned int *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t (**v5)(void);
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;

  if (!a1)
    return 0;
  v2 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (v2)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == v2)
      {
        v4 = v2;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = (uint64_t (**)(void))v4[6];
  if (!v5)
    v5 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v6 = (*v5)();
  if (v6)
  {
    v7 = (uint64_t *)*((_QWORD *)a1 + 1);
    if (v7)
    {
      v8 = &qword_25642E910;
      v9 = &unk_250800620;
      while (1)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          break;
        if (v8 == v7)
        {
          v9 = (void *)*((_QWORD *)a1 + 1);
          break;
        }
      }
    }
    else
    {
      v9 = &unk_250800620;
    }
    v10 = (__int128 *)*((_QWORD *)v9 + 6);
    if (!v10)
      v10 = &xmmword_2542ABF08;
    v11 = (*((uint64_t (**)(void))v10 + 4))();
    *(_QWORD *)(v6 + 16) = v11;
    if (v11)
    {
      *(_QWORD *)(v6 + 8) = *((_QWORD *)a1 + 1);
      *(_DWORD *)v6 = *a1;
      if (*a1)
      {
        v12 = 0;
        v13 = 56;
        do
        {
          *(_QWORD *)(v11 + v13 - 48) = *(_QWORD *)(*((_QWORD *)a1 + 2) + v13 - 48);
          v14 = *((_QWORD *)a1 + 2) + v13;
          v15 = *(_QWORD *)(v6 + 16) + v13;
          *(_QWORD *)(v15 - 56) = *(_QWORD *)(v14 - 56);
          *(_OWORD *)(v15 - 36) = *(_OWORD *)(v14 - 36);
          v16 = *((_QWORD *)a1 + 2) + v13;
          *(_DWORD *)(*(_QWORD *)(v6 + 16) + v13 - 40) = *(_DWORD *)(v16 - 40);
          *(_QWORD *)(*(_QWORD *)(v6 + 16) + v13 - 16) = sub_23676E3C0(*(_QWORD *)(v16 - 16));
          *(_QWORD *)(*(_QWORD *)(v6 + 16) + v13 - 8) = sub_23676E3C0(*(_QWORD *)(*((_QWORD *)a1 + 2) + v13 - 8));
          v17 = sub_23676E3C0(*(_QWORD *)(*((_QWORD *)a1 + 2) + v13));
          v11 = *(_QWORD *)(v6 + 16);
          *(_QWORD *)(v11 + v13) = v17;
          ++v12;
          v13 += 64;
        }
        while (v12 < *a1);
      }
      return v6;
    }
    sub_23676F148((unsigned int *)v6);
    return 0;
  }
  return v6;
}

uint64_t sub_23676F434(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  __int128 *v20;

  v2 = *a1;
  while (v2)
  {
    v3 = (uint64_t **)v2[1];
    if (v3)
      sub_23676E4C8(v3);
    v4 = (uint64_t **)v2[2];
    if (v4)
      sub_23676E4C8(v4);
    if (v2[3])
    {
      v5 = a1[1];
      if (v5)
      {
        v6 = &qword_25642E910;
        while (1)
        {
          v6 = (uint64_t *)*v6;
          if (!v6)
            break;
          if (v6 == v5)
          {
            v7 = a1[1];
            goto LABEL_13;
          }
        }
      }
      v7 = &unk_250800620;
LABEL_13:
      v8 = (__int128 *)v7[6];
      if (!v8)
        v8 = &xmmword_2542ABF08;
      (*((void (**)(void))v8 + 2))();
    }
    if (v2[4])
    {
      v9 = a1[1];
      if (v9)
      {
        v10 = &qword_25642E910;
        while (1)
        {
          v10 = (uint64_t *)*v10;
          if (!v10)
            break;
          if (v10 == v9)
          {
            v11 = a1[1];
            goto LABEL_23;
          }
        }
      }
      v11 = &unk_250800620;
LABEL_23:
      v12 = (__int128 *)v11[6];
      if (!v12)
        v12 = &xmmword_2542ABF08;
      (*((void (**)(void))v12 + 2))();
    }
    v2 = (_QWORD *)*v2;
    v13 = a1[1];
    if (v13)
    {
      v14 = &qword_25642E910;
      while (1)
      {
        v14 = (uint64_t *)*v14;
        if (!v14)
          break;
        if (v14 == v13)
        {
          v15 = a1[1];
          goto LABEL_32;
        }
      }
    }
    v15 = &unk_250800620;
LABEL_32:
    v16 = (__int128 *)v15[6];
    if (!v16)
      v16 = &xmmword_2542ABF08;
    (*((void (**)(void))v16 + 2))();
  }
  v17 = a1[1];
  if (v17)
  {
    v18 = &qword_25642E910;
    v19 = &unk_250800620;
    while (1)
    {
      v18 = (uint64_t *)*v18;
      if (!v18)
        break;
      if (v18 == v17)
      {
        v19 = a1[1];
        break;
      }
    }
  }
  else
  {
    v19 = &unk_250800620;
  }
  v20 = (__int128 *)v19[6];
  if (!v20)
    v20 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v20 + 2))();
}

uint64_t sub_23676F5B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 *v28;

  v10 = (uint64_t *)a1[1];
  if (v10)
  {
    v11 = &qword_25642E910;
    v12 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v11 = (uint64_t *)*v11;
      if (!v11)
        break;
      if (v11 == v10)
      {
        v12 = v10;
        break;
      }
    }
  }
  else
  {
    v12 = (uint64_t *)&unk_250800620;
  }
  v13 = (__int128 *)v12[6];
  if (!v13)
    v13 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(void))v13 + 1))();
  if (result)
  {
    v15 = (_QWORD *)result;
    *(_QWORD *)(result + 8) = sub_23676E3C0(a4);
    v15[2] = sub_23676E3C0(a5);
    v16 = (uint64_t *)a1[1];
    if (a2)
    {
      v17 = a2 - 4;
      do
      {
        v18 = *(_DWORD *)(v17 + 4);
        v17 += 4;
      }
      while (v18);
      if (v16)
      {
        v19 = &qword_25642E910;
        v20 = &unk_250800620;
        while (1)
        {
          v19 = (uint64_t *)*v19;
          if (!v19)
            break;
          if (v19 == v16)
          {
            v20 = (void *)a1[1];
            break;
          }
        }
      }
      else
      {
        v20 = &unk_250800620;
      }
      v22 = (__int128 *)*((_QWORD *)v20 + 6);
      if (!v22)
        v22 = &xmmword_2542ABF08;
      v21 = (*((uint64_t (**)(void))v22 + 5))();
      v16 = (uint64_t *)a1[1];
    }
    else
    {
      v21 = 0;
    }
    v15[3] = v21;
    if (a3)
    {
      v23 = a3 - 4;
      do
      {
        v24 = *(_DWORD *)(v23 + 4);
        v23 += 4;
      }
      while (v24);
      if (v16)
      {
        v25 = &qword_25642E910;
        v26 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v25 = (uint64_t *)*v25;
          if (!v25)
            break;
          if (v25 == v16)
          {
            v26 = v16;
            break;
          }
        }
      }
      else
      {
        v26 = (uint64_t *)&unk_250800620;
      }
      v28 = (__int128 *)v26[6];
      if (!v28)
        v28 = &xmmword_2542ABF08;
      v27 = (*((uint64_t (**)(void))v28 + 5))();
    }
    else
    {
      v27 = 0;
    }
    v15[4] = v27;
    *v15 = *a1;
    *a1 = v15;
    return 1;
  }
  return result;
}

uint64_t sub_23676F778(uint64_t a1)
{
  int v2;
  uint64_t **v3;
  int v4;
  uint64_t ***v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t **v11;
  int v12;
  int v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t ***v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  int32x2_t v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t *v25;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[10];

  v2 = 0;
  do
  {
    v3 = *(uint64_t ***)a1;
    v27 = v2;
    v4 = 0;
    if (*(_QWORD *)a1)
    {
      v5 = (uint64_t ***)a1;
      do
      {
        if (*((_DWORD *)v3 + 3) == 1768189472)
        {
          *v5 = (uint64_t **)v3[7];
          sub_23676C0A0(v3);
          v4 = 1;
        }
        else
        {
          v5 = (uint64_t ***)(v3 + 7);
        }
        v3 = *v5;
      }
      while (*v5);
    }
    v6 = sub_236772B48((uint64_t ***)a1, 1815246880, 2016570400);
    v7 = sub_236772B48((uint64_t ***)a1, 2016570400, 1815246880);
    v8 = sub_236772B48((uint64_t ***)a1, 874525216, 840971296);
    v9 = sub_236772B48((uint64_t ***)a1, 840971296, 874525216);
    v29 = sub_236772B48((uint64_t ***)a1, 1681026080, 1815241760);
    v10 = sub_236772B48((uint64_t ***)a1, 1681029152, 2016568352);
    v11 = *(uint64_t ***)a1;
    v31 = v8;
    v32 = v7;
    v30 = v9;
    v28 = v10;
    v12 = v6;
    if (*(_QWORD *)a1)
    {
      v13 = 0;
      v14 = (uint64_t ***)a1;
      do
      {
        v16 = (uint64_t ***)(v11 + 7);
        v15 = (uint64_t **)v11[7];
        if (!v15)
          break;
        if (*((_DWORD *)v11 + 3) == 1835103334 && *((_DWORD *)v15 + 3) == 1835103334)
        {
          v17 = v11[6];
          v18 = v15[6];
          v34 = 0;
          memset(v33, 0, sizeof(v33));
          if (v17[1]
            || v18[1]
            || *((_DWORD *)*v14 + 4) != 3
            || *((_DWORD *)*v14 + 5) != 3
            || *((_DWORD *)*v16 + 4) != 3
            || *((_DWORD *)*v16 + 5) != 3)
          {
            goto LABEL_31;
          }
          sub_23676DC34((uint64_t)v33, (double *)*v18, *v17);
          v19 = *v16;
          v20 = (int32x2_t)(*v16)[7];
          *v16 = (uint64_t **)v20;
          sub_23676C0A0(v19);
          v21 = *v14;
          *v14 = (uint64_t **)(*v14)[7];
          sub_23676C0A0(v21);
          v22 = 0;
          v23 = 0;
          memset(&v35[1], 0, 24);
          v35[0] = 0x3FF0000000000000;
          v35[4] = 0x3FF0000000000000;
          memset(&v35[5], 0, 24);
          v35[8] = 0x3FF0000000000000;
LABEL_20:
          v24 = 0;
          while (vabdd_f64(*(double *)&v35[v22 + v24], *(double *)((char *)v33 + v22 * 8 + v24 * 8)) < 0.00000999999975)
          {
            if (++v24 == 3)
            {
              ++v23;
              v22 += 3;
              if (v23 != 3)
                goto LABEL_20;
              goto LABEL_28;
            }
          }
          v25 = sub_23676C120(*(uint64_t **)(a1 + 56), 3, 3u, (uint64_t *)v33, 0);
          if (!v25)
            goto LABEL_31;
          v25[7] = v20;
          *v14 = (uint64_t **)v25;
LABEL_28:
          v15 = *v14;
          v13 = 1;
        }
        else
        {
          v14 = (uint64_t ***)(v11 + 7);
        }
        v11 = v15;
      }
      while (v15);
    }
    else
    {
LABEL_31:
      v13 = 0;
    }
    v2 = 1;
  }
  while (v12 | v4 | v32 | v31 | v30 | v29 | v28 | v13);
  return v27;
}

uint64_t sub_23676FA9C(uint64_t *a1, int a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  int32x2_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t ***v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  int v50;
  _OWORD v51[2];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if ((*a3 & 0x400000) != 0 || (*a4 & 0x400000) != 0)
    return 0;
  v8 = (HIWORD(*a3) & 0x1F) - 1;
  v9 = v8 > 0x1D ? 0 : *(_DWORD *)&aYargBgryargBgr[4 * v8];
  v10 = (HIWORD(*a4) & 0x1F) - 1;
  if (v10 > 0x1D || !v9)
    return 0;
  v11 = *(_DWORD *)&aYargBgryargBgr[4 * v10];
  v12 = sub_236775FC8(v9, *a5);
  v13 = (_QWORD *)*a1;
  v14 = *(_QWORD *)*a1;
  if (!v14)
    goto LABEL_12;
  v15 = v12;
  v16 = 0;
  v17 = *(_QWORD *)*a1;
  do
  {
    ++v16;
    v17 = *(_QWORD *)(v17 + 56);
  }
  while (v17);
  if (!v16)
LABEL_12:
    v15 = 2;
  if (v14)
  {
    while (*(_DWORD *)(v14 + 8) != 1852009504)
    {
      v14 = *(_QWORD *)(v14 + 56);
      if (!v14)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  result = sub_23676D59C((uint64_t *)v13[7], *((_DWORD *)v13 + 2), *((_DWORD *)v13 + 3));
  if (!result)
    return result;
  v22 = result;
  if ((*(_BYTE *)a5 & 0x10) == 0)
  {
LABEL_21:
    v24 = 0;
    v23 = 0;
    goto LABEL_22;
  }
  v23 = *v13;
  if (*v13)
  {
    if (*(_DWORD *)(v23 + 8) == 1668707188 && !sub_236772490(*v13))
    {
      v36 = sub_23676D43C(v23);
      if (!v36
        || (v23 = (uint64_t)v36,
            v36[7] = *(uint64_t **)v22,
            *(_QWORD *)v22 = v36,
            !sub_23676D8DC((uint64_t *)v22)))
      {
LABEL_56:
        sub_23676D934((_QWORD *)v22);
        return 0;
      }
      v24 = *v13;
      if (*v13)
      {
        *v13 = *(_QWORD *)(v24 + 56);
        *(_QWORD *)(v24 + 56) = 0;
        sub_23676D8DC(v13);
      }
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v24 = 0;
LABEL_22:
  v25 = (uint64_t *)v13[7];
  v26 = *((_DWORD *)v13 + 2);
  v27 = *((unsigned int *)v13 + 3);
  v51[0] = vdupq_n_s32(v15);
  v51[1] = v51[0];
  v28 = sub_23676C698(v25, (int *)v51, v26, v27, 0, v19, v20, v21);
  if (!v28)
    goto LABEL_47;
  v29 = (uint64_t)v28;
  v30 = *(uint64_t **)v22;
  if (*(_QWORD *)v22)
  {
    do
    {
      v31 = v30;
      v30 = (uint64_t *)v30[7];
    }
    while (v30);
    v31[7] = (uint64_t)v28;
    v28[7] = 0;
  }
  else
  {
    *(_QWORD *)v22 = v28;
  }
  if (!sub_23676D8DC((uint64_t *)v22))
    goto LABEL_47;
  v49 = v23;
  v50 = v11;
  if ((*(_BYTE *)a5 & 1) == 0)
  {
LABEL_34:
    v35 = 0;
    v34 = 0;
    goto LABEL_60;
  }
  v32 = 0;
  v33 = (uint64_t ***)v13;
  do
  {
    v34 = v32;
    v32 = *v33;
    v33 = (uint64_t ***)(*v33 + 7);
  }
  while (v32);
  if (!v34)
    goto LABEL_59;
  if (*((_DWORD *)v34 + 2) != 1668707188 || sub_236772490((uint64_t)v34))
    goto LABEL_34;
  v34 = sub_23676D43C((uint64_t)v34);
  if (!sub_23676DB6C((uint64_t *)v22, 1, (uint64_t)v34))
  {
LABEL_47:
    v35 = 0;
LABEL_48:
    if (v24)
    {
      *(_QWORD *)(v24 + 56) = *v13;
      *v13 = v24;
      sub_23676D8DC(v13);
    }
    if (v35)
    {
      v41 = *v13;
      if (*v13)
      {
        do
        {
          v42 = v41;
          v41 = *(_QWORD *)(v41 + 56);
        }
        while (v41);
        *(_QWORD *)(v42 + 56) = v35;
        *(_QWORD *)(v35 + 56) = 0;
      }
      else
      {
        *v13 = v35;
      }
      sub_23676D8DC(v13);
    }
    goto LABEL_56;
  }
  v37 = *v13;
  if (!*v13)
  {
LABEL_59:
    v35 = 0;
    goto LABEL_60;
  }
  v38 = 0;
  do
  {
    v35 = v37;
    v39 = v38;
    v37 = *(_QWORD *)(v37 + 56);
    v38 = v35;
  }
  while (v37);
  v40 = (_QWORD *)(v39 + 56);
  if (!v39)
    v40 = v13;
  *v40 = 0;
  sub_23676D8DC(v13);
LABEL_60:
  if (!sub_23676CE98(v29, (uint64_t (*)(_QWORD, _QWORD))sub_236770D4C, (uint64_t)v13))
    goto LABEL_48;
  if (v24)
    sub_23676C0A0((uint64_t **)v24);
  if (v35)
    sub_23676C0A0((uint64_t **)v35);
  sub_23676D934(v13);
  if (v49)
    v43 = *(uint64_t ***)(*(_QWORD *)(v49 + 48) + 8);
  else
    v43 = 0;
  v44 = *(_QWORD *)(v29 + 48);
  if (v34)
    v45 = v34[6][1];
  else
    v45 = 0;
  if ((unint64_t)v43 | v45)
  {
    v46 = sub_2367713A4(*(uint64_t **)(v22 + 56), *(_QWORD *)(v44 + 8), *(_DWORD *)(v22 + 8), v43, *(unsigned int *)(v22 + 12), v45);
    *(_QWORD *)(v22 + 40) = sub_2367716AC;
    *(_QWORD *)(v22 + 48) = sub_2367717E4;
    v47 = sub_2367715B4;
  }
  else
  {
    v46 = *(_QWORD *)(v44 + 8);
    v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 128);
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
  }
  *(_QWORD *)(v22 + 16) = v46;
  *(_QWORD *)(v22 + 24) = v47;
  v48 = *a5;
  if (a2 == 3)
  {
    v48 |= 4u;
    *a5 = v48;
  }
  if ((v48 & 4) == 0)
    sub_23677192C(v22, v9, v50);
  *a1 = v22;
  return 1;
}

__int16 *sub_23676FEA0(__int16 *result, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3)
  {
    do
    {
      v4 = *result++;
      *a2++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_23676FEBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t j;
  float v25;
  uint64_t v26;
  float *v27;
  float *v28;
  uint64_t *v29;
  uint64_t v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  int32x2_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  unint64_t v40;
  unint64_t i;
  uint64_t ***v42;
  uint64_t *v43;
  uint64_t *v44;
  void *v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *(*v54)(unsigned __int16 *, _WORD *, uint64_t);
  _BYTE v55[64];
  _BYTE v56[64];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 2) & 0x40) != 0 || (*(_BYTE *)(a4 + 2) & 0x40) != 0)
    return 0;
  v8 = (_QWORD *)*a1;
  v9 = *(_QWORD *)*a1;
  if (v9)
  {
    while (*(_DWORD *)(v9 + 8) == 1668707188)
    {
      v9 = *(_QWORD *)(v9 + 56);
      if (!v9)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  result = sub_23676D59C((uint64_t *)v8[7], *((_DWORD *)v8 + 2), *((_DWORD *)v8 + 3));
  if (!result)
    return result;
  v11 = result;
  v12 = (uint64_t *)v8[7];
  if (v12)
  {
    v13 = &qword_25642E910;
    v14 = &unk_250800620;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v13 == v12)
      {
        v14 = (void *)v8[7];
        break;
      }
    }
  }
  else
  {
    v14 = &unk_250800620;
  }
  v15 = (__int128 *)*((_QWORD *)v14 + 6);
  if (!v15)
    v15 = &xmmword_2542ABF08;
  v16 = (*((uint64_t (**)(void))v15 + 4))();
  if (v16)
  {
    v20 = v16;
    if (*((_DWORD *)v8 + 2))
    {
      v21 = 0;
      while (1)
      {
        v22 = sub_236764590((uint64_t *)v8[7], 4096, 0, 0, 0, v17, v18, v19);
        *(_QWORD *)(v20 + 8 * v21) = v22;
        if (!v22)
          break;
        ++v21;
        v23 = *((unsigned int *)v8 + 2);
        if (v21 >= v23)
          goto LABEL_22;
      }
LABEL_44:
      v40 = *((unsigned int *)v8 + 2);
      if ((_DWORD)v40)
      {
        for (i = 0; i < v40; ++i)
        {
          v42 = *(uint64_t ****)(v20 + 8 * i);
          if (v42)
          {
            sub_236765578(v42);
            v40 = *((unsigned int *)v8 + 2);
          }
        }
      }
      v43 = (uint64_t *)v8[7];
      if (v43)
      {
        v44 = &qword_25642E910;
        v45 = &unk_250800620;
        while (1)
        {
          v44 = (uint64_t *)*v44;
          if (!v44)
            break;
          if (v44 == v43)
          {
            v45 = (void *)v8[7];
            break;
          }
        }
      }
      else
      {
        v45 = &unk_250800620;
      }
      v46 = (__int128 *)*((_QWORD *)v45 + 6);
      if (!v46)
        v46 = &xmmword_2542ABF08;
      (*((void (**)(void))v46 + 2))();
      goto LABEL_58;
    }
    LODWORD(v23) = 0;
LABEL_22:
    for (j = 0; j != 4096; ++j)
    {
      if ((_DWORD)v23)
      {
        v26 = v23;
        v27 = (float *)v56;
        do
        {
          v25 = (double)j / 4095.0;
          *v27++ = v25;
          --v26;
        }
        while (v26);
      }
      ((void (*)(_BYTE *, _BYTE *, _QWORD *))v8[4])(v56, v55, v8);
      v23 = *((unsigned int *)v8 + 2);
      if ((_DWORD)v23)
      {
        v28 = (float *)v55;
        v29 = (uint64_t *)v20;
        v30 = *((unsigned int *)v8 + 2);
        do
        {
          v31 = *v28 * 65535.0 + 0.5;
          if (v31 <= 0.0)
          {
            v32 = 0;
          }
          else if (v31 >= 65535.0)
          {
            v32 = -1;
          }
          else
          {
            v32 = (COERCE_UNSIGNED_INT64(v31 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
          }
          v33 = *v29++;
          *(_WORD *)(*(_QWORD *)(v33 + 48) + 2 * j) = v32;
          ++v28;
          --v30;
        }
        while (v30);
      }
    }
    v34 = sub_23676BAB0((uint64_t *)v8[7], v23, v20);
    if (!v34)
      goto LABEL_44;
    v35 = (uint64_t)v34;
    if (*((_DWORD *)v8 + 2))
    {
      v36 = 0;
      do
      {
        sub_236765578(*(uint64_t ****)(v20 + 8 * v36));
        *(_QWORD *)(v20 + 8 * v36++) = 0;
      }
      while (v36 < *((unsigned int *)v8 + 2));
    }
    v37 = (uint64_t *)v8[7];
    if (v37)
    {
      v38 = &qword_25642E910;
      v39 = &unk_250800620;
      while (1)
      {
        v38 = (uint64_t *)*v38;
        if (!v38)
          break;
        if (v38 == v37)
        {
          v39 = (void *)v8[7];
          break;
        }
      }
    }
    else
    {
      v39 = &unk_250800620;
    }
    v47 = (__int128 *)*((_QWORD *)v39 + 6);
    if (!v47)
      v47 = &xmmword_2542ABF08;
    (*((void (**)(void))v47 + 2))();
    if (!sub_236772490(v35))
    {
      *(_QWORD *)(v35 + 56) = *(_QWORD *)v11;
      *(_QWORD *)v11 = v35;
      if (!sub_23676D8DC((uint64_t *)v11))
      {
        sub_23676C0A0((uint64_t **)v35);
        goto LABEL_58;
      }
      v49 = *(unsigned int **)(v35 + 48);
      v50 = *(uint64_t **)(v11 + 56);
      v51 = *v49;
      v52 = *((_QWORD *)v49 + 1);
      if ((*(_DWORD *)a3 & 7) == 1)
      {
        v53 = sub_2367724E0(v50, v51, 256, v52);
        if (!v53)
          goto LABEL_58;
        *a5 |= 0x40u;
        v54 = sub_236772820;
      }
      else
      {
        v53 = sub_2367724E0(v50, v51, 0x10000, v52);
        if (!v53)
          goto LABEL_58;
        *a5 |= 0x40u;
        v54 = sub_236772B20;
      }
      *(_QWORD *)(v11 + 40) = sub_236772850;
      *(_QWORD *)(v11 + 48) = sub_2367729B4;
      *(_QWORD *)(v11 + 16) = v53;
      *(_QWORD *)(v11 + 24) = v54;
      goto LABEL_76;
    }
    sub_23676C0A0((uint64_t **)v35);
    sub_23676B950(*(uint64_t **)(v11 + 56), *((_DWORD *)v8 + 2));
    if (v48)
    {
      *(_QWORD *)(v48 + 56) = *(_QWORD *)v11;
      *(_QWORD *)v11 = v48;
      if (sub_23676D8DC((uint64_t *)v11))
      {
        *a5 |= 0x40u;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 16) = v11;
        *(_QWORD *)(v11 + 24) = sub_23676FEA0;
LABEL_76:
        sub_23676D934(v8);
        *a1 = v11;
        return 1;
      }
    }
  }
LABEL_58:
  sub_23676D934((_QWORD *)v11);
  return 0;
}

uint64_t sub_236770338(uint64_t **a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t result;
  double *v23;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t **v30;
  int32x2_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if ((*a3 & 0x78) != 0x18)
    return 0;
  if ((*a4 & 0x78) != 0x18 || (*a3 & 7) != 1)
    return 0;
  v46 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0;
  v13 = *a1;
  if (sub_23676BA0C(*a1, 4, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, 116))
  {
    v20 = *(uint64_t **)(v45 + 48);
    if (v20[1])
      return 0;
    v21 = *(_QWORD *)(v44 + 48);
    sub_23676DC34((uint64_t)&v39, *(double **)v21, *v20);
  }
  else
  {
    result = sub_23676BA0C(v13, 3, v14, v15, v16, v17, v18, v19, 116);
    if (!(_DWORD)result)
      return result;
    v21 = *(_QWORD *)(v45 + 48);
    v23 = *(double **)v21;
    v24 = *(_OWORD *)(*(_QWORD *)v21 + 48);
    v41 = *(_OWORD *)(*(_QWORD *)v21 + 32);
    v42 = v24;
    v43 = *((_QWORD *)v23 + 8);
    v25 = *((_OWORD *)v23 + 1);
    v39 = *(_OWORD *)v23;
    v40 = v25;
  }
  v26 = *(uint64_t **)(v21 + 8);
  if (sub_23676DBBC((uint64_t)&v39))
    v27 = v26 == 0;
  else
    v27 = 0;
  v28 = v27;
  result = sub_23676D59C((uint64_t *)v13[7], *((_DWORD *)v13 + 2), *((_DWORD *)v13 + 3));
  v38 = result;
  if (result)
  {
    v29 = result;
    v30 = sub_23676D43C(v47);
    if (v30)
    {
      v30[7] = *(uint64_t **)v29;
      *(_QWORD *)v29 = v30;
      if (sub_23676D8DC((uint64_t *)v29))
      {
        if ((v28 & 1) != 0
          || (v31 = sub_23676C120(*(uint64_t **)(v29 + 56), 3, 3u, (uint64_t *)&v39, v26),
              sub_23676DB6C((uint64_t *)v29, 1, (uint64_t)v31)))
        {
          v32 = sub_23676D43C(v46);
          if (v32)
          {
            v33 = *(uint64_t **)v29;
            if (*(_QWORD *)v29)
            {
              do
              {
                v34 = v33;
                v33 = (uint64_t *)v33[7];
              }
              while (v33);
              v34[7] = (uint64_t)v32;
              v32[7] = 0;
            }
            else
            {
              *(_QWORD *)v29 = v32;
            }
            if (sub_23676D8DC((uint64_t *)v29))
            {
              if (v28)
              {
                sub_23676FEBC(&v38, v35, (uint64_t)a3, (uint64_t)a4, a5);
                v29 = v38;
              }
              else
              {
                v36 = *(_QWORD *)(v47 + 48);
                v37 = *(_QWORD *)(v46 + 48);
                *a5 |= 0x40u;
                sub_236771F14((_QWORD *)v29, *(_DWORD ***)(v36 + 8), (uint64_t)&v39, (uint64_t)v26, *(_DWORD ***)(v37 + 8), a4);
              }
              sub_23676D934(v13);
              *a1 = (uint64_t *)v29;
              return 1;
            }
          }
        }
      }
    }
    sub_23676D934((_QWORD *)v29);
    return 0;
  }
  return result;
}

uint64_t sub_2367705AC(uint64_t **a1, int a2, unsigned int *a3, _DWORD *a4, _BYTE *a5)
{
  unsigned int v5;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t i;
  float v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unint64_t v43;
  uint64_t *v44;
  float *v45;
  uint64_t v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t j;
  uint64_t v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned int v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  __int16 v63;
  int v64;
  double v65;
  double v66;
  double v67;
  __int16 *v68;
  double v69;
  __int16 v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t ***v80;
  uint64_t ***v81;
  uint64_t v82;
  uint64_t v83;
  int32x2_t *v84;
  int32x2_t *v85;
  int32x2_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  uint64_t v92;
  int32x2_t *v93;
  unint64_t v94;
  uint64_t ***v95;
  uint64_t ***v96;
  uint64_t *v97;
  uint64_t *v98;
  void *v99;
  void *v100;
  void *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  _BYTE v107[64];
  _BYTE v108[64];
  _OWORD v109[8];
  _OWORD v110[8];
  _OWORD v111[2];
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((*a3 & 0x400000) != 0)
    return 0;
  result = 0;
  if ((*a4 & 0x5F1000) != 0x40000 || (v5 & 0x1F1000) != 0x40000)
    return result;
  if ((*a3 & 7) != 1 && (*a5 & 0x10) == 0)
    return 0;
  v11 = *a1;
  v12 = **a1;
  if (v12)
  {
    while (*(_DWORD *)(v12 + 8) != 1852009504)
    {
      v12 = *(_QWORD *)(v12 + 56);
      if (!v12)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v13 = (HIWORD(v5) & 0x1F) - 1;
  v14 = v13 > 0x1D ? 0 : *(_DWORD *)&aYargBgryargBgr[4 * v13];
  v15 = (HIWORD(*a4) & 0x1F) - 1;
  if (v15 > 0x1D || !v14)
    return 0;
  v16 = 0;
  v17 = *(_DWORD *)&aYargBgryargBgr[4 * v15];
  v18 = *(_DWORD *)a5;
  memset(v110, 0, sizeof(v110));
  memset(v109, 0, sizeof(v109));
  v19 = v11;
  do
  {
    v20 = v16;
    v16 = *v19;
    v19 = (uint64_t *)(*v19 + 56);
  }
  while (v16);
  v24 = sub_236775FC8(v14, v18);
  if (*(_DWORD *)(v20 + 8) == 1668707188)
  {
    v25 = *(unsigned int **)(v20 + 48);
    v26 = *v25;
    if ((_DWORD)v26)
    {
      v27 = (uint64_t *)*((_QWORD *)v25 + 1);
      while (!sub_236770CD0(*v27))
      {
        ++v27;
        if (!--v26)
          goto LABEL_21;
      }
      goto LABEL_75;
    }
  }
LABEL_21:
  v106 = v24;
  if (*((_DWORD *)v11 + 2))
  {
    v28 = 0;
    while (1)
    {
      v29 = sub_236764590((uint64_t *)v11[7], 4096, 0, 0, 0, v21, v22, v23);
      *((_QWORD *)v110 + v28) = v29;
      if (!v29)
        goto LABEL_75;
      ++v28;
      v30 = *((unsigned int *)v11 + 2);
      if (v28 >= v30)
        goto LABEL_27;
    }
  }
  v30 = 0;
LABEL_27:
  v103 = v17;
  v104 = v14;
  v105 = a2;
  for (i = 0; i != 4096; ++i)
  {
    while (1)
    {
      if (v30)
      {
        v33 = (float *)v108;
        do
        {
          v32 = (double)i / 4095.0;
          *v33++ = v32;
          --v30;
        }
        while (v30);
      }
      ((void (*)(_BYTE *, _BYTE *, uint64_t *))v11[4])(v108, v107, v11);
      v43 = *((unsigned int *)v11 + 2);
      if ((_DWORD)v43)
        break;
      v30 = 0;
      v50 = 0;
      if (++i == 4096)
        goto LABEL_68;
    }
    v44 = (uint64_t *)v110;
    v45 = (float *)v107;
    v46 = *((unsigned int *)v11 + 2);
    do
    {
      v47 = *v45 * 65535.0 + 0.5;
      if (v47 <= 0.0)
      {
        v48 = 0;
      }
      else if (v47 >= 65535.0)
      {
        v48 = -1;
      }
      else
      {
        v48 = (COERCE_UNSIGNED_INT64(v47 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      v49 = *v44++;
      *(_WORD *)(*(_QWORD *)(v49 + 48) + 2 * i) = v48;
      ++v45;
      --v46;
    }
    while (v46);
    v30 = v43;
  }
  for (j = 0; j != v43; ++j)
  {
    v52 = *((_QWORD *)v110 + j);
    v53 = *(_DWORD *)(v52 + 40);
    LODWORD(v41) = vcvtmd_s64_f64((double)v53 * 0.02 + 0.5);
    v54 = *(unsigned __int16 **)(v52 + 48);
    v55 = *v54;
    v56 = v54[v53 - 1];
    if (v55 <= v56)
      v57 = 0.0;
    else
      v57 = 65535.0;
    if (v55 <= v56)
      v58 = 65535.0;
    else
      v58 = 0.0;
    v59 = (double)(int)v41;
    if ((int)v41 >= 1)
    {
      v60 = 0;
      LOWORD(v42) = v54[(int)v41];
      v61 = (double)*(unint64_t *)&v42;
      v57 = (v61 - v57) / v59;
      v42 = v61 - v57 * v59;
      do
      {
        v62 = v42 + (double)(int)v60 * v57 + 0.5;
        if (v62 <= 0.0)
        {
          v63 = 0;
        }
        else if (v62 >= 65535.0)
        {
          v63 = -1;
        }
        else
        {
          v63 = (COERCE_UNSIGNED_INT64(v62 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        v54[v60++] = v63;
      }
      while (v41 != v60);
    }
    v41 = ~(_DWORD)v41;
    v64 = v53 + v41;
    if ((int)(v53 + v41) < (int)v53)
    {
      LOWORD(v57) = v54[v64];
      v65 = (double)*(unint64_t *)&v57;
      v66 = (v58 - v65) / v59;
      v67 = v65 - v66 * (double)v64;
      v68 = (__int16 *)&v54[v64];
      do
      {
        v69 = v67 + (double)(int)(v53 + v41) * v66 + 0.5;
        if (v69 <= 0.0)
        {
          v70 = 0;
        }
        else if (v69 >= 65535.0)
        {
          v70 = -1;
        }
        else
        {
          v42 = 1.03079215e11;
          v70 = (COERCE_UNSIGNED_INT64(v69 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
        }
        *v68++ = v70;
        v71 = __CFADD__((_DWORD)v41, 1);
        v41 = (v41 + 1);
      }
      while (!v71);
    }
  }
  v50 = v43;
LABEL_68:
  v72 = 0;
  v73 = 8 * v50;
  while (v73 != v72)
  {
    v74 = *(_QWORD *)((char *)v110 + v72);
    sub_236765C10(v74);
    v75 = sub_236765CC4(v74);
    v72 += 8;
    if (sub_236770CD0(v74))
      v76 = 1;
    else
      v76 = v75 == 0;
    if (v76)
      goto LABEL_75;
  }
  if (v43)
  {
    v82 = 0;
    while (1)
    {
      v83 = sub_2367658E8(*((_QWORD *)v110 + v82), v34, v35, v36, v37, v38, v39, v40);
      *((_QWORD *)v109 + v82) = v83;
      if (!v83)
        break;
      if (++v82 >= (unint64_t)*((unsigned int *)v11 + 2))
        goto LABEL_93;
    }
LABEL_75:
    v77 = 0;
    v78 = 0;
LABEL_76:
    if (*((_DWORD *)v11 + 2))
    {
      v79 = 0;
      do
      {
        v80 = (uint64_t ***)*((_QWORD *)v110 + v79);
        if (v80)
          sub_236765578(v80);
        v81 = (uint64_t ***)*((_QWORD *)v109 + v79);
        if (v81)
          sub_236765578(v81);
        ++v79;
      }
      while (v79 < *((unsigned int *)v11 + 2));
    }
    if (v78)
      sub_23676D934(v78);
    if (v77)
      sub_23676D934(v77);
    return 0;
  }
LABEL_93:
  v78 = (uint64_t *)sub_23676DA44((uint64_t)v11);
  if (!v78
    || (v84 = sub_23676BAB0((uint64_t *)v11[7], *((unsigned int *)v11 + 2), (uint64_t)v109)) == 0
    || (v84[7] = (int32x2_t)*v78, *v78 = (uint64_t)v84, !sub_23676D8DC(v78)))
  {
    v77 = 0;
    goto LABEL_76;
  }
  v77 = (uint64_t *)sub_23676D59C((uint64_t *)v11[7], *((_DWORD *)v11 + 2), *((_DWORD *)v11 + 3));
  if (!v77)
    goto LABEL_76;
  v85 = sub_23676BAB0((uint64_t *)v11[7], *((unsigned int *)v11 + 2), (uint64_t)v110);
  if (!v85)
    goto LABEL_76;
  v86 = v85;
  v85[7] = (int32x2_t)*v77;
  *v77 = (uint64_t)v85;
  if (!sub_23676D8DC(v77))
    goto LABEL_76;
  v90 = (uint64_t *)v11[7];
  v91 = *((_DWORD *)v11 + 2);
  v92 = *((unsigned int *)v11 + 3);
  v111[0] = vdupq_n_s32(v106);
  v111[1] = v111[0];
  v93 = sub_23676C698(v90, (int *)v111, v91, v92, 0, v87, v88, v89);
  if (!sub_23676DB6C(v77, 1, (uint64_t)v93)
    || !sub_23676CE98((uint64_t)v93, (uint64_t (*)(_QWORD, _QWORD))sub_236770D4C, (uint64_t)v78))
  {
    goto LABEL_76;
  }
  if (*((_DWORD *)v11 + 2))
  {
    v94 = 0;
    do
    {
      v95 = (uint64_t ***)*((_QWORD *)v110 + v94);
      if (v95)
        sub_236765578(v95);
      v96 = (uint64_t ***)*((_QWORD *)v109 + v94);
      if (v96)
        sub_236765578(v96);
      ++v94;
    }
    while (v94 < *((unsigned int *)v11 + 2));
  }
  sub_23676D934(v78);
  v97 = (uint64_t *)v77[7];
  v98 = *(uint64_t **)(*(_QWORD *)&v93[6] + 8);
  if ((*a3 & 7) == 1)
  {
    result = (uint64_t)sub_236770E6C(v97, v98, *(uint64_t **)(*(_QWORD *)&v86[6] + 8));
    if (!result)
      return result;
    v99 = sub_2367712F8;
    v100 = sub_236771350;
    v101 = sub_236771094;
  }
  else
  {
    result = sub_2367713A4(v97, (uint64_t)v98, 3u, *(uint64_t ***)(*(_QWORD *)&v86[6] + 8), 3, 0);
    if (!result)
      return result;
    v99 = sub_2367716AC;
    v100 = sub_2367717E4;
    v101 = sub_2367715B4;
  }
  v77[5] = (uint64_t)v99;
  v77[6] = (uint64_t)v100;
  v77[2] = result;
  v77[3] = (uint64_t)v101;
  v102 = *(_DWORD *)a5;
  if (v105 == 3)
  {
    v102 |= 4u;
    *(_DWORD *)a5 = v102;
  }
  if ((v102 & 4) != 0 || (result = sub_23677192C((uint64_t)v77, v104, v103), (_DWORD)result))
  {
    sub_23676D934(v11);
    *a1 = v77;
    return 1;
  }
  return result;
}

uint64_t sub_236770CD0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = *(_DWORD *)(a1 + 40);
  if (!v1)
  {
    v2 = 0;
    return v2 > v1;
  }
  v2 = 0;
  v3 = 0;
  v4 = *(unsigned __int16 **)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 40);
  do
  {
    v7 = *v4++;
    v6 = v7;
    if (!v7)
      ++v3;
    if (v6 == 0xFFFF)
      ++v2;
    --v5;
  }
  while (v5);
  if (v3 != 1 || v2 != 1)
  {
    v1 /= 0x14u;
    if (v3 > v1)
      return 1;
    return v2 > v1;
  }
  return 0;
}

uint64_t sub_236770D4C(unsigned __int16 *a1, __int16 *a2, uint64_t a3)
{
  uint64_t v5;
  float *v6;
  unsigned int v7;
  float v8;
  uint64_t v9;
  float *v10;
  double v11;
  __int16 v12;
  _BYTE v14[64];
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5)
  {
    v6 = (float *)v15;
    do
    {
      v7 = *a1++;
      v8 = (double)v7 / 65535.0;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(a3 + 32))(v15, v14, a3);
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9)
  {
    v10 = (float *)v14;
    do
    {
      v11 = *v10 * 65535.0 + 0.5;
      if (v11 <= 0.0)
      {
        v12 = 0;
      }
      else if (v11 >= 65535.0)
      {
        v12 = -1;
      }
      else
      {
        v12 = (COERCE_UNSIGNED_INT64(v11 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      *a2++ = v12;
      ++v10;
      --v9;
    }
    while (v9);
  }
  return 1;
}

uint64_t **sub_236770E6C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  uint64_t **v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  _WORD *v24;
  uint64_t *v26;
  unsigned __int16 v27;
  __int16 v28;
  unsigned __int16 v29;
  __int16 v30;
  unsigned __int16 v31;
  __int16 v32;

  if (a1)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == a1)
      {
        v7 = a1;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (__int128 *)v7[6];
  if (!v8)
    v8 = &xmmword_2542ABF08;
  v9 = (uint64_t **)(*((uint64_t (**)(uint64_t *, uint64_t))v8 + 1))(a1, 4624);
  if (v9)
  {
    v26 = a1;
    v10 = 0;
    v11 = 0;
    v12 = 1552;
    v13 = 528;
    do
    {
      if (a3)
      {
        v14 = *a3;
        v28 = v10 | v11;
        v27 = 0;
        (*(void (**)(__int16 *, unsigned __int16 *))(*(_QWORD *)v14 + 128))(&v28, &v27);
        v15 = v27;
        v16 = a3[1];
        v30 = v10 | v11;
        v29 = 0;
        (*(void (**)(__int16 *, unsigned __int16 *))(*(_QWORD *)v16 + 128))(&v30, &v29);
        v17 = v29;
        v18 = a3[2];
        v32 = v10 | v11;
        v31 = 0;
        (*(void (**)(__int16 *, unsigned __int16 *))(*(_QWORD *)v18 + 128))(&v32, &v31);
        v19 = v31;
      }
      else
      {
        v19 = (unsigned __int16)(v10 | v11);
        v17 = v19;
        v15 = v19;
      }
      v20 = (*((_DWORD *)a2 + 13) * v15 + 0x7FFF) / 0xFFFF + *((_DWORD *)a2 + 13) * v15;
      v21 = (*((_DWORD *)a2 + 14) * v17 + 0x7FFF) / 0xFFFF + *((_DWORD *)a2 + 14) * v17;
      v22 = (*((_DWORD *)a2 + 15) * v19 + 0x7FFF) / 0xFFFF + *((_DWORD *)a2 + 15) * v19;
      v23 = (_DWORD *)((char *)v9 + v12);
      *v23 = (v20 >> 16) * *((_DWORD *)a2 + 23);
      v23[256] = (v21 >> 16) * *((_DWORD *)a2 + 22);
      v23[512] = *((_DWORD *)a2 + 21) * (v22 >> 16);
      *((_WORD *)v9 + v11 + 8) = v20;
      v24 = (_WORD *)((char *)v9 + v13);
      *v24 = v21;
      v24[256] = v22;
      ++v11;
      v12 += 4;
      v13 += 2;
      v10 += 256;
    }
    while (v12 != 2576);
    *v9 = v26;
    v9[1] = a2;
  }
  return v9;
}

uint64_t sub_236771094(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v3 = *(_QWORD *)(a3 + 8);
  v4 = (unint64_t)*a1 >> 8;
  v5 = (unint64_t)a1[1] >> 8;
  v6 = (unint64_t)a1[2] >> 8;
  v7 = *(unsigned __int16 *)(a3 + 2 * v4 + 16);
  v8 = *(unsigned __int16 *)(a3 + 2 * v5 + 528);
  v9 = *(unsigned __int16 *)(a3 + 2 * v6 + 1040);
  if (*(_WORD *)(a3 + 2 * v4 + 16))
    v10 = *(_DWORD *)(v3 + 92);
  else
    v10 = 0;
  v11 = *(unsigned int *)(v3 + 16);
  if (*(_WORD *)(a3 + 2 * v5 + 528))
  {
    result = *(unsigned int *)(v3 + 88);
    if (*(_WORD *)(a3 + 2 * v6 + 1040))
    {
LABEL_6:
      v13 = *(_DWORD *)(v3 + 84);
      goto LABEL_9;
    }
  }
  else
  {
    result = 0;
    if (*(_WORD *)(a3 + 2 * v6 + 1040))
      goto LABEL_6;
  }
  v13 = 0;
LABEL_9:
  if ((int)v11 >= 1)
  {
    v14 = 0;
    v15 = a3 + 4 * v5;
    v16 = a3 + 4 * v6;
    v17 = *(_DWORD *)(a3 + 4 * v4 + 1552);
    v18 = v10 + v17;
    v19 = *(_DWORD *)(v15 + 2576);
    v20 = result + v19;
    v21 = *(_DWORD *)(v16 + 3600);
    v22 = v13 + v21;
    v23 = *(_QWORD *)(v3 + 120);
    v24 = v19 + v17 + v21;
    v25 = v8 < v9 || v7 < v8;
    v26 = v21 + v19 + v18;
    v27 = v20 + v18 + v21;
    v28 = 2 * v11;
    v29 = v23 + 2 * (v22 + v19 + v17);
    v30 = v23 + 2 * (v22 + v20 + v17);
    v31 = v23 + 2 * (v22 + v20 + v18);
    v32 = v23 + 2 * (v20 + v17 + v21);
    result = v23 + 2 * (v21 + v17 + v20);
    v33 = v18 + v19;
    v34 = v7 < v9 || v8 < v7;
    v35 = v23 + 2 * v27;
    v36 = v23 + 2 * (v22 + v33);
    v37 = v9 < v7 || v7 < v8;
    v38 = v23 + 2 * (v33 + v21);
    v39 = v9 < v7 || v8 < v9;
    v40 = v9 < v8 || v7 < v9;
    v41 = v9 < v8 || v8 < v7;
    v42 = v23 + 2 * v26;
    v43 = v23 + 2 * v24;
    while (1)
    {
      v44 = *(unsigned __int16 *)(v43 + v14);
      if (!v25)
      {
        v48 = *(unsigned __int16 *)(v42 + v14);
        v45 = v48 - v44;
        v49 = *(unsigned __int16 *)(v35 + v14);
        v46 = v49 - v48;
        goto LABEL_37;
      }
      if (!v40)
        break;
      if (!v37)
      {
        v52 = *(unsigned __int16 *)(v36 + v14);
        v53 = *(unsigned __int16 *)(v29 + v14);
        v45 = v52 - v53;
        v46 = *(unsigned __int16 *)(v31 + v14) - v52;
LABEL_43:
        v47 = v53 - v44;
        goto LABEL_40;
      }
      if (!v34)
      {
        v49 = *(unsigned __int16 *)(v35 + v14);
        v54 = *(unsigned __int16 *)(result + v14);
        v45 = v49 - v54;
        v46 = v54 - v44;
LABEL_37:
        v50 = *(unsigned __int16 *)(v31 + v14);
LABEL_39:
        v47 = v50 - v49;
        goto LABEL_40;
      }
      if (!v39)
      {
        v55 = *(unsigned __int16 *)(v30 + v14);
        v45 = *(unsigned __int16 *)(v31 + v14) - v55;
        v56 = *(unsigned __int16 *)(v32 + v14);
        v46 = v56 - v44;
        v47 = v55 - v56;
        goto LABEL_40;
      }
      if (!v41)
      {
        v57 = *(unsigned __int16 *)(v30 + v14);
        v45 = *(unsigned __int16 *)(v31 + v14) - v57;
        v53 = *(unsigned __int16 *)(v29 + v14);
        v46 = v57 - v53;
        goto LABEL_43;
      }
      v45 = 0;
      v46 = 0;
      v47 = 0;
LABEL_40:
      v51 = v46 * v8 + v45 * v7 + v47 * v9 + 32769;
      *(_WORD *)(a2 + v14) = v44 + ((v51 + (v51 >> 16)) >> 16);
      v14 += 2;
      if (v28 == v14)
        return result;
    }
    v49 = *(unsigned __int16 *)(v38 + v14);
    v45 = v49 - v44;
    v50 = *(unsigned __int16 *)(v36 + v14);
    v46 = *(unsigned __int16 *)(v31 + v14) - v50;
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_2367712F8(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  __int128 *v4;

  if (a2)
  {
    if (result)
    {
      v2 = &qword_25642E910;
      v3 = &unk_250800620;
      while (1)
      {
        v2 = (uint64_t *)*v2;
        if (!v2)
          break;
        if (v2 == (uint64_t *)result)
        {
          v3 = (void *)result;
          break;
        }
      }
    }
    else
    {
      v3 = &unk_250800620;
    }
    v4 = (__int128 *)*((_QWORD *)v3 + 6);
    if (!v4)
      v4 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v4 + 2))();
  }
  return result;
}

uint64_t sub_236771350(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  __int128 *v3;

  if (a1)
  {
    v1 = &qword_25642E910;
    v2 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v1 = (uint64_t *)*v1;
      if (!v1)
        break;
      if (v1 == a1)
      {
        v2 = a1;
        break;
      }
    }
  }
  else
  {
    v2 = (uint64_t *)&unk_250800620;
  }
  v3 = (__int128 *)v2[6];
  if (!v3)
    v3 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v3 + 5))();
}

uint64_t sub_2367713A4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;
  uint64_t v20;
  _WORD *(*v21)(_WORD *, _WORD *);
  uint64_t *v22;
  uint64_t *v23;
  __int128 *v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 *v27;
  uint64_t v28;
  _WORD *(*v29)(_WORD *, _WORD *);

  if (a1)
  {
    v12 = &qword_25642E910;
    v13 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == a1)
      {
        v13 = a1;
        break;
      }
    }
  }
  else
  {
    v13 = (uint64_t *)&unk_250800620;
  }
  v14 = (__int128 *)v13[6];
  if (!v14)
    v14 = &xmmword_2542ABF08;
  v15 = (*((uint64_t (**)(uint64_t *, uint64_t))v14 + 1))(a1, 176);
  v16 = v15;
  if (v15)
  {
    *(_DWORD *)(v15 + 8) = a3;
    *(_DWORD *)(v15 + 12) = a5;
    if (a3)
    {
      v17 = a3;
      v18 = (_QWORD *)(v15 + 80);
      v19 = a4;
      do
      {
        if (a4)
        {
          v20 = **v19;
          *v18 = v20;
          v21 = *(_WORD *(**)(_WORD *, _WORD *))(v20 + 128);
        }
        else
        {
          *v18 = 0;
          v21 = sub_236771F08;
        }
        *(v18 - 8) = v21;
        ++v18;
        ++v19;
        --v17;
      }
      while (v17);
    }
    *(_QWORD *)(v15 + 152) = a2;
    *(_QWORD *)(v15 + 144) = *(_QWORD *)(a2 + 128);
    if (a1)
    {
      v22 = &qword_25642E910;
      v23 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v22 = (uint64_t *)*v22;
        if (!v22)
          break;
        if (v22 == a1)
        {
          v23 = a1;
          break;
        }
      }
    }
    else
    {
      v23 = (uint64_t *)&unk_250800620;
    }
    v24 = (__int128 *)v23[6];
    if (!v24)
      v24 = &xmmword_2542ABF08;
    *(_QWORD *)(v15 + 160) = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v24 + 4))(a1, a5, 8);
    if (a1)
    {
      v25 = &qword_25642E910;
      v26 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v25 = (uint64_t *)*v25;
        if (!v25)
          break;
        if (v25 == a1)
        {
          v26 = a1;
          break;
        }
      }
    }
    else
    {
      v26 = (uint64_t *)&unk_250800620;
    }
    v27 = (__int128 *)v26[6];
    if (!v27)
      v27 = &xmmword_2542ABF08;
    *(_QWORD *)(v16 + 168) = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v27 + 4))(a1, a5, 8);
    if ((_DWORD)a5)
    {
      v28 = 0;
      do
      {
        if (a6)
        {
          *(_QWORD *)(*(_QWORD *)(v16 + 168) + v28) = **(_QWORD **)(a6 + v28);
          v29 = *(_WORD *(**)(_WORD *, _WORD *))(*(_QWORD *)(*(_QWORD *)(v16 + 168) + v28) + 128);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v16 + 168) + v28) = 0;
          v29 = sub_236771F08;
        }
        *(_QWORD *)(*(_QWORD *)(v16 + 160) + v28) = v29;
        v28 += 8;
      }
      while (8 * a5 != v28);
    }
  }
  return v16;
}

uint64_t sub_2367715B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BYTE *v7;
  uint64_t result;
  unint64_t v9;
  _BYTE *v10;
  _BYTE v11[32];
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 8))
  {
    v6 = 0;
    v7 = v12;
    do
    {
      (*(void (**)(uint64_t, _BYTE *, _QWORD))(a3 + 8 * v6 + 16))(a1, v7, *(_QWORD *)(a3 + 8 * v6 + 80));
      ++v6;
      v7 += 2;
      a1 += 2;
    }
    while (v6 < *(unsigned int *)(a3 + 8));
  }
  result = (*(uint64_t (**)(_BYTE *, _BYTE *, _QWORD))(a3 + 144))(v12, v11, *(_QWORD *)(a3 + 152));
  if (*(_DWORD *)(a3 + 12))
  {
    v9 = 0;
    v10 = v11;
    do
    {
      result = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)(a3 + 160) + 8 * v9))(v10, a2, *(_QWORD *)(*(_QWORD *)(a3 + 168) + 8 * v9));
      ++v9;
      a2 += 2;
      v10 += 2;
    }
    while (v9 < *(unsigned int *)(a3 + 12));
  }
  return result;
}

uint64_t sub_2367716AC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;

  if (*(_QWORD *)(a2 + 160))
  {
    if (a1)
    {
      v4 = &qword_25642E910;
      v5 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          break;
        if (v4 == a1)
        {
          v5 = a1;
          break;
        }
      }
    }
    else
    {
      v5 = (uint64_t *)&unk_250800620;
    }
    v6 = (__int128 *)v5[6];
    if (!v6)
      v6 = &xmmword_2542ABF08;
    (*((void (**)(uint64_t *))v6 + 2))(a1);
  }
  if (!*(_QWORD *)(a2 + 168))
    goto LABEL_21;
  if (a1)
  {
    v7 = &qword_25642E910;
    v8 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == a1)
      {
        v8 = a1;
        break;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)&unk_250800620;
  }
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(uint64_t *))v9 + 2))(a1);
  if (a2)
  {
LABEL_21:
    if (a1)
    {
      v11 = &qword_25642E910;
      v12 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v11 = (uint64_t *)*v11;
        if (!v11)
          break;
        if (v11 == a1)
        {
          v12 = a1;
          break;
        }
      }
    }
    else
    {
      v12 = (uint64_t *)&unk_250800620;
    }
    v13 = (__int128 *)v12[6];
    if (!v13)
      v13 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(uint64_t *, uint64_t))v13 + 2))(a1, a2);
  }
  return result;
}

uint64_t sub_2367717E4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;

  if (a1)
  {
    v4 = &qword_25642E910;
    v5 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == a1)
      {
        v5 = a1;
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)&unk_250800620;
  }
  v6 = (__int128 *)v5[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v6 + 5))(a1, a2, 176);
  if (v7)
  {
    if (a1)
    {
      v8 = &qword_25642E910;
      v9 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          break;
        if (v8 == a1)
        {
          v9 = a1;
          break;
        }
      }
    }
    else
    {
      v9 = (uint64_t *)&unk_250800620;
    }
    v10 = (__int128 *)v9[6];
    if (!v10)
      v10 = &xmmword_2542ABF08;
    *(_QWORD *)(v7 + 160) = (*((uint64_t (**)(uint64_t *, _QWORD, _QWORD))v10 + 5))(a1, *(_QWORD *)(a2 + 160), (8 * *(_DWORD *)(a2 + 12)));
    if (a1)
    {
      v11 = &qword_25642E910;
      v12 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v11 = (uint64_t *)*v11;
        if (!v11)
          break;
        if (v11 == a1)
        {
          v12 = a1;
          break;
        }
      }
    }
    else
    {
      v12 = (uint64_t *)&unk_250800620;
    }
    v13 = (__int128 *)v12[6];
    if (!v13)
      v13 = &xmmword_2542ABF08;
    *(_QWORD *)(v7 + 168) = (*((uint64_t (**)(uint64_t *, _QWORD, _QWORD))v13 + 5))(a1, *(_QWORD *)(a2 + 168), (8 * *(_DWORD *)(a2 + 12)));
  }
  return v7;
}

uint64_t sub_23677192C(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  int v5;
  __int16 *v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  double v46;
  int v47;
  double v48;
  double v49;
  double v50;
  int v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double v56;
  double v57;
  double v58;
  int v59;
  int v60;
  double v61;
  int v62;
  uint64_t v63;
  __int16 *v64;
  __int16 v65;
  double v66;
  int v67;
  double v68;
  double v69;
  double v70;
  int v71;
  double v72;
  double v73;
  double v74;
  int v75;
  char v76;
  _BYTE v77[32];
  _WORD v78[16];
  __int16 __dst;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  uint64_t v83;

  result = 0;
  v83 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 1196573016)
  {
    if (a2 == 1129142560)
    {
      v5 = 3;
      v6 = &word_25642E900;
    }
    else
    {
      if (a2 != 1129142603)
        return result;
      v5 = 4;
      v6 = &word_25642E8F8;
    }
  }
  else
  {
    switch(a2)
    {
      case 1196573017:
        v5 = 1;
        v6 = &word_25642E7F8;
        break;
      case 1281450528:
        v5 = 3;
        v6 = &word_25642E7E8;
        break;
      case 1380401696:
        v5 = 3;
        v6 = &word_25642E7D0;
        break;
      default:
        return result;
    }
  }
  result = 0;
  if (a3 <= 1196573016)
  {
    if (a3 == 1129142560)
    {
      LODWORD(v7) = 3;
      v8 = &word_25642E900;
    }
    else
    {
      if (a3 != 1129142603)
        return result;
      LODWORD(v7) = 4;
      v8 = &word_25642E8F8;
    }
  }
  else
  {
    switch(a3)
    {
      case 1196573017:
        LODWORD(v7) = 1;
        v8 = &word_25642E7F8;
        break;
      case 1281450528:
        LODWORD(v7) = 3;
        v8 = &word_25642E7E8;
        break;
      case 1380401696:
        LODWORD(v7) = 3;
        v8 = &word_25642E7D0;
        break;
      default:
        return result;
    }
  }
  if (*(_DWORD *)(a1 + 8) != v5 || *(_DWORD *)(a1 + 12) != (_DWORD)v7)
    return 0;
  (*(void (**)(__int16 *, _BYTE *, _QWORD))(a1 + 24))(v6, v77, *(_QWORD *)(a1 + 16));
  v15 = 0;
  v7 = v7;
  while (1)
  {
    v16 = (unsigned __int16)v8[v15];
    v17 = *(unsigned __int16 *)&v77[v15 * 2];
    v18 = v16 - v17;
    if (v16 - v17 < 0)
      v18 = v17 - v16;
    if (v18 > 0xF000)
      return 1;
    if (v16 != v17)
      break;
    if (v7 == ++v15)
      return 1;
  }
  if (sub_23676BA0C((uint64_t *)a1, 3, v9, v10, v11, v12, v13, v14, 116)
    || sub_23676BA0C((uint64_t *)a1, 2, v19, v20, v21, v22, v23, v24, 116)
    || sub_23676BA0C((uint64_t *)a1, 2, v25, v26, v27, v28, v29, v30, 116)
    || (result = sub_23676BA0C((uint64_t *)a1, 1, v31, v32, v33, v34, v35, v36, 116), (_DWORD)result))
  {
    memcpy(&__dst, v6, (2 * v5));
    memcpy(v78, v8, 2 * v7);
    if (MEMORY[8] == 1668052340)
    {
      v44 = (_QWORD *)MEMORY[0x30];
      v45 = *(_DWORD **)(MEMORY[0x30] + 8);
      if (v5 == 1)
      {
        LOWORD(v42) = __dst;
        LODWORD(v43) = v45[13];
        v61 = (double)v42 * (double)v43 / 65535.0;
        v62 = vcvtmd_s64_f64(v61);
        if (v61 - (double)v62 != 0.0)
          return 1;
        v60 = v45[21] * v62;
      }
      else
      {
        if (v5 != 3)
        {
          LOWORD(v42) = __dst;
          LODWORD(v43) = v45[13];
          v46 = (double)v42 * (double)v43 / 65535.0;
          v47 = vcvtmd_s64_f64(v46);
          v48 = (double)v47;
          v49 = v46 - (double)v47;
          if (v49 == 0.0)
          {
            LOWORD(v49) = v80;
            LODWORD(v48) = v45[14];
            v50 = (double)*(unint64_t *)&v49 * (double)*(unint64_t *)&v48 / 65535.0;
            v51 = vcvtmd_s64_f64(v50);
            v52 = (double)v51;
            v53 = v50 - (double)v51;
            if (v53 == 0.0)
            {
              LOWORD(v53) = v81;
              LODWORD(v52) = v45[15];
              v54 = (double)*(unint64_t *)&v53 * (double)*(unint64_t *)&v52 / 65535.0;
              v55 = vcvtmd_s64_f64(v54);
              v56 = (double)v55;
              v57 = v54 - (double)v55;
              if (v57 == 0.0)
              {
                LOWORD(v57) = v82;
                LODWORD(v56) = v45[16];
                v58 = (double)*(unint64_t *)&v57 * (double)*(unint64_t *)&v56 / 65535.0;
                v59 = vcvtmd_s64_f64(v58);
                if (v58 - (double)v59 == 0.0)
                {
                  v60 = v45[24] * v47 + v45[23] * v51 + v45[22] * v55 + v45[21] * v59;
                  goto LABEL_50;
                }
              }
            }
          }
          return 1;
        }
        LOWORD(v42) = __dst;
        LODWORD(v43) = v45[13];
        v66 = (double)v42 * (double)v43 / 65535.0;
        v67 = vcvtmd_s64_f64(v66);
        v68 = (double)v67;
        v69 = v66 - (double)v67;
        if (v69 != 0.0)
          return 1;
        LOWORD(v69) = v80;
        LODWORD(v68) = v45[14];
        v70 = (double)*(unint64_t *)&v69 * (double)*(unint64_t *)&v68 / 65535.0;
        v71 = vcvtmd_s64_f64(v70);
        v72 = (double)v71;
        v73 = v70 - (double)v71;
        if (v73 != 0.0)
          return 1;
        LOWORD(v73) = v81;
        LODWORD(v72) = v45[15];
        v74 = (double)*(unint64_t *)&v73 * (double)*(unint64_t *)&v72 / 65535.0;
        v75 = vcvtmd_s64_f64(v74);
        if (v74 - (double)v75 != 0.0)
          return 1;
        v60 = v45[23] * v67 + v45[22] * v71 + v45[21] * v75;
      }
LABEL_50:
      v63 = 2 * v60;
      v64 = v78;
      result = 1;
      do
      {
        v65 = *v64++;
        *(_WORD *)(*v44 + v63) = v65;
        v63 += 2;
        --v7;
      }
      while (v7);
      return result;
    }
    sub_2367644B8(MEMORY[0], 3, "(internal) Attempt to PatchLUT on non-lut stage", v37, v38, v39, v40, v41, v76);
    return 1;
  }
  return result;
}

_WORD *sub_236771F08(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_236771F14(_QWORD *a1, _DWORD **a2, uint64_t a3, uint64_t a4, _DWORD **a5, _DWORD *a6)
{
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t (**v16)(void);
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t j;
  unsigned int v23;

  v12 = *a6 & 7;
  v13 = (uint64_t *)a1[7];
  if (v13)
  {
    v14 = &qword_25642E910;
    v15 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v14 = (uint64_t *)*v14;
      if (!v14)
        break;
      if (v14 == v13)
      {
        v15 = v13;
        break;
      }
    }
  }
  else
  {
    v15 = (uint64_t *)&unk_250800620;
  }
  v16 = (uint64_t (**)(void))v15[6];
  if (!v16)
    v16 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v17 = (_QWORD *)(*v16)();
  if (v17)
  {
    v18 = v17;
    *v17 = a1[7];
    sub_2367720F0((uint64_t)(v17 + 1), *a2);
    sub_2367720F0((uint64_t)(v18 + 129), a2[1]);
    sub_2367720F0((uint64_t)(v18 + 257), a2[2]);
    sub_236772188((uint64_t)(v18 + 391), *a5, v12 == 1);
    sub_236772188((uint64_t)v18 + 35898, a5[1], v12 == 1);
    sub_236772188((uint64_t)v18 + 68668, a5[2], v12 == 1);
    v19 = 0;
    v20 = v18 + 385;
    do
    {
      for (i = 0; i != 3; ++i)
        *((_DWORD *)v20 + i) = vcvtmd_s64_f64(*(double *)(a3 + 8 * i) * 16384.0 + 0.5);
      ++v19;
      v20 = (_QWORD *)((char *)v20 + 12);
      a3 += 24;
    }
    while (v19 != 3);
    for (j = 0; j != 3; ++j)
    {
      if (a4)
        v23 = vcvtmd_s64_f64(*(double *)(a4 + 8 * j) * 16384.0 + 0.5);
      else
        v23 = 0;
      *((_DWORD *)v18 + j + 779) = v23;
    }
    if (v12 == 1)
      *a6 |= 0x200000u;
    a1[5] = sub_2367723E0;
    a1[6] = sub_236772438;
    a1[2] = v18;
    a1[3] = sub_2367722E8;
  }
}

void sub_2367720F0(uint64_t a1, _DWORD *a2)
{
  uint64_t i;
  float v5;
  float v6;
  unsigned int v7;

  for (i = 0; i != 256; ++i)
  {
    v5 = (double)(int)i / 255.0;
    v6 = sub_236765B54(a2, v5);
    v7 = vcvtmd_s64_f64(v6 * 16384.0 + 0.5);
    if (v6 >= 131070.0)
      v7 = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4 * i) = v7;
  }
}

void sub_236772188(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t i;
  float v7;
  float v8;
  double v9;
  unsigned __int16 v10;
  __int16 v11;
  unsigned int v12;
  unint64_t v13;

  for (i = 0; i != 16385; ++i)
  {
    v7 = (double)(int)i * 0.0000610351562;
    v8 = sub_236765B54(a2, v7);
    if (v8 < 0.0)
      v8 = 0.0;
    if (v8 > 1.0)
      v8 = 1.0;
    v9 = v8 * 65535.0 + 0.5;
    if (a3)
    {
      if (v9 > 0.0)
      {
        if (v9 >= 65535.0)
          v10 = -1;
        else
          v10 = (COERCE_UNSIGNED_INT64(v9 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      else
      {
        v10 = 0;
      }
      v12 = 65281 * v10 + 0x800000;
      HIDWORD(v13) = HIBYTE(v12);
      LODWORD(v13) = v12;
      v11 = v13 >> 24;
    }
    else if (v9 > 0.0)
    {
      if (v9 >= 65535.0)
        v11 = -1;
      else
        v11 = (COERCE_UNSIGNED_INT64(v9 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
    }
    else
    {
      v11 = 0;
    }
    *(_WORD *)(a1 + 2 * i) = v11;
  }
}

unsigned __int8 *sub_2367722E8(unsigned __int8 *result, _WORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = a3[*result + 2];
  v4 = a3[result[2] + 258];
  v5 = a3[result[4] + 514];
  v6 = (a3[771] * v4 + a3[770] * v3 + a3[772] * v5 + a3[779] + 0x2000) >> 14;
  v7 = (a3[774] * v4 + a3[773] * v3 + a3[775] * v5 + a3[780] + 0x2000) >> 14;
  v8 = (a3[777] * v4 + a3[776] * v3 + a3[778] * v5 + a3[781] + 0x2000) >> 14;
  if (v6 >= 0x4000)
    v9 = 0x4000;
  else
    v9 = v6;
  v10 = v9 & ~(v9 >> 31);
  if (v7 >= 0x4000)
    v11 = 0x4000;
  else
    v11 = v7;
  v12 = v11 & ~(v11 >> 31);
  if (v8 >= 0x4000)
    v8 = 0x4000;
  *a2 = *((_WORD *)a3 + v10 + 1564);
  a2[1] = *((_WORD *)a3 + v12 + 17949);
  a2[2] = *((_WORD *)a3 + (v8 & ~(v8 >> 31)) + 34334);
  return result;
}

uint64_t sub_2367723E0(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  __int128 *v4;

  if (a2)
  {
    if (result)
    {
      v2 = &qword_25642E910;
      v3 = &unk_250800620;
      while (1)
      {
        v2 = (uint64_t *)*v2;
        if (!v2)
          break;
        if (v2 == (uint64_t *)result)
        {
          v3 = (void *)result;
          break;
        }
      }
    }
    else
    {
      v3 = &unk_250800620;
    }
    v4 = (__int128 *)*((_QWORD *)v3 + 6);
    if (!v4)
      v4 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v4 + 2))();
  }
  return result;
}

uint64_t sub_236772438(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  __int128 *v3;

  if (a1)
  {
    v1 = &qword_25642E910;
    v2 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v1 = (uint64_t *)*v1;
      if (!v1)
        break;
      if (v1 == a1)
      {
        v2 = a1;
        break;
      }
    }
  }
  else
  {
    v2 = (uint64_t *)&unk_250800620;
  }
  v3 = (__int128 *)v2[6];
  if (!v3)
    v3 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v3 + 5))();
}

uint64_t sub_236772490(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 48) + 8);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v2)
    return 1;
  while (1)
  {
    result = sub_236765C10(*v1);
    if (!(_DWORD)result)
      break;
    ++v1;
    if (!--v2)
      return 1;
  }
  return result;
}

uint64_t sub_2367724E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  int v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  __int128 *v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 *v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 *v35;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;

  if (a1)
  {
    v8 = &qword_25642E910;
    v9 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == a1)
      {
        v9 = a1;
        break;
      }
    }
  }
  else
  {
    v9 = (uint64_t *)&unk_250800620;
  }
  v10 = (__int128 *)v9[6];
  if (!v10)
    v10 = &xmmword_2542ABF08;
  v11 = (*((uint64_t (**)(uint64_t *, uint64_t))v10 + 1))(a1, 24);
  v12 = v11;
  if (v11)
  {
    *(_DWORD *)(v11 + 8) = a2;
    *(_DWORD *)(v11 + 12) = a3;
    if (a1)
    {
      v13 = &qword_25642E910;
      v14 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v13 = (uint64_t *)*v13;
        if (!v13)
          break;
        if (v13 == a1)
        {
          v14 = a1;
          break;
        }
      }
    }
    else
    {
      v14 = (uint64_t *)&unk_250800620;
    }
    v15 = (__int128 *)v14[6];
    if (!v15)
      v15 = &xmmword_2542ABF08;
    v16 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v15 + 4))(a1, a2, 8);
    *(_QWORD *)(v12 + 16) = v16;
    if (v16)
    {
      if (!(_DWORD)a2)
        return v12;
      v17 = 0;
      while (1)
      {
        if (a1)
        {
          v18 = &qword_25642E910;
          while (1)
          {
            v18 = (uint64_t *)*v18;
            if (!v18)
              break;
            if (v18 == a1)
            {
              v19 = a1;
              goto LABEL_27;
            }
          }
        }
        v19 = (uint64_t *)&unk_250800620;
LABEL_27:
        v20 = (__int128 *)v19[6];
        if (!v20)
          v20 = &xmmword_2542ABF08;
        *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v17) = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v20 + 4))(a1, a3, 2);
        if (!*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v17))
          break;
        if ((_DWORD)a3 == 256)
        {
          v21 = 0;
          for (i = 0; i != 256; ++i)
          {
            v23 = *(_QWORD *)(a4 + 8 * v17);
            v38 = v21 | i;
            v37 = 0;
            (*(void (**)(__int16 *, __int16 *))(*(_QWORD *)v23 + 128))(&v38, &v37);
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v17) + 2 * i) = v37;
            v21 += 256;
          }
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = *(_QWORD *)(a4 + 8 * v17);
            v40 = v24;
            v39 = 0;
            (*(void (**)(__int16 *, __int16 *))(*(_QWORD *)v25 + 128))(&v40, &v39);
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v17) + 2 * v24++) = v39;
          }
          while (a3 != v24);
        }
        if (++v17 == a2)
          return v12;
      }
      if (!(_DWORD)v17)
        goto LABEL_52;
      v26 = 0;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v26))
        {
          if (a1)
          {
            v27 = &qword_25642E910;
            while (1)
            {
              v27 = (uint64_t *)*v27;
              if (!v27)
                break;
              if (v27 == a1)
              {
                v28 = a1;
                goto LABEL_47;
              }
            }
          }
          v28 = (uint64_t *)&unk_250800620;
LABEL_47:
          v29 = (__int128 *)v28[6];
          if (!v29)
            v29 = &xmmword_2542ABF08;
          (*((void (**)(uint64_t *))v29 + 2))(a1);
        }
        ++v26;
      }
      while (v26 != v17);
      if (*(_QWORD *)(v12 + 16))
      {
LABEL_52:
        if (a1)
        {
          v30 = &qword_25642E910;
          v31 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v30 = (uint64_t *)*v30;
            if (!v30)
              break;
            if (v30 == a1)
            {
              v31 = a1;
              break;
            }
          }
        }
        else
        {
          v31 = (uint64_t *)&unk_250800620;
        }
        v32 = (__int128 *)v31[6];
        if (!v32)
          v32 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *))v32 + 2))(a1);
      }
    }
    if (a1)
    {
      v33 = &qword_25642E910;
      v34 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v33 = (uint64_t *)*v33;
        if (!v33)
          break;
        if (v33 == a1)
        {
          v34 = a1;
          break;
        }
      }
    }
    else
    {
      v34 = (uint64_t *)&unk_250800620;
    }
    v35 = (__int128 *)v34[6];
    if (!v35)
      v35 = &xmmword_2542ABF08;
    (*((void (**)(uint64_t *, uint64_t))v35 + 2))(a1, v12);
    return 0;
  }
  return v12;
}

unsigned __int16 *sub_236772820(unsigned __int16 *result, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a3 + 16);
    do
    {
      v6 = *result++;
      v5 = v6;
      v7 = *v4++;
      *a2++ = *(_WORD *)(v7 + ((v5 >> 7) & 0x1FE));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_236772850(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t i;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i))
      {
        if (a1)
        {
          v6 = &qword_25642E910;
          while (1)
          {
            v6 = (uint64_t *)*v6;
            if (!v6)
              break;
            if (v6 == a1)
            {
              v7 = a1;
              goto LABEL_10;
            }
          }
        }
        v7 = (uint64_t *)&unk_250800620;
LABEL_10:
        v8 = (__int128 *)v7[6];
        if (!v8)
          v8 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *))v8 + 2))(a1);
        v4 = *(unsigned int *)(a2 + 8);
      }
    }
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_24;
  if (a1)
  {
    v9 = &qword_25642E910;
    v10 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == a1)
      {
        v10 = a1;
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)&unk_250800620;
  }
  v11 = (__int128 *)v10[6];
  if (!v11)
    v11 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(uint64_t *))v11 + 2))(a1);
  if (a2)
  {
LABEL_24:
    if (a1)
    {
      v13 = &qword_25642E910;
      v14 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v13 = (uint64_t *)*v13;
        if (!v13)
          break;
        if (v13 == a1)
        {
          v14 = a1;
          break;
        }
      }
    }
    else
    {
      v14 = (uint64_t *)&unk_250800620;
    }
    v15 = (__int128 *)v14[6];
    if (!v15)
      v15 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(uint64_t *, uint64_t))v15 + 2))(a1, a2);
  }
  return result;
}

uint64_t sub_2367729B4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;

  if (a1)
  {
    v3 = &qword_25642E910;
    v4 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v3 = (uint64_t *)*v3;
      if (!v3)
        break;
      if (v3 == a1)
      {
        v4 = a1;
        break;
      }
    }
  }
  else
  {
    v4 = (uint64_t *)&unk_250800620;
  }
  v5 = (__int128 *)v4[6];
  if (!v5)
    v5 = &xmmword_2542ABF08;
  v6 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v5 + 5))(a1, a2, 24);
  v7 = v6;
  if (v6)
  {
    if (a1)
    {
      v8 = &qword_25642E910;
      v9 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          break;
        if (v8 == a1)
        {
          v9 = a1;
          break;
        }
      }
    }
    else
    {
      v9 = (uint64_t *)&unk_250800620;
    }
    v10 = (__int128 *)v9[6];
    if (!v10)
      v10 = &xmmword_2542ABF08;
    *(_QWORD *)(v6 + 16) = (*((uint64_t (**)(uint64_t *, _QWORD, _QWORD))v10 + 5))(a1, *(_QWORD *)(v6 + 16), (8 * *(_DWORD *)(v6 + 8)));
    if (*(_DWORD *)(v7 + 8))
    {
      v11 = 0;
      do
      {
        if (a1)
        {
          v12 = &qword_25642E910;
          while (1)
          {
            v12 = (uint64_t *)*v12;
            if (!v12)
              break;
            if (v12 == a1)
            {
              v13 = a1;
              goto LABEL_26;
            }
          }
        }
        v13 = (uint64_t *)&unk_250800620;
LABEL_26:
        v14 = (__int128 *)v13[6];
        if (!v14)
          v14 = &xmmword_2542ABF08;
        *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v11) = (*((uint64_t (**)(uint64_t *, _QWORD, _QWORD))v14 + 5))(a1, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v11), (2 * *(_DWORD *)(v7 + 12)));
        ++v11;
      }
      while (v11 < *(unsigned int *)(v7 + 8));
    }
  }
  return v7;
}

unsigned __int16 *sub_236772B20(unsigned __int16 *result, _WORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a3 + 16);
    do
    {
      v6 = *v4++;
      v5 = v6;
      LODWORD(v6) = *result++;
      *a2++ = *(_WORD *)(v5 + 2 * v6);
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_236772B48(uint64_t ***a1, int a2, int a3)
{
  uint64_t **v3;
  uint64_t ***v6;
  uint64_t result;
  uint64_t **v8;
  uint64_t **v9;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = a1;
  result = 0;
  do
  {
    v8 = (uint64_t **)v3[7];
    if (!v8)
      break;
    if (*((_DWORD *)v3 + 3) == a2 && *((_DWORD *)v8 + 3) == a3)
    {
      v3[7] = v8[7];
      sub_23676C0A0(v8);
      v9 = *v6;
      *v6 = (uint64_t **)(*v6)[7];
      sub_23676C0A0(v9);
      v8 = *v6;
      result = 1;
    }
    else
    {
      v6 = (uint64_t ***)(v3 + 7);
    }
    v3 = v8;
  }
  while (v8);
  return result;
}

uint64_t sub_236772BE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  _DWORD *j;
  uint64_t v14;
  _DWORD *k;
  _DWORD *i;
  _DWORD *m;
  int *v18;
  int *v19;
  int *v20;

  if (a1)
  {
    v7 = &qword_25642E910;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == a1)
        goto LABEL_8;
    }
    a1 = (uint64_t *)&unk_250800620;
  }
  else
  {
    a1 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v8 = (uint64_t *)a1[9];
  if (!v8)
    v8 = (uint64_t *)&unk_25642E928;
  v9 = *v8;
  if (!*v8)
  {
LABEL_13:
    if ((_DWORD)a3)
    {
      v11 = a2 & 0xFFDFFFFF;
      if (!(_DWORD)a4)
      {
        v12 = 0;
        for (i = &unk_2507FE2A4; (v11 & ~*i) != *(i - 1); i += 4)
        {
          if (++v12 == 55)
            return 0;
        }
        v18 = &dword_2507FE2A0;
        goto LABEL_36;
      }
      if ((_DWORD)a4 == 1)
      {
        v12 = 0;
        for (j = &unk_2507FE614; (v11 & ~*j) != *(j - 1); j += 4)
        {
          if (++v12 == 7)
            return 0;
        }
        v18 = &dword_2507FE610;
LABEL_36:
        v19 = &v18[4 * v12];
        return *((_QWORD *)v19 + 1);
      }
      return 0;
    }
    if ((_DWORD)a4)
    {
      if ((_DWORD)a4 != 1)
        return 0;
      v14 = 0;
      for (k = &unk_2507FE234; (a2 & ~*k) != *(k - 1); k += 4)
      {
        if (++v14 == 7)
          return 0;
      }
      v20 = &dword_2507FE230;
    }
    else
    {
      v14 = 0;
      for (m = &unk_2507FDF84; (a2 & ~*m) != *(m - 1); m += 4)
      {
        if (++v14 == 43)
          return 0;
      }
      v20 = &dword_2507FDF80;
    }
    v19 = &v20[4 * v14];
    return *((_QWORD *)v19 + 1);
  }
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v9)(a2, a3, a4);
    if (result)
      return result;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_13;
  }
}

char *sub_236772DA0(uint64_t a1, float *a2, float *a3, unsigned int a4)
{
  unint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;

  v4 = *(unsigned int *)(a1 + 4);
  if ((v4 & 0x1000) != 0)
  {
    v8 = *(_DWORD *)(a1 + 4) & 7;
    if (!v8)
      v8 = 8;
    v9 = a4 / v8;
    *a3 = *a2 * 100.0;
    v10 = a2[1] * 255.0 + -128.0;
    a3[v9] = v10;
    v11 = a2[2] * 255.0 + -128.0;
    a3[2 * v9] = v11;
    v7 = 4;
  }
  else
  {
    *a3 = *a2 * 100.0;
    v5 = a2[1] * 255.0 + -128.0;
    a3[1] = v5;
    v6 = a2[2] * 255.0 + -128.0;
    a3[2] = v6;
    v7 = ((v4 >> 5) & 0x1C) + 12;
  }
  return (char *)a3 + v7;
}

char *sub_236772E70(uint64_t a1, float *a2, float *a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *(unsigned int *)(a1 + 4);
  if ((v4 & 0x1000) != 0)
  {
    v6 = *(_DWORD *)(a1 + 4) & 7;
    if (!v6)
      v6 = 8;
    v7 = a4 / v6;
    *a3 = *a2 * 2.0;
    a3[v7] = a2[1] * 2.0;
    a3[2 * v7] = a2[2] * 2.0;
    v5 = 4;
  }
  else
  {
    *a3 = *a2 * 2.0;
    a3[1] = a2[1] * 2.0;
    a3[2] = a2[2] * 2.0;
    v5 = ((v4 >> 5) & 0x1C) + 12;
  }
  return (char *)a3 + v5;
}

uint64_t sub_236772F00(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  float v8;

  v4 = *(unsigned int *)(a1 + 4);
  if ((v4 & 0x1000) != 0)
  {
    v6 = *(_DWORD *)(a1 + 4) & 7;
    v5 = 8;
    if (!v6)
      v6 = 8;
    v7 = a4 / v6;
    v8 = *(float *)(a2 + 4);
    *(double *)a3 = *(float *)a2 * 100.0;
    *(double *)(a3 + 8 * v7) = v8 * 255.0 + -128.0;
    *(double *)(a3 + 16 * v7) = *(float *)(a2 + 8) * 255.0 + -128.0;
  }
  else
  {
    *(double *)a3 = *(float *)a2 * 100.0;
    *(float64x2_t *)(a3 + 8) = vmlaq_f64((float64x2_t)vdupq_n_s64(0xC060000000000000), (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL), vcvtq_f64_f32(*(float32x2_t *)(a2 + 4)));
    v5 = ((v4 >> 4) & 0x38) + 24;
  }
  return a3 + v5;
}

char *sub_236772FB4(uint64_t a1, float32x2_t *a2, double *a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v7;
  unsigned int v8;

  v4 = *(unsigned int *)(a1 + 4);
  if ((v4 & 0x1000) != 0)
  {
    v6 = a2->f32[1];
    *a3 = a2->f32[0] * 1.99996948;
    v7 = v4 & 7;
    v5 = 8;
    if (!v7)
      v7 = 8;
    v8 = a4 / v7;
    a3[v8] = v6 * 1.99996948;
    a3[2 * v8] = a2[1].f32[0] * 1.99996948;
  }
  else
  {
    *(float64x2_t *)a3 = vmulq_f64(vcvtq_f64_f32(*a2), (float64x2_t)vdupq_n_s64(0x3FFFFFE000000000uLL));
    a3[2] = a2[1].f32[0] * 1.99996948;
    v5 = ((v4 >> 4) & 0x38) + 24;
  }
  return (char *)a3 + v5;
}

float *sub_236773048(uint64_t a1, uint64_t a2, float *__src, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(unsigned int *)(a1 + 4);
  v7 = (v6 >> 3) & 0xF;
  v8 = (v6 >> 7) & 7;
  v9 = (WORD1(v6) & 0x1F) - 5;
  v10 = 1.0;
  if (v9 <= 0x18)
    v10 = dbl_2368B3718[v9];
  v11 = (v6 >> 14) & 1;
  if ((v6 & 7) != 0)
    v12 = *(_DWORD *)(a1 + 4) & 7;
  else
    v12 = 8;
  if (!(_DWORD)v7)
  {
    v20 = 0.0;
    if (v8)
      goto LABEL_24;
    goto LABEL_22;
  }
  v13 = 0;
  v14 = (v6 >> 10) & 1;
  if (v14 == v11)
    v15 = 0;
  else
    v15 = v8;
  v16 = (v6 >> 3) & 0xF;
  v17 = a4 / v12;
  do
  {
    --v16;
    if (v14)
      v18 = v16;
    else
      v18 = v13;
    v19 = v10 * *(float *)(a2 + 4 * v18);
    if ((v6 & 0x2000) != 0)
      v19 = v10 - v19;
    v20 = v19;
    v21 = v15 + v13;
    if ((v6 & 0x1000) != 0)
      v21 = ((v15 + v13) * v17);
    __src[v21] = v20;
    ++v13;
  }
  while (v16);
  if (!v8)
  {
LABEL_22:
    if (v11)
    {
      memmove(__src + 1, __src, 4 * (v7 - 1));
      *__src = v20;
      LODWORD(v6) = *(_DWORD *)(a1 + 4);
    }
  }
LABEL_24:
  if ((v6 & 0x1000) != 0)
    v22 = 1;
  else
    v22 = v7 + v8;
  return &__src[v22];
}

double *sub_236773160(uint64_t a1, uint64_t a2, double *__src, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(unsigned int *)(a1 + 4);
  v7 = (v6 >> 3) & 0xF;
  v8 = (v6 >> 7) & 7;
  v9 = (WORD1(v6) & 0x1F) - 5;
  v10 = 1.0;
  if (v9 <= 0x18)
    v10 = dbl_2368B3718[v9];
  v11 = (v6 >> 14) & 1;
  if ((v6 & 7) != 0)
    v12 = *(_DWORD *)(a1 + 4) & 7;
  else
    v12 = 8;
  if (!(_DWORD)v7)
  {
    v19 = 0.0;
    if (v8)
      goto LABEL_25;
    goto LABEL_23;
  }
  v13 = 0;
  v14 = (v6 >> 10) & 1;
  if (v14 == v11)
    v15 = 0;
  else
    v15 = v8;
  v16 = (v6 >> 3) & 0xF;
  v17 = a4 / v12;
  do
  {
    --v16;
    if (v14)
      v18 = v16;
    else
      v18 = v13;
    if ((v6 & 0x2000) != 0)
      v19 = v10 - v10 * *(float *)(a2 + 4 * v18);
    else
      v19 = v10 * *(float *)(a2 + 4 * v18);
    v20 = v15 + v13;
    if ((v6 & 0x1000) != 0)
      v20 = ((v15 + v13) * v17);
    __src[v20] = v19;
    ++v13;
  }
  while (v16);
  if (!v8)
  {
LABEL_23:
    if (v11)
    {
      memmove(__src + 1, __src, 8 * (v7 - 1));
      *__src = v19;
      LODWORD(v6) = *(_DWORD *)(a1 + 4);
    }
  }
LABEL_25:
  if ((v6 & 0x1000) != 0)
    v21 = 1;
  else
    v21 = v7 + v8;
  return &__src[v21];
}

_WORD *sub_236773274(uint64_t a1, uint64_t a2, _WORD *__src, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(unsigned int *)(a1 + 4);
  v7 = (v6 >> 3) & 0xF;
  v8 = (v6 >> 7) & 7;
  v9 = (WORD1(v6) & 0x1F) - 5;
  v10 = 1.0;
  if (v9 <= 0x18)
    v10 = flt_2368B37E0[v9];
  v11 = (v6 >> 14) & 1;
  if ((v6 & 7) != 0)
    v12 = *(_DWORD *)(a1 + 4) & 7;
  else
    v12 = 8;
  if (!(_DWORD)v7)
  {
    v20 = 0.0;
    if (v8)
      goto LABEL_24;
    goto LABEL_22;
  }
  v13 = 0;
  v14 = (v6 >> 10) & 1;
  if (v14 == v11)
    v15 = 0;
  else
    v15 = v8;
  v16 = (v6 >> 3) & 0xF;
  v17 = a4 / v12;
  do
  {
    --v16;
    if (v14)
      v18 = v16;
    else
      v18 = v13;
    v19 = v10 * *(float *)(a2 + 4 * v18);
    if ((v6 & 0x2000) != 0)
      v19 = v10 - v19;
    v20 = v19;
    v21 = v15 + v13;
    if ((v6 & 0x1000) != 0)
      v21 = ((v15 + v13) * v17);
    __src[v21] = word_2368B2D80[(unint64_t)LODWORD(v19) >> 23]
               + ((LODWORD(v19) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(v19) >> 23]);
    ++v13;
  }
  while (v16);
  if (!v8)
  {
LABEL_22:
    if (v11)
    {
      memmove(__src + 1, __src, 2 * (v7 - 1));
      *__src = word_2368B2D80[(unint64_t)LODWORD(v20) >> 23]
             + ((LODWORD(v20) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(v20) >> 23]);
      LODWORD(v6) = *(_DWORD *)(a1 + 4);
    }
  }
LABEL_24:
  if ((v6 & 0x1000) != 0)
    v22 = 1;
  else
    v22 = v7 + v8;
  return &__src[v22];
}

char *sub_2367733D4(uint64_t a1, _WORD *a2, double *a3, int a4, double a5, double a6, double a7, double a8, double a9)
{
  unint64_t v9;
  double v10;
  unint64_t v11;
  uint64_t v12;

  v9 = *(unsigned int *)(a1 + 4);
  LOWORD(a5) = *a2;
  v11 = 0x40847ACCCCCCCCCDLL;
  v10 = (double)*(unint64_t *)&a5 / 655.35;
  LOWORD(v11) = a2[1];
  if ((v9 & 0x1000) != 0)
  {
    LOWORD(a9) = a2[2];
    *a3 = v10;
    a3[a4] = (double)v11 / 257.0 + -128.0;
    a3[2 * a4] = (double)*(unint64_t *)&a9 / 257.0 + -128.0;
    v12 = 8;
  }
  else
  {
    *a3 = v10;
    a3[1] = (double)v11 / 257.0 + -128.0;
    LOWORD(v10) = a2[2];
    a3[2] = (double)*(unint64_t *)&v10 / 257.0 + -128.0;
    v12 = ((v9 >> 4) & 0x38) + 24;
  }
  return (char *)a3 + v12;
}

unint64_t sub_236773484(uint64_t a1, unsigned __int16 *a2, float64x2_t *a3, unsigned int a4)
{
  int v5;
  unsigned int v9;
  unsigned int v10;
  float64_t v11;
  float64x2_t v12;
  float64_t v13;

  v5 = *(_DWORD *)(a1 + 4);
  if ((v5 & 0x1000) != 0)
  {
    v12 = 0uLL;
    v13 = 0.0;
    sub_236775F60(&v12, a2);
    v9 = v5 & 7;
    if ((v5 & 7) == 0)
      v9 = 8;
    v10 = a4 / v9;
    v11 = v12.f64[1];
    a3->f64[0] = v12.f64[0];
    a3->f64[v10] = v11;
    a3[v10].f64[0] = v13;
    return (unint64_t)&a3->f64[1];
  }
  else
  {
    sub_236775F60(a3, a2);
    return (unint64_t)&a3[1].f64[1] + (((unint64_t)*(unsigned int *)(a1 + 4) >> 4) & 0x38);
  }
}

char *sub_23677351C(uint64_t a1, _WORD *a2, float *a3, unsigned int a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  float64x2_t v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;

  LOWORD(a5) = *a2;
  v9 = (double)*(unint64_t *)&a5;
  LOWORD(a5) = a2[1];
  LOWORD(a9) = a2[2];
  v10 = (double)*(unint64_t *)&a5 / 257.0 + -128.0;
  v11 = (double)*(unint64_t *)&a9 / 257.0 + -128.0;
  v12 = *(unsigned int *)(a1 + 4);
  v13.f64[0] = v9 / 655.35;
  if ((v12 & 0x1000) != 0)
  {
    v16 = *(_DWORD *)(a1 + 4) & 7;
    if (!v16)
      v16 = 8;
    v17 = a4 / v16;
    v18 = v13.f64[0];
    *a3 = v18;
    v19 = v10;
    a3[v17] = v19;
    v20 = v11;
    a3[2 * v17] = v20;
    v15 = 4;
  }
  else
  {
    v13.f64[1] = v10;
    *(float32x2_t *)a3 = vcvt_f32_f64(v13);
    v14 = v11;
    a3[2] = v14;
    v15 = ((v12 >> 5) & 0x1C) + 12;
  }
  return (char *)a3 + v15;
}

uint64_t sub_2367735C4(uint64_t a1, unsigned __int16 *a2, float *a3, unsigned int a4)
{
  unint64_t v5;
  float v6;
  double v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  float v14;
  float64x2_t v15;
  double v16;

  v5 = *(unsigned int *)(a1 + 4);
  if ((v5 & 0x1000) != 0)
  {
    v15 = 0uLL;
    v16 = 0.0;
    sub_236775F60(&v15, a2);
    v9 = v15.f64[1];
    v10 = v15.f64[0];
    *a3 = v10;
    v11 = v5 & 7;
    if ((v5 & 7) == 0)
      v11 = 8;
    v12 = a4 / v11;
    v13 = v9;
    a3[v12] = v13;
    v14 = v16;
    a3[2 * v12] = v14;
    return (uint64_t)(a3 + 1);
  }
  else
  {
    v15 = 0uLL;
    v16 = 0.0;
    sub_236775F60(&v15, a2);
    *(float32x2_t *)a3 = vcvt_f32_f64(v15);
    v6 = v16;
    a3[2] = v6;
    return (uint64_t)a3 + ((v5 >> 5) & 0x1C) + 12;
  }
}

double *sub_236773680(uint64_t a1, uint64_t a2, double *__src, unsigned int a4, double a5, double a6)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;

  v8 = *(unsigned int *)(a1 + 4);
  v9 = (v8 >> 3) & 0xF;
  v10 = (v8 >> 7) & 7;
  v11 = (WORD1(v8) & 0x1F) - 5;
  if (v11 > 0x18)
    v12 = 65535.0;
  else
    v12 = dbl_2368B35E8[v11];
  v13 = (v8 >> 14) & 1;
  if ((v8 & 7) != 0)
    v14 = *(_DWORD *)(a1 + 4) & 7;
  else
    v14 = 8;
  if (!(_DWORD)v9)
  {
    v22 = 0.0;
    if (v10)
      goto LABEL_26;
    goto LABEL_24;
  }
  v15 = 0;
  v16 = (v8 >> 10) & 1;
  if (v16 == v13)
    v17 = 0;
  else
    v17 = v10;
  v18 = (v8 >> 3) & 0xF;
  v19 = a4 / v14;
  do
  {
    --v18;
    if (v16)
      v20 = v18;
    else
      v20 = v15;
    LOWORD(a6) = *(_WORD *)(a2 + 2 * v20);
    a6 = (double)*(unint64_t *)&a6 / v12;
    v21 = v17 + v15;
    if ((v8 & 0x2000) != 0)
      v22 = v12 - a6;
    else
      v22 = a6;
    if ((v8 & 0x1000) != 0)
      v21 = ((v17 + v15) * v19);
    ++v15;
    __src[v21] = v22;
  }
  while (v18);
  if (!v10)
  {
LABEL_24:
    if (v13)
    {
      memmove(__src + 1, __src, 8 * (v9 - 1));
      *__src = v22;
      LODWORD(v8) = *(_DWORD *)(a1 + 4);
    }
  }
LABEL_26:
  if ((v8 & 0x1000) != 0)
    v23 = 1;
  else
    v23 = v9 + v10;
  return &__src[v23];
}

float *sub_23677379C(uint64_t a1, uint64_t a2, float *__src, unsigned int a4, double a5, double a6)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;

  v8 = *(unsigned int *)(a1 + 4);
  v9 = (v8 >> 3) & 0xF;
  v10 = (v8 >> 7) & 7;
  v11 = (WORD1(v8) & 0x1F) - 5;
  if (v11 > 0x18)
    v12 = 65535.0;
  else
    v12 = dbl_2368B35E8[v11];
  v13 = (v8 >> 14) & 1;
  if ((v8 & 7) != 0)
    v14 = *(_DWORD *)(a1 + 4) & 7;
  else
    v14 = 8;
  if (!(_DWORD)v9)
  {
    v22 = 0.0;
    if (v10)
      goto LABEL_25;
    goto LABEL_23;
  }
  v15 = 0;
  v16 = (v8 >> 10) & 1;
  if (v16 == v13)
    v17 = 0;
  else
    v17 = v10;
  v18 = (v8 >> 3) & 0xF;
  v19 = a4 / v14;
  do
  {
    --v18;
    if (v16)
      v20 = v18;
    else
      v20 = v15;
    LOWORD(a6) = *(_WORD *)(a2 + 2 * v20);
    a6 = (double)*(unint64_t *)&a6 / v12;
    if ((v8 & 0x2000) != 0)
      a6 = v12 - a6;
    v21 = v17 + v15;
    v22 = a6;
    if ((v8 & 0x1000) != 0)
      v21 = ((v17 + v15) * v19);
    ++v15;
    __src[v21] = v22;
  }
  while (v18);
  if (!v10)
  {
LABEL_23:
    if (v13)
    {
      memmove(__src + 1, __src, 4 * (v9 - 1));
      *__src = v22;
      LODWORD(v8) = *(_DWORD *)(a1 + 4);
    }
  }
LABEL_25:
  if ((v8 & 0x1000) != 0)
    v23 = 1;
  else
    v23 = v9 + v10;
  return &__src[v23];
}

_WORD *sub_2367738BC(uint64_t a1, uint64_t a2, _WORD *__src, unsigned int a4, double a5, float a6)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v8 = *(unsigned int *)(a1 + 4);
  v9 = (v8 >> 3) & 0xF;
  v10 = (v8 >> 7) & 7;
  v11 = (WORD1(v8) & 0x1F) - 5;
  if (v11 > 0x18)
    v12 = 65535.0;
  else
    v12 = flt_2368B36B0[v11];
  v13 = (v8 >> 14) & 1;
  if ((v8 & 7) != 0)
    v14 = *(_DWORD *)(a1 + 4) & 7;
  else
    v14 = 8;
  if (!(_DWORD)v9)
  {
    v21 = 0.0;
    if (v10)
      goto LABEL_25;
    goto LABEL_23;
  }
  v15 = 0;
  v16 = (v8 >> 10) & 1;
  if (v16 == v13)
    v17 = 0;
  else
    v17 = v10;
  v18 = (v8 >> 3) & 0xF;
  v19 = a4 / v14;
  do
  {
    --v18;
    if (v16)
      v20 = v18;
    else
      v20 = v15;
    LOWORD(a6) = *(_WORD *)(a2 + 2 * v20);
    a6 = (float)LODWORD(a6) / v12;
    if ((v8 & 0x2000) != 0)
      a6 = v12 - a6;
    v21 = a6;
    v22 = v17 + v15;
    if ((v8 & 0x1000) != 0)
      v22 = ((v17 + v15) * v19);
    ++v15;
    __src[v22] = word_2368B2D80[(unint64_t)LODWORD(a6) >> 23]
               + ((LODWORD(a6) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(a6) >> 23]);
  }
  while (v18);
  if (!v10)
  {
LABEL_23:
    if (v13)
    {
      memmove(__src + 1, __src, 2 * (v9 - 1));
      *__src = word_2368B2D80[(unint64_t)LODWORD(v21) >> 23]
             + ((LODWORD(v21) & 0x7FFFFFu) >> byte_2368B3180[(unint64_t)LODWORD(v21) >> 23]);
      LODWORD(v8) = *(_DWORD *)(a1 + 4);
    }
  }
LABEL_25:
  if ((v8 & 0x1000) != 0)
    v23 = 1;
  else
    v23 = v9 + v10;
  return &__src[v23];
}

_BYTE *sub_236773A28(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = (65281 * *a2 + 0x800000) >> 24;
  return a3 + 1;
}

_BYTE *sub_236773A48(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = (65281 * *a2 + 0x800000) >> 24;
  return a3 + 2;
}

uint64_t sub_236773A68(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t result;

  result = a3 + 2;
  *(_BYTE *)(a3 + 1) = (65281 * *a2 + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773A88(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = (65281 * (*a2 ^ 0xFFFFu) + 0x800000) >> 24;
  return a3 + 1;
}

_BYTE *sub_236773AAC(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * ((16711936 * (unint64_t)((*a2 << 8) | 0x80u)) >> 32) + 0x800000) >> 24;
  a3[1] = (65281 * ((16711936 * (unint64_t)((a2[1] << 8) | 0x80u)) >> 32) + 0x800000) >> 24;
  result = a3 + 3;
  a3[2] = (65281 * ((16711936 * (unint64_t)((a2[2] << 8) | 0x80u)) >> 32) + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773B1C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  a3[1] = (65281 * ((16711936 * (unint64_t)((*a2 << 8) | 0x80u)) >> 32) + 0x800000) >> 24;
  a3[2] = (65281 * ((16711936 * (unint64_t)((a2[1] << 8) | 0x80u)) >> 32) + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * ((16711936 * (unint64_t)((a2[2] << 8) | 0x80u)) >> 32) + 0x800000) >> 24;
  return result;
}

_WORD *sub_236773B8C(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  *a3 = (16711936 * (unint64_t)((*a2 << 8) | 0x80u)) >> 32;
  a3[1] = (16711936 * (unint64_t)((a2[1] << 8) | 0x80u)) >> 32;
  a3[2] = (16711936 * (unint64_t)((a2[2] << 8) | 0x80u)) >> 32;
  return a3 + 3;
}

_BYTE *sub_236773BDC(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = *a2;
  a3[1] = a2[2];
  result = a3 + 3;
  a3[2] = a2[4];
  return result;
}

_BYTE *sub_236773BFC(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a3 = *a2;
  a3[1] = a2[2];
  a3[2] = a2[4];
  return a3 + 4;
}

_BYTE *sub_236773C1C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *result;

  a3[1] = *a2;
  a3[2] = a2[2];
  result = a3 + 4;
  a3[3] = a2[4];
  return result;
}

_BYTE *sub_236773C3C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a3 = a2[4];
  a3[1] = a2[2];
  a3[2] = *a2;
  return a3 + 4;
}

_BYTE *sub_236773C5C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *result;

  a3[1] = a2[4];
  a3[2] = a2[2];
  result = a3 + 4;
  a3[3] = *a2;
  return result;
}

_BYTE *sub_236773C7C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = a2[4];
  a3[1] = a2[2];
  result = a3 + 3;
  a3[2] = *a2;
  return result;
}

_BYTE *sub_236773C9C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * *a2 + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 3;
  a3[2] = (65281 * a2[2] + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773CDC(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = (65281 * *a2 + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  a3[2] = (65281 * a2[2] + 0x800000) >> 24;
  return a3 + 4;
}

_BYTE *sub_236773D1C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  a3[1] = (65281 * *a2 + 0x800000) >> 24;
  a3[2] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * a2[2] + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773D5C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = (65281 * a2[2] + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  a3[2] = (65281 * *a2 + 0x800000) >> 24;
  return a3 + 4;
}

_BYTE *sub_236773D9C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  a3[1] = (65281 * a2[2] + 0x800000) >> 24;
  a3[2] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * *a2 + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773DDC(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * a2[2] + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 3;
  a3[2] = (65281 * *a2 + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773E1C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * *a2 + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  a3[2] = (65281 * a2[2] + 0x800000) >> 24;
  a3[3] = (65281 * a2[3] + 0x800000) >> 24;
  a3[4] = (65281 * a2[4] + 0x800000) >> 24;
  result = a3 + 6;
  a3[5] = (65281 * a2[5] + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773E8C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * a2[5] + 0x800000) >> 24;
  a3[1] = (65281 * a2[4] + 0x800000) >> 24;
  a3[2] = (65281 * a2[3] + 0x800000) >> 24;
  a3[3] = (65281 * a2[2] + 0x800000) >> 24;
  a3[4] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 6;
  a3[5] = (65281 * *a2 + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773EFC(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * *a2 + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  a3[2] = (65281 * a2[2] + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * a2[3] + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773F4C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (-65281 * *a2 - 8388609) >> 24;
  a3[1] = (-65281 * a2[1] - 8388609) >> 24;
  a3[2] = (-65281 * a2[2] - 8388609) >> 24;
  result = a3 + 4;
  a3[3] = (-65281 * a2[3] - 8388609) >> 24;
  return result;
}

_BYTE *sub_236773F9C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * a2[3] + 0x800000) >> 24;
  a3[1] = (65281 * *a2 + 0x800000) >> 24;
  a3[2] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * a2[2] + 0x800000) >> 24;
  return result;
}

_BYTE *sub_236773FEC(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * a2[3] + 0x800000) >> 24;
  a3[1] = (65281 * a2[2] + 0x800000) >> 24;
  a3[2] = (65281 * a2[1] + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * *a2 + 0x800000) >> 24;
  return result;
}

_BYTE *sub_23677403C(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  _BYTE *result;

  *a3 = (65281 * a2[2] + 0x800000) >> 24;
  a3[1] = (65281 * a2[1] + 0x800000) >> 24;
  a3[2] = (65281 * *a2 + 0x800000) >> 24;
  result = a3 + 4;
  a3[3] = (65281 * a2[3] + 0x800000) >> 24;
  return result;
}

char *sub_23677408C(uint64_t a1, uint64_t a2, char *__src)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  uint64_t v18;

  v4 = *(unsigned int *)(a1 + 4);
  v5 = (v4 >> 3) & 0xF;
  v6 = (v4 >> 10) & 1;
  v7 = (v4 >> 7) & 7;
  v8 = (v4 >> 14) & 1;
  if (v6 == v8)
    v9 = 0;
  else
    v9 = (v4 >> 7) & 7;
  v10 = &__src[v9];
  if (v5)
  {
    v11 = 0;
    v12 = (int)((_DWORD)v4 << 18) >> 31;
    v13 = v5 - 1;
    do
    {
      if (v6)
        v14 = v13;
      else
        v14 = v11;
      v15 = 65281 * *(unsigned __int16 *)(a2 + 2 * v14) + 0x800000;
      v16 = v12 ^ HIBYTE(v15);
      v10[v11] = v12 ^ HIBYTE(v15);
      --v13;
      ++v11;
    }
    while (v13 != -1);
    v10 += v11;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  if ((_DWORD)v7)
    v17 = 1;
  else
    v17 = v8 == 0;
  if (!v17)
  {
    memmove(__src + 1, __src, v5 - 1);
    *__src = v16;
  }
  if (v6 == v8)
    v18 = v7;
  else
    v18 = 0;
  return &v10[v18];
}

uint64_t sub_236774150(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = (v4 >> 3) & 0xF;
  if (v5)
  {
    v6 = 0;
    v7 = (_BYTE *)(a3 + (((int)(((v4 >> 10) ^ (v4 >> 14)) << 31) >> 31) & (((v4 >> 7) & 7) * a4)));
    v8 = v5 - 1;
    do
    {
      if ((v4 & 0x400) != 0)
        v9 = v8;
      else
        v9 = v6;
      *v7 = ((int)(v4 << 18) >> 31) ^ ((65281 * *(unsigned __int16 *)(a2 + 2 * v9) + 0x800000) >> 24);
      v7 += a4;
      ++v6;
      --v8;
    }
    while (v8 != -1);
  }
  return a3 + 1;
}

_WORD *sub_2367741C4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = *a2;
  return a3 + 1;
}

_WORD *sub_2367741D4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = *a2;
  return a3 + 2;
}

uint64_t sub_2367741E4(uint64_t a1, _WORD *a2, uint64_t a3)
{
  *(_WORD *)(a3 + 2) = *a2;
  return a3 + 4;
}

_WORD *sub_2367741F4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = ~*a2;
  return a3 + 1;
}

_WORD *sub_236774208(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  *a3 = bswap32(*a2) >> 16;
  return a3 + 1;
}

_WORD *sub_236774220(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = *a2;
  a3[1] = a2[1];
  a3[2] = a2[2];
  return a3 + 3;
}

_WORD *sub_236774240(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = a2[2];
  a3[1] = a2[1];
  a3[2] = *a2;
  return a3 + 3;
}

_WORD *sub_236774260(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  *a3 = bswap32(*a2) >> 16;
  a3[1] = bswap32(a2[1]) >> 16;
  a3[2] = bswap32(a2[2]) >> 16;
  return a3 + 3;
}

_WORD *sub_236774298(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = *a2;
  a3[1] = a2[1];
  a3[2] = a2[2];
  return a3 + 4;
}

_WORD *sub_2367742B8(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a3[1] = a2[2];
  a3[2] = a2[1];
  a3[3] = *a2;
  return a3 + 4;
}

_WORD *sub_2367742D8(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a3[1] = *a2;
  a3[2] = a2[1];
  a3[3] = a2[2];
  return a3 + 4;
}

_WORD *sub_2367742F8(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = a2[2];
  a3[1] = a2[1];
  a3[2] = *a2;
  return a3 + 4;
}

_WORD *sub_236774318(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = *a2;
  a3[1] = a2[1];
  a3[2] = a2[2];
  a3[3] = a2[3];
  return a3 + 4;
}

_WORD *sub_236774340(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = ~*a2;
  a3[1] = ~a2[1];
  a3[2] = ~a2[2];
  a3[3] = ~a2[3];
  return a3 + 4;
}

_WORD *sub_236774378(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = a2[3];
  a3[1] = a2[2];
  a3[2] = a2[1];
  a3[3] = *a2;
  return a3 + 4;
}

_WORD *sub_2367743A0(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  *a3 = bswap32(*a2) >> 16;
  a3[1] = bswap32(a2[1]) >> 16;
  a3[2] = bswap32(a2[2]) >> 16;
  a3[3] = bswap32(a2[3]) >> 16;
  return a3 + 4;
}

_WORD *sub_2367743E8(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = *a2;
  a3[1] = a2[1];
  a3[2] = a2[2];
  a3[3] = a2[3];
  a3[4] = a2[4];
  a3[5] = a2[5];
  return a3 + 6;
}

_WORD *sub_236774420(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a3 = a2[5];
  a3[1] = a2[4];
  a3[2] = a2[3];
  a3[3] = a2[2];
  a3[4] = a2[1];
  a3[5] = *a2;
  return a3 + 6;
}

uint64_t sub_236774458(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  _WORD *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = (v4 >> 3) & 0xF;
  if (v5)
  {
    v6 = 0;
    v7 = (_WORD *)(a3 + ((((v4 >> 7) & 7) * a4) & ((int)(v4 << 21) >> 31)));
    v8 = v5 - 1;
    do
    {
      if ((v4 & 0x400) != 0)
        v9 = v8;
      else
        v9 = v6;
      v10 = *(unsigned __int16 *)(a2 + 2 * v9);
      v11 = bswap32(v10) >> 16;
      if ((v4 & 0x800) != 0)
        LOWORD(v10) = v11;
      *v7 = v10 ^ ((__int16)(4 * v4) >> 15);
      v7 = (_WORD *)((char *)v7 + a4);
      ++v6;
      --v8;
    }
    while (v8 != -1);
  }
  return a3 + 2;
}

char *sub_2367744C8(uint64_t a1, uint64_t a2, char *__src)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  uint64_t v19;

  v4 = *(unsigned int *)(a1 + 4);
  v5 = (v4 >> 3) & 0xF;
  v6 = (v4 >> 10) & 1;
  v7 = (v4 >> 7) & 7;
  v8 = (v4 >> 14) & 1;
  v9 = 2 * v7;
  if (v6 == v8)
    v10 = 0;
  else
    v10 = 2 * v7;
  v11 = &__src[v10];
  if (v5)
  {
    v12 = 0;
    v13 = v5 - 1;
    do
    {
      if (v6)
        v14 = v13;
      else
        v14 = v12;
      v15 = *(unsigned __int16 *)(a2 + 2 * v14);
      v16 = bswap32(v15) >> 16;
      if ((v4 & 0x800) != 0)
        v15 = v16;
      v17 = v15 ^ ((int)((_DWORD)v4 << 18) >> 31);
      *(_WORD *)v11 = v15 ^ ((__int16)(4 * v4) >> 15);
      v11 += 2;
      ++v12;
      --v13;
    }
    while (v13 != -1);
  }
  else
  {
    LOWORD(v17) = 0;
  }
  if ((_DWORD)v7)
    v18 = 1;
  else
    v18 = v8 == 0;
  if (!v18)
  {
    memmove(__src + 2, __src, 2 * (v5 - 1));
    *(_WORD *)__src = v17;
  }
  if (v6 == v8)
    v19 = v9;
  else
    v19 = 0;
  return &v11[v19];
}

float32_t sub_236774594(_DWORD *a1, float32x2_t *a2, float64_t *a3, unsigned int a4)
{
  double *v4;
  double *v5;
  unsigned int v6;
  unsigned int v7;
  double *v8;
  double *v9;
  float32_t result;
  float64x2_t v11;

  v4 = a3 + 1;
  v5 = a3 + 2;
  v6 = *a1 & 7;
  if (!v6)
    v6 = 8;
  v7 = a4 / v6;
  v8 = &a3[v7];
  v9 = &a3[2 * v7];
  if ((*a1 & 0x1000) != 0)
  {
    v4 = v8;
    v5 = v9;
  }
  result = (*v5 + 128.0) / 255.0;
  v11.f64[0] = *a3;
  v11.f64[1] = *v4 + 128.0;
  *a2 = vcvt_f32_f64(vdivq_f64(v11, (float64x2_t)xmmword_2368AF360));
  a2[1].f32[0] = result;
  return result;
}

float sub_236774628(_DWORD *a1, float *a2, float *a3, unsigned int a4)
{
  float *v4;
  float *v5;
  unsigned int v6;
  unsigned int v7;
  float result;

  if ((*a1 & 0x1000) != 0)
  {
    v6 = *a1 & 7;
    if ((*a1 & 7) == 0)
      v6 = 8;
    v7 = a4 / v6;
    *a2 = *a3 / 100.0;
    v5 = &a3[v7];
    v4 = &a3[2 * v7];
  }
  else
  {
    v4 = a3 + 2;
    *a2 = *a3 / 100.0;
    v5 = a3 + 1;
  }
  a2[1] = (float)(*v5 + 128.0) / 255.0;
  result = (float)(*v4 + 128.0) / 255.0;
  a2[2] = result;
  return result;
}

float32x2_t sub_2367746C4(_DWORD *a1, float32x2_t *a2, float64_t *a3, unsigned int a4)
{
  float64_t *v4;
  double *v5;
  unsigned int v6;
  unsigned int v7;
  float64_t *v8;
  double *v9;
  float64x2_t v10;
  float32_t v11;
  float32x2_t result;

  v4 = a3 + 1;
  v5 = a3 + 2;
  v6 = *a1 & 7;
  if (!v6)
    v6 = 8;
  v7 = a4 / v6;
  v8 = &a3[v7];
  v9 = &a3[2 * v7];
  if ((*a1 & 0x1000) != 0)
  {
    v4 = v8;
    v5 = v9;
  }
  v10.f64[0] = *a3;
  v10.f64[1] = *v4;
  v11 = *v5 / 1.99996948;
  result = vcvt_f32_f64(vdivq_f64(v10, (float64x2_t)vdupq_n_s64(0x3FFFFFE000000000uLL)));
  *a2 = result;
  a2[1].f32[0] = v11;
  return result;
}

float sub_236774740(_DWORD *a1, float *a2, float *a3, unsigned int a4)
{
  float *v4;
  float *v5;
  unsigned int v6;
  unsigned int v7;
  float result;

  if ((*a1 & 0x1000) != 0)
  {
    v6 = *a1 & 7;
    if ((*a1 & 7) == 0)
      v6 = 8;
    v7 = a4 / v6;
    *a2 = *a3 / 2.0;
    v5 = &a3[v7];
    v4 = &a3[2 * v7];
  }
  else
  {
    v4 = a3 + 2;
    *a2 = *a3 / 2.0;
    v5 = a3 + 1;
  }
  a2[1] = *v5 / 2.0;
  result = *v4 / 2.0;
  a2[2] = result;
  return result;
}

uint64_t sub_2367747D0(_DWORD *a1, float *__dst, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  int v21;
  float v22;
  float v23;
  uint64_t v24;

  v7 = *a1;
  v8 = (v7 >> 3) & 0xF;
  v9 = (v7 >> 7) & 7;
  v10 = (WORD1(v7) & 0x1F) - 5;
  v11 = 1.0;
  if (v10 <= 0x18)
    v11 = flt_2368B37E0[v10];
  v12 = (v7 >> 14) & 1;
  if ((_DWORD)v8)
  {
    v13 = 0;
    v14 = (v7 >> 10) & 1;
    if (v14 == v12)
      v15 = 0;
    else
      v15 = (v7 >> 7) & 7;
    v16 = *a1 & 7;
    if ((v7 & 7) == 0)
      v16 = 8;
    v17 = a4 / v16;
    if ((v7 & 0x1000) == 0)
      v17 = 1;
    v18 = v15 * v17;
    v19 = (v7 >> 3) & 0xF;
    do
    {
      v20 = *(float *)(a3 + 4 * v18);
      v18 += v17;
      --v19;
      if (v14)
        v21 = v19;
      else
        v21 = v13;
      v22 = v20 / v11;
      if ((v7 & 0x2000) != 0)
        v22 = 1.0 - v22;
      __dst[v21] = v22;
      ++v13;
    }
    while (v19);
  }
  if (!v9 && v12)
  {
    v23 = *__dst;
    memmove(__dst, __dst + 1, 4 * (v8 - 1));
    __dst[(v8 - 1)] = v23;
    LODWORD(v7) = *a1;
  }
  if ((v7 & 0x1000) != 0)
    v24 = 4;
  else
    v24 = 4 * (v8 + v9);
  return a3 + v24;
}

uint64_t sub_2367748E4(_DWORD *a1, float *__dst, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  int v21;
  double v22;
  float v23;
  float v24;
  uint64_t v25;

  v7 = *a1;
  v8 = (v7 >> 3) & 0xF;
  v9 = (v7 >> 7) & 7;
  v10 = (WORD1(v7) & 0x1F) - 5;
  v11 = 1.0;
  if (v10 <= 0x18)
    v11 = dbl_2368B3718[v10];
  v12 = (v7 >> 14) & 1;
  if ((_DWORD)v8)
  {
    v13 = 0;
    v14 = (v7 >> 10) & 1;
    if (v14 == v12)
      v15 = 0;
    else
      v15 = (v7 >> 7) & 7;
    v16 = *a1 & 7;
    if ((v7 & 7) == 0)
      v16 = 8;
    v17 = a4 / v16;
    if ((v7 & 0x1000) == 0)
      v17 = 1;
    v18 = v15 * v17;
    v19 = (v7 >> 3) & 0xF;
    do
    {
      v20 = *(double *)(a3 + 8 * v18);
      v18 += v17;
      --v19;
      if (v14)
        v21 = v19;
      else
        v21 = v13;
      v22 = v20 / v11;
      if ((v7 & 0x2000) != 0)
        v22 = 1.0 - v22;
      v23 = v22;
      __dst[v21] = v23;
      ++v13;
    }
    while (v19);
  }
  if (!v9 && v12)
  {
    v24 = *__dst;
    memmove(__dst, __dst + 1, 4 * (v8 - 1));
    __dst[(v8 - 1)] = v24;
    LODWORD(v7) = *a1;
  }
  if ((v7 & 0x1000) != 0)
    v25 = 8;
  else
    v25 = 8 * (v8 + v9);
  return a3 + v25;
}

uint64_t sub_2367749FC(unsigned int *a1, float *__dst, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  uint64_t v23;

  v7 = *a1;
  v8 = (v7 >> 3) & 0xF;
  v9 = (v7 >> 7) & 7;
  v10 = (WORD1(v7) & 0x1F) - 5;
  v11 = 1.0;
  if (v10 <= 0x18)
    v11 = flt_2368B37E0[v10];
  v12 = (v7 >> 14) & 1;
  if ((a1[1] & 7) != 0)
    v13 = a1[1] & 7;
  else
    v13 = 8;
  if ((_DWORD)v8)
  {
    v14 = 0;
    v15 = (v7 >> 10) & 1;
    if (v15 == v12)
      v16 = 0;
    else
      v16 = v9;
    v17 = (v7 >> 3) & 0xF;
    v18 = a4 / v13;
    do
    {
      v19 = v16 + v14;
      --v17;
      if (v15)
        v20 = v17;
      else
        v20 = v14;
      if ((v7 & 0x1000) != 0)
        v19 = ((v16 + v14) * v18);
      v21 = COERCE_FLOAT(dword_2368B2C80[(unint64_t)*(unsigned __int16 *)(a3 + 2 * v19) >> 10]+ dword_2368B0C00[(*(_WORD *)(a3 + 2 * v19) & 0x3FF)+ word_2368B2C00[(unint64_t)*(unsigned __int16 *)(a3 + 2 * v19) >> 10]])/ v11;
      if ((v7 & 0x2000) != 0)
        v21 = 1.0 - v21;
      ++v14;
      __dst[v20] = v21;
    }
    while (v17);
  }
  if (!v9 && v12)
  {
    v22 = *__dst;
    memmove(__dst, __dst + 1, 4 * (v8 - 1));
    __dst[(v8 - 1)] = v22;
    LODWORD(v7) = *a1;
  }
  if ((v7 & 0x1000) != 0)
    v23 = 2;
  else
    v23 = 2 * (v8 + v9);
  return a3 + v23;
}

unint64_t sub_236774B50(unsigned int *a1, __int16 *a2, double *a3, unsigned int a4)
{
  double v7;
  double v8[3];

  if ((*((_BYTE *)a1 + 1) & 0x10) != 0)
  {
    v7 = *(double *)((char *)a3 + a4);
    v8[0] = *a3;
    v8[1] = v7;
    v8[2] = *(double *)((char *)a3 + 2 * a4);
    sub_236775C50(a2, v8);
    return (unint64_t)(a3 + 1);
  }
  else
  {
    sub_236775C50(a2, a3);
    return (unint64_t)a3 + (((unint64_t)*a1 >> 4) & 0x38) + 24;
  }
}

unint64_t sub_236774BD0(unsigned int *a1, __int16 *a2, double *a3, unsigned int a4)
{
  double v7;
  double v8[3];

  if ((*((_BYTE *)a1 + 1) & 0x10) != 0)
  {
    v7 = *(double *)((char *)a3 + a4);
    v8[0] = *a3;
    v8[1] = v7;
    v8[2] = *(double *)((char *)a3 + 2 * a4);
    sub_236775DE4(a2, v8);
    return (unint64_t)(a3 + 1);
  }
  else
  {
    sub_236775DE4(a2, a3);
    return (unint64_t)a3 + (((unint64_t)*a1 >> 4) & 0x38) + 24;
  }
}

char *sub_236774C50(unsigned int *a1, __int16 *a2, float32x2_t *a3, unsigned int a4)
{
  unint64_t v6;
  float64_t v7;
  float64x2_t v9;
  double v10;

  v9 = 0uLL;
  v10 = 0.0;
  if ((*((_BYTE *)a1 + 1) & 0x10) != 0)
  {
    v7 = *(float *)((char *)a3->f32 + a4);
    v9.f64[0] = a3->f32[0];
    v9.f64[1] = v7;
    v10 = *(float *)((char *)a3->f32 + 2 * a4);
    sub_236775C50(a2, v9.f64);
    v6 = 4;
  }
  else
  {
    v9 = vcvtq_f64_f32(*a3);
    v10 = a3[1].f32[0];
    sub_236775C50(a2, v9.f64);
    v6 = (((unint64_t)*a1 >> 5) & 0x1C) + 12;
  }
  return (char *)a3 + v6;
}

unint64_t sub_236774CFC(unsigned int *a1, __int16 *a2, float32x2_t *a3, unsigned int a4)
{
  float64_t v7;
  float64x2_t v8;
  double v9;

  if ((*((_BYTE *)a1 + 1) & 0x10) != 0)
  {
    v7 = *(float *)((char *)a3->f32 + a4);
    v8.f64[0] = a3->f32[0];
    v8.f64[1] = v7;
    v9 = *(float *)((char *)a3->f32 + 2 * a4);
    sub_236775DE4(a2, v8.f64);
    return (unint64_t)a3 + 4;
  }
  else
  {
    v8 = vcvtq_f64_f32(*a3);
    v9 = a3[1].f32[0];
    sub_236775DE4(a2, v8.f64);
    return (unint64_t)&a3[1] + (((unint64_t)*a1 >> 5) & 0x1C) + 4;
  }
}

double *sub_236774DA0(uint64_t a1, __int16 *a2, double *a3)
{
  double v3;
  __int16 v4;

  v3 = *a3 * 65535.0 + 0.5;
  if (v3 <= 0.0)
  {
    v4 = 0;
  }
  else if (v3 >= 65535.0)
  {
    v4 = -1;
  }
  else
  {
    v4 = (COERCE_UNSIGNED_INT64(v3 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  a2[2] = v4;
  a2[1] = v4;
  *a2 = v4;
  return a3 + 1;
}

uint64_t sub_236774E14(_DWORD *a1, __int16 *__dst, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  float v21;
  double v22;
  __int16 v23;
  BOOL v24;
  __int16 v25;
  uint64_t v26;

  v7 = *a1;
  v8 = (v7 >> 3) & 0xF;
  v9 = (WORD1(v7) & 0x1F) - 5;
  if (v9 > 0x18)
    v10 = 65535.0;
  else
    v10 = dbl_2368B35E8[v9];
  v11 = (v7 >> 14) & 1;
  v12 = (v7 >> 7) & 7;
  if ((_DWORD)v8)
  {
    v13 = 0;
    v14 = (v7 >> 10) & 1;
    if (v14 == v11)
      v15 = 0;
    else
      v15 = (v7 >> 7) & 7;
    v16 = *a1 & 7;
    if ((v7 & 7) == 0)
      v16 = 8;
    v17 = a4 / v16;
    if ((v7 & 0x1000) == 0)
      v17 = 1;
    v18 = v15 * v17;
    v19 = (v7 >> 3) & 0xF;
    do
    {
      v20 = v19 - 1;
      if (!v14)
        v20 = v13;
      v21 = *(double *)(a3 + 8 * v18);
      v22 = v10 * v21 + 0.5;
      if (v22 <= 0.0)
      {
        v23 = 0;
      }
      else if (v22 >= 65535.0)
      {
        v23 = -1;
      }
      else
      {
        v23 = (COERCE_UNSIGNED_INT64(v22 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      __dst[v20] = v23 ^ ((__int16)(4 * v7) >> 15);
      v18 += v17;
      ++v13;
      --v19;
    }
    while (v19);
  }
  if (v12)
    v24 = 1;
  else
    v24 = v11 == 0;
  if (!v24)
  {
    v25 = *__dst;
    memmove(__dst, __dst + 1, 2 * (v8 - 1));
    __dst[(v8 - 1)] = v25;
    LODWORD(v7) = *a1;
  }
  if ((v7 & 0x1000) != 0)
    v26 = 8;
  else
    v26 = 8 * (v8 + v12);
  return a3 + v26;
}

uint64_t sub_236774F8C(_DWORD *a1, __int16 *__dst, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  double v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;

  v7 = *a1;
  v8 = (v7 >> 3) & 0xF;
  v9 = (v7 >> 7) & 7;
  v10 = (WORD1(v7) & 0x1F) - 5;
  if (v10 > 0x18)
    v11 = 65535.0;
  else
    v11 = dbl_2368B35E8[v10];
  v12 = (v7 >> 14) & 1;
  if ((_DWORD)v8)
  {
    v13 = 0;
    v14 = (v7 >> 10) & 1;
    if (v14 == v12)
      v15 = 0;
    else
      v15 = (v7 >> 7) & 7;
    v16 = *a1 & 7;
    if ((v7 & 7) == 0)
      v16 = 8;
    v17 = a4 / v16;
    if ((v7 & 0x1000) == 0)
      v17 = 1;
    v18 = v15 * v17;
    v19 = (v7 >> 3) & 0xF;
    do
    {
      v20 = v19 - 1;
      if (!v14)
        v20 = v13;
      v21 = v11 * *(float *)(a3 + 4 * v18) + 0.5;
      if (v21 <= 0.0)
      {
        v22 = 0;
      }
      else if (v21 >= 65535.0)
      {
        v22 = -1;
      }
      else
      {
        v22 = (COERCE_UNSIGNED_INT64(v21 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      __dst[v20] = v22 ^ ((__int16)(4 * v7) >> 15);
      v18 += v17;
      ++v13;
      --v19;
    }
    while (v19);
  }
  if (!v9 && v12)
  {
    v23 = *__dst;
    memmove(__dst, __dst + 1, 2 * (v8 - 1));
    __dst[(v8 - 1)] = v23;
    LODWORD(v7) = *a1;
  }
  if ((v7 & 0x1000) != 0)
    v24 = 4;
  else
    v24 = 4 * (v8 + v9);
  return a3 + v24;
}

uint64_t sub_2367750FC(unsigned int *a1, __int16 *__dst, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  double v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;

  v7 = *a1;
  v8 = (v7 >> 3) & 0xF;
  v9 = (v7 >> 7) & 7;
  v10 = (WORD1(v7) & 0x1F) - 5;
  if (v10 > 0x18)
    v11 = 65535.0;
  else
    v11 = flt_2368B36B0[v10];
  v12 = (v7 >> 14) & 1;
  if ((a1[1] & 7) != 0)
    v13 = a1[1] & 7;
  else
    v13 = 8;
  if ((_DWORD)v8)
  {
    v14 = 0;
    v15 = (v7 >> 10) & 1;
    if (v15 == v12)
      v16 = 0;
    else
      v16 = v9;
    v17 = a4 / v13;
    v18 = (v7 >> 3) & 0xF;
    do
    {
      v19 = v18 - 1;
      if (!v15)
        v19 = v14;
      v20 = v16 + v14;
      if ((v7 & 0x1000) != 0)
        v20 = ((v16 + v14) * v17);
      LODWORD(v21) = dword_2368B2C80[(unint64_t)*(unsigned __int16 *)(a3 + 2 * v20) >> 10]
                   + dword_2368B0C00[(*(_WORD *)(a3 + 2 * v20) & 0x3FF)
                                   + word_2368B2C00[(unint64_t)*(unsigned __int16 *)(a3 + 2 * v20) >> 10]];
      if ((v7 & 0x2000) != 0)
        v21 = v11 - v21;
      v22 = (float)(v11 * v21) + 0.5;
      if (v22 <= 0.0)
      {
        v23 = 0;
      }
      else if (v22 >= 65535.0)
      {
        v23 = -1;
      }
      else
      {
        v23 = (COERCE_UNSIGNED_INT64(v22 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
      }
      __dst[v19] = v23;
      ++v14;
      --v18;
    }
    while (v18);
  }
  if (!v9 && v12)
  {
    v24 = *__dst;
    memmove(__dst, __dst + 1, 2 * (v8 - 1));
    __dst[(v8 - 1)] = v24;
    LODWORD(v7) = *a1;
  }
  if ((v7 & 0x1000) != 0)
    v25 = 2;
  else
    v25 = 2 * (v8 + v9);
  return a3 + v25;
}

unsigned __int8 *sub_2367752B4(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  __int16 v4;

  result = a3 + 1;
  v4 = *a3 | (*a3 << 8);
  a2[2] = v4;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_2367752D0(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  __int16 v4;

  result = a3 + 2;
  v4 = *a3 | (*a3 << 8);
  a2[2] = v4;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_2367752EC(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  __int16 v4;

  result = a3 + 3;
  v4 = *a3 | (*a3 << 8);
  a2[2] = v4;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_236775308(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  __int16 v4;

  result = a3 + 1;
  v4 = ~(*a3 | (*a3 << 8));
  a2[2] = v4;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_236775328(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = *a3 | (*a3 << 8);
  a2[1] = a3[1] | (a3[1] << 8);
  return a3 + 2;
}

unsigned __int8 *sub_236775348(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = (((*a3 | (*a3 << 8)) << 8) | (*a3 << 8)) >> 8;
  a2[1] = (((a3[1] | (a3[1] << 8)) << 8) | (a3[1] << 8)) >> 8;
  a2[2] = (((a3[2] | (a3[2] << 8)) << 8) | (a3[2] << 8)) >> 8;
  return a3 + 3;
}

unsigned __int8 *sub_236775398(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = (((a3[1] | (a3[1] << 8)) << 8) | (a3[1] << 8)) >> 8;
  a2[1] = (((a3[2] | (a3[2] << 8)) << 8) | (a3[2] << 8)) >> 8;
  a2[2] = (((a3[3] | (a3[3] << 8)) << 8) | (a3[3] << 8)) >> 8;
  return a3 + 4;
}

unsigned __int16 *sub_2367753E8(uint64_t a1, _WORD *a2, unsigned __int16 *a3)
{
  *a2 = (*a3 | (*a3 << 8)) >> 8;
  a2[1] = (a3[1] | (a3[1] << 8)) >> 8;
  a2[2] = (a3[2] | (a3[2] << 8)) >> 8;
  return a3 + 3;
}

unsigned __int8 *sub_236775420(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = *a3 | (*a3 << 8);
  a2[1] = a3[1] | (a3[1] << 8);
  a2[2] = a3[2] | (a3[2] << 8);
  return a3 + 3;
}

unsigned __int8 *sub_23677544C(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  a2[2] = *a3 | (*a3 << 8);
  a2[1] = a3[1] | (a3[1] << 8);
  *a2 = a3[2] | (a3[2] << 8);
  return a3 + 3;
}

unsigned __int8 *sub_236775478(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  a2[2] = a3[1] | (a3[1] << 8);
  a2[1] = a3[2] | (a3[2] << 8);
  *a2 = a3[3] | (a3[3] << 8);
  return a3 + 4;
}

unsigned __int8 *sub_2367754A4(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = a3[1] | (a3[1] << 8);
  a2[1] = a3[2] | (a3[2] << 8);
  a2[2] = a3[3] | (a3[3] << 8);
  return a3 + 4;
}

unsigned __int8 *sub_2367754D0(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  a2[2] = *a3 | (*a3 << 8);
  a2[1] = a3[1] | (a3[1] << 8);
  *a2 = a3[2] | (a3[2] << 8);
  return a3 + 4;
}

unsigned __int8 *sub_2367754FC(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = *a3 | (*a3 << 8);
  a2[1] = a3[1] | (a3[1] << 8);
  a2[2] = a3[2] | (a3[2] << 8);
  a2[3] = a3[3] | (a3[3] << 8);
  return a3 + 4;
}

unsigned __int8 *sub_236775534(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  *a2 = *a3 ^ 0xFF | ((*a3 ^ 0xFF) << 8);
  a2[1] = a3[1] ^ 0xFF | ((a3[1] ^ 0xFF) << 8);
  a2[2] = a3[2] ^ 0xFF | ((a3[2] ^ 0xFF) << 8);
  a2[3] = a3[3] ^ 0xFF | ((a3[3] ^ 0xFF) << 8);
  return a3 + 4;
}

unsigned __int8 *sub_23677557C(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  a2[3] = *a3 | (*a3 << 8);
  *a2 = a3[1] | (a3[1] << 8);
  a2[1] = a3[2] | (a3[2] << 8);
  a2[2] = a3[3] | (a3[3] << 8);
  return a3 + 4;
}

unsigned __int8 *sub_2367755B4(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  a2[3] = *a3 | (*a3 << 8);
  a2[2] = a3[1] | (a3[1] << 8);
  a2[1] = a3[2] | (a3[2] << 8);
  *a2 = a3[3] | (a3[3] << 8);
  return a3 + 4;
}

unsigned __int8 *sub_2367755EC(uint64_t a1, _WORD *a2, unsigned __int8 *a3)
{
  a2[2] = *a3 | (*a3 << 8);
  a2[1] = a3[1] | (a3[1] << 8);
  *a2 = a3[2] | (a3[2] << 8);
  a2[3] = a3[3] | (a3[3] << 8);
  return a3 + 4;
}

uint64_t sub_236775624(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;

  v4 = *a1;
  v5 = (*a1 >> 3) & 0xF;
  if (v5)
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(a3 + (((int)(((v4 >> 10) ^ (v4 >> 14)) << 31) >> 31) & (((v4 >> 7) & 7) * a4)));
    v8 = v5 - 1;
    do
    {
      if ((v4 & 0x400) != 0)
        v9 = v8;
      else
        v9 = v6;
      *(_WORD *)(a2 + 2 * v9) = (*v7 | (*v7 << 8)) ^ ((__int16)(4 * v4) >> 15);
      v7 += a4;
      ++v6;
      --v8;
    }
    while (v8 != -1);
  }
  return a3 + 1;
}

unsigned __int8 *sub_236775690(unsigned int *a1, __int16 *__dst, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  BOOL v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *a1;
  v5 = (v4 >> 3) & 0xF;
  v6 = (v4 >> 10) & 1;
  v7 = (v4 >> 14) & 1;
  v8 = (v4 >> 7) & 7;
  if (v6 == v7)
    v9 = 0;
  else
    v9 = (v4 >> 7) & 7;
  v10 = (unsigned __int8 *)(a3 + v9);
  if (v5)
  {
    v11 = 0;
    v12 = (int)((_DWORD)v4 << 18) >> 31;
    v13 = v5 - 1;
    do
    {
      if (v6)
        v14 = v13;
      else
        v14 = v11;
      v15 = *v10++;
      __dst[v14] = (v15 | (v15 << 8)) ^ v12;
      ++v11;
      --v13;
    }
    while (v13 != -1);
  }
  if ((_DWORD)v8)
    v16 = 1;
  else
    v16 = v7 == 0;
  if (!v16)
  {
    v17 = *__dst;
    v18 = v5 - 1;
    memmove(__dst, __dst + 1, 2 * (v5 - 1));
    __dst[v18] = v17;
  }
  if (v6 == v7)
    v19 = v8;
  else
    v19 = 0;
  return &v10[v19];
}

_WORD *sub_236775750(uint64_t a1, _WORD *a2, __int16 *a3)
{
  _WORD *result;
  __int16 v4;

  result = a3 + 1;
  v4 = *a3;
  a2[2] = *a3;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

_WORD *sub_236775768(uint64_t a1, _WORD *a2, _WORD *a3)
{
  _WORD *result;
  __int16 v4;

  result = a3 + 1;
  v4 = ~*a3;
  a2[2] = v4;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

_WORD *sub_236775784(uint64_t a1, _WORD *a2, __int16 *a3)
{
  _WORD *result;
  __int16 v4;

  result = a3 + 4;
  v4 = *a3;
  a2[2] = *a3;
  a2[1] = v4;
  *a2 = v4;
  return result;
}

_WORD *sub_23677579C(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  return a3 + 2;
}

_WORD *sub_2367757B4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  return a3 + 3;
}

_WORD *sub_2367757D4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  a2[3] = a3[3];
  return a3 + 4;
}

_WORD *sub_2367757FC(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a2[2] = *a3;
  a2[1] = a3[1];
  *a2 = a3[2];
  return a3 + 3;
}

_WORD *sub_23677581C(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = a3[1];
  a2[1] = a3[2];
  a2[2] = a3[3];
  return a3 + 4;
}

_WORD *sub_23677583C(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a2[2] = a3[1];
  a2[1] = a3[2];
  *a2 = a3[3];
  return a3 + 4;
}

_WORD *sub_23677585C(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = ~*a3;
  a2[1] = ~a3[1];
  a2[2] = ~a3[2];
  a2[3] = ~a3[3];
  return a3 + 4;
}

_WORD *sub_236775894(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a2[3] = *a3;
  *a2 = a3[1];
  a2[1] = a3[2];
  a2[2] = a3[3];
  return a3 + 4;
}

_WORD *sub_2367758BC(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a2[3] = *a3;
  a2[2] = a3[1];
  a2[1] = a3[2];
  *a2 = a3[3];
  return a3 + 4;
}

_WORD *sub_2367758E4(uint64_t a1, _WORD *a2, _WORD *a3)
{
  a2[2] = *a3;
  a2[1] = a3[1];
  *a2 = a3[2];
  a2[3] = a3[3];
  return a3 + 4;
}

uint64_t sub_23677590C(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *a1;
  v5 = (*a1 >> 3) & 0xF;
  if (v5)
  {
    v6 = 0;
    v7 = (unsigned __int16 *)(a3 + ((((v4 >> 7) & 7) * a4) & ((int)(v4 << 21) >> 31)));
    v8 = v5 - 1;
    do
    {
      if ((v4 & 0x400) != 0)
        v9 = v8;
      else
        v9 = v6;
      v10 = *v7;
      v11 = bswap32(v10) >> 16;
      if ((v4 & 0x800) != 0)
        LOWORD(v10) = v11;
      *(_WORD *)(a2 + 2 * v9) = v10 ^ ((__int16)(4 * v4) >> 15);
      v7 = (unsigned __int16 *)((char *)v7 + a4);
      ++v6;
      --v8;
    }
    while (v8 != -1);
  }
  return a3 + 2;
}

uint64_t sub_23677597C(unsigned int *a1, __int16 *__dst, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;

  v4 = *a1;
  v5 = (v4 >> 3) & 0xF;
  v6 = (v4 >> 10) & 1;
  v7 = (v4 >> 14) & 1;
  v8 = (v4 >> 7) & 7;
  v9 = 2 * v8;
  if (v6 == v7)
    v10 = 0;
  else
    v10 = 2 * v8;
  v11 = (unsigned __int16 *)(a3 + v10);
  if (v5)
  {
    v12 = 0;
    v13 = v5 - 1;
    do
    {
      if (v6)
        v14 = v13;
      else
        v14 = v12;
      v16 = *v11++;
      v15 = v16;
      v17 = bswap32(v16) >> 16;
      if ((v4 & 0x800) != 0)
        v15 = v17;
      __dst[v14] = v15 ^ ((__int16)(4 * v4) >> 15);
      ++v12;
      --v13;
    }
    while (v13 != -1);
  }
  if ((_DWORD)v8)
    v18 = 1;
  else
    v18 = v7 == 0;
  if (!v18)
  {
    v19 = *__dst;
    v20 = v5 - 1;
    memmove(__dst, __dst + 1, 2 * (v5 - 1));
    __dst[v20] = v19;
  }
  if (v6 == v7)
    v21 = v9;
  else
    v21 = 0;
  return (uint64_t)v11 + v21;
}

double sub_236775A4C(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  v4 = *a2 / *(double *)&xmmword_25642E840;
  if (v4 <= 0.00885645168)
    v5 = v4 * 7.78703704 + 0.137931034;
  else
    v5 = pow(v4, 0.333333333);
  v6 = a2[1] / *((double *)&xmmword_25642E840 + 1);
  if (v6 <= 0.00885645168)
    v7 = v6 * 7.78703704 + 0.137931034;
  else
    v7 = pow(v6, 0.333333333);
  v8 = a2[2] / *(double *)&qword_25642E850;
  if (v8 <= 0.00885645168)
    v9 = v8 * 7.78703704 + 0.137931034;
  else
    v9 = pow(v8, 0.333333333);
  *a1 = v7 * 116.0 + -16.0;
  a1[1] = (v5 - v7) * 500.0;
  result = (v7 - v9) * 200.0;
  a1[2] = result;
  return result;
}

double sub_236775B70(float64x2_t *a1, double *a2)
{
  double v2;
  float64x2_t v3;
  double v4;
  double v5;
  double result;

  v2 = (*a2 + 16.0) / 116.0;
  v3.f64[0] = v2 + a2[1] * 0.002;
  v3.f64[1] = v2;
  v4 = v2 + a2[2] * -0.005;
  *a1 = vmulq_f64((float64x2_t)xmmword_25642E840, (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3FCA7B9611A7B961uLL), v3), (int8x16_t)vmulq_f64(vaddq_f64(v3, (float64x2_t)vdupq_n_s64(0xBFC1A7B9611A7B96)), (float64x2_t)vdupq_n_s64(0x3FC07004DED20922uLL)), (int8x16_t)vmulq_f64(v3, vmulq_f64(v3, v3))));
  if (v4 <= 0.206896552)
    v5 = (v4 + -0.137931034) * 0.128418549;
  else
    v5 = v4 * (v4 * v4);
  result = v5 * *(double *)&qword_25642E850;
  a1[1].f64[0] = result;
  return result;
}

__int16 *sub_236775C50(__int16 *result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  __int16 v6;
  double v7;
  __int16 v8;
  double v9;
  __int16 v10;

  if (*a2 >= 0.0)
    v2 = *a2;
  else
    v2 = 0.0;
  v3 = -128.0;
  if (a2[1] >= -128.0)
    v4 = a2[1];
  else
    v4 = -128.0;
  if (a2[2] >= -128.0)
    v3 = a2[2];
  if (v2 <= 100.0)
    v5 = v2 * 655.35 + 0.5;
  else
    v5 = 65535.5;
  if (v5 <= 0.0)
  {
    v6 = 0;
  }
  else if (v5 >= 65535.0)
  {
    v6 = -1;
  }
  else
  {
    v6 = (COERCE_UNSIGNED_INT64(v5 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = v6;
  if (v4 <= 127.0)
    v7 = (v4 + 128.0) * 257.0 + 0.5;
  else
    v7 = 65535.5;
  if (v7 <= 0.0)
  {
    v8 = 0;
  }
  else if (v7 >= 65535.0)
  {
    v8 = -1;
  }
  else
  {
    v8 = (COERCE_UNSIGNED_INT64(v7 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  result[1] = v8;
  if (v3 <= 127.0)
    v9 = (v3 + 128.0) * 257.0 + 0.5;
  else
    v9 = 65535.5;
  if (v9 <= 0.0)
  {
    v10 = 0;
  }
  else if (v9 >= 65535.0)
  {
    v10 = -1;
  }
  else
  {
    v10 = (COERCE_UNSIGNED_INT64(v9 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  result[2] = v10;
  return result;
}

__int16 *sub_236775DE4(__int16 *result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __int16 v8;
  double v9;
  BOOL v10;
  double v11;
  __int16 v12;
  double v13;
  __int16 v14;

  v2 = *a2;
  v3 = a2[1];
  if (v3 > 0.0)
  {
    v4 = a2[2];
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 0.0;
  }
  if (v2 <= 1.99996948)
    v5 = v2;
  else
    v5 = 1.99996948;
  if (v4 <= 1.99996948)
    v6 = v4;
  else
    v6 = 1.99996948;
  v7 = v5 * 32768.0 + 0.5;
  if (v5 < 0.0)
    v7 = 0.5;
  if (v7 <= 0.0)
  {
    v8 = 0;
  }
  else if (v7 >= 65535.0)
  {
    v8 = -1;
  }
  else
  {
    v8 = (COERCE_UNSIGNED_INT64(v7 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  *result = v8;
  v9 = v3 * 32768.0 + 0.5;
  v10 = v3 <= 1.99996948;
  v11 = 65535.5;
  if (v10)
    v11 = v9;
  if (v11 <= 0.0)
  {
    v12 = 0;
  }
  else if (v11 >= 65535.0)
  {
    v12 = -1;
  }
  else
  {
    v12 = (COERCE_UNSIGNED_INT64(v11 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  result[1] = v12;
  if (v6 >= 0.0)
    v13 = v6 * 32768.0 + 0.5;
  else
    v13 = 0.5;
  if (v13 <= 0.0)
  {
    v14 = 0;
  }
  else if (v13 >= 65535.0)
  {
    v14 = -1;
  }
  else
  {
    v14 = (COERCE_UNSIGNED_INT64(v13 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
  }
  result[2] = v14;
  return result;
}

double sub_236775F60(float64x2_t *a1, unsigned __int16 *a2)
{
  int32x2_t v2;
  int32x2_t v3;
  uint32x2_t v4;
  int64x2_t v5;
  float64x2_t v6;
  double result;

  v2.i32[0] = *a2;
  v2.i32[1] = a2[1];
  v3 = vadd_s32(v2, v2);
  v4 = vshr_n_u32((uint32x2_t)v2, 0xFuLL);
  v5.i64[0] = (int)(v3.i32[0] & 0xFFFEFFFF);
  v5.i64[1] = (int)(v3.i32[1] & 0xFFFEFFFF);
  v6 = vmulq_f64(vcvtq_f64_s64(v5), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  *a1 = vaddq_f64(v6, vcvtq_f64_s64(v5));
  result = (double)(2 * (a2[2] & 0x7FFF)) * 0.0000152587891 + (double)(a2[2] >> 15);
  a1[1].f64[0] = result;
  return result;
}

uint64_t sub_236775FC8(int a1, int a2)
{
  __int16 v2;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;

  v2 = a2;
  if ((a2 & 0xFF0000) != 0)
    return BYTE2(a2);
  v4 = sub_23677604C(a1);
  if (v4 == 4)
    v5 = 17;
  else
    v5 = 33;
  if (v4 <= 4)
    v6 = v5;
  else
    v6 = 7;
  if (v4 == 1)
    v7 = 33;
  else
    v7 = 17;
  if (v4 > 4)
    v7 = 6;
  if ((v2 & 0x800) != 0)
    v6 = v7;
  if (v4 == 4)
    v8 = 23;
  else
    v8 = 49;
  if (v4 <= 4)
    v9 = v8;
  else
    v9 = 7;
  if ((v2 & 0x400) != 0)
    return v9;
  else
    return v6;
}

uint64_t sub_23677604C(int a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 > 1282766367)
  {
    if (a1 <= 1380401695)
    {
      switch(a1)
      {
        case 1296255025:
          return v1;
        case 1296255026:
          return 2;
        case 1296255027:
        case 1296255034:
        case 1296255035:
        case 1296255036:
        case 1296255037:
        case 1296255038:
        case 1296255039:
        case 1296255040:
          return 3;
        case 1296255028:
          return 4;
        case 1296255029:
          return 5;
        case 1296255030:
          return 6;
        case 1296255031:
          return 7;
        case 1296255032:
          return 8;
        case 1296255033:
          return 9;
        case 1296255041:
          return 10;
        case 1296255042:
          return 11;
        case 1296255043:
          return 12;
        case 1296255044:
          return 13;
        case 1296255045:
          return 14;
        case 1296255046:
          return 15;
        default:
          if (a1 == 1282766411)
            return 4;
          return 3;
      }
      return v1;
    }
    return 3;
  }
  if (a1 <= 1111706705)
  {
    if (a1 > 910380113)
    {
      if (a1 <= 943934545)
      {
        if (a1 == 910380114)
          return 6;
        if (a1 == 927157330)
          return 7;
      }
      else
      {
        switch(a1)
        {
          case 943934546:
            return 8;
          case 960711762:
            return 9;
          case 1094929490:
            return 10;
        }
      }
      return 3;
    }
    if (a1 <= 860048465)
    {
      if (a1 == 826494034)
        return v1;
      if (a1 == 843271250)
        return 2;
      return 3;
    }
    if (a1 != 860048466)
    {
      if (a1 == 876825682)
        return 4;
      if (a1 == 893602898)
        return 5;
    }
    return 3;
  }
  if (a1 <= 1162038353)
  {
    if (a1 <= 1129142559)
    {
      if (a1 == 1111706706)
        return 11;
      if (a1 == 1128483922)
        return 12;
      return 3;
    }
    if (a1 != 1129142560)
    {
      if (a1 != 1129142603)
      {
        if (a1 == 1145261138)
          return 13;
        return 3;
      }
      return 4;
    }
    return 3;
  }
  if (a1 > 1212961567)
    return 3;
  if (a1 == 1162038354)
    return 14;
  if (a1 == 1178815570)
    return 15;
  if (a1 != 1196573017)
    return 3;
  return v1;
}

uint64_t sub_236776338(int a1)
{
  uint64_t result;

  if (a1 <= 1282766367)
  {
    if (a1 <= 1111706705)
    {
      if (a1 > 910380113)
      {
        if (a1 <= 943934545)
        {
          if (a1 == 910380114)
            return 20;
          if (a1 == 927157330)
            return 21;
        }
        else
        {
          switch(a1)
          {
            case 943934546:
              return 22;
            case 960711762:
              return 23;
            case 1094929490:
              return 24;
          }
        }
      }
      else if (a1 <= 860048465)
      {
        if (a1 == 826494034)
          return 15;
        if (a1 == 843271250)
          return 16;
      }
      else
      {
        switch(a1)
        {
          case 860048466:
            return 17;
          case 876825682:
            return 18;
          case 893602898:
            return 19;
        }
      }
    }
    else if (a1 <= 1162038353)
    {
      if (a1 <= 1129142559)
      {
        if (a1 == 1111706706)
          return 25;
        if (a1 == 1128483922)
          return 26;
      }
      else
      {
        switch(a1)
        {
          case 1129142560:
            return 5;
          case 1129142603:
            return 6;
          case 1145261138:
            return 27;
        }
      }
    }
    else if (a1 > 1212961567)
    {
      switch(a1)
      {
        case 1212961568:
          return 13;
        case 1213421088:
          return 12;
        case 1281450528:
          return 10;
      }
    }
    else
    {
      switch(a1)
      {
        case 1162038354:
          return 28;
        case 1178815570:
          return 29;
        case 1196573017:
          return 3;
      }
    }
    return 0;
  }
  if (a1 > 1380401695)
  {
    if (a1 > 1497588337)
    {
      if (a1 == 1497588338)
        return 7;
      if (a1 == 1501067552)
        return 14;
    }
    else
    {
      if (a1 == 1380401696)
        return 4;
      if (a1 == 1482250784)
        return 9;
    }
    return 0;
  }
  switch(a1)
  {
    case 1296255025:
      return 15;
    case 1296255026:
      return 16;
    case 1296255027:
      return 17;
    case 1296255028:
      return 18;
    case 1296255029:
      return 19;
    case 1296255030:
      return 20;
    case 1296255031:
      return 21;
    case 1296255032:
      return 22;
    case 1296255033:
      return 23;
    case 1296255034:
    case 1296255035:
    case 1296255036:
    case 1296255037:
    case 1296255038:
    case 1296255039:
    case 1296255040:
      return 0;
    case 1296255041:
      return 24;
    case 1296255042:
      return 25;
    case 1296255043:
      return 26;
    case 1296255044:
      return 27;
    case 1296255045:
      return 28;
    case 1296255046:
      return 29;
    default:
      if (a1 == 1282766368)
      {
        result = 8;
      }
      else
      {
        if (a1 != 1282766411)
          return 0;
        result = 11;
      }
      break;
  }
  return result;
}

uint64_t sub_236776694(uint64_t a1, unsigned int a2, _WORD *a3)
{
  uint64_t v5;
  _WORD *v6;
  unsigned __int16 v8;
  __int16 v9;

  if (!a2)
    return 1;
  v5 = a2;
  v6 = a3;
  while (a3)
  {
    v8 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a1 + 280))(a1, &v8, 2, 1) != 1)
      return 0;
    *v6 = bswap32(v8) >> 16;
LABEL_7:
    ++v6;
    if (!--v5)
      return 1;
  }
  v9 = 0;
  if ((*(unsigned int (**)(uint64_t, __int16 *, uint64_t, uint64_t))(a1 + 280))(a1, &v9, 2, 1) == 1)
    goto LABEL_7;
  return 0;
}

BOOL sub_236776750(uint64_t a1, float *a2)
{
  int v3;
  _BOOL8 result;
  float v5;
  float v6;

  v6 = 0.0;
  v3 = (*(uint64_t (**)(uint64_t, float *, uint64_t, uint64_t))(a1 + 280))(a1, &v6, 4, 1);
  result = 0;
  if (v3 == 1)
  {
    if (!a2)
      return 1;
    result = 0;
    v5 = COERCE_FLOAT(bswap32(LODWORD(v6)));
    v6 = v5;
    *a2 = v5;
    if (v5 <= 1.0e20 && v5 >= -1.0e20)
    {
      if (__fpclassifyf(v5) == 3)
        return 1;
      return __fpclassifyf(*a2) == 4;
    }
  }
  return result;
}

uint64_t sub_236776800(uint64_t a1, double *a2)
{
  int v3;
  uint64_t result;
  int v5;
  double v6;
  unsigned int v7;

  v7 = 0;
  v3 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a1 + 280))(a1, &v7, 4, 1);
  result = 0;
  if (v3 == 1)
  {
    if (a2)
    {
      v5 = bswap32(v7);
      v6 = (double)((v5 >> 31) | 1);
      if (v5 < 0)
        v5 = -v5;
      *a2 = ((double)(unsigned __int16)v5 * 0.0000152587891 + (double)HIWORD(v5)) * v6;
    }
    return 1;
  }
  return result;
}

uint64_t sub_236776898(uint64_t a1, float64x2_t *a2)
{
  int v3;
  uint64_t result;
  int32x2_t v5;
  int32x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int8x8_t v9;
  uint32x2_t v10;
  int8x8_t v11;
  float64x2_t v12;
  int v13;
  double v14;
  int8x8_t v15;
  unsigned int v16;

  v16 = 0;
  v15 = 0;
  v3 = (*(uint64_t (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a1 + 280))(a1, &v15, 12, 1);
  result = 0;
  if (v3 == 1)
  {
    if (a2)
    {
      v5 = (int32x2_t)vrev32_s8(v15);
      v6 = vcltz_s32(v5);
      v7.i64[0] = v6.i32[0] | 1;
      v7.i64[1] = v6.i32[1] | 1;
      v8 = vcvtq_f64_s64(v7);
      v9 = (int8x8_t)vabs_s32(v5);
      v10 = vshr_n_u32((uint32x2_t)v9, 0x10uLL);
      v11 = vand_s8(v9, (int8x8_t)0xFFFF0000FFFFLL);
      v7.i64[0] = v11.u32[0];
      v7.i64[1] = v11.u32[1];
      v12 = vmulq_f64(vcvtq_f64_s64(v7), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
      v7.i64[0] = v10.u32[0];
      v7.i64[1] = v10.u32[1];
      *a2 = vmulq_f64(vaddq_f64(v12, vcvtq_f64_s64(v7)), v8);
      v13 = bswap32(v16);
      v14 = (double)((v13 >> 31) | 1);
      if (v13 < 0)
        v13 = -v13;
      a2[1].f64[0] = ((double)(unsigned __int16)v13 * 0.0000152587891 + (double)HIWORD(v13)) * v14;
    }
    return 1;
  }
  return result;
}

uint64_t sub_236776980(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  _BYTE v6[4];

  v2 = (*(uint64_t (**)(void))(a1 + 304))();
  v3 = (v2 + 3) & 0xFFFFFFFC;
  v4 = v3 - v2;
  if (v3 == v2)
    return 1;
  if (v4 > 4)
    return 0;
  __memset_chk();
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(a1 + 312))(a1, v4, v6);
}

uint64_t sub_2367769FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  BOOL v11;
  uint64_t result;
  uint64_t v14;
  int v15;

  v9 = *(_DWORD *)(a2 + 76);
  v11 = v9 == 1633842036 || v9 == 1852662636 || v9 == 1818848875;
  if (v11 || a3 >= 3)
  {
    result = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return result;
  }
  if ((a3 & 0xFFFFFFFD) != 0 || !(*(_DWORD *)(a2 + 72) >> 26))
  {
    if ((_DWORD)a3 == 1 && v9 == 1886549106 && *(_DWORD *)(a2 + 80) == 1129142603)
      return sub_236776FA8((double *)a1, (uint64_t *)a2, a3, a4, a5, a6, a7, a8);
    v14 = a2;
    v15 = a3;
    return sub_236776B08(v14, v15, (double *)a1, a4, a5, a6, a7, a8);
  }
  if (sub_23676B5A0(a2))
  {
    v14 = a2;
    v15 = 1;
    return sub_236776B08(v14, v15, (double *)a1, a4, a5, a6, a7, a8);
  }
  *(_OWORD *)a1 = xmmword_2368AF330;
  *(_QWORD *)(a1 + 16) = 0x3F6782D38476F2A6;
  return 1;
}

uint64_t sub_236776B08(uint64_t a1, int a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  void *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t *v24;
  int32x2_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  void (*v37)(int32x2_t *);
  uint64_t *v38;
  uint64_t *v39;
  __int128 *v40;
  double v41;
  double v42;
  double v43;
  int v44;
  _QWORD __b[5];

  __b[4] = *MEMORY[0x24BDAC8D0];
  if (a1)
    v10 = *(uint64_t **)(a1 + 8);
  else
    v10 = 0;
  result = sub_23676B810(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    goto LABEL_47;
  v41 = 0.0;
  v42 = 0.0;
  v43 = 0.0;
  v12 = *(_DWORD *)(a1 + 80);
  sub_236776338(v12);
  v13 = sub_23677604C(v12);
  if (v12 <= 1196573016)
  {
    if (v12 == 1129142560)
    {
      v14 = 3;
      v15 = &unk_25642E7F0;
    }
    else
    {
      if (v12 != 1129142603)
        goto LABEL_46;
      v14 = 4;
      v15 = &unk_25642E7D8;
    }
  }
  else
  {
    switch(v12)
    {
      case 1196573017:
        v14 = 1;
        v15 = &unk_25642E908;
        break;
      case 1281450528:
        v14 = 3;
        v15 = &unk_25642E7E0;
        break;
      case 1380401696:
        v14 = 3;
        v15 = &unk_25642E8F0;
        break;
      default:
LABEL_46:
        result = 0;
LABEL_47:
        *a3 = 0.0;
        a3[1] = 0.0;
        a3[2] = 0.0;
        return result;
    }
  }
  if (v14 != v13)
    goto LABEL_46;
  v16 = 1.0 / (*(double *)&xmmword_25642E840 + *((double *)&xmmword_25642E840 + 1) + *(double *)&qword_25642E850);
  *(double *)&qword_25642E970 = *(double *)&xmmword_25642E840 * v16;
  *(double *)&qword_25642E978 = *((double *)&xmmword_25642E840 + 1) * v16;
  qword_25642E980 = *((_QWORD *)&xmmword_25642E840 + 1);
  v17 = sub_236783DB8(v10);
  if (!v17)
    goto LABEL_46;
  v18 = v17;
  sub_236769590(v17, 2.1);
  qmemcpy((void *)(v18 + 76), "tsba baL baL", 12);
  if (!sub_236783EB8(v18, "L"))
    goto LABEL_46;
  v19 = sub_23676D59C(v10, 3u, 3);
  if (!v19)
    goto LABEL_45;
  v20 = (uint64_t *)v19;
  v44 = 3;
  memset_pattern16(__b, &unk_2368AFAE0, 0x20uLL);
  v24 = sub_23676C698(v10, (int *)__b, 3u, 3, 0, v21, v22, v23);
  if (!v24)
    goto LABEL_44;
  v25 = v24;
  if (!sub_23676CE98((uint64_t)v24, (uint64_t (*)(_QWORD, _QWORD))sub_23676CE74, (uint64_t)&v44))
  {
    v37 = (void (*)(int32x2_t *))v25[5];
    if (v37)
      v37(v25);
    if (*v25)
    {
      v38 = &qword_25642E910;
      v39 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v38 = (uint64_t *)*v38;
        if (!v38)
          break;
        if (v38 == (uint64_t *)*v25)
        {
          v39 = (uint64_t *)*v25;
          break;
        }
      }
    }
    else
    {
      v39 = (uint64_t *)&unk_250800620;
    }
    v40 = (__int128 *)v39[6];
    if (!v40)
      v40 = &xmmword_2542ABF08;
    (*((void (**)(void))v40 + 2))();
    goto LABEL_44;
  }
  v25[1].i32[1] = 1768189472;
  v25[7] = (int32x2_t)*v20;
  *v20 = (uint64_t)v25;
  if (!sub_23676D8DC(v20)
    || !sub_23676A778(v18, 1093812784, (uint64_t)v20, v26, v27, v28, v29, v30))
  {
LABEL_44:
    sub_23676D934(v20);
LABEL_45:
    sub_236769708(v18);
    goto LABEL_46;
  }
  sub_23676D934(v20);
  v31 = sub_236785A68();
  sub_236769708(v18);
  if (!v31)
    goto LABEL_46;
  __b[0] = 0;
  __b[1] = 0x100000001;
  (*(void (**)(uint64_t, void *, double *, uint64_t, uint64_t, _QWORD *))(v31 + 8))(v31, v15, &v41, 1, 1, __b);
  v42 = 0.0;
  v43 = 0.0;
  if (v41 > 50.0)
    v41 = 50.0;
  sub_236784540(v31);
  if (a3)
  {
    v32 = (v41 + 16.0) / 116.0;
    v33 = v32 + v43 * -0.005;
    if (v33 <= 0.206896552)
      v34 = (v33 + -0.137931034) * 0.128418549;
    else
      v34 = v33 * (v33 * v33);
    v35 = v34 * *(double *)&qword_25642E850;
    v36.f64[0] = v32 + v42 * 0.002;
    v36.f64[1] = (v41 + 16.0) / 116.0;
    *(float64x2_t *)a3 = vmulq_f64((float64x2_t)xmmword_25642E840, (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3FCA7B9611A7B961uLL), v36), (int8x16_t)vmulq_f64(vaddq_f64(v36, (float64x2_t)vdupq_n_s64(0xBFC1A7B9611A7B96)), (float64x2_t)vdupq_n_s64(0x3FC07004DED20922uLL)), (int8x16_t)vmulq_f64(v36, vmulq_f64(v36, v36))));
    a3[2] = v35;
  }
  return 1;
}

uint64_t sub_236776FA8(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  _QWORD v20[3];
  _QWORD v21[2];

  if (!sub_23676B810((uint64_t)a2, 0, a3, a4, a5, a6, a7, a8))
  {
    *a1 = 0.0;
    a1[1] = 0.0;
    result = 1;
LABEL_13:
    a1[2] = 0.0;
    return result;
  }
  result = sub_236777148(a2, 0);
  if (!result)
  {
    *a1 = 0.0;
    a1[1] = 0.0;
    goto LABEL_13;
  }
  v11 = result;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  memset(v20, 0, sizeof(v20));
  v21[0] = 0;
  v21[1] = 0x100000001;
  (*(void (**)(uint64_t, _QWORD *, double *, uint64_t, uint64_t, _QWORD *))(result + 8))(result, v20, &v17, 1, 1, v21);
  if (v17 > 50.0)
    v17 = 50.0;
  v18 = 0.0;
  v19 = 0.0;
  sub_236784540(v11);
  if (a1)
  {
    v12 = (v17 + 16.0) / 116.0;
    v13 = v12 + v19 * -0.005;
    if (v13 <= 0.206896552)
      v14 = (v13 + -0.137931034) * 0.128418549;
    else
      v14 = v13 * (v13 * v13);
    v15 = v14 * *(double *)&qword_25642E850;
    v16.f64[0] = v12 + v18 * 0.002;
    v16.f64[1] = (v17 + 16.0) / 116.0;
    *(float64x2_t *)a1 = vmulq_f64((float64x2_t)xmmword_25642E840, (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3FCA7B9611A7B961uLL), v16), (int8x16_t)vmulq_f64(vaddq_f64(v16, (float64x2_t)vdupq_n_s64(0xBFC1A7B9611A7B96)), (float64x2_t)vdupq_n_s64(0x3FC07004DED20922uLL)), (int8x16_t)vmulq_f64(v16, vmulq_f64(v16, v16))));
    a1[2] = v15;
  }
  return 1;
}

uint64_t sub_236777148(uint64_t *a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v8[2];
  uint64_t v9;
  uint64_t *v10[4];
  _OWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if (a1)
    v4 = (uint64_t *)a1[1];
  else
    v4 = 0;
  v5 = (uint64_t *)sub_236783FA8(v4);
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = xmmword_2368B38C0;
  v11[1] = unk_2368B38D0;
  v10[0] = v5;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v5;
  v8[0] = 1;
  v8[1] = a2;
  v9 = 0x100000001;
  v6 = sub_236784600(v4, 4, v10, (uint64_t)v12, v8, (uint64_t)v11, 4849688, 4849688, 0x140u);
  sub_236769708((uint64_t)v5);
  return v6;
}

double sub_236777230(int a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double result;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23[3];
  double v24[11];

  result = 0.0;
  if (a1 >= 4)
  {
    v24[9] = v3;
    v24[10] = v4;
    v6 = 0.0;
    v7 = a1;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    do
    {
      v14 = *a2++;
      v15 = v14;
      v16 = *a3++;
      v6 = v6 + v15;
      v8 = v8 + v15 * v15;
      v13 = v13 + v15 * v15 * v15;
      v12 = v12 + v15 * (v15 * v15) * v15;
      v11 = v11 + v16;
      v10 = v10 + v16 * v15;
      v9 = v9 + v15 * v16 * v15;
      --v7;
    }
    while (v7);
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
    v24[0] = (double)a1;
    v24[1] = v6;
    v24[2] = v8;
    v24[3] = v6;
    v24[4] = v8;
    v24[5] = v13;
    v24[6] = v8;
    v24[7] = v13;
    v24[8] = v12;
    v23[0] = v11;
    v23[1] = v10;
    v23[2] = v9;
    v17 = sub_23676DE00(&v20, (uint64_t)v24, v23);
    result = 0.0;
    if (v17)
    {
      if (fabs(v22) >= 1.0e-10)
      {
        v19 = v22 * -4.0 * v20 + v21 * v21;
        if (v19 <= 0.0)
          return result;
        result = (sqrt(v19) - v21) / (v22 + v22);
        if (result > 50.0)
          result = 50.0;
        v18 = result < 0.0;
      }
      else
      {
        result = -v20 / v21;
        v18 = result > 0.0 || result < 50.0;
      }
      if (v18)
        return 0.0;
    }
  }
  return result;
}

const char *sub_236777368(uint64_t *a1, int a2)
{
  uint64_t *v2;
  const char **v3;
  const char *result;

  if (a1)
  {
    v2 = &qword_25642E910;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == a1)
        goto LABEL_8;
    }
    a1 = (uint64_t *)&unk_250800620;
  }
  else
  {
    a1 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v3 = (const char **)a1[10];
  if (!v3)
    v3 = (const char **)&unk_25642E948;
  result = *v3;
  if (*v3)
  {
    while (*(_DWORD *)result != a2)
    {
      result = (const char *)*((_QWORD *)result + 7);
      if (!result)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    result = "mrhc";
    do
    {
      if (*(_DWORD *)result == a2)
        break;
      result = (const char *)*((_QWORD *)result + 7);
    }
    while (result);
  }
  return result;
}

uint64_t sub_2367773F0(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  __int128 *v17;
  unsigned __int16 v19;
  __int16 v20;
  unsigned __int16 v21;
  __int16 v22;

  *a3 = 0;
  v8 = *(uint64_t **)(a1 + 40);
  if (v8)
  {
    v9 = &qword_25642E910;
    v10 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == v8)
      {
        v10 = v8;
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)&unk_250800620;
  }
  v11 = (__int128 *)v10[6];
  if (!v11)
    v11 = &xmmword_2542ABF08;
  v12 = (*((uint64_t (**)(void))v11 + 1))();
  if (v12)
  {
    v19 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v19, 2, 1) == 1)
    {
      v13 = v19;
      if (a4 != 32 || v19)
      {
LABEL_16:
        if (v13 == 768)
        {
          v22 = 0;
          if ((*(unsigned int (**)(uint64_t, __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v22, 2, 1) == 1)
          {
            if (sub_236776800(a2, (double *)v12))
            {
              if (sub_236776800(a2, (double *)(v12 + 8)))
              {
                *(_QWORD *)(v12 + 16) = 0x3FF0000000000000;
                if (sub_236776800(a2, (double *)(v12 + 24)))
                {
                  if (sub_236776800(a2, (double *)(v12 + 32)))
                  {
                    *(_QWORD *)(v12 + 40) = 0x3FF0000000000000;
                    if (sub_236776800(a2, (double *)(v12 + 48)))
                    {
                      if (sub_236776800(a2, (double *)(v12 + 56)))
                      {
                        *(_QWORD *)(v12 + 64) = 0x3FF0000000000000;
                        *a3 = 1;
                        return v12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_25;
      }
      v20 = 0;
      if ((*(unsigned int (**)(uint64_t, __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v20, 2, 1) == 1)
      {
        v21 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v21, 2, 1) == 1)
        {
          v13 = v21;
          goto LABEL_16;
        }
      }
    }
LABEL_25:
    v14 = *(uint64_t **)(a1 + 40);
    if (v14)
    {
      v15 = &qword_25642E910;
      v16 = &unk_250800620;
      while (1)
      {
        v15 = (uint64_t *)*v15;
        if (!v15)
          break;
        if (v15 == v14)
        {
          v16 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v16 = &unk_250800620;
    }
    v17 = (__int128 *)*((_QWORD *)v16 + 6);
    if (!v17)
      v17 = &xmmword_2542ABF08;
    (*((void (**)(void))v17 + 2))();
    return 0;
  }
  return v12;
}

BOOL sub_23677761C(uint64_t a1, uint64_t a2, double *a3)
{
  __int16 v6;
  __int16 v7;

  v6 = 768;
  if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v6) == 1
    && (v7 = 0, (*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v7) == 1)
    && sub_236783B94(a2, *a3, a3[1])
    && sub_236783B94(a2, a3[3], a3[4]))
  {
    return sub_236783B94(a2, a3[6], a3[7]);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_2367776C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677771C(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

_QWORD *sub_236777778(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  __int128 *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  __int128 *v16;
  unsigned int v18;

  *a3 = 0;
  v18 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v18, 4, 1) != 1)
    return 0;
  v6 = bswap32(v18);
  if (v6 > 0x10)
    return 0;
  v7 = *(uint64_t **)(a1 + 40);
  if (v7)
  {
    v8 = &qword_25642E910;
    v9 = &unk_250800620;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == v7)
      {
        v9 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v9 = &unk_250800620;
  }
  v10 = (__int128 *)*((_QWORD *)v9 + 6);
  if (!v10)
    v10 = &xmmword_2542ABF08;
  v11 = (_QWORD *)(*((uint64_t (**)(void))v10 + 4))();
  v12 = v11;
  if (v11)
  {
    *v11 = -1;
    v11[1] = -1;
    if ((*(unsigned int (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v11, 1, v6) == (_DWORD)v6)
    {
      *a3 = 1;
      return v12;
    }
    v13 = *(uint64_t **)(a1 + 40);
    if (v13)
    {
      v14 = &qword_25642E910;
      v15 = &unk_250800620;
      while (1)
      {
        v14 = (uint64_t *)*v14;
        if (!v14)
          break;
        if (v14 == v13)
        {
          v15 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v15 = &unk_250800620;
    }
    v16 = (__int128 *)*((_QWORD *)v15 + 6);
    if (!v16)
      v16 = &xmmword_2542ABF08;
    (*((void (**)(void))v16 + 2))();
    return 0;
  }
  return v12;
}

BOOL sub_2367778E4(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int32 v10;

  v5.i64[0] = -1;
  v5.i64[1] = -1;
  v6 = vceqq_s8(*a3, v5);
  v5.i8[1] = 2;
  v7 = vbicq_s8((int8x16_t)xmmword_2368AF370, v6);
  v5.i8[0] = vaddv_s8(*(int8x8_t *)v7.i8);
  v7.i64[0] = vextq_s8(v7, v7, 8uLL).u64[0];
  v7.i8[0] = vaddv_s8(*(int8x8_t *)v7.i8);
  v7.i32[0] = (unsigned __int16)(v5.i16[0] | (v7.i16[0] << 8));
  *(int8x8_t *)v7.i8 = vcnt_s8(*(int8x8_t *)v7.i8);
  v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8);
  v8 = v7.u32[0];
  v10 = v7.i32[0] << 24;
  return (*(unsigned int (**)(uint64_t, uint64_t, __int32 *))(a2 + 312))(a2, 4, &v10) == 1
      && (*(unsigned int (**)(uint64_t, uint64_t, int8x16_t *))(a2 + 312))(a2, v8, a3) != 0;
}

uint64_t sub_2367779A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_2367779F8(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t sub_236777A54(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  __int128 *v20;

  *a3 = 0;
  v8 = a4 >> 2;
  v9 = *(uint64_t **)(a1 + 40);
  if (v9)
  {
    v10 = &qword_25642E910;
    v11 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v9)
      {
        v11 = v9;
        break;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)&unk_250800620;
  }
  v12 = (__int128 *)v11[6];
  if (!v12)
    v12 = &xmmword_2542ABF08;
  v13 = (*((uint64_t (**)(void))v12 + 4))();
  if (v13)
  {
    if (a4 < 4)
    {
LABEL_17:
      *a3 = v8;
    }
    else
    {
      v14 = 0;
      if (v8 <= 1)
        v15 = 1;
      else
        v15 = v8;
      v16 = 8 * v15;
      while (sub_236776800(a2, (double *)(v13 + v14)))
      {
        v14 += 8;
        if (v16 == v14)
          goto LABEL_17;
      }
      v17 = *(uint64_t **)(a1 + 40);
      if (v17)
      {
        v18 = &qword_25642E910;
        v19 = &unk_250800620;
        while (1)
        {
          v18 = (uint64_t *)*v18;
          if (!v18)
            break;
          if (v18 == v17)
          {
            v19 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v19 = &unk_250800620;
      }
      v20 = (__int128 *)*((_QWORD *)v19 + 6);
      if (!v20)
        v20 = &xmmword_2542ABF08;
      (*((void (**)(void))v20 + 2))();
      return 0;
    }
  }
  return v13;
}

uint64_t sub_236777B94(uint64_t a1, uint64_t a2, double *a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int v8;

  if (!a4)
    return 1;
  v6 = a4;
  while (1)
  {
    v8 = bswap32(vcvtmd_s64_f64(*a3 * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) != 1)
      break;
    ++a3;
    if (!--v6)
      return 1;
  }
  return 0;
}

uint64_t sub_236777C30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_236777C88(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t sub_236777CE4(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  __int128 *v20;
  unsigned int v22;

  *a3 = 0;
  v8 = a4 >> 2;
  v9 = *(uint64_t **)(a1 + 40);
  if (v9)
  {
    v10 = &qword_25642E910;
    v11 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v9)
      {
        v11 = v9;
        break;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)&unk_250800620;
  }
  v12 = (__int128 *)v11[6];
  if (!v12)
    v12 = &xmmword_2542ABF08;
  v13 = (*((uint64_t (**)(void))v12 + 4))();
  if (v13)
  {
    if (a4 < 4)
    {
LABEL_17:
      *a3 = v8;
    }
    else
    {
      v14 = 0;
      if (v8 <= 1)
        v15 = 1;
      else
        v15 = v8;
      v16 = 8 * v15;
      while (1)
      {
        v22 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v22, 4, 1) != 1)
          break;
        *(double *)(v13 + v14) = (double)bswap32(v22) * 0.0000152587891;
        v14 += 8;
        if (v16 == v14)
          goto LABEL_17;
      }
      v17 = *(uint64_t **)(a1 + 40);
      if (v17)
      {
        v18 = &qword_25642E910;
        v19 = &unk_250800620;
        while (1)
        {
          v18 = (uint64_t *)*v18;
          if (!v18)
            break;
          if (v18 == v17)
          {
            v19 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v19 = &unk_250800620;
      }
      v20 = (__int128 *)*((_QWORD *)v19 + 6);
      if (!v20)
        v20 = &xmmword_2542ABF08;
      (*((void (**)(void))v20 + 2))();
      return 0;
    }
  }
  return v13;
}

uint64_t sub_236777E64(uint64_t a1, uint64_t a2, double *a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int v8;

  if (!a4)
    return 1;
  v6 = a4;
  while (1)
  {
    v8 = bswap32(vcvtmd_u64_f64(*a3 * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) != 1)
      break;
    ++a3;
    if (!--v6)
      return 1;
  }
  return 0;
}

uint64_t sub_236777F00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_236777F58(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t **sub_236777FB4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  uint64_t (**v12)(void);
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  __int128 *v21;
  __int128 *v23;

  v8 = sub_23676DEC0(*(uint64_t **)(a1 + 40), 1u);
  if (!v8)
    return v8;
  *a3 = 0;
  if ((_DWORD)a4 == -1)
    goto LABEL_19;
  v9 = *(uint64_t **)(a1 + 40);
  if (v9)
  {
    v10 = &qword_25642E910;
    v11 = &unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v9)
      {
        v11 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v11 = &unk_250800620;
  }
  v12 = (uint64_t (**)(void))*((_QWORD *)v11 + 6);
  if (!v12)
    v12 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v13 = (*v12)();
  if (!v13)
  {
LABEL_19:
    sub_23676E4C8(v8);
    return 0;
  }
  v14 = (char *)v13;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 280))(a2, v13, 1, a4) != (_DWORD)a4
    || (v14[a4] = 0, *a3 = 1, !sub_23676E010(v8, 0, 0, 0, 0, v14)))
  {
    sub_23676E4C8(v8);
    v18 = *(uint64_t **)(a1 + 40);
    if (v18)
    {
      v19 = &qword_25642E910;
      v20 = &unk_250800620;
      while (1)
      {
        v19 = (uint64_t *)*v19;
        if (!v19)
          break;
        if (v19 == v18)
        {
          v20 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v20 = &unk_250800620;
    }
    v21 = (__int128 *)*((_QWORD *)v20 + 6);
    if (!v21)
      v21 = &xmmword_2542ABF08;
    (*((void (**)(void))v21 + 2))();
    return 0;
  }
  v15 = *(uint64_t **)(a1 + 40);
  if (v15)
  {
    v16 = &qword_25642E910;
    v17 = &unk_250800620;
    while (1)
    {
      v16 = (uint64_t *)*v16;
      if (!v16)
        break;
      if (v16 == v15)
      {
        v17 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v17 = &unk_250800620;
  }
  v23 = (__int128 *)*((_QWORD *)v17 + 6);
  if (!v23)
    v23 = &xmmword_2542ABF08;
  (*((void (**)(void))v23 + 2))();
  return v8;
}

uint64_t sub_236778180(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  uint64_t (**v11)(void);
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  __int128 *v18;

  v6 = sub_23676E5E8(a3, 0, 0, word_2368B38E0, 0, 0);
  if (!(_DWORD)v6)
    return 0;
  v7 = v6;
  v8 = *(uint64_t **)(a1 + 40);
  if (v8)
  {
    v9 = &qword_25642E910;
    v10 = &unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == v8)
      {
        v10 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v10 = &unk_250800620;
  }
  v11 = (uint64_t (**)(void))*((_QWORD *)v10 + 6);
  if (!v11)
    v11 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v12 = (_BYTE *)(*v11)();
  if (!v12)
    return 0;
  v13 = v12;
  sub_23676E5E8(a3, 0, 0, word_2368B38E0, v12, v7);
  v14 = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(a2 + 312))(a2, v7, v13);
  v15 = *(uint64_t **)(a1 + 40);
  if (v15)
  {
    v16 = &qword_25642E910;
    v17 = &unk_250800620;
    while (1)
    {
      v16 = (uint64_t *)*v16;
      if (!v16)
        break;
      if (v16 == v15)
      {
        v17 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v17 = &unk_250800620;
  }
  v18 = (__int128 *)*((_QWORD *)v17 + 6);
  if (!v18)
    v18 = &xmmword_2542ABF08;
  (*((void (**)(void))v18 + 2))();
  return v14;
}

uint64_t **sub_2367782D0(uint64_t a1, uint64_t a2)
{
  return sub_23676E3C0(a2);
}

uint64_t **sub_2367782D8(uint64_t a1, uint64_t **a2)
{
  return sub_23676E4C8(a2);
}

uint64_t **sub_2367782E0(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  uint64_t (**v14)(void);
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  __int128 *v23;
  __int128 *v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  __int16 v31;
  unsigned int v32;

  *a3 = 0;
  v4 = a4 - 4;
  if (a4 < 4)
    return 0;
  v31 = 0;
  v32 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v32, 4, 1) != 1)
    return 0;
  v8 = bswap32(v32);
  v9 = v4 - v8;
  if (v4 < v8)
    return 0;
  v10 = sub_23676DEC0(*(uint64_t **)(a1 + 40), 1u);
  if (v10)
  {
    v11 = *(uint64_t **)(a1 + 40);
    if (v11)
    {
      v12 = &qword_25642E910;
      v13 = &unk_250800620;
      while (1)
      {
        v12 = (uint64_t *)*v12;
        if (!v12)
          break;
        if (v12 == v11)
        {
          v13 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v13 = &unk_250800620;
    }
    v14 = (uint64_t (**)(void))*((_QWORD *)v13 + 6);
    if (!v14)
      v14 = (uint64_t (**)(void))&xmmword_2542ABF08;
    v15 = (*v14)();
    if (v15)
    {
      v16 = (char *)v15;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 280))(a2, v15, 1, v8) == (_DWORD)v8
        && (v16[v8] = 0, sub_23676E010(v10, 0, 0, 0, 0, v16)))
      {
        v17 = *(uint64_t **)(a1 + 40);
        if (v17)
        {
          v18 = &qword_25642E910;
          v19 = &unk_250800620;
          while (1)
          {
            v18 = (uint64_t *)*v18;
            if (!v18)
              break;
            if (v18 == v17)
            {
              v19 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v19 = &unk_250800620;
        }
        v25 = (__int128 *)*((_QWORD *)v19 + 6);
        if (!v25)
          v25 = &xmmword_2542ABF08;
        (*((void (**)(void))v25 + 2))();
        v26 = v9 - 8;
        if (v9 < 8)
          goto LABEL_51;
        v32 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v32, 4, 1) != 1)
          goto LABEL_51;
        v32 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v32, 4, 1) != 1)
          goto LABEL_51;
        v27 = v32;
        v28 = bswap32(v32);
        if (v26 < 2 * (unint64_t)v28)
          goto LABEL_51;
        if (v32)
        {
          v29 = v28;
          while ((*(unsigned int (**)(uint64_t, __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v31, 2, 1))
          {
            if (!--v29)
            {
              v27 = 2 * v28;
              goto LABEL_45;
            }
          }
          goto LABEL_51;
        }
LABEL_45:
        if ((v26 - v27) < 0x46
          || (LOWORD(v32) = 0,
              (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v32, 2, 1) != 1)
          || (LOBYTE(v32) = 0,
              (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v32, 1, 1) != 1))
        {
LABEL_51:
          *a3 = 1;
          return v10;
        }
        v30 = 67;
        while ((*(unsigned int (**)(uint64_t, __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v31, 1, 1))
        {
          if (!--v30)
            goto LABEL_51;
        }
      }
      else
      {
        v20 = *(uint64_t **)(a1 + 40);
        if (v20)
        {
          v21 = &qword_25642E910;
          v22 = &unk_250800620;
          while (1)
          {
            v21 = (uint64_t *)*v21;
            if (!v21)
              break;
            if (v21 == v20)
            {
              v22 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v22 = &unk_250800620;
        }
        v23 = (__int128 *)*((_QWORD *)v22 + 6);
        if (!v23)
          v23 = &xmmword_2542ABF08;
        (*((void (**)(void))v23 + 2))();
      }
    }
    sub_23676E4C8(v10);
    return 0;
  }
  return v10;
}

uint64_t sub_2367785E8(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  __int128 *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  __int128 *v19;
  char *v20;
  const void *v21;
  unsigned int v22;
  size_t v23;
  __int128 *v24;
  uint64_t *v25;
  uint64_t *v26;
  void *v27;
  __int128 *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t *v39;
  void *v40;
  __int128 *v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  __int128 *v45;
  unsigned int v47;
  _OWORD v48[4];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  v6 = sub_23676E5E8(a3, 0, 0, word_2368B38E0, 0, 0);
  v7 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    if (v7)
    {
      v8 = &qword_25642E910;
      v9 = &unk_250800620;
      while (1)
      {
        v8 = (uint64_t *)*v8;
        if (!v8)
          break;
        if (v8 == v7)
        {
          v9 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v9 = &unk_250800620;
    }
    v12 = (__int128 *)*((_QWORD *)v9 + 6);
    if (!v12)
      v12 = &xmmword_2542ABF08;
    v13 = (*((uint64_t (**)(void))v12 + 4))();
    if (!v13)
      return 0;
    v14 = (char *)v13;
    v15 = *(uint64_t **)(a1 + 40);
    if (v15)
    {
      v16 = &qword_25642E910;
      v17 = &unk_250800620;
      while (1)
      {
        v16 = (uint64_t *)*v16;
        if (!v16)
          break;
        if (v16 == v15)
        {
          v17 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v17 = &unk_250800620;
    }
    v19 = (__int128 *)*((_QWORD *)v17 + 6);
    if (!v19)
      v19 = &xmmword_2542ABF08;
    v20 = (char *)(*((uint64_t (**)(void))v19 + 4))();
    if (!v20)
    {
      v18 = 0;
LABEL_61:
      v38 = *(uint64_t **)(a1 + 40);
      if (v38)
      {
        v39 = &qword_25642E910;
        v40 = &unk_250800620;
        while (1)
        {
          v39 = (uint64_t *)*v39;
          if (!v39)
            break;
          if (v39 == v38)
          {
            v40 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v40 = &unk_250800620;
      }
      v41 = (__int128 *)*((_QWORD *)v40 + 6);
      if (!v41)
        v41 = &xmmword_2542ABF08;
      (*((void (**)(void))v41 + 2))();
      goto LABEL_70;
    }
    sub_23676E5E8(a3, 0, 0, word_2368B38E0, v14, v6);
    v47 = 0;
    if (a3)
    {
      v21 = (const void *)sub_23676E694((uint64_t)a3, &v47, 0, 0);
      if (v21)
      {
        v22 = 4 * v6;
        if (4 * v6)
        {
          v23 = v47;
          if ((unint64_t)v47 + 4 > v22)
          {
            v23 = v22 - 4;
            v47 = v22 - 4;
          }
          memmove(v20, v21, v23);
          *(_DWORD *)&v20[v47 & 0xFFFFFFFC] = 0;
        }
      }
    }
  }
  else
  {
    if (v7)
    {
      v10 = &qword_25642E910;
      v11 = &unk_250800620;
      while (1)
      {
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        if (v10 == v7)
        {
          v11 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v11 = &unk_250800620;
    }
    v24 = (__int128 *)*((_QWORD *)v11 + 6);
    if (!v24)
      v24 = &xmmword_2542ABF08;
    v14 = (char *)(*((uint64_t (**)(void))v24 + 5))();
    v25 = *(uint64_t **)(a1 + 40);
    if (v25)
    {
      v26 = &qword_25642E910;
      v27 = &unk_250800620;
      while (1)
      {
        v26 = (uint64_t *)*v26;
        if (!v26)
          break;
        if (v26 == v25)
        {
          v27 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v27 = &unk_250800620;
    }
    v28 = (__int128 *)*((_QWORD *)v27 + 6);
    if (!v28)
      v28 = &xmmword_2542ABF08;
    v20 = (char *)(*((uint64_t (**)(void))v28 + 5))();
  }
  v29 = strlen(v14);
  v30 = (v29 + 1);
  v31 = bswap32(v30);
  v47 = v31;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v47) != 1
    || !(*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, v30, v14))
  {
    goto LABEL_59;
  }
  v47 = 0;
  v18 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v47) != 1)
    goto LABEL_60;
  v47 = v31;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v47) != 1)
    goto LABEL_59;
  if (v29 != -1)
  {
    v32 = (v29 + 1);
    v33 = (unsigned __int16 *)v20;
    while (1)
    {
      v34 = *v33;
      v33 += 2;
      LOWORD(v47) = bswap32(v34) >> 16;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v47) != 1)
        break;
      if (!--v32)
        goto LABEL_53;
    }
LABEL_59:
    v18 = 0;
    goto LABEL_60;
  }
LABEL_53:
  LOWORD(v47) = 0;
  v18 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v47) == 1)
  {
    LOBYTE(v47) = 0;
    v18 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v47) == 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(a2 + 312))(a2, 67, v48))
      {
        v35 = v29 + 2 * v30;
        v36 = v35 + 91;
        v37 = (v35 + 94) & 0xFFFFFFFC;
        if (v37 == v36 || (*(unsigned int (**)(uint64_t, _QWORD, _OWORD *))(a2 + 312))(a2, v37 - v36, v48))
        {
          v18 = 1;
          goto LABEL_60;
        }
      }
      goto LABEL_59;
    }
  }
LABEL_60:
  if (v14)
    goto LABEL_61;
LABEL_70:
  if (v20)
  {
    v42 = *(uint64_t **)(a1 + 40);
    if (v42)
    {
      v43 = &qword_25642E910;
      v44 = &unk_250800620;
      while (1)
      {
        v43 = (uint64_t *)*v43;
        if (!v43)
          break;
        if (v43 == v42)
        {
          v44 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v44 = &unk_250800620;
    }
    v45 = (__int128 *)*((_QWORD *)v44 + 6);
    if (!v45)
      v45 = &xmmword_2542ABF08;
    (*((void (**)(void))v45 + 2))();
  }
  return v18;
}

uint64_t **sub_236778AAC(uint64_t a1, uint64_t a2)
{
  return sub_23676E3C0(a2);
}

uint64_t **sub_236778AB4(uint64_t a1, uint64_t **a2)
{
  return sub_23676E4C8(a2);
}

uint64_t sub_236778ABC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ***v10;
  unsigned int v11;
  uint64_t v12;
  double v14;
  unsigned __int16 v15;

  *a3 = 0;
  LODWORD(v14) = 0;
  if ((*(unsigned int (**)(uint64_t, double *, uint64_t, uint64_t))(a2 + 280))(a2, &v14, 4, 1) != 1)
    return 0;
  v9 = bswap32(LODWORD(v14));
  if ((_DWORD)v9 == 1)
  {
    v15 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v15, 2, 1) == 1)
    {
      v11 = bswap32(v15);
      v14 = (double)BYTE2(v11) * 0.00390625 + (double)HIBYTE(v11);
      *a3 = 1;
      return sub_2367654B0(*(uint64_t **)(a1 + 40), 1);
    }
    return 0;
  }
  if ((_DWORD)v9)
  {
    if (!(v9 >> 15))
    {
      v12 = sub_236764590(*(uint64_t **)(a1 + 40), v9, 0, 0, 0, v6, v7, v8);
      v10 = (uint64_t ***)v12;
      if (!v12)
        return (uint64_t)v10;
      if (sub_236776694(a2, v9, *(_WORD **)(v12 + 48)))
      {
        *a3 = 1;
        return (uint64_t)v10;
      }
      sub_236765578(v10);
    }
    return 0;
  }
  v14 = 1.0;
  v10 = (uint64_t ***)sub_2367654B0(*(uint64_t **)(a1 + 40), 1);
  if (v10)
    *a3 = 1;
  return (uint64_t)v10;
}

BOOL sub_236778C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;

  if (*(_DWORD *)(a3 + 8) == 1 && (v5 = *(_QWORD *)(a3 + 16), *(_DWORD *)(v5 + 8) == 1))
  {
    v6 = *(double *)(v5 + 16);
    v11 = 0x1000000;
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(a2 + 312))(a2, 4, &v11) == 1)
    {
      v12 = bswap32(vcvtmd_s64_f64(v6 * 65536.0 + 0.5)) >> 8;
      return (*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v12) == 1;
    }
  }
  else
  {
    v13 = bswap32(*(_DWORD *)(a3 + 40));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v13) == 1)
    {
      v8 = *(unsigned int *)(a3 + 40);
      if (!(_DWORD)v8)
        return 1;
      v9 = *(unsigned __int16 **)(a3 + 48);
      while (1)
      {
        v10 = *v9++;
        v14 = bswap32(v10) >> 16;
        if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v14) != 1)
          break;
        if (!--v8)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_236778D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2367658C0(a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ***sub_236778D54(uint64_t a1, uint64_t ***a2)
{
  return sub_236765578(a2);
}

uint64_t sub_236778D5C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  LOWORD(v18[0]) = 0;
  if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v18, 2, 1) == 1)
  {
    v6 = LOWORD(v18[0]);
    LOWORD(v18[0]) = 0;
    if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v18, 2, 1) == 1)
    {
      v12 = bswap32(v6);
      v13 = HIWORD(v12);
      if (HIWORD(v12) < 5u)
      {
        v15 = 0;
        memset(v18, 0, sizeof(v18));
        v16 = dword_2368B38E8[v13];
        if (v16 <= 1)
          v16 = 1;
        v17 = 8 * v16;
        while (sub_236776800(a2, (double *)((char *)v18 + v15)))
        {
          v15 += 8;
          if (v17 == v15)
          {
            result = sub_2367654B0(*(uint64_t **)(a1 + 40), v13 + 1);
            *a3 = 1;
            return result;
          }
        }
      }
      else
      {
        sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unknown parametric curve type '%d'", v7, v8, v9, v10, v11, SBYTE2(v12));
      }
    }
  }
  return 0;
}

uint64_t sub_236778EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v10;
  uint64_t result;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  __int16 v21;
  unsigned int v22;

  v8 = *(unsigned int *)(*(_QWORD *)(a3 + 16) + 8);
  if (*(_DWORD *)(a3 + 8) > 1u || (int)v8 < 1)
  {
    v10 = "Multisegment or Inverted parametric curves cannot be written";
LABEL_9:
    sub_2367644B8(*(uint64_t **)(a1 + 40), 8, v10, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (v8 > 5)
  {
    v10 = "Unsupported parametric curve";
    goto LABEL_9;
  }
  v14 = dword_2368B38FC[v8];
  v20 = bswap32(v8 - 1) >> 16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v20) != 1)
    return 0;
  v21 = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v21);
  result = 0;
  if (v15 == 1)
  {
    v16 = 0;
    if (v14 <= 1)
      v17 = 1;
    else
      v17 = v14;
    v18 = 8 * v17;
    while (1)
    {
      v22 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)(a3 + 16) + v16 + 16) * 65536.0 + 0.5));
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v22) != 1)
        break;
      v16 += 8;
      if (v18 == v16)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_236778FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2367658C0(a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ***sub_236779000(uint64_t a1, uint64_t ***a2)
{
  return sub_236765578(a2);
}

uint64_t sub_236779008(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t (**v8)(void);
  uint64_t result;
  int8x16_t *v10;
  int v11;
  int8x16_t v12;
  unsigned int v13;
  int8x8_t v14[2];

  *a3 = 0;
  v5 = *(uint64_t **)(a1 + 40);
  if (v5)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == v5)
      {
        v7 = v5;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (uint64_t (**)(void))v7[6];
  if (!v8)
    v8 = (uint64_t (**)(void))&xmmword_2542ABF08;
  result = (*v8)();
  if (result)
  {
    v10 = (int8x16_t *)result;
    memset(v14, 0, 12);
    v11 = (*(uint64_t (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a2 + 280))(a2, v14, 12, 1);
    result = 0;
    if (v11 == 1)
    {
      v12 = (int8x16_t)vrev64q_s32((int32x4_t)vmovl_u16((uint16x4_t)vrev16_s8(*(int8x8_t *)((char *)v14 + 4))));
      *v10 = vextq_s8(v12, v12, 8uLL);
      v13 = (bswap32(v14[0].u16[0]) >> 16) - 1900;
      v10[1].i32[0] = (bswap32(v14[0].u16[1]) >> 16) - 1;
      v10[1].i32[1] = v13;
      v10[1].i64[1] = -1;
      v10[2].i32[0] = 0;
      *a3 = 1;
      return (uint64_t)v10;
    }
  }
  return result;
}

BOOL sub_236779120(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  _WORD v4[2];
  int16x4_t v5;

  v5 = vrev64_s16((int16x4_t)vrev16_s8((int8x8_t)vmovn_s32(*a3)));
  v4[1] = bswap32(a3[1].u16[0] + 1) >> 16;
  v4[0] = bswap32(a3[1].u16[2] + 1900) >> 16;
  return (*(unsigned int (**)(uint64_t, uint64_t, _WORD *))(a2 + 312))(a2, 12, v4) != 0;
}

uint64_t sub_236779190(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_2367791E8(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t *sub_236779244(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  int32x2_t *v13;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  uint64_t (**v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  __int128 *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t *v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  void *v43;
  __int128 *v44;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  _OWORD v59[2];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  LOBYTE(v50) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v50, 1, 1) != 1)
    return 0;
  v6 = v50;
  LOBYTE(v50) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v50, 1, 1) != 1)
    return 0;
  v7 = v50;
  LOBYTE(v50) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v50, 1, 1) != 1)
    return 0;
  v8 = v50;
  if (v50 == 1)
    return 0;
  LOBYTE(v50) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v50, 1, 1) != 1)
    return 0;
  v9 = 0;
  if ((v6 - 17) >= 0xFFFFFFF0 && (v7 - 17) >= 0xFFFFFFF0)
  {
    v9 = (uint64_t *)sub_23676D59C(*(uint64_t **)(a1 + 40), v6, v7);
    if (v9)
    {
      if (!sub_236776800(a2, (double *)&v50))
        goto LABEL_33;
      if (!sub_236776800(a2, &v51))
        goto LABEL_33;
      if (!sub_236776800(a2, &v52))
        goto LABEL_33;
      if (!sub_236776800(a2, &v53))
        goto LABEL_33;
      if (!sub_236776800(a2, &v54))
        goto LABEL_33;
      if (!sub_236776800(a2, &v55))
        goto LABEL_33;
      if (!sub_236776800(a2, &v56))
        goto LABEL_33;
      if (!sub_236776800(a2, &v57))
        goto LABEL_33;
      if (!sub_236776800(a2, &v58))
        goto LABEL_33;
      if ((_DWORD)v6 == 3 && !sub_23676DBBC((uint64_t)&v50))
      {
        v13 = sub_23676C120(*(uint64_t **)(a1 + 40), 3, 3u, &v50, 0);
        if (!v13)
          goto LABEL_33;
        v13[7] = (int32x2_t)*v9;
        *v9 = (uint64_t)v13;
        if (!sub_23676D8DC(v9))
          goto LABEL_33;
      }
      if (!sub_236783900(*(uint64_t **)(a1 + 40), a2, v9, v6))
        goto LABEL_33;
      if ((_DWORD)v7 && v8)
      {
        v10 = 1;
        v11 = v6;
        do
        {
          v10 *= v8;
          if (((v8 * (unint64_t)v10) & 0xFFFFFFFF00000000) != 0)
            goto LABEL_33;
          --v11;
        }
        while (v11);
        v12 = v7 * (unint64_t)v10;
        if ((v12 & 0xFFFFFFFF00000000) != 0 || (_DWORD)v12 == -1)
          goto LABEL_33;
        if (!(_DWORD)v12)
          goto LABEL_29;
        v15 = *(uint64_t **)(a1 + 40);
        if (v15)
        {
          v16 = &qword_25642E910;
          v17 = &unk_250800620;
          while (1)
          {
            v16 = (uint64_t *)*v16;
            if (!v16)
              break;
            if (v16 == v15)
            {
              v17 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v17 = &unk_250800620;
        }
        v18 = (__int128 *)*((_QWORD *)v17 + 6);
        if (!v18)
          v18 = &xmmword_2542ABF08;
        v19 = (*((uint64_t (**)(void))v18 + 4))();
        if (!v19)
          goto LABEL_33;
        v20 = v19;
        v21 = *(uint64_t **)(a1 + 40);
        if (v21)
        {
          v22 = &qword_25642E910;
          v23 = &unk_250800620;
          while (1)
          {
            v22 = (uint64_t *)*v22;
            if (!v22)
              break;
            if (v22 == v21)
            {
              v23 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v23 = &unk_250800620;
        }
        v24 = (uint64_t (**)(void))*((_QWORD *)v23 + 6);
        if (!v24)
          v24 = (uint64_t (**)(void))&xmmword_2542ABF08;
        v25 = (*v24)();
        if (v25)
        {
          v26 = v25;
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t))(a2 + 280))(a2, v25, v12, 1) == 1)
          {
            v27 = 0;
            do
            {
              *(_WORD *)(v20 + 2 * v27) = *(unsigned __int8 *)(v26 + v27) | (*(unsigned __int8 *)(v26 + v27) << 8);
              ++v27;
            }
            while (v12 != v27);
            v28 = *(uint64_t **)(a1 + 40);
            if (v28)
            {
              v29 = &qword_25642E910;
              v30 = &unk_250800620;
              while (1)
              {
                v29 = (uint64_t *)*v29;
                if (!v29)
                  break;
                if (v29 == v28)
                {
                  v30 = *(void **)(a1 + 40);
                  break;
                }
              }
            }
            else
            {
              v30 = &unk_250800620;
            }
            v34 = (__int128 *)*((_QWORD *)v30 + 6);
            if (!v34)
              v34 = &xmmword_2542ABF08;
            (*((void (**)(void))v34 + 2))();
            v35 = *(uint64_t **)(a1 + 40);
            v59[0] = vdupq_n_s32(v8);
            v59[1] = v59[0];
            v39 = sub_23676C698(v35, (int *)v59, v6, v7, v20, v36, v37, v38);
            v40 = sub_23676DB6C(v9, 1, (uint64_t)v39);
            v41 = *(uint64_t **)(a1 + 40);
            if (v41)
            {
              v42 = &qword_25642E910;
              v43 = &unk_250800620;
              while (1)
              {
                v42 = (uint64_t *)*v42;
                if (!v42)
                  break;
                if (v42 == v41)
                {
                  v43 = *(void **)(a1 + 40);
                  break;
                }
              }
            }
            else
            {
              v43 = &unk_250800620;
            }
            v49 = (__int128 *)*((_QWORD *)v43 + 6);
            if (!v49)
              v49 = &xmmword_2542ABF08;
            (*((void (**)(void))v49 + 2))();
            if (v40)
              goto LABEL_29;
            goto LABEL_33;
          }
          v31 = *(uint64_t **)(a1 + 40);
          if (v31)
          {
            v32 = &qword_25642E910;
            v33 = &unk_250800620;
            while (1)
            {
              v32 = (uint64_t *)*v32;
              if (!v32)
                break;
              if (v32 == v31)
              {
                v33 = *(void **)(a1 + 40);
                break;
              }
            }
          }
          else
          {
            v33 = &unk_250800620;
          }
          v44 = (__int128 *)*((_QWORD *)v33 + 6);
          if (!v44)
            v44 = &xmmword_2542ABF08;
          (*((void (**)(void))v44 + 2))();
        }
        v45 = *(uint64_t **)(a1 + 40);
        if (v45)
        {
          v46 = &qword_25642E910;
          v47 = &unk_250800620;
          while (1)
          {
            v46 = (uint64_t *)*v46;
            if (!v46)
              break;
            if (v46 == v45)
            {
              v47 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v47 = &unk_250800620;
        }
        v48 = (__int128 *)*((_QWORD *)v47 + 6);
        if (!v48)
          v48 = &xmmword_2542ABF08;
        (*((void (**)(void))v48 + 2))();
        goto LABEL_33;
      }
LABEL_29:
      if (!sub_236783900(*(uint64_t **)(a1 + 40), a2, v9, v7))
      {
LABEL_33:
        sub_23676D934(v9);
        return 0;
      }
      *a3 = 1;
    }
  }
  return v9;
}

uint64_t sub_2367797BC(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  unsigned int v36;

  v11 = *(_QWORD *)a3;
  v12 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if (v12 == 1835103334)
  {
    v13 = *(_QWORD *)(v11 + 48);
    v11 = *(_QWORD *)(v11 + 56);
    if (!v11)
    {
      v15 = 0;
      v14 = 0;
      goto LABEL_21;
    }
    v12 = *(_DWORD *)(v11 + 8);
  }
  else
  {
    v13 = 0;
  }
  if (v12 == 1668707188)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v11 = *(_QWORD *)(v11 + 56);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 8);
      goto LABEL_9;
    }
    v15 = 0;
LABEL_21:
    v17 = 0;
    goto LABEL_22;
  }
  v14 = 0;
LABEL_9:
  if (v12 == 1668052340)
  {
    v15 = *(_QWORD **)(v11 + 48);
    v11 = *(_QWORD *)(v11 + 56);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 8);
      goto LABEL_13;
    }
    v17 = 0;
    if (v15)
      goto LABEL_24;
LABEL_22:
    v18 = 0;
    goto LABEL_25;
  }
  v15 = 0;
LABEL_13:
  if (v12 != 1668707188)
  {
    v16 = (uint64_t **)v11;
    goto LABEL_18;
  }
  v16 = *(uint64_t ***)(v11 + 56);
  if (v16)
  {
LABEL_18:
    sub_2367644B8(*v16, 8, "LUT is not suitable to be saved as LUT8", a4, a5, a6, a7, a8, v35);
    return 0;
  }
  v17 = *(_QWORD *)(v11 + 48);
  if (!v15)
    goto LABEL_22;
LABEL_24:
  v18 = *(_DWORD *)(v15[1] + 20);
LABEL_25:
  LOBYTE(v36) = a3[2];
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v36) != 1)
    return 0;
  LOBYTE(v36) = a3[3];
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v36) != 1)
    return 0;
  LOBYTE(v36) = v18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v36) != 1)
    return 0;
  LOBYTE(v36) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v36) != 1)
    return 0;
  if (v13)
  {
    v36 = bswap32(vcvtmd_s64_f64(**(double **)v13 * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 8) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 16) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 24) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 32) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 40) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 48) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 56) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v19 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v13 + 64) * 65536.0 + 0.5));
  }
  else
  {
    v36 = 256;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 256;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) != 1)
      return 0;
    v19 = 256;
  }
  v36 = v19;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v36) == 1
    && sub_2367837C0(*(uint64_t **)(a1 + 40), a2, a3[2], v14, v20, v21, v22, v23))
  {
    v28 = a3[3];
    if (!v18 || !v28)
      return sub_2367837C0(*(uint64_t **)(a1 + 40), a2, v28, v17, v24, v25, v26, v27);
    v29 = a3[2];
    if (v29)
    {
      v30 = 1;
      while (1)
      {
        v30 *= v18;
        if (((v18 * (unint64_t)v30) & 0xFFFFFFFF00000000) != 0)
          return 0;
        if (!--v29)
          goto LABEL_58;
      }
    }
    v30 = 1;
LABEL_58:
    v31 = v28 * (unint64_t)v30;
    if ((v31 & 0xFFFFFFFF00000000) != 0 || (_DWORD)v31 == -1)
      return 0;
    if (!v15 || !(_DWORD)v31)
      return sub_2367837C0(*(uint64_t **)(a1 + 40), a2, v28, v17, v24, v25, v26, v27);
    v32 = 0;
    v33 = 2 * v31;
    while (1)
    {
      LOBYTE(v36) = (65281 * *(unsigned __int16 *)(*v15 + v32) + 0x800000) >> 24;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v36) != 1)
        break;
      v32 += 2;
      if (v33 == v32)
      {
        v28 = a3[3];
        return sub_2367837C0(*(uint64_t **)(a1 + 40), a2, v28, v17, v24, v25, v26, v27);
      }
    }
  }
  return 0;
}

uint64_t sub_236779D98(uint64_t a1, uint64_t a2)
{
  return sub_23676DA44(a2);
}

_QWORD *sub_236779DA0(uint64_t a1, _QWORD *a2)
{
  return sub_23676D934(a2);
}

uint64_t *sub_236779DA8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  int32x2_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  void *v25;
  __int128 *v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  int32x2_t *v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  void *v38;
  uint64_t *v39;
  void *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[2];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  LOBYTE(v44) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v44, 1, 1) != 1)
    return 0;
  v6 = v44;
  LOBYTE(v44) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v44, 1, 1) != 1)
    return 0;
  v7 = v44;
  LOBYTE(v44) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v44, 1, 1) != 1)
    return 0;
  v8 = v44;
  LOBYTE(v44) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v44, 1, 1) != 1)
    return 0;
  v9 = 0;
  if ((v6 - 17) >= 0xFFFFFFF0 && (v7 - 17) >= 0xFFFFFFF0)
  {
    v9 = (uint64_t *)sub_23676D59C(*(uint64_t **)(a1 + 40), v6, v7);
    if (v9)
    {
      if (!sub_236776800(a2, (double *)&v44))
        goto LABEL_65;
      if (!sub_236776800(a2, &v45))
        goto LABEL_65;
      if (!sub_236776800(a2, &v46))
        goto LABEL_65;
      if (!sub_236776800(a2, &v47))
        goto LABEL_65;
      if (!sub_236776800(a2, &v48))
        goto LABEL_65;
      if (!sub_236776800(a2, &v49))
        goto LABEL_65;
      if (!sub_236776800(a2, &v50))
        goto LABEL_65;
      if (!sub_236776800(a2, &v51))
        goto LABEL_65;
      if (!sub_236776800(a2, &v52))
        goto LABEL_65;
      if ((_DWORD)v6 == 3 && !sub_23676DBBC((uint64_t)&v44))
      {
        v10 = sub_23676C120(*(uint64_t **)(a1 + 40), 3, 3u, &v44, 0);
        if (!sub_23676DB6C(v9, 1, (uint64_t)v10))
          goto LABEL_65;
      }
      LOWORD(v53[0]) = 0;
      if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v53, 2, 1) != 1)
        goto LABEL_65;
      v11 = LOWORD(v53[0]);
      LOWORD(v53[0]) = 0;
      if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v53, 2, 1) != 1)
        goto LABEL_65;
      v15 = (int)bswap32(v11) >> 16;
      if (v15 < 0)
        goto LABEL_65;
      v16 = (int)bswap32(LOWORD(v53[0])) >> 16;
      if (v16 < 0
        || v8 == 1
        || !sub_236783638(*(uint64_t **)(a1 + 40), a2, v9, v6, (unsigned __int16)v15, v12, v13, v14))
      {
        goto LABEL_65;
      }
      if ((_DWORD)v7 && v8)
      {
        v20 = 1;
        v21 = v6;
        while (1)
        {
          v20 *= v8;
          if (((v8 * (unint64_t)v20) & 0xFFFFFFFF00000000) != 0)
            goto LABEL_65;
          if (!--v21)
          {
            v22 = v7 * (unint64_t)v20;
            if ((v22 & 0xFFFFFFFF00000000) == 0 && (_DWORD)v22 != -1)
            {
              if (!(_DWORD)v22)
                break;
              v23 = *(uint64_t **)(a1 + 40);
              if (v23)
              {
                v24 = &qword_25642E910;
                v25 = &unk_250800620;
                while (1)
                {
                  v24 = (uint64_t *)*v24;
                  if (!v24)
                    break;
                  if (v24 == v23)
                  {
                    v25 = *(void **)(a1 + 40);
                    break;
                  }
                }
              }
              else
              {
                v25 = &unk_250800620;
              }
              v26 = (__int128 *)*((_QWORD *)v25 + 6);
              if (!v26)
                v26 = &xmmword_2542ABF08;
              v27 = (_WORD *)(*((uint64_t (**)(void))v26 + 4))();
              if (v27)
              {
                v28 = (uint64_t)v27;
                v32 = sub_236776694(a2, v22, v27);
                v33 = *(uint64_t **)(a1 + 40);
                if (v32)
                {
                  v53[0] = vdupq_n_s32(v8);
                  v53[1] = v53[0];
                  v34 = sub_23676C698(v33, (int *)v53, v6, v7, v28, v29, v30, v31);
                  v35 = sub_23676DB6C(v9, 1, (uint64_t)v34);
                  v36 = *(uint64_t **)(a1 + 40);
                  if (v36)
                  {
                    v37 = &qword_25642E910;
                    v38 = &unk_250800620;
                    while (1)
                    {
                      v37 = (uint64_t *)*v37;
                      if (!v37)
                        break;
                      if (v37 == v36)
                      {
                        v38 = *(void **)(a1 + 40);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v38 = &unk_250800620;
                  }
                  v41 = (__int128 *)*((_QWORD *)v38 + 6);
                  if (!v41)
                    v41 = &xmmword_2542ABF08;
                  (*((void (**)(void))v41 + 2))();
                  if (v35)
                    break;
                }
                else
                {
                  if (v33)
                  {
                    v39 = &qword_25642E910;
                    v40 = &unk_250800620;
                    while (1)
                    {
                      v39 = (uint64_t *)*v39;
                      if (!v39)
                        break;
                      if (v39 == v33)
                      {
                        v40 = *(void **)(a1 + 40);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v40 = &unk_250800620;
                  }
                  v42 = (__int128 *)*((_QWORD *)v40 + 6);
                  if (!v42)
                    v42 = &xmmword_2542ABF08;
                  (*((void (**)(void))v42 + 2))();
                }
              }
            }
            goto LABEL_65;
          }
        }
      }
      if (!sub_236783638(*(uint64_t **)(a1 + 40), a2, v9, v7, (unsigned __int16)v16, v17, v18, v19))
      {
LABEL_65:
        sub_23676D934(v9);
        return 0;
      }
      *a3 = 1;
    }
  }
  return v9;
}

uint64_t sub_23677A240(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 **v13;
  uint64_t **v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t result;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  unsigned int v39;

  v9 = *a3;
  if (!*a3)
  {
    v12 = 0;
    v11 = 0;
    goto LABEL_21;
  }
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 == 1835103334)
  {
    v11 = *(_QWORD *)(v9 + 48);
    v9 = *(_QWORD *)(v9 + 56);
    if (!v9)
    {
      v12 = 0;
      goto LABEL_21;
    }
    v10 = *(_DWORD *)(v9 + 8);
  }
  else
  {
    v11 = 0;
  }
  if (v10 == 1668707188)
  {
    v12 = *(_QWORD *)(v9 + 48);
    v9 = *(_QWORD *)(v9 + 56);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 8);
      goto LABEL_11;
    }
LABEL_21:
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v18 = *((_DWORD *)a3 + 2);
    v17 = *((_DWORD *)a3 + 3);
    goto LABEL_22;
  }
  v12 = 0;
LABEL_11:
  if (v10 != 1668052340)
  {
    v13 = 0;
LABEL_15:
    if (v10 == 1668707188)
    {
      v14 = *(uint64_t ***)(v9 + 56);
      if (!v14)
      {
        v15 = *(_QWORD *)(v9 + 48);
        goto LABEL_37;
      }
    }
    else
    {
      v14 = (uint64_t **)v9;
    }
    sub_2367644B8(*v14, 8, "LUT is not suitable to be saved as LUT16", a4, a5, a6, a7, a8, v38);
    return 0;
  }
  v13 = *(unsigned __int16 ***)(v9 + 48);
  v9 = *(_QWORD *)(v9 + 56);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 8);
    goto LABEL_15;
  }
  v15 = 0;
LABEL_37:
  v18 = *((_DWORD *)a3 + 2);
  v17 = *((_DWORD *)a3 + 3);
  if (v13)
    v16 = *((_DWORD *)v13[1] + 5);
  else
    v16 = 0;
LABEL_22:
  LOBYTE(v39) = v18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v39) != 1)
    return 0;
  LOBYTE(v39) = v17;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v39) != 1)
    return 0;
  LOBYTE(v39) = v16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v39) != 1)
    return 0;
  LOBYTE(v39) = 0;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v39);
  result = 0;
  if (v19 != 1)
    return result;
  if (v11)
  {
    v39 = bswap32(vcvtmd_s64_f64(**(double **)v11 * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 8) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 16) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 24) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 32) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 40) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 48) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 56) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v21 = bswap32(vcvtmd_s64_f64(*(double *)(*(_QWORD *)v11 + 64) * 65536.0 + 0.5));
  }
  else
  {
    v39 = 256;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = 0;
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39);
    result = 0;
    if (v22 != 1)
      return result;
    v39 = 0;
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39);
    result = 0;
    if (v23 != 1)
      return result;
    v39 = 0;
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39);
    result = 0;
    if (v24 != 1)
      return result;
    v39 = 256;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
      return 0;
    v39 = 0;
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39);
    result = 0;
    if (v25 != 1)
      return result;
    v39 = 0;
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39);
    result = 0;
    if (v26 != 1)
      return result;
    v39 = 0;
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39);
    result = 0;
    if (v27 != 1)
      return result;
    v21 = 256;
  }
  v39 = v21;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v39) != 1)
    return 0;
  if (v12)
    v28 = bswap32(*(unsigned __int16 *)(**(_QWORD **)(v12 + 8) + 40)) >> 16;
  else
    LOWORD(v28) = 512;
  LOWORD(v39) = v28;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
    return 0;
  if (v15)
    v29 = bswap32(*(unsigned __int16 *)(**(_QWORD **)(v15 + 8) + 40)) >> 16;
  else
    LOWORD(v29) = 512;
  LOWORD(v39) = v29;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
    return 0;
  if (!v12)
  {
    if (v18)
    {
      v32 = v18;
      while (1)
      {
        LOWORD(v39) = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
          return 0;
        LOWORD(v39) = -1;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
          return 0;
        if (!--v32)
          goto LABEL_60;
      }
    }
    v30 = v17 == 0;
    if (v17 && v16)
      goto LABEL_75;
LABEL_86:
    if (v15)
    {
      result = sub_23678357C(a2, (unsigned int *)v15);
      if (!(_DWORD)result)
        return result;
      return 1;
    }
    if (v30)
      return 1;
    while (1)
    {
      LOWORD(v39) = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
        break;
      LOWORD(v39) = -1;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
        break;
      if (!--v17)
        return 1;
    }
    return 0;
  }
  result = sub_23678357C(a2, (unsigned int *)v12);
  if (!(_DWORD)result)
    return result;
LABEL_60:
  v30 = v17 == 0;
  if (!v17 || !v16)
    goto LABEL_86;
  if (v18)
  {
    v31 = 1;
    while (1)
    {
      v31 *= v16;
      if (((v16 * (unint64_t)v31) & 0xFFFFFFFF00000000) != 0)
        return 0;
      if (!--v18)
        goto LABEL_76;
    }
  }
LABEL_75:
  v31 = 1;
LABEL_76:
  result = 0;
  v33 = v17 * (unint64_t)v31;
  if ((v33 & 0xFFFFFFFF00000000) == 0 && (_DWORD)v33 != -1)
  {
    if ((_DWORD)v33)
      v34 = v13 == 0;
    else
      v34 = 1;
    if (!v34)
    {
      v35 = *v13;
      v36 = v33;
      do
      {
        v37 = *v35++;
        LOWORD(v39) = bswap32(v37) >> 16;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v39) != 1)
          return 0;
      }
      while (--v36);
    }
    v30 = 0;
    goto LABEL_86;
  }
  return result;
}

uint64_t sub_23677A96C(uint64_t a1, uint64_t a2)
{
  return sub_23676DA44(a2);
}

_QWORD *sub_23677A974(uint64_t a1, _QWORD *a2)
{
  return sub_23676D934(a2);
}

uint64_t sub_23677A97C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE v18[6];
  unsigned __int16 v19;
  char __src[4];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)__src = 0;
  if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, __src, 4, 1) != 1)
    return 0;
  v11 = *(_DWORD *)__src;
  v12 = bswap32(*(unsigned int *)__src);
  v13 = *(uint64_t **)(a1 + 40);
  if (v12 >= 0x11)
  {
    sub_2367644B8(v13, 2, "Too many colorants '%d'", v6, v7, v8, v9, v10, v12);
    return 0;
  }
  v14 = sub_23676E728(v13, v12, 0, (const char *)&unk_23692C0FD, (const char *)&unk_23692C0FD);
  if (v11)
  {
    v15 = 0;
LABEL_6:
    if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, __src, 32, 1) == 1)
    {
      v16 = 0;
      v21 = 0;
      while (1)
      {
        v19 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v19, 2, 1) != 1)break;
        *(_WORD *)&v18[v16] = bswap32(v19) >> 16;
        v16 += 2;
        if (v16 == 6)
        {
          if (!sub_23676EB10(v14, __src, (uint64_t)v18, 0))
            break;
          if (++v15 != v12)
            goto LABEL_6;
          goto LABEL_12;
        }
      }
    }
    *a3 = 0;
    sub_23676E97C(v14);
    return 0;
  }
LABEL_12:
  *a3 = 1;
  return v14;
}

uint64_t sub_23677AB10(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  __int16 v13;
  __int16 v14;
  char __dst[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v5 = *a3;
  else
    v5 = 0;
  *(_DWORD *)__dst = bswap32(v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 4, __dst) == 1)
  {
    if (!v5)
      return 1;
    v6 = 0;
    v7 = 0uLL;
    v8 = v5;
LABEL_7:
    *(_OWORD *)__dst = v7;
    v16 = v7;
    v17 = v7;
    v18 = v7;
    v19 = v7;
    v20 = v7;
    v21 = v7;
    v22 = v7;
    v23 = v7;
    v24 = v7;
    v25 = v7;
    v26 = v7;
    v27 = v7;
    v28 = v7;
    v29 = v7;
    v30 = v7;
    if (a3)
    {
      if (v6 < *a3)
      {
        v9 = *((_QWORD *)a3 + 10) + 294 * v6;
        strcpy(__dst, (const char *)v9);
        v12 = *(_DWORD *)(v9 + 256);
        v13 = *(_WORD *)(v9 + 260);
        LOBYTE(v17) = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 32, __dst))
        {
          v10 = 0;
          while (1)
          {
            v14 = bswap32(*(unsigned __int16 *)((char *)&v12 + v10)) >> 16;
            if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v14) != 1)
              break;
            v10 += 2;
            if (v10 == 6)
            {
              ++v6;
              result = 1;
              v7 = 0uLL;
              if (v6 != v8)
                goto LABEL_7;
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_23677ACA4(uint64_t a1, unsigned int *a2)
{
  return sub_23676EA48(a2);
}

uint64_t sub_23677ACAC(uint64_t a1, uint64_t a2)
{
  return sub_23676E97C(a2);
}

uint64_t sub_23677ACB4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[6];
  unsigned __int16 v21;
  char __src[32];
  char v23;
  _OWORD v24[2];
  char v25[32];
  char v26[32];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  *(_DWORD *)__src = 0;
  if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, __src, 4, 1) == 1)
  {
    *(_DWORD *)__src = 0;
    if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, __src, 4, 1) == 1)
    {
      v6 = *(_DWORD *)__src;
      *(_DWORD *)__src = 0;
      if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, __src, 4, 1) == 1)
      {
        v7 = *(_DWORD *)__src;
        if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, v26, 32, 1) == 1
          && (*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, v25, 32, 1) == 1)
        {
          v8 = bswap32(v6);
          v9 = bswap32(v7);
          v25[31] = 0;
          v26[31] = 0;
          v15 = sub_23676E728(*(uint64_t **)(a1 + 40), v8, v9, v26, v25);
          if (!v15)
          {
            sub_2367644B8(*(uint64_t **)(a1 + 40), 2, "Too many named colors '%d'", v10, v11, v12, v13, v14, v8);
            return v15;
          }
          if (v9 <= 0x10)
          {
            if (!v6)
            {
LABEL_22:
              *a3 = 1;
              return v15;
            }
            v17 = 0;
            v18 = 0uLL;
LABEL_15:
            v24[0] = v18;
            v24[1] = v18;
            if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, __src, 32, 1) == 1)
            {
              v19 = 0;
              v23 = 0;
              while (1)
              {
                v21 = 0;
                if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v21, 2, 1) != 1)break;
                *(_WORD *)&v20[v19] = bswap32(v21) >> 16;
                v19 += 2;
                if (v19 == 6)
                {
                  if (!sub_236776694(a2, v9, v24)
                    || !sub_23676EB10(v15, __src, (uint64_t)v20, (__int16 *)v24))
                  {
                    break;
                  }
                  ++v17;
                  v18 = 0uLL;
                  if (v17 != v8)
                    goto LABEL_15;
                  goto LABEL_22;
                }
              }
            }
          }
          else
          {
            sub_2367644B8(*(uint64_t **)(a1 + 40), 2, "Too many device coordinates '%d'", v10, v11, v12, v13, v14, v9);
          }
          sub_23676E97C(v15);
        }
      }
    }
  }
  return 0;
}

uint64_t sub_23677AF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[6];
  __int16 v14;
  char v15[32];
  char v16;
  char v17[32];
  char v18[33];
  char __dst[33];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v5 = *(_DWORD *)a3;
  else
    v5 = 0;
  *(_DWORD *)v15 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 4, v15);
  result = 0;
  if (v6 == 1)
  {
    *(_DWORD *)v15 = bswap32(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 4, v15) != 1)
      return 0;
    *(_DWORD *)v15 = bswap32(*(_DWORD *)(a3 + 8));
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 4, v15) != 1)
      return 0;
    strncpy(__dst, (const char *)(a3 + 12), 0x20uLL);
    strncpy(v18, (const char *)(a3 + 45), 0x20uLL);
    __dst[32] = 0;
    v18[32] = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 32, __dst);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 32, v18);
      if ((_DWORD)result)
      {
        if (!v5)
          return 1;
        v8 = 0;
LABEL_11:
        if (sub_23676EC24(a3, v8, v15, (uint64_t)v13, v17))
        {
          v16 = 0;
          if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 32, v15))
          {
            v9 = 0;
            while (1)
            {
              v14 = bswap32(*(unsigned __int16 *)&v13[v9]) >> 16;
              if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v14) != 1)
                break;
              v9 += 2;
              if (v9 == 6)
              {
                v10 = *(unsigned int *)(a3 + 8);
                if ((_DWORD)v10)
                {
                  v11 = 0;
                  v12 = 2 * v10;
                  do
                  {
                    v14 = bswap32(*(unsigned __int16 *)&v17[v11]) >> 16;
                    if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v14) != 1)
                      return 0;
                    v11 += 2;
                  }
                  while (v12 != v11);
                }
                ++v8;
                result = 1;
                if (v8 != v5)
                  goto LABEL_11;
                return result;
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_23677B158(uint64_t a1, unsigned int *a2)
{
  return sub_23676EA48(a2);
}

uint64_t sub_23677B160(uint64_t a1, uint64_t a2)
{
  return sub_23676E97C(a2);
}

uint64_t **sub_23677B168(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  unsigned int *v34;
  uint64_t (**v35)(void);
  unsigned int *v36;
  char v38;
  unsigned int v39;
  unsigned int v40;

  *a3 = 0;
  v40 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v40, 4, 1) != 1)
    return 0;
  v8 = v40;
  v40 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v40, 4, 1) != 1)
    return 0;
  v14 = *(uint64_t **)(a1 + 40);
  if (v40 != 201326592)
  {
    sub_2367644B8(v14, 8, "multiLocalizedUnicodeType of len != 12 is not supported.", v9, v10, v11, v12, v13, v38);
    return 0;
  }
  v15 = bswap32(v8);
  v16 = sub_23676DEC0(v14, v15);
  v17 = v16;
  if (v16)
  {
    *((_DWORD *)v16 + 3) = v15;
    if (v8)
    {
      v18 = 0;
      v19 = 0;
      v20 = 12 * v15;
      v21 = 12 * v15 + 16;
      v39 = a4 + 8;
      v22 = v16[2];
      do
      {
        LOWORD(v40) = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v40, 2, 1) != 1)
          goto LABEL_34;
        if (v22)
          *(_WORD *)((char *)v22 + v18) = bswap32((unsigned __int16)v40) >> 16;
        v23 = v17[2];
        LOWORD(v40) = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v40, 2, 1) != 1)
          goto LABEL_34;
        *(_WORD *)((char *)v23 + v18 + 2) = bswap32((unsigned __int16)v40) >> 16;
        v40 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v40, 4, 1) != 1)
          goto LABEL_34;
        v24 = v40;
        v40 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v40, 4, 1) != 1)
          goto LABEL_34;
        v25 = bswap32(v40);
        if (v25 < v21)
          goto LABEL_34;
        v26 = bswap32(v24);
        if (__CFADD__(v26, v25) || v26 + v25 > v39)
          goto LABEL_34;
        v27 = v25 - v20 - 16;
        v22 = v17[2];
        v28 = (char *)v22 + v18;
        *((_DWORD *)v28 + 1) = 2 * v27;
        *((_DWORD *)v28 + 2) = 2 * v26;
        v29 = v26 + v27;
        if (v29 > v19)
          v19 = v29;
        v18 += 12;
        --v15;
      }
      while (v15);
      v30 = 2 * v19;
      if (!(2 * v19))
        goto LABEL_27;
      v31 = *(uint64_t **)(a1 + 40);
      if (v31)
      {
        v32 = &qword_25642E910;
        v33 = &unk_250800620;
        while (1)
        {
          v32 = (uint64_t *)*v32;
          if (!v32)
            break;
          if (v32 == v31)
          {
            v33 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v33 = &unk_250800620;
      }
      v35 = (uint64_t (**)(void))*((_QWORD *)v33 + 6);
      if (!v35)
        v35 = (uint64_t (**)(void))&xmmword_2542ABF08;
      v36 = (unsigned int *)(*v35)();
      if (!v36 || (v34 = v36, !sub_236780344(a2, v30 >> 2, v36)))
      {
LABEL_34:
        sub_23676E4C8(v17);
        return 0;
      }
    }
    else
    {
      v30 = 0;
LABEL_27:
      v34 = 0;
    }
    v17[4] = (uint64_t *)v34;
    *((_DWORD *)v17 + 6) = v30;
    *((_DWORD *)v17 + 7) = v30;
    *a3 = 1;
  }
  return v17;
}

uint64_t sub_23677B430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3)
  {
    v18 = bswap32(*(_DWORD *)(a3 + 12));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v18) == 1)
    {
      v18 = 201326592;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v18) == 1)
      {
        v5 = *(_DWORD *)(a3 + 12);
        if (v5)
        {
          v6 = 0;
          v7 = 0;
          v8 = 12 * v5 + 16;
          while (1)
          {
            v9 = (unsigned __int16 *)(*(_QWORD *)(a3 + 16) + v6);
            v10 = *((_DWORD *)v9 + 1);
            v11 = *((_DWORD *)v9 + 2);
            LOWORD(v18) = bswap32(*v9) >> 16;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v18) != 1)
              break;
            LOWORD(v18) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + v6 + 2)) >> 16;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v18) != 1)
              break;
            v18 = bswap32(v11 >> 1);
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v18) != 1)
              break;
            v18 = bswap32(v8 + (v10 >> 1));
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v18) != 1)
              break;
            ++v7;
            v6 += 12;
            if (v7 >= *(unsigned int *)(a3 + 12))
              goto LABEL_11;
          }
        }
        else
        {
LABEL_11:
          v12 = *(unsigned int *)(a3 + 28);
          if (v12 < 4)
            return 1;
          v15 = *(unsigned __int16 **)(a3 + 32);
          v16 = v12 >> 2;
          while (1)
          {
            v17 = *v15;
            v15 += 2;
            LOWORD(v18) = bswap32(v17) >> 16;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v18);
            if ((_DWORD)result != 1)
              break;
            if (!--v16)
              return result;
          }
        }
      }
    }
    return 0;
  }
  else
  {
    v18 = 0;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v18);
    result = 0;
    if (v14 == 1)
    {
      v18 = 201326592;
      return (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v18) == 1;
    }
  }
  return result;
}

uint64_t **sub_23677B654(uint64_t a1, uint64_t a2)
{
  return sub_23676E3C0(a2);
}

uint64_t **sub_23677B65C(uint64_t a1, uint64_t **a2)
{
  return sub_23676E4C8(a2);
}

_DWORD *sub_23677B664(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8;
  __int32 v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v16;

  *a3 = 0;
  v16.i32[0] = 0;
  if ((*(unsigned int (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v16, 4, 1) != 1)
    return 0;
  LODWORD(v8) = a4 - 4;
  if (a4 < 4)
    return 0;
  v9 = v16.i32[0];
  v10 = bswap32(v16.u32[0]);
  v11 = (_DWORD *)sub_23676EFD4(*(uint64_t **)(a1 + 40), v10);
  v12 = v11;
  if (v11)
  {
    *v11 = v10;
    if (v9)
    {
      v13 = 0;
      while (1)
      {
        v14 = *((_QWORD *)v12 + 2);
        v16.i32[0] = 0;
        if ((*(unsigned int (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v16, 4, 1) != 1)
          break;
        if (v14)
          *(_DWORD *)(v14 + v13) = bswap32(v16.u32[0]);
        if (v8 < 4)
          break;
        v16.i32[0] = 0;
        if ((*(unsigned int (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v16, 4, 1) != 1)
          break;
        *(_DWORD *)(v14 + v13 + 4) = bswap32(v16.u32[0]);
        if ((v8 & 0xFFFFFFFC) == 4)
          break;
        v16 = 0;
        if ((*(unsigned int (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v16, 8, 1) != 1)
          break;
        *(int8x8_t *)(v14 + v13 + 8) = vrev64_s8(v16);
        if ((v8 & 0xFFFFFFF8) == 8)
          break;
        v16.i32[0] = 0;
        if ((*(unsigned int (**)(uint64_t, int8x8_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v16, 4, 1) != 1)
          break;
        *(_DWORD *)(v14 + v13 + 16) = bswap32(v16.u32[0]);
        if ((v8 & 0xFFFFFFFC) == 0x10)
          break;
        v8 = (v8 - 20);
        if (!sub_236782468(a1, a2, (uint64_t ***)(v14 + v13 + 40), v8)
          || !sub_236782468(a1, a2, (uint64_t ***)(v14 + v13 + 48), v8))
        {
          break;
        }
        v13 += 64;
        if (!--v10)
          goto LABEL_19;
      }
      sub_23676F148(v12);
      return 0;
    }
LABEL_19:
    *a3 = 1;
  }
  return v12;
}

uint64_t sub_23677B868(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int8x8_t v10;

  v10.i32[0] = bswap32(*a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v10) == 1)
  {
    if (!*a3)
      return 1;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *((_QWORD *)a3 + 2);
      v10.i32[0] = bswap32(*(_DWORD *)(v8 + v6));
      if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v10) != 1)
        break;
      v10.i32[0] = bswap32(*(_DWORD *)(v8 + v6 + 4));
      if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v10) != 1)
        break;
      v10 = vrev64_s8(*(int8x8_t *)(v8 + v6 + 8));
      if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 8, &v10) != 1)
        break;
      v10.i32[0] = bswap32(*(_DWORD *)(v8 + v6 + 16));
      if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v10) != 1)
        break;
      result = sub_236780AEC(a1, a2, *(int **)(v8 + v6 + 40));
      if (!(_DWORD)result)
        return result;
      result = sub_236780AEC(a1, a2, *(int **)(v8 + v6 + 48));
      if (!(_DWORD)result)
        return result;
      ++v7;
      v6 += 64;
      if (v7 >= *a3)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_23677B9DC(uint64_t a1, unsigned int *a2)
{
  return sub_23676F274(a2);
}

uint64_t sub_23677B9E4(uint64_t a1, unsigned int *a2)
{
  return sub_23676F148(a2);
}

_DWORD *sub_23677B9EC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t (**v8)(void);
  _DWORD *v9;
  unsigned int v11;

  v5 = *(uint64_t **)(a1 + 40);
  if (v5)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == v5)
      {
        v7 = v5;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (uint64_t (**)(void))v7[6];
  if (!v8)
    v8 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v9 = (_DWORD *)(*v8)();
  if (v9)
  {
    v11 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v11, 4, 1) == 1)
    {
      *v9 = bswap32(v11);
      *a3 = 1;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

BOOL sub_23677BAC0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v4;

  v4 = bswap32(*a3);
  return (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v4) == 1;
}

uint64_t sub_23677BB00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677BB58(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t sub_23677BBB4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  __int128 *v10;
  float64x2_t v11[2];
  __int128 v12;
  uint64_t v13;
  unsigned int v14;

  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v14, 4, 1) != 1)
    return 0;
  LODWORD(v11[0].f64[0]) = bswap32(v14);
  if (!sub_236776898(a2, (float64x2_t *)&v11[0].f64[1]))
    return 0;
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v14, 4, 1) != 1)
    return 0;
  LODWORD(v12) = bswap32(v14);
  if (!sub_236776800(a2, (double *)&v12 + 1))
    return 0;
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v14, 4, 1) != 1)
    return 0;
  LODWORD(v13) = bswap32(v14);
  *a3 = 1;
  v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    v7 = &qword_25642E910;
    v8 = &unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == v6)
      {
        v8 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v8 = &unk_250800620;
  }
  v10 = (__int128 *)*((_QWORD *)v8 + 6);
  if (!v10)
    v10 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(uint64_t *))v10 + 5))(v6);
}

uint64_t sub_23677BD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int8x8_t v11;
  unsigned int v12;

  v11.i32[0] = bswap32(*(_DWORD *)a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v11) != 1)
    return 0;
  __asm { FMOV            V2.2D, #0.5 }
  v11 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL), *(float64x2_t *)(a3 + 8))))));
  v12 = bswap32(vcvtmd_s64_f64(*(double *)(a3 + 24) * 65536.0 + 0.5));
  result = (*(uint64_t (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 12, &v11);
  if (!(_DWORD)result)
    return result;
  v11.i32[0] = bswap32(*(_DWORD *)(a3 + 32));
  if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v11) != 1)
    return 0;
  v11.i32[0] = bswap32(vcvtmd_s64_f64(*(double *)(a3 + 40) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v11) != 1)
    return 0;
  v11.i32[0] = bswap32(*(_DWORD *)(a3 + 48));
  return (*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v11) == 1;
}

uint64_t sub_23677BE5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677BEB4(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

_DWORD *sub_23677BF10(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t (**v11)(void);
  _DWORD *v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;
  unsigned int v20;

  *a3 = 0;
  v4 = a4 - 4;
  if (a4 < 4 || (int)(a4 - 4) < 0)
    return 0;
  v8 = *(uint64_t **)(a1 + 40);
  if (v8)
  {
    v9 = &qword_25642E910;
    v10 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == v8)
      {
        v10 = v8;
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)&unk_250800620;
  }
  v11 = (uint64_t (**)(void))v10[6];
  if (!v11)
    v11 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v12 = (_DWORD *)(*v11)();
  v13 = v12;
  if (v12)
  {
    *v12 = v4;
    v20 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v20, 4, 1) == 1)
    {
      v13[1] = bswap32(v20);
      if ((*(unsigned int (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v13 + 2, 1, v4) == (_DWORD)v4)
      {
        *a3 = 1;
        return v13;
      }
      v14 = *(uint64_t **)(a1 + 40);
      if (v14)
      {
        v17 = &qword_25642E910;
        v16 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v17 = (uint64_t *)*v17;
          if (!v17)
            goto LABEL_26;
          if (v17 == v14)
            goto LABEL_24;
        }
      }
    }
    else
    {
      v14 = *(uint64_t **)(a1 + 40);
      if (v14)
      {
        v15 = &qword_25642E910;
        v16 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v15 = (uint64_t *)*v15;
          if (!v15)
            goto LABEL_26;
          if (v15 == v14)
          {
LABEL_24:
            v16 = v14;
            goto LABEL_26;
          }
        }
      }
    }
    v16 = (uint64_t *)&unk_250800620;
LABEL_26:
    v18 = (__int128 *)v16[6];
    if (!v18)
      v18 = &xmmword_2542ABF08;
    (*((void (**)(void))v18 + 2))();
    return 0;
  }
  return v13;
}

uint64_t sub_23677C0A8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;

  v6 = bswap32(a3[1]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v6) == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *))(a2 + 312))(a2, *a3, a3 + 2);
  else
    return 0;
}

uint64_t sub_23677C11C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677C178(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t *sub_23677C1D4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;
  int32x2_t *v15;
  uint64_t **v16;
  int32x2_t *v17;
  int32x2_t *v18;
  int32x2_t *v19;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  LOBYTE(v23) = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 1, 1) != 1)
    return 0;
  v7 = v23;
  LOBYTE(v23) = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 1, 1) != 1)
    return 0;
  v8 = v23;
  LOWORD(v23) = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 2, 1) != 1)
    return 0;
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 4, 1) != 1)
    return 0;
  v9 = v23;
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 4, 1) != 1)
    return 0;
  v10 = v23;
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 4, 1) != 1)
    return 0;
  v11 = v23;
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 4, 1) != 1)
    return 0;
  v12 = v23;
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 4, 1) != 1)
    return 0;
  v22 = v12;
  v13 = 0;
  if ((v7 - 16) >= 0xFFFFFFF1 && (v8 - 16) >= 0xFFFFFFF1)
  {
    v21 = v23;
    v13 = (uint64_t *)sub_23676D59C(*(uint64_t **)(a1 + 40), v7, v8);
    if (v13)
    {
      v14 = v6 - 8;
      if (!v21
        || (v15 = sub_236782FD0(a1, a2, bswap32(v21) + v14, v7), sub_23676DB6C(v13, 1, (uint64_t)v15)))
      {
        if (!v22
          || (v16 = sub_236783350(a1, a2, bswap32(v22) + v14, v7, v8), sub_23676DB6C(v13, 1, (uint64_t)v16)))
        {
          if (!v11
            || (v17 = sub_236782FD0(a1, a2, bswap32(v11) + v14, v8), sub_23676DB6C(v13, 1, (uint64_t)v17)))
          {
            if (!v10
              || (v18 = sub_2367831E4(a1, a2, bswap32(v10) + v14), sub_23676DB6C(v13, 1, (uint64_t)v18)))
            {
              if (!v9
                || (v19 = sub_236782FD0(a1, a2, bswap32(v9) + v14, v8), sub_23676DB6C(v13, 1, (uint64_t)v19)))
              {
                *a3 = 1;
                return v13;
              }
            }
          }
        }
      }
      sub_23676D934(v13);
      return 0;
    }
  }
  return v13;
}

uint64_t sub_23677C4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t result;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  unsigned int v46;

  (*(void (**)(uint64_t))(a2 + 304))(a2);
  if (*(_QWORD *)a3
    && !sub_23676BA0C((uint64_t *)a3, 1, v6, v7, v8, v9, v10, v11, 116)
    && !sub_23676BA0C((uint64_t *)a3, 3, v12, v13, v14, v15, v16, v17, 116)
    && !sub_23676BA0C((uint64_t *)a3, 3, v18, v19, v20, v21, v22, v23, 116)
    && !sub_23676BA0C((uint64_t *)a3, 5, v24, v25, v26, v27, v28, v29, 116))
  {
    sub_2367644B8(*(uint64_t **)(a1 + 40), 13, "LUT is not suitable to be saved as LutAToB", v30, v31, v32, v33, v34, v45);
    return 0;
  }
  v35 = *(_DWORD *)(a3 + 12);
  LOBYTE(v46) = *(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v46) != 1)
    return 0;
  LOBYTE(v46) = v35;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v46) != 1)
    return 0;
  LOWORD(v46) = 0;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v46);
  result = 0;
  if (v36 == 1)
  {
    v38 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
    v46 = 0;
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
    result = 0;
    if (v39 == 1)
    {
      v46 = 0;
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
      result = 0;
      if (v40 == 1)
      {
        v46 = 0;
        v41 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
        result = 0;
        if (v41 == 1)
        {
          v46 = 0;
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
          result = 0;
          if (v42 == 1)
          {
            v46 = 0;
            v43 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
            result = 0;
            if (v43 == 1)
            {
              v44 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
              result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 288))(a2, v38);
              if ((_DWORD)result)
              {
                v46 = bswap32(0);
                if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                {
                  v46 = bswap32(0);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                  {
                    v46 = bswap32(0);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                    {
                      v46 = bswap32(0);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                      {
                        v46 = bswap32(0);
                        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)return (*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, v44) != 0;
                      }
                    }
                  }
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23677C980(uint64_t a1, uint64_t a2)
{
  return sub_23676DA44(a2);
}

_QWORD *sub_23677C988(uint64_t a1, _QWORD *a2)
{
  return sub_23676D934(a2);
}

uint64_t *sub_23677C990(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  int32x2_t *v16;
  int32x2_t *v17;
  int32x2_t *v18;
  uint64_t **v19;
  int32x2_t *v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  LOBYTE(v24) = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 1, 1) != 1)
    return 0;
  v7 = v24;
  LOBYTE(v24) = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 1, 1) != 1)
    return 0;
  v8 = v24;
  if ((v7 - 16) < 0xFFFFFFF1 || v24 - 16 < 0xFFFFFFF1)
    return 0;
  LOWORD(v24) = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 2, 1) != 1)
    return 0;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 4, 1) != 1)
    return 0;
  v10 = v24;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 4, 1) != 1)
    return 0;
  v11 = v24;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 4, 1) != 1)
    return 0;
  v12 = v24;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 4, 1) != 1)
    return 0;
  v13 = v24;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 4, 1) != 1)
    return 0;
  v22 = v24;
  v23 = v13;
  v14 = (uint64_t *)sub_23676D59C(*(uint64_t **)(a1 + 40), v7, v8);
  if (v14)
  {
    v15 = v6 - 8;
    if (!v10
      || (v16 = sub_236782FD0(a1, a2, bswap32(v10) + v15, v7), sub_23676DB6C(v14, 1, (uint64_t)v16)))
    {
      if (!v11 || (v17 = sub_2367831E4(a1, a2, bswap32(v11) + v15), sub_23676DB6C(v14, 1, (uint64_t)v17)))
      {
        if (!v12
          || (v18 = sub_236782FD0(a1, a2, bswap32(v12) + v15, v7), sub_23676DB6C(v14, 1, (uint64_t)v18)))
        {
          if (!v23
            || (v19 = sub_236783350(a1, a2, bswap32(v23) + v15, v7, v8),
                sub_23676DB6C(v14, 1, (uint64_t)v19)))
          {
            if (!v22
              || (v20 = sub_236782FD0(a1, a2, bswap32(v22) + v15, v8), sub_23676DB6C(v14, 1, (uint64_t)v20)))
            {
              *a3 = 1;
              return v14;
            }
          }
        }
      }
    }
    sub_23676D934(v14);
    return 0;
  }
  return v14;
}

uint64_t sub_23677CC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t result;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  unsigned int v46;

  (*(void (**)(uint64_t))(a2 + 304))(a2);
  if (!sub_23676BA0C((uint64_t *)a3, 1, v6, v7, v8, v9, v10, v11, 116)
    && !sub_23676BA0C((uint64_t *)a3, 3, v12, v13, v14, v15, v16, v17, 116)
    && !sub_23676BA0C((uint64_t *)a3, 3, v18, v19, v20, v21, v22, v23, 116)
    && !sub_23676BA0C((uint64_t *)a3, 5, v24, v25, v26, v27, v28, v29, 116))
  {
    sub_2367644B8(*(uint64_t **)(a1 + 40), 13, "LUT is not suitable to be saved as LutBToA", v30, v31, v32, v33, v34, v45);
    return 0;
  }
  v35 = *(_DWORD *)(a3 + 12);
  LOBYTE(v46) = *(_DWORD *)(a3 + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v46) != 1)
    return 0;
  LOBYTE(v46) = v35;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 1, &v46) != 1)
    return 0;
  LOWORD(v46) = 0;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v46);
  result = 0;
  if (v36 == 1)
  {
    v38 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
    v46 = 0;
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
    result = 0;
    if (v39 == 1)
    {
      v46 = 0;
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
      result = 0;
      if (v40 == 1)
      {
        v46 = 0;
        v41 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
        result = 0;
        if (v41 == 1)
        {
          v46 = 0;
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
          result = 0;
          if (v42 == 1)
          {
            v46 = 0;
            v43 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46);
            result = 0;
            if (v43 == 1)
            {
              v44 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
              result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 288))(a2, v38);
              if ((_DWORD)result)
              {
                v46 = bswap32(0);
                if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                {
                  v46 = bswap32(0);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                  {
                    v46 = bswap32(0);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                    {
                      v46 = bswap32(0);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)
                      {
                        v46 = bswap32(0);
                        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v46) == 1)return (*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, v44) != 0;
                      }
                    }
                  }
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23677D12C(uint64_t a1, uint64_t a2)
{
  return sub_23676DA44(a2);
}

_QWORD *sub_23677D134(uint64_t a1, _QWORD *a2)
{
  return sub_23676D934(a2);
}

uint64_t sub_23677D13C(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  uint64_t (**v30)(void);
  char *v31;
  uint64_t *v32;
  uint64_t *v33;
  void *v34;
  __int128 *v35;
  unsigned int v36;
  unsigned int v37;

  v8 = *(uint64_t **)(a1 + 40);
  if (v8)
  {
    v9 = &qword_25642E910;
    v10 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == v8)
      {
        v10 = v8;
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)&unk_250800620;
  }
  v11 = (__int128 *)v10[6];
  if (!v11)
    v11 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(void))v11 + 1))();
  *a3 = 0;
  if (result)
  {
    v13 = result;
    v36 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v36, 4, 1) != 1)
      return 0;
    v17 = a4 - 4;
    if (a4 < 4)
      return 0;
    v18 = bswap32(v36);
    result = sub_236764590(*(uint64_t **)(a1 + 40), v18, 0, 0, 0, v14, v15, v16);
    *(_QWORD *)v13 = result;
    if (result)
    {
      v19 = sub_236776694(a2, v18, *(_WORD **)(result + 48));
      result = 0;
      if (v17 >= 4)
      {
        if (v19)
        {
          v37 = 0;
          if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v37, 4, 1) != 1)return 0;
          v23 = v17 - 2 * v18;
          v24 = v23 - 4;
          if (v23 < 4)
            return 0;
          v25 = bswap32(v37);
          result = sub_236764590(*(uint64_t **)(a1 + 40), v25, 0, 0, 0, v20, v21, v22);
          *(_QWORD *)(v13 + 8) = result;
          if (!result)
            return result;
          if (!sub_236776694(a2, v25, *(_WORD **)(result + 48)))
            return 0;
          if (2 * (unint64_t)v25 > v24)
            return 0;
          v26 = v24 - 2 * (_DWORD)v25;
          if ((_DWORD)v26 == -1)
            return 0;
          result = (uint64_t)sub_23676DEC0(*(uint64_t **)(a1 + 40), 1u);
          *(_QWORD *)(v13 + 16) = result;
          if (result)
          {
            v27 = *(uint64_t **)(a1 + 40);
            if (v27)
            {
              v28 = &qword_25642E910;
              v29 = &unk_250800620;
              while (1)
              {
                v28 = (uint64_t *)*v28;
                if (!v28)
                  break;
                if (v28 == v27)
                {
                  v29 = *(void **)(a1 + 40);
                  break;
                }
              }
            }
            else
            {
              v29 = &unk_250800620;
            }
            v30 = (uint64_t (**)(void))*((_QWORD *)v29 + 6);
            if (!v30)
              v30 = (uint64_t (**)(void))&xmmword_2542ABF08;
            v31 = (char *)(*v30)();
            if ((*(unsigned int (**)(uint64_t, char *, uint64_t, uint64_t))(a2 + 280))(a2, v31, 1, v26) != (_DWORD)v26)
              return 0;
            v31[v26] = 0;
            sub_23676E010(*(uint64_t ***)(v13 + 16), 0, 0, 0, 0, v31);
            v32 = *(uint64_t **)(a1 + 40);
            if (v32)
            {
              v33 = &qword_25642E910;
              v34 = &unk_250800620;
              while (1)
              {
                v33 = (uint64_t *)*v33;
                if (!v33)
                  break;
                if (v33 == v32)
                {
                  v34 = *(void **)(a1 + 40);
                  break;
                }
              }
            }
            else
            {
              v34 = &unk_250800620;
            }
            v35 = (__int128 *)*((_QWORD *)v34 + 6);
            if (!v35)
              v35 = &xmmword_2542ABF08;
            (*((void (**)(void))v35 + 2))();
            *a3 = 1;
            return v13;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_23677D3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  int *v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t result;
  uint64_t (**v18)(void);
  _BYTE *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  __int128 *v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;

  v25 = bswap32(*(_DWORD *)(*(_QWORD *)a3 + 40));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v25) != 1)
    return 0;
  v6 = *(unsigned int *)(*(_QWORD *)a3 + 40);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned __int16 **)(*(_QWORD *)a3 + 48);
    do
    {
      v8 = *v7++;
      v26 = bswap32(v8) >> 16;
      if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v26) != 1)
        return 0;
    }
    while (--v6);
  }
  v27 = bswap32(*(_DWORD *)(*(_QWORD *)(a3 + 8) + 40));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v27) != 1)
    return 0;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(unsigned int *)(v9 + 40);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned __int16 **)(v9 + 48);
    do
    {
      v12 = *v11++;
      v28 = bswap32(v12) >> 16;
      if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v28) != 1)
        return 0;
    }
    while (--v10);
  }
  v13 = sub_23676E5E8(*(int **)(a3 + 16), 0, 0, word_2368B38E0, 0, 0);
  v14 = *(uint64_t **)(a1 + 40);
  if (v14)
  {
    v15 = &qword_25642E910;
    v16 = &unk_250800620;
    while (1)
    {
      v15 = (uint64_t *)*v15;
      if (!v15)
        break;
      if (v15 == v14)
      {
        v16 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v16 = &unk_250800620;
  }
  v18 = (uint64_t (**)(void))*((_QWORD *)v16 + 6);
  if (!v18)
    v18 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v19 = (_BYTE *)(*v18)();
  v20 = sub_23676E5E8(*(int **)(a3 + 16), 0, 0, word_2368B38E0, v19, v13);
  result = 0;
  if (v20 == (_DWORD)v13)
  {
    result = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(a2 + 312))(a2, v13, v19);
    if ((_DWORD)result)
    {
      if (v19)
      {
        v21 = *(uint64_t **)(a1 + 40);
        if (v21)
        {
          v22 = &qword_25642E910;
          v23 = &unk_250800620;
          while (1)
          {
            v22 = (uint64_t *)*v22;
            if (!v22)
              break;
            if (v22 == v21)
            {
              v23 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v23 = &unk_250800620;
        }
        v24 = (__int128 *)*((_QWORD *)v23 + 6);
        if (!v24)
          v24 = &xmmword_2542ABF08;
        (*((void (**)(void))v24 + 2))();
      }
      return 1;
    }
  }
  return result;
}

uint64_t *sub_23677D634(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(uint64_t **)(a1 + 40);
  if (v3)
  {
    v4 = &qword_25642E910;
    v5 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == v3)
      {
        v5 = v3;
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)&unk_250800620;
  }
  v6 = (__int128 *)v5[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v14 = (uint64_t *)(*((uint64_t (**)(void))v6 + 1))();
  if (v14)
  {
    v14[1] = sub_2367658C0(a2[1], v7, v8, v9, v10, v11, v12, v13);
    *v14 = sub_2367658C0(*a2, v15, v16, v17, v18, v19, v20, v21);
    v14[2] = (uint64_t)sub_23676E3C0(a2[2]);
  }
  return v14;
}

uint64_t sub_23677D6D8(uint64_t a1, uint64_t a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  __int128 *v9;

  if (*(_QWORD *)a2)
    sub_236765578(*(uint64_t ****)a2);
  v4 = *(uint64_t ****)(a2 + 8);
  if (v4)
    sub_236765578(v4);
  v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
    sub_23676E4C8(v5);
  v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    v7 = &qword_25642E910;
    v8 = &unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == v6)
      {
        v8 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v8 = &unk_250800620;
  }
  v9 = (__int128 *)*((_QWORD *)v8 + 6);
  if (!v9)
    v9 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v9 + 2))();
}

uint64_t **sub_23677D770(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t **v7;
  int v9;

  v9 = a4;
  v7 = sub_23676DEC0(*(uint64_t **)(a1 + 40), 5u);
  *a3 = 0;
  if (sub_2367826F0(a1, a2, v7, &v9, "nm")
    && sub_2367826F0(a1, a2, v7, &v9, "#0")
    && sub_2367826F0(a1, a2, v7, &v9, "#1")
    && sub_2367826F0(a1, a2, v7, &v9, "#2")
    && sub_2367826F0(a1, a2, v7, &v9, "#3"))
  {
    *a3 = 1;
  }
  else
  {
    sub_23676E4C8(v7);
    return 0;
  }
  return v7;
}

BOOL sub_23677D878(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_236782574(a1, a2, a3, (unsigned __int16 *)"nm")
      && sub_236782574(a1, a2, a3, (unsigned __int16 *)"#0")
      && sub_236782574(a1, a2, a3, (unsigned __int16 *)"#1")
      && sub_236782574(a1, a2, a3, (unsigned __int16 *)"#2")
      && sub_236782574(a1, a2, a3, (unsigned __int16 *)"#3");
}

uint64_t **sub_23677D930(uint64_t a1, uint64_t a2)
{
  return sub_23676E3C0(a2);
}

uint64_t **sub_23677D938(uint64_t a1, uint64_t **a2)
{
  return sub_23676E4C8(a2);
}

uint64_t sub_23677D940(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned int v15;

  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  v13 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v13, 2, 1) != 1)
    return 0;
  v7 = v13;
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v14, 2, 1) != 1)
    return 0;
  v8 = 0;
  v9 = __rev16(v7);
  if ((unsigned __int16)(v9 - 16) >= 0xFFF1u)
  {
    v10 = bswap32(v14) >> 16;
    if ((unsigned __int16)(v10 - 16) >= 0xFFF1u)
    {
      v8 = sub_23676D59C(*(uint64_t **)(a1 + 40), v9, v10);
      if (v8)
      {
        v15 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v15, 4, 1) == 1
          && sub_236780C30(a1, a2, bswap32(v15), v6 - 8, v8, (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_236781484)&& *(_DWORD *)(v8 + 8) == v9&& *(_DWORD *)(v8 + 12) == v10)
        {
          v11 = 1;
        }
        else
        {
          sub_23676D934((_QWORD *)v8);
          v11 = 0;
          v8 = 0;
        }
        *a3 = v11;
      }
    }
  }
  return v8;
}

uint64_t sub_23677DAB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  char **v9;
  char **v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  __int128 *v19;
  uint64_t result;
  unsigned int *v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  __int128 *v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  __int128 *v48;
  void (*v49)(void);
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  __int128 *v53;
  uint64_t *v54;
  uint64_t *v55;
  void *v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t *v59;
  uint64_t *v60;
  void *v61;
  __int128 *v62;
  int v63;
  unsigned int v64;
  char **v65;
  unsigned int v66;
  char v67;

  v6 = *a3;
  v7 = *(uint64_t **)(a1 + 40);
  if (v7)
  {
    v8 = &qword_25642E910;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == v7)
        goto LABEL_8;
    }
    v7 = (uint64_t *)&unk_250800620;
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v9 = (char **)v7[13];
  if (v9)
    v10 = v9;
  else
    v10 = (char **)&unk_25642E940;
  v11 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  v12 = *a3;
  if (*a3)
  {
    LODWORD(v13) = 0;
    do
    {
      LODWORD(v13) = v13 + 1;
      v12 = *(_QWORD *)(v12 + 56);
    }
    while (v12);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  v14 = *(uint64_t **)(a1 + 40);
  if (v14)
  {
    v15 = &qword_25642E910;
    v16 = &unk_250800620;
    while (1)
    {
      v15 = (uint64_t *)*v15;
      if (!v15)
        break;
      if (v15 == v14)
      {
        v16 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v16 = &unk_250800620;
  }
  v17 = *((_DWORD *)a3 + 2);
  v18 = *((_DWORD *)a3 + 3);
  v19 = (__int128 *)*((_QWORD *)v16 + 6);
  if (!v19)
    v19 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(void))v19 + 4))();
  if (result)
  {
    v21 = (unsigned int *)result;
    v22 = *(uint64_t **)(a1 + 40);
    v65 = v10;
    if (v22)
    {
      v23 = &qword_25642E910;
      v24 = &unk_250800620;
      while (1)
      {
        v23 = (uint64_t *)*v23;
        if (!v23)
          break;
        if (v23 == v22)
        {
          v24 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v24 = &unk_250800620;
    }
    v25 = (__int128 *)*((_QWORD *)v24 + 6);
    if (!v25)
      v25 = &xmmword_2542ABF08;
    v26 = (*((uint64_t (**)(void))v25 + 4))();
    if (!v26)
    {
      v45 = *(uint64_t **)(a1 + 40);
      if (v45)
      {
        v46 = &qword_25642E910;
        v47 = &unk_250800620;
        while (1)
        {
          v46 = (uint64_t *)*v46;
          if (!v46)
            break;
          if (v46 == v45)
          {
            v47 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v47 = &unk_250800620;
      }
      v48 = (__int128 *)*((_QWORD *)v47 + 6);
      if (!v48)
        v48 = &xmmword_2542ABF08;
      v49 = (void (*)(void))*((_QWORD *)v48 + 2);
      goto LABEL_93;
    }
    v27 = (unsigned int *)v26;
    LOWORD(v66) = bswap32(v17) >> 16;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v66) != 1)
      goto LABEL_76;
    LOWORD(v66) = bswap32(v18) >> 16;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v66) != 1)
      goto LABEL_76;
    v66 = bswap32((unsigned __int16)v13);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
      goto LABEL_76;
    v64 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
    if ((_DWORD)v13)
    {
      v28 = v13;
      while (1)
      {
        v66 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
          goto LABEL_76;
        v66 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
          goto LABEL_76;
        if (!--v28)
        {
          v29 = 0;
          while (1)
          {
            v21[v29] = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2) - v11 + 8;
            v35 = *(_DWORD *)(v6 + 8);
            v36 = *v65;
            v37 = bswap32(v35);
            if (*v65)
            {
              while (*(_DWORD *)v36 != v35)
              {
                v36 = (char *)*((_QWORD *)v36 + 7);
                if (!v36)
                  goto LABEL_46;
              }
            }
            else
            {
LABEL_46:
              v36 = aScab;
              while (*(_DWORD *)v36 != v35)
              {
                v36 = (char *)*((_QWORD *)v36 + 7);
                if (!v36)
                {
                  v66 = v37;
                  v67 = 0;
                  sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Found unknown MPE type '%s'", v30, v31, v32, v33, v34, (char)&v66);
                  goto LABEL_76;
                }
              }
            }
            v66 = v37;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
              goto LABEL_76;
            v66 = 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
              goto LABEL_76;
            v63 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
            if (!(*((unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))v36 + 2))(a1, a2, v6, 1)
              || !sub_236776980(a2))
            {
              goto LABEL_76;
            }
            v27[v29] = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2) - v63;
            v6 = *(_QWORD *)(v6 + 56);
            if (++v29 == v13)
              goto LABEL_55;
          }
        }
      }
    }
LABEL_55:
    v38 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(a2 + 288))(a2, v64))
      goto LABEL_76;
    if ((_DWORD)v13)
    {
      v13 = v13;
      v39 = v21;
      v40 = v27;
      do
      {
        v41 = *v39++;
        v66 = bswap32(v41);
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
          goto LABEL_76;
        v66 = bswap32(*v40);
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v66) != 1)
          goto LABEL_76;
        ++v40;
      }
      while (--v13);
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, v38))
    {
LABEL_76:
      v50 = *(uint64_t **)(a1 + 40);
      if (v50)
      {
        v51 = &qword_25642E910;
        v52 = &unk_250800620;
        while (1)
        {
          v51 = (uint64_t *)*v51;
          if (!v51)
            break;
          if (v51 == v50)
          {
            v52 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v52 = &unk_250800620;
      }
      v53 = (__int128 *)*((_QWORD *)v52 + 6);
      if (!v53)
        v53 = &xmmword_2542ABF08;
      (*((void (**)(void))v53 + 2))();
      v54 = *(uint64_t **)(a1 + 40);
      if (v54)
      {
        v55 = &qword_25642E910;
        v56 = &unk_250800620;
        while (1)
        {
          v55 = (uint64_t *)*v55;
          if (!v55)
            break;
          if (v55 == v54)
          {
            v56 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v56 = &unk_250800620;
      }
      v57 = (__int128 *)*((_QWORD *)v56 + 6);
      if (!v57)
        v57 = &xmmword_2542ABF08;
      v49 = (void (*)(void))*((_QWORD *)v57 + 2);
LABEL_93:
      v49();
      return 0;
    }
    v42 = *(uint64_t **)(a1 + 40);
    if (v42)
    {
      v43 = &qword_25642E910;
      v44 = &unk_250800620;
      while (1)
      {
        v43 = (uint64_t *)*v43;
        if (!v43)
          break;
        if (v43 == v42)
        {
          v44 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v44 = &unk_250800620;
    }
    v58 = (__int128 *)*((_QWORD *)v44 + 6);
    if (!v58)
      v58 = &xmmword_2542ABF08;
    (*((void (**)(void))v58 + 2))();
    v59 = *(uint64_t **)(a1 + 40);
    if (v59)
    {
      v60 = &qword_25642E910;
      v61 = &unk_250800620;
      while (1)
      {
        v60 = (uint64_t *)*v60;
        if (!v60)
          break;
        if (v60 == v59)
        {
          v61 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v61 = &unk_250800620;
    }
    v62 = (__int128 *)*((_QWORD *)v61 + 6);
    if (!v62)
      v62 = &xmmword_2542ABF08;
    (*((void (**)(void))v62 + 2))();
    return 1;
  }
  return result;
}

uint64_t sub_23677E098(uint64_t a1, uint64_t a2)
{
  return sub_23676DA44(a2);
}

_QWORD *sub_23677E0A0(uint64_t a1, _QWORD *a2)
{
  return sub_23676D934(a2);
}

_DWORD *sub_23677E0A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  double *v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  __int128 *v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    v7 = &qword_25642E910;
    v8 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == v6)
      {
        v8 = v6;
        break;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)&unk_250800620;
  }
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  v10 = (_DWORD *)(*((uint64_t (**)(void))v9 + 1))();
  if (v10)
  {
    *a3 = 0;
    v20 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v20, 4, 1) == 1)
    {
      *v10 = bswap32(v20);
      v21 = 0;
      if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v21, 4, 1) == 1)
      {
        v11 = v21;
        v12 = bswap32(v21);
        v10[1] = v12;
        if (v12 < 0x10)
        {
          if (!v11)
          {
LABEL_20:
            *a3 = 1;
            return v10;
          }
        }
        else
        {
          v10[1] = 15;
        }
        v13 = 0;
        v14 = (double *)(v10 + 4);
        while (sub_236776800(a2, v14 - 1))
        {
          if (!sub_236776800(a2, v14))
            break;
          v22 = 0;
          if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v22, 4, 1) != 1)break;
          *((_DWORD *)v14 + 2) = bswap32(v22);
          ++v13;
          v14 += 3;
          if (v13 >= v10[1])
            goto LABEL_20;
        }
      }
    }
    v15 = *(uint64_t **)(a1 + 40);
    if (v15)
    {
      v16 = &qword_25642E910;
      v17 = &unk_250800620;
      while (1)
      {
        v16 = (uint64_t *)*v16;
        if (!v16)
          break;
        if (v16 == v15)
        {
          v17 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v17 = &unk_250800620;
    }
    v18 = (__int128 *)*((_QWORD *)v17 + 6);
    if (!v18)
      v18 = &xmmword_2542ABF08;
    (*((void (**)(void))v18 + 2))();
    return 0;
  }
  return v10;
}

uint64_t sub_23677E298(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  unsigned int *i;
  unsigned int v8;

  v8 = bswap32(*a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) == 1)
  {
    v8 = bswap32(a3[1]);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) == 1)
    {
      if (!a3[1])
        return 1;
      v5 = 0;
      for (i = a3 + 6; ; i += 6)
      {
        v8 = bswap32(vcvtmd_s64_f64(*((double *)i - 2) * 65536.0 + 0.5));
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) != 1)
          break;
        v8 = bswap32(vcvtmd_s64_f64(*((double *)i - 1) * 65536.0 + 0.5));
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) != 1)
          break;
        v8 = bswap32(*i);
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) != 1)
          break;
        if (++v5 >= (unint64_t)a3[1])
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23677E3F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677E448(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

uint64_t sub_23677E4A4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  __int128 *v14;
  unsigned int v16;

  v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    v7 = &qword_25642E910;
    v8 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == v6)
      {
        v8 = v6;
        break;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)&unk_250800620;
  }
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  v10 = (*((uint64_t (**)(void))v9 + 1))();
  if (v10)
  {
    *a3 = 0;
    if (sub_236776898(a2, (float64x2_t *)v10)
      && sub_236776898(a2, (float64x2_t *)(v10 + 24))
      && (v16 = 0,
          (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v16, 4, 1) == 1))
    {
      *(_DWORD *)(v10 + 48) = bswap32(v16);
      *a3 = 1;
    }
    else
    {
      v11 = *(uint64_t **)(a1 + 40);
      if (v11)
      {
        v12 = &qword_25642E910;
        v13 = &unk_250800620;
        while (1)
        {
          v12 = (uint64_t *)*v12;
          if (!v12)
            break;
          if (v12 == v11)
          {
            v13 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v13 = &unk_250800620;
      }
      v14 = (__int128 *)*((_QWORD *)v13 + 6);
      if (!v14)
        v14 = &xmmword_2542ABF08;
      (*((void (**)(void))v14 + 2))();
      return 0;
    }
  }
  return v10;
}

uint64_t sub_23677E5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  float64x2_t v11;
  float64x2_t v12;
  int8x8_t v13;
  unsigned int v14;

  __asm { FMOV            V1.2D, #0.5 }
  v11 = _Q1;
  v12 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
  v13 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(_Q1, v12, *(float64x2_t *)a3)))));
  v14 = bswap32(vcvtmd_s64_f64(*(double *)(a3 + 16) * 65536.0 + 0.5));
  result = (*(uint64_t (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 12, &v13);
  if ((_DWORD)result)
  {
    v13 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(v11, v12, *(float64x2_t *)(a3 + 24))))));
    v14 = bswap32(vcvtmd_s64_f64(*(double *)(a3 + 40) * 65536.0 + 0.5));
    result = (*(uint64_t (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 12, &v13);
    if ((_DWORD)result)
    {
      v13.i32[0] = bswap32(*(_DWORD *)(a3 + 48));
      return (*(unsigned int (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 4, &v13) == 1;
    }
  }
  return result;
}

uint64_t sub_23677E708(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677E760(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

float64x2_t *sub_23677E7BC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  float64x2_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  __int128 *v14;

  *a3 = 0;
  v6 = *(uint64_t **)(a1 + 40);
  if (v6)
  {
    v7 = &qword_25642E910;
    v8 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (v7 == v6)
      {
        v8 = v6;
        break;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)&unk_250800620;
  }
  v9 = (__int128 *)v8[6];
  if (!v9)
    v9 = &xmmword_2542ABF08;
  v10 = (float64x2_t *)(*((uint64_t (**)(void))v9 + 1))();
  if (v10)
  {
    if (sub_236776898(a2, v10))
    {
      *a3 = 1;
    }
    else
    {
      v11 = *(uint64_t **)(a1 + 40);
      if (v11)
      {
        v12 = &qword_25642E910;
        v13 = &unk_250800620;
        while (1)
        {
          v12 = (uint64_t *)*v12;
          if (!v12)
            break;
          if (v12 == v11)
          {
            v13 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v13 = &unk_250800620;
      }
      v14 = (__int128 *)*((_QWORD *)v13 + 6);
      if (!v14)
        v14 = &xmmword_2542ABF08;
      (*((void (**)(void))v14 + 2))();
      return 0;
    }
  }
  return v10;
}

uint64_t sub_23677E8C8(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  int8x8_t v9;
  unsigned int v10;

  __asm { FMOV            V2.2D, #0.5 }
  v9 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL), *a3)))));
  v10 = bswap32(vcvtmd_s64_f64(a3[1].f64[0] * 65536.0 + 0.5));
  return (*(uint64_t (**)(uint64_t, uint64_t, int8x8_t *))(a2 + 312))(a2, 12, &v9);
}

uint64_t sub_23677E938(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;

  v1 = *(uint64_t **)(a1 + 40);
  if (v1)
  {
    v2 = &qword_25642E910;
    v3 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v1)
      {
        v3 = v1;
        break;
      }
    }
  }
  else
  {
    v3 = (uint64_t *)&unk_250800620;
  }
  v4 = (__int128 *)v3[6];
  if (!v4)
    v4 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v4 + 5))();
}

uint64_t sub_23677E990(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  __int128 *v5;

  if (a2)
  {
    v2 = *(uint64_t **)(result + 40);
    if (v2)
    {
      v3 = &qword_25642E910;
      v4 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v3 = (uint64_t *)*v3;
        if (!v3)
          break;
        if (v3 == v2)
        {
          v4 = v2;
          break;
        }
      }
    }
    else
    {
      v4 = (uint64_t *)&unk_250800620;
    }
    v5 = (__int128 *)v4[6];
    if (!v5)
      v5 = &xmmword_2542ABF08;
    return (*((uint64_t (**)(void))v5 + 2))();
  }
  return result;
}

unsigned int *sub_23677E9EC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v10;

  *a3 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  v10 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v10, 4, 1) != 1)
    return 0;
  v7 = bswap32(v10);
  v8 = (unsigned int *)sub_23676EFD4(*(uint64_t **)(a1 + 40), v7);
  if (v8)
  {
    if (sub_236780C30(a1, a2, v7, v6 - 8, (uint64_t)v8, (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_236780BB4))
    {
      *a3 = 1;
      return v8;
    }
    sub_23676F148(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_23677EABC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  unsigned int v8;

  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  v8 = bswap32(*a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v8) == 1)
    return sub_236780440(a1, a2, *a3, v6 - 8, (uint64_t)a3, (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_2367803CC);
  else
    return 0;
}

uint64_t sub_23677EB5C(uint64_t a1, unsigned int *a2)
{
  return sub_23676F274(a2);
}

uint64_t sub_23677EB64(uint64_t a1, unsigned int *a2)
{
  return sub_23676F148(a2);
}

_QWORD **sub_23677EB6C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD **v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  __int128 *v34;
  uint64_t *v35;
  uint64_t *v36;
  void *v37;
  __int128 *v38;
  char v40;
  int v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[3];
  _OWORD v47[4];

  v44 = 0;
  v45 = 0;
  v42 = 0;
  v43 = 0;
  *a3 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  LODWORD(v46[0]) = 0;
  if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v46, 4, 1) != 1)
    return 0;
  v7 = v46[0];
  LODWORD(v46[0]) = 0;
  if ((*(unsigned int (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(a2 + 280))(a2, v46, 4, 1) != 1)
    return 0;
  v13 = bswap32(v46[0]);
  if (v13 > 0x20 || ((1 << v13) & 0x101010000) == 0)
  {
    sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unknown record length in dictionary '%d'", v8, v9, v10, v11, v12, v13);
    return 0;
  }
  v14 = *(uint64_t **)(a1 + 40);
  if (v14)
  {
    v15 = &qword_25642E910;
    v16 = &unk_250800620;
    while (1)
    {
      v15 = (uint64_t *)*v15;
      if (!v15)
        break;
      if (v15 == v14)
      {
        v16 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v16 = &unk_250800620;
  }
  memset(v47, 0, 48);
  memset(v46, 0, sizeof(v46));
  v17 = (__int128 *)*((_QWORD *)v16 + 6);
  if (!v17)
    v17 = &xmmword_2542ABF08;
  v18 = (*((uint64_t (**)(uint64_t *, uint64_t))v17 + 1))(v14, 16);
  v19 = (_QWORD **)v18;
  if (!v18)
    return v19;
  v20 = bswap32(v7);
  *(_QWORD *)(v18 + 8) = v14;
  if (!sub_23677FA88(*(uint64_t **)(a1 + 40), (uint64_t)v46, v20, v13))
  {
LABEL_61:
    sub_23677FD6C(v46);
    sub_23676F434(v19);
    return 0;
  }
  if (v7)
  {
    v21 = 0;
    v22 = v6 - 8;
    do
    {
      if (!sub_236780090(a2, (uint64_t)v46, v21, v22)
        || !sub_236780090(a2, (uint64_t)&v46[1] + 8, v21, v22)
        || v13 >= 0x11
        && (!sub_236780090(a2, (uint64_t)v47, v21, v22)
         || v13 >= 0x19 && !sub_236780090(a2, (uint64_t)&v47[1] + 8, v21, v22)))
      {
        goto LABEL_61;
      }
      ++v21;
    }
    while ((_DWORD)v20 != v21);
    for (i = 0; i != (_DWORD)v20; ++i)
    {
      if (!sub_236780160(a2, (uint64_t **)v46, i, &v45)
        || !sub_236780160(a2, (uint64_t **)&v46[1] + 1, i, &v44)
        || v13 >= 0x11
        && (!sub_2367802A8(a1, a2, (uint64_t)v47, i, &v43)
         || v13 >= 0x19 && !sub_2367802A8(a1, a2, (uint64_t)&v47[1] + 8, i, &v42)))
      {
        goto LABEL_61;
      }
      v30 = v44;
      v29 = v45;
      if (v45 && v44)
      {
        v41 = sub_23676F5B8(v19, v45, v44, (uint64_t)v43, (uint64_t)v42);
      }
      else
      {
        sub_2367644B8(*(uint64_t **)(a1 + 40), 12, "Bad dictionary Name/Value", v24, v25, v26, v27, v28, v40);
        v41 = 0;
        if (!v29)
          goto LABEL_44;
      }
      v31 = *(uint64_t **)(a1 + 40);
      if (v31)
      {
        v32 = &qword_25642E910;
        while (1)
        {
          v32 = (uint64_t *)*v32;
          if (!v32)
            break;
          if (v32 == v31)
          {
            v33 = *(void **)(a1 + 40);
            goto LABEL_41;
          }
        }
      }
      v33 = &unk_250800620;
LABEL_41:
      v34 = (__int128 *)*((_QWORD *)v33 + 6);
      if (!v34)
        v34 = &xmmword_2542ABF08;
      (*((void (**)(void))v34 + 2))();
LABEL_44:
      if (v30)
      {
        v35 = *(uint64_t **)(a1 + 40);
        if (v35)
        {
          v36 = &qword_25642E910;
          while (1)
          {
            v36 = (uint64_t *)*v36;
            if (!v36)
              break;
            if (v36 == v35)
            {
              v37 = *(void **)(a1 + 40);
              goto LABEL_51;
            }
          }
        }
        v37 = &unk_250800620;
LABEL_51:
        v38 = (__int128 *)*((_QWORD *)v37 + 6);
        if (!v38)
          v38 = &xmmword_2542ABF08;
        (*((void (**)(void))v38 + 2))();
      }
      if (v43)
        sub_23676E4C8(v43);
      if (v42)
        sub_23676E4C8(v42);
      if (!v41)
        goto LABEL_61;
    }
  }
  sub_23677FD6C(v46);
  *a3 = 1;
  return v19;
}

uint64_t sub_23677EF50(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[3];
  _OWORD v21[3];
  unsigned int v22;

  if (a3)
  {
    v3 = a3;
    memset(v21, 0, sizeof(v21));
    memset(v20, 0, sizeof(v20));
    v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
    v7 = (_QWORD *)*v3;
    if (*v3)
    {
      LODWORD(v8) = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        if (v7[1])
          v10 = 1;
        if (v7[2])
          v9 = 1;
        v8 = (v8 + 1);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
      if (v10)
        v11 = 24;
      else
        v11 = 16;
      if (v9)
        v11 += 8;
    }
    else
    {
      v8 = 0;
      v11 = 16;
    }
    v22 = bswap32(v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v22) == 1)
    {
      v22 = bswap32(v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v22) == 1)
      {
        v12 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
        if (sub_23677FA88(*(uint64_t **)(a1 + 40), (uint64_t)v20, v8, v11)
          && sub_23677FB30(a2, (uint64_t)v20, v8, v11))
        {
          if ((_DWORD)v8)
          {
            v13 = 0;
            v14 = v6 - 8;
            while (1)
            {
              v3 = (_QWORD *)*v3;
              if (!sub_23677FBFC(a2, (uint64_t)v20, v13, (char *)v3[3], v14))
                break;
              if (!sub_23677FBFC(a2, (uint64_t)&v20[1] + 8, v13, (char *)v3[4], v14))
                break;
              v15 = v3[1];
              if (v15)
              {
                if (!sub_23677FCE8(a2, (uint64_t)v21, v13, v15, v14))
                  break;
              }
              v16 = v3[2];
              if (v16)
              {
                if (!sub_23677FCE8(a2, (uint64_t)&v21[1] + 8, v13, v16, v14))
                  break;
              }
              if ((_DWORD)v8 == ++v13)
                goto LABEL_28;
            }
          }
          else
          {
LABEL_28:
            v17 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
            if ((*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, v12)
              && sub_23677FB30(a2, (uint64_t)v20, v8, v11)
              && (*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, v17))
            {
              v18 = 1;
LABEL_35:
              sub_23677FD6C(v20);
              return v18;
            }
          }
        }
        v18 = 0;
        goto LABEL_35;
      }
    }
  }
  return 0;
}

_QWORD **sub_23677F1B4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD **v8;

  v2 = a2;
  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    v4 = &qword_25642E910;
    v5 = &unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == v3)
      {
        v5 = (void *)a2[1];
        break;
      }
    }
  }
  else
  {
    v5 = &unk_250800620;
  }
  v6 = (__int128 *)*((_QWORD *)v5 + 6);
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v7 = (*((uint64_t (**)(_QWORD, uint64_t))v6 + 1))(a2[1], 16);
  v8 = (_QWORD **)v7;
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = v3;
    while (1)
    {
      v2 = (_QWORD *)*v2;
      if (!v2)
        break;
      if (!sub_23676F5B8(v8, v2[3], v2[4], v2[1], v2[2]))
      {
        sub_23676F434(v8);
        return 0;
      }
    }
  }
  return v8;
}

uint64_t sub_23677F26C(uint64_t a1, _QWORD **a2)
{
  return sub_23676F434(a2);
}

uint64_t ****sub_23677F274(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  unsigned int v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  double *v42;
  double *v43;
  double v44;
  long double v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  void *v49;
  __int128 *v50;
  double v52[21];

  v52[19] = *(double *)MEMORY[0x24BDAC8D0];
  *a3 = 0;
  LODWORD(v52[0]) = 0;
  if ((*(unsigned int (**)(uint64_t, double *, uint64_t, uint64_t))(a2 + 280))(a2, v52, 4, 1) != 1)
    return 0;
  v8 = *(uint64_t **)(a1 + 40);
  if (v8)
  {
    v9 = &qword_25642E910;
    v10 = &unk_250800620;
    while (1)
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        break;
      if (v9 == v8)
      {
        v10 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v10 = &unk_250800620;
  }
  v11 = LODWORD(v52[0]);
  v12 = (__int128 *)*((_QWORD *)v10 + 6);
  if (!v12)
    v12 = &xmmword_2542ABF08;
  v13 = (*((uint64_t (**)(void))v12 + 4))();
  v19 = (uint64_t ****)v13;
  if (v13)
  {
    v20 = bswap32(v11);
    if (v20 == 1)
    {
      v40 = 0;
      v41 = (_QWORD *)v13;
      while (1)
      {
        v42 = &v52[v40 + 10];
        if (!sub_236776800(a2, &v52[v40 + 10]))
          break;
        v43 = v42 + 1;
        if (!sub_236776800(a2, v42 + 1))
          break;
        if (!sub_236776800(a2, &v52[v40 + 12]))
          break;
        v52[0] = *v42;
        v44 = *v43;
        v45 = pow(v52[v40 + 12] - *v43, 1.0 / v52[0]);
        memset(&v52[2], 0, 24);
        v52[1] = v45;
        v52[5] = v44;
        v52[6] = 0.0;
        v46 = sub_2367654B0(*(uint64_t **)(a1 + 40), 5);
        *v41 = v46;
        if (!v46)
          break;
        ++v41;
        v40 += 3;
        if (v40 == 9)
        {
LABEL_43:
          *a3 = 1;
          return v19;
        }
      }
    }
    else if (v20)
    {
      sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unsupported tag type for VCGT '%d'", v14, v15, v16, v17, v18, v20);
    }
    else
    {
      LOWORD(v52[0]) = 0;
      if ((*(unsigned int (**)(uint64_t, double *, uint64_t, uint64_t))(a2 + 280))(a2, v52, 2, 1) == 1)
      {
        if (LOWORD(v52[0]) == 768)
        {
          LOWORD(v52[0]) = 0;
          if ((*(unsigned int (**)(uint64_t, double *, uint64_t, uint64_t))(a2 + 280))(a2, v52, 2, 1) == 1)
          {
            v26 = LOWORD(v52[0]);
            LOWORD(v52[0]) = 0;
            if ((*(unsigned int (**)(uint64_t, double *, uint64_t, uint64_t))(a2 + 280))(a2, v52, 2, 1) == 1)
            {
              v30 = 0;
              v31 = __rev16(v26);
              v32 = __rev16(LOWORD(v52[0]));
              if (LOWORD(v52[0]) == 256 && v26 == 1 && a4 == 1576)
                v35 = 2;
              else
                v35 = v32;
              while (1)
              {
                v36 = sub_236764590(*(uint64_t **)(a1 + 40), v31, 0, 0, 0, v27, v28, v29);
                v19[v30] = (uint64_t ***)v36;
                if (!v36)
                  break;
                if (v35 == 2)
                {
                  if (!sub_236776694(a2, v31, *(_WORD **)(v36 + 48)))
                    break;
                }
                else
                {
                  if (v35 != 1)
                  {
                    sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unsupported bit depth for VCGT '%d'", v37, v38, v27, v28, v29, 8 * v35);
                    break;
                  }
                  if (v26)
                  {
                    v39 = 0;
                    do
                    {
                      LOBYTE(v52[0]) = 0;
                      if ((*(unsigned int (**)(uint64_t, double *, uint64_t, uint64_t))(a2 + 280))(a2, v52, 1, 1) != 1)goto LABEL_47;
                      *((_WORD *)v19[v30][6] + v39++) = LOBYTE(v52[0]) | (LOBYTE(v52[0]) << 8);
                    }
                    while (v31 != v39);
                  }
                }
                if (++v30 == 3)
                  goto LABEL_43;
              }
            }
          }
        }
        else
        {
          sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unsupported number of channels for VCGT '%d'", v21, v22, v23, v24, v25, __rev16(LOWORD(v52[0])));
        }
      }
    }
LABEL_47:
    sub_236765878(v19);
    v47 = *(uint64_t **)(a1 + 40);
    if (v47)
    {
      v48 = &qword_25642E910;
      v49 = &unk_250800620;
      while (1)
      {
        v48 = (uint64_t *)*v48;
        if (!v48)
          break;
        if (v48 == v47)
        {
          v49 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v49 = &unk_250800620;
    }
    v50 = (__int128 *)*((_QWORD *)v49 + 6);
    if (!v50)
      v50 = &xmmword_2542ABF08;
    (*((void (**)(void))v50 + 2))();
    return 0;
  }
  return v19;
}

uint64_t sub_23677F658(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  long double v10;
  double v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  double v17;
  unsigned int v18;
  unsigned int v19;

  if (*(_DWORD *)(*a3 + 8) == 1
    && *(_DWORD *)(*(_QWORD *)(*a3 + 16) + 8) == 5
    && (v5 = a3[1], *(_DWORD *)(v5 + 8) == 1)
    && *(_DWORD *)(*(_QWORD *)(v5 + 16) + 8) == 5
    && (v6 = a3[2], *(_DWORD *)(v6 + 8) == 1)
    && *(_DWORD *)(*(_QWORD *)(v6 + 16) + 8) == 5)
  {
    v19 = 0x1000000;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v19) == 1)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(a3[v7] + 16);
        v9 = *(double *)(v8 + 56);
        v10 = *(double *)(v8 + 16);
        v11 = pow(*(long double *)(v8 + 24), v10);
        v19 = bswap32(vcvtmd_s64_f64(v10 * 65536.0 + 0.5));
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v19) != 1)
          break;
        v19 = bswap32(vcvtmd_s64_f64(v9 * 65536.0 + 0.5));
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v19) != 1)
          break;
        v19 = bswap32(vcvtmd_s64_f64((v9 + v11) * 65536.0 + 0.5));
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v19);
        if ((_DWORD)result != 1)
          break;
        if (++v7 == 3)
          return result;
      }
    }
  }
  else
  {
    v19 = 0;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v19);
    result = 0;
    if (v13 != 1)
      return result;
    LOWORD(v19) = 768;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v19) == 1)
    {
      LOWORD(v19) = 1;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v19) == 1)
      {
        LOWORD(v19) = 512;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v19) == 1)
        {
          v14 = 0;
LABEL_19:
          v15 = 0;
          while (1)
          {
            v16 = (double)v15 / 255.0;
            v17 = sub_236765B54((_DWORD *)a3[v14], v16) * 65535.0 + 0.5;
            if (v17 <= 0.0)
              v18 = 0;
            else
              v18 = v17 >= 65535.0 ? 0xFFFF : (COERCE_UNSIGNED_INT64(v17 + -32767.0 + 1.03079215e11) >> 16) + 0x7FFF;
            LOWORD(v19) = bswap32(v18) >> 16;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v19) != 1)
              break;
            if (++v15 == 256)
            {
              ++v14;
              result = 1;
              if (v14 != 3)
                goto LABEL_19;
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_23677F954(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(uint64_t **)(a1 + 40);
  if (v3)
  {
    v4 = &qword_25642E910;
    v5 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (v4 == v3)
      {
        v5 = v3;
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)&unk_250800620;
  }
  v6 = (__int128 *)v5[6];
  if (!v6)
    v6 = &xmmword_2542ABF08;
  v14 = (uint64_t *)(*((uint64_t (**)(void))v6 + 4))();
  if (v14)
  {
    *v14 = sub_2367658C0(*a2, v7, v8, v9, v10, v11, v12, v13);
    v14[1] = sub_2367658C0(a2[1], v15, v16, v17, v18, v19, v20, v21);
    v14[2] = sub_2367658C0(a2[2], v22, v23, v24, v25, v26, v27, v28);
  }
  return v14;
}

uint64_t ***sub_23677F9FC(uint64_t a1, uint64_t ****a2)
{
  uint64_t ***result;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  __int128 *v8;

  result = sub_236765878(a2);
  if (a2)
  {
    v5 = *(uint64_t **)(a1 + 40);
    if (v5)
    {
      v6 = &qword_25642E910;
      v7 = &unk_250800620;
      while (1)
      {
        v6 = (uint64_t *)*v6;
        if (!v6)
          break;
        if (v6 == v5)
        {
          v7 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v7 = &unk_250800620;
    }
    v8 = (__int128 *)*((_QWORD *)v7 + 6);
    if (!v8)
      v8 = &xmmword_2542ABF08;
    return (uint64_t ***)(*((uint64_t (**)(void))v8 + 2))();
  }
  return result;
}

uint64_t sub_23677FA88(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (sub_23677FF40(a1, (uint64_t **)a2, a3)
    && sub_23677FF40(a1, (uint64_t **)(a2 + 24), a3)
    && (a4 < 0x11
     || sub_23677FF40(a1, (uint64_t **)(a2 + 48), a3)
     && (a4 < 0x19 || sub_23677FF40(a1, (uint64_t **)(a2 + 72), a3))))
  {
    return 1;
  }
  sub_23677FD6C((_QWORD *)a2);
  return 0;
}

BOOL sub_23677FB30(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  if (!a3)
    return 1;
  v8 = 0;
  v9 = a2 + 24;
  v10 = a2 + 48;
  v11 = a2 + 72;
  while (1)
  {
    result = sub_23677FEAC(a1, a2, v8);
    if (!result)
      break;
    result = sub_23677FEAC(a1, v9, v8);
    if (!result)
      break;
    if (a4 >= 0x11)
    {
      result = sub_23677FEAC(a1, v10, v8);
      if (!result)
        break;
      if (a4 >= 0x19)
      {
        result = sub_23677FEAC(a1, v11, v8);
        if (!result)
          break;
      }
    }
    if (a3 == ++v8)
      return 1;
  }
  return result;
}

uint64_t sub_23677FBFC(uint64_t a1, uint64_t a2, unsigned int a3, char *a4, int a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  __int16 v20;

  v10 = (*(uint64_t (**)(void))(a1 + 304))();
  v11 = v10 - a5;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = a3;
  *(_DWORD *)(v12 + 4 * a3) = v11;
  if (!a4)
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * a3) = 0;
    *(_DWORD *)(v12 + 4 * a3) = 0;
    return 1;
  }
  v14 = v10;
  v15 = (unsigned __int16 *)(a4 - 4);
  LODWORD(v16) = -1;
  do
  {
    v17 = *((_DWORD *)v15 + 1);
    v15 += 2;
    v16 = (v16 + 1);
  }
  while (v17);
  if ((((char *)v15 - a4) & 0x3FFFFFFFCLL) == 0)
  {
LABEL_7:
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v13) = (*(uint64_t (**)(uint64_t))(a1 + 304))(a1) - v14;
    return 1;
  }
  while (1)
  {
    v18 = *(unsigned __int16 *)a4;
    a4 += 4;
    v20 = bswap32(v18) >> 16;
    if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a1 + 312))(a1, 2, &v20) != 1)
      return 0;
    if (!--v16)
      goto LABEL_7;
  }
}

uint64_t sub_23677FCE8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t result;

  v10 = (*(uint64_t (**)(void))(a1 + 304))();
  v11 = v10;
  *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * a3) = v10 - a5;
  result = sub_23677B430(v10, a1, a4);
  if ((_DWORD)result)
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * a3) = (*(uint64_t (**)(uint64_t))(a1 + 304))(a1) - v11;
    return 1;
  }
  return result;
}

_QWORD *sub_23677FD6C(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (result[1])
    result = sub_23677FDD0(result);
  if (v1[4])
    result = sub_23677FDD0(v1 + 3);
  if (v1[7])
    result = sub_23677FDD0(v1 + 6);
  if (v1[10])
    return sub_23677FDD0(v1 + 9);
  return result;
}

_QWORD *sub_23677FDD0(_QWORD *result)
{
  uint64_t **v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;

  v1 = (uint64_t **)result;
  v2 = result + 1;
  if (result[1])
  {
    v3 = (uint64_t *)*result;
    if (*v1)
    {
      v4 = &qword_25642E910;
      v5 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v4 = (uint64_t *)*v4;
        if (!v4)
          break;
        if (v4 == v3)
        {
          v5 = *v1;
          break;
        }
      }
    }
    else
    {
      v5 = (uint64_t *)&unk_250800620;
    }
    v6 = (__int128 *)v5[6];
    if (!v6)
      v6 = &xmmword_2542ABF08;
    result = (_QWORD *)(*((uint64_t (**)(void))v6 + 2))();
  }
  if (v1[2])
  {
    if (*v1)
    {
      v7 = &qword_25642E910;
      v8 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v7 = (uint64_t *)*v7;
        if (!v7)
          break;
        if (v7 == *v1)
        {
          v8 = *v1;
          break;
        }
      }
    }
    else
    {
      v8 = (uint64_t *)&unk_250800620;
    }
    v9 = (__int128 *)v8[6];
    if (!v9)
      v9 = &xmmword_2542ABF08;
    result = (_QWORD *)(*((uint64_t (**)(void))v9 + 2))();
  }
  *v2 = 0;
  v2[1] = 0;
  return result;
}

BOOL sub_23677FEAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v7;
  unsigned int v8;

  v7 = bswap32(*(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * a3));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v7) != 1)
    return 0;
  v8 = bswap32(*(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * a3));
  return (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v8) == 1;
}

uint64_t sub_23677FF40(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 *v16;

  if (a1)
  {
    v6 = &qword_25642E910;
    v7 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (v6 == a1)
      {
        v7 = a1;
        break;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
  v8 = (__int128 *)v7[6];
  if (!v8)
    v8 = &xmmword_2542ABF08;
  result = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v8 + 4))(a1, a3, 4);
  a2[1] = (uint64_t *)result;
  if (result)
  {
    if (a1)
    {
      v10 = &qword_25642E910;
      v11 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        if (v10 == a1)
        {
          v11 = a1;
          break;
        }
      }
    }
    else
    {
      v11 = (uint64_t *)&unk_250800620;
    }
    v12 = (__int128 *)v11[6];
    if (!v12)
      v12 = &xmmword_2542ABF08;
    v13 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t))v12 + 4))(a1, a3, 4);
    a2[2] = (uint64_t *)v13;
    if (v13)
    {
      *a2 = a1;
      return 1;
    }
    else
    {
      if (a2[1])
      {
        if (a1)
        {
          v14 = &qword_25642E910;
          v15 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v14 = (uint64_t *)*v14;
            if (!v14)
              break;
            if (v14 == a1)
            {
              v15 = a1;
              break;
            }
          }
        }
        else
        {
          v15 = (uint64_t *)&unk_250800620;
        }
        v16 = (__int128 *)v15[6];
        if (!v16)
          v16 = &xmmword_2542ABF08;
        (*((void (**)(uint64_t *))v16 + 2))(a1);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_236780090(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v13;
  unsigned int v14;

  v8 = *(_QWORD *)(a2 + 8);
  v13 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a1 + 280))(a1, &v13, 4, 1) != 1)
    return 0;
  if (v8)
    *(_DWORD *)(v8 + 4 * a3) = bswap32(v13);
  v9 = *(_QWORD *)(a2 + 16);
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a1 + 280))(a1, &v14, 4, 1) != 1)
    return 0;
  if (v9)
    *(_DWORD *)(v9 + 4 * a3) = bswap32(v14);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD *)(v10 + 4 * a3);
  if (v11)
    *(_DWORD *)(v10 + 4 * a3) = v11 + a4;
  return 1;
}

uint64_t sub_236780160(uint64_t a1, uint64_t **a2, unsigned int a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 *v15;

  if (!*((_DWORD *)a2[1] + a3))
  {
    *a4 = 0;
    return 1;
  }
  result = (*(uint64_t (**)(void))(a1 + 288))();
  if ((_DWORD)result)
  {
    v9 = (unint64_t)*((unsigned int *)a2[2] + a3) >> 1;
    if (*a2)
    {
      v10 = &qword_25642E910;
      v11 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        if (v10 == *a2)
        {
          v11 = *a2;
          break;
        }
      }
    }
    else
    {
      v11 = (uint64_t *)&unk_250800620;
    }
    v12 = (__int128 *)v11[6];
    if (!v12)
      v12 = &xmmword_2542ABF08;
    result = (*((uint64_t (**)(void))v12 + 1))();
    *a4 = result;
    if (result)
    {
      if (sub_236780344(a1, v9, (unsigned int *)result))
      {
        *(_DWORD *)(*a4 + 4 * v9) = 0;
        return 1;
      }
      if (*a4)
      {
        if (*a2)
        {
          v13 = &qword_25642E910;
          v14 = (uint64_t *)&unk_250800620;
          while (1)
          {
            v13 = (uint64_t *)*v13;
            if (!v13)
              break;
            if (v13 == *a2)
            {
              v14 = *a2;
              break;
            }
          }
        }
        else
        {
          v14 = (uint64_t *)&unk_250800620;
        }
        v15 = (__int128 *)v14[6];
        if (!v15)
          v15 = &xmmword_2542ABF08;
        (*((void (**)(void))v15 + 2))();
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_2367802A8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t ***a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t **v11;
  int v12;

  if (*(_DWORD *)(*(_QWORD *)(a3 + 8) + 4 * a4) && (v8 = a4, *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * a4)))
  {
    result = (*(uint64_t (**)(uint64_t))(a2 + 288))(a2);
    if ((_DWORD)result)
    {
      v11 = sub_23677B168(a1, a2, &v12, *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v8));
      *a5 = v11;
      return v11 != 0;
    }
  }
  else
  {
    *a5 = 0;
    return 1;
  }
  return result;
}

uint64_t sub_236780344(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  unsigned __int16 v7;

  if (!a2)
    return 1;
  v5 = a2;
  while (1)
  {
    v7 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a1 + 280))(a1, &v7, 2, 1) != 1)
      break;
    *a3++ = bswap32(v7) >> 16;
    if (!--v5)
      return 1;
  }
  return 0;
}

uint64_t sub_2367803CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = a4;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a2 + 312))(a2, 16, *(_QWORD *)(a3 + 16) + ((unint64_t)a4 << 6) + 20);
  if ((_DWORD)result)
    return sub_236780AEC(a1, a2, *(int **)(*(_QWORD *)(a3 + 16) + (v7 << 6) + 56));
  return result;
}

uint64_t sub_236780440(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  __int128 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35;
  __int128 *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  __int128 *v40;
  unsigned int v42;
  unsigned int v44;

  LODWORD(v8) = a3;
  v11 = *(uint64_t **)(a2 + 8);
  if (v11)
  {
    v12 = &qword_25642E910;
    v13 = &unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == v11)
      {
        v13 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  else
  {
    v13 = &unk_250800620;
  }
  v14 = (__int128 *)*((_QWORD *)v13 + 6);
  if (!v14)
    v14 = &xmmword_2542ABF08;
  v15 = (*((uint64_t (**)(void))v14 + 4))();
  if (!v15)
    return 0;
  v16 = (unsigned int *)v15;
  v17 = *(uint64_t **)(a2 + 8);
  if (v17)
  {
    v18 = &qword_25642E910;
    v19 = &unk_250800620;
    while (1)
    {
      v18 = (uint64_t *)*v18;
      if (!v18)
        break;
      if (v18 == v17)
      {
        v19 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  else
  {
    v19 = &unk_250800620;
  }
  v21 = (__int128 *)*((_QWORD *)v19 + 6);
  if (!v21)
    v21 = &xmmword_2542ABF08;
  v22 = (*((uint64_t (**)(void))v21 + 4))();
  if (v22)
  {
    v23 = (unsigned int *)v22;
    v42 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
    if ((_DWORD)v8)
    {
      v24 = v8;
      while (1)
      {
        v44 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v44) != 1)
          break;
        v44 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v44) != 1)
          break;
        if (!--v24)
        {
          v25 = 0;
          while (1)
          {
            v26 = v23;
            v27 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
            v16[v25] = v27 - a4;
            if (!a6(a1, a2, a5, v25, 0))
              break;
            v28 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2) - v27;
            v23 = v26;
            v26[v25++] = v28;
            if (v8 == v25)
              goto LABEL_28;
          }
          v20 = 0;
          goto LABEL_37;
        }
      }
    }
    else
    {
LABEL_28:
      v29 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
      if ((*(unsigned int (**)(uint64_t, _QWORD))(a2 + 288))(a2, v42))
      {
        if ((_DWORD)v8)
        {
          v8 = v8;
          v30 = v16;
          v31 = v23;
          while (1)
          {
            v32 = *v30++;
            v44 = bswap32(v32);
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v44) != 1)
              break;
            v44 = bswap32(*v31);
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v44) != 1)
              break;
            ++v31;
            if (!--v8)
              goto LABEL_34;
          }
        }
        else
        {
LABEL_34:
          if ((*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, v29))
          {
            v20 = 1;
LABEL_37:
            v33 = *(uint64_t **)(a2 + 8);
            if (v33)
            {
              v34 = &qword_25642E910;
              v35 = &unk_250800620;
              while (1)
              {
                v34 = (uint64_t *)*v34;
                if (!v34)
                  break;
                if (v34 == v33)
                {
                  v35 = *(void **)(a2 + 8);
                  break;
                }
              }
            }
            else
            {
              v35 = &unk_250800620;
            }
            v36 = (__int128 *)*((_QWORD *)v35 + 6);
            if (!v36)
              v36 = &xmmword_2542ABF08;
            (*((void (**)(void))v36 + 2))();
            goto LABEL_47;
          }
        }
      }
    }
    v20 = 0;
    goto LABEL_37;
  }
  v20 = 0;
LABEL_47:
  v37 = *(uint64_t **)(a2 + 8);
  if (v37)
  {
    v38 = &qword_25642E910;
    v39 = &unk_250800620;
    while (1)
    {
      v38 = (uint64_t *)*v38;
      if (!v38)
        break;
      if (v38 == v37)
      {
        v39 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  else
  {
    v39 = &unk_250800620;
  }
  v40 = (__int128 *)*((_QWORD *)v39 + 6);
  if (!v40)
    v40 = &xmmword_2542ABF08;
  (*((void (**)(void))v40 + 2))();
  return v20;
}

uint64_t sub_2367807A4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  double *i;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  double *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * a4);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_DWORD *)(v5 + 8);
  v26 = 1718777187;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) == 1)
  {
    v26 = 0;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26);
    result = 0;
    if (v8 != 1)
      return result;
    LOWORD(v26) = bswap32(v7) >> 16;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v26) == 1)
    {
      LOWORD(v26) = 0;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v26);
      result = 0;
      if (v10 != 1)
        return result;
      v11 = v7 - 1;
      if ((_DWORD)v11)
      {
        v12 = (unsigned int *)(v6 + 4);
        while (1)
        {
          v13 = *v12;
          v12 += 28;
          v26 = bswap32(v13);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) != 1)
            break;
          if (!--v11)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        if (!*(_DWORD *)(v5 + 8))
          return 1;
        v14 = 0;
        for (i = (double *)(v6 + 16); ; i += 14)
        {
          v16 = v6 + 112 * v14;
          v18 = *(_DWORD *)(v16 + 8);
          v17 = (int *)(v16 + 8);
          if (v18)
          {
            v26 = 1718772080;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) == 1)
            {
              v26 = 0;
              if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) == 1)
              {
                v19 = *v17;
                if ((*v17 - 9) >= 0xFFFFFFFD)
                {
                  v20 = v19 - 6;
                  LOWORD(v26) = bswap32(v19 - 6) >> 16;
                  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v26) == 1)
                  {
                    LOWORD(v26) = 0;
                    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v26) == 1)
                    {
                      v21 = dword_2368B3914[v20];
                      if (v21 <= 1)
                        v22 = 1;
                      else
                        v22 = v21;
                      v23 = i;
                      while (1)
                      {
                        *(float *)&v24 = *v23;
                        v26 = bswap32(v24);
                        if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) != 1)break;
                        ++v23;
                        if (!--v22)
                          goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
            return 0;
          }
          v26 = 1718444403;
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) != 1)
            return 0;
          v26 = 0;
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) != 1)
            return 0;
          v26 = bswap32(*(_DWORD *)(v6 + 112 * v14 + 96));
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) != 1)
            return 0;
          if (*(_DWORD *)(*(_QWORD *)(v5 + 16) + 112 * v14 + 96))
            break;
LABEL_31:
          ++v14;
          result = 1;
          if (v14 >= *(unsigned int *)(v5 + 8))
            return result;
        }
        v25 = 0;
        while (1)
        {
          v26 = bswap32(*(_DWORD *)(*(_QWORD *)(v6 + 112 * v14 + 104) + 4 * v25));
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v26) != 1)
            break;
          if (++v25 >= (unint64_t)*(unsigned int *)(*(_QWORD *)(v5 + 16) + 112 * v14 + 96))
            goto LABEL_31;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_236780AEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 48) >> 26)
  {
    v8 = 1668639853;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a2 + 312))(a2, 8, &v8);
    if ((_DWORD)v7)
      return sub_23677B430(v7, a2, (uint64_t)a3);
  }
  else
  {
    v8 = 1668506980;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(a2 + 312))(a2, 8, &v8))
      return sub_2367785E8(a1, a2, a3);
  }
  return 0;
}

BOOL sub_236780BB4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v8;

  v8 = *(_QWORD *)(a3 + 16) + ((unint64_t)a4 << 6);
  return (*(unsigned int (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 280))(a2, v8 + 20, 16, 1) == 1&& sub_236782468(a1, a2, (uint64_t ***)(v8 + 56), a5);
}

uint64_t sub_236780C30(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v9;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  __int128 *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  __int128 *v31;
  uint64_t *v32;
  uint64_t *v33;
  void *v34;
  __int128 *v35;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  LODWORD(v9) = a3;
  if (a3 > (*(_DWORD *)(a2 + 20) - (*(unsigned int (**)(uint64_t))(a2 + 304))(a2)) >> 3)
    return 0;
  v12 = *(uint64_t **)(a2 + 8);
  if (v12)
  {
    v13 = &qword_25642E910;
    v14 = &unk_250800620;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v13 == v12)
      {
        v14 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  else
  {
    v14 = &unk_250800620;
  }
  v15 = (__int128 *)*((_QWORD *)v14 + 6);
  if (!v15)
    v15 = &xmmword_2542ABF08;
  v16 = (*((uint64_t (**)(void))v15 + 4))();
  if (!v16)
    return 0;
  v17 = (_DWORD *)v16;
  v18 = *(uint64_t **)(a2 + 8);
  if (v18)
  {
    v19 = &qword_25642E910;
    v20 = &unk_250800620;
    while (1)
    {
      v19 = (uint64_t *)*v19;
      if (!v19)
        break;
      if (v19 == v18)
      {
        v20 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  else
  {
    v20 = &unk_250800620;
  }
  v22 = (__int128 *)*((_QWORD *)v20 + 6);
  if (!v22)
    v22 = &xmmword_2542ABF08;
  v23 = (*((uint64_t (**)(void))v22 + 4))();
  if (v23)
  {
    v24 = v23;
    if ((_DWORD)v9)
    {
      v9 = v9;
      v25 = v17;
      v26 = (_DWORD *)v23;
      v37 = v9;
      do
      {
        v38 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v38, 4, 1) != 1
          || (*v25 = bswap32(v38),
              v39 = 0,
              (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v39, 4, 1) != 1))
        {
          v21 = 0;
          goto LABEL_34;
        }
        *v26++ = bswap32(v39);
        *v25++ += a4;
        --v9;
      }
      while (v9);
      v27 = 0;
      while ((*(unsigned int (**)(uint64_t, _QWORD))(a2 + 288))(a2, v17[v27])
           && a6(a1, a2, a5, v27, *(unsigned int *)(v24 + 4 * v27)))
      {
        if (v37 == ++v27)
          goto LABEL_30;
      }
      v21 = 0;
    }
    else
    {
LABEL_30:
      v21 = 1;
    }
LABEL_34:
    v28 = *(uint64_t **)(a2 + 8);
    if (v28)
    {
      v29 = &qword_25642E910;
      v30 = &unk_250800620;
      while (1)
      {
        v29 = (uint64_t *)*v29;
        if (!v29)
          break;
        if (v29 == v28)
        {
          v30 = *(void **)(a2 + 8);
          break;
        }
      }
    }
    else
    {
      v30 = &unk_250800620;
    }
    v31 = (__int128 *)*((_QWORD *)v30 + 6);
    if (!v31)
      v31 = &xmmword_2542ABF08;
    (*((void (**)(void))v31 + 2))();
  }
  else
  {
    v21 = 0;
  }
  v32 = *(uint64_t **)(a2 + 8);
  if (v32)
  {
    v33 = &qword_25642E910;
    v34 = &unk_250800620;
    while (1)
    {
      v33 = (uint64_t *)*v33;
      if (!v33)
        break;
      if (v33 == v32)
      {
        v34 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  else
  {
    v34 = &unk_250800620;
  }
  v35 = (__int128 *)*((_QWORD *)v34 + 6);
  if (!v35)
    v35 = &xmmword_2542ABF08;
  (*((void (**)(void))v35 + 2))();
  return v21;
}

BOOL sub_236780F0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  __int128 *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v19;
  uint64_t v20;
  float *v21;
  int v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  __int128 *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  void *v58;
  __int128 *v59;
  uint64_t *v60;
  uint64_t *v61;
  void *v62;
  __int128 *v63;
  unint64_t v64;
  uint64_t v65;
  float v66;
  char v67;

  v66 = 0.0;
  if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 4, 1) != 1)
    goto LABEL_18;
  if (v66 != 2.8624e23)
    goto LABEL_18;
  v66 = 0.0;
  if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 4, 1) != 1)
    goto LABEL_18;
  LOWORD(v66) = 0;
  if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 2, 1) != 1)
    goto LABEL_18;
  v8 = LOWORD(v66);
  LOWORD(v66) = 0;
  v9 = 0;
  if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 2, 1) != 1 || !v8)
    goto LABEL_19;
  v10 = __rev16(v8);
  v11 = *(uint64_t **)(a1 + 40);
  if (v11)
  {
    v12 = &qword_25642E910;
    v13 = &unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == v11)
      {
        v13 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v13 = &unk_250800620;
  }
  v14 = (__int128 *)*((_QWORD *)v13 + 6);
  if (!v14)
    v14 = &xmmword_2542ABF08;
  v15 = (_QWORD *)(*((uint64_t (**)(void))v14 + 4))();
  if (!v15)
  {
LABEL_18:
    v9 = 0;
    goto LABEL_19;
  }
  v16 = (uint64_t)v15;
  if (v8 == 256)
  {
    *v15 = 0x64078678E4078678;
    v17 = 1;
LABEL_27:
    if (v17 <= 1)
      v17 = 1;
    v64 = v17;
    v65 = 0;
    v24 = v16 + 16;
    while (1)
    {
      v66 = 0.0;
      if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 4, 1) != 1)
        break;
      *(float *)&v25 = v66;
      v66 = 0.0;
      if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 4, 1) != 1)
        break;
      v31 = bswap32(v25);
      if (v31 != 1935764838)
      {
        if (v31 == 1885434470)
        {
          LOWORD(v66) = 0;
          if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 2, 1) == 1)
          {
            v32 = LOWORD(v66);
            LOWORD(v66) = 0;
            if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 2, 1) == 1)
            {
              v33 = bswap32(v32) >> 16;
              *(_DWORD *)(v16 + 112 * v65 + 8) = v33 + 6;
              if (v33 <= 2)
              {
                v34 = 0;
                while (1)
                {
                  v66 = 0.0;
                  if (!sub_236776750(a2, &v66))
                    break;
                  *(double *)(v24 + 8 * v34++) = v66;
                  if (v34 >= dword_2368B3914[v33])
                    goto LABEL_55;
                }
              }
            }
          }
        }
        else
        {
          v66 = *(float *)&v25;
          v67 = 0;
          sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unknown curve element type '%s' found.", v26, v27, v28, v29, v30, (char)&v66);
        }
        break;
      }
      v66 = 0.0;
      if ((*(unsigned int (**)(uint64_t, float *, uint64_t, uint64_t))(a2 + 280))(a2, &v66, 4, 1) != 1)
        break;
      v40 = v66;
      v41 = bswap32(LODWORD(v66));
      *(_DWORD *)(v16 + 112 * v65 + 96) = v41;
      v42 = *(uint64_t **)(a1 + 40);
      if (v42)
      {
        v43 = &qword_25642E910;
        while (1)
        {
          v43 = (uint64_t *)*v43;
          if (!v43)
            break;
          if (v43 == v42)
          {
            v44 = *(void **)(a1 + 40);
            goto LABEL_48;
          }
        }
      }
      v44 = &unk_250800620;
LABEL_48:
      v45 = (__int128 *)*((_QWORD *)v44 + 6);
      if (!v45)
        v45 = &xmmword_2542ABF08;
      v46 = (*((uint64_t (**)(void))v45 + 4))();
      v47 = v16 + 112 * v65;
      *(_QWORD *)(v47 + 104) = v46;
      v48 = (_QWORD *)(v47 + 104);
      if (!v46)
        break;
      if (v40 != 0.0)
      {
        v49 = 0;
        while (sub_236776750(a2, (float *)(*v48 + v49)))
        {
          v49 += 4;
          if (!--v41)
            goto LABEL_55;
        }
        break;
      }
LABEL_55:
      v24 += 112;
      if (++v65 == v64)
      {
        v9 = sub_23676518C(*(uint64_t **)(a1 + 40), v10, v16, v35, v36, v37, v38, v39);
        v50 = 0;
        do
        {
          if (*(_QWORD *)(v16 + 112 * v50 + 104))
          {
            v51 = *(uint64_t **)(a1 + 40);
            if (v51)
            {
              v52 = &qword_25642E910;
              while (1)
              {
                v52 = (uint64_t *)*v52;
                if (!v52)
                  break;
                if (v52 == v51)
                {
                  v53 = *(void **)(a1 + 40);
                  goto LABEL_64;
                }
              }
            }
            v53 = &unk_250800620;
LABEL_64:
            v54 = (__int128 *)*((_QWORD *)v53 + 6);
            if (!v54)
              v54 = &xmmword_2542ABF08;
            (*((void (**)(void))v54 + 2))();
          }
          ++v50;
        }
        while (v50 < v10);
        goto LABEL_83;
      }
    }
  }
  else
  {
    v19 = v10 - 1;
    if ((v10 - 1) <= 1)
      v20 = 1;
    else
      v20 = v19;
    v21 = (float *)v15 + 1;
    v22 = -469268872;
    while (1)
    {
      *((_DWORD *)v21 - 1) = v22;
      if (!sub_236776750(a2, v21))
        break;
      v23 = *v21;
      v21 += 28;
      v22 = LODWORD(v23);
      if (!--v20)
      {
        *(_DWORD *)(v16 + 112 * (int)v19) = v22;
        *(_DWORD *)(v16 + 112 * v10 - 108) = 1678214776;
        v17 = v10;
        goto LABEL_27;
      }
    }
  }
  v55 = 0;
  do
  {
    if (*(_QWORD *)(v16 + 112 * v55 + 104))
    {
      v56 = *(uint64_t **)(a1 + 40);
      if (v56)
      {
        v57 = &qword_25642E910;
        while (1)
        {
          v57 = (uint64_t *)*v57;
          if (!v57)
            break;
          if (v57 == v56)
          {
            v58 = *(void **)(a1 + 40);
            goto LABEL_78;
          }
        }
      }
      v58 = &unk_250800620;
LABEL_78:
      v59 = (__int128 *)*((_QWORD *)v58 + 6);
      if (!v59)
        v59 = &xmmword_2542ABF08;
      (*((void (**)(void))v59 + 2))();
    }
    ++v55;
  }
  while (v55 < v10);
  v9 = 0;
LABEL_83:
  v60 = *(uint64_t **)(a1 + 40);
  if (v60)
  {
    v61 = &qword_25642E910;
    v62 = &unk_250800620;
    while (1)
    {
      v61 = (uint64_t *)*v61;
      if (!v61)
        break;
      if (v61 == v60)
      {
        v62 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v62 = &unk_250800620;
  }
  v63 = (__int128 *)*((_QWORD *)v62 + 6);
  if (!v63)
    v63 = &xmmword_2542ABF08;
  (*((void (**)(void))v63 + 2))();
LABEL_19:
  *(_QWORD *)(a3 + 8 * a4) = v9;
  return v9 != 0;
}

uint64_t sub_236781484(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t *v10;
  char **v11;
  char **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  unsigned int v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t, int *, uint64_t);
  uint64_t v24;
  unsigned int v25;
  char v26;
  int v27;

  v9 = *(uint64_t **)(a1 + 40);
  if (v9)
  {
    v10 = &qword_25642E910;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v9)
        goto LABEL_8;
    }
    v9 = (uint64_t *)&unk_250800620;
  }
  else
  {
    v9 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v11 = (char **)v9[13];
  if (v11)
    v12 = v11;
  else
    v12 = (char **)&unk_25642E940;
  v27 = 0;
  v25 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 4, 1) != 1)
    return 0;
  v13 = v25;
  v25 = 0;
  v19 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 4, 1);
  result = 0;
  if (v19 == 1)
  {
    v21 = bswap32(v13);
    v22 = *v12;
    if (*v12)
    {
      while (*(_DWORD *)v22 != v21)
      {
        v22 = (char *)*((_QWORD *)v22 + 7);
        if (!v22)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v22 = aScab;
      while (*(_DWORD *)v22 != v21)
      {
        v22 = (char *)*((_QWORD *)v22 + 7);
        if (!v22)
        {
          v25 = v13;
          v26 = 0;
          sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unknown MPE type '%s' found.", v14, v15, v16, v17, v18, (char)&v25);
          return 0;
        }
      }
    }
    v23 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t))*((_QWORD *)v22 + 1);
    if (!v23)
      return 1;
    v24 = v23(a1, a2, &v27, a5);
    result = sub_23676DB6C(a3, 1, v24);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

int32x2_t *sub_236781608(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v17;
  uint64_t ***v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  __int128 *v22;
  unsigned __int16 v23;
  unsigned __int16 v24;

  *a3 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v23, 2, 1) != 1)
    return 0;
  v7 = v23;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 2, 1) != 1
    || v7 != v24)
  {
    return 0;
  }
  v8 = __rev16(v7);
  v9 = *(uint64_t **)(a1 + 40);
  if (v9)
  {
    v10 = &qword_25642E910;
    v11 = &unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v9)
      {
        v11 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v11 = &unk_250800620;
  }
  v12 = (__int128 *)*((_QWORD *)v11 + 6);
  if (!v12)
    v12 = &xmmword_2542ABF08;
  v13 = (*((uint64_t (**)(void))v12 + 4))();
  if (!v13)
    return 0;
  v14 = v13;
  if (sub_236780C30(a1, a2, v8, v6 - 8, v13, (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_236780F0C))
  {
    v15 = sub_23676BAB0(*(uint64_t **)(a1 + 40), v8, v14);
    if (!v7)
      goto LABEL_23;
LABEL_19:
    v17 = 0;
    do
    {
      v18 = *(uint64_t ****)(v14 + 8 * v17);
      if (v18)
        sub_236765578(v18);
      ++v17;
    }
    while (v17 < v8);
    goto LABEL_23;
  }
  v15 = 0;
  if (v7)
    goto LABEL_19;
LABEL_23:
  v19 = *(uint64_t **)(a1 + 40);
  if (v19)
  {
    v20 = &qword_25642E910;
    v21 = &unk_250800620;
    while (1)
    {
      v20 = (uint64_t *)*v20;
      if (!v20)
        break;
      if (v20 == v19)
      {
        v21 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v21 = &unk_250800620;
  }
  v22 = (__int128 *)*((_QWORD *)v21 + 6);
  if (!v22)
    v22 = &xmmword_2542ABF08;
  (*((void (**)(void))v22 + 2))();
  *a3 = v15 != 0;
  return v15;
}

uint64_t sub_2367817EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  __int16 v9;
  __int16 v10;

  v6 = *(_QWORD *)(a3 + 48);
  v7 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2);
  v9 = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v9) == 1
    && (v10 = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16,
        (*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v10) == 1))
  {
    return sub_236780440(a1, a2, *(_DWORD *)(a3 + 16), v7 - 8, v6, (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_2367807A4);
  }
  else
  {
    return 0;
  }
}

uint64_t **sub_2367818CC(uint64_t a1, uint64_t a2)
{
  return sub_23676D43C(a2);
}

uint64_t sub_2367818D4(uint64_t a1, uint64_t **a2)
{
  return sub_23676C0A0(a2);
}

int32x2_t *sub_2367818DC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  int32x2_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  void *v34;
  __int128 *v35;
  void (*v36)(void);
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  __int128 *v40;
  uint64_t *v41;
  uint64_t *v42;
  void *v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t *v46;
  uint64_t *v47;
  void *v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  float v55;
  float v56;
  unsigned __int16 v57;
  unsigned __int16 v58;

  v57 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v57, 2, 1) != 1)
    return 0;
  v6 = v57;
  v58 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))(a2 + 280))(a2, &v58, 2, 1) != 1)
    return 0;
  v7 = __rev16(v6);
  v8 = v58;
  v9 = __rev16(v58);
  if (v7 > 0xF || v9 > 0xF)
    return 0;
  v11 = *(uint64_t **)(a1 + 40);
  if (v11)
  {
    v12 = &qword_25642E910;
    v13 = &unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == v11)
      {
        v13 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v13 = &unk_250800620;
  }
  v14 = (__int128 *)*((_QWORD *)v13 + 6);
  if (!v14)
    v14 = &xmmword_2542ABF08;
  v15 = (*((uint64_t (**)(void))v14 + 4))();
  if (!v15)
    return 0;
  v16 = (uint64_t *)v15;
  v17 = *(uint64_t **)(a1 + 40);
  if (v17)
  {
    v18 = &qword_25642E910;
    v19 = &unk_250800620;
    while (1)
    {
      v18 = (uint64_t *)*v18;
      if (!v18)
        break;
      if (v18 == v17)
      {
        v19 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v19 = &unk_250800620;
  }
  v20 = (__int128 *)*((_QWORD *)v19 + 6);
  if (!v20)
    v20 = &xmmword_2542ABF08;
  v21 = (*((uint64_t (**)(void))v20 + 4))();
  if (!v21)
  {
    v25 = *(uint64_t **)(a1 + 40);
    if (v25)
    {
      v26 = &qword_25642E910;
      v27 = &unk_250800620;
      while (1)
      {
        v26 = (uint64_t *)*v26;
        if (!v26)
          break;
        if (v26 == v25)
        {
          v27 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v27 = &unk_250800620;
    }
    v35 = (__int128 *)*((_QWORD *)v27 + 6);
    if (!v35)
      v35 = &xmmword_2542ABF08;
    v36 = (void (*)(void))*((_QWORD *)v35 + 2);
    goto LABEL_95;
  }
  v22 = (uint64_t *)v21;
  if ((_DWORD)v9 * v7)
  {
    v23 = 0;
    while (1)
    {
      v56 = 0.0;
      if (!sub_236776750(a2, &v56))
        break;
      *(double *)&v16[v23++] = v56;
      if (v9 * v7 == v23)
        goto LABEL_29;
    }
    v28 = *(uint64_t **)(a1 + 40);
    if (v28)
    {
      v29 = &qword_25642E910;
      v30 = &unk_250800620;
      while (1)
      {
        v29 = (uint64_t *)*v29;
        if (!v29)
          break;
        if (v29 == v28)
        {
          v30 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v30 = &unk_250800620;
    }
    v45 = (__int128 *)*((_QWORD *)v30 + 6);
    if (!v45)
      v45 = &xmmword_2542ABF08;
    (*((void (**)(void))v45 + 2))();
    v46 = *(uint64_t **)(a1 + 40);
    if (v46)
    {
      v47 = &qword_25642E910;
      v48 = &unk_250800620;
      while (1)
      {
        v47 = (uint64_t *)*v47;
        if (!v47)
          break;
        if (v47 == v46)
        {
          v48 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v48 = &unk_250800620;
    }
    v49 = (__int128 *)*((_QWORD *)v48 + 6);
    if (!v49)
      v49 = &xmmword_2542ABF08;
    goto LABEL_94;
  }
LABEL_29:
  if (v8)
  {
    v24 = 0;
    while (1)
    {
      v55 = 0.0;
      if (!sub_236776750(a2, &v55))
        break;
      *(double *)&v22[v24++] = v55;
      if (v9 == v24)
        goto LABEL_45;
    }
    v37 = *(uint64_t **)(a1 + 40);
    if (v37)
    {
      v38 = &qword_25642E910;
      v39 = &unk_250800620;
      while (1)
      {
        v38 = (uint64_t *)*v38;
        if (!v38)
          break;
        if (v38 == v37)
        {
          v39 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v39 = &unk_250800620;
    }
    v50 = (__int128 *)*((_QWORD *)v39 + 6);
    if (!v50)
      v50 = &xmmword_2542ABF08;
    (*((void (**)(void))v50 + 2))();
    v51 = *(uint64_t **)(a1 + 40);
    if (v51)
    {
      v52 = &qword_25642E910;
      v53 = &unk_250800620;
      while (1)
      {
        v52 = (uint64_t *)*v52;
        if (!v52)
          break;
        if (v52 == v51)
        {
          v53 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v53 = &unk_250800620;
    }
    v49 = (__int128 *)*((_QWORD *)v53 + 6);
    if (!v49)
      v49 = &xmmword_2542ABF08;
LABEL_94:
    v36 = (void (*)(void))*((_QWORD *)v49 + 2);
LABEL_95:
    v36();
    return 0;
  }
  v9 = 0;
LABEL_45:
  v31 = sub_23676C120(*(uint64_t **)(a1 + 40), v9, v7, v16, v22);
  v32 = *(uint64_t **)(a1 + 40);
  if (v32)
  {
    v33 = &qword_25642E910;
    v34 = &unk_250800620;
    while (1)
    {
      v33 = (uint64_t *)*v33;
      if (!v33)
        break;
      if (v33 == v32)
      {
        v34 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v34 = &unk_250800620;
  }
  v40 = (__int128 *)*((_QWORD *)v34 + 6);
  if (!v40)
    v40 = &xmmword_2542ABF08;
  (*((void (**)(void))v40 + 2))();
  v41 = *(uint64_t **)(a1 + 40);
  if (v41)
  {
    v42 = &qword_25642E910;
    v43 = &unk_250800620;
    while (1)
    {
      v42 = (uint64_t *)*v42;
      if (!v42)
        break;
      if (v42 == v41)
      {
        v43 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v43 = &unk_250800620;
  }
  v44 = (__int128 *)*((_QWORD *)v43 + 6);
  if (!v44)
    v44 = &xmmword_2542ABF08;
  (*((void (**)(void))v44 + 2))();
  *a3 = 1;
  return v31;
}

uint64_t sub_236781D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v14;

  v5 = *(_QWORD **)(a3 + 48);
  LOWORD(v14) = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v14) == 1)
  {
    LOWORD(v14) = bswap32(*(unsigned __int16 *)(a3 + 20)) >> 16;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 2, &v14) == 1)
    {
      v6 = *(_DWORD *)(a3 + 20);
      if (v6 * *(_DWORD *)(a3 + 16))
      {
        v7 = 0;
        v8 = 8 * (v6 * *(_DWORD *)(a3 + 16));
        while (1)
        {
          *(float *)&v9 = *(double *)(*v5 + v7);
          v14 = bswap32(v9);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v14) != 1)
            break;
          v7 += 8;
          if (v8 == v7)
          {
            v6 = *(_DWORD *)(a3 + 20);
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        if (!v6)
          return 1;
        v10 = 0;
        while (1)
        {
          v11 = v5[1];
          if (v11)
          {
            *(float *)&v12 = *(double *)(v11 + 8 * v10);
            v14 = bswap32(v12);
          }
          else
          {
            v14 = 0;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v14) != 1)
            break;
          if (++v10 >= (unint64_t)*(unsigned int *)(a3 + 20))
            return 1;
        }
      }
    }
  }
  return 0;
}

int32x2_t *sub_236781E8C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  __int128 *v22;
  int32x2_t *v23;
  int32x2_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t *v35;
  void (*v36)(int32x2_t *);
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  void (*v40)(int32x2_t *);
  uint64_t *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(int32x2_t *);
  uint64_t *v51;
  void (*v52)(int32x2_t *);
  uint64_t *v53;
  __int128 *v54;
  int v56[8];
  _BYTE v57[16];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  LOWORD(v56[0]) = 0;
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(a2 + 280))(a2, v56, 2, 1) != 1)
    return 0;
  v6 = LOWORD(v56[0]);
  LOWORD(v56[0]) = 0;
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(a2 + 280))(a2, v56, 2, 1) != 1)
    return 0;
  if (!v6)
    goto LABEL_86;
  v7 = LOWORD(v56[0]);
  if (!LOWORD(v56[0])
    || (*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a2 + 280))(a2, v57, 1, 16) != 16)
  {
    goto LABEL_86;
  }
  v13 = __rev16(v6);
  if (v13 >= 8)
    v14 = 8;
  else
    v14 = v13;
  if ((_DWORD)v14)
  {
    v15 = v56;
    v16 = v57;
    do
    {
      v18 = *v16++;
      v17 = v18;
      if (v18 == 1)
        goto LABEL_86;
      *v15++ = v17;
    }
    while (--v14);
  }
  v19 = *(uint64_t **)(a1 + 40);
  if (v13 >= 9)
  {
    sub_2367644B8(v19, 2, "Too many input channels (%d channels, max=%d)", v8, v9, v10, v11, v12, v13);
LABEL_86:
    v24 = 0;
    *a3 = 0;
    return v24;
  }
  if (v19)
  {
    v20 = &qword_25642E910;
    v21 = &unk_250800620;
    while (1)
    {
      v20 = (uint64_t *)*v20;
      if (!v20)
        break;
      if (v20 == v19)
      {
        v21 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v21 = &unk_250800620;
  }
  v22 = (__int128 *)*((_QWORD *)v21 + 6);
  if (!v22)
    v22 = &xmmword_2542ABF08;
  v23 = (int32x2_t *)(*((uint64_t (**)(_QWORD, uint64_t))v22 + 1))(*(_QWORD *)(a1 + 40), 64);
  if (!v23)
    goto LABEL_86;
  v24 = v23;
  v25 = __rev16(v7);
  *v23 = (int32x2_t)v19;
  v23[1] = vdup_n_s32(0x636C7574u);
  v23[2].i32[0] = v13;
  v23[2].i32[1] = v25;
  v23[3] = (int32x2_t)sub_23676CE64;
  v23[4] = (int32x2_t)sub_23676CB2C;
  v23[5] = (int32x2_t)sub_23676CD28;
  v23[6] = 0;
  if (v19)
  {
    v26 = &qword_25642E910;
    v27 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v26 = (uint64_t *)*v26;
      if (!v26)
        break;
      if (v26 == v19)
      {
        v27 = v19;
        break;
      }
    }
  }
  else
  {
    v27 = (uint64_t *)&unk_250800620;
  }
  v28 = (__int128 *)v27[6];
  if (!v28)
    v28 = &xmmword_2542ABF08;
  v29 = (*((uint64_t (**)(uint64_t *, uint64_t))v28 + 1))(v19, 24);
  if (!v29)
  {
    v36 = (void (*)(int32x2_t *))v24[5];
    if (v36)
      v36(v24);
    v37 = (uint64_t *)*v24;
    if (*v24)
    {
      v38 = &qword_25642E910;
      v39 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v38 = (uint64_t *)*v38;
        if (!v38)
          goto LABEL_83;
        if (v38 == v37)
        {
LABEL_81:
          v39 = v37;
          goto LABEL_83;
        }
      }
    }
    goto LABEL_82;
  }
  v30 = (_QWORD *)v29;
  v24[6] = (int32x2_t)v29;
  v31 = v13;
  v32 = 1;
  while (v31 * 4)
  {
    v33 = v56[v31 - 1];
    if (v33)
    {
      v32 *= v33;
      --v31;
      if (((v33 * (unint64_t)v32) & 0xFFFFFFFF00000000) == 0)
        continue;
    }
    v32 = 0;
    break;
  }
  *(_DWORD *)(v29 + 16) = v32 * v25;
  *(_DWORD *)(v29 + 20) = 1;
  if (!(v32 * (_DWORD)v25))
  {
    v40 = (void (*)(int32x2_t *))v24[5];
    if (v40)
      v40(v24);
    v37 = (uint64_t *)*v24;
    if (*v24)
    {
      v41 = &qword_25642E910;
      v39 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v41 = (uint64_t *)*v41;
        if (!v41)
          goto LABEL_83;
        if (v41 == v37)
          goto LABEL_81;
      }
    }
    goto LABEL_82;
  }
  if (v19)
  {
    v34 = &qword_25642E910;
    v35 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v34 = (uint64_t *)*v34;
      if (!v34)
        break;
      if (v34 == v19)
      {
        v35 = v19;
        break;
      }
    }
  }
  else
  {
    v35 = (uint64_t *)&unk_250800620;
  }
  v42 = (__int128 *)v35[6];
  if (!v42)
    v42 = &xmmword_2542ABF08;
  v43 = (*((uint64_t (**)(uint64_t *))v42 + 4))(v19);
  *v30 = v43;
  if (!v43)
  {
    v50 = (void (*)(int32x2_t *))v24[5];
    if (v50)
      v50(v24);
    v37 = (uint64_t *)*v24;
    if (*v24)
    {
      v51 = &qword_25642E910;
      v39 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v51 = (uint64_t *)*v51;
        if (!v51)
          goto LABEL_83;
        if (v51 == v37)
          goto LABEL_81;
      }
    }
    goto LABEL_82;
  }
  v46 = sub_236768588(v19, v56, v13, v25, v43, 1, v44, v45);
  v30[1] = v46;
  if (!v46)
  {
    v52 = (void (*)(int32x2_t *))v24[5];
    if (v52)
      v52(v24);
    v37 = (uint64_t *)*v24;
    if (*v24)
    {
      v53 = &qword_25642E910;
      v39 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v53 = (uint64_t *)*v53;
        if (!v53)
          goto LABEL_83;
        if (v53 == v37)
          goto LABEL_81;
      }
    }
LABEL_82:
    v39 = (uint64_t *)&unk_250800620;
LABEL_83:
    v54 = (__int128 *)v39[6];
    if (!v54)
      v54 = &xmmword_2542ABF08;
    (*((void (**)(void))v54 + 2))();
    goto LABEL_86;
  }
  v47 = v24[6];
  if (*(_DWORD *)(*(_QWORD *)&v47 + 16))
  {
    v48 = 0;
    v49 = 0;
    while (sub_236776750(a2, (float *)(**(_QWORD **)&v47 + v48)))
    {
      ++v49;
      v48 += 4;
      if (v49 >= *(unsigned int *)(*(_QWORD *)&v47 + 16))
        goto LABEL_67;
    }
    *a3 = 0;
    sub_23676C0A0((uint64_t **)v24);
    return 0;
  }
LABEL_67:
  *a3 = 1;
  return v24;
}

uint64_t sub_236782308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v7;
  int *v8;
  _BYTE *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a3 + 16);
  if (v3 > 8)
    return 0;
  v5 = *(_QWORD *)(a3 + 48);
  if (!*(_DWORD *)(v5 + 20))
    return 0;
  LOWORD(v14[0]) = bswap32(v3) >> 16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(a2 + 312))(a2, 2, v14) != 1)
    return 0;
  LOWORD(v14[0]) = bswap32(*(unsigned __int16 *)(a3 + 20)) >> 16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(a2 + 312))(a2, 2, v14) != 1)
    return 0;
  v14[0] = 0;
  v14[1] = 0;
  v7 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v7)
  {
    v8 = (int *)(*(_QWORD *)(v5 + 8) + 20);
    v9 = v14;
    do
    {
      v10 = *v8++;
      *v9++ = v10;
      --v7;
    }
    while (v7);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(a2 + 312))(a2, 16, v14);
  if ((_DWORD)result)
  {
    if (!*(_DWORD *)(v5 + 16))
      return 1;
    v12 = 0;
    while (1)
    {
      v13 = bswap32(*(_DWORD *)(*(_QWORD *)v5 + 4 * v12));
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v13);
      if ((_DWORD)result != 1)
        break;
      if (++v12 >= (unint64_t)*(unsigned int *)(v5 + 16))
        return result;
    }
    return 0;
  }
  return result;
}

BOOL sub_236782468(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  _BOOL8 result;
  uint64_t **v11;
  int v12;
  uint64_t v13;

  v13 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v13, 8, 1);
  v9 = bswap32(v13);
  if (v8 != 1)
    v9 = 0;
  if (v9 == 1684370275)
  {
    if (*a3)
      sub_23676E4C8(*a3);
    v11 = sub_2367782E0(a1, a2, &v12, a4);
  }
  else if (v9 == 1835824483)
  {
    if (*a3)
      sub_23676E4C8(*a3);
    v11 = sub_23677B168(a1, a2, &v12, a4);
  }
  else
  {
    result = 0;
    if (v9 != 1952807028)
      return result;
    if (*a3)
      sub_23676E4C8(*a3);
    v11 = sub_236777FB4(a1, a2, &v12, a4);
  }
  *a3 = v11;
  return v11 != 0;
}

uint64_t sub_236782574(uint64_t a1, uint64_t a2, int *a3, unsigned __int16 *a4)
{
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  uint64_t (**v12)(void);
  _BYTE *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  __int128 *v18;
  unsigned int v19;

  v8 = sub_23676E5E8(a3, 80, 0x53u, a4, 0, 0);
  v9 = *(uint64_t **)(a1 + 40);
  if (v9)
  {
    v10 = &qword_25642E910;
    v11 = &unk_250800620;
    while (1)
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        break;
      if (v10 == v9)
      {
        v11 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v11 = &unk_250800620;
  }
  v12 = (uint64_t (**)(void))*((_QWORD *)v11 + 6);
  if (!v12)
    v12 = (uint64_t (**)(void))&xmmword_2542ABF08;
  v13 = (_BYTE *)(*v12)();
  v19 = bswap32(v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a2 + 312))(a2, 4, &v19) != 1)
    return 0;
  result = (uint64_t)sub_23676E5E8(a3, 80, 0x53u, a4, v13, v8);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(a2 + 312))(a2, v8, v13);
    if ((_DWORD)result)
    {
      if (v13)
      {
        v15 = *(uint64_t **)(a1 + 40);
        if (v15)
        {
          v16 = &qword_25642E910;
          v17 = &unk_250800620;
          while (1)
          {
            v16 = (uint64_t *)*v16;
            if (!v16)
              break;
            if (v16 == v15)
            {
              v17 = *(void **)(a1 + 40);
              break;
            }
          }
        }
        else
        {
          v17 = &unk_250800620;
        }
        v18 = (__int128 *)*((_QWORD *)v17 + 6);
        if (!v18)
          v18 = &xmmword_2542ABF08;
        (*((void (**)(void))v18 + 2))();
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_2367826F0(uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4, unsigned __int8 *a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  uint64_t (**v14)(void);
  uint64_t result;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  __int128 *v23;
  __int128 *v24;
  unsigned int v25;

  if (*a4 < 4u)
    return 0;
  v25 = 0;
  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 4, 1) != 1)
    return 0;
  v10 = bswap32(v25);
  if (v10 > 0xFFFFFFFB || v10 + 4 > (unint64_t)*a4)
    return 0;
  v11 = *(uint64_t **)(a1 + 40);
  if (v11)
  {
    v12 = &qword_25642E910;
    v13 = &unk_250800620;
    while (1)
    {
      v12 = (uint64_t *)*v12;
      if (!v12)
        break;
      if (v12 == v11)
      {
        v13 = *(void **)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    v13 = &unk_250800620;
  }
  v14 = (uint64_t (**)(void))*((_QWORD *)v13 + 6);
  if (!v14)
    v14 = (uint64_t (**)(void))&xmmword_2542ABF08;
  result = (*v14)();
  if (result)
  {
    v16 = (char *)result;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 280))(a2, result, 1, v10) == (_DWORD)v10)
    {
      v16[v10] = 0;
      sub_23676E010(a3, 80, 0x53u, *a5, a5[1], v16);
      v17 = *(uint64_t **)(a1 + 40);
      if (v17)
      {
        v18 = &qword_25642E910;
        v19 = &unk_250800620;
        while (1)
        {
          v18 = (uint64_t *)*v18;
          if (!v18)
            break;
          if (v18 == v17)
          {
            v19 = *(void **)(a1 + 40);
            break;
          }
        }
      }
      else
      {
        v19 = &unk_250800620;
      }
      v23 = (__int128 *)*((_QWORD *)v19 + 6);
      if (!v23)
        v23 = &xmmword_2542ABF08;
      (*((void (**)(void))v23 + 2))();
      *a4 = *a4 - v10 - 4;
      return 1;
    }
    v20 = *(uint64_t **)(a1 + 40);
    if (v20)
    {
      v21 = &qword_25642E910;
      v22 = &unk_250800620;
      while (1)
      {
        v21 = (uint64_t *)*v21;
        if (!v21)
          break;
        if (v21 == v20)
        {
          v22 = *(void **)(a1 + 40);
          break;
        }
      }
    }
    else
    {
      v22 = &unk_250800620;
    }
    v24 = (__int128 *)*((_QWORD *)v22 + 6);
    if (!v24)
      v24 = &xmmword_2542ABF08;
    (*((void (**)(void))v24 + 2))();
    return 0;
  }
  return result;
}

uint64_t sub_2367828E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD v18[2];

  if (a3)
  {
    v7 = a3;
    while (1)
    {
      v8 = *a4;
      v9 = *(_DWORD *)(*a4 + 8);
      v10 = 1668641398;
      if (v9)
      {
        if (v9 != 2)
        {
          v11 = *(_QWORD *)(v8 + 16);
LABEL_8:
          if (*(int *)(v11 + 8) >= 0)
            v10 = 1885434465;
          else
            v10 = 1668641398;
          goto LABEL_11;
        }
        v11 = *(_QWORD *)(v8 + 16);
        if (*(_DWORD *)(v11 + 120))
          goto LABEL_8;
      }
LABEL_11:
      v18[0] = bswap32(v10);
      v18[1] = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(a2 + 312))(a2, 8, v18);
      if (!(_DWORD)result)
        return result;
      if (v10 == 1885434465)
      {
        result = sub_236778EAC(a1, a2, *a4, v13, v14, v15, v16, v17);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        result = sub_236778C1C(result, a2, *a4);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_236776980(a2);
      if (!(_DWORD)result)
        return result;
      ++a4;
      if (!--v7)
        return 1;
    }
  }
  return 1;
}

uint64_t sub_236782A30(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  char v24;
  __int16 v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a4 + 20))
  {
    sub_2367644B8(*(uint64_t **)(a1 + 40), 13, "Cannot save floating point data, CLUT are 8 or 16 bit only", a4, a5, a6, a7, a8, v24);
    return 0;
  }
  v26[0] = 0;
  v26[1] = 0;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v13)
  {
    v14 = (int *)(v12 + 20);
    v15 = v26;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(a2 + 312))(a2, 16, v26);
  if ((_DWORD)result)
  {
    LOBYTE(v25) = a3;
    if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 1, &v25) != 1)
      return 0;
    LOBYTE(v25) = 0;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 1, &v25);
    result = 0;
    if (v17 == 1)
    {
      LOBYTE(v25) = 0;
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 1, &v25);
      result = 0;
      if (v18 == 1)
      {
        LOBYTE(v25) = 0;
        v19 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 1, &v25);
        result = 0;
        if (v19 == 1)
        {
          v20 = *(unsigned int *)(a4 + 16);
          if (a3 == 1)
          {
            if ((_DWORD)v20)
            {
              v21 = 0;
              while (1)
              {
                LOBYTE(v25) = (65281 * *(unsigned __int16 *)(*(_QWORD *)a4 + 2 * v21) + 0x800000) >> 24;
                if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 1, &v25) != 1)
                  break;
                if (++v21 >= (unint64_t)*(unsigned int *)(a4 + 16))
                  return sub_236776980(a2) != 0;
              }
              return 0;
            }
          }
          else if ((_DWORD)v20)
          {
            v22 = *(unsigned __int16 **)a4;
            while (1)
            {
              v23 = *v22++;
              v25 = bswap32(v23) >> 16;
              if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a2 + 312))(a2, 2, &v25) != 1)
                break;
              if (!--v20)
                return sub_236776980(a2) != 0;
            }
            return 0;
          }
          return sub_236776980(a2) != 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_236782C40(uint64_t a1, _QWORD *a2)
{
  double *v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  unsigned int v9;

  v9 = bswap32(vcvtmd_s64_f64(*(double *)*a2 * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 8) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 16) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 24) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 32) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 40) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 48) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 56) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v9 = bswap32(vcvtmd_s64_f64(*(double *)(*a2 + 64) * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
    return 0;
  v4 = (double *)a2[1];
  if (v4)
  {
    v9 = bswap32(vcvtmd_s64_f64(*v4 * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
      return 0;
    v9 = bswap32(vcvtmd_s64_f64(*(double *)(a2[1] + 8) * 65536.0 + 0.5));
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) != 1)
      return 0;
    v9 = bswap32(vcvtmd_s64_f64(*(double *)(a2[1] + 16) * 65536.0 + 0.5));
    return (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9) == 1;
  }
  v9 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9);
  result = 0;
  if (v6 == 1)
  {
    v9 = 0;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9);
    result = 0;
    if (v7 == 1)
    {
      v9 = 0;
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v9);
      result = 0;
      if (v8 == 1)
        return 1;
    }
  }
  return result;
}

int32x2_t *sub_236782FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int32x2_t *v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v23;
  uint64_t v24;
  _OWORD v25[8];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0x10 || !(*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, a3))
    return 0;
  memset(v25, 0, sizeof(v25));
  if (!(_DWORD)a4)
    return sub_23676BAB0(*(uint64_t **)(a1 + 40), 0, (uint64_t)v25);
  v7 = a4;
  bzero(v25, 8 * a4);
  v8 = 0;
  while (1)
  {
    v24 = 0;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 280))(a2, &v24, 8, 1);
    v15 = bswap32(v24);
    if (v9 != 1)
      v15 = 0;
    if (v15 == 1885434465)
    {
      v16 = sub_236778D5C(a1, a2, &v23);
      goto LABEL_11;
    }
    if (v15 != 1668641398)
      break;
    v16 = sub_236778ABC(a1, a2, &v23);
LABEL_11:
    *((_QWORD *)v25 + v8) = v16;
    if (!v16
      || (v17 = (*(uint64_t (**)(uint64_t))(a2 + 304))(a2), v18 = (v17 + 3) & 0xFFFFFFFC, v18 != v17)
      && (v18 - v17 >= 5 || (*(unsigned int (**)(uint64_t, uint64_t *))(a2 + 280))(a2, &v24) != 1))
    {
      v19 = 0;
      goto LABEL_21;
    }
    if (a4 == ++v8)
    {
      v19 = sub_23676BAB0(*(uint64_t **)(a1 + 40), a4, (uint64_t)v25);
      goto LABEL_21;
    }
  }
  LODWORD(v24) = bswap32(v15);
  BYTE4(v24) = 0;
  sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unknown curve type '%s'", v10, v11, v12, v13, v14, (char)&v24);
  v19 = 0;
  *((_QWORD *)v25 + v8) = 0;
LABEL_21:
  v20 = (uint64_t ****)v25;
  do
  {
    v21 = *v20++;
    sub_236765578(v21);
    --v7;
  }
  while (v7);
  return v19;
}

int32x2_t *sub_2367831E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17[2];

  v17[1] = *(double *)MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, a3)
    && sub_236776800(a2, (double *)&v9)
    && sub_236776800(a2, &v10)
    && sub_236776800(a2, &v11)
    && sub_236776800(a2, &v12)
    && sub_236776800(a2, &v13)
    && sub_236776800(a2, &v14)
    && sub_236776800(a2, &v15)
    && sub_236776800(a2, &v16)
    && sub_236776800(a2, v17)
    && sub_236776800(a2, (double *)&v6)
    && sub_236776800(a2, &v7)
    && sub_236776800(a2, &v8))
  {
    return sub_23676C120(*(uint64_t **)(a1 + 40), 3, 3u, &v9, &v6);
  }
  else
  {
    return 0;
  }
}

uint64_t **sub_236783350(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t i;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t **v16;
  int32x2_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v25;
  int v26[16];
  _BYTE v27[16];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(a2 + 288))(a2, a3)
    && (*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a2 + 280))(a2, v27, 16, 1) == 1)
  {
    for (i = 0; i != 16; ++i)
    {
      v10 = v27[i];
      if (v10 == 1)
        return 0;
      v26[i] = v10;
    }
    v25 = 0;
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 1, 1) == 1)
    {
      v11 = v25;
      v25 = 0;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 1, 1) == 1)
      {
        v25 = 0;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 1, 1) == 1)
        {
          v25 = 0;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 1, 1) == 1)
          {
            v15 = sub_23676C698(*(uint64_t **)(a1 + 40), v26, a4, a5, 0, v12, v13, v14);
            v16 = (uint64_t **)v15;
            if (!v15)
              return v16;
            v17 = v15[6];
            if (v11 == 2)
            {
              if (sub_236776694(a2, *(_DWORD *)(*(_QWORD *)&v17 + 16), **(_WORD ***)&v17))
                return v16;
              goto LABEL_19;
            }
            if (v11 == 1)
            {
              v25 = 0;
              if (!*(_DWORD *)(*(_QWORD *)&v17 + 16))
                return v16;
              v18 = 0;
              while ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a2 + 280))(a2, &v25, 1, 1) == 1)
              {
                *(_WORD *)(**(_QWORD **)&v17 + 2 * v18++) = v25 | (v25 << 8);
                if (v18 >= *(unsigned int *)(*(_QWORD *)&v17 + 16))
                  return v16;
              }
LABEL_19:
              sub_23676C0A0(v16);
              return 0;
            }
            sub_23676C0A0((uint64_t **)v15);
            sub_2367644B8(*(uint64_t **)(a1 + 40), 8, "Unknown precision of '%d'", v19, v20, v21, v22, v23, v11);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_23678357C(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;

  v2 = *a2;
  if (!(_DWORD)v2)
    return 1;
  v5 = 0;
  v6 = *(unsigned int *)(**((_QWORD **)a2 + 1) + 40);
  while (!(_DWORD)v6)
  {
LABEL_8:
    if (++v5 >= v2)
      return 1;
  }
  v7 = 0;
  while (1)
  {
    v9 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v5) + 48) + v7)) >> 16;
    if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *))(a1 + 312))(a1, 2, &v9) != 1)
      return 0;
    v7 += 2;
    if (2 * v6 == v7)
    {
      v2 = *a2;
      goto LABEL_8;
    }
  }
}

uint64_t sub_236783638(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t ****v18;
  uint64_t ***v19;
  uint64_t result;
  uint64_t ****v21;
  int32x2_t *v22;
  _OWORD v23[8];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a5)
    return 1;
  if ((_DWORD)a5 == 1 || a4 > 0x10)
    return 0;
  memset(v23, 0, sizeof(v23));
  if ((_DWORD)a4)
  {
    v13 = 0;
    v14 = 8 * a4;
    v15 = a4;
    while (1)
    {
      v16 = sub_236764590(a1, a5, 0, 0, 0, a6, a7, a8);
      *(_QWORD *)((char *)v23 + v13) = v16;
      if (!v16 || !sub_236776694(a2, a5, *(_WORD **)(v16 + 48)))
        break;
      v13 += 8;
      if (v14 == v13)
      {
        v17 = sub_23676BAB0(a1, a4, (uint64_t)v23);
        if (sub_23676DB6C(a3, 1, (uint64_t)v17))
        {
          v18 = (uint64_t ****)v23;
          do
          {
            v19 = *v18++;
            sub_236765578(v19);
            result = 1;
            --v15;
          }
          while (v15);
          return result;
        }
        break;
      }
    }
    v21 = (uint64_t ****)v23;
    do
    {
      if (*v21)
        sub_236765578(*v21);
      ++v21;
      --v15;
    }
    while (v15);
    return 0;
  }
  v22 = sub_23676BAB0(a1, 0, (uint64_t)v23);
  return sub_23676DB6C(a3, 1, (uint64_t)v22);
}

uint64_t sub_2367837C0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _WORD *v16;
  int v17;
  char v19;
  char v20;
  char v21;

  if (!a3)
    return 1;
  v11 = 0;
  v12 = a3;
  while (!a4)
  {
LABEL_15:
    if (++v11 == v12)
      return 1;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v11);
  v14 = *(_DWORD *)(v13 + 40);
  if (v14 == 2)
  {
    v16 = *(_WORD **)(v13 + 48);
    if (!*v16 && (__int16)v16[1] == -1)
    {
      v17 = 0;
      while (1)
      {
        v20 = v17;
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 1, &v20) != 1)
          return 0;
        if (++v17 == 256)
          goto LABEL_15;
      }
    }
  }
  else if (v14 == 256)
  {
    v15 = 0;
    while (1)
    {
      v21 = (65281
           * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v11) + 48) + v15)
           + 0x800000) >> 24;
      if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a2 + 312))(a2, 1, &v21) != 1)
        return 0;
      v15 += 2;
      if (v15 == 512)
        goto LABEL_15;
    }
  }
  sub_2367644B8(a1, 2, "LUT8 needs 256 entries on prelinearization", a4, a5, a6, a7, a8, v19);
  return 0;
}

uint64_t sub_236783900(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  __int128 *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 *v24;
  int32x2_t *v25;
  uint64_t ****v26;
  uint64_t ***v27;
  uint64_t ****v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 *v31;
  _OWORD v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a4 - 17) < 0xFFFFFFF0)
    return 0;
  memset(v32, 0, sizeof(v32));
  if (a1)
  {
    v8 = &qword_25642E910;
    v9 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == a1)
      {
        v9 = a1;
        break;
      }
    }
  }
  else
  {
    v9 = (uint64_t *)&unk_250800620;
  }
  v10 = (__int128 *)v9[6];
  if (!v10)
    v10 = &xmmword_2542ABF08;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))v10)(a1, 256);
  if (result)
  {
    v15 = result;
    v16 = 0;
    v17 = a4;
    while (1)
    {
      v18 = sub_236764590(a1, 256, 0, 0, 0, v12, v13, v14);
      *((_QWORD *)v32 + v16) = v18;
      if (!v18)
        break;
      if (a4 == ++v16)
      {
        v19 = 0;
        while ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 280))(a2, v15, 256, 1) == 1)
        {
          v20 = 0;
          v21 = *(_QWORD *)(*((_QWORD *)v32 + v19) + 48);
          do
          {
            *(_WORD *)(v21 + 2 * v20) = *(unsigned __int8 *)(v15 + v20) | (*(unsigned __int8 *)(v15 + v20) << 8);
            ++v20;
          }
          while (v20 != 256);
          if (++v19 == a4)
          {
            if (a1)
            {
              v22 = &qword_25642E910;
              v23 = (uint64_t *)&unk_250800620;
              while (1)
              {
                v22 = (uint64_t *)*v22;
                if (!v22)
                  break;
                if (v22 == a1)
                {
                  v23 = a1;
                  break;
                }
              }
            }
            else
            {
              v23 = (uint64_t *)&unk_250800620;
            }
            v24 = (__int128 *)v23[6];
            if (!v24)
              v24 = &xmmword_2542ABF08;
            (*((void (**)(uint64_t *, uint64_t))v24 + 2))(a1, v15);
            v25 = sub_23676BAB0(a1, a4, (uint64_t)v32);
            if (!sub_23676DB6C(a3, 1, (uint64_t)v25))
            {
              v15 = 0;
              goto LABEL_32;
            }
            v26 = (uint64_t ****)v32;
            do
            {
              v27 = *v26++;
              sub_236765578(v27);
              --v17;
            }
            while (v17);
            return 1;
          }
        }
        break;
      }
    }
LABEL_32:
    v28 = (uint64_t ****)v32;
    do
    {
      if (*v28)
        sub_236765578(*v28);
      ++v28;
      --v17;
    }
    while (v17);
    if (v15)
    {
      if (a1)
      {
        v29 = &qword_25642E910;
        v30 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v29 = (uint64_t *)*v29;
          if (!v29)
            break;
          if (v29 == a1)
          {
            v30 = a1;
            break;
          }
        }
      }
      else
      {
        v30 = (uint64_t *)&unk_250800620;
      }
      v31 = (__int128 *)v30[6];
      if (!v31)
        v31 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v31 + 2))(a1, v15);
    }
    return 0;
  }
  return result;
}

BOOL sub_236783B94(uint64_t a1, double a2, double a3)
{
  unsigned int v6;
  unsigned int v7;

  v6 = bswap32(vcvtmd_s64_f64(a2 * 65536.0 + 0.5));
  if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v6) != 1)
    return 0;
  v7 = bswap32(vcvtmd_s64_f64(a3 * 65536.0 + 0.5));
  return (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(a1 + 312))(a1, 4, &v7) == 1;
}

char *sub_236783C34(uint64_t *a1, int a2)
{
  uint64_t *v2;
  char **v3;
  char *v4;

  if (a1)
  {
    v2 = &qword_25642E910;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == a1)
        goto LABEL_8;
    }
    a1 = (uint64_t *)&unk_250800620;
  }
  else
  {
    a1 = (uint64_t *)&unk_250800620;
  }
LABEL_8:
  v3 = (char **)a1[11];
  if (!v3)
    v3 = (char **)&unk_25642E960;
  v4 = *v3;
  if (v4)
  {
    while (*(_DWORD *)v4 != a2)
    {
      v4 = (char *)*((_QWORD *)v4 + 13);
      if (!v4)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    v4 = a0b2a;
    while (*(_DWORD *)v4 != a2)
    {
      v4 = (char *)*((_QWORD *)v4 + 13);
      if (!v4)
        return 0;
    }
  }
  return v4 + 8;
}

uint64_t sub_236783CC8(uint64_t a1, double a2)
{
  if (a2 >= 4.0)
    return 1832993312;
  if (*(_DWORD *)(a1 + 64))
    return 1835430961;
  return 1835430962;
}

uint64_t sub_236783CF8(uint64_t a1, double a2)
{
  if (a2 >= 4.0)
    return 1833058592;
  if (*(_DWORD *)(a1 + 64))
    return 1835430961;
  return 1835430962;
}

uint64_t sub_236783D28()
{
  return 1482250784;
}

uint64_t sub_236783D34(uint64_t a1, double a2)
{
  uint64_t result;
  unsigned int v4;

  result = 1668641398;
  if (a2 >= 4.0 && *(_DWORD *)(a1 + 8) == 1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v4 & 0x80000000) == 0)
    {
      if (v4 <= 5)
        return 1885434465;
      else
        return 1668641398;
    }
  }
  return result;
}

uint64_t sub_236783D78(double a1)
{
  if (a1 >= 4.0)
    return 1835824483;
  else
    return 1952807028;
}

uint64_t sub_236783D98(double a1)
{
  if (a1 >= 4.0)
    return 1835824483;
  else
    return 1684370275;
}

uint64_t sub_236783DB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v14[3];
  _OWORD v15[4];
  uint64_t v16;

  v1 = sub_236769248(a1);
  v2 = v1;
  if (v1)
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_236769590(v1, 4.3);
    *(_OWORD *)(v2 + 76) = xmmword_2368AF380;
    if (!sub_236783EB8(v2, "R")
      || !sub_23676A778(v2, 2004119668, (uint64_t)&xmmword_25642E840, v3, v4, v5, v6, v7)
      || (v14[0] = *(double *)&qword_25642E970 / *(double *)&qword_25642E978 * *(double *)&qword_25642E980,
          *(_QWORD *)&v14[1] = qword_25642E980,
          v14[2] = *(double *)&qword_25642E980
                 * ((1.0 - *(double *)&qword_25642E970 - *(double *)&qword_25642E978)
                  / *(double *)&qword_25642E978),
          sub_23678434C((uint64_t)v15, v14, (double *)&xmmword_25642E840),
          !sub_23676A778(v2, 1667785060, (uint64_t)v15, v8, v9, v10, v11, v12)))
    {
      sub_236769708(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_236783EB8(uint64_t a1, char *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1)
    v4 = *(uint64_t **)(a1 + 8);
  else
    v4 = 0;
  v5 = sub_23676DEC0(v4, 1u);
  v6 = sub_23676DEC0(v4, 1u);
  v7 = v6;
  if (v5 && v6)
  {
    if (sub_23676E390((uint64_t)v5, a2)
      && sub_23676E170((uint64_t)v7, 0x60u, &unk_2368B3A04, 25966, 21843)
      && sub_23676A778(a1, 1684370275, (uint64_t)v5, v8, v9, v10, v11, v12))
    {
      v18 = sub_23676A778(a1, 1668313716, (uint64_t)v7, v13, v14, v15, v16, v17);
    }
    else
    {
      v18 = 0;
    }
LABEL_15:
    sub_23676E4C8(v5);
    if (!v7)
      return v18;
    goto LABEL_12;
  }
  v18 = 0;
  if (v5)
    goto LABEL_15;
  if (v6)
LABEL_12:
    sub_23676E4C8(v7);
  return v18;
}

uint64_t sub_236783FA8(uint64_t *a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = 1.0 / (*(double *)&xmmword_25642E840 + *((double *)&xmmword_25642E840 + 1) + *(double *)&qword_25642E850);
  *(double *)&qword_25642E970 = *(double *)&xmmword_25642E840 * v2;
  *(double *)&qword_25642E978 = *((double *)&xmmword_25642E840 + 1) * v2;
  qword_25642E980 = *((_QWORD *)&xmmword_25642E840 + 1);
  v3 = sub_236783DB8(a1);
  v4 = v3;
  if (v3)
  {
    sub_236769590(v3, 4.3);
    qmemcpy((void *)(v4 + 76), "tsba baL baL", 12);
    if (sub_236783EB8(v4, "L"))
    {
      v5 = sub_23676D59C(a1, 3u, 3);
      if (v5)
      {
        v6 = (uint64_t *)v5;
        v7 = sub_23676BAB0(a1, 3, 0);
        if (v7)
        {
          v7[1].i32[1] = 1768189472;
          v7[7] = (int32x2_t)*v6;
          *v6 = (uint64_t)v7;
          if (sub_23676D8DC(v6))
          {
            if (sub_23676A778(v4, 1093812784, (uint64_t)v6, v8, v9, v10, v11, v12))
            {
              sub_23676D934(v6);
              return v4;
            }
          }
        }
        sub_23676D934(v6);
      }
    }
    sub_236769708(v4);
    return 0;
  }
  return v4;
}

uint64_t sub_2367840E0(uint64_t *a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = 1.0 / (*(double *)&xmmword_25642E840 + *((double *)&xmmword_25642E840 + 1) + *(double *)&qword_25642E850);
  *(double *)&qword_25642E970 = *(double *)&xmmword_25642E840 * v2;
  *(double *)&qword_25642E978 = *((double *)&xmmword_25642E840 + 1) * v2;
  qword_25642E980 = *((_QWORD *)&xmmword_25642E840 + 1);
  v3 = sub_236783DB8(a1);
  v4 = v3;
  if (v3)
  {
    sub_236769590(v3, 4.3);
    qmemcpy((void *)(v4 + 76), "tsba ZYX ZYX", 12);
    if (sub_236783EB8(v4, "X"))
    {
      v5 = sub_23676D59C(a1, 3u, 3);
      if (v5)
      {
        v6 = (uint64_t *)v5;
        v7 = sub_23676BAB0(a1, 3, 0);
        if (v7)
        {
          v7[1].i32[1] = 1768189472;
          v7[7] = (int32x2_t)*v6;
          *v6 = (uint64_t)v7;
          if (sub_23676D8DC(v6))
          {
            if (sub_23676A778(v4, 1093812784, (uint64_t)v6, v8, v9, v10, v11, v12))
            {
              sub_23676D934(v6);
              return v4;
            }
          }
        }
        sub_23676D934(v6);
      }
    }
    sub_236769708(v4);
    return 0;
  }
  return v4;
}

uint64_t sub_236784218(uint64_t result, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v10 = a2 * a2;
  v11 = a2 * a2 * a2;
  if (a2 >= 4000.0 && a2 <= 7000.0)
  {
    v12 = 1000000.0 / v10 * 2.9678 + 1000000000.0 / v11 * -4.607 + 1000.0 / a2 * 0.09911;
    v13 = 0.244063;
LABEL_7:
    v14 = v12 + v13;
    *(double *)result = v14;
    *(double *)(result + 8) = v14 * 2.87 + v14 * v14 * -3.0 + -0.275;
    *(_QWORD *)(result + 16) = 0x3FF0000000000000;
    return result;
  }
  if (a2 > 7000.0 && a2 <= 25000.0)
  {
    v12 = 1000000.0 / v10 * 1.9018 + 1000000000.0 / v11 * -2.0064 + 1000.0 / a2 * 0.24748;
    v13 = 0.23704;
    goto LABEL_7;
  }
  return sub_2367644B8(0, 2, "cmsWhitePointFromTemp: invalid temp", a5, a6, a7, a8, a9, a10);
}

uint64_t sub_23678434C(uint64_t a1, double *a2, double *a3)
{
  uint64_t result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _OWORD v16[4];
  uint64_t v17;
  double v18[9];
  _OWORD v19[4];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v16[2] = xmmword_2368B3E68;
  v16[3] = unk_2368B3E78;
  v17 = 0x3FF0793DD97F62B7;
  v16[0] = xmmword_2368B3E48;
  v16[1] = unk_2368B3E58;
  result = sub_23676DCF8((double *)v16, (double *)v19);
  if ((_DWORD)result)
  {
    v7 = a2[1];
    v8 = a2[2];
    v9 = a3[1];
    v10 = a3[2];
    v11 = v7 * 0.2664 + *a2 * 0.8951 + v8 * -0.1614;
    v12 = v7 * 1.7135 + *a2 * -0.7502 + v8 * 0.0367;
    v13 = v7 * -0.0685 + *a2 * 0.0389 + v8 * 1.0296;
    v14 = v9 * 1.7135 + *a3 * -0.7502 + v10 * 0.0367;
    v15 = v9 * -0.0685 + *a3 * 0.0389 + v10 * 1.0296;
    v18[0] = (v9 * 0.2664 + *a3 * 0.8951 + v10 * -0.1614) / v11;
    memset(&v18[1], 0, 24);
    v18[4] = v14 / v12;
    memset(&v18[5], 0, 24);
    v18[8] = v15 / v13;
    sub_23676DC34((uint64_t)v16, v18, (uint64_t)&xmmword_2368B3E48);
    sub_23676DC34(a1, (double *)v19, (uint64_t)v16);
    return 1;
  }
  return result;
}

double sub_2367844B0(uint64_t a1, double *a2, double *a3, double *a4)
{
  double result;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;

  v14 = 0.0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  if (sub_23678434C((uint64_t)&v10, a2, a3))
  {
    v7 = a4[1];
    v8 = a4[2];
    *(double *)&v9 = *((double *)&v10 + 1) * v7 + *(double *)&v10 * *a4 + *(double *)&v11 * v8;
    *((double *)&v9 + 1) = *(double *)&v12 * v7 + *((double *)&v11 + 1) * *a4 + *((double *)&v12 + 1) * v8;
    result = *((double *)&v13 + 1) * v7 + *(double *)&v13 * *a4 + v14 * v8;
    *(_OWORD *)a1 = v9;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_236784540(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  __int128 *v10;

  v2 = *(_QWORD **)(a1 + 120);
  if (v2)
    sub_23676D934(v2);
  v3 = *(_QWORD **)(a1 + 112);
  if (v3)
    sub_23676D934(v3);
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    sub_23676E97C(v4);
  v5 = *(_QWORD *)(a1 + 136);
  if (v5)
    sub_23676E97C(v5);
  v6 = *(unsigned int **)(a1 + 200);
  if (v6)
    sub_23676F148(v6);
  if (*(_QWORD *)(a1 + 240))
    (*(void (**)(_QWORD))(a1 + 248))(*(_QWORD *)(a1 + 232));
  v7 = *(uint64_t **)(a1 + 232);
  if (v7)
  {
    v8 = &qword_25642E910;
    v9 = &unk_250800620;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == v7)
      {
        v9 = *(void **)(a1 + 232);
        break;
      }
    }
  }
  else
  {
    v9 = &unk_250800620;
  }
  v10 = (__int128 *)*((_QWORD *)v9 + 6);
  if (!v10)
    v10 = &xmmword_2542ABF08;
  return (*((uint64_t (**)(void))v10 + 2))();
}

uint64_t sub_236784600(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v10;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  double *v35;
  const char *v36;
  uint64_t *v37;
  uint64_t v38;
  int v40;
  int **v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  unsigned int v46;
  double *v47;
  double *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v64;
  unsigned int v65;

  v64 = a8;
  v65 = a7;
  if ((a9 & 0x200) != 0)
    return sub_236784B24(a1, 0, 0, &v65, &v64, (uint64_t)&a9);
  v10 = a8;
  v15 = (a7 | a8) & 0x400000;
  v16 = a9 & 0xFFFFEFFF | HIWORD(v15);
  if (a9 & 0x1000 | v15)
    a9 = a9 & 0xFFFFEFFF | HIWORD(v15);
  if (!*a3)
  {
LABEL_44:
    v36 = "NULL input profiles on transform";
    v37 = a1;
    v38 = 4;
LABEL_45:
    sub_2367644B8(v37, v38, v36, a4, (uint64_t)a5, a6, a7, a8, v59);
    return 0;
  }
  v17 = 0;
  v18 = *((_DWORD *)*a3 + 20);
  v19 = v18;
  do
  {
    v20 = a3[v17];
    v22 = v19 != 1482250784 && v19 != 1281450528;
    if (!v20)
      goto LABEL_44;
    v23 = *((_DWORD *)v20 + 19);
    if (v23 == 1852662636)
    {
      v24 = (int *)(v20 + 10);
      v25 = (int *)v20 + 21;
      if (a2 < 2)
        v25 = v24;
      v26 = 826494034;
    }
    else if (((v23 != 1818848875) & ~v22) != 0)
    {
      v26 = *((_DWORD *)v20 + 21);
      v25 = (int *)(v20 + 10);
    }
    else
    {
      v26 = *((_DWORD *)v20 + 20);
      v25 = (int *)v20 + 21;
    }
    v19 = *v25;
    if (!v17)
      v18 = v26;
    ++v17;
  }
  while (a2 != v17);
  v62 = v16;
  v60 = a5[(a2 - 1)];
  v61 = (a2 - 1);
  v27 = WORD1(a7) & 0x1F;
  v28 = sub_236776338(v18);
  if (v27 && v27 != v28 && (v27 != 30 || v28 != 10))
  {
    v36 = "Wrong input color space on transform";
LABEL_69:
    v37 = a1;
    v38 = 9;
    goto LABEL_45;
  }
  v29 = HIWORD(v10) & 0x1F;
  v30 = sub_236776338(v19);
  if (v29 && v29 != v30 && (v29 != 30 || v30 != 10))
  {
    v36 = "Wrong output color space on transform";
    goto LABEL_69;
  }
  v31 = 0;
  do
  {
    v32 = a5[v31];
    if (v32 == 3)
    {
      *(_DWORD *)(a4 + 4 * v31) = 0;
      v32 = a5[v31];
    }
    if ((v32 | 2) == 2 && *((_DWORD *)a3[v31] + 18) >> 26)
      *(_DWORD *)(a4 + 4 * v31) = 1;
    ++v31;
  }
  while (a2 != v31);
  if (a1)
  {
    v33 = &qword_25642E910;
    v34 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v33 = (uint64_t *)*v33;
      if (!v33)
        break;
      if (v33 == a1)
      {
        v34 = a1;
        break;
      }
    }
  }
  else
  {
    v34 = (uint64_t *)&unk_250800620;
  }
  v40 = *a5;
  v41 = (int **)v34[12];
  if (!v41)
    v41 = (int **)&unk_25642E930;
  v42 = *v41;
  if (v42)
  {
    while (*v42 != v40)
    {
      v42 = (int *)*((_QWORD *)v42 + 34);
      if (!v42)
        goto LABEL_54;
    }
  }
  else
  {
LABEL_54:
    v42 = &dword_2542A9650;
    while (*v42 != v40)
    {
      v42 = (int *)*((_QWORD *)v42 + 34);
      if (!v42)
      {
        sub_2367644B8(a1, 8, "Unsupported intent '%d'", a4, (uint64_t)a5, a6, a7, a8, *a5);
        goto LABEL_67;
      }
    }
  }
  v43 = (*((uint64_t (**)(uint64_t *, uint64_t, int *, uint64_t **, uint64_t, uint64_t, _QWORD))v42 + 33))(a1, a2, a5, a3, a4, a6, v62);
  if (!v43)
  {
LABEL_67:
    v36 = "Couldn't link the profiles";
LABEL_71:
    v37 = a1;
    v38 = 13;
    goto LABEL_45;
  }
  v44 = v43;
  if (sub_23677604C(v18) != *(_DWORD *)(v43 + 8)
    || sub_23677604C(v19) != *(_DWORD *)(v44 + 12))
  {
    sub_23676D934((_QWORD *)v44);
    v36 = "Channel count doesn't match. Profile is corrupted";
    goto LABEL_71;
  }
  v45 = (double *)sub_236784B24(a1, (_QWORD *)v44, v60, &v65, &v64, (uint64_t)&a9);
  v35 = v45;
  if (!v45)
    return (uint64_t)v35;
  v46 = 1668051572;
  *((_DWORD *)v45 + 36) = v18;
  *((_DWORD *)v45 + 37) = v19;
  *((_DWORD *)v45 + 56) = a5[v61];
  v47 = (double *)sub_23676A304(*a3, 0x77747074u);
  sub_236784FAC(v35 + 19, v47);
  v48 = (double *)sub_23676A304(a3[v61], 0x77747074u);
  sub_236784FAC(v35 + 22, v48);
  v49 = *a3;
  v50 = *((unsigned int *)*a3 + 33);
  if ((int)v50 >= 1)
  {
    v51 = 0;
    while (*((_DWORD *)v49 + v51 + 34) != 1668051572)
    {
      if (v50 == ++v51)
        goto LABEL_74;
    }
    if ((v51 & 0x80000000) == 0)
    {
      v52 = (unsigned int *)sub_23676A304(v49, 0x636C7274u);
      *((_QWORD *)v35 + 16) = sub_23676EA48(v52);
    }
  }
LABEL_74:
  v53 = a3[v61];
  v54 = *((unsigned int *)v53 + 33);
  if (*((_DWORD *)v53 + 19) == 1818848875)
  {
    if ((int)v54 >= 1)
    {
      v55 = 0;
      v46 = 1668050804;
      while (*((_DWORD *)v53 + v55 + 34) != 1668050804)
      {
        if (v54 == ++v55)
          goto LABEL_87;
      }
LABEL_85:
      if ((v55 & 0x80000000) == 0)
      {
        v56 = (unsigned int *)sub_23676A304(v53, v46);
        *((_QWORD *)v35 + 17) = sub_23676EA48(v56);
      }
    }
  }
  else if ((int)v54 >= 1)
  {
    v55 = 0;
    while (*((_DWORD *)v53 + v55 + 34) != 1668051572)
    {
      if (v54 == ++v55)
        goto LABEL_87;
    }
    goto LABEL_85;
  }
LABEL_87:
  v57 = a9;
  if ((a9 & 0x80) != 0)
  {
    v58 = sub_23676B84C(a1, a2, (uint64_t *)a3);
    v57 = a9;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)v35 + 25) = v58;
  if ((v57 & 0x40) == 0)
  {
    *((_OWORD *)v35 + 3) = 0u;
    *((_OWORD *)v35 + 4) = 0u;
    if (*((_QWORD *)v35 + 15))
      sub_236785020(v35, (uint64_t)(v35 + 6), (uint64_t)(v35 + 10));
    else
      (*(void (**)(_DWORD *, _DWORD *, _QWORD))(*((_QWORD *)v35 + 14) + 24))((_DWORD *)v35 + 12, (_DWORD *)v35 + 20, *(_QWORD *)(*((_QWORD *)v35 + 14) + 16));
  }
  return (uint64_t)v35;
}

uint64_t sub_236784B24(uint64_t *a1, _QWORD *a2, unsigned int a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, int, int, int *);
  uint64_t v41;
  int v42;
  char v44;
  unsigned int v45;

  v12 = &qword_25642E988;
  if (a1)
  {
    v13 = &qword_25642E910;
    v14 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        break;
      if (v13 == a1)
      {
        v14 = a1;
        break;
      }
    }
    v15 = (uint64_t *)v14[15];
    if (v15)
      v12 = v15;
    v16 = &qword_25642E910;
    v17 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v16 = (uint64_t *)*v16;
      if (!v16)
        break;
      if (v16 == a1)
      {
        v17 = a1;
        break;
      }
    }
  }
  else
  {
    v17 = (uint64_t *)&unk_250800620;
  }
  v18 = (__int128 *)v17[6];
  if (!v18)
    v18 = &xmmword_2542ABF08;
  v19 = (*((uint64_t (**)(uint64_t *, uint64_t))v18 + 1))(a1, 264);
  v20 = v19;
  if (!v19)
  {
    sub_23676D934(a2);
    return v20;
  }
  *(_QWORD *)(v19 + 112) = a2;
  v21 = (_QWORD **)(v19 + 112);
  if (!a2)
  {
LABEL_46:
    v32 = *a4;
    if ((v32 & 0x400000) != 0)
    {
      if ((*((_BYTE *)a5 + 2) & 0x40) != 0)
      {
        *(_QWORD *)(v20 + 32) = sub_236772BE4(a1, v32, 0, 1);
        v41 = sub_236772BE4(a1, *a5, 1, 1);
        *(_QWORD *)(v20 + 40) = v41;
        v42 = *(_DWORD *)a6;
        *(_DWORD *)a6 |= 0x2000000u;
        if (*(_QWORD *)(v20 + 32) && v41)
        {
          if ((v42 & 0x200) != 0)
            v40 = sub_23678518C;
          else
            v40 = sub_23678529C;
          goto LABEL_71;
        }
        goto LABEL_62;
      }
    }
    else if (!(_DWORD)v32)
    {
      if (!*a5)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        v39 = *(_DWORD *)a6;
        goto LABEL_66;
      }
      v32 = 0;
    }
    *(_QWORD *)(v20 + 16) = sub_236772BE4(a1, v32, 0, 0);
    v33 = sub_236772BE4(a1, *a5, 1, 0);
    *(_QWORD *)(v20 + 24) = v33;
    if (*(_QWORD *)(v20 + 16) && v33)
    {
      v39 = *(_DWORD *)a6;
      if ((*(_DWORD *)v20 & 7) == 1)
      {
        if ((v39 & 0x200) == 0)
          goto LABEL_55;
        goto LABEL_67;
      }
LABEL_66:
      v39 |= 0x2000000u;
      *(_DWORD *)a6 = v39;
      if ((v39 & 0x200) == 0)
      {
LABEL_55:
        if ((v39 & 0x40) != 0)
        {
          if ((v39 & 0x1000) != 0)
            v40 = sub_236785520;
          else
            v40 = sub_236785640;
        }
        else if ((v39 & 0x1000) != 0)
        {
          v40 = sub_236785764;
        }
        else
        {
          v40 = sub_2367858E4;
        }
        goto LABEL_71;
      }
LABEL_67:
      v40 = sub_236785414;
LABEL_71:
      *(_QWORD *)(v20 + 8) = v40;
      *(_DWORD *)v20 = *a4;
      *(_DWORD *)(v20 + 4) = *a5;
      *(_DWORD *)(v20 + 208) = *(_DWORD *)a6;
      *(_QWORD *)(v20 + 232) = a1;
      *(_QWORD *)(v20 + 240) = 0;
      return v20;
    }
LABEL_62:
    sub_2367644B8(a1, 8, "Unsupported raster format", v34, v35, v36, v37, v38, v44);
    sub_236784540(v20);
    return 0;
  }
  v45 = a3;
  v22 = *v12;
  if (!*v12)
  {
LABEL_20:
    if (a1)
    {
      v23 = &qword_25642E910;
      v24 = (uint64_t *)&unk_250800620;
      v25 = v45;
      while (1)
      {
        v23 = (uint64_t *)*v23;
        if (!v23)
          break;
        if (v23 == a1)
        {
          v24 = a1;
          break;
        }
      }
    }
    else
    {
      v24 = (uint64_t *)&unk_250800620;
      v25 = v45;
    }
    v26 = (uint64_t *)v24[14];
    if (v26)
      v27 = v26;
    else
      v27 = (uint64_t *)&unk_25642E938;
    v28 = *v21;
    if ((*(_BYTE *)a6 & 2) != 0)
    {
      sub_23676F778((uint64_t)v28);
      sub_23676FA9C((uint64_t *)(v20 + 112), v25, a4, a5, (int *)a6);
    }
    else if (*v28)
    {
      sub_23676F778((uint64_t)v28);
      v29 = *v21;
      if (**v21)
      {
        if ((*(_BYTE *)(a6 + 1) & 1) == 0)
        {
          v30 = *v27;
          if (v30)
          {
            while (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned int *, unsigned int *, uint64_t))v30)(v20 + 112, v25, a4, a5, a6))
            {
              v30 = *(_QWORD *)(v30 + 8);
              if (!v30)
                goto LABEL_39;
            }
          }
          else
          {
LABEL_39:
            v31 = off_2542AA140;
            do
            {
              if (((unsigned int (*)(uint64_t, uint64_t, unsigned int *, unsigned int *, uint64_t))*v31)(v20 + 112, v25, a4, a5, a6))
              {
                break;
              }
              v31 = (uint64_t (**)())v31[1];
            }
            while (v31);
          }
        }
      }
      else
      {
        v29[5] = 0;
        v29[6] = 0;
        v29[2] = v29;
        v29[3] = sub_23676FEA0;
      }
    }
    else
    {
      v28[5] = 0;
      v28[6] = 0;
      v28[2] = v28;
      v28[3] = sub_23676FEA0;
    }
    goto LABEL_46;
  }
  while (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, unsigned int *, uint64_t))v22)(v20 + 8, v20 + 240, v20 + 248, v20 + 112, a4, a5, a6))
  {
    v22 = *(_QWORD *)(v22 + 16);
    if (!v22)
      goto LABEL_20;
  }
  *(_QWORD *)(v20 + 232) = a1;
  *(_DWORD *)v20 = *a4;
  *(_DWORD *)(v20 + 4) = *a5;
  *(_DWORD *)(v20 + 208) = *(_DWORD *)a6;
  *(_QWORD *)(v20 + 16) = sub_236772BE4(a1, *a4, 0, 0);
  *(_QWORD *)(v20 + 24) = sub_236772BE4(a1, *a5, 1, 0);
  *(_QWORD *)(v20 + 32) = sub_236772BE4(a1, *a4, 0, 1);
  *(_QWORD *)(v20 + 40) = sub_236772BE4(a1, *a5, 1, 1);
  if (*(_DWORD *)(v22 + 8))
  {
    *(_QWORD *)(v20 + 256) = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v20 + 8) = sub_236785104;
  }
  return v20;
}

double sub_236784FAC(double *a1, double *a2)
{
  double result;
  double v3;
  double v4;

  if (a2)
  {
    result = *a2;
    v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    v4 = a2[2];
    for (a1[2] = v4; result > 2.0; a1[2] = v4)
    {
      if (v3 <= 2.0 || v4 <= 2.0)
        break;
      result = result / 10.0;
      v3 = v3 / 10.0;
      *a1 = result;
      a1[1] = v3;
      v4 = v4 / 10.0;
    }
  }
  else
  {
    result = 0.9642;
    *(_OWORD *)a1 = xmmword_2368AF390;
    a1[2] = 0.8249;
  }
  return result;
}

uint64_t sub_236785020(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  _WORD *v9;
  unsigned int v10;
  int v11;
  __int16 v12;

  v12 = 0;
  result = (*(uint64_t (**)(uint64_t, __int16 *, _QWORD))(a1[15] + 24))(a2, &v12, *(_QWORD *)(a1[15] + 16));
  if (!v12)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1[14] + 24))(a2, a3, *(_QWORD *)(a1[14] + 16));
  v7 = (uint64_t *)a1[29];
  if (v7)
  {
    v8 = &qword_25642E910;
    while (1)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        break;
      if (v8 == v7)
        goto LABEL_10;
    }
    v7 = (uint64_t *)&unk_250800620;
  }
  else
  {
    v7 = (uint64_t *)&unk_250800620;
  }
LABEL_10:
  v9 = (_WORD *)v7[4];
  if (!v9)
    v9 = &unk_25642E868;
  v10 = *(_DWORD *)(a1[14] + 12);
  if (v10)
  {
    v11 = 0;
    do
    {
      *(_WORD *)(a3 + 2 * (unsigned __int16)v11) = v9[(unsigned __int16)v11];
      ++v11;
    }
    while (v10 > (unsigned __int16)v11);
  }
  return result;
}

uint64_t sub_236785104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  int v7;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;

  v7 = a5;
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 256))(a1, a2 + v13, a3 + v14, a4, a6[2]);
      v13 += *a6;
      v14 += a6[1];
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_23678518C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 32))(a1, v19, v16, a6[2]);
          result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 40))(a1, v19, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t sub_23678529C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  int v21;
  float v22;
  _OWORD __b[4];
  _OWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = 0.0;
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  memset(v24, 0, sizeof(v24));
  memset(__b, 0, sizeof(__b));
  v21 = a5;
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 32))(a1, v24, v16, a6[2]);
          v18 = *(_QWORD *)(a1 + 120);
          if (v18
            && ((*(void (**)(_OWORD *, float *))(v18 + 32))(v24, &v22), v17.n128_f32[0] = v22, v22 > 0.0))
          {
            memset_pattern16(__b, &unk_2368AFAF0, 0x40uLL);
          }
          else
          {
            (*(void (**)(_OWORD *, _OWORD *, __n128))(*(_QWORD *)(a1 + 112) + 32))(v24, __b, v17);
          }
          result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 40))(a1, __b, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != v21);
  }
  return result;
}

uint64_t sub_236785414(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 16))(a1, v19, v16, a6[2]);
          result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 24))(a1, v19, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t sub_236785520(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD v19[2];
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 16))(a1, v20, v16, a6[2]);
          sub_236785020((_QWORD *)a1, (uint64_t)v20, (uint64_t)v19);
          result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 24))(a1, v19, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t sub_236785640(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _OWORD v19[2];
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 16))(a1, v20, v16, a6[2]);
          (*(void (**)(_OWORD *, _OWORD *, _QWORD))(*(_QWORD *)(a1 + 112) + 24))(v20, v19, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16));
          result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(a1 + 24))(a1, v19, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t sub_236785764(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v23 = *(_OWORD *)(a1 + 48);
  v24 = *(_OWORD *)(a1 + 64);
  v25 = *(_OWORD *)(a1 + 80);
  v26 = *(_OWORD *)(a1 + 96);
  v22 = a5;
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(a1 + 16))(a1, &v29, v16, a6[2]);
          if ((_QWORD)v29 == (_QWORD)v23
            && *((_QWORD *)&v29 + 1) == *((_QWORD *)&v23 + 1)
            && (_QWORD)v30 == (_QWORD)v24
            && *((_QWORD *)&v30 + 1) == *((_QWORD *)&v24 + 1))
          {
            v27 = v25;
            v28 = v26;
          }
          else
          {
            sub_236785020((_QWORD *)a1, (uint64_t)&v29, (uint64_t)&v27);
            v23 = v29;
            v24 = v30;
            v25 = v27;
            v26 = v28;
          }
          result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(a1 + 24))(a1, &v27, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != v22);
  }
  return result;
}

uint64_t sub_2367858E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  result = sub_2367604DC(a1, a2, a3, a4, a5, a6);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v23 = *(_OWORD *)(a1 + 48);
  v24 = *(_OWORD *)(a1 + 64);
  v25 = *(_OWORD *)(a1 + 80);
  v26 = *(_OWORD *)(a1 + 96);
  v22 = a5;
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4)
      {
        v14 = a3 + v11;
        v15 = a4;
        v16 = a2 + v12;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(a1 + 16))(a1, &v29, v16, a6[2]);
          if ((_QWORD)v29 == (_QWORD)v23
            && *((_QWORD *)&v29 + 1) == *((_QWORD *)&v23 + 1)
            && (_QWORD)v30 == (_QWORD)v24
            && *((_QWORD *)&v30 + 1) == *((_QWORD *)&v24 + 1))
          {
            v27 = v25;
            v28 = v26;
          }
          else
          {
            (*(void (**)(__int128 *, __int128 *, _QWORD))(*(_QWORD *)(a1 + 112) + 24))(&v29, &v27, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16));
            v23 = v29;
            v24 = v30;
            v25 = v27;
            v26 = v28;
          }
          result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(a1 + 24))(a1, &v27, v14, a6[3]);
          v14 = result;
          --v15;
        }
        while (v15);
      }
      v12 += *a6;
      v11 += a6[1];
      ++v13;
    }
    while (v13 != v22);
  }
  return result;
}

uint64_t sub_236785A68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v13[2];
  _QWORD v14[256];
  int v15[256];
  _DWORD v16[256];
  uint64_t v17;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v5 = 0;
  v17 = *MEMORY[0x24BDAC8D0];
  v13[0] = v6;
  v13[1] = v7;
  if (v7)
    v8 = 2;
  else
    v8 = 1;
  do
  {
    v16[v5] = (v4 >> 13) & 1;
    v15[v5] = v3;
    if (v0)
    {
      v9 = &qword_25642E910;
      while (1)
      {
        v9 = (uint64_t *)*v9;
        if (!v9)
          break;
        if (v9 == v0)
        {
          v10 = v0;
          goto LABEL_10;
        }
      }
    }
    v10 = (uint64_t *)&unk_250800620;
LABEL_10:
    v11 = (_QWORD *)v10[5];
    if (!v11)
      v11 = &unk_25642E858;
    v14[v5++] = *v11;
  }
  while (v5 != v8);
  return sub_236784600(v0, v8, v13, (uint64_t)v16, v15, (uint64_t)v14, v1, v2, v4);
}

unint64_t sub_236785B78(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;

  if (!a1)
    sub_236785D18(0, a2, a3, a4, a5, a6, a7, a8, (char)"payload_size != 0");
  if (a1 > 0x7FFFFFFFFFFFFFFELL)
    return 0;
  do
    v9 = __ldxr(&qword_25642E998);
  while (__stxr(v9 + 1, &qword_25642E998));
  result = (unint64_t)malloc_type_malloc(a1 + 256, 0xFBCB090DuLL);
  if (result)
  {
    v11 = result;
    v12 = result & 0xFFFFFFFFFFFFFF80;
    result = (result & 0xFFFFFFFFFFFFFF80) + 256;
    *(_QWORD *)(v12 + 240) = v11;
    *(_QWORD *)(v12 + 248) = a1;
  }
  return result;
}

void sub_236785C00(uint64_t a1, void (*a2)(uint64_t, void *), uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v5 = *(_QWORD *)(a1 - 8);
  if (v5 >= 0x5C0)
  {
    v6 = 0;
    v7 = ((v5 >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64;
    v8 = a1 + 1336;
    do
    {
      v9 = (uint64_t *)(a1 + 1472 * v6);
      sub_2367D79FC(v9 + 180);
      sub_2367D7A3C(v9 + 177);
      sub_2367D7A7C(v9 + 174);
      v10 = v9 + 169;
      sub_2367C2F38(v9 + 172);
      v11 = v9 + 4;
      v12 = v8;
      do
      {
        v13 = 0;
        v10 -= 15;
        do
        {
          sub_2367C2F38((uint64_t *)(v12 + v13));
          v13 -= 40;
        }
        while (v13 != -120);
        v12 -= 120;
      }
      while (v10 != v11);
      ++v6;
      v8 += 1472;
    }
    while (v6 != v7);
  }
  v14 = *(void **)(a1 - 16);
  if (a2)
    a2(a3, v14);
  else
    free(v14);
}

void sub_236785D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FILE **v9;
  char __str[800];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  vsnprintf(__str, 0x320uLL, "Assert %s", &a9);
  v9 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Abort at %s:%d: %s\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/third_party/highway/hwy/aligned_allocator.cc", 70, __str);
  fflush(*v9);
  abort();
}

uint64_t sub_236785D98(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  char *v25;
  __int16 v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  char *v31;
  char v32;

  v5 = a3;
  v8 = a4[1];
  v7 = a4[2];
  v9 = a4[4];
  v10 = 3 * a5;
  v11 = *(unsigned __int16 *)(v7 + 2 * *(unsigned __int8 *)(v9 + v10));
  v12 = v9 + (int)v10;
  v13 = *(unsigned __int8 *)(v12 + 1);
  v14 = *(unsigned __int16 *)(v7 + 2 * *(unsigned __int8 *)(v12 + 2));
  v15 = *(unsigned __int8 *)(v8 + v11);
  if (*(_BYTE *)(v8 + v11))
  {
    v16 = 0;
    v17 = v11 + v8 + 1;
    do
    {
      *(_BYTE *)(a1 + v16) = *(_BYTE *)(v17 + v16);
      ++v16;
    }
    while (v15 != (_DWORD)v16);
  }
  else
  {
    v16 = 0;
  }
  if (v13 > 9)
  {
    if ((v13 - 12) <= 8)
    {
      v18 = (v13 - 11);
      a2 += v18;
      v5 = (a3 - v18);
    }
  }
  else
  {
    v5 = (a3 - v13);
  }
  if ((int)v5 >= 1)
  {
    v16 = v16;
    v19 = v5;
    do
    {
      v20 = *a2++;
      *(_BYTE *)(a1 + v16++) = v20;
      --v19;
    }
    while (v19);
  }
  if (v13 > 20)
  {
    if (v13 == 21)
    {
      sub_236786014((char *)(a1 - (int)v5 + (int)v16), v5, *(unsigned __int8 *)(a4[5] + 2 * a5) | (*(unsigned __int8 *)(a4[5] + 2 * a5 + 1) << 8));
    }
    else if (v13 == 22 && (int)v5 >= 1)
    {
      v25 = (char *)(a1 - (int)v5 + (int)v16);
      v26 = *(unsigned __int8 *)(a4[5] + 2 * a5) | (*(unsigned __int8 *)(a4[5] + 2 * a5 + 1) << 8);
      do
      {
        v27 = sub_236786014(v25, v5, v26);
        v25 += v27;
        v24 = __OFSUB__((_DWORD)v5, v27);
        v5 = (v5 - v27);
      }
      while (!(((int)v5 < 0) ^ v24 | ((_DWORD)v5 == 0)));
    }
  }
  else if (v13 == 10)
  {
    v28 = (unsigned __int8 *)(a1 - (int)v5 + (int)v16);
    v29 = *v28;
    if (v29 > 0xBF)
    {
      if (v29 > 0xDF)
        v28[2] ^= 5u;
      else
        v28[1] ^= 0x20u;
    }
    else if (v29 - 97 <= 0x19)
    {
      *v28 = v29 ^ 0x20;
    }
  }
  else if (v13 == 11 && (int)v5 >= 1)
  {
    v21 = (unsigned __int8 *)(a1 - (int)v5 + (int)v16);
    do
    {
      v22 = *v21;
      if (v22 > 0xBF)
      {
        if (v22 > 0xDF)
        {
          v21[2] ^= 5u;
          v23 = 3;
        }
        else
        {
          v21[1] ^= 0x20u;
          v23 = 2;
        }
      }
      else
      {
        if (v22 - 97 <= 0x19)
          *v21 = v22 ^ 0x20;
        v23 = 1;
      }
      v21 += v23;
      v24 = __OFSUB__((_DWORD)v5, v23);
      LODWORD(v5) = v5 - v23;
    }
    while (!(((int)v5 < 0) ^ v24 | ((_DWORD)v5 == 0)));
  }
  v30 = *(unsigned __int8 *)(v8 + v14);
  if (*(_BYTE *)(v8 + v14))
  {
    v16 = v16;
    v31 = (char *)(v14 + v8 + 1);
    do
    {
      v32 = *v31++;
      *(_BYTE *)(a1 + v16++) = v32;
      --v30;
    }
    while (v30);
  }
  return v16;
}

uint64_t sub_236786014(char *a1, uint64_t a2, __int16 a3)
{
  unsigned int v3;
  int v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    *a1 = (v3 + a3) & 0x7F;
    return 1;
  }
  if (v3 < 0xC0)
    return 1;
  v4 = (a3 & 0x7FFF) - (a3 & 0x8000) + 0x1000000;
  if (v3 > 0xDF)
  {
    if (v3 > 0xEF)
    {
      if (v3 > 0xF7)
        return 1;
      if ((int)a2 >= 4)
      {
        v10 = a1[3];
        v11 = a1[2];
        v12 = a1[1];
        v13 = ((v3 & 7) << 18) + v4 + (v10 & 0x3F);
        v14 = v13 + ((v11 & 0x3F) << 6);
        v15 = v14 + ((v12 & 0x3F) << 12);
        *a1 = (v15 >> 18) & 7 | 0xF0;
        a1[1] = v12 & 0xC0 | (v15 >> 12) & 0x3F;
        a1[2] = v11 & 0xC0 | (v14 >> 6) & 0x3F;
        a1[3] = v10 & 0xC0 | v13 & 0x3F;
        return 4;
      }
    }
    else if ((int)a2 >= 3)
    {
      v7 = a1[2];
      v8 = a1[1];
      v9 = ((v3 & 0xF) << 12) + v4 + (v7 & 0x3F);
      *a1 = ((unsigned __int16)(v9 + ((v8 & 0x3F) << 6)) >> 12) | 0xE0;
      a1[1] = v8 & 0xC0 | ((v9 + ((v8 & 0x3Fu) << 6)) >> 6) & 0x3F;
      a1[2] = v7 & 0xC0 | v9 & 0x3F;
      return 3;
    }
  }
  else
  {
    if ((int)a2 < 2)
      return 1;
    v5 = a1[1];
    v6 = (v5 & 0x3F | ((v3 & 0x1F) << 6)) + v4;
    *a1 = (v6 >> 6) & 0x1F | 0xC0;
    a1[1] = v5 & 0xC0 | v6 & 0x3F;
    return 2;
  }
  return a2;
}

unint64_t sub_236786150(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8, double a9, double a10, int32x4_t a11, unint64_t *a12, _DWORD *a13, _QWORD *a14, _QWORD *a15)
{
  int v15;

  v15 = *(_DWORD *)(a6 + 40);
  if (*(_QWORD *)(a6 + 96))
  {
    if (v15 > 34)
    {
      if (v15 <= 53)
      {
        switch(v15)
        {
          case '#':
            goto LABEL_9;
          case '(':
            result = sub_23678978C(result, a2, a3, a4, a5, (int *)a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
            break;
          case ')':
            result = sub_23678B128(result, a2, a3, a4, a5, (_QWORD *)a6, (unint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
            break;
          case '*':
            result = sub_23678CAD0(result, a2, a3, a4, a5, (_QWORD *)a6, a7, a8, a9, a10, a11, a12, (uint64_t)a13, a14, a15);
            break;
          default:
            return result;
        }
        return result;
      }
      if (v15 != 54)
      {
        if (v15 == 55)
          return sub_23678E5B4(result, a2, a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        if (v15 == 65)
          return sub_23678FB80(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        return result;
      }
      return sub_236799DD8(result, a2, a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
    }
    switch(v15)
    {
      case 2:
        goto LABEL_13;
      case 3:
        goto LABEL_22;
      case 4:
        goto LABEL_23;
      case 5:
        result = sub_236786378(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case 6:
        result = sub_236787D60(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      default:
        return result;
    }
  }
  else if (v15 <= 34)
  {
    switch(v15)
    {
      case 2:
LABEL_13:
        result = sub_2367918FC(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case 3:
LABEL_22:
        result = sub_2367926B8(result, a2, a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case 4:
LABEL_23:
        result = sub_2367931B8(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, a13, a14, a15);
        break;
      case 5:
        result = sub_2367940F4(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, a13, a14, a15);
        break;
      case 6:
        result = sub_23679540C(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      default:
        return result;
    }
  }
  else if (v15 > 53)
  {
    switch(v15)
    {
      case '6':
        return sub_236799DD8(result, a2, a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
      case '7':
        return sub_23679B6EC(result, a2, a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
      case 'A':
        return sub_23679C4F8(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
    }
  }
  else
  {
    switch(v15)
    {
      case '#':
LABEL_9:
        result = sub_23679A8EC(result, a2, a3, a4, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case '(':
        result = sub_2367966BC(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case ')':
        result = sub_2367978B0(result, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a12, (uint64_t)a13, a14, a15);
        break;
      case '*':
        result = sub_236798AE8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)a13, a14, a15);
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t sub_236786378(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  int *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  int v124;
  BOOL v125;
  unint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  signed int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  BOOL v176;
  uint64_t v177;
  unint64_t v178;
  BOOL v179;
  unint64_t v180;
  BOOL v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int8 *v205;
  unsigned int v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  int *v228;
  uint64_t v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 *v241;
  unint64_t v242;
  unint64_t v243;
  char v244;
  uint64_t v245;
  char *v246;
  int v247;
  unint64_t v248;
  char *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned __int8 *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  int v260;
  unint64_t v261;
  char v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  BOOL v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  unint64_t v277;
  unint64_t v278;
  char v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned __int8 *v284;
  unint64_t v285;
  unsigned __int8 *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unint64_t v299;
  unint64_t v300;
  int32x2_t v301;
  int v302;
  int32x4_t v303;
  int32x4_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  unint64_t v309;
  uint64_t v310;
  char v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unsigned __int8 *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  unint64_t v335;
  int v336;
  int v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  unint64_t v342;
  char v343;
  unsigned int v344;
  unint64_t v345;
  uint64_t v346;
  unsigned int v347;
  unint64_t v348;
  unsigned int v349;
  int v350;
  unsigned int v351;
  int v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int v356;
  int v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v371;
  unint64_t v372;
  int v373;
  int v374;
  int v375;
  signed int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unsigned int v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  int v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;

  v13 = a2;
  v14 = *a9;
  v379 = *(_QWORD *)(a6 + 16);
  v380 = a2 + result;
  v361 = a2 + result - 3;
  if (result <= 3)
    v15 = a2;
  else
    v15 = a2 + result - 3;
  v16 = *(_DWORD *)(a6 + 8);
  v17 = 512;
  if (*(int *)(a6 + 4) < 9)
    v17 = 64;
  v366 = v17;
  v364 = v15;
  v365 = *(_QWORD *)(a6 + 104);
  v18 = *(_DWORD *)(a7 + 108);
  if (v18 >= 5)
  {
    v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_2368AF3A0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v18 >= 0xB)
    {
      v20 = (const float *)(a8 + 1);
      v21 = (int32x4_t)vld1q_dup_f32(v20);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v21, (int32x4_t)xmmword_2368AF3A0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (result < 5)
  {
    v23 = a10;
    v292 = a2;
    goto LABEL_500;
  }
  v22 = v17 + a2;
  v378 = (1 << v16) - 16;
  v369 = a5 + 256;
  v368 = v365 + 1;
  v362 = 4 * v17;
  v363 = a2 + result - 1;
  v23 = a10;
  v402 = a6;
  v405 = a4;
  v406 = a3;
  v391 = *(_QWORD *)(a7 + 120);
  v388 = *(_QWORD *)(a7 + 128);
  do
  {
    if (v13 >= v378)
      v24 = v378;
    else
      v24 = v13;
    v25 = v13 + v379;
    if (v13 + v379 >= v378)
      v25 = v378;
    v398 = v25;
    if (*(_DWORD *)(a6 + 632))
    {
      if (v13)
      {
        v26 = *(unsigned __int8 *)(a3 + ((v13 - 1) & a4));
        if (v13 != 1)
        {
          v27 = *(unsigned __int8 *)(a3 + ((v13 - 2) & a4));
LABEL_23:
          v381 = v26;
          v28 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v369 + v27) | *(_BYTE *)(a5 + v26)) + 637);
          goto LABEL_24;
        }
      }
      else
      {
        v26 = 0;
      }
      v27 = 0;
      goto LABEL_23;
    }
    v28 = 0;
    v381 = 0;
LABEL_24:
    v395 = v22;
    v389 = v14;
    v29 = v380 - v13;
    v383 = v28;
    v30 = *(_QWORD *)(a6 + 8 * v28 + 704);
    v31 = v13 & a4;
    v32 = *(int *)(a7 + 108);
    v407 = *(_QWORD *)(a6 + 80);
    v33 = (v380 - v13) >> 3;
    if ((_DWORD)v32)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = (unsigned __int8 *)(a3 + v31);
      v39 = a3 + v31 + (v29 & 0xFFFFFFFFFFFFFFF8);
      v40 = 2020;
      v41 = 2020;
      do
      {
        v42 = a8[v34];
        v43 = v13 - v42;
        v44 = v24 < v42 || v43 >= v13;
        v45 = v43 & a4;
        v46 = v35 + v31;
        v47 = v44 || v46 > a4;
        v48 = v45 + v35;
        v49 = v47 || v48 > a4;
        if (!v49 && *(unsigned __int8 *)(a3 + v46) == *(unsigned __int8 *)(a3 + v48))
        {
          v50 = a3 + v45;
          if (v29 < 8)
          {
            v55 = 0;
            v56 = v38;
LABEL_56:
            if ((v29 & 7) != 0)
            {
              v59 = v23;
              v60 = v29 & 7 | v55;
              v61 = v29 & 7;
              while (*(unsigned __int8 *)(v50 + v55) == *v56)
              {
                ++v56;
                ++v55;
                if (!--v61)
                {
                  v55 = v60;
                  break;
                }
              }
              v23 = v59;
            }
          }
          else
          {
            v51 = 0;
            v52 = (v380 - v13) >> 3;
            while (1)
            {
              v53 = *(_QWORD *)&v38[v51];
              v54 = *(_QWORD *)(v50 + v51);
              if (v53 != v54)
                break;
              v51 += 8;
              if (!--v52)
              {
                v55 = v29 & 0xFFFFFFFFFFFFFFF8;
                v56 = (unsigned __int8 *)v39;
                goto LABEL_56;
              }
            }
            v55 = v51 + (__clz(__rbit64(v54 ^ v53)) >> 3);
          }
          a4 = v405;
          a3 = v406;
          if (v55 > 2 || v34 <= 1 && v55 == 2)
          {
            v57 = 135 * v55 + 1935;
            if (v40 < v57)
            {
              v58 = v57 - (((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39);
              if (!v34)
                v58 = 135 * v55 + 1935;
              if (v40 < v58)
              {
                v37 = a8[v34];
                v41 = v58;
                v36 = v55;
                v40 = v58;
                v35 = v55;
              }
            }
          }
        }
        ++v34;
      }
      while (v34 != v32);
    }
    else
    {
      v37 = 0;
      v36 = 0;
      v35 = 0;
      v41 = 2020;
      v40 = 2020;
    }
    v367 = v23;
    v62 = (unsigned __int8 *)(a3 + v31);
    v63 = *(unsigned int *)(a7 + 100);
    v64 = (506832829 * *(_DWORD *)(a3 + v31)) >> *(_DWORD *)(a7 + 96);
    v65 = v388 + 4 * ((_DWORD)v64 << *(_DWORD *)(a7 + 104));
    v66 = *(unsigned __int16 *)(v391 + 2 * v64);
    v377 = *(_QWORD *)(a7 + 88);
    v67 = v66 - v377;
    if (v66 < v377)
      v67 = 0;
    v392 = v13;
    if (v67 < v66)
    {
      v68 = *(unsigned __int16 *)(v391 + 2 * v64);
      do
      {
        v69 = *(unsigned int *)(v65 + 4 * (--v68 & v63));
        v70 = v13 - v69;
        if (v13 - v69 > v24)
          break;
        if (v35 + v31 <= v405)
        {
          v71 = v69 & v405;
          if (v71 + v35 <= v405 && *(unsigned __int8 *)(v406 + v35 + v31) == *(unsigned __int8 *)(v406 + v71 + v35))
          {
            v72 = v406 + v71;
            if (v29 < 8)
            {
              v77 = 0;
              v78 = v62;
LABEL_83:
              if ((v29 & 7) != 0)
              {
                v80 = v29 & 7 | v77;
                v81 = v29 & 7;
                while (*(unsigned __int8 *)(v72 + v77) == *v78)
                {
                  ++v78;
                  ++v77;
                  if (!--v81)
                  {
                    v77 = v80;
                    break;
                  }
                }
              }
            }
            else
            {
              v73 = 0;
              v74 = v33;
              while (1)
              {
                v75 = *(_QWORD *)&v62[v73];
                v76 = *(_QWORD *)(v72 + v73);
                if (v75 != v76)
                  break;
                v73 += 8;
                if (!--v74)
                {
                  v77 = v29 & 0xFFFFFFFFFFFFFFF8;
                  v78 = &v62[v29 & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_83;
                }
              }
              v77 = v73 + (__clz(__rbit64(v76 ^ v75)) >> 3);
            }
            v13 = v392;
            if (v77 >= 4)
            {
              v79 = __clz(v70);
              if (v40 < 135 * v77 - 30 * (v79 ^ 0x1F) + 1920)
              {
                v37 = v70;
                v41 = 135 * v77 - 30 * (v79 ^ 0x1F) + 1920;
                v36 = v77;
                v40 = v41;
                v35 = v77;
              }
            }
          }
        }
      }
      while (v68 > v67);
    }
    *(_DWORD *)(v65 + 4 * (v63 & v66)) = v13;
    *(_WORD *)(v391 + 2 * v64) = v66 + 1;
    if (v41 == 2020)
    {
      v82 = *(_QWORD *)(a7 + 112);
      v83 = *(_QWORD *)(v82 + 40);
      v84 = *(_QWORD *)(v82 + 48);
      a4 = v405;
      a3 = v406;
      if (v84 >= v83 >> 7)
      {
        v404 = 0;
        v305 = ((506832829 * *(_DWORD *)v62) >> 17) & 0x7FFE;
        v306 = *(_QWORD *)(v30 + 32);
        v307 = v368 + v398;
        v308 = 1;
        v309 = v36;
        v41 = 2020;
        v310 = v37;
        do
        {
          v311 = v308;
          *(_QWORD *)(v82 + 40) = ++v83;
          v312 = *(unsigned __int8 *)(v306 + v305);
          if (!*(_BYTE *)(v306 + v305) || v29 < v312)
            goto LABEL_428;
          v313 = *(unsigned __int16 *)(*(_QWORD *)(v30 + 24) + 2 * v305);
          v314 = *(unsigned int *)(*(_QWORD *)v30 + 4 * v312 + 32);
          v315 = *(_QWORD *)(*(_QWORD *)v30 + 168);
          v316 = (unsigned __int8 *)(v315 + v314 + v313 * *(unsigned __int8 *)(v306 + v305));
          if (v312 < 8)
          {
            v36 = 0;
LABEL_433:
            v323 = v312 & 7;
            if ((v312 & 7) != 0)
            {
              v324 = v36 | v323;
              while (v62[v36] == *v316)
              {
                ++v316;
                ++v36;
                if (!--v323)
                {
                  v36 = v324;
                  break;
                }
              }
            }
          }
          else
          {
            v317 = 0;
            v36 = v312 & 0xF8;
            v318 = (unsigned __int8 *)(v315
                                     + v313 * (unint64_t)*(unsigned __int8 *)(v306 + v305)
                                     + (*(_BYTE *)(v306 + v305) & 0xF8)
                                     + v314);
            while (1)
            {
              v319 = *(_QWORD *)&v316[v317];
              v320 = *(_QWORD *)&v62[v317];
              if (v319 != v320)
                break;
              v317 += 8;
              if (v36 == v317)
              {
                v316 = v318;
                goto LABEL_433;
              }
            }
            v36 = v317 + (__clz(__rbit64(v320 ^ v319)) >> 3);
          }
          a4 = v405;
          a3 = v406;
          if (v36
            && v36 + *(unsigned int *)(v30 + 12) > v312
            && (v321 = v307
                     + v313
                     + ((((*(_QWORD *)(v30 + 16) >> (6 * (v312 - v36))) & 0x3FLL)
                       + 4 * (v312 - v36)) << *(_BYTE *)(*(_QWORD *)v30 + v312)),
                v321 <= v407)
            && (v37 = v307
                    + v313
                    + ((((*(_QWORD *)(v30 + 16) >> (6 * (v312 - v36))) & 0x3FLL)
                      + 4 * (v312 - v36)) << *(_BYTE *)(*(_QWORD *)v30 + v312)),
                v322 = 135 * v36 - 30 * (__clz(v321) ^ 0x1F) + 1920,
                v322 >= v41))
          {
            v404 = v312 - v36;
            *(_QWORD *)(v82 + 48) = ++v84;
            v41 = v322;
          }
          else
          {
LABEL_428:
            v37 = v310;
            v36 = v309;
          }
          v308 = 0;
          ++v305;
          v309 = v36;
          v310 = v37;
        }
        while ((v311 & 1) != 0);
      }
      else
      {
        v404 = 0;
        v41 = 2020;
      }
    }
    else
    {
      v404 = 0;
      a4 = v405;
      a3 = v406;
    }
    v403 = v37;
    a6 = v402;
    v401 = *(_QWORD *)(v402 + 96);
    v397 = *(_QWORD *)(v402 + 104);
    if (v401)
    {
      v85 = 0;
      v399 = *(_QWORD *)(v402 + 104) + v398;
      do
      {
        v86 = a6 + 8 * v85;
        v87 = *(_QWORD *)(v86 + 112);
        v89 = *(_DWORD *)(v87 + 16);
        v88 = *(_DWORD *)(v87 + 20);
        v90 = v87 + 24;
        v91 = v87 + 24 + 4 * (1 << v88);
        v92 = v91 + 2 * (1 << v89);
        v93 = (_QWORD *)(v92 + 4 * *(unsigned int *)(v87 + 4));
        if (*(_DWORD *)v87 != -558043680)
          v93 = (_QWORD *)*v93;
        v94 = 0;
        v95 = *(_QWORD *)(v86 + 368);
        v96 = v399 - v95;
        v97 = *(unsigned int *)(v87 + 8);
        v98 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v62 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v87 + 12)))) >> -(char)v89;
        v99 = v399 - v95 - v97;
        v100 = (0xFFFFFFFF >> -(char)v88) & v98;
        v101 = *(unsigned __int16 *)(v91 + 2 * v98);
        v102 = (int *)(v92 + 4 * (*(_DWORD *)(v90 + 4 * v100) + v101));
        v103 = (char *)v93 + v399 - v95;
        v104 = v36;
        v105 = v41;
        do
        {
          v106 = a8[v94];
          if (v99 < v106 && v96 >= v106)
          {
            if (v97 - (v96 - v106) >= v29)
              v108 = v29;
            else
              v108 = v97 - (v96 - v106);
            if (v108 < 8)
            {
              v110 = 0;
              v111 = v62;
LABEL_132:
              v121 = v108 & 7;
              if (v121)
              {
                v122 = v110 | v121;
                v123 = &v103[v110 - v106];
                while (1)
                {
                  v124 = *v123++;
                  if (v124 != *v111)
                    break;
                  ++v111;
                  ++v110;
                  if (!--v121)
                  {
                    v110 = v122;
                    break;
                  }
                }
              }
            }
            else
            {
              v109 = 0;
              v110 = v108 & 0xFFFFFFFFFFFFFFF8;
              v111 = &v62[v108 & 0xFFFFFFFFFFFFFFF8];
              v112 = -(uint64_t)(v108 >> 3);
              while (1)
              {
                v113 = *(_QWORD *)&v62[v109];
                v114 = *(_QWORD *)((char *)v93 + v96 - v106 + v109);
                if (v113 != v114)
                  break;
                v109 += 8;
                v44 = __CFADD__(v112++, 1);
                if (v44)
                  goto LABEL_132;
              }
              v110 = v109 + (__clz(__rbit64(v114 ^ v113)) >> 3);
            }
            a4 = v405;
            a3 = v406;
            if (v110 >= 2)
            {
              v115 = 135 * v110 + 1935;
              if (v41 < v115)
              {
                v116 = v115 - (((0x1CA10u >> (v94 & 0xE)) & 0xE) + 39);
                if (!v94)
                  v116 = 135 * v110 + 1935;
                if (v110 <= v36)
                  v117 = v36;
                else
                  v117 = v110;
                v118 = v41 >= v116;
                v119 = v403;
                if (v41 < v116)
                  v119 = a8[v94];
                v403 = v119;
                if (v41 < v116)
                  v105 = v116;
                v120 = v404;
                if (v41 < v116)
                  v120 = 0;
                v404 = v120;
                if (v41 < v116)
                {
                  v104 = v110;
                  v41 = v116;
                }
                if (!v118)
                  v36 = v117;
              }
            }
          }
          ++v94;
        }
        while (v94 != 4);
        v125 = v101 == 0xFFFF;
        v126 = v407;
        if (!v125)
        {
          do
          {
            v128 = *v102++;
            v127 = v128;
            v129 = v128 & 0x7FFFFFFF;
            v130 = v96 - v129;
            if (v97 - v129 >= v29)
              v131 = v29;
            else
              v131 = v97 - v129;
            v47 = v130 > v126;
            v132 = v36 + v31;
            v134 = v47 || v132 > a4 || v36 >= v131;
            if (!v134 && *(unsigned __int8 *)(a3 + v132) == *((unsigned __int8 *)v93 + v36 + v129))
            {
              v135 = (char *)v93 + v129;
              if (v131 < 8)
              {
                v137 = 0;
                v138 = v62;
LABEL_178:
                v150 = v131 & 7;
                if ((v131 & 7) != 0)
                {
                  v151 = v137 | v150;
                  while (v135[v137] == *v138)
                  {
                    ++v138;
                    ++v137;
                    if (!--v150)
                    {
                      v137 = v151;
                      break;
                    }
                  }
                }
              }
              else
              {
                v136 = 0;
                v137 = v131 & 0xFFFFFFFFFFFFFFF8;
                v138 = &v62[v131 & 0xFFFFFFFFFFFFFFF8];
                v139 = -(uint64_t)(v131 >> 3);
                while (1)
                {
                  v140 = *(_QWORD *)&v62[v136];
                  v141 = *(_QWORD *)&v135[v136];
                  if (v140 != v141)
                    break;
                  v136 += 8;
                  v44 = __CFADD__(v139++, 1);
                  if (v44)
                  {
                    a4 = v405;
                    a3 = v406;
                    goto LABEL_178;
                  }
                }
                v137 = v136 + (__clz(__rbit64(v141 ^ v140)) >> 3);
                a4 = v405;
                a3 = v406;
              }
              v142 = __clz(v130) ^ 0x1F;
              v143 = 135 * v137 - 30 * v142 + 1920;
              v144 = v403;
              if (v41 < v143)
              {
                v145 = 135 * v137 - 30 * v142 + 1920;
              }
              else
              {
                v130 = v403;
                v145 = v105;
              }
              v146 = v404;
              if (v41 < v143)
                v147 = 0;
              else
                v147 = v404;
              if (v41 < v143)
                v148 = v137;
              else
                v148 = v104;
              if (v41 < v143)
              {
                v149 = v137;
              }
              else
              {
                v143 = v41;
                v149 = v36;
              }
              if (v137 >= 4)
                v144 = v130;
              v403 = v144;
              if (v137 >= 4)
              {
                v105 = v145;
                v146 = v147;
              }
              v404 = v146;
              if (v137 >= 4)
              {
                v104 = v148;
                v41 = v143;
                v36 = v149;
              }
            }
            v126 = v407;
          }
          while ((v127 & 0x80000000) == 0);
        }
        ++v85;
        v36 = v104;
        v41 = v105;
        a6 = v402;
        v13 = v392;
      }
      while (v85 != v401);
    }
    else
    {
      v105 = v41;
      v104 = v36;
    }
    if (v105 < 0x7E5)
    {
      v14 = v389 + 1;
      v292 = v13 + 1;
      v22 = v395;
      result = 506832829;
      v23 = v367;
      if (v13 + 1 > v395)
      {
        if (v292 <= v395 + v362)
        {
          v335 = v13 + 9;
          if (v13 + 9 >= v361)
            v335 = v361;
          if (v292 < v335)
          {
            v336 = *(_DWORD *)(a7 + 96);
            v337 = *(_DWORD *)(a7 + 100);
            v338 = *(_DWORD *)(a7 + 104);
            do
            {
              v339 = (506832829 * *(_DWORD *)(a3 + (v292 & a4))) >> v336;
              v340 = *(unsigned __int16 *)(v391 + 2 * v339);
              *(_DWORD *)(v388 + 4 * ((v339 << v338) + (unint64_t)(v337 & v340))) = v292;
              *(_WORD *)(v391 + 2 * v339) = v340 + 1;
              v14 += 2;
              v292 += 2;
            }
            while (v292 < v335);
          }
        }
        else
        {
          v293 = v13 + 17;
          if (v13 + 17 >= v380 - 4)
            v293 = v380 - 4;
          if (v292 < v293)
          {
            v294 = *(_DWORD *)(a7 + 96);
            v295 = *(_DWORD *)(a7 + 100);
            v296 = *(_DWORD *)(a7 + 104);
            do
            {
              v297 = (506832829 * *(_DWORD *)(a3 + (v292 & a4))) >> v294;
              v298 = *(unsigned __int16 *)(v391 + 2 * v297);
              *(_DWORD *)(v388 + 4 * ((v297 << v296) + (unint64_t)(v295 & v298))) = v292;
              *(_WORD *)(v391 + 2 * v297) = v298 + 1;
              v14 += 4;
              v292 += 4;
            }
            while (v292 < v293);
          }
        }
      }
      goto LABEL_493;
    }
    v152 = 0;
    v153 = *(_DWORD *)(a7 + 108);
    v375 = *(_DWORD *)(a7 + 104);
    v376 = v153;
    if (v153 <= 1)
      v153 = 1;
    v373 = *(_DWORD *)(a7 + 100);
    v374 = *(_DWORD *)(a7 + 96);
    v154 = v153;
    v155 = v363 - v13;
    v156 = v379 + 1 + v13;
    v157 = v389;
    v158 = v391;
    v371 = v153;
    while (1)
    {
      if (v156 >= v378)
        v159 = v378;
      else
        v159 = v156;
      v400 = v159;
      --v29;
      v160 = v104 - 1;
      if (v104 - 1 >= v29)
        v160 = v29;
      if (*(int *)(a6 + 4) >= 5)
        v161 = 0;
      else
        v161 = v160;
      v162 = v13 + 1;
      if (v13 + 1 < v378)
        v163 = v13 + 1;
      else
        v163 = v378;
      v164 = v162 + v379;
      if (v162 + v379 >= v378)
        v164 = v378;
      v384 = v156;
      v385 = v164;
      v390 = v157;
      v372 = v104;
      v387 = v105;
      v386 = v152;
      if (*(_DWORD *)(a6 + 632))
      {
        v165 = *(unsigned __int8 *)(a6
                                  + (*(_BYTE *)(v369 + v381) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(a3 + (v13 & a4))))
                                  + 637);
        v381 = *(unsigned __int8 *)(a3 + (v13 & a4));
      }
      else
      {
        v165 = v383;
      }
      v393 = v13;
      v394 = v13 + 1;
      v166 = *(_QWORD *)(a6 + 8 * v165 + 704);
      v167 = v162 & a4;
      v383 = v165;
      if (v376)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v171 = a3 + v167;
        v172 = 2020;
        v173 = 2020;
        do
        {
          v174 = a8[v168];
          v175 = v162 - v174;
          v176 = v163 < v174 || v175 >= v162;
          v177 = v175 & a4;
          v178 = v161 + v167;
          v179 = v176 || v178 > a4;
          v180 = v177 + v161;
          v181 = v179 || v180 > a4;
          if (!v181 && *(unsigned __int8 *)(a3 + v178) == *(unsigned __int8 *)(a3 + v180))
          {
            v182 = a3 + v177;
            if (v29 < 8)
            {
              v183 = 0;
              v187 = (unsigned __int8 *)(a3 + v167);
LABEL_238:
              if ((v29 & 7) != 0)
              {
                v190 = v29 & 7;
                do
                {
                  if (*(unsigned __int8 *)(v182 + v183) != *v187)
                    break;
                  ++v187;
                  ++v183;
                  --v190;
                }
                while (v190);
              }
            }
            else
            {
              v183 = 0;
              v184 = v29 >> 3;
              while (1)
              {
                v185 = *(_QWORD *)(v171 + v183);
                v186 = *(_QWORD *)(v182 + v183);
                if (v185 != v186)
                  break;
                v183 += 8;
                if (!--v184)
                {
                  v187 = (unsigned __int8 *)(v171 + v183);
                  goto LABEL_238;
                }
              }
              v183 += __clz(__rbit64(v186 ^ v185)) >> 3;
            }
            v162 = v394;
            if (v183 > 2 || v168 <= 1 && v183 == 2)
            {
              v188 = 135 * v183 + 1935;
              if (v172 < v188)
              {
                v189 = v188 - (((0x1CA10u >> (v168 & 0xE)) & 0xE) + 39);
                if (!v168)
                  v189 = 135 * v183 + 1935;
                if (v172 < v189)
                {
                  v170 = v183;
                  v169 = a8[v168];
                  v173 = v189;
                  v172 = v189;
                  v161 = v183;
                }
              }
            }
          }
          ++v168;
        }
        while (v168 != v154);
      }
      else
      {
        v170 = 0;
        v169 = 0;
        v173 = 2020;
        v172 = 2020;
      }
      v191 = (unsigned __int8 *)(a3 + v167);
      v192 = (506832829 * *(_DWORD *)(a3 + v167)) >> v374;
      v193 = v388 + 4 * ((_DWORD)v192 << v375);
      v194 = *(unsigned __int16 *)(v158 + 2 * v192);
      v195 = v194 - v377;
      if (v194 < v377)
        v195 = 0;
      if (v195 < v194)
      {
        v196 = *(unsigned __int16 *)(v158 + 2 * v192);
        do
        {
          v197 = *(unsigned int *)(v193 + 4 * (--v196 & *(_DWORD *)(a7 + 100)));
          v198 = v394 - v197;
          if (v394 - v197 > v163)
            break;
          if (v161 + v167 <= a4)
          {
            v199 = v197 & a4;
            if (v199 + v161 <= a4)
            {
              a3 = v406;
              if (*(unsigned __int8 *)(v406 + v161 + v167) != *(unsigned __int8 *)(v406 + v199 + v161))
              {
                a4 = v405;
                continue;
              }
              v200 = v406 + v199;
              if (v29 < 8)
              {
                v201 = 0;
                v205 = v191;
LABEL_266:
                if ((v29 & 7) != 0)
                {
                  v207 = v29 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v200 + v201) != *v205)
                      break;
                    ++v205;
                    ++v201;
                    --v207;
                  }
                  while (v207);
                }
              }
              else
              {
                v201 = 0;
                v202 = v29 >> 3;
                while (1)
                {
                  v203 = *(_QWORD *)&v191[v201];
                  v204 = *(_QWORD *)(v200 + v201);
                  if (v203 != v204)
                    break;
                  v201 += 8;
                  if (!--v202)
                  {
                    v205 = &v191[v201];
                    goto LABEL_266;
                  }
                }
                v201 += __clz(__rbit64(v204 ^ v203)) >> 3;
              }
              if (v201 >= 4)
              {
                v206 = __clz(v198);
                a4 = v405;
                a3 = v406;
                if (v172 < 135 * v201 - 30 * (v206 ^ 0x1F) + 1920)
                {
                  v170 = v201;
                  v169 = v198;
                  v173 = 135 * v201 - 30 * (v206 ^ 0x1F) + 1920;
                  v172 = v173;
                  v161 = v201;
                }
                continue;
              }
            }
            a4 = v405;
            a3 = v406;
          }
        }
        while (v196 > v195);
      }
      *(_DWORD *)(v193 + 4 * (v373 & v194)) = v394;
      *(_WORD *)(v391 + 2 * v192) = v194 + 1;
      if (v173 == 2020)
      {
        v208 = *(_QWORD *)(a7 + 112);
        v209 = *(_QWORD *)(v208 + 40);
        v210 = *(_QWORD *)(v208 + 48);
        if (v210 >= v209 >> 7)
        {
          v211 = 0;
          v274 = ((506832829 * *(_DWORD *)v191) >> 17) & 0x7FFE;
          v275 = *(_QWORD *)(v166 + 32);
          v276 = 1;
          v173 = 2020;
          v277 = v169;
          v278 = v170;
          do
          {
            v279 = v276;
            *(_QWORD *)(v208 + 40) = ++v209;
            v280 = *(unsigned __int8 *)(v275 + v274);
            if (!*(_BYTE *)(v275 + v274) || v29 < v280)
              goto LABEL_377;
            v281 = *(unsigned __int16 *)(*(_QWORD *)(v166 + 24) + 2 * v274);
            v282 = *(unsigned int *)(*(_QWORD *)v166 + 4 * v280 + 32);
            v283 = *(_QWORD *)(*(_QWORD *)v166 + 168);
            v284 = (unsigned __int8 *)(v283 + v282 + v281 * *(unsigned __int8 *)(v275 + v274));
            if (v280 < 8)
            {
              v170 = 0;
LABEL_392:
              v290 = v280 & 7;
              if ((v280 & 7) != 0)
              {
                v291 = v170 | v290;
                while (v191[v170] == *v284)
                {
                  ++v284;
                  ++v170;
                  if (!--v290)
                  {
                    v170 = v291;
                    break;
                  }
                }
              }
            }
            else
            {
              v285 = 0;
              v170 = v280 & 0xF8;
              v286 = (unsigned __int8 *)(v283
                                       + v281 * (unint64_t)*(unsigned __int8 *)(v275 + v274)
                                       + (*(_BYTE *)(v275 + v274) & 0xF8)
                                       + v282);
              while (1)
              {
                v287 = *(_QWORD *)&v284[v285];
                v288 = *(_QWORD *)&v191[v285];
                if (v287 != v288)
                  break;
                v285 += 8;
                if (v170 == v285)
                {
                  v284 = v286;
                  goto LABEL_392;
                }
              }
              v170 = v285 + (__clz(__rbit64(v288 ^ v287)) >> 3);
            }
            a4 = v405;
            a3 = v406;
            if (v170
              && v170 + *(unsigned int *)(v166 + 12) > v280
              && (v169 = v368
                       + v385
                       + v281
                       + ((((*(_QWORD *)(v166 + 16) >> (6 * (v280 - v170))) & 0x3FLL)
                         + 4 * (v280 - v170)) << *(_BYTE *)(*(_QWORD *)v166 + v280)),
                  v169 <= v407)
              && (v289 = 135 * v170 - 30 * (__clz(v169) ^ 0x1F) + 1920, v289 >= v173))
            {
              v211 = v280 - v170;
              *(_QWORD *)(v208 + 48) = ++v210;
              v173 = v289;
            }
            else
            {
LABEL_377:
              v170 = v278;
              v169 = v277;
            }
            v276 = 0;
            ++v274;
            v277 = v169;
            v278 = v170;
          }
          while ((v279 & 1) != 0);
        }
        else
        {
          v211 = 0;
          v173 = 2020;
        }
      }
      else
      {
        v211 = 0;
      }
      if (v401)
      {
        v212 = 0;
        v396 = v385 + v397;
        do
        {
          v213 = v402 + 8 * v212;
          v214 = *(_QWORD *)(v213 + 112);
          v216 = *(_DWORD *)(v214 + 16);
          v215 = *(_DWORD *)(v214 + 20);
          v217 = v214 + 24;
          v218 = v214 + 24 + 4 * (1 << v215);
          v219 = v218 + 2 * (1 << v216);
          v220 = (_QWORD *)(v219 + 4 * *(unsigned int *)(v214 + 4));
          if (*(_DWORD *)v214 != -558043680)
            v220 = (_QWORD *)*v220;
          v221 = 0;
          v222 = *(_QWORD *)(v213 + 368);
          v223 = v396 - v222;
          v224 = *(unsigned int *)(v214 + 8);
          v225 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v191 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v214 + 12)))) >> -(char)v216;
          v226 = v396 - v222 - v224;
          v227 = *(unsigned __int16 *)(v218 + 2 * v225);
          v228 = (int *)(v219
                       + 4
                       * (*(_DWORD *)(v217 + 4 * ((0xFFFFFFFF >> -(char)v215) & v225))
                                      + v227));
          v229 = -v397 - v400 + v222 + v224;
          v230 = (char *)v220 + v397 + v400 - v222;
          v231 = v173;
          v232 = v170;
          do
          {
            v233 = a8[v221];
            if (v226 < v233 && v223 >= v233)
            {
              if (v224 + v233 - v223 >= v29)
                v235 = v29;
              else
                v235 = v224 + v233 - v223;
              if (v235 < 8)
              {
                v236 = 0;
                v241 = v191;
LABEL_309:
                if ((v235 & 7) != 0)
                {
                  v244 = v229 + v233;
                  if (v155 < v229 + v233)
                    v244 = v155;
                  v245 = -(uint64_t)(v244 & 7);
                  v246 = &v230[v236 - v233];
                  do
                  {
                    v247 = *v246++;
                    if (v247 != *v241)
                      break;
                    ++v241;
                    ++v236;
                    v44 = __CFADD__(v245++, 1);
                  }
                  while (!v44);
                }
              }
              else
              {
                v236 = 0;
                v237 = v229 + v233;
                if (v155 < v229 + v233)
                  v237 = v155;
                v238 = -(uint64_t)(v237 >> 3);
                while (1)
                {
                  v239 = *(_QWORD *)&v191[v236];
                  v240 = *(_QWORD *)&v230[v236 - v233];
                  if (v239 != v240)
                    break;
                  v236 += 8;
                  v44 = __CFADD__(v238++, 1);
                  if (v44)
                  {
                    v241 = &v191[v236];
                    goto LABEL_309;
                  }
                }
                v236 += __clz(__rbit64(v240 ^ v239)) >> 3;
              }
              if (v236 >= 2)
              {
                v242 = 135 * v236 + 1935;
                if (v173 < v242)
                {
                  if (v221)
                    v242 -= ((0x1CA10u >> (v221 & 0xE)) & 0xE) + 39;
                  if (v236 <= v170)
                    v243 = v170;
                  else
                    v243 = v236;
                  if (v173 < v242)
                  {
                    v232 = v236;
                    v169 = a8[v221];
                    v231 = v242;
                    v211 = 0;
                    v173 = v242;
                    v170 = v243;
                  }
                }
              }
            }
            ++v221;
          }
          while (v221 != 4);
          a4 = v405;
          a3 = v406;
          v248 = v407;
          if (v227 != 0xFFFF)
          {
            do
            {
              v265 = *v228++;
              v264 = v265;
              v266 = v265 & 0x7FFFFFFF;
              v258 = v223 - v266;
              v267 = v224 - v266;
              if (v224 - v266 >= v29)
                v268 = v29;
              else
                v268 = v224 - v266;
              v269 = v170 + v167;
              v271 = v258 > v248 || v269 > v405 || v170 >= v268;
              if (!v271 && *(unsigned __int8 *)(v406 + v269) == *((unsigned __int8 *)v220 + v170 + v266))
              {
                v249 = (char *)v220 + v266;
                if (v268 < 8)
                {
                  v250 = 0;
                  v255 = v191;
LABEL_346:
                  if ((v268 & 7) != 0)
                  {
                    if (v155 >= v267)
                      v262 = v267;
                    else
                      v262 = v155;
                    v263 = -(uint64_t)(v262 & 7);
                    do
                    {
                      if (v249[v250] != *v255)
                        break;
                      ++v255;
                      ++v250;
                      v44 = __CFADD__(v263++, 1);
                    }
                    while (!v44);
                  }
                }
                else
                {
                  v250 = 0;
                  if (v155 >= v267)
                    v251 = v224 - v266;
                  else
                    v251 = v155;
                  v252 = -(uint64_t)(v251 >> 3);
                  while (1)
                  {
                    v253 = *(_QWORD *)&v191[v250];
                    v254 = *(_QWORD *)&v249[v250];
                    if (v253 != v254)
                      break;
                    v250 += 8;
                    v44 = __CFADD__(v252++, 1);
                    if (v44)
                    {
                      v255 = &v191[v250];
                      goto LABEL_346;
                    }
                  }
                  v250 += __clz(__rbit64(v254 ^ v253)) >> 3;
                }
                v256 = 135 * v250 - 30 * (__clz(v258) ^ 0x1F) + 1920;
                if (v173 < v256)
                  v257 = v250;
                else
                  v257 = v232;
                if (v173 < v256)
                {
                  v259 = v256;
                }
                else
                {
                  v258 = v169;
                  v259 = v231;
                }
                if (v173 < v256)
                  v260 = 0;
                else
                  v260 = v211;
                if (v173 < v256)
                {
                  v261 = v250;
                }
                else
                {
                  v256 = v173;
                  v261 = v170;
                }
                if (v250 >= 4)
                {
                  v232 = v257;
                  v169 = v258;
                  v231 = v259;
                  v211 = v260;
                  v173 = v256;
                  v170 = v261;
                }
                v248 = v407;
              }
            }
            while ((v264 & 0x80000000) == 0);
          }
          ++v212;
          v173 = v231;
          v170 = v232;
        }
        while (v212 != v401);
      }
      else
      {
        v232 = v170;
        v231 = v173;
      }
      v158 = v391;
      v272 = v394;
      if (v231 < v387 + 175)
        break;
      v273 = v388;
      v157 = v390 + 1;
      a6 = v402;
      result = 506832829;
      if (v386 <= 2)
      {
        v152 = v386 + 1;
        --v155;
        v156 = v384 + 1;
        v403 = v169;
        v105 = v231;
        v404 = v211;
        v104 = v232;
        v13 = v394;
        v154 = v371;
        if (v393 + 5 < v380)
          continue;
      }
      goto LABEL_408;
    }
    v299 = v393 + v379;
    if (v393 + v379 >= v378)
      v299 = v378;
    v385 = v299;
    a6 = v402;
    v169 = v403;
    v211 = v404;
    v232 = v372;
    v272 = v393;
    v273 = v388;
    v157 = v390;
    result = 506832829;
LABEL_408:
    if (v169 > v385 + v365)
    {
LABEL_409:
      v300 = v169 + 15;
      goto LABEL_410;
    }
    v325 = *a8;
    if (v169 == v325)
    {
      v300 = 0;
      goto LABEL_440;
    }
    v341 = a8[1];
    if (v169 == v341)
    {
      v300 = 1;
    }
    else
    {
      v342 = v169 + 3 - v325;
      if (v342 > 6)
      {
        v345 = v169 + 3 - v341;
        if (v345 > 6)
        {
          if (v169 == a8[2])
          {
            v300 = 2;
          }
          else
          {
            if (v169 != a8[3])
              goto LABEL_409;
            v300 = 3;
          }
          goto LABEL_410;
        }
        v343 = 4 * v345;
        v344 = 266017486;
      }
      else
      {
        v343 = 4 * v342;
        v344 = 158663784;
      }
      v300 = (v344 >> v343) & 0xF;
    }
LABEL_410:
    if (v169 <= v385 + v365)
    {
      if (v300)
      {
        a8[3] = a8[2];
        v301 = *(int32x2_t *)a8;
        *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
        *a8 = v169;
        v302 = *(_DWORD *)(a7 + 108);
        if (v302 >= 5)
        {
          v303 = vdupq_n_s32(v169);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v303, (int32x4_t)xmmword_2368AF3A0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v303.i8, (int32x2_t)0x3FFFFFFFDLL);
          if (v302 >= 0xB)
          {
            v304 = vdupq_lane_s32(v301, 0);
            *(int32x4_t *)(a8 + 10) = vaddq_s32(v304, (int32x4_t)xmmword_2368AF3A0);
            *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v304.i8, (int32x2_t)0x3FFFFFFFDLL);
          }
        }
      }
    }
LABEL_440:
    *(_DWORD *)v367 = v157;
    *(_DWORD *)(v367 + 4) = v232 | (v211 << 25);
    v326 = *(unsigned int *)(a6 + 68);
    v327 = v326 + 16;
    if (v326 + 16 <= v300)
    {
      v329 = *(unsigned int *)(a6 + 64);
      v330 = v300 - v326 + (4 << v329) - 16;
      v331 = (__clz(v330) ^ 0x1F) - 1;
      v332 = ((v330 >> v331) & 1 | 2) << v331;
      v300 = ((v330 & ~(-1 << v329))
            + v327
            + ((((v330 >> v331) & 1 | (2 * (v331 - v329))) + 65534) << v329)) | ((v331 - v329) << 10);
      v328 = (v330 - v332) >> v329;
    }
    else
    {
      LODWORD(v328) = 0;
    }
    *(_WORD *)(v367 + 14) = v300;
    *(_DWORD *)(v367 + 8) = v328;
    if (v157 > 5)
    {
      if (v157 > 0x81)
      {
        if (v157 > 0x841)
        {
          if (v157 >> 1 >= 0xC21)
          {
            if (v157 < 0x5842)
              LOWORD(v333) = 22;
            else
              LOWORD(v333) = 23;
          }
          else
          {
            LOWORD(v333) = 21;
          }
        }
        else
        {
          v333 = (__clz(v157 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v334 = (__clz(v157 - 2) ^ 0x1F) - 1;
        v333 = ((v157 - 2) >> v334) + 2 * v334 + 2;
      }
    }
    else
    {
      LOWORD(v333) = v157;
    }
    v346 = v211 + (int)v232;
    if (v346 > 9)
    {
      if (v346 > 0x85)
      {
        if (v346 > 0x845)
          LOWORD(v347) = 23;
        else
          v347 = (__clz(v346 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v348 = v346 - 6;
        v349 = (__clz(v348) ^ 0x1F) - 1;
        v347 = (v348 >> v349) + 2 * v349 + 4;
      }
    }
    else
    {
      LOWORD(v347) = v211 + v232 - 2;
    }
    v350 = v347 & 7 | (8 * (v333 & 7));
    if ((v300 & 0x3FF) != 0 || (unsigned __int16)v333 > 7u || (unsigned __int16)v347 > 0xFu)
    {
      v352 = 3 * ((unsigned __int16)v333 >> 3) + ((unsigned __int16)(v347 & 0xFFF8) >> 3);
      v351 = ((((0x520D40u >> (2 * v352)) & 0xC0) + (v352 << 6)) | v350) + 64;
    }
    else
    {
      LOWORD(v351) = v350 | 0x40;
      if ((v347 & 0xFFF8) == 0)
        LOWORD(v351) = v350;
    }
    *(_WORD *)(v367 + 12) = v351;
    v353 = v364;
    *a12 += v157;
    v354 = v272 + 2;
    v292 = v272 + v232;
    if (v272 + v232 < v364)
      v353 = v272 + v232;
    if (v169 < v232 >> 2)
    {
      v355 = v292 - 4 * v169;
      if (v354 > v355)
        v355 = v272 + 2;
      if (v353 >= v355)
        v354 = v355;
      else
        v354 = v353;
    }
    v22 = v366 + 2 * v232 + v272;
    v23 = v367 + 16;
    if (v354 < v353)
    {
      v356 = *(_DWORD *)(a7 + 96);
      v357 = *(_DWORD *)(a7 + 100);
      v358 = *(_DWORD *)(a7 + 104);
      do
      {
        v359 = (506832829 * *(_DWORD *)(a3 + (v354 & a4))) >> v356;
        v360 = *(unsigned __int16 *)(v391 + 2 * v359);
        *(_DWORD *)(v273 + 4 * ((v359 << v358) + (unint64_t)(v357 & v360))) = v354;
        *(_WORD *)(v391 + 2 * v359) = v360 + 1;
        ++v354;
      }
      while (v353 != v354);
    }
    v14 = 0;
LABEL_493:
    v13 = v292;
  }
  while (v292 + 4 < v380);
LABEL_500:
  *a9 = v14 + v380 - v292;
  *a11 += (v23 - a10) >> 4;
  return result;
}

unint64_t sub_236787D60(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int32x4_t v18;
  const float *v19;
  int32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  int v96;
  int *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  BOOL v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  BOOL v166;
  uint64_t v167;
  unint64_t v168;
  BOOL v169;
  unint64_t v170;
  BOOL v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unint64_t v178;
  unint64_t v179;
  unsigned __int8 *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 *v194;
  unsigned int v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  int *v217;
  uint64_t v218;
  char *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  unint64_t v231;
  unint64_t v232;
  char v233;
  uint64_t v234;
  char *v235;
  int v236;
  BOOL v237;
  unint64_t v238;
  char *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int8 *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  unint64_t v251;
  char v252;
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  BOOL v260;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  unint64_t v266;
  unint64_t v267;
  char v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned __int8 *v273;
  unint64_t v274;
  unsigned __int8 *v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  int v283;
  int v284;
  int v285;
  unint64_t v286;
  unsigned int v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  unint64_t v293;
  uint64_t v294;
  char v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned __int8 *v300;
  unint64_t v301;
  unsigned __int8 *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unsigned int v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  int v310;
  int v311;
  int v312;
  unint64_t v313;
  unsigned int v314;
  unint64_t v315;
  int32x2_t v316;
  int v317;
  int32x4_t v318;
  int32x4_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  unint64_t v331;
  char v332;
  unsigned int v333;
  unint64_t v334;
  uint64_t v335;
  unsigned int v336;
  unint64_t v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  int v341;
  unint64_t v342;
  unint64_t v343;
  int v344;
  int v345;
  int v346;
  unint64_t v347;
  unsigned int v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v359;
  unint64_t v360;
  int v361;
  int v362;
  int v363;
  unsigned int v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  unint64_t v393;
  unint64_t v395;

  v12 = a3;
  v13 = *a9;
  v367 = *(_QWORD *)(a6 + 16);
  v368 = a2 + result;
  v350 = a2 + result - 7;
  if (result <= 7)
    v14 = a2;
  else
    v14 = a2 + result - 7;
  v15 = *(_DWORD *)(a6 + 8);
  v16 = 512;
  if (*(int *)(a6 + 4) < 9)
    v16 = 64;
  v354 = v16;
  v352 = v14;
  v353 = *(_QWORD *)(a6 + 104);
  v17 = *(_DWORD *)(a7 + 120);
  if (v17 >= 5)
  {
    v18 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v18, (int32x4_t)xmmword_2368AF3A0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v17 >= 0xB)
    {
      v19 = (const float *)(a8 + 1);
      v20 = (int32x4_t)vld1q_dup_f32(v19);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v20, (int32x4_t)xmmword_2368AF3A0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (result >= 9)
  {
    v21 = v16 + a2;
    v366 = (1 << v15) - 16;
    v357 = a5 + 256;
    v369 = *(_QWORD *)(a7 + 104);
    v370 = *(_QWORD *)(a7 + 144);
    v356 = v353 + 1;
    v349 = 4 * v16;
    v351 = a2 + result - 1;
    v355 = a10;
    v393 = a4;
    v391 = a6;
    v380 = *(_QWORD *)(a7 + 136);
    while (1)
    {
      if (a2 >= v366)
        v22 = v366;
      else
        v22 = a2;
      v23 = a2 + v367;
      if (a2 + v367 >= v366)
        v23 = v366;
      v387 = v23;
      v378 = v13;
      if (!*(_DWORD *)(a6 + 632))
      {
        v26 = 0;
        v371 = 0;
        goto LABEL_24;
      }
      if (!a2)
        break;
      v24 = *(unsigned __int8 *)(v12 + ((a2 - 1) & a4));
      if (a2 == 1)
        goto LABEL_22;
      v25 = *(unsigned __int8 *)(v12 + ((a2 - 2) & a4));
LABEL_23:
      v371 = v24;
      v26 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v357 + v25) | *(_BYTE *)(a5 + v24)) + 637);
LABEL_24:
      v384 = v21;
      v27 = v368 - a2;
      v28 = *(_QWORD *)(a6 + 8 * v26 + 704);
      v381 = a2;
      v29 = a2 & a4;
      v30 = *(int *)(a7 + 120);
      v395 = *(_QWORD *)(a6 + 80);
      v31 = (v368 - a2) >> 3;
      v373 = v26;
      if ((_DWORD)v30)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 2020;
        v37 = 2020;
        do
        {
          v38 = a8[v32];
          v39 = v381 - v38;
          v40 = v22 < v38 || v39 >= v381;
          v41 = v39 & a4;
          v42 = v33 + v29;
          v43 = v40 || v42 > a4;
          v44 = v41 + v33;
          v45 = v43 || v44 > a4;
          if (!v45 && *(unsigned __int8 *)(v12 + v42) == *(unsigned __int8 *)(v12 + v44))
          {
            v46 = v12 + v41;
            if (v27 < 8)
            {
              v51 = 0;
              v52 = (unsigned __int8 *)(v12 + v29);
LABEL_56:
              if ((v27 & 7) != 0)
              {
                v54 = v27 & 7 | v51;
                v55 = v27 & 7;
                while (*(unsigned __int8 *)(v46 + v51) == *v52)
                {
                  ++v52;
                  ++v51;
                  if (!--v55)
                  {
                    v51 = v54;
                    break;
                  }
                }
              }
            }
            else
            {
              v47 = 0;
              v48 = v31;
              while (1)
              {
                v49 = *(_QWORD *)(v12 + v29 + v47);
                v50 = *(_QWORD *)(v46 + v47);
                if (v49 != v50)
                  break;
                v47 += 8;
                if (!--v48)
                {
                  v51 = v27 & 0xFFFFFFFFFFFFFFF8;
                  v52 = (unsigned __int8 *)(v12 + v29 + (v27 & 0xFFFFFFFFFFFFFFF8));
                  goto LABEL_56;
                }
              }
              v51 = v47 + (__clz(__rbit64(v50 ^ v49)) >> 3);
            }
            if (v51 > 2 || v32 <= 1 && v51 == 2)
            {
              v53 = 135 * v51 + 1935;
              if (v36 < v53)
              {
                if (v32)
                  v53 -= ((0x1CA10u >> (v32 & 0xE)) & 0xE) + 39;
                if (v36 < v53)
                {
                  v35 = a8[v32];
                  v37 = v53;
                  v34 = v51;
                  v36 = v53;
                  v33 = v51;
                }
              }
            }
          }
          ++v32;
        }
        while (v32 != v30);
      }
      else
      {
        v35 = 0;
        v34 = 0;
        v33 = 0;
        v37 = 2020;
        v36 = 2020;
      }
      v56 = (unsigned __int8 *)(v12 + v29);
      v57 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v12 + v29) & v369)) >> *(_DWORD *)(a7 + 96);
      v58 = *(unsigned int *)(a7 + 112);
      v59 = v370 + 4 * ((_DWORD)v57 << *(_DWORD *)(a7 + 116));
      v60 = *(unsigned __int16 *)(v380 + 2 * v57);
      v365 = *(_QWORD *)(a7 + 88);
      v61 = v60 - v365;
      if (v60 < v365)
        v61 = 0;
      if (v61 < v60)
      {
        v62 = *(unsigned __int16 *)(v380 + 2 * v57);
        do
        {
          v63 = *(unsigned int *)(v59 + 4 * (--v62 & v58));
          v64 = v381 - v63;
          if (v381 - v63 > v22)
            break;
          if (v33 + v29 <= a4)
          {
            v65 = v63 & a4;
            if (v65 + v33 <= a4 && *(unsigned __int8 *)(a3 + v33 + v29) == *(unsigned __int8 *)(a3 + v65 + v33))
            {
              v66 = a3 + v65;
              if (v27 < 8)
              {
                v71 = 0;
                v72 = v56;
LABEL_82:
                if ((v27 & 7) != 0)
                {
                  v74 = v27 & 7 | v71;
                  v75 = v27 & 7;
                  while (*(unsigned __int8 *)(v66 + v71) == *v72)
                  {
                    ++v72;
                    ++v71;
                    if (!--v75)
                    {
                      v71 = v74;
                      break;
                    }
                  }
                }
              }
              else
              {
                v67 = 0;
                v68 = v31;
                while (1)
                {
                  v69 = *(_QWORD *)&v56[v67];
                  v70 = *(_QWORD *)(v66 + v67);
                  if (v69 != v70)
                    break;
                  v67 += 8;
                  if (!--v68)
                  {
                    v71 = v27 & 0xFFFFFFFFFFFFFFF8;
                    v72 = &v56[v27 & 0xFFFFFFFFFFFFFFF8];
                    goto LABEL_82;
                  }
                }
                v71 = v67 + (__clz(__rbit64(v70 ^ v69)) >> 3);
              }
              if (v71 >= 4)
              {
                v73 = __clz(v64) ^ 0x1F;
                if (v36 < 135 * v71 - 30 * v73 + 1920)
                {
                  v35 = v64;
                  v37 = 135 * v71 - 30 * v73 + 1920;
                  v34 = v71;
                  v36 = v37;
                  v33 = v71;
                }
              }
            }
          }
          a4 = v393;
          v12 = a3;
        }
        while (v62 > v61);
      }
      *(_DWORD *)(v59 + 4 * (v58 & v60)) = v381;
      *(_WORD *)(v380 + 2 * v57) = v60 + 1;
      if (v37 == 2020)
      {
        v76 = *(_QWORD *)(a7 + 128);
        v77 = *(_QWORD *)(v76 + 40);
        v78 = *(_QWORD *)(v76 + 48);
        if (v78 >= v77 >> 7)
        {
          v392 = 0;
          v289 = ((506832829 * *(_DWORD *)v56) >> 17) & 0x7FFE;
          v290 = *(_QWORD *)(v28 + 32);
          v291 = v356 + v387;
          v292 = 1;
          v293 = v34;
          v37 = 2020;
          v294 = v35;
          do
          {
            v295 = v292;
            *(_QWORD *)(v76 + 40) = ++v77;
            v296 = *(unsigned __int8 *)(v290 + v289);
            if (!*(_BYTE *)(v290 + v289) || v27 < v296)
              goto LABEL_416;
            v297 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v289);
            v298 = *(unsigned int *)(*(_QWORD *)v28 + 4 * v296 + 32);
            v299 = *(_QWORD *)(*(_QWORD *)v28 + 168);
            v300 = (unsigned __int8 *)(v299 + v298 + v297 * *(unsigned __int8 *)(v290 + v289));
            if (v296 < 8)
            {
              v34 = 0;
LABEL_421:
              v307 = v296 & 7;
              if ((v296 & 7) != 0)
              {
                v308 = v34 | v307;
                while (v56[v34] == *v300)
                {
                  ++v300;
                  ++v34;
                  if (!--v307)
                  {
                    v34 = v308;
                    break;
                  }
                }
              }
            }
            else
            {
              v301 = 0;
              v34 = v296 & 0xF8;
              v302 = (unsigned __int8 *)(v299
                                       + v297 * (unint64_t)*(unsigned __int8 *)(v290 + v289)
                                       + (*(_BYTE *)(v290 + v289) & 0xF8)
                                       + v298);
              while (1)
              {
                v303 = *(_QWORD *)&v300[v301];
                v304 = *(_QWORD *)&v56[v301];
                if (v303 != v304)
                  break;
                v301 += 8;
                if (v34 == v301)
                {
                  v300 = v302;
                  a4 = v393;
                  v12 = a3;
                  goto LABEL_421;
                }
              }
              v34 = v301 + (__clz(__rbit64(v304 ^ v303)) >> 3);
              a4 = v393;
              v12 = a3;
            }
            if (v34
              && v34 + *(unsigned int *)(v28 + 12) > v296
              && (v305 = v291
                       + v297
                       + ((((*(_QWORD *)(v28 + 16) >> (6 * (v296 - v34))) & 0x3FLL)
                         + 4 * (v296 - v34)) << *(_BYTE *)(*(_QWORD *)v28 + v296)),
                  v305 <= v395)
              && (v35 = v291
                      + v297
                      + ((((*(_QWORD *)(v28 + 16) >> (6 * (v296 - v34))) & 0x3FLL)
                        + 4 * (v296 - v34)) << *(_BYTE *)(*(_QWORD *)v28 + v296)),
                  v306 = __clz(v305) ^ 0x1F,
                  135 * v34 - 30 * v306 + 1920 >= v37))
            {
              v392 = v296 - v34;
              *(_QWORD *)(v76 + 48) = ++v78;
              v37 = 135 * v34 - 30 * v306 + 1920;
            }
            else
            {
LABEL_416:
              v35 = v294;
              v34 = v293;
            }
            v292 = 0;
            ++v289;
            v293 = v34;
            v294 = v35;
          }
          while ((v295 & 1) != 0);
        }
        else
        {
          v392 = 0;
          v37 = 2020;
        }
      }
      else
      {
        v392 = 0;
      }
      v79 = v35;
      a6 = v391;
      v390 = *(_QWORD *)(v391 + 96);
      v386 = *(_QWORD *)(v391 + 104);
      if (v390)
      {
        v80 = 0;
        v388 = *(_QWORD *)(v391 + 104) + v387;
        do
        {
          v81 = a6 + 8 * v80;
          v82 = *(_QWORD *)(v81 + 112);
          v83 = *(_DWORD *)(v82 + 16);
          v84 = *(_DWORD *)(v82 + 20);
          v85 = v82 + 24;
          v86 = v82 + 24 + 4 * (1 << v84);
          v87 = v86 + 2 * (1 << v83);
          v88 = (_QWORD *)(v87 + 4 * *(unsigned int *)(v82 + 4));
          if (*(_DWORD *)v82 != -558043680)
            v88 = (_QWORD *)*v88;
          v89 = 0;
          v90 = *(_QWORD *)(v81 + 368);
          v91 = v388 - v90;
          v92 = *(unsigned int *)(v82 + 8);
          v93 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v56 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v82 + 12)))) >> -(char)v83;
          v94 = v388 - v90 - v92;
          v95 = (0xFFFFFFFF >> -(char)v84) & v93;
          v96 = *(unsigned __int16 *)(v86 + 2 * v93);
          v97 = (int *)(v87 + 4 * (*(_DWORD *)(v85 + 4 * v95) + v96));
          v98 = (char *)v88 + v388 - v90;
          v99 = v34;
          v100 = v37;
          do
          {
            v101 = a8[v89];
            if (v94 < v101 && v91 >= v101)
            {
              v103 = v92 - (v91 - v101);
              if (v103 >= v27)
                v103 = v27;
              if (v103 < 8)
              {
                v105 = 0;
                v106 = v56;
LABEL_128:
                v114 = v103 & 7;
                if (v114)
                {
                  v115 = v105 | v114;
                  v116 = &v98[v105 - v101];
                  while (1)
                  {
                    v117 = *v116++;
                    if (v117 != *v106)
                      break;
                    ++v106;
                    ++v105;
                    if (!--v114)
                    {
                      v105 = v115;
                      break;
                    }
                  }
                }
              }
              else
              {
                v104 = 0;
                v105 = v103 & 0xFFFFFFFFFFFFFFF8;
                v106 = &v56[v103 & 0xFFFFFFFFFFFFFFF8];
                v107 = -(uint64_t)(v103 >> 3);
                while (1)
                {
                  v108 = *(_QWORD *)&v56[v104];
                  v109 = *(_QWORD *)((char *)v88 + v91 - v101 + v104);
                  if (v108 != v109)
                    break;
                  v104 += 8;
                  v40 = __CFADD__(v107++, 1);
                  if (v40)
                  {
                    a4 = v393;
                    v12 = a3;
                    goto LABEL_128;
                  }
                }
                v105 = v104 + (__clz(__rbit64(v109 ^ v108)) >> 3);
                a4 = v393;
                v12 = a3;
              }
              if (v105 >= 2)
              {
                v110 = 135 * v105 + 1935;
                if (v37 < v110)
                {
                  if (v89)
                    v110 -= ((0x1CA10u >> (v89 & 0xE)) & 0xE) + 39;
                  if (v105 <= v34)
                    v111 = v34;
                  else
                    v111 = v105;
                  v112 = v37 >= v110;
                  if (v37 < v110)
                  {
                    v79 = a8[v89];
                    v100 = v110;
                  }
                  v113 = v392;
                  if (v37 < v110)
                    v113 = 0;
                  v392 = v113;
                  if (v37 < v110)
                  {
                    v99 = v105;
                    v37 = v110;
                  }
                  if (!v112)
                    v34 = v111;
                }
              }
            }
            ++v89;
          }
          while (v89 != 4);
          if (v96 != 0xFFFF)
          {
            do
            {
              v119 = *v97++;
              v118 = v119;
              v120 = v119 & 0x7FFFFFFF;
              v121 = v91 - v120;
              if (v92 - v120 >= v27)
                v122 = v27;
              else
                v122 = v92 - v120;
              v123 = v34 + v29;
              v125 = v121 > v395 || v123 > a4 || v34 >= v122;
              if (!v125 && *(unsigned __int8 *)(v12 + v123) == *((unsigned __int8 *)v88 + v34 + v120))
              {
                v126 = (char *)v88 + v120;
                if (v122 < 8)
                {
                  v128 = 0;
                  v129 = v56;
LABEL_172:
                  v140 = v122 & 7;
                  if ((v122 & 7) != 0)
                  {
                    v141 = v128 | v140;
                    while (v126[v128] == *v129)
                    {
                      ++v129;
                      ++v128;
                      if (!--v140)
                      {
                        v128 = v141;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v127 = 0;
                  v128 = v122 & 0xFFFFFFFFFFFFFFF8;
                  v129 = &v56[v122 & 0xFFFFFFFFFFFFFFF8];
                  v130 = -(uint64_t)(v122 >> 3);
                  while (1)
                  {
                    v131 = *(_QWORD *)&v56[v127];
                    v132 = *(_QWORD *)&v126[v127];
                    if (v131 != v132)
                      break;
                    v127 += 8;
                    v40 = __CFADD__(v130++, 1);
                    if (v40)
                      goto LABEL_172;
                  }
                  v128 = v127 + (__clz(__rbit64(v132 ^ v131)) >> 3);
                }
                v133 = __clz(v121) ^ 0x1F;
                v134 = 135 * v128 - 30 * v133 + 1920;
                if (v37 < v134)
                {
                  v135 = 135 * v128 - 30 * v133 + 1920;
                }
                else
                {
                  v121 = v79;
                  v135 = v100;
                }
                v136 = v392;
                if (v37 < v134)
                  v137 = 0;
                else
                  v137 = v392;
                if (v37 < v134)
                  v138 = v128;
                else
                  v138 = v99;
                if (v37 < v134)
                {
                  v139 = v128;
                }
                else
                {
                  v134 = v37;
                  v139 = v34;
                }
                if (v128 >= 4)
                {
                  v79 = v121;
                  v100 = v135;
                  v136 = v137;
                }
                v392 = v136;
                if (v128 >= 4)
                {
                  v99 = v138;
                  v37 = v134;
                  v34 = v139;
                }
              }
            }
            while ((v118 & 0x80000000) == 0);
          }
          ++v80;
          v34 = v99;
          v142 = v100;
          v37 = v100;
          a6 = v391;
        }
        while (v80 != v390);
      }
      else
      {
        v142 = v37;
        v99 = v34;
      }
      if (v142 < 0x7E5)
      {
        v13 = v378 + 1;
        v281 = v381 + 1;
        v21 = v384;
        result = 0x1FE35A7BD3579BD3;
        if (v381 + 1 > v384)
        {
          if (v281 <= v384 + v349)
          {
            v309 = v381 + 9;
            if (v381 + 9 >= v350)
              v309 = v350;
            if (v281 < v309)
            {
              v310 = *(_DWORD *)(a7 + 96);
              v311 = *(_DWORD *)(a7 + 112);
              v312 = *(_DWORD *)(a7 + 116);
              do
              {
                v313 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v12 + (v281 & a4)) & v369)) >> v310;
                v314 = *(unsigned __int16 *)(v380 + 2 * v313);
                *(_WORD *)(v380 + 2 * v313) = v314 + 1;
                *(_DWORD *)(v370 + 4 * (((_DWORD)v313 << v312) + (unint64_t)(v311 & v314))) = v281;
                v13 += 2;
                v281 += 2;
              }
              while (v281 < v309);
            }
          }
          else
          {
            v282 = v381 + 17;
            if (v381 + 17 >= v350)
              v282 = v350;
            if (v281 < v282)
            {
              v283 = *(_DWORD *)(a7 + 96);
              v284 = *(_DWORD *)(a7 + 112);
              v285 = *(_DWORD *)(a7 + 116);
              do
              {
                v286 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v12 + (v281 & a4)) & v369)) >> v283;
                v287 = *(unsigned __int16 *)(v380 + 2 * v286);
                *(_WORD *)(v380 + 2 * v286) = v287 + 1;
                *(_DWORD *)(v370 + 4 * (((_DWORD)v286 << v285) + (unint64_t)(v284 & v287))) = v281;
                v13 += 4;
                v281 += 4;
              }
              while (v281 < v282);
            }
          }
        }
        goto LABEL_488;
      }
      v143 = 0;
      v144 = *(_DWORD *)(a7 + 120);
      v363 = *(_DWORD *)(a7 + 96);
      v364 = v144;
      if (v144 <= 1)
        v144 = 1;
      v361 = *(_DWORD *)(a7 + 112);
      v362 = *(_DWORD *)(a7 + 116);
      v379 = (int)v144;
      v145 = v381;
      v146 = v351 - v381;
      v147 = v367 + 1 + v381;
      v148 = v79;
      while (1)
      {
        v377 = v142;
        if (v147 >= v366)
          v149 = v366;
        else
          v149 = v147;
        v389 = v149;
        --v27;
        v359 = v99;
        v150 = v99 - 1;
        if (v99 - 1 >= v27)
          v150 = v27;
        if (*(int *)(a6 + 4) >= 5)
          v151 = 0;
        else
          v151 = v150;
        v152 = v145 + 1;
        if (v145 + 1 < v366)
          v153 = v145 + 1;
        else
          v153 = v366;
        v154 = v152 + v367;
        if (v152 + v367 >= v366)
          v154 = v366;
        v374 = v147;
        v375 = v154;
        v376 = v143;
        if (*(_DWORD *)(a6 + 632))
        {
          v155 = *(unsigned __int8 *)(a6
                                    + (*(_BYTE *)(v357 + v371) | *(_BYTE *)(a5
                                                                                           + *(unsigned __int8 *)(v12 + (v145 & a4))))
                                    + 637);
          v371 = *(unsigned __int8 *)(v12 + (v145 & a4));
        }
        else
        {
          v155 = v373;
        }
        v360 = v148;
        v382 = v145;
        v156 = *(_QWORD *)(a6 + 8 * v155 + 704);
        v157 = v152 & a4;
        v158 = v379;
        v373 = v155;
        if (v364)
        {
          v159 = 0;
          result = 0;
          v160 = 0;
          v161 = v12 + v157;
          v162 = 2020;
          v163 = 2020;
          do
          {
            v164 = a8[v159];
            v165 = v152 - v164;
            v166 = v153 < v164 || v165 >= v152;
            v167 = v165 & a4;
            v168 = v151 + v157;
            v169 = v166 || v168 > a4;
            v170 = v167 + v151;
            v171 = v169 || v170 > a4;
            if (!v171 && *(unsigned __int8 *)(v12 + v168) == *(unsigned __int8 *)(v12 + v170))
            {
              v172 = v12 + v167;
              if (v27 < 8)
              {
                v173 = 0;
                v177 = (unsigned __int8 *)(v12 + v157);
LABEL_232:
                if ((v27 & 7) != 0)
                {
                  v179 = v27 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v172 + v173) != *v177)
                      break;
                    ++v177;
                    ++v173;
                    --v179;
                  }
                  while (v179);
                }
              }
              else
              {
                v173 = 0;
                v174 = v27 >> 3;
                while (1)
                {
                  v175 = *(_QWORD *)(v161 + v173);
                  v176 = *(_QWORD *)(v172 + v173);
                  if (v175 != v176)
                    break;
                  v173 += 8;
                  if (!--v174)
                  {
                    v177 = (unsigned __int8 *)(v161 + v173);
                    goto LABEL_232;
                  }
                }
                v173 += __clz(__rbit64(v176 ^ v175)) >> 3;
              }
              v158 = v379;
              if (v173 > 2 || v159 <= 1 && v173 == 2)
              {
                v178 = 135 * v173 + 1935;
                if (v162 < v178)
                {
                  v158 = v379;
                  if (v159)
                    v178 -= ((0x1CA10u >> (v159 & 0xE)) & 0xE) + 39;
                  if (v162 < v178)
                  {
                    v160 = v173;
                    result = a8[v159];
                    v163 = v178;
                    v162 = v178;
                    v151 = v173;
                  }
                }
              }
            }
            ++v159;
          }
          while (v159 != v158);
        }
        else
        {
          v160 = 0;
          result = 0;
          v163 = 2020;
          v162 = 2020;
        }
        v383 = v152;
        v180 = (unsigned __int8 *)(v12 + v157);
        v181 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v12 + v157) & v369)) >> v363;
        v182 = v370 + 4 * ((_DWORD)v181 << v362);
        v183 = *(unsigned __int16 *)(v380 + 2 * v181);
        v184 = v183 - v365;
        if (v183 < v365)
          v184 = 0;
        if (v184 < v183)
        {
          v185 = *(unsigned __int16 *)(v380 + 2 * v181);
          do
          {
            v186 = *(unsigned int *)(v182 + 4 * (--v185 & *(_DWORD *)(a7 + 112)));
            v187 = v383 - v186;
            if (v383 - v186 > v153)
              break;
            if (v151 + v157 <= a4)
            {
              v188 = v186 & a4;
              if (v188 + v151 <= a4
                && *(unsigned __int8 *)(v12 + v151 + v157) == *(unsigned __int8 *)(v12 + v188 + v151))
              {
                v189 = v12 + v188;
                if (v27 < 8)
                {
                  v190 = 0;
                  v194 = v180;
LABEL_259:
                  if ((v27 & 7) != 0)
                  {
                    v196 = v27 & 7;
                    do
                    {
                      if (*(unsigned __int8 *)(v189 + v190) != *v194)
                        break;
                      ++v194;
                      ++v190;
                      --v196;
                    }
                    while (v196);
                  }
                }
                else
                {
                  v190 = 0;
                  v191 = v27 >> 3;
                  while (1)
                  {
                    v192 = *(_QWORD *)&v180[v190];
                    v193 = *(_QWORD *)(v189 + v190);
                    if (v192 != v193)
                      break;
                    v190 += 8;
                    if (!--v191)
                    {
                      v194 = &v180[v190];
                      goto LABEL_259;
                    }
                  }
                  v190 += __clz(__rbit64(v193 ^ v192)) >> 3;
                }
                v12 = a3;
                if (v190 < 4)
                {
                  a4 = v393;
                }
                else
                {
                  v195 = __clz(v187) ^ 0x1F;
                  a4 = v393;
                  if (v162 < 135 * v190 - 30 * v195 + 1920)
                  {
                    v160 = v190;
                    result = v187;
                    v163 = 135 * v190 - 30 * v195 + 1920;
                    v162 = v163;
                    v151 = v190;
                  }
                }
              }
            }
          }
          while (v185 > v184);
        }
        *(_DWORD *)(v182 + 4 * (v361 & v183)) = v383;
        *(_WORD *)(v380 + 2 * v181) = v183 + 1;
        if (v163 == 2020)
        {
          v197 = *(_QWORD *)(a7 + 128);
          v199 = *(_QWORD *)(v197 + 40);
          v198 = *(_QWORD *)(v197 + 48);
          if (v198 >= v199 >> 7)
          {
            v200 = 0;
            v263 = ((506832829 * *(_DWORD *)v180) >> 17) & 0x7FFE;
            v264 = *(_QWORD *)(v156 + 32);
            v265 = 1;
            v163 = 2020;
            v266 = result;
            v267 = v160;
            do
            {
              v268 = v265;
              *(_QWORD *)(v197 + 40) = ++v199;
              v269 = *(unsigned __int8 *)(v264 + v263);
              if (!*(_BYTE *)(v264 + v263) || v27 < v269)
                goto LABEL_372;
              v270 = *(unsigned __int16 *)(*(_QWORD *)(v156 + 24) + 2 * v263);
              v271 = *(unsigned int *)(*(_QWORD *)v156 + 4 * v269 + 32);
              v272 = *(_QWORD *)(*(_QWORD *)v156 + 168);
              v273 = (unsigned __int8 *)(v272 + v271 + v270 * *(unsigned __int8 *)(v264 + v263));
              if (v269 < 8)
              {
                v160 = 0;
LABEL_387:
                v279 = v269 & 7;
                if ((v269 & 7) != 0)
                {
                  v280 = v160 | v279;
                  while (v180[v160] == *v273)
                  {
                    ++v273;
                    ++v160;
                    if (!--v279)
                    {
                      v160 = v280;
                      break;
                    }
                  }
                }
              }
              else
              {
                v274 = 0;
                v160 = v269 & 0xF8;
                v275 = (unsigned __int8 *)(v272
                                         + v270 * (unint64_t)*(unsigned __int8 *)(v264 + v263)
                                         + (*(_BYTE *)(v264 + v263) & 0xF8)
                                         + v271);
                while (1)
                {
                  v276 = *(_QWORD *)&v273[v274];
                  v277 = *(_QWORD *)&v180[v274];
                  if (v276 != v277)
                    break;
                  v274 += 8;
                  if (v160 == v274)
                  {
                    v273 = v275;
                    goto LABEL_387;
                  }
                }
                v160 = v274 + (__clz(__rbit64(v277 ^ v276)) >> 3);
              }
              a4 = v393;
              v12 = a3;
              if (v160
                && v160 + *(unsigned int *)(v156 + 12) > v269
                && (result = v356
                           + v375
                           + v270
                           + ((((*(_QWORD *)(v156 + 16) >> (6 * (v269 - v160))) & 0x3FLL)
                             + 4 * (v269 - v160)) << *(_BYTE *)(*(_QWORD *)v156 + v269)),
                    result <= v395)
                && (v278 = __clz(result) ^ 0x1F, 135 * v160 - 30 * v278 + 1920 >= v163))
              {
                v200 = v269 - v160;
                *(_QWORD *)(v197 + 48) = ++v198;
                v163 = 135 * v160 - 30 * v278 + 1920;
              }
              else
              {
LABEL_372:
                v160 = v267;
                result = v266;
              }
              v265 = 0;
              ++v263;
              v266 = result;
              v267 = v160;
            }
            while ((v268 & 1) != 0);
          }
          else
          {
            v200 = 0;
            v163 = 2020;
          }
        }
        else
        {
          v200 = 0;
        }
        if (v390)
        {
          v201 = 0;
          v385 = v375 + v386;
          do
          {
            v202 = v391 + 8 * v201;
            v203 = *(_QWORD *)(v202 + 112);
            v205 = *(_DWORD *)(v203 + 16);
            v204 = *(_DWORD *)(v203 + 20);
            v206 = v203 + 24;
            v207 = v203 + 24 + 4 * (1 << v204);
            v208 = v207 + 2 * (1 << v205);
            v209 = (_QWORD *)(v208 + 4 * *(unsigned int *)(v203 + 4));
            if (*(_DWORD *)v203 != -558043680)
              v209 = (_QWORD *)*v209;
            v210 = 0;
            v211 = *(_QWORD *)(v202 + 368);
            v212 = v385 - v211;
            v213 = *(unsigned int *)(v203 + 8);
            v214 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v180 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v203 + 12)))) >> -(char)v205;
            v215 = v385 - v211 - v213;
            v216 = *(unsigned __int16 *)(v207 + 2 * v214);
            v217 = (int *)(v208
                         + 4
                         * (*(_DWORD *)(v206 + 4 * ((0xFFFFFFFF >> -(char)v204) & v214))
                                        + v216));
            v218 = -v386 - v389 + v211 + v213;
            v219 = (char *)v209 + v386 + v389 - v211;
            v220 = v163;
            v221 = v160;
            do
            {
              v222 = a8[v210];
              if (v215 < v222 && v212 >= v222)
              {
                if (v213 + v222 - v212 >= v27)
                  v224 = v27;
                else
                  v224 = v213 + v222 - v212;
                if (v224 < 8)
                {
                  v225 = 0;
                  v230 = v180;
LABEL_302:
                  if ((v224 & 7) != 0)
                  {
                    v233 = v218 + v222;
                    if (v146 < v218 + v222)
                      v233 = v146;
                    v234 = -(uint64_t)(v233 & 7);
                    v235 = &v219[v225 - v222];
                    do
                    {
                      v236 = *v235++;
                      if (v236 != *v230)
                        break;
                      ++v230;
                      ++v225;
                      v40 = __CFADD__(v234++, 1);
                    }
                    while (!v40);
                  }
                }
                else
                {
                  v225 = 0;
                  v226 = v218 + v222;
                  if (v146 < v218 + v222)
                    v226 = v146;
                  v227 = -(uint64_t)(v226 >> 3);
                  while (1)
                  {
                    v228 = *(_QWORD *)&v180[v225];
                    v229 = *(_QWORD *)&v219[v225 - v222];
                    if (v228 != v229)
                      break;
                    v225 += 8;
                    v40 = __CFADD__(v227++, 1);
                    if (v40)
                    {
                      v230 = &v180[v225];
                      goto LABEL_302;
                    }
                  }
                  v225 += __clz(__rbit64(v229 ^ v228)) >> 3;
                }
                if (v225 >= 2)
                {
                  v231 = 135 * v225 + 1935;
                  if (v163 < v231)
                  {
                    if (v210)
                      v231 -= ((0x1CA10u >> (v210 & 0xE)) & 0xE) + 39;
                    if (v225 <= v160)
                      v232 = v160;
                    else
                      v232 = v225;
                    if (v163 < v231)
                    {
                      v221 = v225;
                      result = a8[v210];
                      v220 = v231;
                      v200 = 0;
                      v163 = v231;
                      v160 = v232;
                    }
                  }
                }
              }
              ++v210;
            }
            while (v210 != 4);
            v237 = v216 == 0xFFFF;
            a4 = v393;
            v12 = a3;
            v238 = v395;
            if (!v237)
            {
              do
              {
                while (1)
                {
                  v255 = *v217++;
                  v254 = v255;
                  v256 = v255 & 0x7FFFFFFF;
                  v248 = v212 - v256;
                  v257 = v213 - v256;
                  v258 = v213 - v256 >= v27 ? v27 : v213 - v256;
                  v259 = v160 + v157;
                  v260 = v248 > v238 || v259 > v393;
                  if (!v260 && v160 < v258)
                    break;
                  if (v254 < 0)
                    goto LABEL_362;
                }
                if (*(unsigned __int8 *)(a3 + v259) == *((unsigned __int8 *)v209 + v160 + v256))
                {
                  v239 = (char *)v209 + v256;
                  if (v258 < 8)
                  {
                    v240 = 0;
                    v245 = v180;
LABEL_341:
                    if ((v258 & 7) != 0)
                    {
                      if (v146 >= v257)
                        v252 = v257;
                      else
                        v252 = v146;
                      v253 = -(uint64_t)(v252 & 7);
                      do
                      {
                        if (v239[v240] != *v245)
                          break;
                        ++v245;
                        ++v240;
                        v40 = __CFADD__(v253++, 1);
                      }
                      while (!v40);
                    }
                  }
                  else
                  {
                    v240 = 0;
                    if (v146 >= v257)
                      v241 = v213 - v256;
                    else
                      v241 = v146;
                    v242 = -(uint64_t)(v241 >> 3);
                    while (1)
                    {
                      v243 = *(_QWORD *)&v180[v240];
                      v244 = *(_QWORD *)&v239[v240];
                      if (v243 != v244)
                        break;
                      v240 += 8;
                      v40 = __CFADD__(v242++, 1);
                      if (v40)
                      {
                        v245 = &v180[v240];
                        goto LABEL_341;
                      }
                    }
                    v240 += __clz(__rbit64(v244 ^ v243)) >> 3;
                  }
                  v246 = 135 * v240 - 30 * (__clz(v248) ^ 0x1F) + 1920;
                  if (v163 < v246)
                    v247 = v240;
                  else
                    v247 = v221;
                  if (v163 < v246)
                  {
                    v249 = v246;
                  }
                  else
                  {
                    v248 = result;
                    v249 = v220;
                  }
                  if (v163 < v246)
                    v250 = 0;
                  else
                    v250 = v200;
                  if (v163 < v246)
                  {
                    v251 = v240;
                  }
                  else
                  {
                    v246 = v163;
                    v251 = v160;
                  }
                  if (v240 >= 4)
                  {
                    v221 = v247;
                    result = v248;
                    v220 = v249;
                    v200 = v250;
                    v163 = v246;
                    v160 = v251;
                  }
                }
                v238 = v395;
              }
              while ((v254 & 0x80000000) == 0);
            }
LABEL_362:
            ++v201;
            v163 = v220;
            v160 = v221;
          }
          while (v201 != v390);
        }
        else
        {
          v221 = v160;
          v220 = v163;
        }
        if (v220 < v377 + 175)
          break;
        ++v378;
        a6 = v391;
        if (v376 > 2)
        {
          v262 = v383;
          goto LABEL_433;
        }
        v143 = v376 + 1;
        --v146;
        v147 = v374 + 1;
        v148 = result;
        v142 = v220;
        v392 = v200;
        v99 = v221;
        v262 = v383;
        v145 = v383;
        if (v382 + 9 >= v368)
          goto LABEL_433;
      }
      v288 = v382 + v367;
      if (v382 + v367 >= v366)
        v288 = v366;
      v375 = v288;
      v221 = v359;
      result = v360;
      v200 = v392;
      v262 = v382;
      a6 = v391;
LABEL_433:
      if (result > v375 + v353)
        goto LABEL_434;
      v320 = *a8;
      if (result != v320)
      {
        v330 = a8[1];
        if (result == v330)
        {
          v315 = 1;
          goto LABEL_435;
        }
        v331 = result + 3 - v320;
        if (v331 > 6)
        {
          v334 = result + 3 - v330;
          if (v334 > 6)
          {
            if (result == a8[2])
            {
              v315 = 2;
            }
            else if (result == a8[3])
            {
              v315 = 3;
            }
            else
            {
LABEL_434:
              v315 = result + 15;
            }
LABEL_435:
            if (result <= v375 + v353)
            {
              if (v315)
              {
                a8[3] = a8[2];
                v316 = *(int32x2_t *)a8;
                *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
                *a8 = result;
                v317 = *(_DWORD *)(a7 + 120);
                if (v317 >= 5)
                {
                  v318 = vdupq_n_s32(result);
                  *((int32x4_t *)a8 + 1) = vaddq_s32(v318, (int32x4_t)xmmword_2368AF3A0);
                  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v318.i8, (int32x2_t)0x3FFFFFFFDLL);
                  if (v317 >= 0xB)
                  {
                    v319 = vdupq_lane_s32(v316, 0);
                    *(int32x4_t *)(a8 + 10) = vaddq_s32(v319, (int32x4_t)xmmword_2368AF3A0);
                    *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v319.i8, (int32x2_t)0x3FFFFFFFDLL);
                  }
                }
              }
            }
            goto LABEL_442;
          }
          v332 = 4 * v334;
          v333 = 266017486;
        }
        else
        {
          v332 = 4 * v331;
          v333 = 158663784;
        }
        v315 = (v333 >> v332) & 0xF;
        goto LABEL_435;
      }
      v315 = 0;
LABEL_442:
      *(_DWORD *)v355 = v378;
      *(_DWORD *)(v355 + 4) = v221 | (v200 << 25);
      v321 = *(unsigned int *)(a6 + 68);
      v322 = v321 + 16;
      if (v321 + 16 <= v315)
      {
        v324 = *(unsigned int *)(a6 + 64);
        v325 = v315 - v321 + (4 << v324) - 16;
        v326 = (__clz(v325) ^ 0x1F) - 1;
        v327 = ((v325 >> v326) & 1 | 2) << v326;
        v315 = ((v325 & ~(-1 << v324))
              + v322
              + ((((v325 >> v326) & 1 | (2 * (v326 - v324))) + 65534) << v324)) | ((v326 - v324) << 10);
        v323 = (v325 - v327) >> v324;
      }
      else
      {
        LODWORD(v323) = 0;
      }
      *(_WORD *)(v355 + 14) = v315;
      *(_DWORD *)(v355 + 8) = v323;
      if (v378 > 5)
      {
        if (v378 > 0x81)
        {
          if (v378 > 0x841)
          {
            if (v378 >> 1 >= 0xC21)
            {
              if (v378 < 0x5842)
                LOWORD(v328) = 22;
              else
                LOWORD(v328) = 23;
            }
            else
            {
              LOWORD(v328) = 21;
            }
          }
          else
          {
            v328 = (__clz(v378 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v329 = (__clz(v378 - 2) ^ 0x1F) - 1;
          v328 = ((v378 - 2) >> v329) + 2 * v329 + 2;
        }
      }
      else
      {
        LOWORD(v328) = v378;
      }
      v335 = v200 + (int)v221;
      if (v335 > 9)
      {
        if (v335 > 0x85)
        {
          if (v335 > 0x845)
            LOWORD(v336) = 23;
          else
            v336 = (__clz(v335 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v337 = v335 - 6;
          v338 = (__clz(v337) ^ 0x1F) - 1;
          v336 = (v337 >> v338) + 2 * v338 + 4;
        }
      }
      else
      {
        LOWORD(v336) = v200 + v221 - 2;
      }
      v339 = v336 & 7 | (8 * (v328 & 7));
      if ((v315 & 0x3FF) != 0 || (unsigned __int16)v328 > 7u || (unsigned __int16)v336 > 0xFu)
      {
        v341 = 3 * ((unsigned __int16)v328 >> 3) + ((unsigned __int16)(v336 & 0xFFF8) >> 3);
        v340 = ((((0x520D40u >> (2 * v341)) & 0xC0) + (v341 << 6)) | v339) + 64;
      }
      else
      {
        LOWORD(v340) = v339 | 0x40;
        if ((v336 & 0xFFF8) == 0)
          LOWORD(v340) = v336 & 7 | (8 * (v328 & 7));
      }
      *(_WORD *)(v355 + 12) = v340;
      v342 = v352;
      *a12 += v378;
      v343 = v262 + 2;
      v281 = v262 + v221;
      if (v262 + v221 < v352)
        v342 = v262 + v221;
      if (result < v221 >> 2)
      {
        if (v343 <= v281 - 4 * result)
          v343 = v281 - 4 * result;
        if (v342 < v343)
          v343 = v342;
      }
      v21 = v354 + 2 * v221 + v262;
      v355 += 16;
      if (v343 < v342)
      {
        v344 = *(_DWORD *)(a7 + 96);
        v345 = *(_DWORD *)(a7 + 112);
        v346 = *(_DWORD *)(a7 + 116);
        result = 0x1FE35A7BD3579BD3;
        do
        {
          v347 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v12 + (v343 & a4)) & v369)) >> v344;
          v348 = *(unsigned __int16 *)(v380 + 2 * v347);
          *(_WORD *)(v380 + 2 * v347) = v348 + 1;
          *(_DWORD *)(v370 + 4 * (((_DWORD)v347 << v346) + (unint64_t)(v345 & v348))) = v343++;
        }
        while (v342 != v343);
      }
      v13 = 0;
LABEL_488:
      a2 = v281;
      if (v281 + 8 >= v368)
        goto LABEL_495;
    }
    v24 = 0;
LABEL_22:
    v25 = 0;
    goto LABEL_23;
  }
  v355 = a10;
  v281 = a2;
LABEL_495:
  *a9 = v13 + v368 - v281;
  *a11 += (v355 - a10) >> 4;
  return result;
}

unint64_t sub_23678978C(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int *a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  __int16 *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  int *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  BOOL v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unsigned __int16 *v208;
  unint64_t v209;
  __int16 v210;
  __int16 *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  int *v232;
  uint64_t v233;
  char *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int8 *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  char v249;
  uint64_t v250;
  char *v251;
  int v252;
  BOOL v253;
  char *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  unint64_t v266;
  char v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  BOOL v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  unint64_t v281;
  unint64_t v282;
  char v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned __int16 v301;
  unsigned int v302;
  unint64_t v303;
  _WORD *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  unint64_t v309;
  unint64_t v310;
  char v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unsigned __int8 *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  unint64_t v329;
  _WORD *v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  unint64_t v343;
  char v344;
  unsigned int v345;
  unint64_t v346;
  uint64_t v347;
  unsigned int v348;
  unint64_t v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  int v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int *v397;
  unint64_t v398;
  int v399;
  unint64_t v400;
  uint64_t v402;
  uint64_t v403;

  v14 = a10;
  v15 = *a9;
  v16 = a2 + result;
  v17 = a2 + result - 3;
  v362 = v17;
  if (result <= 3)
    v17 = a2;
  v367 = v17;
  v18 = 512;
  if (a6[1] < 9)
    v18 = 64;
  if (result >= 5)
  {
    v376 = (1 << a6[2]) - 16;
    v366 = v18;
    v19 = v18 + a2;
    v365 = *((_QWORD *)a6 + 13);
    v369 = v365 + 1;
    v370 = a5 + 256;
    v361 = v16 - 4;
    v364 = v16 - 1;
    v374 = a2 + result;
    v375 = *((_QWORD *)a6 + 2);
    v363 = 4 * v18;
    v20 = a10;
    v400 = a4;
    v385 = a7;
    v397 = a6;
    v371 = a5;
    v402 = a3;
    while (1)
    {
      v21 = a2 >= v376 ? v376 : a2;
      v22 = a2 + v375 >= v376 ? v376 : a2 + v375;
      v392 = v19;
      v393 = v22;
      v368 = v20;
      v384 = v15;
      if (a6[158])
        break;
      v25 = 0;
      v377 = 0;
LABEL_21:
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = v16 - a2;
      v378 = v25;
      v31 = *(_QWORD *)&a6[2 * v25 + 176];
      v32 = *((_QWORD *)a6 + 10);
      v34 = *(_QWORD *)(a7 + 96);
      v33 = *(_QWORD *)(a7 + 104);
      v35 = v34 + 196608;
      v386 = a2;
      v36 = a2 & a4;
      v37 = (unsigned __int8 *)(a3 + (a2 & a4));
      v38 = (506832829 * *(_DWORD *)v37) >> 17;
      v39 = (v16 - a2) >> 3;
      v40 = (v16 - a2) & 7;
      v41 = (v16 - a2) & 0xFFFFFFFFFFFFFFF8;
      v42 = 2020;
      v43 = 2020;
      do
      {
        v44 = a8[v26];
        v45 = v386 - v44;
        if (!v26 || *(unsigned __int8 *)(v35 + (unsigned __int16)(v386 - v44)) == v38)
        {
          v46 = v21 < v44 || v45 >= v386;
          if (!v46)
          {
            v47 = v402 + (v45 & a4);
            if (v30 < 8)
            {
              v52 = 0;
              v53 = v37;
LABEL_43:
              if (v40)
              {
                v56 = v40 | v52;
                v57 = v40;
                while (*(unsigned __int8 *)(v47 + v52) == *v53)
                {
                  ++v53;
                  ++v52;
                  if (!--v40)
                  {
                    v52 = v56;
                    break;
                  }
                }
                v40 = v57;
              }
            }
            else
            {
              v48 = 0;
              v49 = v39;
              while (1)
              {
                v50 = *(_QWORD *)&v37[v48];
                v51 = *(_QWORD *)(v47 + v48);
                if (v50 != v51)
                  break;
                v48 += 8;
                if (!--v49)
                {
                  v52 = v41;
                  v53 = &v37[v41];
                  goto LABEL_43;
                }
              }
              v52 = v48 + (__clz(__rbit64(v51 ^ v50)) >> 3);
            }
            if (v52 >= 2)
            {
              v54 = 135 * v52 + 1935;
              if (v42 < v54)
              {
                v55 = v54 - (((0x1CA10u >> (v26 & 0xE)) & 0xE) + 39);
                if (!v26)
                  v55 = 135 * v52 + 1935;
                if (v42 < v55)
                {
                  v29 = a8[v26];
                  v43 = v55;
                  v28 = v52;
                  v42 = v55;
                  v27 = v52;
                }
              }
            }
          }
        }
        ++v26;
      }
      while (v26 != 4);
      v58 = v34 + 0x20000;
      v59 = *(_QWORD *)(v385 + 88);
      v60 = *(unsigned int *)(v34 + 4 * v38);
      v61 = v386 - v60;
      if (v59)
      {
        v403 = v40;
        v62 = 0;
        v63 = *(unsigned __int16 *)(v58 + 2 * v38);
        v64 = v386 - v60;
        do
        {
          v62 += v64;
          if (v62 > v21)
            break;
          if (v27 + v36 <= a4)
          {
            v65 = (v386 - v62) & a4;
            if (v65 + v27 > a4)
              goto LABEL_78;
            v66 = v29;
            if (*(unsigned __int8 *)(v402 + v27 + v36) == *(unsigned __int8 *)(v402 + v65 + v27))
            {
              v67 = v402 + v65;
              if (v30 < 8)
              {
                v72 = 0;
                v73 = v37;
LABEL_82:
                v80 = v403;
                if (v403)
                {
                  v398 = v403 | v72;
                  while (*(unsigned __int8 *)(v67 + v72) == *v73)
                  {
                    ++v73;
                    ++v72;
                    if (!--v80)
                    {
                      v72 = v398;
                      break;
                    }
                  }
                }
              }
              else
              {
                v68 = 0;
                v69 = v39;
                while (1)
                {
                  v70 = *(_QWORD *)&v37[v68];
                  v71 = *(_QWORD *)(v67 + v68);
                  if (v70 != v71)
                    break;
                  v68 += 8;
                  if (!--v69)
                  {
                    v72 = v41;
                    v73 = &v37[v41];
                    goto LABEL_82;
                  }
                }
                v72 = v68 + (__clz(__rbit64(v71 ^ v70)) >> 3);
              }
              v74 = 135 * v72 - 30 * (__clz(v62) ^ 0x1F) + 1920;
              if (v42 < v74)
                v75 = v62;
              else
                v75 = v29;
              if (v42 < v74)
                v76 = v74;
              else
                v76 = v43;
              if (v42 < v74)
                v77 = v72;
              else
                v77 = v28;
              if (v42 < v74)
              {
                v78 = v72;
              }
              else
              {
                v74 = v42;
                v78 = v27;
              }
              if (v72 >= 4)
              {
                v66 = v75;
                v43 = v76;
              }
              v29 = v66;
              if (v72 >= 4)
              {
                v28 = v77;
                v42 = v74;
                v27 = v78;
              }
LABEL_78:
              a4 = v400;
              goto LABEL_79;
            }
            a4 = v400;
          }
LABEL_79:
          v79 = (unsigned __int16 *)(v33 + 4 * v63);
          v63 = v79[1];
          v64 = *v79;
          --v59;
        }
        while (v59);
      }
      v81 = *(unsigned __int16 *)(v385 + 80);
      *(_WORD *)(v385 + 80) = v81 + 1;
      *(_BYTE *)(v35 + (unsigned __int16)v386) = v38;
      v82 = -1;
      if (v61 < 0xFFFF)
        v82 = v61;
      v83 = (__int16 *)(v33 + 4 * v81);
      *v83 = v82;
      v83[1] = *(_WORD *)(v58 + 2 * v38);
      *(_DWORD *)(v34 + 4 * v38) = v386;
      *(_WORD *)(v58 + 2 * v38) = v81;
      if (v43 == 2020)
      {
        v84 = *(_QWORD *)(v385 + 112);
        v86 = *(_QWORD *)(v84 + 40);
        v85 = *(_QWORD *)(v84 + 48);
        a3 = v402;
        if (v85 >= v86 >> 7)
        {
          v399 = 0;
          v306 = ((506832829 * *(_DWORD *)v37) >> 17) & 0x7FFE;
          v307 = *(_QWORD *)(v31 + 32);
          v308 = 1;
          v309 = v28;
          v43 = 2020;
          v310 = v29;
          do
          {
            v311 = v308;
            *(_QWORD *)(v84 + 40) = ++v86;
            v312 = *(unsigned __int8 *)(v307 + v306);
            if (!*(_BYTE *)(v307 + v306) || v30 < v312)
              goto LABEL_423;
            v313 = *(unsigned __int16 *)(*(_QWORD *)(v31 + 24) + 2 * v306);
            v314 = *(unsigned int *)(*(_QWORD *)v31 + 4 * v312 + 32);
            v315 = *(_QWORD *)(*(_QWORD *)v31 + 168);
            v316 = (unsigned __int8 *)(v315 + v314 + v313 * *(unsigned __int8 *)(v307 + v306));
            if (v312 < 8)
            {
              v28 = 0;
LABEL_428:
              v322 = v312 & 7;
              if ((v312 & 7) != 0)
              {
                v323 = v28 | v322;
                while (v37[v28] == *v316)
                {
                  ++v316;
                  ++v28;
                  if (!--v322)
                  {
                    v28 = v323;
                    break;
                  }
                }
              }
            }
            else
            {
              v317 = 0;
              v28 = v312 & 0xF8;
              v318 = (unsigned __int8 *)(v315
                                       + v313 * (unint64_t)*(unsigned __int8 *)(v307 + v306)
                                       + (*(_BYTE *)(v307 + v306) & 0xF8)
                                       + v314);
              while (1)
              {
                v319 = *(_QWORD *)&v316[v317];
                v320 = *(_QWORD *)&v37[v317];
                if (v319 != v320)
                  break;
                v317 += 8;
                if (v28 == v317)
                {
                  v316 = v318;
                  goto LABEL_428;
                }
              }
              v28 = v317 + (__clz(__rbit64(v320 ^ v319)) >> 3);
            }
            a3 = v402;
            if (v28
              && v28 + *(unsigned int *)(v31 + 12) > v312
              && (v29 = v369
                      + v393
                      + v313
                      + ((((*(_QWORD *)(v31 + 16) >> (6 * (v312 - v28))) & 0x3FLL)
                        + 4 * (v312 - v28)) << *(_BYTE *)(*(_QWORD *)v31 + v312)),
                  v29 <= v32)
              && (v321 = 135 * v28 - 30 * (__clz(v29) ^ 0x1F) + 1920, v321 >= v43))
            {
              v399 = v312 - v28;
              *(_QWORD *)(v84 + 48) = ++v85;
              v43 = v321;
            }
            else
            {
LABEL_423:
              v29 = v310;
              v28 = v309;
            }
            v308 = 0;
            ++v306;
            v309 = v28;
            v310 = v29;
          }
          while ((v311 & 1) != 0);
        }
        else
        {
          v399 = 0;
          v43 = 2020;
        }
      }
      else
      {
        v399 = 0;
        a3 = v402;
      }
      a6 = v397;
      v87 = *((_QWORD *)v397 + 10);
      v395 = *((_QWORD *)v397 + 12);
      if (v395)
      {
        v88 = 0;
        v89 = *((_QWORD *)v397 + 13) + v393;
        do
        {
          v90 = &a6[2 * v88];
          v91 = *((_QWORD *)v90 + 14);
          v93 = *(_DWORD *)(v91 + 16);
          v92 = *(_DWORD *)(v91 + 20);
          v94 = v91 + 24;
          v95 = v91 + 24 + 4 * (1 << v92);
          v96 = v95 + 2 * (1 << v93);
          v97 = (_QWORD *)(v96 + 4 * *(unsigned int *)(v91 + 4));
          if (*(_DWORD *)v91 != -558043680)
            v97 = (_QWORD *)*v97;
          v98 = 0;
          v99 = *((_QWORD *)v90 + 46);
          v100 = v89 - v99;
          v101 = *(unsigned int *)(v91 + 8);
          v102 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v37 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v91 + 12)))) >> -(char)v93;
          v103 = v89 - v99 - v101;
          v104 = *(unsigned __int16 *)(v95 + 2 * v102);
          v105 = (int *)(v96
                       + 4
                       * (*(_DWORD *)(v94 + 4 * ((0xFFFFFFFF >> -(char)v92) & v102)) + v104));
          v106 = (char *)v97 + v89 - v99;
          result = v28;
          v107 = v43;
          do
          {
            v108 = a8[v98];
            if (v103 < v108 && v100 >= v108)
            {
              if (v101 - (v100 - v108) >= v30)
                v110 = v30;
              else
                v110 = v101 - (v100 - v108);
              if (v110 < 8)
              {
                v112 = 0;
                v113 = v37;
LABEL_131:
                v122 = v110 & 7;
                if (v122)
                {
                  v123 = v112 | v122;
                  v124 = &v106[v112 - v108];
                  while (1)
                  {
                    v125 = *v124++;
                    if (v125 != *v113)
                      break;
                    ++v113;
                    ++v112;
                    if (!--v122)
                    {
                      v112 = v123;
                      break;
                    }
                  }
                }
              }
              else
              {
                v111 = 0;
                v112 = v110 & 0xFFFFFFFFFFFFFFF8;
                v113 = &v37[v110 & 0xFFFFFFFFFFFFFFF8];
                v114 = -(uint64_t)(v110 >> 3);
                while (1)
                {
                  v115 = *(_QWORD *)&v37[v111];
                  v116 = *(_QWORD *)((char *)v97 + v100 - v108 + v111);
                  if (v115 != v116)
                    break;
                  v111 += 8;
                  v46 = __CFADD__(v114++, 1);
                  if (v46)
                  {
                    a4 = v400;
                    goto LABEL_131;
                  }
                }
                v112 = v111 + (__clz(__rbit64(v116 ^ v115)) >> 3);
                a4 = v400;
              }
              if (v112 >= 2)
              {
                v117 = 135 * v112 + 1935;
                if (v43 < v117)
                {
                  v118 = v117 - (((0x1CA10u >> (v98 & 0xE)) & 0xE) + 39);
                  if (!v98)
                    v118 = 135 * v112 + 1935;
                  if (v112 <= v28)
                    v119 = v28;
                  else
                    v119 = v112;
                  v120 = v43 >= v118;
                  if (v43 < v118)
                  {
                    v29 = a8[v98];
                    v107 = v118;
                  }
                  v121 = v399;
                  if (v43 < v118)
                    v121 = 0;
                  v399 = v121;
                  if (v43 < v118)
                  {
                    result = v112;
                    v43 = v118;
                  }
                  if (!v120)
                    v28 = v119;
                }
              }
            }
            ++v98;
          }
          while (v98 != 4);
          if (v104 != 0xFFFF)
          {
            do
            {
              v127 = *v105++;
              v126 = v127;
              v128 = v127 & 0x7FFFFFFF;
              v129 = v100 - v128;
              if (v101 - v128 >= v30)
                v130 = v30;
              else
                v130 = v101 - v128;
              v131 = v28 + v36;
              v133 = v129 > v87 || v131 > a4 || v28 >= v130;
              if (!v133 && *(unsigned __int8 *)(a3 + v131) == *((unsigned __int8 *)v97 + v28 + v128))
              {
                v134 = (char *)v97 + v128;
                if (v130 < 8)
                {
                  v136 = 0;
                  v137 = v37;
LABEL_179:
                  v149 = v130 & 7;
                  if ((v130 & 7) != 0)
                  {
                    v150 = v136 | v149;
                    while (v134[v136] == *v137)
                    {
                      ++v137;
                      ++v136;
                      if (!--v149)
                      {
                        v136 = v150;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v135 = 0;
                  v136 = v130 & 0xFFFFFFFFFFFFFFF8;
                  v137 = &v37[v130 & 0xFFFFFFFFFFFFFFF8];
                  v138 = -(uint64_t)(v130 >> 3);
                  while (1)
                  {
                    v139 = *(_QWORD *)&v37[v135];
                    v140 = *(_QWORD *)&v134[v135];
                    if (v139 != v140)
                      break;
                    v135 += 8;
                    v46 = __CFADD__(v138++, 1);
                    if (v46)
                      goto LABEL_179;
                  }
                  v136 = v135 + (__clz(__rbit64(v140 ^ v139)) >> 3);
                }
                v141 = 135 * v136 - 30 * (__clz(v129) ^ 0x1F) + 1920;
                if (v43 < v141)
                  v142 = v129;
                else
                  v142 = v29;
                if (v43 < v141)
                  v143 = v141;
                else
                  v143 = v107;
                v144 = v29;
                v145 = v399;
                if (v43 < v141)
                  v146 = 0;
                else
                  v146 = v399;
                if (v43 < v141)
                  v147 = v136;
                else
                  v147 = result;
                if (v43 < v141)
                {
                  v148 = v136;
                }
                else
                {
                  v141 = v43;
                  v148 = v28;
                }
                if (v136 >= 4)
                {
                  v144 = v142;
                  v107 = v143;
                  v145 = v146;
                }
                v399 = v145;
                v29 = v144;
                if (v136 >= 4)
                {
                  result = v147;
                  v43 = v141;
                  v28 = v148;
                }
              }
            }
            while ((v126 & 0x80000000) == 0);
          }
          ++v88;
          v28 = result;
          v43 = v107;
          a6 = v397;
        }
        while (v88 != v395);
      }
      else
      {
        v107 = v43;
        result = v28;
      }
      if (v107 >= 0x7E5)
      {
        v373 = v29;
        v151 = 0;
        a7 = v385;
        v152 = v386;
        v153 = *(unsigned __int16 *)(v385 + 80);
        v154 = v364 - v386;
        v155 = v375 + 1 + v386;
        while (1)
        {
          v382 = v151;
          if (v155 >= v376)
            v156 = v376;
          else
            v156 = v155;
          v389 = v156;
          --v30;
          v157 = result - 1;
          if (result - 1 >= v30)
            v157 = v30;
          if (a6[1] >= 5)
            v158 = 0;
          else
            v158 = v157;
          v159 = v152 + 1;
          if (v152 + 1 < v376)
            v160 = v152 + 1;
          else
            v160 = v376;
          v387 = v152;
          v388 = v152 + 1;
          v161 = v159 + v375;
          if (v159 + v375 >= v376)
            v161 = v376;
          v380 = v155;
          v381 = v161;
          v372 = result;
          v383 = v107;
          if (a6[158])
          {
            v162 = *(unsigned __int8 *)(a3 + (v152 & a4));
            v163 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v370 + v377) | *(_BYTE *)(v371 + v162)) + 637);
            v377 = v162;
            v164 = a3;
          }
          else
          {
            v164 = a3;
            v163 = v378;
          }
          v165 = 0;
          v166 = 0;
          v167 = 0;
          v378 = v163;
          v168 = *(_QWORD *)&a6[2 * v163 + 176];
          v170 = *(_QWORD *)(a7 + 96);
          v169 = *(_QWORD *)(a7 + 104);
          v171 = v170 + 196608;
          v172 = v388;
          v173 = v388 & a4;
          v174 = (unsigned __int8 *)(v164 + (v388 & a4));
          v175 = (506832829 * *(_DWORD *)v174) >> 17;
          v176 = 2020;
          v177 = 2020;
          do
          {
            v178 = a8[v165];
            v179 = v172 - v178;
            if ((!v165 || *(unsigned __int8 *)(v171 + (unsigned __int16)(v172 - v178)) == v175)
              && v160 >= v178
              && v179 < v172)
            {
              v181 = v402 + (v179 & a4);
              if (v30 < 8)
              {
                v182 = 0;
                v186 = v174;
LABEL_230:
                if ((v30 & 7) != 0)
                {
                  v189 = v30 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v181 + v182) != *v186)
                      break;
                    ++v186;
                    ++v182;
                    --v189;
                  }
                  while (v189);
                }
              }
              else
              {
                v182 = 0;
                v183 = v30 >> 3;
                while (1)
                {
                  v184 = *(_QWORD *)&v174[v182];
                  v185 = *(_QWORD *)(v181 + v182);
                  if (v184 != v185)
                    break;
                  v182 += 8;
                  if (!--v183)
                  {
                    v186 = &v174[v182];
                    goto LABEL_230;
                  }
                }
                v182 += __clz(__rbit64(v185 ^ v184)) >> 3;
              }
              if (v182 < 2)
              {
                v172 = v388;
              }
              else
              {
                v187 = 135 * v182 + 1935;
                v172 = v388;
                if (v176 < v187)
                {
                  v188 = v187 - (((0x1CA10u >> (v165 & 0xE)) & 0xE) + 39);
                  if (!v165)
                    v188 = 135 * v182 + 1935;
                  if (v176 < v188)
                  {
                    v167 = v182;
                    v166 = a8[v165];
                    v177 = v188;
                    v176 = v188;
                    v158 = v182;
                  }
                }
              }
            }
            ++v165;
          }
          while (v165 != 4);
          v190 = v170 + 0x20000;
          v191 = *(_QWORD *)(v385 + 88);
          v192 = v172 - *(unsigned int *)(v170 + 4 * v175);
          if (v191)
          {
            v193 = 0;
            v194 = *(unsigned __int16 *)(v190 + 2 * v175);
            v195 = v172 - *(unsigned int *)(v170 + 4 * v175);
            do
            {
              v193 += v195;
              if (v193 > v160)
                break;
              if (v158 + v173 <= v400)
              {
                v196 = (v172 - v193) & v400;
                if (v196 + v158 <= v400
                  && *(unsigned __int8 *)(v402 + v158 + v173) == *(unsigned __int8 *)(v402 + v196 + v158))
                {
                  v197 = v402 + v196;
                  if (v30 < 8)
                  {
                    v198 = 0;
                    v202 = v174;
LABEL_265:
                    v209 = v30 & 7;
                    if ((v30 & 7) != 0)
                    {
                      do
                      {
                        if (*(unsigned __int8 *)(v197 + v198) != *v202)
                          break;
                        ++v202;
                        ++v198;
                        --v209;
                      }
                      while (v209);
                    }
                  }
                  else
                  {
                    v198 = 0;
                    v199 = v30 >> 3;
                    while (1)
                    {
                      v200 = *(_QWORD *)&v174[v198];
                      v201 = *(_QWORD *)(v197 + v198);
                      if (v200 != v201)
                        break;
                      v198 += 8;
                      if (!--v199)
                      {
                        v202 = &v174[v198];
                        goto LABEL_265;
                      }
                    }
                    v198 += __clz(__rbit64(v201 ^ v200)) >> 3;
                  }
                  v203 = 135 * v198 - 30 * (__clz(v193) ^ 0x1F) + 1920;
                  if (v176 < v203)
                    v204 = v198;
                  else
                    v204 = v167;
                  if (v176 < v203)
                    v205 = v193;
                  else
                    v205 = v166;
                  if (v176 < v203)
                    v206 = v203;
                  else
                    v206 = v177;
                  if (v176 < v203)
                  {
                    v207 = v198;
                  }
                  else
                  {
                    v203 = v176;
                    v207 = v158;
                  }
                  if (v198 >= 4)
                  {
                    v167 = v204;
                    v166 = v205;
                    v177 = v206;
                    v176 = v203;
                    v158 = v207;
                  }
                }
                v172 = v388;
              }
              v208 = (unsigned __int16 *)(v169 + 4 * v194);
              v194 = v208[1];
              v195 = *v208;
              --v191;
            }
            while (v191);
          }
          *(_WORD *)(v385 + 80) = v153 + 1;
          *(_BYTE *)(v171 + (unsigned __int16)v172) = v175;
          v210 = -1;
          if (v192 < 0xFFFF)
            v210 = v192;
          v211 = (__int16 *)(v169 + 4 * (unsigned __int16)v153);
          *v211 = v210;
          v211[1] = *(_WORD *)(v190 + 2 * v175);
          *(_DWORD *)(v170 + 4 * v175) = v172;
          *(_WORD *)(v190 + 2 * v175) = v153;
          v379 = v153 + 1;
          if (v177 == 2020)
          {
            v212 = *(_QWORD *)(v385 + 112);
            v214 = *(_QWORD *)(v212 + 40);
            v213 = *(_QWORD *)(v212 + 48);
            a4 = v400;
            v215 = 0;
            if (v213 >= v214 >> 7)
            {
              v278 = ((506832829 * *(_DWORD *)v174) >> 17) & 0x7FFE;
              v279 = *(_QWORD *)(v168 + 32);
              v280 = 1;
              v177 = 2020;
              v281 = v166;
              v282 = v167;
              do
              {
                v283 = v280;
                *(_QWORD *)(v212 + 40) = ++v214;
                v284 = *(unsigned __int8 *)(v279 + v278);
                if (!*(_BYTE *)(v279 + v278) || v30 < v284)
                  goto LABEL_387;
                v285 = *(unsigned __int16 *)(*(_QWORD *)(v168 + 24) + 2 * v278);
                v286 = *(unsigned int *)(*(_QWORD *)v168 + 4 * v284 + 32);
                v287 = *(_QWORD *)(*(_QWORD *)v168 + 168);
                v288 = (unsigned __int8 *)(v287 + v286 + v285 * *(unsigned __int8 *)(v279 + v278));
                if (v284 < 8)
                {
                  v167 = 0;
LABEL_392:
                  v294 = v284 & 7;
                  if ((v284 & 7) != 0)
                  {
                    v295 = v167 | v294;
                    while (v174[v167] == *v288)
                    {
                      ++v288;
                      ++v167;
                      if (!--v294)
                      {
                        v167 = v295;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v289 = 0;
                  v167 = v284 & 0xF8;
                  v290 = (unsigned __int8 *)(v287
                                           + v285 * (unint64_t)*(unsigned __int8 *)(v279 + v278)
                                           + (*(_BYTE *)(v279 + v278) & 0xF8)
                                           + v286);
                  while (1)
                  {
                    v291 = *(_QWORD *)&v288[v289];
                    v292 = *(_QWORD *)&v174[v289];
                    if (v291 != v292)
                      break;
                    v289 += 8;
                    if (v167 == v289)
                    {
                      v288 = v290;
                      goto LABEL_392;
                    }
                  }
                  v167 = v289 + (__clz(__rbit64(v292 ^ v291)) >> 3);
                }
                if (v167
                  && v167 + *(unsigned int *)(v168 + 12) > v284
                  && (v166 = v369
                           + v381
                           + v285
                           + ((((*(_QWORD *)(v168 + 16) >> (6 * (v284 - v167))) & 0x3FLL)
                             + 4 * (v284 - v167)) << *(_BYTE *)(*(_QWORD *)v168 + v284)),
                      v166 <= v87)
                  && (v293 = __clz(v166), 135 * v167 - 30 * (v293 ^ 0x1F) + 1920 >= v177))
                {
                  v215 = v284 - v167;
                  *(_QWORD *)(v212 + 48) = ++v213;
                  v177 = 135 * v167 - 30 * (v293 ^ 0x1F) + 1920;
                }
                else
                {
LABEL_387:
                  v167 = v282;
                  v166 = v281;
                }
                v280 = 0;
                ++v278;
                v281 = v166;
                v282 = v167;
              }
              while ((v283 & 1) != 0);
            }
            else
            {
              v177 = 2020;
            }
          }
          else
          {
            v215 = 0;
            a4 = v400;
          }
          a6 = v397;
          v87 = *((_QWORD *)v397 + 10);
          v396 = *((_QWORD *)v397 + 12);
          if (v396)
          {
            v216 = 0;
            v217 = *((_QWORD *)v397 + 13);
            v394 = v217 + v381;
            v391 = -v217 - v389;
            v390 = v217 + v389;
            do
            {
              v218 = &a6[2 * v216];
              v219 = *((_QWORD *)v218 + 14);
              v221 = *(_DWORD *)(v219 + 16);
              v220 = *(_DWORD *)(v219 + 20);
              v222 = v219 + 24 + 4 * (1 << v220);
              v223 = v222 + 2 * (1 << v221);
              v224 = (_QWORD *)(v223 + 4 * *(unsigned int *)(v219 + 4));
              if (*(_DWORD *)v219 != -558043680)
                v224 = (_QWORD *)*v224;
              v225 = 0;
              v226 = *((_QWORD *)v218 + 46);
              v227 = v394 - v226;
              v228 = *(unsigned int *)(v219 + 8);
              v229 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v174 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v219 + 12)))) >> -(char)v221;
              v230 = v394 - v226 - v228;
              v231 = *(unsigned __int16 *)(v222 + 2 * v229);
              v232 = (int *)(v223
                           + 4
                           * (*(_DWORD *)(v219
                                                      + 24
                                                      + 4 * ((0xFFFFFFFF >> -(char)v220) & v229))
                                          + v231));
              v233 = v391 + v226 + v228;
              v234 = (char *)v224 + v390 - v226;
              v235 = v177;
              v236 = v167;
              do
              {
                v237 = a8[v225];
                if (v230 < v237 && v227 >= v237)
                {
                  if (v228 + v237 - v227 >= v30)
                    v239 = v30;
                  else
                    v239 = v228 + v237 - v227;
                  if (v239 < 8)
                  {
                    v240 = 0;
                    v245 = v174;
LABEL_309:
                    if ((v239 & 7) != 0)
                    {
                      v249 = v233 + v237;
                      if (v154 < v233 + v237)
                        v249 = v154;
                      v250 = -(uint64_t)(v249 & 7);
                      v251 = &v234[v240 - v237];
                      do
                      {
                        v252 = *v251++;
                        if (v252 != *v245)
                          break;
                        ++v245;
                        ++v240;
                        v46 = __CFADD__(v250++, 1);
                      }
                      while (!v46);
                    }
                  }
                  else
                  {
                    v240 = 0;
                    v241 = v233 + v237;
                    if (v154 < v233 + v237)
                      v241 = v154;
                    v242 = -(uint64_t)(v241 >> 3);
                    while (1)
                    {
                      v243 = *(_QWORD *)&v174[v240];
                      v244 = *(_QWORD *)&v234[v240 - v237];
                      if (v243 != v244)
                        break;
                      v240 += 8;
                      v46 = __CFADD__(v242++, 1);
                      if (v46)
                      {
                        v245 = &v174[v240];
                        goto LABEL_309;
                      }
                    }
                    v240 += __clz(__rbit64(v244 ^ v243)) >> 3;
                  }
                  if (v240 >= 2)
                  {
                    v246 = 135 * v240 + 1935;
                    if (v177 < v246)
                    {
                      v247 = v246 - (((0x1CA10u >> (v225 & 0xE)) & 0xE) + 39);
                      if (!v225)
                        v247 = 135 * v240 + 1935;
                      if (v240 <= v167)
                        v248 = v167;
                      else
                        v248 = v240;
                      if (v177 < v247)
                      {
                        v236 = v240;
                        v166 = a8[v225];
                        v235 = v247;
                        v215 = 0;
                        v177 = v247;
                        v167 = v248;
                      }
                    }
                  }
                }
                ++v225;
              }
              while (v225 != 4);
              v253 = v231 == 0xFFFF;
              a4 = v400;
              if (!v253)
              {
                do
                {
                  v270 = *v232++;
                  v269 = v270;
                  v271 = v270 & 0x7FFFFFFF;
                  v263 = v227 - v271;
                  v272 = v228 - v271;
                  if (v228 - v271 >= v30)
                    v273 = v30;
                  else
                    v273 = v228 - v271;
                  v274 = v167 + v173;
                  v276 = v263 > v87 || v274 > v400 || v167 >= v273;
                  if (!v276 && *(unsigned __int8 *)(v402 + v274) == *((unsigned __int8 *)v224 + v167 + v271))
                  {
                    v254 = (char *)v224 + v271;
                    if (v273 < 8)
                    {
                      v255 = 0;
                      v260 = v174;
LABEL_346:
                      if ((v273 & 7) != 0)
                      {
                        if (v154 >= v272)
                          v267 = v272;
                        else
                          v267 = v154;
                        v268 = -(uint64_t)(v267 & 7);
                        do
                        {
                          if (v254[v255] != *v260)
                            break;
                          ++v260;
                          ++v255;
                          v46 = __CFADD__(v268++, 1);
                        }
                        while (!v46);
                      }
                    }
                    else
                    {
                      v255 = 0;
                      if (v154 >= v272)
                        v256 = v272;
                      else
                        v256 = v154;
                      v257 = -(uint64_t)(v256 >> 3);
                      while (1)
                      {
                        v258 = *(_QWORD *)&v174[v255];
                        v259 = *(_QWORD *)&v254[v255];
                        if (v258 != v259)
                          break;
                        v255 += 8;
                        v46 = __CFADD__(v257++, 1);
                        if (v46)
                        {
                          v260 = &v174[v255];
                          goto LABEL_346;
                        }
                      }
                      v255 += __clz(__rbit64(v259 ^ v258)) >> 3;
                    }
                    v261 = 135 * v255 - 30 * (__clz(v263) ^ 0x1F) + 1920;
                    if (v177 < v261)
                      v262 = v255;
                    else
                      v262 = v236;
                    if (v177 < v261)
                    {
                      v264 = v261;
                    }
                    else
                    {
                      v263 = v166;
                      v264 = v235;
                    }
                    if (v177 < v261)
                      v265 = 0;
                    else
                      v265 = v215;
                    if (v177 < v261)
                    {
                      v266 = v255;
                    }
                    else
                    {
                      v261 = v177;
                      v266 = v167;
                    }
                    if (v255 >= 4)
                    {
                      v236 = v262;
                      v166 = v263;
                      v235 = v264;
                      v215 = v265;
                      v177 = v261;
                      v167 = v266;
                    }
                  }
                }
                while ((v269 & 0x80000000) == 0);
              }
              ++v216;
              v177 = v235;
              v167 = v236;
              a6 = v397;
            }
            while (v216 != v396);
          }
          else
          {
            v236 = v167;
            v235 = v177;
          }
          if (v235 < v383 + 175)
            break;
          a7 = v385;
          ++v384;
          a3 = v402;
          if (v382 > 2)
          {
            v277 = v388;
            goto LABEL_443;
          }
          v151 = v382 + 1;
          --v154;
          v155 = v380 + 1;
          v153 = v379;
          v373 = v166;
          v107 = v235;
          v399 = v215;
          result = v236;
          v277 = v388;
          v152 = v388;
          if (v387 + 5 >= v374)
            goto LABEL_443;
        }
        a7 = v385;
        v305 = v387 + v375;
        if (v387 + v375 >= v376)
          v305 = v376;
        v381 = v305;
        v236 = v372;
        v166 = v373;
        v215 = v399;
        v277 = v387;
        a3 = v402;
LABEL_443:
        v14 = a10;
        a5 = v371;
        v16 = v374;
        result = v384;
        if (v166 > v381 + v365)
        {
LABEL_444:
          v331 = v166 + 15;
          goto LABEL_445;
        }
        v332 = *a8;
        if (v166 == v332)
        {
          v331 = 0;
          goto LABEL_450;
        }
        v342 = a8[1];
        if (v166 == v342)
        {
          v331 = 1;
        }
        else
        {
          v343 = v166 + 3 - v332;
          if (v343 > 6)
          {
            v346 = v166 + 3 - v342;
            if (v346 > 6)
            {
              if (v166 == a8[2])
              {
                v331 = 2;
              }
              else
              {
                if (v166 != a8[3])
                  goto LABEL_444;
                v331 = 3;
              }
              goto LABEL_445;
            }
            v344 = 4 * v346;
            v345 = 266017486;
          }
          else
          {
            v344 = 4 * v343;
            v345 = 158663784;
          }
          v331 = (v345 >> v344) & 0xF;
        }
LABEL_445:
        if (v166 <= v381 + v365 && v331)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v166;
        }
LABEL_450:
        *(_DWORD *)v368 = v384;
        *(_DWORD *)(v368 + 4) = v236 | (v215 << 25);
        v333 = a6[17];
        v334 = v333 + 16;
        if (v333 + 16 <= v331)
        {
          v336 = a6[16];
          v337 = v331 - v333 + (4 << v336) - 16;
          v338 = (__clz(v337) ^ 0x1F) - 1;
          v339 = ((v337 >> v338) & 1 | 2) << v338;
          v331 = ((v337 & ~(-1 << v336))
                + v334
                + ((((v337 >> v338) & 1 | (2 * (v338 - v336))) + 65534) << v336)) | ((v338 - v336) << 10);
          v335 = (v337 - v339) >> v336;
        }
        else
        {
          LODWORD(v335) = 0;
        }
        *(_WORD *)(v368 + 14) = v331;
        *(_DWORD *)(v368 + 8) = v335;
        if (v384 > 5)
        {
          if (v384 > 0x81)
          {
            if (v384 > 0x841)
            {
              if (v384 >> 1 >= 0xC21)
              {
                if (v384 < 0x5842)
                  LOWORD(v340) = 22;
                else
                  LOWORD(v340) = 23;
              }
              else
              {
                LOWORD(v340) = 21;
              }
            }
            else
            {
              v340 = (__clz(v384 - 66) ^ 0x1F) + 10;
            }
          }
          else
          {
            v341 = (__clz(v384 - 2) ^ 0x1F) - 1;
            v340 = ((v384 - 2) >> v341) + 2 * v341 + 2;
          }
        }
        else
        {
          LOWORD(v340) = v384;
        }
        v347 = v215 + (int)v236;
        if (v347 > 9)
        {
          if (v347 > 0x85)
          {
            if (v347 > 0x845)
              LOWORD(v348) = 23;
            else
              v348 = (__clz(v347 - 70) ^ 0x1F) + 12;
          }
          else
          {
            v349 = v347 - 6;
            v350 = (__clz(v349) ^ 0x1F) - 1;
            v348 = (v349 >> v350) + 2 * v350 + 4;
          }
        }
        else
        {
          LOWORD(v348) = v215 + v236 - 2;
        }
        v351 = v348 & 7 | (8 * (v340 & 7));
        if ((v331 & 0x3FF) != 0 || (unsigned __int16)v340 > 7u || (unsigned __int16)v348 > 0xFu)
        {
          v353 = 3 * ((unsigned __int16)v340 >> 3) + ((unsigned __int16)(v348 & 0xFFF8) >> 3);
          v352 = ((((0x520D40u >> (2 * v353)) & 0xC0) + (v353 << 6)) | v351) + 64;
        }
        else
        {
          LOWORD(v352) = v351 | 0x40;
          if ((v348 & 0xFFF8) == 0)
            LOWORD(v352) = v348 & 7 | (8 * (v340 & 7));
        }
        *(_WORD *)(v368 + 12) = v352;
        *a12 += v384;
        v354 = v277 + 2;
        v296 = v277 + v236;
        v355 = v367;
        if (v277 + v236 < v367)
          v355 = v277 + v236;
        if (v166 < v236 >> 2)
        {
          if (v354 <= v296 - 4 * v166)
            v354 = v296 - 4 * v166;
          if (v355 < v354)
            v354 = v355;
        }
        v19 = v366 + 2 * v236 + v277;
        v20 = v368 + 16;
        if (v354 >= v355)
        {
          v15 = 0;
          goto LABEL_500;
        }
        v356 = *(_QWORD *)(a7 + 96);
        v357 = *(_QWORD *)(a7 + 104);
        v358 = v356 + 0x20000;
        v301 = *(_WORD *)(a7 + 80);
        do
        {
          v359 = (506832829 * *(_DWORD *)(a3 + (v354 & v400))) >> 17;
          v360 = v354 - *(unsigned int *)(v356 + 4 * v359);
          *(_BYTE *)(v356 + 196608 + (unsigned __int16)v354) = v359;
          if (v360 >= 0xFFFF)
            LOWORD(v360) = -1;
          result = v357 + 4 * v301;
          *(_WORD *)result = v360;
          *(_WORD *)(result + 2) = *(_WORD *)(v358 + 2 * v359);
          *(_WORD *)(v358 + 2 * v359) = v301++;
          *(_DWORD *)(v356 + 4 * v359) = v354++;
        }
        while (v355 != v354);
        v15 = 0;
LABEL_498:
        a7 = v385;
        *(_WORD *)(v385 + 80) = v301;
        a6 = v397;
        goto LABEL_500;
      }
      a7 = v385;
      v15 = v384 + 1;
      v296 = v386 + 1;
      v19 = v392;
      v14 = a10;
      if (v386 + 1 > v392)
      {
        a5 = v371;
        v16 = v374;
        v20 = v368;
        if (v296 <= v392 + v363)
        {
          v324 = v362;
          if (v386 + 9 < v362)
            v324 = v386 + 9;
          if (v296 >= v324)
            goto LABEL_500;
          v325 = *(_QWORD *)(v385 + 96);
          v326 = *(_QWORD *)(v385 + 104);
          v327 = v325 + 0x20000;
          v301 = *(_WORD *)(v385 + 80);
          result = 0xFFFFLL;
          do
          {
            v328 = (506832829 * *(_DWORD *)(a3 + (v296 & a4))) >> 17;
            v329 = v296 - *(unsigned int *)(v325 + 4 * v328);
            *(_BYTE *)(v325 + 196608 + (unsigned __int16)v296) = v328;
            if (v329 >= 0xFFFF)
              LOWORD(v329) = -1;
            v330 = (_WORD *)(v326 + 4 * v301);
            *v330 = v329;
            v330[1] = *(_WORD *)(v327 + 2 * v328);
            *(_WORD *)(v327 + 2 * v328) = v301++;
            *(_DWORD *)(v325 + 4 * v328) = v296;
            v15 += 2;
            v296 += 2;
          }
          while (v296 < v324);
        }
        else
        {
          v297 = v361;
          if (v386 + 17 < v361)
            v297 = v386 + 17;
          if (v296 >= v297)
            goto LABEL_500;
          v298 = *(_QWORD *)(v385 + 96);
          v299 = *(_QWORD *)(v385 + 104);
          v300 = v298 + 0x20000;
          v301 = *(_WORD *)(v385 + 80);
          result = 0xFFFFLL;
          do
          {
            v302 = (506832829 * *(_DWORD *)(a3 + (v296 & a4))) >> 17;
            v303 = v296 - *(unsigned int *)(v298 + 4 * v302);
            *(_BYTE *)(v298 + 196608 + (unsigned __int16)v296) = v302;
            if (v303 >= 0xFFFF)
              LOWORD(v303) = -1;
            v304 = (_WORD *)(v299 + 4 * v301);
            *v304 = v303;
            v304[1] = *(_WORD *)(v300 + 2 * v302);
            *(_WORD *)(v300 + 2 * v302) = v301++;
            *(_DWORD *)(v298 + 4 * v302) = v296;
            v15 += 4;
            v296 += 4;
          }
          while (v296 < v297);
        }
        goto LABEL_498;
      }
      a5 = v371;
      v16 = v374;
      v20 = v368;
LABEL_500:
      a2 = v296;
      if (v296 + 4 >= v16)
        goto LABEL_507;
    }
    if (a2)
    {
      v23 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
      if (a2 != 1)
      {
        v24 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_20:
        v377 = v23;
        v25 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v370 + v24) | *(_BYTE *)(a5 + v23)) + 637);
        goto LABEL_21;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = 0;
    goto LABEL_20;
  }
  v20 = a10;
  v296 = a2;
LABEL_507:
  *a9 = v15 + v16 - v296;
  *a11 += (v20 - v14) >> 4;
  return result;
}

unint64_t sub_23678B128(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, unint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int16 *v81;
  unint64_t v82;
  uint64_t v83;
  __int16 v84;
  __int16 *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  int *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unint64_t v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned __int16 *v214;
  unint64_t v215;
  __int16 v216;
  __int16 *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  int v237;
  int *v238;
  uint64_t v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  char v255;
  uint64_t v256;
  char *v257;
  int v258;
  BOOL v259;
  char *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int v271;
  unint64_t v272;
  char v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  BOOL v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  unint64_t v287;
  unint64_t v288;
  char v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned __int8 *v294;
  unint64_t v295;
  unsigned __int8 *v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned __int16 v307;
  unsigned int v308;
  unint64_t v309;
  _WORD *v310;
  unint64_t v311;
  unint64_t v312;
  int32x4_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  unint64_t v317;
  unint64_t v318;
  char v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned __int8 *v324;
  unint64_t v325;
  unsigned __int8 *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  unsigned int v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unint64_t v347;
  _WORD *v348;
  uint64_t v349;
  unint64_t v350;
  char v351;
  unsigned int v352;
  unint64_t v353;
  uint64_t v354;
  unsigned int v355;
  unint64_t v356;
  unsigned int v357;
  int v358;
  unsigned int v359;
  int v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  unint64_t v367;
  _WORD *v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  unint64_t v388;
  unint64_t v389;
  unsigned int v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  int v401;
  uint64_t v402;
  _QWORD *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  int v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v412;

  v12 = a10;
  v13 = a6[2];
  v14 = *a9;
  v15 = a2 + result;
  v16 = a2 + result - 3;
  v370 = v16;
  if (result <= 3)
    v16 = a2;
  v376 = v16;
  v17 = *((_DWORD *)a6 + 2);
  v18 = 64;
  if (*((int *)a6 + 1) >= 9)
    v18 = 512;
  v19 = a6[13];
  v20 = (int32x4_t)vld1q_dup_f32((const float *)a8);
  *((int32x4_t *)a8 + 1) = vaddq_s32(v20, (int32x4_t)xmmword_2368AF3A0);
  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
  if (result >= 5)
  {
    v21 = a4;
    v374 = v19;
    v383 = (1 << v17) - 16;
    v384 = v13;
    v22 = v18 + a2;
    v379 = a5 + 256;
    v380 = a5;
    v378 = v19 + 1;
    v369 = v15 - 4;
    v373 = v15 - 1;
    v371 = 4 * v18;
    v372 = v13 + 1;
    v23 = a10;
    result = a7;
    v412 = a3;
    v375 = v18;
    v403 = a6;
    v382 = v15;
    while (1)
    {
      if (a2 >= v383)
        v24 = v383;
      else
        v24 = a2;
      v25 = a2 + v13;
      if (a2 + v13 >= v383)
        v25 = v383;
      v409 = v25;
      v394 = a2;
      v377 = v23;
      v392 = v14;
      if (*((_DWORD *)a6 + 158))
        break;
      v28 = 0;
      v385 = 0;
LABEL_20:
      v400 = v22;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v15 - a2;
      v386 = v28;
      v34 = a6[v28 + 88];
      v35 = a6[10];
      v37 = *(_QWORD *)(result + 96);
      v36 = *(_QWORD *)(result + 104);
      v38 = v37 + 196608;
      v39 = a2 & v21;
      v40 = (unsigned __int8 *)(a3 + (a2 & v21));
      v41 = (506832829 * *(_DWORD *)v40) >> 17;
      v42 = a2;
      v43 = (v15 - a2) >> 3;
      v44 = v33 & 7;
      v45 = 2020;
      v46 = 2020;
      do
      {
        v47 = a8[v29];
        v48 = v42 - v47;
        if (!v29 || (v42 = a2, *(unsigned __int8 *)(v38 + (unsigned __int16)v48) == v41))
        {
          v49 = v24 < v47 || v48 >= v42;
          if (!v49)
          {
            v50 = a3 + (v48 & v21);
            if (v33 < 8)
            {
              v55 = 0;
              v56 = (unsigned __int8 *)(a3 + (a2 & v21));
LABEL_43:
              if (v44)
              {
                v59 = v44 | v55;
                v406 = v44;
                while (*(unsigned __int8 *)(v50 + v55) == *v56)
                {
                  ++v56;
                  ++v55;
                  if (!--v44)
                  {
                    v55 = v59;
                    break;
                  }
                }
                v44 = v406;
              }
            }
            else
            {
              v51 = 0;
              v52 = v43;
              while (1)
              {
                v53 = *(_QWORD *)&v40[v51];
                v54 = *(_QWORD *)(v50 + v51);
                if (v53 != v54)
                  break;
                v51 += 8;
                if (!--v52)
                {
                  v55 = v33 & 0xFFFFFFFFFFFFFFF8;
                  v56 = &v40[v33 & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_43;
                }
              }
              v55 = v51 + (__clz(__rbit64(v54 ^ v53)) >> 3);
            }
            if (v55 >= 2)
            {
              v57 = 135 * v55 + 1935;
              if (v45 < v57)
              {
                v58 = v57 - (((0x1CA10u >> (v29 & 0xE)) & 0xE) + 39);
                if (!v29)
                  v58 = 135 * v55 + 1935;
                if (v45 < v58)
                {
                  v32 = a8[v29];
                  v46 = v58;
                  v31 = v55;
                  v45 = v58;
                  v30 = v55;
                }
              }
            }
            v42 = a2;
          }
        }
        ++v29;
      }
      while (v29 != 10);
      v60 = v37 + 0x20000;
      v61 = v42;
      v62 = *(_QWORD *)(a7 + 88);
      v63 = *(unsigned int *)(v37 + 4 * v41);
      v64 = v61 - v63;
      if (v62)
      {
        v407 = v44;
        v65 = 0;
        v66 = *(unsigned __int16 *)(v60 + 2 * v41);
        v67 = v61 - v63;
        do
        {
          v65 += v67;
          if (v65 > v24)
            break;
          if (v30 + v39 <= v21)
          {
            v68 = (a2 - v65) & v21;
            if (v68 + v30 <= v21 && *(unsigned __int8 *)(a3 + v30 + v39) == *(unsigned __int8 *)(a3 + v68 + v30))
            {
              v69 = a3 + v68;
              if (v33 < 8)
              {
                v74 = 0;
                v75 = v40;
LABEL_80:
                v82 = v407;
                if (v407)
                {
                  v404 = v407 | v74;
                  while (*(unsigned __int8 *)(v69 + v74) == *v75)
                  {
                    ++v75;
                    ++v74;
                    if (!--v82)
                    {
                      v74 = v404;
                      break;
                    }
                  }
                }
              }
              else
              {
                v70 = 0;
                v71 = v43;
                while (1)
                {
                  v72 = *(_QWORD *)&v40[v70];
                  v73 = *(_QWORD *)(v69 + v70);
                  if (v72 != v73)
                    break;
                  v70 += 8;
                  if (!--v71)
                  {
                    v74 = v33 & 0xFFFFFFFFFFFFFFF8;
                    v75 = &v40[v33 & 0xFFFFFFFFFFFFFFF8];
                    goto LABEL_80;
                  }
                }
                v74 = v70 + (__clz(__rbit64(v73 ^ v72)) >> 3);
              }
              v76 = 135 * v74 - 30 * (__clz(v65) ^ 0x1F) + 1920;
              if (v45 < v76)
                v77 = v65;
              else
                v77 = v32;
              if (v45 < v76)
                v78 = v76;
              else
                v78 = v46;
              if (v45 < v76)
                v79 = v74;
              else
                v79 = v31;
              if (v45 < v76)
              {
                v80 = v74;
              }
              else
              {
                v76 = v45;
                v80 = v30;
              }
              if (v74 >= 4)
              {
                v32 = v77;
                v46 = v78;
                v31 = v79;
                v45 = v76;
                v30 = v80;
              }
              v21 = a4;
              a3 = v412;
            }
            else
            {
              v21 = a4;
            }
          }
          v81 = (unsigned __int16 *)(v36 + 4 * v66);
          v66 = v81[1];
          v67 = *v81;
          --v62;
        }
        while (v62);
      }
      v83 = *(unsigned __int16 *)(a7 + 80);
      *(_WORD *)(a7 + 80) = v83 + 1;
      *(_BYTE *)(v38 + (unsigned __int16)a2) = v41;
      v84 = -1;
      if (v64 < 0xFFFF)
        v84 = v64;
      v85 = (__int16 *)(v36 + 4 * v83);
      *v85 = v84;
      v85[1] = *(_WORD *)(v60 + 2 * v41);
      *(_DWORD *)(v37 + 4 * v41) = a2;
      *(_WORD *)(v60 + 2 * v41) = v83;
      if (v46 == 2020)
      {
        v86 = *(_QWORD *)(a7 + 112);
        v88 = *(_QWORD *)(v86 + 40);
        v87 = *(_QWORD *)(v86 + 48);
        v89 = v32;
        if (v87 >= v88 >> 7)
        {
          v408 = 0;
          v314 = ((506832829 * *(_DWORD *)v40) >> 17) & 0x7FFE;
          v315 = *(_QWORD *)(v34 + 32);
          v316 = 1;
          v317 = v31;
          v46 = 2020;
          v318 = v89;
          do
          {
            v319 = v316;
            *(_QWORD *)(v86 + 40) = ++v88;
            v320 = *(unsigned __int8 *)(v315 + v314);
            if (!*(_BYTE *)(v315 + v314) || v33 < v320)
              goto LABEL_434;
            v321 = *(unsigned __int16 *)(*(_QWORD *)(v34 + 24) + 2 * v314);
            v322 = *(unsigned int *)(*(_QWORD *)v34 + 4 * v320 + 32);
            v323 = *(_QWORD *)(*(_QWORD *)v34 + 168);
            v324 = (unsigned __int8 *)(v323 + v322 + v321 * *(unsigned __int8 *)(v315 + v314));
            if (v320 < 8)
            {
              v31 = 0;
LABEL_439:
              v330 = v320 & 7;
              if ((v320 & 7) != 0)
              {
                v331 = v31 | v330;
                while (v40[v31] == *v324)
                {
                  ++v324;
                  ++v31;
                  if (!--v330)
                  {
                    v31 = v331;
                    break;
                  }
                }
              }
            }
            else
            {
              v325 = 0;
              v31 = v320 & 0xF8;
              v326 = (unsigned __int8 *)(v323
                                       + v321 * (unint64_t)*(unsigned __int8 *)(v315 + v314)
                                       + (*(_BYTE *)(v315 + v314) & 0xF8)
                                       + v322);
              while (1)
              {
                v327 = *(_QWORD *)&v324[v325];
                v328 = *(_QWORD *)&v40[v325];
                if (v327 != v328)
                  break;
                v325 += 8;
                if (v31 == v325)
                {
                  v324 = v326;
                  goto LABEL_439;
                }
              }
              v31 = v325 + (__clz(__rbit64(v328 ^ v327)) >> 3);
            }
            if (v31
              && v31 + *(unsigned int *)(v34 + 12) > v320
              && (v89 = v378
                      + v409
                      + v321
                      + ((((*(_QWORD *)(v34 + 16) >> (6 * (v320 - v31))) & 0x3FLL)
                        + 4 * (v320 - v31)) << *(_BYTE *)(*(_QWORD *)v34 + v320)),
                  v89 <= v35)
              && (v329 = 135 * v31 - 30 * (__clz(v89) ^ 0x1F) + 1920, v329 >= v46))
            {
              v408 = v320 - v31;
              *(_QWORD *)(v86 + 48) = ++v87;
              v46 = v329;
            }
            else
            {
LABEL_434:
              v89 = v318;
              v31 = v317;
            }
            v316 = 0;
            ++v314;
            v317 = v31;
            v318 = v89;
          }
          while ((v319 & 1) != 0);
        }
        else
        {
          v408 = 0;
          v46 = 2020;
        }
      }
      else
      {
        v408 = 0;
        v89 = v32;
      }
      v405 = v89;
      a6 = v403;
      v90 = v403[10];
      v91 = v403[12];
      if (v91)
      {
        v92 = 0;
        v93 = v403[13] + v409;
        do
        {
          v94 = &a6[v92];
          v95 = v94[14];
          v97 = *(_DWORD *)(v95 + 16);
          v96 = *(_DWORD *)(v95 + 20);
          v98 = v95 + 24;
          v99 = v95 + 24 + 4 * (1 << v96);
          v100 = v99 + 2 * (1 << v97);
          v101 = (_QWORD *)(v100 + 4 * *(unsigned int *)(v95 + 4));
          if (*(_DWORD *)v95 != -558043680)
            v101 = (_QWORD *)*v101;
          v102 = 0;
          v103 = v94[46];
          v104 = v93 - v103;
          v105 = *(unsigned int *)(v95 + 8);
          v106 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v40 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v95 + 12)))) >> -(char)v97;
          v107 = v93 - v103 - v105;
          v108 = *(unsigned __int16 *)(v99 + 2 * v106);
          v109 = (int *)(v100
                       + 4
                       * (*(_DWORD *)(v98 + 4 * ((0xFFFFFFFF >> -(char)v96) & v106)) + v108));
          v110 = (char *)v101 + v93 - v103;
          v111 = v31;
          v112 = v46;
          do
          {
            v113 = a8[v102];
            if (v107 < v113 && v104 >= v113)
            {
              if (v105 - (v104 - v113) >= v33)
                v115 = v33;
              else
                v115 = v105 - (v104 - v113);
              if (v115 < 8)
              {
                v117 = 0;
                v118 = v40;
LABEL_131:
                v128 = v115 & 7;
                if (v128)
                {
                  v129 = v117 | v128;
                  v130 = &v110[v117 - v113];
                  while (1)
                  {
                    v131 = *v130++;
                    if (v131 != *v118)
                      break;
                    ++v118;
                    ++v117;
                    if (!--v128)
                    {
                      v117 = v129;
                      break;
                    }
                  }
                }
              }
              else
              {
                v116 = 0;
                v117 = v115 & 0xFFFFFFFFFFFFFFF8;
                v118 = &v40[v115 & 0xFFFFFFFFFFFFFFF8];
                v119 = -(uint64_t)(v115 >> 3);
                while (1)
                {
                  v120 = *(_QWORD *)&v40[v116];
                  v121 = *(_QWORD *)((char *)v101 + v104 - v113 + v116);
                  if (v120 != v121)
                    break;
                  v116 += 8;
                  v49 = __CFADD__(v119++, 1);
                  if (v49)
                  {
                    v21 = a4;
                    goto LABEL_131;
                  }
                }
                v117 = v116 + (__clz(__rbit64(v121 ^ v120)) >> 3);
                v21 = a4;
              }
              if (v117 >= 2)
              {
                v122 = 135 * v117 + 1935;
                if (v46 < v122)
                {
                  v123 = v122 - (((0x1CA10u >> (v102 & 0xE)) & 0xE) + 39);
                  if (!v102)
                    v123 = 135 * v117 + 1935;
                  if (v117 <= v31)
                    v124 = v31;
                  else
                    v124 = v117;
                  v125 = v46 >= v123;
                  v126 = v405;
                  if (v46 < v123)
                    v126 = a8[v102];
                  v405 = v126;
                  if (v46 < v123)
                    v112 = v123;
                  v127 = v408;
                  if (v46 < v123)
                    v127 = 0;
                  v408 = v127;
                  if (v46 < v123)
                  {
                    v111 = v117;
                    v46 = v123;
                  }
                  if (!v125)
                    v31 = v124;
                }
              }
            }
            ++v102;
          }
          while (v102 != 4);
          a3 = v412;
          if (v108 != 0xFFFF)
          {
            do
            {
              v133 = *v109++;
              v132 = v133;
              v134 = v133 & 0x7FFFFFFF;
              v135 = v104 - v134;
              if (v105 - v134 >= v33)
                v136 = v33;
              else
                v136 = v105 - v134;
              v137 = v31 + v39;
              if (v135 <= v90 && v137 <= v21 && v31 < v136)
              {
                v140 = v111;
                if (*(unsigned __int8 *)(a3 + v137) == *((unsigned __int8 *)v101 + v31 + v134))
                {
                  v141 = (char *)v101 + v134;
                  if (v136 < 8)
                  {
                    v143 = 0;
                    v144 = v40;
LABEL_186:
                    v156 = v136 & 7;
                    if ((v136 & 7) != 0)
                    {
                      v157 = v143 | v156;
                      while (v141[v143] == *v144)
                      {
                        ++v144;
                        ++v143;
                        if (!--v156)
                        {
                          v143 = v157;
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    v142 = 0;
                    v143 = v136 & 0xFFFFFFFFFFFFFFF8;
                    v144 = &v40[v136 & 0xFFFFFFFFFFFFFFF8];
                    v145 = -(uint64_t)(v136 >> 3);
                    while (1)
                    {
                      v146 = *(_QWORD *)&v40[v142];
                      v147 = *(_QWORD *)&v141[v142];
                      if (v146 != v147)
                        break;
                      v142 += 8;
                      v49 = __CFADD__(v145++, 1);
                      if (v49)
                        goto LABEL_186;
                    }
                    v143 = v142 + (__clz(__rbit64(v147 ^ v146)) >> 3);
                  }
                  v148 = 135 * v143 - 30 * (__clz(v135) ^ 0x1F) + 1920;
                  v149 = v405;
                  if (v46 < v148)
                    v150 = v135;
                  else
                    v150 = v405;
                  if (v46 < v148)
                    v151 = v148;
                  else
                    v151 = v112;
                  v152 = v408;
                  if (v46 < v148)
                    v153 = 0;
                  else
                    v153 = v408;
                  if (v46 < v148)
                    v154 = v143;
                  else
                    v154 = v140;
                  if (v46 < v148)
                  {
                    v155 = v143;
                  }
                  else
                  {
                    v148 = v46;
                    v155 = v31;
                  }
                  if (v143 >= 4)
                    v149 = v150;
                  v405 = v149;
                  if (v143 >= 4)
                  {
                    v112 = v151;
                    v152 = v153;
                  }
                  v408 = v152;
                  if (v143 >= 4)
                    v111 = v154;
                  else
                    v111 = v140;
                  if (v143 >= 4)
                  {
                    v46 = v148;
                    v31 = v155;
                  }
                  a3 = v412;
                }
              }
            }
            while ((v132 & 0x80000000) == 0);
          }
          ++v92;
          v31 = v111;
          v46 = v112;
          a6 = v403;
        }
        while (v92 != v91);
      }
      else
      {
        v112 = v46;
        v111 = v31;
        a3 = v412;
      }
      if (v112 >= 0x7E5)
      {
        v158 = 0;
        result = a7;
        v159 = v394;
        v160 = *(unsigned __int16 *)(a7 + 80);
        v161 = v373 - v394;
        v162 = v372 + v394;
        v163 = v111;
        while (1)
        {
          v390 = v158;
          if (v162 >= v383)
            v164 = v383;
          else
            v164 = v162;
          v395 = v159;
          v396 = v164;
          --v33;
          v165 = v163 - 1;
          if (v163 - 1 >= v33)
            v165 = v33;
          if (*((int *)a6 + 1) >= 5)
            v166 = 0;
          else
            v166 = v165;
          v167 = v159 + 1;
          if (v159 + 1 < v383)
            v168 = v159 + 1;
          else
            v168 = v383;
          v169 = v167 + v384;
          if (v167 + v384 >= v383)
            v169 = v383;
          v388 = v162;
          v389 = v169;
          v381 = v163;
          v391 = v112;
          v401 = v160;
          if (*((_DWORD *)a6 + 158))
          {
            v170 = *(unsigned __int8 *)(v412 + (v159 & v21));
            v171 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v379 + v385) | *(_BYTE *)(v380 + v170)) + 637);
            v385 = v170;
          }
          else
          {
            v171 = v386;
          }
          v172 = 0;
          v173 = 0;
          v174 = 0;
          v386 = v171;
          v175 = a6[v171 + 88];
          v176 = *(_QWORD *)(result + 96);
          v177 = *(_QWORD *)(result + 104);
          v178 = v176 + 196608;
          v179 = v167 & v21;
          v180 = (unsigned __int8 *)(v412 + (v167 & v21));
          v181 = (506832829 * *(_DWORD *)v180) >> 17;
          v182 = 2020;
          v183 = 2020;
          v410 = v167;
          do
          {
            v184 = a8[v172];
            v185 = v167 - v184;
            if ((!v172 || *(unsigned __int8 *)(v178 + (unsigned __int16)(v167 - v184)) == v181)
              && v168 >= v184
              && v185 < v167)
            {
              v187 = v412 + (v185 & v21);
              if (v33 < 8)
              {
                v188 = 0;
                v192 = v180;
LABEL_236:
                if ((v33 & 7) != 0)
                {
                  v195 = v33 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v187 + v188) != *v192)
                      break;
                    ++v192;
                    ++v188;
                    --v195;
                  }
                  while (v195);
                }
              }
              else
              {
                v188 = 0;
                v189 = v33 >> 3;
                while (1)
                {
                  v190 = *(_QWORD *)&v180[v188];
                  v191 = *(_QWORD *)(v187 + v188);
                  if (v190 != v191)
                    break;
                  v188 += 8;
                  if (!--v189)
                  {
                    v192 = &v180[v188];
                    goto LABEL_236;
                  }
                }
                v188 += __clz(__rbit64(v191 ^ v190)) >> 3;
              }
              if (v188 < 2)
              {
                v167 = v410;
              }
              else
              {
                v193 = 135 * v188 + 1935;
                v167 = v410;
                if (v182 < v193)
                {
                  v194 = v193 - (((0x1CA10u >> (v172 & 0xE)) & 0xE) + 39);
                  if (!v172)
                    v194 = 135 * v188 + 1935;
                  if (v182 < v194)
                  {
                    v174 = v188;
                    v173 = a8[v172];
                    v183 = v194;
                    v182 = v194;
                    v166 = v188;
                  }
                }
              }
            }
            ++v172;
          }
          while (v172 != 10);
          v196 = v176 + 0x20000;
          v197 = *(_QWORD *)(a7 + 88);
          v198 = v167 - *(unsigned int *)(v176 + 4 * v181);
          if (v197)
          {
            v199 = 0;
            v200 = *(unsigned __int16 *)(v196 + 2 * v181);
            v201 = v167 - *(unsigned int *)(v176 + 4 * v181);
            do
            {
              v199 += v201;
              if (v199 > v168)
                break;
              if (v166 + v179 <= a4)
              {
                v202 = (v167 - v199) & a4;
                if (v202 + v166 <= a4
                  && *(unsigned __int8 *)(v412 + v166 + v179) == *(unsigned __int8 *)(v412 + v202 + v166))
                {
                  v203 = v412 + v202;
                  if (v33 < 8)
                  {
                    v204 = 0;
                    v208 = v180;
LABEL_271:
                    v215 = v33 & 7;
                    if ((v33 & 7) != 0)
                    {
                      do
                      {
                        if (*(unsigned __int8 *)(v203 + v204) != *v208)
                          break;
                        ++v208;
                        ++v204;
                        --v215;
                      }
                      while (v215);
                    }
                  }
                  else
                  {
                    v204 = 0;
                    v205 = v33 >> 3;
                    while (1)
                    {
                      v206 = *(_QWORD *)&v180[v204];
                      v207 = *(_QWORD *)(v203 + v204);
                      if (v206 != v207)
                        break;
                      v204 += 8;
                      if (!--v205)
                      {
                        v208 = &v180[v204];
                        goto LABEL_271;
                      }
                    }
                    v204 += __clz(__rbit64(v207 ^ v206)) >> 3;
                  }
                  v209 = 135 * v204 - 30 * (__clz(v199) ^ 0x1F) + 1920;
                  if (v182 < v209)
                    v210 = v204;
                  else
                    v210 = v174;
                  if (v182 < v209)
                    v211 = v199;
                  else
                    v211 = v173;
                  if (v182 < v209)
                    v212 = v209;
                  else
                    v212 = v183;
                  if (v182 < v209)
                  {
                    v213 = v204;
                  }
                  else
                  {
                    v209 = v182;
                    v213 = v166;
                  }
                  if (v204 >= 4)
                  {
                    v174 = v210;
                    v173 = v211;
                    v183 = v212;
                    v182 = v209;
                    v166 = v213;
                  }
                }
                v167 = v410;
              }
              v214 = (unsigned __int16 *)(v177 + 4 * v200);
              v200 = v214[1];
              v201 = *v214;
              --v197;
            }
            while (v197);
          }
          *(_WORD *)(a7 + 80) = v401 + 1;
          *(_BYTE *)(v178 + (unsigned __int16)v167) = v181;
          v216 = -1;
          if (v198 < 0xFFFF)
            v216 = v198;
          v217 = (__int16 *)(v177 + 4 * (unsigned __int16)v401);
          *v217 = v216;
          v217[1] = *(_WORD *)(v196 + 2 * v181);
          *(_DWORD *)(v176 + 4 * v181) = v167;
          *(_WORD *)(v196 + 2 * v181) = v401;
          v387 = v401 + 1;
          if (v183 == 2020)
          {
            v218 = *(_QWORD *)(a7 + 112);
            v220 = *(_QWORD *)(v218 + 40);
            v219 = *(_QWORD *)(v218 + 48);
            v21 = a4;
            v221 = 0;
            if (v219 >= v220 >> 7)
            {
              v284 = ((506832829 * *(_DWORD *)v180) >> 17) & 0x7FFE;
              v285 = *(_QWORD *)(v175 + 32);
              v286 = 1;
              v183 = 2020;
              v287 = v173;
              v288 = v174;
              do
              {
                v289 = v286;
                *(_QWORD *)(v218 + 40) = ++v220;
                v290 = *(unsigned __int8 *)(v285 + v284);
                if (!*(_BYTE *)(v285 + v284) || v33 < v290)
                  goto LABEL_393;
                v291 = *(unsigned __int16 *)(*(_QWORD *)(v175 + 24) + 2 * v284);
                v292 = *(unsigned int *)(*(_QWORD *)v175 + 4 * v290 + 32);
                v293 = *(_QWORD *)(*(_QWORD *)v175 + 168);
                v294 = (unsigned __int8 *)(v293 + v292 + v291 * *(unsigned __int8 *)(v285 + v284));
                if (v290 < 8)
                {
                  v174 = 0;
LABEL_398:
                  v300 = v290 & 7;
                  if ((v290 & 7) != 0)
                  {
                    v301 = v174 | v300;
                    while (v180[v174] == *v294)
                    {
                      ++v294;
                      ++v174;
                      if (!--v300)
                      {
                        v174 = v301;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v295 = 0;
                  v174 = v290 & 0xF8;
                  v296 = (unsigned __int8 *)(v293
                                           + v291 * (unint64_t)*(unsigned __int8 *)(v285 + v284)
                                           + (*(_BYTE *)(v285 + v284) & 0xF8)
                                           + v292);
                  while (1)
                  {
                    v297 = *(_QWORD *)&v294[v295];
                    v298 = *(_QWORD *)&v180[v295];
                    if (v297 != v298)
                      break;
                    v295 += 8;
                    if (v174 == v295)
                    {
                      v294 = v296;
                      goto LABEL_398;
                    }
                  }
                  v174 = v295 + (__clz(__rbit64(v298 ^ v297)) >> 3);
                }
                if (v174
                  && v174 + *(unsigned int *)(v175 + 12) > v290
                  && (v173 = v378
                           + v389
                           + v291
                           + ((((*(_QWORD *)(v175 + 16) >> (6 * (v290 - v174))) & 0x3FLL)
                             + 4 * (v290 - v174)) << *(_BYTE *)(*(_QWORD *)v175 + v290)),
                      v173 <= v90)
                  && (v299 = __clz(v173), 135 * v174 - 30 * (v299 ^ 0x1F) + 1920 >= v183))
                {
                  v221 = v290 - v174;
                  *(_QWORD *)(v218 + 48) = ++v219;
                  v183 = 135 * v174 - 30 * (v299 ^ 0x1F) + 1920;
                }
                else
                {
LABEL_393:
                  v174 = v288;
                  v173 = v287;
                }
                v286 = 0;
                ++v284;
                v287 = v173;
                v288 = v174;
              }
              while ((v289 & 1) != 0);
            }
            else
            {
              v183 = 2020;
            }
          }
          else
          {
            v221 = 0;
            v21 = a4;
          }
          a6 = v403;
          v90 = v403[10];
          v402 = v403[12];
          if (v402)
          {
            v222 = 0;
            v223 = v403[13];
            v399 = v223 + v389;
            v398 = -v223 - v396;
            v397 = v223 + v396;
            do
            {
              v224 = &a6[v222];
              v225 = v224[14];
              v227 = *(_DWORD *)(v225 + 16);
              v226 = *(_DWORD *)(v225 + 20);
              v228 = v225 + 24 + 4 * (1 << v226);
              v229 = v228 + 2 * (1 << v227);
              v230 = (_QWORD *)(v229 + 4 * *(unsigned int *)(v225 + 4));
              if (*(_DWORD *)v225 != -558043680)
                v230 = (_QWORD *)*v230;
              v231 = 0;
              v232 = v224[46];
              v233 = v399 - v232;
              v234 = *(unsigned int *)(v225 + 8);
              v235 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v180 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v225 + 12)))) >> -(char)v227;
              v236 = v399 - v232 - v234;
              v237 = *(unsigned __int16 *)(v228 + 2 * v235);
              v238 = (int *)(v229
                           + 4
                           * (*(_DWORD *)(v225
                                                      + 24
                                                      + 4 * ((0xFFFFFFFF >> -(char)v226) & v235))
                                          + v237));
              v239 = v398 + v232 + v234;
              v240 = (char *)v230 + v397 - v232;
              v241 = v183;
              v242 = v174;
              do
              {
                v243 = a8[v231];
                if (v236 < v243 && v233 >= v243)
                {
                  if (v234 + v243 - v233 >= v33)
                    v245 = v33;
                  else
                    v245 = v234 + v243 - v233;
                  if (v245 < 8)
                  {
                    v246 = 0;
                    v251 = v180;
LABEL_315:
                    if ((v245 & 7) != 0)
                    {
                      v255 = v239 + v243;
                      if (v161 < v239 + v243)
                        v255 = v161;
                      v256 = -(uint64_t)(v255 & 7);
                      v257 = &v240[v246 - v243];
                      do
                      {
                        v258 = *v257++;
                        if (v258 != *v251)
                          break;
                        ++v251;
                        ++v246;
                        v49 = __CFADD__(v256++, 1);
                      }
                      while (!v49);
                    }
                  }
                  else
                  {
                    v246 = 0;
                    v247 = v239 + v243;
                    if (v161 < v239 + v243)
                      v247 = v161;
                    v248 = -(uint64_t)(v247 >> 3);
                    while (1)
                    {
                      v249 = *(_QWORD *)&v180[v246];
                      v250 = *(_QWORD *)&v240[v246 - v243];
                      if (v249 != v250)
                        break;
                      v246 += 8;
                      v49 = __CFADD__(v248++, 1);
                      if (v49)
                      {
                        v251 = &v180[v246];
                        goto LABEL_315;
                      }
                    }
                    v246 += __clz(__rbit64(v250 ^ v249)) >> 3;
                  }
                  if (v246 >= 2)
                  {
                    v252 = 135 * v246 + 1935;
                    if (v183 < v252)
                    {
                      v253 = v252 - (((0x1CA10u >> (v231 & 0xE)) & 0xE) + 39);
                      if (!v231)
                        v253 = 135 * v246 + 1935;
                      if (v246 <= v174)
                        v254 = v174;
                      else
                        v254 = v246;
                      if (v183 < v253)
                      {
                        v242 = v246;
                        v173 = a8[v231];
                        v241 = v253;
                        v221 = 0;
                        v183 = v253;
                        v174 = v254;
                      }
                    }
                  }
                }
                ++v231;
              }
              while (v231 != 4);
              v259 = v237 == 0xFFFF;
              v21 = a4;
              if (!v259)
              {
                do
                {
                  v276 = *v238++;
                  v275 = v276;
                  v277 = v276 & 0x7FFFFFFF;
                  v269 = v233 - v277;
                  v278 = v234 - v277;
                  if (v234 - v277 >= v33)
                    v279 = v33;
                  else
                    v279 = v234 - v277;
                  v280 = v174 + v179;
                  v282 = v269 > v90 || v280 > a4 || v174 >= v279;
                  if (!v282 && *(unsigned __int8 *)(v412 + v280) == *((unsigned __int8 *)v230 + v174 + v277))
                  {
                    v260 = (char *)v230 + v277;
                    if (v279 < 8)
                    {
                      v261 = 0;
                      v266 = v180;
LABEL_352:
                      if ((v279 & 7) != 0)
                      {
                        if (v161 >= v278)
                          v273 = v278;
                        else
                          v273 = v161;
                        v274 = -(uint64_t)(v273 & 7);
                        do
                        {
                          if (v260[v261] != *v266)
                            break;
                          ++v266;
                          ++v261;
                          v49 = __CFADD__(v274++, 1);
                        }
                        while (!v49);
                      }
                    }
                    else
                    {
                      v261 = 0;
                      if (v161 >= v278)
                        v262 = v278;
                      else
                        v262 = v161;
                      v263 = -(uint64_t)(v262 >> 3);
                      while (1)
                      {
                        v264 = *(_QWORD *)&v180[v261];
                        v265 = *(_QWORD *)&v260[v261];
                        if (v264 != v265)
                          break;
                        v261 += 8;
                        v49 = __CFADD__(v263++, 1);
                        if (v49)
                        {
                          v266 = &v180[v261];
                          goto LABEL_352;
                        }
                      }
                      v261 += __clz(__rbit64(v265 ^ v264)) >> 3;
                    }
                    v267 = 135 * v261 - 30 * (__clz(v269) ^ 0x1F) + 1920;
                    if (v183 < v267)
                      v268 = v261;
                    else
                      v268 = v242;
                    if (v183 < v267)
                    {
                      v270 = v267;
                    }
                    else
                    {
                      v269 = v173;
                      v270 = v241;
                    }
                    if (v183 < v267)
                      v271 = 0;
                    else
                      v271 = v221;
                    if (v183 < v267)
                    {
                      v272 = v261;
                    }
                    else
                    {
                      v267 = v183;
                      v272 = v174;
                    }
                    if (v261 >= 4)
                    {
                      v242 = v268;
                      v173 = v269;
                      v241 = v270;
                      v221 = v271;
                      v183 = v267;
                      v174 = v272;
                    }
                  }
                }
                while ((v275 & 0x80000000) == 0);
              }
              ++v222;
              v183 = v241;
              v174 = v242;
              a6 = v403;
              v283 = v410;
            }
            while (v222 != v402);
          }
          else
          {
            v242 = v174;
            v241 = v183;
            v283 = v410;
          }
          if (v241 < v391 + 175)
            break;
          result = a7;
          ++v392;
          if (v390 <= 2)
          {
            v158 = v390 + 1;
            --v161;
            v162 = v388 + 1;
            v160 = v387;
            v405 = v173;
            v112 = v241;
            v408 = v221;
            v163 = v242;
            v159 = v283;
            if (v395 + 5 < v382)
              continue;
          }
          goto LABEL_416;
        }
        result = a7;
        v311 = v395 + v384;
        if (v395 + v384 >= v383)
          v311 = v383;
        v389 = v311;
        v173 = v405;
        v221 = v408;
        v242 = v381;
        v283 = v395;
LABEL_416:
        v12 = a10;
        a5 = v380;
        a3 = v412;
        v15 = v382;
        v13 = v384;
        if (v173 > v389 + v374)
        {
LABEL_417:
          v312 = v173 + 15;
          goto LABEL_418;
        }
        v332 = *a8;
        if (v173 == v332)
        {
          v312 = 0;
          goto LABEL_447;
        }
        v349 = a8[1];
        if (v173 == v349)
        {
          v312 = 1;
        }
        else
        {
          v350 = v173 + 3 - v332;
          if (v350 > 6)
          {
            v353 = v173 + 3 - v349;
            if (v353 > 6)
            {
              if (v173 == a8[2])
              {
                v312 = 2;
              }
              else
              {
                if (v173 != a8[3])
                  goto LABEL_417;
                v312 = 3;
              }
              goto LABEL_418;
            }
            v351 = 4 * v353;
            v352 = 266017486;
          }
          else
          {
            v351 = 4 * v350;
            v352 = 158663784;
          }
          v312 = (v352 >> v351) & 0xF;
        }
LABEL_418:
        if (v173 <= v389 + v374 && v312)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v173;
          v313 = vdupq_n_s32(v173);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v313, (int32x4_t)xmmword_2368AF3A0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v313.i8, (int32x2_t)0x3FFFFFFFDLL);
        }
LABEL_447:
        *(_DWORD *)v377 = v392;
        *(_DWORD *)(v377 + 4) = v242 | (v221 << 25);
        v333 = *((unsigned int *)a6 + 17);
        v334 = v333 + 16;
        if (v333 + 16 <= v312)
        {
          v336 = *((unsigned int *)a6 + 16);
          v337 = v312 - v333 + (4 << v336) - 16;
          v338 = (__clz(v337) ^ 0x1F) - 1;
          v339 = ((v337 >> v338) & 1 | 2) << v338;
          v312 = ((v337 & ~(-1 << v336))
                + v334
                + ((((v337 >> v338) & 1 | (2 * (v338 - v336))) + 65534) << v336)) | ((v338 - v336) << 10);
          v335 = (v337 - v339) >> v336;
        }
        else
        {
          LODWORD(v335) = 0;
        }
        *(_WORD *)(v377 + 14) = v312;
        *(_DWORD *)(v377 + 8) = v335;
        if (v392 > 5)
        {
          if (v392 > 0x81)
          {
            if (v392 > 0x841)
            {
              if (v392 >> 1 >= 0xC21)
              {
                if (v392 < 0x5842)
                  LOWORD(v340) = 22;
                else
                  LOWORD(v340) = 23;
              }
              else
              {
                LOWORD(v340) = 21;
              }
            }
            else
            {
              v340 = (__clz(v392 - 66) ^ 0x1F) + 10;
            }
          }
          else
          {
            v341 = (__clz(v392 - 2) ^ 0x1F) - 1;
            v340 = ((v392 - 2) >> v341) + 2 * v341 + 2;
          }
        }
        else
        {
          LOWORD(v340) = v392;
        }
        v354 = v221 + (int)v242;
        if (v354 > 9)
        {
          if (v354 > 0x85)
          {
            if (v354 > 0x845)
              LOWORD(v355) = 23;
            else
              v355 = (__clz(v354 - 70) ^ 0x1F) + 12;
          }
          else
          {
            v356 = v354 - 6;
            v357 = (__clz(v356) ^ 0x1F) - 1;
            v355 = (v356 >> v357) + 2 * v357 + 4;
          }
        }
        else
        {
          LOWORD(v355) = v221 + v242 - 2;
        }
        v358 = v355 & 7 | (8 * (v340 & 7));
        if ((v312 & 0x3FF) != 0 || (unsigned __int16)v340 > 7u || (unsigned __int16)v355 > 0xFu)
        {
          v360 = 3 * ((unsigned __int16)v340 >> 3) + ((unsigned __int16)(v355 & 0xFFF8) >> 3);
          v359 = ((((0x520D40u >> (2 * v360)) & 0xC0) + (v360 << 6)) | v358) + 64;
        }
        else
        {
          LOWORD(v359) = v358 | 0x40;
          if ((v355 & 0xFFF8) == 0)
            LOWORD(v359) = v355 & 7 | (8 * (v340 & 7));
        }
        *(_WORD *)(v377 + 12) = v359;
        *a12 += v392;
        v361 = v283 + 2;
        v302 = v283 + v242;
        v362 = v376;
        if (v283 + v242 < v376)
          v362 = v283 + v242;
        if (v173 < v242 >> 2)
        {
          if (v361 <= v302 - 4 * v173)
            v361 = v302 - 4 * v173;
          if (v362 < v361)
            v361 = v362;
        }
        v22 = v375 + 2 * v242 + v283;
        v23 = v377 + 16;
        if (v361 >= v362)
        {
          v14 = 0;
          goto LABEL_505;
        }
        v363 = *(_QWORD *)(result + 96);
        v364 = *(_QWORD *)(result + 104);
        v365 = v363 + 0x20000;
        v307 = *(_WORD *)(result + 80);
        do
        {
          v366 = (506832829 * *(_DWORD *)(v412 + (v361 & v21))) >> 17;
          v367 = v361 - *(unsigned int *)(v363 + 4 * v366);
          *(_BYTE *)(v363 + 196608 + (unsigned __int16)v361) = v366;
          if (v367 >= 0xFFFF)
            LOWORD(v367) = -1;
          v368 = (_WORD *)(v364 + 4 * v307);
          *v368 = v367;
          v368[1] = *(_WORD *)(v365 + 2 * v366);
          *(_WORD *)(v365 + 2 * v366) = v307++;
          *(_DWORD *)(v363 + 4 * v366) = v361++;
        }
        while (v362 != v361);
        v14 = 0;
        result = a7;
LABEL_503:
        *(_WORD *)(result + 80) = v307;
        goto LABEL_505;
      }
      result = a7;
      v14 = v392 + 1;
      v302 = v394 + 1;
      v22 = v400;
      if (v394 + 1 > v400)
      {
        v12 = a10;
        v23 = v377;
        a5 = v380;
        v15 = v382;
        v13 = v384;
        if (v302 <= v400 + v371)
        {
          v342 = v370;
          if (v394 + 9 < v370)
            v342 = v394 + 9;
          if (v302 >= v342)
            goto LABEL_505;
          v343 = *(_QWORD *)(a7 + 96);
          v344 = *(_QWORD *)(a7 + 104);
          v345 = v343 + 0x20000;
          v307 = *(_WORD *)(a7 + 80);
          do
          {
            v346 = (506832829 * *(_DWORD *)(a3 + (v302 & v21))) >> 17;
            v347 = v302 - *(unsigned int *)(v343 + 4 * v346);
            *(_BYTE *)(v343 + 196608 + (unsigned __int16)v302) = v346;
            if (v347 >= 0xFFFF)
              LOWORD(v347) = -1;
            v348 = (_WORD *)(v344 + 4 * v307);
            *v348 = v347;
            v348[1] = *(_WORD *)(v345 + 2 * v346);
            *(_WORD *)(v345 + 2 * v346) = v307++;
            *(_DWORD *)(v343 + 4 * v346) = v302;
            v14 += 2;
            v302 += 2;
          }
          while (v302 < v342);
        }
        else
        {
          v303 = v369;
          if (v394 + 17 < v369)
            v303 = v394 + 17;
          if (v302 >= v303)
            goto LABEL_505;
          v304 = *(_QWORD *)(a7 + 96);
          v305 = *(_QWORD *)(a7 + 104);
          v306 = v304 + 0x20000;
          v307 = *(_WORD *)(a7 + 80);
          do
          {
            v308 = (506832829 * *(_DWORD *)(a3 + (v302 & v21))) >> 17;
            v309 = v302 - *(unsigned int *)(v304 + 4 * v308);
            *(_BYTE *)(v304 + 196608 + (unsigned __int16)v302) = v308;
            if (v309 >= 0xFFFF)
              LOWORD(v309) = -1;
            v310 = (_WORD *)(v305 + 4 * v307);
            *v310 = v309;
            v310[1] = *(_WORD *)(v306 + 2 * v308);
            *(_WORD *)(v306 + 2 * v308) = v307++;
            *(_DWORD *)(v304 + 4 * v308) = v302;
            v14 += 4;
            v302 += 4;
          }
          while (v302 < v303);
        }
        goto LABEL_503;
      }
      v12 = a10;
      v23 = v377;
      a5 = v380;
      v15 = v382;
      v13 = v384;
LABEL_505:
      a2 = v302;
      if (v302 + 4 >= v15)
        goto LABEL_512;
    }
    if (a2)
    {
      v26 = *(unsigned __int8 *)(a3 + ((a2 - 1) & v21));
      if (a2 != 1)
      {
        v27 = *(unsigned __int8 *)(a3 + ((a2 - 2) & v21));
LABEL_19:
        v385 = v26;
        v28 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v379 + v27) | *(_BYTE *)(a5 + v26)) + 637);
        goto LABEL_20;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 0;
    goto LABEL_19;
  }
  v23 = a10;
  v302 = a2;
LABEL_512:
  *a9 = v14 + v15 - v302;
  *a11 += (v23 - v12) >> 4;
  return result;
}

unint64_t sub_23678CAD0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, int *a8, double a9, double a10, int32x4_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, _QWORD *a15)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int16 *v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  __int16 *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  int v114;
  int *v115;
  char *v116;
  unint64_t v117;
  int *v118;
  unint64_t v119;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unsigned __int8 *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unsigned __int16 *v217;
  unint64_t v218;
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  __int16 *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unsigned int v242;
  int v243;
  int *v244;
  uint64_t v245;
  char *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int8 *v256;
  unint64_t v257;
  char v258;
  uint64_t v259;
  char *v260;
  unsigned int v261;
  char *v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  int v272;
  unint64_t v273;
  char v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  unint64_t v288;
  unint64_t v289;
  char v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned __int8 *v294;
  unint64_t v295;
  unsigned __int8 *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  __int16 v307;
  uint64_t v308;
  unint64_t v309;
  _WORD *v310;
  __int16 v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  unint64_t v316;
  unint64_t v317;
  char v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int8 *v323;
  unint64_t v324;
  unsigned __int8 *v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  __int16 v336;
  uint64_t v337;
  unint64_t v338;
  _WORD *v339;
  __int16 v340;
  unint64_t v341;
  int32x4_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  unint64_t v354;
  char v355;
  unsigned int v356;
  unint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unint64_t v360;
  unsigned int v361;
  int v362;
  unsigned int v363;
  int v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  __int16 v371;
  uint64_t v372;
  unint64_t v373;
  _WORD *v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  unint64_t v414;
  int v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v420;
  uint64_t v421;

  v16 = a13;
  v17 = a6[2];
  v18 = *a12;
  v19 = a2 + result;
  v20 = a2 + result - 3;
  v376 = v20;
  if (result <= 3)
    v20 = a2;
  v382 = v20;
  v21 = *((_DWORD *)a6 + 2);
  if (*((int *)a6 + 1) >= 9)
    v22 = 512;
  else
    v22 = 64;
  v23 = a6[13];
  a11.i64[0] = *(_QWORD *)a8;
  v24 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)a8, 0), (int32x4_t)xmmword_2368AF3A0);
  v25 = vdupq_lane_s32(*(int32x2_t *)a8, 1);
  *((int32x4_t *)a8 + 1) = v24;
  *((int32x4_t *)a8 + 2) = vaddq_s32(vzip1q_s32(a11, a11), (int32x4_t)xmmword_2368AF3B0);
  v26 = vaddq_s32(v25, (int32x4_t)xmmword_2368AF3C0);
  *((int32x4_t *)a8 + 3) = v26;
  if (result >= 5)
  {
    v392 = a7 + 10;
    v389 = v17;
    v390 = (1 << v21) - 16;
    v408 = v22 + a2;
    v384 = a13;
    v385 = a5 + 256;
    v383 = v23 + 1;
    v375 = v19 - 4;
    v379 = v19 - 1;
    v377 = 4 * v22;
    v378 = v17 + 1;
    v386 = a5;
    v420 = a4;
    v418 = a3;
    v27 = a2 + result;
    v28 = a2;
    v401 = a7;
    v413 = a6;
    v388 = a2 + result;
    v380 = v23;
    v381 = v22;
    while (1)
    {
      if (v28 >= v390)
        v29 = v390;
      else
        v29 = v28;
      v30 = v28 + v17;
      if (v28 + v17 >= v390)
        v30 = v390;
      v410 = v30;
      v400 = v18;
      if (*((_DWORD *)a6 + 158))
        break;
      v33 = 0;
      v391 = 0;
LABEL_21:
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = v27 - v28;
      v393 = v33;
      v39 = a6[v33 + 88];
      v416 = a6[10];
      v40 = a7[139];
      v41 = v40 + 196608;
      v421 = a7[140];
      v42 = v28 & a4;
      v43 = (unsigned __int8 *)(a3 + (v28 & a4));
      v44 = (506832829 * *(_DWORD *)v43) >> 17;
      v45 = (v27 - v28) >> 3;
      v46 = (v27 - v28) & 7;
      v414 = (v27 - v28) & 0xFFFFFFFFFFFFFFF8;
      v47 = 2020;
      v48 = 2020;
      v49 = v392;
      do
      {
        v50 = a8[v34];
        v51 = v28 - v50;
        if (!v34 || *(unsigned __int8 *)(v41 + (unsigned __int16)(v28 - v50)) == v44)
        {
          v52 = v29 < v50 || v51 >= v28;
          if (!v52)
          {
            v53 = a3 + (v51 & a4);
            if (v38 < 8)
            {
              v58 = 0;
              v59 = v43;
LABEL_43:
              if (v46)
              {
                v61 = v46 | v58;
                v62 = v46;
                while (*(unsigned __int8 *)(v53 + v58) == *v59)
                {
                  ++v59;
                  ++v58;
                  if (!--v62)
                  {
                    v58 = v61;
                    break;
                  }
                }
                a4 = v420;
                a3 = v418;
                v49 = v392;
              }
            }
            else
            {
              v54 = 0;
              v55 = v45;
              while (1)
              {
                v56 = *(_QWORD *)&v43[v54];
                v57 = *(_QWORD *)(v53 + v54);
                if (v56 != v57)
                  break;
                v54 += 8;
                if (!--v55)
                {
                  v58 = v414;
                  v59 = &v43[v414];
                  a4 = v420;
                  a3 = v418;
                  goto LABEL_43;
                }
              }
              v58 = v54 + (__clz(__rbit64(v57 ^ v56)) >> 3);
              a4 = v420;
              a3 = v418;
            }
            if (v58 >= 2)
            {
              v60 = 135 * v58 + 1935;
              if (v47 < v60)
              {
                if (v34)
                  v60 -= ((0x1CA10u >> (v34 & 0xE)) & 0xE) + 39;
                if (v47 < v60)
                {
                  v37 = a8[v34];
                  v48 = v60;
                  v36 = v58;
                  v47 = v60;
                  v35 = v58;
                }
              }
            }
          }
        }
        ++v34;
      }
      while (v34 != 16);
      v63 = v40 + 0x20000;
      v64 = ((unsigned __int16)((506832829 * *(_DWORD *)v43) >> 16) >> 1) & 0x1FF;
      v65 = v401[138];
      v66 = *(unsigned int *)(v40 + 4 * v44);
      v67 = v28 - v66;
      if (v65)
      {
        v406 = v46;
        v68 = 0;
        v69 = *(unsigned __int16 *)(v63 + 2 * v44);
        v70 = v28 - v66;
        v71 = v421;
        do
        {
          v68 += v70;
          if (v68 > v29)
            break;
          if (v35 + v42 <= a4)
          {
            v72 = (v28 - v68) & a4;
            if (v72 + v35 <= a4)
            {
              a3 = v418;
              if (*(unsigned __int8 *)(v418 + v35 + v42) == *(unsigned __int8 *)(v418 + v72 + v35))
              {
                v73 = v418 + v72;
                if (v38 < 8)
                {
                  v78 = 0;
                  v79 = v43;
LABEL_82:
                  v86 = v406;
                  if (v406)
                  {
                    v403 = v406 | v78;
                    while (*(unsigned __int8 *)(v73 + v78) == *v79)
                    {
                      ++v79;
                      ++v78;
                      if (!--v86)
                      {
                        v78 = v403;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v74 = 0;
                  v75 = v45;
                  while (1)
                  {
                    v76 = *(_QWORD *)&v43[v74];
                    v77 = *(_QWORD *)(v73 + v74);
                    if (v76 != v77)
                      break;
                    v74 += 8;
                    if (!--v75)
                    {
                      v78 = v414;
                      v79 = &v43[v414];
                      goto LABEL_82;
                    }
                  }
                  v78 = v74 + (__clz(__rbit64(v77 ^ v76)) >> 3);
                }
                v80 = 135 * v78 - 30 * (__clz(v68) ^ 0x1F) + 1920;
                if (v47 < v80)
                  v81 = v68;
                else
                  v81 = v37;
                if (v47 < v80)
                  v82 = v80;
                else
                  v82 = v48;
                if (v47 < v80)
                  v83 = v78;
                else
                  v83 = v36;
                if (v47 < v80)
                {
                  v84 = v78;
                }
                else
                {
                  v80 = v47;
                  v84 = v35;
                }
                if (v78 >= 4)
                {
                  v37 = v81;
                  v48 = v82;
                  v36 = v83;
                  v47 = v80;
                  v35 = v84;
                }
                a4 = v420;
                a3 = v418;
              }
              else
              {
                a4 = v420;
              }
              v49 = v392;
            }
            else
            {
              a4 = v420;
              a3 = v418;
            }
          }
          v85 = (unsigned __int16 *)(v421 + (v64 << 11) + 4 * v69);
          v69 = v85[1];
          v70 = *v85;
          --v65;
        }
        while (v65);
      }
      else
      {
        v71 = v421;
      }
      v87 = *((_WORD *)v49 + v64);
      *((_WORD *)v49 + v64) = v87 + 1;
      v88 = v87 & 0x1FF;
      *(_BYTE *)(v41 + (unsigned __int16)v28) = v44;
      v89 = -1;
      if (v67 < 0xFFFF)
        v89 = v67;
      v90 = (__int16 *)(v71 + (v64 << 11) + 4 * v88);
      *v90 = v89;
      v90[1] = *(_WORD *)(v63 + 2 * v44);
      v398 = v28;
      *(_DWORD *)(v40 + 4 * v44) = v28;
      *(_WORD *)(v63 + 2 * v44) = v88;
      if (v48 == 2020)
      {
        v91 = v401[141];
        v93 = *(_QWORD *)(v91 + 40);
        v92 = *(_QWORD *)(v91 + 48);
        v94 = 0;
        if (v92 < v93 >> 7)
        {
          v48 = 2020;
          goto LABEL_94;
        }
        v313 = ((506832829 * *(_DWORD *)v43) >> 17) & 0x7FFE;
        v314 = *(_QWORD *)(v39 + 32);
        v315 = 1;
        v316 = v36;
        v48 = 2020;
        v317 = v37;
        while (2)
        {
          v318 = v315;
          *(_QWORD *)(v91 + 40) = ++v93;
          v319 = *(unsigned __int8 *)(v314 + v313);
          if (*(_BYTE *)(v314 + v313) && v38 >= v319)
          {
            v320 = *(unsigned __int16 *)(*(_QWORD *)(v39 + 24) + 2 * v313);
            v321 = *(unsigned int *)(*(_QWORD *)v39 + 4 * v319 + 32);
            v322 = *(_QWORD *)(*(_QWORD *)v39 + 168);
            v323 = (unsigned __int8 *)(v322 + v321 + v320 * *(unsigned __int8 *)(v314 + v313));
            if (v319 < 8)
            {
              v36 = 0;
LABEL_425:
              v329 = v319 & 7;
              if ((v319 & 7) != 0)
              {
                v330 = v36 | v329;
                while (v43[v36] == *v323)
                {
                  ++v323;
                  ++v36;
                  if (!--v329)
                  {
                    v36 = v330;
                    break;
                  }
                }
              }
            }
            else
            {
              v324 = 0;
              v36 = v319 & 0xF8;
              v325 = (unsigned __int8 *)(v322
                                       + v320 * (unint64_t)*(unsigned __int8 *)(v314 + v313)
                                       + (*(_BYTE *)(v314 + v313) & 0xF8)
                                       + v321);
              while (1)
              {
                v326 = *(_QWORD *)&v323[v324];
                v327 = *(_QWORD *)&v43[v324];
                if (v326 != v327)
                  break;
                v324 += 8;
                if (v36 == v324)
                {
                  v323 = v325;
                  goto LABEL_425;
                }
              }
              v36 = v324 + (__clz(__rbit64(v327 ^ v326)) >> 3);
            }
            if (v36
              && v36 + *(unsigned int *)(v39 + 12) > v319
              && (v37 = v383
                      + v410
                      + v320
                      + ((((*(_QWORD *)(v39 + 16) >> (6 * (v319 - v36))) & 0x3FLL)
                        + 4 * (v319 - v36)) << *(_BYTE *)(*(_QWORD *)v39 + v319)),
                  v37 <= v416))
            {
              v328 = __clz(v37);
              a4 = v420;
              a3 = v418;
              if (135 * v36 - 30 * (v328 ^ 0x1F) + 1920 < v48)
                goto LABEL_409;
              v94 = v319 - v36;
              *(_QWORD *)(v91 + 48) = ++v92;
              v48 = 135 * v36 - 30 * (v328 ^ 0x1F) + 1920;
            }
            else
            {
              v37 = v317;
              v36 = v316;
              a4 = v420;
              a3 = v418;
            }
          }
          else
          {
LABEL_409:
            v37 = v317;
            v36 = v316;
          }
          v315 = 0;
          ++v313;
          v316 = v36;
          v317 = v37;
          if ((v318 & 1) == 0)
            goto LABEL_94;
          continue;
        }
      }
      v94 = 0;
LABEL_94:
      v415 = v94;
      v417 = v37;
      v95 = v413[10];
      v96 = v413[12];
      if (v96)
      {
        v97 = 0;
        v98 = v413[13] + v410;
        do
        {
          v99 = &v413[v97];
          v100 = v99[14];
          v101 = *(_DWORD *)(v100 + 16);
          v102 = *(_DWORD *)(v100 + 20);
          v103 = v100 + 24;
          v104 = v100 + 24 + 4 * (1 << v102);
          v105 = v104 + 2 * (1 << v101);
          v106 = (_QWORD *)(v105 + 4 * *(unsigned int *)(v100 + 4));
          if (*(_DWORD *)v100 != -558043680)
            v106 = (_QWORD *)*v106;
          v107 = 0;
          v108 = v99[46];
          v109 = v98 - v108;
          v110 = *(unsigned int *)(v100 + 8);
          v111 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v43 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v100 + 12)))) >> -(char)v101;
          v112 = v98 - v108 - v110;
          v113 = (0xFFFFFFFF >> -(char)v102) & v111;
          v114 = *(unsigned __int16 *)(v104 + 2 * v111);
          v115 = (int *)(v105 + 4 * (*(_DWORD *)(v103 + 4 * v113) + v114));
          v116 = (char *)v106 + v98 - v108;
          v117 = v36;
          result = v48;
          v118 = a8;
          do
          {
            v119 = v118[v107];
            if (v112 < v119 && v109 >= v119)
            {
              v121 = v110 - (v109 - v119);
              if (v121 >= v38)
                v121 = v38;
              if (v121 < 8)
              {
                v123 = 0;
                v124 = v43;
LABEL_134:
                v133 = v121 & 7;
                if (v133)
                {
                  v134 = v123 | v133;
                  v135 = &v116[v123 - v119];
                  while (1)
                  {
                    v136 = *v135++;
                    if (v136 != *v124)
                      break;
                    ++v124;
                    ++v123;
                    if (!--v133)
                    {
                      v123 = v134;
                      break;
                    }
                  }
                  v118 = a8;
                }
              }
              else
              {
                v122 = 0;
                v123 = v121 & 0xFFFFFFFFFFFFFFF8;
                v124 = &v43[v121 & 0xFFFFFFFFFFFFFFF8];
                v125 = -(uint64_t)(v121 >> 3);
                while (1)
                {
                  v126 = *(_QWORD *)&v43[v122];
                  v127 = *(_QWORD *)((char *)v106 + v109 - v119 + v122);
                  if (v126 != v127)
                    break;
                  v122 += 8;
                  v52 = __CFADD__(v125++, 1);
                  if (v52)
                    goto LABEL_134;
                }
                v123 = v122 + (__clz(__rbit64(v127 ^ v126)) >> 3);
              }
              if (v123 >= 2)
              {
                v128 = 135 * v123 + 1935;
                if (v48 < v128)
                {
                  if (v107)
                    v128 -= ((0x1CA10u >> (v107 & 0xE)) & 0xE) + 39;
                  if (v123 <= v36)
                    v129 = v36;
                  else
                    v129 = v123;
                  v130 = v48 >= v128;
                  v131 = v417;
                  if (v48 < v128)
                    v131 = v119;
                  v417 = v131;
                  if (v48 < v128)
                    result = v128;
                  v132 = v415;
                  if (v48 < v128)
                    v132 = 0;
                  v415 = v132;
                  if (v48 < v128)
                  {
                    v117 = v123;
                    v48 = v128;
                  }
                  if (!v130)
                    v36 = v129;
                  v118 = a8;
                }
              }
            }
            ++v107;
          }
          while (v107 != 4);
          if (v114 != 0xFFFF)
          {
            do
            {
              v138 = *v115++;
              v137 = v138;
              v139 = v138 & 0x7FFFFFFF;
              v140 = v109 - v139;
              if (v110 - v139 >= v38)
                v141 = v38;
              else
                v141 = v110 - v139;
              v142 = v36 + v42;
              v144 = v140 > v95 || v142 > v420 || v36 >= v141;
              if (!v144 && *(unsigned __int8 *)(v418 + v142) == *((unsigned __int8 *)v106 + v36 + v139))
              {
                v145 = (char *)v106 + v139;
                if (v141 < 8)
                {
                  v147 = 0;
                  v148 = v43;
LABEL_181:
                  v160 = v141 & 7;
                  if ((v141 & 7) != 0)
                  {
                    v161 = v147 | v160;
                    while (v145[v147] == *v148)
                    {
                      ++v148;
                      ++v147;
                      if (!--v160)
                      {
                        v147 = v161;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v146 = 0;
                  v147 = v141 & 0xFFFFFFFFFFFFFFF8;
                  v148 = &v43[v141 & 0xFFFFFFFFFFFFFFF8];
                  v149 = -(uint64_t)(v141 >> 3);
                  while (1)
                  {
                    v150 = *(_QWORD *)&v43[v146];
                    v151 = *(_QWORD *)&v145[v146];
                    if (v150 != v151)
                      break;
                    v146 += 8;
                    v52 = __CFADD__(v149++, 1);
                    if (v52)
                      goto LABEL_181;
                  }
                  v147 = v146 + (__clz(__rbit64(v151 ^ v150)) >> 3);
                }
                v152 = __clz(v140) ^ 0x1F;
                v153 = 135 * v147 - 30 * v152 + 1920;
                v154 = v417;
                if (v48 < v153)
                {
                  v155 = 135 * v147 - 30 * v152 + 1920;
                }
                else
                {
                  v140 = v417;
                  v155 = result;
                }
                v156 = v415;
                if (v48 < v153)
                  v157 = 0;
                else
                  v157 = v415;
                if (v48 < v153)
                  v158 = v147;
                else
                  v158 = v117;
                if (v48 < v153)
                {
                  v159 = v147;
                }
                else
                {
                  v153 = v48;
                  v159 = v36;
                }
                if (v147 >= 4)
                  v154 = v140;
                v417 = v154;
                if (v147 >= 4)
                {
                  result = v155;
                  v156 = v157;
                }
                v415 = v156;
                if (v147 >= 4)
                {
                  v117 = v158;
                  v48 = v153;
                  v36 = v159;
                }
              }
            }
            while ((v137 & 0x80000000) == 0);
          }
          ++v97;
          v162 = v117;
          v36 = v117;
          v48 = result;
          a4 = v420;
          a3 = v418;
        }
        while (v97 != v96);
      }
      else
      {
        result = v48;
        v162 = v36;
      }
      if (result >= 0x7E5)
      {
        v397 = result;
        v163 = 0;
        v164 = v398;
        v165 = v379 - v398;
        v166 = v378 + v398;
        a7 = v401;
        a6 = v413;
        v17 = v389;
        while (1)
        {
          v396 = v163;
          if (v166 >= v390)
            v167 = v390;
          else
            v167 = v166;
          v404 = v167;
          --v38;
          v387 = v162;
          v168 = v162 - 1;
          if (v162 - 1 >= v38)
            v168 = v38;
          if (*((int *)a6 + 1) >= 5)
            v168 = 0;
          v169 = v164 + 1;
          if (v164 + 1 < v390)
            v170 = v164 + 1;
          else
            v170 = v390;
          v171 = v169 + v17;
          if (v169 + v17 >= v390)
            v171 = v390;
          v394 = v166;
          v395 = v171;
          v399 = v164;
          if (*((_DWORD *)a6 + 158))
          {
            v172 = *((unsigned __int8 *)a6
                   + (*(_BYTE *)(v385 + v391) | *(_BYTE *)(v386 + *(unsigned __int8 *)(a3 + (v164 & a4))))
                   + 637);
            v391 = *(unsigned __int8 *)(a3 + (v164 & a4));
          }
          else
          {
            v172 = v393;
          }
          v173 = 0;
          v174 = 0;
          v175 = 0;
          v393 = v172;
          v176 = a6[v172 + 88];
          v177 = a7[139];
          v178 = v177 + 196608;
          v179 = a7[140];
          v180 = v169 & a4;
          v181 = (unsigned __int8 *)(a3 + (v169 & a4));
          v182 = (506832829 * *(_DWORD *)v181) >> 17;
          v183 = 2020;
          v184 = 2020;
          do
          {
            v185 = a8[v173];
            v186 = v169 - v185;
            if ((!v173 || *(unsigned __int8 *)(v178 + (unsigned __int16)(v169 - v185)) == v182)
              && v170 >= v185
              && v186 < v169)
            {
              v188 = a3 + (v186 & a4);
              if (v38 < 8)
              {
                v189 = 0;
                v193 = (unsigned __int8 *)(a3 + (v169 & a4));
LABEL_228:
                if ((v38 & 7) != 0)
                {
                  v195 = v38 & 7;
                  do
                  {
                    result = *(unsigned __int8 *)(v188 + v189);
                    if ((_DWORD)result != *v193)
                      break;
                    ++v193;
                    ++v189;
                    --v195;
                  }
                  while (v195);
                }
              }
              else
              {
                v189 = 0;
                v190 = v38 >> 3;
                while (1)
                {
                  v191 = *(_QWORD *)&v181[v189];
                  v192 = *(_QWORD *)(v188 + v189);
                  if (v191 != v192)
                    break;
                  v189 += 8;
                  if (!--v190)
                  {
                    v193 = &v181[v189];
                    goto LABEL_228;
                  }
                }
                v189 += __clz(__rbit64(v192 ^ v191)) >> 3;
              }
              if (v189 >= 2)
              {
                v194 = 135 * v189 + 1935;
                if (v183 < v194)
                {
                  result = 117264;
                  if (v173)
                    v194 -= ((0x1CA10u >> (v173 & 0xE)) & 0xE) + 39;
                  if (v183 < v194)
                  {
                    v175 = v189;
                    v174 = a8[v173];
                    v184 = v194;
                    v183 = v194;
                    v168 = v189;
                  }
                }
              }
            }
            ++v173;
          }
          while (v173 != 16);
          v196 = v177;
          v197 = v177 + 0x20000;
          v198 = ((unsigned __int16)((506832829 * *(_DWORD *)v181) >> 16) >> 1) & 0x1FF;
          v199 = v401[138];
          v402 = v169;
          v200 = v169 - *(unsigned int *)(v196 + 4 * v182);
          v411 = v176;
          if (v199)
          {
            v201 = 0;
            v202 = *(unsigned __int16 *)(v197 + 2 * v182);
            v203 = v200;
            v204 = v179 + (v198 << 11);
            do
            {
              v201 += v203;
              if (v201 > v170)
                break;
              result = v420;
              if (v168 + v180 <= v420)
              {
                v205 = (v402 - v201) & v420;
                if (v205 + v168 <= v420)
                {
                  result = *(unsigned __int8 *)(v418 + v205 + v168);
                  if (*(unsigned __int8 *)(v418 + v168 + v180) == (_DWORD)result)
                  {
                    v206 = v418 + v205;
                    if (v38 < 8)
                    {
                      v208 = 0;
                      v212 = v181;
LABEL_263:
                      v207 = v179;
                      v218 = v38 & 7;
                      if ((v38 & 7) != 0)
                      {
                        do
                        {
                          if (*(unsigned __int8 *)(v206 + v208) != *v212)
                            break;
                          ++v212;
                          ++v208;
                          --v218;
                        }
                        while (v218);
                      }
                    }
                    else
                    {
                      v207 = v179;
                      v208 = 0;
                      v209 = v38 >> 3;
                      while (1)
                      {
                        v210 = *(_QWORD *)&v181[v208];
                        v211 = *(_QWORD *)(v206 + v208);
                        if (v210 != v211)
                          break;
                        v208 += 8;
                        if (!--v209)
                        {
                          v212 = &v181[v208];
                          v179 = v207;
                          goto LABEL_263;
                        }
                      }
                      v208 += __clz(__rbit64(v211 ^ v210)) >> 3;
                    }
                    v213 = 135 * v208 - 30 * (__clz(v201) ^ 0x1F) + 1920;
                    if (v183 < v213)
                      result = v208;
                    else
                      result = v175;
                    if (v183 < v213)
                      v214 = v201;
                    else
                      v214 = v174;
                    if (v183 < v213)
                      v215 = v213;
                    else
                      v215 = v184;
                    if (v183 < v213)
                    {
                      v216 = v208;
                    }
                    else
                    {
                      v213 = v183;
                      v216 = v168;
                    }
                    if (v208 >= 4)
                    {
                      v175 = result;
                      v174 = v214;
                      v184 = v215;
                      v183 = v213;
                      v168 = v216;
                    }
                    v179 = v207;
                  }
                }
              }
              v217 = (unsigned __int16 *)(v204 + 4 * v202);
              v202 = v217[1];
              v203 = *v217;
              --v199;
            }
            while (v199);
          }
          v219 = *((_WORD *)v392 + v198);
          *((_WORD *)v392 + v198) = v219 + 1;
          v220 = v219 & 0x1FF;
          *(_BYTE *)(v178 + (unsigned __int16)v402) = v182;
          v221 = -1;
          if (v200 < 0xFFFF)
            v221 = v200;
          v222 = (__int16 *)(v179 + (v198 << 11) + 4 * v220);
          *v222 = v221;
          v222[1] = *(_WORD *)(v197 + 2 * v182);
          *(_DWORD *)(v196 + 4 * v182) = v402;
          *(_WORD *)(v197 + 2 * v182) = v220;
          if (v184 == 2020)
          {
            v223 = v401[141];
            v225 = *(_QWORD *)(v223 + 40);
            v224 = *(_QWORD *)(v223 + 48);
            a4 = v420;
            a3 = v418;
            v226 = 0;
            if (v224 >= v225 >> 7)
            {
              v285 = ((506832829 * *(_DWORD *)v181) >> 17) & 0x7FFE;
              v286 = *(_QWORD *)(v411 + 32);
              v287 = 1;
              v184 = 2020;
              v288 = v174;
              v289 = v175;
              do
              {
                v290 = v287;
                *(_QWORD *)(v223 + 40) = ++v225;
                v291 = *(unsigned __int8 *)(v286 + v285);
                if (!*(_BYTE *)(v286 + v285) || v38 < v291)
                  goto LABEL_383;
                result = *(unsigned __int16 *)(*(_QWORD *)(v411 + 24) + 2 * v285);
                v292 = *(unsigned int *)(*(_QWORD *)v411 + 4 * v291 + 32);
                v293 = *(_QWORD *)(*(_QWORD *)v411 + 168);
                v294 = (unsigned __int8 *)(v293 + v292 + result * *(unsigned __int8 *)(v286 + v285));
                if (v291 < 8)
                {
                  v175 = 0;
LABEL_388:
                  v299 = v291 & 7;
                  if ((v291 & 7) != 0)
                  {
                    v300 = v175 | v299;
                    while (v181[v175] == *v294)
                    {
                      ++v294;
                      ++v175;
                      if (!--v299)
                      {
                        v175 = v300;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v295 = 0;
                  v175 = v291 & 0xF8;
                  v296 = (unsigned __int8 *)(v293
                                           + result * (unint64_t)*(unsigned __int8 *)(v286 + v285)
                                           + (*(_BYTE *)(v286 + v285) & 0xF8)
                                           + v292);
                  while (1)
                  {
                    v297 = *(_QWORD *)&v294[v295];
                    v298 = *(_QWORD *)&v181[v295];
                    if (v297 != v298)
                      break;
                    v295 += 8;
                    if (v175 == v295)
                    {
                      v294 = v296;
                      goto LABEL_388;
                    }
                  }
                  v175 = v295 + (__clz(__rbit64(v298 ^ v297)) >> 3);
                }
                a4 = v420;
                a3 = v418;
                if (v175
                  && v175 + *(unsigned int *)(v411 + 12) > v291
                  && (result += v383 + v395,
                      v174 = result
                           + ((((*(_QWORD *)(v411 + 16) >> (6 * (v291 - v175))) & 0x3FLL)
                             + 4 * (v291 - v175)) << *(_BYTE *)(*(_QWORD *)v411 + v291)),
                      v174 <= v95)
                  && (result = 135 * v175 - 30 * (__clz(v174) ^ 0x1F), result + 1920 >= v184))
                {
                  v226 = v291 - v175;
                  *(_QWORD *)(v223 + 48) = ++v224;
                  v184 = result + 1920;
                }
                else
                {
LABEL_383:
                  v175 = v289;
                  v174 = v288;
                }
                v287 = 0;
                ++v285;
                v288 = v174;
                v289 = v175;
              }
              while ((v290 & 1) != 0);
            }
            else
            {
              v184 = 2020;
            }
          }
          else
          {
            v226 = 0;
            a4 = v420;
            a3 = v418;
          }
          a6 = v413;
          v95 = v413[10];
          v412 = v413[12];
          if (v412)
          {
            v227 = 0;
            v228 = v413[13];
            v409 = v228 + v395;
            v407 = -v228 - v404;
            v405 = v228 + v404;
            do
            {
              v229 = &a6[v227];
              v230 = v229[14];
              v232 = *(_DWORD *)(v230 + 16);
              v231 = *(_DWORD *)(v230 + 20);
              v233 = v230 + 24;
              v234 = v230 + 24 + 4 * (1 << v231);
              v235 = v234 + 2 * (1 << v232);
              v236 = (_QWORD *)(v235 + 4 * *(unsigned int *)(v230 + 4));
              if (*(_DWORD *)v230 != -558043680)
                v236 = (_QWORD *)*v236;
              v237 = 0;
              result = v229[46];
              v238 = v409 - result;
              v239 = *(unsigned int *)(v230 + 8);
              v240 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v181 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v230 + 12)))) >> -(char)v232;
              v241 = v409 - result - v239;
              v242 = (0xFFFFFFFF >> -(char)v231) & v240;
              v243 = *(unsigned __int16 *)(v234 + 2 * v240);
              v244 = (int *)(v235 + 4 * (*(_DWORD *)(v233 + 4 * v242) + v243));
              v245 = v407 + result + v239;
              v246 = (char *)v236 + v405 - result;
              v247 = v184;
              v248 = v175;
              do
              {
                v249 = a8[v237];
                if (v241 < v249 && v238 >= v249)
                {
                  v251 = v239 + v249 - v238;
                  if (v251 >= v38)
                    v251 = v38;
                  if (v251 < 8)
                  {
                    v252 = 0;
                    v256 = v181;
LABEL_306:
                    if ((v251 & 7) != 0)
                    {
                      v258 = v245 + v249;
                      if (v165 < v245 + v249)
                        v258 = v165;
                      v259 = -(uint64_t)(v258 & 7);
                      v260 = &v246[v252 - v249];
                      do
                      {
                        v261 = *v260++;
                        result = v261;
                        if (v261 != *v256)
                          break;
                        ++v256;
                        ++v252;
                        v52 = __CFADD__(v259++, 1);
                      }
                      while (!v52);
                    }
                  }
                  else
                  {
                    v252 = 0;
                    v253 = v245 + v249;
                    if (v165 < v245 + v249)
                      v253 = v165;
                    v254 = -(uint64_t)(v253 >> 3);
                    while (1)
                    {
                      v255 = *(_QWORD *)&v181[v252];
                      result = *(_QWORD *)&v246[v252 - v249];
                      if (v255 != result)
                        break;
                      v252 += 8;
                      v52 = __CFADD__(v254++, 1);
                      if (v52)
                      {
                        v256 = &v181[v252];
                        goto LABEL_306;
                      }
                    }
                    v252 += __clz(__rbit64(result ^ v255)) >> 3;
                  }
                  if (v252 >= 2)
                  {
                    result = 1935;
                    v257 = 135 * v252 + 1935;
                    if (v184 < v257)
                    {
                      if (v237)
                        v257 -= ((0x1CA10u >> (v237 & 0xE)) & 0xE) + 39;
                      if (v252 <= v175)
                        result = v175;
                      else
                        result = v252;
                      if (v184 < v257)
                      {
                        v248 = v252;
                        v174 = a8[v237];
                        v247 = v257;
                        v226 = 0;
                        v184 = v257;
                        v175 = result;
                      }
                    }
                  }
                }
                ++v237;
              }
              while (v237 != 4);
              a4 = v420;
              a3 = v418;
              if (v243 != 0xFFFF)
              {
                do
                {
                  v277 = *v244++;
                  v276 = v277;
                  v278 = v277 & 0x7FFFFFFF;
                  v271 = v238 - v278;
                  v279 = v239 - v278;
                  if (v239 - v278 >= v38)
                    v280 = v38;
                  else
                    v280 = v239 - v278;
                  v281 = v175 + v180;
                  v283 = v271 > v95 || v281 > v420 || v175 >= v280;
                  if (!v283 && *(unsigned __int8 *)(v418 + v281) == *((unsigned __int8 *)v236 + v175 + v278))
                  {
                    v262 = (char *)v236 + v278;
                    if (v280 < 8)
                    {
                      v263 = 0;
                      v268 = v181;
LABEL_342:
                      if ((v280 & 7) != 0)
                      {
                        if (v165 >= v279)
                          v274 = v279;
                        else
                          v274 = v165;
                        v275 = -(uint64_t)(v274 & 7);
                        do
                        {
                          if (v262[v263] != *v268)
                            break;
                          ++v268;
                          ++v263;
                          v52 = __CFADD__(v275++, 1);
                        }
                        while (!v52);
                      }
                    }
                    else
                    {
                      v263 = 0;
                      if (v165 >= v279)
                        v264 = v239 - v278;
                      else
                        v264 = v165;
                      v265 = -(uint64_t)(v264 >> 3);
                      while (1)
                      {
                        v266 = *(_QWORD *)&v181[v263];
                        v267 = *(_QWORD *)&v262[v263];
                        if (v266 != v267)
                          break;
                        v263 += 8;
                        v52 = __CFADD__(v265++, 1);
                        if (v52)
                        {
                          v268 = &v181[v263];
                          goto LABEL_342;
                        }
                      }
                      v263 += __clz(__rbit64(v267 ^ v266)) >> 3;
                    }
                    v269 = 135 * v263 - 30 * (__clz(v271) ^ 0x1F) + 1920;
                    if (v184 < v269)
                      v270 = v263;
                    else
                      v270 = v248;
                    if (v184 < v269)
                    {
                      result = v269;
                    }
                    else
                    {
                      v271 = v174;
                      result = v247;
                    }
                    if (v184 < v269)
                      v272 = 0;
                    else
                      v272 = v226;
                    if (v184 < v269)
                    {
                      v273 = v263;
                    }
                    else
                    {
                      v269 = v184;
                      v273 = v175;
                    }
                    if (v263 >= 4)
                    {
                      v248 = v270;
                      v174 = v271;
                      v247 = result;
                      v226 = v272;
                      v184 = v269;
                      v175 = v273;
                    }
                  }
                }
                while ((v276 & 0x80000000) == 0);
              }
              ++v227;
              v184 = v247;
              v175 = v248;
              a6 = v413;
            }
            while (v227 != v412);
          }
          else
          {
            v248 = v175;
            v247 = v184;
          }
          if (v247 < v397 + 175)
            break;
          a7 = v401;
          ++v400;
          v17 = v389;
          if (v396 > 2)
          {
            v284 = v402;
            goto LABEL_439;
          }
          v163 = v396 + 1;
          --v165;
          v166 = v394 + 1;
          v417 = v174;
          v397 = v247;
          v415 = v226;
          v162 = v248;
          v284 = v402;
          v164 = v402;
          if (v399 + 5 >= v388)
            goto LABEL_439;
        }
        v17 = v389;
        v312 = v399 + v389;
        if (v399 + v389 >= v390)
          v312 = v390;
        v395 = v312;
        v174 = v417;
        v226 = v415;
        v248 = v387;
        v284 = v399;
        a7 = v401;
LABEL_439:
        v16 = a13;
        if (v174 > v395 + v380)
        {
LABEL_440:
          v341 = v174 + 15;
          goto LABEL_441;
        }
        v343 = *a8;
        if (v174 == v343)
        {
          v341 = 0;
LABEL_446:
          *(_DWORD *)v384 = v400;
          *(_DWORD *)(v384 + 4) = v248 | (v226 << 25);
          v344 = *((unsigned int *)a6 + 17);
          v345 = v344 + 16;
          if (v344 + 16 <= v341)
          {
            v347 = *((unsigned int *)a6 + 16);
            v348 = v341 - v344 + (4 << v347) - 16;
            v349 = (__clz(v348) ^ 0x1F) - 1;
            v350 = ((v348 >> v349) & 1 | 2) << v349;
            v341 = ((v348 & ~(-1 << v347))
                  + v345
                  + ((((v348 >> v349) & 1 | (2 * (v349 - v347))) + 65534) << v347)) | ((v349 - v347) << 10);
            v346 = (v348 - v350) >> v347;
          }
          else
          {
            LODWORD(v346) = 0;
          }
          *(_WORD *)(v384 + 14) = v341;
          *(_DWORD *)(v384 + 8) = v346;
          if (v400 > 5)
          {
            if (v400 > 0x81)
            {
              if (v400 > 0x841)
              {
                if (v400 >> 1 >= 0xC21)
                {
                  if (v400 < 0x5842)
                    LOWORD(v351) = 22;
                  else
                    LOWORD(v351) = 23;
                }
                else
                {
                  LOWORD(v351) = 21;
                }
              }
              else
              {
                v351 = (__clz(v400 - 66) ^ 0x1F) + 10;
              }
            }
            else
            {
              v352 = __clz(v400 - 2);
              v351 = ((v400 - 2) >> ((v352 ^ 0x1F) - 1)) + 2 * ((v352 ^ 0x1F) - 1) + 2;
            }
          }
          else
          {
            LOWORD(v351) = v400;
          }
          v358 = v226 + (int)v248;
          if (v358 > 9)
          {
            if (v358 > 0x85)
            {
              if (v358 > 0x845)
                LOWORD(v359) = 23;
              else
                v359 = (__clz(v358 - 70) ^ 0x1F) + 12;
            }
            else
            {
              v360 = v358 - 6;
              v361 = (__clz(v360) ^ 0x1F) - 1;
              v359 = (v360 >> v361) + 2 * v361 + 4;
            }
          }
          else
          {
            LOWORD(v359) = v226 + v248 - 2;
          }
          v362 = v359 & 7 | (8 * (v351 & 7));
          if ((v341 & 0x3FF) != 0 || (unsigned __int16)v351 > 7u || (unsigned __int16)v359 > 0xFu)
          {
            v364 = 3 * ((unsigned __int16)v351 >> 3) + ((unsigned __int16)(v359 & 0xFFF8) >> 3);
            v363 = ((((0x520D40u >> (2 * v364)) & 0xC0) + (v364 << 6)) | v362) + 64;
          }
          else
          {
            LOWORD(v363) = v362 | 0x40;
            if ((v359 & 0xFFF8) == 0)
              LOWORD(v363) = v359 & 7 | (8 * (v351 & 7));
          }
          *(_WORD *)(v384 + 12) = v363;
          *a15 += v400;
          v365 = v284 + 2;
          v301 = v284 + v248;
          v366 = v382;
          if (v284 + v248 < v382)
            v366 = v284 + v248;
          if (v174 < v248 >> 2)
          {
            if (v365 <= v301 - 4 * v174)
              v365 = v301 - 4 * v174;
            if (v366 < v365)
              v365 = v366;
          }
          v408 = v381 + 2 * v248 + v284;
          v384 += 16;
          if (v365 < v366)
          {
            v367 = a7[139];
            v368 = v367 + 0x20000;
            v369 = a7[140];
            do
            {
              v370 = (506832829 * *(_DWORD *)(a3 + (v365 & a4))) >> 17;
              v371 = *((_WORD *)v392 + (v370 & 0x1FF));
              *((_WORD *)v392 + (v370 & 0x1FF)) = v371 + 1;
              v372 = v371 & 0x1FF;
              v373 = v365 - *(unsigned int *)(v367 + 4 * v370);
              *(_BYTE *)(v367 + 196608 + (unsigned __int16)v365) = v370;
              if (v373 >= 0xFFFF)
                LOWORD(v373) = -1;
              v374 = (_WORD *)(v369 + ((unint64_t)(v370 & 0x1FF) << 11) + 4 * v372);
              *v374 = v373;
              result = *(unsigned __int16 *)(v368 + 2 * v370);
              v374[1] = result;
              *(_DWORD *)(v367 + 4 * v370) = v365;
              *(_WORD *)(v368 + 2 * v370) = v372;
              ++v365;
            }
            while (v366 != v365);
            v18 = 0;
            a7 = v401;
            a5 = v386;
            v27 = v388;
            goto LABEL_496;
          }
          v18 = 0;
          goto LABEL_495;
        }
        v353 = a8[1];
        if (v174 == v353)
        {
          v341 = 1;
        }
        else
        {
          v354 = v174 + 3 - v343;
          if (v354 > 6)
          {
            v357 = v174 + 3 - v353;
            if (v357 > 6)
            {
              if (v174 == a8[2])
              {
                v341 = 2;
              }
              else
              {
                if (v174 != a8[3])
                  goto LABEL_440;
                v341 = 3;
              }
              goto LABEL_441;
            }
            v355 = 4 * v357;
            v356 = 266017486;
          }
          else
          {
            v355 = 4 * v354;
            v356 = 158663784;
          }
          v341 = (v356 >> v355) & 0xF;
        }
LABEL_441:
        if (v174 <= v395 + v380 && v341)
        {
          a8[3] = a8[2];
          v26.i64[0] = *(_QWORD *)a8;
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v174;
          v24.i32[0] = v174;
          v342 = vzip1q_s32(v24, v26);
          v24 = vaddq_s32(vzip1q_s32(v342, v342), (int32x4_t)xmmword_2368AF3B0);
          *((int32x4_t *)a8 + 1) = vaddq_s32(vdupq_n_s32(v174), (int32x4_t)xmmword_2368AF3A0);
          *((int32x4_t *)a8 + 2) = v24;
          v26 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v26.i8, 0), (int32x4_t)xmmword_2368AF3C0);
          *((int32x4_t *)a8 + 3) = v26;
        }
        goto LABEL_446;
      }
      v18 = v400 + 1;
      v301 = v398 + 1;
      v16 = a13;
      a7 = v401;
      a6 = v413;
      v17 = v389;
      if (v398 + 1 > v408)
      {
        if (v301 <= v408 + v377)
        {
          v331 = v398 + 9;
          if (v398 + 9 >= v376)
            v331 = v376;
          if (v301 >= v331)
            goto LABEL_495;
          v332 = v401[139];
          v333 = v332 + 0x20000;
          v334 = v401[140];
          do
          {
            v335 = (506832829 * *(_DWORD *)(a3 + (v301 & a4))) >> 17;
            v336 = *((_WORD *)v392 + (v335 & 0x1FF));
            *((_WORD *)v392 + (v335 & 0x1FF)) = v336 + 1;
            v337 = v336 & 0x1FF;
            v338 = v301 - *(unsigned int *)(v332 + 4 * v335);
            result = (unsigned __int16)v301;
            *(_BYTE *)(v332 + 196608 + (unsigned __int16)v301) = v335;
            if (v338 >= 0xFFFF)
              LOWORD(v338) = -1;
            v339 = (_WORD *)(v334 + ((unint64_t)(v335 & 0x1FF) << 11) + 4 * v337);
            *v339 = v338;
            v340 = *(_WORD *)(v333 + 2 * v335);
            *(_DWORD *)(v332 + 4 * v335) = v301;
            v339[1] = v340;
            *(_WORD *)(v333 + 2 * v335) = v337;
            v18 += 2;
            v301 += 2;
          }
          while (v301 < v331);
        }
        else
        {
          v302 = v398 + 17;
          if (v398 + 17 >= v375)
            v302 = v375;
          if (v301 >= v302)
            goto LABEL_495;
          v303 = v401[139];
          v304 = v303 + 0x20000;
          v305 = v401[140];
          do
          {
            v306 = (506832829 * *(_DWORD *)(a3 + (v301 & a4))) >> 17;
            v307 = *((_WORD *)v392 + (v306 & 0x1FF));
            *((_WORD *)v392 + (v306 & 0x1FF)) = v307 + 1;
            v308 = v307 & 0x1FF;
            v309 = v301 - *(unsigned int *)(v303 + 4 * v306);
            result = (unsigned __int16)v301;
            *(_BYTE *)(v303 + 196608 + (unsigned __int16)v301) = v306;
            if (v309 >= 0xFFFF)
              LOWORD(v309) = -1;
            v310 = (_WORD *)(v305 + ((unint64_t)(v306 & 0x1FF) << 11) + 4 * v308);
            *v310 = v309;
            v311 = *(_WORD *)(v304 + 2 * v306);
            *(_DWORD *)(v303 + 4 * v306) = v301;
            v310[1] = v311;
            *(_WORD *)(v304 + 2 * v306) = v308;
            v18 += 4;
            v301 += 4;
          }
          while (v301 < v302);
        }
        a7 = v401;
      }
LABEL_495:
      a5 = v386;
      v27 = v388;
LABEL_496:
      v28 = v301;
      if (v301 + 4 >= v27)
        goto LABEL_503;
    }
    if (v28)
    {
      v31 = *(unsigned __int8 *)(a3 + ((v28 - 1) & a4));
      if (v28 != 1)
      {
        v32 = *(unsigned __int8 *)(a3 + ((v28 - 2) & a4));
LABEL_20:
        v391 = v31;
        v33 = *((unsigned __int8 *)a6 + (*(_BYTE *)(v385 + v32) | *(_BYTE *)(a5 + v31)) + 637);
        goto LABEL_21;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = 0;
    goto LABEL_20;
  }
  v384 = a13;
  v301 = a2;
  v27 = a2 + result;
LABEL_503:
  *a12 = v18 + v27 - v301;
  *a14 += (v384 - v16) >> 4;
  return result;
}

unint64_t sub_23678E5B4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  int v90;
  int *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  BOOL v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  unsigned __int8 *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  unint64_t v156;
  uint64_t v157;
  int64x2_t v158;
  int8x16_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  int v206;
  int *v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int8 *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char v223;
  uint64_t v224;
  char *v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  BOOL v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int v273;
  unint64_t v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v312;
  uint64_t v313;
  int8x16_t v314;
  int8x16_t v315;
  uint64_t v316;

  v11 = a9;
  v316 = *MEMORY[0x24BDAC8D0];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v285 = v14;
  if (result <= 7)
    v14 = a2;
  v289 = v14;
  v15 = 512;
  if (*(int *)(a5 + 4) < 9)
    v15 = 64;
  if (result < 9)
  {
    v21 = a9;
    v252 = a2;
    goto LABEL_447;
  }
  v294 = (1 << *(_DWORD *)(a5 + 8)) - 16;
  v287 = *(_QWORD *)(a5 + 104);
  v17 = v15 + a2;
  v18 = *(_QWORD *)(a6 + 88);
  v288 = v15;
  v19 = a2;
  v284 = 4 * v15;
  v293 = *(_QWORD *)(a5 + 16);
  v286 = v13 - 1;
  v20 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
  v21 = a9;
  v313 = a3;
  v309 = v18;
  v292 = a2 + result;
  do
  {
    v290 = v21;
    v299 = v12;
    v22 = v13 - v19;
    if (v19 >= v294)
      v23 = v294;
    else
      v23 = v19;
    if (v19 + v293 >= v294)
      v24 = v294;
    else
      v24 = v19 + v293;
    v25 = v19 & a4;
    v26 = (unsigned __int8 *)(a3 + (v19 & a4));
    v27 = *v26;
    v28 = *a7;
    v302 = v19;
    v304 = v17;
    if (v19 < v28)
      goto LABEL_24;
    v29 = (unsigned __int8 *)(a3 + (a4 & (v19 - v28)));
    if (v27 != *v29)
      goto LABEL_24;
    v312 = *a7;
    if (v22 < 8)
    {
      result = 0;
      v31 = (unsigned __int8 *)(a3 + (v19 & a4));
LABEL_441:
      v281 = v22 & 7;
      if ((v22 & 7) != 0)
      {
        v282 = result | v281;
        while (v29[result] == *v31)
        {
          ++v31;
          ++result;
          if (!--v281)
          {
            result = v282;
            break;
          }
        }
      }
    }
    else
    {
      v30 = 0;
      result = v22 & 0xFFFFFFFFFFFFFFF8;
      v31 = (unsigned __int8 *)(a3 + v25 + (v22 & 0xFFFFFFFFFFFFFFF8));
      v32 = v22 >> 3;
      while (1)
      {
        v33 = *(_QWORD *)&v26[v30];
        v34 = *(_QWORD *)&v29[v30];
        if (v33 != v34)
          break;
        v30 += 8;
        if (!--v32)
          goto LABEL_441;
      }
      result = v30 + (__clz(__rbit64(v34 ^ v33)) >> 3);
    }
    if (result >= 4 && (v35 = 135 * result + 1935, v35 >= 0x7E5))
    {
      v27 = *(unsigned __int8 *)(a3 + result + v25);
    }
    else
    {
LABEL_24:
      v312 = 0;
      result = 0;
      v35 = 2020;
    }
    v36 = 0;
    v37 = vdupq_n_s64((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)v26) >> 44);
    v314 = vandq_s8((int8x16_t)vaddq_s64(v37, (int64x2_t)xmmword_2368AF3D0), v20);
    v315 = vandq_s8((int8x16_t)vaddq_s64(v37, (int64x2_t)xmmword_2368AF3E0), v20);
    do
    {
      v38 = *(unsigned int *)(v18 + 4 * v314.i64[v36]);
      v39 = v302 - v38;
      if (v27 != *(unsigned __int8 *)(a3 + (v38 & a4) + result) || v302 == v38 || v39 > v23)
        goto LABEL_43;
      v42 = a3 + (v38 & a4);
      if (v22 < 8)
      {
        v47 = 0;
        v48 = v26;
LABEL_46:
        if ((v22 & 7) == 0)
          goto LABEL_40;
        v50 = v22 & 7 | v47;
        v51 = v22 & 7;
        while (*(unsigned __int8 *)(v42 + v47) == *v48)
        {
          ++v48;
          ++v47;
          if (!--v51)
          {
            v47 = v50;
            break;
          }
        }
      }
      else
      {
        v43 = 0;
        v44 = v22 >> 3;
        while (1)
        {
          v45 = *(_QWORD *)&v26[v43];
          v46 = *(_QWORD *)(v42 + v43);
          if (v45 != v46)
            break;
          v43 += 8;
          if (!--v44)
          {
            v47 = v22 & 0xFFFFFFFFFFFFFFF8;
            v48 = &v26[v22 & 0xFFFFFFFFFFFFFFF8];
            v18 = v309;
            goto LABEL_46;
          }
        }
        v47 = v43 + (__clz(__rbit64(v46 ^ v45)) >> 3);
      }
      v18 = v309;
LABEL_40:
      if (v47 >= 4)
      {
        v49 = __clz(v39) ^ 0x1F;
        if (v35 < 135 * v47 - 30 * v49 + 1920)
        {
          v27 = *(unsigned __int8 *)(a3 + v47 + v25);
          v312 = v39;
          v35 = 135 * v47 - 30 * v49 + 1920;
          result = v47;
        }
      }
LABEL_43:
      ++v36;
    }
    while (v36 != 4);
    *(_DWORD *)(v18 + 4 * *(uint64_t *)((char *)v314.i64 + (v302 & 0x18))) = v302;
    if ((v302 & 3) != 0)
    {
      v53 = a5;
    }
    else
    {
      v52 = a6;
      v53 = a5;
      if (v22 >= 0x20)
      {
        v54 = *(_QWORD *)(a6 + 112);
        if (v54 <= v302)
        {
          v55 = *(_DWORD *)(a6 + 124);
          v56 = *(_DWORD *)(a6 + 128);
          v57 = *(_DWORD *)(a6 + 96);
          do
          {
            v58 = *(unsigned __int8 *)(a3 + (v54 & a4));
            v59 = *(unsigned __int8 *)(a3 + ((v54 + 32) & a4));
            if ((v57 & 0x3F000000) == 0)
            {
              v60 = *(_QWORD *)(a6 + 104);
              v61 = *(unsigned int *)(v60 + 4 * (v57 & 0x3FFFFFFF));
              *(_DWORD *)(v60 + 4 * (v57 & 0x3FFFFFFF)) = v54;
              if (v54 == v302 && (_DWORD)v61 != -1)
              {
                v62 = (v302 - v61);
                if (v23 >= v62)
                {
                  v63 = 0;
                  v64 = a3 + (v61 & a4);
                  v65 = v22 >> 3;
                  do
                  {
                    v66 = *(_QWORD *)&v26[v63];
                    v67 = *(_QWORD *)(v64 + v63);
                    if (v66 != v67)
                    {
                      v68 = v63 + (__clz(__rbit64(v67 ^ v66)) >> 3);
                      goto LABEL_69;
                    }
                    v63 += 8;
                    --v65;
                  }
                  while (v65);
                  v68 = v22 & 0xFFFFFFFFFFFFFFF8;
                  if ((v22 & 7) != 0)
                  {
                    v69 = v22 & 7;
                    v68 = v22 & 0xFFFFFFFFFFFFFFF8;
                    while (*(unsigned __int8 *)(v64 + v68) == v26[v68])
                    {
                      ++v68;
                      if (!--v69)
                      {
                        v68 = v22;
                        break;
                      }
                    }
                    a3 = v313;
                  }
LABEL_69:
                  v70 = 135 * v68 - 30 * (__clz(v62) ^ 0x1F) + 1920;
                  v71 = v312;
                  if (v70 > v35)
                    v72 = v62;
                  else
                    v72 = v312;
                  if (v70 > v35)
                  {
                    v73 = v68;
                  }
                  else
                  {
                    v70 = v35;
                    v73 = result;
                  }
                  if (v68 <= result)
                  {
                    v72 = v312;
                    v70 = v35;
                    v73 = result;
                  }
                  if (v68 >= 4)
                    v71 = v72;
                  v312 = v71;
                  if (v68 >= 4)
                  {
                    v35 = v70;
                    result = v73;
                  }
                }
              }
            }
            v57 = v59 + v55 * v57 + v56 * ~v58 + 1;
            v54 += 4;
          }
          while (v54 <= v302);
          v52 = a6;
          *(_DWORD *)(a6 + 96) = v57;
          v53 = a5;
        }
        *(_QWORD *)(v52 + 112) = v302 + 4;
      }
    }
    v74 = *(_QWORD *)(v53 + 80);
    v310 = *(_QWORD *)(v53 + 96);
    v306 = *(_QWORD *)(v53 + 104);
    if (v310)
    {
      v75 = 0;
      v307 = *(_QWORD *)(v53 + 104) + v24;
      do
      {
        v76 = v53 + 8 * v75;
        v77 = *(_QWORD *)(v76 + 112);
        v78 = *(_DWORD *)(v77 + 16);
        v79 = *(_DWORD *)(v77 + 20);
        v80 = v77 + 24 + 4 * (1 << v79);
        v81 = v80 + 2 * (1 << v78);
        v82 = (_QWORD *)(v81 + 4 * *(unsigned int *)(v77 + 4));
        if (*(_DWORD *)v77 != -558043680)
          v82 = (_QWORD *)*v82;
        v83 = 0;
        v84 = *(_QWORD *)(v76 + 368);
        v85 = v307 - v84;
        v86 = *(unsigned int *)(v77 + 8);
        v87 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v26 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v77 + 12)))) >> -(char)v78;
        v88 = v307 - v84 - v86;
        v89 = (0xFFFFFFFF >> -(char)v79) & v87;
        v90 = *(unsigned __int16 *)(v80 + 2 * v87);
        v91 = (int *)(v81 + 4 * (*(_DWORD *)(v77 + 24 + 4 * v89) + v90));
        v92 = (char *)v82 + v307 - v84;
        v93 = result;
        v94 = v35;
        do
        {
          v95 = a7[v83];
          v96 = v88 < v95 && v85 >= v95;
          if (v96)
          {
            if (v86 - (v85 - v95) >= v22)
              v97 = v22;
            else
              v97 = v86 - (v85 - v95);
            if (v97 < 8)
            {
              v99 = 0;
              v100 = v26;
LABEL_119:
              v108 = v97 & 7;
              if (v108)
              {
                v109 = v99 | v108;
                v110 = &v92[v99 - v95];
                while (1)
                {
                  v111 = *v110++;
                  if (v111 != *v100)
                    break;
                  ++v100;
                  ++v99;
                  if (!--v108)
                  {
                    v99 = v109;
                    break;
                  }
                }
              }
            }
            else
            {
              v98 = 0;
              v99 = v97 & 0xFFFFFFFFFFFFFFF8;
              v100 = &v26[v97 & 0xFFFFFFFFFFFFFFF8];
              v101 = -(uint64_t)(v97 >> 3);
              while (1)
              {
                v102 = *(_QWORD *)&v26[v98];
                v103 = *(_QWORD *)((char *)v82 + v85 - v95 + v98);
                if (v102 != v103)
                  break;
                v98 += 8;
                v96 = __CFADD__(v101++, 1);
                if (v96)
                {
                  a3 = v313;
                  goto LABEL_119;
                }
              }
              v99 = v98 + (__clz(__rbit64(v103 ^ v102)) >> 3);
              a3 = v313;
            }
            if (v99 >= 2)
            {
              v104 = 135 * v99 + 1935;
              if (v35 < v104)
              {
                v105 = v104 - (((0x1CA10u >> (v83 & 0xE)) & 0xE) + 39);
                if (!v83)
                  v105 = 135 * v99 + 1935;
                if (v99 <= result)
                  v106 = result;
                else
                  v106 = v99;
                v107 = v312;
                if (v35 < v105)
                  v107 = a7[v83];
                v312 = v107;
                if (v35 < v105)
                {
                  v94 = v105;
                  v93 = v99;
                  v35 = v105;
                  result = v106;
                }
              }
            }
          }
          ++v83;
        }
        while (v83 != 4);
        if (v90 != 0xFFFF)
        {
          do
          {
            v113 = *v91++;
            v112 = v113;
            v114 = v113 & 0x7FFFFFFF;
            v115 = v85 - v114;
            if (v86 - v114 >= v22)
              v116 = v22;
            else
              v116 = v86 - v114;
            v117 = result + v25;
            v119 = v115 > v74 || v117 > a4 || result >= v116;
            if (!v119 && *(unsigned __int8 *)(a3 + v117) == *((unsigned __int8 *)v82 + result + v114))
            {
              v120 = (char *)v82 + v114;
              if (v116 < 8)
              {
                v122 = 0;
                v123 = v26;
LABEL_163:
                v133 = v116 & 7;
                if (v133)
                {
                  v134 = v122 | v133;
                  while (v120[v122] == *v123)
                  {
                    ++v123;
                    ++v122;
                    if (!--v133)
                    {
                      v122 = v134;
                      break;
                    }
                  }
                }
              }
              else
              {
                v121 = 0;
                v122 = v116 & 0xFFFFFFFFFFFFFFF8;
                v123 = &v26[v116 & 0xFFFFFFFFFFFFFFF8];
                v124 = -(uint64_t)(v116 >> 3);
                while (1)
                {
                  v125 = *(_QWORD *)&v26[v121];
                  v126 = *(_QWORD *)&v120[v121];
                  if (v125 != v126)
                    break;
                  v121 += 8;
                  v96 = __CFADD__(v124++, 1);
                  if (v96)
                    goto LABEL_163;
                }
                v122 = v121 + (__clz(__rbit64(v126 ^ v125)) >> 3);
              }
              v127 = 135 * v122 - 30 * (__clz(v115) ^ 0x1F) + 1920;
              v128 = v312;
              if (v35 < v127)
                v129 = v115;
              else
                v129 = v312;
              if (v35 < v127)
                v130 = v127;
              else
                v130 = v94;
              if (v35 < v127)
                v131 = v122;
              else
                v131 = v93;
              if (v35 < v127)
              {
                v132 = v122;
              }
              else
              {
                v127 = v35;
                v132 = result;
              }
              if (v122 >= 4)
                v128 = v129;
              v312 = v128;
              if (v122 >= 4)
              {
                v94 = v130;
                v93 = v131;
                v35 = v127;
                result = v132;
              }
            }
          }
          while ((v112 & 0x80000000) == 0);
        }
        ++v75;
        v135 = v93;
        result = v93;
        v35 = v94;
        v53 = a5;
      }
      while (v75 != v310);
    }
    else
    {
      v94 = v35;
      v135 = result;
    }
    if (v94 < 0x7E5)
    {
      v12 = v299 + 1;
      v252 = v302 + 1;
      v17 = v304;
      v18 = v309;
      v21 = v290;
      if (v302 + 1 <= v304)
      {
        v11 = a9;
        v13 = v292;
      }
      else
      {
        v11 = a9;
        v13 = v292;
        if (v252 <= v304 + v284)
        {
          v255 = v302 + 9;
          if (v302 + 9 >= v285)
            v255 = v285;
          while (v252 < v255)
          {
            *(_DWORD *)(v309
                      + 4
                      * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v252 & a4))) >> 32) >> 12)
                        + (v252 & 0x18)) & 0xFFFFF)) = v252;
            v12 += 2;
            v252 += 2;
          }
        }
        else
        {
          v253 = v302 + 17;
          if (v302 + 17 >= v285)
            v253 = v285;
          while (v252 < v253)
          {
            *(_DWORD *)(v309
                      + 4
                      * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v252 & a4))) >> 32) >> 12)
                        + (v252 & 0x18)) & 0xFFFFF)) = v252;
            v12 += 4;
            v252 += 4;
          }
        }
      }
    }
    else
    {
      v136 = 0;
      v137 = v302;
      v138 = v286 - v302;
      v139 = v293 + 1 + v302;
      v18 = v309;
      while (1)
      {
        v298 = v94;
        v296 = v139;
        if (v139 >= v294)
          v140 = v294;
        else
          v140 = v139;
        v308 = v140;
        --v22;
        v141 = v135 - 1;
        if (v135 - 1 >= v22)
          v141 = v22;
        if (*(int *)(v53 + 4) >= 5)
          v141 = 0;
        v142 = v137 + 1;
        v303 = v137;
        if (v137 + 1 < v294)
          v143 = v137 + 1;
        else
          v143 = v294;
        v144 = v142 + v293;
        v145 = v142 & a4;
        v146 = *(unsigned __int8 *)(a3 + v141 + (v142 & a4));
        if (v142 + v293 >= v294)
          v144 = v294;
        v295 = v144;
        v147 = (unsigned __int8 *)(a3 + v145);
        v148 = *a7;
        result = v22 >> 3;
        v291 = v135;
        v297 = v136;
        if (v142 < v148)
          goto LABEL_196;
        v149 = a4 & (v142 - v148);
        if (v146 != *(unsigned __int8 *)(a3 + v149 + v141))
          goto LABEL_196;
        v150 = a3 + v149;
        if (v22 < 8)
        {
          v151 = 0;
          v155 = (unsigned __int8 *)(a3 + v145);
LABEL_362:
          v251 = v22 & 7;
          if ((v22 & 7) != 0)
          {
            do
            {
              if (*(unsigned __int8 *)(v150 + v151) != *v155)
                break;
              ++v155;
              ++v151;
              --v251;
            }
            while (v251);
          }
        }
        else
        {
          v151 = 0;
          v152 = v22 >> 3;
          while (1)
          {
            v153 = *(_QWORD *)&v147[v151];
            v154 = *(_QWORD *)(v150 + v151);
            if (v153 != v154)
              break;
            v151 += 8;
            if (!--v152)
            {
              v155 = &v147[v151];
              goto LABEL_362;
            }
          }
          v151 += __clz(__rbit64(v154 ^ v153)) >> 3;
        }
        if (v151 >= 4 && (v156 = 135 * v151 + 1935, v156 >= 0x7E5))
        {
          v146 = *(unsigned __int8 *)(a3 + v151 + v145);
          v141 = v151;
        }
        else
        {
LABEL_196:
          v148 = 0;
          v156 = 2020;
        }
        v157 = 0;
        v158 = vdupq_n_s64((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)v147) >> 44);
        v159 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
        v314 = vandq_s8((int8x16_t)vaddq_s64(v158, (int64x2_t)xmmword_2368AF3D0), v159);
        v315 = vandq_s8((int8x16_t)vaddq_s64(v158, (int64x2_t)xmmword_2368AF3E0), v159);
        do
        {
          v160 = *(unsigned int *)(v18 + 4 * v314.i64[v157]);
          v161 = v142 - v160;
          if (v146 == *(unsigned __int8 *)(a3 + (v160 & a4) + v141) && v142 != v160 && v161 <= v143)
          {
            v164 = a3 + (v160 & a4);
            if (v22 < 8)
            {
              v165 = 0;
              v169 = (unsigned __int8 *)(a3 + v145);
LABEL_217:
              if ((v22 & 7) != 0)
              {
                v171 = v22 & 7;
                do
                {
                  if (*(unsigned __int8 *)(v164 + v165) != *v169)
                    break;
                  ++v169;
                  ++v165;
                  --v171;
                }
                while (v171);
              }
            }
            else
            {
              v165 = 0;
              v166 = v22 >> 3;
              while (1)
              {
                v167 = *(_QWORD *)&v147[v165];
                v168 = *(_QWORD *)(v164 + v165);
                if (v167 != v168)
                  break;
                v165 += 8;
                if (!--v166)
                {
                  v169 = &v147[v165];
                  goto LABEL_217;
                }
              }
              v165 += __clz(__rbit64(v168 ^ v167)) >> 3;
            }
            if (v165 >= 4)
            {
              v170 = 135 * v165 - 30 * (__clz(v161) ^ 0x1F) + 1920;
              if (v156 < v170)
              {
                v146 = *(unsigned __int8 *)(a3 + v165 + v145);
                v141 = v165;
                v148 = v161;
                v156 = v170;
              }
            }
          }
          ++v157;
        }
        while (v157 != 4);
        *(_DWORD *)(v18 + 4 * *(uint64_t *)((char *)v314.i64 + (v142 & 0x18))) = v142;
        v300 = v142;
        if (v22 >= 0x20 && (v142 & 3) == 0)
        {
          v172 = a6;
          v173 = *(_QWORD *)(a6 + 112);
          if (v173 <= v142)
          {
            v175 = *(_DWORD *)(a6 + 124);
            v174 = *(_DWORD *)(a6 + 128);
            v176 = *(_DWORD *)(a6 + 96);
            do
            {
              v177 = *(unsigned __int8 *)(a3 + (v173 & a4));
              v178 = *(unsigned __int8 *)(a3 + ((v173 + 32) & a4));
              if ((v176 & 0x3F000000) == 0)
              {
                v179 = *(_QWORD *)(a6 + 104);
                v180 = *(unsigned int *)(v179 + 4 * (v176 & 0x3FFFFFFF));
                *(_DWORD *)(v179 + 4 * (v176 & 0x3FFFFFFF)) = v173;
                if (v173 == v142 && (_DWORD)v180 != -1)
                {
                  v181 = (v142 - v180);
                  if (v143 >= v181)
                  {
                    v182 = 0;
                    v183 = a3 + (v180 & a4);
                    v184 = v22 >> 3;
                    do
                    {
                      v185 = *(_QWORD *)&v147[v182];
                      v186 = *(_QWORD *)(v183 + v182);
                      if (v185 != v186)
                      {
                        v182 += __clz(__rbit64(v186 ^ v185)) >> 3;
                        goto LABEL_239;
                      }
                      v182 += 8;
                      --v184;
                    }
                    while (v184);
                    if ((v22 & 7) != 0)
                    {
                      v187 = 0;
                      v188 = v183 + v182;
                      do
                      {
                        if (*(unsigned __int8 *)(v188 + v187) != v147[v182 + v187])
                          break;
                        ++v187;
                      }
                      while ((v138 & 7) != v187);
                      v182 += v187;
                      a3 = v313;
                    }
LABEL_239:
                    v189 = 135 * v182 - 30 * (__clz(v181) ^ 0x1F) + 1920;
                    if (v189 > v156)
                      v190 = v182;
                    else
                      v190 = v141;
                    if (v189 > v156)
                      v191 = v181;
                    else
                      v191 = v148;
                    if (v189 <= v156)
                      v189 = v156;
                    v192 = v182 >= 4 && v182 > v141;
                    if (v192)
                      v141 = v190;
                    if (v192)
                      v148 = v191;
                    if (v192)
                      v156 = v189;
                    v18 = v309;
                    v142 = v300;
                  }
                }
              }
              v176 = v178 + v175 * v176 + v174 * ~v177 + 1;
              v173 += 4;
            }
            while (v173 <= v142);
            v172 = a6;
            *(_DWORD *)(a6 + 96) = v176;
          }
          *(_QWORD *)(v172 + 112) = v303 + 5;
        }
        if (v310)
        {
          result = 0;
          v305 = v295 + v306;
          do
          {
            v193 = a5 + 8 * result;
            v194 = *(_QWORD *)(v193 + 112);
            v195 = *(_DWORD *)(v194 + 16);
            v196 = *(_DWORD *)(v194 + 20);
            v197 = v194 + 24 + 4 * (1 << v196);
            v198 = v197 + 2 * (1 << v195);
            v199 = (_QWORD *)(v198 + 4 * *(unsigned int *)(v194 + 4));
            if (*(_DWORD *)v194 != -558043680)
              v199 = (_QWORD *)*v199;
            v200 = 0;
            v201 = *(_QWORD *)(v193 + 368);
            v202 = v305 - v201;
            v203 = *(unsigned int *)(v194 + 8);
            v204 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v147 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v194 + 12)))) >> -(char)v195;
            v205 = v305 - v201 - v203;
            v206 = *(unsigned __int16 *)(v197 + 2 * v204);
            v207 = (int *)(v198
                         + 4
                         * (*(_DWORD *)(v194
                                                    + 24
                                                    + 4 * ((0xFFFFFFFF >> -(char)v196) & v204))
                                        + v206));
            v208 = -v306 - v308 + v201 + v203;
            v209 = (char *)v199 + v306 + v308 - v201;
            v94 = v156;
            v210 = v141;
            do
            {
              v211 = a7[v200];
              if (v205 < v211 && v202 >= v211)
              {
                if (v203 + v211 - v202 >= v22)
                  v213 = v22;
                else
                  v213 = v203 + v211 - v202;
                if (v213 < 8)
                {
                  v214 = 0;
                  v219 = v147;
LABEL_297:
                  if ((v213 & 7) != 0)
                  {
                    v223 = v208 + v211;
                    if (v138 < v208 + v211)
                      v223 = v138;
                    v224 = -(uint64_t)(v223 & 7);
                    v225 = &v209[v214 - v211];
                    do
                    {
                      v226 = *v225++;
                      if (v226 != *v219)
                        break;
                      ++v219;
                      ++v214;
                      v96 = __CFADD__(v224++, 1);
                    }
                    while (!v96);
                  }
                }
                else
                {
                  v214 = 0;
                  v215 = v208 + v211;
                  if (v138 < v208 + v211)
                    v215 = v138;
                  v216 = -(uint64_t)(v215 >> 3);
                  while (1)
                  {
                    v217 = *(_QWORD *)&v147[v214];
                    v218 = *(_QWORD *)&v209[v214 - v211];
                    if (v217 != v218)
                      break;
                    v214 += 8;
                    v96 = __CFADD__(v216++, 1);
                    if (v96)
                    {
                      v219 = &v147[v214];
                      goto LABEL_297;
                    }
                  }
                  v214 += __clz(__rbit64(v218 ^ v217)) >> 3;
                }
                if (v214 >= 2)
                {
                  v220 = 135 * v214 + 1935;
                  if (v156 < v220)
                  {
                    v221 = v220 - (((0x1CA10u >> (v200 & 0xE)) & 0xE) + 39);
                    if (!v200)
                      v221 = 135 * v214 + 1935;
                    if (v214 <= v141)
                      v222 = v141;
                    else
                      v222 = v214;
                    if (v156 < v221)
                    {
                      v210 = v214;
                      v148 = a7[v200];
                      v94 = v221;
                      v156 = v221;
                      v141 = v222;
                    }
                  }
                }
              }
              ++v200;
            }
            while (v200 != 4);
            a3 = v313;
            if (v206 != 0xFFFF)
            {
              do
              {
                v228 = *v207++;
                v227 = v228;
                v229 = v228 & 0x7FFFFFFF;
                v230 = v202 - v229;
                v231 = v203 - v229;
                if (v203 - v229 >= v22)
                  v232 = v22;
                else
                  v232 = v203 - v229;
                v233 = v141 + v145;
                v235 = v230 > v74 || v233 > a4 || v141 >= v232;
                if (!v235 && *(unsigned __int8 *)(v313 + v233) == *((unsigned __int8 *)v199 + v141 + v229))
                {
                  v236 = (char *)v199 + v229;
                  if (v232 < 8)
                  {
                    v237 = 0;
                    v242 = v147;
LABEL_345:
                    if ((v232 & 7) != 0)
                    {
                      if (v138 >= v231)
                        v248 = v231;
                      else
                        v248 = v138;
                      v249 = -(uint64_t)(v248 & 7);
                      do
                      {
                        if (v236[v237] != *v242)
                          break;
                        ++v242;
                        ++v237;
                        v96 = __CFADD__(v249++, 1);
                      }
                      while (!v96);
                    }
                  }
                  else
                  {
                    v237 = 0;
                    if (v138 >= v231)
                      v238 = v231;
                    else
                      v238 = v138;
                    v239 = -(uint64_t)(v238 >> 3);
                    while (1)
                    {
                      v240 = *(_QWORD *)&v147[v237];
                      v241 = *(_QWORD *)&v236[v237];
                      if (v240 != v241)
                        break;
                      v237 += 8;
                      v96 = __CFADD__(v239++, 1);
                      if (v96)
                      {
                        v242 = &v147[v237];
                        goto LABEL_345;
                      }
                    }
                    v237 += __clz(__rbit64(v241 ^ v240)) >> 3;
                  }
                  v243 = 135 * v237 - 30 * (__clz(v230) ^ 0x1F) + 1920;
                  if (v156 < v243)
                    v244 = v237;
                  else
                    v244 = v210;
                  if (v156 < v243)
                    v245 = v230;
                  else
                    v245 = v148;
                  if (v156 < v243)
                    v246 = v243;
                  else
                    v246 = v94;
                  if (v156 < v243)
                  {
                    v247 = v237;
                  }
                  else
                  {
                    v243 = v156;
                    v247 = v141;
                  }
                  if (v237 >= 4)
                  {
                    v210 = v244;
                    v148 = v245;
                    v94 = v246;
                    v156 = v243;
                    v141 = v247;
                  }
                }
              }
              while ((v227 & 0x80000000) == 0);
            }
            ++result;
            v156 = v94;
            v141 = v210;
            v18 = v309;
          }
          while (result != v310);
        }
        else
        {
          v210 = v141;
          v94 = v156;
        }
        if (v94 < v298 + 175)
          break;
        ++v299;
        v53 = a5;
        if (v297 > 2)
        {
          v250 = v300;
          goto LABEL_381;
        }
        v136 = v297 + 1;
        --v138;
        v139 = v296 + 1;
        v312 = v148;
        v135 = v210;
        v250 = v300;
        v137 = v300;
        if (v303 + 9 >= v292)
          goto LABEL_381;
      }
      v254 = v303 + v293;
      if (v303 + v293 >= v294)
        v254 = v294;
      v295 = v254;
      v53 = a5;
      v148 = v312;
      v210 = v291;
      v250 = v303;
LABEL_381:
      if (v148 > v295 + v287)
      {
LABEL_382:
        v256 = v148 + 15;
        goto LABEL_383;
      }
      v260 = *a7;
      if (v148 == v260)
      {
        LOWORD(v256) = 0;
        LODWORD(v259) = 0;
        *(_DWORD *)v290 = v299;
        *(_DWORD *)(v290 + 4) = v210;
        v11 = a9;
        v13 = v292;
        goto LABEL_392;
      }
      v267 = a7[1];
      if (v148 == v267)
      {
        v256 = 1;
        goto LABEL_383;
      }
      v268 = v148 + 3;
      v269 = v148 + 3 - v260;
      if (v269 <= 6)
      {
        v270 = 4 * v269;
        v271 = 158663784;
LABEL_406:
        v256 = (v271 >> v270) & 0xF;
        goto LABEL_383;
      }
      if (v268 - v267 <= 6)
      {
        v270 = 4 * (v268 - v267);
        v271 = 266017486;
        goto LABEL_406;
      }
      if (v148 == a7[2])
      {
        v256 = 2;
      }
      else
      {
        if (v148 != a7[3])
          goto LABEL_382;
        v256 = 3;
      }
LABEL_383:
      if (v148 <= v295 + v287 && v256)
      {
        a7[3] = a7[2];
        *(_QWORD *)(a7 + 1) = *(_QWORD *)a7;
        *a7 = v148;
      }
      *(_DWORD *)v290 = v299;
      *(_DWORD *)(v290 + 4) = v210;
      v257 = *(unsigned int *)(v53 + 68);
      v258 = v257 + 16;
      if (v257 + 16 <= v256)
      {
        v261 = *(unsigned int *)(v53 + 64);
        v262 = v256 - v257 + (4 << v261) - 16;
        v263 = (__clz(v262) ^ 0x1F) - 1;
        v264 = ((v262 >> v263) & 1 | 2) << v263;
        result = 65534;
        v256 = ((v262 & ~(-1 << v261))
              + v258
              + ((((v262 >> v263) & 1 | (2 * (v263 - v261))) + 65534) << v261)) | ((v263 - v261) << 10);
        v259 = (v262 - v264) >> v261;
      }
      else
      {
        LODWORD(v259) = 0;
      }
      v11 = a9;
      v13 = v292;
LABEL_392:
      *(_WORD *)(v290 + 14) = v256;
      *(_DWORD *)(v290 + 8) = v259;
      if (v299 > 5)
      {
        if (v299 > 0x81)
        {
          if (v299 > 0x841)
          {
            if (v299 >> 1 >= 0xC21)
            {
              if (v299 < 0x5842)
                LOWORD(v265) = 22;
              else
                LOWORD(v265) = 23;
            }
            else
            {
              LOWORD(v265) = 21;
            }
          }
          else
          {
            v265 = (__clz(v299 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v266 = (__clz(v299 - 2) ^ 0x1F) - 1;
          v265 = ((v299 - 2) >> v266) + 2 * v266 + 2;
        }
      }
      else
      {
        LOWORD(v265) = v299;
      }
      v272 = (unint64_t)v210 >> 1;
      if (v272 > 4)
      {
        if (v272 > 0x42)
        {
          if (v272 > 0x422)
            LOWORD(v273) = 23;
          else
            v273 = (__clz(v210 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v274 = (int)v210 - 6;
          v275 = (__clz(v274) ^ 0x1F) - 1;
          v273 = (v274 >> v275) + 2 * v275 + 4;
        }
      }
      else
      {
        LOWORD(v273) = v210 - 2;
      }
      v276 = v273 & 7 | (8 * (v265 & 7));
      if ((v256 & 0x3FF) != 0 || (unsigned __int16)v265 > 7u || (unsigned __int16)v273 > 0xFu)
      {
        v278 = 3 * ((unsigned __int16)v265 >> 3) + ((unsigned __int16)(v273 & 0xFFF8) >> 3);
        v277 = ((((0x520D40u >> (2 * v278)) & 0xC0) + (v278 << 6)) | v276) + 64;
      }
      else
      {
        LOWORD(v277) = v276 | 0x40;
        if ((v273 & 0xFFF8) == 0)
          LOWORD(v277) = v273 & 7 | (8 * (v265 & 7));
      }
      *(_WORD *)(v290 + 12) = v277;
      *a11 += v299;
      v279 = v250 + 2;
      v252 = v250 + v210;
      v280 = v289;
      if (v250 + v210 < v289)
        v280 = v250 + v210;
      if (v148 < v210 >> 2)
      {
        if (v279 <= v252 - 4 * v148)
          v279 = v252 - 4 * v148;
        if (v280 < v279)
          v279 = v280;
      }
      v17 = v288 + 2 * v210 + v250;
      v21 = v290 + 16;
      if (v279 < v280)
      {
        do
        {
          *(_DWORD *)(v18
                    + 4
                    * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v279 & a4))) >> 32) >> 12)
                      + (v279 & 0x18)) & 0xFFFFF)) = v279;
          ++v279;
        }
        while (v280 != v279);
      }
      v12 = 0;
    }
    v19 = v252;
  }
  while (v252 + 8 < v13);
LABEL_447:
  *a8 = v12 + v13 - v252;
  *a10 += (v21 - v11) >> 4;
  return result;
}

unint64_t sub_23678FB80(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int32x4_t v20;
  const float *v21;
  int32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  int v130;
  int *v131;
  char *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  BOOL v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  int v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  BOOL v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  BOOL v202;
  uint64_t v203;
  unint64_t v204;
  BOOL v205;
  unint64_t v206;
  BOOL v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  unint64_t v214;
  unint64_t v215;
  unsigned __int8 *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  BOOL v256;
  unint64_t v257;
  int v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  int *v276;
  uint64_t v277;
  char *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  char v291;
  uint64_t v292;
  char *v293;
  int v294;
  unint64_t v295;
  char *v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  int v307;
  unint64_t v308;
  char v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  BOOL v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  unint64_t v322;
  unint64_t v323;
  char v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned __int8 *v329;
  unint64_t v330;
  unsigned __int8 *v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  int v339;
  int v340;
  int v341;
  unint64_t v342;
  unsigned int v343;
  unint64_t v344;
  unint64_t v345;
  int32x2_t v346;
  int v347;
  int32x4_t v348;
  int32x4_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char v353;
  unint64_t v354;
  uint64_t v355;
  char v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned __int8 *v361;
  unint64_t v362;
  unsigned __int8 *v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unsigned int v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  unsigned int v379;
  unint64_t v380;
  int v381;
  int v382;
  int v383;
  unint64_t v384;
  unsigned int v385;
  uint64_t v386;
  unint64_t v387;
  char v388;
  unsigned int v389;
  unint64_t v390;
  uint64_t v391;
  unsigned int v392;
  unint64_t v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  int v397;
  unint64_t v398;
  unint64_t v399;
  int v400;
  int v401;
  int v402;
  unint64_t v403;
  unsigned int v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unsigned int v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  int v445;
  unint64_t v447;

  v14 = a3;
  v15 = *a9;
  v420 = *(_QWORD *)(a6 + 16);
  v421 = a2 + result;
  v406 = a2 + result - 7;
  if (result <= 7)
    v16 = a2;
  else
    v16 = a2 + result - 7;
  v17 = *(_DWORD *)(a6 + 8);
  v18 = 512;
  if (*(int *)(a6 + 4) < 9)
    v18 = 64;
  v410 = v18;
  v408 = v16;
  v409 = *(_QWORD *)(a6 + 104);
  v19 = *(_DWORD *)(a7 + 120);
  if (v19 >= 5)
  {
    v20 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v20, (int32x4_t)xmmword_2368AF3A0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v19 >= 0xB)
    {
      v21 = (const float *)(a8 + 1);
      v22 = (int32x4_t)vld1q_dup_f32(v21);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v22, (int32x4_t)xmmword_2368AF3A0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v22.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (result < 9)
  {
    v411 = a10;
    v337 = a2;
    goto LABEL_580;
  }
  v23 = v18 + a2;
  v419 = (1 << v17) - 16;
  v413 = a5 + 256;
  v24 = *(_QWORD *)(a7 + 144);
  v430 = *(_QWORD *)(a7 + 136);
  v422 = *(_QWORD *)(a7 + 104);
  v412 = v409 + 1;
  v405 = 4 * v18;
  v407 = a2 + result - 1;
  v411 = a10;
  v25 = a4;
  v431 = a7;
  v418 = v24;
  do
  {
    if (a2 >= v419)
      v26 = v419;
    else
      v26 = a2;
    v27 = a2 + v420;
    if (a2 + v420 >= v419)
      v27 = v419;
    v438 = v27;
    v429 = v15;
    v434 = v23;
    if (*(_DWORD *)(a6 + 632))
    {
      if (a2)
      {
        v28 = *(unsigned __int8 *)(v14 + ((a2 - 1) & v25));
        if (a2 != 1)
        {
          v29 = *(unsigned __int8 *)(v14 + ((a2 - 2) & v25));
LABEL_23:
          v423 = v28;
          v31 = a6;
          v30 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v413 + v29) | *(_BYTE *)(a5 + v28)) + 637);
          goto LABEL_24;
        }
      }
      else
      {
        v28 = 0;
      }
      v29 = 0;
      goto LABEL_23;
    }
    v30 = 0;
    v423 = 0;
    v31 = a6;
LABEL_24:
    v32 = v421 - a2;
    v424 = v30;
    v33 = *(_QWORD *)(v31 + 8 * v30 + 704);
    v34 = *(_QWORD *)(v31 + 80);
    v432 = a2;
    v35 = a2 & v25;
    v36 = *(int *)(a7 + 120);
    v447 = v34;
    v37 = (v421 - a2) >> 3;
    v441 = a2 & v25;
    if ((_DWORD)v36)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = (unsigned __int8 *)(v14 + v35);
      v43 = v14 + v35 + (v32 & 0xFFFFFFFFFFFFFFF8);
      v44 = 2020;
      v45 = 2020;
      do
      {
        v46 = a8[v38];
        v47 = v432 - v46;
        v48 = v26 < v46 || v47 >= v432;
        v49 = v47 & a4;
        v50 = v39 + v441;
        v51 = v48 || v50 > a4;
        v52 = v49 + v39;
        v53 = v51 || v52 > a4;
        if (!v53 && *(unsigned __int8 *)(v14 + v50) == *(unsigned __int8 *)(v14 + v52))
        {
          v54 = v14 + v49;
          if (v32 < 8)
          {
            v59 = 0;
            v60 = v42;
LABEL_56:
            if ((v32 & 7) != 0)
            {
              v62 = v24;
              v63 = v32 & 7 | v59;
              v64 = v32 & 7;
              while (*(unsigned __int8 *)(v54 + v59) == *v60)
              {
                ++v60;
                ++v59;
                if (!--v64)
                {
                  v59 = v63;
                  break;
                }
              }
              v24 = v62;
            }
          }
          else
          {
            v55 = 0;
            v56 = v37;
            while (1)
            {
              v57 = *(_QWORD *)&v42[v55];
              v58 = *(_QWORD *)(v54 + v55);
              if (v57 != v58)
                break;
              v55 += 8;
              if (!--v56)
              {
                v59 = v32 & 0xFFFFFFFFFFFFFFF8;
                v60 = (unsigned __int8 *)v43;
                goto LABEL_56;
              }
            }
            v59 = v55 + (__clz(__rbit64(v58 ^ v57)) >> 3);
          }
          if (v59 > 2 || v38 <= 1 && v59 == 2)
          {
            v61 = 135 * v59 + 1935;
            if (v44 < v61)
            {
              if (v38)
                v61 -= ((0x1CA10u >> (v38 & 0xE)) & 0xE) + 39;
              if (v44 < v61)
              {
                v41 = a8[v38];
                v45 = v61;
                v40 = v59;
                v44 = v61;
                v39 = v59;
              }
            }
          }
        }
        ++v38;
      }
      while (v38 != v36);
    }
    else
    {
      v41 = 0;
      v40 = 0;
      v39 = 0;
      v45 = 2020;
      v44 = 2020;
    }
    v65 = (unsigned __int8 *)(v14 + v441);
    v66 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v14 + v441) & v422)) >> *(_DWORD *)(v431 + 96);
    v67 = *(unsigned int *)(v431 + 112);
    v68 = v24 + 4 * ((_DWORD)v66 << *(_DWORD *)(v431 + 116));
    v69 = *(unsigned __int16 *)(v430 + 2 * v66);
    v417 = *(_QWORD *)(v431 + 88);
    v70 = v69 - v417;
    if (v69 < v417)
      v70 = 0;
    if (v70 < v69)
    {
      v71 = *(unsigned __int16 *)(v430 + 2 * v66);
      do
      {
        v72 = *(unsigned int *)(v68 + 4 * (--v71 & v67));
        v73 = v432 - v72;
        if (v432 - v72 > v26)
          break;
        if (v39 + v441 <= a4)
        {
          v74 = v72 & a4;
          if (v74 + v39 <= a4 && *(unsigned __int8 *)(v14 + v39 + v441) == *(unsigned __int8 *)(v14 + v74 + v39))
          {
            v75 = v14 + v74;
            if (v32 < 8)
            {
              v80 = 0;
              v81 = v65;
LABEL_83:
              if ((v32 & 7) != 0)
              {
                v83 = v32 & 7 | v80;
                v84 = v32 & 7;
                while (*(unsigned __int8 *)(v75 + v80) == *v81)
                {
                  ++v81;
                  ++v80;
                  if (!--v84)
                  {
                    v80 = v83;
                    break;
                  }
                }
              }
            }
            else
            {
              v76 = 0;
              v77 = v37;
              while (1)
              {
                v78 = *(_QWORD *)&v65[v76];
                v79 = *(_QWORD *)(v75 + v76);
                if (v78 != v79)
                  break;
                v76 += 8;
                if (!--v77)
                {
                  v80 = v32 & 0xFFFFFFFFFFFFFFF8;
                  v81 = &v65[v32 & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_83;
                }
              }
              v80 = v76 + (__clz(__rbit64(v79 ^ v78)) >> 3);
            }
            v14 = a3;
            if (v80 >= 4)
            {
              v82 = 135 * v80 - 30 * (__clz(v73) ^ 0x1F) + 1920;
              if (v44 < v82)
              {
                v41 = v73;
                v45 = v82;
                v40 = v80;
                v44 = v82;
                v39 = v80;
              }
            }
          }
        }
      }
      while (v71 > v70);
    }
    *(_DWORD *)(v68 + 4 * (v67 & v69)) = v432;
    *(_WORD *)(v430 + 2 * v66) = v69 + 1;
    if (v45 == 2020)
    {
      v85 = *(_QWORD *)(v431 + 128);
      v86 = *(_QWORD *)(v85 + 40);
      v87 = *(_QWORD *)(v85 + 48);
      if (v87 >= v86 >> 7)
      {
        v445 = 0;
        v350 = ((506832829 * *(_DWORD *)v65) >> 17) & 0x7FFE;
        v351 = *(_QWORD *)(v33 + 32);
        v352 = v412 + v438;
        v353 = 1;
        v354 = v40;
        v45 = 2020;
        v355 = v41;
        do
        {
          v356 = v353;
          *(_QWORD *)(v85 + 40) = ++v86;
          v357 = *(unsigned __int8 *)(v351 + v350);
          if (!*(_BYTE *)(v351 + v350) || v32 < v357)
            goto LABEL_498;
          v358 = *(unsigned __int16 *)(*(_QWORD *)(v33 + 24) + 2 * v350);
          v359 = *(unsigned int *)(*(_QWORD *)v33 + 4 * v357 + 32);
          v360 = *(_QWORD *)(*(_QWORD *)v33 + 168);
          v361 = (unsigned __int8 *)(v360 + v359 + v358 * *(unsigned __int8 *)(v351 + v350));
          if (v357 < 8)
          {
            v40 = 0;
LABEL_513:
            v368 = v357 & 7;
            if ((v357 & 7) != 0)
            {
              v369 = v40 | v368;
              while (v65[v40] == *v361)
              {
                ++v361;
                ++v40;
                if (!--v368)
                {
                  v40 = v369;
                  break;
                }
              }
            }
          }
          else
          {
            v362 = 0;
            v40 = v357 & 0xF8;
            v363 = (unsigned __int8 *)(v360
                                     + v358 * (unint64_t)*(unsigned __int8 *)(v351 + v350)
                                     + (*(_BYTE *)(v351 + v350) & 0xF8)
                                     + v359);
            while (1)
            {
              v364 = *(_QWORD *)&v361[v362];
              v365 = *(_QWORD *)&v65[v362];
              if (v364 != v365)
                break;
              v362 += 8;
              if (v40 == v362)
              {
                v361 = v363;
                goto LABEL_513;
              }
            }
            v40 = v362 + (__clz(__rbit64(v365 ^ v364)) >> 3);
          }
          v14 = a3;
          if (v40
            && v40 + *(unsigned int *)(v33 + 12) > v357
            && (v366 = v352
                     + v358
                     + ((((*(_QWORD *)(v33 + 16) >> (6 * (v357 - v40))) & 0x3FLL)
                       + 4 * (v357 - v40)) << *(_BYTE *)(*(_QWORD *)v33 + v357)),
                v366 <= v447)
            && (v41 = v352
                    + v358
                    + ((((*(_QWORD *)(v33 + 16) >> (6 * (v357 - v40))) & 0x3FLL)
                      + 4 * (v357 - v40)) << *(_BYTE *)(*(_QWORD *)v33 + v357)),
                v367 = __clz(v366) ^ 0x1F,
                135 * v40 - 30 * v367 + 1920 >= v45))
          {
            v445 = v357 - v40;
            *(_QWORD *)(v85 + 48) = ++v87;
            v45 = 135 * v40 - 30 * v367 + 1920;
          }
          else
          {
LABEL_498:
            v41 = v355;
            v40 = v354;
          }
          v353 = 0;
          ++v350;
          v354 = v40;
          v355 = v41;
        }
        while ((v356 & 1) != 0);
      }
      else
      {
        v445 = 0;
        v45 = 2020;
      }
    }
    else
    {
      v445 = 0;
    }
    v88 = v41;
    if (v32 >= 0x20)
    {
      v90 = v431;
      v91 = v432;
      v92 = *(_QWORD *)(v431 + 168);
      if (v92 <= v432)
      {
        v93 = *(_DWORD *)(v431 + 180);
        v94 = *(_DWORD *)(v431 + 184);
        v95 = *(_DWORD *)(v431 + 152);
        do
        {
          v96 = *(unsigned __int8 *)(v14 + (v92 & a4));
          v97 = *(unsigned __int8 *)(v14 + ((v92 + 32) & a4));
          if ((v95 & 0x3F000000) == 0)
          {
            v98 = *(_QWORD *)(v431 + 160);
            v99 = *(unsigned int *)(v98 + 4 * (v95 & 0x3FFFFFFF));
            *(_DWORD *)(v98 + 4 * (v95 & 0x3FFFFFFF)) = v92;
            if (v92 == v91 && (_DWORD)v99 != -1)
            {
              v100 = (v91 - v99);
              if (v26 >= v100)
              {
                v101 = 0;
                v102 = v14 + (v99 & a4);
                v103 = v37;
                do
                {
                  v104 = *(_QWORD *)&v65[v101];
                  v105 = *(_QWORD *)(v102 + v101);
                  if (v104 != v105)
                  {
                    v106 = v101 + (__clz(__rbit64(v105 ^ v104)) >> 3);
                    goto LABEL_110;
                  }
                  v101 += 8;
                  --v103;
                }
                while (v103);
                v106 = v32 & 0xFFFFFFFFFFFFFFF8;
                if ((v32 & 7) != 0)
                {
                  v107 = v32 & 7;
                  v106 = v32 & 0xFFFFFFFFFFFFFFF8;
                  while (*(unsigned __int8 *)(v102 + v106) == v65[v106])
                  {
                    ++v106;
                    if (!--v107)
                    {
                      v106 = v32;
                      break;
                    }
                  }
                  v14 = a3;
                  v91 = v432;
                }
LABEL_110:
                v108 = 135 * v106 - 30 * (__clz(v100) ^ 0x1F) + 1920;
                v109 = v108 > v45;
                if (v108 > v45)
                  v110 = v100;
                else
                  v110 = v88;
                if (v108 <= v45)
                  v108 = v45;
                v111 = v445;
                if (v109)
                  v112 = 0;
                else
                  v112 = v445;
                if (v109)
                  v113 = v106;
                else
                  v113 = v40;
                if (v106 <= v40)
                {
                  v110 = v88;
                  v108 = v45;
                  v112 = v445;
                  v113 = v40;
                }
                if (v106 >= 4)
                {
                  v88 = v110;
                  v45 = v108;
                  v111 = v112;
                }
                v445 = v111;
                if (v106 >= 4)
                  v40 = v113;
              }
            }
          }
          v95 = v97 + v93 * v95 + v94 * ~v96 + 1;
          ++v92;
        }
        while (v92 <= v91);
        v90 = v431;
        *(_DWORD *)(v431 + 152) = v95;
      }
      v89 = a6;
      *(_QWORD *)(v90 + 168) = v91 + 1;
    }
    else
    {
      v89 = a6;
    }
    v443 = *(_QWORD *)(v89 + 96);
    v437 = *(_QWORD *)(v89 + 104);
    if (v443)
    {
      v114 = 0;
      v439 = *(_QWORD *)(v89 + 104) + v438;
      do
      {
        v115 = a6 + 8 * v114;
        v116 = *(_QWORD *)(v115 + 112);
        v117 = *(_DWORD *)(v116 + 16);
        v118 = *(_DWORD *)(v116 + 20);
        v119 = v116 + 24;
        v120 = v116 + 24 + 4 * (1 << v118);
        v121 = v120 + 2 * (1 << v117);
        v122 = (_QWORD *)(v121 + 4 * *(unsigned int *)(v116 + 4));
        if (*(_DWORD *)v116 != -558043680)
          v122 = (_QWORD *)*v122;
        v123 = 0;
        v124 = *(_QWORD *)(v115 + 368);
        v125 = v439 - v124;
        v126 = *(unsigned int *)(v116 + 8);
        v127 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v65 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v116 + 12)))) >> -(char)v117;
        v128 = v439 - v124 - v126;
        v129 = (0xFFFFFFFF >> -(char)v118) & v127;
        v130 = *(unsigned __int16 *)(v120 + 2 * v127);
        v131 = (int *)(v121 + 4 * (*(_DWORD *)(v119 + 4 * v129) + v130));
        v132 = (char *)v122 + v439 - v124;
        v133 = v40;
        v134 = v45;
        do
        {
          v135 = a8[v123];
          if (v128 < v135 && v125 >= v135)
          {
            if (v126 - (v125 - v135) >= v32)
              v137 = v32;
            else
              v137 = v126 - (v125 - v135);
            if (v137 < 8)
            {
              v139 = 0;
              v140 = v65;
LABEL_168:
              v148 = v137 & 7;
              if (v148)
              {
                v149 = v139 | v148;
                v150 = &v132[v139 - v135];
                while (1)
                {
                  v151 = *v150++;
                  if (v151 != *v140)
                    break;
                  ++v140;
                  ++v139;
                  if (!--v148)
                  {
                    v139 = v149;
                    break;
                  }
                }
              }
            }
            else
            {
              v138 = 0;
              v139 = v137 & 0xFFFFFFFFFFFFFFF8;
              v140 = &v65[v137 & 0xFFFFFFFFFFFFFFF8];
              v141 = -(uint64_t)(v137 >> 3);
              while (1)
              {
                v142 = *(_QWORD *)&v65[v138];
                v143 = *(_QWORD *)((char *)v122 + v125 - v135 + v138);
                if (v142 != v143)
                  break;
                v138 += 8;
                v48 = __CFADD__(v141++, 1);
                if (v48)
                  goto LABEL_168;
              }
              v139 = v138 + (__clz(__rbit64(v143 ^ v142)) >> 3);
            }
            if (v139 >= 2)
            {
              v144 = 135 * v139 + 1935;
              if (v45 < v144)
              {
                if (v123)
                  v144 -= ((0x1CA10u >> (v123 & 0xE)) & 0xE) + 39;
                if (v139 <= v40)
                  v145 = v40;
                else
                  v145 = v139;
                v146 = v45 >= v144;
                if (v45 < v144)
                {
                  v88 = a8[v123];
                  v134 = v144;
                }
                v147 = v445;
                if (v45 < v144)
                  v147 = 0;
                v445 = v147;
                if (v45 < v144)
                {
                  v133 = v139;
                  v45 = v144;
                }
                if (!v146)
                  v40 = v145;
              }
            }
          }
          ++v123;
        }
        while (v123 != 4);
        v152 = v441;
        if (v130 != 0xFFFF)
        {
          do
          {
            v171 = *v131++;
            v170 = v171;
            v172 = v171 & 0x7FFFFFFF;
            v162 = v125 - v172;
            if (v126 - v172 >= v32)
              v173 = v32;
            else
              v173 = v126 - v172;
            v174 = v40 + v152;
            v176 = v162 > v447 || v174 > a4 || v40 >= v173;
            if (!v176 && *(unsigned __int8 *)(v14 + v174) == *((unsigned __int8 *)v122 + v40 + v172))
            {
              v153 = (char *)v122 + v172;
              if (v173 < 8)
              {
                v155 = 0;
                v156 = v65;
LABEL_201:
                v168 = v173 & 7;
                if (v168)
                {
                  v169 = v155 | v168;
                  while (v153[v155] == *v156)
                  {
                    ++v156;
                    ++v155;
                    if (!--v168)
                    {
                      v155 = v169;
                      break;
                    }
                  }
                }
              }
              else
              {
                v154 = 0;
                v155 = v173 & 0xFFFFFFFFFFFFFFF8;
                v156 = &v65[v173 & 0xFFFFFFFFFFFFFFF8];
                v157 = -(uint64_t)(v173 >> 3);
                while (1)
                {
                  v158 = *(_QWORD *)&v65[v154];
                  v159 = *(_QWORD *)&v153[v154];
                  if (v158 != v159)
                    break;
                  v154 += 8;
                  v48 = __CFADD__(v157++, 1);
                  if (v48)
                    goto LABEL_201;
                }
                v155 = v154 + (__clz(__rbit64(v159 ^ v158)) >> 3);
              }
              v160 = __clz(v162) ^ 0x1F;
              v161 = 135 * v155 - 30 * v160 + 1920;
              if (v45 < v161)
              {
                v163 = 135 * v155 - 30 * v160 + 1920;
              }
              else
              {
                v162 = v88;
                v163 = v134;
              }
              v164 = v445;
              if (v45 < v161)
                v165 = 0;
              else
                v165 = v445;
              if (v45 < v161)
                v166 = v155;
              else
                v166 = v133;
              if (v45 < v161)
              {
                v167 = v155;
              }
              else
              {
                v161 = v45;
                v167 = v40;
              }
              if (v155 >= 4)
              {
                v88 = v162;
                v134 = v163;
                v164 = v165;
              }
              v445 = v164;
              if (v155 >= 4)
              {
                v133 = v166;
                v45 = v161;
                v40 = v167;
              }
              v152 = v441;
            }
          }
          while ((v170 & 0x80000000) == 0);
        }
        ++v114;
        v177 = v133;
        v40 = v133;
        v178 = v134;
        v45 = v134;
      }
      while (v114 != v443);
    }
    else
    {
      v178 = v45;
      v177 = v40;
    }
    if (v178 < 0x7E5)
    {
      v15 = v429 + 1;
      v337 = v432 + 1;
      v23 = v434;
      v25 = a4;
      result = 0x1FE35A7BD3579BD3;
      v24 = v418;
      if (v432 + 1 <= v434)
      {
        a7 = v431;
      }
      else
      {
        a7 = v431;
        if (v337 <= v434 + v405)
        {
          v380 = v432 + 9;
          if (v432 + 9 >= v406)
            v380 = v406;
          if (v337 < v380)
          {
            v381 = *(_DWORD *)(v431 + 96);
            v382 = *(_DWORD *)(v431 + 112);
            v383 = *(_DWORD *)(v431 + 116);
            do
            {
              v384 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v14 + (v337 & a4)) & v422)) >> v381;
              v385 = *(unsigned __int16 *)(v430 + 2 * v384);
              *(_WORD *)(v430 + 2 * v384) = v385 + 1;
              *(_DWORD *)(v418 + 4 * (((_DWORD)v384 << v383) + (unint64_t)(v382 & v385))) = v337;
              v15 += 2;
              v337 += 2;
            }
            while (v337 < v380);
          }
        }
        else
        {
          v338 = v432 + 17;
          if (v432 + 17 >= v406)
            v338 = v406;
          if (v337 < v338)
          {
            v339 = *(_DWORD *)(v431 + 96);
            v340 = *(_DWORD *)(v431 + 112);
            v341 = *(_DWORD *)(v431 + 116);
            do
            {
              v342 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(v14 + (v337 & a4)) & v422)) >> v339;
              v343 = *(unsigned __int16 *)(v430 + 2 * v342);
              *(_WORD *)(v430 + 2 * v342) = v343 + 1;
              *(_DWORD *)(v418 + 4 * (((_DWORD)v342 << v341) + (unint64_t)(v340 & v343))) = v337;
              v15 += 4;
              v337 += 4;
            }
            while (v337 < v338);
          }
        }
      }
      goto LABEL_573;
    }
    v179 = 0;
    v180 = v432;
    v181 = v407 - v432;
    v182 = v420 + 1 + v432;
    v25 = a4;
    while (1)
    {
      if (v182 >= v419)
        v183 = v419;
      else
        v183 = v182;
      v440 = v183;
      --v32;
      v184 = v177 - 1;
      if (v177 - 1 >= v32)
        v184 = v32;
      if (*(int *)(a6 + 4) >= 5)
        v185 = 0;
      else
        v185 = v184;
      v186 = v180 + 1;
      if (v180 + 1 < v419)
        v187 = v180 + 1;
      else
        v187 = v419;
      v188 = v186 + v420;
      if (v186 + v420 >= v419)
        v188 = v419;
      v426 = v188;
      v416 = v88;
      if (*(_DWORD *)(a6 + 632))
      {
        v189 = *(unsigned __int8 *)(a6
                                  + (*(_BYTE *)(v413 + v423) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(v14 + (v180 & v25))))
                                  + 637);
        v423 = *(unsigned __int8 *)(v14 + (v180 & v25));
      }
      else
      {
        v189 = v424;
      }
      v433 = v180;
      v424 = v189;
      v425 = v182;
      v190 = *(_QWORD *)(a6 + 8 * v189 + 704);
      v191 = v186 & v25;
      v192 = *(int *)(v431 + 120);
      v193 = v32 >> 3;
      v415 = v177;
      v428 = v178;
      v427 = v179;
      if ((_DWORD)v192)
      {
        v194 = 0;
        v195 = 0;
        v196 = 0;
        v197 = v14 + v191;
        v198 = 2020;
        v199 = 2020;
        do
        {
          v200 = a8[v194];
          v201 = v186 - v200;
          v202 = v187 < v200 || v201 >= v186;
          v203 = v201 & v25;
          v204 = v185 + v191;
          v205 = v202 || v204 > v25;
          v206 = v203 + v185;
          v207 = v205 || v206 > v25;
          if (!v207 && *(unsigned __int8 *)(v14 + v204) == *(unsigned __int8 *)(v14 + v206))
          {
            v208 = v14 + v203;
            if (v32 < 8)
            {
              v209 = 0;
              v213 = (unsigned __int8 *)(v14 + v191);
LABEL_271:
              if ((v32 & 7) != 0)
              {
                v215 = v32 & 7;
                do
                {
                  if (*(unsigned __int8 *)(v208 + v209) != *v213)
                    break;
                  ++v213;
                  ++v209;
                  --v215;
                }
                while (v215);
              }
            }
            else
            {
              v209 = 0;
              v210 = v32 >> 3;
              while (1)
              {
                v211 = *(_QWORD *)(v197 + v209);
                v212 = *(_QWORD *)(v208 + v209);
                if (v211 != v212)
                  break;
                v209 += 8;
                if (!--v210)
                {
                  v213 = (unsigned __int8 *)(v197 + v209);
                  goto LABEL_271;
                }
              }
              v209 += __clz(__rbit64(v212 ^ v211)) >> 3;
            }
            if (v209 > 2 || v194 <= 1 && v209 == 2)
            {
              v214 = 135 * v209 + 1935;
              if (v198 < v214)
              {
                if (v194)
                  v214 -= ((0x1CA10u >> (v194 & 0xE)) & 0xE) + 39;
                if (v198 < v214)
                {
                  v196 = v209;
                  v195 = a8[v194];
                  v199 = v214;
                  v198 = v214;
                  v185 = v209;
                }
              }
            }
          }
          ++v194;
          v25 = a4;
        }
        while (v194 != v192);
      }
      else
      {
        v196 = 0;
        v195 = 0;
        v199 = 2020;
        v198 = 2020;
      }
      v216 = (unsigned __int8 *)(v14 + v191);
      v217 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v216 & v422)) >> *(_DWORD *)(v431 + 96);
      v218 = *(unsigned int *)(v431 + 112);
      v219 = v418 + 4 * ((_DWORD)v217 << *(_DWORD *)(v431 + 116));
      v220 = *(unsigned __int16 *)(v430 + 2 * v217);
      v221 = v220 - v417;
      if (v220 < v417)
        v221 = 0;
      v435 = v187;
      if (v221 < v220)
      {
        v222 = *(unsigned __int16 *)(v430 + 2 * v217);
        do
        {
          v223 = *(unsigned int *)(v219 + 4 * (--v222 & v218));
          v224 = v186 - v223;
          if (v186 - v223 > v187)
            break;
          if (v185 + v191 <= a4)
          {
            v225 = v223 & a4;
            if (v225 + v185 <= a4 && *(unsigned __int8 *)(a3 + v185 + v191) == *(unsigned __int8 *)(a3 + v225 + v185))
            {
              v226 = a3 + v225;
              if (v32 < 8)
              {
                v227 = 0;
                v231 = v216;
LABEL_297:
                if ((v32 & 7) != 0)
                {
                  v233 = v32 & 7;
                  while (*(unsigned __int8 *)(v226 + v227) == *v231)
                  {
                    ++v231;
                    ++v227;
                    --v233;
                    v187 = v435;
                    if (!v233)
                      goto LABEL_291;
                  }
                  v187 = v435;
                }
              }
              else
              {
                v227 = 0;
                v228 = v32 >> 3;
                while (1)
                {
                  v229 = *(_QWORD *)&v216[v227];
                  v230 = *(_QWORD *)(v226 + v227);
                  if (v229 != v230)
                    break;
                  v227 += 8;
                  if (!--v228)
                  {
                    v231 = &v216[v227];
                    goto LABEL_297;
                  }
                }
                v227 += __clz(__rbit64(v230 ^ v229)) >> 3;
              }
LABEL_291:
              if (v227 >= 4)
              {
                v187 = v435;
                v232 = 135 * v227 - 30 * (__clz(v224) ^ 0x1F) + 1920;
                if (v198 < v232)
                {
                  v196 = v227;
                  v195 = v224;
                  v199 = v232;
                  v198 = v232;
                  v185 = v227;
                }
              }
            }
          }
        }
        while (v222 > v221);
      }
      *(_DWORD *)(v219 + 4 * (v218 & v220)) = v186;
      *(_WORD *)(v430 + 2 * v217) = v220 + 1;
      v442 = v186;
      if (v199 != 2020)
      {
        v237 = 0;
        goto LABEL_307;
      }
      v234 = *(_QWORD *)(v431 + 128);
      v236 = *(_QWORD *)(v234 + 40);
      v235 = *(_QWORD *)(v234 + 48);
      if (v235 >= v236 >> 7)
      {
        v237 = 0;
        v319 = ((506832829 * *(_DWORD *)v216) >> 17) & 0x7FFE;
        v320 = *(_QWORD *)(v190 + 32);
        v321 = 1;
        v199 = 2020;
        v322 = v195;
        v323 = v196;
        v25 = a4;
        while (1)
        {
          v324 = v321;
          *(_QWORD *)(v234 + 40) = ++v236;
          v325 = *(unsigned __int8 *)(v320 + v319);
          if (*(_BYTE *)(v320 + v319) && v32 >= v325)
          {
            v326 = *(unsigned __int16 *)(*(_QWORD *)(v190 + 24) + 2 * v319);
            v327 = *(unsigned int *)(*(_QWORD *)v190 + 4 * v325 + 32);
            v328 = *(_QWORD *)(*(_QWORD *)v190 + 168);
            v329 = (unsigned __int8 *)(v328 + v327 + v326 * *(unsigned __int8 *)(v320 + v319));
            if (v325 < 8)
            {
              v196 = 0;
LABEL_471:
              v335 = v325 & 7;
              v193 = v32 >> 3;
              if ((v325 & 7) != 0)
              {
                v336 = v196 | v335;
                while (v216[v196] == *v329)
                {
                  ++v329;
                  ++v196;
                  if (!--v335)
                  {
                    v196 = v336;
                    break;
                  }
                }
                v187 = v435;
              }
            }
            else
            {
              v330 = 0;
              v196 = v325 & 0xF8;
              v331 = (unsigned __int8 *)(v328
                                       + v326 * (unint64_t)*(unsigned __int8 *)(v320 + v319)
                                       + (*(_BYTE *)(v320 + v319) & 0xF8)
                                       + v327);
              while (1)
              {
                v332 = *(_QWORD *)&v329[v330];
                v333 = *(_QWORD *)&v216[v330];
                if (v332 != v333)
                  break;
                v330 += 8;
                if (v196 == v330)
                {
                  v329 = v331;
                  goto LABEL_471;
                }
              }
              v196 = v330 + (__clz(__rbit64(v333 ^ v332)) >> 3);
              v193 = v32 >> 3;
            }
            v186 = v442;
            if (!v196 || v196 + *(unsigned int *)(v190 + 12) <= v325)
              goto LABEL_465;
            v195 = v412
                 + v426
                 + v326
                 + ((((*(_QWORD *)(v190 + 16) >> (6 * (v325 - v196))) & 0x3FLL)
                   + 4 * (v325 - v196)) << *(_BYTE *)(*(_QWORD *)v190 + v325));
            if (v195 <= v447)
            {
              v334 = __clz(v195) ^ 0x1F;
              v187 = v435;
              if (135 * v196 - 30 * v334 + 1920 >= v199)
              {
                v237 = v325 - v196;
                *(_QWORD *)(v234 + 48) = ++v235;
                v199 = 135 * v196 - 30 * v334 + 1920;
              }
              else
              {
LABEL_465:
                v196 = v323;
                v195 = v322;
              }
              v25 = a4;
              goto LABEL_467;
            }
            v196 = v323;
            v195 = v322;
            v25 = a4;
            v187 = v435;
          }
          else
          {
            v196 = v323;
            v195 = v322;
          }
LABEL_467:
          v321 = 0;
          ++v319;
          v322 = v195;
          v323 = v196;
          if ((v324 & 1) == 0)
            goto LABEL_308;
        }
      }
      v237 = 0;
      v199 = 2020;
LABEL_307:
      v25 = a4;
LABEL_308:
      if (v32 >= 0x20)
      {
        v238 = v431;
        v239 = *(_QWORD *)(v431 + 168);
        if (v239 <= v186)
        {
          v240 = *(_DWORD *)(v431 + 180);
          v241 = *(_DWORD *)(v431 + 184);
          v242 = *(_DWORD *)(v431 + 152);
          do
          {
            v243 = *(unsigned __int8 *)(a3 + (v239 & v25));
            v244 = *(unsigned __int8 *)(a3 + ((v239 + 32) & v25));
            if ((v242 & 0x3F000000) == 0)
            {
              v245 = *(_QWORD *)(v238 + 160);
              v246 = *(unsigned int *)(v245 + 4 * (v242 & 0x3FFFFFFF));
              *(_DWORD *)(v245 + 4 * (v242 & 0x3FFFFFFF)) = v239;
              if (v239 == v186 && (_DWORD)v246 != -1)
              {
                v247 = (v186 - v246);
                if (v187 >= v247)
                {
                  v248 = 0;
                  v249 = a3 + (v246 & a4);
                  v250 = v193;
                  do
                  {
                    v251 = *(_QWORD *)&v216[v248];
                    v252 = *(_QWORD *)(v249 + v248);
                    if (v251 != v252)
                    {
                      v248 += __clz(__rbit64(v252 ^ v251)) >> 3;
                      goto LABEL_324;
                    }
                    v248 += 8;
                    --v250;
                  }
                  while (v250);
                  if ((v32 & 7) != 0)
                  {
                    v253 = 0;
                    v254 = v249 + v248;
                    do
                    {
                      if (*(unsigned __int8 *)(v254 + v253) != v216[v248 + v253])
                        break;
                      ++v253;
                    }
                    while ((v181 & 7) != v253);
                    v248 += v253;
                    v186 = v442;
                    v187 = v435;
                    v193 = v32 >> 3;
                  }
LABEL_324:
                  v255 = 135 * v248 - 30 * (__clz(v247) ^ 0x1F) + 1920;
                  v256 = v255 > v199;
                  if (v255 > v199)
                    v257 = v248;
                  else
                    v257 = v196;
                  if (v255 <= v199)
                  {
                    v247 = v195;
                    v255 = v199;
                  }
                  if (v256)
                    v258 = 0;
                  else
                    v258 = v237;
                  v259 = v248 >= 4 && v248 > v196;
                  if (v259)
                    v196 = v257;
                  if (v259)
                    v195 = v247;
                  if (v259)
                    v199 = v255;
                  if (v259)
                    v237 = v258;
                  v238 = v431;
                }
              }
            }
            v242 = v244 + v240 * v242 + v241 * ~v243 + 1;
            ++v239;
            v25 = a4;
          }
          while (v239 <= v186);
          *(_DWORD *)(v238 + 152) = v242;
        }
        *(_QWORD *)(v238 + 168) = v433 + 2;
      }
      if (v443)
      {
        v260 = 0;
        v436 = v426 + v437;
        do
        {
          v261 = a6 + 8 * v260;
          v262 = *(_QWORD *)(v261 + 112);
          v264 = *(_DWORD *)(v262 + 16);
          v263 = *(_DWORD *)(v262 + 20);
          v265 = v262 + 24;
          v266 = v262 + 24 + 4 * (1 << v263);
          v267 = v266 + 2 * (1 << v264);
          v268 = (_QWORD *)(v267 + 4 * *(unsigned int *)(v262 + 4));
          if (*(_DWORD *)v262 != -558043680)
            v268 = (_QWORD *)*v268;
          v269 = 0;
          v270 = *(_QWORD *)(v261 + 368);
          v271 = v436 - v270;
          v272 = *(unsigned int *)(v262 + 8);
          v273 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)v216 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v262 + 12)))) >> -(char)v264;
          v274 = v436 - v270 - v272;
          v275 = *(unsigned __int16 *)(v266 + 2 * v273);
          v276 = (int *)(v267
                       + 4
                       * (*(_DWORD *)(v265 + 4 * ((0xFFFFFFFF >> -(char)v263) & v273))
                                      + v275));
          v277 = -v437 - v440 + v270 + v272;
          v278 = (char *)v268 + v437 + v440 - v270;
          v279 = v199;
          result = v196;
          do
          {
            v280 = a8[v269];
            if (v274 < v280 && v271 >= v280)
            {
              if (v272 + v280 - v271 >= v32)
                v282 = v32;
              else
                v282 = v272 + v280 - v271;
              if (v282 < 8)
              {
                v283 = 0;
                v288 = v216;
LABEL_385:
                if ((v282 & 7) != 0)
                {
                  v291 = v277 + v280;
                  if (v181 < v277 + v280)
                    v291 = v181;
                  v292 = -(uint64_t)(v291 & 7);
                  v293 = &v278[v283 - v280];
                  do
                  {
                    v294 = *v293++;
                    if (v294 != *v288)
                      break;
                    ++v288;
                    ++v283;
                    v48 = __CFADD__(v292++, 1);
                  }
                  while (!v48);
                }
              }
              else
              {
                v283 = 0;
                v284 = v277 + v280;
                if (v181 < v277 + v280)
                  v284 = v181;
                v285 = -(uint64_t)(v284 >> 3);
                while (1)
                {
                  v286 = *(_QWORD *)&v216[v283];
                  v287 = *(_QWORD *)&v278[v283 - v280];
                  if (v286 != v287)
                    break;
                  v283 += 8;
                  v48 = __CFADD__(v285++, 1);
                  if (v48)
                  {
                    v288 = &v216[v283];
                    goto LABEL_385;
                  }
                }
                v283 += __clz(__rbit64(v287 ^ v286)) >> 3;
              }
              if (v283 >= 2)
              {
                v289 = 135 * v283 + 1935;
                if (v199 < v289)
                {
                  if (v269)
                    v289 -= ((0x1CA10u >> (v269 & 0xE)) & 0xE) + 39;
                  if (v283 <= v196)
                    v290 = v196;
                  else
                    v290 = v283;
                  if (v199 < v289)
                  {
                    result = v283;
                    v195 = a8[v269];
                    v279 = v289;
                    v237 = 0;
                    v199 = v289;
                    v196 = v290;
                  }
                }
              }
            }
            ++v269;
          }
          while (v269 != 4);
          v25 = a4;
          v295 = v447;
          if (v275 != 0xFFFF)
          {
            do
            {
              v312 = *v276++;
              v311 = v312;
              v313 = v312 & 0x7FFFFFFF;
              v305 = v271 - v313;
              v314 = v272 - v313;
              if (v272 - v313 >= v32)
                v315 = v32;
              else
                v315 = v272 - v313;
              v316 = v196 + v191;
              v318 = v305 > v295 || v316 > v25 || v196 >= v315;
              if (!v318 && *(unsigned __int8 *)(a3 + v316) == *((unsigned __int8 *)v268 + v196 + v313))
              {
                v296 = (char *)v268 + v313;
                if (v315 < 8)
                {
                  v297 = 0;
                  v302 = v216;
LABEL_422:
                  if ((v315 & 7) != 0)
                  {
                    if (v181 >= v314)
                      v309 = v314;
                    else
                      v309 = v181;
                    v310 = -(uint64_t)(v309 & 7);
                    do
                    {
                      if (v296[v297] != *v302)
                        break;
                      ++v302;
                      ++v297;
                      v48 = __CFADD__(v310++, 1);
                    }
                    while (!v48);
                  }
                }
                else
                {
                  v297 = 0;
                  if (v181 >= v314)
                    v298 = v272 - v313;
                  else
                    v298 = v181;
                  v299 = -(uint64_t)(v298 >> 3);
                  while (1)
                  {
                    v300 = *(_QWORD *)&v216[v297];
                    v301 = *(_QWORD *)&v296[v297];
                    if (v300 != v301)
                      break;
                    v297 += 8;
                    v48 = __CFADD__(v299++, 1);
                    if (v48)
                    {
                      v302 = &v216[v297];
                      goto LABEL_422;
                    }
                  }
                  v297 += __clz(__rbit64(v301 ^ v300)) >> 3;
                }
                v303 = 135 * v297 - 30 * (__clz(v305) ^ 0x1F) + 1920;
                if (v199 < v303)
                  v304 = v297;
                else
                  v304 = result;
                if (v199 < v303)
                {
                  v306 = v303;
                }
                else
                {
                  v305 = v195;
                  v306 = v279;
                }
                if (v199 < v303)
                  v307 = 0;
                else
                  v307 = v237;
                if (v199 < v303)
                {
                  v308 = v297;
                }
                else
                {
                  v303 = v199;
                  v308 = v196;
                }
                if (v297 >= 4)
                {
                  result = v304;
                  v195 = v305;
                  v279 = v306;
                  v237 = v307;
                  v199 = v303;
                  v196 = v308;
                }
                v25 = a4;
                v295 = v447;
              }
            }
            while ((v311 & 0x80000000) == 0);
          }
          ++v260;
          v199 = v279;
          v196 = result;
          v186 = v442;
        }
        while (v260 != v443);
      }
      else
      {
        result = v196;
        v279 = v199;
      }
      if (v279 < v428 + 175)
        break;
      ++v429;
      v14 = a3;
      if (v427 <= 2)
      {
        v179 = v427 + 1;
        --v181;
        v182 = v425 + 1;
        v88 = v195;
        v178 = v279;
        v445 = v237;
        v177 = result;
        v180 = v186;
        if (v433 + 9 < v421)
          continue;
      }
      goto LABEL_488;
    }
    v344 = v433 + v420;
    if (v433 + v420 >= v419)
      v344 = v419;
    v426 = v344;
    result = v415;
    v195 = v416;
    v237 = v445;
    v186 = v433;
    v14 = a3;
LABEL_488:
    a7 = v431;
    v24 = v418;
    if (v195 > v426 + v409)
    {
LABEL_489:
      v345 = v195 + 15;
      goto LABEL_490;
    }
    v370 = *a8;
    if (v195 == v370)
    {
      v345 = 0;
      goto LABEL_521;
    }
    v386 = a8[1];
    if (v195 == v386)
    {
      v345 = 1;
    }
    else
    {
      v387 = v195 + 3 - v370;
      if (v387 > 6)
      {
        v390 = v195 + 3 - v386;
        if (v390 > 6)
        {
          if (v195 == a8[2])
          {
            v345 = 2;
          }
          else
          {
            if (v195 != a8[3])
              goto LABEL_489;
            v345 = 3;
          }
          goto LABEL_490;
        }
        v388 = 4 * v390;
        v389 = 266017486;
      }
      else
      {
        v388 = 4 * v387;
        v389 = 158663784;
      }
      v345 = (v389 >> v388) & 0xF;
    }
LABEL_490:
    if (v195 <= v426 + v409)
    {
      if (v345)
      {
        a8[3] = a8[2];
        v346 = *(int32x2_t *)a8;
        *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
        *a8 = v195;
        v347 = *(_DWORD *)(v431 + 120);
        if (v347 >= 5)
        {
          v348 = vdupq_n_s32(v195);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v348, (int32x4_t)xmmword_2368AF3A0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v348.i8, (int32x2_t)0x3FFFFFFFDLL);
          if (v347 >= 0xB)
          {
            v349 = vdupq_lane_s32(v346, 0);
            *(int32x4_t *)(a8 + 10) = vaddq_s32(v349, (int32x4_t)xmmword_2368AF3A0);
            *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v349.i8, (int32x2_t)0x3FFFFFFFDLL);
          }
        }
      }
    }
LABEL_521:
    *(_DWORD *)v411 = v429;
    *(_DWORD *)(v411 + 4) = result | (v237 << 25);
    v371 = *(unsigned int *)(a6 + 68);
    v372 = v371 + 16;
    if (v371 + 16 <= v345)
    {
      v374 = *(unsigned int *)(a6 + 64);
      v375 = v345 - v371 + (4 << v374) - 16;
      v376 = (__clz(v375) ^ 0x1F) - 1;
      v377 = ((v375 >> v376) & 1 | 2) << v376;
      v345 = ((v375 & ~(-1 << v374))
            + v372
            + ((((v375 >> v376) & 1 | (2 * (v376 - v374))) + 65534) << v374)) | ((v376 - v374) << 10);
      v373 = (v375 - v377) >> v374;
    }
    else
    {
      LODWORD(v373) = 0;
    }
    *(_WORD *)(v411 + 14) = v345;
    *(_DWORD *)(v411 + 8) = v373;
    if (v429 > 5)
    {
      if (v429 > 0x81)
      {
        if (v429 > 0x841)
        {
          if (v429 >> 1 >= 0xC21)
          {
            if (v429 < 0x5842)
              LOWORD(v378) = 22;
            else
              LOWORD(v378) = 23;
          }
          else
          {
            LOWORD(v378) = 21;
          }
        }
        else
        {
          v378 = (__clz(v429 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v379 = (__clz(v429 - 2) ^ 0x1F) - 1;
        v378 = ((v429 - 2) >> v379) + 2 * v379 + 2;
      }
    }
    else
    {
      LOWORD(v378) = v429;
    }
    v391 = v237 + (int)result;
    if (v391 > 9)
    {
      if (v391 > 0x85)
      {
        if (v391 > 0x845)
          LOWORD(v392) = 23;
        else
          v392 = (__clz(v391 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v393 = v391 - 6;
        v394 = (__clz(v393) ^ 0x1F) - 1;
        v392 = (v393 >> v394) + 2 * v394 + 4;
      }
    }
    else
    {
      LOWORD(v392) = v237 + result - 2;
    }
    v395 = v392 & 7 | (8 * (v378 & 7));
    if ((v345 & 0x3FF) != 0 || (unsigned __int16)v378 > 7u || (unsigned __int16)v392 > 0xFu)
    {
      v397 = 3 * ((unsigned __int16)v378 >> 3) + ((unsigned __int16)(v392 & 0xFFF8) >> 3);
      v396 = ((((0x520D40u >> (2 * v397)) & 0xC0) + (v397 << 6)) | v395) + 64;
    }
    else
    {
      LOWORD(v396) = v395 | 0x40;
      if ((v392 & 0xFFF8) == 0)
        LOWORD(v396) = v392 & 7 | (8 * (v378 & 7));
    }
    *(_WORD *)(v411 + 12) = v396;
    v398 = v408;
    *a12 += v429;
    v399 = v186 + 2;
    v337 = v186 + result;
    if (v186 + result < v408)
      v398 = v186 + result;
    if (v195 < result >> 2)
    {
      if (v399 <= v337 - 4 * v195)
        v399 = v337 - 4 * v195;
      if (v398 < v399)
        v399 = v398;
    }
    v23 = v410 + 2 * result + v186;
    v411 += 16;
    if (v399 < v398)
    {
      v400 = *(_DWORD *)(v431 + 96);
      v401 = *(_DWORD *)(v431 + 112);
      v402 = *(_DWORD *)(v431 + 116);
      result = 0x1FE35A7BD3579BD3;
      do
      {
        v403 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v399 & v25)) & v422)) >> v400;
        v404 = *(unsigned __int16 *)(v430 + 2 * v403);
        *(_WORD *)(v430 + 2 * v403) = v404 + 1;
        *(_DWORD *)(v418 + 4 * (((_DWORD)v403 << v402) + (unint64_t)(v401 & v404))) = v399++;
      }
      while (v398 != v399);
    }
    v15 = 0;
LABEL_573:
    a2 = v337;
  }
  while (v337 + 8 < v421);
LABEL_580:
  *a9 = v15 + v421 - v337;
  *a11 += (v411 - a10) >> 4;
  return result;
}

unint64_t sub_2367918FC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;

  v12 = a2;
  v13 = *a9;
  v159 = a2 + result;
  v14 = a2 + result - 7;
  v152 = v14;
  if (result <= 7)
    v14 = a2;
  v149 = v14;
  if (*(int *)(a6 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (result < 9)
  {
    v153 = a10;
    v102 = a2;
    goto LABEL_233;
  }
  v145 = v15;
  v16 = (1 << *(_DWORD *)(a6 + 8)) - 16;
  v158 = *(_QWORD *)(a6 + 16);
  v17 = v15 + a2;
  v156 = a5;
  v157 = a5 + 256;
  v155 = a7;
  v144 = *(_QWORD *)(a6 + 104);
  v143 = v144 + 1;
  v151 = 4 * v15;
  v18 = *(_QWORD *)(a7 + 88);
  v153 = a10;
  v146 = a8;
  do
  {
    if (v12 >= v16)
      v19 = v16;
    else
      v19 = v12;
    if (v12 + v158 >= v16)
      v20 = v16;
    else
      v20 = v12 + v158;
    if (*(_DWORD *)(a6 + 632))
    {
      if (v12)
      {
        v21 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
        if (v12 != 1)
        {
          v22 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_21:
          v23 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v157 + v22) | *(_BYTE *)(a5 + v21)) + 637);
          goto LABEL_22;
        }
      }
      else
      {
        v21 = 0;
      }
      v22 = 0;
      goto LABEL_21;
    }
    v23 = 0;
    v21 = 0;
LABEL_22:
    v24 = v159 - v12;
    v25 = *(_QWORD *)(a6 + 8 * v23 + 704);
    v154 = *(_QWORD *)(a6 + 80);
    v26 = v12 & a4;
    v27 = (_QWORD *)(a3 + (v12 & a4));
    v28 = *(unsigned __int8 *)v27;
    v29 = (0xBD1E35A7BD000000 * *v27) >> 48;
    v30 = *a8;
    if (v12 < v30)
      goto LABEL_33;
    v31 = (unsigned __int8 *)(a3 + (a4 & (v12 - v30)));
    if (v28 != *v31)
      goto LABEL_33;
    if (v24 < 8)
    {
      v34 = 0;
      v35 = (unsigned __int8 *)(a3 + (v12 & a4));
LABEL_221:
      v139 = v24 & 7;
      if ((v24 & 7) != 0)
      {
        v140 = v34 | v139;
        while (v31[v34] == *v35)
        {
          ++v35;
          ++v34;
          if (!--v139)
          {
            v34 = v140;
            break;
          }
        }
      }
    }
    else
    {
      v32 = 0;
      v33 = v24 >> 3;
      v34 = v24 & 0xFFFFFFFFFFFFFFF8;
      v35 = (unsigned __int8 *)(a3 + v26 + (v24 & 0xFFFFFFFFFFFFFFF8));
      while (1)
      {
        v36 = v27[v32];
        v37 = *(_QWORD *)&v31[v32 * 8];
        if (v36 != v37)
          break;
        ++v32;
        if (!--v33)
          goto LABEL_221;
      }
      v34 = v32 * 8 + (__clz(__rbit64(v37 ^ v36)) >> 3);
    }
    if (v34 >= 4 && (v38 = 135 * v34 + 1935, v38 >= 0x7E5))
    {
      v39 = 0;
      *(_DWORD *)(v18 + 4 * v29) = v12;
    }
    else
    {
LABEL_33:
      v40 = *(unsigned int *)(v18 + 4 * v29);
      *(_DWORD *)(v18 + 4 * v29) = v12;
      v30 = v12 - v40;
      v41 = (unsigned __int8 *)(a3 + (v40 & a4));
      result = *v41;
      if (v28 != (_DWORD)result || v12 == v40 || v30 > v19)
        goto LABEL_128;
      if (v24 < 8)
      {
        v34 = 0;
        v46 = (unsigned __int8 *)(a3 + (v12 & a4));
LABEL_215:
        v137 = v24 & 7;
        if ((v24 & 7) != 0)
        {
          v138 = v34 | v137;
          while (1)
          {
            result = v41[v34];
            if ((_DWORD)result != *v46)
              break;
            ++v46;
            ++v34;
            if (!--v137)
            {
              v34 = v138;
              break;
            }
          }
        }
      }
      else
      {
        v44 = 0;
        v45 = v24 >> 3;
        v34 = v24 & 0xFFFFFFFFFFFFFFF8;
        v46 = (unsigned __int8 *)(a3 + v26 + (v24 & 0xFFFFFFFFFFFFFFF8));
        while (1)
        {
          v47 = v27[v44];
          result = *(_QWORD *)&v41[v44 * 8];
          if (v47 != result)
            break;
          ++v44;
          if (!--v45)
            goto LABEL_215;
        }
        v34 = v44 * 8 + (__clz(__rbit64(result ^ v47)) >> 3);
      }
      if (v34 < 4 || (v38 = 135 * v34 - 30 * (__clz(v30) ^ 0x1F) + 1920, v38 <= 0x7E4))
      {
        v96 = *(_QWORD *)(a7 + 80);
        v97 = *(_QWORD *)(v96 + 40);
        v98 = *(_QWORD *)(v96 + 48);
        if (v98 < v97 >> 7)
          goto LABEL_128;
        v99 = ((506832829 * *(_DWORD *)v27) >> 17) & 0x7FFELL;
        v100 = *(_QWORD *)(v25 + 32);
        *(_QWORD *)(v96 + 40) = v97 + 1;
        v101 = *(unsigned __int8 *)(v100 + v99);
        if (!*(_BYTE *)(v100 + v99) || v24 < v101)
          goto LABEL_128;
        v116 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 24) + 2 * v99);
        v117 = *(unsigned int *)(*(_QWORD *)v25 + 4 * v101 + 32);
        v118 = *(_QWORD *)(*(_QWORD *)v25 + 168);
        v119 = (unsigned __int8 *)(v118 + v117 + v116 * (unint64_t)v101);
        if (v101 < 8)
        {
          v34 = 0;
LABEL_227:
          v141 = v101 & 7;
          if ((v101 & 7) != 0)
          {
            v142 = v34 | v141;
            while (1)
            {
              result = *((unsigned __int8 *)v27 + v34);
              if ((_DWORD)result != *v119)
                break;
              ++v119;
              ++v34;
              if (!--v141)
              {
                v34 = v142;
                break;
              }
            }
          }
        }
        else
        {
          v120 = 0;
          v34 = v101 & 0xF8;
          v121 = (unsigned __int8 *)(v118 + v116 * (unint64_t)v101 + v34 + v117);
          while (1)
          {
            result = *(_QWORD *)&v119[v120];
            v122 = v27[v120 / 8];
            if (result != v122)
              break;
            v120 += 8;
            if (v34 == v120)
            {
              v119 = v121;
              goto LABEL_227;
            }
          }
          v34 = v120 + (__clz(__rbit64(v122 ^ result)) >> 3);
        }
        if (!v34
          || v34 + *(unsigned int *)(v25 + 12) <= v101
          || (v30 = v143
                  + v20
                  + v116
                  + ((((*(_QWORD *)(v25 + 16) >> (6 * (v101 - v34))) & 0x3FLL)
                    + 4 * (v101 - v34)) << *(_BYTE *)(*(_QWORD *)v25 + v101)),
              v30 > v154)
          || (v38 = 135 * v34 - 30 * (__clz(v30) ^ 0x1F) + 1920, v38 < 0x7E4)
          || (*(_QWORD *)(v96 + 48) = v98 + 1, v38 == 2020))
        {
LABEL_128:
          ++v13;
          v102 = v12 + 1;
          if (v12 + 1 > v17)
          {
            if (v102 <= v17 + v151)
            {
              v104 = v12 + 9;
              if (v12 + 9 >= v152)
                v104 = v152;
              while (v102 < v104)
              {
                *(_DWORD *)(v18 + (((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v102 & a4))) >> 46) & 0x3FFFC)) = v102;
                v13 += 2;
                v102 += 2;
              }
            }
            else
            {
              v103 = v12 + 17;
              if (v12 + 17 >= v152)
                v103 = v152;
              while (v102 < v103)
              {
                *(_DWORD *)(v18 + (((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v102 & a4))) >> 46) & 0x3FFFC)) = v102;
                v13 += 4;
                v102 += 4;
              }
            }
          }
          goto LABEL_208;
        }
        v39 = v101 - v34;
      }
      else
      {
        v39 = 0;
      }
    }
    v48 = 0;
    v49 = *a8;
    while (1)
    {
      --v24;
      v50 = v34 - 1;
      if (v34 - 1 >= v24)
        v50 = v24;
      if (*(int *)(a6 + 4) >= 5)
        v51 = 0;
      else
        v51 = v50;
      v52 = v12 + 1;
      if (v12 + 1 < v16)
        v53 = v12 + 1;
      else
        v53 = v16;
      if (v52 + v158 >= v16)
        v54 = v16;
      else
        v54 = v52 + v158;
      if (*(_DWORD *)(a6 + 632))
      {
        v55 = *(_BYTE *)(v157 + v21);
        v21 = *(unsigned __int8 *)(a3 + (v12 & a4));
        v23 = *(unsigned __int8 *)(a6 + (v55 | *(_BYTE *)(v156 + v21)) + 637);
      }
      v56 = *(_QWORD *)(a6 + 8 * v23 + 704);
      v57 = *(unsigned __int8 *)(a3 + v51 + (v52 & a4));
      v58 = (_QWORD *)(a3 + (v52 & a4));
      v59 = (0xBD1E35A7BD000000 * *v58) >> 48;
      if (v52 >= v49)
      {
        v60 = a4 & (v52 - v49);
        if (v57 == *(unsigned __int8 *)(a3 + v60 + v51))
        {
          v61 = a3 + v60;
          if (v24 < 8)
          {
            v62 = 0;
            v66 = (unsigned __int8 *)(a3 + (v52 & a4));
LABEL_115:
            v93 = v24 & 7;
            if ((v24 & 7) != 0)
            {
              do
              {
                v148 = v93;
                if (*(unsigned __int8 *)(v61 + v62) != *v66)
                  break;
                ++v66;
                ++v62;
                --v93;
              }
              while (v148 != 1);
            }
          }
          else
          {
            v62 = 0;
            v63 = v24 >> 3;
            while (1)
            {
              v64 = *(_QWORD *)((char *)v58 + v62);
              v65 = *(_QWORD *)(v61 + v62);
              if (v64 != v65)
                break;
              v62 += 8;
              if (!--v63)
              {
                v66 = (unsigned __int8 *)v58 + v62;
                goto LABEL_115;
              }
            }
            v62 += __clz(__rbit64(v65 ^ v64)) >> 3;
          }
          if (v62 >= 4)
          {
            v67 = 135 * v62 + 1935;
            if (v67 >= 0x7E5)
            {
              v68 = 0;
              *(_DWORD *)(v18 + 4 * v59) = v52;
              v69 = v49;
              goto LABEL_94;
            }
          }
        }
      }
      v70 = *(unsigned int *)(v18 + 4 * v59);
      *(_DWORD *)(v18 + 4 * v59) = v52;
      if (v57 != *(unsigned __int8 *)(a3 + (v70 & a4) + v51)
        || ((v69 = v52 - v70, v52 != v70) ? (v71 = v69 > v53) : (v71 = 1), v71))
      {
        v69 = 0;
        v68 = 0;
        v62 = v51;
        v67 = 2020;
        goto LABEL_94;
      }
      v72 = a3 + (v70 & a4);
      if (v24 < 8)
      {
        v62 = 0;
        v76 = (unsigned __int8 *)(a3 + (v52 & a4));
LABEL_110:
        v92 = v24 & 7;
        if ((v24 & 7) != 0)
        {
          do
          {
            if (*(unsigned __int8 *)(v72 + v62) != *v76)
              break;
            ++v76;
            ++v62;
            --v92;
          }
          while (v92);
        }
      }
      else
      {
        v62 = 0;
        v73 = v24 >> 3;
        while (1)
        {
          v74 = *(_QWORD *)((char *)v58 + v62);
          v75 = *(_QWORD *)(v72 + v62);
          if (v74 != v75)
            break;
          v62 += 8;
          if (!--v73)
          {
            v76 = (unsigned __int8 *)v58 + v62;
            goto LABEL_110;
          }
        }
        v62 += __clz(__rbit64(v75 ^ v74)) >> 3;
      }
      if (v62 >= 4)
      {
        v67 = 135 * v62 - 30 * (__clz(v69) ^ 0x1F) + 1920;
        if (v67 > 0x7E4)
        {
          v68 = 0;
          goto LABEL_94;
        }
      }
      v77 = *(_QWORD *)(v155 + 80);
      v78 = *(_QWORD *)(v77 + 40);
      v79 = *(_QWORD *)(v77 + 48);
      if (v79 < v78 >> 7
        || (v80 = ((506832829 * *(_DWORD *)v58) >> 17) & 0x7FFELL,
            v81 = *(_QWORD *)(v56 + 32),
            *(_QWORD *)(v77 + 40) = v78 + 1,
            v82 = *(unsigned __int8 *)(v81 + v80),
            !(_DWORD)v82)
        || v24 < v82)
      {
LABEL_92:
        v69 = 0;
        v68 = 0;
LABEL_93:
        v62 = v51;
        v67 = 2020;
        goto LABEL_94;
      }
      v150 = v49;
      v84 = *(unsigned __int16 *)(*(_QWORD *)(v56 + 24) + 2 * v80);
      v85 = *(unsigned int *)(*(_QWORD *)v56 + 4 * v82 + 32);
      v147 = v84;
      v86 = *(_QWORD *)(*(_QWORD *)v56 + 168);
      v87 = (unsigned __int8 *)(v86 + v85 + v84 * (unint64_t)v82);
      if (v82 < 8)
      {
        v62 = 0;
LABEL_120:
        v94 = v82 & 7;
        if ((v82 & 7) != 0)
        {
          v95 = v62 | v94;
          while (*((unsigned __int8 *)v58 + v62) == *v87)
          {
            ++v87;
            ++v62;
            if (!--v94)
            {
              v62 = v95;
              break;
            }
          }
        }
      }
      else
      {
        v88 = 0;
        v62 = v82 & 0xF8;
        v89 = (unsigned __int8 *)(v86 + v84 * (unint64_t)v82 + v62 + v85);
        while (1)
        {
          v90 = *(_QWORD *)&v87[v88];
          v91 = v58[v88 / 8];
          if (v90 != v91)
            break;
          v88 += 8;
          if (v62 == v88)
          {
            v87 = v89;
            goto LABEL_120;
          }
        }
        v62 = v88 + (__clz(__rbit64(v91 ^ v90)) >> 3);
      }
      v68 = 0;
      v69 = 0;
      v49 = v150;
      if (!v62 || v62 + *(unsigned int *)(v56 + 12) <= v82)
        goto LABEL_93;
      v69 = v143
          + v54
          + v147
          + ((((*(_QWORD *)(v56 + 16) >> (6 * (v82 - v62))) & 0x3FLL) + 4 * (v82 - v62)) << *(_BYTE *)(*(_QWORD *)v56 + v82));
      if (v69 > v154)
        goto LABEL_92;
      v67 = 135 * v62 - 30 * (__clz(v69) ^ 0x1F) + 1920;
      if (v67 < 0x7E4)
        goto LABEL_92;
      v68 = v82 - v62;
      *(_QWORD *)(v77 + 48) = v79 + 1;
LABEL_94:
      if (v67 < v38 + 175)
        break;
      ++v13;
      if (v48 <= 2)
      {
        v83 = v12 + 9;
        ++v48;
        v30 = v69;
        v38 = v67;
        v39 = v68;
        v34 = v62;
        ++v12;
        if (v83 < v159)
          continue;
      }
      goto LABEL_142;
    }
    if (v12 + v158 >= v16)
      v54 = v16;
    else
      v54 = v12 + v158;
    v69 = v30;
    v68 = v39;
    v62 = v34;
    v52 = v12;
LABEL_142:
    a8 = v146;
    if (v69 > v54 + v144)
    {
LABEL_143:
      v105 = v69 + 15;
      goto LABEL_144;
    }
    v106 = *v146;
    if (v69 == v106)
    {
      v105 = 0;
      goto LABEL_149;
    }
    v123 = v146[1];
    if (v69 == v123)
    {
      v105 = 1;
    }
    else
    {
      v124 = v69 + 3 - v106;
      if (v124 > 6)
      {
        v127 = v69 + 3 - v123;
        if (v127 > 6)
        {
          if (v69 == v146[2])
          {
            v105 = 2;
          }
          else
          {
            if (v69 != v146[3])
              goto LABEL_143;
            v105 = 3;
          }
          goto LABEL_144;
        }
        v125 = 4 * v127;
        v126 = 266017486;
      }
      else
      {
        v125 = 4 * v124;
        v126 = 158663784;
      }
      v105 = (v126 >> v125) & 0xF;
    }
LABEL_144:
    if (v69 <= v54 + v144 && v105)
    {
      v146[3] = v146[2];
      *(_QWORD *)(v146 + 1) = *(_QWORD *)v146;
      *v146 = v69;
    }
LABEL_149:
    *(_DWORD *)v153 = v13;
    *(_DWORD *)(v153 + 4) = v62 | (v68 << 25);
    v107 = *(unsigned int *)(a6 + 68);
    v108 = v107 + 16;
    if (v107 + 16 <= v105)
    {
      v110 = *(unsigned int *)(a6 + 64);
      v111 = v105 - v107 + (4 << v110) - 16;
      v112 = (__clz(v111) ^ 0x1F) - 1;
      v113 = ((v111 >> v112) & 1 | 2) << v112;
      v105 = ((v111 & ~(-1 << v110))
            + v108
            + ((((v111 >> v112) & 1 | (2 * (v112 - v110))) + 65534) << v110)) | ((v112 - v110) << 10);
      v109 = (v111 - v113) >> v110;
    }
    else
    {
      LODWORD(v109) = 0;
    }
    *(_WORD *)(v153 + 14) = v105;
    *(_DWORD *)(v153 + 8) = v109;
    if (v13 > 5)
    {
      if (v13 > 0x81)
      {
        if (v13 > 0x841)
        {
          if (v13 >> 1 >= 0xC21)
          {
            if (v13 < 0x5842)
              LOWORD(v114) = 22;
            else
              LOWORD(v114) = 23;
          }
          else
          {
            LOWORD(v114) = 21;
          }
        }
        else
        {
          v114 = (__clz(v13 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v115 = (__clz(v13 - 2) ^ 0x1F) - 1;
        v114 = ((v13 - 2) >> v115) + 2 * v115 + 2;
      }
    }
    else
    {
      LOWORD(v114) = v13;
    }
    v128 = v68 + (int)v62;
    if (v128 > 9)
    {
      if (v128 > 0x85)
      {
        if (v128 > 0x845)
          LOWORD(v129) = 23;
        else
          v129 = (__clz(v128 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v130 = v128 - 6;
        v131 = (__clz(v130) ^ 0x1F) - 1;
        v129 = (v130 >> v131) + 2 * v131 + 4;
      }
    }
    else
    {
      LOWORD(v129) = v68 + v62 - 2;
    }
    v132 = v129 & 7 | (8 * (v114 & 7));
    if ((v105 & 0x3FF) != 0 || (unsigned __int16)v114 > 7u || (unsigned __int16)v129 > 0xFu)
    {
      v134 = 3 * ((unsigned __int16)v114 >> 3) + ((unsigned __int16)(v129 & 0xFFF8) >> 3);
      v133 = ((((0x520D40u >> (2 * v134)) & 0xC0) + (v134 << 6)) | v132) + 64;
    }
    else
    {
      LOWORD(v133) = v132 | 0x40;
      if ((v129 & 0xFFF8) == 0)
        LOWORD(v133) = v129 & 7 | (8 * (v114 & 7));
    }
    *(_WORD *)(v153 + 12) = v133;
    *a12 += v13;
    v135 = v52 + 2;
    v102 = v52 + v62;
    v136 = v149;
    if (v52 + v62 < v149)
      v136 = v52 + v62;
    if (v69 < v62 >> 2)
    {
      if (v135 <= v102 - 4 * v69)
        v135 = v102 - 4 * v69;
      if (v136 < v135)
        v135 = v136;
    }
    v17 = v145 + 2 * v62 + v52;
    result = v153 + 16;
    v153 += 16;
    if (v135 >= v136)
    {
      v13 = 0;
      a7 = v155;
      a5 = v156;
    }
    else
    {
      a7 = v155;
      a5 = v156;
      do
      {
        *(_DWORD *)(v18 + (((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v135 & a4))) >> 46) & 0x3FFFC)) = v135;
        ++v135;
      }
      while (v136 != v135);
      v13 = 0;
    }
LABEL_208:
    v12 = v102;
  }
  while (v102 + 8 < v159);
LABEL_233:
  *a9 = v13 + v159 - v102;
  *a11 += (v153 - a10) >> 4;
  return result;
}

unint64_t sub_2367926B8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *i, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v11 = a2;
  v130 = *MEMORY[0x24BDAC8D0];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v115 = v14;
  if (result <= 7)
    v14 = a2;
  v119 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (result >= 9)
  {
    v126 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v116 = *(_QWORD *)(a5 + 104);
    v117 = *(_QWORD *)(a5 + 16);
    v16 = v15 + a2;
    v122 = a5;
    v118 = v15;
    v114 = 4 * v15;
    v17 = *(_QWORD *)(a6 + 88);
    v120 = a9;
    v121 = i;
    v124 = v13;
    while (1)
    {
      v18 = v13 - v11;
      if (v11 >= v126)
        v19 = v126;
      else
        v19 = v11;
      v20 = v11 & a4;
      v21 = (_QWORD *)(a3 + (v11 & a4));
      v22 = *(unsigned __int8 *)v21;
      v23 = *i;
      v127 = v12;
      if (v11 < v23)
        goto LABEL_22;
      v24 = (unsigned __int8 *)(a3 + (a4 & (v11 - v23)));
      if (v22 != *v24)
        goto LABEL_22;
      if (v18 < 8)
      {
        v26 = 0;
        v27 = (unsigned __int8 *)(a3 + (v11 & a4));
LABEL_181:
        v111 = v18 & 7;
        if ((v18 & 7) != 0)
        {
          v112 = v26 | v111;
          while (v24[v26] == *v27)
          {
            ++v27;
            ++v26;
            if (!--v111)
            {
              v26 = v112;
              break;
            }
          }
        }
      }
      else
      {
        v25 = 0;
        v26 = v18 & 0xFFFFFFFFFFFFFFF8;
        v27 = (unsigned __int8 *)(a3 + v20 + (v18 & 0xFFFFFFFFFFFFFFF8));
        v28 = v18 >> 3;
        while (1)
        {
          v29 = v21[v25];
          v30 = *(_QWORD *)&v24[v25 * 8];
          if (v29 != v30)
            break;
          ++v25;
          if (!--v28)
            goto LABEL_181;
        }
        v26 = v25 * 8 + (__clz(__rbit64(v30 ^ v29)) >> 3);
      }
      if (v26 >= 4 && (v31 = 135 * v26 + 1935, v31 >= 0x7E5))
      {
        v22 = *(unsigned __int8 *)(a3 + v26 + v20);
      }
      else
      {
LABEL_22:
        v23 = 0;
        v26 = 0;
        v31 = 2020;
      }
      v32 = 0;
      v128 = (0xBD1E35A7BD000000 * *v21) >> 48;
      v129 = (unsigned __int16)(v128 + 8);
      v33 = 1;
      do
      {
        v34 = v33;
        v35 = *(unsigned int *)(v17 + 4 * *(&v128 + v32));
        v36 = v11 - v35;
        result = *(unsigned __int8 *)(a3 + (v35 & a4) + v26);
        if (v22 == (_DWORD)result && v11 != v35 && v36 <= v19)
        {
          result = a3 + (v35 & a4);
          if (v18 < 8)
          {
            v43 = 0;
            v44 = (unsigned __int8 *)(a3 + (v11 & a4));
LABEL_43:
            if ((v18 & 7) != 0)
            {
              v45 = v18 & 7 | v43;
              v46 = v18 & 7;
              while (*(unsigned __int8 *)(result + v43) == *v44)
              {
                ++v44;
                ++v43;
                if (!--v46)
                {
                  v43 = v45;
                  break;
                }
              }
              a5 = v122;
            }
          }
          else
          {
            v39 = 0;
            v40 = v18 >> 3;
            while (1)
            {
              v41 = v21[v39];
              v42 = *(_QWORD *)(result + v39 * 8);
              if (v41 != v42)
                break;
              ++v39;
              if (!--v40)
              {
                v43 = v18 & 0xFFFFFFFFFFFFFFF8;
                v44 = (unsigned __int8 *)v21 + (v18 & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_43;
              }
            }
            v43 = v39 * 8 + (__clz(__rbit64(v42 ^ v41)) >> 3);
          }
          if (v43 >= 4)
          {
            result = 30 * (__clz(v36) ^ 0x1F);
            if (v31 < 135 * v43 - result + 1920)
            {
              v22 = *(unsigned __int8 *)(a3 + v43 + v20);
              v23 = v36;
              v31 = 135 * v43 - result + 1920;
              v26 = v43;
            }
          }
        }
        v33 = 0;
        v32 = 1;
      }
      while ((v34 & 1) != 0);
      *(_DWORD *)(v17 + 4 * *(unint64_t *)((char *)&v128 + (v11 & 8))) = v11;
      if (v31 < 0x7E5)
      {
        v12 = v127 + 1;
        v81 = v11 + 1;
        if (v11 + 1 <= v16)
        {
          i = v121;
          v13 = v124;
        }
        else
        {
          v13 = v124;
          if (v81 <= v16 + v114)
          {
            v96 = v11 + 9;
            if (v11 + 9 >= v115)
              v96 = v115;
            for (i = v121; v81 < v96; v81 += 2)
            {
              *(_DWORD *)(v17
                        + 4
                        * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v81 & a4))) >> 48) + (v81 & 8))) = v81;
              v12 += 2;
            }
          }
          else
          {
            v82 = v11 + 17;
            if (v11 + 17 >= v115)
              v82 = v115;
            for (i = v121; v81 < v82; v81 += 4)
            {
              *(_DWORD *)(v17
                        + 4
                        * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v81 & a4))) >> 48) + (v81 & 8))) = v81;
              v12 += 4;
            }
          }
        }
        goto LABEL_174;
      }
      v123 = v23;
      v47 = 0;
      v125 = *v121;
      while (1)
      {
        --v18;
        v48 = v26 - 1;
        if (v26 - 1 >= v18)
          v48 = v18;
        v49 = *(int *)(a5 + 4) >= 5 ? 0 : v48;
        v50 = v11 + 1;
        v51 = v11 + 1 < v126 ? v11 + 1 : v126;
        v52 = v50 & a4;
        v53 = *(unsigned __int8 *)(a3 + v49 + (v50 & a4));
        v54 = (_QWORD *)(a3 + (v50 & a4));
        if (v50 < v125)
        {
          v62 = 0;
          v63 = 2020;
        }
        else
        {
          v55 = a4 & (v50 - v125);
          if (v53 != *(unsigned __int8 *)(a3 + v55 + v49))
            goto LABEL_71;
          v56 = a3 + v55;
          if (v18 < 8)
          {
            v57 = 0;
            v61 = (unsigned __int8 *)(a3 + (v50 & a4));
LABEL_102:
            v80 = v18 & 7;
            if ((v18 & 7) != 0)
            {
              do
              {
                if (*(unsigned __int8 *)(v56 + v57) != *v61)
                  break;
                ++v61;
                ++v57;
                --v80;
              }
              while (v80);
            }
          }
          else
          {
            v57 = 0;
            v58 = v18 >> 3;
            while (1)
            {
              v59 = *(_QWORD *)((char *)v54 + v57);
              v60 = *(_QWORD *)(v56 + v57);
              if (v59 != v60)
                break;
              v57 += 8;
              if (!--v58)
              {
                v61 = (unsigned __int8 *)v54 + v57;
                goto LABEL_102;
              }
            }
            v57 += __clz(__rbit64(v60 ^ v59)) >> 3;
          }
          if (v57 >= 4 && (v63 = 135 * v57 + 1935, v63 >= 0x7E5))
          {
            v53 = *(unsigned __int8 *)(a3 + v57 + v52);
            v49 = v57;
            v62 = v125;
          }
          else
          {
LABEL_71:
            v62 = 0;
            v63 = 2020;
          }
        }
        v64 = 0;
        v128 = (0xBD1E35A7BD000000 * *v54) >> 48;
        v129 = (unsigned __int16)(v128 + 8);
        v65 = 1;
        do
        {
          v66 = v65;
          v67 = *(unsigned int *)(v17 + 4 * *(&v128 + v64));
          v68 = v50 - v67;
          if (v53 == *(unsigned __int8 *)(a3 + (v67 & a4) + v49) && v50 != v67 && v68 <= v51)
          {
            v71 = a3 + (v67 & a4);
            if (v18 < 8)
            {
              v72 = 0;
              v76 = (unsigned __int8 *)(a3 + (v50 & a4));
LABEL_92:
              if ((v18 & 7) != 0)
              {
                v78 = v18 & 7;
                do
                {
                  if (*(unsigned __int8 *)(v71 + v72) != *v76)
                    break;
                  ++v76;
                  ++v72;
                  --v78;
                }
                while (v78);
              }
            }
            else
            {
              v72 = 0;
              v73 = v18 >> 3;
              while (1)
              {
                v74 = *(_QWORD *)((char *)v54 + v72);
                v75 = *(_QWORD *)(v71 + v72);
                if (v74 != v75)
                  break;
                v72 += 8;
                if (!--v73)
                {
                  v76 = (unsigned __int8 *)v54 + v72;
                  goto LABEL_92;
                }
              }
              v72 += __clz(__rbit64(v75 ^ v74)) >> 3;
            }
            if (v72 >= 4)
            {
              v77 = 135 * v72 - 30 * (__clz(v68) ^ 0x1F) + 1920;
              if (v63 < v77)
              {
                v53 = *(unsigned __int8 *)(a3 + v72 + v52);
                v49 = v72;
                v62 = v68;
                v63 = v77;
              }
            }
          }
          v65 = 0;
          v64 = 1;
        }
        while ((v66 & 1) != 0);
        *(_DWORD *)(v17 + 4 * *(unint64_t *)((char *)&v128 + (v50 & 8))) = v50;
        if (v63 < v31 + 175)
          break;
        ++v127;
        a5 = v122;
        if (v47 <= 2)
        {
          v79 = v11 + 9;
          ++v47;
          v123 = v62;
          v31 = v63;
          v26 = v49;
          ++v11;
          if (v79 < v124)
            continue;
        }
        goto LABEL_114;
      }
      a5 = v122;
      v62 = v123;
      v49 = v26;
      v50 = v11;
LABEL_114:
      v83 = v50 + v117;
      if (v50 + v117 >= v126)
        v83 = v126;
      v84 = v83 + v116;
      i = v121;
      if (v62 > v83 + v116)
        goto LABEL_117;
      v89 = *v121;
      if (v62 != v89)
        break;
      LOWORD(v85) = 0;
      LODWORD(v88) = 0;
      *(_DWORD *)v120 = v127;
      *(_DWORD *)(v120 + 4) = v49;
      v13 = v124;
LABEL_127:
      *(_WORD *)(v120 + 14) = v85;
      *(_DWORD *)(v120 + 8) = v88;
      if (v127 > 5)
      {
        if (v127 > 0x81)
        {
          if (v127 > 0x841)
          {
            if (v127 >> 1 >= 0xC21)
            {
              if (v127 < 0x5842)
                LOWORD(v94) = 22;
              else
                LOWORD(v94) = 23;
            }
            else
            {
              LOWORD(v94) = 21;
            }
          }
          else
          {
            v94 = (__clz(v127 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v95 = (__clz(v127 - 2) ^ 0x1F) - 1;
          v94 = ((v127 - 2) >> v95) + 2 * v95 + 2;
        }
      }
      else
      {
        LOWORD(v94) = v127;
      }
      v102 = (unint64_t)v49 >> 1;
      if (v102 > 4)
      {
        if (v102 > 0x42)
        {
          if (v102 > 0x422)
            LOWORD(v103) = 23;
          else
            v103 = (__clz(v49 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v104 = (int)v49 - 6;
          v105 = (__clz(v104) ^ 0x1F) - 1;
          v103 = (v104 >> v105) + 2 * v105 + 4;
        }
      }
      else
      {
        LOWORD(v103) = v49 - 2;
      }
      v106 = v103 & 7 | (8 * (v94 & 7));
      if ((v85 & 0x3FF) != 0 || (unsigned __int16)v94 > 7u || (unsigned __int16)v103 > 0xFu)
      {
        v108 = 3 * ((unsigned __int16)v94 >> 3) + ((unsigned __int16)(v103 & 0xFFF8) >> 3);
        v107 = ((((0x520D40u >> (2 * v108)) & 0xC0) + (v108 << 6)) | v106) + 64;
      }
      else
      {
        LOWORD(v107) = v106 | 0x40;
        if ((v103 & 0xFFF8) == 0)
          LOWORD(v107) = v103 & 7 | (8 * (v94 & 7));
      }
      *(_WORD *)(v120 + 12) = v107;
      *a11 += v127;
      v109 = v50 + 2;
      v81 = v50 + v49;
      v110 = v119;
      if (v50 + v49 < v119)
        v110 = v50 + v49;
      if (v62 < v49 >> 2)
      {
        if (v109 <= v81 - 4 * v62)
          v109 = v81 - 4 * v62;
        if (v110 < v109)
          v109 = v110;
      }
      v16 = v118 + 2 * v49 + v50;
      result = v120 + 16;
      v120 += 16;
      if (v109 < v110)
      {
        do
        {
          *(_DWORD *)(v17
                    + 4
                    * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v109 & a4))) >> 48) + (v109 & 8))) = v109;
          ++v109;
        }
        while (v110 != v109);
      }
      v12 = 0;
LABEL_174:
      v11 = v81;
      if (v81 + 8 >= v13)
        goto LABEL_187;
    }
    v97 = v121[1];
    v13 = v124;
    if (v62 == v97)
    {
      v85 = 1;
      goto LABEL_118;
    }
    v98 = v62 + 3;
    v99 = v62 + 3 - v89;
    if (v99 > 6)
    {
      if (v98 - v97 > 6)
      {
        if (v62 == v121[2])
        {
          v85 = 2;
        }
        else if (v62 == v121[3])
        {
          v85 = 3;
          v13 = v124;
        }
        else
        {
LABEL_117:
          v85 = v62 + 15;
          v13 = v124;
        }
LABEL_118:
        if (v62 <= v84 && v85)
        {
          v121[3] = v121[2];
          *(_QWORD *)(v121 + 1) = *(_QWORD *)v121;
          *v121 = v62;
        }
        *(_DWORD *)v120 = v127;
        *(_DWORD *)(v120 + 4) = v49;
        v86 = *(unsigned int *)(a5 + 68);
        v87 = v86 + 16;
        if (v86 + 16 <= v85)
        {
          v90 = *(unsigned int *)(a5 + 64);
          v91 = v85 - v86 + (4 << v90) - 16;
          v92 = (__clz(v91) ^ 0x1F) - 1;
          v93 = ((v91 >> v92) & 1 | 2) << v92;
          v85 = ((v91 & ~(-1 << v90)) + v87 + ((((v91 >> v92) & 1 | (2 * (v92 - v90))) + 65534) << v90)) | ((v92 - v90) << 10);
          v88 = (v91 - v93) >> v90;
        }
        else
        {
          LODWORD(v88) = 0;
        }
        goto LABEL_127;
      }
      v100 = 4 * (v98 - v97);
      v101 = 266017486;
    }
    else
    {
      v100 = 4 * v99;
      v101 = 158663784;
    }
    v85 = (v101 >> v100) & 0xF;
    goto LABEL_118;
  }
  v120 = a9;
  v81 = a2;
LABEL_187:
  *a8 = v12 + v13 - v81;
  *a10 += (v120 - a9) >> 4;
  return result;
}

unint64_t sub_2367931B8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *i, unint64_t *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int64x2_t v79;
  int8x16_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _DWORD *v157;
  unint64_t v158;
  int *v159;
  uint64_t v161;
  int v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int8x16_t v176;
  int8x16_t v177;
  uint64_t v178;

  v12 = a2;
  v178 = *MEMORY[0x24BDAC8D0];
  v13 = *a9;
  v170 = a2 + result;
  v14 = a2 + result - 7;
  v156 = v14;
  if (result <= 7)
    v14 = a2;
  v154 = v14;
  if (*(int *)(a6 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (result < 9)
  {
    v157 = a10;
    v111 = a2;
    goto LABEL_247;
  }
  v166 = *(_QWORD *)(a6 + 16);
  v167 = (1 << *(_DWORD *)(a6 + 8)) - 16;
  v16 = v15 + a2;
  v161 = a5 + 256;
  v17 = *(_QWORD *)(a7 + 88);
  v152 = *(_QWORD *)(a6 + 104);
  v151 = v152 + 1;
  v153 = v15;
  v155 = 4 * v15;
  v18 = (int8x16_t)vdupq_n_s64(0x1FFFFuLL);
  v157 = a10;
  v159 = i;
  v171 = a6;
  do
  {
    v19 = v167;
    if (v12 >= v167)
      v20 = v167;
    else
      v20 = v12;
    if (v12 + v166 < v167)
      v19 = v12 + v166;
    if (*(_DWORD *)(a6 + 632))
    {
      if (v12)
      {
        v21 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
        if (v12 != 1)
        {
          v22 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_20:
          v172 = v21;
          v175 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v161 + v22) | *(_BYTE *)(a5 + v21)) + 637);
          goto LABEL_21;
        }
      }
      else
      {
        v21 = 0;
      }
      v22 = 0;
      goto LABEL_20;
    }
    v175 = 0;
    v172 = 0;
LABEL_21:
    v23 = v170 - v12;
    result = v12 & a4;
    v24 = (_QWORD *)(a3 + (v12 & a4));
    v25 = *(unsigned __int8 *)v24;
    v26 = *i;
    v173 = v16;
    if (v12 < v26)
      goto LABEL_32;
    v27 = (unsigned __int8 *)(a3 + (a4 & (v12 - v26)));
    if (v25 != *v27)
      goto LABEL_32;
    if (v23 < 8)
    {
      v29 = 0;
      v30 = (unsigned __int8 *)(a3 + (v12 & a4));
LABEL_235:
      v148 = v23 & 7;
      if ((v23 & 7) != 0)
      {
        v149 = v29 | v148;
        while (v27[v29] == *v30)
        {
          ++v30;
          ++v29;
          if (!--v148)
          {
            v29 = v149;
            break;
          }
        }
      }
    }
    else
    {
      v28 = 0;
      v29 = v23 & 0xFFFFFFFFFFFFFFF8;
      v30 = (unsigned __int8 *)(a3 + result + (v23 & 0xFFFFFFFFFFFFFFF8));
      v31 = v23 >> 3;
      while (1)
      {
        v32 = v24[v28];
        v33 = *(_QWORD *)&v27[v28 * 8];
        if (v32 != v33)
          break;
        ++v28;
        if (!--v31)
          goto LABEL_235;
      }
      v29 = v28 * 8 + (__clz(__rbit64(v33 ^ v32)) >> 3);
    }
    if (v29 >= 4 && (v34 = 135 * v29 + 1935, v34 >= 0x7E5))
    {
      v25 = *(unsigned __int8 *)(a3 + v29 + result);
    }
    else
    {
LABEL_32:
      v26 = 0;
      v29 = 0;
      v34 = 2020;
    }
    v35 = 0;
    v36 = *(_QWORD *)(v171 + 8 * v175 + 704);
    v158 = *(_QWORD *)(v171 + 80);
    v37 = vdupq_n_s64((0xBD1E35A7BD000000 * *v24) >> 47);
    v176 = vandq_s8((int8x16_t)vaddq_s64(v37, (int64x2_t)xmmword_2368AF3D0), v18);
    v177 = vandq_s8((int8x16_t)vaddq_s64(v37, (int64x2_t)xmmword_2368AF3E0), v18);
    v38 = *(uint64_t *)((char *)v176.i64 + (v12 & 0x18));
    do
    {
      v39 = *(unsigned int *)(v17 + 4 * v176.i64[v35]);
      v40 = v12 - v39;
      if (v25 == *(unsigned __int8 *)(a3 + (v39 & a4) + v29) && v12 != v39 && v40 <= v20)
      {
        v43 = a3 + (v39 & a4);
        if (v23 < 8)
        {
          v48 = 0;
          v49 = (unsigned __int8 *)(a3 + (v12 & a4));
LABEL_53:
          if ((v23 & 7) != 0)
          {
            v168 = v23 & 7 | v48;
            v51 = v23 & 7;
            while (*(unsigned __int8 *)(v43 + v48) == *v49)
            {
              ++v49;
              ++v48;
              if (!--v51)
              {
                v48 = v168;
                break;
              }
            }
          }
        }
        else
        {
          v44 = 0;
          v45 = v23 >> 3;
          while (1)
          {
            v46 = v24[v44];
            v47 = *(_QWORD *)(v43 + v44 * 8);
            if (v46 != v47)
              break;
            ++v44;
            if (!--v45)
            {
              v48 = v23 & 0xFFFFFFFFFFFFFFF8;
              v49 = (unsigned __int8 *)(a3 + result + (v23 & 0xFFFFFFFFFFFFFFF8));
              goto LABEL_53;
            }
          }
          v48 = v44 * 8 + (__clz(__rbit64(v47 ^ v46)) >> 3);
        }
        if (v48 >= 4)
        {
          v50 = __clz(v40) ^ 0x1F;
          if (v34 < 135 * v48 - 30 * v50 + 1920)
          {
            v25 = *(unsigned __int8 *)(a3 + v48 + result);
            v26 = v40;
            v34 = 135 * v48 - 30 * v50 + 1920;
            v29 = v48;
          }
        }
      }
      ++v35;
    }
    while (v35 != 4);
    if (v34 == 2020)
    {
      v52 = *(_QWORD *)(a7 + 80);
      v54 = *(_QWORD *)(v52 + 40);
      v53 = *(_QWORD *)(v52 + 48);
      a6 = v171;
      if (v53 < v54 >> 7)
        goto LABEL_62;
      v55 = ((506832829 * *(_DWORD *)v24) >> 17) & 0x7FFELL;
      v56 = *(_QWORD *)(v36 + 32);
      *(_QWORD *)(v52 + 40) = v54 + 1;
      v57 = *(unsigned __int8 *)(v56 + v55);
      if (!*(_BYTE *)(v56 + v55) || v23 < v57)
        goto LABEL_62;
      v127 = *(unsigned __int16 *)(*(_QWORD *)(v36 + 24) + 2 * v55);
      v128 = *(unsigned int *)(*(_QWORD *)v36 + 4 * v57 + 32);
      v129 = *(_QWORD *)(*(_QWORD *)v36 + 168);
      v130 = (unsigned __int8 *)(v129 + v128 + v127 * (unint64_t)v57);
      if (v57 < 8)
      {
        v29 = 0;
LABEL_241:
        result = v57 & 7;
        if ((v57 & 7) != 0)
        {
          v150 = v29 | result;
          while (*((unsigned __int8 *)v24 + v29) == *v130)
          {
            ++v130;
            ++v29;
            if (!--result)
            {
              v29 = v150;
              break;
            }
          }
        }
      }
      else
      {
        result = 0;
        v29 = v57 & 0xF8;
        v131 = (unsigned __int8 *)(v129 + v127 * (unint64_t)v57 + v29 + v128);
        while (1)
        {
          v132 = *(_QWORD *)&v130[result];
          v133 = *(_QWORD *)((char *)v24 + result);
          if (v132 != v133)
            break;
          result += 8;
          if (v29 == result)
          {
            v130 = v131;
            goto LABEL_241;
          }
        }
        v29 = result + (__clz(__rbit64(v133 ^ v132)) >> 3);
      }
      if (!v29
        || v29 + *(unsigned int *)(v36 + 12) <= v57
        || (v26 = v151
                + v19
                + v127
                + ((((*(_QWORD *)(v36 + 16) >> (6 * (v57 - v29))) & 0x3FLL)
                  + 4 * (v57 - v29)) << *(_BYTE *)(*(_QWORD *)v36 + v57)),
            v26 > v158)
        || (v34 = 135 * v29 - 30 * (__clz(v26) ^ 0x1F) + 1920, v34 < 0x7E4))
      {
LABEL_62:
        *(_DWORD *)(v17 + 4 * v38) = v12;
LABEL_149:
        ++v13;
        v111 = v12 + 1;
        v16 = v173;
        if (v12 + 1 <= v173)
        {
          i = v159;
        }
        else if (v111 <= v173 + v155)
        {
          v113 = v12 + 9;
          if (v12 + 9 >= v156)
            v113 = v156;
          for (i = v159; v111 < v113; v111 += 2)
          {
            *(_DWORD *)(v17
                      + 4
                      * (((((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v111 & a4))) >> 32) >> 15)
                        + (v111 & 0x18)) & 0x1FFFF)) = v111;
            v13 += 2;
          }
        }
        else
        {
          v112 = v12 + 17;
          if (v12 + 17 >= v156)
            v112 = v156;
          for (i = v159; v111 < v112; v111 += 4)
          {
            *(_DWORD *)(v17
                      + 4
                      * (((((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v111 & a4))) >> 32) >> 15)
                        + (v111 & 0x18)) & 0x1FFFF)) = v111;
            v13 += 4;
          }
        }
        goto LABEL_228;
      }
      v58 = v57 - v29;
      *(_QWORD *)(v52 + 48) = v53 + 1;
    }
    else
    {
      v58 = 0;
      a6 = v171;
    }
    *(_DWORD *)(v17 + 4 * v38) = v12;
    if (v34 < 0x7E5)
      goto LABEL_149;
    v59 = 0;
    v164 = *v159;
    while (1)
    {
      --v23;
      v60 = v29 - 1;
      if (v29 - 1 >= v23)
        v60 = v23;
      if (*(int *)(a6 + 4) >= 5)
        v61 = 0;
      else
        v61 = v60;
      v62 = v12 + 1;
      if (v12 + 1 < v167)
        v63 = v12 + 1;
      else
        v63 = v167;
      v64 = v62 + v166;
      if (v62 + v166 >= v167)
        v64 = v167;
      v165 = v64;
      if (*(_DWORD *)(a6 + 632))
      {
        v175 = *(unsigned __int8 *)(a6
                                  + (*(_BYTE *)(v161 + v172) | *(_BYTE *)(a5
                                                                                         + *(unsigned __int8 *)(a3 + (v12 & a4))))
                                  + 637);
        v172 = *(unsigned __int8 *)(a3 + (v12 & a4));
      }
      v65 = v62 & a4;
      v66 = *(unsigned __int8 *)(a3 + v61 + (v62 & a4));
      v67 = (_QWORD *)(a3 + (v62 & a4));
      v163 = v58;
      if (v62 >= v164 && (v68 = a4 & (v62 - v164), v66 == *(unsigned __int8 *)(a3 + v68 + v61)))
      {
        v69 = a3 + v68;
        v70 = v26;
        if (v23 < 8)
        {
          v71 = 0;
          v75 = (unsigned __int8 *)(a3 + (v62 & a4));
LABEL_139:
          v108 = v23 & 7;
          if ((v23 & 7) != 0)
          {
            do
            {
              if (*(unsigned __int8 *)(v69 + v71) != *v75)
                break;
              ++v75;
              ++v71;
              --v108;
            }
            while (v108);
          }
        }
        else
        {
          v71 = 0;
          v72 = v23 >> 3;
          while (1)
          {
            v73 = *(_QWORD *)((char *)v67 + v71);
            v74 = *(_QWORD *)(v69 + v71);
            if (v73 != v74)
              break;
            v71 += 8;
            if (!--v72)
            {
              v75 = (unsigned __int8 *)v67 + v71;
              goto LABEL_139;
            }
          }
          v71 += __clz(__rbit64(v74 ^ v73)) >> 3;
        }
        if (v71 >= 4)
        {
          v77 = 135 * v71 + 1935;
          if (v77 >= 0x7E5)
          {
            v66 = *(unsigned __int8 *)(a3 + v71 + v65);
            v61 = v71;
            v76 = v164;
            goto LABEL_87;
          }
        }
      }
      else
      {
        v70 = v26;
      }
      v76 = 0;
      v77 = 2020;
LABEL_87:
      v78 = 0;
      v169 = *(_QWORD *)(a6 + 8 * v175 + 704);
      v79 = vdupq_n_s64((0xBD1E35A7BD000000 * *v67) >> 47);
      v80 = (int8x16_t)vdupq_n_s64(0x1FFFFuLL);
      v176 = vandq_s8((int8x16_t)vaddq_s64(v79, (int64x2_t)xmmword_2368AF3D0), v80);
      v177 = vandq_s8((int8x16_t)vaddq_s64(v79, (int64x2_t)xmmword_2368AF3E0), v80);
      v174 = *(uint64_t *)((char *)v176.i64 + (v62 & 0x18));
      do
      {
        v81 = *(unsigned int *)(v17 + 4 * v176.i64[v78]);
        v82 = v62 - v81;
        result = v81 & a4;
        if (v66 == *(unsigned __int8 *)(a3 + (v81 & a4) + v61) && v62 != v81 && v82 <= v63)
        {
          v85 = a3 + result;
          if (v23 < 8)
          {
            result = 0;
            v89 = (unsigned __int8 *)(a3 + (v62 & a4));
LABEL_107:
            if ((v23 & 7) != 0)
            {
              v91 = v23 & 7;
              do
              {
                if (*(unsigned __int8 *)(v85 + result) != *v89)
                  break;
                ++v89;
                ++result;
                --v91;
              }
              while (v91);
            }
          }
          else
          {
            result = 0;
            v86 = v23 >> 3;
            while (1)
            {
              v87 = *(_QWORD *)((char *)v67 + result);
              v88 = *(_QWORD *)(v85 + result);
              if (v87 != v88)
                break;
              result += 8;
              if (!--v86)
              {
                v89 = (unsigned __int8 *)v67 + result;
                goto LABEL_107;
              }
            }
            result += __clz(__rbit64(v88 ^ v87)) >> 3;
          }
          if (result >= 4)
          {
            v90 = __clz(v82) ^ 0x1F;
            if (v77 < 135 * result - 30 * v90 + 1920)
            {
              v66 = *(unsigned __int8 *)(a3 + result + v65);
              v61 = result;
              v76 = v82;
              v77 = 135 * result - 30 * v90 + 1920;
            }
          }
        }
        ++v78;
      }
      while (v78 != 4);
      if (v77 != 2020)
      {
        v106 = 0;
        goto LABEL_133;
      }
      v92 = *(_QWORD *)(a7 + 80);
      v94 = *(_QWORD *)(v92 + 40);
      v93 = *(_QWORD *)(v92 + 48);
      if (v93 < v94 >> 7
        || (v95 = ((506832829 * *(_DWORD *)v67) >> 17) & 0x7FFELL,
            result = *(_QWORD *)(v169 + 32),
            *(_QWORD *)(v92 + 40) = v94 + 1,
            v96 = *(unsigned __int8 *)(result + v95),
            !*(_BYTE *)(result + v95))
        || v23 < v96)
      {
LABEL_131:
        v106 = 0;
LABEL_132:
        v77 = 2020;
        goto LABEL_133;
      }
      v97 = *(unsigned __int16 *)(*(_QWORD *)(v169 + 24) + 2 * v95);
      v98 = *(unsigned int *)(*(_QWORD *)v169 + 4 * v96 + 32);
      v99 = *(_QWORD *)(*(_QWORD *)v169 + 168);
      v100 = (unsigned __int8 *)(v99 + v98 + v97 * (unint64_t)v96);
      if (v96 < 8)
      {
        v102 = 0;
LABEL_144:
        v109 = v96 & 7;
        if ((v96 & 7) != 0)
        {
          v110 = v102 | v109;
          while (*((unsigned __int8 *)v67 + v102) == *v100)
          {
            ++v100;
            ++v102;
            if (!--v109)
            {
              v102 = v110;
              break;
            }
          }
        }
      }
      else
      {
        v101 = 0;
        v102 = v96 & 0xF8;
        v103 = (unsigned __int8 *)(v99 + v97 * (unint64_t)v96 + v102 + v98);
        while (1)
        {
          v104 = *(_QWORD *)&v100[v101];
          v105 = v67[v101 / 8];
          if (v104 != v105)
            break;
          v101 += 8;
          if (v102 == v101)
          {
            v100 = v103;
            goto LABEL_144;
          }
        }
        v102 = v101 + (__clz(__rbit64(v105 ^ v104)) >> 3);
      }
      v106 = 0;
      result = v169;
      if (!v102 || v102 + *(unsigned int *)(v169 + 12) <= v96)
        goto LABEL_132;
      result = v151
             + v165
             + v97
             + ((((*(_QWORD *)(v169 + 16) >> (6 * (v96 - v102))) & 0x3FLL)
               + 4 * (v96 - v102)) << *(_BYTE *)(*(_QWORD *)v169 + v96));
      if (result > v158)
        goto LABEL_131;
      v77 = 135 * v102 - 30 * (__clz(result) ^ 0x1F) + 1920;
      if (v77 < 0x7E4)
        goto LABEL_131;
      v106 = v96 - v102;
      *(_QWORD *)(v92 + 48) = v93 + 1;
      v61 = v102;
      v76 = result;
LABEL_133:
      *(_DWORD *)(v17 + 4 * v174) = v62;
      if (v77 < v34 + 175)
        break;
      ++v13;
      a6 = v171;
      if (v59 <= 2)
      {
        v107 = v12 + 9;
        ++v59;
        v26 = v76;
        v34 = v77;
        v58 = v106;
        v29 = v61;
        ++v12;
        if (v107 < v170)
          continue;
      }
      goto LABEL_165;
    }
    v114 = v12 + v166;
    if (v12 + v166 >= v167)
      v114 = v167;
    v165 = v114;
    v76 = v70;
    v106 = v163;
    v61 = v29;
    v62 = v12;
    a6 = v171;
LABEL_165:
    i = v159;
    v115 = v157;
    if (v76 > v165 + v152)
    {
LABEL_166:
      v116 = v76 + 15;
      goto LABEL_167;
    }
    v117 = *v159;
    if (v76 == v117)
    {
      v116 = 0;
      goto LABEL_172;
    }
    v134 = v159[1];
    if (v76 == v134)
    {
      v116 = 1;
    }
    else
    {
      v135 = v76 + 3 - v117;
      if (v135 > 6)
      {
        v138 = v76 + 3 - v134;
        if (v138 > 6)
        {
          if (v76 == v159[2])
          {
            v116 = 2;
          }
          else
          {
            if (v76 != v159[3])
              goto LABEL_166;
            v116 = 3;
          }
          goto LABEL_167;
        }
        v136 = 4 * v138;
        v137 = 266017486;
      }
      else
      {
        v136 = 4 * v135;
        v137 = 158663784;
      }
      v116 = (v137 >> v136) & 0xF;
    }
LABEL_167:
    if (v76 <= v165 + v152 && v116)
    {
      v159[3] = v159[2];
      *(_QWORD *)(v159 + 1) = *(_QWORD *)v159;
      *v159 = v76;
    }
LABEL_172:
    *v157 = v13;
    v157[1] = v61 | (v106 << 25);
    v118 = *(unsigned int *)(a6 + 68);
    v119 = v118 + 16;
    if (v118 + 16 <= v116)
    {
      v121 = *(unsigned int *)(a6 + 64);
      v122 = v116 - v118 + (4 << v121) - 16;
      v123 = (__clz(v122) ^ 0x1F) - 1;
      v124 = ((v122 >> v123) & 1 | 2) << v123;
      result = 65534;
      v115 = v157;
      i = v159;
      v116 = ((v122 & ~(-1 << v121))
            + v119
            + ((((v122 >> v123) & 1 | (2 * (v123 - v121))) + 65534) << v121)) | ((v123 - v121) << 10);
      v120 = (v122 - v124) >> v121;
    }
    else
    {
      LODWORD(v120) = 0;
    }
    *((_WORD *)v115 + 7) = v116;
    v115[2] = v120;
    if (v13 > 5)
    {
      if (v13 > 0x81)
      {
        if (v13 > 0x841)
        {
          if (v13 >> 1 >= 0xC21)
          {
            if (v13 < 0x5842)
              LOWORD(v125) = 22;
            else
              LOWORD(v125) = 23;
          }
          else
          {
            LOWORD(v125) = 21;
          }
        }
        else
        {
          v125 = (__clz(v13 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v126 = (__clz(v13 - 2) ^ 0x1F) - 1;
        v125 = ((v13 - 2) >> v126) + 2 * v126 + 2;
      }
    }
    else
    {
      LOWORD(v125) = v13;
    }
    v139 = v106 + (int)v61;
    if (v139 > 9)
    {
      if (v139 > 0x85)
      {
        if (v139 > 0x845)
          LOWORD(v140) = 23;
        else
          v140 = (__clz(v139 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v141 = v139 - 6;
        v142 = (__clz(v141) ^ 0x1F) - 1;
        v140 = (v141 >> v142) + 2 * v142 + 4;
      }
    }
    else
    {
      LOWORD(v140) = v106 + v61 - 2;
    }
    v143 = v140 & 7 | (8 * (v125 & 7));
    if ((v116 & 0x3FF) != 0 || (unsigned __int16)v125 > 7u || (unsigned __int16)v140 > 0xFu)
    {
      v145 = 3 * ((unsigned __int16)v125 >> 3) + ((unsigned __int16)(v140 & 0xFFF8) >> 3);
      v144 = ((((0x520D40u >> (2 * v145)) & 0xC0) + (v145 << 6)) | v143) + 64;
    }
    else
    {
      LOWORD(v144) = v143 | 0x40;
      if ((v140 & 0xFFF8) == 0)
        LOWORD(v144) = v140 & 7 | (8 * (v125 & 7));
    }
    *((_WORD *)v115 + 6) = v144;
    *a12 += v13;
    v146 = v62 + 2;
    v111 = v62 + v61;
    v147 = v154;
    if (v62 + v61 < v154)
      v147 = v62 + v61;
    if (v76 < v61 >> 2)
    {
      if (v146 <= v111 - 4 * v76)
        v146 = v111 - 4 * v76;
      if (v147 < v146)
        v146 = v147;
    }
    v16 = v153 + 2 * v61 + v62;
    v157 = v115 + 4;
    if (v146 < v147)
    {
      do
      {
        *(_DWORD *)(v17
                  + 4
                  * (((((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v146 & a4))) >> 32) >> 15)
                    + (v146 & 0x18)) & 0x1FFFF)) = v146;
        ++v146;
      }
      while (v147 != v146);
    }
    v13 = 0;
LABEL_228:
    v12 = v111;
  }
  while (v111 + 8 < v170);
LABEL_247:
  *a9 = v13 + v170 - v111;
  *a11 += ((char *)v157 - (char *)a10) >> 4;
  return result;
}

unint64_t sub_2367940F4(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int32x4_t v17;
  const float *v18;
  int32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unint64_t v136;
  unint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  _DWORD *v195;
  unint64_t v196;
  int32x2_t v197;
  int v198;
  int32x4_t v199;
  int32x4_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  uint64_t v237;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;

  v252 = *(_QWORD *)(a6 + 16);
  v12 = *a9;
  v254 = a2 + result;
  v230 = a2 + result - 3;
  if (result <= 3)
    v13 = a2;
  else
    v13 = a2 + result - 3;
  v14 = *(_DWORD *)(a6 + 8);
  v15 = 512;
  if (*(int *)(a6 + 4) < 9)
    v15 = 64;
  v233 = v15;
  v231 = v13;
  v232 = *(_QWORD *)(a6 + 104);
  v16 = *(_DWORD *)(a7 + 108);
  if (v16 >= 5)
  {
    v17 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v17, (int32x4_t)xmmword_2368AF3A0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v17.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v16 >= 0xB)
    {
      v18 = (const float *)(a8 + 1);
      v19 = (int32x4_t)vld1q_dup_f32(v18);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v19, (int32x4_t)xmmword_2368AF3A0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (result >= 5)
  {
    v20 = v233 + a2;
    v251 = (1 << v14) - 16;
    v237 = a5 + 256;
    v21 = *(_QWORD *)(a7 + 120);
    v235 = v232 + 1;
    v234 = a10;
    v267 = v21;
    v268 = a3;
    v250 = a6;
    v253 = *(_QWORD *)(a7 + 128);
    while (1)
    {
      if (a2 >= v251)
        v22 = v251;
      else
        v22 = a2;
      v23 = a2 + v252;
      if (a2 + v252 >= v251)
        v23 = v251;
      v255 = v23;
      if (!*(_DWORD *)(a6 + 632))
      {
        v26 = 0;
        v257 = 0;
        v27 = a8;
        goto LABEL_24;
      }
      if (!a2)
        break;
      v24 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
      if (a2 == 1)
        goto LABEL_22;
      v25 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_23:
      v257 = v24;
      v27 = a8;
      v26 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v237 + v25) | *(_BYTE *)(a5 + v24)) + 637);
LABEL_24:
      v258 = v20;
      v259 = v26;
      v28 = v254 - a2;
      v29 = *(_QWORD *)(a6 + 8 * v26 + 704);
      v260 = *(_QWORD *)(a6 + 80);
      v261 = v254 - a2;
      v30 = a2 & a4;
      v31 = *(int *)(a7 + 108);
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 2020;
        v37 = 2020;
        do
        {
          v38 = v27[v32];
          v39 = a2 - v38;
          v40 = v22 < v38 || v39 >= a2;
          v41 = v39 & a4;
          v42 = v33 + v30;
          v43 = v40 || v42 > a4;
          v44 = v41 + v33;
          v45 = v43 || v44 > a4;
          if (!v45 && *(unsigned __int8 *)(v268 + v42) == *(unsigned __int8 *)(v268 + v44))
          {
            v46 = v268 + v41;
            if (v261 < 8)
            {
              v51 = 0;
              v52 = (unsigned __int8 *)(v268 + v30);
LABEL_56:
              if ((v28 & 7) != 0)
              {
                v242 = v35;
                v263 = v37;
                v54 = v28 & 7 | v51;
                v55 = v28 & 7;
                while (*(unsigned __int8 *)(v46 + v51) == *v52)
                {
                  ++v52;
                  ++v51;
                  if (!--v55)
                  {
                    v51 = v54;
                    break;
                  }
                }
                v37 = v263;
                v35 = v242;
              }
            }
            else
            {
              v47 = 0;
              v48 = (v254 - a2) >> 3;
              while (1)
              {
                v49 = *(_QWORD *)(v268 + v30 + v47);
                v50 = *(_QWORD *)(v46 + v47);
                if (v49 != v50)
                  break;
                v47 += 8;
                if (!--v48)
                {
                  v51 = v28 & 0xFFFFFFFFFFFFFFF8;
                  v52 = (unsigned __int8 *)(v268 + v30 + (v28 & 0xFFFFFFFFFFFFFFF8));
                  goto LABEL_56;
                }
              }
              v51 = v47 + (__clz(__rbit64(v50 ^ v49)) >> 3);
            }
            if (v51 > 2 || v32 <= 1 && v51 == 2)
            {
              v53 = 135 * v51 + 1935;
              if (v36 < v53)
              {
                if (v32)
                  v53 -= ((0x1CA10u >> (v32 & 0xE)) & 0xE) + 39;
                if (v36 < v53)
                {
                  v35 = v27[v32];
                  v37 = v53;
                  v34 = v51;
                  v36 = v53;
                  v33 = v51;
                }
              }
            }
          }
          ++v32;
        }
        while (v32 != v31);
      }
      else
      {
        v35 = 0;
        v34 = 0;
        v33 = 0;
        v37 = 2020;
        v36 = 2020;
      }
      v56 = (_DWORD *)(v268 + v30);
      v57 = *(unsigned int *)(a7 + 100);
      result = (506832829 * *(_DWORD *)(v268 + v30)) >> *(_DWORD *)(a7 + 96);
      v58 = v253 + 4 * ((_DWORD)result << *(_DWORD *)(a7 + 104));
      v59 = *(unsigned __int16 *)(v21 + 2 * result);
      v249 = *(_QWORD *)(a7 + 88);
      if (v59 >= v249)
        v60 = v59 - v249;
      else
        v60 = 0;
      if (v60 < v59)
      {
        v61 = v261 & 7;
        v62 = *(unsigned __int16 *)(v21 + 2 * result);
        do
        {
          v63 = *(unsigned int *)(v58 + 4 * (--v62 & v57));
          v64 = a2 - v63;
          if (a2 - v63 > v22)
            break;
          if (v33 + v30 <= a4)
          {
            v65 = v63 & a4;
            if (v65 + v33 <= a4 && *(unsigned __int8 *)(v268 + v33 + v30) == *(unsigned __int8 *)(v268 + v65 + v33))
            {
              v66 = v268 + v65;
              if (v261 < 8)
              {
                v265 = v12;
                v71 = 0;
                v72 = (unsigned __int8 *)(v268 + v30);
LABEL_85:
                if (v61)
                {
                  v74 = v61 | v71;
                  v75 = v61;
                  while (*(unsigned __int8 *)(v66 + v71) == *v72)
                  {
                    ++v72;
                    ++v71;
                    if (!--v75)
                    {
                      v71 = v74;
                      break;
                    }
                  }
                }
                v12 = v265;
              }
              else
              {
                v67 = 0;
                v68 = (v254 - a2) >> 3;
                while (1)
                {
                  v69 = *(_QWORD *)&v56[v67];
                  v70 = *(_QWORD *)(v66 + v67 * 4);
                  if (v69 != v70)
                    break;
                  v67 += 2;
                  if (!--v68)
                  {
                    v265 = v12;
                    v71 = v261 & 0xFFFFFFFFFFFFFFF8;
                    v72 = (unsigned __int8 *)v56 + (v261 & 0xFFFFFFFFFFFFFFF8);
                    v61 = v261 & 7;
                    goto LABEL_85;
                  }
                }
                v71 = v67 * 4 + (__clz(__rbit64(v70 ^ v69)) >> 3);
              }
              if (v71 < 4)
              {
                v61 = v261 & 7;
              }
              else
              {
                v73 = __clz(v64);
                v61 = v261 & 7;
                if (v36 < 135 * v71 - 30 * (v73 ^ 0x1F) + 1920)
                {
                  v35 = v64;
                  v37 = 135 * v71 - 30 * (v73 ^ 0x1F) + 1920;
                  v34 = v71;
                  v36 = v37;
                  v33 = v71;
                }
              }
            }
          }
        }
        while (v62 > v60);
      }
      *(_DWORD *)(v58 + 4 * (v57 & v59)) = a2;
      v21 = v267;
      *(_WORD *)(v267 + 2 * result) = v59 + 1;
      if (v37 == 2020)
      {
        v76 = *(_QWORD *)(a7 + 112);
        v77 = *(_QWORD *)(v76 + 40);
        v78 = *(_QWORD *)(v76 + 48);
        v79 = a8;
        if (v78 < v77 >> 7)
          goto LABEL_235;
        v248 = 0;
        v80 = ((506832829 * *v56) >> 17) & 0x7FFE;
        v81 = *(_QWORD *)(v29 + 32);
        v82 = 1;
        v83 = v34;
        v84 = 2020;
        v85 = v35;
        do
        {
          result = v82;
          *(_QWORD *)(v76 + 40) = ++v77;
          v86 = *(unsigned __int8 *)(v81 + v80);
          if (!*(_BYTE *)(v81 + v80) || v261 < v86)
            goto LABEL_106;
          v87 = *(unsigned __int16 *)(*(_QWORD *)(v29 + 24) + 2 * v80);
          v88 = *(unsigned int *)(*(_QWORD *)v29 + 4 * v86 + 32);
          v89 = *(_QWORD *)(*(_QWORD *)v29 + 168);
          v90 = (unsigned __int8 *)(v89 + v88 + v87 * *(unsigned __int8 *)(v81 + v80));
          if (v86 < 8)
          {
            v34 = 0;
LABEL_111:
            v96 = v86 & 7;
            if ((v86 & 7) != 0)
            {
              v97 = v34 | v96;
              while (*((unsigned __int8 *)v56 + v34) == *v90)
              {
                ++v90;
                ++v34;
                if (!--v96)
                {
                  v34 = v97;
                  break;
                }
              }
            }
          }
          else
          {
            v91 = 0;
            v92 = (unsigned __int8 *)(v89
                                    + v87 * (unint64_t)*(unsigned __int8 *)(v81 + v80)
                                    + (*(_BYTE *)(v81 + v80) & 0xF8)
                                    + v88);
            while (1)
            {
              v93 = *(_QWORD *)&v90[v91];
              v94 = *(_QWORD *)&v56[v91 / 4];
              if (v93 != v94)
                break;
              v91 += 8;
              if ((v86 & 0xF8) == v91)
              {
                v90 = v92;
                v34 = v86 & 0xF8;
                goto LABEL_111;
              }
            }
            v34 = v91 + (__clz(__rbit64(v94 ^ v93)) >> 3);
          }
          if (v34
            && v34 + *(unsigned int *)(v29 + 12) > v86
            && (v35 = v235
                    + v255
                    + v87
                    + ((((*(_QWORD *)(v29 + 16) >> (6 * (v86 - v34))) & 0x3FLL)
                      + 4 * (v86 - v34)) << *(_BYTE *)(*(_QWORD *)v29 + v86)),
                v35 <= v260)
            && (v95 = 135 * v34 - 30 * (__clz(v35) ^ 0x1F) + 1920, v95 >= v84))
          {
            v248 = v86 - v34;
            *(_QWORD *)(v76 + 48) = ++v78;
            v84 = v95;
          }
          else
          {
LABEL_106:
            v35 = v85;
            v34 = v83;
          }
          v82 = 0;
          ++v80;
          v83 = v34;
          v85 = v35;
        }
        while ((result & 1) != 0);
      }
      else
      {
        v84 = v37;
        v248 = 0;
        v79 = a8;
      }
      if (v84 < 0x7E5)
      {
LABEL_235:
        ++v12;
        v181 = a2 + 1;
        v20 = v258;
        a6 = v250;
        if (a2 + 1 > v258)
        {
          result = v253;
          a3 = v268;
          if (v181 <= v258 + 4 * v233)
          {
            v189 = a2 + 9;
            if (a2 + 9 >= v230)
              v189 = v230;
            if (v181 < v189)
            {
              v190 = *(_DWORD *)(a7 + 96);
              v191 = *(_DWORD *)(a7 + 100);
              v192 = *(_DWORD *)(a7 + 104);
              do
              {
                v193 = (506832829 * *(_DWORD *)(v268 + (v181 & a4))) >> v190;
                v194 = *(unsigned __int16 *)(v267 + 2 * v193);
                *(_DWORD *)(v253 + 4 * ((v193 << v192) + (unint64_t)(v191 & v194))) = v181;
                *(_WORD *)(v267 + 2 * v193) = v194 + 1;
                v12 += 2;
                v181 += 2;
              }
              while (v181 < v189);
            }
          }
          else
          {
            v182 = a2 + 17;
            if (a2 + 17 >= v254 - 4)
              v182 = v254 - 4;
            if (v181 < v182)
            {
              v183 = *(_DWORD *)(a7 + 96);
              v184 = *(_DWORD *)(a7 + 100);
              v185 = *(_DWORD *)(a7 + 104);
              do
              {
                v186 = (506832829 * *(_DWORD *)(v268 + (v181 & a4))) >> v183;
                v187 = *(unsigned __int16 *)(v267 + 2 * v186);
                *(_DWORD *)(v253 + 4 * ((v186 << v185) + (unint64_t)(v184 & v187))) = v181;
                *(_WORD *)(v267 + 2 * v186) = v187 + 1;
                v12 += 4;
                v181 += 4;
              }
              while (v181 < v182);
            }
          }
          goto LABEL_310;
        }
        goto LABEL_309;
      }
      v243 = v35;
      v98 = 0;
      v99 = *(unsigned int *)(a7 + 100);
      v244 = *(_DWORD *)(a7 + 96);
      v245 = *(_DWORD *)(a7 + 104);
      v246 = *(_DWORD *)(a7 + 108);
      if (v246 <= 1)
        v100 = 1;
      else
        v100 = *(_DWORD *)(a7 + 108);
      v101 = v100;
      a6 = v250;
      v102 = v254 - a2;
      while (1)
      {
        v262 = v98;
        v266 = v12;
        v103 = v102 - 1;
        v104 = v34 - 1;
        if (v34 - 1 >= v103)
          v104 = v103;
        if (*(int *)(a6 + 4) >= 5)
          v105 = 0;
        else
          v105 = v104;
        v106 = a2 + 1;
        if (a2 + 1 < v251)
          v107 = a2 + 1;
        else
          v107 = v251;
        v108 = v106 + v252;
        if (v106 + v252 >= v251)
          v108 = v251;
        v256 = v108;
        if (*(_DWORD *)(a6 + 632))
        {
          v109 = *(unsigned __int8 *)(a6
                                    + (*(_BYTE *)(v237 + v257) | *(_BYTE *)(a5
                                                                                           + *(unsigned __int8 *)(v268 + (a2 & a4))))
                                    + 637);
          v257 = *(unsigned __int8 *)(v268 + (a2 & a4));
        }
        else
        {
          v109 = v259;
        }
        v241 = v34;
        v264 = v84;
        v259 = v109;
        v110 = *(_QWORD *)(a6 + 8 * v109 + 704);
        v111 = v106 & a4;
        v112 = v103 >> 3;
        v113 = v103;
        if (v246)
        {
          v114 = 0;
          v115 = 0;
          v116 = 0;
          v117 = v268;
          v118 = v268 + v111;
          v119 = v103 & 7;
          v120 = 2020;
          v121 = 2020;
          do
          {
            v122 = v79[v114];
            v123 = v106 - v122;
            v124 = v107 < v122 || v123 >= v106;
            v125 = v123 & a4;
            v126 = v105 + v111;
            v127 = v124 || v126 > a4;
            v128 = v125 + v105;
            v129 = v127 || v128 > a4;
            if (!v129 && *(unsigned __int8 *)(v117 + v126) == *(unsigned __int8 *)(v117 + v128))
            {
              v130 = v117 + v125;
              if (v113 < 8)
              {
                v131 = 0;
                v135 = (unsigned __int8 *)(v268 + v111);
LABEL_167:
                if (v119)
                {
                  v137 = v119;
                  while (*(unsigned __int8 *)(v130 + v131) == *v135)
                  {
                    ++v135;
                    ++v131;
                    --v137;
                    v117 = v268;
                    if (!v137)
                      goto LABEL_157;
                  }
                  v117 = v268;
                }
              }
              else
              {
                v131 = 0;
                v132 = v112;
                while (1)
                {
                  v133 = *(_QWORD *)(v118 + v131);
                  v134 = *(_QWORD *)(v130 + v131);
                  if (v133 != v134)
                    break;
                  v131 += 8;
                  if (!--v132)
                  {
                    v135 = (unsigned __int8 *)(v118 + v131);
                    goto LABEL_167;
                  }
                }
                v131 += __clz(__rbit64(v134 ^ v133)) >> 3;
              }
LABEL_157:
              if (v131 > 2 || v114 <= 1 && v131 == 2)
              {
                v136 = 135 * v131 + 1935;
                if (v120 < v136)
                {
                  if (v114)
                    v136 -= ((0x1CA10u >> (v114 & 0xE)) & 0xE) + 39;
                  if (v120 < v136)
                  {
                    v116 = v131;
                    v115 = v79[v114];
                    v121 = v136;
                    v120 = v136;
                    v105 = v131;
                  }
                }
              }
            }
            ++v114;
          }
          while (v114 != v101);
        }
        else
        {
          v116 = 0;
          v115 = 0;
          v121 = 2020;
          v120 = 2020;
          v117 = v268;
        }
        v138 = (unsigned __int8 *)(v117 + v111);
        v139 = (506832829 * *(_DWORD *)(v117 + v111)) >> v244;
        v140 = v253 + 4 * ((_DWORD)v139 << v245);
        v141 = *(unsigned __int16 *)(v267 + 2 * v139);
        v142 = v141 >= v249 ? v141 - v249 : 0;
        if (v142 >= v141)
        {
          v102 = v113;
        }
        else
        {
          v102 = v113;
          v143 = v113 & 7;
          v144 = *(unsigned __int16 *)(v267 + 2 * v139);
          do
          {
            v145 = *(unsigned int *)(v140 + 4 * (--v144 & v99));
            v146 = v106 - v145;
            if (v106 - v145 > v107)
              break;
            if (v105 + v111 <= a4)
            {
              v147 = v145 & a4;
              if (v147 + v105 <= a4
                && *(unsigned __int8 *)(v117 + v105 + v111) == *(unsigned __int8 *)(v117 + v147 + v105))
              {
                v148 = v117 + v147;
                if (v102 < 8)
                {
                  v149 = v121;
                  v151 = 0;
                  v156 = v138;
LABEL_196:
                  v152 = v112;
                  if (v143)
                  {
                    v158 = v143;
                    while (1)
                    {
                      v239 = v158;
                      if (*(unsigned __int8 *)(v148 + v151) != *v156)
                        break;
                      ++v156;
                      ++v151;
                      --v158;
                      v79 = a8;
                      if (v239 == 1)
                        goto LABEL_189;
                    }
                    v79 = a8;
                  }
                }
                else
                {
                  v149 = v121;
                  v150 = v143;
                  v151 = 0;
                  v152 = v112;
                  v153 = v112;
                  while (1)
                  {
                    v154 = *(_QWORD *)&v138[v151];
                    v155 = *(_QWORD *)(v148 + v151);
                    if (v154 != v155)
                      break;
                    v151 += 8;
                    if (!--v153)
                    {
                      v156 = &v138[v151];
                      v143 = v150;
                      v112 = v152;
                      v117 = v268;
                      goto LABEL_196;
                    }
                  }
                  v151 += __clz(__rbit64(v155 ^ v154)) >> 3;
                  v143 = v150;
                  v117 = v268;
                }
LABEL_189:
                if (v151 < 4)
                {
                  v112 = v152;
                  v121 = v149;
                  v102 = v113;
                }
                else
                {
                  v157 = __clz(v146);
                  v112 = v152;
                  v121 = v149;
                  v102 = v113;
                  if (v120 < 135 * v151 - 30 * (v157 ^ 0x1F) + 1920)
                  {
                    v116 = v151;
                    v115 = v146;
                    v121 = 135 * v151 - 30 * (v157 ^ 0x1F) + 1920;
                    v120 = v121;
                    v105 = v151;
                  }
                }
              }
            }
          }
          while (v144 > v142);
        }
        *(_DWORD *)(v140 + 4 * (v99 & v141)) = v106;
        *(_WORD *)(v267 + 2 * v139) = v141 + 1;
        if (v121 == 2020)
        {
          v159 = *(_QWORD *)(a7 + 112);
          v160 = *(_QWORD *)(v159 + 40);
          if (*(_QWORD *)(v159 + 48) >= v160 >> 7)
          {
            v240 = *(_QWORD *)(v159 + 48);
            v161 = 0;
            v163 = ((506832829 * *(_DWORD *)v138) >> 17) & 0x7FFE;
            v164 = *(_QWORD *)(v110 + 32);
            v165 = 1;
            v121 = 2020;
            v166 = v115;
            v167 = v116;
            do
            {
              v168 = v165;
              *(_QWORD *)(v159 + 40) = ++v160;
              v169 = *(unsigned __int8 *)(v164 + v163);
              if (!*(_BYTE *)(v164 + v163) || v102 < v169)
                goto LABEL_224;
              v170 = *(unsigned __int16 *)(*(_QWORD *)(v110 + 24) + 2 * v163);
              v171 = *(unsigned int *)(*(_QWORD *)v110 + 4 * v169 + 32);
              v172 = *(_QWORD *)(*(_QWORD *)v110 + 168);
              v173 = (unsigned __int8 *)(v172 + v171 + v170 * *(unsigned __int8 *)(v164 + v163));
              if (v169 < 8)
              {
                v116 = 0;
LABEL_229:
                v179 = v169 & 7;
                if ((v169 & 7) != 0)
                {
                  v180 = v116 | v179;
                  while (v138[v116] == *v173)
                  {
                    ++v173;
                    ++v116;
                    if (!--v179)
                    {
                      v116 = v180;
                      break;
                    }
                  }
                  v79 = a8;
                }
              }
              else
              {
                v174 = 0;
                v116 = v169 & 0xF8;
                v175 = (unsigned __int8 *)(v172
                                         + v170 * (unint64_t)*(unsigned __int8 *)(v164 + v163)
                                         + (*(_BYTE *)(v164 + v163) & 0xF8)
                                         + v171);
                while (1)
                {
                  v176 = *(_QWORD *)&v173[v174];
                  v177 = *(_QWORD *)&v138[v174];
                  if (v176 != v177)
                    break;
                  v174 += 8;
                  if (v116 == v174)
                  {
                    v173 = v175;
                    goto LABEL_229;
                  }
                }
                v116 = v174 + (__clz(__rbit64(v177 ^ v176)) >> 3);
              }
              if (v116
                && v116 + *(unsigned int *)(v110 + 12) > v169
                && (v115 = v235
                         + v256
                         + v170
                         + ((((*(_QWORD *)(v110 + 16) >> (6 * (v169 - v116))) & 0x3FLL)
                           + 4 * (v169 - v116)) << *(_BYTE *)(*(_QWORD *)v110 + v169)),
                    v115 <= v260)
                && (v178 = __clz(v115) ^ 0x1F, 135 * v116 - 30 * v178 + 1920 >= v121))
              {
                v161 = (v169 - v116);
                *(_QWORD *)(v159 + 48) = ++v240;
                v121 = 135 * v116 - 30 * v178 + 1920;
              }
              else
              {
LABEL_224:
                v116 = v167;
                v115 = v166;
              }
              v165 = 0;
              ++v163;
              v166 = v115;
              v167 = v116;
            }
            while ((v168 & 1) != 0);
          }
          else
          {
            v161 = 0;
            v121 = 2020;
          }
        }
        else
        {
          v161 = 0;
        }
        if (v121 < v264 + 175)
          break;
        v12 = v266 + 1;
        a6 = v250;
        if (v262 > 2)
        {
          result = v161;
          goto LABEL_253;
        }
        v162 = a2 + 5;
        v98 = v262 + 1;
        v243 = v115;
        v84 = v121;
        result = v161;
        v248 = v161;
        v34 = v116;
        ++a2;
        if (v162 >= v254)
          goto LABEL_253;
      }
      v188 = a2 + v252;
      if (a2 + v252 >= v251)
        v188 = v251;
      v256 = v188;
      v116 = v241;
      v115 = v243;
      result = v248;
      v106 = a2;
      a6 = v250;
      v12 = v266;
LABEL_253:
      v21 = v267;
      v195 = v234;
      if (v115 > v256 + v232)
        goto LABEL_254;
      v201 = *v79;
      if (v115 != v201)
      {
        v211 = v79[1];
        if (v115 == v211)
        {
          v196 = 1;
          goto LABEL_255;
        }
        v212 = v115 + 3 - v201;
        if (v212 > 6)
        {
          v215 = v115 + 3 - v211;
          if (v215 > 6)
          {
            if (v115 == v79[2])
            {
              v196 = 2;
            }
            else if (v115 == v79[3])
            {
              v196 = 3;
            }
            else
            {
LABEL_254:
              v196 = v115 + 15;
            }
LABEL_255:
            if (v115 <= v256 + v232)
            {
              if (v196)
              {
                v79[3] = v79[2];
                v197 = *(int32x2_t *)v79;
                *(_QWORD *)(v79 + 1) = *(_QWORD *)v79;
                *v79 = v115;
                v198 = *(_DWORD *)(a7 + 108);
                if (v198 >= 5)
                {
                  v199 = vdupq_n_s32(v115);
                  *((int32x4_t *)v79 + 1) = vaddq_s32(v199, (int32x4_t)xmmword_2368AF3A0);
                  *((int32x2_t *)v79 + 4) = vadd_s32(*(int32x2_t *)v199.i8, (int32x2_t)0x3FFFFFFFDLL);
                  if (v198 >= 0xB)
                  {
                    v200 = vdupq_lane_s32(v197, 0);
                    *(int32x4_t *)(v79 + 10) = vaddq_s32(v200, (int32x4_t)xmmword_2368AF3A0);
                    *((int32x2_t *)v79 + 7) = vadd_s32(*(int32x2_t *)v200.i8, (int32x2_t)0x3FFFFFFFDLL);
                  }
                }
              }
            }
            goto LABEL_262;
          }
          v213 = 4 * v215;
          v214 = 266017486;
        }
        else
        {
          v213 = 4 * v212;
          v214 = 158663784;
        }
        v196 = (v214 >> v213) & 0xF;
        goto LABEL_255;
      }
      v196 = 0;
LABEL_262:
      *v234 = v12;
      v234[1] = v116 | ((_DWORD)result << 25);
      v202 = *(unsigned int *)(a6 + 68);
      v203 = v202 + 16;
      if (v202 + 16 <= v196)
      {
        v205 = *(unsigned int *)(a6 + 64);
        v206 = v196 - v202 + (4 << v205) - 16;
        v207 = (__clz(v206) ^ 0x1F) - 1;
        v208 = ((v206 >> v207) & 1 | 2) << v207;
        v196 = ((v206 & ~(-1 << v205))
              + v203
              + ((((v206 >> v207) & 1 | (2 * (v207 - v205))) + 65534) << v205)) | ((v207 - v205) << 10);
        v195 = v234;
        v204 = (v206 - v208) >> v205;
      }
      else
      {
        LODWORD(v204) = 0;
      }
      *((_WORD *)v195 + 7) = v196;
      v195[2] = v204;
      if (v12 > 5)
      {
        if (v12 > 0x81)
        {
          if (v12 > 0x841)
          {
            if (v12 >> 1 >= 0xC21)
            {
              if (v12 < 0x5842)
                LOWORD(v209) = 22;
              else
                LOWORD(v209) = 23;
            }
            else
            {
              LOWORD(v209) = 21;
            }
          }
          else
          {
            v209 = (__clz(v12 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v210 = (__clz(v12 - 2) ^ 0x1F) - 1;
          v209 = ((v12 - 2) >> v210) + 2 * v210 + 2;
        }
      }
      else
      {
        LOWORD(v209) = v12;
      }
      v216 = (int)result + (int)v116;
      if (v216 > 9)
      {
        if (v216 > 0x85)
        {
          if (v216 > 0x845)
            LOWORD(v217) = 23;
          else
            v217 = (__clz(v216 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v218 = v216 - 6;
          v219 = (__clz(v218) ^ 0x1F) - 1;
          v217 = (v218 >> v219) + 2 * v219 + 4;
        }
      }
      else
      {
        LOWORD(v217) = result + v116 - 2;
      }
      v220 = v217 & 7 | (8 * (v209 & 7));
      if ((v196 & 0x3FF) != 0 || (unsigned __int16)v209 > 7u || (unsigned __int16)v217 > 0xFu)
      {
        v222 = 3 * ((unsigned __int16)v209 >> 3) + ((unsigned __int16)(v217 & 0xFFF8) >> 3);
        v221 = ((((0x520D40u >> (2 * v222)) & 0xC0) + (v222 << 6)) | v220) + 64;
      }
      else
      {
        LOWORD(v221) = v220 | 0x40;
        if ((v217 & 0xFFF8) == 0)
          LOWORD(v221) = v217 & 7 | (8 * (v209 & 7));
      }
      *((_WORD *)v195 + 6) = v221;
      v223 = v231;
      *a12 += v12;
      v224 = v106 + 2;
      v181 = v106 + v116;
      if (v106 + v116 < v231)
        v223 = v106 + v116;
      if (v115 < v116 >> 2)
      {
        if (v224 <= v181 - 4 * v115)
          v224 = v181 - 4 * v115;
        if (v223 < v224)
          v224 = v223;
      }
      v20 = v233 + 2 * v116 + v106;
      v234 = v195 + 4;
      if (v224 < v223)
      {
        v225 = *(_DWORD *)(a7 + 96);
        v226 = *(_DWORD *)(a7 + 100);
        v227 = *(_DWORD *)(a7 + 104);
        result = v253;
        a3 = v268;
        do
        {
          v228 = (506832829 * *(_DWORD *)(v268 + (v224 & a4))) >> v225;
          v229 = *(unsigned __int16 *)(v267 + 2 * v228);
          *(_DWORD *)(v253 + 4 * ((v228 << v227) + (unint64_t)(v226 & v229))) = v224;
          *(_WORD *)(v267 + 2 * v228) = v229 + 1;
          ++v224;
        }
        while (v223 != v224);
        v12 = 0;
        goto LABEL_310;
      }
      v12 = 0;
LABEL_309:
      a3 = v268;
LABEL_310:
      a2 = v181;
      if (v181 + 4 >= v254)
        goto LABEL_317;
    }
    v24 = 0;
LABEL_22:
    v25 = 0;
    goto LABEL_23;
  }
  v234 = a10;
  v181 = a2;
LABEL_317:
  *a9 = v12 + v254 - v181;
  *a11 += ((char *)v234 - (char *)a10) >> 4;
  return result;
}

unint64_t sub_23679540C(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int32x4_t v18;
  const float *v19;
  int32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  BOOL v118;
  uint64_t v119;
  unint64_t v120;
  BOOL v121;
  unint64_t v122;
  BOOL v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _DWORD *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 *v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  char v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  unint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  int v176;
  int v177;
  unint64_t v178;
  unsigned int v179;
  unint64_t v180;
  unint64_t v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unint64_t v187;
  int32x2_t v188;
  int v189;
  int32x4_t v190;
  int32x4_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  int v217;
  int v218;
  unint64_t v219;
  unsigned int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  int v234;
  int v235;
  unint64_t v236;
  unsigned int v237;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;

  v12 = a2;
  v242 = *(_QWORD *)(a6 + 16);
  v13 = *a9;
  v245 = a2 + result;
  v222 = a2 + result - 7;
  if (result <= 7)
    v14 = a2;
  else
    v14 = a2 + result - 7;
  v15 = *(_DWORD *)(a6 + 8);
  v16 = 512;
  if (*(int *)(a6 + 4) < 9)
    v16 = 64;
  v225 = v16;
  v223 = v14;
  v224 = *(_QWORD *)(a6 + 104);
  v17 = *(_DWORD *)(a7 + 120);
  if (v17 >= 5)
  {
    v18 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v18, (int32x4_t)xmmword_2368AF3A0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v17 >= 0xB)
    {
      v19 = (const float *)(a8 + 1);
      v20 = (int32x4_t)vld1q_dup_f32(v19);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v20, (int32x4_t)xmmword_2368AF3A0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v20.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (result >= 9)
  {
    v21 = v225 + a2;
    v241 = (1 << v15) - 16;
    v256 = *(_QWORD *)(a7 + 136);
    v243 = *(_QWORD *)(a7 + 104);
    v244 = *(_QWORD *)(a7 + 144);
    v227 = v224 + 1;
    v228 = a5 + 256;
    v226 = a10;
    v240 = a6;
    while (1)
    {
      v22 = v241;
      if (v12 >= v241)
        v23 = v241;
      else
        v23 = v12;
      if (v12 + v242 < v241)
        v22 = v12 + v242;
      v250 = v22;
      if (!*(_DWORD *)(a6 + 632))
      {
        v26 = 0;
        v247 = 0;
        goto LABEL_24;
      }
      if (!v12)
        break;
      v24 = *(unsigned __int8 *)(a3 + ((v12 - 1) & a4));
      if (v12 == 1)
        goto LABEL_22;
      v25 = *(unsigned __int8 *)(a3 + ((v12 - 2) & a4));
LABEL_23:
      v247 = v24;
      v26 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v228 + v25) | *(_BYTE *)(a5 + v24)) + 637);
LABEL_24:
      v252 = v21;
      v27 = v245 - v12;
      v248 = v26;
      v28 = *(_QWORD *)(a6 + 8 * v26 + 704);
      v249 = *(_QWORD *)(a6 + 80);
      v29 = v12 & a4;
      v30 = *(int *)(a7 + 120);
      if ((_DWORD)v30)
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 2020;
        v36 = 2020;
        do
        {
          v37 = a8[v31];
          v38 = v12 - v37;
          v39 = v23 < v37 || v38 >= v12;
          v40 = v38 & a4;
          v41 = v32 + v29;
          v42 = v39 || v41 > a4;
          v43 = v40 + v32;
          v44 = v42 || v43 > a4;
          if (!v44 && *(unsigned __int8 *)(a3 + v41) == *(unsigned __int8 *)(a3 + v43))
          {
            v45 = a3 + v40;
            if (v27 < 8)
            {
              v50 = 0;
              v51 = (unsigned __int8 *)(a3 + v29);
LABEL_56:
              if ((v27 & 7) != 0)
              {
                v54 = v33;
                v55 = v27 & 7 | v50;
                v56 = v27 & 7;
                while (*(unsigned __int8 *)(v45 + v50) == *v51)
                {
                  ++v51;
                  ++v50;
                  if (!--v56)
                  {
                    v50 = v55;
                    break;
                  }
                }
                v33 = v54;
              }
            }
            else
            {
              v46 = 0;
              v47 = (v245 - v12) >> 3;
              while (1)
              {
                v48 = *(_QWORD *)(a3 + v29 + v46);
                v49 = *(_QWORD *)(v45 + v46);
                if (v48 != v49)
                  break;
                v46 += 8;
                if (!--v47)
                {
                  v50 = v27 & 0xFFFFFFFFFFFFFFF8;
                  v51 = (unsigned __int8 *)(a3 + v29 + (v27 & 0xFFFFFFFFFFFFFFF8));
                  goto LABEL_56;
                }
              }
              v50 = v46 + (__clz(__rbit64(v49 ^ v48)) >> 3);
            }
            if (v50 > 2 || v31 <= 1 && v50 == 2)
            {
              v52 = 135 * v50 + 1935;
              if (v35 < v52)
              {
                v53 = v52 - (((0x1CA10u >> (v31 & 0xE)) & 0xE) + 39);
                if (!v31)
                  v53 = 135 * v50 + 1935;
                if (v35 < v53)
                {
                  v34 = a8[v31];
                  v36 = v53;
                  v33 = v50;
                  v35 = v53;
                  v32 = v50;
                }
              }
            }
          }
          ++v31;
        }
        while (v31 != v30);
      }
      else
      {
        v34 = 0;
        v33 = 0;
        v32 = 0;
        v36 = 2020;
        v35 = 2020;
      }
      v57 = (_DWORD *)(a3 + v29);
      v58 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + v29) & v243)) >> *(_DWORD *)(a7 + 96);
      v59 = *(unsigned int *)(a7 + 112);
      v60 = v244 + 4 * ((_DWORD)v58 << *(_DWORD *)(a7 + 116));
      v61 = *(unsigned __int16 *)(v256 + 2 * v58);
      v239 = *(_QWORD *)(a7 + 88);
      if (v61 >= v239)
        result = v61 - v239;
      else
        result = 0;
      if (result < v61)
      {
        v62 = *(unsigned __int16 *)(v256 + 2 * v58);
        do
        {
          v63 = *(unsigned int *)(v60 + 4 * (--v62 & v59));
          v64 = v12 - v63;
          if (v12 - v63 > v23)
            break;
          if (v32 + v29 <= a4)
          {
            v65 = v63 & a4;
            if (v65 + v32 <= a4 && *(unsigned __int8 *)(a3 + v32 + v29) == *(unsigned __int8 *)(a3 + v65 + v32))
            {
              v66 = a3 + v65;
              if (v27 < 8)
              {
                v254 = v13;
                v71 = 0;
                v72 = (unsigned __int8 *)(a3 + v29);
LABEL_84:
                v74 = v27 & 7;
                if ((v27 & 7) != 0)
                {
                  v236 = v27 & 7 | v71;
                  while (*(unsigned __int8 *)(v66 + v71) == *v72)
                  {
                    ++v72;
                    ++v71;
                    if (!--v74)
                    {
                      v71 = v236;
                      break;
                    }
                  }
                }
                v13 = v254;
              }
              else
              {
                v67 = 0;
                v68 = (v245 - v12) >> 3;
                while (1)
                {
                  v69 = *(_QWORD *)&v57[v67];
                  v70 = *(_QWORD *)(v66 + v67 * 4);
                  if (v69 != v70)
                    break;
                  v67 += 2;
                  if (!--v68)
                  {
                    v254 = v13;
                    v71 = v27 & 0xFFFFFFFFFFFFFFF8;
                    v72 = (unsigned __int8 *)v57 + (v27 & 0xFFFFFFFFFFFFFFF8);
                    goto LABEL_84;
                  }
                }
                v71 = v67 * 4 + (__clz(__rbit64(v70 ^ v69)) >> 3);
              }
              if (v71 >= 4)
              {
                v73 = 135 * v71 - 30 * (__clz(v64) ^ 0x1F) + 1920;
                if (v35 < v73)
                {
                  v34 = v64;
                  v36 = v73;
                  v33 = v71;
                  v35 = v73;
                  v32 = v71;
                }
              }
            }
          }
        }
        while (v62 > result);
      }
      *(_DWORD *)(v60 + 4 * (v59 & v61)) = v12;
      *(_WORD *)(v256 + 2 * v58) = v61 + 1;
      if (v36 == 2020)
      {
        v75 = *(_QWORD *)(a7 + 128);
        v77 = *(_QWORD *)(v75 + 40);
        v76 = *(_QWORD *)(v75 + 48);
        if (v76 < v77 >> 7)
          goto LABEL_229;
        v78 = 0;
        v79 = ((506832829 * *v57) >> 17) & 0x7FFE;
        v80 = *(_QWORD *)(v28 + 32);
        v81 = 1;
        result = v33;
        v82 = 2020;
        do
        {
          v83 = v81;
          *(_QWORD *)(v75 + 40) = ++v77;
          v84 = *(unsigned __int8 *)(v80 + v79);
          if (!*(_BYTE *)(v80 + v79) || v27 < v84)
            goto LABEL_105;
          v85 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 24) + 2 * v79);
          v86 = *(unsigned int *)(*(_QWORD *)v28 + 4 * v84 + 32);
          v87 = *(_QWORD *)(*(_QWORD *)v28 + 168);
          v88 = (unsigned __int8 *)(v87 + v86 + v85 * *(unsigned __int8 *)(v80 + v79));
          if (v84 < 8)
          {
            v33 = 0;
LABEL_110:
            v95 = v84 & 7;
            if ((v84 & 7) != 0)
            {
              v96 = v78;
              v97 = v33 | v95;
              while (*((unsigned __int8 *)v57 + v33) == *v88)
              {
                ++v88;
                ++v33;
                if (!--v95)
                {
                  v33 = v97;
                  break;
                }
              }
              v78 = v96;
            }
          }
          else
          {
            v89 = 0;
            v33 = v84 & 0xF8;
            v90 = (unsigned __int8 *)(v87
                                    + v85 * (unint64_t)*(unsigned __int8 *)(v80 + v79)
                                    + (*(_BYTE *)(v80 + v79) & 0xF8)
                                    + v86);
            while (1)
            {
              v91 = *(_QWORD *)&v88[v89];
              v92 = *(_QWORD *)&v57[v89 / 4];
              if (v91 != v92)
                break;
              v89 += 8;
              if (v33 == v89)
              {
                v88 = v90;
                goto LABEL_110;
              }
            }
            v33 = v89 + (__clz(__rbit64(v92 ^ v91)) >> 3);
          }
          if (v33
            && v33 + *(unsigned int *)(v28 + 12) > v84
            && (v93 = v227
                    + v250
                    + v85
                    + ((((*(_QWORD *)(v28 + 16) >> (6 * (v84 - v33))) & 0x3FLL)
                      + 4 * (v84 - v33)) << *(_BYTE *)(*(_QWORD *)v28 + v84)),
                v93 <= v249)
            && (v94 = 135 * v33 - 30 * (__clz(v93) ^ 0x1F) + 1920, v94 >= v82))
          {
            v78 = (v84 - v33);
            *(_QWORD *)(v75 + 48) = ++v76;
            v82 = v94;
          }
          else
          {
LABEL_105:
            v93 = v34;
            v33 = result;
          }
          v81 = 0;
          ++v79;
          result = v33;
          v34 = v93;
        }
        while ((v83 & 1) != 0);
      }
      else
      {
        v82 = v36;
        LODWORD(v78) = 0;
        v93 = v34;
      }
      if (v82 < 0x7E5)
      {
LABEL_229:
        ++v13;
        v173 = v12 + 1;
        v21 = v252;
        if (v12 + 1 <= v252)
        {
          a6 = v240;
        }
        else
        {
          a6 = v240;
          if (v173 <= v252 + 4 * v225)
          {
            v181 = v12 + 9;
            if (v12 + 9 >= v222)
              v181 = v222;
            if (v173 < v181)
            {
              v182 = *(_DWORD *)(a7 + 96);
              v183 = *(_DWORD *)(a7 + 112);
              v184 = *(_DWORD *)(a7 + 116);
              result = v256;
              do
              {
                v185 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v173 & a4)) & v243)) >> v182;
                v186 = *(unsigned __int16 *)(v256 + 2 * v185);
                *(_WORD *)(v256 + 2 * v185) = v186 + 1;
                *(_DWORD *)(v244 + 4 * (((_DWORD)v185 << v184) + (unint64_t)(v183 & v186))) = v173;
                v13 += 2;
                v173 += 2;
              }
              while (v173 < v181);
            }
          }
          else
          {
            v174 = v12 + 17;
            if (v12 + 17 >= v222)
              v174 = v222;
            if (v173 < v174)
            {
              v175 = *(_DWORD *)(a7 + 96);
              v176 = *(_DWORD *)(a7 + 112);
              v177 = *(_DWORD *)(a7 + 116);
              result = v256;
              do
              {
                v178 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v173 & a4)) & v243)) >> v175;
                v179 = *(unsigned __int16 *)(v256 + 2 * v178);
                *(_WORD *)(v256 + 2 * v178) = v179 + 1;
                *(_DWORD *)(v244 + 4 * (((_DWORD)v178 << v177) + (unint64_t)(v176 & v179))) = v173;
                v13 += 4;
                v173 += 4;
              }
              while (v173 < v174);
            }
          }
        }
        goto LABEL_303;
      }
      v255 = v13;
      v98 = 0;
      v235 = *(_DWORD *)(a7 + 96);
      v234 = *(_DWORD *)(a7 + 116);
      v99 = *(unsigned int *)(a7 + 112);
      v237 = *(_DWORD *)(a7 + 120);
      if (v237 <= 1)
        v100 = 1;
      else
        v100 = *(_DWORD *)(a7 + 120);
      v101 = v100;
      a6 = v240;
      while (1)
      {
        v251 = v98;
        --v27;
        v102 = v33 - 1;
        if (v33 - 1 >= v27)
          v102 = v27;
        if (*(int *)(a6 + 4) >= 5)
          v103 = 0;
        else
          v103 = v102;
        v104 = v12 + 1;
        if (v12 + 1 < v241)
          v105 = v12 + 1;
        else
          v105 = v241;
        v106 = v104 + v242;
        if (v104 + v242 >= v241)
          v106 = v241;
        v246 = v106;
        v232 = v93;
        v231 = v78;
        if (*(_DWORD *)(a6 + 632))
        {
          v107 = *(unsigned __int8 *)(a6
                                    + (*(_BYTE *)(v228 + v247) | *(_BYTE *)(a5
                                                                                           + *(unsigned __int8 *)(a3 + (v12 & a4))))
                                    + 637);
          v247 = *(unsigned __int8 *)(a3 + (v12 & a4));
        }
        else
        {
          v107 = v248;
        }
        v233 = v33;
        v248 = v107;
        v108 = *(_QWORD *)(a6 + 8 * v107 + 704);
        v109 = v104 & a4;
        if (v237)
        {
          v110 = 0;
          v111 = 0;
          v112 = 0;
          v113 = a3 + v109;
          v114 = 2020;
          v115 = 2020;
          do
          {
            v116 = a8[v110];
            v117 = v104 - v116;
            v118 = v105 < v116 || v117 >= v104;
            v119 = v117 & a4;
            v120 = v103 + v109;
            v121 = v118 || v120 > a4;
            v122 = v119 + v103;
            v123 = v121 || v122 > a4;
            if (!v123 && *(unsigned __int8 *)(a3 + v120) == *(unsigned __int8 *)(a3 + v122))
            {
              v124 = a3 + v119;
              if (v27 < 8)
              {
                v125 = 0;
                v129 = (unsigned __int8 *)(a3 + v109);
LABEL_167:
                if ((v27 & 7) != 0)
                {
                  v132 = v27 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v124 + v125) != *v129)
                      break;
                    ++v129;
                    ++v125;
                    --v132;
                  }
                  while (v132);
                }
              }
              else
              {
                v125 = 0;
                v126 = v27 >> 3;
                while (1)
                {
                  v127 = *(_QWORD *)(v113 + v125);
                  v128 = *(_QWORD *)(v124 + v125);
                  if (v127 != v128)
                    break;
                  v125 += 8;
                  if (!--v126)
                  {
                    v129 = (unsigned __int8 *)(v113 + v125);
                    goto LABEL_167;
                  }
                }
                v125 += __clz(__rbit64(v128 ^ v127)) >> 3;
              }
              if (v125 > 2 || v110 <= 1 && v125 == 2)
              {
                v130 = 135 * v125 + 1935;
                if (v114 < v130)
                {
                  v131 = v130 - (((0x1CA10u >> (v110 & 0xE)) & 0xE) + 39);
                  if (!v110)
                    v131 = 135 * v125 + 1935;
                  if (v114 < v131)
                  {
                    v112 = v125;
                    v111 = a8[v110];
                    v115 = v131;
                    v114 = v131;
                    v103 = v125;
                  }
                }
              }
            }
            ++v110;
          }
          while (v110 != v101);
        }
        else
        {
          v112 = 0;
          v111 = 0;
          v115 = 2020;
          v114 = 2020;
        }
        v253 = v82;
        v133 = (_DWORD *)(a3 + v109);
        v134 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + v109) & v243)) >> v235;
        v135 = v244 + 4 * ((_DWORD)v134 << v234);
        v136 = *(unsigned __int16 *)(v256 + 2 * v134);
        if (v136 >= v239)
          v137 = v136 - v239;
        else
          v137 = 0;
        if (v137 < v136)
        {
          v138 = *(unsigned __int16 *)(v256 + 2 * v134);
          do
          {
            v139 = *(unsigned int *)(v135 + 4 * (--v138 & v99));
            v140 = v104 - v139;
            if (v104 - v139 > v105)
              break;
            if (v103 + v109 <= a4)
            {
              v141 = v139 & a4;
              if (v141 + v103 <= a4 && *(unsigned __int8 *)(a3 + v103 + v109) == *(unsigned __int8 *)(a3 + v141 + v103))
              {
                v142 = a3 + v141;
                if (v27 < 8)
                {
                  v143 = 0;
                  v147 = (unsigned __int8 *)(a3 + v109);
LABEL_194:
                  v149 = v27 & 7;
                  if ((v27 & 7) != 0)
                  {
                    do
                    {
                      v221 = v149;
                      if (*(unsigned __int8 *)(v142 + v143) != *v147)
                        break;
                      ++v147;
                      ++v143;
                      --v149;
                    }
                    while (v221 != 1);
                  }
                }
                else
                {
                  v143 = 0;
                  v144 = v27 >> 3;
                  while (1)
                  {
                    v145 = *(_QWORD *)((char *)v133 + v143);
                    v146 = *(_QWORD *)(v142 + v143);
                    if (v145 != v146)
                      break;
                    v143 += 8;
                    if (!--v144)
                    {
                      v147 = (unsigned __int8 *)v133 + v143;
                      goto LABEL_194;
                    }
                  }
                  v143 += __clz(__rbit64(v146 ^ v145)) >> 3;
                }
                if (v143 >= 4)
                {
                  v148 = __clz(v140);
                  if (v114 < 135 * v143 - 30 * (v148 ^ 0x1F) + 1920)
                  {
                    v112 = v143;
                    v111 = v140;
                    v115 = 135 * v143 - 30 * (v148 ^ 0x1F) + 1920;
                    v114 = v115;
                    v103 = v143;
                  }
                }
              }
            }
          }
          while (v138 > v137);
        }
        *(_DWORD *)(v135 + 4 * (v99 & v136)) = v104;
        *(_WORD *)(v256 + 2 * v134) = v136 + 1;
        if (v115 == 2020)
        {
          v150 = *(_QWORD *)(a7 + 128);
          v151 = *(_QWORD *)(v150 + 40);
          if (*(_QWORD *)(v150 + 48) >= v151 >> 7)
          {
            v230 = *(_QWORD *)(v150 + 48);
            v152 = 0;
            v155 = ((506832829 * *v133) >> 17) & 0x7FFE;
            v156 = *(_QWORD *)(v108 + 32);
            v157 = 1;
            v115 = 2020;
            v158 = v111;
            v159 = v112;
            do
            {
              v160 = v157;
              *(_QWORD *)(v150 + 40) = ++v151;
              v161 = *(unsigned __int8 *)(v156 + v155);
              if (!*(_BYTE *)(v156 + v155) || v27 < v161)
                goto LABEL_219;
              v162 = *(unsigned __int16 *)(*(_QWORD *)(v108 + 24) + 2 * v155);
              v163 = *(unsigned int *)(*(_QWORD *)v108 + 4 * v161 + 32);
              v164 = *(_QWORD *)(*(_QWORD *)v108 + 168);
              v165 = (unsigned __int8 *)(v164 + v163 + v162 * *(unsigned __int8 *)(v156 + v155));
              if (v161 < 8)
              {
                v112 = 0;
LABEL_224:
                v171 = v161 & 7;
                if ((v161 & 7) != 0)
                {
                  v172 = v112 | v171;
                  while (*((unsigned __int8 *)v133 + v112) == *v165)
                  {
                    ++v165;
                    ++v112;
                    if (!--v171)
                    {
                      v112 = v172;
                      break;
                    }
                  }
                }
              }
              else
              {
                v166 = 0;
                v112 = v161 & 0xF8;
                v167 = (unsigned __int8 *)(v164
                                         + v162 * (unint64_t)*(unsigned __int8 *)(v156 + v155)
                                         + (*(_BYTE *)(v156 + v155) & 0xF8)
                                         + v163);
                while (1)
                {
                  v168 = *(_QWORD *)&v165[v166];
                  v169 = *(_QWORD *)&v133[v166 / 4];
                  if (v168 != v169)
                    break;
                  v166 += 8;
                  if (v112 == v166)
                  {
                    v165 = v167;
                    goto LABEL_224;
                  }
                }
                v112 = v166 + (__clz(__rbit64(v169 ^ v168)) >> 3);
              }
              if (v112
                && v112 + *(unsigned int *)(v108 + 12) > v161
                && (v111 = v227
                         + v246
                         + v162
                         + ((((*(_QWORD *)(v108 + 16) >> (6 * (v161 - v112))) & 0x3FLL)
                           + 4 * (v161 - v112)) << *(_BYTE *)(*(_QWORD *)v108 + v161)),
                    v111 <= v249)
                && (v170 = __clz(v111) ^ 0x1F, 135 * v112 - 30 * v170 + 1920 >= v115))
              {
                v152 = v161 - v112;
                *(_QWORD *)(v150 + 48) = ++v230;
                v115 = 135 * v112 - 30 * v170 + 1920;
              }
              else
              {
LABEL_219:
                v112 = v159;
                v111 = v158;
              }
              v157 = 0;
              ++v155;
              v158 = v111;
              v159 = v112;
            }
            while ((v160 & 1) != 0);
          }
          else
          {
            v152 = 0;
            v115 = 2020;
          }
        }
        else
        {
          v152 = 0;
        }
        if (v115 < v253 + 175)
          break;
        ++v255;
        a6 = v240;
        if (v251 > 2)
        {
          v154 = v152;
          goto LABEL_248;
        }
        v153 = v12 + 9;
        v98 = v251 + 1;
        v93 = v111;
        v82 = v115;
        v154 = v152;
        LODWORD(v78) = v152;
        v33 = v112;
        ++v12;
        if (v153 >= v245)
          goto LABEL_248;
      }
      v180 = v12 + v242;
      if (v12 + v242 >= v241)
        v180 = v241;
      v246 = v180;
      v111 = v232;
      v112 = v233;
      v154 = v231;
      v104 = v12;
      a6 = v240;
LABEL_248:
      result = 0x1FE35A7BD3579BD3;
      if (v111 > v246 + v224)
        goto LABEL_249;
      v192 = *a8;
      if (v111 != v192)
      {
        v202 = a8[1];
        if (v111 == v202)
        {
          v187 = 1;
          goto LABEL_250;
        }
        v203 = v111 + 3 - v192;
        if (v203 > 6)
        {
          v206 = v111 + 3 - v202;
          if (v206 > 6)
          {
            if (v111 == a8[2])
            {
              v187 = 2;
            }
            else if (v111 == a8[3])
            {
              v187 = 3;
            }
            else
            {
LABEL_249:
              v187 = v111 + 15;
            }
LABEL_250:
            if (v111 <= v246 + v224)
            {
              if (v187)
              {
                a8[3] = a8[2];
                v188 = *(int32x2_t *)a8;
                *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
                *a8 = v111;
                v189 = *(_DWORD *)(a7 + 120);
                if (v189 >= 5)
                {
                  v190 = vdupq_n_s32(v111);
                  *((int32x4_t *)a8 + 1) = vaddq_s32(v190, (int32x4_t)xmmword_2368AF3A0);
                  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v190.i8, (int32x2_t)0x3FFFFFFFDLL);
                  if (v189 >= 0xB)
                  {
                    v191 = vdupq_lane_s32(v188, 0);
                    *(int32x4_t *)(a8 + 10) = vaddq_s32(v191, (int32x4_t)xmmword_2368AF3A0);
                    *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v191.i8, (int32x2_t)0x3FFFFFFFDLL);
                  }
                }
              }
            }
            goto LABEL_257;
          }
          v204 = 4 * v206;
          v205 = 266017486;
        }
        else
        {
          v204 = 4 * v203;
          v205 = 158663784;
        }
        v187 = (v205 >> v204) & 0xF;
        goto LABEL_250;
      }
      v187 = 0;
LABEL_257:
      *(_DWORD *)v226 = v255;
      *(_DWORD *)(v226 + 4) = v112 | (v154 << 25);
      v193 = *(unsigned int *)(a6 + 68);
      v194 = v193 + 16;
      if (v193 + 16 <= v187)
      {
        v196 = *(unsigned int *)(a6 + 64);
        v197 = v187 - v193 + (4 << v196) - 16;
        v198 = (__clz(v197) ^ 0x1F) - 1;
        v199 = ((v197 >> v198) & 1 | 2) << v198;
        v187 = ((v197 & ~(-1 << v196))
              + v194
              + ((((v197 >> v198) & 1 | (2 * (v198 - v196))) + 65534) << v196)) | ((v198 - v196) << 10);
        v195 = (v197 - v199) >> v196;
      }
      else
      {
        LODWORD(v195) = 0;
      }
      *(_WORD *)(v226 + 14) = v187;
      *(_DWORD *)(v226 + 8) = v195;
      if (v255 > 5)
      {
        if (v255 > 0x81)
        {
          if (v255 > 0x841)
          {
            if (v255 >> 1 >= 0xC21)
            {
              if (v255 < 0x5842)
                LOWORD(v200) = 22;
              else
                LOWORD(v200) = 23;
            }
            else
            {
              LOWORD(v200) = 21;
            }
          }
          else
          {
            v200 = (__clz(v255 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v201 = __clz(v255 - 2);
          v200 = ((v255 - 2) >> ((v201 ^ 0x1F) - 1)) + 2 * ((v201 ^ 0x1F) - 1) + 2;
        }
      }
      else
      {
        LOWORD(v200) = v255;
      }
      v207 = v154 + (int)v112;
      if (v207 > 9)
      {
        if (v207 > 0x85)
        {
          if (v207 > 0x845)
            LOWORD(v208) = 23;
          else
            v208 = (__clz(v207 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v209 = v207 - 6;
          v210 = (__clz(v209) ^ 0x1F) - 1;
          v208 = (v209 >> v210) + 2 * v210 + 4;
        }
      }
      else
      {
        LOWORD(v208) = v154 + v112 - 2;
      }
      v211 = v208 & 7 | (8 * (v200 & 7));
      if ((v187 & 0x3FF) != 0 || (unsigned __int16)v200 > 7u || (unsigned __int16)v208 > 0xFu)
      {
        v213 = 3 * ((unsigned __int16)v200 >> 3) + ((unsigned __int16)(v208 & 0xFFF8) >> 3);
        v212 = ((((0x520D40u >> (2 * v213)) & 0xC0) + (v213 << 6)) | v211) + 64;
      }
      else
      {
        LOWORD(v212) = v211 | 0x40;
        if ((v208 & 0xFFF8) == 0)
          LOWORD(v212) = v208 & 7 | (8 * (v200 & 7));
      }
      *(_WORD *)(v226 + 12) = v212;
      v214 = v223;
      *a12 += v255;
      v215 = v104 + 2;
      v173 = v104 + v112;
      if (v104 + v112 < v223)
        v214 = v104 + v112;
      if (v111 < v112 >> 2)
      {
        if (v215 <= v173 - 4 * v111)
          v215 = v173 - 4 * v111;
        if (v214 < v215)
          v215 = v214;
      }
      v21 = v225 + 2 * v112 + v104;
      v226 += 16;
      if (v215 < v214)
      {
        v216 = *(_DWORD *)(a7 + 96);
        v217 = *(_DWORD *)(a7 + 112);
        v218 = *(_DWORD *)(a7 + 116);
        do
        {
          v219 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v215 & a4)) & v243)) >> v216;
          v220 = *(unsigned __int16 *)(v256 + 2 * v219);
          *(_WORD *)(v256 + 2 * v219) = v220 + 1;
          *(_DWORD *)(v244 + 4 * (((_DWORD)v219 << v218) + (unint64_t)(v217 & v220))) = v215++;
        }
        while (v214 != v215);
      }
      v13 = 0;
LABEL_303:
      v12 = v173;
      if (v173 + 8 >= v245)
        goto LABEL_310;
    }
    v24 = 0;
LABEL_22:
    v25 = 0;
    goto LABEL_23;
  }
  v226 = a10;
  v173 = a2;
LABEL_310:
  *a9 = v13 + v245 - v173;
  *a11 += (v226 - a10) >> 4;
  return result;
}

unint64_t sub_2367966BC(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int16 v78;
  unint64_t v79;
  __int16 *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned __int16 *v154;
  __int16 v155;
  __int16 *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int16 v186;
  unsigned int v187;
  unint64_t v188;
  _WORD *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  _WORD *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unint64_t v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  int v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;

  v14 = a10;
  v15 = *a9;
  v16 = a2 + result;
  v17 = a2 + result - 3;
  v230 = v17;
  if (result <= 3)
    v17 = a2;
  v234 = v17;
  v18 = 512;
  if (*(int *)(a6 + 4) < 9)
    v18 = 64;
  if (result >= 5)
  {
    v246 = (1 << *(_DWORD *)(a6 + 8)) - 16;
    v19 = v18 + a2;
    v237 = a5 + 256;
    v232 = *(_QWORD *)(a6 + 104);
    v235 = v232 + 1;
    v236 = a10;
    v244 = a7;
    v245 = *(_QWORD *)(a6 + 16);
    v233 = v18;
    v231 = 4 * v18;
    v229 = v16 - 4;
    v243 = a6;
    v261 = a3;
    v241 = a2 + result;
    while (1)
    {
      if (a2 >= v246)
        v20 = v246;
      else
        v20 = a2;
      v21 = a2 + v245;
      if (a2 + v245 >= v246)
        v21 = v246;
      v254 = v21;
      v256 = v15;
      v262 = v19;
      if (*(_DWORD *)(a6 + 632))
      {
        if (a2)
        {
          v22 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
          v23 = a5;
          if (a2 == 1)
            v24 = 0;
          else
            v24 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
        }
        else
        {
          v22 = 0;
          v24 = 0;
          v23 = a5;
        }
        v248 = v22;
        v25 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v237 + v24) | *(_BYTE *)(v23 + v22)) + 637);
      }
      else
      {
        v25 = 0;
        v248 = 0;
      }
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = v16 - a2;
      v249 = v25;
      v31 = *(_QWORD *)(a6 + 8 * v25 + 704);
      v33 = *(_QWORD *)(a7 + 96);
      v32 = *(_QWORD *)(a7 + 104);
      v34 = v33 + 196608;
      v35 = a2 & a4;
      v36 = (unsigned __int8 *)(a3 + (a2 & a4));
      v37 = (506832829 * *(_DWORD *)v36) >> 17;
      v38 = (v16 - a2) >> 3;
      v253 = (v16 - a2) & 7;
      v251 = (v16 - a2) & 0xFFFFFFFFFFFFFFF8;
      v39 = 2020;
      v258 = *(_QWORD *)(a6 + 80);
      v260 = 2020;
      do
      {
        v40 = a8[v26];
        v41 = a2 - v40;
        if ((!v26 || *(unsigned __int8 *)(v34 + (unsigned __int16)(a2 - v40)) == v37)
          && v20 >= v40
          && v41 < a2)
        {
          v43 = a3 + (v41 & a4);
          if (v30 < 8)
          {
            v48 = 0;
            v47 = (unsigned __int8 *)(a3 + (a2 & a4));
LABEL_48:
            result = v253;
            if (v253)
            {
              v52 = v253 | v48;
              v53 = v253;
              while (1)
              {
                result = *(unsigned __int8 *)(v43 + v48);
                if ((_DWORD)result != *v47)
                  break;
                ++v47;
                ++v48;
                if (!--v53)
                {
                  v48 = v52;
                  break;
                }
              }
            }
          }
          else
          {
            v44 = 0;
            v45 = v38;
            while (1)
            {
              v46 = *(_QWORD *)&v36[v44];
              result = *(_QWORD *)(v43 + v44);
              if (v46 != result)
                break;
              v44 += 8;
              if (!--v45)
              {
                v47 = &v36[v251];
                v48 = v251;
                goto LABEL_48;
              }
            }
            v48 = v44 + (__clz(__rbit64(result ^ v46)) >> 3);
          }
          if (v48 >= 2)
          {
            v49 = 135 * v48 + 1935;
            if (v39 < v49)
            {
              result = v49 - (((0x1CA10u >> (v26 & 0xE)) & 0xE) + 39);
              if (v26)
                v49 -= ((0x1CA10u >> (v26 & 0xE)) & 0xE) + 39;
              v50 = v39 >= v49;
              if (v39 < v49)
                v29 = a8[v26];
              v51 = v260;
              if (v39 < v49)
                v51 = v49;
              v260 = v51;
              if (v39 < v49)
              {
                v28 = v48;
                v39 = v49;
              }
              if (!v50)
                v27 = v48;
            }
          }
        }
        ++v26;
      }
      while (v26 != 4);
      v54 = v33 + 0x20000;
      v55 = *(_QWORD *)(a7 + 88);
      v56 = a2;
      v57 = a2 - *(unsigned int *)(v33 + 4 * v37);
      if (v55)
      {
        v58 = 0;
        v59 = *(unsigned __int16 *)(v54 + 2 * v37);
        v60 = a2 - *(unsigned int *)(v33 + 4 * v37);
        do
        {
          v58 += v60;
          if (v58 > v20)
            break;
          if (v27 + v35 <= a4)
          {
            v61 = (v56 - v58) & a4;
            if (v61 + v27 <= a4)
            {
              result = *(unsigned __int8 *)(v261 + v61 + v27);
              if (*(unsigned __int8 *)(v261 + v27 + v35) == (_DWORD)result)
              {
                v62 = v261 + v61;
                if (v30 < 8)
                {
                  v68 = 0;
                  v67 = v36;
LABEL_85:
                  v75 = v253;
                  if (v253)
                  {
                    v76 = v253 | v68;
                    while (*(unsigned __int8 *)(v62 + v68) == *v67)
                    {
                      ++v67;
                      ++v68;
                      if (!--v75)
                      {
                        v68 = v76;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v63 = 0;
                  v64 = v38;
                  while (1)
                  {
                    v65 = *(_QWORD *)&v36[v63];
                    v66 = *(_QWORD *)(v62 + v63);
                    if (v65 != v66)
                      break;
                    v63 += 8;
                    if (!--v64)
                    {
                      v67 = &v36[v251];
                      v68 = v251;
                      goto LABEL_85;
                    }
                  }
                  v68 = v63 + (__clz(__rbit64(v66 ^ v65)) >> 3);
                }
                v69 = 135 * v68 - 30 * (__clz(v58) ^ 0x1F) + 1920;
                if (v39 < v69)
                  result = v58;
                else
                  result = v29;
                v70 = v260;
                if (v39 < v69)
                  v71 = v69;
                else
                  v71 = v260;
                if (v39 < v69)
                  v72 = v68;
                else
                  v72 = v28;
                if (v39 < v69)
                {
                  v73 = v68;
                }
                else
                {
                  v69 = v39;
                  v73 = v27;
                }
                if (v68 >= 4)
                {
                  v29 = result;
                  v70 = v71;
                }
                v260 = v70;
                if (v68 >= 4)
                {
                  v28 = v72;
                  v39 = v69;
                  v27 = v73;
                }
              }
            }
          }
          v74 = (unsigned __int16 *)(v32 + 4 * v59);
          v59 = v74[1];
          v60 = *v74;
          --v55;
        }
        while (v55);
      }
      a7 = v244;
      v77 = *(unsigned __int16 *)(v244 + 80);
      *(_WORD *)(v244 + 80) = v77 + 1;
      *(_BYTE *)(v34 + (unsigned __int16)v56) = v37;
      v78 = -1;
      if (v57 < 0xFFFF)
        v78 = v57;
      v79 = v56;
      v80 = (__int16 *)(v32 + 4 * v77);
      *v80 = v78;
      v80[1] = *(_WORD *)(v54 + 2 * v37);
      *(_DWORD *)(v33 + 4 * v37) = v56;
      *(_WORD *)(v54 + 2 * v37) = v77;
      if (v260 == 2020)
      {
        v81 = *(_QWORD *)(v244 + 112);
        v83 = *(_QWORD *)(v81 + 40);
        v82 = *(_QWORD *)(v81 + 48);
        a6 = v243;
        a3 = v261;
        if (v82 < v83 >> 7)
          goto LABEL_225;
        v242 = 0;
        v84 = ((506832829 * *(_DWORD *)v36) >> 17) & 0x7FFE;
        v85 = *(_QWORD *)(v31 + 32);
        result = v235 + v254;
        v86 = 1;
        v87 = v28;
        v260 = 2020;
        v88 = v29;
        do
        {
          v89 = v86;
          *(_QWORD *)(v81 + 40) = ++v83;
          v90 = *(unsigned __int8 *)(v85 + v84);
          if (!*(_BYTE *)(v85 + v84) || v30 < v90)
            goto LABEL_107;
          v91 = *(unsigned __int16 *)(*(_QWORD *)(v31 + 24) + 2 * v84);
          v92 = *(unsigned int *)(*(_QWORD *)v31 + 4 * v90 + 32);
          v93 = *(_QWORD *)(*(_QWORD *)v31 + 168);
          v94 = (unsigned __int8 *)(v93 + v92 + v91 * *(unsigned __int8 *)(v85 + v84));
          if (v90 < 8)
          {
            v96 = 0;
LABEL_112:
            v103 = v90 & 7;
            if ((v90 & 7) != 0)
            {
              v104 = v96 | v103;
              while (v36[v96] == *v94)
              {
                ++v94;
                ++v96;
                if (!--v103)
                {
                  v96 = v104;
                  break;
                }
              }
            }
          }
          else
          {
            v95 = 0;
            v96 = v90 & 0xF8;
            v97 = (unsigned __int8 *)(v93
                                    + v91 * (unint64_t)*(unsigned __int8 *)(v85 + v84)
                                    + (*(_BYTE *)(v85 + v84) & 0xF8)
                                    + v92);
            while (1)
            {
              v98 = *(_QWORD *)&v94[v95];
              v99 = *(_QWORD *)&v36[v95];
              if (v98 != v99)
                break;
              v95 += 8;
              if (v96 == v95)
              {
                v94 = v97;
                goto LABEL_112;
              }
            }
            v96 = v95 + (__clz(__rbit64(v99 ^ v98)) >> 3);
          }
          if (v96
            && v96 + *(unsigned int *)(v31 + 12) > v90
            && (v100 = result
                     + v91
                     + ((((*(_QWORD *)(v31 + 16) >> (6 * (v90 - v96))) & 0x3FLL)
                       + 4 * (v90 - v96)) << *(_BYTE *)(*(_QWORD *)v31 + v90)),
                v100 <= v258)
            && (v101 = 135 * v96 - 30 * (__clz(v100) ^ 0x1F) + 1920, v101 >= v260))
          {
            v102 = v96;
            v242 = v90 - v96;
            *(_QWORD *)(v81 + 48) = ++v82;
            v260 = v101;
          }
          else
          {
LABEL_107:
            v100 = v88;
            v102 = v87;
          }
          v86 = 0;
          ++v84;
          v87 = v102;
          v88 = v100;
        }
        while ((v89 & 1) != 0);
      }
      else
      {
        v242 = 0;
        a6 = v243;
        a3 = v261;
        v102 = v28;
        v100 = v29;
      }
      if (v260 >= 0x7E5)
      {
        v105 = 0;
        v106 = *(unsigned __int16 *)(v244 + 80);
        result = v256;
        while (1)
        {
          v250 = v105;
          --v30;
          v107 = v102 - 1;
          if (v102 - 1 >= v30)
            v107 = v30;
          if (*(int *)(a6 + 4) >= 5)
            v108 = 0;
          else
            v108 = v107;
          v109 = v79 + 1;
          if (v79 + 1 < v246)
            v110 = v79 + 1;
          else
            v110 = v246;
          v111 = v109 + v245;
          if (v109 + v245 >= v246)
            v111 = v246;
          v247 = v111;
          v263 = v79;
          v257 = result;
          v239 = v100;
          v240 = v102;
          v252 = v106;
          if (*(_DWORD *)(a6 + 632))
          {
            v112 = *(unsigned __int8 *)(a6
                                      + (*(_BYTE *)(v237 + v248) | *(_BYTE *)(a5
                                                                                             + *(unsigned __int8 *)(v261 + (v79 & a4))))
                                      + 637);
            v248 = *(unsigned __int8 *)(v261 + (v79 & a4));
          }
          else
          {
            v112 = v249;
          }
          v113 = 0;
          v114 = 0;
          v115 = 0;
          v249 = v112;
          v116 = *(_QWORD *)(a6 + 8 * v112 + 704);
          v117 = *(_QWORD *)(a7 + 104);
          v259 = *(_QWORD *)(a7 + 96);
          v118 = v259 + 196608;
          v119 = v109 & a4;
          v120 = (_DWORD *)(v261 + (v109 & a4));
          v121 = (506832829 * *v120) >> 17;
          v255 = *(_QWORD *)(a6 + 80);
          v122 = 2020;
          v123 = 2020;
          do
          {
            v124 = a8[v113];
            v125 = v109 - v124;
            if ((!v113 || *(unsigned __int8 *)(v118 + (unsigned __int16)(v109 - v124)) == v121)
              && v110 >= v124
              && v125 < v109)
            {
              v127 = v261 + (v125 & a4);
              if (v30 < 8)
              {
                v128 = 0;
                v132 = (unsigned __int8 *)(v261 + (v109 & a4));
LABEL_155:
                v134 = v30 & 7;
                if ((v30 & 7) != 0)
                {
                  do
                  {
                    if (*(unsigned __int8 *)(v127 + v128) != *v132)
                      break;
                    ++v132;
                    ++v128;
                    --v134;
                  }
                  while (v134);
                }
              }
              else
              {
                v128 = 0;
                v129 = v30 >> 3;
                while (1)
                {
                  v130 = *(_QWORD *)((char *)v120 + v128);
                  v131 = *(_QWORD *)(v127 + v128);
                  if (v130 != v131)
                    break;
                  v128 += 8;
                  if (!--v129)
                  {
                    v132 = (unsigned __int8 *)v120 + v128;
                    goto LABEL_155;
                  }
                }
                v128 += __clz(__rbit64(v131 ^ v130)) >> 3;
              }
              if (v128 >= 2)
              {
                v133 = 135 * v128 + 1935;
                if (v122 < v133)
                {
                  if (v113)
                    v133 -= ((0x1CA10u >> (v113 & 0xE)) & 0xE) + 39;
                  if (v122 < v133)
                  {
                    v115 = v128;
                    v114 = a8[v113];
                    v123 = v133;
                    v122 = v133;
                    v108 = v128;
                  }
                }
              }
            }
            ++v113;
          }
          while (v113 != 4);
          v135 = v259 + 0x20000;
          v136 = *(_QWORD *)(a7 + 88);
          v137 = v109 - *(unsigned int *)(v259 + 4 * v121);
          if (v136)
          {
            v138 = 0;
            v139 = *(unsigned __int16 *)(v135 + 2 * v121);
            v140 = v109 - *(unsigned int *)(v259 + 4 * v121);
            do
            {
              v138 += v140;
              if (v138 > v110)
                break;
              if (v108 + v119 <= a4)
              {
                v141 = (v109 - v138) & a4;
                if (v141 + v108 <= a4
                  && *(unsigned __int8 *)(v261 + v108 + v119) == *(unsigned __int8 *)(v261 + v141 + v108))
                {
                  v142 = v261 + v141;
                  if (v30 < 8)
                  {
                    v143 = 0;
                    v148 = (unsigned __int8 *)(v261 + (v109 & a4));
                    v145 = v30 & 7;
LABEL_188:
                    while (v145)
                    {
                      if (*(unsigned __int8 *)(v142 + v143) != *v148)
                        break;
                      ++v148;
                      ++v143;
                      --v145;
                    }
                  }
                  else
                  {
                    v143 = 0;
                    v144 = v30 >> 3;
                    v145 = v30 & 7;
                    while (1)
                    {
                      v146 = *(_QWORD *)((char *)v120 + v143);
                      v147 = *(_QWORD *)(v142 + v143);
                      if (v146 != v147)
                        break;
                      v143 += 8;
                      if (!--v144)
                      {
                        v148 = (unsigned __int8 *)v120 + v143;
                        goto LABEL_188;
                      }
                    }
                    v143 += __clz(__rbit64(v147 ^ v146)) >> 3;
                  }
                  v149 = 135 * v143 - 30 * (__clz(v138) ^ 0x1F) + 1920;
                  if (v122 < v149)
                    v150 = v143;
                  else
                    v150 = v115;
                  if (v122 < v149)
                    v151 = v138;
                  else
                    v151 = v114;
                  if (v122 < v149)
                    v152 = v149;
                  else
                    v152 = v123;
                  if (v122 < v149)
                  {
                    v153 = v143;
                  }
                  else
                  {
                    v149 = v122;
                    v153 = v108;
                  }
                  if (v143 >= 4)
                  {
                    v115 = v150;
                    v114 = v151;
                    v123 = v152;
                    v122 = v149;
                    v108 = v153;
                  }
                }
              }
              v154 = (unsigned __int16 *)(v117 + 4 * v139);
              v139 = v154[1];
              v140 = *v154;
              --v136;
            }
            while (v136);
          }
          a7 = v244;
          *(_WORD *)(v244 + 80) = v252 + 1;
          *(_BYTE *)(v118 + (unsigned __int16)v109) = v121;
          v155 = -1;
          if (v137 < 0xFFFF)
            v155 = v137;
          v156 = (__int16 *)(v117 + 4 * (unsigned __int16)v252);
          *v156 = v155;
          v156[1] = *(_WORD *)(v135 + 2 * v121);
          *(_DWORD *)(v259 + 4 * v121) = v109;
          *(_WORD *)(v135 + 2 * v121) = v252;
          if (v123 == 2020)
          {
            v157 = *(_QWORD *)(v244 + 112);
            v159 = *(_QWORD *)(v157 + 40);
            v158 = *(_QWORD *)(v157 + 48);
            v160 = v263;
            v161 = 0;
            if (v158 >= v159 >> 7)
            {
              v163 = ((506832829 * *v120) >> 17) & 0x7FFE;
              v164 = *(_QWORD *)(v116 + 32);
              v165 = 1;
              v123 = 2020;
              v166 = v114;
              v167 = v115;
              do
              {
                v168 = v165;
                *(_QWORD *)(v157 + 40) = ++v159;
                v169 = *(unsigned __int8 *)(v164 + v163);
                if (!*(_BYTE *)(v164 + v163) || v30 < v169)
                  goto LABEL_215;
                v170 = *(unsigned __int16 *)(*(_QWORD *)(v116 + 24) + 2 * v163);
                v171 = *(unsigned int *)(*(_QWORD *)v116 + 4 * v169 + 32);
                v172 = *(_QWORD *)(*(_QWORD *)v116 + 168);
                v173 = (unsigned __int8 *)(v172 + v171 + v170 * *(unsigned __int8 *)(v164 + v163));
                if (v169 < 8)
                {
                  v115 = 0;
LABEL_220:
                  v179 = v169 & 7;
                  if ((v169 & 7) != 0)
                  {
                    v180 = v115 | v179;
                    while (*((unsigned __int8 *)v120 + v115) == *v173)
                    {
                      ++v173;
                      ++v115;
                      if (!--v179)
                      {
                        v115 = v180;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v174 = 0;
                  v115 = v169 & 0xF8;
                  v175 = (unsigned __int8 *)(v172
                                           + v170 * (unint64_t)*(unsigned __int8 *)(v164 + v163)
                                           + (*(_BYTE *)(v164 + v163) & 0xF8)
                                           + v171);
                  while (1)
                  {
                    v176 = *(_QWORD *)&v173[v174];
                    v177 = *(_QWORD *)&v120[v174 / 4];
                    if (v176 != v177)
                      break;
                    v174 += 8;
                    if (v115 == v174)
                    {
                      v173 = v175;
                      goto LABEL_220;
                    }
                  }
                  v115 = v174 + (__clz(__rbit64(v177 ^ v176)) >> 3);
                }
                v160 = v263;
                if (v115
                  && v115 + *(unsigned int *)(v116 + 12) > v169
                  && (v114 = v235
                           + v247
                           + v170
                           + ((((*(_QWORD *)(v116 + 16) >> (6 * (v169 - v115))) & 0x3FLL)
                             + 4 * (v169 - v115)) << *(_BYTE *)(*(_QWORD *)v116 + v169)),
                      v114 <= v255)
                  && (v178 = __clz(v114) ^ 0x1F, 135 * v115 - 30 * v178 + 1920 >= v123))
                {
                  v161 = v169 - v115;
                  *(_QWORD *)(v157 + 48) = ++v158;
                  v123 = 135 * v115 - 30 * v178 + 1920;
                }
                else
                {
LABEL_215:
                  v115 = v167;
                  v114 = v166;
                }
                v165 = 0;
                ++v163;
                v166 = v114;
                v167 = v115;
              }
              while ((v168 & 1) != 0);
            }
            else
            {
              v123 = 2020;
            }
          }
          else
          {
            v161 = 0;
            v160 = v263;
          }
          if (v123 < v260 + 175)
            break;
          result = v257 + 1;
          a6 = v243;
          a3 = v261;
          if (v250 <= 2)
          {
            v162 = v160 + 5;
            v105 = v250 + 1;
            v106 = v252 + 1;
            v100 = v114;
            v260 = v123;
            v242 = v161;
            v102 = v115;
            v79 = v109;
            if (v162 < v241)
              continue;
          }
          goto LABEL_247;
        }
        v190 = v160 + v245;
        if (v160 + v245 >= v246)
          v190 = v246;
        v247 = v190;
        v114 = v239;
        v115 = v240;
        v161 = v242;
        v109 = v160;
        a6 = v243;
        a3 = v261;
        result = v257;
LABEL_247:
        if (v114 > v247 + v232)
        {
LABEL_248:
          v198 = v114 + 15;
          goto LABEL_249;
        }
        v199 = *a8;
        if (v114 == v199)
        {
          v198 = 0;
LABEL_254:
          *(_DWORD *)v236 = result;
          *(_DWORD *)(v236 + 4) = v115 | (v161 << 25);
          v200 = *(unsigned int *)(a6 + 68);
          v201 = v200 + 16;
          if (v200 + 16 <= v198)
          {
            v203 = *(unsigned int *)(a6 + 64);
            v204 = v198 - v200 + (4 << v203) - 16;
            v205 = (__clz(v204) ^ 0x1F) - 1;
            v206 = ((v204 >> v205) & 1 | 2) << v205;
            v198 = ((v204 & ~(-1 << v203))
                  + v201
                  + ((((v204 >> v205) & 1 | (2 * (v205 - v203))) + 65534) << v203)) | ((v205 - v203) << 10);
            v202 = (v204 - v206) >> v203;
          }
          else
          {
            LODWORD(v202) = 0;
          }
          *(_WORD *)(v236 + 14) = v198;
          *(_DWORD *)(v236 + 8) = v202;
          if (result > 5)
          {
            if (result > 0x81)
            {
              if (result > 0x841)
              {
                if (result >> 1 >= 0xC21)
                {
                  if (result < 0x5842)
                    LOWORD(v207) = 22;
                  else
                    LOWORD(v207) = 23;
                }
                else
                {
                  LOWORD(v207) = 21;
                }
              }
              else
              {
                v207 = (__clz(result - 66) ^ 0x1F) + 10;
              }
            }
            else
            {
              v208 = (__clz(result - 2) ^ 0x1F) - 1;
              v207 = ((result - 2) >> v208) + 2 * v208 + 2;
            }
          }
          else
          {
            LOWORD(v207) = result;
          }
          v214 = v161 + (int)v115;
          if (v214 > 9)
          {
            if (v214 > 0x85)
            {
              if (v214 > 0x845)
                LOWORD(v215) = 23;
              else
                v215 = (__clz(v214 - 70) ^ 0x1F) + 12;
            }
            else
            {
              v216 = v214 - 6;
              v217 = (__clz(v216) ^ 0x1F) - 1;
              v215 = (v216 >> v217) + 2 * v217 + 4;
            }
          }
          else
          {
            LOWORD(v215) = v161 + v115 - 2;
          }
          v218 = v215 & 7 | (8 * (v207 & 7));
          if ((v198 & 0x3FF) != 0 || (unsigned __int16)v207 > 7u || (unsigned __int16)v215 > 0xFu)
          {
            v220 = 3 * ((unsigned __int16)v207 >> 3) + ((unsigned __int16)(v215 & 0xFFF8) >> 3);
            v219 = ((((0x520D40u >> (2 * v220)) & 0xC0) + (v220 << 6)) | v218) + 64;
          }
          else
          {
            LOWORD(v219) = v218 | 0x40;
            if ((v215 & 0xFFF8) == 0)
              LOWORD(v219) = v215 & 7 | (8 * (v207 & 7));
          }
          *(_WORD *)(v236 + 12) = v219;
          *a12 += result;
          v221 = v109 + 2;
          v181 = v109 + v115;
          if (v109 + v115 >= v234)
            v222 = v234;
          else
            v222 = v109 + v115;
          if (v114 < v115 >> 2)
          {
            v223 = v181 - 4 * v114;
            if (v221 > v223)
              v223 = v109 + 2;
            if (v222 >= v223)
              v221 = v223;
            else
              v221 = v222;
          }
          v19 = v233 + 2 * v115 + v109;
          v236 += 16;
          if (v221 >= v222)
          {
            v15 = 0;
LABEL_306:
            v14 = a10;
            v16 = v241;
            goto LABEL_307;
          }
          v224 = *(_QWORD *)(v244 + 96);
          v225 = *(_QWORD *)(v244 + 104);
          v226 = v224 + 0x20000;
          v186 = *(_WORD *)(v244 + 80);
          do
          {
            v227 = (506832829 * *(_DWORD *)(v261 + (v221 & a4))) >> 17;
            v228 = v221 - *(unsigned int *)(v224 + 4 * v227);
            *(_BYTE *)(v224 + 196608 + (unsigned __int16)v221) = v227;
            if (v228 >= 0xFFFF)
              LOWORD(v228) = -1;
            result = v225 + 4 * v186;
            *(_WORD *)result = v228;
            *(_WORD *)(result + 2) = *(_WORD *)(v226 + 2 * v227);
            *(_WORD *)(v226 + 2 * v227) = v186++;
            *(_DWORD *)(v224 + 4 * v227) = v221++;
          }
          while (v222 != v221);
          v15 = 0;
          goto LABEL_304;
        }
        v209 = a8[1];
        if (v114 == v209)
        {
          v198 = 1;
        }
        else
        {
          v210 = v114 + 3 - v199;
          if (v210 > 6)
          {
            v213 = v114 + 3 - v209;
            if (v213 > 6)
            {
              if (v114 == a8[2])
              {
                v198 = 2;
              }
              else
              {
                if (v114 != a8[3])
                  goto LABEL_248;
                v198 = 3;
              }
              goto LABEL_249;
            }
            v211 = 4 * v213;
            v212 = 266017486;
          }
          else
          {
            v211 = 4 * v210;
            v212 = 158663784;
          }
          v198 = (v212 >> v211) & 0xF;
        }
LABEL_249:
        if (v114 <= v247 + v232 && v198)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v114;
        }
        goto LABEL_254;
      }
LABEL_225:
      v15 = v256 + 1;
      v181 = v79 + 1;
      v19 = v262;
      if (v79 + 1 <= v262)
        goto LABEL_306;
      v16 = v241;
      result = 0xFFFFLL;
      if (v181 <= v262 + v231)
      {
        v191 = v230;
        if (v79 + 9 < v230)
          v191 = v79 + 9;
        if (v181 < v191)
        {
          v192 = *(_QWORD *)(v244 + 96);
          v193 = *(_QWORD *)(v244 + 104);
          v194 = v192 + 0x20000;
          v186 = *(_WORD *)(v244 + 80);
          do
          {
            v195 = (506832829 * *(_DWORD *)(v261 + (v181 & a4))) >> 17;
            v196 = v181 - *(unsigned int *)(v192 + 4 * v195);
            *(_BYTE *)(v192 + 196608 + (unsigned __int16)v181) = v195;
            if (v196 >= 0xFFFF)
              LOWORD(v196) = -1;
            v197 = (_WORD *)(v193 + 4 * v186);
            *v197 = v196;
            v197[1] = *(_WORD *)(v194 + 2 * v195);
            *(_WORD *)(v194 + 2 * v195) = v186++;
            *(_DWORD *)(v192 + 4 * v195) = v181;
            v15 += 2;
            v181 += 2;
          }
          while (v181 < v191);
          goto LABEL_304;
        }
      }
      else
      {
        v182 = v229;
        if (v79 + 17 < v229)
          v182 = v79 + 17;
        if (v181 < v182)
        {
          v183 = *(_QWORD *)(v244 + 96);
          v184 = *(_QWORD *)(v244 + 104);
          v185 = v183 + 0x20000;
          v186 = *(_WORD *)(v244 + 80);
          do
          {
            v187 = (506832829 * *(_DWORD *)(v261 + (v181 & a4))) >> 17;
            v188 = v181 - *(unsigned int *)(v183 + 4 * v187);
            *(_BYTE *)(v183 + 196608 + (unsigned __int16)v181) = v187;
            if (v188 >= 0xFFFF)
              LOWORD(v188) = -1;
            v189 = (_WORD *)(v184 + 4 * v186);
            *v189 = v188;
            v189[1] = *(_WORD *)(v185 + 2 * v187);
            *(_WORD *)(v185 + 2 * v187) = v186++;
            *(_DWORD *)(v183 + 4 * v187) = v181;
            v15 += 4;
            v181 += 4;
          }
          while (v181 < v182);
LABEL_304:
          v14 = a10;
          v16 = v241;
          *(_WORD *)(a7 + 80) = v186;
          goto LABEL_307;
        }
      }
      v14 = a10;
LABEL_307:
      a2 = v181;
      if (v181 + 4 >= v16)
        goto LABEL_314;
    }
  }
  v236 = a10;
  v181 = a2;
LABEL_314:
  *a9 = v15 + v16 - v181;
  *a11 += (v236 - v14) >> 4;
  return result;
}

unint64_t sub_2367978B0(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int16 v80;
  unint64_t v81;
  __int16 *v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unsigned __int16 *v157;
  unint64_t v158;
  __int16 v159;
  __int16 *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unsigned __int8 *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int16 v189;
  unsigned int v190;
  unint64_t v191;
  _WORD *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int32x4_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  _WORD *v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  unsigned int v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unint64_t v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  int v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;

  v12 = a10;
  v251 = *(_QWORD *)(a6 + 16);
  v13 = *a9;
  v14 = a2 + result;
  v15 = a2 + result - 3;
  v235 = v15;
  if (result <= 3)
    v15 = a2;
  v239 = v15;
  v16 = *(_DWORD *)(a6 + 8);
  v17 = 64;
  if (*(int *)(a6 + 4) >= 9)
    v17 = 512;
  v18 = *(_QWORD *)(a6 + 104);
  v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
  *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_2368AF3A0);
  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
  if (result >= 5)
  {
    v237 = v18;
    v249 = a7;
    v250 = (1 << v16) - 16;
    v20 = v17 + a2;
    v242 = a5 + 256;
    v243 = a5;
    v240 = v18 + 1;
    v236 = 4 * v17;
    v234 = v14 - 4;
    v21 = a10;
    v238 = v17;
    v247 = a2 + result;
    v248 = a6;
    v268 = a3;
    while (1)
    {
      v22 = a2 >= v250 ? v250 : a2;
      v23 = a2 + v251 >= v250 ? v250 : a2 + v251;
      v241 = v21;
      v261 = v20;
      v263 = v13;
      v258 = v23;
      if (*(_DWORD *)(a6 + 632))
        break;
      v26 = 0;
      v254 = 0;
LABEL_21:
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = v14 - a2;
      v255 = v26;
      v269 = *(_QWORD *)(a6 + 8 * v26 + 704);
      v266 = *(_QWORD *)(a6 + 80);
      v32 = *(_QWORD *)(a7 + 96);
      v33 = *(_QWORD *)(a7 + 104);
      v34 = v32 + 196608;
      v35 = a2 & a4;
      v36 = (unsigned __int8 *)(a3 + (a2 & a4));
      v37 = (506832829 * *(_DWORD *)v36) >> 17;
      result = (v14 - a2) >> 3;
      v256 = (v14 - a2) & 7;
      v252 = (v14 - a2) & 0xFFFFFFFFFFFFFFF8;
      v38 = 2020;
      v39 = 2020;
      v264 = v32;
      do
      {
        v40 = a8[v27];
        v41 = a2 - v40;
        if ((!v27 || *(unsigned __int8 *)(v34 + (unsigned __int16)(a2 - v40)) == v37)
          && v22 >= v40
          && v41 < a2)
        {
          v43 = a3 + (v41 & a4);
          if (v31 < 8)
          {
            v48 = 0;
            v49 = v36;
LABEL_43:
            if (v256)
            {
              v52 = a2;
              v53 = v256 | v48;
              v54 = v256;
              while (*(unsigned __int8 *)(v43 + v48) == *v49)
              {
                ++v49;
                ++v48;
                if (!--v54)
                {
                  v48 = v53;
                  break;
                }
              }
              a2 = v52;
              v32 = *(_QWORD *)(a7 + 96);
            }
          }
          else
          {
            v44 = 0;
            v45 = result;
            while (1)
            {
              v46 = *(_QWORD *)&v36[v44];
              v47 = *(_QWORD *)(v43 + v44);
              if (v46 != v47)
                break;
              v44 += 8;
              if (!--v45)
              {
                v48 = v252;
                v49 = &v36[v252];
                goto LABEL_43;
              }
            }
            v48 = v44 + (__clz(__rbit64(v47 ^ v46)) >> 3);
          }
          if (v48 >= 2)
          {
            v50 = 135 * v48 + 1935;
            if (v38 < v50)
            {
              v51 = v50 - (((0x1CA10u >> (v27 & 0xE)) & 0xE) + 39);
              if (!v27)
                v51 = 135 * v48 + 1935;
              if (v38 < v51)
              {
                v30 = a8[v27];
                v39 = v51;
                v29 = v48;
                v38 = v51;
                v28 = v48;
              }
            }
          }
        }
        ++v27;
      }
      while (v27 != 10);
      v55 = v32 + 0x20000;
      v56 = *(_QWORD *)(a7 + 88);
      v57 = a2;
      v58 = a2 - *(unsigned int *)(v32 + 4 * v37);
      if (v56)
      {
        v59 = 0;
        v60 = *(unsigned __int16 *)(v55 + 2 * v37);
        v61 = v58;
        v62 = v39;
        do
        {
          v59 += v61;
          if (v59 > v22)
            break;
          if (v28 + v35 <= a4)
          {
            v63 = (v57 - v59) & a4;
            if (v63 + v28 <= a4 && *(unsigned __int8 *)(v268 + v28 + v35) == *(unsigned __int8 *)(v268 + v63 + v28))
            {
              v64 = v268 + v63;
              if (v31 < 8)
              {
                v69 = 0;
                v70 = v36;
LABEL_78:
                v77 = v256;
                if (v256)
                {
                  v78 = v256 | v69;
                  while (*(unsigned __int8 *)(v64 + v69) == *v70)
                  {
                    ++v70;
                    ++v69;
                    if (!--v77)
                    {
                      v69 = v78;
                      break;
                    }
                  }
                }
              }
              else
              {
                v65 = 0;
                v66 = result;
                while (1)
                {
                  v67 = *(_QWORD *)&v36[v65];
                  v68 = *(_QWORD *)(v64 + v65);
                  if (v67 != v68)
                    break;
                  v65 += 8;
                  if (!--v66)
                  {
                    v69 = v252;
                    v70 = &v36[v252];
                    goto LABEL_78;
                  }
                }
                v69 = v65 + (__clz(__rbit64(v68 ^ v67)) >> 3);
              }
              v71 = 135 * v69 - 30 * (__clz(v59) ^ 0x1F) + 1920;
              if (v38 < v71)
                v72 = v59;
              else
                v72 = v30;
              if (v38 < v71)
                v73 = v71;
              else
                v73 = v62;
              if (v38 < v71)
                v74 = v69;
              else
                v74 = v29;
              if (v38 < v71)
              {
                v75 = v69;
              }
              else
              {
                v71 = v38;
                v75 = v28;
              }
              if (v69 >= 4)
              {
                v30 = v72;
                v62 = v73;
                v29 = v74;
                v38 = v71;
                v28 = v75;
              }
            }
          }
          v76 = (unsigned __int16 *)(v33 + 4 * v60);
          v60 = v76[1];
          v61 = *v76;
          --v56;
        }
        while (v56);
      }
      else
      {
        v62 = v39;
      }
      a7 = v249;
      v79 = *(unsigned __int16 *)(v249 + 80);
      *(_WORD *)(v249 + 80) = v79 + 1;
      *(_BYTE *)(v34 + (unsigned __int16)v57) = v37;
      v80 = -1;
      if (v58 < 0xFFFF)
        v80 = v58;
      v81 = v57;
      v82 = (__int16 *)(v33 + 4 * v79);
      *v82 = v80;
      v82[1] = *(_WORD *)(v55 + 2 * v37);
      *(_DWORD *)(v264 + 4 * v37) = v57;
      *(_WORD *)(v55 + 2 * v37) = v79;
      if (v62 == 2020)
      {
        v83 = *(_QWORD *)(v249 + 112);
        result = *(_QWORD *)(v83 + 40);
        v84 = *(_QWORD *)(v83 + 48);
        a6 = v248;
        a3 = v268;
        if (v84 < result >> 7)
          goto LABEL_221;
        v85 = 0;
        v86 = ((506832829 * *(_DWORD *)v36) >> 17) & 0x7FFE;
        v87 = (uint64_t *)v269;
        v88 = *(_QWORD *)(v269 + 32);
        v259 = v240 + v258;
        v89 = 1;
        v90 = v29;
        v265 = 2020;
        v91 = v30;
        do
        {
          v92 = v89;
          *(_QWORD *)(v83 + 40) = ++result;
          v93 = *(unsigned __int8 *)(v88 + v86);
          if (!*(_BYTE *)(v88 + v86) || v31 < v93)
            goto LABEL_101;
          v94 = *(unsigned __int16 *)(v87[3] + 2 * v86);
          v95 = *v87;
          v96 = *(unsigned int *)(*v87 + 4 * v93 + 32);
          v97 = *(_QWORD *)(v95 + 168);
          v98 = (unsigned __int8 *)(v97 + v96 + v94 * (unint64_t)*(unsigned __int8 *)(v88 + v86));
          if (v93 < 8)
          {
            v29 = 0;
LABEL_106:
            v105 = v93 & 7;
            if ((v93 & 7) != 0)
            {
              v106 = v29 | v105;
              while (v36[v29] == *v98)
              {
                ++v98;
                ++v29;
                if (!--v105)
                {
                  v29 = v106;
                  break;
                }
              }
            }
          }
          else
          {
            v99 = 0;
            v100 = (unsigned __int8 *)(v97
                                     + v94 * (unint64_t)*(unsigned __int8 *)(v88 + v86)
                                     + (*(_BYTE *)(v88 + v86) & 0xF8)
                                     + v96);
            while (1)
            {
              v101 = *(_QWORD *)&v98[v99];
              v102 = *(_QWORD *)&v36[v99];
              if (v101 != v102)
                break;
              v99 += 8;
              if ((v93 & 0xF8) == v99)
              {
                v98 = v100;
                v29 = v93 & 0xF8;
                goto LABEL_106;
              }
            }
            v29 = v99 + (__clz(__rbit64(v102 ^ v101)) >> 3);
          }
          v87 = (uint64_t *)v269;
          if (v29
            && v29 + *(unsigned int *)(v269 + 12) > v93
            && (v103 = v259
                     + v94
                     + ((((*(_QWORD *)(v269 + 16) >> (6 * (v93 - v29))) & 0x3FLL)
                       + 4 * (v93 - v29)) << *(_BYTE *)(v95 + v93)),
                v103 <= v266)
            && (v104 = 135 * v29 - 30 * (__clz(v103) ^ 0x1F) + 1920, v104 >= v265))
          {
            v85 = v93 - v29;
            *(_QWORD *)(v83 + 48) = ++v84;
            v265 = v104;
          }
          else
          {
LABEL_101:
            v103 = v91;
            v29 = v90;
          }
          v89 = 0;
          ++v86;
          v90 = v29;
          v91 = v103;
        }
        while ((v92 & 1) != 0);
      }
      else
      {
        v265 = v62;
        v85 = 0;
        a6 = v248;
        a3 = v268;
        v103 = v30;
      }
      v246 = v85;
      if (v265 >= 0x7E5)
      {
        v245 = v103;
        v107 = 0;
        v108 = *(unsigned __int16 *)(v249 + 80);
        while (1)
        {
          v257 = v107;
          --v31;
          v109 = v29 - 1;
          if (v29 - 1 >= v31)
            v109 = v31;
          if (*(int *)(a6 + 4) >= 5)
            v110 = 0;
          else
            v110 = v109;
          v111 = v81 + 1;
          v112 = v81;
          if (v81 + 1 < v250)
            v113 = v81 + 1;
          else
            v113 = v250;
          v114 = v111 + v251;
          if (v111 + v251 >= v250)
            v114 = v250;
          v253 = v114;
          v270 = v112;
          v244 = v29;
          v260 = v108;
          if (*(_DWORD *)(a6 + 632))
          {
            v115 = *(unsigned __int8 *)(a6
                                      + (*(_BYTE *)(v242 + v254) | *(_BYTE *)(v243
                                                                                             + *(unsigned __int8 *)(a3 + (v112 & a4))))
                                      + 637);
            v254 = *(unsigned __int8 *)(a3 + (v112 & a4));
          }
          else
          {
            v115 = v255;
          }
          v116 = 0;
          v117 = 0;
          v118 = 0;
          v255 = v115;
          v119 = *(_QWORD *)(a6 + 8 * v115 + 704);
          v120 = *(_QWORD *)(a7 + 104);
          v267 = *(_QWORD *)(a7 + 96);
          v121 = v267 + 196608;
          v122 = v111 & a4;
          v123 = (unsigned __int8 *)(a3 + (v111 & a4));
          v262 = *(_QWORD *)(a6 + 80);
          v124 = (506832829 * *(_DWORD *)v123) >> 17;
          v125 = 2020;
          v126 = 2020;
          do
          {
            v127 = a8[v116];
            v128 = v111 - v127;
            if ((!v116 || *(unsigned __int8 *)(v121 + (unsigned __int16)(v111 - v127)) == v124)
              && v113 >= v127
              && v128 < v111)
            {
              v130 = a3 + (v128 & a4);
              if (v31 < 8)
              {
                v131 = 0;
                v135 = (unsigned __int8 *)(a3 + (v111 & a4));
LABEL_150:
                v138 = v31 & 7;
                if ((v31 & 7) != 0)
                {
                  do
                  {
                    if (*(unsigned __int8 *)(v130 + v131) != *v135)
                      break;
                    ++v135;
                    ++v131;
                    --v138;
                  }
                  while (v138);
                }
              }
              else
              {
                v131 = 0;
                v132 = v31 >> 3;
                while (1)
                {
                  v133 = *(_QWORD *)&v123[v131];
                  v134 = *(_QWORD *)(v130 + v131);
                  if (v133 != v134)
                    break;
                  v131 += 8;
                  if (!--v132)
                  {
                    v135 = &v123[v131];
                    goto LABEL_150;
                  }
                }
                v131 += __clz(__rbit64(v134 ^ v133)) >> 3;
              }
              if (v131 >= 2)
              {
                v136 = 135 * v131 + 1935;
                if (v125 < v136)
                {
                  v137 = v136 - (((0x1CA10u >> (v116 & 0xE)) & 0xE) + 39);
                  if (!v116)
                    v137 = 135 * v131 + 1935;
                  if (v125 < v137)
                  {
                    v118 = v131;
                    v117 = a8[v116];
                    v126 = v137;
                    v125 = v137;
                    v110 = v131;
                  }
                }
              }
            }
            ++v116;
          }
          while (v116 != 10);
          v139 = v267 + 0x20000;
          v140 = *(_QWORD *)(a7 + 88);
          v141 = v111 - *(unsigned int *)(v267 + 4 * v124);
          if (v140)
          {
            v142 = 0;
            v143 = *(unsigned __int16 *)(v139 + 2 * v124);
            v144 = v111 - *(unsigned int *)(v267 + 4 * v124);
            do
            {
              v142 += v144;
              if (v142 > v113)
                break;
              if (v110 + v122 <= a4)
              {
                v145 = (v111 - v142) & a4;
                if (v145 + v110 <= a4
                  && *(unsigned __int8 *)(v268 + v110 + v122) == *(unsigned __int8 *)(v268 + v145 + v110))
                {
                  v146 = v268 + v145;
                  if (v31 < 8)
                  {
                    v147 = 0;
                    v151 = v123;
LABEL_183:
                    if ((v31 & 7) != 0)
                    {
                      v158 = v31 & 7;
                      do
                      {
                        if (*(unsigned __int8 *)(v146 + v147) != *v151)
                          break;
                        ++v151;
                        ++v147;
                        --v158;
                      }
                      while (v158);
                    }
                  }
                  else
                  {
                    v147 = 0;
                    v148 = v31 >> 3;
                    while (1)
                    {
                      v149 = *(_QWORD *)&v123[v147];
                      v150 = *(_QWORD *)(v146 + v147);
                      if (v149 != v150)
                        break;
                      v147 += 8;
                      if (!--v148)
                      {
                        v151 = &v123[v147];
                        goto LABEL_183;
                      }
                    }
                    v147 += __clz(__rbit64(v150 ^ v149)) >> 3;
                  }
                  v152 = 135 * v147 - 30 * (__clz(v142) ^ 0x1F) + 1920;
                  if (v125 < v152)
                    v153 = v147;
                  else
                    v153 = v118;
                  if (v125 < v152)
                    v154 = v142;
                  else
                    v154 = v117;
                  if (v125 < v152)
                    v155 = v152;
                  else
                    v155 = v126;
                  if (v125 < v152)
                  {
                    v156 = v147;
                  }
                  else
                  {
                    v152 = v125;
                    v156 = v110;
                  }
                  if (v147 >= 4)
                  {
                    v118 = v153;
                    v117 = v154;
                    v126 = v155;
                    v125 = v152;
                    v110 = v156;
                  }
                }
              }
              v157 = (unsigned __int16 *)(v120 + 4 * v143);
              v143 = v157[1];
              v144 = *v157;
              --v140;
            }
            while (v140);
          }
          result = (v260 + 1);
          a7 = v249;
          *(_WORD *)(v249 + 80) = v260 + 1;
          *(_BYTE *)(v121 + (unsigned __int16)v111) = v124;
          v159 = -1;
          if (v141 < 0xFFFF)
            v159 = v141;
          v160 = (__int16 *)(v120 + 4 * (unsigned __int16)v260);
          *v160 = v159;
          v160[1] = *(_WORD *)(v139 + 2 * v124);
          *(_DWORD *)(v267 + 4 * v124) = v111;
          *(_WORD *)(v139 + 2 * v124) = v260;
          if (v126 == 2020)
          {
            v161 = *(_QWORD *)(v249 + 112);
            v162 = *(_QWORD *)(v161 + 40);
            v163 = *(_QWORD *)(v161 + 48);
            v164 = v270;
            v165 = 0;
            if (v163 >= v162 >> 7)
            {
              v166 = ((506832829 * *(_DWORD *)v123) >> 17) & 0x7FFE;
              v167 = *(_QWORD *)(v119 + 32);
              v168 = 1;
              v126 = 2020;
              v169 = v117;
              v170 = v118;
              do
              {
                v171 = v168;
                *(_QWORD *)(v161 + 40) = ++v162;
                v172 = *(unsigned __int8 *)(v167 + v166);
                if (!*(_BYTE *)(v167 + v166) || v31 < v172)
                  goto LABEL_211;
                v173 = *(unsigned __int16 *)(*(_QWORD *)(v119 + 24) + 2 * v166);
                v174 = *(unsigned int *)(*(_QWORD *)v119 + 4 * v172 + 32);
                v175 = *(_QWORD *)(*(_QWORD *)v119 + 168);
                v176 = (unsigned __int8 *)(v175 + v174 + v173 * *(unsigned __int8 *)(v167 + v166));
                if (v172 < 8)
                {
                  v118 = 0;
LABEL_216:
                  v182 = v172 & 7;
                  if ((v172 & 7) != 0)
                  {
                    v183 = v118 | v182;
                    while (v123[v118] == *v176)
                    {
                      ++v176;
                      ++v118;
                      if (!--v182)
                      {
                        v118 = v183;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v177 = 0;
                  v118 = v172 & 0xF8;
                  v178 = (unsigned __int8 *)(v175
                                           + v173 * (unint64_t)*(unsigned __int8 *)(v167 + v166)
                                           + (*(_BYTE *)(v167 + v166) & 0xF8)
                                           + v174);
                  while (1)
                  {
                    v179 = *(_QWORD *)&v176[v177];
                    v180 = *(_QWORD *)&v123[v177];
                    if (v179 != v180)
                      break;
                    v177 += 8;
                    if (v118 == v177)
                    {
                      v176 = v178;
                      goto LABEL_216;
                    }
                  }
                  v118 = v177 + (__clz(__rbit64(v180 ^ v179)) >> 3);
                }
                v164 = v270;
                if (v118
                  && v118 + *(unsigned int *)(v119 + 12) > v172
                  && (v117 = v240
                           + v253
                           + v173
                           + ((((*(_QWORD *)(v119 + 16) >> (6 * (v172 - v118))) & 0x3FLL)
                             + 4 * (v172 - v118)) << *(_BYTE *)(*(_QWORD *)v119 + v172)),
                      v117 <= v262)
                  && (v181 = 135 * v118 - 30 * (__clz(v117) ^ 0x1F) + 1920, v181 >= v126))
                {
                  v165 = v172 - v118;
                  *(_QWORD *)(v161 + 48) = ++v163;
                  v126 = v181;
                }
                else
                {
LABEL_211:
                  v118 = v170;
                  v117 = v169;
                }
                v168 = 0;
                ++v166;
                v169 = v117;
                v170 = v118;
              }
              while ((v171 & 1) != 0);
            }
            else
            {
              v126 = 2020;
            }
          }
          else
          {
            v165 = 0;
            v164 = v270;
          }
          if (v126 < v265 + 175)
            break;
          ++v263;
          a6 = v248;
          a3 = v268;
          if (v257 <= 2)
          {
            v107 = v257 + 1;
            v108 = v260 + 1;
            v245 = v117;
            v265 = v126;
            v246 = v165;
            v29 = v118;
            v81 = v111;
            if (v164 + 5 < v247)
              continue;
          }
          goto LABEL_235;
        }
        v193 = v164 + v251;
        if (v164 + v251 >= v250)
          v193 = v250;
        v253 = v193;
        v118 = v244;
        v117 = v245;
        v165 = v246;
        v111 = v164;
        a6 = v248;
        a3 = v268;
LABEL_235:
        if (v117 > v253 + v237)
        {
LABEL_236:
          v194 = v117 + 15;
          goto LABEL_237;
        }
        v197 = *a8;
        if (v117 == v197)
        {
          v194 = 0;
          v12 = a10;
          v195 = v238;
LABEL_243:
          *(_DWORD *)v241 = v263;
          *(_DWORD *)(v241 + 4) = v118 | (v165 << 25);
          v198 = *(unsigned int *)(a6 + 68);
          v199 = v198 + 16;
          if (v198 + 16 <= v194)
          {
            v201 = *(unsigned int *)(a6 + 64);
            v202 = v194 - v198 + (4 << v201) - 16;
            v203 = (__clz(v202) ^ 0x1F) - 1;
            v204 = ((v202 >> v203) & 1 | 2) << v203;
            result = 65534;
            v194 = ((v202 & ~(-1 << v201))
                  + v199
                  + ((((v202 >> v203) & 1 | (2 * (v203 - v201))) + 65534) << v201)) | ((v203 - v201) << 10);
            v200 = (v202 - v204) >> v201;
          }
          else
          {
            LODWORD(v200) = 0;
          }
          *(_WORD *)(v241 + 14) = v194;
          *(_DWORD *)(v241 + 8) = v200;
          if (v263 > 5)
          {
            if (v263 > 0x81)
            {
              if (v263 > 0x841)
              {
                if (v263 >> 1 >= 0xC21)
                {
                  if (v263 < 0x5842)
                    LOWORD(v205) = 22;
                  else
                    LOWORD(v205) = 23;
                }
                else
                {
                  LOWORD(v205) = 21;
                }
              }
              else
              {
                v205 = (__clz(v263 - 66) ^ 0x1F) + 10;
              }
            }
            else
            {
              v206 = (__clz(v263 - 2) ^ 0x1F) - 1;
              v205 = ((v263 - 2) >> v206) + 2 * v206 + 2;
            }
          }
          else
          {
            LOWORD(v205) = v263;
          }
          v219 = v165 + (int)v118;
          if (v219 > 9)
          {
            if (v219 > 0x85)
            {
              if (v219 > 0x845)
                LOWORD(v220) = 23;
              else
                v220 = (__clz(v219 - 70) ^ 0x1F) + 12;
            }
            else
            {
              v221 = v219 - 6;
              v222 = (__clz(v221) ^ 0x1F) - 1;
              v220 = (v221 >> v222) + 2 * v222 + 4;
            }
          }
          else
          {
            LOWORD(v220) = v165 + v118 - 2;
          }
          v223 = v220 & 7 | (8 * (v205 & 7));
          if ((v194 & 0x3FF) != 0 || (unsigned __int16)v205 > 7u || (unsigned __int16)v220 > 0xFu)
          {
            v225 = 3 * ((unsigned __int16)v205 >> 3) + ((unsigned __int16)(v220 & 0xFFF8) >> 3);
            v224 = ((((0x520D40u >> (2 * v225)) & 0xC0) + (v225 << 6)) | v223) + 64;
          }
          else
          {
            LOWORD(v224) = v223 | 0x40;
            if ((v220 & 0xFFF8) == 0)
              LOWORD(v224) = v220 & 7 | (8 * (v205 & 7));
          }
          *(_WORD *)(v241 + 12) = v224;
          *a12 += v263;
          v226 = v111 + 2;
          v184 = v111 + v118;
          if (v111 + v118 >= v239)
            v227 = v239;
          else
            v227 = v111 + v118;
          if (v117 < v118 >> 2)
          {
            v228 = v184 - 4 * v117;
            if (v226 > v228)
              v228 = v111 + 2;
            if (v227 >= v228)
              v226 = v228;
            else
              v226 = v227;
          }
          v20 = v195 + 2 * v118 + v111;
          v21 = v241 + 16;
          if (v226 >= v227)
          {
            v13 = 0;
            a5 = v243;
            v14 = v247;
            goto LABEL_304;
          }
          v229 = *(_QWORD *)(v249 + 96);
          v230 = *(_QWORD *)(v249 + 104);
          v231 = v229 + 0x20000;
          v189 = *(_WORD *)(v249 + 80);
          do
          {
            v232 = (506832829 * *(_DWORD *)(a3 + (v226 & a4))) >> 17;
            v233 = v226 - *(unsigned int *)(v229 + 4 * v232);
            *(_BYTE *)(v229 + 196608 + (unsigned __int16)v226) = v232;
            if (v233 >= 0xFFFF)
              LOWORD(v233) = -1;
            result = v230 + 4 * v189;
            *(_WORD *)result = v233;
            *(_WORD *)(result + 2) = *(_WORD *)(v231 + 2 * v232);
            *(_WORD *)(v231 + 2 * v232) = v189++;
            *(_DWORD *)(v229 + 4 * v232) = v226++;
          }
          while (v227 != v226);
          v13 = 0;
          goto LABEL_302;
        }
        v214 = a8[1];
        v12 = a10;
        v195 = v238;
        if (v117 == v214)
        {
          v194 = 1;
        }
        else
        {
          v215 = v117 + 3 - v197;
          if (v215 > 6)
          {
            v218 = v117 + 3 - v214;
            if (v218 > 6)
            {
              if (v117 == a8[2])
              {
                v194 = 2;
              }
              else
              {
                if (v117 != a8[3])
                  goto LABEL_236;
                v194 = 3;
LABEL_237:
                v12 = a10;
                v195 = v238;
              }
              goto LABEL_238;
            }
            v216 = 4 * v218;
            v217 = 266017486;
          }
          else
          {
            v216 = 4 * v215;
            v217 = 158663784;
          }
          v194 = (v217 >> v216) & 0xF;
        }
LABEL_238:
        if (v117 <= v253 + v237 && v194)
        {
          a8[3] = a8[2];
          *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
          *a8 = v117;
          v196 = vdupq_n_s32(v117);
          *((int32x4_t *)a8 + 1) = vaddq_s32(v196, (int32x4_t)xmmword_2368AF3A0);
          *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v196.i8, (int32x2_t)0x3FFFFFFFDLL);
        }
        goto LABEL_243;
      }
LABEL_221:
      v20 = v261;
      v13 = v263 + 1;
      v184 = v81 + 1;
      if (v81 + 1 <= v261)
      {
        v12 = a10;
        a5 = v243;
        v14 = v247;
        v21 = v241;
      }
      else
      {
        v12 = a10;
        v14 = v247;
        result = 0xFFFFLL;
        v21 = v241;
        if (v184 <= v261 + v236)
        {
          v207 = v235;
          if (v81 + 9 < v235)
            v207 = v81 + 9;
          if (v184 < v207)
          {
            v208 = *(_QWORD *)(v249 + 96);
            v209 = *(_QWORD *)(v249 + 104);
            v210 = v208 + 0x20000;
            v189 = *(_WORD *)(v249 + 80);
            do
            {
              v211 = (506832829 * *(_DWORD *)(a3 + (v184 & a4))) >> 17;
              v212 = v184 - *(unsigned int *)(v208 + 4 * v211);
              *(_BYTE *)(v208 + 196608 + (unsigned __int16)v184) = v211;
              if (v212 >= 0xFFFF)
                LOWORD(v212) = -1;
              v213 = (_WORD *)(v209 + 4 * v189);
              *v213 = v212;
              v213[1] = *(_WORD *)(v210 + 2 * v211);
              *(_WORD *)(v210 + 2 * v211) = v189++;
              *(_DWORD *)(v208 + 4 * v211) = v184;
              v13 += 2;
              v184 += 2;
            }
            while (v184 < v207);
            goto LABEL_302;
          }
        }
        else
        {
          v185 = v234;
          if (v81 + 17 < v234)
            v185 = v81 + 17;
          if (v184 < v185)
          {
            v186 = *(_QWORD *)(v249 + 96);
            v187 = *(_QWORD *)(v249 + 104);
            v188 = v186 + 0x20000;
            v189 = *(_WORD *)(v249 + 80);
            do
            {
              v190 = (506832829 * *(_DWORD *)(a3 + (v184 & a4))) >> 17;
              v191 = v184 - *(unsigned int *)(v186 + 4 * v190);
              *(_BYTE *)(v186 + 196608 + (unsigned __int16)v184) = v190;
              if (v191 >= 0xFFFF)
                LOWORD(v191) = -1;
              v192 = (_WORD *)(v187 + 4 * v189);
              *v192 = v191;
              v192[1] = *(_WORD *)(v188 + 2 * v190);
              *(_WORD *)(v188 + 2 * v190) = v189++;
              *(_DWORD *)(v186 + 4 * v190) = v184;
              v13 += 4;
              v184 += 4;
            }
            while (v184 < v185);
LABEL_302:
            a5 = v243;
            v14 = v247;
            *(_WORD *)(a7 + 80) = v189;
            goto LABEL_304;
          }
        }
        a5 = v243;
      }
LABEL_304:
      a2 = v184;
      if (v184 + 4 >= v14)
        goto LABEL_311;
    }
    if (a2)
    {
      v24 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
      if (a2 != 1)
      {
        v25 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_20:
        v254 = v24;
        v26 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v242 + v25) | *(_BYTE *)(a5 + v24)) + 637);
        goto LABEL_21;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = 0;
    goto LABEL_20;
  }
  v21 = a10;
  v184 = a2;
LABEL_311:
  *a9 = v13 + v14 - v184;
  *a11 += (v21 - v12) >> 4;
  return result;
}

unint64_t sub_236798AE8(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8, double a9, double a10, int32x4_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, _QWORD *a15)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 *v79;
  unint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  __int16 *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unsigned __int16 *v160;
  unint64_t v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  __int16 *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unint64_t v181;
  unsigned __int8 *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  __int16 v195;
  uint64_t v196;
  unint64_t v197;
  _WORD *v198;
  __int16 v199;
  unint64_t v200;
  unint64_t v201;
  int32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  __int16 v218;
  uint64_t v219;
  unint64_t v220;
  _WORD *v221;
  __int16 v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  unsigned int v226;
  unint64_t v227;
  uint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  __int16 v241;
  uint64_t v242;
  unint64_t v243;
  _WORD *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;

  v15 = a13;
  v262 = *(_QWORD *)(a6 + 16);
  v272 = *a12;
  v16 = a2 + result;
  v17 = a2 + result - 3;
  v246 = v17;
  if (result <= 3)
    v17 = a2;
  v250 = v17;
  v18 = *(_DWORD *)(a6 + 8);
  v19 = 64;
  if (*(int *)(a6 + 4) >= 9)
    v19 = 512;
  v20 = *(_QWORD *)(a6 + 104);
  a11.i64[0] = *(_QWORD *)a8;
  v21 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)a8, 0), (int32x4_t)xmmword_2368AF3A0);
  v22 = vdupq_lane_s32(*(int32x2_t *)a8, 1);
  *((int32x4_t *)a8 + 1) = v21;
  *((int32x4_t *)a8 + 2) = vaddq_s32(vzip1q_s32(a11, a11), (int32x4_t)xmmword_2368AF3B0);
  v23 = vaddq_s32(v22, (int32x4_t)xmmword_2368AF3C0);
  *((int32x4_t *)a8 + 3) = v23;
  if (result < 5)
  {
    v252 = a13;
    v189 = a2;
    goto LABEL_311;
  }
  v248 = v20;
  v260 = a6;
  v261 = (1 << v18) - 16;
  v24 = v19 + a2;
  v252 = a13;
  v253 = a5 + 256;
  v251 = v20 + 1;
  v249 = v19;
  v247 = 4 * v19;
  v245 = v16 - 4;
  v254 = a5;
  v266 = a3;
  v257 = a2 + result;
  v259 = a7 + 10;
  do
  {
    if (a2 >= v261)
      v25 = v261;
    else
      v25 = a2;
    if (a2 + v262 >= v261)
      v26 = v261;
    else
      v26 = a2 + v262;
    v270 = v24;
    v274 = v26;
    if (!*(_DWORD *)(a6 + 632))
    {
      v29 = 0;
      v264 = 0;
      goto LABEL_21;
    }
    if (!a2)
    {
      v27 = 0;
LABEL_19:
      v28 = 0;
      goto LABEL_20;
    }
    v27 = *(unsigned __int8 *)(a3 + ((a2 - 1) & a4));
    if (a2 == 1)
      goto LABEL_19;
    v28 = *(unsigned __int8 *)(a3 + ((a2 - 2) & a4));
LABEL_20:
    v264 = v27;
    v29 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v253 + v28) | *(_BYTE *)(a5 + v27)) + 637);
LABEL_21:
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = v16 - a2;
    v265 = v29;
    v267 = *(_QWORD *)(a6 + 8 * v29 + 704);
    v280 = *(_QWORD *)(a6 + 80);
    result = a7[139];
    v35 = result + 196608;
    v36 = a7[140];
    v37 = a2 & a4;
    v38 = (unsigned __int8 *)(a3 + (a2 & a4));
    v39 = (506832829 * *(_DWORD *)v38) >> 17;
    v40 = 2020;
    v41 = 2020;
    do
    {
      v42 = a8[v30];
      v43 = a2 - v42;
      if ((!v30 || *(unsigned __int8 *)(v35 + (unsigned __int16)(a2 - v42)) == v39)
        && v25 >= v42
        && v43 < a2)
      {
        v45 = a3 + (v43 & a4);
        if (v34 < 8)
        {
          v50 = 0;
          v51 = (unsigned __int8 *)(a3 + (a2 & a4));
LABEL_43:
          if ((v34 & 7) != 0)
          {
            v54 = v36;
            v55 = v34 & 7 | v50;
            v56 = v34 & 7;
            while (*(unsigned __int8 *)(v45 + v50) == *v51)
            {
              ++v51;
              ++v50;
              if (!--v56)
              {
                v50 = v55;
                break;
              }
            }
            v36 = v54;
          }
        }
        else
        {
          v46 = 0;
          v47 = v34 >> 3;
          while (1)
          {
            v48 = *(_QWORD *)&v38[v46];
            v49 = *(_QWORD *)(v45 + v46);
            if (v48 != v49)
              break;
            v46 += 8;
            if (!--v47)
            {
              v50 = v34 & 0xFFFFFFFFFFFFFFF8;
              v51 = &v38[v34 & 0xFFFFFFFFFFFFFFF8];
              goto LABEL_43;
            }
          }
          v50 = v46 + (__clz(__rbit64(v49 ^ v48)) >> 3);
        }
        if (v50 >= 2)
        {
          v52 = 135 * v50 + 1935;
          if (v40 < v52)
          {
            v53 = v52 - (((0x1CA10u >> (v30 & 0xE)) & 0xE) + 39);
            if (!v30)
              v53 = 135 * v50 + 1935;
            if (v40 < v53)
            {
              v33 = a8[v30];
              v41 = v53;
              v32 = v50;
              v40 = v53;
              v31 = v50;
            }
          }
        }
      }
      ++v30;
    }
    while (v30 != 16);
    v57 = result + 0x20000;
    v58 = ((unsigned __int16)((506832829 * *(_DWORD *)v38) >> 16) >> 1) & 0x1FF;
    v59 = a7[138];
    v276 = v36;
    v278 = a7[139];
    v60 = *(unsigned int *)(result + 4 * v39);
    v61 = a2 - v60;
    if (v59)
    {
      v62 = 0;
      v63 = *(unsigned __int16 *)(v57 + 2 * v39);
      v64 = a2 - v60;
      v65 = v36 + (v58 << 11);
      do
      {
        v62 += v64;
        if (v62 > v25)
          break;
        if (v31 + v37 <= a4)
        {
          v66 = (a2 - v62) & a4;
          if (v66 + v31 <= a4)
          {
            result = v41;
            if (*(unsigned __int8 *)(v266 + v31 + v37) == *(unsigned __int8 *)(v266 + v66 + v31))
            {
              v67 = v266 + v66;
              if (v34 < 8)
              {
                v72 = 0;
                v73 = v38;
LABEL_79:
                if ((v34 & 7) != 0)
                {
                  result = v34 & 7 | v72;
                  v80 = v34 & 7;
                  while (*(unsigned __int8 *)(v67 + v72) == *v73)
                  {
                    ++v73;
                    ++v72;
                    if (!--v80)
                    {
                      v72 = result;
                      break;
                    }
                  }
                }
              }
              else
              {
                v68 = 0;
                v69 = v34 >> 3;
                while (1)
                {
                  v70 = *(_QWORD *)&v38[v68];
                  v71 = *(_QWORD *)(v67 + v68);
                  if (v70 != v71)
                    break;
                  v68 += 8;
                  if (!--v69)
                  {
                    v72 = v34 & 0xFFFFFFFFFFFFFFF8;
                    v73 = &v38[v34 & 0xFFFFFFFFFFFFFFF8];
                    goto LABEL_79;
                  }
                }
                v72 = v68 + (__clz(__rbit64(v71 ^ v70)) >> 3);
              }
              v74 = 135 * v72 - 30 * (__clz(v62) ^ 0x1F) + 1920;
              if (v40 < v74)
                v75 = v62;
              else
                v75 = v33;
              if (v40 < v74)
                v76 = v74;
              else
                v76 = v41;
              if (v40 < v74)
                v77 = v72;
              else
                v77 = v32;
              if (v40 < v74)
              {
                v78 = v72;
              }
              else
              {
                v74 = v40;
                v78 = v31;
              }
              if (v72 >= 4)
              {
                v33 = v75;
                v41 = v76;
                v32 = v77;
                v40 = v74;
                v31 = v78;
              }
            }
          }
        }
        v79 = (unsigned __int16 *)(v65 + 4 * v63);
        v63 = v79[1];
        v64 = *v79;
        --v59;
      }
      while (v59);
    }
    v81 = *((_WORD *)v259 + v58);
    *((_WORD *)v259 + v58) = v81 + 1;
    v82 = v81 & 0x1FF;
    *(_BYTE *)(v35 + (unsigned __int16)a2) = v39;
    if (v61 >= 0xFFFF)
      v83 = -1;
    else
      v83 = v61;
    v84 = (__int16 *)(v276 + (v58 << 11) + 4 * v82);
    *v84 = v83;
    v84[1] = *(_WORD *)(v57 + 2 * v39);
    *(_DWORD *)(v278 + 4 * v39) = a2;
    *(_WORD *)(v57 + 2 * v39) = v82;
    if (v41 == 2020)
    {
      v85 = a7[141];
      result = *(_QWORD *)(v85 + 40);
      v86 = *(_QWORD *)(v85 + 48);
      a3 = v266;
      if (v86 < result >> 7)
        goto LABEL_225;
      v258 = 0;
      v87 = ((506832829 * *(_DWORD *)v38) >> 17) & 0x7FFE;
      v88 = *(_QWORD *)(v267 + 32);
      v89 = v251 + v274;
      v90 = 1;
      v91 = v32;
      v275 = 2020;
      v92 = v33;
      v93 = v267;
      do
      {
        v94 = v90;
        *(_QWORD *)(v85 + 40) = ++result;
        v95 = *(unsigned __int8 *)(v88 + v87);
        if (!*(_BYTE *)(v88 + v87) || v34 < v95)
          goto LABEL_102;
        v96 = *(unsigned __int16 *)(*(_QWORD *)(v93 + 24) + 2 * v87);
        v97 = *(unsigned int *)(*(_QWORD *)v93 + 4 * v95 + 32);
        v98 = *(_QWORD *)(*(_QWORD *)v93 + 168);
        v99 = (unsigned __int8 *)(v98 + v97 + v96 * *(unsigned __int8 *)(v88 + v87));
        if (v95 < 8)
        {
          v101 = 0;
LABEL_107:
          v108 = v95 & 7;
          if ((v95 & 7) != 0)
          {
            v105 = v101 | v108;
            while (v38[v101] == *v99)
            {
              ++v99;
              ++v101;
              if (!--v108)
                goto LABEL_98;
            }
          }
          v105 = v101;
        }
        else
        {
          v100 = 0;
          v101 = v95 & 0xF8;
          v102 = (unsigned __int8 *)(v98
                                   + v96 * (unint64_t)*(unsigned __int8 *)(v88 + v87)
                                   + (*(_BYTE *)(v88 + v87) & 0xF8)
                                   + v97);
          while (1)
          {
            v103 = *(_QWORD *)&v99[v100];
            v104 = *(_QWORD *)&v38[v100];
            if (v103 != v104)
              break;
            v100 += 8;
            if (v101 == v100)
            {
              v99 = v102;
              goto LABEL_107;
            }
          }
          v105 = v100 + (__clz(__rbit64(v104 ^ v103)) >> 3);
        }
LABEL_98:
        if (v105
          && v105 + *(unsigned int *)(v93 + 12) > v95
          && (v106 = v89
                   + v96
                   + ((((*(_QWORD *)(v93 + 16) >> (6 * (v95 - v105))) & 0x3FLL)
                     + 4 * (v95 - v105)) << *(_BYTE *)(*(_QWORD *)v93 + v95)),
              v106 <= v280)
          && (v107 = 135 * v105 - 30 * (__clz(v106) ^ 0x1F) + 1920, v107 >= v275))
        {
          v32 = v105;
          v258 = v95 - v105;
          v93 = v267;
          *(_QWORD *)(v85 + 48) = ++v86;
          v275 = v107;
        }
        else
        {
LABEL_102:
          v106 = v92;
          v32 = v91;
        }
        v90 = 0;
        ++v87;
        v91 = v32;
        v92 = v106;
      }
      while ((v94 & 1) != 0);
    }
    else
    {
      v275 = v41;
      v258 = 0;
      a3 = v266;
      v106 = v33;
    }
    if (v275 < 0x7E5)
    {
LABEL_225:
      v24 = v270;
      v188 = v272 + 1;
      v189 = a2 + 1;
      a6 = v260;
      if (a2 + 1 > v270)
      {
        v15 = a13;
        v16 = v257;
        if (v189 <= v270 + v247)
        {
          v213 = a2 + 9;
          if (a2 + 9 >= v246)
            v213 = v246;
          if (v189 < v213)
          {
            v214 = a7[139];
            v215 = v214 + 0x20000;
            v216 = a7[140];
            do
            {
              v217 = (506832829 * *(_DWORD *)(a3 + (v189 & a4))) >> 17;
              v218 = *((_WORD *)v259 + (v217 & 0x1FF));
              *((_WORD *)v259 + (v217 & 0x1FF)) = v218 + 1;
              v219 = v218 & 0x1FF;
              v220 = v189 - *(unsigned int *)(v214 + 4 * v217);
              result = (unsigned __int16)v189;
              *(_BYTE *)(v214 + 196608 + (unsigned __int16)v189) = v217;
              if (v220 >= 0xFFFF)
                LOWORD(v220) = -1;
              v221 = (_WORD *)(v216 + ((unint64_t)(v217 & 0x1FF) << 11) + 4 * v219);
              *v221 = v220;
              v222 = *(_WORD *)(v215 + 2 * v217);
              *(_DWORD *)(v214 + 4 * v217) = v189;
              v221[1] = v222;
              *(_WORD *)(v215 + 2 * v217) = v219;
              v188 += 2;
              v189 += 2;
            }
            while (v189 < v213);
            goto LABEL_259;
          }
        }
        else
        {
          v190 = a2 + 17;
          if (a2 + 17 >= v245)
            v190 = v245;
          if (v189 < v190)
          {
            v191 = a7[139];
            v192 = v191 + 0x20000;
            v193 = a7[140];
            do
            {
              v194 = (506832829 * *(_DWORD *)(a3 + (v189 & a4))) >> 17;
              v195 = *((_WORD *)v259 + (v194 & 0x1FF));
              *((_WORD *)v259 + (v194 & 0x1FF)) = v195 + 1;
              v196 = v195 & 0x1FF;
              v197 = v189 - *(unsigned int *)(v191 + 4 * v194);
              result = (unsigned __int16)v189;
              *(_BYTE *)(v191 + 196608 + (unsigned __int16)v189) = v194;
              if (v197 >= 0xFFFF)
                LOWORD(v197) = -1;
              v198 = (_WORD *)(v193 + ((unint64_t)(v194 & 0x1FF) << 11) + 4 * v196);
              *v198 = v197;
              v199 = *(_WORD *)(v192 + 2 * v194);
              *(_DWORD *)(v191 + 4 * v194) = v189;
              v198[1] = v199;
              *(_WORD *)(v192 + 2 * v194) = v196;
              v188 += 4;
              v189 += 4;
            }
            while (v189 < v190);
            goto LABEL_259;
          }
        }
        ++v272;
        a5 = v254;
        goto LABEL_304;
      }
LABEL_259:
      v272 = v188;
      goto LABEL_302;
    }
    v109 = 0;
    a6 = v260;
    v110 = v272;
    while (1)
    {
      v268 = v109;
      --v34;
      v111 = v32 - 1;
      if (v32 - 1 >= v34)
        v111 = v34;
      if (*(int *)(a6 + 4) >= 5)
        v112 = 0;
      else
        v112 = v111;
      v113 = a2 + 1;
      if (a2 + 1 < v261)
        v114 = a2 + 1;
      else
        v114 = v261;
      v115 = v113 + v262;
      if (v113 + v262 >= v261)
        v115 = v261;
      v263 = v115;
      v281 = a2;
      v273 = v110;
      v255 = v106;
      v256 = v32;
      if (*(_DWORD *)(a6 + 632))
      {
        v116 = *(unsigned __int8 *)(a6
                                  + (*(_BYTE *)(v253 + v264) | *(_BYTE *)(v254
                                                                                         + *(unsigned __int8 *)(a3 + (a2 & a4))))
                                  + 637);
        v264 = *(unsigned __int8 *)(a3 + (a2 & a4));
        v117 = a7;
      }
      else
      {
        v117 = a7;
        v116 = v265;
      }
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v265 = v116;
      v121 = *(_QWORD *)(a6 + 8 * v116 + 704);
      v271 = *(_QWORD *)(a6 + 80);
      v279 = v117[139];
      v122 = v279 + 196608;
      v123 = v113 & a4;
      v124 = (unsigned __int8 *)(a3 + (v113 & a4));
      v277 = v117[140];
      v125 = (506832829 * *(_DWORD *)v124) >> 17;
      v126 = 2020;
      v127 = 2020;
      do
      {
        v128 = a8[v118];
        v129 = v113 - v128;
        if ((!v118 || *(unsigned __int8 *)(v122 + (unsigned __int16)(v113 - v128)) == v125)
          && v114 >= v128
          && v129 < v113)
        {
          v131 = a3 + (v129 & a4);
          if (v34 < 8)
          {
            v132 = 0;
            v136 = (unsigned __int8 *)(a3 + (v113 & a4));
LABEL_151:
            v138 = v34 & 7;
            if ((v34 & 7) != 0)
            {
              do
              {
                if (*(unsigned __int8 *)(v131 + v132) != *v136)
                  break;
                ++v136;
                ++v132;
                --v138;
              }
              while (v138);
            }
          }
          else
          {
            v132 = 0;
            v133 = v34 >> 3;
            while (1)
            {
              v134 = *(_QWORD *)&v124[v132];
              v135 = *(_QWORD *)(v131 + v132);
              if (v134 != v135)
                break;
              v132 += 8;
              if (!--v133)
              {
                v136 = &v124[v132];
                goto LABEL_151;
              }
            }
            v132 += __clz(__rbit64(v135 ^ v134)) >> 3;
          }
          if (v132 >= 2)
          {
            v137 = 135 * v132 + 1935;
            if (v126 < v137)
            {
              if (v118)
                v137 -= ((0x1CA10u >> (v118 & 0xE)) & 0xE) + 39;
              if (v126 < v137)
              {
                v120 = v132;
                v119 = a8[v118];
                v127 = v137;
                v126 = v137;
                v112 = v132;
              }
            }
          }
        }
        ++v118;
      }
      while (v118 != 16);
      v139 = v279 + 0x20000;
      v140 = ((unsigned __int16)((506832829 * *(_DWORD *)v124) >> 16) >> 1) & 0x1FF;
      v141 = v117[138];
      v142 = *(unsigned int *)(v279 + 4 * v125);
      v143 = v113 - v142;
      if (v141)
      {
        v144 = 0;
        v145 = *(unsigned __int16 *)(v139 + 2 * v125);
        v146 = v113 - v142;
        v147 = v121;
        do
        {
          v144 += v146;
          if (v144 > v114)
            break;
          if (v112 + v123 <= a4)
          {
            v148 = (v113 - v144) & a4;
            if (v148 + v112 <= a4 && *(unsigned __int8 *)(a3 + v112 + v123) == *(unsigned __int8 *)(a3 + v148 + v112))
            {
              v149 = a3 + v148;
              if (v34 < 8)
              {
                v150 = 0;
                v154 = v124;
LABEL_185:
                if ((v34 & 7) != 0)
                {
                  v161 = v34 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v149 + v150) != *v154)
                      break;
                    ++v154;
                    ++v150;
                    --v161;
                  }
                  while (v161);
                }
              }
              else
              {
                v150 = 0;
                v151 = v34 >> 3;
                while (1)
                {
                  v152 = *(_QWORD *)&v124[v150];
                  v153 = *(_QWORD *)(v149 + v150);
                  if (v152 != v153)
                    break;
                  v150 += 8;
                  if (!--v151)
                  {
                    v154 = &v124[v150];
                    goto LABEL_185;
                  }
                }
                v150 += __clz(__rbit64(v153 ^ v152)) >> 3;
              }
              v155 = 135 * v150 - 30 * (__clz(v144) ^ 0x1F) + 1920;
              if (v126 < v155)
                v156 = v150;
              else
                v156 = v120;
              if (v126 < v155)
                v157 = v144;
              else
                v157 = v119;
              if (v126 < v155)
                v158 = v155;
              else
                v158 = v127;
              if (v126 < v155)
              {
                v159 = v150;
              }
              else
              {
                v155 = v126;
                v159 = v112;
              }
              if (v150 >= 4)
              {
                v120 = v156;
                v119 = v157;
                v127 = v158;
                v126 = v155;
                v112 = v159;
              }
              a3 = v266;
            }
          }
          v160 = (unsigned __int16 *)(v277 + (v140 << 11) + 4 * v145);
          v145 = v160[1];
          v146 = *v160;
          --v141;
        }
        while (v141);
      }
      else
      {
        v147 = v121;
      }
      v162 = *((_WORD *)v259 + v140);
      *((_WORD *)v259 + v140) = v162 + 1;
      v163 = v162 & 0x1FF;
      *(_BYTE *)(v122 + (unsigned __int16)v113) = v125;
      v164 = -1;
      if (v143 < 0xFFFF)
        v164 = v143;
      v165 = (__int16 *)(v277 + (v140 << 11) + 4 * v163);
      *v165 = v164;
      v165[1] = *(_WORD *)(v139 + 2 * v125);
      *(_DWORD *)(v279 + 4 * v125) = v113;
      *(_WORD *)(v139 + 2 * v125) = v163;
      if (v127 == 2020)
      {
        v166 = a7[141];
        v167 = *(_QWORD *)(v166 + 40);
        v168 = *(_QWORD *)(v166 + 48);
        v169 = v281;
        result = 0;
        if (v168 < v167 >> 7)
        {
          v127 = 2020;
          goto LABEL_197;
        }
        v170 = ((506832829 * *(_DWORD *)v124) >> 17) & 0x7FFE;
        v171 = *(_QWORD *)(v147 + 32);
        v172 = 1;
        v127 = 2020;
        v173 = v119;
        v174 = v120;
        while (1)
        {
          v175 = v172;
          *(_QWORD *)(v166 + 40) = ++v167;
          v176 = *(unsigned __int8 *)(v171 + v170);
          if (*(_BYTE *)(v171 + v170) && v34 >= v176)
          {
            v177 = *(unsigned __int16 *)(*(_QWORD *)(v147 + 24) + 2 * v170);
            v178 = *(unsigned int *)(*(_QWORD *)v147 + 4 * v176 + 32);
            v179 = *(_QWORD *)(*(_QWORD *)v147 + 168);
            v180 = (unsigned __int8 *)(v179 + v178 + v177 * *(unsigned __int8 *)(v171 + v170));
            if (v176 < 8)
            {
              v120 = 0;
LABEL_220:
              v186 = v176 & 7;
              if ((v176 & 7) != 0)
              {
                v187 = v120 | v186;
                while (v124[v120] == *v180)
                {
                  ++v180;
                  ++v120;
                  if (!--v186)
                  {
                    v120 = v187;
                    break;
                  }
                }
              }
            }
            else
            {
              v181 = 0;
              v120 = v176 & 0xF8;
              v182 = (unsigned __int8 *)(v179
                                       + v177 * (unint64_t)*(unsigned __int8 *)(v171 + v170)
                                       + (*(_BYTE *)(v171 + v170) & 0xF8)
                                       + v178);
              while (1)
              {
                v183 = *(_QWORD *)&v180[v181];
                v184 = *(_QWORD *)&v124[v181];
                if (v183 != v184)
                  break;
                v181 += 8;
                if (v120 == v181)
                {
                  v180 = v182;
                  goto LABEL_220;
                }
              }
              v120 = v181 + (__clz(__rbit64(v184 ^ v183)) >> 3);
            }
            if (!v120
              || v120 + *(unsigned int *)(v147 + 12) <= v176
              || (v119 = v251
                       + v263
                       + v177
                       + ((((*(_QWORD *)(v147 + 16) >> (6 * (v176 - v120))) & 0x3FLL)
                         + 4 * (v176 - v120)) << *(_BYTE *)(*(_QWORD *)v147 + v176)),
                  v119 > v271))
            {
              v120 = v174;
              v119 = v173;
              v169 = v281;
              goto LABEL_215;
            }
            v185 = __clz(v119);
            v169 = v281;
            if (135 * v120 - 30 * (v185 ^ 0x1F) + 1920 >= v127)
            {
              result = (v176 - v120);
              *(_QWORD *)(v166 + 48) = ++v168;
              v127 = 135 * v120 - 30 * (v185 ^ 0x1F) + 1920;
              goto LABEL_215;
            }
          }
          v120 = v174;
          v119 = v173;
LABEL_215:
          v172 = 0;
          ++v170;
          v173 = v119;
          v174 = v120;
          if ((v175 & 1) == 0)
            goto LABEL_197;
        }
      }
      result = 0;
      v169 = v281;
LABEL_197:
      if (v127 < v275 + 175)
        break;
      v110 = v273 + 1;
      a6 = v260;
      if (v268 <= 2)
      {
        v109 = v268 + 1;
        v106 = v119;
        v275 = v127;
        v258 = result;
        v32 = v120;
        a2 = v113;
        if (v169 + 5 < v257)
          continue;
      }
      goto LABEL_238;
    }
    v200 = v169 + v262;
    if (v169 + v262 >= v261)
      v200 = v261;
    v263 = v200;
    v119 = v255;
    v120 = v256;
    result = v258;
    v113 = v169;
    a6 = v260;
    v110 = v273;
LABEL_238:
    if (v119 > v263 + v248)
    {
LABEL_239:
      v201 = v119 + 15;
      goto LABEL_240;
    }
    v203 = *a8;
    if (v119 == v203)
    {
      v201 = 0;
      goto LABEL_245;
    }
    v223 = a8[1];
    if (v119 == v223)
    {
      v201 = 1;
    }
    else
    {
      v224 = v119 + 3 - v203;
      if (v224 > 6)
      {
        v227 = v119 + 3 - v223;
        if (v227 > 6)
        {
          if (v119 == a8[2])
          {
            v201 = 2;
          }
          else
          {
            if (v119 != a8[3])
              goto LABEL_239;
            v201 = 3;
          }
          goto LABEL_240;
        }
        v225 = 4 * v227;
        v226 = 266017486;
      }
      else
      {
        v225 = 4 * v224;
        v226 = 158663784;
      }
      v201 = (v226 >> v225) & 0xF;
    }
LABEL_240:
    if (v119 <= v263 + v248 && v201)
    {
      a8[3] = a8[2];
      v23.i64[0] = *(_QWORD *)a8;
      *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
      *a8 = v119;
      v21.i32[0] = v119;
      v202 = vzip1q_s32(v21, v23);
      v21 = vaddq_s32(vzip1q_s32(v202, v202), (int32x4_t)xmmword_2368AF3B0);
      *((int32x4_t *)a8 + 1) = vaddq_s32(vdupq_n_s32(v119), (int32x4_t)xmmword_2368AF3A0);
      *((int32x4_t *)a8 + 2) = v21;
      v23 = vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v23.i8, 0), (int32x4_t)xmmword_2368AF3C0);
      *((int32x4_t *)a8 + 3) = v23;
    }
LABEL_245:
    *(_DWORD *)v252 = v110;
    *(_DWORD *)(v252 + 4) = v120 | ((_DWORD)result << 25);
    v204 = *(unsigned int *)(a6 + 68);
    v205 = v204 + 16;
    if (v204 + 16 <= v201)
    {
      v207 = *(unsigned int *)(a6 + 64);
      v208 = v201 - v204 + (4 << v207) - 16;
      v209 = (__clz(v208) ^ 0x1F) - 1;
      v210 = ((v208 >> v209) & 1 | 2) << v209;
      v201 = ((v208 & ~(-1 << v207))
            + v205
            + ((((v208 >> v209) & 1 | (2 * (v209 - v207))) + 65534) << v207)) | ((v209 - v207) << 10);
      v206 = (v208 - v210) >> v207;
    }
    else
    {
      LODWORD(v206) = 0;
    }
    *(_WORD *)(v252 + 14) = v201;
    *(_DWORD *)(v252 + 8) = v206;
    if (v110 > 5)
    {
      if (v110 > 0x81)
      {
        if (v110 > 0x841)
        {
          if (v110 >> 1 >= 0xC21)
          {
            if (v110 < 0x5842)
              LOWORD(v211) = 22;
            else
              LOWORD(v211) = 23;
          }
          else
          {
            LOWORD(v211) = 21;
          }
        }
        else
        {
          v211 = (__clz(v110 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v212 = (__clz(v110 - 2) ^ 0x1F) - 1;
        v211 = ((v110 - 2) >> v212) + 2 * v212 + 2;
      }
    }
    else
    {
      LOWORD(v211) = v110;
    }
    v228 = (int)result + (int)v120;
    if (v228 > 9)
    {
      if (v228 > 0x85)
      {
        if (v228 > 0x845)
          LOWORD(v229) = 23;
        else
          v229 = (__clz(v228 - 70) ^ 0x1F) + 12;
      }
      else
      {
        v230 = v228 - 6;
        v231 = (__clz(v230) ^ 0x1F) - 1;
        v229 = (v230 >> v231) + 2 * v231 + 4;
      }
    }
    else
    {
      LOWORD(v229) = result + v120 - 2;
    }
    v232 = v229 & 7 | (8 * (v211 & 7));
    if ((v201 & 0x3FF) != 0 || (unsigned __int16)v211 > 7u || (unsigned __int16)v229 > 0xFu)
    {
      v234 = 3 * ((unsigned __int16)v211 >> 3) + ((unsigned __int16)(v229 & 0xFFF8) >> 3);
      v233 = ((((0x520D40u >> (2 * v234)) & 0xC0) + (v234 << 6)) | v232) + 64;
    }
    else
    {
      LOWORD(v233) = v232 | 0x40;
      if ((v229 & 0xFFF8) == 0)
        LOWORD(v233) = v229 & 7 | (8 * (v211 & 7));
    }
    *(_WORD *)(v252 + 12) = v233;
    *a15 += v110;
    v235 = v113 + 2;
    v189 = v113 + v120;
    v236 = v250;
    if (v113 + v120 < v250)
      v236 = v113 + v120;
    if (v119 < v120 >> 2)
    {
      if (v235 <= v189 - 4 * v119)
        v235 = v189 - 4 * v119;
      if (v236 < v235)
        v235 = v236;
    }
    v24 = v249 + 2 * v120 + v113;
    v252 += 16;
    if (v235 >= v236)
    {
      v272 = 0;
      v15 = a13;
      a5 = v254;
      v16 = v257;
    }
    else
    {
      v237 = a7[139];
      v238 = v237 + 0x20000;
      v239 = a7[140];
      do
      {
        v240 = (506832829 * *(_DWORD *)(a3 + (v235 & a4))) >> 17;
        v241 = *((_WORD *)v259 + (v240 & 0x1FF));
        *((_WORD *)v259 + (v240 & 0x1FF)) = v241 + 1;
        v242 = v241 & 0x1FF;
        v243 = v235 - *(unsigned int *)(v237 + 4 * v240);
        *(_BYTE *)(v237 + 196608 + (unsigned __int16)v235) = v240;
        if (v243 >= 0xFFFF)
          LOWORD(v243) = -1;
        v244 = (_WORD *)(v239 + ((unint64_t)(v240 & 0x1FF) << 11) + 4 * v242);
        *v244 = v243;
        result = *(unsigned __int16 *)(v238 + 2 * v240);
        v244[1] = result;
        *(_DWORD *)(v237 + 4 * v240) = v235;
        *(_WORD *)(v238 + 2 * v240) = v242;
        ++v235;
      }
      while (v236 != v235);
      v272 = 0;
LABEL_302:
      v15 = a13;
      a5 = v254;
      v16 = v257;
    }
LABEL_304:
    a2 = v189;
  }
  while (v189 + 4 < v16);
LABEL_311:
  *a12 = v272 + v16 - v189;
  *a14 += (v252 - v15) >> 4;
  return result;
}

unint64_t sub_236799DD8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *i, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64x2_t v65;
  int8x16_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  unsigned int v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int8x16_t v130;
  int8x16_t v131;
  uint64_t v132;

  v11 = a2;
  v132 = *MEMORY[0x24BDAC8D0];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v117 = v14;
  if (result <= 7)
    v14 = a2;
  v121 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (result >= 9)
  {
    v120 = v15;
    v127 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v118 = *(_QWORD *)(a5 + 104);
    v119 = *(_QWORD *)(a5 + 16);
    v16 = v15 + a2;
    v17 = *(_QWORD *)(a6 + 88);
    v116 = 4 * v15;
    v18 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
    v122 = a9;
    v123 = i;
    v124 = a2 + result;
    v125 = a5;
    while (1)
    {
      v19 = v13 - v11;
      if (v11 >= v127)
        v20 = v127;
      else
        v20 = v11;
      v21 = v11 & a4;
      v22 = (_QWORD *)(a3 + (v11 & a4));
      v23 = *(unsigned __int8 *)v22;
      v24 = *i;
      if (v11 < v24)
        goto LABEL_22;
      v25 = (unsigned __int8 *)(a3 + (a4 & (v11 - v24)));
      if (v23 != *v25)
        goto LABEL_22;
      v128 = *i;
      if (v19 < 8)
      {
        v27 = 0;
        v28 = (unsigned __int8 *)(a3 + (v11 & a4));
LABEL_183:
        v113 = v19 & 7;
        if ((v19 & 7) != 0)
        {
          v114 = v27 | v113;
          while (v25[v27] == *v28)
          {
            ++v28;
            ++v27;
            if (!--v113)
            {
              v27 = v114;
              break;
            }
          }
        }
      }
      else
      {
        v26 = 0;
        v27 = v19 & 0xFFFFFFFFFFFFFFF8;
        v28 = (unsigned __int8 *)(a3 + v21 + (v19 & 0xFFFFFFFFFFFFFFF8));
        v29 = v19 >> 3;
        while (1)
        {
          v30 = v22[v26];
          v31 = *(_QWORD *)&v25[v26 * 8];
          if (v30 != v31)
            break;
          ++v26;
          if (!--v29)
            goto LABEL_183;
        }
        v27 = v26 * 8 + (__clz(__rbit64(v31 ^ v30)) >> 3);
      }
      if (v27 >= 4 && (v32 = 135 * v27 + 1935, v32 >= 0x7E5))
      {
        v33 = v16;
        v23 = *(unsigned __int8 *)(a3 + v27 + v21);
      }
      else
      {
LABEL_22:
        v33 = v16;
        v128 = 0;
        v27 = 0;
        v32 = 2020;
      }
      v34 = 0;
      v35 = vdupq_n_s64((unint64_t)(0x35A7BD1E35A7BD00 * *v22) >> 44);
      v130 = vandq_s8((int8x16_t)vaddq_s64(v35, (int64x2_t)xmmword_2368AF3D0), v18);
      v131 = vandq_s8((int8x16_t)vaddq_s64(v35, (int64x2_t)xmmword_2368AF3E0), v18);
      do
      {
        v36 = *(unsigned int *)(v17 + 4 * v130.i64[v34]);
        v37 = v11 - v36;
        result = *(unsigned __int8 *)(a3 + (v36 & a4) + v27);
        if (v23 == (_DWORD)result && v11 != v36 && v37 <= v20)
        {
          result = a3 + (v36 & a4);
          if (v19 < 8)
          {
            v44 = 0;
            v45 = (unsigned __int8 *)(a3 + (v11 & a4));
LABEL_43:
            v46 = v19 & 7;
            if ((v19 & 7) != 0)
            {
              v47 = v19 & 7 | v44;
              while (*(unsigned __int8 *)(result + v44) == *v45)
              {
                ++v45;
                ++v44;
                if (!--v46)
                {
                  v44 = v47;
                  break;
                }
              }
              v13 = v124;
              a5 = v125;
            }
          }
          else
          {
            v40 = 0;
            v41 = v19 >> 3;
            while (1)
            {
              v42 = v22[v40];
              v43 = *(_QWORD *)(result + v40 * 8);
              if (v42 != v43)
                break;
              ++v40;
              if (!--v41)
              {
                v44 = v19 & 0xFFFFFFFFFFFFFFF8;
                v45 = (unsigned __int8 *)v22 + (v19 & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_43;
              }
            }
            v44 = v40 * 8 + (__clz(__rbit64(v43 ^ v42)) >> 3);
          }
          if (v44 >= 4)
          {
            result = 30 * (__clz(v37) ^ 0x1F);
            if (v32 < 135 * v44 - result + 1920)
            {
              v23 = *(unsigned __int8 *)(a3 + v44 + v21);
              v128 = v37;
              v32 = 135 * v44 - result + 1920;
              v27 = v44;
            }
          }
        }
        ++v34;
      }
      while (v34 != 4);
      *(_DWORD *)(v17 + 4 * *(uint64_t *)((char *)v130.i64 + (v11 & 0x18))) = v11;
      if (v32 < 0x7E5)
      {
        ++v12;
        v82 = v11 + 1;
        v16 = v33;
        if (v11 + 1 <= v33)
        {
          i = v123;
        }
        else if (v82 <= v33 + v116)
        {
          v97 = v11 + 9;
          if (v11 + 9 >= v117)
            v97 = v117;
          for (i = v123; v82 < v97; v82 += 2)
          {
            *(_DWORD *)(v17
                      + 4
                      * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v82 & a4))) >> 32) >> 12)
                        + (v82 & 0x18)) & 0xFFFFF)) = v82;
            v12 += 2;
          }
        }
        else
        {
          v83 = v11 + 17;
          if (v11 + 17 >= v117)
            v83 = v117;
          for (i = v123; v82 < v83; v82 += 4)
          {
            *(_DWORD *)(v17
                      + 4
                      * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v82 & a4))) >> 32) >> 12)
                        + (v82 & 0x18)) & 0xFFFFF)) = v82;
            v12 += 4;
          }
        }
        goto LABEL_176;
      }
      v48 = 0;
      v126 = *v123;
      while (1)
      {
        --v19;
        v49 = v27 - 1;
        if (v27 - 1 >= v19)
          v49 = v19;
        if (*(int *)(a5 + 4) >= 5)
          v49 = 0;
        v50 = v11 + 1;
        v51 = v11 + 1 < v127 ? v11 + 1 : v127;
        v52 = v50 & a4;
        v53 = *(unsigned __int8 *)(a3 + v49 + (v50 & a4));
        v54 = (_QWORD *)(a3 + (v50 & a4));
        v129 = v12;
        if (v50 - v126 >= v50)
        {
          v62 = 0;
          v63 = 2020;
        }
        else
        {
          v55 = a4 & (v50 - v126);
          if (v53 != *(unsigned __int8 *)(a3 + v55 + v49))
            goto LABEL_70;
          v56 = a3 + v55;
          if (v19 < 8)
          {
            v57 = 0;
            v61 = (unsigned __int8 *)(a3 + (v50 & a4));
LABEL_102:
            v81 = v19 & 7;
            if ((v19 & 7) != 0)
            {
              do
              {
                if (*(unsigned __int8 *)(v56 + v57) != *v61)
                  break;
                ++v61;
                ++v57;
                --v81;
              }
              while (v81);
            }
          }
          else
          {
            v57 = 0;
            v58 = v19 >> 3;
            while (1)
            {
              v59 = *(_QWORD *)((char *)v54 + v57);
              v60 = *(_QWORD *)(v56 + v57);
              if (v59 != v60)
                break;
              v57 += 8;
              if (!--v58)
              {
                v61 = (unsigned __int8 *)v54 + v57;
                goto LABEL_102;
              }
            }
            v57 += __clz(__rbit64(v60 ^ v59)) >> 3;
          }
          if (v57 >= 4 && (v63 = 135 * v57 + 1935, v63 >= 0x7E5))
          {
            v53 = *(unsigned __int8 *)(a3 + v57 + v52);
            v49 = v57;
            v62 = v126;
          }
          else
          {
LABEL_70:
            v62 = 0;
            v63 = 2020;
          }
        }
        v64 = 0;
        v65 = vdupq_n_s64((unint64_t)(0x35A7BD1E35A7BD00 * *v54) >> 44);
        v66 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
        v130 = vandq_s8((int8x16_t)vaddq_s64(v65, (int64x2_t)xmmword_2368AF3D0), v66);
        v131 = vandq_s8((int8x16_t)vaddq_s64(v65, (int64x2_t)xmmword_2368AF3E0), v66);
        v67 = v19 & 7;
        do
        {
          v68 = *(unsigned int *)(v17 + 4 * v130.i64[v64]);
          v69 = v50 - v68;
          result = *(unsigned __int8 *)(a3 + (v68 & a4) + v49);
          if (v53 == (_DWORD)result && v50 != v68 && v69 <= v51)
          {
            result = a3 + (v68 & a4);
            if (v19 < 8)
            {
              v72 = 0;
              v76 = (unsigned __int8 *)(a3 + (v50 & a4));
LABEL_91:
              if (v67)
              {
                v79 = v67;
                while (*(unsigned __int8 *)(result + v72) == *v76)
                {
                  ++v76;
                  ++v72;
                  --v79;
                  v67 = v19 & 7;
                  if (!v79)
                    goto LABEL_85;
                }
                v67 = v19 & 7;
              }
            }
            else
            {
              v72 = 0;
              v73 = v19 >> 3;
              while (1)
              {
                v74 = *(_QWORD *)((char *)v54 + v72);
                v75 = *(_QWORD *)(result + v72);
                if (v74 != v75)
                  break;
                v72 += 8;
                if (!--v73)
                {
                  v76 = (unsigned __int8 *)v54 + v72;
                  goto LABEL_91;
                }
              }
              v72 += __clz(__rbit64(v75 ^ v74)) >> 3;
            }
LABEL_85:
            if (v72 >= 4)
            {
              v77 = __clz(v69) ^ 0x1F;
              result = 32 * v77;
              v78 = 135 * v72 - 30 * v77 + 1920;
              v67 = v19 & 7;
              if (v63 < v78)
              {
                v53 = *(unsigned __int8 *)(a3 + v72 + v52);
                v49 = v72;
                v62 = v69;
                v63 = v78;
              }
            }
          }
          ++v64;
        }
        while (v64 != 4);
        *(_DWORD *)(v17 + 4 * *(uint64_t *)((char *)v130.i64 + (v50 & 0x18))) = v50;
        a5 = v125;
        if (v63 < v32 + 175)
          break;
        v12 = v129 + 1;
        v13 = v124;
        if (v48 <= 2)
        {
          v80 = v11 + 9;
          ++v48;
          v128 = v62;
          v32 = v63;
          v27 = v49;
          ++v11;
          if (v80 < v124)
            continue;
        }
        goto LABEL_114;
      }
      v62 = v128;
      v49 = v27;
      v50 = v11;
      v13 = v124;
      v12 = v129;
LABEL_114:
      v84 = v50 + v119;
      if (v50 + v119 >= v127)
        v84 = v127;
      v85 = v84 + v118;
      i = v123;
      if (v62 > v84 + v118)
        goto LABEL_117;
      v90 = *v123;
      if (v62 != v90)
        break;
      LOWORD(v86) = 0;
      LODWORD(v89) = 0;
      *(_DWORD *)v122 = v12;
      *(_DWORD *)(v122 + 4) = v49;
LABEL_127:
      *(_WORD *)(v122 + 14) = v86;
      *(_DWORD *)(v122 + 8) = v89;
      if (v12 > 5)
      {
        if (v12 > 0x81)
        {
          if (v12 > 0x841)
          {
            if (v12 >> 1 >= 0xC21)
            {
              if (v12 < 0x5842)
                LOWORD(v95) = 22;
              else
                LOWORD(v95) = 23;
            }
            else
            {
              LOWORD(v95) = 21;
            }
          }
          else
          {
            v95 = (__clz(v12 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v96 = (__clz(v12 - 2) ^ 0x1F) - 1;
          v95 = ((v12 - 2) >> v96) + 2 * v96 + 2;
        }
      }
      else
      {
        LOWORD(v95) = v12;
      }
      v103 = (unint64_t)v49 >> 1;
      if (v103 > 4)
      {
        if (v103 > 0x42)
        {
          if (v103 > 0x422)
            LOWORD(v104) = 23;
          else
            v104 = (__clz(v49 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v105 = (int)v49 - 6;
          v106 = (__clz(v105) ^ 0x1F) - 1;
          v104 = (v105 >> v106) + 2 * v106 + 4;
        }
      }
      else
      {
        LOWORD(v104) = v49 - 2;
      }
      v107 = v104 & 7 | (8 * (v95 & 7));
      if ((v86 & 0x3FF) != 0 || (unsigned __int16)v95 > 7u || (unsigned __int16)v104 > 0xFu)
      {
        v109 = 3 * ((unsigned __int16)v95 >> 3) + ((unsigned __int16)(v104 & 0xFFF8) >> 3);
        v108 = ((((0x520D40u >> (2 * v109)) & 0xC0) + (v109 << 6)) | v107) + 64;
      }
      else
      {
        LOWORD(v108) = v107 | 0x40;
        if ((v104 & 0xFFF8) == 0)
          LOWORD(v108) = v104 & 7 | (8 * (v95 & 7));
      }
      *(_WORD *)(v122 + 12) = v108;
      *a11 += v12;
      v110 = v50 + 2;
      v82 = v50 + v49;
      if (v50 + v49 >= v121)
        v111 = v121;
      else
        v111 = v50 + v49;
      if (v62 < v49 >> 2)
      {
        v112 = v82 - 4 * v62;
        if (v110 > v112)
          v112 = v50 + 2;
        if (v111 >= v112)
          v110 = v112;
        else
          v110 = v111;
      }
      v16 = v120 + 2 * v49 + v50;
      v122 += 16;
      if (v110 < v111)
      {
        do
        {
          *(_DWORD *)(v17
                    + 4
                    * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v110 & a4))) >> 32) >> 12)
                      + (v110 & 0x18)) & 0xFFFFF)) = v110;
          ++v110;
        }
        while (v111 != v110);
      }
      v12 = 0;
LABEL_176:
      v11 = v82;
      if (v82 + 8 >= v13)
        goto LABEL_189;
    }
    v98 = v123[1];
    if (v62 == v98)
    {
      v86 = 1;
      goto LABEL_118;
    }
    v99 = v62 + 3;
    v100 = v62 + 3 - v90;
    if (v100 > 6)
    {
      if (v99 - v98 > 6)
      {
        if (v62 == v123[2])
        {
          v86 = 2;
        }
        else if (v62 == v123[3])
        {
          v86 = 3;
        }
        else
        {
LABEL_117:
          v86 = v62 + 15;
        }
LABEL_118:
        if (v62 <= v85 && v86)
        {
          v123[3] = v123[2];
          *(_QWORD *)(v123 + 1) = *(_QWORD *)v123;
          *v123 = v62;
        }
        *(_DWORD *)v122 = v12;
        *(_DWORD *)(v122 + 4) = v49;
        v87 = *(unsigned int *)(v125 + 68);
        v88 = v87 + 16;
        if (v87 + 16 <= v86)
        {
          v91 = *(unsigned int *)(v125 + 64);
          v92 = v86 - v87 + (4 << v91) - 16;
          v93 = (__clz(v92) ^ 0x1F) - 1;
          v94 = ((v92 >> v93) & 1 | 2) << v93;
          v86 = ((v92 & ~(-1 << v91)) + v88 + ((((v92 >> v93) & 1 | (2 * (v93 - v91))) + 65534) << v91)) | ((v93 - v91) << 10);
          v89 = (v92 - v94) >> v91;
        }
        else
        {
          LODWORD(v89) = 0;
        }
        goto LABEL_127;
      }
      v101 = 4 * (v99 - v98);
      v102 = 266017486;
    }
    else
    {
      v101 = 4 * v100;
      v102 = 158663784;
    }
    v86 = (v102 >> v101) & 0xF;
    goto LABEL_118;
  }
  v122 = a9;
  v82 = a2;
LABEL_189:
  *a8 = v12 + v13 - v82;
  *a10 += (v122 - a9) >> 4;
  return result;
}

unint64_t sub_23679A8EC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *i, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unsigned int v142;
  unint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int *v164;
  unint64_t v165;
  unint64_t v167;
  uint64_t v168;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;

  v11 = a2;
  v175 = *MEMORY[0x24BDAC8D0];
  v12 = *a8;
  v13 = a2 + result;
  v14 = a2 + result - 7;
  v157 = v14;
  if (result <= 7)
    v14 = a2;
  v162 = v14;
  if (*(int *)(a5 + 4) >= 9)
    v15 = 512;
  else
    v15 = 64;
  if (result >= 9)
  {
    v170 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v160 = *(_QWORD *)(a5 + 16);
    v16 = v15 + a2;
    v156 = 4 * v15;
    v158 = v13 - 1;
    v159 = *(_QWORD *)(a5 + 104);
    v17 = *(_QWORD *)(a6 + 88);
    v163 = a9;
    v164 = i;
    v167 = a2 + result;
    v161 = v15;
    while (1)
    {
      v18 = v13 - v11;
      if (v11 >= v170)
        v19 = v170;
      else
        v19 = v11;
      v20 = v11 & a4;
      v21 = (_QWORD *)(a3 + (v11 & a4));
      v22 = *(unsigned __int8 *)v21;
      v23 = *i;
      v171 = v16;
      if (v11 < v23)
        goto LABEL_22;
      v24 = (unsigned __int8 *)(a3 + (a4 & (v11 - v23)));
      if (v22 != *v24)
        goto LABEL_22;
      if (v18 < 8)
      {
        v26 = 0;
        v27 = (unsigned __int8 *)(a3 + (v11 & a4));
LABEL_257:
        v152 = v18 & 7;
        if ((v18 & 7) != 0)
        {
          v153 = v26 | v152;
          while (v24[v26] == *v27)
          {
            ++v27;
            ++v26;
            if (!--v152)
            {
              v26 = v153;
              break;
            }
          }
        }
      }
      else
      {
        v25 = 0;
        v26 = v18 & 0xFFFFFFFFFFFFFFF8;
        v27 = (unsigned __int8 *)(a3 + v20 + (v18 & 0xFFFFFFFFFFFFFFF8));
        v28 = v18 >> 3;
        while (1)
        {
          v29 = v21[v25];
          v30 = *(_QWORD *)&v24[v25 * 8];
          if (v29 != v30)
            break;
          ++v25;
          if (!--v28)
            goto LABEL_257;
        }
        v26 = v25 * 8 + (__clz(__rbit64(v30 ^ v29)) >> 3);
      }
      if (v26 >= 4 && (v31 = 135 * v26 + 1935, v31 >= 0x7E5))
      {
        v22 = *(unsigned __int8 *)(a3 + v26 + v20);
      }
      else
      {
LABEL_22:
        v23 = 0;
        v26 = 0;
        v31 = 2020;
      }
      v32 = 0;
      v173 = (0xBD1E35A7BD000000 * *v21) >> 48;
      v174 = (unsigned __int16)(v173 + 8);
      LOBYTE(result) = 1;
      do
      {
        v33 = result;
        v34 = *(unsigned int *)(v17 + 4 * *(&v173 + v32));
        v35 = v11 - v34;
        if (v22 == *(unsigned __int8 *)(a3 + (v34 & a4) + v26) && v11 != v34 && v35 <= v19)
        {
          v38 = a3 + (v34 & a4);
          if (v18 < 8)
          {
            v43 = v23;
            v44 = 0;
            v45 = (unsigned __int8 *)(a3 + (v11 & a4));
LABEL_43:
            if ((v18 & 7) != 0)
            {
              v47 = v15;
              v48 = v18 & 7 | v44;
              v49 = v18 & 7;
              while (*(unsigned __int8 *)(v38 + v44) == *v45)
              {
                ++v45;
                ++v44;
                if (!--v49)
                {
                  v44 = v48;
                  break;
                }
              }
              v15 = v47;
            }
            v23 = v43;
          }
          else
          {
            v39 = 0;
            v40 = v18 >> 3;
            while (1)
            {
              v41 = v21[v39];
              v42 = *(_QWORD *)(v38 + v39 * 8);
              if (v41 != v42)
                break;
              ++v39;
              if (!--v40)
              {
                v43 = v23;
                v44 = v18 & 0xFFFFFFFFFFFFFFF8;
                v45 = (unsigned __int8 *)v21 + (v18 & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_43;
              }
            }
            v44 = v39 * 8 + (__clz(__rbit64(v42 ^ v41)) >> 3);
          }
          if (v44 >= 4)
          {
            v46 = __clz(v35) ^ 0x1F;
            if (v31 < 135 * v44 - 30 * v46 + 1920)
            {
              v22 = *(unsigned __int8 *)(a3 + v44 + v20);
              v23 = v35;
              v31 = 135 * v44 - 30 * v46 + 1920;
              v26 = v44;
            }
          }
        }
        result = 0;
        v32 = 1;
      }
      while ((v33 & 1) != 0);
      *(_DWORD *)(v17 + 4 * *(unint64_t *)((char *)&v173 + (v11 & 8))) = v11;
      if ((v11 & 3) != 0)
      {
        v50 = a6;
      }
      else
      {
        v50 = a6;
        if (v18 >= 0x20)
        {
          v51 = *(_QWORD *)(a6 + 112);
          if (v51 <= v11)
          {
            v52 = *(_DWORD *)(a6 + 124);
            v53 = *(_DWORD *)(a6 + 128);
            v54 = *(_DWORD *)(a6 + 96);
            do
            {
              v55 = *(unsigned __int8 *)(a3 + (v51 & a4));
              result = *(unsigned __int8 *)(a3 + ((v51 + 32) & a4));
              if ((v54 & 0x3F000000) == 0)
              {
                v56 = *(_QWORD *)(v50 + 104);
                v57 = *(unsigned int *)(v56 + 4 * (v54 & 0x3FFFFFFF));
                *(_DWORD *)(v56 + 4 * (v54 & 0x3FFFFFFF)) = v51;
                if (v51 == v11 && (_DWORD)v57 != -1)
                {
                  v58 = (v11 - v57);
                  if (v19 >= v58)
                  {
                    v59 = v23;
                    v60 = 0;
                    v61 = a3 + (v57 & a4);
                    v62 = v18 >> 3;
                    do
                    {
                      v63 = v21[v60];
                      v64 = *(_QWORD *)(v61 + v60 * 8);
                      if (v63 != v64)
                      {
                        v65 = v60 * 8 + (__clz(__rbit64(v64 ^ v63)) >> 3);
                        goto LABEL_68;
                      }
                      ++v60;
                      --v62;
                    }
                    while (v62);
                    v65 = v18 & 0xFFFFFFFFFFFFFFF8;
                    if ((v18 & 7) != 0)
                    {
                      v66 = v18 & 7;
                      v65 = v18 & 0xFFFFFFFFFFFFFFF8;
                      while (*(unsigned __int8 *)(v61 + v65) == *((unsigned __int8 *)v21 + v65))
                      {
                        ++v65;
                        if (!--v66)
                        {
                          v65 = v18;
                          break;
                        }
                      }
                      v50 = a6;
                    }
LABEL_68:
                    v67 = 135 * v65 - 30 * (__clz(v58) ^ 0x1F) + 1920;
                    if (v67 > v31)
                      v68 = v58;
                    else
                      v68 = v59;
                    if (v67 > v31)
                    {
                      v69 = v65;
                    }
                    else
                    {
                      v67 = v31;
                      v69 = v26;
                    }
                    if (v65 <= v26)
                    {
                      v68 = v59;
                      v67 = v31;
                      v69 = v26;
                    }
                    if (v65 >= 4)
                      v23 = v68;
                    else
                      v23 = v59;
                    if (v65 >= 4)
                    {
                      v31 = v67;
                      v26 = v69;
                    }
                  }
                }
              }
              v54 = result + v52 * v54 + v53 * ~v55 + 1;
              v51 += 4;
            }
            while (v51 <= v11);
            *(_DWORD *)(v50 + 96) = v54;
          }
          *(_QWORD *)(v50 + 112) = v11 + 4;
        }
      }
      if (v31 < 0x7E5)
      {
        ++v12;
        v122 = v11 + 1;
        v16 = v171;
        v13 = v167;
        if (v11 + 1 <= v171)
        {
          i = v164;
        }
        else if (v122 <= v171 + v156)
        {
          v137 = v11 + 9;
          if (v11 + 9 >= v157)
            v137 = v157;
          for (i = v164; v122 < v137; v122 += 2)
          {
            *(_DWORD *)(v17
                      + 4
                      * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v122 & a4))) >> 48) + (v122 & 8))) = v122;
            v12 += 2;
          }
        }
        else
        {
          v123 = v11 + 17;
          if (v11 + 17 >= v157)
            v123 = v157;
          for (i = v164; v122 < v123; v122 += 4)
          {
            *(_DWORD *)(v17
                      + 4
                      * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v122 & a4))) >> 48) + (v122 & 8))) = v122;
            v12 += 4;
          }
        }
        goto LABEL_250;
      }
      v165 = v23;
      v70 = 0;
      v168 = *v164;
      v71 = v158 - v11;
      while (1)
      {
        --v18;
        v72 = v26 - 1;
        if (v26 - 1 >= v18)
          v72 = v18;
        v73 = *(int *)(a5 + 4) >= 5 ? 0 : v72;
        v74 = v11 + 1;
        v75 = v11 + 1 < v170 ? v11 + 1 : v170;
        v76 = v74 & a4;
        v77 = *(unsigned __int8 *)(a3 + v73 + (v74 & a4));
        v78 = (_QWORD *)(a3 + (v74 & a4));
        if (v74 - v168 >= v74)
          goto LABEL_106;
        v79 = a4 & (v74 - v168);
        if (v77 != *(unsigned __int8 *)(a3 + v79 + v73))
          goto LABEL_106;
        v80 = a3 + v79;
        if (v18 < 8)
        {
          v81 = 0;
          v85 = (unsigned __int8 *)(a3 + (v74 & a4));
LABEL_175:
          v121 = v18 & 7;
          if ((v18 & 7) != 0)
          {
            do
            {
              if (*(unsigned __int8 *)(v80 + v81) != *v85)
                break;
              ++v85;
              ++v81;
              --v121;
            }
            while (v121);
          }
        }
        else
        {
          v81 = 0;
          v82 = v18 >> 3;
          while (1)
          {
            v83 = *(_QWORD *)((char *)v78 + v81);
            v84 = *(_QWORD *)(v80 + v81);
            if (v83 != v84)
              break;
            v81 += 8;
            if (!--v82)
            {
              v85 = (unsigned __int8 *)v78 + v81;
              goto LABEL_175;
            }
          }
          v81 += __clz(__rbit64(v84 ^ v83)) >> 3;
        }
        if (v81 >= 4 && (v86 = 135 * v81 + 1935, v86 >= 0x7E5))
        {
          v77 = *(unsigned __int8 *)(a3 + v81 + v76);
          v73 = v81;
          v87 = v168;
        }
        else
        {
LABEL_106:
          v87 = 0;
          v86 = 2020;
        }
        v88 = 0;
        v172 = v71 & 7;
        v173 = (0xBD1E35A7BD000000 * *v78) >> 48;
        v174 = (unsigned __int16)(v173 + 8);
        LOBYTE(result) = 1;
        do
        {
          v89 = result;
          v90 = *(unsigned int *)(v17 + 4 * *(&v173 + v88));
          v91 = v74 - v90;
          if (v77 == *(unsigned __int8 *)(a3 + (v90 & a4) + v73) && v74 != v90 && v91 <= v75)
          {
            v94 = a3 + (v90 & a4);
            if (v18 < 8)
            {
              v95 = 0;
              v99 = (unsigned __int8 *)(a3 + (v74 & a4));
LABEL_127:
              v101 = v18 & 7;
              if ((v18 & 7) != 0)
              {
                do
                {
                  if (*(unsigned __int8 *)(v94 + v95) != *v99)
                    break;
                  ++v99;
                  ++v95;
                  --v101;
                }
                while (v101);
              }
            }
            else
            {
              v95 = 0;
              v96 = v18 >> 3;
              while (1)
              {
                v97 = *(_QWORD *)((char *)v78 + v95);
                v98 = *(_QWORD *)(v94 + v95);
                if (v97 != v98)
                  break;
                v95 += 8;
                if (!--v96)
                {
                  v99 = (unsigned __int8 *)v78 + v95;
                  goto LABEL_127;
                }
              }
              v95 += __clz(__rbit64(v98 ^ v97)) >> 3;
            }
            if (v95 >= 4)
            {
              v100 = __clz(v91) ^ 0x1F;
              if (v86 < 135 * v95 - 30 * v100 + 1920)
              {
                v77 = *(unsigned __int8 *)(a3 + v95 + v76);
                v73 = v95;
                v87 = v91;
                v86 = 135 * v95 - 30 * v100 + 1920;
              }
            }
          }
          result = 0;
          v88 = 1;
        }
        while ((v89 & 1) != 0);
        *(_DWORD *)(v17 + 4 * *(unint64_t *)((char *)&v173 + (v74 & 8))) = v74;
        if (v18 >= 0x20 && (v74 & 3) == 0)
        {
          v102 = *(_QWORD *)(v50 + 112);
          if (v102 <= v74)
          {
            v103 = *(_DWORD *)(v50 + 124);
            v104 = *(_DWORD *)(v50 + 128);
            v105 = *(_DWORD *)(v50 + 96);
            do
            {
              result = *(unsigned __int8 *)(a3 + (v102 & a4));
              v106 = *(unsigned __int8 *)(a3 + ((v102 + 32) & a4));
              if ((v105 & 0x3F000000) == 0)
              {
                v107 = *(_QWORD *)(v50 + 104);
                v108 = *(unsigned int *)(v107 + 4 * (v105 & 0x3FFFFFFF));
                *(_DWORD *)(v107 + 4 * (v105 & 0x3FFFFFFF)) = v102;
                if (v102 == v74 && (_DWORD)v108 != -1)
                {
                  v109 = (v74 - v108);
                  if (v75 >= v109)
                  {
                    v110 = 0;
                    v111 = a3 + (v108 & a4);
                    v112 = v18 >> 3;
                    do
                    {
                      v113 = *(_QWORD *)((char *)v78 + v110);
                      v114 = *(_QWORD *)(v111 + v110);
                      if (v113 != v114)
                      {
                        v110 += __clz(__rbit64(v114 ^ v113)) >> 3;
                        goto LABEL_148;
                      }
                      v110 += 8;
                      --v112;
                    }
                    while (v112);
                    if ((v18 & 7) != 0)
                    {
                      v115 = 0;
                      v154 = v111 + v110;
                      while (1)
                      {
                        v116 = v115;
                        if (*(unsigned __int8 *)(v154 + v115) != *((unsigned __int8 *)v78 + v110 + v115))
                          break;
                        ++v115;
                        if (v172 == v116 + 1)
                        {
                          v110 += v115;
                          goto LABEL_148;
                        }
                      }
                      v110 += v115;
                    }
LABEL_148:
                    v117 = 135 * v110 - 30 * (__clz(v109) ^ 0x1F) + 1920;
                    if (v117 > v86)
                      v118 = v110;
                    else
                      v118 = v73;
                    if (v117 <= v86)
                    {
                      v109 = v87;
                      v117 = v86;
                    }
                    v119 = v110 >= 4 && v110 > v73;
                    if (v119)
                      v73 = v118;
                    if (v119)
                      v87 = v109;
                    if (v119)
                      v86 = v117;
                    v50 = a6;
                  }
                }
              }
              v105 = v106 + v103 * v105 + v104 * ~(_DWORD)result + 1;
              v102 += 4;
            }
            while (v102 <= v74);
            *(_DWORD *)(v50 + 96) = v105;
          }
          *(_QWORD *)(v50 + 112) = v11 + 5;
        }
        if (v86 < v31 + 175)
          break;
        ++v12;
        if (v70 <= 2)
        {
          v120 = v11 + 9;
          ++v70;
          v71 = v172 + 7;
          v165 = v87;
          v31 = v86;
          v26 = v73;
          ++v11;
          if (v120 < v167)
            continue;
        }
        goto LABEL_188;
      }
      v87 = v165;
      v73 = v26;
      v74 = v11;
LABEL_188:
      v124 = v74 + v160;
      if (v74 + v160 >= v170)
        v124 = v170;
      v125 = v124 + v159;
      i = v164;
      if (v87 > v124 + v159)
        goto LABEL_191;
      v130 = *v164;
      if (v87 != v130)
        break;
      LOWORD(v126) = 0;
      LODWORD(v129) = 0;
      *(_DWORD *)v163 = v12;
      *(_DWORD *)(v163 + 4) = v73;
      v15 = v161;
LABEL_201:
      *(_WORD *)(v163 + 14) = v126;
      *(_DWORD *)(v163 + 8) = v129;
      if (v12 > 5)
      {
        if (v12 > 0x81)
        {
          if (v12 > 0x841)
          {
            if (v12 >> 1 >= 0xC21)
            {
              if (v12 < 0x5842)
                LOWORD(v135) = 22;
              else
                LOWORD(v135) = 23;
            }
            else
            {
              LOWORD(v135) = 21;
            }
          }
          else
          {
            v135 = (__clz(v12 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v136 = (__clz(v12 - 2) ^ 0x1F) - 1;
          v135 = ((v12 - 2) >> v136) + 2 * v136 + 2;
        }
      }
      else
      {
        LOWORD(v135) = v12;
      }
      v143 = (unint64_t)v73 >> 1;
      if (v143 > 4)
      {
        if (v143 > 0x42)
        {
          if (v143 > 0x422)
            LOWORD(v144) = 23;
          else
            v144 = (__clz(v73 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v145 = (int)v73 - 6;
          v146 = (__clz(v145) ^ 0x1F) - 1;
          v144 = (v145 >> v146) + 2 * v146 + 4;
        }
      }
      else
      {
        LOWORD(v144) = v73 - 2;
      }
      v147 = v144 & 7 | (8 * (v135 & 7));
      if ((v126 & 0x3FF) != 0 || (unsigned __int16)v135 > 7u || (unsigned __int16)v144 > 0xFu)
      {
        v149 = 3 * ((unsigned __int16)v135 >> 3) + ((unsigned __int16)(v144 & 0xFFF8) >> 3);
        v148 = ((((0x520D40u >> (2 * v149)) & 0xC0) + (v149 << 6)) | v147) + 64;
      }
      else
      {
        LOWORD(v148) = v147 | 0x40;
        if ((v144 & 0xFFF8) == 0)
          LOWORD(v148) = v144 & 7 | (8 * (v135 & 7));
      }
      *(_WORD *)(v163 + 12) = v148;
      *a11 += v12;
      v150 = v74 + 2;
      v122 = v74 + v73;
      v151 = v162;
      if (v74 + v73 < v162)
        v151 = v74 + v73;
      if (v87 < v73 >> 2)
      {
        if (v150 <= v122 - 4 * v87)
          v150 = v122 - 4 * v87;
        if (v151 < v150)
          v150 = v151;
      }
      v16 = v15 + 2 * v73 + v74;
      v163 += 16;
      if (v150 >= v151)
      {
        v12 = 0;
        v13 = v167;
      }
      else
      {
        v13 = v167;
        do
        {
          *(_DWORD *)(v17
                    + 4
                    * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)(a3 + (v150 & a4))) >> 48) + (v150 & 8))) = v150;
          ++v150;
        }
        while (v151 != v150);
        v12 = 0;
      }
LABEL_250:
      v11 = v122;
      if (v122 + 8 >= v13)
        goto LABEL_263;
    }
    v138 = v164[1];
    if (v87 == v138)
    {
      v126 = 1;
      goto LABEL_192;
    }
    v139 = v87 + 3;
    v140 = v87 + 3 - v130;
    if (v140 > 6)
    {
      if (v139 - v138 > 6)
      {
        if (v87 == v164[2])
        {
          v126 = 2;
        }
        else if (v87 == v164[3])
        {
          v126 = 3;
        }
        else
        {
LABEL_191:
          v126 = v87 + 15;
        }
LABEL_192:
        if (v87 <= v125 && v126)
        {
          v164[3] = v164[2];
          *(_QWORD *)(v164 + 1) = *(_QWORD *)v164;
          *v164 = v87;
        }
        *(_DWORD *)v163 = v12;
        *(_DWORD *)(v163 + 4) = v73;
        v127 = *(unsigned int *)(a5 + 68);
        v128 = v127 + 16;
        v15 = v161;
        if (v127 + 16 <= v126)
        {
          v131 = *(unsigned int *)(a5 + 64);
          v132 = v126 - v127 + (4 << v131) - 16;
          v133 = (__clz(v132) ^ 0x1F) - 1;
          v134 = ((v132 >> v133) & 1 | 2) << v133;
          v126 = ((v132 & ~(-1 << v131))
                + v128
                + ((((v132 >> v133) & 1 | (2 * (v133 - v131))) + 65534) << v131)) | ((v133 - v131) << 10);
          v129 = (v132 - v134) >> v131;
        }
        else
        {
          LODWORD(v129) = 0;
        }
        goto LABEL_201;
      }
      v141 = 4 * (v139 - v138);
      v142 = 266017486;
    }
    else
    {
      v141 = 4 * v140;
      v142 = 158663784;
    }
    v126 = (v142 >> v141) & 0xF;
    goto LABEL_192;
  }
  v163 = a9;
  v122 = a2;
LABEL_263:
  *a8 = v12 + v13 - v122;
  *a10 += (v163 - a9) >> 4;
  return result;
}

unint64_t sub_23679B6EC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64x2_t v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  unsigned int v143;
  unint64_t v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  int8x16_t v170;
  int8x16_t v171;
  uint64_t v172;

  v12 = a2;
  v172 = *MEMORY[0x24BDAC8D0];
  v13 = *a8;
  v14 = a2 + result;
  v15 = a2 + result - 7;
  v156 = v15;
  if (result <= 7)
    v15 = a2;
  v161 = v15;
  if (*(int *)(a5 + 4) >= 9)
    v16 = 512;
  else
    v16 = 64;
  if (result >= 9)
  {
    v167 = (1 << *(_DWORD *)(a5 + 8)) - 16;
    v158 = *(_QWORD *)(a5 + 104);
    v159 = *(_QWORD *)(a5 + 16);
    v17 = v16 + a2;
    v18 = *(_QWORD *)(a6 + 88);
    v160 = v16;
    v155 = 4 * v16;
    v157 = v14 - 1;
    v19 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
    v162 = a9;
    v166 = a7;
    v169 = a6;
    v164 = a2 + result;
    while (1)
    {
      v20 = v14 - v12;
      if (v12 >= v167)
        v21 = v167;
      else
        v21 = v12;
      v22 = v12 & a4;
      v23 = (_QWORD *)(a3 + (v12 & a4));
      v24 = *(unsigned __int8 *)v23;
      v25 = *v166;
      if (v12 < v25)
        goto LABEL_22;
      v26 = (unsigned __int8 *)(a3 + (a4 & (v12 - v25)));
      if (v24 != *v26)
        goto LABEL_22;
      v168 = *v166;
      if (v20 < 8)
      {
        v28 = 0;
        v29 = (unsigned __int8 *)(a3 + (v12 & a4));
LABEL_251:
        v152 = v20 & 7;
        if ((v20 & 7) != 0)
        {
          v153 = v28 | v152;
          while (v26[v28] == *v29)
          {
            ++v29;
            ++v28;
            if (!--v152)
            {
              v28 = v153;
              break;
            }
          }
        }
      }
      else
      {
        v27 = 0;
        v28 = v20 & 0xFFFFFFFFFFFFFFF8;
        v29 = (unsigned __int8 *)(a3 + v22 + (v20 & 0xFFFFFFFFFFFFFFF8));
        v30 = v20 >> 3;
        while (1)
        {
          v31 = v23[v27];
          v32 = *(_QWORD *)&v26[v27 * 8];
          if (v31 != v32)
            break;
          ++v27;
          if (!--v30)
            goto LABEL_251;
        }
        v28 = v27 * 8 + (__clz(__rbit64(v32 ^ v31)) >> 3);
      }
      if (v28 >= 4 && (v33 = 135 * v28 + 1935, v33 >= 0x7E5))
      {
        v24 = *(unsigned __int8 *)(a3 + v28 + v22);
      }
      else
      {
LABEL_22:
        v168 = 0;
        v28 = 0;
        v33 = 2020;
      }
      v34 = 0;
      v35 = vdupq_n_s64((unint64_t)(0x35A7BD1E35A7BD00 * *v23) >> 44);
      v170 = vandq_s8((int8x16_t)vaddq_s64(v35, (int64x2_t)xmmword_2368AF3D0), v19);
      v171 = vandq_s8((int8x16_t)vaddq_s64(v35, (int64x2_t)xmmword_2368AF3E0), v19);
      do
      {
        v36 = *(unsigned int *)(v18 + 4 * v170.i64[v34]);
        result = v12 - v36;
        if (v24 == *(unsigned __int8 *)(a3 + (v36 & a4) + v28) && v12 != v36 && result <= v21)
        {
          v39 = a3 + (v36 & a4);
          if (v20 < 8)
          {
            v44 = 0;
            v45 = (unsigned __int8 *)(a3 + (v12 & a4));
LABEL_43:
            if ((v20 & 7) != 0)
            {
              v47 = v14;
              v48 = v20 & 7 | v44;
              v49 = v20 & 7;
              while (*(unsigned __int8 *)(v39 + v44) == *v45)
              {
                ++v45;
                ++v44;
                if (!--v49)
                {
                  v44 = v48;
                  break;
                }
              }
              a6 = v169;
              v14 = v47;
            }
            else
            {
              a6 = v169;
            }
          }
          else
          {
            v40 = 0;
            v41 = v20 >> 3;
            while (1)
            {
              v42 = v23[v40];
              v43 = *(_QWORD *)(v39 + v40 * 8);
              if (v42 != v43)
                break;
              ++v40;
              if (!--v41)
              {
                v44 = v20 & 0xFFFFFFFFFFFFFFF8;
                v45 = (unsigned __int8 *)v23 + (v20 & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_43;
              }
            }
            v44 = v40 * 8 + (__clz(__rbit64(v43 ^ v42)) >> 3);
          }
          if (v44 >= 4)
          {
            v46 = __clz(result);
            if (v33 < 135 * v44 - 30 * (v46 ^ 0x1F) + 1920)
            {
              v24 = *(unsigned __int8 *)(a3 + v44 + v22);
              v168 = result;
              v33 = 135 * v44 - 30 * (v46 ^ 0x1F) + 1920;
              v28 = v44;
            }
          }
        }
        ++v34;
      }
      while (v34 != 4);
      *(_DWORD *)(v18 + 4 * *(uint64_t *)((char *)v170.i64 + (v12 & 0x18))) = v12;
      if ((v12 & 3) == 0 && v20 >= 0x20)
      {
        v50 = *(_QWORD *)(a6 + 112);
        if (v50 <= v12)
        {
          v51 = *(_DWORD *)(a6 + 124);
          v52 = *(_DWORD *)(a6 + 128);
          v53 = *(_DWORD *)(a6 + 96);
          do
          {
            result = *(unsigned __int8 *)(a3 + (v50 & a4));
            v54 = *(unsigned __int8 *)(a3 + ((v50 + 32) & a4));
            if ((v53 & 0x3F000000) == 0)
            {
              v55 = *(_QWORD *)(a6 + 104);
              v56 = *(unsigned int *)(v55 + 4 * (v53 & 0x3FFFFFFF));
              *(_DWORD *)(v55 + 4 * (v53 & 0x3FFFFFFF)) = v50;
              if (v50 == v12 && (_DWORD)v56 != -1)
              {
                v57 = (v12 - v56);
                if (v21 >= v57)
                {
                  v58 = 0;
                  v59 = a3 + (v56 & a4);
                  v60 = v20 >> 3;
                  do
                  {
                    v61 = v23[v58];
                    v62 = *(_QWORD *)(v59 + v58 * 8);
                    if (v61 != v62)
                    {
                      v63 = v58 * 8 + (__clz(__rbit64(v62 ^ v61)) >> 3);
                      goto LABEL_67;
                    }
                    ++v58;
                    --v60;
                  }
                  while (v60);
                  v63 = v20 & 0xFFFFFFFFFFFFFFF8;
                  if ((v20 & 7) != 0)
                  {
                    v64 = v20 & 7;
                    v63 = v20 & 0xFFFFFFFFFFFFFFF8;
                    while (*(unsigned __int8 *)(v59 + v63) == *((unsigned __int8 *)v23 + v63))
                    {
                      ++v63;
                      if (!--v64)
                      {
                        v63 = v20;
                        break;
                      }
                    }
                  }
LABEL_67:
                  v65 = 135 * v63 - 30 * (__clz(v57) ^ 0x1F) + 1920;
                  v66 = v168;
                  if (v65 > v33)
                  {
                    v67 = v63;
                  }
                  else
                  {
                    v57 = v168;
                    v65 = v33;
                    v67 = v28;
                  }
                  if (v63 <= v28)
                  {
                    v57 = v168;
                    v65 = v33;
                    v67 = v28;
                  }
                  if (v63 >= 4)
                    v66 = v57;
                  v168 = v66;
                  if (v63 >= 4)
                  {
                    v33 = v65;
                    v28 = v67;
                  }
                  a6 = v169;
                }
              }
            }
            v53 = v54 + v51 * v53 + v52 * ~(_DWORD)result + 1;
            v50 += 4;
          }
          while (v50 <= v12);
          *(_DWORD *)(a6 + 96) = v53;
        }
        *(_QWORD *)(a6 + 112) = v12 + 4;
      }
      if (v33 < 0x7E5)
      {
        ++v13;
        v121 = v12 + 1;
        if (v12 + 1 > v17)
        {
          if (v121 <= v17 + v155)
          {
            v136 = v12 + 9;
            if (v12 + 9 >= v156)
              v136 = v156;
            while (v121 < v136)
            {
              *(_DWORD *)(v18
                        + 4
                        * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v121 & a4))) >> 32) >> 12)
                          + (v121 & 0x18)) & 0xFFFFF)) = v121;
              v13 += 2;
              v121 += 2;
            }
          }
          else
          {
            v122 = v12 + 17;
            if (v12 + 17 >= v156)
              v122 = v156;
            while (v121 < v122)
            {
              *(_DWORD *)(v18
                        + 4
                        * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v121 & a4))) >> 32) >> 12)
                          + (v121 & 0x18)) & 0xFFFFF)) = v121;
              v13 += 4;
              v121 += 4;
            }
          }
        }
        goto LABEL_244;
      }
      v68 = 0;
      v69 = v157 - v12;
      while (1)
      {
        --v20;
        v70 = v28 - 1;
        if (v28 - 1 >= v20)
          v70 = v20;
        v71 = *(int *)(a5 + 4) >= 5 ? 0 : v70;
        v72 = v12 + 1;
        v73 = (v12 + 1) & a4;
        v74 = *(unsigned __int8 *)(a3 + v71 + v73);
        v75 = v12 + 1 < v167 ? v12 + 1 : v167;
        v76 = (_QWORD *)(a3 + v73);
        v77 = *v166;
        if (v72 < v77)
        {
          v77 = 0;
          v85 = 2020;
        }
        else
        {
          v78 = a4 & (v72 - v77);
          if (v74 != *(unsigned __int8 *)(a3 + v78 + v71))
            goto LABEL_102;
          v79 = a3 + v78;
          if (v20 < 8)
          {
            v80 = 0;
            v84 = (unsigned __int8 *)(a3 + v73);
LABEL_171:
            v120 = v20 & 7;
            if ((v20 & 7) != 0)
            {
              do
              {
                if (*(unsigned __int8 *)(v79 + v80) != *v84)
                  break;
                ++v84;
                ++v80;
                --v120;
              }
              while (v120);
            }
          }
          else
          {
            v80 = 0;
            v81 = v20 >> 3;
            while (1)
            {
              v82 = *(_QWORD *)((char *)v76 + v80);
              v83 = *(_QWORD *)(v79 + v80);
              if (v82 != v83)
                break;
              v80 += 8;
              if (!--v81)
              {
                v84 = (unsigned __int8 *)v76 + v80;
                goto LABEL_171;
              }
            }
            v80 += __clz(__rbit64(v83 ^ v82)) >> 3;
          }
          if (v80 >= 4 && (v85 = 135 * v80 + 1935, v85 >= 0x7E5))
          {
            v74 = *(unsigned __int8 *)(a3 + v80 + v73);
            v71 = v80;
          }
          else
          {
LABEL_102:
            v77 = 0;
            v85 = 2020;
          }
        }
        v86 = 0;
        v87 = v69 & 7;
        v88 = vdupq_n_s64((unint64_t)(0x35A7BD1E35A7BD00 * *v76) >> 44);
        v89 = (int8x16_t)vdupq_n_s64(0xFFFFFuLL);
        v170 = vandq_s8((int8x16_t)vaddq_s64(v88, (int64x2_t)xmmword_2368AF3D0), v89);
        v171 = vandq_s8((int8x16_t)vaddq_s64(v88, (int64x2_t)xmmword_2368AF3E0), v89);
        do
        {
          v90 = *(unsigned int *)(v18 + 4 * v170.i64[v86]);
          result = v72 - v90;
          if (v74 == *(unsigned __int8 *)(a3 + (v90 & a4) + v71) && v72 != v90 && result <= v75)
          {
            v93 = a3 + (v90 & a4);
            if (v20 < 8)
            {
              v94 = 0;
              v98 = (unsigned __int8 *)(a3 + v73);
LABEL_123:
              v100 = v20 & 7;
              if ((v20 & 7) != 0)
              {
                do
                {
                  if (*(unsigned __int8 *)(v93 + v94) != *v98)
                    break;
                  ++v98;
                  ++v94;
                  --v100;
                }
                while (v100);
              }
            }
            else
            {
              v94 = 0;
              v95 = v20 >> 3;
              while (1)
              {
                v96 = *(_QWORD *)((char *)v76 + v94);
                v97 = *(_QWORD *)(v93 + v94);
                if (v96 != v97)
                  break;
                v94 += 8;
                if (!--v95)
                {
                  v98 = (unsigned __int8 *)v76 + v94;
                  goto LABEL_123;
                }
              }
              v94 += __clz(__rbit64(v97 ^ v96)) >> 3;
            }
            if (v94 >= 4)
            {
              v99 = __clz(result) ^ 0x1F;
              if (v85 < 135 * v94 - 30 * v99 + 1920)
              {
                v74 = *(unsigned __int8 *)(a3 + v94 + v73);
                v71 = v94;
                v77 = result;
                v85 = 135 * v94 - 30 * v99 + 1920;
              }
            }
          }
          ++v86;
        }
        while (v86 != 4);
        *(_DWORD *)(v18 + 4 * *(uint64_t *)((char *)v170.i64 + (v72 & 0x18))) = v72;
        if (v20 < 0x20)
        {
          a6 = v169;
        }
        else
        {
          a6 = v169;
          if ((v72 & 3) == 0)
          {
            v101 = *(_QWORD *)(v169 + 112);
            if (v101 <= v72)
            {
              v163 = v87;
              v102 = *(_DWORD *)(v169 + 124);
              v103 = *(_DWORD *)(v169 + 128);
              v104 = *(_DWORD *)(v169 + 96);
              do
              {
                result = *(unsigned __int8 *)(a3 + (v101 & a4));
                v105 = *(unsigned __int8 *)(a3 + ((v101 + 32) & a4));
                if ((v104 & 0x3F000000) == 0)
                {
                  v106 = *(_QWORD *)(v169 + 104);
                  v107 = *(unsigned int *)(v106 + 4 * (v104 & 0x3FFFFFFF));
                  *(_DWORD *)(v106 + 4 * (v104 & 0x3FFFFFFF)) = v101;
                  if (v101 == v72 && (_DWORD)v107 != -1)
                  {
                    v108 = (v72 - v107);
                    if (v75 >= v108)
                    {
                      v109 = 0;
                      v110 = a3 + (v107 & a4);
                      v111 = v20 >> 3;
                      do
                      {
                        v112 = *(_QWORD *)((char *)v76 + v109);
                        v113 = *(_QWORD *)(v110 + v109);
                        if (v112 != v113)
                        {
                          v109 += __clz(__rbit64(v113 ^ v112)) >> 3;
                          goto LABEL_145;
                        }
                        v109 += 8;
                        --v111;
                      }
                      while (v111);
                      if ((v20 & 7) != 0)
                      {
                        v114 = 0;
                        v115 = v110 + v109;
                        do
                        {
                          if (*(unsigned __int8 *)(v115 + v114) != *((unsigned __int8 *)v76 + v109 + v114))
                            break;
                          ++v114;
                        }
                        while (v163 != v114);
                        v109 += v114;
                      }
LABEL_145:
                      v116 = 135 * v109 - 30 * (__clz(v108) ^ 0x1F) + 1920;
                      if (v116 > v85)
                        v117 = v109;
                      else
                        v117 = v71;
                      if (v116 <= v85)
                      {
                        v108 = v77;
                        v116 = v85;
                      }
                      v118 = v109 >= 4 && v109 > v71;
                      if (v118)
                        v71 = v117;
                      if (v118)
                        v77 = v108;
                      if (v118)
                        v85 = v116;
                    }
                  }
                }
                v104 = v105 + v102 * v104 + v103 * ~(_DWORD)result + 1;
                v101 += 4;
              }
              while (v101 <= v72);
              a6 = v169;
              *(_DWORD *)(v169 + 96) = v104;
              LOBYTE(v87) = v163;
            }
            *(_QWORD *)(a6 + 112) = v12 + 5;
          }
        }
        if (v85 < v33 + 175)
          break;
        ++v13;
        if (v68 <= 2)
        {
          v119 = v12 + 9;
          ++v68;
          v69 = v87 + 7;
          v168 = v77;
          v33 = v85;
          v28 = v71;
          ++v12;
          if (v119 < v164)
            continue;
        }
        goto LABEL_183;
      }
      v77 = v168;
      v71 = v28;
      v72 = v12;
LABEL_183:
      v123 = v72 + v159;
      if (v72 + v159 >= v167)
        v123 = v167;
      v124 = v123 + v158;
      if (v77 > v123 + v158)
        goto LABEL_186;
      v129 = *v166;
      if (v77 != v129)
        break;
      LOWORD(v125) = 0;
      LODWORD(v128) = 0;
      *(_DWORD *)v162 = v13;
      *(_DWORD *)(v162 + 4) = v71;
LABEL_195:
      *(_WORD *)(v162 + 14) = v125;
      *(_DWORD *)(v162 + 8) = v128;
      if (v13 > 5)
      {
        if (v13 > 0x81)
        {
          if (v13 > 0x841)
          {
            if (v13 >> 1 >= 0xC21)
            {
              if (v13 < 0x5842)
                LOWORD(v134) = 22;
              else
                LOWORD(v134) = 23;
            }
            else
            {
              LOWORD(v134) = 21;
            }
          }
          else
          {
            v134 = (__clz(v13 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v135 = (__clz(v13 - 2) ^ 0x1F) - 1;
          v134 = ((v13 - 2) >> v135) + 2 * v135 + 2;
        }
      }
      else
      {
        LOWORD(v134) = v13;
      }
      v142 = (unint64_t)v71 >> 1;
      if (v142 > 4)
      {
        if (v142 > 0x42)
        {
          if (v142 > 0x422)
            LOWORD(v143) = 23;
          else
            v143 = (__clz(v71 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v144 = (int)v71 - 6;
          v145 = (__clz(v144) ^ 0x1F) - 1;
          v143 = (v144 >> v145) + 2 * v145 + 4;
        }
      }
      else
      {
        LOWORD(v143) = v71 - 2;
      }
      v146 = v143 & 7 | (8 * (v134 & 7));
      if ((v125 & 0x3FF) != 0 || (unsigned __int16)v134 > 7u || (unsigned __int16)v143 > 0xFu)
      {
        v148 = 3 * ((unsigned __int16)v134 >> 3) + ((unsigned __int16)(v143 & 0xFFF8) >> 3);
        v147 = ((((0x520D40u >> (2 * v148)) & 0xC0) + (v148 << 6)) | v146) + 64;
      }
      else
      {
        LOWORD(v147) = v146 | 0x40;
        if ((v143 & 0xFFF8) == 0)
          LOWORD(v147) = v143 & 7 | (8 * (v134 & 7));
      }
      *(_WORD *)(v162 + 12) = v147;
      *a11 += v13;
      v149 = v72 + 2;
      v121 = v72 + v71;
      v150 = v161;
      if (v72 + v71 < v161)
        v150 = v72 + v71;
      if (v77 < v71 >> 2)
      {
        v151 = v121 - 4 * v77;
        if (v149 > v151)
          v151 = v72 + 2;
        if (v150 >= v151)
          v149 = v151;
        else
          v149 = v150;
      }
      v17 = v160 + 2 * v71 + v72;
      v162 += 16;
      if (v149 >= v150)
      {
        v13 = 0;
        v14 = v164;
      }
      else
      {
        v14 = v164;
        do
        {
          *(_DWORD *)(v18
                    + 4
                    * (((((unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a3 + (v149 & a4))) >> 32) >> 12)
                      + (v149 & 0x18)) & 0xFFFFF)) = v149;
          ++v149;
        }
        while (v150 != v149);
        v13 = 0;
      }
LABEL_244:
      v12 = v121;
      if (v121 + 8 >= v14)
        goto LABEL_257;
    }
    v137 = v166[1];
    if (v77 == v137)
    {
      v125 = 1;
      goto LABEL_187;
    }
    v138 = v77 + 3;
    v139 = v77 + 3 - v129;
    if (v139 > 6)
    {
      if (v138 - v137 > 6)
      {
        if (v77 == v166[2])
        {
          v125 = 2;
        }
        else if (v77 == v166[3])
        {
          v125 = 3;
        }
        else
        {
LABEL_186:
          v125 = v77 + 15;
        }
LABEL_187:
        if (v77 <= v124 && v125)
        {
          v166[3] = v166[2];
          *(_QWORD *)(v166 + 1) = *(_QWORD *)v166;
          *v166 = v77;
        }
        *(_DWORD *)v162 = v13;
        *(_DWORD *)(v162 + 4) = v71;
        v126 = *(unsigned int *)(a5 + 68);
        v127 = v126 + 16;
        if (v126 + 16 <= v125)
        {
          v130 = *(unsigned int *)(a5 + 64);
          v131 = v125 - v126 + (4 << v130) - 16;
          v132 = (__clz(v131) ^ 0x1F) - 1;
          v133 = ((v131 >> v132) & 1 | 2) << v132;
          v125 = ((v131 & ~(-1 << v130))
                + v127
                + ((((v131 >> v132) & 1 | (2 * (v132 - v130))) + 65534) << v130)) | ((v132 - v130) << 10);
          v128 = (v131 - v133) >> v130;
        }
        else
        {
          LODWORD(v128) = 0;
        }
        goto LABEL_195;
      }
      v140 = 4 * (v138 - v137);
      v141 = 266017486;
    }
    else
    {
      v140 = 4 * v139;
      v141 = 158663784;
    }
    v125 = (v141 >> v140) & 0xF;
    goto LABEL_187;
  }
  v162 = a9;
  v121 = a2;
LABEL_257:
  *a8 = v13 + v14 - v121;
  *a10 += (v162 - a9) >> 4;
  return result;
}

unint64_t sub_23679C4F8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, unint64_t *a9, uint64_t a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unsigned int v121;
  unint64_t v122;
  unsigned int v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  uint64_t v143;
  unint64_t v144;
  BOOL v145;
  unint64_t v146;
  BOOL v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unint64_t v154;
  unint64_t v155;
  _DWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  int v201;
  BOOL v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unint64_t v215;
  unsigned __int8 *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  int v225;
  int v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  unint64_t v230;
  int32x2_t v231;
  int v232;
  int32x4_t v233;
  int32x4_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unint64_t v245;
  int v246;
  int v247;
  int v248;
  unint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  int v266;
  int v267;
  unint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v296;
  uint64_t v297;
  char v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;

  v12 = a7;
  v13 = a2;
  v285 = *(_QWORD *)(a6 + 16);
  v14 = *a9;
  v288 = a2 + result;
  v271 = a2 + result - 7;
  if (result <= 7)
    v15 = a2;
  else
    v15 = a2 + result - 7;
  v16 = *(_DWORD *)(a6 + 8);
  v17 = 512;
  if (*(int *)(a6 + 4) < 9)
    v17 = 64;
  v276 = v17;
  v274 = v15;
  v275 = *(_QWORD *)(a6 + 104);
  v18 = *(_DWORD *)(a7 + 120);
  if (v18 >= 5)
  {
    v19 = (int32x4_t)vld1q_dup_f32((const float *)a8);
    *((int32x4_t *)a8 + 1) = vaddq_s32(v19, (int32x4_t)xmmword_2368AF3A0);
    *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v19.i8, (int32x2_t)0x3FFFFFFFDLL);
    if (v18 >= 0xB)
    {
      v20 = (const float *)(a8 + 1);
      v21 = (int32x4_t)vld1q_dup_f32(v20);
      *(int32x4_t *)(a8 + 10) = vaddq_s32(v21, (int32x4_t)xmmword_2368AF3A0);
      *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)0x3FFFFFFFDLL);
    }
  }
  if (result >= 9)
  {
    v22 = v17 + a2;
    v284 = (1 << v16) - 16;
    v279 = a5 + 256;
    v305 = *(_QWORD *)(a7 + 136);
    v287 = *(_QWORD *)(a7 + 144);
    v286 = *(_QWORD *)(a7 + 104);
    v278 = v275 + 1;
    v270 = 4 * v17;
    v273 = a2 + result - 1;
    v277 = a10;
    v283 = a6;
    while (1)
    {
      if (v13 >= v284)
        v23 = v284;
      else
        v23 = v13;
      v24 = v13 + v285;
      if (v13 + v285 >= v284)
        v24 = v284;
      v304 = v14;
      v299 = v24;
      if (!*(_DWORD *)(a6 + 632))
      {
        v27 = 0;
        v290 = 0;
        goto LABEL_24;
      }
      if (!v13)
        break;
      v25 = *(unsigned __int8 *)(a3 + ((v13 - 1) & a4));
      if (v13 == 1)
        goto LABEL_22;
      v26 = *(unsigned __int8 *)(a3 + ((v13 - 2) & a4));
LABEL_23:
      v290 = v25;
      v27 = *(unsigned __int8 *)(a6 + (*(_BYTE *)(v279 + v26) | *(_BYTE *)(a5 + v25)) + 637);
LABEL_24:
      v28 = v288 - v13;
      v293 = v27;
      v29 = *(_QWORD *)(a6 + 8 * v27 + 704);
      v294 = *(_QWORD *)(a6 + 80);
      v30 = v13 & a4;
      v31 = *(int *)(v12 + 120);
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v291 = 0;
        v35 = 2020;
        v36 = 2020;
        do
        {
          v37 = a8[v32];
          v38 = v13 - v37;
          v39 = v23 < v37 || v38 >= v13;
          v40 = v38 & a4;
          v41 = v33 + v30;
          v42 = v39 || v41 > a4;
          v43 = v40 + v33;
          v44 = v42 || v43 > a4;
          if (!v44 && *(unsigned __int8 *)(a3 + v41) == *(unsigned __int8 *)(a3 + v43))
          {
            v45 = a3 + v40;
            if (v28 < 8)
            {
              v50 = 0;
              v51 = (unsigned __int8 *)(a3 + v30);
LABEL_57:
              if ((v28 & 7) != 0)
              {
                v54 = v28 & 7 | v50;
                v55 = v28 & 7;
                while (*(unsigned __int8 *)(v45 + v50) == *v51)
                {
                  ++v51;
                  ++v50;
                  if (!--v55)
                  {
                    v50 = v54;
                    break;
                  }
                }
              }
            }
            else
            {
              v46 = 0;
              v47 = (v288 - v13) >> 3;
              while (1)
              {
                v48 = *(_QWORD *)(a3 + v30 + v46);
                v49 = *(_QWORD *)(v45 + v46);
                if (v48 != v49)
                  break;
                v46 += 8;
                if (!--v47)
                {
                  v50 = v28 & 0xFFFFFFFFFFFFFFF8;
                  v51 = (unsigned __int8 *)(a3 + v30 + (v28 & 0xFFFFFFFFFFFFFFF8));
                  goto LABEL_57;
                }
              }
              v50 = v46 + (__clz(__rbit64(v49 ^ v48)) >> 3);
            }
            if (v50 > 2 || v32 <= 1 && v50 == 2)
            {
              v52 = 135 * v50 + 1935;
              if (v35 < v52)
              {
                if (v32)
                  v52 -= ((0x1CA10u >> (v32 & 0xE)) & 0xE) + 39;
                v53 = v291;
                if (v35 < v52)
                  v53 = a8[v32];
                v291 = v53;
                if (v35 < v52)
                {
                  v36 = v52;
                  v34 = v50;
                  v35 = v52;
                  v33 = v50;
                }
              }
            }
          }
          ++v32;
        }
        while (v32 != v31);
      }
      else
      {
        v291 = 0;
        v34 = 0;
        v33 = 0;
        v36 = 2020;
        v35 = 2020;
      }
      v302 = v22;
      v56 = (_DWORD *)(a3 + v30);
      v57 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + v30) & v286)) >> *(_DWORD *)(v12 + 96);
      v58 = *(unsigned int *)(v12 + 112);
      v59 = v287 + 4 * ((_DWORD)v57 << *(_DWORD *)(v12 + 116));
      v60 = *(unsigned __int16 *)(v305 + 2 * v57);
      v282 = *(_QWORD *)(v12 + 88);
      if (v60 >= v282)
        v61 = v60 - v282;
      else
        v61 = 0;
      if (v61 < v60)
      {
        v62 = *(unsigned __int16 *)(v305 + 2 * v57);
        while (1)
        {
          v63 = *(unsigned int *)(v59 + 4 * (--v62 & v58));
          v64 = v13 - v63;
          if (v13 - v63 > v23)
            goto LABEL_90;
          if (v33 + v30 <= a4)
          {
            v65 = v63 & a4;
            if (v65 + v33 <= a4 && *(unsigned __int8 *)(a3 + v33 + v30) == *(unsigned __int8 *)(a3 + v65 + v33))
              break;
          }
LABEL_82:
          if (v62 <= v61)
            goto LABEL_90;
        }
        v66 = a3 + v65;
        if (v28 < 8)
        {
          v71 = 0;
          v72 = (unsigned __int8 *)(a3 + v30);
LABEL_85:
          if ((v28 & 7) != 0)
          {
            v296 = v28 & 7 | v71;
            v74 = v28 & 7;
            while (*(unsigned __int8 *)(v66 + v71) == *v72)
            {
              ++v72;
              ++v71;
              if (!--v74)
              {
                v71 = v296;
                goto LABEL_78;
              }
            }
            goto LABEL_78;
          }
        }
        else
        {
          v67 = 0;
          v68 = (v288 - v13) >> 3;
          while (1)
          {
            v69 = *(_QWORD *)&v56[v67];
            v70 = *(_QWORD *)(v66 + v67 * 4);
            if (v69 != v70)
              break;
            v67 += 2;
            if (!--v68)
            {
              v71 = v28 & 0xFFFFFFFFFFFFFFF8;
              v72 = (unsigned __int8 *)v56 + (v28 & 0xFFFFFFFFFFFFFFF8);
              v12 = a7;
              goto LABEL_85;
            }
          }
          v71 = v67 * 4 + (__clz(__rbit64(v70 ^ v69)) >> 3);
LABEL_78:
          v12 = a7;
        }
        if (v71 >= 4)
        {
          v73 = __clz(v64) ^ 0x1F;
          if (v35 < 135 * v71 - 30 * v73 + 1920)
          {
            v291 = v64;
            v36 = 135 * v71 - 30 * v73 + 1920;
            v34 = v71;
            v35 = v36;
            v33 = v71;
          }
        }
        goto LABEL_82;
      }
LABEL_90:
      *(_DWORD *)(v59 + 4 * (v58 & v60)) = v13;
      *(_WORD *)(v305 + 2 * v57) = v60 + 1;
      if (v36 != 2020)
      {
        result = 0;
        a6 = v283;
        v77 = v34;
        goto LABEL_94;
      }
      v75 = *(_QWORD *)(v12 + 128);
      v76 = *(_QWORD *)(v75 + 40);
      a6 = v283;
      v77 = v34;
      if (*(_QWORD *)(v75 + 48) < v76 >> 7)
      {
        result = 0;
        v36 = 2020;
LABEL_94:
        v78 = v291;
        goto LABEL_95;
      }
      v297 = *(_QWORD *)(v75 + 48);
      result = 0;
      v82 = ((506832829 * *v56) >> 17) & 0x7FFE;
      v83 = *(_QWORD *)(v29 + 32);
      v300 = v278 + v299;
      v84 = 1;
      v85 = v34;
      v36 = 2020;
      v86 = v291;
      do
      {
        v87 = v84;
        *(_QWORD *)(v75 + 40) = ++v76;
        v88 = *(unsigned __int8 *)(v83 + v82);
        if (!*(_BYTE *)(v83 + v82) || v28 < v88)
          goto LABEL_102;
        v89 = *(unsigned __int16 *)(*(_QWORD *)(v29 + 24) + 2 * v82);
        v90 = *(unsigned int *)(*(_QWORD *)v29 + 4 * v88 + 32);
        v91 = *(_QWORD *)(*(_QWORD *)v29 + 168);
        v92 = (unsigned __int8 *)(v91 + v90 + v89 * *(unsigned __int8 *)(v83 + v82));
        if (v88 < 8)
        {
          v94 = 0;
LABEL_117:
          v100 = v88 & 7;
          if ((v88 & 7) != 0)
          {
            v101 = v94 | v100;
            while (*((unsigned __int8 *)v56 + v94) == *v92)
            {
              ++v92;
              ++v94;
              if (!--v100)
              {
                v98 = v101;
                goto LABEL_111;
              }
            }
          }
          v98 = v94;
        }
        else
        {
          v93 = 0;
          v94 = v88 & 0xF8;
          v95 = (unsigned __int8 *)(v91
                                  + v89 * (unint64_t)*(unsigned __int8 *)(v83 + v82)
                                  + (*(_BYTE *)(v83 + v82) & 0xF8)
                                  + v90);
          while (1)
          {
            v96 = *(_QWORD *)&v92[v93];
            v97 = *(_QWORD *)&v56[v93 / 4];
            if (v96 != v97)
              break;
            v93 += 8;
            if (v94 == v93)
            {
              v92 = v95;
              goto LABEL_117;
            }
          }
          v98 = v93 + (__clz(__rbit64(v97 ^ v96)) >> 3);
        }
LABEL_111:
        if (v98
          && v98 + *(unsigned int *)(v29 + 12) > v88
          && (v78 = v300
                  + v89
                  + ((((*(_QWORD *)(v29 + 16) >> (6 * (v88 - v98))) & 0x3FLL)
                    + 4 * (v88 - v98)) << *(_BYTE *)(*(_QWORD *)v29 + v88)),
              v78 <= v294)
          && (v99 = __clz(v78) ^ 0x1F, 135 * v98 - 30 * v99 + 1920 >= v36))
        {
          result = (v88 - v98);
          *(_QWORD *)(v75 + 48) = ++v297;
          v36 = 135 * v98 - 30 * v99 + 1920;
          v77 = v98;
        }
        else
        {
LABEL_102:
          v78 = v86;
          v77 = v85;
        }
        v84 = 0;
        ++v82;
        v85 = v77;
        v86 = v78;
      }
      while ((v87 & 1) != 0);
LABEL_95:
      if (v28 >= 0x20)
      {
        v80 = v78;
        v81 = *(_QWORD *)(v12 + 168);
        if (v81 <= v13)
        {
          v102 = v77;
          v103 = *(_DWORD *)(v12 + 180);
          v104 = *(_DWORD *)(v12 + 184);
          v105 = *(_DWORD *)(v12 + 152);
          v79 = v36;
          do
          {
            v106 = *(unsigned __int8 *)(a3 + (v81 & a4));
            v107 = *(unsigned __int8 *)(a3 + ((v81 + 32) & a4));
            if ((v105 & 0x3F000000) == 0)
            {
              v108 = *(_QWORD *)(v12 + 160);
              v109 = *(unsigned int *)(v108 + 4 * (v105 & 0x3FFFFFFF));
              *(_DWORD *)(v108 + 4 * (v105 & 0x3FFFFFFF)) = v81;
              if (v81 == v13 && (_DWORD)v109 != -1)
              {
                v110 = (v13 - v109);
                if (v23 >= v110)
                {
                  v111 = 0;
                  v112 = a3 + (v109 & a4);
                  v113 = (v288 - v13) >> 3;
                  do
                  {
                    v114 = *(_QWORD *)&v56[v111];
                    v115 = *(_QWORD *)(v112 + v111 * 4);
                    if (v114 != v115)
                    {
                      v116 = v111 * 4 + (__clz(__rbit64(v115 ^ v114)) >> 3);
                      goto LABEL_138;
                    }
                    v111 += 2;
                    --v113;
                  }
                  while (v113);
                  v116 = v28 & 0xFFFFFFFFFFFFFFF8;
                  if ((v28 & 7) != 0)
                  {
                    v117 = v28 & 7;
                    v116 = v28 & 0xFFFFFFFFFFFFFFF8;
                    while (*(unsigned __int8 *)(v112 + v116) == *((unsigned __int8 *)v56 + v116))
                    {
                      ++v116;
                      if (!--v117)
                      {
                        v116 = v288 - v13;
                        break;
                      }
                    }
                    v12 = a7;
                    a6 = v283;
                  }
LABEL_138:
                  v118 = 135 * v116 - 30 * (__clz(v110) ^ 0x1F) + 1920;
                  v119 = v118 > v79;
                  if (v118 > v79)
                    v120 = v110;
                  else
                    v120 = v80;
                  if (v118 > v79)
                  {
                    v121 = 0;
                  }
                  else
                  {
                    v118 = v79;
                    v121 = result;
                  }
                  if (v119)
                    v122 = v116;
                  else
                    v122 = v102;
                  if (v116 <= v102)
                  {
                    v120 = v80;
                    v118 = v79;
                    v121 = result;
                    v122 = v102;
                  }
                  if (v116 < 4)
                  {
                    result = result;
                  }
                  else
                  {
                    v80 = v120;
                    v79 = v118;
                    result = v121;
                  }
                  if (v116 >= 4)
                    v102 = v122;
                }
              }
            }
            v105 = v107 + v103 * v105 + v104 * ~v106 + 1;
            ++v81;
          }
          while (v81 <= v13);
          *(_DWORD *)(v12 + 152) = v105;
          v77 = v102;
        }
        else
        {
          v79 = v36;
        }
        *(_QWORD *)(v12 + 168) = v13 + 1;
        v78 = v80;
      }
      else
      {
        v79 = v36;
      }
      if (v79 < 0x7E5)
      {
        v22 = v302;
        v14 = v304 + 1;
        v222 = v13 + 1;
        if (v13 + 1 > v302)
        {
          if (v222 <= v302 + v270)
          {
            v245 = v13 + 9;
            if (v13 + 9 >= v271)
              v245 = v271;
            if (v222 < v245)
            {
              v246 = *(_DWORD *)(v12 + 96);
              v247 = *(_DWORD *)(v12 + 112);
              v248 = *(_DWORD *)(v12 + 116);
              result = 0x1FE35A7BD3579BD3;
              do
              {
                v249 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v222 & a4)) & v286)) >> v246;
                v250 = *(unsigned __int16 *)(v305 + 2 * v249);
                *(_WORD *)(v305 + 2 * v249) = v250 + 1;
                *(_DWORD *)(v287 + 4 * (((_DWORD)v249 << v248) + (unint64_t)(v247 & v250))) = v222;
                v14 += 2;
                v222 += 2;
              }
              while (v222 < v245);
            }
          }
          else
          {
            v223 = v13 + 17;
            if (v13 + 17 >= v271)
              v223 = v271;
            if (v222 < v223)
            {
              v224 = *(_DWORD *)(v12 + 96);
              v225 = *(_DWORD *)(v12 + 112);
              v226 = *(_DWORD *)(v12 + 116);
              result = 0x1FE35A7BD3579BD3;
              do
              {
                v227 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v222 & a4)) & v286)) >> v224;
                v228 = *(unsigned __int16 *)(v305 + 2 * v227);
                *(_WORD *)(v305 + 2 * v227) = v228 + 1;
                *(_DWORD *)(v287 + 4 * (((_DWORD)v227 << v226) + (unint64_t)(v225 & v228))) = v222;
                v14 += 4;
                v222 += 4;
              }
              while (v222 < v223);
            }
          }
        }
        goto LABEL_383;
      }
      v292 = v78;
      v123 = 0;
      v124 = v273 - v13;
      while (1)
      {
        --v28;
        v125 = v77 - 1;
        if (v77 - 1 >= v28)
          v125 = v28;
        if (*(int *)(a6 + 4) >= 5)
          v126 = 0;
        else
          v126 = v125;
        v127 = v13 + 1;
        if (v13 + 1 < v284)
          v128 = v13 + 1;
        else
          v128 = v284;
        v129 = v127 + v285;
        if (v127 + v285 >= v284)
          v129 = v284;
        v289 = v129;
        v298 = v124;
        if (*(_DWORD *)(a6 + 632))
        {
          v130 = *(unsigned __int8 *)(a6
                                    + (*(_BYTE *)(v279 + v290) | *(_BYTE *)(a5
                                                                                           + *(unsigned __int8 *)(a3 + (v13 & a4))))
                                    + 637);
          v290 = *(unsigned __int8 *)(a3 + (v13 & a4));
        }
        else
        {
          v130 = v293;
        }
        v281 = result;
        v301 = v77;
        v303 = v79;
        v293 = v130;
        v131 = *(_QWORD *)(a6 + 8 * v130 + 704);
        v132 = v127 & a4;
        v133 = *(int *)(v12 + 120);
        if ((_DWORD)v133)
        {
          v134 = 0;
          v135 = 0;
          v136 = 0;
          v137 = a3 + v132;
          v138 = 2020;
          v139 = 2020;
          do
          {
            v140 = a8[v134];
            v141 = v127 - v140;
            v142 = v128 < v140 || v141 >= v127;
            v143 = v141 & a4;
            v144 = v126 + v132;
            v145 = v142 || v144 > a4;
            v146 = v143 + v126;
            v147 = v145 || v146 > a4;
            if (!v147 && *(unsigned __int8 *)(a3 + v144) == *(unsigned __int8 *)(a3 + v146))
            {
              v148 = a3 + v143;
              if (v28 < 8)
              {
                v149 = 0;
                v153 = (unsigned __int8 *)(a3 + v132);
LABEL_204:
                if ((v28 & 7) != 0)
                {
                  v155 = v28 & 7;
                  do
                  {
                    if (*(unsigned __int8 *)(v148 + v149) != *v153)
                      break;
                    ++v153;
                    ++v149;
                    --v155;
                  }
                  while (v155);
                }
              }
              else
              {
                v149 = 0;
                v150 = v28 >> 3;
                while (1)
                {
                  v151 = *(_QWORD *)(v137 + v149);
                  v152 = *(_QWORD *)(v148 + v149);
                  if (v151 != v152)
                    break;
                  v149 += 8;
                  if (!--v150)
                  {
                    v153 = (unsigned __int8 *)(v137 + v149);
                    goto LABEL_204;
                  }
                }
                v149 += __clz(__rbit64(v152 ^ v151)) >> 3;
              }
              if (v149 > 2 || v134 <= 1 && v149 == 2)
              {
                v154 = 135 * v149 + 1935;
                if (v138 < v154)
                {
                  if (v134)
                    v154 -= ((0x1CA10u >> (v134 & 0xE)) & 0xE) + 39;
                  if (v138 < v154)
                  {
                    v136 = v149;
                    v135 = a8[v134];
                    v139 = v154;
                    v138 = v154;
                    v126 = v149;
                  }
                }
              }
            }
            ++v134;
          }
          while (v134 != v133);
        }
        else
        {
          v136 = 0;
          v135 = 0;
          v139 = 2020;
          v138 = 2020;
        }
        v156 = (_DWORD *)(a3 + v132);
        v157 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + v132) & v286)) >> *(_DWORD *)(v12 + 96);
        v158 = *(unsigned int *)(v12 + 112);
        v159 = v287 + 4 * ((_DWORD)v157 << *(_DWORD *)(v12 + 116));
        v160 = *(unsigned __int16 *)(v305 + 2 * v157);
        if (v160 >= v282)
          v161 = v160 - v282;
        else
          v161 = 0;
        if (v161 < v160)
        {
          v162 = v28 & 7;
          v163 = *(unsigned __int16 *)(v305 + 2 * v157);
          do
          {
            v164 = *(unsigned int *)(v159 + 4 * (--v163 & v158));
            v165 = v127 - v164;
            if (v127 - v164 > v128)
              break;
            if (v126 + v132 <= a4)
            {
              v166 = v164 & a4;
              if (v166 + v126 <= a4 && *(unsigned __int8 *)(a3 + v126 + v132) == *(unsigned __int8 *)(a3 + v166 + v126))
              {
                v167 = a3 + v166;
                if (v28 < 8)
                {
                  v168 = 0;
                  v172 = (unsigned __int8 *)(a3 + v132);
LABEL_232:
                  if (v162)
                  {
                    v174 = v162;
                    do
                    {
                      v272 = v174;
                      if (*(unsigned __int8 *)(v167 + v168) != *v172)
                        break;
                      ++v172;
                      ++v168;
                      --v174;
                    }
                    while (v272 != 1);
                  }
                }
                else
                {
                  v168 = 0;
                  v169 = v28 >> 3;
                  while (1)
                  {
                    v170 = *(_QWORD *)((char *)v156 + v168);
                    v171 = *(_QWORD *)(v167 + v168);
                    if (v170 != v171)
                      break;
                    v168 += 8;
                    if (!--v169)
                    {
                      v172 = (unsigned __int8 *)v156 + v168;
                      v162 = v28 & 7;
                      goto LABEL_232;
                    }
                  }
                  v168 += __clz(__rbit64(v171 ^ v170)) >> 3;
                }
                if (v168 < 4)
                {
                  v162 = v28 & 7;
                }
                else
                {
                  v173 = __clz(v165) ^ 0x1F;
                  v162 = v28 & 7;
                  if (v138 < 135 * v168 - 30 * v173 + 1920)
                  {
                    v136 = v168;
                    v135 = v165;
                    v139 = 135 * v168 - 30 * v173 + 1920;
                    v138 = v139;
                    v126 = v168;
                  }
                }
              }
            }
          }
          while (v163 > v161);
        }
        *(_DWORD *)(v159 + 4 * (v158 & v160)) = v127;
        *(_WORD *)(v305 + 2 * v157) = v160 + 1;
        if (v139 == 2020)
        {
          v175 = *(_QWORD *)(a7 + 128);
          v177 = *(_QWORD *)(v175 + 40);
          v176 = *(_QWORD *)(v175 + 48);
          if (v176 >= v177 >> 7)
          {
            v178 = 0;
            v204 = ((506832829 * *v156) >> 17) & 0x7FFE;
            v205 = *(_QWORD *)(v131 + 32);
            v206 = 1;
            v139 = 2020;
            v207 = v135;
            v208 = v136;
            do
            {
              v209 = v206;
              *(_QWORD *)(v175 + 40) = ++v177;
              v210 = *(unsigned __int8 *)(v205 + v204);
              if (!*(_BYTE *)(v205 + v204) || v28 < v210)
                goto LABEL_301;
              v211 = *(unsigned __int16 *)(*(_QWORD *)(v131 + 24) + 2 * v204);
              v212 = *(unsigned int *)(*(_QWORD *)v131 + 4 * v210 + 32);
              v213 = *(_QWORD *)(*(_QWORD *)v131 + 168);
              v214 = (unsigned __int8 *)(v213 + v212 + v211 * *(unsigned __int8 *)(v205 + v204));
              if (v210 < 8)
              {
                v136 = 0;
LABEL_306:
                v220 = v210 & 7;
                if ((v210 & 7) != 0)
                {
                  v221 = v136 | v220;
                  while (*((unsigned __int8 *)v156 + v136) == *v214)
                  {
                    ++v214;
                    ++v136;
                    if (!--v220)
                    {
                      v136 = v221;
                      break;
                    }
                  }
                }
              }
              else
              {
                v215 = 0;
                v136 = v210 & 0xF8;
                v216 = (unsigned __int8 *)(v213
                                         + v211 * (unint64_t)*(unsigned __int8 *)(v205 + v204)
                                         + (*(_BYTE *)(v205 + v204) & 0xF8)
                                         + v212);
                while (1)
                {
                  v217 = *(_QWORD *)&v214[v215];
                  v218 = *(_QWORD *)&v156[v215 / 4];
                  if (v217 != v218)
                    break;
                  v215 += 8;
                  if (v136 == v215)
                  {
                    v214 = v216;
                    goto LABEL_306;
                  }
                }
                v136 = v215 + (__clz(__rbit64(v218 ^ v217)) >> 3);
              }
              if (v136
                && v136 + *(unsigned int *)(v131 + 12) > v210
                && (v135 = v278
                         + v289
                         + v211
                         + ((((*(_QWORD *)(v131 + 16) >> (6 * (v210 - v136))) & 0x3FLL)
                           + 4 * (v210 - v136)) << *(_BYTE *)(*(_QWORD *)v131 + v210)),
                    v135 <= v294)
                && (v219 = __clz(v135) ^ 0x1F, 135 * v136 - 30 * v219 + 1920 >= v139))
              {
                v178 = v210 - v136;
                *(_QWORD *)(v175 + 48) = ++v176;
                v139 = 135 * v136 - 30 * v219 + 1920;
              }
              else
              {
LABEL_301:
                v136 = v208;
                v135 = v207;
              }
              v206 = 0;
              ++v204;
              v207 = v135;
              v208 = v136;
            }
            while ((v209 & 1) != 0);
          }
          else
          {
            v178 = 0;
            v139 = 2020;
          }
        }
        else
        {
          v178 = 0;
        }
        v179 = v298 & 7;
        if (v28 >= 0x20)
        {
          v12 = a7;
          v182 = *(_QWORD *)(a7 + 168);
          a6 = v283;
          v181 = v303;
          if (v182 <= v127)
          {
            v184 = *(_DWORD *)(a7 + 180);
            v183 = *(_DWORD *)(a7 + 184);
            v185 = *(_DWORD *)(a7 + 152);
            do
            {
              v186 = *(unsigned __int8 *)(a3 + (v182 & a4));
              v187 = *(unsigned __int8 *)(a3 + ((v182 + 32) & a4));
              if ((v185 & 0x3F000000) == 0)
              {
                v188 = *(_QWORD *)(v12 + 160);
                v189 = *(unsigned int *)(v188 + 4 * (v185 & 0x3FFFFFFF));
                *(_DWORD *)(v188 + 4 * (v185 & 0x3FFFFFFF)) = v182;
                if (v182 == v127 && (_DWORD)v189 != -1)
                {
                  v190 = (v127 - v189);
                  if (v128 >= v190)
                  {
                    v191 = 0;
                    v192 = a3 + (v189 & a4);
                    v193 = v28 >> 3;
                    do
                    {
                      v194 = *(_QWORD *)((char *)v156 + v191);
                      v195 = *(_QWORD *)(v192 + v191);
                      if (v194 != v195)
                      {
                        v191 += __clz(__rbit64(v195 ^ v194)) >> 3;
                        goto LABEL_258;
                      }
                      v191 += 8;
                      --v193;
                    }
                    while (v193);
                    if ((v28 & 7) != 0)
                    {
                      v196 = 0;
                      v197 = v192 + v191;
                      do
                      {
                        if (*(unsigned __int8 *)(v197 + v196) != *((unsigned __int8 *)v156 + v191 + v196))
                          break;
                        ++v196;
                      }
                      while (v179 != v196);
                      v191 += v196;
                      v12 = a7;
                      a6 = v283;
                      v181 = v303;
                    }
LABEL_258:
                    v198 = 135 * v191 - 30 * (__clz(v190) ^ 0x1F) + 1920;
                    v199 = v198 > v139;
                    if (v198 > v139)
                      v200 = v191;
                    else
                      v200 = v136;
                    if (v198 <= v139)
                    {
                      v190 = v135;
                      v198 = v139;
                    }
                    if (v199)
                      v201 = 0;
                    else
                      v201 = v178;
                    v202 = v191 >= 4 && v191 > v136;
                    if (v202)
                      v136 = v200;
                    if (v202)
                      v135 = v190;
                    if (v202)
                      v139 = v198;
                    if (v202)
                      v178 = v201;
                  }
                }
              }
              v185 = v187 + v184 * v185 + v183 * ~v186 + 1;
              ++v182;
            }
            while (v182 <= v127);
            *(_DWORD *)(v12 + 152) = v185;
          }
          v180 = v301;
          *(_QWORD *)(v12 + 168) = v13 + 2;
        }
        else
        {
          v12 = a7;
          a6 = v283;
          v180 = v301;
          v181 = v303;
        }
        if (v139 < v181 + 175)
          break;
        ++v304;
        if (v123 <= 2)
        {
          v203 = v13 + 9;
          ++v123;
          v124 = v179 + 7;
          v292 = v135;
          v79 = v139;
          LODWORD(result) = v178;
          v77 = v136;
          ++v13;
          if (v203 < v288)
            continue;
        }
        goto LABEL_322;
      }
      v229 = v13 + v285;
      if (v13 + v285 >= v284)
        v229 = v284;
      v289 = v229;
      v135 = v292;
      v178 = v281;
      v136 = v180;
      v127 = v13;
LABEL_322:
      result = 0x1FE35A7BD3579BD3;
      if (v135 > v289 + v275)
        goto LABEL_323;
      v235 = *a8;
      if (v135 != v235)
      {
        v251 = a8[1];
        if (v135 == v251)
        {
          v230 = 1;
          goto LABEL_324;
        }
        v252 = v135 + 3 - v235;
        if (v252 > 6)
        {
          v255 = v135 + 3 - v251;
          if (v255 > 6)
          {
            if (v135 == a8[2])
            {
              v230 = 2;
            }
            else if (v135 == a8[3])
            {
              v230 = 3;
            }
            else
            {
LABEL_323:
              v230 = v135 + 15;
            }
LABEL_324:
            if (v135 <= v289 + v275)
            {
              if (v230)
              {
                a8[3] = a8[2];
                v231 = *(int32x2_t *)a8;
                *(_QWORD *)(a8 + 1) = *(_QWORD *)a8;
                *a8 = v135;
                v232 = *(_DWORD *)(v12 + 120);
                if (v232 >= 5)
                {
                  v233 = vdupq_n_s32(v135);
                  *((int32x4_t *)a8 + 1) = vaddq_s32(v233, (int32x4_t)xmmword_2368AF3A0);
                  *((int32x2_t *)a8 + 4) = vadd_s32(*(int32x2_t *)v233.i8, (int32x2_t)0x3FFFFFFFDLL);
                  if (v232 >= 0xB)
                  {
                    v234 = vdupq_lane_s32(v231, 0);
                    *(int32x4_t *)(a8 + 10) = vaddq_s32(v234, (int32x4_t)xmmword_2368AF3A0);
                    *((int32x2_t *)a8 + 7) = vadd_s32(*(int32x2_t *)v234.i8, (int32x2_t)0x3FFFFFFFDLL);
                  }
                }
              }
            }
            goto LABEL_331;
          }
          v253 = 4 * v255;
          v254 = 266017486;
        }
        else
        {
          v253 = 4 * v252;
          v254 = 158663784;
        }
        v230 = (v254 >> v253) & 0xF;
        goto LABEL_324;
      }
      v230 = 0;
LABEL_331:
      *(_DWORD *)v277 = v304;
      *(_DWORD *)(v277 + 4) = v136 | (v178 << 25);
      v236 = *(unsigned int *)(a6 + 68);
      v237 = v236 + 16;
      if (v236 + 16 <= v230)
      {
        v239 = *(unsigned int *)(a6 + 64);
        v240 = v230 - v236 + (4 << v239) - 16;
        v241 = (__clz(v240) ^ 0x1F) - 1;
        v242 = ((v240 >> v241) & 1 | 2) << v241;
        v230 = ((v240 & ~(-1 << v239))
              + v237
              + ((((v240 >> v241) & 1 | (2 * (v241 - v239))) + 65534) << v239)) | ((v241 - v239) << 10);
        v238 = (v240 - v242) >> v239;
      }
      else
      {
        LODWORD(v238) = 0;
      }
      *(_WORD *)(v277 + 14) = v230;
      *(_DWORD *)(v277 + 8) = v238;
      if (v304 > 5)
      {
        if (v304 > 0x81)
        {
          if (v304 > 0x841)
          {
            if (v304 >> 1 >= 0xC21)
            {
              if (v304 < 0x5842)
                LOWORD(v243) = 22;
              else
                LOWORD(v243) = 23;
            }
            else
            {
              LOWORD(v243) = 21;
            }
          }
          else
          {
            v243 = (__clz(v304 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v244 = (__clz(v304 - 2) ^ 0x1F) - 1;
          v243 = ((v304 - 2) >> v244) + 2 * v244 + 2;
        }
      }
      else
      {
        LOWORD(v243) = v304;
      }
      v256 = v178 + (int)v136;
      if (v256 > 9)
      {
        if (v256 > 0x85)
        {
          if (v256 > 0x845)
            LOWORD(v257) = 23;
          else
            v257 = (__clz(v256 - 70) ^ 0x1F) + 12;
        }
        else
        {
          v258 = v256 - 6;
          v259 = (__clz(v258) ^ 0x1F) - 1;
          v257 = (v258 >> v259) + 2 * v259 + 4;
        }
      }
      else
      {
        LOWORD(v257) = v178 + v136 - 2;
      }
      v260 = v257 & 7 | (8 * (v243 & 7));
      if ((v230 & 0x3FF) != 0 || (unsigned __int16)v243 > 7u || (unsigned __int16)v257 > 0xFu)
      {
        v262 = 3 * ((unsigned __int16)v243 >> 3) + ((unsigned __int16)(v257 & 0xFFF8) >> 3);
        v261 = ((((0x520D40u >> (2 * v262)) & 0xC0) + (v262 << 6)) | v260) + 64;
      }
      else
      {
        LOWORD(v261) = v260 | 0x40;
        if ((v257 & 0xFFF8) == 0)
          LOWORD(v261) = v257 & 7 | (8 * (v243 & 7));
      }
      *(_WORD *)(v277 + 12) = v261;
      v263 = v274;
      *a12 += v304;
      v264 = v127 + 2;
      v222 = v127 + v136;
      if (v127 + v136 < v274)
        v263 = v127 + v136;
      if (v135 < v136 >> 2)
      {
        if (v264 <= v222 - 4 * v135)
          v264 = v222 - 4 * v135;
        if (v263 < v264)
          v264 = v263;
      }
      v22 = v276 + 2 * v136 + v127;
      v277 += 16;
      if (v264 < v263)
      {
        v265 = *(_DWORD *)(v12 + 96);
        v266 = *(_DWORD *)(v12 + 112);
        v267 = *(_DWORD *)(v12 + 116);
        do
        {
          v268 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)(a3 + (v264 & a4)) & v286)) >> v265;
          v269 = *(unsigned __int16 *)(v305 + 2 * v268);
          *(_WORD *)(v305 + 2 * v268) = v269 + 1;
          *(_DWORD *)(v287 + 4 * (((_DWORD)v268 << v267) + (unint64_t)(v266 & v269))) = v264++;
        }
        while (v263 != v264);
      }
      v14 = 0;
LABEL_383:
      v13 = v222;
      if (v222 + 8 >= v288)
        goto LABEL_390;
    }
    v25 = 0;
LABEL_22:
    v26 = 0;
    goto LABEL_23;
  }
  v277 = a10;
  v222 = a2;
LABEL_390:
  *a9 = v14 + v288 - v222;
  *a11 += (v277 - a10) >> 4;
  return result;
}

uint64_t sub_23679DAA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int16 v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v44;
  unsigned int v45;
  uint64_t v46;

  v46 = result;
  v8 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v8 == -1)
  {
    v9 = 0;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v11 = (1 << *(_DWORD *)(a6 + 8)) - 16;
    v12 = *(_QWORD *)(a6 + 16) + a2;
    v13 = *(_QWORD *)(a6 + 104);
    v14 = a7 + 8;
    do
    {
      v15 = (unsigned int *)(a3 + 16 * (v9 + v8));
      v16 = *v15;
      v17 = v15[2];
      v8 = v15[3];
      v18 = v17 & 0x7FFFFFF;
      if (v10)
      {
        v19 = v17 & 0x7FFFFFF;
      }
      else
      {
        v19 = *a5 + v18;
        *a5 = 0;
      }
      v20 = v16 & 0x1FFFFFF;
      v21 = v9 + v18;
      v22 = v15[1];
      v23 = (v16 & 0x1FFFFFF) - (v16 >> 25) + 9;
      v24 = v12 + v21;
      if (v12 + v21 >= v11)
        v24 = v11;
      v25 = v17 >> 27;
      if (v25)
        v26 = v25 - 1;
      else
        v26 = (v22 + 15);
      *(_DWORD *)(v14 - 8) = v19;
      *(_DWORD *)(v14 - 4) = v20 | ((v23 - v16) << 25);
      v27 = *(unsigned int *)(a6 + 68);
      v28 = v27 + 16;
      if (v27 + 16 <= v26)
      {
        v31 = *(_DWORD *)(a6 + 64);
        v32 = v26 - v27 + (4 << v31) - 16;
        v33 = (__clz(v32) ^ 0x1F) - 1;
        result = (v32 & ~(-1 << v31))
               + v28
               + ((((v32 >> v33) & 1 | (2 * (v33 - v31))) + 65534) << v31);
        v30 = ((v32 & ~(-1 << v31)) + v28 + ((((v32 >> v33) & 1 | (2 * (v33 - v31))) + 65534) << v31)) | (((_WORD)v33 - (_WORD)v31) << 10);
        v29 = (v32 - (((v32 >> v33) & 1 | 2) << v33)) >> v31;
      }
      else
      {
        LODWORD(v29) = 0;
        v30 = v26;
      }
      *(_WORD *)(v14 + 6) = v30;
      *(_DWORD *)v14 = v29;
      if (v19 > 5)
      {
        if (v19 > 0x81)
        {
          if (v19 > 0x841)
          {
            if (v19 >> 1 >= 0xC21)
            {
              if (v19 < 0x5842)
                LOWORD(v34) = 22;
              else
                LOWORD(v34) = 23;
            }
            else
            {
              LOWORD(v34) = 21;
            }
          }
          else
          {
            v34 = (__clz(v19 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v35 = (__clz(v19 - 2) ^ 0x1F) - 1;
          v34 = ((v19 - 2) >> v35) + 2 * v35 + 2;
        }
      }
      else
      {
        LOWORD(v34) = v19;
      }
      if (v23 > 9)
      {
        v37 = (__clz(v23 - 70) ^ 0x1F) + 12;
        if (v23 > 0x845)
          LOWORD(v37) = 23;
        v38 = (__clz(v23 - 6) ^ 0x1F) - 1;
        v39 = ((unint64_t)(int)(v23 - 6) >> v38) + 2 * v38 + 4;
        if (v23 <= 0x85)
          v36 = v39;
        else
          v36 = v37;
      }
      else
      {
        v36 = v23 - 2;
      }
      v40 = v30 & 0x3FF;
      v41 = v36 & 7 | (8 * (v34 & 7));
      if (v40)
        v42 = 1;
      else
        v42 = (unsigned __int16)v34 > 7u;
      if (v42 || v36 > 0xFu)
      {
        v44 = 3 * ((unsigned __int16)v34 >> 3) + ((unsigned __int16)(v36 & 0xFFF8) >> 3);
        v45 = ((((0x520D40u >> (2 * v44)) & 0xC0) + (v44 << 6)) | v41) + 64;
      }
      else if ((v36 & 0xFFF8) != 0)
      {
        LOWORD(v45) = v41 | 0x40;
      }
      else
      {
        LOWORD(v45) = v36 & 7 | (8 * (v34 & 7));
      }
      *(_WORD *)(v14 + 4) = v45;
      if (v24 + v13 >= v22 && (_DWORD)v26)
      {
        *(_DWORD *)(a4 + 12) = *(_DWORD *)(a4 + 8);
        *(_QWORD *)(a4 + 4) = *(_QWORD *)a4;
        *(_DWORD *)a4 = v22;
      }
      *a8 += v19;
      v9 = v21 + v20;
      v14 += 16;
      --v10;
    }
    while (v8 != 0xFFFFFFFFLL);
  }
  *a5 += v46 - v9;
  return result;
}

uint64_t sub_23679DDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  *(_QWORD *)(a2 + 2848) = a4;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * a4 + 8);
  if (!v7)
    goto LABEL_7;
  *(_QWORD *)(a2 + 2832) = v7;
  v8 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v8)
  {
    result = 0;
    goto LABEL_6;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v8);
  if (!result)
LABEL_7:
    exit(1);
  LODWORD(v8) = *(_DWORD *)(a3 + 12);
LABEL_6:
  *(_QWORD *)(a2 + 2816) = result;
  *(_DWORD *)(a2 + 2824) = v8;
  return result;
}

void sub_23679DE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  float v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unint64_t i;
  double v61;
  float v62;
  uint64_t v63;
  uint64_t j;
  unint64_t v65;
  double v66;
  float v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 2816);
  v9 = *(_QWORD *)(a1 + 2848);
  v10 = (char *)(a1 + 2856);
  v69 = *(_DWORD **)(a1 + 2832);
  v70 = v69 + 1;
  if (sub_2367BE1BC(a3, a2, a4, v9))
  {
    v71 = 0;
    v72 = 0;
    v73 = 0;
    if (v9)
    {
      v11 = 0;
      v12 = a2;
      v13 = v9;
      do
      {
        if (*(char *)(a3 + (v12 & a4)) < 0)
        {
          v15 = 2 * (v11 > 0xDF);
          if (*(unsigned __int8 *)(a3 + (v12 & a4)) <= 0xBFu)
            v14 = v15;
          else
            v14 = 1;
        }
        else
        {
          v14 = 0;
        }
        v11 = *(unsigned __int8 *)(a3 + (v12 & a4));
        ++*(&v71 + v14);
        ++v12;
        --v13;
      }
      while (v13);
      v16 = (unint64_t)(v72 + v73) > 0x18;
    }
    else
    {
      v16 = 0;
    }
    v68 = v8;
    if (v9 >= 0x1EF)
      v29 = 495;
    else
      v29 = v9;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    bzero(v10, 0x1800uLL);
    if (v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a2;
      do
      {
        v33 = *(char *)(a3 + (v32 & a4));
        v34 = *(unsigned __int8 *)(a3 + (v32 & a4));
        ++*(_QWORD *)&v10[(8 * v34) | (v31 << 11)];
        ++*(&v71 + v31);
        v31 = v30 >= 0xE0 && v16;
        if (v33 > 0xBFu)
          v31 = v16;
        if (v33 >= 0)
          v31 = 0;
        ++v32;
        v30 = v34;
        --v29;
      }
      while (v29);
    }
    if (v9)
    {
      v35 = 0;
      v36 = 2000;
      do
      {
        if (v35 >= 0x1EF)
        {
          if (v35 != 495
            && ((v37 = a2 + v35, v35 >= 0x1F1) ? (v38 = *(unsigned __int8 *)(a3 + ((v37 - 497) & a4))) : (v38 = 0),
                v39 = *(unsigned __int8 *)(a3 + ((v37 - 496) & a4)),
                (v39 & 0x80) != 0))
          {
            v40 = v16;
            if (v39 <= 0xBF)
              v40 = v38 >= 0xE0 && v16;
          }
          else
          {
            v40 = 0;
          }
          v41 = (8 * *(unsigned __int8 *)(a3 + ((a2 + v35 - 495) & a4))) | (v40 << 11);
          --*(_QWORD *)&v10[v41];
          --*(&v71 + v40);
        }
        if (v35 + 495 < v9)
        {
          v42 = *(unsigned __int8 *)(a3 + ((a2 + v35 + 493) & a4)) >= 0xE0u && v16;
          if (*(unsigned __int8 *)(a3 + ((a2 + v35 + 494) & a4)) > 0xBFu)
            v42 = v16;
          if (*(char *)(a3 + ((a2 + v35 + 494) & a4)) >= 0)
            v42 = 0;
          v43 = (8 * *(unsigned __int8 *)(a3 + ((a2 + v35 + 495) & a4))) | (v42 << 11);
          ++*(_QWORD *)&v10[v43];
          ++*(&v71 + v42);
        }
        if (v35)
        {
          v44 = a2 + v35;
          if (v35 == 1)
            v45 = 0;
          else
            v45 = *(unsigned __int8 *)(a3 + ((v44 - 2) & a4));
          v47 = *(unsigned __int8 *)(a3 + ((v44 - 1) & a4));
          v48 = v45 >= 0xE0 && v16;
          if (v47 > 0xBF)
            v48 = v16;
          v46 = (v47 & 0x80) != 0 && v48;
        }
        else
        {
          v46 = 0;
        }
        if (*(_QWORD *)&v10[(8 * *(unsigned __int8 *)(a3 + ((a2 + v35) & a4))) | (v46 << 11)] <= 1uLL)
          v49 = 1;
        else
          v49 = *(_QWORD *)&v10[(8 * *(unsigned __int8 *)(a3 + ((a2 + v35) & a4))) | (v46 << 11)];
        v50 = *(&v71 + v46);
        if (v50 > 0xFF)
          v51 = log2((double)v50);
        else
          v51 = dbl_236925608[v50];
        if (v49 > 0xFF)
          v52 = log2((double)v49);
        else
          v52 = dbl_236925608[v49];
        v53 = v51 - v52 + 0.02905;
        if (v53 < 1.0)
          v53 = v53 * 0.5 + 0.5;
        if (v35 <= 0x7CF)
          v53 = (double)v36 / -2000.0 * 0.35 + 0.7 + v53;
        v54 = v53;
        *(float *)&v70[v35++] = v54;
        --v36;
      }
      while (v9 != v35);
    }
  }
  else
  {
    if (v9 >= 0x7D0)
      v17 = 2000;
    else
      v17 = v9;
    bzero(v10, 0x800uLL);
    if (v17)
    {
      v18 = a2;
      v19 = v17;
      do
      {
        ++*(_QWORD *)&v10[8 * *(unsigned __int8 *)(a3 + (v18++ & a4))];
        --v19;
      }
      while (v19);
    }
    if (!v9)
    {
      *v69 = 0;
      goto LABEL_106;
    }
    v68 = v8;
    v20 = 0;
    do
    {
      if (v20 >= 0x7D0)
      {
        v21 = *(unsigned __int8 *)(a3 + ((a2 + v20 - 2000) & a4));
        --*(_QWORD *)&v10[8 * v21];
        --v17;
      }
      v22 = v20 + 2000;
      if (v20 + 2000 < v9)
      {
        v23 = *(unsigned __int8 *)(a3 + ((a2 + v20 + 2000) & a4));
        ++*(_QWORD *)&v10[8 * v23];
        ++v17;
      }
      if (*(_QWORD *)&v10[8 * *(unsigned __int8 *)(a3 + ((a2 + v20) & a4))] <= 1uLL)
        v24 = 1;
      else
        v24 = *(_QWORD *)&v10[8 * *(unsigned __int8 *)(a3 + ((a2 + v20) & a4))];
      if (v17 > 0xFF)
        v25 = log2((double)v17);
      else
        v25 = dbl_236925608[v17];
      if (v24 > 0xFF)
        v26 = log2((double)v24);
      else
        v26 = dbl_236925608[v24];
      v27 = v25 - v26 + 0.029;
      if (v27 < 1.0)
        v27 = v27 * 0.5 + 0.5;
      v28 = v27;
      *(float *)&v70[v20++] = v28;
    }
    while (v22 - 1999 != v9);
  }
  v8 = v68;
  *v69 = 0;
  if (v9)
  {
    v55 = (float *)(v69 + 1);
    v56 = 0.0;
    v57 = 0.0;
    do
    {
      v58 = v57 + *v55;
      v59 = v56 + v58;
      *v55++ = v56 + v58;
      v57 = v58 - (float)((float)(v56 + v58) - v56);
      v56 = v59;
      --v9;
    }
    while (v9);
  }
LABEL_106:
  for (i = 0; i != 704; ++i)
  {
    if (i > 0xF4)
      v61 = log2((double)(i + 11));
    else
      v61 = dbl_236925608[i + 11];
    v62 = v61;
    *(float *)(a1 + 4 * i) = v62;
  }
  v63 = *(unsigned int *)(a1 + 2824);
  if ((_DWORD)v63)
  {
    for (j = 0; j != v63; ++j)
    {
      v65 = (j + 20);
      if (v65 > 0xFF)
        v66 = log2((double)v65);
      else
        v66 = dbl_236925608[v65];
      v67 = v66;
      *(float *)(v8 + 4 * j) = v67;
    }
  }
  *(_DWORD *)(a1 + 2840) = 1079863124;
}

_QWORD *sub_23679E464(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  for (; a3; ++result)
  {
    if (!a5)
      break;
    v5 = *((_DWORD *)a2 + 1) >> 5;
    v6 = *((_DWORD *)a4 + 1);
    if (v5 < v6 >> 5 || v5 == v6 >> 5 && *(_DWORD *)a2 < *(_DWORD *)a4)
    {
      v7 = *a2++;
      *result = v7;
      --a3;
    }
    else
    {
      v8 = *a4++;
      *result = v8;
      --a5;
    }
  }
  for (; a3; --a3)
  {
    v9 = *a2++;
    *result++ = v9;
  }
  for (; a5; --a5)
  {
    v10 = *a4++;
    *result++ = v10;
  }
  return result;
}

unint64_t sub_23679E4EC(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *__src, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t result;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int16 v41;
  __int16 v42;
  unsigned int v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  float v76;
  BOOL v78;
  float *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  char v85;
  float v86;
  float v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  BOOL v106;
  float v108;
  uint64_t v109;
  int v110;
  float *v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  float v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v129;
  unint64_t v130;

  v15 = a3;
  v17 = a12;
  v18 = *(_QWORD *)(a6 + 16);
  v126 = (a3 + a2) & a5;
  if (a3 + a2 >= a7)
    v19 = a7;
  else
    v19 = a3 + a2;
  v123 = a3 + a2;
  v20 = v18 + a3 + a2;
  if (v20 >= a7)
    v20 = a7;
  v124 = v20;
  v125 = v19;
  v130 = a1 - a3;
  v121 = *(_DWORD *)(a6 + 4);
  if (v121 <= 10)
    v21 = 150;
  else
    v21 = 325;
  v127 = *(_QWORD *)(a6 + 104);
  sub_23679ED90((void *)(v18 + a2), a3, a7, v127, __src, a11, a12, a13);
  if (v15 + 2 <= a1)
  {
    v25 = a12 + 32 * (-*(_DWORD *)(a12 + 256) & 7);
    v26 = (float)(*(float *)(v25 + 28) + *(float *)(a11 + 2840))
        + (float)(*(float *)(*(_QWORD *)(a11 + 2832) + 4 * v15)
                - *(float *)(*(_QWORD *)(a11 + 2832) + 4 * *(_QWORD *)v25));
    v27 = (float *)(a13 + 16 * v15 + 44);
    v22 = 2;
    v28 = 4;
    v29 = 10;
    v24 = v127;
    v23 = a4;
    do
    {
      if (*v27 > v26)
        break;
      if (++v22 == v29)
      {
        v26 = v26 + 1.0;
        v30 = v28;
      }
      else
      {
        v30 = 0;
      }
      v28 <<= v22 == v29;
      v29 += v30;
      v27 += 4;
    }
    while (v15 + v22 <= a1);
  }
  else
  {
    v22 = 2;
    v24 = v127;
    v23 = a4;
  }
  result = 0;
  v32 = 0;
  v33 = v22 - 1;
  v34 = v124 + v24;
  v118 = v22;
  v119 = (unsigned __int8 *)(v23 + v126);
  v116 = (unsigned __int8 *)(v23 + v126 + (v130 & 0xFFFFFFFFFFFFFFF8));
  v120 = v22 - 1;
  v129 = v15;
  while (1)
  {
    v35 = *(_QWORD *)(v17 + 256);
    v36 = 8;
    if (v35 < 8)
      v36 = *(_QWORD *)(v17 + 256);
    if (v32 >= v36)
      return result;
    v37 = ((_BYTE)v32 - (_BYTE)v35) & 7;
    v38 = v15 - *(_QWORD *)(v17 + 32 * v37);
    if (v38 > 5)
    {
      if (v38 > 0x81)
      {
        if (v38 < 0x5842)
          v41 = 22;
        else
          v41 = 23;
        if (v38 >> 1 >= 0xC21)
          v42 = v41;
        else
          v42 = 21;
        v43 = (__clz(v38 - 66) ^ 0x1F) + 10;
        if (v38 <= 0x841)
          LOWORD(v39) = v43;
        else
          LOWORD(v39) = v42;
      }
      else
      {
        v40 = (__clz(v38 - 2) ^ 0x1F) - 1;
        LODWORD(v39) = ((v38 - 2) >> v40) + 2 * v40 + 2;
      }
    }
    else
    {
      v39 = v15 - *(_QWORD *)(v17 + 32 * v37);
    }
    v122 = v32;
    v44 = (float)(*(float *)(v17 + 32 * v37 + 24) + (float)dword_2369254E8[(unsigned __int16)v39])
        + (float)(*(float *)(*(_QWORD *)(a11 + 2832) + 4 * v15) - **(float **)(a11 + 2832));
    if (v33 < v130)
    {
      v45 = 0;
      while (v33 + v126 <= a5)
      {
        v46 = dword_2368D211C[v45] + (uint64_t)*(int *)(v17 + 32 * v37 + 4 * dword_2368D20DC[v45] + 8);
        if (v34 >= v46)
        {
          v47 = *(unsigned __int8 *)(v23 + v33 + v126);
          if (v125 >= v46)
          {
            v66 = (v123 - v46) & a5;
            v67 = v66 + v33;
            v68 = v123 < v46 || v67 > a5;
            if (v68 || v47 != *(unsigned __int8 *)(v23 + v67))
              goto LABEL_58;
            v69 = v23 + v66;
            if (v130 < 8)
            {
              v61 = 0;
              v75 = v119;
LABEL_106:
              v94 = v130 & 7;
              if ((v130 & 7) != 0)
              {
                v95 = v130 & 7 | v61;
                while (*(unsigned __int8 *)(v69 + v61) == *v75)
                {
                  ++v75;
                  ++v61;
                  if (!--v94)
                  {
                    v61 = v95;
                    break;
                  }
                }
              }
            }
            else
            {
              v70 = 0;
              v71 = v130 >> 3;
              v72 = v119;
              while (1)
              {
                v73 = *(_QWORD *)&v72[v70];
                v74 = *(_QWORD *)(v69 + v70);
                if (v73 != v74)
                  break;
                v70 += 8;
                --v71;
                v72 = v119;
                if (!v71)
                {
                  v75 = v116;
                  v61 = v130 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_106;
                }
              }
              v61 = v70 + (__clz(__rbit64(v74 ^ v73)) >> 3);
            }
          }
          else
          {
            if (v124 >= v46)
              goto LABEL_58;
            v48 = *(_QWORD *)(a6 + 104);
            v49 = v48 + v124;
            v50 = 47;
            do
            {
              v51 = v50;
              v52 = *(_QWORD *)(a6 + 8 * v50++);
            }
            while (v49 >= v52 + v46);
            v53 = v52 + v46 - v49;
            v54 = v53 >= v130 ? v130 : v53;
            if (v33 >= v54)
              goto LABEL_58;
            v55 = a6 + 8 * (v51 - 47);
            v56 = *(_QWORD *)(v55 + 240);
            v57 = *(_QWORD *)(v55 + 368) + v46;
            v58 = v49 - v57;
            if (v47 != *(unsigned __int8 *)(v56 + v49 - v57 + v33))
              goto LABEL_58;
            if (v54 < 8)
            {
              v61 = 0;
              v65 = v119;
LABEL_99:
              v89 = v54 & 7;
              if ((v54 & 7) != 0)
              {
                v90 = v61 | v89;
                v91 = -(uint64_t)v89;
                v92 = (unsigned __int8 *)(v56 + v124 + v61 + v48 - v57);
                while (1)
                {
                  v93 = *v92++;
                  if (v93 != *v65)
                    break;
                  ++v65;
                  ++v61;
                  v106 = __CFADD__(v91++, 1);
                  if (v106)
                  {
                    v61 = v90;
                    break;
                  }
                }
              }
            }
            else
            {
              v59 = 0;
              v60 = v56 + v58;
              v61 = v54 & 0xFFFFFFFFFFFFFFF8;
              v62 = v119;
              v117 = -(uint64_t)(v54 >> 3);
              while (1)
              {
                v63 = *(_QWORD *)&v62[v59];
                v64 = *(_QWORD *)(v60 + v59);
                if (v63 != v64)
                  break;
                v59 += 8;
                v106 = __CFADD__(v117++, 1);
                v62 = v119;
                if (v106)
                {
                  v65 = &v119[v54 & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_99;
                }
              }
              v61 = v59 + (__clz(__rbit64(v64 ^ v63)) >> 3);
            }
          }
          if (v33 + 1 <= v61)
          {
            v76 = *(float *)(*(_QWORD *)(a11 + 2816) + 4 * v45);
            v78 = (unsigned __int16)v39 < 8u && v45 == 0;
            v79 = (float *)(a13 + 28 + 16 * (v129 + v33));
            v80 = v33;
            do
            {
              v81 = v80 + 1;
              if (v80 + 1 > 9)
              {
                if (v81 > 0x85)
                {
                  if (v81 > 0x845)
                  {
                    LOWORD(v82) = 23;
                    v84 = (8 * (v39 & 7)) | 7;
                    goto LABEL_89;
                  }
                  v82 = (__clz(v80 - 69) ^ 0x1F) + 12;
                }
                else
                {
                  v83 = (__clz(v80 - 5) ^ 0x1F) - 1;
                  v82 = ((v80 - 5) >> v83) + 2 * v83 + 4;
                }
              }
              else
              {
                LOWORD(v82) = v80 - 1;
              }
              v84 = v82 & 7 | (8 * (v39 & 7));
              v85 = !v78;
              if ((unsigned __int16)v82 > 0xFu)
                v85 = 1;
              if ((v85 & 1) == 0)
              {
                if ((v82 & 0xFFF8) != 0)
                  LOWORD(v84) = v84 | 0x40;
                goto LABEL_90;
              }
LABEL_89:
              v84 = ((((0x520D40u >> (2 * (3 * ((unsigned __int16)v39 >> 3) + ((unsigned __int16)(v82 & 0xFFF8) >> 3)))) & 0xC0)
                    + ((3 * ((unsigned __int16)v39 >> 3) + ((unsigned __int16)(v82 & 0xFFF8) >> 3)) << 6)) | v84)
                  + 64;
LABEL_90:
              if ((v84 & 0xFF80) != 0)
                v86 = v76;
              else
                v86 = -0.0;
              v87 = *(float *)(a11 + 4 * (unsigned __int16)v84)
                  + (float)((float)(v44 + v86) + (float)dword_2369255A8[(unsigned __int16)v82]);
              if (v87 < *v79)
              {
                *((_DWORD *)v79 - 3) = (v80 + 1) | 0x12000000;
                *((_DWORD *)v79 - 2) = v46;
                *((_DWORD *)v79 - 1) = (((_DWORD)v45 << 27) + 0x8000000) | v38;
                *v79 = v87;
                if (result <= v81)
                  result = v80 + 1;
              }
              v33 = v80 + 1;
              v88 = v80 + 2;
              v79 += 4;
              ++v80;
            }
            while (v88 <= v61);
          }
        }
LABEL_58:
        if (v45 <= 0xE)
        {
          ++v45;
          v17 = a12;
          v23 = a4;
          if (v33 < v130)
            continue;
        }
        break;
      }
    }
    if (v32 <= 1 && a9)
    {
      v96 = 0;
      v97 = v118;
      do
      {
        v98 = *(_QWORD *)(a10 + 8 * v96);
        LOWORD(v99) = v98 + 15;
        v100 = *(unsigned int *)(a6 + 68);
        v101 = v100 + 16;
        if (v100 + 16 <= (unint64_t)v98 + 15)
        {
          v102 = *(unsigned int *)(a6 + 64);
          v103 = v98 + ~v100 + (4 << v102);
          v104 = (__clz(v103) ^ 0x1F) - 1;
          v99 = ((v103 & ~(-1 << v102)) + v101 + ((((v103 >> v104) & 1 | (2 * (v104 - v102))) - 2) << v102)) | ((v104 - v102) << 10);
        }
        v105 = v98 >> 37;
        v106 = v98 >> 37 <= v21 && v34 >= v98;
        if (!v106 && v97 < v105)
          v97 = v98 >> 37;
        if (v97 <= v98 >> 37)
        {
          v108 = *(float *)(*(_QWORD *)(a11 + 2816) + 4 * (v99 & 0x3FF))
               + (float)(v44 + (float)((unsigned __int16)v99 >> 10));
          v109 = HIDWORD(v98) & 0x1F;
          if ((v98 & 0x1F00000000) == 0)
            v109 = v98 >> 37;
          v110 = ((_DWORD)v97 << 25) + 301989888;
          v111 = (float *)(a13 + 12 + 16 * (v129 + v97));
          do
          {
            if (v34 >= v98)
              v112 = v97;
            else
              v112 = v109;
            if (v112 > 9)
            {
              v113 = (__clz(v112 - 70) ^ 0x1F) + 12;
              if (v112 > 0x845)
                LOWORD(v113) = 23;
              v114 = (__clz(v112 - 6) ^ 0x1F) - 1;
              if (v112 <= 0x85)
                LOWORD(v113) = ((v112 - 6) >> v114) + 2 * v114 + 4;
            }
            else
            {
              LOWORD(v113) = v112 - 2;
            }
            v115 = *(float *)(a11
                            + 4
                            * (unsigned __int16)(((((0x520D40u >> (2
                                                                 * (3 * ((unsigned __int16)v39 >> 3)
                                                                  + ((unsigned __int16)(v113 & 0xFFF8) >> 3)))) & 0xC0)
                                                 + ((3 * ((unsigned __int16)v39 >> 3)
                                                   + ((unsigned __int16)(v113 & 0xFFF8) >> 3)) << 6)) | v113 & 7 | (8 * (v39 & 7)))
                                               + 64))
                 + (float)(v108 + (float)dword_2369255A8[(unsigned __int16)v113]);
            if (v115 < *v111)
            {
              *((_DWORD *)v111 - 3) = (v110 - ((_DWORD)v112 << 25)) | v97;
              *((_DWORD *)v111 - 2) = v98;
              *((_DWORD *)v111 - 1) = v38;
              *v111 = v115;
              if (result <= v97)
                result = v97;
            }
            ++v97;
            v110 += 0x2000000;
            v111 += 4;
          }
          while (v105 + 1 != v97);
          v97 = v105 + 1;
        }
        ++v96;
      }
      while (v96 != a9);
    }
    if (v121 >= 11)
    {
      ++v32;
      v23 = a4;
      v15 = v129;
      v17 = a12;
      v33 = v120;
      if (v122 < 4)
        continue;
    }
    return result;
  }
}

void *sub_23679ED90(void *result, unint64_t a2, uint64_t a3, uint64_t a4, void *__src, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  _OWORD *v28;
  unint64_t v29;
  float *v30;
  float *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v9 = (_DWORD *)(a8 + 16 * a2);
  v10 = v9 + 3;
  v11 = *((float *)v9 + 3);
  if (a2)
  {
    v12 = v9[1];
    v13 = *v9 & 0x1FFFFFF;
    v14 = v9[2];
    if (a4 + a3 < v12 || v12 + v13 > (unint64_t)result + a2 + a4)
      goto LABEL_10;
    v16 = v12 + 15;
    if (v14 >> 27)
      v16 = (v14 >> 27) - 1;
    if (!v16)
LABEL_10:
      v17 = *(unsigned int *)(a8 + 16 * (a2 - ((v14 & 0x7FFFFFF) + v13)) + 12);
    else
      v17 = a2;
  }
  else
  {
    v17 = 0;
  }
  *v10 = v17;
  v18 = *(float *)(*(_QWORD *)(a6 + 2832) + 4 * a2) - **(float **)(a6 + 2832);
  if (v11 <= v18)
  {
    *(_QWORD *)&v36 = 0;
    v35 = a2;
    *((float *)&v36 + 2) = v11 - v18;
    *((float *)&v36 + 3) = v11;
    v19 = 0;
    if (!v17)
      goto LABEL_17;
    do
    {
      v20 = v19;
      v21 = (int *)(a8 + 16 * v17);
      v22 = *v21;
      v23 = v21[2];
      *((_DWORD *)&v35 + v20 + 2) = v21[1];
      v19 = v20 + 1;
      if (v20 > 2)
        break;
      v17 = *(unsigned int *)(a8 + 16 * (v17 - ((v22 & 0x1FFFFFF) + (v23 & 0x7FFFFFFu))) + 12);
    }
    while (v17);
    if ((v19 & 0xFFFFFFFC) == 0)
LABEL_17:
      result = memcpy((char *)&v35 + 4 * v19 + 8, __src, 16 - 4 * v19);
    v24 = *(_QWORD *)(a7 + 256);
    *(_QWORD *)(a7 + 256) = v24 + 1;
    v25 = ~(_BYTE)v24 & 7;
    if ((unint64_t)(v24 + 1) < 8)
      v26 = v24 + 1;
    else
      v26 = 8;
    v27 = v36;
    v28 = (_OWORD *)(a7 + 32 * v25);
    *v28 = v35;
    v28[1] = v27;
    if (v26 >= 2)
    {
      v29 = v26 - 1;
      do
      {
        v30 = (float *)(a7 + 32 * (v25 & 7));
        v31 = (float *)(a7 + 32 * (((_BYTE)v25 + 1) & 7));
        if (v30[6] > v31[6])
        {
          v33 = *(_OWORD *)v30;
          v32 = *((_OWORD *)v30 + 1);
          v34 = *((_OWORD *)v31 + 1);
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *((_OWORD *)v30 + 1) = v34;
          *(_OWORD *)v31 = v33;
          *((_OWORD *)v31 + 1) = v32;
        }
        LOBYTE(v25) = v25 + 1;
        --v29;
      }
      while (v29);
    }
  }
  return result;
}

uint64_t sub_23679EF38(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t i;
  uint64_t v4;
  int v6;

  v2 = (_DWORD *)(a2 + 16 * a1);
  if ((v2[2] & 0x7FFFFFF) == 0)
  {
    do
    {
      if (*v2 != 1)
        break;
      --a1;
      v6 = *(v2 - 2);
      v2 -= 4;
    }
    while ((v6 & 0x7FFFFFF) == 0);
  }
  *(_DWORD *)(a2 + 16 * a1 + 12) = -1;
  for (i = 0; a1; *(_DWORD *)(a2 + 16 * a1 + 12) = v4)
  {
    v4 = (*(_DWORD *)(a2 + 16 * a1 + 8) & 0x7FFFFFF) + (*(_DWORD *)(a2 + 16 * a1) & 0x1FFFFFFu);
    ++i;
    a1 -= v4;
  }
  return i;
}

uint64_t sub_23679EFB4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, void *a9, _QWORD *a10, uint64_t a11, _QWORD *a12, _QWORD *a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int *v93;
  unint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  BOOL v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned __int8 *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _DWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _DWORD *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v205;
  unint64_t v206;
  uint64_t v208;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  unint64_t v221;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  _OWORD v228[16];
  uint64_t v229;
  _DWORD __b[38];
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v16 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 16 * a2 + 16);
  if (!v16)
    goto LABEL_251;
  v220 = (_DWORD *)v16;
  v17 = v16 + 12;
  v18 = -1;
  do
  {
    *(_QWORD *)(v17 - 12) = 1;
    *(_QWORD *)(v17 - 4) = 0x7EFFC99E00000000;
    ++v18;
    v17 += 16;
  }
  while (a2 != v18);
  v208 = *(_QWORD *)(a7 + 16);
  v19 = *(_DWORD *)(a7 + 8);
  v20 = 325;
  if (*(int *)(a7 + 4) < 11)
    v20 = 150;
  v210 = v20;
  memset(v228, 0, sizeof(v228));
  v215 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 3072);
  if (!v215
    || ((v21 = a1, v22 = a2, a2 >= 0x7F) ? (v23 = a2 - 127) : (v23 = 0),
        v24 = *(_QWORD *)(a7 + 96),
        v218 = *(_QWORD *)(a7 + 104),
        (v25 = (*(uint64_t (**)(_QWORD, uint64_t))v21)(*(_QWORD *)(v21 + 16), 9896)) == 0))
  {
LABEL_251:
    exit(1);
  }
  v26 = v25;
  *v220 = 0;
  v220[3] = 0;
  v205 = v21;
  v27 = v21;
  v28 = v26;
  sub_23679DDAC(v27, v26, a7 + 64, a2);
  v219 = v28;
  sub_23679DE30(v28, a3, a4, a5);
  v229 = 0;
  v29 = a7;
  if (a2 < 4)
    goto LABEL_250;
  v30 = 0;
  v221 = (1 << v19) - 16;
  v206 = v23 + a3;
  v223 = a8 + 12;
  v216 = (uint64_t *)(v215 + ((unint64_t)(v24 != 0) << 11));
  v226 = v216 - 64;
  do
  {
    v31 = v30 + a3;
    if (v30 + a3 >= v221)
      v32 = v221;
    else
      v32 = v30 + a3;
    v33 = v31 + v208;
    if (v31 + v208 >= v221)
      v33 = v221;
    v212 = v33;
    if (*(_DWORD *)(v29 + 632))
    {
      if (v31)
      {
        v34 = *(unsigned __int8 *)(a4 + ((v31 - 1) & a5));
        if (v31 != 1)
        {
          v35 = *(unsigned __int8 *)(a4 + ((v31 - 2) & a5));
LABEL_25:
          v36 = *(unsigned __int8 *)(v29 + (*(_BYTE *)(a6 + 256 + v35) | *(_BYTE *)(a6 + v34)) + 637);
          goto LABEL_26;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = 0;
      goto LABEL_25;
    }
    v36 = 0;
LABEL_26:
    v224 = *(_QWORD *)(v29 + 8 * v36 + 704);
    v217 = v30;
    v37 = v22 - v30;
    v38 = v31 & a5;
    v39 = 16;
    if (*(_DWORD *)(v29 + 4) == 11)
      v39 = 64;
    v102 = v31 >= v39;
    v40 = v31 - v39;
    if (!v102)
      v40 = 0;
    v41 = v31 - 1;
    if (v31 - 1 <= v40)
    {
      v44 = 1;
      v43 = v216;
    }
    else
    {
      v42 = (unsigned __int8 *)(a4 + v38);
      v43 = v216;
      v44 = 1;
      do
      {
        if (v31 - v41 > v32)
          break;
        v45 = (unsigned __int8 *)(a4 + (v41 & a5));
        if (*v42 == *v45 && *(unsigned __int8 *)(a4 + v38 + 1) == *(unsigned __int8 *)((v41 & a5) + a4 + 1))
        {
          if (v37 < 8)
          {
            v50 = 0;
            v51 = (unsigned __int8 *)(a4 + v38);
LABEL_47:
            if ((v37 & 7) != 0)
            {
              v52 = v37 & 7 | v50;
              v53 = v37 & 7;
              while (v45[v50] == *v51)
              {
                ++v51;
                ++v50;
                if (!--v53)
                {
                  v50 = v52;
                  break;
                }
              }
            }
          }
          else
          {
            v46 = 0;
            v47 = v37 >> 3;
            while (1)
            {
              v48 = *(_QWORD *)&v42[v46];
              v49 = *(_QWORD *)&v45[v46];
              if (v48 != v49)
                break;
              v46 += 8;
              if (!--v47)
              {
                v50 = v37 & 0xFFFFFFFFFFFFFFF8;
                v51 = (unsigned __int8 *)(a4 + v38 + (v37 & 0xFFFFFFFFFFFFFFF8));
                goto LABEL_47;
              }
            }
            v50 = v46 + (__clz(__rbit64(v49 ^ v48)) >> 3);
          }
          if (v50 > v44)
          {
            *(_DWORD *)v43 = v31 - v41;
            *((_DWORD *)v43++ + 1) = 32 * v50;
            v44 = v50;
          }
        }
        if (--v41 <= v40)
          break;
      }
      while (v44 < 3);
    }
    v213 = v30 + a3;
    if (v44 < v37)
    {
      v54 = (506832829 * *(_DWORD *)(a4 + v38)) >> 15;
      v55 = a8[13];
      v57 = a8[10];
      v56 = a8[11];
      v58 = *(unsigned int *)(v56 + 4 * v54);
      v59 = 128;
      if (v37 >= 0x80)
        *(_DWORD *)(v56 + 4 * v54) = v31;
      else
        v59 = v37;
      v60 = 2 * (v57 & v31);
      v61 = v60 | 1;
      if (v31 != v58)
      {
        v182 = 0;
        v183 = 0;
        v184 = 64;
        do
        {
          if (v31 - v58 > v32 || v184 == 0)
            break;
          v186 = v58 & a5;
          if (v183 >= v182)
            v187 = v182;
          else
            v187 = v183;
          v188 = a4 + v187 + v38;
          v189 = (unsigned __int8 *)(a4 + v187 + v186);
          v190 = v37 - v187;
          if (v37 - v187 < 8)
          {
            v193 = 0;
LABEL_243:
            v198 = v190 & 7;
            if (v198)
            {
              v199 = v193 | v198;
              while (*(unsigned __int8 *)(v188 + v193) == *v189)
              {
                ++v189;
                ++v193;
                if (!--v198)
                {
                  v193 = v199;
                  break;
                }
              }
            }
          }
          else
          {
            v191 = 0;
            v192 = v190 >> 3;
            v193 = v190 & 0xFFFFFFFFFFFFFFF8;
            while (1)
            {
              v194 = *(_QWORD *)&v189[v191];
              v195 = *(_QWORD *)(v188 + v191);
              if (v194 != v195)
                break;
              v191 += 8;
              if (!--v192)
              {
                v189 += v190 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_243;
              }
            }
            v193 = v191 + (__clz(__rbit64(v195 ^ v194)) >> 3);
          }
          v196 = v193 + v187;
          if (v43 && v196 > v44)
          {
            *(_DWORD *)v43 = v31 - v58;
            *((_DWORD *)v43++ + 1) = 32 * v196;
            v44 = v196;
          }
          if (v196 >= v59)
          {
            if (v37 < 0x80)
              goto LABEL_61;
            v200 = (int *)(v55 + 8 * (v58 & v57));
            v201 = *v200;
            v62 = v200 + 1;
            *(_DWORD *)(v55 + 4 * v60) = v201;
            goto LABEL_60;
          }
          if (*(unsigned __int8 *)(a4 + v196 + v38) <= *(unsigned __int8 *)(a4 + v196 + v186))
          {
            if (v37 >= 0x80)
              *(_DWORD *)(v55 + 4 * v61) = v58;
            v197 = 2 * (v58 & v57);
            v61 = v197;
            v182 = v196;
          }
          else
          {
            if (v37 >= 0x80)
              *(_DWORD *)(v55 + 4 * v60) = v58;
            v197 = (2 * (v58 & v57)) | 1;
            v60 = v197;
            v183 = v196;
          }
          v58 = *(unsigned int *)(v55 + 4 * v197);
          --v184;
        }
        while (v31 != v58);
      }
      if (v37 >= 0x80)
      {
        *(_DWORD *)(v55 + 4 * v60) = *v223;
        v62 = a8 + 12;
LABEL_60:
        *(_DWORD *)(v55 + 4 * v61) = *v62;
      }
    }
LABEL_61:
    memset_pattern16(__b, &unk_2368AFB10, 0x98uLL);
    if (v44 + 1 > 4)
      v63 = v44 + 1;
    else
      v63 = 4;
    v64 = (uint64_t *)(a4 + v38);
    if (sub_2367BCA34(v224, (unsigned __int8 *)(a4 + v38), v63, v37, (uint64_t)__b))
    {
      if (v37 >= 0x25)
        v65 = 37;
      else
        v65 = v37;
      v66 = (_QWORD *)a7;
      if (v63 <= v65)
      {
        v67 = 32 * v63;
        v68 = v65 + 1;
        do
        {
          v69 = __b[v63];
          if (v69 <= 0xFFFFFFE)
          {
            v70 = v218 + 1 + v212 + (v69 >> 5);
            if (v70 <= *(_QWORD *)(a7 + 80))
            {
              v71 = v69 & 0x1F;
              if (v63 == v71)
                LODWORD(v71) = 0;
              *(_DWORD *)v43 = v70;
              *((_DWORD *)v43++ + 1) = v67 + v71;
            }
          }
          ++v63;
          v67 += 32;
        }
        while (v68 != v63);
      }
    }
    else
    {
      v66 = (_QWORD *)a7;
    }
    v72 = v43 - v216;
    v73 = v66[12];
    if (!v73)
      goto LABEL_123;
    v211 = v43 - v216;
    v74 = 0;
    v75 = 0;
    v76 = v66[10];
    v225 = *v64;
    v77 = v66[13] + v212;
    v78 = 3;
    while (2)
    {
      v79 = &v66[v75];
      v80 = v79[14];
      v82 = *(_DWORD *)(v80 + 16);
      v81 = *(_DWORD *)(v80 + 20);
      v83 = v80 + 24;
      v84 = v80 + 24 + 4 * (1 << v81);
      v85 = v84 + 2 * (1 << v82);
      v86 = (_QWORD *)(v85 + 4 * *(unsigned int *)(v80 + 4));
      if (*(_DWORD *)v80 != -558043680)
        v86 = (_QWORD *)*v86;
      v87 = (0x1FE35A7BD3579BD3 * (v225 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v80 + 12)))) >> -(char)v82;
      v88 = *(unsigned __int16 *)(v84 + 2 * v87);
      if (v88 == 0xFFFF)
      {
        v89 = 0;
        goto LABEL_116;
      }
      v89 = 0;
      v90 = v79[46];
      v91 = &v226[v74];
      v92 = *(unsigned int *)(v80 + 8);
      v93 = (int *)(v85
                  + 4
                  * (*(_DWORD *)(v83 + 4 * ((0xFFFFFFFF >> -(char)v81) & v87)) + v88));
      v94 = v78;
      while (1)
      {
        v96 = *v93++;
        v95 = v96;
        v97 = v96 & 0x7FFFFFFF;
        v98 = v77 - (v90 + v97);
        v99 = v92 - v97 >= v37 ? v37 : v92 - v97;
        v100 = v94 + v38;
        v101 = v98 > v76 || v100 > a5;
        v102 = v101 || v94 >= v99;
        if (!v102 && *(unsigned __int8 *)(a4 + v100) == *((unsigned __int8 *)v86 + v94 + v97))
        {
          v104 = (char *)v86 + v97;
          if (v99 < 8)
          {
            v103 = 0;
            v106 = (unsigned __int8 *)(a4 + v38);
LABEL_110:
            v110 = v99 & 7;
            if (v110)
            {
              v111 = v103 | v110;
              while (v104[v103] == *v106)
              {
                ++v106;
                ++v103;
                if (!--v110)
                {
                  v103 = v111;
                  break;
                }
              }
            }
          }
          else
          {
            v105 = 0;
            v103 = v99 & 0xFFFFFFFFFFFFFFF8;
            v106 = (unsigned __int8 *)v64 + (v99 & 0xFFFFFFFFFFFFFFF8);
            v107 = -(uint64_t)(v99 >> 3);
            while (1)
            {
              v108 = v64[v105];
              v109 = *(_QWORD *)&v104[v105 * 8];
              if (v108 != v109)
                break;
              ++v105;
              v102 = __CFADD__(v107++, 1);
              if (v102)
                goto LABEL_110;
            }
            v103 = v105 * 8 + (__clz(__rbit64(v109 ^ v108)) >> 3);
          }
          if (v103 > v94)
            break;
        }
        v103 = v94;
LABEL_96:
        v94 = v103;
        if (v95 < 0)
          goto LABEL_116;
      }
      *(_DWORD *)v91 = v98;
      *((_DWORD *)v91 + 1) = 32 * v103;
      if (++v89 != 64 - v74)
      {
        ++v91;
        goto LABEL_96;
      }
      v89 = 64 - v74;
LABEL_116:
      v74 += v89;
      v66 = (_QWORD *)a7;
      if (!v74)
      {
LABEL_119:
        if (++v75 == v73)
          goto LABEL_122;
        continue;
      }
      break;
    }
    if (v74 != 64)
    {
      v78 = (unint64_t)HIDWORD(v226[v74 - 1]) >> 5;
      goto LABEL_119;
    }
LABEL_122:
    sub_23679E464((_QWORD *)v215, v226, v74, v216, v211);
    v72 = v74 + v211;
LABEL_123:
    if (v72)
    {
      v112 = v215;
      v113 = a7;
      if (v210 < (unint64_t)*(unsigned int *)(v215 + 8 * (v72 - 1) + 4) >> 5)
      {
        *(_QWORD *)v215 = *(_QWORD *)(v215 + 8 * (v72 - 1));
        v72 = 1;
      }
    }
    else
    {
      v113 = a7;
      v112 = v215;
    }
    v114 = sub_23679E4EC(a2, a3, v217, a4, a5, v113, v221, a9, v72, v112, v219, (uint64_t)v228, (uint64_t)v220);
    if (v114 >= 0x4000)
      v115 = v114;
    else
      v115 = 0;
    if (v72 == 1)
    {
      v116 = *(unsigned int *)(v215 + 4);
      v117 = v116 >> 5;
      if (v116 >> 5 <= v115)
        v117 = v115;
      if (v210 < v116 >> 5)
        v115 = v117;
    }
    if (v115 < 2)
    {
      v29 = a7;
      v22 = a2;
      v150 = v217;
    }
    else
    {
      v118 = v115 + v213;
      if (v115 + v213 >= v206)
        v118 = v206;
      if (v213 + 64 > v118)
        v119 = v213 + 1;
      else
        v119 = v118 - 63;
      if (v213 + 513 <= v119)
      {
        v120 = v213 + 1;
        if (v213 + 1 < v119)
        {
          v121 = a8[10];
          v122 = a8[11];
          v123 = a8[13];
          do
          {
            v124 = v120 & a5;
            v125 = (506832829 * *(_DWORD *)(a4 + (v120 & a5))) >> 15;
            v126 = *(unsigned int *)(v122 + 4 * v125);
            v127 = 2 * (v121 & v120);
            v128 = v127 | 1;
            *(_DWORD *)(v122 + 4 * v125) = v120;
            if (v120 != v126)
            {
              v130 = 0;
              v131 = 0;
              v132 = 64;
              do
              {
                if (v120 - v126 > v121 - 15 || v132 == 0)
                  break;
                v134 = v126 & a5;
                if (v131 >= v130)
                  v135 = v130;
                else
                  v135 = v131;
                v136 = a4 + v124 + v135;
                v137 = (unsigned __int8 *)(a4 + v135 + v134);
                v138 = 128 - v135;
                if (v135 > 0x78)
                {
                  v141 = 0;
LABEL_169:
                  v147 = v138 & 7;
                  if ((v138 & 7) != 0)
                  {
                    v148 = v141 | v147;
                    while (*(unsigned __int8 *)(v136 + v141) == *v137)
                    {
                      ++v137;
                      ++v141;
                      if (!--v147)
                      {
                        v141 = v148;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v139 = 0;
                  v140 = v138 >> 3;
                  v141 = v138 & 0xFFFFFFFFFFFFFFF8;
                  while (1)
                  {
                    v142 = *(_QWORD *)&v137[v139];
                    v143 = *(_QWORD *)(v136 + v139);
                    if (v142 != v143)
                      break;
                    v139 += 8;
                    if (!--v140)
                    {
                      v137 += v138 & 0xFFFFFFFFFFFFFFF8;
                      goto LABEL_169;
                    }
                  }
                  v141 = v139 + (__clz(__rbit64(v143 ^ v142)) >> 3);
                }
                v144 = v141 + v135;
                if (v144 >= 0x80)
                {
                  v149 = (_DWORD *)(v123 + 8 * (v126 & v121));
                  *(_DWORD *)(v123 + 4 * v127) = *v149;
                  v129 = v149[1];
                  goto LABEL_146;
                }
                v145 = *(unsigned __int8 *)(a4 + v144 + v134);
                v146 = 2 * (v126 & v121);
                if (*(unsigned __int8 *)(a4 + v144 + v124) <= v145)
                {
                  *(_DWORD *)(v123 + 4 * v128) = v126;
                  v128 = 2 * (v126 & v121);
                  v130 = v144;
                }
                else
                {
                  *(_DWORD *)(v123 + 4 * v127) = v126;
                  v146 |= 1uLL;
                  v127 = v146;
                  v131 = v144;
                }
                v126 = *(unsigned int *)(v123 + 4 * v146);
                --v132;
              }
              while (v120 != v126);
            }
            v129 = *v223;
            *(_DWORD *)(v123 + 4 * v127) = *v223;
LABEL_146:
            *(_DWORD *)(v123 + 4 * v128) = v129;
            v120 += 8;
          }
          while (v120 < v119);
        }
      }
      if (v119 < v118)
      {
        v151 = a8[10];
        v152 = a8[11];
        v153 = a8[13];
        do
        {
          v154 = v119 & a5;
          v155 = (506832829 * *(_DWORD *)(a4 + (v119 & a5))) >> 15;
          v156 = *(unsigned int *)(v152 + 4 * v155);
          v157 = 2 * (v151 & v119);
          v158 = v157 | 1;
          *(_DWORD *)(v152 + 4 * v155) = v119;
          if (v119 != v156)
          {
            v160 = 0;
            v161 = 0;
            v162 = 64;
            do
            {
              if (v119 - v156 > v151 - 15 || v162 == 0)
                break;
              v164 = v156 & a5;
              if (v161 >= v160)
                v165 = v160;
              else
                v165 = v161;
              v166 = a4 + v154 + v165;
              v167 = (unsigned __int8 *)(a4 + v165 + v164);
              v168 = 128 - v165;
              if (v165 > 0x78)
              {
                v171 = 0;
LABEL_203:
                v177 = v168 & 7;
                if (v177)
                {
                  v178 = v171 | v177;
                  while (*(unsigned __int8 *)(v166 + v171) == *v167)
                  {
                    ++v167;
                    ++v171;
                    if (!--v177)
                    {
                      v171 = v178;
                      break;
                    }
                  }
                }
              }
              else
              {
                v169 = 0;
                v170 = v168 >> 3;
                v171 = v168 & 0xFFFFFFFFFFFFFFF8;
                while (1)
                {
                  v172 = *(_QWORD *)&v167[v169];
                  v173 = *(_QWORD *)(v166 + v169);
                  if (v172 != v173)
                    break;
                  v169 += 8;
                  if (!--v170)
                  {
                    v167 += v168 & 0xFFFFFFFFFFFFFFF8;
                    goto LABEL_203;
                  }
                }
                v171 = v169 + (__clz(__rbit64(v173 ^ v172)) >> 3);
              }
              v174 = v171 + v165;
              if (v174 >= 0x80)
              {
                v179 = (_DWORD *)(v153 + 8 * (v156 & v151));
                *(_DWORD *)(v153 + 4 * v157) = *v179;
                v159 = v179[1];
                goto LABEL_180;
              }
              v175 = *(unsigned __int8 *)(a4 + v174 + v164);
              v176 = 2 * (v156 & v151);
              if (*(unsigned __int8 *)(a4 + v174 + v154) <= v175)
              {
                *(_DWORD *)(v153 + 4 * v158) = v156;
                v158 = 2 * (v156 & v151);
                v160 = v174;
              }
              else
              {
                *(_DWORD *)(v153 + 4 * v157) = v156;
                v176 |= 1uLL;
                v157 = v176;
                v161 = v174;
              }
              v156 = *(unsigned int *)(v153 + 4 * v176);
              --v162;
            }
            while (v119 != v156);
          }
          v159 = *v223;
          *(_DWORD *)(v153 + 4 * v157) = *v223;
LABEL_180:
          *(_DWORD *)(v153 + 4 * v158) = v159;
          ++v119;
        }
        while (v119 < v118);
      }
      v180 = v115 - 1;
      v181 = v217 + 4;
      v22 = a2;
      do
      {
        v150 = v181 - 3;
        if (v181 >= v22)
          break;
        sub_23679ED90((void *)(v208 + a3), v150, v221, v218, a9, v219, (uint64_t)v228, (uint64_t)v220);
        v150 = v181 - 3;
        v22 = a2;
        ++v181;
        --v180;
      }
      while (v180);
      v29 = a7;
    }
    v30 = v150 + 1;
  }
  while (v150 + 4 < v22);
LABEL_250:
  v202 = v205;
  v203 = v29;
  (*(void (**)(_QWORD, _QWORD))(v205 + 8))(*(_QWORD *)(v205 + 16), *(_QWORD *)(v219 + 2832));
  *(_QWORD *)(v219 + 2832) = 0;
  (*(void (**)(_QWORD, _QWORD))(v202 + 8))(*(_QWORD *)(v202 + 16), *(_QWORD *)(v219 + 2816));
  *(_QWORD *)(v219 + 2816) = 0;
  (*(void (**)(_QWORD, uint64_t))(v202 + 8))(*(_QWORD *)(v202 + 16), v219);
  (*(void (**)(_QWORD, uint64_t))(v202 + 8))(*(_QWORD *)(v202 + 16), v215);
  *a12 += sub_23679EF38(v22, (uint64_t)v220);
  sub_23679DAA4(v22, a3, (uint64_t)v220, (uint64_t)a9, a10, v203, a11, a13);
  return (*(uint64_t (**)(_QWORD, _DWORD *))(v205 + 8))(*(_QWORD *)(v205 + 16), v220);
}

uint64_t sub_23679FE04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, __int128 *a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t *a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int *v91;
  unint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  BOOL v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unsigned __int8 *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned __int8 *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unsigned __int8 *v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  _DWORD *v192;
  int *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  unsigned int *v203;
  unsigned int *v204;
  char v205;
  char v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int *v213;
  uint64_t v214;
  unsigned int v215;
  __int16 v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  float v221;
  _DWORD *v222;
  uint64_t v223;
  float *v224;
  float v225;
  uint64_t v226;
  float v227;
  float v228;
  float v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v251;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v260;
  uint64_t v261;
  float *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  _DWORD *v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char *__src;
  uint64_t v283;
  uint64_t v284;
  __int128 v286;
  _OWORD __b[16];
  uint64_t v288;
  uint64_t v289;

  v14 = a4;
  v15 = a1;
  v16 = a13;
  v289 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v257 = *(_QWORD *)(a7 + 16);
    v17 = *(_DWORD *)(a7 + 8);
    v265 = 4 * a2;
    v278 = (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 16));
    if (!v278
      || (a2 >= 0x7F ? (v19 = a2 - 127) : (v19 = 0),
          (v284 = (*(uint64_t (**)(_QWORD, uint64_t))v15)(*(_QWORD *)(v15 + 16), 9896)) == 0
       || (__src = (char *)(*(uint64_t (**)(_QWORD, unint64_t))v15)(*(_QWORD *)(v15 + 16), 32 * a2)) == 0))
    {
LABEL_294:
      exit(1);
    }
    v20 = a7;
    v283 = *(_QWORD *)(a7 + 104);
    v21 = a2;
    if (a2 >= 4)
    {
      v22 = 0;
      v23 = 0;
      v251 = v19 + a3;
      v254 = (unint64_t)(*(_QWORD *)(a7 + 96) != 0) << 8;
      v255 = v254 | 0x80;
      v256 = (1 << v17) - 16;
      v273 = a8 + 12;
      while (1)
      {
        v24 = v22 + a3;
        if (v22 + a3 >= v256)
          v25 = v256;
        else
          v25 = v22 + a3;
        v26 = v24 + v257;
        if (v24 + v257 >= v256)
          v26 = v256;
        v264 = v26;
        if (!*(_DWORD *)(v20 + 632))
        {
          v29 = 0;
          goto LABEL_23;
        }
        if (!v24)
          break;
        v27 = *(unsigned __int8 *)(v14 + ((v24 - 1) & a5));
        if (v24 == 1)
          goto LABEL_21;
        v28 = *(unsigned __int8 *)(v14 + ((v24 - 2) & a5));
LABEL_22:
        v29 = *(unsigned __int8 *)(v20 + (*(_BYTE *)(a6 + 256 + v28) | *(_BYTE *)(a6 + v27)) + 637);
LABEL_23:
        v30 = v265;
        v271 = v22;
        v263 = v22 + a3;
        if (v265 >= v255 + v23)
        {
          v33 = __src;
        }
        else
        {
          if (!v265)
            v30 = v255 + v23;
          do
          {
            v31 = v30;
            v30 *= 2;
          }
          while (v31 < v255 + v23);
          v32 = v23;
          if (v31)
          {
            v33 = (char *)(*(uint64_t (**)(_QWORD, unint64_t))v15)(*(_QWORD *)(v15 + 16), 8 * v31);
            if (!v33)
              goto LABEL_294;
          }
          else
          {
            v33 = 0;
          }
          if (v265)
            memcpy(v33, __src, 8 * v265);
          (*(void (**)(_QWORD, char *))(v15 + 8))(*(_QWORD *)(v15 + 16), __src);
          v265 = v31;
          v20 = a7;
          v21 = a2;
          v23 = v32;
          v22 = v271;
          v24 = v263;
        }
        v34 = v21 - v22;
        v275 = *(_QWORD *)(v20 + 8 * v29 + 704);
        __src = v33;
        v261 = v23 + v254;
        v35 = (uint64_t *)&v33[8 * v23 + 8 * v254];
        v36 = v24 & a5;
        v37 = 16;
        if (*(_DWORD *)(v20 + 4) == 11)
          v37 = 64;
        v100 = v24 >= v37;
        v38 = v24 - v37;
        if (!v100)
          v38 = 0;
        v39 = v24 - 1;
        v267 = v35;
        v269 = v23;
        if (v24 - 1 <= v38)
        {
          v41 = 1;
        }
        else
        {
          v40 = (unsigned __int8 *)(v14 + v36);
          v41 = 1;
          do
          {
            if (v24 - v39 > v25)
              break;
            v42 = (unsigned __int8 *)(v14 + (v39 & a5));
            if (*v40 == *v42 && *(unsigned __int8 *)(v14 + v36 + 1) == *(unsigned __int8 *)((v39 & a5) + v14 + 1))
            {
              if (v34 < 8)
              {
                v47 = 0;
                v48 = (unsigned __int8 *)(v14 + v36);
                goto LABEL_56;
              }
              v43 = 0;
              v44 = v34 >> 3;
              do
              {
                v45 = *(_QWORD *)&v40[v43];
                v46 = *(_QWORD *)&v42[v43];
                if (v45 != v46)
                {
                  v47 = v43 + (__clz(__rbit64(v46 ^ v45)) >> 3);
                  goto LABEL_50;
                }
                v43 += 8;
                --v44;
              }
              while (v44);
              v47 = v34 & 0xFFFFFFFFFFFFFFF8;
              v48 = (unsigned __int8 *)(v14 + v36 + (v34 & 0xFFFFFFFFFFFFFFF8));
LABEL_56:
              if ((v34 & 7) != 0)
              {
                v49 = v34 & 7 | v47;
                v50 = v34 & 7;
                do
                {
                  if (v42[v47] != *v48)
                    goto LABEL_50;
                  ++v48;
                  ++v47;
                  --v50;
                }
                while (v50);
                v47 = v49;
              }
LABEL_50:
              if (v47 > v41)
              {
                *(_DWORD *)v35 = v24 - v39;
                *((_DWORD *)v35++ + 1) = 32 * v47;
                v41 = v47;
              }
            }
            if (--v39 <= v38)
              break;
          }
          while (v41 < 3);
        }
        if (v41 >= v34)
          goto LABEL_70;
        v51 = (506832829 * *(_DWORD *)(v14 + v36)) >> 15;
        v52 = a8[13];
        v54 = a8[10];
        v53 = a8[11];
        v55 = *(unsigned int *)(v53 + 4 * v51);
        v56 = 128;
        if (v34 >= 0x80)
          *(_DWORD *)(v53 + 4 * v51) = v24;
        else
          v56 = v34;
        v57 = 2 * (v54 & v24);
        v58 = v57 | 1;
        if (v24 != v55)
        {
          v146 = 0;
          v147 = 0;
          v148 = 64;
          while (1)
          {
            if (v24 - v55 > v25 || v148 == 0)
              goto LABEL_67;
            v150 = v55 & a5;
            if (v147 >= v146)
              v151 = v146;
            else
              v151 = v147;
            v152 = v14 + v36 + v151;
            v153 = (unsigned __int8 *)(v14 + v151 + v150);
            v154 = v34 - v151;
            if (v34 - v151 < 8)
            {
              v157 = 0;
              goto LABEL_210;
            }
            v155 = 0;
            v156 = v154 >> 3;
            v157 = v154 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v158 = *(_QWORD *)&v153[v155];
              v159 = *(_QWORD *)(v152 + v155);
              if (v158 != v159)
              {
                v157 = v155 + (__clz(__rbit64(v159 ^ v158)) >> 3);
                goto LABEL_196;
              }
              v155 += 8;
              --v156;
            }
            while (v156);
            v153 += v154 & 0xFFFFFFFFFFFFFFF8;
LABEL_210:
            v162 = v154 & 7;
            if (v162)
            {
              v163 = v157 | v162;
              do
              {
                if (*(unsigned __int8 *)(v152 + v157) != *v153)
                  goto LABEL_196;
                ++v153;
                ++v157;
                --v162;
              }
              while (v162);
              v157 = v163;
            }
LABEL_196:
            v160 = v157 + v151;
            if (v35 && v160 > v41)
            {
              *(_DWORD *)v35 = v24 - v55;
              *((_DWORD *)v35++ + 1) = 32 * v160;
              v41 = v160;
            }
            if (v160 >= v56)
              break;
            if (*(unsigned __int8 *)(v14 + v160 + v36) <= *(unsigned __int8 *)(v14 + v160 + v150))
            {
              if (v34 >= 0x80)
                *(_DWORD *)(v52 + 4 * v58) = v55;
              v161 = 2 * (v55 & v54);
              v58 = v161;
              v146 = v160;
            }
            else
            {
              if (v34 >= 0x80)
                *(_DWORD *)(v52 + 4 * v57) = v55;
              v161 = (2 * (v55 & v54)) | 1;
              v57 = v161;
              v147 = v160;
            }
            v55 = *(unsigned int *)(v52 + 4 * v161);
            --v148;
            if (v24 == v55)
              goto LABEL_67;
          }
          if (v34 < 0x80)
            goto LABEL_70;
          v193 = (int *)(v52 + 8 * (v55 & v54));
          v194 = *v193;
          v59 = v193 + 1;
          *(_DWORD *)(v52 + 4 * v57) = v194;
          goto LABEL_69;
        }
LABEL_67:
        if (v34 >= 0x80)
        {
          *(_DWORD *)(v52 + 4 * v57) = *v273;
          v59 = a8 + 12;
LABEL_69:
          *(_DWORD *)(v52 + 4 * v58) = *v59;
        }
LABEL_70:
        memset_pattern16(__b, &unk_2368AFB10, 0x98uLL);
        if (v41 + 1 > 4)
          v60 = v41 + 1;
        else
          v60 = 4;
        v61 = (unsigned __int8 *)(v14 + v36);
        if (sub_2367BCA34(v275, (unsigned __int8 *)(v14 + v36), v60, v34, (uint64_t)__b))
        {
          if (v34 >= 0x25)
            v62 = 37;
          else
            v62 = v34;
          v20 = a7;
          v63 = v271;
          if (v60 <= v62)
          {
            v64 = v62 + 1;
            v65 = 32 * v60;
            do
            {
              v66 = *((unsigned int *)__b + v60);
              if (v66 <= 0xFFFFFFE)
              {
                v67 = v283 + 1 + v264 + (v66 >> 5);
                if (v67 <= *(_QWORD *)(a7 + 80))
                {
                  v68 = v66 & 0x1F;
                  if (v60 == v68)
                    LODWORD(v68) = 0;
                  *(_DWORD *)v35 = v67;
                  *((_DWORD *)v35++ + 1) = v65 + v68;
                }
              }
              ++v60;
              v65 += 32;
            }
            while (v64 != v60);
          }
        }
        else
        {
          v20 = a7;
          v63 = v271;
        }
        v69 = v35 - v267;
        v70 = *(_QWORD *)(v20 + 96);
        if (!v70)
          goto LABEL_132;
        v260 = v35 - v267;
        v71 = 0;
        v72 = 0;
        v73 = *(_QWORD *)(v20 + 80);
        v74 = (uint64_t *)&__src[8 * v261 - 512];
        v276 = *(_QWORD *)v61;
        v75 = *(_QWORD *)(v20 + 104) + v264;
        v76 = 3;
        while (2)
        {
          v77 = v20 + 8 * v72;
          v78 = *(_QWORD *)(v77 + 112);
          v80 = *(_DWORD *)(v78 + 16);
          v79 = *(_DWORD *)(v78 + 20);
          v81 = v78 + 24;
          v82 = v78 + 24 + 4 * (1 << v79);
          v83 = v82 + 2 * (1 << v80);
          v84 = (_QWORD *)(v83 + 4 * *(unsigned int *)(v78 + 4));
          if (*(_DWORD *)v78 != -558043680)
            v84 = (_QWORD *)*v84;
          v85 = (0x1FE35A7BD3579BD3 * (v276 & (0xFFFFFFFFFFFFFFFFLL >> -*(_BYTE *)(v78 + 12)))) >> -(char)v80;
          v86 = *(unsigned __int16 *)(v82 + 2 * v85);
          if (v86 == 0xFFFF)
          {
            v87 = 0;
            goto LABEL_125;
          }
          v87 = 0;
          v88 = *(_QWORD *)(v77 + 368);
          v89 = &v74[v71];
          v90 = *(unsigned int *)(v78 + 8);
          v91 = (int *)(v83
                      + 4
                      * (*(_DWORD *)(v81 + 4 * ((0xFFFFFFFF >> -(char)v79) & v85)) + v86));
          v92 = v76;
          while (1)
          {
            v94 = *v91++;
            v93 = v94;
            v95 = v94 & 0x7FFFFFFF;
            v96 = v75 - (v88 + v95);
            v97 = v90 - v95 >= v34 ? v34 : v90 - v95;
            v98 = v92 + v36;
            v99 = v96 > v73 || v98 > a5;
            v100 = v99 || v92 >= v97;
            if (!v100 && *(unsigned __int8 *)(v14 + v98) == *((unsigned __int8 *)v84 + v92 + v95))
            {
              v102 = (char *)v84 + v95;
              if (v97 < 8)
              {
                v101 = 0;
                v104 = v61;
LABEL_119:
                v108 = v97 & 7;
                if ((v97 & 7) != 0)
                {
                  v109 = v101 | v108;
                  while (v102[v101] == *v104)
                  {
                    ++v104;
                    ++v101;
                    if (!--v108)
                    {
                      v101 = v109;
                      break;
                    }
                  }
                }
              }
              else
              {
                v103 = 0;
                v101 = v97 & 0xFFFFFFFFFFFFFFF8;
                v104 = &v61[v97 & 0xFFFFFFFFFFFFFFF8];
                v105 = -(uint64_t)(v97 >> 3);
                while (1)
                {
                  v106 = *(_QWORD *)&v61[v103];
                  v107 = *(_QWORD *)&v102[v103];
                  if (v106 != v107)
                    break;
                  v103 += 8;
                  v100 = __CFADD__(v105++, 1);
                  if (v100)
                  {
                    v14 = a4;
                    goto LABEL_119;
                  }
                }
                v101 = v103 + (__clz(__rbit64(v107 ^ v106)) >> 3);
                v14 = a4;
              }
              if (v101 > v92)
                break;
            }
            v101 = v92;
LABEL_105:
            v92 = v101;
            if (v93 < 0)
              goto LABEL_125;
          }
          *(_DWORD *)v89 = v96;
          *((_DWORD *)v89 + 1) = 32 * v101;
          if (++v87 != 64 - v71)
          {
            ++v89;
            goto LABEL_105;
          }
          v87 = 64 - v71;
LABEL_125:
          v71 += v87;
          v20 = a7;
          if (!v71)
          {
LABEL_128:
            if (++v72 == v70)
              goto LABEL_131;
            continue;
          }
          break;
        }
        if (v71 != 64)
        {
          v76 = (unint64_t)HIDWORD(v74[v71 - 1]) >> 5;
          goto LABEL_128;
        }
LABEL_131:
        sub_23679E464(&__src[8 * v269], v74, v71, v267, v260);
        v20 = a7;
        v69 = v71 + v260;
        v63 = v271;
LABEL_132:
        *(_DWORD *)(v278 + 4 * v63) = v69;
        v15 = a1;
        if (v69)
        {
          v110 = v69 + v269;
          v111 = *(unsigned int *)&__src[8 * v110 - 4];
          if (v111 >> 6 < 0xA3)
          {
            v23 = v110;
          }
          else
          {
            *(_QWORD *)&__src[8 * v269] = *(_QWORD *)&__src[8 * v110 - 8];
            *(_DWORD *)(v278 + 4 * v63) = 1;
            v112 = v263 + 1;
            v113 = v263 + (v111 >> 5);
            if (v113 >= v251)
              v113 = v251;
            if (v263 + 64 > v113)
              v114 = v263 + 1;
            else
              v114 = v113 - 63;
            if (v263 + 513 <= v114 && v112 < v114)
            {
              v164 = a8[10];
              v165 = a8[11];
              v166 = a8[13];
              do
              {
                v167 = v112 & a5;
                v168 = (506832829 * *(_DWORD *)(v14 + (v112 & a5))) >> 15;
                v169 = *(unsigned int *)(v165 + 4 * v168);
                v170 = 2 * (v164 & v112);
                v171 = v170 | 1;
                *(_DWORD *)(v165 + 4 * v168) = v112;
                if (v112 != v169)
                {
                  v173 = 0;
                  v174 = 0;
                  v175 = 64;
                  do
                  {
                    if (v112 - v169 > v164 - 15 || v175 == 0)
                      break;
                    v177 = v169 & a5;
                    if (v174 >= v173)
                      v178 = v173;
                    else
                      v178 = v174;
                    v179 = v14 + v167 + v178;
                    v180 = (unsigned __int8 *)(v14 + v178 + v177);
                    v181 = 128 - v178;
                    if (v178 > 0x78)
                    {
                      v184 = 0;
LABEL_240:
                      v190 = v181 & 7;
                      if (v190)
                      {
                        v191 = v184 | v190;
                        while (*(unsigned __int8 *)(v179 + v184) == *v180)
                        {
                          ++v180;
                          ++v184;
                          if (!--v190)
                          {
                            v184 = v191;
                            break;
                          }
                        }
                      }
                    }
                    else
                    {
                      v182 = 0;
                      v183 = v181 >> 3;
                      v184 = v181 & 0xFFFFFFFFFFFFFFF8;
                      while (1)
                      {
                        v185 = *(_QWORD *)&v180[v182];
                        v186 = *(_QWORD *)(v179 + v182);
                        if (v185 != v186)
                          break;
                        v182 += 8;
                        if (!--v183)
                        {
                          v180 += v181 & 0xFFFFFFFFFFFFFFF8;
                          v14 = a4;
                          goto LABEL_240;
                        }
                      }
                      v184 = v182 + (__clz(__rbit64(v186 ^ v185)) >> 3);
                      v14 = a4;
                    }
                    v187 = v184 + v178;
                    if (v187 >= 0x80)
                    {
                      v192 = (_DWORD *)(v166 + 8 * (v169 & v164));
                      *(_DWORD *)(v166 + 4 * v170) = *v192;
                      v172 = v192[1];
                      goto LABEL_217;
                    }
                    v188 = *(unsigned __int8 *)(v14 + v187 + v177);
                    v189 = 2 * (v169 & v164);
                    if (*(unsigned __int8 *)(v14 + v187 + v167) <= v188)
                    {
                      *(_DWORD *)(v166 + 4 * v171) = v169;
                      v171 = 2 * (v169 & v164);
                      v173 = v187;
                    }
                    else
                    {
                      *(_DWORD *)(v166 + 4 * v170) = v169;
                      v189 |= 1uLL;
                      v170 = v189;
                      v174 = v187;
                    }
                    v169 = *(unsigned int *)(v166 + 4 * v189);
                    --v175;
                  }
                  while (v112 != v169);
                }
                v172 = *v273;
                *(_DWORD *)(v166 + 4 * v170) = *v273;
LABEL_217:
                *(_DWORD *)(v166 + 4 * v171) = v172;
                v112 += 8;
              }
              while (v112 < v114);
            }
            if (v114 < v113)
            {
              v116 = a8[10];
              v117 = a8[11];
              v118 = a8[13];
              do
              {
                v119 = v114 & a5;
                v120 = (506832829 * *(_DWORD *)(v14 + (v114 & a5))) >> 15;
                v121 = *(unsigned int *)(v117 + 4 * v120);
                v122 = 2 * (v116 & v114);
                v123 = v122 | 1;
                *(_DWORD *)(v117 + 4 * v120) = v114;
                if (v114 != v121)
                {
                  v125 = 0;
                  v126 = 0;
                  v127 = 64;
                  do
                  {
                    if (v114 - v121 > v116 - 15 || v127 == 0)
                      break;
                    v129 = v121 & a5;
                    if (v126 >= v125)
                      v130 = v125;
                    else
                      v130 = v126;
                    v131 = v14 + v119 + v130;
                    v132 = (unsigned __int8 *)(v14 + v130 + v129);
                    v133 = 128 - v130;
                    if (v130 > 0x78)
                    {
                      v136 = 0;
LABEL_171:
                      v142 = v133 & 7;
                      if (v142)
                      {
                        v143 = v136 | v142;
                        while (*(unsigned __int8 *)(v131 + v136) == *v132)
                        {
                          ++v132;
                          ++v136;
                          if (!--v142)
                          {
                            v136 = v143;
                            break;
                          }
                        }
                      }
                    }
                    else
                    {
                      v134 = 0;
                      v135 = v133 >> 3;
                      v136 = v133 & 0xFFFFFFFFFFFFFFF8;
                      while (1)
                      {
                        v137 = *(_QWORD *)&v132[v134];
                        v138 = *(_QWORD *)(v131 + v134);
                        if (v137 != v138)
                          break;
                        v134 += 8;
                        if (!--v135)
                        {
                          v132 += v133 & 0xFFFFFFFFFFFFFFF8;
                          goto LABEL_171;
                        }
                      }
                      v136 = v134 + (__clz(__rbit64(v138 ^ v137)) >> 3);
                    }
                    v139 = v136 + v130;
                    if (v139 >= 0x80)
                    {
                      v144 = (_DWORD *)(v118 + 8 * (v121 & v116));
                      *(_DWORD *)(v118 + 4 * v122) = *v144;
                      v124 = v144[1];
                      goto LABEL_148;
                    }
                    v140 = *(unsigned __int8 *)(v14 + v139 + v129);
                    v141 = 2 * (v121 & v116);
                    if (*(unsigned __int8 *)(v14 + v139 + v119) <= v140)
                    {
                      *(_DWORD *)(v118 + 4 * v123) = v121;
                      v123 = 2 * (v121 & v116);
                      v125 = v139;
                    }
                    else
                    {
                      *(_DWORD *)(v118 + 4 * v122) = v121;
                      v141 |= 1uLL;
                      v122 = v141;
                      v126 = v139;
                    }
                    v121 = *(unsigned int *)(v118 + 4 * v141);
                    --v127;
                  }
                  while (v114 != v121);
                }
                v124 = *v273;
                *(_DWORD *)(v118 + 4 * v122) = *v273;
LABEL_148:
                *(_DWORD *)(v118 + 4 * v123) = v124;
                ++v114;
              }
              while (v114 < v113);
            }
            v145 = (v111 >> 5) - 1;
            bzero((void *)(v278 + 4 * v63 + 4), 4 * v145);
            v23 = v269 + 1;
            v63 = v145 + v271;
            v20 = a7;
          }
        }
        else
        {
          v23 = v269;
        }
        v22 = v63 + 1;
        v21 = a2;
        if (v63 + 4 >= a2)
        {
          v270 = 1;
          goto LABEL_251;
        }
      }
      v27 = 0;
LABEL_21:
      v28 = 0;
      goto LABEL_22;
    }
    v270 = 0;
LABEL_251:
    v16 = a13;
  }
  else
  {
    v195 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 9896);
    if (!v195)
      goto LABEL_294;
    v270 = 0;
    v278 = 0;
    __src = 0;
    v283 = *(_QWORD *)(a7 + 104);
    v284 = v195;
    v21 = 0;
  }
  v268 = *v16;
  v196 = *a10;
  v286 = *a9;
  v272 = *a12;
  v197 = v21;
  v198 = (*(uint64_t (**)(_QWORD, unint64_t))v15)(*(_QWORD *)(v15 + 16), 16 * v21 + 16);
  if (!v198)
    goto LABEL_294;
  v199 = (_DWORD *)v198;
  v200 = v197;
  v201 = v284;
  sub_23679DDAC(v15, v284, a7 + 64, v200);
  v202 = (void *)(v284 + 2856);
  v203 = (unsigned int *)(v284 + 3880);
  v204 = (unsigned int *)(v284 + 6696);
  v258 = a3 - v196;
  v262 = (float *)(v284 + 8872);
  v205 = 1;
  v266 = v196;
  do
  {
    v206 = v205;
    v207 = -1;
    v208 = v199 + 3;
    do
    {
      *(_QWORD *)(v208 - 3) = 1;
      *(_QWORD *)(v208 - 1) = 0x7EFFC99E00000000;
      ++v207;
      v208 += 4;
    }
    while (a2 != v207);
    v274 = v206;
    if ((v206 & 1) != 0)
    {
      sub_23679DE30(v201, a3, v14, a5);
      v209 = a7;
    }
    else
    {
      v210 = *a12;
      bzero(v202, 0x1780uLL);
      if (v210 != v272)
      {
        v211 = 0;
        v212 = v258;
        do
        {
          v213 = (unsigned int *)(a11 + 16 * v211);
          v214 = *v213;
          v215 = v213[1];
          v216 = *((_WORD *)v213 + 7);
          v217 = *((unsigned __int16 *)v213 + 6);
          ++v203[v217];
          if (v217 >= 0x80)
            ++v204[v216 & 0x3FF];
          if ((_DWORD)v214)
          {
            v218 = v212;
            v219 = v214;
            do
            {
              ++*((_DWORD *)v202 + *(unsigned __int8 *)(v14 + (v218++ & a5)));
              --v219;
            }
            while (v219);
          }
          v212 += v214 + (v215 & 0x1FFFFFF);
          ++v211;
        }
        while (v211 != v210 - v272);
      }
      sub_2367A1070((unsigned int *)v202, 256, 1, v262);
      sub_2367A1070(v203, 704, 0, (float *)v284);
      sub_2367A1070(v204, *(unsigned int *)(v284 + 2824), 0, *(float **)(v284 + 2816));
      v220 = 0;
      v221 = 1.7e38;
      do
      {
        if (v221 >= *(float *)(v284 + v220))
          v221 = *(float *)(v284 + v220);
        v220 += 4;
      }
      while (v220 != 2816);
      *(float *)(v284 + 2840) = v221;
      v222 = *(_DWORD **)(v284 + 2832);
      v223 = *(_QWORD *)(v284 + 2848);
      *v222 = 0;
      v209 = a7;
      if (v223)
      {
        v224 = (float *)(v222 + 1);
        v225 = 0.0;
        v226 = a3;
        v227 = 0.0;
        do
        {
          v228 = v227 + v262[*(unsigned __int8 *)(v14 + (v226 & a5))];
          v229 = v225 + v228;
          *v224++ = v225 + v228;
          v227 = v228 - (float)((float)(v225 + v228) - v225);
          ++v226;
          v225 = v229;
          --v223;
        }
        while (v223);
      }
    }
    *a12 = v272;
    *v16 = v268;
    *a10 = v196;
    v230 = a2;
    *a9 = v286;
    v231 = *(_QWORD *)(v209 + 16);
    v232 = *(_DWORD *)(v209 + 8);
    v233 = 325;
    if (*(int *)(v209 + 4) < 11)
      v233 = 150;
    v277 = v233;
    *v199 = 0;
    v199[3] = 0;
    v288 = 0;
    if (v270)
    {
      v234 = 0;
      v235 = 0;
      v236 = (1 << v232) - 16;
      v237 = (void *)(v231 + a3);
      memset(__b, 0, sizeof(__b));
      do
      {
        v238 = sub_23679E4EC(v230, a3, v234, a4, a5, v209, v236, a9, *(unsigned int *)(v278 + 4 * v234), (uint64_t)&__src[8 * v235], v284, (uint64_t)__b, (uint64_t)v199);
        if (v238 >= 0x4000)
          v239 = v238;
        else
          v239 = 0;
        v240 = *(unsigned int *)(v278 + 4 * v234);
        v235 += v240;
        if ((_DWORD)v240 == 1)
        {
          v241 = *(unsigned int *)&__src[8 * v235 - 4];
          v242 = v241 >> 5;
          if (v241 >> 5 <= v239)
            v242 = v239;
          if (v277 < v241 >> 5)
            v239 = v242;
        }
        if (v239 >= 2)
        {
          v243 = v239 - 1;
          v230 = a2;
          do
          {
            v244 = v234 + 1;
            if (v234 + 4 >= v230)
              break;
            sub_23679ED90(v237, v234 + 1, v236, v283, a9, v284, (uint64_t)__b, (uint64_t)v199);
            v230 = a2;
            v235 += *(unsigned int *)(v278 + 4 + 4 * v234++);
            --v243;
          }
          while (v243);
          v234 = v244;
        }
        else
        {
          v230 = a2;
        }
        v245 = v234 + 4;
        ++v234;
        v209 = a7;
      }
      while (v245 < v230);
    }
    v246 = v209;
    v247 = v230;
    *a12 += sub_23679EF38(v230, (uint64_t)v199);
    v248 = v247;
    v16 = a13;
    sub_23679DAA4(v248, a3, (uint64_t)v199, (uint64_t)a9, a10, v246, a11, a13);
    v205 = 0;
    v14 = a4;
    v201 = v284;
    v203 = (unsigned int *)(v284 + 3880);
    v196 = v266;
    v204 = (unsigned int *)(v284 + 6696);
  }
  while ((v274 & 1) != 0);
  v249 = a1;
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v284 + 2832));
  *(_QWORD *)(v284 + 2832) = 0;
  (*(void (**)(_QWORD, _QWORD))(v249 + 8))(*(_QWORD *)(v249 + 16), *(_QWORD *)(v284 + 2816));
  *(_QWORD *)(v284 + 2816) = 0;
  (*(void (**)(_QWORD, uint64_t))(v249 + 8))(*(_QWORD *)(v249 + 16), v284);
  (*(void (**)(_QWORD, _DWORD *))(v249 + 8))(*(_QWORD *)(v249 + 16), v199);
  (*(void (**)(_QWORD, char *))(v249 + 8))(*(_QWORD *)(v249 + 16), __src);
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v278);
}

void sub_2367A1070(unsigned int *a1, uint64_t a2, int a3, float *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  unsigned int *v13;
  uint64_t v14;
  double v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  float v23;
  float v24;

  v6 = a2;
  v7 = a1;
  v8 = 0;
  if (!a2)
    goto LABEL_5;
  v9 = a1;
  v10 = a2;
  do
  {
    v11 = *v9++;
    v8 += v11;
    --v10;
  }
  while (v10);
  if (v8 > 0xFF)
  {
    v12 = log2((double)v8);
    if (a3)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    v12 = dbl_236925608[v8];
    if (a3)
      goto LABEL_13;
  }
  if (v6)
  {
    v13 = v7;
    v14 = v6;
    do
    {
      if (!*v13++)
        ++v8;
      --v14;
    }
    while (v14);
  }
LABEL_13:
  if (v8 > 0xFF)
  {
    v16 = log2((double)v8);
    if (!v6)
      return;
  }
  else
  {
    v16 = dbl_236925608[v8];
    if (!v6)
      return;
  }
  v17 = v12;
  v18 = v16;
  v19 = v18 + 2.0;
  do
  {
    v21 = *v7++;
    v20 = v21;
    if (v21)
    {
      if (v20 > 0xFF)
        v22 = log2((double)v20);
      else
        v22 = dbl_236925608[v20];
      v23 = v22;
      v24 = v17 - v23;
      *a4 = v24;
      if (v24 < 1.0)
        *a4 = 1.0;
    }
    else
    {
      *a4 = v19;
    }
    ++a4;
    --v6;
  }
  while (v6);
}

void sub_2367A11A8(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t i;
  BOOL v5;
  uint64_t j;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 1024);
  if (!v1)
    return;
  v3 = 0;
  for (i = 0; i != 256; ++i)
  {
    if (*(_DWORD *)(a1 + 4 * i))
    {
      v35[v3] = i;
      v5 = v3++ <= 3;
      if (!v5)
        break;
    }
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
      return;
    case 4:
      for (j = 0; j != 4; ++j)
        *((_DWORD *)v33 + j) = *(_DWORD *)(a1 + 4 * v35[j]);
      v7 = 0;
      do
      {
        v8 = v7++;
        if (v8 <= 2)
        {
          v9 = *((_DWORD *)v33 + v8);
          v10 = v7;
          do
          {
            v11 = *((_DWORD *)v33 + v10);
            if (v11 > v9)
            {
              *((_DWORD *)v33 + v10) = v9;
              *((_DWORD *)v33 + v8) = v11;
              v9 = v11;
            }
            ++v10;
          }
          while (v10 != 4);
        }
      }
      while (v7 != 4);
      return;
    default:
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      if (v1 > 0xFF)
        v12 = log2((double)v1);
      else
        v12 = dbl_236925608[v1];
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 1;
      break;
  }
  do
  {
    v17 = *(unsigned int *)(a1 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (v17 > 0xFF)
      {
        v19 = (double)v17;
        v18 = log2((double)v17);
      }
      else
      {
        v18 = dbl_236925608[v17];
        v19 = (double)v17;
      }
      v22 = v12 - v18;
      v23 = (unint64_t)(v22 + 0.5);
      v15 = v15 + v19 * v22;
      if (v23 >= 0xF)
        v23 = 15;
      if (v23 > v16)
        v16 = v23;
      ++*((_DWORD *)v33 + v23);
      ++v14;
      continue;
    }
    if (v14 == 255)
      break;
    v20 = 0;
    v21 = 256 - v14;
    while (!*(_DWORD *)(a1 + 4 + 4 * v14 + 4 * v20))
    {
      if (255 - v14 == ++v20)
        goto LABEL_37;
    }
    v21 = v20 + 1;
LABEL_37:
    v14 += v21;
    if (v14 == 256)
      break;
    v24 = v21 - 2;
    if (v21 > 2)
    {
      do
      {
        ++v13;
        v15 = v15 + 3.0;
        v5 = v24 > 7;
        v24 >>= 3;
      }
      while (v5);
    }
    else
    {
      LODWORD(v33[0]) += v21;
    }
  }
  while (v14 < 0x100);
  v25 = 0;
  v26 = 0;
  HIDWORD(v34) = v13;
  v27 = 0.0;
  do
  {
    v28 = *((unsigned int *)v33 + v26);
    if (v28 > 0xFF)
    {
      v30 = (double)v28;
      v29 = log2((double)v28);
    }
    else
    {
      v29 = dbl_236925608[v28];
      v30 = (double)v28;
    }
    v31 = *((unsigned int *)v33 + v26 + 1);
    if (v31 > 0xFF)
      v32 = log2((double)v31);
    else
      v32 = dbl_236925608[v31];
    v26 += 2;
    v25 += v28 + v31;
    v27 = v27 - v30 * v29 - (double)v31 * v32;
  }
  while ((unint64_t)(v26 - 2) < 0x10);
  if (v25 >= 0x100)
    log2((double)v25);
}

void sub_2367A1594(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t i;
  BOOL v5;
  uint64_t j;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[7];

  v35[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 2816);
  if (!v1)
    return;
  v3 = 0;
  for (i = 0; i != 704; ++i)
  {
    if (*(_DWORD *)(a1 + 4 * i))
    {
      v35[v3] = i;
      v5 = v3++ <= 3;
      if (!v5)
        break;
    }
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
      return;
    case 4:
      for (j = 0; j != 4; ++j)
        *((_DWORD *)v33 + j) = *(_DWORD *)(a1 + 4 * v35[j]);
      v7 = 0;
      do
      {
        v8 = v7++;
        if (v8 <= 2)
        {
          v9 = *((_DWORD *)v33 + v8);
          v10 = v7;
          do
          {
            v11 = *((_DWORD *)v33 + v10);
            if (v11 > v9)
            {
              *((_DWORD *)v33 + v10) = v9;
              *((_DWORD *)v33 + v8) = v11;
              v9 = v11;
            }
            ++v10;
          }
          while (v10 != 4);
        }
      }
      while (v7 != 4);
      return;
    default:
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      if (v1 > 0xFF)
        v12 = log2((double)v1);
      else
        v12 = dbl_236925608[v1];
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 1;
      break;
  }
  do
  {
    v17 = *(unsigned int *)(a1 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (v17 > 0xFF)
      {
        v19 = (double)v17;
        v18 = log2((double)v17);
      }
      else
      {
        v18 = dbl_236925608[v17];
        v19 = (double)v17;
      }
      v22 = v12 - v18;
      v23 = (unint64_t)(v22 + 0.5);
      v15 = v15 + v19 * v22;
      if (v23 >= 0xF)
        v23 = 15;
      if (v23 > v16)
        v16 = v23;
      ++*((_DWORD *)v33 + v23);
      ++v14;
      continue;
    }
    if (v14 > 0x2BE)
    {
      if (++v14 == 704)
        break;
      v21 = 1;
      goto LABEL_41;
    }
    v20 = 0;
    v21 = 704 - v14;
    while (!*(_DWORD *)(a1 + 4 + 4 * v14 + 4 * v20))
    {
      if (703 - v14 == ++v20)
        goto LABEL_39;
    }
    v21 = v20 + 1;
LABEL_39:
    v14 += v21;
    if (v14 == 704)
      break;
    v24 = v21 - 2;
    if (v21 > 2)
    {
      do
      {
        ++v13;
        v15 = v15 + 3.0;
        v5 = v24 > 7;
        v24 >>= 3;
      }
      while (v5);
      continue;
    }
LABEL_41:
    LODWORD(v33[0]) += v21;
  }
  while (v14 < 0x2C0);
  v25 = 0;
  v26 = 0;
  HIDWORD(v34) = v13;
  v27 = 0.0;
  do
  {
    v28 = *((unsigned int *)v33 + v26);
    if (v28 > 0xFF)
    {
      v30 = (double)v28;
      v29 = log2((double)v28);
    }
    else
    {
      v29 = dbl_236925608[v28];
      v30 = (double)v28;
    }
    v31 = *((unsigned int *)v33 + v26 + 1);
    if (v31 > 0xFF)
      v32 = log2((double)v31);
    else
      v32 = dbl_236925608[v31];
    v26 += 2;
    v25 += v28 + v31;
    v27 = v27 - v30 * v29 - (double)v31 * v32;
  }
  while ((unint64_t)(v26 - 2) < 0x10);
  if (v25 >= 0x100)
    log2((double)v25);
}

void sub_2367A1988(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t i;
  BOOL v5;
  uint64_t j;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[4];
  uint64_t v34;
  _QWORD v35[7];

  v35[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 2176);
  if (!v1)
    return;
  v3 = 0;
  for (i = 0; i != 544; ++i)
  {
    if (*(_DWORD *)(a1 + 4 * i))
    {
      v35[v3] = i;
      v5 = v3++ <= 3;
      if (!v5)
        break;
    }
  }
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
      return;
    case 4:
      for (j = 0; j != 4; ++j)
        *((_DWORD *)v33 + j) = *(_DWORD *)(a1 + 4 * v35[j]);
      v7 = 0;
      do
      {
        v8 = v7++;
        if (v8 <= 2)
        {
          v9 = *((_DWORD *)v33 + v8);
          v10 = v7;
          do
          {
            v11 = *((_DWORD *)v33 + v10);
            if (v11 > v9)
            {
              *((_DWORD *)v33 + v10) = v9;
              *((_DWORD *)v33 + v8) = v11;
              v9 = v11;
            }
            ++v10;
          }
          while (v10 != 4);
        }
      }
      while (v7 != 4);
      return;
    default:
      v34 = 0;
      memset(v33, 0, sizeof(v33));
      if (v1 > 0xFF)
        v12 = log2((double)v1);
      else
        v12 = dbl_236925608[v1];
      v13 = 0;
      v14 = 0;
      v15 = 0.0;
      v16 = 1;
      break;
  }
  do
  {
    v17 = *(unsigned int *)(a1 + 4 * v14);
    if ((_DWORD)v17)
    {
      if (v17 > 0xFF)
      {
        v19 = (double)v17;
        v18 = log2((double)v17);
      }
      else
      {
        v18 = dbl_236925608[v17];
        v19 = (double)v17;
      }
      v22 = v12 - v18;
      v23 = (unint64_t)(v22 + 0.5);
      v15 = v15 + v19 * v22;
      if (v23 >= 0xF)
        v23 = 15;
      if (v23 > v16)
        v16 = v23;
      ++*((_DWORD *)v33 + v23);
      ++v14;
      continue;
    }
    if (v14 > 0x21E)
    {
      if (++v14 == 544)
        break;
      v21 = 1;
      goto LABEL_41;
    }
    v20 = 0;
    v21 = 544 - v14;
    while (!*(_DWORD *)(a1 + 4 + 4 * v14 + 4 * v20))
    {
      if (543 - v14 == ++v20)
        goto LABEL_39;
    }
    v21 = v20 + 1;
LABEL_39:
    v14 += v21;
    if (v14 == 544)
      break;
    v24 = v21 - 2;
    if (v21 > 2)
    {
      do
      {
        ++v13;
        v15 = v15 + 3.0;
        v5 = v24 > 7;
        v24 >>= 3;
      }
      while (v5);
      continue;
    }
LABEL_41:
    LODWORD(v33[0]) += v21;
  }
  while (v14 < 0x220);
  v25 = 0;
  v26 = 0;
  HIDWORD(v34) = v13;
  v27 = 0.0;
  do
  {
    v28 = *((unsigned int *)v33 + v26);
    if (v28 > 0xFF)
    {
      v30 = (double)v28;
      v29 = log2((double)v28);
    }
    else
    {
      v29 = dbl_236925608[v28];
      v30 = (double)v28;
    }
    v31 = *((unsigned int *)v33 + v26 + 1);
    if (v31 > 0xFF)
      v32 = log2((double)v31);
    else
      v32 = dbl_236925608[v31];
    v26 += 2;
    v25 += v28 + v31;
    v27 = v27 - v30 * v29 - (double)v31 * v32;
  }
  while ((unint64_t)(v26 - 2) < 0x10);
  if (v25 >= 0x100)
    log2((double)v25);
}

uint64_t sub_2367A1D7C(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, size_t a5, size_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v18;
  unsigned int *v19;
  size_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  int *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unint64_t v84;
  double v85;
  char *v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  double v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  double v97;
  double v98;
  double v99;
  unint64_t i;
  double v101;
  unsigned int v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned __int16 v106;
  uint64_t v107;
  uint64_t j;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int *v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t k;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  char *v157;
  int *v158;
  _DWORD *v159;
  int v160;
  unint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  size_t v164;
  unsigned int *v165;
  uint64_t m;
  void *v167;
  unint64_t v168;
  char *v169;
  _DWORD *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  double v178;
  unsigned int *v179;
  unint64_t v180;
  double v181;
  size_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void *v187;
  unint64_t v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  void *v193;
  _DWORD *v194;
  unsigned __int8 v195;
  uint64_t v196;
  int v197;
  _DWORD *v198;
  int v199;
  uint64_t v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int16 *v206;
  __int16 v207;
  unint64_t v208;
  size_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  size_t v223;
  uint64_t v224;
  size_t v225;
  uint64_t v226;
  size_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  unsigned __int16 *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  void *v244;
  char *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unint64_t v259;
  double v260;
  char *v261;
  unsigned int *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  double v266;
  uint64_t v267;
  double v268;
  unint64_t v269;
  uint64_t v270;
  char *v271;
  double v272;
  double v273;
  double v274;
  unint64_t n;
  double v276;
  unsigned int v277;
  char *v278;
  size_t v279;
  uint64_t v280;
  unsigned __int16 v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unsigned int *v310;
  char *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  unsigned __int16 *v319;
  unsigned int v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  char *v334;
  int *v335;
  _DWORD *v336;
  int v337;
  unint64_t v338;
  unsigned int *v339;
  uint64_t v340;
  unsigned int *v341;
  unsigned int *v342;
  uint64_t ii;
  void *v344;
  unint64_t v345;
  char *v346;
  _DWORD *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  double v355;
  unsigned int *v356;
  unint64_t v357;
  double v358;
  size_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  void *v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  void *v369;
  _DWORD *v370;
  unsigned __int8 v371;
  uint64_t v372;
  int v373;
  _DWORD *v374;
  int v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  _WORD *v379;
  unint64_t v380;
  size_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  void *v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD *v395;
  unint64_t v396;
  uint64_t v397;
  size_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  char *v407;
  unint64_t v408;
  unint64_t v409;
  unsigned __int16 *v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  void *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  uint64_t v429;
  unsigned int *v430;
  unint64_t v431;
  double v432;
  char *v433;
  unsigned int *v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int *v437;
  double v438;
  uint64_t v439;
  double v440;
  unint64_t v441;
  uint64_t v442;
  char *v443;
  double v444;
  double v445;
  double v446;
  unint64_t jj;
  double v448;
  unsigned int v449;
  char *v450;
  unint64_t v451;
  uint64_t v452;
  unsigned __int16 v453;
  uint64_t v454;
  uint64_t kk;
  _QWORD *v456;
  uint64_t v457;
  uint64_t mm;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  _DWORD *v462;
  uint64_t v463;
  unsigned int *v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  char *v468;
  void *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  char *v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unsigned int *v486;
  char *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  unsigned __int16 *v495;
  unsigned int v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  char *v501;
  void *v502;
  unint64_t v503;
  unint64_t v504;
  void *v505;
  void *v506;
  char *v507;
  uint64_t v508;
  char *v509;
  int *v510;
  _DWORD *v511;
  int v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  unsigned int *v517;
  _DWORD *v518;
  size_t v519;
  unsigned int *v520;
  unsigned int *v521;
  uint64_t v522;
  void *v523;
  unint64_t v524;
  int *v525;
  _DWORD *v526;
  _DWORD *v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  double v533;
  double v534;
  unsigned int *v535;
  unint64_t v536;
  double v537;
  size_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  void *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  void *v548;
  unsigned __int8 v549;
  uint64_t v550;
  int v551;
  _DWORD *v552;
  int v553;
  uint64_t v554;
  int v555;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  uint64_t v560;
  _QWORD *v563;
  uint64_t v564;
  unsigned int *v565;
  unsigned int *v566;
  int v567[2];
  unsigned int *v569;
  char *v570;
  unint64_t v571;
  char *v572;
  void *v573;
  _DWORD *v574;
  unint64_t v575;
  _DWORD *v576;
  char *v577;
  void *__src;
  void *__srca;
  void *__srcb;
  _DWORD *v581;
  unint64_t v582;
  int v583[2];
  void *__dst;
  _DWORD *__dsta;
  char *__dstb;
  char *__dstc;
  void *__dstd;
  char *__dste;
  unint64_t v590;
  int v591[2];
  int v592[2];
  int v593[2];
  int v594[2];
  int v595[2];
  int v596[2];
  int v597[2];
  int v598[2];
  unint64_t v599;
  void *v600;
  uint64_t v601;
  size_t v602;
  _DWORD *v603;
  char *v604;
  void *v605;
  void *v606;
  int v607[2];
  unint64_t v608;
  int v609[2];
  unint64_t v610;
  unint64_t v611;
  size_t v612;
  char *v613;
  size_t v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;
  int v618[2];
  int v619[2];
  uint64_t v621;
  char *v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  int *v628;
  unint64_t v629;
  unint64_t v630;
  void *v631;
  int *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int *v636;
  uint64_t v637;
  uint64_t v638;
  unsigned int *v639;
  void *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  unsigned int *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int *v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  char *v653;
  uint64_t v654;
  char *v655;
  unint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  _DWORD *v660;
  uint64_t v661;
  _DWORD *v662;
  uint64_t v663;
  _DWORD *v664;

  v10 = a3;
  v11 = a2;
  v12 = a1;
  v14 = (_QWORD *)a9;
  v13 = a10;
  if (!a3)
  {
    v22 = 0;
LABEL_32:
    *a8 = 1;
    goto LABEL_264;
  }
  v18 = 0;
  v19 = (unsigned int *)v11;
  v20 = a3;
  do
  {
    v21 = *v19;
    v19 += 4;
    v18 += v21;
    --v20;
  }
  while (v20);
  v652 = v18;
  v563 = a8;
  if (v18)
  {
    v626 = (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 16));
    if (!v626)
      goto LABEL_796;
  }
  else
  {
    v626 = 0;
  }
  v23 = 0;
  v24 = a6 + 1;
  v25 = (int *)(v11 + 4);
  v26 = v10;
  do
  {
    v27 = a5 & a6;
    v28 = *(v25 - 1);
    if (v27 + v28 > a6)
    {
      v29 = v24 - v27;
      memcpy((void *)(v626 + v23), (const void *)(a4 + v27), v24 - v27);
      v27 = 0;
      v23 += v29;
      v28 -= v29;
    }
    if (v28)
    {
      memcpy((void *)(v626 + v23), (const void *)(a4 + v27), v28);
      v23 += v28;
    }
    v30 = *v25;
    v25 += 4;
    a5 = v28 + v27 + (v30 & 0x1FFFFFF);
    --v26;
  }
  while (v26);
  v31 = v652;
  if (v652 >> 7 <= 0x1A8)
    v32 = (unsigned __int16)v652 / 0x220u + 1;
  else
    v32 = 100;
  if (!v652)
  {
    v12 = a1;
    v14 = (_QWORD *)a9;
    v13 = a10;
    v11 = a2;
    a8 = v563;
    v22 = v626;
    goto LABEL_32;
  }
  v12 = a1;
  v22 = v626;
  if (v652 <= 0x7F)
  {
    v33 = v563[4];
    v34 = v563[1];
    v35 = v34 + 1;
    if (v33 >= v34 + 1)
    {
      v14 = (_QWORD *)a9;
      v13 = a10;
      v11 = a2;
LABEL_63:
      v71 = v563[5];
      if (v71 >= v35)
      {
LABEL_73:
        *v563 = 1;
        *(_BYTE *)(v563[2] + v34) = 0;
        v76 = v563[1];
        *(_DWORD *)(v563[3] + 4 * v76) = v31;
        v563[1] = v76 + 1;
        goto LABEL_264;
      }
      if (v71)
        v72 = v563[5];
      else
        v72 = v35;
      do
      {
        v73 = v72;
        v72 *= 2;
      }
      while (v73 < v35);
      if (v73)
      {
        v74 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v73);
        if (!v74)
          goto LABEL_796;
        v75 = (void *)v74;
        v71 = v563[5];
        if (!v71)
          goto LABEL_72;
      }
      else
      {
        v75 = 0;
        if (!v71)
          goto LABEL_72;
      }
      memcpy(v75, (const void *)v563[3], 4 * v71);
LABEL_72:
      (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), v563[3]);
      v563[3] = v75;
      v563[5] = v73;
      v34 = v563[1];
      v31 = v652;
      goto LABEL_73;
    }
    if (v33)
      v36 = v563[4];
    else
      v36 = v34 + 1;
    v14 = (_QWORD *)a9;
    v13 = a10;
    v11 = a2;
    do
    {
      v37 = v36;
      v36 *= 2;
    }
    while (v37 < v35);
    if (v37)
    {
      v38 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v37);
      if (!v38)
        goto LABEL_796;
      v39 = (void *)v38;
      v33 = v563[4];
      if (!v33)
        goto LABEL_30;
    }
    else
    {
      v39 = 0;
      if (!v33)
        goto LABEL_30;
    }
    memcpy(v39, (const void *)v563[2], v33);
LABEL_30:
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), v563[2]);
    v563[2] = v39;
    v563[4] = v37;
    v34 = v563[1];
    v35 = v34 + 1;
    v31 = v652;
    goto LABEL_63;
  }
  v40 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 1040 * v32 + 1040);
  if (!v40)
    goto LABEL_796;
  v645 = v40;
  v41 = (_QWORD *)v40;
  v42 = v32;
  do
  {
    bzero(v41, 0x408uLL);
    v41[129] = 0x7FF0000000000000;
    v41 += 130;
    --v42;
  }
  while (v42);
  v43 = 0;
  LODWORD(v44) = 7;
  do
  {
    v45 = v43 * v652 / v32;
    if (v43)
    {
      v44 = (16807 * v44);
      v45 += v44 % (v652 / v32);
    }
    v46 = 0;
    if (v45 + 70 >= v652)
      v47 = v652 - 71;
    else
      v47 = v45;
    v48 = v645 + 1040 * v43;
    v49 = v626 + v47;
    *(_QWORD *)(v48 + 1024) += 70;
    do
      ++*(_DWORD *)(v48 + 4 * *(unsigned __int8 *)(v49 + v46++));
    while (v46 != 70);
    ++v43;
  }
  while (v43 != v32);
  v50 = v32 + 2 * v652 / 0x46 + 99 - (v32 + 2 * v652 / 0x46 + 99) % v32;
  if (v50)
  {
    v51 = 0;
    v52 = (_QWORD *)(v645 + 1040 * v32);
    if (v50 <= 1)
      v53 = 1;
    else
      v53 = v32 + 2 * v652 / 0x46 + 99 - (v32 + 2 * v652 / 0x46 + 99) % v32;
    LODWORD(v54) = 7;
    do
    {
      bzero(v52, 0x400uLL);
      v52[129] = 0x7FF0000000000000;
      v54 = (16807 * v54);
      v55 = (unsigned __int8 *)(v626 + v54 % (v652 - 69));
      v52[128] = 70;
      v56 = -70;
      do
      {
        v57 = *v55++;
        ++*((_DWORD *)v52 + v57);
        v58 = __CFADD__(v56++, 1);
      }
      while (!v58);
      v59 = 0;
      v60 = 0;
      v61 = v645 + 1040 * (v51 % v32);
      *(_QWORD *)(v61 + 1024) += 70;
      do
      {
        *(_DWORD *)(v61 + 4 * v60++) += *(_DWORD *)((char *)v52 + v59);
        v59 += 4;
      }
      while (v59 != 1024);
      ++v51;
    }
    while (v51 != v53);
  }
  v62 = a1;
  v63 = v652;
  v64 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v652);
  if (!v64)
    goto LABEL_796;
  v65 = (char *)v64;
  v66 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v32 << 11);
  if (!v66)
    goto LABEL_796;
  v67 = (char *)v66;
  v68 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 8 * v32);
  if (!v68)
    goto LABEL_796;
  v69 = (void *)v68;
  if (((v32 + 7) >> 3) * v652)
  {
    v70 = (char *)(*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 16));
    if (!v70)
      goto LABEL_796;
  }
  else
  {
    v70 = 0;
  }
  v77 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 2 * v32);
  if (!v77)
    goto LABEL_796;
  v78 = (void *)v77;
  v79 = 0;
  v80 = 3;
  if (*(int *)(a7 + 4) > 10)
    v80 = 10;
  v621 = v80;
  v610 = v652 - 1;
  v570 = v65;
  v631 = (void *)v77;
  *(_QWORD *)v594 = v65 - 2;
  do
  {
    v637 = v79;
    if (v32 > 1)
    {
      v616 = (v32 + 7) >> 3;
      bzero(v67, v32 << 11);
      v82 = 0;
      v83 = (unsigned int *)(v645 + 1024);
      do
      {
        v84 = *v83;
        if (v84 > 0xFF)
          v85 = log2((double)v84);
        else
          v85 = dbl_236925608[v84];
        v83 += 260;
        *(double *)&v67[8 * v82++] = v85;
      }
      while (v32 != v82);
      v86 = &v67[2040 * v32];
      v87 = (unsigned int *)(v645 + 1020);
      v88 = 256;
      do
      {
        v89 = 0;
        --v88;
        v90 = v87;
        do
        {
          v91 = *(double *)&v67[8 * v89];
          v92 = *v90;
          if ((_DWORD)v92)
          {
            if (v92 > 0xFF)
              v93 = log2((double)v92);
            else
              v93 = dbl_236925608[v92];
          }
          else
          {
            v93 = -2.0;
          }
          v90 += 260;
          *(double *)&v86[8 * v89++] = v91 - v93;
        }
        while (v32 != v89);
        v86 -= 8 * v32;
        --v87;
      }
      while (v88);
      bzero(v69, 8 * v32);
      v63 = v652;
      bzero(v70, v616 * v652);
      v94 = 0;
      v62 = a1;
      v22 = v626;
      v65 = v570;
      do
      {
        v95 = 0;
        v96 = &v67[8 * v32 * *(unsigned __int8 *)(v626 + v94)];
        v97 = 1.0e99;
        do
        {
          v98 = *(double *)&v96[8 * v95] + *((double *)v69 + v95);
          *((double *)v69 + v95) = v98;
          if (v98 < v97)
          {
            v570[v94] = v95;
            v97 = v98;
          }
          ++v95;
        }
        while (v32 != v95);
        v99 = 28.1;
        if (v94 <= 0x7CF)
          v99 = ((double)v94 * 0.07 / 2000.0 + 0.77) * 28.1;
        for (i = 0; i != v32; ++i)
        {
          v101 = *((double *)v69 + i) - v97;
          *((double *)v69 + i) = v101;
          if (v101 >= v99)
          {
            *((double *)v69 + i) = v99;
            v70[v94 * v616 + (i >> 3)] |= 1 << (i & 7);
          }
        }
        ++v94;
      }
      while (v94 != v652);
      v102 = v570[v610];
      v103 = &v70[(v652 - 2) * v616];
      v104 = v652;
      v81 = 1;
      v78 = v631;
      do
      {
        if (((v103[(unint64_t)v102 >> 3] >> (v102 & 7)) & 1) != 0)
        {
          if (v102 != *(unsigned __int8 *)(*(_QWORD *)v594 + v104))
            ++v81;
          v102 = *(unsigned __int8 *)(*(_QWORD *)v594 + v104);
        }
        v103 -= v616;
        *(_BYTE *)(*(_QWORD *)v594 + v104--) = v102;
      }
      while (v104 != 1);
    }
    else
    {
      bzero(v65, v63);
      v81 = 1;
    }
    v617 = v81;
    if (v32)
      memset_pattern16(v78, &unk_2368AFB00, 2 * v32);
    v105 = 0;
    v106 = 0;
    do
    {
      v107 = v65[v105];
      if (*((_WORD *)v78 + v107) == 256)
        *((_WORD *)v78 + v107) = v106++;
      ++v105;
    }
    while (v63 != v105);
    for (j = 0; j != v63; ++j)
      v65[j] = *((_WORD *)v78 + v65[j]);
    v32 = v106;
    if (v106)
    {
      v109 = (_QWORD *)v645;
      v110 = v106;
      do
      {
        bzero(v109, 0x408uLL);
        v109[129] = 0x7FF0000000000000;
        v109 += 130;
        --v110;
      }
      while (v110);
    }
    v111 = 0;
    v63 = v652;
    do
    {
      v112 = v645 + 1040 * v65[v111];
      ++*(_DWORD *)(v112 + 4 * *(unsigned __int8 *)(v22 + v111));
      ++*(_QWORD *)(v112 + 1024);
      ++v111;
    }
    while (v652 != v111);
    v78 = v631;
    v79 = v637 + 1;
  }
  while (v637 + 1 != v621);
  (*(void (**)(_QWORD, char *))(v62 + 8))(*(_QWORD *)(v62 + 16), v67);
  (*(void (**)(_QWORD, void *))(v62 + 8))(*(_QWORD *)(v62 + 16), v69);
  (*(void (**)(_QWORD, char *))(v62 + 8))(*(_QWORD *)(v62 + 16), v70);
  (*(void (**)(_QWORD, void *))(v62 + 8))(*(_QWORD *)(v62 + 16), v631);
  (*(void (**)(_QWORD, uint64_t))(v62 + 8))(*(_QWORD *)(v62 + 16), v645);
  if (v617)
  {
    v581 = (_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))v62)(*(_QWORD *)(v62 + 16), 4 * v617);
    if (!v581)
      goto LABEL_796;
    v113 = v617 + 256;
    if (v617 == -256)
    {
      v114 = 0;
      v115 = 0x3FFFFFFFFFFFFCFLL;
      goto LABEL_135;
    }
  }
  else
  {
    v581 = 0;
    v113 = 256;
  }
  v116 = (*(uint64_t (**)(_QWORD, uint64_t))v62)(*(_QWORD *)(v62 + 16), 4 * v113);
  if (!v116)
    goto LABEL_796;
  v114 = (unsigned int *)v116;
  v117 = v617;
  v118 = 16 * v617 + 1008;
  v115 = v118 >> 6;
  if (v118 < 0x40)
  {
    v119 = 0;
    __src = 0;
    goto LABEL_138;
  }
LABEL_135:
  v120 = v115;
  v121 = (*(uint64_t (**)(_QWORD, uint64_t))v62)(*(_QWORD *)(v62 + 16), 1040 * v115);
  if (!v121)
    goto LABEL_796;
  v119 = (char *)v121;
  v122 = (*(uint64_t (**)(_QWORD, uint64_t))v62)(*(_QWORD *)(v62 + 16), 4 * v120);
  if (!v122)
    goto LABEL_796;
  __src = (void *)v122;
  v117 = v617;
  v115 = v120;
LABEL_138:
  v600 = (void *)v115;
  v123 = 64;
  if (v117 < 0x40)
    v123 = v117;
  if (v123)
  {
    v124 = (*(uint64_t (**)(_QWORD, uint64_t))v62)(*(_QWORD *)(v62 + 16), 1040 * v123);
    if (!v124)
      goto LABEL_796;
  }
  else
  {
    v124 = 0;
  }
  v125 = (*(uint64_t (**)(_QWORD, uint64_t))v62)(*(_QWORD *)(v62 + 16), 49176);
  if (!v125)
    goto LABEL_796;
  v126 = (unsigned int *)v125;
  v127 = (*(uint64_t (**)(_QWORD, uint64_t))v62)(*(_QWORD *)(v62 + 16), 2080);
  if (!v127)
    goto LABEL_796;
  v128 = v127;
  v129 = (char *)(v114 + 256);
  bzero(v114, 4 * v113);
  v130 = 0;
  v131 = 0;
  v132 = v617;
  do
  {
    ++*(_DWORD *)&v129[4 * v130];
    if (v610 == v131 || v570[v131] != v570[v131 + 1])
      ++v130;
    ++v131;
  }
  while (v652 != v131);
  v638 = v124;
  v565 = v126;
  v646 = (uint64_t)v114;
  v653 = v119;
  v622 = (char *)(v114 + 256);
  if (v617)
  {
    v133 = 0;
    v659 = 0;
    v604 = 0;
    *(_QWORD *)v607 = 0;
    v632 = (int *)(v114 + 128);
    v134 = v114 + 64;
    v135 = (char *)(v114 + 192);
    v136 = 0;
    *(_QWORD *)v595 = v581;
    v137 = v617;
    __dst = v600;
    do
    {
      v575 = v137 - 64;
      if (v137 >= 0x40)
        v138 = 64;
      else
        v138 = v137;
      v139 = v132 - v133;
      if (v132 - v133 >= 0x40)
        v139 = 64;
      v611 = v136;
      v590 = v139;
      if (v139)
      {
        v140 = 0;
        do
        {
          v141 = *(unsigned int *)&v129[4 * v140 + 4 * v133];
          v142 = (_QWORD *)(v638 + 1040 * v140);
          bzero(v142, 0x408uLL);
          v142[129] = 0x7FF0000000000000;
          if ((_DWORD)v141)
          {
            for (k = 0; k != v141; v142[128] = k)
              ++*((_DWORD *)v142 + *(unsigned __int8 *)(v626 + v659 + k++));
            v659 += v141;
          }
          sub_2367A11A8((uint64_t)v142);
          v142[129] = v144;
          v134[v140] = v140;
          v632[v140] = v140;
          *(_DWORD *)(v646 + 4 * v140++) = 1;
        }
        while (v140 != v138);
        v145 = sub_2367A8858(v638, (char *)v128, v646, v632, v134, v565, v590, v590, 0x40uLL, 0x800uLL);
        v136 = v611;
      }
      else
      {
        v145 = 0;
      }
      v146 = (unint64_t)__dst;
      v147 = (unint64_t)v600;
      if ((unint64_t)__dst < v145 + *(_QWORD *)v607)
      {
        if (__dst)
          v148 = (unint64_t)__dst;
        else
          v148 = v145 + *(_QWORD *)v607;
        do
        {
          v149 = v148;
          v148 *= 2;
        }
        while (v149 < v145 + *(_QWORD *)v607);
        if (v149)
        {
          v150 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 1040 * v149);
          v146 = (unint64_t)__dst;
          v151 = (char *)v150;
          if (!v150)
            goto LABEL_796;
        }
        else
        {
          v151 = 0;
        }
        if (v146)
          memcpy(v151, v653, 1040 * v146);
        (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v653);
        v146 = v149;
        v653 = v151;
        v147 = (unint64_t)v600;
        v136 = v611;
      }
      __dst = (void *)v146;
      if (v147 >= (unint64_t)&v604[v145])
      {
        v155 = __src;
      }
      else
      {
        if (v147)
          v152 = v147;
        else
          v152 = (uint64_t)&v604[v145];
        do
        {
          v153 = v152;
          v152 *= 2;
        }
        while (v153 < (unint64_t)&v604[v145]);
        if (v153)
        {
          v154 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v153);
          v147 = (unint64_t)v600;
          v155 = (void *)v154;
          if (!v154)
            goto LABEL_796;
        }
        else
        {
          v155 = 0;
        }
        if (v147)
          memcpy(v155, __src, 4 * v147);
        (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), __src);
        v147 = v153;
        v136 = v611;
      }
      v600 = (void *)v147;
      __src = v155;
      if (v145)
      {
        v156 = 0;
        v157 = &v653[1040 * *(_QWORD *)v607];
        do
        {
          memcpy(v157, (const void *)(v638 + 1040 * v134[v156]), 0x410uLL);
          *((_DWORD *)v155 + (_QWORD)v604 + v156) = *(_DWORD *)(v646 + 4 * v134[v156]);
          *(_DWORD *)&v135[4 * v134[v156]] = v156;
          ++v156;
          v157 += 1040;
        }
        while (v145 != v156);
        v604 += v156;
        v136 = v611;
        *(_QWORD *)v607 += v156;
        v129 = v622;
      }
      v132 = v617;
      if (v590)
      {
        v158 = v632;
        v159 = *(_DWORD **)v595;
        do
        {
          v160 = *v158++;
          *v159++ = *(_DWORD *)&v135[4 * v160] + v136;
          --v138;
        }
        while (v138);
      }
      v136 += v145;
      v133 += 64;
      *(_QWORD *)v595 += 256;
      v137 = v575;
    }
    while (v133 < v617);
  }
  else
  {
    v136 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v638);
  if (v136 << 6 >= (v136 >> 1) * v136)
    v161 = (v136 >> 1) * v136;
  else
    v161 = v136 << 6;
  if (v161 < 0x801)
  {
    v163 = (uint64_t)v653;
    v162 = v565;
  }
  else
  {
    (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v565);
    v162 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 24 * v161 + 24);
    v163 = (uint64_t)v653;
    if (!v162)
      goto LABEL_796;
  }
  v164 = 4 * v136;
  if (v136)
  {
    v165 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v136);
    if (!v165)
      goto LABEL_796;
    for (m = 0; m != v136; ++m)
      v165[m] = m;
    v557 = v161;
    v167 = __src;
    v639 = v165;
    v168 = v136;
    v136 = sub_2367A8858(v163, (char *)v128, (uint64_t)__src, v581, v165, v162, v136, v617, 0x100uLL, v557);
  }
  else
  {
    v168 = 0;
    v639 = 0;
    v167 = __src;
  }
  (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v162);
  (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v167);
  v169 = v622;
  if (v168)
  {
    v170 = (_DWORD *)(*(uint64_t (**)(_QWORD, size_t))a1)(*(_QWORD *)(a1 + 16), v164);
    if (!v170)
      goto LABEL_796;
    v660 = v170;
    memset(v170, 255, v164);
  }
  else
  {
    v660 = 0;
  }
  if (v617)
  {
    v171 = 0;
    v172 = 0;
    v173 = 0;
    do
    {
      bzero((void *)v128, 0x408uLL);
      *(_QWORD *)(v128 + 1032) = 0x7FF0000000000000;
      if (*(_DWORD *)&v169[4 * v172])
      {
        v174 = 0;
        do
        {
          ++*(_DWORD *)(v128 + 4 * *(unsigned __int8 *)(v626 + v173 + v174++));
          *(_QWORD *)(v128 + 1024) = v174;
        }
        while (v174 < *(unsigned int *)&v169[4 * v172]);
        v173 += v174;
      }
      v175 = v172 - 1;
      if (!v172)
        v175 = 0;
      v176 = v581[v175];
      v177 = sub_2367A8B2C((_QWORD *)v128, v163 + 1040 * v176, (char *)(v128 + 1040));
      if (v136)
      {
        v178 = v177;
        v179 = v639;
        v180 = v136;
        do
        {
          v181 = sub_2367A8B2C((_QWORD *)v128, (uint64_t)&v653[1040 * *v179], (char *)(v128 + 1040));
          if (v181 < v178)
          {
            v176 = *v179;
            v178 = v181;
          }
          ++v179;
          --v180;
        }
        while (v180);
      }
      v581[v172] = v176;
      if (v660[v176] == -1)
        v660[v176] = v171++;
      v169 = v622;
      v163 = (uint64_t)v653;
      ++v172;
    }
    while (v172 != v617);
  }
  v12 = a1;
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v128);
  (*(void (**)(_QWORD, unsigned int *))(v12 + 8))(*(_QWORD *)(v12 + 16), v639);
  (*(void (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v163);
  v13 = a10;
  v182 = v563[4];
  v183 = v617;
  v10 = a3;
  v11 = a2;
  v14 = (_QWORD *)a9;
  v22 = v626;
  if (v182 < v617)
  {
    if (v182)
      v184 = v563[4];
    else
      v184 = v617;
    do
    {
      v185 = v184;
      v184 *= 2;
    }
    while (v185 < v617);
    if (v185)
    {
      v186 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v185);
      if (!v186)
        goto LABEL_796;
      v187 = (void *)v186;
      v182 = v563[4];
      if (!v182)
        goto LABEL_244;
    }
    else
    {
      v187 = 0;
      if (!v182)
        goto LABEL_244;
    }
    memcpy(v187, (const void *)v563[2], v182);
LABEL_244:
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), v563[2]);
    v563[2] = v187;
    v563[4] = v185;
    v183 = v617;
  }
  v188 = v563[5];
  v189 = v570;
  if (v188 < v183)
  {
    if (v188)
      v190 = v563[5];
    else
      v190 = v183;
    do
    {
      v191 = v190;
      v190 *= 2;
    }
    while (v191 < v183);
    if (v191)
    {
      v192 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v191);
      if (!v192)
        goto LABEL_796;
      v193 = (void *)v192;
      v188 = v563[5];
      if (!v188)
        goto LABEL_254;
    }
    else
    {
      v193 = 0;
      if (!v188)
        goto LABEL_254;
    }
    memcpy(v193, (const void *)v563[3], 4 * v188);
LABEL_254:
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), v563[3]);
    v563[3] = v193;
    v563[5] = v191;
    v189 = v570;
    v183 = v617;
    v194 = v660;
    goto LABEL_256;
  }
  v194 = v660;
  if (v183)
  {
LABEL_256:
    v195 = 0;
    v196 = 0;
    v197 = 0;
    v198 = v581 + 1;
    do
    {
      v199 = *(_DWORD *)v622;
      v622 += 4;
      v197 += v199;
      v200 = *(v198 - 1);
      if (v183 == 1 || (_DWORD)v200 != *v198)
      {
        v201 = v194[v200];
        *(_BYTE *)(v563[2] + v196) = v201;
        *(_DWORD *)(v563[3] + 4 * v196) = v197;
        if (v195 <= v201)
          v195 = v201;
        ++v196;
        v197 = 0;
      }
      ++v198;
      --v183;
    }
    while (v183);
    goto LABEL_263;
  }
  v196 = 0;
  v195 = 0;
LABEL_263:
  *v563 = v195 + 1;
  v563[1] = v196;
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v646);
  (*(void (**)(_QWORD, _DWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v581);
  (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v189);
LABEL_264:
  (*(void (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v22);
  if (!v10)
  {
    *v14 = 1;
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v12 + 16), 0);
    v216 = 0;
LABEL_548:
    *(_QWORD *)v13 = 1;
    return (*(uint64_t (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v216);
  }
  v202 = 2 * v10;
  v203 = (*(uint64_t (**)(_QWORD, size_t))v12)(*(_QWORD *)(v12 + 16), 2 * v10);
  if (!v203)
    goto LABEL_796;
  v204 = v203;
  v205 = 0;
  v206 = (__int16 *)(v11 + 12);
  do
  {
    v207 = *v206;
    v206 += 8;
    *(_WORD *)(v203 + 2 * v205++) = v207;
  }
  while (v10 != v205);
  if (v10 <= 0x6783)
    v208 = (unsigned __int16)v10 / 0x212u + 1;
  else
    v208 = 50;
  v623 = v203;
  if (v10 < 0x80)
  {
    v209 = *(_QWORD *)(a9 + 32);
    v210 = *(_QWORD *)(a9 + 8);
    v211 = v210 + 1;
    if (v209 >= v210 + 1)
    {
      v13 = a10;
LABEL_315:
      v246 = *(_QWORD *)(a9 + 40);
      if (v246 >= v211)
      {
LABEL_325:
        *(_QWORD *)a9 = 1;
        *(_BYTE *)(*(_QWORD *)(a9 + 16) + v210) = 0;
        v251 = *(_QWORD *)(a9 + 8);
        *(_DWORD *)(*(_QWORD *)(a9 + 24) + 4 * v251) = v10;
        *(_QWORD *)(a9 + 8) = v251 + 1;
        goto LABEL_516;
      }
      if (v246)
        v247 = *(_QWORD *)(a9 + 40);
      else
        v247 = v211;
      do
      {
        v248 = v247;
        v247 *= 2;
      }
      while (v248 < v211);
      if (v248)
      {
        v249 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), 4 * v248);
        if (!v249)
          goto LABEL_796;
        v250 = (void *)v249;
        v246 = *(_QWORD *)(a9 + 40);
        if (!v246)
          goto LABEL_324;
      }
      else
      {
        v250 = 0;
        if (!v246)
          goto LABEL_324;
      }
      memcpy(v250, *(const void **)(a9 + 24), 4 * v246);
LABEL_324:
      (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v12 + 16), *(_QWORD *)(a9 + 24));
      *(_QWORD *)(a9 + 24) = v250;
      *(_QWORD *)(a9 + 40) = v248;
      v210 = *(_QWORD *)(a9 + 8);
      v204 = v623;
      goto LABEL_325;
    }
    if (v209)
      v212 = *(_QWORD *)(a9 + 32);
    else
      v212 = v210 + 1;
    v13 = a10;
    do
    {
      v213 = v212;
      v212 *= 2;
    }
    while (v213 < v211);
    if (v213)
    {
      v214 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), v213);
      if (!v214)
        goto LABEL_796;
      v215 = (void *)v214;
      v209 = *(_QWORD *)(a9 + 32);
      if (!v209)
        goto LABEL_282;
    }
    else
    {
      v215 = 0;
      if (!v209)
        goto LABEL_282;
    }
    memcpy(v215, *(const void **)(a9 + 16), v209);
LABEL_282:
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v12 + 16), *(_QWORD *)(a9 + 16));
    *(_QWORD *)(a9 + 16) = v215;
    *(_QWORD *)(a9 + 32) = v213;
    v210 = *(_QWORD *)(a9 + 8);
    v211 = v210 + 1;
    v204 = v623;
    goto LABEL_315;
  }
  v217 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 2832 * v208 + 2832);
  if (!v217)
    goto LABEL_796;
  v654 = v217;
  v218 = (_QWORD *)v217;
  v219 = v208;
  do
  {
    bzero(v218, 0xB08uLL);
    v218[353] = 0x7FF0000000000000;
    v218 += 354;
    --v219;
  }
  while (v219);
  v220 = 0;
  LODWORD(v221) = 7;
  v222 = v623;
  do
  {
    v223 = v220 * v10 / v208;
    if (v220)
    {
      v221 = (16807 * v221);
      v223 += v221 % (v10 / v208);
    }
    v224 = 0;
    if (v223 + 40 >= v10)
      v225 = v10 - 41;
    else
      v225 = v223;
    v226 = v654 + 2832 * v220;
    v227 = v623 + 2 * v225;
    *(_QWORD *)(v226 + 2816) += 40;
    do
    {
      ++*(_DWORD *)(v226 + 4 * *(unsigned __int16 *)(v227 + v224));
      v224 += 2;
    }
    while (v224 != 80);
    ++v220;
  }
  while (v220 != v208);
  v228 = v208 + v202 / 0x28 + 99 - (v208 + v202 / 0x28 + 99) % v208;
  v560 = 2 * v10;
  if (v228)
  {
    v229 = 0;
    v230 = (char *)(v654 + 2832 * v208);
    if (v228 <= 1)
      v231 = 1;
    else
      v231 = v208 + v202 / 0x28 + 99 - (v208 + v202 / 0x28 + 99) % v208;
    LODWORD(v232) = 7;
    do
    {
      bzero(v230, 0xB00uLL);
      v232 = (16807 * v232);
      v233 = (unsigned __int16 *)(v623 + 2 * (v232 % (v10 - 39)));
      *(_QWORD *)(v654 + 2832 * v208 + 2816) = 40;
      v234 = -40;
      do
      {
        v235 = *v233++;
        ++*(_DWORD *)&v230[4 * v235];
        v58 = __CFADD__(v234++, 1);
      }
      while (!v58);
      v236 = 0;
      v237 = 0;
      v238 = v654 + 2832 * (v229 % v208);
      *(_QWORD *)(v238 + 2816) += 40;
      do
      {
        *(_DWORD *)(v238 + 4 * v237++) += *(_DWORD *)&v230[v236];
        v236 += 4;
      }
      while (v236 != 2816);
      ++v229;
    }
    while (v229 != v231);
    *(_QWORD *)(v654 + 2832 * v208 + 2824) = 0x7FF0000000000000;
    v12 = a1;
    v222 = v623;
    v10 = a3;
  }
  v239 = (*(uint64_t (**)(_QWORD, size_t))v12)(*(_QWORD *)(v12 + 16), v10);
  if (!v239)
    goto LABEL_796;
  v240 = (char *)v239;
  v241 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 5632 * v208);
  if (!v241)
    goto LABEL_796;
  v242 = (char *)v241;
  v243 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), 8 * v208);
  if (!v243)
    goto LABEL_796;
  v244 = (void *)v243;
  if (((v208 + 7) >> 3) * v10)
  {
    v245 = (char *)(*(uint64_t (**)(_QWORD))v12)(*(_QWORD *)(v12 + 16));
    if (!v245)
      goto LABEL_796;
  }
  else
  {
    v245 = 0;
  }
  v252 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), 2 * v208);
  if (!v252)
    goto LABEL_796;
  v253 = (void *)v252;
  v254 = 0;
  v255 = 3;
  if (*(int *)(a7 + 4) > 10)
    v255 = 10;
  v633 = v255;
  v612 = v10 - 1;
  *(_QWORD *)v596 = v10 - 2;
  *(_QWORD *)v618 = v240;
  v640 = (void *)v252;
  *(_QWORD *)v591 = v240 - 2;
  do
  {
    v647 = v254;
    if (v208 > 1)
    {
      v627 = (v208 + 7) >> 3;
      bzero(v242, 5632 * v208);
      v257 = 0;
      v258 = (unsigned int *)(v654 + 2816);
      do
      {
        v259 = *v258;
        if (v259 > 0xFF)
          v260 = log2((double)v259);
        else
          v260 = dbl_236925608[v259];
        v258 += 708;
        *(double *)&v242[8 * v257++] = v260;
      }
      while (v208 != v257);
      v261 = &v242[5624 * v208];
      v262 = (unsigned int *)(v654 + 2812);
      v263 = 704;
      do
      {
        v264 = 0;
        --v263;
        v265 = v262;
        do
        {
          v266 = *(double *)&v242[8 * v264];
          v267 = *v265;
          if ((_DWORD)v267)
          {
            if (v267 > 0xFF)
              v268 = log2((double)v267);
            else
              v268 = dbl_236925608[v267];
          }
          else
          {
            v268 = -2.0;
          }
          v265 += 708;
          *(double *)&v261[8 * v264++] = v266 - v268;
        }
        while (v208 != v264);
        v261 -= 8 * v208;
        --v262;
      }
      while (v263);
      bzero(v244, 8 * v208);
      v10 = a3;
      bzero(v245, v627 * a3);
      v269 = 0;
      v12 = a1;
      v222 = v623;
      v240 = *(char **)v618;
      do
      {
        v270 = 0;
        v271 = &v242[8 * v208 * *(unsigned __int16 *)(v623 + 2 * v269)];
        v272 = 1.0e99;
        do
        {
          v273 = *(double *)&v271[8 * v270] + *((double *)v244 + v270);
          *((double *)v244 + v270) = v273;
          if (v273 < v272)
          {
            *(_BYTE *)(*(_QWORD *)v618 + v269) = v270;
            v272 = v273;
          }
          ++v270;
        }
        while (v208 != v270);
        v274 = 13.5;
        if (v269 <= 0x7CF)
          v274 = ((double)v269 * 0.07 / 2000.0 + 0.77) * 13.5;
        for (n = 0; n != v208; ++n)
        {
          v276 = *((double *)v244 + n) - v272;
          *((double *)v244 + n) = v276;
          if (v276 >= v274)
          {
            *((double *)v244 + n) = v274;
            v245[v269 * v627 + (n >> 3)] |= 1 << (n & 7);
          }
        }
        ++v269;
      }
      while (v269 != a3);
      v277 = *(unsigned __int8 *)(*(_QWORD *)v618 + v612);
      v278 = &v245[*(_QWORD *)v596 * v627];
      v279 = a3;
      v256 = 1;
      v253 = v640;
      do
      {
        if (((v278[(unint64_t)v277 >> 3] >> (v277 & 7)) & 1) != 0)
        {
          if (v277 != *(unsigned __int8 *)(*(_QWORD *)v591 + v279))
            ++v256;
          v277 = *(unsigned __int8 *)(*(_QWORD *)v591 + v279);
        }
        v278 -= v627;
        *(_BYTE *)(*(_QWORD *)v591 + v279--) = v277;
      }
      while (v279 != 1);
    }
    else
    {
      bzero(v240, v10);
      v256 = 1;
    }
    v608 = v256;
    if (v208)
      memset_pattern16(v253, &unk_2368AFB00, 2 * v208);
    v280 = 0;
    v281 = 0;
    do
    {
      v282 = v240[v280];
      if (*((_WORD *)v253 + v282) == 256)
        *((_WORD *)v253 + v282) = v281++;
      ++v280;
    }
    while (v10 != v280);
    v283 = 0;
    do
    {
      v240[v283] = *((_WORD *)v253 + v240[v283]);
      ++v283;
    }
    while (v10 != v283);
    v208 = v281;
    if (v281)
    {
      v284 = (_QWORD *)v654;
      v285 = v281;
      do
      {
        bzero(v284, 0xB08uLL);
        v284[353] = 0x7FF0000000000000;
        v284 += 354;
        --v285;
      }
      while (v285);
    }
    v286 = 0;
    v240 = *(char **)v618;
    do
    {
      v287 = v654 + 2832 * *(unsigned __int8 *)(*(_QWORD *)v618 + v286);
      ++*(_DWORD *)(v287 + 4 * *(unsigned __int16 *)(v222 + 2 * v286));
      ++*(_QWORD *)(v287 + 2816);
      ++v286;
    }
    while (v10 != v286);
    v253 = v640;
    v254 = v647 + 1;
  }
  while (v647 + 1 != v633);
  (*(void (**)(_QWORD, char *))(v12 + 8))(*(_QWORD *)(v12 + 16), v242);
  (*(void (**)(_QWORD, void *))(v12 + 8))(*(_QWORD *)(v12 + 16), v244);
  (*(void (**)(_QWORD, char *))(v12 + 8))(*(_QWORD *)(v12 + 16), v245);
  (*(void (**)(_QWORD, void *))(v12 + 8))(*(_QWORD *)(v12 + 16), v640);
  (*(void (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v654);
  if (v608)
  {
    v576 = (_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), 4 * v608);
    if (!v576)
      goto LABEL_796;
    v288 = v608 + 256;
    if (v608 == -256)
    {
      v289 = 0;
      v290 = 0x3FFFFFFFFFFFFCFLL;
      goto LABEL_387;
    }
  }
  else
  {
    v576 = 0;
    v288 = 256;
  }
  v291 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 4 * v288);
  if (!v291)
    goto LABEL_796;
  v289 = (unsigned int *)v291;
  v292 = v608;
  v293 = 16 * v608 + 1008;
  v290 = v293 >> 6;
  if (v293 < 0x40)
  {
    v294 = 0;
    v573 = 0;
    goto LABEL_390;
  }
LABEL_387:
  v295 = v290;
  v296 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 2832 * v290);
  if (!v296)
    goto LABEL_796;
  v294 = (char *)v296;
  v297 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 4 * v295);
  if (!v297)
    goto LABEL_796;
  v573 = (void *)v297;
  v292 = v608;
  v290 = v295;
LABEL_390:
  *(_QWORD *)v592 = v290;
  v298 = 64;
  if (v292 < 0x40)
    v298 = v292;
  if (v298)
  {
    v299 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 2832 * v298);
    if (!v299)
      goto LABEL_796;
  }
  else
  {
    v299 = 0;
  }
  v300 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 49176);
  if (!v300)
    goto LABEL_796;
  v301 = (unsigned int *)v300;
  v302 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 5664);
  if (!v302)
    goto LABEL_796;
  v303 = v302;
  v304 = (char *)(v289 + 256);
  bzero(v289, 4 * v288);
  v305 = 0;
  v306 = 0;
  v307 = v608;
  do
  {
    ++*(_DWORD *)&v304[4 * v305];
    if (v612 == v306
      || *(unsigned __int8 *)(*(_QWORD *)v618 + v306) != *(unsigned __int8 *)(*(_QWORD *)v618 + v306 + 1))
    {
      ++v305;
    }
    ++v306;
  }
  while (v10 != v306);
  v634 = v299;
  v566 = v301;
  v655 = v294;
  v641 = (uint64_t)v289;
  v613 = (char *)(v289 + 256);
  if (v608)
  {
    v308 = 0;
    v661 = 0;
    v309 = 0;
    *(_QWORD *)v597 = 0;
    v601 = 0;
    v628 = (int *)(v289 + 128);
    v310 = v289 + 64;
    v311 = (char *)(v289 + 192);
    __dsta = v576;
    v312 = v608;
    __srca = *(void **)v592;
    v564 = v303;
    do
    {
      v571 = v312 - 64;
      if (v312 >= 0x40)
        v313 = 64;
      else
        v313 = v312;
      v314 = v307 - v308;
      if (v307 - v308 >= 0x40)
        v314 = 64;
      v605 = (void *)v309;
      v582 = v314;
      v648 = v308;
      if (v314)
      {
        v315 = 0;
        do
        {
          v316 = *(unsigned int *)&v304[4 * v315 + 4 * v648];
          v317 = (_QWORD *)(v634 + 2832 * v315);
          bzero(v317, 0xB08uLL);
          v317[353] = 0x7FF0000000000000;
          if ((_DWORD)v316)
          {
            v318 = v316;
            v319 = (unsigned __int16 *)(v623 + 2 * v661);
            do
            {
              v320 = *v319++;
              ++*((_DWORD *)v317 + v320);
              --v318;
            }
            while (v318);
            v317[352] = v316;
            v661 += v316;
          }
          sub_2367A1594((uint64_t)v317);
          v317[353] = v321;
          v310[v315] = v315;
          v628[v315] = v315;
          *(_DWORD *)(v641 + 4 * v315++) = 1;
        }
        while (v315 != v313);
        v322 = sub_2367A8DE4(v634, (char *)v303, v641, v628, v310, v566, v582, v582, 0x40uLL, 0x800uLL);
        v309 = (unint64_t)v605;
      }
      else
      {
        v322 = 0;
      }
      v323 = (unint64_t)__srca;
      v324 = *(_QWORD *)v592;
      if ((unint64_t)__srca < v322 + v601)
      {
        if (__srca)
          v325 = (unint64_t)__srca;
        else
          v325 = v322 + v601;
        do
        {
          v326 = v325;
          v325 *= 2;
        }
        while (v326 < v322 + v601);
        if (v326)
        {
          v327 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 2832 * v326);
          v323 = (unint64_t)__srca;
          v328 = (char *)v327;
          if (!v327)
            goto LABEL_796;
        }
        else
        {
          v328 = 0;
        }
        if (v323)
          memcpy(v328, v655, 2832 * v323);
        (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v655);
        v323 = v326;
        v655 = v328;
        v324 = *(_QWORD *)v592;
        v309 = (unint64_t)v605;
      }
      __srca = (void *)v323;
      if (v324 >= v322 + *(_QWORD *)v597)
      {
        v332 = v573;
      }
      else
      {
        if (v324)
          v329 = v324;
        else
          v329 = v322 + *(_QWORD *)v597;
        do
        {
          v330 = v329;
          v329 *= 2;
        }
        while (v330 < v322 + *(_QWORD *)v597);
        if (v330)
        {
          v331 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v330);
          v324 = *(_QWORD *)v592;
          v332 = (void *)v331;
          if (!v331)
            goto LABEL_796;
        }
        else
        {
          v332 = 0;
        }
        if (v324)
          memcpy(v332, v573, 4 * v324);
        (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v573);
        v324 = v330;
        v309 = (unint64_t)v605;
      }
      *(_QWORD *)v592 = v324;
      v573 = v332;
      if (v322)
      {
        v333 = 0;
        v334 = &v655[2832 * v601];
        do
        {
          memcpy(v334, (const void *)(v634 + 2832 * v310[v333]), 0xB10uLL);
          *((_DWORD *)v332 + *(_QWORD *)v597 + v333) = *(_DWORD *)(v641 + 4 * v310[v333]);
          *(_DWORD *)&v311[4 * v310[v333]] = v333;
          ++v333;
          v334 += 2832;
        }
        while (v322 != v333);
        *(_QWORD *)v597 += v333;
        v309 = (unint64_t)v605;
        v601 += v333;
        v304 = v613;
        v303 = v564;
      }
      v307 = v608;
      if (v582)
      {
        v335 = v628;
        v336 = __dsta;
        do
        {
          v337 = *v335++;
          *v336++ = *(_DWORD *)&v311[4 * v337] + v309;
          --v313;
        }
        while (v313);
      }
      v309 += v322;
      v308 = v648 + 64;
      __dsta += 64;
      v312 = v571;
    }
    while (v648 + 64 < v608);
  }
  else
  {
    v309 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v634);
  if (v309 << 6 >= (v309 >> 1) * v309)
    v338 = (v309 >> 1) * v309;
  else
    v338 = v309 << 6;
  if (v338 < 0x801)
  {
    v204 = v623;
    v340 = (uint64_t)v655;
    v339 = v566;
  }
  else
  {
    (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v566);
    v339 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 24 * v338 + 24);
    v204 = v623;
    v340 = (uint64_t)v655;
    if (!v339)
      goto LABEL_796;
  }
  if (v309)
  {
    v341 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v309);
    if (!v341)
      goto LABEL_796;
    v342 = v341;
    for (ii = 0; ii != v309; ++ii)
      v341[ii] = ii;
    v558 = v338;
    v344 = v573;
    v345 = sub_2367A8DE4(v340, (char *)v303, (uint64_t)v573, v576, v341, v339, v309, v608, 0x100uLL, v558);
  }
  else
  {
    v345 = 0;
    v342 = 0;
    v344 = v573;
  }
  (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v339);
  (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v344);
  v346 = *(char **)v618;
  v649 = v342;
  if (v309)
  {
    v347 = (_DWORD *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v309);
    if (!v347)
      goto LABEL_796;
    v662 = v347;
    memset(v347, 255, 4 * v309);
  }
  else
  {
    v662 = 0;
  }
  if (v608)
  {
    v348 = 0;
    v349 = 0;
    v350 = 0;
    do
    {
      bzero((void *)v303, 0xB08uLL);
      *(_QWORD *)(v303 + 2824) = 0x7FF0000000000000;
      if (*(_DWORD *)&v613[4 * v349])
      {
        v351 = 0;
        do
          ++*(_DWORD *)(v303 + 4 * *(unsigned __int16 *)(v204 + 2 * v350 + 2 * v351++));
        while (v351 < *(unsigned int *)&v613[4 * v349]);
        v350 += v351;
        *(_QWORD *)(v303 + 2816) = v351;
      }
      v352 = v349 - 1;
      if (!v349)
        v352 = 0;
      v353 = v576[v352];
      v354 = sub_2367A90B8((_QWORD *)v303, v340 + 2832 * v353, (char *)(v303 + 2832));
      if (v345)
      {
        v355 = v354;
        v356 = v649;
        v357 = v345;
        do
        {
          v358 = sub_2367A90B8((_QWORD *)v303, (uint64_t)&v655[2832 * *v356], (char *)(v303 + 2832));
          if (v358 < v355)
          {
            v353 = *v356;
            v355 = v358;
          }
          ++v356;
          --v357;
        }
        while (v357);
      }
      v576[v349] = v353;
      if (v662[v353] == -1)
        v662[v353] = v348++;
      v204 = v623;
      v346 = *(char **)v618;
      v340 = (uint64_t)v655;
      ++v349;
    }
    while (v349 != v608);
  }
  v12 = a1;
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v303);
  (*(void (**)(_QWORD, unsigned int *))(v12 + 8))(*(_QWORD *)(v12 + 16), v649);
  (*(void (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v340);
  v13 = a10;
  v359 = *(_QWORD *)(a9 + 32);
  v360 = v608;
  v10 = a3;
  v11 = a2;
  v202 = v560;
  if (v359 < v608)
  {
    if (v359)
      v361 = *(_QWORD *)(a9 + 32);
    else
      v361 = v608;
    do
    {
      v362 = v361;
      v361 *= 2;
    }
    while (v362 < v608);
    if (v362)
    {
      v363 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v362);
      if (!v363)
        goto LABEL_796;
      v364 = (void *)v363;
      v359 = *(_QWORD *)(a9 + 32);
      if (!v359)
        goto LABEL_496;
    }
    else
    {
      v364 = 0;
      if (!v359)
        goto LABEL_496;
    }
    memcpy(v364, *(const void **)(a9 + 16), v359);
LABEL_496:
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a9 + 16));
    *(_QWORD *)(a9 + 16) = v364;
    *(_QWORD *)(a9 + 32) = v362;
    v204 = v623;
    v360 = v608;
  }
  v365 = *(_QWORD *)(a9 + 40);
  if (v365 < v360)
  {
    if (v365)
      v366 = *(_QWORD *)(a9 + 40);
    else
      v366 = v360;
    do
    {
      v367 = v366;
      v366 *= 2;
    }
    while (v367 < v360);
    if (v367)
    {
      v368 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v367);
      if (!v368)
        goto LABEL_796;
      v369 = (void *)v368;
      v365 = *(_QWORD *)(a9 + 40);
      if (!v365)
        goto LABEL_506;
    }
    else
    {
      v369 = 0;
      if (!v365)
        goto LABEL_506;
    }
    memcpy(v369, *(const void **)(a9 + 24), 4 * v365);
LABEL_506:
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a9 + 24));
    *(_QWORD *)(a9 + 24) = v369;
    *(_QWORD *)(a9 + 40) = v367;
    v204 = v623;
    v346 = *(char **)v618;
    v360 = v608;
    v370 = v662;
    goto LABEL_508;
  }
  v370 = v662;
  if (v360)
  {
LABEL_508:
    v371 = 0;
    v372 = 0;
    v373 = 0;
    v374 = v576 + 1;
    do
    {
      v375 = *(_DWORD *)v613;
      v613 += 4;
      v373 += v375;
      v376 = *(v374 - 1);
      if (v360 == 1 || (_DWORD)v376 != *v374)
      {
        v377 = v370[v376];
        *(_BYTE *)(*(_QWORD *)(a9 + 16) + v372) = v377;
        *(_DWORD *)(*(_QWORD *)(a9 + 24) + 4 * v372) = v373;
        if (v371 <= v377)
          v371 = v377;
        ++v372;
        v373 = 0;
      }
      ++v374;
      --v360;
    }
    while (v360);
    goto LABEL_515;
  }
  v372 = 0;
  v371 = 0;
LABEL_515:
  *(_QWORD *)a9 = v371 + 1;
  *(_QWORD *)(a9 + 8) = v372;
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v641);
  (*(void (**)(_QWORD, _DWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v576);
  (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v346);
LABEL_516:
  (*(void (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v204);
  v378 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), v202);
  if (!v378)
    goto LABEL_796;
  v216 = v378;
  v656 = 0;
  v379 = (_WORD *)(v11 + 14);
  do
  {
    if ((*(_DWORD *)(v379 - 5) & 0x1FFFFFF) != 0 && (unsigned __int16)*(v379 - 1) >= 0x80u)
      *(_WORD *)(v378 + 2 * v656++) = *v379 & 0x3FF;
    v379 += 8;
    --v10;
  }
  while (v10);
  if (v656 >> 6 <= 0x1A8)
    v380 = (unsigned __int16)v656 / 0x220u + 1;
  else
    v380 = 50;
  if (!v656)
    goto LABEL_548;
  if (v656 > 0x7F)
  {
    v394 = (*(uint64_t (**)(_QWORD, uint64_t))v12)(*(_QWORD *)(v12 + 16), 2192 * v380 + 2192);
    if (!v394)
      goto LABEL_796;
    v650 = v394;
    v395 = (_QWORD *)v394;
    v396 = v380;
    do
    {
      bzero(v395, 0x888uLL);
      v395[273] = 0x7FF0000000000000;
      v395 += 274;
      --v396;
    }
    while (v396);
    v397 = 0;
    v398 = v656;
    LODWORD(v399) = 7;
    do
    {
      v400 = v397 * v656 / v380;
      if (v397)
      {
        v399 = (16807 * v399);
        v400 += v399 % (v656 / v380);
      }
      v401 = 0;
      if (v400 + 40 >= v656)
        v402 = v656 - 41;
      else
        v402 = v400;
      v403 = v650 + 2192 * v397;
      v404 = v216 + 2 * v402;
      *(_QWORD *)(v403 + 2176) += 40;
      do
      {
        ++*(_DWORD *)(v403 + 4 * *(unsigned __int16 *)(v404 + v401));
        v401 += 2;
      }
      while (v401 != 80);
      ++v397;
    }
    while (v397 != v380);
    v405 = v380 + 2 * v656 / 0x28 + 99 - (v380 + 2 * v656 / 0x28 + 99) % v380;
    *(_QWORD *)v619 = v216;
    if (v405)
    {
      v406 = 0;
      v407 = (char *)(v650 + 2192 * v380);
      if (v405 <= 1)
        v408 = 1;
      else
        v408 = v380 + 2 * v656 / 0x28 + 99 - (v380 + 2 * v656 / 0x28 + 99) % v380;
      LODWORD(v409) = 7;
      do
      {
        bzero(v407, 0x880uLL);
        v409 = (16807 * v409);
        v410 = (unsigned __int16 *)(v216 + 2 * (v409 % (v656 - 39)));
        *(_QWORD *)(v650 + 2192 * v380 + 2176) = 40;
        v411 = -40;
        do
        {
          v412 = *v410++;
          ++*(_DWORD *)&v407[4 * v412];
          v58 = __CFADD__(v411++, 1);
        }
        while (!v58);
        v413 = 0;
        v414 = 0;
        v415 = v650 + 2192 * (v406 % v380);
        *(_QWORD *)(v415 + 2176) += 40;
        do
        {
          *(_DWORD *)(v415 + 4 * v414++) += *(_DWORD *)&v407[v413];
          v413 += 4;
        }
        while (v413 != 2176);
        ++v406;
      }
      while (v406 != v408);
      *(_QWORD *)(v650 + 2192 * v380 + 2184) = 0x7FF0000000000000;
      v12 = a1;
      v398 = v656;
    }
    v416 = (*(uint64_t (**)(_QWORD, size_t))v12)(*(_QWORD *)(v12 + 16), v398);
    if (!v416)
      goto LABEL_796;
    v417 = (char *)v416;
    v418 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), 4352 * v380);
    if (!v418)
      goto LABEL_796;
    v419 = v12;
    v420 = (char *)v418;
    v421 = (*(uint64_t (**)(_QWORD, unint64_t))v419)(*(_QWORD *)(v419 + 16), 8 * v380);
    if (!v421)
      goto LABEL_796;
    v422 = (void *)v421;
    if (((v380 + 7) >> 3) * v398)
    {
      v423 = a1;
      v424 = (char *)(*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 16));
      if (!v424)
        goto LABEL_796;
    }
    else
    {
      v424 = 0;
      v423 = a1;
    }
    v635 = (*(uint64_t (**)(_QWORD, unint64_t))v423)(*(_QWORD *)(v423 + 16), 2 * v380);
    if (!v635)
      goto LABEL_796;
    v425 = 0;
    v426 = 3;
    if (*(int *)(a7 + 4) > 10)
      v426 = 10;
    v624 = v426;
    v614 = v398 - 1;
    v602 = v398 - 2;
    v572 = v417;
    *(_QWORD *)v598 = v417 - 2;
    do
    {
      v642 = v425;
      if (v380 > 1)
      {
        v629 = (v380 + 7) >> 3;
        bzero(v420, 4352 * v380);
        v429 = 0;
        v430 = (unsigned int *)(v650 + 2176);
        do
        {
          v431 = *v430;
          if (v431 > 0xFF)
            v432 = log2((double)v431);
          else
            v432 = dbl_236925608[v431];
          v430 += 548;
          *(double *)&v420[8 * v429++] = v432;
        }
        while (v380 != v429);
        v433 = &v420[4344 * v380];
        v434 = (unsigned int *)(v650 + 2172);
        v435 = 544;
        do
        {
          v436 = 0;
          --v435;
          v437 = v434;
          do
          {
            v438 = *(double *)&v420[8 * v436];
            v439 = *v437;
            if ((_DWORD)v439)
            {
              if (v439 > 0xFF)
                v440 = log2((double)v439);
              else
                v440 = dbl_236925608[v439];
            }
            else
            {
              v440 = -2.0;
            }
            v437 += 548;
            *(double *)&v433[8 * v436++] = v438 - v440;
          }
          while (v380 != v436);
          v433 -= 8 * v380;
          --v434;
        }
        while (v435);
        bzero(v422, 8 * v380);
        v398 = v656;
        bzero(v424, v629 * v656);
        v441 = 0;
        v216 = *(_QWORD *)v619;
        v417 = v572;
        do
        {
          v442 = 0;
          v443 = &v420[8 * v380 * *(unsigned __int16 *)(*(_QWORD *)v619 + 2 * v441)];
          v444 = 1.0e99;
          do
          {
            v445 = *(double *)&v443[8 * v442] + *((double *)v422 + v442);
            *((double *)v422 + v442) = v445;
            if (v445 < v444)
            {
              v572[v441] = v442;
              v444 = v445;
            }
            ++v442;
          }
          while (v380 != v442);
          v446 = 14.6;
          if (v441 <= 0x7CF)
            v446 = ((double)v441 * 0.07 / 2000.0 + 0.77) * 14.6;
          for (jj = 0; jj != v380; ++jj)
          {
            v448 = *((double *)v422 + jj) - v444;
            *((double *)v422 + jj) = v448;
            if (v448 >= v446)
            {
              *((double *)v422 + jj) = v446;
              v424[v441 * v629 + (jj >> 3)] |= 1 << (jj & 7);
            }
          }
          ++v441;
        }
        while (v441 != v656);
        v449 = v572[v614];
        v450 = &v424[v602 * v629];
        v451 = v656;
        v427 = 1;
        v428 = (void *)v635;
        do
        {
          if (((v450[(unint64_t)v449 >> 3] >> (v449 & 7)) & 1) != 0)
          {
            if (v449 != *(unsigned __int8 *)(*(_QWORD *)v598 + v451))
              ++v427;
            v449 = *(unsigned __int8 *)(*(_QWORD *)v598 + v451);
          }
          v450 -= v629;
          *(_BYTE *)(*(_QWORD *)v598 + v451--) = v449;
        }
        while (v451 != 1);
      }
      else
      {
        bzero(v417, v398);
        v427 = 1;
        v428 = (void *)v635;
      }
      if (v380)
        memset_pattern16(v428, &unk_2368AFB00, 2 * v380);
      v452 = 0;
      v453 = 0;
      do
      {
        v454 = v417[v452];
        if (*((_WORD *)v428 + v454) == 256)
          *((_WORD *)v428 + v454) = v453++;
        ++v452;
      }
      while (v398 != v452);
      v630 = v427;
      for (kk = 0; kk != v398; ++kk)
        v417[kk] = *((_WORD *)v428 + v417[kk]);
      v380 = v453;
      if (v453)
      {
        v456 = (_QWORD *)v650;
        v457 = v453;
        do
        {
          bzero(v456, 0x888uLL);
          v456[273] = 0x7FF0000000000000;
          v456 += 274;
          --v457;
        }
        while (v457);
      }
      for (mm = 0; mm != v398; ++mm)
      {
        v459 = v650 + 2192 * v417[mm];
        ++*(_DWORD *)(v459 + 4 * *(unsigned __int16 *)(v216 + 2 * mm));
        ++*(_QWORD *)(v459 + 2176);
      }
      v425 = v642 + 1;
    }
    while (v642 + 1 != v624);
    v460 = a1;
    (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v420);
    (*(void (**)(_QWORD, void *))(v460 + 8))(*(_QWORD *)(v460 + 16), v422);
    (*(void (**)(_QWORD, char *))(v460 + 8))(*(_QWORD *)(v460 + 16), v424);
    (*(void (**)(_QWORD, uint64_t))(v460 + 8))(*(_QWORD *)(v460 + 16), v635);
    (*(void (**)(_QWORD, uint64_t))(v460 + 8))(*(_QWORD *)(v460 + 16), v650);
    if (v630)
    {
      v461 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v630);
      if (!v461)
        goto LABEL_796;
      v462 = (_DWORD *)v461;
      v463 = v630 + 256;
      if (v630 == -256)
      {
        v464 = 0;
        v465 = 0x3FFFFFFFFFFFFCFLL;
        goto LABEL_640;
      }
    }
    else
    {
      v462 = 0;
      v463 = 256;
    }
    v466 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v463);
    if (!v466)
      goto LABEL_796;
    v464 = (unsigned int *)v466;
    v467 = 16 * v630 + 1008;
    v465 = v467 >> 6;
    if (v467 < 0x40)
    {
      v468 = 0;
      v469 = 0;
LABEL_643:
      __srcb = (void *)v465;
      v474 = 64;
      if (v630 < 0x40)
        v474 = v630;
      if (v474)
      {
        v475 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2192 * v474);
        if (!v475)
          goto LABEL_796;
      }
      else
      {
        v475 = 0;
      }
      v569 = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 49176);
      if (v569)
      {
        v606 = v469;
        v476 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4384);
        if (v476)
        {
          v477 = v476;
          v478 = (char *)(v464 + 256);
          bzero(v464, 4 * v463);
          v479 = 0;
          v480 = 0;
          v481 = v630;
          v482 = v468;
          do
          {
            ++*(_DWORD *)&v478[4 * v479];
            if (v614 == v480 || v417[v480] != v417[v480 + 1])
              ++v479;
            ++v480;
          }
          while (v656 != v480);
          v643 = v475;
          v574 = v462;
          v651 = (uint64_t)v464;
          v577 = (char *)(v464 + 256);
          if (v630)
          {
            v483 = v216;
            v484 = 0;
            v663 = 0;
            v485 = 0;
            *(_QWORD *)v609 = 0;
            v615 = 0;
            v636 = (int *)(v464 + 128);
            v486 = v464 + 64;
            v487 = (char *)(v464 + 192);
            v603 = v462;
            v488 = v630;
            *(_QWORD *)v593 = __srcb;
            *(_QWORD *)v567 = v477;
            do
            {
              *(_QWORD *)v583 = v488 - 64;
              if (v488 >= 0x40)
                v489 = 64;
              else
                v489 = v488;
              v490 = v481 - v484;
              if (v481 - v484 >= 0x40)
                v490 = 64;
              v625 = v485;
              v599 = v490;
              v657 = v484;
              if (v490)
              {
                __dstb = v482;
                v491 = 0;
                do
                {
                  v492 = *(unsigned int *)&v478[4 * v491 + 4 * v657];
                  v493 = (_QWORD *)(v643 + 2192 * v491);
                  bzero(v493, 0x888uLL);
                  v493[273] = 0x7FF0000000000000;
                  if ((_DWORD)v492)
                  {
                    v494 = v492;
                    v495 = (unsigned __int16 *)(v483 + 2 * v663);
                    do
                    {
                      v496 = *v495++;
                      ++*((_DWORD *)v493 + v496);
                      --v494;
                    }
                    while (v494);
                    v493[272] = v492;
                    v663 += v492;
                  }
                  sub_2367A1988((uint64_t)v493);
                  v493[273] = v497;
                  v486[v491] = v491;
                  v636[v491] = v491;
                  *(_DWORD *)(v651 + 4 * v491++) = 1;
                }
                while (v491 != v489);
                v498 = sub_2367A9370(v643, (char *)v477, v651, v636, v486, v569, v599, v599, 0x40uLL, 0x800uLL);
                v481 = v630;
                v482 = __dstb;
                v485 = v625;
              }
              else
              {
                v498 = 0;
              }
              v499 = *(_QWORD *)v593;
              if (*(_QWORD *)v593 < v498 + v615)
              {
                if (*(_QWORD *)v593)
                  v500 = *(_QWORD *)v593;
                else
                  v500 = v498 + v615;
                do
                {
                  v499 = v500;
                  v500 *= 2;
                }
                while (v499 < v498 + v615);
                if (v499)
                {
                  v501 = (char *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 2192 * v499);
                  if (!v501)
                    goto LABEL_796;
                }
                else
                {
                  v501 = 0;
                }
                __dstc = v501;
                if (*(_QWORD *)v593)
                  memcpy(v501, v482, 2192 * *(_QWORD *)v593);
                (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v482);
                v482 = __dstc;
                v481 = v630;
                v485 = v625;
              }
              v502 = __srcb;
              *(_QWORD *)v593 = v499;
              if ((unint64_t)__srcb < v498 + *(_QWORD *)v609)
              {
                if (__srcb)
                  v503 = (unint64_t)__srcb;
                else
                  v503 = v498 + *(_QWORD *)v609;
                do
                {
                  v504 = v503;
                  v503 *= 2;
                }
                while (v504 < v498 + *(_QWORD *)v609);
                if (v504)
                {
                  v505 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v504);
                  v502 = __srcb;
                  if (!v505)
                    goto LABEL_796;
                }
                else
                {
                  v505 = 0;
                }
                __dstd = v505;
                v506 = v606;
                if (v502)
                {
                  memcpy(v505, v606, 4 * (_QWORD)v502);
                  v506 = v606;
                }
                (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v506);
                __srcb = (void *)v504;
                v606 = __dstd;
                v481 = v630;
                v485 = v625;
              }
              if (v498)
              {
                v507 = v482;
                v508 = 0;
                __dste = v507;
                v509 = &v507[2192 * v615];
                do
                {
                  memcpy(v509, (const void *)(v643 + 2192 * v486[v508]), 0x890uLL);
                  *((_DWORD *)v606 + *(_QWORD *)v609 + v508) = *(_DWORD *)(v651 + 4 * v486[v508]);
                  *(_DWORD *)&v487[4 * v486[v508]] = v508;
                  ++v508;
                  v509 += 2192;
                }
                while (v498 != v508);
                *(_QWORD *)v609 += v508;
                v483 = *(_QWORD *)v619;
                v615 += v508;
                v481 = v630;
                v478 = v577;
                v482 = __dste;
                v485 = v625;
                v477 = *(_QWORD *)v567;
              }
              if (v599)
              {
                v510 = v636;
                v511 = v603;
                do
                {
                  v512 = *v510++;
                  *v511++ = *(_DWORD *)&v487[4 * v512] + v485;
                  --v489;
                }
                while (v489);
              }
              v485 += v498;
              v484 = v657 + 64;
              v603 += 64;
              v488 = *(_QWORD *)v583;
            }
            while (v657 + 64 < v481);
          }
          else
          {
            v485 = 0;
          }
          v513 = v485;
          (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v643);
          if (v513 << 6 >= (v513 >> 1) * v513)
            v514 = (v513 >> 1) * v513;
          else
            v514 = v513 << 6;
          if (v514 < 0x801)
          {
            v516 = v513;
            v518 = v574;
            v517 = v569;
          }
          else
          {
            (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v569);
            v515 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 24 * v514 + 24);
            v516 = v513;
            v517 = (unsigned int *)v515;
            v518 = v574;
            if (!v515)
              goto LABEL_796;
          }
          v519 = 4 * v516;
          if (v516)
          {
            v520 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v516);
            if (!v520)
              goto LABEL_796;
            v521 = v520;
            v522 = 0;
            do
            {
              v520[v522] = v522;
              ++v522;
            }
            while (v513 != v522);
            v559 = v514;
            v523 = v606;
            v524 = sub_2367A9370((uint64_t)v482, (char *)v477, (uint64_t)v606, v518, v520, v517, v513, v630, 0x100uLL, v559);
          }
          else
          {
            v524 = 0;
            v521 = 0;
            v523 = v606;
          }
          (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v517);
          (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v523);
          v525 = (int *)v577;
          if (v513)
          {
            v526 = (_DWORD *)(*(uint64_t (**)(_QWORD, size_t))a1)(*(_QWORD *)(a1 + 16), v519);
            if (!v526)
              goto LABEL_796;
            v527 = v526;
            memset(v526, 255, v519);
          }
          else
          {
            v527 = 0;
          }
          v644 = v521;
          v664 = v527;
          if (v630)
          {
            v658 = 0;
            v528 = 0;
            v529 = 0;
            do
            {
              bzero((void *)v477, 0x888uLL);
              *(_QWORD *)(v477 + 2184) = 0x7FF0000000000000;
              if (v525[v528])
              {
                v530 = 0;
                do
                  ++*(_DWORD *)(v477 + 4 * *(unsigned __int16 *)(*(_QWORD *)v619 + 2 * v529 + 2 * v530++));
                while (v530 < v525[v528]);
                v529 += v530;
                *(_QWORD *)(v477 + 2176) = v530;
              }
              v531 = v528 - 1;
              if (!v528)
                v531 = 0;
              v532 = v518[v531];
              v533 = sub_2367A9644((_QWORD *)v477, (uint64_t)&v482[2192 * v532], (char *)(v477 + 2192));
              if (v524)
              {
                v534 = v533;
                v535 = v644;
                v536 = v524;
                do
                {
                  v537 = sub_2367A9644((_QWORD *)v477, (uint64_t)&v482[2192 * *v535], (char *)(v477 + 2192));
                  if (v537 < v534)
                  {
                    v532 = *v535;
                    v534 = v537;
                  }
                  ++v535;
                  --v536;
                }
                while (v536);
              }
              v518 = v574;
              v574[v528] = v532;
              v527 = v664;
              if (v664[v532] == -1)
                v664[v532] = v658++;
              v525 = (int *)v577;
              ++v528;
            }
            while (v528 != v630);
          }
          v12 = a1;
          (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v477);
          (*(void (**)(_QWORD, unsigned int *))(v12 + 8))(*(_QWORD *)(v12 + 16), v644);
          (*(void (**)(_QWORD, char *))(v12 + 8))(*(_QWORD *)(v12 + 16), v482);
          v538 = *(_QWORD *)(a10 + 32);
          v539 = v630;
          v216 = *(_QWORD *)v619;
          if (v538 >= v630)
          {
LABEL_749:
            v544 = *(_QWORD *)(a10 + 40);
            if (v544 >= v539)
            {
              if (!v539)
              {
                v550 = 0;
                v549 = 0;
LABEL_767:
                *(_QWORD *)a10 = v549 + 1;
                *(_QWORD *)(a10 + 8) = v550;
                (*(void (**)(_QWORD, _DWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v527);
                (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v651);
                (*(void (**)(_QWORD, _DWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v518);
                (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v572);
                return (*(uint64_t (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v216);
              }
LABEL_760:
              v549 = 0;
              v550 = 0;
              v551 = 0;
              v552 = v518 + 1;
              do
              {
                v553 = *v525++;
                v551 += v553;
                v554 = *(v552 - 1);
                if (v539 == 1 || (_DWORD)v554 != *v552)
                {
                  v555 = v527[v554];
                  *(_BYTE *)(*(_QWORD *)(a10 + 16) + v550) = v555;
                  *(_DWORD *)(*(_QWORD *)(a10 + 24) + 4 * v550) = v551;
                  if (v549 <= v555)
                    v549 = v555;
                  ++v550;
                  v551 = 0;
                }
                ++v552;
                --v539;
              }
              while (v539);
              goto LABEL_767;
            }
            if (v544)
              v545 = *(_QWORD *)(a10 + 40);
            else
              v545 = v539;
            do
            {
              v546 = v545;
              v545 *= 2;
            }
            while (v546 < v539);
            if (v546)
            {
              v547 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v546);
              if (!v547)
                goto LABEL_796;
              v548 = (void *)v547;
              v544 = *(_QWORD *)(a10 + 40);
              if (!v544)
                goto LABEL_758;
            }
            else
            {
              v548 = 0;
              if (!v544)
                goto LABEL_758;
            }
            memcpy(v548, *(const void **)(a10 + 24), 4 * v544);
LABEL_758:
            (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a10 + 24));
            *(_QWORD *)(a10 + 24) = v548;
            *(_QWORD *)(a10 + 40) = v546;
            v539 = v630;
            v525 = (int *)v577;
            goto LABEL_760;
          }
          if (v538)
            v540 = *(_QWORD *)(a10 + 32);
          else
            v540 = v630;
          do
          {
            v541 = v540;
            v540 *= 2;
          }
          while (v541 < v630);
          if (v541)
          {
            v542 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v541);
            if (!v542)
              goto LABEL_796;
            v543 = (void *)v542;
            v538 = *(_QWORD *)(a10 + 32);
            if (!v538)
              goto LABEL_748;
          }
          else
          {
            v543 = 0;
            if (!v538)
              goto LABEL_748;
          }
          memcpy(v543, *(const void **)(a10 + 16), v538);
LABEL_748:
          (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a10 + 16));
          *(_QWORD *)(a10 + 16) = v543;
          *(_QWORD *)(a10 + 32) = v541;
          v539 = v630;
          v527 = v664;
          goto LABEL_749;
        }
      }
LABEL_796:
      exit(1);
    }
LABEL_640:
    v470 = v465;
    v471 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2192 * v465);
    if (!v471)
      goto LABEL_796;
    v468 = (char *)v471;
    v472 = v470;
    v473 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v470);
    if (!v473)
      goto LABEL_796;
    v469 = (void *)v473;
    v465 = v472;
    goto LABEL_643;
  }
  v381 = *(_QWORD *)(v13 + 32);
  v382 = *(_QWORD *)(v13 + 8);
  v383 = v382 + 1;
  if (v381 >= v382 + 1)
    goto LABEL_537;
  if (v381)
    v384 = *(_QWORD *)(v13 + 32);
  else
    v384 = v382 + 1;
  do
  {
    v385 = v384;
    v384 *= 2;
  }
  while (v385 < v383);
  if (v385)
  {
    v386 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), v385);
    if (!v386)
      goto LABEL_796;
    v387 = (void *)v386;
    v381 = *(_QWORD *)(v13 + 32);
    if (!v381)
      goto LABEL_536;
  }
  else
  {
    v387 = 0;
    if (!v381)
      goto LABEL_536;
  }
  memcpy(v387, *(const void **)(v13 + 16), v381);
LABEL_536:
  (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v12 + 16), *(_QWORD *)(v13 + 16));
  *(_QWORD *)(v13 + 16) = v387;
  *(_QWORD *)(v13 + 32) = v385;
  v382 = *(_QWORD *)(v13 + 8);
  v383 = v382 + 1;
LABEL_537:
  v388 = *(_QWORD *)(v13 + 40);
  if (v388 < v383)
  {
    if (v388)
      v389 = *(_QWORD *)(v13 + 40);
    else
      v389 = v383;
    do
    {
      v390 = v389;
      v389 *= 2;
    }
    while (v390 < v383);
    if (v390)
    {
      v391 = (*(uint64_t (**)(_QWORD, unint64_t))v12)(*(_QWORD *)(v12 + 16), 4 * v390);
      if (!v391)
        goto LABEL_796;
      v392 = (void *)v391;
      v388 = *(_QWORD *)(v13 + 40);
      if (!v388)
        goto LABEL_546;
    }
    else
    {
      v392 = 0;
      if (!v388)
        goto LABEL_546;
    }
    memcpy(v392, *(const void **)(v13 + 24), 4 * v388);
LABEL_546:
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v12 + 16), *(_QWORD *)(v13 + 24));
    *(_QWORD *)(v13 + 24) = v392;
    *(_QWORD *)(v13 + 40) = v390;
    v382 = *(_QWORD *)(v13 + 8);
  }
  *(_QWORD *)v13 = 1;
  *(_BYTE *)(*(_QWORD *)(v13 + 16) + v382) = 0;
  v393 = *(_QWORD *)(v13 + 8);
  *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v393) = v656;
  *(_QWORD *)(v13 + 8) = v393 + 1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v12 + 16), v216);
}

unsigned __int8 *sub_2367A5270(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t i;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t j;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t k;
  char v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *result;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[4];
  uint64_t v75;
  _WORD v76[18];
  _QWORD v77[2];
  __int16 v78;
  _BYTE v79[704];
  _BYTE v80[704];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v77[0] = 0;
  v77[1] = 0;
  v78 = 0;
  v75 = 0;
  memset(v74, 0, sizeof(v74));
  if (!a2)
  {
    v7 = 0;
    goto LABEL_28;
  }
  v7 = a2;
  while (!*(_BYTE *)(a1 - 1 + v7))
  {
    if (!--v7)
    {
      if (a2 > 0x32)
      {
        v8 = 2;
        v9 = 0;
        v10 = 0;
        v24 = 2;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  if (a2 <= 0x32)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v12 = 1;
    v13 = 1;
    do
    {
      v14 = *(unsigned __int8 *)(a1 + v11);
      if (v11 + 1 >= v7)
      {
        ++v11;
        v15 = 1;
      }
      else
      {
        v15 = 1;
        while (*(unsigned __int8 *)(a1 + v11 + v15) == v14)
        {
          if (v7 - v11 == ++v15)
          {
            v15 = v7 - v11;
            break;
          }
        }
        v11 += v15;
      }
      v16 = v14 == 0;
      v17 = !v16;
      v18 = (v15 > 2) & v16;
      if ((_DWORD)v18)
        v19 = v15;
      else
        v19 = 0;
      v9 += v19;
      v13 += v18;
      v20 = (v15 > 3) & v17;
      if (((v15 > 3) & v17) == 0)
        v15 = 0;
      v10 += v15;
      v12 += v20;
    }
    while (v11 < v7);
    v24 = 2 * v12;
    v8 = 2 * v13;
LABEL_29:
    v21 = v10 > v24;
    v22 = v9 > v8;
    if (!v7)
    {
LABEL_28:
      v23 = 1;
      goto LABEL_91;
    }
  }
  v25 = 0;
  v26 = 0;
  v27 = 8;
  do
  {
    v28 = *(unsigned __int8 *)(a1 + v26);
    if (*(_BYTE *)(a1 + v26))
      v29 = 1;
    else
      v29 = !v22;
    v30 = !v29;
    v32 = (!v21 || v28 == 0) && v30 == 0;
    if (v32 || v26 + 1 >= v7)
    {
      v33 = 1;
      if (*(_BYTE *)(a1 + v26))
        goto LABEL_53;
      goto LABEL_74;
    }
    v33 = 1;
    while (*(unsigned __int8 *)(a1 + v26 + v33) == v28)
    {
      if (v7 - v26 == ++v33)
      {
        v33 = v7 - v26;
        break;
      }
    }
    if (*(_BYTE *)(a1 + v26))
    {
LABEL_53:
      if (v27 == v28)
      {
        v35 = v33;
      }
      else
      {
        v80[v25] = v28;
        v79[v25++] = 0;
        v35 = v33 - 1;
      }
      if (v35 == 7)
      {
        v80[v25] = v28;
        *(_WORD *)&v79[v25] = 768;
        v36 = v25 + 2;
        v80[++v25] = 16;
        goto LABEL_58;
      }
      if (v35 > 2)
      {
        v80[v25] = 16;
        v39 = v35 - 3;
        v79[v25] = (v35 - 3) & 3;
        v36 = v25 + 1;
        if (v39 >= 4)
        {
          do
          {
            v40 = v36;
            v80[v36] = 16;
            v39 = (v39 >> 2) - 1;
            v79[v36++] = v39 & 3;
          }
          while (v39 > 3);
          if (v40 > v25)
          {
            v41 = v25;
            do
            {
              v42 = v80[v41];
              v80[v41] = v80[v40];
              v80[v40] = v42;
              ++v41;
              --v40;
            }
            while (v41 < v40);
          }
        }
LABEL_58:
        for (i = v36 - 1; v25 < i; --i)
        {
          v38 = v79[v25];
          v79[v25] = v79[i];
          v79[i] = v38;
          ++v25;
        }
        v25 = v36;
      }
      else
      {
        for (; v35; --v35)
        {
          v80[v25] = v28;
          v79[v25++] = 0;
        }
      }
      v27 = v28;
      goto LABEL_77;
    }
    if (v33 != 11)
    {
      if (v33 > 2)
      {
        v80[v25] = 17;
        v44 = v33 - 3;
        v79[v25] = (v33 - 3) & 7;
        v34 = v25 + 1;
        if (v33 - 3 >= 8)
        {
          do
          {
            v45 = v34;
            v80[v34] = 17;
            v44 = (v44 >> 3) - 1;
            v79[v34++] = v44 & 7;
          }
          while (v44 > 7);
          if (v45 > v25)
          {
            v46 = v25;
            do
            {
              v47 = v80[v46];
              v80[v46] = v80[v45];
              v80[v45] = v47;
              ++v46;
              --v45;
            }
            while (v46 < v45);
          }
        }
        goto LABEL_84;
      }
      if (!v33)
        goto LABEL_77;
LABEL_74:
      for (j = 0; j != v33; ++j)
      {
        v80[v25 + j] = 0;
        v79[v25 + j] = 0;
      }
      v25 += j;
      goto LABEL_77;
    }
    *(_WORD *)&v80[v25] = 4352;
    *(_WORD *)&v79[v25] = 1792;
    v34 = v25 + 2;
    ++v25;
LABEL_84:
    for (k = v34 - 1; v25 < k; --k)
    {
      v49 = v79[v25];
      v79[v25] = v79[k];
      v79[k] = v49;
      ++v25;
    }
    v25 = v34;
LABEL_77:
    v26 += v33;
  }
  while (v26 < v7);
  v23 = v25 == 0;
  if (v25)
  {
    v50 = v80;
    v51 = v25;
    do
    {
      v52 = *v50++;
      ++*((_DWORD *)v74 + v52);
      --v51;
    }
    while (v51);
  }
  v7 = v25;
LABEL_91:
  v53 = 0;
  v54 = 0;
  v55 = 0;
  while (2)
  {
    if (!*((_DWORD *)v74 + v55))
    {
LABEL_95:
      if (++v55 == 18)
        goto LABEL_98;
      continue;
    }
    break;
  }
  if (!v54)
  {
    v54 = 1;
    v53 = v55;
    goto LABEL_95;
  }
  v54 = 2;
LABEL_98:
  v56 = 18;
  sub_2367B8860((uint64_t)v74, 18, 5, a3, (uint64_t)v77);
  result = sub_2367B8DE8((unsigned __int8 *)v77, 18, (uint64_t)v76);
  if (v54 >= 2)
  {
    v58 = 0x11u;
    while (!*((_BYTE *)v77 + byte_23692496E[v58]))
    {
      if (--v58 == -1)
      {
        v56 = 0;
        goto LABEL_104;
      }
    }
    v56 = v58 + 1;
  }
LABEL_104:
  v59 = 2;
  if (!BYTE3(v77[0]))
    v59 = 3;
  if (BYTE1(v77[0]) | BYTE2(v77[0]))
    v60 = 0;
  else
    v60 = v59;
  v61 = *a4;
  *(_QWORD *)(a5 + (*a4 >> 3)) = (v60 << (*a4 & 7)) | *(unsigned __int8 *)(a5 + (*a4 >> 3));
  v62 = v61 + 2;
  *a4 = v62;
  v63 = v56 - v60;
  if (v56 > v60)
  {
    v64 = &byte_23692496E[v60];
    do
    {
      v65 = *v64++;
      v66 = *((unsigned __int8 *)v77 + v65);
      v67 = byte_236924980[v66];
      result = (unsigned __int8 *)(v62 & 7);
      *(_QWORD *)(a5 + (v62 >> 3)) = ((unint64_t)byte_236924986[v66] << (v62 & 7)) | *(unsigned __int8 *)(a5 + (v62 >> 3));
      v62 += v67;
      *a4 = v62;
      --v63;
    }
    while (v63);
  }
  if (v54 == 1)
    *((_BYTE *)v77 + v53) = 0;
  if (!v23)
  {
    v68 = v79;
    v69 = v80;
    while (1)
    {
      v71 = *v69++;
      v70 = v71;
      v72 = *((unsigned __int8 *)v77 + v71);
      result = (unsigned __int8 *)(v62 & 7);
      *(_QWORD *)(a5 + (v62 >> 3)) = ((unint64_t)(unsigned __int16)v76[v71] << (v62 & 7)) | *(unsigned __int8 *)(a5 + (v62 >> 3));
      v62 += v72;
      *a4 = v62;
      if (v71 == 16)
        break;
      if (v70 == 17)
      {
        v73 = 3;
LABEL_120:
        *(_QWORD *)(a5 + (v62 >> 3)) = ((unint64_t)*v68 << (v62 & 7)) | *(unsigned __int8 *)(a5 + (v62 >> 3));
        v62 += v73;
        *a4 = v62;
      }
      ++v68;
      if (!--v7)
        return result;
    }
    v73 = 2;
    goto LABEL_120;
  }
  return result;
}

unint64_t sub_2367A58C4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v88 = 0u;
  v89 = 0u;
  if (!a3)
  {
    v15 = 0;
    goto LABEL_11;
  }
  v10 = result;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(unsigned int *)(a2 + 4 * v12);
    if ((_DWORD)v13)
    {
      if (v11 <= 3)
        *((_QWORD *)&v88 + v11) = v12;
      ++v11;
      a3 -= v13;
    }
    ++v12;
  }
  while (a3);
  v14 = v11 - 1;
  if (v11 <= 1)
  {
    v15 = v88;
LABEL_11:
    v16 = *a7;
    *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
    v16 += 4;
    *a7 = v16;
    *(_QWORD *)(a8 + (v16 >> 3)) = (v15 << (v16 & 7)) | *(unsigned __int8 *)(a8 + (v16 >> 3));
    *a7 = v16 + a4;
    a5[v15] = 0;
    *(_WORD *)(a6 + 2 * v15) = 0;
    return result;
  }
  bzero(a5, v12);
  v17 = 1;
  do
  {
    if (v12)
    {
      v18 = v12 - 1;
      v19 = v10;
      do
      {
        v20 = *(_DWORD *)(a2 + 4 * v18);
        if (v20)
        {
          if (v20 < v17)
            v20 = v17;
          *(_DWORD *)v19 = v20;
          *(_WORD *)(v19 + 4) = -1;
          *(_WORD *)(v19 + 6) = v18;
          v19 += 8;
        }
        --v18;
      }
      while (v18 != -1);
    }
    else
    {
      v19 = v10;
    }
    v21 = (v19 - v10) << 29;
    v22 = (int)((v19 - v10) >> 3);
    if (((unint64_t)(v19 - v10) >> 3) > 0xCuLL)
    {
      v28 = 2 * (HIDWORD(v21) < 0x39);
      do
      {
        v29 = qword_23691E4B8[v28];
        if (v29 < v22)
        {
          v30 = 0;
          v31 = qword_23691E4B8[v28];
          do
          {
            v32 = *(_QWORD *)(v10 + 8 * v31);
            v33 = v31;
            if (v31 >= v29)
            {
              v34 = v30;
              v35 = v31;
              while (*(_DWORD *)(v10 + v34) > v32)
              {
                v33 = v35 - v29;
                *(_QWORD *)(v10 + 8 * v35) = *(_QWORD *)(v10 + v34);
                v34 -= 8 * v29;
                v35 = v33;
                if (v33 < v29)
                  goto LABEL_42;
              }
              v33 = v35;
            }
LABEL_42:
            *(_QWORD *)(v10 + 8 * v33) = v32;
            ++v31;
            v30 += 8;
          }
          while (v31 != v22);
        }
        ++v28;
      }
      while (v28 != 6);
    }
    else if (v21 >> 33)
    {
      v23 = 0;
      if (v22 <= 2)
        v22 = 2;
      for (i = 1; i != v22; ++i)
      {
        v25 = *(_QWORD *)(v10 + 8 * i);
        v26 = v23;
        v27 = i;
        do
        {
          if (*(_DWORD *)(v10 + v26) <= v25)
            break;
          *(_QWORD *)(v10 + 8 * v27) = *(_QWORD *)(v10 + v26);
          v26 -= 8;
          --v27;
        }
        while (v27);
        *(_QWORD *)(v10 + 8 * v27) = v25;
        v23 += 8;
      }
    }
    v36 = (unint64_t)(v19 - v10) >> 3;
    *(_QWORD *)v19 = -1;
    *(_QWORD *)(v19 + 8) = -1;
    if ((int)v36 >= 2)
    {
      v37 = 0;
      v38 = v36 + 1;
      v39 = (_QWORD *)(v19 + 16);
      v40 = v36 + 1;
      do
      {
        v41 = *(_DWORD *)(v10 + 8 * v37);
        v42 = *(_DWORD *)(v10 + 8 * v38);
        v43 = v41 > v42;
        if (v41 > v42)
          v44 = v37;
        else
          v44 = v37 + 1;
        if (v43)
          v45 = v38 + 1;
        else
          v45 = v38;
        if (v43)
          v46 = v38;
        else
          v46 = v37;
        v47 = *(_DWORD *)(v10 + 8 * v44);
        v48 = *(_DWORD *)(v10 + 8 * v45);
        v49 = v47 > v48;
        if (v47 > v48)
          v37 = v44;
        else
          v37 = v44 + 1;
        if (v49)
          v38 = v45 + 1;
        else
          v38 = v45;
        if (v49)
          v44 = v45;
        *((_DWORD *)v39 - 2) = *(_DWORD *)(v10 + 8 * v44) + *(_DWORD *)(v10 + 8 * v46);
        *((_WORD *)v39 - 2) = v46;
        *((_WORD *)v39 - 1) = v44;
        *v39++ = -1;
        --v40;
      }
      while (v40 > 2);
    }
    v17 *= 2;
  }
  while (!sub_2367B8790(2 * (int)v36 - 1, v10, (uint64_t)a5, 14));
  result = (unint64_t)sub_2367B8DE8(a5, v12, a6);
  if (v11 > 4)
  {
    v63 = *a7;
    *(_QWORD *)(a8 + (*a7 >> 3)) = (0xFF55555554 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
    v64 = v63 + 40;
    *a7 = v64;
    if (!v12)
      return result;
    v65 = 0;
    v66 = 8;
    while (1)
    {
      v67 = a5[v65];
      if (v65 + 1 >= v12)
      {
        ++v65;
        result = 1;
        if (!(_DWORD)v67)
          goto LABEL_95;
      }
      else
      {
        v68 = 0;
        result = v12 - v65;
        while (a5[v65 + 1 + v68] == (_DWORD)v67)
        {
          if (v12 - v65 - 1 == ++v68)
            goto LABEL_94;
        }
        result = v68 + 1;
LABEL_94:
        v65 += result;
        if (!(_DWORD)v67)
        {
LABEL_95:
          v74 = dword_2368D215C[result];
          result = (qword_2368D2C60[result] << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
          *(_QWORD *)(a8 + (v64 >> 3)) = result;
          v64 += v74;
          goto LABEL_96;
        }
      }
      if ((_DWORD)v66 != (_DWORD)v67)
      {
        v69 = byte_2368D4260[v67];
        *(_QWORD *)(a8 + (v64 >> 3)) = ((unint64_t)dword_2368D4274[v67] << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
        v64 += v69;
        *a7 = v64;
        --result;
      }
      if (result <= 2)
      {
        if (result)
        {
          v70 = byte_2368D4260[v67];
          v71 = dword_2368D4274[v67];
          do
          {
            *(_QWORD *)(a8 + (v64 >> 3)) = (v71 << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
            v64 += v70;
            *a7 = v64;
            --result;
          }
          while (result);
        }
        goto LABEL_97;
      }
      v72 = result - 3;
      v73 = dword_2368D42BC[v72];
      result = (qword_2368D4DC0[v72] << (v64 & 7)) | *(unsigned __int8 *)(a8 + (v64 >> 3));
      *(_QWORD *)(a8 + (v64 >> 3)) = result;
      v64 += v73;
      v66 = v67;
LABEL_96:
      *a7 = v64;
      v67 = v66;
LABEL_97:
      v66 = v67;
      if (v65 >= v12)
        return result;
    }
  }
  v50 = 0;
  v51 = *a7;
  *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
  *a7 = v51 + 2;
  *(_QWORD *)(a8 + ((v51 + 2) >> 3)) = (v14 << ((v51 + 2) & 7)) | *(unsigned __int8 *)(a8 + ((v51 + 2) >> 3));
  v52 = v51 + 4;
  *a7 = v52;
  v53 = (char *)&v88 + 8;
  do
  {
    v54 = v50 + 1;
    if (v50 + 1 < v11)
    {
      v55 = *((_QWORD *)&v88 + v50);
      v56 = (uint64_t *)v53;
      v57 = v14;
      do
      {
        v58 = *v56;
        result = a5[v55];
        if (a5[*v56] < result)
        {
          *v56 = v55;
          *((_QWORD *)&v88 + v50) = v58;
          v55 = v58;
        }
        ++v56;
        --v57;
      }
      while (v57);
    }
    --v14;
    v53 += 8;
    ++v50;
  }
  while (v54 != v11);
  if (v11 == 3)
  {
    v75 = *((_QWORD *)&v88 + 1);
    *(_QWORD *)(a8 + (v52 >> 3)) = ((_QWORD)v88 << (v52 & 7)) | *(unsigned __int8 *)(a8 + (v52 >> 3));
    v76 = v52 + a4;
    *a7 = v76;
    *(_QWORD *)(a8 + (v76 >> 3)) = (v75 << (v76 & 7)) | *(unsigned __int8 *)(a8 + (v76 >> 3));
    v77 = v76 + a4;
    *a7 = v77;
    *(_QWORD *)(a8 + (v77 >> 3)) = ((_QWORD)v89 << (v77 & 7)) | *(unsigned __int8 *)(a8 + (v77 >> 3));
    v62 = v77 + a4;
  }
  else
  {
    v59 = v52 >> 3;
    if (v11 == 2)
    {
      v60 = *((_QWORD *)&v88 + 1);
      *(_QWORD *)(a8 + v59) = ((_QWORD)v88 << (v52 & 7)) | *(unsigned __int8 *)(a8 + v59);
      v61 = v52 + a4;
      *a7 = v61;
      *(_QWORD *)(a8 + (v61 >> 3)) = (v60 << (v61 & 7)) | *(unsigned __int8 *)(a8 + (v61 >> 3));
      v62 = v61 + a4;
    }
    else
    {
      v78 = v88;
      *(_QWORD *)(a8 + v59) = ((_QWORD)v88 << (v52 & 7)) | *(unsigned __int8 *)(a8 + v59);
      v79 = v52 + a4;
      *a7 = v79;
      *(_QWORD *)(a8 + (v79 >> 3)) = (*((_QWORD *)&v78 + 1) << (v79 & 7)) | *(unsigned __int8 *)(a8 + (v79 >> 3));
      v80 = v79 + a4;
      *a7 = v80;
      v81 = *((_QWORD *)&v89 + 1);
      *(_QWORD *)(a8 + (v80 >> 3)) = ((_QWORD)v89 << (v80 & 7)) | *(unsigned __int8 *)(a8 + (v80 >> 3));
      v82 = v80 + a4;
      *a7 = v82;
      *(_QWORD *)(a8 + (v82 >> 3)) = (v81 << (v82 & 7)) | *(unsigned __int8 *)(a8 + (v82 >> 3));
      v83 = v82 + a4;
      *a7 = v83;
      *(_QWORD *)(a8 + (v83 >> 3)) = ((unint64_t)(a5[v78] == 1) << (v83 & 7)) | *(unsigned __int8 *)(a8 + (v83 >> 3));
      v62 = v83 + 1;
    }
  }
  *a7 = v62;
  return result;
}

uint64_t sub_2367A5FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int *a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15)
{
  int v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  __int16 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t result;
  unsigned int v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  char *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116[2];
  char *v118;

  v15 = a8;
  v19 = a9[19];
  v115 = a9[18];
  sub_2367A6958(a8, a4, a14, a15);
  v20 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 11272);
  if (!v20 || (v21 = v20, (v22 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4760)) == 0))
LABEL_40:
    exit(1);
  v23 = (char *)v22;
  v25 = *(_QWORD *)(a13 + 16);
  v24 = *(unsigned int **)(a13 + 24);
  v26 = *(_QWORD *)a13;
  v27 = *(_QWORD *)(a13 + 8);
  *(_QWORD *)v22 = 256;
  *(_QWORD *)(v22 + 8) = v26;
  *(_QWORD *)(v22 + 16) = v25;
  *(_QWORD *)(v22 + 24) = v24;
  *(_QWORD *)(v22 + 32) = v27;
  *(_OWORD *)(v22 + 40) = xmmword_2368AF3F0;
  *(_QWORD *)(v22 + 912) = 0;
  if (v27)
    v28 = *v24;
  else
    v28 = 0;
  *(_QWORD *)(v22 + 920) = v28;
  *(_QWORD *)(v22 + 928) = 0;
  *(_QWORD *)(v22 + 944) = 0;
  *(_QWORD *)(v22 + 936) = 0;
  v30 = *(_QWORD *)(a13 + 64);
  v29 = *(unsigned int **)(a13 + 72);
  v31 = *(_QWORD *)(a13 + 48);
  v32 = *(_QWORD *)(a13 + 56);
  *(_QWORD *)(v22 + 952) = 704;
  *(_QWORD *)(v22 + 960) = v31;
  *(_QWORD *)(v22 + 968) = v30;
  *(_QWORD *)(v22 + 976) = v29;
  *(_QWORD *)(v22 + 984) = v32;
  *(_OWORD *)(v22 + 992) = xmmword_2368AF3F0;
  *(_QWORD *)(v22 + 1864) = 0;
  if (v32)
    v33 = *v29;
  else
    v33 = 0;
  v107 = (_QWORD *)(v22 + 952);
  *(_QWORD *)(v22 + 1872) = v33;
  v105 = (_QWORD *)(v22 + 1904);
  *(_QWORD *)(v22 + 1880) = 0;
  *(_QWORD *)(v22 + 1896) = 0;
  *(_QWORD *)(v22 + 1888) = 0;
  v35 = *(_QWORD *)(a13 + 112);
  v34 = *(unsigned int **)(a13 + 120);
  v36 = *(_QWORD *)(a13 + 96);
  v37 = *(_QWORD *)(a13 + 104);
  *(_QWORD *)(v22 + 1904) = v19;
  *(_QWORD *)(v22 + 1912) = v36;
  *(_QWORD *)(v22 + 1920) = v35;
  *(_QWORD *)(v22 + 1928) = v34;
  *(_QWORD *)(v22 + 1936) = v37;
  *(_QWORD *)(v22 + 1944) = 1;
  *(_QWORD *)(v22 + 1952) = 0;
  *(_QWORD *)(v22 + 2816) = 0;
  if (v37)
    v38 = *v34;
  else
    v38 = 0;
  v112 = a6;
  *(_QWORD *)(v22 + 2824) = v38;
  *(_QWORD *)(v22 + 2832) = 0;
  *(_QWORD *)(v22 + 2848) = 0;
  *(_QWORD *)(v22 + 2840) = 0;
  sub_2367A6A80(v22, v21, a14, a15);
  sub_2367A6A80((uint64_t)v107, v21, a14, a15);
  sub_2367A6A80((uint64_t)v105, v21, a14, a15);
  v39 = *a14;
  *(_QWORD *)(a15 + (*a14 >> 3)) = ((unint64_t)a9[16] << (*a14 & 7)) | *(unsigned __int8 *)(a15 + (*a14 >> 3));
  *a14 = v39 + 2;
  *(_QWORD *)(a15 + ((v39 + 2) >> 3)) = ((unint64_t)(a9[17] >> a9[16]) << ((v39 + 2) & 7)) | *(unsigned __int8 *)(a15 + ((v39 + 2) >> 3));
  *a14 = v39 + 6;
  if (*(_QWORD *)a13)
  {
    v40 = 0;
    v41 = v39 + 8;
    do
    {
      *(_QWORD *)(a15 + ((v41 - 2) >> 3)) = ((unint64_t)a10 << ((v41 - 2) & 7)) | *(unsigned __int8 *)(a15 + ((v41 - 2) >> 3));
      *a14 = v41;
      ++v40;
      v41 += 2;
    }
    while (v40 < *(_QWORD *)a13);
  }
  v42 = *(_QWORD *)(a13 + 152);
  if (v42)
    sub_2367A6F04(a1, v23 + 2856, *(unsigned int **)(a13 + 144), v42, *(_QWORD *)(a13 + 184), v21, a14, a15);
  else
    sub_2367A6D1C(v23 + 2856, *(_QWORD *)(a13 + 184), 6uLL, v21, a14, a15);
  v43 = *(_QWORD *)(a13 + 168);
  if (v43)
    sub_2367A6F04(a1, v23 + 2856, *(unsigned int **)(a13 + 160), v43, *(_QWORD *)(a13 + 216), v21, a14, a15);
  else
    sub_2367A6D1C(v23 + 2856, *(_QWORD *)(a13 + 216), 2uLL, v21, a14, a15);
  v45 = *(unsigned __int8 **)(a13 + 176);
  v44 = *(_QWORD *)(a13 + 184);
  v46 = *(_QWORD *)v23 * v44;
  if (v46)
  {
    v47 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), *(_QWORD *)v23 * v44);
    if (!v47)
      goto LABEL_40;
    *((_QWORD *)v23 + 117) = v47;
    v48 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2 * v46);
    if (!v48)
      goto LABEL_40;
  }
  else
  {
    v48 = 0;
    *((_QWORD *)v23 + 117) = 0;
  }
  *((_QWORD *)v23 + 118) = v48;
  if (v44)
  {
    for (i = 0; i != v44; ++i)
    {
      sub_2367A73B0(v45, *(_QWORD *)v23, 256, v21, (_BYTE *)(*((_QWORD *)v23 + 117) + *(_QWORD *)v23 * i), *((_QWORD *)v23 + 118) + 2 * *(_QWORD *)v23 * i, a14, a15);
      v45 += 1040;
    }
  }
  v51 = *(unsigned __int8 **)(a13 + 192);
  v50 = *(_QWORD *)(a13 + 200);
  v52 = *v107 * v50;
  if (v52)
  {
    v53 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), *v107 * v50);
    if (!v53)
      goto LABEL_40;
    *((_QWORD *)v23 + 236) = v53;
    v54 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2 * v52);
    if (!v54)
      goto LABEL_40;
  }
  else
  {
    v54 = 0;
    *((_QWORD *)v23 + 236) = 0;
  }
  *((_QWORD *)v23 + 237) = v54;
  if (v50)
  {
    for (j = 0; j != v50; ++j)
    {
      sub_2367A73B0(v51, *((_QWORD *)v23 + 119), 704, v21, (_BYTE *)(*((_QWORD *)v23 + 236) + *((_QWORD *)v23 + 119) * j), *((_QWORD *)v23 + 237) + 2 * *((_QWORD *)v23 + 119) * j, a14, a15);
      v51 += 2832;
    }
  }
  v57 = *(unsigned __int8 **)(a13 + 208);
  v56 = *(_QWORD *)(a13 + 216);
  v58 = *v105 * v56;
  v104 = v15;
  if (v58)
  {
    v59 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), v58);
    if (!v59)
      goto LABEL_40;
    *((_QWORD *)v23 + 355) = v59;
    v60 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2 * v58);
    if (!v60)
      goto LABEL_40;
  }
  else
  {
    v60 = 0;
    *((_QWORD *)v23 + 355) = 0;
  }
  *((_QWORD *)v23 + 356) = v60;
  if (v56)
  {
    for (k = 0; k != v56; ++k)
    {
      sub_2367A73B0(v57, *((_QWORD *)v23 + 238), v115, v21, (_BYTE *)(*((_QWORD *)v23 + 355) + *((_QWORD *)v23 + 238) * k), *((_QWORD *)v23 + 356) + 2 * *((_QWORD *)v23 + 238) * k, a14, a15);
      v57 += 2192;
    }
  }
  v103 = a1;
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v21);
  v62 = a2;
  v63 = (uint64_t *)a13;
  if (a12)
  {
    v64 = 0;
    *(_QWORD *)v116 = v112;
    v65 = a7;
    v106 = (char *)&unk_236924C88 + 512 * a10;
    v66 = v106 + 256;
    v118 = v23;
    do
    {
      v114 = v64;
      v67 = (unsigned int *)(a11 + 16 * v64);
      v69 = *v67;
      v68 = v67[1];
      v70 = v67[2];
      v71 = *((unsigned __int16 *)v67 + 7);
      v110 = *((unsigned __int16 *)v67 + 6);
      sub_2367A77A0(v107, *((unsigned __int16 *)v67 + 6), a14, a15);
      LOWORD(v72) = v69;
      if (v69 >= 6)
      {
        if (v69 > 0x81)
        {
          if (v69 > 0x841)
          {
            v74 = 22;
            if (v69 >= 0x5842)
              v74 = 23;
            LOWORD(v72) = 21;
            if (v69 >> 1 >= 0xC21)
              LOWORD(v72) = v74;
          }
          else
          {
            LODWORD(v72) = (__clz(v69 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v73 = (__clz(v69 - 2) ^ 0x1F) - 1;
          v72 = 2 * v73 + ((unint64_t)(v69 - 2) >> v73) + 2;
        }
      }
      v113 = v68 & 0x1FFFFFF;
      v75 = (v68 & 0x1FFFFFF) + (char)(HIBYTE(v68) & 0x80 | (v68 >> 25));
      if (v75 > 9)
      {
        v77 = a5;
        if (v75 > 0x85)
        {
          LODWORD(v76) = (__clz(v75 - 70) ^ 0x1F) + 12;
          if (v75 > 0x845)
            LOWORD(v76) = 23;
        }
        else
        {
          v78 = (__clz(v75 - 6) ^ 0x1F) - 1;
          v76 = 2 * v78 + ((unint64_t)(v75 - 6) >> v78) + 4;
        }
      }
      else
      {
        LOWORD(v76) = v68 + (char)(HIBYTE(v68) & 0x80 | (v68 >> 25)) - 2;
        v77 = a5;
      }
      v79 = (unsigned __int16)v72;
      v80 = dword_2369254E8[v79];
      v81 = (unsigned __int16)v76;
      v82 = ((unint64_t)(v75 - *(_DWORD *)((char *)&unk_236925548 + v81 * 4)) << v80) | (v69 - *(_DWORD *)((char *)&unk_236925488 + v79 * 4));
      v83 = dword_2369255A8[v81] + v80;
      v84 = *a14;
      *(_QWORD *)(a15 + (*a14 >> 3)) = (v82 << (*(_BYTE *)a14 & 7)) | *(unsigned __int8 *)(a15 + (*a14 >> 3));
      *a14 = v84 + v83;
      v108 = v71;
      v109 = v70;
      if (v63[19])
      {
        v85 = v77;
        v86 = v65;
        v87 = *(_QWORD *)v116;
        v88 = a3;
        v89 = v66;
        if ((_DWORD)v69)
        {
          do
          {
            v86 = v87;
            v90 = (v66[v65] | v106[v87]);
            v87 = *(unsigned __int8 *)(a2 + (v88 & v85));
            sub_2367A793C(v118, v87, v90, v63[18], a14, a15, 6);
            ++v88;
            v65 = v86;
            --v69;
          }
          while (v69);
        }
      }
      else
      {
        if ((_DWORD)v69)
        {
          v89 = v66;
          v88 = a3;
          do
          {
            sub_2367A77A0(v23, *(unsigned __int8 *)(v62 + (v88++ & v77)), a14, a15);
            --v69;
          }
          while (v69);
          v86 = v65;
          v63 = (uint64_t *)a13;
        }
        else
        {
          v86 = v65;
          v88 = a3;
          v89 = v66;
        }
        v87 = *(_QWORD *)v116;
      }
      *(_QWORD *)v116 = v87;
      a3 = v88 + v113;
      v23 = v118;
      v62 = a2;
      v66 = v89;
      if ((_DWORD)v113)
      {
        v86 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a5));
        *(_QWORD *)v116 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a5));
        if (v110 >= 0x80)
        {
          v91 = v108 & 0x3FF;
          if (v63[21])
          {
            v92 = v110 >> 6;
            if (v110 >> 6 != 4 && v92 != 2 && v92 != 7 || (v110 & 7) >= 3)
              v96 = 3;
            else
              v96 = v110 & 7;
            v97 = a14;
            v98 = a15;
            sub_2367A793C(v105, v91, v96, v63[20], a14, a15, 2);
          }
          else
          {
            v97 = a14;
            v98 = a15;
            sub_2367A77A0(v105, v91, a14, a15);
          }
          v99 = *v97;
          *(_QWORD *)(v98 + (*v97 >> 3)) = (v109 << (*v97 & 7)) | *(unsigned __int8 *)(v98 + (*v97 >> 3));
          *v97 = v99 + (v108 >> 10);
        }
      }
      v64 = v114 + 1;
      v65 = v86;
    }
    while (v114 + 1 != a12);
  }
  v100 = v103;
  (*(void (**)(_QWORD, _QWORD))(v103 + 8))(*(_QWORD *)(v103 + 16), *((_QWORD *)v23 + 355));
  *((_QWORD *)v23 + 355) = 0;
  (*(void (**)(_QWORD, _QWORD))(v100 + 8))(*(_QWORD *)(v100 + 16), *((_QWORD *)v23 + 356));
  *((_QWORD *)v23 + 356) = 0;
  (*(void (**)(_QWORD, _QWORD))(v100 + 8))(*(_QWORD *)(v100 + 16), *((_QWORD *)v23 + 236));
  *((_QWORD *)v23 + 236) = 0;
  (*(void (**)(_QWORD, _QWORD))(v100 + 8))(*(_QWORD *)(v100 + 16), *((_QWORD *)v23 + 237));
  *((_QWORD *)v23 + 237) = 0;
  (*(void (**)(_QWORD, _QWORD))(v100 + 8))(*(_QWORD *)(v100 + 16), *((_QWORD *)v23 + 117));
  *((_QWORD *)v23 + 117) = 0;
  (*(void (**)(_QWORD, _QWORD))(v100 + 8))(*(_QWORD *)(v100 + 16), *((_QWORD *)v23 + 118));
  *((_QWORD *)v23 + 118) = 0;
  result = (*(uint64_t (**)(_QWORD, char *))(v100 + 8))(*(_QWORD *)(v100 + 16), v23);
  if (v104)
  {
    v102 = *(_DWORD *)a14 + 7;
    *a14 = v102 & 0xFFFFFFF8;
    *(_BYTE *)(a15 + (v102 >> 3)) = 0;
  }
  return result;
}

uint64_t sub_2367A6958(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = *a3;
  *(_QWORD *)(a4 + (*a3 >> 3)) = ((unint64_t)result << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
  v5 = v4 + 1;
  *a3 = v4 + 1;
  if ((_DWORD)result)
  {
    *(_QWORD *)(a4 + (v5 >> 3)) = *(unsigned __int8 *)(a4 + (v5 >> 3));
    *a3 = v4 + 2;
    v6 = __clz(a2 - 1) ^ 0x1F;
    if (v6 >= 0xF)
      v7 = (v6 + 4) >> 2;
    else
      v7 = 4;
    *(_QWORD *)(a4 + ((v4 + 2) >> 3)) = ((v7 - 4) << ((v4 + 2) & 7)) | *(unsigned __int8 *)(a4 + ((v4 + 2) >> 3));
    v8 = v4 + 4;
    *a3 = v8;
    *(_QWORD *)(a4 + (v8 >> 3)) = ((a2 - 1) << (v8 & 7)) | *(unsigned __int8 *)(a4 + (v8 >> 3));
    v9 = v8 + 4 * v7;
  }
  else
  {
    v10 = __clz(a2 - 1) ^ 0x1F;
    if (v10 >= 0xF)
      v11 = (v10 + 4) >> 2;
    else
      v11 = 4;
    *(_QWORD *)(a4 + (v5 >> 3)) = ((v11 - 4) << (v5 & 7)) | *(unsigned __int8 *)(a4 + (v5 >> 3));
    v12 = v4 + 3;
    *a3 = v12;
    *(_QWORD *)(a4 + (v12 >> 3)) = ((a2 - 1) << (v12 & 7)) | *(unsigned __int8 *)(a4 + (v12 >> 3));
    v13 = v12 + 4 * v11;
    *a3 = v13;
    *(_QWORD *)(a4 + (v13 >> 3)) = *(unsigned __int8 *)(a4 + (v13 >> 3));
    v9 = v13 + 1;
  }
  *a3 = v9;
  return result;
}

uint64_t sub_2367A6A80(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD v36[6];
  uint64_t v37;
  _DWORD v38[258];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 **)(a1 + 16);
  __memset_chk();
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  if (v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = v9[v11];
      if (v11)
      {
        if (v12 == v14)
          v15 = 0;
        else
          v15 = v14 + 2;
        if (v13 + 1 == v14)
          v15 = 1;
        ++v38[v15];
      }
      v16 = v7[v11];
      if (v16 <= 0x2F0)
        v17 = 14;
      else
        v17 = 20;
      if (v16 <= 0x28)
        v18 = 0;
      else
        v18 = 7;
      if (v16 > 0xB0)
        v18 = v17;
      v19 = v18 - 1;
      v20 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v18 + 4);
      while (v19 != 24)
      {
        v21 = *v20;
        v20 += 2;
        ++v19;
        if (v16 < v21)
          goto LABEL_23;
      }
      LODWORD(v19) = 25;
LABEL_23:
      ++*((_DWORD *)v36 + v19);
      ++v11;
      v12 = v13;
      v13 = v14;
    }
    while (v11 != v8);
  }
  result = sub_2367A7AE0(v10 - 1, a3, a4);
  if (v10 >= 2)
  {
    sub_2367A73B0((unsigned __int8 *)v38, v10 + 2, v10 + 2, a2, (_BYTE *)(a1 + 56), a1 + 314, a3, a4);
    result = (uint64_t)sub_2367A73B0((unsigned __int8 *)v36, 0x1AuLL, 26, a2, (_BYTE *)(a1 + 830), a1 + 856, a3, a4);
    v23 = *v7;
    v24 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *v9;
    *(_QWORD *)(a1 + 48) = v24;
    v25 = 14;
    if (v23 > 0x2F0)
      v25 = 20;
    v26 = 7;
    if (v23 <= 0x28)
      v26 = 0;
    if (v23 > 0xB0)
      v26 = v25;
    v27 = v26 - 1;
    v28 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v26 + 4);
    while (v27 != 24)
    {
      v29 = *v28;
      v28 += 2;
      ++v27;
      if (v23 < v29)
        goto LABEL_36;
    }
    LODWORD(v27) = 25;
LABEL_36:
    v30 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v27);
    v31 = *((unsigned __int8 *)v30 + 2);
    v32 = v23 - *v30;
    v33 = *(unsigned __int8 *)(a1 + 40 + v27 + 790);
    v34 = *a3;
    *(_QWORD *)(a4 + (*a3 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 40 + 2 * v27 + 816) << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
    *a3 = v34 + v33;
    *(_QWORD *)(a4 + ((v34 + v33) >> 3)) = (v32 << ((v34 + v33) & 7)) | *(unsigned __int8 *)(a4 + ((v34 + v33) >> 3));
    *a3 = v34 + v33 + v31;
  }
  return result;
}

uint64_t sub_2367A6D1C(_BYTE *a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  result = sub_2367A7AE0(a2 - 1, a5, a6);
  if (a2 >= 2)
  {
    v25 = a4;
    v13 = a3 - 1;
    v14 = a3 - 1 + a2;
    v15 = a1 + 1088;
    v16 = a1 + 1360;
    bzero(a1, 4 * v14);
    v17 = *a5;
    *(_QWORD *)(a6 + (*a5 >> 3)) = (1 << (*a5 & 7)) | *(unsigned __int8 *)(a6 + (*a5 >> 3));
    *a5 = v17 + 1;
    *(_QWORD *)(a6 + ((v17 + 1) >> 3)) = ((a3 - 2) << ((v17 + 1) & 7)) | *(unsigned __int8 *)(a6 + ((v17 + 1) >> 3));
    *a5 = v17 + 5;
    *(_DWORD *)&a1[4 * a3 - 4] = a2;
    *(_DWORD *)a1 = 1;
    if (v14 > a3)
      memset_pattern16(&a1[4 * a3], &unk_2368AFB20, 4 * a2 - 4);
    result = (uint64_t)sub_2367A73B0(a1, a3 - 1 + a2, a3 - 1 + a2, v25, a1 + 1088, (uint64_t)(a1 + 1360), a5, a6);
    v18 = 0;
    v19 = *a5;
    do
    {
      v20 = v13 + v18;
      if (!v18)
        v20 = 0;
      v21 = v15[v20];
      *(_QWORD *)(a6 + (v19 >> 3)) = ((unint64_t)*(unsigned __int16 *)&v16[2 * v20] << (v19 & 7)) | *(unsigned __int8 *)(a6 + (v19 >> 3));
      v22 = v19 + v21;
      *a5 = v22;
      v23 = v15[v13];
      *(_QWORD *)(a6 + (v22 >> 3)) = ((unint64_t)*(unsigned __int16 *)&v16[2 * v13] << (v22 & 7)) | *(unsigned __int8 *)(a6 + (v22 >> 3));
      v24 = v22 + v23;
      *a5 = v24;
      *(_QWORD *)(a6 + (v24 >> 3)) = ((unint64_t)~(-1 << (a3 - 1)) << (v24 & 7)) | *(unsigned __int8 *)(a6 + (v24 >> 3));
      v19 = v24 + v13;
      *a5 = v24 + v13;
      ++v18;
    }
    while (a2 != v18);
    *(_QWORD *)(a6 + (v19 >> 3)) = (1 << (v19 & 7)) | *(unsigned __int8 *)(a6 + (v19 >> 3));
    *a5 = v24 + a3;
  }
  return result;
}

uint64_t sub_2367A6F04(uint64_t a1, char *a2, unsigned int *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  size_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  int *v32;
  uint64_t v33;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int *v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  char __src;
  _BYTE v63[271];

  *(_QWORD *)&v63[255] = *MEMORY[0x24BDAC8D0];
  result = sub_2367A7AE0(a5 - 1, a7, a8);
  if (a5 == 1)
    return result;
  v17 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * a4);
  if (!v17)
    exit(1);
  v18 = (int *)v17;
  v19 = *a3;
  if (a4 >= 2)
  {
    v20 = a4 - 1;
    v21 = a3 + 1;
    do
    {
      v23 = *v21++;
      v22 = v23;
      if (v23 > v19)
        v19 = v22;
      --v20;
    }
    while (v20);
  }
  v59 = a6;
  v60 = a1;
  v61 = a7;
  v24 = 0;
  v58 = a2 + 1088;
  v57 = (uint64_t)(a2 + 1360);
  do
  {
    v63[v24 - 1] = v24;
    ++v24;
  }
  while (v19 + 1 != v24);
  v25 = 0;
  v26 = v19 + 1;
  LOBYTE(v27) = __src;
  do
  {
    if ((_DWORD)v26)
    {
      v28 = 0;
      v27 = LOBYTE(a3[v25]);
      while (v63[v28 - 1] != v27)
      {
        if (v26 == ++v28)
        {
          LOBYTE(v27) = v63[v26 - 1];
          v28 = v26;
          break;
        }
      }
      v18[v25] = v28;
      if (v28)
        memmove(v63, &__src, v28);
    }
    else
    {
      v18[v25] = 0;
    }
    __src = v27;
    ++v25;
  }
  while (v25 != a4);
  v29 = 0;
  v30 = 0;
  do
  {
    if (a4 <= v30 + 1)
      v31 = v30 + 1;
    else
      v31 = a4;
    v32 = &v18[v30];
    while (v18[v30])
    {
      ++v30;
      ++v32;
      if (v31 == v30)
      {
        v36 = 0;
LABEL_39:
        if (v36 > v29)
          v29 = v36;
        goto LABEL_41;
      }
    }
    if (v30 >= a4)
    {
      v35 = 0;
    }
    else
    {
      v33 = 0;
      while (!*v32++)
      {
        if (v30 - a4 == --v33)
        {
          v36 = a4 - v30;
          goto LABEL_39;
        }
      }
      v30 -= v33;
      v35 = -(int)v33;
    }
    if (v35 > v29)
      v29 = v35;
  }
  while (v30 < a4);
LABEL_41:
  v37 = 0;
  v38 = 0;
  v39 = __clz(v29) ^ 0x1F;
  if (v39 >= 6)
    v39 = 6;
  if (v29)
    v40 = v39;
  else
    v40 = 0;
  v41 = 2 << v40;
  do
  {
    v42 = v18[v38];
    if (v42)
    {
      v18[v37] = v42 + v40;
      ++v38;
LABEL_49:
      ++v37;
      continue;
    }
    if (v38 + 1 >= a4)
    {
      v43 = 1;
      ++v38;
      goto LABEL_60;
    }
    v43 = a4 - v38;
    v44 = 1;
    while (!v18[v38 + v44])
    {
      if (a4 - v38 == ++v44)
        goto LABEL_59;
    }
    v43 = v44;
LABEL_59:
    v38 += v43;
    if (v43)
    {
LABEL_60:
      while (1)
      {
        v45 = v43 - v41;
        if (v43 < v41)
          break;
        v18[v37++] = v40 | (~(-1 << v40) << 9);
        v43 = v45 + 1;
        if (v45 == -1)
          goto LABEL_50;
      }
      v46 = __clz(v43);
      v18[v37] = v46 ^ 0x1F | (((-1 << (v46 ^ 0x1F)) + v43) << 9);
      goto LABEL_49;
    }
LABEL_50:
    ;
  }
  while (v38 < a4);
  bzero(a2, 0x440uLL);
  if (v37)
  {
    v47 = v18;
    v48 = v37;
    do
    {
      v49 = *v47++;
      ++*(_DWORD *)&a2[4 * (v49 & 0x1FF)];
      --v48;
    }
    while (v48);
  }
  v50 = *v61;
  *(_QWORD *)(a8 + (*v61 >> 3)) = ((unint64_t)(v40 != 0) << (*(_BYTE *)v61 & 7)) | *(unsigned __int8 *)(a8 + (*v61 >> 3));
  *v61 = v50 + 1;
  if (v40)
  {
    *(_QWORD *)(a8 + ((v50 + 1) >> 3)) = ((unint64_t)(v40 - 1) << ((v50 + 1) & 7)) | *(unsigned __int8 *)(a8 + ((v50 + 1) >> 3));
    *v61 = v50 + 5;
  }
  sub_2367A73B0((unsigned __int8 *)a2, a5 + v40, a5 + v40, v59, v58, v57, v61, a8);
  v51 = *v61;
  if (v37)
  {
    v52 = (unsigned int *)v18;
    do
    {
      v54 = *v52++;
      v53 = v54;
      v55 = v54 & 0x1FF;
      v56 = v58[v55];
      *(_QWORD *)(a8 + (v51 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v57 + 2 * v55) << (v51 & 7)) | *(unsigned __int8 *)(a8 + (v51 >> 3));
      v51 += v56;
      *v61 = v51;
      if ((int)v55 - 1 < v40)
      {
        *(_QWORD *)(a8 + (v51 >> 3)) = (v53 >> 9 << (v51 & 7)) | *(unsigned __int8 *)(a8 + (v51 >> 3));
        v51 += v55;
        *v61 = v51;
      }
      --v37;
    }
    while (v37);
  }
  *(_QWORD *)(a8 + (v51 >> 3)) = (1 << (v51 & 7)) | *(unsigned __int8 *)(a8 + (v51 >> 3));
  *v61 = v51 + 1;
  return (*(uint64_t (**)(_QWORD, int *))(v60 + 8))(*(_QWORD *)(v60 + 16), v18);
}

unsigned __int8 *sub_2367A73B0(unsigned __int8 *result, size_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v14 = (uint64_t)result;
  v46 = *MEMORY[0x24BDAC8D0];
  v44 = 0u;
  v45 = 0u;
  if (a2)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      if (*(_DWORD *)&result[4 * v15])
      {
        if (v16 > 3)
        {
          if (v16 != 4)
            break;
        }
        else
        {
          *((_QWORD *)&v44 + v16) = v15;
        }
        ++v16;
      }
      ++v15;
    }
    while (a2 != v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
  v18 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      ++v17;
      v19 = v18 > 1;
      v18 >>= 1;
    }
    while (v19);
  }
  v20 = v16 - 1;
  if (v16 <= 1)
  {
    v21 = *a7;
    *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
    v21 += 4;
    *a7 = v21;
    v22 = v44;
    *(_QWORD *)(a8 + (v21 >> 3)) = ((_QWORD)v44 << (v21 & 7)) | *(unsigned __int8 *)(a8 + (v21 >> 3));
    *a7 = v21 + v17;
    a5[v22] = 0;
    *(_WORD *)(a6 + 2 * v22) = 0;
    return result;
  }
  bzero(a5, a2);
  sub_2367B8860(v14, a2, 15, a4, (uint64_t)a5);
  result = sub_2367B8DE8(a5, a2, a6);
  if (v16 > 4)
    return sub_2367A5270((uint64_t)a5, a2, a4, a7, a8);
  v23 = 0;
  v24 = *a7;
  *(_QWORD *)(a8 + (*a7 >> 3)) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(a8 + (*a7 >> 3));
  *a7 = v24 + 2;
  *(_QWORD *)(a8 + ((v24 + 2) >> 3)) = (v20 << ((v24 + 2) & 7)) | *(unsigned __int8 *)(a8 + ((v24 + 2) >> 3));
  v25 = v24 + 4;
  *a7 = v25;
  v26 = (char *)&v44 + 8;
  do
  {
    v27 = v23 + 1;
    if (v23 + 1 < v16)
    {
      v28 = *((_QWORD *)&v44 + v23);
      v29 = (uint64_t *)v26;
      v30 = v20;
      do
      {
        v31 = *v29;
        result = (unsigned __int8 *)a5[v28];
        if (a5[*v29] < result)
        {
          *v29 = v28;
          *((_QWORD *)&v44 + v23) = v31;
          v28 = v31;
        }
        ++v29;
        --v30;
      }
      while (v30);
    }
    --v20;
    v26 += 8;
    ++v23;
  }
  while (v27 != v16);
  v32 = v25 >> 3;
  if (v16 == 3)
  {
    v35 = *((_QWORD *)&v44 + 1);
    *(_QWORD *)(a8 + v32) = ((_QWORD)v44 << (v25 & 7)) | *(unsigned __int8 *)(a8 + v32);
    v36 = v25 + v17;
    *a7 = v36;
    *(_QWORD *)(a8 + (v36 >> 3)) = (v35 << (v36 & 7)) | *(unsigned __int8 *)(a8 + (v36 >> 3));
    v34 = v36 + v17;
    *a7 = v34;
    *(_QWORD *)(a8 + (v34 >> 3)) = ((_QWORD)v45 << (v34 & 7)) | *(unsigned __int8 *)(a8 + (v34 >> 3));
  }
  else
  {
    if (v16 != 2)
    {
      v38 = v44;
      *(_QWORD *)(a8 + v32) = ((_QWORD)v44 << (v25 & 7)) | *(unsigned __int8 *)(a8 + v32);
      v39 = v25 + v17;
      *a7 = v39;
      *(_QWORD *)(a8 + (v39 >> 3)) = (*((_QWORD *)&v38 + 1) << (v39 & 7)) | *(unsigned __int8 *)(a8 + (v39 >> 3));
      v40 = v39 + v17;
      *a7 = v40;
      v41 = *((_QWORD *)&v45 + 1);
      *(_QWORD *)(a8 + (v40 >> 3)) = ((_QWORD)v45 << (v40 & 7)) | *(unsigned __int8 *)(a8 + (v40 >> 3));
      v42 = v40 + v17;
      *a7 = v42;
      *(_QWORD *)(a8 + (v42 >> 3)) = (v41 << (v42 & 7)) | *(unsigned __int8 *)(a8 + (v42 >> 3));
      v43 = v42 + v17;
      *a7 = v43;
      *(_QWORD *)(a8 + (v43 >> 3)) = ((unint64_t)(a5[v38] == 1) << (v43 & 7)) | *(unsigned __int8 *)(a8 + (v43 >> 3));
      v37 = v43 + 1;
      goto LABEL_30;
    }
    v33 = *((_QWORD *)&v44 + 1);
    *(_QWORD *)(a8 + v32) = ((_QWORD)v44 << (v25 & 7)) | *(unsigned __int8 *)(a8 + v32);
    v34 = v25 + v17;
    *a7 = v34;
    *(_QWORD *)(a8 + (v34 >> 3)) = (v33 << (v34 & 7)) | *(unsigned __int8 *)(a8 + (v34 >> 3));
  }
  v37 = v34 + v17;
LABEL_30:
  *a7 = v37;
  return result;
}

_QWORD *sub_2367A77A0(_QWORD *result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = result[115];
  if (!v4)
  {
    v5 = result[114] + 1;
    result[114] = v5;
    v6 = *(unsigned int *)(result[3] + 4 * v5);
    v7 = *(unsigned __int8 *)(result[2] + v5);
    result[115] = v6;
    result[116] = *result * v7;
    v8 = result[5];
    if (v8 + 1 == v7)
    {
      v9 = 1;
    }
    else if (result[6] == v7)
    {
      v9 = 0;
    }
    else
    {
      v9 = v7 + 2;
    }
    result[5] = v7;
    result[6] = v8;
    v10 = *((unsigned __int8 *)result + v9 + 56);
    v11 = *((unsigned __int16 *)result + v9 + 157);
    v12 = *a3;
    *(_QWORD *)(a4 + (*a3 >> 3)) = (v11 << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
    v13 = v12 + v10;
    *a3 = v13;
    v14 = 14;
    if (v6 > 0x2F0)
      v14 = 20;
    v15 = 7;
    if (v6 <= 0x28)
      v15 = 0;
    if (v6 <= 0xB0)
      v16 = v15;
    else
      v16 = v14;
    v17 = v16 - 1;
    v18 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v16 + 4);
    while (v17 != 24)
    {
      v19 = *v18;
      v18 += 2;
      ++v17;
      if (v6 < v19)
        goto LABEL_19;
    }
    LODWORD(v17) = 25;
LABEL_19:
    v20 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v17);
    v21 = *((unsigned __int8 *)v20 + 2);
    v22 = v6 - *v20;
    v23 = *((unsigned __int8 *)result + v17 + 830);
    *(_QWORD *)(a4 + (v13 >> 3)) = ((unint64_t)*((unsigned __int16 *)result + v17 + 428) << (v13 & 7)) | *(unsigned __int8 *)(a4 + (v13 >> 3));
    v24 = v13 + v23;
    *a3 = v24;
    *(_QWORD *)(a4 + (v24 >> 3)) = (v22 << (v24 & 7)) | *(unsigned __int8 *)(a4 + (v24 >> 3));
    *a3 = v24 + v21;
    v4 = result[115];
  }
  result[115] = v4 - 1;
  v25 = result[116] + a2;
  v26 = *(unsigned __int8 *)(result[117] + v25);
  v27 = *a3;
  *(_QWORD *)(a4 + (*a3 >> 3)) = ((unint64_t)*(unsigned __int16 *)(result[118] + 2 * v25) << (*(_BYTE *)a3 & 7)) | *(unsigned __int8 *)(a4 + (*a3 >> 3));
  *a3 = v27 + v26;
  return result;
}

_QWORD *sub_2367A793C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v7 = result[115];
  if (!v7)
  {
    v8 = result[114] + 1;
    result[114] = v8;
    v9 = *(unsigned int *)(result[3] + 4 * v8);
    v10 = *(unsigned __int8 *)(result[2] + v8);
    result[115] = v9;
    result[116] = v10 << a7;
    v11 = result[5];
    if (v11 + 1 == v10)
    {
      v12 = 1;
    }
    else if (result[6] == v10)
    {
      v12 = 0;
    }
    else
    {
      v12 = v10 + 2;
    }
    result[5] = v10;
    result[6] = v11;
    v13 = *((unsigned __int8 *)result + v12 + 56);
    v14 = *((unsigned __int16 *)result + v12 + 157);
    v15 = *a5;
    *(_QWORD *)(a6 + (*a5 >> 3)) = (v14 << (*(_BYTE *)a5 & 7)) | *(unsigned __int8 *)(a6 + (*a5 >> 3));
    v16 = v15 + v13;
    *a5 = v16;
    v17 = 14;
    if (v9 > 0x2F0)
      v17 = 20;
    v18 = 7;
    if (v9 <= 0x28)
      v18 = 0;
    if (v9 <= 0xB0)
      v19 = v18;
    else
      v19 = v17;
    v20 = v19 - 1;
    v21 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v19 + 4);
    while (v20 != 24)
    {
      v22 = *v21;
      v21 += 2;
      ++v20;
      if (v9 < v22)
        goto LABEL_19;
    }
    LODWORD(v20) = 25;
LABEL_19:
    v23 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v20);
    v24 = *((unsigned __int8 *)v23 + 2);
    v25 = v9 - *v23;
    v26 = *((unsigned __int8 *)result + v20 + 830);
    *(_QWORD *)(a6 + (v16 >> 3)) = ((unint64_t)*((unsigned __int16 *)result + v20 + 428) << (v16 & 7)) | *(unsigned __int8 *)(a6 + (v16 >> 3));
    v27 = v16 + v26;
    *a5 = v27;
    *(_QWORD *)(a6 + (v27 >> 3)) = (v25 << (v27 & 7)) | *(unsigned __int8 *)(a6 + (v27 >> 3));
    *a5 = v27 + v24;
    v7 = result[115];
  }
  result[115] = v7 - 1;
  v28 = a2 + *result * *(unsigned int *)(a4 + 4 * (result[116] + a3));
  v29 = *(unsigned __int8 *)(result[117] + v28);
  v30 = *a5;
  *(_QWORD *)(a6 + (*a5 >> 3)) = ((unint64_t)*(unsigned __int16 *)(result[118] + 2 * v28) << (*(_BYTE *)a5 & 7)) | *(unsigned __int8 *)(a6 + (*a5 >> 3));
  *a5 = v30 + v29;
  return result;
}

uint64_t sub_2367A7AE0(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (result)
  {
    v3 = __clz(result) ^ 0x1F;
    v4 = *a2;
    *(_QWORD *)(a3 + (*a2 >> 3)) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(a3 + (*a2 >> 3));
    *a2 = v4 + 1;
    *(_QWORD *)(a3 + ((v4 + 1) >> 3)) = (v3 << ((v4 + 1) & 7)) | *(unsigned __int8 *)(a3 + ((v4 + 1) >> 3));
    v4 += 4;
    *a2 = v4;
    *(_QWORD *)(a3 + (v4 >> 3)) = (((-1 << v3) + result) << (v4 & 7)) | *(unsigned __int8 *)(a3 + (v4 >> 3));
    v5 = v4 + v3;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a3 + (*a2 >> 3)) = *(unsigned __int8 *)(a3 + (*a2 >> 3));
    v5 = v6 + 1;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_2367A7B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  unsigned int v20;
  uint64_t v21;

  v16 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 20640);
  if (!v16)
    exit(1);
  v17 = v16;
  v21 = *(unsigned int *)(a7 + 72);
  sub_2367A6958(a6, a4, a10, a11);
  bzero((void *)v17, 0x408uLL);
  *(_QWORD *)(v17 + 1032) = 0x7FF0000000000000;
  bzero((void *)(v17 + 1040), 0xB08uLL);
  *(_QWORD *)(v17 + 3864) = 0x7FF0000000000000;
  bzero((void *)(v17 + 3872), 0x888uLL);
  *(_QWORD *)(v17 + 6056) = 0x7FF0000000000000;
  sub_2367A7DA8(a2, a3, a5, a8, a9, v17, v17 + 1040, v17 + 3872);
  v18 = *a10;
  *(_QWORD *)(a11 + (*a10 >> 3)) = *(unsigned __int8 *)(a11 + (*a10 >> 3));
  *a10 = v18 + 13;
  sub_2367A73B0((unsigned __int8 *)v17, 0x100uLL, 256, v17 + 9364, (_BYTE *)(v17 + 6064), v17 + 6320, a10, a11);
  sub_2367A73B0((unsigned __int8 *)(v17 + 1040), 0x2C0uLL, 704, v17 + 9364, (_BYTE *)(v17 + 6832), v17 + 7536, a10, a11);
  sub_2367A73B0((unsigned __int8 *)(v17 + 3872), 0x8CuLL, v21, v17 + 9364, (_BYTE *)(v17 + 8944), v17 + 9084, a10, a11);
  sub_2367A7E4C(a2, a3, a5, a8, a9, v17 + 6064, v17 + 6320, v17 + 6832, v17 + 7536, v17 + 8944, v17 + 9084, a10, a11);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v17);
  if ((_DWORD)a6)
  {
    v20 = *(_DWORD *)a10 + 7;
    *a10 = v20 & 0xFFFFFFF8;
    *(_BYTE *)(a11 + (v20 >> 3)) = 0;
  }
  return result;
}

uint64_t sub_2367A7DA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  if (a5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a7 + 2816);
    do
    {
      v10 = (unsigned int *)(a4 + 16 * v8);
      v12 = *v10;
      v11 = v10[1];
      v13 = *((unsigned __int16 *)v10 + 6);
      v14 = *((_WORD *)v10 + 7);
      ++*(_DWORD *)(a7 + 4 * v13);
      *(_QWORD *)(a7 + 2816) = ++v9;
      if ((_DWORD)v12)
      {
        v15 = *(_QWORD *)(a6 + 1024) + 1;
        do
        {
          ++*(_DWORD *)(a6 + 4 * *(unsigned __int8 *)(result + (a2 & a3)));
          *(_QWORD *)(a6 + 1024) = v15;
          ++a2;
          ++v15;
          --v12;
        }
        while (v12);
      }
      v16 = v11 & 0x1FFFFFF;
      if ((_DWORD)v16)
      {
        if (v13 >= 0x80)
        {
          ++*(_DWORD *)(a8 + 4 * (v14 & 0x3FF));
          ++*(_QWORD *)(a8 + 2176);
        }
      }
      a2 += v16;
      ++v8;
    }
    while (v8 != a5);
  }
  return result;
}

uint64_t sub_2367A7E4C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a5)
  {
    v13 = 0;
    v14 = *a12;
    do
    {
      v15 = (unsigned int *)(a4 + 16 * v13);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = *((unsigned __int16 *)v15 + 6);
      v20 = *((unsigned __int16 *)v15 + 7);
      v21 = *(unsigned __int8 *)(a8 + v19);
      *(_QWORD *)(a13 + (v14 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a9 + 2 * v19) << (v14 & 7)) | *(unsigned __int8 *)(a13 + (v14 >> 3));
      v22 = v14 + v21;
      *a12 = v22;
      LOWORD(v23) = v16;
      if (v16 >= 6)
      {
        if (v16 > 0x81)
        {
          if (v16 > 0x841)
          {
            if (v16 >> 1 >= 0xC21)
            {
              if (v16 < 0x5842)
                LOWORD(v23) = 22;
              else
                LOWORD(v23) = 23;
            }
            else
            {
              LOWORD(v23) = 21;
            }
          }
          else
          {
            LODWORD(v23) = (__clz(v16 - 66) ^ 0x1F) + 10;
          }
        }
        else
        {
          v24 = (__clz(v16 - 2) ^ 0x1F) - 1;
          v23 = 2 * v24 + ((unint64_t)(v16 - 2) >> v24) + 2;
        }
      }
      v25 = HIBYTE(v17) & 0x80 | (v17 >> 25);
      v26 = v17 & 0x1FFFFFF;
      v27 = (v26 + (char)v25);
      if (v27 > 9)
      {
        if (v27 > 0x85)
        {
          v30 = (__clz(v27 - 70) ^ 0x1F) + 12;
          if (v27 <= 0x845)
            LOWORD(v28) = v30;
          else
            LOWORD(v28) = 23;
        }
        else
        {
          v29 = (__clz(v27 - 6) ^ 0x1F) - 1;
          v28 = 2 * v29 + ((unint64_t)(v27 - 6) >> v29) + 4;
        }
      }
      else
      {
        LOWORD(v28) = v26 + (char)v25 - 2;
      }
      v31 = 4 * (unsigned __int16)v23;
      v32 = *(_DWORD *)((char *)&unk_2369254E8 + v31);
      v33 = 4 * (unsigned __int16)v28;
      v34 = ((unint64_t)(v27 - *(_DWORD *)((char *)&unk_236925548 + v33)) << v32) | (v16 - *(_DWORD *)((char *)&unk_236925488 + v31));
      v35 = (*(_DWORD *)((char *)&unk_2369255A8 + v33) + v32);
      *(_QWORD *)(a13 + (v22 >> 3)) = (v34 << (v22 & 7)) | *(unsigned __int8 *)(a13 + (v22 >> 3));
      v14 = v22 + v35;
      *a12 = v14;
      if ((_DWORD)v16)
      {
        do
        {
          v36 = *(unsigned __int8 *)(result + (a2 & a3));
          v37 = *(unsigned __int8 *)(a6 + v36);
          *(_QWORD *)(a13 + (v14 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a7 + 2 * v36) << (v14 & 7)) | *(unsigned __int8 *)(a13 + (v14 >> 3));
          v14 += v37;
          *a12 = v14;
          ++a2;
          --v16;
        }
        while (v16);
      }
      if ((_DWORD)v26)
      {
        if (v19 >= 0x80)
        {
          v38 = *(unsigned __int8 *)(a10 + (v20 & 0x3FF));
          *(_QWORD *)(a13 + (v14 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a11 + 2 * (v20 & 0x3FF)) << (v14 & 7)) | *(unsigned __int8 *)(a13 + (v14 >> 3));
          *a12 = v14 + v38;
          *(_QWORD *)(a13 + ((v14 + v38) >> 3)) = (v18 << ((v14 + v38) & 7)) | *(unsigned __int8 *)(a13
                                                                                                  + ((v14 + v38) >> 3));
          v14 += v38 + (v20 >> 10);
          *a12 = v14;
        }
      }
      a2 += v26;
      ++v13;
    }
    while (v13 != a5);
  }
  return result;
}

uint64_t sub_2367A80D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t *a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  unsigned int v29;
  _DWORD v32[256];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v17 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 20640);
  if (!v17)
    exit(1);
  v18 = v17;
  v19 = *(_DWORD *)(a7 + 72);
  sub_2367A6958(a6, a4, a10, a11);
  v20 = *a10;
  *(_QWORD *)(a11 + (*a10 >> 3)) = *(unsigned __int8 *)(a11 + (*a10 >> 3));
  *a10 = v20 + 13;
  if (a9 > 0x80)
  {
    bzero((void *)v18, 0x408uLL);
    *(_QWORD *)(v18 + 1032) = 0x7FF0000000000000;
    bzero((void *)(v18 + 1040), 0xB08uLL);
    *(_QWORD *)(v18 + 3864) = 0x7FF0000000000000;
    bzero((void *)(v18 + 3872), 0x888uLL);
    *(_QWORD *)(v18 + 6056) = 0x7FF0000000000000;
    sub_2367A7DA8(a2, a3, a5, a8, a9, v18, v18 + 1040, v18 + 3872);
    sub_2367A58C4(v18 + 9364, v18, *(_QWORD *)(v18 + 1024), 8, (_BYTE *)(v18 + 6064), v18 + 6320, a10, a11);
    sub_2367A58C4(v18 + 9364, v18 + 1040, *(_QWORD *)(v18 + 3856), 10, (_BYTE *)(v18 + 6832), v18 + 7536, a10, a11);
    sub_2367A58C4(v18 + 9364, v18 + 3872, *(_QWORD *)(v18 + 6048), (__clz(v19 - 1) ^ 0x1F) + 1, (_BYTE *)(v18 + 8944), v18 + 9084, a10, a11);
    sub_2367A7E4C(a2, a3, a5, a8, a9, v18 + 6064, v18 + 6320, v18 + 6832, v18 + 7536, v18 + 8944, v18 + 9084, a10, a11);
  }
  else
  {
    bzero(v32, 0x400uLL);
    if (a9)
    {
      v21 = 0;
      v22 = 0;
      v23 = a3;
      do
      {
        v24 = (unsigned int *)(a8 + 16 * v21);
        v25 = *v24;
        if ((_DWORD)v25)
        {
          v26 = *v24;
          do
          {
            ++v32[*(unsigned __int8 *)(a2 + (v23++ & a5))];
            --v26;
          }
          while (v26);
        }
        v22 += v25;
        v23 += v24[1] & 0x1FFFFFF;
        ++v21;
      }
      while (v21 != a9);
    }
    else
    {
      v22 = 0;
    }
    sub_2367A58C4(v18 + 9364, (uint64_t)v32, v22, 8, (_BYTE *)(v18 + 6064), v18 + 6320, a10, a11);
    v27 = *a10;
    *(_QWORD *)(a11 + (*a10 >> 3)) = (0x92624416307003 << (*a10 & 7)) | *(unsigned __int8 *)(a11 + (*a10 >> 3));
    *a10 = v27 + 56;
    *(_QWORD *)(a11 + ((v27 + 56) >> 3)) = *(unsigned __int8 *)(a11 + ((v27 + 56) >> 3));
    *a10 = v27 + 59;
    *(_QWORD *)(a11 + ((v27 + 59) >> 3)) = (57269251 << ((v27 + 59) & 7)) | *(unsigned __int8 *)(a11
                                                                                                 + ((v27 + 59) >> 3));
    *a10 = v27 + 87;
    sub_2367A7E4C(a2, a3, a5, a8, a9, v18 + 6064, v18 + 6320, (uint64_t)"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v"
               "\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v"
               "\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v",
      (uint64_t)"",
      (uint64_t)&unk_2368D6C00,
      (uint64_t)&unk_2368D6C40,
      a10,
      a11);
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v18);
  if ((_DWORD)a6)
  {
    v29 = *(_DWORD *)a10 + 7;
    *a10 = v29 & 0xFFFFFFF8;
    *(_BYTE *)(a11 + (v29 >> 3)) = 0;
  }
  return result;
}

void *sub_2367A8494(int a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, uint64_t *a6, uint64_t a7)
{
  size_t v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *result;
  size_t v25;
  unsigned int v26;

  v9 = a5;
  v12 = a4 & a3;
  v13 = *a6;
  *(_QWORD *)(a7 + ((unint64_t)*a6 >> 3)) = *(unsigned __int8 *)(a7 + ((unint64_t)*a6 >> 3));
  if (a5 == 1 || (v14 = __clz(a5 - 1) ^ 0x1F, v14 <= 0xE))
    v15 = 4;
  else
    v15 = (v14 + 4) >> 2;
  *(_QWORD *)(a7 + ((unint64_t)(v13 + 1) >> 3)) = ((v15 - 4) << ((v13 + 1) & 7)) | *(unsigned __int8 *)(a7 + ((unint64_t)(v13 + 1) >> 3));
  v16 = v13 + 3;
  *(_QWORD *)(a7 + (v16 >> 3)) = ((a5 - 1) << (v16 & 7)) | *(unsigned __int8 *)(a7 + (v16 >> 3));
  v17 = v16 + 4 * v15;
  *(_QWORD *)(a7 + (v17 >> 3)) = (1 << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  v18 = v17 + 8;
  v19 = v18 & 0xFFFFFFF8;
  v20 = (_BYTE *)(a7 + (v19 >> 3));
  *v20 = 0;
  v21 = a4 + 1;
  if (v12 + a5 <= a4 + 1)
  {
    v23 = v18 >> 3;
  }
  else
  {
    v22 = v21 - v12;
    memcpy(v20, (const void *)(a2 + v12), v21 - v12);
    v12 = 0;
    v19 += 8 * v22;
    v9 -= v22;
    v23 = v19 >> 3;
  }
  result = memcpy((void *)(a7 + v23), (const void *)(a2 + v12), v9);
  v25 = v19 + 8 * v9;
  *a6 = v25;
  *(_BYTE *)(a7 + (v25 >> 3)) = 0;
  if (a1)
  {
    *(_QWORD *)(a7 + (v25 >> 3)) = 1 << (v19 & 7);
    *(_QWORD *)(a7 + ((v25 + 1) >> 3)) = (1 << ((v25 + 1) & 7)) | *(unsigned __int8 *)(a7 + ((v25 + 1) >> 3));
    v26 = v25 + 9;
    *a6 = v26 & 0xFFFFFFF8;
    *(_BYTE *)(a7 + (v26 >> 3)) = 0;
  }
  return result;
}

void sub_2367A8620(uint64_t a1, char *__dst, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unint64_t *a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  if (a4 != a5)
  {
    v13 = a5 >= a4 ? a4 : a5;
    v14 = *(unsigned int *)(a3 + 4 * v13);
    v15 = a5 <= a4 ? a4 : a5;
    v16 = *(unsigned int *)(a3 + 4 * v15);
    v17 = (double)v14;
    v18 = v14 > 0xFF ? log2((double)v14) : dbl_236925608[v14];
    v19 = v16 + v14;
    v20 = v16 > 0xFF ? log2((double)v16) : dbl_236925608[v16];
    v21 = v20 * (double)v16 + v17 * v18;
    v22 = v19 > 0xFF ? log2((double)v19) : dbl_236925608[v19];
    v23 = a1 + 1040 * v13;
    v24 = (v21 - (double)v19 * v22) * 0.5 - *(double *)(v23 + 1032);
    v25 = a1 + 1040 * v15;
    v26 = *(double *)(v25 + 1032);
    v27 = v24 - v26;
    if (!*(_QWORD *)(v23 + 1024))
      goto LABEL_27;
    v28 = a1 + 1040 * v15;
    v26 = *(double *)(v23 + 1032);
    if (!*(_QWORD *)(v28 + 1024))
      goto LABEL_27;
    v29 = (_QWORD *)(v28 + 1024);
    if (*a8)
      v30 = *(double *)(a7 + 16) >= 0.0 ? *(double *)(a7 + 16) : 0.0;
    else
      v30 = 1.0e99;
    memcpy(__dst, (const void *)v23, 0x410uLL);
    v31 = 0;
    *((_QWORD *)__dst + 128) += *v29;
    do
    {
      *(_DWORD *)&__dst[v31] += *(_DWORD *)(v25 + v31);
      v31 += 4;
    }
    while (v31 != 1024);
    sub_2367A11A8((uint64_t)__dst);
    if (v26 < v30 - v27)
    {
LABEL_27:
      v32 = v27 + v26;
      v33 = *a8;
      if (*a8)
      {
        v34 = *(double *)(a7 + 16);
        if (v34 == v32)
        {
          if (*(_DWORD *)(a7 + 4) - *(_DWORD *)a7 > v15 - v13)
            goto LABEL_30;
        }
        else if (v34 > v32)
        {
LABEL_30:
          if (v33 < a6)
          {
            v35 = a7 + 24 * v33;
            *(_OWORD *)v35 = *(_OWORD *)a7;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(a7 + 16);
            ++*a8;
          }
          *(_DWORD *)a7 = v13;
          *(_DWORD *)(a7 + 4) = v15;
          *(double *)(a7 + 8) = v26;
          *(double *)(a7 + 16) = v32;
          return;
        }
      }
      if (v33 < a6)
      {
        v36 = a7 + 24 * v33;
        *(_DWORD *)v36 = v13;
        *(_DWORD *)(v36 + 4) = v15;
        *(double *)(v36 + 8) = v26;
        *(double *)(v36 + 16) = v32;
        *a8 = v33 + 1;
      }
    }
  }
}

unint64_t sub_2367A8858(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unsigned int *a5, unsigned int *a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  double v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  double v41;
  double v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v53;
  uint64_t v55;
  char *__dst;
  unint64_t v57;

  v57 = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a7 - 1;
    v53 = a7;
    v15 = a5 + 1;
    __dst = a2;
    do
    {
      v55 = v13 + 1;
      if (v13 + 1 < a7)
      {
        v17 = v15;
        v18 = v14;
        do
        {
          v19 = *v17++;
          sub_2367A8620(a1, a2, a3, a5[v13], v19, a10, (uint64_t)a6, &v57);
          a2 = __dst;
          --v18;
        }
        while (v18);
      }
      --v14;
      ++v15;
      ++v13;
      a7 = v53;
    }
    while (v55 != v53);
    if (v53 >= 2)
    {
      v20 = 0.0;
      v21 = 1;
      v22 = a5;
      do
      {
        if (*((double *)a6 + 2) >= v20)
        {
          v20 = 1.0e99;
          v21 = a9;
        }
        else
        {
          v23 = 0;
          v25 = *a6;
          v24 = a6[1];
          v26 = a1 + 1040 * v25;
          v27 = a1 + 1040 * v24;
          *(_QWORD *)(v26 + 1024) += *(_QWORD *)(v27 + 1024);
          do
          {
            *(_DWORD *)(v26 + v23) += *(_DWORD *)(v27 + v23);
            v23 += 4;
          }
          while (v23 != 1024);
          *(_QWORD *)(a1 + 1040 * v25 + 1032) = *((_QWORD *)a6 + 1);
          *(_DWORD *)(a3 + 4 * v25) += *(_DWORD *)(a3 + 4 * v24);
          v28 = a4;
          for (i = a8; i; --i)
          {
            if (*v28 == (_DWORD)v24)
              *v28 = v25;
            ++v28;
          }
          v30 = 0;
          v31 = a7 - 1;
          if (a7 <= 1)
            v32 = 1;
          else
            v32 = a7;
          while (1)
          {
            v33 = v30 + 1;
            if (v22[v30] == (_DWORD)v24)
              break;
            ++v30;
            if (v32 == v33)
              goto LABEL_24;
          }
          memmove(&v22[v30], &v22[v33], 4 * (a7 + ~v30));
LABEL_24:
          v34 = v57;
          if (v57)
          {
            v35 = 0;
            v36 = (double *)a6;
            while (2)
            {
              v37 = *(_DWORD *)v36;
              if (*(_DWORD *)v36 == (_DWORD)v25)
                goto LABEL_40;
              v38 = *((_DWORD *)v36 + 1);
              v39 = v38 == (_DWORD)v24 || v37 == (_DWORD)v24;
              if (v39 || v38 == (_DWORD)v25)
                goto LABEL_40;
              v41 = *((double *)a6 + 2);
              v42 = v36[2];
              if (v41 == v42)
              {
                if (a6[1] - *a6 <= v38 - v37)
                  goto LABEL_38;
LABEL_36:
                v43 = *(_OWORD *)a6;
                v44 = *((_QWORD *)a6 + 2);
                v45 = *((_QWORD *)v36 + 2);
                *(_OWORD *)a6 = *(_OWORD *)v36;
                *((_QWORD *)a6 + 2) = v45;
              }
              else
              {
                if (v41 > v42)
                  goto LABEL_36;
LABEL_38:
                v43 = *(_OWORD *)v36;
                v44 = *((_QWORD *)v36 + 2);
              }
              v46 = &a6[6 * v35];
              *((_QWORD *)v46 + 2) = v44;
              *(_OWORD *)v46 = v43;
              ++v35;
LABEL_40:
              v36 += 3;
              if (!--v34)
                goto LABEL_43;
              continue;
            }
          }
          v35 = 0;
LABEL_43:
          v57 = v35;
          v47 = v22;
          v48 = v31;
          do
          {
            v49 = *v47++;
            sub_2367A8620(a1, __dst, a3, v25, v49, a10, (uint64_t)a6, &v57);
            --v48;
          }
          while (v48);
          a7 = v31;
          v22 = a5;
        }
      }
      while (a7 > v21);
    }
  }
  return a7;
}

double sub_2367A8B2C(_QWORD *__src, uint64_t a2, char *__dst)
{
  uint64_t v5;
  double v6;

  if (!__src[128])
    return 0.0;
  memcpy(__dst, __src, 0x410uLL);
  v5 = 0;
  *((_QWORD *)__dst + 128) += *(_QWORD *)(a2 + 1024);
  do
  {
    *(_DWORD *)&__dst[v5] += *(_DWORD *)(a2 + v5);
    v5 += 4;
  }
  while (v5 != 1024);
  sub_2367A11A8((uint64_t)__dst);
  return v6 - *(double *)(a2 + 1032);
}

void sub_2367A8BAC(uint64_t a1, char *__dst, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unint64_t *a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  if (a4 != a5)
  {
    v13 = a5 >= a4 ? a4 : a5;
    v14 = *(unsigned int *)(a3 + 4 * v13);
    v15 = a5 <= a4 ? a4 : a5;
    v16 = *(unsigned int *)(a3 + 4 * v15);
    v17 = (double)v14;
    v18 = v14 > 0xFF ? log2((double)v14) : dbl_236925608[v14];
    v19 = v16 + v14;
    v20 = v16 > 0xFF ? log2((double)v16) : dbl_236925608[v16];
    v21 = v20 * (double)v16 + v17 * v18;
    v22 = v19 > 0xFF ? log2((double)v19) : dbl_236925608[v19];
    v23 = a1 + 2832 * v13;
    v24 = (v21 - (double)v19 * v22) * 0.5 - *(double *)(v23 + 2824);
    v25 = a1 + 2832 * v15;
    v26 = *(double *)(v25 + 2824);
    v27 = v24 - v26;
    if (!*(_QWORD *)(v23 + 2816))
      goto LABEL_27;
    v28 = a1 + 2832 * v15;
    v26 = *(double *)(v23 + 2824);
    if (!*(_QWORD *)(v28 + 2816))
      goto LABEL_27;
    v29 = (_QWORD *)(v28 + 2816);
    if (*a8)
      v30 = *(double *)(a7 + 16) >= 0.0 ? *(double *)(a7 + 16) : 0.0;
    else
      v30 = 1.0e99;
    memcpy(__dst, (const void *)v23, 0xB10uLL);
    v31 = 0;
    *((_QWORD *)__dst + 352) += *v29;
    do
    {
      *(_DWORD *)&__dst[v31] += *(_DWORD *)(v25 + v31);
      v31 += 4;
    }
    while (v31 != 2816);
    sub_2367A1594((uint64_t)__dst);
    if (v26 < v30 - v27)
    {
LABEL_27:
      v32 = v27 + v26;
      v33 = *a8;
      if (*a8)
      {
        v34 = *(double *)(a7 + 16);
        if (v34 == v32)
        {
          if (*(_DWORD *)(a7 + 4) - *(_DWORD *)a7 > v15 - v13)
            goto LABEL_30;
        }
        else if (v34 > v32)
        {
LABEL_30:
          if (v33 < a6)
          {
            v35 = a7 + 24 * v33;
            *(_OWORD *)v35 = *(_OWORD *)a7;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(a7 + 16);
            ++*a8;
          }
          *(_DWORD *)a7 = v13;
          *(_DWORD *)(a7 + 4) = v15;
          *(double *)(a7 + 8) = v26;
          *(double *)(a7 + 16) = v32;
          return;
        }
      }
      if (v33 < a6)
      {
        v36 = a7 + 24 * v33;
        *(_DWORD *)v36 = v13;
        *(_DWORD *)(v36 + 4) = v15;
        *(double *)(v36 + 8) = v26;
        *(double *)(v36 + 16) = v32;
        *a8 = v33 + 1;
      }
    }
  }
}

unint64_t sub_2367A8DE4(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unsigned int *a5, unsigned int *a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  double v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  double v41;
  double v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v53;
  uint64_t v55;
  char *__dst;
  unint64_t v57;

  v57 = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a7 - 1;
    v53 = a7;
    v15 = a5 + 1;
    __dst = a2;
    do
    {
      v55 = v13 + 1;
      if (v13 + 1 < a7)
      {
        v17 = v15;
        v18 = v14;
        do
        {
          v19 = *v17++;
          sub_2367A8BAC(a1, a2, a3, a5[v13], v19, a10, (uint64_t)a6, &v57);
          a2 = __dst;
          --v18;
        }
        while (v18);
      }
      --v14;
      ++v15;
      ++v13;
      a7 = v53;
    }
    while (v55 != v53);
    if (v53 >= 2)
    {
      v20 = 0.0;
      v21 = 1;
      v22 = a5;
      do
      {
        if (*((double *)a6 + 2) >= v20)
        {
          v20 = 1.0e99;
          v21 = a9;
        }
        else
        {
          v23 = 0;
          v25 = *a6;
          v24 = a6[1];
          v26 = a1 + 2832 * v25;
          v27 = a1 + 2832 * v24;
          *(_QWORD *)(v26 + 2816) += *(_QWORD *)(v27 + 2816);
          do
          {
            *(_DWORD *)(v26 + v23) += *(_DWORD *)(v27 + v23);
            v23 += 4;
          }
          while (v23 != 2816);
          *(_QWORD *)(a1 + 2832 * v25 + 2824) = *((_QWORD *)a6 + 1);
          *(_DWORD *)(a3 + 4 * v25) += *(_DWORD *)(a3 + 4 * v24);
          v28 = a4;
          for (i = a8; i; --i)
          {
            if (*v28 == (_DWORD)v24)
              *v28 = v25;
            ++v28;
          }
          v30 = 0;
          v31 = a7 - 1;
          if (a7 <= 1)
            v32 = 1;
          else
            v32 = a7;
          while (1)
          {
            v33 = v30 + 1;
            if (v22[v30] == (_DWORD)v24)
              break;
            ++v30;
            if (v32 == v33)
              goto LABEL_24;
          }
          memmove(&v22[v30], &v22[v33], 4 * (a7 + ~v30));
LABEL_24:
          v34 = v57;
          if (v57)
          {
            v35 = 0;
            v36 = (double *)a6;
            while (2)
            {
              v37 = *(_DWORD *)v36;
              if (*(_DWORD *)v36 == (_DWORD)v25)
                goto LABEL_40;
              v38 = *((_DWORD *)v36 + 1);
              v39 = v38 == (_DWORD)v24 || v37 == (_DWORD)v24;
              if (v39 || v38 == (_DWORD)v25)
                goto LABEL_40;
              v41 = *((double *)a6 + 2);
              v42 = v36[2];
              if (v41 == v42)
              {
                if (a6[1] - *a6 <= v38 - v37)
                  goto LABEL_38;
LABEL_36:
                v43 = *(_OWORD *)a6;
                v44 = *((_QWORD *)a6 + 2);
                v45 = *((_QWORD *)v36 + 2);
                *(_OWORD *)a6 = *(_OWORD *)v36;
                *((_QWORD *)a6 + 2) = v45;
              }
              else
              {
                if (v41 > v42)
                  goto LABEL_36;
LABEL_38:
                v43 = *(_OWORD *)v36;
                v44 = *((_QWORD *)v36 + 2);
              }
              v46 = &a6[6 * v35];
              *((_QWORD *)v46 + 2) = v44;
              *(_OWORD *)v46 = v43;
              ++v35;
LABEL_40:
              v36 += 3;
              if (!--v34)
                goto LABEL_43;
              continue;
            }
          }
          v35 = 0;
LABEL_43:
          v57 = v35;
          v47 = v22;
          v48 = v31;
          do
          {
            v49 = *v47++;
            sub_2367A8BAC(a1, __dst, a3, v25, v49, a10, (uint64_t)a6, &v57);
            --v48;
          }
          while (v48);
          a7 = v31;
          v22 = a5;
        }
      }
      while (a7 > v21);
    }
  }
  return a7;
}

double sub_2367A90B8(_QWORD *__src, uint64_t a2, char *__dst)
{
  uint64_t v5;
  double v6;

  if (!__src[352])
    return 0.0;
  memcpy(__dst, __src, 0xB10uLL);
  v5 = 0;
  *((_QWORD *)__dst + 352) += *(_QWORD *)(a2 + 2816);
  do
  {
    *(_DWORD *)&__dst[v5] += *(_DWORD *)(a2 + v5);
    v5 += 4;
  }
  while (v5 != 2816);
  sub_2367A1594((uint64_t)__dst);
  return v6 - *(double *)(a2 + 2824);
}

void sub_2367A9138(uint64_t a1, char *__dst, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unint64_t *a8)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;

  if (a4 != a5)
  {
    v13 = a5 >= a4 ? a4 : a5;
    v14 = *(unsigned int *)(a3 + 4 * v13);
    v15 = a5 <= a4 ? a4 : a5;
    v16 = *(unsigned int *)(a3 + 4 * v15);
    v17 = (double)v14;
    v18 = v14 > 0xFF ? log2((double)v14) : dbl_236925608[v14];
    v19 = v16 + v14;
    v20 = v16 > 0xFF ? log2((double)v16) : dbl_236925608[v16];
    v21 = v20 * (double)v16 + v17 * v18;
    v22 = v19 > 0xFF ? log2((double)v19) : dbl_236925608[v19];
    v23 = a1 + 2192 * v13;
    v24 = (v21 - (double)v19 * v22) * 0.5 - *(double *)(v23 + 2184);
    v25 = a1 + 2192 * v15;
    v26 = *(double *)(v25 + 2184);
    v27 = v24 - v26;
    if (!*(_QWORD *)(v23 + 2176))
      goto LABEL_27;
    v28 = a1 + 2192 * v15;
    v26 = *(double *)(v23 + 2184);
    if (!*(_QWORD *)(v28 + 2176))
      goto LABEL_27;
    v29 = (_QWORD *)(v28 + 2176);
    if (*a8)
      v30 = *(double *)(a7 + 16) >= 0.0 ? *(double *)(a7 + 16) : 0.0;
    else
      v30 = 1.0e99;
    memcpy(__dst, (const void *)v23, 0x890uLL);
    v31 = 0;
    *((_QWORD *)__dst + 272) += *v29;
    do
    {
      *(_DWORD *)&__dst[v31] += *(_DWORD *)(v25 + v31);
      v31 += 4;
    }
    while (v31 != 2176);
    sub_2367A1988((uint64_t)__dst);
    if (v26 < v30 - v27)
    {
LABEL_27:
      v32 = v27 + v26;
      v33 = *a8;
      if (*a8)
      {
        v34 = *(double *)(a7 + 16);
        if (v34 == v32)
        {
          if (*(_DWORD *)(a7 + 4) - *(_DWORD *)a7 > v15 - v13)
            goto LABEL_30;
        }
        else if (v34 > v32)
        {
LABEL_30:
          if (v33 < a6)
          {
            v35 = a7 + 24 * v33;
            *(_OWORD *)v35 = *(_OWORD *)a7;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(a7 + 16);
            ++*a8;
          }
          *(_DWORD *)a7 = v13;
          *(_DWORD *)(a7 + 4) = v15;
          *(double *)(a7 + 8) = v26;
          *(double *)(a7 + 16) = v32;
          return;
        }
      }
      if (v33 < a6)
      {
        v36 = a7 + 24 * v33;
        *(_DWORD *)v36 = v13;
        *(_DWORD *)(v36 + 4) = v15;
        *(double *)(v36 + 8) = v26;
        *(double *)(v36 + 16) = v32;
        *a8 = v33 + 1;
      }
    }
  }
}

unint64_t sub_2367A9370(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unsigned int *a5, unsigned int *a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  double v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  double v41;
  double v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v53;
  uint64_t v55;
  char *__dst;
  unint64_t v57;

  v57 = 0;
  if (a7)
  {
    v13 = 0;
    v14 = a7 - 1;
    v53 = a7;
    v15 = a5 + 1;
    __dst = a2;
    do
    {
      v55 = v13 + 1;
      if (v13 + 1 < a7)
      {
        v17 = v15;
        v18 = v14;
        do
        {
          v19 = *v17++;
          sub_2367A9138(a1, a2, a3, a5[v13], v19, a10, (uint64_t)a6, &v57);
          a2 = __dst;
          --v18;
        }
        while (v18);
      }
      --v14;
      ++v15;
      ++v13;
      a7 = v53;
    }
    while (v55 != v53);
    if (v53 >= 2)
    {
      v20 = 0.0;
      v21 = 1;
      v22 = a5;
      do
      {
        if (*((double *)a6 + 2) >= v20)
        {
          v20 = 1.0e99;
          v21 = a9;
        }
        else
        {
          v23 = 0;
          v25 = *a6;
          v24 = a6[1];
          v26 = a1 + 2192 * v25;
          v27 = a1 + 2192 * v24;
          *(_QWORD *)(v26 + 2176) += *(_QWORD *)(v27 + 2176);
          do
          {
            *(_DWORD *)(v26 + v23) += *(_DWORD *)(v27 + v23);
            v23 += 4;
          }
          while (v23 != 2176);
          *(_QWORD *)(a1 + 2192 * v25 + 2184) = *((_QWORD *)a6 + 1);
          *(_DWORD *)(a3 + 4 * v25) += *(_DWORD *)(a3 + 4 * v24);
          v28 = a4;
          for (i = a8; i; --i)
          {
            if (*v28 == (_DWORD)v24)
              *v28 = v25;
            ++v28;
          }
          v30 = 0;
          v31 = a7 - 1;
          if (a7 <= 1)
            v32 = 1;
          else
            v32 = a7;
          while (1)
          {
            v33 = v30 + 1;
            if (v22[v30] == (_DWORD)v24)
              break;
            ++v30;
            if (v32 == v33)
              goto LABEL_24;
          }
          memmove(&v22[v30], &v22[v33], 4 * (a7 + ~v30));
LABEL_24:
          v34 = v57;
          if (v57)
          {
            v35 = 0;
            v36 = (double *)a6;
            while (2)
            {
              v37 = *(_DWORD *)v36;
              if (*(_DWORD *)v36 == (_DWORD)v25)
                goto LABEL_40;
              v38 = *((_DWORD *)v36 + 1);
              v39 = v38 == (_DWORD)v24 || v37 == (_DWORD)v24;
              if (v39 || v38 == (_DWORD)v25)
                goto LABEL_40;
              v41 = *((double *)a6 + 2);
              v42 = v36[2];
              if (v41 == v42)
              {
                if (a6[1] - *a6 <= v38 - v37)
                  goto LABEL_38;
LABEL_36:
                v43 = *(_OWORD *)a6;
                v44 = *((_QWORD *)a6 + 2);
                v45 = *((_QWORD *)v36 + 2);
                *(_OWORD *)a6 = *(_OWORD *)v36;
                *((_QWORD *)a6 + 2) = v45;
              }
              else
              {
                if (v41 > v42)
                  goto LABEL_36;
LABEL_38:
                v43 = *(_OWORD *)v36;
                v44 = *((_QWORD *)v36 + 2);
              }
              v46 = &a6[6 * v35];
              *((_QWORD *)v46 + 2) = v44;
              *(_OWORD *)v46 = v43;
              ++v35;
LABEL_40:
              v36 += 3;
              if (!--v34)
                goto LABEL_43;
              continue;
            }
          }
          v35 = 0;
LABEL_43:
          v57 = v35;
          v47 = v22;
          v48 = v31;
          do
          {
            v49 = *v47++;
            sub_2367A9138(a1, __dst, a3, v25, v49, a10, (uint64_t)a6, &v57);
            --v48;
          }
          while (v48);
          a7 = v31;
          v22 = a5;
        }
      }
      while (a7 > v21);
    }
  }
  return a7;
}

double sub_2367A9644(_QWORD *__src, uint64_t a2, char *__dst)
{
  uint64_t v5;
  double v6;

  if (!__src[272])
    return 0.0;
  memcpy(__dst, __src, 0x890uLL);
  v5 = 0;
  *((_QWORD *)__dst + 272) += *(_QWORD *)(a2 + 2176);
  do
  {
    *(_DWORD *)&__dst[v5] += *(_DWORD *)(a2 + v5);
    v5 += 4;
  }
  while (v5 != 2176);
  sub_2367A1988((uint64_t)__dst);
  return v6 - *(double *)(a2 + 2184);
}

uint64_t sub_2367A96C4(uint64_t result, const void *a2, unint64_t a3, int a4, uint64_t a5, unsigned int a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *a7;
  if (!a3)
    goto LABEL_11;
  switch(__clz(a6) ^ 0x1F)
  {
    case 9u:
      result = sub_2367A9820(result, (uint64_t)a2, a3, a4, a5, a7, a8);
      break;
    case 0xBu:
      result = sub_2367AAA60(result, (uint64_t)a2, a3, a4, a5, a7, a8);
      break;
    case 0xDu:
      result = sub_2367ABCA0(result, (uint64_t)a2, a3, a4, a5, a7, a8);
      break;
    case 0xFu:
      result = sub_2367ACEE0(result, (uint64_t)a2, a3, a4, a5, a7, a8);
      break;
    default:
      break;
  }
  if (*a7 - v10 > 8 * a3 + 31)
    result = (uint64_t)sub_2367AE120(a2, (uint64_t)a2 + a3, v10, a7, a8);
  if (a4)
  {
    v10 = *a7;
LABEL_11:
    *(_QWORD *)(a8 + (v10 >> 3)) = (1 << (v10 & 7)) | *(unsigned __int8 *)(a8 + (v10 >> 3));
    *a7 = v10 + 1;
    *(_QWORD *)(a8 + ((v10 + 1) >> 3)) = (1 << ((v10 + 1) & 7)) | *(unsigned __int8 *)(a8 + ((v10 + 1) >> 3));
    *a7 = ((_DWORD)v10 + 9) & 0xFFFFFFF8;
  }
  return result;
}

uint64_t sub_2367A9820(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int i;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v201;
  const void *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *__dst;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;

  __dst = (char *)(a1 + 1152);
  v12 = a1 + 256;
  v213 = a3;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  sub_2367AE1B8(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v211 = v13;
  v201 = sub_2367AE260(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v207 = a1 + 896;
  v208 = a1 + 768;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v211;
  while (2)
  {
    v202 = (const void *)v22;
    v203 = v14;
    v206 = v14 + 3;
    v24 = (unsigned __int8 *)v22;
    v210 = v23;
    v212 = v23;
    while (1)
    {
      result = (uint64_t)memcpy(v21, &unk_2368D6CC0, 0x200uLL);
      v26 = v212;
      v27 = v22 + v212;
      if (v212 >= 0x10)
        break;
      v32 = a1 + 768;
      v31 = __dst;
      v163 = v213;
      v33 = a1 + 896;
LABEL_97:
      v164 = v163 - v26;
      if (v164 >= 0x10000)
        v165 = 0x10000;
      else
        v165 = v164;
      if (!v164)
        goto LABEL_106;
      v210 += v165;
      if (v210 > 0x100000)
        goto LABEL_106;
      v212 = v165;
      v213 = v164;
      v22 = v27;
      result = sub_2367AE410(a1, v27, v165, a1);
      if (!(_DWORD)result)
      {
        v32 = a1 + 768;
        v31 = __dst;
        v164 = v213;
        v33 = a1 + 896;
        v27 = v22;
LABEL_106:
        if ((unint64_t)v24 < v27)
        {
          v166 = v27 - (_QWORD)v24;
          if ((v27 - (unint64_t)v24) >> 1 > 0xC20)
          {
            result = (uint64_t)v202;
            if (50 * (v24 - (_BYTE *)v202) <= v166 && v201 >= 0x3D5)
            {
              v188 = v27;
              v189 = v164;
              result = (uint64_t)sub_2367AE120(v202, v27, v203, a6, a7);
              v164 = v189;
              v22 = v188;
              goto LABEL_120;
            }
            if (v166 > 0x5841)
            {
              v195 = *(unsigned __int8 *)(a1 + 831);
              v196 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v197 = v196 + v195;
              *a6 = v197;
              *(_QWORD *)(a7 + (v197 >> 3)) = ((v166 - 22594) << (v197 & 7)) | *(unsigned __int8 *)(a7 + (v197 >> 3));
              v193 = v197 + 24;
              v194 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v190 = *(unsigned __int8 *)(a1 + 830);
              v191 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v192 = v191 + v190;
              *a6 = v192;
              *(_QWORD *)(a7 + (v192 >> 3)) = ((v166 - 6210) << (v192 & 7)) | *(unsigned __int8 *)(a7 + (v192 >> 3));
              v193 = v192 + 14;
              v194 = (_DWORD *)(a1 + 1400);
            }
            ++*v194;
            *a6 = v193;
            do
            {
              v198 = *v24++;
              v199 = *(unsigned __int8 *)(a1 + v198);
              *(_QWORD *)(a7 + (v193 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v198) << (v193 & 7)) | *(unsigned __int8 *)(a7 + (v193 >> 3));
              v193 += v199;
              *a6 = v193;
              --v166;
            }
            while (v166);
          }
          else
          {
            if (v166 > 5)
            {
              if (v166 > 0x81)
              {
                if (v166 > 0x841)
                {
                  v180 = *(unsigned __int8 *)(a1 + 829);
                  v181 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v182 = v181 + v180;
                  *a6 = v182;
                  *(_QWORD *)(a7 + (v182 >> 3)) = ((v166 - 2114) << (v182 & 7)) | *(unsigned __int8 *)(a7 + (v182 >> 3));
                  *a6 = v182 + 12;
                  v169 = (char *)(a1 + 1396);
                }
                else
                {
                  v176 = __clz(v166 - 66) ^ 0x1F;
                  v177 = *(unsigned __int8 *)(v32 + v176 + 50);
                  v178 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v176 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v179 = v178 + v177;
                  *a6 = v179;
                  *(_QWORD *)(a7 + (v179 >> 3)) = (((-1 << v176) + v166 - 66) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                  *a6 = v179 + v176;
                  v169 = &v31[4 * v176 + 200];
                }
              }
              else
              {
                v170 = (__clz(v166 - 2) ^ 0x1F) - 1;
                v171 = (v166 - 2) >> v170;
                v172 = (2 * v170) + v171 + 42;
                v173 = *(unsigned __int8 *)(v32 + v172);
                v174 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * v172) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v175 = v174 + v173;
                *a6 = v175;
                *(_QWORD *)(a7 + (v175 >> 3)) = ((v166 - 2 - (v171 << v170)) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                *a6 = v175 + v170;
                v169 = &v31[4 * v172];
              }
            }
            else
            {
              v167 = *(unsigned __int8 *)(v32 + v166 + 40);
              v168 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v166 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v168 + v167;
              v169 = &v31[4 * v166 + 160];
            }
            ++*(_DWORD *)v169;
            if ((unsigned __int8 *)v27 != v24)
            {
              v183 = *a6;
              if (v166 <= 1)
                v166 = 1;
              do
              {
                v184 = *v24++;
                v185 = *(unsigned __int8 *)(a1 + v184);
                *(_QWORD *)(a7 + (v183 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v184) << (v183 & 7)) | *(unsigned __int8 *)(a7 + (v183 >> 3));
                v183 += v185;
                *a6 = v183;
                --v166;
              }
              while (v166);
            }
          }
        }
        v22 = v27;
        goto LABEL_120;
      }
      sub_2367AE530((v210 - 1), v206, a7);
      v21 = __dst;
    }
    v28 = v212 - 5;
    if (v212 - 5 >= v213 - 16)
      v28 = v213 - 16;
    v29 = v22 + v28;
    v30 = -1;
    v205 = v22;
    v32 = a1 + 768;
    v31 = __dst;
    v33 = a1 + 896;
    v34 = (char *)(a1 + 1408);
    v35 = v22 + v212;
LABEL_14:
    while (2)
    {
      v37 = *(_QWORD *)++v22;
      v36 = v37;
      for (i = 32; ; ++i)
      {
        v39 = (uint64_t *)(v22 + (i >> 5));
        if ((unint64_t)v39 > v29)
          goto LABEL_96;
        v40 = (unint64_t)(0x1E35A7BD000000 * v36) >> 55;
        v36 = *v39;
        v41 = v22 - v30;
        if (*(_DWORD *)v22 == *(_DWORD *)v41
          && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4)
          && v30 >= 1)
        {
          break;
        }
        v41 = a2 + *(int *)(a5 + 4 * v40);
        *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v41 && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4))
          goto LABEL_22;
LABEL_26:
        v22 = (uint64_t)v39;
      }
      *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
LABEL_22:
      v43 = v22 - v41;
      if (v22 - v41 > 262128)
        goto LABEL_26;
      v44 = v41 + 5;
      v45 = (unsigned __int8 *)(v22 + 5);
      v46 = v27 - v22 - 5;
      if (v46 < 8)
      {
        v49 = 0;
LABEL_86:
        v155 = v46 & 7;
        if (v155)
        {
          v156 = v49 | v155;
          while (*(unsigned __int8 *)(v44 + v49) == *v45)
          {
            ++v45;
            ++v49;
            if (!--v155)
            {
              v49 = v156;
              break;
            }
          }
        }
      }
      else
      {
        v47 = 0;
        v48 = v46 >> 3;
        v49 = v46 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v50 = *(_QWORD *)&v45[v47];
          v51 = *(_QWORD *)(v44 + v47);
          if (v50 != v51)
            break;
          v47 += 8;
          if (!--v48)
          {
            v45 += v46 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_86;
          }
        }
        v49 = v47 + (__clz(__rbit64(v51 ^ v50)) >> 3);
      }
      v52 = v22 - (_QWORD)v24;
      if ((unint64_t)(v22 - (_QWORD)v24) >> 1 <= 0xC20)
      {
        if (v52 > 5)
        {
          if (v52 > 0x81)
          {
            if (v52 > 0x841)
            {
              v67 = *(unsigned __int8 *)(a1 + 829);
              v68 = *a6;
              result = *a6 & 7;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v69 = v68 + v67;
              *a6 = v69;
              *(_QWORD *)(a7 + (v69 >> 3)) = ((v52 - 2114) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
              *a6 = v69 + 12;
              v56 = (char *)(a1 + 1396);
            }
            else
            {
              v63 = __clz(v52 - 66) ^ 0x1F;
              v64 = *(unsigned __int8 *)(v208 + v63 + 50);
              v65 = *a6;
              v27 = v35;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v63 + 50)) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v66 = v65 + v64;
              *a6 = v66;
              result = *(unsigned __int8 *)(a7 + (v66 >> 3));
              *(_QWORD *)(a7 + (v66 >> 3)) = (((-1 << v63) + v52 - 66) << (v66 & 7)) | result;
              *a6 = v66 + v63;
              v56 = &__dst[4 * v63 + 200];
            }
          }
          else
          {
            v57 = (__clz(v52 - 2) ^ 0x1F) - 1;
            v58 = (v52 - 2) >> v57;
            v59 = (2 * v57) + v58 + 42;
            v60 = *(unsigned __int8 *)(v208 + v59);
            v61 = *a6;
            v34 = (char *)(a1 + 1408);
            v27 = v35;
            *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v59) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v62 = v61 + v60;
            *a6 = v62;
            result = *(unsigned __int8 *)(a7 + (v62 >> 3));
            *(_QWORD *)(a7 + (v62 >> 3)) = ((v52 - 2 - (v58 << v57)) << (v62 & 7)) | result;
            *a6 = v62 + v57;
            v56 = &__dst[4 * v59];
          }
        }
        else
        {
          v53 = *(unsigned __int8 *)(v208 + v52 + 40);
          v54 = *a6;
          v55 = *a6 >> 3;
          result = *(unsigned __int8 *)(a7 + v55);
          *(_QWORD *)(a7 + v55) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v52 + 40)) << (*(_BYTE *)a6 & 7)) | result;
          *a6 = v54 + v53;
          v56 = &__dst[4 * v52 + 160];
        }
LABEL_41:
        ++*(_DWORD *)v56;
        if ((unsigned __int8 *)v22 != v24)
        {
          v70 = *a6;
          if (v52 <= 1)
            v52 = 1;
          do
          {
            v71 = *v24++;
            v72 = *(unsigned __int8 *)(a1 + v71);
            result = v70 & 7;
            *(_QWORD *)(a7 + (v70 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v71) << (v70 & 7)) | *(unsigned __int8 *)(a7 + (v70 >> 3));
            v70 += v72;
            *a6 = v70;
            --v52;
          }
          while (v52);
        }
        if (v30 == v43)
        {
          v73 = *(unsigned __int8 *)(a1 + 832);
          v74 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v75 = v74 + v73;
          v76 = v34;
        }
        else
        {
          v77 = v43 + 3;
          v78 = __clz(v77) ^ 0x1F;
          v79 = v78 - 1;
          v80 = (v77 >> (v78 - 1)) & 1 | 2;
          v81 = ((2 * v78 - 4) & 0xFFFFFFFE | (v77 >> (v78 - 1)) & 1) + 80;
          v82 = *(unsigned __int8 *)(v208 + v81);
          v83 = *a6;
          result = *a6 >> 3;
          *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v81) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
          v84 = v83 + v82;
          *a6 = v84;
          *(_QWORD *)(a7 + (v84 >> 3)) = ((v77 - (v80 << v79)) << (v84 & 7)) | *(unsigned __int8 *)(a7 + (v84 >> 3));
          v75 = v84 + v79;
          v76 = &__dst[4 * v81];
          v30 = v43;
        }
        v85 = v49 + 5;
        ++*(_DWORD *)v76;
        *a6 = v75;
        if (v49 + 5 > 0xB)
        {
          if (v85 > 0x47)
          {
            if (v85 > 0x87)
            {
              if (v85 > 0x847)
              {
                v106 = *(unsigned __int8 *)(a1 + 807);
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
                v107 = v75 + v106;
                *a6 = v107;
                v108 = v107 & 7;
                *(_QWORD *)(a7 + (v107 >> 3)) = ((v49 - 2115) << (v107 & 7)) | *(unsigned __int8 *)(a7 + (v107 >> 3));
                v109 = v107 + 24;
                *a6 = v107 + 24;
                v110 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v109 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v108) | *(unsigned __int8 *)(a7 + (v109 >> 3));
                *a6 = v109 + v110;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v100 = v49 - 67;
                v101 = __clz(v100) ^ 0x1F;
                v102 = *(unsigned __int8 *)(v208 + v101 + 28);
                result = *(unsigned __int8 *)(a7 + (v75 >> 3));
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v101 + 28)) << (v75 & 7)) | result;
                v103 = v75 + v102;
                *a6 = v103;
                *(_QWORD *)(a7 + (v103 >> 3)) = (((-1 << v101) + v100) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                v104 = v103 + v101;
                *a6 = v103 + v101;
                v105 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v104 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v104 & 7)) | *(unsigned __int8 *)(a7 + (v104 >> 3));
                *a6 = v104 + v105;
                ++*(_DWORD *)&__dst[4 * v101 + 112];
              }
            }
            else
            {
              v94 = v49 - 3;
              v95 = (v94 >> 5) + 30;
              v96 = *(unsigned __int8 *)(v208 + v95);
              result = v75 & 7;
              *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v95) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
              v97 = v75 + v96;
              *a6 = v97;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((v94 & 0x1F) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              v98 = v97 + 5;
              *a6 = v97 + 5;
              v99 = *(unsigned __int8 *)(a1 + 832);
              *(_QWORD *)(a7 + (v98 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v98 & 7)) | *(unsigned __int8 *)(a7 + (v98 >> 3));
              *a6 = v98 + v99;
              ++*(_DWORD *)&__dst[4 * v95];
            }
            v88 = v34;
          }
          else
          {
            v89 = v49 - 3;
            v90 = (__clz(v89) ^ 0x1F) - 1;
            v91 = (2 * v90) + (v89 >> v90) + 4;
            v92 = *(unsigned __int8 *)(v208 + v91);
            result = v75 >> 3;
            *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v91) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
            v93 = v75 + v92;
            *a6 = v93;
            *(_QWORD *)(a7 + (v93 >> 3)) = ((v89 - (v89 >> v90 << v90)) << (v93 & 7)) | *(unsigned __int8 *)(a7 + (v93 >> 3));
            *a6 = v93 + v90;
            v88 = &__dst[4 * v91];
          }
        }
        else
        {
          v86 = v49 + 1;
          v87 = *(unsigned __int8 *)(v208 + v86);
          *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v86) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
          *a6 = v75 + v87;
          v88 = &__dst[4 * v86];
        }
        v24 = (unsigned __int8 *)(v22 + v85);
        ++*(_DWORD *)v88;
        if (v22 + v85 >= v29)
        {
LABEL_96:
          v26 = v212;
          v163 = v213;
          goto LABEL_97;
        }
        v111 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v111) >> 53) & 0x7FC)) = (_DWORD)v24 - a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 8)) >> 53) & 0x7FC)) = (_DWORD)v24 - a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 16)) >> 53) & 0x7FC)) = (_DWORD)v24 - a2 - 1;
        v112 = ((0x1E35A7BD000000 * (v111 >> 24)) >> 53) & 0x7FC;
        v113 = *(int *)(a5 + v112);
        *(_DWORD *)(a5 + v112) = (_DWORD)v24 - a2;
        v114 = a2 + v113;
        v22 = (uint64_t)v24;
        if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v113))
        {
          while (1)
          {
            v22 = (uint64_t)v24;
            if (v24[4] != *(unsigned __int8 *)(v114 + 4))
              break;
            v115 = v114 + 5;
            v116 = v24 + 5;
            v117 = v27 - (_QWORD)v24 - 5;
            if (v117 < 8)
            {
              v120 = 0;
LABEL_79:
              v153 = v117 & 7;
              if (v153)
              {
                v154 = v120 | v153;
                while (*(unsigned __int8 *)(v115 + v120) == *v116)
                {
                  ++v116;
                  ++v120;
                  if (!--v153)
                  {
                    v120 = v154;
                    break;
                  }
                }
              }
            }
            else
            {
              v118 = 0;
              v119 = v117 >> 3;
              v120 = v117 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                result = *(_QWORD *)&v116[v118];
                v121 = *(_QWORD *)(v115 + v118);
                if (result != v121)
                  break;
                v118 += 8;
                if (!--v119)
                {
                  v116 += v117 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_79;
                }
              }
              v120 = v118 + (__clz(__rbit64(v121 ^ result)) >> 3);
            }
            v122 = (uint64_t)&v24[-v114];
            if (v122 <= 262128)
            {
              v123 = v120 + 5;
              if (v120 + 5 > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v140 = *(unsigned __int8 *)(a1 + 807);
                    v141 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v142 = v141 + v140;
                    *a6 = v142;
                    *(_QWORD *)(a7 + (v142 >> 3)) = ((v120 - 2113) << (v142 & 7)) | *(unsigned __int8 *)(a7 + (v142 >> 3));
                    v127 = v142 + 24;
                    *a6 = v142 + 24;
                    v128 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v135 = v120 - 65;
                    v136 = __clz(v135) ^ 0x1F;
                    v137 = *(unsigned __int8 *)(v208 + v136 + 28);
                    v138 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v136 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v139 = v138 + v137;
                    *a6 = v139;
                    *(_QWORD *)(a7 + (v139 >> 3)) = (((-1 << v136) + v135) << (v139 & 7)) | *(unsigned __int8 *)(a7 + (v139 >> 3));
                    v127 = v139 + v136;
                    *a6 = v139 + v136;
                    v128 = &__dst[4 * v136 + 112];
                  }
                }
                else
                {
                  v129 = v120 - 1;
                  v130 = (__clz(v129) ^ 0x1F) - 1;
                  v131 = (2 * v130) + (v129 >> v130) + 20;
                  v132 = *(unsigned __int8 *)(v208 + v131);
                  v133 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v131) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v134 = v133 + v132;
                  *a6 = v134;
                  *(_QWORD *)(a7 + (v134 >> 3)) = ((v129 - (v129 >> v130 << v130)) << (v134 & 7)) | *(unsigned __int8 *)(a7 + (v134 >> 3));
                  v127 = v134 + v130;
                  *a6 = v134 + v130;
                  v128 = &__dst[4 * v131];
                }
              }
              else
              {
                v124 = v120 + 19;
                v125 = *(unsigned __int8 *)(v208 + v120 + 19);
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v127 = v126 + v125;
                *a6 = v127;
                v128 = &__dst[4 * v124];
              }
              v24 += v123;
              ++*(_DWORD *)v128;
              v143 = (int)v122 + 3;
              v144 = __clz(v143) ^ 0x1F;
              v145 = v144 - 1;
              v146 = (v143 >> (v144 - 1)) & 1 | 2;
              v147 = ((2 * v144 - 4) & 0xFFFFFFFE | (v143 >> (v144 - 1)) & 1) + 80;
              v148 = *(unsigned __int8 *)(v208 + v147);
              result = *(unsigned __int8 *)(a7 + (v127 >> 3));
              *(_QWORD *)(a7 + (v127 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v147) << (v127 & 7)) | result;
              v149 = v127 + v148;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v143 - (v146 << v145)) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v145;
              ++*(_DWORD *)&__dst[4 * v147];
              if ((unint64_t)v24 >= v29)
                goto LABEL_96;
              v30 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 53) & 0x7FC)) = (_DWORD)v24 - a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 53) & 0x7FC)) = (_DWORD)v24 - a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 53) & 0x7FC)) = (_DWORD)v24 - a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 53) & 0x7FC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - a2;
              v114 = a2 + v152;
              if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v152))
                continue;
            }
            v22 = (uint64_t)v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - (_BYTE *)v202) > v52 || v201 < 0x3D5)
    {
      if (v52 > 0x5841)
      {
        v160 = *(unsigned __int8 *)(a1 + 831);
        v161 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v162 = v161 + v160;
        *a6 = v162;
        *(_QWORD *)(a7 + (v162 >> 3)) = ((v52 - 22594) << (v162 & 7)) | *(unsigned __int8 *)(a7 + (v162 >> 3));
        *a6 = v162 + 24;
        v56 = (char *)(a1 + 1404);
      }
      else
      {
        v157 = *(unsigned __int8 *)(a1 + 830);
        v158 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v159 = v158 + v157;
        *a6 = v159;
        *(_QWORD *)(a7 + (v159 >> 3)) = ((v52 - 6210) << (v159 & 7)) | *(unsigned __int8 *)(a7 + (v159 >> 3));
        *a6 = v159 + 14;
        v56 = (char *)(a1 + 1400);
      }
      goto LABEL_41;
    }
    result = (uint64_t)sub_2367AE120(v202, v22, v203, a6, a7);
    v164 = v213 + v205 - v22;
LABEL_120:
    if (v164)
    {
      v213 = v164;
      if (v164 >= 0x18000)
        v186 = 98304;
      else
        v186 = v164;
      v204 = *a6;
      sub_2367AE1B8(v186, 0, a6, a7);
      v187 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v187 + 13;
      v201 = sub_2367AE260(a1, v22, v186, (_BYTE *)a1, v12, a6, a7);
      sub_2367AE590(a1, a6, a7);
      v23 = v186;
      v14 = v204;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return (uint64_t)sub_2367AE590(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

uint64_t sub_2367AAA60(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int i;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v201;
  const void *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *__dst;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;

  __dst = (char *)(a1 + 1152);
  v12 = a1 + 256;
  v213 = a3;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  sub_2367AE1B8(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v211 = v13;
  v201 = sub_2367AE260(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v207 = a1 + 896;
  v208 = a1 + 768;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v211;
  while (2)
  {
    v202 = (const void *)v22;
    v203 = v14;
    v206 = v14 + 3;
    v24 = (unsigned __int8 *)v22;
    v210 = v23;
    v212 = v23;
    while (1)
    {
      result = (uint64_t)memcpy(v21, &unk_2368D6CC0, 0x200uLL);
      v26 = v212;
      v27 = v22 + v212;
      if (v212 >= 0x10)
        break;
      v32 = a1 + 768;
      v31 = __dst;
      v163 = v213;
      v33 = a1 + 896;
LABEL_97:
      v164 = v163 - v26;
      if (v164 >= 0x10000)
        v165 = 0x10000;
      else
        v165 = v164;
      if (!v164)
        goto LABEL_106;
      v210 += v165;
      if (v210 > 0x100000)
        goto LABEL_106;
      v212 = v165;
      v213 = v164;
      v22 = v27;
      result = sub_2367AE410(a1, v27, v165, a1);
      if (!(_DWORD)result)
      {
        v32 = a1 + 768;
        v31 = __dst;
        v164 = v213;
        v33 = a1 + 896;
        v27 = v22;
LABEL_106:
        if ((unint64_t)v24 < v27)
        {
          v166 = v27 - (_QWORD)v24;
          if ((v27 - (unint64_t)v24) >> 1 > 0xC20)
          {
            result = (uint64_t)v202;
            if (50 * (v24 - (_BYTE *)v202) <= v166 && v201 >= 0x3D5)
            {
              v188 = v27;
              v189 = v164;
              result = (uint64_t)sub_2367AE120(v202, v27, v203, a6, a7);
              v164 = v189;
              v22 = v188;
              goto LABEL_120;
            }
            if (v166 > 0x5841)
            {
              v195 = *(unsigned __int8 *)(a1 + 831);
              v196 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v197 = v196 + v195;
              *a6 = v197;
              *(_QWORD *)(a7 + (v197 >> 3)) = ((v166 - 22594) << (v197 & 7)) | *(unsigned __int8 *)(a7 + (v197 >> 3));
              v193 = v197 + 24;
              v194 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v190 = *(unsigned __int8 *)(a1 + 830);
              v191 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v192 = v191 + v190;
              *a6 = v192;
              *(_QWORD *)(a7 + (v192 >> 3)) = ((v166 - 6210) << (v192 & 7)) | *(unsigned __int8 *)(a7 + (v192 >> 3));
              v193 = v192 + 14;
              v194 = (_DWORD *)(a1 + 1400);
            }
            ++*v194;
            *a6 = v193;
            do
            {
              v198 = *v24++;
              v199 = *(unsigned __int8 *)(a1 + v198);
              *(_QWORD *)(a7 + (v193 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v198) << (v193 & 7)) | *(unsigned __int8 *)(a7 + (v193 >> 3));
              v193 += v199;
              *a6 = v193;
              --v166;
            }
            while (v166);
          }
          else
          {
            if (v166 > 5)
            {
              if (v166 > 0x81)
              {
                if (v166 > 0x841)
                {
                  v180 = *(unsigned __int8 *)(a1 + 829);
                  v181 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v182 = v181 + v180;
                  *a6 = v182;
                  *(_QWORD *)(a7 + (v182 >> 3)) = ((v166 - 2114) << (v182 & 7)) | *(unsigned __int8 *)(a7 + (v182 >> 3));
                  *a6 = v182 + 12;
                  v169 = (char *)(a1 + 1396);
                }
                else
                {
                  v176 = __clz(v166 - 66) ^ 0x1F;
                  v177 = *(unsigned __int8 *)(v32 + v176 + 50);
                  v178 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v176 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v179 = v178 + v177;
                  *a6 = v179;
                  *(_QWORD *)(a7 + (v179 >> 3)) = (((-1 << v176) + v166 - 66) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                  *a6 = v179 + v176;
                  v169 = &v31[4 * v176 + 200];
                }
              }
              else
              {
                v170 = (__clz(v166 - 2) ^ 0x1F) - 1;
                v171 = (v166 - 2) >> v170;
                v172 = (2 * v170) + v171 + 42;
                v173 = *(unsigned __int8 *)(v32 + v172);
                v174 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * v172) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v175 = v174 + v173;
                *a6 = v175;
                *(_QWORD *)(a7 + (v175 >> 3)) = ((v166 - 2 - (v171 << v170)) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                *a6 = v175 + v170;
                v169 = &v31[4 * v172];
              }
            }
            else
            {
              v167 = *(unsigned __int8 *)(v32 + v166 + 40);
              v168 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v166 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v168 + v167;
              v169 = &v31[4 * v166 + 160];
            }
            ++*(_DWORD *)v169;
            if ((unsigned __int8 *)v27 != v24)
            {
              v183 = *a6;
              if (v166 <= 1)
                v166 = 1;
              do
              {
                v184 = *v24++;
                v185 = *(unsigned __int8 *)(a1 + v184);
                *(_QWORD *)(a7 + (v183 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v184) << (v183 & 7)) | *(unsigned __int8 *)(a7 + (v183 >> 3));
                v183 += v185;
                *a6 = v183;
                --v166;
              }
              while (v166);
            }
          }
        }
        v22 = v27;
        goto LABEL_120;
      }
      sub_2367AE530((v210 - 1), v206, a7);
      v21 = __dst;
    }
    v28 = v212 - 5;
    if (v212 - 5 >= v213 - 16)
      v28 = v213 - 16;
    v29 = v22 + v28;
    v30 = -1;
    v205 = v22;
    v32 = a1 + 768;
    v31 = __dst;
    v33 = a1 + 896;
    v34 = (char *)(a1 + 1408);
    v35 = v22 + v212;
LABEL_14:
    while (2)
    {
      v37 = *(_QWORD *)++v22;
      v36 = v37;
      for (i = 32; ; ++i)
      {
        v39 = (uint64_t *)(v22 + (i >> 5));
        if ((unint64_t)v39 > v29)
          goto LABEL_96;
        v40 = (unint64_t)(0x1E35A7BD000000 * v36) >> 53;
        v36 = *v39;
        v41 = v22 - v30;
        if (*(_DWORD *)v22 == *(_DWORD *)v41
          && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4)
          && v30 >= 1)
        {
          break;
        }
        v41 = a2 + *(int *)(a5 + 4 * v40);
        *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v41 && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4))
          goto LABEL_22;
LABEL_26:
        v22 = (uint64_t)v39;
      }
      *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
LABEL_22:
      v43 = v22 - v41;
      if (v22 - v41 > 262128)
        goto LABEL_26;
      v44 = v41 + 5;
      v45 = (unsigned __int8 *)(v22 + 5);
      v46 = v27 - v22 - 5;
      if (v46 < 8)
      {
        v49 = 0;
LABEL_86:
        v155 = v46 & 7;
        if (v155)
        {
          v156 = v49 | v155;
          while (*(unsigned __int8 *)(v44 + v49) == *v45)
          {
            ++v45;
            ++v49;
            if (!--v155)
            {
              v49 = v156;
              break;
            }
          }
        }
      }
      else
      {
        v47 = 0;
        v48 = v46 >> 3;
        v49 = v46 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v50 = *(_QWORD *)&v45[v47];
          v51 = *(_QWORD *)(v44 + v47);
          if (v50 != v51)
            break;
          v47 += 8;
          if (!--v48)
          {
            v45 += v46 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_86;
          }
        }
        v49 = v47 + (__clz(__rbit64(v51 ^ v50)) >> 3);
      }
      v52 = v22 - (_QWORD)v24;
      if ((unint64_t)(v22 - (_QWORD)v24) >> 1 <= 0xC20)
      {
        if (v52 > 5)
        {
          if (v52 > 0x81)
          {
            if (v52 > 0x841)
            {
              v67 = *(unsigned __int8 *)(a1 + 829);
              v68 = *a6;
              result = *a6 & 7;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v69 = v68 + v67;
              *a6 = v69;
              *(_QWORD *)(a7 + (v69 >> 3)) = ((v52 - 2114) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
              *a6 = v69 + 12;
              v56 = (char *)(a1 + 1396);
            }
            else
            {
              v63 = __clz(v52 - 66) ^ 0x1F;
              v64 = *(unsigned __int8 *)(v208 + v63 + 50);
              v65 = *a6;
              v27 = v35;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v63 + 50)) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v66 = v65 + v64;
              *a6 = v66;
              result = *(unsigned __int8 *)(a7 + (v66 >> 3));
              *(_QWORD *)(a7 + (v66 >> 3)) = (((-1 << v63) + v52 - 66) << (v66 & 7)) | result;
              *a6 = v66 + v63;
              v56 = &__dst[4 * v63 + 200];
            }
          }
          else
          {
            v57 = (__clz(v52 - 2) ^ 0x1F) - 1;
            v58 = (v52 - 2) >> v57;
            v59 = (2 * v57) + v58 + 42;
            v60 = *(unsigned __int8 *)(v208 + v59);
            v61 = *a6;
            v34 = (char *)(a1 + 1408);
            v27 = v35;
            *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v59) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v62 = v61 + v60;
            *a6 = v62;
            result = *(unsigned __int8 *)(a7 + (v62 >> 3));
            *(_QWORD *)(a7 + (v62 >> 3)) = ((v52 - 2 - (v58 << v57)) << (v62 & 7)) | result;
            *a6 = v62 + v57;
            v56 = &__dst[4 * v59];
          }
        }
        else
        {
          v53 = *(unsigned __int8 *)(v208 + v52 + 40);
          v54 = *a6;
          v55 = *a6 >> 3;
          result = *(unsigned __int8 *)(a7 + v55);
          *(_QWORD *)(a7 + v55) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v52 + 40)) << (*(_BYTE *)a6 & 7)) | result;
          *a6 = v54 + v53;
          v56 = &__dst[4 * v52 + 160];
        }
LABEL_41:
        ++*(_DWORD *)v56;
        if ((unsigned __int8 *)v22 != v24)
        {
          v70 = *a6;
          if (v52 <= 1)
            v52 = 1;
          do
          {
            v71 = *v24++;
            v72 = *(unsigned __int8 *)(a1 + v71);
            result = v70 & 7;
            *(_QWORD *)(a7 + (v70 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v71) << (v70 & 7)) | *(unsigned __int8 *)(a7 + (v70 >> 3));
            v70 += v72;
            *a6 = v70;
            --v52;
          }
          while (v52);
        }
        if (v30 == v43)
        {
          v73 = *(unsigned __int8 *)(a1 + 832);
          v74 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v75 = v74 + v73;
          v76 = v34;
        }
        else
        {
          v77 = v43 + 3;
          v78 = __clz(v77) ^ 0x1F;
          v79 = v78 - 1;
          v80 = (v77 >> (v78 - 1)) & 1 | 2;
          v81 = ((2 * v78 - 4) & 0xFFFFFFFE | (v77 >> (v78 - 1)) & 1) + 80;
          v82 = *(unsigned __int8 *)(v208 + v81);
          v83 = *a6;
          result = *a6 >> 3;
          *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v81) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
          v84 = v83 + v82;
          *a6 = v84;
          *(_QWORD *)(a7 + (v84 >> 3)) = ((v77 - (v80 << v79)) << (v84 & 7)) | *(unsigned __int8 *)(a7 + (v84 >> 3));
          v75 = v84 + v79;
          v76 = &__dst[4 * v81];
          v30 = v43;
        }
        v85 = v49 + 5;
        ++*(_DWORD *)v76;
        *a6 = v75;
        if (v49 + 5 > 0xB)
        {
          if (v85 > 0x47)
          {
            if (v85 > 0x87)
            {
              if (v85 > 0x847)
              {
                v106 = *(unsigned __int8 *)(a1 + 807);
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
                v107 = v75 + v106;
                *a6 = v107;
                v108 = v107 & 7;
                *(_QWORD *)(a7 + (v107 >> 3)) = ((v49 - 2115) << (v107 & 7)) | *(unsigned __int8 *)(a7 + (v107 >> 3));
                v109 = v107 + 24;
                *a6 = v107 + 24;
                v110 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v109 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v108) | *(unsigned __int8 *)(a7 + (v109 >> 3));
                *a6 = v109 + v110;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v100 = v49 - 67;
                v101 = __clz(v100) ^ 0x1F;
                v102 = *(unsigned __int8 *)(v208 + v101 + 28);
                result = *(unsigned __int8 *)(a7 + (v75 >> 3));
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v101 + 28)) << (v75 & 7)) | result;
                v103 = v75 + v102;
                *a6 = v103;
                *(_QWORD *)(a7 + (v103 >> 3)) = (((-1 << v101) + v100) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                v104 = v103 + v101;
                *a6 = v103 + v101;
                v105 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v104 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v104 & 7)) | *(unsigned __int8 *)(a7 + (v104 >> 3));
                *a6 = v104 + v105;
                ++*(_DWORD *)&__dst[4 * v101 + 112];
              }
            }
            else
            {
              v94 = v49 - 3;
              v95 = (v94 >> 5) + 30;
              v96 = *(unsigned __int8 *)(v208 + v95);
              result = v75 & 7;
              *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v95) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
              v97 = v75 + v96;
              *a6 = v97;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((v94 & 0x1F) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              v98 = v97 + 5;
              *a6 = v97 + 5;
              v99 = *(unsigned __int8 *)(a1 + 832);
              *(_QWORD *)(a7 + (v98 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v98 & 7)) | *(unsigned __int8 *)(a7 + (v98 >> 3));
              *a6 = v98 + v99;
              ++*(_DWORD *)&__dst[4 * v95];
            }
            v88 = v34;
          }
          else
          {
            v89 = v49 - 3;
            v90 = (__clz(v89) ^ 0x1F) - 1;
            v91 = (2 * v90) + (v89 >> v90) + 4;
            v92 = *(unsigned __int8 *)(v208 + v91);
            result = v75 >> 3;
            *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v91) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
            v93 = v75 + v92;
            *a6 = v93;
            *(_QWORD *)(a7 + (v93 >> 3)) = ((v89 - (v89 >> v90 << v90)) << (v93 & 7)) | *(unsigned __int8 *)(a7 + (v93 >> 3));
            *a6 = v93 + v90;
            v88 = &__dst[4 * v91];
          }
        }
        else
        {
          v86 = v49 + 1;
          v87 = *(unsigned __int8 *)(v208 + v86);
          *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v86) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
          *a6 = v75 + v87;
          v88 = &__dst[4 * v86];
        }
        v24 = (unsigned __int8 *)(v22 + v85);
        ++*(_DWORD *)v88;
        if (v22 + v85 >= v29)
        {
LABEL_96:
          v26 = v212;
          v163 = v213;
          goto LABEL_97;
        }
        v111 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v111) >> 51) & 0x1FFC)) = (_DWORD)v24 - a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 8)) >> 51) & 0x1FFC)) = (_DWORD)v24 - a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 16)) >> 51) & 0x1FFC)) = (_DWORD)v24 - a2 - 1;
        v112 = ((0x1E35A7BD000000 * (v111 >> 24)) >> 51) & 0x1FFC;
        v113 = *(int *)(a5 + v112);
        *(_DWORD *)(a5 + v112) = (_DWORD)v24 - a2;
        v114 = a2 + v113;
        v22 = (uint64_t)v24;
        if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v113))
        {
          while (1)
          {
            v22 = (uint64_t)v24;
            if (v24[4] != *(unsigned __int8 *)(v114 + 4))
              break;
            v115 = v114 + 5;
            v116 = v24 + 5;
            v117 = v27 - (_QWORD)v24 - 5;
            if (v117 < 8)
            {
              v120 = 0;
LABEL_79:
              v153 = v117 & 7;
              if (v153)
              {
                v154 = v120 | v153;
                while (*(unsigned __int8 *)(v115 + v120) == *v116)
                {
                  ++v116;
                  ++v120;
                  if (!--v153)
                  {
                    v120 = v154;
                    break;
                  }
                }
              }
            }
            else
            {
              v118 = 0;
              v119 = v117 >> 3;
              v120 = v117 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                result = *(_QWORD *)&v116[v118];
                v121 = *(_QWORD *)(v115 + v118);
                if (result != v121)
                  break;
                v118 += 8;
                if (!--v119)
                {
                  v116 += v117 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_79;
                }
              }
              v120 = v118 + (__clz(__rbit64(v121 ^ result)) >> 3);
            }
            v122 = (uint64_t)&v24[-v114];
            if (v122 <= 262128)
            {
              v123 = v120 + 5;
              if (v120 + 5 > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v140 = *(unsigned __int8 *)(a1 + 807);
                    v141 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v142 = v141 + v140;
                    *a6 = v142;
                    *(_QWORD *)(a7 + (v142 >> 3)) = ((v120 - 2113) << (v142 & 7)) | *(unsigned __int8 *)(a7 + (v142 >> 3));
                    v127 = v142 + 24;
                    *a6 = v142 + 24;
                    v128 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v135 = v120 - 65;
                    v136 = __clz(v135) ^ 0x1F;
                    v137 = *(unsigned __int8 *)(v208 + v136 + 28);
                    v138 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v136 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v139 = v138 + v137;
                    *a6 = v139;
                    *(_QWORD *)(a7 + (v139 >> 3)) = (((-1 << v136) + v135) << (v139 & 7)) | *(unsigned __int8 *)(a7 + (v139 >> 3));
                    v127 = v139 + v136;
                    *a6 = v139 + v136;
                    v128 = &__dst[4 * v136 + 112];
                  }
                }
                else
                {
                  v129 = v120 - 1;
                  v130 = (__clz(v129) ^ 0x1F) - 1;
                  v131 = (2 * v130) + (v129 >> v130) + 20;
                  v132 = *(unsigned __int8 *)(v208 + v131);
                  v133 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v131) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v134 = v133 + v132;
                  *a6 = v134;
                  *(_QWORD *)(a7 + (v134 >> 3)) = ((v129 - (v129 >> v130 << v130)) << (v134 & 7)) | *(unsigned __int8 *)(a7 + (v134 >> 3));
                  v127 = v134 + v130;
                  *a6 = v134 + v130;
                  v128 = &__dst[4 * v131];
                }
              }
              else
              {
                v124 = v120 + 19;
                v125 = *(unsigned __int8 *)(v208 + v120 + 19);
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v127 = v126 + v125;
                *a6 = v127;
                v128 = &__dst[4 * v124];
              }
              v24 += v123;
              ++*(_DWORD *)v128;
              v143 = (int)v122 + 3;
              v144 = __clz(v143) ^ 0x1F;
              v145 = v144 - 1;
              v146 = (v143 >> (v144 - 1)) & 1 | 2;
              v147 = ((2 * v144 - 4) & 0xFFFFFFFE | (v143 >> (v144 - 1)) & 1) + 80;
              v148 = *(unsigned __int8 *)(v208 + v147);
              result = *(unsigned __int8 *)(a7 + (v127 >> 3));
              *(_QWORD *)(a7 + (v127 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v147) << (v127 & 7)) | result;
              v149 = v127 + v148;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v143 - (v146 << v145)) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v145;
              ++*(_DWORD *)&__dst[4 * v147];
              if ((unint64_t)v24 >= v29)
                goto LABEL_96;
              v30 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 51) & 0x1FFC)) = (_DWORD)v24 - a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 51) & 0x1FFC)) = (_DWORD)v24 - a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 51) & 0x1FFC)) = (_DWORD)v24 - a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 51) & 0x1FFC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - a2;
              v114 = a2 + v152;
              if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v152))
                continue;
            }
            v22 = (uint64_t)v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - (_BYTE *)v202) > v52 || v201 < 0x3D5)
    {
      if (v52 > 0x5841)
      {
        v160 = *(unsigned __int8 *)(a1 + 831);
        v161 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v162 = v161 + v160;
        *a6 = v162;
        *(_QWORD *)(a7 + (v162 >> 3)) = ((v52 - 22594) << (v162 & 7)) | *(unsigned __int8 *)(a7 + (v162 >> 3));
        *a6 = v162 + 24;
        v56 = (char *)(a1 + 1404);
      }
      else
      {
        v157 = *(unsigned __int8 *)(a1 + 830);
        v158 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v159 = v158 + v157;
        *a6 = v159;
        *(_QWORD *)(a7 + (v159 >> 3)) = ((v52 - 6210) << (v159 & 7)) | *(unsigned __int8 *)(a7 + (v159 >> 3));
        *a6 = v159 + 14;
        v56 = (char *)(a1 + 1400);
      }
      goto LABEL_41;
    }
    result = (uint64_t)sub_2367AE120(v202, v22, v203, a6, a7);
    v164 = v213 + v205 - v22;
LABEL_120:
    if (v164)
    {
      v213 = v164;
      if (v164 >= 0x18000)
        v186 = 98304;
      else
        v186 = v164;
      v204 = *a6;
      sub_2367AE1B8(v186, 0, a6, a7);
      v187 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v187 + 13;
      v201 = sub_2367AE260(a1, v22, v186, (_BYTE *)a1, v12, a6, a7);
      sub_2367AE590(a1, a6, a7);
      v23 = v186;
      v14 = v204;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return (uint64_t)sub_2367AE590(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

uint64_t sub_2367ABCA0(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int i;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v201;
  const void *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *__dst;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;

  __dst = (char *)(a1 + 1152);
  v12 = a1 + 256;
  v213 = a3;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  sub_2367AE1B8(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v211 = v13;
  v201 = sub_2367AE260(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v207 = a1 + 896;
  v208 = a1 + 768;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v211;
  while (2)
  {
    v202 = (const void *)v22;
    v203 = v14;
    v206 = v14 + 3;
    v24 = (unsigned __int8 *)v22;
    v210 = v23;
    v212 = v23;
    while (1)
    {
      result = (uint64_t)memcpy(v21, &unk_2368D6CC0, 0x200uLL);
      v26 = v212;
      v27 = v22 + v212;
      if (v212 >= 0x10)
        break;
      v32 = a1 + 768;
      v31 = __dst;
      v163 = v213;
      v33 = a1 + 896;
LABEL_97:
      v164 = v163 - v26;
      if (v164 >= 0x10000)
        v165 = 0x10000;
      else
        v165 = v164;
      if (!v164)
        goto LABEL_106;
      v210 += v165;
      if (v210 > 0x100000)
        goto LABEL_106;
      v212 = v165;
      v213 = v164;
      v22 = v27;
      result = sub_2367AE410(a1, v27, v165, a1);
      if (!(_DWORD)result)
      {
        v32 = a1 + 768;
        v31 = __dst;
        v164 = v213;
        v33 = a1 + 896;
        v27 = v22;
LABEL_106:
        if ((unint64_t)v24 < v27)
        {
          v166 = v27 - (_QWORD)v24;
          if ((v27 - (unint64_t)v24) >> 1 > 0xC20)
          {
            result = (uint64_t)v202;
            if (50 * (v24 - (_BYTE *)v202) <= v166 && v201 >= 0x3D5)
            {
              v188 = v27;
              v189 = v164;
              result = (uint64_t)sub_2367AE120(v202, v27, v203, a6, a7);
              v164 = v189;
              v22 = v188;
              goto LABEL_120;
            }
            if (v166 > 0x5841)
            {
              v195 = *(unsigned __int8 *)(a1 + 831);
              v196 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v197 = v196 + v195;
              *a6 = v197;
              *(_QWORD *)(a7 + (v197 >> 3)) = ((v166 - 22594) << (v197 & 7)) | *(unsigned __int8 *)(a7 + (v197 >> 3));
              v193 = v197 + 24;
              v194 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v190 = *(unsigned __int8 *)(a1 + 830);
              v191 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v192 = v191 + v190;
              *a6 = v192;
              *(_QWORD *)(a7 + (v192 >> 3)) = ((v166 - 6210) << (v192 & 7)) | *(unsigned __int8 *)(a7 + (v192 >> 3));
              v193 = v192 + 14;
              v194 = (_DWORD *)(a1 + 1400);
            }
            ++*v194;
            *a6 = v193;
            do
            {
              v198 = *v24++;
              v199 = *(unsigned __int8 *)(a1 + v198);
              *(_QWORD *)(a7 + (v193 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v198) << (v193 & 7)) | *(unsigned __int8 *)(a7 + (v193 >> 3));
              v193 += v199;
              *a6 = v193;
              --v166;
            }
            while (v166);
          }
          else
          {
            if (v166 > 5)
            {
              if (v166 > 0x81)
              {
                if (v166 > 0x841)
                {
                  v180 = *(unsigned __int8 *)(a1 + 829);
                  v181 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v182 = v181 + v180;
                  *a6 = v182;
                  *(_QWORD *)(a7 + (v182 >> 3)) = ((v166 - 2114) << (v182 & 7)) | *(unsigned __int8 *)(a7 + (v182 >> 3));
                  *a6 = v182 + 12;
                  v169 = (char *)(a1 + 1396);
                }
                else
                {
                  v176 = __clz(v166 - 66) ^ 0x1F;
                  v177 = *(unsigned __int8 *)(v32 + v176 + 50);
                  v178 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v176 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v179 = v178 + v177;
                  *a6 = v179;
                  *(_QWORD *)(a7 + (v179 >> 3)) = (((-1 << v176) + v166 - 66) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                  *a6 = v179 + v176;
                  v169 = &v31[4 * v176 + 200];
                }
              }
              else
              {
                v170 = (__clz(v166 - 2) ^ 0x1F) - 1;
                v171 = (v166 - 2) >> v170;
                v172 = (2 * v170) + v171 + 42;
                v173 = *(unsigned __int8 *)(v32 + v172);
                v174 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * v172) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v175 = v174 + v173;
                *a6 = v175;
                *(_QWORD *)(a7 + (v175 >> 3)) = ((v166 - 2 - (v171 << v170)) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                *a6 = v175 + v170;
                v169 = &v31[4 * v172];
              }
            }
            else
            {
              v167 = *(unsigned __int8 *)(v32 + v166 + 40);
              v168 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v166 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v168 + v167;
              v169 = &v31[4 * v166 + 160];
            }
            ++*(_DWORD *)v169;
            if ((unsigned __int8 *)v27 != v24)
            {
              v183 = *a6;
              if (v166 <= 1)
                v166 = 1;
              do
              {
                v184 = *v24++;
                v185 = *(unsigned __int8 *)(a1 + v184);
                *(_QWORD *)(a7 + (v183 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v184) << (v183 & 7)) | *(unsigned __int8 *)(a7 + (v183 >> 3));
                v183 += v185;
                *a6 = v183;
                --v166;
              }
              while (v166);
            }
          }
        }
        v22 = v27;
        goto LABEL_120;
      }
      sub_2367AE530((v210 - 1), v206, a7);
      v21 = __dst;
    }
    v28 = v212 - 5;
    if (v212 - 5 >= v213 - 16)
      v28 = v213 - 16;
    v29 = v22 + v28;
    v30 = -1;
    v205 = v22;
    v32 = a1 + 768;
    v31 = __dst;
    v33 = a1 + 896;
    v34 = (char *)(a1 + 1408);
    v35 = v22 + v212;
LABEL_14:
    while (2)
    {
      v37 = *(_QWORD *)++v22;
      v36 = v37;
      for (i = 32; ; ++i)
      {
        v39 = (uint64_t *)(v22 + (i >> 5));
        if ((unint64_t)v39 > v29)
          goto LABEL_96;
        v40 = (unint64_t)(0x1E35A7BD000000 * v36) >> 51;
        v36 = *v39;
        v41 = v22 - v30;
        if (*(_DWORD *)v22 == *(_DWORD *)v41
          && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4)
          && v30 >= 1)
        {
          break;
        }
        v41 = a2 + *(int *)(a5 + 4 * v40);
        *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v41 && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4))
          goto LABEL_22;
LABEL_26:
        v22 = (uint64_t)v39;
      }
      *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
LABEL_22:
      v43 = v22 - v41;
      if (v22 - v41 > 262128)
        goto LABEL_26;
      v44 = v41 + 5;
      v45 = (unsigned __int8 *)(v22 + 5);
      v46 = v27 - v22 - 5;
      if (v46 < 8)
      {
        v49 = 0;
LABEL_86:
        v155 = v46 & 7;
        if (v155)
        {
          v156 = v49 | v155;
          while (*(unsigned __int8 *)(v44 + v49) == *v45)
          {
            ++v45;
            ++v49;
            if (!--v155)
            {
              v49 = v156;
              break;
            }
          }
        }
      }
      else
      {
        v47 = 0;
        v48 = v46 >> 3;
        v49 = v46 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v50 = *(_QWORD *)&v45[v47];
          v51 = *(_QWORD *)(v44 + v47);
          if (v50 != v51)
            break;
          v47 += 8;
          if (!--v48)
          {
            v45 += v46 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_86;
          }
        }
        v49 = v47 + (__clz(__rbit64(v51 ^ v50)) >> 3);
      }
      v52 = v22 - (_QWORD)v24;
      if ((unint64_t)(v22 - (_QWORD)v24) >> 1 <= 0xC20)
      {
        if (v52 > 5)
        {
          if (v52 > 0x81)
          {
            if (v52 > 0x841)
            {
              v67 = *(unsigned __int8 *)(a1 + 829);
              v68 = *a6;
              result = *a6 & 7;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v69 = v68 + v67;
              *a6 = v69;
              *(_QWORD *)(a7 + (v69 >> 3)) = ((v52 - 2114) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
              *a6 = v69 + 12;
              v56 = (char *)(a1 + 1396);
            }
            else
            {
              v63 = __clz(v52 - 66) ^ 0x1F;
              v64 = *(unsigned __int8 *)(v208 + v63 + 50);
              v65 = *a6;
              v27 = v35;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v63 + 50)) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v66 = v65 + v64;
              *a6 = v66;
              result = *(unsigned __int8 *)(a7 + (v66 >> 3));
              *(_QWORD *)(a7 + (v66 >> 3)) = (((-1 << v63) + v52 - 66) << (v66 & 7)) | result;
              *a6 = v66 + v63;
              v56 = &__dst[4 * v63 + 200];
            }
          }
          else
          {
            v57 = (__clz(v52 - 2) ^ 0x1F) - 1;
            v58 = (v52 - 2) >> v57;
            v59 = (2 * v57) + v58 + 42;
            v60 = *(unsigned __int8 *)(v208 + v59);
            v61 = *a6;
            v34 = (char *)(a1 + 1408);
            v27 = v35;
            *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v59) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v62 = v61 + v60;
            *a6 = v62;
            result = *(unsigned __int8 *)(a7 + (v62 >> 3));
            *(_QWORD *)(a7 + (v62 >> 3)) = ((v52 - 2 - (v58 << v57)) << (v62 & 7)) | result;
            *a6 = v62 + v57;
            v56 = &__dst[4 * v59];
          }
        }
        else
        {
          v53 = *(unsigned __int8 *)(v208 + v52 + 40);
          v54 = *a6;
          v55 = *a6 >> 3;
          result = *(unsigned __int8 *)(a7 + v55);
          *(_QWORD *)(a7 + v55) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v52 + 40)) << (*(_BYTE *)a6 & 7)) | result;
          *a6 = v54 + v53;
          v56 = &__dst[4 * v52 + 160];
        }
LABEL_41:
        ++*(_DWORD *)v56;
        if ((unsigned __int8 *)v22 != v24)
        {
          v70 = *a6;
          if (v52 <= 1)
            v52 = 1;
          do
          {
            v71 = *v24++;
            v72 = *(unsigned __int8 *)(a1 + v71);
            result = v70 & 7;
            *(_QWORD *)(a7 + (v70 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v71) << (v70 & 7)) | *(unsigned __int8 *)(a7 + (v70 >> 3));
            v70 += v72;
            *a6 = v70;
            --v52;
          }
          while (v52);
        }
        if (v30 == v43)
        {
          v73 = *(unsigned __int8 *)(a1 + 832);
          v74 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v75 = v74 + v73;
          v76 = v34;
        }
        else
        {
          v77 = v43 + 3;
          v78 = __clz(v77) ^ 0x1F;
          v79 = v78 - 1;
          v80 = (v77 >> (v78 - 1)) & 1 | 2;
          v81 = ((2 * v78 - 4) & 0xFFFFFFFE | (v77 >> (v78 - 1)) & 1) + 80;
          v82 = *(unsigned __int8 *)(v208 + v81);
          v83 = *a6;
          result = *a6 >> 3;
          *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v81) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
          v84 = v83 + v82;
          *a6 = v84;
          *(_QWORD *)(a7 + (v84 >> 3)) = ((v77 - (v80 << v79)) << (v84 & 7)) | *(unsigned __int8 *)(a7 + (v84 >> 3));
          v75 = v84 + v79;
          v76 = &__dst[4 * v81];
          v30 = v43;
        }
        v85 = v49 + 5;
        ++*(_DWORD *)v76;
        *a6 = v75;
        if (v49 + 5 > 0xB)
        {
          if (v85 > 0x47)
          {
            if (v85 > 0x87)
            {
              if (v85 > 0x847)
              {
                v106 = *(unsigned __int8 *)(a1 + 807);
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
                v107 = v75 + v106;
                *a6 = v107;
                v108 = v107 & 7;
                *(_QWORD *)(a7 + (v107 >> 3)) = ((v49 - 2115) << (v107 & 7)) | *(unsigned __int8 *)(a7 + (v107 >> 3));
                v109 = v107 + 24;
                *a6 = v107 + 24;
                v110 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v109 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v108) | *(unsigned __int8 *)(a7 + (v109 >> 3));
                *a6 = v109 + v110;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v100 = v49 - 67;
                v101 = __clz(v100) ^ 0x1F;
                v102 = *(unsigned __int8 *)(v208 + v101 + 28);
                result = *(unsigned __int8 *)(a7 + (v75 >> 3));
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v101 + 28)) << (v75 & 7)) | result;
                v103 = v75 + v102;
                *a6 = v103;
                *(_QWORD *)(a7 + (v103 >> 3)) = (((-1 << v101) + v100) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                v104 = v103 + v101;
                *a6 = v103 + v101;
                v105 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v104 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v104 & 7)) | *(unsigned __int8 *)(a7 + (v104 >> 3));
                *a6 = v104 + v105;
                ++*(_DWORD *)&__dst[4 * v101 + 112];
              }
            }
            else
            {
              v94 = v49 - 3;
              v95 = (v94 >> 5) + 30;
              v96 = *(unsigned __int8 *)(v208 + v95);
              result = v75 & 7;
              *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v95) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
              v97 = v75 + v96;
              *a6 = v97;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((v94 & 0x1F) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              v98 = v97 + 5;
              *a6 = v97 + 5;
              v99 = *(unsigned __int8 *)(a1 + 832);
              *(_QWORD *)(a7 + (v98 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v98 & 7)) | *(unsigned __int8 *)(a7 + (v98 >> 3));
              *a6 = v98 + v99;
              ++*(_DWORD *)&__dst[4 * v95];
            }
            v88 = v34;
          }
          else
          {
            v89 = v49 - 3;
            v90 = (__clz(v89) ^ 0x1F) - 1;
            v91 = (2 * v90) + (v89 >> v90) + 4;
            v92 = *(unsigned __int8 *)(v208 + v91);
            result = v75 >> 3;
            *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v91) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
            v93 = v75 + v92;
            *a6 = v93;
            *(_QWORD *)(a7 + (v93 >> 3)) = ((v89 - (v89 >> v90 << v90)) << (v93 & 7)) | *(unsigned __int8 *)(a7 + (v93 >> 3));
            *a6 = v93 + v90;
            v88 = &__dst[4 * v91];
          }
        }
        else
        {
          v86 = v49 + 1;
          v87 = *(unsigned __int8 *)(v208 + v86);
          *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v86) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
          *a6 = v75 + v87;
          v88 = &__dst[4 * v86];
        }
        v24 = (unsigned __int8 *)(v22 + v85);
        ++*(_DWORD *)v88;
        if (v22 + v85 >= v29)
        {
LABEL_96:
          v26 = v212;
          v163 = v213;
          goto LABEL_97;
        }
        v111 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v111) >> 49) & 0x7FFC)) = (_DWORD)v24 - a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 8)) >> 49) & 0x7FFC)) = (_DWORD)v24 - a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 16)) >> 49) & 0x7FFC)) = (_DWORD)v24 - a2 - 1;
        v112 = ((0x1E35A7BD000000 * (v111 >> 24)) >> 49) & 0x7FFC;
        v113 = *(int *)(a5 + v112);
        *(_DWORD *)(a5 + v112) = (_DWORD)v24 - a2;
        v114 = a2 + v113;
        v22 = (uint64_t)v24;
        if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v113))
        {
          while (1)
          {
            v22 = (uint64_t)v24;
            if (v24[4] != *(unsigned __int8 *)(v114 + 4))
              break;
            v115 = v114 + 5;
            v116 = v24 + 5;
            v117 = v27 - (_QWORD)v24 - 5;
            if (v117 < 8)
            {
              v120 = 0;
LABEL_79:
              v153 = v117 & 7;
              if (v153)
              {
                v154 = v120 | v153;
                while (*(unsigned __int8 *)(v115 + v120) == *v116)
                {
                  ++v116;
                  ++v120;
                  if (!--v153)
                  {
                    v120 = v154;
                    break;
                  }
                }
              }
            }
            else
            {
              v118 = 0;
              v119 = v117 >> 3;
              v120 = v117 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                result = *(_QWORD *)&v116[v118];
                v121 = *(_QWORD *)(v115 + v118);
                if (result != v121)
                  break;
                v118 += 8;
                if (!--v119)
                {
                  v116 += v117 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_79;
                }
              }
              v120 = v118 + (__clz(__rbit64(v121 ^ result)) >> 3);
            }
            v122 = (uint64_t)&v24[-v114];
            if (v122 <= 262128)
            {
              v123 = v120 + 5;
              if (v120 + 5 > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v140 = *(unsigned __int8 *)(a1 + 807);
                    v141 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v142 = v141 + v140;
                    *a6 = v142;
                    *(_QWORD *)(a7 + (v142 >> 3)) = ((v120 - 2113) << (v142 & 7)) | *(unsigned __int8 *)(a7 + (v142 >> 3));
                    v127 = v142 + 24;
                    *a6 = v142 + 24;
                    v128 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v135 = v120 - 65;
                    v136 = __clz(v135) ^ 0x1F;
                    v137 = *(unsigned __int8 *)(v208 + v136 + 28);
                    v138 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v136 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v139 = v138 + v137;
                    *a6 = v139;
                    *(_QWORD *)(a7 + (v139 >> 3)) = (((-1 << v136) + v135) << (v139 & 7)) | *(unsigned __int8 *)(a7 + (v139 >> 3));
                    v127 = v139 + v136;
                    *a6 = v139 + v136;
                    v128 = &__dst[4 * v136 + 112];
                  }
                }
                else
                {
                  v129 = v120 - 1;
                  v130 = (__clz(v129) ^ 0x1F) - 1;
                  v131 = (2 * v130) + (v129 >> v130) + 20;
                  v132 = *(unsigned __int8 *)(v208 + v131);
                  v133 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v131) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v134 = v133 + v132;
                  *a6 = v134;
                  *(_QWORD *)(a7 + (v134 >> 3)) = ((v129 - (v129 >> v130 << v130)) << (v134 & 7)) | *(unsigned __int8 *)(a7 + (v134 >> 3));
                  v127 = v134 + v130;
                  *a6 = v134 + v130;
                  v128 = &__dst[4 * v131];
                }
              }
              else
              {
                v124 = v120 + 19;
                v125 = *(unsigned __int8 *)(v208 + v120 + 19);
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v127 = v126 + v125;
                *a6 = v127;
                v128 = &__dst[4 * v124];
              }
              v24 += v123;
              ++*(_DWORD *)v128;
              v143 = (int)v122 + 3;
              v144 = __clz(v143) ^ 0x1F;
              v145 = v144 - 1;
              v146 = (v143 >> (v144 - 1)) & 1 | 2;
              v147 = ((2 * v144 - 4) & 0xFFFFFFFE | (v143 >> (v144 - 1)) & 1) + 80;
              v148 = *(unsigned __int8 *)(v208 + v147);
              result = *(unsigned __int8 *)(a7 + (v127 >> 3));
              *(_QWORD *)(a7 + (v127 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v147) << (v127 & 7)) | result;
              v149 = v127 + v148;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v143 - (v146 << v145)) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v145;
              ++*(_DWORD *)&__dst[4 * v147];
              if ((unint64_t)v24 >= v29)
                goto LABEL_96;
              v30 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 49) & 0x7FFC)) = (_DWORD)v24 - a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 49) & 0x7FFC)) = (_DWORD)v24 - a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 49) & 0x7FFC)) = (_DWORD)v24 - a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 49) & 0x7FFC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - a2;
              v114 = a2 + v152;
              if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v152))
                continue;
            }
            v22 = (uint64_t)v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - (_BYTE *)v202) > v52 || v201 < 0x3D5)
    {
      if (v52 > 0x5841)
      {
        v160 = *(unsigned __int8 *)(a1 + 831);
        v161 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v162 = v161 + v160;
        *a6 = v162;
        *(_QWORD *)(a7 + (v162 >> 3)) = ((v52 - 22594) << (v162 & 7)) | *(unsigned __int8 *)(a7 + (v162 >> 3));
        *a6 = v162 + 24;
        v56 = (char *)(a1 + 1404);
      }
      else
      {
        v157 = *(unsigned __int8 *)(a1 + 830);
        v158 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v159 = v158 + v157;
        *a6 = v159;
        *(_QWORD *)(a7 + (v159 >> 3)) = ((v52 - 6210) << (v159 & 7)) | *(unsigned __int8 *)(a7 + (v159 >> 3));
        *a6 = v159 + 14;
        v56 = (char *)(a1 + 1400);
      }
      goto LABEL_41;
    }
    result = (uint64_t)sub_2367AE120(v202, v22, v203, a6, a7);
    v164 = v213 + v205 - v22;
LABEL_120:
    if (v164)
    {
      v213 = v164;
      if (v164 >= 0x18000)
        v186 = 98304;
      else
        v186 = v164;
      v204 = *a6;
      sub_2367AE1B8(v186, 0, a6, a7);
      v187 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v187 + 13;
      v201 = sub_2367AE260(a1, v22, v186, (_BYTE *)a1, v12, a6, a7);
      sub_2367AE590(a1, a6, a7);
      v23 = v186;
      v14 = v204;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return (uint64_t)sub_2367AE590(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

uint64_t sub_2367ACEE0(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int i;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v201;
  const void *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *__dst;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;

  __dst = (char *)(a1 + 1152);
  v12 = a1 + 256;
  v213 = a3;
  if (a3 >= 0x18000)
    v13 = 98304;
  else
    v13 = a3;
  v14 = *a6;
  sub_2367AE1B8(v13, 0, a6, a7);
  v15 = *a6;
  *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
  *a6 = v15 + 13;
  v211 = v13;
  v201 = sub_2367AE260(a1, a2, v13, (_BYTE *)a1, v12, a6, a7);
  v16 = *(_QWORD *)(a1 + 2176);
  v17 = *a6;
  if (v16 >= 8)
  {
    v18 = 0;
    do
    {
      *(_QWORD *)(a7 + ((v17 + v18) >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v18 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + ((v17 + v18) >> 3));
      *a6 = v17 + v18 + 8;
      v19 = v18 + 8;
      v16 = *(_QWORD *)(a1 + 2176);
      v20 = v18 + 15;
      v18 += 8;
    }
    while (v20 < v16);
    v17 += v19;
  }
  v21 = __dst;
  v207 = a1 + 896;
  v208 = a1 + 768;
  *(_QWORD *)(a7 + (v17 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a1 + (v16 >> 3) + 1664) << (v17 & 7)) | *(unsigned __int8 *)(a7 + (v17 >> 3));
  *a6 = v17 + (v16 & 7);
  v22 = a2;
  v23 = v211;
  while (2)
  {
    v202 = (const void *)v22;
    v203 = v14;
    v206 = v14 + 3;
    v24 = (unsigned __int8 *)v22;
    v210 = v23;
    v212 = v23;
    while (1)
    {
      result = (uint64_t)memcpy(v21, &unk_2368D6CC0, 0x200uLL);
      v26 = v212;
      v27 = v22 + v212;
      if (v212 >= 0x10)
        break;
      v32 = a1 + 768;
      v31 = __dst;
      v163 = v213;
      v33 = a1 + 896;
LABEL_97:
      v164 = v163 - v26;
      if (v164 >= 0x10000)
        v165 = 0x10000;
      else
        v165 = v164;
      if (!v164)
        goto LABEL_106;
      v210 += v165;
      if (v210 > 0x100000)
        goto LABEL_106;
      v212 = v165;
      v213 = v164;
      v22 = v27;
      result = sub_2367AE410(a1, v27, v165, a1);
      if (!(_DWORD)result)
      {
        v32 = a1 + 768;
        v31 = __dst;
        v164 = v213;
        v33 = a1 + 896;
        v27 = v22;
LABEL_106:
        if ((unint64_t)v24 < v27)
        {
          v166 = v27 - (_QWORD)v24;
          if ((v27 - (unint64_t)v24) >> 1 > 0xC20)
          {
            result = (uint64_t)v202;
            if (50 * (v24 - (_BYTE *)v202) <= v166 && v201 >= 0x3D5)
            {
              v188 = v27;
              v189 = v164;
              result = (uint64_t)sub_2367AE120(v202, v27, v203, a6, a7);
              v164 = v189;
              v22 = v188;
              goto LABEL_120;
            }
            if (v166 > 0x5841)
            {
              v195 = *(unsigned __int8 *)(a1 + 831);
              v196 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v197 = v196 + v195;
              *a6 = v197;
              *(_QWORD *)(a7 + (v197 >> 3)) = ((v166 - 22594) << (v197 & 7)) | *(unsigned __int8 *)(a7 + (v197 >> 3));
              v193 = v197 + 24;
              v194 = (_DWORD *)(a1 + 1404);
            }
            else
            {
              v190 = *(unsigned __int8 *)(a1 + 830);
              v191 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v192 = v191 + v190;
              *a6 = v192;
              *(_QWORD *)(a7 + (v192 >> 3)) = ((v166 - 6210) << (v192 & 7)) | *(unsigned __int8 *)(a7 + (v192 >> 3));
              v193 = v192 + 14;
              v194 = (_DWORD *)(a1 + 1400);
            }
            ++*v194;
            *a6 = v193;
            do
            {
              v198 = *v24++;
              v199 = *(unsigned __int8 *)(a1 + v198);
              *(_QWORD *)(a7 + (v193 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v198) << (v193 & 7)) | *(unsigned __int8 *)(a7 + (v193 >> 3));
              v193 += v199;
              *a6 = v193;
              --v166;
            }
            while (v166);
          }
          else
          {
            if (v166 > 5)
            {
              if (v166 > 0x81)
              {
                if (v166 > 0x841)
                {
                  v180 = *(unsigned __int8 *)(a1 + 829);
                  v181 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v182 = v181 + v180;
                  *a6 = v182;
                  *(_QWORD *)(a7 + (v182 >> 3)) = ((v166 - 2114) << (v182 & 7)) | *(unsigned __int8 *)(a7 + (v182 >> 3));
                  *a6 = v182 + 12;
                  v169 = (char *)(a1 + 1396);
                }
                else
                {
                  v176 = __clz(v166 - 66) ^ 0x1F;
                  v177 = *(unsigned __int8 *)(v32 + v176 + 50);
                  v178 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v176 + 50)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v179 = v178 + v177;
                  *a6 = v179;
                  *(_QWORD *)(a7 + (v179 >> 3)) = (((-1 << v176) + v166 - 66) << (v179 & 7)) | *(unsigned __int8 *)(a7 + (v179 >> 3));
                  *a6 = v179 + v176;
                  v169 = &v31[4 * v176 + 200];
                }
              }
              else
              {
                v170 = (__clz(v166 - 2) ^ 0x1F) - 1;
                v171 = (v166 - 2) >> v170;
                v172 = (2 * v170) + v171 + 42;
                v173 = *(unsigned __int8 *)(v32 + v172);
                v174 = *a6;
                result = *a6 & 7;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * v172) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v175 = v174 + v173;
                *a6 = v175;
                *(_QWORD *)(a7 + (v175 >> 3)) = ((v166 - 2 - (v171 << v170)) << (v175 & 7)) | *(unsigned __int8 *)(a7 + (v175 >> 3));
                *a6 = v175 + v170;
                v169 = &v31[4 * v172];
              }
            }
            else
            {
              v167 = *(unsigned __int8 *)(v32 + v166 + 40);
              v168 = *a6;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v33 + 2 * (v166 + 40)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              *a6 = v168 + v167;
              v169 = &v31[4 * v166 + 160];
            }
            ++*(_DWORD *)v169;
            if ((unsigned __int8 *)v27 != v24)
            {
              v183 = *a6;
              if (v166 <= 1)
                v166 = 1;
              do
              {
                v184 = *v24++;
                v185 = *(unsigned __int8 *)(a1 + v184);
                *(_QWORD *)(a7 + (v183 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v184) << (v183 & 7)) | *(unsigned __int8 *)(a7 + (v183 >> 3));
                v183 += v185;
                *a6 = v183;
                --v166;
              }
              while (v166);
            }
          }
        }
        v22 = v27;
        goto LABEL_120;
      }
      sub_2367AE530((v210 - 1), v206, a7);
      v21 = __dst;
    }
    v28 = v212 - 5;
    if (v212 - 5 >= v213 - 16)
      v28 = v213 - 16;
    v29 = v22 + v28;
    v30 = -1;
    v205 = v22;
    v32 = a1 + 768;
    v31 = __dst;
    v33 = a1 + 896;
    v34 = (char *)(a1 + 1408);
    v35 = v22 + v212;
LABEL_14:
    while (2)
    {
      v37 = *(_QWORD *)++v22;
      v36 = v37;
      for (i = 32; ; ++i)
      {
        v39 = (uint64_t *)(v22 + (i >> 5));
        if ((unint64_t)v39 > v29)
          goto LABEL_96;
        v40 = (unint64_t)(0x1E35A7BD000000 * v36) >> 49;
        v36 = *v39;
        v41 = v22 - v30;
        if (*(_DWORD *)v22 == *(_DWORD *)v41
          && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4)
          && v30 >= 1)
        {
          break;
        }
        v41 = a2 + *(int *)(a5 + 4 * v40);
        *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
        if (*(_DWORD *)v22 == *(_DWORD *)v41 && *(unsigned __int8 *)(v22 + 4) == *(unsigned __int8 *)(v41 + 4))
          goto LABEL_22;
LABEL_26:
        v22 = (uint64_t)v39;
      }
      *(_DWORD *)(a5 + 4 * v40) = v22 - a2;
LABEL_22:
      v43 = v22 - v41;
      if (v22 - v41 > 262128)
        goto LABEL_26;
      v44 = v41 + 5;
      v45 = (unsigned __int8 *)(v22 + 5);
      v46 = v27 - v22 - 5;
      if (v46 < 8)
      {
        v49 = 0;
LABEL_86:
        v155 = v46 & 7;
        if (v155)
        {
          v156 = v49 | v155;
          while (*(unsigned __int8 *)(v44 + v49) == *v45)
          {
            ++v45;
            ++v49;
            if (!--v155)
            {
              v49 = v156;
              break;
            }
          }
        }
      }
      else
      {
        v47 = 0;
        v48 = v46 >> 3;
        v49 = v46 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v50 = *(_QWORD *)&v45[v47];
          v51 = *(_QWORD *)(v44 + v47);
          if (v50 != v51)
            break;
          v47 += 8;
          if (!--v48)
          {
            v45 += v46 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_86;
          }
        }
        v49 = v47 + (__clz(__rbit64(v51 ^ v50)) >> 3);
      }
      v52 = v22 - (_QWORD)v24;
      if ((unint64_t)(v22 - (_QWORD)v24) >> 1 <= 0xC20)
      {
        if (v52 > 5)
        {
          if (v52 > 0x81)
          {
            if (v52 > 0x841)
            {
              v67 = *(unsigned __int8 *)(a1 + 829);
              v68 = *a6;
              result = *a6 & 7;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1018) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v69 = v68 + v67;
              *a6 = v69;
              *(_QWORD *)(a7 + (v69 >> 3)) = ((v52 - 2114) << (v69 & 7)) | *(unsigned __int8 *)(a7 + (v69 >> 3));
              *a6 = v69 + 12;
              v56 = (char *)(a1 + 1396);
            }
            else
            {
              v63 = __clz(v52 - 66) ^ 0x1F;
              v64 = *(unsigned __int8 *)(v208 + v63 + 50);
              v65 = *a6;
              v27 = v35;
              *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v63 + 50)) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
              v66 = v65 + v64;
              *a6 = v66;
              result = *(unsigned __int8 *)(a7 + (v66 >> 3));
              *(_QWORD *)(a7 + (v66 >> 3)) = (((-1 << v63) + v52 - 66) << (v66 & 7)) | result;
              *a6 = v66 + v63;
              v56 = &__dst[4 * v63 + 200];
            }
          }
          else
          {
            v57 = (__clz(v52 - 2) ^ 0x1F) - 1;
            v58 = (v52 - 2) >> v57;
            v59 = (2 * v57) + v58 + 42;
            v60 = *(unsigned __int8 *)(v208 + v59);
            v61 = *a6;
            v34 = (char *)(a1 + 1408);
            v27 = v35;
            *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v59) << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
            v62 = v61 + v60;
            *a6 = v62;
            result = *(unsigned __int8 *)(a7 + (v62 >> 3));
            *(_QWORD *)(a7 + (v62 >> 3)) = ((v52 - 2 - (v58 << v57)) << (v62 & 7)) | result;
            *a6 = v62 + v57;
            v56 = &__dst[4 * v59];
          }
        }
        else
        {
          v53 = *(unsigned __int8 *)(v208 + v52 + 40);
          v54 = *a6;
          v55 = *a6 >> 3;
          result = *(unsigned __int8 *)(a7 + v55);
          *(_QWORD *)(a7 + v55) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v52 + 40)) << (*(_BYTE *)a6 & 7)) | result;
          *a6 = v54 + v53;
          v56 = &__dst[4 * v52 + 160];
        }
LABEL_41:
        ++*(_DWORD *)v56;
        if ((unsigned __int8 *)v22 != v24)
        {
          v70 = *a6;
          if (v52 <= 1)
            v52 = 1;
          do
          {
            v71 = *v24++;
            v72 = *(unsigned __int8 *)(a1 + v71);
            result = v70 & 7;
            *(_QWORD *)(a7 + (v70 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v12 + 2 * v71) << (v70 & 7)) | *(unsigned __int8 *)(a7 + (v70 >> 3));
            v70 += v72;
            *a6 = v70;
            --v52;
          }
          while (v52);
        }
        if (v30 == v43)
        {
          v73 = *(unsigned __int8 *)(a1 + 832);
          v74 = *a6;
          *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
          v75 = v74 + v73;
          v76 = v34;
        }
        else
        {
          v77 = v43 + 3;
          v78 = __clz(v77) ^ 0x1F;
          v79 = v78 - 1;
          v80 = (v77 >> (v78 - 1)) & 1 | 2;
          v81 = ((2 * v78 - 4) & 0xFFFFFFFE | (v77 >> (v78 - 1)) & 1) + 80;
          v82 = *(unsigned __int8 *)(v208 + v81);
          v83 = *a6;
          result = *a6 >> 3;
          *(_QWORD *)(a7 + result) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v81) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + result);
          v84 = v83 + v82;
          *a6 = v84;
          *(_QWORD *)(a7 + (v84 >> 3)) = ((v77 - (v80 << v79)) << (v84 & 7)) | *(unsigned __int8 *)(a7 + (v84 >> 3));
          v75 = v84 + v79;
          v76 = &__dst[4 * v81];
          v30 = v43;
        }
        v85 = v49 + 5;
        ++*(_DWORD *)v76;
        *a6 = v75;
        if (v49 + 5 > 0xB)
        {
          if (v85 > 0x47)
          {
            if (v85 > 0x87)
            {
              if (v85 > 0x847)
              {
                v106 = *(unsigned __int8 *)(a1 + 807);
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
                v107 = v75 + v106;
                *a6 = v107;
                v108 = v107 & 7;
                *(_QWORD *)(a7 + (v107 >> 3)) = ((v49 - 2115) << (v107 & 7)) | *(unsigned __int8 *)(a7 + (v107 >> 3));
                v109 = v107 + 24;
                *a6 = v107 + 24;
                v110 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v109 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << v108) | *(unsigned __int8 *)(a7 + (v109 >> 3));
                *a6 = v109 + v110;
                ++*(_DWORD *)(a1 + 1308);
              }
              else
              {
                v100 = v49 - 67;
                v101 = __clz(v100) ^ 0x1F;
                v102 = *(unsigned __int8 *)(v208 + v101 + 28);
                result = *(unsigned __int8 *)(a7 + (v75 >> 3));
                *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v101 + 28)) << (v75 & 7)) | result;
                v103 = v75 + v102;
                *a6 = v103;
                *(_QWORD *)(a7 + (v103 >> 3)) = (((-1 << v101) + v100) << (v103 & 7)) | *(unsigned __int8 *)(a7 + (v103 >> 3));
                v104 = v103 + v101;
                *a6 = v103 + v101;
                v105 = *(unsigned __int8 *)(a1 + 832);
                *(_QWORD *)(a7 + (v104 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v104 & 7)) | *(unsigned __int8 *)(a7 + (v104 >> 3));
                *a6 = v104 + v105;
                ++*(_DWORD *)&__dst[4 * v101 + 112];
              }
            }
            else
            {
              v94 = v49 - 3;
              v95 = (v94 >> 5) + 30;
              v96 = *(unsigned __int8 *)(v208 + v95);
              result = v75 & 7;
              *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v95) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
              v97 = v75 + v96;
              *a6 = v97;
              *(_QWORD *)(a7 + (v97 >> 3)) = ((v94 & 0x1F) << (v97 & 7)) | *(unsigned __int8 *)(a7 + (v97 >> 3));
              v98 = v97 + 5;
              *a6 = v97 + 5;
              v99 = *(unsigned __int8 *)(a1 + 832);
              *(_QWORD *)(a7 + (v98 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1024) << (v98 & 7)) | *(unsigned __int8 *)(a7 + (v98 >> 3));
              *a6 = v98 + v99;
              ++*(_DWORD *)&__dst[4 * v95];
            }
            v88 = v34;
          }
          else
          {
            v89 = v49 - 3;
            v90 = (__clz(v89) ^ 0x1F) - 1;
            v91 = (2 * v90) + (v89 >> v90) + 4;
            v92 = *(unsigned __int8 *)(v208 + v91);
            result = v75 >> 3;
            *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v91) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
            v93 = v75 + v92;
            *a6 = v93;
            *(_QWORD *)(a7 + (v93 >> 3)) = ((v89 - (v89 >> v90 << v90)) << (v93 & 7)) | *(unsigned __int8 *)(a7 + (v93 >> 3));
            *a6 = v93 + v90;
            v88 = &__dst[4 * v91];
          }
        }
        else
        {
          v86 = v49 + 1;
          v87 = *(unsigned __int8 *)(v208 + v86);
          *(_QWORD *)(a7 + (v75 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v86) << (v75 & 7)) | *(unsigned __int8 *)(a7 + (v75 >> 3));
          *a6 = v75 + v87;
          v88 = &__dst[4 * v86];
        }
        v24 = (unsigned __int8 *)(v22 + v85);
        ++*(_DWORD *)v88;
        if (v22 + v85 >= v29)
        {
LABEL_96:
          v26 = v212;
          v163 = v213;
          goto LABEL_97;
        }
        v111 = *(_QWORD *)(v24 - 3);
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v111) >> 47) & 0x1FFFC)) = (_DWORD)v24 - a2 - 3;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 8)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - a2 - 2;
        *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v111 >> 16)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - a2 - 1;
        v112 = ((0x1E35A7BD000000 * (v111 >> 24)) >> 47) & 0x1FFFC;
        v113 = *(int *)(a5 + v112);
        *(_DWORD *)(a5 + v112) = (_DWORD)v24 - a2;
        v114 = a2 + v113;
        v22 = (uint64_t)v24;
        if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v113))
        {
          while (1)
          {
            v22 = (uint64_t)v24;
            if (v24[4] != *(unsigned __int8 *)(v114 + 4))
              break;
            v115 = v114 + 5;
            v116 = v24 + 5;
            v117 = v27 - (_QWORD)v24 - 5;
            if (v117 < 8)
            {
              v120 = 0;
LABEL_79:
              v153 = v117 & 7;
              if (v153)
              {
                v154 = v120 | v153;
                while (*(unsigned __int8 *)(v115 + v120) == *v116)
                {
                  ++v116;
                  ++v120;
                  if (!--v153)
                  {
                    v120 = v154;
                    break;
                  }
                }
              }
            }
            else
            {
              v118 = 0;
              v119 = v117 >> 3;
              v120 = v117 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                result = *(_QWORD *)&v116[v118];
                v121 = *(_QWORD *)(v115 + v118);
                if (result != v121)
                  break;
                v118 += 8;
                if (!--v119)
                {
                  v116 += v117 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_79;
                }
              }
              v120 = v118 + (__clz(__rbit64(v121 ^ result)) >> 3);
            }
            v122 = (uint64_t)&v24[-v114];
            if (v122 <= 262128)
            {
              v123 = v120 + 5;
              if (v120 + 5 > 9)
              {
                if (v123 > 0x85)
                {
                  if (v123 > 0x845)
                  {
                    v140 = *(unsigned __int8 *)(a1 + 807);
                    v141 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 974) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v142 = v141 + v140;
                    *a6 = v142;
                    *(_QWORD *)(a7 + (v142 >> 3)) = ((v120 - 2113) << (v142 & 7)) | *(unsigned __int8 *)(a7 + (v142 >> 3));
                    v127 = v142 + 24;
                    *a6 = v142 + 24;
                    v128 = (char *)(a1 + 1308);
                  }
                  else
                  {
                    v135 = v120 - 65;
                    v136 = __clz(v135) ^ 0x1F;
                    v137 = *(unsigned __int8 *)(v208 + v136 + 28);
                    v138 = *a6;
                    *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * (v136 + 28)) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                    v139 = v138 + v137;
                    *a6 = v139;
                    *(_QWORD *)(a7 + (v139 >> 3)) = (((-1 << v136) + v135) << (v139 & 7)) | *(unsigned __int8 *)(a7 + (v139 >> 3));
                    v127 = v139 + v136;
                    *a6 = v139 + v136;
                    v128 = &__dst[4 * v136 + 112];
                  }
                }
                else
                {
                  v129 = v120 - 1;
                  v130 = (__clz(v129) ^ 0x1F) - 1;
                  v131 = (2 * v130) + (v129 >> v130) + 20;
                  v132 = *(unsigned __int8 *)(v208 + v131);
                  v133 = *a6;
                  *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v131) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                  v134 = v133 + v132;
                  *a6 = v134;
                  *(_QWORD *)(a7 + (v134 >> 3)) = ((v129 - (v129 >> v130 << v130)) << (v134 & 7)) | *(unsigned __int8 *)(a7 + (v134 >> 3));
                  v127 = v134 + v130;
                  *a6 = v134 + v130;
                  v128 = &__dst[4 * v131];
                }
              }
              else
              {
                v124 = v120 + 19;
                v125 = *(unsigned __int8 *)(v208 + v120 + 19);
                v126 = *a6;
                *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v124) << (*(_BYTE *)a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
                v127 = v126 + v125;
                *a6 = v127;
                v128 = &__dst[4 * v124];
              }
              v24 += v123;
              ++*(_DWORD *)v128;
              v143 = (int)v122 + 3;
              v144 = __clz(v143) ^ 0x1F;
              v145 = v144 - 1;
              v146 = (v143 >> (v144 - 1)) & 1 | 2;
              v147 = ((2 * v144 - 4) & 0xFFFFFFFE | (v143 >> (v144 - 1)) & 1) + 80;
              v148 = *(unsigned __int8 *)(v208 + v147);
              result = *(unsigned __int8 *)(a7 + (v127 >> 3));
              *(_QWORD *)(a7 + (v127 >> 3)) = ((unint64_t)*(unsigned __int16 *)(v207 + 2 * v147) << (v127 & 7)) | result;
              v149 = v127 + v148;
              *a6 = v149;
              *(_QWORD *)(a7 + (v149 >> 3)) = ((v143 - (v146 << v145)) << (v149 & 7)) | *(unsigned __int8 *)(a7 + (v149 >> 3));
              *a6 = v149 + v145;
              ++*(_DWORD *)&__dst[4 * v147];
              if ((unint64_t)v24 >= v29)
                goto LABEL_96;
              v30 = v122;
              v150 = *(_QWORD *)(v24 - 3);
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * v150) >> 47) & 0x1FFFC)) = (_DWORD)v24 - a2 - 3;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 8)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - a2 - 2;
              *(_DWORD *)(a5 + (((0x1E35A7BD000000 * (v150 >> 16)) >> 47) & 0x1FFFC)) = (_DWORD)v24 - a2 - 1;
              v151 = ((0x1E35A7BD000000 * (v150 >> 24)) >> 47) & 0x1FFFC;
              v152 = *(int *)(a5 + v151);
              *(_DWORD *)(a5 + v151) = (_DWORD)v24 - a2;
              v114 = a2 + v152;
              if (*(_DWORD *)v24 == *(_DWORD *)(a2 + v152))
                continue;
            }
            v22 = (uint64_t)v24;
            goto LABEL_14;
          }
        }
        continue;
      }
      break;
    }
    if (50 * (v24 - (_BYTE *)v202) > v52 || v201 < 0x3D5)
    {
      if (v52 > 0x5841)
      {
        v160 = *(unsigned __int8 *)(a1 + 831);
        v161 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1022) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v162 = v161 + v160;
        *a6 = v162;
        *(_QWORD *)(a7 + (v162 >> 3)) = ((v52 - 22594) << (v162 & 7)) | *(unsigned __int8 *)(a7 + (v162 >> 3));
        *a6 = v162 + 24;
        v56 = (char *)(a1 + 1404);
      }
      else
      {
        v157 = *(unsigned __int8 *)(a1 + 830);
        v158 = *a6;
        result = *a6 & 7;
        *(_QWORD *)(a7 + (*a6 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 1020) << result) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
        v159 = v158 + v157;
        *a6 = v159;
        *(_QWORD *)(a7 + (v159 >> 3)) = ((v52 - 6210) << (v159 & 7)) | *(unsigned __int8 *)(a7 + (v159 >> 3));
        *a6 = v159 + 14;
        v56 = (char *)(a1 + 1400);
      }
      goto LABEL_41;
    }
    result = (uint64_t)sub_2367AE120(v202, v22, v203, a6, a7);
    v164 = v213 + v205 - v22;
LABEL_120:
    if (v164)
    {
      v213 = v164;
      if (v164 >= 0x18000)
        v186 = 98304;
      else
        v186 = v164;
      v204 = *a6;
      sub_2367AE1B8(v186, 0, a6, a7);
      v187 = *a6;
      *(_QWORD *)(a7 + (*a6 >> 3)) = *(unsigned __int8 *)(a7 + (*a6 >> 3));
      *a6 = v187 + 13;
      v201 = sub_2367AE260(a1, v22, v186, (_BYTE *)a1, v12, a6, a7);
      sub_2367AE590(a1, a6, a7);
      v23 = v186;
      v14 = v204;
      v21 = __dst;
      continue;
    }
    break;
  }
  if (!a4)
  {
    *(_BYTE *)(a1 + 1664) = 0;
    *(_QWORD *)(a1 + 2176) = 0;
    return (uint64_t)sub_2367AE590(a1, (unint64_t *)(a1 + 2176), a1 + 1664);
  }
  return result;
}

void *sub_2367AE120(const void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  size_t v8;
  unint64_t v9;
  void *result;
  unint64_t v11;

  v8 = a2 - (_QWORD)a1;
  *(_BYTE *)(a5 + (a3 >> 3)) &= ~(-1 << (a3 & 7));
  *a4 = a3;
  sub_2367AE1B8(a2 - (_QWORD)a1, 1u, a4, a5);
  v9 = (*(_DWORD *)a4 + 7) & 0xFFFFFFF8;
  *a4 = v9;
  result = memcpy((void *)(a5 + (v9 >> 3)), a1, v8);
  v11 = *a4 + 8 * v8;
  *a4 = v11;
  *(_BYTE *)(a5 + (v11 >> 3)) = 0;
  return result;
}

unint64_t sub_2367AE1B8(unint64_t result, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  *(_QWORD *)(a4 + (*a3 >> 3)) = *(unsigned __int8 *)(a4 + (*a3 >> 3));
  *a3 = v4 + 1;
  v5 = 5;
  if (result >= 0x100001)
    v5 = 6;
  if (result <= 0x10000)
    v5 = 4;
  *(_QWORD *)(a4 + ((v4 + 1) >> 3)) = ((v5 - 4) << ((v4 + 1) & 7)) | *(unsigned __int8 *)(a4 + ((v4 + 1) >> 3));
  v6 = v4 + 3;
  *a3 = v6;
  *(_QWORD *)(a4 + (v6 >> 3)) = ((result - 1) << (v6 & 7)) | *(unsigned __int8 *)(a4 + (v6 >> 3));
  v7 = v6 + 4 * v5;
  *a3 = v7;
  *(_QWORD *)(a4 + (v7 >> 3)) = ((unint64_t)a2 << (v7 & 7)) | *(unsigned __int8 *)(a4 + (v7 >> 3));
  *a3 = v7 + 1;
  return result;
}

unint64_t sub_2367AE260(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  unsigned __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t i;
  int v33;

  v14 = a1 + 6288;
  bzero((void *)(a1 + 6288), 0x400uLL);
  if (a3 >= 0x8000)
  {
    v23 = 0;
    do
    {
      ++*(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(a2 + v23));
      v23 += 29;
    }
    while (v23 < a3);
    v24 = 0;
    v25 = ((a3 + 28) * (unsigned __int128)0x1A7B9611A7B9611BuLL) >> 64;
    v17 = 0uLL;
    v18 = (int64x2_t)((v25 + ((a3 + 28 - v25) >> 1)) >> 4);
    v26.i64[0] = 0xB0000000BLL;
    v26.i64[1] = 0xB0000000BLL;
    do
    {
      v27 = *(int32x4_t *)(v14 + v24);
      v28 = (int32x4_t)vminq_u32((uint32x4_t)v27, v26);
      v29 = *(_OWORD *)&vaddq_s32(v28, v28) | __PAIR128__(0x100000001, 0x100000001);
      *(int32x4_t *)(v14 + v24) = vaddq_s32((int32x4_t)v29, v27);
      v17 = (int64x2_t)vaddw_high_u32((uint64x2_t)v17, (uint32x4_t)v29);
      v18 = (int64x2_t)vaddw_u32((uint64x2_t)v18, *(uint32x2_t *)&v29);
      v24 += 16;
    }
    while (v24 != 1024);
  }
  else
  {
    v15 = 0;
    do
      ++*(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(a2 + v15++));
    while (a3 != v15);
    v16 = 0;
    v17 = 0uLL;
    v18 = (int64x2_t)a3;
    v19.i64[0] = 0xB0000000BLL;
    v19.i64[1] = 0xB0000000BLL;
    do
    {
      v20 = *(int32x4_t *)(v14 + v16);
      v21 = (int32x4_t)vminq_u32((uint32x4_t)v20, v19);
      v22 = vaddq_s32(v21, v21);
      *(int32x4_t *)(v14 + v16) = vaddq_s32(v22, v20);
      v17 = (int64x2_t)vaddw_high_u32((uint64x2_t)v17, (uint32x4_t)v22);
      v18 = (int64x2_t)vaddw_u32((uint64x2_t)v18, *(uint32x2_t *)v22.i8);
      v16 += 16;
    }
    while (v16 != 1024);
  }
  v30 = vaddvq_s64(vaddq_s64(v18, v17));
  sub_2367A58C4(a1 + 2184, v14, v30, 8, a4, a5, a6, a7);
  v31 = 0;
  for (i = 0; i != 256; ++i)
  {
    v33 = *(_DWORD *)(v14 + 4 * i);
    if (v33)
      v31 += v33 * a4[i];
  }
  return 125 * v31 / v30;
}

BOOL sub_2367AE410(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;

  v8 = a1 + 6288;
  bzero((void *)(a1 + 6288), 0x400uLL);
  v9 = 0;
  if (!a3)
    goto LABEL_4;
  do
  {
    ++*(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(a2 + v9));
    v9 += 43;
  }
  while (v9 < a3);
  v9 = (a3 + 42) / 0x2B;
  if (a3 > 0x2AD5)
  {
    v11 = (double)v9;
    v10 = log2((double)v9);
  }
  else
  {
LABEL_4:
    v10 = dbl_236925608[v9];
    v11 = (double)v9;
  }
  v12 = 0;
  v13 = (v10 + 0.5) * v11 + 200.0;
  do
  {
    v14 = *(unsigned int *)(v8 + 4 * v12);
    v15 = (double)v14;
    LOBYTE(v4) = *(_BYTE *)(a4 + v12);
    if (v14 > 0xFF)
      v16 = log2((double)v14);
    else
      v16 = dbl_236925608[v14];
    v13 = v13 - v15 * (v16 + (double)v4);
    ++v12;
  }
  while (v12 != 256);
  return v13 >= 0.0;
}

uint64_t sub_2367AE530(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 20;
  do
  {
    v4 = 8 - (a2 & 7);
    if (v3 < v4)
      v4 = v3;
    *(_BYTE *)(a3 + (a2 >> 3)) = ((-1 << (v4 + (a2 & 7))) | ~(-1 << (a2 & 7))) & *(_BYTE *)(a3 + (a2 >> 3)) | ((result & ~(-1 << v4)) << (a2 & 7));
    result = result >> v4;
    a2 += v4;
    v3 -= v4;
  }
  while (v3);
  return result;
}

unsigned __int8 *sub_2367AE590(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v6 = a1 + 1152;
  v7 = a1 + 768;
  v8 = a1 + 7312;
  v9 = a1 + 8016;
  bzero((void *)(a1 + 7312), 0x2C0uLL);
  sub_2367B8860(v6, 64, 15, a1 + 2184, v7);
  sub_2367B8860(a1 + 1408, 64, 14, a1 + 2184, a1 + 832);
  *(_OWORD *)(a1 + 7312) = *(_OWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 7328) = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 7344) = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 7360) = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 7368) = *(_QWORD *)(a1 + 824);
  sub_2367B8DE8((unsigned __int8 *)v8, 64, v9);
  v10 = *(_OWORD *)(a1 + 8032);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a1 + 8016);
  *(_OWORD *)(a1 + 912) = v10;
  v11 = *(_OWORD *)(a1 + 8080);
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a1 + 8048);
  *(_OWORD *)(a1 + 944) = v11;
  v12 = *(_OWORD *)(a1 + 8064);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a1 + 8112);
  *(_OWORD *)(a1 + 976) = v12;
  v13 = *(_OWORD *)(a1 + 8128);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a1 + 8096);
  *(_OWORD *)(a1 + 1008) = v13;
  sub_2367B8DE8((unsigned __int8 *)(a1 + 832), 64, a1 + 1024);
  v14 = 0;
  *(_QWORD *)(a1 + 7368) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_QWORD *)(a1 + 7312) = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 7376) = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 7440) = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 7504) = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 7696) = *(_QWORD *)(a1 + 800);
  v15 = (_BYTE *)(a1 + 7440);
  v16 = a1 + 808;
  *(_OWORD *)(v8 + 8) = 0u;
  do
  {
    *v15 = *(_BYTE *)(v16 + v14);
    v15[128] = *(_BYTE *)(v16 + v14 + 8);
    v15[320] = *(_BYTE *)(v16 + v14++ + 16);
    v15 += 8;
  }
  while (v14 != 8);
  sub_2367A5270(v8, 0x2C0uLL, a1 + 2184, a2, a3);
  return sub_2367A5270(a1 + 832, 0x40uLL, a1 + 2184, a2, a3);
}

unsigned int *sub_2367AE754(unsigned int *result, char *__src, unint64_t a3, int a4, unsigned __int8 *a5, unsigned __int8 *__dst, uint64_t a7, unsigned int a8, unint64_t *a9, uint64_t a10)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v13 = *a9;
  switch(__clz(a8) ^ 0x1F)
  {
    case 8u:
      result = sub_2367AE9F8(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 9u:
      result = sub_2367AF24C(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xAu:
      result = sub_2367AFAA0(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xBu:
      result = sub_2367B02F4(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xCu:
      result = sub_2367B0B48(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xDu:
      result = sub_2367B139C(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xEu:
      result = sub_2367B1BF0(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0xFu:
      result = sub_2367B2444(result, __src, a3, a5, __dst, a7, a9, a10);
      break;
    case 0x10u:
      result = sub_2367B2C98(result, __src, a3, a5, (char *)__dst, a7, a9, a10);
      break;
    case 0x11u:
      result = sub_2367B35AC(result, __src, a3, a5, (char *)__dst, a7, a9, a10);
      break;
    default:
      break;
  }
  if (*a9 - v13 > 8 * a3 + 31)
  {
    *(_BYTE *)(a10 + (v13 >> 3)) &= ~(-1 << (v13 & 7));
    *a9 = v13;
    sub_2367AE1B8(a3, 1u, a9, a10);
    v14 = (*(_DWORD *)a9 + 7) & 0xFFFFFFF8;
    *a9 = v14;
    result = (unsigned int *)memcpy((void *)(a10 + (v14 >> 3)), __src, a3);
    v15 = *a9 + 8 * a3;
    *a9 = v15;
    *(_BYTE *)(a10 + (v15 >> 3)) = 0;
  }
  if (a4)
  {
    v16 = *a9;
    *(_QWORD *)(a10 + (*a9 >> 3)) = (1 << (*a9 & 7)) | *(unsigned __int8 *)(a10 + (*a9 >> 3));
    *a9 = v16 + 1;
    *(_QWORD *)(a10 + ((v16 + 1) >> 3)) = (1 << ((v16 + 1) & 7)) | *(unsigned __int8 *)(a10 + ((v16 + 1) >> 3));
    *a9 = ((_DWORD)v16 + 9) & 0xFFFFFFF8;
  }
  return result;
}

unsigned int *sub_2367AE9F8(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 56;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                                 - (_DWORD)__src
                                                                                                 - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 54) & 0x3FC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 54) & 0x3FC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367AF24C(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 55;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                                 - (_DWORD)__src
                                                                                                 - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 53) & 0x7FC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 53) & 0x7FC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367AFAA0(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 54;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                                 - (_DWORD)__src
                                                                                                 - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 52) & 0xFFC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 52) & 0xFFC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367B02F4(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 53;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 51) & 0x1FFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 51) & 0x1FFC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367B0B48(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 52;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 50) & 0x3FFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 50) & 0x3FFC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367B139C(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 51;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 49) & 0x7FFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 49) & 0x7FFC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367B1BF0(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 50;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                              - (_DWORD)__src
                                                                                              - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 48) & 0xFFFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 48) & 0xFFFC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367B2444(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int i;
  char *v24;
  unint64_t v25;
  char *v26;
  int v28;
  _DWORD *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;

  v93 = result;
  if (a3)
  {
    v9 = __dst;
    v99 = __src + 4;
    v11 = __src;
    while (1)
    {
      v12 = a3 >= 0x20000 ? 0x20000 : a3;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = v9;
      v16 = v11;
      v96 = a3;
      v97 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_84:
      if (v16 >= v13)
      {
        v78 = v93;
      }
      else
      {
        v75 = v11;
        v76 = (_DWORD)v13 - (_DWORD)v16;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v79 = (v76 << 8) - 1589738;
          if (v76 > 0x5841)
            v79 = (v76 << 8) - 5784041;
          if (v76 >> 1 <= 0xC20)
            v77 = (v76 << 8) - 541163;
          else
            v77 = v79;
          v80 = __clz(v76 - 66) ^ 0x1F;
          if (v76 <= 0x841)
            v77 = (v80 | (((-1 << v80) + v76 - 66) << 8)) + 10;
          v81 = (__clz(v76 - 2) ^ 0x1F) - 1;
          if (v76 <= 0x81)
            v77 = (((v76 - 2) >> v81) + 2 * v81 + 2) | ((v76 - 2 - ((v76 - 2) >> v81 << v81)) << 8);
        }
        else
        {
          v77 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v77;
        v82 = v15;
        memcpy(v15, v16, v76);
        v15 = &v82[v76];
        v78 = v93;
        v11 = v75;
      }
      v83 = v15 - v9;
      v84 = (uint64_t)v78;
      v85 = v11;
      if (sub_2367B3EC0(v78, (uint64_t)v11, v12, v15 - v9))
      {
        v102 = ((char *)v14 - (char *)a4) >> 2;
        sub_2367AE1B8(v12, 0, a7, a8);
        v86 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v86 + 13;
        v87 = v9;
        result = (unsigned int *)sub_2367B4024(v84, v9, v83, a4, v102, a7, a8);
      }
      else
      {
        v87 = v9;
        sub_2367AE1B8(v12, 1u, a7, a8);
        v88 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v88;
        result = (unsigned int *)memcpy((void *)(a8 + (v88 >> 3)), v85, v12);
        v89 = *a7 + 8 * v12;
        *a7 = v89;
        *(_BYTE *)(a8 + (v89 >> 3)) = 0;
      }
      v11 = v97;
      a3 = v96 - v12;
      v9 = v87;
      if (v96 == v12)
        return result;
    }
    v94 = v11;
    v95 = v12;
    v17 = v12 - 4;
    if (v12 - 4 >= a3 - 16)
      v17 = a3 - 16;
    v18 = &v11[v17];
    v19 = v13 - 4;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = v9;
    v16 = v11;
    v100 = v13 - 4;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = (char *)v22 + (i >> 5);
      if (v24 > v18)
      {
LABEL_83:
        v9 = __dst;
        v11 = v94;
        v12 = v95;
        v13 = v97;
        goto LABEL_84;
      }
      v25 = (unint64_t)(0x1E35A7BD00000000 * v21) >> 49;
      v21 = *(_QWORD *)v24;
      v26 = (char *)v22 - v20;
      if (*v22 != *(_DWORD *)v26 || v20 < 1)
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
        if (*v22 != *(_DWORD *)v26)
          goto LABEL_19;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v22 - (_DWORD)__src;
      }
      v28 = (_DWORD)v22 - (_DWORD)v26;
      if ((char *)v22 - v26 < 262129)
      {
        v29 = v26 + 4;
        v30 = (unsigned __int8 *)(v22 + 1);
        v31 = v19 - (char *)v22;
        if ((unint64_t)(v19 - (char *)v22) < 8)
        {
          v34 = 0;
LABEL_78:
          v73 = v31 & 7;
          if (v73)
          {
            v74 = v34 | v73;
            while (*((unsigned __int8 *)v29 + v34) == *v30)
            {
              ++v30;
              ++v34;
              if (!--v73)
              {
                v34 = v74;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32 * 4];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 2;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_78;
            }
          }
          v34 = v32 * 4 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v22 - (_DWORD)v16;
        v101 = v34;
        if (((_DWORD)v22 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v22 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v101 + 4;
        v14[1] = v43;
        if (v101 + 4 > 0xB)
        {
          if (v45 > 0x47)
          {
            if (v45 > 0x87)
            {
              if (v45 > 0x847)
              {
                v48 = ((_DWORD)v45 << 8) - 542657;
              }
              else
              {
                v49 = __clz(v101 - 68) ^ 0x1F;
                v48 = (v49 | (((-1 << v49) + (_DWORD)v101 - 68) << 8)) + 52;
              }
            }
            else
            {
              v48 = (((v101 - 4) >> 5) + 54) | ((((_BYTE)v101 - 4) & 0x1F) << 8);
            }
            v14[2] = v48;
            v14[3] = 64;
            v46 = 4;
          }
          else
          {
            v47 = (__clz(v101 - 4) ^ 0x1F) - 1;
            v14[2] = (((v101 - 4) >> v47) + 2 * v47 + 28) | (((_DWORD)v101 - 4 - ((v101 - 4) >> v47 << v47)) << 8);
            v46 = 3;
          }
        }
        else
        {
          v14[2] = v101 + 24;
          v46 = 3;
        }
        v16 = (char *)v22 + v45;
        v15 = &v42[v37];
        v14 += v46;
        if ((char *)v22 + v45 < v18)
        {
          v50 = *(_QWORD *)(v16 - 3);
          *(_DWORD *)(a6 + (((506832829 * ((v50 << 24) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
          *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v50) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                               - (_DWORD)__src
                                                                                               - 1;
          v51 = ((506832829 * ((v50 << 8) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC;
          v52 = *(int *)(a6 + v51);
          *(_DWORD *)(a6 + v51) = (_DWORD)v16 - (_DWORD)__src;
          v53 = v16 - &__src[v52];
          v19 = v100;
          if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
            goto LABEL_10;
          while (1)
          {
            v20 = v53;
            v54 = &v99[v52];
            v55 = (unsigned __int8 *)(v16 + 4);
            v56 = v100 - v16;
            if ((unint64_t)(v100 - v16) < 8)
            {
              v59 = 0;
LABEL_72:
              v71 = v56 & 7;
              if (v71)
              {
                v72 = v59 | v71;
                while (v54[v59] == *v55)
                {
                  ++v55;
                  ++v59;
                  if (!--v71)
                  {
                    v59 = v72;
                    break;
                  }
                }
              }
            }
            else
            {
              v57 = 0;
              v58 = v56 >> 3;
              v59 = v56 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v60 = *(_QWORD *)&v55[v57];
                v61 = *(_QWORD *)&v54[v57];
                if (v60 != v61)
                  break;
                v57 += 8;
                if (!--v58)
                {
                  v55 += v56 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_72;
                }
              }
              v59 = v57 + (__clz(__rbit64(v61 ^ v60)) >> 3);
            }
            v62 = v59 + 4;
            if (v59 + 4 > 9)
            {
              if (v62 > 0x85)
              {
                if (v62 > 0x845)
                {
                  v63 = ((_DWORD)v62 << 8) - 542145;
                }
                else
                {
                  v66 = v59 - 66;
                  v67 = __clz(v66) ^ 0x1F;
                  v63 = (v67 | (((-1 << v67) + v66) << 8)) + 52;
                }
              }
              else
              {
                v64 = v59 - 2;
                v65 = (__clz(v64) ^ 0x1F) - 1;
                v63 = ((v64 >> v65) + 2 * v65 + 44) | (((_DWORD)v64 - (v64 >> v65 << v65)) << 8);
              }
            }
            else
            {
              v63 = v59 + 42;
            }
            v16 += v62;
            v68 = __clz(v20 + 3);
            *v14 = v63;
            v14[1] = (((v20 + 3 - ((((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1 | 2) << ((v68 ^ 0x1F) - 1))) << 8) | (2 * (v68 ^ 0x1F)) | ((v20 + 3) >> ((v68 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              break;
            v69 = *(_QWORD *)(v16 - 3);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD00000000 * v69) >> 47) & 0x1FFFC)) = (_DWORD)v16
                                                                                                 - (_DWORD)__src
                                                                                                 - 3;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 24) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC)) = (_DWORD)v16 - (_DWORD)__src - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v69 << 16) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v70 = ((506832829 * ((v69 << 8) & 0xFFFFFFFF00000000)) >> 47) & 0x1FFFC;
            v52 = *(int *)(a6 + v70);
            *(_DWORD *)(a6 + v70) = (_DWORD)v16 - (_DWORD)__src;
            v53 = v16 - &__src[v52];
            if (v53 >= 262129 || *(_DWORD *)v16 != *(_DWORD *)&__src[v52])
              goto LABEL_10;
          }
        }
        goto LABEL_83;
      }
LABEL_19:
      v22 = v24;
    }
  }
  return result;
}

unsigned int *sub_2367B2C98(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, char *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  char *v22;
  unsigned int i;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  BOOL v27;
  int v28;
  char *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  char *v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v97;
  unint64_t v98;
  unsigned int *v99;
  char *v100;
  unint64_t v101;
  char *v103;
  char *v104;
  unint64_t v105;

  if (a3)
  {
    v9 = a3;
    v11 = __src;
    v99 = result;
    v100 = __dst;
    while (1)
    {
      v12 = v9 >= 0x20000 ? 0x20000 : v9;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = __dst;
      v16 = v11;
      v101 = v9;
      v103 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_93:
      if (v16 < v13)
      {
        v80 = (_DWORD)v13 - (_DWORD)v16;
        v81 = v11;
        v82 = v12;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v84 = (v80 << 8) - 1589738;
          if (v80 > 0x5841)
            v84 = (v80 << 8) - 5784041;
          if (v80 >> 1 <= 0xC20)
            v83 = (v80 << 8) - 541163;
          else
            v83 = v84;
          v85 = __clz(v80 - 66) ^ 0x1F;
          if (v80 <= 0x841)
            v83 = (v85 | (((-1 << v85) + v80 - 66) << 8)) + 10;
          v86 = (__clz(v80 - 2) ^ 0x1F) - 1;
          if (v80 <= 0x81)
            v83 = (((v80 - 2) >> v86) + 2 * v86 + 2) | ((v80 - 2 - ((v80 - 2) >> v86 << v86)) << 8);
        }
        else
        {
          v83 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v83;
        v87 = v15;
        memcpy(v15, v16, v80);
        v15 = &v87[v80];
        result = v99;
        __dst = v100;
        v12 = v82;
        v11 = v81;
      }
      v88 = v15 - __dst;
      v89 = v11;
      v90 = (unsigned __int8 *)__dst;
      v91 = (uint64_t)result;
      if (sub_2367B3EC0(result, (uint64_t)v11, v12, v15 - __dst))
      {
        sub_2367AE1B8(v12, 0, a7, a8);
        v92 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v92 + 13;
        v9 = v101;
        sub_2367B4024(v91, v90, v88, a4, ((char *)v14 - (char *)a4) >> 2, a7, a8);
      }
      else
      {
        sub_2367AE1B8(v12, 1u, a7, a8);
        v93 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v93;
        memcpy((void *)(a8 + (v93 >> 3)), v89, v12);
        v94 = *a7 + 8 * v12;
        *a7 = v94;
        *(_BYTE *)(a8 + (v94 >> 3)) = 0;
      }
      v11 = v103;
      v9 -= v12;
      result = v99;
      __dst = v100;
      if (!v9)
        return result;
    }
    v97 = v11;
    v98 = v12;
    v17 = v12 - 6;
    if (v12 - 6 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 6;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v104 = v13 - 6;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = v22;
      v22 += i >> 5;
      if (v22 > v18)
      {
LABEL_92:
        __dst = v100;
        v9 = v101;
        v12 = v98;
        result = v99;
        v13 = v103;
        v11 = v97;
        goto LABEL_93;
      }
      v25 = (unint64_t)(0x1E35A7BD0000 * v21) >> 48;
      v21 = *(_QWORD *)v22;
      v26 = (char *)v24 - v20;
      if (*(_DWORD *)v24 == *(_DWORD *)v26
        && *((unsigned __int8 *)v24 + 4) == v26[4]
        && (*((unsigned __int8 *)v24 + 5) == v26[5] ? (v27 = v20 < 1) : (v27 = 1), !v27))
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v24 - (_DWORD)__src;
      }
      else
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v24 - (_DWORD)__src;
        if (*(_DWORD *)v24 != *(_DWORD *)v26
          || *((unsigned __int8 *)v24 + 4) != v26[4]
          || *((unsigned __int8 *)v24 + 5) != v26[5])
        {
          continue;
        }
      }
      v28 = (_DWORD)v24 - (_DWORD)v26;
      if ((char *)v24 - v26 <= 262128)
      {
        v29 = v26 + 6;
        v30 = (unsigned __int8 *)v24 + 6;
        v31 = v19 - (char *)v24;
        if ((unint64_t)(v19 - (char *)v24) < 8)
        {
          v34 = 0;
LABEL_87:
          v78 = v31 & 7;
          if (v78)
          {
            v79 = v34 | v78;
            while (v29[v34] == *v30)
            {
              ++v30;
              ++v34;
              if (!--v78)
              {
                v34 = v79;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 8;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_87;
            }
          }
          v34 = v32 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v24 - (_DWORD)v16;
        v105 = v34;
        if (((_DWORD)v24 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v24 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v105 + 6;
        v14[1] = v43;
        if (v105 + 6 <= 0xB)
        {
          v46 = v105 + 26;
          goto LABEL_50;
        }
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v49 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v50 = __clz(v105 - 66) ^ 0x1F;
              v49 = (v50 | (((-1 << v50) + (_DWORD)v105 - 66) << 8)) + 52;
            }
          }
          else
          {
            v49 = (((v105 - 2) >> 5) + 54) | ((((_BYTE)v105 - 2) & 0x1F) << 8);
          }
          v14[2] = v49;
          v14[3] = 64;
          v48 = 4;
        }
        else
        {
          v47 = (__clz(v105 - 2) ^ 0x1F) - 1;
          v46 = (((v105 - 2) >> v47) + 2 * v47 + 28) | (((_DWORD)v105 - 2 - ((v105 - 2) >> v47 << v47)) << 8);
LABEL_50:
          v14[2] = v46;
          v48 = 3;
        }
        v16 = (char *)v24 + v45;
        v15 = &v42[v37];
        v14 += v48;
        if ((char *)v24 + v45 >= v18)
          goto LABEL_92;
        v51 = *(_QWORD *)(v16 - 5);
        *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v51) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 5;
        *(_DWORD *)(a6 + (((506832829 * ((v51 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 4;
        *(_DWORD *)(a6 + (((506832829 * (v51 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 3;
        v52 = *(_QWORD *)(v16 - 2);
        *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v52) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 2;
        *(_DWORD *)(a6 + (((506832829 * ((v52 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 1;
        v53 = ((506832829 * (v52 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC;
        v54 = *(int *)(a6 + v53);
        *(_DWORD *)(a6 + v53) = (_DWORD)v16 - (_DWORD)__src;
        v55 = &__src[v54];
        LODWORD(v56) = (_DWORD)v16 - (_DWORD)v55;
        v19 = v104;
        if (v16 - v55 < 262129 && *(_DWORD *)v16 == *(_DWORD *)v55)
        {
          while (1)
          {
            v57 = v56;
            if (v16[4] != v55[4] || v16[5] != v55[5])
              break;
            v58 = v55 + 6;
            v59 = (unsigned __int8 *)(v16 + 6);
            v60 = v104 - v16;
            if ((unint64_t)(v104 - v16) < 8)
            {
              v63 = 0;
LABEL_80:
              v76 = v60 & 7;
              if (v76)
              {
                v77 = v63 | v76;
                while (v58[v63] == *v59)
                {
                  ++v59;
                  ++v63;
                  if (!--v76)
                  {
                    v63 = v77;
                    break;
                  }
                }
              }
            }
            else
            {
              v61 = 0;
              v62 = v60 >> 3;
              v63 = v60 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v64 = *(_QWORD *)&v59[v61];
                v65 = *(_QWORD *)&v58[v61];
                if (v64 != v65)
                  break;
                v61 += 8;
                if (!--v62)
                {
                  v59 += v60 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_80;
                }
              }
              v63 = v61 + (__clz(__rbit64(v65 ^ v64)) >> 3);
            }
            v66 = v63 + 6;
            if (v63 + 6 > 9)
            {
              if (v66 > 0x85)
              {
                if (v66 > 0x845)
                {
                  v67 = ((_DWORD)v66 << 8) - 542145;
                }
                else
                {
                  v69 = v63 - 64;
                  v70 = __clz(v69) ^ 0x1F;
                  v67 = (v70 | (((-1 << v70) + v69) << 8)) + 52;
                }
              }
              else
              {
                v68 = (__clz(v63) ^ 0x1F) - 1;
                v67 = ((v63 >> v68) + 2 * v68 + 44) | (((_DWORD)v63 - (v63 >> v68 << v68)) << 8);
              }
            }
            else
            {
              v67 = v63 + 44;
            }
            v16 += v66;
            v71 = __clz(v57 + 3);
            *v14 = v67;
            v14[1] = (((v57 + 3 - ((((v57 + 3) >> ((v71 ^ 0x1F) - 1)) & 1 | 2) << ((v71 ^ 0x1F) - 1))) << 8) | (2 * (v71 ^ 0x1F)) | ((v57 + 3) >> ((v71 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              goto LABEL_92;
            v72 = *(_QWORD *)(v16 - 5);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v72) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 5;
            *(_DWORD *)(a6 + (((506832829 * ((v72 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v16 - (_DWORD)__src - 4;
            *(_DWORD *)(a6 + (((506832829 * (v72 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 3;
            v73 = *(_QWORD *)(v16 - 2);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v73) >> 46) & 0x3FFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v73 << 8) & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v74 = ((506832829 * (v73 & 0xFFFFFFFFFFFF0000)) >> 46) & 0x3FFFC;
            v75 = *(int *)(a6 + v74);
            *(_DWORD *)(a6 + v74) = (_DWORD)v16 - (_DWORD)__src;
            v55 = &__src[v75];
            v56 = v16 - &__src[v75];
            if (v56 < 262129)
            {
              v20 = v57;
              if (*(_DWORD *)v16 == *(_DWORD *)v55)
                continue;
            }
            v20 = v57;
            goto LABEL_10;
          }
        }
        goto LABEL_10;
      }
    }
  }
  return result;
}

unsigned int *sub_2367B35AC(unsigned int *result, char *__src, unint64_t a3, unsigned __int8 *a4, char *__dst, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  char *v22;
  unsigned int i;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  BOOL v27;
  int v28;
  char *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  char *v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v97;
  unint64_t v98;
  unsigned int *v99;
  char *v100;
  unint64_t v101;
  char *v103;
  char *v104;
  unint64_t v105;

  if (a3)
  {
    v9 = a3;
    v11 = __src;
    v99 = result;
    v100 = __dst;
    while (1)
    {
      v12 = v9 >= 0x20000 ? 0x20000 : v9;
      v13 = &v11[v12];
      v14 = (unsigned int *)a4;
      v15 = __dst;
      v16 = v11;
      v101 = v9;
      v103 = &v11[v12];
      if (v12 >= 0x10)
        break;
LABEL_93:
      if (v16 < v13)
      {
        v80 = (_DWORD)v13 - (_DWORD)v16;
        v81 = v11;
        v82 = v12;
        if (((_DWORD)v13 - (_DWORD)v16) >= 6)
        {
          v84 = (v80 << 8) - 1589738;
          if (v80 > 0x5841)
            v84 = (v80 << 8) - 5784041;
          if (v80 >> 1 <= 0xC20)
            v83 = (v80 << 8) - 541163;
          else
            v83 = v84;
          v85 = __clz(v80 - 66) ^ 0x1F;
          if (v80 <= 0x841)
            v83 = (v85 | (((-1 << v85) + v80 - 66) << 8)) + 10;
          v86 = (__clz(v80 - 2) ^ 0x1F) - 1;
          if (v80 <= 0x81)
            v83 = (((v80 - 2) >> v86) + 2 * v86 + 2) | ((v80 - 2 - ((v80 - 2) >> v86 << v86)) << 8);
        }
        else
        {
          v83 = (_DWORD)v13 - (_DWORD)v16;
        }
        *v14++ = v83;
        v87 = v15;
        memcpy(v15, v16, v80);
        v15 = &v87[v80];
        result = v99;
        __dst = v100;
        v12 = v82;
        v11 = v81;
      }
      v88 = v15 - __dst;
      v89 = v11;
      v90 = (unsigned __int8 *)__dst;
      v91 = (uint64_t)result;
      if (sub_2367B3EC0(result, (uint64_t)v11, v12, v15 - __dst))
      {
        sub_2367AE1B8(v12, 0, a7, a8);
        v92 = *a7;
        *(_QWORD *)(a8 + (*a7 >> 3)) = *(unsigned __int8 *)(a8 + (*a7 >> 3));
        *a7 = v92 + 13;
        v9 = v101;
        sub_2367B4024(v91, v90, v88, a4, ((char *)v14 - (char *)a4) >> 2, a7, a8);
      }
      else
      {
        sub_2367AE1B8(v12, 1u, a7, a8);
        v93 = (*(_DWORD *)a7 + 7) & 0xFFFFFFF8;
        *a7 = v93;
        memcpy((void *)(a8 + (v93 >> 3)), v89, v12);
        v94 = *a7 + 8 * v12;
        *a7 = v94;
        *(_BYTE *)(a8 + (v94 >> 3)) = 0;
      }
      v11 = v103;
      v9 -= v12;
      result = v99;
      __dst = v100;
      if (!v9)
        return result;
    }
    v97 = v11;
    v98 = v12;
    v17 = v12 - 6;
    if (v12 - 6 >= v9 - 16)
      v17 = v9 - 16;
    v18 = &v11[v17];
    v19 = v13 - 6;
    v20 = -1;
    v14 = (unsigned int *)a4;
    v15 = __dst;
    v16 = v11;
    v104 = v13 - 6;
LABEL_10:
    v22 = v16 + 1;
    v21 = *(_QWORD *)(v16 + 1);
    for (i = 32; ; ++i)
    {
      v24 = v22;
      v22 += i >> 5;
      if (v22 > v18)
      {
LABEL_92:
        __dst = v100;
        v9 = v101;
        v12 = v98;
        result = v99;
        v13 = v103;
        v11 = v97;
        goto LABEL_93;
      }
      v25 = (unint64_t)(0x1E35A7BD0000 * v21) >> 47;
      v21 = *(_QWORD *)v22;
      v26 = (char *)v24 - v20;
      if (*(_DWORD *)v24 == *(_DWORD *)v26
        && *((unsigned __int8 *)v24 + 4) == v26[4]
        && (*((unsigned __int8 *)v24 + 5) == v26[5] ? (v27 = v20 < 1) : (v27 = 1), !v27))
      {
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v24 - (_DWORD)__src;
      }
      else
      {
        v26 = &__src[*(int *)(a6 + 4 * v25)];
        *(_DWORD *)(a6 + 4 * v25) = (_DWORD)v24 - (_DWORD)__src;
        if (*(_DWORD *)v24 != *(_DWORD *)v26
          || *((unsigned __int8 *)v24 + 4) != v26[4]
          || *((unsigned __int8 *)v24 + 5) != v26[5])
        {
          continue;
        }
      }
      v28 = (_DWORD)v24 - (_DWORD)v26;
      if ((char *)v24 - v26 <= 262128)
      {
        v29 = v26 + 6;
        v30 = (unsigned __int8 *)v24 + 6;
        v31 = v19 - (char *)v24;
        if ((unint64_t)(v19 - (char *)v24) < 8)
        {
          v34 = 0;
LABEL_87:
          v78 = v31 & 7;
          if (v78)
          {
            v79 = v34 | v78;
            while (v29[v34] == *v30)
            {
              ++v30;
              ++v34;
              if (!--v78)
              {
                v34 = v79;
                break;
              }
            }
          }
        }
        else
        {
          v32 = 0;
          v33 = v31 >> 3;
          v34 = v31 & 0xFFFFFFFFFFFFFFF8;
          while (1)
          {
            v35 = *(_QWORD *)&v30[v32];
            v36 = *(_QWORD *)&v29[v32];
            if (v35 != v36)
              break;
            v32 += 8;
            if (!--v33)
            {
              v30 += v31 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_87;
            }
          }
          v34 = v32 + (__clz(__rbit64(v36 ^ v35)) >> 3);
        }
        v37 = (_DWORD)v24 - (_DWORD)v16;
        v105 = v34;
        if (((_DWORD)v24 - (_DWORD)v16) >= 6)
        {
          if (v37 > 0x81)
          {
            if (v37 > 0x841)
            {
              if (v37 >> 1 > 0xC20)
              {
                if (v37 > 0x5841)
                  v41 = -5784041;
                else
                  v41 = -1589738;
                v38 = (v37 << 8) + v41;
              }
              else
              {
                v38 = (v37 << 8) - 541163;
              }
            }
            else
            {
              v40 = __clz(v37 - 66) ^ 0x1F;
              v38 = (v40 | (((-1 << v40) + v37 - 66) << 8)) + 10;
            }
          }
          else
          {
            v39 = (__clz(v37 - 2) ^ 0x1F) - 1;
            v38 = (((v37 - 2) >> v39) + 2 * v39 + 2) | ((v37 - 2 - ((v37 - 2) >> v39 << v39)) << 8);
          }
        }
        else
        {
          v38 = (_DWORD)v24 - (_DWORD)v16;
        }
        *v14 = v38;
        v42 = v15;
        memcpy(v15, v16, (int)v37);
        if (v20 == v28)
        {
          v43 = 64;
        }
        else
        {
          v44 = __clz(v28 + 3) ^ 0x1F;
          v43 = (((v28 + 3 - ((((v28 + 3) >> (v44 - 1)) & 1 | 2) << (v44 - 1))) << 8) | (2 * v44) | ((v28 + 3) >> (v44 - 1)) & 1)
              + 76;
          v20 = v28;
        }
        v45 = v105 + 6;
        v14[1] = v43;
        if (v105 + 6 <= 0xB)
        {
          v46 = v105 + 26;
          goto LABEL_50;
        }
        if (v45 > 0x47)
        {
          if (v45 > 0x87)
          {
            if (v45 > 0x847)
            {
              v49 = ((_DWORD)v45 << 8) - 542657;
            }
            else
            {
              v50 = __clz(v105 - 66) ^ 0x1F;
              v49 = (v50 | (((-1 << v50) + (_DWORD)v105 - 66) << 8)) + 52;
            }
          }
          else
          {
            v49 = (((v105 - 2) >> 5) + 54) | ((((_BYTE)v105 - 2) & 0x1F) << 8);
          }
          v14[2] = v49;
          v14[3] = 64;
          v48 = 4;
        }
        else
        {
          v47 = (__clz(v105 - 2) ^ 0x1F) - 1;
          v46 = (((v105 - 2) >> v47) + 2 * v47 + 28) | (((_DWORD)v105 - 2 - ((v105 - 2) >> v47 << v47)) << 8);
LABEL_50:
          v14[2] = v46;
          v48 = 3;
        }
        v16 = (char *)v24 + v45;
        v15 = &v42[v37];
        v14 += v48;
        if ((char *)v24 + v45 >= v18)
          goto LABEL_92;
        v51 = *(_QWORD *)(v16 - 5);
        *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v51) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 5;
        *(_DWORD *)(a6 + (((506832829 * ((v51 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 4;
        *(_DWORD *)(a6 + (((506832829 * (v51 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 3;
        v52 = *(_QWORD *)(v16 - 2);
        *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v52) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                         - (_DWORD)__src
                                                                                         - 2;
        *(_DWORD *)(a6 + (((506832829 * ((v52 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                                - (_DWORD)__src
                                                                                                - 1;
        v53 = ((506832829 * (v52 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC;
        v54 = *(int *)(a6 + v53);
        *(_DWORD *)(a6 + v53) = (_DWORD)v16 - (_DWORD)__src;
        v55 = &__src[v54];
        LODWORD(v56) = (_DWORD)v16 - (_DWORD)v55;
        v19 = v104;
        if (v16 - v55 < 262129 && *(_DWORD *)v16 == *(_DWORD *)v55)
        {
          while (1)
          {
            v57 = v56;
            if (v16[4] != v55[4] || v16[5] != v55[5])
              break;
            v58 = v55 + 6;
            v59 = (unsigned __int8 *)(v16 + 6);
            v60 = v104 - v16;
            if ((unint64_t)(v104 - v16) < 8)
            {
              v63 = 0;
LABEL_80:
              v76 = v60 & 7;
              if (v76)
              {
                v77 = v63 | v76;
                while (v58[v63] == *v59)
                {
                  ++v59;
                  ++v63;
                  if (!--v76)
                  {
                    v63 = v77;
                    break;
                  }
                }
              }
            }
            else
            {
              v61 = 0;
              v62 = v60 >> 3;
              v63 = v60 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v64 = *(_QWORD *)&v59[v61];
                v65 = *(_QWORD *)&v58[v61];
                if (v64 != v65)
                  break;
                v61 += 8;
                if (!--v62)
                {
                  v59 += v60 & 0xFFFFFFFFFFFFFFF8;
                  goto LABEL_80;
                }
              }
              v63 = v61 + (__clz(__rbit64(v65 ^ v64)) >> 3);
            }
            v66 = v63 + 6;
            if (v63 + 6 > 9)
            {
              if (v66 > 0x85)
              {
                if (v66 > 0x845)
                {
                  v67 = ((_DWORD)v66 << 8) - 542145;
                }
                else
                {
                  v69 = v63 - 64;
                  v70 = __clz(v69) ^ 0x1F;
                  v67 = (v70 | (((-1 << v70) + v69) << 8)) + 52;
                }
              }
              else
              {
                v68 = (__clz(v63) ^ 0x1F) - 1;
                v67 = ((v63 >> v68) + 2 * v68 + 44) | (((_DWORD)v63 - (v63 >> v68 << v68)) << 8);
              }
            }
            else
            {
              v67 = v63 + 44;
            }
            v16 += v66;
            v71 = __clz(v57 + 3);
            *v14 = v67;
            v14[1] = (((v57 + 3 - ((((v57 + 3) >> ((v71 ^ 0x1F) - 1)) & 1 | 2) << ((v71 ^ 0x1F) - 1))) << 8) | (2 * (v71 ^ 0x1F)) | ((v57 + 3) >> ((v71 ^ 0x1F) - 1)) & 1)
                   + 76;
            v14 += 2;
            if (v16 >= v18)
              goto LABEL_92;
            v72 = *(_QWORD *)(v16 - 5);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v72) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 5;
            *(_DWORD *)(a6 + (((506832829 * ((v72 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v16 - (_DWORD)__src - 4;
            *(_DWORD *)(a6 + (((506832829 * (v72 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 3;
            v73 = *(_QWORD *)(v16 - 2);
            *(_DWORD *)(a6 + (((unint64_t)(0x1E35A7BD0000 * v73) >> 45) & 0x7FFFC)) = (_DWORD)v16
                                                                                             - (_DWORD)__src
                                                                                             - 2;
            *(_DWORD *)(a6 + (((506832829 * ((v73 << 8) & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC)) = (_DWORD)v16 - (_DWORD)__src - 1;
            v74 = ((506832829 * (v73 & 0xFFFFFFFFFFFF0000)) >> 45) & 0x7FFFC;
            v75 = *(int *)(a6 + v74);
            *(_DWORD *)(a6 + v74) = (_DWORD)v16 - (_DWORD)__src;
            v55 = &__src[v75];
            v56 = v16 - &__src[v75];
            if (v56 < 262129)
            {
              v20 = v57;
              if (*(_DWORD *)v16 == *(_DWORD *)v55)
                continue;
            }
            v20 = v57;
            goto LABEL_10;
          }
        }
        goto LABEL_10;
      }
    }
  }
  return result;
}

BOOL sub_2367B3EC0(unsigned int *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;

  if ((double)a3 * 0.98 > (double)a4)
    return 1;
  v8 = (double)a3 * 8.0 * 0.98;
  bzero(a1, 0x400uLL);
  v9 = 0;
  do
  {
    ++a1[*(unsigned __int8 *)(a2 + v9)];
    v9 += 43;
  }
  while (v9 < a3);
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  do
  {
    v13 = a1[v11];
    if (v13 > 0xFF)
    {
      v15 = (double)v13;
      v14 = log2((double)v13);
    }
    else
    {
      v14 = dbl_236925608[v13];
      v15 = (double)v13;
    }
    v16 = a1[v11 + 1];
    if (v16 > 0xFF)
      v17 = log2((double)v16);
    else
      v17 = dbl_236925608[v16];
    v11 += 2;
    v10 += v13 + v16;
    v12 = v12 - v15 * v14 - (double)v16 * v17;
  }
  while ((unint64_t)(v11 - 2) < 0xFE);
  v18 = (double)v10;
  if (v10)
  {
    if (v10 > 0xFF)
      v19 = log2((double)v10);
    else
      v19 = dbl_236925608[v10];
    v12 = v12 + v18 * v19;
  }
  if (v12 >= v18)
    v20 = v12;
  else
    v20 = (double)v10;
  return v20 < v8 / 43.0;
}

unsigned __int8 *sub_2367B4024(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unsigned __int8 *result;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int i;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;

  bzero((void *)a1, 0x400uLL);
  bzero((void *)(a1 + 1792), 0x380uLL);
  if (a3)
  {
    v14 = 0;
    do
      ++*(_DWORD *)(a1 + 4 * a2[v14++]);
    while (a3 != v14);
    v39 = a1 + 2688;
    sub_2367A58C4(a1 + 2688, a1, a3, 8, (_BYTE *)(a1 + 1024), a1 + 1280, a6, a7);
  }
  else
  {
    v15 = *a6;
    *(_QWORD *)(a7 + (*a6 >> 3)) = (1 << (*a6 & 7)) | *(unsigned __int8 *)(a7 + (*a6 >> 3));
    *a6 = v15 + 4;
    *(_QWORD *)(a7 + ((v15 + 4) >> 3)) = *(unsigned __int8 *)(a7 + ((v15 + 4) >> 3));
    *a6 = v15 + 12;
    v39 = a1 + 2688;
    *(_BYTE *)(a1 + 1024) = 0;
    *(_WORD *)(a1 + 1280) = 0;
  }
  v16 = (_BYTE *)(a1 + 6920);
  if (a5)
  {
    v17 = a4;
    v18 = a5;
    do
    {
      v19 = *v17;
      v17 += 4;
      ++*(_DWORD *)(a1 + 4 * v19 + 1792);
      --v18;
    }
    while (v18);
  }
  *(int32x2_t *)(a1 + 1796) = vadd_s32(*(int32x2_t *)(a1 + 1796), (int32x2_t)0x100000001);
  ++*(_DWORD *)(a1 + 2048);
  ++*(_DWORD *)(a1 + 2128);
  bzero((void *)(a1 + 6792), 0x2C0uLL);
  sub_2367B8860(a1 + 1792, 64, 15, v39, a1 + 2304);
  v20 = a1 + 2304;
  sub_2367B8860(a1 + 2048, 64, 14, v39, a1 + 2368);
  v21 = *(_OWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 6808) = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 6816) = *(_QWORD *)(a1 + 2304);
  *(_QWORD *)(a1 + 6824) = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 6832) = *(_QWORD *)(a1 + 2312);
  *(_QWORD *)(a1 + 6840) = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 6848) = *(_QWORD *)(a1 + 2320);
  *(_OWORD *)(a1 + 6792) = v21;
  sub_2367B8DE8((unsigned __int8 *)(a1 + 6792), 64, a1 + 7496);
  v22 = *(_OWORD *)(a1 + 7528);
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a1 + 7544);
  v23 = *(_OWORD *)(a1 + 7560);
  *(_OWORD *)(a1 + 2448) = *(_OWORD *)(a1 + 7576);
  v24 = *(_OWORD *)(a1 + 7592);
  *(_OWORD *)(a1 + 2464) = *(_OWORD *)(a1 + 7608);
  v25 = *(_OWORD *)(a1 + 7512);
  *(_OWORD *)(a1 + 2480) = *(_OWORD *)(a1 + 7496);
  *(_OWORD *)(a1 + 2496) = v25;
  *(_OWORD *)(a1 + 2512) = v22;
  *(_OWORD *)(a1 + 2528) = v23;
  *(_OWORD *)(a1 + 2544) = v24;
  sub_2367B8DE8((unsigned __int8 *)(a1 + 2368), 64, a1 + 2560);
  v26 = 0;
  *(_QWORD *)(a1 + 6792) = *(_QWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 6856) = *(_QWORD *)(a1 + 2336);
  *(_QWORD *)(a1 + 6920) = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 6984) = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 7176) = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 6848) = 0;
  *(_OWORD *)(a1 + 6832) = 0u;
  *(_OWORD *)(a1 + 6816) = 0u;
  *(_OWORD *)(a1 + 6800) = 0u;
  do
  {
    *v16 = *(_BYTE *)(v20 + v26);
    v16[128] = *(_BYTE *)(v20 + v26 + 8);
    v16[320] = *(_BYTE *)(v20 + v26++ + 16);
    v16 += 8;
  }
  while (v26 != 8);
  sub_2367A5270(a1 + 6792, 0x2C0uLL, v39, a6, a7);
  result = sub_2367A5270(a1 + 2368, 0x40uLL, v39, a6, a7);
  if (a5)
  {
    v28 = 0;
    v29 = *a6;
    do
    {
      v30 = *(unsigned int *)&a4[4 * v28];
      v31 = *(_DWORD *)&a4[4 * v28];
      v32 = v30 >> 8;
      v33 = *(unsigned __int8 *)(a1 + v30 + 2304);
      result = (unsigned __int8 *)(v29 & 7);
      *(_QWORD *)(a7 + (v29 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 2 * v30 + 2432) << (v29 & 7)) | *(unsigned __int8 *)(a7 + (v29 >> 3));
      v34 = v29 + v33;
      v35 = dword_2368D6EC0[v31];
      *a6 = v34;
      *(_QWORD *)(a7 + (v34 >> 3)) = (v32 << (v34 & 7)) | *(unsigned __int8 *)(a7 + (v34 >> 3));
      v29 = v34 + v35;
      *a6 = v29;
      if (v31 <= 0x17)
      {
        for (i = dword_236925488[v31] + v32; i; --i)
        {
          v37 = *a2++;
          v38 = *(unsigned __int8 *)(a1 + v37 + 1024);
          *(_QWORD *)(a7 + (v29 >> 3)) = ((unint64_t)*(unsigned __int16 *)(a1 + 2 * v37 + 1280) << (v29 & 7)) | *(unsigned __int8 *)(a7 + (v29 >> 3));
          v29 += v38;
          *a6 = v29;
        }
      }
      ++v28;
    }
    while (v28 != a5);
  }
  return result;
}

__n128 sub_2367B4404()
{
  char *v0;
  __n128 result;

  v0 = (char *)malloc_type_malloc(0x1B48uLL, 0xF078C0CAuLL);
  if (v0)
  {
    *((_QWORD *)v0 + 176) = sub_2368A4E70;
    *((_QWORD *)v0 + 177) = sub_2368A4E80;
    *((_QWORD *)v0 + 178) = 0;
    *((_DWORD *)v0 + 9) = 0;
    *(_QWORD *)v0 = 0xB00000000;
    *((_DWORD *)v0 + 2) = 22;
    *(_QWORD *)(v0 + 12) = 0;
    *(_QWORD *)(v0 + 28) = 0;
    *(_QWORD *)(v0 + 20) = 0;
    *((_DWORD *)v0 + 22) = -558043679;
    *((_QWORD *)v0 + 46) = 0;
    *((_QWORD *)v0 + 62) = 0;
    *((_DWORD *)v0 + 158) = 0;
    *((_QWORD *)v0 + 12) = 0;
    *((_QWORD *)v0 + 13) = 0;
    v0[636] = 1;
    *((_QWORD *)v0 + 174) = 0;
    *((_QWORD *)v0 + 152) = 1;
    *((_QWORD *)v0 + 88) = v0 + 1224;
    *((_QWORD *)v0 + 153) = &unk_2508006D8;
    *((_QWORD *)v0 + 156) = &unk_2368D7550;
    *((_QWORD *)v0 + 157) = &unk_2368E7550;
    *((_QWORD *)v0 + 158) = &unk_2368EF550;
    *((_QWORD *)v0 + 159) = &unk_2368FF550;
    *((_QWORD *)v0 + 154) = 0xA00000079;
    *((_QWORD *)v0 + 155) = 0x71B520ADA2D3200;
    *((_DWORD *)v0 + 330) = 0;
    v0[1306] = 0;
    *(_QWORD *)(v0 + 1308) = 0;
    *((_QWORD *)v0 + 162) = 0;
    *((_QWORD *)v0 + 160) = 0;
    *((_QWORD *)v0 + 161) = 0;
    v0[1304] = 0;
    *(_OWORD *)(v0 + 1336) = 0u;
    *(_OWORD *)(v0 + 1352) = 0u;
    *(_OWORD *)(v0 + 1368) = 0u;
    *((_QWORD *)v0 + 173) = 0;
    *((_QWORD *)v0 + 166) = v0 + 632;
    *((_DWORD *)v0 + 350) = 11;
    *((_OWORD *)v0 + 4) = xmmword_2368AF400;
    *((_QWORD *)v0 + 10) = 67108860;
    *((_QWORD *)v0 + 179) = 0;
    *((_WORD *)v0 + 810) = 0;
    *((_DWORD *)v0 + 1743) = 0;
    *((_QWORD *)v0 + 872) = 0;
    *((_OWORD *)v0 + 95) = 0u;
    *((_OWORD *)v0 + 94) = 0u;
    *((_OWORD *)v0 + 93) = 0u;
    *((_OWORD *)v0 + 92) = 0u;
    *((_OWORD *)v0 + 91) = 0u;
    *((_DWORD *)v0 + 418) = 0;
    *(_OWORD *)(v0 + 1640) = 0u;
    *(_OWORD *)(v0 + 1656) = 0u;
    *(_OWORD *)(v0 + 1624) = 0u;
    *(_OWORD *)(v0 + 6872) = 0u;
    *(_OWORD *)(v0 + 6888) = 0u;
    *(_OWORD *)(v0 + 6904) = 0u;
    *(_OWORD *)(v0 + 6920) = 0u;
    *(_OWORD *)(v0 + 6936) = 0u;
    *((_OWORD *)v0 + 96) = xmmword_2368AF410;
    result = *((__n128 *)v0 + 96);
    *((__n128 *)v0 + 100) = result;
  }
  return result;
}

uint64_t sub_2367B45AC(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (result)
  {
    v1 = result;
    (*(void (**)(_QWORD, _QWORD))(result + 1416))(*(_QWORD *)(result + 1424), *(_QWORD *)(result + 1632));
    *(_QWORD *)(v1 + 1632) = 0;
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 1488));
    *(_QWORD *)(v1 + 1488) = 0;
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 1464));
    *(_QWORD *)(v1 + 1464) = 0;
    if (*(_QWORD *)(v1 + 1640))
    {
      (*(void (**)(_QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424));
      *(_QWORD *)(v1 + 1640) = 0;
    }
    if (*(_QWORD *)(v1 + 1648))
    {
      (*(void (**)(_QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424));
      *(_QWORD *)(v1 + 1648) = 0;
    }
    if (*(_QWORD *)(v1 + 1656))
    {
      (*(void (**)(_QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424));
      *(_QWORD *)(v1 + 1656) = 0;
    }
    if (*(_QWORD *)(v1 + 1664))
    {
      (*(void (**)(_QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424));
      *(_QWORD *)(v1 + 1664) = 0;
    }
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 6872));
    *(_QWORD *)(v1 + 6872) = 0;
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 6888));
    *(_QWORD *)(v1 + 6888) = 0;
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 6896));
    *(_QWORD *)(v1 + 6896) = 0;
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 6904));
    *(_QWORD *)(v1 + 6904) = 0;
    (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 6912));
    *(_QWORD *)(v1 + 6912) = 0;
    v2 = *(_QWORD *)(v1 + 496);
    if (v2)
    {
      for (i = 0; i < v2; ++i)
      {
        if (*(_QWORD *)(v1 + 504 + 8 * i))
        {
          (*(void (**)(_QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424));
          v2 = *(_QWORD *)(v1 + 496);
        }
      }
    }
    v4 = *(_QWORD *)(v1 + 1216);
    if (v4)
    {
      if (v4 == 1)
      {
        sub_2367B872C(v1 + 1408, (_QWORD *)(v1 + 1224));
      }
      else
      {
        v5 = 0;
        v6 = 0;
        do
        {
          sub_2367B872C(v1 + 1408, (_QWORD *)(*(_QWORD *)(v1 + 1392) + v5));
          ++v6;
          v5 += 168;
        }
        while (v6 < *(_QWORD *)(v1 + 1216));
        (*(void (**)(_QWORD, _QWORD))(v1 + 1416))(*(_QWORD *)(v1 + 1424), *(_QWORD *)(v1 + 1392));
      }
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 1416))(*(_QWORD *)(v1 + 1424), v1);
  }
  return result;
}

uint64_t sub_2367B4778(uint64_t a1, int a2, unint64_t *a3, const void **a4, size_t *a5, void **a6, size_t *a7)
{
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  int v25;
  int v26;
  unsigned int v27;
  char v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  size_t v54;
  char *v55;
  unsigned int v56;
  _BYTE *v57;
  _BYTE *v58;
  const void *v59;
  uint64_t v60;
  unint64_t v61;
  float32x4_t v62;
  __int128 v63;
  int32x4_t v64;
  int v65;
  unsigned int v66;
  _BYTE *v67;
  _BYTE *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  void *v75;
  char *v76;
  size_t v77;
  int v78;
  _DWORD *v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  size_t *v97;
  size_t *v98;
  _BOOL4 v99;
  _BYTE *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  unsigned __int8 v106;
  int v107;
  char v108;
  uint64_t v109;
  const void *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t i;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  __int128 v138;
  __n128 v139;
  __int128 v140;
  __n128 v141;
  int v142;
  int v143;
  int v144;
  int v145;
  _DWORD *v146;
  int *v147;
  unint64_t v148;
  uint64_t v149;
  int *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const float *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  __int16 v165;
  __int16 *v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  __int16 v173;
  __int16 *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  __int16 v182;
  __int16 *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  unsigned __int8 *v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  int *v255;
  int v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  uint64_t v269;
  unint64_t v270;
  __int16 v271;
  __int16 *v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  __int16 v277;
  uint64_t v278;
  unint64_t v279;
  __int16 v280;
  __int16 *v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  __int16 v287;
  uint64_t v288;
  unint64_t v289;
  __int16 v290;
  __int16 *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  int v300;
  int v301;
  unint64_t *v302;
  int v303;
  int v304;
  char v305;
  uint64_t v306;
  uint64_t v307;
  BOOL v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  _BYTE *v317;
  unint64_t v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  size_t v328;
  _BYTE *v329;
  double v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  double v334;
  int *v335;
  uint64_t v336;
  double v337;
  uint64_t v338;
  double v339;
  double v340;
  double v341;
  double v342;
  int v343;
  BOOL v344;
  int v345;
  int v346;
  double v347;
  int v348;
  size_t v349;
  unsigned int *v350;
  _DWORD *v351;
  uint64_t v352;
  unint64_t v353;
  _DWORD *v354;
  _DWORD *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  size_t v359;
  size_t v360;
  size_t v361;
  uint64_t v362;
  unsigned int v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t j;
  unint64_t v369;
  unsigned __int8 v370;
  int v371;
  unint64_t v372;
  uint64_t v373;
  double v374;
  unsigned int *v375;
  uint64_t v376;
  double v377;
  uint64_t v378;
  double v379;
  double v380;
  uint64_t v381;
  double v382;
  _DWORD *v383;
  unint64_t v384;
  uint64_t v385;
  double v386;
  _DWORD *v387;
  uint64_t v388;
  double v389;
  uint64_t v390;
  double v391;
  double v392;
  double v393;
  uint64_t v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  int v398;
  unint64_t v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  double v404;
  char v405;
  uint64_t v406;
  double v407;
  unint64_t v408;
  double v409;
  uint64_t v410;
  double v411;
  double v412;
  uint64_t v413;
  uint64_t v414;
  double v415;
  char v416;
  uint64_t v417;
  double v418;
  unint64_t v419;
  double v420;
  uint64_t v421;
  double v422;
  double v423;
  uint64_t v424;
  uint64_t v425;
  double v426;
  _QWORD *v427;
  uint64_t v428;
  double v429;
  unint64_t v430;
  double v431;
  uint64_t v432;
  double v433;
  double v434;
  uint64_t v435;
  double v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  char v440;
  double v441;
  uint64_t v442;
  double v443;
  unint64_t v444;
  double v445;
  uint64_t v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  _DWORD *v453;
  unint64_t v454;
  char v455;
  unint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  _BOOL4 v462;
  unint64_t v463;
  int v464;
  _BOOL4 v465;
  unint64_t v467;
  unint64_t v468;
  _BYTE *v469;
  int v470;
  uint64_t v471;
  char *v472;
  char v473;
  uint64_t v474;
  size_t v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  int v480;
  unint64_t v481;
  unint64_t v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  __int16 v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unsigned int v491;
  uint64_t v492;
  int64x2_t v493;
  char *v494;
  _QWORD *v495;
  unint64_t *v496;
  _BYTE *v497;
  int *v498;
  __int128 *v499;
  unsigned int *v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t *v503;
  __n128 *v504;
  __int128 *v505;
  _BOOL4 v506;
  _OWORD *v507;
  uint64_t v508;
  uint64_t *v509;
  size_t *v510;
  unsigned __int8 *v511;
  size_t v512;
  void **v513;
  char **v514;
  int v515;
  unint64_t *v516;
  unint64_t *v517;
  unint64_t v518;
  unsigned int v519;
  unsigned int v520;
  _OWORD __dst[88];
  int v522[4];
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  _QWORD v536[3];
  uint64_t v537;
  int v538;
  uint64_t v539;

  v539 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 6980))
    goto LABEL_62;
  *(_DWORD *)(a1 + 1616) = -33554432;
  *(_DWORD *)(a1 + 6968) = -1;
  v14 = *(_DWORD *)(a1 + 4) & ~(*(int *)(a1 + 4) >> 31);
  if ((int)v14 >= 11)
    v14 = 11;
  *(_DWORD *)(a1 + 4) = v14;
  if (v14 <= 2)
    *(_DWORD *)(a1 + 36) = 0;
  v15 = *(_DWORD *)(a1 + 8);
  if (v15 < 10)
  {
    v16 = 10;
LABEL_12:
    *(_DWORD *)(a1 + 8) = v16;
    v15 = v16;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 36))
    v16 = 30;
  else
    v16 = 24;
  if (v15 > v16)
    goto LABEL_12;
LABEL_13:
  if (v14 >= 2)
  {
    if (v14 >= 4)
    {
      v19 = *(_DWORD *)(a1 + 12);
      if (v19)
      {
        if (v19 <= 16)
          v20 = 16;
        else
          v20 = *(_DWORD *)(a1 + 12);
        if (v20 >= 24)
          v21 = 24;
        else
          v21 = v20;
      }
      else
      {
        v21 = 16;
        if (v14 >= 9)
        {
          if (v15 >= 18)
            v22 = 18;
          else
            v22 = v15;
          if (v22 <= 16)
            v21 = 16;
          else
            v21 = v22;
        }
      }
      *(_DWORD *)(a1 + 12) = v21;
      if (*(_DWORD *)a1 == 2)
      {
        v18 = 12;
        v17 = 1;
      }
      else
      {
        v17 = *(_DWORD *)(a1 + 64);
        v18 = *(_DWORD *)(a1 + 68);
      }
      if (v17 > 3 || v18 > 0x78 || ((v18 >> v17) & 0xF) << v17 != v18)
      {
        v17 = 0;
        v18 = 0;
      }
      goto LABEL_38;
    }
    v15 = 14;
  }
  v17 = 0;
  v18 = 0;
  *(_DWORD *)(a1 + 12) = v15;
LABEL_38:
  sub_2367B8F04(a1 + 64, v17, v18, *(_DWORD *)(a1 + 36));
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    *(_BYTE *)(a1 + 1619) = 2;
    *(_QWORD *)&v24 = 0xF0000000FLL;
    *((_QWORD *)&v24 + 1) = 0xF0000000FLL;
    *(_OWORD *)(a1 + 1536) = v24;
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)(a1 + 1536);
  }
  v26 = *(_DWORD *)(a1 + 8);
  v25 = *(_DWORD *)(a1 + 12);
  v27 = *(_DWORD *)(a1 + 4);
  if (v26 <= v25)
    v28 = *(_DWORD *)(a1 + 12);
  else
    v28 = *(_DWORD *)(a1 + 8);
  v29 = 1 << (v28 + 1);
  *(_DWORD *)(a1 + 1444) = v29 - 1;
  *(_DWORD *)(a1 + 1440) = v29;
  v30 = 1 << v25;
  *(_DWORD *)(a1 + 1448) = v30;
  *(_DWORD *)(a1 + 1452) = v29 + v30;
  if (v26 <= 18)
    v31 = 18;
  else
    v31 = v26;
  if (v27 >= 2)
    v31 = v26;
  if (v23)
  {
    v32 = (1 << v31) - 16;
    if (v23 >= v32)
      v23 = v32;
    *(_QWORD *)(a1 + 16) = v23;
  }
  else
  {
    if (*(_DWORD *)(a1 + 36))
    {
      v33 = ((v31 & 0x3F) << 8) | 0x11;
      v34 = 14;
    }
    else if (v31 == 16)
    {
      v33 = 0;
      v34 = 1;
    }
    else if (v31 == 17)
    {
      v34 = 7;
      v33 = 1;
    }
    else if (v31 < 18)
    {
      v33 = 16 * v31 - 127;
      v34 = 7;
    }
    else
    {
      v33 = 2 * v31 - 33;
      v34 = 4;
    }
    *(_WORD *)(a1 + 1616) = v33;
    *(_BYTE *)(a1 + 1618) = v34;
  }
  if (v27 == 1)
  {
    v36 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 7624);
    if (!v36)
      goto LABEL_724;
    *(_QWORD *)(a1 + 6896) = v36;
  }
  else if (!v27)
  {
    v35 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 8144);
    if (!v35)
      goto LABEL_724;
    *(_QWORD *)(a1 + 6888) = v35;
    *(_OWORD *)(v35 + 832) = xmmword_2368D7100;
    *(_OWORD *)(v35 + 848) = unk_2368D7110;
    *(_OWORD *)(v35 + 864) = xmmword_2368D7120;
    *(_OWORD *)(v35 + 880) = unk_2368D7130;
    *(_OWORD *)(v35 + 768) = xmmword_2368D70C0;
    *(_OWORD *)(v35 + 784) = unk_2368D70D0;
    *(_OWORD *)(v35 + 800) = xmmword_2368D70E0;
    *(_OWORD *)(v35 + 816) = unk_2368D70F0;
    *(_OWORD *)(v35 + 928) = xmmword_2368D7160;
    *(_OWORD *)(v35 + 944) = unk_2368D7170;
    *(_OWORD *)(v35 + 896) = xmmword_2368D7140;
    *(_OWORD *)(v35 + 912) = unk_2368D7150;
    *(_OWORD *)(v35 + 992) = xmmword_2368D71A0;
    *(_OWORD *)(v35 + 1008) = unk_2368D71B0;
    *(_OWORD *)(v35 + 960) = xmmword_2368D7180;
    *(_OWORD *)(v35 + 976) = unk_2368D7190;
    *(_OWORD *)(v35 + 1072) = unk_2368D71F0;
    *(_OWORD *)(v35 + 1056) = xmmword_2368D71E0;
    *(_OWORD *)(v35 + 1040) = unk_2368D71D0;
    *(_OWORD *)(v35 + 1024) = xmmword_2368D71C0;
    *(_OWORD *)(v35 + 1136) = unk_2368D7230;
    *(_OWORD *)(v35 + 1120) = xmmword_2368D7220;
    *(_OWORD *)(v35 + 1104) = unk_2368D7210;
    *(_OWORD *)(v35 + 1088) = xmmword_2368D7200;
    strcpy((char *)(v35 + 1664), "\xFFwտ\xE7\xDE\xEA\x9EQ]\xDE\xC6pW\xBCX");
    strcpy((char *)(v35 + 1680), "XX\xD8\xD8X\xD5\xCB\x8C\xEA\xE0\xC3\x87\x1F\x83\xC1\x60\x1Cg\xB2\xAA\x06\x83\xC1\x600\x18̡ΈT\x94");
    *(_BYTE *)(v35 + 1711) = asc_23692C046[47];
    *(_OWORD *)(v35 + 1705) = *(_OWORD *)"\x18̡ΈT\x94F\xE1\xB0\xD0N\xB2\xF7\x04asic_string";
    *(_QWORD *)(v35 + 2176) = 448;
  }
  *(_DWORD *)(a1 + 6980) = 1;
LABEL_62:
  if (*(_DWORD *)(a1 + 6968) != -1)
    return 0;
  v37 = *(_DWORD *)(a1 + 6972);
  if ((v37 - 3) < 2 || v37 && *a3)
    return 0;
  v39 = *(_DWORD *)(a1 + 4);
  v510 = a7;
  v513 = a6;
  v514 = (char **)a4;
  v516 = a5;
  v517 = a3;
  v515 = a2;
  if (v39 >= 2)
  {
    v503 = (uint64_t *)(a1 + 1496);
    v500 = (unsigned int *)(a1 + 40);
    v501 = a1 + 1408;
    v495 = (_QWORD *)(a1 + 1680);
    v496 = (unint64_t *)(a1 + 1720);
    v507 = (_OWORD *)(a1 + 1696);
    v509 = (uint64_t *)(a1 + 1512);
    v504 = (__n128 *)(a1 + 1640);
    v505 = (__int128 *)(a1 + 1536);
    v502 = (uint64_t *)(a1 + 1504);
    v498 = (int *)(a1 + 1736);
    v499 = (__int128 *)(a1 + 1600);
    v497 = (_BYTE *)(a1 + 6952);
    v47 = 0xF00000006;
    v493 = vdupq_n_s64(0x40000uLL);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v48 = *(_QWORD *)(a1 + 1432) - *(_QWORD *)(a1 + 1528);
          v49 = 1 << *(_DWORD *)(a1 + 12);
          v344 = v49 >= v48;
          v50 = v49 - v48;
          if (!v344)
            v50 = 0;
          v51 = *(char *)(a1 + 1619);
          v52 = v50 >= v51 ? *(char *)(a1 + 1619) : v50;
          v53 = (v51 & 0x80000000) == 0 ? v52 : v50;
          if (!v53 || !*a3)
            break;
          if (v53 >= *a3)
            v54 = *a3;
          else
            v54 = v53;
          v55 = (char *)*a4;
          v56 = *(_DWORD *)(a1 + 1460);
          if (v56 || v54 >= *(unsigned int *)(a1 + 1448))
          {
            v66 = *(_DWORD *)(a1 + 1452);
            if (*(_DWORD *)(a1 + 1456) < v66)
            {
              v67 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), v66 + 2 + 7);
              if (!v67)
                goto LABEL_724;
              v68 = v67;
              v69 = *(const void **)(a1 + 1464);
              if (v69)
              {
                memcpy(v67, v69, (*(_DWORD *)(a1 + 1456) + 2) + 7);
                (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *(_QWORD *)(a1 + 1464));
              }
              v70 = 0;
              *(_QWORD *)(a1 + 1464) = v68;
              *(_DWORD *)(a1 + 1456) = v66;
              *(_QWORD *)(a1 + 1472) = v68 + 2;
              v68[1] = 0;
              *(_BYTE *)(*(_QWORD *)(a1 + 1472) - 2) = 0;
              do
                *(_BYTE *)(*(_QWORD *)(a1 + 1472) + *(unsigned int *)(a1 + 1456) + v70++) = 0;
              while (v70 != 7);
              *(_BYTE *)(*(_QWORD *)(a1 + 1472) + (*(_DWORD *)(a1 + 1440) - 2)) = 0;
              *(_BYTE *)(*(_QWORD *)(a1 + 1472) + (*(_DWORD *)(a1 + 1440) - 1)) = 0;
              *(_BYTE *)(*(_QWORD *)(a1 + 1472) + *(unsigned int *)(a1 + 1440)) = -15;
              v56 = *(_DWORD *)(a1 + 1460);
            }
            v71 = *(_DWORD *)(a1 + 1444) & v56;
            v72 = *(unsigned int *)(a1 + 1448);
            v73 = *(unsigned int *)(a1 + 1440);
            v74 = *(_QWORD *)(a1 + 1472);
            if (v71 < v72)
            {
              if (v54 >= v72 - v71)
                v360 = v72 - v71;
              else
                v360 = v54;
              memcpy((void *)(v74 + v73 + v71), v55, v360);
              v73 = *(unsigned int *)(a1 + 1440);
              v74 = *(_QWORD *)(a1 + 1472);
            }
            v75 = (void *)(v74 + v71);
            if (v54 + v71 > v73)
            {
              if (v54 >= (unint64_t)*(unsigned int *)(a1 + 1452) - v71)
                v361 = *(unsigned int *)(a1 + 1452) - v71;
              else
                v361 = v54;
              memcpy(v75, v55, v361);
              v75 = *(void **)(a1 + 1472);
              v362 = *(unsigned int *)(a1 + 1440) - v71;
              v76 = &v55[v362];
              v77 = v54 - v362;
            }
            else
            {
              v76 = v55;
              v77 = v54;
            }
            memcpy(v75, v76, v77);
            v78 = *(_DWORD *)(a1 + 1460);
            *(_BYTE *)(*(_QWORD *)(a1 + 1472) - 2) = *(_BYTE *)(*(_QWORD *)(a1 + 1472)
                                                                + (*(_DWORD *)(a1 + 1440) - 2));
            *(_BYTE *)(*(_QWORD *)(a1 + 1472) - 1) = *(_BYTE *)(*(_QWORD *)(a1 + 1472)
                                                                + (*(_DWORD *)(a1 + 1440) - 1));
            if (v78 >= 0)
              v61 = (*(_DWORD *)(a1 + 1460) & 0x7FFFFFFF) + (v54 & 0x7FFFFFFF);
            else
              v61 = ((*(_DWORD *)(a1 + 1460) & 0x7FFFFFFF) + (v54 & 0x7FFFFFFF)) | 0x80000000;
            *(_DWORD *)(a1 + 1460) = v61;
          }
          else
          {
            *(_DWORD *)(a1 + 1460) = v54;
            v57 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), (v54 + 2) + 7);
            if (!v57)
              goto LABEL_724;
            v58 = v57;
            v59 = *(const void **)(a1 + 1464);
            if (v59)
            {
              memcpy(v57, v59, (*(_DWORD *)(a1 + 1456) + 2) + 7);
              (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *(_QWORD *)(a1 + 1464));
            }
            v60 = 0;
            *(_QWORD *)(a1 + 1464) = v58;
            *(_DWORD *)(a1 + 1456) = v54;
            *(_QWORD *)(a1 + 1472) = v58 + 2;
            v58[1] = 0;
            *(_BYTE *)(*(_QWORD *)(a1 + 1472) - 2) = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a1 + 1472) + *(unsigned int *)(a1 + 1456) + v60++) = 0;
            while (v60 != 7);
            memcpy(*(void **)(a1 + 1472), v55, v54);
            v61 = *(unsigned int *)(a1 + 1460);
          }
          *(_QWORD *)(a1 + 1432) += v54;
          if (v61 <= *(unsigned int *)(a1 + 1444))
          {
            v79 = (_DWORD *)(*(_QWORD *)(a1 + 1472) + v61);
            *(_DWORD *)((char *)v79 + 3) = 0;
            *v79 = 0;
          }
          *a4 = (char *)*a4 + v54;
          *a3 -= v54;
          *(_QWORD *)(a1 + 6920) += v54;
          v80 = *(char *)(a1 + 1619);
          if (v80 >= 1)
            *(_BYTE *)(a1 + 1619) = v80 - v54;
        }
        if (!sub_2367B7B10(a1, a5, a6, a7))
          break;
        if (*(unsigned __int8 *)(a1 + 1619) == 255)
        {
          v65 = *(_DWORD *)(a1 + 6972);
          if (!v65)
            goto LABEL_108;
          if (v65 == 1 && !*(_QWORD *)(a1 + 6936))
          {
            *(_DWORD *)(a1 + 6972) = 0;
            *(_QWORD *)(a1 + 6928) = 0;
LABEL_108:
            *(_BYTE *)(a1 + 1619) = -2;
          }
        }
      }
      if (*(_QWORD *)(a1 + 6936))
        return 1;
      v81 = *(_DWORD *)(a1 + 6972);
      if (v81)
      {
        if (v81 == 1)
          goto LABEL_722;
        return 1;
      }
      if (!v515 && v53)
        return 1;
      v82 = *a3;
      if (*a3)
        v83 = 0;
      else
        v83 = v515 == 2;
      if (*a3)
        v84 = 0;
      else
        v84 = v515 == 1;
      if ((v83 & 1) == 0 && !*(_BYTE *)(a1 + 1619))
      {
        *(_BYTE *)(a1 + 1619) = -1;
        v84 = 1;
      }
      v85 = *(_QWORD *)(a1 + 1432);
      v86 = *(_QWORD *)(a1 + 1528);
      v87 = v85 - v86;
      if (!*(_QWORD *)(a1 + 24))
      {
        v88 = v87 | v82;
        v90 = v87 + v82;
        v89 = (v88 | v90) >> 30;
        v90 = v90;
        if (v89)
          v90 = 0x40000000;
        *(_QWORD *)(a1 + 24) = v90;
      }
      v520 = v85 - v86;
      v91 = v86;
      if (v86 > 0xBFFFFFFF)
        v91 = (((2 * (int)v86) >> 1) & 0xC0000000 | v86 & 0x3FFFFFFF) ^ 0x80000000;
      v519 = v91;
      v92 = *(_DWORD *)(a1 + 4);
      v93 = *(int **)(a1 + 1472);
      v512 = *(unsigned int *)(a1 + 1444);
      if (v85 != v86)
        break;
      if (v93)
      {
        v94 = !v84;
        if (v92 < 2)
          v94 = 1;
        if ((_DWORD)v83 || !v94)
          break;
      }
      else if ((_DWORD)v83)
      {
        v106 = *(_BYTE *)(a1 + 1618);
        v107 = *(unsigned __int16 *)(a1 + 1616) | (3 << v106);
        *(_WORD *)(a1 + 1616) = v107;
        v106 += 2;
        *(_BYTE *)(a1 + 1618) = v106;
        *v497 = v107;
        *(_BYTE *)(a1 + 6953) = BYTE1(v107);
        *(_QWORD *)(a1 + 6928) = v497;
        *(_QWORD *)(a1 + 6936) = ((unint64_t)v106 + 7) >> 3;
        a4 = (const void **)v514;
        a3 = v517;
        goto LABEL_663;
      }
      *(_QWORD *)(a1 + 6936) = 0;
      a4 = (const void **)v514;
      a3 = v517;
LABEL_662:
      if ((v83 | v84) == 1)
      {
LABEL_663:
        if ((_DWORD)v83)
          v458 = 2;
        else
          v458 = 1;
        *(_DWORD *)(a1 + 6972) = v458;
      }
    }
    if ((signed int)v92 > *(_DWORD *)(a1 + 1400) || *(_DWORD *)(a1 + 6976))
      return 0;
    if ((_DWORD)v83)
      *(_DWORD *)(a1 + 6976) = 1;
    if (v87 > 1 << *(_DWORD *)(a1 + 12))
      return 0;
    if (!v92)
      goto LABEL_163;
    if (v92 == 1)
    {
      if (!*(_QWORD *)(a1 + 6904))
      {
        v95 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 0x80000);
        if (!v95)
          goto LABEL_724;
        *(_QWORD *)(a1 + 6904) = v95;
        v96 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 0x20000);
        if (!v96)
          goto LABEL_724;
        *(_QWORD *)(a1 + 6912) = v96;
      }
LABEL_163:
      v97 = a5;
      v98 = a7;
      v99 = v84;
      *(_QWORD *)&__dst[0] = *(unsigned __int8 *)(a1 + 1618);
      *(_QWORD *)v522 = 0;
      v100 = (_BYTE *)sub_2367B7C44(a1, (2 * v87 + 503));
      *v100 = *(_BYTE *)(a1 + 1616);
      v100[1] = *(_BYTE *)(a1 + 1617);
      sub_2367B7CB0(a1, *(_DWORD *)(a1 + 4), v87, (unint64_t *)v522);
      v102 = (char *)v93 + (v512 & v91);
      if (*(_DWORD *)(a1 + 4))
        sub_2367AE754(*(unsigned int **)(a1 + 6896), v102, v87, v83, *(unsigned __int8 **)(a1 + 6904), *(unsigned __int8 **)(a1 + 6912), v101, v522[0], (unint64_t *)__dst, (uint64_t)v100);
      else
        sub_2367A96C4(*(_QWORD *)(a1 + 6888), v102, v87, v83, v101, v522[0], (unint64_t *)__dst, (uint64_t)v100);
      a4 = (const void **)v514;
      a3 = v517;
      v108 = __dst[0];
      v109 = *(_QWORD *)&__dst[0] >> 3;
      *(_WORD *)(a1 + 1616) = v100[*(_QWORD *)&__dst[0] >> 3];
      *(_BYTE *)(a1 + 1618) = v108 & 7;
      sub_2367B7D80(a1);
      *(_QWORD *)(a1 + 6928) = v100;
      *(_QWORD *)(a1 + 6936) = v109;
      a6 = v513;
      v84 = v99;
      a7 = v98;
      a5 = v97;
      goto LABEL_662;
    }
    v506 = v84;
    v103 = (v87 >> 1) + *(_QWORD *)(a1 + 1496) + 1;
    if (v103 > *(_QWORD *)(a1 + 1480))
    {
      v104 = v103 + (v87 >> 2) + 16;
      *(_QWORD *)(a1 + 1480) = v104;
      if (v104)
      {
        v105 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 16 * v104);
        if (!v105)
          goto LABEL_724;
      }
      else
      {
        v105 = 0;
      }
      v110 = *(const void **)(a1 + 1488);
      if (v110)
      {
        memcpy(v105, v110, 16 * *(_QWORD *)(a1 + 1496));
        (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *(_QWORD *)(a1 + 1488));
      }
      *(_QWORD *)(a1 + 1488) = v105;
    }
    v111 = v87;
    if (v91)
      v112 = 0;
    else
      v112 = v83;
    if (*(_DWORD *)(a1 + 1672))
    {
      v113 = v512;
      if (*(_DWORD *)(a1 + 1716))
        goto LABEL_294;
      goto LABEL_261;
    }
    memset(__dst, 0, 32);
    v114 = *(_DWORD *)(a1 + 4);
    if ((int)v114 < 10)
    {
      if (v114 == 4)
      {
        if (*(_QWORD *)(a1 + 24) >= 0x100000uLL)
          v114 = 54;
      }
      else if ((int)v114 > 4)
      {
        v115 = *(_DWORD *)(a1 + 8);
        if (v115 > 16)
        {
          v126 = v114 - 1;
          if (v115 < 0x13 || *(_QWORD *)(a1 + 24) < 0x100000uLL)
          {
            *(_DWORD *)(a1 + 48) = v126;
            if (v114 >= 9)
              v343 = 16;
            else
              v343 = 10;
            v344 = v114 >= 7;
            if (v114 < 7)
              v345 = 14;
            else
              v345 = 15;
            *(_DWORD *)(a1 + 40) = 5;
            *(_DWORD *)(a1 + 44) = v345;
            if (v344)
              v346 = v343;
            else
              v346 = 4;
            *(_DWORD *)(a1 + 56) = v346;
            v114 = 5;
          }
          else
          {
            *(_QWORD *)(a1 + 40) = v47;
            *(_DWORD *)(a1 + 48) = v126;
            if (v114 >= 9)
              v127 = 16;
            else
              v127 = 10;
            if (v114 >= 7)
              v128 = v127;
            else
              v128 = 4;
            *(_DWORD *)(a1 + 52) = 5;
            *(_DWORD *)(a1 + 56) = v128;
            v114 = 6;
          }
LABEL_198:
          v117 = *(_DWORD *)(a1 + 8);
          if (v117 >= 25)
          {
            switch(v114)
            {
              case 0x36u:
                *v500 = 55;
                *(_DWORD *)(a1 + 1712) = *(_DWORD *)(a1 + 56);
                *v507 = *(_OWORD *)v500;
                *v495 = 0;
                *(_QWORD *)(a1 + 1688) = 0;
                v119 = xmmword_2368AF430;
LABEL_208:
                __dst[0] = v119;
LABEL_210:
                v62.i64[0] = 0x4000000;
                __dst[1] = xmmword_2368AF420;
                goto LABEL_233;
              case 6u:
                *(_DWORD *)(a1 + 40) = 65;
                *v507 = *(_OWORD *)v500;
                *(_DWORD *)(a1 + 1712) = *(_DWORD *)(a1 + 56);
                *v495 = 0;
                *(_QWORD *)(a1 + 1688) = 0;
                v120 = *(_DWORD *)(a1 + 44);
                v121 = 2 << v120;
                v122 = 4 << v120 << *(_DWORD *)(a1 + 48);
                *(_QWORD *)&__dst[0] = v121;
                *((_QWORD *)&__dst[0] + 1) = v122;
                goto LABEL_210;
              case 3u:
                *v500 = 35;
                *(_DWORD *)(a1 + 1712) = *(_DWORD *)(a1 + 56);
                *v507 = *(_OWORD *)v500;
                *v495 = 0;
                *(_QWORD *)(a1 + 1688) = 0;
LABEL_206:
                v119 = xmmword_2368AF440;
                goto LABEL_208;
            }
          }
          v62 = *(float32x4_t *)v500;
          *v507 = *(_OWORD *)v500;
          *(_DWORD *)(a1 + 1712) = *(_DWORD *)(a1 + 56);
          *v495 = 0;
          *(_QWORD *)(a1 + 1688) = 0;
          switch(v114)
          {
            case 2u:
            case 3u:
              v118 = 0x40000;
              goto LABEL_224;
            case 4u:
              v118 = 0x80000;
              goto LABEL_224;
            case 5u:
            case 6u:
              v123 = *(_DWORD *)(a1 + 44);
              v124 = 2 << v123;
              v125 = 4 << v123 << *(_DWORD *)(a1 + 48);
              *(_QWORD *)&__dst[0] = v124;
              goto LABEL_228;
            case 7u:
            case 8u:
            case 9u:
              break;
            case 0xAu:
              v129 = 1 << v117;
              if ((v112 & (1 << v117 > (unint64_t)v87)) != 0)
                v129 = v87;
              v125 = 8 * v129;
              *(_QWORD *)&__dst[0] = 0x80000;
LABEL_228:
              *((_QWORD *)&__dst[0] + 1) = v125;
              break;
            default:
              switch(v114)
              {
                case '#':
                  goto LABEL_206;
                case '$':
                case '%':
                case '&':
                case '\'':
                  goto LABEL_233;
                case '(':
                  v62 = (float32x4_t)v493;
                  goto LABEL_232;
                case ')':
                  v62 = (float32x4_t)vdupq_n_s64(0x40000uLL);
                  goto LABEL_232;
                case '*':
                  v62 = (float32x4_t)xmmword_2368AF450;
LABEL_232:
                  __dst[0] = v62;
                  goto LABEL_233;
                default:
                  if (v114 != 54)
                    goto LABEL_233;
                  v118 = 0x400000;
                  break;
              }
LABEL_224:
              *(_QWORD *)&__dst[0] = v118;
              break;
          }
LABEL_233:
          for (i = 0; i != 32; i += 8)
          {
            if (*(_QWORD *)((char *)__dst + i))
            {
              v131 = (*(uint64_t (**)(_QWORD))(a1 + 1408))(*(_QWORD *)(a1 + 1424));
              if (!v131)
                goto LABEL_724;
              *(_QWORD *)(a1 + i + 1640) = v131;
            }
          }
          v132 = *(_DWORD *)v507;
          if (*(int *)v507 <= 34)
          {
            v113 = v512;
            switch(v132)
            {
              case 2:
              case 3:
              case 4:
                goto LABEL_251;
              case 5:
                *(_QWORD *)(a1 + 1752) = v504;
                v136 = *(_DWORD *)(a1 + 1700);
                *(_DWORD *)(a1 + 1736) = 32 - v136;
                *(_QWORD *)(a1 + 1720) = 1 << v136;
                v137 = *(_DWORD *)(a1 + 1704);
                *(_QWORD *)(a1 + 1728) = 1 << v137;
                *(_DWORD *)(a1 + 1740) = (1 << v137) - 1;
                v62 = *(float32x4_t *)v504;
                *(__n128 *)(a1 + 1760) = *v504;
                *(_DWORD *)(a1 + 1744) = v137;
                *(_DWORD *)(a1 + 1748) = *(_DWORD *)(a1 + 1712);
                break;
              case 6:
                v62.i64[0] = sub_2367B7DC8(v504, (uint64_t)v496).n128_u64[0];
                break;
              case 10:
                *(_QWORD *)(a1 + 1728) = *(_QWORD *)(a1 + 1640);
                *(_QWORD *)(a1 + 1744) = *(_QWORD *)(a1 + 1648);
                v142 = -1 << *(_DWORD *)(a1 + 8);
                *(_QWORD *)(a1 + 1720) = ~v142;
                *(_DWORD *)(a1 + 1736) = v142 + 1;
                break;
              default:
                break;
            }
          }
          else
          {
            v113 = v512;
            if (v132 > 53)
            {
              switch(v132)
              {
                case '6':
LABEL_251:
                  *(_QWORD *)(a1 + 1720) = v504;
                  v135 = *(_QWORD *)(a1 + 1640);
LABEL_252:
                  *(_QWORD *)(a1 + 1728) = v135;
                  break;
                case '7':
LABEL_253:
                  *(_QWORD *)(a1 + 1936) = v504;
                  v62 = *(float32x4_t *)(a1 + 1672);
                  v63 = *(_OWORD *)(a1 + 1688);
                  *(float32x4_t *)(a1 + 1808) = v62;
                  *(_OWORD *)(a1 + 1824) = v63;
                  v64 = *(int32x4_t *)(a1 + 1704);
                  *(int32x4_t *)(a1 + 1840) = v64;
                  v141 = *v504;
                  v140 = *(_OWORD *)(a1 + 1656);
                  *(__n128 *)(a1 + 1776) = *v504;
                  *(_OWORD *)(a1 + 1792) = v140;
                  *(float32x4_t *)(a1 + 1888) = v62;
                  *(_OWORD *)(a1 + 1904) = v63;
                  *(int32x4_t *)(a1 + 1920) = v64;
                  *(__n128 *)(a1 + 1856) = v141;
                  *(_OWORD *)(a1 + 1872) = v140;
                  *(_DWORD *)(a1 + 1944) = 1;
                  *(_QWORD *)(a1 + 1952) = a1;
                  break;
                case 'A':
                  *(_QWORD *)(a1 + 1992) = v504;
                  v62 = *(float32x4_t *)(a1 + 1672);
                  v63 = *(_OWORD *)(a1 + 1688);
                  *(float32x4_t *)(a1 + 1864) = v62;
                  *(_OWORD *)(a1 + 1880) = v63;
                  v64 = *(int32x4_t *)(a1 + 1704);
                  *(int32x4_t *)(a1 + 1896) = v64;
                  v139 = *v504;
                  v138 = *(_OWORD *)(a1 + 1656);
                  *(__n128 *)(a1 + 1832) = *v504;
                  *(_OWORD *)(a1 + 1848) = v138;
                  *(float32x4_t *)(a1 + 1944) = v62;
                  *(_OWORD *)(a1 + 1960) = v63;
                  *(int32x4_t *)(a1 + 1976) = v64;
                  *(__n128 *)(a1 + 1912) = v139;
                  *(_OWORD *)(a1 + 1928) = v138;
                  *(_DWORD *)(a1 + 2000) = 1;
                  *(_QWORD *)(a1 + 2008) = a1;
                  break;
              }
            }
            else
            {
              switch(v132)
              {
                case '#':
                  goto LABEL_253;
                case '(':
                case ')':
                  *(_QWORD *)(a1 + 1752) = v504;
                  v62 = *(float32x4_t *)v504;
                  *(_OWORD *)(a1 + 1736) = *(_OWORD *)(a1 + 1640);
                  v133 = *(_DWORD *)(a1 + 4);
                  if (v133 >= 7)
                    v134 = 7;
                  else
                    v134 = 8;
                  v135 = (v134 << (v133 - 4));
                  goto LABEL_252;
                case '*':
                  *(_QWORD *)(a1 + 2768) = v504;
                  v62 = *(float32x4_t *)v504;
                  *(__n128 *)(a1 + 2752) = *v504;
                  v143 = *(_DWORD *)(a1 + 4);
                  if (v143 >= 7)
                    v144 = 7;
                  else
                    v144 = 8;
                  *(_QWORD *)(a1 + 2744) = (v144 << (v143 - 4));
                  break;
                default:
                  break;
              }
            }
          }
          *(_DWORD *)(a1 + 1716) = 0;
          *(_DWORD *)(a1 + 1672) = 1;
LABEL_261:
          v145 = *(_DWORD *)v507;
          if (*(int *)v507 <= 34)
          {
            switch(v145)
            {
              case 2:
                v146 = *(_DWORD **)(a1 + 1728);
                if (!v112 || v111 > 0x800)
                  goto LABEL_288;
                if (v111)
                {
                  v147 = v93;
                  v148 = v111;
                  do
                  {
                    v149 = *(_QWORD *)v147;
                    v147 = (int *)((char *)v147 + 1);
                    *(_DWORD *)((char *)v146 + (((0xBD1E35A7BD000000 * v149) >> 46) & 0x3FFFC)) = 0;
                    --v148;
                  }
                  while (v148);
                }
                break;
              case 3:
                v146 = *(_DWORD **)(a1 + 1728);
                if (v112 && v111 <= 0x800)
                {
                  if (v111)
                  {
                    v150 = v93;
                    v151 = v111;
                    do
                    {
                      v152 = *(_QWORD *)v150;
                      v150 = (int *)((char *)v150 + 1);
                      v153 = (0xBD1E35A7BD000000 * v152) >> 48;
                      v146[v153] = 0;
                      v146[(unsigned __int16)(v153 + 8)] = 0;
                      --v151;
                    }
                    while (v151);
                  }
                }
                else
                {
LABEL_288:
                  bzero(v146, 0x40000uLL);
                }
                break;
              case 4:
                sub_2367B7E1C(*(_DWORD **)(a1 + 1728), v112, v111, (uint64_t)v93);
                break;
              case 5:
                sub_2367B7E7C(v496, v112, v111, v93);
                break;
              case 6:
                sub_2367B7ECC(v496, v112, v111, (uint64_t *)v93);
                break;
              case 10:
                v154 = 0;
                v155 = *(_QWORD *)(a1 + 1728);
                v156 = (const float *)(a1 + 1736);
                v62 = vld1q_dup_f32(v156);
                do
                {
                  *(float32x4_t *)(v155 + v154) = v62;
                  v154 += 16;
                }
                while (v154 != 0x80000);
                break;
              default:
                break;
            }
          }
          else if (v145 > 53)
          {
            switch(v145)
            {
              case '6':
                sub_2367B8060(*(_DWORD **)(a1 + 1728), v112, v111, (uint64_t)v93);
                break;
              case '7':
                sub_2367B81F4((uint64_t)v496, v112, v111, (uint64_t)v93);
                break;
              case 'A':
                sub_2367B82DC((uint64_t)v496, v112, v111, (uint64_t *)v93);
                break;
            }
          }
          else
          {
            switch(v145)
            {
              case '#':
                sub_2367B80C4((uint64_t)v496, v112, v111, (uint64_t *)v93);
                break;
              case '(':
              case ')':
                sub_2367B7F2C((uint64_t)v496, v112, v111, v93);
                break;
              case '*':
                sub_2367B7FC4((void **)v496, v112, v111, v93);
                break;
              default:
                break;
            }
          }
          *(_DWORD *)(a1 + 1716) = 1;
LABEL_294:
          v157 = v91;
          v158 = *(_DWORD *)v507;
          if (*(int *)v507 <= 34)
          {
            switch(v158)
            {
              case 2:
                if (v111 >= 7 && v91 >= 3)
                {
                  v184 = *(_QWORD *)(a1 + 1728);
                  *(_DWORD *)(v184
                            + (((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 3) & v113))) >> 46) & 0x3FFFC)) = v91 - 3;
                  *(_DWORD *)(v184
                            + (((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 2) & v113))) >> 46) & 0x3FFFC)) = v91 - 2;
                  *(_DWORD *)(v184
                            + (((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 1) & v113))) >> 46) & 0x3FFFC)) = v91 - 1;
                }
                goto LABEL_428;
              case 3:
                if (v111 >= 7 && v91 >= 3)
                {
                  v199 = *(_QWORD *)(a1 + 1728);
                  *(_DWORD *)(v199
                            + 4
                            * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 3) & v113))) >> 48)
                                               + ((v91 - 3) & 8))) = v91 - 3;
                  *(_DWORD *)(v199
                            + 4
                            * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 2) & v113))) >> 48)
                                               + ((v91 - 2) & 8))) = v91 - 2;
                  v200 = v91 - 1;
                  v201 = (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + (v200 & v113))) >> 48)
                                          + (v200 & 8));
                  goto LABEL_409;
                }
                goto LABEL_428;
              case 4:
                if (v111 >= 7 && v91 >= 3)
                {
                  v199 = *(_QWORD *)(a1 + 1728);
                  *(_DWORD *)(v199
                            + 4
                            * (((((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 3) & v113))) >> 32) >> 15)
                              + ((v91 - 3) & 0x18)) & 0x1FFFF)) = v91 - 3;
                  *(_DWORD *)(v199
                            + 4
                            * (((((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 2) & v113))) >> 32) >> 15)
                              + ((v91 - 2) & 0x18)) & 0x1FFFF)) = v91 - 2;
                  v200 = v91 - 1;
                  v201 = ((((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + (v200 & v113))) >> 32) >> 15)
                        + (v200 & 0x18)) & 0x1FFFF;
                  goto LABEL_409;
                }
                goto LABEL_428;
              case 5:
                if (v111 >= 3 && v91 >= 3)
                {
                  v202 = (506832829 * *(int *)((char *)v93 + ((v91 - 3) & v113))) >> *(_DWORD *)(a1 + 1736);
                  v203 = *(_QWORD *)(a1 + 1760);
                  v204 = *(unsigned __int16 *)(v203 + 2 * v202);
                  v205 = *(_QWORD *)(a1 + 1768);
                  *(_DWORD *)(v205
                            + 4 * ((v202 << *(_DWORD *)(a1 + 1744)) + (unint64_t)(*(_DWORD *)(a1 + 1740) & v204))) = v91 - 3;
                  *(_WORD *)(v203 + 2 * v202) = v204 + 1;
                  v206 = (506832829 * *(int *)((char *)v93 + ((v91 - 2) & v113))) >> *(_DWORD *)(a1 + 1736);
                  v207 = *(unsigned __int16 *)(v203 + 2 * v206);
                  *(_DWORD *)(v205
                            + 4 * ((v206 << *(_DWORD *)(a1 + 1744)) + (unint64_t)(*(_DWORD *)(a1 + 1740) & v207))) = v91 - 2;
                  *(_WORD *)(v203 + 2 * v206) = v207 + 1;
                  v208 = v91 - 1;
                  v209 = (506832829 * *(int *)((char *)v93 + (v208 & v113))) >> *(_DWORD *)(a1 + 1736);
                  v210 = *(unsigned __int16 *)(v203 + 2 * v209);
                  *(_DWORD *)(v205
                            + 4 * ((v209 << *(_DWORD *)(a1 + 1744)) + (unint64_t)(*(_DWORD *)(a1 + 1740) & v210))) = v208;
                  *(_WORD *)(v203 + 2 * v209) = v210 + 1;
                }
                goto LABEL_428;
              case 6:
                if (v111 >= 7 && v91 >= 3)
                {
                  v211 = *(_QWORD *)(a1 + 1776);
                  v212 = *(_QWORD *)(a1 + 1784);
                  v213 = *(_QWORD *)(a1 + 1744);
                  v214 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)((_BYTE *)v93 + ((v91 - 3) & v113)) & v213)) >> *(_DWORD *)(a1 + 1736);
                  v215 = *(unsigned __int16 *)(v211 + 2 * v214);
                  v216 = ((_DWORD)v214 << *(_DWORD *)(a1 + 1756))
                       + (unint64_t)(*(_DWORD *)(a1 + 1752) & v215);
                  *(_WORD *)(v211 + 2 * v214) = v215 + 1;
                  *(_DWORD *)(v212 + 4 * v216) = v91 - 3;
                  v217 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)((_BYTE *)v93 + ((v91 - 2) & v113)) & v213)) >> *(_DWORD *)(a1 + 1736);
                  v218 = *(unsigned __int16 *)(v211 + 2 * v217);
                  v219 = ((_DWORD)v217 << *(_DWORD *)(a1 + 1756))
                       + (unint64_t)(*(_DWORD *)(a1 + 1752) & v218);
                  *(_WORD *)(v211 + 2 * v217) = v218 + 1;
                  *(_DWORD *)(v212 + 4 * v219) = v91 - 2;
                  v220 = v91 - 1;
                  v221 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)((_BYTE *)v93 + (v220 & v113)) & v213)) >> *(_DWORD *)(a1 + 1736);
                  LODWORD(v217) = *(unsigned __int16 *)(v211 + 2 * v221);
                  v222 = ((_DWORD)v221 << *(_DWORD *)(a1 + 1756))
                       + (unint64_t)(*(_DWORD *)(a1 + 1752) & v217);
                  *(_WORD *)(v211 + 2 * v221) = v217 + 1;
                  *(_DWORD *)(v212 + 4 * v222) = v220;
                }
                goto LABEL_428;
              case 10:
                if (v111 < 3 || v91 < 0x80)
                  goto LABEL_428;
                v223 = v91 - 127;
                v224 = v223 + v111;
                if (v91 < v223 + v111)
                  v224 = v91;
                if (v223 >= v224)
                  goto LABEL_428;
                v225 = *(_QWORD *)(a1 + 1720);
                v226 = *(_QWORD *)(a1 + 1728);
                v227 = *(_QWORD *)(a1 + 1744);
                break;
              default:
                goto LABEL_428;
            }
            do
            {
              v228 = v223 & v113;
              v229 = 15;
              if (v157 - v223 > 0xF)
                v229 = v157 - v223;
              v230 = (506832829 * *(int *)((char *)v93 + (v223 & v113))) >> 15;
              v231 = *(unsigned int *)(v226 + 4 * v230);
              v232 = 2 * (v225 & v223);
              v233 = v232 | 1;
              *(_DWORD *)(v226 + 4 * v230) = v223;
              if (v223 == v231)
              {
LABEL_347:
                *(_DWORD *)(v227 + 4 * v232) = *v498;
                v234 = (_DWORD *)(a1 + 1736);
              }
              else
              {
                v235 = 0;
                v236 = 0;
                v237 = v225 - v229;
                v238 = 64;
                while (1)
                {
                  if (v223 - v231 > v237 || v238 == 0)
                    goto LABEL_347;
                  v240 = v231 & v113;
                  if (v236 >= v235)
                    v241 = v235;
                  else
                    v241 = v236;
                  v242 = (char *)v93 + v241 + v228;
                  v243 = (unsigned __int8 *)v93 + v241 + v240;
                  v244 = 128 - v241;
                  if (v241 > 0x78)
                  {
                    v247 = 0;
                    goto LABEL_371;
                  }
                  v245 = 0;
                  v246 = v244 >> 3;
                  v247 = v244 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v248 = *(_QWORD *)&v243[v245];
                    v249 = *(_QWORD *)&v242[v245];
                    if (v248 != v249)
                    {
                      v247 = v245 + (__clz(__rbit64(v249 ^ v248)) >> 3);
                      goto LABEL_364;
                    }
                    v245 += 8;
                    --v246;
                  }
                  while (v246);
                  v243 = (unsigned __int8 *)v93 + v241 + v240 + (v244 & 0xFFFFFFFFFFFFFFF8);
LABEL_371:
                  v253 = v244 & 7;
                  if (v253)
                  {
                    v254 = v247 | v253;
                    do
                    {
                      if (v242[v247] != *v243)
                        goto LABEL_364;
                      ++v243;
                      ++v247;
                      --v253;
                    }
                    while (v253);
                    v247 = v254;
                  }
LABEL_364:
                  v250 = v247 + v241;
                  a7 = v510;
                  v113 = v512;
                  a6 = v513;
                  a5 = v516;
                  if (v250 >= 0x80)
                    break;
                  v251 = *((unsigned __int8 *)v93 + v250 + v240);
                  v252 = 2 * (v231 & v225);
                  if (*((unsigned __int8 *)v93 + v250 + v228) <= v251)
                  {
                    *(_DWORD *)(v227 + 4 * v233) = v231;
                    v233 = 2 * (v231 & v225);
                    v235 = v250;
                  }
                  else
                  {
                    *(_DWORD *)(v227 + 4 * v232) = v231;
                    v252 |= 1uLL;
                    v232 = v252;
                    v236 = v250;
                  }
                  v231 = *(unsigned int *)(v227 + 4 * v252);
                  --v238;
                  if (v223 == v231)
                    goto LABEL_347;
                }
                v255 = (int *)(v227 + 8 * (v231 & v225));
                v256 = *v255;
                v234 = v255 + 1;
                *(_DWORD *)(v227 + 4 * v232) = v256;
              }
              *(_DWORD *)(v227 + 4 * v233) = *v234;
              ++v223;
            }
            while (v223 != v224);
          }
          else if (v158 > 53)
          {
            switch(v158)
            {
              case '6':
                if (v111 >= 7 && v91 >= 3)
                {
                  v199 = *(_QWORD *)(a1 + 1728);
                  *(_DWORD *)(v199
                            + 4
                            * (((((unint64_t)(0x35A7BD1E35A7BD00
                                                                 * *(_QWORD *)((char *)v93 + ((v91 - 3) & v113))) >> 32) >> 12)
                              + ((v91 - 3) & 0x18)) & 0xFFFFF)) = v91 - 3;
                  *(_DWORD *)(v199
                            + 4
                            * (((((unint64_t)(0x35A7BD1E35A7BD00
                                                                 * *(_QWORD *)((char *)v93 + ((v91 - 2) & v113))) >> 32) >> 12)
                              + ((v91 - 2) & 0x18)) & 0xFFFFF)) = v91 - 2;
                  v200 = v91 - 1;
                  v201 = ((((unint64_t)(0x35A7BD1E35A7BD00
                                                           * *(_QWORD *)((char *)v93 + (v200 & v113))) >> 32) >> 12)
                        + (v200 & 0x18)) & 0xFFFFF;
LABEL_409:
                  *(_DWORD *)(v199 + 4 * v201) = v200;
                }
                break;
              case '7':
                if (v111 >= 7 && v91 >= 3)
                {
                  v292 = *(_QWORD *)(a1 + 1728);
                  *(_DWORD *)(v292
                            + 4
                            * (((((unint64_t)(0x35A7BD1E35A7BD00
                                                                 * *(_QWORD *)((char *)v93 + ((v91 - 3) & v113))) >> 32) >> 12)
                              + ((v91 - 3) & 0x18)) & 0xFFFFF)) = v91 - 3;
                  *(_DWORD *)(v292
                            + 4
                            * (((((unint64_t)(0x35A7BD1E35A7BD00
                                                                 * *(_QWORD *)((char *)v93 + ((v91 - 2) & v113))) >> 32) >> 12)
                              + ((v91 - 2) & 0x18)) & 0xFFFFF)) = v91 - 2;
                  *(_DWORD *)(v292
                            + 4
                            * (((((unint64_t)(0x35A7BD1E35A7BD00
                                                                 * *(_QWORD *)((char *)v93 + ((v91 - 1) & v113))) >> 32) >> 12)
                              + ((v91 - 1) & 0x18)) & 0xFFFFF)) = v91 - 1;
                }
                v293 = 4 - (v91 & 3);
                if ((v91 & 3) != 0)
                  v294 = 4 - (v91 & 3);
                else
                  v294 = 0;
                v344 = v111 >= v293;
                v295 = v111 - v293;
                if (!v344)
                  v295 = 0;
                if ((v91 & 3) == 0)
                  v295 = v111;
                v261 = v294 + v91;
                if (v295 >= v113 - (v261 & v113))
                  v295 = v113 - (v261 & v113);
                if (v295 >= 0x20)
                {
                  v296 = 0;
                  v263 = 0;
                  do
                  {
                    v263 = *((unsigned __int8 *)v93 + (v261 & v113) + v296) + v263 * *(_DWORD *)(a1 + 1764) + 1;
                    v344 = v296 >= 0x1C;
                    v296 += 4;
                  }
                  while (!v344);
LABEL_426:
                  *v498 = v263;
                }
LABEL_427:
                *(_QWORD *)(a1 + 1752) = v261;
                break;
              case 'A':
                if (v111 >= 7 && v91 >= 3)
                {
                  v185 = *(_QWORD *)(a1 + 1776);
                  v186 = *(_QWORD *)(a1 + 1784);
                  v187 = *(_QWORD *)(a1 + 1744);
                  v188 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)((_BYTE *)v93 + ((v91 - 3) & v113)) & v187)) >> *(_DWORD *)(a1 + 1736);
                  v189 = *(unsigned __int16 *)(v185 + 2 * v188);
                  v190 = ((_DWORD)v188 << *(_DWORD *)(a1 + 1756))
                       + (unint64_t)(*(_DWORD *)(a1 + 1752) & v189);
                  *(_WORD *)(v185 + 2 * v188) = v189 + 1;
                  *(_DWORD *)(v186 + 4 * v190) = v91 - 3;
                  v191 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)((_BYTE *)v93 + ((v91 - 2) & v113)) & v187)) >> *(_DWORD *)(a1 + 1736);
                  v192 = *(unsigned __int16 *)(v185 + 2 * v191);
                  v193 = ((_DWORD)v191 << *(_DWORD *)(a1 + 1756))
                       + (unint64_t)(*(_DWORD *)(a1 + 1752) & v192);
                  *(_WORD *)(v185 + 2 * v191) = v192 + 1;
                  *(_DWORD *)(v186 + 4 * v193) = v91 - 2;
                  v194 = (0x1FE35A7BD3579BD3 * (*(_QWORD *)((_BYTE *)v93 + ((v91 - 1) & v113)) & v187)) >> *(_DWORD *)(a1 + 1736);
                  LODWORD(v187) = *(unsigned __int16 *)(v185 + 2 * v194);
                  v195 = ((_DWORD)v194 << *(_DWORD *)(a1 + 1756))
                       + (unint64_t)(*(_DWORD *)(a1 + 1752) & v187);
                  *(_WORD *)(v185 + 2 * v194) = v187 + 1;
                  *(_DWORD *)(v186 + 4 * v195) = v91 - 1;
                }
                v196 = v113 - (v113 & v91);
                if (v196 >= v111)
                  v196 = v111;
                if (v196 >= 0x20)
                {
                  v197 = 0;
                  v198 = 0;
                  do
                    v198 = *((unsigned __int8 *)v93 + (v113 & v91) + v197++)
                         + v198 * *(_DWORD *)(a1 + 1820)
                         + 1;
                  while (v197 != 32);
                  *(_DWORD *)(a1 + 1792) = v198;
                }
                *(_QWORD *)(a1 + 1808) = v91;
                break;
            }
          }
          else
          {
            switch(v158)
            {
              case '#':
                if (v111 >= 7 && v91 >= 3)
                {
                  v257 = *(_QWORD *)(a1 + 1728);
                  *(_DWORD *)(v257
                            + 4
                            * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 3) & v113))) >> 48)
                                               + ((v91 - 3) & 8))) = v91 - 3;
                  *(_DWORD *)(v257
                            + 4
                            * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 2) & v113))) >> 48)
                                               + ((v91 - 2) & 8))) = v91 - 2;
                  *(_DWORD *)(v257
                            + 4
                            * (unsigned __int16)(((0xBD1E35A7BD000000 * *(_QWORD *)((char *)v93 + ((v91 - 1) & v113))) >> 48)
                                               + ((v91 - 1) & 8))) = v91 - 1;
                }
                v258 = 4 - (v91 & 3);
                if ((v91 & 3) != 0)
                  v259 = 4 - (v91 & 3);
                else
                  v259 = 0;
                v344 = v111 >= v258;
                v260 = v111 - v258;
                if (!v344)
                  v260 = 0;
                if ((v91 & 3) == 0)
                  v260 = v111;
                v261 = v259 + v91;
                if (v260 >= v113 - (v261 & v113))
                  v260 = v113 - (v261 & v113);
                if (v260 < 0x20)
                  goto LABEL_427;
                v262 = 0;
                v263 = 0;
                do
                {
                  v263 = *((unsigned __int8 *)v93 + (v261 & v113) + v262) + v263 * *(_DWORD *)(a1 + 1764) + 1;
                  v344 = v262 >= 0x1C;
                  v262 += 4;
                }
                while (!v344);
                goto LABEL_426;
              case '(':
              case ')':
                if (v111 >= 3 && v91 >= 3)
                {
                  v159 = *(_QWORD *)(a1 + 1736);
                  v160 = (506832829 * *(int *)((char *)v93 + ((v91 - 3) & v113))) >> 17;
                  v161 = v159 + 2 * v160;
                  v162 = *(_QWORD *)(a1 + 1744);
                  v163 = *(unsigned __int16 *)(a1 + 1720);
                  *(_WORD *)(a1 + 1720) = v163 + 1;
                  v164 = v91 - 3 - *(unsigned int *)(v159 + 4 * v160);
                  *(_BYTE *)(v159 + (unsigned __int16)(v91 - 3) + 196608) = v160;
                  if (v164 >= 0xFFFF)
                    v165 = -1;
                  else
                    v165 = v164;
                  v166 = (__int16 *)(v162 + 4 * v163);
                  *v166 = v165;
                  v166[1] = *(_WORD *)(v161 + 0x20000);
                  *(_DWORD *)(v159 + 4 * v160) = v91 - 3;
                  *(_WORD *)(v161 + 0x20000) = v163;
                  v167 = *(_QWORD *)(a1 + 1736);
                  v168 = (506832829 * *(int *)((char *)v93 + ((v91 - 2) & v113))) >> 17;
                  v169 = v167 + 2 * v168;
                  v170 = *(_QWORD *)(a1 + 1744);
                  v171 = *(unsigned __int16 *)(a1 + 1720);
                  *(_WORD *)(a1 + 1720) = v171 + 1;
                  v172 = v91 - 2 - *(unsigned int *)(v167 + 4 * v168);
                  *(_BYTE *)(v167 + (unsigned __int16)(v91 - 2) + 196608) = v168;
                  if (v172 >= 0xFFFF)
                    v173 = -1;
                  else
                    v173 = v172;
                  v174 = (__int16 *)(v170 + 4 * v171);
                  *v174 = v173;
                  v174[1] = *(_WORD *)(v169 + 0x20000);
                  *(_DWORD *)(v167 + 4 * v168) = v91 - 2;
                  *(_WORD *)(v169 + 0x20000) = v171;
                  v175 = v91 - 1;
                  v176 = *(_QWORD *)(a1 + 1736);
                  v177 = (506832829 * *(int *)((char *)v93 + (v175 & v113))) >> 17;
                  v178 = v176 + 2 * v177;
                  v179 = *(_QWORD *)(a1 + 1744);
                  v180 = *(unsigned __int16 *)(a1 + 1720);
                  *(_WORD *)(a1 + 1720) = v180 + 1;
                  v181 = v175 - *(unsigned int *)(v176 + 4 * v177);
                  *(_BYTE *)(v176 + (unsigned __int16)v175 + 196608) = v177;
                  if (v181 >= 0xFFFF)
                    v182 = -1;
                  else
                    v182 = v181;
                  v183 = (__int16 *)(v179 + 4 * v180);
                  *v183 = v182;
                  v183[1] = *(_WORD *)(v178 + 0x20000);
                  *(_DWORD *)(v176 + 4 * v177) = v175;
                  *(_WORD *)(v178 + 0x20000) = v180;
                }
                break;
              case '*':
                if (v111 >= 3 && v91 >= 3)
                {
                  v264 = *(_QWORD *)(a1 + 2752);
                  v265 = (506832829 * *(int *)((char *)v93 + ((v91 - 3) & v113))) >> 17;
                  v266 = v264 + 2 * v265;
                  v267 = *(_QWORD *)(a1 + 2760);
                  v268 = *((_WORD *)v496 + (v265 & 0x1FF));
                  *((_WORD *)v496 + (v265 & 0x1FF)) = v268 + 1;
                  v269 = v268 & 0x1FF;
                  v270 = v91 - 3 - *(unsigned int *)(v264 + 4 * v265);
                  *(_BYTE *)(v264 + (unsigned __int16)(v91 - 3) + 196608) = v265;
                  if (v270 >= 0xFFFF)
                    v271 = -1;
                  else
                    v271 = v270;
                  v272 = (__int16 *)(v267 + ((unint64_t)(v265 & 0x1FF) << 11) + 4 * v269);
                  *v272 = v271;
                  v272[1] = *(_WORD *)(v266 + 0x20000);
                  *(_DWORD *)(v264 + 4 * v265) = v91 - 3;
                  *(_WORD *)(v266 + 0x20000) = v269;
                  v273 = *(_QWORD *)(a1 + 2752);
                  v274 = (506832829 * *(int *)((char *)v93 + ((v91 - 2) & v113))) >> 17;
                  v275 = v273 + 2 * v274;
                  v276 = *(_QWORD *)(a1 + 2760);
                  v277 = *((_WORD *)v496 + (v274 & 0x1FF));
                  *((_WORD *)v496 + (v274 & 0x1FF)) = v277 + 1;
                  v278 = v277 & 0x1FF;
                  v279 = v91 - 2 - *(unsigned int *)(v273 + 4 * v274);
                  *(_BYTE *)(v273 + (unsigned __int16)(v91 - 2) + 196608) = v274;
                  if (v279 >= 0xFFFF)
                    v280 = -1;
                  else
                    v280 = v279;
                  v281 = (__int16 *)(v276 + ((unint64_t)(v274 & 0x1FF) << 11) + 4 * v278);
                  *v281 = v280;
                  v281[1] = *(_WORD *)(v275 + 0x20000);
                  *(_DWORD *)(v273 + 4 * v274) = v91 - 2;
                  *(_WORD *)(v275 + 0x20000) = v278;
                  v282 = v91 - 1;
                  v283 = *(_QWORD *)(a1 + 2752);
                  v284 = (506832829 * *(int *)((char *)v93 + (v282 & v113))) >> 17;
                  v285 = v283 + 2 * v284;
                  v286 = *(_QWORD *)(a1 + 2760);
                  v287 = *((_WORD *)v496 + (v284 & 0x1FF));
                  *((_WORD *)v496 + (v284 & 0x1FF)) = v287 + 1;
                  v288 = v287 & 0x1FF;
                  v289 = v282 - *(unsigned int *)(v283 + 4 * v284);
                  *(_BYTE *)(v283 + (unsigned __int16)v282 + 196608) = v284;
                  if (v289 >= 0xFFFF)
                    v290 = -1;
                  else
                    v290 = v289;
                  v291 = (__int16 *)(v286 + ((unint64_t)(v284 & 0x1FF) << 11) + 4 * v288);
                  *v291 = v290;
                  v291[1] = *(_WORD *)(v285 + 0x20000);
                  *(_DWORD *)(v283 + 4 * v284) = v282;
                  *(_WORD *)(v285 + 0x20000) = v288;
                }
                break;
              default:
                break;
            }
          }
LABEL_428:
          v297 = *(_QWORD *)(a1 + 1520);
          if (v297 <= 0xBFFFFFFF)
            v298 = *(_QWORD *)(a1 + 1520);
          else
            LODWORD(v298) = (((2 * (int)v297) >> 1) & 0xC0000000 | v297 & 0x3FFFFFFF) ^ 0x80000000;
          v299 = (_QWORD *)(a1 + 1496);
          v300 = *(_DWORD *)(a1 + 4);
          if (v300 < 10 || sub_2367BE1BC((uint64_t)v93, v298, v113, *(_QWORD *)(a1 + 1432) - v297))
            v301 = 2;
          else
            v301 = 3;
          if (*v503 && !*v509)
          {
            sub_2367B83F8(a1, &v520, &v519);
            v300 = *(_DWORD *)(a1 + 4);
          }
          v494 = (char *)&unk_236924C88 + (v301 << 9);
          if (v300 == 11)
          {
            v302 = (unint64_t *)(a1 + 1504);
            sub_23679FE04(v501, v520, v519, (uint64_t)v93, v113, (uint64_t)&unk_236924C88 + (v301 << 9), a1, v504, v505, v509, *(_QWORD *)(a1 + 1488) + 16 * *(_QWORD *)(a1 + 1496), v503, v502);
          }
          else if (v300 == 10)
          {
            v302 = (unint64_t *)(a1 + 1504);
            sub_23679EFB4(v501, v520, v519, (uint64_t)v93, v113, (uint64_t)&unk_236924C88 + (v301 << 9), a1, v504, v505, v509, *(_QWORD *)(a1 + 1488) + 16 * *(_QWORD *)(a1 + 1496), v503, v502);
          }
          else
          {
            v302 = (unint64_t *)(a1 + 1504);
            sub_236786150(v520, v519, (uint64_t)v93, v113, (uint64_t)&unk_236924C88 + (v301 << 9), a1, v504, (int *)v505, *(double *)v62.i64, *(double *)&v63, v64, (unint64_t *)v509, (_DWORD *)(*(_QWORD *)(a1 + 1488) + 16 * *(_QWORD *)(a1 + 1496)), v503, v502);
          }
          v303 = *(_DWORD *)(a1 + 8);
          v304 = *(_DWORD *)(a1 + 12);
          if (v303 <= v304)
            v303 = *(_DWORD *)(a1 + 12);
          if (v303 >= 23)
            v305 = 23;
          else
            v305 = v303;
          v306 = *(_QWORD *)(a1 + 1432);
          v307 = *(_QWORD *)(a1 + 1520);
          v308 = *(int *)(a1 + 4) <= 3 && *v503 + *v302 > 0x2FFE;
          v309 = v306 - v307;
          if (((v506 | v83) & 1) == 0 && !v308)
          {
            v310 = 1 << (v305 + 1);
            if (v309 + (1 << v304) <= v310 && *v302 < v310 >> 3 && *v503 < v310 >> 3)
            {
              if (sub_2367B7D80(a1))
                *(_DWORD *)(a1 + 1716) = 0;
LABEL_473:
              *(_QWORD *)(a1 + 6936) = 0;
LABEL_661:
              a4 = (const void **)v514;
              a3 = v517;
              v84 = v506;
              goto LABEL_662;
            }
          }
          v311 = *v509;
          if (*v509)
          {
            v312 = *(_QWORD *)(a1 + 1488);
            v313 = *(_QWORD *)(a1 + 1496);
            *(_QWORD *)(a1 + 1496) = v313 + 1;
            v314 = v312 + 16 * v313;
            *(_DWORD *)v314 = v311;
            *(_QWORD *)(v314 + 4) = 0x8000000;
            *(_WORD *)(v314 + 14) = 16;
            if (v311 > 5)
            {
              if (v311 > 0x81)
              {
                if (v311 > 0x841)
                {
                  if (v311 >> 1 >= 0xC21)
                  {
                    if (v311 < 0x5842)
                      LOWORD(v315) = 22;
                    else
                      LOWORD(v315) = 23;
                  }
                  else
                  {
                    LOWORD(v315) = 21;
                  }
                }
                else
                {
                  v315 = (__clz(v311 - 66) ^ 0x1F) + 10;
                }
              }
              else
              {
                v316 = (__clz(v311 - 2) ^ 0x1F) - 1;
                v315 = ((v311 - 2) >> v316) + 2 * v316 + 2;
              }
            }
            else
            {
              LOWORD(v315) = v311;
            }
            *(_WORD *)(v314 + 12) = ((((0x520D40u >> (6 * ((unsigned __int16)v315 >> 3))) & 0xC0)
                                    + 192 * ((unsigned __int16)v315 >> 3)) & 0xFFC7 | (8 * (v315 & 7)))
                                  + 66;
            *v302 += v311;
            *v509 = 0;
          }
          if ((v83 & 1) == 0 && v306 == v307)
            goto LABEL_473;
          v483 = v301;
          v317 = (_BYTE *)sub_2367B7C44(a1, (2 * v309 + 503));
          v489 = *(unsigned __int8 *)(a1 + 1618);
          v518 = v489;
          v487 = *(_WORD *)(a1 + 1616);
          *v317 = v487;
          v492 = (uint64_t)v317;
          v486 = HIBYTE(*(unsigned __int16 *)(a1 + 1616));
          v317[1] = v486;
          v318 = *(_QWORD *)(a1 + 1520);
          v319 = v318;
          if (v318 > 0xBFFFFFFF)
            v319 = (((2 * (int)v318) >> 1) & 0xC0000000 | v318 & 0x3FFFFFFF) ^ 0x80000000;
          v491 = v319;
          v320 = v309;
          v484 = *(unsigned __int8 *)(a1 + 1621);
          v485 = *(unsigned __int8 *)(a1 + 1620);
          v321 = *(_QWORD *)(a1 + 1504);
          v490 = *(_QWORD *)(a1 + 1496);
          v488 = *(_QWORD *)(a1 + 1488);
          memcpy(__dst, (const void *)a1, sizeof(__dst));
          if (!v320)
          {
            v329 = (_BYTE *)v492;
            *(_QWORD *)(v492 + (v489 >> 3)) = (3 << (v489 & 7)) | *(unsigned __int8 *)(v492 + (v489 >> 3));
            v518 = ((_WORD)v489 + 9) & 0x1F8;
            LODWORD(v326) = v512;
            goto LABEL_655;
          }
          v322 = v320;
          if (v320 < 3)
            goto LABEL_478;
          if ((v320 >> 8) + 2 > v490)
          {
            v330 = (double)v320;
            if ((double)v320 * 0.99 < (double)v321)
            {
              bzero(v522, 0x400uLL);
              v481 = v320;
              v331 = ((v320 + 12) * (unsigned __int128)0x13B13B13B13B13B2uLL) >> 64;
              do
              {
                ++v522[*((unsigned __int8 *)v93 + (v318 & v512))];
                v318 = (v318 + 13);
                --v331;
              }
              while (v331);
              v332 = 0;
              v333 = 0;
              v334 = 0.0;
              do
              {
                v335 = &v522[v333];
                v336 = *v335;
                if (v336 > 0xFF)
                  v337 = log2((double)v336);
                else
                  v337 = dbl_236925608[v336];
                v338 = v335[1];
                if (v338 > 0xFF)
                  v339 = log2((double)v338);
                else
                  v339 = dbl_236925608[v338];
                v333 += 2;
                v332 += v336 + v338;
                v334 = v334 - (double)v336 * v337 - (double)v338 * v339;
              }
              while ((unint64_t)(v333 - 2) < 0xFE);
              v340 = (double)v332;
              if (v332)
              {
                a6 = v513;
                v341 = 13.0;
                v342 = v332 > 0xFF ? log2((double)v332) : dbl_236925608[v332];
                v322 = v481;
                v334 = v334 + v340 * v342;
              }
              else
              {
                a6 = v513;
                v341 = 13.0;
                v322 = v481;
              }
              v347 = v334 >= v340 ? v334 : (double)v332;
              if (v347 > v330 * 7.92 / v341)
              {
LABEL_478:
                *v505 = *v499;
                v323 = v491;
                v324 = v83;
                v325 = (uint64_t)v93;
                LODWORD(v326) = v512;
                v327 = v512;
                v328 = v322;
                v329 = (_BYTE *)v492;
LABEL_654:
                sub_2367A8494(v324, v325, v323, v327, v328, (uint64_t *)&v518, (uint64_t)v329);
                goto LABEL_655;
              }
            }
          }
          v348 = *(_DWORD *)(a1 + 4);
          if (v348 <= 2)
          {
            v329 = (_BYTE *)v492;
            v326 = v512;
            v349 = v322;
            sub_2367A80D0(v501, (uint64_t)v93, v491, v322, v512, v83, a1, v488, v490, &v518, v492);
            goto LABEL_652;
          }
          v326 = v512;
          if (v348 == 3)
          {
            v329 = (_BYTE *)v492;
            v349 = v322;
            sub_2367A7B7C(v501, (uint64_t)v93, v491, v322, v512, v83, a1, v488, v490, &v518, v492);
            goto LABEL_652;
          }
          v535 = 0u;
          v534 = 0u;
          v533 = 0u;
          v532 = 0u;
          v531 = 0u;
          v530 = 0u;
          v529 = 0u;
          v528 = 0u;
          v527 = 0u;
          v526 = 0u;
          v525 = 0u;
          v524 = 0u;
          v523 = 0u;
          *(_OWORD *)v522 = 0u;
          v482 = v322;
          if (v348 > 9)
          {
            v350 = (unsigned int *)v488;
            sub_2367B9014(v501, (uint64_t)v93, v491, v512, (uint64_t)__dst, v485, v484, v488, v490, v483, (unint64_t *)v522);
LABEL_649:
            if (*(int *)(a1 + 4) >= 4)
              sub_2367BC924(HIDWORD(__dst[4]), v522);
            v477 = (uint64_t)v350;
            v329 = (_BYTE *)v492;
            v349 = v482;
            sub_2367A5FF0(v501, (uint64_t)v93, v491, v482, v326, v485, v484, v83, (unsigned int *)__dst, v483, v477, v490, (uint64_t)v522, &v518, v492);
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v523);
            *(_QWORD *)&v523 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *((_QWORD *)&v523 + 1));
            *((_QWORD *)&v523 + 1) = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v526);
            *(_QWORD *)&v526 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *((_QWORD *)&v526 + 1));
            *((_QWORD *)&v526 + 1) = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v529);
            *(_QWORD *)&v529 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *((_QWORD *)&v529 + 1));
            *((_QWORD *)&v529 + 1) = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v531);
            *(_QWORD *)&v531 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v532);
            *(_QWORD *)&v532 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v533);
            *(_QWORD *)&v533 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v534);
            *(_QWORD *)&v534 = 0;
            (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v535);
LABEL_652:
            if (v349 + 4 < v518 >> 3)
            {
              *v505 = *v499;
              *v329 = v487;
              v329[1] = v486;
              v518 = v489;
              v323 = v491;
              v324 = v83;
              v325 = (uint64_t)v93;
              v327 = v326;
              v328 = v349;
              goto LABEL_654;
            }
LABEL_655:
            v455 = v518;
            v456 = v518 >> 3;
            *(_WORD *)(a1 + 1616) = v329[v518 >> 3];
            *(_BYTE *)(a1 + 1618) = v455 & 7;
            *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a1 + 1432);
            if (sub_2367B7D80(a1))
              *(_DWORD *)(a1 + 1716) = 0;
            v457 = *(_QWORD *)(a1 + 1520);
            if (v457)
            {
              *(_BYTE *)(a1 + 1620) = *((_BYTE *)v93 + (((_DWORD)v457 - 1) & v326));
              if (v457 != 1)
                *(_BYTE *)(a1 + 1621) = *((_BYTE *)v93 + (((_DWORD)v457 - 2) & v326));
            }
            *v299 = 0;
            v299[1] = 0;
            *v499 = *v505;
            *(_QWORD *)(a1 + 6928) = v329;
            *(_QWORD *)(a1 + 6936) = v456;
            goto LABEL_661;
          }
          v350 = (unsigned int *)v488;
          if (*(_DWORD *)(a1 + 32))
          {
            v351 = 0;
            v352 = v491;
            v353 = 1;
LABEL_648:
            v476 = (uint64_t)v351;
            v326 = v512;
            sub_2367BA440(v501, (uint64_t)v93, v352, v512, v485, v484, (uint64_t)v494, v353, v476, v350, v490, (uint64_t *)v522);
            goto LABEL_649;
          }
          v354 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 1792);
          if (!v354)
            goto LABEL_724;
          v355 = v354;
          v351 = 0;
          if (v482 < 0x40)
          {
            v356 = 1;
          }
          else
          {
            v356 = 1;
            v480 = *(_DWORD *)(a1 + 4);
            if (v480 >= 5)
            {
              v357 = v482 + v491;
              v479 = v47;
              v478 = v83;
              if (*(_QWORD *)(a1 + 24) >> 20)
              {
                bzero(v354, 0x700uLL);
                v363 = 0;
                v364 = v491 + 64;
                v365 = v491;
                do
                {
                  v366 = *((unsigned __int8 *)v93 + (((_DWORD)v365 + 1) & v512));
                  v367 = *((unsigned __int8 *)v93 + (v365 & v512));
                  for (j = 2; j != 64; ++j)
                  {
                    v369 = v366;
                    v366 = *((unsigned __int8 *)v93 + (((_DWORD)v365 + (_DWORD)j) & v512));
                    v370 = dword_2368D7250[(*((_BYTE *)&unk_236924C88 + v367 + 1280) | *((_BYTE *)&unk_236924C88 + v369 + 1024))];
                    ++v355[v366 >> 3];
                    v371 = (v366 >> 3) & 0xFFFFE01F | (32 * v370);
                    v367 = v369;
                    ++v355[v371 + 32];
                  }
                  v363 += 62;
                  v365 += 4096;
                  v364 += 4096;
                }
                while (v364 <= v357);
                v372 = 0;
                v373 = 0;
                v374 = 0.0;
                do
                {
                  v375 = &v355[v373];
                  v376 = *v375;
                  if (v376 > 0xFF)
                    v377 = log2((double)v376);
                  else
                    v377 = dbl_236925608[v376];
                  v378 = v375[1];
                  if (v378 > 0xFF)
                    v379 = log2((double)v378);
                  else
                    v379 = dbl_236925608[v378];
                  v373 += 2;
                  v372 += v376 + v378;
                  v374 = v374 - (double)v376 * v377 - (double)v378 * v379;
                }
                while ((unint64_t)(v373 - 2) < 0x1E);
                if (v372)
                {
                  if (v372 > 0xFF)
                    v380 = log2((double)v372);
                  else
                    v380 = dbl_236925608[v372];
                  v374 = v374 + (double)v372 * v380;
                }
                v381 = 0;
                v382 = 0.0;
                v383 = v355;
                do
                {
                  v384 = 0;
                  v385 = 0;
                  v386 = 0.0;
                  do
                  {
                    v387 = &v383[v385];
                    v388 = v387[32];
                    if (v388 > 0xFF)
                      v389 = log2((double)v388);
                    else
                      v389 = dbl_236925608[v388];
                    v390 = v387[33];
                    if (v390 > 0xFF)
                      v391 = log2((double)v390);
                    else
                      v391 = dbl_236925608[v390];
                    v385 += 2;
                    v384 += v388 + v390;
                    v386 = v386 - (double)v388 * v389 - (double)v390 * v391;
                  }
                  while ((unint64_t)(v385 - 2) < 0x1E);
                  if (v384)
                  {
                    if (v384 > 0xFF)
                      v392 = log2((double)v384);
                    else
                      v392 = dbl_236925608[v384];
                    v386 = v386 + (double)v384 * v392;
                  }
                  v382 = v382 + v386;
                  v383 += 32;
                  ++v381;
                }
                while (v381 != 13);
                v393 = 1.0 / (double)v363;
                if (v393 * v382 <= 3.0)
                {
                  v359 = v512;
                  v357 = v482 + v491;
                  v358 = v491 + 64;
                  if (v393 * v374 - v393 * v382 >= 0.2)
                  {
                    v356 = 13;
                    v351 = dword_2368D7250;
LABEL_646:
                    a7 = v510;
                    a6 = v513;
                    a5 = v516;
                    v299 = (_QWORD *)(a1 + 1496);
                    v47 = v479;
                    v83 = v478;
                    v350 = (unsigned int *)v488;
                    goto LABEL_647;
                  }
                }
                else
                {
                  v359 = v512;
                  v357 = v482 + v491;
                  v358 = v491 + 64;
                }
              }
              else
              {
                v358 = v491 + 64;
                v359 = v512;
              }
              v355[8] = 0;
              *(_OWORD *)v355 = 0u;
              *((_OWORD *)v355 + 1) = 0u;
              if (v358 <= v357)
              {
                v394 = v491;
                v395 = v358 - v491;
                do
                {
                  if (v394 + 1 < v358)
                  {
                    v396 = *(_DWORD *)((char *)&unk_2368D7240
                                     + (((unint64_t)*((unsigned __int8 *)v93 + (v394 & v359)) >> 4) & 0xC));
                    v397 = 1;
                    do
                    {
                      v398 = 3 * v396;
                      v396 = *(_DWORD *)((char *)&unk_2368D7240
                                       + (((unint64_t)*((unsigned __int8 *)v93
                                                             + (((_DWORD)v394 + (_DWORD)v397) & v359)) >> 4) & 0xC));
                      ++v355[v396 + v398];
                      ++v397;
                    }
                    while (v395 != v397);
                  }
                  v394 += 4096;
                  v358 += 4096;
                }
                while (v358 <= v357);
              }
              v399 = 0;
              v538 = 0;
              v537 = 0;
              memset(v536, 0, sizeof(v536));
              do
              {
                v400 = v355[v399];
                *((_DWORD *)&v537 + v399 % 3u) += v400;
                v401 = v399 - 6;
                if (v399 < 6)
                  v401 = v399;
                *((_DWORD *)v536 + v401) += v400;
                ++v399;
              }
              while (v399 != 9);
              v402 = 0;
              v403 = 0;
              v404 = 0.0;
              v405 = 1;
              while (1)
              {
                v406 = *((unsigned int *)&v537 + v402);
                v407 = v406 > 0xFF ? log2((double)v406) : dbl_236925608[v406];
                v408 = v403 + v406;
                v409 = v404 - (double)v406 * v407;
                if ((v405 & 1) == 0)
                  break;
                v410 = *((unsigned int *)&v537 + (v402 | 1));
                if (v410 > 0xFF)
                  v411 = log2((double)v410);
                else
                  v411 = dbl_236925608[v410];
                v405 = 0;
                v403 = v408 + v410;
                v404 = v409 - (double)v410 * v411;
                v402 = 2;
              }
              if (v408)
              {
                if (v408 > 0xFF)
                  v412 = log2((double)v408);
                else
                  v412 = dbl_236925608[v408];
                v409 = v409 + (double)v408 * v412;
              }
              v413 = 0;
              v414 = 0;
              v415 = 0.0;
              v416 = 1;
              while (1)
              {
                v417 = LODWORD(v536[v413]);
                v418 = v417 > 0xFF ? log2((double)v417) : dbl_236925608[v417];
                v419 = v414 + v417;
                v420 = v415 - (double)v417 * v418;
                if ((v416 & 1) == 0)
                  break;
                v421 = *((unsigned int *)v536 + ((v413 * 2) | 1));
                if (v421 > 0xFF)
                  v422 = log2((double)v421);
                else
                  v422 = dbl_236925608[v421];
                v416 = 0;
                v414 = v419 + v421;
                v415 = v420 - (double)v421 * v422;
                v413 = 1;
              }
              if (v419)
              {
                if (v419 > 0xFF)
                  v423 = log2((double)v419);
                else
                  v423 = dbl_236925608[v419];
                v420 = v420 + (double)v419 * v423;
              }
              v424 = 0;
              v425 = 0;
              v426 = 0.0;
              while (1)
              {
                v427 = &v536[v424];
                v428 = *((unsigned int *)v427 + 3);
                v429 = v428 > 0xFF ? log2((double)v428) : dbl_236925608[v428];
                v430 = v425 + v428;
                v431 = v426 - (double)v428 * v429;
                if ((unint64_t)(v424 * 2 + 3) >= 5)
                  break;
                v432 = *((unsigned int *)v427 + 4);
                if (v432 > 0xFF)
                  v433 = log2((double)v432);
                else
                  v433 = dbl_236925608[v432];
                v425 = v430 + v432;
                v426 = v431 - (double)v432 * v433;
                ++v424;
              }
              if (v430)
              {
                if (v430 > 0xFF)
                  v434 = log2((double)v430);
                else
                  v434 = dbl_236925608[v430];
                v431 = v431 + (double)v430 * v434;
              }
              v435 = 0;
              v436 = 0.0;
              do
              {
                v437 = 0;
                v438 = 0;
                v439 = (char *)&v355[3 * v435];
                v440 = 1;
                v441 = 0.0;
                while (1)
                {
                  v442 = *(unsigned int *)&v439[4 * v437];
                  v443 = v442 > 0xFF ? log2((double)v442) : dbl_236925608[v442];
                  v444 = v438 + v442;
                  v445 = v441 - (double)v442 * v443;
                  if ((v440 & 1) == 0)
                    break;
                  v446 = *(unsigned int *)&v439[4 * (v437 | 1)];
                  if (v446 > 0xFF)
                    v447 = log2((double)v446);
                  else
                    v447 = dbl_236925608[v446];
                  v440 = 0;
                  v438 = v444 + v446;
                  v441 = v445 - (double)v446 * v447;
                  v437 = 2;
                }
                if (v444)
                {
                  if (v444 > 0xFF)
                    v448 = log2((double)v444);
                  else
                    v448 = dbl_236925608[v444];
                  v445 = v445 + (double)v444 * v448;
                }
                v436 = v436 + v445;
                ++v435;
              }
              while (v435 != 3);
              v449 = 1.0 / (double)(HIDWORD(v537) + v537 + v538);
              v450 = v409 * v449;
              v451 = (v420 + v431) * v449;
              v452 = v436 * v449;
              if (v480 < 7)
                v452 = v450 * 10.0;
              if (v450 - v451 >= 0.2 || v450 - v452 >= 0.2)
              {
                if (v451 - v452 >= 0.02)
                {
                  v356 = 3;
                  v351 = &unk_2368D7350;
                }
                else
                {
                  v356 = 2;
                  v351 = &unk_2368D7450;
                }
              }
              else
              {
                v351 = 0;
                v356 = 1;
              }
              goto LABEL_646;
            }
          }
LABEL_647:
          v453 = v355;
          v454 = v356;
          (*(void (**)(_QWORD, _DWORD *))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v453);
          v353 = v454;
          v352 = v491;
          goto LABEL_648;
        }
        if (v114 < 9)
          v116 = 41;
        else
          v116 = 42;
        if (v114 >= 7)
          v114 = v116;
        else
          v114 = 40;
      }
    }
    else
    {
      v114 = 10;
    }
    *v500 = v114;
    goto LABEL_198;
  }
  v40 = 1 << *(_DWORD *)(a1 + 8);
  v41 = *a3;
  if (*a3 >= v40)
    v41 = 1 << *(_DWORD *)(a1 + 8);
  if (v41 >= 0x20000)
    v42 = 0x20000;
  else
    v42 = v41;
  if (v39 == 1)
  {
    v43 = *(unsigned __int8 **)(a1 + 6904);
    if (!v43 && v41 >> 17)
    {
      v44 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 0x80000);
      if (!v44)
        goto LABEL_724;
      *(_QWORD *)(a1 + 6904) = v44;
      v45 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 0x20000);
      if (!v45)
        goto LABEL_724;
      v46 = (unsigned __int8 *)v45;
      *(_QWORD *)(a1 + 6912) = v45;
      v43 = *(unsigned __int8 **)(a1 + 6904);
      if (v43)
      {
        v511 = 0;
        v508 = 0;
        goto LABEL_683;
      }
LABEL_679:
      v459 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 4 * v42);
      if (v459)
      {
        v43 = (unsigned __int8 *)v459;
        v460 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), v42);
        if (v460)
        {
          v511 = v43;
          v508 = v460;
          v46 = (unsigned __int8 *)v460;
          goto LABEL_683;
        }
      }
LABEL_724:
      exit(1);
    }
    if (v43)
    {
      v511 = 0;
      v508 = 0;
      v46 = *(unsigned __int8 **)(a1 + 6912);
      goto LABEL_683;
    }
    if (v42)
      goto LABEL_679;
  }
  v511 = 0;
  v43 = 0;
  v508 = 0;
  v46 = 0;
  while (1)
  {
LABEL_683:
    while (sub_2367B7B10(a1, a5, a6, a7))
      ;
    if (*(_QWORD *)(a1 + 6936))
      break;
    if (*(_DWORD *)(a1 + 6972))
      break;
    v461 = *v517;
    if (!a2 && !v461)
      break;
    v462 = a2 == 1;
    if (v40 >= v461)
      v463 = *v517;
    else
      v463 = v40;
    v464 = v461 <= v40 && a2 == 2;
    v465 = v461 <= v40 && v462;
    *(_QWORD *)&__dst[0] = *(unsigned __int8 *)(a1 + 1618);
    *(_QWORD *)v522 = 0;
    if (v465 && v463 == 0)
    {
      v470 = 1;
      a5 = v516;
LABEL_716:
      *(_DWORD *)(a1 + 6972) = v470;
      goto LABEL_717;
    }
    v467 = 2 * v463 + 503;
    v468 = *v516;
    if (v467 <= *v516)
      v469 = *a6;
    else
      v469 = (_BYTE *)sub_2367B7C44(a1, 2 * v463 + 503);
    *v469 = *(_BYTE *)(a1 + 1616);
    v469[1] = *(_BYTE *)(a1 + 1617);
    sub_2367B7CB0(a1, *(_DWORD *)(a1 + 4), v463, (unint64_t *)v522);
    v472 = *v514;
    if (*(_DWORD *)(a1 + 4))
    {
      sub_2367AE754(*(unsigned int **)(a1 + 6896), v472, v463, v464, v43, v46, v471, v522[0], (unint64_t *)__dst, (uint64_t)v469);
      if (!v463)
        goto LABEL_708;
LABEL_707:
      *v514 += v463;
      *v517 -= v463;
      *(_QWORD *)(a1 + 6920) += v463;
      goto LABEL_708;
    }
    sub_2367A96C4(*(_QWORD *)(a1 + 6888), v472, v463, v464, v471, v522[0], (unint64_t *)__dst, (uint64_t)v469);
    if (v463)
      goto LABEL_707;
LABEL_708:
    v473 = __dst[0];
    v474 = *(_QWORD *)&__dst[0] >> 3;
    if (v467 <= v468)
    {
      *v513 = (char *)*v513 + v474;
      a5 = v516;
      *v516 -= v474;
      v475 = *(_QWORD *)(a1 + 6944) + v474;
      *(_QWORD *)(a1 + 6944) = v475;
      a7 = v510;
      if (v510)
        *v510 = v475;
    }
    else
    {
      *(_QWORD *)(a1 + 6928) = v469;
      *(_QWORD *)(a1 + 6936) = v474;
      a7 = v510;
      a5 = v516;
    }
    *(_WORD *)(a1 + 1616) = v469[v474];
    *(_BYTE *)(a1 + 1618) = v473 & 7;
    a6 = v513;
    if ((v465 | v464) == 1)
    {
      if (v464)
        v470 = 2;
      else
        v470 = 1;
      goto LABEL_716;
    }
LABEL_717:
    a2 = v515;
  }
  (*(void (**)(_QWORD, unsigned __int8 *))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v511);
  (*(void (**)(_QWORD, uint64_t))(a1 + 1416))(*(_QWORD *)(a1 + 1424), v508);
  if (*(_DWORD *)(a1 + 6972) == 1 && !*(_QWORD *)(a1 + 6936))
  {
LABEL_722:
    *(_DWORD *)(a1 + 6972) = 0;
    *(_QWORD *)(a1 + 6928) = 0;
  }
  return 1;
}

uint64_t sub_2367B7B10(uint64_t a1, size_t *a2, void **a3, size_t *a4)
{
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  _BYTE *v12;
  size_t v13;
  size_t v14;
  size_t v15;

  if (*(_DWORD *)(a1 + 6972) == 1 && (v8 = *(unsigned __int8 *)(a1 + 1618), *(_BYTE *)(a1 + 1618)))
  {
    v9 = *(_WORD *)(a1 + 1616);
    *(_WORD *)(a1 + 1616) = 0;
    *(_BYTE *)(a1 + 1618) = 0;
    v10 = (6 << v8) | v9;
    v11 = *(_QWORD *)(a1 + 6928);
    if (v11)
    {
      v12 = (_BYTE *)(v11 + *(_QWORD *)(a1 + 6936));
    }
    else
    {
      v12 = (_BYTE *)(a1 + 6952);
      *(_QWORD *)(a1 + 6928) = a1 + 6952;
    }
    *v12 = v10;
    if (v8 >= 3)
    {
      v12[1] = HIBYTE(v10);
      if (v8 >= 0xB)
        v12[2] = (6 << v8) >> 16;
    }
    *(_QWORD *)(a1 + 6936) += (unint64_t)(v8 + 13) >> 3;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 6936);
    if (!v13 || !*a2)
      return 0;
    if (v13 >= *a2)
      v14 = *a2;
    else
      v14 = *(_QWORD *)(a1 + 6936);
    memcpy(*a3, *(const void **)(a1 + 6928), v14);
    *a3 = (char *)*a3 + v14;
    *a2 -= v14;
    *(_QWORD *)(a1 + 6928) += v14;
    *(_QWORD *)(a1 + 6936) -= v14;
    v15 = *(_QWORD *)(a1 + 6944) + v14;
    *(_QWORD *)(a1 + 6944) = v15;
    if (a4)
      *a4 = v15;
  }
  return 1;
}

uint64_t sub_2367B7C44(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 1624) >= a2)
    return *(_QWORD *)(a1 + 1632);
  (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *(_QWORD *)(a1 + 1632));
  *(_QWORD *)(a1 + 1632) = 0;
  result = (*(uint64_t (**)(_QWORD, unint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), a2);
  if (!result)
    exit(1);
  *(_QWORD *)(a1 + 1632) = result;
  *(_QWORD *)(a1 + 1624) = a2;
  return result;
}

void sub_2367B7CB0(uint64_t a1, int a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  void *v12;

  v6 = 0x20000;
  if (!a2)
    v6 = 0x8000;
  if (v6 >= a3)
    v7 = a3;
  else
    v7 = v6;
  v8 = 256;
  do
  {
    v9 = v8;
    v8 *= 2;
  }
  while (v9 < v7);
  if ((v9 & 0xAAA00) == 0 && a2 == 0)
    v11 = v8;
  else
    v11 = v9;
  if (v11 > 0x400)
  {
    if (v11 <= *(_QWORD *)(a1 + 6880))
    {
      v12 = *(void **)(a1 + 6872);
    }
    else
    {
      *(_QWORD *)(a1 + 6880) = v11;
      (*(void (**)(_QWORD, _QWORD))(a1 + 1416))(*(_QWORD *)(a1 + 1424), *(_QWORD *)(a1 + 6872));
      *(_QWORD *)(a1 + 6872) = 0;
      v12 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))(a1 + 1408))(*(_QWORD *)(a1 + 1424), 4 * v11);
      if (!v12)
        exit(1);
      *(_QWORD *)(a1 + 6872) = v12;
    }
  }
  else
  {
    v12 = (void *)(a1 + 2776);
  }
  *a4 = v11;
  bzero(v12, 4 * v11);
}

BOOL sub_2367B7D80(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 1528);
  if (v1 >> 30 >= 3)
    LODWORD(v1) = (((2 * (int)v1) >> 1) & 0xC0000000 | v1 & 0x3FFFFFFF) ^ 0x80000000;
  v2 = *(_QWORD *)(a1 + 1432);
  v3 = (((2 * (int)v2) >> 1) & 0xC0000000 | v2 & 0x3FFFFFFF) ^ 0x80000000;
  if (v2 <= 0xBFFFFFFF)
    v3 = *(_QWORD *)(a1 + 1432);
  *(_QWORD *)(a1 + 1528) = v2;
  return v3 < v1;
}

__n128 sub_2367B7DC8(__n128 *a1, uint64_t a2)
{
  unsigned __int32 v2;
  unsigned __int32 v3;
  unsigned __int32 v4;
  unint64_t v5;
  __n128 result;

  v2 = a1[3].n128_u32[3];
  v3 = a1[4].n128_u32[0];
  *(_DWORD *)(a2 + 16) = 64 - v2;
  v4 = a1[4].n128_u32[2];
  v5 = 0xFFFFFFFFFFFFFFFFLL >> (-8 * a1[4].n128_u8[4]);
  *(_QWORD *)(a2 + 48) = a1;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)a2 = 1 << v2;
  *(_QWORD *)(a2 + 8) = 1 << v3;
  *(_DWORD *)(a2 + 32) = (1 << v3) - 1;
  *(_DWORD *)(a2 + 36) = v3;
  *(_DWORD *)(a2 + 40) = v4;
  result = *a1;
  *(__n128 *)(a2 + 56) = *a1;
  return result;
}

void sub_2367B7E1C(_DWORD *a1, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t i;
  int v5;
  unint64_t v6;

  if (a2 && a3 <= 0x1000)
  {
    if (a3)
    {
      for (i = 0; i != a3; ++i)
      {
        v5 = 0;
        v6 = (0xBD1E35A7BD000000 * *(_QWORD *)(a4 + i)) >> 47;
        do
        {
          a1[((_DWORD)v6 + v5) & 0x1FFFF] = 0;
          v5 += 8;
        }
        while (v5 != 32);
      }
    }
  }
  else
  {
    bzero(a1, 0x80000uLL);
  }
}

void sub_2367B7E7C(unint64_t *a1, int a2, unint64_t a3, int *a4)
{
  _WORD *v5;
  unint64_t v6;
  int v7;
  int v8;

  v5 = (_WORD *)a1[5];
  v6 = *a1;
  if (a2 && v6 >> 6 >= a3)
  {
    if (a3)
    {
      v7 = *((_DWORD *)a1 + 4);
      do
      {
        v8 = *a4;
        a4 = (int *)((char *)a4 + 1);
        v5[(506832829 * v8) >> v7] = 0;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    bzero(v5, 2 * v6);
  }
}

void sub_2367B7ECC(unint64_t *a1, int a2, unint64_t a3, uint64_t *a4)
{
  _WORD *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;

  v5 = (_WORD *)a1[7];
  v6 = *a1;
  if (a2 && v6 >> 6 >= a3)
  {
    if (a3)
    {
      v7 = a1[3];
      v8 = *((_DWORD *)a1 + 4);
      do
      {
        v9 = *a4;
        a4 = (uint64_t *)((char *)a4 + 1);
        v5[((0x1FE35A7BD3579BD3 * (v9 & v7)) >> v8)] = 0;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    bzero(v5, 2 * v6);
  }
}

void sub_2367B7F2C(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  v5 = *(_QWORD *)(a1 + 16);
  if (a2 && a3 <= 0x200)
  {
    for (; a3; --a3)
    {
      v6 = *a4;
      a4 = (int *)((char *)a4 + 1);
      v7 = (506832829 * v6) >> 17;
      *(_DWORD *)(v5 + 4 * v7) = -858993460;
      *(_WORD *)(v5 + 0x20000 + 2 * v7) = -13108;
    }
  }
  else
  {
    memset(*(void **)(a1 + 16), 204, 0x20000uLL);
    bzero((void *)(v5 + 0x20000), 0x10000uLL);
  }
  bzero((void *)(v5 + 196608), 0x10000uLL);
  *(_WORD *)a1 = 0;
}

void sub_2367B7FC4(void **a1, int a2, unint64_t a3, int *a4)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;

  v5 = a1[129];
  if (a2 && a3 <= 0x200)
  {
    for (; a3; --a3)
    {
      v6 = *a4;
      a4 = (int *)((char *)a4 + 1);
      v7 = (506832829 * v6) >> 17;
      v5[v7] = -858993460;
      *((_WORD *)v5 + v7 + 0x10000) = -13108;
    }
  }
  else
  {
    memset(a1[129], 204, 0x20000uLL);
    bzero(v5 + 0x8000, 0x10000uLL);
  }
  bzero(v5 + 49152, 0x10000uLL);
  bzero(a1, 0x400uLL);
}

void sub_2367B8060(_DWORD *a1, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t i;
  int v5;
  unint64_t v6;

  if (a2 && a3 <= 0x8000)
  {
    if (a3)
    {
      for (i = 0; i != a3; ++i)
      {
        v5 = 0;
        v6 = (unint64_t)(0x35A7BD1E35A7BD00 * *(_QWORD *)(a4 + i)) >> 44;
        do
        {
          a1[((_DWORD)v6 + v5) & 0xFFFFF] = 0;
          v5 += 8;
        }
        while (v5 != 32);
      }
    }
  }
  else
  {
    bzero(a1, 0x400000uLL);
  }
}

