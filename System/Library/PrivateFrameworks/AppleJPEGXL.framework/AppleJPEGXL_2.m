uint64_t sub_23680E1A8(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t n;
  float v20;
  float v21;
  double v22;
  __n128 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __n128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  double v35;
  __n128 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __n128 v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __n128 v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  __n128 v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  double v62;
  float v63;
  float v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  double *v85;
  float v86;
  unsigned int *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  float32x4_t *v94;
  float32x4_t *v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  unsigned int *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  unint64_t v107;
  unint64_t v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[2];
  __int128 v141;
  __int128 v142;
  _OWORD v143[3];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[8];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[120];
  _BYTE v153[120];
  unsigned int v154;
  unsigned int v155[4];
  uint64_t v156;
  uint64_t v157[2];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE v161[120];
  unsigned int v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  unsigned int v169;

  if (*(_QWORD *)(a1 + 8) >= 8uLL && *(_QWORD *)(a1 + 16) > 7uLL)
  {
    memset(v148, 0, sizeof(v148));
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    memset(v143, 0, sizeof(v143));
    v141 = 0u;
    v139 = 0u;
    memset(v140, 0, sizeof(v140));
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v134 = 0u;
    v6 = sub_23680A7E4(a1 + 568, a2, (uint64_t)&v134);
    if (!(_DWORD)v6)
    {
      sub_2367C431C((uint64_t)&v129, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
      v6 = v133;
      if (!v133)
      {
        *(_OWORD *)a3 = v129;
        v7 = v131;
        v131 = 0;
        v8 = v132;
        v9 = *((_QWORD *)a3 + 3);
        *((_QWORD *)a3 + 2) = v130;
        *((_QWORD *)a3 + 3) = v7;
        if (v9)
        {
          v10 = -*(_QWORD *)(v9 - 24);
          do
            v11 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v11 + v10, &qword_2564313D8));
          free(*(void **)(v9 - 32));
        }
        *((_QWORD *)a3 + 4) = v8;
        v12 = *(_QWORD *)(a1 + 8);
        if (v12 >= 8 && (v13 = *(_QWORD *)(a1 + 16), v13 > 7))
        {
          v21 = *(float *)(a1 + 24);
          v20 = *(float *)(a1 + 28);
          sub_2367C431C((uint64_t)&v166, v12, v13);
          v6 = v169;
          if (!v169)
          {
            v163 = v166;
            v164 = v167;
            *((_QWORD *)&v167 + 1) = 0;
            v165 = v168;
            sub_2367CA770((uint64_t)v161, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
            v6 = v162;
            if (!v162)
            {
              sub_2367CA9E4((uint64_t)v155, (uint64_t)v161);
              sub_23680EC1C(v155);
              v22 = v21;
              v23.n128_f64[0] = v21 * 1.10039033;
              v24.i64[0] = 0x4051F1EBF888C433;
              sub_23680AF18((unsigned int *)(a1 + 80), *((uint64_t *)&v137 + 1), (float *)v138, (unsigned int *)&v163, v159, v160, v23, 1.10039033 / v21, v24, v25, v26, v27, v28);
              v29.n128_f64[0] = v21 * 173.5;
              v30.i64[0] = 5.0;
              sub_23680AF18((unsigned int *)(a1 + 40), v135, *((float **)&v135 + 1), (unsigned int *)&v163, v156, v157[0], v29, 173.5 / v21, v30, v31, v32, v33, v34);
              v35 = sqrtf(v21);
              v36.n128_f64[0] = v35 * 18.7237414;
              v37.i64[0] = 0x415129199CF2CF96;
              sub_23680BBB4((unsigned int *)(a1 + 160), *((uint64_t *)&v141 + 1), (float *)v142, (unsigned int *)&v163, v159, v160, v36, 18.7237414 / v35, v37, v38, v39, v40, v41);
              v42.n128_f64[0] = v35 * 6923.99476;
              v43.i64[0] = 0x40BF7328887A0C8BLL;
              sub_23680BBB4((unsigned int *)(a1 + 120), *(uint64_t *)&v140[0], *((float **)&v140[0] + 1), (unsigned int *)&v163, v156, v157[0], v42, 6923.99476 / v35, v43, v44, v45, v46, v47);
              v48.n128_u64[0] = 0x40428A7E8D23887ELL;
              v49.i64[0] = 0x419F0E90AE395810;
              sub_23680BBB4((unsigned int *)(a1 + 240), *((uint64_t *)&v144 + 1), (float *)v145, (unsigned int *)&v163, v159, v160, v48, 37.081987, v49, v50, v51, v52, v53);
              v54.n128_u64[0] = 0x40C01B60694D0B21;
              v55.i64[0] = 0x412ECAD569613D32;
              sub_23680BBB4((unsigned int *)(a1 + 200), *(uint64_t *)&v143[1], *((float **)&v143[1] + 1), (unsigned int *)&v163, v156, v157[0], v54, 8246.75321, v55, v56, v57, v58, v59);
              sub_2367CA770((uint64_t)v153, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
              v6 = v154;
              if (!v154)
              {
                sub_2367CA9E4((uint64_t)v152, (uint64_t)v153);
                v60 = 0;
                v61 = (float32x4_t)vdupq_n_s32(0x3ECCCCCDu);
                do
                {
                  if (v60 != 2)
                  {
                    v62 = dbl_236921650[v60];
                    v63 = v62 * v22;
                    v64 = v62 / v22;
                    if (v63 != 0.0 || v64 != 0.0)
                    {
                      v65 = (_DWORD *)(a1 + 40 * v60 + 120);
                      v66 = *(unsigned int *)(a1 + 40 * v60 + 124);
                      if ((_DWORD)v66)
                      {
                        v67 = 0;
                        v68 = v63 * 0.8;
                        v69 = v64 * 0.8;
                        v70 = *(_QWORD *)&v155[10 * v60 + 4];
                        v71 = v157[5 * v60];
                        LODWORD(v72) = *v65;
                        do
                        {
                          if ((_DWORD)v72)
                          {
                            v73 = 0;
                            v74 = (float32x4_t *)(*((_QWORD *)v140 + 5 * v60 + 1) + *((_QWORD *)v140 + 5 * v60) * v67);
                            v75 = (float32x4_t *)(*(_QWORD *)(a1 + 40 * v60 + 144)
                                                + *(_QWORD *)(a1 + 40 * v60 + 136) * v67);
                            v76 = (float32x4_t *)v71;
                            do
                            {
                              v77 = *v75++;
                              v78 = v77;
                              v79 = *v74++;
                              v80 = vsubq_f32(v78, v79);
                              v81 = vmlaq_n_f32(*v76, vmulq_f32(v80, v80), v68);
                              v82 = vabsq_f32(v78);
                              v83 = vmulq_f32(v82, v61);
                              v84 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v78), vbslq_s8((int8x16_t)vcgtq_f32(v79, vnegq_f32(v83)), (int8x16_t)vaddq_f32(v79, v83), vandq_s8((int8x16_t)vsubq_f32(vnegq_f32(v79), v82), (int8x16_t)vcgtq_f32(vnegq_f32(v82), v79))), vbslq_s8((int8x16_t)vcgtq_f32(v83, v79), (int8x16_t)vsubq_f32(v83, v79), vandq_s8((int8x16_t)vsubq_f32(v79, v82), (int8x16_t)vcgtq_f32(v79, v82))));
                              *v76++ = vmlaq_n_f32(v81, vmulq_f32(v84, v84), v69);
                              v73 += 4;
                              v72 = *v65;
                            }
                            while (v73 < v72);
                            v66 = *(unsigned int *)(a1 + 40 * v60 + 124);
                          }
                          ++v67;
                          v71 += v70;
                        }
                        while (v67 < v66);
                      }
                    }
                  }
                  v85 = &dbl_236921650[v60];
                  v86 = v85[3];
                  if (v86 != 0.0)
                  {
                    v87 = (unsigned int *)(a1 + 200 + 40 * v60);
                    v88 = v87[1];
                    if ((_DWORD)v88)
                    {
                      v89 = 0;
                      v91 = *(_QWORD *)&v155[10 * v60 + 4];
                      v90 = v157[5 * v60];
                      LODWORD(v92) = *v87;
                      do
                      {
                        if ((_DWORD)v92)
                        {
                          v93 = 0;
                          v94 = (float32x4_t *)(*((_QWORD *)&v143[1] + 5 * v60 + 1)
                                              + *((_QWORD *)&v143[1] + 5 * v60) * v89);
                          v95 = (float32x4_t *)(*((_QWORD *)v87 + 3) + *((_QWORD *)v87 + 2) * v89);
                          v96 = (float32x4_t *)v90;
                          do
                          {
                            v97 = *v95++;
                            v98 = v97;
                            v99 = *v94++;
                            v100 = vsubq_f32(v98, v99);
                            *v96 = vmlaq_n_f32(*v96, vmulq_f32(v100, v100), v86);
                            ++v96;
                            v93 += 4;
                            v92 = *v87;
                          }
                          while (v93 < v92);
                          v88 = v87[1];
                        }
                        ++v89;
                        v90 += v91;
                      }
                      while (v89 < v88);
                    }
                  }
                  v101 = v85[6];
                  if (v101 != 0.0)
                  {
                    v102 = (unsigned int *)(a1 + 320 + 40 * v60);
                    v103 = v102[1];
                    if ((_DWORD)v103)
                    {
                      v104 = 0;
                      v105 = *(_QWORD *)&v152[40 * v60 + 16];
                      v106 = *(float32x4_t **)&v152[40 * v60 + 24];
                      LODWORD(v107) = *v102;
                      do
                      {
                        if ((_DWORD)v107)
                        {
                          v108 = 0;
                          v109 = (float32x4_t *)(*((_QWORD *)&v148[2] + 5 * v60)
                                               + *((_QWORD *)&v148[1] + 5 * v60 + 1) * v104);
                          v110 = (float32x4_t *)(*((_QWORD *)v102 + 3) + *((_QWORD *)v102 + 2) * v104);
                          v111 = v106;
                          do
                          {
                            v112 = *v110++;
                            v113 = v112;
                            v114 = *v109++;
                            v115 = vsubq_f32(v113, v114);
                            *v111++ = vmulq_n_f32(vmulq_f32(v115, v115), v101);
                            v108 += 4;
                            v107 = *v102;
                          }
                          while (v108 < v107);
                          v103 = v102[1];
                        }
                        ++v104;
                        v106 = (float32x4_t *)((char *)v106 + v105);
                      }
                      while (v104 < v103);
                    }
                  }
                  ++v60;
                }
                while (v60 != 3);
                v151 = 0;
                v149 = 0u;
                v150 = 0u;
                v6 = sub_23680CBA0(a1 + 40, (uint64_t)&v134, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 568, (uint64_t)&v149, (uint64_t)&v158);
                if (!(_DWORD)v6)
                  sub_23680D488((unsigned int *)&v149, (uint64_t)v152, (uint64_t)v155, *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), v20);
                v116 = *((_QWORD *)&v150 + 1);
                *((_QWORD *)&v150 + 1) = 0;
                if (v116)
                {
                  v117 = -*(_QWORD *)(v116 - 24);
                  do
                    v118 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v118 + v117, &qword_2564313D8));
                  free(*(void **)(v116 - 32));
                }
                for (i = 104; i != -16; i -= 40)
                  sub_2367C2F38((uint64_t *)&v152[i]);
                if (!v154)
                {
                  for (j = 104; j != -16; j -= 40)
                    sub_2367C2F38((uint64_t *)&v153[j]);
                }
              }
              for (k = 26; k != -4; k -= 10)
                sub_2367C2F38((uint64_t *)&v155[k]);
              if (!v162)
              {
                for (m = 104; m != -16; m -= 40)
                  sub_2367C2F38((uint64_t *)&v161[m]);
              }
            }
            v123 = *((_QWORD *)&v164 + 1);
            *((_QWORD *)&v164 + 1) = 0;
            if (v123)
            {
              v124 = -*(_QWORD *)(v123 - 24);
              do
                v125 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v125 + v124, &qword_2564313D8));
              free(*(void **)(v123 - 32));
            }
            if (!v169)
            {
              v126 = *((_QWORD *)&v167 + 1);
              *((_QWORD *)&v167 + 1) = 0;
              if (v126)
              {
                v127 = -*(_QWORD *)(v126 - 24);
                do
                  v128 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v128 + v127, &qword_2564313D8));
                free(*(void **)(v126 - 32));
              }
            }
          }
        }
        else
        {
          if (*a3 && a3[1])
          {
            v14 = 0;
            do
              bzero((void *)(*((_QWORD *)a3 + 3) + *((_QWORD *)a3 + 2) * v14++), 4 * *a3);
            while (v14 < a3[1]);
          }
          v6 = 0;
        }
        if (!v133)
        {
          v15 = v131;
          v131 = 0;
          if (v15)
          {
            v16 = -*(_QWORD *)(v15 - 24);
            do
              v17 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v17 + v16, &qword_2564313D8));
            free(*(void **)(v15 - 32));
          }
        }
      }
    }
    for (n = 384; n != 264; n -= 40)
      sub_2367C2F38((uint64_t *)((char *)&v134 + n));
    do
    {
      sub_2367C2F38((uint64_t *)((char *)&v134 + n));
      n -= 40;
    }
    while (n != 144);
    do
    {
      sub_2367C2F38((uint64_t *)((char *)&v134 + n));
      n -= 40;
    }
    while (n != 64);
    do
    {
      sub_2367C2F38((uint64_t *)((char *)&v134 + n));
      n -= 40;
    }
    while (n != -16);
  }
  else
  {
    if (*a3 && a3[1])
    {
      v5 = 0;
      do
        bzero((void *)(*((_QWORD *)a3 + 3) + *((_QWORD *)a3 + 2) * v5++), 4 * *a3);
      while (v5 < a3[1]);
    }
    return 0;
  }
  return v6;
}

void sub_23680E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  char a72;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;

  v74 = a69;
  a69 = 0;
  if (v74)
  {
    v75 = -*(_QWORD *)(v74 - 24);
    do
      v76 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v76 + v75, &qword_2564313D8));
    free(*(void **)(v74 - 32));
  }
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a72 + i));
  if (!LODWORD(STACK[0x2E0]))
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x268] + j));
  }
  for (k = 104; k != -16; k -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x2E8] + k));
  if (!LODWORD(STACK[0x3D8]))
  {
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x360] + m));
  }
  v81 = *(_QWORD *)(v72 - 184);
  *(_QWORD *)(v72 - 184) = 0;
  if (v81)
  {
    v82 = -*(_QWORD *)(v81 - 24);
    do
      v83 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v83 + v82, &qword_2564313D8));
    free(*(void **)(v81 - 32));
  }
  if (!*(_DWORD *)(v72 - 120))
  {
    v84 = *(_QWORD *)(v72 - 136);
    *(_QWORD *)(v72 - 136) = 0;
    if (v84)
    {
      v85 = -*(_QWORD *)(v84 - 24);
      do
        v86 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v86 + v85, &qword_2564313D8));
      free(*(void **)(v84 - 32));
    }
  }
  if (!a14 && a12)
  {
    v87 = -*(_QWORD *)(a12 - 24);
    do
      v88 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v88 + v87, &qword_2564313D8));
    free(*(void **)(a12 - 32));
  }
  sub_23680EBA8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_23680EB30(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  float v9;

  v3 = a3[1];
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *a3;
    v7 = *((_QWORD *)a3 + 2);
    v6 = *((_QWORD *)a3 + 3);
    do
    {
      if ((_DWORD)v5)
      {
        for (i = 0; i != v5; ++i)
        {
          v9 = *(float *)(v6 + 4 * i) * 0.85;
          *(float *)(v6 + 4 * i) = v9;
          *(float *)(v6 + 4 * i) = v9
                                 + (float)(*(float *)(a2 + (v4 >> 1) * result + ((2 * i) & 0xFFFFFFFFFFFFFFFCLL)) * 0.5);
        }
      }
      ++v4;
      v6 += v7;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_23680EBA8(uint64_t a1)
{
  uint64_t i;

  for (i = 384; i != 264; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  do
  {
    sub_2367C2F38((uint64_t *)(a1 + i));
    i -= 40;
  }
  while (i != 144);
  do
  {
    sub_2367C2F38((uint64_t *)(a1 + i));
    i -= 40;
  }
  while (i != 64);
  do
  {
    sub_2367C2F38((uint64_t *)(a1 + i));
    i -= 40;
  }
  while (i != -16);
  return a1;
}

void sub_23680EC1C(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = 0;
  v3 = a1[1];
  v4 = v3;
  do
  {
    if (v4)
    {
      v5 = 0;
      v6 = *a1;
      do
      {
        if (v6)
        {
          bzero((void *)(*(_QWORD *)&a1[10 * v2 + 6] + *((_QWORD *)a1 + 2) * v5), 4 * v6);
          v6 = *a1;
          v3 = a1[1];
        }
        ++v5;
        v4 = v3;
      }
      while (v5 < v3);
    }
    ++v2;
  }
  while (v2 != 3);
}

double sub_23680ECA4(double a1)
{
  double v2;
  double v3;
  long double v4;
  double v5;
  double v6;
  double v7;

  v2 = 0.0;
  v3 = 1.0;
  do
  {
    v4 = 2.0 / (exp((v2 + -1.0) * 4.8) + 1.0);
    v5 = (v4 + -1.0) * 1.2223 + 0.7777;
    v6 = v4 * 0.7777;
    if (v2 < 1.0)
      v6 = v5;
    if (v6 >= a1)
      v7 = v3;
    else
      v7 = -v3;
    v2 = v2 + v7;
    v3 = v3 * 0.5;
  }
  while (v3 >= 1.0e-10);
  return v2;
}

BOOL sub_23680ED5C(unsigned int *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *a1;
  if (v4 <= a2)
    return 0;
  result = 0;
  if ((a3 & 7) == 0 || a1[1] <= a3)
    return result;
  if (v4 >= a4)
    v4 = a4;
  v7 = *((_QWORD *)a1 + 3) + *((_QWORD *)a1 + 2) * a3;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    while ((*(_BYTE *)(v7 + a2) & 1) == 0)
    {
      if (v8 == --a2)
      {
        a2 = v8;
        break;
      }
    }
  }
  if (a2 >= v4)
    return 0;
  while (1)
  {
    v9 = *(unsigned __int8 *)(v7 + a2);
    result = (v9 & 1) == 0;
    if ((v9 & 1) == 0)
      break;
    a2 += byte_23692665C[v9 >> 1];
    if (a2 >= v4)
      return 0;
  }
  return result;
}

BOOL sub_23680EDF4(unsigned int *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _BOOL8 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (*a1 <= a2)
    return 0;
  v4 = 0;
  if ((a2 & 7) == 0)
    return v4;
  v5 = a1[1];
  if (v5 <= a3)
    return v4;
  if (v5 >= a4)
    v5 = a4;
  v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 0xFFFFFFFFFFFFFFF8) != a3)
  {
    v7 = *((_QWORD *)a1 + 2);
    v8 = *((_QWORD *)a1 + 3) + v7 * a3;
    v9 = -v7;
    while ((*(_BYTE *)(v8 + a2) & 1) == 0)
    {
      v8 += v9;
      if (v6 == --a3)
      {
        a3 = v6;
        break;
      }
    }
  }
  if (a3 >= v5)
    return 0;
  while (1)
  {
    v10 = *(unsigned __int8 *)(*((_QWORD *)a1 + 3) + *((_QWORD *)a1 + 2) * a3 + a2);
    v4 = (v10 & 1) == 0;
    if ((v10 & 1) == 0)
      break;
    a3 += byte_236926677[v10 >> 1];
    if (a3 >= v5)
      return 0;
  }
  return v4;
}

float sub_23680EE9C(float *a1, unint64_t a2, unint64_t a3, float *a4, uint64_t a5, uint64_t a6, float32x4_t *a7, __n128 a8)
{
  uint64_t v8;
  float *v10;
  unint64_t v11;
  float v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t i;
  const float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t j;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  __int8 *v106;
  uint64_t v107;
  char v108;
  char v109;
  float32x4_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t k;
  uint64_t v129;
  __int128 v130;
  float v131;
  float v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t m;
  uint64_t v137;
  __int128 v138;
  float v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  float32x4_t *v143;
  unint64_t v144;
  float32x4_t *v145;
  uint64_t v146;
  float32x4_t v147;
  uint64_t v148;
  uint64_t *v149;
  _DWORD *v150;
  uint64_t v151;
  _DWORD *v152;
  float32x4_t *v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  float v161;
  float v162;
  float v163;
  uint64_t v164;
  int32x4_t *v165;
  int8x16_t v166;
  unint64_t v167;
  float32x4_t *v168;
  uint64_t v169;
  float32x4_t v170;
  uint64_t v171;
  uint64_t *v172;
  _DWORD *v173;
  uint64_t v174;
  _DWORD *v175;
  float32x4_t *v176;
  uint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  float32x4_t *v184;
  uint64_t n;
  unint64_t v186;
  float32x4_t *v187;
  uint64_t v188;
  float32x4_t v189;
  uint64_t v190;
  uint64_t *v191;
  _DWORD *v192;
  uint64_t v193;
  _DWORD *v194;
  float32x4_t *v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  int32x4_t *v203;
  uint64_t ii;
  int8x16_t v205;
  unint64_t v206;
  float32x4_t *v207;
  uint64_t v208;
  float32x4_t v209;
  uint64_t v210;
  uint64_t *v211;
  _DWORD *v212;
  uint64_t v213;
  _DWORD *v214;
  float32x4_t *v215;
  uint64_t v216;
  _DWORD *v217;
  uint64_t v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  float v223;
  float v224;
  float v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  float v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  float *v242;
  unint64_t v243;
  float v244;
  float v245;
  int32x2_t v246;
  int32x2_t v247;
  float32x2_t v249;
  float32x2_t v250;
  float32x2_t v251;
  uint64_t v253;
  uint64_t v254;
  float32x4_t v255;
  float v256;
  float32x4_t *v258;
  unint64_t v259;
  uint64_t v260;
  float32x4_t *v261;
  const float *v262;
  float32x4_t v263;
  float32x4_t *v264;
  float32x4_t v265;
  float32x4_t *v266;
  float32x4_t *v267;
  float32x4_t *v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void (*v281)(uint64_t *, uint64_t *, unint64_t, float32x4_t *);
  uint64_t v282;
  uint64_t v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  float *v305;
  float v306;
  float *v307;
  uint64_t v308;
  float *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  float *v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  float32_t v325;
  unsigned int v326;
  char v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  char v332;
  char v333;
  unint64_t v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  uint64_t v342;
  uint64_t jj;
  uint64_t v344;
  float32x4_t *v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float *v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  uint64_t v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  char v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char v370;
  uint64_t v371;
  char v372;
  __int32 *v373;
  float32x4_t *v374;
  uint64_t v375;
  __int32 *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  float v380;
  float v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  float32x4_t *v387;
  uint64_t kk;
  uint64_t v389;
  float v390;
  float v391;
  char v392;
  uint64_t v393;
  char v394;
  uint64_t v395;
  float32x4_t *v396;
  uint64_t mm;
  float32x4_t *v398;
  uint64_t v399;
  float v400;
  float v401;
  float v402;
  float v403;
  uint64_t *v404;
  _DWORD *v405;
  uint64_t v406;
  _DWORD *v407;
  unint64_t v408;
  float32x4_t *v409;
  uint64_t v410;
  float32x4_t v411;
  uint64_t v412;
  uint64_t v413;
  float32x4_t *v414;
  uint64_t v415;
  float32x4_t *v416;
  __int32 *v417;
  uint64_t v418;
  __int32 *v419;
  float32_t v420;
  float32x4_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t nn;
  uint64_t v425;
  float v426;
  float v427;
  float v428;
  float v429;
  uint64_t *v430;
  _DWORD *v431;
  uint64_t v432;
  _DWORD *v433;
  unint64_t v434;
  float32x4_t *v435;
  uint64_t v436;
  float32x4_t v437;
  uint64_t v438;
  uint64_t v439;
  int8x16_t v440;
  uint64_t v441;
  float32x4_t *v442;
  __int32 *v443;
  uint64_t v444;
  __int32 *v445;
  float32_t v446;
  float32x4_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t i1;
  uint64_t v451;
  float v452;
  float v453;
  float v454;
  float v455;
  uint64_t *v456;
  _DWORD *v457;
  uint64_t v458;
  _DWORD *v459;
  unint64_t v460;
  float32x4_t *v461;
  uint64_t v462;
  float32x4_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i2;
  uint64_t v467;
  float32x4_t *v468;
  __int32 *v469;
  uint64_t v470;
  __int32 *v471;
  float32_t v472;
  float32x4_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t i3;
  uint64_t v477;
  float v478;
  float v479;
  float v480;
  float v481;
  uint64_t *v482;
  _DWORD *v483;
  uint64_t v484;
  _DWORD *v485;
  unint64_t v486;
  float32x4_t *v487;
  uint64_t v488;
  float32x4_t v489;
  uint64_t v490;
  uint64_t i4;
  int8x16_t v492;
  uint64_t v493;
  float32x4_t *v494;
  __int32 *v495;
  uint64_t v496;
  __int32 *v497;
  float32_t v498;
  float32x4_t *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t i5;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  float32x4_t v508;
  uint64_t i6;
  uint64_t i7;
  uint64_t v511;
  char v512;
  char v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float v517;
  float v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  float v526;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v543;
  float32x4_t *v544;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  int8x16_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  float v555;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  float32x4_t v563;
  float32x4_t v564;
  char v565;
  char v566;
  float32x4_t v567;
  float32x4_t *v568;
  uint64_t v569;
  float32x4_t v570;
  float32x4_t *v571;
  float32x4_t v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  float32x4_t v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  uint64_t v604;
  float32x4_t *v605;
  uint64_t v606;
  float32x4_t *v607;
  uint64_t v608;
  float32x4x2_t v609;
  float32x4x2_t v610;
  float32x4x2_t v611;
  float32x4x2_t v612;

  v8 = (uint64_t)a7;
  v10 = a4;
  v11 = a3;
  v13 = a8.n128_f32[0];
  v14 = a1;
  v15 = 0;
  v608 = *MEMORY[0x24BDAC8D0];
  v571 = a7 + 0x4000;
  v543 = 1 << byte_236921FC8[*(unsigned int *)a1];
  v550 = v543 << 6;
  v539 = (uint64_t)&a7[18432];
  v540 = (uint64_t)&a7[24576];
  v532 = (uint64_t)&a7[20480];
  v533 = (uint64_t)&a7[0x8000];
  v530 = (uint64_t)&a7[16400];
  v531 = (uint64_t)&a7[17408];
  v529 = (uint64_t)&a7[16640];
  v537 = (uint64_t)&a7[16512];
  v538 = (uint64_t)&a7[16896];
  v541 = (uint64_t)&a7[16448];
  v536 = (uint64_t)&a7[16416];
  v568 = a7 + 16392;
  v554 = v543 << 8;
  v16 = a6 + 4;
  v17 = a6 + 32;
  v546 = 4 * a2;
  v559 = 4 * a3;
  v18 = a6;
  do
  {
    v19 = *v14;
    v14 = (float *)(a6 + 4 * v15 * v550);
    v20 = *(_QWORD *)&v10[2 * v15 + 14];
    v21 = *((_QWORD *)v10 + 10);
    v22 = a2 + v21 * v11;
    v23 = (float32x4_t *)(v20 + 4 * v22);
    v569 = v21;
    switch(LODWORD(v19))
    {
      case 0:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v530;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681274C, (uint64_t)&v606, (uint64_t)&v572, 8, v530);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 8;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DF630(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681274C;
        v11 = a3;
        v26 = 8;
        goto LABEL_143;
      case 1:
        v27 = 0;
        v28 = 16 * v21;
        v29 = 4 * v21;
        v30 = v20 + v546;
        v31 = 1;
        v32 = v20 + 4 * v22;
        do
        {
          v33 = 0;
          v34 = v31;
          v35 = 1;
          v36 = ((4 * v27) | 1) * v21 + 1;
          v37 = 8 * v27;
          v38 = v32 + v28 * v27;
          v39 = 32 * v27;
          v40 = v30 + v21 * (v559 + 16 * v27);
          do
          {
            v41 = v35;
            v42 = 4 * v33;
            v43 = 16 * v33;
            v44 = 0.0;
            v45 = 4;
            v46 = v38 + 16 * v33;
            do
            {
              v44 = (float)((float)((float)(v44 + COERCE_FLOAT(*(_OWORD *)v46)) + COERCE_FLOAT(HIDWORD(*(_QWORD *)v46)))
                          + COERCE_FLOAT(*(_QWORD *)(v46 + 8)))
                  + COERCE_FLOAT(HIDWORD(*(_OWORD *)v46));
              v46 += v29;
              --v45;
            }
            while (v45);
            v47 = v36 + v42;
            v48 = v33 | v37;
            v49 = v39 + v42;
            v50 = v40 + v43;
            do
            {
              v51 = 0;
              v52 = v49;
              do
              {
                if (v45 != 1 || v51 != 4)
                  *(float *)(v18 + v52) = *(float *)(v50 + v51) - v23->f32[v47];
                v51 += 4;
                v52 += 8;
              }
              while (v51 != 16);
              ++v45;
              v49 += 64;
              v50 += v29;
            }
            while (v45 != 4);
            v35 = 0;
            *(float *)((char *)v14 + ((4 * v48) | 0x48)) = v14[v48];
            v14[v48] = v44 * 0.0625;
            v33 = 1;
          }
          while ((v41 & 1) != 0);
          v31 = 0;
          v27 = 1;
          v21 = v569;
        }
        while ((v34 & 1) != 0);
        v53 = *v14;
        v54 = v14[1];
        v55 = v14[8];
        v56 = v14[9];
        v57 = *v14 + v54;
        *v14 = (float)((float)(v57 + v55) + v56) * 0.25;
        v14[1] = (float)((float)(v57 - v55) - v56) * 0.25;
        v58 = v53 - v54;
        v59 = (float)((float)(v58 + v55) - v56) * 0.25;
        v60 = (float)((float)(v58 - v55) + v56) * 0.25;
        goto LABEL_27;
      case 2:
        for (i = 16; i != 144; i += 32)
        {
          v63 = &v23->f32[v21];
          v609 = vld2q_f32(v23->f32);
          v61 = 8 * v21;
          v23 = (float32x4_t *)((char *)v23 + v61);
          v610 = vld2q_f32(v63);
          v64 = vaddq_f32(v609.val[0], v609.val[1]);
          v65 = vaddq_f32(vaddq_f32(v64, v610.val[0]), v610.val[1]);
          v66 = vsubq_f32(vsubq_f32(v64, v610.val[0]), v610.val[1]);
          v609.val[0] = vsubq_f32(v609.val[0], v609.val[1]);
          v609.val[1] = vsubq_f32(vaddq_f32(v609.val[0], v610.val[0]), v610.val[1]);
          v609.val[0] = vaddq_f32(vsubq_f32(v609.val[0], v610.val[0]), v610.val[1]);
          __asm { FMOV            V2.4S, #0.25 }
          v71 = (float32x4_t *)((char *)&v572 + i);
          v71[-1] = vmulq_f32(v65, v610.val[0]);
          *v71 = vmulq_f32(v66, v610.val[0]);
          v71[7] = vmulq_f32(v609.val[1], v610.val[0]);
          v71[8] = vmulq_f32(v609.val[0], v610.val[0]);
        }
        v72 = 0;
        v73 = v585;
        *((_OWORD *)v14 + 12) = v584;
        *((_OWORD *)v14 + 13) = v73;
        v74 = v587;
        *((_OWORD *)v14 + 14) = v586;
        *((_OWORD *)v14 + 15) = v74;
        v75 = v581;
        *((_OWORD *)v14 + 8) = v580;
        *((_OWORD *)v14 + 9) = v75;
        v76 = v583;
        *((_OWORD *)v14 + 10) = v582;
        *((_OWORD *)v14 + 11) = v76;
        v77 = v577;
        *((_OWORD *)v14 + 4) = v576;
        *((_OWORD *)v14 + 5) = v77;
        v78 = v579;
        *((_OWORD *)v14 + 6) = v578;
        *((_OWORD *)v14 + 7) = v78;
        v79 = v573;
        *(float32x4_t *)v14 = v572;
        *((_OWORD *)v14 + 1) = v79;
        v80 = v575;
        v81 = 1;
        *((_OWORD *)v14 + 2) = v574;
        *((_OWORD *)v14 + 3) = v80;
        do
        {
          v82 = 0;
          v83 = v81;
          v84 = 16 * v72;
          v85 = 8 * v72;
          v86 = 1;
          do
          {
            v87 = v86;
            v88 = (8 * v82) | (4 * v84);
            v89 = *(float *)((char *)v14 + v88);
            v90 = *(float *)((char *)v14 + (v88 | 4));
            v91 = *(float *)((char *)v14 + (v88 | 0x20));
            v92 = *(float *)((char *)v14 + (v88 | 0x24));
            v93 = (float)((float)(v89 + v90) + v91) + v92;
            v94 = (float)((float)(v89 + v90) - v91) - v92;
            v95 = v89 - v90;
            v96 = v82 | v85;
            v572.f32[v96] = v93 * 0.25;
            *(float *)((char *)v572.f32 + ((4 * v96) | 8)) = v94 * 0.25;
            *(float *)((char *)v572.f32 + ((4 * v96) | 0x40)) = (float)((float)(v95 + v91) - v92) * 0.25;
            *(float *)((char *)v572.f32 + ((4 * v96) | 0x48)) = (float)((float)(v95 - v91) + v92) * 0.25;
            v82 = 1;
            v86 = 0;
          }
          while ((v87 & 1) != 0);
          v81 = 0;
          v72 = 1;
        }
        while ((v83 & 1) != 0);
        for (j = 0; j != 128; j += 32)
        {
          a8 = *(__n128 *)((char *)&v572 + j);
          *(__n128 *)(v18 + j) = a8;
        }
        v98 = v14[1];
        v99 = v14[8];
        v100 = v14[9];
        v101 = *v14 + v98;
        v102 = *v14 - v98;
        v59 = (float)((float)(v102 + v99) - v100) * 0.25;
        *v14 = (float)((float)(v101 + v99) + v100) * 0.25;
        v14[1] = (float)((float)(v101 - v99) - v100) * 0.25;
        v60 = (float)((float)(v102 - v99) + v100) * 0.25;
LABEL_27:
        v14[8] = v59;
        v14[9] = v60;
        goto LABEL_146;
      case 3:
        v552 = v16;
        v548 = v15;
        v103 = 0;
        v561 = 4 * v21;
        v104 = 1;
        do
        {
          v105 = 0;
          v565 = v104;
          v106 = &v23->i8[4 * v561 * v103];
          v107 = 32 * v103;
          v108 = 1;
          do
          {
            v109 = v108;
            v110 = &v572;
            sub_2368125DC(v21, (float32x4_t *)&v106[16 * v105], (int32x4_t *)&v572, (uint64_t)v571);
            v111 = 0;
            v112 = v107 + 4 * v105;
            do
            {
              v113 = 0;
              v114 = v112;
              do
              {
                *(_DWORD *)(v18 + v114) = v110->i32[v113++];
                v114 += 8;
              }
              while (v113 != 4);
              ++v111;
              v112 += 64;
              ++v110;
            }
            while (v111 != 4);
            v108 = 0;
            v105 = 1;
            v21 = v569;
          }
          while ((v109 & 1) != 0);
          v104 = 0;
          v103 = 1;
        }
        while ((v565 & 1) != 0);
        v115 = *v14;
        v116 = v14[1];
        v117 = v14[8];
        v118 = v14[9];
        v119 = *v14 + v116;
        *v14 = (float)((float)(v119 + v117) + v118) * 0.25;
        v14[1] = (float)((float)(v119 - v117) - v118) * 0.25;
        v120 = v115 - v116;
        v14[8] = (float)((float)(v120 + v117) - v118) * 0.25;
        v14[9] = (float)((float)(v120 - v117) + v118) * 0.25;
        v10 = a4;
        goto LABEL_52;
      case 4:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 16;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v541;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812674, (uint64_t)&v606, (uint64_t)&v572, 16, v541);
        v572.i64[0] = 16;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DF0D8(&v572, &v588);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 16;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812674;
        v11 = a3;
        goto LABEL_40;
      case 5:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 32;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v529;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810, (uint64_t)&v606, (uint64_t)&v572, 32, v529);
        v572.i64[0] = 32;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 32);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 32;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810;
        v11 = a3;
        goto LABEL_45;
      case 6:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v536;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812674, (uint64_t)&v606, (uint64_t)&v572, 8, v536);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DF314(&v572, &v588);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 16;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681274C;
LABEL_40:
        v26 = 16;
        goto LABEL_143;
      case 7:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681274C, (uint64_t)&v606, (uint64_t)&v572, 16, v536);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DF22C(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 8;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812674, (uint64_t)&v572, (uint64_t)&v588, 8, v536);
        v572.i64[0] = 8;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 16;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DF314(&v572, &v588);
        goto LABEL_146;
      case 8:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v541;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810, (uint64_t)&v606, (uint64_t)&v572, 8, v541);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2368128D4(&v572, &v588);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 32;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681274C;
        goto LABEL_45;
      case 9:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681274C, (uint64_t)&v606, (uint64_t)&v572, 32, v541);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DF3F8(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 8;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810, (uint64_t)&v572, (uint64_t)&v588, 8, v541);
        v572.i64[0] = 8;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 32;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2368128D4(&v572, &v588);
        goto LABEL_146;
      case 0xA:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 16;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v537;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810, (uint64_t)&v606, (uint64_t)&v572, 16, v537);
        v572.i64[0] = 16;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 16);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 32;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812674;
LABEL_45:
        v26 = 32;
        goto LABEL_143;
      case 0xB:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812674, (uint64_t)&v606, (uint64_t)&v572, 32, v537);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 16;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 16, 32);
        v572.i64[0] = 16;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810, (uint64_t)&v572, (uint64_t)&v588, 16, v537);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 32;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v11 = a3;
        v121 = 32;
        v122 = 16;
        goto LABEL_145;
      case 0xC:
        v552 = v16;
        v548 = v15;
        v123 = 0;
        v124 = 4 * v21;
        v125 = 1;
        do
        {
          v126 = v125;
          v127 = 32 * v123;
          v588.i64[0] = v21;
          v588.i64[1] = (uint64_t)v23->i64 + 4 * v124 * v123;
          sub_236812538((uint64_t)&v588, &v572, v571);
          for (k = 0; k != 128; k += 32)
          {
            v129 = v18 + v127;
            a8 = *(__n128 *)((char *)&v572 + k);
            v130 = *(__int128 *)((char *)&v572 + k + 16);
            *(__n128 *)v129 = a8;
            *(_OWORD *)(v129 + 16) = v130;
            v127 += 64;
          }
          v125 = 0;
          v123 = 1;
          v21 = v569;
        }
        while ((v126 & 1) != 0);
        v131 = *v14;
        v132 = v14[8];
        *v14 = (float)(*v14 + v132) * 0.5;
        v14[8] = (float)(v131 - v132) * 0.5;
LABEL_52:
        v8 = (uint64_t)a7;
        v11 = a3;
        v14 = a1;
        goto LABEL_58;
      case 0xD:
        v552 = v16;
        v548 = v15;
        v133 = 0;
        v134 = 1;
        do
        {
          v566 = v134;
          v135 = 32 * v133;
          v588.i64[0] = 4;
          v588.i64[1] = (uint64_t)&v572;
          sub_2367E0CD4(v21, &v23[v133], &v588, v568);
          v588.i64[0] = 4;
          v588.i64[1] = (uint64_t)&v572;
          v606 = 8;
          v607 = v571;
          sub_2367DFEEC(&v588, &v606);
          v588.i64[0] = 8;
          v588.i64[1] = (uint64_t)v571;
          v606 = 8;
          v607 = &v572;
          sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812454, (uint64_t)&v588, (uint64_t)&v606, 8, (uint64_t)v568);
          for (m = 0; m != 128; m += 32)
          {
            v137 = v18 + v135;
            a8 = *(__n128 *)((char *)&v572 + m);
            v138 = *(__int128 *)((char *)&v572 + m + 16);
            *(__n128 *)v137 = a8;
            *(_OWORD *)(v137 + 16) = v138;
            v135 += 64;
          }
          v134 = 0;
          v133 = 1;
          v21 = v569;
        }
        while ((v566 & 1) != 0);
        v139 = *v14;
        v140 = v14[8];
        *v14 = (float)(*v14 + v140) * 0.5;
        v14[8] = (float)(v139 - v140) * 0.5;
        v8 = (uint64_t)a7;
        v11 = a3;
        v14 = a1;
        v10 = a4;
LABEL_58:
        v15 = v548;
        v16 = v552;
        break;
      case 0xE:
        v141 = 0;
        v595 = 0u;
        v594 = 0u;
        v593 = 0u;
        v592 = 0u;
        v590 = 0u;
        v591 = 0u;
        v142 = v21;
        v143 = (float32x4_t *)(v20 + 4 * v22);
        v588 = 0u;
        v589 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v588 + v141) = *v143;
          v141 += 16;
          v143 = (float32x4_t *)((char *)v143 + v142 * 4);
        }
        while (v141 != 64);
        v144 = 0;
        v145 = (float32x4_t *)&unk_2369227D0;
        do
        {
          v146 = 0;
          v147 = 0uLL;
          do
          {
            v147 = vmlaq_n_f32(v147, v145[v146 * 4], v588.f32[v146]);
            ++v146;
          }
          while (v146 != 16);
          *(float32x4_t *)((char *)&v606 + 4 * v144) = v147;
          ++v145;
          _CF = v144 >= 0xC;
          v144 += 4;
        }
        while (!_CF);
        v148 = 0;
        v149 = &v606;
        v150 = (_DWORD *)v18;
        do
        {
          v151 = 0;
          v152 = v150;
          do
          {
            *v152 = *(_DWORD *)((char *)v149 + v151);
            v152 += 2;
            v151 += 4;
          }
          while (v151 != 16);
          ++v148;
          v150 += 16;
          v149 += 2;
        }
        while (v148 != 4);
        v153 = &v588;
        sub_2368125DC(v21, v23 + 1, (int32x4_t *)&v588, (uint64_t)&v572);
        v154 = 0;
        v155 = (_DWORD *)v16;
        do
        {
          v156 = 0;
          v157 = v155;
          do
          {
            *v157 = v153->i32[v156];
            v157 += 2;
            ++v156;
          }
          while (v156 != 8);
          ++v154;
          v155 += 16;
          ++v153;
        }
        while (v154 != 4);
        v604 = v569;
        v605 = &v23[v142];
        sub_236812538((uint64_t)&v604, &v588, &v572);
        v158 = 0;
        v159 = v17;
        do
        {
          a8 = *(__n128 *)((char *)&v588 + v158);
          v160 = *(__int128 *)((char *)&v588 + v158 + 16);
          *(__n128 *)v159 = a8;
          *(_OWORD *)(v159 + 16) = v160;
          v159 += 64;
          v158 += 32;
        }
        while (v158 != 128);
        v161 = v14[1];
        v162 = *v14 * 0.25;
        v163 = v14[8];
        *v14 = (float)((float)(v162 + v161) + (float)(v163 * 2.0)) * 0.25;
        v14[1] = (float)(v162 - v161) * 0.5;
        v14[8] = (float)((float)(v162 + v161) + (float)(v163 * -2.0)) * 0.25;
        v8 = (uint64_t)a7;
        goto LABEL_131;
      case 0xF:
        v164 = 0;
        v595 = 0u;
        v594 = 0u;
        v593 = 0u;
        v592 = 0u;
        v590 = 0u;
        v591 = 0u;
        v165 = (int32x4_t *)(v20 + 4 * v22 + 16);
        v588 = 0u;
        v589 = 0u;
        do
        {
          v166 = (int8x16_t)vrev64q_s32(*v165);
          *(int8x16_t *)((char *)&v588 + v164) = vextq_s8(v166, v166, 8uLL);
          v164 += 16;
          v165 = (int32x4_t *)((char *)v165 + 4 * v21);
        }
        while (v164 != 64);
        v167 = 0;
        v168 = (float32x4_t *)&unk_2369227D0;
        do
        {
          v169 = 0;
          v170 = 0uLL;
          do
          {
            v170 = vmlaq_n_f32(v170, v168[v169 * 4], v588.f32[v169]);
            ++v169;
          }
          while (v169 != 16);
          *(float32x4_t *)((char *)&v606 + 4 * v167) = v170;
          ++v168;
          _CF = v167 >= 0xC;
          v167 += 4;
        }
        while (!_CF);
        v171 = 0;
        v172 = &v606;
        v173 = (_DWORD *)v18;
        do
        {
          v174 = 0;
          v175 = v173;
          do
          {
            *v175 = *(_DWORD *)((char *)v172 + v174);
            v175 += 2;
            v174 += 4;
          }
          while (v174 != 16);
          ++v171;
          v173 += 16;
          v172 += 2;
        }
        while (v171 != 4);
        v176 = &v588;
        sub_2368125DC(v21, v23, (int32x4_t *)&v588, (uint64_t)&v572);
        v177 = 0;
        v178 = (_DWORD *)v16;
        do
        {
          v179 = 0;
          v180 = v178;
          do
          {
            *v180 = v176->i32[v179];
            v180 += 2;
            ++v179;
          }
          while (v179 != 8);
          ++v177;
          v178 += 16;
          ++v176;
        }
        while (v177 != 4);
        v604 = v569;
        v605 = &v23[v569];
        sub_236812538((uint64_t)&v604, &v588, &v572);
        v181 = 0;
        v182 = v17;
        do
        {
          a8 = *(__n128 *)((char *)&v588 + v181);
          v183 = *(__int128 *)((char *)&v588 + v181 + 16);
          *(__n128 *)v182 = a8;
          *(_OWORD *)(v182 + 16) = v183;
          v182 += 64;
          v181 += 32;
        }
        while (v181 != 128);
        goto LABEL_130;
      case 0x10:
        v595 = 0u;
        v594 = 0u;
        v593 = 0u;
        v592 = 0u;
        v590 = 0u;
        v591 = 0u;
        v588 = 0u;
        v589 = 0u;
        v184 = (float32x4_t *)(v20 + 16 * v21 + 4 * v22);
        for (n = 48; n != -16; n -= 16)
        {
          *(float32x4_t *)((char *)&v588 + n) = *v184;
          v184 = (float32x4_t *)((char *)v184 + 4 * v21);
        }
        v186 = 0;
        v187 = (float32x4_t *)&unk_2369227D0;
        do
        {
          v188 = 0;
          v189 = 0uLL;
          do
          {
            v189 = vmlaq_n_f32(v189, v187[v188 * 4], v588.f32[v188]);
            ++v188;
          }
          while (v188 != 16);
          *(float32x4_t *)((char *)&v606 + 4 * v186) = v189;
          ++v187;
          _CF = v186 >= 0xC;
          v186 += 4;
        }
        while (!_CF);
        v190 = 0;
        v191 = &v606;
        v192 = (_DWORD *)v18;
        do
        {
          v193 = 0;
          v194 = v192;
          do
          {
            *v194 = *(_DWORD *)((char *)v191 + v193);
            v194 += 2;
            v193 += 4;
          }
          while (v193 != 16);
          ++v190;
          v192 += 16;
          v191 += 2;
        }
        while (v190 != 4);
        v195 = &v588;
        sub_2368125DC(v21, &v23[v21 + 1], (int32x4_t *)&v588, (uint64_t)&v572);
        v196 = 0;
        v197 = (_DWORD *)v16;
        do
        {
          v198 = 0;
          v199 = v197;
          do
          {
            *v199 = v195->i32[v198];
            v199 += 2;
            ++v198;
          }
          while (v198 != 8);
          ++v196;
          v197 += 16;
          ++v195;
        }
        while (v196 != 4);
        v604 = v569;
        v605 = v23;
        sub_236812538((uint64_t)&v604, &v588, &v572);
        v200 = 0;
        v201 = v17;
        do
        {
          a8 = *(__n128 *)((char *)&v588 + v200);
          v202 = *(__int128 *)((char *)&v588 + v200 + 16);
          *(__n128 *)v201 = a8;
          *(_OWORD *)(v201 + 16) = v202;
          v201 += 64;
          v200 += 32;
        }
        while (v200 != 128);
        goto LABEL_130;
      case 0x11:
        v595 = 0u;
        v594 = 0u;
        v593 = 0u;
        v592 = 0u;
        v590 = 0u;
        v591 = 0u;
        v588 = 0u;
        v589 = 0u;
        v203 = (int32x4_t *)(v20 + 16 * v21 + 4 * v22 + 16);
        for (ii = 48; ii != -16; ii -= 16)
        {
          v205 = (int8x16_t)vrev64q_s32(*v203);
          *(int8x16_t *)((char *)&v588 + ii) = vextq_s8(v205, v205, 8uLL);
          v203 = (int32x4_t *)((char *)v203 + 4 * v21);
        }
        v206 = 0;
        v207 = (float32x4_t *)&unk_2369227D0;
        do
        {
          v208 = 0;
          v209 = 0uLL;
          do
          {
            v209 = vmlaq_n_f32(v209, v207[v208 * 4], v588.f32[v208]);
            ++v208;
          }
          while (v208 != 16);
          *(float32x4_t *)((char *)&v606 + 4 * v206) = v209;
          ++v207;
          _CF = v206 >= 0xC;
          v206 += 4;
        }
        while (!_CF);
        v210 = 0;
        v211 = &v606;
        v212 = (_DWORD *)v18;
        do
        {
          v213 = 0;
          v214 = v212;
          do
          {
            *v214 = *(_DWORD *)((char *)v211 + v213);
            v214 += 2;
            v213 += 4;
          }
          while (v213 != 16);
          ++v210;
          v212 += 16;
          v211 += 2;
        }
        while (v210 != 4);
        v215 = &v588;
        sub_2368125DC(v21, &v23[v21], (int32x4_t *)&v588, (uint64_t)&v572);
        v216 = 0;
        v217 = (_DWORD *)v16;
        do
        {
          v218 = 0;
          v219 = v217;
          do
          {
            *v219 = v215->i32[v218];
            v219 += 2;
            ++v218;
          }
          while (v218 != 8);
          ++v216;
          v217 += 16;
          ++v215;
        }
        while (v216 != 4);
        v604 = v569;
        v605 = v23;
        sub_236812538((uint64_t)&v604, &v588, &v572);
        v220 = 0;
        v221 = v17;
        do
        {
          a8 = *(__n128 *)((char *)&v588 + v220);
          v222 = *(__int128 *)((char *)&v588 + v220 + 16);
          *(__n128 *)v221 = a8;
          *(_OWORD *)(v221 + 16) = v222;
          v221 += 64;
          v220 += 32;
        }
        while (v220 != 128);
LABEL_130:
        v223 = v14[1];
        v224 = *v14 * 0.25;
        v225 = v14[8];
        *v14 = (float)((float)(v224 + v223) + (float)(v225 * 2.0)) * 0.25;
        v14[1] = (float)(v224 - v223) * 0.5;
        v14[8] = (float)((float)(v224 + v223) + (float)(v225 * -2.0)) * 0.25;
LABEL_131:
        v14 = a1;
        v11 = a3;
        break;
      case 0x12:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 64;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v531;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812A9C, (uint64_t)&v606, (uint64_t)&v572, 64, v531);
        v572.i64[0] = 64;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 64);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 64;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812A9C;
        v11 = a3;
        goto LABEL_134;
      case 0x13:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 32;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v538;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812A9C, (uint64_t)&v606, (uint64_t)&v572, 32, v538);
        v572.i64[0] = 32;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 32);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 64;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810;
LABEL_134:
        v26 = 64;
        goto LABEL_143;
      case 0x14:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812810, (uint64_t)&v606, (uint64_t)&v572, 64, v538);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 32;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 64);
        v572.i64[0] = 32;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812A9C, (uint64_t)&v572, (uint64_t)&v588, 32, v538);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 64;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v11 = a3;
        v121 = 64;
        v122 = 32;
        goto LABEL_145;
      case 0x15:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 128;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v532;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812B74, (uint64_t)&v606, (uint64_t)&v572, 128, v532);
        v572.i64[0] = 128;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 128);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 128;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812B74;
        v11 = a3;
        goto LABEL_138;
      case 0x16:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 64;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v539;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812B74, (uint64_t)&v606, (uint64_t)&v572, 64, v539);
        v572.i64[0] = 64;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 64);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 128;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812A9C;
LABEL_138:
        v26 = 128;
        goto LABEL_143;
      case 0x17:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812A9C, (uint64_t)&v606, (uint64_t)&v572, 128, v539);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 64;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 128);
        v572.i64[0] = 64;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812B74, (uint64_t)&v572, (uint64_t)&v588, 64, v539);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 128;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v11 = a3;
        v121 = 128;
        v122 = 64;
        goto LABEL_145;
      case 0x18:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 256;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v533;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812C38, (uint64_t)&v606, (uint64_t)&v572, 256, v533);
        v572.i64[0] = 256;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 256;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 256, 256);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 256;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812C38;
        v11 = a3;
        goto LABEL_142;
      case 0x19:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 128;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v24 = v540;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812C38, (uint64_t)&v606, (uint64_t)&v572, 128, v540);
        v572.i64[0] = 128;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 256;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 256, 128);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        v11 = a3;
        v588.i64[0] = 256;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812B74;
LABEL_142:
        v26 = 256;
LABEL_143:
        sub_2367DED38(v25, (uint64_t)&v572, (uint64_t)&v588, v26, v24);
        goto LABEL_146;
      case 0x1A:
        v606 = *((_QWORD *)v10 + 10);
        v607 = (float32x4_t *)(v20 + 4 * v22);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812B74, (uint64_t)&v606, (uint64_t)&v572, 256, v540);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 128;
        v588.i64[1] = a6 + 4 * v15 * v550;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 256);
        v572.i64[0] = 128;
        v572.i64[1] = a6 + 4 * v15 * v550;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812C38, (uint64_t)&v572, (uint64_t)&v588, 128, v540);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 256;
        v588.i64[1] = a6 + 4 * v15 * v550;
        v11 = a3;
        v121 = 256;
        v122 = 128;
LABEL_145:
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, v121, v122);
LABEL_146:
        v14 = a1;
        break;
      default:
        break;
    }
    ++v15;
    v18 += v554;
    v16 += v554;
    v17 += v554;
  }
  while (v15 != 3);
  v226 = v11;
  v227 = *(unsigned int *)v14;
  v228 = byte_23692665C[v227];
  v229 = byte_236926677[v227];
  v230 = v229 * v228;
  if ((_DWORD)v229 * (_DWORD)v228 == 1)
  {
    a8.n128_u32[0] = *(_DWORD *)(*((_QWORD *)v10 + 1) + 4 * (*((_QWORD *)v10 + 2) * (v226 >> 3) + (a2 >> 3)));
  }
  else if ((_DWORD)v230 == 2)
  {
    v231 = 0x850uLL >> v227;
    v232 = v226 >> 3;
    v233 = *((_QWORD *)v10 + 1);
    v234 = *((_QWORD *)v10 + 2);
    v235 = v234 * (v226 >> 3) + (a2 >> 3);
    a8.n128_u32[0] = *(_DWORD *)(v233 + 4 * v235);
    if ((v231 & 1) != 0)
      v236 = *(float *)(v233 + 4 * (v234 + v234 * v232 + (a2 >> 3)));
    else
      v236 = *(float *)(v233 + 4 * v235 + 4);
    if (a8.n128_f32[0] < v236)
      a8.n128_f32[0] = v236;
  }
  else
  {
    v237 = 0;
    v238 = v226 >> 3;
    v239 = *((_QWORD *)v10 + 2);
    if (v228 <= 1)
      v228 = 1;
    if (v229 <= 1)
      v229 = 1;
    v240 = *((_QWORD *)v10 + 1) + 4 * (v239 * v238 + (a2 >> 3));
    v241 = 4 * v239;
    a8.n128_u32[0] = 0;
    do
    {
      v242 = (float *)v240;
      v243 = v228;
      do
      {
        v244 = *v242++;
        v245 = (float)((float)(v244 * v244) * (float)(v244 * v244))
             * (float)((float)(v244 * v244) * (float)(v244 * v244));
        a8.n128_f32[0] = a8.n128_f32[0] + (float)(v245 * v245);
        --v243;
      }
      while (v243);
      ++v237;
      v240 += v241;
    }
    while (v237 != v229);
    a8.n128_f32[0] = a8.n128_f32[0] / (float)v230;
    v246 = vdup_lane_s32((int32x2_t)a8.n128_u64[0], 0);
    v247 = vadd_s32(v246, vdup_n_s32(0xC0D55555));
    __asm { FMOV            V2.2S, #-1.0 }
    v249 = vadd_f32((float32x2_t)vsub_s32(v246, (int32x2_t)vand_s8((int8x8_t)v247, (int8x8_t)0x7F0000007FLL)), _D2);
    v250 = vmul_f32(vadd_f32(vdiv_f32(vmla_f32((float32x2_t)vdup_n_s32(0xB5F85AB0), v249, vmla_f32((float32x2_t)vdup_n_s32(0x3FB6E02Bu), (float32x2_t)vdup_n_s32(0x3F3E11C7u), v249)), vmla_f32((float32x2_t)vdup_n_s32(0x3F7D8625u), v249, vmla_f32((float32x2_t)vdup_n_s32(0x3F813CEDu), (float32x2_t)vdup_n_s32(0x3E32458Cu), v249))), vcvt_f32_s32(vshr_n_s32(v247, 0x17uLL))), (float32x2_t)vdup_n_s32(0x3D800000u));
    v251 = vrndm_f32(v250);
    __asm { FMOV            V3.2S, #1.0 }
    a8.n128_u64[0] = (unint64_t)vsub_f32(v250, v251);
    a8.n128_u32[0] = vdiv_f32(vmul_f32(vmla_f32((float32x2_t)vdup_n_s32(0x42C519F0u), (float32x2_t)a8.n128_u64[0], vmla_f32((float32x2_t)vdup_n_s32(0x424379A1u), (float32x2_t)a8.n128_u64[0], vadd_f32((float32x2_t)a8.n128_u64[0], (float32x2_t)vdup_n_s32(0x4122CC6Bu)))), (float32x2_t)vadd_s32(vshl_n_s32(vcvt_s32_f32(v251), 0x17uLL), _D3)), vmla_f32((float32x2_t)vdup_n_s32(0x42C519F1u), (float32x2_t)a8.n128_u64[0], vmla_f32((float32x2_t)vdup_n_s32(0xC19B8831), (float32x2_t)a8.n128_u64[0], vmla_f32((float32x2_t)vdup_n_s32(0xBCB621BE), (float32x2_t)vdup_n_s32(0x3E5749EEu), (float32x2_t)a8.n128_u64[0])))).u32[0];
  }
  v555 = a8.n128_f32[0];
  v253 = 0;
  v547 = v230 << 6;
  v254 = *(unsigned int *)v14;
  v553 = v543 << 8;
  v544 = (float32x4_t *)(a6 + (v543 << 8));
  v534 = v8 + 32;
  v535 = v8 + 4;
  v528 = a6 + 16;
  v255 = 0uLL;
  v256 = 0.0;
  __asm { FMOV            V5.4S, #1.0 }
  v258 = (float32x4_t *)a6;
  v549 = v230;
  v551 = _Q5;
  do
  {
    v570 = v255;
    if (v230)
    {
      v259 = 0;
      v260 = *(_QWORD *)(*(_QWORD *)v10 + 8 * (v253 + 3 * v254) + 72);
      v261 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)v10 + 40) + 4 * v260);
      v262 = (const float *)(a5 + 4 * v253);
      v263 = vld1q_dup_f32(v262);
      v264 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)v10 + 32) + 4 * v260);
      v265 = 0uLL;
      v266 = v258;
      v267 = v544;
      v268 = (float32x4_t *)v8;
      v269 = 0uLL;
      do
      {
        v270 = *v266++;
        v271 = v270;
        v272 = *v267++;
        v273 = vmulq_f32(v263, v272);
        v274 = *v261++;
        v275 = vmulq_f32(vsubq_f32(v271, v273), vmulq_n_f32(v274, v555));
        v276 = vrndnq_f32(v275);
        v277 = *v264++;
        *v268++ = vmulq_f32(v277, vsubq_f32(v275, v276));
        v265 = vaddq_f32(v265, vsqrtq_f32(vabsq_f32(v276)));
        v269 = vaddq_f32(v269, (float32x4_t)vbicq_s8(_Q5, (int8x16_t)vceqzq_f32(v276)));
        v259 += 4;
      }
      while (v259 < v547);
      v254 = *(unsigned int *)v14;
    }
    else
    {
      v269 = 0uLL;
      v265 = 0uLL;
    }
    v564 = v265;
    v567 = v269;
    v560 = (uint64_t)v258;
    v562 = v253;
    v278 = byte_23692665C[v254];
    v279 = 8 * v278;
    switch(v254)
    {
      case 0:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 8;
        v572.i64[1] = v8;
        v588.i64[0] = 8;
        v588.i64[1] = (uint64_t)v571;
        v280 = v530;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812FA4, (uint64_t)&v572, (uint64_t)&v588, 8, v530);
        v572.i64[0] = 8;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = v8;
        sub_2367DF630(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236812FA4;
        v282 = 8;
        goto LABEL_356;
      case 1:
        v283 = 0;
        v284 = *(float *)v8;
        v285 = *(float *)(v8 + 4);
        v286 = *(float *)(v8 + 32);
        v287 = *(float *)(v8 + 36);
        v288 = *(float *)v8 + v285;
        v572.f32[0] = (float)(v288 + v286) + v287;
        v572.f32[1] = (float)(v288 - v286) - v287;
        v289 = v284 - v285;
        v572.f32[2] = (float)(v289 + v286) - v287;
        v572.f32[3] = (float)(v289 - v286) + v287;
        v290 = v278 << 7;
        v291 = 32 * v278;
        v292 = 1;
        v278 = v562;
        do
        {
          v293 = 0;
          v294 = v292;
          v295 = 2 * v283;
          v296 = 8 * v283;
          v297 = 1;
          v298 = ((4 * v283) | 1) * v279;
          v299 = 4 * v283 * v279;
          v300 = a6 + v290 * v283;
          v301 = v8 + 32 * v283;
          do
          {
            v302 = 0;
            v303 = v297;
            v304 = v293 | v296;
            v305 = (float *)(v301 + 4 * v293);
            v306 = 0.0;
            v307 = v305;
            do
            {
              v308 = 0;
              v309 = v307;
              do
              {
                if (v308 | v302)
                  v306 = v306 + *v309;
                ++v308;
                v309 += 2;
              }
              while (v308 != 4);
              ++v302;
              v307 += 16;
            }
            while (v302 != 4);
            v310 = 0;
            v311 = 4 * v293;
            v312 = v298 | (4 * v293) | 1;
            *(float *)(a6 + 4 * v312) = v572.f32[v293 | v295] + (float)(v306 * -0.0625);
            v313 = v300 + 16 * v293;
            do
            {
              v314 = 0;
              v315 = v305;
              do
              {
                if (v310 != 1 || v314 != 4)
                  *(float *)(v313 + v314) = *v315 + *(float *)(a6 + 4 * v312);
                v314 += 4;
                v315 += 2;
              }
              while (v314 != 16);
              ++v310;
              v313 += v291;
              v305 += 16;
            }
            while (v310 != 4);
            v297 = 0;
            *(float *)(a6 + 4 * (v311 | v299)) = *(float *)(v8 + ((4 * v304) | 0x48)) + *(float *)(a6 + 4 * v312);
            v293 = 1;
          }
          while ((v303 & 1) != 0);
          v292 = 0;
          v283 = 1;
        }
        while ((v294 & 1) != 0);
        goto LABEL_363;
      case 2:
        v316 = 0;
        v317 = *(_OWORD *)(v8 + 208);
        v600 = *(_OWORD *)(v8 + 192);
        v601 = v317;
        v318 = *(_OWORD *)(v8 + 240);
        v602 = *(_OWORD *)(v8 + 224);
        v603 = v318;
        v319 = *(_OWORD *)(v8 + 144);
        v596 = *(_OWORD *)(v8 + 128);
        v597 = v319;
        v320 = *(_OWORD *)(v8 + 176);
        v598 = *(_OWORD *)(v8 + 160);
        v599 = v320;
        v321 = *(_OWORD *)(v8 + 80);
        v592 = *(_OWORD *)(v8 + 64);
        v593 = v321;
        v322 = *(_OWORD *)(v8 + 112);
        v594 = *(_OWORD *)(v8 + 96);
        v595 = v322;
        v323 = *(_OWORD *)(v8 + 16);
        v588 = *(float32x4_t *)v8;
        v589 = v323;
        v324 = *(_OWORD *)(v8 + 48);
        v590 = *(_OWORD *)(v8 + 32);
        v591 = v324;
        v325 = (float)((float)(v588.f32[0] + v588.f32[1]) - *(float *)&v590) - *((float *)&v590 + 1);
        *(float *)&v324 = (float)((float)(v588.f32[0] - v588.f32[1]) + *(float *)&v590) - *((float *)&v590 + 1);
        *(float *)&v326 = (float)((float)(v588.f32[0] - v588.f32[1]) - *(float *)&v590) + *((float *)&v590 + 1);
        v588.f32[0] = (float)((float)(v588.f32[0] + v588.f32[1]) + *(float *)&v590) + *((float *)&v590 + 1);
        v588.f32[1] = v325;
        *(_QWORD *)&v590 = __PAIR64__(v326, v324);
        v327 = 1;
        v279 = v560;
        do
        {
          v328 = 0;
          v329 = v327;
          v330 = 8 * v316;
          v331 = 16 * v316;
          v332 = 1;
          do
          {
            v333 = v332;
            v334 = 4 * (v328 | v330);
            v335 = v588.f32[v334 / 4];
            v336 = *(float *)((char *)v588.f32 + (v334 | 8));
            v337 = *(float *)((char *)v588.f32 + (v334 | 0x40));
            v338 = *(float *)((char *)v588.f32 + (v334 | 0x48));
            v339 = (float)((float)(v335 + v336) + v337) + v338;
            v340 = (float)((float)(v335 + v336) - v337) - v338;
            v341 = v335 - v336;
            v342 = (8 * v328) | (4 * v331);
            *(float *)((char *)v572.f32 + v342) = v339;
            *(float *)((char *)v572.f32 + (v342 | 4)) = v340;
            *(float *)((char *)v572.f32 + (v342 | 0x20)) = (float)(v341 + v337) - v338;
            *(float *)((char *)v572.f32 + (v342 | 0x24)) = (float)(v341 - v337) + v338;
            v328 = 1;
            v332 = 0;
          }
          while ((v333 & 1) != 0);
          v327 = 0;
          v316 = 1;
        }
        while ((v329 & 1) != 0);
        for (jj = 0; jj != 128; jj += 32)
          *(float32x4_t *)((char *)&v588 + jj) = *(float32x4_t *)((char *)&v572 + jj);
        v344 = 0;
        v345 = (float32x4_t *)&v596;
        do
        {
          v346 = v345[-8];
          v347 = v345[-7];
          v348 = *v345;
          v349 = v345[1];
          v345 += 2;
          v350 = vaddq_f32(v346, v347);
          v611.val[0] = vaddq_f32(vaddq_f32(v350, v348), v349);
          v611.val[1] = vsubq_f32(vsubq_f32(v350, v348), v349);
          v351 = vsubq_f32(v346, v347);
          v612.val[0] = vsubq_f32(vaddq_f32(v351, v348), v349);
          v352 = &v572.f32[v344];
          vst2q_f32(v352, v611);
          v352 += 8;
          v612.val[1] = vaddq_f32(vsubq_f32(v351, v348), v349);
          vst2q_f32(v352, v612);
          v344 += 16;
        }
        while (v344 != 64);
        v353 = 0;
        v600 = v584;
        v601 = v585;
        v602 = v586;
        v603 = v587;
        v596 = v580;
        v597 = v581;
        v598 = v582;
        v599 = v583;
        v592 = v576;
        v593 = v577;
        v594 = v578;
        v595 = v579;
        v588 = v572;
        v589 = v573;
        v354 = a6;
        v590 = v574;
        v591 = v575;
        do
        {
          v355 = *(__int128 *)((char *)&v588 + v353 + 16);
          *(float32x4_t *)v354 = *(float32x4_t *)((char *)&v588 + v353);
          *(_OWORD *)(v354 + 16) = v355;
          v353 += 32;
          v354 += 32 * v278;
        }
        while (v353 != 256);
        v278 = v562;
        break;
      case 3:
        v356 = 0;
        v357 = *(float *)v8;
        v358 = *(float *)(v8 + 4);
        v359 = *(float *)(v8 + 32);
        v360 = *(float *)(v8 + 36);
        v361 = *(float *)v8 + v358;
        v588.f32[0] = (float)(v361 + v359) + v360;
        v588.f32[1] = (float)(v361 - v359) - v360;
        v362 = v357 - v358;
        v588.f32[2] = (float)(v362 + v359) - v360;
        v588.f32[3] = (float)(v362 - v359) + v360;
        v363 = 32 * v278;
        v364 = 1;
        do
        {
          v365 = 0;
          v366 = v364;
          v367 = 2 * v356;
          v368 = a6 + 4 * v363 * v356;
          v369 = v8 + 32 * v356;
          v370 = 1;
          do
          {
            v371 = 0;
            v372 = v370;
            v572.i32[0] = v588.i32[v365 | v367];
            v373 = (__int32 *)(v369 + 4 * v365);
            v374 = &v572;
            do
            {
              v375 = 0;
              v376 = v373;
              do
              {
                if (v375 | v371)
                  v374->i32[v375] = *v376;
                ++v375;
                v376 += 2;
              }
              while (v375 != 4);
              ++v371;
              ++v374;
              v373 += 16;
            }
            while (v371 != 4);
            sub_2367DEFD0((uint64_t)&v572, v279, v368 + 16 * v365, (uint64_t)v571);
            v370 = 0;
            v365 = 1;
          }
          while ((v372 & 1) != 0);
          v364 = 0;
          v356 = 1;
          v8 = (uint64_t)a7;
        }
        while ((v366 & 1) != 0);
        v14 = a1;
        goto LABEL_294;
      case 4:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 16;
        v572.i64[1] = v8;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        v280 = v541;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812F38, (uint64_t)&v572, (uint64_t)&v588, 16, v541);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 16;
        v588.i64[1] = v8;
        sub_2367DF0D8(&v572, &v588);
        v572.i64[0] = 16;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236812F38;
        goto LABEL_217;
      case 5:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        v280 = v529;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236813010, (uint64_t)&v572, (uint64_t)&v588, 32, v529);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 32;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 32);
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236813010;
        goto LABEL_221;
      case 6:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 16;
        v572.i64[1] = v8;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        v377 = v536;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812FA4, (uint64_t)&v572, (uint64_t)&v588, 16, v536);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = v8;
        sub_2367DF22C(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236812F38;
        goto LABEL_219;
      case 7:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 16;
        v572.i64[1] = v8;
        v588.i64[0] = 8;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DF22C(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = v8;
        v280 = v536;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812F38, (uint64_t)&v572, (uint64_t)&v588, 8, v536);
        v572.i64[0] = 8;
        v572.i64[1] = v8;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DF314(&v572, &v588);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v230 = v549;
        v281 = sub_236812FA4;
LABEL_217:
        v282 = 16;
        goto LABEL_356;
      case 8:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        v377 = v541;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812FA4, (uint64_t)&v572, (uint64_t)&v588, 32, v541);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = v8;
        sub_2367DF3F8(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236813010;
LABEL_219:
        v282 = 8;
        goto LABEL_358;
      case 9:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v588.i64[0] = 8;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DF3F8(&v572, &v588);
        v572.i64[0] = 8;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 8;
        v588.i64[1] = v8;
        v280 = v541;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236813010, (uint64_t)&v572, (uint64_t)&v588, 8, v541);
        v572.i64[0] = 8;
        v572.i64[1] = v8;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2368128D4(&v572, &v588);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v230 = v549;
        v281 = sub_236812FA4;
LABEL_221:
        v282 = 32;
        goto LABEL_356;
      case 10:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        v377 = v537;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812F38, (uint64_t)&v572, (uint64_t)&v588, 32, v537);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 16;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 16, 32);
        v572.i64[0] = 16;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236813010;
        v282 = 16;
        goto LABEL_358;
      case 11:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v588.i64[0] = 16;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 16, 32);
        v572.i64[0] = 16;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 16;
        v588.i64[1] = v8;
        v378 = v537;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236813010, (uint64_t)&v572, (uint64_t)&v588, 16, v537);
        v572.i64[0] = 16;
        v572.i64[1] = v8;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 16);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v230 = v549;
        v10 = a4;
        v281 = sub_236812F38;
        v282 = 32;
        goto LABEL_360;
      case 12:
        v379 = 0;
        v380 = *(float *)(v8 + 32);
        v381 = *(float *)v8 - v380;
        *(float *)&v606 = *(float *)v8 + v380;
        *((float *)&v606 + 1) = v381;
        v382 = 32 * v278;
        v383 = 1;
        v278 = v562;
        do
        {
          v384 = 0;
          v385 = v383;
          v572.i32[0] = *((_DWORD *)&v606 + v379);
          v386 = v8 + 32 * v379;
          v387 = &v572;
          do
          {
            for (kk = 0; kk != 8; ++kk)
            {
              if (kk | v384)
                v387->i32[kk] = *(_DWORD *)(v386 + 4 * kk);
            }
            ++v384;
            v387 += 2;
            v386 += 64;
          }
          while (v384 != 4);
          v588.i64[0] = v279;
          v588.i64[1] = a6 + 4 * v382 * v379;
          sub_236812E90(&v572, (uint64_t)&v588, v571);
          v383 = 0;
          v379 = 1;
        }
        while ((v385 & 1) != 0);
        goto LABEL_348;
      case 13:
        v389 = 0;
        v390 = *(float *)(v8 + 32);
        v391 = *(float *)v8 - v390;
        *(float *)&v604 = *(float *)v8 + v390;
        *((float *)&v604 + 1) = v391;
        v392 = 1;
        do
        {
          v393 = 0;
          v394 = v392;
          v572.i32[0] = *((_DWORD *)&v604 + v389);
          v395 = v8 + 32 * v389;
          v396 = &v572;
          do
          {
            for (mm = 0; mm != 8; ++mm)
            {
              if (mm | v393)
                v396->i32[mm] = *(_DWORD *)(v395 + 4 * mm);
            }
            ++v393;
            v396 += 2;
            v395 += 64;
          }
          while (v393 != 4);
          v588.i64[0] = 8;
          v588.i64[1] = (uint64_t)&v572;
          v398 = (float32x4_t *)(a6 + 16 * v389);
          v606 = 8;
          v607 = v571;
          sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812E24, (uint64_t)&v588, (uint64_t)&v606, 8, (uint64_t)v568);
          v588.i64[0] = 8;
          v588.i64[1] = (uint64_t)v571;
          v606 = 4;
          v607 = &v572;
          sub_2367DED50(&v588, &v606);
          sub_2367DEDF8(&v572, 4, v398, v279, v568);
          v392 = 0;
          v389 = 1;
        }
        while ((v394 & 1) != 0);
        v10 = a4;
        v14 = a1;
        goto LABEL_294;
      case 14:
        v399 = 0;
        v400 = *(float *)v8;
        v401 = *(float *)(v8 + 4);
        v402 = *(float *)(v8 + 32);
        v403 = *(float *)v8 + v402;
        *(float *)&v606 = (float)(v401 + v403) * 4.0;
        v404 = &v606;
        v405 = (_DWORD *)v8;
        do
        {
          v406 = 0;
          v407 = v405;
          do
          {
            if (v406 | v399)
              *((_DWORD *)v404 + v406) = *v407;
            ++v406;
            v407 += 2;
          }
          while (v406 != 4);
          ++v399;
          v404 += 2;
          v405 += 16;
        }
        while (v399 != 4);
        v408 = 0;
        v409 = (float32x4_t *)&unk_2369217E0;
        do
        {
          v410 = 0;
          v411 = 0uLL;
          do
          {
            v411 = vmlaq_n_f32(v411, v409[v410], *(float *)((char *)&v606 + v410));
            v410 += 4;
          }
          while (v410 != 64);
          *(float32x4_t *)((char *)&v588 + 4 * v408) = v411;
          ++v409;
          _CF = v408 >= 0xC;
          v408 += 4;
        }
        while (!_CF);
        v412 = 0;
        v413 = 32 * v278;
        v414 = (float32x4_t *)a6;
        do
        {
          *v414 = *(float32x4_t *)((char *)&v588 + v412);
          v412 += 16;
          v414 = (float32x4_t *)((char *)v414 + v413);
        }
        while (v412 != 64);
        v415 = 0;
        v588.f32[0] = v403 - v401;
        v416 = &v588;
        v417 = (__int32 *)v535;
        v278 = v562;
        do
        {
          v418 = 0;
          v419 = v417;
          do
          {
            if (v418 | v415)
              v416->i32[v418] = *v419;
            ++v418;
            v419 += 2;
          }
          while (v418 != 4);
          ++v415;
          ++v416;
          v417 += 16;
        }
        while (v415 != 4);
        v420 = v400 - v402;
        v421 = &v588;
        sub_2367DEFD0((uint64_t)&v588, v279, v528, (uint64_t)&v572);
        v422 = 0;
        v588.f32[0] = v420;
        v423 = v534;
        do
        {
          for (nn = 0; nn != 8; ++nn)
          {
            if (nn | v422)
              v421->i32[nn] = *(_DWORD *)(v423 + 4 * nn);
          }
          ++v422;
          v421 += 2;
          v423 += 64;
        }
        while (v422 != 4);
        v604 = v279;
        v605 = (float32x4_t *)(a6 + 4 * v413);
        goto LABEL_347;
      case 15:
        v425 = 0;
        v426 = *(float *)v8;
        v427 = *(float *)(v8 + 4);
        v428 = *(float *)(v8 + 32);
        v429 = *(float *)v8 + v428;
        *(float *)&v606 = (float)(v427 + v429) * 4.0;
        v430 = &v606;
        v431 = (_DWORD *)v8;
        do
        {
          v432 = 0;
          v433 = v431;
          do
          {
            if (v432 | v425)
              *((_DWORD *)v430 + v432) = *v433;
            ++v432;
            v433 += 2;
          }
          while (v432 != 4);
          ++v425;
          v430 += 2;
          v431 += 16;
        }
        while (v425 != 4);
        v434 = 0;
        v435 = (float32x4_t *)&unk_2369217E0;
        do
        {
          v436 = 0;
          v437 = 0uLL;
          do
          {
            v437 = vmlaq_n_f32(v437, v435[v436], *(float *)((char *)&v606 + v436));
            v436 += 4;
          }
          while (v436 != 64);
          *(float32x4_t *)((char *)&v588 + 4 * v434) = v437;
          ++v435;
          _CF = v434 >= 0xC;
          v434 += 4;
        }
        while (!_CF);
        v438 = 0;
        v439 = 16;
        do
        {
          v440 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v588 + v438));
          *(int8x16_t *)(a6 + v439) = vextq_s8(v440, v440, 8uLL);
          v438 += 16;
          v439 += 32 * v278;
        }
        while (v438 != 64);
        v441 = 0;
        v588.f32[0] = v429 - v427;
        v442 = &v588;
        v443 = (__int32 *)v535;
        do
        {
          v444 = 0;
          v445 = v443;
          do
          {
            if (v444 | v441)
              v442->i32[v444] = *v445;
            ++v444;
            v445 += 2;
          }
          while (v444 != 4);
          ++v441;
          ++v442;
          v443 += 16;
        }
        while (v441 != 4);
        v446 = v426 - v428;
        v447 = &v588;
        sub_2367DEFD0((uint64_t)&v588, 8 * v278, a6, (uint64_t)&v572);
        v448 = 0;
        v588.f32[0] = v446;
        v449 = v534;
        do
        {
          for (i1 = 0; i1 != 8; ++i1)
          {
            if (i1 | v448)
              v447->i32[i1] = *(_DWORD *)(v449 + 4 * i1);
          }
          ++v448;
          v447 += 2;
          v449 += 64;
        }
        while (v448 != 4);
        v604 = 8 * v278;
        v605 = (float32x4_t *)(a6 + (v278 << 7));
        sub_236812E90(&v588, (uint64_t)&v604, &v572);
LABEL_294:
        v230 = v549;
        goto LABEL_362;
      case 16:
        v451 = 0;
        v452 = *(float *)v8;
        v453 = *(float *)(v8 + 4);
        v454 = *(float *)(v8 + 32);
        v455 = *(float *)v8 + v454;
        *(float *)&v606 = (float)(v453 + v455) * 4.0;
        v456 = &v606;
        v457 = (_DWORD *)v8;
        do
        {
          v458 = 0;
          v459 = v457;
          do
          {
            if (v458 | v451)
              *((_DWORD *)v456 + v458) = *v459;
            ++v458;
            v459 += 2;
          }
          while (v458 != 4);
          ++v451;
          v456 += 2;
          v457 += 16;
        }
        while (v451 != 4);
        v460 = 0;
        v461 = (float32x4_t *)&unk_2369217E0;
        do
        {
          v462 = 0;
          v463 = 0uLL;
          do
          {
            v463 = vmlaq_n_f32(v463, v461[v462], *(float *)((char *)&v606 + v462));
            v462 += 4;
          }
          while (v462 != 64);
          *(float32x4_t *)((char *)&v588 + 4 * v460) = v463;
          ++v461;
          _CF = v460 >= 0xC;
          v460 += 4;
        }
        while (!_CF);
        v464 = v278 << 7;
        v465 = 32 * v278;
        for (i2 = 48; i2 != -16; i2 -= 16)
        {
          *(float32x4_t *)(a6 + v464) = *(float32x4_t *)((char *)&v588 + i2);
          v464 += v465;
        }
        v467 = 0;
        v588.f32[0] = v455 - v453;
        v468 = &v588;
        v469 = (__int32 *)v535;
        v278 = v562;
        do
        {
          v470 = 0;
          v471 = v469;
          do
          {
            if (v470 | v467)
              v468->i32[v470] = *v471;
            ++v470;
            v471 += 2;
          }
          while (v470 != 4);
          ++v467;
          ++v468;
          v469 += 16;
        }
        while (v467 != 4);
        v472 = v452 - v454;
        v473 = &v588;
        sub_2367DEFD0((uint64_t)&v588, v279, v528 + 4 * v465, (uint64_t)&v572);
        v474 = 0;
        v588.f32[0] = v472;
        v475 = v534;
        do
        {
          for (i3 = 0; i3 != 8; ++i3)
          {
            if (i3 | v474)
              v473->i32[i3] = *(_DWORD *)(v475 + 4 * i3);
          }
          ++v474;
          v473 += 2;
          v475 += 64;
        }
        while (v474 != 4);
        goto LABEL_346;
      case 17:
        v477 = 0;
        v478 = *(float *)v8;
        v479 = *(float *)(v8 + 4);
        v480 = *(float *)(v8 + 32);
        v481 = *(float *)v8 + v480;
        *(float *)&v606 = (float)(v479 + v481) * 4.0;
        v482 = &v606;
        v483 = (_DWORD *)v8;
        do
        {
          v484 = 0;
          v485 = v483;
          do
          {
            if (v484 | v477)
              *((_DWORD *)v482 + v484) = *v485;
            ++v484;
            v485 += 2;
          }
          while (v484 != 4);
          ++v477;
          v482 += 2;
          v483 += 16;
        }
        while (v477 != 4);
        v486 = 0;
        v487 = (float32x4_t *)&unk_2369217E0;
        do
        {
          v488 = 0;
          v489 = 0uLL;
          do
          {
            v489 = vmlaq_n_f32(v489, v487[v488], *(float *)((char *)&v606 + v488));
            v488 += 4;
          }
          while (v488 != 64);
          *(float32x4_t *)((char *)&v588 + 4 * v486) = v489;
          ++v487;
          _CF = v486 >= 0xC;
          v486 += 4;
        }
        while (!_CF);
        v490 = (v278 << 7) | 0x10;
        for (i4 = 48; i4 != -16; i4 -= 16)
        {
          v492 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v588 + i4));
          *(int8x16_t *)(a6 + v490) = vextq_s8(v492, v492, 8uLL);
          v490 += 32 * v278;
        }
        v493 = 0;
        v588.f32[0] = v481 - v479;
        v494 = &v588;
        v495 = (__int32 *)v535;
        do
        {
          v496 = 0;
          v497 = v495;
          do
          {
            if (v496 | v493)
              v494->i32[v496] = *v497;
            ++v496;
            v497 += 2;
          }
          while (v496 != 4);
          ++v493;
          ++v494;
          v495 += 16;
        }
        while (v493 != 4);
        v498 = v478 - v480;
        v499 = &v588;
        sub_2367DEFD0((uint64_t)&v588, 8 * v278, a6 + (v278 << 7), (uint64_t)&v572);
        v500 = 0;
        v588.f32[0] = v498;
        v501 = v534;
        v278 = v562;
        do
        {
          for (i5 = 0; i5 != 8; ++i5)
          {
            if (i5 | v500)
              v499->i32[i5] = *(_DWORD *)(v501 + 4 * i5);
          }
          ++v500;
          v499 += 2;
          v501 += 64;
        }
        while (v500 != 4);
LABEL_346:
        v604 = v279;
        v605 = (float32x4_t *)a6;
LABEL_347:
        sub_236812E90(&v588, (uint64_t)&v604, &v572);
LABEL_348:
        v230 = v549;
        goto LABEL_363;
      case 18:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 64;
        v572.i64[1] = v8;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        v280 = v531;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681307C, (uint64_t)&v572, (uint64_t)&v588, 64, v531);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 64;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 64);
        v572.i64[0] = 64;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_23681307C;
        v282 = 64;
        goto LABEL_356;
      case 19:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 64;
        v572.i64[1] = v8;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        v377 = v538;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236813010, (uint64_t)&v572, (uint64_t)&v588, 64, v538);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 32;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 64);
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_23681307C;
        v282 = 32;
        goto LABEL_358;
      case 20:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 64;
        v572.i64[1] = v8;
        v588.i64[0] = 32;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 32, 64);
        v572.i64[0] = 32;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 32;
        v588.i64[1] = v8;
        v378 = v538;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681307C, (uint64_t)&v572, (uint64_t)&v588, 32, v538);
        v572.i64[0] = 32;
        v572.i64[1] = v8;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 32);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v230 = v549;
        v10 = a4;
        v281 = sub_236813010;
        v282 = 64;
        goto LABEL_360;
      case 21:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 128;
        v572.i64[1] = v8;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        v280 = v532;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368130E8, (uint64_t)&v572, (uint64_t)&v588, 128, v532);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 128;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 128);
        v572.i64[0] = 128;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_2368130E8;
        v282 = 128;
        goto LABEL_356;
      case 22:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 128;
        v572.i64[1] = v8;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        v377 = v539;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23681307C, (uint64_t)&v572, (uint64_t)&v588, 128, v539);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 64;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 128);
        v572.i64[0] = 64;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_2368130E8;
        v282 = 64;
        goto LABEL_358;
      case 23:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 128;
        v572.i64[1] = v8;
        v588.i64[0] = 64;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 64, 128);
        v572.i64[0] = 64;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 64;
        v588.i64[1] = v8;
        v378 = v539;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368130E8, (uint64_t)&v572, (uint64_t)&v588, 64, v539);
        v572.i64[0] = 64;
        v572.i64[1] = v8;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 64);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v230 = v549;
        v10 = a4;
        v281 = sub_23681307C;
        v282 = 128;
        goto LABEL_360;
      case 24:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 256;
        v572.i64[1] = v8;
        v588.i64[0] = 256;
        v588.i64[1] = (uint64_t)v571;
        v280 = v533;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236813154, (uint64_t)&v572, (uint64_t)&v588, 256, v533);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 256;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 256, 256);
        v572.i64[0] = 256;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236813154;
        v282 = 256;
LABEL_356:
        v503 = v280;
        v10 = a4;
        goto LABEL_361;
      case 25:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 256;
        v572.i64[1] = v8;
        v588.i64[0] = 256;
        v588.i64[1] = (uint64_t)v571;
        v377 = v540;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368130E8, (uint64_t)&v572, (uint64_t)&v588, 256, v540);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 128;
        v588.i64[1] = v8;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 256);
        v572.i64[0] = 128;
        v572.i64[1] = v8;
        v230 = v549;
        v281 = sub_236813154;
        v282 = 128;
LABEL_358:
        v503 = v377;
        goto LABEL_361;
      case 26:
        v606 = 8 * v278;
        v607 = (float32x4_t *)a6;
        v572.i64[0] = 256;
        v572.i64[1] = v8;
        v588.i64[0] = 128;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 128, 256);
        v572.i64[0] = 128;
        v572.i64[1] = (uint64_t)v571;
        v588.i64[0] = 128;
        v588.i64[1] = v8;
        v378 = v540;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236813154, (uint64_t)&v572, (uint64_t)&v588, 128, v540);
        v572.i64[0] = 128;
        v572.i64[1] = v8;
        v588.i64[0] = 256;
        v588.i64[1] = (uint64_t)v571;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368129B8, (uint64_t)&v572, (uint64_t)&v588, 256, 128);
        v572.i64[0] = 256;
        v572.i64[1] = (uint64_t)v571;
        v230 = v549;
        v10 = a4;
        v281 = sub_2368130E8;
        v282 = 256;
LABEL_360:
        v503 = v378;
LABEL_361:
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v281, (uint64_t)&v572, (uint64_t)&v606, v282, v503);
LABEL_362:
        v278 = v562;
LABEL_363:
        v279 = v560;
        break;
      default:
        break;
    }
    v504 = 0;
    v254 = *(unsigned int *)v14;
    v505 = byte_23692665C[v254];
    v506 = 8 * v505;
    if (v505 <= 1)
      v505 = 1;
    if (byte_236926677[v254] <= 1u)
      v507 = 1;
    else
      v507 = byte_236926677[v254];
    v508 = 0uLL;
    do
    {
      for (i6 = 0; i6 != v505; ++i6)
      {
        for (i7 = 0; i7 != 8; ++i7)
        {
          v511 = 0;
          v512 = 1;
          do
          {
            v513 = v512;
            v514 = vmulq_f32(*(float32x4_t *)(a6 + 32 * i6 + 4 * v506 * (i7 + 8 * v504) + 4 * v511), vabsq_f32(*(float32x4_t *)(*((_QWORD *)v10 + 5)+ 4 * (a2 + 8 * i6 + v511 + *((_QWORD *)v10 + 6) * (a3 + 8 * v504 + i7)))));
            v515 = vmulq_f32(v514, v514);
            v516 = vmulq_f32(v515, v515);
            v508 = vaddq_f32(v508, vmulq_f32(v516, v516));
            v511 = 4;
            v512 = 0;
          }
          while ((v513 & 1) != 0);
        }
      }
      ++v504;
    }
    while (v504 != v507);
    v563 = v508;
    v517 = pow(*(long double *)&aFfffff[8 * v278], 8.0);
    v255 = vaddq_f32(v570, vmulq_n_f32(v563, v517));
    v518 = v256 + (float)(v10[23] * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v564, v564)));
    v519 = (unint64_t)vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v567, v567));
    v520 = __clz(v519 + 1) ^ 0x3F;
    if (((v519 + 1) & v519) != 0)
      v521 = v520 + 1;
    else
      v521 = v520;
    v522 = __clz(v521 + 18);
    v523 = v522 ^ 0x3F;
    v524 = 64 - v522;
    if (((v521 + 18) & (v521 + 17)) != 0)
      v525 = v524;
    else
      v525 = v523;
    v256 = v518 + (float)(v10[24] * (float)(v521 + v525 + 1));
    v253 = v278 + 1;
    v258 = (float32x4_t *)(v279 + v553);
    _Q5 = v551;
  }
  while (v253 != 3);
  v526 = pow((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v255, v255)) / (float)v547), 0.125)
       * (double)v547
       / v555;
  return (float)(v256 * v13) + (float)(v10[22] * v526);
}

_QWORD *sub_236812454(_QWORD *result, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      v14 = 0;
      v15 = (float32x4_t *)(result[1] + v4);
      v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      v17 = 0;
      v18 = *a4;
      v19 = a4[1];
      v21 = a4[2];
      v20 = a4[3];
      v22 = vaddq_f32(*a4, v20);
      v23 = vaddq_f32(v19, v21);
      v24 = vaddq_f32(v22, v23);
      v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      v28 = vaddq_f32(v26, v27);
      v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

double sub_236812538(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t *v5;
  double result;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t *v10;

  v5 = a3 + 8;
  v9 = 8;
  v10 = a3;
  sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812454, a1, (uint64_t)&v9, 8, (uint64_t)&a3[8]);
  v9 = 8;
  v10 = a3;
  v7 = 4;
  v8 = a2;
  sub_2367DED50(&v9, &v7);
  v9 = 4;
  v10 = a3;
  sub_2367E0CD4(4, a2, &v9, v5);
  v9 = 4;
  v10 = a3;
  v7 = 8;
  v8 = a2;
  *(_QWORD *)&result = sub_2367DFEEC(&v9, &v7).u64[0];
  return result;
}

uint64_t sub_2368125DC(uint64_t a1, float32x4_t *a2, int32x4_t *a3, uint64_t a4)
{
  float32x4_t *v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x2x2_t v10;
  int32x4_t v11;
  float32x2x2_t v12;
  int32x4_t v13;
  float *v14;
  float *v15;
  uint64_t v17;
  int32x4_t *v18;

  v6 = (float32x4_t *)(a4 + 64);
  v17 = 4;
  v18 = a3;
  sub_2367E0C18(a1, a2, &v17, (float32x4_t *)(a4 + 64));
  v7 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  v10 = (float32x2x2_t)vzip1q_s32(*a3, v8);
  v11 = vzip1q_s32(v7, v9);
  v12 = (float32x2x2_t)vzip2q_s32(*a3, v8);
  v13 = vzip2q_s32(v7, v9);
  v14 = (float *)a4;
  vst2_f32(v14, v10);
  v14 += 4;
  *(int32x4_t *)v14 = vzip2q_s32((int32x4_t)v10, v11);
  v15 = (float *)(a4 + 32);
  vst2_f32(v15, v12);
  *(int32x4_t *)(a4 + 48) = vzip2q_s32((int32x4_t)v12, v13);
  v17 = 4;
  v18 = a3;
  return sub_2367E0C18(4, (float32x4_t *)a4, &v17, v6);
}

void sub_236812674(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 256);
    v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2367E11AC(a4, v10);
      for (i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_23681274C(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 128);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2367E12DC(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_236812810(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 512);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 512);
      sub_236813548(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3D0000003D000000;
      v15.i64[1] = 0x3D0000003D000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 32);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

_QWORD *sub_2368128D4(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x2x2_t v10;
  int32x4_t v11;
  float *v12;
  uint64_t v13;
  float32x2x2_t v14;
  int32x4_t v15;
  float *v16;
  char v17;
  BOOL v18;

  v2 = 0;
  do
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = result[1];
      v6 = *(int32x4_t *)(v5 + 4 * *result * v2 + 4 * v3);
      v7 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 1) + 4 * v3);
      v8 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 2) + 4 * v3);
      v9 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 3) + 4 * v3);
      v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v11 = vzip1q_s32(v7, v9);
      v12 = (float *)(a2[1] + 4 * *a2 * v3 + 4 * v2);
      v13 = 4 * v2;
      v14 = (float32x2x2_t)vzip2q_s32(v6, v8);
      vst2_f32(v12, v10);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 1) + v13) = vzip2q_s32((int32x4_t)v10, v11);
      v15 = vzip2q_s32(v7, v9);
      v16 = (float *)(a2[1] + 4 * *a2 * (v3 | 2) + 4 * v2);
      v17 = v4;
      vst2_f32(v16, v14);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 3) + v13) = vzip2q_s32((int32x4_t)v14, v15);
      v3 = 4;
      v4 = 0;
    }
    while ((v17 & 1) != 0);
    v18 = v2 >= 0x1C;
    v2 += 4;
  }
  while (!v18);
  return result;
}

_QWORD *sub_2368129B8(_QWORD *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  int32x4_t v19;
  float *v20;
  uint64_t v21;
  float *v22;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 12;
    v7 = 8;
    v8 = 4;
    do
    {
      if (a4)
      {
        v9 = 0;
        for (i = 0; i < a4; i += 4)
        {
          v11 = result[1];
          v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          v17 = vzip1q_s32(v13, v15);
          v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          v19 = vzip2q_s32(v13, v15);
          v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_236812A9C(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 1024);
    v15 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 1024);
      sub_236813418(a4, v10);
      for (i = 0; i != 64; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_236812B74(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 2048);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 2048);
      sub_2368132E0(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3C0000003C000000;
      v15.i64[1] = 0x3C0000003C000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 128);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_236812C38(_QWORD *a1, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t i;
  float32x4_t *v18;
  uint64_t j;
  uint64_t k;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t m;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)&a4[256];
    v10 = a4 + 512;
    v11 = (uint64_t)&a4[384];
    v12 = a4 + 1;
    v26 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v13 = 0;
      v14 = (float32x4_t *)(a1[1] + v7);
      v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 256);
      v16 = a4;
      for (i = 255; i != 127; --i)
      {
        v16[256] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_2368132E0(v9, v10);
      v18 = a4;
      for (j = 255; j != 127; --j)
      {
        v18[384] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (k = 0; k != 128; ++k)
        *(float32x4_t *)(v11 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v11 + 16 * k), *(float *)&dword_236922D50[k]);
      sub_2368132E0(v11, v10);
      a4[384] = vmlaq_f32(a4[385], v27, a4[384]);
      v21 = 0xFFFFFFFFFFFFF82;
      do
      {
        a4[v21 + 511] = vaddq_f32(a4[v21 + 511], a4[v21 + 512]);
        ++v21;
      }
      while (v21 * 16);
      v22 = a4;
      do
      {
        *v22 = *(float32x4_t *)(v9 + v21 * 16);
        v22 += 2;
        ++v21;
      }
      while (v21 != 128);
      v23 = 0;
      v24 = v12;
      do
      {
        *v24 = *(float32x4_t *)(v11 + v23);
        v24 += 2;
        v23 += 16;
      }
      while (v23 != 2048);
      for (m = 0; m != 256; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v8) = vmulq_f32(a4[m], v26);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_236812E24(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFE40((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

uint64_t sub_236812E90(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t *v6;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t *v11;

  v6 = a3 + 8;
  v10 = 8;
  v11 = a1;
  v8 = 4;
  v9 = a3;
  sub_2367DED50(&v10, &v8);
  sub_2367DEDF8(a3, 4, a1, 4, v6);
  v10 = 4;
  v11 = a1;
  v8 = 8;
  v9 = a3;
  sub_2367DFEEC(&v10, &v8);
  v10 = 8;
  v11 = a3;
  return sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236812E24, (uint64_t)&v10, a2, 8, (uint64_t)v6);
}

void sub_236812F38(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFD10((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_236812FA4(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DEDF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_236813010(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFBE0((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_23681307C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFAB0((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_2368130E8(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DF97C((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_236813154(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t j;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = a4 + 256;
    v10 = a4 + 128;
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v11 = 0;
      v13 = *a1;
      v12 = a1[1];
      v14 = *a2;
      v15 = a2[1];
      v16 = (float32x4_t *)(v12 + v7);
      v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 128);
      v18 = v12 + 4 * v13;
      for (i = 128; i != 256; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_2367DF97C(a4, 4, a4, 4, v9);
      for (j = 0; j != -127; --j)
        a4[j + 255] = vaddq_f32(a4[j + 255], a4[j + 254]);
      *v10 = vmulq_f32(*v10, v27);
      sub_2367DF97C(v10, 4, v10, 4, v9);
      v22 = 0;
      v23 = v15 + 1020 * v14;
      do
      {
        v21.i32[0] = dword_236922D50[v22];
        v24 = &a4[v22];
        v25 = v24[128];
        v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 128);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

__n128 sub_2368132E0(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 result;

  v4 = 0;
  for (i = 2032; i != 1008; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_236813418((uint64_t)a2, a2 + 128);
  v6 = 0;
  v7 = (uint64_t)&a2[64];
  v8 = 2032;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 1024);
  for (j = 0; j != 64; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), *(float *)&dword_236922C50[j]);
  sub_236813418(v7, a2 + 128);
  v10 = 0;
  a2[64] = vmlaq_f32(a2[65], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[64]);
  do
  {
    a2[v10 + 65] = vaddq_f32(a2[v10 + 65], a2[v10 + 66]);
    ++v10;
  }
  while (v10 != 62);
  v11 = 0;
  v12 = (_OWORD *)a1;
  do
  {
    *v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 64);
  v13 = 0;
  v14 = (__n128 *)(a1 + 16);
  do
  {
    result = (__n128)a2[v13 + 64];
    *v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 64);
  return result;
}

__n128 sub_236813418(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 result;

  v4 = 0;
  for (i = 1008; i != 496; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_236813548((uint64_t)a2, a2 + 64);
  v6 = 0;
  v7 = (uint64_t)&a2[32];
  v8 = 1008;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 512);
  for (j = 0; j != 32; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), *(float *)&dword_236922BD0[j]);
  sub_236813548(v7, a2 + 64);
  v10 = 0;
  a2[32] = vmlaq_f32(a2[33], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[32]);
  do
  {
    a2[v10 + 33] = vaddq_f32(a2[v10 + 33], a2[v10 + 34]);
    ++v10;
  }
  while (v10 != 30);
  v11 = 0;
  v12 = (_OWORD *)a1;
  do
  {
    *v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 32);
  v13 = 0;
  v14 = (__n128 *)(a1 + 16);
  do
  {
    result = (__n128)a2[v13 + 32];
    *v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 32);
  return result;
}

__n128 sub_236813548(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 result;

  v4 = 0;
  for (i = 496; i != 240; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_2367E11AC((uint64_t)a2, a2 + 32);
  v6 = 0;
  v7 = (uint64_t)&a2[16];
  v8 = 496;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 256);
  for (j = 0; j != 16; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), flt_23692278C[j]);
  sub_2367E11AC(v7, a2 + 32);
  v10 = 0;
  a2[16] = vmlaq_f32(a2[17], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[16]);
  do
  {
    a2[v10 + 17] = vaddq_f32(a2[v10 + 17], a2[v10 + 18]);
    ++v10;
  }
  while (v10 != 14);
  v11 = 0;
  v12 = (_OWORD *)a1;
  do
  {
    *v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 16);
  v13 = 0;
  v14 = (__n128 *)(a1 + 16);
  do
  {
    result = (__n128)a2[v13 + 16];
    *v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 16);
  return result;
}

void sub_236813678(unint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, float32x4_t *a14)
{
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  BOOL v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unsigned int v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  size_t v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  size_t v68;
  uint64_t v69;
  char *v70;
  unsigned int v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  size_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v89;
  uint64_t v90;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (a1 == 4)
    LODWORD(v18) = 10;
  else
    LODWORD(v18) = 19;
  if (a1 == 4)
    v19 = 11;
  else
    v19 = 20;
  if (a1 == 4)
    v20 = 5;
  else
    v20 = 18;
  if (a1 == 2)
    v18 = 6;
  else
    v18 = v18;
  v90 = v18;
  v21 = v18 | 0x100000000;
  if (a1 == 2)
    v22 = 7;
  else
    v22 = v19;
  v89 = v22;
  v94 = v22 | 0x100000000;
  v95 = v21;
  if (a1 == 2)
    v23 = 4;
  else
    v23 = v20;
  v93 = v23 | 0x100000000;
  v24 = a6 + a4;
  v26 = *(_QWORD *)(a11 + 16);
  v25 = *(_QWORD *)(a11 + 24);
  v27 = a5 + a3;
  v28 = a5 + a3 + a1;
  if (sub_23680ED5C((unsigned int *)a11, a5 + a3, a6 + a4, v28)
    || sub_23680ED5C((unsigned int *)a11, v27, v24 + a1, v28)
    || sub_23680EDF4((unsigned int *)a11, v27, v24, v24 + a1)
    || sub_23680EDF4((unsigned int *)a11, v28, v24, v24 + a1))
  {
    return;
  }
  v86 = a6;
  v29 = a1 >> 1;
  v85 = v25 + v26 * v24;
  v30 = v25 + v26 * (v24 + (a1 >> 1));
  v31 = a12;
  v83 = v30;
  v84 = v27 + (a1 >> 1);
  v32 = sub_23680EDF4((unsigned int *)a11, v84, v24, v24 + a1);
  v82 = v24 + (a1 >> 1);
  v33 = sub_23680ED5C((unsigned int *)a11, v27, v82, v28);
  v35 = 0;
  v96 = 0;
  v97 = 0;
  v36 = 32 * v86;
  v37 = a5;
  v38 = a12 + 32 * v86 + 4 * a5;
  do
  {
    v39 = 0;
    do
    {
      *((float *)&v96 + 2 * (v35 / v29) + v39 / v29) = *(float *)(v38 + 4 * v39)
                                                     + *((float *)&v96 + 2 * (v35 / v29) + v39 / v29);
      ++v39;
    }
    while (a1 != v39);
    ++v35;
    v38 += 32;
  }
  while (v35 != a1);
  if (!v32)
  {
    v44 = v33;
    if ((_DWORD)v90 == *(unsigned __int8 *)(v85 + v27) >> 1)
    {
      v41 = 3.4028e38;
      v42 = a8;
    }
    else
    {
      v34.n128_f32[0] = a9;
      v42 = a8;
      v41 = sub_23680EE9C((float *)&v95, 8 * v27, 8 * v24, a7, a8, a13, a14, v34);
    }
    if ((_DWORD)v90 == *(unsigned __int8 *)(v85 + v84) >> 1)
    {
      v40 = 3.4028e38;
    }
    else
    {
      v34.n128_f32[0] = a9;
      v40 = sub_23680EE9C((float *)&v95, 8 * v84, 8 * v24, a7, v42, a13, a14, v34);
    }
    v46 = v44;
    v36 = 32 * v86;
    v31 = a12;
    v37 = a5;
    if (!v46)
      goto LABEL_29;
LABEL_42:
    v45 = 3.4028e38;
    v43 = 3.4028e38;
    goto LABEL_43;
  }
  v40 = 3.4028e38;
  v41 = 3.4028e38;
  v42 = a8;
  if (v33)
    goto LABEL_42;
LABEL_29:
  if ((_DWORD)v89 == *(unsigned __int8 *)(v85 + v27) >> 1)
  {
    v43 = 3.4028e38;
  }
  else
  {
    v34.n128_f32[0] = a9;
    v43 = sub_23680EE9C((float *)&v94, 8 * v27, 8 * v24, a7, v42, a13, a14, v34);
  }
  if ((_DWORD)v89 == *(unsigned __int8 *)(v83 + v27) >> 1)
  {
    v45 = 3.4028e38;
  }
  else
  {
    v34.n128_f32[0] = a9;
    v45 = sub_23680EE9C((float *)&v94, 8 * v27, 8 * v82, a7, v42, a13, a14, v34);
  }
LABEL_43:
  if (a2)
  {
    v34.n128_f32[0] = a10;
    v47 = sub_23680EE9C((float *)&v93, 8 * v27, 8 * v24, a7, v42, a13, a14, v34);
  }
  else
  {
    v47 = 3.4028e38;
  }
  if ((float)(*(float *)&v96 + *(float *)&v97) >= v41)
    v48 = v41;
  else
    v48 = *(float *)&v96 + *(float *)&v97;
  v49 = *((float *)&v96 + 1) + *((float *)&v97 + 1);
  if ((float)(*((float *)&v96 + 1) + *((float *)&v97 + 1)) >= v40)
    v50 = v40;
  else
    v50 = *((float *)&v96 + 1) + *((float *)&v97 + 1);
  v51 = v48 + v50;
  if ((float)(*(float *)&v96 + *((float *)&v96 + 1)) >= v43)
    v52 = v43;
  else
    v52 = *(float *)&v96 + *((float *)&v96 + 1);
  v53 = *(float *)&v97 + *((float *)&v97 + 1);
  if ((float)(*(float *)&v97 + *((float *)&v97 + 1)) >= v45)
    v54 = v45;
  else
    v54 = *(float *)&v97 + *((float *)&v97 + 1);
  v55 = v52 + v54;
  if (v47 < v51 && v47 < v55)
  {
    sub_2367E43F8(a11, v27, v24, v23, 0);
    v67 = byte_23692665C[v23];
    if (v67 <= 1)
      v67 = 1;
    v68 = 4 * v67;
    if (byte_236926677[v23] <= 1u)
      v69 = 1;
    else
      v69 = byte_236926677[v23];
    v70 = (char *)(v31 + v36 + 4 * v37);
    do
    {
      bzero(v70, v68);
      v70 += 32;
      --v69;
    }
    while (v69);
    v45 = v47;
    goto LABEL_106;
  }
  if (v51 >= v55)
  {
    if (v43 < (float)(*(float *)&v96 + *((float *)&v96 + 1)))
    {
      sub_2367E43F8(a11, v27, v24, v89, 0);
      v71 = byte_23692665C[v89];
      if (v71 <= 1)
        v71 = 1;
      v72 = 4 * v71;
      v73 = v31;
      if (byte_236926677[v89] <= 1u)
        v74 = 1;
      else
        v74 = byte_236926677[v89];
      v75 = v73;
      v76 = (char *)(v73 + v36 + 4 * v37);
      do
      {
        bzero(v76, v72);
        v76 += 32;
        --v74;
      }
      while (v74);
      v37 = a5;
      v31 = v75;
      *(float *)(v75 + 4 * (a5 + 8 * v86)) = v43;
    }
    if (v45 < v53)
    {
      sub_2367E43F8(a11, v27, v82, v89, 0);
      v77 = v29 + v86;
      v78 = byte_23692665C[v89];
      if (v78 <= 1)
        v78 = 1;
      v79 = 4 * v78;
      if (byte_236926677[v89] <= 1u)
        v80 = 1;
      else
        v80 = byte_236926677[v89];
      v86 = v77;
      v81 = (char *)(v31 + 32 * v77 + 4 * v37);
      do
      {
        bzero(v81, v79);
        v81 += 32;
        --v80;
      }
      while (v80);
      goto LABEL_106;
    }
  }
  else
  {
    if (v41 < (float)(*(float *)&v96 + *(float *)&v97))
    {
      sub_2367E43F8(a11, v27, v24, v90, 0);
      v57 = byte_23692665C[v90];
      if (v57 <= 1)
        v57 = 1;
      v58 = 4 * v57;
      v59 = v37;
      if (byte_236926677[v90] <= 1u)
        v60 = 1;
      else
        v60 = byte_236926677[v90];
      v61 = v31;
      v62 = (char *)(v31 + v36 + 4 * v59);
      do
      {
        bzero(v62, v58);
        v62 += 32;
        --v60;
      }
      while (v60);
      v37 = a5;
      v31 = v61;
      *(float *)(v61 + 4 * (a5 + 8 * v86)) = v41;
    }
    if (v40 < v49)
    {
      sub_2367E43F8(a11, v84, v24, v90, 0);
      v37 += v29;
      v63 = byte_23692665C[v90];
      if (v63 <= 1)
        v63 = 1;
      v64 = 4 * v63;
      if (byte_236926677[v90] <= 1u)
        v65 = 1;
      else
        v65 = byte_236926677[v90];
      v66 = (char *)(v31 + v36 + 4 * v37);
      do
      {
        bzero(v66, v64);
        v66 += 32;
        --v65;
      }
      while (v65);
      v45 = v40;
LABEL_106:
      *(float *)(v31 + 4 * (v37 + 8 * v86)) = v45;
    }
  }
}

void sub_236813D44(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    v2 = (void (*)(uint64_t, _QWORD))a1[1];
    if (v2)
      v2(a1[2], *(_QWORD *)(v1 - 16));
    else
      free(*(void **)(v1 - 16));
  }
}

unsigned int *sub_236813D84(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v3 = result;
    v4 = sub_2367C2F80(result, 1u);
    v5 = sub_2367C2F80(v3, 2u) + v4;
    a2[76] = v5 + sub_2367C2F80(v3, 3u);
    v6 = sub_2367C2F80(v3, 0xCu);
    a2[77] = sub_2367C2F80(v3, 0xDu) + v6;
    v7 = sub_2367C2F80(v3, 0xEu);
    v8 = sub_2367C2F80(v3, 0xFu) + v7;
    v9 = sub_2367C2F80(v3, 0x10u);
    a2[78] = v8 + v9 + sub_2367C2F80(v3, 0x11u);
    a2[79] = sub_2367C2F80(v3, 0);
    v10 = sub_2367C2F80(v3, 7u);
    a2[80] = sub_2367C2F80(v3, 6u) + v10;
    v11 = sub_2367C2F80(v3, 9u);
    a2[81] = sub_2367C2F80(v3, 8u) + v11;
    a2[82] = sub_2367C2F80(v3, 4u);
    v12 = sub_2367C2F80(v3, 0xBu);
    a2[83] = sub_2367C2F80(v3, 0xAu) + v12;
    a2[84] = sub_2367C2F80(v3, 5u);
    v13 = sub_2367C2F80(v3, 0x14u);
    a2[85] = sub_2367C2F80(v3, 0x13u) + v13;
    result = (unsigned int *)sub_2367C2F80(v3, 0x12u);
    a2[86] = result;
  }
  return result;
}

uint64_t sub_236813F1C(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, float a5)
{
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float *v26;
  float *v27;
  uint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  uint64_t v35;

  v5 = 1.0;
  if (a5 > 1.5414)
  {
    v5 = (float)((float)(a5 + -1.5414) * -0.56391) + 1.0;
    if (v5 < 0.0)
      v5 = 0.0;
  }
  v6 = a3[3];
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a4 + 16);
    v9 = *(_QWORD *)(a4 + 24);
    v11 = *a3;
    v10 = a3[1];
    v12 = a3[2];
    v13 = (float *)(v9 + v10 * v8 + 4 * *a3);
    v14 = 4 * (v8 >> 2);
    do
    {
      if (v12)
      {
        v15 = 0;
        v16 = v13;
        do
        {
          v17 = *(unsigned __int8 *)(a2 + (v10 + v7) * result + v11 + v15);
          if ((v17 & 1) != 0)
          {
            v18 = 0;
            v19 = v17 >> 1;
            v20 = byte_236926677[v19];
            v21 = *(float *)(v9 + (v10 + v7) * v8 + 4 * v11 + 4 * v15);
            v22 = byte_23692665C[v19];
            if (v22 <= 1)
              v23 = 1;
            else
              v23 = byte_23692665C[v19];
            if (v20 <= 1)
              v24 = 1;
            else
              v24 = v20;
            v25 = 0.0;
            v26 = v16;
            do
            {
              v27 = v26;
              v28 = v23;
              do
              {
                v29 = *v27++;
                v30 = v29;
                v25 = v25 + v29;
                if (v29 >= v21)
                  v21 = v30;
                --v28;
              }
              while (v28);
              ++v18;
              v26 = (float *)((char *)v26 + v14);
            }
            while (v18 != v24);
            v31 = v22 * (unint64_t)v20;
            if (v31 > 3)
              v21 = (float)(v5 * v21) + (float)((float)(1.0 - v5) * (float)(v25 / (float)v31));
            v32 = 0;
            v33 = v16;
            do
            {
              v34 = v33;
              v35 = v23;
              do
              {
                *v34++ = v21;
                --v35;
              }
              while (v35);
              ++v32;
              v33 = (float *)((char *)v33 + v14);
            }
            while (v32 != v24);
          }
          ++v15;
          ++v16;
        }
        while (v15 != v12);
      }
      ++v7;
      v13 = (float *)((char *)v13 + v8);
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_2368140AC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v4;
  double v5;
  double v6;
  double v7;
  unsigned int i;
  uint64_t *v9[2];

  if ((_DWORD)a2)
  {
    v4 = a2;
    v9[0] = a3;
    v9[1] = a4;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t **, uint64_t (*)(uint64_t **, unint64_t), unint64_t (*)(uint64_t, unsigned int, int, double, double, double), _QWORD, uint64_t))result)(*(_QWORD *)(result + 8), v9, sub_236814138, sub_236814418, 0, a2);
    }
    else
    {
      result = sub_236814138(v9, 1uLL);
      if (!(_DWORD)result)
      {
        for (i = 0; i != v4; ++i)
          result = sub_236814418((uint64_t)v9, i, 0, v5, v6, v7);
      }
    }
  }
  return result;
}

uint64_t sub_236814138(uint64_t **a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD v39[5];

  v3 = **a1;
  sub_2367C431C((uint64_t)&v34, 0x48u, a2);
  v4 = v38;
  if (!v38)
  {
    v6 = v35;
    v5 = v36;
    v36 = 0;
    v7 = v37;
    *(_OWORD *)(v3 + 64) = v34;
    v8 = *(_QWORD *)(v3 + 88);
    *(_QWORD *)(v3 + 80) = v6;
    *(_QWORD *)(v3 + 88) = v5;
    if (v8)
    {
      v9 = -*(_QWORD *)(v8 - 24);
      do
        v10 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v10 + v9, &qword_2564313D8));
      free(*(void **)(v8 - 32));
    }
    *(_QWORD *)(v3 + 96) = v7;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3);
    v12 = a2 > v11;
    v13 = a2 - v11;
    if (v12)
    {
      while (1)
      {
        sub_2367C431C((uint64_t)&v29, 0x12u, 0x12u);
        v4 = v33;
        if (v33)
          break;
        v14 = v31;
        v15 = v32;
        v31 = 0;
        v16 = *(_QWORD *)(v3 + 8);
        v17 = *(_QWORD *)(v3 + 16);
        if (v16 >= v17)
        {
          v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - *(_QWORD *)v3) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0x666666666666666)
            sub_2367C3440();
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - *(_QWORD *)v3) >> 3);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0x333333333333333)
            v22 = 0x666666666666666;
          else
            v22 = v20;
          v39[4] = v3 + 16;
          if (v22)
            v22 = (unint64_t)sub_2367DC0A4(v22);
          else
            v23 = 0;
          v24 = v22 + 40 * v19;
          v39[0] = v22;
          v39[1] = v24;
          v39[3] = v22 + 40 * v23;
          *(_OWORD *)v24 = v29;
          *(_QWORD *)(v24 + 16) = v30;
          *(_QWORD *)(v24 + 24) = v14;
          *(_QWORD *)(v24 + 32) = v15;
          v39[2] = v24 + 40;
          sub_236815500((uint64_t *)v3, v39);
          v18 = *(_QWORD *)(v3 + 8);
          sub_2367F6844((uint64_t)v39);
        }
        else
        {
          *(_OWORD *)v16 = v29;
          *(_QWORD *)(v16 + 16) = v30;
          *(_QWORD *)(v16 + 24) = v14;
          *(_QWORD *)(v16 + 32) = v15;
          v18 = v16 + 40;
          *(_QWORD *)(v3 + 8) = v16 + 40;
        }
        *(_QWORD *)(v3 + 8) = v18;
        if (!--v13)
          goto LABEL_22;
      }
    }
    else
    {
LABEL_22:
      v4 = 0;
    }
    if (!v38)
    {
      v25 = v36;
      v36 = 0;
      if (v25)
      {
        v26 = -*(_QWORD *)(v25 - 24);
        do
          v27 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v27 + v26, &qword_2564313D8));
        free(*(void **)(v25 - 32));
      }
    }
  }
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_23681435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (!v21)
    goto LABEL_5;
  v23 = -*(_QWORD *)(v21 - 24);
  do
    v24 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v24 + v23, &qword_2564313D8));
  free(*(void **)(v21 - 32));
  if (!a15)
  {
LABEL_5:
    if (a13)
    {
      v25 = -*(_QWORD *)(a13 - 24);
      do
        v26 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v26 + v25, &qword_2564313D8));
      free(*(void **)(a13 - 32));
    }
  }
  if (!a21 && a19)
  {
    v27 = -*(_QWORD *)(a19 - 24);
    do
      v28 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v28 + v27, &qword_2564313D8));
    free(*(void **)(a19 - 32));
  }
  _Unwind_Resume(a1);
}

unint64_t sub_236814418(uint64_t a1, unsigned int a2, int a3, double a4, double a5, double a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float *v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t result;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  uint64_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  float *v114;
  float32x2_t v115;
  float32x2_t v116;
  float v117;
  float v118;
  float v119;
  float *v120;
  float *v121;
  uint64_t v122;
  float v123;
  float v124;
  float v125;
  unsigned int *v126;
  _BOOL8 v127;
  _BOOL8 v128;
  float v129;
  unint64_t v130;
  unint64_t v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BOOL8 v161;
  unint64_t v162;
  float *v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float *v175;
  float v176;
  float *v177;
  float v178;
  float *v179;
  float v180;
  float *v181;
  float v182;
  float *v183;
  float v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  float v191;
  float v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int32x4_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  char v228;
  uint64_t v229;
  float32x4_t v230;
  float v231;
  float32x4_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  float32x4_t v236;
  char v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int8x16_t v252;
  float32x4_t v253;
  float32x4_t v255;
  uint64_t v256;
  float v257;
  uint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v264;
  float v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  float v283;
  unint64_t v284;
  float v285;
  float v286;
  float v287;
  _DWORD v288[3];

  v9 = *(_QWORD *)(a1 + 8);
  v10 = **(_QWORD **)v9;
  v11 = (v10 + 7) >> 3;
  v12 = a2 / v11;
  v13 = *(uint64_t **)(v9 + 48);
  v15 = *v13;
  v14 = v13[1];
  v16 = *v13 + ((a2 % v11) << 6);
  v17 = v16 - 2;
  v18 = a2 % v11;
  v281 = 8 * v12;
  v19 = 8 * v12 + 8;
  if (v18)
    v17 = *v13 + ((a2 % v11) << 6);
  if (**(_QWORD **)(v9 + 8) < v19)
    v19 = **(_QWORD **)(v9 + 8);
  v278 = 8 * v18;
  if (v10 >= 8 * v18 + 8)
    v20 = 8 * v18 + 8;
  else
    v20 = **(_QWORD **)v9;
  v21 = v20 - 8 * v18;
  v274 = *(uint64_t **)(v9 + 16);
  v265 = **(float **)(v9 + 24);
  v22 = *(unsigned int **)(v9 + 40);
  v257 = **(float **)(v9 + 32);
  v256 = **(_QWORD **)(v9 + 56);
  v24 = *v22;
  v23 = v22[1];
  v272 = v22;
  v25 = v12 << 6;
  v26 = v14 + (v12 << 6);
  v266 = v19 - 8 * v12;
  if (v15)
    v27 = v17;
  else
    v27 = v18 << 6;
  v284 = v20;
  v28 = v13[2];
  v29 = v13[3];
  v264 = v21;
  v262 = *v13 + ((a2 % v11) << 6);
  _CF = 8 * v20 != v28 || v28 + v15 >= v24;
  v31 = v16 + 8 * v21 + 2;
  v258 = *(uint64_t **)(v9 + 48);
  v259 = v16 + 8 * v21;
  if (_CF)
    v31 = v16 + 8 * v21;
  v271 = v31;
  v32 = v26 - 2;
  v260 = v26;
  v261 = v26 + 8 * v266;
  if (v11 <= a2)
    v32 = v26;
  if (v14)
    v25 = v32;
  v273 = v19;
  v282 = v23;
  v33 = 8 * v19 != v29 || v29 + v14 >= v23;
  v34 = v26 + 8 * v266 + 2;
  if (v33)
    v34 = v26 + 8 * v266;
  v270 = v34;
  if (v25 < v34)
  {
    v268 = v272[8];
    v269 = *(_QWORD *)(**(_QWORD **)(v9 + 64) + 16);
    v35 = *(_QWORD *)(**(_QWORD **)(v9 + 64) + 24) + v25 * v269 + 4 * v27;
    v276 = v272[2];
    v36 = v268 + v25 * v276 + 4 * v27;
    v267 = v268 + 4 * v27;
    v37 = -0.25;
    v38 = (float32x2_t)vdup_n_s32(0x42EFD02Bu);
    v39 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
    v40 = (float32x2_t)vdup_n_s32(0x431D2FBDu);
    *(int32x2_t *)v6.f32 = vdup_n_s32(0x40ACF18Eu);
    do
    {
      if (v25)
        v41 = v25 - 1;
      else
        v41 = 0;
      v279 = v25 + 1;
      if (v25 + 1 >= v282)
        v42 = v25;
      else
        v42 = v25 + 1;
      if (v27 < v271)
      {
        v43 = 0;
        v44 = v267 + v276 * v41;
        v45 = v268 + v25 * v276;
        v46 = v267 + v42 * v276;
        v47 = v27;
        do
        {
          v48 = v27 + v43;
          if (v27 + v43 + 1 < v24)
            ++v48;
          v49 = (float *)(v36 + 4 * v43);
          *(float *)&a6 = *v49 + 0.019;
          v50 = (float)((float)((float)(*(float *)(v46 + 4 * v43) + *(float *)(v44 + 4 * v43)) + v49[-(v47 != 0)])
                      + *(float *)(v45 + 4 * v48))
              * v37;
          v51 = vmaxnm_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0), 0);
          v52 = vmul_f32(v51, v51);
          ++v47;
          v53 = log1pf(fabsf((float)(*v49 + v50)* vdiv_f32(vmla_f32(*(float32x2_t *)v6.f32, v52, vmul_f32(v51, v40)), vmla_f32(v39, v38, v52)).f32[0]));
          v37 = -0.25;
          *(float *)(v35 + 4 * v43++) = 1.0 / (float)(v53 + 0.01);
        }
        while (v27 - v271 + v43);
      }
      v35 += v269;
      v36 += v276;
      v25 = v279;
    }
    while (v279 != v270);
  }
  if (v262)
    v54 = v262 - 4;
  else
    v54 = 0;
  if (v259 == v24)
    v55 = v259;
  else
    v55 = v259 + 4;
  v56 = v260 - 4;
  if (!v260)
    v56 = 0;
  if (v261 == v282)
    v57 = v261;
  else
    v57 = v261 + 4;
  v58 = *v274;
  v59 = (_DWORD *)(*v274 + 40 * a3);
  result = (v55 - v54) >> 2;
  v61 = (v57 - v56) >> 2;
  *v59 = result;
  v59[1] = v61;
  if (v57 > v56)
  {
    v62 = 0;
    if (result <= 1)
      v63 = 1;
    else
      v63 = (v55 - v54) >> 2;
    v64 = (float32x2_t)vdup_n_s32(0x42EFD02Bu);
    v65 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
    v66 = (float32x2_t)vdup_n_s32(0x431D2FBDu);
    v67 = (float32x2_t)vdup_n_s32(0x40ACF18Eu);
    v68 = (float32x2_t)vdup_n_s32(0x480E0877u);
    v69 = (float32x4_t)vdupq_n_s32(0x3C9BA5E3u);
    v70 = (float32x2_t)vdup_n_s32(0x41DFC37Bu);
    __asm { FMOV            V19.4S, #0.25 }
    v75 = (float32x4_t)vdupq_n_s32(0x42EFD02Bu);
    v76 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
    v77 = (float32x4_t)vdupq_n_s32(0x431D2FBDu);
    v78 = (float32x4_t)vdupq_n_s32(0x40ACF18Eu);
    v7 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
    v79 = (float32x4_t)vdupq_n_s32(0x480E0877u);
    v80 = (float32x4_t)vdupq_n_s32(0x41DFC37Bu);
    v81 = v56;
    do
    {
      if (v81)
        v82 = v81 - 1;
      else
        v82 = 0;
      v83 = v81 + 1;
      if (v81 + 1 >= v282)
        v84 = v81;
      else
        v84 = v81 + 1;
      v85 = v272[2];
      v86 = v272[8];
      v87 = (float *)(v86 + v85 * v81);
      v88 = v85 * v82;
      v89 = v84 * v85;
      v90 = (float *)(v86 + v84 * v85);
      v91 = v274[11];
      v92 = v274[10] * a3;
      if (v54)
      {
        v93 = v81 & 3;
        v94 = v262 - 4;
      }
      else
      {
        v8.f32[0] = *v87 + 0.019;
        v95 = vmaxnm_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 0), 0);
        v96 = vmul_f32(v95, v95);
        *(float32x2_t *)v6.f32 = vmla_f32(v65, v64, v96);
        *(float32x2_t *)v8.f32 = vdiv_f32(vmla_f32(v67, v96, vmul_f32(v95, v66)), *(float32x2_t *)v6.f32);
        v97 = (float)(*v87
                    - (float)((float)((float)((float)(*v90 + *(float *)(v86 + v88)) + *v87) + v87[v24 > 1])
                            * 0.25))
            * v8.f32[0];
        v98 = v97 * v97;
        if (v98 >= 0.2)
          v98 = 0.2;
        v99 = 0.25 * vsqrt_f32(vmla_n_f32(v70, v68, v98)).f32[0];
        v93 = v81 & 3;
        if ((v81 & 3) != 0)
          v99 = v99 + *(float *)(v91 + v92);
        *(float *)(v91 + v92) = v99;
        v94 = 1;
      }
      if (v94 + 5 >= v55)
      {
        v108 = v94;
      }
      else
      {
        v100 = (float32x4_t *)(v91 - 4 * v54 + v92 + 4 * v94);
        v101 = (float32x4_t *)(v86 + v88 + 4 * v94);
        v102 = (float32x4_t *)(v86 + v89 + 4 * v94);
        v103 = v86 + v85 * v81 + 4 * v94;
        do
        {
          v104 = vmaxnmq_f32(vaddq_f32(*(float32x4_t *)v103, v69), (float32x4_t)0);
          v105 = vmulq_f32(v104, v104);
          v6 = vmlaq_f32(v76, v75, v105);
          v8 = vdivq_f32(vmlaq_f32(v78, v105, vmulq_f32(v104, v77)), v6);
          v106 = vmulq_f32(v8, vsubq_f32(*(float32x4_t *)v103, vmulq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v103 + 4), *(float32x4_t *)(v103 - 4)), vaddq_f32(*v102, *v101)), _Q19)));
          v107 = vmulq_f32(vsqrtq_f32(vmlaq_f32(v80, v79, vminnmq_f32(vmulq_f32(v106, v106), v7))), _Q19);
          if (v93)
            v107 = vaddq_f32(v107, *v100);
          *v100++ = v107;
          v108 = v94 + 4;
          v109 = v94 + 9;
          ++v101;
          ++v102;
          v103 += 16;
          v94 += 4;
        }
        while (v109 < v55);
      }
      if (v108 < v55)
      {
        v110 = v91 - 4 * v54 + v92;
        v111 = v86 + v85 * v82;
        do
        {
          v112 = v108 + 1;
          if (v108 + 1 >= v24)
            v113 = v108;
          else
            v113 = v108 + 1;
          v114 = &v87[v108];
          v8.f32[0] = *v114 + 0.019;
          v115 = vmaxnm_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 0), 0);
          v116 = vmul_f32(v115, v115);
          *(float32x2_t *)v6.f32 = vmla_f32(v65, v64, v116);
          *(float32x2_t *)v8.f32 = vdiv_f32(vmla_f32(v67, v116, vmul_f32(v115, v66)), *(float32x2_t *)v6.f32);
          v117 = (float)(*v114
                       - (float)((float)((float)((float)(v90[v108] + *(float *)(v111 + 4 * v108)) + v114[-(v108 != 0)])
                                       + v87[v113])
                               * 0.25))
               * v8.f32[0];
          v118 = v117 * v117;
          if (v118 >= 0.2)
            v118 = 0.2;
          v119 = 0.25 * vsqrt_f32(vmla_n_f32(v70, v68, v118)).f32[0];
          if (v93)
            v119 = v119 + *(float *)(v110 + 4 * v108);
          *(float *)(v110 + 4 * v108++) = v119;
        }
        while (v55 != v112);
      }
      if (v93 == 3 && v55 - v54 >= 4)
      {
        v120 = (float *)(*(_QWORD *)(*v274 + 40 * a3 + 24) + *(_QWORD *)(*v274 + 40 * a3 + 16) * (v62 >> 2));
        v121 = (float *)(v91 + v92 + 8);
        v122 = v63;
        do
        {
          v123 = *(v121 - 2) + *(v121 - 1);
          v124 = *v121;
          v125 = v121[1];
          v121 += 4;
          *v120++ = (float)((float)(v123 + v124) + v125) * 0.25;
          --v122;
        }
        while (v122);
      }
      ++v62;
      v81 = v83;
    }
    while (v83 != v57);
    v58 = *v274;
    v126 = (unsigned int *)(*v274 + 40 * a3);
    result = *v126;
    LODWORD(v61) = v126[1];
  }
  v127 = (v54 & 7) != 0;
  v128 = (v56 & 7) != 0;
  v129 = (float)(2.0 - v265) * 0.5;
  if (v265 >= 2.0)
    v129 = 0.0;
  if (v273 != v281)
  {
    v130 = 0;
    v131 = result;
    v132 = (float)(v129 * 0.0) + 0.125;
    v133 = (float)(v129 * -0.1) + 0.1;
    v134 = (float)(v129 * -0.09) + 0.09;
    v135 = (float)(v129 * -0.06) + 0.06;
    v136 = 0.2996 / (float)(v135 + (float)(v134 + (float)(v132 + v133)));
    v137 = v132 * v136;
    v138 = v133 * v136;
    v139 = v134 * v136;
    v140 = v135 * v136;
    v141 = v58 + 40 * a3;
    result = *(_QWORD *)(v141 + 16);
    v142 = *(_QWORD *)(v141 + 24);
    v144 = v274[5];
    v143 = v274[6];
    v145 = v142 + 4 * v127;
    v146 = v142 + result * v128 + 4 * v127;
    v147 = v128;
    do
    {
      if (v147)
        v148 = v147 - 1;
      else
        v148 = 0;
      v149 = v130 + v128;
      if (v130 + v128)
        v150 = v130 + v128 - 1;
      else
        v150 = 0;
      if (v149 + 1 >= v61)
        v151 = v130 + v128;
      else
        v151 = v149 + 1;
      if (v284 != v278)
      {
        v152 = 0;
        v153 = v145 + result * v148;
        v154 = v142 + v150 * result;
        v155 = v142 + v149 * result;
        v156 = v151 * result;
        v157 = v142 + v151 * result;
        v158 = v143 + (v281 + (v130 >> 1)) * v144 + 4 * v278;
        v159 = v145 + v156;
        v160 = v127;
        do
        {
          v161 = v160 != 0;
          v162 = v127 + v152;
          if (v127 + v152 + 1 < v131)
            ++v162;
          v163 = (float *)(v146 + 4 * v152);
          v164 = *v163;
          v166 = *(float *)(v155 + 4 * v162);
          v287 = v163[-v161];
          v165 = v287;
          *(float *)v288 = v164;
          v167 = *(float *)(v153 - 4 * v161 + 4 * v152);
          v285 = v167;
          v286 = v166;
          if (v164 <= v287)
          {
            v168 = v287;
            v165 = v164;
          }
          else
          {
            v287 = v164;
            *(float *)v288 = v165;
            v168 = v164;
          }
          if (v165 <= v166)
          {
            v169 = v166;
            v166 = v165;
          }
          else
          {
            *(float *)v288 = v166;
            v286 = v165;
            v169 = v165;
          }
          if (v166 <= v167)
          {
            v170 = v166;
            v166 = v167;
          }
          else
          {
            *(float *)v288 = v167;
            v285 = v166;
            v170 = v167;
          }
          if (v168 <= v169)
          {
            v171 = v169;
            v169 = v168;
          }
          else
          {
            v286 = v168;
            v287 = v169;
            v171 = v168;
          }
          if (v169 <= v166)
          {
            v172 = v169;
            v169 = v166;
          }
          else
          {
            v287 = v166;
            v285 = v169;
            v172 = v166;
          }
          if (v171 <= v169)
          {
            v173 = v171;
            v171 = v169;
          }
          else
          {
            v285 = v171;
            v286 = v169;
            v173 = v169;
          }
          v174 = *(float *)(v153 + 4 * v152);
          if (v171 > v174)
          {
            if (v170 <= v174)
            {
              if (v172 <= v174)
              {
                if (v173 <= v174)
                {
                  v175 = &v285;
                }
                else
                {
                  v285 = v173;
                  v175 = &v286;
                }
              }
              else
              {
                v285 = v173;
                v286 = v172;
                v175 = &v287;
              }
            }
            else
            {
              v285 = v173;
              v286 = v172;
              v175 = (float *)v288;
              v287 = v170;
            }
            *v175 = v174;
            v171 = v285;
            v170 = *(float *)v288;
          }
          v176 = *(float *)(v154 + 4 * v162);
          if (v171 > v176)
          {
            if (v170 <= v176)
            {
              if (v287 <= v176)
              {
                if (v286 <= v176)
                {
                  v177 = &v285;
                }
                else
                {
                  v285 = v286;
                  v177 = &v286;
                }
              }
              else
              {
                v285 = v286;
                v286 = v287;
                v177 = &v287;
              }
            }
            else
            {
              v285 = v286;
              v286 = v287;
              v287 = v170;
              v177 = (float *)v288;
            }
            *v177 = v176;
            v171 = v285;
            v170 = *(float *)v288;
          }
          v178 = *(float *)(v159 - 4 * v161 + 4 * v152);
          if (v171 > v178)
          {
            if (v170 <= v178)
            {
              if (v287 <= v178)
              {
                if (v286 <= v178)
                {
                  v179 = &v285;
                }
                else
                {
                  v285 = v286;
                  v179 = &v286;
                }
              }
              else
              {
                v285 = v286;
                v286 = v287;
                v179 = &v287;
              }
            }
            else
            {
              v285 = v286;
              v286 = v287;
              v287 = v170;
              v179 = (float *)v288;
            }
            *v179 = v178;
            v171 = v285;
            v170 = *(float *)v288;
          }
          v180 = *(float *)(v159 + 4 * v152);
          if (v171 > v180)
          {
            if (v170 <= v180)
            {
              if (v287 <= v180)
              {
                if (v286 <= v180)
                {
                  v181 = &v285;
                }
                else
                {
                  v285 = v286;
                  v181 = &v286;
                }
              }
              else
              {
                v285 = v286;
                v286 = v287;
                v181 = &v287;
              }
            }
            else
            {
              v285 = v286;
              v286 = v287;
              v287 = v170;
              v181 = (float *)v288;
            }
            *v181 = v180;
            v171 = v285;
            v170 = *(float *)v288;
          }
          v182 = *(float *)(v157 + 4 * v162);
          if (v171 > v182)
          {
            if (v170 <= v182)
            {
              if (v287 <= v182)
              {
                if (v286 <= v182)
                {
                  v183 = &v285;
                }
                else
                {
                  v285 = v286;
                  v183 = &v286;
                }
              }
              else
              {
                v285 = v286;
                v286 = v287;
                v183 = &v287;
              }
            }
            else
            {
              v285 = v286;
              v286 = v287;
              v287 = v170;
              v183 = (float *)v288;
            }
            *v183 = v182;
            v170 = *(float *)v288;
            v171 = v285;
          }
          v184 = (float)((float)((float)(v138 * v287) + (float)(v137 * v170)) + (float)(v139 * v286))
               + (float)(v140 * v171);
          v185 = v152 >> 1;
          if (((v152 | v130) & 1) != 0)
            v184 = v184 + *(float *)(v158 + 4 * v185);
          *(float *)(v158 + 4 * v185) = v184;
          ++v152;
          ++v160;
        }
        while (2 * v264 != v152);
      }
      ++v130;
      ++v147;
      v146 += result;
    }
    while (v130 != 2 * v266);
    v186 = 0;
    v188 = *(_QWORD *)(v256 + 16);
    v187 = *(_QWORD *)(v256 + 24);
    do
    {
      if (v284 != v278)
      {
        v189 = 0;
        v190 = v264;
        do
        {
          *(float *)(v187 + (v186 + v281) * v188 + 4 * v278 + 4 * v189) = 1.0
                                                                        / (float)(*(float *)(v143
                                                                                           + (v186 + v281) * v144
                                                                                           + 4 * v278
                                                                                           + 4 * v189)
                                                                                + 0.001);
          ++v189;
          --v190;
        }
        while (v190);
      }
      ++v186;
    }
    while (v186 != v266);
  }
  v191 = 1.0;
  if (v265 >= 2.0)
  {
    v191 = (float)((float)(v265 + -2.0) / -12.0) + 1.0;
    if (v191 < 0.0)
      v191 = 0.0;
  }
  if (v273 > v281)
  {
    v283 = v257 * v191;
    v192 = (float)(v257 * 0.48) * (float)(1.0 - v191);
    v280 = v274[6];
    v277 = v274[5];
    v194 = v272[7];
    v193 = v272[8];
    v195 = *v258;
    v275 = v258[1];
    v197 = v272[2];
    v196 = v272[3];
    v198 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
    v199 = (float32x4_t)vdupq_n_s32(0x406DF31Du);
    v200 = (float32x4_t)vdupq_n_s32(0x3CA8C6FBu);
    v201 = (float32x4_t)vdupq_n_s32(0x43974C46u);
    v202 = (float32x4_t)vdupq_n_s32(0x3E23D70Au);
    v203 = (float32x4_t)vdupq_n_s32(0x42EFD02Bu);
    v204 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
    v205 = (float32x4_t)vdupq_n_s32(0x431D2FBDu);
    v206 = (float32x4_t)vdupq_n_s32(0x40ACF18Eu);
    v207.i64[0] = 0x3F0000003F000000;
    v207.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V21.4S, #1.0 }
    v209 = (float32x4_t)vdupq_n_s32(0x40D96B1Cu);
    v210 = (float32x4_t)vdupq_n_s32(0x418ACD8Cu);
    v211 = (float32x4_t)vdupq_n_s32(0x3F6DF31Du);
    result = 3235206485;
    v7.i32[0] = 1062008135;
    v212 = (float32x4_t)vdupq_n_s32(0x411788B3u);
    v213 = (float32x4_t)vdupq_n_s32(0xBF43C361);
    v214 = vdupq_n_s32(0xC0D55555);
    do
    {
      if (v284 > v278)
      {
        v215 = v278;
        v216 = v280 + v281 * v277;
        v217 = v275 + 8 * v281;
        do
        {
          v218 = 0;
          v6.i32[0] = *(_DWORD *)(v216 + 4 * v215);
          v219 = vmaxnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v6, v7), 0), v198);
          v220 = vmlaq_f32(v199, v219, v219);
          v221 = 0uLL;
          do
          {
            v222 = 0;
            v223 = (v218 + v217) * v194;
            v224 = v193 + v223 + 4 * v195 + 32 * v215;
            v225 = v194 + v223;
            if (v218 == 7)
              v225 = v223;
            v226 = v193 + 4 * v195 + 32 * v215 + v225;
            v227 = 1;
            do
            {
              v228 = v227;
              v221 = vaddq_f32(vminnmq_f32(vabdq_f32(*(float32x4_t *)(v224 + 1 * v222), *(float32x4_t *)(v226 + 1 * v222)), v200), vaddq_f32(v221, (float32x4_t)vandq_s8((int8x16_t)xmmword_236921BE0[v222], (int8x16_t)vminnmq_f32(vabdq_f32(*(float32x4_t *)(v224 + 1 * v222), *(float32x4_t *)(v224 + 1 * v222 + 4)), v200))));
              v222 = 1;
              v227 = 0;
            }
            while ((v228 & 1) != 0);
            ++v218;
          }
          while (v218 != 8);
          v229 = 0;
          v230 = vaddq_f32(v219, v201);
          v231 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v221, v221));
          v232 = 0uLL;
          do
          {
            v233 = 0;
            result = v196 + (v229 + v217) * v197 + 4 * v195 + 32 * v215;
            v234 = 1;
            do
            {
              v235 = 4 * v233;
              v236 = *(float32x4_t *)(result + v235);
              v237 = v234;
              v238 = vaddq_f32(*(float32x4_t *)(v193 + (v229 + v217) * v194 + 4 * v195 + 32 * v215 + v235), v202);
              v239 = vsubq_f32(v238, v236);
              v240 = vaddq_f32(v238, v236);
              v241 = vmaxnmq_f32(v239, (float32x4_t)0);
              v242 = vmulq_f32(v241, v241);
              v243 = vmlaq_f32(v206, v242, vmulq_f32(v241, v205));
              v244 = vmaxnmq_f32(v240, (float32x4_t)0);
              v245 = vmulq_f32(v244, v244);
              v232 = vaddq_f32(v232, vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v204, v203, v242), v243), vdivq_f32(vmlaq_f32(v204, v203, v245), vmlaq_f32(v206, v245, vmulq_f32(v244, v205)))), v207));
              v233 = 4;
              v234 = 0;
            }
            while ((v237 & 1) != 0);
            ++v229;
          }
          while (v229 != 8);
          v246 = vdivq_f32(_Q21, v230);
          v247 = vmlaq_f32(vmulq_f32(vdivq_f32(_Q21, v220), v209), v210, v246);
          v246.f32[0] = (float)(v231 + -1.1109) * -0.38079;
          v248 = vaddq_f32(vaddq_f32(vmlaq_f32(v247, v212, vdivq_f32(_Q21, vmlaq_f32(v211, v219, v219))), v213), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v246.f32, 0));
          v246.i64[0] = vpaddq_f32(v232, v232).u64[0];
          v246.f32[0] = vaddv_f32(*(float32x2_t *)v246.f32) * 0.015625;
          v249 = vdupq_lane_s32(*(int32x2_t *)v246.f32, 0);
          v250 = vaddq_s32(v249, v214);
          _Q9 = vshrq_n_s32(v250, 0x17uLL);
          v252.i64[0] = 0x7F0000007FLL;
          v252.i64[1] = 0x7F0000007FLL;
          v253 = (float32x4_t)vsubq_s32(v249, (int32x4_t)vandq_s8((int8x16_t)v250, v252));
          __asm { FMOV            V8.4S, #-1.0 }
          v255 = vaddq_f32(v253, _Q8);
          v6 = (float32x4_t)vdupq_n_s32(0x3DCDF31Au);
          v248.i64[0] = vmlaq_f32(v248, v6, vaddq_f32(vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xB5F85AB0), v255, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3FB6E02Bu), (float32x4_t)vdupq_n_s32(0x3F3E11C7u), v255)), vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7D8625u), v255, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F813CEDu), (float32x4_t)vdupq_n_s32(0x3E32458Cu), v255))), vcvtq_f32_s32(_Q9))).u64[0];
          v248.f32[0] = 1.4427 * v248.f32[0];
          *(int32x2_t *)v248.f32 = vdup_lane_s32(*(int32x2_t *)v248.f32, 0);
          *(float32x2_t *)v255.f32 = vrndm_f32(*(float32x2_t *)v248.f32);
          __asm { FMOV            V9.2S, #1.0 }
          *(float32x2_t *)v248.f32 = vsub_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v255.f32);
          *(float32x2_t *)v6.f32 = vmla_f32((float32x2_t)vdup_n_s32(0x42C519F1u), *(float32x2_t *)v248.f32, vmla_f32((float32x2_t)vdup_n_s32(0xC19B8831), *(float32x2_t *)v248.f32, vmla_f32((float32x2_t)vdup_n_s32(0xBCB621BE), (float32x2_t)vdup_n_s32(0x3E5749EEu), *(float32x2_t *)v248.f32)));
          *(float *)(v216 + 4 * v215++) = vmlas_n_f32(v192, v283, vdiv_f32(vmul_f32(vmla_f32((float32x2_t)vdup_n_s32(0x42C519F0u), *(float32x2_t *)v248.f32, vmla_f32((float32x2_t)vdup_n_s32(0x424379A1u), *(float32x2_t *)v248.f32, vadd_f32(*(float32x2_t *)v248.f32, (float32x2_t)vdup_n_s32(0x4122CC6Bu)))), (float32x2_t)vadd_s32(vshl_n_s32(vcvt_s32_f32(*(float32x2_t *)v255.f32), 0x17uLL), *(int32x2_t *)_Q9.i8)), *(float32x2_t *)v6.f32).f32[0]);
        }
        while (v215 != v284);
      }
      ++v281;
    }
    while (v281 != v273);
  }
  return result;
}

uint64_t *sub_236815500(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      v6 = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      v7 = *(_QWORD *)(v3 - 16);
      v8 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v4 - 16) = v7;
      *(_QWORD *)(v4 - 8) = v8;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_236815588(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  float v10;
  __int128 v11;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float *v45;
  unint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  int v53;
  float v54;
  __int128 v56;
  __int128 v57;
  float v58;
  __int128 v59;
  double v60;
  double v61;
  float v62;
  float v63;
  __int128 v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  unsigned int *v70;
  unint64_t v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  float *v77;
  float *v78;
  uint64_t v79;
  float v80;
  float v81;
  float *v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  float *v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  signed int v116;
  float v117;
  double v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  float v122;
  long double v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  float *v128;
  float *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float *v135;
  uint64_t v136;
  float *v137;
  uint64_t v138;
  float *v139;
  float *v140;
  uint64_t v141;
  double v142;
  double v143;
  float v144;
  double v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  float *v149;
  uint64_t v150;
  float *v151;
  float *v152;
  uint64_t v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  float *v158;
  uint64_t v159;
  float *v160;
  uint64_t v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t j;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v182;
  int64x2_t v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float *v188;
  float *v189;
  uint64_t v190;
  float v191;
  float v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float *v198;
  uint64_t v199;
  uint64_t v200;
  int v204;
  unint64_t v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float *v210;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  float *v221;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  float v226;
  _QWORD v227[8];
  void *v228;
  char v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  _QWORD v233[12];
  uint64_t (**v234)();
  void *__p;
  void *v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  unsigned int v242;
  _DWORD v243[4];
  uint64_t v244;
  void *__dst;
  unsigned int v246;
  _OWORD v247[4];
  int64x2_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t (**v252)();
  uint64_t v253;
  int v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;

  v261 = *MEMORY[0x24BDAC8D0];
  v8 = a5 + 4576;
  if (*(_BYTE *)(a5 + 4576))
  {
    v197 = a5 + 952;
    v199 = a5 + 1024;
    v10 = sqrtf(0.1 / *(float *)(a5 + 4544)) * 16.0;
    v240 = 0;
    v239 = 0;
    *(_QWORD *)&v11 = *(_QWORD *)a4;
    *((_QWORD *)&v11 + 1) = HIDWORD(*(_QWORD *)a4);
    v241 = v11;
    sub_236813F1C(*(_QWORD *)(a5 + 168), *(_QWORD *)(a5 + 176), &v239, (uint64_t)a4, *(float *)(a5 + 4936));
    v204 = 0;
    __asm { FMOV            V1.2S, #1.0 }
    v252 = (uint64_t (**)())vdiv_f32(_D1, *(float32x2_t *)(v8 + 4));
    *(float *)&v253 = 1.0 / *(float *)(a5 + 4588);
    while (1)
    {
      sub_236806494(v197, a4, v199, v10);
      sub_236816630((uint64_t)&v239, a1, (unsigned int *)a3, (uint64_t *)a5, (uint64_t)a6, a7);
      v16 = v242;
      if (v242)
        break;
      sub_236816AE8((uint64_t)v227, &v239);
      v212 = *(_QWORD *)(a5 + 80);
      if (v212)
      {
        v220 = 0;
        v17 = 0;
        v207 = *(_QWORD *)(a5 + 168);
        v209 = *(_QWORD *)(a5 + 176);
        v18 = *(_QWORD *)(a5 + 72);
        v214 = v18;
        do
        {
          if (v18)
          {
            v19 = 0;
            v20 = 0;
            v21 = v209 + v17 * v207;
            v22 = 8 * v17;
            v23 = (float *)(*((_QWORD *)a4 + 3) + *((_QWORD *)a4 + 2) * v17);
            v218 = v21;
            v219 = v17;
            v216 = *((_QWORD *)a4 + 2);
            do
            {
              v24 = *(unsigned __int8 *)(v21 + v20);
              if ((v24 & 1) != 0)
              {
                v221 = v23;
                v25 = 0;
                v26 = v24 >> 1;
                v27 = v17 + byte_236926677[v24 >> 1];
                v28 = 8 * v27;
                v29 = *(_QWORD *)(a3 + 16);
                v30 = v237 == v238 || v231 != 0;
                v31 = v237 == v238 || v230 != 0;
                v32 = 0.0;
                do
                {
                  if (v22 < v28)
                  {
                    v33 = v220 * v232;
                    v34 = v220 * v29;
                    v35 = v22;
                    do
                    {
                      v36 = v231;
                      if (!v30)
                        v36 = v237[1];
                      if (v35 < v36)
                      {
                        v37 = byte_23692665C[v26];
                        if (8 * v20 < 8 * (v20 + v37))
                        {
                          v38 = v19 + 8 * v37;
                          v39 = 8 * v20;
                          do
                          {
                            v40 = v230;
                            if (!v31)
                              v40 = *v237;
                            if (v39 < v40)
                            {
                              v41 = *((float *)&v252 + v25)
                                  * vabds_f32(*(float *)(*(_QWORD *)(a3 + 40 * v25 + 24) + v34 + 4 * v39), *(float *)(v233[5 * v25] + v33 + 4 * v39));
                              if (v41 >= v32)
                                v32 = v41;
                            }
                            ++v39;
                          }
                          while (v38 != v39);
                        }
                      }
                      ++v35;
                      v34 += v29;
                      v33 += v232;
                    }
                    while (v35 != v28);
                  }
                  ++v25;
                }
                while (v25 != 3);
                v42 = fmaxf(v32, 1.0);
                if (v32 >= 0.5)
                  v43 = v42;
                else
                  v43 = v32 + v32;
                v21 = v218;
                v17 = v219;
                v18 = v214;
                v23 = v221;
                if (v219 < v27)
                {
                  v44 = byte_23692665C[v26];
                  v45 = v221;
                  v46 = v219;
                  do
                  {
                    v47 = v45;
                    v48 = v44;
                    if (v20 < v20 + v44)
                    {
                      do
                      {
                        *v47 = v43 * *v47;
                        ++v47;
                        --v48;
                      }
                      while (v48);
                    }
                    ++v46;
                    v45 = (float *)((char *)v45 + v216);
                  }
                  while (v46 != v27);
                }
              }
              ++v20;
              v19 += 8;
              ++v23;
            }
            while (v20 != v18);
          }
          ++v17;
          v220 += 8;
        }
        while (v17 != v212);
      }
      v248.i64[0] = (uint64_t)&v237;
      sub_2367D077C((void ***)&v248);
      v234 = &off_2507FFA18;
      if (__p)
      {
        v236 = __p;
        operator delete(__p);
      }
      for (i = 25; i != 10; i -= 5)
        sub_2367C2F38(&v227[i]);
      if (v229 < 0)
        operator delete(v228);
      v50 = v227[0];
      v227[0] = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      sub_236816C34(&v239);
      if (++v204 == 5)
      {
        sub_236806494(v197, a4, v199, v10);
        return 0;
      }
    }
    sub_236816C34(&v239);
    return v16;
  }
  if (!a2)
    return 0;
  if (*(int *)(a5 + 4592) > 2)
    return 0;
  v53 = *(_DWORD *)(a5 + 4924);
  v54 = *(float *)(a5 + 4936);
  if (v53 >= 2 && (double)v53 * 4.0 >= v54)
    return 0;
  __asm { FMOV            V0.2S, #1.0 }
  v253 = _D0;
  v56 = a6[1];
  v255 = *a6;
  v256 = v56;
  v57 = a6[3];
  v257 = a6[2];
  v58 = *(float *)(a5 + 4544);
  v252 = &off_2507FFD58;
  v254 = 1117782016;
  v258 = v57;
  v259 = 0;
  v260 = 0uLL;
  sub_23680DBAC((uint64_t)&v239, a2, (uint64_t)&v253);
  if (!(_DWORD)v240)
  {
    v259 = v239;
    *(_QWORD *)&v59 = *(_QWORD *)a2;
    *((_QWORD *)&v59 + 1) = HIDWORD(*(_QWORD *)a2);
    v260 = v59;
  }
  v60 = sub_23680ECA4(1.5);
  v61 = sub_23680ECA4(0.5);
  v62 = powf(v58 * 3.3333, 0.83) * 0.3;
  if (v62 >= v58)
    v62 = v58;
  if ((float)(v58 * 0.5) >= v62)
    v62 = v58 * 0.5;
  v63 = 1.0959 / v62;
  if (v63 > 50.0)
    v63 = 50.0;
  v187 = v63;
  v240 = 0;
  v239 = 0;
  *(_QWORD *)&v64 = *(_QWORD *)a4;
  *((_QWORD *)&v64 + 1) = HIDWORD(*(_QWORD *)a4);
  v241 = v64;
  sub_236813F1C(*(_QWORD *)(a5 + 168), *(_QWORD *)(a5 + 176), &v239, (uint64_t)a4, v54);
  v65.n128_f64[0] = sub_2367C431C((uint64_t)v243, *a4, a4[1]);
  v16 = v246;
  if (v246)
    goto LABEL_215;
  v185 = a8;
  v66 = v243[0];
  v67 = v243[1];
  v68 = v244;
  v69 = (float *)__dst;
  __dst = 0;
  v70 = a4;
  if (a4[1] && *a4)
  {
    v71 = 0;
    v72 = v69;
    do
    {
      memcpy(v72, (const void *)(*((_QWORD *)v70 + 3) + *((_QWORD *)v70 + 2) * v71), 4 * *v70);
      v70 = a4;
      ++v71;
      v72 = (float *)((char *)v72 + v68);
    }
    while (v71 < a4[1]);
  }
  v193 = a5 + 952;
  v73 = a5 + 1024;
  if ((_DWORD)v67)
  {
    v74 = 0;
    v75 = -3.4028e38;
    v76 = 3.4028e38;
    v77 = v69;
    do
    {
      v78 = v77;
      v79 = v66;
      if ((_DWORD)v66)
      {
        do
        {
          v80 = *v78++;
          v81 = v80;
          if (v80 < v76)
            v76 = v81;
          if (v75 < v81)
            v75 = v81;
          --v79;
        }
        while (v79);
      }
      ++v74;
      v77 = (float *)((char *)v77 + v68);
    }
    while (v74 != v67);
  }
  else
  {
    v75 = -3.4028e38;
    v76 = 3.4028e38;
  }
  v182 = v68;
  v82 = 0;
  v83 = 0;
  v84 = v60;
  v85 = v61;
  v191 = v85;
  v192 = v84;
  v86 = sqrtf(250.0 / (float)(v75 / v76));
  v87 = fminf(v86, 2.0);
  v88 = v76 / (float)(v86 * v87);
  v89 = v75 * (float)(v86 / v87);
  v90 = a5;
  if (*(_DWORD *)(a5 + 4592) == 1)
    v91 = 4;
  else
    v91 = 2;
  v186 = v91;
  v190 = v91 | 1;
  v184 = v54 + -1.0;
  v183 = vdupq_n_s64(0x3FC999999999999AuLL);
  v188 = v69;
  v92 = v187;
  while (1)
  {
    sub_236806494(v193, v70, v73, v92);
    sub_236816630((uint64_t)&v239, a1, (unsigned int *)a3, (uint64_t *)v90, (uint64_t)a6, a7);
    v16 = v242;
    if (v242)
    {
      sub_236816C34(&v239);
      goto LABEL_202;
    }
    sub_236816AE8((uint64_t)v227, &v239);
    v226 = 0.0;
    v225 = 0;
    v223 = 0u;
    v224 = 0u;
    sub_23681FEB0((uint64_t)&v252, (uint64_t)v227, &v223, &v226);
    v93 = DWORD1(v223);
    v194 = v83;
    if (v192 >= v191)
    {
      v226 = -v226;
      if (DWORD1(v223))
      {
        v94 = 0;
        v95 = (float *)*((_QWORD *)&v224 + 1);
        v96 = v224;
        v97 = v223;
        do
        {
          v98 = v95;
          v99 = v97;
          if ((_DWORD)v97)
          {
            do
            {
              *v98 = -*v98;
              ++v98;
              --v99;
            }
            while (v99);
          }
          ++v94;
          v95 = (float *)((char *)v95 + v96);
        }
        while (v94 != v93);
      }
    }
    v100 = 8 * *(int *)(v90 + 4924);
    v205 = (v100 - 1 + v223) / v100;
    v101 = (v100 - 1 + v93) / v100;
    sub_2367C431C((uint64_t)&v248, v205, v101);
    v16 = DWORD2(v250);
    if (DWORD2(v250))
    {
      v102 = 1;
      v198 = v82;
      goto LABEL_183;
    }
    v189 = v82;
    v198 = (float *)*((_QWORD *)&v249 + 1);
    v208 = v249;
    if ((int)v101 >= 1)
    {
      v103 = 0;
      v213 = 0;
      v195 = *(_QWORD *)(a5 + 168);
      v196 = *(_QWORD *)(a5 + 176);
      v200 = v101;
      v104 = v205;
      v105 = 4 * ((unint64_t)v249 >> 2);
      v210 = (float *)*((_QWORD *)&v249 + 1);
      do
      {
        if ((int)v205 >= 1)
        {
          v106 = 0;
          v107 = 0;
          v108 = v196 + v103 * v195;
          v109 = v210;
          v110 = DWORD1(v223);
          v217 = v223;
          v111 = v224;
          v215 = *((_QWORD *)&v224 + 1) + v224 * (v213 & ~(v213 >> 31));
          do
          {
            v112 = *(unsigned __int8 *)(v108 + v106);
            if ((v112 & 1) != 0)
            {
              v115 = v112 >> 1;
              v113 = byte_23692665C[v115];
              v114 = byte_236926677[v115];
              LODWORD(v115) = (v114 + v103) * v100;
              if ((int)v115 >= v110)
                v115 = v110;
              else
                v115 = v115;
              if ((int)((v100 * v103) & ~(((int)v100 * (int)v103) >> 31)) >= (int)v115)
              {
                v118 = 0.0;
                v117 = 0.0;
              }
              else
              {
                v116 = v217;
                if ((int)((v113 + v106) * v100) < v217)
                  v116 = (v113 + v106) * v100;
                v117 = 0.0;
                v118 = 0.0;
                v119 = v215;
                v120 = v213 & ~(v213 >> 31);
                do
                {
                  v121 = v107 & ~(v107 >> 31);
                  if ((int)((v100 * v106) & ~(((int)v100 * (int)v106) >> 31)) < v116)
                  {
                    do
                    {
                      v122 = *(float *)(v119 + 4 * v121) * *(float *)(v119 + 4 * v121);
                      v117 = v117
                           + (float)((float)((float)(v122 * v122) * (float)(v122 * v122))
                                   * (float)((float)(v122 * v122) * (float)(v122 * v122)));
                      v118 = v118 + 1.0;
                      ++v121;
                    }
                    while (v121 < v116);
                  }
                  ++v120;
                  v119 += v111;
                }
                while (v120 < v115);
              }
              if (v118 == 0.0)
                v118 = 1.0;
              v123 = pow(v117 / v118, 0.0625);
              v124 = 0;
              v125 = v123 * 1.20000005;
              v108 = v196 + v103 * v195;
              *(float *)((char *)&v198[v106] + v103 * v208) = v125;
              if (v113 <= 1)
                v126 = 1;
              else
                v126 = v113;
              if (v114 <= 1)
                v127 = 1;
              else
                v127 = v114;
              v128 = v109;
              v104 = v205;
              do
              {
                v129 = v128;
                v130 = v126;
                do
                {
                  *v129++ = v125;
                  --v130;
                }
                while (v130);
                ++v124;
                v128 = (float *)((char *)v128 + v105);
              }
              while (v124 != v127);
            }
            ++v106;
            v107 += v100;
            ++v109;
          }
          while (v106 != v104);
        }
        v213 += v100;
        v210 = (float *)((char *)v210 + v208);
        ++v103;
      }
      while (v103 != v200);
    }
    v69 = v188;
    if (v189)
    {
      v131 = -*((_QWORD *)v189 - 3);
      do
        v132 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v132 + v131, &qword_2564313D8));
      free(*((void **)v189 - 4));
    }
    if (v185)
      ++*(_DWORD *)(v185 + 696);
    v73 = a5 + 1024;
    if (v194 == v186)
    {
      v16 = 0;
      v102 = 8;
      goto LABEL_183;
    }
    v250 = 0u;
    v251 = 0u;
    v249 = 0u;
    v248 = v183;
    memset(v247, 0, sizeof(v247));
    v133 = a4[1];
    if (v194 == 1 && a4[1])
    {
      v134 = 0;
      v136 = *((_QWORD *)a4 + 2);
      v135 = (float *)*((_QWORD *)a4 + 3);
      v137 = v188;
      v138 = *a4;
      do
      {
        v139 = v135;
        v140 = v137;
        v141 = v138;
        if ((_DWORD)v138)
        {
          do
          {
            v142 = *v139;
            v143 = *v140 * 0.6 + v142 * 0.4;
            if (v143 > v142)
            {
              v144 = v143;
              if (v89 < v144)
                v144 = v89;
              *v139 = v144;
              if (v144 < v88)
                *v139 = v88;
            }
            ++v140;
            ++v139;
            --v141;
          }
          while (v141);
        }
        ++v134;
        v137 = (float *)((char *)v137 + v182);
        v135 = (float *)((char *)v135 + v136);
      }
      while (v134 != v133);
      v133 = a4[1];
    }
    if (*(double *)&v248.i64[v194] + v184 * *((double *)v247 + v194) >= 0.0)
      v145 = *(double *)&v248.i64[v194] + v184 * *((double *)v247 + v194);
    else
      v145 = 0.0;
    if (v145 != 0.0)
    {
      if (!v133)
        goto LABEL_182;
      v157 = 0;
      v159 = *((_QWORD *)a4 + 2);
      v158 = (float *)*((_QWORD *)a4 + 3);
      v160 = v198;
      v161 = *a4;
      while (1)
      {
        v162 = v160;
        v163 = v158;
        v164 = v161;
        if ((_DWORD)v161)
          break;
LABEL_181:
        ++v157;
        v158 = (float *)((char *)v158 + v159);
        v160 = (float *)((char *)v160 + v208);
        if (v157 == v133)
          goto LABEL_182;
      }
      while (1)
      {
        v165 = *v162 / v54;
        if (v165 <= 1.0)
          break;
        v166 = *v163;
        v167 = v165 * *v163;
        *v163 = v167;
        if (llroundf(v166 * *(float *)(a5 + 992)) == llroundf(v167 * *(float *)(a5 + 992)))
        {
          v167 = v166 + *(float *)(a5 + 996);
LABEL_171:
          *v163 = v167;
        }
        if (v167 <= v89)
        {
          _NF = v167 < v88;
        }
        else
        {
          v167 = v89;
          _NF = 1;
        }
        if (_NF)
        {
          if (v167 < v88)
            v167 = v88;
          *v163 = v167;
        }
        ++v163;
        ++v162;
        if (!--v164)
          goto LABEL_181;
      }
      v167 = pow(v165, v145) * *v163;
      goto LABEL_171;
    }
    if (v133)
    {
      v146 = 0;
      v148 = *((_QWORD *)a4 + 2);
      v147 = (float *)*((_QWORD *)a4 + 3);
      v149 = v198;
      v150 = *a4;
      while (1)
      {
        v151 = v149;
        v152 = v147;
        v153 = v150;
        if ((_DWORD)v150)
          break;
LABEL_162:
        ++v146;
        v147 = (float *)((char *)v147 + v148);
        v149 = (float *)((char *)v149 + v208);
        if (v146 == v133)
          goto LABEL_182;
      }
      while (1)
      {
        v154 = *v151 / v54;
        v155 = *v152;
        if (v154 <= 1.0)
        {
          v156 = *v152;
        }
        else
        {
          v156 = v154 * v155;
          *v152 = v156;
          if (llroundf(v155 * *(float *)(a5 + 992)) == llroundf(v156 * *(float *)(a5 + 992)))
          {
            v156 = v155 + *(float *)(a5 + 996);
            *v152 = v156;
          }
        }
        if (v156 > v89)
          break;
        if (v156 < v88)
          goto LABEL_158;
LABEL_161:
        ++v152;
        ++v151;
        if (!--v153)
          goto LABEL_162;
      }
      v156 = v89;
LABEL_158:
      if (v156 < v88)
        v156 = v88;
      *v152 = v156;
      goto LABEL_161;
    }
LABEL_182:
    v16 = 0;
    v102 = 0;
    v73 = a5 + 1024;
    v69 = v188;
    v92 = v187;
LABEL_183:
    v169 = *((_QWORD *)&v224 + 1);
    *((_QWORD *)&v224 + 1) = 0;
    if (v169)
    {
      v170 = -*(_QWORD *)(v169 - 24);
      do
        v171 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v171 + v170, &qword_2564313D8));
      free(*(void **)(v169 - 32));
    }
    v248.i64[0] = (uint64_t)&v237;
    sub_2367D077C((void ***)&v248);
    v234 = &off_2507FFA18;
    if (__p)
    {
      v236 = __p;
      operator delete(__p);
    }
    for (j = 25; j != 10; j -= 5)
      sub_2367C2F38(&v227[j]);
    if (v229 < 0)
      operator delete(v228);
    v173 = v227[0];
    v227[0] = 0;
    v90 = a5;
    if (v173)
      (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
    sub_236816C34(&v239);
    if (v102)
      break;
    v83 = v194 + 1;
    v82 = v198;
    v70 = a4;
    if (v194 + 1 == v190)
      goto LABEL_199;
  }
  v70 = a4;
  if (v102 == 8)
  {
LABEL_199:
    sub_236806494(v193, v70, v73, v92);
    v16 = 0;
  }
  v82 = v198;
LABEL_202:
  if (v69)
  {
    v174 = -*((_QWORD *)v69 - 3);
    do
      v175 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v175 + v174, &qword_2564313D8));
    free(*((void **)v69 - 4));
  }
  if (!v246)
  {
    v176 = __dst;
    __dst = 0;
    if (v176)
    {
      v177 = -*(v176 - 3);
      do
        v178 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v178 + v177, &qword_2564313D8));
      free((void *)*(v176 - 4));
    }
  }
  if (v82)
  {
    v179 = -*((_QWORD *)v82 - 3);
    do
      v180 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v180 + v179, &qword_2564313D8));
    free(*((void **)v82 - 4));
  }
LABEL_215:
  if (v259)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v259 + 8))(v259, v65);
  if (!(_DWORD)v16)
    return 0;
  return v16;
}

void sub_236816500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (a19)
  {
    v21 = -*(_QWORD *)(a19 - 24);
    do
      v22 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v22 + v21, &qword_2564313D8));
    free(*(void **)(a19 - 32));
  }
  if (!LODWORD(STACK[0x518]))
  {
    v23 = STACK[0x508];
    STACK[0x508] = 0;
    if (v23)
    {
      v24 = -*(_QWORD *)(v23 - 24);
      do
        v25 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v25 + v24, &qword_2564313D8));
      free(*(void **)(v23 - 32));
    }
  }
  if (v19)
  {
    v26 = -*(_QWORD *)(v19 - 24);
    do
      v27 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v27 + v26, &qword_2564313D8));
    free(*(void **)(v19 - 32));
  }
  if (STACK[0x600])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x600] + 8))(STACK[0x600]);
  _Unwind_Resume(a1);
}

uint64_t sub_236816630(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  uint64_t *v42;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  _QWORD v49[7];
  unsigned __int8 v50;
  _QWORD v51[2];
  _QWORD v52[3];
  _BYTE v53[9];
  void **v54[15];
  int v55;
  uint64_t v56[2];
  __int128 v57;
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  uint64_t (**v62)();
  void *__p;
  void *v64;
  uint64_t v65;
  _BYTE v66[1256];
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  uint64_t *v72;

  v68 = a4;
  sub_236816CD0(&v67);
  v12 = v67;
  sub_2367E7864(v67 + 4944, *a4);
  *(_QWORD *)(v12 + 4208) = a4;
  v14 = *a3;
  v13 = a3[1];
  v15 = a4[532];
  v16 = a4[531];
  v17 = (uint64_t)(a4 + 568);
  v18 = a4[534];
  sub_23684815C((uint64_t)v66, a2, v17, 0);
  v56[0] = 0;
  v56[1] = 0;
  *(_QWORD *)&v19 = *(_QWORD *)a3;
  *((_QWORD *)&v19 + 1) = HIDWORD(*(_QWORD *)a3);
  v57 = v19;
  sub_236820878(a2, (uint64_t)a3, (uint64_t)v56, a5, a6, (uint64_t)v68, (uint64_t)v66, 0);
  sub_2367DC0E8(v67, (unsigned int *)a2);
  sub_2367DB058(v67, v18);
  sub_2367D050C((uint64_t)v56, *v68);
  v58 = *(_QWORD *)(a2 + 296);
  sub_2367CA770((uint64_t)v54, *a3, a3[1]);
  if (v55)
  {
    *(_DWORD *)(a1 + 448) = v55;
  }
  else
  {
    sub_2367CA9E4((uint64_t)v53, (uint64_t)v54);
    sub_2367F67A4((uint64_t)v56, (uint64_t)v53, v67 + 5192);
    v20 = v61;
    sub_2367CD8E0(v67, a2, (uint64_t)v56, 0);
    memset(v52, 0, sizeof(v52));
    v21 = ((unint64_t)(v13 + 255) >> 8)
        * (unint64_t)((unint64_t)(v14 + 255) >> 8);
    v51[0] = &v67;
    v51[1] = v52;
    v50 = 0;
    v49[0] = &v50;
    v49[1] = a2;
    v49[2] = &v67;
    v49[3] = &v68;
    v49[4] = v52;
    v49[5] = v56;
    v49[6] = v20;
    if (a6)
    {
      sub_236816D40(a6, v21, (uint64_t)v51, (uint64_t)v49);
    }
    else
    {
      v69 = 0;
      *(_QWORD *)&v70 = &v69;
      sub_236816D40((uint64_t)&v69, v21, (uint64_t)v51, (uint64_t)v49);
    }
    v22 = atomic_load(&v50);
    if ((v22 & 1) != 0)
    {
      *(_DWORD *)(a1 + 448) = 1;
    }
    else
    {
      v23 = (v15 - v16) >> 3;
      v24 = v68;
      v25 = (uint64_t *)v68[532];
      v26 = v68[531];
      v27 = ((uint64_t)v25 - v26) >> 3;
      if (v23 <= v27)
      {
        if (v23 < v27)
        {
          v42 = (uint64_t *)(v26 + 8 * v23);
          while (v25 != v42)
            sub_236817268(--v25);
          v24[532] = (uint64_t)v42;
        }
      }
      else
      {
        v28 = v23 - v27;
        v29 = v68[533];
        if (v23 - v27 <= (v29 - (uint64_t)v25) >> 3)
        {
          bzero((void *)v68[532], 8 * v28);
          v24[532] = (uint64_t)&v25[v28];
        }
        else
        {
          if (v15 - v16 < 0)
            sub_2367C3440();
          v72 = v68 + 533;
          v30 = v29 - v26;
          if (v30 >> 2 > v23)
            v23 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v23;
          v32 = (char *)sub_2367CA1FC(v31);
          v33 = (_QWORD *)v24[532];
          v34 = (_QWORD *)v24[531];
          v35 = &v32[8 * v27];
          v37 = &v32[8 * v36];
          v71 = v37;
          bzero(v35, 8 * v28);
          v38 = &v35[8 * v28];
          *((_QWORD *)&v70 + 1) = v38;
          if (v33 != v34)
          {
            do
            {
              v39 = *--v33;
              *v33 = 0;
              *((_QWORD *)v35 - 1) = v39;
              v35 -= 8;
            }
            while (v33 != v34);
            v38 = (char *)*((_QWORD *)&v70 + 1);
            v37 = v71;
          }
          v40 = *(_OWORD *)(v24 + 531);
          v24[531] = (uint64_t)v35;
          v24[532] = (uint64_t)v38;
          v70 = v40;
          v41 = (char *)v24[533];
          v24[533] = (uint64_t)v37;
          v71 = v41;
          v69 = v40;
          sub_2368172B4((uint64_t)&v69);
        }
      }
      *(_DWORD *)(a1 + 448) = 0;
      sub_236816AE8(a1, v56);
    }
    sub_236816DCC((uint64_t)v52);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)&v53[i]);
    if (!v55)
    {
      for (j = 13; j != -2; j -= 5)
        sub_2367C2F38((uint64_t *)&v54[j]);
    }
  }
  v54[0] = (void **)&v65;
  sub_2367D077C(v54);
  v62 = &off_2507FFA18;
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  for (k = 25; k != 10; k -= 5)
    sub_2367C2F38(&v56[k]);
  if (v60 < 0)
    operator delete(v59);
  v46 = v56[0];
  v56[0] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  sub_236816DF8((uint64_t)v66);
  result = v67;
  v67 = 0;
  if (result)
  {
    v48 = sub_2367E9308(result);
    return MEMORY[0x23B7F8F48](v48, 0x10F2C40BD9CC6D3);
  }
  return result;
}

void sub_236816A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a23 + i));
  if (!a53)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a38 + j));
  }
  sub_2367EF354(&a54);
  sub_236816DF8((uint64_t)&STACK[0x328]);
  sub_2367E8C9C((uint64_t *)(v54 - 144), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_236816AE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = &off_2507FFCE8;
  v5 = a2[3];
  *(_QWORD *)(a1 + 30) = *(uint64_t *)((char *)a2 + 30);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_OWORD *)(a1 + 40) = v6;
  v7 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_OWORD *)(a1 + 64) = v7;
  a2[9] = 0;
  a2[10] = 0;
  a2[8] = 0;
  *(_QWORD *)(a1 + 88) = a2[11];
  sub_2367CA9E4(a1 + 96, (uint64_t)(a2 + 12));
  *(_QWORD *)(a1 + 216) = &off_2507FFA18;
  *(_WORD *)(a1 + 224) = *((_WORD *)a2 + 112);
  v8 = a2[29];
  *(_QWORD *)(a1 + 237) = *(uint64_t *)((char *)a2 + 237);
  *(_QWORD *)(a1 + 232) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
  *(_QWORD *)(a1 + 264) = a2[33];
  a2[31] = 0;
  a2[32] = 0;
  a2[33] = 0;
  v9 = *((_OWORD *)a2 + 17);
  v10 = *((_OWORD *)a2 + 18);
  v11 = *((_OWORD *)a2 + 19);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *(_OWORD *)(a1 + 288) = v10;
  *(_OWORD *)(a1 + 304) = v11;
  *(_OWORD *)(a1 + 272) = v9;
  *(_QWORD *)(a1 + 328) = &off_250800470;
  *(_QWORD *)(a1 + 336) = a2[42];
  *(_QWORD *)(a1 + 344) = &off_2507FFCC0;
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(_QWORD *)(a1 + 368) = &off_250800470;
  *(_QWORD *)(a1 + 376) = a2[47];
  *(_QWORD *)(a1 + 384) = &off_250800470;
  *(_QWORD *)(a1 + 392) = a2[49];
  *(_QWORD *)(a1 + 400) = &off_250800470;
  *(_QWORD *)(a1 + 408) = a2[51];
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  v12 = a2[55];
  *(_QWORD *)(a1 + 432) = a2[54];
  a2[52] = 0;
  a2[53] = 0;
  a2[54] = 0;
  *(_QWORD *)(a1 + 440) = v12;
  return a1;
}

uint64_t *sub_236816C34(uint64_t *a1)
{
  void *v2;
  uint64_t i;
  uint64_t v4;
  void **v6;

  if (!*((_DWORD *)a1 + 112))
  {
    v6 = (void **)(a1 + 52);
    sub_2367D077C(&v6);
    a1[27] = (uint64_t)&off_2507FFA18;
    v2 = (void *)a1[31];
    if (v2)
    {
      a1[32] = (uint64_t)v2;
      operator delete(v2);
    }
    for (i = 25; i != 10; i -= 5)
      sub_2367C2F38(&a1[i]);
    if (*((char *)a1 + 87) < 0)
      operator delete((void *)a1[8]);
    v4 = *a1;
    *a1 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sub_236816CD0(_QWORD *a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new();
  bzero(v2, 0x16F8uLL);
  result = sub_2367EE784((uint64_t)v2);
  *a1 = v2;
  return result;
}

void sub_236816D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7F8F48](v1, 0x10F2C40BD9CC6D3);
  _Unwind_Resume(a1);
}

void sub_236816D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int i;
  uint64_t v6[2];

  if ((_DWORD)a2)
  {
    v4 = a2;
    v6[0] = a3;
    v6[1] = a4;
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD, uint64_t *, uint64_t (*)(uint64_t *, unint64_t), void (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236817300, sub_2368173C4, 0, a2);
    }
    else if (!sub_236817300(v6, 1uLL))
    {
      for (i = 0; i != v4; ++i)
        sub_2368173C4((uint64_t)v6, i, 0);
    }
  }
}

void sub_236816DCC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    sub_236785C00(v2, *(void (**)(uint64_t, void *))(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_236816DF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  v2 = *(void **)(a1 + 1232);
  if (v2)
  {
    *(_QWORD *)(a1 + 1240) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1200);
  if (v3)
  {
    *(_QWORD *)(a1 + 1208) = v3;
    operator delete(v3);
  }
  v12 = (void **)(a1 + 1176);
  sub_2367C4718(&v12);
  v4 = *(void **)(a1 + 1152);
  if (v4)
  {
    *(_QWORD *)(a1 + 1160) = v4;
    operator delete(v4);
  }
  sub_236816F38(a1 + 512);
  v5 = *(void **)(a1 + 344);
  if (v5)
  {
    *(_QWORD *)(a1 + 352) = v5;
    operator delete(v5);
  }
  v12 = (void **)(a1 + 320);
  sub_2367D077C(&v12);
  v6 = *(void **)(a1 + 248);
  if (v6)
  {
    *(_QWORD *)(a1 + 256) = v6;
    operator delete(v6);
  }
  v12 = (void **)(a1 + 216);
  sub_236817010(&v12);
  v12 = (void **)(a1 + 192);
  sub_2367D17E4(&v12);
  v12 = (void **)(a1 + 168);
  sub_2367E8DB8(&v12);
  v12 = (void **)(a1 + 144);
  sub_2367D17E4(&v12);
  v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(_QWORD *)(a1 + 128) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
  }
  v12 = (void **)(a1 + 72);
  sub_236817090(&v12);
  v12 = (void **)(a1 + 48);
  sub_236817100(&v12);
  v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v9);
  }
  v10 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_236816F38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v13;

  v2 = *(void **)(a1 + 592);
  if (v2)
  {
    *(_QWORD *)(a1 + 600) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(_QWORD *)(a1 + 576) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 544);
  if (v4)
  {
    *(_QWORD *)(a1 + 552) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 520);
  if (v5)
  {
    *(_QWORD *)(a1 + 528) = v5;
    operator delete(v5);
  }
  v13 = (void **)(a1 + 496);
  sub_2367E9700(&v13);
  v6 = *(void **)(a1 + 464);
  if (v6)
  {
    *(_QWORD *)(a1 + 472) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 440);
  if (v7)
  {
    *(_QWORD *)(a1 + 448) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 416);
  if (v8)
  {
    *(_QWORD *)(a1 + 424) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 304);
  if (v9)
  {
    *(_QWORD *)(a1 + 312) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 224);
  if (v10)
  {
    *(_QWORD *)(a1 + 232) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_236817010(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_2368171F0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236817090(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 19;
        sub_2368171AC(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236817100(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_236817140((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void sub_236817140(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 11;
      v6 = v4 - 8;
      sub_2367D6C98(&v6);
      v6 = v5;
      sub_2367D6D24(&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_2368171AC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void sub_2368171F0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 5);
        if (v6)
        {
          *((_QWORD *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_236817268(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_2367C2F38((uint64_t *)(v1 + 24));
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

uint64_t sub_2368172B4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_236817268((uint64_t *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_236817300(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];

  v3 = *a1;
  v11 = sub_23688A310(*(_QWORD **)(**(_QWORD **)*a1 + 4488), a2, 0);
  if (!v11)
  {
    v12 = 0;
    if (is_mul_ok(a2, 0x5C0uLL))
    {
      v13 = (void *)sub_236785B78(1472 * a2, v4, v5, v6, v7, v8, v9, v10);
      v12 = v13;
      if (v13)
      {
        if (a2)
          bzero(v13, 1472 * a2);
      }
    }
    v14 = *(_QWORD *)(v3 + 8);
    memset(v17, 0, sizeof(v17));
    v15 = *(_QWORD *)v14;
    *(_QWORD *)v14 = v12;
    if (v15)
      sub_236785C00(v15, *(void (**)(uint64_t, void *))(v14 + 8), *(_QWORD *)(v14 + 16));
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    sub_236816DCC((uint64_t)v17);
  }
  if (v11)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_2368173C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t i;
  uint64_t v37;
  uint64_t j;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD v51[3];
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  _QWORD v56[35];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) == 0)
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (*(_DWORD *)(v6 + 452))
    {
      v7 = v6 + 416;
      v8 = **(_QWORD ***)(v3 + 16);
      v9 = (_QWORD *)v8[526];
      v10 = a2;
      v11 = v9[11];
      v12 = v9[17];
      v13 = v12 >> 3;
      v14 = (v12 >> 3) * (a2 / v11);
      v16 = v9[9];
      v15 = v9[10];
      *(_QWORD *)&v54 = (v12 >> 3) * (a2 % v11);
      *((_QWORD *)&v54 + 1) = v14;
      v17 = v16 - v54;
      if (v16 < (unint64_t)v54)
        v17 = 0;
      if ((unint64_t)v54 + (v12 >> 3) <= v16)
        v17 = v12 >> 3;
      v18 = v14 + (v12 >> 3);
      v19 = v15 >= v14;
      v20 = v15 - v14;
      if (!v19)
        v20 = 0;
      if (v18 <= v15)
        v21 = v13;
      else
        v21 = v20;
      v55 = v17;
      v56[0] = v21;
      sub_2367F17C4(v7, &v54, v8);
    }
    else
    {
      v10 = a2;
    }
    v22 = *(_QWORD **)(**(_QWORD **)(v3 + 16) + 4488);
    v51[1] = v10;
    v51[2] = a3;
    v51[0] = v22;
    (*(void (**)(__int128 *__return_ptr, _QWORD *, unint64_t, uint64_t))(*v22 + 24))(&v54, v22, v10, a3);
    v52 = v54;
    v53 = v55;
    v28 = **(_QWORD **)(v3 + 24);
    v29 = *(_QWORD *)(v3 + 8);
    v47 = **(_QWORD **)(v3 + 16);
    v30 = **(_QWORD **)(v3 + 32);
    *(_QWORD *)&v54 = off_2507FF880;
    *((_QWORD *)&v54 + 1) = v28 + 4224;
    v55 = 0;
    v56[33] = v29 + 208;
    v31 = *(_QWORD *)(v28 + 4232);
    v32 = *(_QWORD *)(v28 + 4224);
    v33 = (char *)v52;
    if (v31 != v32)
    {
      v34 = 0;
      v35 = v56;
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 8 * v34) + 16))(*(_QWORD *)(v32 + 8 * v34));
        for (i = 0; i != 3; ++i)
          v35[i] = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(**((_QWORD **)&v54 + 1) + 8 * v34)
                                                                                        + 24))(*(_QWORD *)(**((_QWORD **)&v54 + 1) + 8 * v34), i, v10, 0);
        ++v34;
        v32 = **((_QWORD **)&v54 + 1);
        v35 += 3;
      }
      while (v34 < (uint64_t)(*(_QWORD *)(*((_QWORD *)&v54 + 1) + 8) - **((_QWORD **)&v54 + 1)) >> 3);
    }
    v49 = v22;
    v50 = a3;
    if (!sub_2367D9E18(v30 + 1472 * a3, 0, 0x7FFFFFFLL, v23, v24, v25, v26, v27))
      sub_2367DC82C(v29, (uint64_t)&v54, (_QWORD *)(v30 + 1472 * a3), v47, v10, (uint64_t)v51, 0);
    v48 = (unsigned __int8 **)v3;
    v37 = *(unsigned int *)(*(_QWORD *)(v3 + 48) + 320);
    if ((_DWORD)v37)
    {
      for (j = 0; j != v37; ++j)
      {
        v39 = v33;
        v40 = &v33[40 * j];
        v41 = *((_QWORD *)v40 + 19);
        if (v41)
        {
          v42 = *((_QWORD *)v40 + 18);
          v43 = *((_QWORD *)v40 + 15);
          v44 = *(_QWORD *)(v43 + 16);
          v45 = *(_QWORD *)(v43 + 24) + 4 * *((_QWORD *)v40 + 16);
          v46 = v44 * *((_QWORD *)v40 + 17);
          do
          {
            if (v42)
              bzero((void *)(v45 + v46), 4 * v42);
            v46 += v44;
            --v41;
          }
          while (v41);
        }
        v33 = v39;
      }
    }
    ++*(_BYTE *)(v49[28] + v10);
    if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t))(*v49 + 32))(v49, v10, v50))
      atomic_store(1u, *v48);
    if (v33)
      operator delete(v33);
  }
}

void sub_23681768C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2368176B0(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  if ((uint64_t *)result != a2)
  {
    v7 = (uint64_t *)result;
    do
    {
      v8 = *v7;
      v9 = v7[1];
      v7 += 2;
      result = sub_236817700(v8, v9, a3, a4);
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t sub_236817700(uint64_t result, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __clz(a4 + 1) ^ 0x3F;
  if (((a4 + 1) & a4) != 0)
    v5 = v4 + 1;
  else
    v5 = v4;
  *(_QWORD *)(a3[3] + (*a3 >> 3)) = ((unint64_t)result << (*a3 & 7)) | *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
  v6 = *a3 + v5;
  *a3 = v6;
  if (result != a4)
  {
    v7 = __clz(result + 1) ^ 0x1F;
    if ((((_DWORD)result + 1) & result) != 0)
      v8 = v7 + 1;
    else
      v8 = v7;
    *(_QWORD *)(a3[3] + (v6 >> 3)) = ((unint64_t)a2 << (v6 & 7)) | *(unsigned __int8 *)(a3[3] + (v6 >> 3));
    v9 = *a3 + v8;
    *a3 = v9;
    v10 = result - a2 + 1;
    v11 = __clz(v10) ^ 0x1F;
    if ((v10 & ((_DWORD)result - (_DWORD)a2)) != 0)
      v12 = v11 + 1;
    else
      v12 = v11;
    *(_QWORD *)(a3[3] + (v9 >> 3)) = (HIDWORD(a2) << (v9 & 7)) | *(unsigned __int8 *)(a3[3] + (v9 >> 3));
    *a3 += v12;
  }
  return result;
}

unint64_t sub_2368177D4(int a1, int *a2, unint64_t a3, char a4, int a5, uint64_t a6, unint64_t *a7)
{
  size_t v8;
  int *v9;
  unint64_t v10;
  unsigned int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  void **v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  unint64_t i;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  int v66;
  BOOL v67;
  BOOL v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  signed int v72;
  signed int v73;
  unsigned int v74;
  unsigned int v75;
  signed int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _WORD *v83;
  uint64_t v84;
  _WORD *v85;
  __int16 v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int j;
  unsigned int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v107;
  char v108;
  unsigned int v109;
  unsigned int v110;
  int *v111;
  unint64_t *v112;
  uint64_t v113;
  _WORD *v114;
  unint64_t v115;
  void *__p;
  void *v118;
  uint64_t v119;
  int v120;
  void *v121;
  void *v122;
  uint64_t v123;
  char v124;
  void **v125;
  void *v126;
  __int128 v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];
  void **v133;
  uint64_t v134;
  _WORD *v135;
  uint64_t v136;

  v8 = a3;
  v9 = a2;
  v136 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    if (a3 < 2)
      return 0;
    sub_2367C3BE4(&v128, a3);
    v18 = 0;
    v19 = v128;
    do
    {
      v19[v18] = v9[v18];
      ++v18;
    }
    while (v8 != v18);
    sub_236818388(&v126, v8);
    sub_2367CA014(&v134, v8);
    if (a7)
    {
      v20 = *a7;
      sub_2368465B0((uint64_t)v128, v8, (unsigned __int8 *)v126, v134, a7);
      v10 = *a7 - v20;
    }
    else
    {
      v133 = 0;
      memset(v132, 0, sizeof(v132));
      v122 = (void *)(8 * v8 + 8);
      v123 = 0;
      v124 = 0;
      v121 = 0;
      sub_2367E8BBC(&v132[1], (8 * v8 + 15) >> 3);
      if (v132[3])
        v77 = (8 * v8 + 15) >> 3;
      else
        v77 = 0;
      v125 = v133;
      v132[1] = v77;
      v133 = &v121;
      sub_2368465B0((uint64_t)v128, v8, (unsigned __int8 *)v126, v134, v132);
      v131 = 0;
      sub_2367F1560((uint64_t)&v121, v132, &v131, &v130);
      v10 = v132[0];
      v78 = v132[3];
      v132[3] = 0;
      if (v78)
      {
        v79 = -*(_QWORD *)(v78 - 24);
        do
          v80 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v80 + v79, &qword_2564313D8));
        free(*(void **)(v78 - 32));
      }
    }
    v81 = 0;
    v82 = v126;
    v83 = (_WORD *)v134;
    if (v8 <= 1)
      v84 = 1;
    else
      v84 = v8;
    v85 = (_WORD *)(a6 + 42);
    do
    {
      v86 = v82[v81];
      if (v82[v81])
        v86 = v83[v81];
      *v85 = v86;
      *((_BYTE *)v85 - 2) = v82[v81++];
      v85 += 24;
    }
    while (v84 != v81);
    if (!v83 || (v135 = v83, operator delete(v83), (v82 = v126) != 0))
    {
      *(_QWORD *)&v127 = v82;
      operator delete(v82);
    }
    v87 = (unsigned __int8 *)(a6 + 40);
    do
    {
      v89 = *v9++;
      v88 = v89;
      v90 = *v87;
      v87 += 48;
      v10 += v88 * (uint64_t)v90;
      --v84;
    }
    while (v84);
    v91 = v128;
    if (v128)
    {
      v129 = v128;
      goto LABEL_140;
    }
    return v10;
  }
  LODWORD(v131) = 0;
  v12 = sub_2368183F8(a2, a3, (float *)&v131, a1);
  LODWORD(v130) = 0;
  v134 = 0;
  v135 = 0;
  v126 = 0;
  v127 = 0uLL;
  sub_236818530(&v126, v9, (uint64_t)&v9[v8], v8);
  v13 = (int *)v126;
  v14 = v127;
  if (v126 != (void *)v127)
  {
    v15 = 0;
    v16 = (int *)v126;
    do
    {
      v17 = *v16++;
      v15 += v17;
    }
    while (v16 != (int *)v127);
    if (!v15)
      *(_DWORD *)v126 = 4096;
  }
  v120 = 0;
  if (v12)
  {
    sub_2368185A8(v13, &v120, v8, v12 - 1, (int *)&v130, (int *)&v134);
  }
  else
  {
    sub_2367C331C(v132, v8);
    if (v13)
      operator delete(v13);
    v13 = (int *)v132[0];
    v126 = (void *)v132[0];
    v127 = *(_OWORD *)&v132[1];
    v14 = v132[1];
  }
  v118 = 0;
  v119 = 0;
  __p = 0;
  sub_2367CBEFC(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
  sub_2367C3524((_DWORD **)&__p, a4, (uint64_t)v132);
  v21 = a6;
  v109 = v12;
  v110 = v12 - 1;
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v22 = 0;
  v23 = (int *)v126;
  v108 = 12 - a4;
  v107 = -1 << (12 - a4);
  if (v8 <= 1)
    v24 = 1;
  else
    v24 = v8;
  v114 = (_WORD *)(a6 + 48 * v8);
  v115 = v8;
  v111 = (int *)v126;
  v112 = a7;
  v113 = v24;
  do
  {
    if (v22 == v8)
    {
      LODWORD(v25) = 4096;
      *v114 = 4096;
LABEL_27:
      v26 = ((unint64_t)(unsigned __int16)v25 + 0xFFFFFFFFFFFLL) / (unsigned __int16)v25;
      goto LABEL_28;
    }
    LODWORD(v25) = v23[v22];
    *(_WORD *)(v21 + 48 * v22) = v25;
    if ((_DWORD)v25)
      goto LABEL_27;
    v26 = 1;
LABEL_28:
    v27 = v21 + 48 * v22;
    v30 = *(_QWORD *)(v27 + 8);
    v29 = (char **)(v27 + 8);
    v28 = v30;
    v29[3] = (char *)v26;
    v25 = (int)v25;
    v31 = (void **)(v29 + 1);
    v32 = v29[1];
    v33 = (uint64_t)&v32[-v30] >> 1;
    if ((int)v25 <= v33)
    {
      if ((int)v25 < v33)
        *v31 = (void *)(v28 + 2 * (int)v25);
    }
    else
    {
      v34 = (int)v25 - v33;
      v35 = v21 + 48 * v22;
      v38 = *(_QWORD *)(v35 + 24);
      v37 = (_QWORD *)(v35 + 24);
      v36 = v38;
      if (v34 <= (v38 - (uint64_t)v32) >> 1)
      {
        bzero(v29[1], 2 * v34);
        *v31 = &v32[2 * v34];
        v8 = v115;
        v21 = a6;
        v24 = v113;
      }
      else
      {
        if ((v25 & 0x80000000) != 0)
          sub_2367C3440();
        v39 = v36 - v28;
        if (v39 > (int)v25)
          v25 = v39;
        if (v39 >= 0x7FFFFFFFFFFFFFFELL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v25;
        v41 = (char *)sub_2367CA09C(v40);
        v43 = v42;
        v44 = (char *)*v31;
        v45 = *v29;
        v46 = &v41[2 * v33];
        bzero(v46, 2 * v34);
        v47 = v46;
        while (v44 != v45)
        {
          v48 = *((_WORD *)v44 - 1);
          v44 -= 2;
          *((_WORD *)v47 - 1) = v48;
          v47 -= 2;
        }
        *v29 = v47;
        *v31 = &v46[2 * v34];
        *v37 = &v41[2 * v43];
        v23 = v111;
        a7 = v112;
        v8 = v115;
        v21 = a6;
        v24 = v113;
        if (v45)
          operator delete(v45);
      }
    }
    ++v22;
  }
  while (v22 != v24);
  for (i = 0; i != 4096; ++i)
  {
    v50 = i >> v108;
    v51 = i & ~v107;
    v52 = v132[i >> v108];
    v53 = BYTE1(v52);
    v54 = WORD2(v52);
    if (v132[i >> v108] <= v51)
      v50 = v53;
    else
      v54 = 0;
    *(_WORD *)(*(_QWORD *)(v21 + 48 * v50 + 8) + 2 * (v54 + v51)) = i;
  }
  if (!a7)
    goto LABEL_138;
  if (!v109)
  {
    *(_QWORD *)(a7[3] + (*a7 >> 3)) = *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
    v60 = *a7 + 1;
    *a7 = v60;
    *(_QWORD *)(a7[3] + (v60 >> 3)) = (1 << (v60 & 7)) | *(unsigned __int8 *)(a7[3] + (v60 >> 3));
    ++*a7;
    sub_23681898C((int)v8 - 1, a7);
    goto LABEL_138;
  }
  v55 = (int)v130;
  v56 = *a7 >> 3;
  v57 = a7[3];
  if ((int)v130 > 2)
  {
    v61 = v120;
    *(_QWORD *)(v57 + v56) = *(unsigned __int8 *)(v57 + v56);
    v62 = *a7 + 1;
    *a7 = v62;
    *(_QWORD *)(a7[3] + (v62 >> 3)) = *(unsigned __int8 *)(a7[3] + (v62 >> 3));
    ++*a7;
    LODWORD(v128) = 0;
    sub_236818A38(&v121, v8, &v128);
    if ((int)v8 >= 2)
    {
      v63 = 0;
      v64 = 0;
      v65 = v121;
      do
      {
        v66 = v63 - v64 + 1;
        if (v61 - 1 == v63
          || (v23[v63 + 1] == v23[v64] ? (v67 = v115 - 2 == v63) : (v67 = 1),
              v67 || (v66 <= 254 ? (v68 = (v61 + 1) - 1 == v63) : (v68 = 1), v68)))
        {
          v65[v64] = v66;
          v64 = v63 + 2;
        }
        ++v63;
      }
      while (v115 - 1 != v63);
    }
    sub_2367CBE88(&v128, v115);
    v69 = v128;
    if ((int)v115 < 1)
    {
      v72 = 0;
      v71 = 0;
    }
    else
    {
      v70 = 0;
      v71 = 0;
      v72 = 0;
      do
      {
        if (v61 == v70)
        {
          v71 = v61 + 1;
        }
        else
        {
          v73 = v23[v70];
          if (v73 >= 1)
          {
            v74 = __clz(v73);
            v75 = 32 - v74;
            v69[v70] = 32 - v74;
            v71 = v70 + 1;
            if (v72 > (int)(32 - v74))
              v75 = v72;
            v76 = 33 - v74;
            if (v72 <= v76)
              v72 = v76;
            if (v70 >= v61)
              v72 = v75;
          }
        }
        ++v70;
      }
      while (v115 != v70);
    }
    v69[v61] = v72;
    v93 = __clz(v109) ^ 0x1F;
    v94 = ~(-1 << v93);
    *(_QWORD *)(a7[3] + (*a7 >> 3)) = (v94 << (*a7 & 7)) | *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
    v95 = *a7 + v93;
    *a7 = v95;
    if ((_DWORD)v93 != 3)
    {
      *(_QWORD *)(a7[3] + (v95 >> 3)) = *(unsigned __int8 *)(a7[3] + (v95 >> 3));
      v95 = *a7 + 1;
      *a7 = v95;
    }
    *(_QWORD *)(a7[3] + (v95 >> 3)) = ((unint64_t)(v109 & v94) << (v95 & 7)) | *(unsigned __int8 *)(a7[3] + (v95 >> 3));
    *a7 += v93;
    if (v71 >= 259)
    {
      sub_23681898C(0xFFuLL, a7);
    }
    else
    {
      sub_23681898C(v71 - 3, a7);
      if (v71 < 1)
        goto LABEL_134;
    }
    v96 = 0;
    while (v96 > 0)
    {
      v97 = (v96 - 1);
      v98 = *a7;
      if (*((_DWORD *)v121 + v97) < 5u)
        goto LABEL_122;
      *(_QWORD *)(a7[3] + (v98 >> 3)) = (65 << (v98 & 7)) | *(unsigned __int8 *)(a7[3] + (v98 >> 3));
      *a7 += 7;
      sub_23681898C(*((unsigned int *)v121 + v97) - 5, a7);
      v96 = v96 + *((_DWORD *)v121 + v97) - 2;
LABEL_123:
      if (++v96 >= v71)
      {
        for (j = 0; j < v71; ++j)
        {
          if (j < 1 || (v102 = *((_DWORD *)v121 + (j - 1)), v102 < 5))
          {
            if (j != (_DWORD)v61)
            {
              v103 = *((_DWORD *)v128 + j);
              if (v103 >= 2)
              {
                v104 = v103 - 1;
                if ((int)(v110 - ((13 - v103) >> 1)) < v103 - 1)
                  v104 = v110 - ((13 - v103) >> 1);
                v105 = v104 & ~(v104 >> 31);
                *(_QWORD *)(a7[3] + (*a7 >> 3)) = ((uint64_t)((v23[j] >> (v103 + ~(_BYTE)v105)) + (-1 << v105)) << (*a7 & 7)) | *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
                *a7 += v105;
              }
            }
          }
          else
          {
            j = j + v102 - 2;
          }
        }
LABEL_134:
        if (v128)
        {
          v129 = v128;
          operator delete(v128);
        }
        if (v121)
        {
          v122 = v121;
          operator delete(v121);
        }
        goto LABEL_138;
      }
    }
    v98 = *a7;
LABEL_122:
    v99 = *((int *)v128 + v96);
    v100 = byte_236921C00[v99];
    *(_QWORD *)(a7[3] + (v98 >> 3)) = ((unint64_t)byte_236921C0E[v99] << (v98 & 7)) | *(unsigned __int8 *)(a7[3] + (v98 >> 3));
    *a7 += v100;
    goto LABEL_123;
  }
  *(_QWORD *)(v57 + v56) = (1 << (*a7 & 7)) | *(unsigned __int8 *)(v57 + v56);
  v58 = *a7 + 1;
  *a7 = v58;
  if (!(_DWORD)v55)
  {
    *(_QWORD *)(a7[3] + (v58 >> 3)) = *(unsigned __int8 *)(a7[3] + (v58 >> 3));
    v92 = *a7 + 1;
    *a7 = v92;
    *(_QWORD *)(a7[3] + (v92 >> 3)) = *(unsigned __int8 *)(a7[3] + (v92 >> 3));
    ++*a7;
    goto LABEL_138;
  }
  *(_QWORD *)(a7[3] + (v58 >> 3)) = ((v55 - 1) << (v58 & 7)) | *(unsigned __int8 *)(a7[3] + (v58 >> 3));
  ++*a7;
  if ((int)v55 >= 1)
  {
    v59 = 0;
    do
    {
      sub_23681898C(*(int *)((char *)&v134 + v59), a7);
      v59 += 4;
    }
    while (4 * v55 != v59);
    if ((_DWORD)v55 == 2)
    {
      *(_QWORD *)(a7[3] + (*a7 >> 3)) = ((uint64_t)v23[(int)v134] << (*a7 & 7)) | *(unsigned __int8 *)(a7[3] + (*a7 >> 3));
      *a7 += 12;
      v10 = (unint64_t)*(float *)&v131;
      goto LABEL_139;
    }
  }
LABEL_138:
  v10 = (unint64_t)*(float *)&v131;
  if (v23)
  {
LABEL_139:
    v91 = v23;
LABEL_140:
    operator delete(v91);
  }
  return v10;
}

void sub_2368182A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;
  unint64_t v41;
  void *v42;

  if (a38)
  {
    v40 = -*(_QWORD *)(a38 - 24);
    do
      v41 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v41 + v40, &qword_2564313D8));
    free(*(void **)(a38 - 32));
  }
  v42 = *(void **)(v38 - 128);
  if (v42)
  {
    *(_QWORD *)(v38 - 120) = v42;
    operator delete(v42);
  }
  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_236818388(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C9FD8(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_2368183DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2368183F8(int *a1, unint64_t a2, float *a3, int a4)
{
  float v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  unsigned int i;
  float v14;
  float v15;
  float v16;
  float v17;

  sub_236818AB8(a1, a2, 0);
  v9 = v8;
  if (a4)
  {
    if (a4 == 2)
    {
      LODWORD(v10) = 0;
      for (i = 1; ; ++i)
      {
        sub_236818AB8(a1, a2, i);
        if (v14 >= v9)
        {
          v10 = v10;
        }
        else
        {
          v9 = v14;
          v10 = i;
        }
        if (i == 13)
          break;
      }
    }
    else if (a4 == 1)
    {
      LODWORD(v10) = 0;
      v11 = -2;
      do
      {
        sub_236818AB8(a1, a2, v11 + 3);
        if (v12 >= v9)
        {
          v10 = v10;
        }
        else
        {
          v9 = v12;
          v10 = v11 + 3;
        }
        v11 += 2;
      }
      while (v11 < 0xB);
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    sub_236818AB8(a1, a2, 1u);
    LODWORD(v10) = v15 < v9;
    if (v15 < v9)
      v9 = v15;
    sub_236818AB8(a1, a2, 7u);
    if (v16 >= v9)
    {
      v10 = v10;
    }
    else
    {
      v9 = v16;
      v10 = 7;
    }
    sub_236818AB8(a1, a2, 0xDu);
    if (v17 < v9)
    {
      v10 = 13;
      v9 = v17;
    }
  }
  *a3 = v9;
  return v10;
}

_QWORD *sub_236818530(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367C3404(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23681858C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2368185A8(int *a1, _DWORD *a2, int a3, int a4, int *a5, int *a6)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  int *v16;
  float *v17;
  int v18;
  int v19;
  float v20;
  float *v21;
  int *v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  int v27;
  float v28;
  int v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  signed int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  int v39;
  signed int v40;
  int v41;
  float v42;
  float *v43;
  int *v44;
  uint64_t v45;
  float v46;
  uint64_t v48;
  int v49;
  float v50;
  int v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  signed int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  signed int v61;
  float *v62;
  float *v63;

  if (a3 <= 0)
  {
    *a5 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = a1[v9];
      if ((int)v13 <= 0)
      {
        ++v9;
      }
      else
      {
        if (v12 <= 3)
          a6[v12] = v9;
        ++v12;
        v11 = ++v9;
      }
      v10 += v13;
    }
    while (v9 != a3);
    *a5 = v12;
    if (v12)
    {
      if (v12 == 1)
      {
        a1[*a6] = 4096;
      }
      else if (v12 <= 4096)
      {
        sub_236803F00(&v62, v11);
        v14 = v62;
        if (v63 != v62)
        {
          v15 = v63 - v62;
          if (v15 <= 1)
            v15 = 1;
          v16 = a1;
          v17 = v62;
          do
          {
            v18 = *v16++;
            *v17++ = (float)(4096.0 / (float)v10) * (float)v18;
            --v15;
          }
          while (v15);
        }
        if (v11 < 1)
        {
          v19 = 0;
          v27 = 0;
        }
        else
        {
          v19 = 0;
          v20 = 0.0;
          v21 = v14;
          v22 = a1;
          v23 = v11;
          do
          {
            v24 = *v21;
            if (*v21 > 0.0 && v24 < 1.0)
            {
              *v22 = 1;
              v20 = v20 + v24;
              ++v19;
            }
            ++v22;
            ++v21;
            --v23;
          }
          while (v23);
          v26 = 0;
          v27 = 0;
          v28 = (float)(4096 - v19) / (float)(4096.0 - v20);
          v29 = -1;
          do
          {
            v30 = v14[v26];
            if (v30 >= 1.0)
            {
              v31 = (int)(float)(v28 * v30);
              if (v31 <= 1)
                v31 = 1;
              if (v31 == 4096)
                v32 = 4095;
              else
                v32 = v31;
              v33 = __clz(v32) ^ 0x1F;
              v34 = a4 - ((12 - v33) >> 1);
              if (v34 >= v33)
                v34 = v33;
              v35 = v34 & ~(v34 >> 31);
              v36 = v33 < v35;
              v37 = 1 << (v33 - v35);
              if (v36)
                v37 = 1;
              v38 = v32 & -v37;
              a1[v26] = v38;
              if (!v38
                || (v37 >= 0 ? (v39 = v37) : (v39 = v37 + 1),
                    (int)(v38 + (v39 >> 1)) <= (int)v30 && (v37 += v38, v37 <= 4095)))
              {
                a1[v26] = v37;
                v38 = v37;
              }
              v19 += v38;
              v40 = __clz(v38) ^ 0x1F;
              if (v29 < v40)
                v27 = v26;
              if (v29 <= v40)
                v29 = v40;
            }
            ++v26;
          }
          while (v11 != v26);
        }
        a1[v27] = a1[v27] - v19 + 4096;
        *a2 = v27;
        if (a1[v27] <= 0)
        {
          if (v11 < 1)
          {
            v41 = 0;
            v49 = 0;
          }
          else
          {
            v41 = 0;
            v42 = 0.0;
            v43 = v14;
            v44 = a1;
            v45 = v11;
            do
            {
              v46 = *v43;
              if (*v43 > 0.0 && v46 < 1.0)
              {
                *v44 = 1;
                v42 = v42 + v46;
                ++v41;
              }
              ++v44;
              ++v43;
              --v45;
            }
            while (v45);
            v48 = 0;
            v49 = 0;
            v50 = (float)(4096 - v41) / (float)(4096.0 - v42);
            v51 = -1;
            do
            {
              v52 = v14[v48];
              if (v52 >= 1.0)
              {
                v42 = v42 + v52;
                v53 = (int)(float)(v50 * v52);
                if (v53 <= 1)
                  v53 = 1;
                if (v53 == 4096)
                  v54 = 4095;
                else
                  v54 = v53;
                v55 = __clz(v54) ^ 0x1F;
                v56 = a4 - ((12 - v55) >> 1);
                if (v56 >= v55)
                  v56 = v55;
                v57 = v56 & ~(v56 >> 31);
                v36 = v55 < v57;
                v58 = 1 << (v55 - v57);
                if (v36)
                  v58 = 1;
                v59 = v54 & -v58;
                a1[v48] = v59;
                if (!v59
                  || (v58 >= 0 ? (v60 = v58) : (v60 = v58 + 1),
                      (int)v42 - v41 >= (int)(v59 + (v60 >> 1)) && (v58 += v59, v58 <= 4095)))
                {
                  a1[v48] = v58;
                  v59 = v58;
                }
                v41 += v59;
                v61 = __clz(v59) ^ 0x1F;
                if (v51 < v61)
                  v49 = v48;
                if (v51 <= v61)
                  v51 = v61;
              }
              ++v48;
            }
            while (v11 != v48);
          }
          a1[v49] = a1[v49] - v41 + 4096;
          *a2 = v49;
        }
        if (v14)
        {
          v63 = v14;
          operator delete(v14);
        }
      }
    }
  }
}

unint64_t sub_23681898C(unint64_t result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *a2 >> 3;
  v3 = a2[3];
  if (result)
  {
    *(_QWORD *)(v3 + v2) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(v3 + v2);
    v4 = *a2 + 1;
    *a2 = v4;
    v5 = __clz(result) ^ 0x3F;
    *(_QWORD *)(a2[3] + (v4 >> 3)) = (v5 << (v4 & 7)) | *(unsigned __int8 *)(a2[3] + (v4 >> 3));
    v6 = *a2 + 3;
    *a2 = v6;
    *(_QWORD *)(a2[3] + (v6 >> 3)) = (((-1 << v5) + result) << (v6 & 7)) | *(unsigned __int8 *)(a2[3] + (v6 >> 3));
  }
  else
  {
    *(_QWORD *)(v3 + v2) = *(unsigned __int8 *)(v3 + v2);
    v5 = 1;
  }
  *a2 += v5;
  return result;
}

_QWORD *sub_236818A38(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C3404(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_236818A9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_236818AB8(int *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  int *v4;
  unsigned int v6;
  int *v7;
  int32x2_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  int v16;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  int v25;
  BOOL v27;
  int *v28;
  uint64_t v29;
  int v30;
  signed int v31;
  signed int v32;
  unsigned int v33;
  unsigned int v34;
  signed int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  int i;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int32x2_t v51;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int *v59;
  float v60;
  int v61;
  int v62;
  int32x2_t v63;
  int32x2_t v64;
  float32x2_t v65;
  uint64_t v66;
  int *v67[3];
  void *__p[3];
  void *v69[3];
  _QWORD v70[3];

  v3 = a2;
  v4 = a1;
  v70[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    memset(v67, 0, sizeof(v67));
    sub_236818530(v67, a1, (uint64_t)&a1[a2], a2);
    v6 = a3 - 1;
    v66 = 0;
    v70[0] = 0;
    v70[1] = 0;
    v7 = v67[0];
    sub_2368185A8(v67[0], (_DWORD *)&v66 + 1, v3, a3 - 1, (int *)&v66, (int *)v70);
    if ((int)v66 <= 2)
    {
      if ((_DWORD)v66)
      {
        if ((int)v66 >= 1)
        {
          v9 = (int *)v70;
          v10 = 2;
          v11 = v66;
          do
          {
            v12 = *v9++;
            v13 = v10 - __clz(v12) + 67;
            if ((_DWORD)v12)
              v10 = v13;
            else
              ++v10;
            --v11;
          }
          while (v11);
          if (!v3)
            goto LABEL_85;
LABEL_79:
          v51 = vdup_n_s32(0xC0D55555);
          __asm { FMOV            V3.2S, #-1.0 }
          v53 = (float32x2_t)vdup_n_s32(0x3F3E11C7u);
          v54 = (float32x2_t)vdup_n_s32(0x3FB6E02Bu);
          v55 = (float32x2_t)vdup_n_s32(0x3E32458Cu);
          v56 = (float32x2_t)vdup_n_s32(0x3F813CEDu);
          v57 = (float32x2_t)vdup_n_s32(0xB5F85AB0);
          v58 = (float32x2_t)vdup_n_s32(0x3F7D8625u);
          v59 = v7;
          v60 = 0.0;
          do
          {
            v62 = *v4++;
            v61 = v62;
            if (v62 >= 1)
            {
              *(float *)v8.i32 = (float)*v59;
              v63 = vdup_lane_s32(v8, 0);
              v64 = vadd_s32(v63, v51);
              v65 = vadd_f32((float32x2_t)vsub_s32(v63, (int32x2_t)vand_s8((int8x8_t)v64, (int8x8_t)0x7F0000007FLL)), _D3);
              v8 = (int32x2_t)vadd_f32(vdiv_f32(vmla_f32(v57, v65, vmla_f32(v54, v53, v65)), vmla_f32(v58, v65, vmla_f32(v56, v55, v65))), vcvt_f32_s32(vshr_n_s32(v64, 0x17uLL)));
              v60 = v60 + (float)((float)v61 * fmaxf(12.0 - *(float *)v8.i32, 0.0));
            }
            ++v59;
            --v3;
          }
          while (v3);
          goto LABEL_85;
        }
        if (v3)
          goto LABEL_79;
      }
      else if (v3)
      {
        goto LABEL_79;
      }
LABEL_85:
      if (v7)
        operator delete(v7);
      return;
    }
    v21 = SHIDWORD(v66);
    LODWORD(__p[0]) = 0;
    sub_236818A38(v69, (int)v3, __p);
    if ((int)v3 >= 2)
    {
      v22 = 0;
      v23 = 0;
      v24 = v69[0];
      do
      {
        v25 = v22 - v23 + 1;
        if (v21 - 1 == v22
          || (v7[v22 + 1] == v7[v23] ? (_ZF = v3 - 2 == v22) : (_ZF = 1),
              _ZF || (v25 <= 254 ? (v27 = (v21 + 1) - 1 == v22) : (v27 = 1), v27)))
        {
          v24[v23] = v25;
          v23 = v22 + 2;
        }
        ++v22;
      }
      while (v3 - 1 != v22);
    }
    sub_2367CBE88(__p, (int)v3);
    v28 = (int *)__p[0];
    if ((int)v3 < 1)
    {
      v31 = 0;
      v30 = 0;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      do
      {
        if (v21 == v29)
        {
          v30 = v21 + 1;
        }
        else
        {
          v32 = v7[v29];
          if (v32 >= 1)
          {
            v33 = __clz(v32);
            v34 = 32 - v33;
            v28[v29] = 32 - v33;
            v30 = v29 + 1;
            if (v31 > (int)(32 - v33))
              v34 = v31;
            v35 = 33 - v33;
            if (v31 <= v35)
              v31 = v35;
            if (v29 >= v21)
              v31 = v34;
          }
        }
        ++v29;
      }
      while (v3 != v29);
    }
    v28[v21] = v31;
    v36 = __clz(a3) ^ 0x1F;
    v37 = 2 * v36;
    _ZF = v36 == 3;
    v38 = 2;
    if (!_ZF)
      v38 = 3;
    v39 = v38 + v37;
    if (v30 >= 259)
    {
      v41 = v39 + 11;
    }
    else
    {
      v40 = v39 - __clz(v30 - 3) + 67;
      if (v30 == 3)
        v41 = v39 + 1;
      else
        v41 = v40;
      if (v30 < 1)
        goto LABEL_75;
    }
    v42 = 0;
    v43 = v69[0];
    do
    {
      if (v42 < 1 || (v44 = *((unsigned int *)v69[0] + (v42 - 1)), v44 < 5))
      {
        v41 += byte_236921C00[v28[v42]];
      }
      else
      {
        v45 = v41 - __clz(v44 - 5) + 74;
        if (v44 == 5)
          v41 += 8;
        else
          v41 = v45;
        v42 = v42 + v44 - 2;
      }
      ++v42;
    }
    while (v42 < v30);
    for (i = 0; i < v30; ++i)
    {
      if (i < 1 || (v47 = *((_DWORD *)v69[0] + (i - 1)), v47 < 5))
      {
        if (i != (_DWORD)v21)
        {
          v48 = v28[i];
          if (v48 >= 2)
          {
            v49 = v48 - 1;
            v50 = v6 - ((13 - v48) >> 1);
            if (v50 >= v49)
              v50 = v49;
            v41 += v50 & ~(v50 >> 31);
          }
        }
      }
      else
      {
        i = i + v47 - 2;
      }
    }
    if (!v28)
    {
LABEL_76:
      if (v43)
      {
        v69[1] = v43;
        operator delete(v43);
      }
      if (!v3)
        goto LABEL_85;
      goto LABEL_79;
    }
LABEL_75:
    __p[1] = v28;
    operator delete(v28);
    v43 = v69[0];
    goto LABEL_76;
  }
  v14 = 0.0;
  if (a2)
  {
    v15 = a2;
    do
    {
      v16 = *v4++;
      v14 = v14 + (float)v16;
      --v15;
    }
    while (v15);
  }
  __asm { FMOV            V4.2S, #-1.0 }
}

void sub_23681901C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

unint64_t sub_236819058(unint64_t result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *a2 >> 3;
  v3 = a2[3];
  if (result)
  {
    *(_QWORD *)(v3 + v2) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(v3 + v2);
    v4 = *a2 + 1;
    *a2 = v4;
    v5 = __clz(result) ^ 0x3F;
    *(_QWORD *)(a2[3] + (v4 >> 3)) = (v5 << (v4 & 7)) | *(unsigned __int8 *)(a2[3] + (v4 >> 3));
    v6 = *a2 + 4;
    *a2 = v6;
    *(_QWORD *)(a2[3] + (v6 >> 3)) = (((-1 << v5) + result) << (v6 & 7)) | *(unsigned __int8 *)(a2[3] + (v6 >> 3));
  }
  else
  {
    *(_QWORD *)(v3 + v2) = *(unsigned __int8 *)(v3 + v2);
    v5 = 1;
  }
  *a2 += v5;
  return result;
}

char *sub_236819104(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int **v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int **v22;
  uint64_t v23;
  int **v24;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  void *v28;
  float *v29;
  uint64_t v30;
  float *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  void **v41;
  int *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  int *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  float v64;
  float v65;
  BOOL v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  char *v82;
  _DWORD *v83;
  uint64_t *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  unsigned int *v95;
  char *v96;
  char *v97;
  unsigned int *v98;
  uint64_t v99;
  char *v100;
  _DWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  double v113;
  int **v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  float *v122;
  uint64_t v123;
  float *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  BOOL v132;
  unsigned int v133;
  void **v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  float *v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  float *v154;
  float *v155;
  float v156;
  float v157;
  char *v158;
  _BYTE *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v178;
  int v179;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  unsigned int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  void *v196;
  float *v197;
  uint64_t v198;
  char *v199;
  float *v200;
  unsigned int v201;
  float v202;
  int v203;
  float v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  float v209;
  float v210;
  int v211;
  BOOL v212;
  BOOL v213;
  _BOOL4 v214;
  _BOOL4 v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void **v220;
  _QWORD *v221;
  char *v222;
  unsigned int v223;
  unsigned int v224;
  _DWORD *v225;
  _DWORD *v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  _DWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  unint64_t v261;
  unint64_t v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  int v271;
  char v272;
  int v273;
  unsigned int v274;
  char v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  _DWORD *v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  uint64_t *v288;
  int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t i;
  unint64_t j;
  char v300;
  uint64_t v301;
  float *v302;
  unint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  _OWORD *v321;
  unint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned __int16 **v328;
  int v329;
  unsigned __int16 *v330;
  uint64_t v331;
  unint64_t v332;
  unsigned int *v333;
  unsigned int v334;
  int32x4_t **v335;
  int32x4_t **v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  _OWORD *v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  int32x4_t **v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  float *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  float v381;
  int32x4_t **v382;
  uint64_t v383;
  float *v384;
  BOOL v385;
  char *v386;
  float v387;
  float *v388;
  float v389;
  unint64_t v390;
  unint64_t v391;
  _DWORD *v392;
  uint64_t v393;
  float *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  float v398;
  unint64_t v399;
  _DWORD *v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  float v405;
  int32x4_t **v406;
  uint64_t v407;
  float v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  uint64_t v416;
  int32x4_t **v417;
  int *v418;
  unint64_t v419;
  uint64_t v420;
  _DWORD *v421;
  _DWORD *v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  float *v426;
  float *v427;
  uint64_t v428;
  unint64_t v429;
  unsigned int v430;
  int32x4_t **v431;
  unsigned int v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  void *v436;
  float v437;
  int v438;
  uint64_t v439;
  float *v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  char *v446;
  char *v447;
  char *v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int64_t v456;
  _OWORD *v457;
  float *v458;
  uint64_t v459;
  uint64_t v460;
  float *v461;
  unsigned int v462;
  unsigned int v463;
  int v464;
  BOOL v465;
  int32x4_t **v467;
  int *v468;
  unint64_t v469;
  uint64_t v470;
  _DWORD *v471;
  _DWORD *v472;
  _DWORD *v473;
  int32x4_t **v474;
  uint64_t v475;
  unsigned int v476;
  void *v477;
  float v478;
  unsigned int v479;
  unsigned int v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  char *v486;
  char *v487;
  char *v488;
  float *v489;
  int32x4_t **v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  _DWORD *v497;
  _DWORD *v498;
  _DWORD *v499;
  unsigned int *v500;
  unint64_t v501;
  uint64_t v502;
  _QWORD *v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  int *v507;
  int *v508;
  int *v509;
  int v510;
  char *v511;
  void **v512;
  void **v513;
  void **v514;
  int v515;
  void **v516;
  char *v517;
  char *v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  int *v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  double *v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t *v534;
  _QWORD *v535;
  unint64_t v536;
  int *v537;
  int v538;
  unsigned int v539;
  int v540;
  int v541;
  int32x4_t **v542;
  int32x4_t **v543;
  int32x4_t **k;
  int **v545;
  int v546;
  int *v547;
  unsigned int *v548;
  unint64_t v549;
  uint64_t v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  int v554;
  unint64_t v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  float v562;
  unint64_t v563;
  float v564;
  int **v565;
  int *v566;
  unint64_t v567;
  float v568;
  float *v569;
  _DWORD *v570;
  int32x4_t **v571;
  int **v572;
  int **v573;
  unint64_t v574;
  int *v575;
  unsigned int *v576;
  unint64_t v577;
  uint64_t v578;
  _DWORD *v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  int v583;
  unsigned int v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t *v589;
  uint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  char *v593;
  _QWORD *v594;
  uint64_t v595;
  unint64_t v596;
  int v597;
  unsigned int v598;
  uint64_t v599;
  unint64_t v600;
  unint64_t v601;
  int32x4_t **v602;
  char *v603;
  unint64_t v604;
  uint64_t v605;
  int v606;
  unsigned int v607;
  unint64_t v608;
  uint64_t *v609;
  unint64_t v610;
  _QWORD *v611;
  _QWORD *v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  _QWORD *v618;
  unint64_t *v619;
  uint64_t *v620;
  unint64_t v621;
  unint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  _OWORD *v629;
  unint64_t v630;
  _DWORD *v632;
  uint64_t v633;
  unint64_t v634;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v641;
  uint64_t v642;
  float *v644;
  _QWORD *v645;
  unint64_t v646;
  uint64_t v648;
  int v649;
  int32x4_t **v650;
  int v651;
  char *v652;
  int v653;
  int v654;
  void *v655;
  uint64_t v656;
  float *v657;
  int *v658;
  unint64_t v659;
  unint64_t *v660;
  uint64_t v661;
  unsigned int v662;
  int v663;
  int v664;
  unint64_t v665;
  int v666;
  unint64_t v667;
  unint64_t v668;
  float *v669;
  void **v670;
  _BOOL4 v671;
  void **v672;
  uint64_t v673;
  unint64_t v674;
  char *__p;
  char __pa;
  unint64_t __pb;
  int **__pc;
  uint64_t v680;
  _BYTE *v681;
  uint64_t *v683;
  uint64_t v685;
  uint64_t v686;
  int **v687[2];
  unint64_t v688;
  __int128 v689;
  uint64_t v690;
  void *v691[2];
  __int128 v692;
  void *v693;
  void *v694;
  int32x4_t **v695;
  int32x4_t **v696;
  unint64_t v697;
  void *v698;
  _BYTE *v699;
  uint64_t v700;
  void *v701;
  _BYTE *v702;
  uint64_t v703;
  void *v704;
  char *v705;
  void *__src[2];
  __int128 v707;
  void *v708[2];
  __int128 v709;
  _OWORD v710[2];
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  _OWORD v719[3];
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  uint64_t v731;

  v8 = a8;
  v9 = a4;
  v10 = (uint64_t *)a3;
  v11 = a1;
  v731 = *MEMORY[0x24BDAC8D0];
  v632 = a4 + 7;
  a4[12] = a2;
  v689 = 0uLL;
  v690 = 0;
  if (*(_BYTE *)(a1 + 49))
    *((_BYTE *)a4 + 64) = 0;
  v12 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
    v13 = 512;
  else
    v13 = 224;
  *((_DWORD *)a4 + 17) = v13;
  v14 = *(_DWORD *)(a1 + 8);
  if (v14)
  {
    if (v14 == 2)
    {
      sub_23681D338(a1, a2, a3, (uint64_t)v632, (uint64_t)&v689);
    }
    else if (v14 == 1)
    {
      sub_23681CCB4((uint64_t)__src, a2, v12 != 0, (int ***)a3, v632);
      sub_23681D030((uint64_t)&v689, 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
      v691[0] = 0;
      v691[1] = 0;
      *(_QWORD *)&v692 = 0;
      v15 = (int **)*v10;
      if (v10[1] == *v10)
      {
        v18 = 0.0;
        v113 = 0.0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v18 = 0.0;
        do
        {
          v19 = *(_QWORD *)(v11 + 16);
          v659 = v16;
          if (v17 >= (*(_QWORD *)(v11 + 24) - v19) >> 3)
            v20 = 0;
          else
            v20 = *(_QWORD *)(v19 + 8 * v17);
          v665 = v17;
          v21 = 3 * v17;
          v22 = &v15[3 * v17];
          v23 = v689;
          v24 = v22 + 1;
          v25 = (char *)v22[1] - (char *)*v22;
          sub_23681D238((char **)v691, (v25 >> 3) + 1);
          v26 = *v22;
          v27 = ((char *)v22[1] - (char *)*v22) >> 3;
          if (v22[1] != *v22)
          {
            v28 = __src[0];
            v29 = (float *)__src[1];
            if (v27 <= 1)
              v30 = 1;
            else
              v30 = ((char *)*v24 - (char *)*v22) >> 3;
            v31 = (float *)((char *)v691[0] + 4);
            v32 = (unsigned int *)(v26 + 1);
            v33 = (unsigned int *)(v26 + 1);
            do
            {
              v35 = *v33;
              v33 += 2;
              v34 = v35;
              v36 = __clz(v35);
              v37 = 29 - v36;
              v38 = (((-1 << (v36 ^ 0x1F)) + v35) >> (29 - v36)) - 4 * v36 + 124;
              v39 = v35 >= 0x10;
              if (v35 >= 0x10)
                v40 = v37;
              else
                v40 = 0;
              if (v39)
                v34 = v38;
              *v31 = (float)(v29[(_QWORD)v28 * ((unint64_t)*(v32 - 1) >> 1) + v34] + (float)v40) + *(v31 - 1);
              ++v31;
              v32 = v33;
              --v30;
            }
            while (v30);
          }
          v41 = (void **)(v23 + 8 * v21);
          sub_2368069B0(v41, v27);
          v656 = v25;
          v42 = *v22;
          if (*v24 != *v22)
          {
            v43 = 0;
            v44 = ((char *)*v24 - (char *)*v22) >> 3;
            v671 = v20 != 0;
            v45 = v23 + 24 * v665;
            v46 = (void **)(v45 + 8);
            v47 = (_QWORD *)(v45 + 16);
            do
            {
              if (!v43)
                goto LABEL_38;
              v66 = v44 > v43;
              v48 = v44 - v43;
              if (!v66)
                goto LABEL_38;
              v49 = 0;
              v50 = &v42[2 * v43 + 1];
              while (1)
              {
                v51 = *v50;
                v50 += 2;
                if (v51 != v42[2 * v43 - 1])
                  break;
                if (v48 == ++v49)
                {
                  v49 = v48;
                  break;
                }
              }
              if (v49)
              {
                v52 = *((unsigned int *)a4 + 18);
                v53 = v49 - v52;
                if (v49 >= v52)
                {
                  v62 = __clz(v53 + 1) ^ 0x3F;
                  if (((v53 + 1) & v53) != 0)
                    v63 = v62 + 1;
                  else
                    v63 = v62;
                  v54 = v63 + 1;
                }
                else
                {
                  v54 = 0;
                }
                v64 = *((float *)v691[0] + v49 + v43) - *((float *)v691[0] + v43);
                v65 = (float)v54;
                v66 = v49 >= v52 && v64 > v65;
                if (v66)
                {
                  v81 = v42[2 * v43];
                  v82 = (char *)*v46;
                  if ((unint64_t)*v46 >= *v47)
                  {
                    v89 = (v82 - (_BYTE *)*v41) >> 3;
                    v90 = v89 + 1;
                    v84 = a4;
                    if ((unint64_t)(v89 + 1) >> 61)
                      sub_2367C3440();
                    v91 = *v47 - (_QWORD)*v41;
                    if (v91 >> 2 > v90)
                      v90 = v91 >> 2;
                    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
                      v92 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v92 = v90;
                    v93 = (char *)sub_2367CA1FC(v92);
                    v95 = (unsigned int *)&v93[8 * v89];
                    *v95 = v81 & 0xFFFFFFFE;
                    v95[1] = v53;
                    v96 = (char *)*v46;
                    v97 = (char *)*v41;
                    v98 = v95;
                    if (*v46 == *v41)
                    {
                      v24 = v22 + 1;
                    }
                    else
                    {
                      v24 = v22 + 1;
                      do
                      {
                        v99 = *((_QWORD *)v96 - 1);
                        v96 -= 8;
                        *((_QWORD *)v98 - 1) = v99;
                        v98 -= 2;
                      }
                      while (v96 != v97);
                      v96 = (char *)*v41;
                    }
                    *v41 = v98;
                    v83 = v95 + 2;
                    *v46 = v95 + 2;
                    *v47 = &v93[8 * v94];
                    if (v96)
                      operator delete(v96);
                  }
                  else
                  {
                    *(_DWORD *)v82 = v81 & 0xFFFFFFFE;
                    *((_DWORD *)v82 + 1) = v53;
                    v83 = v82 + 8;
                    v84 = a4;
                    v24 = v22 + 1;
                  }
                  *v46 = v83;
                  *(v83 - 2) |= 1u;
                  v100 = (char *)*v46;
                  if ((unint64_t)*v46 >= *v47)
                  {
                    v102 = (v100 - (_BYTE *)*v41) >> 3;
                    v103 = v102 + 1;
                    if ((unint64_t)(v102 + 1) >> 61)
                      sub_2367C3440();
                    v104 = *v47 - (_QWORD)*v41;
                    if (v104 >> 2 > v103)
                      v103 = v104 >> 2;
                    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
                      v105 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v105 = v103;
                    v106 = (char *)sub_2367CA1FC(v105);
                    v108 = &v106[8 * v102];
                    *(_DWORD *)v108 = 2 * *((_DWORD *)v84 + 24);
                    *((_DWORD *)v108 + 1) = v671;
                    v109 = (char *)*v46;
                    v110 = (char *)*v41;
                    v111 = v108;
                    if (*v46 == *v41)
                    {
                      v80 = v43 - 1;
                    }
                    else
                    {
                      v80 = v43 - 1;
                      do
                      {
                        v112 = *((_QWORD *)v109 - 1);
                        v109 -= 8;
                        *((_QWORD *)v111 - 1) = v112;
                        v111 -= 8;
                      }
                      while (v109 != v110);
                      v109 = (char *)*v41;
                    }
                    *v41 = v111;
                    v101 = v108 + 8;
                    *v46 = v108 + 8;
                    *v47 = &v106[8 * v107];
                    if (v109)
                      operator delete(v109);
                  }
                  else
                  {
                    *(_DWORD *)v100 = 2 * *((_DWORD *)v84 + 24);
                    *((_DWORD *)v100 + 1) = v671;
                    v101 = v100 + 8;
                    v80 = v43 - 1;
                  }
                  *v46 = v101;
                  v18 = v18 + (float)(v64 - v65);
                }
                else
                {
                  v67 = 0;
                  v68 = (char *)*v46;
                  do
                  {
                    v69 = v67 + v43;
                    v70 = *v22;
                    if ((unint64_t)v68 >= *v47)
                    {
                      v71 = (v68 - (_BYTE *)*v41) >> 3;
                      if ((unint64_t)(v71 + 1) >> 61)
                        sub_2367C3440();
                      v72 = *v47 - (_QWORD)*v41;
                      v73 = v72 >> 2;
                      if (v72 >> 2 <= (unint64_t)(v71 + 1))
                        v73 = v71 + 1;
                      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                        v74 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v74 = v73;
                      if (v74)
                        v74 = (unint64_t)sub_2367CA1FC(v74);
                      else
                        v75 = 0;
                      v76 = (char *)(v74 + 8 * v71);
                      *(_QWORD *)v76 = *(_QWORD *)&v70[2 * v69];
                      v68 = v76 + 8;
                      v77 = (char *)*v46;
                      v78 = (char *)*v41;
                      if (*v46 != *v41)
                      {
                        do
                        {
                          v79 = *((_QWORD *)v77 - 1);
                          v77 -= 8;
                          *((_QWORD *)v76 - 1) = v79;
                          v76 -= 8;
                        }
                        while (v77 != v78);
                        v77 = (char *)*v41;
                      }
                      *v41 = v76;
                      *v46 = v68;
                      *v47 = v74 + 8 * v75;
                      if (v77)
                        operator delete(v77);
                    }
                    else
                    {
                      *(_QWORD *)v68 = *(_QWORD *)&v70[2 * v69];
                      v68 += 8;
                    }
                    *v46 = v68;
                    ++v67;
                  }
                  while (v67 != v49);
                  v24 = v22 + 1;
                  v80 = v43 - 1;
                }
                v43 = v49 + v80;
              }
              else
              {
LABEL_38:
                v55 = (char *)*v46;
                if ((unint64_t)*v46 >= *v47)
                {
                  v57 = (v55 - (_BYTE *)*v41) >> 3;
                  if ((unint64_t)(v57 + 1) >> 61)
                    sub_2367C3440();
                  v58 = *v47 - (_QWORD)*v41;
                  v59 = v58 >> 2;
                  if (v58 >> 2 <= (unint64_t)(v57 + 1))
                    v59 = v57 + 1;
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                    v60 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v60 = v59;
                  if (v60)
                    v60 = (unint64_t)sub_2367CA1FC(v60);
                  else
                    v61 = 0;
                  v85 = (_QWORD *)(v60 + 8 * v57);
                  *v85 = *(_QWORD *)&v42[2 * v43];
                  v56 = v85 + 1;
                  v86 = (char *)*v46;
                  v87 = (char *)*v41;
                  if (*v46 != *v41)
                  {
                    do
                    {
                      v88 = *((_QWORD *)v86 - 1);
                      v86 -= 8;
                      *--v85 = v88;
                    }
                    while (v86 != v87);
                    v86 = (char *)*v41;
                  }
                  *v41 = v85;
                  *v46 = v56;
                  *v47 = v60 + 8 * v61;
                  if (v86)
                    operator delete(v86);
                }
                else
                {
                  *(_QWORD *)v55 = *(_QWORD *)&v42[2 * v43];
                  v56 = v55 + 8;
                }
                *v46 = v56;
              }
              ++v43;
              v42 = *v22;
              v44 = ((char *)*v24 - (char *)*v22) >> 3;
            }
            while (v43 < v44);
          }
          v16 = v659 + (v656 >> 3);
          v17 = v665 + 1;
          v10 = (uint64_t *)a3;
          v15 = *(int ***)a3;
          v8 = a8;
          v9 = a4;
          v11 = a1;
        }
        while (v665 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
        v113 = (double)v16;
      }
      if (v113 * 0.2 + 16.0 < v18)
        *((_BYTE *)v9 + 64) = 1;
      if (v691[0])
        operator delete(v691[0]);
      if (v708[0])
      {
        v708[1] = v708[0];
        operator delete(v708[0]);
      }
      if (__src[1])
      {
        *(void **)&v707 = __src[1];
        operator delete(__src[1]);
      }
    }
    else
    {
      v687[0] = 0;
      v687[1] = 0;
      v688 = 0;
      sub_23681D338(a1, a2, a3, (uint64_t)v632, (uint64_t)v687);
      if (*((_BYTE *)v9 + 64))
      {
        sub_23681CCB4((uint64_t)v691, a2 + 1, *(unsigned __int8 *)(v11 + 48), v687, v632);
        sub_23681D030((uint64_t)&v689, 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
        v701 = 0;
        v702 = 0;
        v703 = 0;
        v698 = 0;
        v699 = 0;
        v700 = 0;
        v114 = (int **)*v10;
        if (v10[1] != *v10)
        {
          v115 = 0;
          do
          {
            v116 = *(_QWORD *)(v11 + 16);
            if (v115 >= (*(_QWORD *)(v11 + 24) - v116) >> 3)
              v641 = 0;
            else
              v641 = *(_QWORD *)(v116 + 8 * v115);
            v117 = (unint64_t *)&v114[3 * v115];
            v118 = v689;
            sub_23681D238((char **)&v701, ((uint64_t)(v117[1] - *v117) >> 3) + 1);
            v645 = v117 + 1;
            v119 = *v117;
            v120 = (uint64_t)(v117[1] - *v117) >> 3;
            if (v117[1] != *v117)
            {
              v121 = v691[0];
              v122 = (float *)v691[1];
              if (v120 <= 1)
                v123 = 1;
              else
                v123 = (uint64_t)(v117[1] - *v117) >> 3;
              v124 = (float *)((char *)v701 + 4);
              v125 = (unsigned int *)(v119 + 4);
              v126 = (unsigned int *)(v119 + 4);
              do
              {
                v128 = *v126;
                v126 += 2;
                v127 = v128;
                v129 = __clz(v128);
                v130 = 29 - v129;
                v131 = (((-1 << (v129 ^ 0x1F)) + v128) >> (29 - v129)) - 4 * v129 + 124;
                v132 = v128 >= 0x10;
                if (v128 >= 0x10)
                  v133 = v130;
                else
                  v133 = 0;
                if (v132)
                  v127 = v131;
                *v124 = (float)(v122[(_QWORD)v121 * ((unint64_t)*(v125 - 1) >> 1) + v127] + (float)v133)
                      + *(v124 - 1);
                ++v124;
                v125 = v126;
                --v123;
              }
              while (v123);
            }
            v134 = (void **)(v118 + 24 * v115);
            sub_2368069B0(v134, v120);
            v135 = (uint64_t)(*v645 - *v117) >> 3;
            v136 = 0x100000;
            if (v135 < 0x100000)
              v136 = (uint64_t)(*v645 - *v117) >> 3;
            v137 = 1;
            do
            {
              v138 = v137;
              v137 *= 2;
            }
            while (v138 < v136);
            v680 = *((unsigned int *)v9 + 18);
            sub_23681DBD0((uint64_t)__src, *v117, v135, v138, v680, v135, v641);
            v139 = *v645;
            v140 = *v117;
            v141 = (uint64_t)(*v645 - *v117) >> 3;
            v142 = v141 + 1;
            v633 = v118;
            v634 = v115;
            if (v141 == -1)
            {
              v143 = 0;
              v144 = -1;
              v145 = v680;
            }
            else
            {
              if (v142 >> 60)
                sub_2367C3440();
              v146 = (char *)operator new(16 * v142);
              v143 = v146;
              v147 = v146;
              v145 = v680;
              do
              {
                *(_QWORD *)v147 = 0;
                *((_QWORD *)v147 + 1) = 0x7F7FFFFF00000000;
                v147 += 16;
              }
              while (v147 != &v146[16 * v142]);
              v139 = *v645;
              v140 = *v117;
              v144 = (uint64_t)(*v645 - *v117) >> 3;
            }
            v672 = v134;
            __p = v143;
            *((_DWORD *)v143 + 3) = 0;
            v660 = v117;
            if (v139 != v140)
            {
              v148 = 0;
              v149 = 0;
              v642 = 0;
              v150 = (float *)v701;
              v639 = -(uint64_t)v145;
              v151 = (uint64_t)&v143[16 * v145 + 12];
              v638 = 4 * v145;
              v152 = v117 + 1;
              v644 = (float *)v701;
              do
              {
                v153 = v148;
                sub_23681E23C((unint64_t *)__src, v148);
                v154 = (float *)&__p[16 * v153];
                v156 = v154[3];
                v155 = v154 + 3;
                v148 = v153 + 1;
                v157 = (float)(v156 + v150[v153 + 1]) - v150[v153];
                v158 = &__p[16 * v153 + 16];
                if (*((float *)v158 + 3) > v157)
                {
                  *(_QWORD *)v158 = 1;
                  *((_DWORD *)v158 + 2) = *(_DWORD *)(*v117 + 8 * v153) >> 1;
                  *((float *)v158 + 3) = v157;
                }
                if (v149)
                {
                  --v149;
                  LODWORD(v145) = v680;
                }
                else
                {
                  v159 = v698;
                  v699 = v698;
                  v145 = v680;
                  if ((void *)(v153 + 2) >= __src[0])
                    v666 = 0;
                  else
                    v666 = ((*((_DWORD *)__src[1] + v148) << SLOBYTE(v708[1])) ^ *((_DWORD *)__src[1] + v153) ^ (*((_DWORD *)__src[1] + v153 + 2) << (2 * LOBYTE(v708[1])))) & HIDWORD(v708[0]);
                  v657 = (float *)v151;
                  v160 = v718 & v153;
                  v161 = *(_DWORD *)(*((_QWORD *)&v710[0] + 1) + 4 * (v718 & v153));
                  if (SLODWORD(__src[0]) >= LODWORD(v719[0]) + (int)v153)
                    v162 = LODWORD(v719[0]) + v153;
                  else
                    v162 = (int)__src[0];
                  v163 = v160 - v161;
                  if (v160 < v161)
                    v164 = v718 + 1;
                  else
                    v164 = 0;
                  v165 = v164 + v163;
                  if (((v164 + v163) & 0x80000000) != 0)
                  {
                    v183 = v698;
                  }
                  else
                  {
                    v166 = 0;
                    v167 = 0;
                    v653 = v162 + ~(_DWORD)v153;
                    if ((int)v153 + LODWORD(v719[0]) >= SLODWORD(__src[0]))
                      v168 = (int)__src[0];
                    else
                      v168 = v153 + LODWORD(v719[0]);
                    v651 = v168;
                    v169 = v164 + v163;
                    v649 = v162;
                    do
                    {
                      if (v165 < 1)
                      {
                        LODWORD(v176) = 0;
                      }
                      else
                      {
                        v170 = v153 - v169;
                        v171 = v153;
                        if (v717 >= 4)
                        {
                          v172 = v717 - 1;
                          if (*(_DWORD *)(*((_QWORD *)&v715 + 1) + 4 * v161) < (int)v717 - 1)
                            v172 = *(_DWORD *)(*((_QWORD *)&v715 + 1) + 4 * v161);
                          if (v172 + (int)v153 >= v162)
                            v172 = v653;
                          v171 = v172 + v153;
                          v170 += v172;
                        }
                        if (v171 < v162)
                        {
                          v173 = v171;
                          v174 = v651 - v171;
                          v175 = 4 * v170;
                          while (*((_DWORD *)__src[1] + v173) == *(_DWORD *)((char *)__src[1] + v175))
                          {
                            ++v173;
                            v175 += 4;
                            if (!--v174)
                            {
                              v171 = v162;
                              goto LABEL_180;
                            }
                          }
                          v171 = v173;
                        }
LABEL_180:
                        v176 = (v171 - v153);
                        if (*((_QWORD *)&v718 + 1) <= v176 && (int)v176 + 2 >= v166)
                        {
                          v178 = sub_23681E37C((_QWORD *)v719 + 1, v165);
                          if (v178)
                            v179 = *((_DWORD *)v178 + 5);
                          else
                            v179 = v720 + v165 - 1;
                          v145 = v680;
                          if (v176 >= (v699 - v159) >> 2)
                          {
                            LODWORD(v695) = v179;
                            sub_2367CBAC8((char **)&v698, v176 + 1, &v695);
                            v159 = v698;
                            v145 = v680;
                          }
                          if (v179 < (unint64_t)*(unsigned int *)&v159[4 * v176])
                            *(_DWORD *)&v159[4 * v176] = v179;
                          if (v176 > v166)
                            v166 = v176;
                          v162 = v649;
                        }
                      }
                      if (++v167 >= DWORD2(v720))
                        break;
                      if (v717 >= 3 && v176 > v717)
                      {
                        v182 = *(unsigned int *)(v714 + 4 * v161);
                        if (v161 == (_DWORD)v182)
                          break;
                        v161 = *(_DWORD *)(v714 + 4 * v161);
                        if (*(_DWORD *)(*((_QWORD *)&v715 + 1) + 4 * v182) != (_DWORD)v717)
                          break;
                      }
                      else
                      {
                        v181 = *(unsigned int *)(*((_QWORD *)&v710[0] + 1) + 4 * v161);
                        if (v161 == (_DWORD)v181)
                          break;
                        v161 = *(_DWORD *)(*((_QWORD *)&v710[0] + 1) + 4 * v161);
                        if (*(_DWORD *)(v711 + 4 * v181) != v666)
                          break;
                      }
                      v169 = v160 - v161;
                      if (v160 < v161)
                        v169 += v718 + 1;
                      v66 = v165 <= v169;
                      v165 = v169;
                    }
                    while (v66);
                    v183 = v699;
                    v11 = a1;
                  }
                  v184 = v183 - v159;
                  v185 = (v183 - v159) >> 2;
                  v117 = v660;
                  if (v185 <= v145)
                  {
                    v149 = 0;
                  }
                  else
                  {
                    v186 = v185 - 1;
                    if (v185 - 1 >= v145)
                    {
                      v187 = *((unsigned int *)v183 - 1);
                      do
                      {
                        if (v187 >= *(unsigned int *)&v159[4 * v186])
                          v187 = *(unsigned int *)&v159[4 * v186];
                        *(_DWORD *)&v159[4 * v186--] = v187;
                      }
                      while (v186 >= v145);
                    }
                    v188 = 0;
                    v189 = (_DWORD *)(*v660 + 8 * v153);
                    v191 = *((_DWORD *)a4 + 19);
                    v190 = *((_DWORD *)a4 + 20);
                    v192 = *((_DWORD *)a4 + 21);
                    v193 = *((_DWORD *)a4 + 22);
                    v194 = v193 + v192;
                    v195 = *((_DWORD *)a4 + 17);
                    v196 = v691[0];
                    v197 = (float *)v691[1];
                    v198 = a4[12] * (uint64_t)v691[0];
                    v199 = &v159[v638];
                    v200 = v657;
                    do
                    {
                      v201 = __clz(v188) ^ 0x1F;
                      v202 = (float)(v201 - v194);
                      if (v190 <= v188)
                      {
                        v203 = ((v201 - v191) << v194)
                             + v190
                             + ((v188 + (-1 << v201)) & ~(-1 << v193))
                             + ((v188 + (-1 << v201)) >> (v201 - v192) << v193);
                      }
                      else
                      {
                        v202 = 0.0;
                        v203 = v188;
                      }
                      v204 = v202
                           + v197[(v203 + v195)
                                + (_QWORD)v196 * ((unint64_t)*v189 >> 1)];
                      v205 = *(_DWORD *)&v199[4 * v188];
                      v206 = __clz(v205);
                      v207 = 29 - v206;
                      v208 = (((-1 << (v206 ^ 0x1F)) + v205) >> (29 - v206)) - 4 * v206 + 124;
                      v209 = (float)v207;
                      if (v205 < 0x10)
                        v209 = 0.0;
                      else
                        v205 = v208;
                      v210 = *v155 + (float)(v204 + (float)(v209 + v197[v198 + v205]));
                      if (*v200 > v210)
                      {
                        *((_DWORD *)v200 - 3) = v145 + v188;
                        *((_DWORD *)v200 - 2) = *(_DWORD *)&v199[4 * v188] + 1;
                        *((_DWORD *)v200 - 1) = *v189 >> 1;
                        *v200 = v210;
                      }
                      ++v188;
                      v200 += 4;
                    }
                    while (v639 + v185 != v188);
                    v211 = *((_DWORD *)v183 - 1);
                    v212 = v211 == 1;
                    if (v641)
                    {
                      v213 = 0;
                    }
                    else
                    {
                      v212 = 0;
                      v213 = v211 == 0;
                    }
                    if (v213 || v212)
                    {
                      v214 = (unint64_t)(v642 + 1) > 7;
                      v215 = v184 > 0x24;
                      v216 = v185 - 10;
                      if (v214 && v215)
                        v217 = 0;
                      else
                        v217 = v642 + 1;
                      v642 = v217;
                      if (v214 && v215)
                        v149 = v216;
                      else
                        v149 = 0;
                    }
                    else
                    {
                      v642 = 0;
                      v149 = 0;
                    }
                    v117 = v660;
                  }
                  v150 = v644;
                  v152 = v645;
                  v148 = v153 + 1;
                  v151 = (uint64_t)v657;
                }
                v218 = *v152 - *v117;
                v151 += 16;
              }
              while (v148 < v218 >> 3);
              v144 = v218 >> 3;
              v8 = a8;
              v9 = a4;
            }
            if (v144)
            {
              v219 = v633 + 24 * v634;
              v220 = (void **)(v219 + 8);
              v221 = (_QWORD *)(v219 + 16);
              do
              {
                v222 = &__p[16 * v144];
                v223 = *((_DWORD *)v222 + 1);
                if (v223)
                {
                  v224 = v223 - 1;
                  v225 = *v220;
                  if ((unint64_t)*v220 >= *v221)
                  {
                    v228 = ((char *)v225 - (_BYTE *)*v672) >> 3;
                    v229 = v228 + 1;
                    if ((unint64_t)(v228 + 1) >> 61)
                      sub_2367C3440();
                    v230 = *v221 - (_QWORD)*v672;
                    if (v230 >> 2 > v229)
                      v229 = v230 >> 2;
                    if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8)
                      v231 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v231 = v229;
                    v232 = (char *)sub_2367CA1FC(v231);
                    v234 = &v232[8 * v228];
                    *(_DWORD *)v234 = 2 * *((_DWORD *)v9 + 24);
                    *((_DWORD *)v234 + 1) = v224;
                    v235 = (char *)*v220;
                    v236 = (char *)*v672;
                    v237 = v234;
                    if (*v220 != *v672)
                    {
                      do
                      {
                        v238 = *((_QWORD *)v235 - 1);
                        v235 -= 8;
                        *((_QWORD *)v237 - 1) = v238;
                        v237 -= 8;
                      }
                      while (v235 != v236);
                      v235 = (char *)*v672;
                    }
                    *v672 = v237;
                    v226 = v234 + 8;
                    *v220 = v234 + 8;
                    *v221 = &v232[8 * v233];
                    if (v235)
                      operator delete(v235);
                    LODWORD(v145) = v680;
                  }
                  else
                  {
                    *v225 = 2 * *((_DWORD *)v9 + 24);
                    v225[1] = v224;
                    v226 = v225 + 2;
                  }
                  *v220 = v226;
                  v227 = *(_DWORD *)v222 - v145;
                }
                else
                {
                  v227 = *(_DWORD *)(*v660 + 8 * v144 - 4);
                  v226 = *v220;
                }
                v239 = &__p[16 * v144 + 8];
                if ((unint64_t)v226 >= *v221)
                {
                  v241 = ((char *)v226 - (_BYTE *)*v672) >> 3;
                  if ((unint64_t)(v241 + 1) >> 61)
                    sub_2367C3440();
                  v242 = *v221 - (_QWORD)*v672;
                  v243 = v242 >> 2;
                  if (v242 >> 2 <= (unint64_t)(v241 + 1))
                    v243 = v241 + 1;
                  if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8)
                    v244 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v244 = v243;
                  v245 = (char *)sub_2367CA1FC(v244);
                  v247 = &v245[8 * v241];
                  *(_DWORD *)v247 = 2 * *(_DWORD *)v239;
                  *((_DWORD *)v247 + 1) = v227;
                  v248 = (char *)*v220;
                  v249 = (char *)*v672;
                  v250 = v247;
                  if (*v220 == *v672)
                  {
                    v11 = a1;
                  }
                  else
                  {
                    v11 = a1;
                    do
                    {
                      v251 = *((_QWORD *)v248 - 1);
                      v248 -= 8;
                      *((_QWORD *)v250 - 1) = v251;
                      v250 -= 8;
                    }
                    while (v248 != v249);
                    v248 = (char *)*v672;
                  }
                  *v672 = v250;
                  v240 = v247 + 8;
                  *v220 = v247 + 8;
                  *v221 = &v245[8 * v246];
                  if (v248)
                    operator delete(v248);
                  LODWORD(v145) = v680;
                }
                else
                {
                  *v226 = 2 * *(_DWORD *)v239;
                  v226[1] = v227;
                  v240 = v226 + 2;
                  v11 = a1;
                }
                *v220 = v240;
                *(v240 - 2) = *(v240 - 2) & 0xFFFFFFFE | (v223 != 0);
                v144 -= *(unsigned int *)v222;
              }
              while (v144);
            }
            v252 = (unint64_t)*v672;
            v253 = *(char **)(v633 + 24 * v634 + 8);
            v254 = v253 - 8;
            if (*v672 != v253 && (unint64_t)v254 > v252)
            {
              v256 = v252 + 8;
              do
              {
                v257 = *(_QWORD *)(v256 - 8);
                *(_QWORD *)(v256 - 8) = *(_QWORD *)v254;
                *(_QWORD *)v254 = v257;
                v254 -= 8;
                v39 = v256 >= (unint64_t)v254;
                v256 += 8;
              }
              while (!v39);
            }
            v10 = (uint64_t *)a3;
            if (__p)
              operator delete(__p);
            sub_23681E430(__src);
            v115 = v634 + 1;
            v114 = *(int ***)a3;
          }
          while (v634 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
          if (v698)
            operator delete(v698);
        }
        if (v701)
          operator delete(v701);
        if (v693)
        {
          v694 = v693;
          operator delete(v693);
        }
        if (v691[1])
        {
          *(void **)&v692 = v691[1];
          operator delete(v691[1]);
        }
      }
      __src[0] = v687;
      sub_2367D17E4((void ***)__src);
    }
  }
  v258 = 128;
  if (a2 < 0x80)
    v258 = a2;
  sub_2367F1484((uint64_t)v687, a6, 96 * v258 + 40 * a2 + 128);
  if (!a6)
  {
    v691[0] = 0;
    sub_2367F1ECC((uint64_t)v632, __src, v691);
    v260 = (char *)v691[0];
    v681 = v9 + 8;
    if (*((_BYTE *)v9 + 64))
    {
      __src[0] = 0;
      sub_23681E4C8(*(uint64_t *)((char *)v9 + 76), *(uint64_t *)((char *)v9 + 84), (unint64_t *)__src, 8);
      v261 = (unint64_t)__src[0];
      goto LABEL_315;
    }
LABEL_319:
    v262 = a2;
    goto LABEL_320;
  }
  sub_2368ACEB0((uint64_t)v632, a6, a7, v8);
  v681 = v9 + 8;
  if (!*((_BYTE *)v9 + 64))
  {
    v260 = 0;
    goto LABEL_319;
  }
  v259 = *a6;
  sub_236817700(*(uint64_t *)((char *)v9 + 76), *(uint64_t *)((char *)v9 + 84), a6, 8);
  v260 = 0;
  v10 = (uint64_t *)a3;
  v261 = *a6 - v259;
LABEL_315:
  v260 += v261;
  v262 = a2 + 1;
  if (*v10)
  {
    sub_2367D1824(v10);
    operator delete((void *)*v10);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
  }
  *(_OWORD *)v10 = v689;
  v10[2] = v690;
  v690 = 0;
  v689 = 0uLL;
LABEL_320:
  sub_23681E528(&v685, v262);
  v271 = *(_DWORD *)(v11 + 4);
  v652 = v260;
  if (v271 == 1)
  {
    v275 = 0;
    v272 = 0;
    v273 = 0;
    v274 = 1;
  }
  else if (v271 == 3)
  {
    v272 = 0;
    v273 = 2;
    v274 = 4;
    v275 = 1;
  }
  else
  {
    v275 = 0;
    v273 = 4;
    v274 = 16;
    v272 = 2;
  }
  v637 = v262;
  v276 = *v10;
  v673 = v10[1];
  if (*v10 != v673)
  {
    v277 = 0;
    __pa = v272 | v275;
    v278 = ~(-1 << v275);
    while (1)
    {
      v280 = *(_DWORD **)v276;
      v279 = *(_DWORD **)(v276 + 8);
      if (*v681)
        break;
      if (v637 == 1)
      {
        while (v280 != v279)
        {
          v290 = v280[1];
          v291 = __clz(v290);
          v292 = (((v291 ^ 0x1F) - v273) << __pa)
               + v274
               + (((-1 << (v291 ^ 0x1F)) + v290) & v278)
               + (((-1 << (v291 ^ 0x1F)) + v290) >> ((v291 ^ 0x1F) - v272) << v275);
          if (v274 <= v290)
            v290 = v292;
          sub_23681E5B0(v685, (int)v290);
          v280 += 2;
          ++v277;
        }
      }
      else
      {
        while (v280 != v279)
        {
          v293 = v280[1];
          v294 = __clz(v293);
          v295 = (((v294 ^ 0x1F) - v273) << __pa)
               + v274
               + (((-1 << (v294 ^ 0x1F)) + v293) & v278)
               + (((-1 << (v294 ^ 0x1F)) + v293) >> ((v294 ^ 0x1F) - v272) << v275);
          if (v274 <= v293)
            v293 = v295;
          sub_23681E5B0(v685 + 40 * (*v280 >> 1), (int)v293);
          v280 += 2;
          ++v277;
        }
      }
LABEL_348:
      v276 += 24;
      if (v276 == v673)
        goto LABEL_351;
    }
    while (1)
    {
      if (v280 == v279)
        goto LABEL_348;
      v281 = v280[1];
      if ((*v280 & 1) != 0)
      {
        v288 = a4;
        v286 = *((_DWORD *)a4 + 20);
        if (v286 > v281)
          goto LABEL_337;
        v282 = __clz(v281) ^ 0x1F;
        v283 = v282 - *((_DWORD *)a4 + 19);
        v285 = *((_DWORD *)a4 + 21);
        v287 = *((_DWORD *)a4 + 22);
        v284 = ~(-1 << v287);
      }
      else
      {
        if (v274 > v281)
          goto LABEL_335;
        v282 = __clz(v281) ^ 0x1F;
        v283 = v282 - v273;
        v284 = ~(-1 << v275);
        LOBYTE(v285) = v272;
        v286 = v274;
        LOBYTE(v287) = v275;
      }
      v281 = (v283 << (v287 + v285))
           + v286
           + (((-1 << v282) + v281) & v284)
           + (((-1 << v282) + v281) >> (v282 - v285) << v287);
      if ((*v280 & 1) == 0)
      {
LABEL_335:
        v289 = 0;
        goto LABEL_338;
      }
      v288 = a4;
LABEL_337:
      v289 = *((_DWORD *)v288 + 17);
LABEL_338:
      sub_23681E5B0(v685 + 40 * (*v280 >> 1), (int)(v289 + v281));
      v280 += 2;
      ++v277;
    }
  }
  v277 = 0;
LABEL_351:
  v296 = a1;
  v297 = v637;
  if (*(_BYTE *)(a1 + 51) && v637)
  {
    for (i = 0; i != v637; ++i)
    {
      for (j = 0; j != 256; ++j)
        sub_23681E5B0(v685 + 40 * i, j);
    }
  }
  if (*(_BYTE *)(a1 + 49))
  {
    v300 = 1;
    if (!*(_BYTE *)(a1 + 48) && v277 >= 0x64 && *(_DWORD *)a1 && v637)
    {
      v301 = 32;
      do
      {
        v302 = (float *)(v685 + v301);
        sub_236825AA4(v685 + v301 - 32, *(float *)&v263, v264, v265, v266, v267, v268, v269, v270);
        v263 = *v302;
        v300 &= v263 < 0.00001;
        v301 += 40;
        --v297;
      }
      while (v297);
    }
    *((_BYTE *)a4 + 24) = v300;
  }
  if (*(_BYTE *)(a1 + 52))
  {
    LODWORD(__src[0]) = 16;
    sub_2367C3384(v691, 0x100uLL, __src);
    v303 = a4[2];
    v304 = (_QWORD *)a4[1];
    if ((unint64_t)v304 >= v303)
    {
      v306 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v304 - *a4) >> 3);
      v307 = v306 + 1;
      if (v306 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_2367C3440();
      v308 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303 - *a4) >> 3);
      if (2 * v308 > v307)
        v307 = 2 * v308;
      if (v308 >= 0x555555555555555)
        v309 = 0xAAAAAAAAAAAAAAALL;
      else
        v309 = v307;
      v708[0] = a4 + 2;
      if (v309)
        v309 = (unint64_t)sub_2367D1EBC(v309);
      else
        v310 = 0;
      v311 = (_QWORD *)(v309 + 24 * v306);
      __src[0] = (void *)v309;
      __src[1] = v311;
      *((_QWORD *)&v707 + 1) = v309 + 24 * v310;
      *v311 = 0;
      v311[1] = 0;
      v311[2] = 0;
      *(_QWORD *)&v707 = v311 + 3;
      sub_2367D1F00(a4, __src);
      v305 = (_QWORD *)a4[1];
      sub_23681E60C((uint64_t)__src);
    }
    else
    {
      *v304 = 0;
      v304[1] = 0;
      v304[2] = 0;
      v305 = v304 + 3;
      a4[1] = (uint64_t)(v304 + 3);
    }
    a4[1] = (uint64_t)v305;
    sub_23681E668((uint64_t)(v305 - 3), 0x100uLL);
    v312 = a4[15];
    v313 = a4[14];
    if (v313 >= v312)
    {
      v315 = a4[13];
      v316 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v313 - v315) >> 3);
      v317 = v316 + 1;
      if (v316 + 1 > 0x666666666666666)
        sub_2367C3440();
      v318 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v312 - v315) >> 3);
      if (2 * v318 > v317)
        v317 = 2 * v318;
      if (v318 >= 0x333333333333333)
        v319 = 0x666666666666666;
      else
        v319 = v317;
      v708[0] = a4 + 15;
      if (v319)
        v319 = (unint64_t)sub_2367DC0A4(v319);
      else
        v320 = 0;
      v321 = (_OWORD *)(v319 + 40 * v316);
      __src[0] = (void *)v319;
      __src[1] = v321;
      *((_QWORD *)&v707 + 1) = v319 + 40 * v320;
      *((_QWORD *)v321 + 4) = 0;
      *v321 = 0u;
      v321[1] = 0u;
      *(_QWORD *)&v707 = (char *)v321 + 40;
      sub_23681E890(a4 + 13, __src);
      v314 = a4[14];
      sub_2367F6844((uint64_t)__src);
    }
    else
    {
      *(_QWORD *)(v313 + 32) = 0;
      *(_OWORD *)v313 = 0u;
      *(_OWORD *)(v313 + 16) = 0u;
      v314 = v313 + 40;
      a4[14] = v313 + 40;
    }
    a4[14] = v314;
    v322 = (unint64_t *)(v314 - 40);
    sub_2367F1484((uint64_t)__src, v322, 6400);
    sub_2368177D4(*(_DWORD *)(a1 + 12), (int *)v691[0], 0x100uLL, 8, *((unsigned __int8 *)a4 + 24), *(_QWORD *)(a4[1] - 24), v322);
    v701 = 0;
    sub_2367F1560((uint64_t)__src, v322, &v701, &v698);
    if (v691[0])
    {
      v691[1] = v691[0];
      operator delete(v691[0]);
    }
  }
  v324 = *a4;
  v323 = a4[1];
  v695 = 0;
  v696 = 0;
  v697 = 0;
  v325 = v323 - v324;
  v674 = v325 / 24;
  if (v325)
  {
    v326 = 0;
    if (v674 <= 1)
      v327 = 1;
    else
      v327 = v325 / 24;
    do
    {
      v328 = (unsigned __int16 **)(*a4 + 24 * v326);
      *(_OWORD *)v691 = 0u;
      v692 = 0u;
      LODWORD(v693) = 0;
      v329 = *((unsigned __int8 *)a4 + 24);
      sub_2367C5284((char **)v691, (7 - 0x5555555555555555 * (((char *)v328[1] - (char *)*v328) >> 4)) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)&v692 + 1) = 0;
      v330 = *v328;
      v296 = a1;
      if (v328[1] != *v328)
      {
        v331 = 0;
        v332 = ((char *)v328[1] - (char *)*v328) / 48;
        v333 = (unsigned int *)v691[0];
        if (v332 <= 1)
          v332 = 1;
        do
        {
          if (v329)
          {
            if (*((_BYTE *)v330 + 40))
              v334 = 1 << (15 - *((_BYTE *)v330 + 40));
            else
              v334 = 0;
          }
          else
          {
            v334 = *v330;
          }
          *v333++ = v334;
          v331 += v334;
          v330 += 24;
          --v332;
        }
        while (v332);
        *((_QWORD *)&v692 + 1) = v331;
      }
      v335 = v696;
      if ((unint64_t)v696 >= v697)
      {
        v337 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
        v338 = v337 + 1;
        if (v337 + 1 > 0x666666666666666)
          sub_2367C3440();
        if (0x999999999999999ALL * ((uint64_t)(v697 - (_QWORD)v695) >> 3) > v338)
          v338 = 0x999999999999999ALL * ((uint64_t)(v697 - (_QWORD)v695) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v697 - (_QWORD)v695) >> 3) >= 0x333333333333333)
          v339 = 0x666666666666666;
        else
          v339 = v338;
        v708[0] = &v697;
        if (v339)
          v339 = (unint64_t)sub_2367DC0A4(v339);
        else
          v340 = 0;
        v341 = (_OWORD *)(v339 + 40 * v337);
        __src[0] = (void *)v339;
        __src[1] = v341;
        *((_QWORD *)&v707 + 1) = v339 + 40 * v340;
        *v341 = *(_OWORD *)v691;
        *((_QWORD *)v341 + 2) = v692;
        v691[0] = 0;
        v691[1] = 0;
        *(_QWORD *)&v692 = 0;
        *((_QWORD *)v341 + 3) = *((_QWORD *)&v692 + 1);
        *((_DWORD *)v341 + 8) = (_DWORD)v693;
        *(_QWORD *)&v707 = (char *)v341 + 40;
        sub_23681E91C((uint64_t *)&v695, __src);
        v336 = v696;
        sub_23681E99C((uint64_t)__src);
      }
      else
      {
        *(_OWORD *)v696 = *(_OWORD *)v691;
        v335[2] = (int32x4_t *)v692;
        v691[1] = 0;
        *(_QWORD *)&v692 = 0;
        v691[0] = 0;
        v335[3] = (int32x4_t *)*((_QWORD *)&v692 + 1);
        *((_DWORD *)v335 + 8) = (_DWORD)v693;
        v336 = v335 + 5;
      }
      v696 = v336;
      ++v326;
    }
    while (v326 != v327);
  }
  v342 = v685;
  v343 = v686;
  v344 = 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3);
  v646 = a5[1] - *a5;
  if (v646 >= v344 + v646)
  {
    v345 = a8;
    v346 = a6;
    if (v646 > v344 + v646)
      a5[1] = *a5 + v344 + v646;
  }
  else
  {
    sub_2367C8698(a5, 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3));
    v345 = a8;
    v346 = a6;
    v342 = v685;
    v343 = v686;
    v344 = 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3);
  }
  if (v344 < 2)
  {
    v365 = v696;
    if ((unint64_t)v696 >= v697)
    {
      v374 = sub_23681EA68((uint64_t *)&v695, v342);
    }
    else
    {
      sub_23681E9FC((uint64_t)&v695, v342);
      v374 = (uint64_t)(v365 + 5);
    }
    v696 = (int32x4_t **)v374;
    goto LABEL_688;
  }
  v698 = 0;
  v699 = 0;
  v700 = 0;
  v650 = v696;
  v347 = *(_QWORD *)(v296 + 40);
  v348 = 0xCCCCCCCCCCCCCCCDLL * ((v343 - v342) >> 3);
  if (v347 >= v348)
    v347 = v348;
  v349 = 128;
  if (!*(_DWORD *)v296)
    v349 = 4;
  if (v349 < v347)
    v347 = v349;
  __pb = ((char *)v696 - (char *)v695) / 40;
  v350 = v347 + __pb;
  v648 = (uint64_t)v695;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v697 - (_QWORD)v695) >> 3) < v347 + __pb)
  {
    if (v350 > 0x666666666666666)
      sub_2367C3440();
    v708[0] = &v697;
    __src[0] = sub_2367DC0A4(v350);
    __src[1] = (char *)__src[0] + 40 * __pb;
    *(void **)&v707 = __src[1];
    *((_QWORD *)&v707 + 1) = (char *)__src[0] + 40 * v351;
    sub_23681E91C((uint64_t *)&v695, __src);
    sub_23681E99C((uint64_t)__src);
    v348 = 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3);
  }
  v699 = 0;
  LODWORD(__src[0]) = v350;
  sub_2367CBAC8((char **)&v698, v348, __src);
  LODWORD(v691[0]) = 2139095039;
  sub_23681EDEC(__src, 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3), v691);
  v360 = v685;
  v361 = v686;
  if (v686 == v685)
  {
    v362 = 0;
    v360 = v686;
  }
  else
  {
    v362 = 0;
    v363 = 0;
    v364 = 24;
    do
    {
      if (*(_QWORD *)(v360 + v364))
      {
        *(float *)&v352 = sub_236825AA4(v360 + v364 - 24, *(float *)&v352, v353, v354, v355, v356, v357, v358, v359);
        v360 = v685;
        v361 = v686;
        if (*(_QWORD *)(v685 + v364) > *(_QWORD *)(v685 + 40 * v362 + 24))
          v362 = v363;
      }
      else
      {
        *((_DWORD *)v698 + v363) = 0;
        *((_DWORD *)__src[0] + v363) = 0;
      }
      ++v363;
      v364 += 40;
    }
    while (v363 < 0xCCCCCCCCCCCCCCCDLL * ((v361 - v360) >> 3));
  }
  v667 = v350;
  if (v650 != (int32x4_t **)v648)
  {
    v375 = 0;
    if (__pb <= 1)
      v376 = 1;
    else
      v376 = __pb;
    v661 = v376;
    do
    {
      *(float *)&v352 = sub_236825AA4((uint64_t)&v695[v375], *(float *)&v352, v353, v354, v355, v356, v357, v358, v359);
      v375 += 5;
      --v376;
    }
    while (v376);
    v360 = v685;
    v361 = v686;
    v377 = (float *)__src[0];
    if (v686 != v685)
    {
      v378 = 0;
      if ((unint64_t)((v686 - v685) / 40) <= 1)
        v379 = 1;
      else
        v379 = (v686 - v685) / 40;
      v380 = (uint64_t)v695;
      do
      {
        v381 = v377[v378];
        if (v381 != 0.0)
        {
          v382 = (int32x4_t **)v380;
          v383 = v661;
          do
          {
            *(float *)&v352 = sub_236825D30(v360 + 40 * v378, v382);
            if (v381 >= *(float *)&v352)
              v381 = *(float *)&v352;
            v377[v378] = v381;
            v382 += 5;
            --v383;
          }
          while (v383);
        }
        ++v378;
      }
      while (v378 != v379);
    }
    v384 = v377 + 1;
    v385 = v377 == __src[1] || v384 == __src[1];
    v386 = (char *)v377;
    v350 = v667;
    if (!v385)
    {
      v387 = *v377;
      v386 = (char *)v377;
      v388 = v377 + 1;
      do
      {
        v389 = *v388++;
        *(float *)&v353 = v389;
        if (v387 < v389)
        {
          v387 = *(float *)&v353;
          v386 = (char *)v384;
        }
        v384 = v388;
      }
      while (v388 != __src[1]);
    }
    LODWORD(v352) = *(_DWORD *)v386;
    if (*(float *)v386 > 0.0)
      v362 = (v386 - (char *)v377) >> 2;
  }
  v390 = (unint64_t)v696;
  v391 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
  if (v391 < v350)
  {
    v392 = v698;
    while (1)
    {
      v392[v362] = v391;
      v393 = v360 + 40 * v362;
      if (v390 >= v697)
      {
        v390 = sub_23681EA68((uint64_t *)&v695, v393);
      }
      else
      {
        sub_23681E9FC((uint64_t)&v695, v393);
        v390 += 40;
      }
      v696 = (int32x4_t **)v390;
      v394 = (float *)__src[0];
      *((_DWORD *)__src[0] + v362) = 0;
      v360 = v685;
      v361 = v686;
      if (v686 == v685)
      {
        v362 = 0;
      }
      else
      {
        v395 = 0;
        v362 = 0;
        v396 = (unint64_t)((v686 - v685) / 40) <= 1 ? 1 : (v686 - v685) / 40;
        v397 = v685;
        do
        {
          v398 = v394[v395];
          if (v398 != 0.0)
          {
            *(float *)&v352 = sub_236825BC4(v397, v390 - 40, v352, v353);
            if (v398 < *(float *)&v352)
              *(float *)&v352 = v398;
            v394[v395] = *(float *)&v352;
            *(float *)&v353 = v394[v362];
            if (*(float *)&v352 > *(float *)&v353)
              v362 = v395;
          }
          ++v395;
          v397 += 40;
        }
        while (v396 != v395);
      }
      *(float *)&v352 = v394[v362];
      LODWORD(v353) = 1111490560;
      if (*(float *)&v352 < 48.0)
        break;
      v391 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v390 - (_QWORD)v695) >> 3);
      v350 = v667;
      if (v391 >= v667)
        goto LABEL_496;
    }
    v350 = v667;
  }
LABEL_496:
  v346 = a6;
  if (v361 != v360)
  {
    v399 = 0;
    v400 = v698;
    do
    {
      if (v350 == v400[v399])
      {
        v401 = (uint64_t)v695;
        if (v696 == v695)
        {
          v403 = 0;
        }
        else
        {
          v402 = 0;
          v403 = 0;
          if ((unint64_t)(((char *)v696 - (char *)v695) / 40) <= 1)
            v404 = 1;
          else
            v404 = ((char *)v696 - (char *)v695) / 40;
          v405 = 3.4028e38;
          v406 = v695;
          do
          {
            v407 = v360 + 40 * v399;
            if (v402 >= __pb)
              *(float *)&v352 = sub_236825BC4(v407, (uint64_t)v406, v352, v353);
            else
              *(float *)&v352 = sub_236825D30(v407, v406);
            if (*(float *)&v352 < v405)
            {
              v403 = v402;
              v405 = *(float *)&v352;
            }
            ++v402;
            v406 += 5;
          }
          while (v404 != v402);
        }
        v346 = a6;
        v350 = v667;
        if (v403 >= __pb)
        {
          sub_236825E80(v401 + 40 * v403, (int **)(v360 + 40 * v399));
          *(float *)&v352 = sub_236825AA4((uint64_t)&v695[5 * v403], v408, v409, v410, v411, v412, v413, v414, v415);
          v360 = v685;
          v361 = v686;
        }
        v400[v399] = v403;
      }
      ++v399;
    }
    while (v399 < 0xCCCCCCCCCCCCCCCDLL * ((v361 - v360) >> 3));
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  v416 = (uint64_t)v695;
  v417 = v696;
  if (v650 == (int32x4_t **)v648 && *(_DWORD *)a1 == 2)
  {
    if (v695 == v696)
    {
      v420 = (uint64_t)v695;
    }
    else
    {
      do
      {
        v418 = *(int **)v416;
        v419 = (uint64_t)(*(_QWORD *)(v416 + 8) - *(_QWORD *)v416) >> 2;
        LODWORD(__src[0]) = 0;
        sub_2368183F8(v418, v419, (float *)__src, 0);
        *(_DWORD *)(v416 + 32) = __src[0];
        v416 += 40;
      }
      while ((int32x4_t **)v416 != v417);
      v416 = (uint64_t)v695;
      v420 = (uint64_t)v696;
    }
    LODWORD(__src[0]) = 1;
    sub_236818A38(v691, 0xCCCCCCCCCCCCCCCDLL * ((v420 - v416) >> 3), __src);
    sub_2367C3BE4(&v701, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
    v421 = v701;
    v422 = v702;
    if (v701 != v702)
    {
      v423 = 0;
      do
        *v421++ = v423++;
      while (v421 != v422);
    }
    v424 = (uint64_t)v695;
    v425 = (uint64_t)v696;
    if (v696 == v695)
    {
      v489 = 0;
      v431 = v696;
    }
    else
    {
      v426 = 0;
      v427 = 0;
      v428 = 0;
      v429 = 0;
      v430 = 0;
      v431 = v696;
      do
      {
        v432 = v430;
        v433 = v429;
        v429 = ++v430;
        v434 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v431 - v424) >> 3);
        if (v434 > v430)
        {
          v668 = v430;
          v435 = v430;
          v662 = v430;
          do
          {
            LODWORD(v708[0]) = 0;
            *(_OWORD *)__src = 0u;
            v707 = 0u;
            sub_236825E80((uint64_t)__src, (int **)(v424 + 40 * v433));
            sub_236825E80((uint64_t)__src, (int **)&v695[5 * v435]);
            v436 = __src[0];
            LODWORD(v705) = 0;
            sub_2368183F8((int *)__src[0], ((char *)__src[1] - (char *)__src[0]) >> 2, (float *)&v705, 0);
            v437 = (float)(*(float *)&v705 - *(float *)&v695[5 * v433 + 4]) - *(float *)&v695[5 * v435 + 4];
            if (v437 < 0.0)
            {
              if (*((_DWORD *)v691[0] + v433) <= *((_DWORD *)v691[0] + v435))
                v438 = *((_DWORD *)v691[0] + v435);
              else
                v438 = *((_DWORD *)v691[0] + v433);
              if (v427 >= v426)
              {
                v440 = v426;
                v441 = ((uint64_t)v427 - v428) >> 4;
                v442 = v441 + 1;
                if ((unint64_t)(v441 + 1) >> 60)
                  sub_2367C3440();
                v443 = (unint64_t)v440 - v428;
                v444 = ((uint64_t)v440 - v428) >> 3;
                if (v444 > v442)
                  v442 = v444;
                if (v443 >= 0x7FFFFFFFFFFFFFF0)
                  v445 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v445 = v442;
                if (v445)
                {
                  if (v445 >> 60)
                    sub_2367C3488();
                  v446 = (char *)operator new(16 * v445);
                }
                else
                {
                  v446 = 0;
                }
                v447 = &v446[16 * v441];
                *(float *)v447 = v437;
                *((_DWORD *)v447 + 1) = v432;
                *((_DWORD *)v447 + 2) = v430;
                *((_DWORD *)v447 + 3) = v438;
                if (v427 == (float *)v428)
                {
                  v428 = (uint64_t)&v446[16 * v441];
                }
                else
                {
                  v448 = &v446[16 * v441];
                  do
                  {
                    *((_OWORD *)v448 - 1) = *((_OWORD *)v427 - 1);
                    v448 -= 16;
                    v427 -= 4;
                  }
                  while (v427 != (float *)v428);
                  v427 = (float *)v428;
                  v428 = (uint64_t)v448;
                }
                v426 = (float *)&v446[16 * v445];
                v439 = (uint64_t)(v447 + 16);
                if (v427)
                  operator delete(v427);
              }
              else
              {
                *v427 = v437;
                *((_DWORD *)v427 + 1) = v432;
                *((_DWORD *)v427 + 2) = v430;
                v439 = (uint64_t)(v427 + 4);
                *((_DWORD *)v427 + 3) = v438;
              }
              sub_236825F70(v428, v439, (v439 - v428) >> 4);
              v436 = __src[0];
              v427 = (float *)v439;
            }
            if (v436)
              operator delete(v436);
            v424 = (uint64_t)v695;
            v431 = v696;
            v434 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
            v435 = ++v430;
          }
          while (v434 > v430);
          v429 = v668;
          v430 = v662;
        }
      }
      while (v434 > v429);
      if ((float *)v428 == v427)
      {
        v489 = v427;
        v425 = v424;
        v346 = a6;
      }
      else
      {
        v669 = v426;
        v449 = 2;
        v346 = a6;
        do
        {
          v451 = *(unsigned int *)(v428 + 4);
          v450 = *(unsigned int *)(v428 + 8);
          v452 = *(_DWORD *)(v428 + 12);
          v453 = (uint64_t)v427 - v428;
          if ((uint64_t)v427 - v428 >= 17)
          {
            v654 = *(_DWORD *)(v428 + 12);
            v663 = v449;
            v454 = 0;
            v455 = v453 >> 4;
            *(_OWORD *)__src = *(_OWORD *)v428;
            v456 = (unint64_t)((v453 >> 4) - 2) >> 1;
            v457 = (_OWORD *)v428;
            do
            {
              v458 = (float *)&v457[v454 + 1];
              v459 = (2 * v454) | 1;
              v460 = 2 * v454 + 2;
              if (v460 < v455 && sub_236825F0C((uint64_t)&v457[v454 + 1], (uint64_t)&v457[v454 + 2]))
              {
                v458 += 4;
                v459 = v460;
              }
              *v457 = *(_OWORD *)v458;
              v457 = v458;
              v454 = v459;
            }
            while (v459 <= v456);
            v461 = v427 - 4;
            if (v458 == v427 - 4)
            {
              *(_OWORD *)v458 = *(_OWORD *)__src;
            }
            else
            {
              *(_OWORD *)v458 = *(_OWORD *)v461;
              *(_OWORD *)v461 = *(_OWORD *)__src;
              sub_236825F70(v428, (uint64_t)(v458 + 4), ((uint64_t)v458 - v428 + 16) >> 4);
            }
            v346 = a6;
            v449 = v663;
            v452 = v654;
          }
          v462 = *((_DWORD *)v691[0] + v451);
          v463 = *((_DWORD *)v691[0] + v450);
          v427 -= 4;
          if (v462 <= v463)
            v464 = *((_DWORD *)v691[0] + v450);
          else
            v464 = *((_DWORD *)v691[0] + v451);
          if (v463)
            v465 = v462 == 0;
          else
            v465 = 1;
          if (!v465 && v452 == v464)
          {
            sub_236825E80((uint64_t)&v695[5 * v451], (int **)&v695[5 * v450]);
            v467 = &v695[5 * v451];
            v468 = (int *)*v467;
            v469 = ((char *)v467[1] - (char *)*v467) >> 2;
            LODWORD(__src[0]) = 0;
            sub_2368183F8(v468, v469, (float *)__src, 0);
            v470 = (uint64_t)v695;
            LODWORD(v695[5 * v451 + 4]) = __src[0];
            v471 = v701;
            v472 = v702;
            while (v471 != v472)
            {
              if (*v471 == (_DWORD)v450)
                *v471 = v451;
              ++v471;
            }
            v473 = v691[0];
            *((_DWORD *)v691[0] + v450) = 0;
            v473[v451] = v449;
            v474 = v696;
            if (v696 == (int32x4_t **)v470)
            {
              ++v449;
            }
            else
            {
              v664 = v449 + 1;
              v475 = 0;
              v476 = 0;
              do
              {
                if (v476 != (_DWORD)v451 && *((_DWORD *)v691[0] + v475))
                {
                  LODWORD(v708[0]) = 0;
                  *(_OWORD *)__src = 0u;
                  v707 = 0u;
                  sub_236825E80((uint64_t)__src, (int **)(v470 + 40 * v451));
                  sub_236825E80((uint64_t)__src, (int **)&v695[5 * v475]);
                  v477 = __src[0];
                  LODWORD(v705) = 0;
                  sub_2368183F8((int *)__src[0], ((char *)__src[1] - (char *)__src[0]) >> 2, (float *)&v705, 0);
                  v478 = (float)(*(float *)&v705 - *(float *)&v695[5 * v451 + 4])
                       - *(float *)&v695[5 * v475 + 4];
                  if (v478 < 0.0)
                  {
                    if (v476 >= v451)
                      v479 = v451;
                    else
                      v479 = v476;
                    if (v451 <= v476)
                      v480 = v476;
                    else
                      v480 = v451;
                    if (*((_DWORD *)v691[0] + v451) <= *((_DWORD *)v691[0] + v475))
                      v481 = *((_DWORD *)v691[0] + v475);
                    else
                      v481 = *((_DWORD *)v691[0] + v451);
                    if (v427 >= v669)
                    {
                      v483 = ((uint64_t)v427 - v428) >> 4;
                      v484 = v483 + 1;
                      if ((unint64_t)(v483 + 1) >> 60)
                        sub_2367C3440();
                      if (((uint64_t)v669 - v428) >> 3 > v484)
                        v484 = ((uint64_t)v669 - v428) >> 3;
                      if ((unint64_t)v669 - v428 >= 0x7FFFFFFFFFFFFFF0)
                        v485 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v485 = v484;
                      if (v485)
                      {
                        if (v485 >> 60)
                          sub_2367C3488();
                        v486 = (char *)operator new(16 * v485);
                      }
                      else
                      {
                        v486 = 0;
                      }
                      v487 = &v486[16 * v483];
                      *(float *)v487 = v478;
                      *((_DWORD *)v487 + 1) = v479;
                      *((_DWORD *)v487 + 2) = v480;
                      *((_DWORD *)v487 + 3) = v481;
                      if (v427 == (float *)v428)
                      {
                        v428 = (uint64_t)&v486[16 * v483];
                        v346 = a6;
                      }
                      else
                      {
                        v488 = &v486[16 * v483];
                        v346 = a6;
                        do
                        {
                          *((_OWORD *)v488 - 1) = *((_OWORD *)v427 - 1);
                          v488 -= 16;
                          v427 -= 4;
                        }
                        while (v427 != (float *)v428);
                        v427 = (float *)v428;
                        v428 = (uint64_t)v488;
                      }
                      v669 = (float *)&v486[16 * v485];
                      v482 = (uint64_t)(v487 + 16);
                      if (v427)
                        operator delete(v427);
                    }
                    else
                    {
                      *v427 = v478;
                      *((_DWORD *)v427 + 1) = v479;
                      *((_DWORD *)v427 + 2) = v480;
                      v482 = (uint64_t)(v427 + 4);
                      *((_DWORD *)v427 + 3) = v481;
                      v346 = a6;
                    }
                    sub_236825F70(v428, v482, (v482 - v428) >> 4);
                    v477 = __src[0];
                    v427 = (float *)v482;
                  }
                  if (v477)
                    operator delete(v477);
                  v470 = (uint64_t)v695;
                  v474 = v696;
                }
                v475 = ++v476;
              }
              while (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v474 - v470) >> 3) > v476);
              v449 = v664;
            }
          }
        }
        while ((float *)v428 != v427);
        v425 = (uint64_t)v695;
        v431 = v696;
        v489 = v427;
      }
    }
    LODWORD(v705) = -1;
    sub_236818A38(__src, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v431 - v425) >> 3), &v705);
    v491 = (uint64_t)v695;
    v490 = v696;
    if (v696 == v695)
    {
      v494 = 0;
    }
    else
    {
      v492 = 0;
      v493 = 0;
      v494 = 0;
      do
      {
        if (*((_DWORD *)v691[0] + v493))
        {
          if (v493 != v494)
            sub_2367D4108((char *)(v491 + 40 * v494), *(char **)(v491 + v492), *(_QWORD *)(v491 + v492 + 8), (uint64_t)(*(_QWORD *)(v491 + v492 + 8) - *(_QWORD *)(v491 + v492)) >> 2);
          v495 = v491 + 40 * v494;
          v496 = *(_QWORD *)(v491 + v492 + 24);
          *(_DWORD *)(v495 + 32) = *(_DWORD *)(v491 + v492 + 32);
          *(_QWORD *)(v495 + 24) = v496;
          *((_DWORD *)__src[0] + v493) = v494++;
          v491 = (uint64_t)v695;
          v490 = v696;
        }
        ++v493;
        v492 += 40;
      }
      while (v493 < 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v490 - v491) >> 3));
    }
    sub_236826058((uint64_t *)&v695, v494);
    v497 = v698;
    v498 = v699;
    v499 = __src[0];
    if (v698 == v699)
    {
      if (!__src[0])
      {
LABEL_647:
        if (v489)
          operator delete(v489);
        if (v701)
        {
          v702 = v701;
          operator delete(v701);
        }
        if (v691[0])
        {
          v691[1] = v691[0];
          operator delete(v691[0]);
        }
        v416 = (uint64_t)v695;
        v417 = v696;
        goto LABEL_654;
      }
    }
    else
    {
      v500 = (unsigned int *)v701;
      do
      {
        *v497 = v499[v500[*v497]];
        ++v497;
      }
      while (v497 != v498);
    }
    __src[1] = v499;
    operator delete(v499);
    goto LABEL_647;
  }
LABEL_654:
  v691[0] = 0;
  v691[1] = 0;
  *(_QWORD *)&v692 = 0;
  v701 = v691;
  LOBYTE(v702) = 0;
  if (v417 != (int32x4_t **)v416)
  {
    v501 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v417 - v416) >> 3);
    if (v501 > 0x666666666666666)
      sub_2367C3440();
    v691[0] = sub_2367DC0A4(v501);
    v691[1] = v691[0];
    *(_QWORD *)&v692 = (char *)v691[0] + 40 * v502;
    v704 = v691[0];
    v705 = (char *)v691[0];
    __src[0] = &v692;
    __src[1] = &v704;
    *(_QWORD *)&v707 = &v705;
    BYTE8(v707) = 0;
    v503 = v691[0];
    do
    {
      *v503 = 0;
      v503[1] = 0;
      v503[2] = 0;
      sub_2367CBEFC(v503, *(const void **)v416, *(_QWORD *)(v416 + 8), (uint64_t)(*(_QWORD *)(v416 + 8) - *(_QWORD *)v416) >> 2);
      v504 = *(_QWORD *)(v416 + 24);
      *((_DWORD *)v503 + 8) = *(_DWORD *)(v416 + 32);
      v503[3] = v504;
      v503 = v705 + 40;
      v705 += 40;
      v416 += 40;
    }
    while ((int32x4_t **)v416 != v417);
    BYTE8(v707) = 1;
    sub_23682646C((uint64_t)__src);
    v691[1] = v503;
  }
  __src[1] = 0;
  *(_QWORD *)&v707 = 0;
  __src[0] = &__src[1];
  if (v650 != (int32x4_t **)v648)
  {
    v505 = 0;
    do
    {
      LODWORD(v701) = v505;
      *((_DWORD *)sub_2368261D4((uint64_t **)__src, v505, &v701) + 8) = v505;
      ++v505;
    }
    while (__pb != v505);
  }
  v506 = __pb;
  v507 = (int *)v698;
  v508 = (int *)v699;
  if (v698 != v699)
  {
    v509 = (int *)v698;
    do
    {
      v510 = *v509;
      v511 = (char *)__src[1];
      if (!__src[1])
        goto LABEL_673;
      v512 = &__src[1];
      do
      {
        v513 = (void **)v511;
        v514 = v512;
        v515 = *((_DWORD *)v511 + 7);
        v516 = (void **)(v511 + 8);
        if (v515 >= v510)
        {
          v516 = v513;
          v512 = v513;
        }
        v511 = (char *)*v516;
      }
      while (v511);
      if (v512 == &__src[1])
        goto LABEL_673;
      if (v515 < v510)
        v513 = v514;
      if (v510 < *((_DWORD *)v513 + 7))
      {
LABEL_673:
        LODWORD(v701) = *v509;
        *((_DWORD *)sub_2368261D4((uint64_t **)__src, v510, &v701) + 8) = v506;
        v517 = (char *)v691[0];
        v518 = (char *)v691[0] + 40 * v510;
        v519 = (uint64_t)v695;
        v520 = (char *)&v695[5 * v506];
        if (v520 != v518)
          sub_2367D4108(v520, *(char **)v518, *((_QWORD *)v518 + 1), (uint64_t)(*((_QWORD *)v518 + 1) - *(_QWORD *)v518) >> 2);
        v521 = &v517[40 * v510];
        v522 = *((_QWORD *)v521 + 3);
        v523 = v519 + 40 * v506;
        *(_DWORD *)(v523 + 32) = *((_DWORD *)v521 + 8);
        *(_QWORD *)(v523 + 24) = v522;
        ++v506;
      }
      ++v509;
    }
    while (v509 != v508);
  }
  sub_236826058((uint64_t *)&v695, v506);
  v296 = a1;
  v345 = a8;
  if (v507 != v508)
  {
    v524 = v507;
    do
    {
      LODWORD(v701) = *v524;
      *v524++ = *((_DWORD *)sub_2368261D4((uint64_t **)__src, (int)v701, &v701) + 8);
    }
    while (v524 != v508);
  }
  sub_23682629C((_QWORD *)__src[1]);
  __src[0] = v691;
  sub_23681EE6C((void ***)__src);
  if (v686 == v685)
  {
    if (!v507)
      goto LABEL_686;
  }
  else
  {
    v525 = 0;
    do
    {
      *(_BYTE *)(*a5 + v646 + v525) = v507[v525];
      ++v525;
    }
    while (v525 < 0xCCCCCCCCCCCCCCCDLL * ((v686 - v685) >> 3));
  }
  operator delete(v507);
LABEL_686:
  if (v346)
    sub_2368285B0((unsigned __int8 **)a5, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), v346, a7, a8);
LABEL_688:
  v526 = (uint64_t)v695;
  v527 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
  if (v345 && v674 < v527)
  {
    v528 = (double *)(v345 + 40 * a7 + 32);
    v529 = v674;
    v530 = 40 * v674;
    do
    {
      v531 = v526 + v530;
      sub_236825AA4(v526 + v530, *(float *)&v366, v367, v368, v369, v370, v371, v372, v373);
      v367 = *v528;
      v366 = *v528 + *(float *)(v531 + 32);
      *v528 = v366;
      ++v529;
      v526 = (uint64_t)v695;
      v527 = 0xCCCCCCCCCCCCCCCDLL * (v696 - v695);
      v530 += 40;
    }
    while (v529 < v527);
  }
  if (*((_BYTE *)a4 + 64))
    v532 = 8;
  else
    v532 = 7;
  v670 = (void **)(a4 + 4);
  sub_2367CD780((void **)a4 + 4, v527);
  v533 = *(_DWORD *)(v296 + 4);
  if (v533)
  {
    if (v533 == 3)
    {
      a4[5] = a4[4];
      *(_OWORD *)__src = xmmword_2368AF6A0;
      sub_23681EB94(v670, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), __src);
    }
    else if (v533 == 1)
    {
      a4[5] = a4[4];
      *(_OWORD *)__src = xmmword_2368AF590;
      sub_23681EB94(v670, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), __src);
    }
    else if (!*(_BYTE *)(v296 + 50))
    {
      v691[0] = 0;
      v691[1] = 0;
      *(_QWORD *)&v692 = 0;
      if (v533 == 2)
      {
        *(_OWORD *)__src = xmmword_2368AF580;
        v707 = xmmword_2368AF6B0;
        *(_OWORD *)v708 = xmmword_2368AF590;
        v709 = xmmword_2368AF6A0;
        sub_23681ECBC(v691, (char *)__src, (char *)v710, 4uLL);
        v534 = a4;
      }
      else
      {
        v534 = a4;
        if (v533 == 4)
        {
          *(_OWORD *)__src = xmmword_2368AF580;
          v707 = xmmword_2368AF6C0;
          *(_OWORD *)v708 = xmmword_2368AF6D0;
          v709 = xmmword_2368AF6E0;
          v710[0] = xmmword_2368AF6B0;
          v710[1] = xmmword_2368AF6F0;
          v711 = xmmword_2368AF700;
          v712 = xmmword_2368AF710;
          v713 = xmmword_2368AF720;
          v714 = xmmword_2368AF730;
          v715 = xmmword_2368AF740;
          v716 = xmmword_2368AF750;
          v717 = xmmword_2368AF760;
          v718 = xmmword_2368AF770;
          v719[0] = xmmword_2368AF780;
          v719[1] = xmmword_2368AF790;
          v719[2] = xmmword_2368AF7A0;
          v720 = xmmword_2368AF7B0;
          v721 = xmmword_2368AF7C0;
          v722 = xmmword_2368AF7D0;
          v723 = xmmword_2368AF590;
          v724 = xmmword_2368AF6A0;
          v725 = xmmword_2368AF7E0;
          v726 = xmmword_2368AF7F0;
          v727 = xmmword_2368AF800;
          v728 = xmmword_2368AF810;
          v729 = xmmword_2368AF820;
          v730 = xmmword_2368AF830;
          sub_23681ECBC(v691, (char *)__src, (char *)&v731, 0x1CuLL);
        }
      }
      LODWORD(v701) = 2139095039;
      sub_23681EDEC(__src, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695), &v701);
      sub_2367C3BE4(&v701, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
      sub_236818388(&v698, 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
      v535 = a4 + 4;
      if (*((_BYTE *)v534 + 24))
        v536 = 4096;
      else
        v536 = 256;
      v655 = v691[0];
      v658 = (int *)v691[1];
      if (v691[0] == v691[1])
      {
        v542 = v695;
        v571 = v696;
      }
      else
      {
        v537 = (int *)v691[0];
        do
        {
          v538 = *v537;
          v539 = v537[1];
          v540 = v537[2];
          v541 = v537[3];
          if (v699 - (_BYTE *)v698 >= 1)
            memset(v698, 1, v699 - (_BYTE *)v698);
          if (v702 - (_BYTE *)v701 >= 1)
            bzero(v701, 4 * (((unint64_t)(v702 - (_BYTE *)v701) >> 2) - ((unint64_t)(v702 - (_BYTE *)v701) > 3)) + 4);
          v542 = v695;
          v543 = v696;
          for (k = v695; k != v543; k += 5)
          {
            k[1] = *k;
            k[3] = 0;
          }
          v545 = *(int ***)a3;
          __pc = *(int ***)(a3 + 8);
          if (*(int ***)a3 != __pc)
          {
            v546 = v541 + v540;
            do
            {
              v547 = *v545;
              v548 = (unsigned int *)v545[1];
              while (v547 != (int *)v548)
              {
                v549 = *v547;
                if ((v549 & 1) == 0)
                {
                  v550 = *(unsigned __int8 *)(*a5 + (v549 >> 1));
                  v551 = v547[1];
                  v552 = __clz(v551) ^ 0x1F;
                  v553 = ((v552 - v538) << v546)
                       + v539
                       + (((-1 << v552) + v551) & ~(-1 << v541))
                       + (((-1 << v552) + v551) >> (v552 - v540) << v541);
                  v554 = v552 - v546;
                  if (v539 <= v551)
                    v555 = v553;
                  else
                    v555 = v551;
                  if (v539 <= v551)
                    v556 = v554;
                  else
                    v556 = 0;
                  if (v536 <= v555 || *v681 && v555 >= *((_DWORD *)a4 + 17))
                  {
                    *((_BYTE *)v698 + v550) = 0;
                  }
                  else
                  {
                    *((_DWORD *)v701 + v550) += v556;
                    sub_23681E5B0((uint64_t)&v695[5 * v550], v555);
                  }
                }
                v547 += 2;
              }
              v545 += 3;
            }
            while (v545 != __pc);
            v542 = v695;
            v543 = v696;
          }
          if (v543 == v542)
          {
            v571 = v542;
          }
          else
          {
            v557 = 0;
            v558 = 0;
            v559 = 0;
            v560 = __clz(v538 + 1) ^ 0x1F;
            if (((v538 + 1) & v538) != 0)
              v561 = v560 + 1;
            else
              v561 = v560;
            v562 = (float)v561;
            v563 = __clz(v538 - v540 + 1) ^ 0x1F;
            if (((v538 - v540 + 1) & (v538 - v540)) != 0)
              ++v563;
            v564 = (float)v563;
            do
            {
              if (*((_BYTE *)v698 + v559))
              {
                v565 = (int **)&v542[v557];
                v566 = *v565;
                v567 = v565[1] - *v565;
                LODWORD(v705) = 0;
                sub_2368183F8(v566, v567, (float *)&v705, 0);
                v568 = (float)((float)(*(float *)&v705 + (float)*((unsigned int *)v701 + v559)) + v562) + v564;
                v569 = (float *)__src[0];
                if (v568 < *((float *)__src[0] + v559))
                {
                  v570 = (char *)*v670 + v558;
                  *v570 = v538;
                  v570[1] = v539;
                  v570[2] = v540;
                  v570[3] = v541;
                  v569[v559] = v568;
                }
              }
              ++v559;
              v542 = v695;
              v571 = v696;
              v558 += 16;
              v557 += 5;
            }
            while (v559 < 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
          }
          v537 += 4;
          v535 = a4 + 4;
        }
        while (v537 != v658);
      }
      while (v542 != v571)
      {
        v542[1] = *v542;
        v542[3] = 0;
        v542 += 5;
      }
      v572 = *(int ***)a3;
      v573 = *(int ***)(a3 + 8);
      if (*(int ***)a3 == v573)
      {
        v574 = 4;
      }
      else
      {
        v574 = 4;
        do
        {
          v575 = *v572;
          v576 = (unsigned int *)v572[1];
          while (v575 != (int *)v576)
          {
            v577 = *v575;
            v578 = *(unsigned __int8 *)(*a5 + (v577 >> 1));
            v579 = (_DWORD *)a4 + 19;
            if ((v577 & 1) == 0)
              v579 = (_DWORD *)(*v535 + 16 * v578);
            v580 = v575[1];
            v581 = v579[1];
            if (v581 <= v580)
            {
              v582 = __clz(v580) ^ 0x1F;
              v580 = ((v582 - *v579) << (v579[3] + v579[2]))
                   + v581
                   + (((-1 << v582) + v580) & ~(-1 << v579[3]))
                   + (((-1 << v582) + v580) >> (v582 - v579[2]) << v579[3]);
            }
            if ((v577 & 1) != 0)
              v583 = *((_DWORD *)a4 + 17);
            else
              v583 = 0;
            v584 = v583 + v580;
            sub_23681E5B0((uint64_t)&v695[5 * v578], v583 + v580);
            while (v584 >> v574)
              ++v574;
            v575 += 2;
          }
          v572 += 3;
        }
        while (v572 != v573);
      }
      if (v698)
      {
        v699 = v698;
        operator delete(v698);
      }
      v345 = a8;
      v346 = a6;
      v296 = a1;
      if (v701)
      {
        v702 = v701;
        operator delete(v701);
      }
      if (__src[0])
      {
        __src[1] = __src[0];
        operator delete(__src[0]);
      }
      if (v655)
        operator delete(v655);
      if (v574 <= 5)
        v532 = 5;
      else
        v532 = v574;
    }
  }
  if (*(_BYTE *)(v296 + 50))
    v532 = 8;
  v691[0] = 0;
  v585 = *((unsigned __int8 *)a4 + 24);
  if (v346)
  {
    *(_QWORD *)(v346[3] + (*v346 >> 3)) = (v585 << (*v346 & 7)) | *(unsigned __int8 *)(v346[3] + (*v346 >> 3));
    v586 = *v346 + 1;
    *v346 = v586;
    v587 = v345;
    if (*((_BYTE *)a4 + 24))
    {
      v588 = 1;
      v532 = 15;
    }
    else
    {
      *(_QWORD *)(v346[3] + (v586 >> 3)) = ((v532 - 5) << (v586 & 7)) | *(unsigned __int8 *)(v346[3] + (v586 >> 3));
      *v346 += 2;
      v588 = 3;
    }
    sub_2368176B0(a4[4], (uint64_t *)a4[5], v346, v532);
    v593 = 0;
    LODWORD(v585) = *((unsigned __int8 *)a4 + 24);
  }
  else
  {
    v587 = v345;
    if (*((_BYTE *)a4 + 24))
      v588 = 1;
    else
      v588 = 3;
    if (*((_BYTE *)a4 + 24))
      v532 = 15;
    v589 = (uint64_t *)a4[4];
    v590 = (uint64_t *)a4[5];
    if (v589 == v590)
    {
      v593 = 0;
    }
    else
    {
      do
      {
        v591 = *v589;
        v592 = v589[1];
        v589 += 2;
        sub_23681E4C8(v591, v592, (unint64_t *)v691, v532);
      }
      while (v589 != v590);
      v593 = (char *)v691[0];
    }
  }
  v594 = v695;
  v595 = (uint64_t)v696;
  v596 = v674;
  if ((_DWORD)v585)
  {
    if (v695 == v696)
    {
      v602 = v696;
    }
    else
    {
      do
      {
        v597 = ((v594[1] - *v594) >> 2) + 1;
        while (1)
        {
          v598 = v597 - 2;
          if (v597 - 2 < 0)
            break;
          --v597;
          if (*(int *)(*v594 + 4 * v598) >= 1)
          {
            v599 = v597;
            goto LABEL_804;
          }
        }
        v599 = 1;
LABEL_804:
        v600 = v599 - 1;
        if (v346)
        {
          sub_236819058(v600, v346);
        }
        else
        {
          v601 = (unint64_t)&v593[-__clz(v600) + 68];
          if (v600)
            v593 = (char *)v601;
          else
            ++v593;
        }
        v596 = v674;
        v594 += 5;
      }
      while (v594 != (_QWORD *)v595);
      v595 = (uint64_t)v695;
      v602 = v696;
    }
    v691[0] = v593;
    v594 = (_QWORD *)v595;
    v595 = (uint64_t)v602;
  }
  v603 = &v593[v588];
  if (v596 < 0xCCCCCCCCCCCCCCCDLL * ((v595 - (uint64_t)v594) >> 3))
  {
    v683 = a4 + 13;
    do
    {
      v604 = v596;
      v605 = v594[5 * v596];
      v606 = ((unint64_t)(v594[5 * v596 + 1] - v605) >> 2) + 1;
      while (1)
      {
        v607 = v606 - 2;
        if (v606 - 2 < 0)
          break;
        --v606;
        if (*(int *)(v605 + 4 * v607) >= 1)
        {
          v608 = v606;
          goto LABEL_820;
        }
      }
      v608 = 1;
LABEL_820:
      v609 = a4;
      v611 = (_QWORD *)a4[1];
      v610 = a4[2];
      if ((unint64_t)v611 >= v610)
      {
        v613 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v611 - *a4) >> 3);
        v614 = v613 + 1;
        if (v613 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2367C3440();
        v615 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v610 - *a4) >> 3);
        if (2 * v615 > v614)
          v614 = 2 * v615;
        if (v615 >= 0x555555555555555)
          v616 = 0xAAAAAAAAAAAAAAALL;
        else
          v616 = v614;
        v708[0] = a4 + 2;
        if (v616)
          v616 = (unint64_t)sub_2367D1EBC(v616);
        else
          v617 = 0;
        v618 = (_QWORD *)(v616 + 24 * v613);
        __src[0] = (void *)v616;
        __src[1] = v618;
        *((_QWORD *)&v707 + 1) = v616 + 24 * v617;
        *v618 = 0;
        v618[1] = 0;
        v618[2] = 0;
        *(_QWORD *)&v707 = v618 + 3;
        v609 = a4;
        sub_2367D1F00(a4, __src);
        v612 = (_QWORD *)a4[1];
        sub_23681E60C((uint64_t)__src);
      }
      else
      {
        *v611 = 0;
        v611[1] = 0;
        v611[2] = 0;
        v612 = v611 + 3;
        a4[1] = (uint64_t)(v611 + 3);
      }
      v609[1] = (uint64_t)v612;
      sub_23681E668((uint64_t)(v612 - 3), v608);
      v346 = a6;
      v619 = a6;
      if (*(_BYTE *)(a1 + 50))
      {
        v620 = a4;
        v622 = a4[14];
        v621 = a4[15];
        if (v622 >= v621)
        {
          v624 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v622 - *v683) >> 3);
          v625 = v624 + 1;
          if (v624 + 1 > 0x666666666666666)
            sub_2367C3440();
          v626 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v621 - *v683) >> 3);
          if (2 * v626 > v625)
            v625 = 2 * v626;
          if (v626 >= 0x333333333333333)
            v627 = 0x666666666666666;
          else
            v627 = v625;
          v708[0] = a4 + 15;
          if (v627)
            v627 = (unint64_t)sub_2367DC0A4(v627);
          else
            v628 = 0;
          v629 = (_OWORD *)(v627 + 40 * v624);
          __src[0] = (void *)v627;
          __src[1] = v629;
          *((_QWORD *)&v707 + 1) = v627 + 40 * v628;
          *((_QWORD *)v629 + 4) = 0;
          *v629 = 0u;
          v629[1] = 0u;
          *(_QWORD *)&v707 = (char *)v629 + 40;
          sub_23681E890(v683, __src);
          v620 = a4;
          v623 = a4[14];
          sub_2367F6844((uint64_t)__src);
        }
        else
        {
          *(_QWORD *)(v622 + 32) = 0;
          *(_OWORD *)v622 = 0u;
          *(_OWORD *)(v622 + 16) = 0u;
          v623 = v622 + 40;
          a4[14] = v622 + 40;
        }
        v620[14] = v623;
        v619 = (unint64_t *)(v623 - 40);
        v346 = a6;
      }
      sub_2367F1484((uint64_t)__src, v619, 24 * (int)v608 + 256);
      v630 = sub_2368177D4(*(_DWORD *)(a1 + 12), v695[5 * v604]->i32, v608, v532, *((unsigned __int8 *)a4 + 24), *(_QWORD *)(a4[1] - 24), v619);
      if (v619)
        *(_QWORD *)&v707 = *v619 - (unint64_t)__src[0];
      sub_2367F14F8((uint64_t)__src, v619, a7, v587);
      if (*(_BYTE *)(a1 + 50))
        sub_2367F15FC(v346, (uint64_t *)v619);
      v603 += v630;
      v596 = v604 + 1;
      v594 = v695;
    }
    while (v604 + 1 < 0xCCCCCCCCCCCCCCCDLL * (v696 - v695));
  }
  __src[0] = &v695;
  sub_23681EE6C((void ***)__src);
  if (v346)
    v688 = *v346 - (unint64_t)v687[0];
  sub_2367F14F8((uint64_t)v687, v346, a7, v587);
  if (v587)
    *(_QWORD *)(v587 + 40 * a7) -= 0x5555555555555555 * ((a4[1] - *a4) >> 3);
  __src[0] = &v685;
  sub_23681EE6C((void ***)__src);
  __src[0] = &v689;
  sub_2367D17E4((void ***)__src);
  return &v652[(_QWORD)v603];
}

void sub_23681C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62)
{
  if (__p)
    operator delete(__p);
  a62 = &a56;
  sub_23681EE6C((void ***)&a62);
  a56 = (uint64_t)&a37;
  sub_23681EE6C((void ***)&a56);
  a40 = (uint64_t)&a45;
  sub_2367D17E4((void ***)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_23681CCB4(uint64_t a1, unint64_t a2, int a3, int ***a4, _DWORD *a5)
{
  int **v8;
  int *v9;
  int *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  char *v32;
  int **v38;
  unint64_t v39;
  float v40;
  int *v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  int32x2_t v48;
  int32x2_t v49;
  float32x2_t v50;
  float v51;
  char **v54;
  char **v55;
  int **v57;
  _QWORD v58[3];
  void **v59;

  *(_OWORD *)(a1 + 8) = 0u;
  v54 = (char **)(a1 + 8);
  v55 = (char **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_23681E528(v58, a2);
  v8 = *a4;
  v57 = a4[1];
  if (*a4 != v57)
  {
    do
    {
      v9 = *v8;
      v10 = v8[1];
      while (v9 != v10)
      {
        v11 = *v9;
        v12 = v9[1];
        v13 = a5[6];
        if ((*v9 & 1) == 0)
          v13 = 16;
        if (v13 <= v12)
        {
          v14 = __clz(v12) ^ 0x1F;
          v15 = (-1 << v14) + v12;
          v16 = a5[5];
          if ((v11 & 1) == 0)
            v16 = 4;
          v17 = a5[7];
          if ((v11 & 1) == 0)
            LOBYTE(v17) = 2;
          v12 = ((v14 - v16) << (((v11 << 31 >> 31) & a5[8]) + v17))
              + v13
              + (v15 & ~(-1 << ((v11 << 31 >> 31) & a5[8])))
              + (v15 >> (v14 - v17) << ((v11 << 31 >> 31) & a5[8]));
        }
        sub_23681E5B0(v58[0] + 40 * (*v9 >> 1), (int)(((*v9 << 31 >> 31) & a5[3]) + v12));
        v9 += 2;
      }
      v8 += 3;
    }
    while (v8 != v57);
  }
  *(_QWORD *)a1 = 0;
  if (a2)
  {
    v18 = 0;
    v19 = (_QWORD *)(v58[0] + 8);
    v20 = a2;
    do
    {
      if (v18 <= (uint64_t)(*v19 - *(v19 - 1)) >> 2)
        v18 = (uint64_t)(*v19 - *(v19 - 1)) >> 2;
      v19 += 5;
      --v20;
    }
    while (v20);
    *(_QWORD *)a1 = v18;
  }
  else
  {
    v18 = 0;
  }
  sub_23681D238(v54, v18 * a2);
  sub_23681D238(v55, a2);
  if (a2)
  {
    v22 = 0;
    v23 = 0;
    v24 = v58[0];
    v25 = vdup_n_s32(0xC0D55555);
    v26 = (float32x2_t)vdup_n_s32(0x3F3E11C7u);
    v27 = (float32x2_t)vdup_n_s32(0x3FB6E02Bu);
    v28 = (float32x2_t)vdup_n_s32(0x3E32458Cu);
    v29 = (float32x2_t)vdup_n_s32(0x3F813CEDu);
    v30 = (float32x2_t)vdup_n_s32(0xB5F85AB0);
    v31 = (float32x2_t)vdup_n_s32(0x3F7D8625u);
    v32 = *v55;
    __asm { FMOV            V20.2S, #-1.0 }
    do
    {
      v38 = (int **)(v24 + 40 * v23);
      v39 = (unint64_t)v38[3];
      v40 = 1.0 / (float)((float)v39 + 0.00000001);
      v41 = *v38;
      v42 = 0.0;
      v43 = *(_QWORD *)(v24 + 40 * v23 + 8) - (_QWORD)v41;
      if (v43)
      {
        v44 = v43 >> 2;
        if (v44 <= 1)
          v44 = 1;
        v45 = (_DWORD *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)a1 * v22);
        do
        {
          v47 = *v41++;
          v46 = v47;
          if ((_DWORD)v47)
          {
            v21.i32[0] = 0;
            if (v39 != v46)
            {
              *(float *)v21.i32 = v40 * (float)v46;
              v48 = vdup_lane_s32(v21, 0);
              v49 = vadd_s32(v48, v25);
              v50 = vadd_f32((float32x2_t)vsub_s32(v48, (int32x2_t)vand_s8((int8x8_t)v49, (int8x8_t)0x7F0000007FLL)), _D20);
              v21 = (int32x2_t)vadd_f32(vdiv_f32(vmla_f32(v30, v50, vmla_f32(v27, v26, v50)), vmla_f32(v31, v50, vmla_f32(v29, v28, v50))), vcvt_f32_s32(vshr_n_s32(v49, 0x17uLL)));
              *(float *)v21.i32 = -*(float *)v21.i32;
              v51 = ceilf(*(float *)v21.i32);
              if (a3)
                *(float *)v21.i32 = v51;
            }
          }
          else
          {
            v21.i32[0] = 12.0;
          }
          *v45++ = v21.i32[0];
          v42 = v42 + (float)(*(float *)v21.i32 * (float)(int)v46);
          --v44;
        }
        while (v44);
      }
      *(float *)&v32[4 * v23++] = fmaxf(6.0 - (float)(v42 * v40), 0.0);
      v22 += 4;
    }
    while (v23 != a2);
  }
  v59 = (void **)v58;
  sub_23681EE6C(&v59);
  return a1;
}

void sub_23681CFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;
  void *v20;

  v19 = *a12;
  if (*a12)
  {
    *(_QWORD *)(a13 + 40) = v19;
    operator delete(v19);
  }
  v20 = *a11;
  if (*a11)
  {
    *(_QWORD *)(a13 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_23681D030(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3440();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3488();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v3[2];
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      v19 = *(_QWORD **)a1;
      v3 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        v20 = v3;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          v3 = v20;
        }
        while (v20 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      v24 = *(_QWORD **)(a1 + 8);
      do
      {
        v26 = (void *)*(v24 - 3);
        v24 -= 3;
        v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        v3 = v24;
      }
      while (v24 != v23);
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

void sub_23681D238(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    sub_2367C3440();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_2367C3454(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void sub_23681D338(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int **v7;
  unint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  void **v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void **v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  unsigned int v60;
  float v61;
  float v62;
  unsigned int v63;
  float v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  float v70;
  _QWORD *v71;
  uint64_t v72;
  float v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  double v111;
  int ***v112;
  uint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123[36];
  char *v124[3];
  uint64_t v125;
  float *v126;
  float *v127;
  char *v128;
  char *v129;

  sub_23681CCB4((uint64_t)&v125, a2, *(unsigned __int8 *)(a1 + 48), (int ***)a3, (_DWORD *)a4);
  v114 = (uint64_t *)a5;
  sub_23681D030(a5, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  memset(v124, 0, sizeof(v124));
  v7 = *(int ***)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v115 = 0;
    v8 = 0;
    v9 = 0.0;
    v112 = (int ***)a3;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 16);
      if (v8 >= (*(_QWORD *)(a1 + 24) - v10) >> 3)
        v11 = 0;
      else
        v11 = *(_QWORD *)(v10 + 8 * v8);
      v116 = v8;
      v12 = 3 * v8;
      v13 = (unint64_t *)&v7[3 * v8];
      v14 = *v114;
      v15 = v13 + 1;
      v16 = v13[1] - *v13;
      sub_23681D238(v124, (v16 >> 3) + 1);
      v17 = *v13;
      v18 = (uint64_t)(v13[1] - *v13) >> 3;
      if (v13[1] != *v13)
      {
        v19 = v125;
        v20 = v126;
        if (v18 <= 1)
          v21 = 1;
        else
          v21 = (uint64_t)(*v15 - *v13) >> 3;
        v22 = (float *)(v124[0] + 4);
        v23 = (unsigned int *)(v17 + 4);
        v24 = (unsigned int *)(v17 + 4);
        do
        {
          v26 = *v24;
          v24 += 2;
          v25 = v26;
          v27 = __clz(v26);
          v28 = 29 - v27;
          v29 = (((-1 << (v27 ^ 0x1F)) + v26) >> (29 - v27)) - 4 * v27 + 124;
          if (v26 < 0x10)
          {
            v30 = 0;
          }
          else
          {
            v25 = v29;
            v30 = v28;
          }
          *v22 = (float)(v20[v19 * ((unint64_t)*(v23 - 1) >> 1) + v25] + (float)v30) + *(v22 - 1);
          ++v22;
          v23 = v24;
          --v21;
        }
        while (v21);
      }
      v31 = (void **)(v14 + 8 * v12);
      sub_2368069B0(v31, v18);
      v115 += v16 >> 3;
      v32 = (uint64_t)(*v15 - *v13) >> 3;
      v33 = *(unsigned int *)(a4 + 16);
      v34 = 0x100000;
      if (v32 < 0x100000)
        v34 = (uint64_t)(*v15 - *v13) >> 3;
      v35 = 1;
      do
      {
        v36 = v35;
        v35 *= 2;
      }
      while (v36 < v34);
      sub_23681DBD0((uint64_t)v123, *v13, v32, v36, *(unsigned int *)(a4 + 16), (uint64_t)(*v15 - *v13) >> 3, v11);
      v121 = 0;
      v122 = 0;
      v37 = *v13;
      if (*v15 != *v13)
        break;
LABEL_117:
      sub_23681E430(v123);
      v8 = v116 + 1;
      v7 = *v112;
      if (v116 + 1 >= 0xAAAAAAAAAAAAAAABLL * (v112[1] - *v112))
      {
        v111 = (double)v115;
        goto LABEL_120;
      }
    }
    v38 = 0;
    LOBYTE(v39) = 0;
    v40 = v14 + 24 * v116;
    v41 = (void **)(v40 + 8);
    v42 = (_QWORD *)(v40 + 16);
    v117 = v33;
    while (1)
    {
      v43 = (char *)*v41;
      if ((unint64_t)*v41 >= *v42)
      {
        v45 = (v43 - (_BYTE *)*v31) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          sub_2367C3440();
        v46 = *v42 - (_QWORD)*v31;
        v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1))
          v47 = v45 + 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
          v48 = (unint64_t)sub_2367CA1FC(v48);
        else
          v49 = 0;
        v50 = (_QWORD *)(v48 + 8 * v45);
        *v50 = *(_QWORD *)(v37 + 8 * v38);
        v44 = v50 + 1;
        v51 = (char *)*v41;
        v52 = (char *)*v31;
        if (*v41 != *v31)
        {
          do
          {
            v53 = *((_QWORD *)v51 - 1);
            v51 -= 8;
            *--v50 = v53;
          }
          while (v51 != v52);
          v51 = (char *)*v31;
        }
        *v31 = v50;
        *v41 = v44;
        *v42 = v48 + 8 * v49;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v43 = *(_QWORD *)(v37 + 8 * v38);
        v44 = v43 + 8;
      }
      *v41 = v44;
      if ((v39 & 1) == 0)
        sub_23681E23C(v123, v38);
      sub_23681EF30((uint64_t *)v123, v38, &v121, &v122);
      v54 = v122;
      if (v122 >= v33)
        break;
      LOBYTE(v39) = 0;
LABEL_99:
      ++v38;
      v37 = *v13;
      if (v38 >= (uint64_t)(*v15 - *v13) >> 3)
        goto LABEL_117;
    }
    if (v122 > 0xFF || (v55 = v15, v56 = v38 + 1, v38 + 1 >= (uint64_t)(*v55 - *v13) >> 3))
    {
      LODWORD(v39) = 0;
    }
    else
    {
      sub_23681E23C(v123, v38 + 1);
      v119 = 0;
      v120 = 0;
      sub_23681EF30((uint64_t *)v123, v38 + 1, &v119, &v120);
      if (v120 <= v54)
      {
        LODWORD(v39) = 1;
      }
      else
      {
        v122 = v120;
        v121 = v119;
        v57 = *v13;
        v58 = (char *)*v41;
        if ((unint64_t)*v41 >= *v42)
        {
          v102 = (v58 - (_BYTE *)*v31) >> 3;
          if ((unint64_t)(v102 + 1) >> 61)
            sub_2367C3440();
          v103 = *v42 - (_QWORD)*v31;
          v104 = v103 >> 2;
          if (v103 >> 2 <= (unint64_t)(v102 + 1))
            v104 = v102 + 1;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
            v105 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v105 = v104;
          if (v105)
            v105 = (unint64_t)sub_2367CA1FC(v105);
          else
            v106 = 0;
          v107 = (_QWORD *)(v105 + 8 * v102);
          *v107 = *(_QWORD *)(v57 + 8 * v56);
          v59 = v107 + 1;
          v108 = (char *)*v41;
          v109 = (char *)*v31;
          if (*v41 != *v31)
          {
            do
            {
              v110 = *((_QWORD *)v108 - 1);
              v108 -= 8;
              *--v107 = v110;
            }
            while (v108 != v109);
            v108 = (char *)*v31;
          }
          *v31 = v107;
          *v41 = v59;
          *v42 = v105 + 8 * v106;
          if (v108)
            operator delete(v108);
        }
        else
        {
          *(_QWORD *)v58 = *(_QWORD *)(v57 + 8 * v56);
          v59 = v58 + 8;
        }
        LODWORD(v39) = 0;
        *v41 = v59;
        v54 = v122;
        ++v38;
      }
    }
    v60 = v54 - *(_DWORD *)(a4 + 16);
    v61 = 0.0;
    v62 = 0.0;
    if (v60 >= 2)
    {
      v63 = __clz(v60);
      v60 = (((-1 << (v63 ^ 0x1F)) + v60) >> (v63 ^ 0x1F)) - v63 + 32;
      if (v60 >= 0x10)
        v60 = 16;
      v62 = (float)(v63 ^ 0x1F);
    }
    v64 = flt_236921D0C[v60];
    v65 = v121;
    v66 = v121;
    if (v121 >= 0x80)
    {
      v67 = __clz(v121);
      v68 = v67 ^ 0x1F;
      v66 = (((-1 << (v67 ^ 0x1F)) + v121) >> (v67 ^ 0x1F)) - v67 + 152;
      if (v66 >= 0x8A)
        v66 = 138;
      v61 = (float)v68;
    }
    v69 = *(float *)&v124[0][4 * v54 + 4 * v38] - *(float *)&v124[0][4 * v38];
    v70 = (float)(v62 + v64) + (float)(v61 + flt_236921D50[v66]);
    v71 = *v41;
    v72 = *((unsigned int *)*v41 - 2);
    v73 = v70 + *(float *)&v128[(2 * v72) & 0x1FFFFFFFCLL];
    if (v73 <= v69)
    {
      *((_DWORD *)v71 - 2) = v72 | 1;
      *((_DWORD *)v71 - 1) = v54 - v33;
      v88 = (char *)*v41;
      if ((unint64_t)*v41 >= *v42)
      {
        v90 = (v88 - (_BYTE *)*v31) >> 3;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61)
          sub_2367C3440();
        v92 = *v42 - (_QWORD)*v31;
        if (v92 >> 2 > v91)
          v91 = v92 >> 2;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        v94 = (char *)sub_2367CA1FC(v93);
        v96 = &v94[8 * v90];
        *(_DWORD *)v96 = 2 * *(_DWORD *)(a4 + 40);
        *((_DWORD *)v96 + 1) = v65;
        v97 = (char *)*v41;
        v98 = (char *)*v31;
        v99 = v96;
        if (*v41 != *v31)
        {
          do
          {
            v100 = *((_QWORD *)v97 - 1);
            v97 -= 8;
            *((_QWORD *)v99 - 1) = v100;
            v99 -= 8;
          }
          while (v97 != v98);
          v97 = (char *)*v31;
        }
        *v31 = v99;
        v89 = v96 + 8;
        *v41 = v96 + 8;
        *v42 = &v94[8 * v95];
        if (v97)
          operator delete(v97);
      }
      else
      {
        *(_DWORD *)v88 = 2 * *(_DWORD *)(a4 + 40);
        *((_DWORD *)v88 + 1) = v65;
        v89 = v88 + 8;
      }
      *v41 = v89;
      v9 = v9 + (float)(v69 - v73);
      if (!(_DWORD)v39)
        goto LABEL_77;
    }
    else
    {
      if (v54 >= 2)
      {
        v74 = 1;
        do
        {
          v75 = v74 + v38;
          v76 = *v13;
          if ((unint64_t)v71 >= *v42)
          {
            v77 = ((char *)v71 - (_BYTE *)*v31) >> 3;
            if ((unint64_t)(v77 + 1) >> 61)
              sub_2367C3440();
            v78 = *v42 - (_QWORD)*v31;
            v79 = v78 >> 2;
            if (v78 >> 2 <= (unint64_t)(v77 + 1))
              v79 = v77 + 1;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
              v80 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v80 = v79;
            if (v80)
              v80 = (unint64_t)sub_2367CA1FC(v80);
            else
              v81 = 0;
            v82 = (_QWORD *)(v80 + 8 * v77);
            *v82 = *(_QWORD *)(v76 + 8 * v75);
            v71 = v82 + 1;
            v83 = (char *)*v41;
            v84 = (char *)*v31;
            if (*v41 != *v31)
            {
              do
              {
                v85 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *--v82 = v85;
              }
              while (v83 != v84);
              v83 = (char *)*v31;
            }
            *v31 = v82;
            *v41 = v71;
            *v42 = v80 + 8 * v81;
            if (v83)
              operator delete(v83);
          }
          else
          {
            *v71++ = *(_QWORD *)(v76 + 8 * v75);
          }
          *v41 = v71;
          ++v74;
          v54 = v122;
        }
        while (v74 < v122);
        v33 = v117;
      }
      if (!(_DWORD)v39)
      {
LABEL_77:
        v86 = v54 - 1;
        if (v54 != 1)
        {
          v87 = v38 + 1;
          do
          {
            sub_23681E23C(v123, v87++);
            --v86;
          }
          while (v86);
        }
LABEL_98:
        v38 = v38 + v54 - 1;
        v15 = v13 + 1;
        goto LABEL_99;
      }
    }
    v39 = v54 - 2;
    if (v54 != 2)
    {
      v101 = v38 + 2;
      do
      {
        sub_23681E23C(v123, v101++);
        --v39;
      }
      while (v39);
    }
    goto LABEL_98;
  }
  v9 = 0.0;
  v111 = 0.0;
LABEL_120:
  if (v111 * 0.2 + 16.0 < v9)
    *(_BYTE *)(a4 + 8) = 1;
  if (v124[0])
    operator delete(v124[0]);
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
}

void sub_23681DB78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23681F1B8((_QWORD *)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t sub_23681DBD0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8;
  _DWORD **v11;
  char **v12;
  char **v13;
  _QWORD *v14;
  char **v15;
  _DWORD *v16;
  int *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint8x8_t v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  float v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  char **v60;
  char **v61;
  char **v62;
  int v63;
  int v64;
  int v65;

  v8 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (_DWORD **)(a1 + 8);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x7FFF00008000;
  *(_DWORD *)(a1 + 40) = 5;
  *(_OWORD *)(a1 + 48) = 0u;
  v12 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v13 = (char **)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v62 = (char **)(a1 + 144);
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a4 - 1;
  *(_QWORD *)(a1 + 216) = a5;
  *(_QWORD *)(a1 + 224) = a6;
  *(_OWORD *)(a1 + 232) = 0u;
  v14 = (_QWORD *)(a1 + 232);
  v15 = (char **)(a1 + 72);
  v60 = (char **)(a1 + 120);
  v61 = (char **)(a1 + 168);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 256;
  sub_2367C5284((char **)(a1 + 8), a3);
  if (v8)
  {
    v16 = *v11;
    v17 = (int *)(a2 + 4);
    do
    {
      v18 = *v17;
      v17 += 2;
      *v16++ = v18;
      --v8;
    }
    while (v8);
  }
  v19 = *(unsigned int *)(a1 + 32);
  v65 = -1;
  sub_2367CBAC8(v12, v19, &v65);
  v20 = *(_QWORD *)(a1 + 200);
  v64 = -1;
  sub_2367CBAC8(v13, v20, &v64);
  sub_2367C5284(v15, *(_QWORD *)(a1 + 200));
  v21 = *(_QWORD *)(a1 + 200);
  if (v21)
  {
    v22 = 0;
    v23 = *v15;
    do
    {
      *(_DWORD *)&v23[4 * v22] = v22;
      ++v22;
    }
    while (v21 > v22);
  }
  sub_2367C5284(v61, v21);
  v24 = *(_QWORD *)(a1 + 200) + 1;
  v63 = -1;
  sub_2367CBAC8(v60, v24, &v63);
  sub_2367C5284(v62, *(_QWORD *)(a1 + 200));
  v25 = *(_QWORD *)(a1 + 200);
  if (v25)
  {
    v26 = 0;
    v27 = *v62;
    do
    {
      *(_DWORD *)&v27[4 * v26] = v26;
      ++v26;
    }
    while (v25 > v26);
  }
  if (a7)
  {
    v28 = (_QWORD *)(a1 + 248);
    v29 = *(_QWORD *)(a1 + 240);
    v30 = 119;
    while (1)
    {
      v31 = v30;
      v32 = *((char *)&unk_236921C1C + 2 * v30) + *((char *)&unk_236921C1C + 2 * v30 + 1) * (_DWORD)a7;
      if (v32 <= 1)
        v33 = 1;
      else
        v33 = v32;
      if (v29)
      {
        v34 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          a2 = v33;
          if (v29 <= v33)
            a2 = v33 % v29;
        }
        else
        {
          a2 = ((_DWORD)v29 + 0x7FFFFFFF) & v33;
        }
        v35 = *(void ***)(*v14 + 8 * a2);
        if (v35)
        {
          v36 = *v35;
          if (*v35)
          {
            do
            {
              v37 = v36[1];
              if (v37 == v33)
              {
                if (*((_DWORD *)v36 + 4) == (_DWORD)v33)
                  goto LABEL_87;
              }
              else
              {
                if (v34.u32[0] > 1uLL)
                {
                  if (v37 >= v29)
                    v37 %= v29;
                }
                else
                {
                  v37 &= v29 - 1;
                }
                if (v37 != a2)
                  break;
              }
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
        }
      }
      v36 = operator new(0x18uLL);
      *v36 = 0;
      v36[1] = v33;
      *((_DWORD *)v36 + 4) = v33;
      *((_DWORD *)v36 + 5) = 0;
      v38 = (float)(unint64_t)(*(_QWORD *)(a1 + 256) + 1);
      v39 = *(float *)(a1 + 264);
      if (!v29 || (float)(v39 * (float)v29) < v38)
        break;
LABEL_77:
      v55 = (_QWORD *)*v14;
      v56 = *(_QWORD **)(*v14 + 8 * a2);
      if (v56)
      {
        *v36 = *v56;
      }
      else
      {
        *v36 = *v28;
        *v28 = v36;
        v55[a2] = v28;
        if (!*v36)
          goto LABEL_86;
        v57 = *(_QWORD *)(*v36 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v57 >= v29)
            v57 %= v29;
        }
        else
        {
          v57 &= v29 - 1;
        }
        v56 = (_QWORD *)(*v14 + 8 * v57);
      }
      *v56 = v36;
LABEL_86:
      ++*(_QWORD *)(a1 + 256);
LABEL_87:
      *((_DWORD *)v36 + 5) = v31;
      v30 = v31 - 1;
      if (!v31)
      {
        *(_QWORD *)(a1 + 272) = 120;
        return a1;
      }
    }
    v40 = (v29 & (v29 - 1)) != 0;
    if (v29 < 3)
      v40 = 1;
    v41 = v40 | (2 * v29);
    v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42)
      prime = (int8x8_t)v42;
    else
      prime = (int8x8_t)v41;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v29 = *(_QWORD *)(a1 + 240);
    }
    if (*(_QWORD *)&prime > v29)
      goto LABEL_43;
    if (*(_QWORD *)&prime < v29)
    {
      v50 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 256) / *(float *)(a1 + 264));
      if (v29 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        v50 = std::__next_prime(v50);
      }
      else
      {
        v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2)
          v50 = v52;
      }
      if (*(_QWORD *)&prime <= v50)
        prime = (int8x8_t)v50;
      if (*(_QWORD *)&prime >= v29)
      {
        v29 = *(_QWORD *)(a1 + 240);
      }
      else
      {
        if (prime)
        {
LABEL_43:
          if (*(_QWORD *)&prime >> 61)
            sub_2367C3488();
          v44 = operator new(8 * *(_QWORD *)&prime);
          v45 = (_QWORD *)*v14;
          *v14 = v44;
          if (v45)
            operator delete(v45);
          v46 = 0;
          *(int8x8_t *)(a1 + 240) = prime;
          do
            *(_QWORD *)(*v14 + 8 * v46++) = 0;
          while (*(_QWORD *)&prime != v46);
          v47 = (_QWORD *)*v28;
          if (*v28)
          {
            v48 = v47[1];
            v49 = (uint8x8_t)vcnt_s8(prime);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              if (v48 >= *(_QWORD *)&prime)
                v48 %= *(_QWORD *)&prime;
            }
            else
            {
              v48 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v14 + 8 * v48) = v28;
            v53 = (_QWORD *)*v47;
            if (*v47)
            {
              do
              {
                v54 = v53[1];
                if (v49.u32[0] > 1uLL)
                {
                  if (v54 >= *(_QWORD *)&prime)
                    v54 %= *(_QWORD *)&prime;
                }
                else
                {
                  v54 &= *(_QWORD *)&prime - 1;
                }
                if (v54 != v48)
                {
                  if (!*(_QWORD *)(*v14 + 8 * v54))
                  {
                    *(_QWORD *)(*v14 + 8 * v54) = v47;
                    goto LABEL_68;
                  }
                  *v47 = *v53;
                  *v53 = **(_QWORD **)(*v14 + 8 * v54);
                  **(_QWORD **)(*v14 + 8 * v54) = v53;
                  v53 = v47;
                }
                v54 = v48;
LABEL_68:
                v47 = v53;
                v53 = (_QWORD *)*v53;
                v48 = v54;
              }
              while (v53);
            }
          }
          v29 = (unint64_t)prime;
          goto LABEL_72;
        }
        v58 = (_QWORD *)*v14;
        *v14 = 0;
        if (v58)
          operator delete(v58);
        v29 = 0;
        *(_QWORD *)(a1 + 240) = 0;
      }
    }
LABEL_72:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v29 <= v33)
        a2 = v33 % v29;
      else
        a2 = v33;
    }
    else
    {
      a2 = ((_DWORD)v29 + 0x7FFFFFFF) & v33;
    }
    goto LABEL_77;
  }
  return a1;
}

void sub_23681E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, void **a16)
{
  _QWORD *v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  sub_23681EEE8(v21);
  v23 = *a15;
  if (*a15)
  {
    v16[22] = v23;
    operator delete(v23);
  }
  v24 = *a16;
  if (*a16)
  {
    v16[19] = v24;
    operator delete(v24);
  }
  v25 = *a14;
  if (*a14)
  {
    v16[16] = v25;
    operator delete(v25);
  }
  v26 = *v20;
  if (*v20)
  {
    v16[13] = v26;
    operator delete(v26);
  }
  v27 = *v19;
  if (*v19)
  {
    v16[10] = v27;
    operator delete(v27);
  }
  v28 = *v18;
  if (*v18)
  {
    v16[7] = v28;
    operator delete(v28);
  }
  v29 = *v17;
  if (*v17)
  {
    v16[2] = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_23681E23C(unint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  v2 = *result;
  if (a2 + 2 >= *result)
    v3 = 0;
  else
    v3 = ((*(_DWORD *)(result[1] + 4 * a2 + 4) << *((_DWORD *)result + 10)) ^ *(_DWORD *)(result[1] + 4 * a2) ^ (*(_DWORD *)(result[1] + 4 * (a2 + 2)) << (2 * *((_DWORD *)result + 10)))) & *((_DWORD *)result + 9);
  v4 = result[26];
  v5 = v4 & a2;
  *(_DWORD *)(result[12] + 4 * (v4 & a2)) = v3;
  v6 = v4 & a2;
  v7 = v3;
  v8 = result[6];
  v9 = *(_DWORD *)(v8 + 4 * v3);
  if (v9 != -1)
    *(_DWORD *)(result[9] + 4 * v6) = v9;
  *(_DWORD *)(v8 + 4 * v7) = v5;
  if (a2 && *(_DWORD *)(result[1] + 4 * a2) != *(_DWORD *)(result[1] + 4 * a2 - 4))
    *((_DWORD *)result + 48) = 0;
  v10 = *((unsigned int *)result + 48);
  v11 = result[25];
  v12 = v11 + a2;
  if (v11 + a2 >= v2)
    v13 = v2;
  else
    v13 = v11 + a2;
  if ((_DWORD)v10)
  {
    if (v4 > v10
      || (!*(_DWORD *)(result[1] + 4 * v13 - 4) ? (v14 = v12 > v2) : (v14 = 1),
          LODWORD(v15) = *((_DWORD *)result + 48),
          v14))
    {
      LODWORD(v15) = v10 - 1;
    }
  }
  else if (v13 <= a2)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    LODWORD(v15) = 0;
    v16 = a2;
    do
    {
      if (*(_DWORD *)(result[1] + 4 * v16))
        break;
      v15 = (v15 + 1);
      v16 = v15 + a2;
    }
    while (v15 + a2 < v13);
  }
  *((_DWORD *)result + 48) = v15;
  *(_DWORD *)(result[21] + 4 * v6) = v15;
  v17 = *((unsigned int *)result + 48);
  v18 = result[15];
  v19 = *(_DWORD *)(v18 + 4 * v17);
  if (v19 != -1)
  {
    *(_DWORD *)(result[18] + 4 * v6) = v19;
    v17 = *((unsigned int *)result + 48);
  }
  *(_DWORD *)(v18 + 4 * v17) = v5;
  return result;
}

uint64_t *sub_23681E37C(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_23681E430(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  sub_23681EEE8((uint64_t)(a1 + 29));
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[12];
  if (v5)
  {
    a1[13] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_23681E4C8(uint64_t result, int a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;

  v4 = __clz(a4 + 1) ^ 0x3F;
  if (((a4 + 1) & a4) != 0)
    v5 = v4 + 1;
  else
    v5 = v4;
  v6 = v5 + *a3;
  v7 = __clz(result + 1) ^ 0x1F;
  if ((((_DWORD)result + 1) & result) != 0)
    v8 = v7 + 1;
  else
    v8 = v7;
  v9 = result - a2 + 1;
  v10 = __clz(v9) ^ 0x1F;
  if ((v9 & ((_DWORD)result - a2)) != 0)
    ++v8;
  v11 = v8 + v10 + v6;
  if (a4 != result)
    v6 = v11;
  *a3 = v6;
  return result;
}

_QWORD *sub_23681E528(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367DC058(a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    v6 = 40 * a2;
    do
    {
      *(_DWORD *)(v4 + 32) = 0;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      v4 += 40;
      v6 -= 40;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_23681E59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23681EE6C(&a9);
  _Unwind_Resume(a1);
}

void sub_23681E5B0(uint64_t a1, unint64_t a2)
{
  char *v4;

  v4 = *(char **)a1;
  if (a2 >= (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2)
  {
    sub_2367C5284((char **)a1, (a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v4 = *(char **)a1;
  }
  ++*(_DWORD *)&v4[4 * a2];
  ++*(_QWORD *)(a1 + 24);
}

uint64_t sub_23681E60C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_2368171F0(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23681E668(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  void *v25;

  v4 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*(_QWORD *)a1] >> 4);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 4) >= v6)
    {
      bzero(*(void **)(a1 + 8), 48 * ((48 * v6 - 48) / 0x30) + 48);
      *(_QWORD *)(a1 + 8) = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
      return;
    }
    if (a2 > 0x555555555555555)
      sub_2367C3440();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    if (v10 > 0x555555555555555)
      sub_2367C3488();
    v11 = 3 * v10;
    v12 = (char *)operator new(48 * v10);
    v13 = &v12[48 * v5];
    v14 = &v12[16 * v11];
    v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v3[v17];
        *((_WORD *)v18 - 24) = *(_WORD *)&v3[v17 - 48];
        *((_QWORD *)v18 - 3) = 0;
        *(_OWORD *)(v18 - 40) = *(_OWORD *)&v3[v17 - 40];
        *((_QWORD *)v18 - 3) = *(_QWORD *)&v3[v17 - 24];
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 3) = 0;
        v20 = *(_QWORD *)&v3[v17 - 16];
        *((_DWORD *)v18 - 2) = *(_DWORD *)&v3[v17 - 8];
        *((_QWORD *)v18 - 2) = v20;
        v17 -= 48;
      }
      while (&v3[v17] != v4);
      v21 = &v13[v17];
      v22 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v22)
      {
        do
        {
          v23 = (void *)*((_QWORD *)v3 - 5);
          if (v23)
          {
            *((_QWORD *)v3 - 4) = v23;
            operator delete(v23);
          }
          v3 -= 48;
        }
        while (v3 != v22);
        v3 = v22;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v24 = &v4[48 * a2];
    while (v3 != v24)
    {
      v25 = (void *)*((_QWORD *)v3 - 5);
      if (v25)
      {
        *((_QWORD *)v3 - 4) = v25;
        operator delete(v25);
      }
      v3 -= 48;
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
}

uint64_t *sub_23681E890(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      v8 = *(_QWORD *)(v2 + v5 - 24);
      v9 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v6 - 24) = v8;
      *(_QWORD *)(v6 - 16) = v9;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t *sub_23681E91C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 40) = 0;
    *(_QWORD *)(v4 - 32) = 0;
    v4 -= 40;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    v6 = *(_QWORD *)(v2 + 24);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    *(_QWORD *)(v4 + 24) = v6;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23681E99C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 40);
    *(_QWORD *)(a1 + 16) = v2 - 40;
    if (v4)
    {
      *(_QWORD *)(v2 - 32) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_23681E9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = sub_2367CBEFC((_QWORD *)v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v6 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_23681EA60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_23681EA68(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    sub_2367C3440();
  v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v7 = 0x666666666666666;
  else
    v7 = v3;
  v18 = v6;
  if (v7)
  {
    v9 = (char *)sub_2367DC0A4(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = &v9[40 * v2];
  v15[0] = v9;
  v15[1] = v10;
  v16 = v10;
  v17 = &v9[40 * v8];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  sub_2367CBEFC(v10, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v11 = &v9[40 * v2];
  v12 = *(_QWORD *)(a2 + 24);
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v11 + 3) = v12;
  v16 += 40;
  sub_23681E91C(a1, v15);
  v13 = a1[1];
  sub_23681E99C((uint64_t)v15);
  return v13;
}

void sub_23681EB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23681E99C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23681EB94(void **a1, unint64_t a2, _OWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = (char *)*a1;
  v5 = (char *)a1[1];
  v7 = (v5 - (_BYTE *)*a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[16 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 4)
    {
      v22 = &v5[16 * (a2 - v7)];
      v23 = 16 * a2 - 16 * v7;
      do
      {
        *(_OWORD *)v5 = *a3;
        v5 += 16;
        v23 -= 16;
      }
      while (v23);
      a1[1] = v22;
    }
    else
    {
      if (a2 >> 60)
        sub_2367C3440();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 3;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)sub_2367CD8AC(v12);
      v15 = &v13[16 * v7];
      v16 = &v13[16 * a2];
      v17 = 16 * a2 - 16 * v7;
      v18 = v15;
      do
      {
        *(_OWORD *)v18 = *a3;
        v18 += 16;
        v17 -= 16;
      }
      while (v17);
      v19 = &v13[16 * v14];
      v21 = (char *)*a1;
      v20 = (char *)a1[1];
      if (v20 != *a1)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v20 - 1);
          v15 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        v20 = (char *)*a1;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

_QWORD *sub_23681ECBC(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 60)
      sub_2367C3440();
    result = sub_2367CD8AC(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * v12];
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 4;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v18 = (void *)*result;
LABEL_20:
    result = memmove(v18, __src, v13);
    goto LABEL_21;
  }
  v17 = &__src[16 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_20;
  }
LABEL_21:
  *v14 = &v9[v13];
  return result;
}

_QWORD *sub_23681EDEC(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C3404(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23681EE50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23681EE6C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 5);
        v6 -= 40;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 4) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_23681EEE8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *sub_23681EF30(uint64_t *result, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  signed int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD *v29;
  int v30;
  int v31;
  uint64_t v32;

  v5 = a2;
  v6 = result;
  *a3 = 0;
  *a4 = 1;
  v7 = result[26] & a2;
  if (a2 + 2 >= (unint64_t)*result)
    v31 = 0;
  else
    v31 = ((*(_DWORD *)(result[1] + 4 * a2 + 4) << *((_DWORD *)result + 10)) ^ *(_DWORD *)(result[1] + 4 * a2) ^ (*(_DWORD *)(result[1] + 4 * (a2 + 2)) << (2 * *((_DWORD *)result + 10)))) & *((_DWORD *)result + 9);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v32 = result[9];
  v11 = *(_DWORD *)(v32 + 4 * v7);
  if ((int)*result >= *((_DWORD *)result + 56) + (int)a2)
    v12 = *((_DWORD *)result + 56) + a2;
  else
    v12 = *result;
  v30 = v12 + ~(_DWORD)a2;
  v29 = result + 29;
  while (1)
  {
    v13 = v7 - v11;
    if (v7 < v11)
      v13 += v6[26] + 1;
    if (v8 > (int)v13)
      return result;
    if ((int)v13 < 1)
    {
      LODWORD(v20) = 0;
    }
    else
    {
      v14 = v5 - v13;
      v15 = *((_DWORD *)v6 + 48);
      LODWORD(v16) = v5;
      if (v15 >= 4)
      {
        v17 = v15 - 1;
        if (*(_DWORD *)(v6[21] + 4 * v11) < v17)
          v17 = *(_DWORD *)(v6[21] + 4 * v11);
        if (v17 + v5 >= v12)
          v17 = v30;
        LODWORD(v16) = v17 + v5;
        v14 += v17;
      }
      v18 = v12 - v16;
      if (v12 > (int)v16)
      {
        v16 = (int)v16;
        v19 = 4 * v14;
        while (*(_DWORD *)(v6[1] + 4 * v16) == *(_DWORD *)(v6[1] + v19))
        {
          ++v16;
          v19 += 4;
          if (!--v18)
          {
            LODWORD(v16) = v12;
            break;
          }
        }
      }
      v20 = (v16 - v5);
      if (v6[27] <= v20 && (int)v20 + 2 >= v10)
      {
        result = sub_23681E37C(v29, v13);
        if (result)
          LODWORD(v22) = *((_DWORD *)result + 5);
        else
          v22 = v6[34] + v13 - 1;
        if (*a4 < v20 || *a4 == v20 && *a3 > (unint64_t)(int)v22)
        {
          *a4 = v20;
          *a3 = (int)v22;
        }
        if (v20 > v10)
          v10 = v20;
      }
    }
    if (++v9 >= *((_DWORD *)v6 + 70))
      return result;
    v23 = *((_DWORD *)v6 + 48);
    if (v23 < 3 || v20 <= v23)
    {
      v26 = *(unsigned int *)(v32 + 4 * v11);
      if (v11 == (_DWORD)v26)
        return result;
      v27 = *(_DWORD *)(v6[12] + 4 * v26);
      v11 = *(_DWORD *)(v32 + 4 * v11);
      v8 = v13;
      if (v27 != v31)
        return result;
    }
    else
    {
      v24 = *(unsigned int *)(v6[18] + 4 * v11);
      if (v11 == (_DWORD)v24)
        return result;
      v25 = *(_DWORD *)(v6[21] + 4 * v24);
      v11 = *(_DWORD *)(v6[18] + 4 * v11);
      v8 = v13;
      if (v25 != v23)
        return result;
    }
  }
}

_QWORD *sub_23681F1B8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_23681F1F8(unsigned int **a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t *a5)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int16 *v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned int **v89;
  uint64_t v90;
  uint64_t v91;
  void *__p[3];
  char *v93;
  char *v94;
  char *v95;

  v9 = a1;
  if (*(_BYTE *)(a2 + 24))
  {
    v10 = *a1;
    v11 = a1[1];
    if (*a1 == v11)
      return 0;
    v12 = 0;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      if ((v13 & 1) != 0)
        v15 = (_DWORD *)(a2 + 76);
      else
        v15 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 16 * *(unsigned __int8 *)(*a3 + a4 + (v13 >> 1)));
      v16 = v15[1];
      if (v16 <= v14)
      {
        v19 = __clz(v14) ^ 0x1F;
        v20 = v19 - *v15;
        v22 = v15[2];
        v21 = v15[3];
        v23 = (v20 << (v21 + v22))
            + v16
            + (((-1 << v19) + v14) >> (v19 - v22) << v21)
            + (((-1 << v19) + v14) & ~(-1 << v21));
        v17 = v19 - (v21 + v22);
        v18 = (v14 >> v21) & ~(-1 << (v19
                                                    - (v21
                                                     + v22)));
        v14 = v23;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      v24 = *(_QWORD *)(*(_QWORD *)a2 + 24 * *(unsigned __int8 *)(*a3 + a4 + (v13 >> 1)))
          + 48 * ((((int)((_DWORD)v13 << 31) >> 31) & *(_DWORD *)(a2 + 68)) + v14);
      v25 = *(unsigned __int16 *)(v24 + 42);
      LODWORD(v24) = *(unsigned __int8 *)(v24 + 40);
      *(_QWORD *)(a5[3] + (*a5 >> 3)) = ((((unint64_t)v18 << v24) | v25) << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
      *a5 += v17 + v24;
      v12 += v17;
      v10 += 2;
    }
    while (v10 != v11);
    return v12;
  }
  v93 = 0;
  v94 = 0;
  v95 = 0;
  memset(__p, 0, sizeof(__p));
  v26 = (char *)a1[1] - (char *)*a1;
  v27 = v26 >> 3;
  if (v26)
  {
    if (v26 < 0)
      sub_2367C3440();
    v93 = (char *)sub_2367CA1FC(v26 >> 3);
    v94 = v93;
    v95 = &v93[8 * v28];
    v27 = ((char *)v9[1] - (char *)*v9) >> 3;
  }
  sub_23681F8EC((unint64_t *)__p, v27);
  v91 = 0;
  v29 = (char *)v9[1] - (char *)*v9;
  v30 = v29 >> 3;
  v89 = v9;
  if (*(_BYTE *)(a2 + 64) || a3[1] - *a3 > 1uLL)
  {
    if ((int)v30 >= 1)
    {
      v31 = 0;
      v12 = 0;
      v86 = 0;
      v32 = (v29 >> 3) + 1;
      v33 = 1245184;
      v87 = a4;
      v88 = a3;
      do
      {
        v34 = &(*v9)[2 * (v32 - 2)];
        v36 = *v34;
        v35 = v34[1];
        v37 = *(unsigned __int8 *)(*a3 + a4 + (v36 >> 1));
        v38 = (_DWORD *)(a2 + 76);
        if ((v36 & 1) == 0)
          v38 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 16 * v37);
        v39 = v38[1];
        if (v39 <= v35)
        {
          v42 = __clz(v35) ^ 0x1F;
          v43 = (-1 << v42) + v35;
          v44 = v42 - *v38;
          v46 = v38[2];
          v45 = v38[3];
          v47 = v45 + v46;
          v48 = (v44 << (v45 + v46)) + v39 + (v43 >> (v42 - v46) << v45);
          v49 = v43 & ~(-1 << v45);
          v50 = v35 >> v45;
          v35 = v48 + v49;
          v40 = v42 - v47;
          v41 = v50 & ~(-1 << (v42 - v47));
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        v51 = *(_DWORD *)(a2 + 68);
        v52 = *(_QWORD *)(*(_QWORD *)a2 + 24 * v37);
        v90 = v40;
        if (v40)
        {
          if (v86 + (unint64_t)v40 >= 0x39)
          {
            sub_2367EE994((uint64_t)&v93, &v91);
            sub_23681F990((unint64_t *)__p, v86);
            v86 = 0;
            v31 = 0;
          }
          v31 = (v31 << v90) | v41;
          v91 = v31;
          v86 += v90;
        }
        v53 = (((int)((_DWORD)v36 << 31) >> 31) & v51) + v35;
        v54 = v33 >> 20;
        v55 = *(unsigned __int16 *)(v52 + 48 * v53);
        LODWORD(v56) = HIWORD(v33);
        if (v33 >> 20 >= v55)
          v56 = v56;
        else
          v56 = v33;
        v57 = v52 + 48 * v53;
        v58 = (unint64_t)(*(_QWORD *)(v57 + 32) * v56) >> 44;
        v59 = *(unsigned __int16 *)(*(_QWORD *)(v57 + 8) + 2 * (v56 - (_DWORD)v58 * v55));
        if (v54 >= v55)
          v60 = (unsigned __int16)v33;
        else
          v60 = 0;
        if (v54 >= v55)
        {
          a3 = v88;
          if ((unint64_t)(v86 - 41) <= 0xFFFFFFFFFFFFFFC6)
          {
            sub_2367EE994((uint64_t)&v93, &v91);
            sub_23681F990((unint64_t *)__p, v86);
            v86 = 0;
            v31 = 0;
            a3 = v88;
          }
          v31 = v60 | (v31 << 16);
          v91 = v31;
          v86 += 16;
        }
        else
        {
          a3 = v88;
        }
        v33 = v59 + ((_DWORD)v58 << 12);
        v9 = v89;
        v12 += v90;
        --v32;
        a4 = v87;
      }
      while (v32 > 1);
      goto LABEL_64;
    }
  }
  else if ((int)v30 >= 1)
  {
    v31 = 0;
    v12 = 0;
    v86 = 0;
    v61 = (v29 >> 3) + 1;
    v33 = 1245184;
    do
    {
      v62 = *(_DWORD **)(a2 + 32);
      v63 = (*v9)[2 * (v61 - 2) + 1];
      v64 = v62[1];
      if (v64 <= v63)
      {
        v67 = __clz(v63) ^ 0x1F;
        v68 = v62[2];
        v69 = v62[3];
        v66 = (unsigned __int16 *)(**(_QWORD **)a2
                                 + 48
                                 * (((v67 - *v62) << (v69 + v68))
                                  + v64
                                  + (((-1 << v67) + v63) & ~(-1 << v69))
                                  + (((-1 << v67) + v63) >> (v67 - v68) << v69)));
        v65 = v67 - (v69 + v68);
        if (v67 == v69 + v68)
        {
          v65 = 0;
        }
        else
        {
          if ((unint64_t)(v86 + v65) >= 0x39)
          {
            sub_2367EE994((uint64_t)&v93, &v91);
            sub_23681F990((unint64_t *)__p, v86);
            v86 = 0;
            v31 = 0;
          }
          v31 = (v31 << v65) | (v63 >> v69) & ~(-1 << v65);
          v91 = v31;
          v86 += v65;
        }
      }
      else
      {
        v65 = 0;
        v66 = (unsigned __int16 *)(**(_QWORD **)a2 + 48 * v63);
      }
      v70 = v33 >> 20;
      v71 = *v66;
      LODWORD(v72) = HIWORD(v33);
      if (v33 >> 20 >= v71)
        v72 = v72;
      else
        v72 = v33;
      v73 = (unint64_t)(*((_QWORD *)v66 + 4) * v72) >> 44;
      v74 = *(unsigned __int16 *)(*((_QWORD *)v66 + 1) + 2 * (v72 - (_DWORD)v73 * v71));
      if (v70 >= v71)
        v75 = (unsigned __int16)v33;
      else
        v75 = 0;
      if (v70 >= v71)
      {
        if ((unint64_t)(v86 - 41) <= 0xFFFFFFFFFFFFFFC6)
        {
          sub_2367EE994((uint64_t)&v93, &v91);
          sub_23681F990((unint64_t *)__p, v86);
          v86 = 0;
          v31 = 0;
        }
        v31 = v75 | (v31 << 16);
        v91 = v31;
        v86 += 16;
      }
      v9 = v89;
      v33 = v74 + ((_DWORD)v73 << 12);
      v12 += v65;
      --v61;
    }
    while (v61 > 1);
    goto LABEL_64;
  }
  v31 = 0;
  v86 = 0;
  v12 = 0;
  v33 = 1245184;
LABEL_64:
  *(_QWORD *)(a5[3] + (*a5 >> 3)) = ((unint64_t)v33 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
  v76 = *a5;
  v77 = *a5 + 32;
  *a5 = v77;
  *(_QWORD *)(a5[3] + (v77 >> 3)) = (v31 << (v76 & 7)) | *(unsigned __int8 *)(a5[3] + (v77 >> 3));
  v78 = *a5 + v86;
  *a5 = v78;
  v79 = v93;
  v80 = ((unint64_t)(v94 - v93) >> 3);
  v81 = (char *)__p[0];
  while ((int)v80 > 0)
  {
    v82 = &v81[v80];
    v83 = &v79[8 * v80--];
    v84 = *(v82 - 1);
    *(_QWORD *)(a5[3] + (v78 >> 3)) = (*((_QWORD *)v83 - 1) << (v78 & 7)) | *(unsigned __int8 *)(a5[3] + (v78 >> 3));
    v78 = *a5 + v84;
    *a5 = v78;
  }
  if (v81)
    operator delete(v81);
  if (v79)
    operator delete(v79);
  return v12;
}

void sub_23681F8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_23681F8EC(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_2367C3440();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_23681F990(unint64_t *a1, char a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      sub_2367C3440();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void sub_23681FA78(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _BYTE v15[40];

  sub_2367F1484((uint64_t)v15, a5, 46 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) + 0x20000);
  v14 = sub_23681F1F8((unsigned int **)a1, a2, a3, a4, a5);
  sub_2367F14F8((uint64_t)v15, a5, a6, a7);
  if (a7)
    *(_QWORD *)(a7 + 40 * a6 + 8) += v14;
}

uint64_t sub_23681FB3C(uint64_t result, uint64_t a2, _BYTE *a3, _BYTE *a4, char a5)
{
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;

  *(_QWORD *)result = 0x400000002;
  *(_DWORD *)(result + 12) = 2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = -1;
  *(_WORD *)(result + 48) = 256;
  *(_WORD *)(result + 51) = 0;
  *(_BYTE *)(result + 50) = a5;
  v5 = *(_DWORD *)(a2 + 48);
  if (v5 < 3)
  {
    if (v5 == 2)
      v9 = 2;
    else
      v9 = 3;
    *(_DWORD *)(result + 8) = v9;
  }
  else
  {
    *(_DWORD *)result = 1;
    v6 = *(unsigned __int8 *)(a2 + 68);
    if (v5 > 6)
      v7 = 1;
    else
      v7 = 2;
    if (*(_BYTE *)(a2 + 68))
      v8 = *(_QWORD *)(a2 + 56) >= 3uLL;
    else
      v8 = 0;
    if (!v8)
      v7 = 0;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v5 < 9;
    if (a3 != a4 && *a3 || v5 <= 5 && v6)
      *(_DWORD *)(result + 4) = 2;
    else
      *(_DWORD *)(result + 4) = 0;
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    *(_QWORD *)(result + 40) = 12;
    if (*(_DWORD *)(a2 + 352))
    {
      if (v5 >= 2)
        v11 = 2;
      else
        v11 = 3;
      if (v5 > 5)
        v12 = 1;
      else
        v12 = v11;
      *(_DWORD *)(result + 8) = v12;
      if (v10 >= 2)
      {
        *(_DWORD *)(result + 4) = 1;
        *(_BYTE *)(result + 48) = 1;
      }
    }
  }
  return result;
}

_QWORD *sub_23681FC38(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2507FFD58;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_23681FC7C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2507FFD58;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23681FCD0(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  void **v12;
  void **v14;
  unsigned int v15;
  void **v16[10];
  char v17;
  uint64_t (**v18)();
  void *__p;
  void *v20;
  uint64_t v21;
  _QWORD v22[10];
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  sub_236820638((uint64_t)v22, *(_QWORD *)(a2 + 88));
  sub_2367D050C((uint64_t)v16, (uint64_t)v22);
  v4 = sub_2367CA62C(*(_DWORD *)(a2 + 272) == 1);
  v26 = 0;
  if (sub_236847910(a2, (uint64_t)v4, (_OWORD *)(a1 + 24), (uint64_t)v16, &v26))
  {
    v5 = 1;
  }
  else
  {
    sub_23680DBAC((uint64_t)&v14, (unsigned int *)(v26 + 96), a1 + 8);
    v5 = v15;
    if (!v15)
    {
      v6 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v14;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_DWORD *)(a2 + 96);
      if (!v7)
      {
        v8 = *(unsigned int **)(a2 + 416);
        if (v8 == *(unsigned int **)(a2 + 424))
          v7 = 0;
        else
          v7 = *v8;
      }
      *(_QWORD *)(a1 + 96) = v7;
      v9 = *(_DWORD *)(a2 + 100);
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 416);
        if (v10 == *(_QWORD *)(a2 + 424))
          v9 = 0;
        else
          v9 = *(_DWORD *)(v10 + 4);
      }
      *(_QWORD *)(a1 + 104) = v9;
    }
  }
  v14 = (void **)&v21;
  sub_2367D077C(&v14);
  v18 = &off_2507FFA18;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  for (i = 25; i != 10; i -= 5)
    sub_2367C2F38((uint64_t *)&v16[i]);
  if (v17 < 0)
    operator delete(v16[8]);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  v22[0] = &off_2507FFA40;
  v16[0] = (void **)&v25;
  sub_2367E8DB8(v16);
  v22[6] = &off_2507FFA18;
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return v5;
}

void sub_23681FE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_2367EF354(&a11);
  sub_2367E9BFC((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_23681FEB0(uint64_t a1, uint64_t a2, __int128 *a3, float *a4)
{
  int v8;
  int *v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t n;
  uint64_t ii;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t jj;
  void **v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  __int128 v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  size_t v63;
  void **v64[10];
  char v65;
  uint64_t (**v66)();
  void *__p;
  void *v68;
  uint64_t v69;
  _QWORD v70[10];
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unsigned int v78[30];
  _BYTE v79[120];
  unsigned int v80;
  unsigned int v81[30];
  _BYTE v82[120];
  unsigned int v83;
  unsigned int v84[30];
  void **v85[15];
  unsigned int v86;

  if (!*(_QWORD *)(a1 + 88))
    return 1;
  v8 = *(_DWORD *)(a2 + 96);
  if (!v8)
  {
    v9 = *(int **)(a2 + 416);
    if (v9 == *(int **)(a2 + 424))
      v8 = 0;
    else
      v8 = *v9;
  }
  if (*(_QWORD *)(a1 + 96) != v8)
    return 1;
  v10 = *(_DWORD *)(a2 + 100);
  if (!v10)
  {
    v11 = *(_QWORD *)(a2 + 416);
    if (v11 == *(_QWORD *)(a2 + 424))
      v10 = 0;
    else
      v10 = *(_DWORD *)(v11 + 4);
  }
  if (*(_QWORD *)(a1 + 104) != v10)
    return 1;
  v74 = 0;
  sub_236820638((uint64_t)v70, *(_QWORD *)(a2 + 88));
  sub_2367D050C((uint64_t)v64, (uint64_t)v70);
  v12 = sub_2367CA62C(*(_DWORD *)(a2 + 272) == 1);
  if (!sub_236847910(a2, (uint64_t)v12, (_OWORD *)(a1 + 24), (uint64_t)v64, &v74))
  {
    sub_2367C431C((uint64_t)&v59, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    v13 = v63;
    if ((_DWORD)v63)
      goto LABEL_60;
    v55 = v59;
    v15 = (float *)v61;
    v61 = 0;
    v56 = v60;
    v57 = v15;
    v58 = v62;
    v16 = *(_QWORD *)(a1 + 88);
    v17 = *(_QWORD *)(v16 + 8);
    if (v17 < 8 || (v18 = *(_QWORD *)(v16 + 16), v18 <= 7))
    {
      if ((_DWORD)v55)
      {
        v19 = DWORD1(v55);
        if (DWORD1(v55))
        {
          do
          {
            bzero(v15, 4 * v55);
            v15 = (float *)((char *)v15 + v56);
            --v19;
          }
          while (v19);
        }
      }
LABEL_22:
      if (a4)
      {
        if (DWORD1(v55))
        {
          v20 = 0;
          v21 = v57;
          v22 = 0.0;
          do
          {
            v23 = v21;
            v24 = v55;
            if ((_DWORD)v55)
            {
              do
              {
                v25 = *v23++;
                v26 = v25;
                if (v22 < v25)
                  v22 = v26;
                --v24;
              }
              while (v24);
            }
            ++v20;
            v21 = (float *)((char *)v21 + v56);
          }
          while (v20 != DWORD1(v55));
        }
        else
        {
          v22 = 0.0;
        }
        *a4 = v22;
      }
      v15 = v57;
      v13 = 0;
      if (a3)
      {
        v35 = *a3;
        *a3 = v55;
        v55 = v35;
        v36 = v56;
        v37 = (char *)*((_QWORD *)a3 + 3);
        v56 = *((_QWORD *)a3 + 2);
        *((_QWORD *)a3 + 2) = v36;
        *((_QWORD *)a3 + 3) = v15;
        v15 = (float *)v37;
      }
      goto LABEL_51;
    }
    v27 = v74;
    sub_2367CA770((uint64_t)v85, v17, v18);
    v13 = v86;
    if (!v86)
    {
      v28 = (unsigned int *)(v27 + 96);
      sub_2367CA9E4((uint64_t)v84, (uint64_t)v85);
      v29 = (unsigned __int8 *)(v16 + 560);
      do
        __ldaxr(v29);
      while (__stlxr(1u, v29));
      v13 = sub_23680D5FC(v28, v16 + 24, v16 + 440, v16 + 568, v84);
      if (!(_DWORD)v13)
      {
        atomic_store(0, (unsigned __int8 *)(v16 + 560));
        v13 = sub_23680E1A8(v16, v84, (unsigned int *)&v55);
        if (!(_DWORD)v13)
        {
          v30 = *(_QWORD *)(v16 + 608);
          if (!v30)
            goto LABEL_39;
          v31 = *(_QWORD *)(v30 + 8);
          if (v31 < 8)
            goto LABEL_39;
          v32 = *(_QWORD *)(v30 + 16);
          if (v32 < 8)
            goto LABEL_39;
          sub_2367CA770((uint64_t)v82, v31, v32);
          v13 = v83;
          if (!v83)
          {
            sub_2367CA9E4((uint64_t)v81, (uint64_t)v82);
            sub_23680DF50((uint64_t)v79, v28);
            v13 = v80;
            if (v80)
            {
              v45 = 1;
            }
            else
            {
              sub_2367CA9E4((uint64_t)v78, (uint64_t)v79);
              v46 = *(_QWORD *)(v16 + 608);
              v47 = (unsigned __int8 *)(v46 + 560);
              do
                __ldaxr(v47);
              while (__stlxr(1u, v47));
              v13 = sub_23680D5FC(v78, v16 + 24, v46 + 440, *(_QWORD *)(v16 + 608) + 568, v81);
              if ((_DWORD)v13)
              {
                v45 = 1;
              }
              else
              {
                atomic_store(0, (unsigned __int8 *)(*(_QWORD *)(v16 + 608) + 560));
                v77 = 0;
                v75 = 0u;
                v76 = 0u;
                v13 = sub_23680E1A8(*(_QWORD *)(v16 + 608), v81, (unsigned int *)&v75);
                if ((_DWORD)v13)
                {
                  v45 = 1;
                  v48 = *((_QWORD *)&v76 + 1);
                }
                else
                {
                  v48 = *((_QWORD *)&v76 + 1);
                  sub_23680EB30(v76, *((uint64_t *)&v76 + 1), (unsigned int *)&v55);
                  v45 = 0;
                }
                *((_QWORD *)&v76 + 1) = 0;
                if (v48)
                {
                  v49 = -*(_QWORD *)(v48 - 24);
                  do
                    v50 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v50 + v49, &qword_2564313D8));
                  free(*(void **)(v48 - 32));
                }
              }
              for (i = 26; i != -4; i -= 10)
                sub_2367C2F38((uint64_t *)&v78[i]);
              if (!v80)
              {
                for (j = 104; j != -16; j -= 40)
                  sub_2367C2F38((uint64_t *)&v79[j]);
              }
            }
            for (k = 26; k != -4; k -= 10)
              sub_2367C2F38((uint64_t *)&v81[k]);
            if (!v83)
            {
              for (m = 104; m != -16; m -= 40)
                sub_2367C2F38((uint64_t *)&v82[m]);
            }
            if (!v45)
LABEL_39:
              v13 = 0;
          }
        }
      }
      for (n = 26; n != -4; n -= 10)
        sub_2367C2F38((uint64_t *)&v84[n]);
      if (!v86)
      {
        for (ii = 13; ii != -2; ii -= 5)
          sub_2367C2F38((uint64_t *)&v85[ii]);
      }
      if (!(_DWORD)v13)
        goto LABEL_22;
      v15 = v57;
    }
LABEL_51:
    v57 = 0;
    if (v15)
    {
      v38 = -*((_QWORD *)v15 - 3);
      do
        v39 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v39 + v38, &qword_2564313D8));
      free(*((void **)v15 - 4));
    }
    if (!(_DWORD)v63)
    {
      v40 = v61;
      v61 = 0;
      if (v40)
      {
        v41 = -*((_QWORD *)v40 - 3);
        do
          v42 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v42 + v41, &qword_2564313D8));
        free(*((void **)v40 - 4));
      }
    }
    goto LABEL_60;
  }
  v13 = 1;
LABEL_60:
  v85[0] = (void **)&v69;
  sub_2367D077C(v85);
  v66 = &off_2507FFA18;
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  for (jj = 25; jj != 10; jj -= 5)
    sub_2367C2F38((uint64_t *)&v64[jj]);
  if (v65 < 0)
    operator delete(v64[8]);
  v44 = v64[0];
  v64[0] = 0;
  if (v44)
    (*((void (**)(void **))*v44 + 1))(v44);
  v70[0] = &off_2507FFA40;
  v64[0] = (void **)&v73;
  sub_2367E8DB8(v64);
  v70[6] = &off_2507FFA18;
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  return v13;
}

void sub_236820448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, ...)
{
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  va_list va;

  va_start(va, a13);
  v15 = STACK[0x3E8];
  STACK[0x3E8] = 0;
  if (v15)
  {
    v16 = -*(_QWORD *)(v15 - 24);
    do
      v17 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v17 + v16, &qword_2564313D8));
    free(*(void **)(v15 - 32));
  }
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x3F8] + i));
  if (!LODWORD(STACK[0x4E8]))
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x470] + j));
  }
  for (k = 104; k != -16; k -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x4F0] + k));
  if (!LODWORD(STACK[0x5E0]))
  {
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x568] + m));
  }
  for (n = 104; n != -16; n -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x5E8] + n));
  if (!*(_DWORD *)(v13 - 72))
  {
    for (ii = 104; ii != -16; ii -= 40)
      sub_2367C2F38((uint64_t *)(v13 - 192 + ii));
  }
  if (a5)
  {
    v24 = -*(_QWORD *)(a5 - 24);
    do
      v25 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v25 + v24, &qword_2564313D8));
    free(*(void **)(a5 - 32));
  }
  if (!a13 && a11)
  {
    v26 = -*(_QWORD *)(a11 - 24);
    do
      v27 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v27 + v26, &qword_2564313D8));
    free(*(void **)(a11 - 32));
  }
  sub_2367EF354((uint64_t *)va);
  sub_2367E9BFC((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

float sub_236820600()
{
  return sub_23680ECA4(1.5);
}

float sub_23682061C()
{
  return sub_23680ECA4(0.5);
}

uint64_t sub_236820638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_2507FFA40;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = &off_250800448;
  v4 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = &off_2507FFA18;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 69);
  *(_QWORD *)(a1 + 80) = 0;
  v7 = a1 + 80;
  *(_QWORD *)(a1 + 69) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80));
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(v7 + 72) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(v7 + 56) = v10;
  *(_OWORD *)(v7 + 40) = v9;
  *(_OWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 80) = &off_250800470;
  *(_QWORD *)(v7 + 88) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(v7 + 96) = &off_2507FFCC0;
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(v7 + 120) = &off_250800470;
  *(_QWORD *)(v7 + 128) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(v7 + 136) = &off_250800470;
  *(_QWORD *)(v7 + 144) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v7 + 152) = &off_250800470;
  *(_QWORD *)(v7 + 160) = *(_QWORD *)(a2 + 240);
  v11 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(v7 + 171) = *(_DWORD *)(a2 + 251);
  *(_DWORD *)(v7 + 168) = v11;
  *(_QWORD *)(v7 + 176) = &off_2507FF488;
  v12 = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(v7 + 184) = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(v7 + 200) = v12;
  *(_QWORD *)(v7 + 208) = &off_2507FF500;
  v13 = *(_OWORD *)(a2 + 296);
  *(_DWORD *)(v7 + 232) = *(_DWORD *)(a2 + 312);
  *(_OWORD *)(v7 + 216) = v13;
  *(_DWORD *)(v7 + 240) = *(_DWORD *)(a2 + 320);
  v14 = (_QWORD *)(v7 + 248);
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  v15 = *(_QWORD *)(a2 + 328);
  v16 = *(_QWORD *)(a2 + 336);
  if (v16 != v15)
  {
    sub_2367E91F0(v14, 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 5));
    *(_QWORD *)(a1 + 336) = sub_2367E90DC(v15, v16, *(_QWORD *)(a1 + 336));
  }
  *(_QWORD *)(a1 + 352) = &off_2507FFA68;
  v17 = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 376) = v17;
  *(_QWORD *)(a1 + 384) = &off_2507FFB90;
  v18 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 397) = *(_QWORD *)(a2 + 397);
  *(_QWORD *)(a1 + 392) = v18;
  v19 = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = v19;
  return a1;
}

void sub_236820844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;

  v9[42] = v10;
  sub_2367E8DB8(&a9);
  v9[6] = v11;
  v13 = (void *)v9[10];
  if (v13)
  {
    v9[11] = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_236820878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _BYTE *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int64x2_t v40;
  _BYTE *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  float v47;
  int v48;
  float v49;
  uint64_t i;
  uint64_t v51;
  _QWORD *v52;
  _BOOL8 v53;
  uint64_t j;
  uint64_t k;
  uint64_t v57;
  _BOOL8 v58;
  BOOL v59;
  float v60;
  unsigned __int8 v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  _BYTE *v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int64x2_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  int64x2_t v89;
  int64x2_t v90;
  double v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  int64x2_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  int v113;
  uint64_t v114;
  uint64_t n;
  unint64_t v116;
  uint64_t ii;
  uint64_t v118;
  uint64_t jj;
  unint64_t v120;
  uint64_t m;
  uint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  unsigned __int8 v125;
  unint64_t v130;
  _BYTE v131[120];
  void **v132[15];
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  int64x2_t v136;
  unint64_t v137;
  unint64_t *v138;
  void *v139;
  char v140;
  uint64_t (**v141)();
  void *__p;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  unint64_t v147;
  __int128 v148;
  char v149;
  int v150;
  uint64_t v151;
  char v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  __int128 v157;
  _BYTE v158[32];
  uint64_t v159;
  _QWORD v160[10];
  char v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t (**v165)();
  void *v166;
  void *v167;
  __int128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  char v172;
  uint64_t v173;
  int v174;
  int v175;
  char v176;
  int v177;
  int v178;
  int v179;
  char v180;
  uint64_t v181;
  _BYTE v182[120];
  _BYTE v183[120];
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE v187[24];
  _BYTE *v188;
  _BYTE *v189;
  unsigned int v190;
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  v186 = a6;
  v185 = a7;
  *(float *)(a6 + 5264) = powf(1.25, (float)*(unsigned int *)(a1 + 68) + -2.0);
  *(float *)(a6 + 5268) = powf(1.25, (float)*(unsigned int *)(a1 + 72) + -2.0);
  v11 = *(_QWORD *)(a6 + 4232);
  v12 = *(_QWORD *)(a6 + 4224);
  v13 = (v11 - v12) >> 3;
  v14 = *(unsigned int *)(a1 + 112);
  if (v13 < v14)
  {
    if (v14 > (*(_QWORD *)(a6 + 4240) - v12) >> 3)
    {
      v189 = (_BYTE *)(a6 + 4240);
      v15 = (char *)sub_2367CA1FC(v14);
      v17 = *(_QWORD **)(a6 + 4232);
      v18 = *(_QWORD **)(a6 + 4224);
      if (v17 == v18)
      {
        v21 = vdupq_n_s64((unint64_t)v17);
        v19 = &v15[8 * v13];
      }
      else
      {
        v19 = &v15[8 * v13];
        do
        {
          v20 = *--v17;
          *v17 = 0;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        while (v17 != v18);
        v21 = *(int64x2_t *)(a6 + 4224);
      }
      *(_QWORD *)(a6 + 4224) = v19;
      *(_QWORD *)(a6 + 4232) = &v15[8 * v13];
      *(int64x2_t *)&v187[8] = v21;
      v22 = *(_BYTE **)(a6 + 4240);
      *(_QWORD *)(a6 + 4240) = &v15[8 * v16];
      v188 = v22;
      *(_QWORD *)v187 = v21.i64[0];
      sub_2368217A4((uint64_t)v187);
      v11 = *(_QWORD *)(a6 + 4232);
      v14 = *(unsigned int *)(a1 + 112);
      v13 = (v11 - *(_QWORD *)(a6 + 4224)) >> 3;
    }
    if (v13 < v14)
    {
      while (1)
      {
        sub_2367DA928((uint64_t)&v170, 0x10000u, *(_QWORD *)(a6 + 120));
        v23 = v171;
        if ((_DWORD)v171)
          return v23;
        v24 = v170;
        v170 = 0;
        v25 = (int64x2_t *)v186;
        v26 = *(uint64_t **)(v186 + 4232);
        v27 = *(_QWORD *)(v186 + 4240);
        if ((unint64_t)v26 >= v27)
        {
          v29 = *(_QWORD *)(v186 + 4224);
          v30 = ((uint64_t)v26 - v29) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            sub_2367C3440();
          v31 = v27 - v29;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v189 = (_BYTE *)(v186 + 4240);
          if (v33)
            v33 = (unint64_t)sub_2367CA1FC(v33);
          else
            v34 = 0;
          v35 = (uint64_t *)(v33 + 8 * v30);
          v36 = (_BYTE *)(v33 + 8 * v34);
          v188 = v36;
          *v35 = v24;
          v28 = v35 + 1;
          *(_QWORD *)&v187[16] = v35 + 1;
          v37 = (_QWORD *)v25[264].i64[1];
          v38 = (_QWORD *)v25[264].i64[0];
          if (v37 == v38)
          {
            v40 = vdupq_n_s64((unint64_t)v37);
          }
          else
          {
            do
            {
              v39 = *--v37;
              *v37 = 0;
              *--v35 = v39;
            }
            while (v37 != v38);
            v40 = v25[264];
            v28 = *(_QWORD **)&v187[16];
            v36 = v188;
          }
          v25[264].i64[0] = (uint64_t)v35;
          v25[264].i64[1] = (uint64_t)v28;
          *(int64x2_t *)&v187[8] = v40;
          v41 = (_BYTE *)v25[265].i64[0];
          v25[265].i64[0] = (uint64_t)v36;
          v188 = v41;
          *(_QWORD *)v187 = v40.i64[0];
          sub_2368217A4((uint64_t)v187);
        }
        else
        {
          *v26 = v24;
          v28 = v26 + 1;
        }
        v25[264].i64[1] = (uint64_t)v28;
        if (v170)
          sub_2367DA8E0(v170);
        ++v13;
        v14 = *(unsigned int *)(a1 + 112);
        if (v13 >= v14)
        {
          v42 = v186;
          v11 = *(_QWORD *)(v186 + 4232);
          v13 = (v11 - *(_QWORD *)(v186 + 4224)) >> 3;
          goto LABEL_32;
        }
      }
    }
  }
  v42 = a6;
LABEL_32:
  if (v13 > v14)
  {
    v43 = (_QWORD *)(v42 + 4232);
    do
    {
      v46 = *(_QWORD *)(v11 - 8);
      v45 = (_QWORD *)(v11 - 8);
      v44 = v46;
      *v45 = 0;
      if (v46)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        v14 = *(unsigned int *)(a1 + 112);
      }
      *v43 = v45;
      v42 = v186;
      v43 = (_QWORD *)(v186 + 4232);
      v11 = *(_QWORD *)(v186 + 4232);
    }
    while (v14 < (v11 - *(_QWORD *)(v186 + 4224)) >> 3);
  }
  if (*(_BYTE *)(v42 + 4209))
  {
    v47 = (float)*(int *)(a6 + 984);
    v48 = llroundf(*(float *)(v42 + 4940) * v47);
    v49 = (float)v48 / v47;
    *(_DWORD *)(a6 + 984) = v48;
    sub_2368062D0(a6 + 952);
    for (i = 0; i != 12; i += 4)
      *(float *)&v187[i] = (float)(1.0 / v49) * *(float *)(a6 + 268 + i);
    sub_23685B348(a6 + 208, (uint64_t)v187);
    sub_2368062D0(a6 + 952);
  }
  sub_2367CA770((uint64_t)v183, *(_QWORD *)(a6 + 72), *(_QWORD *)(a6 + 80));
  v23 = v184;
  if (!v184)
  {
    sub_2367CA9E4((uint64_t)v182, (uint64_t)v183);
    v51 = *(unsigned int *)(a6 + 120);
    *(_QWORD *)v187 = &v186;
    *(_QWORD *)&v187[8] = a2;
    v52 = (_QWORD *)a5;
    *(_QWORD *)&v187[16] = a3;
    v188 = v182;
    if (a5)
    {
      v53 = sub_236821804(a5, v51, (uint64_t **)v187);
    }
    else
    {
      v170 = 0;
      v171 = &v170;
      v53 = sub_236821804((uint64_t)&v170, v51, (uint64_t **)v187);
    }
    v23 = v53;
    if (v53)
      goto LABEL_46;
    if ((*(_BYTE *)(a1 + 24) & 0x20) == 0)
    {
      LOBYTE(v160[0]) = 0;
      *(_QWORD *)v187 = v160;
      *(_QWORD *)&v187[8] = &v186;
      *(_QWORD *)&v187[16] = &v185;
      v188 = (_BYTE *)a1;
      v189 = v182;
      v57 = *(unsigned int *)(a6 + 128);
      if (a5)
      {
        v58 = sub_236821DDC(a5, v57, (uint64_t)v187);
      }
      else
      {
        v170 = 0;
        v171 = &v170;
        v58 = sub_236821DDC((uint64_t)&v170, v57, (uint64_t)v187);
      }
      v23 = v58;
      if (!v58)
      {
        v61 = atomic_load((unsigned __int8 *)v160);
        if ((v61 & 1) != 0)
        {
          v23 = 1;
        }
        else if ((*(_BYTE *)(a1 + 24) & 0x80) != 0
               || (v23 = sub_2367CB36C(a6 + 952, (unsigned int *)(a6 + 1632), a5), !(_DWORD)v23))
        {
LABEL_162:
          LOBYTE(v160[0]) = 0;
          *(_QWORD *)v187 = &v186;
          *(_QWORD *)&v187[8] = &v185;
          *(_QWORD *)&v187[16] = v160;
          v123 = *(unsigned int *)(a6 + 128);
          if (v52)
          {
            v124 = sub_236821E70((uint64_t)v52, v123, (uint64_t)v187);
          }
          else
          {
            v170 = 0;
            v171 = &v170;
            v124 = sub_236821E70((uint64_t)&v170, v123, (uint64_t)v187);
          }
          v23 = v124;
          if (!v124)
          {
            v125 = atomic_load((unsigned __int8 *)v160);
            v23 = v125 & 1;
          }
        }
      }
LABEL_46:
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v182[j]);
      if (!v184)
      {
        for (k = 104; k != -16; k -= 40)
          sub_2367C2F38((uint64_t *)&v183[k]);
      }
      return v23;
    }
    sub_2368218B0((uint64_t)&v170, v186 + 4544);
    v177 = 0;
    v181 = 0x100000001;
    v180 = 1;
    v59 = v179 == 1;
    v178 = 0;
    --v179;
    if (v59)
    {
      v176 = 1;
      v62 = v175;
      if (v175 <= 2)
        v62 = 2;
      v175 = v62 - 1;
      v60 = 0.02;
    }
    else
    {
      v172 = 1;
      v173 = *(_QWORD *)(a6 + 952);
      v174 = *(_DWORD *)(a6 + 960);
      v60 = 0.1;
    }
    LODWORD(v170) = fmaxf(*(float *)(v186 + 4544) * v60, 0.001);
    sub_2367D050C((uint64_t)v160, *(_QWORD *)a6);
    v63 = sub_2367CA62C(*(_DWORD *)(*(_QWORD *)a6 + 104) == 1);
    sub_2367F67A4((uint64_t)v160, (uint64_t)v182, (uint64_t)v63);
    v64 = *(_QWORD *)(v162 + 328);
    v65 = *(_QWORD *)(v162 + 336);
    if (v64 != v65)
    {
      v146 = 0uLL;
      v147 = 0;
      sub_236821CF4((uint64_t *)&v146, 0xAAAAAAAAAAAAAAABLL * ((v65 - v64) >> 5));
      if (*(_QWORD *)(v162 + 336) != *(_QWORD *)(v162 + 328))
      {
        v66 = 0;
        while (1)
        {
          v67 = v163;
          if (!v163)
          {
            if ((_QWORD)v168 == *((_QWORD *)&v168 + 1))
              v67 = 0;
            else
              v67 = *(_DWORD *)v168;
          }
          v68 = v164;
          if (!v164)
          {
            if ((_QWORD)v168 == *((_QWORD *)&v168 + 1))
              v68 = 0;
            else
              v68 = *(_DWORD *)(v168 + 4);
          }
          sub_2367C431C((uint64_t)v187, v67, v68);
          v23 = v190;
          if (v190)
            break;
          v69 = v188;
          v70 = v189;
          v188 = 0;
          v71 = (_QWORD *)*((_QWORD *)&v146 + 1);
          if (*((_QWORD *)&v146 + 1) >= v147)
          {
            v73 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 3);
            v74 = v73 + 1;
            if (v73 + 1 > 0x666666666666666)
              sub_2367C3440();
            if (0x999999999999999ALL * ((uint64_t)(v147 - v146) >> 3) > v74)
              v74 = 0x999999999999999ALL * ((uint64_t)(v147 - v146) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v147 - v146) >> 3) >= 0x333333333333333)
              v75 = 0x666666666666666;
            else
              v75 = v74;
            v138 = &v147;
            if (v75)
              v75 = (unint64_t)sub_2367DC0A4(v75);
            else
              v76 = 0;
            v77 = v75 + 40 * v73;
            v135 = v75;
            v136.i64[0] = v77;
            v137 = v75 + 40 * v76;
            *(_QWORD *)(v77 + 16) = *(_QWORD *)&v187[16];
            *(_OWORD *)v77 = *(_OWORD *)v187;
            *(_QWORD *)(v77 + 24) = v69;
            *(_QWORD *)(v77 + 32) = v70;
            v72 = (_QWORD *)(v77 + 40);
            v136.i64[1] = v77 + 40;
            v78 = *((_QWORD *)&v146 + 1);
            v79 = v146;
            v80 = v136.i64[0];
            if (*((_QWORD *)&v146 + 1) == (_QWORD)v146)
            {
              v83 = vdupq_n_s64(*((unint64_t *)&v146 + 1));
            }
            else
            {
              do
              {
                v81 = *(_OWORD *)(v78 - 40);
                *(_QWORD *)(v80 - 24) = *(_QWORD *)(v78 - 24);
                *(_OWORD *)(v80 - 40) = v81;
                v82 = *(_QWORD *)(v78 - 16);
                *(_QWORD *)(v78 - 16) = 0;
                *(_QWORD *)(v80 - 16) = v82;
                *(_QWORD *)(v80 - 8) = *(_QWORD *)(v78 - 8);
                v80 -= 40;
                v78 -= 40;
              }
              while (v78 != v79);
              v83 = (int64x2_t)v146;
              v72 = (_QWORD *)v136.i64[1];
            }
            *(_QWORD *)&v146 = v80;
            *((_QWORD *)&v146 + 1) = v72;
            v136 = v83;
            v84 = v147;
            v147 = v137;
            v137 = v84;
            v135 = v83.i64[0];
            sub_2367F6844((uint64_t)&v135);
          }
          else
          {
            **((_OWORD **)&v146 + 1) = *(_OWORD *)v187;
            v71[2] = *(_QWORD *)&v187[16];
            v71[3] = v69;
            v71[4] = v70;
            v72 = v71 + 5;
          }
          *((_QWORD *)&v146 + 1) = v72;
          if (*((_DWORD *)v72 - 10) && *((_DWORD *)v72 - 9))
          {
            v85 = 0;
            do
              bzero((void *)(*(v72 - 2) + *(v72 - 3) * v85++), 4 * *((unsigned int *)v72 - 10));
            while (v85 < *((unsigned int *)v72 - 9));
          }
          if (++v66 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v162 + 336) - *(_QWORD *)(v162 + 328)) >> 5))
            goto LABEL_99;
        }
        *(_QWORD *)v187 = &v146;
        sub_2367D077C((void ***)v187);
        v103 = 1;
        v52 = (_QWORD *)a5;
LABEL_153:
        *(_QWORD *)v187 = &v168;
        sub_2367D077C((void ***)v187);
        v165 = &off_2507FFA18;
        if (v166)
        {
          v167 = v166;
          operator delete(v166);
        }
        for (m = 25; m != 10; m -= 5)
          sub_2367C2F38(&v160[m]);
        if (v161 < 0)
          operator delete((void *)v160[8]);
        v122 = v160[0];
        v160[0] = 0;
        if (v122)
          (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
        sub_236816F38((uint64_t)&v170);
        if (v103)
          goto LABEL_46;
        goto LABEL_162;
      }
LABEL_99:
      sub_2367D0910((void **)&v168);
      v168 = v146;
      v169 = v147;
      v147 = 0;
      v146 = 0uLL;
      *(_QWORD *)v187 = &v146;
      sub_2367D077C((void ***)v187);
      v52 = (_QWORD *)a5;
    }
    v86 = operator new();
    *(_QWORD *)(v86 + 32) = 0;
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)(v86 + 16) = 0u;
    v159 = v86;
    LOWORD(v147) = 1;
    v148 = xmmword_2368AF310;
    v149 = 1;
    v150 = -1;
    v151 = 0;
    v152 = 0;
    v153 = 2;
    v155 = 0;
    v154 = 0;
    v156 = 0;
    v157 = 0u;
    memset(v158, 0, sizeof(v158));
    DWORD1(v146) = 1;
    *((_QWORD *)&v146 + 1) = (*(_DWORD *)(a1 + 404) + 1);
    LOWORD(v146) = 1;
    bzero(v187, 0x2BCuLL);
    if (a8)
      v87 = v187;
    else
      v87 = 0;
    sub_23683DBEC((uint64_t)&v170, &v146, *(_QWORD *)a6, (uint64_t)v160, a4, v52, (unint64_t *)v86, (uint64_t)v87);
    if (a8)
    {
      v88 = 0;
      v89 = *(int64x2_t *)(a8 + 320);
      v90 = *(int64x2_t *)(a8 + 336);
      v91 = *(double *)(a8 + 352);
      do
      {
        v89 = vaddq_s64(v89, *(int64x2_t *)&v187[v88 * 8]);
        v90 = vaddq_s64(v90, *(int64x2_t *)&v187[v88 * 8 + 16]);
        v91 = *(double *)&(&v189)[v88] + v91;
        v88 += 5;
      }
      while (v88 != 75);
      *(int64x2_t *)(a8 + 320) = v89;
      *(int64x2_t *)(a8 + 336) = v90;
      *(double *)(a8 + 352) = v91;
    }
    v92 = *(uint64_t **)(v86 + 24);
    v130 = *(_QWORD *)v86;
    v93 = (_QWORD *)v186;
    v94 = *(uint64_t **)(v186 + 4256);
    v95 = *(_QWORD *)(v186 + 4264);
    if ((unint64_t)v94 >= v95)
    {
      v97 = *(_QWORD *)(v186 + 4248);
      v98 = ((uint64_t)v94 - v97) >> 3;
      if ((unint64_t)(v98 + 1) >> 61)
        sub_2367C3440();
      v99 = v95 - v97;
      v100 = v99 >> 2;
      if (v99 >> 2 <= (unint64_t)(v98 + 1))
        v100 = v98 + 1;
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
        v101 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v101 = v100;
      v138 = (unint64_t *)(v186 + 4264);
      if (v101)
        v101 = (unint64_t)sub_2367CA1FC(v101);
      else
        v102 = 0;
      v104 = (uint64_t *)(v101 + 8 * v98);
      v105 = v101 + 8 * v102;
      v137 = v105;
      v159 = 0;
      *v104 = v86;
      v96 = v104 + 1;
      v136.i64[1] = (uint64_t)(v104 + 1);
      v106 = (_QWORD *)v93[532];
      v107 = (_QWORD *)v93[531];
      if (v106 == v107)
      {
        v109 = vdupq_n_s64((unint64_t)v106);
      }
      else
      {
        do
        {
          v108 = *--v106;
          *v106 = 0;
          *--v104 = v108;
        }
        while (v106 != v107);
        v109 = *(int64x2_t *)(v93 + 531);
        v96 = (_QWORD *)v136.i64[1];
        v105 = v137;
      }
      v93[531] = v104;
      v93[532] = v96;
      v136 = v109;
      v110 = v93[533];
      v93[533] = v105;
      v137 = v110;
      v135 = v109.i64[0];
      sub_2368172B4((uint64_t)&v135);
    }
    else
    {
      v159 = 0;
      *v94 = v86;
      v96 = v94 + 1;
    }
    v93[532] = v96;
    sub_2367D050C((uint64_t)&v135, *(_QWORD *)a6);
    sub_236816CD0(&v134);
    v111 = v134;
    sub_2367E7864(v134 + 4944, *(_QWORD *)a6);
    if ((v179 & 0x80000000) == 0)
    {
      v112 = (uint64_t *)(v130 >> 3);
      v113 = -1;
      do
      {
        sub_2367D2870(v111, (uint64_t)v52, v92, v112, (uint64_t)&v135, *(_QWORD *)a6);
        v92 = (uint64_t *)((char *)v92 + v145);
        v112 = (uint64_t *)((char *)v112 - v145);
        ++v113;
      }
      while (v113 < v179);
    }
    v114 = *(_QWORD *)(v111 + 4208) + 120 * *(unsigned int *)(a1 + 404);
    sub_2367CA770((uint64_t)v132, *(_DWORD *)(v114 + 1896), *(_DWORD *)(v114 + 1900));
    v23 = v133;
    if (v133)
    {
      v103 = 1;
    }
    else
    {
      sub_2367CA9E4((uint64_t)v131, (uint64_t)v132);
      sub_2367D086C(a6 + 1632, (uint64_t)v131);
      for (n = 104; n != -16; n -= 40)
        sub_2367C2F38((uint64_t *)&v131[n]);
      sub_2367D27D0((unsigned int *)(v114 + 1896), a6 + 1632);
      if (*(_DWORD *)(a6 + 1592) && *(_DWORD *)(a6 + 1596))
      {
        v116 = 0;
        do
          bzero((void *)(*(_QWORD *)(a6 + 1616) + *(_QWORD *)(a6 + 1608) * v116++), *(unsigned int *)(a6 + 1592));
        while (v116 < *(unsigned int *)(a6 + 1596));
      }
      *(_QWORD *)(a6 + 1752) = a6 + 1632;
      if (!v133)
      {
        for (ii = 13; ii != -2; ii -= 5)
          sub_2367C2F38((uint64_t *)&v132[ii]);
      }
      v103 = 0;
    }
    if (v134)
    {
      v118 = sub_2367E9308(v134);
      MEMORY[0x23B7F8F48](v118, 0x10F2C40BD9CC6D3);
    }
    v132[0] = (void **)&v144;
    sub_2367D077C(v132);
    v141 = &off_2507FFA18;
    if (__p)
    {
      v143 = __p;
      operator delete(__p);
    }
    for (jj = 200; jj != 80; jj -= 40)
      sub_2367C2F38((uint64_t *)((char *)&v135 + jj));
    if (v140 < 0)
      operator delete(v139);
    v120 = v135;
    v135 = 0;
    if (v120)
      (*(void (**)(unint64_t))(*(_QWORD *)v120 + 8))(v120);
    *(_QWORD *)v187 = &v158[8];
    sub_2367D6C0C((void ***)v187);
    if ((v158[7] & 0x80000000) != 0)
      operator delete((void *)v157);
    sub_236817268(&v159);
    goto LABEL_153;
  }
  return v23;
}

void sub_23682162C(_Unwind_Exception *a1)
{
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x7B0] + i));
  if (!LODWORD(STACK[0x8A0]))
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x828] + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368217A4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_236821804(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (!(_DWORD)a2)
    return 0;
  v7[0] = sub_2367CAAA0;
  v7[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v7, sub_236822364, sub_236822388, 0, a2) != 0;
  v5 = 0;
  v6 = a2;
  do
    sub_2368401DC(v5++, **a3, a3[1], *a3[2], a3[2][1], a3[3]);
  while (v6 != v5);
  return 0;
}

uint64_t sub_2368218B0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  __int128 **v24;
  __int128 **v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  __int128 v30;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_2367C94AC((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  v12 = *(_OWORD *)(a2 + 200);
  v13 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_2368220C4((_QWORD *)(a1 + 224), *(const void **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 2);
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  sub_2367DBF84((_QWORD *)(a1 + 304), *(const void **)(a2 + 304), *(_QWORD *)(a2 + 312), (uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3);
  v16 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 333) = *(_QWORD *)(a2 + 333);
  *(_QWORD *)(a1 + 328) = v16;
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  v17 = *(_OWORD *)(a2 + 352);
  v18 = *(_OWORD *)(a2 + 368);
  v19 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
  *(_OWORD *)(a1 + 368) = v18;
  *(_OWORD *)(a1 + 384) = v19;
  *(_OWORD *)(a1 + 352) = v17;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  sub_2367C94AC((_QWORD *)(a1 + 416), *(const void **)(a2 + 416), *(_QWORD *)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 2);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  sub_2367C94AC((_QWORD *)(a1 + 440), *(const void **)(a2 + 440), *(_QWORD *)(a2 + 448), (uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 2);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v21 = *(_BYTE **)(a2 + 464);
  v20 = *(_BYTE **)(a2 + 472);
  v22 = v20 - v21;
  if (v20 != v21)
  {
    sub_2367DC058((_QWORD *)(a1 + 464), 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3));
    v23 = *(char **)(a1 + 472);
    memmove(v23, v21, v22 - 4);
    *(_QWORD *)(a1 + 472) = &v23[8 * (v22 >> 3)];
  }
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  v24 = *(__int128 ***)(a2 + 496);
  v25 = *(__int128 ***)(a2 + 504);
  if (v25 != v24)
  {
    sub_236822178((_QWORD *)(a1 + 496), 0xF0B7672A07A44C6BLL * (v25 - v24));
    *(_QWORD *)(a1 + 504) = sub_2368221C8(a1 + 512, v24, v25, *(_QWORD **)(a1 + 504));
  }
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  sub_236808910((_QWORD *)(a1 + 520), *(const void **)(a2 + 520), *(_QWORD *)(a2 + 528), (uint64_t)(*(_QWORD *)(a2 + 528) - *(_QWORD *)(a2 + 520)) >> 3);
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  v26 = *(_BYTE **)(a2 + 544);
  v27 = *(_BYTE **)(a2 + 552);
  v28 = v27 - v26;
  if (v27 != v26)
  {
    sub_23682213C((_QWORD *)(a1 + 544), v28 >> 5);
    v29 = *(char **)(a1 + 552);
    memmove(v29, v26, v28);
    *(_QWORD *)(a1 + 552) = &v29[32 * (v28 >> 5)];
  }
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  sub_2367DBF84((_QWORD *)(a1 + 568), *(const void **)(a2 + 568), *(_QWORD *)(a2 + 576), (uint64_t)(*(_QWORD *)(a2 + 576) - *(_QWORD *)(a2 + 568)) >> 3);
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  sub_2367DBF84((_QWORD *)(a1 + 592), *(const void **)(a2 + 592), *(_QWORD *)(a2 + 600), (uint64_t)(*(_QWORD *)(a2 + 600) - *(_QWORD *)(a2 + 592)) >> 3);
  v30 = *(_OWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = v30;
  return a1;
}

void sub_236821BEC(_Unwind_Exception *a1, void **a2, void **a3, void **a4, void **a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a5);
  v10 = *v8;
  if (*v8)
  {
    v5[69] = v10;
    operator delete(v10);
  }
  v11 = *v7;
  if (*v7)
  {
    v5[66] = v11;
    operator delete(v11);
  }
  sub_2367E9700((void ***)va);
  v12 = *a2;
  if (*a2)
  {
    v5[59] = v12;
    operator delete(v12);
  }
  v13 = *a3;
  if (*a3)
  {
    v5[56] = v13;
    operator delete(v13);
  }
  v14 = *a4;
  if (*a4)
  {
    v5[53] = v14;
    operator delete(v14);
  }
  sub_2367E2C08((_QWORD *)(v6 - 24));
  v15 = *a5;
  if (*a5)
  {
    v5[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_236821CD4()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 232) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x236821CB8);
}

void sub_236821CEC()
{
  JUMPOUT(0x236821CB8);
}

uint64_t *sub_236821CF4(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xCCCCCCCCCCCCCCCDLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_2367C3440();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_2367DC0A4(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 40 * v4;
    sub_236815500(v2, v5);
    return (uint64_t *)sub_2367F6844((uint64_t)v5);
  }
  return result;
}

uint64_t sub_236821D94(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 112);
  sub_2367D6C0C(&v3);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  return a1;
}

BOOL sub_236821DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2368220A0, sub_236821FD8, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_236821FD8((uint64_t)v6, i);
  return 0;
}

BOOL sub_236821E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236821FB4, sub_236821F04, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_236821F04((uint64_t)v6, i);
  return 0;
}

uint64_t sub_236821F04(uint64_t a1, int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;
  _QWORD v15[4];

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = **v2;
  v4 = a2;
  v5 = *(_QWORD *)(v3 + 104);
  v6 = *(_QWORD *)(v3 + 136);
  v7 = v6 * (a2 / v5);
  v8 = *(_QWORD *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 80);
  v15[0] = v6 * (a2 % v5);
  v15[1] = v7;
  v10 = v8 - v15[0];
  if (v8 < v15[0])
    v10 = 0;
  if (v15[0] + v6 <= v8)
    v10 = v6;
  v11 = v7 + v6;
  v12 = v9 >= v7;
  v13 = v9 - v7;
  if (!v12)
    v13 = 0;
  if (v11 <= v9)
    v13 = v6;
  v15[2] = v10;
  v15[3] = v13;
  if (*(_BYTE *)(v3 + 4208))
    v4 = *(int *)(v3 + 4216);
  result = sub_23685227C(*v2[1], (uint64_t)v15, v4, 0, (_QWORD *)v3);
  if ((_DWORD)result)
    atomic_store(1u, (unsigned __int8 *)v2[2]);
  return result;
}

uint64_t sub_236821FB4(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_236821FD8(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  _QWORD v15[4];

  v2 = *(_QWORD *)(result + 8);
  v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    v4 = **(_QWORD **)(v2 + 8);
    v5 = a2;
    v6 = *(_QWORD *)(v4 + 104);
    v7 = *(_QWORD *)(v4 + 136);
    v8 = v7 * (a2 / v6);
    v9 = *(_QWORD *)(v4 + 72);
    v10 = *(_QWORD *)(v4 + 80);
    v15[0] = v7 * (a2 % v6);
    v15[1] = v8;
    v11 = v9 - v15[0];
    if (v9 < v15[0])
      v11 = 0;
    if (v15[0] + v7 <= v9)
      v11 = v7;
    v12 = v8 + v7;
    v13 = v10 >= v8;
    v14 = v10 - v8;
    if (!v13)
      v14 = 0;
    if (v12 <= v10)
      v14 = v7;
    v15[2] = v11;
    v15[3] = v14;
    if (*(_BYTE *)(v4 + 4208))
      v5 = *(int *)(v4 + 4216);
    result = sub_23685174C(**(_QWORD ***)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v15, v5, *(_DWORD *)(v4 + 4592) < 7, v4);
    if ((_DWORD)result)
      atomic_store(1u, *(unsigned __int8 **)v2);
  }
  return result;
}

uint64_t sub_2368220A0(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

_QWORD *sub_2368220C4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367C3404(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_236822120(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_23682213C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_2367C3440();
  result = (char *)sub_236809410(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *sub_236822178(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x7A44C6AFC2DD9DLL)
    sub_2367C3440();
  result = (char *)sub_236806A44(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[536 * v4];
  return result;
}

_QWORD *sub_2368221C8(uint64_t a1, __int128 **a2, __int128 **a3, _QWORD *a4)
{
  _QWORD *v4;
  __int128 **v6;
  __int128 *v7;
  __int128 *v8;
  _QWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = a4;
  v15 = a4;
  v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v7 = *v6;
      v8 = v6[1];
      v9 = v4;
      if (v8 != *v6)
      {
        sub_236822328(v4, v8 - *v6);
        v10 = (_OWORD *)v4[1];
        do
        {
          v11 = *v7++;
          *v10++ = v11;
        }
        while (v7 != v8);
        v4[1] = v10;
        v9 = v16;
      }
      memcpy(v4 + 3, v6 + 3, 0x200uLL);
      v6 += 67;
      v4 = v9 + 67;
      v16 = v9 + 67;
    }
    while (v6 != a3);
  }
  v14 = 1;
  sub_2368222C0((uint64_t)v13);
  return v4;
}

void sub_23682229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_2368222C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2368222C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  BOOL v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 536;
      do
      {
        v5 = *(void **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)(v4 + 8) = v5;
          operator delete(v5);
        }
        v6 = v4 == v3;
        v4 -= 536;
      }
      while (!v6);
    }
  }
  return a1;
}

char *sub_236822328(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_2367C3440();
  result = (char *)sub_2367CD8AC(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_236822364(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_236822388(uint64_t a1, unsigned int a2)
{
  sub_2368401DC(a2, ***(_QWORD ***)(a1 + 8), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 8), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24));
}

uint64_t sub_2368223A4(float32x4_t *a1, float32x4_t *a2, unint64_t a3, int a4, float a5)
{
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v21;
  unint64_t v22;
  float v23;
  float v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float v45;
  float v47;

  if (!a3)
    return 0;
  v5 = 0;
  if (a4)
  {
    v6 = 0uLL;
    v7 = (float32x4_t)vdupq_n_s32(0x3C430C31u);
    v8 = 0uLL;
    do
    {
      v9 = *a1++;
      v10 = v9;
      v11 = vmulq_f32(v9, v7);
      v12 = *a2++;
      v6 = vmlaq_f32(v6, v11, v11);
      v8 = vmlaq_f32(v8, vsubq_f32(vmulq_n_f32(v10, a5), v12), v11);
      v5 += 4;
    }
    while (v5 < a3);
    v13 = (float)-vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8))
        / (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))
                + (float)((float)((float)a3 * 0.000000001) * 0.5));
  }
  else
  {
    v13 = 0.0;
    v15 = (float32x4_t)vdupq_n_s32(0x3C430C31u);
    v16 = (float32x4_t)vdupq_n_s32(0x3F2AAAABu);
    __asm { FMOV            V5.4S, #1.0 }
    v21 = (float32x4_t)vdupq_n_s32(0x42C80000u);
    do
    {
      v22 = 0;
      v23 = v13 + 100.0;
      v24 = v13 + -100.0;
      v25 = a1;
      v26 = a2;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      do
      {
        v30 = *v25++;
        v31 = vmulq_f32(v30, v15);
        v32 = vmulq_n_f32(v30, a5);
        v33 = *v26++;
        v34 = vsubq_f32(v32, v33);
        v35 = vmlaq_n_f32(v34, v31, v13);
        v36 = vmlaq_n_f32(v34, v31, v23);
        v37 = vmlaq_n_f32(v34, v31, v24);
        v38 = vabsq_f32(v35);
        v39 = vmulq_f32(v31, v16);
        v40 = vmulq_f32(v39, vaddq_f32(v38, _Q5));
        v41 = vmulq_f32(v39, vaddq_f32(vabsq_f32(v36), _Q5));
        v42 = vmulq_f32(v39, vaddq_f32(vabsq_f32(v37), _Q5));
        v43 = vbslq_s8((int8x16_t)vcltzq_f32(v37), (int8x16_t)vsubq_f32((float32x4_t)0, v42), (int8x16_t)v42);
        v44 = (int8x16_t)vcgeq_f32(v38, v21);
        v27 = vaddq_f32(v27, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vsubq_f32((float32x4_t)0, v40), (int8x16_t)v40), v44));
        v28 = vaddq_f32(v28, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcltzq_f32(v36), (int8x16_t)vsubq_f32((float32x4_t)0, v41), (int8x16_t)v41), v44));
        v29 = vaddq_f32(v29, (float32x4_t)vbicq_s8(v43, v44));
        v22 += 4;
      }
      while (v22 < a3);
      v45 = (float)((float)((float)((float)a3 * 0.000000002) * v13)
                  + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27)))
          / (float)((float)((float)((float)((float)(v23 * (float)((float)a3 * 0.000000002))
                                          + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)))
                                  - (float)((float)(v24 * (float)((float)a3 * 0.000000002))
                                          + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
                          / 200.0)
                  + 0.85);
      v13 = v13 - fminf(fmaxf(v45, -20.0), 20.0);
      ++v5;
    }
    while (fabsf(v45) >= 0.003 && v5 != 20);
  }
  if (v13 >= 2.6)
  {
    v47 = v13 + -2.6;
  }
  else
  {
    v47 = 0.0;
    if (v13 <= -2.6)
      v47 = v13 + 2.6;
  }
  return (int)fmaxf(fminf(roundf(v47), 127.0), -128.0);
}

void sub_236822610(int a1, float32x4_t *a2, uint64_t a3, uint64_t a4, float32x4_t *a5)
{
  const float *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  float v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const float *v41;
  float32x4_t v42;
  float32x4_t *v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t i;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  const float *v80;
  uint64_t v81;
  char v82;
  char v83;
  float32x4_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  char v96;
  char v97;
  int32x4_t *v98;
  uint64_t v99;
  unint64_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x2x2_t v104;
  int32x4_t v105;
  float32x2x2_t v106;
  int32x4_t v107;
  float *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t j;
  float32x4_t *v116;
  float32x4_t v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t k;
  float32x4_t *v123;
  float32x4_t v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  float32x4_t *v129;
  unint64_t v130;
  float32x4_t *v131;
  uint64_t v132;
  float32x4_t v133;
  uint64_t v134;
  uint64_t *v135;
  _DWORD *v136;
  uint64_t v137;
  _DWORD *v138;
  float32x4_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  int8x16_t v149;
  unint64_t v150;
  float32x4_t *v151;
  uint64_t v152;
  float32x4_t v153;
  uint64_t v154;
  uint64_t *v155;
  _DWORD *v156;
  uint64_t v157;
  _DWORD *v158;
  float32x4_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  float32x4_t *v170;
  uint64_t v171;
  float32x4_t v172;
  uint64_t v173;
  uint64_t *v174;
  _DWORD *v175;
  uint64_t v176;
  _DWORD *v177;
  float32x4_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  int8x16_t v188;
  unint64_t v189;
  float32x4_t *v190;
  uint64_t v191;
  float32x4_t v192;
  uint64_t v193;
  uint64_t *v194;
  _DWORD *v195;
  uint64_t v196;
  _DWORD *v197;
  float32x4_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  float v206;
  float v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  const float *v211;
  uint64_t v212;
  float32x4_t *v213;
  float32x4_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  float32x4_t v222[40];
  uint64_t v223;
  float32x4x2_t v224;
  float32x4x2_t v225;

  v223 = *MEMORY[0x24BDAC8D0];
  v8 = (const float *)a2;
  switch(a1)
  {
    case 0:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[16];
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824F64, (uint64_t)&v212, (uint64_t)v222, 8, (uint64_t)&a5[16]);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      v214.i64[0] = 8;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DF630(v222, &v214);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 8;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824F64;
      v11 = 8;
      goto LABEL_144;
    case 1:
      v12 = 0;
      v13 = 4 * a3;
      v14 = 1;
      do
      {
        v15 = 0;
        v16 = v14;
        v17 = 1;
        v18 = ((4 * v12) | 1) * a3 + 1;
        v19 = 8 * v12;
        v20 = (char *)v8 + 16 * a3 * v12;
        v21 = 32 * v12;
        do
        {
          v22 = v17;
          v23 = 4 * v15;
          v24 = &v20[16 * v15];
          v25 = 0.0;
          v26 = v24;
          v27 = 4;
          do
          {
            v25 = (float)((float)((float)(v25 + COERCE_FLOAT(*(_OWORD *)v26)) + COERCE_FLOAT(HIDWORD(*(_QWORD *)v26)))
                        + COERCE_FLOAT(*((_QWORD *)v26 + 1)))
                + COERCE_FLOAT(HIDWORD(*(_OWORD *)v26));
            v26 += v13;
            --v27;
          }
          while (v27);
          v28 = 0;
          v29 = v18 + v23;
          v30 = v15 | v19;
          v31 = v21 + v23;
          do
          {
            v32 = 0;
            v33 = v31;
            do
            {
              if (v28 != 1 || v32 != 4)
                *(float *)(a4 + v33) = *(float *)&v24[v32] - v8[v29];
              v32 += 4;
              v33 += 8;
            }
            while (v32 != 16);
            ++v28;
            v31 += 64;
            v24 += v13;
          }
          while (v28 != 4);
          v17 = 0;
          *(_DWORD *)(a4 + ((4 * v30) | 0x48)) = *(_DWORD *)(a4 + 4 * v30);
          *(float *)(a4 + 4 * v30) = v25 * 0.0625;
          v15 = 1;
        }
        while ((v22 & 1) != 0);
        v14 = 0;
        v12 = 1;
      }
      while ((v16 & 1) != 0);
      goto LABEL_34;
    case 2:
      v35 = 1;
      __asm { FMOV            V0.4S, #0.25 }
      do
      {
        v41 = &v8[a3];
        v224 = vld2q_f32(v8);
        v34 = 8 * a3;
        v8 = (const float *)((char *)v8 + v34);
        v225 = vld2q_f32(v41);
        v42 = vaddq_f32(v224.val[0], v224.val[1]);
        v224.val[0] = vsubq_f32(v224.val[0], v224.val[1]);
        v43 = &v222[v35];
        v43[-1] = vmulq_f32(vaddq_f32(vaddq_f32(v42, v225.val[0]), v225.val[1]), _Q0);
        *v43 = vmulq_f32(vsubq_f32(vsubq_f32(v42, v225.val[0]), v225.val[1]), _Q0);
        v43[7] = vmulq_f32(vsubq_f32(vaddq_f32(v224.val[0], v225.val[0]), v225.val[1]), _Q0);
        v43[8] = vmulq_f32(vaddq_f32(vsubq_f32(v224.val[0], v225.val[0]), v225.val[1]), _Q0);
        v35 += 2;
      }
      while (v35 != 9);
      v44 = 0;
      v45 = v222[13];
      *(float32x4_t *)(a4 + 192) = v222[12];
      *(float32x4_t *)(a4 + 208) = v45;
      v46 = v222[15];
      *(float32x4_t *)(a4 + 224) = v222[14];
      *(float32x4_t *)(a4 + 240) = v46;
      v47 = v222[9];
      *(float32x4_t *)(a4 + 128) = v222[8];
      *(float32x4_t *)(a4 + 144) = v47;
      v48 = v222[11];
      *(float32x4_t *)(a4 + 160) = v222[10];
      *(float32x4_t *)(a4 + 176) = v48;
      v49 = v222[5];
      *(float32x4_t *)(a4 + 64) = v222[4];
      *(float32x4_t *)(a4 + 80) = v49;
      v50 = v222[7];
      *(float32x4_t *)(a4 + 96) = v222[6];
      *(float32x4_t *)(a4 + 112) = v50;
      v51 = v222[1];
      *(float32x4_t *)a4 = v222[0];
      *(float32x4_t *)(a4 + 16) = v51;
      v52 = v222[3];
      v53 = 1;
      *(float32x4_t *)(a4 + 32) = v222[2];
      *(float32x4_t *)(a4 + 48) = v52;
      do
      {
        v54 = 0;
        v55 = v53;
        v56 = 16 * v44;
        v57 = 8 * v44;
        v58 = 1;
        do
        {
          v59 = (8 * v54) | (4 * v56);
          v60 = *(float *)(a4 + v59);
          v61 = *(float *)(a4 + (v59 | 4));
          v62 = *(float *)(a4 + (v59 | 0x20));
          v63 = *(float *)(a4 + (v59 | 0x24));
          LOBYTE(v59) = v58;
          v64 = (float)((float)(v60 + v61) + v62) + v63;
          v65 = (float)((float)(v60 + v61) - v62) - v63;
          v66 = v60 - v61;
          v67 = v54 | v57;
          v222[0].f32[v67] = v64 * 0.25;
          *(float *)((char *)v222[0].f32 + ((4 * v67) | 8)) = v65 * 0.25;
          *(float *)((char *)v222[0].f32 + ((4 * v67) | 0x40)) = (float)((float)(v66 + v62) - v63) * 0.25;
          *(float *)((char *)v222[0].f32 + ((4 * v67) | 0x48)) = (float)((float)(v66 - v62) + v63) * 0.25;
          v54 = 1;
          v58 = 0;
        }
        while ((v59 & 1) != 0);
        v53 = 0;
        v44 = 1;
      }
      while ((v55 & 1) != 0);
      for (i = 0; i != 8; i += 2)
        *(float32x4_t *)(a4 + i * 16) = v222[i];
      v69 = *(float *)(a4 + 4);
      v70 = *(float *)(a4 + 32);
      v71 = *(float *)(a4 + 36);
      v72 = *(float *)a4 + v69;
      v73 = *(float *)a4 - v69;
      v74 = (float)((float)(v73 + v70) - v71) * 0.25;
      *(float *)a4 = (float)((float)(v72 + v70) + v71) * 0.25;
      *(float *)(a4 + 4) = (float)((float)(v72 - v70) - v71) * 0.25;
      v75 = (float)((float)(v73 - v70) + v71) * 0.25;
      goto LABEL_35;
    case 3:
      v76 = 0;
      v209 = 4 * a3;
      v77 = 1;
      do
      {
        v78 = 0;
        v79 = v77;
        v80 = &v8[v209 * v76];
        v81 = 32 * v76;
        v82 = 1;
        do
        {
          v83 = v82;
          v84 = v222;
          sub_2368125DC(a3, (float32x4_t *)&v80[4 * v78], (int32x4_t *)v222, (uint64_t)a5);
          v85 = 0;
          v86 = v81 + 4 * v78;
          do
          {
            v87 = 0;
            v88 = v86;
            do
            {
              *(_DWORD *)(a4 + v88) = v84->i32[v87++];
              v88 += 8;
            }
            while (v87 != 4);
            ++v85;
            v86 += 64;
            ++v84;
          }
          while (v85 != 4);
          v82 = 0;
          v78 = 1;
        }
        while ((v83 & 1) != 0);
        v77 = 0;
        v76 = 1;
      }
      while ((v79 & 1) != 0);
LABEL_34:
      v89 = *(float *)a4;
      v90 = *(float *)(a4 + 4);
      v91 = *(float *)(a4 + 32);
      v92 = *(float *)(a4 + 36);
      v93 = *(float *)a4 + v90;
      *(float *)a4 = (float)((float)(v93 + v91) + v92) * 0.25;
      *(float *)(a4 + 4) = (float)((float)(v93 - v91) - v92) * 0.25;
      v94 = v89 - v90;
      v74 = (float)((float)(v94 + v91) - v92) * 0.25;
      v75 = (float)((float)(v94 - v91) + v92) * 0.25;
LABEL_35:
      *(float *)(a4 + 32) = v74;
      *(float *)(a4 + 36) = v75;
      return;
    case 4:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[64];
      v222[0].i64[0] = 16;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824E8C, (uint64_t)&v212, (uint64_t)v222, 16, (uint64_t)&a5[64]);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = a4;
      v214.i64[0] = 16;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DF0D8(v222, &v214);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 16;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824E8C;
      goto LABEL_39;
    case 5:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[256];
      v222[0].i64[0] = 32;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028, (uint64_t)&v212, (uint64_t)v222, 32, (uint64_t)&a5[256]);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = a4;
      v214.i64[0] = 32;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 32, 32);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 32;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028;
      goto LABEL_48;
    case 6:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[32];
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824E8C, (uint64_t)&v212, (uint64_t)v222, 8, (uint64_t)&a5[32]);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      v214.i64[0] = 16;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DF314(v222, &v214);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 16;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824F64;
LABEL_39:
      v11 = 16;
      goto LABEL_144;
    case 7:
      v212 = a3;
      v213 = a2;
      v222[0].i64[0] = 16;
      v222[0].i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824F64, (uint64_t)&v212, (uint64_t)v222, 16, (uint64_t)&a5[32]);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 8;
      v214.i64[1] = a4;
      sub_2367DF22C(v222, &v214);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      v214.i64[0] = 8;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824E8C, (uint64_t)v222, (uint64_t)&v214, 8, (uint64_t)&a5[32]);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 16;
      v214.i64[1] = a4;
      sub_2367DF314(v222, &v214);
      return;
    case 8:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[64];
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028, (uint64_t)&v212, (uint64_t)v222, 8, (uint64_t)&a5[64]);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      v214.i64[0] = 32;
      v214.i64[1] = (uint64_t)a5;
      sub_2368128D4(v222, &v214);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 32;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824F64;
      goto LABEL_48;
    case 9:
      v212 = a3;
      v213 = a2;
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824F64, (uint64_t)&v212, (uint64_t)v222, 32, (uint64_t)&a5[64]);
      v95 = 0;
      v96 = 1;
      do
      {
        v97 = v96;
        v98 = (int32x4_t *)((char *)a5 + ((v95 << 7) | 0x100));
        v99 = a4 + 64 + 4 * v95;
        v100 = -4;
        do
        {
          v101 = v98[-16];
          v102 = v98[-8];
          v103 = v98[8];
          v104 = (float32x2x2_t)vzip1q_s32(v101, *v98);
          v105 = vzip1q_s32(v102, v103);
          v106 = (float32x2x2_t)vzip2q_s32(v101, *v98);
          v107 = vzip2q_s32(v102, v103);
          v108 = (float *)(v99 - 64);
          vst2_f32(v108, v104);
          vst2_f32((float *)v99, v106);
          *(int32x4_t *)(v99 - 32) = vzip2q_s32((int32x4_t)v104, v105);
          *(int32x4_t *)(v99 + 32) = vzip2q_s32((int32x4_t)v106, v107);
          v100 += 4;
          ++v98;
          v99 += 128;
        }
        while (v100 < 0x1C);
        v96 = 0;
        v95 = 4;
      }
      while ((v97 & 1) != 0);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = a4;
      v214.i64[0] = 8;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028, (uint64_t)v222, (uint64_t)&v214, 8, (uint64_t)&a5[64]);
      v222[0].i64[0] = 8;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 32;
      v214.i64[1] = a4;
      sub_2368128D4(v222, &v214);
      return;
    case 10:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[128];
      v222[0].i64[0] = 16;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028, (uint64_t)&v212, (uint64_t)v222, 16, (uint64_t)&a5[128]);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = a4;
      v214.i64[0] = 32;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 32, 16);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 32;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824E8C;
LABEL_48:
      v11 = 32;
      goto LABEL_144;
    case 11:
      v212 = a3;
      v213 = a2;
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824E8C, (uint64_t)&v212, (uint64_t)v222, 32, (uint64_t)&a5[128]);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 16;
      v214.i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 16, 32);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = a4;
      v214.i64[0] = 16;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028, (uint64_t)v222, (uint64_t)&v214, 16, (uint64_t)&a5[128]);
      v222[0].i64[0] = 16;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 32;
      v214.i64[1] = a4;
      v109 = 32;
      v110 = 16;
      goto LABEL_146;
    case 12:
      v111 = 0;
      v112 = 1;
      do
      {
        v113 = v112;
        v114 = 32 * v111;
        v214.i64[0] = a3;
        v214.i64[1] = (uint64_t)&v8[4 * a3 * v111];
        sub_236824DE8((uint64_t)&v214, v222, a5);
        for (j = 0; j != 8; j += 2)
        {
          v116 = (float32x4_t *)(a4 + v114);
          v117 = v222[j + 1];
          *v116 = v222[j];
          v116[1] = v117;
          v114 += 64;
        }
        v112 = 0;
        v111 = 1;
      }
      while ((v113 & 1) != 0);
      goto LABEL_59;
    case 13:
      v118 = 0;
      v119 = 1;
      do
      {
        v120 = v119;
        v121 = 32 * v118;
        v214.i64[0] = 4;
        v214.i64[1] = (uint64_t)v222;
        sub_2367E0CD4(a3, (float32x4_t *)&v8[4 * v118], &v214, a5 + 8);
        v214.i64[0] = 4;
        v214.i64[1] = (uint64_t)v222;
        v212 = 8;
        v213 = a5;
        sub_2367DFEEC(&v214, &v212);
        v214.i64[0] = 8;
        v214.i64[1] = (uint64_t)a5;
        v212 = 8;
        v213 = v222;
        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824D04, (uint64_t)&v214, (uint64_t)&v212, 8, (uint64_t)&a5[8]);
        for (k = 0; k != 8; k += 2)
        {
          v123 = (float32x4_t *)(a4 + v121);
          v124 = v222[k + 1];
          *v123 = v222[k];
          v123[1] = v124;
          v121 += 64;
        }
        v119 = 0;
        v118 = 1;
      }
      while ((v120 & 1) != 0);
LABEL_59:
      v125 = *(float *)a4;
      v126 = *(float *)(a4 + 32);
      *(float *)a4 = (float)(*(float *)a4 + v126) * 0.5;
      v127 = (float)(v125 - v126) * 0.5;
      goto LABEL_132;
    case 14:
      v128 = 0;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      v216 = 0u;
      v217 = 0u;
      v129 = a2;
      v214 = 0u;
      v215 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v214 + v128) = *v129;
        v128 += 16;
        v129 = (float32x4_t *)((char *)v129 + 4 * a3);
      }
      while (v128 != 64);
      v130 = 0;
      v131 = (float32x4_t *)&unk_2369227D0;
      do
      {
        v132 = 0;
        v133 = 0uLL;
        do
        {
          v133 = vmlaq_n_f32(v133, v131[v132 * 4], v214.f32[v132]);
          ++v132;
        }
        while (v132 != 16);
        *(float32x4_t *)((char *)&v212 + 4 * v130) = v133;
        ++v131;
        _CF = v130 >= 0xC;
        v130 += 4;
      }
      while (!_CF);
      v134 = 0;
      v135 = &v212;
      v136 = (_DWORD *)a4;
      do
      {
        v137 = 0;
        v138 = v136;
        do
        {
          *v138 = *(_DWORD *)((char *)v135 + v137);
          v138 += 2;
          v137 += 4;
        }
        while (v137 != 16);
        ++v134;
        v136 += 16;
        v135 += 2;
      }
      while (v134 != 4);
      v139 = &v214;
      sub_2368125DC(a3, a2 + 1, (int32x4_t *)&v214, (uint64_t)v222);
      v140 = 0;
      v141 = 4;
      do
      {
        v142 = 0;
        v143 = v141;
        do
        {
          *(_DWORD *)(a4 + v143) = v139->i32[v142++];
          v143 += 8;
        }
        while (v142 != 8);
        ++v140;
        v141 += 64;
        ++v139;
      }
      while (v140 != 4);
      v210 = a3;
      v211 = &v8[4 * a3];
      sub_236824DE8((uint64_t)&v210, &v214, v222);
      v144 = 0;
      v145 = a4 + 32;
      do
      {
        v146 = *(__int128 *)((char *)&v214 + v144 + 16);
        *(float32x4_t *)v145 = *(float32x4_t *)((char *)&v214 + v144);
        *(_OWORD *)(v145 + 16) = v146;
        v145 += 64;
        v144 += 32;
      }
      while (v144 != 128);
      goto LABEL_131;
    case 15:
      v147 = 0;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      v216 = 0u;
      v217 = 0u;
      v148 = 16;
      v214 = 0u;
      v215 = 0u;
      do
      {
        v149 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)a2 + v148));
        *(int8x16_t *)((char *)&v214 + v147) = vextq_s8(v149, v149, 8uLL);
        v147 += 16;
        v148 += 4 * a3;
      }
      while (v147 != 64);
      v150 = 0;
      v151 = (float32x4_t *)&unk_2369227D0;
      do
      {
        v152 = 0;
        v153 = 0uLL;
        do
        {
          v153 = vmlaq_n_f32(v153, v151[v152 * 4], v214.f32[v152]);
          ++v152;
        }
        while (v152 != 16);
        *(float32x4_t *)((char *)&v212 + 4 * v150) = v153;
        ++v151;
        _CF = v150 >= 0xC;
        v150 += 4;
      }
      while (!_CF);
      v154 = 0;
      v155 = &v212;
      v156 = (_DWORD *)a4;
      do
      {
        v157 = 0;
        v158 = v156;
        do
        {
          *v158 = *(_DWORD *)((char *)v155 + v157);
          v158 += 2;
          v157 += 4;
        }
        while (v157 != 16);
        ++v154;
        v156 += 16;
        v155 += 2;
      }
      while (v154 != 4);
      v159 = &v214;
      sub_2368125DC(a3, a2, (int32x4_t *)&v214, (uint64_t)v222);
      v160 = 0;
      v161 = 4;
      do
      {
        v162 = 0;
        v163 = v161;
        do
        {
          *(_DWORD *)(a4 + v163) = v159->i32[v162++];
          v163 += 8;
        }
        while (v162 != 8);
        ++v160;
        v161 += 64;
        ++v159;
      }
      while (v160 != 4);
      v210 = a3;
      v211 = &v8[4 * a3];
      sub_236824DE8((uint64_t)&v210, &v214, v222);
      v164 = 0;
      v165 = a4 + 32;
      do
      {
        v166 = *(__int128 *)((char *)&v214 + v164 + 16);
        *(float32x4_t *)v165 = *(float32x4_t *)((char *)&v214 + v164);
        *(_OWORD *)(v165 + 16) = v166;
        v165 += 64;
        v164 += 32;
      }
      while (v164 != 128);
      goto LABEL_131;
    case 16:
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      v216 = 0u;
      v217 = 0u;
      v167 = 16 * a3;
      v168 = 48;
      v214 = 0u;
      v215 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v214 + v168) = *(float32x4_t *)((char *)a2 + v167);
        v168 -= 16;
        v167 += 4 * a3;
      }
      while (v168 != -16);
      v169 = 0;
      v170 = (float32x4_t *)&unk_2369227D0;
      do
      {
        v171 = 0;
        v172 = 0uLL;
        do
        {
          v172 = vmlaq_n_f32(v172, v170[v171 * 4], v214.f32[v171]);
          ++v171;
        }
        while (v171 != 16);
        *(float32x4_t *)((char *)&v212 + 4 * v169) = v172;
        ++v170;
        _CF = v169 >= 0xC;
        v169 += 4;
      }
      while (!_CF);
      v173 = 0;
      v174 = &v212;
      v175 = (_DWORD *)a4;
      do
      {
        v176 = 0;
        v177 = v175;
        do
        {
          *v177 = *(_DWORD *)((char *)v174 + v176);
          v177 += 2;
          v176 += 4;
        }
        while (v176 != 16);
        ++v173;
        v175 += 16;
        v174 += 2;
      }
      while (v173 != 4);
      v178 = &v214;
      sub_2368125DC(a3, &a2[a3 + 1], (int32x4_t *)&v214, (uint64_t)v222);
      v179 = 0;
      v180 = 4;
      do
      {
        v181 = 0;
        v182 = v180;
        do
        {
          *(_DWORD *)(a4 + v182) = v178->i32[v181++];
          v182 += 8;
        }
        while (v181 != 8);
        ++v179;
        v180 += 64;
        ++v178;
      }
      while (v179 != 4);
      v210 = a3;
      v211 = v8;
      sub_236824DE8((uint64_t)&v210, &v214, v222);
      v183 = 0;
      v184 = a4 + 32;
      do
      {
        v185 = *(__int128 *)((char *)&v214 + v183 + 16);
        *(float32x4_t *)v184 = *(float32x4_t *)((char *)&v214 + v183);
        *(_OWORD *)(v184 + 16) = v185;
        v184 += 64;
        v183 += 32;
      }
      while (v183 != 128);
      goto LABEL_131;
    case 17:
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      v216 = 0u;
      v217 = 0u;
      v186 = 16 * a3 + 16;
      v187 = 48;
      v214 = 0u;
      v215 = 0u;
      do
      {
        v188 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)a2 + v186));
        *(int8x16_t *)((char *)&v214 + v187) = vextq_s8(v188, v188, 8uLL);
        v187 -= 16;
        v186 += 4 * a3;
      }
      while (v187 != -16);
      v189 = 0;
      v190 = (float32x4_t *)&unk_2369227D0;
      do
      {
        v191 = 0;
        v192 = 0uLL;
        do
        {
          v192 = vmlaq_n_f32(v192, v190[v191 * 4], v214.f32[v191]);
          ++v191;
        }
        while (v191 != 16);
        *(float32x4_t *)((char *)&v212 + 4 * v189) = v192;
        ++v190;
        _CF = v189 >= 0xC;
        v189 += 4;
      }
      while (!_CF);
      v193 = 0;
      v194 = &v212;
      v195 = (_DWORD *)a4;
      do
      {
        v196 = 0;
        v197 = v195;
        do
        {
          *v197 = *(_DWORD *)((char *)v194 + v196);
          v197 += 2;
          v196 += 4;
        }
        while (v196 != 16);
        ++v193;
        v195 += 16;
        v194 += 2;
      }
      while (v193 != 4);
      v198 = &v214;
      sub_2368125DC(a3, &a2[a3], (int32x4_t *)&v214, (uint64_t)v222);
      v199 = 0;
      v200 = 4;
      do
      {
        v201 = 0;
        v202 = v200;
        do
        {
          *(_DWORD *)(a4 + v202) = v198->i32[v201++];
          v202 += 8;
        }
        while (v201 != 8);
        ++v199;
        v200 += 64;
        ++v198;
      }
      while (v199 != 4);
      v210 = a3;
      v211 = v8;
      sub_236824DE8((uint64_t)&v210, &v214, v222);
      v203 = 0;
      v204 = a4 + 32;
      do
      {
        v205 = *(__int128 *)((char *)&v214 + v203 + 16);
        *(float32x4_t *)v204 = *(float32x4_t *)((char *)&v214 + v203);
        *(_OWORD *)(v204 + 16) = v205;
        v204 += 64;
        v203 += 32;
      }
      while (v203 != 128);
LABEL_131:
      v206 = *(float *)(a4 + 4);
      v207 = *(float *)a4 * 0.25;
      v208 = *(float *)(a4 + 32);
      *(float *)a4 = (float)((float)(v207 + v206) + (float)(v208 * 2.0)) * 0.25;
      *(float *)(a4 + 4) = (float)(v207 - v206) * 0.5;
      v127 = (float)((float)(v207 + v206) + (float)(v208 * -2.0)) * 0.25;
LABEL_132:
      *(float *)(a4 + 32) = v127;
      return;
    case 18:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[1024];
      v222[0].i64[0] = 64;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368250EC, (uint64_t)&v212, (uint64_t)v222, 64, (uint64_t)&a5[1024]);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = a4;
      v214.i64[0] = 64;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 64, 64);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 64;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368250EC;
      goto LABEL_135;
    case 19:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[512];
      v222[0].i64[0] = 32;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368250EC, (uint64_t)&v212, (uint64_t)v222, 32, (uint64_t)&a5[512]);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = a4;
      v214.i64[0] = 64;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 64, 32);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 64;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028;
LABEL_135:
      v11 = 64;
      goto LABEL_144;
    case 20:
      v212 = a3;
      v213 = a2;
      v222[0].i64[0] = 64;
      v222[0].i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825028, (uint64_t)&v212, (uint64_t)v222, 64, (uint64_t)&a5[512]);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 32;
      v214.i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 32, 64);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = a4;
      v214.i64[0] = 32;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368250EC, (uint64_t)v222, (uint64_t)&v214, 32, (uint64_t)&a5[512]);
      v222[0].i64[0] = 32;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 64;
      v214.i64[1] = a4;
      v109 = 64;
      v110 = 32;
      goto LABEL_146;
    case 21:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[4096];
      v222[0].i64[0] = 128;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368251C4, (uint64_t)&v212, (uint64_t)v222, 128, (uint64_t)&a5[4096]);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = a4;
      v214.i64[0] = 128;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 128, 128);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 128;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368251C4;
      goto LABEL_139;
    case 22:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[2048];
      v222[0].i64[0] = 64;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368251C4, (uint64_t)&v212, (uint64_t)v222, 64, (uint64_t)&a5[2048]);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = a4;
      v214.i64[0] = 128;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 128, 64);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 128;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368250EC;
LABEL_139:
      v11 = 128;
      goto LABEL_144;
    case 23:
      v212 = a3;
      v213 = a2;
      v222[0].i64[0] = 128;
      v222[0].i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368250EC, (uint64_t)&v212, (uint64_t)v222, 128, (uint64_t)&a5[2048]);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 64;
      v214.i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 64, 128);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = a4;
      v214.i64[0] = 64;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368251C4, (uint64_t)v222, (uint64_t)&v214, 64, (uint64_t)&a5[2048]);
      v222[0].i64[0] = 64;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 128;
      v214.i64[1] = a4;
      v109 = 128;
      v110 = 64;
      goto LABEL_146;
    case 24:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[0x4000];
      v222[0].i64[0] = 256;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825288, (uint64_t)&v212, (uint64_t)v222, 256, (uint64_t)&a5[0x4000]);
      v222[0].i64[0] = 256;
      v222[0].i64[1] = a4;
      v214.i64[0] = 256;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 256, 256);
      v222[0].i64[0] = 256;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 256;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825288;
      goto LABEL_143;
    case 25:
      v212 = a3;
      v213 = a2;
      v9 = (uint64_t)&a5[0x2000];
      v222[0].i64[0] = 128;
      v222[0].i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825288, (uint64_t)&v212, (uint64_t)v222, 128, (uint64_t)&a5[0x2000]);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = a4;
      v214.i64[0] = 256;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 256, 128);
      v222[0].i64[0] = 256;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 256;
      v214.i64[1] = a4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368251C4;
LABEL_143:
      v11 = 256;
LABEL_144:
      sub_2367DED38(v10, (uint64_t)v222, (uint64_t)&v214, v11, v9);
      break;
    case 26:
      v212 = a3;
      v213 = a2;
      v222[0].i64[0] = 256;
      v222[0].i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368251C4, (uint64_t)&v212, (uint64_t)v222, 256, (uint64_t)&a5[0x2000]);
      v222[0].i64[0] = 256;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 128;
      v214.i64[1] = a4;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, 128, 256);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = a4;
      v214.i64[0] = 128;
      v214.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236825288, (uint64_t)v222, (uint64_t)&v214, 128, (uint64_t)&a5[0x2000]);
      v222[0].i64[0] = 128;
      v222[0].i64[1] = (uint64_t)a5;
      v214.i64[0] = 256;
      v214.i64[1] = a4;
      v109 = 256;
      v110 = 128;
LABEL_146:
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)v222, (uint64_t)&v214, v109, v110);
      break;
    default:
      return;
  }
}

void sub_236823A58()
{
  int v0;
  float32x4_t *v1;
  float32x4_t *v2;
  uint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  double v6;
  float32x2_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x2x2_t v19;
  int32x4_t v20;
  float32x2x2_t v21;
  int32x4_t v22;
  float32x4_t *v23;
  float *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  float32x4_t *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  const float *v46;
  float32x4_t v47;
  float32x4_t *v48;
  void (*v49)(uint64_t *, uint64_t *, unint64_t, float32x4_t *);
  uint64_t v50;
  float32x4_t *v51;
  uint64_t v52;
  const float *v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  const float *v58;
  float32x4_t v59;
  float32x4_t *v60;
  uint64_t i;
  uint64_t v62;
  const float *v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  const float *v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t *v72;
  uint64_t v73;
  const float *v74;
  float32x4_t v75;
  float32x4_t *v76;
  uint64_t j;
  uint64_t v78;
  const float *v79;
  float32x4_t v80;
  float32x4_t *v81;
  uint64_t k;
  uint64_t v83;
  const float *v84;
  float32x4_t v85;
  float32x4_t *v86;
  uint64_t m;
  uint64_t v88;
  const float *v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t *v92;
  uint64_t v93;
  float32x4_t *v94;
  uint64_t v95;
  float32x4_t *v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  float32x4_t v101[4];
  float32x4_t v102[8];
  _BYTE v103[256];
  _BYTE v104[512];
  _BYTE v105[1024];
  _BYTE v106[2048];
  _BYTE v107[8192];
  float32x4_t v108;
  float32x4_t v109;
  __int128 v110;
  int32x4_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  float32x4x2_t v141;

  v0 = MEMORY[0x24BDAC7A8]();
  v140 = *MEMORY[0x24BDAC8D0];
  v8 = v3;
  v9 = v2;
  v10 = v1;
  switch(v0)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      v2->i32[0] = v1->i32[0];
      return;
    case 4:
      v11.i32[0] = v1->i32[0];
      v11.f32[1] = v1->f32[1] * 0.90176;
      v12.i32[0] = v1[4].i32[0];
      v12.f32[1] = v1[4].f32[1] * 0.90176;
      v13 = vmul_f32(v12, (float32x2_t)vdup_n_s32(0x3F66DA05u));
      v14 = (int32x2_t)vadd_f32(v11, v13);
      v15 = (int32x2_t)vsub_f32(v11, v13);
      v13.i32[0] = vdup_lane_s32(v14, 1).u32[0];
      v16 = (float32x2_t)vzip1_s32(v14, v15);
      v13.i32[1] = v15.i32[1];
      *(float32x2_t *)v2->f32 = vadd_f32(v16, v13);
      *(float32x2_t *)&v2->f32[v3] = vsub_f32(v16, v13);
      return;
    case 5:
      v17 = 0;
      v111 = 0u;
      v110 = 0u;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v18 = *v10;
        v10 += 8;
        *(&v108 + v17) = vmulq_f32(vmulq_n_f32(v18, *((float *)&xmmword_2368AF840 + v17)), (float32x4_t)xmmword_2368AF840);
        ++v17;
      }
      while (v17 != 4);
      sub_2367DFE40(&v108, 4, (uint64_t)&v97, 4, v101);
      v19 = (float32x2x2_t)vzip1q_s32(v97, v99);
      v20 = vzip1q_s32(v98, v100);
      v21 = (float32x2x2_t)vzip2q_s32(v97, v99);
      v22 = vzip2q_s32(v98, v100);
      v23 = &v108;
      vst2_f32(v23->f32, v19);
      *(int32x4_t *)++v23 = vzip2q_s32((int32x4_t)v19, v20);
      v24 = (float *)&v110;
      vst2_f32(v24, v21);
      v111 = vzip2q_s32((int32x4_t)v21, v22);
      sub_2367DFE40(&v108, 4, (uint64_t)v9, v8, v101);
      return;
    case 6:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      v2->i32[0] = vadd_f32(v4, v5).u32[0];
      v2->i32[v3] = vsub_f32(v4, v5).u32[0];
      return;
    case 7:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      *(int32x2_t *)v2->f32 = vzip1_s32((int32x2_t)vadd_f32(v4, v5), (int32x2_t)vsub_f32(v4, v5));
      return;
    case 8:
      sub_236824800(1, (__int32 *)&v108, v3, (uint64_t)v2, &v98, (float32x2_t)*(_OWORD *)&vmulq_f32(*v1, (float32x4_t)xmmword_2368AF840), 0.00624292809, v6, v7);
      return;
    case 9:
      v108 = vmulq_f32(*v1, (float32x4_t)xmmword_2368AF840);
      v97 = (int32x4_t)v108;
      sub_236824800(1, v97.i32, 1, (uint64_t)&v108, &v98, *(float32x2_t *)v108.f32, 0.00624292809, v6, v7);
      v97 = (int32x4_t)v108;
      *v9 = v108;
      return;
    case 10:
      v25 = 0;
      v109 = 0u;
      v108 = 0u;
      v26 = 1;
      do
      {
        v27 = v26;
        *(&v108 + v25) = vmulq_f32(vmulq_n_f32(v1[8 * v25], flt_2368B04C0[v25]), (float32x4_t)xmmword_2368AF840);
        v25 = 1;
        v26 = 0;
      }
      while ((v27 & 1) != 0);
      v28 = 0;
      v97 = (int32x4_t)vaddq_f32(v108, v109);
      v98 = (int32x4_t)vsubq_f32(v108, v109);
      v29 = 1;
      do
      {
        v30 = 0;
        v31 = v29;
        v32 = v28;
        v33 = (float32x4_t *)(&v97 + v28);
        do
        {
          v108.i32[v32] = v33->i32[v30++];
          v32 += 2;
        }
        while (v30 != 4);
        v29 = 0;
        v28 = 1;
      }
      while ((v31 & 1) != 0);
      sub_2368248AC(2, (float32x2_t *)&v108, v3, (uint64_t)v2, (float32x2_t *)&v99);
      return;
    case 11:
      v34 = 0;
      v109 = 0u;
      v108 = 0u;
      v35 = 1;
      do
      {
        v36 = v35;
        *(&v108 + v34) = vmulq_f32(vmulq_n_f32(v1[8 * v34], flt_2368B04C0[v34]), (float32x4_t)xmmword_2368AF840);
        v34 = 1;
        v35 = 0;
      }
      while ((v36 & 1) != 0);
      v37 = 0;
      v38 = 1;
      do
      {
        v39 = 0;
        v40 = v38;
        v41 = v37;
        v42 = &v108 + v37;
        do
        {
          v97.i32[v41] = v42->i32[v39++];
          v41 += 2;
        }
        while (v39 != 4);
        v38 = 0;
        v37 = 1;
      }
      while ((v40 & 1) != 0);
      sub_2368248AC(2, (float32x2_t *)&v97, 2, (uint64_t)&v108, (float32x2_t *)&v99);
      v141 = vld2q_f32(v108.f32);
      *v9 = vaddq_f32(v141.val[0], v141.val[1]);
      *(float32x4_t *)((char *)v9 + 4 * v8) = vsubq_f32(v141.val[0], v141.val[1]);
      return;
    case 18:
      v43 = 0;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v44 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v45 = 0;
        v46 = (const float *)xmmword_236922F50 + v43;
        v47 = vld1q_dup_f32(v46);
        do
        {
          v44[v45] = vmulq_f32(vmulq_f32(v10[v45], v47), (float32x4_t)xmmword_236922F50[v45]);
          ++v45;
        }
        while (v45 != 2);
        ++v43;
        v44 += 2;
        v10 += 16;
      }
      while (v43 != 8);
      v91 = v3;
      v92 = v2;
      v48 = (float32x4_t *)v103;
      v95 = 8;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368249C0, (uint64_t)&v95, (uint64_t)&v93, 8, (uint64_t)v103);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v93 = 8;
      v94 = &v108;
      sub_2367DF630(&v95, &v93);
      v95 = 8;
      v96 = &v108;
      v49 = sub_2368249C0;
      goto LABEL_50;
    case 19:
      v50 = 0;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v51 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v52 = 0;
        v53 = (const float *)&xmmword_2368AF840 + v50;
        v54 = vld1q_dup_f32(v53);
        do
        {
          v51[v52] = vmulq_f32(vmulq_f32(v10[v52], v54), (float32x4_t)xmmword_236922F50[v52]);
          ++v52;
        }
        while (v52 != 2);
        ++v50;
        v51 += 2;
        v10 += 16;
      }
      while (v50 != 4);
      v95 = 8;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824954, (uint64_t)&v95, (uint64_t)&v93, 8, (uint64_t)v102);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v93 = 4;
      v94 = &v108;
      sub_2367DED50(&v95, &v93);
      sub_2367DEDF8(&v108, 4, v9, v8, v102);
      return;
    case 20:
      v55 = 0;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v56 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v57 = 0;
        v58 = (const float *)&xmmword_2368AF840 + v55;
        v59 = vld1q_dup_f32(v58);
        do
        {
          v56[v57] = vmulq_f32(vmulq_f32(v10[v57], v59), (float32x4_t)xmmword_236922F50[v57]);
          ++v57;
        }
        while (v57 != 2);
        ++v55;
        v56 += 2;
        v10 += 16;
      }
      while (v55 != 4);
      v91 = v3;
      v92 = v2;
      v48 = v102;
      v95 = 8;
      v96 = &v108;
      v93 = 4;
      v94 = (float32x4_t *)&v97;
      sub_2367DED50(&v95, &v93);
      sub_2367DEDF8((float32x4_t *)&v97, 4, &v108, 4, v102);
      v95 = 4;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DFEEC(&v95, &v93);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v49 = sub_236824954;
      goto LABEL_50;
    case 21:
      v60 = &v108;
      bzero(&v108, 0x400uLL);
      for (i = 0; i != 16; ++i)
      {
        v62 = 0;
        v63 = (const float *)xmmword_236922F70 + i;
        v64 = vld1q_dup_f32(v63);
        do
        {
          v60[v62] = vmulq_f32(vmulq_f32(v10[v62], v64), (float32x4_t)xmmword_236922F70[v62]);
          ++v62;
        }
        while (v62 != 4);
        v60 += 4;
        v10 += 32;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v105;
      v95 = 16;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A2C, (uint64_t)&v95, (uint64_t)&v93, 16, (uint64_t)v105);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v93 = 16;
      v94 = &v108;
      sub_2367DF0D8(&v95, &v93);
      v95 = 16;
      v96 = &v108;
      v49 = sub_236824A2C;
      goto LABEL_66;
    case 22:
      v65 = 0;
      v139 = 0u;
      v138 = 0u;
      v137 = 0u;
      v136 = 0u;
      v135 = 0u;
      v134 = 0u;
      v133 = 0u;
      v132 = 0u;
      v131 = 0u;
      v130 = 0u;
      v129 = 0u;
      v128 = 0u;
      v127 = 0u;
      v126 = 0u;
      v125 = 0u;
      v124 = 0u;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v66 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v67 = 0;
        v68 = (const float *)xmmword_236922F50 + v65;
        v69 = vld1q_dup_f32(v68);
        do
        {
          v66[v67] = vmulq_f32(vmulq_f32(v10[v67], v69), (float32x4_t)xmmword_236922F70[v67]);
          ++v67;
        }
        while (v67 != 4);
        ++v65;
        v66 += 4;
        v10 += 32;
      }
      while (v65 != 8);
      v91 = v3;
      v92 = v2;
      v48 = (float32x4_t *)v104;
      v95 = 16;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2368249C0, (uint64_t)&v95, (uint64_t)&v93, 16, (uint64_t)v104);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v93 = 8;
      v94 = &v108;
      sub_2367DF22C(&v95, &v93);
      v95 = 8;
      v96 = &v108;
      v49 = sub_236824A2C;
LABEL_50:
      v70 = 8;
      goto LABEL_73;
    case 23:
      v71 = 0;
      v139 = 0u;
      v138 = 0u;
      v137 = 0u;
      v136 = 0u;
      v135 = 0u;
      v134 = 0u;
      v133 = 0u;
      v132 = 0u;
      v131 = 0u;
      v130 = 0u;
      v129 = 0u;
      v128 = 0u;
      v127 = 0u;
      v126 = 0u;
      v125 = 0u;
      v124 = 0u;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v72 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v73 = 0;
        v74 = (const float *)xmmword_236922F50 + v71;
        v75 = vld1q_dup_f32(v74);
        do
        {
          v72[v73] = vmulq_f32(vmulq_f32(v10[v73], v75), (float32x4_t)xmmword_236922F70[v73]);
          ++v73;
        }
        while (v73 != 4);
        ++v71;
        v72 += 4;
        v10 += 32;
      }
      while (v71 != 8);
      v91 = v3;
      v92 = v2;
      v48 = (float32x4_t *)v104;
      v95 = 16;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DF22C(&v95, &v93);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v93 = 8;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A2C, (uint64_t)&v95, (uint64_t)&v93, 8, (uint64_t)v104);
      v95 = 8;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DF314(&v95, &v93);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v49 = sub_2368249C0;
      goto LABEL_66;
    case 24:
      v76 = &v108;
      bzero(&v108, 0x1000uLL);
      for (j = 0; j != 32; ++j)
      {
        v78 = 0;
        v79 = (const float *)xmmword_236922FB0 + j;
        v80 = vld1q_dup_f32(v79);
        do
        {
          v76[v78] = vmulq_f32(vmulq_f32(v10[v78], v80), (float32x4_t)xmmword_236922FB0[v78]);
          ++v78;
        }
        while (v78 != 8);
        v76 += 8;
        v10 += 64;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v107;
      v95 = 32;
      v96 = &v108;
      v93 = 32;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824B7C, (uint64_t)&v95, (uint64_t)&v93, 32, (uint64_t)v107);
      v95 = 32;
      v96 = (float32x4_t *)&v97;
      v93 = 32;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)&v95, (uint64_t)&v93, 32, 32);
      v95 = 32;
      v96 = &v108;
      v49 = sub_236824B7C;
      goto LABEL_72;
    case 25:
      v81 = &v108;
      bzero(&v108, 0x800uLL);
      for (k = 0; k != 16; ++k)
      {
        v83 = 0;
        v84 = (const float *)xmmword_236922F70 + k;
        v85 = vld1q_dup_f32(v84);
        do
        {
          v81[v83] = vmulq_f32(vmulq_f32(v10[v83], v85), (float32x4_t)xmmword_236922FB0[v83]);
          ++v83;
        }
        while (v83 != 8);
        v81 += 8;
        v10 += 64;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v106;
      v95 = 32;
      v96 = &v108;
      v93 = 32;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A2C, (uint64_t)&v95, (uint64_t)&v93, 32, (uint64_t)v106);
      v95 = 32;
      v96 = (float32x4_t *)&v97;
      v93 = 16;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)&v95, (uint64_t)&v93, 16, 32);
      v95 = 16;
      v96 = &v108;
      v49 = sub_236824B7C;
LABEL_66:
      v70 = 16;
      goto LABEL_73;
    case 26:
      v86 = &v108;
      bzero(&v108, 0x800uLL);
      for (m = 0; m != 16; ++m)
      {
        v88 = 0;
        v89 = (const float *)xmmword_236922F70 + m;
        v90 = vld1q_dup_f32(v89);
        do
        {
          v86[v88] = vmulq_f32(vmulq_f32(v10[v88], v90), (float32x4_t)xmmword_236922FB0[v88]);
          ++v88;
        }
        while (v88 != 8);
        v86 += 8;
        v10 += 64;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v106;
      v95 = 32;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)&v95, (uint64_t)&v93, 16, 32);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v93 = 16;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824B7C, (uint64_t)&v95, (uint64_t)&v93, 16, (uint64_t)v106);
      v95 = 16;
      v96 = &v108;
      v93 = 32;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824A98, (uint64_t)&v95, (uint64_t)&v93, 32, 16);
      v95 = 32;
      v96 = (float32x4_t *)&v97;
      v49 = sub_236824A2C;
LABEL_72:
      v70 = 32;
LABEL_73:
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49, (uint64_t)&v95, (uint64_t)&v91, v70, (uint64_t)v48);
      break;
    default:
      return;
  }
}

float sub_236824800(uint64_t a1, __int32 *a2, uint64_t a3, uint64_t a4, int32x4_t *a5, float32x2_t a6, double a7, double a8, float32x2_t a9)
{
  uint64_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  char v15;
  char v16;
  const float *v17;
  float32x2_t v18;
  const float *v19;
  float32x2_t v20;

  v9 = 0;
  a6.i32[0] = *a2;
  LODWORD(a7) = a2[a1];
  a9.i32[0] = a2[2 * a1];
  *(float32x2_t *)v10.i8 = vadd_f32(a6, a9);
  v11 = vsub_f32(a6, a9);
  v10.u64[1] = (unint64_t)v11;
  v11.f32[0] = *(float *)&a7 + *(float *)&a2[3 * a1];
  *(float *)&a7 = *(float *)&a7 * 1.4142;
  v12 = vsub_f32(*(float32x2_t *)&a7, v11);
  *(float32x2_t *)v13.i8 = vadd_f32(*(float32x2_t *)&a7, v11);
  v13.u64[1] = (unint64_t)v12;
  v14 = vuzp1q_s32(v10, v13);
  *a5 = v14;
  v15 = 1;
  do
  {
    v16 = v15;
    v14.i32[0] = dword_2368B04B8[v9];
    v17 = (const float *)&a5->i32[v9];
    v18 = vld1_dup_f32(v17);
    v19 = (const float *)((char *)a5->i32 + ((4 * v9) | 8));
    v20 = vld1_dup_f32(v19);
    *(_DWORD *)(a4 + 4 * v9 * a3) = vmla_n_f32(v18, v20, *(float *)v14.i32).u32[0];
    *(_DWORD *)(a4 + 4 * (v9 ^ 3) * a3) = vmls_lane_f32(v18, v20, *(float32x2_t *)v14.i8, 0).u32[0];
    v9 = 1;
    v15 = 0;
  }
  while ((v16 & 1) != 0);
  return *(float *)v14.i32;
}

float32_t sub_2368248AC(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, float32x2_t *a5)
{
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  char v15;
  char v16;
  float32x2_t v17;
  float32x2_t v18;

  v5 = 0;
  v6 = a2[a1];
  v7 = *(float32x2_t *)((char *)a2 + 4 * a1);
  v8 = *(float32x2_t *)((char *)a2 + 12 * a1);
  v9 = vadd_f32(*a2, v6);
  v10 = vsub_f32(*a2, v6);
  *a5 = v9;
  a5[1] = v10;
  v11 = vadd_f32(v7, v8);
  v12 = vmul_f32(v7, (float32x2_t)vdup_n_s32(0x3FB504F3u));
  v13 = vadd_f32(v12, v11);
  v14 = vsub_f32(v12, v11);
  a5[2] = v13;
  a5[3] = v14;
  v15 = 1;
  do
  {
    v16 = v15;
    v14.i32[0] = dword_2368B04B8[v5];
    v17 = *(float32x2_t *)((char *)a5 + ((8 * v5) | 0x10));
    v18 = vmls_lane_f32(a5[v5], v17, v14, 0);
    *(float32x2_t *)(a4 + 4 * v5 * a3) = vmla_n_f32(a5[v5], v17, v14.f32[0]);
    *(float32x2_t *)(a4 + 4 * (v5 ^ 3) * a3) = v18;
    v5 = 1;
    v15 = 0;
  }
  while ((v16 & 1) != 0);
  return v14.f32[0];
}

void sub_236824954(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFE40((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

void sub_2368249C0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DEDF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_236824A2C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFD10((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

_QWORD *sub_236824A98(_QWORD *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  int32x4_t v19;
  float *v20;
  uint64_t v21;
  float *v22;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 12;
    v7 = 8;
    v8 = 4;
    do
    {
      if (a4)
      {
        v9 = 0;
        for (i = 0; i < a4; i += 4)
        {
          v11 = result[1];
          v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          v17 = vzip1q_s32(v13, v15);
          v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          v19 = vzip2q_s32(v13, v15);
          v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_236824B7C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t j;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = a4 + 32;
    v10 = a4 + 16;
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v11 = 0;
      v13 = *a1;
      v12 = a1[1];
      v14 = *a2;
      v15 = a2[1];
      v16 = (float32x4_t *)(v12 + v7);
      v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 16);
      v18 = v12 + 4 * v13;
      for (i = 16; i != 32; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_2367DFD10(a4, 4, a4, 4, v9);
      for (j = 0; j != -15; --j)
        a4[j + 31] = vaddq_f32(a4[j + 31], a4[j + 30]);
      *v10 = vmulq_f32(*v10, v27);
      sub_2367DFD10(v10, 4, v10, 4, v9);
      v22 = 0;
      v23 = v15 + 124 * v14;
      do
      {
        v21.f32[0] = flt_23692278C[v22];
        v24 = &a4[v22];
        v25 = v24[16];
        v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 16);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

_QWORD *sub_236824D04(_QWORD *result, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      v14 = 0;
      v15 = (float32x4_t *)(result[1] + v4);
      v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      v17 = 0;
      v18 = *a4;
      v19 = a4[1];
      v21 = a4[2];
      v20 = a4[3];
      v22 = vaddq_f32(*a4, v20);
      v23 = vaddq_f32(v19, v21);
      v24 = vaddq_f32(v22, v23);
      v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      v28 = vaddq_f32(v26, v27);
      v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

double sub_236824DE8(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t *v5;
  double result;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t *v10;

  v5 = a3 + 8;
  v9 = 8;
  v10 = a3;
  sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236824D04, a1, (uint64_t)&v9, 8, (uint64_t)&a3[8]);
  v9 = 8;
  v10 = a3;
  v7 = 4;
  v8 = a2;
  sub_2367DED50(&v9, &v7);
  v9 = 4;
  v10 = a3;
  sub_2367E0CD4(4, a2, &v9, v5);
  v9 = 4;
  v10 = a3;
  v7 = 8;
  v8 = a2;
  *(_QWORD *)&result = sub_2367DFEEC(&v9, &v7).u64[0];
  return result;
}

void sub_236824E8C(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 256);
    v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2367E11AC(a4, v10);
      for (i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_236824F64(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 128);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2367E12DC(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_236825028(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 512);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 512);
      sub_236813548(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3D0000003D000000;
      v15.i64[1] = 0x3D0000003D000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 32);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_2368250EC(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 1024);
    v15 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 1024);
      sub_236813418(a4, v10);
      for (i = 0; i != 64; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_2368251C4(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 2048);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 2048);
      sub_2368132E0(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3C0000003C000000;
      v15.i64[1] = 0x3C0000003C000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 128);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_236825288(_QWORD *a1, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t i;
  float32x4_t *v18;
  uint64_t j;
  uint64_t k;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t m;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)&a4[256];
    v10 = a4 + 512;
    v11 = (uint64_t)&a4[384];
    v12 = a4 + 1;
    v26 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v13 = 0;
      v14 = (float32x4_t *)(a1[1] + v7);
      v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 256);
      v16 = a4;
      for (i = 255; i != 127; --i)
      {
        v16[256] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_2368132E0(v9, v10);
      v18 = a4;
      for (j = 255; j != 127; --j)
      {
        v18[384] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (k = 0; k != 128; ++k)
        *(float32x4_t *)(v11 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v11 + 16 * k), *(float *)&dword_236922D50[k]);
      sub_2368132E0(v11, v10);
      a4[384] = vmlaq_f32(a4[385], v27, a4[384]);
      v21 = 0xFFFFFFFFFFFFF82;
      do
      {
        a4[v21 + 511] = vaddq_f32(a4[v21 + 511], a4[v21 + 512]);
        ++v21;
      }
      while (v21 * 16);
      v22 = a4;
      do
      {
        *v22 = *(float32x4_t *)(v9 + v21 * 16);
        v22 += 2;
        ++v21;
      }
      while (v21 != 128);
      v23 = 0;
      v24 = v12;
      do
      {
        *v24 = *(float32x4_t *)(v11 + v23);
        v24 += 2;
        v23 += 16;
      }
      while (v23 != 2048);
      for (m = 0; m != 256; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v8) = vmulq_f32(a4[m], v26);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

uint64_t sub_236825474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, _QWORD *a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float32x4_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  float *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  float *v66;
  float *v67;
  float *v68;
  float *v69;
  float *v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  unint64_t v81;
  _DWORD *v82;
  float v83;
  float v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t *v100;
  uint64_t v101;
  float32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  _QWORD *v105;
  _QWORD *v106;
  float *v107;
  float *v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  float32x4_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  float *v127;
  uint64_t v128;
  float *v129;
  float *v130;
  _BYTE v131[4096];
  _BYTE v132[4096];
  _QWORD v133[514];

  v11 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v114 = v12;
  v112 = v13;
  v128 = v14;
  v121 = v15;
  v105 = v16;
  v133[512] = *MEMORY[0x24BDAC8D0];
  v17 = v11[5];
  v18 = (float32x4_t *)(v17 + 1388544 * a10);
  v106 = v19;
  v20 = v19[2];
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  v25 = v21[3] + v23;
  v98 = a11[8];
  v99 = a11[2];
  v97 = a11[7];
  v27 = v11[2];
  v26 = v11[3];
  v101 = a11[3];
  v102 = v18 + 49152;
  v100 = v18 + 50176;
  v103 = v18 + 52224;
  v104 = v18 + 51200;
  bzero(v133, 0x1000uLL);
  bzero(v132, 0x1000uLL);
  bzero(v131, 0x1000uLL);
  v113 = v23;
  if (v23 < v25)
  {
    v28 = v24 + v22;
    v118 = (uint64_t)&v18[0x4000];
    v117 = (uint64_t)&v18[0x8000];
    v115 = 0;
    v116 = v18 + 53248;
    v29 = v22 + v23 * (v20 >> 3);
    v30 = (float *)(v26 + 3 * v27 + 4 * v29);
    v31 = v20 >> 3;
    v32 = (float *)(v26 + v27 + 4 * v29);
    v33 = (float *)(v26 + 4 * v29);
    v34 = (float *)(v26 + 2 * v27 + 4 * v29);
    v111 = v17 + 1388544 * a10;
    v126 = v23;
    v120 = v22;
    v35 = v128;
    v36 = v111;
    v119 = v28;
    while (1)
    {
      v109 = v34;
      v110 = v30;
      v107 = v33;
      v108 = v32;
      if (v22 < v28)
        break;
LABEL_45:
      v30 = &v110[v31];
      v34 = &v109[v31];
      v32 = &v108[v31];
      v33 = &v107[v31];
      if (++v126 == v25)
        goto LABEL_48;
    }
    v37 = v105[2];
    v38 = v37 * (v106[1] + 8 * v126);
    v124 = v105[3] + v38 + 4 * *v106;
    v125 = v105[8] + v38 + 4 * *v106;
    v122 = v37 >> 2;
    v123 = v105[13] + v38 + 4 * *v106;
    v129 = v34;
    v130 = v32;
    v39 = v33;
    v40 = v22;
    while (v35)
    {
      v41 = *(unsigned __int8 *)(*(_QWORD *)(v35 + 24) + *(_QWORD *)(v35 + 16) * v126 + v40);
      if ((v41 & 1) != 0)
      {
        v127 = v39;
        v42 = v41 >> 1;
        goto LABEL_9;
      }
LABEL_44:
      ++v40;
      ++v30;
      ++v129;
      ++v130;
      ++v39;
      if (v40 == v28)
        goto LABEL_45;
    }
    v127 = v39;
    v42 = 0;
LABEL_9:
    v43 = byte_23692665C[v42];
    sub_236822610(v42, (float32x4_t *)(v125 + 32 * v40), v122, v36, v116);
    sub_236823A58();
    sub_236822610(v42, (float32x4_t *)(v124 + 32 * v40), v122, v118, v116);
    sub_236823A58();
    sub_236822610(v42, (float32x4_t *)(v123 + 32 * v40), v122, v117, v116);
    sub_236823A58();
    if (v128)
    {
      v44 = *(_QWORD *)(v114 + 64);
      v45 = *(float *)(v114 + 44) * (float)*(int *)(v114 + 36);
      v46 = 1.0 / (float)(*(float *)(v44 + 60) * v45);
      v47 = 1.0 / (float)(*(float *)(v44 + 68) * v45);
    }
    else
    {
      v46 = 1.0;
      v47 = 1.0;
    }
    v39 = v127;
    v48 = 0;
    v49 = *(_QWORD *)(v121 + 40);
    v50 = v121 + 24 * v42;
    v51 = v49 + 4 * *(_QWORD *)(v50 + 72);
    v52 = v49 + 4 * *(_QWORD *)(v50 + 88);
    v53 = byte_236926677[v42];
    if (v43 <= 1)
      v54 = 1;
    else
      v54 = v43;
    if (v53 <= 1)
      v55 = 1;
    else
      v55 = byte_236926677[v42];
    v56 = 4 * v43;
    v57 = (float *)v131;
    v58 = (float *)v132;
    v59 = (float *)v133;
    v60 = v127;
    v62 = v129;
    v61 = v130;
    v63 = v30;
    do
    {
      v64 = v59;
      v65 = v58;
      v66 = v57;
      v67 = v60;
      v68 = v61;
      v69 = v62;
      v70 = v63;
      v71 = v54;
      do
      {
        v72 = *v64++;
        v73 = v72;
        *v67++ = v46 * v72;
        v74 = *v65++;
        *v68++ = v46 * v74;
        *v69++ = v47 * v73;
        v75 = *v66++;
        *v70++ = v47 * v75;
        --v71;
      }
      while (v71);
      ++v48;
      v63 = (float *)((char *)v63 + v31 * 4);
      v62 = (float *)((char *)v62 + v31 * 4);
      v61 = (float *)((char *)v61 + v31 * 4);
      v60 = (float *)((char *)v60 + v31 * 4);
      v57 = (float *)((char *)v57 + v56);
      v58 = (float *)((char *)v58 + v56);
      v59 = (float *)((char *)v59 + v56);
    }
    while (v48 != v55);
    v22 = v120;
    v28 = v119;
    if (v120 + v43 > v119)
    {
      v35 = v128;
      v36 = v111;
    }
    else
    {
      v35 = v128;
      v36 = v111;
      if (v113 + v53 <= v25)
      {
        if (v53 >= v43)
          v76 = v43;
        else
          v76 = v53;
        if (v53 <= v43)
          v77 = v43;
        else
          v77 = v53;
        if (v76)
        {
          v78 = 0;
          v79 = (_DWORD *)v111;
          do
          {
            v80 = v79;
            v81 = v77;
            v82 = v79;
            do
            {
              *v82++ = 0;
              v80[0x10000] = 0;
              v80[0x20000] = 0;
              v80 = v82;
              --v81;
            }
            while (v81);
            ++v78;
            v79 += 8 * v77;
          }
          while (v78 != v76);
        }
        v83 = 1.0;
        v84 = 1.0;
        if (v112)
          v84 = (float)*(int *)(*(_QWORD *)(v112 + 24) + *(_QWORD *)(v112 + 16) * v126 + 4 * v40);
        if (v128)
          v83 = v84 * (float)(*(float *)(v114 + 44) * 128.0);
        v85 = (v43 * (unint64_t)v53) << 6;
        if (v85)
        {
          v86 = 0;
          v87 = 0;
          v88 = v111 + 4 * v115;
          do
          {
            v89 = *(float32x4_t *)(v111 + v86);
            v90 = *(float32x4_t *)(v111 + v86 + 0x40000);
            v91 = *(float32x4_t *)(v111 + v86 + 0x80000);
            v92 = vmulq_n_f32(*(float32x4_t *)(v51 + v86), v83);
            v93 = vmulq_n_f32(*(float32x4_t *)(v52 + v86), v83);
            *(float32x4_t *)(v88 + v86 + 786432) = vmulq_f32(v89, v92);
            *(float32x4_t *)(v88 + v86 + 802816) = vmulq_f32(v90, v92);
            *(float32x4_t *)(v88 + v86 + 819200) = vmulq_f32(v89, v93);
            *(float32x4_t *)(v88 + v86 + 835584) = vmulq_f32(v91, v93);
            v87 += 4;
            v86 += 16;
          }
          while (v87 < v85);
          v115 += v87;
        }
      }
    }
    goto LABEL_44;
  }
  v115 = 0;
LABEL_48:
  v94 = (int)(v113 >> 3);
  v95 = v98 + v97 * v94;
  *(_BYTE *)(v101 + v99 * v94 + (int)(v22 >> 3)) = sub_2368223A4(v102, v100, v115, a9, 0.0);
  result = sub_2368223A4(v104, v103, v115, a9, 1.0);
  *(_BYTE *)(v95 + (int)(v22 >> 3)) = result;
  return result;
}

float sub_236825AA4(uint64_t a1, float result, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unint64_t v9;
  int32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  int8x16_t v23;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;

  *(_DWORD *)(a1 + 32) = 0;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(int32x4_t **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v11 - *(_QWORD *)a1;
    if (v11 == *(_QWORD *)a1)
    {
      v29 = 0uLL;
    }
    else
    {
      v13 = 0;
      *(float *)&a9 = (float)v9;
      v14 = vdupq_n_s32(0xC0D55555);
      v15 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
      v16 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
      v17 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
      v18 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
      v19 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
      v20 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
      v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      v22 = v12 >> 2;
      v23.i64[0] = 0x7F0000007FLL;
      v23.i64[1] = 0x7F0000007FLL;
      __asm { FMOV            V20.4S, #-1.0 }
      v29 = 0uLL;
      do
      {
        v30 = *v10++;
        v31 = vcvtq_f32_s32(v30);
        v32 = (int32x4_t)vmulq_n_f32(v31, 1.0 / (float)v9);
        v33 = vaddq_s32(v32, v14);
        v34 = vaddq_f32((float32x4_t)vsubq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)v33, v23)), _Q20);
        v29 = vaddq_f32(v29, (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32((float32x4_t)0, vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v19, v34, vmlaq_f32(v16, v15, v34)), vmlaq_f32(v20, v34, vmlaq_f32(v18, v17, v34))), vcvtq_f32_s32(vshrq_n_s32(v33, 0x17uLL))), v31)), (int8x16_t)vceqq_f32(v21, v31)));
        v13 += 4;
      }
      while (v13 < v22);
    }
    result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) + 0.0;
    *(float *)(a1 + 32) = result;
  }
  return result;
}

float sub_236825BC4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  int32x4_t *v7;
  unint64_t v8;
  int32x4_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;

  v4 = *(_QWORD *)(a1 + 24);
  result = 0.0;
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      v7 = *(int32x4_t **)a1;
      v8 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
      v9 = *(int32x4_t **)a2;
      v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      v11 = v10 >> 2;
      if (v8 <= v10 >> 2)
        v12 = v10 >> 2;
      else
        v12 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
      if (v12)
      {
        v13 = 0;
        *(float *)&a4 = (float)(unint64_t)(v6 + v4);
        v14 = 1.0 / *(float *)&a4;
        v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        v16 = vdupq_n_s32(0xC0D55555);
        v17.i64[0] = 0x7F0000007FLL;
        v17.i64[1] = 0x7F0000007FLL;
        __asm { FMOV            V5.4S, #-1.0 }
        v23 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
        v24 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
        v25 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
        v26 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
        v27 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
        v28 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
        v29 = 0uLL;
        do
        {
          v30 = 0uLL;
          if (v8 > v13)
            v30 = *v7;
          v31 = 0uLL;
          if (v11 > v13)
            v31 = *v9;
          v32 = vcvtq_f32_s32(vaddq_s32(v31, v30));
          v33 = (int32x4_t)vmulq_n_f32(v32, v14);
          v34 = vaddq_s32(v33, v16);
          v35 = vaddq_f32((float32x4_t)vsubq_s32(v33, (int32x4_t)vandq_s8((int8x16_t)v34, v17)), _Q5);
          v29 = vaddq_f32(v29, (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32((float32x4_t)0, vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v27, v35, vmlaq_f32(v24, v23, v35)), vmlaq_f32(v28, v35, vmlaq_f32(v26, v25, v35))), vcvtq_f32_s32(vshrq_n_s32(v34, 0x17uLL))), v32)), (int8x16_t)vceqq_f32(v15, v32)));
          v13 += 4;
          ++v9;
          ++v7;
        }
        while (v13 < v12);
      }
      else
      {
        v29 = 0uLL;
      }
      return (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) - *(float *)(a1 + 32))
           - *(float *)(a2 + 32);
    }
  }
  return result;
}

float sub_236825D30(uint64_t a1, int32x4_t **a2)
{
  unint64_t v2;
  int32x4_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  unint64_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t *v16;
  float32x4_t v17;
  int8x16_t v18;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;

  if (!*(_QWORD *)(a1 + 24))
    return 0.0;
  v2 = (unint64_t)a2[3];
  if (!v2)
    return INFINITY;
  v3 = *(int32x4_t **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - *(_QWORD *)a1;
  if (v4 == *(_QWORD *)a1)
  {
    v17 = 0uLL;
  }
  else
  {
    v6 = 0;
    v7 = 1.0 / (float)v2;
    v8 = v5 >> 2;
    v9 = vdupq_n_s32(0xC0D55555);
    v10 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v11 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v12 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v13 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v14 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v15 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    v16 = *a2;
    v17 = 0uLL;
    v18.i64[0] = 0x7F0000007FLL;
    v18.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V18.4S, #-1.0 }
    do
    {
      v24 = 0uLL;
      if (((char *)a2[1] - (char *)*a2) >> 2 > v6)
        v24 = *v16;
      v25 = *v3++;
      v26 = (int32x4_t)vmulq_n_f32(vcvtq_f32_s32(v24), v7);
      v27 = vaddq_s32(v26, v9);
      v28 = vaddq_f32((float32x4_t)vsubq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)v27, v18)), _Q18);
      v17 = vmlsq_f32(v17, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vceqzq_s32(v24), v18, (int8x16_t)vaddq_f32(vdivq_f32(vmlaq_f32(v14, v28, vmlaq_f32(v11, v10, v28)), vmlaq_f32(v15, v28, vmlaq_f32(v13, v12, v28))), vcvtq_f32_s32(vshrq_n_s32(v27, 0x17uLL)))), (int8x16_t)vceqzq_s32(v25)), vcvtq_f32_s32(v25));
      v6 += 4;
      ++v16;
    }
    while (v6 < v8);
  }
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17)) - *(float *)(a1 + 32);
}

void sub_236825E80(uint64_t a1, int **a2)
{
  int *v4;
  int *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v6 > (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2)
  {
    sub_2367C5284((char **)a1, v6);
    v4 = *a2;
    v5 = a2[1];
    v6 = v5 - *a2;
  }
  if (v5 != v4)
  {
    v7 = *(char **)a1;
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = v6;
    do
    {
      v9 = *v4++;
      *(_DWORD *)v7 += v9;
      v7 += 4;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)(a1 + 24) += a2[3];
}

uint64_t sub_236825F0C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;
  unsigned int v9;

  if (*(float *)a2 < *(float *)a1)
    return 1;
  if (*(float *)a1 < *(float *)a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < v3)
    return 1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a2 + 8);
  v8 = v5 >= v6 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
  v9 = v6 < v5 || v8;
  if (v3 >= v4)
    return v9;
  else
    return 0;
}

uint64_t sub_236825F70(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = result;
    v6 = v3 >> 1;
    v7 = (_OWORD *)(result + 16 * (v3 >> 1));
    v8 = (_OWORD *)(a2 - 16);
    result = sub_236825F0C((uint64_t)v7, a2 - 16);
    if ((_DWORD)result)
    {
      v9 = *(float *)(a2 - 16);
      v10 = *(_DWORD *)(a2 - 12);
      v11 = *(_DWORD *)(a2 - 8);
      v12 = *(_DWORD *)(a2 - 4);
      *v8 = *v7;
      if (v3 >= 2)
      {
        while (1)
        {
          v14 = v6 - 1;
          v6 = (v6 - 1) >> 1;
          v13 = (_OWORD *)(v5 + 16 * v6);
          if (v9 >= *(float *)v13)
          {
            if (*(float *)v13 < v9)
              break;
            v15 = *((_DWORD *)v13 + 1);
            if (v10 >= v15)
            {
              if (v15 < v10)
                break;
              v16 = *((_DWORD *)v13 + 2);
              if (v11 >= v16 && (v16 < v11 || v12 >= *((_DWORD *)v13 + 3)))
                break;
            }
          }
          *v7 = *v13;
          v7 = (_OWORD *)(v5 + 16 * v6);
          if (v14 <= 1)
            goto LABEL_15;
        }
      }
      v13 = v7;
LABEL_15:
      *(float *)v13 = v9;
      *((_DWORD *)v13 + 1) = v10;
      *((_DWORD *)v13 + 2) = v11;
      *((_DWORD *)v13 + 3) = v12;
    }
  }
  return result;
}

void sub_236826058(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v16 = v5 + 40 * a2;
      if (v4 != v16)
      {
        v17 = a1[1];
        do
        {
          v19 = *(void **)(v17 - 40);
          v17 -= 40;
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v4 - 32) = v18;
            operator delete(v18);
          }
          v4 = v17;
        }
        while (v17 != v16);
      }
      a1[1] = v16;
    }
  }
  else
  {
    v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      v20 = v4 + 40 * v7;
      v21 = 40 * a2 - 8 * ((v4 - *a1) >> 3);
      do
      {
        *(_DWORD *)(v4 + 32) = 0;
        *(_OWORD *)v4 = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        v4 += 40;
        v21 -= 40;
      }
      while (v21);
      a1[1] = v20;
    }
    else
    {
      if (a2 > 0x666666666666666)
        sub_2367C3440();
      v22[4] = a1 + 2;
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x333333333333333)
        v11 = 0x666666666666666;
      else
        v11 = v10;
      v12 = (char *)sub_2367DC0A4(v11);
      v13 = &v12[40 * v6];
      v22[0] = v12;
      v22[1] = v13;
      v22[3] = &v12[40 * v14];
      v15 = 40 * a2 - 40 * v6;
      do
      {
        *((_DWORD *)v13 + 8) = 0;
        *(_OWORD *)v13 = 0uLL;
        *((_OWORD *)v13 + 1) = 0uLL;
        v13 += 40;
        v15 -= 40;
      }
      while (v15);
      v22[2] = &v12[40 * a2];
      sub_23681E91C(a1, v22);
      sub_23681E99C((uint64_t)v22);
    }
  }
}

uint64_t **sub_2368261D4(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_2368262D4(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_23682629C(_QWORD *a1)
{
  if (a1)
  {
    sub_23682629C(*a1);
    sub_23682629C(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_2368262D4(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_23682646C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 40);
        v4 -= 40;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 32) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t *sub_2368264D0(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void (*)(uint64_t, _QWORD))a1[1];
    if (v3)
      v3(a1[2], *(_QWORD *)(v2 - 16));
    else
      free(*(void **)(v2 - 16));
  }
  return a1;
}

char *sub_236826520(char *result, char *a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  _BOOL4 v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 1) < *((_DWORD *)result + 1))
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = a4;
      v21 = a3 >> 1;
      v22 = (uint64_t)&result[8 * (a3 >> 1)];
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_23682673C((uint64_t)result, v22, v23, a4);
        v24 = &v20[v21];
        result = (char *)sub_23682673C((uint64_t)&v6[8 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v24);
        v25 = &v20[a3];
        v26 = v24;
        while (v26 != v25)
        {
          v27 = *((_DWORD *)v26 + 1);
          v28 = *((_DWORD *)v20 + 1);
          v29 = v27 >= v28;
          v30 = v27 < v28;
          v31 = v29;
          if (v29)
            v32 = v20;
          else
            v32 = v26;
          v20 += v31;
          v26 += v30;
          *(_QWORD *)v6 = *v32;
          v6 += 8;
          if (v20 == v24)
          {
            if (v26 != v25)
            {
              v33 = 0;
              do
              {
                *(_QWORD *)&v6[v33 * 8] = v26[v33];
                ++v33;
              }
              while (&v26[v33] != v25);
            }
            return result;
          }
        }
        if (v20 != v24)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34 * 8] = v20[v34];
            ++v34;
          }
          while (&v20[v34] != v24);
        }
      }
      else
      {
        sub_236826520(result, v22, v23, a4, a5);
        sub_236826520(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_236826920(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (result != a2)
    {
      v9 = result + 8;
      if (result + 8 != a2)
      {
        v10 = 0;
        v11 = result;
        do
        {
          v12 = *((_DWORD *)v11 + 3);
          v13 = *((_DWORD *)v11 + 1);
          v11 = v9;
          if (v12 < v13)
          {
            v14 = *(_QWORD *)v9;
            v15 = HIDWORD(*(_QWORD *)v11);
            v16 = v10;
            while (1)
            {
              *(_QWORD *)&result[v16 + 8] = *(_QWORD *)&result[v16];
              if (!v16)
                break;
              v17 = *(_DWORD *)&result[v16 - 4];
              v16 -= 8;
              if (v17 <= v15)
              {
                v18 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            v18 = result;
LABEL_15:
            *(_QWORD *)v18 = v14;
          }
          v9 = v11 + 8;
          v10 += 8;
        }
        while (v11 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_23682673C(uint64_t result, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_10:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(_DWORD *)(a2 - 4);
      v9 = *(_DWORD *)(result + 4);
      v10 = v8 >= v9;
      if (v8 >= v9)
        v11 = (_QWORD *)result;
      else
        v11 = (_QWORD *)(a2 - 8);
      *a4 = *v11;
      v4 = a4 + 1;
      if (v10)
        v6 = a2 - 8;
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      v19 = result + 8 * (a3 >> 1);
      sub_236826520(result, v19, a3 >> 1, a4, a3 >> 1);
      result = sub_236826520(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v20 = v6 + 8 * (a3 >> 1);
      while (v20 != a2)
      {
        v21 = *(_DWORD *)(v20 + 4) >= *(_DWORD *)(v6 + 4);
        if (*(_DWORD *)(v20 + 4) >= *(_DWORD *)(v6 + 4))
          v22 = (_QWORD *)v6;
        else
          v22 = (_QWORD *)v20;
        v20 += 8 * (*(_DWORD *)(v20 + 4) < *(_DWORD *)(v6 + 4));
        v6 += 8 * v21;
        *v4++ = *v22;
        if (v6 == v19)
        {
          if (v20 != a2)
          {
            v23 = 0;
            do
            {
              v4[v23] = *(_QWORD *)(v20 + v23 * 8);
              ++v23;
            }
            while (v20 + v23 * 8 != a2);
          }
          return result;
        }
      }
      if (v6 != v19)
      {
        v24 = 0;
        do
        {
          v4[v24] = *(_QWORD *)(v6 + v24 * 8);
          ++v24;
        }
        while (v6 + v24 * 8 != v19);
      }
    }
    else if (result != a2)
    {
      v12 = result + 8;
      *a4 = *(_QWORD *)result;
      if (result + 8 != a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v6;
          v16 = v14;
          v6 = v12;
          v17 = ++v14;
          if (*(_DWORD *)(v15 + 12) < *((_DWORD *)v16 + 1))
          {
            v16[1] = *v16;
            v17 = a4;
            if (v16 != a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = (_QWORD *)((char *)a4 + v18);
                if (*(_DWORD *)(v15 + 12) >= *(_DWORD *)((char *)a4 + v18 - 4))
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
          }
          v12 = v6 + 8;
          *v17 = *(_QWORD *)v6;
          v13 += 8;
        }
        while (v6 + 8 != a2);
      }
    }
  }
  return result;
}

char *sub_236826920(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  char *v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  _BOOL4 v70;
  unsigned int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      while (*((_DWORD *)a2 + 1) >= *((_DWORD *)v11 + 1))
      {
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          v73 = *(_QWORD *)v11;
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v73;
          return result;
        }
        if (a4 >= 0)
          v22 = a4;
        else
          v22 = a4 + 1;
        v21 = v22 >> 1;
        v15 = &v11[8 * (v22 >> 1)];
        v14 = a3;
        if (a3 != a2)
        {
          v23 = (a3 - a2) >> 3;
          v14 = a2;
          do
          {
            v24 = v23 >> 1;
            v25 = &v14[8 * (v23 >> 1)];
            v26 = *((_DWORD *)v25 + 1);
            v27 = v25 + 8;
            v23 += ~(v23 >> 1);
            if (v26 < *((_DWORD *)v15 + 1))
              v14 = v27;
            else
              v23 = v24;
          }
          while (v23);
        }
        v13 = (v14 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v12 = v8;
        else
          v12 = v8 + 1;
        v13 = v12 >> 1;
        v14 = &a2[8 * (v12 >> 1)];
        v15 = a2;
        if (a2 != v11)
        {
          v16 = (a2 - v11) >> 3;
          v15 = v11;
          do
          {
            v17 = v16 >> 1;
            v18 = &v15[8 * (v16 >> 1)];
            v19 = *((_DWORD *)v18 + 1);
            v20 = v18 + 8;
            v16 += ~(v16 >> 1);
            if (*((_DWORD *)v14 + 1) < v19)
              v16 = v17;
            else
              v15 = v20;
          }
          while (v16);
        }
        v21 = (v15 - v11) >> 3;
      }
      v28 = v14;
      if (v15 != a2)
      {
        v28 = v15;
        if (a2 != v14)
        {
          if (v15 + 8 == a2)
          {
            v75 = *(_QWORD *)v15;
            v77 = v21;
            v35 = v14 - a2;
            v79 = a6;
            v36 = a3;
            v37 = v13;
            memmove(v15, a2, v14 - a2);
            v13 = v37;
            v21 = v77;
            a6 = v79;
            a3 = v36;
            v28 = &v15[v35];
            *(_QWORD *)v28 = v75;
          }
          else if (a2 + 8 == v14)
          {
            v38 = *((_QWORD *)v14 - 1);
            v28 = v15 + 8;
            if (v14 - 8 != v15)
            {
              v78 = v21;
              v80 = a6;
              v39 = a3;
              v40 = v13;
              v76 = *((_QWORD *)v14 - 1);
              memmove(v15 + 8, v15, v14 - 8 - v15);
              v13 = v40;
              v38 = v76;
              v21 = v78;
              a3 = v39;
              a6 = v80;
            }
            *(_QWORD *)v15 = v38;
          }
          else
          {
            v29 = (a2 - v15) >> 3;
            if (v29 == (v14 - a2) >> 3)
            {
              v30 = 0;
              do
              {
                v31 = *(_QWORD *)&v15[v30];
                *(_QWORD *)&v15[v30] = *(_QWORD *)&a2[v30];
                v32 = (uint64_t)&v15[v30 + 8];
                *(_QWORD *)&a2[v30] = v31;
                v33 = (uint64_t)&a2[v30 + 8];
                v30 += 8;
              }
              while ((char *)v32 != a2 && v33 != (_QWORD)v14);
              v28 = a2;
            }
            else
            {
              v41 = (v14 - a2) >> 3;
              v42 = (a2 - v15) >> 3;
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v15[8 * v42];
                do
                {
                  v46 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  v45 = v46;
                  v47 = &v44[8 * v29];
                  v48 = v44;
                  do
                  {
                    v49 = v48;
                    v48 = v47;
                    *(_QWORD *)v49 = *(_QWORD *)v47;
                    v50 = __OFSUB__(v29, (v14 - v47) >> 3);
                    v52 = v29 - ((v14 - v47) >> 3);
                    v51 = (v52 < 0) ^ v50;
                    v47 = &v15[8 * v52];
                    if (v51)
                      v47 = &v48[8 * v29];
                  }
                  while (v47 != v44);
                  *(_QWORD *)v48 = v45;
                }
                while (v44 != v15);
              }
              v28 = &v15[8 * ((v14 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v21;
      v8 -= v13;
      if (v21 + v13 >= a4 + v8)
      {
        v56 = a4;
        v57 = v13;
        v54 = a6;
        result = (char *)sub_236826920(v28, v14, a3, v56, v8, a6, a7);
        v14 = v15;
        v8 = v57;
        a4 = v21;
        a3 = v28;
      }
      else
      {
        v53 = v11;
        v54 = a6;
        v55 = a3;
        result = (char *)sub_236826920(v53, v15, v28, v21, v13, a6, a7);
        a3 = v55;
        v11 = v28;
      }
      a2 = v14;
      a6 = v54;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v65 = 0;
        do
        {
          *(_QWORD *)&a6[v65] = *(_QWORD *)&v11[v65];
          v65 += 8;
        }
        while (&v11[v65] != a2);
        v66 = &a6[v65];
        if (v66 != a6)
        {
          while (a2 != a3)
          {
            v67 = *((_DWORD *)a2 + 1);
            v68 = *((_DWORD *)a6 + 1);
            v69 = v67 >= v68;
            v70 = v67 < v68;
            v71 = v69;
            if (v69)
              v72 = a6;
            else
              v72 = a2;
            a6 += 8 * v71;
            a2 += 8 * v70;
            *(_QWORD *)v11 = *(_QWORD *)v72;
            v11 += 8;
            if (a6 == v66)
              return result;
          }
          return (char *)memmove(v11, a6, v66 - a6);
        }
      }
    }
    else if (a2 != a3)
    {
      v58 = 0;
      do
      {
        *(_QWORD *)&a6[v58] = *(_QWORD *)&a2[v58];
        v58 += 8;
      }
      while (&a2[v58] != a3);
      v59 = &a6[v58];
      if (v59 != a6)
      {
        v60 = a3 - 8;
        while (a2 != v11)
        {
          v61 = *((_DWORD *)v59 - 1);
          v62 = *((_DWORD *)a2 - 1);
          v63 = v61 >= v62;
          if (v61 >= v62)
            v64 = v59;
          else
            v64 = a2;
          if (v63)
            v59 -= 8;
          else
            a2 -= 8;
          *(_QWORD *)v60 = *((_QWORD *)v64 - 1);
          v60 -= 8;
          if (v59 == a6)
            return result;
        }
        v74 = 0;
        do
        {
          *(_QWORD *)&v60[v74] = *(_QWORD *)&v59[v74 - 8];
          v74 -= 8;
        }
        while (&v59[v74] != a6);
      }
    }
  }
  return result;
}

void sub_236826DB4(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void **v12[4];
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  _QWORD v18[3];
  unint64_t v19[3];
  void **v20[4];

  sub_236826F90(v20);
  sub_236826FF8(a1, 0, a2, v20[0]);
  memset(v19, 0, sizeof(v19));
  memset(v12, 0, 24);
  __p = 0;
  v14 = 0;
  v15 = 0;
  v16 = &off_2507FF438;
  v17 = xmmword_2368AF590;
  *(_QWORD *)v8 = &off_2507FF550;
  *(_OWORD *)&v8[8] = xmmword_2368AF3F0;
  v9 = 0;
  sub_2367CB9F8((uint64_t)&v16, (uint64_t)v8);
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)v8 = xmmword_2368AF850;
  v9 = 0;
  v10 = 0;
  *(_QWORD *)&v8[16] = 0;
  v11 = xmmword_2368AF860;
  BYTE9(v11) = 1;
  BYTE11(v11) = 0;
  sub_236819104((uint64_t)v8, 8uLL, (uint64_t)v20, (uint64_t *)v12, v19, a3, 0, a4);
  sub_23681FA78((uint64_t)v20[0], (uint64_t)v12, v19, 0, a3, 0, a4);
  *(_QWORD *)v8 = v18;
  sub_2367D077C((void ***)v8);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  *(_QWORD *)v8 = v12;
  sub_236817010((void ***)v8);
  if (v19[0])
    operator delete((void *)v19[0]);
  v12[0] = (void **)v20;
  sub_2367D17E4(v12);
}

void sub_236826F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  sub_236827364((uint64_t)&a16);
  v23 = *(void **)(v21 - 104);
  if (v23)
    operator delete(v23);
  a16 = v21 - 80;
  sub_2367D17E4((void ***)&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_236826F90(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x18uLL);
  a1[1] = v2 + 3;
  a1[2] = v2 + 3;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *a1 = v2;
  return a1;
}

void sub_236826FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367D17E4(&a9);
  _Unwind_Resume(a1);
}

void sub_236826FF8(uint64_t a1, unint64_t a2, unint64_t a3, void **a4)
{
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  _DWORD *v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *__p[3];
  void *v59[3];

  sub_2367C3BE4(v59, a3);
  v8 = a3 + 1;
  sub_2367C3BE4(__p, a3 + 1);
  v9 = __p[0];
  v10 = v59[0];
  if (a3 == -1 || (bzero(__p[0], 4 * a3 + 4), a3))
  {
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)(a1 + 4 * v11);
      v13 = 0;
      v14 = (v12 + 1);
      if (v12 != -1)
      {
        v15 = v12 + 1;
        do
        {
          v13 += v9[v15];
          v15 &= v15 - 1;
        }
        while (v15);
      }
      v10[v11] = v12 - v13;
      if (v8 > v14)
      {
        do
        {
          ++v9[v14];
          v14 = (v14 & -(int)v14) + v14;
        }
        while (v8 > v14);
      }
      ++v11;
    }
    while (v11 != a3);
  }
  if (a3 >= a2)
    v16 = a2;
  else
    v16 = a3;
  v17 = a3;
  while (v17 > a2)
  {
    v18 = v17 - 1;
    if (*((_DWORD *)v59[0] + --v17))
    {
      v16 = v18 + 1;
      break;
    }
  }
  v20 = __clz(a3);
  v21 = (((-1 << (v20 ^ 0x1F)) + a3) >> (v20 ^ 0x1F)) - v20 + 32;
  if (!(_DWORD)a3)
    v21 = 0;
  if (v21 >= 7)
    v22 = 7;
  else
    v22 = v21;
  v23 = v16 - a2;
  v24 = a4[1];
  v25 = (unint64_t)a4[2];
  if ((unint64_t)v24 >= v25)
  {
    v27 = ((char *)v24 - (_BYTE *)*a4) >> 3;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61)
      sub_2367C3440();
    v29 = v25 - (_QWORD)*a4;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v31 = (char *)sub_2367CA1FC(v30);
    v32 = &v31[8 * v27];
    v34 = &v31[8 * v33];
    *(_DWORD *)v32 = 2 * v22;
    *((_DWORD *)v32 + 1) = v23;
    v26 = v32 + 8;
    v36 = (char *)*a4;
    v35 = (char *)a4[1];
    if (v35 != *a4)
    {
      do
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v32 - 1) = v37;
        v32 -= 8;
      }
      while (v35 != v36);
      v35 = (char *)*a4;
    }
    *a4 = v32;
    a4[1] = v26;
    a4[2] = v34;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v24 = 2 * v22;
    v24[1] = v23;
    v26 = v24 + 2;
  }
  a4[1] = v26;
  if (v16 > a2)
  {
    v38 = 0;
    do
    {
      v39 = __clz(v38);
      v40 = (((-1 << (v39 ^ 0x1F)) + v38) >> (v39 ^ 0x1F)) - v39 + 32;
      if (v38)
        v41 = v40;
      else
        v41 = 0;
      if (v41 >= 7)
        v42 = 7;
      else
        v42 = v41;
      v43 = v59[0];
      v44 = (unint64_t)a4[2];
      if ((unint64_t)v26 >= v44)
      {
        v46 = ((char *)v26 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v46 + 1) >> 61)
          sub_2367C3440();
        v47 = v44 - (_QWORD)*a4;
        v48 = v47 >> 2;
        if (v47 >> 2 <= (unint64_t)(v46 + 1))
          v48 = v46 + 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        v50 = (char *)sub_2367CA1FC(v49);
        v52 = &v50[8 * v46];
        v53 = v43[a2];
        *(_DWORD *)v52 = 2 * v42;
        *((_DWORD *)v52 + 1) = v53;
        v55 = (char *)*a4;
        v54 = (char *)a4[1];
        v56 = v52;
        if (v54 != *a4)
        {
          do
          {
            v57 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v56 - 1) = v57;
            v56 -= 8;
          }
          while (v54 != v55);
          v54 = (char *)*a4;
        }
        v26 = v52 + 8;
        *a4 = v56;
        a4[1] = v52 + 8;
        a4[2] = &v50[8 * v51];
        if (v54)
          operator delete(v54);
      }
      else
      {
        v45 = *((_DWORD *)v59[0] + a2);
        *v26 = 2 * v42;
        v26[1] = v45;
        v26 += 2;
      }
      a4[1] = v26;
      v38 = *((_DWORD *)v59[0] + a2++);
    }
    while (a2 != v16);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
}

void sub_236827328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_236827364(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 104);
  sub_2367D077C(&v4);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  sub_236817010(&v4);
  return a1;
}

void sub_2368273B8(int a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  int *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  unint64_t *v55;
  uint64_t v56;
  int v58;
  _BYTE v59[24];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  void **v63[4];
  void *__p;
  void *v65;
  uint64_t v66;
  uint64_t (**v67)();
  __int128 v68;
  _QWORD v69[3];
  unint64_t v70[3];
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74[3];
  uint64_t v75[5];

  do
    v7 = __ldxr(&qword_25642E998);
  while (__stxr(v7 + 1, &qword_25642E998));
  v8 = (unint64_t)malloc_type_malloc(0x40100uLL, 0xFBCB090DuLL);
  if (v8)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFF80;
    v10 = (v8 & 0xFFFFFFFFFFFFFF80) + 256;
    *(_QWORD *)(v9 + 240) = v8;
    *(_QWORD *)(v9 + 248) = 0x40000;
  }
  else
  {
    v10 = 0;
  }
  v55 = a3;
  v56 = a4;
  v75[1] = 0;
  v75[2] = 0;
  v75[0] = v10;
  sub_236826F90(v74);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  do
  {
    v14 = byte_236923064[v12];
    if (((1 << v14) & v13) == 0)
    {
      v13 |= (unsigned __int16)(1 << v14);
      if (((1 << v14) & a1) != 0)
      {
        v15 = (byte_23692665C[v12] * (unint64_t)byte_236926677[v12]) << 6;
        if (v15 > (v72 - v11) >> 2)
        {
          sub_2367C5284(&v71, v15);
          v11 = v71;
        }
        v16 = byte_23692665C[v12];
        v17 = byte_236926677[v12];
        if (v17 >= v16)
          v18 = byte_23692665C[v12];
        else
          v18 = byte_236926677[v12];
        if (v17 <= v16)
          v19 = byte_23692665C[v12];
        else
          v19 = byte_236926677[v12];
        v20 = v19 / v18;
        v21 = v20 - 1;
        v22 = __clz(v20) ^ 0x3F;
        if ((v20 & (v20 - 1)) != 0)
          v23 = v22 + 1;
        else
          v23 = v22;
        v24 = byte_236926677[v12]
            * (unint64_t)byte_23692665C[v12];
        v25 = 8 * v19;
        v26 = v24;
        if (v19)
        {
          v27 = 0;
          if (v25 <= 1)
            v28 = 1;
          else
            v28 = 8 * v19;
          v29 = 1;
          v26 = byte_236926677[v12]
              * (unint64_t)byte_23692665C[v12];
          do
          {
            v30 = 0;
            v31 = v27;
            do
            {
              if ((v27 & 1) != 0)
                v32 = v30;
              else
                v32 = v31;
              if ((v32 & v21) == 0)
              {
                if ((v27 & 1) != 0)
                  v33 = v31;
                else
                  v33 = v30;
                v34 = v32 >> v23;
                v35 = v33 >= v19 || v34 >= v18;
                v36 = v35;
                v37 = v34 * v19;
                if (v35)
                  v38 = v26 + 1;
                else
                  v38 = v26;
                if (!v36)
                  LODWORD(v26) = v37 + v33;
                *(_DWORD *)&v11[32 * v37 + 4 * v33] = v26;
                v26 = v38;
              }
              ++v30;
              --v31;
            }
            while (v29 != v30);
            ++v27;
            ++v29;
          }
          while (v27 != v28);
        }
        v58 = v13;
        v39 = 0;
        v40 = 1;
        v41 = v25 - 1;
        LOBYTE(v42) = 8 * v19;
        do
        {
          v43 = v42;
          v42 = v41;
          v44 = v40;
          v45 = v25 - 1;
          do
          {
            if ((v43 & 1) != 0)
              v46 = v44;
            else
              v46 = v45;
            if ((v46 & v21) == 0)
            {
              if ((v43 & 1) != 0)
                v47 = v45;
              else
                v47 = v44;
              *(_DWORD *)&v11[4 * v47 + 4 * (v46 >> v23) * v25] = v26++;
            }
            --v45;
            ++v44;
          }
          while (v39 + v45);
          --v39;
          ++v40;
          v41 = v42 - 1;
        }
        while (v42 != 1);
        v48 = 0;
        v11 = v71;
        if (v24 << 6 <= 1)
          v49 = 1;
        else
          v49 = v24 << 6;
        do
        {
          v50 = (void **)v74[0];
          if (v24)
          {
            v51 = (int *)(a2 + (qword_236922110[3 * v14 + v48] << 8));
            v52 = (_DWORD *)v10;
            v53 = v49;
            do
            {
              v54 = *v51++;
              *v52++ = *(_DWORD *)&v11[4 * v54];
              --v53;
            }
            while (v53);
          }
          sub_236826FF8(v10, v24, v24 << 6, v50);
          ++v48;
        }
        while (v48 != 3);
        v13 = v58;
      }
    }
    ++v12;
  }
  while (v12 != 27);
  if (a1)
  {
    memset(v70, 0, sizeof(v70));
    memset(v63, 0, 24);
    __p = 0;
    v65 = 0;
    v66 = 0;
    v67 = &off_2507FF438;
    v68 = xmmword_2368AF590;
    *(_QWORD *)v59 = &off_2507FF550;
    *(_OWORD *)&v59[8] = xmmword_2368AF3F0;
    v60 = 0;
    sub_2367CB9F8((uint64_t)&v67, (uint64_t)v59);
    memset(v69, 0, sizeof(v69));
    *(_OWORD *)v59 = xmmword_2368AF850;
    v60 = 0;
    v61 = 0;
    *(_QWORD *)&v59[16] = 0;
    v62 = xmmword_2368AF860;
    BYTE9(v62) = 1;
    BYTE11(v62) = 0;
    sub_236819104((uint64_t)v59, 8uLL, (uint64_t)v74, (uint64_t *)v63, v70, v55, 11, v56);
    sub_23681FA78(v74[0], (uint64_t)v63, v70, 0, v55, 11, v56);
    *(_QWORD *)v59 = v69;
    sub_2367D077C((void ***)v59);
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
    *(_QWORD *)v59 = v63;
    sub_236817010((void ***)v59);
    if (v70[0])
      operator delete((void *)v70[0]);
  }
  if (v11)
  {
    v72 = v11;
    operator delete(v11);
  }
  v63[0] = (void **)v74;
  sub_2367D17E4(v63);
  sub_236813D44(v75);
}

void sub_2368277EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  void *v29;

  sub_236827364((uint64_t)&a21);
  v29 = *(void **)(v27 - 192);
  if (v29)
    operator delete(v29);
  if (v26)
  {
    *(_QWORD *)(v27 - 160) = v26;
    operator delete(v26);
  }
  a21 = v27 - 144;
  sub_2367D17E4((void ***)&a21);
  sub_236813D44((uint64_t *)(v27 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_23682787C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = &off_2507FFD98;
  v4 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_236827C68((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = *(_BYTE **)(a2 + 48);
  v5 = *(_BYTE **)(a2 + 56);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_2367C3404((_QWORD *)(a1 + 48), v7 >> 2);
    v8 = *(char **)(a1 + 56);
    memmove(v8, v6, v7);
    *(_QWORD *)(a1 + 56) = &v8[4 * (v7 >> 2)];
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_236827C68((_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v10 = *(_BYTE **)(a2 + 96);
  v9 = *(_BYTE **)(a2 + 104);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    sub_2368282F8((_QWORD *)(a1 + 96), 0xF0B7672A07A44C6BLL * (v11 >> 2));
    v12 = *(char **)(a1 + 104);
    memmove(v12, v10, v11 - 3);
    *(_QWORD *)(a1 + 104) = &v12[4 * (v11 >> 2)];
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = *(_BYTE **)(a2 + 120);
  v13 = *(_BYTE **)(a2 + 128);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    sub_236828260((_QWORD *)(a1 + 120), 0xF128CFC4A33F128DLL * (v15 >> 4));
    v16 = *(char **)(a1 + 128);
    memmove(v16, v14, v15 - 3);
    *(_QWORD *)(a1 + 128) = &v16[16 * (v15 >> 4)];
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v17 = *(__int128 **)(a2 + 144);
  v18 = *(__int128 **)(a2 + 152);
  if (v18 != v17)
  {
    sub_236828034((_QWORD *)(a1 + 144), 0xAAAAAAAAAAAAAAABLL * (v18 - v17));
    *(_QWORD *)(a1 + 152) = sub_236828080(a1 + 160, v17, v18, *(_QWORD *)(a1 + 152));
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v19 = *(_QWORD *)(a2 + 168);
  v20 = *(_QWORD *)(a2 + 176);
  if (v20 != v19)
  {
    sub_236827E2C((_QWORD *)(a1 + 168), 0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 3));
    *(_QWORD *)(a1 + 176) = sub_236827E78(a1 + 184, v19, v20, *(_QWORD *)(a1 + 176));
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 192), *(const void **)(a2 + 192), *(_QWORD *)(a2 + 200), *(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192));
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_236827C68((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 3));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 240), *(const void **)(a2 + 240), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240));
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 272), *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272));
  return a1;
}

void sub_236827B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11)
{
  _QWORD *v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;

  v11[22] = v15;
  sub_236827CEC(&a11);
  a11 = v14;
  sub_236827D5C(&a11);
  v17 = *v13;
  if (*v13)
  {
    v11[16] = v17;
    operator delete(v17);
  }
  v18 = *v12;
  if (*v12)
  {
    v11[13] = v18;
    operator delete(v18);
  }
  sub_2367D17E4(&a11);
  v19 = *a9;
  if (*a9)
  {
    v11[7] = v19;
    operator delete(v19);
  }
  a11 = a10;
  sub_2367D17E4(&a11);
  _Unwind_Resume(a1);
}

void sub_236827C60()
{
  JUMPOUT(0x236827C34);
}

_QWORD *sub_236827C68(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_2367E25B8(result, a4);
    result = sub_236828390((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_236827CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_2367D17E4(&a9);
  _Unwind_Resume(a1);
}

void sub_236827CEC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        sub_236827DE8(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236827D5C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_236827D9C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_236827D9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_236827DE8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
}

char *sub_236827E2C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    sub_2367C3440();
  result = (char *)sub_236827FF0(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

uint64_t sub_236827E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
      v10 = *(_OWORD *)(a2 + v7 + 16);
      v11 = *(_OWORD *)(a2 + v7 + 32);
      v12 = *(_OWORD *)(a2 + v7 + 48);
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + v7 + 64);
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(a4 + v7 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      sub_2368220C4((_QWORD *)(a4 + v7 + 72), *(const void **)(a2 + v7 + 72), *(_QWORD *)(a2 + v7 + 80), (uint64_t)(*(_QWORD *)(a2 + v7 + 80) - *(_QWORD *)(a2 + v7 + 72)) >> 2);
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 112) = 0;
      sub_236827F78((_QWORD *)(a4 + v7 + 96), *(const void **)(v9 + 96), *(_QWORD *)(v9 + 104), (uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3);
      v7 += 120;
    }
    while (v9 + 120 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_236827F3C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    v2[10] = v5;
    operator delete(v5);
  }
  while (v2 != v1)
  {
    v2 -= 15;
    sub_236827DE8(v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_236827F78(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367DBF48(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_236827FD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_236827FF0(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    sub_2367C3488();
  return operator new(120 * a1);
}

char *sub_236828034(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_2367C3440();
  result = (char *)sub_23682821C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t sub_236828080(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v15 = a4;
  v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_QWORD *)(v4 + 24) = 0;
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      v9 = (_BYTE *)*((_QWORD *)v6 + 3);
      v8 = (_BYTE *)*((_QWORD *)v6 + 4);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        sub_2368281E4((_QWORD *)(v4 + 24), v10 >> 1);
        v11 = *(char **)(v4 + 32);
        memmove(v11, v9, v10);
        *(_QWORD *)(v4 + 32) = &v11[2 * (v10 >> 1)];
        v4 = v16;
      }
      v4 += 48;
      v16 = v4;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v14 = 1;
  sub_236828188((uint64_t)v13);
  return v4;
}

void sub_236828164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 32) = v12;
    operator delete(v12);
  }
  sub_236828188((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_236828188(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

char *sub_2368281E4(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_2367C3440();
  result = (char *)sub_2367CA09C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_23682821C(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    sub_2367C3488();
  return operator new(48 * a1);
}

char *sub_236828260(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x3B5CC0ED7303B6)
    sub_2367C3440();
  result = (char *)sub_2368282B0(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[1104 * v4];
  return result;
}

void *sub_2368282B0(unint64_t a1)
{
  if (a1 >= 0x3B5CC0ED7303B6)
    sub_2367C3488();
  return operator new(1104 * a1);
}

char *sub_2368282F8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF4898D5F85BB3ALL)
    sub_2367C3440();
  result = (char *)sub_236828348(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[268 * v4];
  return result;
}

void *sub_236828348(unint64_t a1)
{
  if (a1 >= 0xF4898D5F85BB3ALL)
    sub_2367C3488();
  return operator new(268 * a1);
}

_QWORD *sub_236828390(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_2367C9F60(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_23682843C((uint64_t)v8);
  return v4;
}

void sub_236828428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23682843C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23682843C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void sub_2368284A4(uint64_t a1)
{
  sub_2368284CC(a1);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2368284CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v9;

  *(_QWORD *)a1 = &off_2507FFD98;
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(_QWORD *)(a1 + 248) = v3;
    operator delete(v3);
  }
  v9 = (void **)(a1 + 216);
  sub_2367D17E4(&v9);
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(_QWORD *)(a1 + 200) = v4;
    operator delete(v4);
  }
  v9 = (void **)(a1 + 168);
  sub_236827CEC(&v9);
  v9 = (void **)(a1 + 144);
  sub_236827D5C(&v9);
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 72);
  sub_2367D17E4(&v9);
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
  }
  v9 = (void **)(a1 + 24);
  sub_2367D17E4(&v9);
  return a1;
}

void sub_2368285B0(unsigned __int8 **a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  unsigned int v18;
  BOOL v19;
  size_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  char v27;
  _BYTE *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *i;
  void **v50;
  _DWORD *v51;
  unint64_t v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  int v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unint64_t v70;
  unsigned int **v71;
  unsigned __int8 *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *p_p;
  __int128 v104;
  uint64_t v105;
  void *__p;
  _BYTE *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  _QWORD v112[2];
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123;
  _QWORD v124[3];
  unsigned int **v125[3];
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  void **v129;
  __int128 v130;
  uint64_t v131;

  v6 = a2 - 1;
  if (a2 == 1)
  {
    *(_QWORD *)(a3[3] + (*a3 >> 3)) = (1 << (*a3 & 7)) | *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
    v7 = *a3 + 1;
    *a3 = v7;
    *(_QWORD *)(a3[3] + (v7 >> 3)) = *(unsigned __int8 *)(a3[3] + (v7 >> 3));
    *a3 += 2;
  }
  else
  {
    v12 = *a1;
    v13 = a1[1];
    if (*a1 == v13)
    {
      v126 = 0;
      v127 = 0;
      v128 = 0;
    }
    else
    {
      v14 = v12 + 1;
      if (v12 + 1 != v13)
      {
        v15 = *v12;
        v16 = v12 + 1;
        do
        {
          v18 = *v16++;
          v17 = v18;
          v19 = v15 >= v18;
          if (v15 <= v18)
            v15 = v17;
          if (!v19)
            v12 = v14;
          v14 = v16;
        }
        while (v16 != v13);
      }
      v20 = *v12 + 1;
      sub_236818388(&__p, v20);
      v21 = 0;
      do
      {
        *((_BYTE *)__p + v21) = v21;
        ++v21;
      }
      while (v20 != v21);
      sub_236818388(&v126, a1[1] - *a1);
      v22 = *a1;
      if (a1[1] != *a1)
      {
        v23 = 0;
        do
        {
          v24 = v107 - (_BYTE *)__p;
          if (v107 == __p)
          {
            v126[v23] = 0;
            v28 = __p;
            v27 = *(_BYTE *)__p;
          }
          else
          {
            v25 = 0;
            v26 = v22[v23];
            if (v24 <= 1)
              v24 = 1;
            while (*((unsigned __int8 *)__p + v25) != v26)
            {
              if (v24 == ++v25)
              {
                v126[v23] = v24;
                v27 = *((_BYTE *)__p + v24);
                goto LABEL_24;
              }
            }
            v126[v23] = v25;
            v28 = __p;
            v27 = *((_BYTE *)__p + v25);
            if (!v25)
              goto LABEL_26;
            v24 = v25;
            do
            {
LABEL_24:
              *((_BYTE *)__p + v24) = *((char *)__p + v24 - 1);
              --v24;
            }
            while (v24);
            v28 = __p;
          }
LABEL_26:
          *v28 = v27;
          ++v23;
          v22 = *a1;
        }
        while (v23 < a1[1] - *a1);
      }
      if (__p)
      {
        v107 = __p;
        operator delete(__p);
      }
    }
    sub_236826F90(v125);
    v101 = v6;
    v102 = a2;
    sub_236826F90(v124);
    v29 = *a1;
    v30 = a1[1];
    if (*a1 != v30)
    {
      do
      {
        v31 = v125[0];
        v32 = v125[0][1];
        v33 = v125[0][2];
        if (v32 >= v33)
        {
          v36 = ((char *)v32 - (char *)*v125[0]) >> 3;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61)
            sub_2367C3440();
          v38 = (char *)v33 - (char *)*v125[0];
          if (v38 >> 2 > v37)
            v37 = v38 >> 2;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          v40 = (char *)sub_2367CA1FC(v39);
          v42 = (unsigned int *)&v40[8 * v36];
          v43 = *v29;
          *v42 = 0;
          v42[1] = v43;
          v45 = *v31;
          v44 = v31[1];
          v46 = v42;
          if (v44 != *v31)
          {
            do
            {
              v47 = *((_QWORD *)v44 - 1);
              v44 -= 2;
              *((_QWORD *)v46 - 1) = v47;
              v46 -= 2;
            }
            while (v44 != v45);
            v44 = *v31;
          }
          v35 = v42 + 2;
          *v31 = v46;
          v31[1] = v42 + 2;
          v31[2] = (unsigned int *)&v40[8 * v41];
          if (v44)
            operator delete(v44);
        }
        else
        {
          v34 = *v29;
          *v32 = 0;
          v32[1] = v34;
          v35 = v32 + 2;
        }
        v31[1] = v35;
        ++v29;
      }
      while (v29 != v30);
    }
    v48 = v126;
    for (i = v127; v48 != i; ++v48)
    {
      v50 = (void **)v124[0];
      v51 = *(_DWORD **)(v124[0] + 8);
      v52 = *(_QWORD *)(v124[0] + 16);
      if ((unint64_t)v51 >= v52)
      {
        v55 = ((uint64_t)v51 - *(_QWORD *)v124[0]) >> 3;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
          sub_2367C3440();
        v57 = v52 - *(_QWORD *)v124[0];
        if (v57 >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        v59 = (char *)sub_2367CA1FC(v58);
        v61 = &v59[8 * v55];
        v62 = *v48;
        *(_DWORD *)v61 = 0;
        *((_DWORD *)v61 + 1) = v62;
        v64 = (char *)*v50;
        v63 = (char *)v50[1];
        v65 = v61;
        if (v63 != *v50)
        {
          do
          {
            v66 = *((_QWORD *)v63 - 1);
            v63 -= 8;
            *((_QWORD *)v65 - 1) = v66;
            v65 -= 8;
          }
          while (v63 != v64);
          v63 = (char *)*v50;
        }
        v54 = v61 + 8;
        *v50 = v65;
        v50[1] = v61 + 8;
        v50[2] = &v59[8 * v60];
        if (v63)
          operator delete(v63);
      }
      else
      {
        v53 = *v48;
        *v51 = 0;
        v51[1] = v53;
        v54 = v51 + 2;
      }
      v50[1] = v54;
    }
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = -1;
    v122 = 256;
    v123 = 0;
    v117 = xmmword_2368AF870;
    __p = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112[0] = &off_2507FF438;
    v113 = xmmword_2368AF590;
    p_p = &off_2507FF550;
    v104 = xmmword_2368AF3F0;
    v105 = 0;
    sub_2367CB9F8((uint64_t)v112, (uint64_t)&p_p);
    v115 = 0;
    v116 = 0;
    v114 = 0;
    p_p = 0;
    v104 = 0uLL;
    v67 = sub_236819104(&v117, 1, v125, &__p, &p_p, 0, 0, 0);
    if (p_p)
      operator delete(p_p);
    p_p = &v114;
    sub_2367D077C((void ***)&p_p);
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    p_p = &__p;
    sub_236817010((void ***)&p_p);
    __p = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112[0] = &off_2507FF438;
    v113 = xmmword_2368AF590;
    p_p = &off_2507FF550;
    v104 = xmmword_2368AF3F0;
    v105 = 0;
    sub_2367CB9F8((uint64_t)v112, (uint64_t)&p_p);
    v115 = 0;
    v116 = 0;
    v114 = 0;
    p_p = 0;
    v104 = 0uLL;
    v68 = sub_236819104(&v117, 1, v124, &__p, &p_p, 0, 0, 0);
    v99 = a4;
    v100 = a5;
    if (p_p)
      operator delete(p_p);
    p_p = &v114;
    sub_2367D077C((void ***)&p_p);
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    p_p = &__p;
    sub_236817010((void ***)&p_p);
    v125[0][1] = *v125[0];
    v69 = v126;
    if (v127 != v126)
    {
      v70 = 0;
      do
      {
        v71 = v125[0];
        if (v68 >= v67)
          v72 = *a1;
        else
          v72 = v69;
        v73 = v125[0][1];
        v74 = v125[0][2];
        if (v73 >= v74)
        {
          v77 = ((char *)v73 - (char *)*v125[0]) >> 3;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            sub_2367C3440();
          v79 = (char *)v74 - (char *)*v125[0];
          if (v79 >> 2 > v78)
            v78 = v79 >> 2;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          v81 = (char *)sub_2367CA1FC(v80);
          v83 = v72[v70];
          v84 = (unsigned int *)&v81[8 * v77];
          *v84 = 0;
          v84[1] = v83;
          v86 = *v71;
          v85 = v71[1];
          v87 = v84;
          if (v85 != *v71)
          {
            do
            {
              v88 = *((_QWORD *)v85 - 1);
              v85 -= 2;
              *((_QWORD *)v87 - 1) = v88;
              v87 -= 2;
            }
            while (v85 != v86);
            v85 = *v71;
          }
          v76 = v84 + 2;
          *v71 = v87;
          v71[1] = v84 + 2;
          v71[2] = (unsigned int *)&v81[8 * v82];
          if (v85)
            operator delete(v85);
        }
        else
        {
          v75 = v72[v70];
          *v73 = 0;
          v73[1] = v75;
          v76 = v73 + 2;
        }
        v71[1] = v76;
        ++v70;
        v69 = v126;
      }
      while (v70 < v127 - v126);
    }
    v89 = __clz(v102) ^ 0x3F;
    if ((v102 & v101) != 0)
      v90 = v89 + 1;
    else
      v90 = v89;
    if (v90 > 3 || ((v91 = (a1[1] - *a1) * v90, v91 < v67) ? (v92 = v91 >= v68) : (v92 = 1), v92))
    {
      sub_2367F1484((uint64_t)&p_p, a3, (8* (((unint64_t)((char *)v125[0][1] - (char *)*v125[0]) >> 2)+ ((unint64_t)((char *)v125[0][1] - (char *)*v125[0]) >> 3))) | 2);
      *(_QWORD *)(a3[3] + (*a3 >> 3)) = *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
      v98 = *a3 + 1;
      *a3 = v98;
      *(_QWORD *)(a3[3] + (v98 >> 3)) = ((unint64_t)(v68 < v67) << (v98 & 7)) | *(unsigned __int8 *)(a3[3] + (v98 >> 3));
      ++*a3;
      __p = 0;
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v112[0] = &off_2507FF438;
      v113 = xmmword_2368AF590;
      v130 = xmmword_2368AF3F0;
      v129 = (void **)&off_2507FF550;
      v131 = 0;
      sub_2367CB9F8((uint64_t)v112, (uint64_t)&v129);
      v115 = 0;
      v116 = 0;
      v114 = 0;
      v129 = 0;
      v130 = 0uLL;
      sub_236819104(&v117, 1, v125, &__p, &v129, a3, v99, v100);
      sub_23681F1F8(v125[0], (uint64_t)&__p, &v129, 0, a3);
      sub_2367F14F8((uint64_t)&p_p, a3, v99, v100);
      if (v129)
        operator delete(v129);
      v129 = (void **)&v114;
      sub_2367D077C(&v129);
      if (v109)
      {
        v110 = v109;
        operator delete(v109);
      }
      v129 = &__p;
      sub_236817010(&v129);
    }
    else
    {
      sub_2367F1484((uint64_t)&__p, a3, v91 + 3);
      *(_QWORD *)(a3[3] + (*a3 >> 3)) = (1 << (*a3 & 7)) | *(unsigned __int8 *)(a3[3] + (*a3 >> 3));
      v93 = *a3 + 1;
      *a3 = v93;
      *(_QWORD *)(a3[3] + (v93 >> 3)) = (v90 << (v93 & 7)) | *(unsigned __int8 *)(a3[3] + (v93 >> 3));
      v94 = *a3 + 2;
      *a3 = v94;
      v95 = *a1;
      v96 = a1[1];
      while (v95 != v96)
      {
        v97 = *v95++;
        *(_QWORD *)(a3[3] + (v94 >> 3)) = ((unint64_t)v97 << (v94 & 7)) | *(unsigned __int8 *)(a3[3] + (v94 >> 3));
        v94 = *a3 + v90;
        *a3 = v94;
      }
      sub_2367F14F8((uint64_t)&__p, a3, v99, v100);
    }
    __p = v124;
    sub_2367D17E4((void ***)&__p);
    __p = v125;
    sub_2367D17E4((void ***)&__p);
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
  }
}

void sub_236828E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  a23 = v28 - 208;
  sub_2367D17E4((void ***)&a23);
  a23 = v28 - 184;
  sub_2367D17E4((void ***)&a23);
  v30 = *(void **)(v28 - 160);
  if (v30)
  {
    *(_QWORD *)(v28 - 152) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void sub_236828F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v5[2];

  if ((_DWORD)a2)
  {
    v3 = a2;
    v5[0] = sub_2367CAAA0;
    v5[1] = a3;
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), float32x4_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v5, sub_2368290B0, sub_236828FE8, 0, a2);
    }
    else
    {
      for (i = 0; i != v3; ++i)
        sub_236828FE8((uint64_t)v5, i);
    }
  }
}

float32x4_t sub_236828FE8(uint64_t a1, unsigned int a2)
{
  unsigned int **v2;
  _QWORD *v3;
  unint64_t v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  unsigned int *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t result;

  v2 = *(unsigned int ***)(a1 + 8);
  v3 = *v2;
  if (**v2)
  {
    v4 = 0;
    v5 = (float32x4_t *)(v3[3] + v3[2] * a2);
    v6 = (float32x4_t *)(v3[8] + v3[7] * a2);
    v7 = (float32x4_t *)(v3[13] + v3[12] * a2);
    v8 = v2[1];
    v9 = (float32x4_t *)(*((_QWORD *)v8 + 3) + *((_QWORD *)v8 + 2) * a2);
    v10 = (float32x4_t *)(*((_QWORD *)v8 + 8) + *((_QWORD *)v8 + 7) * a2);
    v11 = (float32x4_t *)(*((_QWORD *)v8 + 13) + *((_QWORD *)v8 + 12) * a2);
    v12 = (float32x4_t *)(*((_QWORD *)v2[2] + 3) + *((_QWORD *)v2[2] + 2) * a2);
    do
    {
      v13 = *v5++;
      v14 = v13;
      v15 = *v9++;
      v16 = vsubq_f32(v14, v15);
      v17 = *v6++;
      v18 = v17;
      v19 = *v10++;
      v20 = v19;
      v21 = *v7++;
      v22 = v21;
      v23 = vsubq_f32(v18, v20);
      v24 = *v11++;
      v25 = vsubq_f32(v22, v24);
      result = vaddq_f32(vmulq_f32(vmulq_f32(v16, v16), *(float32x4_t *)v2[4]), vaddq_f32(vmulq_f32(vmulq_f32(v23, v23), *(float32x4_t *)v2[5]), vmulq_f32(vmulq_f32(v25, v25), *(float32x4_t *)v2[6])));
      *v12++ = result;
      v4 += 4;
    }
    while (v4 < **v2);
  }
  return result;
}

uint64_t sub_2368290B0(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_2368290D4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_236829104(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    sub_2367DBF48(a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[8 * (v5 >> 3)];
  }
  return a1;
}

void sub_236829174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_236829190(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 88;
    v4 = *(void **)(v2 - 56);
    if (v4)
    {
      *(_QWORD *)(v2 - 48) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void **sub_2368291F0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 7);
        if (v5)
        {
          *((_QWORD *)v3 - 6) = v5;
          operator delete(v5);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_236829258(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  float v25;
  unint64_t v26;
  float v27;
  __int128 *v28;
  float v29;
  float v30;
  _OWORD *v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  void *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  unint64_t v40;
  float v41;
  __int128 *v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  _OWORD *v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  void *v51;
  __int128 *v52;
  __int128 *v53;
  float *v54;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  float v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  float v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  int64_t v89;
  _OWORD *v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  int64_t v98;
  __int128 v99;
  void *v100;
  _QWORD *v101;
  __int128 v102;
  __int128 *v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  void *v107;
  _OWORD *v108;
  uint64_t v109;
  unint64_t v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _OWORD *v115;
  __int128 v116;
  void *v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  void *v123;
  void *v124;
  _OWORD *v126;
  float v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  float *v131;
  __int128 v132;
  void *v133;
  __int128 v134;
  float v135;
  void *v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t v141;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  int v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  int v167;
  int v168;
  int v169;
  __int128 v170;
  int v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;

char **sub_236829F90(char **a1)
{
  uint64_t v2;
  char **v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char **v8;
  char *v9;
  size_t v10;
  char **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  char *v24;
  char *v26;

  v2 = 0;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  do
  {
    v3 = &a1[3 * v2];
    v6 = v3[2];
    v5 = (char *)(v3 + 2);
    v4 = (unint64_t)v6;
    v8 = (char **)(v5 + 8);
    v7 = (char *)*((_QWORD *)v5 + 1);
    v9 = (char *)(v7 - v6);
    if ((unint64_t)(v7 - v6) > 0x3FF)
    {
      if (v9 == (char *)1024)
        goto LABEL_20;
      v24 = (char *)(v4 + 1024);
      goto LABEL_16;
    }
    v10 = 1024 - (_QWORD)v9;
    v11 = &a1[3 * v2];
    v14 = v11[4];
    v13 = (char *)(v11 + 4);
    v12 = v14;
    if (v14 - v7 >= (unint64_t)(1024 - (_QWORD)v9))
    {
      bzero(*((void **)v5 + 1), 1024 - (_QWORD)v9);
      v24 = &v7[v10];
LABEL_16:
      *v8 = v24;
      goto LABEL_20;
    }
    v26 = v13;
    v15 = (unint64_t)&v12[-v4];
    v16 = 2 * v15;
    if (2 * v15 <= 0x400)
      v16 = 1024;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = v17;
    v19 = (char *)operator new(v17);
    v20 = &v9[(_QWORD)v19];
    bzero(v20, v10);
    if (v7 == (char *)v4)
    {
      v22 = v26;
    }
    else
    {
      v21 = &v7[~v4];
      v22 = v26;
      do
      {
        v23 = *--v7;
        (v21--)[(_QWORD)v19] = v23;
      }
      while (v7 != (char *)v4);
      v7 = *(char **)v5;
      v20 = v19;
    }
    *(_QWORD *)v5 = v20;
    *v8 = v19 + 1024;
    *(_QWORD *)v22 = &v19[v18];
    if (v7)
      operator delete(v7);
LABEL_20:
    sub_23681D238(&a1[3 * v2++ + 11], 0x400uLL);
  }
  while (v2 != 3);
  return a1;
}

void sub_23682A118(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = 0;
  while (1)
  {
    v4 = *(void **)(v1 + v3 + 136);
    if (v4)
    {
      *(_QWORD *)(v1 + v3 + 144) = v4;
      operator delete(v4);
    }
    v3 -= 24;
    if (v3 == -72)
    {
      v5 = 0;
      while (1)
      {
        v6 = *(void **)(v1 + v5 + 64);
        if (v6)
        {
          *(_QWORD *)(v1 + v5 + 72) = v6;
          operator delete(v6);
        }
        v5 -= 24;
        if (v5 == -72)
          _Unwind_Resume(exception_object);
      }
    }
  }
}

uint64_t sub_23682A16C(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char **v8;
  uint64_t v9;
  char *v11;
  char **v12;
  char **v13;
  char *v14;
  uint64_t *v15;

  v1 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v2 = v1 + 1;
  if (v1 + 1 > 0x1642C8590B21642)
    sub_2367C3440();
  v4 = a1 + 2;
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v2)
    v2 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21)
    v5 = 0x1642C8590B21642;
  else
    v5 = v2;
  v15 = v4;
  if (v5)
  {
    v7 = (char *)sub_23682A374(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v11 = v7;
  v12 = (char **)&v7[184 * v1];
  v13 = v12;
  v14 = &v7[184 * v6];
  sub_236829F90(v12);
  v8 = v12;
  v12[20] = 0;
  v8[21] = 0;
  v8[22] = 0;
  v13 += 23;
  sub_23682A3BC(a1, &v11);
  v9 = a1[1];
  sub_23682A440((uint64_t)&v11);
  return v9;
}

void sub_23682A27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23682A440((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23682A290(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        sub_23682A300(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_23682A300(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  uint64_t j;
  void *v6;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  for (i = 0; i != -72; i -= 24)
  {
    v4 = *(void **)(a1 + i + 136);
    if (v4)
    {
      *(_QWORD *)(a1 + i + 144) = v4;
      operator delete(v4);
    }
  }
  for (j = 0; j != -72; j -= 24)
  {
    v6 = *(void **)(a1 + j + 64);
    if (v6)
    {
      *(_QWORD *)(a1 + j + 72) = v6;
      operator delete(v6);
    }
  }
}

void *sub_23682A374(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643)
    sub_2367C3488();
  return operator new(184 * a1);
}

void sub_23682A3BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 184;
    sub_23682A48C(v6 - 184, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t sub_23682A440(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    sub_23682A300(i - 184);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_23682A48C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  __n128 result;

  v2 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  do
  {
    v3 = (_QWORD *)(a1 + v2);
    v4 = (_QWORD *)(a2 + v2);
    v3[2] = 0;
    v3[3] = 0;
    v3[4] = 0;
    *((_OWORD *)v3 + 1) = *(_OWORD *)(a2 + v2 + 16);
    v3[4] = *(_QWORD *)(a2 + v2 + 32);
    v4[2] = 0;
    v4[3] = 0;
    v4[4] = 0;
    v2 += 24;
  }
  while (v2 != 72);
  for (i = 0; i != 72; i += 24)
  {
    v6 = (_QWORD *)(a1 + i);
    v7 = (_QWORD *)(a2 + i);
    v6[11] = 0;
    v6[12] = 0;
    v6[13] = 0;
    *(_OWORD *)(v6 + 11) = *(_OWORD *)(a2 + i + 88);
    v6[13] = *(_QWORD *)(a2 + i + 104);
    v7[11] = 0;
    v7[12] = 0;
    v7[13] = 0;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  return result;
}

__n128 sub_23682A528(__int128 *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __n128 *v6;
  __int128 v7;
  void *v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;

  v13 = *a1;
  v14 = a1[1];
  v3 = a1[2];
  v4 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v11 = *(__n128 *)((char *)a1 + 56);
  v12 = *(__n128 *)((char *)a1 + 72);
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v6 = (__n128 *)((char *)a2 + 56);
  v7 = *(__int128 *)((char *)a2 + 72);
  *(__int128 *)((char *)a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(__int128 *)((char *)a1 + 72) = v7;
  *a2 = v13;
  a2[1] = v14;
  v8 = (void *)*((_QWORD *)a2 + 4);
  if (v8)
  {
    *((_QWORD *)a2 + 5) = v8;
    v10 = v3;
    operator delete(v8);
    v3 = v10;
  }
  a2[2] = v3;
  *((_QWORD *)a2 + 6) = v4;
  result = v11;
  *v6 = v11;
  v6[1] = v12;
  return result;
}

double sub_23682A5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  float v7;
  __int128 *v8;

  v5 = a1;
  v6.n128_u32[0] = *(_DWORD *)(a2 + 76);
  v7 = *(float *)(a3 + 76);
  if (v6.n128_f32[0] <= *(float *)(a1 + 76))
  {
    if (v7 > v6.n128_f32[0])
    {
      v6 = sub_23682A528((__int128 *)a2, (__int128 *)a3);
      v6.n128_u32[0] = *(_DWORD *)(a2 + 76);
      if (v6.n128_f32[0] > *(float *)(v5 + 76))
      {
        a1 = v5;
        v8 = (__int128 *)a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v7 > v6.n128_f32[0])
    {
LABEL_5:
      v8 = (__int128 *)a3;
LABEL_9:
      v6.n128_u64[0] = sub_23682A528((__int128 *)a1, v8).n128_u64[0];
      return v6.n128_f64[0];
    }
    v6 = sub_23682A528((__int128 *)a1, (__int128 *)a2);
    v6.n128_u32[0] = *(_DWORD *)(a3 + 76);
    if (v6.n128_f32[0] > *(float *)(a2 + 76))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
  return v6.n128_f64[0];
}

double sub_23682A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v8;

  v8.n128_f64[0] = sub_23682A5DC(a1, a2, a3);
  v8.n128_u32[0] = *(_DWORD *)(a4 + 76);
  if (v8.n128_f32[0] > *(float *)(a3 + 76))
  {
    v8 = sub_23682A528((__int128 *)a3, (__int128 *)a4);
    v8.n128_u32[0] = *(_DWORD *)(a3 + 76);
    if (v8.n128_f32[0] > *(float *)(a2 + 76))
    {
      v8 = sub_23682A528((__int128 *)a2, (__int128 *)a3);
      v8.n128_u32[0] = *(_DWORD *)(a2 + 76);
      if (v8.n128_f32[0] > *(float *)(a1 + 76))
        v8.n128_u64[0] = sub_23682A528((__int128 *)a1, (__int128 *)a2).n128_u64[0];
    }
  }
  return v8.n128_f64[0];
}

BOOL sub_23682A71C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  float v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 12) > *(float *)(a1 + 76))
      {
        v6 = (__int128 *)(a2 - 88);
        v7 = (__int128 *)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_23682A5DC(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_23682A688(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_23682A688(a1, a1 + 88, a1 + 176, a1 + 264);
      if (*(float *)(a2 - 12) > *(float *)(a1 + 340))
      {
        sub_23682A528((__int128 *)(a1 + 264), (__int128 *)(a2 - 88));
        if (*(float *)(a1 + 340) > *(float *)(a1 + 252))
        {
          sub_23682A528((__int128 *)(a1 + 176), (__int128 *)(a1 + 264));
          if (*(float *)(a1 + 252) > *(float *)(a1 + 164))
          {
            sub_23682A528((__int128 *)(a1 + 88), (__int128 *)(a1 + 176));
            if (*(float *)(a1 + 164) > *(float *)(a1 + 76))
            {
              v7 = (__int128 *)a1;
              v6 = (__int128 *)(a1 + 88);
LABEL_4:
              sub_23682A528(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 176;
      sub_23682A5DC(a1, a1 + 88, a1 + 176);
      v9 = a1 + 264;
      if (a1 + 264 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(float *)(v9 + 76);
    if (v12 > *(float *)(v8 + 76))
    {
      v31 = *(_OWORD *)v9;
      v32 = *(_OWORD *)(v9 + 16);
      v13 = *(void **)(v9 + 32);
      v14 = *(_OWORD *)(v9 + 40);
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      v28 = v14;
      v29 = *(_OWORD *)(v9 + 56);
      v30 = *(_DWORD *)(v9 + 72);
      v15 = v10;
      v16 = *(_QWORD *)(v9 + 80);
      while (1)
      {
        v17 = a1 + v15;
        v18 = (_OWORD *)(a1 + v15 + 264);
        v19 = *(_OWORD *)(a1 + v15 + 192);
        *v18 = *(_OWORD *)(a1 + v15 + 176);
        v18[1] = v19;
        v20 = *(void **)(a1 + v15 + 296);
        if (v20)
        {
          *(_QWORD *)(v17 + 304) = v20;
          operator delete(v20);
          *(_QWORD *)(v17 + 304) = 0;
          *(_QWORD *)(v17 + 312) = 0;
        }
        *(_OWORD *)(v17 + 296) = *(_OWORD *)(v17 + 208);
        *(_QWORD *)(v17 + 312) = *(_QWORD *)(v17 + 224);
        *(_QWORD *)(v17 + 216) = 0;
        *(_QWORD *)(v17 + 224) = 0;
        *(_QWORD *)(v17 + 208) = 0;
        v21 = *(_OWORD *)(v17 + 248);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(v17 + 232);
        *(_OWORD *)(v17 + 336) = v21;
        if (v15 == -176)
          break;
        v22 = a1 + v15;
        v23 = *(float *)(a1 + v15 + 164);
        v15 -= 88;
        if (v12 <= v23)
        {
          v24 = (void **)(v22 + 208);
          v25 = a1 + v15 + 264;
          v26 = v22 + 232;
          goto LABEL_16;
        }
      }
      v24 = (void **)(a1 + 32);
      v26 = a1 + 56;
      v25 = a1;
LABEL_16:
      *(_OWORD *)v25 = v31;
      *(_OWORD *)(v25 + 16) = v32;
      v27 = *v24;
      if (*v24)
      {
        *(_QWORD *)(v25 + 40) = v27;
        operator delete(v27);
      }
      *v24 = v13;
      *(_OWORD *)(v25 + 40) = v28;
      *(_OWORD *)v26 = v29;
      *(_DWORD *)(v26 + 16) = v30;
      *(float *)(v25 + 76) = v12;
      *(_QWORD *)(v25 + 80) = v16;
      if (++v11 == 8)
        return v9 + 88 == a2;
    }
    v8 = v9;
    v10 += 88;
    v9 += 88;
    if (v9 == a2)
      return 1;
  }
}

uint64_t sub_23682A9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, _QWORD *a8, double a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[10];
  unint64_t v16;
  BOOL v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v23 = a1;
  v21 = a4;
  v10 = a6[1];
  result = 2;
  switch(v10)
  {
    case 0u:
      result = 4;
      goto LABEL_9;
    case 2u:
      result = 1;
      if ((unint64_t)(a5 - 9) < 0xFFFFFFFFFFFFFFF8)
        return result;
      goto LABEL_9;
    case 3u:
      if ((unint64_t)(a5 - 17) < 0xFFFFFFFFFFFFFFF8)
        return 1;
      result = 2;
LABEL_9:
      v12 = result * (unint64_t)*a6;
      v19 = result * a7;
      v20 = v12;
      if (v10 == 2)
        v13 = (257 << a5) - 257;
      else
        v13 = ~(-1 << a5);
      v18 = 1.0 / (float)(unint64_t)v13;
      v17 = a6[2] < 2;
      v16 = 0;
      v15[0] = &v21;
      v15[1] = &v19;
      v15[2] = &a10;
      v15[3] = &v23;
      v15[4] = &v22;
      v15[5] = &v20;
      v15[6] = a6;
      v15[7] = &v17;
      v15[8] = &v18;
      v15[9] = &v16;
      if (a8)
      {
        v14 = a8;
      }
      else
      {
        v24[0] = 0;
        v24[1] = v24;
        v14 = v24;
      }
      *(float *)&a9 = 1.0 / (float)(unint64_t)v13;
      result = sub_23682AB38((uint64_t)v14, a3, (uint64_t)v15, a9, 1.0);
      if (!(_DWORD)result)
        atomic_load(&v16);
      return result;
    case 5u:
      goto LABEL_9;
    default:
      result = 0;
      goto LABEL_9;
  }
}

BOOL sub_23682AB38(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  int v5;
  unsigned int i;
  _QWORD v8[2];

  if (!(_DWORD)a2)
    return 0;
  v5 = a2;
  v8[0] = sub_2367CAAA0;
  v8[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), float *(*)(uint64_t, unsigned int, double, float), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v8, sub_23682AE44, sub_23682ABCC, 0, a2) != 0;
  for (i = 0; i != v5; ++i)
    sub_23682ABCC((uint64_t)v8, i, a4, a5);
  return 0;
}

float *sub_23682ABCC(uint64_t a1, unsigned int a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  float *result;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  signed __int16 v24;
  unsigned int v25;
  float v26;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(_QWORD **)v4 * a2;
  v6 = **(_QWORD **)(v4 + 8);
  v7 = (float *)(*(_QWORD *)(**(_QWORD **)(v4 + 16) + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 16) + 16) * a2);
  v8 = **(_QWORD **)(v4 + 24);
  v9 = (unsigned int *)(v8 + v6 + v5);
  v10 = **(_QWORD **)(v4 + 32);
  v11 = **(_QWORD **)(v4 + 40);
  result = *(float **)(v4 + 64);
  v13 = *result;
  switch(*(_DWORD *)(*(_QWORD *)(v4 + 48) + 4))
  {
    case 0:
      if (**(_BYTE **)(v4 + 56))
      {
        for (; v10; --v10)
        {
          *(_DWORD *)v7++ = *v9;
          v9 = (unsigned int *)((char *)v9 + v11);
        }
      }
      else
      {
        for (; v10; --v10)
        {
          *(_DWORD *)v7++ = bswap32(*v9);
          v9 = (unsigned int *)((char *)v9 + v11);
        }
      }
      break;
    case 2:
      for (; v10; --v10)
      {
        *v7++ = v13 * (float)(*(unsigned __int8 *)v9 | (*(unsigned __int8 *)v9 << 8));
        v9 = (unsigned int *)((char *)v9 + v11);
      }
      break;
    case 3:
      if (**(_BYTE **)(v4 + 56))
      {
        if (v10)
        {
          v16 = v6 + v5 + v8 + 1;
          do
          {
            LOWORD(a4) = *(_WORD *)(v16 - 1);
            a4 = v13 * (float)LODWORD(a4);
            *v7++ = a4;
            v16 += v11;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        v21 = v6 + v5 + v8 + 1;
        do
        {
          *v7++ = v13 * (float)__rev16(*(unsigned __int16 *)(v21 - 1));
          v21 += v11;
          --v10;
        }
        while (v10);
      }
      break;
    case 5:
      if (**(_BYTE **)(v4 + 56))
      {
        if (v10)
        {
          v17 = (unsigned __int8 *)(v6 + v5 + v8 + 1);
          do
          {
            v18 = *v17;
            result = (float *)((v18 >> 2) & 0x1F);
            v19 = *(v17 - 1) | (v18 << 8) & 0x3FF;
            if ((_DWORD)result)
            {
              LODWORD(v20) = ((v18 << 24) & 0x80000000 | ((_DWORD)result << 23) | (v19 << 13)) + 939524096;
            }
            else
            {
              v20 = -(float)((float)((float)v19 * 0.00097656) * 0.000061035);
              if (((*(v17 - 1) | (*v17 << 8)) & 0x8000u) == 0)
                v20 = (float)((float)v19 * 0.00097656) * 0.000061035;
            }
            v17 += v11;
            *v7++ = v20;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        v22 = (unsigned __int8 *)(v6 + v5 + v8 + 1);
        do
        {
          v23 = *(v22 - 1);
          v24 = _byteswap_ushort(*(_WORD *)(v22 - 1));
          result = (float *)((v23 >> 2) & 0x1F);
          v25 = *v22 | (v23 << 8) & 0x3FF;
          if ((_DWORD)result)
          {
            LODWORD(v26) = ((v23 << 24) & 0x80000000 | ((_DWORD)result << 23) | (v25 << 13)) + 939524096;
          }
          else
          {
            v26 = -(float)((float)((float)v25 * 0.00097656) * 0.000061035);
            if (v24 >= 0)
              v26 = (float)((float)v25 * 0.00097656) * 0.000061035;
          }
          v22 += v11;
          *v7++ = v26;
          --v10;
        }
        while (v10);
      }
      break;
    default:
      v14 = *(unint64_t **)(v4 + 72);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      break;
  }
  return result;
}

uint64_t sub_23682AE44(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL sub_23682AE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int64x2_t v65;
  uint64_t *v66;
  _BOOL8 v67;
  unsigned __int8 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t i;
  int v72;
  float v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t *v87;
  int64x2_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  void **p_p;
  __int16 v94;
  void **v95[6];
  int v96;
  int v97;
  char v98;
  float v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  void *__p;
  void *v107;
  uint64_t v108;
  int64x2_t v109;
  uint64_t *v110;
  float v111[12];
  int v112;
  int v113;
  char v114;
  char v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  char v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  _QWORD v136[3];

  v136[1] = *MEMORY[0x24BDAC8D0];
  v126 = a8;
  v127 = a3;
  sub_2368218B0((uint64_t)v111, a1);
  if (v112 == 9)
  {
    v112 = 8;
    goto LABEL_50;
  }
  if (v112 != -1)
  {
LABEL_50:
    if (v123 != v122 && v123 - v122 != 32 || v125 != v124 && v125 - v124 != 12)
      goto LABEL_84;
    if (!v114 && v111[0] == 0.0)
      v111[0] = 0.001;
    if (v121 == -1.0)
      v121 = v111[0];
    v72 = v118;
    if (v118 <= 0)
    {
      v72 = 1;
      v118 = 1;
      if (!v120 && v111[0] >= 20.0)
      {
        v72 = 2;
        v118 = 2;
        v73 = (float)(v111[0] + -20.0) * 0.25 + 6.0;
        v111[0] = v73;
      }
    }
    v74 = v119;
    if (v119 <= 0)
    {
      v119 = v72;
      v74 = v72;
    }
    if (v111[0] < 0.0)
      goto LABEL_84;
    v75 = v117;
    if ((v117 & 0x80000000) != 0)
    {
      if (v117 != -1)
        goto LABEL_84;
      v75 = 0;
      v117 = 0;
    }
    if (v74 < v72)
      v119 = v72;
    if (v72 > 1 || *(_BYTE *)(a2 + 17))
    {
      v75 = 0;
      v117 = 0;
    }
    v76 = *(_QWORD *)(a2 + 8);
    if (v76 + (unint64_t)v75 <= 4 && (v111[0] == 0.0 || v111[0] >= 0.001))
    {
      v77 = *(unsigned __int8 *)(a4 + 368);
      if (*(_BYTE *)(a4 + 368))
      {
        v115 = 0;
        v116 = 0;
        v114 = 0;
      }
      v67 = 1;
      if (*(_QWORD *)a4 && *(_QWORD *)(a4 + 8) && (!v77 || v113))
      {
        if (sub_23682BB3C((uint64_t)v111, v76, *(_DWORD *)(v127 + 320), a4))
          v78 = sub_23682BC4C();
        else
          v78 = sub_23682E118();
        v67 = v78;
      }
      goto LABEL_85;
    }
LABEL_84:
    v67 = 1;
    goto LABEL_85;
  }
  if (!v114 || (sub_23682B8B4((uint64_t)v111) & 1) == 0)
  {
    v112 = 0;
    goto LABEL_50;
  }
  v80 = a5;
  v81 = a6;
  v109 = 0uLL;
  v110 = 0;
  v107 = 0;
  __p = 0;
  v108 = 0;
  sub_2368218B0((uint64_t)v95, a1);
  v13 = 0;
  v14 = 0;
  v96 = 0;
  v100 = 4;
  v136[0] = 0x42A0000000000000;
  do
  {
    v15 = 0;
    v16 = 0;
    v82 = v13;
    v104 = *((_DWORD *)v136 + v14);
    v135 = 0x42BE000000000000;
    do
    {
      v17 = 0;
      v83 = v15;
      v103 = *((_DWORD *)&v136[-1] + v16);
      v133 = 0x40000000000;
      v134 = 70000;
      do
      {
        v84 = v17;
        v18 = 0;
        v105 = *((_DWORD *)&v133 + v17);
        v131 = 0x2FFFFFFFFLL;
        v132 = 3;
        do
        {
          v85 = v18;
          if (*((_DWORD *)&v131 + v18) == -1)
          {
            v19 = 0.0;
          }
          else
          {
            v102 = *((_DWORD *)&v131 + v18);
            v19 = 1.0;
          }
          v20 = 0;
          v21 = 0;
          v99 = v19;
          v130 = 0xF00000000;
          v22 = v109.u64[1];
          do
          {
            v23 = 0;
            v86 = v20;
            v101 = *((_DWORD *)&v130 + v21);
            v128 = 0xFFFFFFFF00000000;
            v129 = 3;
            do
            {
              v24 = 0;
              v25 = 0;
              v97 = *((_DWORD *)&v128 + v23);
              v94 = 255;
              do
              {
                v26 = v24;
                v98 = *((_BYTE *)&v94 + v25);
                if (v22 >= (unint64_t)v110)
                {
                  v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v109.i64[0]) >> 7);
                  v28 = v27 + 1;
                  if (v27 + 1 > 0x66666666666666)
                    sub_2367C3440();
                  if (0x999999999999999ALL * (((uint64_t)v110 - v109.i64[0]) >> 7) > v28)
                    v28 = 0x999999999999999ALL * (((uint64_t)v110 - v109.i64[0]) >> 7);
                  if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v110 - v109.i64[0]) >> 7) >= 0x33333333333333)
                    v29 = 0x66666666666666;
                  else
                    v29 = v28;
                  v90 = &v110;
                  if (v29)
                  {
                    if (v29 > 0x66666666666666)
                      sub_2367C3488();
                    v30 = (uint64_t *)operator new(640 * v29);
                  }
                  else
                  {
                    v30 = 0;
                  }
                  v87 = v30;
                  v88.i64[0] = (uint64_t)&v30[80 * v27];
                  v88.i64[1] = v88.i64[0];
                  v89 = &v30[80 * v29];
                  sub_2368218B0(v88.i64[0], (uint64_t)v95);
                  v31 = v88.i64[0];
                  v22 = v88.i64[1] + 640;
                  v88.i64[1] += 640;
                  v32 = v109.i64[1];
                  v33 = v109.i64[0];
                  if (v109.i64[1] == v109.i64[0])
                  {
                    v65 = vdupq_n_s64(v109.u64[1]);
                  }
                  else
                  {
                    v34 = 0;
                    do
                    {
                      v35 = v31 + v34;
                      v36 = v32 + v34;
                      v37 = v31 + v34 - 632;
                      *(_DWORD *)(v31 + v34 - 640) = *(_DWORD *)(v32 + v34 - 640);
                      v38 = v32 + v34 - 632;
                      *(_QWORD *)v37 = 0;
                      *(_OWORD *)(v37 + 8) = 0uLL;
                      *(_OWORD *)v37 = *(_OWORD *)v38;
                      *(_QWORD *)(v31 + v34 - 616) = *(_QWORD *)(v32 + v34 - 616);
                      *(_QWORD *)(v38 + 16) = 0;
                      v39 = v31 + v34 - 608;
                      *(_OWORD *)v38 = 0uLL;
                      v40 = *(_OWORD *)(v32 + v34 - 512);
                      v42 = *(_OWORD *)(v32 + v34 - 560);
                      v41 = *(_OWORD *)(v32 + v34 - 544);
                      *(_OWORD *)(v39 + 80) = *(_OWORD *)(v32 + v34 - 528);
                      *(_OWORD *)(v39 + 96) = v40;
                      *(_OWORD *)(v39 + 48) = v42;
                      *(_OWORD *)(v39 + 64) = v41;
                      v44 = *(_OWORD *)(v32 + v34 - 480);
                      v43 = *(_OWORD *)(v32 + v34 - 464);
                      v45 = *(_OWORD *)(v32 + v34 - 496);
                      *(_DWORD *)(v39 + 160) = *(_DWORD *)(v32 + v34 - 448);
                      *(_OWORD *)(v39 + 128) = v44;
                      *(_OWORD *)(v39 + 144) = v43;
                      *(_OWORD *)(v39 + 112) = v45;
                      v46 = *(_OWORD *)(v32 + v34 - 608);
                      v47 = *(_OWORD *)(v32 + v34 - 576);
                      *(_OWORD *)(v39 + 16) = *(_OWORD *)(v32 + v34 - 592);
                      *(_OWORD *)(v39 + 32) = v47;
                      v48 = v31 + v34 - 440;
                      *(_OWORD *)v39 = v46;
                      v49 = *(_OWORD *)(v32 + v34 - 440);
                      *(_QWORD *)(v48 + 16) = *(_QWORD *)(v32 + v34 - 424);
                      v50 = (_QWORD *)(v31 + v34 - 416);
                      *(_OWORD *)v48 = v49;
                      v51 = v32 + v34 - 416;
                      v50[1] = 0;
                      v50[2] = 0;
                      *v50 = 0;
                      *(_OWORD *)v50 = *(_OWORD *)v51;
                      *(_QWORD *)(v31 + v34 - 400) = *(_QWORD *)(v32 + v34 - 400);
                      *(_QWORD *)(v32 + v34 - 408) = 0;
                      *(_QWORD *)v51 = 0;
                      *(_QWORD *)(v51 + 16) = 0;
                      v52 = v31 + v34 - 392;
                      v53 = *(_OWORD *)(v32 + v34 - 392);
                      v54 = *(_OWORD *)(v32 + v34 - 376);
                      *(_QWORD *)(v52 + 32) = *(_QWORD *)(v32 + v34 - 360);
                      *(_OWORD *)v52 = v53;
                      *(_OWORD *)(v52 + 16) = v54;
                      v55 = *(_OWORD *)(v32 + v34 - 352);
                      v56 = (_QWORD *)(v31 + v34 - 336);
                      v57 = v32 + v34 - 336;
                      v56[1] = 0;
                      v56[2] = 0;
                      *(_OWORD *)(v31 + v34 - 352) = v55;
                      *v56 = 0;
                      *(_OWORD *)v56 = *(_OWORD *)v57;
                      *(_QWORD *)(v31 + v34 - 320) = *(_QWORD *)(v32 + v34 - 320);
                      *(_QWORD *)(v32 + v34 - 328) = 0;
                      *(_QWORD *)v57 = 0;
                      v58 = (_QWORD *)(v31 + v34 - 312);
                      *(_QWORD *)(v57 + 16) = 0;
                      v59 = *(_QWORD *)(v32 + v34 - 312);
                      *(_QWORD *)((char *)v58 + 5) = *(_QWORD *)(v32 + v34 - 307);
                      *v58 = v59;
                      *(_BYTE *)(v31 + v34 - 296) = *(_BYTE *)(v32 + v34 - 296);
                      v60 = (_OWORD *)(v31 + v34 - 288);
                      v61 = *(_OWORD *)(v32 + v34 - 288);
                      v62 = *(_OWORD *)(v32 + v34 - 272);
                      v63 = *(_OWORD *)(v32 + v34 - 256);
                      *(_OWORD *)(v35 - 247) = *(_OWORD *)(v32 + v34 - 247);
                      *(_OWORD *)(v35 - 256) = v63;
                      *v60 = v61;
                      v60[1] = v62;
                      *(_QWORD *)(v35 - 216) = 0;
                      *(_QWORD *)(v35 - 208) = 0;
                      *(_QWORD *)(v35 - 224) = 0;
                      *(_OWORD *)(v35 - 224) = *(_OWORD *)(v32 + v34 - 224);
                      *(_QWORD *)(v35 - 208) = *(_QWORD *)(v32 + v34 - 208);
                      *(_QWORD *)(v36 - 224) = 0;
                      *(_QWORD *)(v36 - 216) = 0;
                      *(_QWORD *)(v36 - 208) = 0;
                      *(_QWORD *)(v35 - 200) = 0;
                      *(_QWORD *)(v35 - 192) = 0;
                      *(_QWORD *)(v35 - 184) = 0;
                      *(_OWORD *)(v35 - 200) = *(_OWORD *)(v32 + v34 - 200);
                      *(_QWORD *)(v35 - 184) = *(_QWORD *)(v32 + v34 - 184);
                      *(_QWORD *)(v36 - 200) = 0;
                      *(_QWORD *)(v36 - 192) = 0;
                      *(_QWORD *)(v36 - 184) = 0;
                      *(_QWORD *)(v35 - 176) = 0;
                      *(_QWORD *)(v35 - 168) = 0;
                      *(_QWORD *)(v35 - 160) = 0;
                      *(_OWORD *)(v35 - 176) = *(_OWORD *)(v32 + v34 - 176);
                      *(_QWORD *)(v35 - 160) = *(_QWORD *)(v32 + v34 - 160);
                      *(_QWORD *)(v36 - 168) = 0;
                      *(_QWORD *)(v36 - 160) = 0;
                      *(_QWORD *)(v36 - 176) = 0;
                      LODWORD(v60) = *(_DWORD *)(v32 + v34 - 152);
                      *(_QWORD *)(v35 - 136) = 0;
                      *(_QWORD *)(v35 - 128) = 0;
                      *(_QWORD *)(v35 - 144) = 0;
                      *(_DWORD *)(v35 - 152) = (_DWORD)v60;
                      *(_OWORD *)(v35 - 144) = *(_OWORD *)(v32 + v34 - 144);
                      *(_QWORD *)(v35 - 128) = *(_QWORD *)(v32 + v34 - 128);
                      *(_QWORD *)(v36 - 144) = 0;
                      *(_QWORD *)(v36 - 136) = 0;
                      *(_QWORD *)(v36 - 128) = 0;
                      *(_QWORD *)(v35 - 112) = 0;
                      *(_QWORD *)(v35 - 104) = 0;
                      *(_QWORD *)(v35 - 120) = 0;
                      *(_OWORD *)(v35 - 120) = *(_OWORD *)(v32 + v34 - 120);
                      *(_QWORD *)(v35 - 104) = *(_QWORD *)(v32 + v34 - 104);
                      *(_QWORD *)(v36 - 120) = 0;
                      *(_QWORD *)(v36 - 112) = 0;
                      *(_QWORD *)(v36 - 104) = 0;
                      *(_QWORD *)(v35 - 96) = 0;
                      *(_QWORD *)(v35 - 88) = 0;
                      *(_QWORD *)(v35 - 80) = 0;
                      *(_OWORD *)(v35 - 96) = *(_OWORD *)(v32 + v34 - 96);
                      *(_QWORD *)(v35 - 80) = *(_QWORD *)(v32 + v34 - 80);
                      *(_QWORD *)(v36 - 96) = 0;
                      *(_QWORD *)(v36 - 88) = 0;
                      *(_QWORD *)(v36 - 80) = 0;
                      *(_QWORD *)(v35 - 72) = 0;
                      *(_QWORD *)(v35 - 64) = 0;
                      *(_QWORD *)(v35 - 56) = 0;
                      *(_OWORD *)(v35 - 72) = *(_OWORD *)(v32 + v34 - 72);
                      *(_QWORD *)(v35 - 56) = *(_QWORD *)(v32 + v34 - 56);
                      *(_QWORD *)(v36 - 72) = 0;
                      *(_QWORD *)(v36 - 64) = 0;
                      *(_QWORD *)(v36 - 56) = 0;
                      *(_QWORD *)(v35 - 48) = 0;
                      *(_QWORD *)(v35 - 40) = 0;
                      *(_QWORD *)(v35 - 32) = 0;
                      *(_OWORD *)(v35 - 48) = *(_OWORD *)(v32 + v34 - 48);
                      *(_QWORD *)(v35 - 32) = *(_QWORD *)(v32 + v34 - 32);
                      *(_QWORD *)(v36 - 48) = 0;
                      *(_QWORD *)(v36 - 40) = 0;
                      *(_QWORD *)(v36 - 32) = 0;
                      v64 = *(_OWORD *)(v32 + v34 - 24);
                      *(_QWORD *)(v35 - 8) = *(_QWORD *)(v32 + v34 - 8);
                      *(_OWORD *)(v35 - 24) = v64;
                      v34 -= 640;
                    }
                    while (v32 + v34 != v33);
                    v31 += v34;
                    v65 = v109;
                    v22 = v88.u64[1];
                  }
                  v109.i64[0] = v31;
                  v109.i64[1] = v22;
                  v88 = v65;
                  v66 = v110;
                  v110 = v89;
                  v89 = v66;
                  v87 = (uint64_t *)v65.i64[0];
                  sub_23683DBA0((uint64_t)&v87);
                }
                else
                {
                  sub_2368218B0(v22, (uint64_t)v95);
                  v22 += 640;
                }
                v109.i64[1] = v22;
                v24 = 1;
                v25 = 1;
              }
              while ((v26 & 1) == 0);
              ++v23;
            }
            while (v23 != 3);
            v20 = 1;
            v21 = 1;
          }
          while ((v86 & 1) == 0);
          v18 = v85 + 1;
        }
        while (v85 != 2);
        v17 = v84 + 1;
      }
      while (v84 != 2);
      v15 = 1;
      v16 = 1;
    }
    while ((v83 & 1) == 0);
    v13 = 1;
    v14 = 1;
  }
  while ((v82 & 1) == 0);
  sub_2367D7BB0((char **)&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v109.i64[0]) >> 7));
  LOBYTE(v133) = 0;
  v87 = &v133;
  v88.i64[0] = (uint64_t)&v109;
  v88.i64[1] = a2;
  v89 = &v127;
  v90 = (_QWORD *)a4;
  v91 = v80;
  v92 = &v126;
  p_p = &__p;
  v67 = sub_23682B910(v81, -858993459 * ((unint64_t)(v109.i64[1] - v109.i64[0]) >> 7), (uint64_t)&v87);
  if (!v67)
  {
    v68 = atomic_load((unsigned __int8 *)&v133);
    if ((v68 & 1) == 0)
    {
      v69 = 0xCCCCCCCCCCCCCCCDLL * ((v109.i64[1] - v109.i64[0]) >> 7);
      if (v69 < 2)
      {
        v70 = 0;
      }
      else
      {
        v70 = 0;
        for (i = 1; i != v69; ++i)
        {
          if (*((_QWORD *)__p + v70) > *((_QWORD *)__p + i))
            v70 = i;
        }
      }
      sub_23682B940((uint64_t)v111, v109.i64[0] + 640 * v70);
      sub_236816F38((uint64_t)v95);
      if (__p)
      {
        v107 = __p;
        operator delete(__p);
      }
      v95[0] = (void **)&v109;
      sub_23682BACC(v95);
      goto LABEL_50;
    }
    v67 = 1;
  }
  sub_236816F38((uint64_t)v95);
  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }
  v95[0] = (void **)&v109;
  sub_23682BACC(v95);
LABEL_85:
  sub_236816F38((uint64_t)v111);
  return v67;
}

void sub_23682B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v29;

  sub_236816F38((uint64_t)&a28);
  v29 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v29;
    operator delete(v29);
  }
  a28 = (uint64_t)&STACK[0x330];
  sub_23682BACC((void ***)&a28);
  sub_236816F38((uint64_t)&STACK[0x348]);
  _Unwind_Resume(a1);
}

uint64_t sub_23682B8B4(uint64_t a1)
{
  float *i;

  if (*(_BYTE *)(a1 + 68) && (*(float *)a1 != 0.0 || !*(_DWORD *)(a1 + 64)))
    return 0;
  for (i = *(float **)(a1 + 8); i != *(float **)(a1 + 16); ++i)
  {
    if (*i > 0.0 || *i < 0.0 && *(float *)a1 != 0.0)
      return 0;
  }
  return 1;
}

BOOL sub_23682B910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  if (a1)
    return sub_23683D918(a1, a2, a3);
  v6[2] = v3;
  v6[3] = v4;
  v6[0] = 0;
  v6[1] = v6;
  return sub_23683D918((uint64_t)v6, a2, a3);
}

uint64_t sub_23682B940(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
  {
    sub_2367D4108((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    v4 = *(_OWORD *)(a2 + 32);
    v5 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 32) = v4;
    v6 = *(_OWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 96);
    v8 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 96) = v7;
    v9 = *(_OWORD *)(a2 + 144);
    v10 = *(_OWORD *)(a2 + 160);
    v11 = *(_OWORD *)(a2 + 176);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v10;
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 144) = v9;
    v12 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v12;
    sub_2367D4108((char *)(a1 + 224), *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 2);
    v13 = *(_OWORD *)(a2 + 248);
    v14 = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = v14;
    *(_OWORD *)(a1 + 248) = v13;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    sub_23683D1CC((char *)(a1 + 304), *(char **)(a2 + 304), *(_QWORD *)(a2 + 312), (uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3);
    v15 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 333) = *(_QWORD *)(a2 + 333);
    *(_QWORD *)(a1 + 328) = v15;
    *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
    v16 = *(_OWORD *)(a2 + 352);
    v17 = *(_OWORD *)(a2 + 368);
    v18 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
    *(_OWORD *)(a1 + 368) = v17;
    *(_OWORD *)(a1 + 384) = v18;
    *(_OWORD *)(a1 + 352) = v16;
    sub_2367D4108((char *)(a1 + 416), *(char **)(a2 + 416), *(_QWORD *)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 2);
    sub_2367D4108((char *)(a1 + 440), *(char **)(a2 + 440), *(_QWORD *)(a2 + 448), (uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 2);
    sub_23683D2D0((char *)(a1 + 464), *(char **)(a2 + 464), *(_QWORD *)(a2 + 472), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 472) - *(_QWORD *)(a2 + 464)) >> 3));
  }
  sub_23683D40C(a1 + 488, a2 + 488);
  v19 = *(_OWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = v19;
  return a1;
}

void sub_23682BACC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_236816F38(v4 - 640);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_23682BB3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  int v7;
  float v8;
  BOOL v9;
  BOOL v10;
  _BOOL8 result;
  int v14;

  v4 = *(_DWORD *)(a1 + 404);
  if (!v4)
    return 0;
  if (v4 == -1)
  {
    v7 = *(_DWORD *)(a1 + 48);
    if (v7 < 1)
      return 0;
    v8 = *(float *)a1;
    v9 = v7 > 2 || v8 <= 0.5;
    if (!v9 || v7 == 3 && v8 >= 3.0)
      return 0;
  }
  v10 = *(_QWORD *)(a4 + 8) >= 0x801uLL || *(_QWORD *)a4 >= 0x801uLL;
  if (!v10 || *(_BYTE *)(a4 + 368) != 0)
    return 0;
  if (*(_BYTE *)(a1 + 77) == 1 || *(_BYTE *)(a1 + 79) == 1)
    return 0;
  result = 0;
  if (*(_DWORD *)(a1 + 112))
    return result;
  if (a2)
    return result;
  result = 0;
  if (*(_DWORD *)(a1 + 380) != 1 || *(_DWORD *)(a1 + 384) != 1 || *(_BYTE *)(a1 + 32))
    return result;
  if (sub_23682B8B4(a1) && *(int *)(a1 + 352) <= 0)
  {
    v14 = *(unsigned __int8 *)(a1 + 68);
    return *(_DWORD *)(a1 + 64) == v14;
  }
  if (a3)
    return 0;
  v14 = 0;
  result = 0;
  if (!*(_BYTE *)(a1 + 68))
    return *(_DWORD *)(a1 + 64) == v14;
  return result;
}

uint64_t sub_23682BC4C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  char *v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void **v83;
  void **v84;
  unint64_t v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t i;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  void (*v115)(_QWORD, uint64_t);
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void **v119;
  void **v120;
  void *v121;
  void *v122;
  void *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void **v134;
  unint64_t v135;
  void **v136;
  size_t *v137;
  unint64_t v138;
  void *v139;
  void **v140;
  void *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  void (*v167)(_QWORD, uint64_t);
  unint64_t v168;
  int64_t v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t *v180;
  size_t v181;
  void *v182;
  unsigned int *v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  void **v188;
  _QWORD *v189;
  void (*v190)(_QWORD, uint64_t);
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unsigned int v204;
  _BOOL8 v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unsigned __int8 *v215;
  char *v216;
  unsigned __int8 *v217;
  unint64_t v218;
  uint64_t v219;
  int v220;
  unsigned __int8 *v221;
  unint64_t v222;
  size_t v223;
  char *v224;
  char *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  unsigned __int8 v228;
  void ***v229;
  uint64_t v230;
  char v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  void **v244;
  void **v245;
  uint64_t v246;
  _OWORD *v247;
  char *v248;
  void *v249;
  int64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  uint64_t v259;
  _OWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  void **v268;
  void **v269;
  uint64_t v270;
  _QWORD *v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int64x2_t v280;
  void **v281;
  void **v282;
  void **v283;
  void **v284;
  uint64_t v285;
  void *v286;
  _QWORD *v287;
  void *v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t **v296;
  uint64_t v297;
  _BYTE *v298;
  unsigned int v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void **v333;
  __int128 *v334;
  uint64_t *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  void *v361;
  unint64_t *v362;
  unsigned int *v363;
  _QWORD *v364;
  char *__p;
  unint64_t v366;
  void *v367;
  _QWORD *v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372[2];
  __int128 v373;
  _BYTE *v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  void **v381[157];
  uint64_t (**v382)();
  int v383;
  void *v384;
  char v385;
  void *v386;
  void *v387;
  uint64_t v388;
  _BYTE v389[1560];
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char v393;
  BOOL v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  _BYTE v401[24];
  _QWORD v402[25];
  uint64_t v403;
  uint64_t v404;
  __int128 v405;
  uint64_t v406;
  void *v407;
  void *v408;
  _QWORD v409[3];
  char v410;
  _BYTE *v411;
  __int128 v412;
  __int128 v413;
  _BYTE *v414;
  _BYTE v415[24];
  char v416;
  void *v417[2];
  _BYTE *v418;
  uint64_t (**v419)();
  _OWORD v420[2];
  uint64_t v421;
  int64x2_t v422;
  void **v423;
  void *v424[4];
  size_t *v425;
  __int128 v426;
  void **v427;
  void ***v428;

  v0 = MEMORY[0x24BDAC7A8]();
  v340 = v1;
  v3 = v2;
  v5 = v4;
  v334 = v6;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v0;
  sub_23682EE84((uint64_t)v389);
  v14 = *(const void **)(v13 + 616);
  if (*(_BYTE *)(v13 + 89) == 1)
  {
    if (!v14)
    {
      v398 = xmmword_2368AF8B0;
      v399 = xmmword_2368AF8C0;
      v400 = 8uLL;
      memset(v401, 0, sizeof(v401));
      memset(v402, 0, sizeof(v402));
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v14)
  {
LABEL_5:
    memmove(&v398, v14, 0x110uLL);
    goto LABEL_6;
  }
  if (*(_BYTE *)(v13 + 88) == 1)
  {
    v398 = xmmword_2368AF880;
    v399 = xmmword_2368AF890;
    v400 = xmmword_2368AF8A0;
    *(_OWORD *)v401 = xmmword_2368AF8B0;
    memset(v402, 0, sizeof(v402));
    *(_QWORD *)&v401[16] = 0;
  }
LABEL_6:
  sub_2367F40C8((uint64_t)&v382, v10);
  if (*(_BYTE *)(v8 + 368))
  {
    sub_23682F11C((uint64_t *)v381, v8 + 72);
    v15 = v381[0];
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_23682F26C(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), v13, (uint64_t *)&v398, v12, v15, (uint64_t)&v382);
  if ((_DWORD)v16)
    goto LABEL_286;
  v333 = v15;
  v17 = v398;
  sub_23684815C((uint64_t)v381, (uint64_t)&v382, v13, 1);
  v379 = 0;
  v378 = 0;
  v380 = 0;
  sub_2367DC34C((uint64x2_t *)v372, (uint64_t)&v382);
  v335 = (uint64_t *)v8;
  v18 = 8 * v377;
  v19 = *(_QWORD *)v8 - 1;
  v20 = (v19 + v377) / v377;
  v21 = *(_QWORD *)(v8 + 8) - 1;
  v342 = v19 + 8 * v377;
  v332 = v377;
  v22 = v21 + 8 * v377;
  v337 = (v21 + v377) / v377;
  v339 = v342 / (8 * v377);
  v23 = v22 / (8 * v377);
  v327 = v23 * v339;
  v352 = v23 * v339 + 2;
  sub_2367C5284((char **)&v378, v352 + v337 * v20 * v17);
  v329 = v13;
  v330 = v12;
  v331 = v10;
  v326 = v5;
  v336 = v3;
  v24 = v378;
  *(_DWORD *)v378 = 0;
  v25 = v18;
  v344 = v18;
  if (v18 <= v22)
  {
    __p = 0;
    v26 = 0;
    v28 = 0;
    v29 = 0;
    if (v339 <= 1)
      v30 = 1;
    else
      v30 = v339;
    if (v23 <= 1)
      v31 = 1;
    else
      v31 = v23;
    v341 = v31;
    v27 = 1;
    v32 = 8;
    v34 = v23 * v339 + 2;
    v33 = v337 * v20;
    v350 = v30;
    do
    {
      v348 = v29;
      v346 = v32;
      if (v25 <= v342)
      {
        v35 = 0;
        v36 = 0;
        v37 = v29 * v339;
        v38 = 8 * v29;
        if (8 * v29 + 8 >= v337)
          v39 = v337;
        else
          v39 = 8 * v29 + 8;
        if (v32 >= v337)
          v40 = v337;
        else
          v40 = v32;
        v41 = 8;
        v355 = v29 * v339;
        do
        {
          v42 = (void *)(v36 + v37);
          if ((unint64_t)v26 >= v28)
          {
            v359 = v35;
            v361 = (void *)(v36 + v37);
            v358 = v41;
            v43 = (v26 - __p) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
              sub_2367C3440();
            if ((uint64_t)(v28 - (_QWORD)__p) >> 2 > v44)
              v44 = (uint64_t)(v28 - (_QWORD)__p) >> 2;
            if (v28 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v44;
            if (v45)
              v45 = (unint64_t)sub_2367CA1FC(v45);
            else
              v46 = 0;
            v47 = (char *)(v45 + 8 * v43);
            *(_QWORD *)v47 = v361;
            v48 = v47 + 8;
            if (v26 == __p)
            {
              v49 = __p;
            }
            else
            {
              v49 = __p;
              do
              {
                v50 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *((_QWORD *)v47 - 1) = v50;
                v47 -= 8;
              }
              while (v26 != __p);
            }
            v28 = v45 + 8 * v46;
            if (v49)
            {
              v51 = v45 + 8 * v46;
              v26 = v48;
              operator delete(v49);
              v28 = v51;
              v24 = v378;
              __p = v47;
            }
            else
            {
              __p = v47;
              v26 = v48;
            }
            v34 = v352;
            v33 = v337 * v20;
            v30 = v350;
            v41 = v358;
            v35 = v359;
            v37 = v355;
            v42 = v361;
          }
          else
          {
            *(_QWORD *)v26 = v42;
            v26 += 8;
          }
          v52 = v27 + 1;
          v24[(_QWORD)v42 + 1] = v27;
          if (v17)
          {
            v53 = 0;
            v54 = 8 * v36 + 8;
            if (v54 >= v20)
              v54 = v20;
            if (v41 >= v20)
              v55 = v20;
            else
              v55 = v41;
            v56 = v55 + v35;
            do
            {
              if (v38 >= v39)
              {
                v27 = v52;
              }
              else
              {
                v57 = v38;
                do
                {
                  if (8 * v36 >= v54)
                  {
                    v27 = v52;
                  }
                  else
                  {
                    v58 = v56;
                    v59 = 8 * v36;
                    do
                    {
                      v27 = v52 + 1;
                      v24[v34 + v53 * v33 + v57 * v20 + v59++] = v52++;
                      --v58;
                    }
                    while (v58);
                  }
                  ++v57;
                  v52 = v27;
                }
                while (v57 != v40);
              }
              ++v53;
              v52 = v27;
            }
            while (v53 != v17);
          }
          else
          {
            ++v27;
          }
          ++v36;
          v41 += 8;
          v35 -= 8;
        }
        while (v36 != v30);
      }
      v29 = v348 + 1;
      v25 = v344;
      v32 = v346 + 8;
    }
    while (v348 + 1 != v341);
  }
  else
  {
    __p = 0;
    v26 = 0;
    LODWORD(v27) = 1;
  }
  v24[v327 + 1] = v27;
  v60 = v335;
  v61 = (uint64_t)v336;
  v62 = *v335;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v366 = 0;
  v367 = 0;
  v368 = 0;
  v63 = v336[5];
  *(_QWORD *)&v412 = 0;
  v351 = (v26 - __p) >> 3;
  v392 = v351;
  v328 = v63;
  if (v26 == __p)
  {
    v157 = 0;
    v325 = 0;
    v360 = 0;
    v64 = 0;
    v153 = 0;
    v158 = 0;
    v15 = v333;
    if (v383)
    {
LABEL_217:
      v338 = v157;
      v159 = v158 - v153;
      v160 = v159 + 1;
      if ((unint64_t)(v159 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v360 - (_QWORD)v153) >> 2 > v160)
        v160 = (uint64_t)(v360 - (_QWORD)v153) >> 2;
      if (v360 - (unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
        v161 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v161 = v160;
      if (v161)
        v161 = (unint64_t)sub_2367CA1FC(v161);
      v162 = (_QWORD *)(v161 + 8 * v159);
      *v162 = 0;
      v64 = v162 + 1;
      while (v158 != v153)
      {
        v163 = *--v158;
        *--v162 = v163;
      }
      if (v153)
        operator delete(v153);
      v153 = v162;
      goto LABEL_231;
    }
  }
  else
  {
    v360 = 0;
    v362 = 0;
    v64 = 0;
    v65 = 0;
    v338 = 0;
    v325 = 0;
    v353 = (v25 + v62 - 1) / v25;
    v15 = v333;
    v66 = v326;
    do
    {
      v67 = *(_QWORD *)&__p[8 * v65];
      v68 = v67 / v353 * v344;
      v69 = v67 % v353 * v344;
      v70 = *v60;
      if (v60[1] - v68 >= v344)
        v71 = v344;
      else
        v71 = v60[1] - v68;
      if (v70 - v69 >= v344)
        v72 = v344;
      else
        v72 = v70 - v69;
      v393 = 1;
      v394 = v65 == 0;
      v395 = v67;
      sub_2367D7ABC(v372, (v332 - 1 + v71) / v332 * ((v332 - 1 + v72) / v332), &v412);
      if ((_QWORD)v405)
      {
        *((_QWORD *)&v405 + 1) = v405;
        operator delete((void *)v405);
      }
      v405 = *(_OWORD *)v372;
      v406 = v373;
      v425 = 0;
      v426 = 0uLL;
      v16 = sub_23682F854(v329, v330, v331, (uint64_t)v335, v333, v69, v68, v72, v71, v334, v66, (uint64_t)&v382, v381, (uint64_t)v389, (uint64_t)&v425, v340);
      if ((_DWORD)v16)
        goto LABEL_213;
      if (v65)
      {
        v73 = v64;
      }
      else
      {
        v374 = 0;
        *(_OWORD *)v372 = 0u;
        v373 = 0u;
        v16 = sub_2368ACEB0((uint64_t)&v382, v372, 0, (uint64_t)v340);
        if ((_DWORD)v16)
        {
          v73 = v64;
        }
        else
        {
          *(_OWORD *)&v415[8] = xmmword_2368AF8D0;
          v416 = 0;
          *(void **)v415 = v372[0];
          v74 = (char *)v372[1] + 1;
          sub_2367E8BBC((size_t *)&v372[1], (unint64_t)v372[1] + 1);
          if (*((_QWORD *)&v373 + 1))
            v75 = v74;
          else
            v75 = 0;
          v417[0] = v374;
          v372[1] = v75;
          v374 = v415;
          *(_QWORD *)(*((_QWORD *)&v373 + 1) + ((unint64_t)v372[0] >> 3)) = (1 << ((uint64_t)v372[0] & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v373 + 1) + ((unint64_t)v372[0] >> 3));
          ++v372[0];
          sub_236826DB4((uint64_t)v378, (v379 - (uint64_t)v378) >> 2, (unint64_t *)v372, (uint64_t)v340);
          v76 = (((unint64_t)v372[0] + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v372[0];
          if (v76)
          {
            *(_QWORD *)(*((_QWORD *)&v373 + 1) + ((unint64_t)v372[0] >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v373 + 1) + ((unint64_t)v372[0] >> 3));
            v372[0] = (char *)v372[0] + v76;
          }
          sub_2367F14F8((uint64_t)v415, v372, 0, (uint64_t)v340);
          v77 = (unint64_t)v372[0] >> 3;
          sub_2367E8BBC((size_t *)&v372[1], (unint64_t)v372[0] >> 3);
          v78 = *((_QWORD *)&v373 + 1);
          if (*((_QWORD *)&v373 + 1))
            v79 = (void *)v77;
          else
            v79 = 0;
          v369 = (unint64_t)v79;
          v370 = v373;
          v372[1] = v79;
          *((_QWORD *)&v373 + 1) = 0;
          v80 = v371;
          v371 = v78;
          if (v80)
          {
            v81 = -*(_QWORD *)(v80 - 24);
            do
              v82 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v82 + v81, &qword_2564313D8));
            free(*(void **)(v80 - 32));
          }
          v372[1] = 0;
          *(_QWORD *)&v373 = 0;
          v83 = (void **)v425;
          v84 = (void **)(v425 + 1);
          v85 = *v425 >> 3;
          sub_2367E8BBC(v425 + 1, v85);
          v86 = v83[2];
          v87 = v83[3];
          if (!v87)
            v85 = 0;
          v83[1] = (void *)v85;
          v366 = v85;
          v367 = v86;
          v83[3] = 0;
          v88 = v368;
          v368 = v87;
          if (v88)
          {
            v89 = -*(v88 - 3);
            do
              v90 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v90 + v89, &qword_2564313D8));
            free((void *)*(v88 - 4));
            v85 = v366;
          }
          *v84 = 0;
          v84[1] = 0;
          v91 = v369;
          v92 = ((v379 - (uint64_t)v378) >> 2) - 1;
          v93 = 1;
          while (v93 != 4)
          {
            v94 = qword_236924890[v93++];
            if (v94 > v85)
            {
              v95 = v93 - 2;
              goto LABEL_109;
            }
          }
          v95 = 3;
LABEL_109:
          for (i = v85; ; i = qword_236924890[v95])
          {
            v97 = i + ((unint64_t)(20 * v92 + 7) >> 3);
            v98 = 1;
            while (v98 != 4)
            {
              v99 = qword_236924890[v98++];
              if (v99 > v97)
              {
                v100 = v98 - 2;
                goto LABEL_115;
              }
            }
            v100 = 3;
LABEL_115:
            if (v100 <= v95)
              break;
            v101 = 1;
            while (v101 != 4)
            {
              v102 = qword_236924890[v101++];
              if (v102 > v97)
              {
                v95 = v101 - 2;
                goto LABEL_121;
              }
            }
            v95 = 3;
LABEL_121:
            ;
          }
          v103 = qword_236924870[v95];
          v338 = i;
          if ((unint64_t)v64 >= v360)
          {
            v105 = v64 - v362;
            v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 61)
              sub_2367C3440();
            if ((uint64_t)(v360 - (_QWORD)v362) >> 2 > v106)
              v106 = (uint64_t)(v360 - (_QWORD)v362) >> 2;
            if (v360 - (unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
              v107 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v107 = v106;
            v343 = v369;
            if (v107)
              v107 = (unint64_t)sub_2367CA1FC(v107);
            else
              v108 = 0;
            v109 = (unint64_t *)(v107 + 8 * v105);
            *v109 = v85;
            v73 = v109 + 1;
            if (v64 == v362)
            {
              v110 = v362;
              v104 = v336;
            }
            else
            {
              v110 = v362;
              v104 = v336;
              do
              {
                v111 = *--v64;
                *--v109 = v111;
              }
              while (v64 != v362);
            }
            v360 = v107 + 8 * v108;
            if (v110)
              operator delete(v110);
            v362 = v109;
            i = v338;
            v91 = v343;
          }
          else
          {
            *v64 = v85;
            v73 = v64 + 1;
            v104 = v336;
          }
          v112 = i + v91 + ((unint64_t)(v103 + 32 * v92 + 7) >> 3);
          v66 = v326;
          v325 = v112;
          v113 = v112 + v328;
          v114 = (_QWORD *)v104[9];
          if (v114)
          {
            v115 = (void (*)(_QWORD, uint64_t))v114[3];
            if (v115)
            {
              v115(*v114, v113);
              v104 = v336;
              v336[7] = v113;
            }
          }
          v104[5] = v113;
        }
        v116 = *((_QWORD *)&v373 + 1);
        *((_QWORD *)&v373 + 1) = 0;
        if (v116)
        {
          v117 = -*(_QWORD *)(v116 - 24);
          do
            v118 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v118 + v117, &qword_2564313D8));
          free(*(void **)(v116 - 32));
        }
        if ((_DWORD)v16)
          goto LABEL_213;
      }
      v119 = (void **)v425;
      v120 = (void **)(v425 + 6);
      v121 = (void *)(v425[5] >> 3);
      sub_2367E8BBC(v425 + 6, (unint64_t)v121);
      v122 = v119[7];
      v123 = v119[8];
      if (!v123)
        v121 = 0;
      v119[6] = v121;
      v372[0] = v121;
      v372[1] = v122;
      v119[8] = 0;
      *(_QWORD *)&v373 = v123;
      *v120 = 0;
      v119[7] = 0;
      if ((unint64_t)v73 >= v360)
      {
        v124 = v73 - v362;
        v125 = v124 + 1;
        v61 = (uint64_t)v336;
        if ((unint64_t)(v124 + 1) >> 61)
          sub_2367C3440();
        if ((uint64_t)(v360 - (_QWORD)v362) >> 2 > v125)
          v125 = (uint64_t)(v360 - (_QWORD)v362) >> 2;
        if (v360 - (unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
          v126 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v126 = v125;
        if (v126)
          v126 = (unint64_t)sub_2367CA1FC(v126);
        else
          v127 = 0;
        v128 = (unint64_t *)(v126 + 8 * v124);
        *v128 = (unint64_t)v121;
        v64 = v128 + 1;
        if (v73 == v362)
        {
          v129 = v362;
        }
        else
        {
          v129 = v362;
          do
          {
            v130 = *--v73;
            *--v128 = v130;
          }
          while (v73 != v362);
        }
        v360 = v126 + 8 * v127;
        if (v129)
          operator delete(v129);
        v362 = v128;
      }
      else
      {
        *v73 = (unint64_t)v121;
        v64 = v73 + 1;
        v61 = (uint64_t)v336;
      }
      v16 = sub_2368311D8(v61, (unint64_t *)v372);
      v131 = v373;
      *(_QWORD *)&v373 = 0;
      if (v131)
      {
        v132 = -*(_QWORD *)(v131 - 24);
        do
          v133 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v133 + v132, &qword_2564313D8));
        free(*(void **)(v131 - 32));
      }
      if ((_DWORD)v16)
        goto LABEL_213;
      v134 = (void **)v425;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v426 - (_QWORD)v425) >> 3) >= 4)
      {
        v135 = 3;
        while (1)
        {
          v136 = &v134[5 * v135];
          v138 = (unint64_t)*v136;
          v137 = (size_t *)(v136 + 1);
          v139 = (void *)(v138 >> 3);
          sub_2367E8BBC(v137, v138 >> 3);
          v140 = &v134[5 * v135];
          v141 = v140[3];
          if (!v141)
            v139 = 0;
          v372[0] = v139;
          v372[1] = v140[2];
          v140[3] = 0;
          *(_QWORD *)&v373 = v141;
          *v137 = 0;
          v137[1] = 0;
          if ((unint64_t)v64 >= v360)
          {
            v142 = v64 - v362;
            v143 = v142 + 1;
            if ((unint64_t)(v142 + 1) >> 61)
              sub_2367C3440();
            if ((uint64_t)(v360 - (_QWORD)v362) >> 2 > v143)
              v143 = (uint64_t)(v360 - (_QWORD)v362) >> 2;
            if (v360 - (unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
              v144 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v144 = v143;
            if (v144)
              v144 = (unint64_t)sub_2367CA1FC(v144);
            else
              v145 = 0;
            v146 = (unint64_t *)(v144 + 8 * v142);
            *v146 = (unint64_t)v139;
            v147 = v146 + 1;
            if (v64 == v362)
            {
              v148 = v362;
            }
            else
            {
              v148 = v362;
              do
              {
                v149 = *--v64;
                *--v146 = v149;
              }
              while (v64 != v362);
            }
            v360 = v144 + 8 * v145;
            if (v148)
              operator delete(v148);
            v362 = v146;
            v64 = v147;
          }
          else
          {
            *v64++ = (unint64_t)v139;
          }
          v16 = sub_2368311D8(v61, (unint64_t *)v372);
          v150 = v373;
          *(_QWORD *)&v373 = 0;
          if ((_DWORD)v16)
            break;
          if (v150)
          {
            v151 = -*(_QWORD *)(v150 - 24);
            do
              v152 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v152 + v151, &qword_2564313D8));
            free(*(void **)(v150 - 32));
          }
          ++v135;
          v134 = (void **)v425;
          if (v135 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v426 - (_QWORD)v425) >> 3))
            goto LABEL_205;
        }
        if (v150)
        {
          v154 = -*(_QWORD *)(v150 - 24);
          do
            v155 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v155 + v154, &qword_2564313D8));
          free(*(void **)(v150 - 32));
        }
LABEL_213:
        v372[0] = &v425;
        sub_2367D077C((void ***)v372);
        v153 = v362;
        goto LABEL_214;
      }
LABEL_205:
      v372[0] = &v425;
      sub_2367D077C((void ***)v372);
      v65 = v412 + 1;
      *(_QWORD *)&v412 = v65;
      v60 = v335;
    }
    while (v65 < v351);
    if (v383)
    {
      v153 = v362;
      if ((unint64_t)v64 < v360)
      {
        *v64++ = 0;
        goto LABEL_231;
      }
      v158 = v64;
      v157 = v338;
      goto LABEL_217;
    }
    v153 = v362;
    v157 = v338;
  }
  v338 = v157;
  sub_2367DC34C((uint64x2_t *)v372, (uint64_t)&v382);
  v414 = 0;
  v413 = 0u;
  v412 = 0u;
  v200 = __clz(v375) ^ 0x3F;
  if ((v375 & (v375 - 1)) != 0)
    v201 = v200 + 1;
  else
    v201 = v200;
  *(_QWORD *)&v415[16] = 0;
  v416 = 0;
  *(_QWORD *)&v415[8] = v201 + 1;
  *(_QWORD *)v415 = 0;
  v364 = v153;
  sub_2367E8BBC((size_t *)&v412 + 1, (v201 + 8) >> 3);
  if (*((_QWORD *)&v413 + 1))
    v202 = (v201 + 8) >> 3;
  else
    v202 = 0;
  v417[0] = v414;
  *((_QWORD *)&v412 + 1) = v202;
  v414 = v415;
  *(_QWORD *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3)) = (1 << (v412 & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3));
  *(_QWORD *)&v412 = v412 + 1;
  *(_QWORD *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3)) = ((v376 - 1) << (v412 & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3));
  *(_QWORD *)&v412 = v412 + v201;
  sub_2367F14F8((uint64_t)v415, &v412, 12, (uint64_t)v340);
  if ((_QWORD)v398)
  {
    v203 = 0;
    while (1)
    {
      v204 = *((_DWORD *)v407 + v203);
      *(_QWORD *)v415 = 0;
      v205 = sub_2367F2290(0x800000138000005FLL, 0xC80000000, v204, &v425, (unint64_t *)v415);
      if (v205)
        break;
      v409[2] = 0;
      v410 = 0;
      v409[1] = *(_QWORD *)v415;
      v409[0] = v412;
      v206 = *((_QWORD *)&v412 + 1) + ((unint64_t)(*(_QWORD *)v415 + 7) >> 3);
      sub_2367E8BBC((size_t *)&v412 + 1, v206);
      if (*((_QWORD *)&v413 + 1))
        v207 = v206;
      else
        v207 = 0;
      v411 = v414;
      *((_QWORD *)&v412 + 1) = v207;
      v414 = v409;
      v349 = v203;
      sub_2368AD3C4(0x800000138000005FLL, 0xC80000000, *((_DWORD *)v407 + v203), (uint64_t *)&v412);
      sub_2367F14F8((uint64_t)v409, &v412, 11, (uint64_t)v340);
      sub_2368273B8(*((unsigned __int16 *)v407 + 2 * v349), v391 + 4 * v390 * v349, (unint64_t *)&v412, (uint64_t)v340);
      v208 = v404;
      *(_DWORD *)v415 = -1;
      sub_2367C3384(v424, 0x100uLL, v415);
      v209 = (uint64_t *)(v208 + 176 * v203 + 24);
      v347 = v208;
      v210 = v208 + 176 * v349;
      v212 = *(_QWORD *)(v210 + 32);
      v211 = (_QWORD *)(v210 + 32);
      v213 = *v209;
      v356 = v208 + 176 * v349;
      v214 = 0;
      v215 = 0;
      if (v212 != *v209)
      {
        v216 = 0;
        v217 = 0;
        v218 = 0;
        do
        {
          v219 = *(unsigned __int8 *)(v213 + v218);
          v220 = *((_DWORD *)v424[0] + v219);
          if (v220 == -1)
          {
            v221 = &v217[-v214];
            *((_DWORD *)v424[0] + v219) = (_DWORD)v217 - v214;
            if (v217 >= (unsigned __int8 *)v216)
            {
              v222 = (unint64_t)(v221 + 1);
              if ((uint64_t)(v221 + 1) < 0)
                sub_2367C3440();
              if (2 * (uint64_t)&v216[-v214] > v222)
                v222 = 2 * (_QWORD)&v216[-v214];
              if ((unint64_t)&v216[-v214] >= 0x3FFFFFFFFFFFFFFFLL)
                v223 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v223 = v222;
              if (v223)
                v224 = (char *)operator new(v223);
              else
                v224 = 0;
              v225 = (char *)&v221[(_QWORD)v224];
              v226 = &v221[(_QWORD)v224];
              *v226 = v219;
              v215 = v226 + 1;
              if (v217 != (unsigned __int8 *)v214)
              {
                v227 = &v217[~v214];
                do
                {
                  v228 = *--v217;
                  (v227--)[(_QWORD)v224] = v228;
                }
                while (v217 != (unsigned __int8 *)v214);
                v225 = v224;
              }
              v216 = &v224[v223];
              if (v214)
                operator delete((void *)v214);
              v214 = (unint64_t)v225;
            }
            else
            {
              *v217 = v219;
              v215 = v217 + 1;
            }
            v220 = *((_DWORD *)v424[0] + v219);
            v213 = *v209;
            v217 = v215;
          }
          *(_BYTE *)(v213 + v218++) = v220;
          v213 = *v209;
        }
        while (v218 < *v211 - *v209);
      }
      memset(v415, 0, sizeof(v415));
      v417[1] = 0;
      v418 = 0;
      v417[0] = 0;
      v419 = &off_2507FF438;
      *(_OWORD *)((char *)v420 + 12) = xmmword_2368AF590;
      v426 = xmmword_2368AF3F0;
      v425 = (size_t *)&off_2507FF550;
      v427 = 0;
      sub_2367CB9F8((uint64_t)&v419, (uint64_t)&v425);
      v229 = (void ***)(v356 + 48);
      v422 = 0uLL;
      v423 = 0;
      v230 = v347 + 176 * v349;
      v231 = *(_BYTE *)(v230 + 72);
      v230 += 72;
      v416 = v231;
      v232 = *(_OWORD *)(v230 + 40);
      v233 = *(_OWORD *)(v230 + 56);
      v345 = v230;
      v421 = *(_QWORD *)(v230 + 72);
      v420[0] = v232;
      v420[1] = v233;
      if ((unsigned __int8 *)v214 != v215)
      {
        v234 = v347 + 176 * v349;
        v354 = (uint64_t *)(v234 + 152);
        v357 = (_QWORD *)(v234 + 80);
        v235 = (unsigned __int8 *)v214;
        do
        {
          v236 = *v235;
          v237 = *v229;
          v238 = (uint64_t)&(*v229)[3 * v236];
          v239 = *(_QWORD *)&v415[8];
          if (*(_QWORD *)&v415[8] >= *(_QWORD *)&v415[16])
          {
            v241 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v415[8] - *(_QWORD *)v415) >> 3);
            v242 = v241 + 1;
            if (v241 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_2367C3440();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v415[16] - *(_QWORD *)v415) >> 3) > v242)
              v242 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v415[16] - *(_QWORD *)v415) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v415[16] - *(_QWORD *)v415) >> 3) >= 0x555555555555555)
              v243 = 0xAAAAAAAAAAAAAAALL;
            else
              v243 = v242;
            v428 = (void ***)&v415[16];
            v244 = (void **)sub_2367D1EBC(v243);
            v245 = &v244[3 * v241];
            v425 = (size_t *)v244;
            *(_QWORD *)&v426 = v245;
            v427 = &v244[3 * v246];
            *v245 = 0;
            v245[1] = 0;
            v245[2] = 0;
            *(_OWORD *)v245 = *(_OWORD *)v238;
            v245[2] = v237[3 * v236 + 2];
            *(_QWORD *)v238 = 0;
            *(_QWORD *)(v238 + 8) = 0;
            *(_QWORD *)(v238 + 16) = 0;
            *((_QWORD *)&v426 + 1) = v245 + 3;
            sub_2367D1F00(v415, &v425);
            v240 = *(_QWORD *)&v415[8];
            sub_23681E60C((uint64_t)&v425);
          }
          else
          {
            **(_QWORD **)&v415[8] = 0;
            *(_QWORD *)(v239 + 8) = 0;
            *(_QWORD *)(v239 + 16) = 0;
            *(_OWORD *)v239 = *(_OWORD *)v238;
            *(_QWORD *)(v239 + 16) = v237[3 * v236 + 2];
            *(_QWORD *)v238 = 0;
            *(_QWORD *)(v238 + 8) = 0;
            *(_QWORD *)(v238 + 16) = 0;
            v240 = v239 + 24;
          }
          *(_QWORD *)&v415[8] = v240;
          v247 = (_OWORD *)(*v357 + 16 * v236);
          v248 = (char *)v417[1];
          if (v417[1] >= v418)
          {
            v250 = ((char *)v417[1] - (char *)v417[0]) >> 4;
            v251 = v250 + 1;
            if ((unint64_t)(v250 + 1) >> 60)
              sub_2367C3440();
            v252 = v418 - (char *)v417[0];
            if ((v418 - (char *)v417[0]) >> 3 > v251)
              v251 = v252 >> 3;
            if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF0)
              v253 = 0xFFFFFFFFFFFFFFFLL;
            else
              v253 = v251;
            if (v253)
              v253 = (unint64_t)sub_2367CD8AC(v253);
            else
              v254 = 0;
            v255 = (char *)(v253 + 16 * v250);
            *(_OWORD *)v255 = *v247;
            v256 = (char *)v417[1];
            v257 = (char *)v417[0];
            v258 = v255;
            if (v417[1] != v417[0])
            {
              do
              {
                *((_OWORD *)v258 - 1) = *((_OWORD *)v256 - 1);
                v258 -= 16;
                v256 -= 16;
              }
              while (v256 != v257);
              v256 = (char *)v417[0];
            }
            v249 = v255 + 16;
            v417[0] = v258;
            v417[1] = v255 + 16;
            v418 = (_BYTE *)(v253 + 16 * v254);
            if (v256)
              operator delete(v256);
          }
          else
          {
            *(_OWORD *)v417[1] = *v247;
            v249 = v248 + 16;
          }
          v417[1] = v249;
          v259 = *v354;
          v260 = (_OWORD *)(*v354 + 40 * v236);
          v261 = (_QWORD *)v422.i64[1];
          if (v422.i64[1] >= (unint64_t)v423)
          {
            v265 = 0xCCCCCCCCCCCCCCCDLL * ((v422.i64[1] - v422.i64[0]) >> 3);
            v266 = v265 + 1;
            if (v265 + 1 > 0x666666666666666)
              sub_2367C3440();
            if (0x999999999999999ALL * (((uint64_t)v423 - v422.i64[0]) >> 3) > v266)
              v266 = 0x999999999999999ALL * (((uint64_t)v423 - v422.i64[0]) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v423 - v422.i64[0]) >> 3) >= 0x333333333333333)
              v267 = 0x666666666666666;
            else
              v267 = v266;
            v428 = &v423;
            v268 = (void **)sub_2367DC0A4(v267);
            v269 = &v268[5 * v265];
            v425 = (size_t *)v268;
            *(_QWORD *)&v426 = v269;
            v427 = &v268[5 * v270];
            v271 = (_QWORD *)(v259 + 40 * v236);
            *(_OWORD *)v269 = *v260;
            v269[2] = (void *)v271[2];
            v272 = (void *)v271[3];
            v271[3] = 0;
            v269[3] = v272;
            v271[1] = 0;
            v271[2] = 0;
            v269[4] = (void *)v271[4];
            v264 = v269 + 5;
            *((_QWORD *)&v426 + 1) = v269 + 5;
            v273 = v422.i64[1];
            v274 = v422.i64[0];
            v275 = v426;
            if (v422.i64[1] == v422.i64[0])
            {
              v280 = vdupq_n_s64(v422.u64[1]);
            }
            else
            {
              v276 = 0;
              do
              {
                v277 = v275 + v276;
                v278 = v273 + v276;
                *(_OWORD *)(v277 - 40) = *(_OWORD *)(v273 + v276 - 40);
                *(_QWORD *)(v277 - 24) = *(_QWORD *)(v273 + v276 - 24);
                v279 = *(_QWORD *)(v273 + v276 - 16);
                *(_QWORD *)(v278 - 16) = 0;
                *(_QWORD *)(v277 - 16) = v279;
                *(_QWORD *)(v278 - 32) = 0;
                *(_QWORD *)(v278 - 24) = 0;
                *(_QWORD *)(v277 - 8) = *(_QWORD *)(v273 + v276 - 8);
                v276 -= 40;
              }
              while (v273 + v276 != v274);
              v275 += v276;
              v280 = v422;
              v264 = (_QWORD *)*((_QWORD *)&v426 + 1);
            }
            v422.i64[0] = v275;
            v422.i64[1] = (uint64_t)v264;
            v426 = (__int128)v280;
            v281 = v423;
            v423 = v427;
            v427 = v281;
            v425 = (size_t *)v280.i64[0];
            sub_2367F6844((uint64_t)&v425);
          }
          else
          {
            v262 = (_QWORD *)(v259 + 40 * v236);
            *(_OWORD *)v422.i64[1] = *v260;
            v261[2] = v262[2];
            v263 = v262[3];
            v262[3] = 0;
            v261[3] = v263;
            v262[1] = 0;
            v262[2] = 0;
            v261[4] = v262[4];
            v264 = v261 + 5;
          }
          v422.i64[1] = (uint64_t)v264;
          ++v235;
        }
        while (v235 != v215);
      }
      v282 = *v229;
      v61 = (uint64_t)v336;
      if (*v229)
      {
        v283 = v229[1];
        v284 = *v229;
        if (v283 != v282)
        {
          do
          {
            v283 -= 3;
            v425 = (size_t *)v283;
            sub_2368171F0((void ***)&v425);
          }
          while (v283 != v282);
          v284 = *v229;
        }
        v229[1] = v282;
        operator delete(v284);
        *v229 = 0;
        v229[1] = 0;
        v229[2] = 0;
      }
      *(_OWORD *)v229 = *(_OWORD *)v415;
      v229[2] = *(void ***)&v415[16];
      memset(v415, 0, sizeof(v415));
      *(_BYTE *)v345 = v416;
      v285 = v347 + 176 * v349;
      v288 = *(void **)(v285 + 80);
      v287 = (_QWORD *)(v285 + 80);
      v286 = v288;
      if (v288)
      {
        *(_QWORD *)(v347 + 176 * v349 + 88) = v286;
        operator delete(v286);
        *v287 = 0;
        v287[1] = 0;
        v287[2] = 0;
      }
      *(_OWORD *)v287 = *(_OWORD *)v417;
      v289 = v347 + 176 * v349;
      *(_QWORD *)(v289 + 96) = v418;
      v417[0] = 0;
      v417[1] = 0;
      v418 = 0;
      v290 = v420[0];
      v291 = v420[1];
      *(_QWORD *)(v345 + 72) = v421;
      *(_OWORD *)(v345 + 40) = v290;
      *(_OWORD *)(v345 + 56) = v291;
      sub_2367D0910((void **)(v289 + 152));
      *(int64x2_t *)(v289 + 152) = v422;
      *(_QWORD *)(v289 + 168) = v423;
      v422 = 0uLL;
      v423 = 0;
      v425 = (size_t *)&v422;
      sub_2367D077C((void ***)&v425);
      if (v417[0])
      {
        v417[1] = v417[0];
        operator delete(v417[0]);
      }
      v425 = (size_t *)v415;
      sub_236817010((void ***)&v425);
      v153 = v364;
      if (v214)
        operator delete((void *)v214);
      if (v424[0])
      {
        v424[1] = v424[0];
        operator delete(v424[0]);
      }
      v292 = v404;
      *(_OWORD *)&v415[8] = xmmword_2368AF8E0;
      v416 = 0;
      *(_QWORD *)v415 = v412;
      v293 = *((_QWORD *)&v412 + 1) + 2192;
      v15 = v333;
      sub_2367E8BBC((size_t *)&v412 + 1, *((_QWORD *)&v412 + 1) + 2192);
      if (*((_QWORD *)&v413 + 1))
        v294 = v293;
      else
        v294 = 0;
      v417[0] = v414;
      *((_QWORD *)&v412 + 1) = v294;
      v414 = v415;
      sub_2368ACEB0(v292 + 176 * v349 + 104, &v412, 12, (uint64_t)v340);
      if (*(_BYTE *)(v292 + 176 * v349 + 112))
        sub_236817700(*(_QWORD *)(v292 + 176 * v349 + 124), *(_QWORD *)(v292 + 176 * v349 + 132), &v412, 8);
      v295 = v292 + 176 * v349;
      v296 = (uint64_t **)(v295 + 48);
      sub_2368285B0((unsigned __int8 **)(v295 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v295 + 56) - *(_QWORD *)(v295 + 48)) >> 3), (unint64_t *)&v412, 12, (uint64_t)v340);
      v297 = v292 + 176 * v349;
      v299 = *(unsigned __int8 *)(v297 + 72);
      v298 = (_BYTE *)(v297 + 72);
      *(_QWORD *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3)) = ((unint64_t)v299 << (v412 & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3));
      v300 = v412 + 1;
      *(_QWORD *)&v412 = v412 + 1;
      if (*v298)
      {
        v301 = 15;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v413 + 1) + (v300 >> 3)) = (3 << (v300 & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v413 + 1) + (v300 >> 3));
        *(_QWORD *)&v412 = v412 + 2;
        v301 = 8;
      }
      sub_2368176B0(*(_QWORD *)(v292 + 176 * v349 + 80), *(uint64_t **)(v292 + 176 * v349 + 88), &v412, v301);
      if (*v298)
      {
        v303 = *v296;
        v302 = v296[1];
        while (v303 != v302)
        {
          v305 = *v303;
          v304 = v303[1];
          v303 += 3;
          sub_236819058(0xAAAAAAAAAAAAAAABLL * ((v304 - v305) >> 4) - 1, (unint64_t *)&v412);
        }
      }
      v306 = v292 + 176 * v349;
      v307 = *(uint64_t **)(v306 + 152);
      v308 = *(uint64_t **)(v306 + 160);
      while (v307 != v308)
      {
        sub_2367F15FC((unint64_t *)&v412, v307);
        v307 += 5;
      }
      *(_QWORD *)&v415[16] = v412 - *(_QWORD *)v415;
      sub_2367F14F8((uint64_t)v415, &v412, 12, (uint64_t)v340);
      v203 = v349 + 1;
      if (v349 + 1 >= (unint64_t)v398)
        goto LABEL_404;
    }
    v16 = v205;
  }
  else
  {
LABEL_404:
    *(_OWORD *)&v415[8] = xmmword_2368AF8D0;
    v416 = 0;
    *(_QWORD *)v415 = v412;
    v309 = *((_QWORD *)&v412 + 1) + 1;
    sub_2367E8BBC((size_t *)&v412 + 1, *((_QWORD *)&v412 + 1) + 1);
    if (*((_QWORD *)&v413 + 1))
      v310 = v309;
    else
      v310 = 0;
    v417[0] = v414;
    *((_QWORD *)&v412 + 1) = v310;
    v414 = v415;
    v311 = ((v412 + 7) & 0xFFFFFFFFFFFFFFF8) - v412;
    if (v311)
    {
      *(_QWORD *)(*((_QWORD *)&v413 + 1) + ((unint64_t)v412 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v413 + 1)
                                                                                               + ((unint64_t)v412 >> 3));
      *(_QWORD *)&v412 = v412 + v311;
    }
    sub_2367F14F8((uint64_t)v415, &v412, 12, (uint64_t)v340);
    v312 = (unint64_t)v412 >> 3;
    sub_2367E8BBC((size_t *)&v412 + 1, (unint64_t)v412 >> 3);
    if (!*((_QWORD *)&v413 + 1))
      v312 = 0;
    *(_QWORD *)v415 = v312;
    *(_OWORD *)&v415[8] = v413;
    *((_QWORD *)&v412 + 1) = 0;
    v413 = 0uLL;
    if ((unint64_t)v64 >= v360)
    {
      v313 = v64 - v153;
      v314 = v313 + 1;
      if ((unint64_t)(v313 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v360 - (_QWORD)v153) >> 2 > v314)
        v314 = (uint64_t)(v360 - (_QWORD)v153) >> 2;
      if (v360 - (unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
        v315 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v315 = v314;
      if (v315)
        v315 = (unint64_t)sub_2367CA1FC(v315);
      v316 = (unint64_t *)(v315 + 8 * v313);
      *v316 = v312;
      v317 = v316 + 1;
      while (v64 != v153)
      {
        v318 = *--v64;
        *--v316 = v318;
      }
      if (v153)
        operator delete(v153);
      v153 = v316;
      v64 = v317;
    }
    else
    {
      *v64++ = v312;
    }
    v16 = sub_2368311D8(v61, (unint64_t *)v415);
    v319 = *(_QWORD *)&v415[16];
    *(_QWORD *)&v415[16] = 0;
    if (v319)
    {
      v320 = -*(_QWORD *)(v319 - 24);
      do
        v321 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v321 + v320, &qword_2564313D8));
      free(*(void **)(v319 - 32));
    }
  }
  v322 = *((_QWORD *)&v413 + 1);
  *((_QWORD *)&v413 + 1) = 0;
  if (v322)
  {
    v323 = -*(_QWORD *)(v322 - 24);
    do
      v324 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v324 + v323, &qword_2564313D8));
    free(*(void **)(v322 - 32));
  }
  if ((_DWORD)v16)
  {
LABEL_214:
    v156 = __p;
    if (!v153)
      goto LABEL_273;
    goto LABEL_272;
  }
LABEL_231:
  v164 = v61;
  v165 = *(_QWORD *)(v61 + 40);
  v166 = *(_QWORD **)(v164 + 72);
  v363 = (unsigned int *)v153;
  if (v166)
  {
    v167 = (void (*)(_QWORD, uint64_t))v166[3];
    if (v167)
    {
      v167(*v166, v328);
      v336[7] = v328;
    }
  }
  v336[5] = v328;
  v168 = v369;
  v372[0] = 0;
  v372[1] = 0;
  v169 = (char *)v64 - (char *)v153;
  v170 = v64 - v153;
  *(_QWORD *)&v373 = 0;
  sub_2367DBF84(v372, v153, (uint64_t)v64, v170);
  v171 = v372[0];
  *(_QWORD *)v372[0] = v338;
  if (v372[1] == v171)
  {
    v178 = 0;
  }
  else
  {
    v172 = 0;
    v173 = 0;
    v174 = ((char *)v372[1] - (char *)v171) >> 3;
    if (v174 <= 1)
      v174 = 1;
    do
    {
      v175 = 1;
      while (v175 != 4)
      {
        v176 = qword_236924890[v175++];
        if (v176 > v171[v172])
        {
          v177 = v175 - 2;
          goto LABEL_242;
        }
      }
      v177 = 3;
LABEL_242:
      v173 += qword_236924870[v177];
      ++v172;
    }
    while (v172 != v174);
    v178 = (unint64_t)(v173 + 7) >> 3;
  }
  v179 = v325 - v168;
  v180 = v153;
  v181 = v179 - (v178 + *v153);
  operator delete(v171);
  *v180 += v181;
  v374 = 0;
  *(_OWORD *)v372 = 0u;
  v373 = 0u;
  *(_QWORD *)&v415[16] = 0;
  v416 = 0;
  *(_QWORD *)&v415[8] = 4 * v169;
  *(_QWORD *)v415 = 0;
  sub_2367E8BBC((size_t *)&v372[1], (unint64_t)(4 * v169 + 7) >> 3);
  if (*((_QWORD *)&v373 + 1))
    v182 = (void *)((unint64_t)(4 * v169 + 7) >> 3);
  else
    v182 = 0;
  v417[0] = v374;
  v372[1] = v182;
  v374 = v415;
  if (v64 != v180)
  {
    if (v170 <= 1)
      v170 = 1;
    v183 = v363;
    do
    {
      v184 = *v183;
      v183 += 2;
      sub_2368AD3C4(0x800D00000009, 0x808801D00088015, v184, (uint64_t *)v372);
      --v170;
    }
    while (v170);
  }
  v185 = (((unint64_t)v372[0] + 7) & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v372[0];
  v156 = __p;
  if (v185)
  {
    *(_QWORD *)(*((_QWORD *)&v373 + 1) + ((unint64_t)v372[0] >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v373 + 1)
                                                                                                + ((unint64_t)v372[0] >> 3));
    v372[0] = (char *)v372[0] + v185;
  }
  sub_2367F14F8((uint64_t)v415, v372, 1, (uint64_t)v340);
  v186 = (unint64_t)v372[0] >> 3;
  sub_2367E8BBC((size_t *)&v372[1], (unint64_t)v372[0] >> 3);
  v187 = *((_QWORD *)&v373 + 1);
  if (*((_QWORD *)&v373 + 1))
    v188 = (void **)v186;
  else
    v188 = 0;
  v425 = (size_t *)v188;
  v426 = v373;
  sub_236818388(v372, v181);
  v153 = v363;
  v16 = sub_2368311D8((uint64_t)v336, &v369);
  if (!(_DWORD)v16)
  {
    v16 = sub_2368311D8((uint64_t)v336, (unint64_t *)&v425);
    if (!(_DWORD)v16)
    {
      v16 = sub_2368311D8((uint64_t)v336, &v366);
      if (!(_DWORD)v16)
      {
        v16 = sub_23683D0E8((uint64_t)v336, v372);
        if (!(_DWORD)v16)
        {
          v189 = (_QWORD *)v336[9];
          if (v189)
          {
            v190 = (void (*)(_QWORD, uint64_t))v189[3];
            if (v190)
            {
              v190(*v189, v165);
              v336[7] = v165;
            }
          }
          v16 = 0;
          v336[5] = v165;
        }
      }
    }
  }
  if (v372[0])
  {
    v372[1] = v372[0];
    operator delete(v372[0]);
  }
  *((_QWORD *)&v426 + 1) = 0;
  if (v187)
  {
    v191 = -*(_QWORD *)(v187 - 24);
    do
      v192 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v192 + v191, &qword_2564313D8));
    free(*(void **)(v187 - 32));
  }
LABEL_272:
  operator delete(v153);
LABEL_273:
  v193 = v368;
  v368 = 0;
  if (v193)
  {
    v194 = -*(v193 - 3);
    do
      v195 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v195 + v194, &qword_2564313D8));
    free((void *)*(v193 - 4));
  }
  v196 = v371;
  v371 = 0;
  if (v196)
  {
    v197 = -*(_QWORD *)(v196 - 24);
    do
      v198 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v198 + v197, &qword_2564313D8));
    free(*(void **)(v196 - 32));
  }
  if (v156)
    operator delete(v156);
  if (v378)
    operator delete(v378);
  sub_236816DF8((uint64_t)v381);
LABEL_286:
  if (v15)
    (*((void (**)(void **))*v15 + 1))(v15);
  v382 = off_2507FF4B0;
  v381[0] = (void **)&v388;
  sub_2367D6C0C(v381);
  if (v386)
  {
    v387 = v386;
    operator delete(v386);
  }
  if (v385 < 0)
    operator delete(v384);
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if ((_QWORD)v405)
  {
    *((_QWORD *)&v405 + 1) = v405;
    operator delete((void *)v405);
  }
  v381[0] = (void **)&v404;
  sub_2368312B8(v381);
  sub_236816F38((uint64_t)&v403);
  v381[0] = (void **)&v397;
  sub_236831328(v381);
  v381[0] = (void **)&v396;
  sub_2367D07F0(v381);
  sub_2367E94EC((uint64_t)v389);
  return v16;
}

void sub_23682DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;

  if (a60)
  {
    v62 = -*(_QWORD *)(a60 - 24);
    do
      v63 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v63 + v62, &qword_2564313D8));
    free(*(void **)(a60 - 32));
  }
  STACK[0x1E40] = v60 - 136;
  sub_2367D077C((void ***)&STACK[0x1E40]);
  if (__p)
    operator delete(__p);
  if (a53)
  {
    v64 = -*(_QWORD *)(a53 - 24);
    do
      v65 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v65 + v64, &qword_2564313D8));
    free(*(void **)(a53 - 32));
  }
  if (a56)
  {
    v66 = -*(_QWORD *)(a56 - 24);
    do
      v67 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v67 + v66, &qword_2564313D8));
    free(*(void **)(a56 - 32));
  }
  if (a50)
    operator delete(a50);
  if (STACK[0x210])
    operator delete((void *)STACK[0x210]);
  sub_236816DF8((uint64_t)&STACK[0x228]);
  if (a28)
    (*(void (**)(uint64_t))(*(_QWORD *)a28 + 8))(a28);
  sub_2367DC598((uint64_t)&STACK[0x710]);
  sub_236831398((uint64_t)&STACK[0x950]);
  _Unwind_Resume(a1);
}

uint64_t sub_23682E118()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  void **v16;
  uint64_t v17;
  unint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t **v25;
  unint64_t **v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  long double v61;
  long double v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void **v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  unint64_t *v105;
  void **v106[157];
  _QWORD v107[12];
  char v108;
  void *__p;
  void *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char v114[8];
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t **v121;
  unint64_t **v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[24];
  _QWORD v127[25];
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  _QWORD **v136;
  _QWORD **v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _OWORD v142[2];
  void **v143;
  _QWORD *v144;
  __int128 v145;
  unint64_t *v146;
  uint64_t *v147;

  v0 = MEMORY[0x24BDAC7A8]();
  v99 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v0;
  sub_23682EE84((uint64_t)v114);
  v15 = *(const void **)(v14 + 616);
  if (*(_BYTE *)(v14 + 89) == 1)
  {
    if (!v15)
    {
      v123 = xmmword_2368AF8B0;
      v124 = xmmword_2368AF8C0;
      v125 = 8uLL;
      memset(v126, 0, sizeof(v126));
      memset(v127, 0, sizeof(v127));
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v15)
  {
LABEL_5:
    memmove(&v123, v15, 0x110uLL);
    goto LABEL_6;
  }
  if (*(_BYTE *)(v14 + 88) == 1)
  {
    v123 = xmmword_2368AF880;
    v124 = xmmword_2368AF890;
    v125 = xmmword_2368AF8A0;
    *(_OWORD *)v126 = xmmword_2368AF8B0;
    memset(v127, 0, sizeof(v127));
    *(_QWORD *)&v126[16] = 0;
  }
LABEL_6:
  v112 = 0uLL;
  v113 = 0;
  sub_2367F40C8((uint64_t)v107, v11);
  if (*(_BYTE *)(v9 + 368))
  {
    sub_23682F11C((uint64_t *)v106, v9 + 72);
    v16 = v106[0];
  }
  else
  {
    v16 = 0;
  }
  v17 = sub_23682F26C(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), v14, (uint64_t *)&v123, v13, v16, (uint64_t)v107);
  if (!(_DWORD)v17)
  {
    v97 = v3;
    v98 = v123;
    sub_23684815C((uint64_t)v106, (uint64_t)v107, v14, 0);
    v17 = sub_23682F854(v14, v13, v11, v9, v16, 0, 0, *(_QWORD *)v9, *(_QWORD *)(v9 + 8), v7, v5, (uint64_t)v107, v106, (uint64_t)v114, (uint64_t)&v112, v99);
    if ((_DWORD)v17)
    {
LABEL_129:
      sub_236816DF8((uint64_t)v106);
      goto LABEL_130;
    }
    v105 = 0;
    v103 = 0u;
    v104 = 0u;
    v18 = v121;
    if (v121 != v122)
    {
      v19 = 0;
      do
      {
        v20 = *v18++;
        v19 += *v20 >> 3;
      }
      while (v18 != v122);
      if (v19)
      {
        sub_2367E8BBC((size_t *)&v103 + 1, v19 + 1);
        v21 = v16;
        v22 = *((_QWORD *)&v104 + 1);
        if (*((_QWORD *)&v104 + 1))
          v23 = v19 + 1;
        else
          v23 = 0;
        *((_QWORD *)&v103 + 1) = v23;
        v24 = (unint64_t)v103 >> 3;
        v25 = v121;
        v26 = v122;
        if (v121 != v122)
        {
          do
          {
            v27 = *v25++;
            v28 = *v27;
            memcpy((void *)(*((_QWORD *)&v104 + 1) + v24), (const void *)v27[3], *v27 >> 3);
            v24 += v28 >> 3;
          }
          while (v25 != v26);
          v22 = *((_QWORD *)&v104 + 1);
        }
        *(_BYTE *)(v22 + v24) = 0;
        *(_QWORD *)&v103 = v103 + 8 * v19;
        v16 = v21;
      }
    }
    v17 = sub_2368ACEB0((uint64_t)v107, &v103, 0, (uint64_t)v99);
    if ((_DWORD)v17)
    {
LABEL_125:
      v91 = *((_QWORD *)&v104 + 1);
      *((_QWORD *)&v104 + 1) = 0;
      if (v91)
      {
        v92 = -*(_QWORD *)(v91 - 24);
        do
          v93 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v93 + v92, &qword_2564313D8));
        free(*(void **)(v91 - 32));
      }
      goto LABEL_129;
    }
    v100 = 0;
    v101 = 0;
    v102 = 0;
    if (!*(_BYTE *)(v14 + 90) || (v29 = v117, v98 == 1) && v117 == 1)
    {
      v30 = 0;
      v31 = 0;
      goto LABEL_27;
    }
    sub_2367C5284(&v100, v118 + 2);
    v31 = v100;
    v30 = v101;
    if (v100 != v101)
    {
      v50 = 0;
      v51 = v100;
      do
      {
        *(_DWORD *)v51 = v50;
        v51 += 4;
        ++v50;
      }
      while (v51 != v30);
    }
    sub_2367C3BE4(v142, v29);
    v53 = (unsigned int *)*((_QWORD *)&v142[0] + 1);
    v52 = *(unsigned int **)&v142[0];
    if (*(_QWORD *)&v142[0] != *((_QWORD *)&v142[0] + 1))
    {
      v54 = 0;
      v55 = *(unsigned int **)&v142[0];
      do
        *v55++ = v54++;
      while (v55 != v53);
    }
    v141 = v119;
    v56 = *(_QWORD *)(v14 + 96);
    if (v56 == -1)
    {
      v56 = v115 >> 1;
    }
    else if (v56 >= v115)
    {
      goto LABEL_72;
    }
    v57 = *(_QWORD *)(v14 + 104);
    if (v57 == -1)
    {
      v57 = v116 >> 1;
    }
    else if (v57 >= v116)
    {
LABEL_72:
      v58 = 0;
      goto LABEL_119;
    }
    v59 = 126 - 2 * __clz(v53 - v52);
    v139 = v57 / v119 * v119 + (v119 >> 1);
    v140 = v56 / v119 * v119 + (v119 >> 1);
    if (v53 == v52)
      v60 = 0;
    else
      v60 = v59;
    v61 = atan2((double)(uint64_t)(v57 - (v57 / v119 * v119 + (v119 >> 1))), (double)(uint64_t)(v56 - (v56 / v119 * v119 + (v119 >> 1))));
    v62 = fmod(3.92699082 - v61, 6.28318531);
    v138 = (uint64_t)((v62 + v62) / 3.14159265);
    v144 = &v115;
    *(_QWORD *)&v145 = &v141;
    *((_QWORD *)&v145 + 1) = &v140;
    v146 = &v139;
    v147 = &v138;
    v136 = &v144;
    sub_236830860((uint64_t)v52, v53, &v136, v60, 1);
    LODWORD(v134) = 0;
    sub_236818A38(&v136, (uint64_t)(*((_QWORD *)&v142[0] + 1) - *(_QWORD *)&v142[0]) >> 2, &v134);
    v63 = *(_QWORD *)&v142[0];
    if (*((_QWORD *)&v142[0] + 1) != *(_QWORD *)&v142[0])
    {
      v64 = 0;
      v65 = (uint64_t)(*((_QWORD *)&v142[0] + 1) - *(_QWORD *)&v142[0]) >> 2;
      v66 = v136;
      if (v65 <= 1)
        v65 = 1;
      do
      {
        *((_DWORD *)v66 + *(unsigned int *)(v63 + 4 * v64)) = v64;
        ++v64;
      }
      while (v65 != v64);
    }
    if (v98)
    {
      v67 = 0;
      v96 = v16;
      do
      {
        v69 = v136;
        v68 = v137;
        if (v136 != v137)
        {
          v70 = (unint64_t)(v30 - v31) >> 2;
          v71 = v102;
          do
          {
            v72 = *v69 + v70;
            if ((unint64_t)v30 >= v71)
            {
              v73 = (v30 - v31) >> 2;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62)
              {
                v102 = v71;
                v100 = v31;
                sub_2367C3440();
              }
              if ((uint64_t)(v71 - (_QWORD)v31) >> 1 > v74)
                v74 = (uint64_t)(v71 - (_QWORD)v31) >> 1;
              if (v71 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v75 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v75 = v74;
              if (v75)
                v75 = (unint64_t)sub_2367C3454(v75);
              else
                v76 = 0;
              v77 = (char *)(v75 + 4 * v73);
              *(_DWORD *)v77 = v72;
              v78 = v77 + 4;
              while (v30 != v31)
              {
                v79 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v77 - 1) = v79;
                v77 -= 4;
              }
              v71 = v75 + 4 * v76;
              v101 = v78;
              if (v31)
                operator delete(v31);
              v31 = v77;
              v30 = v78;
            }
            else
            {
              *(_DWORD *)v30 = v72;
              v30 += 4;
            }
            v101 = v30;
            ++v69;
          }
          while (v69 != v68);
          v102 = v71;
          v100 = v31;
          v16 = v96;
        }
        ++v67;
      }
      while (v67 != v98);
    }
    sub_236831114(&v134, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 3));
    if (v30 == v31)
    {
      v30 = v31;
    }
    else
    {
      v80 = 0;
      do
      {
        v81 = v112;
        v82 = v112 + 40 * v80;
        v83 = *(_DWORD *)&v31[4 * v80];
        v84 = v134;
        v85 = v134 + 40 * v83;
        *(_OWORD *)v85 = *(_OWORD *)v82;
        *(_QWORD *)(v85 + 16) = *(_QWORD *)(v82 + 16);
        v86 = *(_QWORD *)(v82 + 24);
        *(_QWORD *)(v82 + 24) = 0;
        v87 = *(_QWORD *)(v85 + 24);
        *(_QWORD *)(v85 + 24) = v86;
        if (v87)
        {
          v88 = -*(_QWORD *)(v87 - 24);
          do
            v89 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v89 + v88, &qword_2564313D8));
          free(*(void **)(v87 - 32));
        }
        if (v82 != v85)
        {
          v90 = v81 + 40 * v80;
          *(_QWORD *)(v90 + 8) = 0;
          *(_QWORD *)(v90 + 16) = 0;
        }
        *(_QWORD *)(v84 + 40 * v83 + 32) = *(_QWORD *)(v81 + 40 * v80++ + 32);
        v31 = v100;
        v30 = v101;
      }
      while (v80 < (v101 - v100) >> 2);
    }
    sub_2367D0910((void **)&v112);
    v112 = v134;
    v113 = v135;
    v135 = 0;
    v134 = 0uLL;
    v143 = (void **)&v134;
    sub_2367D077C(&v143);
    if (v136)
    {
      v137 = v136;
      operator delete(v136);
    }
    v58 = 1;
    v52 = *(unsigned int **)&v142[0];
LABEL_119:
    if (v52)
    {
      *((_QWORD *)&v142[0] + 1) = v52;
      operator delete(v52);
    }
    if ((v58 & 1) == 0)
    {
      v17 = 1;
LABEL_123:
      if (v31)
      {
        v101 = v31;
        operator delete(v31);
      }
      goto LABEL_125;
    }
LABEL_27:
    v32 = 0;
    v33 = 0;
    v142[0] = xmmword_2368AF8F0;
    do
    {
      v34 = *(_DWORD *)((char *)v142 + v32);
      if (v33 <= (unint64_t)(v34 & 0x1F) + 1)
        v35 = (v34 & 0x1F) + 1;
      else
        v35 = v33;
      if (v34 >= 0)
        v33 = v35;
      v32 += 4;
    }
    while (v32 != 16);
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 3) * (v33 + 2);
    v145 = v36 + 17;
    LOBYTE(v146) = 0;
    v144 = (_QWORD *)v103;
    v37 = *((_QWORD *)&v103 + 1) + ((v36 + 24) >> 3);
    sub_2367E8BBC((size_t *)&v103 + 1, v37);
    if (*((_QWORD *)&v104 + 1))
      v38 = v37;
    else
      v38 = 0;
    v147 = (uint64_t *)v105;
    *((_QWORD *)&v103 + 1) = v38;
    v105 = (unint64_t *)&v144;
    if (v31 == v30 || (_QWORD)v112 == *((_QWORD *)&v112 + 1))
    {
      *(_QWORD *)(*((_QWORD *)&v104 + 1) + ((unint64_t)v103 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v104 + 1)
                                                                                               + ((unint64_t)v103 >> 3));
      v39 = v103 + 1;
      *(_QWORD *)&v103 = v103 + 1;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)&v104 + 1) + ((unint64_t)v103 >> 3)) = (1 << (v103 & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v104 + 1) + ((unint64_t)v103 >> 3));
      *(_QWORD *)&v103 = v103 + 1;
      sub_236826DB4((uint64_t)v31, (v30 - v31) >> 2, (unint64_t *)&v103, (uint64_t)v99);
      v39 = v103;
    }
    v40 = ((v39 + 7) & 0xFFFFFFFFFFFFFFF8) - v39;
    if (v40)
    {
      *(_QWORD *)(*((_QWORD *)&v104 + 1) + (v39 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v104 + 1) + (v39 >> 3));
      v39 = v103 + v40;
      *(_QWORD *)&v103 = v103 + v40;
    }
    v41 = v112;
    if (*((_QWORD *)&v112 + 1) == (_QWORD)v112)
    {
LABEL_50:
      v44 = ((v39 + 7) & 0xFFFFFFFFFFFFFFF8) - v39;
      if (v44)
      {
        *(_QWORD *)(*((_QWORD *)&v104 + 1) + (v39 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v104 + 1) + (v39 >> 3));
        *(_QWORD *)&v103 = v103 + v44;
      }
      sub_2367F14F8((uint64_t)&v144, &v103, 1, (uint64_t)v99);
      sub_2367F16F0(&v103, (unint64_t **)&v112);
      v95 = v16;
      v45 = (unint64_t)v103 >> 3;
      sub_2367E8BBC((size_t *)&v103 + 1, (unint64_t)v103 >> 3);
      v46 = *((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
        v47 = v45;
      else
        v47 = 0;
      v144 = (_QWORD *)v47;
      v145 = v104;
      *((_QWORD *)&v103 + 1) = 0;
      v104 = 0uLL;
      v17 = sub_2368311D8(v97, (unint64_t *)&v144);
      *((_QWORD *)&v145 + 1) = 0;
      v16 = v95;
      if (v46)
      {
        v48 = -*(_QWORD *)(v46 - 24);
        do
          v49 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v49 + v48, &qword_2564313D8));
        free(*(void **)(v46 - 32));
        v31 = v100;
      }
    }
    else
    {
      v42 = 0;
      v43 = 0;
      while (!sub_2368AD3C4(0x800D00000009, 0x808801D00088015, *(_QWORD *)(v41 + v42) >> 3, (uint64_t *)&v103))
      {
        ++v43;
        v41 = v112;
        v42 += 40;
        if (v43 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 3))
        {
          v39 = v103;
          goto LABEL_50;
        }
      }
      v17 = 1;
    }
    goto LABEL_123;
  }
LABEL_130:
  if (v16)
    (*((void (**)(void **))*v16 + 1))(v16);
  v107[0] = off_2507FF4B0;
  v106[0] = (void **)&v111;
  sub_2367D6C0C(v106);
  if (__p)
  {
    v110 = __p;
    operator delete(__p);
  }
  if (v108 < 0)
    operator delete((void *)v107[10]);
  v106[0] = (void **)&v112;
  sub_2367D077C(v106);
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v106[0] = (void **)&v129;
  sub_2368312B8(v106);
  sub_236816F38((uint64_t)&v128);
  v106[0] = (void **)&v121;
  sub_236831328(v106);
  v106[0] = (void **)&v120;
  sub_2367D07F0(v106);
  sub_2367E94EC((uint64_t)v114);
  return v17;
}

void sub_23682ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  uint64_t v30;
  uint64_t v31;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;

  v33 = *(void **)(v31 - 232);
  if (v33)
  {
    *(_QWORD *)(v31 - 224) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v31 - 176);
  if (v34)
  {
    *(_QWORD *)(v31 - 168) = v34;
    operator delete(v34);
  }
  if (__p)
    operator delete(__p);
  if (a28)
  {
    v35 = -*(_QWORD *)(a28 - 24);
    do
      v36 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v36 + v35, &qword_2564313D8));
    free(*(void **)(a28 - 32));
  }
  sub_236816DF8((uint64_t)&a30);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  sub_2367DC598((uint64_t)&STACK[0x590]);
  a30 = (void **)&STACK[0x7D0];
  sub_2367D077C(&a30);
  sub_236831398((uint64_t)&STACK[0x7E8]);
  _Unwind_Resume(a1);
}

uint64_t sub_23682EE84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  v2 = a1 + 4208;
  v3 = sub_2367EEF48(a1);
  *(_WORD *)(v3 + 4208) = 256;
  *(_QWORD *)(v3 + 4264) = 0;
  *(_OWORD *)(v3 + 4216) = 0u;
  *(_OWORD *)(v3 + 4232) = 0u;
  *(_OWORD *)(v3 + 4248) = 0u;
  *(_QWORD *)(v3 + 4272) = 1;
  memcpy((void *)(v3 + 4280), &unk_236922368, 0x108uLL);
  *(_DWORD *)(a1 + 4544) = 1065353216;
  *(_DWORD *)(a1 + 4580) = 0;
  *(_QWORD *)(a1 + 4584) = 0;
  *(_QWORD *)(a1 + 4552) = 0;
  *(_QWORD *)(a1 + 4568) = 0;
  *(_QWORD *)(a1 + 4560) = 0;
  *(_BYTE *)(a1 + 4576) = 0;
  *(_QWORD *)(a1 + 4592) = 0xFFFFFFFF00000003;
  *(_QWORD *)(a1 + 4600) = 0;
  *(_DWORD *)(a1 + 4608) = 0;
  *(_BYTE *)(v2 + 404) = 0;
  *(_DWORD *)(a1 + 4628) = -1;
  *(_WORD *)(a1 + 4632) = -1;
  *(_QWORD *)(a1 + 4616) = -1;
  *(_BYTE *)(a1 + 4624) = -1;
  *(_BYTE *)(v2 + 426) = 0;
  *(_QWORD *)(a1 + 4640) = -1;
  *(_QWORD *)(a1 + 4648) = -1;
  *(_QWORD *)(a1 + 4653) = -1;
  *(_BYTE *)(v2 + 520) = 0;
  *(_DWORD *)(a1 + 4729) = 16843009;
  *(_BYTE *)(a1 + 4733) = 1;
  *(_DWORD *)(a1 + 4736) = 0;
  *(_QWORD *)(a1 + 4744) = 0xFFFFFFLL;
  *(_QWORD *)(a1 + 4752) = 0x1FFFFFFFLL;
  *(_DWORD *)(a1 + 4760) = 1056964608;
  *(_QWORD *)(a1 + 4780) = 0;
  *(_DWORD *)(a1 + 4788) = 0;
  *(_QWORD *)(a1 + 4764) = 0;
  *(_QWORD *)(a1 + 4772) = 0;
  v4 = operator new(0x20uLL);
  *(_QWORD *)(a1 + 4768) = v4;
  *(_QWORD *)(a1 + 4784) = v4 + 2;
  *v4 = xmmword_2369238DC;
  v4[1] = unk_2369238EC;
  *(_QWORD *)(a1 + 4776) = v4 + 2;
  *(_DWORD *)(a1 + 4792) = 1119879168;
  *(_QWORD *)(a1 + 4800) = 32;
  *(_QWORD *)(a1 + 4808) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 4816) = 0x33F8147AELL;
  *(_BYTE *)(v2 + 616) = 0;
  *(_OWORD *)(v2 + 620) = xmmword_2368AF5B0;
  *(_DWORD *)(a1 + 4844) = 2;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_QWORD *)(a1 + 4848) = 0;
  *(_QWORD *)(a1 + 4872) = -1;
  *(_DWORD *)(a1 + 4880) = 256;
  *(_BYTE *)(v2 + 676) = 0;
  *(_BYTE *)(v2 + 680) = 0;
  *(_QWORD *)(a1 + 4896) = -1;
  *(_QWORD *)(a1 + 4904) = 0x42BE0000FFFFFFFFLL;
  *(_QWORD *)(a1 + 4912) = 0x40042A00000;
  *(_BYTE *)(v2 + 712) = 0;
  *(_QWORD *)(a1 + 4924) = -1;
  *(_BYTE *)(v2 + 724) = 0;
  *(_QWORD *)(a1 + 4936) = 0x3F800000BF800000;
  *(_QWORD *)(a1 + 4944) = -1;
  *(_BYTE *)(v2 + 744) = 1;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 5008) = 0u;
  *(_OWORD *)(a1 + 5020) = 0u;
  *(_OWORD *)(a1 + 5040) = 0u;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_OWORD *)(a1 + 5072) = 0u;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_QWORD *)(a1 + 5168) = 0;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_QWORD *)(a1 + 5256) = 0;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_DWORD *)(a1 + 5232) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 5264) = _D0;
  return a1;
}

void sub_23682F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 4248);
  sub_236831328(&a10);
  a10 = (void **)(v10 + 4224);
  sub_2367D07F0(&a10);
  sub_2367E94EC(v10);
  _Unwind_Resume(a1);
}

__n128 sub_23682F11C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v4 = &off_2507FFD98;
  *(_QWORD *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(v4 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(v4 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_OWORD *)(v4 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(v4 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_BYTE *)(v4 + 264) = *(_BYTE *)(a2 + 264);
  result = *(__n128 *)(a2 + 272);
  *(__n128 *)(v4 + 272) = result;
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_23682F26C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v22;
  int v23;
  char v24;
  int v25;
  float v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  float v37;
  unint64_t v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  _DWORD *v69;
  int v70;
  int v72;

  *(_BYTE *)(a7 + 560) = *(_BYTE *)(a5 + 17);
  *(_BYTE *)(a7 + 392) = *(_BYTE *)(a5 + 16);
  *(_BYTE *)(a7 + 400) = *(_BYTE *)a5;
  *(_DWORD *)(a7 + 16) = *(_DWORD *)(a5 + 4);
  std::string::operator=((std::string *)(a7 + 80), (const std::string *)(a5 + 88));
  v14 = *a4;
  *(_QWORD *)(a7 + 112) = *a4;
  *(_DWORD *)(a7 + 4 * (v14 - 1) + 208) = 0;
  if ((_DWORD)v14 != 1)
  {
    v15 = v14 - 1;
    if (v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = a4[3 * v17 + 3];
        *(_DWORD *)(a7 + 4 * v17 + 208) = a4[3 * v17 + 2];
        if (v19 - 2 >= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = ++v18;
        }
        else
        {
          v20 = a7 + 4 * v16;
          *(_DWORD *)(v20 + 120) = v19;
          *(_DWORD *)(v20 + 164) = v18;
          v17 = (v18 + 1);
          v18 = v17;
          if (a4[3 * v17 + 3] < v19)
            *(_DWORD *)(a7 + 116) = ++v16;
        }
      }
      while (v15 > v17);
    }
  }
  if (*(_BYTE *)(a3 + 68))
  {
    *(_DWORD *)(a7 + 12) = 1;
    if (a2 >= 0x191 || a1 >= 0x191)
      v22 = 1;
    else
      v22 = 2;
    if (*(_DWORD *)(a3 + 72) != -1)
      v22 = *(_DWORD *)(a3 + 72);
    *(_DWORD *)(a7 + 64) = v22;
    if (!a6)
    {
      v23 = *(_DWORD *)(a3 + 64);
      *(_DWORD *)(a7 + 32) = v23;
LABEL_20:
      v24 = 1;
      goto LABEL_25;
    }
  }
  else if (!a6)
  {
    v23 = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(a7 + 32) = v23;
    if (*(_BYTE *)(a7 + 60))
      return 1;
    result = 1;
    if (*(_BYTE *)(a7 + 61))
      return result;
    goto LABEL_20;
  }
  *(_DWORD *)(a7 + 12) = 0;
  *(_QWORD *)(a7 + 68) = 0x200000002;
  if (sub_23686B498(a6[18], a6[19], a7 + 40) || sub_23686B630(a6, (int *)(a7 + 32)))
    return 1;
  v24 = 0;
  v23 = *(_DWORD *)(a7 + 32);
LABEL_25:
  if (v23 != 2 && (*(_BYTE *)(a7 + 60) || *(_BYTE *)(a7 + 61)))
    return 1;
  v25 = *(unsigned __int8 *)(a3 + 77);
  if (*(_BYTE *)(a3 + 77))
  {
    if (v25 == 1)
    {
      v26 = *(float *)(a3 + 192);
LABEL_39:
      v28 = 1;
      goto LABEL_40;
    }
    LOBYTE(v25) = *(float *)a3 >= 99.0;
  }
  v26 = *(float *)(a3 + 192);
  if ((v25 & 1) != 0 || v26 > 0.0 || *(_QWORD *)(a3 + 424) - *(_QWORD *)(a3 + 416) == 32)
    goto LABEL_39;
  v28 = 0;
LABEL_40:
  v29 = *(_DWORD *)(a3 + 112);
  v30 = *(unsigned __int8 *)(a3 + 68);
  if (*(_BYTE *)(a3 + 68))
    v31 = 1;
  else
    v31 = v29 <= 0;
  v32 = v28 | 0x20;
  if (v31)
    v32 = v28;
  *(_QWORD *)(a7 + 24) = v32;
  v33 = *(_DWORD *)(a7 + 12);
  if (v33 && v26 == 0.0)
  {
    if (*(_QWORD *)(a3 + 416) == *(_QWORD *)(a3 + 424))
      *(_QWORD *)(a7 + 24) = v32 & 0x20;
    v34 = 0;
    v35 = *(unsigned __int8 *)(a3 + 80);
  }
  else
  {
    v34 = 0;
    v35 = *(unsigned __int8 *)(a3 + 80);
    if (!v33 && *(int *)(a3 + 48) <= 5)
      v34 = *(_QWORD *)(a3 + 56) < 4uLL;
  }
  if (v35 == 1)
  {
    v34 = 1;
  }
  else if (!v35)
  {
    v34 = 0;
  }
  *(_BYTE *)(a7 + 425) = v34;
  v36 = *(_DWORD *)(a3 + 84);
  if (v36 != -1)
  {
    *(_DWORD *)(a7 + 452) = v36;
    goto LABEL_60;
  }
  *(_DWORD *)(a7 + 452) = 0;
  if (v33 != 1)
  {
    v38 = *(_QWORD *)(a3 + 56);
    v39 = v38 == 2;
    if (v38 > 2)
      goto LABEL_79;
    v40 = 0;
    v41 = v39;
    v42 = *(float *)a3;
    v43 = 4 * v41;
    do
    {
      if (v42 >= *(float *)&a333[v43])
        *(_DWORD *)(a7 + 452) = ++v40;
      v43 += 4;
    }
    while (v43 != 12);
LABEL_60:
    if (v33 != 1)
      goto LABEL_79;
  }
  if (!v30 || (sub_23682B8B4(a3) & 1) == 0)
  {
    v37 = *(float *)a3;
    if (*(float *)a3 < 1.0)
      v37 = 1.0;
    *(float *)(a7 + 536) = v37;
  }
  if (*(_BYTE *)(a3 + 376))
    *(_DWORD *)(a7 + 536) = 1065353216;
LABEL_79:
  v44 = *(_DWORD *)(a5 + 8);
  *(_DWORD *)(a7 + 404) = v44;
  if (v44 > 2)
    return 1;
  if (v29 >= 1)
  {
    result = 1;
    if (*(_DWORD *)(a3 + 384) != 1 || *(_DWORD *)(a3 + 380) != 1)
      return result;
    v45 = (int *)(a3 + 384);
    v46 = 1;
    v47 = 1;
    goto LABEL_86;
  }
  v47 = *(_DWORD *)(a3 + 380);
  v57 = v47 - 1;
  if ((v47 - 1) > 7 || ((0x8Bu >> v57) & 1) == 0)
    return 1;
  v58 = *(_DWORD *)(a3 + 384);
  result = 1;
  if (v58 <= 8 && ((1 << v58) & 0x116) != 0)
  {
    v46 = dword_236922628[v57];
    v45 = (int *)(a3 + 384);
LABEL_86:
    if (*(_DWORD *)(a5 + 4) != 1)
    {
      v48 = *(_QWORD *)(a5 + 48);
      *(_QWORD *)(a7 + 296) = v48;
      if (!*(_BYTE *)(a3 + 388))
        v46 = 1;
      v49 = v46 * a1;
      *(_DWORD *)(a7 + 260) = v49;
      v50 = v46 * a2;
      *(_DWORD *)(a7 + 264) = v50;
      if (v48 || sub_2367DC3F0(a7) != v49 || sub_2367DC418(a7) != v50)
        *(_BYTE *)(a7 + 256) = 1;
    }
    *(_DWORD *)(a7 + 268) = v47;
    v51 = *(_QWORD *)(a7 + 408);
    *(_QWORD *)(a7 + 280) = *(_QWORD *)(a7 + 272);
    v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v51 + 336) - *(_QWORD *)(v51 + 328)) >> 5);
    v72 = *v45;
    sub_2367CBAC8((char **)(a7 + 272), v52, &v72);
    *(_DWORD *)(a7 + 396) = *(_QWORD *)(a5 + 24);
    v53 = *(unsigned __int8 *)(a5 + 56);
    if (*(_BYTE *)(a5 + 56) || *(_BYTE *)(a7 + 256))
    {
      v54 = *(int *)(a5 + 44);
      if ((_DWORD)v54 == -1)
      {
        v56 = *(_QWORD *)(v51 + 328);
        v55 = *(_QWORD *)(v51 + 336);
        v59 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 5);
        if (v59 < 2)
        {
LABEL_107:
          v54 = 0;
        }
        else
        {
          v54 = 0;
          v60 = 12;
          while (*(_DWORD *)(v56 + v60))
          {
            ++v54;
            v60 += 96;
            if (v59 == v54)
              goto LABEL_107;
          }
        }
      }
      else
      {
        v56 = *(_QWORD *)(v51 + 328);
        v55 = *(_QWORD *)(v51 + 336);
      }
      *(_DWORD *)(a7 + 316) = v54;
      if (v53)
        v61 = *(_DWORD *)(a5 + 60);
      else
        v61 = 0;
      *(_DWORD *)(a7 + 312) = v61;
      *(_DWORD *)(a7 + 324) = *(_QWORD *)(a5 + 32);
      *(_BYTE *)(a7 + 320) = *(_BYTE *)(a5 + 40);
      if (v55 != v56)
      {
        v62 = 0;
        v63 = 0;
        v64 = 12;
        do
        {
          v65 = *(_QWORD *)(a5 + 112);
          v66 = *(_QWORD *)(a7 + 344);
          if (v63 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a5 + 120) - v65) >> 3))
          {
            v69 = (_DWORD *)(v66 + v62);
            v70 = *(_DWORD *)(a5 + 60);
            if (*(_DWORD *)(v56 + v64) != 4 && v54 != v63)
              v70 = 1;
            if (!*(_BYTE *)(a5 + 56))
              v70 = 0;
            v69[2] = v70;
            v69[3] = v54;
            v69[5] = 1;
          }
          else
          {
            v67 = v66 + v62;
            v68 = *(_OWORD *)(v65 + v62 + 8);
            *(_OWORD *)(v67 + 17) = *(_OWORD *)(v65 + v62 + 17);
            *(_OWORD *)(v67 + 8) = v68;
            v56 = *(_QWORD *)(v51 + 328);
            v55 = *(_QWORD *)(v51 + 336);
          }
          ++v63;
          v62 += 40;
          v64 += 96;
        }
        while (v63 < 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 5));
      }
    }
    *(_QWORD *)(a7 + 376) = *(_QWORD *)(a5 + 76);
    result = 0;
    if ((v24 & 1) == 0)
      *(_QWORD *)(a7 + 24) = *(_QWORD *)(a7 + 24) & 0xFFFFFFFFFFFFFF5FLL | 0x80;
  }
  return result;
}

uint64_t sub_23682F854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, __int128 *a10, uint64_t *a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64x2_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t k;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 (*v69)(uint64_t, __n128 *);
  __n128 (*v70)(uint64_t, uint64_t, __n128 *);
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t (*v72)();
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  _BOOL4 v74;
  unsigned int *v75;
  _QWORD *v76;
  uint64_t ii;
  uint64_t jj;
  char v79;
  uint64_t (*v80)();
  uint64_t mm;
  uint64_t m;
  uint64_t n;
  uint64_t j;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v98;
  uint64_t kk;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  unint64_t v113;
  __n128 (*v114)(uint64_t, uint64_t, __n128 *);
  unint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  _BYTE v144[112];
  uint64_t v145;
  _QWORD v146[4];
  _QWORD v147[6];
  _QWORD v148[4];
  _QWORD v149[6];
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153[30];
  _BYTE v154[120];
  unsigned int v155;
  _QWORD v156[4];
  uint64x2_t v157[2];
  __int128 __p;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _BYTE v165[120];
  unsigned int v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  unsigned int v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64x2_t v198;
  unsigned int v199;

  v20 = (char *)(a14 + 4208);
  *(_QWORD *)a14 = a3;
  if (*(_BYTE *)(a14 + 4208))
  {
    sub_2367DC468((uint64x2_t *)(a14 + 8), a8, a9, *(unsigned int *)(a12 + 64), 0, 0, *(_DWORD *)(a12 + 12) == 1, 1uLL);
  }
  else
  {
    sub_2367DC34C(v157, a12);
    v21 = v160;
    *(_OWORD *)(a14 + 88) = v161;
    v22 = v163;
    *(_OWORD *)(a14 + 104) = v162;
    *(_OWORD *)(a14 + 120) = v22;
    *(_OWORD *)(a14 + 136) = v164;
    v23 = v157[0];
    *(uint64x2_t *)(a14 + 24) = v157[1];
    v24 = v159;
    *(_OWORD *)(a14 + 40) = __p;
    *(_OWORD *)(a14 + 56) = v24;
    *(_OWORD *)(a14 + 72) = v21;
    *(uint64x2_t *)(a14 + 8) = v23;
  }
  *(_QWORD *)(a14 + 1256) = a14;
  sub_2367C2DE4((uint64_t)&v194, *(_QWORD *)(a14 + 72), *(_QWORD *)(a14 + 80));
  v25 = v199;
  if (v199)
    return v25;
  v130 = a1;
  *(_OWORD *)(a14 + 152) = v194;
  v26 = v196;
  v196 = 0;
  v27 = v197;
  v157[0] = v198;
  v28 = *(_QWORD *)(a14 + 176);
  *(_QWORD *)(a14 + 168) = v195;
  *(_QWORD *)(a14 + 176) = v26;
  if (v28)
  {
    v29 = -*(_QWORD *)(v28 - 24);
    do
      v30 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v30 + v29, &qword_2564313D8));
    free(*(void **)(v28 - 32));
  }
  *(_QWORD *)(a14 + 184) = v27;
  *(uint64x2_t *)(a14 + 192) = v157[0];
  sub_2367DA410((uint64_t)&v189, *(_QWORD *)(a14 + 72), *(_QWORD *)(a14 + 80));
  v25 = v193;
  if (!v193)
  {
    *(_OWORD *)(a14 + 1024) = v189;
    v31 = v191;
    *(_QWORD *)(a14 + 1040) = v190;
    v191 = 0;
    v32 = v192;
    v33 = *(_QWORD *)(a14 + 1048);
    *(_QWORD *)(a14 + 1048) = v31;
    if (v33)
    {
      v34 = -*(_QWORD *)(v33 - 24);
      do
        v35 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v35 + v34, &qword_2564313D8));
      free(*(void **)(v33 - 32));
    }
    *(_QWORD *)(a14 + 1056) = v32;
    sub_2367C2E38((uint64_t)&v184, *(_QWORD *)(a14 + 72), *(_QWORD *)(a14 + 80));
    v25 = v188;
    if (v188)
      goto LABEL_122;
    v36 = v186;
    *(_QWORD *)(a14 + 1080) = v185;
    *(_OWORD *)(a14 + 1064) = v184;
    v186 = 0;
    v37 = v187;
    v38 = *(_QWORD *)(a14 + 1088);
    *(_QWORD *)(a14 + 1088) = v36;
    if (v38)
    {
      v39 = -*(_QWORD *)(v38 - 24);
      do
        v40 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v40 + v39, &qword_2564313D8));
      free(*(void **)(v38 - 32));
    }
    *(_QWORD *)(a14 + 1096) = v37;
    sub_2367C4420((uint64_t)&v172, *(_QWORD *)(a14 + 8), *(_QWORD *)(a14 + 16), 1);
    v25 = v183;
    if (v183)
      goto LABEL_117;
    *(_OWORD *)(a14 + 1104) = v172;
    v41 = v174;
    *(_QWORD *)(a14 + 1120) = v173;
    v42 = v175;
    v125 = v178;
    v174 = 0;
    v178 = 0;
    v127 = v179;
    sub_2367C5200((uint64_t *)(a14 + 1128), v41);
    *(_QWORD *)(a14 + 1136) = v42;
    *(_OWORD *)(a14 + 1144) = v176;
    *(_QWORD *)(a14 + 1160) = v177;
    sub_2367C5200((uint64_t *)(a14 + 1168), v125);
    *(_QWORD *)(a14 + 1176) = v127;
    *(_QWORD *)(a14 + 1216) = v182;
    v43 = v180;
    *(_OWORD *)(a14 + 1200) = v181;
    *(_OWORD *)(a14 + 1184) = v43;
    *(_QWORD *)(a14 + 1560) = 393984;
    if (!*(_DWORD *)(a12 + 12))
      sub_2367C5284((char **)(a14 + 1568), 393984 * *(unsigned int *)(a12 + 112));
    sub_2367C2E38((uint64_t)&v167, *(_QWORD *)(a14 + 72), *(_QWORD *)(a14 + 80));
    v25 = v171;
    if (v171)
    {
LABEL_117:
      sub_23680320C((uint64_t)&v172);
      if (!v188)
      {
        v88 = v186;
        v186 = 0;
        if (v88)
        {
          v89 = -*(_QWORD *)(v88 - 24);
          do
            v90 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v90 + v89, &qword_2564313D8));
          free(*(void **)(v88 - 32));
        }
      }
LABEL_122:
      if (!v193)
      {
        v91 = v191;
        v191 = 0;
        if (v91)
        {
          v92 = -*(_QWORD *)(v91 - 24);
          do
            v93 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v93 + v92, &qword_2564313D8));
          free(*(void **)(v91 - 32));
        }
      }
      goto LABEL_127;
    }
    v44 = v169;
    *(_QWORD *)(a14 + 1608) = v168;
    *(_OWORD *)(a14 + 1592) = v167;
    v169 = 0;
    v45 = v170;
    sub_2367C5200((uint64_t *)(a14 + 1616), v44);
    *(_QWORD *)(a14 + 1624) = v45;
    sub_2367CA770((uint64_t)v165, *(_QWORD *)(a14 + 72), *(_QWORD *)(a14 + 80));
    v25 = v166;
    if (v166)
    {
LABEL_112:
      if (!v171)
      {
        v85 = v169;
        v169 = 0;
        if (v85)
        {
          v86 = -*(_QWORD *)(v85 - 24);
          do
            v87 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v87 + v86, &qword_2564313D8));
          free(*(void **)(v85 - 32));
        }
      }
      goto LABEL_117;
    }
    v117 = (uint64_t *)(a14 + 8);
    sub_2367CA9E4((uint64_t)v157, (uint64_t)v165);
    sub_2367D086C(a14 + 1632, (uint64_t)v157);
    for (i = 13; i != -2; i -= 5)
      sub_2367C2F38(&v157[0].i64[i]);
    *(_QWORD *)(a14 + 1752) = a14 + 1632;
    v48 = *(_QWORD *)(a3 + 328);
    v47 = *(_QWORD *)(a3 + 336);
    if (v48 == v47)
    {
      v50 = 0;
LABEL_35:
      v120 = 0;
    }
    else
    {
      v49 = *(_QWORD *)(a3 + 328);
      v50 = v49;
      do
      {
        if (!*(_DWORD *)(v50 + 12))
          goto LABEL_31;
        v50 += 96;
      }
      while (v50 != v47);
      v50 = 0;
LABEL_31:
      while (*(_DWORD *)(v49 + 12) != 4)
      {
        v49 += 96;
        if (v49 == v47)
          goto LABEL_35;
      }
      v120 = v49;
    }
    v122 = *(unsigned int *)(a3 + 320);
    sub_236831B48((uint64_t)v157, a3 + 48);
    v126 = v50;
    v51 = *v20;
    v52 = *(_QWORD *)a4;
    v53 = *(_QWORD *)(a4 + 8);
    v156[0] = a6;
    v156[1] = a7;
    v156[2] = a8;
    v156[3] = a9;
    if (a6 >= 8 * v51)
      v54 = a6 - 8 * v51;
    else
      v54 = 0;
    if (a7 >= 8 * v51)
      v55 = a7 - 8 * v51;
    else
      v55 = 0;
    if (a8 + a6 + 8 * v51 < v52)
      v52 = a8 + a6 + 8 * v51;
    v56 = a9 + a7 + 8 * v51;
    if (v56 >= v53)
      v56 = v53;
    v118 = v55;
    v119 = v54;
    v128 = v56 - v55;
    v129 = v52 - v54;
    sub_2367CA770((uint64_t)v154, (v52 - v54 + 7) & 0xFFFFFFF8, (v56 - v55 + 7) & 0xFFFFFFF8);
    v25 = v155;
    if (v155)
    {
LABEL_107:
      v157[0].i64[0] = (uint64_t)&off_2507FFA18;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (!v166)
      {
        for (j = 104; j != -16; j -= 40)
          sub_2367C2F38((uint64_t *)&v165[j]);
      }
      goto LABEL_112;
    }
    v113 = 0xAAAAAAAAAAAAAAABLL * ((v126 - v48) >> 5);
    v115 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v48) >> 5);
    sub_2367CA9E4((uint64_t)v153, (uint64_t)v154);
    for (k = 0; k != 30; k += 10)
    {
      v58 = &v153[k];
      *v58 = v129;
      v58[1] = v128;
    }
    sub_236831C08(&v151, v122);
    v59 = v151;
    v123 = v152;
    v60 = v126;
    if (v151 != v152)
    {
      while (1)
      {
        sub_2367C431C((uint64_t)&v138, v129, v128);
        v25 = v142;
        if (v142)
          goto LABEL_102;
        v61 = v140;
        v62 = v141;
        v140 = 0;
        *(_OWORD *)v59 = v138;
        *(_QWORD *)(v59 + 16) = v139;
        sub_2367C5200((uint64_t *)(v59 + 24), v61);
        *(_QWORD *)(v59 + 32) = v62;
        v60 = v126;
        if (!v142)
        {
          v63 = v140;
          v140 = 0;
          if (v63)
          {
            v64 = -*(_QWORD *)(v63 - 24);
            do
              v65 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v65 + v64, &qword_2564313D8));
            free(*(void **)(v63 - 32));
          }
        }
        v59 += 40;
        if (v59 == v123)
        {
          v59 = v151;
          break;
        }
      }
    }
    if (v60)
      v66 = (unsigned int *)(v59 + 40 * v113);
    else
      v66 = 0;
    v67 = v59 + 40 * v115;
    if (!v120)
      v67 = 0;
    v121 = v67;
    v150 = 0;
    if (*(_BYTE *)(a4 + 64))
    {
      v68 = *(_QWORD *)(a4 + 16);
      v69 = *(__n128 (**)(uint64_t, __n128 *))(a4 + 24);
      v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(a4 + 32);
      v70 = *(__n128 (**)(uint64_t, uint64_t, __n128 *))(a4 + 40);
      v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(a4 + 48);
      v72 = *(uint64_t (**)())(a4 + 56);
    }
    else
    {
      v72 = nullsub_27;
      v73 = sub_236831D30;
      v70 = sub_236831D10;
      v71 = sub_236831CE4;
      v68 = a4;
      v69 = sub_236831CCC;
    }
    v124 = v66;
    if (*(_BYTE *)(a4 + 368))
    {
      v74 = 0;
    }
    else
    {
      v111 = v68;
      v112 = v71;
      v149[0] = v68;
      v149[1] = v69;
      v149[2] = v71;
      v114 = v70;
      v116 = v73;
      v149[3] = v70;
      v149[4] = v73;
      v80 = v72;
      v149[5] = v72;
      v148[0] = v119;
      v148[1] = v118;
      v148[2] = v129;
      v148[3] = v128;
      v25 = sub_236831D7C(v149, v148, a2, a3, a11, v153, v66, &v150);
      if ((_DWORD)v25)
        goto LABEL_102;
      v74 = v150;
      v72 = v80;
      v70 = v114;
      v73 = v116;
      v68 = v111;
      v71 = v112;
    }
    v147[0] = v68;
    v147[1] = v69;
    v147[2] = v71;
    v147[3] = v70;
    v147[4] = v73;
    v147[5] = v72;
    v146[0] = v119;
    v146[1] = v118;
    v146[2] = v129;
    v146[3] = v128;
    v25 = sub_236832064(v147, v146, a2, a3, v74, a11, &v151);
    if ((_DWORD)v25)
    {
LABEL_102:
      *(_QWORD *)&v138 = &v151;
      sub_2367D077C((void ***)&v138);
      for (m = 26; m != -4; m -= 10)
        sub_2367C2F38((uint64_t *)&v153[m]);
      if (!v155)
      {
        for (n = 104; n != -16; n -= 40)
          sub_2367C2F38((uint64_t *)&v154[n]);
      }
      goto LABEL_107;
    }
    *(_QWORD *)(a14 + 1256) = a14;
    sub_23682B940(a14 + 4544, v130);
    v75 = 0;
    v145 = 0;
    memset(v144, 0, sizeof(v144));
    v76 = a5;
    if (!a5)
    {
      v75 = 0;
      if (!*(_DWORD *)(a12 + 32) && *(_BYTE *)(a2 + 1))
      {
        v75 = 0;
        if (!*(_DWORD *)(a12 + 12) && *(int *)(v130 + 48) <= 2)
        {
          sub_2367CA770((uint64_t)&v138, v129, v128);
          v25 = v143;
          if (v143)
            goto LABEL_100;
          sub_2367CA9E4((uint64_t)&v135, (uint64_t)&v138);
          sub_2367D086C((uint64_t)v144, (uint64_t)&v135);
          for (ii = 104; ii != -16; ii -= 40)
            sub_2367C2F38((uint64_t *)((char *)&v135 + ii));
          if (!v143)
          {
            for (jj = 104; jj != -16; jj -= 40)
              sub_2367C2F38((uint64_t *)((char *)&v138 + jj));
          }
          v75 = (unsigned int *)v144;
        }
        sub_23685C490((uint64_t)v157, v121, a11, v153, a10, v75, *(float *)(a3 + 300));
      }
      if (*(_BYTE *)(v130 + 68))
        v79 = sub_23682B8B4(v130);
      else
        v79 = 0;
      if (v124)
      {
        if (!*(_BYTE *)(v126 + 72)
          && !*(_DWORD *)(a12 + 16)
          && !*(_BYTE *)(v130 + 116)
          && *(_DWORD *)(v130 + 384) == *(_DWORD *)(v130 + 380))
        {
          sub_2368322A4(v153, *((_QWORD *)v124 + 2), *((_QWORD *)v124 + 3), v79);
          if (v75)
            sub_2368322A4(v75, *((_QWORD *)v124 + 2), *((_QWORD *)v124 + 3), v79);
        }
      }
      sub_2368AE91C(v153);
      v76 = 0;
    }
    v135 = a6 - v119;
    v136 = a7 - v118;
    *(_QWORD *)&v137 = (a8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)&v137 + 1) = (a9 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (!v76 && *(_BYTE *)(a14 + 4209))
      sub_2368324BC(v130, v153, (uint64_t *)&v135, (_DWORD *)a12);
    sub_2368327D4(v130, *v20, v76 != 0, v153, *(_QWORD *)(a14 + 8), *(_QWORD *)(a14 + 16), a12, (_OWORD *)(a14 + 1224));
    v25 = sub_236833588(*(_DWORD *)(v130 + 48), *(_BYTE *)(v130 + 388), a12, v76 != 0, v153);
    if (!(_DWORD)v25)
    {
      if (*(_DWORD *)(v130 + 384) != 1 && !*(_BYTE *)(v130 + 388))
      {
        v98 = v151;
        for (kk = v152; v98 != kk; v98 += 40)
        {
          sub_2368AEA5C((uint64_t)&v138, (unsigned int *)v98, *(int *)(v130 + 384));
          v25 = v142;
          if (v142)
            goto LABEL_100;
          v100 = v140;
          v101 = v141;
          v140 = 0;
          *(_OWORD *)v98 = v138;
          *(_QWORD *)(v98 + 16) = v139;
          sub_2367C5200((uint64_t *)(v98 + 24), v100);
          *(_QWORD *)(v98 + 32) = v101;
          if (!v142)
          {
            v102 = v140;
            v140 = 0;
            if (v102)
            {
              v103 = -*(_QWORD *)(v102 - 24);
              do
                v104 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v104 + v103, &qword_2564313D8));
              free(*(void **)(v102 - 32));
            }
          }
        }
      }
      if (!*v20)
      {
        v135 = 0;
        v136 = 0;
        *(_QWORD *)&v105 = v153[0];
        *((_QWORD *)&v105 + 1) = v153[1];
        v137 = v105;
      }
      v106 = v130;
      if (*(_DWORD *)(a12 + 12))
        goto LABEL_174;
      sub_236834CF0((int64x2_t *)(a14 + 5184), *(_QWORD *)(a14 + 4272));
      v108 = *(_QWORD *)(a14 + 5184);
      v109 = *(_QWORD *)(a14 + 5192);
      while (v108 != v109)
      {
        sub_23681D030(v108, *(_QWORD *)(a14 + 120));
        v108 += 176;
      }
      v110 = a5
           ? sub_236834FC0(a5, a12, (uint64_t)a11, a13, a14)
           : sub_23683640C(a12, v75, v153, &v135, a10, a11, a13, a14, a16);
      v106 = v130;
      v25 = v110;
      if (!(_DWORD)v110)
      {
        sub_236837C1C(a14, v117);
        if (!*v20)
        {
          *(_QWORD *)(a14 + 4200) = 1;
          sub_2367D7BB0((char **)(a14 + 5208), *(_QWORD *)(a14 + 120));
        }
        v25 = sub_236838594((char **)a12, (uint64_t)a11, a14);
        if (!(_DWORD)v25)
        {
LABEL_174:
          if (!*(_BYTE *)(v106 + 68) && v151 == v152
            || (v25 = sub_236849550((uint64_t)a13, a12, a3, v153, &v151, (uint64_t)&v135, v117, v156, a14, (uint64_t)a10, a11, (int)a16, SHIDWORD(a16), *(_BYTE *)(v106 + 68) != 0), !(_DWORD)v25))
          {
            if (*v20)
              goto LABEL_150;
            if (*(int *)(v130 + 48) >= 1
              && sub_23682B8B4(v130)
              && !*(_DWORD *)(v130 + 352)
              && *(_QWORD *)(v130 + 464) == *(_QWORD *)(v130 + 472)
              || (v25 = sub_23684E228(a13, (uint64_t)a11), !(_DWORD)v25)
              && (v25 = sub_236850B64((uint64_t)a13, (char **)a11), !(_DWORD)v25))
            {
              *(_QWORD *)(a12 + 24) = *(_QWORD *)(a12 + 24) & 0xFFFFFFFFFFFFFFEDLL | (2
                                                                                    * (*(_QWORD *)(a14 + 1264) != *(_QWORD *)(a14 + 1272))) | (16 * (*(_QWORD *)(a14 + 1440) != *(_QWORD *)(a14 + 1448)));
LABEL_150:
              v25 = sub_236838650(a12, a14, a13, (uint64_t)a11, a15, (uint64_t)a16);
              if (!(_DWORD)v25)
              {
                if (*v20)
                {
                  v107 = *(_QWORD *)(a14 + 4216);
                  LODWORD(v138) = 1;
                  *((_QWORD *)&v138 + 1) = 0;
                  v139 = v107;
                  v140 = 0;
                  sub_23685107C(a13, (uint64_t)&v138);
                  LODWORD(v138) = 3;
                  *((_QWORD *)&v138 + 1) = 0;
                  v139 = v107;
                  v140 = 0;
                  sub_23685107C(a13, (uint64_t)&v138);
                  sub_236851178(a13);
                }
                v25 = 0;
              }
            }
          }
        }
      }
    }
LABEL_100:
    for (mm = 104; mm != -16; mm -= 40)
      sub_2367C2F38((uint64_t *)&v144[mm]);
    goto LABEL_102;
  }
LABEL_127:
  if (!v199)
  {
    v94 = v196;
    v196 = 0;
    if (v94)
    {
      v95 = -*(_QWORD *)(v94 - 24);
      do
        v96 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v96 + v95, &qword_2564313D8));
      free(*(void **)(v94 - 32));
    }
  }
  return v25;
}

void sub_236830650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  void *v74;
  uint64_t m;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a69 + i));
  a53 = (uint64_t)&STACK[0x300];
  sub_2367D077C((void ***)&a53);
  for (j = 104; j != -16; j -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x318] + j));
  if (!LODWORD(STACK[0x408]))
  {
    for (k = 104; k != -16; k -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x390] + k));
  }
  STACK[0x430] = (unint64_t)&off_2507FFA18;
  v74 = (void *)STACK[0x450];
  if (STACK[0x450])
  {
    STACK[0x458] = (unint64_t)v74;
    operator delete(v74);
  }
  if (!LODWORD(STACK[0x578]))
  {
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x500] + m));
  }
  if (!LODWORD(STACK[0x5A8]))
  {
    v76 = STACK[0x598];
    STACK[0x598] = 0;
    if (v76)
    {
      v77 = -*(_QWORD *)(v76 - 24);
      do
        v78 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v78 + v77, &qword_2564313D8));
      free(*(void **)(v76 - 32));
    }
  }
  sub_23680320C((uint64_t)&STACK[0x5B0]);
  if (!*(_DWORD *)(v69 - 216))
  {
    v79 = *(_QWORD *)(v69 - 232);
    *(_QWORD *)(v69 - 232) = 0;
    if (v79)
    {
      v80 = -*(_QWORD *)(v79 - 24);
      do
        v81 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v81 + v80, &qword_2564313D8));
      free(*(void **)(v79 - 32));
    }
  }
  if (!*(_DWORD *)(v69 - 168))
  {
    v82 = *(_QWORD *)(v69 - 184);
    *(_QWORD *)(v69 - 184) = 0;
    if (v82)
    {
      v83 = -*(_QWORD *)(v82 - 24);
      do
        v84 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v84 + v83, &qword_2564313D8));
      free(*(void **)(v82 - 32));
    }
  }
  if (!*(_DWORD *)(v69 - 104))
  {
    v85 = *(_QWORD *)(v69 - 136);
    *(_QWORD *)(v69 - 136) = 0;
    if (v85)
    {
      v86 = -*(_QWORD *)(v85 - 24);
      do
        v87 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v87 + v86, &qword_2564313D8));
      free(*(void **)(v85 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_236830860(uint64_t result, unsigned int *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  unsigned int *v6;
  unsigned int *v7;
  _QWORD ***v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  _QWORD **v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD **v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  BOOL v51;
  char v52;
  _QWORD **v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  _QWORD **v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  _QWORD **v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  _QWORD **v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  _QWORD **v94;
  unsigned int *v95;
  _QWORD **v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int *v101;
  unint64_t v102;
  _QWORD **v104;
  unsigned int *v105;
  int64_t v106;
  _QWORD **v107;
  uint64_t v109;
  int64_t v110;
  unsigned int v111;
  unsigned int *v113;

  v113 = (unsigned int *)result;
LABEL_2:
  v7 = a2;
  v6 = v113;
  v105 = a2 - 1;
  v8 = a3;
  while (2)
  {
    v9 = (char *)v7 - (char *)v6;
    v10 = v7 - v6;
    v113 = v6;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v39 = *v105;
        v40 = *v6;
        result = sub_236831610(*a3, *v105, *v6);
        if ((_DWORD)result)
        {
          *v6 = v39;
          *v105 = v40;
        }
        return result;
      case 3uLL:
        return sub_236831750(v6, v6 + 1, v105, *a3);
      case 4uLL:
        return sub_23683182C(v6, v6 + 1, v6 + 2, v105, a3);
      case 5uLL:
        v41 = v6 + 2;
        v42 = v6 + 3;
        sub_23683182C(v6, v6 + 1, v6 + 2, v6 + 3, a3);
        v43 = *v105;
        v44 = v6[3];
        v45 = *a3;
        result = sub_236831610(*a3, *v105, v44);
        if ((_DWORD)result)
        {
          *v42 = v43;
          *v105 = v44;
          v46 = *v42;
          v47 = *v41;
          result = sub_236831610(v45, *v42, *v41);
          if ((_DWORD)result)
          {
            *v41 = v46;
            *v42 = v47;
            v48 = v6[1];
            result = sub_236831610(v45, v46, v48);
            if ((_DWORD)result)
            {
              v6[1] = v46;
              v6[2] = v48;
              v49 = *v6;
              result = sub_236831610(v45, v46, *v6);
              if ((_DWORD)result)
              {
                *v6 = v46;
                v6[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 95)
        {
          v50 = v6 + 1;
          v51 = v6 == v7 || v50 == v7;
          v52 = v51;
          if ((a5 & 1) != 0)
          {
            if ((v52 & 1) == 0)
            {
              v53 = *a3;
              v54 = 4;
              v55 = v6;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v50;
                result = sub_236831610(v53, v56, v57);
                if ((_DWORD)result)
                {
                  v58 = *a3;
                  v59 = v54;
                  while (1)
                  {
                    *(unsigned int *)((char *)v113 + v59) = v57;
                    v60 = v59 - 4;
                    if (v59 == 4)
                      break;
                    v57 = *(unsigned int *)((char *)v113 + v59 - 8);
                    result = sub_236831610(v58, v56, v57);
                    v59 = v60;
                    if ((result & 1) == 0)
                    {
                      v61 = (unsigned int *)((char *)v113 + v60);
                      goto LABEL_77;
                    }
                  }
                  v61 = v113;
LABEL_77:
                  *v61 = v56;
                }
                v50 = v55 + 1;
                v54 += 4;
              }
              while (v55 + 1 != a2);
            }
          }
          else if ((v52 & 1) == 0)
          {
            v97 = *a3;
            do
            {
              v99 = *v113;
              v98 = v113[1];
              v100 = v50;
              result = sub_236831610(v97, v98, *v113);
              if ((_DWORD)result)
              {
                v101 = v100;
                do
                {
                  *v101 = v99;
                  v99 = *(v101 - 2);
                  result = sub_236831610(v97, v98, v99);
                  --v101;
                }
                while ((result & 1) != 0);
                *v101 = v98;
              }
              v113 = v100;
              v50 = v100 + 1;
            }
            while (v100 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v6 != v7)
          {
            v102 = (char *)v7 - (char *)v6;
            v62 = *a3;
            v110 = (v10 - 2) >> 1;
            v63 = v110;
            v104 = *a3;
            do
            {
              v64 = v63;
              if (v110 >= v63)
              {
                v65 = (2 * v63) | 1;
                v66 = &v6[v65];
                v67 = *v66;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  v68 = v66[1];
                  if (sub_236831610(v62, *v66, v68))
                  {
                    v67 = v68;
                    ++v66;
                    v65 = 2 * v64 + 2;
                  }
                }
                v69 = &v6[v64];
                v70 = *v69;
                result = sub_236831610(v62, v67, *v69);
                if ((result & 1) == 0)
                {
                  v106 = v64;
                  v71 = *a3;
                  v72 = v70;
                  do
                  {
                    v73 = v66;
                    *v69 = v67;
                    if (v110 < v65)
                      break;
                    v74 = (2 * v65) | 1;
                    v66 = &v113[v74];
                    v75 = 2 * v65 + 2;
                    v67 = *v66;
                    if (v75 < (uint64_t)v10)
                    {
                      v76 = v66[1];
                      if (sub_236831610(v71, *v66, v76))
                      {
                        v67 = v76;
                        ++v66;
                        v74 = v75;
                      }
                    }
                    result = sub_236831610(v71, v67, v72);
                    v69 = v73;
                    v65 = v74;
                  }
                  while (!(_DWORD)result);
                  *v73 = v72;
                  v6 = v113;
                  v62 = v104;
                  v64 = v106;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v77 = v102 >> 2;
            v107 = *a3;
            do
            {
              v78 = 0;
              v79 = v113;
              v111 = *v113;
              v80 = *a3;
              do
              {
                v81 = &v79[v78];
                v84 = v81[1];
                v83 = v81 + 1;
                v82 = v84;
                v85 = (2 * v78) | 1;
                v86 = 2 * v78 + 2;
                if (v86 < v77)
                {
                  v87 = v83[1];
                  result = sub_236831610(v80, v82, v87);
                  if ((_DWORD)result)
                  {
                    v82 = v87;
                    ++v83;
                    v85 = v86;
                  }
                }
                *v79 = v82;
                v79 = v83;
                v78 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              v88 = a2 - 1;
              v51 = v83 == --a2;
              if (v51)
              {
                *v83 = v111;
              }
              else
              {
                *v83 = *v88;
                *v88 = v111;
                v89 = (char *)v83 - (char *)v113 + 4;
                if (v89 >= 5)
                {
                  v90 = (((unint64_t)v89 >> 2) - 2) >> 1;
                  v91 = &v113[v90];
                  v92 = *v91;
                  v93 = *v83;
                  result = sub_236831610(v107, *v91, *v83);
                  if ((_DWORD)result)
                  {
                    v94 = *a3;
                    do
                    {
                      v95 = v91;
                      *v83 = v92;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = &v113[v90];
                      v92 = *v91;
                      result = sub_236831610(v94, *v91, v93);
                      v83 = v95;
                    }
                    while ((result & 1) != 0);
                    *v95 = v93;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return result;
        }
        v11 = &v6[v10 >> 1];
        v12 = *v8;
        if ((unint64_t)v9 < 0x201)
        {
          sub_236831750(&v6[v10 >> 1], v6, v105, v12);
        }
        else
        {
          sub_236831750(v6, &v6[v10 >> 1], v105, v12);
          sub_236831750(v6 + 1, v11 - 1, a2 - 2, *v8);
          sub_236831750(v6 + 2, &v6[(v10 >> 1) + 1], a2 - 3, *v8);
          sub_236831750(v11 - 1, &v6[v10 >> 1], &v6[(v10 >> 1) + 1], *v8);
          v13 = *v6;
          *v6 = *v11;
          *v11 = v13;
        }
        v109 = a4 - 1;
        v14 = *v6;
        v15 = *v8;
        v16 = v6;
        if ((a5 & 1) == 0)
        {
          v16 = v6;
          if (!sub_236831610(*v8, *(v6 - 1), *v6))
          {
            result = sub_236831610(v15, v14, *v105);
            if ((result & 1) != 0)
            {
              v8 = a3;
              a4 = v109;
              do
              {
                v30 = v6[1];
                ++v6;
                result = sub_236831610(v15, v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v6 + 1;
              v8 = a3;
              a4 = v109;
              do
              {
                v6 = v31;
                if (v31 >= v7)
                  break;
                ++v31;
                result = sub_236831610(v15, v14, *v6);
              }
              while (!(_DWORD)result);
            }
            v32 = v7;
            if (v6 < v7)
            {
              v32 = v7;
              do
              {
                v33 = *--v32;
                result = sub_236831610(v15, v14, v33);
              }
              while ((result & 1) != 0);
            }
            if (v6 < v32)
            {
              v34 = *v6;
              v35 = *v32;
              do
              {
                *v6 = v35;
                *v32 = v34;
                do
                {
                  v36 = v6[1];
                  ++v6;
                  v34 = v36;
                }
                while (!sub_236831610(v15, v14, v36));
                do
                {
                  v37 = *--v32;
                  v35 = v37;
                  result = sub_236831610(v15, v14, v37);
                }
                while ((result & 1) != 0);
              }
              while (v6 < v32);
            }
            v38 = v6 - 1;
            v7 = a2;
            if (v6 - 1 != v113)
              *v113 = *v38;
            a5 = 0;
            *v38 = v14;
            continue;
          }
        }
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while (sub_236831610(v15, v19, v14));
        v20 = v7;
        if (v17 == v6)
        {
          v20 = v7;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *--v20;
          }
          while (!sub_236831610(v15, v22, v14));
        }
        else
        {
          do
            v21 = *--v20;
          while (!sub_236831610(v15, v21, v14));
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while (sub_236831610(v15, v26, v14));
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while (!sub_236831610(v15, v27, v14));
          }
          while (v24 < v25);
        }
        if (v17 != v6)
          *v6 = *v17;
        *v17 = v14;
        v28 = v16 >= v20;
        a4 = v109;
        v7 = a2;
        v8 = a3;
        if (!v28)
        {
LABEL_30:
          result = sub_236830860(v113, v17, a3, v109, a5 & 1);
          a5 = 0;
          v6 = v17 + 1;
          continue;
        }
        v29 = sub_2368318E8(v6, v17, a3);
        v6 = v17 + 1;
        result = sub_2368318E8(v17 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_236831114(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      sub_2367C3440();
    v4 = (char *)sub_2367DC0A4(a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_2368311C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367D077C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2368311D8(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  size_t v6;
  uint64_t result;
  void *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  void *__dst;
  __int128 v13;
  uint64_t v14;
  unsigned int v15;

  v2 = *a2;
  if (!*a2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = v2 - v5;
    sub_23685C8C8(&__dst, a1, 1uLL, v2 - v5);
    result = v15;
    if (v15)
      break;
    v8 = __dst;
    v9 = (char *)__dst;
    v10 = v13;
    v11 = v14;
    __dst = 0;
    *(_QWORD *)&v13 = 0;
    if ((unint64_t)v10 < v6)
      v6 = v10;
    memcpy(v8, (const void *)(a2[2] + v5), v6);
    v9 += v6;
    *(_QWORD *)&v10 = v10 - v6;
    *((_QWORD *)&v10 + 1) += v6;
    sub_236831498(&v9);
    if (!v15)
      sub_236831498(&__dst);
    v5 += v6;
    if (v5 >= v2)
      return 0;
  }
  return result;
}

void sub_2368312B8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        sub_236831428(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236831328(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_236817268(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_236831398(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 5240);
  if (v2)
  {
    *(_QWORD *)(a1 + 5248) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 5208);
  if (v3)
  {
    *(_QWORD *)(a1 + 5216) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 5184);
  sub_2368312B8(&v5);
  sub_236816F38(a1 + 4544);
  v5 = (void **)(a1 + 4248);
  sub_236831328(&v5);
  v5 = (void **)(a1 + 4224);
  sub_2367D07F0(&v5);
  return sub_2367E94EC(a1);
}

void sub_236831428(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void **)(a1 + 48);
  v5 = (void **)(a1 + 152);
  sub_2367D077C(&v5);
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v5 = v2;
  sub_236817010(&v5);
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = (void **)a1;
  sub_2367D17E4(&v5);
}

_QWORD *sub_236831498(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  void (*v11)(_QWORD);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (*a1)
  {
    v3 = a1[2];
    v2 = a1[3];
    *(_BYTE *)(v2 + 65) = 0;
    v4 = *(_QWORD **)(v2 + 8);
    if (!v4)
      goto LABEL_13;
    v5 = *(_QWORD *)(v2 + 40);
    v6 = (_QWORD *)(v2 + 8);
    do
    {
      v7 = v4[4];
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 == (_QWORD *)(v2 + 8) || v5 < v6[4])
LABEL_13:
      v6 = (_QWORD *)(v2 + 8);
    if (v3)
    {
      v6[5] = v3;
      *(_QWORD *)(v2 + 40) += v3;
      v10 = *(_QWORD **)(v2 + 72);
      if (v10)
      {
        if (v6[6])
        {
          v11 = (void (*)(_QWORD))v10[3];
          if (v11)
          {
            v11(*v10);
            *(_QWORD *)(v2 + 56) = *(_QWORD *)(v2 + 40) - v3;
            while (1)
            {
              v12 = *(_QWORD *)(v2 + 56);
              v13 = *(_QWORD *)(v2 + 40);
              if (v13 <= v12)
                break;
              if ((sub_23685CE7C(v2, (const void *)(v6[8] + v12 - v13 + v3), v13 - v12) & 1) == 0)
                goto LABEL_25;
            }
            sub_2367E8BBC(v6 + 6, 0);
            v6[6] = 0;
          }
        }
        else
        {
          ((void (*)(_QWORD, uint64_t))v10[2])(*v10, v3);
          if (*(_QWORD *)(*(_QWORD *)(v2 + 72) + 24))
            *(_QWORD *)(v2 + 56) += v3;
          else
            sub_23685CCEC((_QWORD *)v2);
        }
      }
    }
    else
    {
      v14 = *(_QWORD *)(v2 + 72);
      if (v14)
        (*(void (**)(_QWORD, _QWORD))(v14 + 16))(*(_QWORD *)v14, 0);
      sub_23685CF20((void **)v2, v6);
    }
  }
LABEL_25:
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

BOOL sub_236831610(_QWORD **a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v20;
  long double v21;
  double v22;
  long double v23;

  v3 = (*a1)[10];
  v4 = (*a1)[16];
  v5 = *a1[1] >> 1;
  v6 = v4 * (a2 % v3) + v5;
  v7 = *a1[2];
  v8 = v6 - v7;
  v9 = *a1[3];
  v10 = v4 * (a2 / v3) + v5 - v9;
  if (v6 - v7 >= 0)
    v11 = v6 - v7;
  else
    v11 = v7 - v6;
  if (v10 >= 0)
    v12 = v4 * (a2 / v3) + v5 - v9;
  else
    v12 = v9 - (v4 * (a2 / v3) + v5);
  if (v11 <= v12)
    v13 = v12;
  else
    v13 = v11;
  v14 = v5 - v7 + a3 % v3 * v4;
  v15 = v5 - v9 + a3 / v3 * v4;
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = -v14;
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = -v15;
  if (v16 <= v17)
    v18 = v17;
  else
    v18 = v16;
  if (v13 < v18)
    return 1;
  v20 = (double)(uint64_t)*a1[4];
  v21 = atan2((double)v15, (double)v14);
  v22 = remainder(v21 + 0.785398163 + v20 * 1.57079633, 6.28318531);
  v23 = atan2((double)v10, (double)v8);
  return remainder(v23 + 0.785398163 + v20 * 1.57079633, 6.28318531) < v22 && v18 >= v13;
}

BOOL sub_236831750(unsigned int *a1, unsigned int *a2, unsigned int *a3, _QWORD **a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  _BOOL8 result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v8 = *a2;
  v9 = *a1;
  v10 = sub_236831610(a4, *a2, *a1);
  v11 = *a3;
  result = sub_236831610(a4, *a3, v8);
  if (v10)
  {
    if (result)
    {
      *a1 = v11;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      v15 = *a3;
      result = sub_236831610(a4, *a3, v9);
      if (!result)
        return result;
      *a2 = v15;
    }
    *a3 = v9;
  }
  else if (result)
  {
    *a2 = v11;
    *a3 = v8;
    v13 = *a2;
    v14 = *a1;
    result = sub_236831610(a4, *a2, *a1);
    if (result)
    {
      *a1 = v13;
      *a2 = v14;
    }
  }
  return result;
}

BOOL sub_23683182C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD ***a5)
{
  unsigned int v10;
  unsigned int v11;
  _QWORD **v12;
  _BOOL8 result;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  sub_236831750(a1, a2, a3, *a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *a5;
  result = sub_236831610(v12, *a4, *a3);
  if (result)
  {
    *a3 = v10;
    *a4 = v11;
    v14 = *a3;
    v15 = *a2;
    result = sub_236831610(v12, *a3, *a2);
    if (result)
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      result = sub_236831610(v12, *a2, *a1);
      if (result)
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_2368318E8(unsigned int *a1, unsigned int *a2, _QWORD ***a3)
{
  _QWORD ***v3;
  unsigned int *v4;
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD **v17;
  _QWORD ***v18;
  _QWORD **v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD **v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;

  v3 = a3;
  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_236831610(*a3, v8, *a1))
      {
        *a1 = v8;
        *(v4 - 1) = v9;
      }
      return 1;
    case 3:
      sub_236831750(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_23683182C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v24 = a1 + 2;
      v25 = a1 + 3;
      sub_23683182C(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v26 = *(v4 - 1);
      v27 = a1[3];
      v28 = *v3;
      if (sub_236831610(v28, v26, v27))
      {
        *v25 = v26;
        *(v4 - 1) = v27;
        v29 = *v25;
        v30 = *v24;
        if (sub_236831610(v28, *v25, *v24))
        {
          *v24 = v29;
          *v25 = v30;
          v31 = a1[1];
          if (sub_236831610(v28, v29, v31))
          {
            a1[1] = v29;
            a1[2] = v31;
            v32 = *a1;
            if (sub_236831610(v28, v29, *a1))
            {
              *a1 = v29;
              a1[1] = v32;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_236831750(a1, a1 + 1, a1 + 2, *a3);
      v11 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v12 = 0;
      v13 = *v3;
      v14 = 12;
      v33 = v4;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (sub_236831610(v13, *v11, v16))
    {
      v17 = v13;
      v18 = v3;
      v19 = *v3;
      v20 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v20) = v16;
        v21 = v20 - 4;
        if (v20 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v20 - 8);
        v22 = sub_236831610(v19, v15, v16);
        v20 = v21;
        if (!v22)
        {
          v23 = (unsigned int *)((char *)a1 + v21);
          goto LABEL_13;
        }
      }
      v23 = a1;
LABEL_13:
      *v23 = v15;
      ++v12;
      v3 = v18;
      v13 = v17;
      v4 = v33;
      if (v12 == 8)
        return v11 + 1 == v33;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == v4)
      return 1;
  }
}

uint64_t sub_236831B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = &off_2507FFA18;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 112) = &off_250800470;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = &off_2507FFCC0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = &off_250800470;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = &off_250800470;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = &off_250800470;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

_QWORD *sub_236831C08(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      sub_2367C3440();
    v4 = (char *)sub_2367DC0A4(a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_236831CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367D077C(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_236831CCC(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  __n128 result;

  v2 = *(__n128 **)(a1 + 376);
  result = v2[1];
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_236831CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t v7;

  v6 = *(uint64_t **)(a1 + 376);
  v7 = v6[9];
  if (v7 == v6[10])
    v7 = *v6;
  *a6 = v6[8];
  return v7 + v6[8] * a3 + v6[7] * a2;
}

__n128 sub_236831D10(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 376) + 96 * a2);
  result = v3[7];
  a3[1].n128_u64[0] = v3[8].n128_u64[0];
  *a3 = result;
  return result;
}

uint64_t sub_236831D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a2 + 1;
  v8 = *(_QWORD *)(a1 + 376);
  v9 = v8 + 96 * (a2 + 1);
  v10 = *(_QWORD *)(v9 + 72);
  if (v10 == *(_QWORD *)(v9 + 80))
    v10 = *(_QWORD *)(v8 + 96 * v7);
  v11 = v8 + 96 * v7;
  *a7 = *(_QWORD *)(v11 + 64);
  return v10 + *(_QWORD *)(v11 + 64) * a4 + *(_QWORD *)(v11 + 56) * a3;
}

uint64_t sub_236831D7C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, unsigned int *a6, unsigned int *a7, BOOL *a8)
{
  BOOL v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v47 = xmmword_236923900;
  v48 = 0;
  ((void (*)(_QWORD, __int128 *))a1[1])(*a1, &v47);
  v17 = (_DWORD)v47 == 2 || (_DWORD)v47 == 4;
  *a8 = v17;
  v18 = *(_DWORD *)(a3 + 64);
  if (v18 == 2)
  {
    v19 = *(_DWORD *)(a3 + 68);
  }
  else if (v18 == 1)
  {
    v19 = *(_DWORD *)(a4 + 28);
  }
  else if (v18 || DWORD1(v47) >= 6)
  {
    v19 = 0;
  }
  else
  {
    v19 = dword_236922648[DWORD1(v47)];
  }
  v46 = 0;
  v20 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *))a1[2])(*a1, *a2, a2[1], a2[2], a2[3], &v46);
  v51[0] = &off_2507FD720;
  v51[1] = a1;
  v52 = v51;
  v49 = v20;
  sub_23683CE10((uint64_t)&v50, (uint64_t)v51);
  v21 = v52;
  if (v52 == v51)
  {
    v22 = 4;
    v21 = v51;
    goto LABEL_19;
  }
  if (v52)
  {
    v22 = 5;
LABEL_19:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  v23 = v49;
  if (v49)
  {
    v41 = a7;
    v24 = *(_BYTE *)(a3 + 1) != 0;
    v25 = *(_DWORD *)(a4 + 104) == 1;
    v26 = v24 && v25;
    v27 = v24 && v25 ? 1 : 3;
    if (v27 <= v47)
    {
      v30 = 0;
      v31 = v19;
      v32 = (uint64_t)a6;
      while (1)
      {
        v33 = a2[2];
        v34 = a2[3];
        v44 = v47;
        v45 = v48;
        if (sub_23682A9F4(v23, v33, v34, v46, v31, (unsigned int *)&v44, v30, a5, *(double *)&v47, v32))
          break;
        ++v30;
        v32 += 40;
        if (v27 == v30)
        {
          if (v26)
          {
            sub_23683CFC0(a6, (uint64_t)(a6 + 10));
            sub_23683CFC0(a6, (uint64_t)(a6 + 20));
          }
          if (v41)
          {
            if (*a8)
            {
              v35 = a2[2];
              v36 = a2[3];
              v42 = v47;
              v43 = v48;
              if (sub_23682A9F4(v23, v35, v36, v46, v31, (unsigned int *)&v42, (v47 - 1), a5, *(double *)&v47, (uint64_t)v41))break;
            }
            else
            {
              v37 = v41[1];
              if ((_DWORD)v37)
              {
                v39 = *((_QWORD *)v41 + 2);
                v38 = (char *)*((_QWORD *)v41 + 3);
                v40 = *v41;
                do
                {
                  if ((_DWORD)v40)
                    memset_pattern16(v38, &unk_2368AFB60, 4 * v40);
                  v38 += v39;
                  --v37;
                }
                while (v37);
              }
            }
          }
          v28 = 0;
          goto LABEL_26;
        }
      }
    }
  }
  v28 = 1;
LABEL_26:
  sub_23683CE74(&v49);
  return v28;
}

void sub_236832044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_23683CE74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236832064(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6, _QWORD *a7)
{
  unint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a4 + 320);
  if (!(_DWORD)v7)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    if ((a5 & 1) != 0 && !*(_DWORD *)(*(_QWORD *)(a4 + 328) + v13 + 12))
    {
      a5 = 0;
      goto LABEL_21;
    }
    v30 = 0;
    v29 = xmmword_236922540;
    ((void (*)(_QWORD, unint64_t, __int128 *))a1[3])(*a1, v15, &v29);
    LODWORD(v29) = 1;
    v28 = 0;
    v16 = ((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *))a1[4])(*a1, v15, *a2, a2[1], a2[2], a2[3], &v28);
    v33[0] = &off_2507FD778;
    v33[1] = a1;
    v34 = v33;
    v31 = v16;
    sub_23683CE10((uint64_t)&v32, (uint64_t)v33);
    v17 = v34;
    if (v34 == v33)
    {
      v17 = v33;
      v18 = 4;
      goto LABEL_9;
    }
    if (v34)
    {
      v18 = 5;
LABEL_9:
      (*(void (**)(void))(*v17 + 8 * v18))();
    }
    if (!v31)
      break;
    v19 = *(_QWORD *)(a3 + 64);
    if ((_DWORD)v19 == 2)
    {
      v20 = HIDWORD(v19);
    }
    else if ((_DWORD)v19 == 1)
    {
      v20 = *(unsigned int *)(*(_QWORD *)(a4 + 328) + v13 + 28);
    }
    else
    {
      v20 = (_DWORD)v19 || DWORD1(v29) >= 6 ? 0 : dword_236922648[DWORD1(v29)];
    }
    v21 = a2[2];
    v22 = a2[3];
    v26 = v29;
    v27 = v30;
    if (sub_23682A9F4(v31, v21, v22, v28, v20, (unsigned int *)&v26, 0, a6, *(double *)&v29, *a7 + v14))
      break;
    sub_23683CE74(&v31);
    v7 = *(unsigned int *)(a4 + 320);
LABEL_21:
    ++v15;
    v14 += 40;
    v13 += 96;
    if (v15 >= v7)
      return 0;
  }
  sub_23683CE74(&v31);
  return 1;
}

void sub_236832288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_23683CE74((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_2368322A4(unsigned int *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;

  v4 = 0;
  v5 = result[1];
  do
  {
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *((_QWORD *)result + 2);
      v8 = *(_QWORD *)&result[10 * v4 + 6];
      v9 = *result;
      v10 = v8 + 4;
      v11 = a3 + 4;
      do
      {
        if (v6)
          v12 = v8 + v7 * (v6 - 1);
        else
          v12 = 0;
        v13 = v6 + 1;
        if (v6 + 1 < v5)
          v14 = v8 + v7 * (v6 + 1);
        else
          v14 = 0;
        v15 = a3 + (v6 - 1) * a2;
        if (!v6)
          v15 = 0;
        if (v13 < v5)
          v16 = a3 + v13 * a2;
        else
          v16 = 0;
        if ((_DWORD)v9)
        {
          v17 = 0;
          v18 = v14 + 4;
          v19 = v16 + 4;
          v20 = 1;
          do
          {
            if (*(float *)(v11 + v17 - 4) == 0.0)
            {
              v21 = v10 + v17;
              *(_DWORD *)(v10 + v17 - 4) = 0;
              if ((a4 & 1) == 0)
              {
                if (v17)
                {
                  v22 = *(float *)(v10 + v17 - 8);
                  v23 = v22 + 0.0;
                  *(float *)(v21 - 4) = v22 + 0.0;
                  v24 = 1.0;
                  if (*(float *)(v11 + v17 - 8) > 0.0)
                  {
                    v23 = v22 + v23;
                    *(float *)(v21 - 4) = v23;
                    v24 = 2.0;
                  }
                }
                else
                {
                  v23 = 0.0;
                  v24 = 0.0;
                }
                if (v20 < v9)
                {
                  if (v6)
                  {
                    v23 = *(float *)(v12 + v17 + 4) + v23;
                    *(float *)(v21 - 4) = v23;
                    v24 = v24 + 1.0;
                  }
                  if (*(float *)(v11 + v17) > 0.0)
                  {
                    v23 = v23 + (float)(*(float *)(v10 + v17) * 2.0);
                    *(float *)(v21 - 4) = v23;
                    v24 = v24 + 2.0;
                  }
                  if (v6 && *(float *)(v15 + v17 + 4) > 0.0)
                  {
                    v23 = v23 + (float)(*(float *)(v12 + v17 + 4) * 2.0);
                    *(float *)(v21 - 4) = v23;
                    v24 = v24 + 2.0;
                  }
                  if (v13 < v5 && *(float *)(v19 + v17) > 0.0)
                  {
                    v23 = v23 + (float)(*(float *)(v18 + v17) * 2.0);
                    *(float *)(v21 - 4) = v23;
                    v24 = v24 + 2.0;
                  }
                }
                if (v6 && *(float *)(v15 + v17) > 0.0)
                {
                  v23 = v23 + (float)(*(float *)(v12 + v17) * 2.0);
                  *(float *)(v21 - 4) = v23;
                  v24 = v24 + 2.0;
                }
                if (v13 < v5 && *(float *)(v19 + v17 - 4) > 0.0)
                {
                  v23 = v23 + (float)(*(float *)(v18 + v17 - 4) * 2.0);
                  *(float *)(v21 - 4) = v23;
                  v24 = v24 + 2.0;
                }
                if (v24 > 1.0)
                  *(float *)(v21 - 4) = v23 / v24;
              }
            }
            v17 += 4;
            ++v20;
          }
          while (4 * v9 != v17);
        }
        v11 += a2;
        v10 += v7;
        ++v6;
      }
      while (v13 != v5);
    }
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t sub_2368324BC(uint64_t result, _QWORD *a2, uint64_t *a3, _DWORD *a4)
{
  BOOL v4;
  uint64_t v5;
  int v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t i;
  float v22;
  float *v23;
  float *v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  double v52;
  double v53;
  int v54;
  double v55;
  int v56;

  if (a4[3])
    v4 = 0;
  else
    v4 = *(_BYTE *)(result + 32) == 0;
  if (v4)
  {
    v5 = 0;
    v6 = 2;
    a4[17] = 2;
    v7 = *(float *)(result + 392);
    do
    {
      if (v7 > *(float *)&dword_2368AFB30[v5])
        a4[17] = ++v6;
      ++v5;
    }
    while (v5 != 4);
    if (*(float *)result < 0.299)
      a4[17] = ++v6;
    if (*(int *)(result + 48) > 3)
    {
      v52 = 0.0;
      v9 = 0.0;
      v12 = 0.0;
    }
    else
    {
      v8 = a3[3];
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0.0;
      if (v8 >= 2)
      {
        v14 = a3[1];
        v13 = a3[2];
        v15 = *a3;
        v17 = a2[2];
        v16 = a2[3];
        v18 = v14 * v17 + 4 * *a3 + v16 + 4;
        v19 = (float *)(v18 + v17);
        v20 = 0.0;
        for (i = 1; i != v8; ++i)
        {
          if (v13 >= 2)
          {
            v22 = *(float *)(v16 + v17 * (i + v14) + 4 * v15);
            v23 = v19;
            v24 = (float *)v18;
            v25 = v13 - 1;
            do
            {
              v26 = *v23++;
              v27 = v26;
              v28 = *v24++;
              v29 = v28;
              v30 = vabds_f32(v27, v22);
              if (v20 < v30)
                v20 = v30;
              v31 = vabds_f32(v27, v29);
              if (v9 < v31)
                v9 = v31;
              v22 = v27;
              --v25;
            }
            while (v25);
          }
          v18 += v17;
          v19 = (float *)((char *)v19 + v17);
        }
        v33 = a2[7];
        v32 = a2[8];
        v35 = a2[12];
        v34 = a2[13];
        result = v33 * v14 + 4 * v15 + v32 + 4;
        v36 = v35 * v14 + 4 * v15 + v34 + 4;
        v37 = v35 * (v14 + 1) + 4 * v15 + v34 + 4;
        v38 = v33 * (v14 + 1) + 4 * v15 + v32 + 4;
        v12 = 0.0;
        v39 = 1;
        v11 = 0.0;
        v10 = 0.0;
        do
        {
          if (v13 >= 2)
          {
            v40 = 0;
            v41 = *(float *)(v34 + v35 * (v39 + v14) + 4 * v15);
            v42 = *(float *)(v32 + v33 * (v39 + v14) + 4 * v15);
            do
            {
              v43 = v42;
              v42 = *(float *)(v38 + 4 * v40);
              v44 = *(float *)(v37 + 4 * v40);
              v45 = v41 - v43;
              v46 = v44 + v42 * -1.2;
              v47 = *(float *)(v36 + 4 * v40);
              v48 = vabds_f32(v44 - v42, v45);
              if (v11 < v48)
                v11 = v48;
              v49 = vabds_f32(v44 - v42, v47 - *(float *)(result + 4 * v40));
              if (v10 < v49)
                v10 = v49;
              if (v46 >= 0.0)
              {
                v50 = (float)(vabds_f32(v44, v41) + vabds_f32(v44, v47)) * v46;
                if (v12 < v50)
                  v12 = v50;
              }
              ++v40;
              v41 = v44;
            }
            while (v13 - 1 != v40);
          }
          ++v39;
          result += v33;
          v36 += v35;
          v37 += v35;
          v38 += v33;
        }
        while (v39 != v8);
        if (v20 >= v9)
          v9 = v20;
      }
      if (v11 >= v10)
        v51 = v11;
      else
        v51 = v10;
      v52 = v51;
    }
    v53 = v9;
    if (v53 < 0.017)
      v54 = 2;
    else
      v54 = 3;
    if (v53 >= 0.03)
      v54 = 4;
    if (v6 <= v54)
      v6 = v54;
    a4[17] = v6;
    v55 = v12;
    if (v52 <= 0.38)
    {
      if (v52 <= 0.33)
      {
        v56 = v52 > 0.28;
        if (v55 < 0.13)
          v56 = 0;
      }
      else if (v55 < 0.13)
      {
        v56 = 1;
      }
      else
      {
        v56 = 2;
      }
    }
    else if (v55 < 0.13)
    {
      v56 = 2;
    }
    else
    {
      v56 = 3;
    }
    a4[18] = v56 + 2;
  }
  return result;
}

void sub_2368327D4(uint64_t a1, char a2, char a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, _OWORD *a8)
{
  float v9;
  unint64_t i1;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int128 v20;
  uint64_t v21;
  uint64_t i;
  float v24;
  float v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  float v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  float *v72;
  float *v73;
  float *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  float *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t k;
  float32x4_t v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  float *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  float *v122;
  float *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float *v128;
  uint64_t v129;
  int64x2_t v130;
  float *v131;
  double v132;
  double v133;
  double v134;
  uint64_t v135;
  BOOL v136;
  double v137;
  double v138;
  uint64_t v139;
  double v140;
  float64x2_t v141;
  uint64_t v142;
  float64x2_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t m;
  uint64_t n;
  uint64_t v149;
  double v150;
  float64x2_t v151;
  double v152;
  uint64_t ii;
  uint64_t jj;
  double v155;
  double v156;
  uint64_t v157;
  double v158;
  uint64_t kk;
  uint64_t v160;
  double v161;
  float64x2_t v162;
  uint64_t v163;
  double v164;
  uint64_t mm;
  float v166;
  _OWORD *v167;
  float v168;
  uint64_t v169;
  float64x2_t *v170;
  float64x2_t v171;
  float64x2_t v172;
  uint64_t nn;
  uint64_t v174;
  float v175;
  BOOL v176;
  float v177;
  float *v180;
  float v181;
  char v182;
  float v183;
  unint64_t v184;
  float *v185;
  double v186;
  double v187;
  float *v188;
  void *__p[3];
  _OWORD v190[64];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE v199[64];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  _OWORD v212[4];
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;

  v9 = *(float *)(a1 + 192);
  if (v9 <= 0.0)
  {
    v21 = *(_QWORD *)(a1 + 416);
    if (*(_QWORD *)(a1 + 424) - v21 == 32)
    {
      for (i = 0; i != 32; i += 4)
        *(_DWORD *)((char *)a8 + i) = *(_DWORD *)(v21 + i);
    }
    else if (!*(_DWORD *)(a7 + 12) && (*(_BYTE *)(a7 + 24) & 1) != 0 && (a3 & 1) == 0 && (a2 & 1) == 0)
    {
      v24 = (float)(*(float *)a1 + -1.0) / 0.6;
      v25 = (float)(v24 * 0.75) + 0.25;
      if (v24 >= 1.0)
        v25 = 1.0;
      if (v24 >= 0.0)
        v26 = v25;
      else
        v26 = 1.0;
      bzero(v190, 0x400uLL);
      v27 = (*a4 >> 3) * (unint64_t)(a4[1] >> 3);
      LODWORD(v217) = 0;
      sub_23681EDEC(__p, v27, &v217);
      v28 = a4[1];
      if (v28 >= 8)
      {
        LODWORD(v29) = 0;
        LODWORD(v30) = 0;
        LODWORD(v31) = *a4;
        v32 = 8;
        do
        {
          v33 = v29;
          v29 = v32;
          if (v31 >= 8)
          {
            v34 = 0;
            v35 = v33;
            v36 = v33 + 2;
            v30 = (int)v30;
            v37 = 8;
            do
            {
              LODWORD(v213) = 0;
              sub_23681EDEC(&v217, 0x14uLL, &v213);
              v38 = 0;
              v39 = 0;
              v40 = 4 * v34;
              v41 = *((_QWORD *)a4 + 8);
              v42 = *((_QWORD *)a4 + 2);
              v43 = *((_QWORD *)a4 + 3);
              v44 = v40 + v36 * v42;
              v45 = v43 + v44;
              v46 = v41 + v44;
              v47 = v40 + v35 * v42;
              v48 = v43 + v47;
              v49 = v41 + v47;
              v50 = v217;
              v51 = v45 + 8;
              v52 = v46 + 8;
              do
              {
                v53 = 0;
                v54 = v39;
                v55 = v49;
                v56 = v48;
                do
                {
                  v57 = 0;
                  v58 = 0.0;
                  v59 = v55;
                  v60 = v56;
                  v61 = v52;
                  v62 = v51;
                  do
                  {
                    for (j = 0; j != 12; j += 4)
                      v58 = v58
                          + vabds_f32((float)(*(float *)(v61 + j) + *(float *)(v62 + j)) * 0.5, (float)(*(float *)(v59 + j) + *(float *)(v60 + j)) * 0.5);
                    ++v57;
                    v62 += v42;
                    v61 += v42;
                    v60 += v42;
                    v59 += v42;
                  }
                  while (v57 != 4);
                  *(float *)(v50 + 4 * v54) = v58;
                  v39 = v54 + 1;
                  ++v53;
                  v56 += 4;
                  v55 += 4;
                  ++v54;
                }
                while (v53 != 5);
                ++v38;
                v48 += v42;
                v49 += v42;
              }
              while (v38 != 4);
              std::__sort<std::__less<float,float> &,float *>();
              v64 = 0;
              v65 = 0.0;
              do
              {
                v65 = v65 + *(float *)(v217 + v64);
                v64 += 4;
              }
              while (v64 != 40);
              *((_QWORD *)&v217 + 1) = v217;
              operator delete((void *)v217);
              *((float *)__p[0] + v30) = v65 / 10.0;
              v66 = vcvts_n_s32_f32(v65 / 10.0, 8uLL);
              v67 = v66 & ~(v66 >> 31);
              if (v67 >= 0xFF)
                v67 = 255;
              ++*((_DWORD *)v190 + v67);
              ++v30;
              v37 += 8;
              v31 = *a4;
              v34 += 8;
            }
            while (v37 <= v31);
            v28 = a4[1];
          }
          v32 = v29 + 8;
        }
        while (v29 + 8 <= v28);
      }
      v68 = 0;
      v69 = 0;
      do
      {
        if (*((_DWORD *)v190 + v68) > *((_DWORD *)v190 + v69))
          v69 = v68;
        ++v68;
      }
      while (v68 != 256);
      v70 = (float)(int)v69 * 0.0039062;
      if (v70 > 0.15 || v70 <= 0.0)
      {
        v76 = 0;
        *a8 = 0u;
        a8[1] = 0u;
      }
      else
      {
        v71 = 0.0;
        v72 = 0;
        v73 = 0;
        if (v28 >= 8)
        {
          v77 = 0;
          v74 = 0;
          v188 = 0;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v81 = *a4;
          v82 = 8;
          v83.i64[0] = 0x3F0000003F000000;
          v83.i64[1] = 0x3F0000003F000000;
          do
          {
            if (v81 >= 8)
            {
              v184 = v82;
              v84 = 0;
              v85 = 0;
              v86 = 8;
              do
              {
                v87 = v86;
                if (*((float *)__p[0] + v80) <= v70)
                {
                  v88 = 0;
                  v89 = *((_QWORD *)a4 + 8);
                  v90 = *((_QWORD *)a4 + 2);
                  v91 = *((_QWORD *)a4 + 3);
                  v92 = v84 + v77 * v90;
                  v93 = 0.0;
                  do
                  {
                    for (k = 0; k != 32; k += 16)
                    {
                      v95 = vmulq_f32(vaddq_f32(*(float32x4_t *)(v89 + v92 + k), *(float32x4_t *)(v91 + v92 + k)), v83);
                      v93 = (float)((float)((float)(v93 + v95.f32[0]) + v95.f32[1]) + v95.f32[2]) + v95.f32[3];
                    }
                    ++v88;
                    v92 += v90;
                  }
                  while (v88 != 8);
                  v96 = 0;
                  v97 = 0.0;
                  do
                  {
                    v98 = 0;
                    v99 = v96 + v77;
                    do
                    {
                      v100 = v98 + v85;
                      v101 = 0.0;
                      v102 = -1;
                      v103 = (float *)&unk_236923748;
                      do
                      {
                        if ((unint64_t)(v102 + v96) >= 8)
                        {
                          v110 = 0;
                          v111 = (v99 - v102) * v90;
                          v112 = v89 + v111;
                          v113 = v91 + v111;
                          v114 = 1;
                          do
                          {
                            v115 = v110 - 1;
                            if ((unint64_t)(v110 - 1 + v98) >= 8)
                              v115 = v114;
                            v101 = v101
                                 + (float)((float)((float)(*(float *)(v112 + 4 * (v115 + v100))
                                                         + *(float *)(v113 + 4 * (v115 + v100)))
                                                 * 0.5)
                                         * v103[v110++]);
                            --v114;
                          }
                          while (v110 != 3);
                        }
                        else
                        {
                          v104 = 0;
                          v105 = (v102 + v99) * v90;
                          v106 = v89 + v105;
                          v107 = v91 + v105;
                          v108 = 1;
                          do
                          {
                            v109 = v104 - 1;
                            if ((unint64_t)(v104 - 1 + v98) >= 8)
                              v109 = v108;
                            v101 = v101
                                 + (float)((float)((float)(*(float *)(v106 + 4 * (v109 + v100))
                                                         + *(float *)(v107 + 4 * (v109 + v100)))
                                                 * 0.5)
                                         * v103[v104++]);
                            --v108;
                          }
                          while (v104 != 3);
                        }
                        ++v102;
                        v103 += 3;
                      }
                      while (v102 != 2);
                      v97 = v97 + fabsf(v101);
                      ++v98;
                    }
                    while (v98 != 8);
                    ++v96;
                  }
                  while (v96 != 8);
                  v116 = v93 * 0.015625;
                  v117 = v97 * 0.015625;
                  if ((unint64_t)v79 >= v78)
                  {
                    v118 = ((char *)v79 - (char *)v74) >> 3;
                    v119 = v118 + 1;
                    if ((unint64_t)(v118 + 1) >> 61)
                      sub_2367C3440();
                    if ((uint64_t)(v78 - (_QWORD)v74) >> 2 > v119)
                      v119 = (uint64_t)(v78 - (_QWORD)v74) >> 2;
                    if (v78 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                      v120 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v120 = v119;
                    if (v120)
                    {
                      v120 = (unint64_t)sub_2367CA1FC(v120);
                      v79 = v188;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    v122 = (float *)(v120 + 8 * v118);
                    *v122 = v117;
                    v122[1] = v116;
                    v123 = v122;
                    while (v79 != v74)
                    {
                      v124 = *((_QWORD *)v79 - 1);
                      v79 -= 2;
                      *((_QWORD *)v123 - 1) = v124;
                      v123 -= 2;
                    }
                    v78 = v120 + 8 * v121;
                    v79 = v122 + 2;
                    if (v74)
                      operator delete(v74);
                    v74 = v123;
                  }
                  else
                  {
                    *v79 = v117;
                    v79[1] = v116;
                    v79 += 2;
                  }
                  v81 = *a4;
                  v188 = v79;
                  v83.i64[0] = 0x3F0000003F000000;
                  v83.i64[1] = 0x3F0000003F000000;
                }
                ++v80;
                v86 = v87 + 8;
                v84 += 32;
                v85 = v87;
              }
              while (v87 + 8 <= v81);
              v28 = a4[1];
              v82 = v184;
            }
            v82 += 8;
            v77 += 8;
          }
          while (v82 <= v28);
          if (v74 == v79)
          {
            v75 = ((char *)v79 - (char *)v74) >> 3;
            v72 = 0;
            v73 = 0;
          }
          else
          {
            v71 = 0.0;
            v125 = v74;
            do
            {
              v126 = *v125;
              v125 += 2;
              v71 = v71 + v126;
            }
            while (v125 != v79);
            v75 = ((char *)v79 - (char *)v74) >> 3;
            v72 = 0;
            v73 = 0;
            if (v79 != v74)
            {
              if ((char *)v79 - (char *)v74 < 0)
                sub_2367C3440();
              v127 = (float *)sub_2367CA1FC(((char *)v79 - (char *)v74) >> 3);
              v128 = v127;
              v72 = v127;
              if (v79 != v74)
              {
                v185 = v127;
                memmove(v127, v74, (char *)v79 - (char *)v74);
                v72 = v185;
              }
              v73 = (float *)((char *)v128 + (char *)v79 - (char *)v74);
            }
          }
        }
        else
        {
          v74 = 0;
          v188 = 0;
          v75 = 0;
        }
        v177 = v26;
        v129 = 0;
        v130 = vdupq_lane_s64(COERCE__INT64((float)(v71 / (float)(unint64_t)v75)), 0);
        do
        {
          *(__int128 *)((char *)&v195 + v129) = (__int128)v130;
          v129 += 16;
        }
        while (v129 != 64);
        v191 = v195;
        v192 = v196;
        v193 = v197;
        v194 = v198;
        v131 = v72;
        v180 = v73;
        v132 = sub_23685279C(v72, v73, (uint64_t)&v191, (double *)&v213, 0);
        v182 = 0;
        v208 = v213;
        v209 = v214;
        v210 = v215;
        v211 = v216;
        v204 = v213;
        v205 = v214;
        v133 = 0.0;
        v134 = 1.0;
        v135 = 1;
        v136 = 1;
        v137 = 0.0;
        v206 = v215;
        v207 = v216;
        v138 = 0.0;
        do
        {
          if (v136)
          {
            v139 = 0;
            v140 = 0.0;
            do
            {
              v141 = vmulq_f64(*(float64x2_t *)((char *)&v204 + v139), *(float64x2_t *)((char *)&v213 + v139));
              v140 = v140 + v141.f64[0] + v141.f64[1];
              v139 += 16;
            }
            while (v139 != 64);
            if (v140 <= 0.0)
            {
              v142 = 0;
              v204 = v213;
              v205 = v214;
              v206 = v215;
              v207 = v216;
              v140 = 0.0;
              do
              {
                v143 = vmulq_f64(*(float64x2_t *)((char *)&v204 + v142), *(float64x2_t *)((char *)&v213 + v142));
                v140 = v140 + v143.f64[0] + v143.f64[1];
                v142 += 16;
              }
              while (v142 != 64);
            }
            v137 = -v140;
            v144 = 0;
            v138 = 0.0;
            do
            {
              v138 = v138 + *(double *)((char *)&v204 + v144) * *(double *)((char *)&v204 + v144);
              v144 += 8;
            }
            while (v144 != 64);
            v145 = 0;
            v146 = 0.0001 / sqrt(v138);
            do
            {
              *(float64x2_t *)&v199[v145] = vmulq_n_f64(*(float64x2_t *)((char *)&v204 + v145), v146);
              v145 += 16;
            }
            while (v145 != 64);
            v186 = v146;
            for (m = 0; m != 64; m += 16)
              *(__int128 *)((char *)&v200 + m) = (__int128)vaddq_f64(*(float64x2_t *)((char *)&v191 + m), *(float64x2_t *)&v199[m]);
            sub_23685279C(v131, v180, (uint64_t)&v200, (double *)v212, 0);
            for (n = 0; n != 4; ++n)
              *(__int128 *)((char *)&v200 + n * 16) = (__int128)vsubq_f64(*(float64x2_t *)((char *)&v213 + n * 16), (float64x2_t)v212[n]);
            v149 = 0;
            v150 = 0.0;
            do
            {
              v151 = vmulq_f64(*(float64x2_t *)((char *)&v204 + v149), *(float64x2_t *)((char *)&v200 + v149));
              v150 = v150 + v151.f64[0] + v151.f64[1];
              v149 += 16;
            }
            while (v149 != 64);
            v133 = v150 / v186;
          }
          v152 = v133 + v134 * v138;
          if (v152 <= 0.0)
          {
            v152 = v134 * v138;
            v134 = v134 - v133 / v138;
          }
          for (ii = 0; ii != 64; ii += 16)
            *(float64x2_t *)&v199[ii] = vmulq_n_f64(*(float64x2_t *)((char *)&v204 + ii), -v137 / v152);
          v187 = -v137 / v152;
          for (jj = 0; jj != 64; jj += 16)
            *(__int128 *)((char *)&v200 + jj) = (__int128)vaddq_f64(*(float64x2_t *)((char *)&v191 + jj), *(float64x2_t *)&v199[jj]);
          v217 = v200;
          v218 = v201;
          v219 = v202;
          v220 = v203;
          v155 = sub_23685279C(v131, v180, (uint64_t)&v217, (double *)v212, 0);
          v156 = (v155 - v132 + v155 - v132) / (v137 * v187);
          v136 = v156 >= 0.0;
          if (v156 >= 0.0)
          {
            v157 = 0;
            v191 = v217;
            v192 = v218;
            v193 = v219;
            v194 = v220;
            v208 = v213;
            v209 = v214;
            v210 = v215;
            v211 = v216;
            v215 = v212[2];
            v216 = v212[3];
            v158 = 0.0;
            v213 = v212[0];
            v214 = v212[1];
            do
            {
              v158 = v158 + *(double *)((char *)&v213 + v157) * *(double *)((char *)&v213 + v157);
              v157 += 8;
            }
            while (v157 != 64);
            if (v158 <= 1.0e-16)
              break;
            ++v182;
            v132 = v155;
          }
          if (v156 >= 0.25)
          {
            if (v156 > 0.75)
            {
              if (v134 * 0.25 >= 1.0e-15)
                v134 = v134 * 0.25;
              else
                v134 = 1.0e-15;
            }
          }
          else if (v134 * 4.0 <= 1.0e15)
          {
            v134 = v134 * 4.0;
          }
          else
          {
            v134 = 1.0e15;
          }
          if ((v182 & 7) != 0)
          {
            if (v156 >= 0.0)
            {
              for (kk = 0; kk != 64; kk += 16)
                *(__int128 *)((char *)&v200 + kk) = (__int128)vsubq_f64(*(float64x2_t *)((char *)&v208 + kk), *(float64x2_t *)((char *)&v213 + kk));
              v160 = 0;
              v161 = 0.0;
              do
              {
                v162 = vmulq_f64(*(float64x2_t *)((char *)&v200 + v160), *(float64x2_t *)((char *)&v213 + v160));
                v161 = v161 + v162.f64[0] + v162.f64[1];
                v160 += 16;
              }
              while (v160 != 64);
              v163 = 0;
              v164 = v161 / v137;
              do
              {
                *(float64x2_t *)&v199[v163] = vmulq_n_f64(*(float64x2_t *)((char *)&v204 + v163), v164);
                v163 += 16;
              }
              while (v163 != 64);
              for (mm = 0; mm != 64; mm += 16)
                *(__int128 *)((char *)&v200 + mm) = (__int128)vaddq_f64(*(float64x2_t *)&v199[mm], *(float64x2_t *)((char *)&v213 + mm));
              v204 = v200;
              v205 = v201;
              v206 = v202;
              v207 = v203;
            }
          }
          else
          {
            v204 = v213;
            v205 = v214;
            v206 = v215;
            v207 = v216;
            v134 = 1.0;
          }
          ++v135;
        }
        while (v135 != 41);
        v195 = v191;
        v196 = v192;
        v197 = v193;
        v198 = v194;
        v217 = v191;
        v218 = v192;
        v219 = v193;
        v220 = v194;
        v166 = sub_23685279C(v131, v180, (uint64_t)&v195, (double *)&v217, 1)
             / (double)(unint64_t)(((char *)v188 - (char *)v74) >> 3);
        if (v166 <= 0.001)
        {
          v169 = 0;
          v170 = (float64x2_t *)&v195;
          v167 = a8;
          v168 = v177;
          do
          {
            v172 = *v170;
            v171 = v170[1];
            v170 += 2;
            a8[v169++] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8((int8x16_t)v172, (int8x16_t)vcltzq_f64(v172))), (float64x2_t)vbicq_s8((int8x16_t)v171, (int8x16_t)vcltzq_f64(v171)));
          }
          while (v169 != 2);
        }
        else
        {
          v167 = a8;
          *a8 = 0u;
          a8[1] = 0u;
          v168 = v177;
        }
        if (v131)
          operator delete(v131);
        for (nn = 0; nn != 2; ++nn)
          v167[nn] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)&v167[nn]), v168 * 1.4)), vmulq_n_f64(vcvt_hight_f64_f32((float32x4_t)v167[nn]), v168 * 1.4));
        v174 = 0;
        do
        {
          v175 = fabsf(*(float *)((char *)v167 + v174));
          v76 = v175 > 0.001;
          v176 = v175 > 0.001 || v174 == 28;
          v174 += 4;
        }
        while (!v176);
        if (v74)
          operator delete(v74);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (!v76)
        *(_QWORD *)(a7 + 24) &= ~1uLL;
    }
  }
  else
  {
    v183 = cbrtf(0.0037931);
    for (i1 = 0; i1 != 8; ++i1)
    {
      v13 = (float)((float)((float)i1 / 6.0) + (float)((float)i1 / 6.0)) - v183;
      v14 = fmaxf((float)(v13 * (float)(v13 * v13)) + 0.0037931, 0.0);
      v181 = (float)((float)(10.0 / v9) * 2252.0) * (float)(864000000.0 / (float)(unint64_t)(a6 * a5));
      v15 = (float)(0.18 / v181)
          * sqrtf((float)((float)(v181 * (float)(v14 / 0.18)) + 9.0)+ (float)((float)((float)(v181 * (float)(v14 / 0.18)) * 0.005)* (float)((float)(v181 * (float)(v14 / 0.18)) * 0.005)));
      v16 = cbrtf(v14 + -0.0037931);
      v17 = (float)(v15 * (float)(0.33333 / (float)(v16 * v16))) / 0.35157;
      if (v17 <= 1.0)
        v18 = v17;
      else
        v18 = 1.0;
      if (v17 >= 0.0)
        v19 = v18;
      else
        v19 = 0.0;
      *((float *)v190 + i1) = v19;
    }
    v20 = v190[1];
    *a8 = v190[0];
    a8[1] = v20;
  }
}

void sub_23683353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  if (v19)
    operator delete(v19);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_236833588(int a1, char a2, uint64_t a3, char a4, unsigned int *a5)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v12;
  int32x2_t v13;
  __int128 v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  _QWORD *v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  float *v66;
  float *v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  float *v77;
  float *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int32 *v95;
  uint64_t v96;
  unsigned __int32 *v97;
  unsigned __int32 *v98;
  uint64_t v99;
  unsigned __int32 v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  float *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int32x2_t v157;
  unint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t i;
  uint64_t v162;
  int32x2_t v163;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t v185;
  int32x2_t *v186;
  unsigned int v187;
  uint64_t v188;
  char *__src;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195[24];
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  unsigned int v208;
  _BYTE v209[120];
  unsigned int v210;
  unsigned int v211[30];
  _OWORD v212[7];
  uint64_t v213;
  unsigned int v214;
  int32x2_t v215[15];
  unsigned int v216;
  __n128 v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  unsigned int v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  unsigned int v233;
  __int128 v234;
  uint64_t v235;
  float *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  void *__b;
  uint64_t v241;
  unsigned int v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  unsigned int v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  unsigned int v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  unsigned int v263;
  __n128 v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  __n128 v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273[2];
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  char v285[16];
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  __int128 v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unsigned int v293;
  __int128 v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  unsigned int v301;
  int32x2_t v302[17];

  if ((a4 & 1) != 0)
    return 0;
  v6 = *(unsigned int *)(a3 + 268);
  if ((_DWORD)v6 == 1 || a2 != 0)
    return 0;
  if ((_DWORD)v6 != 2 || *(_DWORD *)(a3 + 12) != 0)
  {
    v213 = 0;
    memset(v212, 0, sizeof(v212));
    sub_2367CA770((uint64_t)v209, (v6 - 1 + *a5) / v6 + 8, (v6 - 1 + a5[1]) / v6 + 8);
    if (v210)
    {
      v216 = v210;
    }
    else
    {
      sub_2367CA9E4((uint64_t)v302, (uint64_t)v209);
      sub_2367D086C((uint64_t)v212, (uint64_t)v302);
      for (i = 13; i != -2; i -= 5)
        sub_2367C2F38((uint64_t *)&v302[i]);
      v162 = 0;
      v163 = vadd_s32(*(int32x2_t *)&v212[0], (int32x2_t)0x700000007);
      do
      {
        *(int32x2_t *)((char *)v212 + v162) = v163;
        v162 += 40;
      }
      while (v162 != 120);
      for (j = 0; j != 30; j += 10)
        sub_2368AEB14(&a5[j], v6, (uint64_t)v212 + j * 4);
      v216 = 0;
      sub_2367CA9E4((uint64_t)v215, (uint64_t)v212);
      if (!v210)
      {
        for (k = 104; k != -16; k -= 40)
          sub_2367C2F38((uint64_t *)&v209[k]);
      }
    }
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)((char *)v212 + m));
    v8 = v216;
    if (!v216)
    {
      sub_2367CA9E4((uint64_t)v209, (uint64_t)v215);
      sub_2367D086C((uint64_t)a5, (uint64_t)v209);
      for (n = 104; n != -16; n -= 40)
        sub_2367C2F38((uint64_t *)&v209[n]);
      if (!v216)
      {
        for (ii = 13; ii != -2; ii -= 5)
          sub_2367C2F38((uint64_t *)&v215[ii]);
      }
      goto LABEL_251;
    }
    return v8;
  }
  if (a1 > 3)
  {
    sub_2367CA770((uint64_t)v209, (((unint64_t)*a5 + 1) >> 1) + 8, (((unint64_t)a5[1] + 1) >> 1) + 8);
    v8 = v210;
    if (v210)
      return v8;
    sub_2367CA9E4((uint64_t)v215, (uint64_t)v209);
    v156 = 0;
    v157 = vadd_s32(v215[0], (int32x2_t)0x700000007);
    do
    {
      v215[v156] = v157;
      v156 += 5;
    }
    while (v156 != 15);
    for (jj = 0; jj != 120; jj += 40)
    {
      v8 = sub_236843F08(&a5[jj / 4], (unsigned int *)&v215[jj / 8]);
      if ((_DWORD)v8)
        goto LABEL_193;
    }
    sub_2367D086C((uint64_t)a5, (uint64_t)v215);
    v8 = 0;
LABEL_193:
    for (kk = 13; kk != -2; kk -= 5)
      sub_2367C2F38((uint64_t *)&v215[kk]);
    if (!v210)
    {
      for (mm = 104; mm != -16; mm -= 40)
        sub_2367C2F38((uint64_t *)&v209[mm]);
    }
    goto LABEL_250;
  }
  sub_2367CA770((uint64_t)v215, (((unint64_t)*a5 + 1) >> 1) + 8, (((unint64_t)a5[1] + 1) >> 1) + 8);
  v8 = v216;
  if (v216)
    return v8;
  sub_2367CA9E4((uint64_t)v302, (uint64_t)v215);
  v12 = 0;
  v13 = vadd_s32(v302[0], (int32x2_t)0x700000007);
  do
  {
    v302[v12] = v13;
    v12 += 5;
  }
  while (v12 != 15);
  sub_2367CA770((uint64_t)v212, *a5, a5[1]);
  v8 = v214;
  if (v214)
    goto LABEL_245;
  sub_2367CA9E4((uint64_t)v211, (uint64_t)v212);
  sub_2367E7780((uint64_t)v209);
  v298 = 0uLL;
  *(_QWORD *)&v14 = v211[0];
  *((_QWORD *)&v14 + 1) = v211[1];
  v299 = v14;
  sub_2367E7714((uint64_t)a5, (uint64_t)&v298, (uint64_t)v211, (uint64_t)v209);
  sub_2367C431C((uint64_t)&v205, *a5, a5[1]);
  v8 = v208;
  if (v208)
    goto LABEL_240;
  v202 = v205;
  v203 = v206;
  *((_QWORD *)&v206 + 1) = 0;
  v204 = v207;
  __asm { FMOV            V0.2S, #1.0 }
  v200 = _D0;
  v201 = 1117782016;
  sub_23680DBAC((uint64_t)&v198, v211, (uint64_t)&v200);
  v8 = v199;
  if (v199)
    goto LABEL_231;
  v19 = v198;
  v198 = 0;
  v193 = v19;
  v8 = sub_23680CBA0(v19 + 40, v19 + 40, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), v19 + 568, (uint64_t)&v202, 0);
  if ((_DWORD)v8)
    goto LABEL_227;
  sub_2367C431C((uint64_t)v195, *a5, a5[1]);
  v8 = v197;
  if (v197)
    goto LABEL_227;
  v20 = 0;
  v192 = v196;
  v196 = 0;
  do
  {
    v194 = v20;
    v21 = 5 * v20;
    v22 = &a5[10 * v20];
    v23 = *v22;
    v24 = v22[1];
    v25.n128_f64[0] = sub_2367C431C((uint64_t)&v298, *v22, v22[1]);
    v8 = v301;
    if (v301)
      goto LABEL_217;
    v294 = v298;
    v26 = (_QWORD *)*((_QWORD *)&v299 + 1);
    *((_QWORD *)&v299 + 1) = 0;
    v295 = v299;
    v296 = v26;
    v297 = v300;
    if (v22[1])
      v27 = *v22 == 0;
    else
      v27 = 1;
    if (!v27)
    {
      v28 = 0;
      v29 = v295;
      v30 = (char *)v26;
      do
      {
        memcpy(v30, (const void *)(*((_QWORD *)v22 + 3) + *((_QWORD *)v22 + 2) * v28++), 4 * *v22);
        v30 += v29;
      }
      while (v28 < v22[1]);
    }
    v25.n128_f64[0] = sub_2368AEA5C((uint64_t)&v289, (unsigned int *)&v294, 2uLL);
    v8 = v293;
    if (!v293)
    {
      v294 = v289;
      v31 = v291;
      v291 = 0;
      v32 = v292;
      v295 = v290;
      v296 = v31;
      if (v26)
      {
        v33 = -*(v26 - 3);
        do
          v34 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v34 + v33, &qword_2564313D8));
        free((void *)*(v26 - 4));
      }
      v297 = v32;
      v25.n128_f64[0] = sub_2367C431C((uint64_t)v285, v294, DWORD1(v294));
      v8 = v288;
      if (!v288)
      {
        v35 = &v302[v21];
        v190 = v24;
        v191 = v23;
        v36 = (unint64_t)(v23 + 1) >> 1;
        v37 = (unint64_t)(v24 + 1) >> 1;
        v38 = v286;
        v39 = v287;
        v287 = 0;
        sub_2368443D8((unint64_t)&v294, v286, v39);
        v35->i32[0] = v36;
        v35->i32[1] = v37;
        v25.n128_f64[0] = sub_2367C431C((uint64_t)&v278, (((unint64_t)*v22 + 1) >> 1) + 8, (((unint64_t)v22[1] + 1) >> 1) + 8);
        v8 = v284;
        if (!v284)
        {
          v187 = v37;
          v188 = v39;
          v185 = v38;
          v186 = v35;
          v274 = v280;
          v40 = v282;
          v282 = 0;
          v275 = v281;
          __src = (char *)v40;
          v276 = v40;
          v277 = v283;
          v41 = (v278 - 8);
          v42 = (v279 - 8);
          v273[0] = v278 - 8;
          v273[1] = v279 - 8;
          v8 = sub_236843F08(v22, v273);
          if (!(_DWORD)v8)
          {
            v25.n128_f64[0] = sub_2367C431C((uint64_t)&v268, v41, v42);
            v8 = v272;
            if (!v272)
            {
              v264 = v268;
              v43 = (char *)v270;
              v270 = 0;
              v265 = v269;
              v266 = v43;
              v267 = v271;
              if ((_DWORD)v42 && (_DWORD)v41)
              {
                v44 = v265;
                v45 = v275;
                v46 = 4 * v41;
                v47 = __src;
                do
                {
                  memcpy(v43, v47, v46);
                  v43 += v44;
                  v47 += v45;
                  --v42;
                }
                while (v42);
              }
              v25.n128_f64[0] = sub_2367C431C((uint64_t)&v260, v191, v190);
              v8 = v263;
              if (!v263)
              {
                v257 = v260;
                v258 = v261;
                *((_QWORD *)&v261 + 1) = 0;
                v259 = v262;
                v25.n128_f64[0] = sub_2367C431C((uint64_t)&v253, v191, v190);
                v8 = v256;
                if (!v256)
                {
                  v250 = v253;
                  v251 = v254;
                  *((_QWORD *)&v254 + 1) = 0;
                  v252 = v255;
                  v25.n128_f64[0] = sub_2367C431C((uint64_t)&v246, v36, v187);
                  v8 = v249;
                  if (!v249)
                  {
                    v243 = v246;
                    v244 = v247;
                    *((_QWORD *)&v247 + 1) = 0;
                    v245 = v248;
                    v25.n128_f64[0] = sub_2367C431C((uint64_t)&v238, v191, v190);
                    v8 = v242;
                    if (!v242)
                    {
                      v234 = v238;
                      v48 = (float *)__b;
                      __b = 0;
                      v235 = v239;
                      v236 = v48;
                      v237 = v241;
                      v49 = DWORD1(v238);
                      if (DWORD1(v238))
                      {
                        v50 = v235;
                        v51 = v234;
                        v52 = 4 * v234;
                        do
                        {
                          if (v51)
                            memset_pattern16(v48, &unk_2368AFB60, v52);
                          v48 = (float *)((char *)v48 + v50);
                          --v49;
                        }
                        while (v49);
                      }
                      v25.n128_f64[0] = sub_2367C431C((uint64_t)&v230, v36, v187);
                      v8 = v233;
                      if (!v233)
                      {
                        v227 = v230;
                        v228 = v231;
                        *((_QWORD *)&v231 + 1) = 0;
                        v229 = v232;
                        sub_23684453C((unsigned int *)&v234, (unsigned int *)&v227);
                        v53 = 0;
                        while (1)
                        {
                          sub_2368446EC((unsigned int *)&v264, (unsigned int *)&v257);
                          sub_236844884((uint64_t)&v222, v22, (uint64_t)&v257, -1.0);
                          v8 = v226;
                          if (v226)
                          {
LABEL_96:
                            v101 = *((_QWORD *)&v228 + 1);
                            *((_QWORD *)&v228 + 1) = 0;
                            if (v101)
                            {
                              v102 = -*(_QWORD *)(v101 - 24);
                              do
                                v103 = __ldaxr(&qword_2564313D8);
                              while (__stlxr(v103 + v102, &qword_2564313D8));
                              free(*(void **)(v101 - 32));
                            }
                            if (!v233)
                            {
                              v104 = *((_QWORD *)&v231 + 1);
                              *((_QWORD *)&v231 + 1) = 0;
                              if (v104)
                              {
                                v105 = -*(_QWORD *)(v104 - 24);
                                do
                                  v106 = __ldaxr(&qword_2564313D8);
                                while (__stlxr(v106 + v105, &qword_2564313D8));
                                free(*(void **)(v104 - 32));
                              }
                            }
                            break;
                          }
                          v54 = v224;
                          v224 = 0;
                          v55 = v225;
                          v250 = v222;
                          v56 = *((_QWORD *)&v251 + 1);
                          *(_QWORD *)&v251 = v223;
                          *((_QWORD *)&v251 + 1) = v54;
                          if (v56)
                          {
                            v57 = -*(_QWORD *)(v56 - 24);
                            do
                              v58 = __ldaxr(&qword_2564313D8);
                            while (__stlxr(v58 + v57, &qword_2564313D8));
                            free(*(void **)(v56 - 32));
                          }
                          v252 = v55;
                          v59 = DWORD1(v250);
                          if (DWORD1(v250))
                          {
                            v60 = 0;
                            v61 = v250;
                            v62 = (float *)*((_QWORD *)&v251 + 1);
                            v63 = v251;
                            v64 = v236;
                            v65 = v235;
                            do
                            {
                              v66 = v62;
                              v67 = v64;
                              v68 = v61;
                              if ((_DWORD)v61)
                              {
                                do
                                {
                                  v69 = *v67++;
                                  *v66 = *v66 * v69;
                                  ++v66;
                                  --v68;
                                }
                                while (v68);
                              }
                              ++v60;
                              v64 = (float *)((char *)v64 + v65);
                              v62 = (float *)((char *)v62 + v63);
                            }
                            while (v60 != v59);
                          }
                          sub_23684453C((unsigned int *)&v250, (unsigned int *)&v243);
                          v70 = DWORD1(v243);
                          if (DWORD1(v243))
                          {
                            v71 = 0;
                            v72 = v243;
                            v73 = (float *)*((_QWORD *)&v244 + 1);
                            v74 = v244;
                            v75 = (float *)*((_QWORD *)&v228 + 1);
                            v76 = v228;
                            do
                            {
                              v77 = v73;
                              v78 = v75;
                              v79 = v72;
                              if ((_DWORD)v72)
                              {
                                do
                                {
                                  v80 = *v78++;
                                  *v77 = *v77 / v80;
                                  ++v77;
                                  --v79;
                                }
                                while (v79);
                              }
                              ++v71;
                              v75 = (float *)((char *)v75 + v76);
                              v73 = (float *)((char *)v73 + v74);
                            }
                            while (v71 != v70);
                          }
                          sub_236844884((uint64_t)&v217, (unsigned int *)&v264, (uint64_t)&v243, 1.0);
                          v8 = v221;
                          if (!v221)
                          {
                            v84 = v219;
                            v219 = 0;
                            v85 = v220;
                            v25 = v217;
                            v264 = v217;
                            v86 = v266;
                            v265 = v218;
                            v266 = v84;
                            if (!v86)
                            {
                              v267 = v220;
LABEL_85:
                              v89 = v219;
                              v219 = 0;
                              if (v89)
                              {
                                v90 = -*((_QWORD *)v89 - 3);
                                do
                                  v91 = __ldaxr(&qword_2564313D8);
                                while (__stlxr(v91 + v90, &qword_2564313D8));
                                free(*((void **)v89 - 4));
                              }
                              goto LABEL_71;
                            }
                            v87 = -*((_QWORD *)v86 - 3);
                            do
                              v88 = __ldaxr(&qword_2564313D8);
                            while (__stlxr(v88 + v87, &qword_2564313D8));
                            free(*((void **)v86 - 4));
                            v267 = v85;
                            if (!v221)
                              goto LABEL_85;
                          }
LABEL_71:
                          if (!v226)
                          {
                            v81 = v224;
                            v224 = 0;
                            if (v81)
                            {
                              v82 = -*(_QWORD *)(v81 - 24);
                              do
                                v83 = __ldaxr(&qword_2564313D8);
                              while (__stlxr(v83 + v82, &qword_2564313D8));
                              free(*(void **)(v81 - 32));
                            }
                          }
                          if ((_DWORD)v8)
                            goto LABEL_96;
                          if (++v53 == 3)
                          {
                            sub_236844968(v275, v276, v185, v188, (unsigned int *)&v264);
                            v92 = v264.n128_u32[1];
                            if (v264.n128_u32[1])
                            {
                              v93 = 0;
                              v94 = v264.n128_u32[0];
                              v95 = (unsigned __int32 *)v266;
                              v96 = v265;
                              do
                              {
                                if ((_DWORD)v94)
                                {
                                  v97 = (unsigned __int32 *)(*(_QWORD *)&v186[3] + *(_QWORD *)&v186[2] * v93);
                                  v98 = v95;
                                  v99 = v94;
                                  do
                                  {
                                    v100 = *v98++;
                                    v25.n128_u32[0] = v100;
                                    *v97++ = v100;
                                    --v99;
                                  }
                                  while (v99);
                                }
                                ++v93;
                                v95 = (unsigned __int32 *)((char *)v95 + v96);
                              }
                              while (v93 != v92);
                            }
                            v8 = 0;
                            goto LABEL_96;
                          }
                        }
                      }
                      v107 = v236;
                      v236 = 0;
                      if (v107)
                      {
                        v108 = -*((_QWORD *)v107 - 3);
                        do
                          v109 = __ldaxr(&qword_2564313D8);
                        while (__stlxr(v109 + v108, &qword_2564313D8));
                        free(*((void **)v107 - 4));
                      }
                      if (!v242)
                      {
                        v110 = __b;
                        __b = 0;
                        if (v110)
                        {
                          v111 = -*(v110 - 3);
                          do
                            v112 = __ldaxr(&qword_2564313D8);
                          while (__stlxr(v112 + v111, &qword_2564313D8));
                          free((void *)*(v110 - 4));
                        }
                      }
                    }
                    v113 = *((_QWORD *)&v244 + 1);
                    *((_QWORD *)&v244 + 1) = 0;
                    if (v113)
                    {
                      v114 = -*(_QWORD *)(v113 - 24);
                      do
                        v115 = __ldaxr(&qword_2564313D8);
                      while (__stlxr(v115 + v114, &qword_2564313D8));
                      free(*(void **)(v113 - 32));
                    }
                    if (!v249)
                    {
                      v116 = *((_QWORD *)&v247 + 1);
                      *((_QWORD *)&v247 + 1) = 0;
                      if (v116)
                      {
                        v117 = -*(_QWORD *)(v116 - 24);
                        do
                          v118 = __ldaxr(&qword_2564313D8);
                        while (__stlxr(v118 + v117, &qword_2564313D8));
                        free(*(void **)(v116 - 32));
                      }
                    }
                  }
                  v119 = *((_QWORD *)&v251 + 1);
                  *((_QWORD *)&v251 + 1) = 0;
                  if (v119)
                  {
                    v120 = -*(_QWORD *)(v119 - 24);
                    do
                      v121 = __ldaxr(&qword_2564313D8);
                    while (__stlxr(v121 + v120, &qword_2564313D8));
                    free(*(void **)(v119 - 32));
                  }
                  if (!v256)
                  {
                    v122 = *((_QWORD *)&v254 + 1);
                    *((_QWORD *)&v254 + 1) = 0;
                    if (v122)
                    {
                      v123 = -*(_QWORD *)(v122 - 24);
                      do
                        v124 = __ldaxr(&qword_2564313D8);
                      while (__stlxr(v124 + v123, &qword_2564313D8));
                      free(*(void **)(v122 - 32));
                    }
                  }
                }
                v125 = *((_QWORD *)&v258 + 1);
                *((_QWORD *)&v258 + 1) = 0;
                if (v125)
                {
                  v126 = -*(_QWORD *)(v125 - 24);
                  do
                    v127 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v127 + v126, &qword_2564313D8));
                  free(*(void **)(v125 - 32));
                }
                if (!v263)
                {
                  v128 = *((_QWORD *)&v261 + 1);
                  *((_QWORD *)&v261 + 1) = 0;
                  if (v128)
                  {
                    v129 = -*(_QWORD *)(v128 - 24);
                    do
                      v130 = __ldaxr(&qword_2564313D8);
                    while (__stlxr(v130 + v129, &qword_2564313D8));
                    free(*(void **)(v128 - 32));
                  }
                }
              }
              v131 = v266;
              v266 = 0;
              if (v131)
              {
                v132 = -*((_QWORD *)v131 - 3);
                do
                  v133 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v133 + v132, &qword_2564313D8));
                free(*((void **)v131 - 4));
              }
              if (!v272)
              {
                v134 = v270;
                v270 = 0;
                if (v134)
                {
                  v135 = -*(v134 - 3);
                  do
                    v136 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v136 + v135, &qword_2564313D8));
                  free((void *)*(v134 - 4));
                }
              }
            }
          }
          v276 = 0;
          if (__src)
          {
            v137 = -*((_QWORD *)__src - 3);
            do
              v138 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v138 + v137, &qword_2564313D8));
            free(*((void **)__src - 4));
          }
          if (!v284)
          {
            v139 = v282;
            v282 = 0;
            if (v139)
            {
              v140 = -*(_QWORD *)(v139 - 24);
              do
                v141 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v141 + v140, &qword_2564313D8));
              free(*(void **)(v139 - 32));
            }
          }
          v39 = v188;
        }
        if (v39)
        {
          v142 = -*(_QWORD *)(v39 - 24);
          do
            v143 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v143 + v142, &qword_2564313D8));
          free(*(void **)(v39 - 32));
        }
        if (!v288)
        {
          v144 = v287;
          v287 = 0;
          if (v144)
          {
            v145 = -*(_QWORD *)(v144 - 24);
            do
              v146 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v146 + v145, &qword_2564313D8));
            free(*(void **)(v144 - 32));
          }
        }
      }
      if (!v293)
      {
        v147 = v291;
        v291 = 0;
        if (v147)
        {
          v148 = -*(v147 - 3);
          do
            v149 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v149 + v148, &qword_2564313D8));
          free((void *)*(v147 - 4));
        }
      }
    }
    v150 = v296;
    v296 = 0;
    if (v150)
    {
      v151 = -*(v150 - 3);
      do
        v152 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v152 + v151, &qword_2564313D8));
      free((void *)*(v150 - 4));
    }
    if (!v301)
    {
      v153 = *((_QWORD *)&v299 + 1);
      *((_QWORD *)&v299 + 1) = 0;
      if (v153)
      {
        v154 = -*(_QWORD *)(v153 - 24);
        do
          v155 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v155 + v154, &qword_2564313D8));
        free(*(void **)(v153 - 32));
      }
    }
    if ((_DWORD)v8)
      goto LABEL_217;
    v20 = v194 + 1;
  }
  while (v194 != 2);
  sub_2367D086C((uint64_t)a5, (uint64_t)v302);
  v8 = 0;
LABEL_217:
  if (v192)
  {
    v169 = -*(_QWORD *)(v192 - 24);
    do
      v170 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v170 + v169, &qword_2564313D8));
    free(*(void **)(v192 - 32));
  }
  if (!v197)
  {
    v171 = v196;
    v196 = 0;
    if (v171)
    {
      v172 = -*(_QWORD *)(v171 - 24);
      do
        v173 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v173 + v172, &qword_2564313D8));
      free(*(void **)(v171 - 32));
    }
  }
  if (v193)
LABEL_227:
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  if (!v199)
  {
    v174 = v198;
    v198 = 0;
    if (v174)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v174 + 8))(v174, v25);
  }
LABEL_231:
  v175 = *((_QWORD *)&v203 + 1);
  *((_QWORD *)&v203 + 1) = 0;
  if (v175)
  {
    v176 = -*(_QWORD *)(v175 - 24);
    do
      v177 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v177 + v176, &qword_2564313D8));
    free(*(void **)(v175 - 32));
  }
  if (!v208)
  {
    v178 = *((_QWORD *)&v206 + 1);
    *((_QWORD *)&v206 + 1) = 0;
    if (v178)
    {
      v179 = -*(_QWORD *)(v178 - 24);
      do
        v180 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v180 + v179, &qword_2564313D8));
      free(*(void **)(v178 - 32));
    }
  }
LABEL_240:
  for (nn = 26; nn != -4; nn -= 10)
    sub_2367C2F38((uint64_t *)&v211[nn]);
  if (!v214)
  {
    for (i1 = 104; i1 != -16; i1 -= 40)
      sub_2367C2F38((uint64_t *)((char *)v212 + i1));
  }
LABEL_245:
  for (i2 = 13; i2 != -2; i2 -= 5)
    sub_2367C2F38((uint64_t *)&v302[i2]);
  if (!v216)
  {
    for (i3 = 13; i3 != -2; i3 -= 5)
      sub_2367C2F38((uint64_t *)&v215[i3]);
  }
LABEL_250:
  if (!(_DWORD)v8)
  {
LABEL_251:
    if (!*(_DWORD *)(a3 + 12))
      sub_2368AE91C(a5);
    return 0;
  }
  return v8;
}

void sub_2368345D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  unint64_t v127;

  v66 = STACK[0x408];
  STACK[0x408] = 0;
  if (v66)
  {
    v67 = -*(_QWORD *)(v66 - 24);
    do
      v68 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v68 + v67, &qword_2564313D8));
    free(*(void **)(v66 - 32));
  }
  if (!LODWORD(STACK[0x448]))
  {
    v69 = STACK[0x438];
    STACK[0x438] = 0;
    if (v69)
    {
      v70 = -*(_QWORD *)(v69 - 24);
      do
        v71 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v71 + v70, &qword_2564313D8));
      free(*(void **)(v69 - 32));
    }
  }
  v72 = STACK[0x468];
  STACK[0x468] = 0;
  if (v72)
  {
    v73 = -*(_QWORD *)(v72 - 24);
    do
      v74 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v74 + v73, &qword_2564313D8));
    free(*(void **)(v72 - 32));
  }
  if (!LODWORD(STACK[0x4A8]))
  {
    v75 = STACK[0x498];
    STACK[0x498] = 0;
    if (v75)
    {
      v76 = -*(_QWORD *)(v75 - 24);
      do
        v77 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v77 + v76, &qword_2564313D8));
      free(*(void **)(v75 - 32));
    }
  }
  v78 = STACK[0x4C8];
  STACK[0x4C8] = 0;
  if (v78)
  {
    v79 = -*(_QWORD *)(v78 - 24);
    do
      v80 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v80 + v79, &qword_2564313D8));
    free(*(void **)(v78 - 32));
  }
  if (!LODWORD(STACK[0x508]))
  {
    v81 = STACK[0x4F8];
    STACK[0x4F8] = 0;
    if (v81)
    {
      v82 = -*(_QWORD *)(v81 - 24);
      do
        v83 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v83 + v82, &qword_2564313D8));
      free(*(void **)(v81 - 32));
    }
  }
  v84 = STACK[0x528];
  STACK[0x528] = 0;
  if (v84)
  {
    v85 = -*(_QWORD *)(v84 - 24);
    do
      v86 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v86 + v85, &qword_2564313D8));
    free(*(void **)(v84 - 32));
  }
  if (!LODWORD(STACK[0x568]))
  {
    v87 = STACK[0x558];
    STACK[0x558] = 0;
    if (v87)
    {
      v88 = -*(_QWORD *)(v87 - 24);
      do
        v89 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v89 + v88, &qword_2564313D8));
      free(*(void **)(v87 - 32));
    }
  }
  v90 = STACK[0x588];
  STACK[0x588] = 0;
  if (v90)
  {
    v91 = -*(_QWORD *)(v90 - 24);
    do
      v92 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v92 + v91, &qword_2564313D8));
    free(*(void **)(v90 - 32));
  }
  if (!LODWORD(STACK[0x5C8]))
  {
    v93 = STACK[0x5B8];
    STACK[0x5B8] = 0;
    if (v93)
    {
      v94 = -*(_QWORD *)(v93 - 24);
      do
        v95 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v95 + v94, &qword_2564313D8));
      free(*(void **)(v93 - 32));
    }
  }
  v127 = STACK[0x5E8];
  STACK[0x5E8] = 0;
  if (v127)
  {
    v96 = -*(_QWORD *)(v127 - 24);
    do
      v97 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v97 + v96, &qword_2564313D8));
    free(*(void **)(v127 - 32));
  }
  if (!LODWORD(STACK[0x628]))
  {
    v98 = STACK[0x618];
    STACK[0x618] = 0;
    if (v98)
    {
      v99 = -*(_QWORD *)(v98 - 24);
      do
        v100 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v100 + v99, &qword_2564313D8));
      free(*(void **)(v98 - 32));
    }
  }
  if (a12)
  {
    v101 = -*(_QWORD *)(a12 - 24);
    do
      v102 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v102 + v101, &qword_2564313D8));
    free(*(void **)(a12 - 32));
  }
  if (!LODWORD(STACK[0x658]))
  {
    v103 = STACK[0x648];
    STACK[0x648] = 0;
    if (v103)
    {
      v104 = -*(_QWORD *)(v103 - 24);
      do
        v105 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v105 + v104, &qword_2564313D8));
      free(*(void **)(v103 - 32));
    }
  }
  if (!LODWORD(STACK[0x688]))
  {
    v106 = STACK[0x678];
    STACK[0x678] = 0;
    if (v106)
    {
      v107 = -*(_QWORD *)(v106 - 24);
      do
        v108 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v108 + v107, &qword_2564313D8));
      free(*(void **)(v106 - 32));
    }
  }
  v109 = STACK[0x6A8];
  STACK[0x6A8] = 0;
  if (v109)
  {
    v110 = -*(_QWORD *)(v109 - 24);
    do
      v111 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v111 + v110, &qword_2564313D8));
    free(*(void **)(v109 - 32));
  }
  if (!LODWORD(STACK[0x6E0]))
  {
    v112 = STACK[0x6D0];
    STACK[0x6D0] = 0;
    if (v112)
    {
      v113 = -*(_QWORD *)(v112 - 24);
      do
        v114 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v114 + v113, &qword_2564313D8));
      free(*(void **)(v112 - 32));
    }
  }
  if (a16)
  {
    v115 = -*(_QWORD *)(a16 - 24);
    do
      v116 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v116 + v115, &qword_2564313D8));
    free(*(void **)(a16 - 32));
  }
  if (!a24 && a22)
  {
    v117 = -*(_QWORD *)(a22 - 24);
    do
      v118 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v118 + v117, &qword_2564313D8));
    free(*(void **)(a22 - 32));
  }
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  if (!a26 && a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  if (a32)
  {
    v119 = -*(_QWORD *)(a32 - 24);
    do
      v120 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v120 + v119, &qword_2564313D8));
    free(*(void **)(a32 - 32));
  }
  if (!a39 && a37)
  {
    v121 = -*(_QWORD *)(a37 - 24);
    do
      v122 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v122 + v121, &qword_2564313D8));
    free(*(void **)(a37 - 32));
  }
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a64 + i));
  if (!LODWORD(STACK[0x2A8]))
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x230] + j));
  }
  for (k = 104; k != -16; k -= 40)
    sub_2367C2F38((uint64_t *)(v64 - 216 + k));
  if (!LODWORD(STACK[0x328]))
  {
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x2B0] + m));
  }
  _Unwind_Resume(a1);
}

void sub_236834CF0(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int64x2_t v32;
  char *v33;
  int64x2_t *v34;

  v4 = a1->i64[0];
  v5 = a1->i64[1];
  v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - a1->i64[0]) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v27 = v4 + 176 * a2;
      while (v5 != v27)
      {
        v5 -= 176;
        sub_236831428(v5);
      }
      a1->i64[1] = v27;
    }
  }
  else
  {
    v8 = a1[1].i64[0];
    if (0x2E8BA2E8BA2E8BA3 * ((v8 - v5) >> 4) >= v7)
    {
      v28 = v5 + 176 * v7;
      v29 = 176 * a2 - 16 * ((v5 - a1->i64[0]) >> 4);
      do
      {
        sub_23683CCEC(v5);
        v5 += 176;
        v29 -= 176;
      }
      while (v29);
      a1->i64[1] = v28;
    }
    else
    {
      if (a2 > 0x1745D1745D1745DLL)
        sub_2367C3440();
      v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v4) >> 4);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0xBA2E8BA2E8BA2ELL)
        v11 = 0x1745D1745D1745DLL;
      else
        v11 = v10;
      v34 = a1 + 1;
      if (v11 > 0x1745D1745D1745DLL)
        sub_2367C3488();
      v12 = 176 * v11;
      v13 = (char *)operator new(176 * v11);
      v14 = (uint64_t)&v13[176 * v6];
      v31 = v13;
      v32.i64[0] = v14;
      v32.i64[1] = v14;
      v33 = &v13[v12];
      v15 = 176 * a2;
      v16 = &v13[176 * a2];
      v17 = v15 - 176 * v6;
      do
      {
        sub_23683CCEC(v14);
        v14 += 176;
        v17 -= 176;
      }
      while (v17);
      v32.i64[1] = (uint64_t)v16;
      v19 = a1->i64[0];
      v18 = a1->u64[1];
      v20 = v32.i64[0];
      if (v18 == a1->i64[0])
      {
        v26 = vdupq_n_s64(v18);
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v20 + v21;
          v23 = v18 + v21;
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *(_QWORD *)(v22 - 160) = 0;
          *(_OWORD *)(v22 - 176) = *(_OWORD *)(v18 + v21 - 176);
          *(_QWORD *)(v22 - 160) = *(_QWORD *)(v18 + v21 - 160);
          *(_QWORD *)(v23 - 176) = 0;
          *(_QWORD *)(v23 - 168) = 0;
          *(_QWORD *)(v23 - 160) = 0;
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_QWORD *)(v22 - 136) = 0;
          *(_OWORD *)(v22 - 152) = *(_OWORD *)(v18 + v21 - 152);
          *(_QWORD *)(v22 - 136) = *(_QWORD *)(v18 + v21 - 136);
          *(_QWORD *)(v23 - 152) = 0;
          *(_QWORD *)(v23 - 144) = 0;
          *(_QWORD *)(v23 - 136) = 0;
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *(_QWORD *)(v22 - 112) = 0;
          *(_OWORD *)(v22 - 128) = *(_OWORD *)(v18 + v21 - 128);
          *(_QWORD *)(v22 - 112) = *(_QWORD *)(v18 + v21 - 112);
          *(_QWORD *)(v23 - 120) = 0;
          *(_QWORD *)(v23 - 112) = 0;
          *(_QWORD *)(v23 - 128) = 0;
          *(_BYTE *)(v22 - 104) = *(_BYTE *)(v18 + v21 - 104);
          *(_QWORD *)(v22 - 88) = 0;
          *(_QWORD *)(v22 - 80) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_OWORD *)(v22 - 96) = *(_OWORD *)(v18 + v21 - 96);
          *(_QWORD *)(v22 - 80) = *(_QWORD *)(v18 + v21 - 80);
          *(_QWORD *)(v23 - 96) = 0;
          *(_QWORD *)(v23 - 88) = 0;
          *(_QWORD *)(v23 - 80) = 0;
          *(_QWORD *)(v22 - 72) = &off_2507FF438;
          v24 = *(_OWORD *)(v18 + v21 - 48);
          v25 = *(_QWORD *)(v18 + v21 - 32);
          *(_OWORD *)(v22 - 64) = *(_OWORD *)(v18 + v21 - 64);
          *(_OWORD *)(v22 - 48) = v24;
          *(_QWORD *)(v22 - 32) = v25;
          *(_QWORD *)(v22 - 24) = 0;
          *(_QWORD *)(v22 - 16) = 0;
          *(_QWORD *)(v22 - 8) = 0;
          *(_OWORD *)(v22 - 24) = *(_OWORD *)(v18 + v21 - 24);
          *(_QWORD *)(v22 - 8) = *(_QWORD *)(v18 + v21 - 8);
          *(_QWORD *)(v23 - 24) = 0;
          *(_QWORD *)(v23 - 16) = 0;
          *(_QWORD *)(v23 - 8) = 0;
          v21 -= 176;
        }
        while (v18 + v21 != v19);
        v20 += v21;
        v26 = *a1;
        v16 = (char *)v32.i64[1];
      }
      a1->i64[0] = v20;
      a1->i64[1] = (uint64_t)v16;
      v32 = v26;
      v30 = (char *)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v33;
      v33 = v30;
      v31 = (char *)v26.i64[0];
      sub_23683CDC4((uint64_t)&v31);
    }
  }
}

void sub_236834F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_236834FC0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  int64x2_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64x2_t *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int *v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t i;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  int64x2_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int16 *v123;
  _BYTE *v124;
  uint64_t v125;
  __int16 *v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  unsigned int *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  char *v139;
  _QWORD *v140;
  char **v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  char **v147;
  char *v148;
  char *v149;
  int v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int64x2_t *v159;
  int64x2_t *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char v166;
  _QWORD *v167;
  _QWORD *v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned __int8 v173;
  unsigned __int8 *v174;
  unsigned __int8 v175;
  unsigned int v176;
  uint64_t v178;
  _BOOL8 v179;
  unsigned __int8 v180;
  uint64_t j;
  void *v182;
  uint64_t k;
  uint64_t m;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  int v203;
  int64x2_t *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t *v208;
  void *__p[3];
  void *v210;
  _BYTE *v211;
  uint64_t v212;
  int v213;
  void *__dst[3];
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  unsigned int v226;
  int64x2_t *v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  _QWORD v231[3];
  char *v232[6];
  __int128 v233;
  uint64_t v234;
  float32x2_t v235;
  float v236;
  _BYTE __src[220];
  _BYTE v238[112];
  _BYTE v239[216];
  char v240;
  float32x2_t v241;
  float v242;
  _BYTE v243[212];
  int v244;
  _OWORD v245[7];
  _BYTE v246[212];
  int v247;
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v227 = (int64x2_t *)a5;
  v228 = a4;
  v192 = *(_QWORD *)(a5 + 72);
  v193 = *(_QWORD *)(a5 + 80);
  sub_2367C4420((uint64_t)&v215, *(_QWORD *)(a5 + 56), *(_QWORD *)(a5 + 64), 0);
  v9 = v226;
  if (!v226)
  {
    v189 = a2;
    *(_OWORD *)v246 = v219;
    v10 = v217;
    v11 = v218;
    v12 = v221;
    *(_QWORD *)&v246[16] = v220;
    v13 = v222;
    *(_QWORD *)&__src[32] = v225;
    v217 = 0;
    v221 = 0;
    *(_OWORD *)__src = v223;
    *(_OWORD *)&__src[16] = v224;
    v14 = v215;
    *(_QWORD *)(a5 + 1120) = v216;
    v15 = *(_QWORD *)(a5 + 1128);
    *(_QWORD *)(a5 + 1128) = v10;
    v194 = a5;
    *(_OWORD *)(a5 + 1104) = v14;
    if (v15)
    {
      v16 = -*(_QWORD *)(v15 - 24);
      do
        v17 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v17 + v16, &qword_2564313D8));
      free(*(void **)(v15 - 32));
    }
    *(_QWORD *)(a5 + 1136) = v11;
    *(_QWORD *)(a5 + 1160) = *(_QWORD *)&v246[16];
    v188 = a5 + 1144;
    *(_OWORD *)(a5 + 1144) = *(_OWORD *)v246;
    v18 = *(_QWORD *)(a5 + 1168);
    *(_QWORD *)(a5 + 1168) = v12;
    if (v18)
    {
      v19 = -*(_QWORD *)(v18 - 24);
      do
        v20 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v20 + v19, &qword_2564313D8));
      free(*(void **)(v18 - 32));
    }
    *(_QWORD *)(a5 + 1176) = v13;
    v21 = *(_OWORD *)&__src[16];
    *(_OWORD *)(a5 + 1184) = *(_OWORD *)__src;
    *(_OWORD *)(a5 + 1200) = v21;
    *(_QWORD *)(a5 + 1216) = *(_QWORD *)&__src[32];
    v22 = *(unsigned int *)(a5 + 156);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = *(unsigned int *)(a5 + 152);
      if (v24 <= 1)
        v25 = 1;
      else
        v25 = *(unsigned int *)(a5 + 152);
      v26 = *(unsigned int *)(a5 + 152);
      do
      {
        if (v26)
        {
          memset((void *)(*(_QWORD *)(a5 + 176) + *(_QWORD *)(a5 + 168) * v23), 1, v25);
          v26 = v24;
        }
        ++v23;
      }
      while (v22 != v23);
    }
    sub_2367DBF00(0, (unsigned int *)(a5 + 1064));
    v27 = v227;
    v28 = (_QWORD *)v227[264].i64[1];
    v29 = (_QWORD *)v227[264].i64[0];
    if (v28 == v29)
    {
      v32 = (uint64_t *)v227;
    }
    else
    {
      do
      {
        v31 = *--v28;
        v30 = v31;
        *v28 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      while (v28 != v29);
      v32 = (uint64_t *)v227;
      v28 = (_QWORD *)v227[264].i64[0];
    }
    v27[264].i64[1] = (uint64_t)v29;
    if (0x2E8BA2E8BA2E8BA3 * ((v32[649] - v32[648]) >> 4) <= (unint64_t)((v32[529] - (uint64_t)v28) >> 3))
    {
LABEL_45:
      memset(&v246[4], 0, 208);
      v247 = 0;
      memset((char *)v245 + 4, 0, 108);
      v244 = 0;
      memset(&v243[4], 0, 208);
      *(_DWORD *)__src = 0;
      *(_OWORD *)&__src[4] = *(_OWORD *)v246;
      *(_OWORD *)&__src[20] = *(_OWORD *)&v246[16];
      *(_OWORD *)&__src[84] = *(_OWORD *)&v246[80];
      *(_OWORD *)&__src[68] = *(_OWORD *)&v246[64];
      *(_OWORD *)&__src[52] = *(_OWORD *)&v246[48];
      *(_OWORD *)&__src[36] = *(_OWORD *)&v246[32];
      *(_OWORD *)&__src[148] = *(_OWORD *)&v246[144];
      *(_OWORD *)&__src[132] = *(_OWORD *)&v246[128];
      *(_OWORD *)&__src[116] = *(_OWORD *)&v246[112];
      *(_OWORD *)&__src[100] = *(_OWORD *)&v246[96];
      *(_QWORD *)&__src[212] = 0;
      *(_OWORD *)&__src[196] = *(_OWORD *)&v246[192];
      *(_OWORD *)&__src[180] = *(_OWORD *)&v246[176];
      *(_OWORD *)&__src[164] = *(_OWORD *)&v246[160];
      *(_OWORD *)&v238[48] = v245[3];
      *(_OWORD *)&v238[64] = v245[4];
      *(_OWORD *)&v238[80] = v245[5];
      *(_OWORD *)&v238[96] = 0u;
      *(_OWORD *)v238 = v245[0];
      *(_OWORD *)&v238[16] = v245[1];
      *(_OWORD *)&v238[32] = v245[2];
      *(_OWORD *)v239 = *(_OWORD *)v243;
      *(_OWORD *)&v239[16] = *(_OWORD *)&v243[16];
      *(_OWORD *)&v239[64] = *(_OWORD *)&v243[64];
      *(_OWORD *)&v239[80] = *(_OWORD *)&v243[80];
      *(_OWORD *)&v239[32] = *(_OWORD *)&v243[32];
      *(_OWORD *)&v239[48] = *(_OWORD *)&v243[48];
      *(_OWORD *)&v239[128] = *(_OWORD *)&v243[128];
      *(_OWORD *)&v239[144] = *(_OWORD *)&v243[144];
      *(_OWORD *)&v239[96] = *(_OWORD *)&v243[96];
      *(_OWORD *)&v239[112] = *(_OWORD *)&v243[112];
      *(_QWORD *)&v239[208] = 0;
      *(_OWORD *)&v239[176] = *(_OWORD *)&v243[176];
      *(_OWORD *)&v239[192] = *(_OWORD *)&v243[192];
      *(_OWORD *)&v239[160] = *(_OWORD *)&v243[160];
      v240 = 0;
      sub_23683C5F8(__dst, __src);
      sub_2367DC53C((uint64_t)__src);
      v51 = a1[19] - a1[18];
      v52 = 0x100000000;
      if (*(_DWORD *)(v189 + 32) == 2)
        v52 = 1;
      _ZF = v51 == 48;
      v53 = v51 != 48;
      if (_ZF)
        v52 = 0;
      v212 = v52;
      v213 = 2 * v53;
      sub_2367CBE88(&v210, 0xC0uLL);
      v54 = 0;
      v187 = a5 + 1104;
      v55 = a1[18];
      v56 = a1[12];
      v57 = (char *)v210;
      do
      {
        v58 = 0;
        v59 = (int *)(v56 + 268 * *(unsigned int *)(v55 + 48 * *((int *)&v212 + v54) + 12));
        v241.f32[v54] = 2040.0 / (float)*v59;
        v60 = v57;
        do
        {
          v61 = 0;
          v62 = v60;
          do
          {
            *v62 = v59[v61];
            v62 += 8;
            ++v61;
          }
          while (v61 != 8);
          ++v58;
          ++v60;
          v59 += 8;
        }
        while (v58 != 8);
        ++v54;
        v57 += 256;
      }
      while (v54 != 3);
      sub_23685B348(a5 + 208, (uint64_t)&v241);
      __asm { FMOV            V1.2S, #1.0 }
      v235 = vdiv_f32(_D1, v241);
      v236 = 1.0 / v242;
      memset(&__src[8], 0, 212);
      *(_DWORD *)__src = 7;
      memset(&v238[4], 0, 108);
      memset(&v239[4], 0, 212);
      v240 = 0;
      v66 = operator new();
      *(_QWORD *)v66 = 0;
      *(_QWORD *)(v66 + 8) = 0;
      *(_QWORD *)(v66 + 16) = 0;
      *(_QWORD *)&v238[4] = v66;
      sub_2367D4108((char *)v66, (char *)v210, (uint64_t)v211, (v211 - (_BYTE *)v210) >> 2);
      *(_DWORD *)&v238[12] = 973111425;
      sub_23683C6A0((_QWORD *)__dst[0], __src);
      sub_2367DC53C((uint64_t)__src);
      v9 = sub_23685B47C(a5 + 208, __dst, v228);
      if (!(_DWORD)v9)
      {
        *(_QWORD *)&__src[32] = 0x100010000;
        *(_QWORD *)&__src[64] = a5 + 208;
        sub_2368062D0((uint64_t)__src);
        *(float *)&__src[48] = *(float *)&__src[40] / (float)*(int *)&__src[36];
        *(_QWORD *)&__src[52] = 0x3F0000003F000000;
        *(_DWORD *)&__src[60] = 1056964608;
        *(_QWORD *)(a5 + 1016) = *(_QWORD *)&__src[64];
        v67 = *(_OWORD *)&__src[16];
        *(_OWORD *)(a5 + 952) = *(_OWORD *)__src;
        *(_OWORD *)(a5 + 968) = v67;
        v68 = *(_OWORD *)&__src[48];
        *(_OWORD *)(a5 + 984) = *(_OWORD *)&__src[32];
        *(_OWORD *)(a5 + 1000) = v68;
        sub_2368062D0(a5 + 952);
        v69 = *(unsigned int *)(a5 + 1028);
        if ((_DWORD)v69)
        {
          v70 = 0;
          v71 = (int)*(float *)(a5 + 992);
          v72 = *(_QWORD *)(a5 + 1048);
          v73 = *(_QWORD *)(a5 + 1040);
          LODWORD(v74) = *(_DWORD *)(a5 + 1024);
          do
          {
            if ((_DWORD)v74)
            {
              v75 = 0;
              do
              {
                *(_DWORD *)(v72 + 4 * v75++) = v71;
                v74 = *(unsigned int *)(a5 + 1024);
              }
              while (v75 < v74);
              v69 = *(unsigned int *)(a5 + 1028);
            }
            ++v70;
            v72 += v73;
          }
          while (v70 < v69);
        }
        sub_2367CBE88(__p, 0xC0uLL);
        v76 = 0;
        v77 = (char *)v210;
        v78 = (char *)__p[0];
        v79 = (char *)v210 + 256;
        do
        {
          for (i = 0; i != 256; i += 4)
            *(_DWORD *)&v78[i] = (*(_DWORD *)&v79[i] << 11) / *(_DWORD *)&v77[i];
          ++v76;
          v78 += 256;
          v77 += 256;
        }
        while (v76 != 3);
        v207 = a1;
        v208 = &v212;
        v203 = *(_DWORD *)(v189 + 32);
        v201 = v189 + 40;
        v186 = a3;
        v190 = a1;
        if (sub_2367CB2F4(v189 + 40) && v227[295].i8[9] && a1[19] - a1[18] == 144)
        {
          v81 = 0;
          v82 = 0;
          *(_QWORD *)v243 = 0x200000000;
          while (1)
          {
            v83 = v81;
            *(_QWORD *)&v245[0] = *(int *)&v243[4 * v82];
            v84 = a5 + 1144;
            if (!LODWORD(v245[0]))
              v84 = a5 + 1104;
            v232[0] = (char *)v84;
            LODWORD(v231[0]) = 1118306304;
            v85 = 1212;
            if (!LODWORD(v245[0]))
              v85 = 1208;
            *(float *)&v229 = *(float *)(a5 + v85) + (float)(*(float *)(a5 + 1204) * 0.0);
            LODWORD(v206) = 1109916595;
            *(_QWORD *)__src = v232;
            *(_QWORD *)&__src[8] = a5 + 8;
            *(_QWORD *)&__src[16] = &v207;
            *(_QWORD *)&__src[24] = v245;
            *(_QWORD *)&__src[32] = __p;
            *(_QWORD *)&__src[40] = v231;
            *(_QWORD *)&__src[48] = &v229;
            *(_QWORD *)&__src[56] = &v206;
            v86 = *(unsigned int *)(v84 + 4);
            if (a3)
            {
              v87 = sub_23683C78C(a3, v86, (uint64_t)__src);
            }
            else
            {
              *(_QWORD *)v246 = 0;
              *(_QWORD *)&v246[8] = v246;
              v87 = sub_23683C78C((uint64_t)v246, v86, (uint64_t)__src);
            }
            v9 = v87;
            if (v87)
              break;
            v81 = 1;
            v82 = 1;
            if ((v83 & 1) != 0)
              goto LABEL_80;
          }
        }
        else
        {
LABEL_80:
          sub_2367CA770((uint64_t)v246, v192, v193);
          v9 = *(unsigned int *)&v246[120];
          if (!*(_DWORD *)&v246[120])
          {
            sub_2367CA9E4((uint64_t)v243, (uint64_t)v246);
            if (!sub_2367CB2F4(v201))
            {
              sub_23680EC1C((unsigned int *)v243);
              v167 = (_QWORD *)v227[264].i64[0];
              v168 = (_QWORD *)v227[264].i64[1];
              while (v167 != v168)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)*v167 + 48))(*v167);
                ++v167;
              }
            }
            v234 = 0;
            v233 = 0u;
            memset(v232, 0, sizeof(v232));
            sub_2367D7BB0(v232, 0x800uLL);
            sub_2367D7BB0(&v232[3], 0x800uLL);
            sub_2367D7BB0((char **)&v233, 0x800uLL);
            v88 = 0;
            memset(v231, 0, sizeof(v231));
            v229 = 1;
            v230 = 2;
            v89 = v194;
            do
            {
              v90 = *((_DWORD *)&v229 + v88);
              v91 = v90;
              _ZF = a1[19] - a1[18] != 48 || v90 == 1;
              v191 = v88;
              if (_ZF)
              {
                if (*(_QWORD *)(v89 + 120))
                {
                  v93 = 0;
                  v94 = *(unsigned int *)(v189 + 4 * v90 + 48);
                  v95 = *(_BYTE *)(v189 + 60) - byte_236923AD4[v94];
                  v198 = *(_BYTE *)(v189 + 61) - byte_236923AD8[v94];
                  if (v90)
                    v96 = v188;
                  else
                    v96 = v187;
                  v196 = v96;
                  v97 = v227;
                  do
                  {
                    v98 = *(_QWORD *)(v89 + 88);
                    memset(v245, 0, 88);
                    v99 = v97[264].i64[0];
                    if (v97[264].i64[1] != v99)
                    {
                      v100 = 0;
                      do
                      {
                        *((_QWORD *)v245 + v100) = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(v99 + 8 * v100) + 24))(*(_QWORD *)(v99 + 8 * v100), v91, v93, 0);
                        ++v100;
                        v97 = v227;
                        v99 = v227[264].i64[0];
                      }
                      while (v100 < (v227[264].i64[1] - v99) >> 3);
                    }
                    v101 = 32 * (v93 / v98);
                    v102 = v101 + 32;
                    if (v193 < v101 + 32)
                      v102 = v193;
                    v200 = v102;
                    v195 = v93;
                    if (v101 < v102)
                    {
                      v103 = 32 * (v93 % v98);
                      if (v192 >= v103 + 32)
                        v104 = v103 + 32;
                      else
                        v104 = v192;
                      v199 = 32 * (v93 % v98);
                      do
                      {
                        v105 = v101 >> v198;
                        if (v101 >> v198 << v198 == v101 && v103 < v104)
                        {
                          v106 = v207[18];
                          v107 = v106 + 48 * *((int *)v208 + v91);
                          v108 = *(_QWORD *)(v107 + 24) + ((v105 * *(unsigned int *)(v107 + 16)) << 7);
                          v109 = v106 + 48 * *((int *)v208 + 1);
                          v110 = *(_QWORD *)(v109 + 24) + ((v101 * *(unsigned int *)(v109 + 16)) << 7);
                          v111 = *(_QWORD *)&v243[40 * (int)v91 + 24] + *(_QWORD *)&v243[16] * v105;
                          v197 = *(_QWORD *)(v196 + 24) + *(_QWORD *)(v196 + 16) * (v101 >> 3);
                          do
                          {
                            v112 = v103 >> v95;
                            if (v103 >> v95 << v95 == v103)
                            {
                              v113 = *(__int16 *)(v108 + (v112 << 7));
                              if (v203 != 2)
                                v113 += 1024 / *((_DWORD *)v210 + 64 * v91);
                              v114 = v113 + 1024;
                              if ((v113 + 1024) >= 0x7FF)
                                v114 = 2047;
                              ++*(_QWORD *)&v232[3 * (int)v91][8 * v114];
                              ++v231[v91];
                              *(float *)(v111 + 4 * v112) = v235.f32[v91] * (float)v113;
                              if ((_DWORD)v91 != 1 && v97[295].i8[9] && sub_2367CB2F4(v201))
                              {
                                v115 = 0;
                                v116 = 818089009 * (*(char *)(v197 + (v103 >> 3)) << 11);
                                v117 = (v116 >> 36) + ((unint64_t)v116 >> 63);
                                v118 = (char *)__p[0] + 256 * v91;
                                v119 = __src;
                                do
                                {
                                  v120 = 0;
                                  v121 = 0;
                                  do
                                  {
                                    *(_DWORD *)&v119[v120] = *(__int16 *)(v108 + 2 * (v115 + (v103 << 6) + 8 * v121))
                                                           - ((((*(_DWORD *)&v118[v120] * v117 + 1024) >> 11)
                                                             * *(__int16 *)(v110 + 2 * (v115 + (v103 << 6) + 8 * v121))
                                                             + 1024) >> 11);
                                    ++v121;
                                    v120 += 4;
                                  }
                                  while (v120 != 32);
                                  ++v115;
                                  v119 += 32;
                                  v118 += 32;
                                }
                                while (v115 != 8);
                              }
                              else
                              {
                                v122 = 0;
                                v123 = (__int16 *)(v108 + (v112 << 7));
                                v124 = __src;
                                do
                                {
                                  v125 = 0;
                                  v126 = v123;
                                  do
                                  {
                                    v127 = *v126;
                                    v126 += 8;
                                    *(_DWORD *)&v124[v125] = v127;
                                    v125 += 4;
                                  }
                                  while (v125 != 32);
                                  ++v122;
                                  v124 += 32;
                                  ++v123;
                                }
                                while (v122 != 8);
                              }
                              v206 = 0x100000000;
                              sub_2368AE774((unint64_t *)&v97[267], __src, (unsigned int *)&v206, (void **)v245);
                              v97 = v227;
                              v128 = v227[264].i64[1] - v227[264].i64[0];
                              if (v128)
                              {
                                v129 = v128 >> 3;
                                if (v129 <= 1)
                                  v129 = 1;
                                v130 = v245;
                                do
                                {
                                  *v130++ += 256;
                                  --v129;
                                }
                                while (v129);
                              }
                            }
                            ++v103;
                          }
                          while (v103 < v104);
                        }
                        ++v101;
                        v103 = v199;
                      }
                      while (v101 != v200);
                    }
                    v89 = v194;
                    v93 = v195 + 1;
                  }
                  while (v195 + 1 < *(_QWORD *)(v194 + 120));
                }
              }
              else
              {
                v131 = (_QWORD *)v227[264].i64[0];
                v132 = (_QWORD *)v227[264].i64[1];
                while (v131 != v132)
                {
                  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v131 + 56))(*v131, v91);
                  ++v131;
                }
                v133 = (unsigned int *)&v243[40 * (int)v91];
                if (*v133 && v133[1])
                {
                  v134 = 0;
                  do
                    bzero((void *)(*((_QWORD *)v133 + 3) + *((_QWORD *)v133 + 2) * v134++), 4 * *v133);
                  while (v134 < v133[1]);
                }
                *((_QWORD *)v232[3 * (int)v91] + 1024) = 1;
                v231[v91] = 1;
                v89 = v194;
              }
              a1 = v190;
              v88 = v191 + 1;
            }
            while (v191 != 2);
            v135 = 0;
            v202 = (uint64_t *)v227;
            v204 = v227 + 110;
            v227[118].i64[0] = 1;
            do
            {
              v136 = 0;
              v137 = 0;
              v138 = &v204->i64[3 * v135];
              v140 = v138 + 2;
              v139 = (char *)*v138;
              v138[1] = *v138;
              v141 = (char **)(v138 + 1);
              v205 = v135;
              v142 = v231[v135];
              v143 = __clz(v142) ^ 0x3F;
              if ((v142 & (v142 - 1)) != 0)
                ++v143;
              v144 = ((v143 + 0x1FFFFFFF4) >> 1) & ~((int)((v143 + 0x1FFFFFFF4) >> 1) >> 31);
              if (v144 >= 2)
                v144 = 2;
              v145 = v144 + 1;
              v146 = v142 / v145;
              v147 = &v232[3 * v135];
              v148 = v139;
              v149 = v139;
              do
              {
                v137 += *(_QWORD *)&(*v147)[8 * v136];
                if (v137 > v146)
                {
                  v150 = v136 - 1025;
                  if ((unint64_t)v149 >= *v140)
                  {
                    v152 = (v149 - v148) >> 2;
                    v153 = v152 + 1;
                    if ((unint64_t)(v152 + 1) >> 62)
                      sub_2367C3440();
                    v154 = *v140 - (_QWORD)v148;
                    if (v154 >> 1 > v153)
                      v153 = v154 >> 1;
                    _CF = (unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL;
                    v155 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!_CF)
                      v155 = v153;
                    if (v155)
                    {
                      v155 = (unint64_t)sub_2367C3454(v155);
                      v149 = *v141;
                      v148 = (char *)*v138;
                    }
                    else
                    {
                      v156 = 0;
                    }
                    v139 = (char *)(v155 + 4 * v152);
                    *(_DWORD *)v139 = v150;
                    v151 = v139 + 4;
                    while (v149 != v148)
                    {
                      v157 = *((_DWORD *)v149 - 1);
                      v149 -= 4;
                      *((_DWORD *)v139 - 1) = v157;
                      v139 -= 4;
                    }
                    *v138 = (uint64_t)v139;
                    *v141 = v151;
                    *v140 = v155 + 4 * v156;
                    if (v148)
                    {
                      operator delete(v148);
                      v139 = (char *)*v138;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v149 = v150;
                    v151 = v149 + 4;
                  }
                  *v141 = v151;
                  v148 = v139;
                  v149 = v151;
                  v146 = (v142 + v142 * ((v151 - v139) >> 2)) / v145;
                }
                ++v136;
              }
              while (v136 != 2048);
              v158 = v202[236] + v202[236] * ((v149 - v139) >> 2);
              v202[236] = v158;
              v135 = v205 + 1;
            }
            while (v205 != 2);
            v159 = v227;
            v227[116].i64[1] = v227[116].i64[0];
            __src[0] = 0;
            if (v158)
            {
              v160 = v159 + 116;
              sub_2367C8504((int64x2_t *)v159[116].i64, 39 * v158, __src);
              v161 = v186;
              v162 = v189;
              if (v202[236])
              {
                v163 = 0;
                v164 = (((v202[224] - v202[223]) << 30) + 0x100000000) >> 32;
                do
                {
                  *(_BYTE *)(v160->i64[0] + v163) = v163 / v164;
                  v165 = v202[236];
                  v166 = v163 % v164 + v165 / v164;
                  *(_BYTE *)(v160->i64[0] + 26 * v165 + v163) = v166;
                  *(_BYTE *)(v160->i64[0] + 13 * v202[236] + v163++) = v166;
                }
                while (v163 < v202[236]);
              }
            }
            else
            {
              v161 = v186;
              v162 = v189;
            }
            v169 = (unsigned __int8 *)v159[116].i64[0];
            v170 = (unsigned __int8 *)v159[116].i64[1];
            if (v169 == v170)
            {
              v172 = v194;
            }
            else
            {
              v171 = v169 + 1;
              v172 = v194;
              if (v169 + 1 != v170)
              {
                v173 = *v169;
                v174 = v169 + 1;
                do
                {
                  v176 = *v174++;
                  v175 = v176;
                  _CF = v173 >= v176;
                  if (v173 <= v176)
                    v173 = v175;
                  if (!_CF)
                    v169 = v171;
                  v171 = v174;
                }
                while (v174 != v170);
              }
            }
            v227[117].i64[1] = *v169 + 1;
            LOBYTE(v229) = 0;
            *(_QWORD *)__src = &v229;
            *(_QWORD *)&__src[8] = &v227;
            *(_QWORD *)&__src[16] = &v228;
            *(_QWORD *)&__src[24] = v162;
            *(_QWORD *)&__src[32] = v243;
            v178 = *(unsigned int *)(v172 + 128);
            if (v161)
            {
              v179 = sub_23683C820(v161, v178, (uint64_t)__src);
            }
            else
            {
              *(_QWORD *)&v245[0] = 0;
              *((_QWORD *)&v245[0] + 1) = v245;
              v179 = sub_23683C820((uint64_t)v245, v178, (uint64_t)__src);
            }
            v9 = v179;
            if (!v179)
            {
              v180 = atomic_load((unsigned __int8 *)&v229);
              v9 = v180 & 1;
            }
            for (j = 0; j != -72; j -= 24)
            {
              v182 = *(void **)((char *)&v233 + j);
              if (v182)
              {
                *(_QWORD *)((char *)&v233 + j + 8) = v182;
                operator delete(v182);
              }
            }
            for (k = 104; k != -16; k -= 40)
              sub_2367C2F38((uint64_t *)&v243[k]);
            if (!*(_DWORD *)&v246[120])
            {
              for (m = 104; m != -16; m -= 40)
                sub_2367C2F38((uint64_t *)&v246[m]);
            }
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v210)
      {
        v211 = v210;
        operator delete(v210);
      }
      *(_QWORD *)__src = __dst;
      sub_2367DC2DC((void ***)__src);
    }
    else
    {
      while (1)
      {
        sub_2367DA928((uint64_t)v246, 0x10000u, *(_QWORD *)(a5 + 120));
        v9 = *(unsigned int *)&v246[8];
        if (*(_DWORD *)&v246[8])
          break;
        v33 = *(_QWORD *)v246;
        *(_QWORD *)v246 = 0;
        v34 = v227;
        v35 = (_QWORD *)v227[264].i64[1];
        v36 = v227[265].u64[0];
        if ((unint64_t)v35 >= v36)
        {
          v38 = v227[264].i64[0];
          v39 = ((uint64_t)v35 - v38) >> 3;
          if ((unint64_t)(v39 + 1) >> 61)
            sub_2367C3440();
          v40 = v36 - v38;
          v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          *(_QWORD *)&__src[32] = v227 + 265;
          if (v42)
            v42 = (unint64_t)sub_2367CA1FC(v42);
          else
            v43 = 0;
          v44 = (_QWORD *)(v42 + 8 * v39);
          v45 = v42 + 8 * v43;
          *(_QWORD *)&__src[24] = v45;
          *v44 = v33;
          v37 = v44 + 1;
          *(_QWORD *)&__src[16] = v44 + 1;
          v46 = (_QWORD *)v34[264].i64[1];
          v47 = (_QWORD *)v34[264].i64[0];
          if (v46 == v47)
          {
            v49 = vdupq_n_s64((unint64_t)v46);
          }
          else
          {
            do
            {
              v48 = *--v46;
              *v46 = 0;
              *--v44 = v48;
            }
            while (v46 != v47);
            v49 = v34[264];
            v37 = *(_QWORD **)&__src[16];
            v45 = *(_QWORD *)&__src[24];
          }
          v34[264].i64[0] = (uint64_t)v44;
          v34[264].i64[1] = (uint64_t)v37;
          *(int64x2_t *)&__src[8] = v49;
          v50 = v34[265].i64[0];
          v34[265].i64[0] = v45;
          *(_QWORD *)&__src[24] = v50;
          *(_QWORD *)__src = v49.i64[0];
          sub_2368217A4((uint64_t)__src);
        }
        else
        {
          *v35 = v33;
          v37 = v35 + 1;
        }
        v34[264].i64[1] = (uint64_t)v37;
        if (*(_QWORD *)v246)
          sub_2367DA8E0(*(uint64_t *)v246);
        if (0x2E8BA2E8BA2E8BA3 * ((v227[324].i64[1] - v227[324].i64[0]) >> 4) <= (unint64_t)((v227[264].i64[1] - v227[264].i64[0]) >> 3))
          goto LABEL_45;
      }
    }
  }
  sub_23680320C((uint64_t)&v215);
  return v9;
}

void sub_2368362D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v68;
  void *v69;
  uint64_t i;
  uint64_t j;

  v68 = 0;
  while (1)
  {
    v69 = *(void **)(&a67 + v68 + 48);
    if (v69)
    {
      *(_QWORD *)(&a67 + v68 + 56) = v69;
      operator delete(v69);
    }
    v68 -= 24;
    if (v68 == -72)
    {
      for (i = 104; i != -16; i -= 40)
        sub_2367C2F38((uint64_t *)((char *)&STACK[0x478] + i));
      if (!LODWORD(STACK[0x638]))
      {
        for (j = 104; j != -16; j -= 40)
          sub_2367C2F38((uint64_t *)((char *)&STACK[0x5C0] + j));
      }
      if (__p)
        operator delete(__p);
      if (a36)
        operator delete(a36);
      STACK[0x230] = (unint64_t)&a41;
      sub_2367DC2DC((void ***)&STACK[0x230]);
      sub_23680320C((uint64_t)&a44);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_23683640C(uint64_t a1, unsigned int *a2, unsigned int *a3, _QWORD *a4, __int128 *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, _QWORD *a9)
{
  _QWORD *v15;
  int v16;
  __int128 **v17;
  __int128 **v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  float v56;
  unsigned int *v57;
  unint64_t v58;
  uint64_t v59;
  __int128 *v60;
  unint64_t v61;
  int v62;
  unsigned int *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float (__cdecl *v81)(float, float *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  float v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BOOL8 v166;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v181;
  _QWORD *v182;
  int v184;
  uint64_t v185;
  float *v186;
  _QWORD *v187;
  uint64_t v188;
  __int128 *v189;
  int v190;
  float *v191;
  uint64_t v192;
  float32x2_t *v193;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 *v205;
  __int128 v206;
  __int128 v207;
  _OWORD v208[2];
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  float v216;
  uint64_t v217[8];
  _QWORD v218[3];
  unsigned int *v219;
  _BYTE v220[216];
  _BYTE v221[220];
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  unint64_t v227;
  __int128 *v228;
  __int128 *v229;
  __int128 *v230;
  float v231;
  float v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  _QWORD v236[2];
  __int128 v237;
  _BYTE v238[720];
  __int128 v239;
  uint64_t v240;
  _BYTE v241[212];
  int v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;

  v15 = a9;
  v248 = *MEMORY[0x24BDAC8D0];
  v193 = (float32x2_t *)(a8 + 4580);
  v219 = a3;
  v16 = *(unsigned __int8 *)(a8 + 4208);
  v188 = a8 + 4208;
  v190 = *(unsigned __int8 *)(a8 + 4209);
  v191 = (float *)(a8 + 1104);
  v17 = *(__int128 ***)(a8 + 5040);
  v18 = *(__int128 ***)(a8 + 5048);
  if (v17 != v18)
  {
    *(_DWORD *)(a8 + 1432) = *(_DWORD *)(a8 + 5032);
    sub_23683D4BC(a8 + 1440, v17, v18, 0xF0B7672A07A44C6BLL * (v18 - v17));
    sub_23683D1CC((char *)(a8 + 1464), *(char **)(a8 + 5064), *(_QWORD *)(a8 + 5072), (uint64_t)(*(_QWORD *)(a8 + 5072) - *(_QWORD *)(a8 + 5064)) >> 3);
    sub_23683D654((char *)(a8 + 1488), *(char **)(a8 + 5088), *(_QWORD *)(a8 + 5096), (uint64_t)(*(_QWORD *)(a8 + 5096) - *(_QWORD *)(a8 + 5088)) >> 5);
    sub_23683D1CC((char *)(a8 + 1512), *(char **)(a8 + 5112), *(_QWORD *)(a8 + 5120), (uint64_t)(*(_QWORD *)(a8 + 5120) - *(_QWORD *)(a8 + 5112)) >> 3);
    sub_23683D1CC((char *)(a8 + 1536), *(char **)(a8 + 5136), *(_QWORD *)(a8 + 5144), (uint64_t)(*(_QWORD *)(a8 + 5144) - *(_QWORD *)(a8 + 5136)) >> 3);
  }
  v192 = (uint64_t)a3;
  v184 = v16;
  if (!v16)
  {
    v62 = *(_DWORD *)(a8 + 4592);
    if (v62 <= 3)
    {
      v63 = a3;
      if (*(_QWORD *)(a8 + 5040) == *(_QWORD *)(a8 + 5048))
      {
        v64 = a7;
        memset(&v238[32], 0, 96);
        *(_QWORD *)v238 = 0;
        *(_DWORD *)(a8 + 1432) = 0;
        sub_23683D8E0((uint64_t *)(a8 + 1440));
        *(_QWORD *)(a8 + 1448) = 0;
        *(_QWORD *)(a8 + 1440) = 0;
        *(_QWORD *)(a8 + 1456) = 0;
        memset(&v238[8], 0, 24);
        v65 = (_QWORD *)(a8 + 1464);
        v66 = *(void **)(a8 + 1464);
        if (v66)
        {
          *(_QWORD *)(a8 + 1472) = v66;
          operator delete(v66);
          *v65 = 0;
          *(_QWORD *)(a8 + 1472) = 0;
          *(_QWORD *)(a8 + 1480) = 0;
        }
        *v65 = 0;
        *(_QWORD *)(a8 + 1472) = 0;
        *(_QWORD *)(a8 + 1480) = 0;
        memset(&v238[32], 0, 24);
        v67 = (_QWORD *)(a8 + 1488);
        v68 = *(void **)(a8 + 1488);
        if (v68)
        {
          *(_QWORD *)(a8 + 1496) = v68;
          operator delete(v68);
          *v67 = 0;
          *(_QWORD *)(a8 + 1496) = 0;
          *(_QWORD *)(a8 + 1504) = 0;
        }
        *v67 = 0;
        *(_QWORD *)(a8 + 1496) = 0;
        *(_QWORD *)(a8 + 1504) = 0;
        memset(&v238[56], 0, 24);
        v69 = (_QWORD *)(a8 + 1512);
        v70 = *(void **)(a8 + 1512);
        if (v70)
        {
          *(_QWORD *)(a8 + 1520) = v70;
          operator delete(v70);
          *v69 = 0;
          *(_QWORD *)(a8 + 1520) = 0;
          *(_QWORD *)(a8 + 1528) = 0;
        }
        *v69 = 0;
        *(_QWORD *)(a8 + 1520) = 0;
        *(_QWORD *)(a8 + 1528) = 0;
        memset(&v238[80], 0, 24);
        v71 = (_QWORD *)(a8 + 1536);
        v72 = *(void **)(a8 + 1536);
        if (v72)
        {
          *(_QWORD *)(a8 + 1544) = v72;
          operator delete(v72);
          *v71 = 0;
          *(_QWORD *)(a8 + 1544) = 0;
          *(_QWORD *)(a8 + 1552) = 0;
        }
        *v71 = 0;
        *(_QWORD *)(a8 + 1544) = 0;
        *(_QWORD *)(a8 + 1552) = 0;
        memset(&v238[104], 0, 24);
        *(_QWORD *)v221 = &v238[8];
        sub_2367E9700((void ***)v221);
        v63 = v219;
        a7 = v64;
        v15 = a9;
      }
      v24 = sub_236806FC4((_QWORD *)(a8 + 1432), *v63, v63[1], v191);
      if ((_DWORD)v24)
        return v24;
      v187 = a4;
      v182 = v15;
      v73 = a7;
      if (*(_QWORD *)(a8 + 1488) != *(_QWORD *)(a8 + 1496))
      {
        v74 = v219[1];
        if ((_DWORD)v74)
        {
          v75 = 0;
          v76 = *v219;
          do
          {
            v77 = *(_QWORD *)(a8 + 1488);
            if (v77 != *(_QWORD *)(a8 + 1496))
            {
              v78 = *((_QWORD *)v219 + 2) * v75;
              v79 = *((_QWORD *)v219 + 13) + v78;
              v80 = *((_QWORD *)v219 + 8) + v78;
              v81 = (float (__cdecl *)(float, float *))(*((_QWORD *)v219 + 3) + v78);
              *(_QWORD *)v238 = 0;
              *(_QWORD *)&v238[8] = v75;
              *(_QWORD *)&v238[16] = v76;
              *(_QWORD *)&v238[24] = 1;
              sub_236806BCC(v81, v80, v79, (uint64_t *)v238, 0, v77, *(_QWORD *)(a8 + 1512), *(_QWORD *)(a8 + 1536));
            }
            ++v75;
          }
          while (v74 != v75);
        }
      }
      v62 = *(_DWORD *)(a8 + 4592);
      a7 = v73;
      v15 = v182;
      a4 = v187;
    }
    if (v193[5].i8[3])
    {
      if (v193[5].i8[3] == 1 || v62 <= 3)
      {
        v24 = sub_236852B68(v219, a8, (uint64_t)a5, a6, (int)v15, 1);
        if ((_DWORD)v24)
          return v24;
        sub_236852984((_QWORD *)(a8 + 1256), (uint64_t)v219);
      }
    }
  }
  v185 = a8 + 952;
  v19 = *(float *)(a8 + 4544);
  v20 = powf(v19 * 3.3333, 0.83) * 0.3;
  if (v20 >= v19)
    v20 = v19;
  if ((float)(v19 * 0.5) >= v20)
    v21 = v19 * 0.5;
  else
    v21 = v20;
  memset(v218, 0, sizeof(v218));
  v186 = (float *)(a8 + 4544);
  v209 = a8 + 4544;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0u;
  v214 = 0u;
  v215 = 0u;
  v216 = 0.0;
  memset(v217, 0, sizeof(v217));
  v22 = 1.0959 / v21;
  if (v22 <= 50.0)
    v23 = v22;
  else
    v23 = 50.0;
  memset(v208, 0, sizeof(v208));
  v206 = 0uLL;
  v207 = 0uLL;
  v205 = 0;
  v203 = 0uLL;
  v204 = 0uLL;
  v202 = 0;
  v200 = 0uLL;
  v201 = 0uLL;
  v199 = 0;
  v197 = 0uLL;
  v198 = 0uLL;
  if (*(int *)(a8 + 4592) < 6)
  {
    v181 = v15;
    v189 = a5;
    v56 = v19 * 0.73;
    if (*(_BYTE *)(a1 + 425))
      v56 = v19;
    v57 = v219;
    v232 = v56;
    v231 = 0.73815 / v56;
    v230 = &v200;
    v229 = &v197;
    memset(v238, 0, 104);
    v58 = a4[3];
    v59 = (uint64_t)a4;
    v60 = (__int128 *)(a4[2] >> 3);
    v228 = v60;
    v61 = v58 >> 3;
    v227 = v58 >> 3;
    sub_2367C431C((uint64_t)v220, v60, v58 >> 3);
    v24 = *(unsigned int *)&v220[40];
    if (!*(_DWORD *)&v220[40])
    {
      *(_OWORD *)&v238[24] = *(_OWORD *)v220;
      v83 = *(_QWORD *)&v220[24];
      *(_QWORD *)&v220[24] = 0;
      v84 = *(_QWORD *)&v220[32];
      v85 = *(_QWORD *)&v238[48];
      *(_QWORD *)&v238[40] = *(_QWORD *)&v220[16];
      *(_QWORD *)&v238[48] = v83;
      if (v85)
      {
        v86 = -*(_QWORD *)(v85 - 24);
        do
          v87 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v87 + v86, &qword_2564313D8));
        free(*(void **)(v85 - 32));
        v60 = v228;
        v61 = v227;
      }
      *(_QWORD *)&v238[56] = v84;
      sub_2367C431C((uint64_t)&v222, v60, v61);
      v24 = v226;
      if (!v226)
      {
        v88 = v224;
        v89 = v225;
        v224 = 0;
        v60 = v230;
        *v230 = v222;
        v90 = *((_QWORD *)v60 + 3);
        *((_QWORD *)v60 + 2) = v223;
        *((_QWORD *)v60 + 3) = v88;
        if (v90)
        {
          v91 = -*(_QWORD *)(v90 - 24);
          do
            v92 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v92 + v91, &qword_2564313D8));
          free(*(void **)(v90 - 32));
        }
        *((_QWORD *)v60 + 4) = v89;
        sub_2367C431C((uint64_t)&v243, *v57, v57[1]);
        v24 = v247;
        if (!v247)
        {
          v94 = v244;
          v93 = v245;
          v245 = 0;
          v95 = v246;
          v60 = v229;
          *v229 = v243;
          v96 = *((_QWORD *)v60 + 3);
          *((_QWORD *)v60 + 2) = v94;
          *((_QWORD *)v60 + 3) = v93;
          if (v96)
          {
            v97 = -*(_QWORD *)(v96 - 24);
            do
              v98 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v98 + v97, &qword_2564313D8));
            free(*(void **)(v96 - 32));
          }
          *((_QWORD *)v60 + 4) = v95;
          v99 = ((v227 + 7) >> 3) * (((unint64_t)v228 + 7) >> 3);
          *(_QWORD *)&v233 = v238;
          *(_QWORD *)v221 = &v228;
          *(_QWORD *)&v221[8] = &v227;
          *(_QWORD *)&v221[16] = v238;
          *(_QWORD *)&v221[24] = &v232;
          *(_QWORD *)&v221[32] = &v231;
          *(_QWORD *)&v221[40] = v57;
          *(_QWORD *)&v221[48] = v59;
          *(_QWORD *)&v221[56] = &v230;
          *(_QWORD *)&v221[64] = &v229;
          if (a6)
          {
            sub_2368140AC((uint64_t)a6, v99, (uint64_t *)&v233, (uint64_t *)v221);
          }
          else
          {
            *(_QWORD *)v241 = 0;
            *(_QWORD *)&v241[8] = v241;
            sub_2368140AC((uint64_t)v241, v99, (uint64_t *)&v233, (uint64_t *)v221);
          }
          v100 = (uint64_t)v229;
          *(int32x4_t *)v221 = vdupq_n_s32(0x3E6D1351u);
          *(int32x4_t *)&v221[16] = vdupq_n_s32(0x3D73362Cu);
          *(int32x4_t *)&v221[32] = vdupq_n_s32(0x3D121DC5u);
          *(int32x4_t *)&v221[48] = vdupq_n_s32(0x3D426843u);
          *(int32x4_t *)&v221[64] = vdupq_n_s32(0x3C427F2Bu);
          *(int32x4_t *)&v221[80] = vdupq_n_s32(0x3C9A90AFu);
          sub_2367C431C((uint64_t)v241, *(_QWORD *)(v59 + 16), *(_QWORD *)(v59 + 24));
          v24 = *(unsigned int *)&v241[40];
          if (!*(_DWORD *)&v241[40])
          {
            v233 = *(_OWORD *)v241;
            v234 = *(_OWORD *)&v241[16];
            *(_QWORD *)&v241[24] = 0;
            v235 = *(_QWORD *)&v241[32];
            v236[1] = 0;
            v236[0] = 0;
            *(_QWORD *)&v101 = *(unsigned int *)v241;
            *((_QWORD *)&v101 + 1) = *(unsigned int *)&v241[4];
            v237 = v101;
            sub_2368849F4(v100, v59, (uint64_t)v221, a6, (uint64_t)&v233, (uint64_t)v236);
            v102 = v233;
            *(_QWORD *)(v100 + 16) = v234;
            *(_OWORD *)v100 = v102;
            v103 = *((_QWORD *)&v234 + 1);
            *((_QWORD *)&v234 + 1) = 0;
            sub_2367C5200((uint64_t *)(v100 + 24), v103);
            v104 = *((_QWORD *)&v234 + 1);
            *(_QWORD *)(v100 + 32) = v235;
            *((_QWORD *)&v234 + 1) = 0;
            if (!v104)
              goto LABEL_200;
            v105 = -*(_QWORD *)(v104 - 24);
            do
              v106 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v106 + v105, &qword_2564313D8));
            free(*(void **)(v104 - 32));
            if (!*(_DWORD *)&v241[40])
            {
LABEL_200:
              v107 = *(_QWORD *)&v241[24];
              *(_QWORD *)&v241[24] = 0;
              if (v107)
              {
                v108 = -*(_QWORD *)(v107 - 24);
                do
                  v109 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v109 + v108, &qword_2564313D8));
                free(*(void **)(v107 - 32));
              }
            }
            v24 = 0;
            v195 = *(_OWORD *)&v238[24];
            v196 = *(_QWORD *)&v238[40];
            v60 = *(__int128 **)&v238[56];
            v61 = *(_QWORD *)&v238[48];
            *(_QWORD *)&v238[48] = 0;
          }
          if (!v247)
          {
            v110 = v245;
            v245 = 0;
            if (v110)
            {
              v111 = -*(_QWORD *)(v110 - 24);
              do
                v112 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v112 + v111, &qword_2564313D8));
              free(*(void **)(v110 - 32));
            }
          }
        }
        if (!v226)
        {
          v113 = v224;
          v224 = 0;
          if (v113)
          {
            v114 = -*(_QWORD *)(v113 - 24);
            do
              v115 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v115 + v114, &qword_2564313D8));
            free(*(void **)(v113 - 32));
          }
        }
      }
      if (!*(_DWORD *)&v220[40])
      {
        v116 = *(_QWORD *)&v220[24];
        *(_QWORD *)&v220[24] = 0;
        if (v116)
        {
          v117 = -*(_QWORD *)(v116 - 24);
          do
            v118 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v118 + v117, &qword_2564313D8));
          free(*(void **)(v116 - 32));
        }
      }
    }
    v119 = *(_QWORD *)&v238[88];
    *(_QWORD *)&v238[88] = 0;
    if (v119)
    {
      v120 = -*(_QWORD *)(v119 - 24);
      do
        v121 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v121 + v120, &qword_2564313D8));
      free(*(void **)(v119 - 32));
    }
    v122 = *(_QWORD *)&v238[48];
    *(_QWORD *)&v238[48] = 0;
    if (v122)
    {
      v123 = -*(_QWORD *)(v122 - 24);
      do
        v124 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v124 + v123, &qword_2564313D8));
      free(*(void **)(v122 - 32));
    }
    *(_QWORD *)v221 = v238;
    sub_2367D077C((void ***)v221);
    if ((_DWORD)v24)
    {
      v15 = v181;
      a5 = v189;
      goto LABEL_128;
    }
    v203 = v195;
    v125 = *((_QWORD *)&v204 + 1);
    *(_QWORD *)&v204 = v196;
    *((_QWORD *)&v204 + 1) = v61;
    v15 = v181;
    a5 = v189;
    if (v125)
    {
      v126 = -*(_QWORD *)(v125 - 24);
      do
        v127 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v127 + v126, &qword_2564313D8));
      free(*(void **)(v125 - 32));
    }
    v205 = v60;
    v128 = 0.39 / *v186;
    sub_236806354(v185, v23, v128, 0.0);
    a4 = (_QWORD *)v59;
LABEL_134:
    if (*(_BYTE *)(a1 + 425))
    {
      v24 = sub_2368AD468((uint64_t)v219, (uint64_t)a4, flt_236923058, a6);
      if ((_DWORD)v24)
        goto LABEL_177;
    }
    if (v190)
    {
      sub_236804FD4((uint64_t)v238);
      *(_DWORD *)(a8 + 208) = *(_DWORD *)v238;
      v129 = *(_QWORD *)&v238[8];
      *(_QWORD *)&v238[8] = 0;
      sub_2367DA3D0((uint64_t *)(a8 + 216), v129);
      *(_OWORD *)(a8 + 224) = *(_OWORD *)&v238[16];
      memcpy((void *)(a8 + 240), &v238[32], 0x2B0uLL);
      sub_2367DC280((void **)(a8 + 928));
      *(_OWORD *)(a8 + 928) = v239;
      *(_QWORD *)(a8 + 944) = v240;
      v240 = 0;
      v239 = 0u;
      *(_QWORD *)v221 = &v239;
      sub_2367DC2DC((void ***)v221);
      sub_2367D7A7C((uint64_t *)&v238[8]);
      if (*(_BYTE *)(v188 + 368))
      {
        v130 = 0;
        __asm { FMOV            V8.2S, #1.0 }
        *(float32x2_t *)&v243 = vdiv_f32(_D8, *v193);
        *((float *)&v243 + 2) = 1.0 / *(float *)(a8 + 4588);
        v136 = &v220[8];
        memset(&v220[8], 0, 204);
        *(_QWORD *)v220 = 1;
        do
        {
          *v136 = *(_DWORD *)((char *)&v243 + v130);
          v136 += 17;
          v130 += 4;
        }
        while (v130 != 12);
        *(_OWORD *)&v221[164] = *(_OWORD *)&v220[160];
        *(_OWORD *)&v221[180] = *(_OWORD *)&v220[176];
        *(_OWORD *)&v221[196] = *(_OWORD *)&v220[192];
        *(_QWORD *)&v221[212] = *(_QWORD *)&v220[208];
        *(_OWORD *)&v221[100] = *(_OWORD *)&v220[96];
        *(_OWORD *)&v221[116] = *(_OWORD *)&v220[112];
        *(_OWORD *)&v221[132] = *(_OWORD *)&v220[128];
        *(_OWORD *)&v221[148] = *(_OWORD *)&v220[144];
        *(_OWORD *)&v221[36] = *(_OWORD *)&v220[32];
        *(_OWORD *)&v221[52] = *(_OWORD *)&v220[48];
        *(_OWORD *)&v221[68] = *(_OWORD *)&v220[64];
        *(_OWORD *)&v221[84] = *(_OWORD *)&v220[80];
        *(_OWORD *)&v221[4] = *(_OWORD *)v220;
        *(_OWORD *)&v221[20] = *(_OWORD *)&v220[16];
        *(_OWORD *)&v238[164] = *(_OWORD *)&v221[160];
        memset(&v241[4], 0, 208);
        v242 = 0;
        *(_DWORD *)v238 = 6;
        *(_OWORD *)&v238[180] = *(_OWORD *)&v221[176];
        *(_OWORD *)&v238[196] = *(_OWORD *)&v221[192];
        memset(&v238[224], 0, 108);
        *(_OWORD *)&v238[208] = *(_OWORD *)&v221[204];
        *(_OWORD *)&v238[100] = *(_OWORD *)&v221[96];
        *(_OWORD *)&v238[116] = *(_OWORD *)&v221[112];
        *(_OWORD *)&v238[132] = *(_OWORD *)&v221[128];
        *(_OWORD *)&v238[148] = *(_OWORD *)&v221[144];
        *(_OWORD *)&v238[36] = *(_OWORD *)&v221[32];
        *(_OWORD *)&v238[52] = *(_OWORD *)&v221[48];
        *(_OWORD *)&v238[68] = *(_OWORD *)&v221[64];
        *(_OWORD *)&v238[84] = *(_OWORD *)&v221[80];
        *(_OWORD *)&v238[4] = *(_OWORD *)v221;
        *(_OWORD *)&v238[20] = *(_OWORD *)&v221[16];
        *(_OWORD *)&v238[492] = *(_OWORD *)&v241[160];
        *(_OWORD *)&v238[508] = *(_OWORD *)&v241[176];
        *(_OWORD *)&v238[524] = *(_OWORD *)&v241[192];
        *(_QWORD *)&v238[540] = 0;
        *(_OWORD *)&v238[428] = *(_OWORD *)&v241[96];
        *(_OWORD *)&v238[444] = *(_OWORD *)&v241[112];
        *(_OWORD *)&v238[460] = *(_OWORD *)&v241[128];
        *(_OWORD *)&v238[476] = *(_OWORD *)&v241[144];
        *(_OWORD *)&v238[364] = *(_OWORD *)&v241[32];
        *(_OWORD *)&v238[380] = *(_OWORD *)&v241[48];
        *(_OWORD *)&v238[396] = *(_OWORD *)&v241[64];
        *(_OWORD *)&v238[412] = *(_OWORD *)&v241[80];
        *(_OWORD *)&v238[332] = *(_OWORD *)v241;
        *(_OWORD *)&v238[348] = *(_OWORD *)&v241[16];
        v238[552] = 0;
        sub_23683C5F8(&v222, v238);
        sub_2367DC53C((uint64_t)v238);
        v24 = sub_23685B47C(a8 + 208, (void **)&v222, a7);
        if ((_DWORD)v24)
        {
          *(_QWORD *)v238 = &v222;
          sub_2367DC2DC((void ***)v238);
          goto LABEL_177;
        }
        *(float32x2_t *)v238 = vdiv_f32(_D8, *v193);
        *(float *)&v238[8] = 1.0 / *(float *)(a8 + 4588);
        sub_23685B348(a8 + 208, (uint64_t)v238);
        *(_QWORD *)v238 = &v222;
        sub_2367DC2DC((void ***)v238);
      }
    }
    v59 = (uint64_t)a4;
    sub_2367C431C((uint64_t)v238, ((a4[3] >> 3) * (a4[2] >> 3) + 3) & 0xFFFFFFFC, 4u);
    v24 = *(unsigned int *)&v238[40];
    if (!*(_DWORD *)&v238[40])
    {
      v137 = *(_QWORD *)&v238[24];
      *(_QWORD *)&v238[24] = 0;
      v138 = *(_QWORD *)&v238[32];
      v206 = *(_OWORD *)v238;
      v139 = *((_QWORD *)&v207 + 1);
      *(_QWORD *)&v207 = *(_QWORD *)&v238[16];
      *((_QWORD *)&v207 + 1) = v137;
      if (v139)
      {
        v140 = -*(_QWORD *)(v139 - 24);
        v141 = a8 + 208;
        do
          v142 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v142 + v140, &qword_2564313D8));
        free(*(void **)(v139 - 32));
        v137 = *((_QWORD *)&v207 + 1);
      }
      else
      {
        v141 = a8 + 208;
      }
      v143 = 0;
      *(_QWORD *)&v208[0] = v138;
      v144 = v206;
      v145 = v137 + 4 * v206;
      v146 = v207;
      v147 = v145 - 16;
      v148 = 4;
      do
      {
        if (v144 >= 4)
        {
          v149 = (_QWORD *)(v147 + v143);
          *v149 = 0;
          v149[1] = 0;
        }
        v143 += v146;
        --v148;
      }
      while (v148);
      if (!*(_DWORD *)&v238[40])
      {
        v150 = *(_QWORD *)&v238[24];
        *(_QWORD *)&v238[24] = 0;
        if (v150)
        {
          v151 = -*(_QWORD *)(v150 - 24);
          do
            v152 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v152 + v151, &qword_2564313D8));
          free(*(void **)(v150 - 32));
        }
      }
      v153 = v219;
      *(_QWORD *)&v210 = v141;
      if (*(int *)(v209 + 48) > 5)
        v154 = 1;
      else
        v154 = 0x1FFFFF;
      sub_2368052F8(v141, v154);
      *((_QWORD *)&v210 + 1) = *((_QWORD *)&v204 + 1);
      *(_QWORD *)&v211 = (unint64_t)v204 >> 2;
      if ((_DWORD)v200 && DWORD1(v200))
      {
        *((_QWORD *)&v211 + 1) = *((_QWORD *)&v201 + 1);
        *(_QWORD *)&v212 = (unint64_t)v201 >> 2;
      }
      if ((_DWORD)v197 && DWORD1(v197))
      {
        *((_QWORD *)&v212 + 1) = *((_QWORD *)&v198 + 1);
        *(_QWORD *)&v213 = (unint64_t)v198 >> 2;
      }
      v155 = *((_QWORD *)v153 + 2);
      v156 = *a4;
      v157 = v155 * a4[1];
      *((_QWORD *)&v213 + 1) = *((_QWORD *)v153 + 3) + v157 + 4 * *a4;
      v158 = *((_QWORD *)v153 + 8) + v157 + 4 * v156;
      v159 = *((_QWORD *)v153 + 13) + v157 + 4 * v156;
      *(_QWORD *)&v214 = v158;
      *((_QWORD *)&v214 + 1) = v159;
      *(_QWORD *)&v215 = v155 >> 2;
      v160 = (float)(*(float *)v209 + 0.13732) / 1.1373;
      *((float *)&v215 + 2) = powf(v160, 0.33678) * 1.2;
      v216 = powf(v160, 0.50991) * 9.3089;
      *((float *)&v215 + 3) = powf(v160, 0.36703) * 10.833;
      v220[0] = 0;
      *(_QWORD *)v238 = v220;
      *(_QWORD *)&v238[8] = a8 + 8;
      *(_QWORD *)&v238[16] = a8 + 4544;
      *(_QWORD *)&v238[24] = &v206;
      *(_QWORD *)&v238[32] = &v219;
      *(_QWORD *)&v238[40] = a4;
      *(_QWORD *)&v238[48] = v141;
      *(_QWORD *)&v238[56] = v191;
      *(_QWORD *)&v238[64] = &v209;
      *(_QWORD *)&v238[72] = a8 + 152;
      *(_QWORD *)&v238[80] = v218;
      *(_QWORD *)&v238[88] = a1;
      *(_QWORD *)&v238[96] = &v203;
      *(_QWORD *)&v238[104] = a8 + 1064;
      *(_QWORD *)&v238[112] = a8 + 952;
      *(_QWORD *)&v238[120] = a8 + 1024;
      v165 = ((unint64_t)(*(_QWORD *)(a8 + 80) + 7) >> 3)
           * ((unint64_t)(*(_QWORD *)(a8 + 72) + 7) >> 3);
      *(_QWORD *)v221 = &v209;
      *(_QWORD *)&v221[8] = v218;
      *(_QWORD *)&v221[16] = &v206;
      if (a6)
      {
        v166 = sub_236844A60((uint64_t)a6, v165, (uint64_t *)v221, (uint64_t *)v238, v161, v162, v163, v164);
      }
      else
      {
        *(_QWORD *)v241 = 0;
        *(_QWORD *)&v241[8] = v241;
        v166 = sub_236844A60((uint64_t)v241, v165, (uint64_t *)v221, (uint64_t *)v238, v161, v162, v163, v164);
      }
      v24 = v166;
      if (!v166)
      {
        v167 = atomic_load(v220);
        if ((v167 & 1) != 0)
        {
          v24 = 1;
        }
        else
        {
          sub_236813D84((unsigned int *)(a8 + 152), v15);
          if (v184
            || (v24 = sub_236815588(a1, a2, (uint64_t)v219, (unsigned int *)&v203, a8, a5, (uint64_t)a6, (uint64_t)v15),
                !(_DWORD)v24))
          {
            v24 = 0;
            if (v190)
            {
              if (*(int *)(a8 + 4592) <= 6)
              {
                sub_236842A60((uint64_t)v186, (unsigned int *)(a8 + 1024), a8 + 152, a8 + 1760);
                v24 = 0;
              }
            }
          }
        }
      }
      goto LABEL_177;
    }
LABEL_128:
    a4 = (_QWORD *)v59;
    goto LABEL_177;
  }
  sub_2367C431C((uint64_t)v238, *(_QWORD *)(a8 + 72), *(_QWORD *)(a8 + 80));
  v24 = *(unsigned int *)&v238[40];
  if (!*(_DWORD *)&v238[40])
  {
    v203 = *(_OWORD *)v238;
    v25 = *(_QWORD *)&v238[24];
    *(_QWORD *)&v238[24] = 0;
    v26 = *(__int128 **)&v238[32];
    v27 = *((_QWORD *)&v204 + 1);
    *(_QWORD *)&v204 = *(_QWORD *)&v238[16];
    *((_QWORD *)&v204 + 1) = v25;
    if (v27)
    {
      v28 = -*(_QWORD *)(v27 - 24);
      do
        v29 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v29 + v28, &qword_2564313D8));
      free(*(void **)(v27 - 32));
    }
    v205 = v26;
    sub_2367C431C((uint64_t)v221, *(_QWORD *)(a8 + 72), *(_QWORD *)(a8 + 80));
    v24 = *(unsigned int *)&v221[40];
    if (!*(_DWORD *)&v221[40])
    {
      v200 = *(_OWORD *)v221;
      v30 = *(_QWORD *)&v221[24];
      *(_QWORD *)&v221[24] = 0;
      v31 = *(_QWORD *)&v221[32];
      v32 = *((_QWORD *)&v201 + 1);
      *(_QWORD *)&v201 = *(_QWORD *)&v221[16];
      *((_QWORD *)&v201 + 1) = v30;
      if (v32)
      {
        v33 = -*(_QWORD *)(v32 - 24);
        do
          v34 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v34 + v33, &qword_2564313D8));
        free(*(void **)(v32 - 32));
      }
      v202 = v31;
      v35 = 0.79 / *v186;
      v36 = DWORD1(v203);
      if (DWORD1(v203))
      {
        v37 = 0;
        v38 = (float *)*((_QWORD *)&v204 + 1);
        v39 = v204;
        v40 = v203;
        do
        {
          v41 = v38;
          v42 = v40;
          if ((_DWORD)v40)
          {
            do
            {
              *v41++ = v35;
              --v42;
            }
            while (v42);
          }
          ++v37;
          v38 = (float *)((char *)v38 + v39);
        }
        while (v37 != v36);
      }
      v43 = DWORD1(v200);
      if (DWORD1(v200))
      {
        v44 = 0;
        v45 = (float *)*((_QWORD *)&v201 + 1);
        v46 = v201;
        v47 = v200;
        do
        {
          v48 = v45;
          v49 = v47;
          if ((_DWORD)v47)
          {
            do
            {
              *v48++ = 1.0 / (float)(v35 + 0.001);
              --v49;
            }
            while (v49);
          }
          ++v44;
          v45 = (float *)((char *)v45 + v46);
        }
        while (v44 != v43);
      }
      sub_236806354(v185, v23, v35, 0.0);
      if (!*(_DWORD *)&v221[40])
      {
        v50 = *(_QWORD *)&v221[24];
        *(_QWORD *)&v221[24] = 0;
        if (v50)
        {
          v51 = -*(_QWORD *)(v50 - 24);
          do
            v52 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v52 + v51, &qword_2564313D8));
          free(*(void **)(v50 - 32));
        }
      }
    }
    if (!*(_DWORD *)&v238[40])
    {
      v53 = *(_QWORD *)&v238[24];
      *(_QWORD *)&v238[24] = 0;
      if (v53)
      {
        v54 = -*(_QWORD *)(v53 - 24);
        do
          v55 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v55 + v54, &qword_2564313D8));
        free(*(void **)(v53 - 32));
      }
    }
    if (!(_DWORD)v24)
      goto LABEL_134;
  }
LABEL_177:
  v168 = *((_QWORD *)&v198 + 1);
  *((_QWORD *)&v198 + 1) = 0;
  if (v168)
  {
    v169 = -*(_QWORD *)(v168 - 24);
    do
      v170 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v170 + v169, &qword_2564313D8));
    free(*(void **)(v168 - 32));
  }
  v171 = *((_QWORD *)&v201 + 1);
  *((_QWORD *)&v201 + 1) = 0;
  if (v171)
  {
    v172 = -*(_QWORD *)(v171 - 24);
    do
      v173 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v173 + v172, &qword_2564313D8));
    free(*(void **)(v171 - 32));
  }
  v174 = *((_QWORD *)&v204 + 1);
  *((_QWORD *)&v204 + 1) = 0;
  if (v174)
  {
    v175 = -*(_QWORD *)(v174 - 24);
    do
      v176 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v176 + v175, &qword_2564313D8));
    free(*(void **)(v174 - 32));
  }
  sub_2367D7A7C((uint64_t *)v208 + 1);
  v177 = *((_QWORD *)&v207 + 1);
  *((_QWORD *)&v207 + 1) = 0;
  if (v177)
  {
    v178 = -*(_QWORD *)(v177 - 24);
    do
      v179 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v179 + v178, &qword_2564313D8));
    free(*(void **)(v177 - 32));
  }
  sub_236813D44(&v217[5]);
  sub_2367D7A7C(&v217[1]);
  *(_QWORD *)v238 = v218;
  sub_236844AFC((void ***)v238);
  if ((_DWORD)v24)
    return v24;
  return sub_236820878(a1, v192, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a8, (uint64_t)a7, (uint64_t)v15);
}

void sub_2368378C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;

  if (a30)
  {
    v70 = -*(_QWORD *)(a30 - 24);
    do
      v71 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v71 + v70, &qword_2564313D8));
    free(*(void **)(a30 - 32));
  }
  if (a36)
  {
    v72 = -*(_QWORD *)(a36 - 24);
    do
      v73 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v73 + v72, &qword_2564313D8));
    free(*(void **)(a36 - 32));
  }
  if (a42)
  {
    v74 = -*(_QWORD *)(a42 - 24);
    do
      v75 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v75 + v74, &qword_2564313D8));
    free(*(void **)(a42 - 32));
  }
  sub_2367D7A7C(&a50);
  if (a48)
  {
    v76 = -*(_QWORD *)(a48 - 24);
    do
      v77 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v77 + v76, &qword_2564313D8));
    free(*(void **)(a48 - 32));
  }
  sub_236813D44((uint64_t *)&STACK[0x200]);
  sub_2367D7A7C(&a69);
  STACK[0x238] = (unint64_t)&STACK[0x218];
  sub_236844AFC((void ***)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_236837C1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  int v57;
  int v58;
  char *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  int v62;
  int v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  float v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  int *v87;
  _DWORD *v88;
  char *v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  BOOL v95;
  int8x16_t v96;
  int32x4_t *v97;
  __int32 *v98;
  int32x4_t *v99;
  unint64_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  void *v105;
  int v106;
  uint64_t v107;
  char *v108;
  size_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  BOOL v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  void *__p;
  char *__pa;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned __int8 v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void *v147[3];
  uint64_t v148[5];

  v3 = a1;
  v148[3] = *MEMORY[0x24BDAC8D0];
  if (*(int *)(a1 + 4592) <= 6)
  {
    v6 = *(_QWORD *)(a1 + 1024);
    if (HIDWORD(v6))
    {
      v7 = 0;
      v5 = 0;
      v8 = 0;
      v9 = *(unsigned __int8 **)(a1 + 176);
      do
      {
        v10 = v9;
        v11 = v6;
        if ((_DWORD)v6)
        {
          do
          {
            v12 = *v10++;
            v13 = (unint64_t)v12 >> 1;
            v5 |= 1 << byte_236923064[v13];
            if (v13 - 18 >= 9)
              v14 = 1 << byte_236923064[v13];
            else
              v14 = 0;
            v8 = v14 | v8;
            --v11;
          }
          while (v11);
        }
        ++v7;
        v9 += *(_QWORD *)(v3 + 168);
      }
      while (v7 != HIDWORD(v6));
    }
    else
    {
      v8 = 0;
      v5 = 0;
    }
    v15 = *(_DWORD *)(v3 + 156) >= 5u || *(_DWORD *)(v3 + 152) >= 5u;
    v16 = v8 << 32;
    if (v15)
      v4 = v16;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0x100000000;
    v5 = 1;
  }
  v115 = v5 | v4;
  sub_2367C5284((char **)(v3 + 5240), *(_QWORD *)(v3 + 4272));
  if (*(_QWORD *)(v3 + 4272))
  {
    v114 = 0;
    v17 = 0;
    v112 = HIDWORD(v4);
    v120 = v3;
    v127 = a2;
    do
    {
      v18 = *(_DWORD *)(v3 + 4592);
      v119 = *(_QWORD *)(*(_QWORD *)(v3 + 4224) + 8 * v17);
      v116 = v17;
      v117 = *(_QWORD *)(v3 + 5240);
      v118 = *(_DWORD *)(v3 + 5232);
      v111 = *(_QWORD *)(v3 + 1560);
      v113 = *(_QWORD *)(v3 + 1568);
      sub_2367CBE88(v147, 0x60300uLL);
      if ((_DWORD)v112)
      {
        v19 = v18 > 2 && (_DWORD)v112 == 1;
        v20 = v19;
        if (a2[14])
        {
          v21 = 0;
          v22 = 0xBF58476D1CE4E5B9;
          v23 = 0x94D049BB133111EBLL;
          v128 = v20;
          do
          {
            v25 = a2[9];
            v24 = a2[10];
            v26 = v21 / v24;
            v27 = 32 * (v21 / v24);
            v28 = a2[8];
            v123 = v27;
            v124 = 32 * (v21 % v24);
            v29 = v28 - v124;
            if (v28 < v124)
              v29 = 0;
            if (v124 + 32 <= v28)
              v30 = 32;
            else
              v30 = v29;
            v15 = v25 >= 32 * v26;
            v31 = v25 - 32 * v26;
            if (!v15)
              v31 = 0;
            if (v27 + 32 <= v25)
              v32 = 32;
            else
              v32 = v31;
            v125 = v32;
            v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
            for (i = 0; i != 3; ++i)
              v148[i] = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, i, v21, 0);
            if (v125)
            {
              v126 = 0;
              v34 = 0;
              v121 = *(_QWORD *)(v120 + 168);
              v122 = *(_QWORD *)(v120 + 176);
              v129 = v30;
              v130 = v21;
              do
              {
                if (v30)
                {
                  v35 = 0;
                  v36 = v122 + v121 * (v126 + v123) + v124;
                  do
                  {
                    v37 = *(unsigned __int8 *)(v36 + v35);
                    if ((v37 & 1) != 0)
                    {
                      v38 = (v22 >> 5) ^ ((v23 ^ (v23 << 23)) >> 18) ^ v22 ^ v23 ^ (v23 << 23);
                      if ((uint64_t)(v23 + v22) >= 0 || !v20)
                      {
                        v132 = v35;
                        v134 = (v22 >> 5) ^ ((v23 ^ (v23 << 23)) >> 18) ^ v22 ^ v23 ^ (v23 << 23);
                        __p = (void *)v22;
                        v40 = 0;
                        v41 = v37 >> 1;
                        v42 = 64 << byte_236921FC8[v41];
                        v43 = 3 * byte_236923064[v41];
                        v44 = byte_23692665C[v41];
                        v45 = byte_236926677[v41];
                        if (v45 >= v44)
                          v46 = v44;
                        else
                          v46 = v45;
                        if (v45 <= v44)
                          v45 = v44;
                        v47 = (char *)v147[0];
                        v131 = v42;
                        if (v42 <= 1)
                          v48 = 1;
                        else
                          v48 = v42;
                        v49 = 32 * v45;
                        v50 = 4 * v45;
                        v51 = 4 * v34;
                        v136 = v34;
                        v140 = 2 * v34;
                        do
                        {
                          v52 = qword_236922110[v43 + v40];
                          v53 = v148[v40];
                          if (v142)
                          {
                            v54 = &v47[256 * v52];
                            v55 = (int *)(v53 + v51);
                            v56 = v48;
                            do
                            {
                              v57 = *v55++;
                              v58 = *(_DWORD *)v54;
                              if (!v57)
                                ++v58;
                              *(_DWORD *)v54 = v58;
                              v54 += 4;
                              --v56;
                            }
                            while (v56);
                          }
                          else
                          {
                            v59 = &v47[256 * v52];
                            v60 = (unsigned __int16 *)(v53 + v140);
                            v61 = v48;
                            do
                            {
                              v62 = *v60++;
                              v63 = *(_DWORD *)v59;
                              if (!v62)
                                ++v63;
                              *(_DWORD *)v59 = v63;
                              v59 += 4;
                              --v61;
                            }
                            while (v61);
                          }
                          if (v46)
                          {
                            v64 = (char *)v147[0] + 256 * v52;
                            v65 = v46;
                            do
                            {
                              memset(v64, 255, v50);
                              v64 += v49;
                              --v65;
                            }
                            while (v65);
                          }
                          ++v40;
                        }
                        while (v40 != 3);
                        v22 = (unint64_t)__p;
                        v35 = v132;
                        v34 = v131 + v136;
                        a2 = v127;
                        v20 = v128;
                        v30 = v129;
                        v21 = v130;
                        v38 = v134;
                        v36 = v122 + v121 * (v126 + v123) + v124;
                      }
                    }
                    else
                    {
                      v38 = v22;
                      v22 = v23;
                    }
                    ++v35;
                    v23 = v22;
                    v22 = v38;
                  }
                  while (v35 != v30);
                }
                else
                {
                  v38 = v22;
                }
                v22 = v38;
                ++v126;
              }
              while (v126 != v125);
            }
            else
            {
              v38 = v22;
            }
            ++v21;
            v22 = v38;
          }
          while (v21 < a2[14]);
        }
      }
      v66 = v116;
      v67 = v113 + 4 * v111 * v116;
      do
        v68 = __ldxr(&qword_25642E998);
      while (__stxr(v68 + 1, &qword_25642E998));
      v69 = (unint64_t)malloc_type_malloc(0x80100uLL, 0xFBCB090DuLL);
      v70 = v115;
      if (v69)
      {
        v71 = v69 & 0xFFFFFFFFFFFFFF80;
        v72 = (v69 & 0xFFFFFFFFFFFFFF80) + 256;
        *(_QWORD *)(v71 + 240) = v69;
        *(_QWORD *)(v71 + 248) = 0x80000;
      }
      else
      {
        v72 = 0;
      }
      v3 = v120;
      __pa = 0;
      v73 = 0;
      v74 = 0;
      v148[0] = v72;
      v148[1] = 0;
      v148[2] = 0;
      v144 = 0;
      v145 = 0;
      v75 = v113 + v111 * v114;
      v137 = v112;
      v146 = 0;
      do
      {
        v76 = byte_236923064[v73];
        v77 = 1 << v76;
        if (((1 << v76) & v74) != 0)
          goto LABEL_123;
        v74 |= (unsigned __int16)(1 << v76);
        v78 = (v77 & v70) != 0 && (v77 & v118) == 0;
        if (!v78 || (*(_DWORD *)(v117 + 4 * v66) & v77) != 0)
          goto LABEL_123;
        v135 = 1 << v76;
        v133 = v74;
        v79 = (byte_23692665C[v73] * (unint64_t)byte_236926677[v73]) << 6;
        v80 = __pa;
        if (v79 > (v145 - __pa) >> 2)
        {
          sub_2367C5284(&v144, (byte_23692665C[v73] * (unint64_t)byte_236926677[v73]) << 6);
          v80 = v144;
        }
        sub_2367C2CB4(v73, (uint64_t)v80);
        if ((v135 & v137) == 0)
        {
          v107 = 0;
          v108 = v144;
          v109 = 4 * v79;
          v110 = &qword_236922110[3 * v76];
          do
            memcpy((void *)(v67 + (v110[v107++] << 8)), v108, v109);
          while (v107 != 3);
          __pa = v108;
          v70 = v115;
          v66 = v116;
          goto LABEL_122;
        }
        v81 = 0;
        v143 = 0;
        v82 = 1.0 / sqrt((double)v79);
        v83 = v144;
        __pa = v144;
        v141 = 3 * v76;
        do
        {
          v84 = (char *)v148[0];
          v85 = qword_236922110[v141 + v81];
          v86 = (char *)v148[0];
          if (!v79)
            goto LABEL_108;
          v87 = (int *)v147[0];
          v88 = (_DWORD *)(v148[0] + 4);
          v89 = v83;
          v90 = v79;
          do
          {
            v91 = *(_DWORD *)v89;
            v89 += 4;
            *(v88 - 1) = v91;
            *v88 = (float)((float)((float)v87[64 * v85 + v91] * v82) + 0.1);
            v88 += 2;
            --v90;
          }
          while (v90);
          v86 = &v84[8 * v79];
          if (v79 >= 0x81)
          {
            v92 = v75;
            v93 = v79;
            while (1)
            {
              v94 = operator new(8 * v93, MEMORY[0x24BEDB6B8]);
              if (v94)
                break;
              v95 = v93 > 1;
              v93 >>= 1;
              if (!v95)
              {
                v3 = v120;
                v83 = __pa;
                goto LABEL_108;
              }
            }
            v105 = v94;
            sub_236826520(v84, &v84[8 * v79], v79, v94, v93);
            operator delete(v105);
            v3 = v120;
            v75 = v92;
            v83 = __pa;
          }
          else
          {
LABEL_108:
            sub_236826520(v84, v86, v79, 0, 0);
            if (!v79)
              goto LABEL_112;
          }
          v96 = (int8x16_t)v143;
          v97 = (int32x4_t *)(v75 + (v85 << 8));
          v98 = (__int32 *)(v84 + 64);
          v99 = (int32x4_t *)v83;
          v100 = v79;
          do
          {
            v101.i32[0] = *(v98 - 16);
            v101.i32[1] = *(v98 - 14);
            v101.i32[2] = *(v98 - 12);
            v101.i32[3] = *(v98 - 10);
            v102.i32[0] = *(v98 - 8);
            v102.i32[1] = *(v98 - 6);
            v102.i32[2] = *(v98 - 4);
            v102.i32[3] = *(v98 - 2);
            v103.i32[0] = *v98;
            v103.i32[1] = v98[2];
            v103.i32[2] = v98[4];
            v103.i32[3] = v98[6];
            v104.i32[0] = v98[8];
            v104.i32[1] = v98[10];
            v104.i32[2] = v98[12];
            v104.i32[3] = v98[14];
            v97[2] = v103;
            v97[3] = v104;
            *v97 = v101;
            v97[1] = v102;
            v97 += 4;
            v96 = vornq_s8(v96, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*v99, v101), (int16x8_t)vceqq_s32(v99[1], v102)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v99[2], v103), (int16x8_t)vceqq_s32(v99[3], v104))));
            v99 += 4;
            v98 += 32;
            v100 -= 16;
          }
          while (v100);
          v143 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(v96, 7uLL))) & 1;
LABEL_112:
          ++v81;
        }
        while (v81 != 3);
        if ((v143 & 1) != 0)
          v106 = -1;
        else
          v106 = ~v135;
        v137 &= v106;
        v70 = v115;
        v66 = v116;
        v67 = v113 + 4 * v111 * v116;
LABEL_122:
        v74 = v133;
LABEL_123:
        ++v73;
      }
      while (v73 != 27);
      *(_DWORD *)(v117 + 4 * v66) |= v137;
      if (__pa)
      {
        v145 = __pa;
        operator delete(__pa);
      }
      sub_2368264D0(v148);
      if (v147[0])
      {
        v147[1] = v147[0];
        operator delete(v147[0]);
      }
      v114 += 4;
      v17 = v66 + 1;
    }
    while ((unint64_t)(v66 + 1) < *(_QWORD *)(v3 + 4272));
  }
  *(_DWORD *)(v3 + 5232) |= v115;
}

void sub_23683854C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_236838594(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 v4;
  _BOOL8 v5;
  unsigned __int8 v6;
  char **v8[5];
  unsigned __int8 v9;
  char **v10;
  void *v11[3];
  uint64_t v12;
  _QWORD v13[2];

  v12 = a3;
  memset(v11, 0, sizeof(v11));
  v10 = (char **)v11;
  v9 = 0;
  v8[0] = (char **)&v9;
  v8[1] = (char **)a3;
  v8[2] = (char **)&v12;
  v8[3] = (char **)v11;
  v8[4] = a1;
  v3 = *(unsigned int *)(a3 + 120);
  if (a2)
  {
    v4 = sub_23683B790(a2, v3, &v10, v8);
  }
  else
  {
    v13[0] = 0;
    v13[1] = v13;
    v4 = sub_23683B790((uint64_t)v13, v3, &v10, v8);
  }
  v5 = v4;
  if (!v4)
  {
    v6 = atomic_load(&v9);
    v5 = v6 & 1;
  }
  sub_23683B82C(v11);
  return v5;
}

void sub_23683863C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_23683B82C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236838650(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  int v149;
  void **v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void **v168;
  _DWORD *v169;
  _DWORD *v170;
  _DWORD *v171;
  int v172;
  int v173;
  void **v174;
  _DWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  _DWORD *v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  int v205;
  int v206;
  void **v207;
  _DWORD *v208;
  _DWORD *v209;
  _DWORD *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  int v236;
  void **v237;
  _DWORD *v238;
  _DWORD *v239;
  _DWORD *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  void **v255;
  _DWORD *v256;
  _DWORD *v257;
  _DWORD *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  int v271;
  void **v272;
  _DWORD *v273;
  _DWORD *v274;
  _DWORD *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t *v287;
  void **v288;
  unint64_t v289;
  char *v290;
  uint64_t (*v291)();
  _DWORD *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  void **v304;
  uint64_t v305;
  unint64_t v306;
  int v307;
  int v308;
  int v309;
  int v310;
  float *v311;
  int v312;
  _BYTE *v313;
  _DWORD *v314;
  _DWORD *v315;
  _BYTE *v316;
  _DWORD *v317;
  _DWORD *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  int v330;
  _BYTE *v331;
  _DWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  char *v348;
  uint64_t v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  _BYTE *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  uint64_t v361;
  int v362;
  char *v363;
  char *v364;
  _DWORD *v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  char *v370;
  char *v371;
  uint64_t v372;
  char *v373;
  char *v374;
  char *v375;
  uint64_t v376;
  int **v377;
  void **v378;
  unint64_t v379;
  uint64_t (*v380)();
  uint64_t (*v381)();
  _DWORD *v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  char *v387;
  uint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  uint64_t v393;
  int *v394;
  int *v395;
  int v396;
  _BYTE *v397;
  _DWORD *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  char *v403;
  uint64_t v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  int v410;
  _BYTE *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  uint64_t v422;
  uint64_t j;
  uint64_t k;
  int v425;
  _BYTE *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  char *v431;
  uint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  char *v436;
  uint64_t v437;
  uint64_t m;
  int v439;
  _BYTE *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  char *v445;
  uint64_t v446;
  char *v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  unint64_t *v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  int v457;
  unint64_t *v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  unint64_t *v462;
  uint64_t v463;
  _BOOL8 v464;
  _BOOL8 v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  BOOL v471;
  BOOL v472;
  uint64_t v473;
  int **v474;
  int *v475;
  int *v476;
  int v477;
  int *v478;
  int *v479;
  int v480;
  uint64_t v481;
  unint64_t **v482;
  uint64_t v483;
  unint64_t *v484;
  uint64_t *v485;
  char *v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unsigned int v492;
  int v493;
  uint64_t v494;
  unint64_t v495;
  char v496;
  char v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  unsigned __int8 v504;
  _QWORD *v505;
  _QWORD *v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  unsigned int v510;
  float v511;
  float v512;
  int v513;
  int v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v525;
  unint64_t *v526;
  unint64_t v527;
  int **v528;
  unint64_t v529;
  int **v530;
  unsigned __int8 v531;
  uint64_t v532[2];
  _QWORD v533[2];
  unint64_t ***v534;
  BOOL *v535;
  BOOL v536;
  unint64_t v537;
  uint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  _OWORD v541[2];
  void *__p;
  uint64_t v543;
  uint64_t v544;
  _QWORD v545[2];
  __int128 v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  _BYTE v550[24];
  uint64_t v551;
  _QWORD **v552;
  __int128 v553;
  uint64_t (**v554)();
  __int128 v555;
  uint64_t v556;
  uint64_t v557;
  __int128 v558;
  uint64_t v559;
  uint64_t v560;

  v560 = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 4208;
  v539 = a3;
  v540 = a2;
  v9 = *(_QWORD *)(a2 + 4272);
  v537 = v9;
  v538 = a5;
  v11 = *(_QWORD *)(a2 + 120);
  v10 = *(_QWORD *)(a2 + 128);
  if (*(_BYTE *)(a2 + 4208))
    v12 = 0;
  else
    v12 = v11 == 1;
  v520 = *(_QWORD *)(a2 + 128);
  if (v12)
  {
    v536 = v9 == 1;
    if (v9 == 1)
      goto LABEL_8;
  }
  else
  {
    v536 = 0;
  }
  v9 = v10 + v9 * v11 + 2;
LABEL_8:
  v13 = *(_QWORD *)a5;
  v14 = *(_QWORD *)(a5 + 8);
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - *(_QWORD *)a5) >> 3);
  v16 = v9 - v15;
  if (v9 <= v15)
  {
    if (v9 < v15)
    {
      for (i = v13 + 40 * v9; v14 != i; v14 -= 40)
        sub_2367C2F38((uint64_t *)(v14 - 16));
      *(_QWORD *)(a5 + 8) = i;
    }
  }
  else
  {
    v17 = *(_QWORD *)(a5 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v17 - v14) >> 3) >= v16)
    {
      bzero(*(void **)(a5 + 8), 40 * ((40 * v16 - 40) / 0x28) + 40);
      *(_QWORD *)(a5 + 8) = v14 + 40 * ((40 * v16 - 40) / 0x28) + 40;
    }
    else
    {
      if (v9 > 0x666666666666666)
        sub_2367C3440();
      __p = (void *)(a5 + 16);
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v13) >> 3);
      if (2 * v18 > v9)
        v9 = 2 * v18;
      if (v18 >= 0x333333333333333)
        v19 = 0x666666666666666;
      else
        v19 = v9;
      v20 = (char *)sub_2367DC0A4(v19);
      v21 = &v20[40 * v15];
      *(_QWORD *)&v541[0] = v20;
      *((_QWORD *)&v541[0] + 1) = v21;
      *((_QWORD *)&v541[1] + 1) = &v20[40 * v22];
      bzero(v21, 40 * ((40 * v16 - 40) / 0x28) + 40);
      *(_QWORD *)&v541[1] = &v21[40 * ((40 * v16 - 40) / 0x28) + 40];
      sub_23681E890((uint64_t *)a5, v541);
      sub_2367F6844((uint64_t)v541);
    }
  }
  v521 = v11;
  v534 = (unint64_t ***)&v538;
  v535 = &v536;
  v533[0] = &v534;
  v533[1] = a2 + 8;
  if (!*(_BYTE *)(v8 + 1))
  {
LABEL_432:
    v554 = 0;
    v555 = 0uLL;
    v532[0] = (uint64_t)&v554;
    v532[1] = a6;
    *(_QWORD *)v550 = &v554;
    *(_QWORD *)&v550[8] = &v534;
    *(_QWORD *)&v550[16] = &v540;
    v551 = a1;
    v552 = &v539;
    v463 = *(unsigned int *)(a2 + 128);
    if (a4)
    {
      v464 = sub_23683AD50(a4, v463, v532, (uint64_t)v550);
    }
    else
    {
      *(_QWORD *)&v541[0] = 0;
      *((_QWORD *)&v541[0] + 1) = v541;
      v464 = sub_23683AD50((uint64_t)v541, v463, v532, (uint64_t)v550);
    }
    v455 = v464;
    if (v464)
      goto LABEL_517;
    if (*(_DWORD *)(a1 + 12))
      goto LABEL_437;
    v481 = v540;
    v482 = *v534;
    v483 = *v535 ? 0 : v520 + 1;
    v484 = *v482;
    v485 = (uint64_t *)&(*v482)[5 * v483];
    v455 = sub_23685AAEC(v540 + 208, v485, 5, a6, v539);
    if ((_DWORD)v455)
    {
LABEL_517:
      *(_QWORD *)&v541[0] = &v554;
      sub_23683B100((void ***)v541);
      return v455;
    }
    v486 = (char *)(v481 + 4208);
    v487 = *(_QWORD *)(v481 + 120);
    v488 = __clz(v487) ^ 0x3F;
    if ((v487 & (v487 - 1)) != 0)
      v489 = v488 + 1;
    else
      v489 = v488;
    if (!*v486 && v489)
    {
      sub_2367F1484((uint64_t)v541, v485, v489);
      *(_QWORD *)(v484[5 * v483 + 3] + ((unint64_t)*v485 >> 3)) = ((*(_QWORD *)(v481 + 4200) - 1) << (*v485 & 7)) | *(unsigned __int8 *)(v484[5 * v483 + 3] + ((unint64_t)*v485 >> 3));
      *v485 += v489;
      sub_2367F14F8((uint64_t)v541, v485, 12, a6);
    }
    if (!*(_QWORD *)(v481 + 4272))
    {
LABEL_437:
      v531 = 0;
      *(_QWORD *)&v541[0] = &v531;
      *((_QWORD *)&v541[0] + 1) = &v554;
      *(_QWORD *)&v541[1] = &v540;
      *((_QWORD *)&v541[1] + 1) = &v539;
      __p = (void *)a2;
      v543 = (uint64_t)&v537;
      v544 = a1;
      v545[0] = v533;
      if (a4)
      {
        v465 = sub_23683ADEC(a4, v521, v532, (uint64_t)v541);
      }
      else
      {
        v557 = 0;
        *(_QWORD *)&v558 = &v557;
        v465 = sub_23683ADEC((uint64_t)&v557, v521, v532, (uint64_t)v541);
      }
      v455 = v465;
      if (!v465)
      {
        v504 = atomic_load(&v531);
        if ((v504 & 1) != 0)
        {
LABEL_515:
          v455 = 1;
        }
        else
        {
          sub_23683AE88(v532, 0);
          v506 = *(_QWORD **)v538;
          v505 = *(_QWORD **)(v538 + 8);
          while (v506 != v505)
          {
            v507 = sub_2367F1484((uint64_t)&v557, v506, 8);
            v508 = ((*v506 + 7) & 0xFFFFFFFFFFFFFFF8) - *v506;
            if (v508)
            {
              *(_QWORD *)(v506[3] + (*v506 >> 3)) = *(unsigned __int8 *)(v506[3] + (*v506 >> 3));
              *v506 += v508;
            }
            sub_2367F14F8(v507, v506, 12, a6);
            v506 += 5;
          }
          v455 = 0;
        }
      }
      goto LABEL_517;
    }
    v490 = 0;
    v491 = 0;
    while (1)
    {
      if (!*v486)
      {
        v492 = *(_DWORD *)(*(_QWORD *)(v481 + 5240) + 4 * v491);
        *(_QWORD *)&v541[0] = 0;
        if (sub_2367F2290(0x800000138000005FLL, 0xC80000000, v492, &v557, (unint64_t *)v541))
          goto LABEL_515;
        sub_2367F1484((uint64_t)v541, v485, *(uint64_t *)&v541[0]);
        sub_2368AD3C4(0x800000138000005FLL, 0xC80000000, *(_DWORD *)(*(_QWORD *)(v481 + 5240) + 4 * v491), v485);
        sub_2367F14F8((uint64_t)v541, v485, 11, a6);
        sub_2368273B8(*(unsigned __int16 *)(*(_QWORD *)(v481 + 5240) + 4 * v491), *(_QWORD *)(v481 + 1568) + 4 * *(_QWORD *)(v481 + 1560) * v491, (unint64_t *)v485, a6);
      }
      v493 = *(_DWORD *)(v481 + 4592);
      v494 = *(_QWORD *)(v481 + 1880);
      *(_QWORD *)((char *)v541 + 4) = 0x100000004;
      HIDWORD(v541[0]) = 2;
      __p = 0;
      v541[1] = 0uLL;
      v543 = -1;
      LOBYTE(v544) = 0;
      *(_WORD *)((char *)&v544 + 3) = 0;
      if (v493 >= 8)
        break;
      if (v493 < 2)
      {
        LODWORD(v541[0]) = 2;
        goto LABEL_483;
      }
      *(_QWORD *)&v541[0] = 1;
      if (v493 != 2)
        goto LABEL_477;
LABEL_478:
      DWORD2(v541[0]) = 0;
LABEL_483:
      if (*(_QWORD *)(v481 + 4600))
      {
        v543 = 6;
        v495 = 6;
      }
      else
      {
        v495 = -1;
      }
      v496 = *v486;
      v497 = *(_BYTE *)(v481 + 4209);
      v498 = *(_QWORD *)(v481 + 5184);
      if (*v486)
      {
        v499 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v498 + v490 + 56) - *(_QWORD *)(v498 + v490 + 48)) >> 3);
        if (*(_BYTE *)(v481 + 4209))
        {
          ++v499;
          BYTE4(v544) = 1;
        }
        v500 = 128 - v499;
        v501 = 4;
        if (v500 < 4)
          v501 = v500;
        if (v500 >= 0x14)
          v502 = v500 >> 2;
        else
          v502 = v501;
        if (v495 >= v502)
          v495 = v502;
        v543 = v495;
        v503 = 1;
      }
      else
      {
        v503 = *(_QWORD *)(v481 + 4200);
      }
      BYTE2(v544) = v496;
      BYTE1(v544) = v497;
      sub_236819104((uint64_t)v541, v503 * (495 * v494), v498 + v490, (uint64_t *)(v498 + v490 + 48), (unint64_t *)(v498 + v490 + 24), (unint64_t *)v485, 12, a6);
      ++v491;
      v490 += 176;
      if (v491 >= *(_QWORD *)(v481 + 4272))
        goto LABEL_437;
    }
    *(_QWORD *)&v541[0] = 0;
LABEL_477:
    HIDWORD(v541[0]) = 1;
    goto LABEL_478;
  }
  v24 = *(_QWORD *)(a1 + 24);
  if ((v24 & 2) == 0)
  {
    v25 = (uint64_t ***)&v538;
    v26 = a6;
    if ((v24 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_252;
  }
  v27 = *(_QWORD *)a5;
  sub_236826F90(&v557);
  v28 = *(_QWORD *)(a2 + 1272);
  v29 = *(_QWORD *)(a2 + 1264);
  v30 = 0;
  v31 = v28 - v29;
  if (v28 != v29)
  {
    v32 = 0;
    v33 = v31 / 24;
    v36 = *(_QWORD *)(v29 + 16);
    v34 = v29 + 16;
    v35 = v36;
    do
    {
      if (v33 <= v32 + 1)
        v37 = v32 + 1;
      else
        v37 = v33;
      v38 = (uint64_t *)(v34 + 24 * v32);
      while (1)
      {
        v40 = *v38;
        v38 += 3;
        v39 = v40;
        if (v40 != v35)
          break;
        if (v37 == ++v32)
        {
          ++v30;
          goto LABEL_37;
        }
      }
      ++v30;
      v35 = v39;
    }
    while (v32 < v33);
  }
LABEL_37:
  v41 = *(unsigned int *)(**(_QWORD **)(a2 + 1256) + 320);
  v42 = (void **)v557;
  v43 = *(_DWORD **)(v557 + 8);
  v44 = *(_DWORD **)(v557 + 16);
  v519 = (unint64_t *)v27;
  if (v43 >= v44)
  {
    v46 = ((uint64_t)v43 - *(_QWORD *)v557) >> 3;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61)
      sub_2367C3440();
    v48 = (uint64_t)v44 - *(_QWORD *)v557;
    if (v48 >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    v50 = (char *)sub_2367CA1FC(v49);
    v51 = &v50[8 * v46];
    v53 = &v50[8 * v52];
    *(_DWORD *)v51 = 0;
    *((_DWORD *)v51 + 1) = v30;
    v45 = v51 + 8;
    v55 = (char *)*v42;
    v54 = (char *)v42[1];
    if (v54 != *v42)
    {
      do
      {
        v56 = *((_QWORD *)v54 - 1);
        v54 -= 8;
        *((_QWORD *)v51 - 1) = v56;
        v51 -= 8;
      }
      while (v54 != v55);
      v54 = (char *)*v42;
    }
    *v42 = v51;
    v42[1] = v45;
    v42[2] = v53;
    if (v54)
      operator delete(v54);
  }
  else
  {
    *v43 = 0;
    v43[1] = v30;
    v45 = v43 + 2;
  }
  v42[1] = v45;
  v57 = *(_QWORD *)(a2 + 1264);
  v58 = *(_QWORD *)(a2 + 1272) - v57;
  if (v58)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0xAAAAAAAAAAAAAAABLL * (v58 >> 3);
LABEL_52:
    v62 = v57 + 24 * v59;
    v65 = *(_QWORD *)(v62 + 16);
    v63 = (uint64_t *)(v62 + 16);
    v64 = v65;
    v66 = *(_QWORD *)(a2 + 1288);
    v67 = (uint64_t *)(v66 + 40 * v65);
    v529 = v59;
    if (v61 <= v59 + 1)
      v61 = v59 + 1;
    do
    {
      v68 = *v63;
      v63 += 3;
      if (v68 != v64)
        goto LABEL_57;
      ++v59;
    }
    while (v61 != v59);
    v59 = v61;
LABEL_57:
    v69 = *v67;
    v70 = (void **)v557;
    v72 = *(_DWORD **)(v557 + 8);
    v71 = *(_DWORD **)(v557 + 16);
    v525 = *(_QWORD *)(a2 + 1288);
    if (v72 >= v71)
    {
      v74 = ((uint64_t)v72 - *(_QWORD *)v557) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        goto LABEL_525;
      v76 = (uint64_t)v71 - *(_QWORD *)v557;
      if (v76 >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      v78 = (char *)sub_2367CA1FC(v77);
      v80 = &v78[8 * v74];
      *(_DWORD *)v80 = 2;
      *((_DWORD *)v80 + 1) = v69;
      v82 = (char *)*v70;
      v81 = (char *)v70[1];
      v83 = v80;
      if (v81 != *v70)
      {
        do
        {
          v84 = *((_QWORD *)v81 - 1);
          v81 -= 8;
          *((_QWORD *)v83 - 1) = v84;
          v83 -= 8;
        }
        while (v81 != v82);
        v81 = (char *)*v70;
      }
      v73 = v80 + 8;
      *v70 = v83;
      v70[1] = v80 + 8;
      v70[2] = &v78[8 * v79];
      if (v81)
        operator delete(v81);
      v66 = v525;
    }
    else
    {
      *v72 = 2;
      v72[1] = v69;
      v73 = v72 + 2;
    }
    v70[1] = v73;
    v85 = *(_QWORD *)(v66 + 40 * v64 + 8);
    v86 = (void **)v557;
    v88 = *(_DWORD **)(v557 + 8);
    v87 = *(_DWORD **)(v557 + 16);
    if (v88 >= v87)
    {
      v90 = ((uint64_t)v88 - *(_QWORD *)v557) >> 3;
      v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 61)
        goto LABEL_525;
      v92 = (uint64_t)v87 - *(_QWORD *)v557;
      if (v92 >> 2 > v91)
        v91 = v92 >> 2;
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
        v93 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v93 = v91;
      v94 = (char *)sub_2367CA1FC(v93);
      v96 = &v94[8 * v90];
      *(_DWORD *)v96 = 6;
      *((_DWORD *)v96 + 1) = v85;
      v98 = (char *)*v86;
      v97 = (char *)v86[1];
      v99 = v96;
      if (v97 != *v86)
      {
        do
        {
          v100 = *((_QWORD *)v97 - 1);
          v97 -= 8;
          *((_QWORD *)v99 - 1) = v100;
          v99 -= 8;
        }
        while (v97 != v98);
        v97 = (char *)*v86;
      }
      v89 = v96 + 8;
      *v86 = v99;
      v86[1] = v96 + 8;
      v86[2] = &v94[8 * v95];
      if (v97)
        operator delete(v97);
      v66 = v525;
    }
    else
    {
      *v88 = 6;
      v88[1] = v85;
      v89 = v88 + 2;
    }
    v86[1] = v89;
    v101 = *(_QWORD *)(v66 + 40 * v64 + 16);
    v102 = (void **)v557;
    v104 = *(_DWORD **)(v557 + 8);
    v103 = *(_DWORD **)(v557 + 16);
    if (v104 >= v103)
    {
      v106 = ((uint64_t)v104 - *(_QWORD *)v557) >> 3;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 61)
        goto LABEL_525;
      v108 = (uint64_t)v103 - *(_QWORD *)v557;
      if (v108 >> 2 > v107)
        v107 = v108 >> 2;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
        v109 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v109 = v107;
      v110 = (char *)sub_2367CA1FC(v109);
      v112 = &v110[8 * v106];
      *(_DWORD *)v112 = 6;
      *((_DWORD *)v112 + 1) = v101;
      v114 = (char *)*v102;
      v113 = (char *)v102[1];
      v115 = v112;
      if (v113 != *v102)
      {
        do
        {
          v116 = *((_QWORD *)v113 - 1);
          v113 -= 8;
          *((_QWORD *)v115 - 1) = v116;
          v115 -= 8;
        }
        while (v113 != v114);
        v113 = (char *)*v102;
      }
      v105 = v112 + 8;
      *v102 = v115;
      v102[1] = v112 + 8;
      v102[2] = &v110[8 * v111];
      if (v113)
        operator delete(v113);
      v66 = v525;
    }
    else
    {
      *v104 = 6;
      v104[1] = v101;
      v105 = v104 + 2;
    }
    v102[1] = v105;
    v117 = *(_QWORD *)(v66 + 40 * v64 + 24) - 1;
    v118 = (void **)v557;
    v120 = *(_DWORD **)(v557 + 8);
    v119 = *(_DWORD **)(v557 + 16);
    if (v120 >= v119)
    {
      v122 = ((uint64_t)v120 - *(_QWORD *)v557) >> 3;
      v123 = v122 + 1;
      if ((unint64_t)(v122 + 1) >> 61)
        goto LABEL_525;
      v124 = (uint64_t)v119 - *(_QWORD *)v557;
      if (v124 >> 2 > v123)
        v123 = v124 >> 2;
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v123;
      v126 = (char *)sub_2367CA1FC(v125);
      v128 = &v126[8 * v122];
      *(_DWORD *)v128 = 4;
      *((_DWORD *)v128 + 1) = v117;
      v130 = (char *)*v118;
      v129 = (char *)v118[1];
      v131 = v128;
      if (v129 != *v118)
      {
        do
        {
          v132 = *((_QWORD *)v129 - 1);
          v129 -= 8;
          *((_QWORD *)v131 - 1) = v132;
          v131 -= 8;
        }
        while (v129 != v130);
        v129 = (char *)*v118;
      }
      v121 = v128 + 8;
      *v118 = v131;
      v118[1] = v128 + 8;
      v118[2] = &v126[8 * v127];
      if (v129)
        operator delete(v129);
      v66 = v525;
    }
    else
    {
      *v120 = 4;
      v120[1] = v117;
      v121 = v120 + 2;
    }
    v118[1] = v121;
    v133 = *(_QWORD *)(v66 + 40 * v64 + 32) - 1;
    v134 = (void **)v557;
    v136 = *(_DWORD **)(v557 + 8);
    v135 = *(_DWORD **)(v557 + 16);
    if (v136 >= v135)
    {
      v138 = ((uint64_t)v136 - *(_QWORD *)v557) >> 3;
      v139 = v138 + 1;
      if ((unint64_t)(v138 + 1) >> 61)
        goto LABEL_525;
      v140 = (uint64_t)v135 - *(_QWORD *)v557;
      if (v140 >> 2 > v139)
        v139 = v140 >> 2;
      if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
        v141 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v141 = v139;
      v142 = (char *)sub_2367CA1FC(v141);
      v144 = &v142[8 * v138];
      *(_DWORD *)v144 = 4;
      *((_DWORD *)v144 + 1) = v133;
      v146 = (char *)*v134;
      v145 = (char *)v134[1];
      v147 = v144;
      if (v145 != *v134)
      {
        do
        {
          v148 = *((_QWORD *)v145 - 1);
          v145 -= 8;
          *((_QWORD *)v147 - 1) = v148;
          v147 -= 8;
        }
        while (v145 != v146);
        v145 = (char *)*v134;
      }
      v137 = v144 + 8;
      *v134 = v147;
      v134[1] = v144 + 8;
      v134[2] = &v142[8 * v143];
      if (v145)
        operator delete(v145);
    }
    else
    {
      *v136 = 4;
      v136[1] = v133;
      v137 = v136 + 2;
    }
    v134[1] = v137;
    v149 = v59 + ~(_DWORD)v529;
    v150 = (void **)v557;
    v152 = *(_DWORD **)(v557 + 8);
    v151 = *(_DWORD **)(v557 + 16);
    if (v152 < v151)
    {
      *v152 = 14;
      v152[1] = v149;
      v153 = v152 + 2;
      goto LABEL_139;
    }
    v154 = ((uint64_t)v152 - *(_QWORD *)v557) >> 3;
    v155 = v154 + 1;
    if (!((unint64_t)(v154 + 1) >> 61))
    {
      v156 = (uint64_t)v151 - *(_QWORD *)v557;
      if (v156 >> 2 > v155)
        v155 = v156 >> 2;
      if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
        v157 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v157 = v155;
      v158 = (char *)sub_2367CA1FC(v157);
      v160 = &v158[8 * v154];
      *(_DWORD *)v160 = 14;
      *((_DWORD *)v160 + 1) = v149;
      v162 = (char *)*v150;
      v161 = (char *)v150[1];
      v163 = v160;
      if (v161 != *v150)
      {
        do
        {
          v164 = *((_QWORD *)v161 - 1);
          v161 -= 8;
          *((_QWORD *)v163 - 1) = v164;
          v163 -= 8;
        }
        while (v161 != v162);
        v161 = (char *)*v150;
      }
      v153 = v160 + 8;
      *v150 = v163;
      v150[1] = v160 + 8;
      v150[2] = &v158[8 * v159];
      if (v161)
        operator delete(v161);
LABEL_139:
      v150[1] = v153;
      v165 = v529;
      v527 = v59;
      if (v529 >= v59)
        goto LABEL_246;
      while (1)
      {
        v166 = *(_QWORD *)(a2 + 1264);
        v167 = *(_QWORD *)(v166 + 24 * v165);
        if (v165 == v529)
        {
          v168 = (void **)v557;
          v170 = *(_DWORD **)(v557 + 8);
          v169 = *(_DWORD **)(v557 + 16);
          if (v170 >= v169)
          {
            v178 = ((uint64_t)v170 - *(_QWORD *)v557) >> 3;
            v179 = v178 + 1;
            if ((unint64_t)(v178 + 1) >> 61)
              goto LABEL_524;
            v180 = (uint64_t)v169 - *(_QWORD *)v557;
            if (v180 >> 2 > v179)
              v179 = v180 >> 2;
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
              v181 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v181 = v179;
            v182 = (char *)sub_2367CA1FC(v181);
            v184 = &v182[8 * v178];
            *(_DWORD *)v184 = 8;
            *((_DWORD *)v184 + 1) = v167;
            v186 = (char *)*v168;
            v185 = (char *)v168[1];
            v187 = v184;
            if (v185 != *v168)
            {
              do
              {
                v188 = *((_QWORD *)v185 - 1);
                v185 -= 8;
                *((_QWORD *)v187 - 1) = v188;
                v187 -= 8;
              }
              while (v185 != v186);
              v185 = (char *)*v168;
            }
            v171 = v184 + 8;
            *v168 = v187;
            v168[1] = v184 + 8;
            v168[2] = &v182[8 * v183];
            if (v185)
              operator delete(v185);
          }
          else
          {
            *v170 = 8;
            v170[1] = v167;
            v171 = v170 + 2;
          }
          v168[1] = v171;
          v189 = *(_QWORD *)(v166 + 24 * v529 + 8);
          v190 = (void **)v557;
          v192 = *(_DWORD **)(v557 + 8);
          v191 = *(_DWORD **)(v557 + 16);
          if (v192 >= v191)
          {
            v211 = ((uint64_t)v192 - *(_QWORD *)v557) >> 3;
            v212 = v211 + 1;
            if ((unint64_t)(v211 + 1) >> 61)
              goto LABEL_524;
            v213 = (uint64_t)v191 - *(_QWORD *)v557;
            if (v213 >> 2 > v212)
              v212 = v213 >> 2;
            if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
              v214 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v214 = v212;
            v215 = (char *)sub_2367CA1FC(v214);
            v217 = &v215[8 * v211];
            *(_DWORD *)v217 = 8;
            *((_DWORD *)v217 + 1) = v189;
            v219 = (char *)*v190;
            v218 = (char *)v190[1];
            v220 = v217;
            if (v218 != *v190)
            {
              do
              {
                v221 = *((_QWORD *)v218 - 1);
                v218 -= 8;
                *((_QWORD *)v220 - 1) = v221;
                v220 -= 8;
              }
              while (v218 != v219);
              v218 = (char *)*v190;
            }
            v193 = v217 + 8;
            *v190 = v220;
            v190[1] = v217 + 8;
            v190[2] = &v215[8 * v216];
            if (v218)
              operator delete(v218);
          }
          else
          {
            *v192 = 8;
            v192[1] = v189;
            v193 = v192 + 2;
          }
          v190[1] = v193;
        }
        else
        {
          v172 = v167 - *(_DWORD *)(v166 + 24 * (v165 - 1));
          v173 = (2 * v172) ^ (v172 >> 31);
          v174 = (void **)v557;
          v176 = *(_DWORD **)(v557 + 8);
          v175 = *(_DWORD **)(v557 + 16);
          if (v176 >= v175)
          {
            v194 = ((uint64_t)v176 - *(_QWORD *)v557) >> 3;
            v195 = v194 + 1;
            if ((unint64_t)(v194 + 1) >> 61)
              goto LABEL_524;
            v196 = (uint64_t)v175 - *(_QWORD *)v557;
            if (v196 >> 2 > v195)
              v195 = v196 >> 2;
            if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
              v197 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v197 = v195;
            v198 = (char *)sub_2367CA1FC(v197);
            v200 = &v198[8 * v194];
            *(_DWORD *)v200 = 12;
            *((_DWORD *)v200 + 1) = v173;
            v202 = (char *)*v174;
            v201 = (char *)v174[1];
            v203 = v200;
            if (v201 != *v174)
            {
              do
              {
                v204 = *((_QWORD *)v201 - 1);
                v201 -= 8;
                *((_QWORD *)v203 - 1) = v204;
                v203 -= 8;
              }
              while (v201 != v202);
              v201 = (char *)*v174;
            }
            v177 = v200 + 8;
            *v174 = v203;
            v174[1] = v200 + 8;
            v174[2] = &v198[8 * v199];
            if (v201)
              operator delete(v201);
          }
          else
          {
            *v176 = 12;
            v176[1] = v173;
            v177 = v176 + 2;
          }
          v174[1] = v177;
          v205 = *(_DWORD *)(v166 + 24 * v165 + 8) - *(_DWORD *)(*(_QWORD *)(a2 + 1264) + 24 * (v165 - 1) + 8);
          v206 = (2 * v205) ^ (v205 >> 31);
          v207 = (void **)v557;
          v209 = *(_DWORD **)(v557 + 8);
          v208 = *(_DWORD **)(v557 + 16);
          if (v209 >= v208)
          {
            v222 = ((uint64_t)v209 - *(_QWORD *)v557) >> 3;
            v223 = v222 + 1;
            if ((unint64_t)(v222 + 1) >> 61)
LABEL_524:
              sub_2367C3440();
            v224 = (uint64_t)v208 - *(_QWORD *)v557;
            if (v224 >> 2 > v223)
              v223 = v224 >> 2;
            if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8)
              v225 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v225 = v223;
            v226 = (char *)sub_2367CA1FC(v225);
            v228 = &v226[8 * v222];
            *(_DWORD *)v228 = 12;
            *((_DWORD *)v228 + 1) = v206;
            v230 = (char *)*v207;
            v229 = (char *)v207[1];
            v231 = v228;
            if (v229 != *v207)
            {
              do
              {
                v232 = *((_QWORD *)v229 - 1);
                v229 -= 8;
                *((_QWORD *)v231 - 1) = v232;
                v231 -= 8;
              }
              while (v229 != v230);
              v229 = (char *)*v207;
            }
            v210 = v228 + 8;
            *v207 = v231;
            v207[1] = v228 + 8;
            v207[2] = &v226[8 * v227];
            if (v229)
              operator delete(v229);
          }
          else
          {
            *v209 = 12;
            v209[1] = v206;
            v210 = v209 + 2;
          }
          v207[1] = v210;
        }
        v233 = v41 + 1 + v60;
        do
        {
          v234 = *(_QWORD *)(a2 + 1312);
          v235 = (unsigned __int8 *)(v234 + 12 * v60);
          v236 = *v235;
          v237 = (void **)v557;
          v239 = *(_DWORD **)(v557 + 8);
          v238 = *(_DWORD **)(v557 + 16);
          if (v239 >= v238)
          {
            v241 = ((uint64_t)v239 - *(_QWORD *)v557) >> 3;
            v242 = v241 + 1;
            if ((unint64_t)(v241 + 1) >> 61)
              goto LABEL_522;
            v243 = (uint64_t)v238 - *(_QWORD *)v557;
            if (v243 >> 2 > v242)
              v242 = v243 >> 2;
            if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8)
              v244 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v244 = v242;
            v245 = (char *)sub_2367CA1FC(v244);
            v247 = &v245[8 * v241];
            *(_DWORD *)v247 = 10;
            *((_DWORD *)v247 + 1) = v236;
            v249 = (char *)*v237;
            v248 = (char *)v237[1];
            v250 = v247;
            if (v248 != *v237)
            {
              do
              {
                v251 = *((_QWORD *)v248 - 1);
                v248 -= 8;
                *((_QWORD *)v250 - 1) = v251;
                v250 -= 8;
              }
              while (v248 != v249);
              v248 = (char *)*v237;
            }
            v240 = v247 + 8;
            *v237 = v250;
            v237[1] = v247 + 8;
            v237[2] = &v245[8 * v246];
            if (v248)
              operator delete(v248);
          }
          else
          {
            *v239 = 10;
            v239[1] = v236;
            v240 = v239 + 2;
          }
          v237[1] = v240;
          v252 = *v235;
          v253 = v252 & 0xFC;
          if (v253 != 4)
            goto LABEL_225;
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(**(_QWORD **)(a2 + 1256) + 336) - *(_QWORD *)(**(_QWORD **)(a2 + 1256) + 328)) >> 5) >= 2)
          {
            v254 = *(_DWORD *)(v234 + 12 * v60 + 4);
            v255 = (void **)v557;
            v257 = *(_DWORD **)(v557 + 8);
            v256 = *(_DWORD **)(v557 + 16);
            if (v257 >= v256)
            {
              v259 = ((uint64_t)v257 - *(_QWORD *)v557) >> 3;
              v260 = v259 + 1;
              if ((unint64_t)(v259 + 1) >> 61)
                goto LABEL_522;
              v261 = (uint64_t)v256 - *(_QWORD *)v557;
              if (v261 >> 2 > v260)
                v260 = v261 >> 2;
              if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF8)
                v262 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v262 = v260;
              v263 = (char *)sub_2367CA1FC(v262);
              v265 = &v263[8 * v259];
              *(_DWORD *)v265 = 16;
              *((_DWORD *)v265 + 1) = v254;
              v267 = (char *)*v255;
              v266 = (char *)v255[1];
              v268 = v265;
              if (v266 != *v255)
              {
                do
                {
                  v269 = *((_QWORD *)v266 - 1);
                  v266 -= 8;
                  *((_QWORD *)v268 - 1) = v269;
                  v268 -= 8;
                }
                while (v266 != v267);
                v266 = (char *)*v255;
              }
              v258 = v265 + 8;
              *v255 = v268;
              v255[1] = v265 + 8;
              v255[2] = &v263[8 * v264];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *v257 = 16;
              v257[1] = v254;
              v258 = v257 + 2;
            }
            v255[1] = v258;
            v252 = *v235;
            v253 = v252 & 0xFC;
LABEL_225:
            if (v252 != 3 && v253 != 4)
              goto LABEL_244;
          }
          v271 = *(unsigned __int8 *)(v234 + 12 * v60 + 8);
          v272 = (void **)v557;
          v274 = *(_DWORD **)(v557 + 8);
          v273 = *(_DWORD **)(v557 + 16);
          if (v274 >= v273)
          {
            v276 = ((uint64_t)v274 - *(_QWORD *)v557) >> 3;
            v277 = v276 + 1;
            if ((unint64_t)(v276 + 1) >> 61)
LABEL_522:
              sub_2367C3440();
            v278 = (uint64_t)v273 - *(_QWORD *)v557;
            if (v278 >> 2 > v277)
              v277 = v278 >> 2;
            if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
              v279 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v279 = v277;
            v280 = (char *)sub_2367CA1FC(v279);
            v282 = &v280[8 * v276];
            *(_DWORD *)v282 = 18;
            *((_DWORD *)v282 + 1) = v271;
            v284 = (char *)*v272;
            v283 = (char *)v272[1];
            v285 = v282;
            if (v283 != *v272)
            {
              do
              {
                v286 = *((_QWORD *)v283 - 1);
                v283 -= 8;
                *((_QWORD *)v285 - 1) = v286;
                v285 -= 8;
              }
              while (v283 != v284);
              v283 = (char *)*v272;
            }
            v275 = v282 + 8;
            *v272 = v285;
            v272[1] = v282 + 8;
            v272[2] = &v280[8 * v281];
            if (v283)
              operator delete(v283);
          }
          else
          {
            *v274 = 18;
            v274[1] = v271;
            v275 = v274 + 2;
          }
          v272[1] = v275;
LABEL_244:
          ++v60;
        }
        while (v60 != v233);
        ++v165;
        v60 = v233;
        v59 = v527;
        if (v165 == v527)
        {
LABEL_246:
          v57 = *(_QWORD *)(a2 + 1264);
          v61 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 1272) - v57) >> 3);
          if (v59 >= v61)
            goto LABEL_247;
          goto LABEL_52;
        }
      }
    }
LABEL_525:
    sub_2367C3440();
  }
LABEL_247:
  memset(v541, 0, 24);
  __p = 0;
  v543 = 0;
  v544 = 0;
  v545[0] = &off_2507FF438;
  v546 = xmmword_2368AF590;
  *(_QWORD *)v550 = &off_2507FF550;
  *(_OWORD *)&v550[8] = xmmword_2368AF3F0;
  v551 = 0;
  sub_2367CB9F8((uint64_t)v545, (uint64_t)v550);
  v548 = 0;
  v549 = 0;
  v547 = 0;
  v554 = 0;
  v555 = 0uLL;
  *(_OWORD *)v550 = xmmword_2368AF850;
  v551 = 0;
  v552 = 0;
  *(_QWORD *)&v550[16] = 0;
  v553 = xmmword_2368AF860;
  BYTE9(v553) = 1;
  BYTE11(v553) = 0;
  v26 = a6;
  sub_236819104((uint64_t)v550, 0xAuLL, (uint64_t)&v557, (uint64_t *)v541, (unint64_t *)&v554, v519, 2, a6);
  sub_23681FA78(v557, (uint64_t)v541, &v554, 0, v519, 2, a6);
  if (v554)
    operator delete(v554);
  *(_QWORD *)v550 = &v547;
  sub_2367D077C((void ***)v550);
  if (__p)
  {
    v543 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)v550 = v541;
  sub_236817010((void ***)v550);
  *(_QWORD *)&v541[0] = &v557;
  sub_2367D17E4((void ***)v541);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = (uint64_t ***)v534;
  if ((v24 & 0x10) == 0)
  {
LABEL_25:
    if ((v24 & 1) == 0)
      goto LABEL_419;
    goto LABEL_416;
  }
LABEL_252:
  v287 = **v25;
  *(_OWORD *)v550 = xmmword_2368AF850;
  v551 = 0;
  v552 = 0;
  *(_QWORD *)&v550[16] = 0;
  v553 = xmmword_2368AF860;
  BYTE9(v553) = 1;
  BYTE11(v553) = 0;
  sub_236826F90(&v554);
  v288 = (void **)v554;
  v289 = 0xF0B7672A07A44C6BLL * ((uint64_t)(*(_QWORD *)(a2 + 1448) - *(_QWORD *)(a2 + 1440)) >> 3) - 1;
  v290 = (char *)v554[1];
  v291 = v554[2];
  if (v290 >= (char *)v291)
  {
    v293 = (v290 - (char *)*v554) >> 3;
    v294 = v293 + 1;
    if ((unint64_t)(v293 + 1) >> 61)
      sub_2367C3440();
    v295 = (char *)v291 - (char *)*v554;
    if (v295 >> 2 > v294)
      v294 = v295 >> 2;
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
      v296 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v296 = v294;
    v297 = (char *)sub_2367CA1FC(v296);
    v298 = &v297[8 * v293];
    v300 = &v297[8 * v299];
    *(_DWORD *)v298 = 4;
    *((_DWORD *)v298 + 1) = v289;
    v292 = v298 + 8;
    v302 = (char *)*v288;
    v301 = (char *)v288[1];
    if (v301 != *v288)
    {
      do
      {
        v303 = *((_QWORD *)v301 - 1);
        v301 -= 8;
        *((_QWORD *)v298 - 1) = v303;
        v298 -= 8;
      }
      while (v301 != v302);
      v301 = (char *)*v288;
    }
    *v288 = v298;
    v288[1] = v292;
    v288[2] = v300;
    if (v301)
      operator delete(v301);
  }
  else
  {
    *(_DWORD *)v290 = 4;
    *((_DWORD *)v290 + 1) = v289;
    v292 = v290 + 8;
  }
  v288[1] = v292;
  v304 = (void **)v554;
  v305 = *(_QWORD *)(a2 + 1464);
  v526 = (unint64_t *)v287;
  if (*(_QWORD *)(a2 + 1472) != v305)
  {
    v306 = 0;
    v307 = 0;
    v308 = 0;
    while (1)
    {
      v309 = v308;
      v310 = v307;
      v311 = (float *)(v305 + 8 * v306);
      v308 = llroundf(*v311);
      v307 = llroundf(v311[1]);
      if (v306)
      {
        v312 = (2 * (v308 - v309)) ^ ((v308 - v309) >> 31);
        v314 = v304[1];
        v313 = v304[2];
        if (v314 >= (_DWORD *)v313)
        {
          v319 = ((char *)v314 - (_BYTE *)*v304) >> 3;
          v320 = v319 + 1;
          if ((unint64_t)(v319 + 1) >> 61)
            goto LABEL_526;
          v321 = v313 - (_BYTE *)*v304;
          if (v321 >> 2 > v320)
            v320 = v321 >> 2;
          if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF8)
            v322 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v322 = v320;
          v323 = (char *)sub_2367CA1FC(v322);
          v325 = &v323[8 * v319];
          *(_DWORD *)v325 = 2;
          *((_DWORD *)v325 + 1) = v312;
          v327 = (char *)*v304;
          v326 = (char *)v304[1];
          v328 = v325;
          if (v326 != *v304)
          {
            do
            {
              v329 = *((_QWORD *)v326 - 1);
              v326 -= 8;
              *((_QWORD *)v328 - 1) = v329;
              v328 -= 8;
            }
            while (v326 != v327);
            v326 = (char *)*v304;
          }
          v315 = v325 + 8;
          *v304 = v328;
          v304[1] = v325 + 8;
          v304[2] = &v323[8 * v324];
          if (v326)
            operator delete(v326);
        }
        else
        {
          *v314 = 2;
          v314[1] = v312;
          v315 = v314 + 2;
        }
        v304[1] = v315;
        v330 = (2 * (v307 - v310)) ^ ((v307 - v310) >> 31);
        v331 = v304[2];
        if (v315 >= (_DWORD *)v331)
        {
          v333 = ((char *)v315 - (_BYTE *)*v304) >> 3;
          if ((unint64_t)(v333 + 1) >> 61)
            goto LABEL_526;
          v334 = v331 - (_BYTE *)*v304;
          v335 = v334 >> 2;
          if (v334 >> 2 <= (unint64_t)(v333 + 1))
            v335 = v333 + 1;
          if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF8)
            v336 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v336 = v335;
          v337 = (char *)sub_2367CA1FC(v336);
          v339 = &v337[8 * v333];
          *(_DWORD *)v339 = 2;
          *((_DWORD *)v339 + 1) = v330;
          v341 = (char *)*v304;
          v340 = (char *)v304[1];
          v342 = v339;
          if (v340 != *v304)
          {
            do
            {
              v343 = *((_QWORD *)v340 - 1);
              v340 -= 8;
              *((_QWORD *)v342 - 1) = v343;
              v342 -= 8;
            }
            while (v340 != v341);
            goto LABEL_315;
          }
          goto LABEL_316;
        }
        *v315 = 2;
        v315[1] = v330;
        v332 = v315 + 2;
      }
      else
      {
        v317 = v304[1];
        v316 = v304[2];
        if (v317 >= (_DWORD *)v316)
        {
          v344 = ((char *)v317 - (_BYTE *)*v304) >> 3;
          v345 = v344 + 1;
          if ((unint64_t)(v344 + 1) >> 61)
            goto LABEL_526;
          v346 = v316 - (_BYTE *)*v304;
          if (v346 >> 2 > v345)
            v345 = v346 >> 2;
          if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8)
            v347 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v347 = v345;
          v348 = (char *)sub_2367CA1FC(v347);
          v350 = &v348[8 * v344];
          *(_DWORD *)v350 = 2;
          *((_DWORD *)v350 + 1) = v308;
          v352 = (char *)*v304;
          v351 = (char *)v304[1];
          v353 = v350;
          if (v351 != *v304)
          {
            do
            {
              v354 = *((_QWORD *)v351 - 1);
              v351 -= 8;
              *((_QWORD *)v353 - 1) = v354;
              v353 -= 8;
            }
            while (v351 != v352);
            v351 = (char *)*v304;
          }
          v318 = v350 + 8;
          *v304 = v353;
          v304[1] = v350 + 8;
          v304[2] = &v348[8 * v349];
          if (v351)
            operator delete(v351);
        }
        else
        {
          *v317 = 2;
          v317[1] = v308;
          v318 = v317 + 2;
        }
        v304[1] = v318;
        v355 = v304[2];
        if (v318 >= (_DWORD *)v355)
        {
          v356 = ((char *)v318 - (_BYTE *)*v304) >> 3;
          if ((unint64_t)(v356 + 1) >> 61)
LABEL_526:
            sub_2367C3440();
          v357 = v355 - (_BYTE *)*v304;
          v358 = v357 >> 2;
          if (v357 >> 2 <= (unint64_t)(v356 + 1))
            v358 = v356 + 1;
          if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8)
            v359 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v359 = v358;
          v337 = (char *)sub_2367CA1FC(v359);
          v339 = &v337[8 * v356];
          *(_DWORD *)v339 = 2;
          *((_DWORD *)v339 + 1) = v307;
          v360 = (char *)*v304;
          v340 = (char *)v304[1];
          v342 = v339;
          if (v340 != *v304)
          {
            do
            {
              v361 = *((_QWORD *)v340 - 1);
              v340 -= 8;
              *((_QWORD *)v342 - 1) = v361;
              v342 -= 8;
            }
            while (v340 != v360);
LABEL_315:
            v340 = (char *)*v304;
          }
LABEL_316:
          v332 = v339 + 8;
          *v304 = v342;
          v304[1] = v339 + 8;
          v304[2] = &v337[8 * v338];
          if (v340)
            operator delete(v340);
          goto LABEL_318;
        }
        *v318 = 2;
        v318[1] = v307;
        v332 = v318 + 2;
      }
LABEL_318:
      v304[1] = v332;
      ++v306;
      v305 = *(_QWORD *)(a2 + 1464);
      if (v306 >= (*(_QWORD *)(a2 + 1472) - v305) >> 3)
      {
        v304 = (void **)v554;
        break;
      }
    }
  }
  v362 = (2 * *(_DWORD *)(a2 + 1432)) ^ (*(int *)(a2 + 1432) >> 31);
  v364 = (char *)v304[1];
  v363 = (char *)v304[2];
  if (v364 >= v363)
  {
    v366 = (v364 - (_BYTE *)*v304) >> 3;
    v367 = v366 + 1;
    if ((unint64_t)(v366 + 1) >> 61)
      sub_2367C3440();
    v368 = v363 - (_BYTE *)*v304;
    if (v368 >> 2 > v367)
      v367 = v368 >> 2;
    if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFF8)
      v369 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v369 = v367;
    v370 = (char *)sub_2367CA1FC(v369);
    v371 = &v370[8 * v366];
    v373 = &v370[8 * v372];
    *(_DWORD *)v371 = 0;
    *((_DWORD *)v371 + 1) = v362;
    v365 = v371 + 8;
    v375 = (char *)*v304;
    v374 = (char *)v304[1];
    if (v374 != *v304)
    {
      do
      {
        v376 = *((_QWORD *)v374 - 1);
        v374 -= 8;
        *((_QWORD *)v371 - 1) = v376;
        v371 -= 8;
      }
      while (v374 != v375);
      v374 = (char *)*v304;
    }
    *v304 = v371;
    v304[1] = v365;
    v304[2] = v373;
    if (v374)
      operator delete(v374);
  }
  else
  {
    *(_DWORD *)v364 = 0;
    *((_DWORD *)v364 + 1) = v362;
    v365 = v364 + 8;
  }
  v304[1] = v365;
  v377 = *(int ***)(a2 + 1440);
  v528 = *(int ***)(a2 + 1448);
  if (v377 != v528)
  {
    do
    {
      v378 = (void **)v554;
      v379 = (char *)v377[1] - (char *)*v377;
      v380 = v554[1];
      v381 = v554[2];
      if ((unint64_t)v380 >= (unint64_t)v381)
      {
        v383 = ((char *)v380 - (char *)*v554) >> 3;
        v384 = v383 + 1;
        if ((unint64_t)(v383 + 1) >> 61)
LABEL_521:
          sub_2367C3440();
        v385 = (char *)v381 - (char *)*v554;
        if (v385 >> 2 > v384)
          v384 = v385 >> 2;
        if ((unint64_t)v385 >= 0x7FFFFFFFFFFFFFF8)
          v386 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v386 = v384;
        v387 = (char *)sub_2367CA1FC(v386);
        v389 = &v387[8 * v383];
        *(_DWORD *)v389 = 6;
        *((_DWORD *)v389 + 1) = v379 >> 4;
        v391 = (char *)*v378;
        v390 = (char *)v378[1];
        v392 = v389;
        if (v390 != *v378)
        {
          do
          {
            v393 = *((_QWORD *)v390 - 1);
            v390 -= 8;
            *((_QWORD *)v392 - 1) = v393;
            v392 -= 8;
          }
          while (v390 != v391);
          v390 = (char *)*v378;
        }
        v382 = v389 + 8;
        *v378 = v392;
        v378[1] = v389 + 8;
        v378[2] = &v387[8 * v388];
        if (v390)
          operator delete(v390);
      }
      else
      {
        *(_DWORD *)v380 = 6;
        *((_DWORD *)v380 + 1) = v379 >> 4;
        v382 = (_DWORD *)((char *)v380 + 8);
      }
      v378[1] = v382;
      v530 = v377;
      v395 = *v377;
      v394 = v377[1];
      while (v395 != v394)
      {
        v396 = (2 * *v395) ^ (*v395 >> 31);
        v397 = v378[2];
        if (v382 >= (_DWORD *)v397)
        {
          v399 = ((char *)v382 - (_BYTE *)*v378) >> 3;
          if ((unint64_t)(v399 + 1) >> 61)
            goto LABEL_521;
          v400 = v397 - (_BYTE *)*v378;
          v401 = v400 >> 2;
          if (v400 >> 2 <= (unint64_t)(v399 + 1))
            v401 = v399 + 1;
          if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFF8)
            v402 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v402 = v401;
          v403 = (char *)sub_2367CA1FC(v402);
          v405 = &v403[8 * v399];
          *(_DWORD *)v405 = 8;
          *((_DWORD *)v405 + 1) = v396;
          v407 = (char *)*v378;
          v406 = (char *)v378[1];
          v408 = v405;
          if (v406 != *v378)
          {
            do
            {
              v409 = *((_QWORD *)v406 - 1);
              v406 -= 8;
              *((_QWORD *)v408 - 1) = v409;
              v408 -= 8;
            }
            while (v406 != v407);
            v406 = (char *)*v378;
          }
          v398 = v405 + 8;
          *v378 = v408;
          v378[1] = v405 + 8;
          v378[2] = &v403[8 * v404];
          if (v406)
            operator delete(v406);
        }
        else
        {
          *v382 = 8;
          v382[1] = v396;
          v398 = v382 + 2;
        }
        v378[1] = v398;
        v410 = (2 * v395[2]) ^ (v395[2] >> 31);
        v411 = v378[2];
        if (v398 >= (_DWORD *)v411)
        {
          v412 = ((char *)v398 - (_BYTE *)*v378) >> 3;
          if ((unint64_t)(v412 + 1) >> 61)
            goto LABEL_521;
          v413 = v411 - (_BYTE *)*v378;
          v414 = v413 >> 2;
          if (v413 >> 2 <= (unint64_t)(v412 + 1))
            v414 = v412 + 1;
          if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFF8)
            v415 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v415 = v414;
          v416 = (char *)sub_2367CA1FC(v415);
          v418 = &v416[8 * v412];
          *(_DWORD *)v418 = 8;
          *((_DWORD *)v418 + 1) = v410;
          v420 = (char *)*v378;
          v419 = (char *)v378[1];
          v421 = v418;
          if (v419 != *v378)
          {
            do
            {
              v422 = *((_QWORD *)v419 - 1);
              v419 -= 8;
              *((_QWORD *)v421 - 1) = v422;
              v421 -= 8;
            }
            while (v419 != v420);
            v419 = (char *)*v378;
          }
          v382 = v418 + 8;
          *v378 = v421;
          v378[1] = v418 + 8;
          v378[2] = &v416[8 * v417];
          if (v419)
            operator delete(v419);
        }
        else
        {
          *v398 = 8;
          v398[1] = v410;
          v382 = v398 + 2;
        }
        v378[1] = v382;
        v395 += 4;
      }
      for (j = 0; j != 3; ++j)
      {
        for (k = 0; k != 32; ++k)
        {
          v425 = (2 * *((_DWORD *)&v530[16 * j + 3] + k)) ^ (*((int *)&v530[16 * j + 3] + k) >> 31);
          v426 = v378[2];
          if (v382 >= (_DWORD *)v426)
          {
            v427 = ((char *)v382 - (_BYTE *)*v378) >> 3;
            if ((unint64_t)(v427 + 1) >> 61)
              goto LABEL_521;
            v428 = v426 - (_BYTE *)*v378;
            v429 = v428 >> 2;
            if (v428 >> 2 <= (unint64_t)(v427 + 1))
              v429 = v427 + 1;
            if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFF8)
              v430 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v430 = v429;
            v431 = (char *)sub_2367CA1FC(v430);
            v433 = &v431[8 * v427];
            *(_DWORD *)v433 = 10;
            *((_DWORD *)v433 + 1) = v425;
            v435 = (char *)*v378;
            v434 = (char *)v378[1];
            v436 = v433;
            if (v434 != *v378)
            {
              do
              {
                v437 = *((_QWORD *)v434 - 1);
                v434 -= 8;
                *((_QWORD *)v436 - 1) = v437;
                v436 -= 8;
              }
              while (v434 != v435);
              v434 = (char *)*v378;
            }
            v382 = v433 + 8;
            *v378 = v436;
            v378[1] = v433 + 8;
            v378[2] = &v431[8 * v432];
            if (v434)
              operator delete(v434);
          }
          else
          {
            *v382 = 10;
            v382[1] = v425;
            v382 += 2;
          }
          v378[1] = v382;
        }
      }
      for (m = 0; m != 32; ++m)
      {
        v439 = (2 * *((_DWORD *)v530 + m + 102)) ^ (*((int *)v530 + m + 102) >> 31);
        v440 = v378[2];
        if (v382 >= (_DWORD *)v440)
        {
          v441 = ((char *)v382 - (_BYTE *)*v378) >> 3;
          if ((unint64_t)(v441 + 1) >> 61)
            goto LABEL_521;
          v442 = v440 - (_BYTE *)*v378;
          v443 = v442 >> 2;
          if (v442 >> 2 <= (unint64_t)(v441 + 1))
            v443 = v441 + 1;
          if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFF8)
            v444 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v444 = v443;
          v445 = (char *)sub_2367CA1FC(v444);
          v447 = &v445[8 * v441];
          *(_DWORD *)v447 = 10;
          *((_DWORD *)v447 + 1) = v439;
          v449 = (char *)*v378;
          v448 = (char *)v378[1];
          v450 = v447;
          if (v448 != *v378)
          {
            do
            {
              v451 = *((_QWORD *)v448 - 1);
              v448 -= 8;
              *((_QWORD *)v450 - 1) = v451;
              v450 -= 8;
            }
            while (v448 != v449);
            v448 = (char *)*v378;
          }
          v382 = v447 + 8;
          *v378 = v450;
          v378[1] = v447 + 8;
          v378[2] = &v445[8 * v446];
          if (v448)
            operator delete(v448);
        }
        else
        {
          *v382 = 10;
          v382[1] = v439;
          v382 += 2;
        }
        v378[1] = v382;
      }
      v377 = v530 + 67;
    }
    while (v530 + 67 != v528);
  }
  memset(v541, 0, 24);
  __p = 0;
  v543 = 0;
  v544 = 0;
  v545[0] = &off_2507FF438;
  v546 = xmmword_2368AF590;
  v557 = (uint64_t)&off_2507FF550;
  v558 = xmmword_2368AF3F0;
  v559 = 0;
  sub_2367CB9F8((uint64_t)v545, (uint64_t)&v557);
  v548 = 0;
  v549 = 0;
  v547 = 0;
  v557 = 0;
  v558 = 0uLL;
  v26 = a6;
  sub_236819104((uint64_t)v550, 6uLL, (uint64_t)&v554, (uint64_t *)v541, (unint64_t *)&v557, v526, 3, a6);
  sub_23681FA78((uint64_t)v554, (uint64_t)v541, &v557, 0, v526, 3, a6);
  if (v557)
    operator delete((void *)v557);
  v557 = (uint64_t)&v547;
  sub_2367D077C((void ***)&v557);
  if (__p)
  {
    v543 = (uint64_t)__p;
    operator delete(__p);
  }
  v557 = (uint64_t)v541;
  sub_236817010((void ***)&v557);
  *(_QWORD *)&v541[0] = &v554;
  sub_2367D17E4((void ***)v541);
  if (*(_QWORD *)&v550[16])
    operator delete(*(void **)&v550[16]);
  v25 = (uint64_t ***)v534;
  if ((*(_QWORD *)(a1 + 24) & 1) != 0)
  {
LABEL_416:
    v452 = (unint64_t *)**v25;
    sub_2367F1484((uint64_t)v541, v452, 128);
    v453 = 0;
    v454 = *v452;
    do
    {
      *(_QWORD *)(v452[3] + (v454 >> 3)) = ((uint64_t)(int)llroundf(*(float *)(a2 + 1224 + v453) * 1024.0) << (v454 & 7)) | *(unsigned __int8 *)(v452[3] + (v454 >> 3));
      v454 = *v452 + 10;
      *v452 = v454;
      v453 += 4;
    }
    while (v453 != 32);
    v26 = a6;
    sub_2367F14F8((uint64_t)v541, v452, 4, a6);
    v25 = (uint64_t ***)v534;
  }
LABEL_419:
  v455 = sub_23685B244(a2 + 208, **v25, 5, v26);
  if (!(_DWORD)v455)
  {
    if (!*(_DWORD *)(a1 + 12))
    {
      v466 = (uint64_t *)**v534;
      *(_QWORD *)v550 = &off_2507FFBB8;
      *(_QWORD *)&v541[0] = &off_2507FF550;
      *(_OWORD *)((char *)v541 + 8) = xmmword_2368AF3F0;
      *((_QWORD *)&v541[1] + 1) = 0;
      sub_236806244((uint64_t)v550, (uint64_t)v541);
      *(_QWORD *)&v550[8] = *(_QWORD *)(a2 + 984);
      v455 = sub_2368ACEB0((uint64_t)v550, v466, 5, a6);
      if ((_DWORD)v455)
        return v455;
      sub_2367F1484((uint64_t)v541, v466, 10 * (*(_QWORD *)(a2 + 1864) - *(_QWORD *)(a2 + 1856))+ 34* (((uint64_t)(*(_QWORD *)(a2 + 1792) - *(_QWORD *)(a2 + 1784)) >> 2)+ ((uint64_t)(*(_QWORD *)(a2 + 1768) - *(_QWORD *)(a2 + 1760)) >> 2)+ ((uint64_t)(*(_QWORD *)(a2 + 1816) - *(_QWORD *)(a2 + 1808)) >> 2)+ ((uint64_t)(*(_QWORD *)(a2 + 1840) - *(_QWORD *)(a2 + 1832)) >> 2))+ 1033);
      if (*(_QWORD *)(a2 + 1760) == *(_QWORD *)(a2 + 1768)
        && *(_QWORD *)(a2 + 1784) == *(_QWORD *)(a2 + 1792)
        && *(_QWORD *)(a2 + 1808) == *(_QWORD *)(a2 + 1816)
        && *(_QWORD *)(a2 + 1832) == *(_QWORD *)(a2 + 1840)
        && (v467 = *(uint64_t **)(a2 + 1856), *(_QWORD *)(a2 + 1864) - (_QWORD)v467 == 21)
        && ((v468 = *v467, v469 = v467[1], v470 = *(uint64_t *)((char *)v467 + 13), v468 == 0x504030302020100)
          ? (v471 = v469 == 0x908070606060606)
          : (v471 = 0),
            v471 ? (v472 = v470 == 0xD0C0B0A09090807) : (v472 = 0),
            v472))
      {
        *(_QWORD *)(v466[3] + ((unint64_t)*v466 >> 3)) = (1 << (*v466 & 7)) | *(unsigned __int8 *)(v466[3] + ((unint64_t)*v466 >> 3));
        ++*v466;
        v509 = a6;
      }
      else
      {
        v473 = 0;
        *(_QWORD *)(v466[3] + ((unint64_t)*v466 >> 3)) = *(unsigned __int8 *)(v466[3]
                                                                                   + ((unint64_t)*v466 >> 3));
        ++*v466;
        v557 = 0x100000000;
        LODWORD(v558) = 2;
        do
        {
          v474 = (int **)(a2 + 1760 + 24 * *((int *)&v557 + v473));
          *(_QWORD *)(v466[3] + ((unint64_t)*v466 >> 3)) = ((v474[1] - *v474) << (*v466 & 7)) | *(unsigned __int8 *)(v466[3] + ((unint64_t)*v466 >> 3));
          *v466 += 4;
          v475 = *v474;
          v476 = v474[1];
          while (v475 != v476)
          {
            v477 = *v475++;
            sub_2368AD3C4(0x20700000003, 0x20221F0000220FLL, (2 * v477) ^ (v477 >> 31), v466);
          }
          ++v473;
        }
        while (v473 != 3);
        *(_QWORD *)(v466[3] + ((unint64_t)*v466 >> 3)) = ((uint64_t)(*(_QWORD *)(a2 + 1840)
                                                                         - *(_QWORD *)(a2 + 1832)) >> 2 << (*v466 & 7)) | *(unsigned __int8 *)(v466[3] + ((unint64_t)*v466 >> 3));
        *v466 += 4;
        v478 = *(int **)(a2 + 1832);
        v479 = *(int **)(a2 + 1840);
        while (v478 != v479)
        {
          v480 = *v478++;
          sub_2368AD3C4(0x8200000001, 0x58700000184, v480 - 1, v466);
        }
        v509 = a6;
        sub_2368285B0((unsigned __int8 **)(a2 + 1856), *(_QWORD *)(a2 + 1880), (unint64_t *)v466, 12, a6);
      }
      sub_2367F14F8((uint64_t)v541, v466, 12, v509);
      v510 = *(_DWORD *)(a2 + 1200);
      v511 = *(float *)(a2 + 1208);
      v512 = *(float *)(a2 + 1212);
      v513 = *(_DWORD *)(a2 + 1216);
      v514 = *(_DWORD *)(a2 + 1220);
      sub_2367F1484((uint64_t)v541, v466, 61);
      v515 = *v466;
      if (!v513 && !v514 && v510 == 84 && v511 == 0.0 && v512 == 1.0)
      {
        v516 = 1;
        v517 = 1;
      }
      else
      {
        *(_QWORD *)(v466[3] + (v515 >> 3)) = *(unsigned __int8 *)(v466[3] + (v515 >> 3));
        ++*v466;
        sub_2368AD3C4(0x8000010080000054, 0x204F00000047, (float)v510, v466);
        sub_2368AD334(v466, v511);
        sub_2368AD334(v466, v512);
        *(_QWORD *)(v466[3] + ((unint64_t)*v466 >> 3)) = ((v513 + 128) << (*v466 & 7)) | *(unsigned __int8 *)(v466[3] + ((unint64_t)*v466 >> 3));
        v515 = *v466 + 8;
        *v466 = v515;
        v517 = v514 + 128;
        v516 = 8;
      }
      *(_QWORD *)(v466[3] + (v515 >> 3)) = (v517 << (v515 & 7)) | *(unsigned __int8 *)(v466[3] + (v515 >> 3));
      *v466 += v516;
      sub_2367F14F8((uint64_t)v541, v466, 8, a6);
    }
    v456 = v539;
    v457 = *(unsigned __int8 *)(v540 + 4208);
    v458 = **v534;
    v459 = sub_2367F1484((uint64_t)&v557, v458, 1);
    v460 = (_QWORD *)v456[18];
    if (v460 == (_QWORD *)v456[19] || *v460 == v460[1])
    {
      *(_QWORD *)(v458[3] + (*v458 >> 3)) = *(unsigned __int8 *)(v458[3] + (*v458 >> 3));
      ++*v458;
      v461 = a6;
      sub_2367F14F8(v459, v458, 6, a6);
    }
    else
    {
      *(_QWORD *)(v458[3] + (*v458 >> 3)) = (1 << (*v458 & 7)) | *(unsigned __int8 *)(v458[3] + (*v458 >> 3));
      ++*v458;
      sub_2367F14F8(v459, v458, 6, a6);
      sub_23681FB3C((uint64_t)v550, (uint64_t)(v456 + 64), (_BYTE *)v456[3], (_BYTE *)v456[4], v457 != 0);
      memset(v541, 0, 24);
      __p = 0;
      v543 = 0;
      v544 = 0;
      v545[0] = &off_2507FF438;
      v546 = xmmword_2368AF590;
      v554 = &off_2507FF550;
      v555 = xmmword_2368AF3F0;
      v556 = 0;
      sub_2367CB9F8((uint64_t)v545, (uint64_t)&v554);
      v548 = 0;
      v549 = 0;
      v547 = 0;
      v554 = 0;
      v555 = 0uLL;
      sub_236819104((uint64_t)v550, 6uLL, (uint64_t)(v456 + 18), (uint64_t *)v541, (unint64_t *)&v554, v458, 6, a6);
      sub_23681FA78(v456[18], (uint64_t)v541, &v554, 0, v458, 6, a6);
      if (v554)
        operator delete(v554);
      v554 = (uint64_t (**)())&v547;
      sub_2367D077C((void ***)&v554);
      if (__p)
      {
        v543 = (uint64_t)__p;
        operator delete(__p);
      }
      v554 = (uint64_t (**)())v541;
      sub_236817010((void ***)&v554);
      BYTE10(v553) = v457;
      BYTE11(v553) = v457;
      sub_23683D1CC(&v550[16], (char *)v456[150], v456[151], (uint64_t)(v456[151] - v456[150]) >> 3);
      sub_236819104((uint64_t)v550, (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v456[16] - v456[15]) >> 3) + 1) >> 1, (uint64_t)(v456 + 24), v456 + 27, v456 + 43, v458, 7, a6);
      if (*(_QWORD *)&v550[16])
        operator delete(*(void **)&v550[16]);
      v461 = a6;
    }
    v462 = **v534;
    memset(v541, 0, sizeof(v541));
    v455 = sub_236850F84(v539, v462, v461, 7, (uint64_t)v541);
    if (!(_DWORD)v455)
      goto LABEL_432;
  }
  return v455;
}

void sub_23683AB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v35 + 128) = v36 - 192;
  sub_23683B100((void ***)(v36 - 256));
  _Unwind_Resume(a1);
}

BOOL sub_23683AD50(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v4;
  unsigned int i;
  _QWORD v7[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v7, sub_23683B774, sub_23683B4EC, 0, a2) != 0;
  sub_23683AE88(a3, 1uLL);
  for (i = 0; i != v4; ++i)
    sub_23683B4EC((uint64_t)v7, i, 0);
  return 0;
}

BOOL sub_23683ADEC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v4;
  unsigned int i;
  _QWORD v7[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v7, sub_23683B4D0, sub_23683B264, 0, a2) != 0;
  sub_23683AE88(a3, 1uLL);
  for (i = 0; i != v4; ++i)
    sub_23683B264((uint64_t)v7, i, 0);
  return 0;
}

void sub_23683AE88(uint64_t *a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (a1[1])
  {
    for (; v6 > a2; v6 = (v5 - *(_QWORD *)*a1) >> 3)
    {
      sub_2368ABFFC(a1[1], *(_QWORD *)(v5 - 8));
      sub_23683B140(*a1, (_QWORD *)(*(_QWORD *)(*a1 + 8) - 8));
      v3 = (_QWORD *)*a1;
      v5 = *(_QWORD *)(*a1 + 8);
    }
    if (v6 < a2)
    {
      v8 = v3 + 1;
      do
      {
        v9 = (void *)operator new();
        bzero(v9, 0x2C0uLL);
        v10 = v3[2];
        v11 = (_QWORD *)v3[1];
        if ((unint64_t)v11 >= v10)
        {
          v13 = ((uint64_t)v11 - *v3) >> 3;
          if ((unint64_t)(v13 + 1) >> 61)
            sub_2367C3440();
          v14 = v10 - *v3;
          v15 = v14 >> 2;
          if (v14 >> 2 <= (unint64_t)(v13 + 1))
            v15 = v13 + 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          v31 = v3 + 2;
          if (v16)
            v16 = (unint64_t)sub_2367CA1FC(v16);
          else
            v17 = 0;
          v18 = (char *)(v16 + 8 * v13);
          v27 = (char *)v16;
          v28 = v18;
          v30 = (char *)(v16 + 8 * v17);
          *(_QWORD *)v18 = v9;
          v29 = v18 + 8;
          sub_23683B1A0(v3, &v27);
          v12 = (_QWORD *)*v8;
          sub_23683B1FC((uint64_t)&v27);
        }
        else
        {
          *v11 = v9;
          v12 = v11 + 1;
          *v8 = v12;
        }
        v3[1] = v12;
        v3 = (_QWORD *)*a1;
        v8 = (_QWORD *)(*a1 + 8);
      }
      while (a2 > (uint64_t)(*v8 - *(_QWORD *)*a1) >> 3);
    }
  }
  else
  {
    v19 = a2 - v6;
    if (a2 <= v6)
    {
      if (a2 < v6)
        sub_23683B140(*a1, (_QWORD *)(v4 + 8 * a2));
    }
    else
    {
      v20 = v3[2];
      if (v19 <= (v20 - v5) >> 3)
      {
        bzero(*(void **)(*a1 + 8), 8 * v19);
        v3[1] = v5 + 8 * v19;
      }
      else
      {
        if (a2 >> 61)
          sub_2367C3440();
        v31 = v3 + 2;
        v21 = v20 - v4;
        v22 = v21 >> 2;
        if (v21 >> 2 <= a2)
          v22 = a2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        v24 = (char *)sub_2367CA1FC(v23);
        v25 = &v24[8 * v6];
        v27 = v24;
        v28 = v25;
        v30 = &v24[8 * v26];
        bzero(v25, 8 * v19);
        v29 = &v25[8 * v19];
        sub_23683B1A0(v3, &v27);
        sub_23683B1FC((uint64_t)&v27);
      }
    }
  }
}

void sub_23683B0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7F8F48](v1, 0x1000C40BB8981BBLL);
  _Unwind_Resume(a1);
}

void sub_23683B100(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_23683B140((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t sub_23683B140(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x23B7F8F48](result, 0x1000C40BB8981BBLL);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *sub_23683B1A0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *--v2;
    *v2 = 0;
    *(_QWORD *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23683B1FC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x23B7F8F48](v4, 0x1000C40BB8981BBLL);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23683B264(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = *(_QWORD *)(result + 8);
  v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) == 0)
  {
    v5 = **(_QWORD **)(v3 + 16);
    v6 = *(_BYTE *)(v5 + 4208)
       ? (unint64_t)a2 % *(_QWORD *)(*(_QWORD *)(v3 + 32) + 88)
       + 8 * (*(_QWORD *)(v5 + 4216) % *(_QWORD *)(**(_QWORD **)(v3 + 24) + 464))
       + ((unint64_t)a2 / *(_QWORD *)(*(_QWORD *)(v3 + 32) + 88)
        + 8 * (*(_QWORD *)(v5 + 4216) / *(_QWORD *)(**(_QWORD **)(v3 + 24) + 464)))
       * *(_QWORD *)(**(_QWORD **)(v3 + 24) + 448)
       : a2;
    if (**(_QWORD **)(v3 + 40))
    {
      v7 = 0;
      v8 = 0;
      v9 = *(_QWORD *)(**(_QWORD **)(v3 + 8) + 8 * a3);
      v10 = a2;
      v11 = a2 + 2;
      v30 = a2;
      v31 = v6;
      v29 = v11;
      while (1)
      {
        if (!*(_DWORD *)(*(_QWORD *)(v3 + 48) + 12))
        {
          v12 = **(_QWORD **)(v3 + 16);
          v13 = *(_QWORD *)(*(_QWORD *)(v12 + 5208) + 8 * v10);
          v14 = *(uint64_t **)(v3 + 56);
          v15 = *v14;
          v16 = *(_QWORD *)(v14[1] + 120) + v11 + *(_QWORD *)(v14[1] + 112) * v8;
          v17 = **(uint64_t ***)v15;
          if (**(_BYTE **)(v15 + 8))
            v18 = 0;
          else
            v18 = v16;
          v19 = *v17;
          v20 = (unint64_t *)(*v17 + 40 * v18);
          v21 = *(_QWORD *)(v12 + 4200);
          v22 = __clz(v21) ^ 0x3F;
          if ((v21 & (v21 - 1)) != 0)
            v23 = v22 + 1;
          else
            v23 = v22;
          if (v23)
          {
            sub_2367F1484((uint64_t)&v32, v20, v23);
            *(_QWORD *)(*(_QWORD *)(v19 + 40 * v18 + 24) + (*v20 >> 3)) = (v13 << (*v20 & 7)) | *(unsigned __int8 *)(*(_QWORD *)(v19 + 40 * v18 + 24) + (*v20 >> 3));
            *v20 += v23;
            sub_2367F14F8((uint64_t)&v32, v20, 12, v9);
          }
          v10 = v30;
          sub_23681FA78(*(_QWORD *)(*(_QWORD *)(v12 + 5184) + v7) + 24 * v30, *(_QWORD *)(v12 + 5184) + v7 + 48, (_QWORD *)(*(_QWORD *)(v12 + 5184) + v7 + 24), (495 * *(_DWORD *)(v12 + 1880)) * v13, v20, 13, v9);
          v6 = v31;
          v11 = v29;
        }
        v24 = **(_QWORD ***)(v3 + 24);
        v25 = *(uint64_t **)(v3 + 56);
        v26 = *v25;
        v27 = *(_QWORD *)(v25[1] + 120) + v11 + *(_QWORD *)(v25[1] + 112) * v8;
        if (**(_BYTE **)(v26 + 8))
          v27 = 0;
        v28 = (unint64_t *)(***(_QWORD ***)v26 + 40 * v27);
        v32 = 5;
        v33 = 0;
        v34 = v6;
        v35 = v8;
        result = sub_236850F84(v24, v28, v9, 14, (uint64_t)&v32);
        if ((_DWORD)result)
          break;
        ++v8;
        v7 += 176;
        if (v8 >= **(_QWORD **)(v3 + 40))
          return result;
      }
      atomic_store(1u, *(unsigned __int8 **)v3);
    }
  }
  return result;
}

uint64_t sub_23683B4D0(uint64_t **a1, unint64_t a2)
{
  sub_23683AE88(*a1, a2);
  return 0;
}

uint64_t sub_23683B4EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(**(_QWORD **)v4 + 8 * a3);
  v7 = **(uint64_t ***)v5;
  if (**(_BYTE **)(v5 + 8))
    v8 = 0;
  else
    v8 = a2 + 1;
  v9 = *v7;
  v10 = (unint64_t *)(*v7 + 40 * v8);
  v11 = **(_QWORD **)(v4 + 16);
  v12 = a2;
  if (*(_BYTE *)(v11 + 4208))
    v12 = *(_DWORD *)(v11 + 4216);
  v13 = *(_QWORD *)(v4 + 24);
  if (!*(_DWORD *)(v13 + 12) && (*(_BYTE *)(v13 + 24) & 0x20) == 0)
  {
    sub_2367F1484((uint64_t)&v42, (_QWORD *)(*v7 + 40 * v8), 2);
    v14 = *(_QWORD *)(v9 + 40 * v8 + 24);
    *(_QWORD *)(v14 + (*v10 >> 3)) = ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(v4 + 32) + 24)
                                                                           + (int)v12) << (*v10 & 7)) | *(unsigned __int8 *)(v14 + (*v10 >> 3));
    *v10 += 2;
    sub_2367F14F8((uint64_t)&v42, v10, 8, v6);
    v15 = **(_QWORD ***)(v4 + 32);
    v38 = 1;
    v39 = 0;
    v40 = (int)v12;
    v41 = 0;
    sub_236850F84(v15, v10, v6, 8, (uint64_t)&v38);
  }
  v16 = **(_QWORD ***)(v4 + 32);
  v42 = 2;
  v43 = 0;
  v44 = (int)v12;
  v45 = 0;
  result = sub_236850F84(v16, v10, v6, 9, (uint64_t)&v42);
  if (!*(_DWORD *)(*(_QWORD *)(v4 + 24) + 12))
  {
    v18 = **(_QWORD ***)(v4 + 16);
    v19 = v18[13];
    v20 = a2 / v19;
    v21 = a2 % v19;
    v22 = v18[17];
    v23 = v22 * v21;
    v24 = v22 * v20;
    v26 = v18[9];
    v25 = v18[10];
    v27 = v23 + v22;
    v28 = v26 >= v23;
    v29 = v26 - v23;
    if (!v28)
      v29 = 0;
    if (v27 <= v26)
      v29 = v22;
    v30 = v24 + v22;
    v28 = v25 >= v24;
    v31 = v25 - v24;
    if (!v28)
      v31 = 0;
    if (v30 <= v25)
      v32 = v22;
    else
      v32 = v31;
    v33 = v29 * v32;
    v34 = __clz(v33) ^ 0x3F;
    if ((v33 & (v33 - 1)) != 0)
      v35 = v34 + 1;
    else
      v35 = v34;
    if (v35)
    {
      sub_2367F1484((uint64_t)&v42, v10, v35);
      v36 = *(_QWORD *)(v9 + 40 * v8 + 24);
      *(_QWORD *)(v36 + (*v10 >> 3)) = ((*(_QWORD *)(***(_QWORD ***)(v4 + 32) + 8 * (int)v12) - 1) << (*v10 & 7)) | *(unsigned __int8 *)(v36 + (*v10 >> 3));
      *v10 += v35;
      sub_2367F14F8((uint64_t)&v42, v10, 10, v6);
    }
    v37 = **(_QWORD ***)(v4 + 32);
    v42 = 3;
    v43 = 0;
    v44 = (int)v12;
    v45 = 0;
    return sub_236850F84(v37, v10, v6, 10, (uint64_t)&v42);
  }
  return result;
}

uint64_t sub_23683B774(uint64_t **a1, unint64_t a2)
{
  sub_23683AE88(*a1, a2);
  return 0;
}

BOOL sub_23683B790(uint64_t a1, uint64_t a2, char ***a3, char ***a4)
{
  int v4;
  unsigned int i;
  char ***v7[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, char ****, uint64_t (*)(char ****, unint64_t), void (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v7, sub_23683B8A8, sub_23683BAA4, 0, a2) != 0;
  sub_23683B8A8(v7, 1uLL);
  for (i = 0; i != v4; ++i)
    sub_23683BAA4((uint64_t)v7, i, 0);
  return 0;
}

void **sub_23683B82C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t i;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3;
        v3 -= 120;
        for (i = -16; i != -136; i -= 40)
          sub_2367C2F38((uint64_t *)&v5[i]);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_23683B8A8(char ****a1, unint64_t a2)
{
  char **v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t j;
  char *v19;
  char *v20;
  uint64_t i;

  v2 = **a1;
  v4 = *v2;
  v3 = v2[1];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((v3 - *v2) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v19 = &v4[120 * a2];
      while (v3 != v19)
      {
        v20 = v3;
        v3 -= 120;
        for (i = -16; i != -136; i -= 40)
          sub_2367C2F38((uint64_t *)&v20[i]);
      }
      v2[1] = v19;
    }
  }
  else
  {
    v7 = v2[2];
    if (0xEEEEEEEEEEEEEEEFLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(v2[1], 120 * ((120 * v6 - 120) / 0x78) + 120);
      v2[1] = &v3[120 * ((120 * v6 - 120) / 0x78) + 120];
    }
    else
    {
      if (a2 > 0x222222222222222)
        sub_2367C3440();
      v8 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - v4) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x111111111111111)
        v10 = 0x222222222222222;
      else
        v10 = v9;
      if (v10 > 0x222222222222222)
        sub_2367C3488();
      v11 = 120 * v10;
      v12 = (char *)operator new(120 * v10);
      v13 = &v12[120 * v5];
      v14 = &v12[v11];
      bzero(v13, 120 * ((120 * v6 - 120) / 0x78) + 120);
      v15 = &v13[120 * ((120 * v6 - 120) / 0x78) + 120];
      if (v3 == v4)
      {
        *v2 = v13;
        v2[1] = v15;
        v2[2] = v14;
      }
      else
      {
        do
        {
          v13 -= 120;
          v3 -= 120;
          sub_2367CA9E4((uint64_t)v13, (uint64_t)v3);
        }
        while (v3 != v4);
        v3 = *v2;
        v16 = v2[1];
        *v2 = v13;
        v2[1] = v15;
        v2[2] = v14;
        while (v16 != v3)
        {
          v17 = v16;
          v16 -= 120;
          for (j = -16; j != -136; j -= 40)
            sub_2367C2F38((uint64_t *)&v17[j]);
        }
      }
      if (v3)
        operator delete(v3);
    }
  }
  return 0;
}

void sub_23683BAA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int8x16_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int32x4_t v73;
  char v74;
  uint64_t j;
  uint64_t v76;
  char v77;
  char v78;
  int v79;
  uint64_t v80;
  int32x4_t v81;
  int8x16_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int8x16_t *v88;
  int8x16_t *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int32x4_t *v96;
  int32x4_t v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  int v130;
  int v131;
  int v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  int8x16_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  char **v180;
  unint64_t v181;
  char **v182;
  int v183;
  int v184;
  unint64_t v185;
  char v186;
  char **v187;
  _QWORD v188[3];
  _QWORD v189[15];
  uint64_t v190;
  int v191;
  _QWORD v192[3];
  _QWORD v193[3];
  _QWORD v194[3];
  _QWORD v195[3];
  _QWORD v196[2];
  uint64_t v197;
  int v198;
  _QWORD v199[130];

  v199[128] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD **)(v3 + 8);
    v6 = *(_QWORD *)(v3 + 16);
    v7 = v5[11];
    v8 = a2 / v7;
    v147 = a2;
    v9 = v5[17];
    v10 = (v9 >> 3) * (a2 % v7);
    v12 = v5[9];
    v11 = v5[10];
    v13 = v10 + (v9 >> 3);
    v150 = v10;
    v14 = v12 >= v10;
    v15 = v12 - v10;
    if (!v14)
      v15 = 0;
    v16 = (v9 >> 3) * v8;
    if (v13 <= v12)
      v17 = v9 >> 3;
    else
      v17 = v15;
    v18 = v16 + (v9 >> 3);
    v149 = v16;
    v14 = v11 >= v16;
    v19 = v11 - v16;
    if (!v14)
      v19 = 0;
    v20 = v18 <= v11 ? v9 >> 3 : v19;
    v155 = v20;
    v21 = *(_QWORD **)v6;
    if (*(_QWORD *)(*(_QWORD *)v6 + 5192) != *(_QWORD *)(*(_QWORD *)v6 + 5184))
    {
      v22 = 0;
      v144 = 192 * v17 * v155;
      v146 = *(_QWORD *)(a1 + 8);
      v156 = v17;
      do
      {
        v148 = v22;
        v23 = *(_QWORD *)(v21[528] + 8 * v22);
        v188[0] = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v23 + 24))(v23, 0, v147, 0);
        v24 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v146 + 16) + 4224) + 8 * v148);
        v188[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 24))(v24, 1, v147, 0);
        v25 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v146 + 16) + 4224) + 8 * v148);
        v188[2] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 24))(v25, 2, v147, 0);
        v26 = v146;
        v27 = **(_QWORD **)(v146 + 24);
        v28 = (_DWORD *)(v27 + 120 * a3);
        if (!*v28)
        {
          sub_2367DA15C((uint64_t)v196, 0x20u, 0x20u);
          if (v198)
          {
            atomic_store(1u, *(unsigned __int8 **)v146);
            return;
          }
          sub_2367CA9E4((uint64_t)v189, (uint64_t)v196);
          sub_2367D086C((uint64_t)v28, (uint64_t)v189);
          v29 = 13;
          v26 = v146;
          do
          {
            sub_2367C2F38(&v189[v29]);
            v29 -= 5;
          }
          while (v29 != -2);
          if (!v198)
          {
            for (i = 13; i != -2; i -= 5)
              sub_2367C2F38(&v196[i]);
          }
          v27 = **(_QWORD **)(v146 + 24);
        }
        v31 = *(_QWORD *)(v26 + 8);
        v32 = *(_QWORD *)(v31 + 1560);
        v174 = v31;
        v33 = *(_QWORD *)(v31 + 1568);
        v34 = v26;
        v35 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v26 + 16) + 5184) + 176 * v148);
        v166 = *(_QWORD *)(v34 + 32);
        v36 = (char **)(v35 + 24 * v147);
        v36[1] = *v36;
        v187 = v36 + 1;
        v180 = v36;
        sub_2368069B0((void **)v36, v144);
        memset(v189, 0, 24);
        v37 = v156;
        v38 = v166;
        if (v155)
        {
          v39 = 0;
          v159 = v33 + 4 * v32 * v148;
          v40 = (_QWORD *)(v27 + 120 * a3);
          v153 = v40[3];
          v154 = v40[2];
          v151 = v40[13];
          v152 = v40[8];
          v182 = (char **)(v35 + 24 * v147 + 16);
          while (1)
          {
            v41 = *(_BYTE *)(v38 + 61);
            v42 = v39 >> (v41 - byte_236923AD8[*(unsigned int *)(v38 + 48)]);
            v43 = v39 >> (v41 - byte_236923AD8[*(unsigned int *)(v38 + 52)]);
            v195[0] = v42;
            v195[1] = v43;
            v44 = v39 >> (v41 - byte_236923AD8[*(unsigned int *)(v38 + 56)]);
            v195[2] = v44;
            v194[0] = v153 + v42 * v154;
            v194[1] = v152 + v43 * v154;
            v194[2] = v151 + v44 * v154;
            if (v42)
              v45 = v153 + (v42 - 1) * v154;
            else
              v45 = 0;
            if (v43)
              v46 = v152 + (v43 - 1) * v154;
            else
              v46 = 0;
            v193[0] = v45;
            v193[1] = v46;
            v47 = v151 + (v44 - 1) * v154;
            if (!v44)
              v47 = 0;
            v193[2] = v47;
            v48 = v180;
            if (v37)
              break;
LABEL_130:
            if (++v39 == v155)
              goto LABEL_131;
          }
          v49 = 0;
          v169 = *(_QWORD *)(v174 + 1616) + *(_QWORD *)(v174 + 1608) * (v149 + v39) + v150;
          v167 = v39;
          v168 = *(_QWORD *)(v174 + 1048) + *(_QWORD *)(v174 + 1040) * (v149 + v39) + 4 * v150;
          v50 = *(_QWORD *)(v174 + 176) + *(_QWORD *)(v174 + 168) * (v149 + v39) + v150;
          v157 = v50;
          while (2)
          {
            v51 = *(unsigned __int8 *)(v50 + v49);
            if ((v51 & 1) != 0)
            {
              v52 = 0;
              v53 = v51 >> 1;
              v54 = *(_BYTE *)(v38 + 60);
              v55 = v49 >> (v54 - byte_236923AD4[*(unsigned int *)(v38 + 52)]);
              v56 = byte_236923AD4[*(unsigned int *)(v38 + 56)];
              v192[0] = v49 >> (v54 - byte_236923AD4[*(unsigned int *)(v38 + 48)]);
              v192[1] = v55;
              v192[2] = v49 >> (v54 - v56);
              v57 = byte_23692665C[v53];
              v173 = v53;
              v58 = byte_236926677[v53];
              v59 = v58 * v57;
              v186 = __clz(__rbit64(v58 * v57));
              v181 = (v58 * v57) << 6;
              if (v58 >= v57)
                v60 = v57;
              else
                v60 = v58;
              if (v58 <= v57)
                v61 = v57;
              else
                v61 = v58;
              v190 = 1;
              v191 = 2;
              v160 = 4 * v59;
              v185 = v59 - 1;
              v62 = (int8x16_t *)((char *)v199 - 4 * v61);
              v63 = 8 * v61;
              v165 = 8 * v60;
              v177 = v58 * v57;
              v164 = (_DWORD)v59 << 6;
              if (v57 <= 1)
                v57 = 1;
              else
                v57 = v57;
              v163 = v57;
              if (v58 <= 1)
                v64 = 1;
              else
                v64 = v58;
              v162 = v64;
              v161 = 32 * v61;
              v158 = 32 * v60 * (unint64_t)v61;
              v171 = v60;
              v172 = v49;
              v170 = (int8x16_t *)((char *)v199 - 4 * v61);
              while (2)
              {
                v65 = *((int *)&v190 + v52);
                v66 = v192[v65];
                v67 = *(unsigned int *)(v38 + 4 * v65 + 48);
                if (v66 << (*(_BYTE *)(v38 + 60) - byte_236923AD4[v67]) == v49
                  && v195[v65] << (*(_BYTE *)(v38 + 61) - byte_236923AD8[v67]) == v39)
                {
                  v68 = v188[v65];
                  v176 = v189[v65];
                  v69 = v68 + 4 * v176;
                  v70 = v194[v65];
                  v178 = *((int *)&v190 + v52);
                  if (v177 == 1)
                  {
                    v71 = 0;
                    v72 = 1;
                    v73 = 0uLL;
                    do
                    {
                      v74 = v72;
                      v73 = vaddq_s32(v73, vceqzq_s32((int32x4_t)vbicq_s8(*(int8x16_t *)(v69 + 1 * v71), (int8x16_t)xmmword_2369220F0[v71])));
                      v71 = 1;
                      v72 = 0;
                    }
                    while ((v74 & 1) != 0);
                    for (j = 1; j != 8; ++j)
                    {
                      v76 = 0;
                      v77 = 1;
                      do
                      {
                        v78 = v77;
                        v73 = vaddq_s32(v73, vceqzq_s32(*(int32x4_t *)(v69 + 4 * (v76 | (8 * j)))));
                        v76 = 4;
                        v77 = 0;
                      }
                      while ((v78 & 1) != 0);
                    }
                    v79 = vaddvq_s32(v73) + 64;
                    *(_DWORD *)(v70 + 4 * v66) = v79;
                  }
                  else
                  {
                    bzero(&v197, 0x470uLL);
                    v196[1] = -1;
                    v196[0] = -1;
                    if (v60)
                    {
                      v80 = 0;
                      v81 = 0uLL;
                      v82 = (int8x16_t *)(v68 + 4 * v176);
                      v83 = 4 * (v154 >> 2);
                      v85 = v162;
                      v84 = v163;
                      v86 = v161;
                      do
                      {
                        v87 = 0;
                        v88 = v62;
                        v89 = v82;
                        do
                        {
                          v90 = *v88++;
                          v91 = v90;
                          v92 = *v89++;
                          v81 = vaddq_s32(v81, vceqzq_s32((int32x4_t)vbicq_s8(v92, v91)));
                          v87 += 4;
                        }
                        while (v87 < v63);
                        ++v80;
                        v82 = (int8x16_t *)((char *)v82 + v161);
                      }
                      while (v80 != v60);
                    }
                    else
                    {
                      v81 = 0uLL;
                      v83 = 4 * (v154 >> 2);
                      v85 = v162;
                      v84 = v163;
                      v86 = v161;
                    }
                    if (v165 > v60)
                    {
                      v93 = v68 + v158 + 4 * v176;
                      v94 = v60;
                      do
                      {
                        v95 = 0;
                        v96 = (int32x4_t *)v93;
                        do
                        {
                          v97 = *v96++;
                          v81 = vaddq_s32(v81, vceqzq_s32(v97));
                          v95 += 4;
                        }
                        while (v95 < v63);
                        ++v94;
                        v93 += v86;
                      }
                      while (v94 != v165);
                    }
                    v98 = 0;
                    v99 = (_DWORD *)(v70 + 4 * v66);
                    v79 = vaddvq_s32(v81) + v164;
                    do
                    {
                      v100 = v99;
                      v101 = v84;
                      do
                      {
                        *v100++ = (v185 + v79) >> v186;
                        --v101;
                      }
                      while (v101);
                      ++v98;
                      v99 = (_DWORD *)((char *)v99 + v83);
                    }
                    while (v98 != v85);
                  }
                  v102 = byte_236923064[v173];
                  v103 = qword_236922110[3 * v102 + v178];
                  v104 = (unsigned int *)v193[v178];
                  if (v66)
                  {
                    if (v104)
                    {
                      v105 = v104[v66] + *(_DWORD *)(v70 + 4 * v66 - 4);
                      if (v105 + 1 >= 0)
                        v106 = v105 + 1;
                      else
                        v106 = v105 + 2;
                      v107 = v106 >> 1;
                    }
                    else
                    {
                      v107 = *(_DWORD *)(v70 + 4 * v66 - 4);
                    }
                  }
                  else if (v104)
                  {
                    v107 = *v104;
                  }
                  else
                  {
                    v107 = 32;
                  }
                  v108 = sub_2367E23B4((_QWORD *)(v174 + 1760), *(unsigned __int8 *)(v169 + v49), *(_DWORD *)(v168 + 4 * v66), v102, v178);
                  if (v107 >= 0x40)
                    v109 = 64;
                  else
                    v109 = v107;
                  if (v109 >= 8)
                    v109 = (v109 >> 1) + 4;
                  v110 = v108 + v109 * *(_DWORD *)(v174 + 1880);
                  v111 = *v187;
                  v112 = *v182;
                  v175 = v52;
                  if (*v187 >= *v182)
                  {
                    v115 = v103;
                    v116 = *v48;
                    v117 = (v111 - *v48) >> 3;
                    v118 = v117 + 1;
                    if ((unint64_t)(v117 + 1) >> 61)
                      sub_2367C3440();
                    v183 = v108;
                    if ((v112 - v116) >> 2 > v118)
                      v118 = (v112 - v116) >> 2;
                    if ((unint64_t)(v112 - v116) >= 0x7FFFFFFFFFFFFFF8)
                      v119 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v119 = v118;
                    v120 = (char *)sub_2367CA1FC(v119);
                    v122 = &v120[8 * v117];
                    *(_DWORD *)v122 = 2 * v110;
                    *((_DWORD *)v122 + 1) = v79;
                    v123 = v122;
                    if (v111 == v116)
                    {
                      v48 = v180;
                      v103 = v115;
                    }
                    else
                    {
                      v48 = v180;
                      v103 = v115;
                      do
                      {
                        v124 = *((_QWORD *)v111 - 1);
                        v111 -= 8;
                        *((_QWORD *)v123 - 1) = v124;
                        v123 -= 8;
                      }
                      while (v111 != v116);
                      v111 = *v180;
                    }
                    v112 = &v120[8 * v121];
                    v113 = v122 + 8;
                    *v48 = v123;
                    *v182 = v112;
                    if (v111)
                    {
                      v125 = &v120[8 * v121];
                      operator delete(v111);
                      v112 = v125;
                    }
                    v114 = v181;
                    v108 = v183;
                  }
                  else
                  {
                    *(_DWORD *)v111 = 2 * v110;
                    *((_DWORD *)v111 + 1) = v79;
                    v113 = v111 + 8;
                    v114 = v181;
                  }
                  *v187 = v113;
                  if (v177 < v114 && v79)
                  {
                    v126 = v159 + (v103 << 8);
                    v127 = 458 * v108 + 37 * *(_DWORD *)(v174 + 1880);
                    LOBYTE(v128) = v160 >= v79;
                    v129 = v177;
                    v179 = v127;
                    while (1)
                    {
                      v130 = *(_DWORD *)(v69 + 4 * *(unsigned int *)(v126 + 4 * v129));
                      v131 = v127
                           + (v128 & 1)
                           + 2 * (word_2369222D0[v129 >> v186] + word_236922250[(v185 + v79) >> v186]);
                      v132 = (2 * v130) ^ (v130 >> 31);
                      if (v113 < v112)
                      {
                        *(_DWORD *)v113 = 2 * v131;
                        *((_DWORD *)v113 + 1) = v132;
                        v133 = v113 + 8;
                        goto LABEL_124;
                      }
                      v134 = *v48;
                      v135 = (v113 - *v48) >> 3;
                      v136 = v135 + 1;
                      if ((unint64_t)(v135 + 1) >> 61)
                        sub_2367C3440();
                      v184 = v79;
                      v137 = v126;
                      if ((v112 - v134) >> 2 > v136)
                        v136 = (v112 - v134) >> 2;
                      if ((unint64_t)(v112 - v134) >= 0x7FFFFFFFFFFFFFF8)
                        v138 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v138 = v136;
                      v139 = (char *)sub_2367CA1FC(v138);
                      v141 = &v139[8 * v135];
                      v112 = &v139[8 * v140];
                      *(_DWORD *)v141 = 2 * v131;
                      *((_DWORD *)v141 + 1) = v132;
                      v133 = v141 + 8;
                      if (v113 == v134)
                      {
                        v48 = v180;
                        *v180 = v141;
                        *v182 = v112;
                      }
                      else
                      {
                        v48 = v180;
                        do
                        {
                          v142 = *((_QWORD *)v113 - 1);
                          v113 -= 8;
                          *((_QWORD *)v141 - 1) = v142;
                          v141 -= 8;
                        }
                        while (v113 != v134);
                        v113 = *v180;
                        *v180 = v141;
                        *v182 = v112;
                        if (!v113)
                          goto LABEL_123;
                      }
                      v143 = &v139[8 * v140];
                      operator delete(v113);
                      v112 = v143;
LABEL_123:
                      v114 = v181;
                      v126 = v137;
                      v79 = v184;
                      v127 = v179;
LABEL_124:
                      *v187 = v133;
                      v128 = v130 != 0;
                      if (++v129 < v114)
                      {
                        v113 = v133;
                        v79 -= v128;
                        if (v79)
                          continue;
                      }
                      break;
                    }
                  }
                  v52 = v175;
                  v189[v178] = v176 + v114;
                  v38 = v166;
                  v39 = v167;
                  v60 = v171;
                  v49 = v172;
                  v62 = v170;
                }
                if (++v52 != 3)
                  continue;
                break;
              }
              v37 = v156;
              v50 = v157;
            }
            if (++v49 == v37)
              goto LABEL_130;
            continue;
          }
        }
LABEL_131:
        v22 = v148 + 1;
        v21 = **(_QWORD ***)(v146 + 16);
      }
      while (v148 + 1 < (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21[649] - v21[648]) >> 4)));
    }
  }
}

_QWORD *sub_23683C5F8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = operator new(0x2530uLL);
  *a1 = v4;
  a1[1] = v4;
  v5 = v4 + 1190;
  a1[2] = v4 + 1190;
  v6 = 17;
  do
  {
    sub_236804D7C(v4, a2);
    v4 += 70;
    --v6;
  }
  while (v6);
  a1[1] = v5;
  return a1;
}

void sub_23683C680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367DC2DC(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23683C6A0(_QWORD *__dst, void *__src)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_DWORD *)__dst == 7)
  {
    v4 = __dst[28];
    if (v4)
    {
      v5 = *(void **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)(v4 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x23B7F8F48](v4, 0x10C402FEFCB83);
    }
  }
  memmove(__dst, __src, 0x229uLL);
  if (*(_DWORD *)__dst == 7 && __dst[28])
  {
    v6 = (_QWORD *)operator new();
    v7 = *((_QWORD *)__src + 28);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    sub_2367CBEFC(v6, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
    __dst[28] = v6;
  }
  return __dst;
}

void sub_23683C768(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7F8F48](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

BOOL sub_23683C78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23683CCC8, sub_23683C9A8, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23683C9A8((uint64_t)v6, i);
  return 0;
}

BOOL sub_23683C820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23683C984, sub_23683C8B4, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23683C8B4((uint64_t)v6, i);
  return 0;
}

uint64_t sub_23683C8B4(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  _QWORD v19[4];

  v2 = *(_QWORD *)(result + 8);
  v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD ***)(v2 + 16);
    v5 = **(_QWORD ***)(v2 + 8);
    v6 = a2;
    v7 = v5[13];
    v8 = a2 / v7;
    v9 = v5[17];
    v10 = v9 * (a2 % v7);
    v11 = v5[9];
    v12 = v5[10];
    v13 = v11 - v10;
    if (v11 < v10)
      v13 = 0;
    v14 = v9 * v8;
    v19[0] = v10;
    v19[1] = v14;
    if (v10 + v9 <= v11)
      v15 = v9;
    else
      v15 = v13;
    v16 = v14 + v9;
    v17 = v12 >= v14;
    v18 = v12 - v14;
    if (!v17)
      v18 = 0;
    if (v16 <= v12)
      v18 = v9;
    v19[2] = v15;
    v19[3] = v18;
    result = sub_23685174C(*v4, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v19, a2, 0, (uint64_t)v5);
    if ((_DWORD)result
      || (result = sub_23685227C(**(_QWORD **)(v2 + 16), (uint64_t)v19, v6, 1, **(_QWORD ***)(v2 + 8)), (_DWORD)result))
    {
      atomic_store(1u, *(unsigned __int8 **)v2);
    }
  }
  return result;
}

uint64_t sub_23683C984(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_23683C9A8(uint64_t a1, unsigned int a2)
{
  unsigned int ***v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  float v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD v58[257];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int ****)(a1 + 8);
  v3 = (uint64_t)**v2;
  if (*(_DWORD *)v3)
  {
    v4 = 0;
    v56 = *(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 16) * a2;
    v57 = 8 * a2;
    v55 = (unint64_t)a2 << 10;
    v5 = 8;
    v6 = 2;
    do
    {
      v7 = v2[1];
      v8 = (unint64_t)v7[8];
      if (v57 + 8 >= (unint64_t)v7[9])
        v9 = (unint64_t)v7[9];
      else
        v9 = v57 + 8;
      bzero(v58, 0x404uLL);
      v10 = v4 + 1;
      if (v57 < v9)
      {
        v11 = 8 * v10;
        if (8 * v10 >= v8)
          v11 = v8;
        v12 = v2[2];
        v14 = *v12;
        v13 = v12[1];
        v15 = *((_QWORD *)v14 + 18);
        v16 = v15 + 48 * (int)v13[1];
        v17 = *(_QWORD *)(v16 + 24);
        v18 = *(unsigned int *)(v16 + 16);
        v19 = (uint64_t)*v2[3];
        v20 = v15 + 48 * (int)v13[v19];
        v21 = *(_QWORD *)(v20 + 24);
        v22 = *(unsigned int *)(v20 + 16);
        if (v8 >= v5)
          v23 = v5;
        else
          v23 = v8;
        v24 = v19 << 8;
        v25 = v21 + v6 + v55 * v22;
        v26 = v22 << 7;
        v27 = v17 + v6 + v55 * v18;
        v28 = v18 << 7;
        v29 = v57;
        do
        {
          if (8 * v4 < v11)
          {
            v30 = (float)(*(float *)v2[6] * -84.0) + 127.0;
            v31 = (uint64_t)*v2[4] + v24 + 4;
            v32 = v27;
            v33 = v25;
            v34 = 8 * v4;
            do
            {
              for (i = 0; i != 63; ++i)
              {
                v36 = (float)(*(_DWORD *)(v31 + 4 * i) * *(__int16 *)(v32 + 2 * i)) * 0.00048828;
                if (fabsf(v36) > 0.00000001)
                {
                  v37 = (float)(v30 * v36) + (float)((float)*(__int16 *)(v33 + 2 * i) * 84.0);
                  v38 = (float *)v2[7];
                  v39 = *v38;
                  if (v36 <= 0.0)
                    v40 = *v38;
                  else
                    v40 = -*v38;
                  v41 = v37 + v40;
                  if (v36 <= 0.0)
                    v39 = -*v38;
                  v42 = (float)(v37 + v39) / v36;
                  v43 = v41 / v36;
                  if (v43 >= 0.0)
                    v44 = v43;
                  else
                    v44 = 0.0;
                  v45 = 255.0;
                  if (v42 <= 255.0)
                    v45 = v42;
                  if (v44 <= v45)
                  {
                    v46 = vcvtps_s32_f32(v44);
                    ++v58[v46];
                    v47 = vcvtms_s32_f32(v45 + 1.0);
                    --v58[v47];
                  }
                }
              }
              ++v34;
              v33 += 128;
              v32 += 128;
            }
            while (v34 != v23);
          }
          ++v29;
          v25 += v26;
          v27 += v28;
        }
        while (v29 != v9);
      }
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      do
      {
        v50 += v58[v48];
        if (v50 > v51)
        {
          v51 = v50;
          v49 = v48;
        }
        ++v48;
      }
      while (v48 != 256);
      v52 = 0;
      v53 = 0;
      do
      {
        if (v52 <= 0x7F)
          v53 += v58[v52];
        ++v52;
      }
      while (v52 != 256);
      v54 = v49 - 127;
      if (v51 <= v53 + 1)
        v54 = 0;
      *(_BYTE *)(v56 + v4) = v54;
      v5 += 8;
      v6 += 1024;
      ++v4;
    }
    while (v10 < ***v2);
  }
}

uint64_t sub_23683CCC8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_23683CCEC(uint64_t a1)
{
  uint64_t result;
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 104) = &off_2507FF438;
  *(_OWORD *)(a1 + 124) = xmmword_2368AF590;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  result = sub_2367CB9F8(a1 + 104, (uint64_t)&v3);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

void sub_23683CD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;
  void *v13;

  v12 = *(void **)(v10 + 80);
  if (v12)
  {
    *(_QWORD *)(v10 + 88) = v12;
    operator delete(v12);
  }
  sub_236817010(&a10);
  v13 = *(void **)(v10 + 24);
  if (v13)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  sub_2367D17E4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_23683CDC4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 176;
    sub_236831428(i - 176);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23683CE10(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *sub_23683CE74(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      sub_2367EF608();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_23683CF04()
{
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_23683CF18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2507FD778;
  result[1] = v3;
  return result;
}

uint64_t sub_23683CF4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2507FD778;
  a2[1] = v2;
  return result;
}

uint64_t sub_23683CF68(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t sub_23683CF7C(uint64_t a1, uint64_t a2)
{
  if (sub_2367EF74C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3jxlL21GetExtraChannelBufferER26JxlChunkedFrameInputSourcemmmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_23683CFB4()
{
  return &unk_2507FD610;
}

unsigned int *sub_23683CFC0(unsigned int *result, uint64_t a2)
{
  BOOL v2;
  unsigned int *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;

  if (result[1])
    v2 = *result == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = result;
    v4 = 0;
    v6 = *(_QWORD *)(a2 + 16);
    v5 = *(char **)(a2 + 24);
    do
    {
      result = (unsigned int *)memcpy(v5, (const void *)(*((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 2) * v4++), 4 * *v3);
      v5 += v6;
    }
    while (v4 < v3[1]);
  }
  return result;
}

void sub_23683D02C()
{
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_23683D040(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2507FD720;
  result[1] = v3;
  return result;
}

uint64_t sub_23683D074(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2507FD720;
  a2[1] = v2;
  return result;
}

uint64_t sub_23683D090(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t sub_23683D0A4(uint64_t a1, uint64_t a2)
{
  if (sub_2367EF74C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3jxlL14GetColorBufferER26JxlChunkedFrameInputSourcemmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_23683D0DC()
{
  return &unk_2507FD600;
}

uint64_t sub_23683D0E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  size_t v7;
  uint64_t result;
  void *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  void *__dst;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;

  v2 = a2[1];
  v3 = v2 - *a2;
  if (v2 == *a2)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = v3 - v6;
    sub_23685C8C8(&__dst, a1, 1uLL, v3 - v6);
    result = v16;
    if (v16)
      break;
    v9 = __dst;
    v10 = (char *)__dst;
    v11 = v14;
    v12 = v15;
    __dst = 0;
    *(_QWORD *)&v14 = 0;
    if ((unint64_t)v11 < v7)
      v7 = v11;
    memcpy(v9, (const void *)(*a2 + v6), v7);
    v10 += v7;
    *(_QWORD *)&v11 = v11 - v7;
    *((_QWORD *)&v11 + 1) += v7;
    sub_236831498(&v10);
    if (!v16)
      sub_236831498(&__dst);
    v6 += v7;
    if (v6 >= v3)
      return 0;
  }
  return result;
}

char *sub_23683D1CC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_2367C3440();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_2367DBF48(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_23683D2D0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      sub_2367C3440();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    result = sub_2367DC058(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t sub_23683D40C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
  {
    sub_23683D4BC(a1 + 8, *(__int128 ***)(a2 + 8), *(__int128 ***)(a2 + 16), 0xF0B7672A07A44C6BLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    sub_23683D1CC((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_23683D654((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5);
    sub_23683D1CC((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_23683D1CC((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  }
  return a1;
}

void sub_23683D4BC(uint64_t a1, __int128 **a2, __int128 **a3, unint64_t a4)
{
  uint64_t v8;
  __int128 **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 **v13;
  __int128 **v14;
  __int128 **v15;
  __int128 **v16;
  __int128 *v17;
  BOOL v18;

  v8 = a1 + 16;
  v9 = *(__int128 ***)a1;
  if (0xF0B7672A07A44C6BLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_23683D8E0((uint64_t *)a1);
    if (a4 > 0x7A44C6AFC2DD9CLL)
      sub_2367C3440();
    v10 = 0xE16ECE540F4898D6 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0B7672A07A44C6BLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x3D226357E16ECELL)
      v11 = 0x7A44C6AFC2DD9CLL;
    else
      v11 = v10;
    sub_236822178((_QWORD *)a1, v11);
    v12 = sub_2368221C8(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0B7672A07A44C6BLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_23683D758(a2, v13, v9);
    v12 = sub_2368221C8(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = sub_23683D758(a2, a3, v9);
  v15 = *(__int128 ***)(a1 + 8);
  if (v15 != v14)
  {
    v16 = v15 - 67;
    do
    {
      v17 = *v16;
      if (*v16)
      {
        v16[1] = v17;
        operator delete(v17);
      }
      v18 = v16 == v14;
      v16 -= 67;
    }
    while (!v18);
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_23683D644(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23683D64C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_23683D654(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_2367C3440();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_23682213C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

__int128 **sub_23683D758(__int128 **a1, __int128 **a2, __int128 **a3)
{
  __int128 **v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  char *v25;
  __int128 v26;

  if (a1 != a2)
  {
    v5 = a1;
    while (a3 == v5)
    {
LABEL_29:
      memcpy(a3 + 3, v5 + 3, 0x200uLL);
      v5 += 67;
      a3 += 67;
      if (v5 == a2)
        return a3;
    }
    v7 = *v5;
    v6 = v5[1];
    v8 = (char *)v6 - (char *)*v5;
    v9 = v8 >> 4;
    v10 = (uint64_t)a3[2];
    v11 = (char *)*a3;
    if (v8 >> 4 <= (unint64_t)((v10 - (uint64_t)*a3) >> 4))
    {
      v14 = a3 + 1;
      v15 = (char *)a3[1];
      v19 = (v15 - v11) >> 4;
      if (v19 >= v9)
      {
        v25 = (char *)*a3;
        while (v7 != v6)
        {
          v26 = *v7++;
          *(_OWORD *)v25 = v26;
          v25 += 16;
        }
        v18 = (char *)(v25 - v11);
        v15 = v11;
        goto LABEL_28;
      }
      if (v15 != v11)
      {
        v20 = 16 * v19;
        v21 = *v5;
        do
        {
          v22 = *v21++;
          *(_OWORD *)v11 = v22;
          v11 += 16;
          v20 -= 16;
        }
        while (v20);
      }
      v23 = &v7[v19];
      v16 = v15;
      while (v23 != v6)
      {
        v24 = *v23++;
        *(_OWORD *)v16 = v24;
        v16 += 16;
      }
    }
    else
    {
      if (v11)
      {
        a3[1] = (__int128 *)v11;
        operator delete(v11);
        v10 = 0;
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      if (v8 < 0)
        sub_2367C3440();
      v12 = v10 >> 3;
      if (v10 >> 3 <= v9)
        v12 = v8 >> 4;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      sub_236822328(a3, v13);
      v14 = a3 + 1;
      v15 = (char *)a3[1];
      v16 = v15;
      if (v7 != v6)
      {
        v16 = (char *)a3[1];
        do
        {
          v17 = *v7++;
          *(_OWORD *)v16 = v17;
          v16 += 16;
        }
        while (v7 != v6);
      }
    }
    v18 = (char *)(v16 - v15);
LABEL_28:
    *v14 = &v18[(_QWORD)v15];
    goto LABEL_29;
  }
  return a3;
}

void sub_23683D8E0(uint64_t *a1)
{
  if (*a1)
  {
    sub_2367E97D0(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL sub_23683D918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (!(_DWORD)a2)
    return 0;
  v7[0] = sub_2367CAAA0;
  v7[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v7, sub_23683DAE8, sub_23683DB0C, 0, a2) != 0;
  v5 = 0;
  v6 = a2;
  do
    sub_23683D9B8(a3, v5++);
  while (v6 != v5);
  return 0;
}

void sub_23683D9B8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7[4];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  int64_t v13;
  void *v14;
  void *v15;
  _BYTE *v16;

  v2 = atomic_load(*(unsigned __int8 **)a1);
  if ((v2 & 1) == 0)
  {
    sub_236818388(&v15, 0x40uLL);
    v14 = v15;
    v13 = v16 - (_BYTE *)v15;
    v6 = v7;
    v7[0] = 0;
    v12 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v7[3] = &v13;
    v8 = 0;
    v7[1] = 0;
    v7[2] = &v14;
    sub_23685CD34((uint64_t)&v6);
    if (sub_23682AE68(**(_QWORD **)(a1 + 8) + 640 * a2, *(_QWORD *)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, &v6, **(_QWORD **)(a1 + 48)))atomic_store(1u, *(unsigned __int8 **)a1);
    else
      *(_QWORD *)(**(_QWORD **)(a1 + 56) + 8 * a2) = v8;
    v5 = v12;
    v12 = 0;
    if (v5)
      MEMORY[0x23B7F8F48](v5, 0x80C402FCC0CB6);
    sub_23683DB18(v7[0]);
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
  }
}

void sub_23683DAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_23683DB58((uint64_t)va);
  v4 = *(void **)(v2 - 40);
  if (v4)
  {
    *(_QWORD *)(v2 - 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23683DAE8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_23683DB0C(uint64_t a1, unsigned int a2)
{
  sub_23683D9B8(*(_QWORD *)(a1 + 8), a2);
}

void sub_23683DB18(_QWORD *a1)
{
  if (a1)
  {
    sub_23683DB18(*a1);
    sub_23683DB18(a1[1]);
    sub_2367C2F38(a1 + 8);
    operator delete(a1);
  }
}

uint64_t sub_23683DB58(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    MEMORY[0x23B7F8F48](v2, 0x80C402FCC0CB6);
  sub_23683DB18(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_23683DBA0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 640;
    sub_236816F38(i - 640);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23683DBEC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, unint64_t *a7, uint64_t a8)
{
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  BOOL v42;
  char v43;
  int v44;
  uint64_t i;
  void *v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  size_t v67;
  _BYTE *v68;
  char *v69;
  _BYTE *v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  std::string v88[2];
  char *v89;
  char *v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *__p[2];
  __int128 v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[9];
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  int64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v16 = (unsigned int *)(a4 + 96);
  v15 = *(_DWORD *)(a4 + 96);
  if (!v15)
  {
    v17 = *(unsigned int **)(a4 + 416);
    if (v17 == *(unsigned int **)(a4 + 424))
      v15 = 0;
    else
      v15 = *v17;
  }
  v18 = v15;
  v19 = *(_DWORD *)(a4 + 100);
  if (v19)
  {
    v20 = *(_QWORD *)(a4 + 416);
    v21 = *(_QWORD *)(a4 + 424);
  }
  else
  {
    v20 = *(_QWORD *)(a4 + 416);
    v21 = *(_QWORD *)(a4 + 424);
    if (v20 == v21)
    {
      v19 = 0;
      v21 = *(_QWORD *)(a4 + 416);
    }
    else
    {
      v19 = *(_DWORD *)(v20 + 4);
    }
  }
  sub_23683E3AC((uint64_t)v101, v18, v19, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v22 = *(_DWORD *)(a4 + 272) != 1 || *((_BYTE *)a2 + 1) == 0;
  v23 = v22;
  if (v22)
    v24 = 3;
  else
    v24 = 1;
  v25 = *(_DWORD *)(a4 + 96);
  if (!v25)
  {
    v26 = *(unsigned int **)(a4 + 416);
    if (v26 == *(unsigned int **)(a4 + 424))
      v25 = 0;
    else
      v25 = *v26;
  }
  v80 = a3;
  v27 = 4 * v24 * (unint64_t)v25;
  v28 = *(_DWORD *)(a4 + 100);
  if (!v28)
  {
    v29 = *(_QWORD *)(a4 + 416);
    if (v29 == *(_QWORD *)(a4 + 424))
      v28 = 0;
    else
      v28 = *(_DWORD *)(v29 + 4);
  }
  v30 = v27 * v28;
  if (v30)
  {
    sub_2367C8698((unint64_t *)&v98, v30);
    v31 = v98;
    v32 = v99;
  }
  else
  {
    v32 = 0;
    v31 = 0;
  }
  *(_OWORD *)__p = 0u;
  v97 = 0u;
  v89 = 0;
  v87 = 0u;
  memset(v88, 0, sizeof(v88));
  v85 = 0u;
  v86 = 0u;
  v84 = 0u;
  v33 = *(_QWORD *)(a4 + 88);
  v35 = *(_QWORD *)(v33 + 328);
  v34 = *(_QWORD *)(v33 + 336);
  if (v35 != v34)
  {
    v36 = v35;
    while (*(_DWORD *)(v36 + 12))
    {
      v36 += 96;
      if (v36 == v34)
        goto LABEL_42;
    }
    if (*(_BYTE *)(v36 + 72))
    {
      v37 = v35 + 96;
      do
      {
        if (*(_DWORD *)(v37 - 84))
          v38 = v37 == v34;
        else
          v38 = 1;
        v37 += 96;
      }
      while (!v38);
    }
  }
LABEL_42:
  v78 = a7;
  v39 = 0;
  v40 = v32 - (_QWORD)v31;
  v105 = 0uLL;
  v106 = 0uLL;
  v41 = v16;
  do
  {
    *((_QWORD *)&v105 + v39) = v41;
    v42 = v39++ >= 2;
    if (v42)
      v43 = 0;
    else
      v43 = v23;
    v41 += 10;
  }
  while ((v43 & 1) != 0);
  v79 = a8;
  v44 = sub_2367D105C(&v105, v24, 32, 1, 0, v27, a6, (uint64_t)v31, v40, (uint64_t)__p);
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)((char *)&v84 + i));
  v46 = v98;
  if (!v44)
  {
    v94 = 0;
    v93 = 0;
    v92 = v24;
    v95 = 0;
    sub_23683E4B4(v101, 0, (uint64_t)v98, v99 - (_QWORD)v98, (__int128 *)&v92);
    v48 = *(unsigned int **)(a4 + 416);
    v47 = *(unsigned int **)(a4 + 424);
    if (v47 == v48)
    {
LABEL_67:
      v55 = a2[3];
      v86 = a2[2];
      v87 = v55;
      *(_OWORD *)&v88[0].__r_.__value_.__l.__data_ = a2[4];
      LODWORD(v88[0].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 20);
      v56 = a2[1];
      v84 = *a2;
      v85 = v56;
      if (*((char *)a2 + 111) < 0)
        sub_2367E9280(&v88[1], *((void **)a2 + 11), *((_QWORD *)a2 + 12));
      else
        v88[1] = *(std::string *)((char *)a2 + 88);
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v57 = *((_QWORD *)a2 + 14);
      v58 = *((_QWORD *)a2 + 15);
      *(_QWORD *)&v105 = &v89;
      BYTE8(v105) = 0;
      if (v58 != v57)
      {
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((v58 - v57) >> 3);
        if (v59 >= 0x666666666666667)
          sub_2367C3440();
        v60 = (char *)sub_2367DC0A4(v59);
        v89 = v60;
        v90 = v60;
        v91 = &v60[40 * v61];
        do
        {
          *(_QWORD *)v60 = &off_2507FF528;
          v62 = *(_OWORD *)(v57 + 8);
          *(_OWORD *)(v60 + 17) = *(_OWORD *)(v57 + 17);
          *(_OWORD *)(v60 + 8) = v62;
          v57 += 40;
          v60 += 40;
        }
        while (v57 != v58);
        v90 = v60;
      }
      *(_QWORD *)&v87 = *(_QWORD *)(a4 + 40);
      BYTE8(v87) = *(_BYTE *)(a4 + 57);
      HIDWORD(v87) = *(_DWORD *)(a4 + 60);
      *(std::string::size_type *)((char *)&v88[0].__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)(a4 + 48);
      std::string::operator=(&v88[1], (const std::string *)(a4 + 64));
      sub_236818388(__p, 0x40uLL);
      v83 = (char *)__p[0];
      v82 = (char *)__p[1] - (char *)__p[0];
      *(_QWORD *)&v105 = (char *)&v105 + 8;
      *((_QWORD *)&v105 + 1) = 0;
      v112 = 0;
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v107 = &v82;
      v108 = 0;
      *(_QWORD *)&v106 = 0;
      *((_QWORD *)&v106 + 1) = &v83;
      sub_23685CD34((uint64_t)&v105);
      if (!sub_23682AE68(a1, &v84, v80, v101, a5, a6, &v105, v79))
      {
        sub_23685CCEC(&v105);
        v104 = v83;
        if (v110 >= v109)
        {
          v63 = v82;
        }
        else
        {
          do
          {
            if (!v112)
            {
              *((_QWORD *)&v106 + 1) = &v104;
              v107 = &v82;
              sub_23685CD34((uint64_t)&v105);
            }
            v63 = v82;
            if (!v82)
            {
              v64 = v104;
              v66 = __p[0];
              v65 = (char *)__p[1];
              v67 = (char *)__p[1] - (char *)__p[0];
              if ((char *)__p[1] - (char *)__p[0] < 1)
              {
                if ((v67 & 0x8000000000000000) != 0)
                {
                  v65 = (char *)__p[0] + 2 * v67;
                  __p[1] = v65;
                }
                v68 = __p[0];
              }
              else
              {
                sub_2367C8698((unint64_t *)__p, v67);
                v68 = __p[0];
                v65 = (char *)__p[1];
              }
              v104 = &v68[v64 - v66];
              v63 = v65 - v68 - (v64 - v66);
              v82 = v63;
            }
          }
          while (v110 < v109);
        }
        v70 = __p[0];
        v69 = (char *)__p[1];
        if ((char *)__p[1] - (char *)__p[0] >= v63)
        {
          if ((char *)__p[1] - (char *)__p[0] > (char *)__p[1] - (char *)__p[0] - v63)
          {
            v69 = (char *)__p[1] - v63;
            __p[1] = (char *)__p[1] - v63;
          }
        }
        else
        {
          sub_2367C8698((unint64_t *)__p, -(uint64_t)v63);
          v70 = __p[0];
          v69 = (char *)__p[1];
        }
        if (v69 != v70)
        {
          v71 = v69 - v70;
          v72 = v69 - v70 + v78[1] + 1;
          sub_2367E8BBC(v78 + 1, v72);
          v73 = v78[3];
          if (v73)
            v74 = v72;
          else
            v74 = 0;
          v78[1] = v74;
          v75 = *v78;
          memcpy((void *)(v73 + (*v78 >> 3)), v70, v71);
          *(_BYTE *)(v78[3] + v71 + (v75 >> 3)) = 0;
          *v78 += 8 * v71;
        }
      }
      v76 = v112;
      v112 = 0;
      if (v76)
        MEMORY[0x23B7F8F48](v76, 0x80C402FCC0CB6);
      sub_23683DB18(*((_QWORD **)&v105 + 1));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_QWORD *)&v105 = &v89;
      sub_2367D6C0C((void ***)&v105);
      if (SHIBYTE(v88[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88[1].__r_.__value_.__l.__data_);
    }
    else
    {
      v49 = 0;
      v50 = 1;
      while (1)
      {
        v51 = *v16;
        if (!(_DWORD)v51)
        {
          if (v48 == v47)
            v51 = 0;
          else
            v51 = *v48;
        }
        v52 = *(unsigned int *)(a4 + 100);
        if (!(_DWORD)v52)
        {
          if (v48 == v47)
            v52 = 0;
          else
            v52 = v48[1];
        }
        v53 = 4 * v51;
        sub_236818388(&v105, 4 * v51 * v52);
        __p[0] = (void *)(*(_QWORD *)(a4 + 416) + v49);
        v84 = 0u;
        v85 = 0u;
        v54 = sub_2367D105C(__p, 1uLL, 32, 1, 0, v53, a6, v105, *((_QWORD *)&v105 + 1) - v105, (uint64_t)&v84);
        if (!v54)
          sub_23683E4B4(v101, v50, v105, *((_QWORD *)&v105 + 1) - v105, &xmmword_236922350);
        if ((_QWORD)v105)
        {
          *((_QWORD *)&v105 + 1) = v105;
          operator delete((void *)v105);
        }
        if (v54)
          break;
        v48 = *(unsigned int **)(a4 + 416);
        v47 = *(unsigned int **)(a4 + 424);
        v49 += 40;
        v42 = v50++ >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (char *)v48) >> 3);
        if (v42)
          goto LABEL_67;
      }
    }
  }
  if (v46)
    operator delete(v46);
  *(_QWORD *)&v84 = &v103;
  sub_23683E57C((void ***)&v84);
  return sub_2368284CC((uint64_t)&v102);
}

void sub_23683E2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_23683DB58(v49 - 192);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_236821D94((uint64_t)&a19);
  if (a46)
    operator delete(a46);
  sub_23683E5F4((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_23683E3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  size_t v8;

  *(_QWORD *)(a1 + 72) = &off_2507FFD98;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  v5 = (_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v6 = a4 + 1;
  if (a4 != -1)
  {
    sub_23683E77C(v5, a4 + 1);
    v7 = *(char **)(a1 + 384);
    v8 = 96 * ((96 * v6 - 96) / 0x60uLL) + 96;
    bzero(v7, v8);
    *(_QWORD *)(a1 + 384) = &v7[v8];
  }
  return a1;
}

void sub_23683E498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  sub_23683E57C(&a9);
  sub_2368284CC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_23683E4B4(uint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, __int128 *a5)
{
  uint64_t v5;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;

  v5 = a1[47];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[48] - v5) >> 5) <= a2)
    return 0;
  v10 = (_QWORD *)(v5 + 96 * a2);
  v12 = *a5;
  v13 = *((_QWORD *)a5 + 2);
  sub_23683E634((uint64_t)v10, (uint64_t)&v12, *a1, a1[1]);
  *v10 = a3;
  v10[1] = a4;
  if ((v10[6] - 1) * v10[8] + v10[7] * v10[5] > a4)
    return 0;
  if (a2)
    sub_23683E69C(a1[47] + 96 * a2);
  return 1;
}

void sub_23683E57C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 96;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_23683E5F4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 376);
  sub_23683E57C(&v3);
  sub_2368284CC(a1 + 72);
  return a1;
}

uint64_t sub_23683E634(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  *(_QWORD *)(result + 32) = v4;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  v5 = *(unsigned int *)(result + 20);
  if (v5 > 5)
    v6 = 0;
  else
    v6 = qword_236922660[v5];
  v7 = (v6 * (unint64_t)*(unsigned int *)(result + 16)) >> 3;
  *(_QWORD *)(result + 56) = v7;
  v8 = v7 * a3;
  v9 = *(_QWORD *)(result + 32);
  if (v9 >= 2)
    v8 = (v9 + v8 - 1) / v9 * v9;
  *(_QWORD *)(result + 64) = v8;
  return result;
}

double sub_23683E69C(uint64_t a1)
{
  const void *v1;
  size_t v3;
  void *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v1 = *(const void **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v7 = 0;
    v6 = 0uLL;
    sub_23683E704(&v6, v1, (uint64_t)v1 + v3, v3);
    v4 = *(void **)(a1 + 72);
    if (v4)
    {
      *(_QWORD *)(a1 + 80) = v4;
      operator delete(v4);
    }
    result = *(double *)&v6;
    *(_OWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)a1 = 0;
  }
  return result;
}

_QWORD *sub_23683E704(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_2367C9FD8(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23683E760(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_23683E77C(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_2367C3440();
  v3 = 3 * a2;
  result = (char *)operator new(96 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v3];
  return result;
}

uint64_t sub_23683E7C8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, float32x4_t *a6, float32x4_t *a7, int a8, float a9, __n128 a10, int8x16_t a11, double a12, __n128 *a13)
{
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unint64_t v17;
  float32x4_t *v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int8x16_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  __n128 *v28;
  float32x4_t v29;
  const float *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;

  v13 = *(_QWORD *)(result + 40);
  v14 = *(_QWORD *)(result + 8 * (3 * a3 + a2) + 72);
  if (a2 != 1 && a5 * a4 >= 4)
  {
    *(float *)&a12 = (float)a5;
    v15 = vmlaq_n_f32(*a6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0), (float)a4 * -0.00744);
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    a11 = vbslq_s8((int8x16_t)vcgtq_f32(v16, v15), (int8x16_t)v16, (int8x16_t)v15);
    *a6 = (float32x4_t)a11;
  }
  if (a5)
  {
    v17 = 0;
    v19 = (float32x4_t *)(v13 + 4 * v14);
    v20 = (float)((float)a8 * a9) * a10.n128_f32[0];
    v21 = 8 * a5;
    v22 = 4 * a5;
    v23 = 32 * a4;
    do
    {
      result = v17 >= v22;
      if (a4)
      {
        v24 = 0;
        result = 2 * (v17 >= v22);
        v25 = (int8x16_t *)&xmmword_236924C00;
        v26 = v19;
        v27 = a7;
        v28 = a13;
        do
        {
          if (a4 == 1)
          {
            a10.n128_u32[0] = a6->u32[result | 1];
            a11.i32[0] = a6->i32[2 * (v17 >= v22)];
            v29 = (float32x4_t)vbslq_s8(*v25, (int8x16_t)vdupq_lane_s32((int32x2_t)a10.n128_u64[0], 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a11.i8, 0));
          }
          else
          {
            v30 = &a6->f32[result | (v24 >= 4 * a4)];
            v29 = vld1q_dup_f32(v30);
          }
          v31 = *v26++;
          v32 = v31;
          v33 = *v27++;
          v34 = vmulq_f32(vmulq_n_f32(v32, v20), v33);
          v35 = (int8x16_t)vcgeq_f32(vabsq_f32(v34), v29);
          a11 = (int8x16_t)vrndnq_f32(v34);
          a10 = (__n128)vcvtq_s32_f32((float32x4_t)vandq_s8(a11, v35));
          *v28++ = a10;
          v24 += 4;
          ++v25;
        }
        while (v24 < 8 * a4);
      }
      ++v17;
      a13 = (__n128 *)((char *)a13 + v23);
      a7 = (float32x4_t *)((char *)a7 + v23);
      v19 = (float32x4_t *)((char *)v19 + v23);
    }
    while (v17 != v21);
  }
  return result;
}

void sub_23683E914()
{
  int v0;
  float32x4_t *v1;
  float32x4_t *v2;
  uint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  double v6;
  float32x2_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x2x2_t v19;
  int32x4_t v20;
  float32x2x2_t v21;
  int32x4_t v22;
  float32x4_t *v23;
  float *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  float32x4_t *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  const float *v46;
  float32x4_t v47;
  float32x4_t *v48;
  void (*v49)(uint64_t *, uint64_t *, unint64_t, float32x4_t *);
  uint64_t v50;
  float32x4_t *v51;
  uint64_t v52;
  const float *v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  const float *v58;
  float32x4_t v59;
  float32x4_t *v60;
  uint64_t i;
  uint64_t v62;
  const float *v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  const float *v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t *v72;
  uint64_t v73;
  const float *v74;
  float32x4_t v75;
  float32x4_t *v76;
  uint64_t j;
  uint64_t v78;
  const float *v79;
  float32x4_t v80;
  float32x4_t *v81;
  uint64_t k;
  uint64_t v83;
  const float *v84;
  float32x4_t v85;
  float32x4_t *v86;
  uint64_t m;
  uint64_t v88;
  const float *v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t *v92;
  uint64_t v93;
  float32x4_t *v94;
  uint64_t v95;
  float32x4_t *v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  float32x4_t v101[4];
  float32x4_t v102[8];
  _BYTE v103[256];
  _BYTE v104[512];
  _BYTE v105[1024];
  _BYTE v106[2048];
  _BYTE v107[8192];
  float32x4_t v108;
  float32x4_t v109;
  __int128 v110;
  int32x4_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  float32x4x2_t v141;

  v0 = MEMORY[0x24BDAC7A8]();
  v140 = *MEMORY[0x24BDAC8D0];
  v8 = v3;
  v9 = v2;
  v10 = v1;
  switch(v0)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      v2->i32[0] = v1->i32[0];
      return;
    case 4:
      v11.i32[0] = v1->i32[0];
      v11.f32[1] = v1->f32[1] * 0.90176;
      v12.i32[0] = v1[4].i32[0];
      v12.f32[1] = v1[4].f32[1] * 0.90176;
      v13 = vmul_f32(v12, (float32x2_t)vdup_n_s32(0x3F66DA05u));
      v14 = (int32x2_t)vadd_f32(v11, v13);
      v15 = (int32x2_t)vsub_f32(v11, v13);
      v13.i32[0] = vdup_lane_s32(v14, 1).u32[0];
      v16 = (float32x2_t)vzip1_s32(v14, v15);
      v13.i32[1] = v15.i32[1];
      *(float32x2_t *)v2->f32 = vadd_f32(v16, v13);
      *(float32x2_t *)&v2->f32[v3] = vsub_f32(v16, v13);
      return;
    case 5:
      v17 = 0;
      v111 = 0u;
      v110 = 0u;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v18 = *v10;
        v10 += 8;
        *(&v108 + v17) = vmulq_f32(vmulq_n_f32(v18, *((float *)&xmmword_2368AF840 + v17)), (float32x4_t)xmmword_2368AF840);
        ++v17;
      }
      while (v17 != 4);
      sub_2367DFE40(&v108, 4, (uint64_t)&v97, 4, v101);
      v19 = (float32x2x2_t)vzip1q_s32(v97, v99);
      v20 = vzip1q_s32(v98, v100);
      v21 = (float32x2x2_t)vzip2q_s32(v97, v99);
      v22 = vzip2q_s32(v98, v100);
      v23 = &v108;
      vst2_f32(v23->f32, v19);
      *(int32x4_t *)++v23 = vzip2q_s32((int32x4_t)v19, v20);
      v24 = (float *)&v110;
      vst2_f32(v24, v21);
      v111 = vzip2q_s32((int32x4_t)v21, v22);
      sub_2367DFE40(&v108, 4, (uint64_t)v9, v8, v101);
      return;
    case 6:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      v2->i32[0] = vadd_f32(v4, v5).u32[0];
      v2->i32[v3] = vsub_f32(v4, v5).u32[0];
      return;
    case 7:
      v4.i32[0] = v1->i32[0];
      v5.f32[0] = v1->f32[1] * 0.90176;
      *(int32x2_t *)v2->f32 = vzip1_s32((int32x2_t)vadd_f32(v4, v5), (int32x2_t)vsub_f32(v4, v5));
      return;
    case 8:
      sub_236824800(1, (__int32 *)&v108, v3, (uint64_t)v2, &v98, (float32x2_t)*(_OWORD *)&vmulq_f32(*v1, (float32x4_t)xmmword_2368AF840), 0.00624292809, v6, v7);
      return;
    case 9:
      v108 = vmulq_f32(*v1, (float32x4_t)xmmword_2368AF840);
      v97 = (int32x4_t)v108;
      sub_236824800(1, v97.i32, 1, (uint64_t)&v108, &v98, *(float32x2_t *)v108.f32, 0.00624292809, v6, v7);
      v97 = (int32x4_t)v108;
      *v9 = v108;
      return;
    case 10:
      v25 = 0;
      v109 = 0u;
      v108 = 0u;
      v26 = 1;
      do
      {
        v27 = v26;
        *(&v108 + v25) = vmulq_f32(vmulq_n_f32(v1[8 * v25], flt_2368B04C0[v25]), (float32x4_t)xmmword_2368AF840);
        v25 = 1;
        v26 = 0;
      }
      while ((v27 & 1) != 0);
      v28 = 0;
      v97 = (int32x4_t)vaddq_f32(v108, v109);
      v98 = (int32x4_t)vsubq_f32(v108, v109);
      v29 = 1;
      do
      {
        v30 = 0;
        v31 = v29;
        v32 = v28;
        v33 = (float32x4_t *)(&v97 + v28);
        do
        {
          v108.i32[v32] = v33->i32[v30++];
          v32 += 2;
        }
        while (v30 != 4);
        v29 = 0;
        v28 = 1;
      }
      while ((v31 & 1) != 0);
      sub_2368248AC(2, (float32x2_t *)&v108, v3, (uint64_t)v2, (float32x2_t *)&v99);
      return;
    case 11:
      v34 = 0;
      v109 = 0u;
      v108 = 0u;
      v35 = 1;
      do
      {
        v36 = v35;
        *(&v108 + v34) = vmulq_f32(vmulq_n_f32(v1[8 * v34], flt_2368B04C0[v34]), (float32x4_t)xmmword_2368AF840);
        v34 = 1;
        v35 = 0;
      }
      while ((v36 & 1) != 0);
      v37 = 0;
      v38 = 1;
      do
      {
        v39 = 0;
        v40 = v38;
        v41 = v37;
        v42 = &v108 + v37;
        do
        {
          v97.i32[v41] = v42->i32[v39++];
          v41 += 2;
        }
        while (v39 != 4);
        v38 = 0;
        v37 = 1;
      }
      while ((v40 & 1) != 0);
      sub_2368248AC(2, (float32x2_t *)&v97, 2, (uint64_t)&v108, (float32x2_t *)&v99);
      v141 = vld2q_f32(v108.f32);
      *v9 = vaddq_f32(v141.val[0], v141.val[1]);
      *(float32x4_t *)((char *)v9 + 4 * v8) = vsubq_f32(v141.val[0], v141.val[1]);
      return;
    case 18:
      v43 = 0;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v44 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v45 = 0;
        v46 = (const float *)xmmword_236922F50 + v43;
        v47 = vld1q_dup_f32(v46);
        do
        {
          v44[v45] = vmulq_f32(vmulq_f32(v10[v45], v47), (float32x4_t)xmmword_236922F50[v45]);
          ++v45;
        }
        while (v45 != 2);
        ++v43;
        v44 += 2;
        v10 += 16;
      }
      while (v43 != 8);
      v91 = v3;
      v92 = v2;
      v48 = (float32x4_t *)v103;
      v95 = 8;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FF7C, (uint64_t)&v95, (uint64_t)&v93, 8, (uint64_t)v103);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v93 = 8;
      v94 = &v108;
      sub_2367DF630(&v95, &v93);
      v95 = 8;
      v96 = &v108;
      v49 = sub_23683FF7C;
      goto LABEL_50;
    case 19:
      v50 = 0;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v51 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v52 = 0;
        v53 = (const float *)&xmmword_2368AF840 + v50;
        v54 = vld1q_dup_f32(v53);
        do
        {
          v51[v52] = vmulq_f32(vmulq_f32(v10[v52], v54), (float32x4_t)xmmword_236922F50[v52]);
          ++v52;
        }
        while (v52 != 2);
        ++v50;
        v51 += 2;
        v10 += 16;
      }
      while (v50 != 4);
      v95 = 8;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FF10, (uint64_t)&v95, (uint64_t)&v93, 8, (uint64_t)v102);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v93 = 4;
      v94 = &v108;
      sub_2367DED50(&v95, &v93);
      sub_2367DEDF8(&v108, 4, v9, v8, v102);
      return;
    case 20:
      v55 = 0;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v56 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v57 = 0;
        v58 = (const float *)&xmmword_2368AF840 + v55;
        v59 = vld1q_dup_f32(v58);
        do
        {
          v56[v57] = vmulq_f32(vmulq_f32(v10[v57], v59), (float32x4_t)xmmword_236922F50[v57]);
          ++v57;
        }
        while (v57 != 2);
        ++v55;
        v56 += 2;
        v10 += 16;
      }
      while (v55 != 4);
      v91 = v3;
      v92 = v2;
      v48 = v102;
      v95 = 8;
      v96 = &v108;
      v93 = 4;
      v94 = (float32x4_t *)&v97;
      sub_2367DED50(&v95, &v93);
      sub_2367DEDF8((float32x4_t *)&v97, 4, &v108, 4, v102);
      v95 = 4;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DFEEC(&v95, &v93);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v49 = sub_23683FF10;
      goto LABEL_50;
    case 21:
      v60 = &v108;
      bzero(&v108, 0x400uLL);
      for (i = 0; i != 16; ++i)
      {
        v62 = 0;
        v63 = (const float *)xmmword_236922F70 + i;
        v64 = vld1q_dup_f32(v63);
        do
        {
          v60[v62] = vmulq_f32(vmulq_f32(v10[v62], v64), (float32x4_t)xmmword_236922F70[v62]);
          ++v62;
        }
        while (v62 != 4);
        v60 += 4;
        v10 += 32;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v105;
      v95 = 16;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FFE8, (uint64_t)&v95, (uint64_t)&v93, 16, (uint64_t)v105);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v93 = 16;
      v94 = &v108;
      sub_2367DF0D8(&v95, &v93);
      v95 = 16;
      v96 = &v108;
      v49 = sub_23683FFE8;
      goto LABEL_66;
    case 22:
      v65 = 0;
      v139 = 0u;
      v138 = 0u;
      v137 = 0u;
      v136 = 0u;
      v135 = 0u;
      v134 = 0u;
      v133 = 0u;
      v132 = 0u;
      v131 = 0u;
      v130 = 0u;
      v129 = 0u;
      v128 = 0u;
      v127 = 0u;
      v126 = 0u;
      v125 = 0u;
      v124 = 0u;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v66 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v67 = 0;
        v68 = (const float *)xmmword_236922F50 + v65;
        v69 = vld1q_dup_f32(v68);
        do
        {
          v66[v67] = vmulq_f32(vmulq_f32(v10[v67], v69), (float32x4_t)xmmword_236922F70[v67]);
          ++v67;
        }
        while (v67 != 4);
        ++v65;
        v66 += 4;
        v10 += 32;
      }
      while (v65 != 8);
      v91 = v3;
      v92 = v2;
      v48 = (float32x4_t *)v104;
      v95 = 16;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FF7C, (uint64_t)&v95, (uint64_t)&v93, 16, (uint64_t)v104);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v93 = 8;
      v94 = &v108;
      sub_2367DF22C(&v95, &v93);
      v95 = 8;
      v96 = &v108;
      v49 = sub_23683FFE8;
LABEL_50:
      v70 = 8;
      goto LABEL_73;
    case 23:
      v71 = 0;
      v139 = 0u;
      v138 = 0u;
      v137 = 0u;
      v136 = 0u;
      v135 = 0u;
      v134 = 0u;
      v133 = 0u;
      v132 = 0u;
      v131 = 0u;
      v130 = 0u;
      v129 = 0u;
      v128 = 0u;
      v127 = 0u;
      v126 = 0u;
      v125 = 0u;
      v124 = 0u;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      v116 = 0u;
      v115 = 0u;
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v72 = &v108;
      v109 = 0u;
      v108 = 0u;
      do
      {
        v73 = 0;
        v74 = (const float *)xmmword_236922F50 + v71;
        v75 = vld1q_dup_f32(v74);
        do
        {
          v72[v73] = vmulq_f32(vmulq_f32(v10[v73], v75), (float32x4_t)xmmword_236922F70[v73]);
          ++v73;
        }
        while (v73 != 4);
        ++v71;
        v72 += 4;
        v10 += 32;
      }
      while (v71 != 8);
      v91 = v3;
      v92 = v2;
      v48 = (float32x4_t *)v104;
      v95 = 16;
      v96 = &v108;
      v93 = 8;
      v94 = (float32x4_t *)&v97;
      sub_2367DF22C(&v95, &v93);
      v95 = 8;
      v96 = (float32x4_t *)&v97;
      v93 = 8;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FFE8, (uint64_t)&v95, (uint64_t)&v93, 8, (uint64_t)v104);
      v95 = 8;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DF314(&v95, &v93);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v49 = sub_23683FF7C;
      goto LABEL_66;
    case 24:
      v76 = &v108;
      bzero(&v108, 0x1000uLL);
      for (j = 0; j != 32; ++j)
      {
        v78 = 0;
        v79 = (const float *)xmmword_236922FB0 + j;
        v80 = vld1q_dup_f32(v79);
        do
        {
          v76[v78] = vmulq_f32(vmulq_f32(v10[v78], v80), (float32x4_t)xmmword_236922FB0[v78]);
          ++v78;
        }
        while (v78 != 8);
        v76 += 8;
        v10 += 64;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v107;
      v95 = 32;
      v96 = &v108;
      v93 = 32;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236840054, (uint64_t)&v95, (uint64_t)&v93, 32, (uint64_t)v107);
      v95 = 32;
      v96 = (float32x4_t *)&v97;
      v93 = 32;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)&v95, (uint64_t)&v93, 32, 32);
      v95 = 32;
      v96 = &v108;
      v49 = sub_236840054;
      goto LABEL_72;
    case 25:
      v81 = &v108;
      bzero(&v108, 0x800uLL);
      for (k = 0; k != 16; ++k)
      {
        v83 = 0;
        v84 = (const float *)xmmword_236922F70 + k;
        v85 = vld1q_dup_f32(v84);
        do
        {
          v81[v83] = vmulq_f32(vmulq_f32(v10[v83], v85), (float32x4_t)xmmword_236922FB0[v83]);
          ++v83;
        }
        while (v83 != 8);
        v81 += 8;
        v10 += 64;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v106;
      v95 = 32;
      v96 = &v108;
      v93 = 32;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FFE8, (uint64_t)&v95, (uint64_t)&v93, 32, (uint64_t)v106);
      v95 = 32;
      v96 = (float32x4_t *)&v97;
      v93 = 16;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)&v95, (uint64_t)&v93, 16, 32);
      v95 = 16;
      v96 = &v108;
      v49 = sub_236840054;
LABEL_66:
      v70 = 16;
      goto LABEL_73;
    case 26:
      v86 = &v108;
      bzero(&v108, 0x800uLL);
      for (m = 0; m != 16; ++m)
      {
        v88 = 0;
        v89 = (const float *)xmmword_236922F70 + m;
        v90 = vld1q_dup_f32(v89);
        do
        {
          v86[v88] = vmulq_f32(vmulq_f32(v10[v88], v90), (float32x4_t)xmmword_236922FB0[v88]);
          ++v88;
        }
        while (v88 != 8);
        v86 += 8;
        v10 += 64;
      }
      v91 = v8;
      v92 = v9;
      v48 = (float32x4_t *)v106;
      v95 = 32;
      v96 = &v108;
      v93 = 16;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)&v95, (uint64_t)&v93, 16, 32);
      v95 = 16;
      v96 = (float32x4_t *)&v97;
      v93 = 16;
      v94 = &v108;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_236840054, (uint64_t)&v95, (uint64_t)&v93, 16, (uint64_t)v106);
      v95 = 16;
      v96 = &v108;
      v93 = 32;
      v94 = (float32x4_t *)&v97;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)&v95, (uint64_t)&v93, 32, 16);
      v95 = 32;
      v96 = (float32x4_t *)&v97;
      v49 = sub_23683FFE8;
LABEL_72:
      v70 = 32;
LABEL_73:
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49, (uint64_t)&v95, (uint64_t)&v91, v70, (uint64_t)v48);
      break;
    default:
      return;
  }
}

_QWORD *sub_23683F6BC(_QWORD *result, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      v14 = 0;
      v15 = (float32x4_t *)(result[1] + v4);
      v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      v17 = 0;
      v18 = *a4;
      v19 = a4[1];
      v21 = a4[2];
      v20 = a4[3];
      v22 = vaddq_f32(*a4, v20);
      v23 = vaddq_f32(v19, v21);
      v24 = vaddq_f32(v22, v23);
      v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      v28 = vaddq_f32(v26, v27);
      v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

double sub_23683F7A0(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t *v5;
  double result;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t *v10;

  v5 = a3 + 8;
  v9 = 8;
  v10 = a3;
  sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F6BC, a1, (uint64_t)&v9, 8, (uint64_t)&a3[8]);
  v9 = 8;
  v10 = a3;
  v7 = 4;
  v8 = a2;
  sub_2367DED50(&v9, &v7);
  v9 = 4;
  v10 = a3;
  sub_2367E0CD4(4, a2, &v9, v5);
  v9 = 4;
  v10 = a3;
  v7 = 8;
  v8 = a2;
  *(_QWORD *)&result = sub_2367DFEEC(&v9, &v7).u64[0];
  return result;
}

void sub_23683F844(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 256);
    v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2367E11AC(a4, v10);
      for (i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_23683F91C(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 128);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2367E12DC(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_23683F9E0(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 512);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 512);
      sub_236813548(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3D0000003D000000;
      v15.i64[1] = 0x3D0000003D000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 32);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

_QWORD *sub_23683FAA4(_QWORD *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  int32x4_t v19;
  float *v20;
  uint64_t v21;
  float *v22;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 12;
    v7 = 8;
    v8 = 4;
    do
    {
      if (a4)
      {
        v9 = 0;
        for (i = 0; i < a4; i += 4)
        {
          v11 = result[1];
          v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          v17 = vzip1q_s32(v13, v15);
          v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          v19 = vzip2q_s32(v13, v15);
          v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_23683FB88(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 1024);
    v15 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 1024);
      sub_236813418(a4, v10);
      for (i = 0; i != 64; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_23683FC60(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 2048);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 2048);
      sub_2368132E0(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3C0000003C000000;
      v15.i64[1] = 0x3C0000003C000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 128);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_23683FD24(_QWORD *a1, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t i;
  float32x4_t *v18;
  uint64_t j;
  uint64_t k;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t m;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)&a4[256];
    v10 = a4 + 512;
    v11 = (uint64_t)&a4[384];
    v12 = a4 + 1;
    v26 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v13 = 0;
      v14 = (float32x4_t *)(a1[1] + v7);
      v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 256);
      v16 = a4;
      for (i = 255; i != 127; --i)
      {
        v16[256] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_2368132E0(v9, v10);
      v18 = a4;
      for (j = 255; j != 127; --j)
      {
        v18[384] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (k = 0; k != 128; ++k)
        *(float32x4_t *)(v11 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v11 + 16 * k), *(float *)&dword_236922D50[k]);
      sub_2368132E0(v11, v10);
      a4[384] = vmlaq_f32(a4[385], v27, a4[384]);
      v21 = 0xFFFFFFFFFFFFF82;
      do
      {
        a4[v21 + 511] = vaddq_f32(a4[v21 + 511], a4[v21 + 512]);
        ++v21;
      }
      while (v21 * 16);
      v22 = a4;
      do
      {
        *v22 = *(float32x4_t *)(v9 + v21 * 16);
        v22 += 2;
        ++v21;
      }
      while (v21 != 128);
      v23 = 0;
      v24 = v12;
      do
      {
        *v24 = *(float32x4_t *)(v11 + v23);
        v24 += 2;
        v23 += 16;
      }
      while (v23 != 2048);
      for (m = 0; m != 256; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v8) = vmulq_f32(a4[m], v26);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_23683FF10(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFE40((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

void sub_23683FF7C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DEDF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_23683FFE8(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFD10((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_236840054(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t j;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = a4 + 32;
    v10 = a4 + 16;
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v11 = 0;
      v13 = *a1;
      v12 = a1[1];
      v14 = *a2;
      v15 = a2[1];
      v16 = (float32x4_t *)(v12 + v7);
      v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 16);
      v18 = v12 + 4 * v13;
      for (i = 16; i != 32; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_2367DFD10(a4, 4, a4, 4, v9);
      for (j = 0; j != -15; --j)
        a4[j + 31] = vaddq_f32(a4[j + 31], a4[j + 30]);
      *v10 = vmulq_f32(*v10, v27);
      sub_2367DFD10(v10, 4, v10, 4, v9);
      v22 = 0;
      v23 = v15 + 124 * v14;
      do
      {
        v21.f32[0] = flt_23692278C[v22];
        v24 = &a4[v22];
        v25 = v24[16];
        v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 16);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

void sub_2368401DC(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  float32x4_t *v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t *v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  unint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v78;
  float32x4_t *v79;
  __int32 *v80;
  uint64_t v81;
  __int32 *v82;
  float32x4_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  float32x4_t *v93;
  unint64_t v94;
  float32x4_t *v95;
  uint64_t v96;
  float32x4_t v97;
  uint64_t v98;
  float32x4_t *v99;
  __int32 *v100;
  uint64_t v101;
  __int32 *v102;
  float32x4_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  float v119;
  float v120;
  uint64_t v121;
  char v122;
  char v123;
  int32x4_t *v124;
  unint64_t v125;
  uint64_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  float32x2x2_t v130;
  int32x4_t v131;
  float32x2x2_t v132;
  int32x4_t v133;
  float *v134;
  uint64_t i;
  const float *v136;
  const float *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t *v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  uint64_t v160;
  uint64_t j;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  int32x4_t *v170;
  int8x16_t v171;
  unint64_t v172;
  float32x4_t *v173;
  uint64_t v174;
  float32x4_t v175;
  uint64_t v176;
  float32x4_t *v177;
  __int32 *v178;
  uint64_t v179;
  __int32 *v180;
  float32x4_t *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  __int8 *v193;
  uint64_t v194;
  char v195;
  char v196;
  float32x4_t *v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  _DWORD *v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  char v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  float v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  float *v227;
  uint64_t v228;
  uint64_t v229;
  float *v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  int32x4_t *v237;
  uint64_t v238;
  int8x16_t v239;
  unint64_t v240;
  float32x4_t *v241;
  uint64_t v242;
  float32x4_t v243;
  uint64_t v244;
  float32x4_t *v245;
  __int32 *v246;
  uint64_t v247;
  __int32 *v248;
  float32x4_t *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  float v258;
  float v259;
  float v260;
  uint64_t v261;
  char v262;
  char v263;
  uint64_t v264;
  float32x4_t *v265;
  float32x4_t v266;
  float v267;
  float v268;
  unsigned __int8 v269;
  float32x4_t *v270;
  __n128 v271;
  int8x16_t v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  float v280;
  float v281;
  float32x4_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  float32x4_t v290;
  int8x16_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  float v297;
  uint64_t v298;
  float v299;
  unint64_t v300;
  __int8 *v301;
  unint64_t v302;
  uint64_t v303;
  float v304;
  float v305;
  float v306;
  float v307;
  unint64_t v308;
  uint64_t v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  char v317;
  int v318;
  uint64_t v319;
  float32_t v320;
  float v321;
  float v322;
  float32_t v323;
  float32_t v324;
  float v325;
  float v326;
  float v327;
  float v328;
  double v329;
  double v330;
  int v331;
  int v332;
  uint64_t v333;
  int v334;
  int v335;
  uint64_t k;
  float32_t v337;
  int v338;
  __n128 *v339;
  __n128 v340;
  int8x16_t v341;
  double v342;
  uint64_t v343;
  float v344;
  unint64_t v345;
  float32x4_t *v346;
  float32x4_t *v347;
  int8x16_t v348;
  int32x4_t v349;
  float32x4_t v350;
  int8x16_t v352;
  float32x4_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  float32x4_t *v359;
  char v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  _OWORD *v367;
  _QWORD *v368;
  uint64_t m;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int8x16_t v391;
  float64x2_t v392;
  float32x4_t v393;
  float32x4_t v394;
  unsigned int v395;
  unsigned int v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  float32x4_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  __int8 *v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t v419;
  unint64_t *v420;
  uint64_t v421;
  unint64_t v422;
  float32x4_t *v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  float32x4_t *v428;
  char v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  float32x4_t *v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439[3];
  uint64_t v440[6];
  _QWORD v441[3];
  _OWORD v442[16];
  uint64_t v443;
  float32x4_t v444[4];
  float32x4_t v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  float32x4_t v453[40];
  float32x4_t v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  float32x4x2_t v458;
  float32x4x2_t v459;

  v457 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  v9 = a1 / v7;
  v10 = a1 % v7;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = v11 >> 3;
  v13 = (v11 >> 3) * v10;
  v14 = (v11 >> 3) * v9;
  v15 = *(_QWORD *)(a2 + 72);
  v16 = v15 - v13;
  if (v15 < v13)
    v16 = 0;
  if (v13 + (v11 >> 3) <= v15)
    v16 = v11 >> 3;
  v17 = v8 - v14;
  if (v8 < v14)
    v17 = 0;
  if (v14 + (v11 >> 3) > v8)
    v12 = v17;
  v378 = v12;
  v379 = (v11 >> 3) * v10;
  v371 = v13 >> 3;
  v370 = v14 >> 3;
  v384 = v16;
  v377 = v16 + 7;
  v373 = a4 + v11 * v10;
  v374 = (v11 >> 3) * v9;
  v372 = a5 + v11 * v9;
  v18 = a3[2];
  v435 = v18 >> 2;
  do
    v19 = __ldxr(&qword_25642E998);
  while (__stxr(v19 + 1, &qword_25642E998));
  v20 = (unint64_t)malloc_type_malloc(0xC0100uLL, 0xFBCB090DuLL);
  if (v20)
  {
    v21 = v20 & 0xFFFFFFFFFFFFFF80;
    v22 = (v20 & 0xFFFFFFFFFFFFFF80) + 256;
    *(_QWORD *)(v21 + 240) = v20;
    *(_QWORD *)(v21 + 248) = 786432;
  }
  else
  {
    v22 = 0;
  }
  v440[2] = 0;
  v440[0] = v22;
  v440[1] = 0;
  do
    v23 = __ldxr(&qword_25642E998);
  while (__stxr(v23 + 1, &qword_25642E998));
  v24 = (unint64_t)malloc_type_malloc(0x143100uLL, 0xFBCB090DuLL);
  v422 = v22;
  if (v24)
  {
    v25 = v24 & 0xFFFFFFFFFFFFFF80;
    v26 = (v24 & 0xFFFFFFFFFFFFFF80) + 256;
    *(_QWORD *)(v25 + 240) = v24;
    *(_QWORD *)(v25 + 248) = 1323008;
  }
  else
  {
    v26 = 0;
  }
  v439[2] = 0;
  v428 = (float32x4_t *)v26;
  v439[0] = v26;
  v439[1] = 0;
  v443 = 0;
  memset(v442, 0, sizeof(v442));
  v27 = (_QWORD *)a2;
  v421 = *(_QWORD *)(a2 + 4272);
  if (v421)
  {
    v28 = 0;
    v29 = v442;
    do
    {
      v30 = 0;
      v31 = v29;
      do
      {
        v32 = *(_QWORD *)(v27[528] + 8 * v28);
        *v31 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v32 + 24))(v32, v30, a1, 0);
        v31 += 11;
        ++v30;
        v27 = (_QWORD *)a2;
      }
      while (v30 != 3);
      ++v28;
      v29 = (_OWORD *)((char *)v29 + 8);
    }
    while (v28 != v421);
  }
  if (v378)
  {
    v33 = 0;
    v434 = v428 + 49152;
    v420 = v27 + 534;
    v34 = v377 >> 3;
    v413 = (uint64_t)&v428[57344];
    v404 = (uint64_t)&v428[0x10000];
    v412 = (uint64_t)&v428[51200];
    v403 = (uint64_t)&v428[53248];
    v411 = (uint64_t)&v428[49664];
    v402 = (uint64_t)&v428[50176];
    v433 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    v405 = (uint64_t)&v428[49168];
    v401 = (uint64_t)&v428[49408];
    v410 = (uint64_t)&v428[49280];
    v416 = (uint64_t)&v428[49216];
    v414 = (uint64_t)&v428[49184];
    v423 = v428 + 49160;
    if (v377 >> 3 <= 1)
      v34 = 1;
    v383 = v34;
    v35 = 16 * v435;
    v36 = 4 * v435;
    v415 = &v428->i8[4];
    v409 = v428 + 2;
    v392 = (float64x2_t)vdupq_n_s64(0x3FE147AE147AE148uLL);
    v37.i32[1] = 1059313418;
    v38 = (float32x4_t)vdupq_n_s32(0x3F0A3D71u);
    v391 = (int8x16_t)v38;
    v400 = 16 * v435;
    do
    {
      v39 = v33 + v374;
      v40 = v27[131];
      v41 = v27[130];
      v42 = v27[141];
      v43 = v27[140];
      v44 = v27[146];
      v45 = v27[145];
      v380 = v33;
      v46 = a3[2] * (v372 + 8 * v33);
      v47 = a3[8] + v46 + 4 * v373;
      v441[0] = a3[3] + v46 + 4 * v373;
      v441[1] = v47;
      v441[2] = a3[13] + v46 + 4 * v373;
      v48 = a6[2] * (v33 + v374);
      v49 = a6[8] + v48 + 4 * v379;
      v440[3] = a6[3] + v48 + 4 * v379;
      v440[4] = v49;
      v440[5] = a6[13] + v48 + 4 * v379;
      if (v377 < 8)
        goto LABEL_315;
      v390 = 0;
      v50 = 0;
      v399 = v40 + v41 * v39 + 4 * v379;
      v51 = v370 + (v380 >> 3);
      v381 = v44 + v45 * v51 + v371;
      v382 = v42 + v43 * v51 + v371;
      v397 = *(_QWORD *)(a2 + 176) + *(_QWORD *)(a2 + 168) * v39 + v379;
      v388 = v35;
      v389 = 16;
      v387 = 16 * v435 + 16;
      v52 = 8;
      do
      {
        v385 = v52;
        v386 = v50;
        if (v384 >= v52)
          v53 = v52;
        else
          v53 = v384;
        v398 = v53;
        v54 = 8 * v50;
        v55 = 8 * v50 + 8;
        if (v384 < v55)
          v55 = v384;
        if (v54 >= v55)
          goto LABEL_314;
        v37.i32[0] = *(_DWORD *)(a2 + 1204);
        v38.f32[0] = *(float *)(a2 + 1212) + (float)((float)*(char *)(v381 + v50) * v37.f32[0]);
        v37.f32[0] = *(float *)(a2 + 1208) + (float)((float)*(char *)(v382 + v50) * v37.f32[0]);
        v37 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 0));
        v38 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0));
        v393 = v38;
        v394 = v37;
        v56 = v390;
        v407 = v388;
        v408 = v389;
        v406 = v387;
        do
        {
          v426 = v54;
          v57 = *(unsigned __int8 *)(v397 + v54);
          v58 = v57 >> 1;
          v438 = (v57 >> 1) & 0xFFFFFFFEFFFFFFFFLL | ((v57 & 1) << 32);
          if ((v57 & 1) == 0)
            goto LABEL_313;
          v59 = 0;
          v60 = byte_23692665C[v58];
          v61 = byte_236926677[v58];
          if (v61 >= v60)
            v62 = byte_23692665C[v58];
          else
            v62 = byte_236926677[v58];
          v395 = v61;
          v396 = v60;
          if (v61 <= v60)
            v61 = v60;
          v436 = v62;
          v437 = v61;
          v63 = v62 * (unint64_t)v61;
          v418 = *(_DWORD *)(v399 + 4 * v54);
          v64 = v63 << 6;
          v455 = 0x100000000;
          v456 = 2;
          v419 = 8 * v54;
          v417 = (_DWORD)v63 << 8;
          v65 = v428;
          v432 = v63 << 6;
          do
          {
            v66 = *((int *)&v455 + v59);
            v67 = v441[v66];
            v68 = (float32x4_t *)(v67 + 4 * v419);
            v69 = (float32x4_t *)((char *)v65 + 4 * (int)v64 * (uint64_t)(int)v66);
            switch((int)v438)
            {
              case 0:
                v70 = v59;
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F91C, (uint64_t)v444, (uint64_t)v453, 8, v405);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 8;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DF630(v453, &v445);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 8;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F91C, (uint64_t)v453, (uint64_t)&v445, 8, v405);
                goto LABEL_167;
              case 1:
                v208 = 0;
                v209 = 1;
                do
                {
                  v210 = 0;
                  v211 = v209;
                  v212 = 1;
                  v213 = ((4 * v208) | 1) * v435 + 1;
                  v214 = 8 * v208;
                  v215 = v400 * v208;
                  v216 = v67 + v400 * v208;
                  v217 = (uint64_t)&v65[2 * v208] + v417 * (uint64_t)(int)v66;
                  v218 = v67 + v56 + v215;
                  do
                  {
                    v219 = v212;
                    v220 = 4 * v210;
                    v221 = 16 * v210;
                    v222 = 0.0;
                    v223 = 4;
                    v224 = v216 + 16 * v210;
                    do
                    {
                      v222 = (float)((float)((float)(v222 + COERCE_FLOAT(*(_OWORD *)(v224 + v56)))
                                           + COERCE_FLOAT(HIDWORD(*(_QWORD *)(v224 + v56))))
                                   + COERCE_FLOAT(*(_QWORD *)(v224 + v56 + 8)))
                           + COERCE_FLOAT(HIDWORD(*(_OWORD *)(v224 + v56)));
                      v224 += v36;
                      --v223;
                    }
                    while (v223);
                    v225 = v213 + v220;
                    v226 = v210 | v214;
                    v227 = (float *)(v217 + v220);
                    v228 = v218 + v221;
                    do
                    {
                      v229 = 0;
                      v230 = v227;
                      do
                      {
                        if (v223 != 1 || v229 != 4)
                          *v230 = *(float *)(v228 + v229) - v68->f32[v225];
                        v229 += 4;
                        v230 += 2;
                      }
                      while (v229 != 16);
                      ++v223;
                      v227 += 16;
                      v228 += v36;
                    }
                    while (v223 != 4);
                    v212 = 0;
                    *(__int32 *)((char *)v69->i32 + ((4 * v226) | 0x48)) = v69->i32[v226];
                    v69->f32[v226] = v222 * 0.0625;
                    v210 = 1;
                  }
                  while ((v219 & 1) != 0);
                  v209 = 0;
                  v208 = 1;
                }
                while ((v211 & 1) != 0);
                v231 = v69->f32[0];
                v232 = v69->f32[1];
                v233 = v69[2].f32[0];
                v234 = v69[2].f32[1];
                v235 = v69->f32[0] + v232;
                v69->f32[0] = (float)((float)(v235 + v233) + v234) * 0.25;
                v69->f32[1] = (float)((float)(v235 - v233) - v234) * 0.25;
                v236 = v231 - v232;
                v167 = (float)((float)(v236 + v233) - v234) * 0.25;
                v168 = (float)((float)(v236 - v233) + v234) * 0.25;
                goto LABEL_148;
              case 2:
                for (i = 1; i != 9; i += 2)
                {
                  v136 = (const float *)(v67 + v56);
                  v458 = vld2q_f32(v136);
                  v137 = (const float *)(v67 + v36 + v56);
                  v459 = vld2q_f32(v137);
                  v138 = vaddq_f32(v458.val[0], v458.val[1]);
                  v139 = vaddq_f32(vaddq_f32(v138, v459.val[0]), v459.val[1]);
                  v140 = vsubq_f32(vsubq_f32(v138, v459.val[0]), v459.val[1]);
                  v458.val[0] = vsubq_f32(v458.val[0], v458.val[1]);
                  v458.val[1] = vsubq_f32(vaddq_f32(v458.val[0], v459.val[0]), v459.val[1]);
                  v458.val[0] = vaddq_f32(vsubq_f32(v458.val[0], v459.val[0]), v459.val[1]);
                  __asm { FMOV            V2.4S, #0.25 }
                  v143 = &v453[i];
                  v143[-1] = vmulq_f32(v139, v459.val[0]);
                  *v143 = vmulq_f32(v140, v459.val[0]);
                  v143[7] = vmulq_f32(v458.val[1], v459.val[0]);
                  v143[8] = vmulq_f32(v458.val[0], v459.val[0]);
                  v67 += 8 * v435;
                }
                v144 = 0;
                v69[12] = v453[12];
                v69[13] = v453[13];
                v69[14] = v453[14];
                v69[15] = v453[15];
                v69[8] = v453[8];
                v69[9] = v453[9];
                v69[10] = v453[10];
                v69[11] = v453[11];
                v69[4] = v453[4];
                v69[5] = v453[5];
                v69[6] = v453[6];
                v69[7] = v453[7];
                *v69 = v453[0];
                v69[1] = v453[1];
                v69[2] = v453[2];
                v69[3] = v453[3];
                v145 = 1;
                do
                {
                  v146 = 0;
                  v147 = v145;
                  v148 = 16 * v144;
                  v149 = 8 * v144;
                  v150 = 1;
                  do
                  {
                    v151 = v150;
                    v152 = (8 * v146) | (4 * v148);
                    v153 = *(float *)((char *)v69->f32 + v152);
                    v154 = *(float *)((char *)v69->f32 + (v152 | 4));
                    v155 = *(float *)((char *)v69->f32 + (v152 | 0x20));
                    v156 = *(float *)((char *)v69->f32 + (v152 | 0x24));
                    v157 = (float)((float)(v153 + v154) + v155) + v156;
                    v158 = (float)((float)(v153 + v154) - v155) - v156;
                    v159 = v153 - v154;
                    v160 = v146 | v149;
                    v453[0].f32[v160] = v157 * 0.25;
                    *(float *)((char *)v453[0].f32 + ((4 * v160) | 8)) = v158 * 0.25;
                    *(float *)((char *)v453[0].f32 + ((4 * v160) | 0x40)) = (float)((float)(v159 + v155) - v156) * 0.25;
                    *(float *)((char *)v453[0].f32 + ((4 * v160) | 0x48)) = (float)((float)(v159 - v155) + v156) * 0.25;
                    v146 = 1;
                    v150 = 0;
                  }
                  while ((v151 & 1) != 0);
                  v145 = 0;
                  v144 = 1;
                }
                while ((v147 & 1) != 0);
                for (j = 0; j != 8; j += 2)
                  v69[j] = v453[j];
                v162 = v69->f32[1];
                v163 = v69[2].f32[0];
                v164 = v69[2].f32[1];
                v165 = v69->f32[0] + v162;
                v166 = v69->f32[0] - v162;
                v167 = (float)((float)(v166 + v163) - v164) * 0.25;
                v69->f32[0] = (float)((float)(v165 + v163) + v164) * 0.25;
                v69->f32[1] = (float)((float)(v165 - v163) - v164) * 0.25;
                v168 = (float)((float)(v166 - v163) + v164) * 0.25;
LABEL_148:
                v69[2].f32[0] = v167;
                v69[2].f32[1] = v168;
                goto LABEL_186;
              case 3:
                v70 = v59;
                v190 = 0;
                v424 = (uint64_t)v65 + v417 * (uint64_t)(int)v66;
                v191 = 1;
                do
                {
                  v192 = 0;
                  v429 = v191;
                  v193 = &v68->i8[4 * v190 * v433];
                  v194 = v424 + 32 * v190;
                  v195 = 1;
                  do
                  {
                    v196 = v195;
                    v197 = v453;
                    sub_2368125DC(v435, (float32x4_t *)&v193[16 * v192], (int32x4_t *)v453, (uint64_t)v434);
                    v198 = 0;
                    v199 = (_DWORD *)(v194 + 4 * v192);
                    do
                    {
                      v200 = 0;
                      v201 = v199;
                      do
                      {
                        *v201 = v197->i32[v200];
                        v201 += 2;
                        ++v200;
                      }
                      while (v200 != 4);
                      ++v198;
                      v199 += 16;
                      ++v197;
                    }
                    while (v198 != 4);
                    v195 = 0;
                    v192 = 1;
                  }
                  while ((v196 & 1) != 0);
                  v191 = 0;
                  v190 = 1;
                }
                while ((v429 & 1) != 0);
                v202 = v69->f32[0];
                v203 = v69->f32[1];
                v204 = v69[2].f32[0];
                v205 = v69[2].f32[1];
                v206 = v69->f32[0] + v203;
                v69->f32[0] = (float)((float)(v206 + v204) + v205) * 0.25;
                v69->f32[1] = (float)((float)(v206 - v204) - v205) * 0.25;
                v207 = v202 - v203;
                v69[2].f32[0] = (float)((float)(v207 + v204) - v205) * 0.25;
                v69[2].f32[1] = (float)((float)(v207 - v204) + v205) * 0.25;
                goto LABEL_132;
              case 4:
                v70 = v59;
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F844, (uint64_t)v444, (uint64_t)v453, 16, v416);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DF0D8(v453, &v445);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F844, (uint64_t)v453, (uint64_t)&v445, 16, v416);
                goto LABEL_167;
              case 5:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v444, (uint64_t)v453, 32, v401);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 32, 32);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v453, (uint64_t)&v445, 32, v401);
                goto LABEL_185;
              case 6:
                v70 = v59;
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F844, (uint64_t)v444, (uint64_t)v453, 8, v414);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DF314(v453, &v445);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F91C, (uint64_t)v453, (uint64_t)&v445, 16, v414);
                goto LABEL_167;
              case 7:
                v70 = v59;
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F91C, (uint64_t)v444, (uint64_t)v453, 16, v414);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 8;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DF22C(v453, &v445);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 8;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F844, (uint64_t)v453, (uint64_t)&v445, 8, v414);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DF314(v453, &v445);
                goto LABEL_167;
              case 8:
                v70 = v59;
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v444, (uint64_t)v453, 8, v416);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2368128D4(v453, &v445);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F91C, (uint64_t)v453, (uint64_t)&v445, 32, v416);
                goto LABEL_167;
              case 9:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F91C, (uint64_t)v444, (uint64_t)v453, 32, v416);
                v121 = 0;
                v122 = 1;
                do
                {
                  v123 = v122;
                  v124 = (int32x4_t *)&v434[2 * v121];
                  v125 = -4;
                  v126 = (uint64_t)&v428[v121 + 4] + v417 * (uint64_t)(int)v66;
                  do
                  {
                    v127 = v124[8];
                    v128 = v124[16];
                    v129 = v124[24];
                    v130 = (float32x2x2_t)vzip1q_s32(*v124, v128);
                    v131 = vzip1q_s32(v127, v129);
                    v132 = (float32x2x2_t)vzip2q_s32(*v124, v128);
                    v133 = vzip2q_s32(v127, v129);
                    v134 = (float *)(v126 - 64);
                    vst2_f32(v134, v130);
                    vst2_f32((float *)v126, v132);
                    *(int32x4_t *)(v126 - 32) = vzip2q_s32((int32x4_t)v130, v131);
                    *(int32x4_t *)(v126 + 32) = vzip2q_s32((int32x4_t)v132, v133);
                    v125 += 4;
                    ++v124;
                    v126 += 128;
                  }
                  while (v125 < 0x1C);
                  v122 = 0;
                  v121 = 1;
                }
                while ((v123 & 1) != 0);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 8;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v453, (uint64_t)&v445, 8, v416);
                v453[0].i64[0] = 8;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)v69;
                sub_2368128D4(v453, &v445);
                goto LABEL_185;
              case 10:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v444, (uint64_t)v453, 16, v410);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 32, 16);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F844, (uint64_t)v453, (uint64_t)&v445, 32, v410);
                goto LABEL_185;
              case 11:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F844, (uint64_t)v444, (uint64_t)v453, 32, v410);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 16, 32);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 16;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v453, (uint64_t)&v445, 16, v410);
                v453[0].i64[0] = 16;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 32, 16);
                goto LABEL_185;
              case 12:
                v70 = v59;
                v112 = 0;
                v113 = (uint64_t)v65 + v417 * (uint64_t)(int)v66;
                v114 = 1;
                do
                {
                  v115 = v114;
                  v445.i64[0] = v435;
                  v445.i64[1] = (uint64_t)v68->i64 + 4 * v112 * v433;
                  sub_23683F7A0((uint64_t)&v445, v453, v434);
                  v116 = 0;
                  v117 = (float32x4_t *)(v113 + 32 * v112);
                  do
                  {
                    v118 = v453[v116 + 1];
                    *v117 = v453[v116];
                    v117[1] = v118;
                    v117 += 4;
                    v116 += 2;
                  }
                  while (v116 != 8);
                  v114 = 0;
                  v112 = 1;
                }
                while ((v115 & 1) != 0);
                v119 = v69->f32[0];
                v120 = v69[2].f32[0];
                v69->f32[0] = (float)(v69->f32[0] + v120) * 0.5;
                v69[2].f32[0] = (float)(v119 - v120) * 0.5;
LABEL_132:
                v65 = v428;
                goto LABEL_168;
              case 13:
                v425 = v59;
                v261 = 0;
                v430 = (uint64_t)v65 + v417 * (uint64_t)(int)v66;
                v262 = 1;
                do
                {
                  v263 = v262;
                  v445.i64[0] = 4;
                  v445.i64[1] = (uint64_t)v453;
                  sub_2367E0CD4(v435, &v68[v261], &v445, v423);
                  v445.i64[0] = 4;
                  v445.i64[1] = (uint64_t)v453;
                  v444[0].i64[0] = 8;
                  v444[0].i64[1] = (uint64_t)&v428[49152];
                  sub_2367DFEEC(&v445, v444);
                  v445.i64[0] = 8;
                  v445.i64[1] = (uint64_t)&v428[49152];
                  v444[0].i64[0] = 8;
                  v444[0].i64[1] = (uint64_t)v453;
                  sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F6BC, (uint64_t)&v445, (uint64_t)v444, 8, (uint64_t)v423);
                  v264 = 0;
                  v265 = (float32x4_t *)(v430 + 32 * v261);
                  do
                  {
                    v266 = v453[v264 + 1];
                    *v265 = v453[v264];
                    v265[1] = v266;
                    v265 += 4;
                    v264 += 2;
                  }
                  while (v264 != 8);
                  v262 = 0;
                  v261 = 1;
                }
                while ((v263 & 1) != 0);
                v267 = v69->f32[0];
                v268 = v69[2].f32[0];
                v69->f32[0] = (float)(v69->f32[0] + v268) * 0.5;
                v69[2].f32[0] = (float)(v267 - v268) * 0.5;
                v65 = v428;
                v64 = v432;
                v59 = v425;
                break;
              case 14:
                v92 = 0;
                v451 = 0u;
                v452 = 0u;
                v449 = 0u;
                v450 = 0u;
                v447 = 0u;
                v448 = 0u;
                v93 = (float32x4_t *)(v67 + v56);
                v445 = 0u;
                v446 = 0u;
                do
                {
                  *(float32x4_t *)((char *)&v445 + v92) = *v93;
                  v92 += 16;
                  v93 = (float32x4_t *)((char *)v93 + v36);
                }
                while (v92 != 64);
                v94 = 0;
                v95 = (float32x4_t *)&unk_2369227D0;
                do
                {
                  v96 = 0;
                  v97 = 0uLL;
                  do
                  {
                    v97 = vmlaq_n_f32(v97, v95[v96 * 4], v445.f32[v96]);
                    ++v96;
                  }
                  while (v96 != 16);
                  v444[v94] = v97;
                  ++v95;
                  _CF = v94++ >= 3;
                }
                while (!_CF);
                v98 = 0;
                v99 = v444;
                v100 = &v65->i32[(int)v64 * (uint64_t)(int)v66];
                do
                {
                  v101 = 0;
                  v102 = v100;
                  do
                  {
                    *v102 = v99->i32[v101];
                    v102 += 2;
                    ++v101;
                  }
                  while (v101 != 4);
                  ++v98;
                  v100 += 16;
                  ++v99;
                }
                while (v98 != 4);
                v70 = v59;
                v103 = &v445;
                sub_2368125DC(v435, v68 + 1, (int32x4_t *)&v445, (uint64_t)v453);
                v104 = 0;
                v105 = v417 * (uint64_t)(int)v66;
                v106 = &v415[v105];
                do
                {
                  v107 = 0;
                  v108 = v106;
                  do
                  {
                    *(_DWORD *)v108 = v103->i32[v107];
                    v108 += 8;
                    ++v107;
                  }
                  while (v107 != 8);
                  ++v104;
                  v106 += 64;
                  ++v103;
                }
                while (v104 != 4);
                v454.i64[0] = v435;
                v454.i64[1] = (uint64_t)v68->i64 + 4 * v433;
                sub_23683F7A0((uint64_t)&v454, &v445, v453);
                v109 = 0;
                v110 = (uint64_t)v409 + v105;
                do
                {
                  v111 = *(__int128 *)((char *)&v445 + v109 + 16);
                  *(float32x4_t *)v110 = *(float32x4_t *)((char *)&v445 + v109);
                  *(_OWORD *)(v110 + 16) = v111;
                  v110 += 64;
                  v109 += 32;
                }
                while (v109 != 128);
                goto LABEL_166;
              case 15:
                v169 = 0;
                v451 = 0u;
                v452 = 0u;
                v449 = 0u;
                v450 = 0u;
                v447 = 0u;
                v448 = 0u;
                v170 = (int32x4_t *)(v67 + v408);
                v445 = 0u;
                v446 = 0u;
                do
                {
                  v171 = (int8x16_t)vrev64q_s32(*v170);
                  *(int8x16_t *)((char *)&v445 + v169) = vextq_s8(v171, v171, 8uLL);
                  v169 += 16;
                  v170 = (int32x4_t *)((char *)v170 + v36);
                }
                while (v169 != 64);
                v172 = 0;
                v173 = (float32x4_t *)&unk_2369227D0;
                do
                {
                  v174 = 0;
                  v175 = 0uLL;
                  do
                  {
                    v175 = vmlaq_n_f32(v175, v173[v174 * 4], v445.f32[v174]);
                    ++v174;
                  }
                  while (v174 != 16);
                  v444[v172] = v175;
                  ++v173;
                  _CF = v172++ >= 3;
                }
                while (!_CF);
                v176 = 0;
                v177 = v444;
                v178 = &v65->i32[(int)v64 * (uint64_t)(int)v66];
                do
                {
                  v179 = 0;
                  v180 = v178;
                  do
                  {
                    *v180 = v177->i32[v179];
                    v180 += 2;
                    ++v179;
                  }
                  while (v179 != 4);
                  ++v176;
                  v178 += 16;
                  ++v177;
                }
                while (v176 != 4);
                v70 = v59;
                v181 = &v445;
                sub_2368125DC(v435, v68, (int32x4_t *)&v445, (uint64_t)v453);
                v182 = 0;
                v183 = v417 * (uint64_t)(int)v66;
                v184 = &v415[v183];
                do
                {
                  v185 = 0;
                  v186 = v184;
                  do
                  {
                    *(_DWORD *)v186 = v181->i32[v185];
                    v186 += 8;
                    ++v185;
                  }
                  while (v185 != 8);
                  ++v182;
                  v184 += 64;
                  ++v181;
                }
                while (v182 != 4);
                v454.i64[0] = v435;
                v454.i64[1] = (uint64_t)v68->i64 + 4 * v433;
                sub_23683F7A0((uint64_t)&v454, &v445, v453);
                v187 = 0;
                v188 = (uint64_t)v409 + v183;
                do
                {
                  v189 = *(__int128 *)((char *)&v445 + v187 + 16);
                  *(float32x4_t *)v188 = *(float32x4_t *)((char *)&v445 + v187);
                  *(_OWORD *)(v188 + 16) = v189;
                  v188 += 64;
                  v187 += 32;
                }
                while (v187 != 128);
                goto LABEL_166;
              case 16:
                v451 = 0u;
                v452 = 0u;
                v449 = 0u;
                v450 = 0u;
                v447 = 0u;
                v448 = 0u;
                v71 = (float32x4_t *)(v67 + v407);
                v72 = 48;
                v445 = 0u;
                v446 = 0u;
                do
                {
                  *(float32x4_t *)((char *)&v445 + v72) = *v71;
                  v72 -= 16;
                  v71 = (float32x4_t *)((char *)v71 + v36);
                }
                while (v72 != -16);
                v73 = 0;
                v74 = (float32x4_t *)&unk_2369227D0;
                do
                {
                  v75 = 0;
                  v76 = 0uLL;
                  do
                  {
                    v76 = vmlaq_n_f32(v76, v74[v75 * 4], v445.f32[v75]);
                    ++v75;
                  }
                  while (v75 != 16);
                  v444[v73] = v76;
                  ++v74;
                  _CF = v73++ >= 3;
                }
                while (!_CF);
                v78 = 0;
                v79 = v444;
                v80 = &v65->i32[(int)v64 * (uint64_t)(int)v66];
                do
                {
                  v81 = 0;
                  v82 = v80;
                  do
                  {
                    *v82 = v79->i32[v81];
                    v82 += 2;
                    ++v81;
                  }
                  while (v81 != 4);
                  ++v78;
                  v80 += 16;
                  ++v79;
                }
                while (v78 != 4);
                v70 = v59;
                v83 = &v445;
                sub_2368125DC(v435, (float32x4_t *)((char *)v68 + 4 * v433 + 16), (int32x4_t *)&v445, (uint64_t)v453);
                v84 = 0;
                v85 = v417 * (uint64_t)(int)v66;
                v86 = &v415[v85];
                do
                {
                  v87 = 0;
                  v88 = v86;
                  do
                  {
                    *(_DWORD *)v88 = v83->i32[v87];
                    v88 += 8;
                    ++v87;
                  }
                  while (v87 != 8);
                  ++v84;
                  v86 += 64;
                  ++v83;
                }
                while (v84 != 4);
                v454.i64[0] = v435;
                v454.i64[1] = (uint64_t)v68;
                sub_23683F7A0((uint64_t)&v454, &v445, v453);
                v89 = 0;
                v90 = (uint64_t)v409 + v85;
                do
                {
                  v91 = *(__int128 *)((char *)&v445 + v89 + 16);
                  *(float32x4_t *)v90 = *(float32x4_t *)((char *)&v445 + v89);
                  *(_OWORD *)(v90 + 16) = v91;
                  v90 += 64;
                  v89 += 32;
                }
                while (v89 != 128);
                goto LABEL_166;
              case 17:
                v451 = 0u;
                v452 = 0u;
                v449 = 0u;
                v450 = 0u;
                v447 = 0u;
                v448 = 0u;
                v237 = (int32x4_t *)(v67 + v406);
                v238 = 48;
                v445 = 0u;
                v446 = 0u;
                do
                {
                  v239 = (int8x16_t)vrev64q_s32(*v237);
                  *(int8x16_t *)((char *)&v445 + v238) = vextq_s8(v239, v239, 8uLL);
                  v238 -= 16;
                  v237 = (int32x4_t *)((char *)v237 + v36);
                }
                while (v238 != -16);
                v240 = 0;
                v241 = (float32x4_t *)&unk_2369227D0;
                do
                {
                  v242 = 0;
                  v243 = 0uLL;
                  do
                  {
                    v243 = vmlaq_n_f32(v243, v241[v242 * 4], v445.f32[v242]);
                    ++v242;
                  }
                  while (v242 != 16);
                  v444[v240] = v243;
                  ++v241;
                  _CF = v240++ >= 3;
                }
                while (!_CF);
                v244 = 0;
                v245 = v444;
                v246 = &v65->i32[(int)v64 * (uint64_t)(int)v66];
                do
                {
                  v247 = 0;
                  v248 = v246;
                  do
                  {
                    *v248 = v245->i32[v247];
                    v248 += 2;
                    ++v247;
                  }
                  while (v247 != 4);
                  ++v244;
                  v246 += 16;
                  ++v245;
                }
                while (v244 != 4);
                v70 = v59;
                v249 = &v445;
                sub_2368125DC(v435, (float32x4_t *)((char *)v68 + 4 * v433), (int32x4_t *)&v445, (uint64_t)v453);
                v250 = 0;
                v251 = v417 * (uint64_t)(int)v66;
                v252 = &v415[v251];
                do
                {
                  v253 = 0;
                  v254 = v252;
                  do
                  {
                    *(_DWORD *)v254 = v249->i32[v253];
                    v254 += 8;
                    ++v253;
                  }
                  while (v253 != 8);
                  ++v250;
                  v252 += 64;
                  ++v249;
                }
                while (v250 != 4);
                v454.i64[0] = v435;
                v454.i64[1] = (uint64_t)v68;
                sub_23683F7A0((uint64_t)&v454, &v445, v453);
                v255 = 0;
                v256 = (uint64_t)v409 + v251;
                do
                {
                  v257 = *(__int128 *)((char *)&v445 + v255 + 16);
                  *(float32x4_t *)v256 = *(float32x4_t *)((char *)&v445 + v255);
                  *(_OWORD *)(v256 + 16) = v257;
                  v256 += 64;
                  v255 += 32;
                }
                while (v255 != 128);
LABEL_166:
                v258 = v69->f32[1];
                v259 = v69->f32[0] * 0.25;
                v260 = v69[2].f32[0];
                v69->f32[0] = (float)((float)(v259 + v258) + (float)(v260 * 2.0)) * 0.25;
                v69->f32[1] = (float)(v259 - v258) * 0.5;
                v69[2].f32[0] = (float)((float)(v259 + v258) + (float)(v260 * -2.0)) * 0.25;
LABEL_167:
                v65 = v428;
LABEL_168:
                v64 = v432;
                v59 = v70;
                break;
              case 18:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FB88, (uint64_t)v444, (uint64_t)v453, 64, v402);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 64, 64);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FB88, (uint64_t)v453, (uint64_t)&v445, 64, v402);
                goto LABEL_185;
              case 19:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FB88, (uint64_t)v444, (uint64_t)v453, 32, v411);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 64, 32);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v453, (uint64_t)&v445, 64, v411);
                goto LABEL_185;
              case 20:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683F9E0, (uint64_t)v444, (uint64_t)v453, 64, v411);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 32, 64);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 32;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FB88, (uint64_t)v453, (uint64_t)&v445, 32, v411);
                v453[0].i64[0] = 32;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 64, 32);
                goto LABEL_185;
              case 21:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FC60, (uint64_t)v444, (uint64_t)v453, 128, v403);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 128, 128);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FC60, (uint64_t)v453, (uint64_t)&v445, 128, v403);
                goto LABEL_185;
              case 22:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FC60, (uint64_t)v444, (uint64_t)v453, 64, v412);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 128, 64);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FB88, (uint64_t)v453, (uint64_t)&v445, 128, v412);
                goto LABEL_185;
              case 23:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FB88, (uint64_t)v444, (uint64_t)v453, 128, v412);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 64, 128);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 64;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FC60, (uint64_t)v453, (uint64_t)&v445, 64, v412);
                v453[0].i64[0] = 64;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 128, 64);
                goto LABEL_185;
              case 24:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 256;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FD24, (uint64_t)v444, (uint64_t)v453, 256, v404);
                v453[0].i64[0] = 256;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 256;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 256, 256);
                v453[0].i64[0] = 256;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 256;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FD24, (uint64_t)v453, (uint64_t)&v445, 256, v404);
                goto LABEL_185;
              case 25:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)v65->i64 + 4 * (int)v64 * (uint64_t)(int)v66;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FD24, (uint64_t)v444, (uint64_t)v453, 128, v413);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 256;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 256, 128);
                v453[0].i64[0] = 256;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 256;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FC60, (uint64_t)v453, (uint64_t)&v445, 256, v413);
                goto LABEL_185;
              case 26:
                v444[0].i64[0] = v435;
                v444[0].i64[1] = v67 + 4 * v419;
                v453[0].i64[0] = 256;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FC60, (uint64_t)v444, (uint64_t)v453, 256, v413);
                v453[0].i64[0] = 256;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 128, 256);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)v69;
                v445.i64[0] = 128;
                v445.i64[1] = (uint64_t)&v428[49152];
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FD24, (uint64_t)v453, (uint64_t)&v445, 128, v413);
                v453[0].i64[0] = 128;
                v453[0].i64[1] = (uint64_t)&v428[49152];
                v445.i64[0] = 256;
                v445.i64[1] = (uint64_t)v69;
                sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23683FAA4, (uint64_t)v453, (uint64_t)&v445, 256, 128);
LABEL_185:
                v65 = v428;
LABEL_186:
                v64 = v432;
                break;
              default:
                break;
            }
            ++v59;
          }
          while (v59 != 3);
          v269 = v438;
          v270 = (float32x4_t *)((char *)v65 + 4 * v64);
          sub_23683E914();
          v274 = v269;
          v444[0] = (float32x4_t)xmmword_2368AF910;
          v275 = a2;
          if (*(int *)(a2 + 4592) > 5)
          {
            v444[0] = (float32x4_t)xmmword_2368AF900;
            v279 = 3 * v269;
            v277 = v418;
            goto LABEL_298;
          }
          v276 = 0;
          v277 = 0;
          LODWORD(v455) = *(_DWORD *)(a2 + 5264);
          HIDWORD(v455) = 1065353216;
          v456 = *(_DWORD *)(a2 + 5268);
          v278 = (1 << v269) & 0x3F00E;
          v279 = 3 * v269;
          v280 = (float)((float)v437 * 0.003) * (float)v436;
          v281 = 0.08;
          if (v280 <= 0.08)
            v281 = (float)((float)v437 * 0.003) * (float)v436;
          if (v280 >= 0.0)
            *(float *)v272.i32 = v281;
          else
            *(float *)v272.i32 = 0.0;
          v282 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v272.i8, 0);
          v283 = 8 * v437;
          v284 = 4 * v436;
          v285 = 4 * v437;
          v286 = v395 * (unint64_t)v396;
          *(float *)v272.i32 = (float)v286;
          v273 = (double)v418;
          v287 = 2;
          if ((_DWORD)v274 != 5)
            v287 = 3;
          if ((_DWORD)v274 == 4)
            v287 = 0;
          if ((v274 & 0xFE) == 0xA)
            v288 = 1;
          else
            v288 = v287;
          v431 = v288;
          v289 = v286 >> 1;
          v290 = vsubq_f32((float32x4_t)xmmword_2368AF910, v282);
          v291 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v392, vcvtq_f64_f32(*(float32x2_t *)v290.f32)), (int32x4_t)vcgtq_f64(v392, vcvt_hight_f64_f32(v290))), v391, (int8x16_t)v290);
          v292 = 32 * v437;
          do
          {
            v454 = (float32x4_t)xmmword_2368AF910;
            v293 = v418;
            if (v278)
            {
              if (v276)
                goto LABEL_204;
LABEL_296:
              v444[0] = v454;
              goto LABEL_204;
            }
            v294 = dword_236922760[v276];
            v295 = *(_QWORD *)(a2 + 1016);
            v296 = *(_QWORD *)(v295 + 8 * (v279 + v294) + 72);
            if ((v436 | v437) >= 2)
              v454 = (float32x4_t)v291;
            v297 = *((float *)&v455 + v294);
            v298 = *(_QWORD *)(v295 + 40);
            v299 = *(float *)(a2 + 996);
            v453[0] = 0uLL;
            v445 = 0uLL;
            if (v436)
            {
              v300 = 0;
              v301 = &v428->i8[4 * (int)v432 * (uint64_t)(int)v294];
              v302 = v436;
              v303 = v298 + 4 * v296;
              v304 = v299 * (float)v418;
              v305 = 0.0;
              v306 = 0.0;
              v307 = 0.0;
              do
              {
                v308 = 0;
                do
                {
                  if (v300 >= v302 || v308 >= v437)
                  {
                    v309 = (2 * (v300 >= v284)) | (v308 >= v285);
                    v310 = *(float *)&v301[4 * v308] * (float)((float)(v304 * *(float *)(v303 + 4 * v308)) * v297);
                    v311 = fabsf(v310);
                    v312 = rintf(v310);
                    if (v311 >= *(float *)((unint64_t)&v454 | (4 * v309)))
                      v313 = v312;
                    else
                      v313 = 0.0;
                    v314 = vabds_f32(v310, v313);
                    if (!v276 && v313 == 0.0 && v445.f32[v309] < v314)
                      v445.f32[v309] = v314;
                    v306 = v306 + v314;
                    v315 = fabsf(v313);
                    v305 = v305 + v315;
                    if (v313 != 0.0)
                    {
                      if ((v453[0].f32[v309] = v315 + v453[0].f32[v309], v300 >= 7 * v436) && v308 >= 7 * v437
                        || (v300 != 8 * v436 - 1 ? (_ZF = v283 - 1 == v308) : (_ZF = 1),
                            _ZF ? (v317 = 0) : (v317 = 1),
                            v308 >= v285 && (v317 & 1) == 0 && v300 >= v284))
                      {
                        v307 = v307 + v311;
                      }
                    }
                    v302 = v436;
                  }
                  ++v308;
                }
                while (v283 != v308);
                ++v300;
                v303 += v292;
                v301 += v292;
              }
              while (v300 != 8 * v436);
            }
            else
            {
              v307 = 0.0;
              v306 = 0.0;
              v305 = 0.0;
            }
            v318 = v418;
            if (!v276)
            {
              v318 = v418;
              if ((float)(v305 * 8.0) < *(float *)v272.i32)
              {
                v319 = 1;
                while (v453[0].f32[v319] != 0.0 || v445.f32[v319] <= 0.46)
                {
                  if (++v319 == 4)
                  {
                    v318 = v418;
                    goto LABEL_248;
                  }
                }
                v318 = v418 + 1;
LABEL_248:
                if (v453[0].f32[3] == 0.0 && v445.f32[3] > 0.46)
                {
                  v320 = v445.f32[3] * 0.9999 * (double)v318 / v273;
                  v454.f32[3] = v320;
                  goto LABEL_263;
                }
                if (v453[0].f32[1] == 0.0)
                {
                  v321 = v445.f32[1];
                  if (v445.f32[1] > 0.46)
                  {
                    v322 = v445.f32[2];
LABEL_257:
                    if (v321 >= v322)
                      v322 = v321;
                    v323 = v322 * 0.9999 * (double)v318 / v273;
                    v454.f32[1] = v323;
                    v454.f32[2] = v323;
                    goto LABEL_263;
                  }
                }
                if (v453[0].f32[2] == 0.0)
                {
                  v322 = v445.f32[2];
                  if (v445.f32[2] > 0.46)
                  {
                    v321 = v445.f32[1];
                    goto LABEL_257;
                  }
                }
                if (v453[0].f32[0] == 0.0 && v445.f32[0] > 0.46)
                {
                  v324 = v445.f32[0] * 0.9999 * (double)v318 / v273;
                  v454.f32[0] = v324;
                }
              }
            }
LABEL_263:
            v325 = (float)((float)(v453[0].f32[0] + v453[0].f32[1]) + v453[0].f32[2]) + v453[0].f32[3];
            v326 = v307 * flt_236922690[v294];
            if (v326 >= (float)(v325 + 1.0))
            {
              if ((int)(float)((float)(v326 / (float)(v325 + 1.0)) + (float)v318) >= 255)
                v318 = 255;
              else
                v318 = (int)(float)((float)(v326 / (float)(v325 + 1.0)) + (float)v318);
            }
            if ((_DWORD)v274 || v325 >= 11.0)
            {
              if (v274 >= 4)
              {
                v327 = v305 * 2.29427083;
                v328 = v306 * 2.29427083;
                v329 = v328;
                v330 = dbl_236922700[3 * v431 + v294] * v327
                     + dbl_2369226A0[3 * v431 + v294] * (double)v437 * (double)v436 * 8.0 * 8.0;
                if (v330 < v329)
                {
                  v331 = (int)(v329 / v330);
                  if (v331 >= 2)
                    v331 = 2;
                  v332 = v318 + (v331 & ~(v331 >> 31));
                  if (v332 >= 255)
                    v318 = 255;
                  else
                    v318 = v332;
                }
              }
            }
            else if (v318 < 255)
            {
              ++v318;
            }
            else
            {
              v318 = 255;
            }
            v333 = 1;
            v334 = (int)(v289 + (int)v453[0].f32[0]) / (int)v286;
            do
            {
              if ((int)(v289 + (int)v453[0].f32[v333]) / (int)v286 < v334)
                v334 = (int)(v289 + (int)v453[0].f32[v333]) / (int)v286;
              ++v333;
            }
            while (v333 != 4);
            if (v318 >= 0)
              v335 = v318;
            else
              v335 = v318 + 1;
            if (v334 >= 15)
              v334 = 15;
            if (!v276)
            {
              for (k = 1; k != 4; ++k)
              {
                v337 = v454.f32[k] + (double)v334 * 0.01;
                v454.f32[k] = v337;
              }
            }
            v293 = v335 >> 1;
            v338 = v318 - v334;
            if (v293 <= v338)
              v293 = v338;
            if (v293 <= 4)
              v293 = 4;
            v64 = v432;
            if (!v276)
              goto LABEL_296;
LABEL_204:
            if (v293 > v277)
              v277 = v293;
            ++v276;
          }
          while (v276 != 3);
          v275 = a2;
LABEL_298:
          v339 = (__n128 *)(v422 + 4 * v64);
          v271.n128_u32[0] = 1.0;
          sub_23683E7C8(*(_QWORD *)(a2 + 1016), 1, v274, v437, v436, v444, v270, v277, *(float *)(v275 + 996), v271, v272, v273, v339);
          v343 = a2;
          v344 = *(float *)(a2 + 992) / (float)v277;
          if (v64)
          {
            v345 = 0;
            v346 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 1016) + 32)
                                 + 4 * *(_QWORD *)(*(_QWORD *)(a2 + 1016) + 8 * v279 + 80));
            v347 = v428;
            v348.i64[0] = 0x8000000080000000;
            v348.i64[1] = 0x8000000080000000;
            do
            {
              v349 = *(int32x4_t *)v339++;
              v350 = vcvtq_f32_s32(v349);
              __asm { FMOV            V4.4S, #1.125 }
              v352 = (int8x16_t)vcgtq_f32(_Q4, (float32x4_t)(*(_OWORD *)&v350 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
              v353 = *v346++;
              *v270++ = vmulq_n_f32(vmulq_f32(v353, (float32x4_t)vorrq_s8(vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v350, v348), (int8x16_t)vdupq_n_s32(0x3F6E10E8u)), vandq_s8(v352, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v350 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v350, (float32x4_t)vdupq_n_s32(0xBE147AE1), vrecpeq_f32(v350)), v352))), v344);
              v345 += 4;
            }
            while (v345 < v432);
            v354 = 0;
            v355 = v436;
            v356 = v436 * (unint64_t)v437;
            v357 = v356 << 9;
            v358 = v356 << 8;
            v359 = v428;
            v342 = *(double *)v394.i64;
            do
            {
              v340 = *(__n128 *)((char *)v359 + v358);
              v341 = (int8x16_t)vmlaq_f32(*(float32x4_t *)((char *)v359 + v357), (float32x4_t)v340, v393);
              *v359 = vmlaq_f32(*v359, (float32x4_t)v340, v394);
              *(int8x16_t *)((char *)v359 + v357) = v341;
              v354 += 4;
              ++v359;
            }
            while (v354 < v432);
          }
          else
          {
            v347 = v428;
            v355 = v436;
          }
          v360 = 0;
          v361 = 0;
          v445.i64[0] = 0x200000000;
          v362 = v438;
          do
          {
            v363 = v445.i32[v361];
            v364 = v360;
            v365 = 5268;
            if (!(_DWORD)v363)
              v365 = 5264;
            v340.n128_u32[0] = *(_DWORD *)(v343 + v365);
            v453[0] = (float32x4_t)xmmword_2368AFB40;
            sub_23683E7C8(*(_QWORD *)(v343 + 1016), v363, v362, v437, v355, v453, (float32x4_t *)((char *)v347 + 4 * (int)v432 * (uint64_t)(int)v363), v277, *(float *)(v343 + 996), v340, v341, v342, (__n128 *)(v422 + 4 * (int)v432 * (uint64_t)(int)v363));
            sub_23683E914();
            v360 = 1;
            v361 = 1;
            v343 = a2;
            v347 = v428;
          }
          while ((v364 & 1) == 0);
          v366 = 0;
          *(_DWORD *)(v399 + 4 * v426) = v277;
          v367 = v442;
          v35 = 16 * v435;
          do
          {
            sub_2368AE774(v420, (char *)(v422 + 4 * v366 * v432), (unsigned int *)&v438, (void **)v442 + 11 * v366);
            v368 = v367;
            for (m = v421; m; --m)
              *v368++ += 4 * v432;
            ++v366;
            v367 = (_OWORD *)((char *)v367 + 88);
          }
          while (v366 != 3);
LABEL_313:
          v54 = v426 + 1;
          v406 += 32;
          v407 += 32;
          v408 += 32;
          v56 += 32;
        }
        while (v426 + 1 != v398);
LABEL_314:
        v50 = v386 + 1;
        v52 = v385 + 8;
        v387 += 256;
        v388 += 256;
        v389 += 256;
        v390 += 256;
      }
      while (v386 + 1 != v383);
LABEL_315:
      v33 = v380 + 1;
      v27 = (_QWORD *)a2;
    }
    while (v380 + 1 != v378);
  }
  sub_2367D7A7C(v439);
  sub_2367D7A3C(v440);
}

void sub_236842A28(_Unwind_Exception *a1)
{
  sub_2367D7A3C((uint64_t *)&STACK[0x2A8]);
  _Unwind_Resume(a1);
}

void sub_236842A60(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t i;
  void **v7;
  uint64_t j;
  void *v9;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  _DWORD *v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t k;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _QWORD *v85;
  char *v86;
  _BYTE *v87;
  unint64_t v88;
  char *v89;
  int v90;
  size_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  BOOL v103;
  size_t v104;
  unint64_t v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 v110;
  unsigned __int8 *v111;
  unsigned __int8 v112;
  unsigned int v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  void *__p[3];
  void *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  void *v123;
  _BYTE *v124;
  void *v125[9];
  void *v126;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  __int128 v132;

  if (*(_QWORD *)(a1 + 56))
  {
    v5 = 0;
    for (i = 0; i != 3; ++i)
    {
      v7 = &v125[v5 / 8];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      sub_2367CBEFC(&v125[v5 / 8], *(const void **)(a4 + v5), *(_QWORD *)(a4 + v5 + 8), (uint64_t)(*(_QWORD *)(a4 + v5 + 8) - *(_QWORD *)(a4 + v5)) >> 2);
      v5 += 24;
    }
    v126 = 0;
    v127 = 0;
    v128 = 0;
    sub_2368220C4(&v126, *(const void **)(a4 + 72), *(_QWORD *)(a4 + 80), (uint64_t)(*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 2);
    v129 = 0;
    v130 = 0;
    v131 = 0;
    sub_2367C9F60(&v129, *(const void **)(a4 + 96), *(_QWORD *)(a4 + 104), *(_QWORD *)(a4 + 104) - *(_QWORD *)(a4 + 96));
    v132 = *(_OWORD *)(a4 + 120);
    sub_2367C9C54(&v129, byte_236923030, &byte_236923030[39], 0x27uLL);
    v132 = xmmword_2368AF920;
    if (v129)
    {
      v130 = v129;
      operator delete(v129);
    }
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    for (j = 0; j != -9; j -= 3)
    {
      v9 = v125[j + 6];
      if (v9)
      {
        v125[j + 7] = v9;
        operator delete(v9);
      }
    }
  }
  else if (*(int *)(a1 + 48) <= 6)
  {
    v12 = *a2;
    v13 = a2[1];
    v14 = v13 * (unint64_t)*a2;
    v15 = vcvts_n_u32_f32(*(float *)a1, 0xAuLL);
    if (v14 >= v15)
    {
      v115 = v15;
      v17 = (char *)operator new();
      bzero(v17, 0x7068uLL);
      v18 = a2[1];
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = *a2;
        v22 = *((_QWORD *)a2 + 2);
        v21 = (int *)*((_QWORD *)a2 + 3);
        v24 = *(_QWORD *)(a3 + 16);
        v23 = *(unsigned __int8 **)(a3 + 24);
        do
        {
          v25 = v23;
          v26 = v21;
          v27 = v20;
          if ((_DWORD)v20)
          {
            do
            {
              v28 = *v25++;
              v29 = byte_236923064[(unint64_t)v28 >> 1];
              v30 = *v26++;
              v31 = &v17[8 * v30];
              v32 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *(_QWORD *)v31 = v32 + 1;
              ++*(_QWORD *)&v31[2048 * v29 + 2048];
              ++*(_QWORD *)&v17[8 * v29 + 28672];
              --v27;
            }
            while (v27);
          }
          ++v19;
          v21 = (int *)((char *)v21 + v22);
          v23 += v24;
        }
        while (v19 != v18);
      }
      v33 = 0;
      v34 = 0;
      v35 = v14 >= vcvts_n_u32_f32(*(float *)a1, 0xDuLL);
      v36 = v14 >> v35;
      v37 = v12 * (unint64_t)v13;
      v38 = 256;
      v39 = *(char **)(a4 + 72);
      *(_QWORD *)(a4 + 80) = v39;
      v40 = 1;
      v41 = v39;
      v116 = v37;
      do
      {
        v34 += *(_QWORD *)&v17[8 * v33];
        if (v34 <= v36)
        {
          v43 = *(char **)(a4 + 72);
          v44 = (v41 - v43) >> 2;
          v45 = v44 + 1;
          if (v40 > v44 + 1)
          {
            if (v33)
            {
              v117 = v38;
              if (v38 == (_DWORD)v33 - 1)
              {
                v46 = *(_QWORD *)(a4 + 88);
                if ((unint64_t)v41 >= v46)
                {
                  if (v45 >> 62)
LABEL_137:
                    sub_2367C3440();
                  v53 = v46 - (_QWORD)v43;
                  if (v53 >> 1 > v45)
                    v45 = v53 >> 1;
                  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                    v45 = 0x3FFFFFFFFFFFFFFFLL;
                  if (v45)
                  {
                    v45 = (unint64_t)sub_2367C3454(v45);
                    v43 = *(char **)(a4 + 72);
                    v41 = *(char **)(a4 + 80);
                  }
                  else
                  {
                    v54 = 0;
                  }
                  v58 = (_DWORD *)(v45 + 4 * v44);
                  *v58 = v33;
                  v39 = (char *)(v58 + 1);
                  while (v41 != v43)
                  {
                    v59 = *((_DWORD *)v41 - 1);
                    v41 -= 4;
                    *--v58 = v59;
                  }
                  *(_QWORD *)(a4 + 72) = v58;
                  *(_QWORD *)(a4 + 80) = v39;
                  *(_QWORD *)(a4 + 88) = v45 + 4 * v54;
                  if (v43)
                    operator delete(v43);
                  v37 = v116;
                }
                else
                {
                  *(_DWORD *)v41 = v33;
                  v39 = v41 + 4;
                }
                v38 = v117;
                *(_QWORD *)(a4 + 80) = v39;
                v41 = v39;
              }
            }
          }
        }
        else
        {
          if (v33)
          {
            v42 = *(_QWORD *)(a4 + 88);
            if ((unint64_t)v41 >= v42)
            {
              v47 = *(char **)(a4 + 72);
              v48 = (v41 - v47) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_137;
              v50 = v42 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              v103 = (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL;
              v51 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v103)
                v51 = v49;
              if (v51)
              {
                v51 = (unint64_t)sub_2367C3454(v51);
                v47 = *(char **)(a4 + 72);
                v41 = *(char **)(a4 + 80);
              }
              else
              {
                v52 = 0;
              }
              v55 = (_DWORD *)(v51 + 4 * v48);
              *v55 = v33;
              v39 = (char *)(v55 + 1);
              while (v41 != v47)
              {
                v56 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *--v55 = v56;
              }
              *(_QWORD *)(a4 + 72) = v55;
              *(_QWORD *)(a4 + 80) = v39;
              *(_QWORD *)(a4 + 88) = v51 + 4 * v52;
              if (v47)
                operator delete(v47);
              v37 = v116;
            }
            else
            {
              *(_DWORD *)v41 = v33;
              v39 = v41 + 4;
            }
            *(_QWORD *)(a4 + 80) = v39;
            v41 = v39;
          }
          v57 = v37 + v37 * v40;
          do
          {
            ++v40;
            v36 = v57 >> v35;
            v57 += v14;
          }
          while (v34 > v36);
          v38 = v33;
        }
        ++v33;
      }
      while (v33 != 256);
      sub_2367D7B3C(v125, 13 * ((uint64_t)&v39[-*(_QWORD *)(a4 + 72)] >> 2) + 13);
      v60 = 0;
      v61 = 0;
      v62 = *(_QWORD *)(a4 + 72);
      v63 = *(_QWORD *)(a4 + 80) - v62;
      v64 = v63 >> 2;
      v65 = (char *)v125[0];
      v66 = 2 * v63 + 8;
      v67 = v17;
      do
      {
        if (v61 < v64 && v60 == *(_DWORD *)(v62 + 4 * v61))
          ++v61;
        v68 = &v65[8 * v61];
        for (k = 2048; k != 28672; k += 2048)
        {
          *(_QWORD *)v68 += *(_QWORD *)&v67[k];
          v68 += v66;
        }
        ++v60;
        v67 += 8;
      }
      while (v60 != 256);
      sub_236818388(&v123, 13 * ((uint64_t)(*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 2) + 13);
      v70 = v123;
      v71 = v124;
      if (v123 == v124)
      {
        v73 = v123;
      }
      else
      {
        v72 = 0;
        do
        {
          v70[v72] = v72;
          ++v72;
        }
        while (&v70[v72] != v71);
        v73 = v123;
        v70 = v124;
      }
      v120 = 0;
      v121 = 0;
      v122 = 0;
      sub_2367C9F60(&v120, v73, (uint64_t)v70, v70 - (_BYTE *)v73);
      v74 = v14 / v115;
      v75 = (v14 / v115) >> 1;
      if ((int)v75 >= 9)
        LODWORD(v75) = 9;
      if ((int)v75 <= 2)
        v76 = 2;
      else
        v76 = v75;
      v77 = v74 / 3;
      if ((int)v77 >= 5)
        LODWORD(v77) = 5;
      if ((int)v77 <= 1)
        v78 = 1;
      else
        v78 = v77;
      v80 = (unsigned __int8 *)v120;
      v79 = v121;
      v81 = v121 - (_BYTE *)v120;
      if (v121 - (_BYTE *)v120 > v76)
      {
        do
        {
          __p[0] = v125;
          v82 = 126 - 2 * __clz(v81);
          if (v79 == v80)
            v83 = 0;
          else
            v83 = v82;
          sub_236843360((unint64_t)v80, v79, (uint64_t **)__p, v83, 1);
          v84 = *--v79;
          v85 = v125[0];
          *((_QWORD *)v125[0] + v80[v81 - 2]) += *((_QWORD *)v125[0] + v84);
          v85[*v79] = 0;
          *((_BYTE *)v123 + *v79) = v80[v81-- - 2];
        }
        while (v81 > v76);
        v121 = v79;
      }
      v86 = (char *)v123;
      v87 = v124;
      if (v124 == v123)
      {
        v91 = 0;
      }
      else
      {
        v88 = 0;
        do
        {
          v89 = &v86[v88];
          v90 = v86[v86[v88]];
          if (v90 != v86[v88])
          {
            do
            {
              *v89 = v90;
              v86 = (char *)v123;
              v89 = (char *)v123 + v88;
              v90 = *((unsigned __int8 *)v123 + *((unsigned __int8 *)v123 + v88));
            }
            while (v90 != *((unsigned __int8 *)v123 + v88));
            v87 = v124;
          }
          ++v88;
          v91 = v87 - v86;
        }
        while (v88 < v87 - v86);
      }
      v118 = v91;
      sub_2367E2738(__p, v91, &v118);
      v92 = (char *)v123;
      v93 = v124;
      v94 = v124 - (_BYTE *)v123;
      if (v124 == v123)
      {
        v96 = 0;
      }
      else
      {
        v95 = 0;
        v96 = 0;
        do
        {
          v97 = v92[v95];
          v98 = *((unsigned __int8 *)__p[0] + v97);
          if (v94 == v98)
          {
            *((_BYTE *)__p[0] + v97) = v96++;
            v92 = (char *)v123;
            LOBYTE(v98) = *((_BYTE *)__p[0] + *((unsigned __int8 *)v123 + v95));
          }
          v92[v95++] = v98;
          v92 = (char *)v123;
          v93 = v124;
          v94 = v124 - (_BYTE *)v123;
        }
        while (v95 < v124 - (_BYTE *)v123);
      }
      if ((void **)(a4 + 96) != &v123)
      {
        sub_2367C9C54((_QWORD *)(a4 + 96), v92, v93, v94);
        v92 = (char *)v123;
        v93 = v124;
      }
      v99 = v93 - v92;
      v100 = 3 * (v93 - v92);
      v101 = *(_QWORD *)(a4 + 96);
      v102 = *(_QWORD *)(a4 + 104) - v101;
      v103 = v100 >= v102;
      v104 = v100 - v102;
      if (v104 != 0 && v103)
      {
        sub_2367C8698((unint64_t *)(a4 + 96), v104);
        v92 = (char *)v123;
        v99 = v124 - (_BYTE *)v123;
        v100 = 3 * (v124 - (_BYTE *)v123);
      }
      else if (!v103)
      {
        *(_QWORD *)(a4 + 104) = v101 + v100;
      }
      if (v99 < v100)
      {
        v105 = v99;
        do
        {
          v106 = v92[v105 % v99];
          if (v106 >= v78 - 1)
            LOBYTE(v106) = v78 - 1;
          *(_BYTE *)(*(_QWORD *)(a4 + 96) + v105++) = v96 + v106;
          v92 = (char *)v123;
          v99 = v124 - (_BYTE *)v123;
        }
        while (v105 < 3 * (v124 - (_BYTE *)v123));
      }
      v107 = *(unsigned __int8 **)(a4 + 96);
      v108 = *(unsigned __int8 **)(a4 + 104);
      if (v107 != v108)
      {
        v109 = v107 + 1;
        if (v107 + 1 != v108)
        {
          v110 = *v107;
          v111 = v107 + 1;
          do
          {
            v113 = *v111++;
            v112 = v113;
            v114 = v110 >= v113;
            if (v110 <= v113)
              v110 = v112;
            if (!v114)
              v107 = v109;
            v109 = v111;
          }
          while (v111 != v108);
        }
      }
      *(_QWORD *)(a4 + 120) = *v107 + 1;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v120)
        operator delete(v120);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      if (v125[0])
      {
        v125[1] = v125[0];
        operator delete(v125[0]);
      }
      MEMORY[0x23B7F8F48](v17, 0x1000C40DDE5C641);
    }
  }
}

void sub_236843254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  MEMORY[0x23B7F8F48](v24, 0x1000C40DDE5C641);
  _Unwind_Resume(a1);
}

unint64_t sub_236843360(unint64_t result, unsigned __int8 *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  BOOL v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;

  v9 = (unsigned __int8 *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = a2 - v11;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v50 = *v10;
        v51 = *v11;
        if (*(_QWORD *)(**a3 + 8 * v50) > *(_QWORD *)(**a3 + 8 * v51))
        {
          *v11 = v50;
          *v10 = v51;
        }
        return result;
      case 3:
        return (unint64_t)sub_236843B60(v11, v11 + 1, v10, a3);
      case 4:
        return (unint64_t)sub_236843C04(v11, v11 + 1, v11 + 2, v10, a3);
      case 5:
        v52 = v11 + 2;
        v53 = v11 + 3;
        result = (unint64_t)sub_236843C04(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v54 = *v10;
        v55 = v11[3];
        if (*(_QWORD *)(**a3 + 8 * v54) > *(_QWORD *)(**a3 + 8 * v55))
        {
          *v53 = v54;
          *v10 = v55;
          v56 = *v53;
          v57 = *v52;
          if (*(_QWORD *)(**a3 + 8 * v56) > *(_QWORD *)(**a3 + 8 * v57))
          {
            *v52 = v56;
            *v53 = v57;
            v58 = v11[1];
            if (*(_QWORD *)(**a3 + 8 * v56) > *(_QWORD *)(**a3 + 8 * v58))
            {
              v11[1] = v56;
              v11[2] = v58;
              v59 = *v11;
              if (*(_QWORD *)(**a3 + 8 * v56) > *(_QWORD *)(**a3 + 8 * v59))
              {
                *v11 = v56;
                v11[1] = v59;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 23)
        {
          v60 = v11 + 1;
          v62 = v11 == a2 || v60 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v62)
            {
              v63 = *a3;
              v64 = 1;
              v65 = v11;
              do
              {
                v66 = v65[1];
                v67 = *v65;
                v65 = v60;
                if (*(_QWORD *)(*v63 + 8 * v66) > *(_QWORD *)(*v63 + 8 * v67))
                {
                  v68 = v64;
                  LOBYTE(v69) = v67;
                  while (1)
                  {
                    v11[v68] = v69;
                    v70 = v68 - 1;
                    if (v68 == 1)
                      break;
                    v69 = v11[v68-- - 2];
                    if (*(_QWORD *)(**a3 + 8 * v66) <= *(_QWORD *)(**a3 + 8 * v69))
                    {
                      v71 = &v11[v70];
                      goto LABEL_78;
                    }
                  }
                  v71 = v11;
LABEL_78:
                  *v71 = v66;
                  v63 = *a3;
                }
                v60 = v65 + 1;
                ++v64;
              }
              while (v65 + 1 != a2);
            }
          }
          else if (!v62)
          {
            v104 = *a3;
            do
            {
              v105 = v9[1];
              v106 = *v9;
              v9 = v60;
              if (*(_QWORD *)(*v104 + 8 * v105) > *(_QWORD *)(*v104 + 8 * v106))
              {
                v107 = v60;
                LOBYTE(v60) = v106;
                do
                {
                  *v107 = (_BYTE)v60;
                  v60 = (unsigned __int8 *)*(v107 - 2);
                  --v107;
                }
                while (*(_QWORD *)(**a3 + 8 * v105) > *(_QWORD *)(**a3 + 8 * (_QWORD)v60));
                *v107 = v105;
                v104 = *a3;
              }
              v60 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v72 = (unint64_t)(v12 - 2) >> 1;
            v73 = v72;
            do
            {
              v74 = v73;
              if (v72 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = &v11[v75];
                v77 = v11[v75];
                if (2 * v74 + 2 >= v12)
                {
                  v78 = **a3;
                }
                else
                {
                  v78 = **a3;
                  result = *(_QWORD *)(v78 + 8 * v77);
                  if (result > *(_QWORD *)(v78 + 8 * v76[1]))
                  {
                    LODWORD(v77) = *++v76;
                    v75 = 2 * v74 + 2;
                  }
                }
                v79 = &v11[v74];
                v80 = v11[v74];
                if (*(_QWORD *)(v78 + 8 * v77) <= *(_QWORD *)(v78 + 8 * v80))
                {
                  do
                  {
                    v81 = v76;
                    *v79 = v77;
                    if (v72 < v75)
                      break;
                    v82 = (2 * v75) | 1;
                    v76 = &v11[v82];
                    v75 = 2 * v75 + 2;
                    v77 = v11[v82];
                    if (v75 >= v12)
                    {
                      v83 = **a3;
                      v75 = v82;
                    }
                    else
                    {
                      v83 = **a3;
                      if (*(_QWORD *)(v83 + 8 * v77) <= *(_QWORD *)(v83 + 8 * v76[1]))
                        v75 = v82;
                      else
                        LODWORD(v77) = *++v76;
                    }
                    result = *(_QWORD *)(v83 + 8 * v77);
                    v79 = v81;
                  }
                  while (result <= *(_QWORD *)(v83 + 8 * v80));
                  *v81 = v80;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            do
            {
              v84 = 0;
              v85 = *v11;
              v86 = v11;
              do
              {
                v87 = &v86[v84 + 1];
                v88 = *v87;
                v89 = (2 * v84) | 1;
                v90 = 2 * v84 + 2;
                if (v90 < v12)
                {
                  v91 = **a3;
                  v92 = *(_QWORD *)(v91 + 8 * v88);
                  result = *(_QWORD *)(v91 + 8 * v87[1]);
                  if (v92 > result)
                  {
                    LOBYTE(v88) = *++v87;
                    v89 = v90;
                  }
                }
                *v86 = v88;
                v86 = v87;
                v84 = v89;
              }
              while (v89 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              if (v87 == --a2)
              {
                *v87 = v85;
              }
              else
              {
                *v87 = *a2;
                *a2 = v85;
                v93 = v87 - v11 - 1;
                if (v87 - v11 + 1 >= 2)
                {
                  v94 = &v11[v93 >> 1];
                  v95 = *v94;
                  v96 = *v87;
                  if (*(_QWORD *)(**a3 + 8 * v95) > *(_QWORD *)(**a3 + 8 * v96))
                  {
                    v97 = v93 >> 1;
                    do
                    {
                      v98 = v94;
                      *v87 = v95;
                      if (!v97)
                        break;
                      v99 = v97 - 1;
                      v97 = (v97 - 1) >> 1;
                      v94 = &v11[v99 >> 1];
                      v95 = *v94;
                      v100 = **a3;
                      v101 = *(_QWORD *)(v100 + 8 * v95);
                      v102 = *(_QWORD *)(v100 + 8 * v96);
                      v87 = v98;
                    }
                    while (v101 > v102);
                    *v98 = v96;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = &v11[(unint64_t)v12 >> 1];
        if ((unint64_t)v12 < 0x81)
        {
          result = (unint64_t)sub_236843B60(&v9[(unint64_t)v12 >> 1], v9, v10, a3);
        }
        else
        {
          v14 = a4;
          v15 = a5;
          v16 = (unint64_t)v12 >> 1;
          sub_236843B60(v9, &v9[(unint64_t)v12 >> 1], v10, a3);
          v17 = &v9[v16];
          v18 = &v9[v16 - 1];
          sub_236843B60(v9 + 1, v18, a2 - 2, a3);
          v19 = &v9[v16 + 1];
          a5 = v15;
          a4 = v14;
          sub_236843B60(v9 + 2, v19, a2 - 3, a3);
          result = (unint64_t)sub_236843B60(v18, v13, v19, a3);
          v20 = *v9;
          *v9 = *v17;
          *v17 = v20;
          v10 = a2 - 1;
        }
        --a4;
        v21 = *v9;
        v22 = **a3;
        if ((a5 & 1) == 0)
        {
          v23 = *(_QWORD *)(v22 + 8 * v21);
          if (*(_QWORD *)(v22 + 8 * *(v9 - 1)) > v23)
            goto LABEL_12;
          if (v23 <= *(_QWORD *)(v22 + 8 * *v10))
          {
            v40 = v9 + 1;
            do
            {
              v11 = v40;
              if (v40 >= a2)
                break;
              ++v40;
            }
            while (v23 <= *(_QWORD *)(v22 + 8 * *v11));
          }
          else
          {
            v11 = v9;
            do
              v39 = *++v11;
            while (v23 <= *(_QWORD *)(v22 + 8 * v39));
          }
          v41 = a2;
          if (v11 < a2)
          {
            v41 = a2;
            do
              v42 = *--v41;
            while (v23 > *(_QWORD *)(v22 + 8 * v42));
          }
          if (v11 < v41)
          {
            v43 = *v11;
            v44 = *v41;
            do
            {
              *v11 = v44;
              *v41 = v43;
              v45 = **a3;
              v46 = *(_QWORD *)(v45 + 8 * v21);
              do
              {
                v47 = *++v11;
                v43 = v47;
              }
              while (v46 <= *(_QWORD *)(v45 + 8 * v47));
              do
              {
                v48 = *--v41;
                v44 = v48;
              }
              while (v46 > *(_QWORD *)(v45 + 8 * v48));
            }
            while (v11 < v41);
          }
          v49 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v49;
          a5 = 0;
          *v49 = v21;
          continue;
        }
        v23 = *(_QWORD *)(v22 + 8 * v21);
LABEL_12:
        v24 = v9;
        do
        {
          v25 = v24;
          v27 = *++v24;
          v26 = v27;
        }
        while (*(_QWORD *)(v22 + 8 * v27) > v23);
        v28 = a2;
        if (v25 == v9)
        {
          v28 = a2;
          do
          {
            if (v24 >= v28)
              break;
            v30 = *--v28;
          }
          while (*(_QWORD *)(v22 + 8 * v30) <= v23);
        }
        else
        {
          do
            v29 = *--v28;
          while (*(_QWORD *)(v22 + 8 * v29) <= v23);
        }
        if (v24 < v28)
        {
          v31 = *v28;
          v32 = v24;
          v33 = v28;
          do
          {
            *v32 = v31;
            *v33 = v26;
            v34 = **a3;
            v35 = *(_QWORD *)(v34 + 8 * v21);
            do
            {
              v25 = v32;
              v36 = *++v32;
              v26 = v36;
            }
            while (*(_QWORD *)(v34 + 8 * v36) > v35);
            do
            {
              v37 = *--v33;
              v31 = v37;
            }
            while (*(_QWORD *)(v34 + 8 * v37) <= v35);
          }
          while (v32 < v33);
        }
        if (v25 != v9)
          *v9 = *v25;
        *v25 = v21;
        if (v24 < v28)
        {
LABEL_31:
          result = sub_236843360(v9, v25, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v25 + 1;
          continue;
        }
        v38 = sub_236843CC0(v9, v25, a3);
        v11 = v25 + 1;
        result = sub_236843CC0(v25 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v38)
            continue;
          goto LABEL_31;
        }
        a2 = v25;
        if (!v38)
          goto LABEL_2;
        return result;
    }
  }
}

_BYTE *sub_236843B60(_BYTE *result, _BYTE *a2, _BYTE *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *result;
  v6 = **a4;
  v7 = *(_QWORD *)(v6 + 8 * v4);
  v8 = *(_QWORD *)(v6 + 8 * v5);
  v9 = *a3;
  v10 = *(_QWORD *)(v6 + 8 * v9);
  if (v7 <= v8)
  {
    if (v10 > v7)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *a2;
      v12 = *result;
      if (*(_QWORD *)(**a4 + 8 * v11) > *(_QWORD *)(**a4 + 8 * v12))
      {
        *result = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v4;
      *a2 = v5;
      v13 = *a3;
      if (*(_QWORD *)(**a4 + 8 * v13) <= *(_QWORD *)(**a4 + 8 * v5))
        return result;
      *a2 = v13;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

_BYTE *sub_236843C04(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, uint64_t **a5)
{
  _BYTE *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_236843B60(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  if (*(_QWORD *)(**a5 + 8 * v11) > *(_QWORD *)(**a5 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v13 = *a3;
    v14 = *a2;
    if (*(_QWORD *)(**a5 + 8 * v13) > *(_QWORD *)(**a5 + 8 * v14))
    {
      *a2 = v13;
      *a3 = v14;
      v15 = *a2;
      v16 = *a1;
      if (*(_QWORD *)(**a5 + 8 * v15) > *(_QWORD *)(**a5 + 8 * v16))
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  return result;
}

BOOL sub_236843CC0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t **a3)
{
  int64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(**a3 + 8 * v8) > *(_QWORD *)(**a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_236843B60(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_236843C04(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v23 = a1 + 2;
      v24 = a1 + 3;
      sub_236843C04(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v25 = *(a2 - 1);
      v26 = a1[3];
      if (*(_QWORD *)(**a3 + 8 * v25) > *(_QWORD *)(**a3 + 8 * v26))
      {
        *v24 = v25;
        *(a2 - 1) = v26;
        v27 = *v24;
        v28 = *v23;
        if (*(_QWORD *)(**a3 + 8 * v27) > *(_QWORD *)(**a3 + 8 * v28))
        {
          *v23 = v27;
          *v24 = v28;
          v29 = a1[1];
          if (*(_QWORD *)(**a3 + 8 * v27) > *(_QWORD *)(**a3 + 8 * v29))
          {
            a1[1] = v27;
            a1[2] = v29;
            v30 = *a1;
            if (*(_QWORD *)(**a3 + 8 * v27) > *(_QWORD *)(**a3 + 8 * v30))
            {
              *a1 = v27;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_236843B60(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 3;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_QWORD *)(*v13 + 8 * v15) > *(_QWORD *)(*v13 + 8 * v16))
      break;
LABEL_15:
    v10 = v11;
    ++v14;
    if (++v11 == a2)
      return 1;
  }
  v17 = v14;
  while (1)
  {
    a1[v17] = v16;
    v18 = v17 - 1;
    if (v17 == 1)
      break;
    v16 = a1[v17 - 2];
    v19 = **a3;
    v20 = *(_QWORD *)(v19 + 8 * v15);
    v21 = *(_QWORD *)(v19 + 8 * v16);
    v17 = v18;
    if (v20 <= v21)
    {
      v22 = &a1[v18];
      goto LABEL_13;
    }
  }
  v22 = a1;
LABEL_13:
  *v22 = v15;
  if (++v12 != 8)
  {
    v13 = *a3;
    goto LABEL_15;
  }
  return v11 + 1 == a2;
}

uint64_t sub_236843F08(unsigned int *a1, unsigned int *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  char v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  float *v40;
  uint64_t j;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int v77;
  _OWORD v78[6];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  sub_2367C431C((uint64_t)&v73, v4, v5);
  v6 = v77;
  if (!v77)
  {
    v69 = v73;
    v7 = v75;
    v75 = 0;
    v70 = v74;
    v71 = v7;
    v72 = v76;
    if (a1[1] && *a1)
    {
      v8 = 0;
      v9 = (char *)v7;
      do
      {
        memcpy(v9, (const void *)(*((_QWORD *)a1 + 3) + *((_QWORD *)a1 + 2) * v8++), 4 * *a1);
        v9 += v70;
      }
      while (v8 < a1[1]);
    }
    sub_2368AEA5C((uint64_t)&v64, (unsigned int *)&v69, 2uLL);
    v6 = v68;
    if (!v68)
    {
      v69 = v64;
      v10 = v66;
      v66 = 0;
      v11 = v67;
      v70 = v65;
      v71 = v10;
      if (v7)
      {
        v12 = -*(v7 - 3);
        do
          v13 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v13 + v12, &qword_2564313D8));
        free((void *)*(v7 - 4));
      }
      v72 = v11;
      sub_2367C431C((uint64_t)&v60, v69, DWORD1(v69));
      v6 = v63;
      if (!v63)
      {
        v15 = v61;
        v14 = v62;
        v62 = 0;
        sub_2368443D8((unint64_t)&v69, v61, v14);
        v16 = a2[1];
        if ((_DWORD)v16)
        {
          v17 = 0;
          v19 = *((_QWORD *)a2 + 2);
          v18 = *((_QWORD *)a2 + 3);
          v20 = -5;
          v22 = *((_QWORD *)a1 + 2);
          v21 = *((_QWORD *)a1 + 3);
          v23 = *a2;
          do
          {
            v24 = 0;
            v25 = v18 + v19 * v17;
            memset(v78, 0, sizeof(v78));
            do
            {
              v26 = (v20 + v24) & ~((v20 + v24) >> 63);
              if (v26 >= v5)
                v26 = v5 - 1;
              *((_QWORD *)v78 + v24++) = v21 + v22 * v26;
            }
            while (v24 != 12);
            if ((_DWORD)v23)
            {
              v27 = 0;
              for (i = 0; i != v23; ++i)
              {
                v29 = 0;
                v30 = 3.4028e38;
                v31 = 1.1755e-38;
                v32 = 5;
                do
                {
                  v33 = 0;
                  v34 = v29;
                  v35 = *((_QWORD *)v78 + v32);
                  do
                  {
                    v36 = v27 + v33;
                    if (v27 + v33 >= v4)
                      v36 = v4 - 1;
                    v37 = *(float *)(v35 + 4 * v36);
                    if (v37 < v30)
                      v30 = *(float *)(v35 + 4 * v36);
                    if (v31 < v37)
                      v31 = *(float *)(v35 + 4 * v36);
                    ++v33;
                  }
                  while (v33 != 2);
                  v29 = 1;
                  v32 = 6;
                }
                while ((v34 & 1) == 0);
                v38 = 0;
                v39 = 0.0;
                v40 = (float *)&unk_236923080;
                do
                {
                  for (j = 0; j != 12; ++j)
                  {
                    v42 = (v27 + j - 5) & ~((v27 + j - 5) >> 63);
                    if (v42 >= v4)
                      v42 = v4 - 1;
                    v39 = v39 + (float)(*(float *)(*((_QWORD *)v78 + v38) + 4 * v42) * v40[j]);
                  }
                  ++v38;
                  v40 += 12;
                }
                while (v38 != 12);
                *(float *)(v25 + 4 * i) = v39;
                v43 = *(float *)(v14 + v15 * v17 + 4 * i);
                v44 = v30 - v43;
                if (v39 < v44 || (v44 = v31 + v43, v39 > (float)(v31 + v43)))
                  *(float *)(v25 + 4 * i) = v44;
                v27 += 2;
              }
            }
            ++v17;
            v20 += 2;
          }
          while (v17 != v16);
        }
        if (!v14)
          goto LABEL_67;
        v45 = -*(_QWORD *)(v14 - 24);
        do
          v46 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v46 + v45, &qword_2564313D8));
        free(*(void **)(v14 - 32));
        if (!v63)
        {
LABEL_67:
          v47 = v62;
          v62 = 0;
          if (v47)
          {
            v48 = -*(_QWORD *)(v47 - 24);
            do
              v49 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v49 + v48, &qword_2564313D8));
            free(*(void **)(v47 - 32));
          }
        }
        v6 = 0;
      }
      if (!v68)
      {
        v50 = v66;
        v66 = 0;
        if (v50)
        {
          v51 = -*(v50 - 3);
          do
            v52 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v52 + v51, &qword_2564313D8));
          free((void *)*(v50 - 4));
        }
      }
    }
    v53 = v71;
    v71 = 0;
    if (v53)
    {
      v54 = -*(v53 - 3);
      do
        v55 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v55 + v54, &qword_2564313D8));
      free((void *)*(v53 - 4));
    }
    if (!v77)
    {
      v56 = v75;
      v75 = 0;
      if (v56)
      {
        v57 = -*(v56 - 3);
        do
          v58 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v58 + v57, &qword_2564313D8));
        free((void *)*(v56 - 4));
      }
    }
  }
  return v6;
}

void sub_236844310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  if (!a20 && a18)
  {
    v33 = -*(_QWORD *)(a18 - 24);
    do
      v34 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v34 + v33, &qword_2564313D8));
    free(*(void **)(a18 - 32));
  }
  if (a24)
  {
    v35 = -*(_QWORD *)(a24 - 24);
    do
      v36 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v36 + v35, &qword_2564313D8));
    free(*(void **)(a24 - 32));
  }
  if (!a32 && a30)
  {
    v37 = -*(_QWORD *)(a30 - 24);
    do
      v38 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v38 + v37, &qword_2564313D8));
    free(*(void **)(a30 - 32));
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2368443D8(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  float *v29;
  int v30;
  float v31;

  v3 = *(unsigned int *)(result + 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v6 = *(_QWORD *)(result + 16);
    v5 = *(_QWORD *)(result + 24);
    v7 = *(unsigned int *)result;
    v8 = v5;
    do
    {
      if (v4)
        v9 = v6 * (v4 - 1);
      else
        v9 = 0;
      v10 = v4 + 1;
      if ((_DWORD)v7)
      {
        v11 = 0;
        v12 = v5 + v9;
        v13 = v6 * v4;
        if (v10 < v3)
          v13 = v6 * v10;
        v14 = v5 + v13;
        result = 1;
        do
        {
          v15 = (float *)(v8 + v11);
          v16 = *(float *)(v8 + v11);
          v17 = v16;
          if (v11)
            v17 = *(v15 - 1);
          if (result < v7)
            ++v15;
          v18 = *v15;
          v19 = *(float *)(v12 + v11);
          v20 = *(float *)(v14 + v11);
          v21 = vabds_f32(v16, v17);
          *(float *)&v30 = 3.4028e38;
          v31 = 3.4028e38;
          v22 = 3.4028e38;
          if (v21 < 3.4028e38)
          {
            v31 = v21;
            v22 = v21;
          }
          v23 = vabds_f32(v16, v18);
          v24 = 3.4028e38;
          if (v23 < 3.4028e38)
          {
            if (v22 <= v23)
            {
              v25 = (float *)&v30;
            }
            else
            {
              *(float *)&v30 = v22;
              v25 = &v31;
            }
            *v25 = v23;
            v24 = *(float *)&v30;
          }
          v26 = vabds_f32(v16, v19);
          if (v24 > v26)
          {
            if (v31 <= v26)
            {
              v27 = (float *)&v30;
            }
            else
            {
              *(float *)&v30 = v31;
              v27 = &v31;
            }
            *v27 = v26;
            v24 = *(float *)&v30;
          }
          v28 = vabds_f32(v16, v20);
          if (v24 > v28)
          {
            if (v31 <= v28)
            {
              v29 = (float *)&v30;
            }
            else
            {
              *(float *)&v30 = v31;
              v29 = &v31;
            }
            *v29 = v28;
            v24 = *(float *)&v30;
          }
          *(float *)(a3 + v11) = v24;
          v11 += 4;
          ++result;
        }
        while (4 * v7 != v11);
      }
      v8 += v6;
      a3 += a2;
      v4 = v10;
    }
    while (v10 != v3);
  }
  return result;
}

unsigned int *sub_23684453C(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;

  v2 = a2[1];
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *result;
    v6 = result[1];
    v7 = *a2;
    v9 = a2 + 4;
    v8 = *((_QWORD *)a2 + 2);
    v33 = *((_QWORD *)v9 + 1);
    do
    {
      if (v3 <= 4)
        v10 = 4;
      else
        v10 = v3;
      if ((_DWORD)v7)
      {
        v11 = 0;
        if (2 * v4 <= 4)
          v12 = 4;
        else
          v12 = 2 * v4;
        v13 = v12 - 4;
        v14 = 2 * v4 + 6;
        if (v14 >= v6)
          v14 = v6;
        v15 = *((_QWORD *)result + 2);
        v16 = *((_QWORD *)result + 3) + v15 * (v10 - 4);
        do
        {
          if (2 * v11 <= 4)
            v17 = 4;
          else
            v17 = 2 * v11;
          v18 = 2 * v11 + 6;
          if (v18 >= v5)
            v18 = v5;
          v19 = 0.0;
          if (v13 < (uint64_t)v14)
          {
            v20 = v17 - 4;
            v21 = v16;
            v22 = v13;
            do
            {
              if (v20 < (uint64_t)v18)
              {
                if (v22 >= 0)
                  v23 = v22;
                else
                  v23 = v22 + 1;
                v24 = v4 - (v23 >> 1);
                v25 = v24 - 3;
                if ((v22 & 1) != 0)
                  v26 = (float *)&unk_2369233EC;
                else
                  v26 = (float *)&unk_2369232C0;
                v27 = 5 * v24 + 12;
                v28 = v20;
                do
                {
                  if (v28 >= 0)
                    v29 = v28;
                  else
                    v29 = v28 + 1;
                  v30 = 0.0;
                  if (v25 >= 0xFFFFFFFFFFFFFFFBLL)
                  {
                    v31 = v11 - (v29 >> 1);
                    if ((unint64_t)(v31 - 3) >= 0xFFFFFFFFFFFFFFFBLL)
                    {
                      if ((v28 & 1 & v22) != 0)
                        v32 = (float *)&unk_236923324;
                      else
                        v32 = (float *)&unk_236923388;
                      if ((v28 & 1) == 0)
                        v32 = v26;
                      v30 = v32[v27 + v31];
                    }
                  }
                  v19 = v19 + v30 * *(float *)(v21 + 4 * v28++);
                }
                while (v28 < v18);
              }
              ++v22;
              v21 += v15;
            }
            while (v22 < v14);
          }
          *(float *)(v33 + v8 * v4 + 4 * v11++) = v19;
        }
        while (v11 != v7);
      }
      ++v4;
      v3 += 2;
    }
    while (v4 != v2);
  }
  return result;
}

unsigned int *sub_2368446EC(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v2 = a2[1];
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *result;
    v5 = result[1];
    v6 = *a2;
    v8 = *((_QWORD *)result + 2);
    v7 = *((_QWORD *)result + 3);
    result = (unsigned int *)&unk_2369232C0;
    do
    {
      if ((_DWORD)v6)
      {
        v9 = 0;
        if ((v3 & 1) != 0)
          v10 = (float *)&unk_2369233EC;
        else
          v10 = (float *)&unk_2369232C0;
        v11 = (v3 >> 1) - 2;
        v12 = *((_QWORD *)a2 + 3) + *((_QWORD *)a2 + 2) * v3;
        do
        {
          v13 = 0;
          v14 = 3.4028e38;
          v15 = 1.1755e-38;
          do
          {
            v16 = (v11 + v13) & ~((v11 + v13) >> 63);
            if (v16 >= v5)
              v16 = v5 - 1;
            v17 = v7 + v8 * v16;
            for (i = -2; i != 3; ++i)
            {
              v19 = ((v9 >> 1) + i) & ~((uint64_t)((v9 >> 1) + i) >> 63);
              if (v19 >= v4)
                v19 = v4 - 1;
              v20 = *(float *)(v17 + 4 * v19);
              if (v20 < v14)
                v14 = *(float *)(v17 + 4 * v19);
              if (v15 < v20)
                v15 = *(float *)(v17 + 4 * v19);
            }
            ++v13;
          }
          while (v13 != 5);
          v21 = 0;
          if ((v3 & 1 & v9) != 0)
            v22 = (float *)&unk_236923324;
          else
            v22 = (float *)&unk_236923388;
          if ((v9 & 1) == 0)
            v22 = v10;
          v23 = 0.0;
          do
          {
            v24 = 0;
            v25 = (v11 + v21) & ~((v11 + v21) >> 63);
            if (v25 >= v5)
              v25 = v5 - 1;
            v26 = v7 + v8 * v25;
            do
            {
              v27 = ((v9 >> 1) - 2 + v24) & ~((uint64_t)((v9 >> 1) - 2 + v24) >> 63);
              if (v27 >= v4)
                v27 = v4 - 1;
              v23 = v23 + (float)(*(float *)(v26 + 4 * v27) * v22[v24++]);
            }
            while (v24 != 5);
            ++v21;
            v22 += 5;
          }
          while (v21 != 5);
          *(float *)(v12 + 4 * v9) = v23;
          if (v23 < v14)
          {
            *(float *)(v12 + 4 * v9) = v14;
            v23 = v14;
          }
          if (v23 > v15)
            *(float *)(v12 + 4 * v9) = v15;
          ++v9;
        }
        while (v9 != v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_236844884(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  __int128 v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  int v30;

  v8 = *a2;
  v9 = a2[1];
  sub_2367C431C((uint64_t)&v26, *a2, v9);
  if (v30)
  {
    *(_DWORD *)(a1 + 40) = v30;
  }
  else
  {
    v10 = v27;
    v11 = v28;
    v12 = v29;
    if ((_DWORD)v9)
    {
      v13 = 0;
      v15 = *((_QWORD *)a2 + 2);
      v14 = (float *)*((_QWORD *)a2 + 3);
      v16 = v28;
      v18 = *(_QWORD *)(a3 + 16);
      v17 = *(float **)(a3 + 24);
      do
      {
        v19 = v14;
        v20 = v17;
        v21 = v16;
        v22 = v8;
        if ((_DWORD)v8)
        {
          do
          {
            v23 = *v19++;
            v24 = v23;
            v25 = *v20++;
            *v21++ = v24 + (float)(v25 * a4);
            --v22;
          }
          while (v22);
        }
        ++v13;
        v16 = (float *)((char *)v16 + v10);
        v17 = (float *)((char *)v17 + v18);
        v14 = (float *)((char *)v14 + v15);
      }
      while (v13 != v9);
    }
    *(_DWORD *)(a1 + 40) = 0;
    *(_OWORD *)a1 = v26;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
  }
}

uint64_t sub_236844968(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;

  v5 = a5[1];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *a5;
    v9 = *((_QWORD *)a5 + 2);
    v8 = *((_QWORD *)a5 + 3);
    v10 = a2 - result - 4;
    do
    {
      if ((_DWORD)v7)
      {
        v11 = 0;
        v12 = v8 + v9 * v6;
        v13 = v10;
        do
        {
          v14 = *(float *)(v12 + 4 * v11);
          v15 = *(float *)(a2 + v6 * result + 4 * v11);
          v16 = -1;
          v17 = v13;
          v18 = v15;
          do
          {
            v19 = 0;
            v20 = v16 + v6;
            do
            {
              if (v11 + v19 - 1 >= 0 && (v20 & 0x8000000000000000) == 0 && v11 + v19 - 1 < v7 && v20 < v5)
              {
                v21 = *(float *)(v17 + 4 * v19);
                if (v21 < v18)
                  v18 = *(float *)(v17 + 4 * v19);
                if (v15 < v21)
                  v15 = *(float *)(v17 + 4 * v19);
              }
              ++v19;
            }
            while (v19 != 3);
            ++v16;
            v17 += result;
          }
          while (v16 != 2);
          v22 = *(float *)(a4 + v6 * a3 + 4 * v11) + *(float *)(a4 + v6 * a3 + 4 * v11);
          v23 = v18 - v22;
          v24 = v15 + v22;
          if (v14 >= v23)
          {
            v25 = v14 <= v24;
          }
          else
          {
            v14 = v23;
            v25 = 0;
          }
          if (!v25)
          {
            if (v14 > v24)
              v14 = v24;
            *(float *)(v12 + 4 * v11) = v14;
          }
          ++v11;
          v13 += 4;
        }
        while (v11 != v7);
      }
      ++v6;
      v10 += result;
    }
    while (v6 != v5);
  }
  return result;
}

BOOL sub_236844A60(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int i;
  uint64_t *v11[2];

  if (!(_DWORD)a2)
    return 0;
  v8 = a2;
  v11[0] = a3;
  v11[1] = a4;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, uint64_t **, uint64_t (*)(uint64_t **, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v11, sub_236844B8C, sub_236844F38, 0, a2) != 0;
  sub_236844B8C(v11, 1uLL, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  for (i = 0; i != v8; ++i)
    sub_236844F38((uint64_t)v11, i, 0);
  return 0;
}

void sub_236844AFC(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        sub_2367C2F38(v4 - 2);
        sub_2367C2F38(v4 - 7);
        sub_2367C2F38(v4 - 12);
        v4 -= 15;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_236844B8C(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t *i;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  __int128 v59;

  v9 = *a1;
  v10 = **a1;
  *(_QWORD *)(v10 + 112) = 396288;
  if ((396288 * a2) >> 62)
    v11 = 0;
  else
    v11 = sub_236785B78(1585152 * a2, a2, a3, a4, a5, a6, a7, a8);
  v58 = 0;
  v59 = 0uLL;
  sub_2367DA3D0((uint64_t *)(v10 + 120), v11);
  *(_OWORD *)(v10 + 128) = 0uLL;
  sub_2367D7A7C(&v58);
  v19 = 0;
  *(_QWORD *)(v10 + 144) = 0x10000;
  if ((a2 & 0xC00000000000) == 0)
    v19 = sub_236785B78(a2 << 18, v12, v13, v14, v15, v16, v17, v18);
  v58 = 0;
  v59 = 0uLL;
  v20 = *(_QWORD *)(v10 + 152);
  *(_QWORD *)(v10 + 152) = v19;
  if (v20)
  {
    v21 = *(void (**)(_QWORD, _QWORD))(v10 + 160);
    if (v21)
      v21(*(_QWORD *)(v10 + 168), *(_QWORD *)(v20 - 16));
    else
      free(*(void **)(v20 - 16));
  }
  *(_OWORD *)(v10 + 160) = v59;
  sub_236813D44(&v58);
  v29 = v9[1];
  v31 = *(uint64_t **)v29;
  v30 = *(uint64_t **)(v29 + 8);
  v32 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v30 - *(_QWORD *)v29) >> 3);
  v33 = a2 - v32;
  if (a2 > v32)
  {
    v34 = *(_QWORD *)(v29 + 16);
    if (0xEEEEEEEEEEEEEEEFLL * ((v34 - (uint64_t)v30) >> 3) >= v33)
    {
      bzero(*(void **)(v29 + 8), 120 * ((120 * v33 - 120) / 0x78) + 120);
      *(_QWORD *)(v29 + 8) = &v30[15 * ((120 * v33 - 120) / 0x78) + 15];
      goto LABEL_34;
    }
    if (a2 > 0x222222222222222)
      sub_2367C3440();
    v35 = 0xEEEEEEEEEEEEEEEFLL * ((v34 - (uint64_t)v31) >> 3);
    v36 = 2 * v35;
    if (2 * v35 <= a2)
      v36 = a2;
    if (v35 >= 0x111111111111111)
      v37 = 0x222222222222222;
    else
      v37 = v36;
    if (v37 > 0x222222222222222)
      sub_2367C3488();
    v38 = 120 * v37;
    v39 = (char *)operator new(120 * v37);
    v40 = &v39[120 * v32];
    v41 = &v39[v38];
    bzero(v40, 120 * ((120 * v33 - 120) / 0x78) + 120);
    v42 = &v40[120 * ((120 * v33 - 120) / 0x78) + 120];
    if (v30 == v31)
    {
      *(_QWORD *)v29 = v40;
      *(_QWORD *)(v29 + 8) = v42;
      *(_QWORD *)(v29 + 16) = v41;
      if (!v30)
        goto LABEL_34;
    }
    else
    {
      v43 = 0;
      do
      {
        v44 = &v30[v43];
        v45 = &v40[v43 * 8];
        v46 = *(_OWORD *)&v30[v43 - 15];
        *((_QWORD *)v45 - 13) = v30[v43 - 13];
        *(_OWORD *)(v45 - 120) = v46;
        v47 = v30[v43 - 12];
        *(v44 - 12) = 0;
        *((_QWORD *)v45 - 12) = v47;
        *((_QWORD *)v45 - 11) = v30[v43 - 11];
        v48 = *(_OWORD *)&v30[v43 - 10];
        *((_QWORD *)v45 - 8) = v30[v43 - 8];
        *((_OWORD *)v45 - 5) = v48;
        v49 = v30[v43 - 7];
        *(v44 - 7) = 0;
        *((_QWORD *)v45 - 7) = v49;
        *((_QWORD *)v45 - 6) = v30[v43 - 6];
        v50 = *(_OWORD *)&v30[v43 - 5];
        *((_QWORD *)v45 - 3) = v30[v43 - 3];
        *(_OWORD *)(v45 - 40) = v50;
        v51 = v30[v43 - 2];
        *(v44 - 2) = 0;
        *((_QWORD *)v45 - 2) = v51;
        *((_QWORD *)v45 - 1) = v30[v43 - 1];
        v43 -= 15;
      }
      while (&v30[v43] != v31);
      v52 = &v40[v43 * 8];
      v53 = *(uint64_t **)v29;
      v30 = *(uint64_t **)(v29 + 8);
      *(_QWORD *)v29 = v52;
      *(_QWORD *)(v29 + 8) = v42;
      *(_QWORD *)(v29 + 16) = v41;
      if (v30 != v53)
      {
        do
        {
          sub_2367C2F38(v30 - 2);
          sub_2367C2F38(v30 - 7);
          sub_2367C2F38(v30 - 12);
          v30 -= 15;
        }
        while (v30 != v53);
        v30 = v53;
      }
      if (!v30)
        goto LABEL_34;
    }
    operator delete(v30);
    goto LABEL_34;
  }
  if (a2 < v32)
  {
    for (i = &v31[15 * a2]; v30 != i; v30 -= 15)
    {
      sub_2367C2F38(v30 - 2);
      sub_2367C2F38(v30 - 7);
      sub_2367C2F38(v30 - 12);
    }
    *(_QWORD *)(v29 + 8) = i;
  }
LABEL_34:
  v55 = v9[2];
  if ((347136 * a2) >> 62)
    v56 = 0;
  else
    v56 = sub_236785B78(1388544 * a2, v22, v23, v24, v25, v26, v27, v28);
  v58 = 0;
  v59 = 0uLL;
  sub_2367DA3D0((uint64_t *)(v55 + 40), v56);
  *(_OWORD *)(v55 + 48) = v59;
  sub_2367D7A7C(&v58);
  return 0;
}

void sub_236844F38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int64x2_t v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  __n128 v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  int v31;
  double *v32;
  double v33;
  uint64_t v34;
  double *v35;
  double v36;
  BOOL v37;
  float v38;
  unint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  _BOOL4 v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v70;
  float v71;
  __n128 *v72;
  float *v73;
  __n128 *v74;
  float *v75;
  size_t v76;
  unsigned int v77;
  float v78;
  float v79;
  unint64_t v80;
  __n128 *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t i;
  uint64_t v91;
  uint64_t v92;
  float v93;
  int v94;
  unint64_t v97;
  size_t v98;
  uint64_t v99;
  unint64_t *v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BOOL8 v127;
  float v128;
  float *v129;
  float v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  float32x4_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  float v150;
  unint64_t v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  float *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t j;
  uint64_t v167;
  float32x4_t v168;
  int32x2_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  float v189;
  unint64_t v190;
  unint64_t v191;
  float v192;
  float32x4_t v193;
  unint64_t v194;
  float32x4_t *v195;
  unint64_t v196;
  float32x4_t v197;
  int32x2_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  float *v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  float *v207;
  uint64_t v208;
  float *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  float v217;
  float *v218;
  float *v219;
  uint64_t v220;
  float v221;
  uint64_t v222;
  float v223;
  double v224;
  uint64_t v225;
  uint64_t v226;
  float *v227;
  float *v228;
  float *v229;
  float *v230;
  float *v231;
  char *v232;
  float *v233;
  float *v234;
  float *v235;
  float *v236;
  float *v237;
  char *v238;
  uint64_t v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  char v256;
  int v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unsigned __int32 v263;
  __n128 v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  int64x2_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  __n128 *v293;
  __int128 *v294;
  uint64_t v295;
  _BOOL4 v296;
  size_t __len;
  size_t __lena;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  BOOL v311;
  float *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  float *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  float *v321;
  unint64_t v322;
  unint64_t v323;
  float32x4_t *v324;
  int64x2_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  int64x2_t v329;
  float *v330;
  uint64_t v331;
  int64x2_t v332;
  int64x2_t v333;
  uint64_t v334;
  __n128 v335;
  __n128 v336;
  __n128 v337;
  __n128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned __int32 v359;
  uint64_t v360;

  v360 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) != 0)
    return;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 64) + 7) >> 3;
  v7.i64[0] = a2 % v6;
  v7.i64[1] = a2 / v6;
  v8 = vshlq_n_s64(v7, 3uLL);
  v9 = (int8x16_t)vaddq_s64(v8, vdupq_n_s64(8uLL));
  v10 = vsubq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v9, *(uint64x2_t *)(*(_QWORD *)(v3 + 8) + 64)), *(int8x16_t *)(*(_QWORD *)(v3 + 8) + 64), v9), v8);
  v279 = v8;
  v332 = v8;
  v333 = v10;
  v281 = v3;
  if (*(int *)(v5 + 48) <= 3)
  {
    v329 = v10;
    sub_236825474(*(_QWORD *)(v3 + 24), (uint64_t)&v332, **(_QWORD **)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), 0, 0, 0, 0, a3, *(_QWORD **)(v3 + 56));
    v3 = v281;
    v10 = v329;
  }
  v11 = v10.u64[1];
  v12 = v10.i64[0];
  v13 = *(float **)(v3 + 64);
  v313 = *(_QWORD *)(v3 + 72);
  v14 = *(_QWORD *)v13;
  v320 = v10.u64[1];
  v322 = v10.i64[0];
  if (*(int *)(*(_QWORD *)v13 + 48) >= 6)
  {
    if (v10.i64[1])
    {
      v16 = v10.i64[1];
      v15 = v10.i64[0];
      if (v10.i64[0] <= 1uLL)
        v17 = 1;
      else
        v17 = v10.i64[0];
      v18 = v279.i64[1];
      do
      {
        if (v15)
        {
          memset((void *)(*(_QWORD *)(v313 + 24) + *(_QWORD *)(v313 + 16) * v18 + v279.i64[0]), 1, v17);
          v15 = v322;
        }
        ++v18;
        --v16;
      }
      while (v16);
    }
    goto LABEL_141;
  }
  v19 = *(_QWORD *)(v3 + 56);
  v330 = v13 + 2;
  v20 = *(float *)v14;
  v327 = *((_QWORD *)v13 + 15) + 4 * *((_QWORD *)v13 + 14) * a3;
  v324 = (float32x4_t *)(v327 + 786432);
  v21 = *(float *)(v19 + 100);
  *(float *)&v355 = *(float *)(v19 + 104)
                  + (float)((float)*(char *)(*(_QWORD *)(v19 + 24)
                                           + *(_QWORD *)(v19 + 16) * ((unint64_t)v279.i64[1] >> 3)
                                           + ((unint64_t)v279.i64[0] >> 3))
                          * v21);
  DWORD1(v355) = 0;
  *((float *)&v355 + 2) = *(float *)(v19 + 108)
                        + (float)((float)*(char *)(*(_QWORD *)(v19 + 64)
                                                 + *(_QWORD *)(v19 + 56) * ((unint64_t)v279.i64[1] >> 3)
                                                 + ((unint64_t)v279.i64[0] >> 3))
                                * v21);
  v22 = 0uLL;
  v353 = 0u;
  v354 = 0u;
  v351 = 0u;
  v352 = 0u;
  v349 = 0u;
  v350 = 0u;
  v347 = 0u;
  v348 = 0u;
  v345 = 0u;
  v346 = 0u;
  v343 = 0u;
  v344 = 0u;
  v341 = 0u;
  v342 = 0u;
  v339 = 0u;
  v340 = 0u;
  v308 = v14;
  if (v11)
  {
    v23 = 0;
    if (v20 >= 12.0)
    {
      v25 = 1.0;
    }
    else
    {
      v24 = 8.0 / (v20 + -4.0);
      v25 = v24;
    }
    if (v12 <= 1)
      v26 = 1;
    else
      v26 = v12;
    v302 = v26;
    v27 = v12;
    do
    {
      if (v27)
      {
        v28 = 0;
        v318 = v23 + v279.i64[1];
        v29 = 8 * (v23 + v279.i64[1]);
        v299 = v23;
        v315 = 8 * v23;
        do
        {
          v30 = 0;
          v31 = *(_DWORD *)(v14 + 48);
          v32 = (double *)&qword_2369216D8;
          v33 = 1.0e30;
          do
          {
            v34 = *((unsigned int *)v32 - 2);
            v35 = v32 - 1;
            if (*((_DWORD *)v32 - 1) >= v31)
            {
              v36 = *v32;
              v335.n128_u64[0] = v34 | 0x100000000;
              v22.n128_f64[0] = v36 / 0.8;
              v22.n128_f32[0] = v22.n128_f64[0];
              if (v20 >= 5.0 || (v34 - 1) > 1)
              {
                v37 = v20 > 4.0 && v34 >= 3;
                if (v37)
                  v22.n128_f32[0] = v22.n128_f32[0] + (float)(v25 * 0.5);
              }
              else
              {
                v22.n128_f32[0] = v22.n128_f32[0]
                                + (float)((float)((float)((float)(5.0 - v20) / 5.0) * (float)((float)(5.0 - v20) / 5.0))
                                        * -0.4);
              }
              v22.n128_f64[0] = sub_23680EE9C((float *)&v335, 8 * (v28 + v279.i64[0]), v29, v330, (uint64_t)&v355, v327, v324, v22);
              if (v33 > v22.n128_f64[0])
              {
                v30 = v34;
                v33 = v22.n128_f64[0];
              }
            }
            v32 += 2;
          }
          while (v35 + 2 != (double *)&unk_236921770);
          v38 = v33;
          sub_2367E43F8(v313, v28 + v279.i64[0], v318, v30, 0);
          *((float *)&v339 + v28 + v315) = (float)((float)(-0.4 / (float)(v20 + 1.4)) + 1.0) * v38;
          ++v28;
          v14 = v308;
        }
        while (v28 != v302);
        v11 = v320;
        v27 = v322;
        v23 = v299;
      }
      ++v23;
    }
    while (v23 < v11);
    v39 = v11;
    v22 = 0uLL;
  }
  else
  {
    v39 = 0;
  }
  v40 = 0;
  v337 = v22;
  v338 = v22;
  v335 = v22;
  v336 = v22;
  v291 = *(_QWORD *)(v14 + 56);
  do
  {
    v41 = (float *)((char *)&unk_236921770 + 12 * v40);
    if (*(_QWORD *)(v14 + 56) > (unint64_t)*((unsigned __int8 *)v41 + 5))
      goto LABEL_115;
    v42 = *(unsigned int *)v41;
    v43 = byte_236926677[v42];
    if (v43 - 1 >= v39)
      goto LABEL_115;
    v44 = 0;
    v45 = *((unsigned __int8 *)v41 + 4);
    v46 = v41[2];
    v47 = byte_23692665C[v42];
    v48 = v47 - 1;
    if (v47 <= 1)
      v49 = 1;
    else
      v49 = byte_23692665C[v42];
    if (v43 <= 1)
      v50 = 1;
    else
      v50 = byte_236926677[v42];
    v51 = 32 * v43;
    v52 = 8 * v43;
    v292 = v50;
    v53 = 32 * v50;
    v54 = &v339;
    v55 = &v335;
    v56 = byte_236926677[v42];
    v290 = v56;
    __len = v49;
    v283 = v53;
    v284 = 4 * v49;
    v288 = 8 * v43;
    v289 = 32 * v43;
    do
    {
      v57 = v44;
      v44 = v56;
      if (v48 >= v322)
        goto LABEL_114;
      v295 = v56;
      v58 = 0;
      v59 = (_DWORD)v42 == 10;
      v60 = v57 + 7;
      v62 = (v57 & 1) == 0 || (_DWORD)v42 != 7;
      v296 = v62;
      v63 = (v57 & 3) != 0 && (_DWORD)v42 == 11;
      v64 = v63;
      v316 = v64;
      v306 = v57 + 3;
      v300 = v57 + 1;
      v303 = v57;
      if (v63)
        v59 = 1;
      v311 = v59;
      v286 = v57 + v279.i64[1];
      v287 = 8 * (v57 + v279.i64[1]);
      v285 = 8 * v57;
      v293 = v55;
      v294 = v54;
      v65 = v47;
      v66 = v322;
      do
      {
        v67 = v58;
        v58 = v65;
        if (v67 + 7 >= v66 || v60 >= v320)
        {
          if ((v316 & 1) != 0 || (_DWORD)v42 == 10 && (v67 & 3) != 0)
            goto LABEL_103;
        }
        else
        {
          if (*(_QWORD *)(v14 + 56) <= 3uLL && (_DWORD)v42 == 20)
          {
            if (((v67 | v57) & 7) != 0)
              goto LABEL_103;
            sub_236813678(8uLL, 1, v279.i64[0], v279.i64[1], v67, v57, v330, (uint64_t)&v355, v46, 2.26, v313, (uint64_t)&v339, v327, v324);
            goto LABEL_91;
          }
          if (v311)
            goto LABEL_103;
        }
        if (v67 + 3 < v322 && v306 < v320)
        {
          if ((_DWORD)v42 == 11)
          {
            if (((v67 | v57) & 3) != 0)
              goto LABEL_103;
            sub_236813678(4uLL, v291 < 4, v279.i64[0], v279.i64[1], v67, v57, v330, (uint64_t)&v355, v46, 1.5, v313, (uint64_t)&v339, v327, v324);
LABEL_91:
            v14 = v308;
LABEL_92:
            v57 = v303;
            goto LABEL_103;
          }
          if ((_DWORD)v42 == 10)
            goto LABEL_103;
        }
        if (v67 + 1 >= v322 || v300 >= v320)
        {
          if (!v296 || (_DWORD)v42 == 6 && (v67 & 1) != 0)
            goto LABEL_103;
        }
        else
        {
          if ((_DWORD)v42 == 6)
            goto LABEL_103;
          if ((_DWORD)v42 == 7)
          {
            if (((v67 | v57) & 1) != 0)
              goto LABEL_103;
            sub_236813678(2uLL, 1, v279.i64[0], v279.i64[1], v67, v57, v330, (uint64_t)&v355, v46, 1.35, v313, (uint64_t)&v339, v327, v324);
            goto LABEL_91;
          }
        }
        v70 = 0;
        v334 = v42 | 0x100000000;
        v71 = 0.0;
        v72 = v55;
        v73 = (float *)v54;
LABEL_106:
        v74 = v72;
        v75 = v73;
        v76 = __len;
        while (1)
        {
          v77 = v74->n128_u8[0];
          v74 = (__n128 *)((char *)v74 + 1);
          if (v77 >= v45)
            break;
          v78 = *v75++;
          v71 = v71 + v78;
          if (!--v76)
          {
            ++v70;
            v73 += 8;
            v72 = (__n128 *)((char *)v72 + 8);
            if (v70 != v292)
              goto LABEL_106;
            v22.n128_f32[0] = v46;
            v79 = sub_23680EE9C((float *)&v334, 8 * (v67 + v279.i64[0]), v287, v330, (uint64_t)&v355, v327, v324, v22);
            v14 = v308;
            v57 = v303;
            if (v79 < v71)
            {
              v280 = v40;
              v80 = 0;
              v81 = v55;
              do
              {
                bzero(&v54[v80 / 0x10], v284);
                memset(v81, v45, __len);
                v80 += 32;
                v81 = (__n128 *)((char *)v81 + 8);
              }
              while (v283 != v80);
              sub_2367E43F8(v313, v67 + v279.i64[0], v286, v42, 0);
              *((float *)&v339 + v285 + v67) = v79;
              v14 = v308;
              v40 = v280;
              goto LABEL_92;
            }
            break;
          }
        }
LABEL_103:
        v65 = v58 + v47;
        v54 = (__int128 *)((char *)v54 + 4 * v47);
        v55 = (__n128 *)((char *)v55 + v47);
        v66 = v322;
      }
      while (v58 + v47 - 1 < v322);
      v39 = v320;
      v48 = v47 - 1;
      v43 = v290;
      v54 = v294;
      v44 = v295;
      v52 = v288;
      v51 = v289;
      v55 = v293;
LABEL_114:
      v56 = v44 + v43;
      v54 = (__int128 *)((char *)v54 + v51);
      v55 = (__n128 *)((char *)v55 + v52);
    }
    while (v44 + v43 - 1 < v39);
LABEL_115:
    ++v40;
  }
  while (v40 != 9);
  if (*(int *)(v14 + 48) <= 4 && v39 >= 2)
  {
    v83 = 0;
    v84 = 1;
    do
    {
      v85 = v83;
      v83 = v84;
      if (v322 >= 2)
      {
        v86 = 0;
        do
        {
          if (((v86 | v85) & 1) != 0)
            sub_236813678(2uLL, 1, v279.i64[0], v279.i64[1], v86, v85, v330, (uint64_t)&v355, 1.25, 1.35, v313, (uint64_t)&v339, v327, v324);
          v87 = v86 + 2;
          ++v86;
        }
        while (v87 < v322);
        v39 = v320;
      }
      v84 = v83 + 1;
    }
    while (v83 + 1 < v39);
    if (*(int *)(v308 + 48) < 1)
      v88 = 1;
    else
      v88 = 2;
    if (v39 >= 4)
    {
      v89 = 0;
      do
      {
        if (v322 >= 4)
        {
          for (i = 3; i < v322; i += v88)
          {
            if ((((i - 3) | v89) & 3) != 0)
              sub_236813678(4uLL, v291 < 4, v279.i64[0], v279.i64[1], i - 3, v89, v330, (uint64_t)&v355, 1.5, 1.5, v313, (uint64_t)&v339, v327, v324);
          }
          v39 = v320;
        }
        v89 += v88;
      }
      while (v89 + 3 < v39);
    }
  }
LABEL_141:
  v91 = *(_QWORD *)(v281 + 16);
  v92 = *(_QWORD *)(v281 + 104);
  v93 = *(float *)v91;
  v94 = *(_DWORD *)(v91 + 48);
  if (v93 < 0.5 || v94 > 4 || *(_DWORD *)(*(_QWORD *)(v281 + 88) + 452) == 0)
  {
    if (v320)
    {
      v97 = v322;
      if (v322 <= 1)
        v98 = 1;
      else
        v98 = v322;
      v99 = v279.i64[1];
      do
      {
        if (v97)
        {
          memset((void *)(*(_QWORD *)(v92 + 24) + *(_QWORD *)(v92 + 16) * v99 + v279.i64[0]), 4, v98);
          v97 = v322;
        }
        ++v99;
        --v320;
      }
      while (v320);
    }
  }
  else
  {
    v100 = *(unint64_t **)(v281 + 40);
    v101 = **(unsigned int ***)(v281 + 32);
    __lena = *(_QWORD *)(v281 + 72);
    v301 = *(_QWORD *)(v281 + 96);
    v102 = **(_QWORD **)(v281 + 80);
    v103 = v102 + 120 * a3;
    v331 = *(_QWORD *)(v92 + 16);
    v105 = *v100;
    v104 = v100[1];
    v304 = *(_QWORD *)(v281 + 104);
    if (!*(_DWORD *)v103)
    {
      sub_2367C431C((uint64_t)&v339, 0x44u, 0x44u);
      if (DWORD2(v341))
        goto LABEL_324;
      v258 = v340;
      *((_QWORD *)&v340 + 1) = 0;
      v259 = v341;
      *(_OWORD *)v103 = v339;
      v260 = *(_QWORD *)(v103 + 24);
      *(_OWORD *)(v103 + 16) = v258;
      if (v260)
      {
        v261 = -*(_QWORD *)(v260 - 24);
        do
          v262 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v262 + v261, &qword_2564313D8));
        free(*(void **)(v260 - 32));
      }
      *(_QWORD *)(v103 + 32) = v259;
      sub_2367C431C((uint64_t)&v335, 0x10u, 0x10u);
      v263 = v337.n128_u32[2];
      if (!v337.n128_u32[2])
      {
        v264 = v336;
        v336.n128_u64[1] = 0;
        v265 = v337.n128_u64[0];
        v266 = v102 + 120 * a3;
        *(__n128 *)(v266 + 40) = v335;
        v267 = *(_QWORD *)(v266 + 64);
        *(__n128 *)(v266 + 56) = v264;
        if (v267)
        {
          v268 = -*(_QWORD *)(v267 - 24);
          do
            v269 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v269 + v268, &qword_2564313D8));
          free(*(void **)(v267 - 32));
        }
        *(_QWORD *)(v102 + 120 * a3 + 72) = v265;
        sub_2367C431C((uint64_t)&v355, 0x11u, 0x11u);
        v263 = v359;
        if (!v359)
        {
          v270 = v357;
          v271 = v358;
          v272 = v102 + 120 * a3;
          *(_OWORD *)(v272 + 80) = v355;
          *(_QWORD *)(v272 + 96) = v356;
          sub_2367C5200((uint64_t *)(v272 + 104), v270);
          *(_QWORD *)(v272 + 112) = v271;
          v357 = 0;
        }
        if (!v337.n128_u32[2])
        {
          v273 = v336.n128_u64[1];
          v336.n128_u64[1] = 0;
          if (v273)
          {
            v274 = -*(_QWORD *)(v273 - 24);
            do
              v275 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v275 + v274, &qword_2564313D8));
            free(*(void **)(v273 - 32));
          }
        }
      }
      if (!DWORD2(v341))
      {
        v276 = *((_QWORD *)&v340 + 1);
        *((_QWORD *)&v340 + 1) = 0;
        if (v276)
        {
          v277 = -*(_QWORD *)(v276 - 24);
          do
            v278 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v278 + v277, &qword_2564313D8));
          free(*(void **)(v276 - 32));
        }
      }
      if (v263)
      {
LABEL_324:
        atomic_store(1u, *(unsigned __int8 **)v281);
        return;
      }
    }
    v106 = v279.i64[0] + (v105 >> 3);
    v107 = v106 + v322;
    v108 = v279.i64[1] + (v104 >> 3);
    v109 = v108 + v320;
    v110 = 8 * v108;
    v111 = 8 * v108 - 2;
    if (!v108)
      v111 = 0;
    v112 = 8 * v109;
    if (8 * v109 != v101[1])
      v112 = (8 * v109) | 2;
    v113 = 8 * v106;
    if (8 * v107 == *v101)
      v114 = 8 * v107;
    else
      v114 = (8 * v107) | 2;
    if (v111 < v112)
    {
      do
      {
        v115 = 0;
        v116 = v111;
        v117 = *(_QWORD *)(v103 + 24) + *(_QWORD *)(v103 + 16) * (v111 - v110 + 2);
        v339 = 0uLL;
        *(_QWORD *)&v340 = 0;
        v335 = 0uLL;
        v336.n128_u64[0] = 0;
        v355 = 0uLL;
        v356 = 0;
        v37 = v111 != 0;
        v118 = v111 - 1;
        if (!v37)
          v118 = 0;
        v119 = *((_QWORD *)v101 + 2);
        v120 = v119 * v118;
        v111 = v116 + 1;
        v121 = v119 * v116;
        if (v116 + 1 < v101[1])
          ++v116;
        v122 = v116 * v119;
        v123 = (uint64_t *)(v101 + 6);
        do
        {
          v124 = *v123;
          v123 += 5;
          *(_QWORD *)((char *)&v339 + v115 * 8) = v124 + v120;
          v335.n128_u64[v115] = v124 + v121;
          *(_QWORD *)((char *)&v355 + v115 * 8) = v124 + v122;
          ++v115;
        }
        while (v115 != 3);
        v125 = v113 - 2;
        if (!v106)
        {
          v126 = 0;
          v128 = 0.0;
          do
          {
            v129 = (float *)v335.n128_u64[v126];
            v127 = *v101 > 1;
            v130 = (float)(flt_236921F88[v126]
                         * (float)(*(float *)(*((_QWORD *)&v339 + v126) + 4 * v127)
                                 + (float)(**((float **)&v339 + v126)
                                         + (float)((float)(*(float *)(*((_QWORD *)&v355 + v126) + 4 * v127)
                                                         + (float)(**((float **)&v355 + v126)
                                                                 + (float)((float)(*v129 + v129[v127])
                                                                         + **((float **)&v355 + v126))))
                                                 + **((float **)&v339 + v126)))))
                 + (float)(flt_236921F7C[v126] * *v129);
            v128 = v128 + (float)(v130 * v130);
            ++v126;
          }
          while (v126 != 3);
          *(float *)(v117 + 4 * (2 - v113)) = v128;
          v125 = 1;
        }
        v131 = v125 + 4;
        if (v125 + 4 <= v114)
        {
          while (1)
          {
            v132 = v131;
            if (v125 + 5 > (unint64_t)*v101)
              break;
            v133 = 0;
            v134 = 0uLL;
            do
            {
              v135 = v335.n128_u64[v133] + 4 * v125;
              v136 = *(float32x4_t *)(v135 - 4);
              v137 = *(float32x4_t *)(v135 + 4);
              v138 = vmulq_n_f32(*(float32x4_t *)v135, flt_236921F7C[v133]);
              v139 = *((_QWORD *)&v339 + v133) + 4 * v125;
              v140 = *(float32x4_t *)(v139 - 4);
              v141 = *(float32x4_t *)v139;
              v142 = vaddq_f32(v136, *(float32x4_t *)(v139 + 4));
              v143 = *((_QWORD *)&v355 + v133) + 4 * v125;
              v144 = vmlaq_n_f32(v138, vaddq_f32(vaddq_f32(v142, vaddq_f32(v137, *(float32x4_t *)(v143 - 4))), vaddq_f32(vaddq_f32(v140, *(float32x4_t *)v143), vaddq_f32(v141, *(float32x4_t *)(v143 + 4)))), flt_236921F88[v133]);
              v134 = vmlaq_f32(v134, v144, v144);
              ++v133;
            }
            while (v133 != 3);
            *(float32x4_t *)(v117 - 32 * v106 + 8 + 4 * v125) = v134;
            v131 = v132 + 4;
            v125 = v132;
            if (v132 + 4 > v114)
              goto LABEL_183;
          }
        }
        v132 = v125;
LABEL_183:
        if (v132 < v114)
        {
          v145 = *v101;
          do
          {
            v146 = 0;
            if (v132)
              v147 = v132 - 1;
            else
              v147 = 0;
            v148 = v132 + 1;
            if (v132 + 1 >= v145)
              v149 = v132;
            else
              v149 = v132 + 1;
            v150 = 0.0;
            do
            {
              v151 = v335.n128_u64[v146];
              v152 = *((_QWORD *)&v355 + v146);
              v153 = (float)(flt_236921F88[v146]
                           * (float)((float)((float)((float)((float)((float)((float)(*(float *)(v151 + 4 * v147)
                                                                                   + *(float *)(v151 + 4 * v149))
                                                                           + *(float *)(v152 + 4 * v147))
                                                                   + *(float *)(v152 + 4 * v132))
                                                           + *(float *)(v152 + 4 * v149))
                                                   + *(float *)(*((_QWORD *)&v339 + v146) + 4 * v147))
                                           + *(float *)(*((_QWORD *)&v339 + v146) + 4 * v132))
                                   + *(float *)(*((_QWORD *)&v339 + v146) + 4 * v149)))
                   + (float)(flt_236921F7C[v146] * *(float *)(v151 + 4 * v132));
              v150 = v150 + (float)(v153 * v153);
              ++v146;
            }
            while (v146 != 3);
            *(float *)(v117 + 4 * (v132 - v113) + 8) = v150;
            ++v132;
          }
          while (v148 != v114);
        }
      }
      while (v111 != v112);
    }
    v154 = v102 + 120 * a3;
    v155 = *(float **)(v154 + 64);
    v156 = *(_QWORD *)(v154 + 56) >> 2;
    v325 = v333;
    v157 = 2 * v333.i64[1];
    v159 = *(_QWORD *)(v103 + 16);
    v158 = *(_QWORD *)(v103 + 24);
    v160 = 2 * v333.i64[0];
    v161 = 4 * v159;
    if (2 * v333.i64[1])
    {
      v162 = 0;
      v163 = v158 + 2 * v159;
      do
      {
        v164 = 0;
        v339 = 0uLL;
        v340 = 0uLL;
        v165 = v163;
        do
        {
          *(_QWORD *)((char *)&v339 + v164) = v165;
          v164 += 8;
          v165 += v159;
        }
        while (v164 != 32);
        if (v160)
        {
          for (j = 0; j != v160; ++j)
          {
            v167 = 0;
            v168 = 0uLL;
            do
            {
              v168 = vaddq_f32(v168, *(float32x4_t *)(*(_QWORD *)((char *)&v339 + v167) + 16 * j + 8));
              v167 += 8;
            }
            while (v167 != 32);
            v169 = (int32x2_t)vpaddq_f32(v168, v168).u64[0];
            *(float *)v169.i32 = vaddv_f32((float32x2_t)v169);
            v155[v162 * v156 + j] = 0.25 * vsqrtq_f32((float32x4_t)vdupq_lane_s32(v169, 0)).f32[0];
          }
        }
        ++v162;
        v163 += v161;
      }
      while (v162 != v157);
    }
    v321 = v155;
    v170 = 0;
    v171 = v102 + 120 * a3;
    v172 = *(_QWORD *)(v171 + 104);
    v173 = *(_QWORD *)(v171 + 96) >> 2;
    v174 = v157 | 1;
    v175 = v160 | 1;
    v176 = -8 * v106;
    v178 = *v101;
    v177 = v101[1];
    do
    {
      v179 = 0;
      v339 = 0uLL;
      v340 = 0uLL;
      v180 = 4 * v170;
      v181 = v158;
      do
      {
        *(_QWORD *)((char *)&v339 + v179) = v181;
        v179 += 8;
        v181 += v159;
      }
      while (v179 != 32);
      v182 = 0;
      v183 = 2 * (v180 + v110 == 0);
      if (((v180 + v110) | 2uLL) <= v177)
        v184 = 4;
      else
        v184 = v177 + 2 - (v180 + v110);
      v185 = v184 - 2 * (v180 + v110 == 0);
      do
      {
        v186 = (4 * v182) | 2;
        if (4 * v182 != v176)
          v186 = 4 * v182;
        if (((v113 + 4 * v182) | 2uLL) <= v178)
          v187 = 4 * v182 + 4;
        else
          v187 = v178 - v113 + 2;
        if (v187 - v186 == 4 && v185 == 4)
        {
          v193 = 0uLL;
          if (v184 > v183)
          {
            v194 = v183;
            do
            {
              if (v187 > v186)
              {
                v195 = (float32x4_t *)(*((_QWORD *)&v339 + v194) + 4 * v186);
                v196 = v186;
                do
                {
                  v197 = *v195++;
                  v193 = vaddq_f32(v193, v197);
                  v196 += 4;
                }
                while (v196 < v187);
              }
              ++v194;
            }
            while (v194 < v184);
          }
          v198 = (int32x2_t)vpaddq_f32(v193, v193).u64[0];
          *(float *)v198.i32 = vaddv_f32((float32x2_t)v198);
          v192 = 0.25 * vsqrtq_f32((float32x4_t)vdupq_lane_s32(v198, 0)).f32[0];
        }
        else
        {
          v189 = 0.0;
          if (v184 > v183)
          {
            v190 = v183;
            do
            {
              if (v187 > v186)
              {
                v191 = v186;
                do
                  v189 = v189 + *(float *)(*((_QWORD *)&v339 + v190) + 4 * v191++);
                while (v191 < v187);
              }
              ++v190;
            }
            while (v190 < v184);
          }
          v192 = sqrtf(v189 / (float)((v187 - v186) * v185));
        }
        *(float *)(v172 + 4 * v170 * v173 + 4 * v182++) = v192;
      }
      while (v182 != v175);
      ++v170;
      v158 += v161;
    }
    while (v170 != v174);
    v319 = v332.u64[1];
    v305 = v332.i64[1] + v325.i64[1];
    if (v332.i64[1] < (unint64_t)(v332.i64[1] + v325.i64[1]))
    {
      v307 = v332.i64[0];
      v328 = v332.i64[0] + v325.i64[0];
      v199 = 8 * v156;
      v200 = 4 * v156;
      v317 = v155 + 1;
      v201 = 8 * v173;
      v312 = (float *)(v172 + 4);
      v314 = (uint64_t)&v155[v156 + 1];
      v309 = v172 + 4 + 8 * v173;
      v310 = v172 + 4 + 4 * v173;
      do
      {
        if (v307 < v328)
        {
          v202 = v317;
          v326 = *(_QWORD *)(__lena + 24) + *(_QWORD *)(__lena + 16) * v319;
          v323 = *(_QWORD *)(v301 + 24) + *(_QWORD *)(v301 + 16) * v319;
          v204 = v307;
          v203 = v309;
          v205 = (char *)(*(_QWORD *)(v304 + 24) + v307 + *(_QWORD *)(v304 + 16) * v319);
          v206 = v310;
          v207 = v312;
          v208 = v314;
          v209 = v321;
          do
          {
            v210 = *(unsigned __int8 *)(v326 + v204);
            if ((v210 & 1) != 0)
            {
              v211 = 0;
              v212 = v210 >> 1;
              v213 = byte_236926677[v210 >> 1];
              v214 = 2 * v213;
              v215 = byte_23692665C[v212];
              v216 = 2 * v215;
              if (2 * v215 <= 1)
                v216 = 1;
              if (v214 <= 1)
                v214 = 1;
              v217 = 0.0;
              v218 = v209;
              do
              {
                v219 = v218;
                v220 = v216;
                do
                {
                  v221 = *v219++;
                  v217 = v217 + (float)(v221 * v221);
                  --v220;
                }
                while (v220);
                ++v211;
                v218 = (float *)((char *)v218 + v200);
              }
              while (v211 != v214);
              v222 = 0;
              v223 = (float)(1.0 / *(float *)(v323 + 4 * v204)) * 0.0625;
              v224 = sqrtf(v217 / (float)(4 * v213 * v215)) + v223 * 3.25000005;
              if (v215 <= 1)
                v225 = 1;
              else
                v225 = v215;
              if (v213 <= 1)
                v226 = 1;
              else
                v226 = v213;
              v227 = v207;
              v228 = (float *)v203;
              v229 = (float *)v206;
              v230 = (float *)v208;
              v231 = v202;
              v232 = v205;
              do
              {
                v233 = v227;
                v234 = v228;
                v235 = v229;
                v236 = v230;
                v237 = v231;
                v238 = v232;
                v239 = v225;
                do
                {
                  v240 = *(v237 - 1);
                  v241 = *(v236 - 1);
                  v242 = *v236;
                  if (*v237 >= v240)
                    v243 = *(v237 - 1);
                  else
                    v243 = *v237;
                  if (v242 >= v241)
                    v244 = *(v236 - 1);
                  else
                    v244 = *v236;
                  if (v244 < v243)
                    v243 = v244;
                  v245 = *v235;
                  v246 = v235[1];
                  if (*v235 < v243)
                    v243 = *v235;
                  v247 = *(v233 - 1);
                  if (*v233 < v247)
                    v247 = *v233;
                  v248 = *(v235 - 1);
                  if (v248 >= v233[1])
                    v248 = v233[1];
                  if (v246 >= v245)
                    v246 = *v235;
                  v249 = *(v234 - 1);
                  if (*v234 < v249)
                    v249 = *v234;
                  if (v248 < v247)
                    v247 = v248;
                  if (v249 < v246)
                    v246 = v249;
                  if (v246 >= v247)
                    v246 = v247;
                  if (v234[1] < v246)
                    v246 = v234[1];
                  if (v246 >= v243)
                    v250 = v243;
                  else
                    v250 = v246;
                  v251 = (float)(v243 * 0.125) + (float)(v250 * 0.625);
                  if (v245 >= (float)(v250 * 1.5))
                    v245 = v250 * 1.5;
                  v252 = (float)(v251 + (float)(v245 * 0.125)) + (float)(v246 * 0.125);
                  v253 = v224 / (float)(v223 + v252);
                  v254 = (float)((float)((float)((float)(v240 + *v237) + v241) + v242) + v252) * 0.2;
                  if (v253 > 3.2 || v254 < (float)(v223 * 0.085))
                    v256 = 4;
                  else
                    v256 = 0;
                  *v238++ = v256;
                  v237 += 2;
                  v236 += 2;
                  v235 += 2;
                  v234 += 2;
                  v233 += 2;
                  --v239;
                }
                while (v239);
                ++v222;
                v232 += v331;
                v231 = (float *)((char *)v231 + v199);
                v230 = (float *)((char *)v230 + v199);
                v229 = (float *)((char *)v229 + v201);
                v228 = (float *)((char *)v228 + v201);
                v227 = (float *)((char *)v227 + v201);
              }
              while (v222 != v226);
            }
            ++v204;
            v209 += 2;
            ++v205;
            v202 += 2;
            v208 += 8;
            v206 += 8;
            v203 += 8;
            v207 += 2;
          }
          while (v204 < v328);
        }
        ++v319;
        v321 = (float *)((char *)v321 + v199);
        v317 = (float *)((char *)v317 + v199);
        v314 += v199;
        v310 += v201;
        v309 += v201;
        v312 = (float *)((char *)v312 + v201);
      }
      while (v319 < v305);
    }
  }
  sub_236813F1C(*(_QWORD *)(*(_QWORD *)(v281 + 72) + 16), *(_QWORD *)(*(_QWORD *)(v281 + 72) + 24), v332.i64, *(_QWORD *)(v281 + 96), **(float **)(v281 + 16));
  sub_236806404(*(_QWORD *)(v281 + 112), *(_QWORD *)(*(_QWORD *)(v281 + 96) + 16), *(_QWORD *)(*(_QWORD *)(v281 + 96) + 24), &v332, *(_QWORD *)(v281 + 120));
  v257 = *(_DWORD *)(*(_QWORD *)(v281 + 16) + 48);
  if (v257 <= 5)
    sub_236825474(*(_QWORD *)(v281 + 24), (uint64_t)&v332, **(_QWORD **)(v281 + 32), *(_QWORD *)(v281 + 40), *(_QWORD *)(v281 + 48), *(_QWORD *)(v281 + 72), *(_QWORD *)(v281 + 120), *(_QWORD *)(v281 + 112), v257 > 3, a3, *(_QWORD **)(v281 + 56));
}

void sub_23684651C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  uint64_t a70;
  int a72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;

  if (!a64 && a62)
  {
    v73 = -*(_QWORD *)(a62 - 24);
    do
      v74 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v74 + v73, &qword_2564313D8));
    free(*(void **)(a62 - 32));
  }
  if (!a72 && a70)
  {
    v75 = -*(_QWORD *)(a70 - 24);
    do
      v76 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v76 + v75, &qword_2564313D8));
    free(*(void **)(a70 - 32));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368465B0(uint64_t result, unint64_t a2, unsigned __int8 *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t i;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  uint64_t j;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int8 v78;
  unint64_t k;
  char v80;
  unsigned __int8 *v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *m;
  int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[2];
  int v104;
  _QWORD v105[2];
  __int16 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v101 = 0u;
  v102 = 0u;
  if (!a2)
  {
    v10 = 0;
    v11 = -1;
LABEL_12:
    v12 = 0;
    do
    {
      ++v12;
      v13 = v11 > 1;
      v11 >>= 1;
    }
    while (v13);
    goto LABEL_14;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    if (*(_DWORD *)(result + 4 * v9))
    {
      if (v10 > 3)
      {
        if (v10 != 4)
          break;
      }
      else
      {
        *((_QWORD *)&v101 + v10) = v9;
      }
      ++v10;
    }
    ++v9;
  }
  while (a2 != v9);
  v11 = a2 - 1;
  if (a2 != 1)
    goto LABEL_12;
  v12 = 0;
LABEL_14:
  v14 = v10 - 1;
  if (v10 <= 1)
  {
    *(_QWORD *)(a5[3] + (*a5 >> 3)) = (1 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
    v15 = *a5 + 4;
    *a5 = v15;
    v16 = v101;
    goto LABEL_16;
  }
  sub_2368AD7BC(result, a2, 15, a3);
  result = (uint64_t)sub_2368AE658(a3, a2, a4);
  if (v10 <= 4)
  {
    v18 = 0;
    *(_QWORD *)(a5[3] + (*a5 >> 3)) = (1 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
    v19 = *a5 + 2;
    *a5 = v19;
    *(_QWORD *)(a5[3] + (v19 >> 3)) = (v14 << (v19 & 7)) | *(unsigned __int8 *)(a5[3] + (v19 >> 3));
    v20 = *a5 + 2;
    *a5 = v20;
    v21 = (char *)&v101 + 8;
    do
    {
      v22 = v18 + 1;
      if (v18 + 1 < v10)
      {
        v23 = *((_QWORD *)&v101 + v18);
        v24 = (uint64_t *)v21;
        v25 = v14;
        do
        {
          v26 = *v24;
          result = a3[v23];
          if (a3[*v24] < result)
          {
            *v24 = v23;
            *((_QWORD *)&v101 + v18) = v26;
            v23 = v26;
          }
          ++v24;
          --v25;
        }
        while (v25);
      }
      --v14;
      v21 += 8;
      ++v18;
    }
    while (v22 != v10);
    v27 = v20 >> 3;
    if (v10 == 2)
    {
      v34 = *((_QWORD *)&v101 + 1);
      *(_QWORD *)(a5[3] + v27) = ((_QWORD)v101 << (v20 & 7)) | *(unsigned __int8 *)(a5[3] + v27);
      v35 = *a5 + v12;
      *a5 = v35;
      *(_QWORD *)(a5[3] + (v35 >> 3)) = (v34 << (v35 & 7)) | *(unsigned __int8 *)(a5[3] + (v35 >> 3));
      goto LABEL_17;
    }
    if (v10 != 3)
    {
      v36 = v101;
      *(_QWORD *)(a5[3] + v27) = ((_QWORD)v101 << (v20 & 7)) | *(unsigned __int8 *)(a5[3] + v27);
      v37 = *a5 + v12;
      *a5 = v37;
      *(_QWORD *)(a5[3] + (v37 >> 3)) = (*((_QWORD *)&v36 + 1) << (v37 & 7)) | *(unsigned __int8 *)(a5[3] + (v37 >> 3));
      v38 = *a5 + v12;
      *a5 = v38;
      v39 = *((_QWORD *)&v102 + 1);
      *(_QWORD *)(a5[3] + (v38 >> 3)) = ((_QWORD)v102 << (v38 & 7)) | *(unsigned __int8 *)(a5[3] + (v38 >> 3));
      v40 = *a5 + v12;
      *a5 = v40;
      *(_QWORD *)(a5[3] + (v40 >> 3)) = (v39 << (v40 & 7)) | *(unsigned __int8 *)(a5[3] + (v40 >> 3));
      v41 = *a5 + v12;
      *a5 = v41;
      *(_QWORD *)(a5[3] + (v41 >> 3)) = ((unint64_t)(a3[v36] == 1) << (v41 & 7)) | *(unsigned __int8 *)(a5[3] + (v41 >> 3));
      v17 = *a5 + 1;
      goto LABEL_18;
    }
    v28 = *((_QWORD *)&v101 + 1);
    *(_QWORD *)(a5[3] + v27) = ((_QWORD)v101 << (v20 & 7)) | *(unsigned __int8 *)(a5[3] + v27);
    v29 = *a5 + v12;
    *a5 = v29;
    *(_QWORD *)(a5[3] + (v29 >> 3)) = (v28 << (v29 & 7)) | *(unsigned __int8 *)(a5[3] + (v29 >> 3));
    v15 = *a5 + v12;
    *a5 = v15;
    v16 = v102;
LABEL_16:
    *(_QWORD *)(a5[3] + (v15 >> 3)) = (v16 << (v15 & 7)) | *(unsigned __int8 *)(a5[3] + (v15 >> 3));
LABEL_17:
    v17 = *a5 + v12;
LABEL_18:
    *a5 = v17;
    return result;
  }
  v30 = operator new[]();
  v31 = (unsigned __int8 *)v30;
  if (!a2)
    goto LABEL_111;
  v32 = v30 + a2;
  v33 = a2;
  while (!a3[v33 - 1])
  {
    if (!--v33)
    {
      if (a2 > 0x32)
      {
        v33 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 2;
        v55 = 2;
        goto LABEL_57;
      }
      goto LABEL_111;
    }
  }
  if (a2 <= 0x32)
  {
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v42 = 0;
    v53 = 0;
    v52 = 0;
    v43 = 1;
    v44 = 1;
    do
    {
      v45 = a3[v42];
      if (v42 + 1 >= v33)
      {
        ++v42;
        v46 = 1;
      }
      else
      {
        v46 = 1;
        while (a3[v42 + v46] == v45)
        {
          if (v33 - v42 == ++v46)
          {
            v46 = v33 - v42;
            break;
          }
        }
        v42 += v46;
      }
      v47 = v45 == 0;
      v48 = !v47;
      v49 = (v46 > 2) & v47;
      if ((_DWORD)v49)
        v50 = v46;
      else
        v50 = 0;
      v52 += v50;
      v44 += v49;
      v51 = (v46 > 3) & v48;
      if (((v46 > 3) & v48) == 0)
        v46 = 0;
      v53 += v46;
      v43 += v51;
    }
    while (v42 < v33);
    v55 = 2 * v43;
    v54 = 2 * v44;
LABEL_57:
    v56 = v53 > v55;
    v57 = v52 > v54;
    if (!v33)
    {
LABEL_111:
      v58 = 0;
      v111 = 0;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      goto LABEL_112;
    }
  }
  v58 = 0;
  v59 = 0;
  v60 = 8;
  do
  {
    v61 = a3[v59];
    v62 = a3[v59] != 0;
    v63 = a3[v59] == 0;
    if (!v56)
      v63 = 1;
    if (!v57)
      v62 = 1;
    if (v63 && v62 || v59 + 1 >= v33)
    {
      v64 = 1;
      if (a3[v59])
        goto LABEL_73;
      goto LABEL_94;
    }
    v64 = 1;
    while (a3[v59 + v64] == v61)
    {
      if (v33 - v59 == ++v64)
      {
        v64 = v33 - v59;
        break;
      }
    }
    if (a3[v59])
    {
LABEL_73:
      if (v60 == v61)
      {
        v66 = v64;
      }
      else
      {
        v31[v58] = v61;
        *(_BYTE *)(v32 + v58++) = 0;
        v66 = v64 - 1;
      }
      if (v66 == 7)
      {
        v31[v58] = v61;
        *(_WORD *)(v32 + v58) = 768;
        v67 = v58 + 2;
        v31[++v58] = 16;
        goto LABEL_78;
      }
      if (v66 > 2)
      {
        v31[v58] = 16;
        v70 = v66 - 3;
        *(_BYTE *)(v32 + v58) = (v66 - 3) & 3;
        v67 = v58 + 1;
        if (v70 >= 4)
        {
          do
          {
            v71 = v67;
            v31[v67] = 16;
            v70 = (v70 >> 2) - 1;
            *(_BYTE *)(v32 + v67++) = v70 & 3;
          }
          while (v70 > 3);
          if (v71 > v58)
          {
            v72 = v58;
            do
            {
              v73 = v31[v72];
              v31[v72] = v31[v71];
              v31[v71] = v73;
              ++v72;
              --v71;
            }
            while (v72 < v71);
          }
        }
LABEL_78:
        for (i = v67 - 1; v58 < i; --i)
        {
          v69 = *(_BYTE *)(v32 + v58);
          *(_BYTE *)(v32 + v58) = *(_BYTE *)(v32 + i);
          *(_BYTE *)(v32 + i) = v69;
          ++v58;
        }
        v58 = v67;
      }
      else
      {
        for (; v66; --v66)
        {
          v31[v58] = v61;
          *(_BYTE *)(v32 + v58++) = 0;
        }
      }
      v60 = v61;
      goto LABEL_105;
    }
    if (v64 != 11)
    {
      if (v64 > 2)
      {
        v31[v58] = 17;
        v75 = v64 - 3;
        *(_BYTE *)(v32 + v58) = (v64 - 3) & 7;
        v65 = v58 + 1;
        if (v64 - 3 >= 8)
        {
          do
          {
            v76 = v65;
            v31[v65] = 17;
            v75 = (v75 >> 3) - 1;
            *(_BYTE *)(v32 + v65++) = v75 & 7;
          }
          while (v75 > 7);
          if (v76 > v58)
          {
            v77 = v58;
            do
            {
              v78 = v31[v77];
              v31[v77] = v31[v76];
              v31[v76] = v78;
              ++v77;
              --v76;
            }
            while (v77 < v76);
          }
        }
        goto LABEL_102;
      }
      if (!v64)
        goto LABEL_105;
LABEL_94:
      for (j = 0; j != v64; ++j)
      {
        v31[v58 + j] = 0;
        v31[a2 + v58 + j] = 0;
      }
      v58 += j;
      goto LABEL_105;
    }
    v31[v58] = 0;
    *(_WORD *)(v32 + v58) = 1792;
    v65 = v58 + 2;
    v31[++v58] = 17;
LABEL_102:
    for (k = v65 - 1; v58 < k; --k)
    {
      v80 = *(_BYTE *)(v32 + v58);
      *(_BYTE *)(v32 + v58) = *(_BYTE *)(v32 + k);
      *(_BYTE *)(v32 + k) = v80;
      ++v58;
    }
    v58 = v65;
LABEL_105:
    v59 += v64;
  }
  while (v59 < v33);
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  if (v58)
  {
    v81 = v31;
    v82 = v58;
    do
    {
      v83 = *v81++;
      ++*((_DWORD *)&v107 + v83);
      --v82;
    }
    while (v82);
  }
LABEL_112:
  v84 = 0;
  v85 = 0;
  v86 = 0;
  while (2)
  {
    if (!*((_DWORD *)&v107 + v84))
    {
LABEL_116:
      if (++v84 == 18)
        goto LABEL_119;
      continue;
    }
    break;
  }
  if (!v86)
  {
    v86 = 1;
    v85 = v84;
    goto LABEL_116;
  }
  v86 = 2;
LABEL_119:
  v105[0] = 0;
  v105[1] = 0;
  v106 = 0;
  v104 = 0;
  memset(v103, 0, sizeof(v103));
  sub_2368AD7BC((uint64_t)&v107, 0x12uLL, 5, v105);
  v87 = 18;
  sub_2368AE658((unsigned __int8 *)v105, 18, (uint64_t)v103);
  if (v86 >= 2)
  {
    v88 = 0x11u;
    while (!*((_BYTE *)v105 + byte_23692496E[v88]))
    {
      if (--v88 == -1)
      {
        v87 = 0;
        goto LABEL_125;
      }
    }
    v87 = v88 + 1;
  }
LABEL_125:
  v89 = 2;
  if (!BYTE3(v105[0]))
    v89 = 3;
  if (BYTE1(v105[0]) | BYTE2(v105[0]))
    v90 = 0;
  else
    v90 = v89;
  *(_QWORD *)(a5[3] + (*a5 >> 3)) = (v90 << (*a5 & 7)) | *(unsigned __int8 *)(a5[3] + (*a5 >> 3));
  v91 = *a5 + 2;
  *a5 = v91;
  v92 = v87 - v90;
  if (v87 > v90)
  {
    v93 = &byte_23692496E[v90];
    do
    {
      v94 = *v93++;
      v95 = *((unsigned __int8 *)v105 + v94);
      v96 = byte_236924980[v95];
      *(_QWORD *)(a5[3] + (v91 >> 3)) = ((unint64_t)byte_236924986[v95] << (v91 & 7)) | *(unsigned __int8 *)(a5[3] + (v91 >> 3));
      v91 = *a5 + v96;
      *a5 = v91;
      --v92;
    }
    while (v92);
  }
  if (v86 == 1)
    *((_BYTE *)v105 + v85) = 0;
  if (v58)
  {
    for (m = v31; ; ++m)
    {
      v98 = *m;
      v99 = *((unsigned __int8 *)v105 + *m);
      *(_QWORD *)(a5[3] + (v91 >> 3)) = ((unint64_t)*((unsigned __int16 *)v103 + *m) << (v91 & 7)) | *(unsigned __int8 *)(a5[3] + (v91 >> 3));
      v91 = *a5 + v99;
      *a5 = v91;
      if (v98 == 16)
        break;
      if (v98 == 17)
      {
        v100 = 3;
LABEL_141:
        *(_QWORD *)(a5[3] + (v91 >> 3)) = ((unint64_t)m[a2] << (v91 & 7)) | *(unsigned __int8 *)(a5[3] + (v91 >> 3));
        v91 = *a5 + v100;
        *a5 = v91;
      }
      if (!--v58)
        return MEMORY[0x23B7F8F30](v31, 0x1000C8077774924);
    }
    v100 = 2;
    goto LABEL_141;
  }
  return MEMORY[0x23B7F8F30](v31, 0x1000C8077774924);
}

void sub_236846FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7F8F30](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_236846FD0(unint64_t a1, size_t *a2)
{
  size_t v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;

  v4 = *a2;
  v5 = *a2 + 9;
  sub_2367E8BBC(a2, v5);
  v6 = a2[2];
  if (v6)
    v7 = v5;
  else
    v7 = 0;
  *a2 = v7;
  if (a1 < 0x80)
  {
    LOBYTE(v9) = a1;
    v8 = v4;
  }
  else
  {
    do
    {
      v8 = v4 + 1;
      *(_BYTE *)(v6 + v4) = a1 | 0x80;
      v9 = a1 >> 7;
      v10 = a1 >> 14;
      ++v4;
      a1 >>= 7;
    }
    while (v10);
  }
  *(_BYTE *)(v6 + v8) = v9;
  sub_2367E8BBC(a2, v8 + 1);
  if (a2[2])
    v11 = v8 + 1;
  else
    v11 = 0;
  *a2 = v11;
}

void sub_236847070(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13[2];
  uint64_t v14;

  sub_2367F4DE4(v13, a2);
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      *(_BYTE *)(v14 + v7) = *(_BYTE *)(a1 + v6);
      v7 += (a2 + a3 - 1) / a3;
      if (v7 >= a2)
        v7 = ++v8;
      ++v6;
    }
    while (a2 != v6);
    v9 = 0;
    v10 = v14;
    do
    {
      *(_BYTE *)(a1 + v9) = *(_BYTE *)(v10 + v9);
      ++v9;
    }
    while (a2 != v9);
    v14 = 0;
  }
  else
  {
    v10 = v14;
    v14 = 0;
    if (!v10)
      return;
  }
  v11 = -*(_QWORD *)(v10 - 24);
  do
    v12 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v12 + v11, &qword_2564313D8));
  free(*(void **)(v10 - 32));
}

uint64_t sub_236847148(unint64_t a1, unint64_t a2, int a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7, size_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  size_t v18;
  uint64_t i;
  uint64_t v22;
  char v23;

  v8 = *a7 + a4;
  v9 = *a7 - 1;
  if (v8 > a6 || v9 >= v8)
    return 1;
  if (a1 > v9 >> 2 || *a7 < 4 * a1)
    return 1;
  v18 = *a8;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v22 = *a7;
      v23 = sub_2367F643C(a5, *a7, i, a1, a2, a3);
      sub_2367F4D8C(a8, *(_BYTE *)(a5 + v22 + i) - v23);
    }
    v8 = *a7 + a4;
  }
  *a7 = v8;
  if (a2 > 1)
    sub_236847070(a8[2] + v18, a4, a2);
  return 0;
}

uint64_t sub_236847248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, _QWORD *a7, unsigned int *a8, float a9)
{
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t j;
  uint64_t k;
  uint64_t i;
  unsigned int *v23;
  _BOOL8 v24;
  unsigned __int8 v25;
  unsigned __int8 v27;
  _QWORD v28[15];
  _QWORD v29[15];
  unsigned int v30;
  BOOL v31;
  _OWORD v32[7];
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  float v36;
  _QWORD v37[2];

  v36 = a9;
  v15 = a6[1];
  v32[0] = *a6;
  v32[1] = v15;
  v16 = a6[3];
  v32[2] = a6[2];
  v34 = a8;
  v35 = a3;
  v32[3] = v16;
  memset(&v32[4], 0, 48);
  v33 = 0;
  v31 = *(_DWORD *)(a1 + 56) == 1;
  v17 = *(_QWORD *)(a4 + 16);
  if (v17 <= *a8)
  {
    v18 = *(_QWORD *)(a4 + 24);
    if (v18 <= a8[1])
    {
      for (i = 0; i != 30; i += 10)
      {
        v23 = &a8[i];
        *v23 = v17;
        v23[1] = v18;
      }
      goto LABEL_13;
    }
  }
  else
  {
    v18 = *(_QWORD *)(a4 + 24);
  }
  sub_2367CA770((uint64_t)v29, v17, v18);
  v19 = v30;
  if (v30)
    goto LABEL_18;
  sub_2367CA9E4((uint64_t)v28, (uint64_t)v29);
  sub_2367D086C((uint64_t)a8, (uint64_t)v28);
  for (j = 13; j != -2; j -= 5)
    sub_2367C2F38(&v28[j]);
  if (!v30)
  {
    for (k = 13; k != -2; k -= 5)
      sub_2367C2F38(&v29[k]);
  }
  v18 = *(unsigned int *)(a4 + 24);
LABEL_13:
  v27 = 0;
  v28[0] = v32;
  v28[1] = a1;
  v28[2] = a5;
  v28[3] = &v36;
  v28[4] = a4;
  v29[0] = &v27;
  v29[1] = v32;
  v29[2] = &v31;
  v29[3] = a4;
  v29[4] = a2;
  v29[5] = a1;
  v29[6] = &v35;
  v29[7] = &v34;
  if (a7)
  {
    v24 = sub_236847448(a7, v18, (uint64_t)v28, (uint64_t)v29);
  }
  else
  {
    v37[0] = 0;
    v37[1] = v37;
    v24 = sub_236847448(v37, v18, (uint64_t)v28, (uint64_t)v29);
  }
  v19 = v24;
  if (!v24)
  {
    v25 = atomic_load(&v27);
    v19 = v25 & 1;
  }
LABEL_18:
  sub_2368474FC((uint64_t)v32);
  return v19;
}

void sub_236847430(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2368474FC(v1 - 240);
  _Unwind_Resume(a1);
}

BOOL sub_236847448(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  _QWORD v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_236847550(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a3 + 32) + 16), 1, **(float **)(a3 + 24)))
    {
      return v5;
    }
    for (i = 0; i != v4; ++i)
      sub_236847680((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, _QWORD *, uint64_t (*)(uint64_t **, uint64_t), float (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2368478DC, sub_236847680, 0, a2) != 0;
}

uint64_t sub_2368474FC(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_QWORD *)(a1 + 64))
    (*(void (**)(void))(a1 + 56))();
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_236847550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[14];
  _QWORD v22[2];
  _QWORD v23[14];

  v12 = (_QWORD *)(a1 + 72);
  if (v12 != (_QWORD *)(a2 + 32))
    sub_2367C9C54(v12, *(char **)(a2 + 32), *(char **)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  v13 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  v22[0] = *(_QWORD *)(a1 + 72);
  v22[1] = v13;
  sub_2367C5B34((uint64_t)v23, a2 + 16);
  v14 = 3;
  if (*(_DWORD *)(a2 + 56) == 1)
    v14 = 1;
  v15 = 4;
  if (!*(_BYTE *)(a2 + 60))
    v15 = v14;
  v23[13] = v15;
  if (a1 + 96 != a3 + 32)
    sub_2367C9C54((_QWORD *)(a1 + 96), *(char **)(a3 + 32), *(char **)(a3 + 40), *(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32));
  v16 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  v20[0] = *(_QWORD *)(a1 + 96);
  v20[1] = v16;
  sub_2367C5B34((uint64_t)v21, a3 + 16);
  if (*(_BYTE *)(a3 + 60))
    return 1;
  v18 = 3;
  if (*(_DWORD *)(a3 + 56) == 1)
    v18 = 1;
  v21[13] = v18;
  v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD *, float))(a1 + 24))(*(_QWORD *)(a1 + 16), a5, a4, v22, v20, a6);
  *(_QWORD *)(a1 + 64) = v19;
  return v19 == 0;
}

float sub_236847680(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v7;
  float result;
  uint64_t v9;
  float *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int *v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = atomic_load(*(unsigned __int8 **)v3);
  if ((v4 & 1) != 0)
    return result;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 + 8) + 32))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 64), a3);
  if (**(_BYTE **)(v3 + 16))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 24)
       + *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) * (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + a2)
       + 4 * **(_QWORD **)(v3 + 24);
  }
  else
  {
    v9 = v7;
    if (*(_BYTE *)(*(_QWORD *)(v3 + 40) + 60))
    {
      v18 = **(_QWORD **)(v3 + 48);
      if (!v18)
        goto LABEL_15;
      v19 = *(uint64_t **)(v3 + 24);
      v20 = v19[2];
      if (v20)
      {
        v21 = *(_QWORD **)(v3 + 32);
        v22 = *v19;
        v23 = v19[1] + a2;
        v24 = v21[2] * v23;
        v25 = (int *)(v21[3] + v24 + 4 * *v19);
        v26 = (int *)(v21[8] + v24 + 4 * v22);
        v27 = (int *)(v21[13] + v24 + 4 * v22);
        v28 = (int *)(*(_QWORD *)(v18 + 24) + *(_QWORD *)(v18 + 16) * v23 + 4 * v22);
        v29 = (_DWORD *)(v7 + 8);
        do
        {
          v30 = *v25++;
          *(v29 - 2) = v30;
          v31 = *v26++;
          *(v29 - 1) = v31;
          v32 = *v27++;
          *v29 = v32;
          v33 = *v28++;
          v29[1] = v33;
          v29 += 4;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      v35 = *(uint64_t **)(v3 + 24);
      v36 = v35[2];
      if (v36)
      {
        v37 = *(_QWORD **)(v3 + 32);
        v38 = *v35;
        v39 = v37[2] * (v35[1] + a2);
        v40 = (int *)(v37[3] + v39 + 4 * *v35);
        v41 = (int *)(v37[8] + v39 + 4 * v38);
        v42 = (int *)(v37[13] + v39 + 4 * v38);
        v43 = (_DWORD *)(v7 + 4);
        do
        {
          v44 = *v40++;
          *(v43 - 1) = v44;
          v45 = *v41++;
          *v43 = v45;
          v46 = *v42++;
          v43[1] = v46;
          v43 += 3;
          --v36;
        }
        while (v36);
      }
    }
  }
  v10 = (float *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 64), a3);
  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, float *, _QWORD))(*(_QWORD *)(v3 + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 64), a3, v9, v10, *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16)))
  {
LABEL_15:
    atomic_store(1u, *(unsigned __int8 **)v3);
    return result;
  }
  v11 = **(_QWORD ***)(v3 + 56);
  v12 = v11[2] * a2;
  v13 = (_DWORD *)(v11[3] + v12);
  v14 = (_DWORD *)(v11[8] + v12);
  v15 = (float *)(v11[13] + v12);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (**(_BYTE **)(v3 + 16))
  {
    for (; v16; --v16)
    {
      *v13++ = *(_DWORD *)v10;
      *v14++ = *(_DWORD *)v10;
      v17 = *v10++;
      result = v17;
      *v15++ = v17;
    }
  }
  else if (v16)
  {
    v34 = v10 + 1;
    do
    {
      *v13++ = *((_DWORD *)v34 - 1);
      *v14++ = *(_DWORD *)v34;
      result = v34[1];
      *v15++ = result;
      v34 += 3;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_2368478DC(uint64_t **a1, uint64_t a2)
{
  return -sub_236847550(**a1, (*a1)[1], (*a1)[2], *(_QWORD *)((*a1)[4] + 16), a2, *(float *)(*a1)[3]);
}

uint64_t sub_236847910(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t i;
  uint64_t j;
  _OWORD *v51;
  _QWORD *v52;
  uint64_t *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unsigned int v57;
  int64x2_t v58;
  unint64_t v59;
  _BYTE v60[120];
  _BYTE v61[120];
  unsigned int v62;
  unint64_t v63;
  int64x2_t v64;
  unint64_t v65;
  unint64_t *v66;

  v10 = (_QWORD *)(a2 + 16);
  if (sub_2367E7FC8(a1 + 232, a2 + 16))
  {
    v11 = *(_QWORD *)(a1 + 88);
    v12 = *(_QWORD *)(v11 + 328);
    v13 = *(_QWORD *)(v11 + 336);
    while (v12 != v13)
    {
      if (*(_DWORD *)(v12 + 12) == 4)
        goto LABEL_6;
      v12 += 96;
    }
    v14 = 0;
    *a5 = a1;
  }
  else
  {
LABEL_6:
    sub_2367CA770((uint64_t)v61, *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100));
    v14 = v62;
    if (!v62)
    {
      sub_2367CA9E4((uint64_t)v60, (uint64_t)v61);
      sub_2367D27D0((unsigned int *)(a1 + 96), (uint64_t)v60);
      sub_2367F67A4(a4, (uint64_t)v60, a1 + 216);
      v16 = *(unsigned int **)(a1 + 416);
      v15 = *(unsigned int **)(a1 + 424);
      if (v16 == v15)
      {
LABEL_32:
        v35 = *(_QWORD *)(a4 + 96);
        v54 = 0uLL;
        *(_QWORD *)&v36 = v35;
        *((_QWORD *)&v36 + 1) = HIDWORD(v35);
        v55 = v36;
        v37 = *(_QWORD *)(a4 + 88);
        v38 = *(float *)(v37 + 300);
        v39 = *(_QWORD *)(v37 + 328);
        v40 = *(_QWORD *)(v37 + 336);
        if (v39 == v40)
        {
LABEL_36:
          v42 = 0;
        }
        else
        {
          v41 = v39;
          while (*(_DWORD *)(v41 + 12) != 4)
          {
            v41 += 96;
            if (v41 == v40)
              goto LABEL_36;
          }
          v43 = v39;
          while (*(_DWORD *)(v43 + 12) != 4)
          {
            v43 += 96;
            if (v43 == v40)
            {
              v43 = 0;
              break;
            }
          }
          v42 = *(_QWORD *)(a4 + 416) - 0x5555555555555548 * ((v43 - v39) >> 5);
        }
        if (sub_236847248(a4 + 216, a4 + 96, v42, (uint64_t)&v54, a2, a3, 0, (unsigned int *)(a4 + 96), v38))
        {
          v14 = 1;
        }
        else
        {
          *(_WORD *)(a4 + 224) = *(_WORD *)(a2 + 8);
          v44 = *v10;
          *(_QWORD *)(a4 + 237) = *(_QWORD *)((char *)v10 + 5);
          *(_QWORD *)(a4 + 232) = v44;
          if (a4 + 216 != a2)
            sub_2367C9C54((_QWORD *)(a4 + 248), *(char **)(a2 + 32), *(char **)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
          v14 = 0;
          v45 = *(_OWORD *)(a2 + 56);
          v46 = *(_OWORD *)(a2 + 72);
          v47 = *(_OWORD *)(a2 + 88);
          *(_DWORD *)(a4 + 320) = *(_DWORD *)(a2 + 104);
          *(_OWORD *)(a4 + 288) = v46;
          *(_OWORD *)(a4 + 304) = v47;
          *(_OWORD *)(a4 + 272) = v45;
          *(_QWORD *)(a4 + 336) = *(_QWORD *)(a2 + 120);
          *(_OWORD *)(a4 + 352) = *(_OWORD *)(a2 + 136);
          *(_QWORD *)(a4 + 376) = *(_QWORD *)(a2 + 160);
          *(_QWORD *)(a4 + 392) = *(_QWORD *)(a2 + 176);
          *(_QWORD *)(a4 + 408) = *(_QWORD *)(a2 + 192);
          *a5 = a4;
        }
      }
      else
      {
        v51 = a3;
        v52 = v10;
        v53 = a5;
        v58 = 0uLL;
        v59 = 0;
        while (1)
        {
          sub_2367C431C((uint64_t)&v54, *v16, v16[1]);
          v14 = v57;
          if (v57)
            break;
          v17 = v55;
          *((_QWORD *)&v55 + 1) = 0;
          v18 = v56;
          if (v16[1] && *v16)
          {
            v19 = 0;
            v20 = (char *)*((_QWORD *)&v17 + 1);
            do
            {
              memcpy(v20, (const void *)(*((_QWORD *)v16 + 3) + *((_QWORD *)v16 + 2) * v19++), 4 * *v16);
              v20 += v17;
            }
            while (v19 < v16[1]);
          }
          v21 = v58.i64[1];
          if (v58.i64[1] >= v59)
          {
            v23 = 0xCCCCCCCCCCCCCCCDLL * ((v58.i64[1] - v58.i64[0]) >> 3);
            v24 = v23 + 1;
            if (v23 + 1 > 0x666666666666666)
              sub_2367C3440();
            if (0x999999999999999ALL * ((uint64_t)(v59 - v58.i64[0]) >> 3) > v24)
              v24 = 0x999999999999999ALL * ((uint64_t)(v59 - v58.i64[0]) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - v58.i64[0]) >> 3) >= 0x333333333333333)
              v25 = 0x666666666666666;
            else
              v25 = v24;
            v66 = &v59;
            if (v25)
              v25 = (unint64_t)sub_2367DC0A4(v25);
            else
              v26 = 0;
            v27 = v25 + 40 * v23;
            v63 = v25;
            v64.i64[0] = v27;
            v65 = v25 + 40 * v26;
            *(_OWORD *)v27 = v54;
            *(_OWORD *)(v27 + 16) = v17;
            *(_QWORD *)(v27 + 32) = v18;
            v22 = v27 + 40;
            v64.i64[1] = v27 + 40;
            v28 = v58.i64[1];
            v29 = v58.i64[0];
            v30 = v64.i64[0];
            if (v58.i64[1] == v58.i64[0])
            {
              v33 = vdupq_n_s64(v58.u64[1]);
            }
            else
            {
              do
              {
                v31 = *(_OWORD *)(v28 - 40);
                *(_QWORD *)(v30 - 24) = *(_QWORD *)(v28 - 24);
                *(_OWORD *)(v30 - 40) = v31;
                v32 = *(_QWORD *)(v28 - 16);
                *(_QWORD *)(v28 - 16) = 0;
                *(_QWORD *)(v30 - 16) = v32;
                *(_QWORD *)(v30 - 8) = *(_QWORD *)(v28 - 8);
                v30 -= 40;
                v28 -= 40;
              }
              while (v28 != v29);
              v33 = v58;
              v22 = v64.u64[1];
            }
            v58.i64[0] = v30;
            v58.i64[1] = v22;
            v64 = v33;
            v34 = v59;
            v59 = v65;
            v65 = v34;
            v63 = v33.i64[0];
            sub_2367F6844((uint64_t)&v63);
          }
          else
          {
            *(_OWORD *)v58.i64[1] = v54;
            *(_OWORD *)(v21 + 16) = v17;
            *(_QWORD *)(v21 + 32) = v18;
            v22 = v21 + 40;
          }
          v58.i64[1] = v22;
          v16 += 10;
          if (v16 == v15)
          {
            sub_2367D0910((void **)(a4 + 416));
            *(int64x2_t *)(a4 + 416) = v58;
            *(_QWORD *)(a4 + 432) = v59;
            v59 = 0;
            v58 = 0uLL;
            *(_QWORD *)&v54 = &v58;
            sub_2367D077C((void ***)&v54);
            v10 = v52;
            a5 = v53;
            a3 = v51;
            goto LABEL_32;
          }
        }
        *(_QWORD *)&v54 = &v58;
        sub_2367D077C((void ***)&v54);
      }
      for (i = 104; i != -16; i -= 40)
        sub_2367C2F38((uint64_t *)&v60[i]);
      if (!v62)
      {
        for (j = 104; j != -16; j -= 40)
          sub_2367C2F38((uint64_t *)&v61[j]);
      }
    }
  }
  return v14;
}

void sub_236847D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52)
{
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a22 + i));
  if (!a52)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a37 + j));
  }
  _Unwind_Resume(a1);
}

char *sub_236847E58(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_2367C3404(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

char *sub_236847F50(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_2367C3404(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

_QWORD *sub_23684804C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *result;
  uint64_t v9;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_2368220C4((_QWORD *)(a1 + 24), *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  result = sub_2367DBF84((_QWORD *)(a1 + 104), *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  v9 = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 133) = *(_QWORD *)((char *)a2 + 133);
  *(_QWORD *)(a1 + 128) = v9;
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  return result;
}

void sub_2368480F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_236848110(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    sub_2368171AC((_QWORD *)(i - 152));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23684815C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  int64_t v32;
  int v33;
  int v34;
  void *v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  unint64_t v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  int v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  unsigned int v64;
  int v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  int64x2_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  char v179;
  int v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  unint64_t *v185;
  uint64_t v186;
  void **v188;
  int64x2_t *v189;
  void *v190;
  char *v191;
  uint64_t v192;
  _BYTE __src[32];
  _BYTE v194[32];
  _QWORD v195[2];

  v195[0] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 48) = 0u;
  v186 = a1 + 48;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v185 = (unint64_t *)(a1 + 24);
  v189 = (int64x2_t *)(a1 + 72);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 272) = &off_2507FF438;
  *(_OWORD *)(a1 + 292) = xmmword_2368AF590;
  *(_QWORD *)__src = &off_2507FF550;
  *(_OWORD *)&__src[8] = xmmword_2368AF3F0;
  *(_QWORD *)&__src[24] = 0;
  sub_2367CB9F8(a1 + 272, (uint64_t)__src);
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  sub_2367DC34C((uint64x2_t *)(a1 + 368), a2);
  sub_2368218B0(a1 + 512, a3);
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_DWORD *)(a1 + 1224) = 13;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1240) = 0;
  v7 = *(unsigned int *)(a2 + 112);
  *(_DWORD *)__src = 5;
  *(_QWORD *)&__src[8] = 0;
  *(_QWORD *)&__src[16] = 0;
  *(_QWORD *)&__src[24] = v7;
  v8 = sub_2367E29EC((uint64_t)__src, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
  v9 = sub_23682B8B4(a1 + 512);
  v10 = *(_QWORD *)(a1 + 568);
  if (v9)
  {
    switch(v10)
    {
      case 0:
        goto LABEL_13;
      case 1:
        *(_DWORD *)(a1 + 788) = 1;
        break;
      case 2:
        *(_DWORD *)(a1 + 788) = 0;
        goto LABEL_8;
      case 3:
        *(_DWORD *)(a1 + 728) = 0;
LABEL_8:
        *(_DWORD *)(a1 + 776) = 5;
        break;
      default:
        *(_DWORD *)(a1 + 728) = 0;
        *(_DWORD *)(a1 + 776) = 0;
        break;
    }
  }
  else if (!v10)
  {
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 864) && sub_23682B8B4(a1 + 512))
  {
    *(_DWORD *)(a1 + 796) = 0;
    *(_DWORD *)(a1 + 728) = 0;
  }
LABEL_13:
  v188 = (void **)(a1 + 1152);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = 0x2E8BA2E8BA2E8BA3 * ((v12 - v11) >> 3);
  v14 = v8 - v13;
  if (v8 <= v13)
  {
    if (v8 < v13)
      sub_236817140(v186, (void **)(v11 + 88 * v8));
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 64);
    if (0x2E8BA2E8BA2E8BA3 * ((v15 - v12) >> 3) >= v14)
    {
      v26 = v12 + 88 * v14;
      do
      {
        *(_OWORD *)(v12 + 32) = 0uLL;
        *(_OWORD *)(v12 + 48) = 0uLL;
        *(_OWORD *)v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_DWORD *)(v12 + 64) = 8;
        *(_QWORD *)(v12 + 72) = 0;
        *(_BYTE *)(v12 + 80) = 1;
        v12 += 88;
      }
      while (v12 != v26);
      *(_QWORD *)(a1 + 56) = v26;
    }
    else
    {
      if (v8 > 0x2E8BA2E8BA2E8BALL)
        sub_2367C3440();
      v16 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v11) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v8)
        v17 = v8;
      if (v16 >= 0x1745D1745D1745DLL)
        v18 = 0x2E8BA2E8BA2E8BALL;
      else
        v18 = v17;
      if (v18 > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_279;
      v19 = (char *)operator new(88 * v18);
      v20 = &v19[8 * ((v12 - v11) >> 3)];
      v21 = &v19[88 * v8];
      v22 = v20;
      do
      {
        *((_OWORD *)v22 + 2) = 0uLL;
        *((_OWORD *)v22 + 3) = 0uLL;
        *(_OWORD *)v22 = 0uLL;
        *((_OWORD *)v22 + 1) = 0uLL;
        *((_DWORD *)v22 + 16) = 8;
        *((_QWORD *)v22 + 9) = 0;
        v22[80] = 1;
        v22 += 88;
      }
      while (v22 != v21);
      while (v12 != v11)
      {
        *((_QWORD *)v20 - 11) = 0;
        *((_QWORD *)v20 - 10) = 0;
        v20 -= 88;
        *((_QWORD *)v20 + 2) = 0;
        v23 = *(_OWORD *)(v12 - 88);
        v12 -= 88;
        *(_OWORD *)v20 = v23;
        *((_QWORD *)v20 + 2) = *(_QWORD *)(v12 + 16);
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *((_QWORD *)v20 + 3) = 0;
        *((_QWORD *)v20 + 4) = 0;
        *((_QWORD *)v20 + 5) = 0;
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v12 + 24);
        *((_QWORD *)v20 + 5) = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        v24 = *(_OWORD *)(v12 + 48);
        v25 = *(_OWORD *)(v12 + 64);
        v20[80] = *(_BYTE *)(v12 + 80);
        *((_OWORD *)v20 + 3) = v24;
        *((_OWORD *)v20 + 4) = v25;
      }
      v28 = *(char **)(a1 + 48);
      v27 = *(char **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = &v19[88 * v18];
      if (v27 != v28)
      {
        do
        {
          v29 = v27 - 88;
          *(_QWORD *)__src = v27 - 64;
          sub_2367D6C98((void ***)__src);
          *(_QWORD *)__src = v29;
          sub_2367D6D24((void ***)__src);
          v27 = v29;
        }
        while (v29 != v28);
      }
      if (v28)
        operator delete(v28);
    }
  }
  v30 = *(_DWORD *)(a1 + 864);
  if (v30 < 0)
  {
    v30 = sub_23682B8B4(a1 + 512) ^ 1;
    *(_DWORD *)(a1 + 864) = v30;
  }
  *(float *)(a1 + 760) = (float)(14 * *(_DWORD *)(a1 + 560) + 82);
  v190 = 0;
  v191 = 0;
  v192 = 0;
  if (v30)
  {
    *(_OWORD *)__src = xmmword_2369234B0;
    *(_OWORD *)&__src[16] = unk_2369234C0;
    *(_OWORD *)v194 = xmmword_2369234D0;
    *(_OWORD *)&v194[16] = unk_2369234E0;
    sub_236847E58((char *)&v190, __src, (uint64_t)v195, 0x10uLL);
  }
  else
  {
    *(_OWORD *)__src = xmmword_2369234F0;
    *(_OWORD *)&__src[16] = unk_236923500;
    *(_OWORD *)v194 = xmmword_236923510;
    *(_OWORD *)&v194[16] = unk_236923520;
    sub_236847E58((char *)&v190, __src, (uint64_t)v195, 0x10uLL);
    if (v8 <= 0x1D && *(int *)(a1 + 560) >= 2 && sub_23682B8B4(a3))
    {
      v31 = (char *)v190 + 4;
      v32 = v191 - ((_BYTE *)v190 + 8);
      if (v191 != (char *)v190 + 8)
        memmove((char *)v190 + 4, (char *)v190 + 8, v191 - ((_BYTE *)v190 + 8));
      v191 = &v31[v32];
    }
  }
  if (*(_DWORD *)(a2 + 12) == 1)
    v33 = 2;
  else
    v33 = -1;
  if (v33 + *(_DWORD *)(*(_QWORD *)(a2 + 408) + 320) >= *(_DWORD *)(a1 + 732))
    v34 = *(_DWORD *)(a1 + 732);
  else
    v34 = v33 + *(_DWORD *)(*(_QWORD *)(a2 + 408) + 320);
  switch(*(_DWORD *)(a1 + 560))
  {
    case 0:
    case 1:
      v35 = v190;
      sub_2367D4108((char *)(a1 + 736), (char *)v190, (uint64_t)v191, (v191 - (_BYTE *)v190) >> 2);
      v36 = 256;
      break;
    case 2:
      v35 = v190;
      sub_236847F50((char *)(a1 + 736), (char *)v190, (uint64_t)v190 + 40, 0xAuLL);
      v36 = 96;
      break;
    case 3:
      v35 = v190;
      sub_236847F50((char *)(a1 + 736), (char *)v190, (uint64_t)v190 + 28, 7uLL);
      v36 = 48;
      break;
    case 4:
      v35 = v190;
      sub_236847F50((char *)(a1 + 736), (char *)v190, (uint64_t)v190 + 20, 5uLL);
      v36 = 32;
      break;
    case 5:
      v35 = v190;
      sub_236847F50((char *)(a1 + 736), (char *)v190, (uint64_t)v190 + 16, 4uLL);
      v36 = 24;
      break;
    default:
      v35 = v190;
      sub_236847F50((char *)(a1 + 736), (char *)v190, (uint64_t)v190 + 12, 3uLL);
      v36 = 16;
      break;
  }
  *(_QWORD *)(a1 + 768) = v36;
  if (*(int *)(a1 + 560) <= 1)
  {
    if (v34 >= 1)
    {
      v50 = 0;
      if (4 * v34 <= 1)
        v51 = 1;
      else
        v51 = 4 * v34;
      v52 = *(char **)(a1 + 744);
      do
      {
        v53 = v50 + 16;
        v54 = *(_QWORD *)(a1 + 752);
        if ((unint64_t)v52 >= v54)
        {
          v56 = *(char **)(a1 + 736);
          v57 = (v52 - v56) >> 2;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62)
            sub_2367C3440();
          v59 = v54 - (_QWORD)v56;
          if (v59 >> 1 > v58)
            v58 = v59 >> 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
            v60 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v60 = (unint64_t)sub_2367C3454(v60);
            v52 = *(char **)(a1 + 744);
            v56 = *(char **)(a1 + 736);
          }
          else
          {
            v61 = 0;
          }
          v62 = (_DWORD *)(v60 + 4 * v57);
          *v62 = v53;
          v55 = (char *)(v62 + 1);
          while (v52 != v56)
          {
            v63 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *--v62 = v63;
          }
          *(_QWORD *)(a1 + 736) = v62;
          *(_QWORD *)(a1 + 744) = v55;
          *(_QWORD *)(a1 + 752) = v60 + 4 * v61;
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_DWORD *)v52 = v53;
          v55 = v52 + 4;
        }
        *(_QWORD *)(a1 + 744) = v55;
        ++v50;
        v52 = v55;
      }
      while (v50 != v51);
    }
  }
  else if (v34 >= 1)
  {
    v37 = 0;
    v38 = *(int **)(a1 + 744);
    do
    {
      v39 = 4 * v37 + 19;
      v40 = *(_QWORD *)(a1 + 752);
      if ((unint64_t)v38 >= v40)
      {
        v42 = *(int **)(a1 + 736);
        v43 = v38 - v42;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          sub_2367C3440();
        v45 = v40 - (_QWORD)v42;
        if (v45 >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v46 = (unint64_t)sub_2367C3454(v46);
          v38 = *(int **)(a1 + 744);
          v42 = *(int **)(a1 + 736);
        }
        else
        {
          v47 = 0;
        }
        v48 = (int *)(v46 + 4 * v43);
        *v48 = v39;
        v41 = v48 + 1;
        while (v38 != v42)
        {
          v49 = *--v38;
          *--v48 = v49;
        }
        *(_QWORD *)(a1 + 736) = v48;
        *(_QWORD *)(a1 + 744) = v41;
        *(_QWORD *)(a1 + 752) = v46 + 4 * v47;
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v38 = v39;
        v41 = v38 + 1;
      }
      *(_QWORD *)(a1 + 744) = v41;
      ++v37;
      v38 = v41;
    }
    while (v37 != v34);
  }
  if (v35)
    operator delete(v35);
  v64 = *(_DWORD *)(a1 + 776);
  if (v64 + 1 > 0xE)
    goto LABEL_106;
  if (((1 << (v64 + 1)) & 0x7890) == 0)
  {
    if (v64 == -1)
      goto LABEL_110;
LABEL_106:
    *(_DWORD *)(a1 + 1224) = v64;
    if (!*(_BYTE *)(a1 + 888))
      goto LABEL_122;
    goto LABEL_120;
  }
  if ((sub_23682B8B4(a1 + 512) & 1) != 0)
    goto LABEL_106;
  *(_DWORD *)(a1 + 776) = -1;
LABEL_110:
  v65 = *(_DWORD *)(a1 + 560);
  if (v65 <= 0 && *(_BYTE *)(a1 + 580) && sub_23682B8B4(a1 + 512))
  {
    if (!*(_DWORD *)(a1 + 864))
    {
      v64 = 15;
      goto LABEL_121;
    }
  }
  else if (!*(_DWORD *)(a1 + 864) && !*(_BYTE *)(a1 + 888))
  {
    if (*(_BYTE *)(a1 + 580) && sub_23682B8B4(a1 + 512))
    {
      if (v65 >= 7)
      {
        if (v65 == 7)
          v64 = 6;
        else
          v64 = 5;
      }
      else
      {
        v64 = 14;
      }
    }
    else
    {
      v64 = 5;
    }
    goto LABEL_121;
  }
LABEL_120:
  v64 = 0;
LABEL_121:
  *(_DWORD *)(a1 + 776) = v64;
LABEL_122:
  if ((sub_23682B8B4(a1 + 512) & 1) == 0 && v64 <= 0xF && ((1 << v64) & 0xC040) != 0)
    *(_DWORD *)(a1 + 776) = 0;
  v66 = *(_QWORD **)(a1 + 1160);
  v67 = *(_QWORD *)(a1 + 1168);
  if ((unint64_t)v66 >= v67)
  {
    v69 = *v188;
    v70 = ((char *)v66 - (_BYTE *)*v188) >> 3;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 61)
      sub_2367C3440();
    v72 = v67 - (_QWORD)v69;
    if (v72 >> 2 > v71)
      v71 = v72 >> 2;
    v73 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8;
    v74 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v73)
      v74 = v71;
    if (v74)
    {
      v74 = (unint64_t)sub_2367CA1FC(v74);
      v66 = *(_QWORD **)(a1 + 1160);
      v69 = *(_QWORD **)(a1 + 1152);
    }
    else
    {
      v75 = 0;
    }
    v76 = (_QWORD *)(v74 + 8 * v70);
    v77 = v74 + 8 * v75;
    *v76 = 0;
    v68 = v76 + 1;
    while (v66 != v69)
    {
      v78 = *--v66;
      *--v76 = v78;
    }
    *(_QWORD *)(a1 + 1152) = v76;
    *(_QWORD *)(a1 + 1160) = v68;
    *(_QWORD *)(a1 + 1168) = v77;
    if (v69)
      operator delete(v69);
  }
  else
  {
    *v66 = 0;
    v68 = v66 + 1;
  }
  *(_QWORD *)(a1 + 1160) = v68;
  if (!*(_BYTE *)(a1 + 580))
  {
    *(_DWORD *)(a1 + 784) = 1065353216;
    *(_DWORD *)__src = 1;
    memset(&__src[8], 0, 24);
    v79 = sub_2367E29EC((uint64_t)__src, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
    v80 = v79;
    v81 = *(_QWORD *)(a1 + 1168);
    if ((unint64_t)v68 >= v81)
    {
      v83 = (uint64_t *)*v188;
      v84 = ((char *)v68 - (_BYTE *)*v188) >> 3;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v81 - (_QWORD)v83) >> 2 > v85)
        v85 = (uint64_t)(v81 - (_QWORD)v83) >> 2;
      if (v81 - (unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
        v85 = 0x1FFFFFFFFFFFFFFFLL;
      if (v85)
      {
        v85 = (unint64_t)sub_2367CA1FC(v85);
        v68 = *(uint64_t **)(a1 + 1160);
        v83 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        v86 = 0;
      }
      v87 = (uint64_t *)(v85 + 8 * v84);
      v81 = v85 + 8 * v86;
      *v87 = v80;
      v82 = v87 + 1;
      while (v68 != v83)
      {
        v88 = *--v68;
        *--v87 = v88;
      }
      *(_QWORD *)(a1 + 1152) = v87;
      *(_QWORD *)(a1 + 1160) = v82;
      *(_QWORD *)(a1 + 1168) = v81;
      if (v83)
      {
        operator delete(v83);
        v81 = *(_QWORD *)(a1 + 1168);
      }
    }
    else
    {
      *v68 = v79;
      v82 = v68 + 1;
    }
    *(_QWORD *)(a1 + 1160) = v82;
    *(_DWORD *)__src = 2;
    memset(&__src[8], 0, 24);
    v89 = sub_2367E29EC((uint64_t)__src, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
    v90 = v89;
    if ((unint64_t)v82 >= v81)
    {
      v92 = (uint64_t *)*v188;
      v93 = ((char *)v82 - (_BYTE *)*v188) >> 3;
      v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v81 - (_QWORD)v92) >> 2 > v94)
        v94 = (uint64_t)(v81 - (_QWORD)v92) >> 2;
      if (v81 - (unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
        v94 = 0x1FFFFFFFFFFFFFFFLL;
      if (v94)
      {
        v94 = (unint64_t)sub_2367CA1FC(v94);
        v82 = *(uint64_t **)(a1 + 1160);
        v92 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        v95 = 0;
      }
      v96 = (uint64_t *)(v94 + 8 * v93);
      v81 = v94 + 8 * v95;
      *v96 = v90;
      v91 = v96 + 1;
      while (v82 != v92)
      {
        v97 = *--v82;
        *--v96 = v97;
      }
      *(_QWORD *)(a1 + 1152) = v96;
      *(_QWORD *)(a1 + 1160) = v91;
      *(_QWORD *)(a1 + 1168) = v81;
      if (v92)
      {
        operator delete(v92);
        v81 = *(_QWORD *)(a1 + 1168);
      }
    }
    else
    {
      *v82 = v89;
      v91 = v82 + 1;
    }
    *(_QWORD *)(a1 + 1160) = v91;
    *(_DWORD *)__src = 3;
    memset(&__src[8], 0, 24);
    v98 = sub_2367E29EC((uint64_t)__src, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
    v99 = v98;
    if ((unint64_t)v91 >= v81)
    {
      v101 = (uint64_t *)*v188;
      v102 = ((char *)v91 - (_BYTE *)*v188) >> 3;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v81 - (_QWORD)v101) >> 2 > v103)
        v103 = (uint64_t)(v81 - (_QWORD)v101) >> 2;
      if (v81 - (unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
        v103 = 0x1FFFFFFFFFFFFFFFLL;
      if (v103)
      {
        v103 = (unint64_t)sub_2367CA1FC(v103);
        v91 = *(uint64_t **)(a1 + 1160);
        v101 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        v104 = 0;
      }
      v105 = (uint64_t *)(v103 + 8 * v102);
      v81 = v103 + 8 * v104;
      *v105 = v99;
      v100 = v105 + 1;
      while (v91 != v101)
      {
        v106 = *--v91;
        *--v105 = v106;
      }
      *(_QWORD *)(a1 + 1152) = v105;
      *(_QWORD *)(a1 + 1160) = v100;
      *(_QWORD *)(a1 + 1168) = v81;
      if (v101)
      {
        operator delete(v101);
        v81 = *(_QWORD *)(a1 + 1168);
      }
    }
    else
    {
      *v91 = v98;
      v100 = v91 + 1;
    }
    *(_QWORD *)(a1 + 1160) = v100;
    *(_DWORD *)__src = 4;
    memset(&__src[8], 0, 24);
    v107 = sub_2367E29EC((uint64_t)__src, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
    v108 = v107;
    if ((unint64_t)v100 >= v81)
    {
      v110 = (uint64_t *)*v188;
      v111 = ((char *)v100 - (_BYTE *)*v188) >> 3;
      v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v81 - (_QWORD)v110) >> 2 > v112)
        v112 = (uint64_t)(v81 - (_QWORD)v110) >> 2;
      if (v81 - (unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
        v112 = 0x1FFFFFFFFFFFFFFFLL;
      if (v112)
      {
        v112 = (unint64_t)sub_2367CA1FC(v112);
        v100 = *(uint64_t **)(a1 + 1160);
        v110 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        v113 = 0;
      }
      v114 = (uint64_t *)(v112 + 8 * v111);
      v81 = v112 + 8 * v113;
      *v114 = v108;
      v109 = v114 + 1;
      while (v100 != v110)
      {
        v115 = *--v100;
        *--v114 = v115;
      }
      *(_QWORD *)(a1 + 1152) = v114;
      *(_QWORD *)(a1 + 1160) = v109;
      *(_QWORD *)(a1 + 1168) = v81;
      if (v110)
      {
        operator delete(v110);
        v81 = *(_QWORD *)(a1 + 1168);
      }
    }
    else
    {
      *v100 = v107;
      v109 = v100 + 1;
    }
    *(_QWORD *)(a1 + 1160) = v109;
    *(_DWORD *)__src = 5;
    memset(&__src[8], 0, 24);
    v116 = sub_2367E29EC((uint64_t)__src, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
    v117 = v116;
    if ((unint64_t)v109 >= v81)
    {
      v119 = (uint64_t *)*v188;
      v120 = ((char *)v109 - (_BYTE *)*v188) >> 3;
      v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v81 - (_QWORD)v119) >> 2 > v121)
        v121 = (uint64_t)(v81 - (_QWORD)v119) >> 2;
      if (v81 - (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
        v121 = 0x1FFFFFFFFFFFFFFFLL;
      if (v121)
      {
        v121 = (unint64_t)sub_2367CA1FC(v121);
        v109 = *(uint64_t **)(a1 + 1160);
        v119 = *(uint64_t **)(a1 + 1152);
      }
      else
      {
        v122 = 0;
      }
      v123 = (uint64_t *)(v121 + 8 * v120);
      v124 = v121 + 8 * v122;
      *v123 = v117;
      v118 = v123 + 1;
      while (v109 != v119)
      {
        v125 = *--v109;
        *--v123 = v125;
      }
      *(_QWORD *)(a1 + 1152) = v123;
      *(_QWORD *)(a1 + 1160) = v118;
      *(_QWORD *)(a1 + 1168) = v124;
      if (v119)
        operator delete(v119);
    }
    else
    {
      *v109 = v116;
      v118 = v109 + 1;
    }
    *(_QWORD *)(a1 + 1160) = v118;
    sub_2367D7BB0((char **)a1, *(_QWORD *)(a1 + 488));
    v126 = *(_QWORD *)(a1 + 488);
    v127 = *(_QWORD *)(a1 + 24);
    v128 = *(_QWORD *)(a1 + 32) - v127;
    if (v126 <= v128)
    {
      if (v126 < v128)
        *(_QWORD *)(a1 + 32) = v127 + v126;
    }
    else
    {
      sub_2367C8698(v185, v126 - v128);
    }
  }
  v129 = *(unint64_t **)(a1 + 1160);
  v130 = *(_QWORD *)(a1 + 1168);
  if ((unint64_t)v129 >= v130)
  {
    v132 = (unint64_t *)*v188;
    v133 = ((char *)v129 - (_BYTE *)*v188) >> 3;
    v134 = v133 + 1;
    if ((unint64_t)(v133 + 1) >> 61)
      sub_2367C3440();
    v135 = v130 - (_QWORD)v132;
    if (v135 >> 2 > v134)
      v134 = v135 >> 2;
    v73 = (unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8;
    v136 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v73)
      v136 = v134;
    if (v136)
    {
      v136 = (unint64_t)sub_2367CA1FC(v136);
      v129 = *(unint64_t **)(a1 + 1160);
      v132 = *(unint64_t **)(a1 + 1152);
    }
    else
    {
      v137 = 0;
    }
    v138 = (unint64_t *)(v136 + 8 * v133);
    v139 = v136 + 8 * v137;
    *v138 = v8;
    v131 = v138 + 1;
    while (v129 != v132)
    {
      v140 = *--v129;
      *--v138 = v140;
    }
    *(_QWORD *)(a1 + 1152) = v138;
    *(_QWORD *)(a1 + 1160) = v131;
    *(_QWORD *)(a1 + 1168) = v139;
    if (v132)
      operator delete(v132);
  }
  else
  {
    *v129 = v8;
    v131 = v129 + 1;
  }
  v141 = (__int128 *)(a1 + 712);
  *(_QWORD *)(a1 + 1160) = v131;
  v142 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 712) = v142;
  *(_QWORD *)(a1 + 720) = v142;
  v143 = *(_QWORD *)(a1 + 72);
  v144 = *(_QWORD **)(a1 + 80);
  v145 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v144 - v143) >> 3);
  v146 = v8 - v145;
  if (v8 <= v145)
  {
    if (v8 < v145)
    {
      v169 = (_QWORD *)(v143 + 152 * v8);
      while (v144 != v169)
      {
        v144 -= 19;
        sub_2368171AC(v144);
      }
      *(_QWORD *)(a1 + 80) = v169;
    }
  }
  else
  {
    v147 = *(_QWORD *)(a1 + 88);
    if (0x86BCA1AF286BCA1BLL * ((v147 - (uint64_t)v144) >> 3) < v146)
    {
      if (v8 > 0x1AF286BCA1AF286)
        sub_2367C3440();
      v148 = 0x86BCA1AF286BCA1BLL * ((v147 - v143) >> 3);
      v149 = 2 * v148;
      if (2 * v148 <= v8)
        v149 = v8;
      if (v148 >= 0xD79435E50D7943)
        v150 = 0x1AF286BCA1AF286;
      else
        v150 = v149;
      *(_QWORD *)v194 = a1 + 88;
      if (v150 <= 0x1AF286BCA1AF286)
      {
        v151 = (char *)operator new(152 * v150);
        v152 = 152 * v145;
        v153 = (uint64_t)&v151[152 * v145];
        *(_QWORD *)__src = v151;
        *(_QWORD *)&__src[8] = v153;
        *(_QWORD *)&__src[16] = v153;
        *(_QWORD *)&__src[24] = &v151[152 * v150];
        v154 = &v151[152 * v8];
        v155 = 152 * v8 - v152;
        do
        {
          sub_23684804C(v153, (__int128 *)(a1 + 712));
          v153 += 152;
          v155 -= 152;
        }
        while (v155);
        *(_QWORD *)&__src[16] = v154;
        v157 = *(_QWORD *)(a1 + 72);
        v156 = *(_QWORD *)(a1 + 80);
        v158 = *(_QWORD *)&__src[8];
        if (v156 == v157)
        {
          v168 = vdupq_n_s64(v156);
        }
        else
        {
          v159 = 0;
          do
          {
            v160 = v158 + v159;
            v161 = v156 + v159;
            v162 = *(_QWORD *)(v156 + v159 - 136);
            *(_OWORD *)(v160 - 152) = *(_OWORD *)(v156 + v159 - 152);
            *(_QWORD *)(v160 - 136) = v162;
            *(_QWORD *)(v160 - 128) = 0;
            *(_QWORD *)(v160 - 120) = 0;
            *(_QWORD *)(v160 - 112) = 0;
            *(_OWORD *)(v160 - 128) = *(_OWORD *)(v156 + v159 - 128);
            *(_QWORD *)(v160 - 112) = *(_QWORD *)(v156 + v159 - 112);
            *(_QWORD *)(v161 - 128) = 0;
            *(_QWORD *)(v161 - 120) = 0;
            v163 = *(_OWORD *)(v156 + v159 - 104);
            v164 = *(_OWORD *)(v156 + v159 - 88);
            v165 = *(_QWORD *)(v156 + v159 - 72);
            *(_QWORD *)(v161 - 112) = 0;
            *(_QWORD *)(v160 - 72) = v165;
            *(_OWORD *)(v160 - 88) = v164;
            *(_OWORD *)(v160 - 104) = v163;
            v166 = *(_OWORD *)(v156 + v159 - 64);
            *(_QWORD *)(v160 - 40) = 0;
            *(_QWORD *)(v160 - 32) = 0;
            *(_OWORD *)(v160 - 64) = v166;
            *(_QWORD *)(v160 - 48) = 0;
            *(_OWORD *)(v160 - 48) = *(_OWORD *)(v156 + v159 - 48);
            *(_QWORD *)(v160 - 32) = *(_QWORD *)(v156 + v159 - 32);
            *(_QWORD *)(v161 - 48) = 0;
            *(_QWORD *)(v161 - 40) = 0;
            *(_QWORD *)(v161 - 32) = 0;
            v167 = *(_QWORD *)(v156 + v159 - 24);
            *(_QWORD *)(v160 - 19) = *(_QWORD *)(v156 + v159 - 19);
            *(_QWORD *)(v160 - 24) = v167;
            *(_BYTE *)(v160 - 8) = *(_BYTE *)(v156 + v159 - 8);
            v159 -= 152;
          }
          while (v156 + v159 != v157);
          v158 += v159;
          v168 = *v189;
          v154 = *(char **)&__src[16];
        }
        *(_QWORD *)(a1 + 72) = v158;
        *(_QWORD *)(a1 + 80) = v154;
        *(int64x2_t *)&__src[8] = v168;
        v172 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)&__src[24];
        *(_QWORD *)&__src[24] = v172;
        *(_QWORD *)__src = v168.i64[0];
        sub_236848110((uint64_t)__src);
        goto LABEL_261;
      }
LABEL_279:
      sub_2367C3488();
    }
    v170 = &v144[19 * v146];
    v171 = 152 * v8 - 8 * (((uint64_t)v144 - v143) >> 3);
    do
    {
      sub_23684804C((uint64_t)v144, (__int128 *)(a1 + 712));
      v144 += 19;
      v171 -= 152;
    }
    while (v171);
    *(_QWORD *)(a1 + 80) = v170;
  }
LABEL_261:
  v173 = v189->i64[0];
  v174 = *v141;
  *(_QWORD *)(v173 + 16) = *(_QWORD *)(a1 + 728);
  *(_OWORD *)v173 = v174;
  if ((__int128 *)v173 != v141)
  {
    sub_2367D4108((char *)(v173 + 24), *(char **)(a1 + 736), *(_QWORD *)(a1 + 744), (uint64_t)(*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 2);
    v175 = *(_OWORD *)(a1 + 760);
    v176 = *(_OWORD *)(a1 + 776);
    *(_QWORD *)(v173 + 80) = *(_QWORD *)(a1 + 792);
    *(_OWORD *)(v173 + 48) = v175;
    *(_OWORD *)(v173 + 64) = v176;
    *(_OWORD *)(v173 + 88) = *(_OWORD *)(a1 + 800);
    sub_23683D1CC((char *)(v173 + 104), *(char **)(a1 + 816), *(_QWORD *)(a1 + 824), (uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 3);
  }
  v177 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(v173 + 133) = *(_QWORD *)(a1 + 845);
  *(_QWORD *)(v173 + 128) = v177;
  *(_BYTE *)(v173 + 144) = *(_BYTE *)(a1 + 856);
  v178 = *(_DWORD *)(a1 + 560);
  if (v178 == 7)
  {
    v180 = 5;
    v179 = a4;
    goto LABEL_267;
  }
  v179 = a4;
  if (v178 == 8)
  {
    v180 = 6;
LABEL_267:
    v181 = v189->i64[0];
    *(_DWORD *)(v189->i64[0] + 84) = v180;
    goto LABEL_269;
  }
  v181 = v189->i64[0];
LABEL_269:
  sub_23681FB3C((uint64_t)__src, a1 + 512, 0, 0, v179);
  v182 = *(void **)(v181 + 104);
  *(_OWORD *)(v181 + 88) = *(_OWORD *)__src;
  if (v182)
  {
    *(_QWORD *)(v181 + 112) = v182;
    operator delete(v182);
    *(_QWORD *)(v181 + 104) = 0;
    *(_QWORD *)(v181 + 112) = 0;
    *(_QWORD *)(v181 + 120) = 0;
  }
  *(_OWORD *)(v181 + 104) = *(_OWORD *)&__src[16];
  v183 = *(_QWORD *)&v194[8];
  *(_QWORD *)(v181 + 120) = *(_QWORD *)v194;
  *(_QWORD *)(v181 + 128) = v183;
  *(_QWORD *)(v181 + 133) = *(_QWORD *)&v194[13];
  return a1;
}

void sub_236849380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *a10, void *a11, void *a12, void **a13, void *a14, uint64_t a15, void **a16, void *a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);
  v26 = *(void **)(v23 + 1232);
  if (v26)
  {
    *(_QWORD *)(v23 + 1240) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(v23 + 1200);
  if (v27)
  {
    *(_QWORD *)(v23 + 1208) = v27;
    operator delete(v27);
  }
  __p = (void *)(v23 + 1176);
  sub_2367C4718((void ***)&__p);
  v28 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v23 + 1160) = v28;
    operator delete(v28);
  }
  sub_236816F38(v24);
  v29 = *(void **)(v23 + 344);
  if (v29)
  {
    *(_QWORD *)(v23 + 352) = v29;
    operator delete(v29);
  }
  __p = (void *)(v23 + 320);
  sub_2367D077C((void ***)&__p);
  v30 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v23 + 256) = v30;
    operator delete(v30);
  }
  __p = a10;
  sub_236817010((void ***)&__p);
  __p = a11;
  sub_2367D17E4((void ***)&__p);
  __p = (void *)(v23 + 168);
  sub_2367E8DB8((void ***)&__p);
  __p = a12;
  sub_2367D17E4((void ***)&__p);
  v31 = *(void **)(v23 + 120);
  if (v31)
  {
    *(_QWORD *)(v23 + 128) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v23 + 96);
  if (v32)
  {
    *(_QWORD *)(v23 + 104) = v32;
    operator delete(v32);
  }
  __p = a17;
  sub_236817090((void ***)&__p);
  __p = a14;
  sub_236817100((void ***)&__p);
  v33 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v23 + 32) = v33;
    operator delete(v33);
  }
  v34 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_236849550(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t *a7, _QWORD *a8, uint64_t a9, uint64_t a10, _QWORD *a11, int a12, int a13, unsigned __int8 a14)
{
  uint64_t v16;
  int v17;
  __int128 v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  unsigned int *v49;
  float *v50;
  int *v51;
  uint64_t v52;
  float v53;
  double v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BOOL8 v62;
  unsigned __int8 v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  _BOOL4 v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  double v79;
  int v80;
  uint64_t v81;
  _BOOL8 v82;
  unsigned __int8 v83;
  int v84;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  int v96;
  int v97;
  BOOL v98;
  char v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  unint64_t v108;
  int v109;
  int v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  signed int v119;
  int v120;
  int v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unint64_t v131;
  float v132;
  float v133;
  float *v134;
  float *v135;
  unint64_t v136;
  uint64_t m;
  float v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  float *v143;
  float *v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  float v150;
  float v151;
  float *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  float *v157;
  int v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  int v170;
  int v171;
  _BOOL4 v172;
  int v173;
  int v174;
  float v175;
  float v176;
  BOOL v177;
  int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  int v188;
  int v189;
  BOOL v190;
  int v191;
  uint64_t *v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  char *v228;
  unint64_t v229;
  _QWORD *v230;
  char *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  unint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  __int128 v270;
  _QWORD *v271;
  _QWORD *v272;
  void *v273;
  void *v274;
  _QWORD *v275;
  _QWORD *v276;
  void *v277;
  void *v278;
  uint64_t v279;
  _BOOL8 v280;
  uint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t *v286;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t i;
  signed int v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  int *v297;
  uint64_t v298;
  int v299;
  signed int v300;
  uint64_t v301;
  int *v302;
  uint64_t j;
  signed int v304;
  int v305;
  int v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  signed int *v318;
  uint64_t v319;
  signed int v320;
  uint64_t v321;
  signed int *v322;
  uint64_t k;
  signed int v324;
  signed int v325;
  unsigned int v326;
  signed int v327;
  int v328;
  signed int v329;
  int v330;
  int v331;
  unsigned int v332;
  signed int v333;
  int v334;
  float *v335;
  uint64_t v336;
  uint64_t v338;
  uint64_t v343;
  unint64_t v344;
  uint64_t *v345;
  uint64_t (**v346)();
  _BYTE v347[20];
  _OWORD v348[2];
  unsigned __int8 v349;
  unint64_t v350;
  int v351;
  int v352;
  int v353;
  int v354;
  _BYTE v355[40];
  int *v356;
  __int128 v357;
  __int128 v358;
  char v359;
  unsigned int v360;
  char v361;
  unsigned __int8 v362;
  unsigned __int8 v363;
  unsigned int *v364;
  double v365;
  __int128 v366;
  uint64_t v367;
  _BYTE v368[24];
  __int128 v369;
  int *v370;
  __int128 v371;
  __int128 v372;
  double *v373;
  uint64_t v374;

  v16 = (uint64_t)a11;
  v374 = *MEMORY[0x24BDAC8D0];
  v364 = a4;
  v17 = *(unsigned __int8 *)(a9 + 4208);
  v363 = a14;
  v362 = v17;
  if (v17)
    _ZF = 1;
  else
    _ZF = a14 == 0;
  if (!_ZF && *(_BYTE *)(a2 + 425) != 0)
  {
    *(int32x2_t *)v368 = vdup_n_s32(0x3F7DA86Bu);
    *(_DWORD *)&v368[8] = 1065199723;
    *(_OWORD *)v355 = 0uLL;
    *(_QWORD *)&v20 = *(_QWORD *)a4;
    *((_QWORD *)&v20 + 1) = HIDWORD(*(_QWORD *)a4);
    *(_OWORD *)&v355[16] = v20;
    v21 = sub_2368AD468((uint64_t)a4, (uint64_t)v355, (float *)v368, a11);
    if ((_DWORD)v21)
      return v21;
  }
  if (a14 && *(_DWORD *)(a3 + 28) <= 0x10u && *(int *)(a1 + 560) <= 5 && *(_QWORD *)(a1 + 568) <= 1uLL && !v17)
  {
    v22 = v364;
    v21 = sub_236852B68(v364, a9, a10, 0, a12, *(_DWORD *)(a1 + 576) == 0);
    if ((_DWORD)v21)
      return v21;
    sub_236852984((_QWORD *)(a9 + 1256), (uint64_t)v22);
  }
  if (*(_QWORD *)(a1 + 1008) != *(_QWORD *)(a1 + 1016))
    sub_23683D40C(a9 + 1432, a1 + 1000);
  v338 = *a7;
  v336 = a7[1];
  if (*(_DWORD *)(a3 + 104) == 1)
  {
    v23 = 3;
    if (*(_DWORD *)(a1 + 576) == 1)
      v23 = 1;
  }
  else
  {
    v23 = 3;
  }
  if (!a14)
    v23 = 0;
  v25 = *a5;
  v24 = a5[1];
  v26 = *(unsigned __int8 *)(a3 + 24);
  if (*(_BYTE *)(a3 + 24))
    v26 = *(_DWORD *)(a1 + 576) != 0;
  v361 = v26;
  v27 = *(_DWORD *)(a3 + 28);
  if (v27 < 0x20 || !a14)
  {
    if (!a14)
    {
      v29 = 0;
LABEL_38:
      v30 = v23 - 858993459 * ((v24 - v25) >> 3);
      v31 = *(uint64_t **)(a1 + 48);
      sub_2368001CC((uint64_t)v355, v338, v336, v27, v30);
      v21 = v360;
      if (v360)
      {
LABEL_39:
        sub_2367E2C48((uint64_t)v355);
        return v21;
      }
      v334 = v30;
      v335 = (float *)(a1 + 512);
      *(_OWORD *)v368 = *(_OWORD *)v355;
      memset(v355, 0, sizeof(v355));
      v369 = *(_OWORD *)&v355[24];
      *(_QWORD *)&v368[16] = *(_QWORD *)&v355[16];
      v370 = v356;
      v356 = 0;
      v371 = v357;
      v372 = v358;
      LOBYTE(v373) = v359;
      sub_23680046C((uint64_t)v31, (uint64_t)v368);
      v346 = (uint64_t (**)())&v369;
      sub_2367D6C98((void ***)&v346);
      v346 = (uint64_t (**)())v368;
      sub_2367D6D24((void ***)&v346);
      v354 = 0;
      if (!*(_DWORD *)(a1 + 576) && *(_BYTE *)(a1 + 580))
      {
        *(_DWORD *)&v368[8] = 1157627904;
        *(_QWORD *)v368 = 0x4500000047000000;
        if (*v335 > 0.0 && !*(_DWORD *)(a1 + 864))
        {
          __asm { FMOV            V2.2S, #1.0 }
          *(float32x2_t *)v368 = vmul_f32(vdiv_f32(_D2, vmla_n_f32(_D2, (float32x2_t)0x4160000041B80000, *v335)), (float32x2_t)0x4500000047000000);
          *(_DWORD *)&v368[8] = *(_DWORD *)&v368[4];
          *v335 = 0.0;
        }
        v89 = *(_QWORD *)(a1 + 952);
        v90 = a9 + 208;
        if (*(_QWORD *)(a1 + 960) - v89 == 12)
        {
          sub_23685B348(v90, v89);
        }
        else
        {
          sub_23685B348(v90, (uint64_t)v368);
          v29 = 12;
        }
      }
      v33 = *((_DWORD *)v31 + 16);
      if (v33 < 32)
        v34 = ~(-1 << v33);
      else
        v34 = 0;
      if (a14)
      {
        v35 = v354;
        if (v354 <= 2)
        {
          while (1)
          {
            v36 = *(_DWORD *)(a1 + 576);
            if (*(_DWORD *)(a3 + 104) == 1 && v35 != 0 && v36 == 1)
              goto LABEL_76;
            v353 = v35;
            if (v35 <= 1 && !v36)
              break;
            v365 = (double)v34;
            v39 = v35;
            if (v36)
            {
              v40 = v35;
LABEL_69:
              v57 = *(_DWORD *)(a3 + 28);
              v351 = *(_DWORD *)(a3 + 32);
              v352 = v57;
              v58 = *v31;
              *(_DWORD *)(*v31 + (v39 << 6) + 56) = *(unsigned __int8 *)(a2 + 60)
                                                  - byte_236923AD4[*(unsigned int *)(a2 + 48 + 4 * v40)];
              *(_DWORD *)(v58 + ((uint64_t)v353 << 6) + 60) = *(unsigned __int8 *)(a2 + 61)
                                                           - byte_236923AD8[*(unsigned int *)(a2 + 48 + 4 * v354)];
              v350 = 0;
              v59 = *v31 + ((uint64_t)v353 << 6);
              v350 = (v338 - 1 + (1 << *(_DWORD *)(v59 + 56))) / (unint64_t)(1 << *(_DWORD *)(v59 + 56));
              v60 = 1 << *(_DWORD *)(v59 + 60);
              v61 = (v336 - 1 + v60) / v60;
              *(_QWORD *)(v59 + 40) = (int)v350;
              *(_QWORD *)(v59 + 48) = (int)v61;
              v21 = sub_2367E28F4(v59);
              if ((_DWORD)v21)
                goto LABEL_39;
              v349 = 0;
              *(_QWORD *)v368 = &v349;
              *(_QWORD *)&v368[8] = &v364;
              *(_QWORD *)&v368[16] = &v354;
              *(_QWORD *)&v369 = a6;
              *((_QWORD *)&v369 + 1) = v31;
              v370 = &v353;
              *(_QWORD *)&v371 = &v350;
              *((_QWORD *)&v371 + 1) = &v352;
              *(_QWORD *)&v372 = &v351;
              *((_QWORD *)&v372 + 1) = &v361;
              v373 = &v365;
              if (a11)
              {
                v62 = sub_23684B42C((uint64_t)a11, v61, (uint64_t)v368);
              }
              else
              {
                v346 = 0;
                *(_QWORD *)v347 = &v346;
                v62 = sub_23684B42C((uint64_t)&v346, v61, (uint64_t)v368);
              }
              v21 = v62;
              if (v62)
                goto LABEL_39;
              v63 = atomic_load(&v349);
              if ((v63 & 1) != 0)
                goto LABEL_102;
              goto LABEL_75;
            }
            v41 = *(float *)(a9 + 4 * v35 + 268);
            v365 = v41;
            v40 = v35;
            if (v35 != 2)
              goto LABEL_69;
            if (v336)
            {
              v42 = 0;
              v43 = 0;
              v44 = v364;
              v45 = *((_QWORD *)v364 + 2);
              v46 = *v31;
              v48 = *(_QWORD *)(*v31 + 16);
              v47 = *(int **)(*v31 + 24);
              do
              {
                if (v338)
                {
                  v49 = (unsigned int *)(*(_QWORD *)(v46 + ((uint64_t)v353 << 6) + 24)
                                       + *(_QWORD *)(v46 + ((uint64_t)v353 << 6) + 16) * v43);
                  v50 = (float *)(*(_QWORD *)&v44[10 * v354 + 6] + v42);
                  v51 = v47;
                  v52 = v338;
                  do
                  {
                    v53 = *v50++;
                    v54 = v53 * v41 + 0.5;
                    *v49 = (int)v54;
                    v55 = *v51++;
                    v56 = (int)v54 - v55;
                    if ((int)v54 < v55)
                      ++v56;
                    *v49++ = v56 & 0xFFFFFFFE;
                    --v52;
                  }
                  while (v52);
                }
                ++v43;
                v47 = (int *)((char *)v47 + v48);
                v42 += v45;
              }
              while (v43 != v336);
            }
LABEL_75:
            v35 = v354;
LABEL_76:
            v354 = v35 + 1;
            v177 = v35++ < 2;
            if (!v177)
              goto LABEL_77;
          }
          v39 = (1 - v35);
          v353 = 1 - v35;
          v40 = v35;
          v365 = *(float *)(a9 + 4 * v35 + 268);
          goto LABEL_69;
        }
LABEL_77:
        if (*(_DWORD *)(a3 + 104) == 1 && *(_DWORD *)(a1 + 576) == 1)
          v354 = 1;
      }
      v64 = v29;
      v332 = v34;
      v345 = v31;
      v365 = 0.0;
      if (a5[1] != *a5)
      {
        v65 = 0;
        v66 = v354;
        do
        {
          v67 = *(_QWORD *)(a3 + 328);
          v68 = *(unsigned int *)(*(_QWORD *)(a2 + 272) + 4 * v65);
          v69 = *v31 + ((uint64_t)v66 << 6);
          v70 = (int)((v68 - 1 + a7[3]) / v68);
          *(_QWORD *)(v69 + 40) = (int)((v68 - 1 + a7[2]) / v68);
          *(_QWORD *)(v69 + 48) = v70;
          v21 = sub_2367E28F4(v69);
          if ((_DWORD)v21)
            goto LABEL_39;
          v71 = __clz(v68) ^ 0x3F;
          v72 = *(_DWORD *)(a2 + 268);
          v73 = (v72 & (v72 - 1)) != 0;
          v74 = __clz(v72) ^ 0xFFFFFFE0;
          if ((v68 & (v68 - 1)) != 0)
            ++v71;
          v75 = v74 + v71 - v73 + 1;
          v76 = *v31;
          *(_DWORD *)(*v31 + ((uint64_t)v354 << 6) + 60) = v75;
          *(_DWORD *)(v76 + ((uint64_t)v354 << 6) + 56) = v75;
          v353 = 0;
          v77 = v67 + 96 * v65;
          v78 = *(_DWORD *)(v77 + 28);
          v352 = 0;
          v353 = v78;
          v352 = *(_DWORD *)(v77 + 32);
          LOBYTE(v351) = 0;
          LOBYTE(v351) = *(_BYTE *)(v77 + 24);
          v350 = 0;
          v79 = (double)~(-1 << *(_DWORD *)(v77 + 28));
          if ((_BYTE)v351)
            v79 = 1.0;
          v350 = *(_QWORD *)&v79;
          if ((_BYTE)v351)
            v80 = v78;
          else
            v80 = v78 + 1;
          if (v80 > v64)
            v64 = v80;
          v349 = 0;
          v81 = *(unsigned int *)(*v31 + ((uint64_t)v354 << 6) + 4);
          *(_QWORD *)v368 = &v349;
          *(_QWORD *)&v368[8] = a5;
          *(_QWORD *)&v368[16] = &v365;
          *(_QWORD *)&v369 = a6;
          *((_QWORD *)&v369 + 1) = v31;
          v370 = &v354;
          *(_QWORD *)&v371 = &v353;
          *((_QWORD *)&v371 + 1) = &v352;
          *(_QWORD *)&v372 = &v351;
          *((_QWORD *)&v372 + 1) = &v350;
          v16 = (uint64_t)a11;
          if (a11)
          {
            v82 = sub_23684B4C0((uint64_t)a11, v81, (uint64_t)v368);
          }
          else
          {
            v346 = 0;
            *(_QWORD *)v347 = &v346;
            v82 = sub_23684B4C0((uint64_t)&v346, v81, (uint64_t)v368);
          }
          v21 = v82;
          if (v82)
            goto LABEL_39;
          v83 = atomic_load(&v349);
          if ((v83 & 1) != 0)
            goto LABEL_102;
          v65 = *(_QWORD *)&v365 + 1;
          v365 = *(double *)&v65;
          v66 = ++v354;
        }
        while (v65 < 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3));
      }
      if (*(_DWORD *)(a1 + 912) == 5)
        v84 = 16;
      else
        v84 = 32;
      if (v64 > v84)
      {
LABEL_102:
        v21 = 1;
        goto LABEL_39;
      }
      v330 = v84;
      if ((sub_23682B8B4((uint64_t)v335) & 1) == 0)
      {
        v91 = v332;
        if (!*(_DWORD *)(a1 + 576))
          *(_DWORD *)(a1 + 876) = 0;
        *(_BYTE *)(a1 + 888) = 0;
        *(_QWORD *)(a1 + 880) = 0;
        v92 = v362;
        if (v362)
          goto LABEL_117;
        goto LABEL_146;
      }
      v91 = v332;
      if (*(_DWORD *)(a1 + 884))
      {
        if (v362)
        {
          v92 = 1;
LABEL_117:
          v331 = v92;
LABEL_149:
          v119 = v64;
          goto LABEL_150;
        }
      }
      else
      {
        v93 = v362;
        if (!*(_BYTE *)(a1 + 888) || v362)
        {
          if (v362)
          {
LABEL_145:
            v331 = v93;
            goto LABEL_149;
          }
LABEL_146:
          if (*(float *)(a1 + 876) <= 0.0 || *(_BYTE *)(a1 + 888))
          {
            v331 = 0;
            goto LABEL_149;
          }
          if (*(int *)(a1 + 560) < 9 || (v93 = 0, v363) && *(_DWORD *)(a3 + 28) >= 9u)
          {
            v343 = ((v31[1] - *v31) >> 6) - v31[9];
            if (v343)
            {
              v119 = 0;
              for (i = 0; i != v343; ++i)
              {
                v333 = v91;
                v293 = v119;
                v294 = (_QWORD *)(*v31 + ((v31[9] + i) << 6));
                v295 = v294[6];
                if (v295)
                {
                  v296 = 0;
                  v298 = v294[2];
                  v297 = (int *)v294[3];
                  v299 = 0x7FFFFFFF;
                  v300 = 0x80000000;
                  v301 = v294[5];
                  do
                  {
                    v302 = v297;
                    for (j = v301; j; --j)
                    {
                      v305 = *v302++;
                      v304 = v305;
                      if (v305 < v299)
                        v299 = v304;
                      if (v304 > v300)
                        v300 = v304;
                    }
                    ++v296;
                    v297 = (int *)((char *)v297 + v298);
                  }
                  while (v296 != v295);
                }
                else
                {
                  v300 = 0x80000000;
                  v299 = 0x7FFFFFFF;
                }
                sub_236801E64((int64x2_t *)v368, 1);
                *(_DWORD *)&v368[12] = *((_DWORD *)v31 + 18) + i;
                v306 = (int)(*(float *)(a1 + 876) / 100.0 * (double)(v300 - (uint64_t)v299 + 1));
                if (v306 >= (int)((unint64_t)(v336 * v338) >> 4))
                  v306 = (unint64_t)(v336 * v338) >> 4;
                *(_DWORD *)&v368[20] = 1;
                LODWORD(v369) = v306;
                v346 = &off_250800498;
                *(_OWORD *)&v347[4] = 0u;
                memset(v348, 0, 28);
                v366 = xmmword_2368AF3F0;
                v365 = COERCE_DOUBLE(&off_2507FF550);
                v367 = 0;
                sub_2367FF42C(&v346, (uint64_t)&v365);
                v119 = v293;
                v91 = v333;
                if (sub_23684B554(v31, (uint64_t)v368, *(_DWORD *)(a1 + 560), (uint64_t)&v346, v16, 0, v307, v308, v309, v310, v311, v312, v313, v314))
                {
                  v315 = (_QWORD *)(*v31 + ((v31[9] + i) << 6));
                  v316 = v315[6];
                  if (v316)
                  {
                    v317 = 0;
                    v319 = v315[2];
                    v318 = (signed int *)v315[3];
                    v320 = 0x80000000;
                    v321 = v315[5];
                    do
                    {
                      v322 = v318;
                      for (k = v321; k; --k)
                      {
                        v325 = *v322++;
                        v324 = v325;
                        if (v325 > v320)
                          v320 = v324;
                      }
                      ++v317;
                      v318 = (signed int *)((char *)v318 + v319);
                    }
                    while (v317 != v316);
                    if (v320 < v333)
                      v91 = v320;
                    v326 = __clz(v320) ^ 0x1F;
                    if ((v320 & (v320 - 1)) != 0)
                      ++v326;
                    if (v320 <= 0)
                      v327 = 0;
                    else
                      v327 = v326;
                  }
                  else
                  {
                    v327 = 0;
                    v91 = 0x80000000;
                  }
                  if (v119 <= v327)
                    v119 = v327;
                }
                else
                {
                  v119 = v64;
                }
                *(_QWORD *)v368 = &off_2508004C0;
                v346 = (uint64_t (**)())&v369 + 1;
                sub_2367D78F8((void ***)&v346);
                v331 = 0;
              }
            }
            else
            {
              v331 = 0;
              v119 = 0;
            }
LABEL_150:
            v120 = v363;
            if (*(_DWORD *)(a1 + 576) == 1
              && v363
              && (unint64_t)(((v31[1] - *v31) >> 6) - v31[9]) >= 3
              && v119 + 1 < v330)
            {
              v121 = *(_DWORD *)(a1 + 868);
              if (v121 < 0)
              {
                if (!sub_23682B8B4((uint64_t)v335) || *(int *)(a1 + 560) >= 6)
                {
                  sub_236801E64((int64x2_t *)v368, 0);
                  *(_DWORD *)&v368[12] = v31[9];
                  *(_DWORD *)&v368[16] = 6;
                  v346 = &off_250800498;
                  *(_OWORD *)&v347[4] = 0u;
                  memset(v348, 0, 28);
                  sub_2367F1AF8((uint64_t)&v346);
                  sub_23684B6DC(v31, (uint64_t)v368, (uint64_t)&v346, v16, 0);
                  goto LABEL_165;
                }
              }
              else if (v121 >= 1)
              {
                sub_236801E64((int64x2_t *)v368, 0);
                v122 = *(_DWORD *)(a1 + 868);
                *(_DWORD *)&v368[12] = v31[9];
                *(_DWORD *)&v368[16] = v122;
                v346 = &off_250800498;
                *(_OWORD *)&v347[4] = 0u;
                memset(v348, 0, 28);
                sub_2367F1AF8((uint64_t)&v346);
                sub_23684B6DC(v31, (uint64_t)v368, (uint64_t)&v346, v16, 0);
LABEL_165:
                *(_QWORD *)v368 = &off_2508004C0;
                v346 = (uint64_t (**)())&v369 + 1;
                sub_2367D78F8((void ***)&v346);
                ++v119;
              }
            }
            v329 = v119;
            v328 = v120;
            v123 = *(unsigned int *)(a1 + 872);
            if ((int)v123 >= 1)
            {
              v125 = *v31;
              v124 = v31[1];
              if (v123 < (v124 - *v31) >> 6)
              {
                v126 = 0;
                v127 = *(_DWORD *)(a1 + 872);
                do
                {
                  if (v123)
                  {
                    do
                    {
                      sub_236801E64((int64x2_t *)v368, 0);
                      *(int8x8_t *)&v368[12] = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v123 == 1), 0x1FuLL)), (int8x8_t)(v126 | 0x1C00000000), (int8x8_t)((v123 + v126 - 2) | 0xE00000000));
                      v346 = &off_250800498;
                      *(_OWORD *)&v347[4] = 0u;
                      v348[0] = 0u;
                      if (v123 == 1)
                        v123 = 0;
                      else
                        v123 -= 2;
                      *(_OWORD *)((char *)v348 + 12) = 0uLL;
                      v366 = xmmword_2368AF3F0;
                      v365 = COERCE_DOUBLE(&off_2507FF550);
                      v367 = 0;
                      sub_2367FF42C(&v346, (uint64_t)&v365);
                      sub_23684B6DC(v31, (uint64_t)v368, (uint64_t)&v346, (uint64_t)a11, 0);
                      *(_QWORD *)v368 = &off_2508004C0;
                      v346 = (uint64_t (**)())&v369 + 1;
                      sub_2367D78F8((void ***)&v346);
                    }
                    while (v123);
                    v127 = *(_DWORD *)(a1 + 872);
                    v125 = *v31;
                    v124 = v31[1];
                  }
                  ++v126;
                  v123 = v127;
                }
                while (v126 + v127 < (unint64_t)((v124 - v125) >> 6));
              }
            }
            if (v331)
            {
              v128 = v91;
              v129 = v330;
              v130 = v329;
            }
            else
            {
              v128 = v91;
              v129 = v330;
              v130 = v329;
              if (*(_DWORD *)(a1 + 864) && *v31 != v31[1] && v329 + 2 < v330)
              {
                sub_236801E64((int64x2_t *)v368, 2);
                v346 = &off_250800498;
                *(_OWORD *)&v347[4] = 0u;
                memset(v348, 0, 28);
                sub_2367F1AF8((uint64_t)&v346);
                sub_23684B6DC(v31, (uint64_t)v368, (uint64_t)&v346, (uint64_t)a11, 0);
                *(_QWORD *)v368 = &off_2508004C0;
                v346 = (uint64_t (**)())&v369 + 1;
                sub_2367D78F8((void ***)&v346);
                v130 = v329 + 2;
              }
            }
            if (v130 >= v129)
              *(_DWORD *)(a1 + 868) = 0;
            if ((sub_23682B8B4((uint64_t)v335) & 1) != 0)
              goto LABEL_431;
            v131 = (v31[1] - *v31) >> 6;
            *(_DWORD *)v368 = 1;
            sub_2367CBAC8((char **)(a1 + 96), v131, v368);
            v132 = *(_DWORD *)(a1 + 864) ? 0.25 : 0.025;
            v133 = *(_DWORD *)(a1 + 576) ? (float)v128 / 255.0 : 1.0;
            v134 = 0;
            v135 = 0;
            v136 = 0;
            for (m = 0; m != 3; ++m)
            {
              v138 = v133 * (float)(v132 * *v335);
              if ((unint64_t)v135 >= v136)
              {
                v139 = v135 - v134;
                v140 = v139 + 1;
                if ((unint64_t)(v139 + 1) >> 62)
                  sub_2367C3440();
                if ((uint64_t)(v136 - (_QWORD)v134) >> 1 > v140)
                  v140 = (uint64_t)(v136 - (_QWORD)v134) >> 1;
                if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
                  v141 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v141 = v140;
                if (v141)
                  v141 = (unint64_t)sub_2367C3454(v141);
                else
                  v142 = 0;
                v143 = (float *)(v141 + 4 * v139);
                *v143 = v138;
                v144 = v143 + 1;
                while (v135 != v134)
                {
                  v145 = *((_DWORD *)v135-- - 1);
                  *((_DWORD *)v143-- - 1) = v145;
                }
                v136 = v141 + 4 * v142;
                if (v134)
                  operator delete(v134);
                v134 = v143;
                v135 = v144;
              }
              else
              {
                *v135++ = v138;
              }
            }
            if (a5[1] != *a5)
            {
              v146 = 0;
              do
              {
                v147 = *(_DWORD *)(*(_QWORD *)(a3 + 328) + 96 * v146 + 28);
                if (v147 < 32)
                  v148 = ~(-1 << v147);
                else
                  v148 = 0;
                v149 = *(_QWORD *)(a1 + 520);
                v150 = 0.0;
                if (v146 < (*(_QWORD *)(a1 + 528) - v149) >> 2)
                {
                  v150 = *(float *)(v149 + 4 * v146);
                  if (v150 < 0.0)
                    v150 = *v335;
                }
                v151 = (float)((float)v148 / 255.0) * (float)(v132 * v150);
                if ((unint64_t)v135 >= v136)
                {
                  v153 = v135 - v134;
                  v154 = v153 + 1;
                  if ((unint64_t)(v153 + 1) >> 62)
                    sub_2367C3440();
                  if ((uint64_t)(v136 - (_QWORD)v134) >> 1 > v154)
                    v154 = (uint64_t)(v136 - (_QWORD)v134) >> 1;
                  if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
                    v155 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v155 = v154;
                  if (v155)
                    v155 = (unint64_t)sub_2367C3454(v155);
                  else
                    v156 = 0;
                  v157 = (float *)(v155 + 4 * v153);
                  *v157 = v151;
                  v152 = v157 + 1;
                  while (v135 != v134)
                  {
                    v158 = *((_DWORD *)v135-- - 1);
                    *((_DWORD *)v157-- - 1) = v158;
                  }
                  v136 = v155 + 4 * v156;
                  if (v134)
                    operator delete(v134);
                  v134 = v157;
                }
                else
                {
                  *v135 = v151;
                  v152 = v135 + 1;
                }
                ++v146;
                v135 = v152;
              }
              while (v146 < 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3));
            }
            v159 = *(float *)(a1 + 728);
            if (v159 == 0.0)
            {
              v21 = 1;
            }
            else
            {
              v160 = v31[9];
              v161 = *v31;
              v162 = (v31[1] - *v31) >> 6;
              if (v162 > v160)
              {
                v163 = v31[9];
                v164 = 3;
                if (v328)
                  v164 = 0;
                v165 = v334;
                v166 = *(_DWORD *)(a1 + 576);
                v167 = *(_QWORD *)(a1 + 96);
                v168 = v31[9];
                do
                {
                  v169 = (unsigned int *)(v161 + (v163 << 6));
                  v170 = v169[15] + v169[14];
                  if (v170 >= 16)
                    v171 = 16;
                  else
                    v171 = v169[15] + v169[14];
                  v172 = v170 > 0;
                  v173 = v164 + (v163 - v160) % v334;
                  if (v165 >= 3 && v162 - 4 <= v163 && *(_DWORD *)(a1 + 864))
                    v173 = 1;
                  v174 = v171 - v172;
                  if (v166 || v173 > 2)
                  {
                    if (*(_DWORD *)(a1 + 868) && (v173 >= 1 ? (v177 = v173 <= 2) : (v177 = 0), v177))
                    {
                      v175 = v134[v173] * 0.35;
                      v176 = flt_2369235FC[v174];
                    }
                    else
                    {
                      v176 = (float)(v134[v173] * 0.35) * 1.1;
                      v175 = flt_23692363C[v174];
                    }
                  }
                  else
                  {
                    v175 = v134[v173] * 2.4;
                    v176 = flt_23692353C[16 * (uint64_t)v173 + v174];
                  }
                  v178 = (int)(float)(v175 * v176);
                  if (v178 <= 1)
                    v179 = 1;
                  else
                    v179 = (int)(float)(v175 * v176);
                  if (v178 >= 2)
                  {
                    v180 = v169[1];
                    if ((_DWORD)v180)
                    {
                      v181 = 0;
                      v183 = *((_QWORD *)v169 + 2);
                      v182 = *((_QWORD *)v169 + 3);
                      v184 = v179 >> 1;
                      LODWORD(v185) = *v169;
                      do
                      {
                        if ((_DWORD)v185)
                        {
                          v186 = 0;
                          do
                          {
                            v187 = *(_DWORD *)(v182 + 4 * v186);
                            v188 = v187 + v184;
                            v189 = (int)(v184 - v187) % v179;
                            v190 = v187 >= 0;
                            if (v187 < 0)
                              v191 = v184 - v187;
                            else
                              v191 = (int)(v187 + v184) % v179;
                            if (!v190)
                              v188 = v189;
                            *(_DWORD *)(v182 + 4 * v186++) = v188 - v191;
                            v185 = *v169;
                          }
                          while (v186 < v185);
                          v180 = v169[1];
                        }
                        ++v181;
                        v182 += v183;
                      }
                      while (v181 < v180);
                    }
                  }
                  *(_DWORD *)(v167 + 4 * v163) = v179;
                  LODWORD(v168) = v168 + 1;
                  v163 = v168;
                  v165 = v334;
                }
                while (v162 > v168);
              }
              v21 = 0;
            }
            if (v134)
              operator delete(v134);
            if (v159 != 0.0)
            {
LABEL_431:
              v192 = a7;
              if (a7[15])
              {
                v193 = 0;
                v194 = *(char **)(a1 + 1240);
                do
                {
                  v195 = v192[12];
                  v196 = v193 / v195;
                  v197 = v193 % v195;
                  v198 = v192[17];
                  v199 = v198 * v197;
                  v200 = v198 * v196;
                  v201 = v197 + (*a8 >> 11) + (v196 + (a8[1] >> 11)) * *(_QWORD *)(a1 + 464);
                  v202 = *(_QWORD *)(a1 + 1248);
                  if ((unint64_t)v194 >= v202)
                  {
                    v203 = *(char **)(a1 + 1232);
                    v204 = 0x8E38E38E38E38E39 * ((v194 - v203) >> 3);
                    v205 = v204 + 1;
                    if (v204 + 1 > 0x38E38E38E38E38ELL)
                      sub_2367C3440();
                    v206 = 0x8E38E38E38E38E39 * ((uint64_t)(v202 - (_QWORD)v203) >> 3);
                    if (2 * v206 > v205)
                      v205 = 2 * v206;
                    if (v206 >= 0x1C71C71C71C71C7)
                      v207 = 0x38E38E38E38E38ELL;
                    else
                      v207 = v205;
                    if (v207)
                    {
                      v207 = (unint64_t)sub_2367D70D4(v207);
                      v194 = *(char **)(a1 + 1240);
                      v203 = *(char **)(a1 + 1232);
                    }
                    else
                    {
                      v208 = 0;
                    }
                    v209 = v207 + 72 * v204;
                    *(_QWORD *)v209 = v199;
                    *(_QWORD *)(v209 + 8) = v200;
                    *(_QWORD *)(v209 + 16) = v198;
                    *(_QWORD *)(v209 + 24) = v198;
                    *(_QWORD *)(v209 + 32) = 0x3E800000003;
                    *(_DWORD *)(v209 + 40) = 2;
                    *(_QWORD *)(v209 + 48) = 0;
                    *(_QWORD *)(v209 + 56) = v201;
                    *(_QWORD *)(v209 + 64) = 0;
                    v210 = v209;
                    if (v194 != v203)
                    {
                      do
                      {
                        *(_OWORD *)(v210 - 72) = *(_OWORD *)(v194 - 72);
                        v211 = *(_OWORD *)(v194 - 56);
                        v212 = *(_OWORD *)(v194 - 40);
                        v213 = *(_OWORD *)(v194 - 24);
                        *(_QWORD *)(v210 - 8) = *((_QWORD *)v194 - 1);
                        *(_OWORD *)(v210 - 24) = v213;
                        *(_OWORD *)(v210 - 40) = v212;
                        *(_OWORD *)(v210 - 56) = v211;
                        v210 -= 72;
                        v194 -= 72;
                      }
                      while (v194 != v203);
                      v203 = *(char **)(a1 + 1232);
                    }
                    *(_QWORD *)(a1 + 1232) = v210;
                    v194 = (char *)(v209 + 72);
                    *(_QWORD *)(a1 + 1240) = v209 + 72;
                    *(_QWORD *)(a1 + 1248) = v207 + 72 * v208;
                    if (v203)
                      operator delete(v203);
                    v192 = a7;
                  }
                  else
                  {
                    *(_QWORD *)v194 = v199;
                    *((_QWORD *)v194 + 1) = v200;
                    *((_QWORD *)v194 + 2) = v198;
                    *((_QWORD *)v194 + 3) = v198;
                    *((_QWORD *)v194 + 4) = 0x3E800000003;
                    *((_DWORD *)v194 + 10) = 2;
                    *((_QWORD *)v194 + 6) = 0;
                    *((_QWORD *)v194 + 7) = v201;
                    *((_QWORD *)v194 + 8) = 0;
                    v194 += 72;
                  }
                  *(_QWORD *)(a1 + 1240) = v194;
                  ++v193;
                }
                while (v193 < v192[15]);
              }
              v214 = v192[14];
              v215 = (uint64_t)a11;
              if (v214)
              {
                v216 = 0;
                v217 = *(_QWORD *)(a9 + 4272);
                do
                {
                  if (v217)
                  {
                    v218 = 0;
                    v219 = v192[10];
                    v220 = v216 / v219;
                    v344 = v216;
                    v221 = v216 % v219;
                    v222 = v192[16];
                    v223 = v222 * v221;
                    v224 = v222 * v220;
                    v225 = *a8 / *(_QWORD *)(a1 + 496)
                         + v221
                         + (a8[1] / *(_QWORD *)(a1 + 496) + v220) * *(_QWORD *)(a1 + 448);
                    do
                    {
                      *(_DWORD *)v368 = 0;
                      LODWORD(v346) = 0;
                      sub_2367DA0A4(a2 + 104, v218, &v346, v368);
                      v226 = (int)v346;
                      v227 = *(_DWORD *)v368;
                      v228 = *(char **)(a1 + 1240);
                      v229 = *(_QWORD *)(a1 + 1248);
                      if ((unint64_t)v228 >= v229)
                      {
                        v231 = *(char **)(a1 + 1232);
                        v232 = 0x8E38E38E38E38E39 * ((v228 - v231) >> 3);
                        v233 = v232 + 1;
                        if (v232 + 1 > 0x38E38E38E38E38ELL)
                          sub_2367C3440();
                        v234 = 0x8E38E38E38E38E39 * ((uint64_t)(v229 - (_QWORD)v231) >> 3);
                        if (2 * v234 > v233)
                          v233 = 2 * v234;
                        if (v234 >= 0x1C71C71C71C71C7)
                          v235 = 0x38E38E38E38E38ELL;
                        else
                          v235 = v233;
                        if (v235)
                        {
                          v235 = (unint64_t)sub_2367D70D4(v235);
                          v228 = *(char **)(a1 + 1240);
                          v231 = *(char **)(a1 + 1232);
                        }
                        else
                        {
                          v236 = 0;
                        }
                        v237 = v235 + 72 * v232;
                        *(_QWORD *)v237 = v223;
                        *(_QWORD *)(v237 + 8) = v224;
                        *(_QWORD *)(v237 + 16) = v222;
                        *(_QWORD *)(v237 + 24) = v222;
                        *(_DWORD *)(v237 + 32) = v226;
                        *(_DWORD *)(v237 + 36) = v227;
                        *(_DWORD *)(v237 + 40) = 5;
                        *(_QWORD *)(v237 + 48) = 0;
                        *(_QWORD *)(v237 + 56) = v225;
                        *(_QWORD *)(v237 + 64) = v218;
                        v238 = v237;
                        if (v228 != v231)
                        {
                          do
                          {
                            *(_OWORD *)(v238 - 72) = *(_OWORD *)(v228 - 72);
                            v239 = *(_OWORD *)(v228 - 56);
                            v240 = *(_OWORD *)(v228 - 40);
                            v241 = *(_OWORD *)(v228 - 24);
                            *(_QWORD *)(v238 - 8) = *((_QWORD *)v228 - 1);
                            *(_OWORD *)(v238 - 24) = v241;
                            *(_OWORD *)(v238 - 40) = v240;
                            *(_OWORD *)(v238 - 56) = v239;
                            v238 -= 72;
                            v228 -= 72;
                          }
                          while (v228 != v231);
                          v231 = *(char **)(a1 + 1232);
                        }
                        *(_QWORD *)(a1 + 1232) = v238;
                        v230 = (_QWORD *)(v237 + 72);
                        *(_QWORD *)(a1 + 1240) = v237 + 72;
                        *(_QWORD *)(a1 + 1248) = v235 + 72 * v236;
                        if (v231)
                          operator delete(v231);
                      }
                      else
                      {
                        *(_QWORD *)v228 = v223;
                        *((_QWORD *)v228 + 1) = v224;
                        *((_QWORD *)v228 + 2) = v222;
                        *((_QWORD *)v228 + 3) = v222;
                        *((_DWORD *)v228 + 8) = v226;
                        *((_DWORD *)v228 + 9) = v227;
                        *((_DWORD *)v228 + 10) = 5;
                        *((_QWORD *)v228 + 6) = 0;
                        *((_QWORD *)v228 + 7) = v225;
                        v230 = v228 + 72;
                        *((_QWORD *)v228 + 8) = v218;
                      }
                      *(_QWORD *)(a1 + 1240) = v230;
                      ++v218;
                      v217 = *(_QWORD *)(a9 + 4272);
                    }
                    while (v218 < v217);
                    v192 = a7;
                    v214 = a7[14];
                    v215 = (uint64_t)a11;
                    v216 = v344;
                  }
                  ++v216;
                }
                while (v216 < v214);
              }
              v242 = *(_QWORD *)(a1 + 1240);
              v243 = *(_QWORD *)(a1 + 1232);
              if (v242 - v243 == 144)
              {
                v244 = *(_QWORD *)(a1 + 1248);
                if (v242 >= v244)
                {
                  v246 = 0x8E38E38E38E38E39 * ((uint64_t)(v244 - v243) >> 3);
                  if (2 * v246 <= 3)
                    v247 = 3;
                  else
                    v247 = 2 * v246;
                  if (v246 >= 0x1C71C71C71C71C7)
                    v248 = 0x38E38E38E38E38ELL;
                  else
                    v248 = v247;
                  v249 = (char *)sub_2367D70D4(v248);
                  v250 = v249 + 144;
                  v252 = &v249[72 * v251];
                  *((_QWORD *)v249 + 18) = 0;
                  *((_QWORD *)v249 + 19) = 0;
                  *((_QWORD *)v249 + 20) = v338;
                  *((_QWORD *)v249 + 21) = v336;
                  *((_QWORD *)v249 + 22) = 0x3E800000000;
                  *(_OWORD *)(v249 + 184) = 0u;
                  *(_OWORD *)(v249 + 200) = 0u;
                  v245 = v249 + 216;
                  v253 = *(char **)(a1 + 1240);
                  v254 = *(char **)(a1 + 1232);
                  if (v253 != v254)
                  {
                    do
                    {
                      *(_OWORD *)(v250 - 72) = *(_OWORD *)(v253 - 72);
                      v255 = *(_OWORD *)(v253 - 56);
                      v256 = *(_OWORD *)(v253 - 40);
                      v257 = *(_OWORD *)(v253 - 24);
                      *((_QWORD *)v250 - 1) = *((_QWORD *)v253 - 1);
                      *(_OWORD *)(v250 - 24) = v257;
                      *(_OWORD *)(v250 - 40) = v256;
                      *(_OWORD *)(v250 - 56) = v255;
                      v250 -= 72;
                      v253 -= 72;
                    }
                    while (v253 != v254);
                    v253 = *(char **)(a1 + 1232);
                  }
                  *(_QWORD *)(a1 + 1232) = v250;
                  *(_QWORD *)(a1 + 1240) = v245;
                  *(_QWORD *)(a1 + 1248) = v252;
                  if (v253)
                    operator delete(v253);
                }
                else
                {
                  *(_QWORD *)v242 = 0;
                  *(_QWORD *)(v242 + 8) = 0;
                  *(_QWORD *)(v242 + 16) = v338;
                  *(_QWORD *)(v242 + 24) = v336;
                  *(_QWORD *)(v242 + 32) = 0x3E800000000;
                  *(_OWORD *)(v242 + 40) = 0u;
                  *(_OWORD *)(v242 + 56) = 0u;
                  v245 = (char *)(v242 + 72);
                }
                *(_QWORD *)(a1 + 1240) = v245;
              }
              v258 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
              v259 = *(_QWORD **)(a1 + 1184);
              v260 = *(_QWORD **)(a1 + 1176);
              v261 = 0xAAAAAAAAAAAAAAABLL * (v259 - v260);
              v262 = v258 - v261;
              if (v258 <= v261)
              {
                if (v258 < v261)
                {
                  v275 = &v260[0xBA2E8BA2E8BA2E9 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)];
                  if (v259 != v275)
                  {
                    v276 = *(_QWORD **)(a1 + 1184);
                    do
                    {
                      v278 = (void *)*(v276 - 3);
                      v276 -= 3;
                      v277 = v278;
                      if (v278)
                      {
                        *(v259 - 2) = v277;
                        operator delete(v277);
                      }
                      v259 = v276;
                    }
                    while (v276 != v275);
                  }
                  *(_QWORD *)(a1 + 1184) = v275;
                }
              }
              else
              {
                v263 = *(_QWORD *)(a1 + 1192);
                if (0xAAAAAAAAAAAAAAABLL * ((v263 - (uint64_t)v259) >> 3) >= v262)
                {
                  bzero(*(void **)(a1 + 1184), 24 * ((24 * v262 - 24) / 0x18) + 24);
                  *(_QWORD *)(a1 + 1184) = &v259[3 * ((24 * v262 - 24) / 0x18) + 3];
                }
                else
                {
                  if (v258 > 0xAAAAAAAAAAAAAAALL)
                    sub_2367C3440();
                  v264 = 0xAAAAAAAAAAAAAAABLL * ((v263 - (uint64_t)v260) >> 3);
                  if (2 * v264 > v258)
                    v258 = 2 * v264;
                  if (v264 >= 0x555555555555555)
                    v265 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v265 = v258;
                  if (v265 > 0xAAAAAAAAAAAAAAALL)
                    sub_2367C3488();
                  v266 = (char *)operator new(24 * v265);
                  v267 = &v266[8 * (v259 - v260)];
                  v268 = &v266[24 * v265];
                  bzero(v267, 24 * ((24 * v262 - 24) / 0x18) + 24);
                  v269 = &v267[24 * ((24 * v262 - 24) / 0x18) + 24];
                  if (v259 == v260)
                  {
                    *(_QWORD *)(a1 + 1176) = v267;
                    *(_QWORD *)(a1 + 1184) = v269;
                    *(_QWORD *)(a1 + 1192) = v268;
                    v215 = (uint64_t)a11;
                  }
                  else
                  {
                    v215 = (uint64_t)a11;
                    do
                    {
                      *((_QWORD *)v267 - 3) = 0;
                      *((_QWORD *)v267 - 2) = 0;
                      v267 -= 24;
                      *((_QWORD *)v267 + 2) = 0;
                      v270 = *(_OWORD *)(v259 - 3);
                      v259 -= 3;
                      *(_OWORD *)v267 = v270;
                      *((_QWORD *)v267 + 2) = v259[2];
                      *v259 = 0;
                      v259[1] = 0;
                      v259[2] = 0;
                    }
                    while (v259 != v260);
                    v271 = *(_QWORD **)(a1 + 1176);
                    v259 = *(_QWORD **)(a1 + 1184);
                    *(_QWORD *)(a1 + 1176) = v267;
                    *(_QWORD *)(a1 + 1184) = v269;
                    *(_QWORD *)(a1 + 1192) = v268;
                    if (v259 != v271)
                    {
                      v272 = v259;
                      do
                      {
                        v274 = (void *)*(v272 - 3);
                        v272 -= 3;
                        v273 = v274;
                        if (v274)
                        {
                          *(v259 - 2) = v273;
                          operator delete(v273);
                        }
                        v259 = v272;
                      }
                      while (v272 != v271);
                      v259 = v271;
                    }
                  }
                  if (v259)
                    operator delete(v259);
                }
              }
              v279 = 954437177 * ((*(_QWORD *)(a1 + 1240) - *(_QWORD *)(a1 + 1232)) >> 3);
              *(_QWORD *)v368 = a1;
              *(_QWORD *)&v368[8] = &v363;
              *(_QWORD *)&v368[16] = &v362;
              if (v215)
              {
                v280 = sub_23684C560(v215, v279, (uint64_t)v368);
              }
              else
              {
                v346 = 0;
                *(_QWORD *)v347 = &v346;
                v280 = sub_23684C560((uint64_t)&v346, v279, (uint64_t)v368);
              }
              v21 = v280;
              if (!v280)
              {
                v281 = *(uint64_t **)(a1 + 48);
                v282 = v281[9];
                v283 = *v281;
                v284 = (v281[1] - *v281) >> 6;
                if (v282 < v284)
                {
                  v285 = *(_QWORD *)(a1 + 496);
                  v286 = (unint64_t *)(v283 + (v282 << 6) + 48);
                  while (*(v286 - 1) <= v285 && *v286 <= v285)
                  {
                    v286 += 8;
                    if (v284 == ++v282)
                      goto LABEL_387;
                  }
                }
                if (v282 < v284)
                {
                  do
                  {
                    v288 = v283 + (v282 << 6);
                    v289 = *(_QWORD *)(v288 + 24);
                    *(_OWORD *)v288 = 0u;
                    *(_OWORD *)(v288 + 16) = 0u;
                    if (v289)
                    {
                      v290 = -*(_QWORD *)(v289 - 24);
                      do
                        v291 = __ldaxr(&qword_2564313D8);
                      while (__stlxr(v291 + v290, &qword_2564313D8));
                      free(*(void **)(v289 - 32));
                    }
                    *(_QWORD *)(v288 + 32) = 0;
                    ++v282;
                    v283 = *v281;
                  }
                  while (v282 < (v281[1] - *v281) >> 6);
                }
LABEL_387:
                v21 = sub_2367FF720(v345, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8));
              }
            }
            goto LABEL_39;
          }
          goto LABEL_145;
        }
      }
      if ((unint64_t)(((v31[1] - *v31) >> 6) - v31[9]) >= 2)
      {
        sub_236801E64((int64x2_t *)v368, 1);
        *(_DWORD *)&v368[12] = *((_DWORD *)v31 + 18);
        v94 = ((unint64_t)(v31[1] - *v31) >> 6) - *(_DWORD *)&v368[12];
        v95 = (unint64_t)(v336 * v338) >> 1;
        v96 = *(_DWORD *)(a1 + 884);
        if (v96 >= 0)
          v97 = *(_DWORD *)(a1 + 884);
        else
          v97 = -v96;
        if (v97 < (int)v95)
          LODWORD(v95) = v97;
        *(_DWORD *)&v368[20] = ((unint64_t)(v31[1] - *v31) >> 6) - *(_DWORD *)&v368[12];
        LODWORD(v369) = v95;
        LOBYTE(v372) = v96 >= 0;
        if (*(_BYTE *)(a1 + 888))
          v98 = v94 == 3;
        else
          v98 = 0;
        v99 = v98;
        BYTE1(v372) = v99;
        if (v98)
          HIDWORD(v371) = *(_DWORD *)(a1 + 1224);
        v346 = &off_250800498;
        *(_OWORD *)&v347[4] = 0u;
        memset(v348, 0, 28);
        sub_2367F1AF8((uint64_t)&v346);
        sub_23684B554(v31, (uint64_t)v368, *(_DWORD *)(a1 + 560), (uint64_t)&v346, v16, *(_BYTE *)(a1 + 856), v100, v101, v102, v103, v104, v105, v106, v107);
        *(_QWORD *)v368 = &off_2508004C0;
        v346 = (uint64_t (**)())&v369 + 1;
        sub_2367D78F8((void ***)&v346);
        if ((unint64_t)(((v31[1] - *v31) >> 6) - v31[9]) >= 4)
        {
          sub_236801E64((int64x2_t *)v368, 1);
          *(_DWORD *)&v368[12] = *((_DWORD *)v31 + 18);
          v108 = v336 * v338 / 3uLL;
          v109 = *(_DWORD *)(a1 + 884);
          if (v109 >= 0)
            v110 = *(_DWORD *)(a1 + 884);
          else
            v110 = -v109;
          if (v110 < (int)v108)
            LODWORD(v108) = v110;
          *(_DWORD *)&v368[20] = ((unint64_t)(v31[1] - *v31) >> 6) + ~*(_DWORD *)&v368[12];
          LODWORD(v369) = v108;
          LOBYTE(v372) = v109 >= 0;
          BYTE1(v372) = *(_BYTE *)(a1 + 888);
          if (BYTE1(v372))
            HIDWORD(v371) = *(_DWORD *)(a1 + 1224);
          v346 = &off_250800498;
          *(_OWORD *)&v347[4] = 0u;
          memset(v348, 0, 28);
          sub_2367F1AF8((uint64_t)&v346);
          sub_23684B554(v31, (uint64_t)v368, *(_DWORD *)(a1 + 560), (uint64_t)&v346, v16, *(_BYTE *)(a1 + 856), v111, v112, v113, v114, v115, v116, v117, v118);
          *(_QWORD *)v368 = &off_2508004C0;
          v346 = (uint64_t (**)())&v369 + 1;
          sub_2367D78F8((void ***)&v346);
        }
      }
      goto LABEL_146;
    }
LABEL_36:
    v29 = v27 + (v26 ^ 1);
    goto LABEL_38;
  }
  if (!*(_DWORD *)(a1 + 576))
    goto LABEL_36;
  v21 = 1;
  v28 = v27 == 32 ? v26 : 1;
  if (v27 <= 0x20 && (v28 & 1) != 0)
    goto LABEL_36;
  return v21;
}

void sub_23684B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  *(_QWORD *)(v41 - 224) = &off_2508004C0;
  a30 = (void **)(v41 - 192);
  sub_2367D78F8(&a30);
  sub_2367E2C48((uint64_t)&a41);
  _Unwind_Resume(a1);
}

BOOL sub_23684B42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23684E204, sub_23684E160, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23684E160((uint64_t)v6, i);
  return 0;
}

BOOL sub_23684B4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23684DFCC, sub_23684DF2C, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23684DF2C((uint64_t)v6, i);
  return 0;
}

uint64_t sub_23684B554(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  float v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (**v33)(_QWORD *);
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  _QWORD v37[4];
  __int16 v38;
  void **v39;

  if ((a6 & 1) != 0 || a3 >= 3)
    return sub_23684B6DC(a1, a2, a4, a5, a6);
  v18 = sub_23684DC5C((_QWORD *)*a1, (_QWORD *)a1[1], a7, a8, a9, a10, a11, a12, a13, a14);
  v19 = sub_23684B6DC(a1, a2, a4, a5, 0);
  result = 0;
  if (v19)
  {
    if (sub_23684DC5C((_QWORD *)*a1, (_QWORD *)a1[1], v20, v21, v22, v23, v24, v25, v26, v27) > v18)
    {
      v29 = (_QWORD *)a1[4];
      v34 = &off_2508004C0;
      v30 = *(v29 - 6);
      v35 = *((_OWORD *)v29 - 4);
      v36 = v30;
      memset(v37, 0, 24);
      sub_2367E30AC((char *)v37, *(v29 - 5), *(v29 - 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(v29 - 4) - *(v29 - 5)) >> 3));
      v31 = *(v29 - 2);
      v38 = *((_WORD *)v29 - 4);
      v37[3] = v31;
      if (!sub_236801EF8((uint64_t)&v34, a1, a4, a5))
      {
        v32 = (_QWORD *)a1[4];
        v33 = (void (**)(_QWORD *))*(v32 - 9);
        v32 -= 9;
        (*v33)(v32);
        a1[4] = (uint64_t)v32;
      }
      v34 = &off_2508004C0;
      v39 = (void **)v37;
      sub_2367D78F8(&v39);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_23684B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2367D78F8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23684B6DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t i;
  void *v21;
  uint64_t j;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  int *v41;
  int *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t k;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  int *v122;
  _DWORD *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  uint64_t *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t (**v174)();
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int16 v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  int v194;
  _BYTE v195[24];
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;

  v174 = &off_2508004C0;
  v175 = *(_OWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v176 = v11;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  sub_2367E30AC((char *)&v177, v10, *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v10) >> 3));
  v180 = *(_QWORD *)(a2 + 56);
  v181 = *(_WORD *)(a2 + 64);
  if (!a5)
  {
    if ((_DWORD)v175 != 2)
    {
      if ((_DWORD)v175 != 1)
      {
        if ((_DWORD)v175 || sub_236803134(a1, DWORD1(v175), DWORD1(v175) + 2) || !DWORD2(v175))
        {
          v12 = 0;
          goto LABEL_180;
        }
        v189 = DWORD2(v175) / 7;
        v188 = DWORD2(v175) % 7;
        *(_QWORD *)&v190 = DWORD1(v175);
        v13 = *a1 + ((unint64_t)DWORD1(v175) << 6);
        v187 = *(_QWORD *)(v13 + 40);
        v14 = *(unsigned int *)(v13 + 48);
        v185 = (DWORD2(v175) % 7) & 1;
        v186 = (DWORD2(v175) % 7) >> 1;
        *(_QWORD *)v195 = a1;
        *(_QWORD *)&v195[8] = &v190;
        *(_QWORD *)&v195[16] = &v189;
        *(_QWORD *)&v196 = &v188;
        *((_QWORD *)&v196 + 1) = &v187;
        *(_QWORD *)&v197 = &v186;
        *((_QWORD *)&v197 + 1) = &v185;
        if (a4)
        {
          v15 = sub_23687FD28(a4, v14, (uint64_t)v195);
        }
        else
        {
          *(_QWORD *)&v191 = 0;
          *((_QWORD *)&v191 + 1) = &v191;
          v15 = sub_23687FD28((uint64_t)&v191, v14, (uint64_t)v195);
        }
LABEL_166:
        if (v15)
          goto LABEL_3;
        goto LABEL_167;
      }
      v16 = v181;
      v17 = HIBYTE(v181);
      *(_OWORD *)&v195[8] = 0u;
      v196 = 0u;
      v197 = 0u;
      v198 = 0u;
      v199 = 0u;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v203 = 0u;
      v204 = 0u;
      LODWORD(v191) = v176;
      v195[0] = 0;
      v205 = 0;
      LODWORD(v190) = HIDWORD(v176);
      if (!HIBYTE(v181)
        || *((int *)a1 + 16) < 8
        || (v18 = sub_236878AEC(a1, DWORD1(v175), DWORD1(v175) + HIDWORD(v175) - 1, (int *)&v191, &v190, v181 != 0, 1, (int *)&v180 + 1, a3, (uint64_t)v195)) == 0)
      {
        v195[0] = 1;
        v18 = sub_236878AEC(a1, DWORD1(v175), DWORD1(v175) + HIDWORD(v175) - 1, (int *)&v176, (_DWORD *)&v176 + 1, v16 != 0, v17 != 0, (int *)&v180 + 1, a3, (uint64_t)v195);
      }
      v19 = v18;
      for (i = 0; i != -72; i -= 24)
      {
        v21 = *(void **)((char *)&v204 + i);
        if (v21)
        {
          *(_QWORD *)((char *)&v204 + i + 8) = v21;
          operator delete(v21);
        }
      }
      if (*((_QWORD *)&v199 + 1))
      {
        *(_QWORD *)&v200 = *((_QWORD *)&v199 + 1);
        operator delete(*((void **)&v199 + 1));
      }
      for (j = 0; j != -72; j -= 24)
      {
        v23 = *(void **)((char *)&v198 + j);
        if (v23)
        {
          *(_QWORD *)((char *)&v198 + j + 8) = v23;
          operator delete(v23);
        }
      }
LABEL_165:
      v15 = v19;
      goto LABEL_166;
    }
    v182 = 0;
    v183 = 0;
    v184 = 0;
    sub_2367E30AC((char *)&v182, v177, v178, 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
    v24 = v182;
    v25 = v183;
    if (v182 == v183)
    {
      sub_236801260(&v182, a1);
      v24 = v182;
      v25 = v183;
    }
    if (v24 == v25)
    {
      v19 = 1;
      goto LABEL_164;
    }
    v26 = 0;
    v165 = a1;
    while (1)
    {
      v27 = *(_DWORD *)(v24 + 24 * v26 + 12);
      if (v27 < 0)
      {
        v19 = 1;
        goto LABEL_164;
      }
      v28 = v26;
      v29 = (unint64_t)(a1[1] - *a1) >> 6;
      v158 = v28;
      v30 = *(_DWORD *)(v24 + 24 * v28 + 16);
      v31 = v27 + v30 - 1;
      v34 = v27 >= (int)v29 || v31 < 0 || v31 >= (int)v29 || v31 < v27;
      v19 = v34;
      if (v34)
      {
LABEL_164:
        *(_QWORD *)v195 = &v182;
        sub_2367D78F8((void ***)v195);
        goto LABEL_165;
      }
      v35 = v30 + v27;
      v162 = v35 - 1;
      if (v27 <= (v35 - 1))
        break;
LABEL_150:
      v26 = v158 + 1;
      if (v158 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v24) >> 3))
      {
        v19 = 0;
        goto LABEL_164;
      }
    }
    v36 = *(unsigned __int8 *)(v24 + 24 * v158 + 8);
    if (*(_BYTE *)(v24 + 24 * v158 + 9))
      v37 = v35;
    else
      v37 = (unint64_t)(a1[1] - *a1) >> 6;
    v160 = v37 - v27;
    v161 = v36;
    while (1)
    {
      v166 = v27;
      v38 = (_QWORD *)(*a1 + ((uint64_t)v27 << 6));
      v40 = v38 + 5;
      v39 = v38[5];
      v41 = (int *)(v38 + 7);
      v42 = (int *)v38 + 15;
      v163 = v38[7];
      v164 = v160 + v27;
      if (v161)
      {
        v43 = (unint64_t)(v39 + 1) >> 1;
        v44 = v38;
        v45 = v38[6];
        v172 = v43;
        sub_2367DA410((uint64_t)v195, v43, v45);
        v46 = v197;
        if ((_DWORD)v197)
          goto LABEL_162;
        v190 = *(_OWORD *)v195;
        v47 = *(_QWORD *)&v195[16];
        v168 = v40;
        v48 = v196;
        v49 = *v40;
        v50 = v49 - v172;
        v51 = *v41;
        v52 = *v42;
        sub_2367DA410((uint64_t)&v191, v49 - v172, v45);
        v46 = v194;
        if (v194)
        {
          v132 = v48;
          if ((_QWORD)v48)
          {
            v19 = v194;
            v133 = -*(_QWORD *)(v48 - 24);
            a1 = v165;
            do
              v134 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v134 + v133, &qword_2564313D8));
LABEL_161:
            free(*(void **)(v132 - 32));
            goto LABEL_164;
          }
          goto LABEL_162;
        }
        *(_OWORD *)v195 = v191;
        v53 = v193;
        *(_QWORD *)&v195[16] = v192;
        v196 = v193;
        *(_QWORD *)&v197 = v49 - v172;
        *((_QWORD *)&v197 + 1) = v45;
        LODWORD(v198) = v51 + 1;
        DWORD1(v198) = v52;
        if (v45)
        {
          v54 = 0;
          v55 = v44[2];
          v56 = *(_QWORD *)&v195[16];
          v57 = v48;
          v58 = *v168;
          v169 = v44[3];
          v59 = (_DWORD *)(v169 + 12);
          do
          {
            if (v49 != v172)
            {
              v60 = 0;
              v61 = v59;
              do
              {
                v62 = *(v61 - 3);
                v63 = *(v61 - 2);
                v64 = v63 + v62;
                if (v62 > v63)
                  ++v64;
                v65 = v64 >> 1;
                v66 = v64 >> 1;
                *(_DWORD *)(v57 + 4 * v60) = v64 >> 1;
                v67 = v60 + 1;
                if (v60 + 1 >= v50)
                {
                  v70 = v65;
                  if ((v58 & 1) != 0)
                    v70 = *(v61 - 1);
                }
                else
                {
                  v68 = *(v61 - 1);
                  if (v68 <= *v61)
                    v69 = *v61 + v68;
                  else
                    v69 = *v61 + v68 + 1;
                  v70 = v69 >> 1;
                }
                if (v60)
                  v66 = *(v61 - 4);
                v71 = -3 * v70 - v65 + 4 * v66;
                v72 = (v71 - 6) / 12;
                v73 = v66 - (uint64_t)v65;
                if ((v72 & 1) + v72 < 2 * v73)
                  v72 = 2 * v73 - 1;
                v74 = v65 - (uint64_t)v70;
                if ((uint64_t)(v72 & 0xFFFFFFFFFFFFFFFELL) < 2 * v74)
                  LODWORD(v72) = 2 * (v65 - v70);
                if (v65 > v70 || v66 > v65)
                  LODWORD(v72) = 0;
                v76 = (unsigned __int128)((v71 + 6) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
                v77 = (v76 >> 1) + ((unint64_t)v76 >> 63);
                if ((uint64_t)(v77 & 0xFFFFFFFFFFFFFFFELL) > 2 * v73)
                  v77 = (2 * v73) | 1;
                if ((v77 & 1) + v77 > 2 * v74)
                  LODWORD(v77) = 2 * (v65 - v70);
                if (v65 >= v70 && v66 >= v65)
                  LODWORD(v72) = v77;
                *(_DWORD *)(v53 + 4 * v60) = v62 - v63 - v72;
                v61 += 2;
                ++v60;
              }
              while (v50 != v67);
            }
            if ((v58 & 1) != 0)
              *(_DWORD *)(v48 + v47 * v54 + 4 * ((int)v172 - 1)) = *(_DWORD *)(v169 + v55 * v54 + 8 * ((int)v172 - 1));
            ++v54;
            v53 += v56;
            v57 += v47;
            v59 = (_DWORD *)((char *)v59 + v55);
          }
          while (v54 != v45);
        }
        LODWORD(v79) = v163 + 1;
        HIDWORD(v79) = HIDWORD(v163);
        v80 = *v165 + (v166 << 6);
        *(_QWORD *)(v80 + 40) = v172;
        *(_QWORD *)(v80 + 48) = v45;
        *(_QWORD *)(v80 + 56) = v79;
        *(_OWORD *)v80 = v190;
        v81 = *(_QWORD *)(v80 + 24);
        *(_QWORD *)(v80 + 16) = v47;
        *(_QWORD *)(v80 + 24) = v48;
        if (v81)
        {
          v82 = -*(_QWORD *)(v81 - 24);
          do
            v83 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v83 + v82, &qword_2564313D8));
          free(*(void **)(v81 - 32));
        }
        *(_QWORD *)(v80 + 32) = *((_QWORD *)&v48 + 1);
        a1 = v165;
        sub_2368019F0(v165, (__int128 *)(*v165 + ((uint64_t)v164 << 6)), (__int128 *)v195);
        v84 = v196;
        *(_QWORD *)&v196 = 0;
        if (v84)
        {
          v85 = -*(_QWORD *)(v84 - 24);
          do
            v86 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v86 + v85, &qword_2564313D8));
LABEL_147:
          free(*(void **)(v84 - 32));
        }
      }
      else
      {
        v167 = v38;
        v88 = v38[6];
        v87 = v38 + 6;
        v170 = (unint64_t)(v88 + 1) >> 1;
        sub_2367DA410((uint64_t)v195, v39, v170);
        v46 = v197;
        if ((_DWORD)v197)
          goto LABEL_162;
        v190 = *(_OWORD *)v195;
        v173 = *(_QWORD *)&v195[16];
        v89 = v196;
        v90 = *v40;
        v91 = *v87;
        v92 = *v87 - v170;
        v93 = *v41;
        v94 = *v42;
        sub_2367DA410((uint64_t)&v191, v90, *(_DWORD *)v87 - v170);
        v46 = v194;
        if (v194)
        {
          v132 = v89;
          if ((_QWORD)v89)
          {
            v19 = v194;
            v135 = -*(_QWORD *)(v89 - 24);
            a1 = v165;
            do
              v136 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v136 + v135, &qword_2564313D8));
            goto LABEL_161;
          }
LABEL_162:
          v19 = v46;
          a1 = v165;
          goto LABEL_164;
        }
        *(_OWORD *)v195 = v191;
        v95 = v193;
        *(_QWORD *)&v195[16] = v192;
        v196 = v193;
        *(_QWORD *)&v197 = v90;
        *((_QWORD *)&v197 + 1) = v92;
        LODWORD(v198) = v93;
        DWORD1(v198) = v94 + 1;
        v159 = v167[2];
        if (v91 != v170)
        {
          v96 = 0;
          v97 = v89;
          v98 = v167[3];
          v99 = 2 * v159;
          v171 = *(_QWORD *)&v195[16];
          v100 = v98 + 12 * (v159 >> 2);
          v101 = v98 + 8 * (v159 >> 2);
          v102 = v98 - 4 * (v159 >> 2);
          v103 = v98 + 4 * (v159 >> 2);
          do
          {
            v104 = v96 + 1;
            if (v39)
            {
              for (k = 0; k != v39; ++k)
              {
                v106 = *(_DWORD *)(v98 + 4 * k);
                v107 = *(_DWORD *)(v103 + 4 * k);
                v108 = v107 + v106;
                if (v106 > v107)
                  ++v108;
                v109 = v108 >> 1;
                v110 = v109;
                *(_DWORD *)(v97 + 4 * k) = v109;
                if (v104 >= v92)
                {
                  v114 = v109;
                  if ((*(_BYTE *)v87 & 1) != 0)
                    v114 = *(_DWORD *)(v101 + 4 * k);
                }
                else
                {
                  v111 = *(_DWORD *)(v101 + 4 * k);
                  v112 = *(_DWORD *)(v100 + 4 * k);
                  if (v111 <= v112)
                    v113 = v112 + v111;
                  else
                    v113 = v112 + v111 + 1;
                  v114 = v113 >> 1;
                }
                if (v96)
                  v110 = *(_DWORD *)(v102 + 4 * k);
                v115 = -3 * v114 - v109 + 4 * v110;
                v116 = v110 - (uint64_t)v109;
                v117 = 2 * v116 - 1;
                if ((((v115 - 6) / 12) & 1) + (v115 - 6) / 12 >= 2 * v116)
                  v117 = (v115 - 6) / 12;
                v118 = v109 - (uint64_t)v114;
                if ((uint64_t)(v117 & 0xFFFFFFFFFFFFFFFELL) < 2 * v118)
                  LODWORD(v117) = 2 * v118;
                if (v109 > v114 || v110 > v109)
                  LODWORD(v117) = 0;
                if ((uint64_t)(((v115 + 6) / 12) & 0xFFFFFFFFFFFFFFFELL) <= 2 * v116)
                  v120 = (v115 + 6) / 12;
                else
                  v120 = (2 * v116) | 1;
                if ((v120 & 1) + v120 > 2 * v118)
                  LODWORD(v120) = 2 * v118;
                if (v109 < v114 || v110 < v109)
                  LODWORD(v120) = v117;
                *(_DWORD *)(v95 + 4 * k) = v106 - v107 - v120;
              }
            }
            v100 += v99;
            v101 += v99;
            v95 += v171;
            v102 += v99;
            v97 += v173;
            v103 += v99;
            v98 += v99;
            ++v96;
          }
          while (v104 != v92);
        }
        if ((*(_BYTE *)v87 & 1) != 0 && v39)
        {
          v122 = (int *)(v167[3] + 2 * v159 * (v170 - 1));
          v123 = (_DWORD *)(v89 + v173 * (v170 - 1));
          v124 = v39;
          do
          {
            v125 = *v122++;
            *v123++ = v125;
            --v124;
          }
          while (v124);
        }
        v126 = *v165 + (v166 << 6);
        *(_QWORD *)(v126 + 40) = v39;
        *(_QWORD *)(v126 + 48) = v170;
        *(_QWORD *)(v126 + 56) = v163 + 0x100000000;
        *(_OWORD *)v126 = v190;
        v127 = *(_QWORD *)(v126 + 24);
        *(_QWORD *)(v126 + 16) = v173;
        *(_QWORD *)(v126 + 24) = v89;
        if (v127)
        {
          v128 = -*(_QWORD *)(v127 - 24);
          do
            v129 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v129 + v128, &qword_2564313D8));
          free(*(void **)(v127 - 32));
        }
        *(_QWORD *)(v126 + 32) = *((_QWORD *)&v89 + 1);
        a1 = v165;
        sub_2368019F0(v165, (__int128 *)(*v165 + ((uint64_t)v164 << 6)), (__int128 *)v195);
        v84 = v196;
        *(_QWORD *)&v196 = 0;
        if (v84)
        {
          v130 = -*(_QWORD *)(v84 - 24);
          do
            v131 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v131 + v130, &qword_2564313D8));
          goto LABEL_147;
        }
      }
      v27 = v166 + 1;
      if ((int)v166 + 1 > v162)
      {
        v24 = v182;
        v25 = v183;
        goto LABEL_150;
      }
    }
  }
  if (sub_236802D28((uint64_t)&v174, a1))
  {
LABEL_3:
    v12 = 0;
    goto LABEL_180;
  }
LABEL_167:
  v137 = a1;
  v138 = a1 + 5;
  v139 = a1[5];
  v140 = a1[4];
  if (v140 >= v139)
  {
    v144 = v138 - 2;
    v145 = *(v138 - 2);
    v146 = 0x8E38E38E38E38E39 * ((uint64_t)(v140 - v145) >> 3);
    if (v146 + 1 > 0x38E38E38E38E38ELL)
      sub_2367C3440();
    v147 = 0x8E38E38E38E38E39 * ((uint64_t)(v139 - v145) >> 3);
    v148 = 2 * v147;
    if (2 * v147 <= v146 + 1)
      v148 = v146 + 1;
    if (v147 >= 0x1C71C71C71C71C7)
      v149 = 0x38E38E38E38E38ELL;
    else
      v149 = v148;
    *((_QWORD *)&v196 + 1) = v138;
    if (v149)
    {
      v151 = (char *)sub_2367D70D4(v149);
    }
    else
    {
      v151 = 0;
      v150 = 0;
    }
    v152 = &v151[72 * v146];
    *(_QWORD *)v195 = v151;
    *(_QWORD *)&v195[8] = v152;
    *(_QWORD *)&v195[16] = v152;
    *(_QWORD *)&v196 = &v151[72 * v150];
    *(_QWORD *)v152 = &off_2508004C0;
    v153 = v175;
    v154 = v176;
    *((_QWORD *)v152 + 4) = 0;
    v152 += 32;
    *((_QWORD *)v152 - 1) = v154;
    *(_OWORD *)(v152 - 24) = v153;
    *((_QWORD *)v152 + 1) = 0;
    *((_QWORD *)v152 + 2) = 0;
    sub_2367E30AC(v152, v177, v178, 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
    v155 = &v151[72 * v146];
    v156 = v180;
    *((_WORD *)v155 + 32) = v181;
    *((_QWORD *)v155 + 7) = v156;
    *(_QWORD *)&v195[16] += 72;
    sub_2367D711C(v144, v195);
    v143 = v137[4];
    sub_2367D71C0((uint64_t)v195);
  }
  else
  {
    *(_QWORD *)v140 = &off_2508004C0;
    v141 = v175;
    *(_QWORD *)(v140 + 24) = v176;
    *(_OWORD *)(v140 + 8) = v141;
    *(_QWORD *)(v140 + 40) = 0;
    *(_QWORD *)(v140 + 48) = 0;
    *(_QWORD *)(v140 + 32) = 0;
    sub_2367E30AC((char *)(v140 + 32), v177, v178, 0xAAAAAAAAAAAAAAABLL * ((v178 - v177) >> 3));
    v142 = v180;
    *(_WORD *)(v140 + 64) = v181;
    *(_QWORD *)(v140 + 56) = v142;
    v143 = v140 + 72;
    v137[4] = v140 + 72;
  }
  v137[4] = v143;
  v12 = 1;
LABEL_180:
  v174 = &off_2508004C0;
  *(_QWORD *)v195 = &v177;
  sub_2367D78F8((void ***)v195);
  return v12;
}

void sub_23684C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  a43 = (void **)&a37;
  sub_2367D78F8(&a43);
  a36 = a17;
  sub_2367D78F8(&a36);
  _Unwind_Resume(a1);
}

BOOL sub_23684C560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23684DC38, sub_23684C5F4, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23684C5F4((uint64_t)v6, i);
  return 0;
}

void sub_23684C5F4(uint64_t a1, unsigned int a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t *v15;
  uint64_t v16;
  __int32 v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int32 v27;
  unint64_t v28;
  unint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int32 v33;
  int64x2_t v35;
  uint64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  _DWORD *v44;
  _DWORD **v45;
  unint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _DWORD *v86;
  uint64_t v87;
  int v88;
  int v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int v98;
  int v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  int v121;
  signed int v122;
  uint64_t v123;
  int *v124;
  uint64_t i;
  signed int v126;
  int v127;
  int v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  uint64_t *v137;
  _QWORD *v138;
  uint64_t v139;
  BOOL v140;
  BOOL v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t *v146;
  float v147;
  int v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  float v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void (***v161)(_QWORD);
  int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  uint64_t v167;
  float v168;
  __int128 v169;
  uint64_t j;
  __int8 *v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  _QWORD *v183;
  unint64_t v184;
  float v185;
  unint64_t v186;
  float v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  unint64_t v200;
  int *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t k;
  unint64_t v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unint64_t v248;
  unsigned int v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t m;
  uint64_t *v260;
  uint64_t n;
  void *v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  unsigned __int8 *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  int v270;
  _QWORD *v271;
  float *v272;
  uint64_t v273;
  __int32 v274;
  int *v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  int *v279;
  uint64_t *v280;
  uint64_t v281;
  int *v282;
  int8x16_t v283;
  unint64_t v284;
  int64x2_t v285;
  _QWORD *v286;
  __int32 v287;
  unint64_t v288;
  void *__p[3];
  uint64_t (**v290)();
  __int128 v291;
  __int128 v292;
  __int128 v293;
  _BYTE v294[64];
  __int128 v295;
  char v296;
  _BYTE v297[24];
  void *v298;
  void *v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  _BYTE v307[280];
  _OWORD v308[4];
  uint32x4_t v309;
  int32x4_t v310;
  int64x2_t v311;
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  char v317;
  int v318;
  uint64_t v319;

  v319 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 ***)(a1 + 8);
  v3 = *v2;
  v5 = sub_2367E29EC(*((_QWORD *)*v2 + 154) + 72 * a2 + 40, *((_QWORD *)*v2 + 60), *((_QWORD *)*v2 + 61));
  v6 = v5;
  v7 = *((_QWORD *)v3 + 9);
  v8 = v7 + 152 * v5;
  v9 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v9;
  v266 = v3;
  if (v5)
  {
    v10 = v7 + 152 * v5;
    sub_2367D4108((char *)(v10 + 24), *(char **)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 2);
    v11 = *(_OWORD *)(v7 + 64);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(v10 + 64) = v11;
    *(_QWORD *)(v10 + 80) = *(_QWORD *)(v7 + 80);
    *(_OWORD *)(v10 + 88) = *(_OWORD *)(v7 + 88);
    v12 = (char *)(v10 + 104);
    v3 = v266;
    sub_23683D1CC(v12, *(char **)(v7 + 104), *(_QWORD *)(v7 + 112), (uint64_t)(*(_QWORD *)(v7 + 112) - *(_QWORD *)(v7 + 104)) >> 3);
  }
  v13 = v7 + 152 * v6;
  v14 = *(_QWORD *)(v7 + 128);
  *(_QWORD *)(v13 + 133) = *(_QWORD *)(v7 + 133);
  *(_QWORD *)(v13 + 128) = v14;
  *(_BYTE *)(v13 + 144) = *(_BYTE *)(v7 + 144);
  v15 = (uint64x2_t *)(*((_QWORD *)v3 + 154) + 72 * a2);
  v16 = (uint64_t)(v3 + 512);
  v17 = v15[2].i32[0];
  v287 = v15[2].i32[1];
  v18 = *v2[1];
  v19 = *v2[2];
  v20 = sub_2367E29EC((uint64_t)&v15[2].i64[1], *((_QWORD *)v3 + 60), *((_QWORD *)v3 + 61));
  v21 = (uint64_t *)*((_QWORD *)v3 + 6);
  v22 = &v21[11 * v20];
  v265 = v20;
  v268 = v22;
  if (v20)
  {
    v276 = v15[1].i64[1];
    v278 = v15[1].i64[0];
    sub_2368001CC((uint64_t)&v311, v278, v276, *((_DWORD *)v21 + 16), 0);
    if (v318)
      goto LABEL_5;
    *(int64x2_t *)v294 = v311;
    *(_QWORD *)&v294[16] = v312;
    v311 = 0uLL;
    *(_OWORD *)&v294[24] = v313;
    *(_QWORD *)&v294[40] = v314;
    v312 = 0;
    v313 = 0uLL;
    v314 = 0;
    *(_OWORD *)&v294[48] = v315;
    v295 = v316;
    v296 = v317;
    sub_23680046C((uint64_t)v22, (uint64_t)v294);
    *(_QWORD *)&v308[0] = &v294[24];
    sub_2367D6C98((void ***)v308);
    *(_QWORD *)&v308[0] = v294;
    sub_2367D6D24((void ***)v308);
    v23 = v21[9];
    v25 = *v21;
    v24 = v21[1];
    v26 = (v24 - *v21) >> 6;
    v280 = v21;
    v270 = v18;
    v272 = (float *)(v3 + 512);
    if (v19)
    {
      v27 = v287;
    }
    else
    {
      v27 = v287;
      if (v23 < v26)
      {
        v28 = *((_QWORD *)v3 + 62);
        v29 = (unint64_t *)(v25 + (v23 << 6) + 48);
        while (1)
        {
          v30 = *(v29 - 1) > v28 || *v29 > v28;
          if (v30)
            break;
          v29 += 8;
          if (v26 == ++v23)
            goto LABEL_62;
        }
      }
    }
    if (v23 < v26)
    {
      v274 = v17;
      do
      {
        v31 = v25 + (v23 << 6);
        v32 = *(_QWORD *)(v31 + 56);
        v33 = v32;
        if (SHIDWORD(v32) < (int)v32)
          v33 = HIDWORD(v32);
        if (v33 <= v27 && v33 >= v17)
        {
          v35.i64[0] = v32;
          v35.i64[1] = HIDWORD(v32);
          v36 = (uint64x2_t)vnegq_s64(v35);
          v37 = (int64x2_t)vshlq_u64(*v15, v36);
          v38 = (int64x2_t)vshlq_u64(v15[1], v36);
          v39 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v38, v37), *(uint64x2_t *)(v31 + 40)), (int8x16_t)vqsubq_u64(*(uint64x2_t *)(v31 + 40), (uint64x2_t)v37), (int8x16_t)v38);
          v40 = v39.i64[0];
          v283 = v39;
          v285 = v37;
          v41 = v39.i64[1];
          if (v39.i64[0] && v39.i64[1] != 0)
          {
            v43 = *((_QWORD *)v3 + 147) + 24 * v265;
            v45 = (_DWORD **)(v43 + 8);
            v44 = *(_DWORD **)(v43 + 8);
            v46 = *(_QWORD *)(v43 + 16);
            if ((unint64_t)v44 >= v46)
            {
              v48 = *(_DWORD **)v43;
              v49 = ((uint64_t)v44 - *(_QWORD *)v43) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                sub_2367C3440();
              v51 = v46 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
              v53 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52)
                v53 = v50;
              if (v53)
              {
                v53 = (unint64_t)sub_2367C3454(v53);
                v44 = *v45;
                v48 = *(_DWORD **)v43;
              }
              else
              {
                v54 = 0;
              }
              v55 = (_DWORD *)(v53 + 4 * v49);
              *v55 = v23;
              v47 = v55 + 1;
              while (v44 != v48)
              {
                v56 = *--v44;
                *--v55 = v56;
              }
              *(_QWORD *)v43 = v55;
              *v45 = v47;
              *(_QWORD *)(v43 + 16) = v53 + 4 * v54;
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v44 = v23;
              v47 = v44 + 1;
            }
            *v45 = v47;
            sub_2367DA410((uint64_t)v294, v40, v41);
            if (*(_DWORD *)&v294[40])
              goto LABEL_5;
            v308[0] = *(_OWORD *)v294;
            v57 = *(_QWORD *)&v294[16];
            v58 = *(_QWORD *)&v294[24];
            v281 = *(_QWORD *)&v294[32];
            v59 = *(_QWORD *)(v31 + 56);
            v60 = 4 * v40;
            v61 = v285.i64[1];
            v62 = *(char **)&v294[24];
            do
            {
              memcpy(v62, (const void *)(*(_QWORD *)(v31 + 24) + *(_QWORD *)(v31 + 16) * v61++ + 4 * v285.i64[0]), v60);
              v62 += v57;
              --v41;
            }
            while (v41);
            v63 = v268;
            v64 = v268[1];
            v65 = v268[2];
            if (v64 >= v65)
            {
              v67 = (uint64_t)(v64 - *v268) >> 6;
              v68 = v67 + 1;
              v21 = v280;
              v17 = v274;
              if ((unint64_t)(v67 + 1) >> 58)
                sub_2367C3440();
              v69 = v65 - *v268;
              if (v69 >> 5 > v68)
                v68 = v69 >> 5;
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFC0)
                v70 = 0x3FFFFFFFFFFFFFFLL;
              else
                v70 = v68;
              *(_QWORD *)&v294[32] = v268 + 2;
              v71 = (char *)sub_2367E42EC(v70);
              v72 = &v71[64 * v67];
              *(_QWORD *)v294 = v71;
              *(_QWORD *)&v294[8] = v72;
              *(_QWORD *)&v294[24] = &v71[64 * v73];
              *(_OWORD *)v72 = v308[0];
              *((_QWORD *)v72 + 2) = v57;
              *((_QWORD *)v72 + 3) = v58;
              *((_QWORD *)v72 + 4) = v281;
              *(int8x16_t *)(v72 + 40) = v283;
              *((_QWORD *)v72 + 7) = v59;
              *(_QWORD *)&v294[16] = v72 + 64;
              v63 = v268;
              v74 = *v268;
              v75 = v268[1];
              v76 = *(_QWORD *)&v294[8];
              if (v75 == *v268)
              {
                v77 = *(_QWORD *)&v294[8];
                v3 = v266;
              }
              else
              {
                v3 = v266;
                do
                {
                  v77 = v76 - 64;
                  v78 = *(_OWORD *)(v75 - 64);
                  *(_QWORD *)(v76 - 48) = *(_QWORD *)(v75 - 48);
                  *(_OWORD *)(v76 - 64) = v78;
                  v79 = *(_QWORD *)(v75 - 40);
                  *(_QWORD *)(v75 - 40) = 0;
                  *(_QWORD *)(v76 - 40) = v79;
                  *(_QWORD *)(v76 - 32) = *(_QWORD *)(v75 - 32);
                  v80 = *(_OWORD *)(v75 - 24);
                  *(_QWORD *)(v76 - 8) = *(_QWORD *)(v75 - 8);
                  *(_OWORD *)(v76 - 24) = v80;
                  v76 -= 64;
                  v75 -= 64;
                }
                while (v75 != v74);
              }
              *(_QWORD *)&v294[8] = v77;
              v81 = *v268;
              *v268 = v77;
              *(_QWORD *)&v294[8] = v81;
              v82 = v268[1];
              v268[1] = *(_QWORD *)&v294[16];
              *(_QWORD *)&v294[16] = v82;
              v83 = v268[2];
              v268[2] = *(_QWORD *)&v294[24];
              *(_QWORD *)&v294[24] = v83;
              *(_QWORD *)v294 = *(_QWORD *)&v294[8];
              v66 = v268[1];
              sub_2367E4320((uint64_t)v294);
            }
            else
            {
              *(_OWORD *)v64 = v308[0];
              *(_QWORD *)(v64 + 16) = v57;
              *(_QWORD *)(v64 + 24) = v58;
              v21 = v280;
              *(_QWORD *)(v64 + 32) = v281;
              *(int8x16_t *)(v64 + 40) = v283;
              *(_QWORD *)(v64 + 56) = v59;
              v66 = v64 + 64;
              v268[1] = v64 + 64;
              v3 = v266;
              v17 = v274;
            }
            v27 = v287;
            v63[1] = v66;
            v25 = *v21;
            v24 = v21[1];
          }
        }
      }
      while (++v23 < (v24 - v25) >> 6);
    }
LABEL_62:
    v84 = v268[1];
    if (*v268 == v84)
    {
LABEL_5:
      sub_2367E2C48((uint64_t)&v311);
      return;
    }
    if (*v272 == 0.0)
    {
      if (*((_DWORD *)v3 + 221))
      {
        if (*((int *)v3 + 140) <= 5)
        {
          v85 = &v21[11 * v265];
          v87 = v85[9];
          v86 = v85 + 9;
          if ((unint64_t)(((v84 - *v268) >> 6) - v87) >= 2)
          {
            sub_236801E64((int64x2_t *)v294, 1);
            *(_DWORD *)&v294[12] = *v86;
            v88 = *((_DWORD *)v3 + 221);
            v89 = v88 >= 0 ? *((_DWORD *)v3 + 221) : -v88;
            *(_DWORD *)&v294[20] = ((unint64_t)(v268[1] - *v268) >> 6) - *(_DWORD *)&v294[12];
            *(_DWORD *)&v294[24] = v89;
            LOBYTE(v295) = v88 >= 0;
            *(_QWORD *)&v308[0] = &off_250800498;
            memset((char *)v308 + 12, 0, 44);
            v290 = &off_2507FF550;
            v291 = xmmword_2368AF3F0;
            *(_QWORD *)&v292 = 0;
            sub_2367FF42C(v308, (uint64_t)&v290);
            sub_23684B554(v268, (uint64_t)v294, *((_DWORD *)v3 + 140), (uint64_t)v308, 0, 0, v90, v91, v92, v93, v94, v95, v96, v97);
            *(_QWORD *)v294 = &off_2508004C0;
            *(_QWORD *)&v308[0] = &v294[32];
            sub_2367D78F8((void ***)v308);
            v3 = v266;
            if ((unint64_t)(((v268[1] - *v268) >> 6) - *(_QWORD *)v86) >= 4)
            {
              sub_236801E64((int64x2_t *)v294, 1);
              *(_DWORD *)&v294[12] = *v86;
              v98 = *((_DWORD *)v266 + 221);
              if (v98 >= 0)
                v99 = *((_DWORD *)v266 + 221);
              else
                v99 = -v98;
              *(_DWORD *)&v294[20] = ((unint64_t)(v268[1] - *v268) >> 6) + ~*(_DWORD *)&v294[12];
              *(_DWORD *)&v294[24] = v99;
              LOBYTE(v295) = v98 >= 0;
              BYTE1(v295) = v266[888];
              if (BYTE1(v295))
                *(_DWORD *)&v294[60] = 6;
              *(_QWORD *)&v308[0] = &off_250800498;
              memset((char *)v308 + 12, 0, 44);
              v290 = &off_2507FF550;
              v291 = xmmword_2368AF3F0;
              *(_QWORD *)&v292 = 0;
              sub_2367FF42C(v308, (uint64_t)&v290);
              sub_23684B554(v268, (uint64_t)v294, *((_DWORD *)v266 + 140), (uint64_t)v308, 0, 0, v100, v101, v102, v103, v104, v105, v106, v107);
              *(_QWORD *)v294 = &off_2508004C0;
              *(_QWORD *)&v308[0] = &v294[32];
              sub_2367D78F8((void ***)v308);
            }
          }
        }
      }
    }
    if (*((float *)v3 + 220) > 0.0)
    {
      v108 = *((float *)v266 + 128) == 0.0 && v266[888] == 0;
      v109 = v108 && *((_DWORD *)v266 + 140) <= 5;
      if (v109 && (!*((_DWORD *)v266 + 216) || !*((_QWORD *)v266 + 71)))
      {
        v110 = (v268[1] - *v268) >> 6;
        v111 = &v280[11 * v265];
        v113 = v111[9];
        v112 = v111 + 9;
        v114 = v110 - v113;
        if (v110 != v113)
        {
          v115 = 0;
          do
          {
            v116 = (_QWORD *)(*v268 + ((*v112 + v115) << 6));
            v117 = v116[6];
            if (v117)
            {
              v118 = 0;
              v120 = v116[2];
              v119 = (int *)v116[3];
              v121 = 0x7FFFFFFF;
              v122 = 0x80000000;
              v123 = v116[5];
              do
              {
                v124 = v119;
                for (i = v123; i; --i)
                {
                  v127 = *v124++;
                  v126 = v127;
                  if (v127 < v121)
                    v121 = v126;
                  if (v126 > v122)
                    v122 = v126;
                }
                ++v118;
                v119 = (int *)((char *)v119 + v120);
              }
              while (v118 != v117);
            }
            else
            {
              v122 = 0x80000000;
              v121 = 0x7FFFFFFF;
            }
            sub_236801E64((int64x2_t *)v294, 1);
            *(_DWORD *)&v294[12] = *(_DWORD *)v112 + v115;
            *(_DWORD *)&v294[20] = 1;
            v128 = (int)(*((float *)v266 + 220) / 100.0 * (double)(v122 - (uint64_t)v121 + 1));
            if (v128 >= (int)((double)(unint64_t)(v276 * v278) * 0.8))
              v128 = (int)((double)(unint64_t)(v276 * v278) * 0.8);
            *(_DWORD *)&v294[24] = v128;
            *(_QWORD *)&v308[0] = &off_250800498;
            memset((char *)v308 + 12, 0, 44);
            v290 = &off_2507FF550;
            v291 = xmmword_2368AF3F0;
            *(_QWORD *)&v292 = 0;
            sub_2367FF42C(v308, (uint64_t)&v290);
            sub_23684B554(v268, (uint64_t)v294, *((_DWORD *)v266 + 140), (uint64_t)v308, 0, 0, v129, v130, v131, v132, v133, v134, v135, v136);
            *(_QWORD *)v294 = &off_2508004C0;
            *(_QWORD *)&v308[0] = &v294[32];
            sub_2367D78F8((void ***)v308);
            ++v115;
          }
          while (v115 != v114);
        }
      }
    }
    sub_2367E2C48((uint64_t)&v311);
    v3 = v266;
    v22 = v268;
    v21 = v280;
    v18 = v270;
    v16 = (uint64_t)v272;
  }
  if (*((_DWORD *)v3 + 144) == 1
    && v3[580]
    && sub_23682B8B4(v16)
    && (*((_DWORD *)v3 + 217) & 0x80000000) != 0)
  {
    v137 = &v21[11 * v265];
    v139 = v137[9];
    v138 = v137 + 9;
    v140 = (unint64_t)(((v22[1] - *v22) >> 6) - v139) >= 3 && *((_DWORD *)v3 + 216) == 0;
    v141 = !v140 || v18 == 0;
    if (!v141 && *((int *)v3 + 140) <= 5)
    {
      sub_236801E64(&v311, 0);
      v311.i32[3] = *v138;
      v142 = *((_DWORD *)v3 + 140) + 1;
      if (v142 > 6)
        v143 = 0;
      else
        v143 = qword_236923710[v142];
      v144 = 0;
      v145 = 0;
      v146 = &v21[11 * v265 + 4];
      v147 = 3.4028e38;
      do
      {
        if (v143 == v144)
          break;
        v148 = dword_23692367C[v144];
        LODWORD(v312) = v148;
        *(_QWORD *)v294 = &off_250800498;
        memset(&v294[12], 0, 44);
        *(_OWORD *)((char *)v308 + 8) = xmmword_2368AF3F0;
        *(_QWORD *)&v308[0] = &off_2507FF550;
        *((_QWORD *)&v308[1] + 1) = 0;
        sub_2367FF42C(v294, (uint64_t)v308);
        if (sub_23684B6DC(v268, (uint64_t)&v311, (uint64_t)v294, 0, 0))
        {
          v157 = sub_23684DC5C((_QWORD *)*v268, (_QWORD *)v268[1], v149, v150, v151, v152, v153, v154, v155, v156);
          if (v157 < v147)
          {
            v147 = v157;
            v145 = v148;
          }
          v158 = *v146;
          *(_QWORD *)v294 = &off_2508004C0;
          v159 = *(_OWORD *)(v158 - 64);
          *(_QWORD *)&v294[24] = *(_QWORD *)(v158 - 48);
          *(_OWORD *)&v294[8] = v159;
          memset(&v294[32], 0, 24);
          sub_2367E30AC(&v294[32], *(_QWORD *)(v158 - 40), *(_QWORD *)(v158 - 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v158 - 32) - *(_QWORD *)(v158 - 40)) >> 3));
          v160 = *(_QWORD *)(v158 - 16);
          LOWORD(v295) = *(_WORD *)(v158 - 8);
          *(_QWORD *)&v294[56] = v160;
          *(_QWORD *)&v308[0] = &off_250800498;
          memset((char *)v308 + 12, 0, 44);
          v290 = &off_2507FF550;
          v291 = xmmword_2368AF3F0;
          *(_QWORD *)&v292 = 0;
          sub_2367FF42C(v308, (uint64_t)&v290);
          if (sub_236801EF8((uint64_t)v294, v268, (uint64_t)v308, 0))
          {
            *(_QWORD *)v294 = &off_2508004C0;
            *(_QWORD *)&v308[0] = &v294[32];
            sub_2367D78F8((void ***)v308);
            v311.i64[0] = (uint64_t)&off_2508004C0;
            *(_QWORD *)v294 = (char *)&v313 + 8;
            sub_2367D78F8((void ***)v294);
            return;
          }
          v161 = (void (***)(_QWORD))(*v146 - 72);
          (**v161)(v161);
          *v146 = (uint64_t)v161;
          *(_QWORD *)v294 = &off_2508004C0;
          *(_QWORD *)&v308[0] = &v294[32];
          sub_2367D78F8((void ***)v308);
        }
        ++v144;
        v22 = v268;
      }
      while (v144 != 19);
      LODWORD(v312) = v145;
      *(_QWORD *)v294 = &off_250800498;
      memset(&v294[12], 0, 44);
      *(_OWORD *)((char *)v308 + 8) = xmmword_2368AF3F0;
      *(_QWORD *)&v308[0] = &off_2507FF550;
      *((_QWORD *)&v308[1] + 1) = 0;
      sub_2367FF42C(v294, (uint64_t)v308);
      sub_23684B6DC(v22, (uint64_t)&v311, (uint64_t)v294, 0, 0);
      v3 = v266;
      v311.i64[0] = (uint64_t)&off_2508004C0;
      *(_QWORD *)v294 = (char *)&v313 + 8;
      sub_2367D78F8((void ***)v294);
    }
  }
  v162 = *((_DWORD *)v3 + 140);
  if (v162 >= 2)
  {
    if (v162 != 2)
      return;
    v267 = 2;
    v3 = v266;
  }
  else
  {
    v267 = 5;
  }
  v163 = *((_QWORD *)v3 + 9);
  v164 = *(_DWORD *)(v163 + 152 * v265 + 64);
  v30 = v164 > 0xF;
  v165 = (1 << v164) & 0xC040;
  if (!v30 && v165 != 0)
  {
    v167 = 0;
    *(_DWORD *)(v163 + 152 * v265 + 68) = 0;
    v168 = 3.4028e38;
    v169 = 0uLL;
    do
    {
      for (j = 0; j != 1360; j += 40)
      {
        v171 = &v311.i8[j];
        *((_DWORD *)v171 + 8) = 0;
        *(_OWORD *)v171 = v169;
        *((_OWORD *)v171 + 1) = v169;
      }
      *(_QWORD *)&v308[0] = &off_250800498;
      *(_OWORD *)((char *)v308 + 12) = v169;
      *(_OWORD *)((char *)&v308[1] + 12) = v169;
      *(_OWORD *)((char *)&v308[2] + 8) = v169;
      *(_QWORD *)v294 = &off_2507FF550;
      *(_OWORD *)&v294[8] = xmmword_2368AF3F0;
      *(_QWORD *)&v294[24] = 0;
      sub_2367FF42C(v308, (uint64_t)v294);
      if (v167 > 3)
      {
        v182 = 4;
        v178 = 5;
        v176 = 10;
        v173 = 12;
        v174 = 12;
        v175 = 12;
        v177 = 10;
        v179 = 5;
        v180 = 5;
        v181 = 12;
      }
      else
      {
        v172 = (int)v167;
        v173 = dword_2368AFB80[v172];
        v174 = dword_2368AFB90[v172];
        v175 = dword_2368AFBA0[v172];
        v176 = dword_2368AFBB0[v172];
        v177 = dword_2368AFBC0[v172];
        v178 = dword_236923D28[v172];
        v179 = dword_2368AFBD0[v172];
        v180 = dword_2368AFBE0[v172];
        v181 = dword_2368AFBF0[v172];
        v182 = dword_2368AFC00[v172];
      }
      HIDWORD(v308[2]) = v173;
      *(_QWORD *)&v308[3] = __PAIR64__(v175, v174);
      HIDWORD(v308[0]) = v176;
      *(_QWORD *)&v308[1] = __PAIR64__(v178, v177);
      *((_QWORD *)&v308[1] + 1) = __PAIR64__(v180, v179);
      LODWORD(v308[2]) = v181;
      *(_QWORD *)((char *)&v308[2] + 4) = v182 | 0xD00000000;
      v183 = (_QWORD *)*v268;
      v271 = (_QWORD *)v268[1];
      v269 = v167;
      v184 = 0;
      v185 = 0.0;
      if ((_QWORD *)*v268 == v271)
        goto LABEL_249;
      do
      {
        v186 = v183[2];
        v290 = &off_250800498;
        v291 = *(_OWORD *)((char *)v308 + 8);
        v292 = *(_OWORD *)((char *)&v308[1] + 8);
        v293 = *(_OWORD *)((char *)&v308[2] + 8);
        sub_2367FE7B0((uint64_t)v294, (uint64_t)&v290, v183[5]);
        sub_2367CBE88(__p, 1uLL);
        v195 = v183[6];
        if (!v195)
          goto LABEL_238;
        v196 = 0;
        v273 = -(uint64_t)(v186 >> 2);
        v197 = v183[5];
        v286 = v183;
        do
        {
          if (!v197)
            goto LABEL_237;
          v198 = v183;
          v199 = 0;
          v200 = v198[3] + v198[2] * v196;
          v201 = (int *)(v200 + 4 * v273);
          v279 = v201 - 1;
          v275 = &v201[v273];
          v277 = v201 + 1;
          v282 = v201;
          v284 = v196;
          do
          {
            v288 = v184;
            if (v199)
            {
              v202 = *(int *)(v200 + 4 * v199 - 4);
              if (!v196)
                goto LABEL_159;
              v203 = v279[v199];
            }
            else
            {
              if (!v196)
              {
                v202 = 0;
LABEL_159:
                v205 = v199 + 1;
                v206 = v202;
                v204 = v202;
                v203 = v202;
                v207 = v202;
                goto LABEL_160;
              }
              v202 = *v201;
              v203 = v202;
            }
            v204 = v201[v199];
            v205 = v199 + 1;
            v206 = v204;
            if (v199 + 1 < v197)
              v206 = v277[v199];
            if (v196 < 2)
              v207 = v204;
            else
              v207 = v275[v199];
LABEL_160:
            v208 = 0;
            v209 = (uint64_t)(v196 << 63) >> 63;
            v210 = v197 + 2;
            v211 = v209 & (v197 + 2);
            v212 = v211 + v199;
            if (v197 - 1 <= v199)
              v213 = v211 + v199;
            else
              v213 = v212 + 1;
            v214 = v212 - 1;
            if (!v199)
              v214 = v211;
            for (k = 40; k != 136; k += 24)
            {
              v216 = (*(_DWORD *)(*(_QWORD *)&v294[k] + 4 * v213)
                                  + *(_DWORD *)(*(_QWORD *)&v294[k] + 4 * v212)
                                  + *(_DWORD *)(*(_QWORD *)&v294[k] + 4 * v214));
              v217 = __clz(v216 + 1) ^ 0x3F;
              if (v217 <= 5)
                LOBYTE(v217) = 5;
              v309.i32[v208] = ((*(_DWORD *)&v307[4 * (v216 >> (v217 - 5)) + 16]
                                             * *(_DWORD *)&v307[v208 * 4]) >> (v217 - 5))
                             + 4;
              ++v208;
            }
            if (v199)
            {
              if ((v196 & 1) != 0)
                v218 = 0;
              else
                v218 = v210;
              v219 = *((int *)v298 + v199 + v218 - 1);
            }
            else
            {
              v219 = 0;
            }
            v220 = 0;
            v221 = 8 * v204;
            v222 = 8 * v202;
            v223 = 8 * v206;
            v224 = *((int *)v298 + v212);
            v225 = *((int *)v298 + v214);
            v226 = v219 + v224;
            v227 = *((int *)v298 + v213);
            if (v224 >= 0)
              v228 = v224;
            else
              v228 = -v224;
            if (v219 >= 0)
              v229 = v219;
            else
              v229 = -v219;
            if (v228 <= v229)
              v230 = v219;
            else
              v230 = v224;
            if (v225 >= 0)
              v231 = v225;
            else
              v231 = -v225;
            if (v230 >= 0)
              v232 = v230;
            else
              v232 = -v230;
            if (v231 > v232)
              v230 = v225;
            if (v227 >= 0)
              v233 = v227;
            else
              v233 = -v227;
            if (v230 >= 0)
              v234 = v230;
            else
              v234 = -v230;
            if (v233 > v234)
              LODWORD(v230) = v227;
            *(_DWORD *)__p[0] = v230;
            *(_QWORD *)v294 = v223 - v221 + v222;
            *(_QWORD *)&v294[8] = v221 - (((v226 + v227) * v300) >> 5);
            *(_QWORD *)&v294[16] = v222 - (((v226 + v225) * v301) >> 5);
            *(_QWORD *)&v294[24] = v221
                                 - ((v302 * (uint64_t)(int)v225
                                   + v303 * (uint64_t)(int)v224
                                   + v304 * (uint64_t)(int)v227
                                   + 8 * ((v207 - v204) * v305 + (v203 - v202) * v306)) >> 5);
            v310 = (int32x4_t)vshlq_u32(v309, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v309)) ^ 0x1F) - 4)));
            v235 = vaddvq_s32(v310);
            v236 = (v235 >> 1) - 1;
            do
            {
              v236 += *(_QWORD *)&v294[8 * v220] * v310.u32[v220];
              ++v220;
            }
            while (v220 != 4);
            v237 = 0;
            v238 = 0;
            v239 = (v236 * *(unsigned int *)&v307[4 * v235 + 12]) >> 24;
            v240 = v225 ^ v224 | v219 ^ v224;
            if (v223 <= v221)
              v241 = v221;
            else
              v241 = v223;
            if (v222 > v241)
              v241 = v222;
            if (v221 < v223)
              v223 = v221;
            if (v223 >= v222)
              v223 = v222;
            if (v239 >= v241)
              v242 = v241;
            else
              v242 = v239;
            if (v223 <= v242)
              v223 = v242;
            if (v240 <= 0)
              v239 = v223;
            *(_QWORD *)&v294[32] = v239;
            do
            {
              if (*(_DWORD *)((char *)&xmmword_236923C54 + v237) >= (int)v230)
                ++v238;
              v237 += 4;
            }
            while (v237 != 132);
            v243 = *(_DWORD *)(v200 + 4 * v199) - ((unint64_t)(v239 + 3) >> 3);
            v244 = (2 * v243) ^ (v243 >> 31);
            v245 = __clz(v244);
            v246 = 29 - v245;
            v247 = (((-1 << (v245 ^ 0x1F)) + v244) >> (29 - v245)) - 4 * v245 + 124;
            if (v244 >= 0x10)
              v248 = v247;
            else
              v248 = v244;
            if (v244 >= 0x10)
              v249 = v246;
            else
              v249 = 0;
            v250 = v200;
            sub_23681E5B0((uint64_t)&v311.i64[5 * v238], v248);
            v251 = 0;
            v200 = v250;
            v197 = v286[5];
            v196 = v284;
            if ((v284 & 1) != 0)
              v252 = 0;
            else
              v252 = v197 + 2;
            v253 = 8 * *(int *)(v250 + 4 * v199);
            v254 = v252 + v199;
            *((_DWORD *)v298 + v254) = *(_DWORD *)&v294[32] - v253;
            v255 = (uint64_t *)&v294[40];
            do
            {
              v256 = *(_QWORD *)&v294[v251] - v253;
              if (v256 < 0)
                v256 = v253 - *(_QWORD *)&v294[v251];
              v257 = (unint64_t)(v256 + 3) >> 3;
              v258 = *v255;
              v255 += 3;
              *(_DWORD *)(v258 + 4 * v254) = v257;
              *(_DWORD *)(v258 + 4 * (v199 + (v209 & (v197 + 2)) + 1)) += v257;
              v251 += 8;
            }
            while (v251 != 32);
            v184 = v288 + v249;
            v199 = v205;
            v201 = v282;
          }
          while (v205 < v197);
          v183 = v286;
          v195 = v286[6];
LABEL_237:
          ++v196;
        }
        while (v196 < v195);
LABEL_238:
        for (m = 0; m != 170; m += 5)
        {
          v260 = &v311.i64[m];
          sub_236825AA4((uint64_t)&v311.i64[m], v187, v188, v189, v190, v191, v192, v193, v194);
          v187 = *(float *)((char *)&v313 + m * 8 + 8);
          v185 = v185 + v187;
          v260[1] = *v260;
          v260[3] = 0;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v298)
        {
          v299 = v298;
          operator delete(v298);
        }
        for (n = 0; n != -96; n -= 24)
        {
          v262 = *(void **)&v297[n];
          if (v262)
          {
            *(_QWORD *)&v297[n + 8] = v262;
            operator delete(v262);
          }
        }
        v183 += 8;
      }
      while (v183 != v271);
LABEL_249:
      v263 = 170;
      do
      {
        v264 = *(void **)((char *)&v308[3] + v263 * 8 + 8);
        if (v264)
        {
          v309.i64[v263] = (uint64_t)v264;
          operator delete(v264);
        }
        v263 -= 5;
      }
      while (v263 * 8);
      if ((float)(v185 + (float)v184) < v168)
      {
        *(_DWORD *)(*((_QWORD *)v266 + 9) + 152 * v265 + 68) = v269;
        v168 = v185 + (float)v184;
      }
      v167 = v269 + 1;
      v169 = 0uLL;
    }
    while (v269 + 1 != v267);
  }
}

void sub_23684DA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  STACK[0x2F0] = (unint64_t)&a47;
  sub_2367D78F8((void ***)&STACK[0x2F0]);
  sub_2367E2C48((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

uint64_t sub_23684DC38(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

float sub_23684DC5C(_QWORD *a1, _QWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  _BYTE *v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t i;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v45;
  _BYTE v46[720];
  uint64_t v47;

  v10 = a1;
  v11 = 0;
  v47 = *MEMORY[0x24BDAC8D0];
  v12 = 0uLL;
  do
  {
    v13 = &v46[v11];
    *((_DWORD *)v13 + 8) = 0;
    *(_OWORD *)v13 = 0uLL;
    *((_OWORD *)v13 + 1) = 0uLL;
    v11 += 40;
  }
  while (v11 != 720);
  if (a1 == a2)
  {
    v14 = 0;
    v15 = 0.0;
  }
  else
  {
    v14 = 0;
    v15 = 0.0;
    do
    {
      v16 = v10[6];
      if (v16)
      {
        v17 = 0;
        v45 = -(v10[2] >> 2);
        v18 = v10[5];
        do
        {
          if (v18)
          {
            v19 = 0;
            v20 = v10[3] + v10[2] * v17;
            v21 = (int *)(v20 + 4 * v45);
            do
            {
              if (v19)
              {
                v22 = *(_DWORD *)(v20 + 4 * v19 - 4);
                v23 = v22;
                if (v17)
                {
                  v24 = v21[v19];
                  v25 = v21[v19 - 1];
                }
                else
                {
                  v24 = v22;
                  v25 = v22;
                }
              }
              else if (v17)
              {
                v22 = *v21;
                v24 = *v21;
                v23 = v24;
                v25 = v24;
              }
              else
              {
                v24 = 0;
                v22 = 0;
                v23 = 0;
                v25 = 0;
              }
              v26 = 0;
              v27 = 0;
              if (v23 <= v24)
                v28 = v24;
              else
                v28 = v23;
              if (v28 <= v25)
                v28 = v25;
              if (v24 < v23)
                v23 = v24;
              if (v25 < v23)
                v23 = v25;
              v29 = v28 - v23;
              do
              {
                if (v29 < dword_2369236C8[v26])
                  ++v27;
                ++v26;
              }
              while (v26 != 17);
              if (v22 >= (int)v24)
                v30 = v24;
              else
                v30 = v22;
              if (v22 <= (int)v24)
                v31 = v24;
              else
                v31 = v22;
              v32 = v22 + v24 - v25;
              if (v30 > (int)v25)
                v32 = v31;
              if (v31 < (int)v25)
                v32 = v30;
              v33 = (2 * (*(_DWORD *)(v20 + 4 * v19) - v32)) ^ ((*(_DWORD *)(v20 + 4 * v19) - v32) >> 31);
              v34 = __clz(v33);
              v35 = 29 - v34;
              v36 = (((-1 << (v34 ^ 0x1F)) + v33) >> (29 - v34)) - 4 * v34 + 124;
              if (v33 >= 0x10)
                v37 = v36;
              else
                v37 = v33;
              if (v33 >= 0x10)
                v38 = v35;
              else
                v38 = 0;
              sub_23681E5B0((uint64_t)&v46[40 * v27], v37);
              v14 += v38;
              ++v19;
              v18 = v10[5];
            }
            while (v19 < v18);
            v16 = v10[6];
          }
          ++v17;
        }
        while (v17 < v16);
      }
      for (i = 0; i != 720; i += 40)
      {
        v40 = &v46[i];
        sub_236825AA4((uint64_t)&v46[i], *(float *)&v12, a4, a5, a6, a7, a8, a9, a10);
        LODWORD(v12) = *(_DWORD *)&v46[i + 32];
        v15 = v15 + *(float *)&v12;
        v40[1] = *v40;
        v40[3] = 0;
      }
      v10 += 8;
    }
    while (v10 != a2);
  }
  v41 = 720;
  do
  {
    v42 = *(void **)&v46[v41 - 40];
    if (v42)
    {
      *(_QWORD *)&v46[v41 - 32] = v42;
      operator delete(v42);
    }
    v41 -= 40;
  }
  while (v41);
  return v15 + (float)v14;
}

void sub_23684DEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v12;
  void *v13;

  v12 = 720;
  while (1)
  {
    v13 = *(void **)(&a11 + v12 - 40);
    if (v13)
    {
      *(_QWORD *)(&a11 + v12 - 32) = v13;
      operator delete(v13);
    }
    v12 -= 40;
    if (!v12)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_23684DF2C(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int *v4;

  v2 = *(_QWORD *)(result + 8);
  v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    v4 = (unsigned int *)(**(_QWORD **)(v2 + 32) + ((uint64_t)**(int **)(v2 + 40) << 6));
    result = sub_23684DFF0((float *)(*(_QWORD *)(**(_QWORD **)(v2 + 8) + 40 * **(_QWORD **)(v2 + 16) + 24)+ *(_QWORD *)(**(_QWORD **)(v2 + 8) + 40 * **(_QWORD **)(v2 + 16) + 16)* (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + a2)+ 4 * **(_QWORD **)(v2 + 24)), (int *)(*((_QWORD *)v4 + 3) + *((_QWORD *)v4 + 2) * a2), *v4, **(_DWORD **)(v2 + 48), **(_DWORD **)(v2 + 56), **(_BYTE **)(v2 + 64), **(double **)(v2 + 72));
    if ((_DWORD)result)
      atomic_store(1u, *(unsigned __int8 **)v2);
  }
  return result;
}

uint64_t sub_23684DFCC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_23684DFF0(float *__src, int *__dst, uint64_t a3, unsigned int a4, int a5, char a6, double a7)
{
  float *v7;
  float v8;
  double v9;
  double v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v7 = __src;
  if ((a6 & 1) == 0)
  {
    if (a4 < 0x17)
    {
      if (a3)
      {
        v22 = a7;
        do
        {
          v23 = *v7++;
          v24 = v23;
          if (v23 >= 0.0)
            v25 = 0.5;
          else
            v25 = -0.5;
          *__dst++ = (int)(float)(v25 + (float)(v24 * v22));
          --a3;
        }
        while (a3);
      }
    }
    else
    {
      for (; a3; --a3)
      {
        v8 = *v7++;
        v9 = v8;
        if (v8 >= 0.0)
          v10 = 0.5;
        else
          v10 = -0.5;
        *__dst++ = (int)(v10 + v9 * a7);
      }
    }
    return 0;
  }
  if (a4 == 32)
  {
    memcpy(__dst, __src, 4 * a3);
    return 0;
  }
  if (!a3)
    return 0;
  v11 = 1 << (a4 - 1);
  v12 = ~a5 + a4;
  v13 = ~(-1 << (23 - (~(_BYTE)a5 + a4)));
  while (1)
  {
    v15 = *v7++;
    v14 = LODWORD(v15);
    v16 = LODWORD(v15) & 0x7FFFFFFF;
    if ((LODWORD(v15) & 0x7FFFFFFF) != 0)
      break;
    v21 = v11 & (v14 >> 31);
LABEL_23:
    *__dst++ = v21;
    if (!--a3)
      return 0;
  }
  v17 = v16 >> 23;
  v18 = v17 - 127;
  if (v17 == 255)
    return 1;
  v19 = v14 & 0x7FFFFF;
  v20 = v18 + ~(-1 << (a5 - 1));
  if (v20 < 0)
  {
    if (v20 < (signed int)-v12)
      return 1;
    v19 = (v19 | 0x800000) >> (1 - v20);
    v20 = 0;
  }
  else if (v20 > ~(-1 << a5))
  {
    return 1;
  }
  if ((v19 & v13) == 0)
  {
    v21 = (v19 >> (23 - v12)) | v11 & (v14 >> 31) | (v20 << v12);
    goto LABEL_23;
  }
  return 1;
}

uint64_t sub_23684E160(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = atomic_load(*(unsigned __int8 **)v2);
  if ((v3 & 1) == 0)
  {
    result = sub_23684DFF0((float *)(*(_QWORD *)(**(_QWORD **)(v2 + 8) + 40 * **(int **)(v2 + 16) + 24)+ *(_QWORD *)(**(_QWORD **)(v2 + 8) + 16) * (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + a2)+ 4 * **(_QWORD **)(v2 + 24)), (int *)(*(_QWORD *)(**(_QWORD **)(v2 + 32) + ((uint64_t)**(int **)(v2 + 40) << 6) + 24)+ *(_QWORD *)(**(_QWORD **)(v2 + 32) + ((uint64_t)**(int **)(v2 + 40) << 6) + 16) * a2), **(_QWORD **)(v2 + 48), **(_DWORD **)(v2 + 56), **(_DWORD **)(v2 + 64), **(_BYTE **)(v2 + 72), **(double **)(v2 + 80));
    if ((_DWORD)result)
      atomic_store(1u, *(unsigned __int8 **)v2);
  }
  return result;
}

uint64_t sub_23684E204(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_23684E228(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  _BOOL8 v105;
  unsigned __int8 v106;
  _DWORD *v107;
  _DWORD *v108;
  _QWORD *v109;
  unsigned int v111;
  __int128 v112;
  char **v113;
  unsigned __int8 *v114;
  void **p_p;
  char *v116;
  char *v117;
  char *v118;
  unsigned __int8 v119;
  void *v120;
  char *v121;
  unint64_t v122;
  void *__p;
  char *v124;
  unint64_t v125;
  _QWORD v126[3];

  v2 = a1;
  __p = 0;
  v124 = 0;
  v125 = 0;
  if (a1[12] == a1[13])
    goto LABEL_71;
  v4 = a1[6];
  v3 = a1[7];
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (!v7 || *(_QWORD *)(v2[147] + 24 * v6) != *(_QWORD *)(v2[147] + 24 * v6 + 8))
      {
        v8 = (_QWORD *)(v4 + 88 * v6);
        v10 = v8 + 9;
        v9 = *((unsigned int *)v8 + 18);
        v12 = *v8;
        v11 = v8[1];
        if (v9 < (v11 - *v8) >> 6)
          break;
      }
LABEL_38:
      v6 = ++v7;
      if (0x2E8BA2E8BA2E8BA3 * ((v3 - v4) >> 3) <= (unint64_t)v7)
      {
        v29 = (char *)__p;
        goto LABEL_41;
      }
    }
    v13 = v2;
    v14 = (_QWORD *)(v2[9] + 152 * v6);
    v111 = v7 + 1;
    while (1)
    {
      if (v9 < *v10 || (v18 = v12 + (v9 << 6), *(_QWORD *)(v18 + 40) <= *v14) && *(_QWORD *)(v18 + 48) <= *v14)
      {
        v15 = v9;
        if (!v7)
          goto LABEL_12;
        v16 = (_QWORD *)(v13[147] + 24 * v6);
        if (*v16 != v16[1])
          break;
      }
LABEL_36:
      v9 = (v9 + 1);
      if (v9 >= (v11 - v12) >> 6)
      {
        v2 = v13;
        v4 = v13[6];
        v3 = v13[7];
        goto LABEL_38;
      }
    }
    v15 = *(_DWORD *)(*v16 + 4 * (v9 - *v10));
LABEL_12:
    v17 = *(_DWORD *)(v13[12] + 4 * v15);
    if (__p != v5 && *((_DWORD *)v5 - 3) == v7 && *((_DWORD *)v5 - 1) == v17)
    {
      *((_DWORD *)v5 - 4) = v9 + 1;
    }
    else
    {
      v19 = v9 + 1;
      if ((unint64_t)v5 >= v125)
      {
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)__p) >> 2);
        v21 = v20 + 1;
        if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL)
          sub_2367C3440();
        if (0x999999999999999ALL * ((uint64_t)(v125 - (_QWORD)__p) >> 2) > v21)
          v21 = 0x999999999999999ALL * ((uint64_t)(v125 - (_QWORD)__p) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v125 - (_QWORD)__p) >> 2) >= 0x666666666666666)
          v22 = 0xCCCCCCCCCCCCCCCLL;
        else
          v22 = v21;
        if (v22)
          v22 = (unint64_t)sub_23684F858(v22);
        else
          v23 = 0;
        v24 = (char *)(v22 + 20 * v20);
        *(_DWORD *)v24 = v9;
        *((_DWORD *)v24 + 1) = v19;
        *((_DWORD *)v24 + 2) = v7;
        *((_DWORD *)v24 + 3) = v111;
        *((_DWORD *)v24 + 4) = v17;
        v26 = (char *)__p;
        v25 = v124;
        v27 = v24;
        if (v124 != __p)
        {
          do
          {
            v28 = *(_OWORD *)(v25 - 20);
            *((_DWORD *)v27 - 1) = *((_DWORD *)v25 - 1);
            *(_OWORD *)(v27 - 20) = v28;
            v27 -= 20;
            v25 -= 20;
          }
          while (v25 != v26);
          v25 = v26;
        }
        v5 = v24 + 20;
        __p = v27;
        v125 = v22 + 20 * v23;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v5 = v9;
        *((_DWORD *)v5 + 1) = v19;
        *((_DWORD *)v5 + 2) = v7;
        *((_DWORD *)v5 + 3) = v111;
        *((_DWORD *)v5 + 4) = v17;
        v5 += 20;
      }
      v124 = v5;
      v12 = *v8;
      v11 = v8[1];
    }
    goto LABEL_36;
  }
  v5 = 0;
  v29 = 0;
LABEL_41:
  v30 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v29) >> 2);
  v31 = 126 - 2 * __clz(v30);
  if (v5 == v29)
    v32 = 0;
  else
    v32 = v31;
  v33 = 1;
  sub_23684ED34((uint64_t)v29, (uint64_t)v5, v32, 1);
  if (v30 >= 2)
  {
    v34 = 0;
    v35 = v124;
    v33 = 1;
    v36 = 1;
    do
    {
      v37 = &v29[20 * v33 - 20];
      if (*(_QWORD *)v37 == *(_QWORD *)&v29[v34 + 20]
        && *(_DWORD *)&v29[20 * v33 - 4] == *(_DWORD *)&v29[v34 + 36]
        && *((_DWORD *)v37 + 3) == *(_DWORD *)&v29[v34 + 28])
      {
        *((_DWORD *)v37 + 3) = *(_DWORD *)&v29[v34 + 32];
      }
      else
      {
        v38 = &v29[20 * v33];
        v39 = *(_OWORD *)&v29[v34 + 20];
        ++v33;
        *((_DWORD *)v38 + 4) = *(_DWORD *)&v29[v34 + 36];
        *(_OWORD *)v38 = v39;
        v5 = v35;
      }
      ++v36;
      v34 += 20;
    }
    while (v36 < 0xCCCCCCCCCCCCCCCDLL * ((v5 - v29) >> 2));
    v29 = (char *)__p;
    v30 = 0xCCCCCCCCCCCCCCCDLL * ((v35 - (_BYTE *)__p) >> 2);
    v5 = v35;
  }
  v40 = v33 - v30;
  if (v33 <= v30)
  {
    if (v33 >= v30)
      goto LABEL_71;
    v52 = &v29[20 * v33];
    goto LABEL_67;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v125 - (_QWORD)v5) >> 2) >= v40)
  {
    bzero(v5, 20 * ((20 * v40 - 20) / 0x14) + 20);
    v52 = &v5[20 * ((20 * v40 - 20) / 0x14) + 20];
LABEL_67:
    v124 = v52;
    goto LABEL_71;
  }
  if (v33 > 0xCCCCCCCCCCCCCCCLL)
    sub_2367C3440();
  v41 = 0x999999999999999ALL * ((uint64_t)(v125 - (_QWORD)v29) >> 2);
  if (v41 <= v33)
    v41 = v33;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v125 - (_QWORD)v29) >> 2) >= 0x666666666666666)
    v42 = 0xCCCCCCCCCCCCCCCLL;
  else
    v42 = v41;
  v43 = (char *)sub_23684F858(v42);
  v44 = (char *)__p;
  v45 = v124;
  v46 = &v43[20 * v30];
  v48 = &v43[20 * v47];
  bzero(v46, 20 * ((20 * v40 - 20) / 0x14) + 20);
  v49 = &v46[20 * ((20 * v40 - 20) / 0x14) + 20];
  if (v124 == __p)
  {
    v51 = v46;
  }
  else
  {
    do
    {
      v50 = *(_OWORD *)(v45 - 20);
      v51 = v46 - 20;
      *((_DWORD *)v46 - 1) = *((_DWORD *)v45 - 1);
      *(_OWORD *)(v46 - 20) = v50;
      v45 -= 20;
      v46 -= 20;
    }
    while (v45 != v44);
  }
  __p = v51;
  v124 = v49;
  v125 = (unint64_t)v48;
  if (v44)
    operator delete(v44);
LABEL_71:
  v53 = (char *)v2[122];
  v54 = v2[123];
  if (v53 != (char *)v54)
  {
    sub_23683D2D0((char *)v2 + 120, v53, v54, 0xCCCCCCCCCCCCCCCDLL * ((v54 - (uint64_t)v53) >> 3));
    goto LABEL_73;
  }
  v59 = *((_DWORD *)v2 + 140);
  if (v59 < 7 || !*((_BYTE *)v2 + 580))
  {
    v120 = 0;
    v121 = 0;
    v122 = 0;
    sub_2367E74C8(&v120, (uint64_t)(v2[145] - v2[144]) >> 3);
    v64 = v2[145];
    v65 = v2[144];
    if (v64 - v65 != 8)
    {
      v66 = 0;
      do
      {
        v67 = *(_QWORD *)(v65 + 8 * v66);
        v68 = v66 + 1;
        v69 = *(_QWORD *)(v65 + 8 * (v66 + 1));
        if (v67 < v69)
        {
          v70 = 0;
          v71 = *(_QWORD *)(v65 + 8 * v66);
LABEL_92:
          while (2)
          {
            v72 = (uint64_t *)(v2[6] + 88 * v71);
            v73 = *v72;
            v74 = v72[1];
            while (v73 != v74)
            {
              if (*(_QWORD *)(v73 + 40))
                v75 = *(_QWORD *)(v73 + 48) == 0;
              else
                v75 = 1;
              if (!v75)
              {
                ++v71;
                v70 = 1;
                if (v71 != v69)
                  goto LABEL_92;
                goto LABEL_105;
              }
              v73 += 64;
            }
            if (++v71 != v69)
              continue;
            break;
          }
          if ((v70 & 1) != 0)
          {
LABEL_105:
            v76 = v121;
            if ((unint64_t)v121 >= v122)
            {
              v78 = (char *)v120;
              v79 = (v121 - (_BYTE *)v120) >> 3;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61)
                sub_2367C3440();
              v81 = v122 - (_QWORD)v120;
              if ((uint64_t)(v122 - (_QWORD)v120) >> 2 > v80)
                v80 = v81 >> 2;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v80;
              if (v82)
              {
                v82 = (unint64_t)sub_2367CA1FC(v82);
                v78 = (char *)v120;
                v76 = v121;
                v67 = *(_QWORD *)(v65 + 8 * v66);
              }
              else
              {
                v83 = 0;
              }
              v84 = (char *)(v82 + 8 * v79);
              *(_QWORD *)v84 = v67;
              v77 = v84 + 8;
              while (v76 != v78)
              {
                v85 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v84 - 1) = v85;
                v84 -= 8;
              }
              v120 = v84;
              v122 = v82 + 8 * v83;
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_QWORD *)v121 = v67;
              v77 = v76 + 8;
            }
            v121 = v77;
            v64 = v2[145];
            v65 = v2[144];
          }
        }
        ++v66;
      }
      while (v68 < ((v64 - v65) >> 3) - 1);
    }
    v86 = (char *)v120;
    v87 = v121;
    if (v120 == v121)
    {
      v57 = 0;
      v89 = 1;
      if (!v120)
      {
LABEL_164:
        if (v89)
          goto LABEL_76;
        goto LABEL_73;
      }
LABEL_163:
      v121 = v86;
      operator delete(v86);
      goto LABEL_164;
    }
    if ((unint64_t)v121 >= v122)
    {
      v90 = (v121 - (_BYTE *)v120) >> 3;
      v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 61)
        sub_2367C3440();
      v92 = v122 - (_QWORD)v120;
      if ((uint64_t)(v122 - (_QWORD)v120) >> 2 > v91)
        v91 = v92 >> 2;
      v93 = (unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8;
      v94 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v93)
        v94 = v91;
      if (v94)
      {
        v94 = (unint64_t)sub_2367CA1FC(v94);
        v86 = (char *)v120;
        v87 = v121;
      }
      else
      {
        v95 = 0;
      }
      v97 = (char *)(v94 + 8 * v90);
      v98 = v94 + 8 * v95;
      *(_QWORD *)v97 = *(_QWORD *)(v64 - 8);
      v88 = v97 + 8;
      while (v87 != v86)
      {
        v99 = *((_QWORD *)v87 - 1);
        v87 -= 8;
        *((_QWORD *)v97 - 1) = v99;
        v97 -= 8;
      }
      v120 = v97;
      v122 = v98;
      if (v86)
        operator delete(v86);
      v86 = v97;
    }
    else
    {
      *(_QWORD *)v121 = *(_QWORD *)(v64 - 8);
      v88 = v87 + 8;
    }
    v121 = v88;
    v119 = 0;
    v100 = v88 - v86;
    v101 = (v88 - v86) >> 3;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    *(_QWORD *)&v112 = &v116;
    BYTE8(v112) = 0;
    v102 = v101 - 1;
    if (v101 != 1)
    {
      if (v102 >= 0xAAAAAAAAAAAAAABLL)
        sub_2367C3440();
      v103 = (char *)operator new(24 * v102);
      v116 = v103;
      v118 = &v103[24 * v102];
      bzero(v103, 24 * ((24 * v102 - 24) / 0x18) + 24);
      v117 = &v103[24 * ((24 * v102 - 24) / 0x18) + 24];
    }
    v104 = (v100 >> 3) - 1;
    *(_QWORD *)&v112 = &v120;
    *((_QWORD *)&v112 + 1) = v2;
    v113 = &v116;
    v114 = &v119;
    p_p = &__p;
    if (a2)
    {
      v105 = sub_23684F89C(a2, v104, (uint64_t)&v112);
    }
    else
    {
      v126[0] = 0;
      v126[1] = v126;
      v105 = sub_23684F89C((uint64_t)v126, v104, (uint64_t)&v112);
    }
    v57 = v105;
    if (!v105)
    {
      do
        v106 = __ldaxr(&v119);
      while (__stlxr(1u, &v119));
      if ((v106 & 1) == 0)
      {
        v2[16] = v2[15];
        sub_23684F930(&v116, &v120, 0, ((v121 - (_BYTE *)v120) >> 3) - 1, v2 + 15);
        v57 = 0;
        v89 = 0;
        goto LABEL_162;
      }
      v57 = 1;
    }
    v89 = 1;
LABEL_162:
    *(_QWORD *)&v112 = &v116;
    sub_2367C4718((void ***)&v112);
    v86 = (char *)v120;
    if (!v120)
      goto LABEL_164;
    goto LABEL_163;
  }
  v60 = (uint64_t *)v2[6];
  v61 = (uint64_t *)v2[7];
  if (v60 == v61)
  {
    v62 = 0;
  }
  else
  {
    v62 = 0;
    do
    {
      for (i = *v60; i != v60[1]; i += 64)
        v62 += *(_QWORD *)(i + 48) * *(_QWORD *)(i + 40);
      v60 += 11;
    }
    while (v60 != v61);
  }
  if (v59 >= 8)
  {
    if (v59 != 8)
    {
      v107 = (_DWORD *)v2[15];
      v108 = (_DWORD *)v2[17];
      if (v108 == v107)
      {
        if (v108)
        {
          v2[16] = v108;
          operator delete(v108);
          v2[15] = 0;
          v2[16] = 0;
          v2[17] = 0;
        }
        sub_2367DC058(v2 + 15, 1uLL);
        v109 = v2 + 16;
        v107 = (_DWORD *)v2[16];
      }
      else
      {
        v109 = v2 + 16;
      }
      *v107 = 0;
      *((_WORD *)v107 + 2) = -1;
      *((_QWORD *)v107 + 1) = 0;
      v107[4] = 5;
      *((_QWORD *)v107 + 3) = 0;
      v107[8] = 1;
      *v109 = v107 + 10;
      goto LABEL_73;
    }
    sub_23686D4F8((unint64_t *)&v112, 6, v62);
  }
  else
  {
    sub_23686D4F8((unint64_t *)&v112, 5, v62);
  }
  v96 = (void *)v2[15];
  if (v96)
  {
    v2[16] = v96;
    operator delete(v96);
    v2[15] = 0;
    v2[16] = 0;
    v2[17] = 0;
  }
  *(_OWORD *)(v2 + 15) = v112;
  v2[17] = v113;
LABEL_73:
  sub_23681D030((uint64_t)(v2 + 18), 1uLL);
  v55 = v2[18];
  *(_QWORD *)(v55 + 8) = *(_QWORD *)v55;
  v112 = 0uLL;
  v113 = 0;
  sub_236877A6C(v2 + 15, (void **)v55, (char **)&v112);
  v56 = (void *)v2[15];
  if (v56)
  {
    v2[16] = v56;
    operator delete(v56);
    v2[15] = 0;
    v2[16] = 0;
    v2[17] = 0;
  }
  v57 = 0;
  *(_OWORD *)(v2 + 15) = v112;
  v2[17] = v113;
LABEL_76:
  if (__p)
  {
    v124 = (char *)__p;
    operator delete(__p);
  }
  return v57;
}

void sub_23684ECAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23684ED34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  char v30;
  unint64_t v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  BOOL v39;
  BOOL v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  char v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  __int128 *v58;
  __int128 v59;
  int v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  uint64_t v66;
  __int128 *v67;
  int v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  __int128 v102;
  uint64_t v103;
  BOOL v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  __int128 v116;
  __int128 *v118;
  int v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char v125;
  int64_t v126;
  __int128 v128;
  int v129;
  __int128 v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v7 = a2;
  v8 = (__int128 *)(a2 - 20);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = v7 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v135 = *v8;
        v60 = *(_DWORD *)(a2 - 4);
        v134 = *(_OWORD *)a1;
        v61 = *(_DWORD *)(a1 + 16);
        v130 = v135;
        v131 = v60;
        v128 = v134;
        v129 = v61;
        if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
        {
          v62 = *(_OWORD *)a1;
          v131 = *(_DWORD *)(a1 + 16);
          v130 = v62;
          v63 = *v8;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
          *(_OWORD *)a1 = v63;
          v64 = v130;
          *(_DWORD *)(a2 - 4) = v131;
          *v8 = v64;
        }
        return;
      case 3:
        sub_23685049C((__int128 *)a1, (__int128 *)(a1 + 20), v8);
        return;
      case 4:
        sub_236850660(a1, a1 + 20, a1 + 40, (uint64_t)v8);
        return;
      case 5:
        sub_23685078C(a1, a1 + 20, a1 + 40, a1 + 60, (__n128 *)v8);
        return;
      default:
        if (v10 <= 479)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != v7)
            {
              v65 = (__int128 *)(a1 + 20);
              if (a1 + 20 != v7)
              {
                v66 = 0;
                v67 = (__int128 *)a1;
                do
                {
                  v68 = *((_DWORD *)v67 + 9);
                  v69 = *v67;
                  v70 = *((_DWORD *)v67 + 4);
                  v67 = v65;
                  v136 = v69;
                  v130 = *v65;
                  v131 = v68;
                  v128 = v69;
                  v129 = v70;
                  if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
                  {
                    v139 = *v67;
                    v71 = v66;
                    while (1)
                    {
                      v72 = a1 + v71;
                      *(_OWORD *)(v72 + 20) = *(_OWORD *)(a1 + v71);
                      *(_DWORD *)(v72 + 36) = *(_DWORD *)(a1 + v71 + 16);
                      if (!v71)
                        break;
                      v138 = *(_OWORD *)(v72 - 20);
                      v73 = *(_DWORD *)(v72 - 4);
                      v130 = v139;
                      v131 = v68;
                      v128 = v138;
                      v129 = v73;
                      v71 -= 20;
                      if ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) == 0)
                      {
                        v74 = a1 + v71 + 20;
                        goto LABEL_70;
                      }
                    }
                    v74 = a1;
LABEL_70:
                    *(_OWORD *)v74 = v139;
                    *(_DWORD *)(v74 + 16) = v68;
                  }
                  v65 = (__int128 *)((char *)v67 + 20);
                  v66 += 20;
                }
                while ((__int128 *)((char *)v67 + 20) != (__int128 *)v7);
              }
            }
          }
          else if (a1 != v7)
          {
            while (1)
            {
              v118 = (__int128 *)(a1 + 20);
              if (a1 + 20 == v7)
                break;
              v119 = *(_DWORD *)(a1 + 36);
              v120 = *(_OWORD *)a1;
              v121 = *(_DWORD *)(a1 + 16);
              a1 += 20;
              v136 = v120;
              v130 = *v118;
              v131 = v119;
              v128 = v120;
              v129 = v121;
              if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
              {
                v139 = *(_OWORD *)a1;
                v122 = a1;
                do
                {
                  v123 = v122 - 20;
                  *(_OWORD *)v122 = *(_OWORD *)(v122 - 20);
                  *(_DWORD *)(v122 + 16) = *(_DWORD *)(v122 - 4);
                  v138 = *(_OWORD *)(v122 - 40);
                  v124 = *(_DWORD *)(v122 - 24);
                  v130 = v139;
                  v131 = v119;
                  v128 = v138;
                  v129 = v124;
                  v125 = sub_236850378((uint64_t)&v130, (uint64_t)&v128);
                  v122 = v123;
                }
                while ((v125 & 1) != 0);
                *(_OWORD *)v123 = v139;
                *(_DWORD *)(v123 + 16) = v119;
              }
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v7)
          {
            v75 = (unint64_t)(v11 - 2) >> 1;
            v76 = v75;
            do
            {
              v77 = v76;
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = a1 + 20 * v78;
                if (2 * v76 + 2 < v11)
                {
                  v130 = *(_OWORD *)v79;
                  v80 = *(_DWORD *)(v79 + 16);
                  v128 = *(_OWORD *)(v79 + 20);
                  v81 = *(_DWORD *)(v79 + 36);
                  v131 = v80;
                  v129 = v81;
                  if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
                  {
                    v79 += 20;
                    v78 = 2 * v77 + 2;
                  }
                }
                v82 = a1 + 20 * v77;
                v130 = *(_OWORD *)v79;
                v83 = *(_DWORD *)(v79 + 16);
                v128 = *(_OWORD *)v82;
                v84 = *(_DWORD *)(v82 + 16);
                v131 = v83;
                v129 = v84;
                if ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) == 0)
                {
                  v126 = v77;
                  v136 = *(_OWORD *)v82;
                  v85 = *(_DWORD *)(v82 + 16);
                  do
                  {
                    v86 = v82;
                    v82 = v79;
                    v87 = *(_OWORD *)v79;
                    *(_DWORD *)(v86 + 16) = *(_DWORD *)(v79 + 16);
                    *(_OWORD *)v86 = v87;
                    if (v75 < v78)
                      break;
                    v88 = (2 * v78) | 1;
                    v79 = a1 + 20 * v88;
                    v89 = 2 * v78 + 2;
                    if (v89 < v11)
                    {
                      v130 = *(_OWORD *)v79;
                      v90 = *(_DWORD *)(v79 + 16);
                      v128 = *(_OWORD *)(v79 + 20);
                      v91 = *(_DWORD *)(v79 + 36);
                      v131 = v90;
                      v129 = v91;
                      if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
                      {
                        v79 += 20;
                        v88 = v89;
                      }
                    }
                    v130 = *(_OWORD *)v79;
                    v92 = *(_DWORD *)(v79 + 16);
                    v128 = v136;
                    v131 = v92;
                    v129 = v85;
                    v78 = v88;
                  }
                  while (!sub_236850378((uint64_t)&v130, (uint64_t)&v128));
                  *(_OWORD *)v82 = v136;
                  *(_DWORD *)(v82 + 16) = v85;
                  v77 = v126;
                }
              }
              v76 = v77 - 1;
            }
            while (v77);
            v93 = v10 / 0x14uLL;
            do
            {
              v94 = 0;
              v95 = *(_OWORD *)a1;
              v137 = *(_DWORD *)(a1 + 16);
              v136 = v95;
              v96 = a1;
              do
              {
                v97 = v96 + 20 * v94 + 20;
                v98 = (2 * v94) | 1;
                v99 = 2 * v94 + 2;
                if (v99 < v93)
                {
                  v139 = *(_OWORD *)v97;
                  v100 = *(_DWORD *)(v96 + 20 * v94 + 36);
                  v138 = *(_OWORD *)(v97 + 20);
                  v101 = *(_DWORD *)(v97 + 36);
                  v130 = v139;
                  v131 = v100;
                  v128 = v138;
                  v129 = v101;
                  if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
                  {
                    v97 += 20;
                    v98 = v99;
                  }
                }
                v102 = *(_OWORD *)v97;
                *(_DWORD *)(v96 + 16) = *(_DWORD *)(v97 + 16);
                *(_OWORD *)v96 = v102;
                v96 = v97;
                v94 = v98;
              }
              while (v98 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
              v103 = a2 - 20;
              v104 = v97 == a2 - 20;
              a2 -= 20;
              if (v104)
              {
                v116 = v136;
                *(_DWORD *)(v97 + 16) = v137;
                *(_OWORD *)v97 = v116;
              }
              else
              {
                v105 = *(_OWORD *)v103;
                *(_DWORD *)(v97 + 16) = *(_DWORD *)(v103 + 16);
                *(_OWORD *)v97 = v105;
                v106 = v136;
                *(_DWORD *)(v103 + 16) = v137;
                *(_OWORD *)v103 = v106;
                v107 = v97 - a1 + 20;
                if (v107 >= 21)
                {
                  v108 = (v107 / 0x14uLL - 2) >> 1;
                  v109 = a1 + 20 * v108;
                  v130 = *(_OWORD *)v109;
                  v110 = *(_DWORD *)(v109 + 16);
                  v128 = *(_OWORD *)v97;
                  v111 = *(_DWORD *)(v97 + 16);
                  v131 = v110;
                  v129 = v111;
                  if (sub_236850378((uint64_t)&v130, (uint64_t)&v128))
                  {
                    v139 = *(_OWORD *)v97;
                    v112 = *(_DWORD *)(v97 + 16);
                    do
                    {
                      v113 = v97;
                      v97 = v109;
                      v114 = *(_OWORD *)v109;
                      *(_DWORD *)(v113 + 16) = *(_DWORD *)(v109 + 16);
                      *(_OWORD *)v113 = v114;
                      if (!v108)
                        break;
                      v108 = (v108 - 1) >> 1;
                      v109 = a1 + 20 * v108;
                      v130 = *(_OWORD *)v109;
                      v115 = *(_DWORD *)(v109 + 16);
                      v128 = v139;
                      v131 = v115;
                      v129 = v112;
                    }
                    while ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
                    *(_OWORD *)v97 = v139;
                    *(_DWORD *)(v97 + 16) = v112;
                  }
                }
              }
            }
            while (v93-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = a1 + 20 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xA01)
        {
          sub_23685049C((__int128 *)v13, (__int128 *)a1, v8);
        }
        else
        {
          sub_23685049C((__int128 *)a1, (__int128 *)v13, v8);
          v14 = 5 * v12;
          sub_23685049C((__int128 *)(a1 + 20), (__int128 *)(a1 + 4 * v14 - 20), (__int128 *)(a2 - 40));
          sub_23685049C((__int128 *)(a1 + 40), (__int128 *)(a1 + 20 + 4 * v14), (__int128 *)(a2 - 60));
          sub_23685049C((__int128 *)(a1 + 4 * v14 - 20), (__int128 *)v13, (__int128 *)(a1 + 20 + 4 * v14));
          v15 = *(_OWORD *)a1;
          v131 = *(_DWORD *)(a1 + 16);
          v130 = v15;
          v16 = *(_DWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_DWORD *)(a1 + 16) = v16;
          v17 = v130;
          *(_DWORD *)(v13 + 16) = v131;
          *(_OWORD *)v13 = v17;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v133 = *(_OWORD *)(a1 - 20);
          v18 = *(_DWORD *)(a1 - 4);
          v132 = *(_OWORD *)a1;
          v19 = *(_DWORD *)(a1 + 16);
          v130 = v133;
          v131 = v18;
          v128 = v132;
          v129 = v19;
          if ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) == 0)
          {
            v136 = *(_OWORD *)a1;
            v41 = *(_DWORD *)(a1 + 16);
            v130 = *(_OWORD *)a1;
            v128 = *v8;
            v42 = *(_DWORD *)(v7 - 4);
            v131 = v41;
            v129 = v42;
            if ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) != 0)
            {
              v43 = a1;
              do
              {
                v9 = v43 + 20;
                v130 = v136;
                v128 = *(_OWORD *)(v43 + 20);
                v44 = *(_DWORD *)(v43 + 36);
                v131 = v41;
                v129 = v44;
                v45 = sub_236850378((uint64_t)&v130, (uint64_t)&v128);
                v43 = v9;
              }
              while ((v45 & 1) == 0);
            }
            else
            {
              v46 = a1 + 20;
              do
              {
                v9 = v46;
                if (v46 >= v7)
                  break;
                v130 = v136;
                v128 = *(_OWORD *)v46;
                v47 = *(_DWORD *)(v46 + 16);
                v131 = v41;
                v129 = v47;
                v48 = sub_236850378((uint64_t)&v130, (uint64_t)&v128);
                v46 = v9 + 20;
              }
              while (!v48);
            }
            v49 = v7;
            if (v9 < v7)
            {
              v50 = v7;
              do
              {
                v49 = v50 - 20;
                v130 = v136;
                v128 = *(_OWORD *)(v50 - 20);
                v51 = *(_DWORD *)(v50 - 4);
                v131 = v41;
                v129 = v51;
                v52 = sub_236850378((uint64_t)&v130, (uint64_t)&v128);
                v50 = v49;
              }
              while ((v52 & 1) != 0);
            }
            while (v9 < v49)
            {
              v53 = *(_OWORD *)v9;
              v131 = *(_DWORD *)(v9 + 16);
              v130 = v53;
              v54 = *(_OWORD *)v49;
              *(_DWORD *)(v9 + 16) = *(_DWORD *)(v49 + 16);
              *(_OWORD *)v9 = v54;
              v55 = v130;
              *(_DWORD *)(v49 + 16) = v131;
              *(_OWORD *)v49 = v55;
              do
              {
                v130 = v136;
                v128 = *(_OWORD *)(v9 + 20);
                v56 = *(_DWORD *)(v9 + 36);
                v9 += 20;
                v131 = v41;
                v129 = v56;
              }
              while (!sub_236850378((uint64_t)&v130, (uint64_t)&v128));
              do
              {
                v139 = *(_OWORD *)(v49 - 20);
                v57 = *(_DWORD *)(v49 - 4);
                v49 -= 20;
                v130 = v136;
                v131 = v41;
                v128 = v139;
                v129 = v57;
              }
              while ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
            }
            v58 = (__int128 *)(v9 - 20);
            if (v9 - 20 != a1)
            {
              v59 = *v58;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 - 4);
              *(_OWORD *)a1 = v59;
            }
            a4 = 0;
            *v58 = v136;
            *(_DWORD *)(v9 - 4) = v41;
            continue;
          }
        }
        v136 = *(_OWORD *)a1;
        v20 = *(_DWORD *)(a1 + 16);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 20;
          v130 = *(_OWORD *)(v22 + 20);
          v23 = *(_DWORD *)(v22 + 36);
          v128 = v136;
          v131 = v23;
          v129 = v20;
        }
        while ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
        v24 = v7;
        if (v22 == a1)
        {
          v28 = a2;
          while (v21 < v28)
          {
            v25 = v28 - 20;
            v130 = *(_OWORD *)(v28 - 20);
            v29 = *(_DWORD *)(v28 - 4);
            v128 = v136;
            v131 = v29;
            v129 = v20;
            v30 = sub_236850378((uint64_t)&v130, (uint64_t)&v128);
            v28 = v25;
            if ((v30 & 1) != 0)
              goto LABEL_21;
          }
          v25 = v28;
        }
        else
        {
          do
          {
            v25 = v24 - 20;
            v130 = *(_OWORD *)(v24 - 20);
            v26 = *(_DWORD *)(v24 - 4);
            v128 = v136;
            v131 = v26;
            v129 = v20;
            v27 = sub_236850378((uint64_t)&v130, (uint64_t)&v128);
            v24 = v25;
          }
          while (!v27);
        }
LABEL_21:
        v9 = v21;
        if (v21 < v25)
        {
          v31 = v25;
          do
          {
            v130 = *(_OWORD *)v9;
            v32 = v130;
            v131 = *(_DWORD *)(v9 + 16);
            v33 = v131;
            v34 = *(_DWORD *)(v31 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v31;
            *(_DWORD *)(v9 + 16) = v34;
            *(_DWORD *)(v31 + 16) = v33;
            *(_OWORD *)v31 = v32;
            do
            {
              v130 = *(_OWORD *)(v9 + 20);
              v35 = *(_DWORD *)(v9 + 36);
              v9 += 20;
              v128 = v136;
              v131 = v35;
              v129 = v20;
            }
            while ((sub_236850378((uint64_t)&v130, (uint64_t)&v128) & 1) != 0);
            do
            {
              v139 = *(_OWORD *)(v31 - 20);
              v36 = *(_DWORD *)(v31 - 4);
              v31 -= 20;
              v128 = v136;
              v130 = v139;
              v131 = v36;
              v129 = v20;
            }
            while (!sub_236850378((uint64_t)&v130, (uint64_t)&v128));
          }
          while (v9 < v31);
        }
        v37 = (__int128 *)(v9 - 20);
        if (v9 - 20 != a1)
        {
          v38 = *v37;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 - 4);
          *(_OWORD *)a1 = v38;
        }
        *v37 = v136;
        *(_DWORD *)(v9 - 4) = v20;
        v39 = v21 >= v25;
        v7 = a2;
        if (!v39)
        {
LABEL_33:
          sub_23684ED34(a1, v9 - 20, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = sub_236850914(a1, v9 - 20);
        if (!sub_236850914(v9, a2))
        {
          if (v40)
            continue;
          goto LABEL_33;
        }
        a2 = v9 - 20;
        if (!v40)
          goto LABEL_2;
        return;
    }
  }
}

void *sub_23684F858(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    sub_2367C3488();
  return operator new(20 * a1);
}

BOOL sub_23684F89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236850270, sub_23684FDBC, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23684FDBC((uint64_t)v6, i);
  return 0;
}

void sub_23684F930(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  int32x2_t v66;
  int32x2_t *v67;

  v6 = a3 + 1;
  if (a3 + 1 == a4)
  {
    v7 = (char *)a5[1];
  }
  else
  {
    v8 = a4;
    v10 = (char *)*a5;
    v7 = (char *)a5[1];
    do
    {
      v11 = (v8 + a3) >> 1;
      v12 = *(_QWORD *)(*a2 + 8 * v11) - 1;
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v10) >> 3);
      v14 = a5[2];
      if ((unint64_t)v7 >= v14)
      {
        if (v13 + 1 > 0x666666666666666)
          goto LABEL_58;
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (_QWORD)v10) >> 3);
        v17 = 2 * v16;
        if (2 * v16 <= v13 + 1)
          v17 = v13 + 1;
        if (v16 >= 0x333333333333333)
          v18 = 0x666666666666666;
        else
          v18 = v17;
        v19 = (char *)sub_2367DC0A4(v18);
        v21 = &v19[40 * v13];
        *(_DWORD *)v21 = v12;
        *((_WORD *)v21 + 2) = 1;
        *((_QWORD *)v21 + 1) = 0;
        *((_DWORD *)v21 + 4) = 0;
        *((_QWORD *)v21 + 3) = 0;
        *((_DWORD *)v21 + 8) = 1;
        v23 = (char *)*a5;
        v22 = (char *)a5[1];
        v24 = v21;
        if (v22 != (char *)*a5)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 40);
            v26 = *(_OWORD *)(v22 - 24);
            *((_DWORD *)v24 - 2) = *((_DWORD *)v22 - 2);
            *(_OWORD *)(v24 - 24) = v26;
            *(_OWORD *)(v24 - 40) = v25;
            v24 -= 40;
            v22 -= 40;
          }
          while (v22 != v23);
          v22 = (char *)*a5;
        }
        v15 = v21 + 40;
        *a5 = (unint64_t)v24;
        a5[1] = (unint64_t)(v21 + 40);
        a5[2] = (unint64_t)&v19[40 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v7 = v12;
        *((_WORD *)v7 + 2) = 1;
        *((_QWORD *)v7 + 1) = 0;
        *((_DWORD *)v7 + 4) = 0;
        *((_QWORD *)v7 + 3) = 0;
        v15 = v7 + 40;
        *((_DWORD *)v7 + 8) = 1;
      }
      a5[1] = (unint64_t)v15;
      *(_DWORD *)(*a5 + 40 * v13 + 8) = -858993459 * ((unint64_t)&v15[-*a5] >> 3);
      sub_23684F930(a1, a2, v11, v8, a5);
      v10 = (char *)*a5;
      v7 = (char *)a5[1];
      *(_DWORD *)(*a5 + 40 * v13 + 12) = -858993459 * ((unint64_t)&v7[-*a5] >> 3);
      v8 = (v8 + a3) >> 1;
    }
    while (v6 != v11);
  }
  v27 = (char *)*a5;
  v28 = (uint64_t)&v7[-*a5] / 40;
  v29 = *a1 + 24 * a3;
  v31 = *(char **)v29;
  v30 = *(char **)(v29 + 8);
  if (v30 - v31 >= 1)
  {
    v32 = (v30 - v31) / 40;
    v33 = &v27[40 * v28];
    v34 = a5[2];
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (_QWORD)v7) >> 3)) >= v32)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v7 - v33) >> 3)) >= v32)
      {
        v40 = &v31[40 * v32];
        v42 = v7;
      }
      else
      {
        v40 = &v31[8 * ((v7 - v33) >> 3)];
        v41 = v30 - v40;
        if (v30 != v40)
          memmove(v7, &v31[8 * ((v7 - v33) >> 3)], v41 - 4);
        v42 = &v7[v41];
        a5[1] = (unint64_t)&v7[v41];
        if (v7 - v33 < 1)
          goto LABEL_53;
      }
      v43 = &v33[40 * v32];
      v44 = (unint64_t)&v42[-40 * v32];
      v45 = v42;
      if (v44 < (unint64_t)v7)
      {
        v45 = v42;
        do
        {
          v46 = *(_OWORD *)v44;
          v47 = *(_OWORD *)(v44 + 16);
          *((_QWORD *)v45 + 4) = *(_QWORD *)(v44 + 32);
          *(_OWORD *)v45 = v46;
          *((_OWORD *)v45 + 1) = v47;
          v44 += 40;
          v45 += 40;
        }
        while (v44 < (unint64_t)v7);
      }
      a5[1] = (unint64_t)v45;
      if (v42 != v43)
        memmove(v43, v33, v42 - v43 - 4);
      if (v40 != v31)
        memmove(v33, v31, v40 - v31 - 4);
      goto LABEL_53;
    }
    v35 = v32 - 0x3333333333333333 * ((v7 - v27) >> 3);
    if (v35 > 0x666666666666666)
LABEL_58:
      sub_2367C3440();
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (_QWORD)v27) >> 3);
    v37 = 2 * v36;
    if (2 * v36 <= v35)
      v37 = v35;
    if (v36 >= 0x333333333333333)
      v38 = 0x666666666666666;
    else
      v38 = v37;
    if (v38)
      v38 = (unint64_t)sub_2367DC0A4(v38);
    else
      v39 = 0;
    v48 = v38 + 40 * v28;
    v49 = (char *)(v48 + 40 * v32);
    v50 = 40 * v32;
    v51 = v48;
    do
    {
      v52 = *(_OWORD *)v31;
      v53 = *((_OWORD *)v31 + 1);
      *(_QWORD *)(v51 + 32) = *((_QWORD *)v31 + 4);
      *(_OWORD *)v51 = v52;
      *(_OWORD *)(v51 + 16) = v53;
      v51 += 40;
      v31 += 40;
      v50 -= 40;
    }
    while (v50);
    v54 = (char *)*a5;
    if ((char *)*a5 == v33)
    {
      v58 = v38 + 40 * v28;
    }
    else
    {
      v55 = v33;
      do
      {
        v56 = *(_OWORD *)(v55 - 40);
        v57 = *(_OWORD *)(v55 - 24);
        v58 = v48 - 40;
        *(_DWORD *)(v48 - 8) = *((_DWORD *)v55 - 2);
        *(_OWORD *)(v48 - 24) = v57;
        *(_OWORD *)(v48 - 40) = v56;
        v55 -= 40;
        v48 -= 40;
      }
      while (v55 != v54);
    }
    v59 = v38 + 40 * v39;
    v60 = (_BYTE *)a5[1];
    v61 = v60 - v33;
    if (v60 != v33)
      memmove(v49, v33, v61 - 4);
    v62 = (void *)*a5;
    *a5 = v58;
    a5[1] = (unint64_t)&v49[v61];
    a5[2] = v59;
    if (v62)
      operator delete(v62);
  }
LABEL_53:
  v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a5[1] - *a5) >> 3);
  v64 = v63 > v28;
  v65 = v63 - v28;
  if (v64)
  {
    v66 = vdup_n_s32(v28);
    v67 = (int32x2_t *)(*a5 + 40 * v28 + 8);
    do
    {
      *v67 = vadd_s32(*v67, v66);
      v67 += 5;
      --v65;
    }
    while (v65);
  }
}

void sub_23684FDBC(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  uint64_t **v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[3];
  void *v52[3];
  void *v53[3];
  void *v54[3];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;

  v2 = *(uint64_t ***)(a1 + 8);
  v68 = 0;
  v3 = v2[1];
  v4 = **v2;
  v5 = *(_QWORD *)(v4 + 8 * a2);
  v7 = *(_QWORD *)(v4 + 8 * (a2 + 1));
  v8 = v7;
  if (v5 >= v7)
  {
LABEL_13:
    if (v5 < v7)
    {
      do
      {
        v13 = v8 - 1;
        v14 = (uint64_t *)(v3[6] + 88 * (v8 - 1));
        v15 = *v14;
        v16 = v14[1];
        while (v15 != v16)
        {
          if (*(_QWORD *)(v15 + 40))
            v17 = *(_QWORD *)(v15 + 48) == 0;
          else
            v17 = 1;
          if (!v17)
          {
            LODWORD(v7) = v8;
            goto LABEL_24;
          }
          v15 += 64;
        }
        --v8;
      }
      while (v5 < v13);
      LODWORD(v7) = v5;
    }
  }
  else
  {
    v5 = v5;
    do
    {
      v9 = (uint64_t *)(v3[6] + 88 * v5);
      v10 = *v9;
      v11 = v9[1];
      while (v10 != v11)
      {
        if (*(_QWORD *)(v10 + 40))
          v12 = *(_QWORD *)(v10 + 48) == 0;
        else
          v12 = 1;
        if (!v12)
          goto LABEL_13;
        v10 += 64;
      }
      ++v5;
    }
    while (v5 != v7);
    LODWORD(v5) = v7;
  }
LABEL_24:
  v18 = v5;
  v19 = v3[9];
  v20 = *(_DWORD *)(v19 + 152 * v5 + 84);
  if (v20 == 1)
  {
    v67 = 0;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    if (sub_236875464((uint64_t)&v55, *(_DWORD *)(v19 + 152 * v5 + 64), *(_DWORD *)(v19 + 152 * v5 + 76)))
    {
      v21 = (unsigned __int8 *)v2[3];
      do
        __ldaxr(v21);
      while (__stlxr(1u, v21));
    }
    else
    {
      v29 = v3[9] + 152 * v5;
      if (sub_2368759C4((uint64_t)&v55, v29 + 24, *(_DWORD *)(v29 + 76)))
      {
        v30 = (unsigned __int8 *)v2[3];
        do
          __ldaxr(v30);
        while (__stlxr(1u, v30));
      }
      else
      {
        v45 = a2;
        v46 = v2;
        memset(v54, 0, sizeof(v54));
        memset(v53, 0, sizeof(v53));
        memset(v52, 0, sizeof(v52));
        memset(__p, 0, sizeof(__p));
        if (v5 >= v7)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 152 * v5;
          v33 = 88 * v5;
          v34 = v5;
          do
          {
            v35 = (uint64_t *)(v3[6] + v33);
            v37 = *v35;
            v36 = v35[1];
            sub_236877434(v35, v3[9] + v32, v34, (uint64_t)v52, (uint64_t)__p, (uint64_t)v54, (uint64_t)v53);
            if (v31 <= ((unint64_t)(v36 - v37) >> 6))
              v31 = (unint64_t)(v36 - v37) >> 6;
            ++v34;
            v32 += 152;
            v33 += 88;
          }
          while (v7 != v34);
        }
        LODWORD(v49) = 0;
        HIDWORD(v49) = v31;
        v50 = __PAIR64__(v7, v5);
        sub_236876154((uint64_t)&v55, &v49, (_DWORD *)*v46[4], (_DWORD *)v46[4][1], (char **)v52, (char **)__p, (int **)v54, (int **)v53, *(_QWORD *)(v3[9] + 152 * v5 + 56));
        if (v5 >= v7)
        {
          v41 = 0;
        }
        else
        {
          v38 = 152 * v5;
          v39 = 88 * v5;
          v40 = v18;
          do
          {
            sub_236874FCC((uint64_t *)(v3[6] + v39), (__int128 *)(v3[9] + v38), 0, 0, 0, v40++, &v55, &v68, 0, 0, 0, 0);
            v38 += 152;
            v39 += 88;
          }
          while (v7 != v40);
          v41 = v68;
        }
        sub_23687004C((char **)&v47, &v55, v41, v3[9] + 152 * v18, v46[4], v49, v50);
        v42 = *v46[2];
        v43 = v42 + 24 * v45;
        v44 = *(void **)v43;
        if (*(_QWORD *)v43)
        {
          *(_QWORD *)(v42 + 24 * v45 + 8) = v44;
          operator delete(v44);
          *(_QWORD *)v43 = 0;
          *(_QWORD *)(v43 + 8) = 0;
          *(_QWORD *)(v43 + 16) = 0;
        }
        *(_OWORD *)v43 = v47;
        *(_QWORD *)(v42 + 24 * v45 + 16) = v48;
        if (__p[0])
          operator delete(__p[0]);
        if (v52[0])
          operator delete(v52[0]);
        if (v53[0])
          operator delete(v53[0]);
        if (v54[0])
          operator delete(v54[0]);
      }
    }
    sub_236850294((char **)&v55);
  }
  else
  {
    if (v5 >= v7)
    {
      v22 = 0;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = (uint64_t *)(v3[6] + 88 * v18);
        v24 = *v23;
        v25 = v23[1];
        while (v24 != v25)
        {
          v22 += *(_QWORD *)(v24 + 48) * *(_QWORD *)(v24 + 40);
          v24 += 64;
        }
        ++v18;
      }
      while (v18 != v7);
    }
    sub_23686D4F8((unint64_t *)&v55, v20, v22);
    v26 = *v2[2];
    v27 = v26 + 24 * a2;
    v28 = *(void **)v27;
    if (*(_QWORD *)v27)
    {
      *(_QWORD *)(v26 + 24 * a2 + 8) = v28;
      operator delete(v28);
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 16) = 0;
    }
    *(_OWORD *)v27 = v55;
    *(_QWORD *)(v26 + 24 * a2 + 16) = v56;
  }
}

void sub_236850214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char *a35)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  sub_236850294(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_236850270(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

char **sub_236850294(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void **v13;

  v2 = a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v13 = (void **)(a1 + 18);
  sub_2367D17E4(&v13);
  v3 = a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v13 = (void **)(a1 + 9);
  sub_2367D17E4(&v13);
  v13 = (void **)(a1 + 6);
  sub_2367D17E4(&v13);
  v5 = a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  v6 = *a1;
  if (*a1)
  {
    v7 = a1[1];
    v8 = *a1;
    if (v7 != v6)
    {
      v9 = a1[1];
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 3);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *((_QWORD *)v7 - 2) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_236850378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  char v35;

  v2 = 0;
LABEL_2:
  v3 = 0;
  v4 = 0;
  v5 = a2 + 8 * v2;
  v6 = a1 + 8 * v2;
  do
  {
    v7 = *(_DWORD *)(v6 + 4 * v4);
    v8 = *(_DWORD *)(v5 + 4 * v4);
    if (v7 < v8)
      return 1;
    v9 = v8 >= v7;
    v10 = v3 ^ 1;
    v3 = 1;
    v11 = v9 & v10;
    v4 = 1;
  }
  while ((v11 & 1) != 0);
  v12 = 0;
  v13 = 0;
  while (1)
  {
    v14 = *(_DWORD *)(v5 + 4 * v13);
    v15 = *(_DWORD *)(v6 + 4 * v13);
    if (v14 < v15)
      break;
    v16 = v15 >= v14;
    v17 = v12 ^ 1;
    v12 = 1;
    v18 = v16 & v17;
    v13 = 1;
    if ((v18 & 1) == 0)
    {
      if (++v2 != 2)
        goto LABEL_2;
      break;
    }
  }
  v19 = 0;
LABEL_10:
  v20 = 0;
  v21 = 0;
  v22 = a1 + 8 * v19;
  v23 = a2 + 8 * v19;
  do
  {
    v24 = *(_DWORD *)(v23 + 4 * v21);
    v25 = *(_DWORD *)(v22 + 4 * v21);
    if (v24 < v25)
      return 0;
    v26 = v25 >= v24;
    v27 = v20 ^ 1;
    v20 = 1;
    v28 = v26 & v27;
    v21 = 1;
  }
  while ((v28 & 1) != 0);
  v29 = 0;
  v30 = 0;
  while (1)
  {
    v31 = *(_DWORD *)(v22 + 4 * v30);
    v32 = *(_DWORD *)(v23 + 4 * v30);
    if (v31 < v32)
      return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
    v33 = v32 >= v31;
    v34 = v29 ^ 1;
    v29 = 1;
    v35 = v33 & v34;
    v30 = 1;
    if ((v35 & 1) == 0)
    {
      if (++v19 != 2)
        goto LABEL_10;
      return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
    }
  }
}

uint64_t sub_23685049C(__int128 *a1, __int128 *a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;

  v30 = *a2;
  v6 = *((_DWORD *)a2 + 4);
  v28 = *a1;
  v7 = *((_DWORD *)a1 + 4);
  v31 = v6;
  v29 = v7;
  if ((sub_236850378((uint64_t)&v30, (uint64_t)&v28) & 1) != 0)
  {
    v30 = *a3;
    v8 = *((_DWORD *)a3 + 4);
    v28 = *a2;
    v31 = v8;
    v29 = v6;
    result = sub_236850378((uint64_t)&v30, (uint64_t)&v28);
    if ((_DWORD)result)
    {
      v10 = *((_DWORD *)a1 + 4);
      v11 = *a1;
      v12 = *((_DWORD *)a3 + 4);
      *a1 = *a3;
      *((_DWORD *)a1 + 4) = v12;
    }
    else
    {
      v22 = *((_DWORD *)a1 + 4);
      v23 = *a1;
      v24 = *((_DWORD *)a2 + 4);
      *a1 = *a2;
      *((_DWORD *)a1 + 4) = v24;
      *a2 = v23;
      *((_DWORD *)a2 + 4) = v22;
      v30 = *a3;
      v25 = *((_DWORD *)a3 + 4);
      v28 = *a2;
      v26 = *((_DWORD *)a2 + 4);
      v31 = v25;
      v29 = v26;
      result = sub_236850378((uint64_t)&v30, (uint64_t)&v28);
      if (!(_DWORD)result)
        return result;
      v10 = *((_DWORD *)a2 + 4);
      v11 = *a2;
      v27 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v27;
    }
    *a3 = v11;
    *((_DWORD *)a3 + 4) = v10;
  }
  else
  {
    v30 = *a3;
    v13 = *((_DWORD *)a3 + 4);
    v28 = *a2;
    v31 = v13;
    v29 = v6;
    result = sub_236850378((uint64_t)&v30, (uint64_t)&v28);
    if ((_DWORD)result)
    {
      v14 = *((_DWORD *)a2 + 4);
      v15 = *a2;
      v16 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v16;
      *a3 = v15;
      *((_DWORD *)a3 + 4) = v14;
      v30 = *a2;
      v17 = *((_DWORD *)a2 + 4);
      v28 = *a1;
      v18 = *((_DWORD *)a1 + 4);
      v31 = v17;
      v29 = v18;
      result = sub_236850378((uint64_t)&v30, (uint64_t)&v28);
      if ((_DWORD)result)
      {
        v19 = *((_DWORD *)a1 + 4);
        v20 = *a1;
        v21 = *((_DWORD *)a2 + 4);
        *a1 = *a2;
        *((_DWORD *)a1 + 4) = v21;
        *a2 = v20;
        *((_DWORD *)a2 + 4) = v19;
      }
    }
  }
  return result;
}

__n128 sub_236850660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  __n128 result;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;

  sub_23685049C((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v25 = *(_OWORD *)a4;
  v8 = *(_DWORD *)(a4 + 16);
  v23 = *(_OWORD *)a3;
  v9 = *(_DWORD *)(a3 + 16);
  v26 = v8;
  v24 = v9;
  if (sub_236850378((uint64_t)&v25, (uint64_t)&v23))
  {
    v11 = *(_DWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_DWORD *)(a4 + 16) = v11;
    v25 = *(_OWORD *)a3;
    v14 = *(_DWORD *)(a3 + 16);
    v23 = *(_OWORD *)a2;
    v15 = *(_DWORD *)(a2 + 16);
    v26 = v14;
    v24 = v15;
    if (sub_236850378((uint64_t)&v25, (uint64_t)&v23))
    {
      v16 = *(_DWORD *)(a2 + 16);
      v17 = *(_OWORD *)a2;
      v18 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v18;
      *(_OWORD *)a3 = v17;
      *(_DWORD *)(a3 + 16) = v16;
      v25 = *(_OWORD *)a2;
      v19 = *(_DWORD *)(a2 + 16);
      v23 = *(_OWORD *)a1;
      v20 = *(_DWORD *)(a1 + 16);
      v26 = v19;
      v24 = v20;
      if (sub_236850378((uint64_t)&v25, (uint64_t)&v23))
      {
        v21 = *(_DWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v22 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v22;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 sub_23685078C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  __int32 v10;
  int v11;
  __n128 result;
  unsigned __int32 v13;
  __n128 v14;
  __int32 v15;
  int v16;
  int v17;
  int v18;
  __n128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __n128 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __n128 v30;
  int v31;
  __n128 v32;
  int v33;

  sub_236850660(a1, a2, a3, a4);
  v32 = *a5;
  v10 = a5[1].n128_i32[0];
  v30 = *(__n128 *)a4;
  v11 = *(_DWORD *)(a4 + 16);
  v33 = v10;
  v31 = v11;
  if (sub_236850378((uint64_t)&v32, (uint64_t)&v30))
  {
    v13 = *(_DWORD *)(a4 + 16);
    v14 = *(__n128 *)a4;
    v15 = a5[1].n128_i32[0];
    *(__n128 *)a4 = *a5;
    *(_DWORD *)(a4 + 16) = v15;
    *a5 = v14;
    a5[1].n128_u32[0] = v13;
    v32 = *(__n128 *)a4;
    v16 = *(_DWORD *)(a4 + 16);
    v30 = *(__n128 *)a3;
    v17 = *(_DWORD *)(a3 + 16);
    v33 = v16;
    v31 = v17;
    if (sub_236850378((uint64_t)&v32, (uint64_t)&v30))
    {
      v18 = *(_DWORD *)(a3 + 16);
      v19 = *(__n128 *)a3;
      v20 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v20;
      *(__n128 *)a4 = v19;
      *(_DWORD *)(a4 + 16) = v18;
      v32 = *(__n128 *)a3;
      v21 = *(_DWORD *)(a3 + 16);
      v30 = *(__n128 *)a2;
      v22 = *(_DWORD *)(a2 + 16);
      v33 = v21;
      v31 = v22;
      if (sub_236850378((uint64_t)&v32, (uint64_t)&v30))
      {
        v23 = *(_DWORD *)(a2 + 16);
        v24 = *(__n128 *)a2;
        v25 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v25;
        *(__n128 *)a3 = v24;
        *(_DWORD *)(a3 + 16) = v23;
        v32 = *(__n128 *)a2;
        v26 = *(_DWORD *)(a2 + 16);
        v30 = *(__n128 *)a1;
        v27 = *(_DWORD *)(a1 + 16);
        v33 = v26;
        v31 = v27;
        if (sub_236850378((uint64_t)&v32, (uint64_t)&v30))
        {
          v28 = *(_DWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v29 = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = v29;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v28;
        }
      }
    }
  }
  return result;
}

BOOL sub_236850914(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v24 = *(_OWORD *)(a2 - 20);
      v6 = *(_DWORD *)(a2 - 4);
      v22 = *(_OWORD *)a1;
      v7 = *(_DWORD *)(a1 + 16);
      v25 = v6;
      v23 = v7;
      if (sub_236850378((uint64_t)&v24, (uint64_t)&v22))
      {
        v8 = a2 - 20;
        v9 = *(_DWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_DWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_23685049C((__int128 *)a1, (__int128 *)(a1 + 20), (__int128 *)(a2 - 20));
      return 1;
    case 4uLL:
      sub_236850660(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      sub_23685078C(a1, a1 + 20, a1 + 40, a1 + 60, (__n128 *)(a2 - 20));
      return 1;
    default:
      v12 = a1 + 40;
      sub_23685049C((__int128 *)a1, (__int128 *)(a1 + 20), (__int128 *)(a1 + 40));
      v13 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_DWORD *)(v13 + 16);
    v28 = *(_OWORD *)v12;
    v17 = *(_DWORD *)(v12 + 16);
    v24 = *(_OWORD *)v13;
    v25 = v16;
    v22 = v28;
    v23 = v17;
    if (sub_236850378((uint64_t)&v24, (uint64_t)&v22))
    {
      v27 = *(_OWORD *)v13;
      v18 = v14;
      while (1)
      {
        v19 = a1 + v18;
        *(_OWORD *)(v19 + 60) = *(_OWORD *)(a1 + v18 + 40);
        *(_DWORD *)(v19 + 76) = *(_DWORD *)(a1 + v18 + 56);
        if (v18 == -40)
          break;
        v26 = *(_OWORD *)(v19 + 20);
        v20 = *(_DWORD *)(v19 + 36);
        v24 = v27;
        v25 = v16;
        v22 = v26;
        v23 = v20;
        v18 -= 20;
        if ((sub_236850378((uint64_t)&v24, (uint64_t)&v22) & 1) == 0)
        {
          v21 = a1 + v18 + 60;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(_OWORD *)v21 = v27;
      *(_DWORD *)(v21 + 16) = v16;
      if (++v15 == 8)
        return v13 + 20 == a2;
    }
    v12 = v13;
    v14 += 20;
    v13 += 20;
    if (v13 == a2)
      return 1;
  }
}

BOOL sub_236850B64(uint64_t a1, char **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int64x2_t v27;
  void (***v28)(_QWORD);
  void (***v29)(_QWORD);
  void (***v30)(_QWORD);
  void (**v31)(_QWORD);
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char **v36;
  uint64_t v38;
  char *v39;
  int64x2_t v40;
  char *v41;
  uint64_t v42;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 5);
  v8 = v4 - v7;
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      v28 = (void (***)(_QWORD))(v5
                                          + 0x745D1745D1745D20
                                          * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
      if ((void (***)(_QWORD))v6 != v28)
      {
        v29 = (void (***)(_QWORD))(v6 - 96);
        v30 = v29;
        do
        {
          v31 = *v30;
          v30 -= 12;
          (*v31)(v29);
          v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
      }
      *(_QWORD *)(a1 + 176) = v28;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v6) >> 5) >= v8)
    {
      v33 = v6 + 96 * v8;
      v34 = 0x745D1745D1745D20 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 32 * ((v6 - v5) >> 5);
      do
      {
        sub_2367FF658(v6);
        v6 += 96;
        v34 -= 96;
      }
      while (v34);
      *(_QWORD *)(a1 + 176) = v33;
    }
    else
    {
      if (v4 > 0x2AAAAAAAAAAAAAALL)
        sub_2367C3440();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 5);
      v11 = 2 * v10;
      if (2 * v10 <= v4)
        v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
      if (v10 >= 0x155555555555555)
        v12 = 0x2AAAAAAAAAAAAAALL;
      else
        v12 = v11;
      v42 = a1 + 184;
      if (v12 > 0x2AAAAAAAAAAAAAALL)
        sub_2367C3488();
      v13 = 3 * v12;
      v14 = (char *)operator new(96 * v12);
      v15 = 3 * v7;
      v16 = (uint64_t)&v14[96 * v7];
      v39 = v14;
      v40.i64[0] = v16;
      v40.i64[1] = v16;
      v41 = &v14[32 * v13];
      v17 = &v14[96 * v4];
      v18 = 96 * v4 - 32 * v15;
      do
      {
        sub_2367FF658(v16);
        v16 += 96;
        v18 -= 96;
      }
      while (v18);
      v40.i64[1] = (uint64_t)v17;
      v20 = *(_QWORD *)(a1 + 168);
      v19 = *(_QWORD *)(a1 + 176);
      v21 = v40.i64[0];
      if (v19 == v20)
      {
        v27 = vdupq_n_s64(v19);
      }
      else
      {
        v22 = 0;
        do
        {
          v23 = v21 + v22;
          *(_QWORD *)(v23 - 96) = &off_2507FF4D8;
          v24 = v19 + v22;
          *(_BYTE *)(v23 - 88) = *(_BYTE *)(v19 + v22 - 88);
          *(_QWORD *)(v23 - 80) = &off_250800498;
          v25 = *(_OWORD *)(v19 + v22 - 72);
          v26 = *(_OWORD *)(v19 + v22 - 56);
          *(_OWORD *)(v23 - 40) = *(_OWORD *)(v19 + v22 - 40);
          *(_OWORD *)(v23 - 56) = v26;
          *(_OWORD *)(v23 - 72) = v25;
          *(_QWORD *)(v23 - 16) = 0;
          *(_QWORD *)(v23 - 8) = 0;
          *(_QWORD *)(v23 - 24) = 0;
          *(_OWORD *)(v23 - 24) = *(_OWORD *)(v19 + v22 - 24);
          *(_QWORD *)(v23 - 8) = *(_QWORD *)(v19 + v22 - 8);
          *(_QWORD *)(v24 - 24) = 0;
          *(_QWORD *)(v24 - 16) = 0;
          *(_QWORD *)(v24 - 8) = 0;
          v22 -= 96;
        }
        while (v19 + v22 != v20);
        v21 += v22;
        v27 = *(int64x2_t *)(a1 + 168);
        v17 = (char *)v40.i64[1];
      }
      *(_QWORD *)(a1 + 168) = v21;
      *(_QWORD *)(a1 + 176) = v17;
      v40 = v27;
      v35 = *(char **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v41;
      v41 = v35;
      v39 = (char *)v27.i64[0];
      sub_2367F76C0((uint64_t)&v39);
    }
  }
  sub_23681D030(a1 + 192, v4);
  sub_2367D7BB0((char **)(a1 + 1200), v4);
  v38 = a1;
  if (a2)
  {
    v36 = a2;
  }
  else
  {
    v39 = 0;
    v40.i64[0] = (uint64_t)&v39;
    v36 = &v39;
  }
  return sub_236850E24((uint64_t)v36, v4, (uint64_t)&v38);
}

void sub_236850E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 176) = v13;
  _Unwind_Resume(exception_object);
}

BOOL sub_236850E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236850F60, sub_236850EB8, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_236850EB8((uint64_t)v6, i);
  return 0;
}

uint64_t sub_236850EB8(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[704];

  v3 = **(_QWORD ***)(a1 + 8);
  bzero(v6, 0x2BCuLL);
  v4 = v3[24] + 24 * a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)v4;
  return sub_236874FCC((uint64_t *)(v3[6] + 88 * a2), (__int128 *)(v3[9] + 152 * a2), 0, (uint64_t)v6, 0, a2, 0, 0, v3 + 15, v3[21] + 96 * a2, (void **)v4, (unint64_t *)(v3[150] + 8 * a2));
}

uint64_t sub_236850F60(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_236850F84(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;

  v9 = sub_2367E29EC(a5, a1[60], a1[61]);
  v10 = (uint64_t *)(a1[6] + 88 * v9);
  if (*v10 != v10[1])
  {
    if (a1[24] == a1[25])
    {
      result = sub_236874FCC(v10, (__int128 *)(a1[9] + 152 * v9), a2, a3, a4, v9, 0, 0, 0, 0, 0, 0);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = sub_2368ACEB0(a1[21] + 96 * v9, a2, a4, a3);
      if ((_DWORD)result)
        return result;
      sub_23681FA78(a1[24] + 24 * v9, (uint64_t)(a1 + 27), a1 + 43, 0, a2, a4, a3);
    }
  }
  return 0;
}

void sub_23685107C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[4];
  int v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  void **v18;

  v3 = sub_2367E29EC(a2, a1[60], a1[61]);
  memset(v7, 0, sizeof(v7));
  v8 = 8;
  v9 = 0;
  v10 = 1;
  v4 = a1[6] + 88 * v3;
  v11 = *(_OWORD *)v4;
  v12 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  v13 = *(_OWORD *)(v4 + 24);
  v14 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v5 = *(_OWORD *)(v4 + 48);
  v6 = *(_OWORD *)(v4 + 64);
  v17 = *(_BYTE *)(v4 + 80);
  v15 = v5;
  v16 = v6;
  sub_23680046C(v4, (uint64_t)v7);
  sub_23680046C((uint64_t)v7, (uint64_t)&v11);
  v18 = (void **)&v13;
  sub_2367D6C98(&v18);
  v18 = (void **)&v11;
  sub_2367D6D24(&v18);
  *(_QWORD *)&v11 = (char *)&v7[1] + 8;
  sub_2367D6C98((void ***)&v11);
  *(_QWORD *)&v11 = v7;
  sub_2367D6D24((void ***)&v11);
}

void sub_236851178(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[154];
  v3 = a1[155];
  if (v2 != v3)
  {
    do
    {
      sub_23685107C(a1, v2 + 40);
      v2 += 72;
    }
    while (v2 != v3);
    v2 = a1[154];
  }
  a1[155] = v2;
}

uint64_t sub_2368511CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, float a7, float a8)
{
  float v8;
  float v9;
  int v11;
  float v12;
  _BYTE v14[8];
  uint64_t v15;

  v8 = a7 * a8;
  sub_23685126C((uint64_t)v14, a5, a1 + 4 * a3, a2, a3, a4, 6, a6);
  v9 = v8 - (float)v15;
  if (v9 < 0.62 && v9 > -0.62)
    v9 = 0.0;
  v11 = llroundf(v9);
  v12 = roundf(v9 * 0.5);
  if ((v11 - 3) < 0xFFFFFFFB)
    v11 = (int)(float)(v12 + v12);
  return (v11 + v15);
}

uint64_t sub_23685126C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, signed int a5, unsigned int a6, int a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t i;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint32x4_t v58;
  int32x4_t v59;

  v8 = a5;
  if (!a5)
  {
    if (!a6)
    {
      v16 = 0;
      v14 = 0;
      v12 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v15 = 0;
      v18 = 0;
      goto LABEL_20;
    }
    v9 = *(_DWORD *)(a3 - 4 * a4);
    v12 = v9;
    v10 = v9;
    v11 = v9;
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a3 - 4);
  v10 = v9;
  if (a6)
  {
    v11 = *(int *)(a3 + 4 * ~a4);
    v12 = *(int *)(a3 - 4 * a4);
LABEL_6:
    v13 = 1;
    if (a5 + 1 >= a2)
      v14 = v12;
    else
      v14 = *(int *)(a3 + 4 * (1 - a4));
    goto LABEL_10;
  }
  v13 = 0;
  v11 = v9;
  v12 = v9;
  v14 = v9;
LABEL_10:
  v15 = v10;
  if (a5 >= 2)
    v15 = *(int *)(a3 - 8);
  v16 = v12;
  if (a6 >= 2)
    v16 = *(int *)(a3 - 8 * a4);
  v17 = v13 ^ 1;
  if (a5 + 2 >= a2)
    v17 = 1;
  if ((v17 & 1) != 0)
    v18 = v14;
  else
    v18 = *(int *)(a3 + 4 * (2 - a4));
LABEL_20:
  v19 = 0;
  v20 = a2 + 2;
  if ((a6 & 1) != 0)
    v21 = a2 + 2;
  else
    v21 = 0;
  v22 = v21 + a5;
  if (a2 - 1 <= a5)
    v23 = v21 + a5;
  else
    v23 = v22 + 1;
  if (a5)
    v24 = v22 - 1;
  else
    v24 = v21;
  for (i = 40; i != 136; i += 24)
  {
    v26 = (*(_DWORD *)(*(_QWORD *)(a8 + i) + 4 * v23)
                       + *(_DWORD *)(*(_QWORD *)(a8 + i) + 4 * v22)
                       + *(_DWORD *)(*(_QWORD *)(a8 + i) + 4 * v24));
    v27 = __clz(v26 + 1) ^ 0x3F;
    if (v27 <= 5)
      LOBYTE(v27) = 5;
    v58.i32[v19] = ((*(_DWORD *)(a8 + 4 * (v26 >> (v27 - 5)) + 216)
                                 * *(_DWORD *)(a8 + v19 * 4 + 200)) >> (v27 - 5))
                 + 4;
    ++v19;
  }
  v28 = 8 * v12;
  v29 = 8 * v10;
  v30 = 8 * v14;
  if (a5)
  {
    if ((a6 & 1) != 0)
      v31 = 0;
    else
      v31 = v20;
    v32 = *(_QWORD *)(a8 + 136);
    v33 = *(int *)(v32 + 4 * (v8 + v31) - 4);
  }
  else
  {
    v33 = 0;
    v32 = *(_QWORD *)(a8 + 136);
  }
  v34 = 0;
  v35 = *(int *)(v32 + 4 * v22);
  v36 = *(int *)(v32 + 4 * v24);
  v37 = *(int *)(v32 + 4 * v23);
  v38 = *(int *)(a8 + 176);
  v39 = v28 - (((v33 + v35 + v37) * *(int *)(a8 + 172)) >> 5);
  *(_QWORD *)a8 = v30 - v28 + v29;
  *(_QWORD *)(a8 + 8) = v39;
  v40 = v28
      - ((*(int *)(a8 + 180) * (uint64_t)(int)v36
        + *(int *)(a8 + 184) * (uint64_t)(int)v35
        + *(int *)(a8 + 188) * (uint64_t)(int)v37
        + 8 * ((v16 - v12) * *(int *)(a8 + 192) + (v11 - v10) * *(int *)(a8 + 196))) >> 5);
  *(_QWORD *)(a8 + 16) = v29 - (((v33 + v35 + v36) * v38) >> 5);
  *(_QWORD *)(a8 + 24) = v40;
  v59 = (int32x4_t)vshlq_u32(v58, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v58)) ^ 0x1F) - 4)));
  v41 = vaddvq_s32(v59);
  v42 = (v41 >> 1) - 1;
  do
  {
    v42 += *(_QWORD *)(a8 + 8 * v34) * v59.u32[v34];
    ++v34;
  }
  while (v34 != 4);
  v43 = v36 ^ v35 | v33 ^ v35;
  if (v30 <= v28)
    v44 = 8 * v12;
  else
    v44 = 8 * v14;
  if (v29 > v44)
    v44 = 8 * v10;
  if (v28 >= v30)
    v28 = 8 * v14;
  if (v28 < v29)
    v29 = v28;
  if ((v42 * *(unsigned int *)(a8 + 4 * (v41 - 1) + 216)) >> 24 >= v44)
    v45 = v44;
  else
    v45 = (v42 * *(unsigned int *)(a8 + 4 * (v41 - 1) + 216)) >> 24;
  if (v29 <= v45)
    v29 = v45;
  if (v43 <= 0)
    v46 = v29;
  else
    v46 = (v42 * *(unsigned int *)(a8 + 4 * (v41 - 1) + 216)) >> 24;
  *(_QWORD *)(a8 + 32) = v46;
  *(_DWORD *)result = 0;
  switch(a7)
  {
    case 1:
      break;
    case 2:
      v10 = v12;
      break;
    case 3:
      v47 = __OFADD__(v10, v12);
      v49 = v10 + v12;
      v48 = (v49 < 0) ^ v47;
      goto LABEL_87;
    case 4:
      v50 = v10 + v12 - v11;
      v51 = v12 - v11;
      if (v51 < 0)
        v51 = -v51;
      v52 = v50 - v12;
      if (v52 < 0)
        v52 = -v52;
      if (v51 >= (unint64_t)v52)
        v10 = v12;
      break;
    case 5:
      if (v9 >= (int)v12)
        LODWORD(v10) = v12;
      else
        LODWORD(v10) = v9;
      if (v9 <= (int)v12)
        v53 = v12;
      else
        v53 = v9;
      v54 = v9 + v12 - v11;
      if ((int)v10 > (int)v11)
        v54 = v53;
      if (v53 >= (int)v11)
        LODWORD(v10) = v54;
      v10 = (int)v10;
      break;
    case 6:
      v10 = (v46 + 3) >> 3;
      break;
    case 7:
      v10 = v14;
      break;
    case 8:
      v10 = v11;
      break;
    case 9:
      v10 = v15;
      break;
    case 10:
      v47 = __OFADD__(v11, v10);
      v49 = v11 + v10;
      v48 = (v49 < 0) ^ v47;
      goto LABEL_87;
    case 11:
      v49 = v11 + v12;
      v48 = (v11 + v12 < 0) ^ __OFADD__(v11, v12);
      goto LABEL_87;
    case 12:
      v49 = v12 + v14;
      v48 = (v12 + v14 < 0) ^ __OFADD__(v12, v14);
LABEL_87:
      if (v48)
        ++v49;
      v10 = v49 >> 1;
      break;
    case 13:
      v55 = 3 * v14 - 2 * v16 + 6 * (int)v12 - v10 + 8 * v10 + v15 + v18;
      v56 = v55 + 8;
      v57 = v55 + 23;
      if (v56 >= 0)
        v57 = v56;
      v10 = v57 >> 4;
      break;
    default:
      v10 = 0;
      break;
  }
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = a7;
  return result;
}

uint64_t sub_23685167C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v15;
  float v16;

  v6 = a1 + 4 * a3;
  if ((_DWORD)a3)
  {
    v7 = *(_DWORD *)(v6 - 4);
    if (a4)
    {
      v8 = *(_DWORD *)(v6 + 4 * ~a2);
      v9 = *(_DWORD *)(v6 - 4 * a2);
    }
    else
    {
      v9 = *(_DWORD *)(v6 - 4);
      v8 = v7;
    }
  }
  else if (a4)
  {
    v9 = *(_DWORD *)(v6 - 4 * a2);
    v7 = v9;
    v8 = v9;
  }
  else
  {
    v9 = 0;
    v7 = 0;
    v8 = 0;
  }
  if (v7 >= v9)
    v10 = v9;
  else
    v10 = v7;
  if (v7 <= v9)
    v11 = v9;
  else
    v11 = v7;
  v12 = v7 + v9 - v8;
  if (v10 > v8)
    v12 = v11;
  if (v11 < v8)
    v12 = v10;
  v13 = (float)(a5 * a6) - (float)v12;
  if (v13 < 0.62 && v13 > -0.62)
    v13 = 0.0;
  v15 = llroundf(v13);
  v16 = roundf(v13 * 0.5);
  if ((v15 - 3) < 0xFFFFFFFB)
    v15 = (int)(float)(v16 + v16);
  return (v15 + v12);
}

uint64_t sub_23685174C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6, uint64_t a7)
{
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  _BOOL8 v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float *v57;
  uint64_t k;
  int *v59;
  float *v60;
  _DWORD *v61;
  uint64_t v62;
  float v63;
  float v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  float v76;
  float v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t j;
  void *v109;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  float v121;
  float v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  _DWORD *v131;
  uint64_t m;
  float v133;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (**v158)();
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t (**v162)();
  _OWORD v163[3];
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  char v170;
  unsigned int v171;
  _BYTE v172[24];
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  char v177;
  _BYTE v178[24];
  void *__p;
  void *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;

  v183 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1[3] + a5) = a6;
  v10 = *(_BYTE *)(a1[3] + a5);
  *(_DWORD *)v172 = 1;
  *(_QWORD *)&v172[8] = 0;
  *(_QWORD *)&v172[16] = a5;
  *(_QWORD *)&v173 = 0;
  v11 = sub_2367E29EC((uint64_t)v172, a1[60], a1[61]);
  v12 = a1;
  v13 = a1[9];
  v14 = v13 + 152 * v11;
  *(_QWORD *)v14 = 0xFFFFFFLL;
  *(_DWORD *)(v14 + 64) = 6;
  v15 = (int *)(v14 + 64);
  *(_DWORD *)(v14 + 76) = 1;
  v16 = (_DWORD *)(v14 + 76);
  v17 = *((_DWORD *)v12 + 140);
  if (v17 <= 2)
  {
    if ((a6 & 1) != 0)
      goto LABEL_9;
    if (v17 >= 2)
      v19 = 14;
    else
      v19 = 15;
    *v15 = v19;
    *v16 = 3;
    v18 = 1;
  }
  else
  {
    v18 = 5;
  }
  *(_DWORD *)(v13 + 152 * v11 + 84) = v18;
LABEL_9:
  v137 = v12;
  if (v12[71])
    *(_DWORD *)(v13 + 152 * v11 + 84) = 6;
  *(_OWORD *)(v13 + 152 * v11 + 88) = *(_OWORD *)(v13 + 88);
  v135 = v11;
  if (v11)
  {
    sub_23683D1CC((char *)(v13 + 104 + 152 * v11), *(char **)(v13 + 104), *(_QWORD *)(v13 + 112), (uint64_t)(*(_QWORD *)(v13 + 112) - *(_QWORD *)(v13 + 104)) >> 3);
    v11 = v135;
  }
  v20 = v13 + 152 * v11;
  v21 = *(_QWORD *)(v13 + 128);
  *(_QWORD *)(v20 + 133) = *(_QWORD *)(v13 + 133);
  *(_QWORD *)(v20 + 128) = v21;
  sub_2368001CC((uint64_t)&v164, a4[2], a4[3], 8, 3);
  v22 = v171;
  if (!v171)
  {
    v23 = (float)(1 << v10);
    *(_OWORD *)v172 = v164;
    v164 = 0uLL;
    v173 = v166;
    *(_QWORD *)&v172[16] = v165;
    v174 = v167;
    v165 = 0;
    v166 = 0uLL;
    v167 = 0;
    v175 = v168;
    v176 = v169;
    v24 = v137[6] + 88 * v135;
    v177 = v170;
    sub_23680046C(v24, (uint64_t)v172);
    v162 = (uint64_t (**)())&v173;
    sub_2367D6C98((void ***)&v162);
    v162 = (uint64_t (**)())v172;
    sub_2367D6D24((void ***)&v162);
    v140 = a4;
    if (a6)
    {
      if (*(_DWORD *)(v137[9] + 152 * v135 + 84) == 6)
      {
        v149 = 0;
        *(_QWORD *)v172 = 1;
        *(_DWORD *)&v172[8] = 2;
        v25 = *(float *)(a7 + 996);
        v26 = (float)(*(float *)(a7 + 1000) * *(float *)(*(_QWORD *)(a7 + 1016) + 52)) / v23;
        v147 = *(_QWORD *)(a7 + 1016);
        v157 = a4[3];
        v153 = *(_QWORD *)(a3 + 16);
        v144 = a4[1] * v153 + 4 * *a4;
        do
        {
          if (v157)
          {
            v27 = 0;
            v28 = *(int *)&v172[4 * v149];
            v29 = (float)(*(float *)(v147 + 4 * v28 + 60) * (float)(v25 * (float)*(int *)(a7 + 988))) * v23;
            v151 = *(_QWORD *)(v137[6] + 88 * v135);
            v30 = v151 + (((v28 < 2) ^ v28) << 6);
            v31 = *(_QWORD *)(v30 + 16);
            v32 = *(_QWORD *)(v30 + 24);
            v155 = *(_DWORD *)&v172[4 * v149];
            v33 = a4[2];
            v34 = *(float *)(a7 + 1184 + 4 * v28) * v26;
            v35 = *(_QWORD *)(a3 + 40 * (int)v28 + 24) + v144;
            v36 = v32;
            do
            {
              if (v155 == 1)
              {
                if (v33)
                {
                  for (i = 0; i != v33; ++i)
                    *(_DWORD *)(v32 + 4 * i) = sub_23685167C(v36 + v31 * v27, v31 >> 2, i, v27, *(float *)(v35 + 4 * i), v29);
                }
              }
              else if (v33)
              {
                v38 = 0;
                v39 = *(_QWORD *)(v151 + 24) + *(_QWORD *)(v151 + 16) * v27;
                do
                {
                  *(_DWORD *)(v32 + 4 * v38) = sub_23685167C(v36 + v31 * v27, v31 >> 2, v38, v27, *(float *)(v35 + 4 * v38)- (float)((float)*(int *)(v39 + 4 * v38) * v34), v29);
                  ++v38;
                }
                while (v33 != v38);
              }
              ++v27;
              v32 += v31;
              v35 += v153;
            }
            while (v27 != v157);
          }
          ++v149;
        }
        while (v149 != 3);
      }
      else
      {
        v66 = 0;
        v181 = 1;
        v182 = 2;
        do
        {
          v67 = *((int *)&v181 + v66);
          v68 = *(_QWORD *)(a7 + 1016);
          v69 = *(float *)(v68 + 4 * v67 + 60);
          v70 = *(float *)(a7 + 996);
          v71 = *(_DWORD *)(a7 + 988);
          v72 = *(float *)(a7 + 1000);
          v73 = *(float *)(v68 + 52);
          v152 = v67;
          v74 = *(float *)(a7 + 1184 + 4 * v67);
          v162 = &off_250800498;
          *(_OWORD *)((char *)v163 + 4) = 0u;
          *(_OWORD *)((char *)&v163[1] + 4) = 0u;
          v163[2] = 0u;
          *(_OWORD *)&v172[8] = xmmword_2368AF3F0;
          *(_QWORD *)v172 = &off_2507FF550;
          *(_QWORD *)&v173 = 0;
          sub_2367FF42C(&v162, (uint64_t)v172);
          v136 = v66;
          v158 = &off_250800498;
          v159 = v163[0];
          v160 = v163[1];
          v161 = v163[2];
          sub_2367FE7B0((uint64_t)v172, (uint64_t)&v158, a4[2]);
          v150 = a4[3];
          if (v150)
          {
            v75 = 0;
            v76 = (float)(v69 * (float)(v70 * (float)v71)) * v23;
            v148 = (v152 < 2) ^ v152;
            v77 = v74 * (float)((float)(v72 * v73) / v23);
            v146 = v137[6] + 88 * v135;
            v143 = *(_QWORD *)(a3 + 40 * (int)v152 + 24);
            v145 = *(_QWORD *)(a3 + 16);
            v141 = *v140;
            v142 = v140[1];
            v154 = v140[2];
            do
            {
              v78 = *(_QWORD *)(*(_QWORD *)v146 + (v148 << 6) + 16);
              v79 = *(_QWORD *)(*(_QWORD *)v146 + (v148 << 6) + 24) + v78 * v75;
              v80 = v78 >> 2;
              v81 = v143 + v145 * (v142 + v75) + 4 * v141;
              if ((_DWORD)v152 == 1)
              {
                if (v154)
                {
                  v82 = 0;
                  v83 = v140[2];
                  if ((v75 & 1) != 0)
                    v84 = 0;
                  else
                    v84 = v83 + 2;
                  if (v83 <= 1)
                    v85 = 1;
                  else
                    v85 = v140[2];
                  v86 = v154;
                  do
                  {
                    v87 = sub_2368511CC(v79, v80, v82, v75, v86, (uint64_t)v172, *(float *)(v81 + 4 * v82), v76);
                    v88 = 0;
                    *(_DWORD *)(v79 + 4 * v82) = v87;
                    v89 = 8 * v87;
                    v90 = v84 + v82;
                    *((_DWORD *)__p + v84 + v82++) = DWORD2(v173) - v89;
                    v91 = &v174;
                    do
                    {
                      v92 = *(_QWORD *)&v172[v88] - v89;
                      if (v92 < 0)
                        v92 = v89 - *(_QWORD *)&v172[v88];
                      v93 = (unint64_t)(v92 + 3) >> 3;
                      v94 = *v91;
                      v91 += 3;
                      *(_DWORD *)(v94 + 4 * v90) = v93;
                      *(_DWORD *)(v94 + 4 * (v82 + ((v75 << 63 >> 63) & (v83 + 2)))) += v93;
                      v88 += 8;
                    }
                    while (v88 != 32);
                    v86 = v83;
                  }
                  while (v82 != v85);
                }
              }
              else if (v154)
              {
                v95 = 0;
                v156 = *(_QWORD *)(*(_QWORD *)v146 + 24) + *(_QWORD *)(*(_QWORD *)v146 + 16) * v75;
                v96 = v140[2];
                if ((v75 & 1) != 0)
                  v97 = 0;
                else
                  v97 = v96 + 2;
                if (v96 <= 1)
                  v98 = 1;
                else
                  v98 = v140[2];
                v99 = v154;
                do
                {
                  v100 = sub_2368511CC(v79, v80, v95, v75, v99, (uint64_t)v172, *(float *)(v81 + 4 * v95) - (float)((float)*(int *)(v156 + 4 * v95) * v77), v76);
                  v101 = 0;
                  *(_DWORD *)(v79 + 4 * v95) = v100;
                  v102 = 8 * v100;
                  v103 = v97 + v95;
                  *((_DWORD *)__p + v97 + v95++) = DWORD2(v173) - v102;
                  v104 = &v174;
                  do
                  {
                    v105 = *(_QWORD *)&v172[v101] - v102;
                    if (v105 < 0)
                      v105 = v102 - *(_QWORD *)&v172[v101];
                    v106 = (unint64_t)(v105 + 3) >> 3;
                    v107 = *v104;
                    v104 += 3;
                    *(_DWORD *)(v107 + 4 * v103) = v106;
                    *(_DWORD *)(v107 + 4 * (v95 + ((v75 << 63 >> 63) & (v96 + 2)))) += v106;
                    v101 += 8;
                  }
                  while (v101 != 32);
                  v99 = v96;
                }
                while (v95 != v98);
              }
              ++v75;
            }
            while (v75 != v150);
          }
          if (__p)
          {
            v180 = __p;
            operator delete(__p);
          }
          for (j = 0; j != -96; j -= 24)
          {
            v109 = *(void **)&v178[j];
            if (v109)
            {
              *(_QWORD *)&v178[j + 8] = v109;
              operator delete(v109);
            }
          }
          v66 = v136 + 1;
          a4 = v140;
        }
        while (v136 != 2);
      }
      v47 = v137;
LABEL_85:
      sub_2367CB594(a4, (_QWORD *)(a7 + 1632), a7 + 1592, v47[6] + 88 * v135, (float *)(a7 + 952), (float *)(a7 + 1184), a2 + 40, (int **)(a7 + 1760), 1.0 / v23);
      v22 = 0;
      goto LABEL_86;
    }
    if (sub_2367CB2F4(a2 + 40))
    {
      v40 = 0;
      *(_QWORD *)v172 = 1;
      *(_DWORD *)&v172[8] = 2;
      v41 = *(_QWORD *)(a7 + 1016);
      v42 = *(float *)(a7 + 996);
      v43 = (float)(*(float *)(a7 + 1000) * *(float *)(v41 + 52)) / v23;
      v44 = a4[3];
      v45 = *(_QWORD *)(a3 + 16);
      v46 = a4[1] * v45 + 4 * *a4;
      v47 = v137;
      do
      {
        if (v44)
        {
          v48 = 0;
          v49 = *(int *)&v172[4 * v40];
          v50 = (float)(*(float *)(v41 + 4 * v49 + 60) * (float)(v42 * (float)*(int *)(a7 + 988))) * v23;
          v51 = v49 < 2;
          v52 = *(_QWORD *)(v137[6] + 88 * v135);
          v54 = *(_QWORD *)(v52 + ((v51 ^ v49) << 6) + 16);
          v53 = *(_DWORD **)(v52 + ((v51 ^ v49) << 6) + 24);
          v55 = a4[2];
          v56 = *(float *)(a7 + 1184 + 4 * v49) * v43;
          v57 = (float *)(*(_QWORD *)(a3 + 40 * (int)v49 + 24) + v46);
          do
          {
            if ((_DWORD)v49 == 1)
            {
              if (v55)
              {
                for (k = 0; k != v55; ++k)
                  v53[k] = llroundf(v50 * v57[k]);
              }
            }
            else if (v55)
            {
              v59 = (int *)(*(_QWORD *)(v52 + 24) + *(_QWORD *)(v52 + 16) * v48);
              v60 = v57;
              v61 = v53;
              v62 = v55;
              do
              {
                v63 = *v60++;
                v64 = v63;
                v65 = *v59++;
                *v61++ = llroundf(v50 * (float)(v64 - (float)((float)v65 * v56)));
                --v62;
              }
              while (v62);
            }
            ++v48;
            v53 = (_DWORD *)((char *)v53 + v54);
            v57 = (float *)((char *)v57 + v45);
          }
          while (v48 != v44);
        }
        ++v40;
      }
      while (v40 != 3);
      goto LABEL_85;
    }
    v111 = 0;
    *(_QWORD *)v172 = 1;
    *(_DWORD *)&v172[8] = 2;
    v47 = v137;
    while (1)
    {
      v112 = *(int *)&v172[4 * v111];
      v113 = *(unsigned int *)(a2 + 4 * v112 + 48);
      v114 = *(_BYTE *)(a2 + 60) - byte_236923AD4[v113];
      v116 = *a4;
      v115 = a4[1];
      v117 = *(_BYTE *)(a2 + 61) - byte_236923AD8[v113];
      v118 = a4[3];
      v119 = a4[2] >> v114;
      v120 = v118 >> v117;
      v121 = *(float *)(*(_QWORD *)(a7 + 1016) + 4 * v112 + 60);
      v122 = *(float *)(a7 + 996);
      v123 = *(_DWORD *)(a7 + 988);
      v124 = (_QWORD *)(*(_QWORD *)(v47[6] + 88 * v135) + (((v112 < 2) ^ v112) << 6));
      v124[5] = v119;
      v124[6] = v118 >> v117;
      v22 = sub_2367E28F4((uint64_t)v124);
      if ((_DWORD)v22)
        break;
      v47 = v137;
      if (v120)
      {
        v125 = 0;
        v126 = *(_QWORD *)(a3 + 16);
        v128 = v124[2];
        v127 = (_DWORD *)v124[3];
        v129 = *(_QWORD *)(a3 + 40 * (int)v112 + 24) + v126 * (v115 >> v117) + 4 * (v116 >> v114);
        do
        {
          v130 = (float *)v129;
          v131 = v127;
          for (m = v119; m; --m)
          {
            v133 = *v130++;
            *v131++ = llroundf((float)((float)(v121 * (float)(v122 * (float)v123)) * v23) * v133);
          }
          ++v125;
          v127 = (_DWORD *)((char *)v127 + v128);
          v129 += v126;
        }
        while (v125 != v120);
      }
      ++v111;
      a4 = v140;
      if (v111 == 3)
        goto LABEL_85;
    }
  }
LABEL_86:
  sub_2367E2C48((uint64_t)&v164);
  return v22;
}

void sub_236852258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_23685227C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64x2_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  _DWORD *v67;
  unsigned __int8 *v68;
  _DWORD *v69;
  uint64_t i;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64x2_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[24];
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  char v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  char v90;
  unsigned int v91;

  LODWORD(v84) = 3;
  *((_QWORD *)&v84 + 1) = 0;
  v85 = a3;
  *(_QWORD *)&v86 = 0;
  v10 = sub_2367E29EC((uint64_t)&v84, *(_QWORD *)(a1 + 480), *(_QWORD *)(a1 + 488));
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 72);
  v13 = v12 + 152 * v10;
  *(_QWORD *)v13 = 0xFFFFFFLL;
  if (*(_DWORD *)(v13 + 64) != 6)
    *(_DWORD *)(v12 + 152 * v10 + 76) = 2;
  if ((a4 & 1) == 0)
  {
    v14 = *(_DWORD *)(a1 + 560);
    if (v14 <= 6)
    {
      if (v14 <= 2)
        goto LABEL_10;
      v15 = 4;
    }
    else
    {
      v15 = 3;
    }
LABEL_12:
    *(_DWORD *)(v12 + 152 * v10 + 84) = v15;
    goto LABEL_13;
  }
  *(_DWORD *)(v12 + 152 * v10 + 84) = 2;
  if (*(int *)(a1 + 560) <= 2)
  {
LABEL_10:
    if (!*(_BYTE *)(a1 + 697))
      goto LABEL_13;
    v15 = 1;
    goto LABEL_12;
  }
LABEL_13:
  *(_OWORD *)(v12 + 152 * v10 + 88) = *(_OWORD *)(v12 + 88);
  if (v10)
    sub_23683D1CC((char *)(v12 + 104 + 152 * v10), *(char **)(v12 + 104), *(_QWORD *)(v12 + 112), (uint64_t)(*(_QWORD *)(v12 + 112) - *(_QWORD *)(v12 + 104)) >> 3);
  v16 = v12 + 152 * v11;
  v17 = *(_QWORD *)(v12 + 128);
  *(_QWORD *)(v16 + 133) = *(_QWORD *)(v12 + 133);
  *(_QWORD *)(v16 + 128) = v17;
  v18 = *(_QWORD *)(a1 + 48);
  sub_2368001CC((uint64_t)&v84, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 8, 4);
  v19 = v91;
  if (!v91)
  {
    v78 = v84;
    v20 = (uint64_t *)(v18 + 88 * v11);
    *(_QWORD *)v79 = v85;
    v84 = 0uLL;
    *(_OWORD *)&v79[8] = v86;
    v80 = v87;
    v85 = 0;
    v86 = 0uLL;
    v87 = 0;
    v81 = v88;
    v82 = v89;
    v83 = v90;
    sub_23680046C((uint64_t)v20, (uint64_t)&v78);
    *(_QWORD *)&v76 = &v79[8];
    sub_2367D6C98((void ***)&v76);
    *(_QWORD *)&v76 = &v78;
    sub_2367D6D24((void ***)&v76);
    v75 = *(uint64x2_t *)a2;
    v21 = vshrq_n_u64((uint64x2_t)vaddq_s64(*(int64x2_t *)(a2 + 16), vdupq_n_s64(7uLL)), 3uLL);
    v22 = v21.i64[1];
    v23 = v21.i64[0];
    sub_2367DA410((uint64_t)&v78, v21.u32[0], v21.u32[2]);
    v19 = v80;
    if (!(_DWORD)v80)
    {
      v24 = v78;
      v76 = v78;
      v25 = *(_OWORD *)v79;
      v77 = *(_QWORD *)v79;
      v26 = *(_QWORD *)&v79[16];
      v27 = (_QWORD *)*v20;
      v27[5] = v23;
      v27[6] = v22;
      v27[7] = 0x300000003;
      *(_OWORD *)v27 = v24;
      v28 = v27[3];
      *((_OWORD *)v27 + 1) = v25;
      if (v28)
      {
        v29 = -*(_QWORD *)(v28 - 24);
        do
          v30 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v30 + v29, &qword_2564313D8));
        free(*(void **)(v28 - 32));
      }
      v27[4] = v26;
      sub_2367DA410((uint64_t)&v78, v23, v22);
      v19 = v80;
      if (!(_DWORD)v80)
      {
        v31 = v78;
        v32 = *(_OWORD *)v79;
        v33 = *(_QWORD *)&v79[16];
        v34 = (_QWORD *)*v20;
        v34[13] = v23;
        v34[14] = v22;
        v34[15] = 0x300000003;
        *((_OWORD *)v34 + 4) = v31;
        v35 = v34[11];
        *((_OWORD *)v34 + 5) = v32;
        if (v35)
        {
          v36 = -*(_QWORD *)(v35 - 24);
          do
            v37 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v37 + v36, &qword_2564313D8));
          free(*(void **)(v35 - 32));
        }
        v34[12] = v33;
        v38 = *(_QWORD *)(a2 + 24) * *(_QWORD *)(a2 + 16);
        sub_2367DA410((uint64_t)&v78, *(_DWORD *)(a2 + 24) * *(_DWORD *)(a2 + 16), 2u);
        v19 = v80;
        if (!(_DWORD)v80)
        {
          v39 = v78;
          v40 = *(_OWORD *)v79;
          v41 = *(_QWORD *)&v79[16];
          v42 = (_QWORD *)*v20;
          v42[21] = v38;
          v42[22] = 2;
          v42[23] = 0;
          *((_OWORD *)v42 + 8) = v39;
          v42[18] = v40;
          sub_2367C5200(v42 + 19, *((uint64_t *)&v40 + 1));
          v42[20] = v41;
          v43 = *v20;
          v44 = *(_QWORD *)*v20;
          *(_QWORD *)&v45 = v44;
          *((_QWORD *)&v45 + 1) = HIDWORD(v44);
          v78 = 0uLL;
          *(_OWORD *)v79 = v45;
          v46 = vshrq_n_u64(v75, 3uLL);
          sub_236852738(v46.i64[0], v46.i64[1], a5[140], a5[141], &v78, v43);
          v47 = (_QWORD *)*v20;
          v78 = 0uLL;
          v48 = v47[8];
          *(_QWORD *)&v45 = v48;
          *((_QWORD *)&v45 + 1) = HIDWORD(v48);
          *(_OWORD *)v79 = v45;
          sub_236852738(v46.i64[0], v46.i64[1], a5[145], a5[146], &v78, (uint64_t)(v47 + 8));
          v49 = *(_QWORD *)(a2 + 24);
          v50 = (_QWORD *)*v20;
          if (v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = *(_QWORD *)(a2 + 8);
            v54 = a5[21];
            v55 = a5[130];
            v56 = a5[135];
            v57 = v50[19];
            v58 = v57 + v50[18];
            v59 = a5[131] + v55 * v53 + 4 * *(_QWORD *)a2;
            v60 = (unsigned __int8 *)(a5[22] + *(_QWORD *)a2 + v54 * v53);
            v61 = *(_QWORD *)a2 + v56 * v53;
            v63 = v50[26];
            v62 = (_DWORD *)v50[27];
            v64 = *(_QWORD *)(a2 + 16);
            v65 = (unsigned __int8 *)(a5[136] + v61);
            do
            {
              v66 = v65;
              v67 = v62;
              v68 = v60;
              v69 = (_DWORD *)v59;
              for (i = v64; i; --i)
              {
                v71 = *v66++;
                *v67 = v71;
                v73 = *v68++;
                v72 = v73;
                if ((v73 & 1) != 0)
                {
                  *(_DWORD *)(v57 + 4 * v52) = v72 >> 1;
                  *(_DWORD *)(v58 + 4 * v52++) = *v69 - 1;
                }
                ++v69;
                ++v67;
              }
              ++v51;
              v59 += v55;
              v60 += v54;
              v62 = (_DWORD *)((char *)v62 + v63);
              v65 += v56;
            }
            while (v51 != v49);
          }
          else
          {
            v52 = 0;
          }
          v19 = 0;
          v50[21] = v52;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * a3) = v52;
        }
      }
    }
  }
  sub_2367E2C48((uint64_t)&v84);
  return v19;
}

void sub_23685271C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2367E2C48(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_236852738(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  uint64_t i;
  int v15;

  v6 = a5[3];
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a6 + 16);
    v9 = a5[2];
    v10 = *(_QWORD *)(a6 + 24) + a5[1] * v8 + 4 * *a5;
    v11 = (char *)(a4 + result + a3 * a2);
    do
    {
      v12 = v11;
      v13 = (_DWORD *)v10;
      for (i = v9; i; --i)
      {
        v15 = *v12++;
        *v13++ = v15;
      }
      ++v7;
      v10 += v8;
      v11 += a3;
    }
    while (v7 != v6);
  }
  return result;
}

double sub_23685279C(float *a1, float *a2, uint64_t a3, double *a4, char a5)
{
  double v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  float v33;

  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  v10 = 0.0;
  if (a1 != a2)
  {
    v11 = a1;
    do
    {
      v12 = *v11;
      v13 = fmaxf(v11[1] * 6.0, 0.0);
      v33 = 0.0;
      v14 = modff(v13, &v33);
      if (v13 >= 7.0)
        v15 = 0x3F80000000000006;
      else
        v15 = (int)v33 | ((unint64_t)LODWORD(v14) << 32);
      v16 = *((float *)&v15 + 1);
      v17 = (int)v15;
      v18 = *(double *)(a3 + 8 * (int)v15);
      v19 = (v15 << 32) + 0x100000000;
      v20 = v19 >> 32;
      v21 = (float)(1.0 - v16);
      v22 = v16;
      v23 = *(double *)(a3 + (v19 >> 29)) * v22 + v18 * v21 - v12;
      if (v23 <= 0.0)
      {
        a4[v17] = a4[v17] - v21 * v23;
        v10 = v10 + v23 * v23;
        v24 = a4[v20] - v22 * v23;
      }
      else
      {
        v10 = v10 + v23 * 1.1 * v23;
        a4[v17] = a4[v17] + v21 * -1.1 * v23;
        v24 = a4[v20] + v22 * -1.1 * v23;
      }
      a4[v20] = v24;
      v11 += 2;
    }
    while (v11 != a2);
  }
  if ((a5 & 1) == 0)
  {
    v25 = 0;
    v26 = (double)(unint64_t)(((char *)a2 - (char *)a1) >> 3);
    v27 = *a4;
    do
    {
      v28 = *(double *)(a3 + v25 * 8) - *(double *)(a3 + v25 * 8 + 8);
      v10 = v10 + v26 * 0.005 * v28 * v28;
      v29 = v28 * 0.005;
      v30 = &a4[v25];
      v31 = v27 - v29 * v26;
      v27 = a4[v25 + 1] + v29 * v26;
      *v30 = v31;
      v30[1] = v27;
      ++v25;
    }
    while (v25 != 7);
  }
  return v10;
}

void sub_236852984(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4))
  {
    v4 = 0;
    v5 = *(unsigned int *)(*(_QWORD *)*a1 + 320) + 1;
    do
    {
      v6 = *(_QWORD *)(a2 + 16) * v4;
      v7 = *(_QWORD *)(a2 + 64) + v6;
      v31[0] = *(_QWORD *)(a2 + 24) + v6;
      v31[1] = v7;
      v31[2] = *(_QWORD *)(a2 + 104) + v6;
      sub_2367E71C4((uint64_t)&v28, a1, v4);
      v8 = v28;
      v9 = v29;
      if (v28 != v29)
      {
        v10 = a1[4];
        v11 = a1[7];
        v12 = v28;
        v14 = *a1;
        v13 = a1[1];
        do
        {
          v15 = (uint64_t *)(v13 + 24 * *v12);
          v16 = *(unsigned __int8 *)(v11 + 12 * *v12 * v5);
          v17 = (_QWORD *)(v10 + 40 * v15[2]);
          v18 = *v15;
          v19 = v4 - v15[1];
          v20 = v17[1];
          v21 = (_QWORD *)(v14 + 456 * *v17);
          v22 = v17[3];
          v23 = v21[311] * (v19 + v17[2]);
          v24 = v21[317] + v23 + 4 * v20;
          v30[0] = v21[312] + v23 + 4 * v20;
          v30[1] = v24;
          v30[2] = v21[322] + v23 + 4 * v20;
          if (v22)
          {
            for (i = 0; i != v22; ++i)
            {
              v26 = 0;
              v27 = i + v18;
              do
              {
                if (v16 == 1)
                {
                  *(_DWORD *)(v31[v26] + 4 * v27) = 0;
                }
                else if (v16 == 2)
                {
                  *(float *)(v31[v26] + 4 * v27) = *(float *)(v31[v26] + 4 * v27) - *(float *)(v30[v26] + 4 * i);
                }
                ++v26;
              }
              while (v26 != 3);
            }
          }
          ++v12;
        }
        while (v12 != v9);
      }
      if (v8)
        operator delete(v8);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 4));
  }
}

uint64_t sub_236852B68(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t ii;
  _BYTE *v7;
  unsigned int *v8;
  unsigned __int8 *v9;
  _QWORD *v11;
  unsigned int v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned __int8 v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int64x2_t *v30;
  int64x2_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int64x2_t *v41;
  int64x2_t *v42;
  int64x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  int64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int i;
  uint64_t v60;
  int v61;
  uint64_t j;
  float *v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t *v78;
  char *i8;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  size_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  int k;
  unint64_t v128;
  int m;
  uint64_t v130;
  uint64_t n;
  uint64_t v132;
  uint64_t v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  char v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  float v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  _DWORD *v158;
  unint64_t v159;
  unint64_t v160;
  _DWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  uint64_t v189;
  float v190;
  int v191;
  int v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _BOOL4 v205;
  double **v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  _BOOL4 v247;
  __int128 v248;
  float v249;
  float v250;
  unint64_t v251;
  unint64_t v252;
  size_t v253;
  uint64_t v254;
  void *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  size_t *v262;
  unint64_t v263;
  unint64_t v264;
  size_t v265;
  char *v266;
  unint64_t jj;
  size_t v268;
  size_t v269;
  char v270;
  size_t v271;
  unint64_t v272;
  char *v273;
  size_t v274;
  _QWORD *v275;
  size_t *v276;
  char *v277;
  int v278;
  uint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t kk;
  uint64_t mm;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  __int128 v309;
  __int128 v310;
  _DWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  int v319;
  __int128 v320;
  uint64_t nn;
  __int16 v322;
  void *v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  int v332;
  __int128 v333;
  unint64_t v334;
  uint64_t v335;
  void *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  __int128 v342;
  __int128 v343;
  unint64_t v344;
  void *v345;
  unint64_t v346;
  __int128 v347;
  int v348;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  __int128 v352;
  uint64_t v357;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i9;
  int8x16_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  uint64_t v369;
  double v370;
  char *v371;
  double v372;
  __int128 v373;
  unint64_t v374;
  uint64_t v375;
  double v376;
  unint64_t v377;
  char *v378;
  unsigned __int8 v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  char *v384;
  char *v385;
  _QWORD *v386;
  size_t v387;
  double v388;
  double v389;
  char *v390;
  size_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _DWORD *v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  double v403;
  unint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  double v413;
  double v414;
  unint64_t v415;
  void *v416;
  int v417;
  int v418;
  int *v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  BOOL v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  uint64_t v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  char *v439;
  char *v440;
  BOOL v442;
  unsigned int v443;
  int v444;
  float v445;
  float v446;
  char v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  char *v456;
  char *v457;
  __int128 v458;
  char *v459;
  __int128 v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  __int128 v464;
  __int128 v465;
  int64x2_t v466;
  char *v467;
  _OWORD *v468;
  size_t v469;
  uint64_t v470;
  unint64_t v471;
  double v472;
  uint64_t v473;
  unint64_t v474;
  float *v475;
  float *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  char *v483;
  __int128 v484;
  void *v485;
  __int128 v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t *v494;
  uint64_t v495;
  float v496;
  uint64_t v497;
  int v498;
  double v499;
  uint64_t v500;
  int v501;
  double v502;
  double v503;
  double v504;
  uint64_t v505;
  double v506;
  double v507;
  double v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  double v513;
  int i10;
  uint64_t v515;
  uint64_t v516;
  double v517;
  double v518;
  uint64_t *v519;
  uint64_t v520;
  double v521;
  uint64_t v522;
  uint64_t v523;
  float64x2_t v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  long double v534;
  void *v535;
  __double2 v536;
  void *v537;
  uint64_t v538;
  int v539;
  double v540;
  void *v541;
  unsigned int *v542;
  _QWORD *v543;
  double v544;
  unsigned int v545;
  double v546;
  uint64_t v547;
  uint64_t v548;
  double v549;
  double v550;
  double v551;
  int v552;
  uint64_t v553;
  double v554;
  long double v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  double v559;
  double v560;
  double v561;
  int v562;
  uint64_t v563;
  uint64_t v564;
  double v565;
  int v566;
  int v567;
  double v568;
  void *v569;
  double v570;
  double v571;
  double v572;
  double v573;
  double v574;
  double v575;
  _QWORD *v577;
  uint64_t v578;
  unint64_t v579;
  _DWORD *v580;
  _DWORD *v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t v586;
  char *v587;
  uint64_t v588;
  char *v589;
  char *v590;
  char *v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t *v600;
  uint64_t i11;
  unint64_t v602;
  uint64_t *v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  double v607;
  double v608;
  unint64_t v609;
  char *v610;
  unsigned __int8 *v611;
  uint64_t v612;
  unint64_t v613;
  int v614;
  float *v615;
  int v616;
  float *v617;
  char *__src;
  char *v620;
  int v621;
  unsigned int *v622;
  unsigned int *v623;
  char *v624;
  uint64_t v625;
  int v626;
  size_t v627;
  unint64_t v628;
  unint64_t v629;
  int v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  char *v634;
  unint64_t v635;
  uint64_t v636;
  int64x2_t *__p;
  int64x2_t *__pa;
  int64x2_t *__pb;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;
  int v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  unint64_t v652;
  __int128 v653;
  uint64_t v654;
  double v655;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  int v660;
  int v661;
  __int128 v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  unsigned int v666;
  unsigned int v667;
  uint64_t v668;
  __int128 v669;
  char *v670;
  uint64_t v671;
  char *v672;
  unsigned int v673;
  unsigned int v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  double v678;
  char *v679;
  unsigned int *v680;
  void *v681;
  int v682;
  double v683;
  uint64_t v684;
  char *v685;
  uint64_t v686;
  unint64_t v687;
  unint64_t v688;
  double v689;
  int __dst;
  char *__dsta;
  void *__dstb;
  double __dstc;
  uint64_t v694;
  unint64_t v695;
  __int128 v696;
  double v697;
  double v698;
  unint64_t *v699;
  __int128 v700;
  float64x2_t v701;
  void *v702[2];
  unint64_t v703;
  void *v704[2];
  unint64_t v705;
  void *v706[2];
  void *v707;
  size_t v708[2];
  void *v709[2];
  void *v710[2];
  _OWORD v711[3];
  _OWORD v712[20];
  int8x16_t v713;
  void *v714;
  unsigned int v715;
  _BYTE v716[24];
  unsigned int v717;
  unint64_t v718;
  char *v719;
  unsigned __int8 v720;
  size_t v721[2];
  unint64_t v722;
  _QWORD v723[13];
  __int128 v724;
  unint64_t v725;
  void *v726;
  uint64_t v727;
  unsigned int v728;
  size_t v729;
  size_t v730;
  unsigned int v731;
  int8x16_t v732;
  int8x8_t v733;
  void **v734[2];
  double v735;
  double v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  unsigned int v740;
  _BYTE v741[24];
  char *v742;
  unsigned __int8 *v743;
  unsigned int v744;
  size_t v745[2];
  __int128 v746;
  unsigned __int8 *v747;
  _BYTE v748[32];
  unsigned __int8 *v749;
  int v750;
  __int128 v751;
  __int128 v752;
  uint64_t v753;
  __int128 v754;
  __int128 v755;
  __int128 *v756;
  _BYTE v757[24];
  uint64_t v758;
  int v759;
  float *v760;
  __int128 v761;
  size_t v762[3];
  void *v763;
  __int128 *v764;
  __int128 *v765;
  __int128 *v766;
  __int128 v767;
  uint64_t v768;

  LODWORD(v7) = a5;
  v8 = a1;
  v768 = *MEMORY[0x24BDAC8D0];
  v9 = (unsigned __int8 *)(a2 + 4622);
  v617 = (float *)(a2 + 4544);
  v713 = 0uLL;
  v714 = 0;
  if (!*(_BYTE *)(a2 + 4623))
  {
    memset(v716, 0, sizeof(v716));
    v717 = 0;
    goto LABEL_350;
  }
  v11 = (_QWORD *)a2;
  if (a6)
    v12 = -1;
  else
    v12 = 0;
  v13 = (int8x16_t)vdupq_n_s32(v12);
  v732 = vbslq_s8(v13, (int8x16_t)xmmword_2368AF940, (int8x16_t)xmmword_2368AF930);
  v733 = vbsl_s8(*(int8x8_t *)v13.i8, (int8x8_t)0x3F80000040400000, (int8x8_t)0x408AB85240A33333);
  v720 = 0;
  v14 = *((_QWORD *)a1 + 2) >> 2;
  v15 = *((_QWORD *)a1 + 8);
  v760 = (float *)*((_QWORD *)a1 + 3);
  *(_QWORD *)&v761 = v15;
  *((_QWORD *)&v761 + 1) = *((_QWORD *)a1 + 13);
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v751 = &v760;
  v631 = v14;
  *((_QWORD *)&v751 + 1) = v14;
  v699 = (unint64_t *)(a2 + 8);
  sub_2367C2E38((uint64_t)&v724, (unint64_t)(v16 + 3) >> 2, (unint64_t)(*(_QWORD *)(a2 + 16) + 3) >> 2);
  if (v728)
  {
    v717 = v728;
    goto LABEL_350;
  }
  v622 = v8;
  v616 = (int)v7;
  *(_OWORD *)v721 = v724;
  v17 = (char *)v726;
  v726 = 0;
  v722 = v725;
  v723[0] = v17;
  v723[1] = v727;
  v18 = v724;
  if ((_DWORD)v724)
  {
    ii = HIDWORD(v721[0]);
    if (HIDWORD(v721[0]))
    {
      v19 = v17;
      do
      {
        bzero(v19, v18);
        v19 += v722;
        --ii;
      }
      while (ii);
    }
  }
  v719 = v17;
  v718 = v722;
  *(_QWORD *)v748 = v699;
  *(_QWORD *)&v748[8] = &v751;
  *(_QWORD *)&v748[16] = &v719;
  *(_QWORD *)&v748[24] = &v718;
  v749 = &v720;
  v20 = v11[2] >> 2;
  if (a4)
  {
    sub_236856EA4((uint64_t)a4, v20, (uint64_t)v748);
  }
  else
  {
    v708[0] = 0;
    v708[1] = (size_t)v708;
    sub_236856EA4((uint64_t)v708, v20, (uint64_t)v748);
  }
  LODWORD(v7) = v616;
  if (v11[646])
  {
    v21 = sub_2368ACC84((uint64_t)v617, (uint64_t)"screenshot_like", (unsigned int *)v721);
    if (v21)
    {
      v717 = v21;
      goto LABEL_341;
    }
  }
  v22 = v9[1];
  v23 = atomic_load(&v720);
  if (!v22 || v22 != 1 && (v23 & 1) == 0)
  {
    v717 = 0;
    *(int8x16_t *)v716 = v713;
    *(_QWORD *)&v716[16] = v714;
    v713 = 0uLL;
    v714 = 0;
    goto LABEL_341;
  }
  sub_2367C2E38((uint64_t)v741, v11[1], v11[2]);
  if (v744)
  {
    v717 = v744;
    goto LABEL_341;
  }
  *(_OWORD *)v745 = *(_OWORD *)v741;
  v24 = v742;
  v742 = 0;
  *(_QWORD *)&v746 = *(_QWORD *)&v741[16];
  v679 = v24;
  *((_QWORD *)&v746 + 1) = v24;
  v747 = v743;
  v25 = *(unsigned int *)v741;
  if (*(_DWORD *)v741)
  {
    ii = HIDWORD(v745[0]);
    if (HIDWORD(v745[0]))
    {
      v26 = v746;
      v27 = v24;
      do
      {
        bzero(v27, v25);
        v27 += v26;
        --ii;
      }
      while (ii);
    }
  }
  sub_2367CA770((uint64_t)v708, v11[1], v11[2]);
  if (DWORD2(v712[1]))
  {
    v717 = DWORD2(v712[1]);
    goto LABEL_332;
  }
  sub_2367CA9E4((uint64_t)v734, (uint64_t)v708);
  sub_23680EC1C((unsigned int *)v734);
  *(double *)v757 = v736;
  *(_QWORD *)&v757[8] = v738;
  *(_QWORD *)&v757[16] = v739;
  v657 = *(_QWORD *)&v735 >> 2;
  v694 = v746;
  v28 = (int64x2_t *)v11[2];
  v611 = v9;
  if (v28)
  {
    __p = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = *v699;
    v34 = *v699;
    do
    {
      if (v34)
      {
        v35 = 0;
        do
        {
          if (v719[v718 * (v32 >> 2) + (v35 >> 2)])
          {
            v36 = v35 | (v32 << 32);
            if (v31 >= v30)
            {
              v37 = v31 - __p;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 60)
                sub_2367C3440();
              if (((char *)v30 - (char *)__p) >> 3 > v38)
                v38 = ((char *)v30 - (char *)__p) >> 3;
              if ((unint64_t)((char *)v30 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
                v39 = 0xFFFFFFFFFFFFFFFLL;
              else
                v39 = v38;
              if (v39)
                v39 = (unint64_t)sub_2367CD8AC(v39);
              else
                v40 = 0;
              v41 = (int64x2_t *)(v39 + 16 * v37);
              *v41 = vdupq_n_s64(v36);
              v31 = v41 + 1;
              if (v29 == __p)
              {
                v43 = v41;
                v42 = __p;
              }
              else
              {
                v42 = __p;
                do
                {
                  v43 = v41 - 1;
                  v41[-1] = v29[-1];
                  --v29;
                  --v41;
                }
                while (v29 != __p);
              }
              v30 = (int64x2_t *)(v39 + 16 * v40);
              if (v42)
              {
                v44 = v39 + 16 * v40;
                operator delete(v42);
                v30 = (int64x2_t *)v44;
              }
              __p = v43;
            }
            else
            {
              v31->i64[0] = v36;
              v31->i64[1] = v36;
              ++v31;
            }
            v33 = *v699;
            v29 = v31;
          }
          ++v35;
        }
        while (v35 < v33);
        v11 = (_QWORD *)a2;
        v28 = *(int64x2_t **)(a2 + 16);
        v34 = v33;
      }
      ++v32;
    }
    while (v32 < (unint64_t)v28);
    v28 = __p;
    if (v31 != __p)
    {
      v45 = 0;
      do
      {
        __pa = v28;
        v46 = &v28[v45];
        v47 = v46->u32[0];
        v48 = v46->u32[1];
        v49 = v47 + v694 * v48;
        v659 = v45;
        if (v679[v49])
          goto LABEL_105;
        v50 = 0;
        v51 = v46->u64[1];
        v52 = HIDWORD(v51);
        v679[v49] = 1;
        v53 = v51;
        v54 = HIDWORD(v51) * v631 + v51;
        do
        {
          *(float *)(*(_QWORD *)&v757[v50 * 8] + 4 * (v47 + v657 * v48)) = (&v760)[v50][v54];
          ++v50;
        }
        while (v50 != 3);
        v55 = -1;
        v646 = v48;
        v651 = v47;
        v663 = v51;
        v640 = v51;
        v643 = HIDWORD(v51);
        do
        {
          v56 = (v55 + v47);
          if ((int)v56 - (int)v51 >= 0)
            v57 = v56 - v51;
          else
            v57 = v51 - v56;
          v58 = v56 >> 2;
          for (i = -1; i != 2; ++i)
          {
            if (i | v55)
            {
              v60 = (i + v48);
              if (((v60 | v56) & 0x80000000) == 0
                && *v699 > v56
                && *(_QWORD *)(a2 + 16) > (unint64_t)v60)
              {
                v61 = v60 - v52;
                if ((int)v60 - (int)v52 < 0)
                  v61 = v52 - v60;
                if ((v61 + v57) <= 0x32)
                {
                  for (j = 0; j != 3; ++j)
                  {
                    v63 = (&v760)[j];
                    *((float *)v762 + j) = v63[v54];
                    *((float *)&v754 + j) = v63[v56 + v631 * v60];
                  }
                  v64 = 0;
                  v65 = 0.0;
                  do
                  {
                    v65 = v65
                        + (float)(vabds_f32(*(float *)((char *)v762 + v64), *(float *)((char *)&v754 + v64))
                                * *(float *)(((unint64_t)&v732 | 0xC) + v64));
                    v64 += 4;
                  }
                  while (v64 != 12);
                  if (v65 <= 0.8)
                  {
                    if (v719[v58 + v718 * (v60 >> 2)])
                    {
                      v66 = v53 + *((_QWORD *)&v751 + 1) * v52;
                      v67 = v56 + *((_QWORD *)&v751 + 1) * v60;
                      if (vabds_f32(*(float *)(*(_QWORD *)v751 + 4 * v66), *(float *)(*(_QWORD *)v751 + 4 * v67)) > 0.0001)
                        continue;
                      v68 = 0;
                      while (v68 != 2)
                      {
                        v69 = v68 + 1;
                        v70 = vabds_f32(*(float *)(*(_QWORD *)(v751 + 8 + 8 * v68) + 4 * v66), *(float *)(*(_QWORD *)(v751 + 8 + 8 * v68) + 4 * v67));
                        ++v68;
                        if (v70 > 0.0001)
                        {
                          if ((unint64_t)(v69 - 1) < 2)
                            goto LABEL_103;
                          break;
                        }
                      }
                    }
                    if (!v679[v56 + v694 * v60])
                    {
                      v71 = v56 | (v60 << 32);
                      if (v29 >= v30)
                      {
                        v671 = v71;
                        v684 = v58;
                        __dst = v57;
                        v665 = v29 - __pa;
                        v72 = v665 + 1;
                        if ((unint64_t)(v665 + 1) >> 60)
                          sub_2367C3440();
                        if (((char *)v30 - (char *)__pa) >> 3 > v72)
                          v72 = ((char *)v30 - (char *)__pa) >> 3;
                        if ((unint64_t)((char *)v30 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF0)
                          v73 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v73 = v72;
                        v74 = (char *)sub_2367CD8AC(v73);
                        v51 = v663;
                        v76 = (int64x2_t *)&v74[16 * v665];
                        v76->i64[0] = v671;
                        v76->i64[1] = v663;
                        if (v29 == __pa)
                        {
                          i8 = &v74[16 * v665];
                          v78 = __pa;
                        }
                        else
                        {
                          v77 = (int64x2_t *)&v74[16 * v665];
                          v78 = __pa;
                          do
                          {
                            i8 = v77[-1].i8;
                            v77[-1] = v29[-1];
                            --v29;
                            --v77;
                          }
                          while (v29 != __pa);
                        }
                        v30 = (int64x2_t *)&v74[16 * v75];
                        v29 = v76 + 1;
                        if (v78)
                        {
                          v672 = &v74[16 * v75];
                          operator delete(v78);
                          v51 = v663;
                          v30 = (int64x2_t *)v672;
                        }
                        __pa = (int64x2_t *)i8;
                        LODWORD(v48) = v646;
                        LODWORD(v47) = v651;
                        v53 = v640;
                        v52 = v643;
                        v57 = __dst;
                        v58 = v684;
                      }
                      else
                      {
                        v29->i64[0] = v71;
                        v29->i64[1] = v51;
                        ++v29;
                      }
                    }
                  }
                }
              }
            }
LABEL_103:
            ;
          }
          ++v55;
          v31 = v29;
        }
        while (v55 != 2);
LABEL_105:
        v45 = v659 + 1;
        v28 = __pa;
        v11 = (_QWORD *)a2;
      }
      while (v659 + 1 != v31 - __pa);
    }
  }
  __pb = v28;
  v756 = 0;
  v755 = 0u;
  v754 = 0u;
  v8 = v622;
  v625 = v11[646];
  if (v625)
  {
    v80 = sub_2368ACC84((uint64_t)v617, (uint64_t)"is_background", (unsigned int *)v745);
    if (v80)
    {
      v717 = v80;
LABEL_115:
      *((_QWORD *)&v755 + 1) = 0;
      goto LABEL_325;
    }
    if (a6)
    {
      v81 = sub_2368AC6C0((uint64_t)v617, (unsigned int *)v734);
      if (v81)
      {
LABEL_111:
        v717 = v81;
        goto LABEL_115;
      }
    }
    else
    {
      v82 = sub_2367CA534(0);
      v81 = sub_2368AC0C0((uint64_t)v617, (uint64_t)v82, (unsigned int *)v734);
      if (v81)
        goto LABEL_111;
    }
    sub_2367C431C((uint64_t)v762, v11[1], v11[2]);
    if ((_DWORD)v765)
    {
      v717 = v765;
      goto LABEL_115;
    }
    v754 = *(_OWORD *)v762;
    v83 = (char *)v763;
    v763 = 0;
    *(_QWORD *)&v755 = v762[2];
    *((_QWORD *)&v755 + 1) = v83;
    v756 = v764;
    if (LODWORD(v762[0]))
    {
      v84 = DWORD1(v754);
      if (DWORD1(v754))
      {
        v85 = v755;
        v86 = 4 * LODWORD(v762[0]);
        do
        {
          bzero(v83, v86);
          v83 += v85;
          --v84;
        }
        while (v84);
      }
    }
    v11 = (_QWORD *)a2;
  }
  v752 = *(_OWORD *)v757;
  v753 = *(_QWORD *)&v757[16];
  sub_2367C2E38((uint64_t)v762, v11[1], v11[2]);
  if ((_DWORD)v765)
  {
    v717 = v765;
    goto LABEL_321;
  }
  v87 = LODWORD(v762[0]);
  v88 = HIDWORD(v762[0]);
  v89 = v762[2];
  v90 = (char *)v763;
  v763 = 0;
  if (LODWORD(v762[0]) && HIDWORD(v762[0]))
  {
    v91 = v90;
    do
    {
      bzero(v91, v87);
      v91 += v89;
      --v88;
    }
    while (v88);
  }
  v92 = a2;
  v93 = *(_QWORD *)(a2 + 16);
  v624 = v90;
  if (!v93)
  {
    v620 = 0;
    v94 = 0;
    goto LABEL_278;
  }
  v620 = 0;
  v629 = 0;
  v94 = 0;
  v685 = 0;
  v613 = 0;
  v95 = *v699;
  v96 = (unint64_t)&v732 | 0xC;
  v633 = 4 * v631;
  v609 = 0x94D049BB133111EBLL;
  v97 = 0xBF58476D1CE4E5B9;
  v627 = v89;
  do
  {
    if (!v95)
      goto LABEL_275;
    v98 = 0;
    do
    {
      __src = v98;
      if (v98[v613 * v694 + (_QWORD)v679])
        goto LABEL_238;
      v628 = v97;
      if (v94 >= v685)
      {
        v101 = (v685 - v94) >> 2;
        if (v101 <= 1)
          v101 = 1;
        if ((unint64_t)(v685 - v94) >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v101;
        v103 = v94;
        v104 = (char *)sub_2367CA1FC(v102);
        v99 = v613;
        v685 = &v104[8 * v105];
        v98 = __src;
        *(_DWORD *)v104 = (_DWORD)__src;
        *((_DWORD *)v104 + 1) = v613;
        v100 = v104 + 8;
        __dsta = v104;
        if (v103)
        {
          operator delete(v103);
          v98 = __src;
        }
        v97 = v628;
      }
      else
      {
        v99 = v613;
        *(_DWORD *)v94 = (_DWORD)v98;
        *((_DWORD *)v94 + 1) = v613;
        __dsta = v94;
        v100 = v94 + 8;
      }
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v109 = 1;
      v110 = v620;
      v641 = v99;
      v644 = (unint64_t)v98;
      v647 = (unint64_t)v98;
      v635 = v99;
      do
      {
        v112 = *((_QWORD *)v100 - 1);
        v100 -= 8;
        v111 = v112;
        v113 = HIDWORD(v112);
        v114 = HIDWORD(v112) * v89 + v112;
        if (v90[v114])
          continue;
        v90[v114] = 1;
        if (v647 >= v111)
          v115 = v111;
        else
          v115 = v647;
        v116 = v644;
        if (v644 <= v111)
          v116 = v111;
        v644 = v116;
        v647 = v115;
        v117 = v635;
        if (v635 >= v113)
          v117 = v113;
        v635 = v117;
        v118 = v641;
        if (v641 <= v113)
          v118 = v113;
        v652 = v111;
        v641 = v118;
        if (v625)
        {
          v119 = v110;
          if ((unint64_t)v110 >= v629)
          {
            v660 = v106;
            LODWORD(v663) = v109;
            v666 = v107;
            v673 = v108;
            v121 = (v110 - v620) >> 3;
            v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61)
              sub_2367C3440();
            if ((uint64_t)(v629 - (_QWORD)v620) >> 2 > v122)
              v122 = (uint64_t)(v629 - (_QWORD)v620) >> 2;
            if (v629 - (unint64_t)v620 >= 0x7FFFFFFFFFFFFFF8)
              v123 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v123 = v122;
            if (v123)
              v123 = (unint64_t)sub_2367CA1FC(v123);
            else
              v124 = 0;
            v125 = (char *)(v123 + 8 * v121);
            *(_QWORD *)v125 = v652;
            v634 = v125 + 8;
            while (v119 != v620)
            {
              v126 = *((_QWORD *)v119 - 1);
              v119 -= 8;
              *((_QWORD *)v125 - 1) = v126;
              v125 -= 8;
            }
            v629 = v123 + 8 * v124;
            if (v620)
              operator delete(v620);
            v620 = v125;
            v120 = v679;
            v108 = v673;
            v107 = v666;
            v109 = v663;
            v106 = v660;
            LODWORD(v111) = v652;
            goto LABEL_173;
          }
          *(_QWORD *)v110 = v111;
          v634 = v110 + 8;
        }
        else
        {
          v634 = v110;
        }
        v120 = v679;
LABEL_173:
        for (k = -1; k != 2; ++k)
        {
          v128 = (k + v111);
          for (m = -1; m != 2; ++m)
          {
            if (m | k)
            {
              if ((v128 & 0x80000000) == 0)
              {
                v130 = (m + v113);
                if ((v130 & 0x80000000) == 0
                  && *v699 > v128
                  && *(_QWORD *)(v92 + 16) > (unint64_t)v130)
                {
                  if (v120[v128 + v694 * v130])
                  {
                    if ((v106 & 1) != 0)
                    {
                      for (n = 0; n != 3; ++n)
                      {
                        v132 = *((_QWORD *)&v752 + n);
                        *((_DWORD *)&v767 + n) = *(_DWORD *)(v132 + 4 * (v128 + v657 * v130));
                        *((_DWORD *)&v758 + n) = *(_DWORD *)(v132 + 4 * (v657 * v107 + v108));
                      }
                      v133 = 0;
                      v134 = 0.0;
                      do
                      {
                        v134 = v134
                             + (float)(vabds_f32(*(float *)((char *)&v767 + v133), *(float *)((char *)&v758 + v133))
                                     * *(float *)(v96 + v133));
                        v133 += 4;
                      }
                      while (v133 != 12);
                      v109 = (v134 <= 0.03) & v109;
                      v106 = 1;
                      v120 = v679;
                    }
                    else
                    {
                      v106 = 1;
                      v108 = v128;
                      v107 = m + v113;
                    }
                  }
                  else if (v100 >= v685)
                  {
                    v661 = v106;
                    LODWORD(v663) = v109;
                    v667 = v107;
                    v674 = v108;
                    v135 = (v100 - __dsta) >> 3;
                    v136 = v135 + 1;
                    if ((unint64_t)(v135 + 1) >> 61)
                      sub_2367C3440();
                    if ((v685 - __dsta) >> 2 > v136)
                      v136 = (v685 - __dsta) >> 2;
                    if ((unint64_t)(v685 - __dsta) >= 0x7FFFFFFFFFFFFFF8)
                      v137 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v137 = v136;
                    if (v137)
                      v137 = (unint64_t)sub_2367CA1FC(v137);
                    else
                      v138 = 0;
                    v139 = (char *)(v137 + 8 * v135);
                    *(_QWORD *)v139 = v128 | (v130 << 32);
                    v140 = v139 + 8;
                    if (v100 == __dsta)
                    {
                      v141 = __dsta;
                    }
                    else
                    {
                      v141 = __dsta;
                      do
                      {
                        v142 = *((_QWORD *)v100 - 1);
                        v100 -= 8;
                        *((_QWORD *)v139 - 1) = v142;
                        v139 -= 8;
                      }
                      while (v100 != __dsta);
                    }
                    v685 = (char *)(v137 + 8 * v138);
                    if (v141)
                      operator delete(v141);
                    __dsta = v139;
                    v100 = v140;
                    v92 = a2;
                    v120 = v679;
                    v108 = v674;
                    v107 = v667;
                    v109 = v663;
                    v106 = v661;
                    LODWORD(v111) = v652;
                  }
                  else
                  {
                    *(_QWORD *)v100 = v128 | (v130 << 32);
                    v100 += 8;
                  }
                }
              }
            }
          }
        }
        v110 = v634;
        v90 = v624;
        v89 = v627;
        v97 = v628;
      }
      while (__dsta != v100);
      if ((v106 & v109 & 1) == 0)
      {
        v8 = v622;
        v94 = __dsta;
        goto LABEL_238;
      }
      v8 = v622;
      v94 = __dsta;
      if (v644 - v647 > 0x1F)
        goto LABEL_237;
      if (v641 - v635 > 0x1F)
        goto LABEL_236;
      v143 = v657 * v107 + v108;
      LODWORD(v767) = *(_DWORD *)(*(_QWORD *)v757 + 4 * v143);
      DWORD1(v767) = *(_DWORD *)(*(_QWORD *)&v757[8] + 4 * v143);
      DWORD2(v767) = *(_DWORD *)(*(_QWORD *)&v757[16] + 4 * v143);
      if ((int)v635 <= 2)
        v144 = 2;
      else
        v144 = v635;
      v145 = (v144 - 2);
      v146 = v641 + 3;
      if (*(_QWORD *)(v92 + 16) < v641 + 3)
        v146 = *(_QWORD *)(v92 + 16);
      if (v146 <= v145)
        goto LABEL_236;
      v147 = 0;
      if ((int)v647 <= 2)
        v148 = 2;
      else
        v148 = v647;
      v149 = (v148 - 2);
      v150 = v644 + 3;
      if (*v699 < v644 + 3)
        v150 = *v699;
      do
      {
        if (v150 > v149)
        {
          v151 = v145 * v631;
          v152 = v149;
          do
          {
            v153 = 0;
            *(float *)&v758 = v760[v152 + v151];
            HIDWORD(v758) = *(_DWORD *)(v761 + 4 * (v152 + v151));
            v759 = *(_DWORD *)(*((_QWORD *)&v761 + 1) + 4 * (v152 + v151));
            v154 = 0.0;
            do
            {
              v154 = v154
                   + (float)(vabds_f32(*(float *)((char *)&v767 + v153), *(float *)((char *)&v758 + v153))
                           * *(float *)(v96 + v153));
              v153 += 4;
            }
            while (v153 != 12);
            v147 |= v154 <= 0.03;
            ++v152;
          }
          while (v152 != v150);
        }
        ++v145;
      }
      while (v145 != v146);
      if ((v147 & 1) == 0)
      {
LABEL_236:
        v89 = v627;
LABEL_237:
        v97 = v628;
        goto LABEL_238;
      }
      v155 = (_QWORD *)v713.i64[1];
      if (v713.i64[1] >= (unint64_t)v714)
      {
        v156 = sub_23682A16C(v713.i64);
      }
      else
      {
        sub_236829F90((char **)v713.i64[1]);
        v155[20] = 0;
        v155[21] = 0;
        v156 = (uint64_t)(v155 + 23);
        v155[22] = 0;
      }
      v713.i64[1] = v156;
      v158 = *(_DWORD **)(v156 - 16);
      v157 = *(_QWORD *)(v156 - 8);
      if ((unint64_t)v158 >= v157)
      {
        v668 = v156;
        v162 = *(_QWORD *)(v156 - 24);
        v163 = ((uint64_t)v158 - v162) >> 3;
        v164 = v163 + 1;
        if ((unint64_t)(v163 + 1) >> 61)
          sub_2367C3440();
        v165 = v157 - v162;
        if (v165 >> 2 > v164)
          v164 = v165 >> 2;
        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
          v166 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v166 = v164;
        v167 = (char *)sub_2367CA1FC(v166);
        v156 = v668;
        v169 = &v167[8 * v163];
        *(_DWORD *)v169 = v647;
        *((_DWORD *)v169 + 1) = v635;
        v171 = *(char **)(v668 - 24);
        v170 = *(char **)(v668 - 16);
        v172 = v169;
        if (v170 != v171)
        {
          do
          {
            v173 = *((_QWORD *)v170 - 1);
            v170 -= 8;
            *((_QWORD *)v172 - 1) = v173;
            v172 -= 8;
          }
          while (v170 != v171);
          v170 = *(char **)(v668 - 24);
        }
        v161 = v169 + 8;
        *(_QWORD *)(v668 - 24) = v172;
        *(_QWORD *)(v668 - 16) = v169 + 8;
        *(_QWORD *)(v668 - 8) = &v167[8 * v168];
        if (v170)
        {
          operator delete(v170);
          v156 = v668;
        }
        v159 = v647;
        v160 = v635;
      }
      else
      {
        v159 = v647;
        v160 = v635;
        *v158 = v647;
        v158[1] = v635;
        v161 = v158 + 2;
      }
      v174 = 0;
      v175 = 0;
      *(_QWORD *)(v156 - 16) = v161;
      v176 = v713.i64[1];
      *(_QWORD *)(v713.i64[1] - 184) = v644 - v647 + 1;
      v177 = (_QWORD *)(v176 - 184);
      v177[1] = v641 - v635 + 1;
      v758 = 1;
      v759 = 2;
      v178 = v633 * v160 + 4 * v159;
      v90 = v624;
      v89 = v627;
      v97 = v628;
      do
      {
        v179 = v635;
        if (v641 >= v635)
        {
          v180 = 0;
          v181 = *((int *)&v758 + v174);
          v182 = &v177[3 * (int)v181];
          v183 = v182 + 11;
          v184 = v182 + 2;
          v185 = v178;
          do
          {
            if (v644 >= v647)
            {
              v186 = 0;
              v187 = *((float *)&v767 + v181);
              v188 = *(float *)&v732.i32[v181];
              do
              {
                v189 = v180 * *v177;
                v190 = *(float *)((char *)&(&v760)[v181][v186] + v185) - v187;
                *(float *)(*v183 + 4 * (v186 + v189)) = v190;
                v191 = (int)(float)(v190 / v188);
                *(_BYTE *)(*v184 + v189 + v186) = v191;
                if (v191 >= 0)
                  v192 = (int)(float)(v190 / v188);
                else
                  v192 = -v191;
                if (v192 > v175)
                  v175 = v192;
                ++v186;
              }
              while (v647 + v186 <= v644);
            }
            ++v179;
            v185 += v633;
            ++v180;
          }
          while (v179 <= v641);
        }
        ++v174;
      }
      while (v174 != 3);
      if (v175 >= 2)
      {
        if (v625)
        {
          v193 = (v628 >> 5) ^ ((v609 ^ (v609 << 23)) >> 18) ^ v628 ^ v609 ^ (v609 << 23);
          v194 = v620;
          if (v620 != v110)
          {
            v195 = *((_QWORD *)&v755 + 1);
            v196 = v755;
            do
            {
              v197 = *(unsigned int *)v194;
              v198 = *((unsigned int *)v194 + 1);
              v194 += 8;
              *(float *)(v195 + v196 * v198 + 4 * v197) = (float)((float)(COERCE_FLOAT(((v609 + v628) >> 41) | 0x3F800000)
                                                                        + -1.0)
                                                                * 0.5)
                                                        + 0.5;
            }
            while (v194 != v110);
          }
          v609 = v628;
          v97 = v193;
        }
      }
      else
      {
        v675 = v713.i64[1] - 184;
        sub_23682A300(v713.i64[1] - 184);
        v97 = v628;
        v713.i64[1] = v675;
      }
LABEL_238:
      v95 = *v699;
      v98 = __src + 1;
    }
    while ((unint64_t)(__src + 1) < *v699);
    v93 = *(_QWORD *)(v92 + 16);
LABEL_275:
    ++v613;
  }
  while (v613 < v93);
LABEL_278:
  if (v625)
  {
    v199 = sub_2368AC800((uint64_t)v617, (unsigned int *)&v754);
    if (v199)
    {
      v717 = v199;
      goto LABEL_308;
    }
  }
  if (v713.i64[0] == v713.i64[1])
  {
    v717 = 0;
    *(_QWORD *)v716 = v713.i64[0];
    *(_QWORD *)&v716[8] = v713.i64[0];
    *(_QWORD *)&v716[16] = v714;
    v714 = 0;
    v713 = 0uLL;
  }
  else
  {
    sub_236856F24(v713.i64[0], (_QWORD *)v713.i64[1]);
    v200 = v713.i64[0];
    if (0xD37A6F4DE9BD37A7 * ((v713.i64[1] - v713.i64[0]) >> 3) < 2)
    {
      v201 = 0;
    }
    else
    {
      v201 = 0;
      v202 = 1;
      v203 = 352;
      do
      {
        v204 = (_QWORD *)(v200 + 184 * v201);
        v205 = sub_236857118((_QWORD *)(v200 + v203 - 168), v204);
        v206 = (double **)(v204 + 20);
        v207 = v204[21];
        if (v205)
        {
          sub_2368571B4(v206, v207, *(double **)(v200 + v203 - 8), *(double **)(v200 + v203), (uint64_t)(*(_QWORD *)(v200 + v203) - *(_QWORD *)(v200 + v203 - 8)) >> 3);
        }
        else
        {
          if ((unint64_t)(v207 - (_QWORD)*v206) > 8)
            ++v201;
          sub_2368573B0(v200 + 184 * v201, v200 + v203 - 168);
        }
        ++v202;
        v200 = v713.i64[0];
        v203 += 184;
      }
      while (v202 < 0xD37A6F4DE9BD37A7 * ((v713.i64[1] - v713.i64[0]) >> 3));
    }
    if (*(_QWORD *)(v200 + 184 * v201 + 168) - *(_QWORD *)(v200 + 184 * v201 + 160) <= 8uLL)
      v208 = v201;
    else
      v208 = v201 + 1;
    sub_236856F5C(v713.i64, v208);
    v209 = v713.i64[1];
    v210 = v713.i64[0];
    v8 = v622;
    v90 = v624;
    if (v713.i64[1] == v713.i64[0])
    {
LABEL_306:
      v214 = v209;
      v713.i64[1] = v210;
      v209 = v210;
      v210 = v214;
    }
    else
    {
      v211 = 0;
      v212 = (v713.i64[1] - v713.i64[0]) / 184;
      if (v212 <= 1)
        v212 = 1;
      v213 = (_QWORD *)(v713.i64[0] + 8);
      do
      {
        if (*v213 * *(v213 - 1) > v211)
          v211 = *v213 * *(v213 - 1);
        v213 += 23;
        --v212;
      }
      while (v212);
      if (v211 <= 0x13)
      {
        do
        {
          v209 -= 184;
          sub_23682A300(v209);
        }
        while (v209 != v210);
        v209 = v713.i64[0];
        goto LABEL_306;
      }
    }
    v717 = 0;
    *(_QWORD *)v716 = v210;
    *(_QWORD *)&v716[8] = v209;
    *(_QWORD *)&v716[16] = v714;
    v714 = 0;
    v713 = 0uLL;
    v9 = v611;
  }
LABEL_308:
  if (v94)
    operator delete(v94);
  if (v620)
    operator delete(v620);
  if (v90)
  {
    v215 = -*((_QWORD *)v90 - 3);
    do
      v216 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v216 + v215, &qword_2564313D8));
    free(*((void **)v90 - 4));
  }
  if (!(_DWORD)v765)
  {
    v217 = v763;
    v763 = 0;
    if (v217)
    {
      v218 = -*(v217 - 3);
      do
        v219 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v219 + v218, &qword_2564313D8));
      free((void *)*(v217 - 4));
    }
  }
LABEL_321:
  v220 = *((_QWORD *)&v755 + 1);
  *((_QWORD *)&v755 + 1) = 0;
  if (v220)
  {
    v221 = -*(_QWORD *)(v220 - 24);
    do
      v222 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v222 + v221, &qword_2564313D8));
    free(*(void **)(v220 - 32));
  }
LABEL_325:
  if (__pb)
    operator delete(__pb);
  for (ii = 104; ii != -16; ii -= 40)
    sub_2367C2F38((uint64_t *)((char *)v734 + ii));
  if (!DWORD2(v712[1]))
  {
    for (ii = 104; ii != -16; ii -= 40)
      sub_2367C2F38((uint64_t *)((char *)v708 + ii));
  }
LABEL_332:
  v223 = *((_QWORD *)&v746 + 1);
  *((_QWORD *)&v746 + 1) = 0;
  LODWORD(v7) = v616;
  if (v223)
  {
    v224 = -*(_QWORD *)(v223 - 24);
    do
      v225 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v225 + v224, &qword_2564313D8));
    free(*(void **)(v223 - 32));
  }
  if (!v744)
  {
    v226 = v742;
    v742 = 0;
    if (v226)
    {
      v227 = -*((_QWORD *)v226 - 3);
      do
        v228 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v228 + v227, &qword_2564313D8));
      free(*((void **)v226 - 4));
    }
  }
LABEL_341:
  v229 = v723[0];
  v723[0] = 0;
  if (v229)
  {
    v230 = -*(_QWORD *)(v229 - 24);
    do
      v231 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v231 + v230, &qword_2564313D8));
    free(*(void **)(v229 - 32));
  }
  if (!v728)
  {
    v232 = v726;
    v726 = 0;
    if (v232)
    {
      v233 = -*(v232 - 3);
      do
        v234 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v234 + v233, &qword_2564313D8));
      free((void *)*(v232 - 4));
    }
  }
LABEL_350:
  v708[0] = (size_t)&v713;
  sub_23682A290((void ***)v708);
  v235 = v717;
  if (!v717)
  {
    v237 = *(char **)&v716[8];
    v236 = *(_QWORD *)v716;
    *(_QWORD *)v757 = *(_QWORD *)v716;
    *(_OWORD *)&v757[8] = *(_OWORD *)&v716[8];
    memset(v716, 0, sizeof(v716));
    v238 = v237;
    if ((char *)v236 != v237)
      goto LABEL_352;
    v235 = *v9;
    if (*(int *)(a2 + 4592) > 3)
    {
      v247 = 0;
      if (*v9)
        goto LABEL_368;
      goto LABEL_570;
    }
    v247 = *v617 >= 3.0;
    if (!*v9)
      goto LABEL_570;
LABEL_368:
    if ((_DWORD)v235 == 1)
    {
      v248 = *(_OWORD *)(a2 + 8);
      goto LABEL_370;
    }
    if (!v247)
      goto LABEL_519;
    v248 = *(_OWORD *)(a2 + 8);
    if (*v617 < 3.0)
    {
      v714 = 0;
      v713 = 0uLL;
      v715 = 0;
      v709[0] = 0;
      v708[0] = 0;
      v708[1] = 0;
      v734[0] = (void **)v708;
      sub_23682A290(v734);
      goto LABEL_569;
    }
LABEL_370:
    v653 = v248;
    v732 = 0uLL;
    v733 = 0;
    sub_2367CA770((uint64_t)&v724, *v8, v8[1]);
    if (v731)
    {
      v715 = v731;
LABEL_568:
      v708[0] = (size_t)&v732;
      sub_23682A290((void ***)v708);
LABEL_569:
      v235 = v715;
      if (v715)
      {
LABEL_570:
        v708[0] = (size_t)v757;
        sub_23682A290((void ***)v708);
        if (!v717)
        {
          v708[0] = (size_t)v716;
          sub_23682A290((void ***)v708);
        }
        return v235;
      }
      v364 = v713;
      *(int8x16_t *)v708 = v713;
      v365 = v714;
      v709[0] = v714;
      v713 = 0uLL;
      v714 = 0;
      v366 = *(_QWORD *)v757;
      if (*(_QWORD *)v757)
      {
        v367 = *(_QWORD *)&v757[8];
        v368 = *(void **)v757;
        if (*(_QWORD *)&v757[8] != *(_QWORD *)v757)
        {
          do
          {
            v367 -= 184;
            sub_23682A300(v367);
          }
          while (v367 != v366);
          v368 = *(void **)v757;
        }
        *(_QWORD *)&v757[8] = v366;
        operator delete(v368);
        v364 = *(int8x16_t *)v708;
        v365 = v709[0];
      }
      *(int8x16_t *)v757 = v364;
      *(_QWORD *)&v757[16] = v365;
      v709[0] = 0;
      v708[0] = 0;
      v708[1] = 0;
      v734[0] = (void **)v708;
      sub_23682A290(v734);
      if (!v715)
      {
        v708[0] = (size_t)&v713;
        sub_23682A290((void ***)v708);
      }
      v236 = *(_QWORD *)v757;
      v238 = *(char **)&v757[8];
LABEL_352:
      if ((char *)v236 != v238)
      {
        sub_2368576B8(v236, v238, 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * ((uint64_t)&v238[-v236] >> 3)), 1);
        v239 = (*(_QWORD *)&v757[8] - *(_QWORD *)v757) / 184;
        if (*(_QWORD *)&v757[8] == *(_QWORD *)v757)
        {
          v242 = 0;
          v241 = 0;
          v240 = 0;
        }
        else
        {
          v240 = 0;
          v241 = 0;
          v242 = 0;
          if (v239 <= 1)
            v243 = 1;
          else
            v243 = (*(_QWORD *)&v757[8] - *(_QWORD *)v757) / 184;
          v244 = (unint64_t *)(*(_QWORD *)v757 + 8);
          do
          {
            v245 = *(v244 - 1);
            v246 = *v244;
            if (v240 <= v245)
              v240 = *(v244 - 1);
            if (v241 <= v246)
              v241 = *v244;
            v242 += v246 * v245;
            v244 += 23;
            --v243;
          }
          while (v243);
        }
        sub_2368581DC(v741, v239);
        v249 = (float)v241;
        v250 = sqrt((double)v242);
        if ((float)v241 < v250)
          v249 = v250;
        if ((float)v240 >= v250)
          v250 = (float)v240;
        v251 = (unint64_t)v250;
        v252 = (unint64_t)v249;
        while (1)
        {
          v251 = (unint64_t)(float)((float)((float)v251 * 1.05) + 1.0);
          v252 = (unint64_t)(float)((float)((float)v252 * 1.05) + 1.0);
          sub_2367C2E38((uint64_t)v708, v251, v252);
          v235 = LODWORD(v710[1]);
          if (LODWORD(v710[1]))
            break;
          v253 = LODWORD(v708[0]);
          v254 = HIDWORD(v708[0]);
          v255 = v709[0];
          v256 = (char *)v709[1];
          v709[1] = 0;
          if (LODWORD(v708[0]) && HIDWORD(v708[0]))
          {
            v257 = v256;
            do
            {
              bzero(v257, v253);
              v257 = (char *)v255 + (_QWORD)v257;
              --v254;
            }
            while (v254);
          }
          v258 = *(_QWORD *)&v757[8];
          v259 = *(_QWORD *)v757;
          if (*(_QWORD *)&v757[8] == *(_QWORD *)v757)
          {
            LODWORD(v261) = 0;
            v278 = 9;
            if (!v256)
              goto LABEL_423;
            goto LABEL_420;
          }
          v260 = 0;
          v261 = 0;
          v695 = v252;
LABEL_385:
          v262 = (size_t *)(v259 + 184 * v260);
          v263 = v262[1];
          if (v263 <= v252)
          {
            v264 = 0;
            v265 = *v262;
            v266 = v256;
            for (jj = v263; jj <= v252; ++jj)
            {
              if (v265 <= v251)
              {
                v268 = 0;
                v269 = v265;
                while (2)
                {
                  if (v264 >= jj)
                  {
                    v275 = (_QWORD *)(*(_QWORD *)v741 + 16 * v260);
                    *v275 = 0;
                    v275[1] = v264;
LABEL_412:
                    if (v261 <= jj)
                      v261 = jj;
                    if (++v260 >= 0xD37A6F4DE9BD37A7 * ((v258 - v259) >> 3))
                    {
                      v278 = 9;
                      goto LABEL_417;
                    }
                    goto LABEL_385;
                  }
                  v270 = 0;
                  if (v269 <= v268)
                    v271 = v268;
                  else
                    v271 = v269;
                  v272 = v264;
                  while (2)
                  {
                    v273 = &v256[(_QWORD)v255 * v272];
                    while (1)
                    {
                      v274 = v268;
                      if (v268 < v269)
                        break;
LABEL_398:
                      ++v272;
                      v273 = (char *)v255 + (_QWORD)v273;
                      if (v272 == jj)
                      {
                        v274 = v271;
                        if ((v270 & 1) == 0)
                        {
                          v276 = (size_t *)(*(_QWORD *)v741 + 16 * v260);
                          *v276 = v268;
                          v276[1] = v264;
                          v277 = &v266[v268];
                          do
                          {
                            if (v268 < v268 + v265)
                              memset(v277, 1, v265);
                            v277 = (char *)v255 + (_QWORD)v277;
                            --v263;
                          }
                          while (v263);
                          v258 = *(_QWORD *)&v757[8];
                          v259 = *(_QWORD *)v757;
                          v252 = v695;
                          goto LABEL_412;
                        }
                        goto LABEL_403;
                      }
                    }
                    while (!v273[v274])
                    {
                      if (v269 == ++v274)
                        goto LABEL_398;
                    }
                    ++v272;
                    v270 = 1;
                    if (v272 != jj)
                      continue;
                    break;
                  }
LABEL_403:
                  v268 = v274 + 1;
                  v269 = v274 + 1 + v265;
                  if (v269 <= v251)
                    continue;
                  break;
                }
              }
              ++v264;
              v266 = (char *)v255 + (_QWORD)v266;
            }
          }
          v278 = 0;
LABEL_417:
          if (!v256)
          {
LABEL_423:
            v281 = v709[1];
            v709[1] = 0;
            if (v281)
            {
              v282 = -*(v281 - 3);
              do
                v283 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v283 + v282, &qword_2564313D8));
              free((void *)*(v281 - 4));
            }
            goto LABEL_427;
          }
LABEL_420:
          v279 = -*((_QWORD *)v256 - 3);
          do
            v280 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v280 + v279, &qword_2564313D8));
          free(*((void **)v256 - 4));
          if (!LODWORD(v710[1]))
            goto LABEL_423;
LABEL_427:
          if (v278)
          {
            sub_2367CA770((uint64_t)v734, v251, v261);
            v235 = v740;
            if (!v740)
            {
              sub_2367CA9E4((uint64_t)&v724, (uint64_t)v734);
              sub_23680EC1C((unsigned int *)&v724);
              v762[0] = (size_t)v726;
              v762[1] = v729;
              v762[2] = v730;
              v284 = *(_QWORD *)v757;
              if (*(_QWORD *)&v757[8] == *(_QWORD *)v757)
              {
                __dstb = 0;
                v658 = 0;
                v285 = 0;
                v696 = 0u;
                v700 = 0u;
                v669 = 0u;
              }
              else
              {
                __dstb = 0;
                v658 = 0;
                v285 = 0;
                v286 = 0;
                v287 = 0;
                v288 = v725 >> 2;
                v289 = *(unsigned int *)(*(_QWORD *)a2 + 320);
                v696 = 0u;
                v700 = 0u;
                v290 = 88;
                v669 = 0u;
                v645 = v725 >> 2;
                do
                {
                  v664 = v286;
                  v291 = (uint64_t *)(v284 + 184 * v287);
                  v292 = *v291;
                  v662 = *(_OWORD *)(*(_QWORD *)v741 + 16 * v287);
                  v686 = v291[1];
                  if (v686)
                  {
                    for (kk = 0; kk != v686; ++kk)
                    {
                      if (v292)
                      {
                        for (mm = 0; mm != v292; ++mm)
                        {
                          v295 = 0;
                          v296 = (uint64_t *)(v284 + v290);
                          do
                          {
                            v297 = *v296;
                            v296 += 3;
                            *(_DWORD *)(v762[v295++] + 4 * (v662 + (kk + *((_QWORD *)&v662 + 1)) * v288 + mm)) = *(_DWORD *)(v297 + 4 * (mm + kk * v292));
                          }
                          while (v295 != 3);
                        }
                      }
                    }
                  }
                  v654 = v290;
                  v298 = v284 + 184 * v287;
                  v299 = *(unsigned int **)(v298 + 160);
                  v680 = *(unsigned int **)(v298 + 168);
                  if (v299 != v680)
                  {
                    v648 = v287;
                    v664 = *((_QWORD *)&v669 + 1);
                    v676 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v669 + 1) - v669) >> 3);
                    do
                    {
                      v300 = *v299;
                      v301 = v299[1];
                      v302 = (char *)*((_QWORD *)&v696 + 1);
                      if (*((_QWORD *)&v696 + 1) >= (unint64_t)__dstb)
                      {
                        v304 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v696 + 1) - v696) >> 3) + 1;
                        if (v304 > 0xAAAAAAAAAAAAAAALL)
                          sub_2367C3440();
                        if (0x5555555555555556 * (((uint64_t)__dstb - (uint64_t)v696) >> 3) > v304)
                          v304 = 0x5555555555555556 * (((uint64_t)__dstb - (uint64_t)v696) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)__dstb - (uint64_t)v696) >> 3) >= 0x555555555555555)
                          v305 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v305 = v304;
                        if (v305)
                          v305 = (unint64_t)sub_2367D1EBC(v305);
                        else
                          v306 = 0;
                        v307 = (_QWORD *)(v305 + 8 * ((uint64_t)(*((_QWORD *)&v696 + 1) - v696) >> 3));
                        *v307 = v300;
                        v307[1] = v301;
                        v307[2] = v676;
                        v308 = v307;
                        if (*((_QWORD *)&v696 + 1) != (_QWORD)v696)
                        {
                          do
                          {
                            v309 = *(_OWORD *)(v302 - 24);
                            *(v308 - 1) = *((_QWORD *)v302 - 1);
                            *(_OWORD *)(v308 - 3) = v309;
                            v308 -= 3;
                            v302 -= 24;
                          }
                          while (v302 != (char *)v696);
                          v302 = (char *)v696;
                        }
                        __dstb = (void *)(v305 + 24 * v306);
                        v303 = (uint64_t)(v307 + 3);
                        *(_QWORD *)&v696 = v308;
                        if (v302)
                          operator delete(v302);
                      }
                      else
                      {
                        **((_QWORD **)&v696 + 1) = v300;
                        *(_QWORD *)(*((_QWORD *)&v696 + 1) + 8) = v301;
                        v303 = *((_QWORD *)&v696 + 1) + 24;
                        *(_QWORD *)(*((_QWORD *)&v696 + 1) + 16) = v676;
                      }
                      *(_QWORD *)&v310 = v696;
                      *((_QWORD *)&v310 + 1) = v303;
                      v696 = v310;
                      v311 = (_DWORD *)*((_QWORD *)&v700 + 1);
                      if (*((_QWORD *)&v700 + 1) >= v285)
                      {
                        v313 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v700 + 1) - v700) >> 2) + 1;
                        if (v313 > 0x1555555555555555)
                          sub_2367C3440();
                        if (0x5555555555555556 * ((uint64_t)(v285 - v700) >> 2) > v313)
                          v313 = 0x5555555555555556 * ((uint64_t)(v285 - v700) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v285 - v700) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v314 = 0x1555555555555555;
                        else
                          v314 = v313;
                        if (v314)
                          v314 = (unint64_t)sub_2367E4DB0(v314);
                        else
                          v315 = 0;
                        v316 = v314 + 4 * ((uint64_t)(*((_QWORD *)&v700 + 1) - v700) >> 2);
                        *(_BYTE *)v316 = 2;
                        *(_DWORD *)(v316 + 4) = 0;
                        *(_BYTE *)(v316 + 8) = 0;
                        v317 = v316;
                        if (*((_QWORD *)&v700 + 1) != (_QWORD)v700)
                        {
                          do
                          {
                            v318 = *(_QWORD *)(v311 - 3);
                            v311 -= 3;
                            v319 = v311[2];
                            *(_QWORD *)(v317 - 12) = v318;
                            v317 -= 12;
                            *(_DWORD *)(v317 + 8) = v319;
                          }
                          while (v311 != (_DWORD *)v700);
                          v311 = (_DWORD *)v700;
                        }
                        v285 = v314 + 12 * v315;
                        v312 = v316 + 12;
                        *(_QWORD *)&v700 = v317;
                        if (v311)
                          operator delete(v311);
                      }
                      else
                      {
                        **((_BYTE **)&v700 + 1) = 2;
                        *(_DWORD *)(*((_QWORD *)&v700 + 1) + 4) = 0;
                        v312 = *((_QWORD *)&v700 + 1) + 12;
                        *(_BYTE *)(*((_QWORD *)&v700 + 1) + 8) = 0;
                      }
                      *(_QWORD *)&v320 = v700;
                      *((_QWORD *)&v320 + 1) = v312;
                      v700 = v320;
                      if ((_DWORD)v289)
                      {
                        for (nn = 0; nn != v289; ++nn)
                        {
                          if (v312 >= v285)
                          {
                            v323 = (void *)v700;
                            v324 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v312 - v700) >> 2);
                            v325 = v324 + 1;
                            if (v324 + 1 > 0x1555555555555555)
                              sub_2367C3440();
                            if (0x5555555555555556 * ((uint64_t)(v285 - v700) >> 2) > v325)
                              v325 = 0x5555555555555556 * ((uint64_t)(v285 - v700) >> 2);
                            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v285 - v700) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                              v326 = 0x1555555555555555;
                            else
                              v326 = v325;
                            if (v326)
                              v326 = (unint64_t)sub_2367E4DB0(v326);
                            else
                              v327 = 0;
                            v328 = v326 + 12 * v324;
                            *(_BYTE *)v328 = 0;
                            *(_DWORD *)(v328 + 4) = 0;
                            *(_BYTE *)(v328 + 8) = 0;
                            v329 = *((_QWORD *)&v700 + 1);
                            v330 = v328;
                            while (v329 != (_QWORD)v700)
                            {
                              v331 = *(_QWORD *)(v329 - 12);
                              v329 -= 12;
                              v332 = *(_DWORD *)(v329 + 8);
                              *(_QWORD *)(v330 - 12) = v331;
                              v330 -= 12;
                              *(_DWORD *)(v330 + 8) = v332;
                            }
                            v285 = v326 + 12 * v327;
                            v312 = v328 + 12;
                            *(_QWORD *)&v700 = v330;
                            if (v323)
                              operator delete(v323);
                          }
                          else
                          {
                            *(_BYTE *)v312 = 0;
                            v322 = v708[0];
                            *(_BYTE *)(v312 + 3) = BYTE2(v708[0]);
                            *(_WORD *)(v312 + 1) = v322;
                            *(_DWORD *)(v312 + 4) = 0;
                            *(_BYTE *)(v312 + 8) = 0;
                            *(_WORD *)(v312 + 9) = v721[0];
                            *(_BYTE *)(v312 + 11) = BYTE2(v721[0]);
                            v312 += 12;
                          }
                          *(_QWORD *)&v333 = v700;
                          *((_QWORD *)&v333 + 1) = v312;
                          v700 = v333;
                        }
                      }
                      v299 += 2;
                    }
                    while (v299 != v680);
                    v288 = v645;
                    v287 = v648;
                  }
                  v334 = v664;
                  if (v664 >= v658)
                  {
                    v336 = (void *)v669;
                    v337 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v664 - v669) >> 3) + 1;
                    if (v337 > 0x666666666666666)
                      sub_2367C3440();
                    if (0x999999999999999ALL * ((uint64_t)(v658 - v669) >> 3) > v337)
                      v337 = 0x999999999999999ALL * ((uint64_t)(v658 - v669) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v658 - v669) >> 3) >= 0x333333333333333)
                      v338 = 0x666666666666666;
                    else
                      v338 = v337;
                    if (v338)
                    {
                      v338 = (unint64_t)sub_2367DC0A4(v338);
                      v334 = *((_QWORD *)&v669 + 1);
                    }
                    else
                    {
                      v339 = 0;
                    }
                    v340 = v338 + 8 * ((uint64_t)(v664 - v669) >> 3);
                    *(_QWORD *)v340 = 3;
                    *(_OWORD *)(v340 + 8) = v662;
                    *(_QWORD *)(v340 + 24) = v292;
                    *(_QWORD *)(v340 + 32) = v686;
                    if (v334 == (_QWORD)v669)
                    {
                      v344 = v338 + 8 * ((uint64_t)(v664 - v669) >> 3);
                      v335 = v654;
                    }
                    else
                    {
                      v341 = v338 + 8 * ((uint64_t)(v664 - v669) >> 3);
                      v335 = v654;
                      do
                      {
                        v342 = *(_OWORD *)(v334 - 40);
                        v343 = *(_OWORD *)(v334 - 24);
                        v344 = v341 - 40;
                        *(_QWORD *)(v341 - 8) = *(_QWORD *)(v334 - 8);
                        *(_OWORD *)(v341 - 24) = v343;
                        *(_OWORD *)(v341 - 40) = v342;
                        v334 -= 40;
                        v341 -= 40;
                      }
                      while (v334 != (_QWORD)v669);
                    }
                    v658 = v338 + 40 * v339;
                    v286 = v340 + 40;
                    *(_QWORD *)&v669 = v344;
                    if (v336)
                    {
                      v345 = v336;
                      v346 = v340 + 40;
                      operator delete(v345);
                      v286 = v346;
                    }
                  }
                  else
                  {
                    *(_QWORD *)v664 = 3;
                    *(_OWORD *)(v664 + 8) = v662;
                    *(_QWORD *)(v664 + 24) = v292;
                    *(_QWORD *)(v664 + 32) = v686;
                    v286 = v664 + 40;
                    v335 = v654;
                  }
                  *(_QWORD *)&v347 = v669;
                  *((_QWORD *)&v347 + 1) = v286;
                  v669 = v347;
                  ++v287;
                  v284 = *(_QWORD *)v757;
                  v290 = v335 + 184;
                }
                while (v287 < 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)&v757[8] - *(_QWORD *)v757) >> 3));
              }
              sub_2368218B0((uint64_t)v708, (uint64_t)v617);
              HIBYTE(v711[1]) = 0;
              v235 = sub_236858268();
              if (!(_DWORD)v235)
              {
                *(_OWORD *)v706 = v696;
                v707 = __dstb;
                *(_OWORD *)v704 = v669;
                v705 = v658;
                *(_OWORD *)v702 = v700;
                v703 = v285;
                sub_236858B30((_QWORD *)(a2 + 1256), (uint64_t)v706, (uint64_t)v704, (uint64_t)v702);
                if (v702[0])
                {
                  v702[1] = v702[0];
                  operator delete(v702[0]);
                }
                if (v704[0])
                {
                  v704[1] = v704[0];
                  operator delete(v704[0]);
                }
                *(_QWORD *)&v696 = 0;
                if (v706[0])
                {
                  v706[1] = v706[0];
                  operator delete(v706[0]);
                }
                *(_QWORD *)&v669 = 0;
                *(_QWORD *)&v700 = 0;
              }
              sub_236816F38((uint64_t)v708);
              if ((_QWORD)v700)
                operator delete((void *)v700);
              if ((_QWORD)v669)
                operator delete((void *)v669);
              if ((_QWORD)v696)
                operator delete((void *)v696);
              for (i1 = 104; i1 != -16; i1 -= 40)
                sub_2367C2F38((uint64_t *)((char *)&v724 + i1));
              if (!v740)
              {
                for (i2 = 13; i2 != -2; i2 -= 5)
                  sub_2367C2F38((uint64_t *)&v734[i2]);
              }
            }
            break;
          }
        }
        if (*(_QWORD *)v741)
        {
          *(_QWORD *)&v741[8] = *(_QWORD *)v741;
          operator delete(*(void **)v741);
        }
        goto LABEL_570;
      }
LABEL_519:
      v235 = 0;
      goto LABEL_570;
    }
    sub_2367CA9E4((uint64_t)v721, (uint64_t)&v724);
    sub_2367CA770((uint64_t)v708, *v8, v8[1]);
    v348 = DWORD2(v712[1]);
    if (DWORD2(v712[1]))
      goto LABEL_562;
    sub_2367CA9E4((uint64_t)v741, (uint64_t)v708);
    sub_2367CA770((uint64_t)v734, *v8, v8[1]);
    v348 = v740;
    v623 = v8;
    if (!v740)
    {
      sub_2367CA9E4((uint64_t)v762, (uint64_t)v734);
      sub_2367D086C((uint64_t)v721, (uint64_t)v762);
      for (i3 = 13; i3 != -2; i3 -= 5)
        sub_2367C2F38((uint64_t *)&v762[i3]);
      ii = 0;
      v754 = 0uLL;
      *(_QWORD *)&v352 = *(_QWORD *)v8;
      *((_QWORD *)&v352 + 1) = HIDWORD(*(_QWORD *)v8);
      v755 = v352;
      v7 = v741;
      do
      {
        sub_23688249C((unint64_t)v8 + ii, (uint64_t *)&v754, xmmword_236922044, a4, &v741[ii]);
        sub_23688249C((unint64_t)&v741[ii], (uint64_t *)&v754, xmmword_236922044, a4, (size_t *)((char *)v721 + ii));
        sub_23688249C((unint64_t)v8 + ii, (uint64_t *)&v754, xmmword_236921FE4, a4, &v741[ii]);
        ii += 40;
        v8 = v623;
      }
      while (ii != 120);
      v752 = 0u;
      __asm { FMOV            V1.4S, #10.0 }
      v751 = _Q1;
      v767 = 0u;
      sub_2367C431C((uint64_t)v748, *(unsigned int *)v741, *(unsigned int *)&v741[4]);
      v348 = v750;
      if (!v750)
      {
        *(_OWORD *)v745 = *(_OWORD *)v748;
        v746 = *(_OWORD *)&v748[16];
        *(_QWORD *)&v748[24] = 0;
        v747 = v749;
        v762[0] = (size_t)v741;
        v762[1] = (size_t)v721;
        v762[2] = (size_t)v745;
        v763 = &v758;
        v764 = &v752;
        v765 = &v751;
        v766 = &v767;
        if (a4)
        {
          sub_236828F68((uint64_t)a4, *(unsigned int *)&v741[4], (uint64_t)v762);
        }
        else
        {
          v760 = 0;
          *(_QWORD *)&v761 = &v760;
          sub_236828F68((uint64_t)&v760, *(unsigned int *)&v741[4], (uint64_t)v762);
        }
        v348 = 0;
        LODWORD(ii) = v745[0];
        LODWORD(v7) = HIDWORD(v745[0]);
        __src = (char *)*((_QWORD *)&v746 + 1);
        v357 = v746;
        *(_QWORD *)&v748[24] = 0;
      }
      v663 = v357;
      if (!v740)
      {
        for (i4 = 13; i4 != -2; i4 -= 5)
          sub_2367C2F38((uint64_t *)&v734[i4]);
      }
    }
    for (i5 = 104; i5 != -16; i5 -= 40)
      sub_2367C2F38((uint64_t *)&v741[i5]);
    if (!DWORD2(v712[1]))
    {
      for (i6 = 13; i6 != -2; i6 -= 5)
        sub_2367C2F38((uint64_t *)&v708[i6]);
    }
    if (v348)
    {
LABEL_562:
      v715 = v348;
LABEL_563:
      for (i7 = 13; i7 != -2; i7 -= 5)
        sub_2367C2F38((uint64_t *)&v721[i7]);
      if (!v731)
      {
        for (i9 = 104; i9 != -16; i9 -= 40)
          sub_2367C2F38((uint64_t *)((char *)&v724 + i9));
      }
      goto LABEL_568;
    }
    v369 = v7;
    sub_2367C431C((uint64_t)v734, ii, v7);
    if (v737)
    {
      LODWORD(v763) = v737;
LABEL_744:
      if ((_DWORD)v763)
      {
        v715 = v763;
      }
      else
      {
        v475 = (float *)v762[0];
        v760 = (float *)v762[0];
        v476 = (float *)v762[1];
        v761 = *(_OWORD *)&v762[1];
        memset(v762, 0, sizeof(v762));
        v477 = (char *)v761;
        v478 = (uint64_t)(v761 - (_QWORD)v475) >> 3;
        v479 = 0x2E8BA2E8BA2E8BA3 * v478;
        if (0x2E8BA2E8BA2E8BACLL * v478 / 0x64uLL >= 0x64)
          v480 = 100;
        else
          v480 = 0x2E8BA2E8BA2E8BACLL * v478 / 0x64uLL;
        if (v479 <= v480
          || ((v481 = 126 - 2 * __clz(v479), v476 != v475) ? (v482 = v481) : (v482 = 0),
              sub_236829258((uint64_t)v475, v476, v482, 1),
              v475 = v760,
              v483 = (char *)v761,
              v477 = (char *)&v760[22 * v480],
              v477 == (char *)v761))
        {
          v484 = v653;
        }
        else
        {
          v484 = v653;
          while (v483 != v477)
          {
            v485 = (void *)*((_QWORD *)v483 - 7);
            if (v485)
            {
              *((_QWORD *)v483 - 6) = v485;
              operator delete(v485);
              v484 = v653;
            }
            v483 -= 88;
          }
          *(_QWORD *)&v761 = v477;
          v475 = v760;
        }
        if (v475 != (float *)v477)
        {
          v486 = v484;
          v607 = (double)*((unint64_t *)&v484 + 1);
          v608 = (double)(unint64_t)v484;
          v487 = (uint64_t *)(v623 + 6);
          v610 = v477;
          do
          {
            v488 = 0;
            memset(v712, 0, 56);
            memset(v711, 0, sizeof(v711));
            *(_OWORD *)v709 = 0u;
            *(_OWORD *)v710 = 0u;
            *(_OWORD *)v708 = 0u;
            *(_QWORD *)&v741[16] = 0;
            v745[1] = 0;
            v745[0] = 0;
            *(_QWORD *)&v746 = 0;
            v490 = *((int *)v475 + 20);
            v489 = *((int *)v475 + 21);
            v642 = *((_QWORD *)v623 + 2);
            v491 = v642 * v489;
            v754 = 0uLL;
            v630 = v489;
            v688 = v722;
            v492 = v722 * v489;
            v493 = v487;
            v494 = v723;
            *(_QWORD *)&v755 = 0;
            do
            {
              v495 = *v493;
              v493 += 5;
              v496 = *(float *)(v495 + v491 + 4 * v490);
              v497 = *v494;
              v494 += 5;
              *(double *)&v745[v488++] = (float)(v496 - *(float *)(v497 + v492 + 4 * v490));
            }
            while (v488 != 3);
            v498 = 0;
            v499 = *(double *)&v745[1];
            v500 = *((_QWORD *)v623 + 8);
            v501 = -2;
            v502 = 0.0;
            v503 = 0.0;
            v504 = 0.0;
            v505 = v723[5];
            v506 = 0.0;
            v507 = 0.0;
            v508 = 0.0;
            do
            {
              v509 = (v501 + v630);
              if (v501 + v630 >= 0 && *((_QWORD *)&v486 + 1) > (unint64_t)v509)
              {
                v510 = v500 + v642 * v509;
                v511 = v688 * v509;
                v512 = v505 + v688 * v509;
                v513 = (double)(int)v509;
                for (i10 = -2; i10 != 3; ++i10)
                {
                  v515 = (i10 + v490);
                  if (i10 + (int)v490 >= 0 && (unint64_t)v486 > v515)
                  {
                    v516 = 0;
                    v517 = -(float)(*(float *)(v510 + 4 * v515) - *(float *)(v512 + 4 * v515));
                    if (v499 > 0.0)
                      v517 = (float)(*(float *)(v510 + 4 * v515) - *(float *)(v512 + 4 * v515));
                    v518 = (double)(int)v515;
                    v519 = v723;
                    do
                    {
                      v520 = *v519;
                      v519 += 5;
                      *(double *)((char *)&v754 + v516) = *(double *)((char *)&v754 + v516)
                                                        + *(float *)(v520 + v511 + 4 * v515);
                      v516 += 8;
                    }
                    while (v516 != 24);
                    v521 = fmax(v517, 0.000001);
                    v508 = v508 + v521 * v518 * v518;
                    v507 = v507 + v521 * v518;
                    v506 = v506 + v521;
                    v504 = v504 + v521 * v513;
                    v503 = v503 + v521 * v518 * v513;
                    v502 = v502 + v521 * v513 * v513;
                    ++v498;
                  }
                }
              }
              ++v501;
            }
            while (v501 != 3);
            v522 = 0;
            *(double *)&v748[16] = v502;
            *(double *)&v741[8] = v504;
            *(double *)v741 = v507;
            *(double *)&v748[8] = v503;
            *(double *)v748 = v508;
            do
            {
              *(double *)&v741[v522] = *(double *)&v741[v522] / v506;
              *(double *)&v748[v522] = *(double *)&v748[v522] / v506;
              *(double *)((char *)&v754 + v522) = *(double *)((char *)&v754 + v522) / (double)v498;
              v522 += 8;
            }
            while (v522 != 24);
            v523 = 0;
            v701 = *(float64x2_t *)v741;
            *(_OWORD *)v708 = *(_OWORD *)v741;
            do
            {
              *(double *)&v710[v523 + 1] = *(double *)&v745[v523] * 1.1;
              ++v523;
            }
            while (v523 != 3);
            _Q1 = v701;
            __asm { FMLS            D0, D1, V1.D[0] }
            v526 = vmlsq_laneq_f64(*(float64x2_t *)&v748[8], _Q1, _Q1, 1);
            v527 = v526.f64[1];
            v615 = v475;
            if (fabs(v526.f64[0]) >= 1.0e-15)
            {
              v697 = v526.f64[0];
              v531 = sqrt((_D0 * v526.f64[1] - v526.f64[0] * v526.f64[0]) * -4.0+ (_D0 + v526.f64[1]) * (_D0 + v526.f64[1]));
              v532 = (_D0 + v526.f64[1] - v531) * 0.5;
              v527 = (_D0 + v526.f64[1] + v531) * 0.5;
              v533 = _D0 - v532;
              v534 = 1.0 / hypot(_D0 - v532, v526.f64[0]);
              v528 = v534 * v533;
              v529 = v697 * v534;
              v530 = -(v534 * v533);
              _D0 = v532;
            }
            else
            {
              v528 = 0.0;
              v529 = 1.0;
              v530 = 0.0;
            }
            *(double *)&v752 = _D0;
            *((double *)&v752 + 1) = v527;
            v736 = v529;
            v735 = v528;
            v734[0] = *(void ***)&v529;
            v734[1] = *(void ***)&v530;
            v535 = *((void **)&v752 + (_D0 >= v527));
            v698 = *((double *)&v752 + (_D0 < v527));
            v709[0] = *(void **)&v698;
            v709[1] = v535;
            v710[0] = COERCE_VOID_(atan2(*(&v735 + (_D0 < v527)), *(&v735 + (_D0 >= v527))));
            v712[0] = v754;
            *(_QWORD *)&v712[1] = v755;
            v536 = __sincos_stret(*(double *)v710);
            v537 = v535;
            v538 = 0;
            v539 = v490 + 2;
            v540 = -v536.__sinval;
            v614 = v490;
            v682 = v490 - 3;
            v541 = v535;
            do
            {
              v677 = v538;
              v542 = &v623[10 * v538 + 6];
              v543 = &v723[5 * v538];
              v544 = 0.0;
              v545 = v630 - 2;
              v546 = 0.0;
              do
              {
                if ((v545 & 0x80000000) == 0 && *((_QWORD *)&v486 + 1) > (unint64_t)v545)
                {
                  v547 = *(_QWORD *)v542 + v642 * v545;
                  v548 = *v543 + v688 * v545;
                  v549 = (double)(int)v545 - v701.f64[1];
                  v550 = v536.__sinval * v549;
                  v551 = v536.__cosval * v549;
                  v552 = v682;
                  do
                  {
                    v553 = (v552 + 1);
                    if (v552 + 1 >= 0 && (unint64_t)v486 > v553)
                    {
                      v554 = (float)(*(float *)(v547 + 4 * v553) - *(float *)(v548 + 4 * v553));
                      v555 = exp(((v551 + v540 * ((double)(int)v553 - v701.f64[0]))* (v551 + v540 * ((double)(int)v553 - v701.f64[0]))/ *(double *)&v537+ (v550 + v536.__cosval * ((double)(int)v553 - v701.f64[0]))* (v550 + v536.__cosval * ((double)(int)v553 - v701.f64[0]))/ v698)* -0.5);
                      v537 = v541;
                      v546 = v546 + v555 * v555;
                      v544 = v544 + v555 * v554;
                    }
                    ++v552;
                  }
                  while (v552 < v539);
                }
                v426 = (int)v545++ < v630 + 2;
              }
              while (v426);
              *(double *)&v710[v677 + 1] = v544 / (v546 + 0.000001);
              v538 = v677 + 1;
            }
            while (v677 != 2);
            v636 = 0;
            v556 = 0;
            v557 = 0;
            v558 = 0;
            v711[1] = 0uLL;
            memset((char *)&v712[1] + 8, 0, 32);
            *((_QWORD *)&v711[2] + 1) = 0;
            v621 = *((_DWORD *)v475 + 6);
            v650 = *((_QWORD *)v475 + 1);
            v655 = *(double *)&v537 + 1.0;
            v632 = *((_DWORD *)v475 + 4);
            v612 = *(_QWORD *)v475;
            v626 = *(_QWORD *)v475 - 2;
            v559 = 0.0;
            v560 = 0.0;
            v561 = 0.0;
            do
            {
              if (v621 >= -3)
              {
                v562 = -2;
                do
                {
                  v563 = (v562 + v650);
                  if (v562 + (int)v650 >= 0
                    && *((_QWORD *)&v486 + 1) > (unint64_t)v563
                    && v632 >= -3)
                  {
                    v564 = *(_QWORD *)&v623[10 * v557 + 6] + v642 * v563;
                    v565 = (double)(int)v563 - v701.f64[1];
                    v683 = v536.__cosval * v565;
                    v689 = v536.__sinval * v565;
                    v678 = (double)((int)v563 - v630);
                    v566 = v626;
                    v567 = v632 + 4;
                    do
                    {
                      if ((v566 & 0x80000000) == 0 && (unint64_t)v486 > v566)
                      {
                        v568 = *(float *)(v564 + 4 * v566);
                        v569 = v710[v557 + 1];
                        v570 = exp(((v689 + v536.__cosval * ((double)v566 - v701.f64[0]))* (v689 + v536.__cosval * ((double)v566 - v701.f64[0]))/ v698+ (v683 + v540 * ((double)v566 - v701.f64[0]))* (v683 + v540 * ((double)v566 - v701.f64[0]))/ *(double *)&v537)* -0.5)* *(double *)&v569;
                        if (v570 > v568 + 0.1)
                        {
                          ++v556;
                          *((double *)&v712[2] + v557) = v570 - v568 + *((double *)&v712[2] + v557);
                          v636 = v556;
                        }
                        v571 = v570 + *((double *)v712 + v557);
                        v572 = (v568 - v571) * (v568 - v571);
                        v561 = v561 + v572;
                        v560 = v560 + vabdd_f64(v568, v571);
                        *(double *)&v711[1] = v561;
                        *((double *)&v711[1] + 1) = v560;
                        v559 = v559
                             + exp(((v678 * 0.0 + (double)(v566 - v614))* (v678 * 0.0 + (double)(v566 - v614))/ (v698 + 1.0)+ (v678 + (double)(v566 - v614) * -0.0) * (v678 + (double)(v566 - v614) * -0.0) / v655)* -0.5)* v572;
                        *((double *)&v711[2] + 1) = v559;
                        ++v558;
                        v537 = v541;
                      }
                      ++v566;
                      --v567;
                    }
                    while (v567);
                  }
                }
                while (v562++ != v621 + 1);
              }
              ++v557;
            }
            while (v557 != 3);
            *((_QWORD *)&v712[1] + 1) = v636;
            v573 = v561 / (double)v558;
            v574 = v559 / (double)v558
                 + *((double *)&v712[2] + 1)
                 + (((double)v630 - v701.f64[1]) * ((double)v630 - v701.f64[1])
                  + ((double)v614 - v701.f64[0]) * ((double)v614 - v701.f64[0]))
                 * 20.0;
            *((double *)&v711[2] + 1) = v574;
            *(double *)&v711[1] = v573;
            *((double *)&v711[1] + 1) = v560 / (double)v558;
            if (v698 < *(double *)&v537)
              v709[0] = v537;
            v487 = (uint64_t *)(v623 + 6);
            if (v701.f64[0] >= 0.0
              && ceil(v701.f64[0]) < v608
              && v701.f64[1] >= 0.0
              && ceil(v701.f64[1]) < v607
              && !v636
              && v573 < 0.005
              && v574 < 300.0)
            {
              v575 = *(double *)v711 * 0.72 + *(double *)&v710[1] * 0.21 + *((double *)v711 + 1) * 0.07;
              if (v575 * v575 > 0.0144
                && (v701.f64[1] - (double)v630) * (v701.f64[1] - (double)v630)
                 + (v701.f64[0] - (double)v614) * (v701.f64[0] - (double)v614) < 1.0)
              {
                v577 = (_QWORD *)v732.i64[1];
                if (v732.i64[1] >= *(_QWORD *)&v733)
                {
                  v578 = sub_23682A16C(v732.i64);
                }
                else
                {
                  sub_236829F90((char **)v732.i64[1]);
                  v577[20] = 0;
                  v577[21] = 0;
                  v578 = (uint64_t)(v577 + 23);
                  v577[22] = 0;
                }
                v732.i64[1] = v578;
                v580 = *(_DWORD **)(v578 - 16);
                v579 = *(_QWORD *)(v578 - 8);
                if ((unint64_t)v580 >= v579)
                {
                  v582 = *(_QWORD *)(v578 - 24);
                  v583 = ((uint64_t)v580 - v582) >> 3;
                  v584 = v583 + 1;
                  if ((unint64_t)(v583 + 1) >> 61)
                    sub_2367C3440();
                  v585 = v579 - v582;
                  if (v585 >> 2 > v584)
                    v584 = v585 >> 2;
                  if ((unint64_t)v585 >= 0x7FFFFFFFFFFFFFF8)
                    v586 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v586 = v584;
                  v587 = (char *)sub_2367CA1FC(v586);
                  v589 = &v587[8 * v583];
                  *(_DWORD *)v589 = v612;
                  *((_DWORD *)v589 + 1) = v650;
                  v591 = *(char **)(v578 - 24);
                  v590 = *(char **)(v578 - 16);
                  v592 = v589;
                  if (v590 != v591)
                  {
                    do
                    {
                      v593 = *((_QWORD *)v590 - 1);
                      v590 -= 8;
                      *((_QWORD *)v592 - 1) = v593;
                      v592 -= 8;
                    }
                    while (v590 != v591);
                    v590 = *(char **)(v578 - 24);
                  }
                  v581 = v589 + 8;
                  *(_QWORD *)(v578 - 24) = v592;
                  *(_QWORD *)(v578 - 16) = v589 + 8;
                  *(_QWORD *)(v578 - 8) = &v587[8 * v588];
                  if (v590)
                    operator delete(v590);
                }
                else
                {
                  *v580 = v612;
                  v580[1] = v650;
                  v581 = v580 + 2;
                }
                *(_QWORD *)(v578 - 16) = v581;
                v594 = v732.i64[1];
                v595 = *((_QWORD *)v475 + 2);
                *(_QWORD *)(v732.i64[1] - 184) = v595;
                v596 = *((_QWORD *)v475 + 3);
                *(_QWORD *)(v594 - 176) = v596;
                if (v596)
                {
                  v597 = 0;
                  v598 = *((_QWORD *)v623 + 2);
                  v599 = v722;
                  v600 = (uint64_t *)(v594 - 96);
                  do
                  {
                    if (v595)
                    {
                      for (i11 = 0; i11 != v595; ++i11)
                      {
                        v602 = 0;
                        v603 = v600;
                        do
                        {
                          v604 = *v603;
                          v603 += 3;
                          *(float *)(v604 + 4 * (i11 + v597 * v595)) = *(float *)(*(_QWORD *)&v623[v602 / 4 + 6]
                                                                                + v598 * (v597 + v650)
                                                                                + 4 * (i11 + v612))
                                                                     - *(float *)(v723[v602 / 8]
                                                                                + v599 * (v597 + v650)
                                                                                + 4 * (i11 + v612));
                          v602 += 40;
                        }
                        while (v602 != 120);
                      }
                    }
                    ++v597;
                  }
                  while (v597 != v596);
                }
              }
            }
            v475 += 22;
          }
          while (v615 + 22 != (float *)v610);
        }
        v715 = 0;
        v713 = v732;
        v714 = (void *)v733;
        v732 = 0uLL;
        v733 = 0;
        sub_2368291F0((void **)&v760);
        if (!(_DWORD)v763)
          sub_2368291F0((void **)v762);
      }
      if (__src)
      {
        v605 = -*((_QWORD *)__src - 3);
        do
          v606 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v606 + v605, &qword_2564313D8));
        free(*((void **)__src - 4));
      }
      goto LABEL_563;
    }
    v370 = v735;
    __dstc = v736;
    v736 = 0.0;
    if ((_DWORD)v7 && (_DWORD)ii)
    {
      v371 = __src;
      v372 = __dstc;
      do
      {
        memcpy(*(void **)&v372, v371, 4 * ii);
        *(_QWORD *)&v372 += *(_QWORD *)&v370;
        v371 += v663;
        --v369;
      }
      while (v369);
    }
    v373 = 0uLL;
    memset(v748, 0, 24);
    v374 = *((_QWORD *)&v653 + 1);
    if (!*((_QWORD *)&v653 + 1))
    {
      v469 = 0;
      v376 = __dstc;
LABEL_735:
      LODWORD(v763) = 0;
      *(_OWORD *)v762 = v373;
      v762[2] = v469;
      memset(v748, 0, 24);
      sub_2368291F0((void **)v748);
      if (v376 != 0.0)
      {
        v470 = -*(_QWORD *)(*(_QWORD *)&v376 - 24);
        do
          v471 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v471 + v470, &qword_2564313D8));
        free(*(void **)(*(_QWORD *)&v376 - 32));
      }
      if (!v737)
      {
        v472 = v736;
        v736 = 0.0;
        if (v472 != 0.0)
        {
          v473 = -*(_QWORD *)(*(_QWORD *)&v472 - 24);
          do
            v474 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v474 + v473, &qword_2564313D8));
          free(*(void **)(*(_QWORD *)&v472 - 32));
        }
      }
      goto LABEL_744;
    }
    v649 = 0;
    v375 = v653;
    v376 = __dstc;
    while (2)
    {
      if (!v375)
        goto LABEL_732;
      v377 = 0;
      v378 = (char *)(*(_QWORD *)&v376 + *(_QWORD *)&v370 * v649);
      v670 = v378;
LABEL_591:
      if (*(float *)&v378[4 * v377] <= 0.04)
      {
LABEL_708:
        if (++v377 >= (unint64_t)v653)
        {
          v375 = v653;
LABEL_732:
          if (++v649 >= v374)
          {
            v373 = *(_OWORD *)v748;
            v469 = *(_QWORD *)&v748[16];
            goto LABEL_735;
          }
          continue;
        }
        goto LABEL_591;
      }
      break;
    }
    v745[1] = 0;
    v745[0] = 0;
    *(_QWORD *)&v746 = 0;
    *(_DWORD *)&v378[4 * v377] = 0;
    v379 = atomic_load((unsigned __int8 *)&qword_2564313B8);
    if ((v379 & 1) == 0 && __cxa_guard_acquire(&qword_2564313B8))
    {
      qword_2564313A0 = 0;
      qword_2564313A8 = 0;
      qword_2564313B0 = 0;
      v468 = operator new(0x40uLL);
      qword_2564313A8 = (uint64_t)(v468 + 4);
      qword_2564313B0 = (uint64_t)(v468 + 4);
      *v468 = xmmword_2369220A4;
      v468[1] = unk_2369220B4;
      v468[2] = xmmword_2369220C4;
      v468[3] = unk_2369220D4;
      qword_2564313A0 = (uint64_t)v468;
      __cxa_atexit((void (*)(void *))sub_2368290D4, &qword_2564313A0, &dword_23675F000);
      __cxa_guard_release(&qword_2564313B8);
      v376 = __dstc;
      v374 = *((_QWORD *)&v653 + 1);
    }
    v380 = (char *)operator new(8uLL);
    v681 = (void *)v377;
    *(_QWORD *)v380 = v377 | (unint64_t)(v649 << 32);
    v381 = v380 + 8;
    v382 = v380 + 8;
    while (1)
    {
      v384 = v382 - 8;
      v383 = *((_QWORD *)v382 - 1);
      v385 = (char *)v745[1];
      if (v745[1] >= (unint64_t)v746)
      {
        v388 = v370;
        v389 = v376;
        v390 = v381;
        v391 = v745[0];
        v392 = (uint64_t)(v745[1] - v745[0]) >> 3;
        v393 = v392 + 1;
        if ((unint64_t)(v392 + 1) >> 61)
          sub_2367C3440();
        v394 = v746 - v745[0];
        if ((uint64_t)(v746 - v745[0]) >> 2 > v393)
          v393 = v394 >> 2;
        if ((unint64_t)v394 >= 0x7FFFFFFFFFFFFFF8)
          v395 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v395 = v393;
        if (v395)
          v395 = (unint64_t)sub_2367CA1FC(v395);
        else
          v396 = 0;
        v386 = (_QWORD *)(v395 + 8 * v392);
        *v386 = v383;
        v387 = (size_t)(v386 + 1);
        if (v385 != (char *)v391)
        {
          do
          {
            v397 = *((_QWORD *)v385 - 1);
            v385 -= 8;
            *--v386 = v397;
          }
          while (v385 != (char *)v391);
          v385 = (char *)v745[0];
        }
        v745[0] = (size_t)v386;
        *(_QWORD *)&v746 = v395 + 8 * v396;
        if (v385)
          operator delete(v385);
        v381 = v390;
        v376 = v389;
        v370 = v388;
        v374 = *((_QWORD *)&v653 + 1);
      }
      else
      {
        *(_QWORD *)v745[1] = v383;
        v386 = (_QWORD *)v745[0];
        v387 = (size_t)(v385 + 8);
      }
      v745[1] = v387;
      v687 = (v387 - (unint64_t)v386) >> 3;
      if (v687 >= 0x3E9)
        break;
      v399 = (_DWORD *)qword_2564313A0;
      v398 = qword_2564313A8;
      if (qword_2564313A0 == qword_2564313A8)
      {
        v382 = v384;
      }
      else
      {
        do
        {
          v400 = (*v399 + v383);
          if (*v399 + (int)v383 < 0
            || (unint64_t)v653 <= v400
            || (v401 = (v399[1] + HIDWORD(v383)), (v401 & 0x80000000) != 0)
            || v374 <= v401
            || (v402 = (char *)(*(_QWORD *)&v376 + *(_QWORD *)&v370 * v401), *(float *)&v402[4 * v400] <= 0.02))
          {
            v382 = v384;
          }
          else
          {
            v403 = v370;
            v404 = v401 << 32;
            *(_DWORD *)&v402[4 * v400] = 0;
            if (v384 >= v381)
            {
              v405 = (v384 - v380) >> 3;
              v406 = v405 + 1;
              if ((unint64_t)(v405 + 1) >> 61)
                sub_2367C3440();
              v407 = v381 - v380;
              v408 = (v381 - v380) >> 2;
              if (v408 > v406)
                v406 = v408;
              if (v407 >= 0x7FFFFFFFFFFFFFF8)
                v409 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v409 = v406;
              if (v409)
                v409 = (unint64_t)sub_2367CA1FC(v409);
              else
                v410 = 0;
              v411 = (unint64_t *)(v409 + 8 * v405);
              *v411 = v404 | v400;
              v382 = (char *)(v411 + 1);
              if (v384 == v380)
              {
                v380 = (char *)(v409 + 8 * v405);
                v376 = __dstc;
                v370 = v403;
              }
              else
              {
                v376 = __dstc;
                v370 = v403;
                do
                {
                  v412 = *((_QWORD *)v384 - 1);
                  v384 -= 8;
                  *--v411 = v412;
                }
                while (v384 != v380);
                v384 = v380;
                v380 = (char *)v411;
              }
              v374 = *((_QWORD *)&v653 + 1);
              v381 = (char *)(v409 + 8 * v410);
              if (v384)
              {
                v413 = v370;
                v414 = v376;
                v415 = v409 + 8 * v410;
                operator delete(v384);
                v381 = (char *)v415;
                v376 = v414;
                v370 = v413;
                v374 = *((_QWORD *)&v653 + 1);
              }
            }
            else
            {
              *(_QWORD *)v384 = v404 | v400;
              v382 = v384 + 8;
              v370 = v403;
              v374 = *((_QWORD *)&v653 + 1);
            }
          }
          v399 += 2;
          v384 = v382;
        }
        while (v399 != (_DWORD *)v398);
      }
      if (v380 == v382)
      {
        if (!v382)
          goto LABEL_643;
        goto LABEL_642;
      }
    }
    v382 = v380;
    if (v380)
LABEL_642:
      operator delete(v382);
LABEL_643:
    v416 = (void *)v745[0];
    if (v687 < 0x3E9)
    {
      v417 = *(_DWORD *)v745[0];
      v418 = *(_DWORD *)(v745[0] + 4);
      if (v745[0] == v745[1])
      {
        v421 = *(_DWORD *)v745[0];
        v420 = *(_DWORD *)(v745[0] + 4);
      }
      else
      {
        v419 = (int *)v745[0];
        v420 = *(_DWORD *)(v745[0] + 4);
        v421 = *(_DWORD *)v745[0];
        do
        {
          v422 = *v419;
          v423 = v419[1];
          v419 += 2;
          if (v422 < v417)
            v417 = v422;
          if (v421 <= v422)
            v421 = v422;
          if (v423 < v420)
            v420 = v423;
          if (v418 <= v423)
            v418 = v423;
        }
        while (v419 != (int *)v745[1]);
      }
      v424 = v421 - v417 + 1;
      v425 = v418 - v420 + 1;
      v426 = v424 > 4 || v425 > 4;
      if (!v426)
      {
        v708[0] = v417;
        v708[1] = v420;
        v709[0] = (void *)v424;
        v709[1] = (void *)v425;
        sub_236829104(v710, (uint64_t)v745);
        *(_QWORD *)&v711[2] = 0;
        memset((char *)v711 + 8, 0, 20);
        if (SLODWORD(v709[1]) < -7)
        {
          v428 = 0;
          v427 = 0;
          v434 = 0.0;
          v436 = 0.0;
          v435 = 0.0;
          v437 = 0.0;
        }
        else
        {
          v427 = 0;
          v428 = 0;
          v429 = LODWORD(v709[1]) + 3;
          if (LODWORD(v709[1]) + 3 <= -4)
            v429 = -4;
          v430 = v429 + 1;
          v431 = LODWORD(v709[0]) + 3;
          if (LODWORD(v709[0]) + 3 <= -4)
            v431 = -4;
          v432 = v431 + 5;
          v433 = -4;
          v434 = 0.0;
          v435 = 0.0;
          v436 = 0.0;
          v437 = 0.0;
          v438 = 0.0;
          do
          {
            v439 = (char *)(v433 + SLODWORD(v708[1]));
            if ((uint64_t)v439 < 0 || v374 <= v439 || SLODWORD(v709[0]) < -7)
            {
              v445 = v438;
            }
            else
            {
              v440 = &__src[(v433 + LODWORD(v708[1])) * v663];
              v442 = v708[1] > (unint64_t)v439 || (char *)v709[1] + v708[1] <= v439;
              v443 = LODWORD(v708[0]) - 4;
              v444 = v432;
              do
              {
                if ((v443 & 0x80000000) != 0 || (unint64_t)v653 <= v443)
                {
                  v445 = v438;
                }
                else
                {
                  v445 = *(float *)&v440[4 * v443];
                  if (v445 <= v438)
                  {
                    v446 = *(float *)&v440[4 * v443];
                    v445 = v438;
                  }
                  else
                  {
                    DWORD2(v711[0]) = *(_DWORD *)&v440[4 * v443];
                    *(_QWORD *)&v711[2] = __PAIR64__(v439, v443);
                    v446 = *(float *)&v440[4 * v443];
                  }
                  v448 = v708[0] > v443 || (char *)v709[0] + v708[0] <= (void *)v443 || v442;
                  if ((v448 & 1) != 0)
                  {
                    v435 = v435 + v446;
                    *((float *)&v711[1] + 1) = v435;
                    v434 = v434 + (float)(*(float *)&v440[4 * v443] * *(float *)&v440[4 * v443]);
                    *((float *)&v711[1] + 2) = v434;
                    ++v427;
                  }
                  else
                  {
                    v437 = v437 + v446;
                    *((float *)v711 + 3) = v437;
                    v436 = v436 + (float)(*(float *)&v440[4 * v443] * *(float *)&v440[4 * v443]);
                    *(float *)&v711[1] = v436;
                    ++v428;
                  }
                  v374 = *((_QWORD *)&v653 + 1);
                }
                ++v443;
                v438 = v445;
                --v444;
              }
              while (v444);
            }
            ++v433;
            v438 = v445;
          }
          while (v430 != (_DWORD)v433);
        }
        *((float *)v711 + 3) = v437 / (float)v428;
        *(float *)&v711[1] = (float)(v436 / (float)v428) - (float)(*((float *)v711 + 3) * *((float *)v711 + 3));
        *((float *)&v711[1] + 1) = v435 / (float)v427;
        *((float *)&v711[1] + 2) = (float)(v434 / (float)v427)
                                 - (float)(*((float *)&v711[1] + 1) * *((float *)&v711[1] + 1));
        *((float *)&v711[1] + 3) = (float)(*((float *)v711 + 3) - *((float *)&v711[1] + 1))
                                 / sqrtf(*((float *)&v711[1] + 2));
        if (*((float *)&v711[1] + 3) >= 12.0)
        {
          v449 = *(_QWORD *)&v748[8];
          if (*(_QWORD *)&v748[8] >= *(_QWORD *)&v748[16])
          {
            v453 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v748[8] - *(_QWORD *)v748) >> 3);
            v454 = v453 + 1;
            if ((unint64_t)(v453 + 1) > 0x2E8BA2E8BA2E8BALL)
              sub_2367C3440();
            if (0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)&v748[16] - *(_QWORD *)v748) >> 3) > v454)
              v454 = 0x5D1745D1745D1746 * ((uint64_t)(*(_QWORD *)&v748[16] - *(_QWORD *)v748) >> 3);
            if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v748[16] - *(_QWORD *)v748) >> 3)) >= 0x1745D1745D1745DLL)
              v455 = 0x2E8BA2E8BA2E8BALL;
            else
              v455 = v454;
            v743 = &v748[16];
            if (v455)
            {
              if (v455 > 0x2E8BA2E8BA2E8BALL)
                sub_2367C3488();
              v456 = (char *)operator new(88 * v455);
            }
            else
            {
              v456 = 0;
            }
            v457 = &v456[88 * v453];
            *(_QWORD *)v741 = v456;
            *(_QWORD *)&v741[8] = v457;
            *(_QWORD *)&v741[16] = v457;
            v742 = &v456[88 * v455];
            v458 = *(_OWORD *)v709;
            *(_OWORD *)v457 = *(_OWORD *)v708;
            *((_OWORD *)v457 + 1) = v458;
            sub_236829104((_QWORD *)v457 + 4, (uint64_t)v710);
            v459 = &v456[88 * v453];
            v460 = *(_OWORD *)((char *)&v711[1] + 8);
            *(_OWORD *)(v459 + 56) = *(_OWORD *)((char *)v711 + 8);
            *(_OWORD *)(v459 + 72) = v460;
            v461 = *(_QWORD *)&v741[8];
            v452 = *(_QWORD *)&v741[16] + 88;
            *(_QWORD *)&v741[16] += 88;
            v462 = *(_QWORD *)&v748[8];
            v463 = *(_QWORD *)v748;
            if (*(_QWORD *)&v748[8] == *(_QWORD *)v748)
            {
              v466 = vdupq_n_s64(*(unint64_t *)&v748[8]);
              v377 = (unint64_t)v681;
              v378 = v670;
            }
            else
            {
              v377 = (unint64_t)v681;
              v378 = v670;
              do
              {
                v464 = *(_OWORD *)(v462 - 88);
                *(_OWORD *)(v461 - 72) = *(_OWORD *)(v462 - 72);
                *(_OWORD *)(v461 - 88) = v464;
                *(_QWORD *)(v461 - 48) = 0;
                *(_QWORD *)(v461 - 40) = 0;
                *(_QWORD *)(v461 - 56) = 0;
                *(_OWORD *)(v461 - 56) = *(_OWORD *)(v462 - 56);
                *(_QWORD *)(v461 - 40) = *(_QWORD *)(v462 - 40);
                *(_QWORD *)(v462 - 56) = 0;
                *(_QWORD *)(v462 - 48) = 0;
                *(_QWORD *)(v462 - 40) = 0;
                v465 = *(_OWORD *)(v462 - 16);
                *(_OWORD *)(v461 - 32) = *(_OWORD *)(v462 - 32);
                *(_OWORD *)(v461 - 16) = v465;
                v461 -= 88;
                v462 -= 88;
              }
              while (v462 != v463);
              v466 = *(int64x2_t *)v748;
              v452 = *(_QWORD *)&v741[16];
            }
            *(_QWORD *)v748 = v461;
            *(_QWORD *)&v748[8] = v452;
            *(int64x2_t *)&v741[8] = v466;
            v467 = *(char **)&v748[16];
            *(_QWORD *)&v748[16] = v742;
            v742 = v467;
            *(_QWORD *)v741 = v466.i64[0];
            sub_236829190((uint64_t)v741);
          }
          else
          {
            v450 = *(_OWORD *)v709;
            **(_OWORD **)&v748[8] = *(_OWORD *)v708;
            *(_OWORD *)(v449 + 16) = v450;
            sub_236829104((_QWORD *)(v449 + 32), (uint64_t)v710);
            v451 = *(_OWORD *)((char *)v711 + 8);
            *(_OWORD *)(v449 + 72) = *(_OWORD *)((char *)&v711[1] + 8);
            *(_OWORD *)(v449 + 56) = v451;
            v452 = v449 + 88;
            v377 = (unint64_t)v681;
            v378 = v670;
          }
          *(_QWORD *)&v748[8] = v452;
          if (v710[0])
          {
            v710[1] = v710[0];
            operator delete(v710[0]);
          }
          v416 = (void *)v745[0];
          v374 = *((_QWORD *)&v653 + 1);
          if (!v745[0])
            goto LABEL_708;
LABEL_707:
          operator delete(v416);
          goto LABEL_708;
        }
        if (v710[0])
        {
          v710[1] = v710[0];
          operator delete(v710[0]);
        }
      }
    }
    v377 = (unint64_t)v681;
    v378 = v670;
    if (!v416)
      goto LABEL_708;
    goto LABEL_707;
  }
  return v235;
}

void sub_236856804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_QWORD *a56)
{
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t i;
  uint64_t j;

  __cxa_guard_abort(&qword_2564313B8);
  if (STACK[0x700])
    operator delete((void *)STACK[0x700]);
  sub_2368291F0((void **)&STACK[0x730]);
  if (a56)
  {
    v57 = -*(a56 - 3);
    do
      v58 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v58 + v57, &qword_2564313D8));
    free((void *)*(a56 - 4));
  }
  if (!LODWORD(STACK[0x628]))
  {
    v59 = STACK[0x618];
    STACK[0x618] = 0;
    if (v59)
    {
      v60 = -*(_QWORD *)(v59 - 24);
      do
        v61 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v61 + v60, &qword_2564313D8));
      free(*(void **)(v59 - 32));
    }
  }
  if (a27)
  {
    v62 = -*(_QWORD *)(a27 - 24);
    do
      v63 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v63 + v62, &qword_2564313D8));
    free(*(void **)(a27 - 32));
  }
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)((char *)&STACK[0x4E0] + i));
  if (!LODWORD(STACK[0x5D8]))
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)((char *)&STACK[0x560] + j));
  }
  STACK[0x560] = (unint64_t)&STACK[0x5E0];
  sub_23682A290((void ***)&STACK[0x560]);
  STACK[0x560] = (unint64_t)&STACK[0x7C0];
  sub_23682A290((void ***)&STACK[0x560]);
  if (!LODWORD(STACK[0x4B8]))
  {
    STACK[0x560] = (unint64_t)&STACK[0x4A0];
    sub_23682A290((void ***)&STACK[0x560]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_236856EA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v5[2];

  if ((_DWORD)a2)
  {
    v3 = a2;
    v5[0] = sub_2367CAAA0;
    v5[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))result)(*(_QWORD *)(result + 8), v5, sub_23685AAC8, sub_23685A8C4, 0, a2);
    }
    else
    {
      for (i = 0; i != v3; ++i)
        result = sub_23685A8C4((uint64_t)v5, i);
    }
  }
  return result;
}

void sub_236856F24(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (_QWORD *)a1)
    v3 = 0;
  else
    v3 = v2;
  sub_236859628(a1, a2, v3, 1);
}

void sub_236856F5C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char *v22;
  char *v23;
  uint64_t *v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v18 = v4 + 184 * a2;
      while (v5 != v18)
      {
        v5 -= 184;
        sub_23682A300(v5);
      }
      a1[1] = v18;
    }
  }
  else
  {
    v8 = a1[2];
    if (0xD37A6F4DE9BD37A7 * ((v8 - v5) >> 3) >= v7)
    {
      v19 = v5 + 184 * v7;
      v20 = 184 * a2 - 8 * ((v5 - *a1) >> 3);
      do
      {
        sub_236829F90((char **)v5);
        *(_QWORD *)(v5 + 160) = 0;
        *(_QWORD *)(v5 + 168) = 0;
        *(_QWORD *)(v5 + 176) = 0;
        v5 += 184;
        v20 -= 184;
      }
      while (v20);
      a1[1] = v19;
    }
    else
    {
      if (a2 > 0x1642C8590B21642)
        sub_2367C3440();
      v24 = a1 + 2;
      v9 = 0xD37A6F4DE9BD37A7 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0xB21642C8590B21)
        v11 = 0x1642C8590B21642;
      else
        v11 = v10;
      v12 = (char *)sub_23682A374(v11);
      v13 = (char **)&v12[184 * v6];
      v21[0] = v12;
      v21[1] = v13;
      v22 = (char *)v13;
      v23 = &v12[184 * v14];
      v15 = 184 * a2;
      v16 = &v12[184 * a2];
      v17 = v15 - 184 * v6;
      do
      {
        sub_236829F90(v13);
        v13[20] = 0;
        v13[21] = 0;
        v13[22] = 0;
        v13 += 23;
        v17 -= 184;
      }
      while (v17);
      v22 = v16;
      sub_23682A3BC(a1, v21);
      sub_23682A440((uint64_t)v21);
    }
  }
}

void sub_2368570F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

BOOL sub_236857118(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  size_t v5;
  const void **v6;
  const void **v7;

  if (*a1 == *a2 && (v2 = a1[1], v2 == a2[1]))
  {
    v3 = 0;
    v4 = 0;
    v5 = v2 * *a1;
    v6 = (const void **)(a2 + 2);
    v7 = (const void **)(a1 + 2);
    do
    {
      if (memcmp(*v7, *v6, v5))
        break;
      v3 = v4 > 1;
      v6 += 3;
      v7 += 3;
      ++v4;
    }
    while (v4 != 3);
  }
  else
  {
    return 0;
  }
  return v3;
}

double sub_2368571B4(double **a1, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  double *v6;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  double *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  _QWORD *v25;
  double *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  double *i;
  uint64_t v35;
  double *v36;
  double *v37;
  uint64_t *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  double v44;

  if (a5 < 1)
    return result;
  v6 = a3;
  v8 = *a1;
  v9 = (unint64_t)a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = v10 >> 3;
  v12 = (double *)((char *)*a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v13 = a1[2];
  if (a5 <= (uint64_t)((uint64_t)v13 - v9) >> 3)
  {
    v20 = (uint64_t)(v9 - (_QWORD)v12) >> 3;
    if (v20 >= a5)
    {
      v21 = &a3[a5];
      v23 = a1[1];
    }
    else
    {
      v21 = &a3[v20];
      if (v21 == a4)
      {
        v23 = a1[1];
      }
      else
      {
        v22 = v21;
        v23 = a1[1];
        do
        {
          v24 = *(_QWORD *)v22++;
          *(_QWORD *)v23++ = v24;
        }
        while (v22 != a4);
      }
      a1[1] = v23;
      if ((uint64_t)(v9 - (_QWORD)v12) < 1)
        return result;
    }
    v37 = &v12[a5];
    v38 = (uint64_t *)&v23[-a5];
    v39 = v23;
    if ((unint64_t)v38 < v9)
    {
      v39 = v23;
      do
      {
        v40 = *v38++;
        *(_QWORD *)v39++ = v40;
      }
      while ((unint64_t)v38 < v9);
    }
    a1[1] = v39;
    if (v23 != v37)
    {
      v41 = 8 * (v23 - v37);
      v42 = (_DWORD *)v23 - 1;
      v43 = (uint64_t)&v8[v11 - 1] + 4;
      do
      {
        *(v42 - 1) = *(_DWORD *)(v43 + v41 - 4);
        *v42 = *(_DWORD *)(v43 + v41);
        v42 -= 2;
        v41 -= 8;
      }
      while (v41);
    }
    if (v21 != a3)
    {
      do
      {
        v44 = *v6++;
        result = v44;
        *v12++ = v44;
      }
      while (v6 != v21);
    }
  }
  else
  {
    v14 = a5 + ((uint64_t)(v9 - (_QWORD)v8) >> 3);
    if (v14 >> 61)
      sub_2367C3440();
    v15 = (char *)v13 - (char *)v8;
    v16 = v15 >> 2;
    if (v15 >> 2 <= v14)
      v16 = v14;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v17 = (unint64_t)sub_2367CA1FC(v17);
    else
      v18 = 0;
    v25 = (_QWORD *)(v17 + 8 * v11);
    v26 = (double *)&v25[a5];
    v27 = 8 * a5;
    v28 = v25;
    do
    {
      v29 = *(_QWORD *)v6++;
      *v28++ = v29;
      v27 -= 8;
    }
    while (v27);
    v30 = *a1;
    if (*a1 != v12)
    {
      v31 = v12;
      do
      {
        v32 = *((_QWORD *)v31-- - 1);
        *--v25 = v32;
      }
      while (v31 != v30);
    }
    v33 = v17 + 8 * v18;
    for (i = a1[1]; v12 != i; ++v26)
    {
      v35 = *(_QWORD *)v12++;
      *(_QWORD *)v26 = v35;
    }
    v36 = *a1;
    *a1 = (double *)v25;
    a1[1] = v26;
    a1[2] = (double *)v33;
    if (v36)
      operator delete(v36);
  }
  return result;
}

uint64_t sub_2368573B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void **v7;
  char *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  char *v20;
  uint64_t i;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;

  v4 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v43 = a2 + 24;
  do
  {
    if (a1 != a2)
    {
      v5 = a1 + v4;
      v7 = (void **)(a1 + v4 + 16);
      v6 = (char *)*v7;
      v8 = *(char **)(v43 + v4 - 8);
      v9 = *(_BYTE **)(v43 + v4);
      v10 = v9 - v8;
      v11 = *(_QWORD *)(a1 + v4 + 32);
      if (v11 - (unint64_t)*v7 >= v9 - v8)
      {
        v16 = *(_BYTE **)(v5 + 24);
        v17 = v16 - v6;
        if (v16 - v6 >= v10)
        {
          if (v9 != v8)
            memmove(*(void **)(a1 + v4 + 16), *(const void **)(v43 + v4 - 8), v9 - v8);
          v20 = &v6[v10];
        }
        else
        {
          if (v16 != v6)
          {
            memmove(*(void **)(a1 + v4 + 16), *(const void **)(v43 + v4 - 8), v16 - v6);
            v6 = *(char **)(v5 + 24);
          }
          v18 = &v8[v17];
          v19 = v9 - &v8[v17];
          if (v19)
            memmove(v6, v18, v19);
          v20 = &v6[v19];
        }
        *(_QWORD *)(v5 + 24) = v20;
      }
      else
      {
        if (v6)
        {
          *(_QWORD *)(a1 + v4 + 24) = v6;
          operator delete(v6);
          v11 = 0;
          *v7 = 0;
          *(_QWORD *)(a1 + v4 + 24) = 0;
          *(_QWORD *)(a1 + v4 + 32) = 0;
        }
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_60;
        v12 = 2 * v11;
        if (2 * v11 <= v10)
          v12 = v9 - v8;
        v13 = v11 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v12;
        if ((v13 & 0x8000000000000000) != 0)
LABEL_60:
          sub_2367C3440();
        v14 = (char *)operator new(v13);
        v15 = v14;
        *v7 = v14;
        *(_QWORD *)(a1 + v4 + 24) = v14;
        *(_QWORD *)(v5 + 32) = &v14[v13];
        if (v9 != v8)
          memmove(v14, v8, v9 - v8);
        *(_QWORD *)(a1 + v4 + 24) = &v15[v10];
      }
    }
    v4 += 24;
  }
  while (v4 != 72);
  for (i = 0; i != 3; ++i)
  {
    while (a1 == a2)
    {
      if (++i == 3)
        return a1;
    }
    sub_2367D4108((char *)(a1 + 24 * i + 88), *(char **)(a2 + 24 * i + 88), *(_QWORD *)(a2 + 24 * i + 96), (uint64_t)(*(_QWORD *)(a2 + 24 * i + 96) - *(_QWORD *)(a2 + 24 * i + 88)) >> 2);
  }
  v22 = *(char **)(a1 + 160);
  v24 = *(char **)(a2 + 160);
  v23 = *(char **)(a2 + 168);
  v25 = (v23 - v24) >> 3;
  v26 = *(_QWORD *)(a1 + 176);
  if (v25 <= (v26 - (uint64_t)v22) >> 3)
  {
    v30 = (_QWORD *)(a1 + 168);
    v29 = *(char **)(a1 + 168);
    v35 = (v29 - v22) >> 3;
    if (v35 >= v25)
    {
      v40 = *(char **)(a1 + 160);
      while (v24 != v23)
      {
        v41 = *(_QWORD *)v24;
        v24 += 8;
        *(_QWORD *)v40 = v41;
        v40 += 8;
      }
      v34 = v40 - v22;
      v29 = v22;
      goto LABEL_58;
    }
    v36 = &v24[8 * v35];
    if (v29 != v22)
    {
      v37 = 8 * v35;
      do
      {
        v38 = *(_QWORD *)v24;
        v24 += 8;
        *(_QWORD *)v22 = v38;
        v22 += 8;
        v37 -= 8;
      }
      while (v37);
    }
    v32 = v29;
    while (v36 != v23)
    {
      v39 = *(_QWORD *)v36;
      v36 += 8;
      *(_QWORD *)v32 = v39;
      v32 += 8;
    }
  }
  else
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 168) = v22;
      operator delete(v22);
      v26 = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
    }
    if (v23 - v24 < 0)
      goto LABEL_61;
    v27 = v26 >> 2;
    if (v26 >> 2 <= v25)
      v27 = (v23 - v24) >> 3;
    v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v27;
    if (v28 >> 61)
LABEL_61:
      sub_2367C3440();
    v29 = (char *)sub_2367CA1FC(v28);
    *(_QWORD *)(a1 + 168) = v29;
    v30 = (_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 160) = v29;
    *(_QWORD *)(a1 + 176) = &v29[8 * v31];
    v32 = v29;
    if (v24 != v23)
    {
      v32 = v29;
      do
      {
        v33 = *(_QWORD *)v24;
        v24 += 8;
        *(_QWORD *)v32 = v33;
        v32 += 8;
      }
      while (v24 != v23);
    }
  }
  v34 = v32 - v29;
LABEL_58:
  *v30 = &v29[v34];
  return a1;
}

void sub_2368576B8(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i3;
  void *v36;
  uint64_t i4;
  void *v38;
  BOOL v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i1;
  void *v58;
  uint64_t i2;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t i;
  void *v75;
  uint64_t j;
  void *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t n;
  void *v88;
  uint64_t ii;
  void *v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t jj;
  void *v104;
  uint64_t kk;
  void *v106;
  uint64_t mm;
  void *v108;
  uint64_t nn;
  void *v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t k;
  void *v117;
  uint64_t m;
  void *v119;
  _BYTE v121[160];
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[96];
  void *__p;
  void *v128;

_QWORD *sub_2368581DC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_2367C3440();
    v4 = (char *)sub_2367CD8AC(a2);
    *a1 = v4;
    a1[2] = &v4[16 * v5];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23685824C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_236858268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  double v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t j;
  uint64_t v63;
  uint64_t v65;
  _BYTE v66[24];
  unint64_t v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70[12];
  int v71;
  char v72;
  uint64_t v73;
  int64x2_t v74;
  _QWORD v75[8];
  char v76;
  uint64_t (**v77)();
  void *__p;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64x2_t v83;
  unint64_t v84;
  _QWORD v85[84];
  uint64_t v86;
  _QWORD v87[10];
  char v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t (**v92)();
  void *v93;
  void *v94;
  int64x2_t v95;
  uint64_t v96;
  __int128 v97;
  __int16 v98;
  __int128 v99;
  char v100;
  int v101;
  uint64_t v102;
  char v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  __int128 v108;
  _BYTE v109[48];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v0;
  BYTE1(v97) = 1;
  *((_QWORD *)&v97 + 1) = 0;
  v98 = 1;
  v100 = 1;
  v101 = -1;
  v102 = 0;
  v103 = 0;
  v104 = 2;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0u;
  memset(v109, 0, 32);
  *(_QWORD *)(v7 + 380) = 0x100000001;
  *(_WORD *)(v7 + 77) = 0;
  *(_BYTE *)(v7 + 68) = 1;
  *(_DWORD *)(v7 + 352) = 0;
  *(_DWORD *)(v7 + 112) = 0;
  *(_WORD *)(v7 + 88) = 0;
  *(_DWORD *)(v7 + 264) = 5;
  v99 = xmmword_2368AF950;
  DWORD1(v97) = 2;
  LOBYTE(v97) = 1;
  v12 = *v9;
  sub_2367D050C((uint64_t)v87, *v9);
  BYTE1(v97) = 0;
  sub_2367F67A4((uint64_t)v87, v11, v12 + 48);
  v13 = *(_QWORD *)(v89 + 328);
  v14 = *(_QWORD *)(v89 + 336);
  if (v13 == v14)
  {
LABEL_35:
    v36 = operator new();
    *(_QWORD *)(v36 + 32) = 0;
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    v86 = v36;
    bzero(&v82, 0x2BCuLL);
    if (v2)
      v37 = &v82;
    else
      v37 = 0;
    sub_23683DBEC(v8, &v97, *v10, (uint64_t)v87, v6, v4, (unint64_t *)v36, (uint64_t)v37);
    if (v2)
    {
      v38 = 0;
      v39 = *(int64x2_t *)(v2 + 80);
      v40 = *(int64x2_t *)(v2 + 96);
      v41 = *(double *)(v2 + 112);
      do
      {
        v39 = vaddq_s64(v39, *(int64x2_t *)((char *)&v82 + v38 * 8));
        v40 = vaddq_s64(v40, *(int64x2_t *)((char *)&v83 + v38 * 8 + 8));
        v41 = *(double *)&v85[v38] + v41;
        v38 += 5;
      }
      while (v38 != 75);
      *(int64x2_t *)(v2 + 80) = v39;
      *(int64x2_t *)(v2 + 96) = v40;
      *(double *)(v2 + 112) = v41;
    }
    v42 = *(uint64_t **)(v36 + 24);
    v43 = *(_QWORD *)v36;
    v44 = (uint64_t *)v10[532];
    v45 = v10[533];
    if ((unint64_t)v44 >= v45)
    {
      v47 = v10[531];
      v48 = ((uint64_t)v44 - v47) >> 3;
      if ((unint64_t)(v48 + 1) >> 61)
        sub_2367C3440();
      v49 = v45 - v47;
      v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1))
        v50 = v48 + 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      v68 = v10 + 533;
      if (v51)
        v51 = (unint64_t)sub_2367CA1FC(v51);
      else
        v52 = 0;
      v53 = (uint64_t *)(v51 + 8 * v48);
      v54 = v51 + 8 * v52;
      v67 = v54;
      v86 = 0;
      *v53 = v36;
      v46 = v53 + 1;
      *(_QWORD *)&v66[16] = v53 + 1;
      v55 = (_QWORD *)v10[532];
      v56 = (_QWORD *)v10[531];
      if (v55 == v56)
      {
        v58 = vdupq_n_s64((unint64_t)v55);
      }
      else
      {
        do
        {
          v57 = *--v55;
          *v55 = 0;
          *--v53 = v57;
        }
        while (v55 != v56);
        v58 = *(int64x2_t *)(v10 + 531);
        v46 = *(_QWORD **)&v66[16];
        v54 = v67;
      }
      v10[531] = (uint64_t)v53;
      v10[532] = (uint64_t)v46;
      *(int64x2_t *)&v66[8] = v58;
      v59 = v10[533];
      v10[533] = v54;
      v67 = v59;
      *(_QWORD *)v66 = v58.i64[0];
      sub_2368172B4((uint64_t)v66);
    }
    else
    {
      v86 = 0;
      *v44 = v36;
      v46 = v44 + 1;
    }
    v10[532] = (uint64_t)v46;
    sub_2367D050C((uint64_t)&v74, *v10);
    sub_2367EE784((uint64_t)v66);
    sub_2367E7864((uint64_t)&v73, *v10);
    sub_2367D2870((uint64_t)v66, (uint64_t)v4, v42, (uint64_t *)(v43 >> 3), (uint64_t)&v74, *v10);
    if (!v71)
      sub_2367D2870((uint64_t)v66, (uint64_t)v4, (uint64_t *)((char *)v42 + v81), (uint64_t *)((v43 >> 3) - v81), (uint64_t)&v74, *v10);
    sub_2367D0618(v10 + 468, v70);
    *((_BYTE *)v10 + 4192) = v72;
    sub_2367E9308((uint64_t)v66);
    *(_QWORD *)v66 = &v80;
    sub_2367D077C((void ***)v66);
    v77 = &off_2507FFA18;
    if (__p)
    {
      v79 = __p;
      operator delete(__p);
    }
    for (i = 25; i != 10; i -= 5)
      sub_2367C2F38(&v74.i64[i]);
    if (v76 < 0)
      operator delete((void *)v75[6]);
    v61 = v74.i64[0];
    v74.i64[0] = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    sub_236817268(&v86);
    v18 = 0;
    goto LABEL_70;
  }
  v65 = v2;
  v74 = 0uLL;
  v75[0] = 0;
  sub_236821CF4(v74.i64, 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 5));
  if (*(_QWORD *)(v89 + 336) == *(_QWORD *)(v89 + 328))
  {
LABEL_34:
    sub_2367D0910((void **)&v95);
    v95 = v74;
    v96 = v75[0];
    v75[0] = 0;
    v74 = 0uLL;
    *(_QWORD *)v66 = &v74;
    sub_2367D077C((void ***)v66);
    v2 = v65;
    goto LABEL_35;
  }
  v15 = 0;
  while (1)
  {
    v16 = v90;
    if (!v90)
    {
      if (v95.i64[0] == v95.i64[1])
        v16 = 0;
      else
        v16 = *(_DWORD *)v95.i64[0];
    }
    v17 = v91;
    if (!v91)
    {
      if (v95.i64[0] == v95.i64[1])
        v17 = 0;
      else
        v17 = *(_DWORD *)(v95.i64[0] + 4);
    }
    sub_2367C431C((uint64_t)v66, v16, v17);
    v18 = v69;
    if (v69)
      break;
    v19 = v67;
    v20 = v68;
    v67 = 0;
    v21 = (_QWORD *)v74.i64[1];
    if (v74.i64[1] >= v75[0])
    {
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((v74.i64[1] - v74.i64[0]) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        sub_2367C3440();
      if (0x999999999999999ALL * ((v75[0] - v74.i64[0]) >> 3) > v24)
        v24 = 0x999999999999999ALL * ((v75[0] - v74.i64[0]) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v75[0] - v74.i64[0]) >> 3) >= 0x333333333333333)
        v25 = 0x666666666666666;
      else
        v25 = v24;
      v85[0] = v75;
      if (v25)
        v25 = (unint64_t)sub_2367DC0A4(v25);
      else
        v26 = 0;
      v27 = v25 + 40 * v23;
      v82 = v25;
      v83.i64[0] = v27;
      v84 = v25 + 40 * v26;
      *(_QWORD *)(v27 + 16) = *(_QWORD *)&v66[16];
      *(_OWORD *)v27 = *(_OWORD *)v66;
      *(_QWORD *)(v27 + 24) = v19;
      *(_QWORD *)(v27 + 32) = v20;
      v22 = (_QWORD *)(v27 + 40);
      v83.i64[1] = v27 + 40;
      v28 = v74.i64[1];
      v29 = v74.i64[0];
      v30 = v83.i64[0];
      if (v74.i64[1] == v74.i64[0])
      {
        v33 = vdupq_n_s64(v74.u64[1]);
      }
      else
      {
        do
        {
          v31 = *(_OWORD *)(v28 - 40);
          *(_QWORD *)(v30 - 24) = *(_QWORD *)(v28 - 24);
          *(_OWORD *)(v30 - 40) = v31;
          v32 = *(_QWORD *)(v28 - 16);
          *(_QWORD *)(v28 - 16) = 0;
          *(_QWORD *)(v30 - 16) = v32;
          *(_QWORD *)(v30 - 8) = *(_QWORD *)(v28 - 8);
          v30 -= 40;
          v28 -= 40;
        }
        while (v28 != v29);
        v33 = v74;
        v22 = (_QWORD *)v83.i64[1];
      }
      v74.i64[0] = v30;
      v74.i64[1] = (uint64_t)v22;
      v83 = v33;
      v34 = v75[0];
      v75[0] = v84;
      v84 = v34;
      v82 = v33.i64[0];
      sub_2367F6844((uint64_t)&v82);
    }
    else
    {
      *(_OWORD *)v74.i64[1] = *(_OWORD *)v66;
      v21[2] = *(_QWORD *)&v66[16];
      v21[3] = v19;
      v21[4] = v20;
      v22 = v21 + 5;
    }
    v74.i64[1] = (uint64_t)v22;
    if (*((_DWORD *)v22 - 10) && *((_DWORD *)v22 - 9))
    {
      v35 = 0;
      do
        bzero((void *)(*(v22 - 2) + *(v22 - 3) * v35++), 4 * *((unsigned int *)v22 - 10));
      while (v35 < *((unsigned int *)v22 - 9));
    }
    if (++v15 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v89 + 336) - *(_QWORD *)(v89 + 328)) >> 5))
      goto LABEL_34;
  }
  *(_QWORD *)v66 = &v74;
  sub_2367D077C((void ***)v66);
LABEL_70:
  *(_QWORD *)v66 = &v95;
  sub_2367D077C((void ***)v66);
  v92 = &off_2507FFA18;
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  for (j = 25; j != 10; j -= 5)
    sub_2367C2F38(&v87[j]);
  if (v88 < 0)
    operator delete((void *)v87[8]);
  v63 = v87[0];
  v87[0] = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  *(_QWORD *)v66 = &v109[8];
  sub_2367D6C0C((void ***)v66);
  if ((v109[7] & 0x80000000) != 0)
    operator delete((void *)v108);
  return v18;
}

void sub_236858A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_2367E9308((uint64_t)va);
  sub_2367EF354((uint64_t *)&STACK[0x1710]);
  sub_236817268((uint64_t *)&STACK[0x1B90]);
  sub_2367EF354((uint64_t *)&STACK[0x1B98]);
  sub_236821D94(v4 - 232);
  _Unwind_Resume(a1);
}

void sub_236858B30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v9 = a1 + 1;
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a2;
  a1[3] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = (void *)a1[4];
  if (v10)
  {
    a1[5] = v10;
    operator delete(v10);
    a1[4] = 0;
    a1[5] = 0;
    a1[6] = 0;
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)a3;
  a1[6] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v11 = (void *)a1[7];
  if (v11)
  {
    a1[8] = v11;
    operator delete(v11);
    a1[7] = 0;
    a1[8] = 0;
    a1[9] = 0;
  }
  *(_OWORD *)(a1 + 7) = *(_OWORD *)a4;
  a1[9] = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_2367E4F18(a1);
}

void sub_236858C08(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t i;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t j;
  char *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  uint64_t k;
  char *v25;
  void *v26;
  char *v27;
  uint64_t m;
  void *v29;
  uint64_t n;
  void *v31;
  _OWORD v32[10];

  v4 = 0;
  v32[0] = *a1;
  do
  {
    v5 = (char *)v32 + v4;
    v6 = (_QWORD *)((char *)a1 + v4);
    *((_OWORD *)v5 + 1) = *(_OWORD *)((char *)a1 + v4 + 16);
    *((_QWORD *)v5 + 4) = *(_QWORD *)((char *)a1 + v4 + 32);
    v6[2] = 0;
    v6[3] = 0;
    v6[4] = 0;
    v4 += 24;
  }
  while (v4 != 72);
  for (i = 0; i != 72; i += 24)
  {
    v8 = (char *)v32 + i;
    v9 = (_QWORD *)((char *)a1 + i);
    *(_OWORD *)(v8 + 88) = *(_OWORD *)((char *)a1 + i + 88);
    *((_QWORD *)v8 + 13) = *(_QWORD *)((char *)a1 + i + 104);
    v9[11] = 0;
    v9[12] = 0;
    v9[13] = 0;
  }
  v10 = 0;
  *a1 = *a2;
  do
  {
    v11 = (char *)a1 + v10;
    v13 = (void **)((char *)a1 + v10 + 16);
    v12 = *v13;
    if (*v13)
    {
      *((_QWORD *)v11 + 3) = v12;
      operator delete(v12);
      *v13 = 0;
      *(_QWORD *)((char *)a1 + v10 + 24) = 0;
      *(_QWORD *)((char *)a1 + v10 + 32) = 0;
    }
    v14 = (uint64_t)a2 + v10 + 16;
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_QWORD *)v11 + 4) = *(_QWORD *)((char *)a2 + v10 + 32);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    v10 += 24;
  }
  while (v10 != 72);
  for (j = 0; j != 72; j += 24)
  {
    v16 = (char *)a1 + j;
    v18 = (void **)((char *)a1 + j + 88);
    v17 = *v18;
    if (*v18)
    {
      *((_QWORD *)v16 + 12) = v17;
      operator delete(v17);
      *v18 = 0;
      *(_QWORD *)((char *)a1 + j + 96) = 0;
      *(_QWORD *)((char *)a1 + j + 104) = 0;
    }
    v19 = (uint64_t)a2 + j + 88;
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_QWORD *)v16 + 13) = *(_QWORD *)((char *)a2 + j + 104);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
  }
  v20 = 0;
  *a2 = v32[0];
  do
  {
    v21 = (char *)a2 + v20;
    v22 = *(void **)((char *)a2 + v20 + 16);
    if (v22)
    {
      *((_QWORD *)v21 + 3) = v22;
      operator delete(v22);
      *((_QWORD *)v21 + 4) = 0;
    }
    v23 = (char *)&v32[1] + v20;
    *((_OWORD *)v21 + 1) = *(_OWORD *)v23;
    *((_QWORD *)v21 + 4) = *(_QWORD *)((char *)&v32[2] + v20);
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = 0;
    v20 += 24;
  }
  while (v20 != 72);
  for (k = 0; k != 72; k += 24)
  {
    v25 = (char *)a2 + k;
    v26 = *(void **)((char *)a2 + k + 88);
    if (v26)
    {
      *((_QWORD *)v25 + 12) = v26;
      operator delete(v26);
      *((_QWORD *)v25 + 13) = 0;
    }
    v27 = (char *)&v32[5] + k + 8;
    *(_OWORD *)(v25 + 88) = *(_OWORD *)v27;
    *((_QWORD *)v25 + 13) = *(_QWORD *)((char *)&v32[6] + k + 8);
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
  }
  for (m = 0; m != -72; m -= 24)
  {
    v29 = *(void **)((char *)&v32[8] + m + 8);
    if (v29)
    {
      *(_QWORD *)((char *)&v32[9] + m) = v29;
      operator delete(v29);
    }
  }
  for (n = 0; n != -72; n -= 24)
  {
    v31 = *(void **)((char *)&v32[4] + n);
    if (v31)
    {
      *(_QWORD *)((char *)&v32[4] + n + 8) = v31;
      operator delete(v31);
    }
  }
}

void sub_236858E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8) * *(_QWORD *)a2;
  v7 = *(_QWORD *)(a3 + 8) * *(_QWORD *)a3;
  if (v6 > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
  {
    if (v7 <= v6)
    {
      sub_236858C08((_OWORD *)a1, (_OWORD *)a2);
      v17 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = v17;
      v18 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a2 + 168) = v18;
      v8 = (uint64_t *)(a2 + 176);
      v19 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 176) = v19;
      if (*(_QWORD *)(a3 + 8) * *(_QWORD *)a3 <= *(_QWORD *)(a2 + 8) * *(_QWORD *)a2)
        return;
      sub_236858C08((_OWORD *)a2, (_OWORD *)a3);
      v20 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
      *(_QWORD *)(a3 + 160) = v20;
      v10 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
    }
    else
    {
      v8 = (uint64_t *)(a1 + 176);
      sub_236858C08((_OWORD *)a1, (_OWORD *)a3);
      v9 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a3 + 160);
      *(_QWORD *)(a3 + 160) = v9;
      v10 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a3 + 168);
    }
    *(_QWORD *)(a3 + 168) = v10;
    v14 = (uint64_t *)(a3 + 176);
    goto LABEL_10;
  }
  if (v7 > v6)
  {
    sub_236858C08((_OWORD *)a2, (_OWORD *)a3);
    v11 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
    *(_QWORD *)(a3 + 160) = v11;
    v12 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
    *(_QWORD *)(a3 + 168) = v12;
    v14 = (uint64_t *)(a2 + 176);
    v13 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
    *(_QWORD *)(a3 + 176) = v13;
    if (*(_QWORD *)(a2 + 8) * *(_QWORD *)a2 > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
    {
      sub_236858C08((_OWORD *)a1, (_OWORD *)a2);
      v15 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = v15;
      v16 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a2 + 168) = v16;
      v8 = (uint64_t *)(a1 + 176);
LABEL_10:
      v21 = *v8;
      *v8 = *v14;
      *v14 = v21;
    }
  }
}

void sub_236859000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_236858E48(a1, a2, a3);
  if (*(_QWORD *)(a4 + 8) * *(_QWORD *)a4 > *(_QWORD *)(a3 + 8) * *(_QWORD *)a3)
  {
    sub_236858C08((_OWORD *)a3, (_OWORD *)a4);
    v8 = *(_QWORD *)(a3 + 160);
    *(_QWORD *)(a3 + 160) = *(_QWORD *)(a4 + 160);
    *(_QWORD *)(a4 + 160) = v8;
    v9 = *(_QWORD *)(a3 + 168);
    *(_QWORD *)(a3 + 168) = *(_QWORD *)(a4 + 168);
    *(_QWORD *)(a4 + 168) = v9;
    v10 = *(_QWORD *)(a3 + 176);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 176);
    *(_QWORD *)(a4 + 176) = v10;
    if (*(_QWORD *)(a3 + 8) * *(_QWORD *)a3 > *(_QWORD *)(a2 + 8) * *(_QWORD *)a2)
    {
      sub_236858C08((_OWORD *)a2, (_OWORD *)a3);
      v11 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
      *(_QWORD *)(a3 + 160) = v11;
      v12 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
      *(_QWORD *)(a3 + 168) = v12;
      v13 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
      *(_QWORD *)(a3 + 176) = v13;
      if (*(_QWORD *)(a2 + 8) * *(_QWORD *)a2 > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
      {
        sub_236858C08((_OWORD *)a1, (_OWORD *)a2);
        v14 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a2 + 160) = v14;
        v15 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a2 + 168) = v15;
        v16 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a2 + 176) = v16;
      }
    }
  }
}

void sub_236859130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_236859000(a1, a2, a3, a4);
  if (*(_QWORD *)(a5 + 8) * *(_QWORD *)a5 > *(_QWORD *)(a4 + 8) * *(_QWORD *)a4)
  {
    sub_236858C08((_OWORD *)a4, (_OWORD *)a5);
    v10 = *(_QWORD *)(a4 + 160);
    *(_QWORD *)(a4 + 160) = *(_QWORD *)(a5 + 160);
    *(_QWORD *)(a5 + 160) = v10;
    v11 = *(_QWORD *)(a4 + 168);
    *(_QWORD *)(a4 + 168) = *(_QWORD *)(a5 + 168);
    *(_QWORD *)(a5 + 168) = v11;
    v12 = *(_QWORD *)(a4 + 176);
    *(_QWORD *)(a4 + 176) = *(_QWORD *)(a5 + 176);
    *(_QWORD *)(a5 + 176) = v12;
    if (*(_QWORD *)(a4 + 8) * *(_QWORD *)a4 > *(_QWORD *)(a3 + 8) * *(_QWORD *)a3)
    {
      sub_236858C08((_OWORD *)a3, (_OWORD *)a4);
      v13 = *(_QWORD *)(a3 + 160);
      *(_QWORD *)(a3 + 160) = *(_QWORD *)(a4 + 160);
      *(_QWORD *)(a4 + 160) = v13;
      v14 = *(_QWORD *)(a3 + 168);
      *(_QWORD *)(a3 + 168) = *(_QWORD *)(a4 + 168);
      *(_QWORD *)(a4 + 168) = v14;
      v15 = *(_QWORD *)(a3 + 176);
      *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 176);
      *(_QWORD *)(a4 + 176) = v15;
      if (*(_QWORD *)(a3 + 8) * *(_QWORD *)a3 > *(_QWORD *)(a2 + 8) * *(_QWORD *)a2)
      {
        sub_236858C08((_OWORD *)a2, (_OWORD *)a3);
        v16 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
        *(_QWORD *)(a3 + 160) = v16;
        v17 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
        *(_QWORD *)(a3 + 168) = v17;
        v18 = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
        *(_QWORD *)(a3 + 176) = v18;
        if (*(_QWORD *)(a2 + 8) * *(_QWORD *)a2 > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
        {
          sub_236858C08((_OWORD *)a1, (_OWORD *)a2);
          v19 = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
          *(_QWORD *)(a2 + 160) = v19;
          v20 = *(_QWORD *)(a1 + 168);
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
          *(_QWORD *)(a2 + 168) = v20;
          v21 = *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
          *(_QWORD *)(a2 + 176) = v21;
        }
      }
    }
  }
}

uint64_t sub_2368592C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void *v14;

  v4 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  do
  {
    v5 = a1 + v4;
    v7 = (void **)(a1 + v4 + 16);
    v6 = *v7;
    if (*v7)
    {
      *(_QWORD *)(v5 + 24) = v6;
      operator delete(v6);
      *v7 = 0;
      *(_QWORD *)(a1 + v4 + 24) = 0;
      *(_QWORD *)(a1 + v4 + 32) = 0;
    }
    v8 = a2 + v4 + 16;
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + v4 + 32);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    v4 += 24;
  }
  while (v4 != 72);
  for (i = 0; i != 72; i += 24)
  {
    v10 = a1 + i;
    v12 = (void **)(a1 + i + 88);
    v11 = *v12;
    if (*v12)
    {
      *(_QWORD *)(v10 + 96) = v11;
      operator delete(v11);
      *v12 = 0;
      *(_QWORD *)(a1 + i + 96) = 0;
      *(_QWORD *)(a1 + i + 104) = 0;
    }
    v13 = a2 + i + 88;
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *(_QWORD *)(v10 + 104) = *(_QWORD *)(a2 + i + 104);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
  }
  v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(_QWORD *)(a1 + 168) = v14;
    operator delete(v14);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  return a1;
}

BOOL sub_2368593D0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t i;
  void *v20;
  _QWORD v21[20];
  void *__p;
  void *v23;

  v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 23;
      if (*(a2 - 22) * *(a2 - 23) > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
      {
        sub_236858C08((_OWORD *)a1, v6);
        v7 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = *(a2 - 3);
        *(a2 - 3) = v7;
        v8 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 176) = *(a2 - 1);
        *(a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_236858E48(a1, a1 + 184, (uint64_t)(a2 - 23));
      return 1;
    case 4uLL:
      sub_236859000(a1, a1 + 184, a1 + 368, (uint64_t)(a2 - 23));
      return 1;
    case 5uLL:
      sub_236859130(a1, a1 + 184, a1 + 368, a1 + 552, (uint64_t)(a2 - 23));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 368);
      sub_236858E48(a1, a1 + 184, a1 + 368);
      v11 = (_QWORD *)(a1 + 552);
      if ((_QWORD *)(a1 + 552) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (v11[1] * *v11 > v10[1] * *v10)
    {
      sub_23682A48C((uint64_t)v21, (uint64_t)v11);
      v14 = v12;
      while (1)
      {
        sub_2368592C0(a1 + v14 + 552, a1 + v14 + 368);
        if (v14 == -368)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 192) * *(_QWORD *)(a1 + v14 + 184);
        v14 -= 184;
        if (v21[1] * v21[0] <= v15)
        {
          v16 = a1 + v14 + 552;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      sub_2368592C0(v16, (uint64_t)v21);
      if (__p)
      {
        v23 = __p;
        operator delete(__p);
      }
      v17 = 0;
      ++v13;
      do
      {
        v18 = (void *)v21[v17 + 17];
        if (v18)
        {
          v21[v17 + 18] = v18;
          operator delete(v18);
        }
        v17 -= 3;
      }
      while (v17 != -9);
      for (i = 0; i != -9; i -= 3)
      {
        v20 = (void *)v21[i + 8];
        if (v20)
        {
          v21[i + 9] = v20;
          operator delete(v20);
        }
      }
      if (v13 == 8)
        return v11 + 23 == a2;
    }
    v10 = v11;
    v12 += 184;
    v11 += 23;
    if (v11 == a2)
      return 1;
  }
}

void sub_236859628(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t i3;
  void *v28;
  BOOL v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i1;
  void *v37;
  uint64_t i2;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  void *v50;
  uint64_t j;
  void *v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t n;
  void *v62;
  uint64_t ii;
  void *v64;
  int64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t jj;
  void *v77;
  uint64_t kk;
  void *v79;
  uint64_t mm;
  void *v81;
  uint64_t nn;
  void *v83;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  void *v89;
  uint64_t m;
  void *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _OWORD *v96;
  int64_t v97;
  _BYTE v98[160];
  void *v99;
  void *v100;
  _QWORD v101[20];
  void *__p;
  void *v103;

uint64_t sub_23685A128(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;

  if (sub_23685A838(a1, a2))
    return 1;
  if (!sub_23685A838(a2, a1))
  {
    v5 = (_DWORD *)a2[20];
    v6 = (_DWORD *)a2[21];
    if (v5 != v6)
    {
      v7 = (_DWORD *)a1[20];
      while (v7 != (_DWORD *)a1[21] && *v7 >= *v5)
      {
        if (*v5 < *v7)
          return 0;
        v8 = v7[1];
        v9 = v5[1];
        if (v8 < v9)
          break;
        result = 0;
        if (v9 >= v8)
        {
          v5 += 2;
          v7 += 2;
          if (v5 != v6)
            continue;
        }
        return result;
      }
      return 1;
    }
  }
  return 0;
}

void sub_23685A1CC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  char v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_23685A128(a2, a1);
  v7 = sub_23685A128(a3, a2);
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      v8 = a1 + 22;
      sub_236858C08(a1, a3);
      v9 = a1[20];
      a1[20] = a3[20];
      a3[20] = v9;
      v10 = a1[21];
      a1[21] = a3[21];
    }
    else
    {
      sub_236858C08(a1, a2);
      v17 = a1[20];
      a1[20] = a2[20];
      a2[20] = v17;
      v18 = a1[21];
      a1[21] = a2[21];
      a2[21] = v18;
      v8 = a2 + 22;
      v19 = a1[22];
      a1[22] = a2[22];
      a2[22] = v19;
      if (!sub_23685A128(a3, a2))
        return;
      sub_236858C08(a2, a3);
      v20 = a2[20];
      a2[20] = a3[20];
      a3[20] = v20;
      v10 = a2[21];
      a2[21] = a3[21];
    }
    a3[21] = v10;
    v14 = a3 + 22;
    goto LABEL_10;
  }
  if (v7)
  {
    sub_236858C08(a2, a3);
    v11 = a2[20];
    a2[20] = a3[20];
    a3[20] = v11;
    v12 = a2[21];
    a2[21] = a3[21];
    a3[21] = v12;
    v14 = a2 + 22;
    v13 = a2[22];
    a2[22] = a3[22];
    a3[22] = v13;
    if (sub_23685A128(a2, a1))
    {
      sub_236858C08(a1, a2);
      v15 = a1[20];
      a1[20] = a2[20];
      a2[20] = v15;
      v16 = a1[21];
      a1[21] = a2[21];
      a2[21] = v16;
      v8 = a1 + 22;
LABEL_10:
      v21 = *v8;
      *v8 = *v14;
      *v14 = v21;
    }
  }
}

void sub_23685A36C(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23685A1CC(a1, a2, a3);
  if (sub_23685A128((_QWORD *)a4, a3))
  {
    sub_236858C08(a3, (_OWORD *)a4);
    v8 = a3[20];
    a3[20] = *(_QWORD *)(a4 + 160);
    *(_QWORD *)(a4 + 160) = v8;
    v9 = a3[21];
    a3[21] = *(_QWORD *)(a4 + 168);
    *(_QWORD *)(a4 + 168) = v9;
    v10 = a3[22];
    a3[22] = *(_QWORD *)(a4 + 176);
    *(_QWORD *)(a4 + 176) = v10;
    if (sub_23685A128(a3, a2))
    {
      sub_236858C08(a2, a3);
      v11 = a2[20];
      a2[20] = a3[20];
      a3[20] = v11;
      v12 = a2[21];
      a2[21] = a3[21];
      a3[21] = v12;
      v13 = a2[22];
      a2[22] = a3[22];
      a3[22] = v13;
      if (sub_23685A128(a2, a1))
      {
        sub_236858C08(a1, a2);
        v14 = a1[20];
        a1[20] = a2[20];
        a2[20] = v14;
        v15 = a1[21];
        a1[21] = a2[21];
        a2[21] = v15;
        v16 = a1[22];
        a1[22] = a2[22];
        a2[22] = v16;
      }
    }
  }
}

void sub_23685A484(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_23685A36C(a1, a2, a3, a4);
  if (sub_23685A128((_QWORD *)a5, (_QWORD *)a4))
  {
    sub_236858C08((_OWORD *)a4, (_OWORD *)a5);
    v10 = *(_QWORD *)(a4 + 160);
    *(_QWORD *)(a4 + 160) = *(_QWORD *)(a5 + 160);
    *(_QWORD *)(a5 + 160) = v10;
    v11 = *(_QWORD *)(a4 + 168);
    *(_QWORD *)(a4 + 168) = *(_QWORD *)(a5 + 168);
    *(_QWORD *)(a5 + 168) = v11;
    v12 = *(_QWORD *)(a4 + 176);
    *(_QWORD *)(a4 + 176) = *(_QWORD *)(a5 + 176);
    *(_QWORD *)(a5 + 176) = v12;
    if (sub_23685A128((_QWORD *)a4, a3))
    {
      sub_236858C08(a3, (_OWORD *)a4);
      v13 = a3[20];
      a3[20] = *(_QWORD *)(a4 + 160);
      *(_QWORD *)(a4 + 160) = v13;
      v14 = a3[21];
      a3[21] = *(_QWORD *)(a4 + 168);
      *(_QWORD *)(a4 + 168) = v14;
      v15 = a3[22];
      a3[22] = *(_QWORD *)(a4 + 176);
      *(_QWORD *)(a4 + 176) = v15;
      if (sub_23685A128(a3, a2))
      {
        sub_236858C08(a2, a3);
        v16 = a2[20];
        a2[20] = a3[20];
        a3[20] = v16;
        v17 = a2[21];
        a2[21] = a3[21];
        a3[21] = v17;
        v18 = a2[22];
        a2[22] = a3[22];
        a3[22] = v18;
        if (sub_23685A128(a2, a1))
        {
          sub_236858C08(a1, a2);
          v19 = a1[20];
          a1[20] = a2[20];
          a2[20] = v19;
          v20 = a1[21];
          a1[21] = a2[21];
          a2[21] = v20;
          v21 = a1[22];
          a1[22] = a2[22];
          a2[22] = v21;
        }
      }
    }
  }
}

BOOL sub_23685A5F4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t i;
  void *v19;
  _QWORD v20[20];
  void *__p;
  void *v22;

  v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_23685A128(a2 - 23, (_QWORD *)a1))
      {
        sub_236858C08((_OWORD *)a1, a2 - 23);
        v6 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 176) = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3uLL:
      sub_23685A1CC((_QWORD *)a1, (_QWORD *)(a1 + 184), a2 - 23);
      return 1;
    case 4uLL:
      sub_23685A36C((_QWORD *)a1, (_QWORD *)(a1 + 184), (_QWORD *)(a1 + 368), (uint64_t)(a2 - 23));
      return 1;
    case 5uLL:
      sub_23685A484((_QWORD *)a1, (_QWORD *)(a1 + 184), (_QWORD *)(a1 + 368), a1 + 552, (uint64_t)(a2 - 23));
      return 1;
    default:
      v9 = (_QWORD *)(a1 + 368);
      sub_23685A1CC((_QWORD *)a1, (_QWORD *)(a1 + 184), (_QWORD *)(a1 + 368));
      v10 = (_QWORD *)(a1 + 552);
      if ((_QWORD *)(a1 + 552) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_23685A128(v10, v9))
    {
      sub_23682A48C((uint64_t)v20, (uint64_t)v10);
      v13 = v11;
      while (1)
      {
        sub_2368592C0(a1 + v13 + 552, a1 + v13 + 368);
        if (v13 == -368)
          break;
        v14 = sub_23685A128(v20, (_QWORD *)(a1 + v13 + 184));
        v13 -= 184;
        if ((v14 & 1) == 0)
        {
          v15 = a1 + v13 + 552;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      sub_2368592C0(v15, (uint64_t)v20);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      v16 = 0;
      ++v12;
      do
      {
        v17 = (void *)v20[v16 + 17];
        if (v17)
        {
          v20[v16 + 18] = v17;
          operator delete(v17);
        }
        v16 -= 3;
      }
      while (v16 != -9);
      for (i = 0; i != -9; i -= 3)
      {
        v19 = (void *)v20[i + 8];
        if (v19)
        {
          v20[i + 9] = v19;
          operator delete(v19);
        }
      }
      if (v12 == 8)
        return v10 + 23 == a2;
    }
    v9 = v10;
    v11 += 184;
    v10 += 23;
    if (v10 == a2)
      return 1;
  }
}

BOOL sub_23685A838(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1 >= *a2;
  if (*a1 != *a2)
    return !v2;
  v5 = a1[1];
  v6 = a2[1];
  v2 = v5 >= v6;
  if (v5 != v6)
    return !v2;
  v7 = v5 * *a1;
  v8 = 2;
  while (1)
  {
    v9 = memcmp((const void *)a1[v8], (const void *)a2[v8], v7);
    if (v9 > 0)
      return 0;
    if (v9)
      break;
    v8 += 3;
    if (v8 == 11)
      return 0;
  }
  return 1;
}

uint64_t sub_23685A8C4(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t i;
  unint64_t v25;
  uint64_t j;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  _BOOL4 v32;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unint64_t **)v2;
  v4 = **(_QWORD **)v2;
  if (v4 >= 4)
  {
    v5 = 0;
    v6 = a2;
    v7 = 4 * a2;
    do
    {
      v8 = 0;
      v9 = 4 * v5;
      v10 = *(_QWORD *)(v2 + 8);
      v11 = *(uint64_t **)v10;
      v12 = *(_QWORD *)(v10 + 8);
      result = ((4 * v5) & 0xFFFFFFFC) + v12 * (v7 & 0xFFFFFFFC);
      v13 = *v11;
      v14 = *(float *)(*v11 + 4 * result);
      v15 = 1;
LABEL_4:
      while (2)
      {
        v16 = 0;
        while (1)
        {
          v17 = (v16 + v9) + (v8 + v7) * v12;
          if (vabds_f32(*(float *)(v13 + 4 * v17), v14) > 0.0001)
            break;
          v18 = 0;
          while (v18 != 2)
          {
            v19 = v18 + 1;
            v20 = vabds_f32(*(float *)(v11[v18 + 1] + 4 * v17), *(float *)(v11[v18 + 1] + 4 * result));
            ++v18;
            if (v20 > 0.0001)
            {
              if ((unint64_t)(v19 - 1) <= 1)
                goto LABEL_13;
              break;
            }
          }
          if (++v16 == 4)
          {
            if (++v8 != 4)
              goto LABEL_4;
            if ((v15 & 1) != 0)
            {
              v21 = 0;
              v22 = 0;
              v23 = v11 + 1;
              for (i = -4; i != 8; ++i)
              {
                v25 = i + v7;
                for (j = -4; j != 8; ++j)
                {
                  v27 = j + v9;
                  if (j + v9 >= 0 && v27 < v4 && (v25 & 0x8000000000000000) == 0 && v25 < v3[1])
                  {
                    v28 = (i + v7) * v12 + v27;
                    if (vabds_f32(*(float *)(v13 + 4 * v28), v14) > 0.0001)
                    {
                      v32 = 0;
                    }
                    else
                    {
                      v29 = 0;
                      while (v29 != 2)
                      {
                        v30 = vabds_f32(*(float *)(v23[v29] + 4 * v28), *(float *)(v23[v29] + 4 * result));
                        ++v29;
                        if (v30 > 0.0001)
                        {
                          v31 = v29 - 1;
                          goto LABEL_29;
                        }
                      }
                      v31 = 2;
LABEL_29:
                      v32 = v31 > 1;
                    }
                    ++v22;
                    v21 += v32;
                  }
                }
              }
              if (7 * v22 <= (unint64_t)(8 * v21))
              {
                *(_BYTE *)(**(_QWORD **)(v2 + 16) + v5 + **(_QWORD **)(v2 + 24) * v6) = 1;
                atomic_store(1u, *(unsigned __int8 **)(v2 + 32));
                v3 = *(unint64_t **)v2;
                v4 = **(_QWORD **)v2;
              }
            }
            goto LABEL_35;
          }
        }
LABEL_13:
        v15 = 0;
        if (++v8 != 4)
          continue;
        break;
      }
LABEL_35:
      ++v5;
    }
    while (v5 < v4 >> 2);
  }
  return result;
}

uint64_t sub_23685AAC8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_23685AAEC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t k;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t m;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[40];
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  char v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  char v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  char v88;
  unsigned int v89;

  v10 = *(_QWORD *)(a1 + 720);
  v11 = *(_QWORD *)(a1 + 728) - v10;
  if (v11)
  {
    v12 = v11 / 560;
    if (v12 <= 1)
      v12 = 1;
    v13 = 1;
    do
    {
      if (*(_DWORD *)v10 || *(_BYTE *)(v10 + 552))
        v13 = 0;
      v10 += 560;
      --v12;
    }
    while (v12);
  }
  else
  {
    v13 = 1;
  }
  sub_2367F1484((uint64_t)v56, a2, 0x80000);
  *(_QWORD *)(a2[3] + ((unint64_t)*a2 >> 3)) = ((unint64_t)(v13 & 1) << (*a2 & 7)) | *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
  ++*a2;
  if ((v13 & 1) == 0)
  {
    v14 = *(_QWORD *)(a1 + 720);
    if (*(_QWORD *)(a1 + 728) != v14)
    {
      v15 = 0;
      v55 = 224;
      v53 = a3;
      v54 = a4;
      v52 = a5;
      while (1)
      {
        v16 = dword_2369237B8[v15];
        v17 = dword_2369237FC[v15];
        v18 = (unsigned int *)(v14 + 560 * v15);
        *(_QWORD *)(a2[3] + ((unint64_t)*a2 >> 3)) = ((unint64_t)*v18 << (*a2 & 7)) | *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
        v19 = *a2 + 3;
        *a2 = v19;
        switch(*v18)
        {
          case 0u:
            *(_QWORD *)(a2[3] + (v19 >> 3)) = ((unint64_t)*((unsigned __int8 *)v18 + 552) << (v19 & 7)) | *(unsigned __int8 *)(a2[3] + (v19 >> 3));
            goto LABEL_62;
          case 1u:
            v20 = 0;
            v21 = v14 + v55;
            do
            {
              for (i = 0; i != 12; i += 4)
              {
                if (sub_2368AD334(a2, *(float *)(v21 + i) * 0.015625))
                  return 1;
              }
              ++v20;
              v21 += 12;
            }
            while (v20 != 3);
            goto LABEL_62;
          case 2u:
            v23 = 0;
            v24 = v14 + v55;
            do
            {
              for (j = 0; j != 24; j += 4)
              {
                if (sub_2368AD334(a2, *(float *)(v24 + j) * 0.015625))
                  return 1;
              }
              ++v23;
              v24 += 24;
            }
            while (v23 != 3);
            goto LABEL_62;
          case 3u:
            for (k = 0; k != 3; ++k)
            {
              v27 = 0;
              v28 = 1;
              do
              {
                v29 = v28;
                if (sub_2368AD334(a2, *(float *)&v18[2 * k + 56 + v27]))
                  return 1;
                v28 = 0;
                v27 = 1;
              }
              while ((v29 & 1) != 0);
            }
            goto LABEL_37;
          case 4u:
            v30 = 0;
            v31 = v14 + v55;
            do
            {
              if (sub_2368AD334(a2, *(float *)(v31 + v30)))
                return 1;
              v30 += 4;
            }
            while (v30 != 12);
LABEL_37:
            v32 = (uint64_t *)(v18 + 2);
            goto LABEL_38;
          case 5u:
            v33 = 0;
            v34 = v14 + v55;
            do
            {
              for (m = 0; m != 9; ++m)
              {
                v36 = 0.015625;
                if (m >= 6)
                  v36 = 1.0;
                if (sub_2368AD334(a2, *(float *)(v34 + 4 * m) * v36))
                  return 1;
              }
              ++v33;
              v34 += 36;
            }
            while (v33 != 3);
            if (!sub_23685B170((uint64_t *)v18 + 1, a2))
            {
              v32 = (uint64_t *)(v18 + 84);
LABEL_38:
              if (!sub_23685B170(v32, a2))
                goto LABEL_62;
            }
            return 1;
          case 6u:
            v37 = sub_23685B170((uint64_t *)v18 + 1, a2);
            if (!(_DWORD)v37)
              goto LABEL_62;
            return v37;
          case 7u:
            sub_2368AD334(a2, *((float *)v18 + 58));
            if (v52)
            {
              LODWORD(v57) = 4;
              *((_QWORD *)&v57 + 1) = v15;
              v58 = 0;
              v59 = 0;
              sub_236850F84(v52, (unint64_t *)a2, 0, 0, (uint64_t)&v57);
            }
            else
            {
              sub_2368001CC((uint64_t)&v82, 8 * v16, 8 * v17, 8, 3);
              v51 = v89;
              if (v89)
              {
                sub_2367E2C48((uint64_t)&v82);
                return v51;
              }
              v38 = 0;
              v39 = 0;
              v75 = v82;
              v40 = v82;
              v82 = 0uLL;
              v41 = v83;
              v83 = 0;
              v77 = v84;
              v76 = v41;
              v78 = v85;
              v85 = 0;
              v84 = 0uLL;
              v81 = v88;
              v79 = v86;
              v80 = v87;
              do
              {
                if ((_DWORD)v17)
                {
                  v42 = 0;
                  v44 = *(_QWORD *)(v40 + (v39 << 6) + 16);
                  v43 = *(_DWORD **)(v40 + (v39 << 6) + 24);
                  v45 = v38;
                  do
                  {
                    v46 = v45;
                    v47 = v43;
                    v48 = 8 * v16;
                    if ((_DWORD)v16)
                    {
                      do
                      {
                        *v47++ = *(_DWORD *)(**((_QWORD **)v18 + 28) + v46);
                        v46 += 4;
                        --v48;
                      }
                      while (v48);
                    }
                    ++v42;
                    v43 = (_DWORD *)((char *)v43 + v44);
                    v45 += 32 * v16;
                  }
                  while (v42 != 8 * v17);
                }
                ++v39;
                v38 += ((int)v17 * (uint64_t)(int)v16) << 8;
              }
              while (v39 != 3);
              v57 = xmmword_2368AF5C0;
              v58 = 1056964608;
              v49 = operator new(0x20uLL);
              v60 = v49 + 2;
              v61 = v49 + 2;
              *v49 = xmmword_2369238DC;
              v49[1] = unk_2369238EC;
              v59 = v49;
              v62 = 1119879168;
              v63 = 32;
              v64 = 0xFFFFFFFFLL;
              v65 = 0x33F8147AELL;
              v66 = 0;
              v67 = xmmword_2368AF5B0;
              v68 = 2;
              v69 = 0;
              v70 = 0u;
              v71 = -1;
              v72 = 256;
              v73 = 0;
              v74 = 0;
              sub_236874FCC((uint64_t *)&v75, &v57, (unint64_t *)a2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              operator delete(v49);
              *(_QWORD *)&v57 = &v77;
              sub_2367D6C98((void ***)&v57);
              *(_QWORD *)&v57 = &v75;
              sub_2367D6D24((void ***)&v57);
              sub_2367E2C48((uint64_t)&v82);
            }
LABEL_62:
            ++v15;
            v14 = *(_QWORD *)(a1 + 720);
            a4 = v54;
            v55 += 560;
            a3 = v53;
            if (v15 >= 0xAF8AF8AF8AF8AF8BLL * ((*(_QWORD *)(a1 + 728) - v14) >> 4))
              goto LABEL_63;
            break;
          default:
            goto LABEL_62;
        }
      }
    }
  }
LABEL_63:
  sub_2367F14F8((uint64_t)v56, a2, a3, a4);
  return 0;
}

void sub_23685B138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t v53;

  sub_2367E2C08(&a33);
  sub_2367DC5FC(&a53);
  sub_2367E2C48(v53 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_23685B170(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  float v8;

  v4 = 0;
  *(_QWORD *)(a2[3] + ((unint64_t)*a2 >> 3)) = ((*a1 - 1) << (*(_BYTE *)a2 & 7)) | *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
  *a2 += 4;
  v6 = a1 + 1;
  v5 = *a1;
  while (!v5)
  {
LABEL_8:
    ++v4;
    v6 = (_QWORD *)((char *)v6 + 68);
    if (v4 == 3)
      return 0;
  }
  v7 = 0;
  while (1)
  {
    v8 = 0.015625;
    if (v7)
      v8 = 1.0;
    if (sub_2368AD334(a2, v8 * *((float *)v6 + v7)))
      return 1;
    ++v7;
    v5 = *a1;
    if (v7 >= *a1)
      goto LABEL_8;
  }
}

uint64_t sub_23685B244(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[40];

  v7 = 0;
  v8 = a1 + 48;
  LOBYTE(v9) = 1;
  do
  {
    v9 = (*(float *)(v8 + v7 * 4) == *(float *)&dword_236923840[v7]) & v9;
    ++v7;
  }
  while (v7 != 3);
  sub_2367F1484((uint64_t)v12, a2, 97);
  *(_QWORD *)(a2[3] + ((unint64_t)*a2 >> 3)) = (v9 << (*a2 & 7)) | *(unsigned __int8 *)(a2[3]
                                                                                             + ((unint64_t)*a2 >> 3));
  ++*a2;
  if ((v9 & 1) != 0)
  {
LABEL_7:
    sub_2367F14F8((uint64_t)v12, a2, a3, a4);
    return 0;
  }
  else
  {
    v10 = 0;
    while (!sub_2368AD334(a2, *(float *)(v8 + v10) * 128.0))
    {
      v10 += 4;
      if (v10 == 12)
        goto LABEL_7;
    }
    return 1;
  }
}

void sub_23685B348(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[2];
  unint64_t v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  for (i = 0; i != 12; i += 4)
  {
    v4 = a1 + i;
    *(float *)(v4 + 48) = 1.0 / *(float *)(a2 + i);
    *(_DWORD *)(v4 + 60) = *(_DWORD *)(a2 + i);
  }
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  sub_23685B244(a1, (uint64_t *)&v12, 0, 0);
  v5 = v12;
  v6 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12;
  if (v6)
  {
    *(_QWORD *)(*((_QWORD *)&v13 + 1) + ((unint64_t)v12 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v13 + 1)
                                                                                           + ((unint64_t)v12 >> 3));
    v5 = v12 + v6;
    *(_QWORD *)&v12 = v12 + v6;
  }
  v7 = *((_QWORD *)&v13 + 1);
  v10[0] = *((_QWORD *)&v13 + 1);
  v10[1] = v5 >> 3;
  sub_2367D31C0((uint64_t)v11, (uint64_t)v10);
  sub_236804EB8(a1, v11);
  *((_QWORD *)&v13 + 1) = 0;
  if (v7)
  {
    v8 = -*(_QWORD *)(v7 - 24);
    do
      v9 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v9 + v8, &qword_2564313D8));
    free(*(void **)(v7 - 32));
  }
}

void sub_23685B43C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(v1 - 40);
  *(_QWORD *)(v1 - 40) = 0;
  if (v3)
  {
    v4 = -*(_QWORD *)(v3 - 24);
    do
      v5 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v5 + v4, &qword_2564313D8));
    free(*(void **)(v3 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23685B47C(uint64_t a1, void **a2, _QWORD *a3)
{
  void **v3;
  void **v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t i;
  _BYTE *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  _BYTE v46[40];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  char v57;
  unsigned int v58;
  void **v59[3];

  v3 = a2;
  v5 = (void **)(a1 + 720);
  if (v5 != a2)
  {
    v7 = (char *)*a2;
    v6 = (uint64_t)a2[1];
    v8 = 0xAF8AF8AF8AF8AF8BLL * ((v6 - (uint64_t)*a2) >> 4);
    v9 = *(_QWORD **)(a1 + 720);
    if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 736) - (_QWORD)v9) >> 4) < v8)
    {
      sub_2367DC280(v5);
      if (v8 > 0x75075075075075)
        goto LABEL_46;
      v10 = 0x5F15F15F15F15F16 * ((uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 720)) >> 4);
      if (v10 <= v8)
        v10 = v8;
      v11 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 720)) >> 4) >= 0x3A83A83A83A83ALL
          ? 0x75075075075075
          : v10;
      if (v11 > 0x75075075075075)
LABEL_46:
        sub_2367C3440();
      v12 = (char *)sub_236804E24(v11);
      *(_QWORD *)(a1 + 720) = v12;
      *(_QWORD *)(a1 + 728) = v12;
      *(_QWORD *)(a1 + 736) = &v12[560 * v13];
      v14 = sub_23685B978((uint64_t)v7, v6, (uint64_t)v12);
LABEL_17:
      *(_QWORD *)(a1 + 728) = v14;
      goto LABEL_24;
    }
    v15 = *(_QWORD *)(a1 + 728);
    if (0xAF8AF8AF8AF8AF8BLL * ((v15 - (uint64_t)v9) >> 4) < v8)
    {
      v16 = (uint64_t)&v7[16 * ((v15 - (uint64_t)v9) >> 4)];
      if ((_QWORD *)v15 != v9)
      {
        v17 = 16 * ((v15 - (uint64_t)v9) >> 4);
        do
        {
          sub_23683C6A0(v9, v7);
          v7 += 560;
          v9 += 70;
          v17 -= 560;
        }
        while (v17);
        v9 = *(_QWORD **)(a1 + 728);
      }
      v14 = sub_23685B978(v16, v6, (uint64_t)v9);
      goto LABEL_17;
    }
    if (v7 != (char *)v6)
    {
      do
      {
        sub_23683C6A0(v9, v7);
        v7 += 560;
        v9 += 70;
      }
      while (v7 != (char *)v6);
      v15 = *(_QWORD *)(a1 + 728);
    }
    while ((_QWORD *)v15 != v9)
      v15 = sub_2367DC53C(v15 - 560);
    *(_QWORD *)(a1 + 728) = v9;
  }
LABEL_24:
  v44 = a1;
  *(_DWORD *)a1 = 0;
  v19 = *v3;
  v18 = v3[1];
  if (v18 != *v3)
  {
    for (i = 0; i < 0xAF8AF8AF8AF8AF8BLL * ((v18 - v19) >> 4); ++i)
    {
      v21 = &v19[560 * i];
      if (*(_DWORD *)v21 == 7)
      {
        v22 = v3;
        v23 = dword_2369237B8[i];
        v24 = dword_2369237FC[i];
        LODWORD(v51) = 4;
        *((_QWORD *)&v51 + 1) = i;
        v52 = 0;
        *(_QWORD *)&v53 = 0;
        v25 = sub_2367E29EC((uint64_t)&v51, a3[60], a3[61]);
        v26 = a3[6];
        sub_2368001CC((uint64_t)&v51, 8 * v23, 8 * v24, 8, 3);
        v27 = v58;
        if (v58)
        {
          sub_2367E2C48((uint64_t)&v51);
          return v27;
        }
        *(_OWORD *)v46 = v51;
        v28 = (_QWORD *)(v26 + 88 * v25);
        *(_QWORD *)&v46[16] = v52;
        v51 = 0uLL;
        v52 = 0;
        *(_OWORD *)&v46[24] = v53;
        v47 = v54;
        v54 = 0;
        v53 = 0uLL;
        v48 = v55;
        v49 = v56;
        v50 = v57;
        sub_23680046C((uint64_t)v28, (uint64_t)v46);
        v59[0] = (void **)&v46[24];
        sub_2367D6C98(v59);
        v59[0] = (void **)v46;
        sub_2367D6D24(v59);
        v29 = 0;
        for (j = 0; j != 3; ++j)
        {
          if ((_DWORD)v24)
          {
            v31 = 0;
            v33 = *(_QWORD *)(*v28 + (j << 6) + 16);
            v32 = *(_DWORD **)(*v28 + (j << 6) + 24);
            v34 = v29;
            do
            {
              v35 = v34;
              v36 = v32;
              v37 = 8 * v23;
              if ((_DWORD)v23)
              {
                do
                {
                  *v36++ = *(_DWORD *)(**((_QWORD **)v21 + 28) + v35);
                  v35 += 4;
                  --v37;
                }
                while (v37);
              }
              ++v31;
              v32 = (_DWORD *)((char *)v32 + v33);
              v34 += 32 * v23;
            }
            while (v31 != 8 * v24);
          }
          v29 += ((int)v24 * (uint64_t)(int)v23) << 8;
        }
        sub_2367E2C48((uint64_t)&v51);
        v3 = v22;
        v19 = *v22;
        v18 = v22[1];
      }
    }
  }
  memset(v46, 0, sizeof(v46));
  sub_23685AAEC(v44, (uint64_t *)v46, 0, 0, 0);
  v38 = *(_QWORD *)v46;
  v39 = ((*(_QWORD *)v46 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)v46;
  if (v39)
  {
    *(_QWORD *)(*(_QWORD *)&v46[24] + (*(_QWORD *)v46 >> 3)) = *(unsigned __int8 *)(*(_QWORD *)&v46[24]
                                                                                  + (*(_QWORD *)v46 >> 3));
    v38 = *(_QWORD *)v46 + v39;
    *(_QWORD *)v46 += v39;
  }
  v59[0] = *(void ***)&v46[24];
  v59[1] = (void **)(v38 >> 3);
  sub_2367D31C0((uint64_t)&v51, (uint64_t)v59);
  sub_236803F74(v44, (unint64_t *)&v51);
  v40 = *(_QWORD *)&v46[24];
  *(_QWORD *)&v46[24] = 0;
  if (v40)
  {
    v41 = -*(_QWORD *)(v40 - 24);
    do
      v42 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v42 + v41, &qword_2564313D8));
    free(*(void **)(v40 - 32));
  }
  return 0;
}

void sub_23685B924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 728) = v21;
  _Unwind_Resume(exception_object);
}

uint64_t sub_23685B978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_236804D7C((_QWORD *)(a3 + v6), (_QWORD *)(a1 + v6));
      v6 += 560;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

float32x4_t sub_23685BA08(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t result;

  v7 = (float32x4_t)vdupq_n_s32(0x3B789536u);
  v8 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v7, a7, a1[2]), a6, a1[1]), a5, *a1);
  v9 = vmlaq_f32(vmlaq_f32(v7, a7, a1[5]), a6, a1[4]);
  v10 = vmlaq_f32(v7, a7, a1[8]);
  v11 = vmaxnmq_f32(v8, (float32x4_t)0);
  v12 = (float32x4_t)vbicq_s8((int8x16_t)vmlaq_s32(vdupq_n_s32(0x54800000u), vshrq_n_s32((int32x4_t)v11, 0x17uLL), vdupq_n_s32(0xFFD55556)), (int8x16_t)vceqzq_s32((int32x4_t)v11));
  v13 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0xBEAAAAAB));
  v14 = 3;
  v15 = (float32x4_t)vdupq_n_s32(0x3FAAAAABu);
  do
  {
    v16 = vmulq_f32(v12, v12);
    v12 = vmlaq_f32(vmulq_f32(v12, v15), vmulq_f32(v16, v16), v13);
    --v14;
  }
  while (v14);
  v17 = vmaxnmq_f32(vmlaq_f32(v9, a5, a1[3]), (float32x4_t)0);
  v18 = (float32x4_t)vbicq_s8((int8x16_t)vmlaq_s32(vdupq_n_s32(0x54800000u), vshrq_n_s32((int32x4_t)v17, 0x17uLL), vdupq_n_s32(0xFFD55556)), (int8x16_t)vceqzq_s32((int32x4_t)v17));
  v19 = vmulq_f32(v17, (float32x4_t)vdupq_n_s32(0xBEAAAAAB));
  v20 = 3;
  v21 = (float32x4_t)vdupq_n_s32(0x3FAAAAABu);
  do
  {
    v22 = vmulq_f32(v18, v18);
    v18 = vmlaq_f32(vmulq_f32(v18, v21), vmulq_f32(v22, v22), v19);
    --v20;
  }
  while (v20);
  v23 = vmaxnmq_f32(vmlaq_f32(vmlaq_f32(v10, a6, a1[7]), a5, a1[6]), (float32x4_t)0);
  v24 = (float32x4_t)vbicq_s8((int8x16_t)vmlaq_s32(vdupq_n_s32(0x54800000u), vshrq_n_s32((int32x4_t)v23, 0x17uLL), vdupq_n_s32(0xFFD55556)), (int8x16_t)vceqzq_s32((int32x4_t)v23));
  v25 = vmulq_f32(v23, (float32x4_t)vdupq_n_s32(0xBEAAAAAB));
  v26 = 3;
  v27 = (float32x4_t)vdupq_n_s32(0x3FAAAAABu);
  do
  {
    v28 = vmulq_f32(v24, v24);
    v24 = vmlaq_f32(vmulq_f32(v24, v27), vmulq_f32(v28, v28), v25);
    --v26;
  }
  while (v26);
  v29 = vmulq_f32(v18, v18);
  v30 = vmlsq_f32(v18, vmulq_f32(v29, v29), v17);
  v31 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
  v32 = vmlaq_f32(v18, v31, v30);
  v33 = vmlaq_f32(a1[10], v17, vmulq_f32(v32, v32));
  v34 = vmulq_f32(v12, v12);
  v35 = vmlaq_f32(v12, v31, vmlsq_f32(v12, vmulq_f32(v34, v34), v11));
  v36 = vmlaq_f32(a1[9], v11, vmulq_f32(v35, v35));
  v37 = vmulq_f32(v24, v24);
  v38 = vmlaq_f32(v24, v31, vmlsq_f32(v24, vmulq_f32(v37, v37), v23));
  result = vmlaq_f32(a1[11], v23, vmulq_f32(v38, v38));
  v37.i64[0] = 0x3F0000003F000000;
  v37.i64[1] = 0x3F0000003F000000;
  *a2 = vmulq_f32(vsubq_f32(v36, v33), v37);
  *a3 = vmulq_f32(vaddq_f32(v36, v33), v37);
  *a4 = result;
  return result;
}

BOOL sub_23685BC0C(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[4];
  char v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a3;
  v11 = a1;
  v4 = a3[1];
  v9 = *a3;
  v7[0] = &v10;
  v7[1] = &v9;
  v7[2] = &v8;
  v7[3] = &v11;
  if (a2)
  {
    v5 = a2;
  }
  else
  {
    v12[0] = 0;
    v12[1] = v12;
    v5 = v12;
  }
  return sub_23685BC70((uint64_t)v5, v4, (uint64_t)v7);
}

BOOL sub_23685BC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23685BDAC, sub_23685BD04, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23685BD04((uint64_t)v6, i);
  return 0;
}

void sub_23685BD04(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  if (**(_QWORD **)(v2 + 8))
  {
    v3 = 0;
    v4 = **(_QWORD ***)v2;
    v5 = v4[2] * a2;
    v6 = (float32x4_t *)(v4[3] + v5);
    v7 = (float32x4_t *)(v4[8] + v5);
    v8 = (float32x4_t *)(v4[13] + v5);
    v9 = v6;
    v10 = v7;
    v11 = v8;
    do
    {
      v12 = *v9++;
      v13 = v12;
      v14 = *v10++;
      v15 = v14;
      v16 = *v11++;
      sub_23685BA08(**(float32x4_t ***)(v2 + 24), v6, v7, v8, v13, v15, v16);
      v3 += 4;
      v6 = v9;
      v7 = v10;
      v8 = v11;
    }
    while (v3 < **(_QWORD **)(v2 + 8));
  }
}

uint64_t sub_23685BDAC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL sub_23685BDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23685C0EC, sub_23685BE64, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23685BE64((uint64_t)v6, i);
  return 0;
}

void sub_23685BE64(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  unsigned __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int128 v17;
  int8x16_t v18;
  unsigned __int128 v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;

  v2 = *(_QWORD *)(a1 + 8);
  if (**(_QWORD **)(v2 + 8))
  {
    v3 = 0;
    v4 = **(_QWORD ***)v2;
    v5 = v4[2] * a2;
    v6 = (float32x4_t *)(v4[3] + v5);
    v7 = (float32x4_t *)(v4[8] + v5);
    v8 = (float32x4_t *)(v4[13] + v5);
    v31 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
    v32 = (float32x4_t)vdupq_n_s32(0x3D9E8391u);
    v29 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
    v30 = (float32x4_t)vdupq_n_s32(0x3F4BD0EAu);
    v27 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
    v28 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
    v25 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
    v26 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
    v23 = (float32x4_t)vdupq_n_s32(0x3966B677u);
    v24 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
    v21 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    v22 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
    v9 = v6;
    v10 = v7;
    v11 = (int8x16_t *)v8;
    do
    {
      v12 = *(int8x16_t *)v9++;
      v13 = v12;
      v14 = *(_OWORD *)&v12 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v15 = *(int8x16_t *)v10++;
      v16 = v15;
      v17 = *(_OWORD *)&v15 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v18 = *v11++;
      v19 = *(_OWORD *)&v18 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v20.i64[0] = 0x8000000080000000;
      v20.i64[1] = 0x8000000080000000;
      sub_23685BA08(**(float32x4_t ***)(v2 + 24), v6, v7, v8, (float32x4_t)vbslq_s8(v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v14, v21), (int8x16_t)vdivq_f32(vmlaq_f32(v23, (float32x4_t)v14, vmlaq_f32(v25, (float32x4_t)v14, vmlaq_f32(v27, (float32x4_t)v14, vmlaq_f32(v30, v31, (float32x4_t)v14)))), vmlaq_f32(v22, (float32x4_t)v14,
                                        vmlaq_f32(v24, (float32x4_t)v14, vmlaq_f32(v26, (float32x4_t)v14, vmlaq_f32(v28, v29, (float32x4_t)v14))))), (int8x16_t)vmulq_f32((float32x4_t)v14, v32)), v13), (float32x4_t)vbslq_s8(v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v17, v21), (int8x16_t)vdivq_f32(vmlaq_f32(v23, (float32x4_t)v17, vmlaq_f32(v25, (float32x4_t)v17, vmlaq_f32(v27, (float32x4_t)v17, vmlaq_f32(v30, v31, (float32x4_t)v17)))), vmlaq_f32(v22,
                                        (float32x4_t)v17,
                                        vmlaq_f32(v24, (float32x4_t)v17, vmlaq_f32(v26, (float32x4_t)v17, vmlaq_f32(v28, v29, (float32x4_t)v17))))), (int8x16_t)vmulq_f32((float32x4_t)v17, v32)), v16), (float32x4_t)vbslq_s8(v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v19, v21), (int8x16_t)vdivq_f32(vmlaq_f32(v23, (float32x4_t)v19, vmlaq_f32(v25, (float32x4_t)v19, vmlaq_f32(v27, (float32x4_t)v19, vmlaq_f32(v30, v31, (float32x4_t)v19)))), vmlaq_f32(v22,
                                        (float32x4_t)v19,
                                        vmlaq_f32(v24, (float32x4_t)v19, vmlaq_f32(v26, (float32x4_t)v19, vmlaq_f32(v28, v29, (float32x4_t)v19))))), (int8x16_t)vmulq_f32((float32x4_t)v19, v32)), v18));
      v3 += 4;
      v6 = v9;
      v7 = v10;
      v8 = (float32x4_t *)v11;
    }
    while (v3 < **(_QWORD **)(v2 + 8));
  }
}

uint64_t sub_23685C0EC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL sub_23685C110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23685C46C, sub_23685C1A4, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23685C1A4((uint64_t)v6, i);
  return 0;
}

void sub_23685C1A4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int128 v15;
  int8x16_t v16;
  float32x4_t v17;
  unsigned __int128 v18;
  float32x4_t v19;
  unsigned __int128 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v2 = *(_QWORD *)(a1 + 8);
  if (**(_QWORD **)(v2 + 16))
  {
    v3 = 0;
    v4 = 0;
    v5 = **(_QWORD ***)v2;
    v6 = v5[2] * a2;
    v7 = v5[3] + v6;
    v8 = v5[8] + v6;
    v9 = v5[13] + v6;
    v10 = **(_QWORD ***)(v2 + 8);
    v11 = v10[2] * a2;
    v12 = v10[3] + v11;
    v13 = v10[8] + v11;
    v14 = v10[13] + v11;
    v32 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
    v33 = (float32x4_t)vdupq_n_s32(0x3D9E8391u);
    v31 = (float32x4_t)vdupq_n_s32(0x3F4BD0EAu);
    v29 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
    v30 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
    v27 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
    v28 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
    v25 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
    v26 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
    v23 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
    v24 = (float32x4_t)vdupq_n_s32(0x3966B677u);
    v22 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    do
    {
      v15 = *(_OWORD *)(v7 + v3) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v16.i64[0] = 0x8000000080000000;
      v16.i64[1] = 0x8000000080000000;
      v17 = (float32x4_t)vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, v22), (int8x16_t)vdivq_f32(vmlaq_f32(v24, (float32x4_t)v15, vmlaq_f32(v26, (float32x4_t)v15, vmlaq_f32(v28, (float32x4_t)v15, vmlaq_f32(v31, v32, (float32x4_t)v15)))), vmlaq_f32(v23, (float32x4_t)v15, vmlaq_f32(v25, (float32x4_t)v15, vmlaq_f32(v27, (float32x4_t)v15, vmlaq_f32(v29, v30, (float32x4_t)v15))))), (int8x16_t)vmulq_f32((float32x4_t)v15, v33)),
                           *(int8x16_t *)(v7 + v3));
      v18 = *(_OWORD *)(v8 + v3) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v19 = (float32x4_t)vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v18, v22), (int8x16_t)vdivq_f32(vmlaq_f32(v24, (float32x4_t)v18, vmlaq_f32(v26, (float32x4_t)v18, vmlaq_f32(v28, (float32x4_t)v18, vmlaq_f32(v31, v32, (float32x4_t)v18)))), vmlaq_f32(v23, (float32x4_t)v18, vmlaq_f32(v25, (float32x4_t)v18, vmlaq_f32(v27, (float32x4_t)v18, vmlaq_f32(v29, v30, (float32x4_t)v18))))), (int8x16_t)vmulq_f32((float32x4_t)v18, v33)),
                           *(int8x16_t *)(v8 + v3));
      v20 = *(_OWORD *)(v9 + v3) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
      v21 = (float32x4_t)vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v20, v22), (int8x16_t)vdivq_f32(vmlaq_f32(v24, (float32x4_t)v20, vmlaq_f32(v26, (float32x4_t)v20, vmlaq_f32(v28, (float32x4_t)v20, vmlaq_f32(v31, v32, (float32x4_t)v20)))), vmlaq_f32(v23, (float32x4_t)v20, vmlaq_f32(v25, (float32x4_t)v20, vmlaq_f32(v27, (float32x4_t)v20, vmlaq_f32(v29, v30, (float32x4_t)v20))))), (int8x16_t)vmulq_f32((float32x4_t)v20, v33)),
                           *(int8x16_t *)(v9 + v3));
      *(float32x4_t *)(v12 + v3) = v17;
      *(float32x4_t *)(v13 + v3) = v19;
      *(float32x4_t *)(v14 + v3) = v21;
      sub_23685BA08(**(float32x4_t ***)(v2 + 32), (float32x4_t *)(v7 + v3), (float32x4_t *)(v8 + v3), (float32x4_t *)(v9 + v3), v17, v19, v21);
      v4 += 4;
      v3 += 16;
    }
    while (v4 < **(_QWORD **)(v2 + 16));
  }
}

uint64_t sub_23685C46C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL sub_23685C490(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, _OWORD *a5, unsigned int *a6, float a7)
{
  uint64_t v14;
  char *v15;
  int32x4_t v16;
  uint64_t i;
  int32x2_t v18;
  unsigned int v20;
  BOOL v21;
  unsigned __int8 v26;
  int32x4_t v27;
  uint64_t k;
  int32x2_t v29;
  uint64_t j;
  int32x2_t v31;
  uint64_t v32;
  __int128 v33;
  unsigned int *v34;
  int32x4_t v35;
  uint64_t m;
  int32x2_t v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int **v40;
  uint64_t *v41;
  char *v42;
  _QWORD **v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD v51[2];
  __int128 v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v14 = a1 + 16;
  v15 = sub_2367CA62C(*(_DWORD *)(a1 + 56) == 1);
  if (sub_2367E7FC8((uint64_t)(v15 + 16), v14))
  {
    for (i = 0; i != 9; ++i)
    {
      *(float *)v16.i32 = (float)(a7 / 255.0) * flt_236923870[i];
      v16 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
      *(int32x4_t *)&v51[2 * i] = v16;
    }
    *(float *)v18.i32 = -cbrtf(0.0037931);
    v53 = vdupq_lane_s32(v18, 0);
    v54 = v53;
    v55 = v53;
    if (a6)
      sub_2367D27D0(a4, (uint64_t)a6);
    return sub_23685BC0C((uint64_t)v51, a3, a4);
  }
  v20 = *(_DWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 28))
    v21 = v20 > 1;
  else
    v21 = 1;
  if (!v21
    && *(_DWORD *)(a1 + 16) == 1
    && *(_DWORD *)(a1 + 20) == 1
    && *(_BYTE *)(a1 + 64) == 0
    && *(_DWORD *)(a1 + 72) == 13)
  {
    for (j = 0; j != 9; ++j)
    {
      *(float *)v16.i32 = (float)(a7 / 255.0) * flt_236923870[j];
      v16 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 0);
      *(int32x4_t *)&v51[2 * j] = v16;
    }
    *(float *)v31.i32 = -cbrtf(0.0037931);
    v53 = vdupq_lane_s32(v31, 0);
    v54 = v53;
    v55 = v53;
    if (a6)
    {
      v47 = a4;
      v48 = v51;
      v32 = a4[1];
      v45 = *a4;
      v46 = a6;
      v39 = &v47;
      v40 = &v46;
      v41 = &v45;
      v42 = &v44;
      v43 = &v48;
      if (a3)
      {
        return sub_23685C110((uint64_t)a3, v32, (uint64_t)&v39);
      }
      else
      {
        v49 = 0;
        v50 = &v49;
        return sub_23685C110((uint64_t)&v49, v32, (uint64_t)&v39);
      }
    }
    else
    {
      v47 = a4;
      v48 = v51;
      v38 = a4[1];
      v46 = (unsigned int *)*a4;
      v39 = &v47;
      v40 = &v46;
      v41 = &v45;
      v42 = (char *)&v48;
      if (a3)
      {
        return sub_23685BDD0((uint64_t)a3, v38, (uint64_t)&v39);
      }
      else
      {
        v49 = 0;
        v50 = &v49;
        return sub_23685BDD0((uint64_t)&v49, v38, (uint64_t)&v39);
      }
    }
  }
  else
  {
    v26 = atomic_load((unsigned __int8 *)&qword_25642EE60);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_25642EE60))
    {
      sub_2367CA2B8((uint64_t)&unk_25642ECD0, 9, 8);
      __cxa_atexit((void (*)(void *))sub_2367CA5D8, &unk_25642ECD0, &dword_23675F000);
      __cxa_guard_release(&qword_25642EE60);
    }
    if (sub_2367E7FC8((uint64_t)&unk_25642ECD0 + 200 * (v20 == 1) + 16, v14))
    {
      for (k = 0; k != 9; ++k)
      {
        *(float *)v27.i32 = (float)(a7 / 255.0) * flt_23692384C[k];
        v27 = vdupq_lane_s32(*(int32x2_t *)v27.i8, 0);
        *(int32x4_t *)&v51[2 * k] = v27;
      }
      *(float *)v29.i32 = -cbrtf(0.0037931);
      v53 = vdupq_lane_s32(v29, 0);
      v54 = v53;
      v55 = v53;
      if (a6)
        sub_2367D27D0(a4, (uint64_t)a6);
      return sub_23685BC0C((uint64_t)v51, a3, a4);
    }
    v51[0] = 0;
    v51[1] = 0;
    *(_QWORD *)&v33 = *(_QWORD *)a4;
    *((_QWORD *)&v33 + 1) = HIDWORD(*(_QWORD *)a4);
    v52 = v33;
    if (a6)
      v34 = a6;
    else
      v34 = a4;
    sub_236847248(a1, (uint64_t)a4, a2, (uint64_t)v51, (uint64_t)v15, a5, a3, v34, a7);
    if (a6)
      sub_2367D27D0(a6, (uint64_t)a4);
    for (m = 0; m != 9; ++m)
    {
      *(float *)v35.i32 = (float)(a7 / 255.0) * flt_236923870[m];
      v35 = vdupq_lane_s32(*(int32x2_t *)v35.i8, 0);
      *(int32x4_t *)&v51[2 * m] = v35;
    }
    *(float *)v37.i32 = -cbrtf(0.0037931);
    v53 = vdupq_lane_s32(v37, 0);
    v54 = v53;
    v55 = v53;
    return sub_23685BC0C((uint64_t)v51, a3, a4);
  }
}

void sub_23685C8A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25642EE60);
  _Unwind_Resume(a1);
}

_QWORD *sub_23685C8C8(_QWORD *result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;

  v4 = result;
  if (*(_BYTE *)(a2 + 64))
    goto LABEL_2;
  if (a3 <= a4)
    v7 = a4;
  else
    v7 = a3;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = v9 - v10;
  if (v8)
  {
    if (v9 != v10)
    {
LABEL_18:
      v33 = 0u;
      v34 = 0u;
      v18 = sub_23685CC0C((uint64_t **)a2, v9, v9, (uint64_t)&v33);
      v19 = *((_QWORD *)&v34 + 1);
      *((_QWORD *)&v34 + 1) = 0;
      if (v19)
      {
        v20 = -*(_QWORD *)(v19 - 24);
        do
          v21 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v21 + v20, &qword_2564313D8));
        free(*(void **)(v19 - 32));
      }
      v22 = (char *)*((_QWORD *)v18 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        v24 = v18;
        do
        {
          v23 = (char *)*((_QWORD *)v24 + 2);
          v25 = *(_QWORD *)v23 == (_QWORD)v24;
          v24 = v23;
        }
        while (!v25);
      }
      if (v23 != (char *)(a2 + 8))
      {
        v26 = *((_QWORD *)v23 + 4) - *(_QWORD *)(a2 + 40);
        if (v26 < v7)
          v7 = v26;
      }
      sub_2367E8BBC((size_t *)v18 + 6, v7);
      v27 = *((_QWORD *)v18 + 8);
      if (v27)
        v28 = v7;
      else
        v28 = 0;
      *((_QWORD *)v18 + 6) = v28;
      *(_BYTE *)(a2 + 65) = 1;
      *((_DWORD *)v4 + 8) = 0;
      *v4 = v27;
      v4[1] = v7;
      v4[2] = 0;
      v4[3] = a2;
      *(_QWORD *)&v34 = 0;
      *((_QWORD *)&v34 + 1) = a2;
      goto LABEL_42;
    }
    v35 = v7;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t *))(v8 + 8))(*(_QWORD *)v8, &v35);
    if (!v35 || (v12 = result) == 0)
    {
      *(_BYTE *)(a2 + 64) = 1;
LABEL_2:
      *((_DWORD *)v4 + 8) = -1;
      return result;
    }
    if (v35 < a3)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a2 + 72) + 16))(**(_QWORD **)(a2 + 72), 0);
      v9 = *(_QWORD *)(a2 + 40);
      goto LABEL_18;
    }
    v33 = 0u;
    v34 = 0u;
    sub_23685CC0C((uint64_t **)a2, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 40), (uint64_t)&v33);
    v29 = *((_QWORD *)&v34 + 1);
    *((_QWORD *)&v34 + 1) = 0;
    if (v29)
    {
      v30 = -*(_QWORD *)(v29 - 24);
      do
        v31 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v31 + v30, &qword_2564313D8));
      free(*(void **)(v29 - 32));
    }
    *(_BYTE *)(a2 + 65) = 1;
    v32 = v35;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = a2;
    *((_DWORD *)v4 + 8) = 0;
    *v4 = v12;
    v4[1] = v32;
  }
  else
  {
    if (v11 + a3 >= **(_QWORD **)(a2 + 32))
      goto LABEL_18;
    v33 = 0u;
    v34 = 0u;
    sub_23685CC0C((uint64_t **)a2, v9, v9, (uint64_t)&v33);
    v13 = *((_QWORD *)&v34 + 1);
    *((_QWORD *)&v34 + 1) = 0;
    if (v13)
    {
      v14 = -*(_QWORD *)(v13 - 24);
      do
        v15 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v15 + v14, &qword_2564313D8));
      free(*(void **)(v13 - 32));
    }
    *(_BYTE *)(a2 + 65) = 1;
    v16 = **(_QWORD **)(a2 + 24) + v11;
    v17 = **(_QWORD **)(a2 + 32) - v11;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = a2;
    *((_DWORD *)v4 + 8) = 0;
    *v4 = v16;
    v4[1] = v17;
  }
  v4[2] = 0;
  v4[3] = a2;
LABEL_42:
  v33 = 0uLL;
  return sub_236831498(&v33);
}

void sub_23685CB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  unint64_t v14;

  if (a12)
  {
    v13 = -*(_QWORD *)(a12 - 24);
    do
      v14 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v14 + v13, &qword_2564313D8));
    free(*(void **)(a12 - 32));
  }
  _Unwind_Resume(exception_object);
}

char *sub_23685CC0C(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t **v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v8 = a1 + 1;
  v7 = (char *)a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = v7;
        v10 = *((_QWORD *)v7 + 4);
        if (v10 <= a2)
          break;
        v7 = *(char **)v9;
        v8 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = (char *)*((_QWORD *)v9 + 1);
      if (!v7)
      {
        v8 = (uint64_t **)(v9 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (char *)(a1 + 1);
LABEL_9:
    v11 = v9;
    v9 = (char *)operator new(0x48uLL);
    *((_QWORD *)v9 + 4) = a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)a4;
    v12 = *(_QWORD *)(a4 + 24);
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a4 + 16);
    *((_QWORD *)v9 + 8) = v12;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v8 = (uint64_t *)v9;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v9;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    sub_2368262D4(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_23685CCEC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[9];
  if (v2 && *(_QWORD *)(v2 + 24))
    (*(void (**)(_QWORD, _QWORD))(v2 + 32))(*(_QWORD *)v2, a1[5]);
  a1[6] = a1[5];
  sub_23685CD34((uint64_t)a1);
}

void sub_23685CD34(uint64_t a1)
{
  unint64_t i;
  unint64_t v2;
  size_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  for (i = *(_QWORD *)(a1 + 56); i < v2; i = *(_QWORD *)(a1 + 56))
  {
    v4 = *(size_t **)(a1 + 32);
    if (v4 && !*v4)
      break;
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 40) + v6;
    if (*(_QWORD *)(*(_QWORD *)a1 + 48))
    {
      v8 = i - v6;
      if (v2 >= v7)
        v2 = v7;
      v9 = v2 - i;
      if (v4)
      {
        v10 = *v4 >= v9 ? v2 - i : *v4;
        memcpy(**(void ***)(a1 + 24), (const void *)(v5[8] + v8), v10);
        v11 = *(_QWORD **)(a1 + 24);
        **(_QWORD **)(a1 + 32) -= v10;
        *v11 += v10;
        *(_QWORD *)(a1 + 56) += v10;
      }
      else if ((sub_23685CE7C(a1, (const void *)(v5[8] + v8), v9) & 1) == 0)
      {
        return;
      }
    }
    else
    {
      if (v2 >= v7)
        v2 = *(_QWORD *)(*(_QWORD *)a1 + 40) + v6;
      *(_QWORD *)(a1 + 56) = v2;
      if (v4)
      {
        v12 = v2 - i;
        **(_QWORD **)(a1 + 24) += v12;
        **(_QWORD **)(a1 + 32) -= v12;
      }
    }
    if (v7 == *(_QWORD *)(a1 + 56))
      sub_23685CF20((void **)a1, v5);
    v13 = *(_QWORD *)(a1 + 72);
    if (v13)
    {
      if (!*(_QWORD *)(v13 + 24))
        (*(void (**)(_QWORD, _QWORD))(v13 + 32))(*(_QWORD *)v13, *(_QWORD *)(a1 + 56));
    }
    v2 = *(_QWORD *)(a1 + 48);
  }
}

uint64_t sub_23685CE7C(uint64_t a1, const void *a2, size_t a3)
{
  void *v6;
  BOOL v7;
  uint64_t v8;
  size_t v9;
  size_t v11;

  v11 = a3;
  v6 = (void *)(*(uint64_t (**)(_QWORD, size_t *))(*(_QWORD *)(a1 + 72) + 8))(**(_QWORD **)(a1 + 72), &v11);
  if (v6)
    v7 = v11 == 0;
  else
    v7 = 1;
  v8 = !v7;
  if (v7)
  {
    *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    if (v11 >= a3)
      v9 = a3;
    else
      v9 = v11;
    v11 = v9;
    memcpy(v6, a2, v9);
    (*(void (**)(_QWORD, size_t))(*(_QWORD *)(a1 + 72) + 16))(**(_QWORD **)(a1 + 72), v11);
    *(_QWORD *)(a1 + 56) += v11;
  }
  return v8;
}

void sub_23685CF20(void **a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = (_QWORD *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v26 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v26);
  }
  if (*a1 == a2)
    *a1 = v4;
  v6 = a1[1];
  a1[2] = (char *)a1[2] - 1;
  v7 = *a2;
  if (*a2)
  {
    v8 = (_QWORD *)a2[1];
    if (!v8)
    {
      v9 = a2;
      goto LABEL_17;
    }
    do
    {
      v9 = v8;
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  else
  {
    v9 = a2;
  }
  v7 = v9[1];
  if (v7)
  {
LABEL_17:
    v10 = 0;
    *(_QWORD *)(v7 + 16) = v9[2];
    goto LABEL_18;
  }
  v10 = 1;
LABEL_18:
  v11 = (_QWORD *)v9[2];
  v12 = (_QWORD *)*v11;
  if ((_QWORD *)*v11 == v9)
  {
    *v11 = v7;
    if (v9 == v6)
    {
      v12 = 0;
      v6 = (_QWORD *)v7;
    }
    else
    {
      v12 = (_QWORD *)v11[1];
    }
  }
  else
  {
    v11[1] = v7;
  }
  v13 = *((unsigned __int8 *)v9 + 24);
  if (v9 != a2)
  {
    v14 = a2[2];
    v9[2] = v14;
    *(_QWORD *)(v14 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v9;
    v16 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v16 + 16) = v9;
    *v9 = v16;
    v9[1] = v15;
    if (v15)
      *(_QWORD *)(v15 + 16) = v9;
    *((_BYTE *)v9 + 24) = *((_BYTE *)a2 + 24);
    if (v6 == a2)
      v6 = v9;
  }
  if (!v13 || !v6)
    goto LABEL_82;
  if (!v10)
  {
    *(_BYTE *)(v7 + 24) = 1;
    goto LABEL_82;
  }
  while (1)
  {
    v17 = v12[2];
    if (*(_QWORD **)v17 != v12)
      break;
    if (!*((_BYTE *)v12 + 24))
    {
      *((_BYTE *)v12 + 24) = 1;
      *(_BYTE *)(v17 + 24) = 0;
      v23 = v12[1];
      *(_QWORD *)v17 = v23;
      if (v23)
        *(_QWORD *)(v23 + 16) = v17;
      v12[2] = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * (**(_QWORD **)(v17 + 16) != v17)) = v12;
      v12[1] = v17;
      *(_QWORD *)(v17 + 16) = v12;
      if (v6 == (_QWORD *)v17)
        v6 = v12;
      v12 = *(_QWORD **)v17;
    }
    v24 = (_BYTE *)*v12;
    if (*v12 && !v24[24])
      goto LABEL_77;
    v25 = (uint64_t *)v12[1];
    if (v25 && !*((_BYTE *)v25 + 24))
    {
      if (v24 && !v24[24])
      {
LABEL_77:
        v25 = v12;
      }
      else
      {
        *((_BYTE *)v25 + 24) = 1;
        *((_BYTE *)v12 + 24) = 0;
        v31 = *v25;
        v12[1] = *v25;
        if (v31)
          *(_QWORD *)(v31 + 16) = v12;
        v25[2] = v12[2];
        *(_QWORD *)(v12[2] + 8 * (*(_QWORD *)v12[2] != (_QWORD)v12)) = v25;
        *v25 = (uint64_t)v12;
        v12[2] = v25;
        v24 = v12;
      }
      v28 = v25[2];
      *((_BYTE *)v25 + 24) = *(_BYTE *)(v28 + 24);
      *(_BYTE *)(v28 + 24) = 1;
      v24[24] = 1;
      v29 = *(uint64_t **)v28;
      v32 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      *(_QWORD *)v28 = v32;
      if (v32)
        *(_QWORD *)(v32 + 16) = v28;
      v29[2] = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * (**(_QWORD **)(v28 + 16) != v28)) = v29;
      v29[1] = v28;
      goto LABEL_81;
    }
    *((_BYTE *)v12 + 24) = 0;
    v22 = (_BYTE *)v12[2];
    if (v22[24])
      v26 = v22 == (_BYTE *)v6;
    else
      v26 = 1;
    if (v26)
      goto LABEL_62;
LABEL_59:
    v12 = *(_QWORD **)(*((_QWORD *)v22 + 2) + 8 * (**((_QWORD **)v22 + 2) == (_QWORD)v22));
  }
  if (!*((_BYTE *)v12 + 24))
  {
    *((_BYTE *)v12 + 24) = 1;
    *(_BYTE *)(v17 + 24) = 0;
    v18 = *(uint64_t **)(v17 + 8);
    v19 = *v18;
    *(_QWORD *)(v17 + 8) = *v18;
    if (v19)
      *(_QWORD *)(v19 + 16) = v17;
    v18[2] = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * (**(_QWORD **)(v17 + 16) != v17)) = v18;
    *v18 = v17;
    *(_QWORD *)(v17 + 16) = v18;
    if (v6 == (_QWORD *)*v12)
      v6 = v12;
    v12 = *(_QWORD **)(*v12 + 8);
  }
  v20 = (_QWORD *)*v12;
  if (!*v12 || *((_BYTE *)v20 + 24))
  {
    v21 = (_QWORD *)v12[1];
    if (v21 && !*((_BYTE *)v21 + 24))
      goto LABEL_68;
    *((_BYTE *)v12 + 24) = 0;
    v22 = (_BYTE *)v12[2];
    if (v22 == (_BYTE *)v6)
    {
      v22 = v6;
LABEL_62:
      v22[24] = 1;
      goto LABEL_82;
    }
    if (!v22[24])
      goto LABEL_62;
    goto LABEL_59;
  }
  v21 = (_QWORD *)v12[1];
  if (v21 && !*((_BYTE *)v21 + 24))
  {
LABEL_68:
    v20 = v12;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v12 + 24) = 0;
    v27 = v20[1];
    *v12 = v27;
    if (v27)
      *(_QWORD *)(v27 + 16) = v12;
    v20[2] = v12[2];
    *(_QWORD *)(v12[2] + 8 * (*(_QWORD *)v12[2] != (_QWORD)v12)) = v20;
    v20[1] = v12;
    v12[2] = v20;
    v21 = v12;
  }
  v28 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v28 + 24);
  *(_BYTE *)(v28 + 24) = 1;
  *((_BYTE *)v21 + 24) = 1;
  v29 = *(uint64_t **)(v28 + 8);
  v30 = *v29;
  *(_QWORD *)(v28 + 8) = *v29;
  if (v30)
    *(_QWORD *)(v30 + 16) = v28;
  v29[2] = *(_QWORD *)(v28 + 16);
  *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * (**(_QWORD **)(v28 + 16) != v28)) = v29;
  *v29 = v28;
LABEL_81:
  *(_QWORD *)(v28 + 16) = v29;
LABEL_82:
  sub_2367C2F38(a2 + 8);
  operator delete(a2);
}

uint64_t sub_23685D318(uint64_t a1, uint64_t a2, int a3, int8x8_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64x2_t v7;

  v4 = 0;
  v5 = a2 + 16;
  v6 = a2 + 8;
  if (a3)
    v6 = 1;
  else
    v5 = a2 + 8;
  a4->i32[0] = bswap32(v6);
  do
  {
    a4->i8[v4 + 4] = *(_BYTE *)(a1 + v4);
    ++v4;
  }
  while (v4 != 4);
  if (!a3)
    return 8;
  v7 = (uint64x2_t)vdupq_n_s64(v5);
  a4[1] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2368AF970), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2368AF960)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2368AF990), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_2368AF980))));
  return 16;
}

uint64_t JxlEncoderVersion()
{
  return 10002;
}

uint64_t sub_23685D3B4(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t m;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  int v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t k;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  size_t v49;
  _QWORD *v50;
  void (*v51)(_QWORD, size_t);
  char v52;
  int v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(_QWORD, unint64_t);
  uint64_t v69;
  _QWORD *v70;
  void (*v71)(_QWORD, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  int8x8_t *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  void (*v91)(_QWORD, uint64_t);
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  int8x16_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  int8x16_t v104;
  int v105;
  _BOOL4 v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  void (*v110)(_QWORD, uint64_t);
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v117;
  _QWORD *v118;
  void (*v119)(_QWORD, uint64_t);
  _BYTE *v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  _OWORD *v141;
  unsigned int v142;
  uint64_t i;
  void *v144;
  void *v145;
  unint64_t v146;
  char *v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  int *v157;
  uint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _DWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  void *v204;
  void *v205;
  char *v206;
  char *v207;
  int *v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  int *v218;
  int *v219;
  int v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  __int128 *v239;
  __int128 *v240;
  unint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  char v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  char v249;
  int v250;
  int v252;
  int v253;
  _BOOL4 v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  char v261;
  int v262;
  char v263;
  unint64_t v264;
  void **v265;
  void **v266;
  int v267;
  char *v268;
  char *v269;
  void *v270;
  void *v271;
  unint64_t v272;
  char *v273;
  unint64_t v274;
  unint64_t v275;
  void *v276;
  void *v277;
  char *v278;
  char *v279;
  void *v280;
  void *v281;
  unint64_t v282;
  char *v283;
  unint64_t v284;
  unint64_t v285;
  void *v286;
  void *v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int v290;
  unsigned int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  uint64_t *v298;
  _QWORD *v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t **v302;
  unint64_t v303;
  uint64_t **v304;
  uint64_t *v305;
  uint64_t *v306;
  unint64_t v307;
  unsigned int v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char v312;
  int v313;
  unint64_t v315;
  unint64_t v316;
  int v317;
  unint64_t v318;
  BOOL v319;
  unint64_t v320;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unsigned __int8 *v326;
  unint64_t v327;
  uint64_t v328;
  unsigned int v329;
  char v330;
  size_t v331;
  char *v332;
  size_t v333;
  unint64_t v334;
  size_t v335;
  unint64_t v336;
  unint64_t v337;
  size_t v338;
  unint64_t v339;
  size_t v340;
  unint64_t v341;
  char *v342;
  size_t v343;
  unint64_t v344;
  size_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  size_t v349;
  char *v350;
  size_t v351;
  unint64_t v352;
  size_t v353;
  unint64_t v354;
  unint64_t v355;
  size_t v356;
  size_t v357;
  char *v358;
  size_t v359;
  unint64_t v360;
  size_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t j;
  unint64_t v366;
  unint64_t v367;
  char *v368;
  char *v369;
  void *v370;
  void *v371;
  char *v372;
  unint64_t v373;
  unint64_t v374;
  void *v375;
  void *v376;
  char *v377;
  unint64_t v378;
  char v379;
  char *v380;
  size_t v381;
  char v382;
  size_t v383;
  size_t v384;
  char *v385;
  size_t v386;
  char v387;
  unint64_t v388;
  size_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  unint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  void *v402;
  unint64_t v403;
  char *v404;
  unint64_t v405;
  unint64_t v406;
  void *v407;
  void *v408;
  char *v409;
  char v410;
  unint64_t v411;
  char *v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  unint64_t v426;
  uint64_t v427;
  unsigned __int8 v428;
  unsigned __int8 v429;
  void **v430;
  int v431;
  int v432;
  _DWORD *v433;
  unint64_t v434;
  int v435;
  _DWORD *v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  char *v441;
  uint64_t v442;
  char *v443;
  int v444;
  char *v445;
  char *v446;
  char *v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unsigned int v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unsigned int v475;
  unint64_t v476;
  char *v477;
  char *v478;
  int *v479;
  int *v480;
  char *v481;
  char *v482;
  char *v483;
  unint64_t v484;
  int v485;
  char v486;
  unint64_t v487;
  unsigned int v488;
  unint64_t v489;
  int *v490;
  int v491;
  uint64_t v492;
  unint64_t v493;
  int v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  uint64_t v498;
  unsigned int v499;
  unint64_t v500;
  unint64_t v501;
  void (*v502)(_QWORD);
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  void *v506[3];
  uint64_t v507;
  void *v508;
  void *v509;
  uint64_t v510;
  uint64_t (**v511)();
  uint64_t v512;
  _BYTE v513[32];
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  void **v518;
  void *__p[2];
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  int64x2_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  char v529;
  int v530;
  unint64_t v531;
  int64x2_t v532;
  uint64_t v533;
  void **v534;
  void *v535[2];
  uint64_t v536;
  int v537;
  size_t v538[2];
  char *v539;
  size_t v540[2];
  char *v541;
  unint64_t v542;
  void ***v543;
  __int128 v544;
  uint64_t v545;

  v521 = 0;
  v522 = 0;
  v523 = 0;
  v2 = *(unint64_t **)(a1 + 80);
  if (*(_BYTE *)(a1 + 2864))
    goto LABEL_2;
  __p[0] = 0;
  __p[1] = 0;
  v520 = 0;
  v30 = sub_236860920(a1, (uint64_t)__p);
  v31 = *(_DWORD *)(a1 + 300);
  if (v31 == -1)
  {
    *(_DWORD *)(a1 + 300) = v30;
    v31 = v30;
  }
  v32 = v31 != 5 || v30 == 5;
  if (!v32 || v30 == -1)
  {
    *(_DWORD *)(a1 + 2852) = 129;
    v34 = 1;
    v35 = 1;
    goto LABEL_126;
  }
  if (*v2)
    v33 = *(_QWORD *)(*v2 + 768);
  else
    v33 = 0;
  v518 = 0;
  v516 = 0u;
  v517 = 0u;
  v506[2] = 0;
  LOBYTE(v507) = 0;
  *(_OWORD *)v506 = xmmword_2368AF9A0;
  sub_2367E8BBC((size_t *)&v516 + 1, 2uLL);
  v508 = v518;
  *((_QWORD *)&v516 + 1) = 2 * (*((_QWORD *)&v517 + 1) != 0);
  v518 = v506;
  **((_QWORD **)&v517 + 1) = **((_BYTE **)&v517 + 1) | 0xFFLL;
  v76 = v516;
  *(_QWORD *)&v516 = v516 + 8;
  *(_QWORD *)(*((_QWORD *)&v517 + 1) + ((unint64_t)v516 >> 3)) = (10 << (v76 & 7)) | *(unsigned __int8 *)(*((_QWORD *)&v517 + 1) + ((unint64_t)v516 >> 3));
  *(_QWORD *)&v516 = v516 + 8;
  sub_2367F14F8((uint64_t)v506, &v516, 0, v33);
  if (sub_2368ACEB0(a1 + 728, &v516, 0, v33))
    goto LABEL_120;
  if (sub_2368ACEB0(a1 + 304, &v516, 0, v33))
    goto LABEL_120;
  *(_BYTE *)(a1 + 768) = *(_BYTE *)(a1 + 345);
  if (sub_2368ACEB0(a1 + 760, &v516, 0, v33))
    goto LABEL_120;
  if (!*(_BYTE *)(a1 + 361))
    goto LABEL_820;
  v124 = *(_QWORD *)(a1 + 384);
  v123 = *(_QWORD *)(a1 + 392);
  v125 = v124 - v123;
  if (v124 == v123)
    goto LABEL_120;
  v535[0] = 0;
  v535[1] = 0;
  v536 = 0;
  v126 = v123 - v124;
  memset(v506, 0, sizeof(v506));
  v524 = 0;
  v525 = 0uLL;
  if ((unint64_t)(v123 - v124) >> 30)
  {
    v127 = 1;
    goto LABEL_777;
  }
  v503 = v124;
  sub_2367E8BBC((size_t *)v535, 9uLL);
  v133 = 0;
  v134 = v536;
  v135 = 9;
  if (!v536)
    v135 = 0;
  v535[0] = (void *)v135;
  LOBYTE(v135) = v126;
  if (v126 >= 0x80)
  {
    v136 = 0;
    v137 = v126;
    do
    {
      v133 = v136 + 1;
      *(_BYTE *)(v134 + v136) = v137 | 0x80;
      v135 = v137 >> 7;
      v138 = v137 >> 14;
      ++v136;
      v137 >>= 7;
    }
    while (v138);
  }
  v139 = (char *)(v133 + 1);
  *(_BYTE *)(v134 + v133) = v135;
  sub_2367E8BBC((size_t *)v535, v133 + 1);
  v505 = v126;
  if (v536)
    v140 = v139;
  else
    v140 = 0;
  v535[0] = v140;
  v531 = 0;
  v532 = 0uLL;
  sub_2367E8BBC(&v531, 0x80uLL);
  v141 = (_OWORD *)v532.i64[1];
  v531 = 128;
  *(_OWORD *)(v532.i64[1] + 64) = xmmword_2369201B8;
  v141[5] = unk_2369201C8;
  v141[6] = xmmword_2369201D8;
  v141[7] = unk_2369201E8;
  *v141 = xmmword_236920178;
  v141[1] = *(_OWORD *)"RGB XYZ ";
  v141[2] = xmmword_236920198;
  v141[3] = unk_2369201A8;
  v142 = bswap32(v126);
  if (v126 >= 0x80)
    v126 = 128;
  *(_DWORD *)v141 = v142;
  if (v126)
  {
    for (i = 0; i != v126; ++i)
    {
      sub_2367F6360((_BYTE *)v503, v505, (uint64_t)v141, i);
      sub_2367F4D8C(&v524, *(_BYTE *)(v503 + i) - *((_BYTE *)v141 + i));
    }
  }
  if (v505 < 0x81)
  {
    sub_2367E8BBC((size_t *)v535, (unint64_t)(v140 + 9));
    if (v536)
      v144 = v140 + 9;
    else
      v144 = 0;
    v535[0] = v144;
    v140[v536] = 0;
    sub_2367E8BBC((size_t *)v535, (unint64_t)(v140 + 1));
    if (v536)
      v145 = v140 + 1;
    else
      v145 = 0;
    v535[0] = v145;
    v146 = v524;
    if (v524)
    {
      v147 = (char *)v525.i64[1];
      do
      {
        v148 = *v147++;
        sub_2367F4D8C((size_t *)v535, v148);
        --v146;
      }
      while (v146);
    }
    v127 = 0;
    goto LABEL_769;
  }
  v467 = v125;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v544 = 0uLL;
  v543 = (void ***)&v544;
  v542 = 128;
  v158 = v503;
  if (v505 >= 0x84)
  {
    v159 = *(_DWORD *)(v503 + 128);
    v542 = 132;
    sub_2367E8BBC((size_t *)v506, 9uLL);
    v160 = bswap32(v159);
    v161 = v160 + 1;
    v162 = v506[2];
    v163 = 9;
    if (!v506[2])
      v163 = 0;
    v506[0] = (void *)v163;
    v468 = v160;
    if (v160 < 0x7F)
    {
      v165 = 0;
      LOBYTE(v166) = v160 + 1;
    }
    else
    {
      v164 = 0;
      do
      {
        v165 = v164 + 1;
        v162[v164] = v161 | 0x80;
        v166 = v161 >> 7;
        v167 = v161 >> 14;
        ++v164;
        v161 >>= 7;
      }
      while (v167);
    }
    v204 = (void *)(v165 + 1);
    v162[v165] = v166;
    sub_2367E8BBC((size_t *)v506, v165 + 1);
    if (v506[2])
      v205 = v204;
    else
      v205 = 0;
    v506[0] = v205;
    if (v159)
    {
      v487 = 0;
      v490 = 0;
      v155 = 0;
      v206 = 0;
      v156 = 0;
      v207 = 0;
      v484 = 0;
      v208 = 0;
      v157 = 0;
      v209 = 0;
      v493 = 0;
      v210 = 12 * v468 + 128;
      v158 = v503;
      while (1)
      {
        v472 = v210;
        v475 = v209;
        if (v542 + 12 > v505)
          goto LABEL_509;
        v477 = v156;
        v479 = v157;
        v211 = 538976288;
        if (v542 + 4 <= v505)
          v211 = *(_DWORD *)(v503 + v542);
        LODWORD(v540[0]) = v211;
        if (v542 + 8 <= v505)
        {
          v213 = v503;
          v212 = bswap32(*(_DWORD *)(v503 + v542 + 4));
        }
        else
        {
          v212 = 0;
          v213 = v503;
        }
        v496 = *(_DWORD *)(v213 + v542 + 8);
        v542 += 12;
        if (v208 >= v490)
        {
          v481 = v155;
          v214 = v208 - v157;
          v215 = v214 + 1;
          if ((unint64_t)(v214 + 1) >> 62)
            sub_2367C3440();
          if (((char *)v490 - (char *)v157) >> 1 > v215)
            v215 = ((char *)v490 - (char *)v157) >> 1;
          if ((unint64_t)((char *)v490 - (char *)v157) >= 0x7FFFFFFFFFFFFFFCLL)
            v216 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v216 = v215;
          if (v216)
          {
            if (v216 >> 62)
              sub_2367C3488();
            v217 = (char *)operator new(4 * v216);
          }
          else
          {
            v217 = 0;
          }
          v218 = (int *)&v217[4 * v214];
          *v218 = v211;
          v219 = v218 + 1;
          if (v208 != v479)
          {
            do
            {
              v220 = *--v208;
              *--v218 = v220;
            }
            while (v208 != v479);
            v208 = v479;
          }
          v479 = v218;
          v490 = (int *)&v217[4 * v216];
          if (v208)
            operator delete(v208);
          v208 = v219;
          v155 = v481;
        }
        else
        {
          *v208++ = v211;
        }
        v221 = v212;
        v470 = v212;
        if ((unint64_t)v206 >= v487)
        {
          v222 = (v206 - v155) >> 3;
          v223 = v222 + 1;
          if ((unint64_t)(v222 + 1) >> 61)
            sub_2367C3440();
          if ((uint64_t)(v487 - (_QWORD)v155) >> 2 > v223)
            v223 = (uint64_t)(v487 - (_QWORD)v155) >> 2;
          if (v487 - (unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
            v224 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v224 = v223;
          if (v224)
            v224 = (unint64_t)sub_2367CA1FC(v224);
          else
            v225 = 0;
          v226 = (char *)(v224 + 8 * v222);
          *(_QWORD *)v226 = v221;
          v227 = v226 + 8;
          while (v206 != v155)
          {
            v228 = *((_QWORD *)v206 - 1);
            v206 -= 8;
            *((_QWORD *)v226 - 1) = v228;
            v226 -= 8;
          }
          v487 = v224 + 8 * v225;
          if (v155)
            operator delete(v155);
          v155 = v226;
          v206 = v227;
        }
        else
        {
          *(_QWORD *)v206 = v212;
          v206 += 8;
        }
        v229 = bswap32(v496);
        v500 = v229;
        v482 = v155;
        if ((unint64_t)v207 >= v484)
        {
          v230 = (v207 - v477) >> 3;
          v231 = v230 + 1;
          if ((unint64_t)(v230 + 1) >> 61)
            sub_2367C3440();
          if ((uint64_t)(v484 - (_QWORD)v477) >> 2 > v231)
            v231 = (uint64_t)(v484 - (_QWORD)v477) >> 2;
          if (v484 - (unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
            v232 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v232 = v231;
          if (v232)
            v232 = (unint64_t)sub_2367CA1FC(v232);
          else
            v233 = 0;
          v234 = (char *)(v232 + 8 * v230);
          *(_QWORD *)v234 = v500;
          v235 = v234 + 8;
          if (v207 == v477)
          {
            v236 = v477;
          }
          else
          {
            v236 = v477;
            do
            {
              v237 = *((_QWORD *)v207 - 1);
              v207 -= 8;
              *((_QWORD *)v234 - 1) = v237;
              v234 -= 8;
            }
            while (v207 != v477);
          }
          v484 = v232 + 8 * v233;
          if (v236)
            operator delete(v236);
          v477 = v234;
          v207 = v235;
        }
        else
        {
          *(_QWORD *)v207 = v229;
          v207 += 8;
        }
        v238 = v544;
        v239 = &v544;
LABEL_405:
        v240 = v239;
        if (v238)
        {
          while (1)
          {
            v239 = (__int128 *)v238;
            v241 = *(_QWORD *)(v238 + 32);
            if (v241 > v221)
            {
              v238 = *(_QWORD *)v239;
              goto LABEL_405;
            }
            if (v241 >= v221)
              break;
            v238 = *((_QWORD *)v239 + 1);
            if (!v238)
            {
              v240 = (__int128 *)((char *)v239 + 8);
              goto LABEL_412;
            }
          }
          v242 = (uint64_t *)v239;
        }
        else
        {
LABEL_412:
          v242 = (uint64_t *)operator new(0x30uLL);
          v242[4] = v221;
          v242[5] = 0;
          *v242 = 0;
          v242[1] = 0;
          v242[2] = (uint64_t)v239;
          *(_QWORD *)v240 = v242;
          v243 = v242;
          if (*v543)
          {
            v543 = (void ***)*v543;
            v243 = *(uint64_t **)v240;
          }
          sub_2368262D4((uint64_t *)v544, v243);
          ++*((_QWORD *)&v544 + 1);
        }
        v244 = 0;
        v242[5] = v208 - v479 - 1;
        while (LODWORD(v540[0]) != *(_DWORD *)*(&off_250800898 + v244))
        {
          if (++v244 == 17)
          {
            v245 = 1;
            goto LABEL_420;
          }
        }
        v245 = v244 + 4;
LABEL_420:
        if (LODWORD(v540[0]) == 1129469042)
        {
          if (v542 + 24 >= v505)
            goto LABEL_468;
          v246 = 538976288;
          if (v542 + 4 <= v505)
            v246 = *(_DWORD *)(v503 + v542);
          if (v542 + 16 > v505 || v246 != 1129469031 || *(_DWORD *)(v542 + v503 + 12) != 1129469026)
            goto LABEL_468;
          v247 = 0;
          v248 = v503 + v542;
          v249 = 1;
          do
          {
            v250 = *(unsigned __int8 *)(v248 + v247 - 8);
            if (v250 != *(unsigned __int8 *)(v248 + v247 + 4) || v250 != *(unsigned __int8 *)(v248 + v247 + 16))
              v249 = 0;
            ++v247;
          }
          while (v247 != 8);
          if ((v249 & 1) != 0)
          {
            v542 += 24;
            v493 += 2;
            v245 = 2;
          }
        }
        if (LODWORD(v540[0]) == 1515804786 && v542 + 24 < v505)
        {
          v252 = 538976288;
          if (v542 + 4 <= v505)
            v252 = *(_DWORD *)(v503 + v542);
          v253 = 538976288;
          if (v542 + 16 <= v505)
            v253 = *(_DWORD *)(v542 + v503 + 12);
          v255 = v252 == 1515804775 && v253 == 1515804770;
          if (v542 + 8 <= v505)
            v256 = bswap32(*(_DWORD *)(v503 + v542 + 4));
          else
            v256 = 0;
          if (v542 + 20 <= v505)
            v257 = bswap32(*(_DWORD *)(v503 + v542 + 16));
          else
            v257 = 0;
          if (v542 + 12 <= v505)
            v258 = bswap32(*(_DWORD *)(v503 + v542 + 8));
          else
            v258 = 0;
          if (v542 + 24 <= v505)
            v259 = bswap32(*(_DWORD *)(v503 + v542 + 20));
          else
            v259 = 0;
          if (v496 != 335544320)
            v255 = 0;
          if (v257 == v470 + 40 && v256 == v470 + 20 && v255 && v258 == 20 && v259 == 20)
          {
            v542 += 24;
            v493 += 2;
            v245 = 3;
          }
        }
LABEL_468:
        v260 = v475;
        v497 = v221;
        if (v472 + v475 == v221)
          v261 = v245;
        else
          v261 = v245 | 0x40;
        v262 = v540[0];
        if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v540[0]), (int32x4_t)xmmword_2368AF9B0))) & 1 | (LODWORD(v540[0]) == 1515804775) | ((v540[0] & 0xFFFFFFEF) == 1515804770))
          v260 = 20;
        if (v260 == v500)
          v263 = v261;
        else
          v263 = v261 | 0x80;
        sub_2367F4D8C((size_t *)v506, v263);
        if (v245 == 1)
        {
          v264 = v524;
          v265 = (void **)(v524 + 4);
          sub_2367E8BBC(&v524, v524 + 4);
          if (v525.i64[1])
            v266 = v265;
          else
            v266 = 0;
          v524 = (unint64_t)v266;
          *(_DWORD *)(v525.i64[1] + v264) = v262;
        }
        v267 = v263;
        if ((v263 & 0x40) != 0)
        {
          v268 = (char *)v506[0];
          v269 = (char *)v506[0] + 9;
          sub_2367E8BBC((size_t *)v506, (unint64_t)v506[0] + 9);
          v270 = v506[2];
          if (v506[2])
            v271 = v269;
          else
            v271 = 0;
          v506[0] = v271;
          if (v470 < 0x80)
          {
            LOBYTE(v274) = v497;
            v273 = v268;
          }
          else
          {
            v272 = v497;
            do
            {
              v273 = v268 + 1;
              v268[(_QWORD)v270] = v272 | 0x80;
              v274 = v272 >> 7;
              v275 = v272 >> 14;
              ++v268;
              v272 >>= 7;
            }
            while (v275);
          }
          v276 = v273 + 1;
          v273[(_QWORD)v270] = v274;
          sub_2367E8BBC((size_t *)v506, (unint64_t)(v273 + 1));
          if (v506[2])
            v277 = v276;
          else
            v277 = 0;
          v506[0] = v277;
        }
        v210 = v497;
        if (v267 < 0)
        {
          v278 = (char *)v506[0];
          v279 = (char *)v506[0] + 9;
          sub_2367E8BBC((size_t *)v506, (unint64_t)v506[0] + 9);
          v280 = v506[2];
          if (v506[2])
            v281 = v279;
          else
            v281 = 0;
          v506[0] = v281;
          v282 = v500;
          if (v500 < 0x80)
          {
            LOBYTE(v284) = v500;
            v283 = v278;
          }
          else
          {
            do
            {
              v283 = v278 + 1;
              v278[(_QWORD)v280] = v282 | 0x80;
              v284 = v282 >> 7;
              v285 = v282 >> 14;
              ++v278;
              v282 >>= 7;
            }
            while (v285);
          }
          v286 = v283 + 1;
          v283[(_QWORD)v280] = v284;
          sub_2367E8BBC((size_t *)v506, (unint64_t)(v283 + 1));
          if (v506[2])
            v287 = v286;
          else
            v287 = 0;
          v506[0] = v287;
          v210 = v497;
        }
        v158 = v503;
        v209 = v500;
        ++v493;
        v157 = v479;
        v155 = v482;
        v156 = v477;
        if (v493 >= v468)
          goto LABEL_509;
      }
    }
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = v503;
  }
LABEL_509:
  v478 = v156;
  v480 = v157;
  v483 = v155;
  sub_2367F4D8C((size_t *)v506, 0);
  v488 = 0;
  v491 = 0;
  v494 = 0;
  v485 = 0;
  v473 = 0;
  v476 = 0;
  v498 = 0;
  v501 = v542;
  v469 = v158 + 8;
  v288 = v505;
  do
  {
    v289 = v542;
    if (v542 > v288)
    {
      v399 = (char *)v506[0];
      v400 = (char *)v535[0];
      sub_2367E8BBC((size_t *)v535, (unint64_t)v535[0] + 9);
      v401 = v536;
      if (v536)
        v402 = v400 + 9;
      else
        v402 = 0;
      v535[0] = v402;
      if ((unint64_t)v399 < 0x80)
      {
        LOBYTE(v405) = (_BYTE)v399;
        v404 = v400;
      }
      else
      {
        v403 = (unint64_t)v399;
        do
        {
          v404 = v400 + 1;
          v400[v401] = v403 | 0x80;
          v405 = v403 >> 7;
          v406 = v403 >> 14;
          ++v400;
          v403 >>= 7;
        }
        while (v406);
      }
      v407 = v404 + 1;
      v404[v401] = v405;
      sub_2367E8BBC((size_t *)v535, (unint64_t)(v404 + 1));
      if (v536)
        v408 = v407;
      else
        v408 = 0;
      v535[0] = v408;
      if (v399)
      {
        v409 = (char *)v506[2];
        do
        {
          v410 = *v409++;
          sub_2367F4D8C((size_t *)v535, v410);
          --v399;
        }
        while (v399);
      }
      v411 = v524;
      if (v524)
      {
        v412 = (char *)v525.i64[1];
        do
        {
          v413 = *v412++;
          sub_2367F4D8C((size_t *)v535, v413);
          --v411;
        }
        while (v411);
      }
      v470 = 0;
      break;
    }
    v540[0] = 0;
    v540[1] = 0;
    v290 = v488;
    if (v542 > v498 + v476)
      v291 = 0;
    else
      v291 = v488;
    v541 = 0;
    v292 = v491;
    if (v542 > v498 + v476)
      v293 = 0;
    else
      v293 = v491;
    v294 = v494;
    if (v542 > v498 + v476)
      v295 = 0;
    else
      v295 = v494;
    v296 = v485;
    if (v542 > v498 + v476)
      v297 = 0;
    else
      v297 = v485;
    v538[0] = 0;
    v538[1] = 0;
    v539 = 0;
    if (v476 <= 0x3FFFFFFE)
    {
      v290 = v291;
      v292 = v293;
      v294 = v295;
      v296 = v297;
    }
    v298 = (uint64_t *)v544;
    if (!(_QWORD)v544)
      goto LABEL_571;
    v299 = (_QWORD *)v544;
    while (1)
    {
      v300 = v299[4];
      if (v542 >= v300)
        break;
LABEL_530:
      v299 = (_QWORD *)*v299;
      if (!v299)
        goto LABEL_571;
    }
    if (v300 < v542)
    {
      ++v299;
      goto LABEL_530;
    }
    v301 = v542 + 4;
    if (v542 + 4 > v288)
      goto LABEL_571;
    do
    {
      while (1)
      {
        v302 = (uint64_t **)v298;
        v303 = v298[4];
        if (v542 >= v303)
          break;
        v298 = *v302;
        if (!*v302)
        {
          v304 = v302;
          goto LABEL_539;
        }
      }
      if (v303 >= v542)
      {
        v307 = v542;
        v305 = (uint64_t *)v302;
        goto LABEL_543;
      }
      v298 = v302[1];
    }
    while (v298);
    v304 = v302 + 1;
LABEL_539:
    v305 = (uint64_t *)operator new(0x30uLL);
    v305[4] = v289;
    v305[5] = 0;
    *v305 = 0;
    v305[1] = 0;
    v305[2] = (uint64_t)v302;
    *v304 = v305;
    v306 = v305;
    if (*v543)
    {
      v543 = (void ***)*v543;
      v306 = *v304;
    }
    sub_2368262D4((uint64_t *)v544, v306);
    ++*((_QWORD *)&v544 + 1);
    v307 = v542;
    v301 = v542 + 4;
LABEL_543:
    v308 = 538976288;
    if (v301 <= v505)
      v308 = *(_DWORD *)(v503 + v307);
    v309 = v305[5];
    v294 = BYTE1(v308);
    v292 = BYTE2(v308);
    v290 = HIBYTE(v308);
    v498 = *(_QWORD *)&v483[8 * v309];
    v476 = *(_QWORD *)&v478[8 * v309];
    v310 = v476 - 9;
    if (v308 != 1668639853 || v310 >= 0x3FFFFFF6)
    {
      v488 = HIBYTE(v308);
      v491 = BYTE2(v308);
      v494 = BYTE1(v308);
      goto LABEL_552;
    }
    if (v307 + v476 > v505 || *(_BYTE *)(v503 + v301) || *(_BYTE *)(v307 + v503 + 5))
    {
      v296 = 109;
      v155 = v483;
      goto LABEL_557;
    }
    v488 = HIBYTE(v308);
    v491 = BYTE2(v308);
    v494 = BYTE1(v308);
    if (!*(_BYTE *)(v307 + v503 + 6) && !*(_BYTE *)(v307 + v503 + 7))
    {
      sub_2367F4D8C(v540, 19);
      v307 += 8;
      v542 = v307;
      sub_2367F4D8C(v540, 2);
      sub_236846FD0(v476 - 8, v540);
      v398 = v476 - 8;
      do
      {
        sub_2367F4D8C(v538, *(_BYTE *)(v503 + v307++));
        --v398;
      }
      while (v398);
      v542 = v307;
      sub_236847070((uint64_t)v539, v476 - 8, 2uLL);
LABEL_552:
      v296 = v308;
      if (v308 != 1987212643)
        goto LABEL_570;
      v155 = v483;
      v294 = v494;
      v292 = v491;
      v290 = v488;
      if (v310 < 0x3FFFFFF6)
      {
        if (v307 + v476 <= v505 && !*(_BYTE *)(v307 + v503 + 4))
        {
          if (*(_BYTE *)(v307 + v503 + 5)
            || *(_BYTE *)(v307 + v503 + 6)
            || *(_BYTE *)(v307 + v503 + 7)
            || v476 - 25 > 0xFFFFFEE)
          {
            v296 = 99;
            goto LABEL_570;
          }
          if (v307)
          {
            v311 = v476 - 8;
            if (v307 + v476 - 8 <= v505)
            {
              sub_2367F4D8C(v540, 21);
              v542 = v307 + 8;
              sub_2367F4D8C(v540, 4);
              sub_2367F4D8C(v540, 5);
              sub_236846FD0(v311, v540);
              v470 = sub_236847148(2uLL, 2uLL, 1, v311, v503, v505, (uint64_t *)&v542, v538);
              v485 = 99;
              if (v470)
              {
                v312 = 0;
LABEL_662:
                v155 = v483;
                goto LABEL_670;
              }
              v470 = 0;
            }
          }
          v155 = v483;
          v288 = v505;
          v294 = v494;
          v292 = v491;
          v290 = v488;
          v296 = 99;
          goto LABEL_571;
        }
        v296 = 99;
      }
LABEL_557:
      v288 = v505;
      goto LABEL_571;
    }
    v296 = 109;
LABEL_570:
    v155 = v483;
    v288 = v505;
    v294 = v494;
    v292 = v491;
    v290 = v488;
LABEL_571:
    v488 = v290;
    v491 = v292;
    v494 = v294;
    v485 = v296;
    v313 = (v290 << 24) | (v292 << 16) | (v294 << 8) | v296;
    if (v313 != 541213037 && v313 != 541147757)
    {
LABEL_620:
      v338 = v540[0];
      if (!v540[0])
        goto LABEL_621;
LABEL_688:
      v366 = v501;
LABEL_689:
      v367 = v289 - v366;
      if (v289 > v366)
      {
        sub_2367F4D8C((size_t *)v506, 1);
        v368 = (char *)v506[0];
        v369 = (char *)v506[0] + 9;
        sub_2367E8BBC((size_t *)v506, (unint64_t)v506[0] + 9);
        v370 = v506[2];
        if (v506[2])
          v371 = v369;
        else
          v371 = 0;
        v506[0] = v371;
        if (v367 < 0x80)
        {
          LOBYTE(v373) = v367;
          v372 = v368;
        }
        else
        {
          do
          {
            v372 = v368 + 1;
            v368[(_QWORD)v370] = v367 | 0x80;
            v373 = v367 >> 7;
            v374 = v367 >> 14;
            ++v368;
            v367 >>= 7;
          }
          while (v374);
        }
        v375 = v372 + 1;
        v372[(_QWORD)v370] = v373;
        sub_2367E8BBC((size_t *)v506, (unint64_t)(v372 + 1));
        if (v506[2])
          v376 = v375;
        else
          v376 = 0;
        v506[0] = v376;
        v377 = (char *)(v503 + v501);
        if (v289 >= v501)
          v378 = v289 - v501;
        else
          v378 = 0;
        while (v378)
        {
          v379 = *v377++;
          --v378;
          sub_2367F4D8C(&v524, v379);
        }
      }
      if (v338)
      {
        v380 = v541;
        v381 = v338;
        do
        {
          v382 = *v380++;
          sub_2367F4D8C((size_t *)v506, v382);
          --v381;
        }
        while (v381);
        v383 = v338;
      }
      else
      {
        v383 = 0;
      }
      v384 = v538[0];
      if (v538[0])
      {
        v385 = v539;
        v386 = v538[0];
        do
        {
          v387 = *v385++;
          sub_2367F4D8C(&v524, v387);
          --v386;
        }
        while (v386);
        v383 = v338;
      }
      v388 = v542;
      v389 = v383 | v384;
      v288 = v505;
      v501 = v542;
      if (!v389)
        goto LABEL_715;
      goto LABEL_716;
    }
    v315 = v542;
    v316 = v542 + 4;
    v317 = 538976288;
    if (v542 + 4 <= v288)
      v317 = *(_DWORD *)(v503 + v542);
    v318 = v542 + 12;
    if (v542 + 12 >= v505 || v317 != 1987212643 && v317 != 1952932726)
      goto LABEL_593;
    if (v542 + 8 <= v505)
    {
      if (*(_DWORD *)(v503 + v316))
        v319 = 1;
      else
        v319 = v318 > v505;
      if (!v319)
        goto LABEL_588;
LABEL_593:
      if (v315 == v498 + 24)
      {
        v322 = v505;
        if (v316 < v505)
          v473 = v498 + bswap32(*(_DWORD *)(v503 + v315));
      }
      else
      {
        v322 = v505;
      }
      if (v315 == v473)
      {
        if (v315 + 16 < v322)
        {
          v323 = *(unsigned __int8 *)(v498 + v503 + 8);
          v324 = *(unsigned __int8 *)(v503 + v315 + 16);
          v325 = v324 * *(unsigned __int8 *)(v498 + v503 + 9);
          if (*(_BYTE *)(v498 + v503 + 8))
          {
            v326 = (unsigned __int8 *)(v503 + v315);
            if (v315 >= v322)
              v327 = v322;
            else
              v327 = v315;
            v328 = v467 + v327;
            v325 = v324 * *(unsigned __int8 *)(v498 + v503 + 9);
            do
            {
              if (!v328)
                break;
              v329 = *v326++;
              v325 *= v329;
              ++v328;
              --v323;
            }
            while (v323);
          }
          v474 = v324 * *(unsigned __int8 *)(v498 + v503 + 9);
          if ((v324 - 1) <= 1u
            && v325 >= 0x41
            && !(v325 >> 28)
            && v325 + v315 <= v322
            && v315 > 4 * v324 * *(unsigned __int8 *)(v498 + v503 + 9))
          {
            sub_2367F4D8C(v540, 4);
            v471 = v324;
            v330 = (v324 - 1) | (16 * (v474 != v324));
            sub_2367F4D8C(v540, v330 | 4);
            v331 = v540[0];
            if ((v330 & 0x10) != 0)
            {
              sub_2367E8BBC(v540, v540[0] + 9);
              v332 = v541;
              if (v541)
                v333 = v331 + 9;
              else
                v333 = 0;
              v540[0] = v333;
              v334 = v474;
              if (v474 < 0x80)
              {
                LOBYTE(v336) = v474;
                v335 = v331;
              }
              else
              {
                do
                {
                  v335 = v331 + 1;
                  v332[v331] = v334 | 0x80;
                  v336 = v334 >> 7;
                  v337 = v334 >> 14;
                  ++v331;
                  v334 >>= 7;
                }
                while (v337);
              }
              v331 = v335 + 1;
              v332[v335] = v336;
              sub_2367E8BBC(v540, v335 + 1);
              if (!v541)
                v331 = 0;
              v540[0] = v331;
            }
            sub_2367E8BBC(v540, v331 + 9);
            v358 = v541;
            if (v541)
              v359 = v331 + 9;
            else
              v359 = 0;
            v540[0] = v359;
            if (v325 < 0x80)
            {
              LOBYTE(v362) = v325;
              v361 = v331;
            }
            else
            {
              v360 = v325;
              do
              {
                v361 = v331 + 1;
                v358[v331] = v360 | 0x80;
                v362 = v360 >> 7;
                v363 = v360 >> 14;
                ++v331;
                v360 >>= 7;
              }
              while (v363);
            }
            v338 = v361 + 1;
            v358[v361] = v362;
            sub_2367E8BBC(v540, v361 + 1);
            if (!v541)
              v338 = 0;
            v540[0] = v338;
            if (sub_236847148(v474, v471, 1, v325, v503, v505, (uint64_t *)&v542, v538))
            {
              v312 = 0;
              v470 = 1;
              v473 = v315;
              goto LABEL_662;
            }
            v470 = 0;
            v473 = v315;
            v155 = v483;
            if (v338)
              goto LABEL_688;
LABEL_621:
            if (v538[0])
            {
LABEL_687:
              v338 = 0;
              goto LABEL_688;
            }
            if (v313 == 543449703)
            {
              v339 = v505;
              if (v476 - 9 >= 0x3FFFFFF6
                || v542 != v498 + 8
                || (unint64_t)(v498 + 8) < 0x11
                || v476 + v498 > v505)
              {
                goto LABEL_678;
              }
              sub_2367F4D8C(v540, 4);
              sub_2367F4D8C(v540, 3);
              v340 = v540[0];
              sub_2367E8BBC(v540, v540[0] + 9);
              v341 = v476 - 8;
              v342 = v541;
              if (v541)
                v343 = v340 + 9;
              else
                v343 = 0;
              v540[0] = v343;
              if (v341 < 0x80)
              {
                LOBYTE(v346) = v476 - 8;
                v345 = v340;
              }
              else
              {
                v344 = v476 - 8;
                do
                {
                  v345 = v340 + 1;
                  v342[v340] = v344 | 0x80;
                  v346 = v344 >> 7;
                  v347 = v344 >> 14;
                  ++v340;
                  v344 >>= 7;
                }
                while (v347);
              }
              v338 = v345 + 1;
              v342[v345] = v346;
              sub_2367E8BBC(v540, v345 + 1);
              if (!v541)
                v338 = 0;
              v540[0] = v338;
              if (sub_236847148(4uLL, 4uLL, 0, v341, v503, v505, (uint64_t *)&v542, v538))
                goto LABEL_669;
              if (v338)
              {
                v470 = 0;
LABEL_675:
                v155 = v483;
                goto LABEL_688;
              }
              v470 = 0;
              if (v538[0])
              {
                v338 = 0;
                goto LABEL_675;
              }
              v155 = v483;
            }
            v339 = v505;
LABEL_678:
            v364 = v542;
            if (v542 + 20 <= v339
              && v542 + 4 <= v339
              && *(_DWORD *)(v503 + v542) == 542792024
              && (v542 + 8 > v339 || !*(_DWORD *)(v503 + v542 + 4)))
            {
              sub_2367F4D8C(v540, 10);
              for (j = 0; j != 12; ++j)
                sub_2367F4D8C(v538, *(_BYTE *)(v469 + v364 + j));
              v364 += 20;
              v542 = v364;
              v338 = v540[0];
              v155 = v483;
              if (v540[0])
                goto LABEL_688;
            }
            if (!v538[0])
            {
              v388 = v364 + 8;
              if (v364 + 8 > v505 || *(_DWORD *)(v503 + v364 + 4))
              {
                v388 = v364;
              }
              else
              {
                v396 = 538976288;
                if (v364 + 4 <= v505)
                  v396 = *(_DWORD *)(v503 + v364);
                v397 = 0;
                v537 = v396;
                while (v537 != *(_DWORD *)*(&off_250800920 + v397))
                {
                  if (++v397 == 8)
                  {
                    v388 = v364;
                    v155 = v483;
                    goto LABEL_730;
                  }
                }
                sub_2367F4D8C(v540, v397 + 16);
                v542 = v364 + 8;
                v338 = v540[0];
                v155 = v483;
                if (v540[0])
                  goto LABEL_688;
              }
LABEL_730:
              v288 = v505;
              v366 = v501;
              if (v388 == v505)
              {
                v338 = 0;
                goto LABEL_689;
              }
LABEL_715:
              v542 = v388 + 1;
LABEL_716:
              v312 = 1;
              goto LABEL_717;
            }
            goto LABEL_687;
          }
        }
        v473 = v315;
      }
      v155 = v483;
      goto LABEL_620;
    }
    if (v318 > v505)
      goto LABEL_593;
LABEL_588:
    v320 = 2 * bswap32(*(_DWORD *)(v503 + v542 + 8));
    if ((v320 - 17) > 0xFFFFFEE || v318 + v320 > v505)
      goto LABEL_593;
    v348 = v320;
    v542 += 12;
    sub_2367F4D8C(v540, 4);
    v155 = v483;
    sub_2367F4D8C(v540, 5);
    v349 = v540[0];
    sub_2367E8BBC(v540, v540[0] + 9);
    v350 = v541;
    if (v541)
      v351 = v349 + 9;
    else
      v351 = 0;
    v540[0] = v351;
    v352 = v348;
    if (v348 < 0x80)
    {
      LOBYTE(v354) = v348;
      v353 = v349;
    }
    else
    {
      do
      {
        v353 = v349 + 1;
        v350[v349] = v352 | 0x80;
        v354 = v352 >> 7;
        v355 = v352 >> 14;
        ++v349;
        v352 >>= 7;
      }
      while (v355);
    }
    v356 = v353 + 1;
    v350[v353] = v354;
    sub_2367E8BBC(v540, v353 + 1);
    if (v541)
      v357 = v356;
    else
      v357 = 0;
    v540[0] = v357;
    if (!sub_236847148(2uLL, 2uLL, 1, v348, v503, v505, (uint64_t *)&v542, v538))
    {
      v470 = 0;
      v315 = v542;
      v316 = v542 + 4;
      v289 = v318;
      goto LABEL_593;
    }
LABEL_669:
    v312 = 0;
    v470 = 1;
LABEL_670:
    v288 = v505;
LABEL_717:
    v390 = (uint64_t)v539;
    v539 = 0;
    if (v390)
    {
      v391 = -*(_QWORD *)(v390 - 24);
      do
        v392 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v392 + v391, &qword_2564313D8));
      free(*(void **)(v390 - 32));
    }
    v393 = v541;
    v541 = 0;
    if (v393)
    {
      v394 = -*((_QWORD *)v393 - 3);
      do
        v395 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v395 + v394, &qword_2564313D8));
      free(*((void **)v393 - 4));
    }
  }
  while ((v312 & 1) != 0);
  sub_23682629C((_QWORD *)v544);
  if (v478)
    operator delete(v478);
  v127 = v470;
  if (v155)
    operator delete(v155);
  if (v480)
    operator delete(v480);
LABEL_769:
  v414 = v532.i64[1];
  v532.i64[1] = 0;
  if (v414)
  {
    v415 = -*(_QWORD *)(v414 - 24);
    do
      v416 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v416 + v415, &qword_2564313D8));
    free(*(void **)(v414 - 32));
  }
  v417 = v525.i64[1];
  v525.i64[1] = 0;
  if (v417)
  {
    v418 = -*(_QWORD *)(v417 - 24);
    do
      v419 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v419 + v418, &qword_2564313D8));
    free(*(void **)(v417 - 32));
  }
LABEL_777:
  v420 = v506[2];
  v506[2] = 0;
  if (v420)
  {
    v421 = -*(v420 - 3);
    do
      v422 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v422 + v421, &qword_2564313D8));
    free((void *)*(v420 - 4));
  }
  if (v127)
    goto LABEL_815;
  sub_236826F90(v540);
  v532 = (int64x2_t)xmmword_2368AF9C0;
  LOBYTE(v533) = 0;
  v531 = v516;
  v423 = *((_QWORD *)&v516 + 1) + 16;
  sub_2367E8BBC((size_t *)&v516 + 1, *((_QWORD *)&v516 + 1) + 16);
  if (*((_QWORD *)&v517 + 1))
    v424 = v423;
  else
    v424 = 0;
  v534 = v518;
  *((_QWORD *)&v516 + 1) = v424;
  v518 = (void **)&v531;
  v425 = v535[0];
  sub_2368AD168((unint64_t)v535[0], (uint64_t *)&v516);
  sub_2367F14F8((uint64_t)&v531, &v516, 0, v33);
  if (!v425)
  {
    v449 = 3;
    goto LABEL_810;
  }
  v426 = 0;
  v427 = v536;
  while (2)
  {
    if (v426)
    {
      v428 = *(_BYTE *)(v426 + v427 - 1);
      if (v426 != 1)
      {
        v429 = *(_BYTE *)(v426 + v427 - 2);
        goto LABEL_792;
      }
    }
    else
    {
      v428 = 0;
    }
    v429 = 0;
LABEL_792:
    v430 = (void **)v540[0];
    v431 = sub_2367F65C8(v426, v428, v429);
    v432 = v431;
    v433 = v430[1];
    v434 = (unint64_t)v430[2];
    if ((unint64_t)v433 >= v434)
    {
      v437 = ((char *)v433 - (_BYTE *)*v430) >> 3;
      v438 = v437 + 1;
      if ((unint64_t)(v437 + 1) >> 61)
        sub_2367C3440();
      v439 = v434 - (_QWORD)*v430;
      if (v439 >> 2 > v438)
        v438 = v439 >> 2;
      if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFF8)
        v440 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v440 = v438;
      v441 = (char *)sub_2367CA1FC(v440);
      v443 = &v441[8 * v437];
      v444 = *(unsigned __int8 *)(v427 + v426);
      *(_DWORD *)v443 = 2 * v432;
      *((_DWORD *)v443 + 1) = v444;
      v446 = (char *)*v430;
      v445 = (char *)v430[1];
      v447 = v443;
      if (v445 != *v430)
      {
        do
        {
          v448 = *((_QWORD *)v445 - 1);
          v445 -= 8;
          *((_QWORD *)v447 - 1) = v448;
          v447 -= 8;
        }
        while (v445 != v446);
        v445 = (char *)*v430;
      }
      v436 = v443 + 8;
      *v430 = v447;
      v430[1] = v443 + 8;
      v430[2] = &v441[8 * v442];
      if (v445)
        operator delete(v445);
    }
    else
    {
      v435 = *(unsigned __int8 *)(v427 + v426);
      *v433 = 2 * v431;
      v433[1] = v435;
      v436 = v433 + 2;
    }
    v430[1] = v436;
    if ((void *)++v426 != v425)
      continue;
    break;
  }
  if ((unint64_t)v425 >= 0x1000)
    v449 = 2;
  else
    v449 = 3;
LABEL_810:
  v524 = 0x400000002;
  v526 = 0;
  v527 = 0;
  v528 = -1;
  v530 = 1;
  v525 = (int64x2_t)(v449 | 0x200000000uLL);
  memset(v506, 0, sizeof(v506));
  v508 = 0;
  v509 = 0;
  v510 = 0;
  v511 = &off_2507FF438;
  *(_OWORD *)&v513[4] = xmmword_2368AF590;
  v544 = xmmword_2368AF3F0;
  v543 = (void ***)&off_2507FF550;
  v545 = 0;
  sub_2367CB9F8((uint64_t)&v511, (uint64_t)&v543);
  *(_QWORD *)&v515 = 0;
  v514 = 0uLL;
  v543 = 0;
  v544 = 0uLL;
  v529 = 1;
  sub_236819104((uint64_t)&v524, 0x29uLL, (uint64_t)v540, (uint64_t *)v506, (unint64_t *)&v543, (unint64_t *)&v516, 0, v33);
  sub_23681FA78(v540[0], (uint64_t)v506, &v543, 0, (unint64_t *)&v516, 0, v33);
  if (v543)
    operator delete(v543);
  v543 = (void ***)&v514;
  sub_2367D077C((void ***)&v543);
  if (v508)
  {
    v509 = v508;
    operator delete(v508);
  }
  v543 = (void ***)v506;
  sub_236817010((void ***)&v543);
  v506[0] = v540;
  sub_2367D17E4((void ***)v506);
  v127 = 0;
LABEL_815:
  v450 = v536;
  v536 = 0;
  if (v450)
  {
    v451 = -*(_QWORD *)(v450 - 24);
    do
      v452 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v452 + v451, &qword_2564313D8));
    free(*(void **)(v450 - 32));
  }
  if (v127)
  {
LABEL_120:
    v34 = 1;
    *(_DWORD *)(a1 + 2852) = 1;
    goto LABEL_121;
  }
LABEL_820:
  *(_OWORD *)&v506[1] = xmmword_2368AF8D0;
  LOBYTE(v507) = 0;
  v506[0] = (void *)v516;
  v453 = *((_QWORD *)&v516 + 1) + 1;
  sub_2367E8BBC((size_t *)&v516 + 1, *((_QWORD *)&v516 + 1) + 1);
  if (*((_QWORD *)&v517 + 1))
    v454 = v453;
  else
    v454 = 0;
  v508 = v518;
  *((_QWORD *)&v516 + 1) = v454;
  v518 = v506;
  v455 = ((v516 + 7) & 0xFFFFFFFFFFFFFFF8) - v516;
  if (v455)
  {
    *(_QWORD *)(*((_QWORD *)&v517 + 1) + ((unint64_t)v516 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v517 + 1)
                                                                                             + ((unint64_t)v516 >> 3));
    *(_QWORD *)&v516 = v516 + v455;
  }
  sub_2367F14F8((uint64_t)v506, &v516, 0, v33);
  v456 = (unint64_t)v516 >> 3;
  sub_2367E8BBC((size_t *)&v516 + 1, (unint64_t)v516 >> 3);
  v457 = *((_QWORD *)&v517 + 1);
  if (*((_QWORD *)&v517 + 1))
    v458 = v456;
  else
    v458 = 0;
  v521 = v458;
  v522 = v517;
  *((_QWORD *)&v516 + 1) = v458;
  *((_QWORD *)&v517 + 1) = 0;
  v459 = v523;
  v523 = v457;
  if (v459)
  {
    v460 = -*(_QWORD *)(v459 - 24);
    do
      v461 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v461 + v460, &qword_2564313D8));
    free(*(void **)(v459 - 32));
    v458 = v521;
  }
  *((_QWORD *)&v516 + 1) = 0;
  *(_QWORD *)&v517 = 0;
  *(_QWORD *)(a1 + 184) += v458;
  if (!*(_BYTE *)(a1 + 297))
  {
    v465 = *(_DWORD *)(a1 + 300);
    if ((v465 == 5 || v465 == -1) && !*(_BYTE *)(a1 + 299) && !*(_BYTE *)(a1 + 298))
    {
LABEL_854:
      v34 = 0;
      v35 = 0;
      *(_BYTE *)(a1 + 2864) = 1;
      goto LABEL_122;
    }
  }
  sub_23685C8C8(&v524, a1 + 104, 0x20uLL, 0);
  v34 = v527;
  if (!(_DWORD)v527)
  {
    v462 = v524;
    v532 = v525;
    v531 = v524;
    v533 = v526;
    v524 = 0;
    v525.i64[0] = 0;
    *(_OWORD *)v531 = xmmword_236923894;
    *(_OWORD *)(v462 + 16) = *(_OWORD *)"ftypjxl ";
    v531 += 32;
    v532 = vaddq_s64(v532, (int64x2_t)xmmword_2368AF9D0);
    sub_236831498(&v531);
    if (!(_DWORD)v527)
      sub_236831498(&v524);
    if (*(_DWORD *)(a1 + 300) == 5)
      goto LABEL_837;
    sub_23685C8C8(&v524, a1 + 104, 9uLL, 0);
    v34 = v527;
    if (!(_DWORD)v527)
    {
      v532 = v525;
      v531 = v524;
      v533 = v526;
      v524 = 0;
      v525.i64[0] = 0;
      *(_QWORD *)v531 = 0x6C6C786A09000000;
      v466 = v531;
      v532 = vaddq_s64(v532, (int64x2_t)xmmword_2368AF9E0);
      *(_BYTE *)(v531 + 8) = *(_DWORD *)(a1 + 300);
      v531 = v466 + 9;
      v532 = vaddq_s64(v532, (int64x2_t)xmmword_2368AF9F0);
      sub_236831498(&v531);
      if (!(_DWORD)v527)
        sub_236831498(&v524);
LABEL_837:
      if (!*(_BYTE *)(a1 + 299) && (!*(_BYTE *)(a1 + 298) || *v2 || v2[4]))
        goto LABEL_854;
      LODWORD(v531) = 1886156906;
      v524 = a1;
      v525.i64[0] = (uint64_t)&v521;
      v34 = sub_236860AE8(a1, (uint64_t)&v531, v521 + 4, (uint64_t *)&v524);
      if (!(_DWORD)v34)
      {
        sub_2367E8BBC(&v521, 0);
        v521 = 0;
        if (!*(_BYTE *)(a1 + 299))
          goto LABEL_854;
        v463 = *(_QWORD *)(a1 + 1984);
        v464 = *(_QWORD *)(a1 + 1992);
        if (v463 == v464)
          goto LABEL_854;
        LODWORD(v531) = 1685217898;
        v524 = a1;
        v525.i64[0] = a1 + 1984;
        v34 = sub_236860D18(a1, (uint64_t)&v531, v464 - v463, (uint64_t)&v524);
        if (!(_DWORD)v34)
          goto LABEL_854;
      }
    }
  }
LABEL_121:
  v35 = 1;
LABEL_122:
  v77 = *((_QWORD *)&v517 + 1);
  *((_QWORD *)&v517 + 1) = 0;
  if (v77)
  {
    v78 = -*(_QWORD *)(v77 - 24);
    do
      v79 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v79 + v78, &qword_2564313D8));
    free(*(void **)(v77 - 32));
  }
LABEL_126:
  if (SHIBYTE(v520) < 0)
    operator delete(__p[0]);
  if (v35)
    goto LABEL_192;
LABEL_2:
  sub_23685CCEC((_QWORD *)(a1 + 104));
  v3 = *v2;
  v4 = v2[4];
  if (*v2 | v4)
  {
    *v2 = 0;
    v20 = v2[1];
    v531 = v3;
    v532.i64[0] = v20;
    v2[4] = 0;
    v21 = (void (*)(_QWORD))v2[5];
    v22 = sub_236860E90((uint64_t *)(*(_QWORD *)(a1 + 80) + 48), *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 80));
    v23 = *(_QWORD *)(a1 + 88);
    if ((_QWORD *)v23 != v22)
    {
      do
      {
        v23 -= 48;
        sub_236860F38(v23);
      }
      while ((_QWORD *)v23 != v22);
      v3 = v531;
    }
    *(_QWORD *)(a1 + 88) = v22;
    v24 = *(_QWORD *)(a1 + 64) - 1;
    *(_QWORD *)(a1 + 64) = v24;
    if (!v3)
      goto LABEL_45;
    v25 = *(_QWORD *)(v3 + 1176);
    v26 = *(_QWORD *)(v3 + 1184) - v25;
    if (v26)
    {
      v27 = 0;
      v28 = 1;
      while (*(_BYTE *)(v25 + v27))
      {
        v27 = v28;
        v319 = v26 > v28++;
        if (!v319)
          goto LABEL_32;
      }
      goto LABEL_157;
    }
LABEL_32:
    *(_DWORD *)(v3 + 72) = *(_BYTE *)(a1 + 345) == 0;
    if (*(_BYTE *)(a1 + 557))
      v29 = *(_QWORD *)(v3 + 648);
    else
LABEL_45:
      v29 = 0;
    v495 = v29;
    if (*(_BYTE *)(a1 + 2865))
      v36 = v24 == 0;
    else
      v36 = 0;
    v37 = v36;
    v38 = *(_DWORD *)(a1 + 332);
    for (k = *(_QWORD *)(a1 + 632); k != *(_QWORD *)(a1 + 640); k += 96)
    {
      if (v38 <= *(_DWORD *)(k + 28))
        v38 = *(_DWORD *)(k + 28);
    }
    v40 = v38 + 3;
    if (v40 <= 0x18)
      v41 = 24;
    else
      v41 = v40;
    v42 = sub_2367F4718(a1 + 728);
    if (*(_BYTE *)(a1 + 736))
      v43 = 8 * *(_DWORD *)(a1 + 740) + 8;
    else
      v43 = *(_DWORD *)(a1 + 744);
    v45 = *(unsigned int *)(a1 + 624);
    if (*(_DWORD *)(a1 + 408) == 1)
      v46 = v45 + 1;
    else
      v46 = v45 + 3;
    v489 = v42 * v41 * v43 * v46;
    if (v489 <= 0x7FF7FFFBFLL)
      v47 = 8;
    else
      v47 = 16;
    v48 = *(_QWORD *)(a1 + 144);
    v502 = v21;
    v504 = v4;
    v499 = v37;
    v492 = v48;
    if (*(_BYTE *)(a1 + 297)
      || (v53 = *(_DWORD *)(a1 + 300), v53 != 5) && v53 != -1
      || *(_BYTE *)(a1 + 299)
      || *(_BYTE *)(a1 + 298))
    {
      if (!v37 || *(_QWORD *)(a1 + 2856))
        v47 |= 4uLL;
      v49 = v47 + v48;
      v50 = *(_QWORD **)(a1 + 176);
      if (v50)
      {
        v51 = (void (*)(_QWORD, size_t))v50[3];
        if (v51)
        {
          v51(*v50, v47 + v48);
          *(_QWORD *)(a1 + 160) = v49;
        }
      }
      *(_QWORD *)(a1 + 144) = v49;
    }
    else
    {
      v49 = *(_QWORD *)(a1 + 144);
    }
    v34 = sub_2368311D8(a1 + 104, &v521);
    if ((_DWORD)v34)
    {
      v52 = 0;
      goto LABEL_188;
    }
    if (v3)
    {
      v54 = *(_QWORD *)(a1 + 184);
      v55 = *(_BYTE *)(v3 + 764);
      v57 = *(char **)(a1 + 208);
      v56 = *(char **)(a1 + 216);
      if (v56 - v57 == 16 && *((_QWORD *)v57 + 1) == v54)
      {
        *(_QWORD *)(a1 + 216) = v57;
        v56 = v57;
      }
      v58 = *(_QWORD *)(a1 + 224);
      if ((unint64_t)v56 >= v58)
      {
        v81 = (v56 - v57) >> 4;
        v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 60)
          sub_2367C3440();
        v83 = v58 - (_QWORD)v57;
        if (v83 >> 3 > v82)
          v82 = v83 >> 3;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0)
          v84 = 0xFFFFFFFFFFFFFFFLL;
        else
          v84 = v82;
        if (v84)
        {
          v486 = v55;
          if (v84 >> 60)
            sub_2367C3488();
          v85 = (char *)operator new(16 * v84);
          v55 = v486;
        }
        else
        {
          v85 = 0;
        }
        v95 = &v85[16 * v81];
        *v95 = v55;
        *((_DWORD *)v95 + 1) = v495;
        *((_QWORD *)v95 + 1) = v54;
        v59 = v95 + 16;
        if (v56 == v57)
        {
          v21 = v502;
          v4 = v504;
        }
        else
        {
          v21 = v502;
          v4 = v504;
          do
          {
            *((_OWORD *)v95 - 1) = *((_OWORD *)v56 - 1);
            v95 -= 16;
            v56 -= 16;
          }
          while (v56 != v57);
          v57 = *(char **)(a1 + 208);
        }
        *(_QWORD *)(a1 + 208) = v95;
        *(_QWORD *)(a1 + 216) = v59;
        *(_QWORD *)(a1 + 224) = &v85[16 * v84];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v56 = v55;
        *((_DWORD *)v56 + 1) = v495;
        v59 = v56 + 16;
        *((_QWORD *)v56 + 1) = v54;
        v21 = v502;
      }
      *(_QWORD *)(a1 + 216) = v59;
      v80 = v531;
      v96 = *(unsigned int *)(v531 + 700);
      if (v96 >= 3)
      {
LABEL_157:
        v52 = 0;
        *(_DWORD *)(a1 + 2852) = 129;
        v34 = 1;
        goto LABEL_188;
      }
      LOWORD(v506[0]) = 256;
      HIDWORD(v506[0]) = 0;
      v506[1] = 0;
      v510 = 0;
      LOBYTE(v511) = 0;
      HIDWORD(v511) = 2;
      v512 = 0;
      *(_QWORD *)v513 = 0;
      *(_DWORD *)&v513[8] = 0;
      *(_OWORD *)&v513[16] = 0u;
      v514 = 0u;
      v515 = 0u;
      LOWORD(v506[2]) = v499;
      v97 = (void *)*(unsigned int *)(v531 + 688);
      v507 = v96;
      v508 = v97;
      LOBYTE(v509) = *(_DWORD *)(v531 + 696) != 0;
      HIDWORD(v509) = *(_DWORD *)(v531 + 692);
      sub_2367F3C34((int64x2_t *)((char *)&v514 + 8), *(unsigned int *)(a1 + 624));
      v98 = *(int8x16_t *)(v80 + 684);
      v99 = *(unsigned int *)(a1 + 624);
      if ((_DWORD)v99)
      {
        v100 = 0;
        v101 = *(_QWORD *)(v80 + 704);
        v102 = (*(_QWORD *)(v80 + 712) - v101) >> 4;
        v103 = (_DWORD *)(*((_QWORD *)&v514 + 1) + 20);
        v48 = v492;
        do
        {
          v104 = v98;
          if (v100 < v102)
            v104 = *(int8x16_t *)(v101 + 16 * v100);
          *(int32x2_t *)(v103 - 3) = vzip1_s32(*(int32x2_t *)v104.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL));
          *v103 = v104.i32[1];
          *((_BYTE *)v103 - 4) = v104.i32[3] != 0;
          ++v100;
          v103 += 10;
        }
        while (v99 != v100);
        v105 = *(_DWORD *)(v80 + 684);
      }
      else
      {
        v105 = *(_OWORD *)(v80 + 684);
        v48 = v492;
      }
      v510 = *(_QWORD *)(v80 + 668);
      HIDWORD(v511) = v105;
      LOBYTE(v511) = v105 != 0;
      v512 = *(_QWORD *)(v80 + 752);
      *(_DWORD *)v513 = *(_DWORD *)(v80 + 760);
      *(_QWORD *)&v513[4] = v495;
      std::string::operator=((std::string *)&v513[16], (const std::string *)(v80 + 728));
      v106 = sub_23682AE68(v80 + 8, (uint64_t)v506, a1 + 304, v80 + 776, a1 + 232, *(_QWORD *)(a1 + 24), a1 + 104, *(_QWORD *)(v80 + 768));
      if (v106)
      {
        v34 = 1;
        *(_DWORD *)(a1 + 2852) = 1;
      }
      else
      {
        v34 = 0;
      }
      v524 = (unint64_t)&v514 + 8;
      sub_2367D6C0C((void ***)&v524);
      if (SBYTE7(v514) < 0)
        operator delete(*(void **)&v513[16]);
      if (v106)
        goto LABEL_187;
    }
    else
    {
      sub_2368A09B0(v4, v37, *(_QWORD *)(a1 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))sub_236860F80, (_QWORD *)(a1 + 104));
      v80 = 0;
      v34 = 0;
    }
    v107 = *(_QWORD *)(a1 + 144);
    v108 = v107 - v49;
    *(_QWORD *)(a1 + 184) += v108 - v521;
    if (!*(_BYTE *)(a1 + 297))
    {
      v117 = *(_DWORD *)(a1 + 300);
      if ((v117 == 5 || v117 == -1) && !*(_BYTE *)(a1 + 299) && !*(_BYTE *)(a1 + 298))
      {
LABEL_208:
        sub_23685CCEC((_QWORD *)(a1 + 104));
        if (v80)
          sub_23682B940(a1 + 2008, v80 + 8);
        if (v499)
        {
          v120 = *(_BYTE **)(a1 + 208);
          v121 = *(_BYTE **)(a1 + 216);
          if (v120 != v121)
          {
            v122 = *(_BYTE **)(a1 + 208);
            v52 = 1;
            while ((*v122 & 1) == 0)
            {
              v122 += 16;
              if (v122 == v121)
                goto LABEL_188;
            }
            v128 = 0;
            v129 = 0;
            memset(v506, 0, sizeof(v506));
            v130 = (v121 - v120) >> 4;
            if (v130 <= 1)
              v130 = 1;
            do
            {
              if (!v129 || *v120)
                ++v128;
              ++v129;
              v120 += 16;
            }
            while (v130 != v129);
            if (30 * v128 == -18)
            {
              v132 = 0;
              v131 = 0;
            }
            else
            {
              sub_2367C8698((unint64_t *)v506, (int)(30 * v128 + 18));
              v132 = v506[0];
              v131 = v506[1];
            }
            LOBYTE(v149) = v128;
            if (v128 < 0x80)
            {
              v150 = 0;
LABEL_261:
              v132[v150++] = v149;
            }
            else
            {
              v150 = 0;
              v151 = v131 - v132;
              v152 = (int)v128;
              while (1)
              {
                v153 = v150;
                if (v150 > v151)
                  break;
                ++v150;
                v132[v153] = v152 | 0x80;
                v149 = v152 >> 7;
                v154 = v152 >> 14;
                v152 >>= 7;
                if (!v154)
                {
                  if (v153 < v151)
                    goto LABEL_261;
                  break;
                }
              }
            }
            v168 = &v132[v150];
            *v168 = bswap32(*(_DWORD *)(a1 + 196));
            v168[1] = bswap32(*(_DWORD *)(a1 + 200));
            v169 = v150 + 8;
            v170 = *(_QWORD *)(a1 + 208);
            v171 = *(_QWORD *)(a1 + 216);
            if ((unint64_t)(v171 - v170) < 0x11)
            {
              v173 = 0;
              v174 = 0;
              v190 = (unint64_t)(v171 - v170) >> 4;
              v191 = *(_QWORD *)(v170 + 8);
              v175 = v131 - v132;
            }
            else
            {
              v172 = 0;
              v173 = 0;
              v174 = 0;
              v175 = v131 - v132;
              v176 = -1;
              v177 = 1;
              do
              {
                if (*(_BYTE *)(v170 + 16 * v177))
                {
                  v178 = *(_QWORD *)(v170 + 16 * v174 + 8);
                  if (v176 != -1)
                    v178 -= *(_QWORD *)(v170 + 16 * v176 + 8);
                  if (v178 < 0x80)
                  {
                    v179 = v169;
                    LOBYTE(v180) = v178;
LABEL_279:
                    if (v179 <= v175)
                    {
                      v169 = v179 + 1;
                      v132[v179] = v180;
                    }
                    else
                    {
                      v169 = v179;
                    }
                  }
                  else
                  {
                    while (v169 <= v175)
                    {
                      v179 = v169 + 1;
                      v132[v169] = v178 | 0x80;
                      v180 = v178 >> 7;
                      v181 = v178 >> 14;
                      ++v169;
                      v178 >>= 7;
                      if (!v181)
                        goto LABEL_279;
                    }
                  }
                  v182 = (int)v173;
                  if (v173 < 0x80)
                  {
                    v183 = v169;
                    LOBYTE(v184) = v182;
LABEL_287:
                    if (v183 <= v175)
                    {
                      v169 = v183 + 1;
                      v132[v183] = v184;
                    }
                    else
                    {
                      v169 = v183;
                    }
                  }
                  else
                  {
                    while (v169 <= v175)
                    {
                      v183 = v169 + 1;
                      v132[v169] = v182 | 0x80;
                      v184 = v182 >> 7;
                      v185 = v182 >> 14;
                      ++v169;
                      v182 >>= 7;
                      if (!v185)
                        goto LABEL_287;
                    }
                  }
                  v186 = (int)v177 - v174;
                  if ((v177 - v174) < 0x80)
                  {
                    v187 = v169;
                    LOBYTE(v188) = v177 - v174;
LABEL_295:
                    if (v187 <= v175)
                    {
                      v169 = v187 + 1;
                      v132[v187] = v188;
                    }
                    else
                    {
                      v169 = v187;
                    }
                  }
                  else
                  {
                    while (v169 <= v175)
                    {
                      v187 = v169 + 1;
                      v132[v169] = v186 | 0x80;
                      v188 = v186 >> 7;
                      v189 = v186 >> 14;
                      ++v169;
                      v186 >>= 7;
                      if (!v189)
                        goto LABEL_295;
                    }
                  }
                  v170 = *(_QWORD *)(a1 + 208);
                  v171 = *(_QWORD *)(a1 + 216);
                  v173 = v172;
                  v172 += *(_DWORD *)(v170 + 16 * v177 + 4);
                  v176 = v174;
                  v174 = v177;
                }
                ++v177;
              }
              while (v177 < (v171 - v170) >> 4);
              v190 = (v171 - v170) >> 4;
              v191 = *(_QWORD *)(v170 + 16 * v174 + 8);
              if (v176 != -1)
                v191 -= *(_QWORD *)(v170 + 16 * v176 + 8);
            }
            if (v191 < 0x80)
            {
              v192 = v169;
              LOBYTE(v193) = v191;
LABEL_308:
              if (v192 <= v175)
              {
                v169 = v192 + 1;
                v132[v192] = v193;
              }
              else
              {
                v169 = v192;
              }
            }
            else
            {
              while (v169 <= v175)
              {
                v192 = v169 + 1;
                v132[v169] = v191 | 0x80;
                v193 = v191 >> 7;
                v194 = v191 >> 14;
                ++v169;
                v191 >>= 7;
                if (!v194)
                  goto LABEL_308;
              }
            }
            v195 = v190 - v174;
            v196 = (int)v173;
            if (v173 < 0x80)
            {
              v197 = v169;
              LOBYTE(v198) = v196;
LABEL_316:
              if (v197 <= v175)
              {
                v169 = v197 + 1;
                v132[v197] = v198;
              }
              else
              {
                v169 = v197;
              }
            }
            else
            {
              while (v169 <= v175)
              {
                v197 = v169 + 1;
                v132[v169] = v196 | 0x80;
                v198 = v196 >> 7;
                v199 = v196 >> 14;
                ++v169;
                v196 >>= 7;
                if (!v199)
                  goto LABEL_316;
              }
            }
            v200 = (int)v195;
            if (v195 < 0x80)
            {
              v201 = v169;
              LOBYTE(v202) = v200;
LABEL_324:
              if (v201 <= v175)
              {
                v169 = v201 + 1;
                v132[v201] = v202;
              }
              else
              {
                v169 = v201;
              }
            }
            else
            {
              while (v169 <= v175)
              {
                v201 = v169 + 1;
                v132[v169] = v200 | 0x80;
                v202 = v200 >> 7;
                v203 = v200 >> 14;
                ++v169;
                v200 >>= 7;
                if (!v203)
                  goto LABEL_324;
              }
            }
            if (v169 <= v175)
            {
              if (v169 < v175)
                v131 = &v132[v169];
            }
            else
            {
              sub_2367C8698((unint64_t *)v506, v169 - v175);
              v132 = v506[0];
              v131 = v506[1];
            }
            LODWORD(v543) = 1768716394;
            *(_QWORD *)&v516 = v132;
            *((_QWORD *)&v516 + 1) = v131 - v132;
            v524 = a1;
            v525.i64[0] = (uint64_t)&v516;
            v34 = sub_236860FC4(a1, (uint64_t)&v543, v131 - v132, &v524);
            if ((_DWORD)v34)
            {
              if (!v132)
                goto LABEL_187;
              v506[1] = v132;
              v112 = v132;
              goto LABEL_186;
            }
            if (v132)
            {
              v506[1] = v132;
              operator delete(v132);
            }
            v34 = 0;
          }
        }
        v52 = 1;
LABEL_188:
        if (v4)
          v21(v4);
        sub_2368611E8(&v531, 0);
        if ((v52 & 1) != 0)
          goto LABEL_191;
        goto LABEL_192;
      }
    }
    v109 = *(_QWORD **)(a1 + 176);
    if (v109)
    {
      v110 = (void (*)(_QWORD, uint64_t))v109[3];
      if (v110)
      {
        v110(*v109, v48);
        *(_QWORD *)(a1 + 160) = v48;
      }
    }
    *(_QWORD *)(a1 + 144) = v48;
    sub_236818388(v506, v47);
    if (v489 > 0x7FF7FFFBFLL || v108 < 0xFFFFFFF8)
    {
      if (v499 && !*(_QWORD *)(a1 + 2856))
      {
        LODWORD(v524) = 1668053098;
        sub_23685D318((uint64_t)&v524, v108, v489 > 0x7FF7FFFBFLL, (int8x8_t *)v506[0]);
      }
      else
      {
        LODWORD(v524) = 1886156906;
        sub_23685D318((uint64_t)&v524, v108 + 4, v489 > 0x7FF7FFFBFLL, (int8x8_t *)v506[0]);
        v111 = *(_QWORD *)(a1 + 2856);
        *(_QWORD *)(a1 + 2856) = v111 + 1;
        if (v499)
          LODWORD(v111) = v111 | 0x80000000;
        *(_DWORD *)((char *)v506[0] + v47 - 4) = bswap32(v111);
      }
      v34 = sub_23683D0E8(a1 + 104, v506);
      if (!(_DWORD)v34)
      {
        v118 = *(_QWORD **)(a1 + 176);
        if (v118)
        {
          v119 = (void (*)(_QWORD, uint64_t))v118[3];
          if (v119)
          {
            v119(*v118, v107);
            *(_QWORD *)(a1 + 160) = v107;
          }
        }
        *(_QWORD *)(a1 + 144) = v107;
        if (v506[0])
        {
          v506[1] = v506[0];
          operator delete(v506[0]);
        }
        v34 = 0;
        goto LABEL_208;
      }
    }
    else
    {
      v34 = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
    v112 = v506[0];
    if (!v506[0])
    {
LABEL_187:
      v52 = 0;
      goto LABEL_188;
    }
    v506[1] = v506[0];
LABEL_186:
    operator delete(v112);
    goto LABEL_187;
  }
  v6 = v2[2];
  v5 = v2[3];
  v2[2] = 0;
  *(_QWORD *)&v516 = v6;
  *((_QWORD *)&v516 + 1) = v5;
  v7 = sub_236860E90((uint64_t *)(*(_QWORD *)(a1 + 80) + 48), *(uint64_t **)(a1 + 88), *(_QWORD **)(a1 + 80));
  v8 = *(_QWORD *)(a1 + 88);
  if ((_QWORD *)v8 != v7)
  {
    do
    {
      v8 -= 48;
      sub_236860F38(v8);
    }
    while ((_QWORD *)v8 != v7);
    v6 = v516;
  }
  *(_QWORD *)(a1 + 88) = v7;
  --*(_QWORD *)(a1 + 72);
  if (!*(_BYTE *)(v6 + 32))
  {
    v44 = *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8);
    v506[0] = (void *)a1;
    v506[1] = (void *)(v6 + 8);
    v34 = sub_236860D18(a1, v6, v44, (uint64_t)v506);
    if (!(_DWORD)v34)
      goto LABEL_63;
    goto LABEL_115;
  }
  sub_2367F4DE4(&v531, 4uLL);
  for (m = 0; m != 4; ++m)
    *(_BYTE *)(v532.i64[1] + m) = *(_BYTE *)(v6 + m);
  if (*(int *)(a1 + 2872) < 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 2872);
  v11 = *(void ***)(v6 + 8);
  v12 = *(_QWORD *)(v6 + 16);
  sub_2367B4404();
  if (!v13)
  {
    sub_236861280("%s:%d: BrotliEncoderCreateInstance failed\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/lib/jxl/encode.cc", 469);
    goto LABEL_110;
  }
  v14 = v13;
  v15 = (void **)(v12 - (_QWORD)v11);
  if (!*(_DWORD *)(v13 + 6980))
  {
    *(_DWORD *)(v13 + 4) = v10;
    *(_QWORD *)(v13 + 24) = v15;
  }
  sub_2367F4DE4((size_t *)v506, 0x20000uLL);
  v524 = (unint64_t)v15;
  v543 = (void ***)v11;
  v540[0] = 0;
  while (1)
  {
    v538[0] = 0x20000;
    v535[0] = v506[2];
    v16 = sub_2367B4778(v14, 2, &v524, (const void **)&v543, v538, v535, v540);
    if (!v16)
      break;
    v17 = (char *)v535[0] - (char *)v506[2];
    v18 = (char *)v535[0] - (char *)v506[2] + v531;
    sub_2367E8BBC(&v531, v18);
    if (v532.i64[1])
      v19 = v18;
    else
      v19 = 0;
    v531 = v19;
    memcpy((void *)(v532.i64[1] + v19 - v17), v506[2], v17);
    if (*(_DWORD *)(v14 + 6972) == 2 && !*(_QWORD *)(v14 + 6936))
      goto LABEL_94;
  }
  sub_236861280("%s:%d: Brotli compression failed\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/lib/jxl/encode.cc", 489);
LABEL_94:
  v60 = v506[2];
  v506[2] = 0;
  if (v60)
  {
    v61 = -*(v60 - 3);
    do
      v62 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v62 + v61, &qword_2564313D8));
    free((void *)*(v60 - 4));
  }
  sub_2367B45AC(v14);
  if (!v16)
  {
LABEL_110:
    v34 = 1;
    *(_DWORD *)(a1 + 2852) = 1;
LABEL_111:
    v73 = v532.i64[1];
    v532.i64[1] = 0;
    if (v73)
    {
      v74 = -*(_QWORD *)(v73 - 24);
      do
        v75 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v75 + v74, &qword_2564313D8));
      free(*(void **)(v73 - 32));
    }
LABEL_115:
    sub_2368612B8(&v516, 0);
    goto LABEL_192;
  }
  LODWORD(v543) = 1651470946;
  v63 = v531;
  v64 = *(_QWORD *)(a1 + 144);
  if (v531 <= 0xFFFFFFF7)
    v65 = 8;
  else
    v65 = 16;
  v66 = v64 + v65;
  v67 = *(_QWORD **)(a1 + 176);
  if (v67)
  {
    v68 = (void (*)(_QWORD, unint64_t))v67[3];
    if (v68)
    {
      v68(*v67, v64 + v65);
      *(_QWORD *)(a1 + 160) = v66;
    }
  }
  *(_QWORD *)(a1 + 144) = v66;
  v34 = sub_2368311D8(a1 + 104, &v531);
  if ((_DWORD)v34)
    goto LABEL_111;
  v69 = *(_QWORD *)(a1 + 144);
  v70 = *(_QWORD **)(a1 + 176);
  if (v70)
  {
    v71 = (void (*)(_QWORD, uint64_t))v70[3];
    if (v71)
    {
      v71(*v70, v64);
      *(_QWORD *)(a1 + 160) = v64;
    }
  }
  *(_QWORD *)(a1 + 144) = v64;
  v72 = v69 - v66;
  if (v69 - v66 > v63)
    goto LABEL_110;
  sub_23685C8C8(v506, a1 + 104, v65, 0);
  v34 = v508;
  if ((_DWORD)v508)
    goto LABEL_111;
  v86 = (int8x8_t *)v506[0];
  v87 = v506[1];
  v88 = v506[2];
  v526 = v507;
  v506[0] = 0;
  v506[1] = 0;
  v89 = sub_23685D318((uint64_t)&v543, v72, v63 > 0xFFFFFFF7, v86);
  v524 = (unint64_t)v86 + v89;
  v525.i64[0] = (uint64_t)v87 - v89;
  v525.i64[1] = (uint64_t)v88 + v89;
  sub_236831498(&v524);
  sub_236831498(v506);
  v90 = *(_QWORD **)(a1 + 176);
  if (v90)
  {
    v91 = (void (*)(_QWORD, uint64_t))v90[3];
    if (v91)
    {
      v91(*v90, v69);
      *(_QWORD *)(a1 + 160) = v69;
    }
  }
  *(_QWORD *)(a1 + 144) = v69;
  sub_23685CCEC((_QWORD *)(a1 + 104));
  v92 = v532.i64[1];
  v532.i64[1] = 0;
  if (v92)
  {
    v93 = -*(_QWORD *)(v92 - 24);
    do
      v94 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v94 + v93, &qword_2564313D8));
    free(*(void **)(v92 - 32));
  }
LABEL_63:
  sub_2368612B8(&v516, 0);
LABEL_191:
  v34 = 0;
LABEL_192:
  v113 = v523;
  v523 = 0;
  if (v113)
  {
    v114 = -*(_QWORD *)(v113 - 24);
    do
      v115 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v115 + v114, &qword_2564313D8));
    free(*(void **)(v113 - 32));
  }
  return v34;
}

void sub_23686049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a67;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;

  v70 = *(_QWORD *)(v68 - 168);
  *(_QWORD *)(v68 - 168) = 0;
  if (v70)
  {
    v71 = -*(_QWORD *)(v70 - 24);
    do
      v72 = __ldaxr(v67);
    while (__stlxr(v72 + v71, v67));
    free(*(void **)(v70 - 32));
  }
  v73 = *(_QWORD *)(v68 - 144);
  *(_QWORD *)(v68 - 144) = 0;
  if (v73)
  {
    v74 = -*(_QWORD *)(v73 - 24);
    do
      v75 = __ldaxr(v67);
    while (__stlxr(v75 + v74, v67));
    free(*(void **)(v73 - 32));
  }
  sub_23682629C(*(_QWORD **)(v68 - 120));
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a21)
    operator delete(a21);
  v76 = *(_QWORD *)(v68 - 240);
  *(_QWORD *)(v68 - 240) = 0;
  if (v76)
  {
    v77 = -*(_QWORD *)(v76 - 24);
    do
      v78 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v78 + v77, &qword_2564313D8));
    free(*(void **)(v76 - 32));
  }
  if (a67)
  {
    v79 = -*(_QWORD *)(a67 - 24);
    do
      v80 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v80 + v79, &qword_2564313D8));
    free(*(void **)(a67 - 32));
  }
  if (a35)
  {
    v81 = -*(_QWORD *)(a35 - 24);
    do
      v82 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v82 + v81, &qword_2564313D8));
    free(*(void **)(a35 - 32));
  }
  v83 = *(_QWORD *)(v68 - 200);
  *(_QWORD *)(v68 - 200) = 0;
  if (v83)
  {
    v84 = -*(_QWORD *)(v83 - 24);
    do
      v85 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v85 + v84, &qword_2564313D8));
    free(*(void **)(v83 - 32));
  }
  if (a54)
  {
    v86 = -*(_QWORD *)(a54 - 24);
    do
      v87 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v87 + v86, &qword_2564313D8));
    free(*(void **)(a54 - 32));
  }
  if (a61 < 0)
    operator delete(a56);
  if (a64)
  {
    v88 = -*(_QWORD *)(a64 - 24);
    do
      v89 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v89 + v88, &qword_2564313D8));
    free(*(void **)(a64 - 32));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_236860920(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  const char *v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;

  v4 = sub_2367F4718(a1 + 728);
  if (*(_BYTE *)(a1 + 736))
    v5 = 8 * *(_DWORD *)(a1 + 740) + 8;
  else
    v5 = *(_DWORD *)(a1 + 744);
  if (*(_BYTE *)(a1 + 361))
    v6 = *(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384);
  else
    v6 = 0;
  if (v4 > 0x40000000
    || ((v7 = v5, v8 = v5 > 0x40000000, v9 = v4 * v5, !v8) ? (v10 = v9 >= 0x10000000001) : (v10 = 1), v10))
  {
    v11 = 0xFFFFFFFFLL;
    if (!a2)
      return v11;
LABEL_14:
    v12 = "Too large image dimensions";
LABEL_15:
    MEMORY[0x23B7F8E1C](a2, v12);
    return v11;
  }
  if (v6 >= 0x10000001)
  {
    v11 = 0xFFFFFFFFLL;
    if (!a2)
      return v11;
    v12 = "Too large ICC profile size";
    goto LABEL_15;
  }
  v14 = *(_DWORD *)(a1 + 624);
  if (v14 >= 0x101)
  {
    v11 = 0xFFFFFFFFLL;
    if (!a2)
      return v11;
    goto LABEL_22;
  }
  if (!*(_BYTE *)(a1 + 344))
  {
    v11 = 10;
    if (!a2)
      return v11;
    v12 = "Too high modular bit depth";
    goto LABEL_15;
  }
  if (v4 > 0x40000 || v7 > 0x40000 || v9 >= 0x10000001)
  {
    v11 = 10;
    if (!a2)
      return v11;
    goto LABEL_14;
  }
  if (v6 > 0x400000)
  {
    v11 = 10;
    if (!a2)
      return v11;
    v12 = "Too large ICC profile";
    goto LABEL_15;
  }
  if (v14 > 4)
  {
    v11 = 10;
    if (!a2)
      return v11;
LABEL_22:
    v12 = "Too many extra channels";
    goto LABEL_15;
  }
  v15 = *(_QWORD *)(a1 + 632);
  v16 = *(_QWORD *)(a1 + 640) - v15;
  if (!v16)
    return 5;
  v17 = v16 / 96;
  if (v17 <= 1)
    v17 = 1;
  v18 = (int *)(v15 + 12);
  v11 = 5;
  while (1)
  {
    v19 = *v18;
    v18 += 24;
    if (v19 == 4)
      break;
    if (!--v17)
      return v11;
  }
  v11 = 10;
  if (a2)
  {
    v12 = "CMYK channel not allowed";
    goto LABEL_15;
  }
  return v11;
}

uint64_t sub_236860AE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD, unint64_t);
  uint64_t v13;
  uint64_t result;
  int8x8_t *v15;
  char *v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(_QWORD, uint64_t);
  unint64_t v25;
  _BOOL4 v26;
  int8x8_t *v27;
  int64x2_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(_QWORD, uint64_t);
  int64x2_t v32;
  char *v33;
  int64x2_t v34;
  uint64_t v35;
  int8x8_t *v36;
  int64x2_t v37;
  uint64_t v38;
  unsigned int v39;

  v8 = *(_QWORD *)(a1 + 144);
  if (a3 <= 0xFFFFFFF7)
    v9 = 8;
  else
    v9 = 16;
  v10 = v8 + v9;
  v11 = *(_QWORD **)(a1 + 176);
  if (v11)
  {
    v12 = (void (*)(_QWORD, unint64_t))v11[3];
    if (v12)
    {
      v12(*v11, v8 + v9);
      *(_QWORD *)(a1 + 160) = v10;
    }
  }
  *(_QWORD *)(a1 + 144) = v10;
  v13 = *a4;
  sub_23685C8C8(&v36, *a4 + 104, *(_QWORD *)a4[1] + 4, 0);
  result = v39;
  if (!v39)
  {
    v15 = v36;
    v35 = v38;
    v36 = 0;
    v16 = (char *)v15 + 4;
    v17 = v37;
    v37.i64[0] = 0;
    v18 = *(_QWORD *)(v13 + 2856);
    *(_QWORD *)(v13 + 2856) = v18 + 1;
    v15->i8[0] = BYTE3(v18);
    v15->i8[1] = BYTE2(v18);
    v15->i8[2] = BYTE1(v18);
    v15->i8[3] = v18;
    v32 = vaddq_s64(v17, (int64x2_t)xmmword_2368AFA00);
    v19 = a4[1];
    v20 = *(_QWORD *)v19;
    memcpy(v16, *(const void **)(v19 + 16), *(_QWORD *)v19);
    v33 = &v16[v20];
    v21.i64[0] = v20;
    v21.i64[0] = vsubq_s64(v32, v21).u64[0];
    v21.i64[1] = vaddq_s64(v32, vdupq_n_s64(v20)).i64[1];
    v34 = v21;
    sub_236831498(&v33);
    sub_236831498(&v36);
    v22 = *(_QWORD *)(a1 + 144);
    v23 = *(_QWORD **)(a1 + 176);
    if (v23)
    {
      v24 = (void (*)(_QWORD, uint64_t))v23[3];
      if (v24)
      {
        v24(*v23, v8);
        *(_QWORD *)(a1 + 160) = v8;
      }
    }
    *(_QWORD *)(a1 + 144) = v8;
    v25 = v22 - v10;
    if (v25 <= a3)
    {
      sub_23685C8C8(&v36, a1 + 104, v9, 0);
      result = v39;
      if (!v39)
      {
        v26 = a3 > 0xFFFFFFF7;
        v27 = v36;
        v28 = v37;
        v35 = v38;
        v36 = 0;
        v37.i64[0] = 0;
        v29 = sub_23685D318(a2, v25, v26, v27);
        v33 = (char *)v27 + v29;
        v34.i64[0] = v28.i64[0] - v29;
        v34.i64[1] = v28.i64[1] + v29;
        sub_236831498(&v33);
        sub_236831498(&v36);
        v30 = *(_QWORD **)(a1 + 176);
        if (v30)
        {
          v31 = (void (*)(_QWORD, uint64_t))v30[3];
          if (v31)
          {
            v31(*v30, v22);
            *(_QWORD *)(a1 + 160) = v22;
          }
        }
        *(_QWORD *)(a1 + 144) = v22;
        sub_23685CCEC((_QWORD *)(a1 + 104));
        return 0;
      }
    }
    else
    {
      result = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
  }
  return result;
}

uint64_t sub_236860D18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD, unint64_t);
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(_QWORD, uint64_t);
  unint64_t v17;
  _BOOL4 v18;
  int8x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(_QWORD, uint64_t);
  _QWORD v25[4];
  int8x8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v8 = *(_QWORD *)(a1 + 144);
  if (a3 <= 0xFFFFFFF7)
    v9 = 8;
  else
    v9 = 16;
  v10 = v8 + v9;
  v11 = *(_QWORD **)(a1 + 176);
  if (v11)
  {
    v12 = (void (*)(_QWORD, unint64_t))v11[3];
    if (v12)
    {
      v12(*v11, v8 + v9);
      *(_QWORD *)(a1 + 160) = v10;
    }
  }
  *(_QWORD *)(a1 + 144) = v10;
  result = sub_23683D0E8(*(_QWORD *)a4 + 104, *(_QWORD **)(a4 + 8));
  if (!(_DWORD)result)
  {
    v14 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD **)(a1 + 176);
    if (v15)
    {
      v16 = (void (*)(_QWORD, uint64_t))v15[3];
      if (v16)
      {
        v16(*v15, v8);
        *(_QWORD *)(a1 + 160) = v8;
      }
    }
    *(_QWORD *)(a1 + 144) = v8;
    v17 = v14 - v10;
    if (v17 <= a3)
    {
      sub_23685C8C8(&v26, a1 + 104, v9, 0);
      result = v30;
      if (!v30)
      {
        v18 = a3 > 0xFFFFFFF7;
        v19 = v26;
        v20 = v27;
        v21 = v28;
        v25[3] = v29;
        v26 = 0;
        v27 = 0;
        v22 = sub_23685D318(a2, v17, v18, v19);
        v25[0] = (char *)v19 + v22;
        v25[1] = v20 - v22;
        v25[2] = v21 + v22;
        sub_236831498(v25);
        sub_236831498(&v26);
        v23 = *(_QWORD **)(a1 + 176);
        if (v23)
        {
          v24 = (void (*)(_QWORD, uint64_t))v23[3];
          if (v24)
          {
            v24(*v23, v14);
            *(_QWORD *)(a1 + 160) = v14;
          }
        }
        *(_QWORD *)(a1 + 144) = v14;
        sub_23685CCEC((_QWORD *)(a1 + 104));
        return 0;
      }
    }
    else
    {
      result = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
  }
  return result;
}

_QWORD *sub_236860E90(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      v5 = a3;
      v6 = *v4;
      *v4 = 0;
      sub_2368611E8(a3, v6);
      v5[1] = v4[1];
      v7 = v4[2];
      v4[2] = 0;
      sub_2368612B8(v5 + 2, v7);
      v5[3] = v4[3];
      v8 = v4[4];
      v4[4] = 0;
      v9 = v5[4];
      v5[4] = v8;
      if (v9)
        ((void (*)(void))v5[5])();
      v5[5] = v4[5];
      v4 += 6;
      a3 = v5 + 6;
    }
    while (v4 != a2);
    return v5 + 6;
  }
  return a3;
}

_QWORD *sub_236860F38(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 40))();
  sub_2368612B8((_QWORD *)(a1 + 16), 0);
  return sub_2368611E8((_QWORD *)a1, 0);
}

uint64_t sub_236860F80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v6 = a3;
  v7 = a2;
  v5[0] = &v6;
  v5[1] = &v7;
  if (!a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    a1 = v8;
  }
  return sub_236861308((uint64_t)a1, a4, (uint64_t)v5);
}

uint64_t sub_236860FC4(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD, unint64_t);
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t result;
  void *v19;
  _QWORD *v20;
  void (*v21)(_QWORD, uint64_t);
  _BOOL4 v22;
  int8x8_t *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(_QWORD, uint64_t);
  char *v29;
  __int128 v30;
  uint64_t v31;
  void *__dst;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;

  v7 = *(_QWORD *)(a1 + 144);
  if (a3 <= 0xFFFFFFF7)
    v8 = 8;
  else
    v8 = 16;
  v9 = v7 + v8;
  v10 = v7 + v8;
  v11 = *(_QWORD **)(a1 + 176);
  if (v11)
  {
    v12 = (void (*)(_QWORD, unint64_t))v11[3];
    if (v12)
    {
      v12(*v11, v7 + v8);
      *(_QWORD *)(a1 + 160) = v10;
    }
  }
  *(_QWORD *)(a1 + 144) = v10;
  v13 = (_QWORD *)a4[1];
  v14 = v13[1];
  if (v14)
  {
    v15 = 0;
    v16 = *a4 + 104;
    while (1)
    {
      v17 = v14 - v15;
      sub_23685C8C8(&__dst, v16, 1uLL, v14 - v15);
      result = v35;
      if (v35)
        break;
      v19 = __dst;
      v29 = (char *)__dst;
      v30 = v33;
      v31 = v34;
      __dst = 0;
      *(_QWORD *)&v33 = 0;
      if ((unint64_t)v30 < v17)
        v17 = v30;
      memcpy(v19, (const void *)(*v13 + v15), v17);
      v29 += v17;
      *(_QWORD *)&v30 = v30 - v17;
      *((_QWORD *)&v30 + 1) += v17;
      sub_236831498(&v29);
      if (!v35)
        sub_236831498(&__dst);
      v15 += v17;
      if (v15 >= v14)
      {
        v10 = *(_QWORD *)(a1 + 144);
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    v20 = *(_QWORD **)(a1 + 176);
    if (v20)
    {
      v21 = (void (*)(_QWORD, uint64_t))v20[3];
      if (v21)
      {
        v21(*v20, v7);
        *(_QWORD *)(a1 + 160) = v7;
      }
    }
    *(_QWORD *)(a1 + 144) = v7;
    if (v10 - v9 <= a3)
    {
      sub_23685C8C8(&__dst, a1 + 104, v8, 0);
      result = v35;
      if (!v35)
      {
        v22 = a3 > 0xFFFFFFF7;
        v23 = (int8x8_t *)__dst;
        v24 = v33;
        v31 = v34;
        __dst = 0;
        *(_QWORD *)&v33 = 0;
        v25 = sub_23685D318(a2, v10 - v9, v22, v23);
        v29 = (char *)v23 + v25;
        *(_QWORD *)&v30 = v24 - v25;
        *((_QWORD *)&v30 + 1) = *((_QWORD *)&v24 + 1) + v25;
        sub_236831498(&v29);
        sub_236831498(&__dst);
        v26 = *(_QWORD **)(a1 + 176);
        if (v26)
        {
          v27 = (void (*)(_QWORD, uint64_t))v26[3];
          if (v27)
          {
            v27(*v26, v10);
            *(_QWORD *)(a1 + 160) = v10;
          }
        }
        *(_QWORD *)(a1 + 144) = v10;
        sub_23685CCEC((_QWORD *)(a1 + 104));
        return 0;
      }
    }
    else
    {
      result = 1;
      *(_DWORD *)(a1 + 2852) = 1;
    }
  }
  return result;
}

_QWORD *sub_2368611E8(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    v4 = *(void **)(v2 + 1176);
    if (v4)
    {
      *(_QWORD *)(v2 + 1184) = v4;
      operator delete(v4);
    }
    v6 = (void **)(v2 + 1152);
    sub_23683E57C(&v6);
    sub_2368284CC(v2 + 848);
    if (*(char *)(v2 + 751) < 0)
      operator delete(*(void **)(v2 + 728));
    v5 = *(void **)(v2 + 704);
    if (v5)
    {
      *(_QWORD *)(v2 + 712) = v5;
      operator delete(v5);
    }
    sub_236816F38(v2 + 8);
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(v3[1] + 16))(*(_QWORD *)v3[1], v2);
  }
  return result;
}

uint64_t sub_236861280(char *a1, ...)
{
  va_list va;

  va_start(va, a1);
  return vfprintf((FILE *)*MEMORY[0x24BDAC8D8], a1, va);
}

_QWORD *sub_2368612B8(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = result;
    v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(_QWORD *)(v2 + 16) = v4;
      operator delete(v4);
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(v3[1] + 16))(*(_QWORD *)v3[1], v2);
  }
  return result;
}

uint64_t sub_236861308(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if ((_DWORD)a2)
  {
    v6[0] = sub_2367CAAA0;
    v6[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))result)(*(_QWORD *)(result + 8), v6, sub_23686139C, sub_2368613C0, 0, a2);
    }
    else
    {
      v4 = 0;
      v5 = a2;
      do
        result = (**(uint64_t (***)(_QWORD, uint64_t))a3)(**(_QWORD **)(a3 + 8), v4++);
      while (v5 != v4);
    }
  }
  return result;
}

uint64_t sub_23686139C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_2368613C0(uint64_t a1, unsigned int a2)
{
  return (***(uint64_t (****)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), a2);
}

uint64_t JxlEncoderSetColorEncoding(uint64_t a1, int *a2)
{
  uint64_t result;
  int v4;
  float v5;
  int v6;

  if (!*(_BYTE *)(a1 + 2867) || *(_BYTE *)(a1 + 2868))
    goto LABEL_3;
  if (sub_2367F0CDC(a1 + 368, a2))
  {
    result = 1;
    *(_DWORD *)(a1 + 2852) = 1;
    return result;
  }
  sub_2367C5AC8(a1 + 352);
  v4 = *(_DWORD *)(a1 + 2700);
  if (*(_DWORD *)(a1 + 408) != 1)
  {
    if (v4 == 3)
      goto LABEL_10;
LABEL_3:
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  if (v4 != 1)
    goto LABEL_3;
LABEL_10:
  *(_BYTE *)(a1 + 2868) = 1;
  if (*(_BYTE *)(a1 + 2869))
    return 0;
  if (*(_BYTE *)(a1 + 416))
  {
    v5 = 255.0;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 424);
    v5 = 255.0;
    if (v6 == 18)
      v5 = 1000.0;
    if (v6 == 16)
      v5 = 10000.0;
  }
  result = 0;
  *(float *)(a1 + 604) = v5;
  return result;
}

uint64_t JxlEncoderSetICCProfile(uint64_t a1, char *a2, unint64_t a3)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  void *v8;
  int v9;
  float v10;
  int v11;
  void *__p[2];
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 2867) || *(_BYTE *)(a1 + 2868))
  {
    v4 = 129;
LABEL_4:
    *(_DWORD *)(a1 + 2852) = v4;
    return 1;
  }
  if (!a3)
  {
    v4 = 4;
    goto LABEL_4;
  }
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  sub_2367C9C54(__p, a2, &a2[a3], a3);
  if (!*(_BYTE *)(a1 + 296))
  {
    v8 = *(void **)(a1 + 384);
    if (v8)
    {
      *(_QWORD *)(a1 + 392) = v8;
      operator delete(v8);
      *(_QWORD *)(a1 + 384) = 0;
      *(_QWORD *)(a1 + 392) = 0;
      *(_QWORD *)(a1 + 400) = 0;
    }
    *(_OWORD *)(a1 + 384) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 400) = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    *(_BYTE *)(a1 + 380) = 0;
    *(_BYTE *)(a1 + 361) = 1;
LABEL_14:
    v9 = *(_DWORD *)(a1 + 2700);
    if (*(_DWORD *)(a1 + 408) == 1)
    {
      if (v9 != 1)
        goto LABEL_16;
    }
    else if (v9 != 3)
    {
      goto LABEL_16;
    }
    *(_BYTE *)(a1 + 2868) = 1;
    if (!*(_BYTE *)(a1 + 2869))
    {
      if (*(_BYTE *)(a1 + 416))
      {
        v10 = 255.0;
      }
      else
      {
        v11 = *(_DWORD *)(a1 + 424);
        v10 = 255.0;
        if (v11 == 18)
          v10 = 1000.0;
        if (v11 == 16)
          v10 = 10000.0;
      }
      *(float *)(a1 + 604) = v10;
    }
    if (!*(_DWORD *)(a1 + 2684) && *(_BYTE *)(a1 + 296))
      sub_2367CA6D0(a1 + 352, *(_QWORD *)(a1 + 232), *(unsigned int (**)(uint64_t, uint64_t, uint64_t, double *, int *))(a1 + 240));
    v5 = 0;
    goto LABEL_30;
  }
  v7 = sub_2367F0C08(a1 + 368, __p, *(_QWORD *)(a1 + 232), *(unsigned int (**)(uint64_t, _QWORD, _QWORD, int *, int *))(a1 + 240));
  *(_BYTE *)(a1 + 361) = !v7;
  if (!v7)
    goto LABEL_14;
LABEL_16:
  *(_DWORD *)(a1 + 2852) = 4;
  v5 = 1;
LABEL_30:
  if (__p[0])
    operator delete(__p[0]);
  return v5;
}

void sub_236861640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double JxlEncoderInitBasicInfo(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_2368AFA10;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0x300000001;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)&result = 0x10000000ALL;
  *(_OWORD *)(a1 + 80) = xmmword_2368AFA20;
  return result;
}

double JxlEncoderInitFrameHeader(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_2368AFA30;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

_QWORD *JxlEncoderInitBlendInfo(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t JxlEncoderSetBasicInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  float v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *__p;
  _BYTE v31[20];
  __int128 v32;

  if (sub_2367F4780(a1 + 728, *(unsigned int *)(a2 + 4), *(unsigned int *)(a2 + 8))
    || sub_2368619B8(*(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16)))
  {
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 332) = v6;
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 336) = v7;
  *(_BYTE *)(a1 + 328) = v7 != 0;
  v8 = (!*(_DWORD *)(a2 + 36) || v6 <= 0xC) && *(_DWORD *)(a2 + 60) < 0xDu;
  *(_BYTE *)(a1 + 344) = v8;
  v9 = *(unsigned int *)(a2 + 96);
  if (*(_QWORD *)(a2 + 96) && *(_QWORD *)(a2 + 96) != *(_QWORD *)(a2 + 4))
  {
    if (v9 > 0x40000000)
      goto LABEL_3;
    v10 = *(unsigned int *)(a2 + 100);
    if (v10 > 0x40000000 || sub_2367F4780(a1 + 560, v9, v10))
      goto LABEL_3;
    *(_BYTE *)(a1 + 558) = 1;
  }
  v11 = *(unsigned int *)(a2 + 56);
  *(_DWORD *)(a1 + 624) = v11;
  sub_2367F73B4((int64x2_t *)(a1 + 632), v11);
  v12 = *(_DWORD *)(a2 + 60);
  if (*(_DWORD *)(a2 + 56))
  {
    if (v12)
    {
      *(_OWORD *)&v31[4] = 0u;
      v32 = 0u;
      LODWORD(__p) = 0;
      HIDWORD(__p) = v12;
      *(_DWORD *)v31 = *(_DWORD *)(a2 + 64);
      if (JxlEncoderSetExtraChannelInfo(a1, 0, &__p))
        goto LABEL_3;
    }
  }
  else if (v12)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a1 + 345) = *(_DWORD *)(a2 + 36) == 0;
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 - 1) > 7)
    goto LABEL_3;
  *(_DWORD *)(a1 + 552) = v13;
  if ((*(_DWORD *)(a2 + 52) | 2) != 3)
    goto LABEL_3;
  v14 = *(float *)(a2 + 20);
  if (v14 != 0.0)
    goto LABEL_23;
  if (*(_BYTE *)(a1 + 2868))
  {
    if (*(_BYTE *)(a1 + 416))
    {
      v14 = 255.0;
    }
    else
    {
      v29 = *(_DWORD *)(a1 + 424);
      v14 = 255.0;
      if (v29 == 18)
        v14 = 1000.0;
      if (v29 == 16)
        v14 = 10000.0;
    }
LABEL_23:
    *(float *)(a1 + 604) = v14;
    *(_BYTE *)(a1 + 2869) = 1;
  }
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 612) = *(_DWORD *)(a2 + 28) != 0;
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 32);
  v15 = *(_OWORD *)(a2 + 188);
  v17 = *(_OWORD *)(a2 + 160);
  v16 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 2792) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 2808) = v17;
  *(_OWORD *)(a1 + 2824) = v16;
  *(_OWORD *)(a1 + 2836) = v15;
  v19 = *(_OWORD *)(a2 + 112);
  v18 = *(_OWORD *)(a2 + 128);
  v20 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 2728) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 2744) = v20;
  *(_OWORD *)(a1 + 2760) = v19;
  *(_OWORD *)(a1 + 2776) = v18;
  v22 = *(_OWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 64);
  v23 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 2664) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2680) = v23;
  *(_OWORD *)(a1 + 2696) = v22;
  *(_OWORD *)(a1 + 2712) = v21;
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 2867) = 1;
  v24 = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 557) = v24 != 0;
  if (!v24)
    goto LABEL_28;
  v25 = *(_DWORD *)(a2 + 84);
  if (!v25 || (v26 = *(_DWORD *)(a2 + 80)) == 0)
  {
LABEL_3:
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  *(_DWORD *)(a1 + 696) = v26;
  *(_DWORD *)(a1 + 700) = v25;
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 708) = *(_DWORD *)(a2 + 92) != 0;
LABEL_28:
  __p = 0;
  *(_QWORD *)v31 = 0;
  *(_QWORD *)&v31[8] = 0;
  v27 = sub_236860920(a1, (uint64_t)&__p);
  if (v27 == -1 || (v4 = 0, v28 = *(_DWORD *)(a1 + 300), v28 < v27) && v28 != -1)
  {
    *(_DWORD *)(a1 + 2852) = 129;
    v4 = 1;
  }
  if ((v31[15] & 0x80000000) != 0)
    operator delete(__p);
  return v4;
}

void sub_23686199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2368619B8(unsigned int a1, unsigned int a2)
{
  if (!a2)
  {
    if (a1 - 1 >= 0x18)
    {
      sub_236861280("%s:%d: Invalid value for bits_per_sample\n");
      return 1;
    }
    return 0;
  }
  if (a2 <= 8 && a2 + 24 >= a1 && a2 + 3 <= a1)
    return 0;
  sub_236861280("%s:%d: Invalid float description\n");
  return 1;
}

uint64_t JxlEncoderSetExtraChannelInfo(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  void *__p[2];
  uint64_t v16;

  if (*(unsigned int *)(a1 + 624) <= a2 || sub_2368619B8(a3[1], a3[2]))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 632) + 96 * a2;
    *(_DWORD *)(v8 + 12) = *a3;
    v9 = a3[1];
    *(_DWORD *)(v8 + 28) = v9;
    v11 = v9 < 0xD && *(_BYTE *)(a1 + 344) != 0;
    *(_BYTE *)(a1 + 344) = v11;
    v12 = a3[2];
    *(_DWORD *)(v8 + 32) = v12;
    *(_BYTE *)(v8 + 24) = v12 != 0;
    *(_DWORD *)(v8 + 40) = a3[3];
    MEMORY[0x23B7F8E1C](v8 + 48, &unk_23692C0FD);
    *(_BYTE *)(v8 + 72) = a3[5] != 0;
    *(_DWORD *)(v8 + 92) = a3[10];
    *(_DWORD *)(v8 + 76) = a3[6];
    *(_DWORD *)(v8 + 80) = a3[7];
    *(_DWORD *)(v8 + 84) = a3[8];
    *(_DWORD *)(v8 + 88) = a3[9];
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v13 = sub_236860920(a1, (uint64_t)__p);
    if (v13 == -1 || (v6 = 0, v14 = *(_DWORD *)(a1 + 300), v14 < v13) && v14 != -1)
    {
      *(_DWORD *)(a1 + 2852) = 129;
      v6 = 1;
    }
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return v6;
}

void sub_236861B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double JxlEncoderInitExtraChannelInfo(int a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = 8;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t JxlEncoderSetUpsamplingMode(_DWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = 0;
  switch(a2)
  {
    case 1uLL:
      return result;
    case 2uLL:
    case 4uLL:
    case 8uLL:
      if (a3 <= -2)
        goto LABEL_3;
      if (a3 >= 2)
      {
        v5 = 128;
        goto LABEL_6;
      }
      v7 = a1 + 230;
      if (a2 != 4)
        v7 = a1 + 285;
      if (a2 == 2)
        v8 = a1 + 215;
      else
        v8 = v7;
      if (!a3)
      {
        v9 = 840;
        if (a2 == 4)
          v9 = 220;
        if (a2 == 2)
          v10 = 60;
        else
          v10 = v9;
        a1[214] |= a2 >> 1;
        bzero(v8, v10);
        switch(a2)
        {
          case 2uLL:
            result = 0;
            a1[224] = 1065353216;
            return result;
          case 4uLL:
            v13 = 0;
            *(_QWORD *)&v14 = 0x1800000013;
            DWORD2(v14) = 49;
            do
            {
              v8[*(int *)((char *)&v14 + v13)] = 1065353216;
              v13 += 4;
            }
            while (v13 != 12);
            break;
          case 8uLL:
            for (i = 0; i != 10; ++i)
            {
              result = 0;
              v8[dword_2369238B4[i]] = 1065353216;
            }
            return result;
        }
        return 0;
      }
      if (a3 == -1)
      {
        result = 0;
        a1[214] &= ~(a2 >> 1);
        return result;
      }
      JxlEncoderSetUpsamplingMode(a1, a2, 0);
      if (a2 != 8)
      {
        if (a2 == 4)
        {
          result = 0;
          v8[19] = 0;
          v8[24] = 1056964608;
          return result;
        }
        return 0;
      }
      v12 = 0;
      v14 = xmmword_2368AFA40;
      do
      {
        v8[*(int *)((char *)&v14 + v12)] = 0;
        v12 += 4;
      }
      while (v12 != 16);
      result = 0;
      v8[54] = 1056964608;
      v8[124] = 1056964608;
      return result;
    default:
LABEL_3:
      v5 = 129;
LABEL_6:
      a1[713] = v5;
      return 1;
  }
}

double JxlEncoderSetExtraChannelName(uint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  unint64_t v5;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  unint64_t v16;

  if (*(unsigned int *)(a1 + 624) <= a2)
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return result;
  }
  v5 = a4;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_2367CA230();
  if (a4 >= 0x17)
  {
    v9 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v9 = a4 | 7;
    v10 = v9 + 1;
    v8 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v15 + 1) = v5;
    v16 = v10 | 0x8000000000000000;
    *(_QWORD *)&v15 = v8;
  }
  else
  {
    HIBYTE(v16) = a4;
    v8 = &v15;
    if (!a4)
      goto LABEL_11;
  }
  do
  {
    v11 = *a3++;
    *(_BYTE *)v8 = v11;
    v8 = (__int128 *)((char *)v8 + 1);
    --v5;
  }
  while (v5);
LABEL_11:
  *(_BYTE *)v8 = 0;
  v12 = *(_QWORD *)(a1 + 632) + 96 * a2;
  v13 = v12 + 48;
  if (*(char *)(v12 + 71) < 0)
    operator delete(*(void **)v13);
  result = *(double *)&v15;
  *(_OWORD *)v13 = v15;
  *(_QWORD *)(v13 + 16) = v16;
  return result;
}

char *JxlEncoderFrameSettingsCreate(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  _BYTE *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  _BYTE *v19;
  unint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int64x2_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v41;
  char *v42;
  uint64_t v43;

  v4 = (char *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)a1, 784);
  v5 = v4;
  if (!v4)
  {
    v42 = 0;
    v43 = a1;
    goto LABEL_48;
  }
  bzero(v4, 0x310uLL);
  *((_DWORD *)v5 + 4) = 1065353216;
  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  v5[48] = 0;
  *((_QWORD *)v5 + 8) = 0xFFFFFFFF00000003;
  *((_DWORD *)v5 + 25) = -1;
  *((_WORD *)v5 + 52) = -1;
  *((_QWORD *)v5 + 11) = -1;
  v5[96] = -1;
  *((_QWORD *)v5 + 14) = -1;
  *((_QWORD *)v5 + 15) = -1;
  *(_QWORD *)(v5 + 125) = -1;
  *(_DWORD *)(v5 + 201) = 16843009;
  v5[205] = 1;
  *(_OWORD *)(v5 + 216) = xmmword_2368AF5C0;
  *((_DWORD *)v5 + 58) = 1056964608;
  *(_QWORD *)(v5 + 252) = 0;
  *((_DWORD *)v5 + 65) = 0;
  *(_QWORD *)(v5 + 236) = 0;
  *(_QWORD *)(v5 + 244) = 0;
  v6 = operator new(0x20uLL);
  *((_QWORD *)v5 + 30) = v6;
  *((_QWORD *)v5 + 32) = v6 + 2;
  *v6 = xmmword_2369238DC;
  v6[1] = unk_2369238EC;
  *((_QWORD *)v5 + 31) = v6 + 2;
  *((_DWORD *)v5 + 66) = 1119879168;
  *((_QWORD *)v5 + 34) = 32;
  *((_QWORD *)v5 + 35) = 0xFFFFFFFFLL;
  *((_QWORD *)v5 + 36) = 0x33F8147AELL;
  v5[296] = 0;
  *(_OWORD *)(v5 + 300) = xmmword_2368AF5B0;
  *((_DWORD *)v5 + 79) = 2;
  *((_QWORD *)v5 + 40) = 0;
  *((_QWORD *)v5 + 41) = 0;
  *((_QWORD *)v5 + 42) = 0;
  *((_QWORD *)v5 + 43) = -1;
  *((_DWORD *)v5 + 88) = 256;
  v5[356] = 0;
  v5[360] = 0;
  *((_QWORD *)v5 + 46) = -1;
  *((_QWORD *)v5 + 47) = 0x42BE0000FFFFFFFFLL;
  *((_QWORD *)v5 + 48) = 0x40042A00000;
  v5[392] = 0;
  *(_QWORD *)(v5 + 396) = -1;
  v5[404] = 0;
  *((_QWORD *)v5 + 51) = 0x3F800000BF800000;
  *((_QWORD *)v5 + 52) = -1;
  v5[424] = 1;
  *(_OWORD *)(v5 + 492) = 0u;
  *((_OWORD *)v5 + 29) = 0u;
  *((_OWORD *)v5 + 30) = 0u;
  *((_OWORD *)v5 + 27) = 0u;
  *((_OWORD *)v5 + 28) = 0u;
  *((_QWORD *)v5 + 80) = 0;
  *((_OWORD *)v5 + 38) = 0u;
  *((_OWORD *)v5 + 39) = 0u;
  *((_OWORD *)v5 + 36) = 0u;
  *((_OWORD *)v5 + 37) = 0u;
  *((_OWORD *)v5 + 34) = 0u;
  *((_OWORD *)v5 + 35) = 0u;
  *((_OWORD *)v5 + 32) = 0u;
  *((_OWORD *)v5 + 33) = 0u;
  v5[772] = 0;
  *((_QWORD *)v5 + 97) = 0;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  v42 = v5;
  v43 = a1;
  *(_QWORD *)v5 = a1;
  if (a2)
  {
    v5[8] = *(_BYTE *)(a2 + 8);
    sub_23682B940((uint64_t)(v5 + 16), a2 + 16);
    v7 = *(_OWORD *)(a2 + 656);
    v8 = *(_OWORD *)(a2 + 672);
    v9 = *(_OWORD *)(a2 + 688);
    *((_QWORD *)v5 + 88) = *(_QWORD *)(a2 + 704);
    *((_OWORD *)v5 + 42) = v8;
    *((_OWORD *)v5 + 43) = v9;
    *((_OWORD *)v5 + 41) = v7;
    if (v5 == (char *)a2)
    {
LABEL_25:
      std::string::operator=((std::string *)(v5 + 736), (const std::string *)(a2 + 736));
      v24 = *(_OWORD *)(a2 + 760);
      *((_QWORD *)v5 + 97) = *(_QWORD *)(a2 + 776);
      *(_OWORD *)(v5 + 760) = v24;
      goto LABEL_26;
    }
    v10 = *(char **)(a2 + 712);
    v11 = *(_BYTE **)(a2 + 720);
    v12 = v11 - v10;
    v13 = (v11 - v10) >> 4;
    v14 = *((_QWORD *)v5 + 91);
    v15 = (char *)*((_QWORD *)v5 + 89);
    if (v13 <= (v14 - (uint64_t)v15) >> 4)
    {
      v18 = (void **)(v5 + 720);
      v19 = (_BYTE *)*((_QWORD *)v5 + 90);
      v20 = (v19 - v15) >> 4;
      if (v20 < v13)
      {
        v21 = &v10[16 * v20];
        if (v19 != v15)
        {
          memmove(*((void **)v5 + 89), *(const void **)(a2 + 712), v19 - v15);
          v15 = (char *)*v18;
        }
        v12 = v11 - v21;
        if (v11 == v21)
          goto LABEL_24;
        v22 = v15;
        v23 = v21;
        goto LABEL_23;
      }
    }
    else
    {
      if (v15)
      {
        *((_QWORD *)v5 + 90) = v15;
        operator delete(v15);
        v14 = 0;
        *((_QWORD *)v5 + 89) = 0;
        *((_QWORD *)v5 + 90) = 0;
        *((_QWORD *)v5 + 91) = 0;
      }
      if ((v12 & 0x8000000000000000) != 0)
        sub_2367C3440();
      v16 = v14 >> 3;
      if (v14 >> 3 <= v13)
        v16 = (v11 - v10) >> 4;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      sub_236822328((_QWORD *)v5 + 89, v17);
      v18 = (void **)(v5 + 720);
      v15 = (char *)*((_QWORD *)v5 + 90);
    }
    if (v11 == v10)
    {
LABEL_24:
      *v18 = &v15[v12];
      goto LABEL_25;
    }
    v22 = v15;
    v23 = v10;
LABEL_23:
    memmove(v22, v23, v12);
    goto LABEL_24;
  }
  v5[8] = 0;
LABEL_26:
  *((_DWORD *)v5 + 104) = *(_DWORD *)(a1 + 300);
  v25 = *(unsigned int *)(a1 + 624);
  v41 = 0;
  sub_236862354((char **)v5 + 3, v25, &v41);
  v27 = *(char **)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v27 >= v26)
  {
    v29 = *(char **)(a1 + 40);
    v30 = (v27 - v29) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      sub_2367C3440();
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 60)
        sub_2367C3488();
      v34 = (char *)operator new(16 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[16 * v30];
    v42 = 0;
    *(_QWORD *)v35 = v5;
    *((_QWORD *)v35 + 1) = a1;
    v28 = v35 + 16;
    if (v27 == v29)
    {
      v37 = vdupq_n_s64((unint64_t)v27);
    }
    else
    {
      do
      {
        v36 = *((_QWORD *)v27 - 2);
        v27 -= 16;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v35 - 2) = v36;
        v35 -= 16;
        *((_QWORD *)v35 + 1) = *((_QWORD *)v27 + 1);
      }
      while (v27 != v29);
      v37 = *(int64x2_t *)(a1 + 40);
    }
    *(_QWORD *)(a1 + 40) = v35;
    *(_QWORD *)(a1 + 48) = v28;
    *(_QWORD *)(a1 + 56) = &v34[16 * v33];
    v39 = (_QWORD *)v37.i64[1];
    v38 = (_QWORD *)v37.i64[0];
    while (v39 != v38)
    {
      v39 -= 2;
      sub_23686246C(v39);
    }
    if (v38)
      operator delete(v38);
  }
  else
  {
    v42 = 0;
    v28 = v27 + 16;
    *(_QWORD *)v27 = v5;
    *((_QWORD *)v27 + 1) = a1;
  }
  *(_QWORD *)(a1 + 48) = v28;
LABEL_48:
  sub_23686246C(&v42);
  return v5;
}

void sub_236862338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23686246C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_236862354(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      v23 = &v5[4 * (a2 - v7)];
      v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62)
        sub_2367C3440();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 1;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)sub_2367C3454(v12);
      v15 = &v13[4 * v7];
      v16 = &v13[4 * a2];
      v17 = 4 * a2 - 4 * v7;
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      v19 = &v13[4 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 4)
      {
        v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

_QWORD *sub_23686246C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = result;
    if (*(char *)(v1 + 759) < 0)
      operator delete(*(void **)(v1 + 736));
    v3 = *(void **)(v1 + 712);
    if (v3)
    {
      *(_QWORD *)(v1 + 720) = v3;
      operator delete(v3);
    }
    sub_236816F38(v1 + 16);
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(v2[1] + 16))(*(_QWORD *)v2[1], v1);
  }
  return result;
}

uint64_t JxlEncoderSetFrameLossless(_BYTE *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 && (v2 = *(_QWORD *)a1, *(_BYTE *)(*(_QWORD *)a1 + 2867)) && *(_BYTE *)(v2 + 345))
  {
    *(_DWORD *)(v2 + 2852) = 129;
    return 1;
  }
  else
  {
    v3 = 0;
    a1[8] = a2 != 0;
  }
  return v3;
}

uint64_t JxlEncoderSetFrameDistance(float *a1, float a2)
{
  uint64_t result;

  if (a2 >= 0.0 && a2 <= 25.0)
  {
    result = 0;
    if (a2 < 0.01 && a2 > 0.0)
      a2 = 0.01;
    a1[4] = a2;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a1 + 2852) = 129;
    return 1;
  }
  return result;
}

uint64_t JxlEncoderSetExtraChannelDistance(char **a1, unint64_t a2, float a3)
{
  unint64_t v4;
  BOOL v5;
  uint64_t result;
  float v8;
  char *v9;
  char **v10;
  int v11;

  v4 = *((unsigned int *)*a1 + 156);
  if (v4 > a2 && (a3 == -1.0 || (a3 >= 0.0 ? (v5 = a3 <= 25.0) : (v5 = 0), v5)))
  {
    if (a3 >= 0.01 || a3 <= 0.0)
      v8 = a3;
    else
      v8 = 0.01;
    v9 = a1[3];
    v10 = a1 + 3;
    if (a2 >= (a1[4] - v9) >> 2)
    {
      v11 = 0;
      sub_236862354(v10, v4, &v11);
      v9 = *v10;
    }
    result = 0;
    *(float *)&v9[4 * a2] = v8;
  }
  else
  {
    *((_DWORD *)*a1 + 713) = 129;
    return 1;
  }
  return result;
}

float JxlEncoderDistanceFromQuality(float a1)
{
  double v1;

  v1 = 0.0;
  if (a1 < 100.0)
  {
    if (a1 >= 30.0)
      return (float)(100.0 - a1) * 0.09 + 0.1;
    else
      return a1 * -1.15 + a1 * 0.0176666667 * a1 + 25.0;
  }
  return v1;
}

uint64_t JxlEncoderFrameSettingsSetOption(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  BOOL v7;

  switch(a2)
  {
    case 0:
      if (*(_BYTE *)(*a1 + 2870))
      {
        if ((unint64_t)(a3 - 12) <= 0xFFFFFFFFFFFFFFF4)
        {
LABEL_10:
          *(_DWORD *)(*a1 + 2852) = 128;
          return 1;
        }
      }
      else if ((unint64_t)(a3 - 11) <= 0xFFFFFFFFFFFFFFF5)
      {
        goto LABEL_10;
      }
      result = 0;
      *((_DWORD *)a1 + 16) = 10 - a3;
      return result;
    case 1:
      if ((unint64_t)a3 >= 5)
        goto LABEL_49;
      result = 0;
      a1[9] = a3;
      return result;
    case 2:
      if ((unint64_t)(a3 + 1) > 9 || ((1 << (a3 + 1)) & 0x22D) == 0)
        goto LABEL_3;
      result = 0;
      *((_DWORD *)a1 + 99) = a3;
      return result;
    case 3:
      if ((unint64_t)(a3 + 1) > 9 || ((1 << (a3 + 1)) & 0x22D) == 0)
        goto LABEL_3;
      result = 0;
      *((_DWORD *)a1 + 100) = a3;
      return result;
    case 4:
      if ((unint64_t)a3 > 1)
        return 1;
      result = 0;
      *((_BYTE *)a1 + 404) = a3 == 1;
      return result;
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 23:
    case 30:
    case 33:
    case 35:
    case 36:
    case 37:
      if ((unint64_t)(a3 - 2) <= 0xFFFFFFFFFFFFFFFCLL)
        goto LABEL_3;
      switch(a2)
      {
        case 6:
          result = 0;
          *((_BYTE *)a1 + 93) = a3;
          break;
        case 7:
          result = 0;
          *((_BYTE *)a1 + 94) = a3;
          break;
        case 8:
          result = 0;
          *((_BYTE *)a1 + 95) = a3;
          break;
        case 9:
          goto LABEL_22;
        case 10:
          result = 0;
          *((_BYTE *)a1 + 96) = a3;
          break;
        case 11:
          result = 0;
          *((_BYTE *)a1 + 84) = a3 == 1;
          break;
        case 12:
          result = 0;
          *((_BYTE *)a1 + 132) = a3;
          break;
        case 13:
          result = 0;
          *((_BYTE *)a1 + 106) = a3 == 1;
          break;
        case 14:
          goto LABEL_24;
        case 15:
          goto LABEL_26;
        case 16:
          result = 0;
          *((_DWORD *)a1 + 92) = a3;
          break;
        case 17:
          result = 0;
          *((_BYTE *)a1 + 104) = a3;
          break;
        case 18:
          result = 0;
          *((_BYTE *)a1 + 105) = a3;
          break;
        case 19:
          goto LABEL_28;
        case 22:
          goto LABEL_30;
        case 23:
          result = 0;
          *((_BYTE *)a1 + 392) = a3 == 1;
          break;
        case 24:
          goto LABEL_33;
        case 25:
          goto LABEL_36;
        case 26:
          goto LABEL_38;
        case 27:
          goto LABEL_40;
        case 29:
          goto LABEL_42;
        case 30:
          result = 0;
          v7 = a3 == -1 || a3 != 0;
          *((_BYTE *)a1 + 201) = v7;
          break;
        case 31:
          goto LABEL_6;
        case 32:
          goto LABEL_45;
        case 33:
          result = 0;
          *((_BYTE *)a1 + 202) = a3 != 0;
          break;
        case 34:
          goto LABEL_47;
        case 35:
          result = 0;
          *((_BYTE *)a1 + 203) = a3 != 0;
          break;
        case 36:
          result = 0;
          *((_BYTE *)a1 + 204) = a3 != 0;
          break;
        case 37:
          result = 0;
          *((_BYTE *)a1 + 205) = a3 != 0;
          break;
        default:
          goto LABEL_49;
      }
      return result;
    case 9:
      if ((unint64_t)(a3 - 4) <= 0xFFFFFFFFFFFFFFFALL)
        goto LABEL_3;
LABEL_22:
      result = 0;
      *((_DWORD *)a1 + 25) = a3;
      return result;
    case 14:
      if (a3 <= -2)
        goto LABEL_3;
LABEL_24:
      result = 0;
      a1[14] = a3;
      return result;
    case 15:
      if (a3 <= -2)
        goto LABEL_3;
LABEL_26:
      result = 0;
      a1[15] = a3;
      return result;
    case 19:
      if ((unint64_t)(a3 - 3) <= 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_3;
LABEL_28:
      result = 0;
      *((_DWORD *)a1 + 32) = a3;
      return result;
    case 22:
      if ((unint64_t)(a3 - 70914) < 0xFFFFFFFFFFFEEAFDLL)
        goto LABEL_3;
LABEL_30:
      result = 0;
      if (a3 == -1)
        *((_DWORD *)a1 + 97) = 1024;
      else
        *((_DWORD *)a1 + 97) = a3;
      return result;
    case 24:
      if ((unint64_t)(a3 - 3) <= 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_3;
LABEL_33:
      result = 0;
      if (a3 == -1)
        *((_DWORD *)a1 + 20) = 0;
      else
        *((_DWORD *)a1 + 20) = a3;
      return result;
    case 25:
      if ((unint64_t)(a3 - 42) <= 0xFFFFFFFFFFFFFFD4)
        goto LABEL_3;
LABEL_36:
      result = 0;
      *((_DWORD *)a1 + 93) = a3;
      return result;
    case 26:
      if ((unint64_t)(a3 - 4) <= 0xFFFFFFFFFFFFFFFALL)
        goto LABEL_3;
LABEL_38:
      result = 0;
      *((_DWORD *)a1 + 22) = a3;
      return result;
    case 27:
      if ((unint64_t)(a3 - 16) <= 0xFFFFFFFFFFFFFFEELL)
        goto LABEL_3;
LABEL_40:
      result = 0;
      *((_DWORD *)a1 + 70) = a3;
      return result;
    case 29:
      if ((unint64_t)(a3 - 12) <= 0xFFFFFFFFFFFFFFF2)
        goto LABEL_3;
LABEL_42:
      result = 0;
      if (a3 == -1)
        *((_DWORD *)a1 + 59) = 0;
      else
        *((_DWORD *)a1 + 59) = a3;
      return result;
    case 31:
LABEL_6:
      if ((unint64_t)a3 >= 2)
        goto LABEL_49;
      result = 0;
      *((_BYTE *)a1 + 772) = 1;
      return result;
    case 32:
      if ((unint64_t)(a3 - 12) <= 0xFFFFFFFFFFFFFFF2)
      {
LABEL_3:
        v4 = *a1;
        v5 = 129;
LABEL_50:
        *(_DWORD *)(v4 + 2852) = v5;
        return 1;
      }
      else
      {
LABEL_45:
        result = 0;
        *((_DWORD *)a1 + 17) = a3;
        *(_DWORD *)(*a1 + 2872) = a3;
      }
      return result;
    case 34:
      if ((unint64_t)(a3 - 4) <= 0xFFFFFFFFFFFFFFFALL)
        goto LABEL_49;
LABEL_47:
      result = 0;
      *((_DWORD *)a1 + 105) = a3;
      return result;
    case 38:
      if ((unint64_t)a3 >= 2)
        goto LABEL_49;
      result = 0;
      *((_BYTE *)a1 + 424) = a3 != 0;
      return result;
    default:
LABEL_49:
      v4 = *a1;
      v5 = 128;
      goto LABEL_50;
  }
}

uint64_t JxlEncoderFrameSettingsSetFloatOption(float *a1, int a2, float a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  switch(a2)
  {
    case 5:
      if (a3 < 0.0)
        goto LABEL_4;
      v5 = 0;
      a1[52] = a3;
      break;
    case 20:
      if (a3 < -1.0 || a3 > 100.0)
        goto LABEL_26;
      v5 = 0;
      if (a3 >= -0.5)
        a1[95] = a3;
      else
        a1[95] = 95.0;
      break;
    case 21:
      if (a3 < -1.0 || a3 > 100.0)
        goto LABEL_26;
      v5 = 0;
      if (a3 >= -0.5)
        a1[96] = a3;
      else
        a1[96] = 80.0;
      break;
    case 28:
      if (a3 < -1.0 || a3 > 100.0)
      {
LABEL_26:
        v3 = *(_QWORD *)a1;
        v4 = 129;
        goto LABEL_3;
      }
      v5 = 0;
      if (a3 >= -0.5)
        a1[58] = a3 * 0.01;
      else
        a1[58] = 0.5;
      break;
    default:
      v3 = *(_QWORD *)a1;
      v4 = 128;
LABEL_3:
      *(_DWORD *)(v3 + 2852) = v4;
LABEL_4:
      v5 = 1;
      break;
  }
  return v5;
}

uint64_t JxlEncoderCreate(uint64_t *a1)
{
  void *(*v1)(int, size_t);
  uint64_t v2;
  void (*v3)(int, void *);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;

  v1 = sub_2367F8118;
  if (!a1)
  {
    v5 = 0;
LABEL_8:
    v3 = sub_2367F8128;
    goto LABEL_9;
  }
  v2 = a1[1];
  v3 = (void (*)(int, void *))a1[2];
  if ((v2 == 0) != (v3 == 0))
    return 0;
  v5 = *a1;
  if (v2)
    v1 = (void *(*)(int, size_t))a1[1];
  if (!v3)
    goto LABEL_8;
LABEL_9:
  v6 = v1(v5, 2880);
  v4 = (uint64_t)v6;
  if (v6)
  {
    bzero(v6, 0xB40uLL);
    *(_QWORD *)(v4 + 32) = v4;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 112) = 0;
    *(_QWORD *)(v4 + 104) = v4 + 112;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 154) = 0u;
    *(_QWORD *)(v4 + 196) = 0x3E800000001;
    *(_QWORD *)(v4 + 208) = 0;
    *(_QWORD *)(v4 + 216) = 0;
    *(_QWORD *)(v4 + 224) = 0;
    sub_2367F7A14(v4 + 304);
    *(_QWORD *)(v4 + 728) = &off_2507FF488;
    v9 = &off_2507FF550;
    v10 = xmmword_2368AF3F0;
    v11 = 0;
    sub_2367F42A0(v4 + 728, (uint64_t)&v9);
    sub_2367F7984(v4 + 760);
    *(_QWORD *)(v4 + 2000) = 0;
    *(_OWORD *)(v4 + 1984) = 0u;
    *(_DWORD *)(v4 + 2008) = 1065353216;
    *(_DWORD *)(v4 + 2044) = 0;
    *(_QWORD *)(v4 + 2048) = 0;
    *(_QWORD *)(v4 + 2016) = 0;
    *(_BYTE *)(v4 + 2040) = 0;
    *(_OWORD *)(v4 + 2024) = 0u;
    *(_QWORD *)(v4 + 2056) = 0xFFFFFFFF00000003;
    *(_QWORD *)(v4 + 2064) = 0;
    *(_DWORD *)(v4 + 2072) = 0;
    *(_BYTE *)(v4 + 2076) = 0;
    *(_DWORD *)(v4 + 2092) = -1;
    *(_WORD *)(v4 + 2096) = -1;
    *(_QWORD *)(v4 + 2080) = -1;
    *(_BYTE *)(v4 + 2088) = -1;
    *(_BYTE *)(v4 + 2098) = 0;
    *(_QWORD *)(v4 + 2117) = -1;
    *(_QWORD *)(v4 + 2112) = -1;
    *(_QWORD *)(v4 + 2104) = -1;
    *(_BYTE *)(v4 + 2192) = 0;
    *(_DWORD *)(v4 + 2193) = 16843009;
    *(_BYTE *)(v4 + 2197) = 1;
    *(_DWORD *)(v4 + 2200) = 0;
    *(_OWORD *)(v4 + 2208) = xmmword_2368AF5C0;
    *(_DWORD *)(v4 + 2224) = 1056964608;
    *(_QWORD *)(v4 + 2244) = 0;
    *(_DWORD *)(v4 + 2252) = 0;
    *(_QWORD *)(v4 + 2228) = 0;
    *(_QWORD *)(v4 + 2236) = 0;
    v7 = operator new(0x20uLL);
    *(_QWORD *)(v4 + 2232) = v7;
    *(_QWORD *)(v4 + 2248) = v7 + 2;
    *v7 = xmmword_2369238DC;
    v7[1] = unk_2369238EC;
    *(_QWORD *)(v4 + 2240) = v7 + 2;
    *(_DWORD *)(v4 + 2256) = 1119879168;
    *(_QWORD *)(v4 + 2264) = 32;
    *(_QWORD *)(v4 + 2272) = 0xFFFFFFFFLL;
    *(_QWORD *)(v4 + 2280) = 0x33F8147AELL;
    *(_BYTE *)(v4 + 2288) = 0;
    *(_OWORD *)(v4 + 2292) = xmmword_2368AF5B0;
    *(_DWORD *)(v4 + 2308) = 2;
    *(_QWORD *)(v4 + 2312) = 0;
    *(_QWORD *)(v4 + 2328) = 0;
    *(_QWORD *)(v4 + 2320) = 0;
    *(_QWORD *)(v4 + 2336) = -1;
    *(_DWORD *)(v4 + 2344) = 256;
    *(_BYTE *)(v4 + 2348) = 0;
    *(_BYTE *)(v4 + 2352) = 0;
    *(_QWORD *)(v4 + 2360) = -1;
    *(_QWORD *)(v4 + 2368) = 0x42BE0000FFFFFFFFLL;
    *(_QWORD *)(v4 + 2376) = 0x40042A00000;
    *(_BYTE *)(v4 + 2384) = 0;
    *(_QWORD *)(v4 + 2388) = -1;
    *(_BYTE *)(v4 + 2396) = 0;
    *(_QWORD *)(v4 + 2400) = 0x3F800000BF800000;
    *(_QWORD *)(v4 + 2408) = -1;
    *(_BYTE *)(v4 + 2416) = 1;
    *(_OWORD *)(v4 + 2484) = 0u;
    *(_OWORD *)(v4 + 2456) = 0u;
    *(_OWORD *)(v4 + 2472) = 0u;
    *(_OWORD *)(v4 + 2424) = 0u;
    *(_OWORD *)(v4 + 2440) = 0u;
    *(_OWORD *)(v4 + 2504) = 0u;
    *(_OWORD *)(v4 + 2520) = 0u;
    *(_OWORD *)(v4 + 2536) = 0u;
    *(_OWORD *)(v4 + 2552) = 0u;
    *(_OWORD *)(v4 + 2568) = 0u;
    *(_OWORD *)(v4 + 2584) = 0u;
    *(_OWORD *)(v4 + 2600) = 0u;
    *(_OWORD *)(v4 + 2616) = 0u;
    *(_QWORD *)(v4 + 2632) = 0;
    *(_DWORD *)(v4 + 2852) = 0;
    *(_BYTE *)(v4 + 2870) = 0;
    *(_DWORD *)(v4 + 2872) = -1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 8) = v1;
    *(_QWORD *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 264) = xmmword_2507FD7E0;
    *(_OWORD *)(v4 + 280) = *(_OWORD *)&off_2507FD7F0;
    *(_OWORD *)(v4 + 248) = off_2507FD7D0;
    *(_OWORD *)(v4 + 232) = xmmword_2507FD7C0;
    *(_BYTE *)(v4 + 296) = 1;
    JxlEncoderReset(v4);
  }
  return v4;
}

void sub_236862ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  uint64_t v11;
  void **v12;
  void *v14;
  void *v15;
  uint64_t v16;

  *(_QWORD *)(v11 + 304) = &off_2507FFA40;
  a11 = (void **)(v11 + 632);
  sub_2367E8DB8(&a11);
  *(_QWORD *)(v11 + 352) = &off_2507FFA18;
  v14 = *(void **)(v11 + 384);
  if (v14)
  {
    *(_QWORD *)(v11 + 392) = v14;
    operator delete(v14);
  }
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 216) = v15;
    operator delete(v15);
  }
  v16 = *(_QWORD *)(v11 + 176);
  *(_QWORD *)(v11 + 176) = 0;
  if (v16)
    MEMORY[0x23B7F8F48](v16, 0x80C402FCC0CB6);
  sub_23683DB18(*(_QWORD **)(v11 + 112));
  sub_2368638C4(&a10);
  sub_236863934(&a10);
  sub_236863890((uint64_t *)(v11 + 24), 0);
  _Unwind_Resume(a1);
}

double JxlEncoderReset(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *j;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double result;
  uint64_t (**v49)();
  _BYTE v50[72];
  void *__p[2];
  _BYTE v52[64];
  __int128 v53;
  _BYTE v54[24];
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[48];
  _QWORD v62[3];
  _BYTE v63[64];
  _OWORD v64[3];
  _BYTE v65[32];
  __int128 v66;
  _OWORD v67[2];
  _OWORD v68[71];
  uint64_t (**v69)();
  __int128 v70;
  uint64_t v71;

  sub_236863890((uint64_t *)(a1 + 24), 0);
  v3 = *(_QWORD *)(a1 + 80);
  for (i = *(_QWORD *)(a1 + 88); i != v3; sub_236860F38(i))
    i -= 48;
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_QWORD **)(a1 + 40);
  for (j = *(_QWORD **)(a1 + 48); j != v5; sub_23686246C(j))
    j -= 2;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 2864) = 0;
  *(_QWORD *)(a1 + 2856) = 0;
  bzero(&v49, 0x690uLL);
  sub_2367F7A14((uint64_t)&v49);
  *((_QWORD *)&v64[0] + 1) = &off_2507FF488;
  v69 = &off_2507FF550;
  v70 = xmmword_2368AF3F0;
  v71 = 0;
  sub_2367F42A0((uint64_t)v64 + 8, (uint64_t)&v69);
  sub_2367F7984((uint64_t)&v64[2] + 8);
  *(_BYTE *)(a1 + 312) = v50[0];
  *(_QWORD *)(a1 + 328) = *(_QWORD *)&v50[16];
  *(_DWORD *)(a1 + 336) = *(_DWORD *)&v50[24];
  *(_WORD *)(a1 + 344) = *(_WORD *)&v50[32];
  *(_WORD *)(a1 + 360) = *(_WORD *)&v50[48];
  *(_QWORD *)(a1 + 368) = *(_QWORD *)&v50[56];
  *(_QWORD *)(a1 + 373) = *(_QWORD *)&v50[61];
  v6 = *(void **)(a1 + 384);
  if (v6)
  {
    *(_QWORD *)(a1 + 392) = v6;
    operator delete(v6);
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)v52;
  __p[1] = 0;
  *(_QWORD *)v52 = 0;
  __p[0] = 0;
  *(_DWORD *)(a1 + 456) = *(_DWORD *)&v52[56];
  *(_OWORD *)(a1 + 408) = *(_OWORD *)&v52[8];
  *(_OWORD *)(a1 + 424) = *(_OWORD *)&v52[24];
  *(_OWORD *)(a1 + 440) = *(_OWORD *)&v52[40];
  v7 = *((_QWORD *)&v55 + 1);
  *(_QWORD *)(a1 + 472) = *((_QWORD *)&v53 + 1);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)&v54[8];
  *(_QWORD *)(a1 + 512) = v7;
  v8 = v58;
  *(_QWORD *)(a1 + 528) = v57;
  *(_QWORD *)(a1 + 544) = v8;
  v9 = v59;
  *(_DWORD *)(a1 + 555) = *(_DWORD *)((char *)&v59 + 3);
  *(_DWORD *)(a1 + 552) = v9;
  v10 = v60;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)v61;
  *(_OWORD *)(a1 + 568) = v10;
  v11 = *(_OWORD *)&v61[16];
  *(_DWORD *)(a1 + 616) = *(_DWORD *)&v61[32];
  *(_OWORD *)(a1 + 600) = v11;
  *(_DWORD *)(a1 + 624) = *(_DWORD *)&v61[40];
  sub_2367E8E44((void **)(a1 + 632));
  *(_QWORD *)(a1 + 632) = v62[0];
  *(_OWORD *)(a1 + 640) = *(_OWORD *)&v62[1];
  memset(v62, 0, sizeof(v62));
  *(_OWORD *)(a1 + 664) = *(_OWORD *)&v63[8];
  v12 = *(_QWORD *)&v63[40];
  *(_QWORD *)(a1 + 680) = *(_QWORD *)&v63[24];
  *(_QWORD *)(a1 + 696) = v12;
  *(_QWORD *)(a1 + 701) = *(_QWORD *)&v63[45];
  *(_BYTE *)(a1 + 720) = v64[0];
  *(_QWORD *)(a1 + 712) = *(_QWORD *)&v63[56];
  *(_OWORD *)(a1 + 736) = v64[1];
  *(_QWORD *)(a1 + 752) = *(_QWORD *)&v64[2];
  *(_WORD *)(a1 + 768) = *(_WORD *)v65;
  v13 = v67[1];
  *(_OWORD *)(a1 + 816) = v67[0];
  *(_OWORD *)(a1 + 832) = v13;
  *(_DWORD *)(a1 + 848) = v68[0];
  v14 = v66;
  *(_OWORD *)(a1 + 784) = *(_OWORD *)&v65[16];
  *(_OWORD *)(a1 + 800) = v14;
  memcpy((void *)(a1 + 856), (char *)v68 + 8, 0x464uLL);
  v49 = &off_2507FFA40;
  v69 = (uint64_t (**)())v62;
  sub_2367E8DB8((void ***)&v69);
  *(_QWORD *)&v50[40] = &off_2507FFA18;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v15 = (_QWORD *)(a1 + 2232);
  bzero(&v49, 0x280uLL);
  LODWORD(v49) = 1065353216;
  memset(v50, 0, 25);
  *(_QWORD *)&v50[40] = 0xFFFFFFFF00000003;
  HIDWORD(__p[0]) = -1;
  LOWORD(__p[1]) = -1;
  *(_QWORD *)&v50[64] = -1;
  LOBYTE(__p[0]) = -1;
  *(_QWORD *)v52 = -1;
  *(_QWORD *)&v52[8] = -1;
  *(_QWORD *)&v52[13] = -1;
  *(_DWORD *)&v54[9] = 16843009;
  v54[13] = 1;
  v55 = xmmword_2368AF5C0;
  LODWORD(v56) = 1056964608;
  v16 = operator new(0x20uLL);
  *((_QWORD *)&v57 + 1) = v16 + 2;
  v58 = v16 + 2;
  *v16 = xmmword_2369238DC;
  v16[1] = unk_2369238EC;
  *(_QWORD *)&v57 = v16;
  LODWORD(v59) = 1119879168;
  *((_QWORD *)&v59 + 1) = 32;
  *(_QWORD *)&v60 = 0xFFFFFFFFLL;
  *((_QWORD *)&v60 + 1) = 0x33F8147AELL;
  v61[0] = 0;
  *(_OWORD *)&v61[4] = xmmword_2368AF5B0;
  *(_DWORD *)&v61[20] = 2;
  memset(&v61[24], 0, 24);
  v62[0] = -1;
  LODWORD(v62[1]) = 256;
  BYTE4(v62[1]) = 0;
  LOBYTE(v62[2]) = 0;
  *(_QWORD *)v63 = -1;
  *(_QWORD *)&v63[8] = 0x42BE0000FFFFFFFFLL;
  *(_QWORD *)&v63[16] = 0x40042A00000;
  v63[24] = 0;
  *(_QWORD *)&v63[28] = -1;
  v63[36] = 0;
  *(_QWORD *)&v63[40] = 0x3F800000BF800000;
  *(_QWORD *)&v63[48] = -1;
  v17 = 0uLL;
  v63[56] = 1;
  memset(v65, 0, 28);
  memset(v64, 0, sizeof(v64));
  v66 = 0u;
  memset(v67, 0, sizeof(v67));
  memset(v68, 0, 88);
  *(_DWORD *)(a1 + 2008) = 1065353216;
  v18 = *(void **)(a1 + 2016);
  if (v18)
  {
    *(_QWORD *)(a1 + 2024) = v18;
    operator delete(v18);
    *(_QWORD *)(a1 + 2016) = 0;
    *(_QWORD *)(a1 + 2024) = 0;
    *(_QWORD *)(a1 + 2032) = 0;
    v17 = *(_OWORD *)v50;
    v19 = *(_QWORD *)&v50[16];
  }
  else
  {
    v19 = 0;
  }
  *(_OWORD *)(a1 + 2016) = v17;
  *(_QWORD *)(a1 + 2032) = v19;
  memset(v50, 0, 24);
  *(_DWORD *)(a1 + 2200) = *(_DWORD *)&v54[16];
  v20 = *(_OWORD *)v54;
  *(_OWORD *)(a1 + 2168) = v53;
  *(_OWORD *)(a1 + 2184) = v20;
  v21 = *(_OWORD *)&v52[16];
  *(_OWORD *)(a1 + 2104) = *(_OWORD *)v52;
  *(_OWORD *)(a1 + 2120) = v21;
  v22 = *(_OWORD *)&v52[48];
  *(_OWORD *)(a1 + 2136) = *(_OWORD *)&v52[32];
  *(_OWORD *)(a1 + 2152) = v22;
  v23 = *(_OWORD *)&v50[40];
  *(_OWORD *)(a1 + 2040) = *(_OWORD *)&v50[24];
  *(_OWORD *)(a1 + 2056) = v23;
  v24 = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 2072) = *(_OWORD *)&v50[56];
  *(_OWORD *)(a1 + 2088) = v24;
  *(_OWORD *)(a1 + 2208) = v55;
  *(_QWORD *)(a1 + 2224) = v56;
  v25 = *(void **)(a1 + 2232);
  if (v25)
  {
    *(_QWORD *)(a1 + 2240) = v25;
    operator delete(v25);
    *v15 = 0;
    *(_QWORD *)(a1 + 2240) = 0;
    *(_QWORD *)(a1 + 2248) = 0;
  }
  *(_OWORD *)v15 = v57;
  v26 = v60;
  *(_OWORD *)(a1 + 2256) = v59;
  *(_QWORD *)(a1 + 2248) = v58;
  v58 = 0;
  v57 = 0uLL;
  *(_OWORD *)(a1 + 2272) = v26;
  *(_QWORD *)(a1 + 2288) = *(_QWORD *)v61;
  *(_OWORD *)(a1 + 2296) = *(_OWORD *)&v61[8];
  v27 = *(void **)(a1 + 2312);
  if (v27)
  {
    *(_QWORD *)(a1 + 2320) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 2312) = 0;
    *(_QWORD *)(a1 + 2320) = 0;
    *(_QWORD *)(a1 + 2328) = 0;
  }
  *(_OWORD *)(a1 + 2312) = *(_OWORD *)&v61[24];
  *(_QWORD *)(a1 + 2328) = *(_QWORD *)&v61[40];
  memset(&v61[24], 0, 24);
  *(_QWORD *)(a1 + 2336) = v62[0];
  *(_QWORD *)(a1 + 2341) = *(_QWORD *)((char *)v62 + 5);
  *(_BYTE *)(a1 + 2352) = v62[2];
  v28 = *(_OWORD *)&v63[32];
  v29 = *(_OWORD *)v63;
  *(_OWORD *)(a1 + 2376) = *(_OWORD *)&v63[16];
  *(_OWORD *)(a1 + 2392) = v28;
  *(_OWORD *)(a1 + 2360) = v29;
  *(_OWORD *)(a1 + 2401) = *(_OWORD *)&v63[41];
  v30 = (_QWORD *)(a1 + 2424);
  v31 = *(void **)(a1 + 2424);
  if (v31)
  {
    *(_QWORD *)(a1 + 2432) = v31;
    operator delete(v31);
    *v30 = 0;
    *(_QWORD *)(a1 + 2432) = 0;
    *(_QWORD *)(a1 + 2440) = 0;
  }
  *(_OWORD *)v30 = v64[0];
  *(_QWORD *)(a1 + 2440) = *(_QWORD *)&v64[1];
  memset(v64, 0, 24);
  v32 = *(void **)(a1 + 2448);
  if (v32)
  {
    *(_QWORD *)(a1 + 2456) = v32;
    operator delete(v32);
    *(_QWORD *)(a1 + 2448) = 0;
    *(_QWORD *)(a1 + 2456) = 0;
    *(_QWORD *)(a1 + 2464) = 0;
  }
  *(_OWORD *)(a1 + 2448) = *(_OWORD *)((char *)&v64[1] + 8);
  *(_QWORD *)(a1 + 2464) = *((_QWORD *)&v64[2] + 1);
  memset((char *)&v64[1] + 8, 0, 24);
  v33 = (_QWORD *)(a1 + 2472);
  v34 = *(void **)(a1 + 2472);
  if (v34)
  {
    *(_QWORD *)(a1 + 2480) = v34;
    operator delete(v34);
    *v33 = 0;
    *(_QWORD *)(a1 + 2480) = 0;
    *(_QWORD *)(a1 + 2488) = 0;
  }
  *(_OWORD *)v33 = *(_OWORD *)v65;
  *(_QWORD *)(a1 + 2488) = *(_QWORD *)&v65[16];
  memset(v65, 0, 24);
  *(_DWORD *)(a1 + 2496) = *(_DWORD *)&v65[24];
  sub_23683D8E0((uint64_t *)(a1 + 2504));
  *(_OWORD *)(a1 + 2504) = v66;
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)&v67[0];
  *(_QWORD *)&v67[0] = 0;
  v66 = 0uLL;
  v35 = *(void **)(a1 + 2528);
  if (v35)
  {
    *(_QWORD *)(a1 + 2536) = v35;
    operator delete(v35);
    *(_QWORD *)(a1 + 2528) = 0;
    *(_QWORD *)(a1 + 2536) = 0;
    *(_QWORD *)(a1 + 2544) = 0;
  }
  *(_OWORD *)(a1 + 2528) = *(_OWORD *)((char *)v67 + 8);
  *(_QWORD *)(a1 + 2544) = *((_QWORD *)&v67[1] + 1);
  memset((char *)v67 + 8, 0, 24);
  v36 = (_QWORD *)(a1 + 2552);
  v37 = *(void **)(a1 + 2552);
  if (v37)
  {
    *(_QWORD *)(a1 + 2560) = v37;
    operator delete(v37);
    *v36 = 0;
    *(_QWORD *)(a1 + 2560) = 0;
    *(_QWORD *)(a1 + 2568) = 0;
  }
  *(_OWORD *)v36 = v68[0];
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)&v68[1];
  memset(v68, 0, 24);
  v38 = *(void **)(a1 + 2576);
  if (v38)
  {
    *(_QWORD *)(a1 + 2584) = v38;
    operator delete(v38);
    *(_QWORD *)(a1 + 2576) = 0;
    *(_QWORD *)(a1 + 2584) = 0;
    *(_QWORD *)(a1 + 2592) = 0;
  }
  *(_OWORD *)(a1 + 2576) = *(_OWORD *)((char *)&v68[1] + 8);
  *(_QWORD *)(a1 + 2592) = *((_QWORD *)&v68[2] + 1);
  v68[2] = 0uLL;
  *((_QWORD *)&v68[1] + 1) = 0;
  v39 = (_QWORD *)(a1 + 2600);
  v40 = *(void **)(a1 + 2600);
  if (v40)
  {
    *(_QWORD *)(a1 + 2608) = v40;
    operator delete(v40);
    *v39 = 0;
    *(_QWORD *)(a1 + 2608) = 0;
    *(_QWORD *)(a1 + 2616) = 0;
  }
  *(_OWORD *)v39 = v68[3];
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)&v68[4];
  memset(&v68[3], 0, 24);
  *(_QWORD *)(a1 + 2640) = *((_QWORD *)&v68[5] + 1);
  *(_OWORD *)(a1 + 2624) = *(_OWORD *)((char *)&v68[4] + 8);
  sub_236816F38((uint64_t)&v49);
  *(_WORD *)(a1 + 297) = 0;
  *(_DWORD *)(a1 + 2865) = 0;
  *(_BYTE *)(a1 + 2869) = 0;
  *(_DWORD *)(a1 + 300) = -1;
  memset(v50, 0, sizeof(v50));
  v49 = (uint64_t (**)())v50;
  v41 = a1 + 112;
  sub_23683DB18(*(_QWORD **)(a1 + 112));
  v42 = *(_QWORD *)v50;
  *(_QWORD *)(a1 + 104) = v49;
  *(_QWORD *)(a1 + 112) = v42;
  v43 = *(_QWORD *)&v50[8];
  *(_QWORD *)(a1 + 120) = *(_QWORD *)&v50[8];
  if (v43)
  {
    *(_QWORD *)(v42 + 16) = v41;
    v49 = (uint64_t (**)())v50;
    *(_OWORD *)v50 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v41;
  }
  v44 = *(_OWORD *)&v50[32];
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&v50[16];
  *(_OWORD *)(a1 + 144) = v44;
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v50[42];
  v45 = *(_QWORD *)&v50[64];
  *(_QWORD *)&v50[64] = 0;
  v46 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v45;
  if (v46)
  {
    MEMORY[0x23B7F8F48](v46, 0x80C402FCC0CB6);
    v47 = *(_QWORD *)&v50[64];
    *(_QWORD *)&v50[64] = 0;
    if (v47)
      MEMORY[0x23B7F8F48](v47, 0x80C402FCC0CB6);
  }
  sub_23683DB18(*(_QWORD **)v50);
  *(_OWORD *)(a1 + 2648) = xmmword_2368AFA10;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_QWORD *)(a1 + 2696) = 0x300000001;
  *(_QWORD *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 2704) = 0;
  *(_QWORD *)(a1 + 2720) = 0;
  *(_QWORD *)(a1 + 2712) = 0;
  *(_QWORD *)&result = 0x10000000ALL;
  *(_OWORD *)(a1 + 2728) = xmmword_2368AFA20;
  return result;
}

void sub_236863844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;

  *(_QWORD *)(v52 - 128) = &a52;
  sub_2367E8DB8((void ***)(v52 - 128));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_236863890(uint64_t *result, uint64_t a2)
{
  uint64_t v3;

  v3 = *result;
  *result = a2;
  if (v3)
    return (uint64_t *)(*(uint64_t (**)(_QWORD))(result[1] + 16))(*(_QWORD *)result[1]);
  return result;
}

void sub_2368638C4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_236860F38(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236863934(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_23686246C(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *JxlEncoderDestroy(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *);
  void **v8;

  if (result)
  {
    v1 = result;
    v2 = *result;
    v7 = (uint64_t (*)(uint64_t, _QWORD *))result[2];
    sub_236816F38((uint64_t)(result + 251));
    v3 = (void *)v1[248];
    if (v3)
    {
      v1[249] = v3;
      operator delete(v3);
    }
    v1[38] = &off_2507FFA40;
    v8 = (void **)(v1 + 79);
    sub_2367E8DB8(&v8);
    v1[44] = &off_2507FFA18;
    v4 = (void *)v1[48];
    if (v4)
    {
      v1[49] = v4;
      operator delete(v4);
    }
    v5 = (void *)v1[26];
    if (v5)
    {
      v1[27] = v5;
      operator delete(v5);
    }
    v6 = v1[22];
    v1[22] = 0;
    if (v6)
      MEMORY[0x23B7F8F48](v6, 0x80C402FCC0CB6);
    sub_23683DB18((_QWORD *)v1[14]);
    v8 = (void **)(v1 + 10);
    sub_2368638C4(&v8);
    v8 = (void **)(v1 + 5);
    sub_236863934(&v8);
    sub_236863890(v1 + 3, 0);
    return (_QWORD *)v7(v2, v1);
  }
  return result;
}

uint64_t JxlEncoderGetError(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2852);
}

uint64_t JxlEncoderUseContainer(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 2864))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 297) = a2 != 0;
  }
  return result;
}

uint64_t JxlEncoderStoreJPEGMetadata(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 2864))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 299) = a2 != 0;
  }
  return result;
}

uint64_t JxlEncoderSetCodestreamLevel(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;

  if ((a2 + 1) > 0xB || ((1 << (a2 + 1)) & 0x841) == 0)
  {
    v4 = 128;
    goto LABEL_9;
  }
  v3 = *(unsigned __int8 *)(a1 + 2864);
  if (*(_BYTE *)(a1 + 2864))
  {
    v4 = 129;
LABEL_9:
    *(_DWORD *)(a1 + 2852) = v4;
    return 1;
  }
  *(_DWORD *)(a1 + 300) = a2;
  return v3;
}

uint64_t JxlEncoderGetRequiredCodestreamLevel(uint64_t a1)
{
  return sub_236860920(a1, 0);
}

__n128 JxlEncoderSetCms(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 280) = v4;
  *(_OWORD *)(a1 + 248) = v3;
  *(__n128 *)(a1 + 232) = result;
  *(_BYTE *)(a1 + 296) = 1;
  return result;
}

uint64_t JxlEncoderSetParallelRunner(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  int v5;
  _QWORD *v9;
  _QWORD *v10;

  v4 = (uint64_t *)(a1 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 129;
LABEL_3:
    *(_DWORD *)(a1 + 2852) = v5;
    return 1;
  }
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)a1, 16);
  if (v9)
  {
    if (a2)
      v10 = a3;
    else
      v10 = v9;
    *v9 = a2;
    v9[1] = v10;
  }
  sub_236863890(v4, (uint64_t)v9);
  *(_QWORD *)(a1 + 32) = a1;
  if (!*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_3;
  }
  return 0;
}

uint64_t JxlEncoderAddJPEGFrame()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _BOOL4 v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  char *v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unsigned int v144;
  void **v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  _QWORD *v153;
  _DWORD *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  __int16 *v159;
  uint64_t i;
  __int16 *v161;
  int32x4_t v162;
  uint64_t j;
  uint64_t v164;
  int32x4_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t k;
  int v170;
  int v171;
  int v172;
  BOOL v173;
  int v174;
  uint64_t v175;
  __int16 *v176;
  char v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  int v182;
  int v183;
  __int16 *v184;
  int v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  _QWORD *v203;
  unint64_t v204;
  unsigned int v205;
  unint64_t v206;
  _QWORD *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  _QWORD *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int *v234;
  int v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unsigned __int8 *v240;
  unsigned int v241;
  int v242;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  void **v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unint64_t v253;
  char *v254;
  void **v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  char *v267;
  _QWORD *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  __int16 v272;
  char *v273;
  void *v274;
  unint64_t v275;
  BOOL v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  int v280;
  _BYTE *v281;
  unint64_t v282;
  _BYTE *v283;
  uint64_t v284;
  unint64_t v285;
  size_t v286;
  char *v287;
  char *v288;
  _BYTE *v289;
  _BYTE *v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  int32x2_t *v295;
  int32x2_t v296;
  int32x2_t v297;
  int32x2_t v298;
  uint64_t v299;
  int32x2_t v300;
  int v301;
  int v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  char *v307;
  char *v308;
  int v309;
  int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  int v315;
  unint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int *v322;
  uint64_t v323;
  int v324;
  int v325;
  uint64_t v326;
  int v327;
  int v328;
  _WORD *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  unsigned int v335;
  int v336;
  __int16 v337;
  __int16 v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  _BOOL4 v347;
  int v348;
  unsigned int v349;
  int v350;
  int v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  __int16 v358;
  __int16 v359;
  BOOL v360;
  int v361;
  int v362;
  int v363;
  unsigned int v364;
  unsigned int v365;
  int v366;
  int v367;
  uint64_t v369;
  unsigned int v370;
  int v371;
  unint64_t v372;
  char *v373;
  _DWORD *v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unsigned int *v381;
  unsigned int v382;
  unint64_t v383;
  unint64_t *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t *v392;
  char *v393;
  char *v394;
  unint64_t v395;
  _BOOL4 v398;
  int v401;
  char v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char v408;
  char v409;
  char *v410;
  int v411;
  _DWORD *v412;
  _DWORD *v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  BOOL v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _DWORD *v428;
  int v429;
  int v430;
  _DWORD *v431;
  uint64_t v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 **v438;
  unsigned __int8 *v439;
  unsigned __int8 *v440;
  int64_t v441;
  unint64_t v442;
  void *v443;
  BOOL v444;
  BOOL v445;
  void *v447;
  uint64_t v448;
  unint64_t v449;
  int *v450;
  int v451;
  unint64_t v452;
  BOOL v453;
  uint64_t v454;
  unint64_t v455;
  int *v456;
  _QWORD *v457;
  int v458;
  unint64_t v459;
  BOOL v460;
  _DWORD *v461;
  int v462;
  float v464;
  uint64_t n;
  uint64_t ii;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  int *v470;
  int v471;
  unint64_t v472;
  BOOL v473;
  void *v474;
  unint64_t v475;
  int *v476;
  uint64_t v477;
  int v478;
  unint64_t v479;
  BOOL v480;
  void *v481;
  int *v482;
  uint64_t v483;
  int v484;
  unint64_t v485;
  BOOL v486;
  uint64_t v487;
  unint64_t v488;
  int *v489;
  uint64_t v490;
  int v491;
  unint64_t v492;
  BOOL v493;
  int *v494;
  int v495;
  unint64_t v496;
  BOOL v497;
  unint64_t v498;
  unsigned int v499;
  uint64_t v500;
  unsigned __int8 *v501;
  unsigned __int8 *v502;
  int v503;
  int v505;
  unint64_t v506;
  int v507;
  int v508;
  unsigned __int8 *v509;
  int v510;
  int v511;
  unsigned int v512;
  int v513;
  unsigned __int8 *v514;
  unsigned __int8 *v515;
  int v516;
  unsigned int v517;
  BOOL v518;
  unsigned __int8 *v519;
  unsigned int v520;
  unint64_t v524;
  uint64_t v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  __int128 v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  int *v533;
  int v534;
  unint64_t v535;
  BOOL v536;
  int v537;
  uint64_t v538;
  void *v539;
  uint64_t v540;
  unint64_t v541;
  int *v542;
  int v543;
  unint64_t v544;
  BOOL v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  int v552;
  int v553;
  int v554;
  uint64_t v555;
  int v556;
  char *v557;
  unsigned int *v558;
  int m;
  int v560;
  int v561;
  unsigned int v562;
  unsigned int v563;
  int v564;
  int v565;
  _BOOL4 v566;
  char v567;
  int v568;
  _QWORD *v569;
  _DWORD *v570;
  int v571;
  uint64_t v572;
  int v573;
  BOOL v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  _BOOL4 v578;
  int v579;
  unint64_t v580;
  unint64_t v581;
  int v582;
  char *v583;
  int v584;
  int32x2_t v585;
  char *v586;
  uint64_t v587;
  unint64_t v588;
  _QWORD *v589;
  int v590;
  __int16 *v591;
  unint64_t v592;
  char *v593;
  int32x2_t v594;
  int v595;
  int64x2_t *v596;
  _QWORD *v597;
  int v598;
  char v599;
  unint64_t v600;
  BOOL v601;
  int v602;
  unsigned int v603;
  char *v604;
  int v605;
  int v606;
  _QWORD *v607;
  _QWORD *v608;
  _QWORD *v609;
  unsigned __int8 *v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  unint64_t v614;
  int v615;
  int v616;
  uint64_t v617;
  _BYTE v618[296];
  __int128 __dst;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  _BYTE v625[28];
  uint64_t v626;
  _BYTE v627[72];
  int v628;
  int v629;
  uint64_t (**v630)();
  uint64_t v631;
  uint64_t v632;
  __int128 v633;
  unint64_t v634;
  void *v635[3];
  void *v636[3];
  unint64_t v637;
  _OWORD __src[75];
  void *v639[2];
  __int128 v640;
  __int128 v641;
  __int128 v642;
  _BYTE v643[304];
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  void *v653[3];
  _BYTE v654[20];
  __int128 v655;
  __int128 v656;
  __int128 v657;
  uint64_t v658;

  v0 = MEMORY[0x24BDAC7A8]();
  v658 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)v0 + 2865))
  {
    *(_DWORD *)(*(_QWORD *)v0 + 2852) = 129;
    return 1;
  }
  v4 = v2;
  v5 = v1;
  v6 = v0;
  v623 = 0u;
  v624 = 0u;
  v621 = 0u;
  v622 = 0u;
  __dst = 0u;
  v620 = 0u;
  sub_2367F7A14((uint64_t)v625);
  v630 = &off_2507FF488;
  *(_OWORD *)((char *)__src + 8) = xmmword_2368AF3F0;
  *(_QWORD *)&__src[0] = &off_2507FF550;
  *((_QWORD *)&__src[1] + 1) = 0;
  sub_2367F42A0((uint64_t)&v630, (uint64_t)__src);
  sub_2367F7984((uint64_t)&v631);
  sub_2367D050C((uint64_t)&v632, (uint64_t)v625);
  v634 = 0;
  v633 = 0u;
  sub_236868E08((uint64_t *)&v633);
  v7 = *((_QWORD *)&v633 + 1);
  if (*((_QWORD *)&v633 + 1) >= v634)
  {
    v8 = sub_236868E78((uint64_t *)&v633, (uint64_t)v625);
  }
  else
  {
    sub_2367D050C(*((uint64_t *)&v633 + 1), (uint64_t)v625);
    v8 = v7 + 448;
  }
  *((_QWORD *)&v633 + 1) = v8;
  if (v4 < 2 || *v5 != 255 || v5[1] != 216)
    goto LABEL_670;
  v9 = v633;
  while (v8 != v9)
  {
    v8 -= 448;
    sub_236868724(v8);
  }
  *((_QWORD *)&v633 + 1) = v9;
  sub_236868E08((uint64_t *)&v633);
  v10 = *((_QWORD *)&v633 + 1);
  if (*((_QWORD *)&v633 + 1) >= v634)
  {
    v11 = sub_236868E78((uint64_t *)&v633, (uint64_t)v625);
  }
  else
  {
    sub_2367D050C(*((uint64_t *)&v633 + 1), (uint64_t)v625);
    v11 = v10 + 448;
  }
  *((_QWORD *)&v633 + 1) = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_2507FFD98;
  *(_QWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 280) = 0;
  *(_QWORD *)(v12 + 288) = 0;
  *(_QWORD *)(v12 + 272) = 0;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_BYTE *)(v12 + 264) = 0;
  v13 = *((_QWORD *)&v633 + 1) - v633;
  if (*((_QWORD *)&v633 + 1) != (_QWORD)v633)
  {
    v14 = 0x6DB6DB6DB6DB6DB7 * (v13 >> 6);
    v15 = (int *)(v633 + 48);
    v13 = -1;
    do
    {
      v16 = *v15;
      v17 = v13 + 2;
      ++v13;
      v15 += 112;
      if (v16)
        v18 = 1;
      else
        v18 = v17 >= v14;
    }
    while (!v18);
  }
  v19 = 448 * v13;
  v20 = *(_QWORD *)(v633 + 448 * v13);
  *(_QWORD *)(v633 + v19) = v12;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)&v633 + 1) - v633;
  if (*((_QWORD *)&v633 + 1) != (_QWORD)v633)
  {
    v22 = 0x6DB6DB6DB6DB6DB7 * (v21 >> 6);
    v23 = (int *)(v633 + 48);
    v21 = -1;
    do
    {
      v24 = *v23;
      v25 = v21 + 2;
      ++v21;
      v23 += 112;
      if (v24)
        v26 = 1;
      else
        v26 = v25 >= v22;
    }
    while (!v26);
  }
  if (*v5 != 255)
    goto LABEL_670;
  v27 = *(_QWORD **)(v633 + 448 * v21);
  v28 = v5[1];
  v637 = 2;
  if (v28 != 216)
    goto LABEL_670;
  sub_23686C1DC(v636);
  sub_23686C1DC(v635);
  v652 = 0u;
  v651 = 0u;
  v650 = 0u;
  v649 = 0u;
  v648 = 0u;
  v647 = 0u;
  v646 = 0u;
  v645 = 0u;
  v644 = 0u;
  memset(v643, 0, sizeof(v643));
  v642 = 0u;
  v641 = 0u;
  v640 = 0u;
  *(_OWORD *)v639 = 0u;
  v29 = v27[34];
  if (v27[35] != v29)
    v27[35] = v29;
  v598 = 0;
  v599 = 0;
  v601 = 0;
  v609 = v27 + 27;
  v610 = v5 - 3;
  v597 = v27 + 9;
  v608 = v27 + 3;
  v596 = (int64x2_t *)(v27 + 21);
  v607 = v27 + 29;
  v617 = (uint64_t)v27;
  while (2)
  {
    v30 = v637;
    if (v637 + 1 < v4)
    {
      v31 = 0;
      v32 = &v5[v637];
      while (1)
      {
        if (v32[v31] == 255)
        {
          v33 = v32[v31 + 1];
          if (v33 >= 0xC0 && ((0xBFFF0000D100FFE8 >> v33) & 1) == 0)
            break;
        }
        if (~v637 + v4 == ++v31)
        {
          v31 = ~v637 + v4;
          break;
        }
      }
      if (v31)
      {
        v35 = (_BYTE *)v27[25];
        v34 = v27[26];
        if ((unint64_t)v35 >= v34)
        {
          v37 = v27[24];
          v38 = &v35[-v37];
          v39 = (uint64_t)&v35[-v37 + 1];
          if (v39 < 0)
            sub_2367C3440();
          v40 = v34 - v37;
          if (2 * v40 > v39)
            v39 = 2 * v40;
          if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
            v41 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
            v42 = (char *)operator new(v41);
          else
            v42 = 0;
          v43 = &v38[(_QWORD)v42];
          v44 = &v38[(_QWORD)v42];
          *v44 = -1;
          v36 = v44 + 1;
          if (v35 == (_BYTE *)v37)
          {
            v27 = (_QWORD *)v617;
          }
          else
          {
            v45 = &v35[~v37];
            do
            {
              v46 = *--v35;
              (v45--)[(_QWORD)v42] = v46;
            }
            while (v35 != (_BYTE *)v37);
            v27 = (_QWORD *)v617;
            v35 = *(_BYTE **)(v617 + 192);
            v43 = v42;
          }
          v27[24] = v43;
          v27[25] = v36;
          v27[26] = &v42[v41];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v35 = -1;
          v36 = v35 + 1;
        }
        v27[25] = v36;
        v47 = v637;
        v48 = &v5[v637];
        v49 = (uint64_t)&v5[v637 + v31];
        v50 = v27;
        v51 = (_QWORD *)v27[28];
        v52 = v50[29];
        if ((unint64_t)v51 >= v52)
        {
          v55 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - *v609) >> 3);
          v56 = v55 + 1;
          if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_2367C3440();
          v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *v609) >> 3);
          if (2 * v57 > v56)
            v56 = 2 * v57;
          if (v57 >= 0x555555555555555)
            v58 = 0xAAAAAAAAAAAAAAALL;
          else
            v58 = v56;
          *(_QWORD *)&__src[2] = v607;
          if (v58)
            v58 = (unint64_t)sub_2367D1EBC(v58);
          else
            v59 = 0;
          v60 = (_QWORD *)(v58 + 24 * v55);
          *(_QWORD *)&__src[0] = v58;
          *((_QWORD *)&__src[0] + 1) = v60;
          *(_QWORD *)&__src[1] = v60;
          *((_QWORD *)&__src[1] + 1) = v58 + 24 * v59;
          *v60 = 0;
          v60[1] = 0;
          v60[2] = 0;
          sub_23683E704(v60, v48, v49, v31);
          *(_QWORD *)&__src[1] += 24;
          sub_2367D1F00(v609, __src);
          v54 = v617;
          v53 = *(_QWORD **)(v617 + 224);
          sub_2367D1F70((uint64_t)__src);
        }
        else
        {
          *v51 = 0;
          v51[1] = 0;
          v51[2] = 0;
          sub_23683E704(v51, v48, v49, v31);
          v53 = v51 + 3;
          v54 = v617;
          *(_QWORD *)(v617 + 224) = v53;
        }
        *(_QWORD *)(v54 + 224) = v53;
        v30 = v47 + v31;
      }
    }
    v61 = v30 + 2;
    if (v30 + 2 > v4 || v5[v30] != 255)
      goto LABEL_616;
    LODWORD(v62) = 0;
    v63 = v5[v30 + 1];
    v637 = v30 + 2;
    v616 = v63;
    switch(v63)
    {
      case 192:
      case 193:
      case 194:
        if (*(_DWORD *)(v617 + 8))
          goto LABEL_616;
        v72 = v30 + 10;
        if (v30 + 10 > v4)
          goto LABEL_616;
        LODWORD(v62) = 0;
        v73 = v5[v61];
        v74 = &v5[v30];
        v75 = v5[v30 + 3];
        v76 = v5[v30 + 4];
        v77 = *(unsigned __int16 *)&v5[v30 + 5];
        v78 = *(unsigned __int16 *)(v74 + 7);
        v637 = v72;
        if (v76 != 8)
          goto LABEL_617;
        v79 = __rev16(v77);
        if (!v79)
          goto LABEL_617;
        v80 = __rev16(v78);
        if (!v80)
          goto LABEL_617;
        v81 = v74[9];
        if ((v81 - 5) < 0xFFFFFFFC)
          goto LABEL_617;
        v580 = v61;
        if (v72 + 3 * v81 > v4)
          goto LABEL_616;
        *(_DWORD *)(v617 + 8) = v80;
        *(_DWORD *)(v617 + 12) = v79;
        v82 = *(_QWORD *)(v617 + 144);
        v83 = *(_QWORD *)(v617 + 152);
        v84 = 0xAAAAAAAAAAAAAAABLL * ((v83 - v82) >> 4);
        v85 = v81 - v84;
        v611 = v72;
        v577 = v75;
        if (v81 <= v84)
        {
          if (v81 < v84)
          {
            v101 = v82 + 48 * v81;
            while (v83 != v101)
            {
              v102 = *(void **)(v83 - 24);
              if (v102)
              {
                *(_QWORD *)(v83 - 16) = v102;
                operator delete(v102);
              }
              v83 -= 48;
            }
            *(_QWORD *)(v617 + 152) = v101;
          }
        }
        else
        {
          v86 = *(_QWORD *)(v617 + 160);
          if (0xAAAAAAAAAAAAAAABLL * ((v86 - v83) >> 4) >= v85)
          {
            v228 = v83 + 48 * v85;
            do
            {
              *(_QWORD *)v83 = 0x100000000;
              *(_DWORD *)(v83 + 8) = 1;
              *(_OWORD *)(v83 + 12) = 0uLL;
              *(_OWORD *)(v83 + 28) = 0uLL;
              *(_DWORD *)(v83 + 44) = 0;
              v83 += 48;
            }
            while (v83 != v228);
            *(_QWORD *)(v617 + 152) = v228;
          }
          else
          {
            v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - v82) >> 4);
            v88 = 2 * v87;
            if (2 * v87 <= v81)
              v88 = v81;
            if (v87 >= 0x2AAAAAAAAAAAAAALL)
              v89 = 0x555555555555555;
            else
              v89 = v88;
            v90 = (char *)sub_23682821C(v89);
            v92 = &v90[48 * v84];
            v93 = &v90[48 * v81];
            v94 = v92;
            do
            {
              *(_QWORD *)v94 = 0x100000000;
              *((_DWORD *)v94 + 2) = 1;
              *(_OWORD *)(v94 + 12) = 0uLL;
              *(_OWORD *)(v94 + 28) = 0uLL;
              *((_DWORD *)v94 + 11) = 0;
              v94 += 48;
            }
            while (v94 != v93);
            v95 = &v90[48 * v91];
            v96 = *(char **)(v617 + 144);
            v97 = *(char **)(v617 + 152);
            if (v97 == v96)
            {
              *(_QWORD *)(v617 + 144) = v92;
              *(_QWORD *)(v617 + 152) = v93;
              *(_QWORD *)(v617 + 160) = v95;
            }
            else
            {
              do
              {
                v98 = *((_QWORD *)v97 - 4);
                *((_OWORD *)v92 - 3) = *((_OWORD *)v97 - 3);
                *((_QWORD *)v92 - 4) = v98;
                *((_QWORD *)v92 - 3) = 0;
                *((_QWORD *)v92 - 2) = 0;
                *((_QWORD *)v92 - 1) = 0;
                *(_OWORD *)(v92 - 24) = *(_OWORD *)(v97 - 24);
                *((_QWORD *)v92 - 1) = *((_QWORD *)v97 - 1);
                v92 -= 48;
                *((_QWORD *)v97 - 3) = 0;
                *((_QWORD *)v97 - 2) = 0;
                *((_QWORD *)v97 - 1) = 0;
                v97 -= 48;
              }
              while (v97 != v96);
              v99 = *(char **)(v617 + 144);
              v97 = *(char **)(v617 + 152);
              *(_QWORD *)(v617 + 144) = v92;
              *(_QWORD *)(v617 + 152) = v93;
              *(_QWORD *)(v617 + 160) = v95;
              if (v97 != v99)
              {
                do
                {
                  v100 = (void *)*((_QWORD *)v97 - 3);
                  if (v100)
                  {
                    *((_QWORD *)v97 - 2) = v100;
                    operator delete(v100);
                  }
                  v97 -= 48;
                }
                while (v97 != v99);
                v97 = v99;
              }
            }
            if (v97)
              operator delete(v97);
          }
        }
        v654[0] = 0;
        sub_23686C348(__src, v654);
        v575 = v73;
        v229 = *(_QWORD *)(v617 + 144);
        v230 = *(_QWORD *)(v617 + 152);
        v231 = v230 - v229;
        if (v230 != v229)
        {
          v232 = v231 / 48;
          v67 = (unint64_t)(v231 / 48) > 1;
          v233 = *(_QWORD *)&__src[0];
          if (!v67)
            v232 = 1;
          v234 = (int *)(v229 + 8);
          v235 = 1;
          v236 = 1;
          v237 = v611;
          while (1)
          {
            v238 = v5[v237];
            v239 = *(_QWORD *)(v233 + 8 * (v238 >> 6));
            if (((1 << v238) & v239) != 0)
            {
              v277 = v237 + 1;
              goto LABEL_329;
            }
            *(_QWORD *)(v233 + 8 * (v238 >> 6)) = (1 << v238) | v239;
            *(v234 - 2) = v238;
            v240 = &v5[v237];
            v241 = v5[v237 + 1];
            v242 = v241 & 0xF;
            if (v241 < 0x10 || v242 == 0)
              break;
            *(v234 - 1) = v241 >> 4;
            *v234 = v242;
            v237 += 3;
            v234[1] = v240[2];
            if (v235 <= (int)(v241 >> 4))
              v235 = v241 >> 4;
            if (v236 <= v242)
              v236 = v241 & 0xF;
            v234 += 12;
            if (!--v232)
            {
              v637 = v237;
              goto LABEL_300;
            }
          }
          v277 = v237 + 2;
LABEL_329:
          v276 = 0;
          v637 = v277;
LABEL_330:
          if (*(_QWORD *)&__src[0])
            operator delete(*(void **)&__src[0]);
          v601 = v616 == 194;
          if (!v276)
            goto LABEL_616;
          v599 = 1;
          goto LABEL_334;
        }
        v236 = 1;
        v235 = 1;
        v237 = v611;
LABEL_300:
        if (v230 == v229)
        {
LABEL_325:
          v276 = (v577 | (v575 << 8)) + v580 == v237;
          goto LABEL_330;
        }
        v244 = 0;
        v605 = (*(_DWORD *)(v617 + 12) + 8 * v236 - 1) / (8 * v236);
        v602 = (*(_DWORD *)(v617 + 8) + 8 * v235 - 1) / (8 * v235);
        v614 = v237;
        while (1)
        {
          v245 = *(_DWORD *)(v229 + 48 * v244 + 4);
          if (v235 % v245 || (v246 = *(_DWORD *)(v229 + 48 * v244 + 8), v236 % v246))
          {
            v276 = 0;
            goto LABEL_330;
          }
          v247 = v229 + 48 * v244;
          v250 = *(_QWORD *)(v247 + 24);
          v249 = (void **)(v247 + 24);
          v248 = v250;
          v251 = v245 * v602;
          v252 = v246 * v605;
          *((_DWORD *)v249 - 2) = v251;
          *((_DWORD *)v249 - 1) = v252;
          v253 = (v251 * (unint64_t)v252) << 6;
          v255 = v249 + 1;
          v254 = (char *)v249[1];
          v256 = (uint64_t)&v254[-v250] >> 1;
          if (v253 > v256)
            break;
          if (v253 < v256)
          {
            v273 = (char *)(v248 + 2 * v253);
LABEL_320:
            *v255 = v273;
          }
LABEL_324:
          v229 = *(_QWORD *)(v617 + 144);
          if (++v244 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v617 + 152) - v229) >> 4))
            goto LABEL_325;
        }
        v257 = v229 + 48 * v244;
        v260 = *(_QWORD *)(v257 + 40);
        v259 = (_QWORD *)(v257 + 40);
        v258 = v260;
        if (v253 - v256 > (v260 - (uint64_t)v254) >> 1)
        {
          v589 = v259;
          v592 = v256;
          v600 = v253 - v256;
          if ((v253 & 0x8000000000000000) != 0)
            sub_2367C3440();
          v261 = v258 - v248;
          if (v261 <= v253)
            v262 = v253;
          else
            v262 = v261;
          if (v261 >= 0x7FFFFFFFFFFFFFFELL)
            v263 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v263 = v262;
          v264 = (char *)sub_2367CA09C(v263);
          v587 = v265;
          v583 = v264;
          v266 = (char *)*v255;
          v267 = (char *)*v249;
          v593 = &v264[2 * v592];
          bzero(v593, 2 * v600);
          if (v266 == v267)
          {
            v268 = v589;
            v269 = v593;
            v270 = v593;
            v237 = v614;
            v271 = v587;
          }
          else
          {
            v268 = v589;
            v269 = v593;
            v270 = v593;
            v237 = v614;
            v271 = v587;
            do
            {
              v272 = *((_WORD *)v266 - 1);
              v266 -= 2;
              *((_WORD *)v270 - 1) = v272;
              v270 -= 2;
            }
            while (v266 != v267);
          }
          *v249 = v270;
          v249[1] = &v269[2 * v600];
          *v268 = &v583[2 * v271];
          if (v267)
          {
            operator delete(v267);
            v237 = v614;
          }
          goto LABEL_324;
        }
        v274 = v249[1];
        v275 = v253 - v256;
        bzero(v274, 2 * (v253 - v256));
        v237 = v614;
        v273 = &v254[2 * v275];
        goto LABEL_320;
      case 196:
        v140 = v30 + 4;
        if (v30 + 4 > v4)
          goto LABEL_616;
        v141 = v5[v30 + 3] | (v5[v61] << 8);
        v637 = v140;
        if (v141 == 2)
          goto LABEL_616;
        v612 = v61 + v141;
        while (2)
        {
          v142 = v637;
          if (v637 < v612)
          {
            if (v637 + 17 > v4)
              goto LABEL_616;
            bzero((char *)__src + 4, 0x444uLL);
            BYTE12(__src[68]) = 1;
            v143 = &v5[v142];
            v144 = v5[v142];
            DWORD2(__src[68]) = v144;
            if ((v144 & 0x10) != 0)
            {
              if (v144 - 20 < 0xFFFFFFFC)
                goto LABEL_616;
              v603 = 758 * v144 - 12128;
              v145 = v635;
            }
            else
            {
              if (v144 > 3)
                goto LABEL_616;
              v603 = 758 * v144;
              v145 = v636;
            }
            LODWORD(v146) = 0;
            v591 = (__int16 *)*v145;
            LODWORD(__src[0]) = 0;
            v147 = 0x10000;
            v148 = 1;
            v149 = 15;
            v150 = 1;
            do
            {
              v151 = v143[v148];
              if (v143[v148])
                v150 = v148;
              *((_DWORD *)__src + v148) = v151;
              v146 = (v146 + v151);
              v147 -= v151 << v149;
              ++v148;
              --v149;
            }
            while (v148 != 17);
            v152 = v142 + 17;
            v637 = v152;
            if ((v144 & 0x10) != 0)
            {
              if (v146 > 0x100)
                goto LABEL_616;
            }
            else if (v146 > 0xC)
            {
              goto LABEL_616;
            }
            if (v152 + v146 <= v4)
            {
              v654[0] = 0;
              sub_23686C348(v653, v654);
              if ((_DWORD)v146)
              {
                v153 = v653[0];
                v154 = (_DWORD *)&__src[4] + 1;
                v155 = v146;
                while (1)
                {
                  v156 = v5[v152];
                  if ((v144 & 0x10) == 0 && v156 > 0xB)
                    break;
                  v157 = v153[v156 >> 6];
                  if ((v157 & (1 << v156)) != 0)
                    break;
                  v153[v156 >> 6] = v157 | (1 << v156);
                  *v154++ = v156;
                  ++v152;
                  if (!--v155)
                  {
                    v637 = v152;
                    goto LABEL_178;
                  }
                }
                v166 = 0;
                v637 = v152 + 1;
              }
              else
              {
LABEL_178:
                ++*((_DWORD *)__src + v150);
                *((_DWORD *)&__src[4] + v146 + 1) = 256;
                v158 = (-1 << (16 - v150)) + v147;
                if (v158 < 0)
                {
                  v166 = 0;
                }
                else
                {
                  v159 = &v591[2 * v603];
                  if (v158 && v591[2 * v603 + 1] != -1)
                  {
                    for (i = 0; i != 1516; i += 2)
                    {
                      v161 = &v159[i];
                      *(_BYTE *)v161 = 0;
                      v161[1] = -1;
                    }
                  }
                  BYTE12(__src[68]) = v152 == v612;
                  *(_OWORD *)&v654[4] = *(_OWORD *)((char *)__src + 4);
                  v655 = *(_OWORD *)((char *)&__src[1] + 4);
                  v656 = *(_OWORD *)((char *)&__src[2] + 4);
                  v657 = *(_OWORD *)((char *)&__src[3] + 4);
                  v162 = 0uLL;
                  for (j = 4; j != 68; j += 16)
                    v162 = vaddq_s32(*(int32x4_t *)((char *)__src + j), v162);
                  if (vaddvq_s32(v162) == 1)
                  {
                    v164 = 0;
                    v165 = vdupq_n_s32(DWORD1(__src[4]) << 16);
                    do
                    {
                      *(int32x4_t *)&v159[v164] = v165;
                      v164 += 8;
                    }
                    while (v164 != 512);
                  }
                  else
                  {
                    LODWORD(v167) = 0;
                    LODWORD(v168) = 0;
                    for (k = 1; k != 9; ++k)
                    {
                      v170 = *(_DWORD *)&v654[4 * k];
                      if (v170 >= 1)
                      {
                        v168 = (int)v168;
                        do
                        {
                          v171 = k | (*((_DWORD *)&__src[4] + v168 + 1) << 16);
                          v167 = (int)v167;
                          v172 = 1 << (8 - k);
                          do
                          {
                            *(_DWORD *)&v159[2 * v167++] = v171;
                            --v172;
                          }
                          while (v172);
                          ++v168;
                          v173 = __OFSUB__(v170--, 1);
                        }
                        while (!((v170 < 0) ^ v173 | (v170 == 0)));
                        v170 = 0;
                      }
                      *(_DWORD *)&v654[4 * k] = v170;
                    }
                    v174 = 0;
                    LODWORD(v175) = 0;
                    v176 = v159 + 512;
                    v177 = 8;
                    v178 = 9;
                    LODWORD(v179) = v168;
                    do
                    {
                      if (*(int *)&v654[4 * v178] >= 1)
                      {
                        v179 = (int)v179;
                        v180 = (v178 - 8);
                        do
                        {
                          if ((int)v175 >= v174)
                          {
                            v177 = v178 - 8;
                            if (v178 <= 0xF)
                            {
                              v181 = v178;
                              v182 = 1 << (v178 - 8);
                              while (1)
                              {
                                v183 = v182 - *(_DWORD *)&v654[4 * v181];
                                if (v183 < 1)
                                  break;
                                ++v181;
                                v182 = 2 * v183;
                                if ((_DWORD)v181 == 16)
                                {
                                  v177 = 8;
                                  goto LABEL_210;
                                }
                              }
                              v177 = v181 - 8;
                            }
LABEL_210:
                            LODWORD(v175) = 0;
                            v176 += 2 * v174;
                            v174 = 1 << v177;
                            v184 = &v159[2 * (int)v167];
                            *(_BYTE *)v184 = v177 + 8;
                            v184[1] = (((_DWORD)v176 - (_DWORD)v159) >> 2) - v167;
                            LODWORD(v167) = v167 + 1;
                          }
                          v185 = 1 << (v177 - v180);
                          v186 = v180 | (*((_DWORD *)&__src[4] + v179 + 1) << 16);
                          v175 = (int)v175;
                          do
                          {
                            *(_DWORD *)&v176[2 * v175++] = v186;
                            --v185;
                          }
                          while (v185);
                          ++v179;
                          v187 = *(_DWORD *)&v654[4 * v178];
                          v173 = __OFSUB__(v187--, 1);
                          *(_DWORD *)&v654[4 * v178] = v187;
                        }
                        while (!((v187 < 0) ^ v173 | (v187 == 0)));
                      }
                      ++v178;
                    }
                    while (v178 != 17);
                  }
                  v189 = *(_QWORD *)(v617 + 128);
                  v188 = *(_QWORD *)(v617 + 136);
                  if (v189 >= v188)
                  {
                    v191 = *(_QWORD *)(v617 + 120);
                    v192 = 0xF128CFC4A33F128DLL * ((uint64_t)(v189 - v191) >> 4);
                    v193 = v192 + 1;
                    if (v192 + 1 > 0x3B5CC0ED7303B5)
                      sub_2367C3440();
                    v194 = 0xF128CFC4A33F128DLL * ((uint64_t)(v188 - v191) >> 4);
                    if (2 * v194 > v193)
                      v193 = 2 * v194;
                    if (v194 >= 0x1DAE6076B981DALL)
                      v195 = 0x3B5CC0ED7303B5;
                    else
                      v195 = v193;
                    if (v195)
                    {
                      v196 = (char *)sub_2368282B0(v195);
                      v198 = v197;
                    }
                    else
                    {
                      v196 = 0;
                      v198 = 0;
                    }
                    v199 = &v196[1104 * v192];
                    memcpy(v199, __src, 0x450uLL);
                    v201 = *(char **)(v617 + 120);
                    v200 = *(char **)(v617 + 128);
                    v202 = v199;
                    if (v200 == v201)
                    {
                      v203 = (_QWORD *)v617;
                    }
                    else
                    {
                      do
                      {
                        v200 -= 1104;
                        v202 -= 1104;
                        memcpy(v202, v200, 0x44DuLL);
                      }
                      while (v200 != v201);
                      v203 = (_QWORD *)v617;
                      v200 = *(char **)(v617 + 120);
                    }
                    v190 = v199 + 1104;
                    v203[15] = v202;
                    v203[16] = v190;
                    v203[17] = &v196[1104 * v198];
                    if (v200)
                      operator delete(v200);
                  }
                  else
                  {
                    memcpy(*(void **)(v617 + 128), __src, 0x450uLL);
                    v190 = (char *)(v189 + 1104);
                  }
                  *(_QWORD *)(v617 + 128) = v190;
                  v166 = 1;
                }
              }
              if (v653[0])
                operator delete(v653[0]);
              LODWORD(v62) = 0;
              if ((v166 & 1) == 0)
                goto LABEL_617;
              continue;
            }
            goto LABEL_616;
          }
          break;
        }
        if (v612 != v637)
          goto LABEL_616;
        goto LABEL_334;
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 217:
        goto LABEL_334;
      case 218:
        v112 = v30 + 5;
        if (v30 + 5 > v4)
          goto LABEL_616;
        v581 = v30 + 2;
        v113 = v5[v61];
        v114 = &v5[v30];
        v115 = v114[3];
        v637 = v112;
        v62 = v114[4];
        if (!v114[4])
          goto LABEL_617;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v617 + 152) - *(_QWORD *)(v617 + 144)) >> 4) < v62)
          goto LABEL_616;
        v116 = 0;
        DWORD1(__src[7]) = 0;
        *(_OWORD *)((char *)&__src[5] + 4) = 0u;
        *(_OWORD *)((char *)&__src[6] + 4) = 0u;
        *(_OWORD *)((char *)&__src[4] + 4) = 0u;
        LODWORD(__src[1]) = v62;
        if (v112 + 2 * v62 > v4)
          goto LABEL_362;
        LOBYTE(v653[0]) = 0;
        sub_23686C348(v654, (unsigned __int8 *)v653);
        v117 = 0;
        v118 = v115 | (v113 << 8);
        v119 = *(_QWORD **)v654;
LABEL_133:
        v120 = v5[v112];
        v121 = v112 + 1;
        v122 = v119[v120 >> 6];
        if (((1 << v120) & v122) != 0
          || (v119[v120 >> 6] = (1 << v120) | v122,
              v123 = *(_QWORD *)(v617 + 144),
              v124 = *(_QWORD *)(v617 + 152),
              v125 = v124 - v123,
              v124 == v123))
        {
          v116 = 0;
          v637 = v112 + 1;
          goto LABEL_360;
        }
        v126 = v112;
        v127 = 0;
        v128 = 0;
        v129 = v125 / 48;
        if ((unint64_t)(v125 / 48) <= 1)
          v129 = 1;
LABEL_137:
        v130 = (int *)(v123 + 48 * v128);
        do
        {
          v131 = *v130;
          v130 += 12;
          if (v131 == (_DWORD)v120)
          {
            *((_DWORD *)&__src[1] + 3 * v117 + 1) = v128++;
            v127 = 1;
            if (v128 != v129)
              goto LABEL_137;
LABEL_144:
            v112 += 2;
            v132 = v5[v121];
            v133 = v132 & 0xF;
            if (v132 > 0x3F || v133 > 3)
            {
              v121 = v126 + 2;
              goto LABEL_358;
            }
            v135 = (char *)&__src[1] + 12 * v117 + 4;
            *((_DWORD *)v135 + 1) = v132 >> 4;
            *((_DWORD *)v135 + 2) = v133;
            if (++v117 != v62)
              goto LABEL_133;
            v637 = v126 + 2;
            v136 = v126 + 5;
            if (v126 + 5 <= v4)
            {
              v137 = v5[v112];
              v138 = v126 + 4;
              v637 = v126 + 4;
              v139 = v5[v126 + 3];
              *(_QWORD *)&__src[0] = __PAIR64__(v139, v137);
              if (v137 <= 0x3F)
              {
                v116 = 0;
                if (v139 < v137 || v139 > 0x3F)
                  goto LABEL_359;
                v403 = 0;
                v637 = v136;
                v404 = v5[v138];
                DWORD2(__src[0]) = v404 >> 4;
                HIDWORD(__src[0]) = v404 & 0xF;
                v406 = *(_QWORD *)(v617 + 120);
                v405 = *(_QWORD *)(v617 + 128);
                v407 = (v405 - v406) / 1104;
                if (v407 <= 1)
                  v407 = 1;
                while (1)
                {
                  if (v405 == v406)
                  {
                    v409 = 0;
                    v408 = 0;
                  }
                  else
                  {
                    v408 = 0;
                    v409 = 0;
                    v410 = (char *)&__src[1] + 12 * v403 + 4;
                    v411 = *((_DWORD *)v410 + 1);
                    v412 = v410 + 8;
                    v413 = (_DWORD *)(v406 + 1096);
                    v414 = v407;
                    do
                    {
                      if (*v413 == v411)
                        v409 = 1;
                      else
                        v408 |= *v413 == *v412 + 16;
                      v413 += 276;
                      --v414;
                    }
                    while (v414);
                  }
                  if (!((v137 != 0) | v409 & 1) || !((v139 == 0) | v408 & 1))
                    break;
                  if (++v403 == v62)
                  {
                    sub_23686C3C0(v596, (uint64_t)__src);
                    v116 = v118 + v581 == v136;
                    v119 = *(_QWORD **)v654;
                    goto LABEL_359;
                  }
                }
              }
            }
            v116 = 0;
            goto LABEL_359;
          }
          ++v128;
        }
        while (v129 != v128);
        if ((v127 & 1) != 0)
          goto LABEL_144;
LABEL_358:
        v116 = 0;
        v637 = v121;
LABEL_359:
        if (!v119)
          goto LABEL_362;
LABEL_360:
        operator delete(v119);
        if (*(_QWORD *)&__src[6])
          operator delete(*(void **)&__src[6]);
LABEL_362:
        if (*((_QWORD *)&__src[4] + 1))
          operator delete(*((void **)&__src[4] + 1));
        if (!v116)
          goto LABEL_616;
        v292 = *(_QWORD *)(v617 + 144);
        v293 = *(_QWORD *)(v617 + 152) - v292;
        if (v293)
        {
          v294 = v293 / 48;
          if (v294 <= 1)
            v294 = 1;
          v295 = (int32x2_t *)(v292 + 4);
          v296 = (int32x2_t)0x100000001;
          do
          {
            v297 = *v295;
            v295 += 6;
            v296 = vmax_s32(v296, v297);
            --v294;
          }
          while (v294);
          v298 = vshl_n_s32(v296, 3uLL);
        }
        else
        {
          v298 = (int32x2_t)0x800000008;
        }
        v585 = v298;
        v299 = *(_QWORD *)(v617 + 176);
        v300 = *(int32x2_t *)(v617 + 8);
        v588 = *(unsigned int *)(v299 - 104);
        if (v588 <= 1)
          v300 = vmul_s32(*(int32x2_t *)(v292 + 48 * *(unsigned int *)(v299 - 100) + 4), v300);
        v594 = v300;
        v653[0] = 0;
        *(_QWORD *)&__src[0] = v5;
        *((_QWORD *)&__src[0] + 1) = v4;
        __src[1] = v637;
        LODWORD(__src[2]) = 0;
        *((_QWORD *)&__src[2] + 1) = v4 - 2;
        sub_23686C5D0((uint64_t *)__src);
        v564 = *(_DWORD *)(v617 + 16);
        if (v601)
          v301 = *(_DWORD *)(v299 - 108);
        else
          v301 = 0;
        v572 = v299;
        v576 = *(_DWORD *)(v299 - 120);
        if (v601)
          v302 = *(_DWORD *)(v299 - 120);
        else
          v302 = 0;
        if (v601)
          v303 = *(_DWORD *)(v299 - 116);
        else
          v303 = 63;
        v574 = v601 && *(_DWORD *)(v299 - 112) != 0;
        v304 = 0xFFFF << v301;
        v590 = v301;
        v615 = 1 << v301;
        if (v574)
          v304 = 1 << v301;
        v584 = v302;
        v606 = v303;
        if (v588)
        {
          v305 = 0;
          v306 = v303 - v302 + 1;
          v307 = (char *)v639 + 2 * v302;
          do
          {
            if (v302 <= v303)
            {
              v308 = &v307[128 * (uint64_t)*(int *)(v299 - 100 + 12 * v305)];
              v309 = v306;
              do
              {
                v310 = *(unsigned __int16 *)v308;
                if (((v304 | (v615 + 0xFFFF)) & v310) != 0)
                  goto LABEL_616;
                *(_WORD *)v308 = v310 | v304;
                v308 += 2;
                --v309;
              }
              while (v309);
            }
            ++v305;
            v302 = v584;
            v303 = v606;
          }
          while (v305 != v588);
        }
        if (v590 > 10)
        {
LABEL_616:
          LODWORD(v62) = 0;
          goto LABEL_617;
        }
        v556 = (v585.i32[1] + v594.i32[1] - 1) / v585.i32[1];
        if (v556 >= 1)
        {
          v560 = 0;
          v311 = 0;
          v312 = v299;
          v313 = v299 - 100;
          v553 = 0;
          v582 = -1;
          v314 = v588;
          v315 = (v585.i32[0] + v594.i32[0] - 1) / v585.i32[0];
          v316 = v588;
          v317 = v617;
          v318 = v584;
          do
          {
            if (v315 >= 1)
            {
              for (m = 0; m != v315; ++m)
              {
                if (*(_DWORD *)(v317 + 16))
                {
                  v319 = v564;
                  if (!v564)
                  {
                    v320 = v313;
                    *(_QWORD *)v654 = 0;
                    if (!sub_23686C670((uint64_t)__src, v317, (unint64_t *)v654))
                      goto LABEL_616;
                    if (*(_QWORD *)v654 + 2 > v4)
                      goto LABEL_616;
                    if (v5[*(_QWORD *)v654] != 255)
                      goto LABEL_616;
                    if (v553 + 208 != v5[*(_QWORD *)v654 + 1])
                      goto LABEL_616;
                    __src[1] = (unint64_t)(*(_QWORD *)v654 + 2);
                    LODWORD(__src[2]) = 0;
                    *((_QWORD *)&__src[2] + 1) = *((_QWORD *)&__src[0] + 1) - 2;
                    sub_23686C5D0((uint64_t *)__src);
                    v319 = *(_DWORD *)(v617 + 16);
                    v653[0] = 0;
                    if (v582 > 0)
                      goto LABEL_616;
                    v553 = ((_BYTE)v553 + 1) & 7;
                    v312 = v572;
                    v314 = *(unsigned int *)(v572 - 104);
                    v582 = -1;
                    v317 = v617;
                    v318 = v584;
                    v313 = v320;
                  }
                  v564 = v319 - 1;
                  v316 = v314;
                }
                if (v316)
                {
                  v321 = 0;
                  v551 = v313;
                  v552 = v315;
                  do
                  {
                    v555 = v321;
                    v322 = (unsigned int *)(v313 + 12 * v321);
                    v323 = *(_QWORD *)(v317 + 144);
                    if (v588 <= 1)
                      v324 = 1;
                    else
                      v324 = *(_DWORD *)(v323 + 48 * *v322 + 8);
                    if (v588 <= 1)
                      v325 = 1;
                    else
                      v325 = *(_DWORD *)(v323 + 48 * *v322 + 4);
                    if (v324 >= 1)
                    {
                      v561 = 0;
                      v557 = (char *)v636[0] + 3032 * v322[1];
                      v558 = v322;
                      v586 = (char *)v635[0] + 3032 * v322[2];
                      v554 = v324 * v560;
                      v571 = v325 * m;
                      v326 = v323 + 48 * *v322;
                      v569 = (_QWORD *)(v326 + 24);
                      v570 = (_DWORD *)(v326 + 16);
                      v565 = v324;
                      v327 = v325;
                      v568 = v325;
                      do
                      {
                        if (v327 >= 1)
                        {
                          v328 = 0;
                          while (1)
                          {
                            v595 = v328;
                            v329 = (_WORD *)(*v569 + ((uint64_t)(v328 + v571 + *v570 * (v561 + v554)) << 7));
                            if (!v574)
                            {
                              v339 = v576;
                              if (!v318)
                              {
                                v340 = *v558;
                                v341 = sub_23686C848((uint64_t)v557, (uint64_t)__src);
                                if (v341 > 0xB)
                                  goto LABEL_616;
                                v342 = v341;
                                if (v341)
                                {
                                  sub_23686C5D0((uint64_t *)__src);
                                  v343 = (*((_QWORD *)&__src[1] + 1) >> (LOBYTE(__src[2]) - v342)) & ~(-1 << v342);
                                  LODWORD(__src[2]) -= v342;
                                  v344 = 1 << (v342 - 1) > v343 ? (-1 << v342) + 1 : 0;
                                  v345 = v344 + v343;
                                }
                                else
                                {
                                  v345 = 0;
                                }
                                v362 = v345 + *((__int16 *)v653 + v340);
                                *v329 = v362 << v590;
                                if (v362 << v590 != (__int16)(v362 << v590))
                                  goto LABEL_616;
                                *((_WORD *)v653 + v340) = v362;
                                v339 = 1;
                                v317 = v617;
                                v312 = v572;
                                v318 = v584;
                              }
                              if (v339 > v606)
                              {
                                v324 = v565;
                                goto LABEL_541;
                              }
                              if (v582 > 0)
                              {
                                v332 = 0;
                                v347 = 0;
                                goto LABEL_502;
                              }
                              v563 = v311;
                              v332 = 0;
                              v363 = v339;
                              while (1)
                              {
                                v364 = sub_23686C848((uint64_t)v586, (uint64_t)__src);
                                if (v364 > 0xFF)
                                  goto LABEL_616;
                                v365 = v364 >> 4;
                                v366 = v364 & 0xF;
                                if ((v364 & 0xF) != 0)
                                {
                                  v367 = v365 + v363;
                                  if (v367 > v606 || v366 + v590 > 11)
                                    goto LABEL_616;
                                  sub_23686C5D0((uint64_t *)__src);
                                  v332 = 0;
                                  v369 = *((_QWORD *)&__src[1] + 1) >> (LOBYTE(__src[2]) - v366);
                                  LODWORD(__src[2]) -= v366;
                                  v370 = v369 & ~(-1 << v366);
                                  v371 = (-1 << v366) | 1;
                                  if (v370 >> (v366 - 1))
                                    v371 = 0;
                                  v329[dword_236923B14[v367]] = (v371 + v370) << v590;
                                }
                                else
                                {
                                  if (v365 != 15)
                                  {
                                    v347 = v584 > 0 && v363 == v339 && v582 == 0;
                                    v582 = 1 << v365;
                                    if (v364 >= 0x10)
                                    {
                                      if (v584 < 1)
                                        goto LABEL_616;
                                      sub_23686C5D0((uint64_t *)__src);
                                      v401 = (*((_QWORD *)&__src[1] + 1) >> (LOBYTE(__src[2]) - v365)) & ~(-1 << v365);
                                      LODWORD(__src[2]) -= v365;
                                      v582 += v401;
                                    }
LABEL_501:
                                    v312 = v572;
                                    v318 = v584;
                                    v311 = v563;
LABEL_502:
                                    v324 = v565;
                                    v346 = v595;
                                    goto LABEL_503;
                                  }
                                  v367 = v363 + 15;
                                  v332 = (v332 + 1);
                                }
                                v363 = v367 + 1;
                                if (v367 >= v606)
                                {
                                  v347 = 0;
                                  goto LABEL_501;
                                }
                              }
                            }
                            v330 = v576;
                            if (!v318)
                            {
                              sub_23686C5D0((uint64_t *)__src);
                              v331 = *((_QWORD *)&__src[1] + 1) >> (LOBYTE(__src[2]) - 1);
                              --LODWORD(__src[2]);
                              *v329 |= (v331 & 1) << v590;
                              v330 = 1;
                            }
                            if (v330 > v606)
                            {
LABEL_541:
                              v327 = v568;
                              v346 = v595;
                              goto LABEL_542;
                            }
                            v562 = v311;
                            if (v582 > 0)
                            {
                              v578 = 0;
                              goto LABEL_424;
                            }
                            v567 = 0;
                            v550 = v330;
                            v348 = v330;
LABEL_448:
                            v349 = sub_23686C848((uint64_t)v586, (uint64_t)__src);
                            if (v349 > 0xFF)
                              goto LABEL_616;
                            v350 = v349 >> 4;
                            if ((v349 & 0xF) != 0)
                              break;
                            if (v350 == 15)
                            {
                              v579 = 0;
                              v566 = 0;
                              v567 = 1;
LABEL_456:
                              v352 = v348;
                              if (v348 <= v606)
                                v353 = v606;
                              else
                                v353 = v348;
                              v573 = v353 + 1;
                              v354 = v353 + 1 - v348;
                              while (1)
                              {
                                v355 = v352;
                                v356 = dword_236923B14[v352];
                                v357 = (__int16)v329[v356];
                                if (v329[v356])
                                {
                                  sub_23686C5D0((uint64_t *)__src);
                                  --LODWORD(__src[2]);
                                  v358 = v357 - v615;
                                  if (v357 >= 0)
                                    v358 = v357 + v615;
                                  if ((v615 & v357) != 0)
                                    v358 = v357;
                                  if (((*((_QWORD *)&__src[1] + 1) >> SLOBYTE(__src[2])) & 1) != 0)
                                    v359 = v358;
                                  else
                                    v359 = v357;
                                  v329[v356] = v359;
                                }
                                else
                                {
                                  if (v350 <= 0)
                                  {
                                    v360 = v606 < (int)v352;
                                    v361 = v355;
LABEL_474:
                                    if (v579)
                                    {
                                      if (!v360)
                                      {
                                        v329[dword_236923B14[v361]] = v579;
                                        goto LABEL_477;
                                      }
                                      goto LABEL_616;
                                    }
LABEL_477:
                                    v348 = v361 + 1;
                                    if (v361 >= v606)
                                    {
                                      v578 = 0;
LABEL_554:
                                      v330 = v348;
                                      if (!v566)
                                        goto LABEL_616;
                                      goto LABEL_424;
                                    }
                                    goto LABEL_448;
                                  }
                                  --v350;
                                }
                                v352 = v355 + 1;
                                if (!--v354)
                                {
                                  v360 = v355 >= v606;
                                  v361 = v573;
                                  goto LABEL_474;
                                }
                              }
                            }
                            v566 = (v567 & 1) == 0;
                            v398 = v584 > 0 && v348 == v550 && v582 == 0;
                            v578 = v398;
                            v582 = 1 << v350;
                            if (v349 < 0x10)
                              goto LABEL_554;
                            if (v584 < 1)
                              goto LABEL_616;
                            sub_23686C5D0((uint64_t *)__src);
                            v402 = LOBYTE(__src[2]) - v350;
                            LODWORD(__src[2]) -= v350;
                            if ((v567 & 1) != 0)
                              goto LABEL_616;
                            v582 += (*((_QWORD *)&__src[1] + 1) >> v402) & ~(-1 << v350);
                            v330 = v348;
LABEL_424:
                            v332 = 0;
                            if (v582 < 1 || v330 > v606)
                            {
                              v312 = v572;
                            }
                            else
                            {
                              LODWORD(v332) = v606 + 1 - v330;
                              v333 = &dword_236923B14[v330];
                              v312 = v572;
                              do
                              {
                                v335 = *v333++;
                                v334 = v335;
                                v336 = (__int16)v329[v335];
                                if (v329[v335])
                                {
                                  sub_23686C5D0((uint64_t *)__src);
                                  --LODWORD(__src[2]);
                                  v337 = v336 - v615;
                                  if (v336 >= 0)
                                    v337 = v336 + v615;
                                  if ((v615 & v336) != 0)
                                    v337 = v336;
                                  if (((*((_QWORD *)&__src[1] + 1) >> SLOBYTE(__src[2])) & 1) != 0)
                                    v338 = v337;
                                  else
                                    v338 = v336;
                                  v329[v334] = v338;
                                }
                                v332 = (v332 - 1);
                              }
                              while ((_DWORD)v332);
                            }
                            v318 = v584;
                            v311 = v562;
                            v324 = v565;
                            v346 = v595;
                            v347 = v578;
LABEL_503:
                            if (v347)
                            {
                              v373 = *(char **)(v312 - 40);
                              v372 = *(_QWORD *)(v312 - 32);
                              if ((unint64_t)v373 >= v372)
                              {
                                v375 = *(char **)(v312 - 48);
                                v376 = (v373 - v375) >> 2;
                                v377 = v376 + 1;
                                if ((unint64_t)(v376 + 1) >> 62)
                                  sub_2367C3440();
                                v378 = v372 - (_QWORD)v375;
                                if (v378 >> 1 > v377)
                                  v377 = v378 >> 1;
                                v18 = (unint64_t)v378 >= 0x7FFFFFFFFFFFFFFCLL;
                                v379 = 0x3FFFFFFFFFFFFFFFLL;
                                if (!v18)
                                  v379 = v377;
                                if (v379)
                                {
                                  v379 = (unint64_t)sub_2367C3454(v379);
                                  v375 = *(char **)(v312 - 48);
                                  v373 = *(char **)(v312 - 40);
                                }
                                else
                                {
                                  v380 = 0;
                                }
                                v381 = (unsigned int *)(v379 + 4 * v376);
                                *v381 = v311;
                                v374 = v381 + 1;
                                while (v373 != v375)
                                {
                                  v382 = *((_DWORD *)v373 - 1);
                                  v373 -= 4;
                                  *--v381 = v382;
                                }
                                *(_QWORD *)(v312 - 48) = v381;
                                *(_QWORD *)(v312 - 40) = v374;
                                *(_QWORD *)(v312 - 32) = v379 + 4 * v380;
                                if (v375)
                                  operator delete(v375);
                              }
                              else
                              {
                                *(_DWORD *)v373 = v311;
                                v374 = v373 + 4;
                              }
                              *(_QWORD *)(v312 - 40) = v374;
                              v346 = v595;
                            }
                            --v582;
                            if ((int)v332 >= 1)
                            {
                              v384 = *(unint64_t **)(v312 - 16);
                              v383 = *(_QWORD *)(v312 - 8);
                              if ((unint64_t)v384 >= v383)
                              {
                                v386 = *(_QWORD *)(v312 - 24);
                                v387 = ((uint64_t)v384 - v386) >> 3;
                                if ((unint64_t)(v387 + 1) >> 61)
                                  sub_2367C3440();
                                v388 = v383 - v386;
                                v389 = v388 >> 2;
                                if (v388 >> 2 <= (unint64_t)(v387 + 1))
                                  v389 = v387 + 1;
                                if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFF8)
                                  v390 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v390 = v389;
                                if (v390)
                                  v390 = (unint64_t)sub_2367CA1FC(v390);
                                else
                                  v391 = 0;
                                v392 = (unint64_t *)(v390 + 8 * v387);
                                *v392 = v311 | (unint64_t)(v332 << 32);
                                v385 = v392 + 1;
                                v394 = *(char **)(v312 - 24);
                                v393 = *(char **)(v312 - 16);
                                if (v393 == v394)
                                {
                                  v317 = v617;
                                }
                                else
                                {
                                  v317 = v617;
                                  do
                                  {
                                    v395 = *((_QWORD *)v393 - 1);
                                    v393 -= 8;
                                    *--v392 = v395;
                                  }
                                  while (v393 != v394);
                                  v393 = *(char **)(v312 - 24);
                                }
                                *(_QWORD *)(v312 - 24) = v392;
                                *(_QWORD *)(v312 - 16) = v385;
                                *(_QWORD *)(v312 - 8) = v390 + 8 * v391;
                                if (v393)
                                  operator delete(v393);
                              }
                              else
                              {
                                *v384 = v311 | (unint64_t)(v332 << 32);
                                v385 = v384 + 1;
                                v317 = v617;
                              }
                              *(_QWORD *)(v312 - 16) = v385;
                              goto LABEL_541;
                            }
                            v317 = v617;
                            v327 = v568;
LABEL_542:
                            ++v311;
                            v328 = v346 + 1;
                            if (v328 == v327)
                              goto LABEL_571;
                          }
                          if ((v349 & 0xF) != 1)
                            goto LABEL_616;
                          sub_23686C5D0((uint64_t *)__src);
                          --LODWORD(__src[2]);
                          v351 = v615;
                          if (((*((_QWORD *)&__src[1] + 1) >> SLOBYTE(__src[2])) & 1) == 0)
                            v351 = -v615;
                          v579 = v351;
                          v566 = 1;
                          v567 = 0;
                          goto LABEL_456;
                        }
LABEL_571:
                        ++v561;
                      }
                      while (v561 != v324);
                      v314 = *(unsigned int *)(v312 - 104);
                      v313 = v551;
                    }
                    v321 = v555 + 1;
                    v316 = v314;
                    v315 = v552;
                  }
                  while (v555 + 1 < v314);
                }
              }
            }
            ++v560;
          }
          while (v560 != v556);
          if (v582 > 0)
            goto LABEL_616;
        }
        if (!sub_23686C670((uint64_t)__src, v617, &v637) || v637 > v4)
          goto LABEL_616;
        goto LABEL_334;
      case 219:
        v204 = v30 + 4;
        if (v30 + 4 > v4)
          goto LABEL_616;
        v205 = v5[v30 + 3] | (v5[v61] << 8);
        v637 = v204;
        if (v205 == 2)
          goto LABEL_616;
        v206 = v61 + v205;
        v207 = (_QWORD *)v617;
        if (v204 >= v206)
          goto LABEL_272;
        v208 = *(char **)(v617 + 104);
LABEL_242:
        v209 = v207[12];
        v210 = 0xF0B7672A07A44C6BLL * ((uint64_t)&v208[-v209] >> 2);
        if (v210 > 3)
        {
LABEL_271:
          v637 = v204;
LABEL_272:
          if (v206 != v204)
            goto LABEL_616;
LABEL_334:
          v27 = (_QWORD *)v617;
          v279 = *(_BYTE **)(v617 + 200);
          v278 = *(_QWORD *)(v617 + 208);
          if ((unint64_t)v279 >= v278)
          {
            v282 = *(_QWORD *)(v617 + 192);
            v283 = &v279[-v282];
            v284 = (uint64_t)&v279[-v282 + 1];
            v280 = v616;
            if (v284 < 0)
              sub_2367C3440();
            v285 = v278 - v282;
            if (2 * v285 > v284)
              v284 = 2 * v285;
            if (v285 >= 0x3FFFFFFFFFFFFFFFLL)
              v286 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v286 = v284;
            if (v286)
              v287 = (char *)operator new(v286);
            else
              v287 = 0;
            v288 = &v283[(_QWORD)v287];
            v289 = &v283[(_QWORD)v287];
            *v289 = v616;
            v281 = v289 + 1;
            if (v279 == (_BYTE *)v282)
            {
              v27 = (_QWORD *)v617;
            }
            else
            {
              v290 = &v279[~v282];
              do
              {
                v291 = *--v279;
                (v290--)[(_QWORD)v287] = v291;
              }
              while (v279 != (_BYTE *)v282);
              v27 = (_QWORD *)v617;
              v279 = *(_BYTE **)(v617 + 192);
              v288 = v287;
            }
            v27[24] = v288;
            v27[25] = v281;
            v27[26] = &v287[v286];
            if (v279)
              operator delete(v279);
          }
          else
          {
            v280 = v616;
            *v279 = v616;
            v281 = v279 + 1;
          }
          v27[25] = v281;
          if (v280 == 217)
          {
            if ((v599 & 1) == 0)
              goto LABEL_616;
            if (v637 < v4)
            {
              memset(__src, 0, 24);
              sub_23683E704(__src, &v5[v637], (uint64_t)&v5[v4], v4 - v637);
              v415 = (void *)v27[30];
              if (v415)
              {
                v27[31] = v415;
                operator delete(v415);
                v27[30] = 0;
                v27[31] = 0;
                v27[32] = 0;
              }
              *((_OWORD *)v27 + 15) = __src[0];
              v27[32] = *(_QWORD *)&__src[1];
            }
            v416 = v27[18];
            v417 = v27[19];
            v418 = v417 - v416;
            if (v417 != v416)
            {
              v419 = 0;
              v420 = 0;
              v421 = v418 / 48;
              v423 = v27[12];
              v422 = v27[13];
              v424 = (v422 - v423) / 268;
              if (v424 <= 1)
                v424 = 1;
              v425 = v421 <= 1 ? 1 : v421;
              while (2)
              {
                if (v422 == v423)
                  goto LABEL_616;
                v426 = 0;
                v427 = v416 + 48 * v420;
                v430 = *(_DWORD *)(v427 + 12);
                v428 = (_DWORD *)(v427 + 12);
                v429 = v430;
                v431 = (_DWORD *)(v423 + 260);
                while (*v431 != v429)
                {
                  v431 += 67;
                  if (v424 == ++v426)
                    goto LABEL_613;
                }
                *v428 = v426;
                v419 = ++v420 >= v421;
                if (v420 != v425)
                  continue;
                break;
              }
LABEL_613:
              if (!v419)
                goto LABEL_616;
            }
            v432 = v27[15];
            v433 = v27[16];
            if (v432 == v433)
              goto LABEL_616;
            LODWORD(v62) = 0xF128CFC4A33F128DLL * ((v433 - v432) >> 4) < 0x200;
            goto LABEL_617;
          }
          continue;
        }
        if (v204 >= v4)
          goto LABEL_727;
        v211 = v5[v204];
        if (v211 <= 0x1F && (v211 & 0xF) <= 3 && v204 + 1 + (v211 >> 4 << 6) + 64 <= v4)
        {
          v214 = 0;
          DWORD1(__src[16]) = v211 & 0xF;
          LODWORD(__src[16]) = v211 >> 4;
          ++v204;
          do
          {
            if (v211 >= 0x10)
            {
              v215 = __rev16(*(unsigned __int16 *)&v5[v204]);
              v204 += 2;
            }
            else
            {
              v215 = v5[v204++];
            }
            if (!v215)
              goto LABEL_727;
            *((_DWORD *)__src + dword_236923B14[v214++]) = v215;
          }
          while (v214 != 64);
          BYTE8(__src[16]) = v204 == v206;
          v216 = *(_QWORD *)(v617 + 112);
          if ((unint64_t)v208 >= v216)
          {
            v217 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v216 - v209) >> 2);
            v218 = 2 * v217;
            if (2 * v217 <= v210 + 1)
              v218 = v210 + 1;
            if (v217 >= 0x7A44C6AFC2DD9CLL)
              v219 = 0xF4898D5F85BB39;
            else
              v219 = v218;
            v220 = (char *)sub_236828348(v219);
            v613 = v221;
            v222 = v220;
            v223 = &v220[268 * v210];
            memcpy(v223, __src, 0x10CuLL);
            v225 = *(char **)(v617 + 96);
            v224 = *(char **)(v617 + 104);
            v604 = v223;
            if (v224 == v225)
            {
              v226 = (_QWORD *)v617;
            }
            else
            {
              do
              {
                v224 -= 268;
                v223 -= 268;
                memcpy(v223, v224, 0x109uLL);
              }
              while (v224 != v225);
              v226 = (_QWORD *)v617;
              v224 = *(char **)(v617 + 96);
            }
            v227 = &v222[268 * v613];
            v208 = v604 + 268;
            v226[12] = v223;
            v226[13] = v604 + 268;
            v226[14] = v227;
            v207 = v226;
            if (v224)
              operator delete(v224);
          }
          else
          {
            memcpy(v208, __src, 0x10CuLL);
            v208 += 268;
            v207 = (_QWORD *)v617;
          }
          v207[13] = v208;
          if (v204 >= v206)
            goto LABEL_271;
          goto LABEL_242;
        }
        ++v204;
LABEL_727:
        LODWORD(v62) = 0;
        v637 = v204;
LABEL_617:
        if (v635[0])
        {
          v635[1] = v635[0];
          operator delete(v635[0]);
        }
        if (v636[0])
        {
          v636[1] = v636[0];
          operator delete(v636[0]);
        }
        if (!(_DWORD)v62)
          goto LABEL_670;
        v434 = (_QWORD *)v617;
        sub_23686ACEC((_QWORD *)v617, (uint64_t)v627);
        v435 = *(_QWORD *)(v617 + 24);
        if (*(_QWORD *)(v617 + 32) != v435)
        {
          v436 = 0;
          v437 = 0;
          do
          {
            v438 = (unsigned __int8 **)(v435 + v436);
            v440 = *v438;
            v439 = v438[1];
            if (v440 != v439 && *v440 == 225)
            {
              v441 = v439 - v440;
              v442 = v439 - v440 - 3;
              if ((unint64_t)(v439 - v440) >= 3
                && __rev16(*(unsigned __int16 *)(v440 + 1)) == v441 - 1
                && v442 >= 6)
              {
                if (!(*(_DWORD *)(v440 + 3) ^ 0x66697845 | *(unsigned __int16 *)(v440 + 7)))
                {
                  v443 = (void *)__dst;
                  if ((_QWORD)__dst == *((_QWORD *)&__dst + 1))
                  {
                    if (v441 != 9)
                    {
                      sub_2367C8698((unint64_t *)&__dst, v441 - 9);
                      v443 = (void *)__dst;
                    }
                    memcpy(v443, v440 + 9, v441 - 9);
                    v434 = (_QWORD *)v617;
                  }
                }
                if (v442 >= 0x1D)
                {
                  v444 = *(_QWORD *)(v440 + 3) == 0x6E2F2F3A70747468 && *(_QWORD *)(v440 + 11) == 0x2E65626F64612E73;
                  v445 = v444 && *(_QWORD *)(v440 + 19) == 0x2F7061782F6D6F63;
                  if (v445 && *((_QWORD *)v440 + 3) == 0x2F302E312F7061)
                  {
                    v447 = (void *)*((_QWORD *)&v623 + 1);
                    if (*((_QWORD *)&v623 + 1) == (_QWORD)v624)
                    {
                      if (v441 != 32)
                      {
                        sub_2367C8698((unint64_t *)&v623 + 1, v441 - 32);
                        v447 = (void *)*((_QWORD *)&v623 + 1);
                      }
                      memcpy(v447, v440 + 32, v441 - 32);
                      v434 = (_QWORD *)v617;
                    }
                  }
                }
              }
            }
            ++v437;
            v435 = v434[3];
            v436 += 24;
          }
          while (v437 < 0xAAAAAAAAAAAAAAABLL * ((v434[4] - v435) >> 3));
        }
        v448 = *((_QWORD *)&v633 + 1) - v633;
        if (*((_QWORD *)&v633 + 1) != (_QWORD)v633)
        {
          v449 = 0x6DB6DB6DB6DB6DB7 * (v448 >> 6);
          v450 = (int *)(v633 + 48);
          v448 = -1;
          do
          {
            v451 = *v450;
            v452 = v448 + 2;
            ++v448;
            v450 += 112;
            if (v451)
              v453 = 1;
            else
              v453 = v452 >= v449;
          }
          while (!v453);
        }
        if (sub_23686B498(v434[18], v434[19], v633 + 448 * v448 + 16))
          goto LABEL_670;
        v454 = *((_QWORD *)&v633 + 1) - v633;
        if (*((_QWORD *)&v633 + 1) == (_QWORD)v633)
        {
          v457 = (_QWORD *)v617;
        }
        else
        {
          v455 = 0x6DB6DB6DB6DB6DB7 * (v454 >> 6);
          v456 = (int *)(v633 + 48);
          v454 = -1;
          v457 = (_QWORD *)v617;
          do
          {
            v458 = *v456;
            v459 = v454 + 2;
            ++v454;
            v456 += 112;
            if (v458)
              v460 = 1;
            else
              v460 = v459 >= v455;
          }
          while (!v460);
        }
        if (sub_23686B630(v457, (int *)(v633 + 448 * v454 + 8))
          || (v629 = 1132396544,
              v626 = 8,
              v625[24] = 0,
              sub_2367CA770((uint64_t)__src, *(_DWORD *)(v617 + 8), *(_DWORD *)(v617 + 12)),
              DWORD2(__src[7])))
        {
LABEL_670:
          v461 = *(_DWORD **)v6;
          v462 = 4;
          goto LABEL_671;
        }
        sub_2367CA9E4((uint64_t)v639, (uint64_t)__src);
        sub_23686C030((uint64_t)&__dst, (uint64_t)v639, (uint64_t)v627);
        if (v627[64])
        {
          v464 = 255.0;
        }
        else
        {
          v464 = 255.0;
          if (v628 == 18)
            v464 = 1000.0;
          if (v628 == 16)
            v464 = 10000.0;
        }
        v629 = LODWORD(v464);
        for (n = 13; n != -2; n -= 5)
          sub_2367C2F38((uint64_t *)&v639[n]);
        if (!DWORD2(__src[7]))
        {
          for (ii = 104; ii != -16; ii -= 40)
            sub_2367C2F38((uint64_t *)((char *)__src + ii));
        }
        v467 = *(_QWORD *)v6;
        if (!*(_BYTE *)(*(_QWORD *)v6 + 2868))
        {
          v468 = *((_QWORD *)&v633 + 1) - v633;
          if (*((_QWORD *)&v633 + 1) != (_QWORD)v633)
          {
            v469 = 0x6DB6DB6DB6DB6DB7 * (v468 >> 6);
            v470 = (int *)(v633 + 48);
            v468 = -1;
            do
            {
              v471 = *v470;
              v472 = v468 + 2;
              ++v468;
              v470 += 112;
              if (v471)
                v473 = 1;
              else
                v473 = v472 >= v469;
            }
            while (!v473);
          }
          sub_23686ACEC(*(_QWORD **)(v633 + 448 * v468), v467 + 352);
          v467 = *(_QWORD *)v6;
          *(_BYTE *)(*(_QWORD *)v6 + 2868) = 1;
        }
        if (!*(_BYTE *)(v467 + 2867))
        {
          LODWORD(__src[0]) = 0;
          HIDWORD(__src[0]) = 8;
          memset(&__src[1], 0, 32);
          *(_QWORD *)&__src[3] = 0x300000001;
          *(_QWORD *)&__src[6] = 0;
          memset((char *)&__src[3] + 8, 0, 24);
          __src[5] = xmmword_2368AFA20;
          v487 = *((_QWORD *)&v633 + 1) - v633;
          if (*((_QWORD *)&v633 + 1) == (_QWORD)v633)
          {
            DWORD1(__src[0]) = *(_DWORD *)(**((_QWORD **)&v633 + 1) + 8);
          }
          else
          {
            v488 = 0x6DB6DB6DB6DB6DB7 * (v487 >> 6);
            v489 = (int *)(v633 + 48);
            v490 = -1;
            do
            {
              v491 = *v489;
              v492 = v490 + 2;
              ++v490;
              v489 += 112;
              if (v491)
                v493 = 1;
              else
                v493 = v492 >= v488;
            }
            while (!v493);
            DWORD1(__src[0]) = *(_DWORD *)(*(_QWORD *)(v633 + 448 * v490) + 8);
            v494 = (int *)(v633 + 48);
            v487 = -1;
            do
            {
              v495 = *v494;
              v496 = v487 + 2;
              ++v487;
              v494 += 112;
              if (v495)
                v497 = 1;
              else
                v497 = v496 >= v488;
            }
            while (!v497);
          }
          DWORD2(__src[0]) = *(_DWORD *)(*(_QWORD *)(v633 + 448 * v487) + 12);
          DWORD1(__src[2]) = 1;
          if (JxlEncoderSetBasicInfo(v467, (uint64_t)__src))
            goto LABEL_736;
        }
        v653[0] = 0;
        v636[0] = 0;
        if (sub_23686706C((uint64_t *)v6, v653, (unint64_t *)v636))
          goto LABEL_736;
        v474 = v653[0];
        if (*((_QWORD *)&v633 + 1) == (_QWORD)v633)
        {
          if (v653[0] == (void *)*(int *)(**((_QWORD **)&v633 + 1) + 8))
          {
            v483 = 0;
            v481 = v636[0];
            goto LABEL_733;
          }
          goto LABEL_736;
        }
        v475 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v633 + 1) - v633) >> 6);
        v476 = (int *)(v633 + 48);
        v477 = -1;
        do
        {
          v478 = *v476;
          v479 = v477 + 2;
          ++v477;
          v476 += 112;
          if (v478)
            v480 = 1;
          else
            v480 = v479 >= v475;
        }
        while (!v480);
        if (v653[0] != (void *)*(int *)(*(_QWORD *)(v633 + 448 * v477) + 8))
          goto LABEL_736;
        v481 = v636[0];
        v482 = (int *)(v633 + 48);
        v483 = -1;
        do
        {
          v484 = *v482;
          v485 = v483 + 2;
          ++v483;
          v482 += 112;
          if (v484)
            v486 = 1;
          else
            v486 = v485 >= v475;
        }
        while (!v486);
LABEL_733:
        if (v481 != (void *)*(int *)(*(_QWORD *)(v633 + 448 * v483) + 12))
        {
LABEL_736:
          v461 = *(_DWORD **)v6;
          goto LABEL_737;
        }
        v461 = *(_DWORD **)v6;
        if (*(_BYTE *)(*(_QWORD *)v6 + 345))
        {
LABEL_735:
          v462 = 129;
LABEL_671:
          v461[713] = v462;
          goto LABEL_672;
        }
        if ((_QWORD)__dst == *((_QWORD *)&__dst + 1))
          goto LABEL_787;
        v498 = *((_QWORD *)&__dst + 1) - __dst;
        if (*((_QWORD *)&__dst + 1) - (_QWORD)__dst >= 0xCuLL)
        {
          v499 = v461[138];
          if (*(_DWORD *)__dst == 704662861)
          {
            v500 = bswap32(*(_DWORD *)(__dst + 4));
            if (v500 >= 8 && v498 >= v500 + 14)
            {
              v503 = 0;
              v502 = (unsigned __int8 *)(__dst + v500);
              v501 = (unsigned __int8 *)(__dst + v500 + 1);
LABEL_751:
              v505 = *v501 | (*v502 << 8);
              if ((_WORD)v505)
              {
                v506 = v500 + __dst + 14;
                while (v506 < *((_QWORD *)&__dst + 1))
                {
                  v507 = *(unsigned __int8 *)(v506 - 12);
                  if (v503)
                    v508 = *(unsigned __int8 *)(v506 - 11);
                  else
                    v508 = *(unsigned __int8 *)(v506 - 12);
                  if (!v503)
                    v507 = *(unsigned __int8 *)(v506 - 11);
                  if ((v507 | (v508 << 8)) == 0x112)
                  {
                    v509 = (unsigned __int8 *)(v506 - 10);
                    if (v509 != (unsigned __int8 *)__dst)
                    {
                      v510 = *v509;
                      v511 = v509[1];
                      v512 = *(_DWORD *)(v509 + 2);
                      v513 = v510 | (v511 << 8);
                      v514 = v509 + 6;
                      v515 = v509 + 7;
                      v516 = v511 | (v510 << 8);
                      v517 = bswap32(v512);
                      v518 = (v503 & 1) == 0;
                      if ((v503 & 1) != 0)
                        v519 = v515;
                      else
                        v519 = v514;
                      if (!v518)
                      {
                        v515 = v514;
                        v517 = v512;
                        v516 = v513;
                      }
                      v520 = *v515 | (*v519 << 8);
                      if (v520 < 9 && v520 != 0 && v517 == 1 && v516 == 3)
                        v499 = v520;
                    }
                    break;
                  }
                  --v505;
                  v506 += 12;
                  if (!(_WORD)v505)
                    break;
                }
              }
              v461[138] = v499;
            }
          }
          else if (*(_DWORD *)__dst == 2771273)
          {
            v500 = *(unsigned int *)(__dst + 4);
            if (v500 >= 8 && v498 >= v500 + 14)
            {
              v501 = (unsigned __int8 *)(__dst + v500);
              v502 = (unsigned __int8 *)(__dst + v500 + 1);
              v503 = 1;
              goto LABEL_751;
            }
          }
        }
        if (!*(_BYTE *)(v6 + 203))
        {
LABEL_787:
          v526 = (char *)*((_QWORD *)&v623 + 1);
          v527 = v624;
          if (*((_QWORD *)&v623 + 1) != (_QWORD)v624 && *(_BYTE *)(v6 + 204))
          {
            v528 = *(_QWORD *)v6;
            if (*(_BYTE *)(*(_QWORD *)v6 + 2864))
              *(_DWORD *)(v528 + 2852) = 129;
            else
              *(_BYTE *)(v528 + 298) = 1;
            JxlEncoderAddBox(v528, (uint64_t)"xml ", v526, v527 - (_QWORD)v526, *(unsigned __int8 *)(v6 + 202));
          }
          v529 = v622;
          if ((_QWORD)v622 != *((_QWORD *)&v622 + 1) && *(_BYTE *)(v6 + 205))
          {
            v530 = *(_QWORD *)v6;
            if (*(_BYTE *)(*(_QWORD *)v6 + 2864))
              *(_DWORD *)(v530 + 2852) = 129;
            else
              *(_BYTE *)(v530 + 298) = 1;
            JxlEncoderAddBox(v530, (uint64_t)"jumb", (char *)v529, *((_QWORD *)&v529 + 1) - v529, *(unsigned __int8 *)(v6 + 202));
          }
          v461 = *(_DWORD **)v6;
          if (*(_BYTE *)(*(_QWORD *)v6 + 299))
          {
            if (!*(_BYTE *)(v6 + 203) || !*(_BYTE *)(v6 + 204))
              goto LABEL_735;
            v531 = *((_QWORD *)&v633 + 1) - v633;
            if (*((_QWORD *)&v633 + 1) != (_QWORD)v633)
            {
              v532 = 0x6DB6DB6DB6DB6DB7 * (v531 >> 6);
              v533 = (int *)(v633 + 48);
              v531 = -1;
              do
              {
                v534 = *v533;
                v535 = v531 + 2;
                ++v531;
                v533 += 112;
                if (v534)
                  v536 = 1;
                else
                  v536 = v535 >= v532;
              }
              while (!v536);
            }
            sub_23682787C((uint64_t)__src, *(_QWORD *)(v633 + 448 * v531));
            v639[1] = 0;
            v639[0] = 0;
            *(_QWORD *)&v640 = 0;
            v537 = sub_23686B7B4(__src, (uint64_t)v639, v6 + 16);
            v538 = *(_QWORD *)v6;
            if (v537)
            {
              *(_DWORD *)(v538 + 2852) = 3;
              v539 = v639[0];
            }
            else
            {
              v539 = v639[0];
              sub_2367C9C54((_QWORD *)(v538 + 1984), (char *)v639[0], (char *)v639[1], (char *)v639[1] - (char *)v639[0]);
            }
            if (v539)
              operator delete(v539);
            sub_2368284CC((uint64_t)__src);
            if (v537)
            {
LABEL_672:
              v3 = 1;
              goto LABEL_673;
            }
            v461 = *(_DWORD **)v6;
          }
          sub_23683E3AC((uint64_t)v639, (uint64_t)v474, (uint64_t)v481, v461[156]);
          v540 = *((_QWORD *)&v633 + 1) - v633;
          if (*((_QWORD *)&v633 + 1) != (_QWORD)v633)
          {
            v541 = 0x6DB6DB6DB6DB6DB7 * (v540 >> 6);
            v542 = (int *)(v633 + 48);
            v540 = -1;
            do
            {
              v543 = *v542;
              v544 = v540 + 2;
              ++v540;
              v542 += 112;
              if (v543)
                v545 = 1;
              else
                v545 = v544 >= v541;
            }
            while (!v545);
          }
          sub_23682787C((uint64_t)v618, *(_QWORD *)(v633 + 448 * v540));
          sub_2368673D8((uint64_t)&v643[8], (uint64_t)v618);
          LOBYTE(v644) = 1;
          sub_2368284CC((uint64_t)v618);
          v546 = *(_QWORD *)v6;
          sub_236867AE8((uint64_t)__src, v6 + 8);
          sub_236867C0C((uint64_t)&__src[48] + 8, (uint64_t)v639);
          memset((char *)&__src[73] + 8, 0, 24);
          v547 = (*(uint64_t (**)(_QWORD, uint64_t))(v546 + 8))(*(_QWORD *)v546, 1200);
          v548 = v547;
          if (v547)
          {
            sub_236867DDC(v547, (uint64_t)__src);
            *(_QWORD *)v654 = v548;
            *(_QWORD *)&v654[8] = v546;
            sub_2368682F8((uint64_t)__src);
            sub_236868370((unint64_t *)(v548 + 1176), *(unsigned int *)(*(_QWORD *)v6 + 624));
            sub_236868398((_BYTE *)v6, (uint64_t *)v654);
            v3 = 0;
          }
          else
          {
            *(_QWORD *)v654 = 0;
            *(_QWORD *)&v654[8] = v546;
            sub_2368682F8((uint64_t)__src);
            v549 = *(_QWORD *)v6;
            v3 = 1;
            *(_DWORD *)(v549 + 2852) = 1;
          }
          sub_2368611E8(v654, 0);
          sub_23683E5F4((uint64_t)v639);
        }
        else
        {
          if (!(v498 >> 16))
          {
            v524 = v498 + 4;
            sub_236818388(__src, v498 + 4);
            memcpy((void *)(*(_QWORD *)&__src[0] + 4), (const void *)__dst, *((_QWORD *)&__dst + 1) - __dst);
            v525 = *(_QWORD *)v6;
            if (*(_BYTE *)(*(_QWORD *)v6 + 2864))
              *(_DWORD *)(v525 + 2852) = 129;
            else
              *(_BYTE *)(v525 + 298) = 1;
            JxlEncoderAddBox(v525, (uint64_t)"Exif", *(char **)&__src[0], v524, *(unsigned __int8 *)(v6 + 202));
            if (*(_QWORD *)&__src[0])
            {
              *((_QWORD *)&__src[0] + 1) = *(_QWORD *)&__src[0];
              operator delete(*(void **)&__src[0]);
            }
            goto LABEL_787;
          }
LABEL_737:
          v3 = 1;
          v461[713] = 1;
        }
LABEL_673:
        sub_236868598((uint64_t)&__dst);
        return v3;
      case 221:
        if (v598)
          goto LABEL_616;
        v109 = v30 + 6;
        if (v30 + 6 > v4)
          goto LABEL_616;
        v110 = &v5[v30];
        v111 = v110[3] | ((unint64_t)v5[v61] << 8);
        LODWORD(v110) = __rev16(*((unsigned __int16 *)v110 + 2));
        v637 = v109;
        *(_DWORD *)(v617 + 16) = (_DWORD)v110;
        if (v111 != 4)
          goto LABEL_616;
        v598 = 1;
        goto LABEL_334;
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
        v64 = v30 + 4;
        if (v30 + 4 > v4)
          goto LABEL_616;
        v65 = v5[v30 + 3] | (v5[v61] << 8);
        v66 = v61 + v65;
        v67 = v65 < 2 || v66 > v4;
        if (v67)
          goto LABEL_616;
        memset(__src, 0, 24);
        sub_23683E704(__src, &v610[v64], (uint64_t)&v610[v64 + 1 + v65], v65 + 1);
        v637 = v66;
        v68 = *(_QWORD **)(v617 + 32);
        if ((unint64_t)v68 >= *(_QWORD *)(v617 + 40))
        {
          v70 = sub_23686C23C(v608, (uint64_t)__src);
          v69 = *(void **)&__src[0];
          v71 = v617;
        }
        else
        {
          *v68 = 0;
          v68[1] = 0;
          v68[2] = 0;
          v69 = *(void **)&__src[0];
          sub_2367C9F60(v68, *(const void **)&__src[0], *((uint64_t *)&__src[0] + 1), *((_QWORD *)&__src[0] + 1) - *(_QWORD *)&__src[0]);
          v70 = (uint64_t)(v68 + 3);
          v71 = v617;
          *(_QWORD *)(v617 + 32) = v68 + 3;
        }
        *(_QWORD *)(v71 + 32) = v70;
        if (v69)
          goto LABEL_87;
        goto LABEL_334;
      case 254:
        v103 = v30 + 4;
        if (v30 + 4 > v4)
          goto LABEL_616;
        v104 = v5[v30 + 3] | (v5[v61] << 8);
        if (v104 < 2 || v61 + v104 > v4)
          goto LABEL_616;
        memset(__src, 0, 24);
        sub_23683E704(__src, &v610[v103], (uint64_t)&v610[v103 + 1 + v104], v104 + 1);
        v637 = v104 + v103 - 2;
        v106 = *(_QWORD **)(v617 + 80);
        if ((unint64_t)v106 >= *(_QWORD *)(v617 + 88))
        {
          v107 = sub_23686C23C(v597, (uint64_t)__src);
          v69 = *(void **)&__src[0];
          v108 = v617;
        }
        else
        {
          *v106 = 0;
          v106[1] = 0;
          v106[2] = 0;
          v69 = *(void **)&__src[0];
          sub_2367C9F60(v106, *(const void **)&__src[0], *((uint64_t *)&__src[0] + 1), *((_QWORD *)&__src[0] + 1) - *(_QWORD *)&__src[0]);
          v107 = (uint64_t)(v106 + 3);
          v108 = v617;
          *(_QWORD *)(v617 + 80) = v106 + 3;
        }
        *(_QWORD *)(v108 + 80) = v107;
        if (!v69)
          goto LABEL_334;
LABEL_87:
        operator delete(v69);
        goto LABEL_334;
      default:
        goto LABEL_617;
    }
  }
}

void sub_236866DC4(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
    operator delete(v1);
  sub_2368284CC((uint64_t)&STACK[0xBC0]);
  sub_236868598((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_23686706C(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = *a1;
  *a2 = sub_2367F4718(*a1 + 728);
  if (*(_BYTE *)(v6 + 736))
    LODWORD(v7) = 8 * *(_DWORD *)(v6 + 740) + 8;
  else
    LODWORD(v7) = *(_DWORD *)(v6 + 744);
  v7 = v7;
  *a3 = v7;
  if (*((_DWORD *)a1 + 168))
  {
    *a2 = *((unsigned int *)a1 + 171);
    v7 = *((unsigned int *)a1 + 172);
    *a3 = v7;
  }
  if (*((_BYTE *)a1 + 404))
  {
    v8 = *((int *)a1 + 99);
    *a2 = (v8 - 1 + *a2) / v8;
    v7 = (v8 - 1 + *a3) / v8;
    *a3 = v7;
  }
  if (*a2 && v7)
    return 0;
  *(_DWORD *)(v6 + 2852) = 129;
  return 1;
}

uint64_t JxlEncoderAddBox(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, int a5)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  _QWORD v36[5];

  if (!*(_BYTE *)(a1 + 298)
    || *(_BYTE *)(a1 + 2866)
    || a5
    && (*(_WORD *)a2 == 30826 ? (v11 = *(_BYTE *)(a2 + 2) == 108) : (v11 = 0),
        v11 || *(_DWORD *)a2 == 1685217898 || *(_DWORD *)a2 == 1651470946))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)a1, 40);
    v13 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    v29[0] = v12;
    v29[1] = a1;
    *(_DWORD *)v12 = *(_DWORD *)a2;
    sub_2367C9C54((_QWORD *)(v12 + 8), a3, &a3[a4], a4);
    *(_BYTE *)(v13 + 32) = a5 != 0;
    v30 = 0;
    v31 = a1;
    v32 = 0;
    v33 = a1;
    v34 = 0;
    v35 = sub_236893124;
    v29[0] = 0;
    sub_2368612B8(&v32, v13);
    v33 = a1;
    v14 = *(_QWORD **)(a1 + 88);
    v15 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v14 >= v15)
    {
      v19 = *(_QWORD *)(a1 + 80);
      v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v19) >> 4);
      v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555)
        sub_2367C3440();
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v19) >> 4);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x2AAAAAAAAAAAAAALL)
        v23 = 0x555555555555555;
      else
        v23 = v21;
      v36[4] = a1 + 96;
      v24 = (char *)sub_23682821C(v23);
      v25 = &v24[48 * v20];
      v36[0] = v24;
      v36[1] = v25;
      v36[3] = &v24[48 * v26];
      v27 = v30;
      v30 = 0;
      *(_QWORD *)v25 = v27;
      *((_QWORD *)v25 + 1) = v31;
      v28 = v32;
      v32 = 0;
      *((_QWORD *)v25 + 2) = v28;
      *((_QWORD *)v25 + 3) = a1;
      *((_QWORD *)v25 + 4) = v34;
      *((_QWORD *)v25 + 5) = v35;
      v36[2] = v25 + 48;
      sub_2368687C0((_QWORD *)(a1 + 80), v36);
      v18 = *(_QWORD **)(a1 + 88);
      sub_23686884C((uint64_t)v36);
    }
    else
    {
      v16 = v30;
      v30 = 0;
      *v14 = v16;
      v14[1] = v31;
      v17 = v32;
      v32 = 0;
      v14[2] = v17;
      v14[3] = a1;
      v14[4] = v34;
      v14[5] = v35;
      v18 = v14 + 6;
    }
    *(_QWORD *)(a1 + 88) = v18;
    ++*(_QWORD *)(a1 + 72);
    v34 = 0;
    sub_2368612B8(&v32, 0);
    sub_2368611E8(&v30, 0);
    sub_2368612B8(v29, 0);
    return 0;
  }
}

void sub_2368673B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_236868898((uint64_t)va1);
  sub_2368612B8((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2368673D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v5;
  char *v6;
  _BYTE *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  size_t v29;
  void *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  size_t v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void **v49;
  __int128 *v50;
  __int128 *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t i;
  void *v61;
  void **v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *j;

  v3 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  if (a1 != a2)
  {
    sub_2368688E8((uint64_t *)(a1 + 24), *(char ***)(a2 + 24), *(char ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    v5 = *(char **)(a1 + 48);
    v6 = *(char **)(a2 + 48);
    v7 = *(_BYTE **)(a2 + 56);
    v8 = v7 - v6;
    v9 = (v7 - v6) >> 2;
    v10 = *(_QWORD *)(a1 + 64);
    if (v9 <= (v10 - (uint64_t)v5) >> 2)
    {
      v13 = *(_BYTE **)(a1 + 56);
      v14 = (v13 - v5) >> 2;
      if (v14 < v9)
      {
        v15 = &v6[4 * v14];
        if (v13 != v5)
        {
          memmove(*(void **)(a1 + 48), *(const void **)(a2 + 48), v13 - v5);
          v5 = *(char **)(a1 + 56);
        }
        v8 = v7 - v15;
        if (v7 == v15)
        {
LABEL_20:
          *(_QWORD *)(a1 + 56) = &v5[v8];
          sub_2368688E8((uint64_t *)(a1 + 72), *(char ***)(a2 + 72), *(char ***)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
          v18 = *(char **)(a1 + 96);
          v19 = *(char **)(a2 + 96);
          v20 = *(_BYTE **)(a2 + 104);
          v21 = v20 - v19;
          v22 = 0xF0B7672A07A44C6BLL * ((v20 - v19) >> 2);
          v23 = *(_QWORD *)(a1 + 112);
          if (0xF0B7672A07A44C6BLL * ((v23 - (uint64_t)v18) >> 2) >= v22)
          {
            v27 = *(_BYTE **)(a1 + 104);
            if (0xF0B7672A07A44C6BLL * ((v27 - v18) >> 2) < v22)
            {
              v28 = &v19[4 * ((v27 - v18) >> 2)];
              if (v27 != v18)
              {
                memmove(*(void **)(a1 + 96), *(const void **)(a2 + 96), v27 - v18 - 3);
                v18 = *(char **)(a1 + 104);
              }
              v21 = v20 - v28;
              if (v20 == v28)
              {
LABEL_38:
                v32 = &v18[v21];
                v33 = *(char **)(a1 + 120);
                *(_QWORD *)(a1 + 104) = v32;
                v34 = *(char **)(a2 + 120);
                v35 = *(_BYTE **)(a2 + 128);
                v36 = v35 - v34;
                v37 = 0xF128CFC4A33F128DLL * ((v35 - v34) >> 4);
                v38 = *(_QWORD *)(a1 + 136);
                if (0xF128CFC4A33F128DLL * ((v38 - (uint64_t)v33) >> 4) >= v37)
                {
                  v42 = *(_BYTE **)(a1 + 128);
                  if (0xF128CFC4A33F128DLL * ((v42 - v33) >> 4) < v37)
                  {
                    v43 = &v34[16 * ((v42 - v33) >> 4)];
                    if (v42 != v33)
                    {
                      memmove(v33, *(const void **)(a2 + 120), v42 - v33 - 3);
                      v33 = *(char **)(a1 + 128);
                    }
                    v36 = v35 - v43;
                    if (v35 == v43)
                    {
LABEL_56:
                      v47 = &v33[v36];
                      v49 = (void **)(a1 + 144);
                      v48 = *(_QWORD *)(a1 + 144);
                      *(_QWORD *)(a1 + 128) = v47;
                      v51 = *(__int128 **)(a2 + 144);
                      v50 = *(__int128 **)(a2 + 152);
                      v52 = 0xAAAAAAAAAAAAAAABLL * (v50 - v51);
                      v53 = *(_QWORD *)(a1 + 160);
                      if (0xAAAAAAAAAAAAAAABLL * ((v53 - v48) >> 4) >= v52)
                      {
                        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 152) - v48) >> 4) >= v52)
                        {
                          v59 = sub_236868C38(*(__int128 **)(a2 + 144), *(__int128 **)(a2 + 152), v48);
                          for (i = *(_QWORD *)(a1 + 152); i != v59; i -= 48)
                          {
                            v61 = *(void **)(i - 24);
                            if (v61)
                            {
                              *(_QWORD *)(i - 16) = v61;
                              operator delete(v61);
                            }
                          }
                          *(_QWORD *)(a1 + 152) = v59;
LABEL_74:
                          v62 = (void **)(a1 + 168);
                          v63 = *(_QWORD **)(a1 + 168);
                          v65 = *(_QWORD *)(a2 + 168);
                          v64 = *(_QWORD *)(a2 + 176);
                          v66 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - v65) >> 3);
                          v67 = *(_QWORD *)(a1 + 184);
                          if (0xEEEEEEEEEEEEEEEFLL * ((v67 - (uint64_t)v63) >> 3) >= v66)
                          {
                            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - (_QWORD)v63) >> 3) >= v66)
                            {
                              v75 = sub_236868A68(*(_QWORD *)(a2 + 168), *(_QWORD *)(a2 + 176), *(_QWORD *)(a1 + 168));
                              for (j = *(_QWORD **)(a1 + 176); j != (_QWORD *)v75; sub_236827DE8(j))
                                j -= 15;
                              *(_QWORD *)(a1 + 176) = v75;
                              goto LABEL_93;
                            }
                            v74 = v65 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 176) - (_QWORD)v63) >> 3);
                            sub_236868A68(*(_QWORD *)(a2 + 168), v74, *(_QWORD *)(a1 + 168));
                            v73 = sub_236827E78(a1 + 184, v74, v64, *(_QWORD *)(a1 + 176));
                          }
                          else
                          {
                            if (v63)
                            {
                              v68 = *(_QWORD **)(a1 + 176);
                              v69 = *(void **)(a1 + 168);
                              if (v68 != v63)
                              {
                                do
                                {
                                  v68 -= 15;
                                  sub_236827DE8(v68);
                                }
                                while (v68 != v63);
                                v69 = *v62;
                              }
                              *(_QWORD *)(a1 + 176) = v63;
                              operator delete(v69);
                              v67 = 0;
                              *v62 = 0;
                              *(_QWORD *)(a1 + 176) = 0;
                              *(_QWORD *)(a1 + 184) = 0;
                            }
                            if (v66 > 0x222222222222222)
                              sub_2367C3440();
                            v70 = 0xEEEEEEEEEEEEEEEFLL * (v67 >> 3);
                            v71 = 2 * v70;
                            if (2 * v70 <= v66)
                              v71 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - v65) >> 3);
                            if (v70 >= 0x111111111111111)
                              v72 = 0x222222222222222;
                            else
                              v72 = v71;
                            sub_236827E2C((_QWORD *)(a1 + 168), v72);
                            v73 = sub_236827E78(a1 + 184, v65, v64, *(_QWORD *)(a1 + 176));
                          }
                          *(_QWORD *)(a1 + 176) = v73;
LABEL_93:
                          sub_2367C9C54((_QWORD *)(a1 + 192), *(char **)(a2 + 192), *(char **)(a2 + 200), *(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192));
                          sub_2368688E8((uint64_t *)(a1 + 216), *(char ***)(a2 + 216), *(char ***)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 3));
                          sub_2367C9C54((_QWORD *)(a1 + 240), *(char **)(a2 + 240), *(char **)(a2 + 248), *(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240));
                          *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
                          sub_2367C9C54((_QWORD *)(a1 + 272), *(char **)(a2 + 272), *(char **)(a2 + 280), *(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272));
                          return a1;
                        }
                        v58 = &v51[(*(_QWORD *)(a1 + 152) - v48) >> 4];
                        sub_236868C38(*(__int128 **)(a2 + 144), v58, v48);
                        v57 = sub_236828080(a1 + 160, v58, v50, *(_QWORD *)(a1 + 152));
                      }
                      else
                      {
                        if (v48)
                        {
                          sub_236827D9C((uint64_t *)(a1 + 144));
                          operator delete(*v49);
                          v53 = 0;
                          *v49 = 0;
                          *(_QWORD *)(a1 + 152) = 0;
                          *(_QWORD *)(a1 + 160) = 0;
                        }
                        if (v52 > 0x555555555555555)
                          sub_2367C3440();
                        v54 = 0xAAAAAAAAAAAAAAABLL * (v53 >> 4);
                        v55 = 2 * v54;
                        if (2 * v54 <= v52)
                          v55 = 0xAAAAAAAAAAAAAAABLL * (v50 - v51);
                        if (v54 >= 0x2AAAAAAAAAAAAAALL)
                          v56 = 0x555555555555555;
                        else
                          v56 = v55;
                        sub_236828034((_QWORD *)(a1 + 144), v56);
                        v57 = sub_236828080(a1 + 160, v51, v50, *(_QWORD *)(a1 + 152));
                      }
                      *(_QWORD *)(a1 + 152) = v57;
                      goto LABEL_74;
                    }
                    v44 = v36 - 3;
                    v45 = v33;
                    v46 = v43;
LABEL_55:
                    memmove(v45, v46, v44);
                    goto LABEL_56;
                  }
                }
                else
                {
                  if (v33)
                  {
                    *(_QWORD *)(a1 + 128) = v33;
                    operator delete(v33);
                    v38 = 0;
                    *(_QWORD *)(a1 + 120) = 0;
                    *(_QWORD *)(a1 + 128) = 0;
                    *(_QWORD *)(a1 + 136) = 0;
                  }
                  if (v37 > 0x3B5CC0ED7303B5)
                    sub_2367C3440();
                  v39 = 0xF128CFC4A33F128DLL * (v38 >> 4);
                  v40 = 2 * v39;
                  if (2 * v39 <= v37)
                    v40 = 0xF128CFC4A33F128DLL * ((v35 - v34) >> 4);
                  if (v39 >= 0x1DAE6076B981DALL)
                    v41 = 0x3B5CC0ED7303B5;
                  else
                    v41 = v40;
                  sub_236828260((_QWORD *)(a1 + 120), v41);
                  v33 = *(char **)(a1 + 128);
                }
                if (v35 == v34)
                  goto LABEL_56;
                v44 = v36 - 3;
                v45 = v33;
                v46 = v34;
                goto LABEL_55;
              }
              v29 = v21 - 3;
              v30 = v18;
              v31 = v28;
LABEL_37:
              memmove(v30, v31, v29);
              goto LABEL_38;
            }
          }
          else
          {
            if (v18)
            {
              *(_QWORD *)(a1 + 104) = v18;
              operator delete(v18);
              v23 = 0;
              *(_QWORD *)(a1 + 96) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              *(_QWORD *)(a1 + 112) = 0;
            }
            if (v22 > 0xF4898D5F85BB39)
              sub_2367C3440();
            v24 = 0xF0B7672A07A44C6BLL * (v23 >> 2);
            v25 = 2 * v24;
            if (2 * v24 <= v22)
              v25 = 0xF0B7672A07A44C6BLL * ((v20 - v19) >> 2);
            if (v24 >= 0x7A44C6AFC2DD9CLL)
              v26 = 0xF4898D5F85BB39;
            else
              v26 = v25;
            sub_2368282F8((_QWORD *)(a1 + 96), v26);
            v18 = *(char **)(a1 + 104);
          }
          if (v20 == v19)
            goto LABEL_38;
          v29 = v21 - 3;
          v30 = v18;
          v31 = v19;
          goto LABEL_37;
        }
        v16 = v5;
        v17 = v15;
LABEL_19:
        memmove(v16, v17, v8);
        goto LABEL_20;
      }
    }
    else
    {
      if (v5)
      {
        *(_QWORD *)(a1 + 56) = v5;
        operator delete(v5);
        v10 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      if ((v8 & 0x8000000000000000) != 0)
        sub_2367C3440();
      v11 = v10 >> 1;
      if (v10 >> 1 <= v9)
        v11 = (v7 - v6) >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      sub_2367C3404((_QWORD *)(a1 + 48), v12);
      v5 = *(char **)(a1 + 56);
    }
    if (v7 == v6)
      goto LABEL_20;
    v16 = v5;
    v17 = v6;
    goto LABEL_19;
  }
  return a1;
}

void sub_236867AC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 176) = v2;
  _Unwind_Resume(a1);
}

void sub_236867AD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 152) = v2;
  _Unwind_Resume(a1);
}

void sub_236867AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 176) = v2;
  _Unwind_Resume(a1);
}

void sub_236867AE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 152) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_236867AE8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_2368218B0(a1 + 8, a2 + 8);
  v4 = *(_OWORD *)(a2 + 648);
  v5 = *(_OWORD *)(a2 + 664);
  v6 = *(_OWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 664) = v5;
  *(_OWORD *)(a1 + 680) = v6;
  *(_OWORD *)(a1 + 648) = v4;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  v7 = *(_BYTE **)(a2 + 704);
  v8 = *(_BYTE **)(a2 + 712);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    sub_236822328((_QWORD *)(a1 + 704), v9 >> 4);
    v10 = *(char **)(a1 + 712);
    memmove(v10, v7, v9);
    *(_QWORD *)(a1 + 712) = &v10[16 * (v9 >> 4)];
  }
  v11 = (_BYTE *)(a1 + 728);
  if (*(char *)(a2 + 751) < 0)
  {
    sub_2367E9280(v11, *(void **)(a2 + 728), *(_QWORD *)(a2 + 736));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
    *(_OWORD *)v11 = v12;
  }
  v13 = *(_OWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = v13;
  return a1;
}

void sub_236867BE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 712) = v5;
    operator delete(v5);
  }
  sub_236816F38(v2);
  _Unwind_Resume(a1);
}

__n128 sub_236867C0C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 72) = &off_2507FFD98;
  v5 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v6 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v6;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v8 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v8;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v9 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v9;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v10 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v10;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  return result;
}

double sub_236867DDC(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(_OWORD *)(a2 + 104);
  v4 = *(_OWORD *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  *(_OWORD *)(a1 + 104) = v3;
  v6 = *(_OWORD *)(a2 + 168);
  v7 = *(_OWORD *)(a2 + 184);
  v8 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 200) = v8;
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  v11 = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = v11;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = 0u;
  v12 = *(_OWORD *)(a2 + 256);
  v13 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  v14 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v14;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  *(_OWORD *)(a2 + 312) = 0u;
  v15 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 341) = *(_QWORD *)(a2 + 341);
  *(_QWORD *)(a1 + 336) = v15;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  v16 = *(_OWORD *)(a2 + 360);
  v17 = *(_OWORD *)(a2 + 376);
  v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 401) = *(_OWORD *)(a2 + 401);
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 360) = v16;
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  v19 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v19;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_OWORD *)(a2 + 424) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  v20 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v20;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = 0;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a2 + 616) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  v21 = *(_OWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v21;
  v22 = *(_OWORD *)(a2 + 648);
  v23 = *(_OWORD *)(a2 + 664);
  v24 = *(_OWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 664) = v23;
  *(_OWORD *)(a1 + 680) = v24;
  *(_OWORD *)(a1 + 648) = v22;
  *(_QWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a2 + 720) = 0;
  *(_OWORD *)(a2 + 704) = 0u;
  v25 = *(_OWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = v25;
  *(_QWORD *)(a2 + 728) = 0;
  *(_OWORD *)(a2 + 736) = 0u;
  v26 = *(_OWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = v26;
  v27 = *(_OWORD *)(a2 + 792);
  v28 = *(_OWORD *)(a2 + 808);
  v29 = *(_OWORD *)(a2 + 824);
  *(_BYTE *)(a1 + 840) = *(_BYTE *)(a2 + 840);
  *(_OWORD *)(a1 + 808) = v28;
  *(_OWORD *)(a1 + 824) = v29;
  *(_OWORD *)(a1 + 792) = v27;
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
  *(_QWORD *)(a1 + 848) = &off_2507FFD98;
  v30 = *(_QWORD *)(a2 + 856);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 856) = v30;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a2 + 888) = 0;
  *(_OWORD *)(a2 + 872) = 0u;
  *(_QWORD *)(a1 + 912) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a2 + 912) = 0;
  *(_OWORD *)(a2 + 896) = 0u;
  *(_QWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_QWORD *)(a2 + 936) = 0;
  *(_OWORD *)(a2 + 920) = 0u;
  *(_QWORD *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a2 + 960) = 0;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_QWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  *(_OWORD *)(a2 + 968) = 0u;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a2 + 1008) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a2 + 1032) = 0;
  *(_OWORD *)(a2 + 1016) = 0u;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(a2 + 1104) = 0;
  *(_OWORD *)(a2 + 1088) = 0u;
  *(_BYTE *)(a1 + 1112) = *(_BYTE *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a2 + 1136) = 0;
  *(_OWORD *)(a2 + 1120) = 0u;
  *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
  *(_QWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a2 + 1168) = 0;
  *(_OWORD *)(a2 + 1152) = 0u;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a2 + 1176);
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a2 + 1192) = 0;
  *(_OWORD *)(a2 + 1176) = 0u;
  return result;
}

uint64_t sub_2368682F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 1176);
  if (v2)
  {
    *(_QWORD *)(a1 + 1184) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 1152);
  sub_23683E57C(&v5);
  sub_2368284CC(a1 + 848);
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  v3 = *(void **)(a1 + 704);
  if (v3)
  {
    *(_QWORD *)(a1 + 712) = v3;
    operator delete(v3);
  }
  sub_236816F38(a1 + 8);
  return a1;
}

void sub_236868370(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2367C8698(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

_QWORD *sub_236868398(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  _QWORD v32[5];

  v4 = *a2;
  if (a1[8])
  {
    *(_BYTE *)(v4 + 76) = 1;
    *(_DWORD *)(v4 + 8) = 0;
    v5 = *(_BYTE **)(v4 + 16);
    v6 = *(_BYTE **)(v4 + 24);
    if (v5 != v6)
      bzero(v5, (v6 - v5) & 0xFFFFFFFFFFFFFFFCLL);
    *(_DWORD *)(v4 + 72) = 1;
  }
  v7 = *(_QWORD *)a1;
  v26 = 0;
  v27 = v7;
  v28 = 0;
  v29 = v7;
  v30 = 0;
  v31 = sub_236893124;
  *a2 = 0;
  sub_2368611E8(&v26, v4);
  v8 = a2[1];
  v27 = v8;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD **)(*(_QWORD *)a1 + 88);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  if ((unint64_t)v10 >= v11)
  {
    v15 = *(_QWORD *)(v9 + 80);
    v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v15) >> 4);
    v17 = v16 + 1;
    if (v16 + 1 > 0x555555555555555)
      sub_2367C3440();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v15) >> 4);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x2AAAAAAAAAAAAAALL)
      v19 = 0x555555555555555;
    else
      v19 = v17;
    v32[4] = *(_QWORD *)a1 + 96;
    v20 = (char *)sub_23682821C(v19);
    v21 = &v20[48 * v16];
    v32[0] = v20;
    v32[1] = v21;
    v32[3] = &v20[48 * v22];
    v23 = v26;
    v26 = 0;
    *(_QWORD *)v21 = v23;
    *((_QWORD *)v21 + 1) = v8;
    v24 = v28;
    v28 = 0;
    *((_QWORD *)v21 + 2) = v24;
    *((_QWORD *)v21 + 3) = v29;
    *((_QWORD *)v21 + 4) = v30;
    *((_QWORD *)v21 + 5) = v31;
    v32[2] = v21 + 48;
    sub_2368687C0((_QWORD *)(v9 + 80), v32);
    v14 = *(_QWORD **)(v9 + 88);
    sub_23686884C((uint64_t)v32);
  }
  else
  {
    v12 = v26;
    v26 = 0;
    *v10 = v12;
    v10[1] = v8;
    v13 = v28;
    v28 = 0;
    v10[2] = v13;
    v10[3] = v29;
    v10[4] = v30;
    v10[5] = v31;
    v14 = v10 + 6;
  }
  *(_QWORD *)(v9 + 88) = v14;
  ++*(_QWORD *)(*(_QWORD *)a1 + 64);
  v30 = 0;
  sub_2368612B8(&v28, 0);
  return sub_2368611E8(&v26, 0);
}

void sub_236868584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_236868898((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236868598(uint64_t a1)
{
  void *v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v11;

  v11 = (void **)(a1 + 2224);
  sub_2368686B4(&v11);
  v11 = (void **)(a1 + 2192);
  sub_2367D077C(&v11);
  *(_QWORD *)(a1 + 1992) = &off_2507FFA18;
  v2 = *(void **)(a1 + 2024);
  if (v2)
  {
    *(_QWORD *)(a1 + 2032) = v2;
    operator delete(v2);
  }
  for (i = 1976; i != 1856; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  if (*(char *)(a1 + 1863) < 0)
    operator delete(*(void **)(a1 + 1840));
  v4 = *(_QWORD *)(a1 + 1776);
  *(_QWORD *)(a1 + 1776) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 96) = &off_2507FFA40;
  v11 = (void **)(a1 + 424);
  sub_2367E8DB8(&v11);
  *(_QWORD *)(a1 + 144) = &off_2507FFA18;
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_2368686B4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 448;
        sub_236868724(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_236868724(uint64_t a1)
{
  void *v2;
  uint64_t i;
  uint64_t result;
  void **v5;

  v5 = (void **)(a1 + 416);
  sub_2367D077C(&v5);
  *(_QWORD *)(a1 + 216) = &off_2507FFA18;
  v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v2);
  }
  for (i = 200; i != 80; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  result = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_2368687C0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = (_QWORD *)a2[1];
  while (v2 != v3)
  {
    v5 = *(v2 - 6);
    v2 -= 6;
    *v2 = 0;
    *(v4 - 6) = v5;
    v4 -= 6;
    v4[1] = v2[1];
    v6 = v2[2];
    v2[2] = 0;
    v4[2] = v6;
    v4[3] = v2[3];
    v7 = v2[4];
    v2[4] = 0;
    v4[4] = v7;
    v4[5] = v2[5];
  }
  a2[1] = v4;
  v8 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_23686884C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_236860F38(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_236868898(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 40))();
  sub_2368612B8((_QWORD *)(a1 + 16), 0);
  sub_2368611E8((_QWORD *)a1, 0);
  return a1;
}

void sub_2368688E8(uint64_t *a1, char **a2, char **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char **v15;
  char **v16;
  char **v17;
  char **v18;
  char *v19;
  char *v20;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = (char **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      sub_2367D1824(a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3440();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    sub_2367E25B8(a1, v13);
    v14 = sub_236828390(v9, (uint64_t)a2, (uint64_t)a3, (_QWORD *)a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 3) < a4)
  {
    v15 = &a2[(a1[1] - (uint64_t)v10) >> 3];
    sub_236868DA8(a2, v15, v10);
    v14 = sub_236828390(v9, (uint64_t)v15, (uint64_t)a3, (_QWORD *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v14;
    return;
  }
  v16 = sub_236868DA8(a2, a3, v10);
  v17 = (char **)a1[1];
  if (v17 != v16)
  {
    v18 = (char **)a1[1];
    do
    {
      v20 = *(v18 - 3);
      v18 -= 3;
      v19 = v20;
      if (v20)
      {
        *(v17 - 2) = v19;
        operator delete(v19);
      }
      v17 = v18;
    }
    while (v18 != v16);
  }
  a1[1] = (uint64_t)v16;
}

void sub_236868A58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_236868A60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_236868A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  char *v26;
  uint64_t v30;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = a2;
    v5 = 0;
    v6 = a3;
    v30 = a1;
    do
    {
      v7 = a1 + v5;
      v8 = v3 + v5;
      *(_OWORD *)v8 = *(_OWORD *)(a1 + v5);
      v9 = *(_OWORD *)(a1 + v5 + 16);
      v10 = *(_OWORD *)(a1 + v5 + 32);
      v11 = *(_OWORD *)(a1 + v5 + 48);
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(a1 + v5 + 64);
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 16) = v9;
      if (a1 != v3)
      {
        sub_2367D4108((char *)(v8 + 72), *(char **)(v7 + 72), *(_QWORD *)(v7 + 80), (uint64_t)(*(_QWORD *)(v7 + 80) - *(_QWORD *)(v7 + 72)) >> 2);
        v14 = *(char **)(v8 + 96);
        v13 = (_QWORD *)(v8 + 96);
        v12 = v14;
        v15 = *(char **)(v7 + 96);
        v16 = *(_BYTE **)(v7 + 104);
        v17 = v16 - v15;
        v18 = (v16 - v15) >> 3;
        v19 = v13[2];
        if (v18 <= (v19 - (uint64_t)v14) >> 3)
        {
          v22 = (void **)(v6 + 104);
          v23 = v3 + v5;
          v24 = *(_BYTE **)(v23 + 104);
          v25 = (v24 - v12) >> 3;
          if (v25 >= v18)
          {
            if (v16 != v15)
              memmove(v12, v15, v16 - v15);
            v3 = a3;
          }
          else
          {
            if (v24 != v12)
            {
              memmove(v12, v15, v24 - v12);
              v12 = *(char **)(v23 + 104);
            }
            v3 = a3;
            v26 = &v15[8 * v25];
            v17 = v16 - v26;
            if (v16 != v26)
              memmove(v12, v26, v16 - v26);
          }
          v4 = a2;
        }
        else
        {
          if (v12)
          {
            *(_QWORD *)(v3 + v5 + 104) = v12;
            operator delete(v12);
            v19 = 0;
            *v13 = 0;
            v13[1] = 0;
            v13[2] = 0;
          }
          if (v17 < 0)
            sub_2367C3440();
          v20 = v19 >> 2;
          if (v19 >> 2 <= v18)
            v20 = (v16 - v15) >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          sub_2367DBF48(v13, v21);
          v22 = (void **)(v3 + v5 + 104);
          v12 = (char *)*v22;
          if (v16 != v15)
            memmove(*(void **)(v3 + v5 + 104), v15, v16 - v15);
        }
        a1 = v30;
        *v22 = &v12[v17];
      }
      v6 += 120;
      v5 += 120;
    }
    while (a1 + v5 != v4);
    v3 += v5;
  }
  return v3;
}

uint64_t sub_236868C38(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      if (v5 != (__int128 *)a3)
        sub_236868CAC((char *)(a3 + 24), *((char **)v5 + 3), *((_QWORD *)v5 + 4), (uint64_t)(*((_QWORD *)v5 + 4) - *((_QWORD *)v5 + 3)) >> 1);
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

char *sub_236868CAC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_2367C3440();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_2368281E4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

char **sub_236868DA8(char **a1, char **a2, char **a3)
{
  char **v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (v5 != a3)
        sub_2367C9C54(a3, *v5, v5[1], v5[1] - *v5);
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_236868E08(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v3[5];

  if (result[2] == *result)
  {
    v1 = result;
    v2 = result[1] - *result;
    v3[4] = result + 2;
    v3[0] = operator new(0x1C0uLL);
    v3[1] = v3[0] + v2;
    v3[2] = v3[0] + v2;
    v3[3] = v3[0] + 448;
    sub_236869004(v1, v3);
    return (uint64_t *)sub_236869088((uint64_t)v3);
  }
  return result;
}

uint64_t sub_236868E78(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 6);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x92492492492492)
    sub_2367C3440();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 6) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 6);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 6)) >= 0x49249249249249)
    v6 = 0x92492492492492;
  else
    v6 = v3;
  v14 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x92492492492492)
      sub_2367C3488();
    v7 = (char *)operator new(448 * v6);
  }
  else
  {
    v7 = 0;
  }
  v10 = v7;
  v11 = &v7[448 * v2];
  v13 = &v7[448 * v6];
  sub_2367D050C((uint64_t)v11, a2);
  v12 = v11 + 448;
  sub_236869004(a1, &v10);
  v8 = a1[1];
  sub_236869088((uint64_t)&v10);
  return v8;
}

void sub_236868F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_236869088((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236868FA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_236869004(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (uint64_t *)*a1;
  v4 = (uint64_t *)a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 56;
    result = sub_236816AE8(result - 448, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_236869088(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 448;
    sub_236868724(i - 448);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t JxlEncoderUseBoxes(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 2864))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 298) = 1;
  }
  return result;
}

uint64_t JxlEncoderAddImageFrame(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  _OWORD v14[4];
  char v15;
  _QWORD v16[2];
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[4];
  char v47;
  _QWORD v48[2];
  int v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  __int128 v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;

  v76 = 0;
  v77 = 0;
  if (sub_23686706C(a1, &v77, (unint64_t *)&v76))
  {
    v8 = *a1;
    v9 = 1;
    *(_DWORD *)(v8 + 2852) = 1;
  }
  else
  {
    v11 = v76;
    v10 = v77;
    sub_23683E3AC((uint64_t)v46, v77, v76, *(unsigned int *)(*a1 + 624));
    v44 = *(_OWORD *)a2;
    v45 = *(_QWORD *)(a2 + 16);
    if ((sub_23683E4B4((uint64_t *)v46, 0, a3, a4, &v44) & 1) != 0)
    {
      v14[2] = v46[2];
      v14[3] = v46[3];
      v15 = v47;
      v14[0] = v46[0];
      v14[1] = v46[1];
      v16[0] = &off_2507FFD98;
      v16[1] = v48[1];
      v17 = v49;
      v18 = v50;
      v19 = v51;
      v50 = 0uLL;
      v20 = v52;
      v21 = v53;
      v51 = 0;
      v52 = 0uLL;
      v53 = 0;
      v22 = v54;
      v54 = 0uLL;
      v24 = v56;
      v23 = v55;
      v25 = v57;
      v55 = 0;
      v56 = 0uLL;
      v57 = 0;
      v26 = v58;
      v58 = 0uLL;
      v28 = v60;
      v27 = v59;
      v29 = v61;
      v59 = 0;
      v60 = 0uLL;
      v61 = 0;
      v30 = v62;
      v62 = 0uLL;
      v31 = v63;
      v32 = v64;
      v63 = 0;
      v64 = 0;
      v12 = v65;
      v65 = 0uLL;
      v33 = v12;
      v34 = v66;
      v66 = 0uLL;
      v35 = v67;
      v36 = v68;
      v37 = v69;
      v67 = 0;
      v68 = 0;
      v69 = 0uLL;
      v38 = v70;
      v39 = v71;
      v40 = v72;
      v71 = 0;
      v72 = 0uLL;
      v41 = v73;
      v42 = v74;
      v43 = v75;
      v74 = 0;
      v75 = 0uLL;
      v9 = sub_2368693D0(a1, v10, v11, 0, (uint64_t)v14);
      v78 = (void **)&v42;
      sub_23683E57C(&v78);
      sub_2368284CC((uint64_t)v16);
    }
    else
    {
      *(_DWORD *)(*a1 + 2852) = 129;
      v9 = 1;
    }
    v78 = (void **)&v74;
    sub_23683E57C(&v78);
    sub_2368284CC((uint64_t)v48);
  }
  return v9;
}

void sub_2368693AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_23683E5F4((uint64_t)&a9);
  sub_23683E5F4((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_2368693D0(_BYTE *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  unsigned int v10;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64_t i;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  BOOL v25;
  _BOOL4 v26;
  _BOOL4 v27;
  __int128 v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  char *v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  _BYTE *v54;
  _BYTE *v55;
  char v56;
  char *v57;
  _BYTE *v58;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  void *__p;
  void *v65;
  _OWORD v66[26];
  uint64_t v67;
  uint64_t v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = 0;
  v72 = xmmword_236923900;
  if (*(_BYTE *)(a5 + 64))
    (*(void (**)(_QWORD, __int128 *))(a5 + 24))(*(_QWORD *)(a5 + 16), &v72);
  else
    sub_236831CCC(a5, (__n128 *)&v72);
  v10 = v72;
  v12 = v72 == 2 || v72 == 4;
  v13 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 2867) || *(_BYTE *)(v13 + 2865))
    goto LABEL_12;
  v16 = *(_DWORD *)(v13 + 2700);
  if (v72 > 2)
  {
    if (v16 == 3)
      goto LABEL_18;
LABEL_12:
    *(_DWORD *)(v13 + 2852) = 129;
    return 1;
  }
  if (v16 != 1)
    goto LABEL_12;
LABEL_18:
  if (a1[8] && *(_BYTE *)(v13 + 345))
    goto LABEL_12;
  v17 = *(_DWORD *)(v13 + 624);
  if (v12 && v17 == 0)
    goto LABEL_12;
  for (i = *(_QWORD *)(v13 + 632); ; i += 96)
  {
    if (i == *(_QWORD *)(v13 + 640))
    {
      v20 = 0;
      if (!a1[8])
        goto LABEL_66;
      goto LABEL_31;
    }
    if (!*(_DWORD *)(i + 12))
      break;
  }
  v20 = *(_DWORD *)(i + 28) != 0;
  if (!a1[8])
    goto LABEL_66;
LABEL_31:
  if (!a1[772] && !*((_DWORD *)a1 + 168) && !*(_BYTE *)(v13 + 557) && *((_DWORD *)a1 + 16) == 9)
  {
    v21 = *((_DWORD *)a1 + 190);
    if (v21)
    {
      if (v21 == 2 && *((_DWORD *)a1 + 191) != *(_DWORD *)(v13 + 332))
        goto LABEL_66;
    }
    else if ((a1[764] & 7) != 0)
    {
      goto LABEL_66;
    }
    if ((char)a1[759] < 0)
      v22 = *((_QWORD *)a1 + 93);
    else
      v22 = a1[759];
    if (!v22)
    {
      v23 = v17 == 1 && v20;
      if (v23 || !v17)
      {
        v24 = *(unsigned int *)(v13 + 332);
        if (v24 <= 0x10 && DWORD1(v72) <= 5 && ((1 << SBYTE4(v72)) & 0x2C) != 0)
        {
          v25 = DWORD1(v72) == 3 || DWORD1(v72) == 5;
          v26 = v25;
          if (v24 < 9 != v26)
          {
            switch((int)v72)
            {
              case 1:
              case 3:
                if ((_DWORD)v72 == 2)
                  LOBYTE(v20) = 0;
                if (v20)
                  goto LABEL_66;
                break;
              case 2:
              case 4:
                if (!v20)
                  goto LABEL_66;
                break;
              default:
                goto LABEL_66;
            }
            v27 = *(_BYTE *)(a5 + 64) == 0;
            if (*(_BYTE *)(a5 + 64))
            {
              v28 = *(_OWORD *)(a5 + 32);
              v69 = *(_OWORD *)(a5 + 16);
              v70 = v28;
              v71 = *(_OWORD *)(a5 + 48);
            }
            else
            {
              *(_QWORD *)&v69 = a5;
              *((_QWORD *)&v69 + 1) = sub_236831CCC;
              *(_QWORD *)&v70 = sub_236831CE4;
              *((_QWORD *)&v70 + 1) = sub_236831D10;
              *(_QWORD *)&v71 = sub_236831D30;
              *((_QWORD *)&v71 + 1) = nullsub_27;
            }
            v61 = sub_236893274(&v69, a2, a3, v72, v24, DWORD2(v72) == 2, v27);
            v62 = v61;
            if ((a4 & 1) == 0)
              sub_2368A09B0(v61, 0, *(_QWORD *)(*(_QWORD *)a1 + 24), (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))sub_2368699E4, 0);
            sub_236869A28((uint64_t)a1, v62);
            return 0;
          }
        }
      }
    }
  }
LABEL_66:
  if ((a4 & 1) == 0)
  {
    v29 = sub_236869B98((_QWORD *)a5);
    v13 = *(_QWORD *)a1;
    if ((v29 & 1) == 0)
      goto LABEL_12;
  }
  if (!*(_BYTE *)(v13 + 2868))
  {
    sub_2367CA390((uint64_t)v63);
    if (DWORD1(v72) != 5 && DWORD1(v72))
      v30 = sub_2367CA534(v10 < 3);
    else
      v30 = sub_2367CA62C(v10 < 3);
    sub_2367F0B6C((uint64_t)v63, (uint64_t)v30);
    sub_2367F0B6C(*(_QWORD *)a1 + 352, (uint64_t)v63);
    v63[0] = &off_2507FFA18;
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
    v13 = *(_QWORD *)a1;
  }
  sub_236867AE8((uint64_t)v63, (uint64_t)(a1 + 8));
  sub_236867C0C((uint64_t)v66, a5);
  v66[25] = 0u;
  v67 = 0;
  v31 = (*(uint64_t (**)(_QWORD, uint64_t))(v13 + 8))(*(_QWORD *)v13, 1200);
  v32 = v31;
  if (v31)
    sub_236867DDC(v31, (uint64_t)v63);
  v68[0] = v32;
  v68[1] = v13;
  sub_2368682F8((uint64_t)v63);
  v33 = *(_QWORD *)a1;
  if (!v32)
  {
    v14 = 1;
    *(_DWORD *)(v33 + 2852) = 1;
    goto LABEL_122;
  }
  v34 = *(_QWORD *)(v33 + 632);
  v35 = *(_QWORD *)(v33 + 640);
  if (v34 == v35)
    goto LABEL_120;
  do
  {
    v36 = (_QWORD *)v68[0];
    v37 = *(_BYTE **)(v68[0] + 1184);
    v38 = *(_QWORD *)(v68[0] + 1192);
    if (!v12 || *(_DWORD *)(v34 + 12))
    {
      if ((unint64_t)v37 < v38)
      {
        *v37 = 0;
        v39 = v37 + 1;
        goto LABEL_86;
      }
      v41 = *(_QWORD *)(v68[0] + 1176);
      v42 = &v37[-v41];
      v43 = (uint64_t)&v37[-v41 + 1];
      if (v43 < 0)
        sub_2367C3440();
      v44 = v38 - v41;
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
        v45 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
        v46 = (char *)operator new(v45);
      else
        v46 = 0;
      v53 = &v42[(_QWORD)v46];
      v54 = &v42[(_QWORD)v46];
      *v54 = 0;
      v40 = v54 + 1;
      if (v37 != (_BYTE *)v41)
      {
        v55 = &v37[~v41];
        do
        {
          v56 = *--v37;
          (v55--)[(_QWORD)v46] = v56;
        }
        while (v37 != (_BYTE *)v41);
        v37 = (_BYTE *)v36[147];
        v53 = v46;
      }
      v36[147] = v53;
      v36[148] = v40;
      v36[149] = &v46[v45];
      if (v37)
        operator delete(v37);
    }
    else
    {
      if ((unint64_t)v37 < v38)
      {
        v12 = 0;
        *v37 = 1;
        v39 = v37 + 1;
LABEL_86:
        v40 = v39;
        goto LABEL_118;
      }
      v47 = *(_QWORD *)(v68[0] + 1176);
      v48 = &v37[-v47];
      v49 = (uint64_t)&v37[-v47 + 1];
      if (v49 < 0)
        sub_2367C3440();
      v50 = v38 - v47;
      if (2 * v50 > v49)
        v49 = 2 * v50;
      if (v50 >= 0x3FFFFFFFFFFFFFFFLL)
        v51 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
        v52 = (char *)operator new(v51);
      else
        v52 = 0;
      v57 = &v48[(_QWORD)v52];
      v58 = &v48[(_QWORD)v52];
      *v58 = 1;
      v40 = v58 + 1;
      if (v37 != (_BYTE *)v47)
      {
        v59 = &v37[~v47];
        do
        {
          v60 = *--v37;
          (v59--)[(_QWORD)v52] = v60;
        }
        while (v37 != (_BYTE *)v47);
        v37 = (_BYTE *)v36[147];
        v57 = v52;
      }
      v36[147] = v57;
      v36[148] = v40;
      v36[149] = &v52[v51];
      if (v37)
        operator delete(v37);
      v12 = 0;
    }
LABEL_118:
    v36[148] = v40;
    v34 += 96;
  }
  while (v34 != v35);
  v33 = *(_QWORD *)a1;
  v32 = v68[0];
LABEL_120:
  *(_DWORD *)(v32 + 408) = *(_DWORD *)(v33 + 300);
  sub_236868398(a1, v68);
  v14 = 0;
LABEL_122:
  sub_2368611E8(v68, 0);
  return v14;
}

void sub_236869990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;

  sub_2368611E8((_QWORD *)(v14 - 176), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2368699E4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v6 = a3;
  v7 = a2;
  v5[0] = &v6;
  v5[1] = &v7;
  if (!a1)
  {
    v8[0] = 0;
    v8[1] = v8;
    a1 = v8;
  }
  return sub_23686A074((uint64_t)a1, a4, (uint64_t)v5);
}

_QWORD *sub_236869A28(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  _QWORD v21[5];

  v4 = *(_QWORD **)a1;
  v17[0] = 0;
  v17[1] = v4;
  v18[0] = 0;
  v18[1] = v4;
  v19 = a2;
  v20 = sub_236893124;
  v5 = (_QWORD *)v4[11];
  v6 = v4[12];
  if ((unint64_t)v5 >= v6)
  {
    v8 = v4[10];
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v8) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      sub_2367C3440();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    v21[4] = v4 + 12;
    v13 = (char *)sub_23682821C(v12);
    v14 = &v13[48 * v9];
    v21[0] = v13;
    v21[1] = v14;
    v21[3] = &v13[48 * v15];
    v17[0] = 0;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = v4;
    v18[0] = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = v4;
    *((_QWORD *)v14 + 4) = a2;
    *((_QWORD *)v14 + 5) = sub_236893124;
    v21[2] = v14 + 48;
    sub_2368687C0(v4 + 10, v21);
    v7 = (_QWORD *)v4[11];
    sub_23686884C((uint64_t)v21);
  }
  else
  {
    *v5 = 0;
    v5[1] = v4;
    v5[2] = 0;
    v5[3] = v4;
    v7 = v5 + 6;
    v5[4] = a2;
    v5[5] = sub_236893124;
  }
  v4[11] = v7;
  ++*(_QWORD *)(*(_QWORD *)a1 + 64);
  v19 = 0;
  sub_2368612B8(v18, 0);
  return sub_2368611E8(v17, 0);
}

void sub_236869B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_236868898((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_236869B98(_QWORD *a1)
{
  char *v2;
  uint64_t (***v3)();
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (***v9)();
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  _BYTE v21[32];
  uint64_t (**v22)();
  _QWORD *v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a1 + 64))
  {
    sub_23683E69C(a1[47]);
    return 1;
  }
  v19 = 0;
  v18 = xmmword_236923900;
  ((void (*)(_QWORD, __int128 *))a1[3])(a1[2], &v18);
  v17 = 0;
  v2 = (char *)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *))a1[4])(a1[2], 0, 0, *a1, a1[1], &v17);
  v22 = &off_250800970;
  v23 = a1 + 2;
  v24 = &v22;
  v20 = v2;
  sub_23683CE10((uint64_t)v21, (uint64_t)&v22);
  v3 = v24;
  if (v24 == &v22)
  {
    v4 = 4;
    v3 = &v22;
  }
  else
  {
    if (!v24)
      goto LABEL_8;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_8:
  if (v20)
  {
    v5 = (_QWORD *)a1[47];
    v15 = v18;
    v16 = v19;
    sub_236869E34(v5, v20, &v15, *a1, a1[1], v17);
    sub_23683CE74((uint64_t *)&v20);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 5) >= 2)
    {
      v6 = 1;
      v7 = 96;
      while (1)
      {
        ((void (*)(_QWORD, unint64_t, __int128 *))a1[5])(a1[2], v6 - 1, &v18);
        v8 = (char *)((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *))a1[6])(a1[2], v6 - 1, 0, 0, *a1, a1[1], &v17);
        v22 = &off_2508009F0;
        v23 = a1 + 2;
        v24 = &v22;
        v20 = v8;
        sub_23683CE10((uint64_t)v21, (uint64_t)&v22);
        v9 = v24;
        if (v24 == &v22)
          break;
        if (v24)
        {
          v10 = 5;
LABEL_15:
          (*v9)[v10]();
        }
        if (v20)
        {
          v11 = (_QWORD *)(a1[47] + v7);
          v13 = v18;
          v14 = v19;
          sub_236869E34(v11, v20, &v13, *a1, a1[1], v17);
        }
        sub_23683CE74((uint64_t *)&v20);
        ++v6;
        v7 += 96;
        if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 5))
          goto LABEL_19;
      }
      v9 = &v22;
      v10 = 4;
      goto LABEL_15;
    }
LABEL_19:
    *((_BYTE *)a1 + 64) = 0;
    return 1;
  }
  sub_23683CE74((uint64_t *)&v20);
  return 0;
}

void sub_236869E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_23683CE74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_236869E34(_QWORD *a1, char *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  sub_23683E634((uint64_t)a1, (uint64_t)&v14, a4, a5);
  v10 = a1[9];
  *a1 = 0;
  v11 = a1[8] * a5;
  v12 = a1[10] - v10;
  if (v11 <= v12)
  {
    if (v11 < v12)
      a1[10] = v10 + v11;
  }
  else
  {
    sub_2367C8698(a1 + 9, v11 - v12);
  }
  if (a5)
  {
    v13 = 0;
    do
    {
      memcpy((void *)(a1[9] + a1[8] * v13++), a2, a1[8]);
      a2 += a6;
    }
    while (a5 != v13);
  }
}

void sub_236869EF8()
{
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_236869F0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2508009F0;
  result[1] = v3;
  return result;
}

uint64_t sub_236869F40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2508009F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_236869F5C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t sub_236869F70(uint64_t a1, uint64_t a2)
{
  if (sub_2367EF74C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3jxlL21GetExtraChannelBufferER26JxlChunkedFrameInputSourcemmmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_236869FA8()
{
  return &unk_250800A50;
}

void sub_236869FB8()
{
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_236869FCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250800970;
  result[1] = v3;
  return result;
}

uint64_t sub_23686A000(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250800970;
  a2[1] = v2;
  return result;
}

uint64_t sub_23686A01C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t sub_23686A030(uint64_t a1, uint64_t a2)
{
  if (sub_2367EF74C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3jxlL14GetColorBufferER26JxlChunkedFrameInputSourcemmmmPmEUlPKvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_23686A068()
{
  return &unk_2508009D0;
}

uint64_t sub_23686A074(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if ((_DWORD)a2)
  {
    v6[0] = sub_2367CAAA0;
    v6[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))result)(*(_QWORD *)(result + 8), v6, sub_23686A108, sub_23686A12C, 0, a2);
    }
    else
    {
      v4 = 0;
      v5 = a2;
      do
        result = (**(uint64_t (***)(_QWORD, uint64_t))a3)(**(_QWORD **)(a3 + 8), v4++);
      while (v5 != v4);
    }
  }
  return result;
}

uint64_t sub_23686A108(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_23686A12C(uint64_t a1, unsigned int a2)
{
  return (***(uint64_t (****)(_QWORD, _QWORD))(a1 + 8))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), a2);
}

uint64_t JxlEncoderAddChunkedFrame(uint64_t *a1, int a2, __int128 *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v23;
  _OWORD v24[4];
  char v25;
  _BYTE v26[304];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  _BYTE v35[304];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];
  char v40;
  void **v41[3];
  char v42;
  uint64_t v43;
  uint64_t v44;

  v38 = 0;
  v39[0] = 0;
  v6 = sub_23686706C(a1, v39, (unint64_t *)&v38);
  v7 = *a1;
  if (v6)
  {
    v8 = 1;
    *(_DWORD *)(v7 + 2852) = 1;
  }
  else
  {
    v23 = *(_QWORD *)(v7 + 176);
    v10 = v38;
    v9 = v39[0];
    sub_23683E3AC((uint64_t)&v30, v39[0], v38, *(unsigned int *)(v7 + 624));
    v11 = a3[1];
    v31 = *a3;
    v32 = v11;
    v33 = a3[2];
    v34 = 1;
    v25 = 1;
    v24[2] = v11;
    v24[3] = v33;
    v24[0] = v30;
    v24[1] = v31;
    sub_23682787C((uint64_t)v26, (uint64_t)v35);
    v26[296] = v35[296];
    v28 = 0;
    v29 = 0;
    v27 = 0;
    v12 = v36;
    v13 = v37;
    v39[1] = (uint64_t)&v27;
    v40 = 0;
    if (v37 != v36)
    {
      sub_23683E77C(&v27, 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 5));
      v43 = v28;
      v44 = v28;
      v41[0] = (void **)&v29;
      v41[1] = (void **)&v43;
      v41[2] = (void **)&v44;
      v42 = 0;
      v14 = v28;
      do
      {
        *(_OWORD *)v14 = *(_OWORD *)v12;
        v15 = *(_OWORD *)(v12 + 16);
        v16 = *(_OWORD *)(v12 + 32);
        v17 = *(_OWORD *)(v12 + 48);
        *(_QWORD *)(v14 + 64) = *(_QWORD *)(v12 + 64);
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v17;
        *(_OWORD *)(v14 + 16) = v15;
        *(_QWORD *)(v14 + 80) = 0;
        *(_QWORD *)(v14 + 88) = 0;
        *(_QWORD *)(v14 + 72) = 0;
        sub_2367C9F60((_QWORD *)(v14 + 72), *(const void **)(v12 + 72), *(_QWORD *)(v12 + 80), *(_QWORD *)(v12 + 80) - *(_QWORD *)(v12 + 72));
        v14 = v44 + 96;
        v44 += 96;
        v12 += 96;
      }
      while (v12 != v13);
      v42 = 1;
      sub_23686A468((uint64_t)v41);
      v28 = v14;
    }
    v18 = sub_2368693D0(a1, v9, v10, v23 != 0, (uint64_t)v24);
    v41[0] = (void **)&v27;
    sub_23683E57C(v41);
    sub_2368284CC((uint64_t)v26);
    if (v18)
    {
      v8 = 1;
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) - 48);
      if (v19)
      {
        v20 = *(_BYTE **)(v19 + 1176);
        v21 = *(_BYTE **)(v19 + 1184);
        if (v20 != v21)
          memset(v20, 1, v21 - v20);
      }
      if (a2)
        *(_WORD *)(*a1 + 2865) = 257;
      if (v23)
        v8 = JxlEncoderFlushInput(*a1);
      else
        v8 = 0;
    }
    v41[0] = (void **)&v36;
    sub_23683E57C(v41);
    sub_2368284CC((uint64_t)v35);
  }
  return v8;
}

void sub_23686A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_23683E5F4((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t JxlEncoderFlushInput(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 176))
  {
    while (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 88))
    {
      if (sub_23685D3B4(a1))
        return 1;
    }
    return 0;
  }
  else
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
}

uint64_t sub_23686A468(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 96;
    }
  }
  return a1;
}

uint64_t JxlEncoderCloseInput(uint64_t result)
{
  *(_WORD *)(result + 2865) = 257;
  return result;
}

uint64_t JxlEncoderSetExtraChannelBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  int v11;
  __int128 v12;
  int v13;

  v5 = *a1;
  if (*(_DWORD *)(*a1 + 624) > a5)
  {
    if (*(_BYTE *)(v5 + 2867))
    {
      if (*(_BYTE *)(v5 + 2868))
      {
        v6 = *(_QWORD *)(v5 + 88);
        if (*(_QWORD *)(v5 + 80) != v6 && !*(_BYTE *)(v5 + 2865))
        {
          v9 = *(_QWORD *)(v6 - 48);
          v11 = 1;
          v12 = *(_OWORD *)(a2 + 4);
          v13 = *(_DWORD *)(a2 + 20);
          if ((sub_23683E4B4((uint64_t *)(v9 + 776), a5 + 1, a3, a4, (__int128 *)&v11) & 1) != 0)
          {
            result = 0;
            *(_BYTE *)(*(_QWORD *)(v9 + 1176) + a5) = 1;
            return result;
          }
          v5 = *a1;
        }
      }
    }
  }
  *(_DWORD *)(v5 + 2852) = 129;
  return 1;
}

uint64_t JxlEncoderCloseFrames(uint64_t result)
{
  *(_BYTE *)(result + 2865) = 1;
  return result;
}

uint64_t JxlEncoderCloseBoxes(uint64_t result)
{
  *(_BYTE *)(result + 2866) = 1;
  return result;
}

uint64_t JxlEncoderSetOutputProcessor(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 136) && *((_QWORD *)a2 + 4) && *((_QWORD *)a2 + 1) && *((_QWORD *)a2 + 2))
  {
    v12 = *a2;
    v13 = a2[1];
    v14 = *((_QWORD *)a2 + 4);
    v15 = 0;
    v16 = 0;
    v17 = 0u;
    memset(v18, 0, 26);
    v4 = operator new();
    *(_OWORD *)v4 = v12;
    *(_OWORD *)(v4 + 16) = v13;
    *(_QWORD *)(v4 + 32) = v14;
    v19 = v4;
    v5 = a1 + 112;
    sub_23683DB18(*(_QWORD **)(a1 + 112));
    v6 = v15;
    *(_QWORD *)(a1 + 104) = &v15;
    *(_QWORD *)(a1 + 112) = v6;
    v7 = v16;
    *(_QWORD *)(a1 + 120) = v16;
    if (v7)
    {
      v6[2] = v5;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v5;
    }
    v8 = v18[0];
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 144) = v8;
    *(_OWORD *)(a1 + 154) = *(_OWORD *)((char *)v18 + 10);
    v9 = v19;
    v19 = 0;
    v10 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v9;
    if (v10)
    {
      MEMORY[0x23B7F8F48](v10, 0x80C402FCC0CB6);
      v11 = v19;
      v19 = 0;
      if (v11)
        MEMORY[0x23B7F8F48](v11, 0x80C402FCC0CB6);
    }
    sub_23683DB18(v15);
    return 0;
  }
  else
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
}

void sub_23686A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  sub_23683DB18(a16);
  _Unwind_Resume(a1);
}

uint64_t JxlEncoderProcessOutput(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 176))
  {
    *(_DWORD *)(a1 + 2852) = 129;
    return 1;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = a2;
    *(_QWORD *)(a1 + 136) = a3;
    sub_23685CD34(a1 + 104);
    while (1)
    {
      v5 = *(_QWORD *)(a1 + 80);
      v6 = *(_QWORD *)(a1 + 88);
      if (!*a3 || v5 == v6)
        break;
      if (sub_23685D3B4(a1))
        return 1;
    }
    if (v5 == v6)
      return 2 * (*(_QWORD *)(a1 + 160) < *(_QWORD *)(a1 + 152));
    else
      return 2;
  }
}

uint64_t JxlEncoderSetFrameHeader(uint64_t a1, __int128 *a2)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (*((_DWORD *)a2 + 10) < 4u)
  {
    v2 = *((unsigned int *)a2 + 11);
    if (!(_DWORD)v2
      || 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 640) - *(_QWORD *)(*(_QWORD *)a1 + 632)) >> 5) > v2)
    {
      v3 = *a2;
      v4 = a2[1];
      v5 = a2[2];
      *(_QWORD *)(a1 + 704) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 672) = v4;
      *(_OWORD *)(a1 + 688) = v5;
      *(_OWORD *)(a1 + 656) = v3;
      MEMORY[0x23B7F8E1C](a1 + 736, &unk_23692C0FD);
      return 0;
    }
    *(_DWORD *)(*(_QWORD *)a1 + 2852) = 129;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a1 + 2852) = 129;
  }
  return 1;
}

__n128 JxlEncoderSetExtraChannelBlendInfo(_QWORD *a1, unint64_t a2, __n128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 result;

  v3 = *(unsigned int *)(*a1 + 624);
  if (v3 <= a2)
  {
    *(_DWORD *)(*a1 + 2852) = 129;
  }
  else
  {
    v7 = (_QWORD *)a1[90];
    v8 = a1[89];
    v9 = (uint64_t)v7 - v8;
    if (v3 != ((uint64_t)v7 - v8) >> 4)
    {
      v10 = v9 >> 4;
      v11 = v3 >= v9 >> 4;
      v12 = v3 - (v9 >> 4);
      if (v12 != 0 && v11)
      {
        v13 = a1[91];
        if (v12 <= (v13 - (uint64_t)v7) >> 4)
        {
          v26 = &v7[2 * v12];
          v27 = 16 * v3 - 16 * v10;
          do
          {
            *v7 = 0;
            v7[1] = 0;
            v7 += 2;
            v27 -= 16;
          }
          while (v27);
          a1[90] = v26;
        }
        else
        {
          v14 = v13 - v8;
          v15 = (v13 - v8) >> 3;
          if (v15 <= v3)
            v15 = *(unsigned int *)(*a1 + 624);
          if (v14 >= 0x7FFFFFFFFFFFFFF0)
            v16 = 0xFFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          v17 = (char *)sub_2367CD8AC(v16);
          v19 = &v17[16 * v10];
          v20 = &v17[16 * v3];
          v21 = 16 * v3 - 16 * v10;
          v22 = v19;
          do
          {
            *(_OWORD *)v22 = 0uLL;
            v22 += 16;
            v21 -= 16;
          }
          while (v21);
          v23 = &v17[16 * v18];
          v24 = (char *)a1[90];
          v25 = (char *)a1[89];
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v24 - 1);
              v19 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            v24 = (char *)a1[89];
          }
          a1[89] = v19;
          a1[90] = v20;
          a1[91] = v23;
          if (v24)
            operator delete(v24);
        }
      }
      else if (!v11)
      {
        a1[90] = v8 + 16 * v3;
      }
      v8 = a1[89];
    }
    result = *a3;
    *(__n128 *)(v8 + 16 * a2) = *a3;
  }
  return result;
}

