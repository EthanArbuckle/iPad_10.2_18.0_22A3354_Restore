uint64_t JxlEncoderSetFrameName(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  std::string __str;

  if (!a2)
    a2 = (char *)&unk_23692C0FD;
  sub_2367C8810(&__str, a2);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0x430)
  {
    *(_DWORD *)(*(_QWORD *)a1 + 2852) = 129;
    v3 = 1;
LABEL_9:
    operator delete(__str.__r_.__value_.__l.__data_);
    return v3;
  }
  std::string::operator=((std::string *)(a1 + 736), &__str);
  v3 = 0;
  result = 0;
  v5 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  v6 = __str.__r_.__value_.__r.__words[1];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  *(_DWORD *)(a1 + 664) = v6;
  if (v5 < 0)
    goto LABEL_9;
  return result;
}

void sub_23686AA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t JxlEncoderSetFrameBitDepth(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  if (*(_DWORD *)a2 >= 2u)
  {
    sub_236861280("%s:%d: Only JXL_BIT_DEPTH_FROM_PIXEL_FORMAT and JXL_BIT_DEPTH_FROM_CODESTREAM is implemented for input buffers.\n", "/Library/Caches/com.apple.xbs/Sources/AppleJPEGXL/lib/jxl/encode.cc", 2598);
    return 1;
  }
  else
  {
    result = 0;
    v4 = *a2;
    *(_DWORD *)(a1 + 768) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 760) = v4;
  }
  return result;
}

__n128 JxlColorEncodingSetToSRGB(uint64_t a1, int a2)
{
  char *v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[6];
  uint64_t v8;

  v3 = sub_2367CA534(a2 != 0);
  sub_2367C5B34((uint64_t)v7, (uint64_t)(v3 + 16));
  v4 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = v8;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

__n128 JxlColorEncodingSetToLinearSRGB(uint64_t a1, int a2)
{
  char *v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[6];
  uint64_t v8;

  v3 = sub_2367CA62C(a2 != 0);
  sub_2367C5B34((uint64_t)v7, (uint64_t)(v3 + 16));
  v4 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = v8;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t JxlEncoderAllowExpertOptions(uint64_t result)
{
  *(_BYTE *)(result + 2870) = 1;
  return result;
}

uint64_t JxlEncoderSetDebugImageCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 640) = a2;
  *(_QWORD *)(result + 648) = a3;
  return result;
}

void JxlEncoderStatsCreate()
{
  void *v0;

  v0 = (void *)operator new();
  bzero(v0, 0x2C0uLL);
}

uint64_t JxlEncoderStatsDestroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x23B7F8F48);
  return result;
}

uint64_t JxlEncoderCollectStats(uint64_t result, uint64_t a2)
{
  if (a2)
    *(_QWORD *)(result + 776) = a2;
  return result;
}

uint64_t JxlEncoderStatsGet(uint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result = *(_QWORD *)(result + 24);
        break;
      case 1:
        result = *(_QWORD *)(result + 64);
        break;
      case 2:
        result = *(_QWORD *)(result + 104);
        break;
      case 3:
        result = *(_QWORD *)(result + 144);
        break;
      case 4:
        result = *(_QWORD *)(result + 184);
        break;
      case 5:
        result = *(_QWORD *)(result + 224);
        break;
      case 6:
        result = *(_QWORD *)(result + 264);
        break;
      case 7:
        result = *(_QWORD *)(result + 304);
        break;
      case 8:
        result = *(_QWORD *)(result + 344);
        break;
      case 9:
        result = *(_QWORD *)(result + 384);
        break;
      case 10:
        result = *(_QWORD *)(result + 424);
        break;
      case 11:
        result = *(_QWORD *)(result + 464);
        break;
      case 12:
        result = *(_QWORD *)(result + 504);
        break;
      case 13:
        result = *(_QWORD *)(result + 544);
        break;
      case 14:
        result = *(_QWORD *)(result + 584);
        break;
      case 15:
        result = *(_QWORD *)(result + 608);
        break;
      case 16:
        result = *(_QWORD *)(result + 616);
        break;
      case 17:
        result = *(_QWORD *)(result + 624);
        break;
      case 18:
        result = *(_QWORD *)(result + 632);
        break;
      case 19:
        result = *(_QWORD *)(result + 656);
        break;
      case 20:
        result = *(_QWORD *)(result + 664);
        break;
      case 21:
        result = *(_QWORD *)(result + 672);
        break;
      case 22:
      case 23:
        result = *(_QWORD *)(result + 680);
        break;
      case 24:
        result = *(_QWORD *)(result + 688);
        break;
      case 25:
        result = *(int *)(result + 696);
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

double JxlEncoderStatsMerge(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1)
  {
    if (a2)
      *(_QWORD *)&result = sub_2368ABFFC(a1, a2).u64[0];
  }
  return result;
}

void sub_23686ACEC(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  int64_t *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int64_t *v31;
  unsigned __int8 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned __int8 v41;
  char v42;
  uint64_t v43;
  int64_t *v44;
  unint64_t v45;
  int64_t *v46;
  int64_t *i;
  _BOOL4 v48;
  char *v49;
  int64_t v50;
  char *v51;
  void *v52;
  void *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int8 v68;
  char v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int64_t *__p;
  void *v83;
  void *__dst;
  uint64_t v85;
  unint64_t *v86;
  int v87;

  v83 = 0;
  __dst = 0;
  v85 = 0;
  v3 = (unsigned __int8 **)a1[3];
  v4 = (unsigned __int8 **)a1[4];
  if (v3 == v4)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
LABEL_74:
    v45 = 0;
    v46 = __p;
    for (i = __p + 3; ; i += 2)
    {
      v48 = v21 == v45;
      if (v21 == v45)
      {
        v7 = v20;
        goto LABEL_79;
      }
      ++v45;
      if (((*(_QWORD *)((char *)v20 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
        break;
      v49 = (char *)*(i - 1);
      v50 = *i;
      v51 = &v49[*i];
      sub_2367C9D5C((uint64_t)&v83, (char *)__dst, v49, v51, v50);
    }
    v48 = 0;
    goto LABEL_93;
  }
  __p = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0uLL;
  v11 = 1;
  while (1)
  {
    v13 = *v3;
    v12 = v3[1];
    if (*v3 == v12
      || *v13 != 226
      || (v14 = v12 - v13, v15 = (unint64_t)(v12 - v13) >= 3, v16 = v12 - v13 - 3, !v15)
      || ((v17 = __rev16(*(unsigned __int16 *)(v13 + 1)), v16 >= 0xC) ? (v18 = v17 == v14 - 1) : (v18 = 0),
          !v18
       || (*(_QWORD *)(v13 + 3) == 0x464F52505F434349 ? (v19 = *(_DWORD *)(v13 + 11) == 4541513) : (v19 = 0), !v19)))
    {
      v20 = v7;
      v21 = v8;
      goto LABEL_17;
    }
    if ((unint64_t)(v14 - 15) < 2 || (v22 = v13[15], ++v9, v9 != v22) || (v23 = v13[16]) == 0)
    {
LABEL_95:
      v48 = 0;
      goto LABEL_97;
    }
    v21 = v13[16];
    if ((v11 & 1) != 0)
    {
      v24 = v21 + 1;
      v25 = ((char *)v5 - (char *)__p) >> 4;
      if (v25 <= v21)
      {
        v26 = v24 - v25;
        if (v24 - v25 <= (v6 - (char *)v5) >> 4)
        {
          if (v24 != v25)
          {
            v72 = v10;
            v76 = v13[16];
            v79 = v6;
            v32 = v13[15];
            v66 = v26;
            bzero(v5, 16 * v26);
            v24 = v21 + 1;
            v23 = v76;
            v6 = v79;
            LOBYTE(v22) = v32;
            v10 = v72;
            v5 += 2 * v66;
          }
        }
        else
        {
          v65 = v24 - v25;
          v68 = v13[15];
          v75 = v13[16];
          v71 = v10;
          v27 = (v6 - (char *)__p) >> 3;
          if (v27 <= v24)
            v27 = v21 + 1;
          if ((unint64_t)(v6 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          if (v27 >> 60)
            sub_2367C3488();
          v78 = v27;
          v63 = (char *)operator new(16 * v27);
          v28 = &v63[16 * v25];
          bzero(v28, 16 * v65);
          v29 = v28;
          if (v5 == __p)
          {
            v31 = __p;
          }
          else
          {
            v30 = v28;
            v31 = __p;
            do
            {
              v28 = v30 - 16;
              *((_OWORD *)v30 - 1) = *((_OWORD *)v5 - 1);
              v5 -= 2;
              v30 -= 16;
            }
            while (v5 != __p);
          }
          v6 = &v63[16 * v78];
          v5 = (int64_t *)&v29[16 * v65];
          if (v31)
          {
            operator delete(v31);
            v6 = &v63[16 * v78];
          }
          __p = (int64_t *)v28;
          v10 = v71;
          LOBYTE(v22) = v68;
          v24 = v21 + 1;
          v23 = v75;
        }
      }
      else if (v24 < v25)
      {
        v5 = &__p[2 * v24];
      }
      v33 = v10;
      if ((unint64_t)v10 > v21)
      {
        *(_QWORD *)&v10 = v24;
        v20 = v7;
        goto LABEL_69;
      }
      v67 = v24 - v10;
      v34 = *((_QWORD *)&v10 + 1) << 6 < v24 - (unint64_t)v10
         || (unint64_t)v10 > (*((_QWORD *)&v10 + 1) << 6) - (v24 - (unint64_t)v10);
      v77 = v23;
      v80 = v6;
      if (!v34)
      {
        v36 = &v7[(unint64_t)v10 >> 6];
        LODWORD(v37) = v10 & 0x3F;
        *(_QWORD *)&v10 = v24;
        v20 = v7;
        goto LABEL_67;
      }
      v64 = v10;
      v69 = v22;
      v70 = v24;
      if (*((_QWORD *)&v10 + 1) << 6 > 0x3FFFFFFFFFFFFFFEuLL)
      {
        v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v35 = *((_QWORD *)&v10 + 1) << 7;
        if (*((_QWORD *)&v10 + 1) << 7 <= (unint64_t)(((_WORD)v21 + 64) & 0x1C0))
          v35 = ((_WORD)v21 + 64) & 0x1C0;
        if (!v35)
        {
          v20 = 0;
          *((_QWORD *)&v10 + 1) = 0;
          goto LABEL_60;
        }
        if (v35 < 0)
          sub_2367C3440();
      }
      v20 = sub_2367CA1FC(((unint64_t)(v35 - 1) >> 6) + 1);
      *((_QWORD *)&v10 + 1) = v38;
      *v20 = 0;
      v23 = v77;
      v6 = v80;
      LOBYTE(v22) = v69;
      v24 = v70;
      v33 = v64;
LABEL_60:
      *(_QWORD *)&v10 = v24;
      v36 = v20;
      v73 = v10;
      if (v33 < 1)
        goto LABEL_65;
      v39 = v33 >> 6;
      if ((unint64_t)(v33 + 63) >= 0x7F)
      {
        v61 = v33 >> 6;
        memmove(v20, v7, 8 * v39);
        v39 = v61;
        v33 = v64;
        LOBYTE(v22) = v69;
        v24 = v70;
        v23 = v77;
        v6 = v80;
        v10 = v73;
      }
      v37 = v33 - (v39 << 6);
      v36 = &v20[v39];
      if (v37 < 1)
      {
LABEL_65:
        LODWORD(v37) = 0;
        if (!v7)
          goto LABEL_67;
      }
      else
      {
        *v36 = *v36 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v39 << 6) - v33)) | v7[v39] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v39 << 6) - v33));
      }
      v60 = v37;
      v62 = v36;
      v40 = v7;
      v41 = v23;
      operator delete(v40);
      LODWORD(v37) = v60;
      v36 = v62;
      v33 = v64;
      LOBYTE(v22) = v69;
      v24 = v70;
      v23 = v41;
      v6 = v80;
      v10 = v73;
LABEL_67:
      if (v24 != v33)
      {
        v86 = v36;
        v87 = v37;
        v74 = v10;
        v42 = v22;
        sub_2367D0FB0((uint64_t)&v86, v67);
        v23 = v77;
        v6 = v80;
        LOBYTE(v22) = v42;
        v10 = v74;
      }
      goto LABEL_69;
    }
    if (v8 != v21)
      goto LABEL_95;
    v20 = v7;
    v21 = v8;
LABEL_69:
    if ((v22 - 1) >= v23)
      break;
    v43 = v20[v9 >> 6];
    if ((v43 & (1 << v9)) != 0)
    {
      v48 = 0;
      v46 = __p;
      goto LABEL_93;
    }
    v11 = 0;
    v20[v9 >> 6] = v43 | (1 << v9);
    v44 = &__p[2 * v9];
    *v44 = (int64_t)(v13 + 17);
    v44[1] = v14 - 17;
LABEL_17:
    v3 += 3;
    v7 = v20;
    v8 = v21;
    if (v3 == v4)
      goto LABEL_74;
  }
  v48 = 0;
  v7 = v20;
LABEL_97:
  v46 = __p;
LABEL_79:
  v20 = v7;
  if (v7)
  {
LABEL_93:
    operator delete(v20);
    if (v46)
      goto LABEL_81;
    goto LABEL_82;
  }
  if (!v46)
    goto LABEL_82;
LABEL_81:
  operator delete(v46);
LABEL_82:
  v52 = v83;
  if (!v48 || (v53 = __dst, v83 == __dst))
  {
    v55 = sub_2367CA534(a1[19] - a1[18] == 48);
    *(_WORD *)(a2 + 8) = *((_WORD *)v55 + 4);
    v56 = *((_QWORD *)v55 + 2);
    *(_QWORD *)(a2 + 21) = *(_QWORD *)(v55 + 21);
    *(_QWORD *)(a2 + 16) = v56;
    if (v55 != (char *)a2)
      sub_2367C9C54((_QWORD *)(a2 + 32), *((char **)v55 + 4), *((char **)v55 + 5), *((_QWORD *)v55 + 5) - *((_QWORD *)v55 + 4));
    v57 = *(_OWORD *)(v55 + 56);
    v58 = *(_OWORD *)(v55 + 72);
    v59 = *(_OWORD *)(v55 + 88);
    *(_DWORD *)(a2 + 104) = *((_DWORD *)v55 + 26);
    *(_OWORD *)(a2 + 88) = v59;
    *(_OWORD *)(a2 + 72) = v58;
    *(_OWORD *)(a2 + 56) = v57;
    *(_QWORD *)(a2 + 120) = *((_QWORD *)v55 + 15);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(v55 + 136);
    *(_QWORD *)(a2 + 160) = *((_QWORD *)v55 + 20);
    *(_QWORD *)(a2 + 176) = *((_QWORD *)v55 + 22);
    *(_QWORD *)(a2 + 192) = *((_QWORD *)v55 + 24);
    if (v52)
      operator delete(v52);
  }
  else
  {
    v54 = *(void **)(a2 + 32);
    if (v54)
    {
      *(_QWORD *)(a2 + 40) = v54;
      operator delete(v54);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    *(_QWORD *)(a2 + 32) = v52;
    *(_QWORD *)(a2 + 40) = v53;
    *(_QWORD *)(a2 + 48) = v85;
    *(_BYTE *)(a2 + 28) = 0;
    *(_BYTE *)(a2 + 9) = 1;
  }
}

void sub_23686B440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,void *a22)
{
  void *v22;

  if (v22)
    operator delete(v22);
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23686B498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  int *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE v14[3];
  _BYTE v15[3];
  _BYTE v16[3];
  _BYTE v17[3];

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  if ((v3 & 0xFFFFFFFFFFFFFFFDLL) != 1)
    return 1;
  if (v3 == 1)
  {
    v11 = 0;
    v12 = *(_DWORD *)(a1 + 4);
    v13 = *(_DWORD *)(a1 + 8);
    do
    {
      v15[v11] = v12;
      v14[v11++] = v13;
    }
    while (v11 != 3);
    v8 = v15;
    v9 = v14;
    return sub_23686B560(a3, (uint64_t)v8, (uint64_t)v9);
  }
  if (v3 == 3)
  {
    v5 = 0;
    v6 = (int *)(a1 + 8);
    do
    {
      v17[v5] = *(v6 - 1);
      v7 = *v6;
      v6 += 12;
      v16[v5++] = v7;
    }
    while (v5 != 3);
    v8 = v17;
    v9 = v16;
    return sub_23686B560(a3, (uint64_t)v8, (uint64_t)v9);
  }
  return 0;
}

uint64_t sub_23686B560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  for (i = 0; i != 3; ++i)
  {
    v4 = 0;
    v5 = i ^ 1;
    if (i == 2)
      v5 = 2;
    while (1 << byte_236923AD4[v4] != *(unsigned __int8 *)(a2 + v5)
         || 1 << byte_236923AD8[v4] != *(unsigned __int8 *)(a3 + v5))
    {
      if (++v4 == 4)
        return 1;
    }
    *(_DWORD *)(a1 + 4 * i + 8) = v4;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(unsigned int *)(a1 + 8 + v6);
    v10 = byte_236923AD4[v9];
    v11 = byte_236923AD8[v9];
    if (v7 <= v10)
      v7 = v10;
    if (v8 <= v11)
      v8 = v11;
    v6 += 4;
  }
  while (v6 != 12);
  v12 = 0;
  *(_BYTE *)(a1 + 20) = v7;
  *(_BYTE *)(a1 + 21) = v8;
  return v12;
}

uint64_t sub_23686B630(_QWORD *a1, int *a2)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  _BOOL4 v8;
  uint64_t result;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v18;

  v2 = (_DWORD *)a1[18];
  v3 = a1[19] - (_QWORD)v2;
  if (((0xAAAAAAAAAAAAAAABLL * (v3 >> 4)) & 0xFFFFFFFFFFFFFFFDLL) != 1)
    return 1;
  v4 = (unsigned __int8 *)a1[24];
  v5 = (unsigned __int8 *)a1[25];
  v6 = v5 - v4;
  if (v5 == v4)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_25;
  }
  v7 = (unsigned __int8 *)a1[24];
  while (*v7 != 224)
  {
    if (++v7 == v5)
    {
      v7 = (unsigned __int8 *)a1[25];
      break;
    }
  }
  if (v7 != v5)
  {
    v8 = 1;
    goto LABEL_32;
  }
  v10 = 0;
  v12 = 0;
  v13 = a1[3];
  if (v6 <= 1)
    v14 = 1;
  else
    v14 = v6;
  while (1)
  {
    v15 = v4[v10];
    if ((v15 & 0xF0) == 0xE0)
      break;
LABEL_23:
    if (v14 == ++v10)
    {
      v11 = 0;
      v10 = v14;
      goto LABEL_25;
    }
  }
  if (v15 != 238
    || (v16 = *(_BYTE **)(v13 + 24 * v12), *(_QWORD *)(v13 + 24 * v12 + 8) - (_QWORD)v16 != 15)
    || v16[3] != 65
    || v16[4] != 100
    || v16[5] != 111
    || v16[6] != 98
    || v16[7] != 101)
  {
    ++v12;
    goto LABEL_23;
  }
  v11 = v16[14] == 0;
LABEL_25:
  if (v10 == v6)
    v11 = v3 == 144 && *v2 == 82 && v2[12] == 71 && v2[24] == 66;
  v8 = !v11;
LABEL_32:
  result = 0;
  if (v3 == 48 || v8)
    v18 = 2;
  else
    v18 = 1;
  *a2 = v18;
  return result;
}

uint64_t sub_23686B7B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *i;
  int v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unsigned __int8 **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  _DWORD *v41;
  unsigned __int8 **v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  _DWORD *v57;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  size_t v80;
  size_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  const void *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  const void *v95;
  const void *v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  size_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  const void *v108;
  unint64_t v109;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
  v8 = a1[6];
  v7 = (_DWORD *)a1[7];
  v9 = (char *)v7 - v8;
  v10 = ((uint64_t)v7 - v8) >> 2;
  if (v6 <= v10)
  {
    if (v6 < v10)
      a1[7] = v8 - 0x5555555555555554 * ((uint64_t)(a1[4] - a1[3]) >> 3);
  }
  else
  {
    v11 = a1[8];
    if (v6 - v10 <= (v11 - (uint64_t)v7) >> 2)
    {
      v25 = &v7[v6 - v10];
      v26 = 0xAAAAAAAAAAAAAAACLL * ((uint64_t)(a1[4] - a1[3]) >> 3) - (_QWORD)v9;
      do
      {
        *v7++ = 0;
        v26 -= 4;
      }
      while (v26);
      a1[7] = v25;
    }
    else
    {
      if (v6 >> 62)
        sub_2367C3440();
      v12 = v11 - v8;
      v13 = (v11 - v8) >> 1;
      if (v13 <= v6)
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3);
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)sub_2367C3454(v14);
      v17 = &v15[4 * v10];
      v18 = &v15[4 * v6];
      v19 = 4 * v6 - (_QWORD)v9;
      v20 = v17;
      do
      {
        *(_DWORD *)v20 = 0;
        v20 += 4;
        v19 -= 4;
      }
      while (v19);
      v21 = &v15[4 * v16];
      v22 = (char *)a1[6];
      for (i = (char *)a1[7]; i != v22; i -= 4)
      {
        v24 = *((_DWORD *)i - 1);
        *((_DWORD *)v17 - 1) = v24;
        v17 -= 4;
      }
      a1[6] = v17;
      a1[7] = v18;
      a1[8] = v21;
      if (v22)
        operator delete(v22);
    }
  }
  v27 = a1[3];
  v28 = a1[4] - v27;
  if (!v28)
  {
    v56 = 0;
    goto LABEL_73;
  }
  v29 = 0;
  v30 = 0;
  v31 = v28 / 24;
  v32 = (_DWORD *)a1[6];
  if (v31 <= 1)
    v31 = 1;
  v33 = (unsigned __int8 **)a1[3];
  v34 = v31;
  do
  {
    v35 = (uint64_t)*v33;
    if (**v33 == 226
      && __rev16(*(unsigned __int16 *)(v35 + 1)) >= 0xE
      && *(_QWORD *)(v35 + 3) == 0x464F52505F434349
      && *(_DWORD *)(v35 + 11) == 4541513)
    {
      v37 = *(unsigned __int8 *)(v35 + 15);
      if (v29 + 1 == v37)
      {
        v38 = *(unsigned __int8 *)(v35 + 16);
        if (!v30)
          v30 = v38;
        if (v30 == v38)
        {
          *v32 = 1;
          v30 = v38;
          v29 = v37;
        }
      }
    }
    ++v32;
    v33 += 3;
    --v34;
  }
  while (v34);
  if (v29 != v30)
    return 1;
  v39 = 0;
  v40 = 0;
  v41 = (_DWORD *)a1[6];
  v42 = (unsigned __int8 **)(v27 + 8);
  v43 = v31;
  do
  {
    v44 = *(v42 - 1);
    v45 = *v42;
    if (v44 != *v42 && *v44 == 225)
    {
      v46 = v45 - v44;
      v47 = (unint64_t)(v45 - v44) >= 3;
      v48 = v45 - v44 - 3;
      if (v47 && __rev16(*(unsigned __int16 *)(v44 + 1)) == v46 - 1)
      {
        if ((v39 & 1) == 0)
        {
          if (v48 < 6 || *(_DWORD *)(v44 + 3) ^ 0x66697845 | *(unsigned __int16 *)(v44 + 7))
          {
            v39 = 0;
            if ((v40 & 1) != 0)
            {
LABEL_65:
              v40 = 1;
              goto LABEL_66;
            }
LABEL_51:
            if (v48 < 0x1D
              || ((v49 = *(_QWORD *)(v44 + 3),
                   v50 = *(_QWORD *)(v44 + 11),
                   v51 = *(_QWORD *)(v44 + 19),
                   v52 = *((_QWORD *)v44 + 3),
                   v49 == 0x6E2F2F3A70747468)
                ? (v53 = v50 == 0x2E65626F64612E73)
                : (v53 = 0),
                  v53 ? (v54 = v51 == 0x2F7061782F6D6F63) : (v54 = 0),
                  v54 ? (v55 = v52 == 0x2F302E312F7061) : (v55 = 0),
                  !v55))
            {
              v40 = 0;
              goto LABEL_66;
            }
            *v41 = 3;
            goto LABEL_65;
          }
          *v41 = 2;
        }
        v39 = 1;
        if ((v40 & 1) != 0)
          goto LABEL_65;
        goto LABEL_51;
      }
    }
LABEL_66:
    ++v41;
    v42 += 3;
    --v43;
  }
  while (v43);
  v56 = 0;
  v57 = (_DWORD *)a1[6];
  v58 = (_QWORD *)(v27 + 8);
  do
  {
    if (!*v57++)
      v56 = v56 + *v58 - *(v58 - 1);
    v58 += 3;
    --v31;
  }
  while (v31);
LABEL_73:
  v60 = a1[9];
  v61 = a1[10] - v60;
  if (v61)
  {
    v62 = v61 / 24;
    if (v62 <= 1)
      v62 = 1;
    v63 = (_QWORD *)(v60 + 8);
    do
    {
      v56 = v56 + *v63 - *(v63 - 1);
      v63 += 3;
      --v62;
    }
    while (v62);
  }
  v64 = a1[27];
  v65 = a1[28] - v64;
  if (v65)
  {
    v66 = v65 / 24;
    if (v66 <= 1)
      v66 = 1;
    v67 = (_QWORD *)(v64 + 8);
    do
    {
      v56 = v56 + *v67 - *(v67 - 1);
      v67 += 3;
      --v66;
    }
    while (v66);
  }
  v68 = a1[31] - a1[30] + v56;
  if (v68)
  {
    if (v68 + 4 * (v68 >> 14) + 6 >= v68)
      v69 = v68 + 4 * (v68 >> 14) + 6;
    else
      v69 = 0;
  }
  else
  {
    v69 = 2;
  }
  v106 = v69;
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v70 = sub_2368ACEB0((uint64_t)a1, &v103, 0, 0);
  if (!(_DWORD)v70)
  {
    v71 = v103;
    v72 = ((v103 + 7) & 0xFFFFFFFFFFFFFFF8) - v103;
    if (v72)
    {
      *(_QWORD *)(*((_QWORD *)&v104 + 1) + ((unint64_t)v103 >> 3)) = *(unsigned __int8 *)(*((_QWORD *)&v104 + 1)
                                                                                               + ((unint64_t)v103 >> 3));
      v71 = v103 + v72;
      *(_QWORD *)&v103 = v103 + v72;
    }
    v73 = v71 >> 3;
    sub_2367E8BBC((size_t *)&v103 + 1, v71 >> 3);
    v74 = (char *)*((_QWORD *)&v104 + 1);
    if (!*((_QWORD *)&v104 + 1))
      v73 = 0;
    *((_QWORD *)&v103 + 1) = 0;
    v104 = 0uLL;
    sub_23681F8EC((unint64_t *)a2, v69 + v73);
    sub_2367C9D5C(a2, *(char **)(a2 + 8), v74, &v74[v73], v73);
    if (v74)
    {
      v75 = -*((_QWORD *)v74 - 3);
      do
        v76 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v76 + v75, &qword_2564313D8));
      free(*((void **)v74 - 4));
    }
    sub_2367B4404();
    v78 = v77;
    if (*(_DWORD *)(v77 + 6980))
    {
      v79 = *(_QWORD *)a2;
      v80 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      v81 = v80;
    }
    else
    {
      v82 = *(_DWORD *)(a3 + 52);
      if (v82 < 0)
        v82 = 11 - *(_DWORD *)(a3 + 48);
      *(_DWORD *)(v77 + 4) = v82;
      v80 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      *(_QWORD *)(v77 + 24) = v68;
      v79 = *(_QWORD *)a2;
      v81 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    }
    if (v106 + v80 <= v81)
    {
      if (v106 + v80 < v81)
        *(_QWORD *)(a2 + 8) = v79 + v106 + v80;
    }
    else
    {
      sub_2367C8698((unint64_t *)a2, v106 + v80 - v81);
    }
    v102 = 0;
    v84 = a1[3];
    v83 = a1[4];
    if (v83 != v84)
    {
      v85 = 0;
      do
      {
        if (!*(_DWORD *)(a1[6] + 4 * v85))
        {
          v86 = v84 + 24 * v85;
          v87 = *(const void **)v86;
          v109 = *(_QWORD *)(v86 + 8) - *(_QWORD *)v86;
          v107 = *(_QWORD *)a2 + v102 + v80;
          v108 = v87;
          do
            sub_2367B4778(v78, 0, &v109, &v108, (size_t *)&v106, (void **)&v107, &v102);
          while (*(_QWORD *)(v78 + 6936) | v109);
          v84 = a1[3];
          v83 = a1[4];
        }
        ++v85;
      }
      while (v85 < 0xAAAAAAAAAAAAAAABLL * ((v83 - v84) >> 3));
    }
    v88 = a1[9];
    if (a1[10] != v88)
    {
      v89 = 0;
      do
      {
        v90 = v88 + 24 * v89;
        v91 = *(const void **)v90;
        v109 = *(_QWORD *)(v90 + 8) - *(_QWORD *)v90;
        v107 = *(_QWORD *)a2 + v102 + v80;
        v108 = v91;
        do
          sub_2367B4778(v78, 0, &v109, &v108, (size_t *)&v106, (void **)&v107, &v102);
        while (*(_QWORD *)(v78 + 6936) | v109);
        ++v89;
        v88 = a1[9];
      }
      while (v89 < 0xAAAAAAAAAAAAAAABLL * ((a1[10] - v88) >> 3));
    }
    v92 = a1[27];
    if (a1[28] != v92)
    {
      v93 = 0;
      do
      {
        v94 = v92 + 24 * v93;
        v95 = *(const void **)v94;
        v109 = *(_QWORD *)(v94 + 8) - *(_QWORD *)v94;
        v107 = *(_QWORD *)a2 + v102 + v80;
        v108 = v95;
        do
          sub_2367B4778(v78, 0, &v109, &v108, (size_t *)&v106, (void **)&v107, &v102);
        while (*(_QWORD *)(v78 + 6936) | v109);
        ++v93;
        v92 = a1[27];
      }
      while (v93 < 0xAAAAAAAAAAAAAAABLL * ((a1[28] - v92) >> 3));
    }
    v96 = (const void *)a1[30];
    v109 = a1[31] - (_QWORD)v96;
    v107 = *(_QWORD *)a2 + v102 + v80;
    v108 = v96;
    do
      sub_2367B4778(v78, 2, &v109, &v108, (size_t *)&v106, (void **)&v107, &v102);
    while (*(_QWORD *)(v78 + 6936) | v109);
    sub_2367B45AC(v78);
    v97 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (v102 + v80 <= v97)
    {
      if (v102 + v80 < v97)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + v102 + v80;
    }
    else
    {
      sub_2367C8698((unint64_t *)a2, v102 + v80 - v97);
    }
    v70 = 0;
  }
  v98 = *((_QWORD *)&v104 + 1);
  *((_QWORD *)&v104 + 1) = 0;
  if (v98)
  {
    v99 = -*(_QWORD *)(v98 - 24);
    do
      v100 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v100 + v99, &qword_2564313D8));
    free(*(void **)(v98 - 32));
  }
  return v70;
}

uint64_t sub_23686C030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  int *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 2224);
  v5 = *(_QWORD *)(a1 + 2232) - v4;
  if (v5)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 6);
    v7 = (int *)(v4 + 48);
    v5 = -1;
    do
    {
      v8 = *v7;
      v9 = v5 + 2;
      ++v5;
      v7 += 112;
      if (v8)
        v10 = 1;
      else
        v10 = v9 >= v6;
    }
    while (!v10);
  }
  sub_2367F67A4(v4 + 448 * v5, a2, a3);
  if (*(_BYTE *)(a1 + 208))
  {
    v11 = 255.0;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 216);
    v11 = 255.0;
    if (v12 == 18)
      v11 = 1000.0;
    if (v12 == 16)
      v11 = 10000.0;
  }
  *(float *)(a1 + 396) = v11;
  v13 = *(_QWORD *)(a1 + 2232);
  v14 = *(_QWORD *)(a1 + 2224);
  v15 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v14) >> 6);
  if (v13 == v14)
  {
    v17 = 0;
  }
  else
  {
    v16 = (int *)(v14 + 48);
    v17 = -1;
    do
    {
      v18 = *v16;
      v19 = v17 + 2;
      ++v17;
      v16 += 112;
      if (v18)
        v20 = 1;
      else
        v20 = v19 >= v15;
    }
    while (!v20);
  }
  v21 = *(_DWORD *)(v14 + 448 * v17 + 96);
  if (!v21)
  {
    v22 = v14 + 448 * v17;
    v23 = *(unsigned int **)(v22 + 416);
    if (v23 == *(unsigned int **)(v22 + 424))
      v21 = 0;
    else
      v21 = *v23;
  }
  if (v13 == v14)
  {
    v25 = 0;
  }
  else
  {
    v24 = (int *)(v14 + 48);
    v25 = -1;
    do
    {
      v26 = *v24;
      v27 = v25 + 2;
      ++v25;
      v24 += 112;
      if (v26)
        v28 = 1;
      else
        v28 = v27 >= v15;
    }
    while (!v28);
  }
  v29 = *(_DWORD *)(v14 + 448 * v25 + 100);
  if (!v29)
  {
    v30 = v14 + 448 * v25;
    v31 = *(_QWORD *)(v30 + 416);
    if (v31 == *(_QWORD *)(v30 + 424))
      v29 = 0;
    else
      v29 = *(_DWORD *)(v31 + 4);
  }
  return sub_2367F4780(a1 + 520, v21, v29);
}

_QWORD *sub_23686C1DC(_QWORD *a1)
{
  char *v2;
  _WORD *v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x2F60uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 12128;
  v3 = v2 + 2;
  v4 = 3032;
  do
  {
    *((_BYTE *)v3 - 2) = 0;
    *v3 = -1;
    v3 += 2;
    --v4;
  }
  while (v4);
  a1[1] = v2 + 12128;
  return a1;
}

uint64_t sub_23686C23C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2367C3440();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)sub_2367D1EBC(v7);
  else
    v8 = 0;
  v9 = (_QWORD *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  v13 = v9;
  v14 = v7 + 24 * v8;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_2367C9F60(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v13 += 3;
  sub_2367D1F00(a1, v12);
  v10 = a1[1];
  sub_2367D1F70((uint64_t)v12);
  return v10;
}

void sub_23686C334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2367D1F70((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23686C348(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  int v5;
  __int128 v6;
  _QWORD *v8;
  int v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = operator new(0x20uLL);
  *a1 = v4;
  v5 = *a2;
  *(_OWORD *)(a1 + 1) = xmmword_2368AFA50;
  v4[3] = 0;
  if (v5)
  {
    *(_QWORD *)&v6 = -1;
    *((_QWORD *)&v6 + 1) = -1;
    *(_OWORD *)v4 = v6;
    *((_OWORD *)v4 + 1) = v6;
  }
  else
  {
    v8 = v4;
    v9 = 0;
    sub_2367D0FB0((uint64_t)&v8, 0x100uLL);
  }
  return a1;
}

uint64_t sub_23686C3C0(int64x2_t *a1, uint64_t a2)
{
  int64x2_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  unint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  uint64_t *v25;

  v4 = a1 + 1;
  v5 = a1[1].u64[0];
  v6 = a1->u64[1];
  if (v6 >= v5)
  {
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - a1->i64[0]) >> 3);
    if (v9 + 1 > 0x222222222222222)
      sub_2367C3440();
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x111111111111111)
      v12 = 0x222222222222222;
    else
      v12 = v11;
    v25 = (uint64_t *)v4;
    if (v12)
      v12 = (unint64_t)sub_236827FF0(v12);
    else
      v13 = 0;
    v22 = v12;
    v23.i64[0] = v12 + 120 * v9;
    v24 = v12 + 120 * v13;
    sub_23686C8D0(v23.i64[0], a2);
    v14 = v23.i64[0];
    v8 = v23.i64[0] + 120;
    v23.i64[1] = v23.i64[0] + 120;
    v16 = a1->i64[0];
    v15 = a1->u64[1];
    if (v15 == a1->i64[0])
    {
      v20 = vdupq_n_s64(v15);
    }
    else
    {
      do
      {
        *(_OWORD *)(v14 - 120) = *(_OWORD *)(v15 - 120);
        v17 = *(_OWORD *)(v15 - 104);
        v18 = *(_OWORD *)(v15 - 88);
        v19 = *(_QWORD *)(v15 - 56);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v15 - 72);
        *(_OWORD *)(v14 - 88) = v18;
        *(_OWORD *)(v14 - 104) = v17;
        *(_QWORD *)(v14 - 56) = v19;
        *(_QWORD *)(v14 - 48) = 0;
        *(_QWORD *)(v14 - 40) = 0;
        *(_QWORD *)(v14 - 32) = 0;
        *(_OWORD *)(v14 - 48) = *(_OWORD *)(v15 - 48);
        *(_QWORD *)(v14 - 32) = *(_QWORD *)(v15 - 32);
        *(_QWORD *)(v15 - 48) = 0;
        *(_QWORD *)(v15 - 40) = 0;
        *(_QWORD *)(v15 - 32) = 0;
        *(_QWORD *)(v14 - 24) = 0;
        *(_QWORD *)(v14 - 16) = 0;
        *(_QWORD *)(v14 - 8) = 0;
        *(_OWORD *)(v14 - 24) = *(_OWORD *)(v15 - 24);
        *(_QWORD *)(v14 - 8) = *(_QWORD *)(v15 - 8);
        v14 -= 120;
        *(_QWORD *)(v15 - 24) = 0;
        *(_QWORD *)(v15 - 16) = 0;
        *(_QWORD *)(v15 - 8) = 0;
        v15 -= 120;
      }
      while (v15 != v16);
      v20 = *a1;
      v8 = v23.i64[1];
    }
    a1->i64[0] = v14;
    a1->i64[1] = v8;
    v23 = v20;
    v21 = a1[1].u64[0];
    a1[1].i64[0] = v24;
    v24 = v21;
    v22 = v20.i64[0];
    result = sub_23686C974((uint64_t)&v22);
  }
  else
  {
    result = (uint64_t)sub_23686C8D0(a1->i64[1], a2);
    v8 = v6 + 120;
    a1->i64[1] = v6 + 120;
  }
  a1->i64[1] = v8;
  return result;
}

void sub_23686C570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23686C974((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23686C590(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_23686C5D0(uint64_t *result)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v1 = *((_DWORD *)result + 8);
  if (v1 <= 16)
  {
    v3 = result[2];
    v2 = result[3];
    v4 = v1 - 8;
    v5 = result[5];
    do
    {
      v6 = v2 << 8;
      result[3] = v6;
      if (v3 >= v5)
      {
        v9 = 0;
        v8 = v3 + 1;
        result[2] = v3 + 1;
      }
      else
      {
        v7 = *result;
        v8 = v3 + 1;
        result[2] = v3 + 1;
        v9 = *(unsigned __int8 *)(v7 + v3);
        if (v9 == 255)
        {
          if (*(_BYTE *)(v7 + v8))
          {
            result[5] = v3;
            v9 = 255;
            v5 = v3;
          }
          else
          {
            v8 = v3 + 2;
            result[2] = v3 + 2;
            v9 = 255;
          }
        }
      }
      v2 = v6 | v9;
      result[3] = v2;
      *((_DWORD *)result + 8) = v4 + 16;
      v4 += 8;
      v3 = v8;
    }
    while (v4 < 49);
  }
  return result;
}

BOOL sub_23686C670(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v4;
  uint64_t v5;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v29;

  v4 = *(_DWORD *)(a1 + 32);
  v5 = v4 & 7;
  if ((v4 & 7) != 0)
  {
    v29 = a3;
    v7 = (*(_QWORD *)(a1 + 24) >> (v4 & 0xF8)) & ~(-1 << v5);
    if (v7 != ~(-1 << v5))
      *(_BYTE *)(a2 + 264) = 1;
    v8 = *(_BYTE **)(a2 + 280);
    do
    {
      v9 = (v7 >> (v5 - 1)) & 1;
      v10 = *(_QWORD *)(a2 + 288);
      if ((unint64_t)v8 >= v10)
      {
        v12 = *(_QWORD *)(a2 + 272);
        v13 = &v8[-v12];
        v14 = (uint64_t)&v8[-v12 + 1];
        if (v14 < 0)
          sub_2367C3440();
        v15 = v10 - v12;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)operator new(v16);
        else
          v17 = 0;
        v18 = &v13[(_QWORD)v17];
        v19 = &v13[(_QWORD)v17];
        *v19 = v9;
        v11 = v19 + 1;
        if (v8 != (_BYTE *)v12)
        {
          v20 = &v8[~v12];
          do
          {
            v21 = *--v8;
            (v20--)[(_QWORD)v17] = v21;
          }
          while (v8 != (_BYTE *)v12);
          v8 = *(_BYTE **)(a2 + 272);
          v18 = v17;
        }
        *(_QWORD *)(a2 + 272) = v18;
        *(_QWORD *)(a2 + 280) = v11;
        *(_QWORD *)(a2 + 288) = &v17[v16];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v11 = v8 + 1;
      }
      *(_QWORD *)(a2 + 280) = v11;
      v8 = v11;
    }
    while (v5-- > 1);
    v4 = *(_DWORD *)(a1 + 32);
    a3 = v29;
  }
  v23 = *(_QWORD *)(a1 + 40);
  if (v4 <= 7)
  {
    v26 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = (v4 >> 3) + 1;
    do
    {
      v26 = v24 - 1;
      *(_QWORD *)(a1 + 16) = v24 - 1;
      if (v24 - 1 < v23 && !*(_BYTE *)(*(_QWORD *)a1 + v26))
      {
        v27 = v24 - 2;
        if (*(unsigned __int8 *)(*(_QWORD *)a1 + v27) == 255)
        {
          *(_QWORD *)(a1 + 16) = v27;
          v26 = v27;
        }
      }
      --v25;
      v24 = v26;
    }
    while (v25 > 1);
  }
  if (v26 <= v23)
    *a3 = v26;
  return v26 <= v23;
}

uint64_t sub_23686C848(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;

  sub_23686C5D0((uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 32);
  v6 = (unsigned __int8 *)(a1 + 4 * (v4 >> (v5 - 8)));
  v7 = *v6;
  if (v7 >= 9)
  {
    v6 += 4 * *(unsigned __int16 *)(a1 + 4 * (v4 >> (v5 - 8)) + 2)
        + 4 * ((v4 >> (v5 - v7)) & ~(-1 << (v7 - 8)));
    v7 = *v6;
    v5 -= 8;
  }
  *(_DWORD *)(a2 + 32) = v5 - v7;
  return *((unsigned __int16 *)v6 + 1);
}

_QWORD *sub_23686C8D0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_2368220C4((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return sub_236827F78((_QWORD *)(a1 + 96), *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
}

void sub_23686C958(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23686C974(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    sub_236827DE8((_QWORD *)(i - 120));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23686C9C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t i;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t j;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  _DWORD *v145;
  int v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t **v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  _QWORD *v175;
  uint32x4_t v176;
  int32x4_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v9 = (int *)(a2 + 4 * a3);
  v10 = **(_QWORD **)(a1 + 24);
  v174 = *(_QWORD *)(a1 + 16);
  v175 = v7;
  if (**(_BYTE **)a1)
  {
    v11 = *(_QWORD **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if ((_DWORD)a3)
    {
      v13 = *(v9 - 1);
      v14 = v13;
      if (!(_DWORD)a4)
      {
        v23 = 0;
        v15 = v13;
        v16 = v13;
        v24 = v13;
LABEL_14:
        v25 = v14;
        if (a3 >= 2)
          v25 = *(v9 - 2);
        v26 = v16;
        if (a4 >= 2)
          v26 = v9[-2 * v10];
        v27 = v23 ^ 1;
        if ((int)a3 + 2 >= v8)
          v27 = 1;
        if ((v27 & 1) != 0)
          v171 = v24;
        else
          v171 = v9[2 - v10];
        goto LABEL_39;
      }
      v15 = v9[~v10];
      v16 = v9[-v10];
    }
    else
    {
      if (!(_DWORD)a4)
      {
        v26 = 0;
        v24 = 0;
        v16 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v25 = 0;
        v171 = 0;
LABEL_39:
        v33 = 0;
        v34 = (_DWORD *)*v7;
        if (v16 >= 0)
          LODWORD(v35) = v16;
        else
          v35 = -v16;
        v34[3] = a3;
        v34[4] = v35;
        if (v14 >= 0)
          LODWORD(v36) = v14;
        else
          v36 = -v14;
        v37 = v13 - v34[9];
        v34[5] = v36;
        v34[6] = v16;
        v34[7] = v13;
        v34[8] = v37;
        v38 = v14 + v16;
        v34[9] = v14 + v16 - v15;
        v34[10] = v13 - v15;
        v34[11] = v15 - v16;
        v34[12] = v16 - v24;
        v39 = v8 + 2;
        if ((a4 & 1) != 0)
          v40 = v8 + 2;
        else
          v40 = 0;
        v41 = v40 + (int)a3;
        if (v8 - 1 <= (int)a3)
          v42 = v40 + (int)a3;
        else
          v42 = v41 + 1;
        v34[13] = v16 - v26;
        v34[14] = v13 - v25;
        if ((_DWORD)a3)
          v40 = v41 - 1;
        for (i = 40; i != 136; i += 24)
        {
          v44 = (*(_DWORD *)(*(_QWORD *)(v12 + i) + 4 * v42)
                             + *(_DWORD *)(*(_QWORD *)(v12 + i) + 4 * v41)
                             + *(_DWORD *)(*(_QWORD *)(v12 + i) + 4 * v40));
          v45 = __clz(v44 + 1) ^ 0x3F;
          if (v45 <= 5)
            LOBYTE(v45) = 5;
          v176.i32[v33] = ((*(_DWORD *)(v12 + 4 * (v44 >> (v45 - 5)) + 216)
                                        * *(_DWORD *)(v12 + v33 * 4 + 200)) >> (v45 - 5))
                        + 4;
          ++v33;
        }
        v173 = v9;
        v46 = 8 * v16;
        v47 = 8 * v14;
        v48 = 8 * v24;
        v49 = v11;
        if ((_DWORD)a3)
        {
          if ((a4 & 1) != 0)
            v50 = 0;
          else
            v50 = v39;
          v51 = *(_QWORD *)(v12 + 136);
          v52 = *(int *)(v51 + 4 * ((int)a3 + v50) - 4);
        }
        else
        {
          v52 = 0;
          v51 = *(_QWORD *)(v12 + 136);
        }
        v53 = 0;
        v54 = *(int *)(v51 + 4 * v41);
        v55 = *(int *)(v51 + 4 * v40);
        v56 = v52 + v54;
        v57 = *(int *)(v51 + 4 * v42);
        if (v54 >= 0)
          v58 = v54;
        else
          v58 = -v54;
        if (v52 >= 0)
          v59 = v52;
        else
          v59 = -v52;
        if (v58 <= v59)
          v60 = v52;
        else
          v60 = v54;
        if (v55 >= 0)
          v61 = v55;
        else
          v61 = -v55;
        if (v60 >= 0)
          v62 = v60;
        else
          v62 = -v60;
        if (v61 <= v62)
          v63 = v60;
        else
          v63 = v55;
        if (v57 >= 0)
          v64 = v57;
        else
          v64 = -v57;
        if (v63 >= 0)
          v65 = v63;
        else
          v65 = -v63;
        if (v64 > v65)
          LODWORD(v63) = v57;
        v34[15] = v63;
        v66 = *(int *)(v12 + 176);
        v67 = v46 - (((v56 + v57) * *(int *)(v12 + 172)) >> 5);
        *(_QWORD *)v12 = v48 - v46 + v47;
        *(_QWORD *)(v12 + 8) = v67;
        v68 = v47 - (((v56 + v55) * v66) >> 5);
        v69 = v46
            - ((*(int *)(v12 + 180) * (uint64_t)(int)v55
              + *(int *)(v12 + 184) * (uint64_t)(int)v54
              + *(int *)(v12 + 188) * (uint64_t)(int)v57
              + 8 * ((v26 - v16) * *(int *)(v12 + 192) + (v15 - v14) * *(int *)(v12 + 196))) >> 5);
        *(_QWORD *)(v12 + 16) = v68;
        *(_QWORD *)(v12 + 24) = v69;
        v177 = (int32x4_t)vshlq_u32(v176, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v176)) ^ 0x1F) - 4)));
        v70 = vaddvq_s32(v177);
        v71 = (v70 >> 1) - 1;
        do
        {
          v71 += *(_QWORD *)(v12 + 8 * v53) * v177.u32[v53];
          ++v53;
        }
        while (v53 != 4);
        v72 = (v71 * *(unsigned int *)(v12 + 4 * (v70 - 1) + 216)) >> 24;
        if (v48 <= v46)
          v73 = 8 * v16;
        else
          v73 = 8 * v24;
        if (v47 > v73)
          v73 = 8 * v14;
        if (v46 >= v48)
          v74 = 8 * v24;
        else
          v74 = 8 * v16;
        if (v74 < v47)
          v47 = v74;
        if (v72 < v73)
          v73 = (v71 * *(unsigned int *)(v12 + 4 * (v70 - 1) + 216)) >> 24;
        if (v47 <= v73)
          v47 = v73;
        if ((v55 ^ v54 | v52 ^ v54) <= 0)
          v72 = v47;
        *(_QWORD *)(v12 + 32) = v72;
        v75 = (v72 + 3) >> 3;
        v76 = v49[5];
        if (v76)
        {
          v77 = (int *)(v49[3] + v49[2] * (int)a3);
          v78 = v34 + 16;
          do
          {
            v79 = *v77++;
            *v78++ = v79;
            --v76;
          }
          while (v76);
        }
        v80 = 0;
        v81 = v16 + v24;
        if (v16 + v24 < 0 != __OFADD__(v16, v24))
          ++v81;
        v82 = v15 + v16;
        if (v15 + v16 < 0 != __OFADD__(v15, v16))
          ++v82;
        v83 = v15 + v14;
        if (v15 + v14 < 0 != __OFADD__(v15, v14))
          ++v83;
        if (v38 >= 0)
          v84 = v14 + v16;
        else
          v84 = v38 + 1;
        if (v13 >= (int)v16)
          v85 = v16;
        else
          v85 = v13;
        if (v13 <= (int)v16)
          v86 = v16;
        else
          v86 = v13;
        v87 = v13 + v16 - v15;
        if (v85 <= (int)v15)
          v88 = v87;
        else
          v88 = v86;
        v148 = v86 < (int)v15;
        v89 = v81 >> 1;
        result = v82 >> 1;
        v90 = v83 >> 1;
        if (v148)
          v91 = v85;
        else
          v91 = v88;
        v92 = v91;
        v93 = v16 - v15;
        if (v16 - v15 < 0)
          v93 = v15 - v16;
        v94 = v14 - v15;
        if (v14 - v15 < 0)
          v94 = v15 - v14;
        if (v93 >= v94)
          v95 = v16;
        else
          v95 = v14;
        v9 = v173;
        v96 = 3 * v24 - 2 * v26 + 6 * (int)v16 - v14 + 8 * v14 + v25 + v171;
        v97 = v96 + 8;
        v98 = v96 + 23;
        if (v97 >= 0)
          v98 = v97;
        do
        {
          switch((int)v80)
          {
            case 1:
              v99 = v14;
              break;
            case 2:
              v99 = v16;
              break;
            case 3:
              v99 = v84 >> 1;
              break;
            case 4:
              v99 = v95;
              break;
            case 5:
              v99 = v92;
              break;
            case 6:
              v99 = v75;
              break;
            case 7:
              v99 = v24;
              break;
            case 8:
              v99 = v15;
              break;
            case 9:
              v99 = v25;
              break;
            case 10:
              v99 = v90;
              break;
            case 11:
              v99 = result;
              break;
            case 12:
              v99 = v89;
              break;
            case 13:
              v99 = v98 >> 4;
              break;
            default:
              v99 = 0;
              break;
          }
          v177.i64[v80++] = v99;
        }
        while (v80 != 14);
        v101 = v174;
        v100 = v175;
        goto LABEL_266;
      }
      v13 = v9[-v10];
      v16 = v13;
      v14 = v13;
      v15 = v13;
    }
    v23 = 1;
    if ((int)a3 + 1 >= v8)
      v24 = v16;
    else
      v24 = v9[1 - v10];
    goto LABEL_14;
  }
  v17 = *(int **)(*(_QWORD *)(a1 + 48) + 120);
  v18 = *(_QWORD **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)a3)
  {
    v19 = *(v9 - 1);
    v20 = v19;
    if (!(_DWORD)a4)
    {
      v28 = 0;
      v21 = v19;
      v22 = v19;
      result = v19;
LABEL_29:
      v30 = v20;
      if (a3 >= 2)
        v30 = *(v9 - 2);
      v31 = v22;
      if (a4 >= 2)
        v31 = v9[-2 * v10];
      v32 = v28 ^ 1;
      if ((int)a3 + 2 >= v8)
        v32 = 1;
      if ((v32 & 1) != 0)
        v172 = result;
      else
        v172 = v9[2 - v10];
      goto LABEL_158;
    }
    v21 = v9[~v10];
    v22 = v9[-v10];
LABEL_25:
    v28 = 1;
    if ((int)a3 + 1 >= v8)
      result = v22;
    else
      result = v9[1 - v10];
    goto LABEL_29;
  }
  if ((_DWORD)a4)
  {
    v19 = v9[-v10];
    v22 = v19;
    v20 = v19;
    v21 = v19;
    goto LABEL_25;
  }
  v31 = 0;
  result = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v30 = 0;
  v172 = 0;
LABEL_158:
  v102 = 0;
  v103 = *v17;
  v104 = (_DWORD *)*v7;
  if (v22 >= 0)
    LODWORD(v105) = v22;
  else
    v105 = -v22;
  v104[3] = a3;
  v104[4] = v105;
  if (v20 >= 0)
    LODWORD(v106) = v20;
  else
    v106 = -v20;
  v107 = v19 - v104[9];
  v104[5] = v106;
  v104[6] = v22;
  v104[7] = v19;
  v104[8] = v107;
  v104[9] = v20 + v22 - v21;
  v104[10] = v19 - v21;
  v104[11] = v21 - v22;
  v104[12] = v22 - result;
  v108 = v8 + 2;
  if ((a4 & 1) != 0)
    v109 = v8 + 2;
  else
    v109 = 0;
  v110 = v109 + (int)a3;
  if (v8 - 1 <= (int)a3)
    v111 = v109 + (int)a3;
  else
    v111 = v110 + 1;
  v104[13] = v22 - v31;
  v104[14] = v19 - v30;
  if ((_DWORD)a3)
    v112 = v110 - 1;
  else
    v112 = v109;
  for (j = 40; j != 136; j += 24)
  {
    v114 = (*(_DWORD *)(*(_QWORD *)(v12 + j) + 4 * v111)
                        + *(_DWORD *)(*(_QWORD *)(v12 + j) + 4 * v110)
                        + *(_DWORD *)(*(_QWORD *)(v12 + j) + 4 * v112));
    v115 = __clz(v114 + 1) ^ 0x3F;
    if (v115 <= 5)
      LOBYTE(v115) = 5;
    v176.i32[v102] = ((*(_DWORD *)(v12 + 4 * (v114 >> (v115 - 5)) + 216)
                                   * *(_DWORD *)(v12 + v102 * 4 + 200)) >> (v115 - 5))
                   + 4;
    ++v102;
  }
  v116 = 8 * v22;
  v117 = 8 * v20;
  v118 = 8 * result;
  if ((_DWORD)a3)
  {
    if ((a4 & 1) != 0)
      v119 = 0;
    else
      v119 = v108;
    v120 = *(_QWORD *)(v12 + 136);
    v121 = *(int *)(v120 + 4 * ((int)a3 + v119) - 4);
  }
  else
  {
    v121 = 0;
    v120 = *(_QWORD *)(v12 + 136);
  }
  v122 = 0;
  v123 = *(int *)(v120 + 4 * v110);
  v124 = *(int *)(v120 + 4 * v112);
  v125 = v121 + v123;
  v126 = *(int *)(v120 + 4 * v111);
  if (v123 >= 0)
    v127 = v123;
  else
    v127 = -v123;
  if (v121 >= 0)
    v128 = v121;
  else
    v128 = -v121;
  if (v127 <= v128)
    v129 = v121;
  else
    v129 = v123;
  if (v124 >= 0)
    v130 = v124;
  else
    v130 = -v124;
  if (v129 >= 0)
    v131 = v129;
  else
    v131 = -v129;
  if (v130 <= v131)
    v132 = v129;
  else
    v132 = v124;
  if (v126 >= 0)
    v133 = v126;
  else
    v133 = -v126;
  if (v132 >= 0)
    v134 = v132;
  else
    v134 = -v132;
  if (v133 > v134)
    LODWORD(v132) = v126;
  v104[15] = v132;
  v135 = *(int *)(v12 + 176);
  v136 = v116 - (((v125 + v126) * *(int *)(v12 + 172)) >> 5);
  *(_QWORD *)v12 = v118 - v116 + v117;
  *(_QWORD *)(v12 + 8) = v136;
  v137 = v117 - (((v125 + v124) * v135) >> 5);
  v138 = v116
       - ((*(int *)(v12 + 180) * (uint64_t)(int)v124
         + *(int *)(v12 + 184) * (uint64_t)(int)v123
         + *(int *)(v12 + 188) * (uint64_t)(int)v126
         + 8 * ((v31 - v22) * *(int *)(v12 + 192) + (v21 - v20) * *(int *)(v12 + 196))) >> 5);
  *(_QWORD *)(v12 + 16) = v137;
  *(_QWORD *)(v12 + 24) = v138;
  v177 = (int32x4_t)vshlq_u32(v176, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v176)) ^ 0x1F) - 4)));
  v139 = vaddvq_s32(v177);
  v140 = (v139 >> 1) - 1;
  do
  {
    v140 += *(_QWORD *)(v12 + 8 * v122) * v177.u32[v122];
    ++v122;
  }
  while (v122 != 4);
  if (v118 <= v116)
    v141 = 8 * v22;
  else
    v141 = 8 * result;
  if (v117 > v141)
    v141 = 8 * v20;
  if (v116 >= v118)
    v142 = 8 * result;
  else
    v142 = 8 * v22;
  if (v142 < v117)
    v117 = v142;
  if ((v140 * *(unsigned int *)(v12 + 4 * (v139 - 1) + 216)) >> 24 < v141)
    v141 = (v140 * *(unsigned int *)(v12 + 4 * (v139 - 1) + 216)) >> 24;
  if (v117 <= v141)
    v117 = v141;
  if ((v124 ^ v123 | v121 ^ v123) > 0)
    v117 = (v140 * *(unsigned int *)(v12 + 4 * (v139 - 1) + 216)) >> 24;
  *(_QWORD *)(v12 + 32) = v117;
  v143 = v18[5];
  if (v143)
  {
    v144 = (int *)(v18[3] + v18[2] * (int)a3);
    v145 = v104 + 16;
    do
    {
      v146 = *v144++;
      *v145++ = v146;
      --v143;
    }
    while (v143);
  }
  switch((int)v103)
  {
    case 1:
      break;
    case 2:
      v20 = v22;
      break;
    case 3:
      v147 = v20 + v22;
      v148 = v20 + v22 < 0;
      goto LABEL_259;
    case 4:
      v149 = v22 - v21;
      if (v22 - v21 < 0)
        v149 = v21 - v22;
      v150 = v20 - v21;
      if (v20 - v21 < 0)
        v150 = v21 - v20;
      if (v149 >= v150)
        v20 = v22;
      break;
    case 5:
      if (v19 >= (int)v22)
        v151 = v22;
      else
        v151 = v19;
      if (v19 <= (int)v22)
        v152 = v22;
      else
        v152 = v19;
      v153 = v19 + v22 - v21;
      if (v151 > (int)v21)
        v153 = v152;
      if (v152 >= (int)v21)
        v151 = v153;
      v20 = v151;
      break;
    case 6:
      v20 = (v117 + 3) >> 3;
      break;
    case 7:
      v20 = result;
      break;
    case 8:
      v20 = v21;
      break;
    case 9:
      v20 = v30;
      break;
    case 10:
      v147 = v21 + v20;
      v148 = (v21 + v20 < 0) ^ __OFADD__(v21, v20);
      goto LABEL_259;
    case 11:
      v147 = v21 + v22;
      v148 = (v21 + v22 < 0) ^ __OFADD__(v21, v22);
      goto LABEL_259;
    case 12:
      v147 = v22 + result;
      v148 = (v22 + result < 0) ^ __OFADD__(v22, result);
LABEL_259:
      if (v148)
        ++v147;
      v20 = v147 >> 1;
      break;
    case 13:
      v154 = 3 * result - 2 * v31 + 6 * (int)v22 - v20 + 8 * v20 + v30 + v172;
      v155 = v154 + 8;
      v156 = v154 + 23;
      if (v155 >= 0)
        v156 = v155;
      v20 = v156 >> 4;
      break;
    default:
      v20 = 0;
      break;
  }
  v101 = v174;
  v100 = v175;
  v177.i64[v103] = v20;
LABEL_266:
  ++***(_QWORD ***)(a1 + 56);
  v157 = *(uint64_t ***)(a1 + 64);
  v158 = *v157;
  v159 = **v157;
  v160 = (*v157)[1];
  *v158 = v160;
  v158[1] = (v160 >> 5) ^ ((v159 ^ (unint64_t)(v159 << 23)) >> 18) ^ v160 ^ v159 ^ (v159 << 23);
  if (*v157[1] >= (v160 + v159) >> 32)
  {
    result = sub_236875CAC(*(_QWORD *)(a1 + 48), *v9, v100, (uint64_t)&v177);
    v12 = *(_QWORD *)(a1 + 40);
    v101 = *(_QWORD *)(a1 + 16);
  }
  v161 = 0;
  v162 = *(_QWORD *)(v101 + 40) + 2;
  if ((a4 & 1) != 0)
    v163 = 0;
  else
    v163 = *(_QWORD *)(v101 + 40) + 2;
  v164 = 8 * *v9;
  v165 = v163 + a3;
  *(_DWORD *)(*(_QWORD *)(v12 + 136) + 4 * v165) = *(_DWORD *)(v12 + 32) - v164;
  v166 = a3 + ((a4 << 63 >> 63) & v162) + 1;
  v167 = (uint64_t *)(v12 + 40);
  do
  {
    v168 = *(_QWORD *)(v12 + v161) - v164;
    if (v168 < 0)
      v168 = v164 - *(_QWORD *)(v12 + v161);
    v169 = (unint64_t)(v168 + 3) >> 3;
    v170 = *v167;
    v167 += 3;
    *(_DWORD *)(v170 + 4 * v165) = v169;
    *(_DWORD *)(v170 + 4 * v166) += v169;
    v161 += 8;
  }
  while (v161 != 32);
  return result;
}

void sub_23686D4F8(unint64_t *a1, int a2, unint64_t a3)
{
  _WORD *v5;
  char *v6;
  _DWORD *v7;
  _WORD *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  unint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  unint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  char *v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  __int128 v181;
  __int128 v182;
  unint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  unint64_t v194;
  char *v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  char *v206;
  char *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  __int128 v214;
  __int128 v215;
  unint64_t v216;
  char *v217;
  char *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  __int128 v225;
  __int128 v226;
  unint64_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  __int128 v247;
  __int128 v248;
  unint64_t v249;
  char *v250;
  char *v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  __int128 v258;
  __int128 v259;
  unint64_t v260;
  char *v261;
  char *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  __int128 v269;
  __int128 v270;
  unint64_t v271;
  char *v272;
  char *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  _DWORD *v295;
  char *v296;
  char *v297;

  if ((a2 & 0xFFFFFFFD) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v5 = operator new(0x28uLL);
    v6 = (char *)(v5 + 20);
    a1[2] = (unint64_t)(v5 + 20);
    *(_DWORD *)v5 = 0;
    v5[2] = -1;
    *((_QWORD *)v5 + 1) = 0;
    *((_DWORD *)v5 + 4) = 0;
    *((_QWORD *)v5 + 3) = 0;
LABEL_9:
    *((_DWORD *)v5 + 8) = 1;
    *a1 = (unint64_t)v5;
    a1[1] = (unint64_t)v6;
    return;
  }
  if (a2 == 5)
  {
    v7 = operator new(0x84uLL);
    v297 = (char *)(v7 + 33);
    v7[32] = 500;
    *((_OWORD *)v7 + 4) = xmmword_236923C94;
    *((_OWORD *)v7 + 5) = unk_236923CA4;
    *((_OWORD *)v7 + 6) = xmmword_236923CB4;
    *((_OWORD *)v7 + 7) = unk_236923CC4;
    *(_OWORD *)v7 = xmmword_236923C54;
    *((_OWORD *)v7 + 1) = unk_236923C64;
    *((_OWORD *)v7 + 2) = xmmword_236923C74;
    *((_OWORD *)v7 + 3) = unk_236923C84;
    v295 = v7;
    v296 = (char *)(v7 + 33);
    sub_23686F524(a1, 15, &v295, 6, a3);
LABEL_12:
    operator delete(v7);
    return;
  }
  if (a2 != 4)
  {
    if (a2 == 3)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_8:
      v5 = operator new(0x28uLL);
      v6 = (char *)(v5 + 20);
      a1[2] = (unint64_t)(v5 + 20);
      *(_DWORD *)v5 = 0;
      v5[2] = -1;
      *((_QWORD *)v5 + 1) = 0;
      *((_DWORD *)v5 + 4) = 1;
      *((_QWORD *)v5 + 3) = 0;
      goto LABEL_9;
    }
    v7 = operator new(0x84uLL);
    v297 = (char *)(v7 + 33);
    v7[32] = 500;
    *((_OWORD *)v7 + 4) = xmmword_236923C94;
    *((_OWORD *)v7 + 5) = unk_236923CA4;
    *((_OWORD *)v7 + 6) = xmmword_236923CB4;
    *((_OWORD *)v7 + 7) = unk_236923CC4;
    *(_OWORD *)v7 = xmmword_236923C54;
    *((_OWORD *)v7 + 1) = unk_236923C64;
    *((_OWORD *)v7 + 2) = xmmword_236923C74;
    *((_OWORD *)v7 + 3) = unk_236923C84;
    v295 = v7;
    v296 = (char *)(v7 + 33);
    sub_23686F524(a1, 9, &v295, 5, a3);
    goto LABEL_12;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 <= 0x3FF)
    goto LABEL_8;
  v8 = operator new(0x28uLL);
  *(_DWORD *)v8 = 1;
  v8[2] = 0;
  *((_QWORD *)v8 + 1) = 0x200000001;
  *((_DWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 3) = 0;
  *((_DWORD *)v8 + 8) = 1;
  *a1 = (unint64_t)v8;
  a1[1] = (unint64_t)(v8 + 20);
  a1[2] = (unint64_t)(v8 + 20);
  v9 = sub_2367DC0A4(2uLL);
  v10 = (char *)*a1;
  v11 = (char *)a1[1];
  v9[10] = 2;
  v12 = (char *)(v9 + 10);
  v14 = (char *)&v9[10 * v13];
  *((_WORD *)v9 + 22) = 0;
  *((_QWORD *)v9 + 6) = 0x400000003;
  v9[14] = 0;
  *((_QWORD *)v9 + 8) = 0;
  v9[18] = 1;
  v15 = (char *)(v9 + 20);
  if (v11 == v10)
  {
    v18 = (char *)(v9 + 10);
  }
  else
  {
    do
    {
      v16 = *(_OWORD *)(v11 - 40);
      v17 = *(_OWORD *)(v11 - 24);
      v18 = v12 - 40;
      *((_DWORD *)v12 - 2) = *((_DWORD *)v11 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      *(_OWORD *)(v12 - 40) = v16;
      v11 -= 40;
      v12 -= 40;
    }
    while (v11 != v10);
  }
  *a1 = (unint64_t)v18;
  a1[1] = (unint64_t)v15;
  a1[2] = (unint64_t)v14;
  if (v10)
  {
    operator delete(v10);
    v14 = (char *)a1[2];
  }
  a1[1] = (unint64_t)v15;
  if (v15 >= v14)
  {
    v20 = (char *)*a1;
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v15[-*a1] >> 3);
    v22 = v21 + 1;
    if (v21 + 1 > 0x666666666666666)
      sub_2367C3440();
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v20) >> 3);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x333333333333333)
      v24 = 0x666666666666666;
    else
      v24 = v22;
    if (v24)
    {
      v24 = (unint64_t)sub_2367DC0A4(v24);
      v20 = (char *)*a1;
      v15 = (char *)a1[1];
    }
    else
    {
      v25 = 0;
    }
    v26 = v24 + 40 * v21;
    *(_DWORD *)v26 = 0;
    *(_WORD *)(v26 + 4) = 0;
    v14 = (char *)(v24 + 40 * v25);
    *(_QWORD *)(v26 + 8) = 0x600000005;
    *(_DWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_DWORD *)(v26 + 32) = 1;
    v19 = (char *)(v26 + 40);
    if (v15 == v20)
    {
      v29 = v26;
    }
    else
    {
      do
      {
        v27 = *(_OWORD *)(v15 - 40);
        v28 = *(_OWORD *)(v15 - 24);
        v29 = v26 - 40;
        *(_DWORD *)(v26 - 8) = *((_DWORD *)v15 - 2);
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        v15 -= 40;
        v26 -= 40;
      }
      while (v15 != v20);
    }
    *a1 = v29;
    a1[1] = (unint64_t)v19;
    a1[2] = (unint64_t)v14;
    if (v20)
    {
      operator delete(v20);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    v9[20] = 0;
    *((_WORD *)v9 + 42) = 0;
    *((_QWORD *)v9 + 11) = 0x600000005;
    v9[24] = 0;
    *((_QWORD *)v9 + 13) = 0;
    v9[28] = 1;
    v19 = (char *)(v9 + 30);
  }
  a1[1] = (unint64_t)v19;
  if (v19 >= v14)
  {
    v31 = (char *)*a1;
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v19[-*a1] >> 3);
    v33 = v32 + 1;
    if (v32 + 1 > 0x666666666666666)
      sub_2367C3440();
    v34 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v31) >> 3);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0x333333333333333)
      v35 = 0x666666666666666;
    else
      v35 = v33;
    if (v35)
    {
      v35 = (unint64_t)sub_2367DC0A4(v35);
      v31 = (char *)*a1;
      v19 = (char *)a1[1];
    }
    else
    {
      v36 = 0;
    }
    v37 = v35 + 40 * v32;
    *(_WORD *)(v37 + 4) = 6;
    *(_DWORD *)v37 = 0;
    v14 = (char *)(v35 + 40 * v36);
    *(_QWORD *)(v37 + 8) = 0x1600000015;
    *(_DWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = 0;
    *(_DWORD *)(v37 + 32) = 1;
    v30 = (char *)(v37 + 40);
    if (v19 == v31)
    {
      v40 = v37;
    }
    else
    {
      do
      {
        v38 = *(_OWORD *)(v19 - 40);
        v39 = *(_OWORD *)(v19 - 24);
        v40 = v37 - 40;
        *(_DWORD *)(v37 - 8) = *((_DWORD *)v19 - 2);
        *(_OWORD *)(v37 - 24) = v39;
        *(_OWORD *)(v37 - 40) = v38;
        v19 -= 40;
        v37 -= 40;
      }
      while (v19 != v31);
    }
    *a1 = v40;
    a1[1] = (unint64_t)v30;
    a1[2] = (unint64_t)v14;
    if (v31)
    {
      operator delete(v31);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v19 = 0;
    *((_WORD *)v19 + 2) = 6;
    *((_QWORD *)v19 + 1) = 0x1600000015;
    *((_DWORD *)v19 + 4) = 0;
    *((_QWORD *)v19 + 3) = 0;
    *((_DWORD *)v19 + 8) = 1;
    v30 = v19 + 40;
  }
  a1[1] = (unint64_t)v30;
  if (v30 >= v14)
  {
    v42 = (char *)*a1;
    v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v30[-*a1] >> 3);
    v44 = v43 + 1;
    if (v43 + 1 > 0x666666666666666)
      sub_2367C3440();
    v45 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v42) >> 3);
    if (2 * v45 > v44)
      v44 = 2 * v45;
    if (v45 >= 0x333333333333333)
      v46 = 0x666666666666666;
    else
      v46 = v44;
    if (v46)
    {
      v46 = (unint64_t)sub_2367DC0A4(v46);
      v42 = (char *)*a1;
      v30 = (char *)a1[1];
    }
    else
    {
      v47 = 0;
    }
    v48 = v46 + 40 * v43;
    *(_WORD *)(v48 + 4) = 2;
    *(_DWORD *)v48 = 0;
    v14 = (char *)(v46 + 40 * v47);
    *(_QWORD *)(v48 + 8) = 0x800000007;
    *(_DWORD *)(v48 + 16) = 0;
    *(_QWORD *)(v48 + 24) = 0;
    *(_DWORD *)(v48 + 32) = 1;
    v41 = (char *)(v48 + 40);
    if (v30 == v42)
    {
      v51 = v48;
    }
    else
    {
      do
      {
        v49 = *(_OWORD *)(v30 - 40);
        v50 = *(_OWORD *)(v30 - 24);
        v51 = v48 - 40;
        *(_DWORD *)(v48 - 8) = *((_DWORD *)v30 - 2);
        *(_OWORD *)(v48 - 24) = v50;
        *(_OWORD *)(v48 - 40) = v49;
        v30 -= 40;
        v48 -= 40;
      }
      while (v30 != v42);
    }
    *a1 = v51;
    a1[1] = (unint64_t)v41;
    a1[2] = (unint64_t)v14;
    if (v42)
    {
      operator delete(v42);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v30 = 0;
    *((_WORD *)v30 + 2) = 2;
    *((_QWORD *)v30 + 1) = 0x800000007;
    *((_DWORD *)v30 + 4) = 0;
    *((_QWORD *)v30 + 3) = 0;
    *((_DWORD *)v30 + 8) = 1;
    v41 = v30 + 40;
  }
  a1[1] = (unint64_t)v41;
  if (v41 >= v14)
  {
    v53 = (char *)*a1;
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v41[-*a1] >> 3);
    v55 = v54 + 1;
    if (v54 + 1 > 0x666666666666666)
      sub_2367C3440();
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v53) >> 3);
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0x333333333333333)
      v57 = 0x666666666666666;
    else
      v57 = v55;
    if (v57)
    {
      v57 = (unint64_t)sub_2367DC0A4(v57);
      v53 = (char *)*a1;
      v41 = (char *)a1[1];
    }
    else
    {
      v58 = 0;
    }
    v59 = v57 + 40 * v54;
    *(_WORD *)(v59 + 4) = -1;
    *(_DWORD *)v59 = 0;
    v14 = (char *)(v57 + 40 * v58);
    *(_QWORD *)(v59 + 8) = 0;
    *(_DWORD *)(v59 + 16) = 5;
    *(_QWORD *)(v59 + 24) = 0;
    *(_DWORD *)(v59 + 32) = 1;
    v52 = (char *)(v59 + 40);
    if (v41 == v53)
    {
      v62 = v59;
    }
    else
    {
      do
      {
        v60 = *(_OWORD *)(v41 - 40);
        v61 = *(_OWORD *)(v41 - 24);
        v62 = v59 - 40;
        *(_DWORD *)(v59 - 8) = *((_DWORD *)v41 - 2);
        *(_OWORD *)(v59 - 24) = v61;
        *(_OWORD *)(v59 - 40) = v60;
        v41 -= 40;
        v59 -= 40;
      }
      while (v41 != v53);
    }
    *a1 = v62;
    a1[1] = (unint64_t)v52;
    a1[2] = (unint64_t)v14;
    if (v53)
    {
      operator delete(v53);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v41 = 0;
    *((_WORD *)v41 + 2) = -1;
    *((_QWORD *)v41 + 1) = 0;
    *((_DWORD *)v41 + 4) = 5;
    *((_QWORD *)v41 + 3) = 0;
    v52 = v41 + 40;
    *((_DWORD *)v41 + 8) = 1;
  }
  a1[1] = (unint64_t)v52;
  if (v52 >= v14)
  {
    v64 = (char *)*a1;
    v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v52[-*a1] >> 3);
    v66 = v65 + 1;
    if (v65 + 1 > 0x666666666666666)
      sub_2367C3440();
    v67 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v64) >> 3);
    if (2 * v67 > v66)
      v66 = 2 * v67;
    if (v67 >= 0x333333333333333)
      v68 = 0x666666666666666;
    else
      v68 = v66;
    if (v68)
    {
      v68 = (unint64_t)sub_2367DC0A4(v68);
      v64 = (char *)*a1;
      v52 = (char *)a1[1];
    }
    else
    {
      v69 = 0;
    }
    v70 = v68 + 40 * v65;
    *(_WORD *)(v70 + 4) = -1;
    *(_DWORD *)v70 = 0;
    v14 = (char *)(v68 + 40 * v69);
    *(_QWORD *)(v70 + 8) = 0;
    *(_DWORD *)(v70 + 16) = 5;
    *(_QWORD *)(v70 + 24) = 0;
    *(_DWORD *)(v70 + 32) = 1;
    v63 = (char *)(v70 + 40);
    if (v52 == v64)
    {
      v73 = v70;
    }
    else
    {
      do
      {
        v71 = *(_OWORD *)(v52 - 40);
        v72 = *(_OWORD *)(v52 - 24);
        v73 = v70 - 40;
        *(_DWORD *)(v70 - 8) = *((_DWORD *)v52 - 2);
        *(_OWORD *)(v70 - 24) = v72;
        *(_OWORD *)(v70 - 40) = v71;
        v52 -= 40;
        v70 -= 40;
      }
      while (v52 != v64);
    }
    *a1 = v73;
    a1[1] = (unint64_t)v63;
    a1[2] = (unint64_t)v14;
    if (v64)
    {
      operator delete(v64);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v52 = 0;
    *((_WORD *)v52 + 2) = -1;
    *((_QWORD *)v52 + 1) = 0;
    *((_DWORD *)v52 + 4) = 5;
    *((_QWORD *)v52 + 3) = 0;
    v63 = v52 + 40;
    *((_DWORD *)v52 + 8) = 1;
  }
  a1[1] = (unint64_t)v63;
  if (v63 >= v14)
  {
    v75 = (char *)*a1;
    v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v63[-*a1] >> 3);
    v77 = v76 + 1;
    if (v76 + 1 > 0x666666666666666)
      sub_2367C3440();
    v78 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v75) >> 3);
    if (2 * v78 > v77)
      v77 = 2 * v78;
    if (v78 >= 0x333333333333333)
      v79 = 0x666666666666666;
    else
      v79 = v77;
    if (v79)
    {
      v79 = (unint64_t)sub_2367DC0A4(v79);
      v75 = (char *)*a1;
      v63 = (char *)a1[1];
    }
    else
    {
      v80 = 0;
    }
    v81 = v79 + 40 * v76;
    *(_DWORD *)v81 = 5;
    *(_WORD *)(v81 + 4) = 7;
    v14 = (char *)(v79 + 40 * v80);
    *(_QWORD *)(v81 + 8) = 0xA00000009;
    *(_DWORD *)(v81 + 16) = 0;
    *(_QWORD *)(v81 + 24) = 0;
    *(_DWORD *)(v81 + 32) = 1;
    v74 = (char *)(v81 + 40);
    if (v63 == v75)
    {
      v84 = v81;
    }
    else
    {
      do
      {
        v82 = *(_OWORD *)(v63 - 40);
        v83 = *(_OWORD *)(v63 - 24);
        v84 = v81 - 40;
        *(_DWORD *)(v81 - 8) = *((_DWORD *)v63 - 2);
        *(_OWORD *)(v81 - 24) = v83;
        *(_OWORD *)(v81 - 40) = v82;
        v63 -= 40;
        v81 -= 40;
      }
      while (v63 != v75);
    }
    *a1 = v84;
    a1[1] = (unint64_t)v74;
    a1[2] = (unint64_t)v14;
    if (v75)
    {
      operator delete(v75);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v63 = 5;
    *((_WORD *)v63 + 2) = 7;
    *((_QWORD *)v63 + 1) = 0xA00000009;
    *((_DWORD *)v63 + 4) = 0;
    *((_QWORD *)v63 + 3) = 0;
    *((_DWORD *)v63 + 8) = 1;
    v74 = v63 + 40;
  }
  a1[1] = (unint64_t)v74;
  if (v74 >= v14)
  {
    v86 = (char *)*a1;
    v87 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v74[-*a1] >> 3);
    v88 = v87 + 1;
    if (v87 + 1 > 0x666666666666666)
      sub_2367C3440();
    v89 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v86) >> 3);
    if (2 * v89 > v88)
      v88 = 2 * v89;
    if (v89 >= 0x333333333333333)
      v90 = 0x666666666666666;
    else
      v90 = v88;
    if (v90)
    {
      v90 = (unint64_t)sub_2367DC0A4(v90);
      v86 = (char *)*a1;
      v74 = (char *)a1[1];
    }
    else
    {
      v91 = 0;
    }
    v92 = v90 + 40 * v87;
    *(_DWORD *)v92 = 5;
    *(_WORD *)(v92 + 4) = 7;
    v14 = (char *)(v90 + 40 * v91);
    *(_QWORD *)(v92 + 8) = 0x100000000FLL;
    *(_DWORD *)(v92 + 16) = 0;
    *(_QWORD *)(v92 + 24) = 0;
    *(_DWORD *)(v92 + 32) = 1;
    v85 = (char *)(v92 + 40);
    if (v74 == v86)
    {
      v95 = v92;
    }
    else
    {
      do
      {
        v93 = *(_OWORD *)(v74 - 40);
        v94 = *(_OWORD *)(v74 - 24);
        v95 = v92 - 40;
        *(_DWORD *)(v92 - 8) = *((_DWORD *)v74 - 2);
        *(_OWORD *)(v92 - 24) = v94;
        *(_OWORD *)(v92 - 40) = v93;
        v74 -= 40;
        v92 -= 40;
      }
      while (v74 != v86);
    }
    *a1 = v95;
    a1[1] = (unint64_t)v85;
    a1[2] = (unint64_t)v14;
    if (v86)
    {
      operator delete(v86);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v74 = 5;
    *((_WORD *)v74 + 2) = 7;
    *((_QWORD *)v74 + 1) = 0x100000000FLL;
    *((_DWORD *)v74 + 4) = 0;
    *((_QWORD *)v74 + 3) = 0;
    *((_DWORD *)v74 + 8) = 1;
    v85 = v74 + 40;
  }
  a1[1] = (unint64_t)v85;
  if (v85 >= v14)
  {
    v97 = (char *)*a1;
    v98 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v85[-*a1] >> 3);
    v99 = v98 + 1;
    if (v98 + 1 > 0x666666666666666)
      sub_2367C3440();
    v100 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v97) >> 3);
    if (2 * v100 > v99)
      v99 = 2 * v100;
    if (v100 >= 0x333333333333333)
      v101 = 0x666666666666666;
    else
      v101 = v99;
    if (v101)
    {
      v101 = (unint64_t)sub_2367DC0A4(v101);
      v97 = (char *)*a1;
      v85 = (char *)a1[1];
    }
    else
    {
      v102 = 0;
    }
    v103 = v101 + 40 * v98;
    *(_DWORD *)v103 = 11;
    *(_WORD *)(v103 + 4) = 7;
    v14 = (char *)(v101 + 40 * v102);
    *(_QWORD *)(v103 + 8) = 0xC0000000BLL;
    *(_DWORD *)(v103 + 16) = 0;
    *(_QWORD *)(v103 + 24) = 0;
    *(_DWORD *)(v103 + 32) = 1;
    v96 = (char *)(v103 + 40);
    if (v85 == v97)
    {
      v106 = v103;
    }
    else
    {
      do
      {
        v104 = *(_OWORD *)(v85 - 40);
        v105 = *(_OWORD *)(v85 - 24);
        v106 = v103 - 40;
        *(_DWORD *)(v103 - 8) = *((_DWORD *)v85 - 2);
        *(_OWORD *)(v103 - 24) = v105;
        *(_OWORD *)(v103 - 40) = v104;
        v85 -= 40;
        v103 -= 40;
      }
      while (v85 != v97);
    }
    *a1 = v106;
    a1[1] = (unint64_t)v96;
    a1[2] = (unint64_t)v14;
    if (v97)
    {
      operator delete(v97);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v85 = 11;
    *((_WORD *)v85 + 2) = 7;
    *((_QWORD *)v85 + 1) = 0xC0000000BLL;
    *((_DWORD *)v85 + 4) = 0;
    *((_QWORD *)v85 + 3) = 0;
    *((_DWORD *)v85 + 8) = 1;
    v96 = v85 + 40;
  }
  a1[1] = (unint64_t)v96;
  if (v96 >= v14)
  {
    v108 = (char *)*a1;
    v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v96[-*a1] >> 3);
    v110 = v109 + 1;
    if (v109 + 1 > 0x666666666666666)
      sub_2367C3440();
    v111 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v108) >> 3);
    if (2 * v111 > v110)
      v110 = 2 * v111;
    if (v111 >= 0x333333333333333)
      v112 = 0x666666666666666;
    else
      v112 = v110;
    if (v112)
    {
      v112 = (unint64_t)sub_2367DC0A4(v112);
      v108 = (char *)*a1;
      v96 = (char *)a1[1];
    }
    else
    {
      v113 = 0;
    }
    v114 = v112 + 40 * v109;
    *(_DWORD *)v114 = 3;
    *(_WORD *)(v114 + 4) = 7;
    v14 = (char *)(v112 + 40 * v113);
    *(_QWORD *)(v114 + 8) = 0xE0000000DLL;
    *(_DWORD *)(v114 + 16) = 0;
    *(_QWORD *)(v114 + 24) = 0;
    *(_DWORD *)(v114 + 32) = 1;
    v107 = (char *)(v114 + 40);
    if (v96 == v108)
    {
      v117 = v114;
    }
    else
    {
      do
      {
        v115 = *(_OWORD *)(v96 - 40);
        v116 = *(_OWORD *)(v96 - 24);
        v117 = v114 - 40;
        *(_DWORD *)(v114 - 8) = *((_DWORD *)v96 - 2);
        *(_OWORD *)(v114 - 24) = v116;
        *(_OWORD *)(v114 - 40) = v115;
        v96 -= 40;
        v114 -= 40;
      }
      while (v96 != v108);
    }
    *a1 = v117;
    a1[1] = (unint64_t)v107;
    a1[2] = (unint64_t)v14;
    if (v108)
    {
      operator delete(v108);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v96 = 3;
    *((_WORD *)v96 + 2) = 7;
    *((_QWORD *)v96 + 1) = 0xE0000000DLL;
    *((_DWORD *)v96 + 4) = 0;
    *((_QWORD *)v96 + 3) = 0;
    *((_DWORD *)v96 + 8) = 1;
    v107 = v96 + 40;
  }
  a1[1] = (unint64_t)v107;
  if (v107 >= v14)
  {
    v119 = (char *)*a1;
    v120 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v107[-*a1] >> 3);
    v121 = v120 + 1;
    if (v120 + 1 > 0x666666666666666)
      sub_2367C3440();
    v122 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v119) >> 3);
    if (2 * v122 > v121)
      v121 = 2 * v122;
    if (v122 >= 0x333333333333333)
      v123 = 0x666666666666666;
    else
      v123 = v121;
    if (v123)
    {
      v123 = (unint64_t)sub_2367DC0A4(v123);
      v119 = (char *)*a1;
      v107 = (char *)a1[1];
    }
    else
    {
      v124 = 0;
    }
    v125 = v123 + 40 * v120;
    *(_DWORD *)v125 = 0;
    *(_WORD *)(v125 + 4) = -1;
    v14 = (char *)(v123 + 40 * v124);
    *(_QWORD *)(v125 + 8) = 0;
    *(_DWORD *)(v125 + 16) = 1;
    *(_QWORD *)(v125 + 24) = 0;
    *(_DWORD *)(v125 + 32) = 1;
    v118 = (char *)(v125 + 40);
    if (v107 == v119)
    {
      v128 = v125;
    }
    else
    {
      do
      {
        v126 = *(_OWORD *)(v107 - 40);
        v127 = *(_OWORD *)(v107 - 24);
        v128 = v125 - 40;
        *(_DWORD *)(v125 - 8) = *((_DWORD *)v107 - 2);
        *(_OWORD *)(v125 - 24) = v127;
        *(_OWORD *)(v125 - 40) = v126;
        v107 -= 40;
        v125 -= 40;
      }
      while (v107 != v119);
    }
    *a1 = v128;
    a1[1] = (unint64_t)v118;
    a1[2] = (unint64_t)v14;
    if (v119)
    {
      operator delete(v119);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v107 = 0;
    *((_WORD *)v107 + 2) = -1;
    *((_QWORD *)v107 + 1) = 0;
    *((_DWORD *)v107 + 4) = 1;
    *((_QWORD *)v107 + 3) = 0;
    v118 = v107 + 40;
    *((_DWORD *)v107 + 8) = 1;
  }
  a1[1] = (unint64_t)v118;
  if (v118 >= v14)
  {
    v130 = (char *)*a1;
    v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v118[-*a1] >> 3);
    v132 = v131 + 1;
    if (v131 + 1 > 0x666666666666666)
      sub_2367C3440();
    v133 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v130) >> 3);
    if (2 * v133 > v132)
      v132 = 2 * v133;
    if (v133 >= 0x333333333333333)
      v134 = 0x666666666666666;
    else
      v134 = v132;
    if (v134)
    {
      v134 = (unint64_t)sub_2367DC0A4(v134);
      v130 = (char *)*a1;
      v118 = (char *)a1[1];
    }
    else
    {
      v135 = 0;
    }
    v136 = v134 + 40 * v131;
    *(_DWORD *)v136 = 0;
    *(_WORD *)(v136 + 4) = -1;
    v14 = (char *)(v134 + 40 * v135);
    *(_QWORD *)(v136 + 8) = 0;
    *(_DWORD *)(v136 + 16) = 1;
    *(_QWORD *)(v136 + 24) = 0;
    *(_DWORD *)(v136 + 32) = 1;
    v129 = (char *)(v136 + 40);
    if (v118 == v130)
    {
      v139 = v136;
    }
    else
    {
      do
      {
        v137 = *(_OWORD *)(v118 - 40);
        v138 = *(_OWORD *)(v118 - 24);
        v139 = v136 - 40;
        *(_DWORD *)(v136 - 8) = *((_DWORD *)v118 - 2);
        *(_OWORD *)(v136 - 24) = v138;
        *(_OWORD *)(v136 - 40) = v137;
        v118 -= 40;
        v136 -= 40;
      }
      while (v118 != v130);
    }
    *a1 = v139;
    a1[1] = (unint64_t)v129;
    a1[2] = (unint64_t)v14;
    if (v130)
    {
      operator delete(v130);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v118 = 0;
    *((_WORD *)v118 + 2) = -1;
    *((_QWORD *)v118 + 1) = 0;
    *((_DWORD *)v118 + 4) = 1;
    *((_QWORD *)v118 + 3) = 0;
    v129 = v118 + 40;
    *((_DWORD *)v118 + 8) = 1;
  }
  a1[1] = (unint64_t)v129;
  if (v129 >= v14)
  {
    v141 = (char *)*a1;
    v142 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v129[-*a1] >> 3);
    v143 = v142 + 1;
    if (v142 + 1 > 0x666666666666666)
      sub_2367C3440();
    v144 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v141) >> 3);
    if (2 * v144 > v143)
      v143 = 2 * v144;
    if (v144 >= 0x333333333333333)
      v145 = 0x666666666666666;
    else
      v145 = v143;
    if (v145)
    {
      v145 = (unint64_t)sub_2367DC0A4(v145);
      v141 = (char *)*a1;
      v129 = (char *)a1[1];
    }
    else
    {
      v146 = 0;
    }
    v147 = v145 + 40 * v142;
    *(_DWORD *)v147 = 0;
    *(_WORD *)(v147 + 4) = -1;
    v14 = (char *)(v145 + 40 * v146);
    *(_QWORD *)(v147 + 8) = 0;
    *(_DWORD *)(v147 + 16) = 1;
    *(_QWORD *)(v147 + 24) = 0;
    *(_DWORD *)(v147 + 32) = 1;
    v140 = (char *)(v147 + 40);
    if (v129 == v141)
    {
      v150 = v147;
    }
    else
    {
      do
      {
        v148 = *(_OWORD *)(v129 - 40);
        v149 = *(_OWORD *)(v129 - 24);
        v150 = v147 - 40;
        *(_DWORD *)(v147 - 8) = *((_DWORD *)v129 - 2);
        *(_OWORD *)(v147 - 24) = v149;
        *(_OWORD *)(v147 - 40) = v148;
        v129 -= 40;
        v147 -= 40;
      }
      while (v129 != v141);
    }
    *a1 = v150;
    a1[1] = (unint64_t)v140;
    a1[2] = (unint64_t)v14;
    if (v141)
    {
      operator delete(v141);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v129 = 0;
    *((_WORD *)v129 + 2) = -1;
    *((_QWORD *)v129 + 1) = 0;
    *((_DWORD *)v129 + 4) = 1;
    *((_QWORD *)v129 + 3) = 0;
    v140 = v129 + 40;
    *((_DWORD *)v129 + 8) = 1;
  }
  a1[1] = (unint64_t)v140;
  if (v140 >= v14)
  {
    v152 = (char *)*a1;
    v153 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v140[-*a1] >> 3);
    v154 = v153 + 1;
    if (v153 + 1 > 0x666666666666666)
      sub_2367C3440();
    v155 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v152) >> 3);
    if (2 * v155 > v154)
      v154 = 2 * v155;
    if (v155 >= 0x333333333333333)
      v156 = 0x666666666666666;
    else
      v156 = v154;
    if (v156)
    {
      v156 = (unint64_t)sub_2367DC0A4(v156);
      v152 = (char *)*a1;
      v140 = (char *)a1[1];
    }
    else
    {
      v157 = 0;
    }
    v158 = v156 + 40 * v153;
    *(_DWORD *)v158 = 0;
    *(_WORD *)(v158 + 4) = -1;
    v14 = (char *)(v156 + 40 * v157);
    *(_QWORD *)(v158 + 8) = 0;
    *(_DWORD *)(v158 + 16) = 1;
    *(_QWORD *)(v158 + 24) = 0;
    *(_DWORD *)(v158 + 32) = 1;
    v151 = (char *)(v158 + 40);
    if (v140 == v152)
    {
      v161 = v158;
    }
    else
    {
      do
      {
        v159 = *(_OWORD *)(v140 - 40);
        v160 = *(_OWORD *)(v140 - 24);
        v161 = v158 - 40;
        *(_DWORD *)(v158 - 8) = *((_DWORD *)v140 - 2);
        *(_OWORD *)(v158 - 24) = v160;
        *(_OWORD *)(v158 - 40) = v159;
        v140 -= 40;
        v158 -= 40;
      }
      while (v140 != v152);
    }
    *a1 = v161;
    a1[1] = (unint64_t)v151;
    a1[2] = (unint64_t)v14;
    if (v152)
    {
      operator delete(v152);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v140 = 0;
    *((_WORD *)v140 + 2) = -1;
    *((_QWORD *)v140 + 1) = 0;
    *((_DWORD *)v140 + 4) = 1;
    *((_QWORD *)v140 + 3) = 0;
    v151 = v140 + 40;
    *((_DWORD *)v140 + 8) = 1;
  }
  a1[1] = (unint64_t)v151;
  if (v151 >= v14)
  {
    v163 = (char *)*a1;
    v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v151[-*a1] >> 3);
    v165 = v164 + 1;
    if (v164 + 1 > 0x666666666666666)
      sub_2367C3440();
    v166 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v163) >> 3);
    if (2 * v166 > v165)
      v165 = 2 * v166;
    if (v166 >= 0x333333333333333)
      v167 = 0x666666666666666;
    else
      v167 = v165;
    if (v167)
    {
      v167 = (unint64_t)sub_2367DC0A4(v167);
      v163 = (char *)*a1;
      v151 = (char *)a1[1];
    }
    else
    {
      v168 = 0;
    }
    v169 = v167 + 40 * v164;
    *(_DWORD *)v169 = 11;
    *(_WORD *)(v169 + 4) = 7;
    v14 = (char *)(v167 + 40 * v168);
    *(_QWORD *)(v169 + 8) = 0x1200000011;
    *(_DWORD *)(v169 + 16) = 0;
    *(_QWORD *)(v169 + 24) = 0;
    *(_DWORD *)(v169 + 32) = 1;
    v162 = (char *)(v169 + 40);
    if (v151 == v163)
    {
      v172 = v169;
    }
    else
    {
      do
      {
        v170 = *(_OWORD *)(v151 - 40);
        v171 = *(_OWORD *)(v151 - 24);
        v172 = v169 - 40;
        *(_DWORD *)(v169 - 8) = *((_DWORD *)v151 - 2);
        *(_OWORD *)(v169 - 24) = v171;
        *(_OWORD *)(v169 - 40) = v170;
        v151 -= 40;
        v169 -= 40;
      }
      while (v151 != v163);
    }
    *a1 = v172;
    a1[1] = (unint64_t)v162;
    a1[2] = (unint64_t)v14;
    if (v163)
    {
      operator delete(v163);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v151 = 11;
    *((_WORD *)v151 + 2) = 7;
    *((_QWORD *)v151 + 1) = 0x1200000011;
    *((_DWORD *)v151 + 4) = 0;
    *((_QWORD *)v151 + 3) = 0;
    *((_DWORD *)v151 + 8) = 1;
    v162 = v151 + 40;
  }
  a1[1] = (unint64_t)v162;
  if (v162 >= v14)
  {
    v174 = (char *)*a1;
    v175 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v162[-*a1] >> 3);
    v176 = v175 + 1;
    if (v175 + 1 > 0x666666666666666)
      sub_2367C3440();
    v177 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v174) >> 3);
    if (2 * v177 > v176)
      v176 = 2 * v177;
    if (v177 >= 0x333333333333333)
      v178 = 0x666666666666666;
    else
      v178 = v176;
    if (v178)
    {
      v178 = (unint64_t)sub_2367DC0A4(v178);
      v174 = (char *)*a1;
      v162 = (char *)a1[1];
    }
    else
    {
      v179 = 0;
    }
    v180 = v178 + 40 * v175;
    *(_DWORD *)v180 = 3;
    *(_WORD *)(v180 + 4) = 7;
    v14 = (char *)(v178 + 40 * v179);
    *(_QWORD *)(v180 + 8) = 0x1400000013;
    *(_DWORD *)(v180 + 16) = 0;
    *(_QWORD *)(v180 + 24) = 0;
    *(_DWORD *)(v180 + 32) = 1;
    v173 = (char *)(v180 + 40);
    if (v162 == v174)
    {
      v183 = v180;
    }
    else
    {
      do
      {
        v181 = *(_OWORD *)(v162 - 40);
        v182 = *(_OWORD *)(v162 - 24);
        v183 = v180 - 40;
        *(_DWORD *)(v180 - 8) = *((_DWORD *)v162 - 2);
        *(_OWORD *)(v180 - 24) = v182;
        *(_OWORD *)(v180 - 40) = v181;
        v162 -= 40;
        v180 -= 40;
      }
      while (v162 != v174);
    }
    *a1 = v183;
    a1[1] = (unint64_t)v173;
    a1[2] = (unint64_t)v14;
    if (v174)
    {
      operator delete(v174);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v162 = 3;
    *((_WORD *)v162 + 2) = 7;
    *((_QWORD *)v162 + 1) = 0x1400000013;
    *((_DWORD *)v162 + 4) = 0;
    *((_QWORD *)v162 + 3) = 0;
    *((_DWORD *)v162 + 8) = 1;
    v173 = v162 + 40;
  }
  a1[1] = (unint64_t)v173;
  if (v173 >= v14)
  {
    v185 = (char *)*a1;
    v186 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v173[-*a1] >> 3);
    v187 = v186 + 1;
    if (v186 + 1 > 0x666666666666666)
      sub_2367C3440();
    v188 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v185) >> 3);
    if (2 * v188 > v187)
      v187 = 2 * v188;
    if (v188 >= 0x333333333333333)
      v189 = 0x666666666666666;
    else
      v189 = v187;
    if (v189)
    {
      v189 = (unint64_t)sub_2367DC0A4(v189);
      v185 = (char *)*a1;
      v173 = (char *)a1[1];
    }
    else
    {
      v190 = 0;
    }
    v191 = v189 + 40 * v186;
    *(_DWORD *)v191 = 0;
    *(_WORD *)(v191 + 4) = -1;
    v14 = (char *)(v189 + 40 * v190);
    *(_QWORD *)(v191 + 8) = 0;
    *(_DWORD *)(v191 + 16) = 0;
    *(_QWORD *)(v191 + 24) = 0;
    *(_DWORD *)(v191 + 32) = 1;
    v184 = (char *)(v191 + 40);
    if (v173 == v185)
    {
      v194 = v191;
    }
    else
    {
      do
      {
        v192 = *(_OWORD *)(v173 - 40);
        v193 = *(_OWORD *)(v173 - 24);
        v194 = v191 - 40;
        *(_DWORD *)(v191 - 8) = *((_DWORD *)v173 - 2);
        *(_OWORD *)(v191 - 24) = v193;
        *(_OWORD *)(v191 - 40) = v192;
        v173 -= 40;
        v191 -= 40;
      }
      while (v173 != v185);
    }
    *a1 = v194;
    a1[1] = (unint64_t)v184;
    a1[2] = (unint64_t)v14;
    if (v185)
    {
      operator delete(v185);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v173 = 0;
    *((_WORD *)v173 + 2) = -1;
    *((_QWORD *)v173 + 1) = 0;
    *((_DWORD *)v173 + 4) = 0;
    *((_QWORD *)v173 + 3) = 0;
    v184 = v173 + 40;
    *((_DWORD *)v173 + 8) = 1;
  }
  a1[1] = (unint64_t)v184;
  if (v184 >= v14)
  {
    v196 = (char *)*a1;
    v197 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v184[-*a1] >> 3);
    v198 = v197 + 1;
    if (v197 + 1 > 0x666666666666666)
      sub_2367C3440();
    v199 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v196) >> 3);
    if (2 * v199 > v198)
      v198 = 2 * v199;
    if (v199 >= 0x333333333333333)
      v200 = 0x666666666666666;
    else
      v200 = v198;
    if (v200)
    {
      v200 = (unint64_t)sub_2367DC0A4(v200);
      v196 = (char *)*a1;
      v184 = (char *)a1[1];
    }
    else
    {
      v201 = 0;
    }
    v202 = v200 + 40 * v197;
    *(_DWORD *)v202 = 0;
    *(_WORD *)(v202 + 4) = -1;
    v14 = (char *)(v200 + 40 * v201);
    *(_QWORD *)(v202 + 8) = 0;
    *(_DWORD *)(v202 + 16) = 0;
    *(_QWORD *)(v202 + 24) = 0;
    *(_DWORD *)(v202 + 32) = 1;
    v195 = (char *)(v202 + 40);
    if (v184 == v196)
    {
      v205 = v202;
    }
    else
    {
      do
      {
        v203 = *(_OWORD *)(v184 - 40);
        v204 = *(_OWORD *)(v184 - 24);
        v205 = v202 - 40;
        *(_DWORD *)(v202 - 8) = *((_DWORD *)v184 - 2);
        *(_OWORD *)(v202 - 24) = v204;
        *(_OWORD *)(v202 - 40) = v203;
        v184 -= 40;
        v202 -= 40;
      }
      while (v184 != v196);
    }
    *a1 = v205;
    a1[1] = (unint64_t)v195;
    a1[2] = (unint64_t)v14;
    if (v196)
    {
      operator delete(v196);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v184 = 0;
    *((_WORD *)v184 + 2) = -1;
    *((_QWORD *)v184 + 1) = 0;
    *((_DWORD *)v184 + 4) = 0;
    *((_QWORD *)v184 + 3) = 0;
    v195 = v184 + 40;
    *((_DWORD *)v184 + 8) = 1;
  }
  a1[1] = (unint64_t)v195;
  if (v195 >= v14)
  {
    v207 = (char *)*a1;
    v208 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v195[-*a1] >> 3);
    v209 = v208 + 1;
    if (v208 + 1 > 0x666666666666666)
      sub_2367C3440();
    v210 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v207) >> 3);
    if (2 * v210 > v209)
      v209 = 2 * v210;
    if (v210 >= 0x333333333333333)
      v211 = 0x666666666666666;
    else
      v211 = v209;
    if (v211)
    {
      v211 = (unint64_t)sub_2367DC0A4(v211);
      v207 = (char *)*a1;
      v195 = (char *)a1[1];
    }
    else
    {
      v212 = 0;
    }
    v213 = v211 + 40 * v208;
    *(_DWORD *)v213 = 0;
    *(_WORD *)(v213 + 4) = -1;
    v14 = (char *)(v211 + 40 * v212);
    *(_QWORD *)(v213 + 8) = 0;
    *(_DWORD *)(v213 + 16) = 0;
    *(_QWORD *)(v213 + 24) = 0;
    *(_DWORD *)(v213 + 32) = 1;
    v206 = (char *)(v213 + 40);
    if (v195 == v207)
    {
      v216 = v213;
    }
    else
    {
      do
      {
        v214 = *(_OWORD *)(v195 - 40);
        v215 = *(_OWORD *)(v195 - 24);
        v216 = v213 - 40;
        *(_DWORD *)(v213 - 8) = *((_DWORD *)v195 - 2);
        *(_OWORD *)(v213 - 24) = v215;
        *(_OWORD *)(v213 - 40) = v214;
        v195 -= 40;
        v213 -= 40;
      }
      while (v195 != v207);
    }
    *a1 = v216;
    a1[1] = (unint64_t)v206;
    a1[2] = (unint64_t)v14;
    if (v207)
    {
      operator delete(v207);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v195 = 0;
    *((_WORD *)v195 + 2) = -1;
    *((_QWORD *)v195 + 1) = 0;
    *((_DWORD *)v195 + 4) = 0;
    *((_QWORD *)v195 + 3) = 0;
    v206 = v195 + 40;
    *((_DWORD *)v195 + 8) = 1;
  }
  a1[1] = (unint64_t)v206;
  if (v206 >= v14)
  {
    v218 = (char *)*a1;
    v219 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v206[-*a1] >> 3);
    v220 = v219 + 1;
    if (v219 + 1 > 0x666666666666666)
      sub_2367C3440();
    v221 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v218) >> 3);
    if (2 * v221 > v220)
      v220 = 2 * v221;
    if (v221 >= 0x333333333333333)
      v222 = 0x666666666666666;
    else
      v222 = v220;
    if (v222)
    {
      v222 = (unint64_t)sub_2367DC0A4(v222);
      v218 = (char *)*a1;
      v206 = (char *)a1[1];
    }
    else
    {
      v223 = 0;
    }
    v224 = v222 + 40 * v219;
    *(_DWORD *)v224 = 0;
    *(_WORD *)(v224 + 4) = -1;
    v14 = (char *)(v222 + 40 * v223);
    *(_QWORD *)(v224 + 8) = 0;
    *(_DWORD *)(v224 + 16) = 0;
    *(_QWORD *)(v224 + 24) = 0;
    *(_DWORD *)(v224 + 32) = 1;
    v217 = (char *)(v224 + 40);
    if (v206 == v218)
    {
      v227 = v224;
    }
    else
    {
      do
      {
        v225 = *(_OWORD *)(v206 - 40);
        v226 = *(_OWORD *)(v206 - 24);
        v227 = v224 - 40;
        *(_DWORD *)(v224 - 8) = *((_DWORD *)v206 - 2);
        *(_OWORD *)(v224 - 24) = v226;
        *(_OWORD *)(v224 - 40) = v225;
        v206 -= 40;
        v224 -= 40;
      }
      while (v206 != v218);
    }
    *a1 = v227;
    a1[1] = (unint64_t)v217;
    a1[2] = (unint64_t)v14;
    if (v218)
    {
      operator delete(v218);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v206 = 0;
    *((_WORD *)v206 + 2) = -1;
    *((_QWORD *)v206 + 1) = 0;
    *((_DWORD *)v206 + 4) = 0;
    *((_QWORD *)v206 + 3) = 0;
    v217 = v206 + 40;
    *((_DWORD *)v206 + 8) = 1;
  }
  a1[1] = (unint64_t)v217;
  if (v217 >= v14)
  {
    v229 = (char *)*a1;
    v230 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v217[-*a1] >> 3);
    v231 = v230 + 1;
    if (v230 + 1 > 0x666666666666666)
      sub_2367C3440();
    v232 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v229) >> 3);
    if (2 * v232 > v231)
      v231 = 2 * v232;
    if (v232 >= 0x333333333333333)
      v233 = 0x666666666666666;
    else
      v233 = v231;
    if (v233)
    {
      v233 = (unint64_t)sub_2367DC0A4(v233);
      v229 = (char *)*a1;
      v217 = (char *)a1[1];
    }
    else
    {
      v234 = 0;
    }
    v235 = v233 + 40 * v230;
    *(_WORD *)(v235 + 4) = 7;
    *(_DWORD *)v235 = 0;
    v14 = (char *)(v233 + 40 * v234);
    *(_QWORD *)(v235 + 8) = 0x1800000017;
    *(_DWORD *)(v235 + 16) = 0;
    *(_QWORD *)(v235 + 24) = 0;
    *(_DWORD *)(v235 + 32) = 1;
    v228 = (char *)(v235 + 40);
    if (v217 == v229)
    {
      v238 = v235;
    }
    else
    {
      do
      {
        v236 = *(_OWORD *)(v217 - 40);
        v237 = *(_OWORD *)(v217 - 24);
        v238 = v235 - 40;
        *(_DWORD *)(v235 - 8) = *((_DWORD *)v217 - 2);
        *(_OWORD *)(v235 - 24) = v237;
        *(_OWORD *)(v235 - 40) = v236;
        v217 -= 40;
        v235 -= 40;
      }
      while (v217 != v229);
    }
    *a1 = v238;
    a1[1] = (unint64_t)v228;
    a1[2] = (unint64_t)v14;
    if (v229)
    {
      operator delete(v229);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v217 = 0;
    *((_WORD *)v217 + 2) = 7;
    *((_QWORD *)v217 + 1) = 0x1800000017;
    *((_DWORD *)v217 + 4) = 0;
    *((_QWORD *)v217 + 3) = 0;
    *((_DWORD *)v217 + 8) = 1;
    v228 = v217 + 40;
  }
  a1[1] = (unint64_t)v228;
  if (v228 >= v14)
  {
    v240 = (char *)*a1;
    v241 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v228[-*a1] >> 3);
    v242 = v241 + 1;
    if (v241 + 1 > 0x666666666666666)
      sub_2367C3440();
    v243 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v240) >> 3);
    if (2 * v243 > v242)
      v242 = 2 * v243;
    if (v243 >= 0x333333333333333)
      v244 = 0x666666666666666;
    else
      v244 = v242;
    if (v244)
    {
      v244 = (unint64_t)sub_2367DC0A4(v244);
      v240 = (char *)*a1;
      v228 = (char *)a1[1];
    }
    else
    {
      v245 = 0;
    }
    v246 = v244 + 40 * v241;
    *(_WORD *)(v246 + 4) = 7;
    *(_DWORD *)v246 = 0;
    v14 = (char *)(v244 + 40 * v245);
    *(_QWORD *)(v246 + 8) = 0x1A00000019;
    *(_DWORD *)(v246 + 16) = 0;
    *(_QWORD *)(v246 + 24) = 0;
    *(_DWORD *)(v246 + 32) = 1;
    v239 = (char *)(v246 + 40);
    if (v228 == v240)
    {
      v249 = v246;
    }
    else
    {
      do
      {
        v247 = *(_OWORD *)(v228 - 40);
        v248 = *(_OWORD *)(v228 - 24);
        v249 = v246 - 40;
        *(_DWORD *)(v246 - 8) = *((_DWORD *)v228 - 2);
        *(_OWORD *)(v246 - 24) = v248;
        *(_OWORD *)(v246 - 40) = v247;
        v228 -= 40;
        v246 -= 40;
      }
      while (v228 != v240);
    }
    *a1 = v249;
    a1[1] = (unint64_t)v239;
    a1[2] = (unint64_t)v14;
    if (v240)
    {
      operator delete(v240);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v228 = 0;
    *((_WORD *)v228 + 2) = 7;
    *((_QWORD *)v228 + 1) = 0x1A00000019;
    *((_DWORD *)v228 + 4) = 0;
    *((_QWORD *)v228 + 3) = 0;
    *((_DWORD *)v228 + 8) = 1;
    v239 = v228 + 40;
  }
  a1[1] = (unint64_t)v239;
  if (v239 >= v14)
  {
    v251 = (char *)*a1;
    v252 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v239[-*a1] >> 3);
    v253 = v252 + 1;
    if (v252 + 1 > 0x666666666666666)
      sub_2367C3440();
    v254 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v251) >> 3);
    if (2 * v254 > v253)
      v253 = 2 * v254;
    if (v254 >= 0x333333333333333)
      v255 = 0x666666666666666;
    else
      v255 = v253;
    if (v255)
    {
      v255 = (unint64_t)sub_2367DC0A4(v255);
      v251 = (char *)*a1;
      v239 = (char *)a1[1];
    }
    else
    {
      v256 = 0;
    }
    v257 = v255 + 40 * v252;
    *(_DWORD *)v257 = 0;
    *(_WORD *)(v257 + 4) = -1;
    v14 = (char *)(v255 + 40 * v256);
    *(_QWORD *)(v257 + 8) = 0;
    *(_DWORD *)(v257 + 16) = 0;
    *(_QWORD *)(v257 + 24) = 0;
    *(_DWORD *)(v257 + 32) = 1;
    v250 = (char *)(v257 + 40);
    if (v239 == v251)
    {
      v260 = v257;
    }
    else
    {
      do
      {
        v258 = *(_OWORD *)(v239 - 40);
        v259 = *(_OWORD *)(v239 - 24);
        v260 = v257 - 40;
        *(_DWORD *)(v257 - 8) = *((_DWORD *)v239 - 2);
        *(_OWORD *)(v257 - 24) = v259;
        *(_OWORD *)(v257 - 40) = v258;
        v239 -= 40;
        v257 -= 40;
      }
      while (v239 != v251);
    }
    *a1 = v260;
    a1[1] = (unint64_t)v250;
    a1[2] = (unint64_t)v14;
    if (v251)
    {
      operator delete(v251);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v239 = 0;
    *((_WORD *)v239 + 2) = -1;
    *((_QWORD *)v239 + 1) = 0;
    *((_DWORD *)v239 + 4) = 0;
    *((_QWORD *)v239 + 3) = 0;
    v250 = v239 + 40;
    *((_DWORD *)v239 + 8) = 1;
  }
  a1[1] = (unint64_t)v250;
  if (v250 >= v14)
  {
    v262 = (char *)*a1;
    v263 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v250[-*a1] >> 3);
    v264 = v263 + 1;
    if (v263 + 1 > 0x666666666666666)
      sub_2367C3440();
    v265 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v262) >> 3);
    if (2 * v265 > v264)
      v264 = 2 * v265;
    if (v265 >= 0x333333333333333)
      v266 = 0x666666666666666;
    else
      v266 = v264;
    if (v266)
    {
      v266 = (unint64_t)sub_2367DC0A4(v266);
      v262 = (char *)*a1;
      v250 = (char *)a1[1];
    }
    else
    {
      v267 = 0;
    }
    v268 = v266 + 40 * v263;
    *(_DWORD *)v268 = 0;
    *(_WORD *)(v268 + 4) = -1;
    v14 = (char *)(v266 + 40 * v267);
    *(_QWORD *)(v268 + 8) = 0;
    *(_DWORD *)(v268 + 16) = 0;
    *(_QWORD *)(v268 + 24) = 0;
    *(_DWORD *)(v268 + 32) = 1;
    v261 = (char *)(v268 + 40);
    if (v250 == v262)
    {
      v271 = v268;
    }
    else
    {
      do
      {
        v269 = *(_OWORD *)(v250 - 40);
        v270 = *(_OWORD *)(v250 - 24);
        v271 = v268 - 40;
        *(_DWORD *)(v268 - 8) = *((_DWORD *)v250 - 2);
        *(_OWORD *)(v268 - 24) = v270;
        *(_OWORD *)(v268 - 40) = v269;
        v250 -= 40;
        v268 -= 40;
      }
      while (v250 != v262);
    }
    *a1 = v271;
    a1[1] = (unint64_t)v261;
    a1[2] = (unint64_t)v14;
    if (v262)
    {
      operator delete(v262);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v250 = 0;
    *((_WORD *)v250 + 2) = -1;
    *((_QWORD *)v250 + 1) = 0;
    *((_DWORD *)v250 + 4) = 0;
    *((_QWORD *)v250 + 3) = 0;
    v261 = v250 + 40;
    *((_DWORD *)v250 + 8) = 1;
  }
  a1[1] = (unint64_t)v261;
  if (v261 >= v14)
  {
    v273 = (char *)*a1;
    v274 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v261[-*a1] >> 3);
    v275 = v274 + 1;
    if (v274 + 1 > 0x666666666666666)
      sub_2367C3440();
    v276 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v273) >> 3);
    if (2 * v276 > v275)
      v275 = 2 * v276;
    if (v276 >= 0x333333333333333)
      v277 = 0x666666666666666;
    else
      v277 = v275;
    if (v277)
    {
      v277 = (unint64_t)sub_2367DC0A4(v277);
      v273 = (char *)*a1;
      v261 = (char *)a1[1];
    }
    else
    {
      v278 = 0;
    }
    v279 = v277 + 40 * v274;
    *(_DWORD *)v279 = 0;
    *(_WORD *)(v279 + 4) = -1;
    v14 = (char *)(v277 + 40 * v278);
    *(_QWORD *)(v279 + 8) = 0;
    *(_DWORD *)(v279 + 16) = 0;
    *(_QWORD *)(v279 + 24) = 0;
    *(_DWORD *)(v279 + 32) = 1;
    v272 = (char *)(v279 + 40);
    if (v261 == v273)
    {
      v282 = v279;
    }
    else
    {
      do
      {
        v280 = *(_OWORD *)(v261 - 40);
        v281 = *(_OWORD *)(v261 - 24);
        v282 = v279 - 40;
        *(_DWORD *)(v279 - 8) = *((_DWORD *)v261 - 2);
        *(_OWORD *)(v279 - 24) = v281;
        *(_OWORD *)(v279 - 40) = v280;
        v261 -= 40;
        v279 -= 40;
      }
      while (v261 != v273);
    }
    *a1 = v282;
    a1[1] = (unint64_t)v272;
    a1[2] = (unint64_t)v14;
    if (v273)
    {
      operator delete(v273);
      v14 = (char *)a1[2];
    }
  }
  else
  {
    *(_DWORD *)v261 = 0;
    *((_WORD *)v261 + 2) = -1;
    *((_QWORD *)v261 + 1) = 0;
    *((_DWORD *)v261 + 4) = 0;
    *((_QWORD *)v261 + 3) = 0;
    v272 = v261 + 40;
    *((_DWORD *)v261 + 8) = 1;
  }
  a1[1] = (unint64_t)v272;
  if (v272 >= v14)
  {
    v284 = (char *)*a1;
    v285 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v272[-*a1] >> 3);
    v286 = v285 + 1;
    if (v285 + 1 > 0x666666666666666)
      sub_2367C3440();
    v287 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v284) >> 3);
    if (2 * v287 > v286)
      v286 = 2 * v287;
    if (v287 >= 0x333333333333333)
      v288 = 0x666666666666666;
    else
      v288 = v286;
    if (v288)
    {
      v288 = (unint64_t)sub_2367DC0A4(v288);
      v284 = (char *)*a1;
      v272 = (char *)a1[1];
    }
    else
    {
      v289 = 0;
    }
    v290 = v288 + 40 * v285;
    *(_DWORD *)v290 = 0;
    *(_WORD *)(v290 + 4) = -1;
    v291 = v288 + 40 * v289;
    *(_QWORD *)(v290 + 8) = 0;
    *(_DWORD *)(v290 + 16) = 0;
    *(_QWORD *)(v290 + 24) = 0;
    *(_DWORD *)(v290 + 32) = 1;
    v283 = v290 + 40;
    if (v272 == v284)
    {
      v294 = v290;
    }
    else
    {
      do
      {
        v292 = *(_OWORD *)(v272 - 40);
        v293 = *(_OWORD *)(v272 - 24);
        v294 = v290 - 40;
        *(_DWORD *)(v290 - 8) = *((_DWORD *)v272 - 2);
        *(_OWORD *)(v290 - 24) = v293;
        *(_OWORD *)(v290 - 40) = v292;
        v272 -= 40;
        v290 -= 40;
      }
      while (v272 != v284);
    }
    *a1 = v294;
    a1[1] = v283;
    a1[2] = v291;
    if (v284)
      operator delete(v284);
  }
  else
  {
    *(_DWORD *)v272 = 0;
    *((_WORD *)v272 + 2) = -1;
    *((_QWORD *)v272 + 1) = 0;
    *((_DWORD *)v272 + 4) = 0;
    *((_QWORD *)v272 + 3) = 0;
    v283 = (unint64_t)(v272 + 40);
    *((_DWORD *)v272 + 8) = 1;
  }
  a1[1] = v283;
}

void sub_23686F494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23686F524(unint64_t *a1, __int16 a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  void **v43;
  void **v44;
  unint64_t v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;

  v8 = __clz(a5) ^ 0x3F;
  if ((a5 & (a5 - 1)) != 0)
    ++v8;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v55 = 0u;
  v56 = 0u;
  if (v8 >= 0xE)
    v9 = 0;
  else
    v9 = 112 - 8 * v8;
  v51 = v9;
  *(_OWORD *)__p = 0uLL;
  v10 = (char *)operator new(0x28uLL);
  v11 = v10 + 40;
  *(_DWORD *)v10 = 0;
  *((_WORD *)v10 + 2) = -1;
  *((_QWORD *)v10 + 1) = 0;
  *((_DWORD *)v10 + 4) = a4;
  *((_QWORD *)v10 + 3) = 0;
  *((_DWORD *)v10 + 8) = 1;
  *a1 = (unint64_t)v10;
  a1[1] = (unint64_t)(v10 + 40);
  a1[2] = (unint64_t)(v10 + 40);
  v48 = a3;
  v12 = (uint64_t)(a3[1] - *a3) >> 2;
  v52.n128_u64[0] = 0;
  v52.n128_u64[1] = v12;
  v53 = 0;
  sub_23686FA28((uint64_t)__p, &v52);
  v13 = *((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v14 = v10 + 40;
    while (1)
    {
      while (1)
      {
        v15 = a4;
        v16 = (char *)__p[1];
        v17 = v56;
        v18 = (unint64_t *)(*((_QWORD *)__p[1] + (unint64_t)v56 / 0xAA)
                                 + 24 * ((unint64_t)v56 % 0xAA));
        v19 = *v18;
        v20 = v18[1];
        v21 = v18[2];
        --v13;
        *(_QWORD *)&v56 = v56 + 1;
        *((_QWORD *)&v56 + 1) = v13;
        if ((unint64_t)v56 >= 0x154)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = v16 + 8;
          *(_QWORD *)&v56 = v17 - 169;
        }
        if (v19 + v51 < v20)
          break;
        a4 = v15;
        if (!v13)
          goto LABEL_48;
      }
      v22 = v20 + v19;
      v23 = (v20 + v19) >> 1;
      v24 = &v10[40 * v21];
      *(_DWORD *)v24 = *(_DWORD *)(*v48 + 4 * v23);
      *((_WORD *)v24 + 2) = a2;
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 3);
      *((_DWORD *)v24 + 2) = v25;
      *((_DWORD *)v24 + 3) = v25 + 1;
      *((_DWORD *)v24 + 4) = 0;
      *((_QWORD *)v24 + 3) = 0;
      *((_DWORD *)v24 + 8) = 1;
      v52.n128_u64[0] = (v23 + 1);
      v52.n128_u64[1] = v20;
      v53 = v25;
      sub_23686FA28((uint64_t)__p, &v52);
      if (v14 >= v11)
      {
        v27 = (char *)*a1;
        v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-*a1] >> 3);
        v29 = v28 + 1;
        if (v28 + 1 > 0x666666666666666)
          sub_2367C3440();
        if (0x999999999999999ALL * ((v11 - v27) >> 3) > v29)
          v29 = 0x999999999999999ALL * ((v11 - v27) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v27) >> 3) >= 0x333333333333333)
          v30 = 0x666666666666666;
        else
          v30 = v29;
        if (v30)
          v30 = (unint64_t)sub_2367DC0A4(v30);
        else
          v31 = 0;
        v32 = v30 + 40 * v28;
        *(_DWORD *)v32 = 0;
        *(_WORD *)(v32 + 4) = -1;
        *(_QWORD *)(v32 + 8) = 0;
        a4 = v15;
        *(_DWORD *)(v32 + 16) = v15;
        *(_QWORD *)(v32 + 24) = 0;
        *(_DWORD *)(v32 + 32) = 1;
        v33 = v32;
        if (v14 != v27)
        {
          do
          {
            v34 = *(_OWORD *)(v14 - 40);
            v35 = *(_OWORD *)(v14 - 24);
            *(_DWORD *)(v33 - 8) = *((_DWORD *)v14 - 2);
            *(_OWORD *)(v33 - 24) = v35;
            *(_OWORD *)(v33 - 40) = v34;
            v33 -= 40;
            v14 -= 40;
          }
          while (v14 != v27);
          v14 = v27;
        }
        v26 = (char *)(v32 + 40);
        *a1 = v33;
        a1[1] = v32 + 40;
        a1[2] = v30 + 40 * v31;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v14 = 0;
        *((_WORD *)v14 + 2) = -1;
        *((_QWORD *)v14 + 1) = 0;
        a4 = v15;
        *((_DWORD *)v14 + 4) = v15;
        *((_QWORD *)v14 + 3) = 0;
        v26 = v14 + 40;
        *((_DWORD *)v14 + 8) = 1;
      }
      a1[1] = (unint64_t)v26;
      v52.n128_u64[0] = v19;
      v52.n128_u64[1] = (v22 >> 1);
      v10 = (char *)*a1;
      v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v26[-*a1] >> 3);
      v53 = v36;
      sub_23686FA28((uint64_t)__p, &v52);
      v11 = (char *)a1[2];
      if (v26 >= v11)
        break;
      *(_DWORD *)v26 = 0;
      *((_WORD *)v26 + 2) = -1;
      *((_QWORD *)v26 + 1) = 0;
      *((_DWORD *)v26 + 4) = a4;
      *((_QWORD *)v26 + 3) = 0;
      v14 = v26 + 40;
      *((_DWORD *)v26 + 8) = 1;
LABEL_47:
      a1[1] = (unint64_t)v14;
      v13 = *((_QWORD *)&v56 + 1);
      if (!*((_QWORD *)&v56 + 1))
        goto LABEL_48;
    }
    v37 = v36 + 1;
    if (v36 + 1 > 0x666666666666666)
      sub_2367C3440();
    if (0x999999999999999ALL * ((v11 - v10) >> 3) > v37)
      v37 = 0x999999999999999ALL * ((v11 - v10) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3) >= 0x333333333333333)
      v38 = 0x666666666666666;
    else
      v38 = v37;
    if (v38)
      v38 = (unint64_t)sub_2367DC0A4(v38);
    else
      v39 = 0;
    v40 = (char *)(v38 + 40 * v36);
    *(_DWORD *)v40 = 0;
    *((_WORD *)v40 + 2) = -1;
    *((_QWORD *)v40 + 1) = 0;
    v11 = (char *)(v38 + 40 * v39);
    *((_DWORD *)v40 + 4) = a4;
    *((_QWORD *)v40 + 3) = 0;
    *((_DWORD *)v40 + 8) = 1;
    v14 = v40 + 40;
    if (v26 == v10)
    {
      *a1 = (unint64_t)v40;
      a1[1] = (unint64_t)v14;
      v10 = v26;
      a1[2] = (unint64_t)v11;
    }
    else
    {
      do
      {
        v41 = *(_OWORD *)(v26 - 40);
        v42 = *(_OWORD *)(v26 - 24);
        *((_DWORD *)v40 - 2) = *((_DWORD *)v26 - 2);
        *(_OWORD *)(v40 - 24) = v42;
        *(_OWORD *)(v40 - 40) = v41;
        v40 -= 40;
        v26 -= 40;
      }
      while (v26 != v10);
      *a1 = (unint64_t)v40;
      a1[1] = (unint64_t)v14;
      a1[2] = (unint64_t)v11;
      if (!v10)
        goto LABEL_46;
    }
    operator delete(v10);
LABEL_46:
    v10 = v40;
    goto LABEL_47;
  }
LABEL_48:
  v43 = (void **)__p[1];
  v44 = (void **)v55;
  v45 = v55 - (unint64_t)__p[1];
  if ((unint64_t)v55 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      v46 = *v43++;
      operator delete(v46);
      v45 -= 8;
    }
    while (v45 > 0x10);
  }
  while (v43 != v44)
  {
    v47 = *v43++;
    operator delete(v47);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_23686F9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  va_list va;

  va_start(va, a9);
  sub_23686FF88((uint64_t)va);
  v10 = *(void **)a5;
  if (*(_QWORD *)a5)
  {
    *(_QWORD *)(a5 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

__n128 sub_23686FA28(uint64_t a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  char *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  __n128 *v45;
  __n128 result;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  size_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;

  v4 = *(char **)(a1 + 16);
  v5 = *(char **)(a1 + 8);
  v6 = (v4 - v5) >> 3;
  v7 = v4 - v5;
  if (v4 == v5)
    v8 = 0;
  else
    v8 = 170 * v6 - 1;
  v9 = *(_QWORD *)(a1 + 32);
  if (v8 == *(_QWORD *)(a1 + 40) + v9)
  {
    v10 = v9 >= 0xAA;
    v11 = v9 - 170;
    if (v10)
    {
      *(_QWORD *)(a1 + 32) = v11;
      v14 = *(_QWORD *)v5;
      v12 = v5 + 8;
      v13 = v14;
      *(_QWORD *)(a1 + 8) = v12;
      if (v4 == *(char **)(a1 + 24))
      {
        v15 = *(char **)a1;
        if ((unint64_t)v12 <= *(_QWORD *)a1)
        {
          if (v4 == v15)
            v36 = 1;
          else
            v36 = (v4 - v15) >> 2;
          if (v36 >> 61)
            goto LABEL_98;
          v37 = (char *)operator new(8 * v36);
          v38 = &v37[8 * (v36 >> 2)];
          v40 = v4 - v12;
          v39 = v4 == v12;
          v4 = v38;
          if (!v39)
          {
            v4 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
            v41 = 8 * (v40 >> 3);
            v42 = &v37[8 * (v36 >> 2)];
            do
            {
              v43 = *(_QWORD *)v12;
              v12 += 8;
              *(_QWORD *)v42 = v43;
              v42 += 8;
              v41 -= 8;
            }
            while (v41);
          }
          *(_QWORD *)a1 = v37;
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = v4;
          *(_QWORD *)(a1 + 24) = &v37[8 * v36];
          if (v15)
          {
            operator delete(v15);
            v4 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v16 = (uint64_t)&v12[-*(_QWORD *)a1] >> 3;
          if (v16 >= -1)
            v17 = v16 + 1;
          else
            v17 = v16 + 2;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v12[-8 * v19];
          v21 = v4 - v12;
          if (v4 != v12)
          {
            memmove(&v12[-8 * v19], v12, v4 - v12);
            v4 = *(char **)(a1 + 8);
          }
          v22 = &v4[8 * v18];
          v4 = &v20[v21];
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v13;
      goto LABEL_37;
    }
    v23 = *(char **)(a1 + 24);
    v24 = *(char **)a1;
    v25 = (uint64_t)&v23[-*(_QWORD *)a1];
    if (v6 < (unint64_t)(v25 >> 3))
    {
      v26 = operator new(0xFF0uLL);
      v27 = v26;
      if (v23 != v4)
      {
        *(_QWORD *)v4 = v26;
LABEL_37:
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_38;
      }
      if (v5 == v24)
      {
        if (v4 == v5)
          v64 = 1;
        else
          v64 = (v23 - v5) >> 2;
        if (v64 >> 61)
          goto LABEL_98;
        v65 = (char *)operator new(8 * v64);
        v47 = &v65[(2 * v64 + 6) & 0xFFFFFFFFFFFFFFF8];
        v66 = v47;
        if (v4 != v5)
        {
          v67 = 8 * v6;
          v68 = &v65[(2 * v64 + 6) & 0xFFFFFFFFFFFFFFF8];
          v69 = v5;
          v66 = &v47[8 * v6];
          do
          {
            v70 = *(_QWORD *)v69;
            v69 += 8;
            *(_QWORD *)v68 = v70;
            v68 += 8;
            v67 -= 8;
          }
          while (v67);
        }
        *(_QWORD *)a1 = v65;
        *(_QWORD *)(a1 + 8) = v47;
        *(_QWORD *)(a1 + 16) = v66;
        *(_QWORD *)(a1 + 24) = &v65[8 * v64];
        if (v5)
        {
          operator delete(v5);
          v47 = *(char **)(a1 + 8);
        }
      }
      else
      {
        v47 = v5;
      }
      *((_QWORD *)v47 - 1) = v27;
      v71 = *(char **)(a1 + 8);
      v72 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v71 - 8;
      v73 = *((_QWORD *)v71 - 1);
      *(_QWORD *)(a1 + 8) = v71;
      if (v72 != *(char **)(a1 + 24))
      {
LABEL_96:
        *(_QWORD *)v72 = v73;
        goto LABEL_37;
      }
      v74 = *(char **)a1;
      if ((unint64_t)v71 > *(_QWORD *)a1)
      {
        v75 = (uint64_t)&v71[-*(_QWORD *)a1] >> 3;
        if (v75 >= -1)
          v76 = v75 + 1;
        else
          v76 = v75 + 2;
        v77 = -(v76 >> 1);
        v78 = v76 >> 1;
        v79 = &v71[-8 * v78];
        v80 = v72 - v71;
        if (v80)
        {
          memmove(&v71[-8 * v78], v71, v80);
          v71 = *(char **)(a1 + 8);
        }
        v72 = &v79[v80];
        *(_QWORD *)(a1 + 8) = &v71[8 * v77];
        *(_QWORD *)(a1 + 16) = v72;
        goto LABEL_96;
      }
      if (v72 == v74)
        v81 = 1;
      else
        v81 = (v72 - v74) >> 2;
      if (!(v81 >> 61))
      {
        v82 = (char *)operator new(8 * v81);
        v83 = &v82[8 * (v81 >> 2)];
        v84 = v72 - v71;
        v39 = v72 == v71;
        v72 = v83;
        if (!v39)
        {
          v72 = &v83[v84 & 0xFFFFFFFFFFFFFFF8];
          v85 = 8 * (v84 >> 3);
          v86 = &v82[8 * (v81 >> 2)];
          do
          {
            v87 = *(_QWORD *)v71;
            v71 += 8;
            *(_QWORD *)v86 = v87;
            v86 += 8;
            v85 -= 8;
          }
          while (v85);
        }
        *(_QWORD *)a1 = v82;
        *(_QWORD *)(a1 + 8) = v83;
        *(_QWORD *)(a1 + 16) = v72;
        *(_QWORD *)(a1 + 24) = &v82[8 * v81];
        if (v74)
        {
          operator delete(v74);
          v72 = *(char **)(a1 + 16);
        }
        goto LABEL_96;
      }
LABEL_98:
      sub_2367C3488();
    }
    v28 = v25 >> 2;
    if (v23 == v24)
      v29 = 1;
    else
      v29 = v28;
    if (v29 >> 61)
      goto LABEL_98;
    v30 = (char *)operator new(8 * v29);
    v31 = operator new(0xFF0uLL);
    v32 = &v30[8 * v6];
    v33 = &v30[8 * v29];
    if (v6 == v29)
    {
      v34 = v31;
      if (v7 < 1)
      {
        if (v4 == v5)
          v48 = 1;
        else
          v48 = v7 >> 2;
        if (v48 >> 61)
          sub_2367C3488();
        v32 = (char *)operator new(8 * v48);
        v33 = &v32[8 * v48];
        operator delete(v30);
        v5 = *(char **)(a1 + 8);
        v4 = *(char **)(a1 + 16);
        v30 = v32;
      }
      else
      {
        v35 = v6 + 2;
        if (v6 >= -1)
          v35 = v6 + 1;
        v32 -= 8 * (v35 >> 1);
      }
      v31 = v34;
    }
    *(_QWORD *)v32 = v31;
    v49 = v32 + 8;
    if (v4 == v5)
    {
      v62 = v32;
      v51 = v32 + 8;
    }
    else
    {
      do
      {
        if (v32 == v30)
        {
          if (v49 >= v33)
          {
            if (v33 == v32)
              v54 = 1;
            else
              v54 = (v33 - v32) >> 2;
            if (v54 >> 61)
              sub_2367C3488();
            v55 = (char *)operator new(8 * v54);
            v30 = v55;
            v50 = &v55[(2 * v54 + 6) & 0xFFFFFFFFFFFFFFF8];
            v51 = v50;
            v56 = v49 - v32;
            if (v49 != v32)
            {
              v51 = &v50[v56 & 0xFFFFFFFFFFFFFFF8];
              v57 = 8 * (v56 >> 3);
              v58 = &v55[(2 * v54 + 6) & 0xFFFFFFFFFFFFFFF8];
              v59 = v32;
              do
              {
                v60 = *(_QWORD *)v59;
                v59 += 8;
                *(_QWORD *)v58 = v60;
                v58 += 8;
                v57 -= 8;
              }
              while (v57);
            }
            v33 = &v55[8 * v54];
            operator delete(v32);
          }
          else
          {
            v52 = (v33 - v49) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v51 = &v49[8 * (v53 >> 1)];
            v50 = &v32[8 * (v53 >> 1)];
            if (v49 == v32)
            {
              v30 = v49;
            }
            else
            {
              memmove(&v32[8 * (v53 >> 1)], v32, v49 - v32);
              v30 = v32;
            }
          }
        }
        else
        {
          v50 = v32;
          v51 = v49;
        }
        v61 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v50 - 1) = v61;
        v62 = v50 - 8;
        v49 = v51;
        v32 = v62;
      }
      while (v4 != *(char **)(a1 + 8));
    }
    v63 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v62;
    *(_QWORD *)(a1 + 16) = v51;
    *(_QWORD *)(a1 + 24) = v33;
    if (v63)
      operator delete(v63);
  }
LABEL_38:
  v44 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
  v45 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v44 / 0xAA)) + 24 * (v44 % 0xAA));
  result = *a2;
  v45[1].n128_u64[0] = a2[1].n128_u64[0];
  *v45 = result;
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_23686FF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23686FF88(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 170;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23687004C(char **a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  _WORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t *v21;
  int8x16_t *v22;
  uint64x2_t v23;
  uint64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float v27;
  float v28;
  int8x16_t v29;
  int8x16_t *v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  int32x2_t v35;
  int8x16_t *v36;
  unint64_t v37;
  int8x16_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned __int16 *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  char v77;
  unsigned int *v78;
  unsigned int v79;
  void **v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  float v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unint64_t v90;
  char **v91;
  unsigned int v92;
  float *v93;
  float v94;
  char *v95;
  float v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  char *v114;
  unsigned __int8 *v115;
  unsigned __int16 *v116;
  unsigned __int8 *v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  int32x4_t *v126;
  int32x4_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t i;
  float v132;
  float v133;
  float v134;
  int v135;
  float v137;
  float v138;
  float v139;
  unint64_t v140;
  float *v141;
  float v142;
  float *v143;
  int *v144;
  uint64_t *v145;
  float *v146;
  float *v147;
  unint64_t v148;
  uint64_t v149;
  float v150;
  float v151;
  unint64_t v152;
  int v154;
  _BOOL4 v155;
  unint64_t *v156;
  float *v157;
  float *v158;
  unint64_t *v159;
  unint64_t v160;
  float *v161;
  unint64_t *v162;
  float *v163;
  BOOL v164;
  _BOOL4 v165;
  unint64_t *v166;
  float *v167;
  unint64_t *v168;
  float *v169;
  uint64_t *v170;
  uint64_t *v171;
  float v172;
  float v173;
  unint64_t *v174;
  float *v175;
  float *v176;
  float v177;
  float *v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  char *v183;
  char *v184;
  char *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  char *v196;
  char **v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t *v219;
  uint64_t *v220;
  __int16 v221;
  uint64_t v222;
  uint64_t **v223;
  uint64_t *v224;
  char v225;
  uint64_t v226;
  uint64_t *v227;
  __int16 v228;
  uint64_t v229;
  char **v230;
  int8x16_t *v231;
  int8x16_t *v232;
  int8x16_t *v233;
  float *v234;
  uint64_t v235;
  uint64_t v236;
  char **v237;
  float *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  int8x16_t v245;
  int8x16_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  int8x16_t *v251;
  unint64_t v252;
  char *v253;
  int8x16_t *v254;
  int8x16_t *v255;
  int8x16_t v256;
  int8x16_t v257;
  _QWORD *v258;
  _QWORD *v260;
  _WORD *v261;
  uint64_t v262;
  float v263;
  uint64_t v264;
  uint64_t v265;
  int8x16_t *v267;
  int8x16_t *v268;
  uint64_t v269;
  int8x16_t *v270;
  char *v271;
  int8x16_t *v272;
  int8x16_t *v273;
  int8x16_t *v274;
  void *v275;
  void *v276;
  float v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  _DWORD *v283;
  _DWORD *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t __n;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t **v294;
  float32x2_t v295;
  int *v296;
  unsigned int *v297;
  unint64_t v298;
  unint64_t v299;
  _DWORD *v300;
  int v301;
  uint64_t *v302;
  uint64_t v303;
  _DWORD *v304;
  float *v305;
  unint64_t v306;
  unint64_t v307;
  void *__p[3];
  void *__dst[3];
  void *v310;
  void *v311;
  uint64_t v312;
  void *v313;
  void *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319[2];
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  unint64_t v323;
  int32x2_t v324;
  uint64_t v325;
  void *v326[3];
  void *v327[3];
  uint64_t v328;
  int v329;
  uint64_t v330;
  _QWORD v331[2];
  uint64_t v332;
  int v333;
  uint64_t v334;
  _QWORD v335[2];
  uint64_t v336;
  int v337;
  uint64_t v338;
  _QWORD v339[2];
  uint64_t v340;
  int v341;
  uint64_t v342;
  _QWORD v343[2];
  int8x16_t v344;
  uint64_t v345;
  uint64_t v346;

  v346 = *MEMORY[0x24BDAC8D0];
  if (*a2 != a2[1] && *(_QWORD *)*a2 != *(_QWORD *)(*a2 + 8))
  {
    v13 = a2 + 22;
    v12 = (void *)a2[22];
    v14 = a2[21];
    if (v12)
    {
      a2[23] = v12;
      operator delete(v12);
    }
    *v13 = 0;
    a2[23] = 0;
    a2[24] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v15 = *(float *)(a4 + 48);
    v263 = *(float *)(a4 + 72);
    v16 = sub_2367DC0A4(1uLL);
    *(_DWORD *)v16 = 0;
    v16[2] = -1;
    *((_QWORD *)v16 + 1) = 0;
    *((_DWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *((_DWORD *)v16 + 8) = 1;
    *a1 = (char *)v16;
    a1[1] = (char *)(v16 + 20);
    a1[2] = (char *)&v16[20 * v17];
    v18 = (_DWORD *)a2[15];
    *((_DWORD *)v16 + 4) = *v18;
    v20 = a2[3];
    v19 = a2[4];
    v21 = (int8x16_t *)operator new(0x30uLL);
    v22 = v21;
    v23.i64[0] = a6;
    v23.i64[1] = a7;
    v24.i64[0] = 0xFFFFFFFFLL;
    v24.i64[1] = 0xFFFFFFFFLL;
    v25 = (int8x16_t)vcgtq_u64(v23, v24);
    v26.i64[0] = 0xFFFFFFFF00000000;
    v26.i64[1] = 0xFFFFFFFF00000000;
    v27 = (float)((float)v14 / (float)a3) * 0.9 + 0.1;
    v28 = v15 * v27;
    v29.i64[0] = 0xFFFFFFFFLL;
    v29.i64[1] = 0xFFFFFFFFLL;
    v30 = v21 + 3;
    v21->i64[0] = 0;
    v21->i64[1] = 0;
    v21[1].i64[0] = (v19 - v20) >> 1;
    v21[1].i64[1] = 0;
    v21[2] = vorrq_s8(vandq_s8(vornq_s8(vandq_s8((int8x16_t)v23, v25), v25), v26), vandq_s8((int8x16_t)v23, v29));
    v284 = (_DWORD *)a2[16];
    v31 = v284 - v18;
    v264 = a2[12];
    v265 = a2[13];
    v32 = (v265 - v264) >> 2;
    v277 = v28;
    v33 = 800.0 / (float)(v28 + 100.0);
    if (v31 <= 1)
      v34 = 1;
    else
      v34 = v284 - v18;
    v291 = v34;
    v35 = vdup_n_s32(0x7F7FFFFFu);
    if (v32 <= 1)
      v32 = 1;
    v282 = v32;
    v295 = (float32x2_t)vpaddq_f32((float32x4_t)0, (float32x4_t)0).u64[0];
    v36 = v21;
    v272 = v21 + 3;
    v294 = (uint64_t **)a2;
    v283 = v18;
    v269 = v284 - v18;
    while (1)
    {
      v37 = v30[-3].u64[1];
      v279 = v30[-3].i64[0];
      v292 = v30[-2].u64[0];
      v287 = v292 - v37;
      if (v292 == v37)
      {
        v30 -= 3;
        goto LABEL_330;
      }
      v38 = v30 - 1;
      v281 = v30[-2].i64[1];
      v273 = v30 - 3;
      v275 = (void *)v30[-1].i64[1];
      v276 = (void *)v30[-1].i64[0];
      v340 = 0;
      v341 = 0;
      v342 = 0;
      v343[0] = v35;
      v343[1] = 0;
      v336 = 0;
      v337 = 0;
      v338 = 0;
      v339[0] = v35;
      v339[1] = 0;
      v332 = 0;
      v333 = 0;
      v334 = 0;
      v335[0] = v35;
      v335[1] = 0;
      v328 = 0;
      v329 = 0;
      v330 = 0;
      v286 = 2 * v37;
      v331[0] = v35;
      v331[1] = 0;
      v270 = v36;
      v39 = 0;
      if (v284 != v18)
      {
        v40 = 0;
        do
        {
          if (v292 > v37)
          {
            v41 = (unsigned __int8 *)((*v294)[3 * v40] + v286);
            v42 = v292 - v37;
            do
            {
              v44 = *v41;
              v41 += 2;
              v43 = v44;
              if (v39 <= (unint64_t)v44 + 1)
                v39 = v43 + 1;
              --v42;
            }
            while (v42);
          }
          ++v40;
        }
        while (v40 != v291);
      }
      v268 = v30;
      v274 = v22;
      v45 = v39 + 3;
      v46 = (v39 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      sub_2367CBE88(v327, v46 * v31);
      sub_2367C3BE4(v326, v31);
      if (v284 != v18)
      {
        v47 = 0;
        v48 = *v294;
        v49 = v327[0];
        v50 = v326[0];
        v51 = (uint64_t)v294[3] + 2 * v37;
        do
        {
          if (v292 > v37)
          {
            v52 = v292 - v37;
            v53 = (unsigned __int8 *)(v48[3 * v47] + v286 + 1);
            v54 = (unsigned __int16 *)v51;
            do
            {
              v56 = *v54++;
              v55 = v56;
              v49[v47 * v46 + *(v53 - 1)] += v56;
              v57 = *v53;
              v53 += 2;
              v50[v47] += v57 * v55;
              --v52;
            }
            while (v52);
          }
          ++v47;
        }
        while (v47 != v291);
      }
      v58 = (uint64_t)&(*a1)[40 * v279];
      v59 = *(_DWORD *)(v58 + 16);
      v296 = (int *)(v58 + 16);
      v60 = (char *)v294[15];
      v61 = (char *)v294[16];
      v267 = v38;
      v271 = *a1;
      v62 = v60;
      if (v60 != v61)
      {
        do
        {
          if (*(_DWORD *)v62 == v59)
            goto LABEL_31;
          v62 += 4;
        }
        while (v62 != v61);
        v62 = (char *)v294[16];
      }
LABEL_31:
      v63 = (char *)(v62 - v60);
      v64 = sub_236875154((int32x4_t *)((char *)v327[0] + 4 * ((unint64_t)(v62 - v60) >> 2) * v46), v46);
      v65 = v64 + (float)*(unsigned int *)((char *)v326[0] + (unint64_t)v63);
      v321 = 0;
      v322 = 0;
      v323 = 0;
      v324 = v35;
      v325 = 0;
      v66 = *a5;
      v67 = a5[1];
      v68 = v67 - *a5;
      v290 = v37;
      if (v67 == *a5)
        goto LABEL_60;
      v69 = 0;
      v70 = v68 / 20;
      if (v70 <= 1)
        v70 = 1;
      do
      {
        LODWORD(v71) = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v319[0] = v276;
        v319[1] = v275;
        v344 = *(int8x16_t *)(v66 + 20 * v69);
        v75 = 1;
        while (1)
        {
          v76 = v71;
          v71 = v73;
LABEL_36:
          v77 = v75;
          v78 = (unsigned int *)&v344 + 2 * v71;
          v79 = *v78;
          v80 = &v319[v71];
          v81 = *((_DWORD *)v80 + 1);
          if (*v78 >= v81)
            break;
          v82 = v78[1];
          v83 = *(_DWORD *)v80;
          if (v82 <= v83)
            break;
          if (v79 > v83)
            goto LABEL_43;
          if (v82 >= v81)
          {
            v75 = 0;
            v71 = 1;
            if ((v77 & 1) == 0)
            {
              LODWORD(v71) = v76;
              if ((v74 & 1) != 0)
                goto LABEL_48;
              *(_DWORD *)&v271[40 * v279 + 32] = *(_DWORD *)(v66 + 20 * v69 + 16);
              goto LABEL_60;
            }
            goto LABEL_36;
          }
          v79 = v82;
LABEL_43:
          v75 = 0;
          v72 = v79 - 1;
          v73 = 1;
          v74 = 1;
          if ((v77 & 1) == 0)
          {
LABEL_48:
            if (v72 <= -511)
              v84 = -511;
            else
              v84 = v72;
            if (v84 >= 511)
              v84 = 511;
            v85 = *(unsigned __int8 *)(v294[18][3 * v71] + (v84 + 511));
            v322 = v85;
            v321 = v71;
            v86 = (float)(v65 * 0.5) - v277;
            *(float *)&v324.i32[1] = v86;
            *(float *)v324.i32 = v86;
            HIDWORD(v325) = v59;
            LODWORD(v325) = v59;
            v323 = v37;
            v87 = v292 - v37;
            if (v292 <= v37)
            {
              v93 = (float *)&v321;
              v94 = (float)(v65 * 0.5) - v277;
              v91 = a1;
              v22 = v274;
              v31 = v269;
            }
            else
            {
              v88 = (unsigned __int8 *)(v294[6][3 * v71] + v37);
              v89 = v37;
              v90 = v37;
              v91 = a1;
              v22 = v274;
              v31 = v269;
              do
              {
                v92 = *v88++;
                if (v92 <= v85)
                  v89 = ++v90;
                --v87;
              }
              while (v87);
              v323 = v89;
              v93 = (float *)&v321;
              v94 = (float)(v65 * 0.5) - v277;
            }
            goto LABEL_227;
          }
        }
        ++v69;
      }
      while (v69 != v70);
LABEL_60:
      v319[1] = 0;
      v319[0] = 0;
      v320 = 0;
      v344 = 0uLL;
      v345 = 0;
      v316 = 0;
      v317 = 0;
      v318 = 0;
      v313 = 0;
      v314 = 0;
      v315 = 0;
      v310 = 0;
      v311 = 0;
      v312 = 0;
      sub_2367CBE88(__dst, v46);
      sub_2367CBE88(__p, v46);
      v95 = 0;
      v96 = INFINITY;
      if (v265 != v264 && v65 > v277)
      {
        v95 = 0;
        v97 = 0;
        __n = 4 * v46;
        v280 = (4 * v45) & 0x7FFFFFFFFFFFFFF0;
        v306 = (4 * v45) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v314 = v313;
          v311 = v310;
          v98 = ((v294[9][3 * v97 + 1] - v294[9][3 * v97]) >> 2) + 1;
          v99 = v98 > (v317 - (uint64_t)v95) >> 3;
          v100 = v98;
          if (v99)
          {
            sub_2367C5284((char **)&v344, v98 * v46);
            sub_2367D7BB0(&v316, v100);
            v98 = v100;
          }
          v319[1] = v319[0];
          sub_2367C5284((char **)v319, v98);
          v101 = v100;
          if (v292 <= v37)
          {
            v102 = 0;
          }
          else
          {
            v102 = 0;
            v103 = v319[0];
            v104 = (unsigned __int8 *)(v294[6][3 * v97] + v37);
            v105 = v287;
            do
            {
              v107 = *v104++;
              v106 = v107;
              ++v103[v107];
              if (v102 <= v107)
                v102 = v106;
              if (v101 >= v106)
                v101 = v106;
              --v105;
            }
            while (v105);
          }
          v298 = v101;
          v299 = v102;
          v108 = v102 - v101;
          sub_2368752D4((char **)&v313, v102 - v101);
          sub_2368752D4((char **)&v310, v108);
          v293 = v97;
          v109 = v298;
          v110 = v299;
          if (v284 != v18)
          {
            v111 = 0;
            v300 = v310;
            v112 = v313;
            v113 = v344.i64[0];
            v114 = v316;
            v304 = v319[0];
            v285 = v344.i64[0] + v306 * v298;
            v289 = v344.i64[0];
            do
            {
              if (v292 > v290)
              {
                v115 = (unsigned __int8 *)((*v294)[3 * v111] + v286 + 1);
                v116 = (unsigned __int16 *)((char *)v294[3] + v286);
                v117 = (unsigned __int8 *)(v294[6][3 * v293] + v290);
                v118 = v287;
                do
                {
                  v120 = *v117++;
                  v119 = v120;
                  v122 = *v116++;
                  v121 = v122;
                  v123 = *(v115 - 1) + v46 * v119;
                  *(_DWORD *)(v113 + 4 * v123) += v122;
                  v124 = *v115;
                  v115 += 2;
                  *(_QWORD *)&v114[8 * v119] += v124 * (unint64_t)v121;
                  --v118;
                }
                while (v118);
              }
              memcpy(__dst[0], (char *)v327[0] + 4 * v111 * v46, __n);
              bzero(__p[0], __n);
              v109 = v298;
              v110 = v299;
              if (v299 > v298)
              {
                v125 = 0;
                v126 = (int32x4_t *)__dst[0];
                v127 = (int32x4_t *)__p[0];
                v297 = (unsigned int *)v326[0];
                v128 = v285;
                v129 = v298;
                v302 = v294[15];
                do
                {
                  if (v304[v129])
                  {
                    v130 = *(_QWORD *)&v114[8 * v129];
                    *(_QWORD *)&v114[8 * v129] = 0;
                    if (v46)
                    {
                      for (i = 0; i != v46; ++i)
                      {
                        v126->i32[i] -= *(_DWORD *)(v128 + 4 * i);
                        v127->i32[i] += *(_DWORD *)(v128 + 4 * i);
                        *(_DWORD *)(v128 + 4 * i) = 0;
                      }
                      v132 = sub_236875154(v126, v46);
                    }
                    else
                    {
                      v132 = vaddv_f32(v295);
                    }
                    v125 += v130;
                    v133 = (float)(v132 + (float)v297[v111]) - (float)v125;
                    v134 = sub_236875154(v127, v46);
                    v135 = *((_DWORD *)v302 + v111);
                    if (*v296 == 6 || v135 == *v296)
                      v137 = 0.0;
                    else
                      v137 = v33;
                    if (v135 == 6)
                    {
                      v138 = v137 + 0.00000001;
                      v137 = v138;
                    }
                    if (!v135)
                    {
                      v139 = v137 + -0.00000001;
                      v137 = v139;
                    }
                    v109 = v298;
                    v140 = v129 - v298;
                    v141 = (float *)&v300[3 * (v129 - v298)];
                    if ((float)(v133 + v137) < (float)(*v141 + v141[1]))
                    {
                      *v141 = v133;
                      v141[1] = v137;
                      v300[3 * v140 + 2] = v135;
                    }
                    v142 = v134 + (float)v125;
                    v143 = (float *)&v112[3 * v140];
                    v110 = v299;
                    if ((float)(v142 + v137) < (float)(*v143 + v143[1]))
                    {
                      *v143 = v142;
                      v143[1] = v137;
                      v112[3 * v140 + 2] = *((_DWORD *)v302 + v111);
                    }
                  }
                  ++v129;
                  v128 += v306;
                }
                while (v129 != v110);
              }
              ++v111;
              v113 = v289;
            }
            while (v111 != v291);
          }
          if (v110 > v109)
          {
            v144 = (int *)v319[0];
            v145 = v294[12];
            v146 = (float *)((char *)v310 + 8);
            v147 = (float *)((char *)v313 + 8);
            v148 = v290;
            do
            {
              v149 = v144[v109];
              if ((_DWORD)v149)
              {
                v150 = *(v146 - 2);
                v151 = *(v147 - 2);
                v152 = v293;
                if (*((_DWORD *)v145 + v293) == 15 && ((1 << v293) & v281) == 0)
                {
                  v155 = v150 == 0.0;
                  if (v151 == 0.0)
                    v155 = 1;
                  if (v155)
                    v168 = (unint64_t *)&v340;
                  else
                    v168 = (unint64_t *)&v336;
                  if (v155)
                    v163 = (float *)v343;
                  else
                    v163 = (float *)v339;
                  if (v155)
                    v158 = (float *)v343 + 1;
                  else
                    v158 = (float *)v339 + 1;
                  if (v293 >= 2)
                    v166 = (unint64_t *)&v332;
                  else
                    v166 = v168;
                  if (v293 >= 2)
                    v163 = (float *)v335;
                  v165 = 1;
                  v167 = (float *)v335 + 1;
                }
                else if (*(_DWORD *)v147 == 6 || *(_DWORD *)v146 == 6)
                {
                  v154 = *v296;
                  v155 = v150 == 0.0;
                  if (v151 == 0.0)
                    v155 = 1;
                  if (v155)
                    v156 = (unint64_t *)&v340;
                  else
                    v156 = (unint64_t *)&v336;
                  if (v155)
                    v157 = (float *)v343;
                  else
                    v157 = (float *)v339;
                  if (v155)
                    v158 = (float *)v343 + 1;
                  else
                    v158 = (float *)v339 + 1;
                  v152 = v293;
                  if (v293 >= 2)
                    v159 = (unint64_t *)&v328;
                  else
                    v159 = v156;
                  v160 = v109;
                  if (v293 >= 2)
                    v161 = (float *)v331;
                  else
                    v161 = v157;
                  if (v293 >= 2)
                    v162 = (unint64_t *)&v332;
                  else
                    v162 = v156;
                  if (v293 >= 2)
                    v163 = (float *)v335;
                  else
                    v163 = v157;
                  v164 = v154 == 6;
                  if (v154 == 6)
                    v163 = v161;
                  v109 = v160;
                  v165 = v154 != 6;
                  if (v164)
                    v166 = v159;
                  else
                    v166 = v162;
                  v110 = v299;
                  v167 = (float *)v331 + 1;
                  if (!v164)
                    v167 = (float *)v335 + 1;
                }
                else
                {
                  v165 = 0;
                  v155 = v150 == 0.0;
                  if (v151 == 0.0)
                    v155 = 1;
                  if (v155)
                    v174 = (unint64_t *)&v340;
                  else
                    v174 = (unint64_t *)&v336;
                  if (v155)
                    v175 = (float *)v343;
                  else
                    v175 = (float *)v339;
                  if (v155)
                    v158 = (float *)v343 + 1;
                  else
                    v158 = (float *)v339 + 1;
                  v152 = v293;
                  if (v293 >= 2)
                    v166 = (unint64_t *)&v328;
                  else
                    v166 = v174;
                  if (v293 >= 2)
                    v163 = (float *)v331;
                  else
                    v163 = v175;
                  v167 = (float *)v331 + 1;
                }
                v148 += v149;
                if (v152 >= 2)
                  v169 = v167;
                else
                  v169 = v158;
                if ((float)(v150 + v151) < (float)(*v163 + *v169))
                {
                  *v166 = v152;
                  if (v155)
                    v170 = &v340;
                  else
                    v170 = &v336;
                  if (v165)
                    v171 = &v332;
                  else
                    v171 = &v328;
                  if (v152 >= 2)
                    v170 = v171;
                  *((_DWORD *)v170 + 2) = v109;
                  v170[2] = v148;
                  *v163 = v151;
                  v172 = *v147;
                  *v169 = v150;
                  v173 = *v146;
                  *((float *)v170 + 8) = v172;
                  *((float *)v170 + 9) = v173;
                }
              }
              ++v109;
              v146 += 3;
              v147 += 3;
            }
            while (v110 != v109);
          }
          v95 = v316;
          *(_QWORD *)&v316[8 * v110] = 0;
          if (v46)
            bzero((void *)(v344.i64[0] + v280 * v110), v280);
          v97 = v293 + 1;
          v18 = v283;
          v37 = v290;
        }
        while (v293 + 1 != v282);
        v96 = *(float *)v331 + *((float *)v331 + 1);
      }
      if ((float)(v96 + v277) >= v65)
      {
        v176 = (float *)&v332;
        v22 = v274;
      }
      else
      {
        v22 = v274;
        if (v96 <= (float)((float)(*(float *)v335 + *((float *)v335 + 1)) * v263))
          v176 = (float *)&v328;
        else
          v176 = (float *)&v332;
      }
      if ((float)((float)(*(float *)v339 + *((float *)v339 + 1)) + v277) < v65
        && (float)(*(float *)v339 + *((float *)v339 + 1)) <= (float)((float)(v176[6] + v176[7]) * v263))
      {
        v176 = (float *)&v336;
      }
      v177 = (float)(*(float *)v343 + *((float *)v343 + 1)) + v277;
      if (v177 >= v65)
        v93 = v176;
      else
        v93 = (float *)&v340;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if (v310)
        operator delete(v310);
      if (v313)
        operator delete(v313);
      if (v95)
        operator delete(v95);
      if (v344.i64[0])
        operator delete((void *)v344.i64[0]);
      v31 = v269;
      if (v319[0])
        operator delete(v319[0]);
      if (v177 >= v65)
        v178 = v176;
      else
        v178 = (float *)&v340;
      v94 = v178[6];
      v86 = v178[7];
      v91 = a1;
LABEL_227:
      if ((float)((float)(v94 + v86) + v277) >= v65)
      {
        v30 = v273;
        goto LABEL_325;
      }
      v179 = *((_DWORD *)v294[12] + *(_QWORD *)v93);
      v303 = v179;
      v305 = v93;
      v180 = *(_DWORD *)(v294[9][3 * *(_QWORD *)v93] + 4 * *((unsigned int *)v93 + 2));
      v181 = *((_DWORD *)v93 + 8);
      v182 = *((_DWORD *)v93 + 9);
      v184 = v91[1];
      v183 = v91[2];
      v185 = v271;
      v186 = 0xCCCCCCCCCCCCCCCDLL * ((v184 - v271) >> 3);
      v187 = &v271[40 * v279];
      *((_DWORD *)v187 + 2) = v186;
      *((_DWORD *)v187 + 3) = v186 + 1;
      v301 = v180;
      *(_DWORD *)v187 = v180;
      *((_WORD *)v187 + 2) = v179;
      if (v184 < v183)
      {
        *(_DWORD *)v184 = 0;
        *((_WORD *)v184 + 2) = -1;
        *((_QWORD *)v184 + 1) = 0;
        *((_DWORD *)v184 + 4) = 0;
        *((_QWORD *)v184 + 3) = 0;
        v188 = v184 + 40;
        *((_DWORD *)v184 + 8) = 1;
        v189 = v290;
        goto LABEL_245;
      }
      v190 = v186 + 1;
      if (v186 + 1 > 0x666666666666666)
        goto LABEL_333;
      if (0x999999999999999ALL * ((v183 - v271) >> 3) > v190)
        v190 = 0x999999999999999ALL * ((v183 - v271) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v183 - v271) >> 3) >= 0x333333333333333)
        v191 = 0x666666666666666;
      else
        v191 = v190;
      v192 = (char *)sub_2367DC0A4(v191);
      v185 = &v192[8 * ((v184 - v271) >> 3)];
      *(_DWORD *)v185 = 0;
      *((_WORD *)v185 + 2) = -1;
      *((_QWORD *)v185 + 1) = 0;
      v183 = &v192[40 * v193];
      *((_DWORD *)v185 + 4) = 0;
      *((_QWORD *)v185 + 3) = 0;
      *((_DWORD *)v185 + 8) = 1;
      v188 = v185 + 40;
      if (v184 == v271)
      {
        *a1 = v185;
        a1[1] = v188;
        a1[2] = v183;
      }
      else
      {
        do
        {
          v194 = *(_OWORD *)(v184 - 40);
          v195 = *(_OWORD *)(v184 - 24);
          *((_DWORD *)v185 - 2) = *((_DWORD *)v184 - 2);
          *(_OWORD *)(v185 - 24) = v195;
          *(_OWORD *)(v185 - 40) = v194;
          v185 -= 40;
          v184 -= 40;
        }
        while (v184 != v271);
        *a1 = v185;
        a1[1] = v188;
        a1[2] = v183;
        if (!v271)
          goto LABEL_244;
      }
      operator delete(v271);
LABEL_244:
      v189 = v290;
LABEL_245:
      a1[1] = v188;
      *((_WORD *)v188 - 18) = -1;
      *((_DWORD *)v188 - 6) = v182;
      *((_QWORD *)v188 - 2) = 0;
      *((_DWORD *)v188 - 2) = 1;
      if (v188 < v183)
      {
        *(_DWORD *)v188 = 0;
        *((_WORD *)v188 + 2) = -1;
        *((_QWORD *)v188 + 1) = 0;
        *((_DWORD *)v188 + 4) = 0;
        *((_QWORD *)v188 + 3) = 0;
        v196 = v188 + 40;
        *((_DWORD *)v188 + 8) = 1;
        v197 = a1;
        goto LABEL_259;
      }
      v198 = 0xCCCCCCCCCCCCCCCDLL * ((v188 - v185) >> 3) + 1;
      if (v198 > 0x666666666666666)
LABEL_333:
        sub_2367C3440();
      if (0x999999999999999ALL * ((v183 - v185) >> 3) > v198)
        v198 = 0x999999999999999ALL * ((v183 - v185) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v183 - v185) >> 3) >= 0x333333333333333)
        v199 = 0x666666666666666;
      else
        v199 = v198;
      v200 = (char *)sub_2367DC0A4(v199);
      v201 = &v200[8 * ((v188 - v185) >> 3)];
      *(_DWORD *)v201 = 0;
      *((_WORD *)v201 + 2) = -1;
      *((_QWORD *)v201 + 1) = 0;
      v203 = &v200[40 * v202];
      *((_DWORD *)v201 + 4) = 0;
      *((_QWORD *)v201 + 3) = 0;
      *((_DWORD *)v201 + 8) = 1;
      v196 = v201 + 40;
      v189 = v290;
      if (v188 == v185)
      {
        v197 = a1;
        *a1 = v201;
        a1[1] = v196;
        a1[2] = v203;
LABEL_258:
        operator delete(v185);
        goto LABEL_259;
      }
      do
      {
        v204 = *(_OWORD *)(v188 - 40);
        v205 = *(_OWORD *)(v188 - 24);
        *((_DWORD *)v201 - 2) = *((_DWORD *)v188 - 2);
        *(_OWORD *)(v201 - 24) = v205;
        *(_OWORD *)(v201 - 40) = v204;
        v201 -= 40;
        v188 -= 40;
      }
      while (v188 != v185);
      v197 = a1;
      *a1 = v201;
      a1[1] = v196;
      a1[2] = v203;
      if (v185)
        goto LABEL_258;
LABEL_259:
      v197[1] = v196;
      *((_WORD *)v196 - 18) = -1;
      *((_DWORD *)v196 - 6) = v181;
      *((_QWORD *)v196 - 2) = 0;
      v206 = v189 + 1;
      *((_DWORD *)v196 - 2) = 1;
      if (v189 + 1 >= v292)
        goto LABEL_281;
      v307 = *((_QWORD *)v305 + 2);
      v207 = *(_QWORD *)v305;
      v208 = 0xBF58476D1CE4E5B9;
      v209 = 0x94D049BB133111EBLL;
      v210 = v290;
      v211 = v292;
      while (2)
      {
        v212 = v209 ^ (v209 << 23);
        sub_23687526C((uint64_t)v294, v210, (v209 + v208) % (v211 - v210) + v210);
        v213 = v206;
        v214 = v210;
        while (2)
        {
          v215 = v294[6];
          v216 = v215[3 * v207];
          v217 = *(unsigned __int8 *)(v216 + v206);
          v218 = *(unsigned __int8 *)(v216 + v214);
          if (v217 >= v218)
          {
            if (v217 == v218)
            {
              sub_23687526C((uint64_t)v294, v213, v206);
              goto LABEL_276;
            }
          }
          else
          {
            if (v213 == v206)
            {
              sub_23687526C((uint64_t)v294, v214, v206);
            }
            else
            {
              v219 = *v294;
              v220 = v294[1];
              if (*v294 == v220)
              {
                v223 = v294;
              }
              else
              {
                do
                {
                  v221 = *(_WORD *)(*v219 + 2 * v214);
                  *(_WORD *)(*v219 + 2 * v214) = *(_WORD *)(*v219 + 2 * v206);
                  *(_WORD *)(*v219 + 2 * v206) = *(_WORD *)(*v219 + 2 * v213);
                  v222 = *v219;
                  v219 += 3;
                  *(_WORD *)(v222 + 2 * v213) = v221;
                }
                while (v219 != v220);
                v223 = v294;
                v215 = v294[6];
              }
              v224 = v223[7];
              while (v215 != v224)
              {
                v225 = *(_BYTE *)(*v215 + v214);
                *(_BYTE *)(*v215 + v214) = *(_BYTE *)(*v215 + v206);
                *(_BYTE *)(*v215 + v206) = *(_BYTE *)(*v215 + v213);
                v226 = *v215;
                v215 += 3;
                *(_BYTE *)(v226 + v213) = v225;
              }
              v227 = v294[3];
              v228 = *((_WORD *)v227 + v214);
              *((_WORD *)v227 + v214) = *((_WORD *)v227 + v206);
              *((_WORD *)v227 + v206) = *((_WORD *)v227 + v213);
              *((_WORD *)v227 + v213) = v228;
            }
            ++v214;
LABEL_276:
            ++v213;
          }
          if (++v206 < v211)
            continue;
          break;
        }
        if (v214 > v307 || (v214 = v211, v210 = v213, v213 < v307))
        {
          v209 = v208;
          v208 ^= (v208 >> 5) ^ (v212 >> 18) ^ v212;
          v206 = v210 + 1;
          v211 = v214;
          if (v214 > v210 + 1)
            continue;
        }
        break;
      }
LABEL_281:
      v229 = v303;
      if (v303 >= 2)
      {
        v234 = v305;
        v281 |= 1 << *(_DWORD *)v305;
        v319[0] = v276;
        v22 = v274;
        v319[1] = v275;
        v230 = a1;
        v18 = v283;
        v231 = v270;
        v232 = v268;
        v233 = v273;
      }
      else
      {
        v319[0] = v276;
        v22 = v274;
        v319[1] = v275;
        HIDWORD(v319[v303]) = v301 + 1;
        v230 = a1;
        v18 = v283;
        v231 = v270;
        v232 = v268;
        v233 = v273;
        v234 = v305;
      }
      v235 = *(unsigned int *)&(*v230)[40 * v279 + 12];
      v236 = *((_QWORD *)v234 + 2);
      v344 = *(int8x16_t *)v319;
      if (v233 >= v272)
      {
        v239 = 0xAAAAAAAAAAAAAAABLL * (v233 - v231);
        v240 = v239 + 1;
        if (v239 + 1 > 0x555555555555555)
          sub_2367C3440();
        if (0x5555555555555556 * (v272 - v231) > v240)
          v240 = 0x5555555555555556 * (v272 - v231);
        if (0xAAAAAAAAAAAAAAABLL * (v272 - v231) >= 0x2AAAAAAAAAAAAAALL)
          v241 = 0x555555555555555;
        else
          v241 = v240;
        if (v241)
        {
          if (v241 > 0x555555555555555)
            sub_2367C3488();
          v242 = (char *)operator new(48 * v241);
          v233 = v273;
        }
        else
        {
          v242 = 0;
        }
        v243 = &v242[48 * v239];
        *(_QWORD *)v243 = v235;
        *((_QWORD *)v243 + 1) = v290;
        *((_QWORD *)v243 + 2) = v236;
        *((_QWORD *)v243 + 3) = v281;
        *((_OWORD *)v243 + 2) = *(_OWORD *)v319;
        if (v233 == v270)
        {
          v22 = (int8x16_t *)&v242[48 * v239];
          v237 = a1;
          v238 = v305;
        }
        else
        {
          v244 = &v242[48 * v239];
          v237 = a1;
          v238 = v305;
          do
          {
            v245 = v233[-3];
            v246 = v233[-1];
            v22 = (int8x16_t *)(v244 - 48);
            *((int8x16_t *)v244 - 2) = v233[-2];
            *((int8x16_t *)v244 - 1) = v246;
            *((int8x16_t *)v244 - 3) = v245;
            v233 -= 3;
            v244 -= 48;
          }
          while (v233 != v270);
        }
        v272 = (int8x16_t *)&v242[48 * v241];
        v232 = (int8x16_t *)(v243 + 48);
        if (v270)
          operator delete(v270);
        v229 = v303;
      }
      else
      {
        v232[-3].i64[0] = v235;
        v232[-3].i64[1] = v290;
        v232[-2].i64[0] = v236;
        v232[-2].i64[1] = v281;
        *v267 = v344;
        v237 = a1;
        v238 = v305;
      }
      v319[0] = v276;
      v319[1] = v275;
      if (v229 <= 1)
        LODWORD(v319[v229]) = v301 + 1;
      v247 = *(unsigned int *)&(*v237)[40 * v279 + 8];
      v248 = *((_QWORD *)v238 + 2);
      v344 = *(int8x16_t *)v319;
      if (v232 >= v272)
      {
        v249 = 0xAAAAAAAAAAAAAAABLL * (v232 - v22);
        v250 = v249 + 1;
        if (v249 + 1 > 0x555555555555555)
          sub_2367C3440();
        v251 = v232;
        if (0x5555555555555556 * (v272 - v22) > v250)
          v250 = 0x5555555555555556 * (v272 - v22);
        if (0xAAAAAAAAAAAAAAABLL * (v272 - v22) >= 0x2AAAAAAAAAAAAAALL)
          v252 = 0x555555555555555;
        else
          v252 = v250;
        if (v252)
        {
          if (v252 > 0x555555555555555)
            sub_2367C3488();
          v253 = (char *)operator new(48 * v252);
        }
        else
        {
          v253 = 0;
        }
        v254 = (int8x16_t *)&v253[48 * v249];
        v272 = (int8x16_t *)&v253[48 * v252];
        v254->i64[0] = v247;
        v254->i64[1] = v248;
        v254[1].i64[0] = v292;
        v254[1].i64[1] = v281;
        v254[2] = *(int8x16_t *)v319;
        v30 = v254 + 3;
        if (v251 == v22)
          goto LABEL_322;
        v255 = v251;
        do
        {
          v256 = v255[-3];
          v257 = v255[-1];
          v254[-2] = v255[-2];
          v254[-1] = v257;
          v254[-3] = v256;
          v254 -= 3;
          v255 -= 3;
        }
        while (v255 != v22);
        if (v22)
LABEL_322:
          operator delete(v22);
        v22 = v254;
      }
      else
      {
        v232->i64[0] = v247;
        v232->i64[1] = v248;
        v232[1].i64[0] = v292;
        v232[1].i64[1] = v281;
        v232[2] = v344;
        v30 = v232 + 3;
      }
      v31 = v269;
LABEL_325:
      if (v326[0])
      {
        v326[1] = v326[0];
        operator delete(v326[0]);
      }
      if (v327[0])
      {
        v327[1] = v327[0];
        operator delete(v327[0]);
      }
      v36 = v22;
LABEL_330:
      if (v36 == v30)
      {
        operator delete(v30);
        return;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v258 = a1 + 1;
  a1[2] = 0;
  v260 = a1 + 2;
  v261 = sub_2367DC0A4(1uLL);
  *(_DWORD *)v261 = 0;
  v261[2] = -1;
  *((_QWORD *)v261 + 1) = 0;
  *((_DWORD *)v261 + 4) = 0;
  *((_QWORD *)v261 + 3) = 0;
  *((_DWORD *)v261 + 8) = 1;
  *a1 = (char *)v261;
  *v258 = v261 + 20;
  *v260 = &v261[20 * v262];
  *((_DWORD *)v261 + 4) = *(_DWORD *)a2[15];
}

void sub_236871738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_236871838(uint64_t *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;

  v3 = (char *)operator new(0x10uLL);
  v4 = v3 + 16;
  *(_QWORD *)v3 = 0x1FFFFFFFDFFLL;
  *((_QWORD *)v3 + 1) = 0;
  v80 = a2 + 2048;
  v81 = a2;
  v5 = v3 + 16;
  v6 = v3 + 16;
  while (1)
  {
    v8 = *((_DWORD *)v6 - 4);
    v6 -= 16;
    v7 = v8;
    if ((v8 - 511) < 0xFFFFFC00)
      break;
    v9 = *((_DWORD *)v6 + 1);
    if (v9 > 511)
      break;
    v10 = *((_QWORD *)v6 + 1);
    v11 = *a1;
    v12 = *a1 + 24 * v10;
    v13 = (__int16 *)(v12 + 20);
    if (*(_DWORD *)v12 != -1)
    {
      v14 = v11 + 24 * v10;
      v17 = *(_DWORD *)(v14 + 16);
      v15 = (_DWORD *)(v14 + 16);
      v16 = v17;
      if (*v13 < 2)
      {
        v23 = *(_DWORD *)(v11 + 24 * v10 + 4);
        if (v6 < v4)
        {
          *((_DWORD *)v5 - 4) = v23;
          *((_QWORD *)v5 - 1) = v16;
          goto LABEL_64;
        }
        v83 = *a1 + 24 * v10;
        v84 = v15;
        v28 = (v6 - v3) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          sub_2367C3440();
        v30 = v16;
        if ((v4 - v3) >> 3 > v29)
          v29 = (v4 - v3) >> 3;
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v31 = (unint64_t)sub_2367CD8AC(v31);
        else
          v32 = 0;
        v36 = v31 + 16 * v28;
        *(_DWORD *)v36 = v23;
        *(_DWORD *)(v36 + 4) = v9;
        *(_QWORD *)(v36 + 8) = v30;
        if (v6 != v3)
        {
          v37 = v31 + 16 * v28;
          do
          {
            v38 = (char *)(v37 - 16);
            *(_OWORD *)(v37 - 16) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v37 -= 16;
          }
          while (v6 != v3);
          goto LABEL_61;
        }
      }
      else
      {
        v18 = v11 + 24 * v10;
        v21 = *(_DWORD *)(v18 + 8);
        v19 = (int *)(v18 + 8);
        v20 = v21;
        v83 = *a1 + 24 * v10;
        v84 = v15;
        if (v6 >= v4)
        {
          v82 = v16;
          v24 = (v6 - v3) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            sub_2367C3440();
          if ((v4 - v3) >> 3 > v25)
            v25 = (v4 - v3) >> 3;
          if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
            v26 = 0xFFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v26 = (unint64_t)sub_2367CD8AC(v26);
          else
            v27 = 0;
          v33 = v26 + 16 * v24;
          *(_DWORD *)v33 = v20;
          *(_DWORD *)(v33 + 4) = v9;
          *(_QWORD *)(v33 + 8) = v82;
          if (v6 == v3)
          {
            v35 = (char *)(v26 + 16 * v24);
          }
          else
          {
            v34 = v26 + 16 * v24;
            do
            {
              v35 = (char *)(v34 - 16);
              *(_OWORD *)(v34 - 16) = *((_OWORD *)v6 - 1);
              v6 -= 16;
              v34 -= 16;
            }
            while (v6 != v3);
          }
          v4 = (char *)(v26 + 16 * v27);
          v5 = (char *)(v33 + 16);
          if (v3)
            operator delete(v3);
          v3 = v35;
          v12 = v83;
          v15 = v84;
        }
        else
        {
          *((_DWORD *)v5 - 4) = v20;
          *((_QWORD *)v5 - 1) = v16;
        }
        v39 = *(_DWORD *)(v11 + 24 * v10 + 4);
        v40 = *v19;
        v41 = (*v15 + 1);
        if (v5 < v4)
        {
          *(_DWORD *)v5 = v39;
          *((_DWORD *)v5 + 1) = v40;
          *((_QWORD *)v5 + 1) = v41;
          v5 += 16;
LABEL_64:
          if (*(__int16 *)(v12 + 22) < 2)
          {
            v52 = *(_DWORD *)(v11 + 24 * v10 + 4);
            v53 = (*v15 + 2);
            if (v5 >= v4)
            {
              v59 = (v5 - v3) >> 4;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 60)
                sub_2367C3440();
              if ((v4 - v3) >> 3 > v60)
                v60 = (v4 - v3) >> 3;
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
                v61 = 0xFFFFFFFFFFFFFFFLL;
              else
                v61 = v60;
              if (v61)
                v61 = (unint64_t)sub_2367CD8AC(v61);
              else
                v62 = 0;
              v66 = v61 + 16 * v59;
              *(_DWORD *)v66 = v7;
              *(_DWORD *)(v66 + 4) = v52;
              *(_QWORD *)(v66 + 8) = v53;
              if (v5 == v3)
              {
                v68 = (char *)(v61 + 16 * v59);
              }
              else
              {
                v67 = v61 + 16 * v59;
                do
                {
                  v68 = (char *)(v67 - 16);
                  *(_OWORD *)(v67 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v67 -= 16;
                }
                while (v5 != v3);
              }
              v4 = (char *)(v61 + 16 * v62);
              v6 = (char *)(v66 + 16);
              if (v3)
                operator delete(v3);
              v3 = v68;
            }
            else
            {
              *(_DWORD *)v5 = v7;
              *((_DWORD *)v5 + 1) = v52;
              v6 = v5 + 16;
              *((_QWORD *)v5 + 1) = v53;
            }
          }
          else
          {
            v45 = v11 + 24 * v10;
            v48 = *(_DWORD *)(v45 + 12);
            v46 = (int *)(v45 + 12);
            v47 = v48;
            v49 = *(v46 - 2);
            v50 = (*v15 + 2);
            if (v5 >= v4)
            {
              v54 = v15;
              v55 = (v5 - v3) >> 4;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 60)
                sub_2367C3440();
              if ((v4 - v3) >> 3 > v56)
                v56 = (v4 - v3) >> 3;
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
                v57 = 0xFFFFFFFFFFFFFFFLL;
              else
                v57 = v56;
              if (v57)
                v57 = (unint64_t)sub_2367CD8AC(v57);
              else
                v58 = 0;
              v63 = v57 + 16 * v55;
              *(_DWORD *)v63 = v47;
              *(_DWORD *)(v63 + 4) = v49;
              *(_QWORD *)(v63 + 8) = v50;
              if (v5 == v3)
              {
                v65 = (char *)(v57 + 16 * v55);
              }
              else
              {
                v64 = v57 + 16 * v55;
                do
                {
                  v65 = (char *)(v64 - 16);
                  *(_OWORD *)(v64 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v64 -= 16;
                }
                while (v5 != v3);
              }
              v4 = (char *)(v57 + 16 * v58);
              v51 = (char *)(v63 + 16);
              if (v3)
                operator delete(v3);
              v3 = v65;
              v15 = v54;
            }
            else
            {
              *(_DWORD *)v5 = v47;
              *((_DWORD *)v5 + 1) = v49;
              v51 = v5 + 16;
              *((_QWORD *)v5 + 1) = v50;
            }
            v69 = *v46;
            v70 = (*v15 + 3);
            if (v51 >= v4)
            {
              v71 = (v51 - v3) >> 4;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 60)
                sub_2367C3440();
              if ((v4 - v3) >> 3 > v72)
                v72 = (v4 - v3) >> 3;
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
                v73 = 0xFFFFFFFFFFFFFFFLL;
              else
                v73 = v72;
              if (v73)
                v73 = (unint64_t)sub_2367CD8AC(v73);
              else
                v74 = 0;
              v75 = v73 + 16 * v71;
              *(_DWORD *)v75 = v7;
              *(_DWORD *)(v75 + 4) = v69;
              *(_QWORD *)(v75 + 8) = v70;
              if (v51 == v3)
              {
                v77 = (char *)(v73 + 16 * v71);
              }
              else
              {
                v76 = v73 + 16 * v71;
                do
                {
                  v77 = (char *)(v76 - 16);
                  *(_OWORD *)(v76 - 16) = *((_OWORD *)v51 - 1);
                  v51 -= 16;
                  v76 -= 16;
                }
                while (v51 != v3);
              }
              v4 = (char *)(v73 + 16 * v74);
              v6 = (char *)(v75 + 16);
              if (v3)
                operator delete(v3);
              v3 = v77;
            }
            else
            {
              *(_DWORD *)v51 = v7;
              *((_DWORD *)v51 + 1) = v69;
              v6 = v51 + 16;
              *((_QWORD *)v51 + 1) = v70;
            }
          }
          goto LABEL_122;
        }
        v42 = (v5 - v3) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          sub_2367C3440();
        if ((v4 - v3) >> 3 > v43)
          v43 = (v4 - v3) >> 3;
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v43;
        if (v31)
          v31 = (unint64_t)sub_2367CD8AC(v31);
        else
          v32 = 0;
        v36 = v31 + 16 * v42;
        *(_DWORD *)v36 = v39;
        *(_DWORD *)(v36 + 4) = v40;
        *(_QWORD *)(v36 + 8) = v41;
        if (v5 != v3)
        {
          v44 = v31 + 16 * v42;
          do
          {
            v38 = (char *)(v44 - 16);
            *(_OWORD *)(v44 - 16) = *((_OWORD *)v5 - 1);
            v5 -= 16;
            v44 -= 16;
          }
          while (v5 != v3);
          goto LABEL_61;
        }
      }
      v38 = (char *)v36;
LABEL_61:
      v4 = (char *)(v31 + 16 * v32);
      v5 = (char *)(v36 + 16);
      if (v3)
        operator delete(v3);
      v3 = v38;
      v12 = v83;
      v15 = v84;
      goto LABEL_64;
    }
    if (*(_DWORD *)v13 != (char)*(_DWORD *)v13 || *(_DWORD *)(v11 + 24 * v10 + 8) != 1)
      break;
    if (v7 < v9)
    {
      do
      {
        v22 = v7 + 513;
        *(_WORD *)(v81 + 2 * v22) = *(_DWORD *)(v11 + 24 * v10 + 16);
        *(_BYTE *)(v80 + v22) = *(_DWORD *)v13;
        ++v7;
      }
      while (v9 != v7);
    }
LABEL_122:
    v5 = v6;
    if (v3 == v6)
    {
      v78 = 1;
      goto LABEL_125;
    }
  }
  v78 = 0;
  result = 0;
  if (!v3)
    return result;
LABEL_125:
  operator delete(v3);
  return v78;
}

void sub_236871E64(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_236871EA8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, signed int a5, unsigned int a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a5)
  {
    if (!a6)
    {
      v14 = 0;
      v12 = 0;
      v10 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v13 = 0;
      v16 = 0;
      goto LABEL_20;
    }
    v7 = *(_DWORD *)(a3 - 4 * a4);
    v10 = v7;
    v8 = v7;
    v9 = v7;
    goto LABEL_6;
  }
  v7 = *(_DWORD *)(a3 - 4);
  v8 = v7;
  if (a6)
  {
    v9 = *(int *)(a3 + 4 * ~a4);
    v10 = *(int *)(a3 - 4 * a4);
LABEL_6:
    v11 = 1;
    if (a5 + 1 >= a2)
      v12 = v10;
    else
      v12 = *(int *)(a3 + 4 * (1 - a4));
    goto LABEL_10;
  }
  v11 = 0;
  v9 = v7;
  v10 = v7;
  v12 = v7;
LABEL_10:
  v13 = v8;
  if (a5 >= 2)
    v13 = *(int *)(a3 - 8);
  v14 = v10;
  if (a6 >= 2)
    v14 = *(int *)(a3 - 8 * a4);
  v15 = v11 ^ 1;
  if (a5 + 2 >= a2)
    v15 = 1;
  if ((v15 & 1) != 0)
    v16 = v12;
  else
    v16 = *(int *)(a3 + 4 * (2 - a4));
LABEL_20:
  v17 = 0;
  *(_DWORD *)result = 0;
  switch(a7)
  {
    case 1:
      v17 = v8;
      break;
    case 2:
      v17 = v10;
      break;
    case 3:
      v18 = __OFADD__(v8, v10);
      v20 = v8 + v10;
      v19 = (v20 < 0) ^ v18;
      goto LABEL_48;
    case 4:
      v21 = v8 + v10 - v9;
      v22 = v10 - v9;
      if (v22 < 0)
        v22 = -v22;
      v23 = v21 - v10;
      if (v23 < 0)
        v23 = -v23;
      if (v22 >= (unint64_t)v23)
        v17 = v10;
      else
        v17 = v8;
      break;
    case 5:
      if (v7 >= (int)v10)
        v24 = v10;
      else
        v24 = v7;
      if (v7 <= (int)v10)
        v25 = v10;
      else
        v25 = v7;
      v26 = v7 + v10 - v9;
      if (v24 > (int)v9)
        v26 = v25;
      if (v25 >= (int)v9)
        v24 = v26;
      v17 = v24;
      break;
    case 7:
      v17 = v12;
      break;
    case 8:
      v17 = v9;
      break;
    case 9:
      v17 = v13;
      break;
    case 10:
      v18 = __OFADD__(v9, v8);
      v20 = v9 + v8;
      v19 = (v20 < 0) ^ v18;
      goto LABEL_48;
    case 11:
      v20 = v9 + v10;
      v19 = (v9 + v10 < 0) ^ __OFADD__(v9, v10);
      goto LABEL_48;
    case 12:
      v20 = v10 + v12;
      v19 = (v10 + v12 < 0) ^ __OFADD__(v10, v12);
LABEL_48:
      if (v19)
        ++v20;
      v17 = v20 >> 1;
      break;
    case 13:
      v27 = 3 * v12 - 2 * v14 + 6 * (int)v10 - v8 + 8 * v8 + v13 + v16;
      v28 = v27 + 8;
      v29 = v27 + 23;
      if (v28 >= 0)
        v29 = v28;
      v17 = v29 >> 4;
      break;
    default:
      break;
  }
  *(_QWORD *)(result + 8) = v17;
  *(_DWORD *)(result + 16) = a7;
  return result;
}

uint64_t sub_236872098(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, _OWORD *a7, unint64_t *a8, uint64_t *a9, uint64_t a10, void **a11, unint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  _BOOL4 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  float v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  void **v64;
  void **v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int16 v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  int32x4_t v92;
  int32x4_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int32x4_t v109;
  int32x4_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t i2;
  unint64_t v117;
  int v118;
  unint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int32x4_t v135;
  int32x4_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t i3;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void **v239;
  char *v240;
  unint64_t v241;
  _DWORD *v242;
  uint64_t i4;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  int v249;
  unint64_t v250;
  void *v251;
  void *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  char *v262;
  char *v263;
  unint64_t v264;
  unint64_t v265;
  _BYTE *v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  _QWORD *v294;
  const void *v295;
  uint64_t v296;
  char *v297;
  _QWORD *v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t *v307;
  __int128 *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  int v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t i;
  uint64_t j;
  char *v319;
  __n128 v320;
  int v321;
  int v322;
  uint64_t kk;
  unsigned int *v324;
  uint64_t v325;
  uint64_t v326;
  _DWORD *v327;
  uint64_t v328;
  uint64_t v329;
  _DWORD *v330;
  uint64_t v331;
  unint64_t v332;
  __int128 v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  int *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t mm;
  unint64_t v355;
  int v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  void **v388;
  char *v389;
  unint64_t v390;
  _DWORD *v391;
  uint64_t nn;
  void *v393;
  unsigned int *v394;
  int v395;
  int v396;
  uint64_t jj;
  unsigned int *v398;
  uint64_t v399;
  uint64_t v400;
  _DWORD *v401;
  uint64_t v402;
  uint64_t v403;
  _DWORD *v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  int *v413;
  int *v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int64_t v426;
  uint64_t v427;
  __int128 v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  _DWORD *v434;
  unint64_t v435;
  unint64_t v436;
  int *v437;
  uint64_t v438;
  uint64_t v439;
  __int16 v440;
  __int16 v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  void **v450;
  char *v451;
  unint64_t v452;
  _DWORD *v453;
  uint64_t ii;
  void *v455;
  unint64_t *v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  _DWORD *v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  __int16 v469;
  __int16 v470;
  __int8 v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t i1;
  uint64_t k;
  unsigned int *v477;
  uint64_t v478;
  uint64_t v479;
  _DWORD *v480;
  uint64_t v481;
  uint64_t v482;
  _DWORD *v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  int *v492;
  int *v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  uint64_t n;
  uint64_t v502;
  __int16 v503;
  __int16 v504;
  char v505;
  unsigned int *v506;
  uint64_t v507;
  uint64_t v508;
  _DWORD *v509;
  uint64_t v510;
  uint64_t v511;
  _DWORD *v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unsigned int v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  int64_t v522;
  uint64_t m;
  unsigned int *v524;
  uint64_t v525;
  uint64_t v526;
  _DWORD *v527;
  uint64_t v528;
  uint64_t v529;
  _DWORD *v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t v540;
  __int128 *v541;
  _BOOL4 v542;
  unint64_t v543;
  __int128 *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t *v555;
  unint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unint64_t v563;
  _DWORD *v564;
  uint64_t v565;
  uint64_t v566;
  char *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  void *v571;
  uint64_t *v572;
  uint64_t v573[3];
  void *v574[2];
  uint64_t v575;
  uint64_t v576;
  _OWORD v577[12];
  uint64_t v578;
  _QWORD v579[3];
  _BYTE v580[48];
  _BYTE v581[24];
  _BYTE __p[40];
  __int128 v583;
  uint64_t v584;
  __int16 v585;
  char v586;
  void *v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  void *v591[4];
  void *v592;
  int64_t v593;
  uint64_t v594;
  _QWORD v595[2];
  __int128 v596;
  uint64_t v597;
  uint64_t v598;
  unsigned int v599[4];
  void *v600;
  void *v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  _BYTE v609[280];
  void *v610[4];
  void *v611;
  _BYTE *v612;
  unint64_t v613;
  BOOL v614;
  __int16 v615;
  unint64_t v616;
  __int128 v617;
  int v618;
  int v619;
  int32x4_t v620;
  uint64_t v621;
  void *v622[2];
  void *v623;
  unint64_t *v624;
  _BYTE *v625;
  void **v626;
  _OWORD *v627;
  uint64_t *v628;
  void **v629;
  _OWORD v630[7];
  uint64_t v631;
  uint64_t v632;

  v632 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a1 + 80))
  {
    v13 = a1[1];
    v14 = v13 - *a1;
    if (v13 == *a1)
      return 0;
    sub_2367FF658((uint64_t)v579);
    v20 = a10;
    if (a10)
      v21 = (_QWORD *)a10;
    else
      v21 = v579;
    *(_OWORD *)&v591[1] = xmmword_2368AF3F0;
    v591[0] = &off_2507FF550;
    v591[3] = 0;
    (*(void (**)(_QWORD *, void **))(*v21 + 16))(v21, v591);
    if (*(_DWORD *)(a2 + 64) == 6)
    {
      v22 = *(unsigned int *)(a2 + 68);
      if (v22 > 3)
      {
        v32 = 4;
        v28 = 5;
        v26 = 10;
        v23 = 12;
        v24 = 12;
        v25 = 12;
        v27 = 10;
        v29 = 5;
        v30 = 5;
        v31 = 12;
      }
      else
      {
        v23 = dword_2368AFB80[v22];
        v24 = dword_2368AFB90[v22];
        v25 = dword_2368AFBA0[v22];
        v26 = dword_2368AFBB0[v22];
        v27 = dword_2368AFBC0[v22];
        v28 = dword_236923D28[v22];
        v29 = dword_2368AFBD0[v22];
        v30 = dword_2368AFBE0[v22];
        v31 = dword_2368AFBF0[v22];
        v32 = dword_2368AFC00[v22];
      }
      v33 = v579;
      if (a10)
        v33 = (_DWORD *)a10;
      v33[15] = v23;
      v33[16] = v24;
      v33[17] = v25;
      v33[7] = v26;
      v33[8] = v27;
      v33[9] = v28;
      v33[10] = v29;
      v33[11] = v30;
      v33[12] = v31;
      v33[13] = v32;
      v33[14] = 13;
    }
    if (a10)
      v34 = (uint64_t *)(a10 + 72);
    else
      v34 = (uint64_t *)v581;
    if (v34 != a1 + 3)
      sub_2367E2A68((uint64_t)v34, a1[3], a1[4], 0x8E38E38E38E38E39 * ((a1[4] - a1[3]) >> 3));
    v548 = a9;
    if (a9)
    {
      v35 = v579;
      if (a10)
        v35 = (_QWORD *)a10;
      *((_BYTE *)v35 + 8) = 1;
      v36 = a7 == 0;
    }
    else if (a7)
    {
      v36 = 0;
    }
    else
    {
      v12 = sub_2368ACEB0((uint64_t)v21, a3, a5, a4);
      if ((_DWORD)v12)
        goto LABEL_768;
      v36 = 1;
    }
    v578 = 0;
    v37 = v14 >> 6;
    memset(v577, 0, sizeof(v577));
    v576 = 0;
    if (!a8)
      a8 = (unint64_t *)&v576;
    v38 = *a8;
    v39 = a2;
    if (!*a8)
    {
      v40 = 0;
      if (v37 <= 1)
        v41 = 1;
      else
        v41 = v37;
      v42 = (uint64_t *)(*a1 + 48);
      while (1)
      {
        v43 = *(v42 - 1);
        if (v40 >= a1[9])
        {
          if (v43 > *(_QWORD *)a2 || (v44 = *v42, (unint64_t)*v42 > *(_QWORD *)a2))
          {
LABEL_38:
            if (v38 <= 1)
              v38 = 1;
            *a8 = v38;
            break;
          }
        }
        else
        {
          v44 = *v42;
        }
        v38 += v44 * v43;
        *a8 = v38;
        ++v40;
        v42 += 8;
        if (v41 == v40)
          goto LABEL_38;
      }
    }
    if (a9 || *(_DWORD *)(a2 + 84) != 1)
      goto LABEL_366;
    v551 = (uint64_t)a8;
    v542 = v36;
    if (!v36)
    {
LABEL_58:
      v545 = a4;
      v46 = 0;
      if (v37 <= 1)
        v47 = 1;
      else
        v47 = v37;
      v48 = (__int128 *)v580;
      if (a10)
        v48 = (__int128 *)(a10 + 24);
      v544 = v48;
      v540 = v37;
      v549 = v47;
      while (1)
      {
        v49 = *a1;
        v50 = *a1 + (v46 << 6);
        v51 = *(_QWORD *)(v50 + 40);
        if (v51)
        {
          v52 = *(_QWORD *)(v50 + 48);
          if (v52)
          {
            if (v46 >= a1[9] && (v51 > *(_QWORD *)v39 || v52 > *(_QWORD *)v39))
            {
LABEL_365:
              a4 = v545;
              v37 = v540;
              a8 = (unint64_t *)v551;
              if (!v542)
              {
                v12 = 0;
                goto LABEL_767;
              }
LABEL_366:
              v574[0] = 0;
              v574[1] = 0;
              v575 = 0;
              sub_236826F90(v573);
              if (!a9)
              {
                memset(v591, 0, 24);
                v592 = 0;
                v594 = 0;
                v593 = 0;
                v595[0] = &off_2507FF438;
                v596 = xmmword_2368AF590;
                *(_OWORD *)((char *)v630 + 8) = xmmword_2368AF3F0;
                *(_QWORD *)&v630[0] = &off_2507FF550;
                *((_QWORD *)&v630[1] + 1) = 0;
                sub_2367CB9F8((uint64_t)v595, (uint64_t)v630);
                *(_QWORD *)v599 = 0;
                v597 = 0;
                v598 = 0;
                memset(v630, 0, 24);
                sub_236826F90(v622);
                v249 = *(_DWORD *)(v39 + 84);
                v250 = *a8;
                if (v249 == 1)
                {
                  v588 = 0uLL;
                  v587 = 0;
                  sub_23687004C((char **)__p, v577, v250, v39, (uint64_t *)&v587, 0, 0);
                  v251 = *(void **)__p;
                  *(_OWORD *)v574 = *(_OWORD *)__p;
                  v575 = *(_QWORD *)&__p[16];
                  memset(__p, 0, 24);
                  if (v587)
                  {
                    v571 = v251;
                    operator delete(v587);
                    v251 = v571;
                  }
                }
                else
                {
                  sub_23686D4F8((unint64_t *)__p, v249, v250);
                  v251 = *(void **)__p;
                  *(_OWORD *)v574 = *(_OWORD *)__p;
                  v575 = *(_QWORD *)&__p[16];
                  memset(__p, 0, 24);
                }
                v252 = v251;
                a11 = (void **)v573[0];
                memset(__p, 0, 24);
                sub_236877A6C(v574, (void **)v622[0], (char **)__p);
                if (v252)
                  operator delete(v252);
                *(_OWORD *)v574 = *(_OWORD *)__p;
                v575 = *(_QWORD *)&__p[16];
                memset(__p, 0, 24);
                sub_236819104(a2 + 88, 6uLL, (uint64_t)v622, (uint64_t *)v591, (unint64_t *)v630, a3, 6, a4);
                sub_23681FA78((uint64_t)v622[0], (uint64_t)v591, v630, 0, a3, 6, a4);
                *(_QWORD *)__p = v622;
                sub_2367D17E4((void ***)__p);
                if (*(_QWORD *)&v630[0])
                  operator delete(*(void **)&v630[0]);
                *(_QWORD *)&v630[0] = &v597;
                sub_2367D077C((void ***)v630);
                if (v592)
                {
                  v593 = (int64_t)v592;
                  operator delete(v592);
                }
                *(_QWORD *)&v630[0] = v591;
                sub_236817010((void ***)v630);
                v548 = (uint64_t *)v574;
                v39 = a2;
              }
              v253 = 0;
              v254 = 0;
              v255 = 0;
              v256 = *(_QWORD *)v39;
              if (v37 <= 1)
                v257 = 1;
              else
                v257 = v37;
              v258 = (unint64_t *)(*a1 + 48);
              do
              {
                v259 = *(v258 - 1);
                if (v253 >= a1[9])
                {
                  if (v259 > v256)
                    break;
                  v260 = *v258;
                  if (*v258 > v256)
                    break;
                }
                else
                {
                  v260 = *v258;
                }
                if (v259 > v255)
                  v255 = *(v258 - 1);
                v254 += v260 * v259;
                ++v253;
                v258 += 8;
              }
              while (v257 != v253);
              v261 = *(unsigned __int8 *)(v39 + 144);
              v262 = (char *)*a11;
              v263 = (char *)a11[1];
              v264 = (v263 - (_BYTE *)*a11) >> 3;
              v265 = v254 + v264;
              v546 = a4;
              v543 = v255;
              if (v261)
              {
                if (v264 >= v254 + v264)
                {
                  if (v264 <= v254 + v264)
                    goto LABEL_427;
                  v291 = &v262[8 * v265];
                }
                else
                {
                  v266 = a11[2];
                  if (v254 > (v266 - v263) >> 3)
                  {
                    if (v265 >> 61)
                      sub_2367C3440();
                    v267 = v266 - v262;
                    if (v267 >> 2 > v265)
                      v265 = v267 >> 2;
                    if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8)
                      v268 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v268 = v265;
                    v269 = (char *)sub_2367CA1FC(v268);
                    v271 = &v269[8 * v264];
                    v272 = &v271[8 * v254];
                    v273 = 8 * v254;
                    v274 = v271;
                    do
                    {
                      *(_QWORD *)v274 = 0;
                      v274 += 8;
                      v273 -= 8;
                    }
                    while (v273);
                    v275 = &v269[8 * v270];
                    v277 = (char *)*a11;
                    v276 = (char *)a11[1];
                    if (v276 != *a11)
                    {
                      do
                      {
                        v278 = *((_QWORD *)v276 - 1);
                        v276 -= 8;
                        *((_QWORD *)v271 - 1) = v278;
                        v271 -= 8;
                      }
                      while (v276 != v277);
                      v276 = (char *)*a11;
                    }
                    *a11 = v271;
                    a11[1] = v272;
                    a11[2] = v275;
                    if (v276)
                      operator delete(v276);
LABEL_427:
                    v294 = v579;
                    if (a10)
                      v294 = (_QWORD *)a10;
                    if (*((_BYTE *)v294 + 8))
                    {
                      v12 = 0;
                      *a12 = v543;
                    }
                    else
                    {
                      memset(v591, 0, 24);
                      v592 = 0;
                      v594 = 0;
                      v593 = 0;
                      v595[0] = &off_2507FF438;
                      v596 = xmmword_2368AF590;
                      *(_OWORD *)((char *)v630 + 8) = xmmword_2368AF3F0;
                      *(_QWORD *)&v630[0] = &off_2507FF550;
                      *((_QWORD *)&v630[1] + 1) = 0;
                      sub_2367CB9F8((uint64_t)v595, (uint64_t)v630);
                      *(_QWORD *)v599 = 0;
                      v597 = 0;
                      v598 = 0;
                      v622[1] = 0;
                      v622[0] = 0;
                      v623 = 0;
                      v630[0] = *(_OWORD *)(a2 + 88);
                      v295 = *(const void **)(a2 + 104);
                      v296 = *(_QWORD *)(a2 + 112);
                      memset(&v630[1], 0, 24);
                      sub_2367DBF84(&v630[1], v295, v296, (v296 - (uint64_t)v295) >> 3);
                      *((_QWORD *)&v630[2] + 1) = *(_QWORD *)(a2 + 128);
                      *(_QWORD *)((char *)&v630[2] + 13) = *(_QWORD *)(a2 + 133);
                      v297 = (char *)*((_QWORD *)&v630[1] + 1);
                      if (*((_QWORD *)&v630[1] + 1) >= *(_QWORD *)&v630[2])
                      {
                        v299 = *(char **)&v630[1];
                        v300 = (uint64_t)(*((_QWORD *)&v630[1] + 1) - *(_QWORD *)&v630[1]) >> 3;
                        v301 = v300 + 1;
                        if ((unint64_t)(v300 + 1) >> 61)
                          sub_2367C3440();
                        v302 = *(_QWORD *)&v630[2] - *(_QWORD *)&v630[1];
                        if ((uint64_t)(*(_QWORD *)&v630[2] - *(_QWORD *)&v630[1]) >> 2 > v301)
                          v301 = v302 >> 2;
                        if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFF8)
                          v303 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v303 = v301;
                        if (v303)
                          v303 = (unint64_t)sub_2367CA1FC(v303);
                        else
                          v304 = 0;
                        v537 = (unint64_t *)(v303 + 8 * v300);
                        *v537 = v543;
                        v298 = v537 + 1;
                        while (v297 != v299)
                        {
                          v538 = *((_QWORD *)v297 - 1);
                          v297 -= 8;
                          *--v537 = v538;
                        }
                        *(_QWORD *)&v630[1] = v537;
                        *(_QWORD *)&v630[2] = v303 + 8 * v304;
                        if (v299)
                          operator delete(v299);
                      }
                      else
                      {
                        **((_QWORD **)&v630[1] + 1) = v543;
                        v298 = v297 + 8;
                      }
                      *((_QWORD *)&v630[1] + 1) = v298;
                      sub_236819104((uint64_t)v630, (0xCCCCCCCCCCCCCCCDLL * ((v548[1] - *v548) >> 3) + 1) >> 1, (uint64_t)v573, (uint64_t *)v591, (unint64_t *)v622, a3, a5, v546);
                      sub_23681FA78(v573[0], (uint64_t)v591, v622, 0, a3, a5, v546);
                      if (*(_QWORD *)&v630[1])
                        operator delete(*(void **)&v630[1]);
                      if (v622[0])
                        operator delete(v622[0]);
                      *(_QWORD *)&v630[0] = &v597;
                      sub_2367D077C((void ***)v630);
                      if (v592)
                      {
                        v593 = (int64_t)v592;
                        operator delete(v592);
                      }
                      *(_QWORD *)&v630[0] = v591;
                      sub_236817010((void ***)v630);
                      v12 = 0;
                    }
LABEL_765:
                    v591[0] = v573;
                    sub_2367D17E4((void ***)v591);
                    if (v574[0])
                      operator delete(v574[0]);
                    goto LABEL_767;
                  }
                  v293 = 8 * v254;
                  v291 = &v263[8 * v254];
                  do
                  {
                    *(_QWORD *)v263 = 0;
                    v263 += 8;
                    v293 -= 8;
                  }
                  while (v293);
                }
                a11[1] = v291;
                goto LABEL_427;
              }
              if (v264 >= v254 + v264)
              {
                if (v264 <= v254 + v264)
                  goto LABEL_443;
                v292 = &v262[8 * v265];
              }
              else
              {
                v279 = a11[2];
                if (v254 > (v279 - v263) >> 3)
                {
                  if (v265 >> 61)
                    sub_2367C3440();
                  v280 = v257;
                  v281 = v279 - v262;
                  if (v281 >> 2 > v265)
                    v265 = v281 >> 2;
                  if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
                    v282 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v282 = v265;
                  v283 = (char *)sub_2367CA1FC(v282);
                  v284 = &v283[8 * v264];
                  v286 = &v283[8 * v285];
                  bzero(v284, 8 * v254);
                  v287 = &v284[8 * v254];
                  v289 = (char *)*a11;
                  v288 = (char *)a11[1];
                  v257 = v280;
                  if (v288 != *a11)
                  {
                    do
                    {
                      v290 = *((_QWORD *)v288 - 1);
                      v288 -= 8;
                      *((_QWORD *)v284 - 1) = v290;
                      v284 -= 8;
                    }
                    while (v288 != v289);
                    v288 = (char *)*a11;
                  }
                  *a11 = v284;
                  a11[1] = v287;
                  a11[2] = v286;
                  v20 = a10;
                  if (v288)
                  {
                    operator delete(v288);
                    v257 = v280;
                  }
LABEL_443:
                  v306 = 0;
                  v307 = (unint64_t *)((char *)*a11 + 8 * v264);
                  v308 = (__int128 *)v580;
                  if (v20)
                    v308 = (__int128 *)(v20 + 24);
                  v541 = v308;
                  v309 = a2;
                  v547 = v257;
                  while (2)
                  {
                    v310 = *a1 + (v306 << 6);
                    v311 = *(_QWORD *)(v310 + 40);
                    if (!v311)
                      goto LABEL_685;
                    v312 = *(_QWORD *)(v310 + 48);
                    if (!v312)
                      goto LABEL_685;
                    if (v306 >= a1[9] && (v311 > *(_QWORD *)v309 || v312 > *(_QWORD *)v309))
                      goto LABEL_427;
                    v314 = *(unsigned __int8 *)(v309 + 80);
                    v552 = v306;
                    v315 = *a1 + ((uint64_t)(int)v306 << 6);
                    v631 = 0;
                    memset(v630, 0, sizeof(v630));
                    v316 = (uint64_t *)(v315 + 40);
                    v558 = v315;
                    v556 = (unint64_t *)(v315 + 48);
                    sub_2367CA770((uint64_t)v591, *(_QWORD *)(v315 + 40), *(_QWORD *)(v315 + 48));
                    v12 = v599[0];
                    if (v599[0])
                      goto LABEL_682;
                    v572 = v316;
                    sub_2367CA9E4((uint64_t)v622, (uint64_t)v591);
                    sub_2367D086C((uint64_t)v630, (uint64_t)v622);
                    for (i = 13; i != -2; i -= 5)
                      sub_2367C2F38((uint64_t *)&v622[i]);
                    if (!v599[0])
                    {
                      for (j = 13; j != -2; j -= 5)
                        sub_2367C2F38((uint64_t *)&v591[j]);
                    }
                    v616 = __PAIR64__(a6, v552);
                    v615 = 0;
                    v614 = 0;
                    v613 = 0;
                    sub_2367F8978((unint64_t *)&v611, v548, (uint64_t)&v616, (uint64_t *)&v613, (_BYTE *)&v615 + 1, (BOOL *)&v615, &v614);
                    sub_2367CBE88(v610, v613);
                    v319 = (char *)operator new();
                    bzero(v319, 0xC02uLL);
                    v567 = v319;
                    if ((_BYTE)v615)
                    {
                      v321 = sub_236871838((uint64_t *)&v611, (uint64_t)v319);
                      LOBYTE(v615) = v321;
                    }
                    else
                    {
                      v321 = 0;
                    }
                    if (v614)
                    {
                      v322 = sub_236871838((uint64_t *)&v611, (uint64_t)v319);
                      v614 = v322;
                      if (!v321)
                        goto LABEL_574;
                    }
                    else
                    {
                      v322 = 0;
                      if (!v321)
                        goto LABEL_574;
                    }
                    if (v314)
                    {
LABEL_574:
                      v394 = (unsigned int *)v611;
                      if (v612 - (_BYTE *)v611 == 24)
                      {
                        v395 = *((_DWORD *)v611 + 1);
                        if (v395 == 5 && *((_DWORD *)v611 + 2) == 1 && !(*((_DWORD *)v611 + 5) | v314))
                        {
                          for (k = 0; k != 3; ++k)
                          {
                            BYTE2(v591[0]) = -1;
                            LOWORD(v591[0]) = 255;
                            v477 = (unsigned int *)v630 + 10 * k;
                            v478 = v477[1];
                            if ((_DWORD)v478)
                            {
                              v479 = 0;
                              v320.n128_u8[0] = *((_BYTE *)v591 + k);
                              v320.n128_f32[0] = (float)v320.n128_u32[0];
                              v481 = *((_QWORD *)v477 + 2);
                              v480 = (_DWORD *)*((_QWORD *)v477 + 3);
                              v482 = *v477;
                              do
                              {
                                v483 = v480;
                                v484 = v482;
                                if ((_DWORD)v482)
                                {
                                  do
                                  {
                                    *v483++ = v320.n128_u32[0];
                                    --v484;
                                  }
                                  while (v484);
                                }
                                ++v479;
                                v480 = (_DWORD *)((char *)v480 + v481);
                              }
                              while (v479 != v478);
                            }
                          }
                          v485 = *v556;
                          if (!*v556)
                            goto LABEL_677;
                          v486 = 0;
                          v487 = *(_QWORD *)(v558 + 16) >> 2;
                          v488 = -v487;
                          v489 = *v572;
                          v490 = -1 * v487;
                          do
                          {
                            if (v489)
                            {
                              v491 = 0;
                              v492 = (int *)(*(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v486);
                              v493 = v492;
                              do
                              {
                                if (v491)
                                {
                                  v494 = *(v493 - 1);
                                  if (v486)
                                  {
                                    v496 = v493[v490 - 1];
                                    v495 = v493[v490];
                                  }
                                  else
                                  {
                                    v495 = *(v493 - 1);
                                    v496 = v495;
                                  }
                                }
                                else if (v486)
                                {
                                  v495 = v492[v488];
                                  v494 = v495;
                                  v496 = v495;
                                }
                                else
                                {
                                  v495 = 0;
                                  v494 = 0;
                                  v496 = 0;
                                }
                                if (v494 >= v495)
                                  v497 = v495;
                                else
                                  v497 = v494;
                                if (v495 <= v494)
                                  v498 = v494;
                                else
                                  v498 = v495;
                                v499 = v494 + v495 - v496;
                                if (v497 > v496)
                                  v499 = v498;
                                if (v498 < v496)
                                  v499 = v497;
                                v500 = *v493++;
                                *v307++ = (2 * *((_DWORD *)v611 + 4)) | ((unint64_t)((2 * (v500 - v499)) ^ ((v500 - v499) >> 31)) << 32);
                                ++v491;
                                v489 = *v572;
                              }
                              while (v491 < *v572);
                              v485 = *v556;
                            }
                            v12 = 0;
                            ++v486;
                          }
                          while (v486 < v485);
                          goto LABEL_678;
                        }
                        if (!v322 || v314)
                        {
                          if (v395)
                          {
                            if (v395 != 6)
                            {
                              v396 = *((_DWORD *)v611 + 2);
                              goto LABEL_624;
                            }
                          }
                          else
                          {
                            v396 = *((_DWORD *)v611 + 2);
                            if (v396 == 1)
                            {
                              if (!(*((_DWORD *)v611 + 5) | v314))
                              {
                                for (m = 0; m != 3; ++m)
                                {
                                  BYTE2(v591[0]) = 0;
                                  LOWORD(v591[0]) = 0;
                                  v524 = (unsigned int *)v630 + 10 * m;
                                  v525 = v524[1];
                                  if ((_DWORD)v525)
                                  {
                                    v526 = 0;
                                    v320.n128_u8[0] = *((_BYTE *)v591 + m);
                                    v320.n128_f32[0] = (float)v320.n128_u32[0];
                                    v528 = *((_QWORD *)v524 + 2);
                                    v527 = (_DWORD *)*((_QWORD *)v524 + 3);
                                    v529 = *v524;
                                    do
                                    {
                                      v530 = v527;
                                      v531 = v529;
                                      if ((_DWORD)v529)
                                      {
                                        do
                                        {
                                          *v530++ = v320.n128_u32[0];
                                          --v531;
                                        }
                                        while (v531);
                                      }
                                      ++v526;
                                      v527 = (_DWORD *)((char *)v527 + v528);
                                    }
                                    while (v526 != v525);
                                  }
                                }
                                v532 = *v556;
                                if (!*v556)
                                  goto LABEL_677;
                                v533 = 0;
                                v534 = *v572;
                                do
                                {
                                  if (v534)
                                  {
                                    v535 = 0;
                                    v536 = *(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v533;
                                    do
                                    {
                                      *v307++ = (2 * *((_DWORD *)v611 + 4)) | ((unint64_t)((2 * *(_DWORD *)(v536 + 4 * v535)) ^ (*(int *)(v536 + 4 * v535) >> 31)) << 32);
                                      ++v535;
                                      v534 = *v572;
                                    }
                                    while (v535 < *v572);
                                    v532 = *v556;
                                  }
                                  v12 = 0;
                                  ++v533;
                                }
                                while (v533 < v532);
                                goto LABEL_678;
                              }
                              v396 = 1;
                            }
LABEL_624:
                            if ((v396 & (v396 - 1)) == 0 && !(*((_DWORD *)v611 + 5) | v314))
                            {
                              for (n = 0; n != 3; ++n)
                              {
                                v502 = v394[1];
                                if (v502 > 0xD)
                                {
                                  v503 = 255;
                                  v504 = 255;
                                  v505 = -1;
                                }
                                else
                                {
                                  v503 = byte_236923CFD[v502];
                                  v504 = byte_236923D0B[v502];
                                  v505 = byte_236923D19[v502];
                                }
                                BYTE2(v591[0]) = v505;
                                LOWORD(v591[0]) = v503 | (v504 << 8);
                                v506 = (unsigned int *)v630 + 10 * n;
                                v507 = v506[1];
                                if ((_DWORD)v507)
                                {
                                  v508 = 0;
                                  v320.n128_u8[0] = *((_BYTE *)v591 + n);
                                  v320.n128_f32[0] = (float)v320.n128_u32[0];
                                  v510 = *((_QWORD *)v506 + 2);
                                  v509 = (_DWORD *)*((_QWORD *)v506 + 3);
                                  v511 = *v506;
                                  do
                                  {
                                    v512 = v509;
                                    v513 = v511;
                                    if ((_DWORD)v511)
                                    {
                                      do
                                      {
                                        *v512++ = v320.n128_u32[0];
                                        --v513;
                                      }
                                      while (v513);
                                    }
                                    ++v508;
                                    v509 = (_DWORD *)((char *)v509 + v510);
                                  }
                                  while (v508 != v507);
                                }
                              }
                              v514 = *v556;
                              if (!*v556)
                                goto LABEL_677;
                              v515 = 0;
                              v516 = __clz(v394[2]) ^ 0x1F;
                              v517 = *(_QWORD *)(v558 + 16) >> 2;
                              v518 = *v572;
                              v519 = *v572;
                              do
                              {
                                if (v519)
                                {
                                  v520 = 0;
                                  v521 = 0;
                                  v566 = *(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v515;
                                  do
                                  {
                                    v564 = v611;
                                    sub_236871EA8((uint64_t)v591, v518, v566 + v520, v517, v521, v515, *((_DWORD *)v611 + 1));
                                    v522 = (int64_t)(*(int *)(v566 + 4 * v521) - (unint64_t)v591[1]) >> v516;
                                    *v307++ = (2 * v564[4]) | ((unint64_t)((2 * (_DWORD)v522) ^ ((int)v522 >> 31)) << 32);
                                    ++v521;
                                    v518 = *v572;
                                    v520 += 4;
                                  }
                                  while (v521 < *v572);
                                  v514 = *v556;
                                  v519 = *v572;
                                }
                                v12 = 0;
                                ++v515;
                              }
                              while (v515 < v514);
                              goto LABEL_678;
                            }
                          }
LABEL_626:
                          v565 = *(_QWORD *)(v558 + 16) >> 2;
                          v426 = (((char *)v610[1] - (char *)v610[0]) >> 2) - 16;
                          v427 = *v572;
                          if (HIBYTE(v615) | v314)
                          {
                            v320.n128_f64[0] = sub_2367DA410((uint64_t)v591, (((char *)v610[1] - (char *)v610[0]) >> 2) - 16, *v572);
                            v12 = v593;
                            if ((_DWORD)v593)
                              goto LABEL_678;
                            *(_OWORD *)v622 = *(_OWORD *)v591;
                            v623 = v591[2];
                            v624 = (unint64_t *)v591[3];
                            v625 = v592;
                            v626 = (void **)v426;
                            v627 = (_OWORD *)v427;
                            v628 = 0;
                            v587 = &off_250800498;
                            v428 = v541[1];
                            v588 = *v541;
                            v589 = v428;
                            v590 = v541[2];
                            sub_2367FE7B0((uint64_t)v591, (uint64_t)&v587, *v572);
                            if (*v556)
                            {
                              v429 = 0;
                              do
                              {
                                v562 = *(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v429;
                                sub_2367FE934(v558, v429, a1, v552, (unsigned int *)v622);
                                v430 = 0;
                                v620 = 0uLL;
                                v621 = 0;
                                v431 = *(_QWORD *)&v630[1] * v429;
                                v432 = (uint64_t *)&v630[1] + 1;
                                do
                                {
                                  v433 = *v432;
                                  v432 += 5;
                                  v620.i64[v430++] = v433 + v431;
                                }
                                while (v430 != 3);
                                v434 = v610[0];
                                v320.n128_u64[0] = v616;
                                *(_QWORD *)v610[0] = v616;
                                v434[2] = v429;
                                v434[9] = 0;
                                v435 = *v572;
                                if (*v572)
                                {
                                  v436 = 0;
                                  do
                                  {
                                    v437 = (int *)(v562 + 4 * v436);
                                    sub_2367FEE64((uint64_t)&v617, (_DWORD *)v610[0], v435, (uint64_t)v437, v565, v436, v429, (unsigned int **)&v611, v622, (uint64_t)v591);
                                    v438 = 0;
                                    v439 = v618;
                                    do
                                    {
                                      if (v439 > 0xD)
                                      {
                                        v440 = 255;
                                        v441 = 255;
                                        v442 = -1;
                                      }
                                      else
                                      {
                                        v440 = byte_236923CFD[v439];
                                        v441 = byte_236923D0B[v439];
                                        v442 = byte_236923D19[v439];
                                      }
                                      v586 = v442;
                                      v585 = v440 | (v441 << 8);
                                      v320.n128_u8[0] = *((_BYTE *)&v585 + v438);
                                      v320.n128_f32[0] = (float)v320.n128_u32[0];
                                      *(_DWORD *)(v620.i64[v438++] + 4 * v436) = v320.n128_u32[0];
                                    }
                                    while (v438 != 3);
                                    v443 = 0;
                                    v444 = (*v437 - *((_QWORD *)&v617 + 1)) / v619;
                                    *v307 = (2 * v617) | ((unint64_t)((2 * (_DWORD)v444) ^ ((int)v444 >> 31)) << 32);
                                    v435 = *v572;
                                    v445 = *v572 + 2;
                                    if ((v429 & 1) != 0)
                                      v446 = 0;
                                    else
                                      v446 = *v572 + 2;
                                    v447 = 8 * *v437;
                                    v448 = v446 + v436;
                                    *((_DWORD *)v600 + v448) = (_DWORD)v592 - v447;
                                    v449 = ++v436 + (((uint64_t)(v429 << 63) >> 63) & v445);
                                    v450 = (void **)&v593;
                                    do
                                    {
                                      v451 = (char *)v591[v443] - v447;
                                      if ((uint64_t)v451 < 0)
                                        v451 = (char *)(v447 - (_QWORD)v591[v443]);
                                      v452 = (unint64_t)(v451 + 3) >> 3;
                                      v453 = *v450;
                                      v450 += 3;
                                      v453[v448] = v452;
                                      v453[v449] += v452;
                                      ++v443;
                                    }
                                    while (v443 != 4);
                                    ++v307;
                                  }
                                  while (v436 < v435);
                                }
                                ++v429;
                              }
                              while (v429 < *v556);
                            }
                            if (v600)
                            {
                              v601 = v600;
                              operator delete(v600);
                            }
                            for (ii = 0; ii != -24; ii -= 6)
                            {
                              v455 = *(void **)&v599[ii - 2];
                              if (v455)
                              {
                                *(_QWORD *)&v599[ii] = v455;
                                operator delete(v455);
                              }
                            }
                            v456 = v624;
                            v624 = 0;
                            if (!v456)
                              goto LABEL_677;
                            v457 = -(uint64_t)*(v456 - 3);
                            do
                              v458 = __ldaxr(&qword_2564313D8);
                            while (__stlxr(v458 + v457, &qword_2564313D8));
                          }
                          else
                          {
                            v320.n128_f64[0] = sub_2367DA410((uint64_t)v622, (((char *)v610[1] - (char *)v610[0]) >> 2) - 16, *v572);
                            v12 = v626;
                            if ((_DWORD)v626)
                              goto LABEL_678;
                            v320 = *(__n128 *)v622;
                            *(_OWORD *)v591 = *(_OWORD *)v622;
                            v456 = v624;
                            v591[2] = v623;
                            v591[3] = v624;
                            v592 = v625;
                            v593 = v426;
                            v594 = v427;
                            v595[0] = 0;
                            if (*v556)
                            {
                              v459 = 0;
                              do
                              {
                                v563 = *(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v459;
                                sub_2367FE934(v558, v459, a1, v552, (unsigned int *)v591);
                                v460 = 0;
                                v622[1] = 0;
                                v622[0] = 0;
                                v623 = 0;
                                v461 = *(_QWORD *)&v630[1] * v459;
                                v462 = (uint64_t *)&v630[1] + 1;
                                do
                                {
                                  v463 = *v462;
                                  v462 += 5;
                                  v622[v460++] = (void *)(v463 + v461);
                                }
                                while (v460 != 3);
                                v464 = v610[0];
                                v320.n128_u64[0] = v616;
                                *(_QWORD *)v610[0] = v616;
                                v464[2] = v459;
                                v464[9] = 0;
                                v465 = *v572;
                                if (*v572)
                                {
                                  v466 = 0;
                                  do
                                  {
                                    sub_2367FEB28((uint64_t)&v620, (_DWORD *)v610[0], v465, v563 + 4 * v466, v565, v466, v459, (unsigned int **)&v611, v591);
                                    v467 = 0;
                                    v468 = (int)v621;
                                    do
                                    {
                                      if (v468 > 0xD)
                                      {
                                        v469 = 255;
                                        v470 = 255;
                                        v471 = -1;
                                      }
                                      else
                                      {
                                        v469 = byte_236923CFD[v468];
                                        v470 = byte_236923D0B[v468];
                                        v471 = byte_236923D19[v468];
                                      }
                                      BYTE2(v617) = v471;
                                      LOWORD(v617) = v469 | (v470 << 8);
                                      v320.n128_u8[0] = *((_BYTE *)&v617 + v467);
                                      v320.n128_f32[0] = (float)v320.n128_u32[0];
                                      *((_DWORD *)v622[v467++] + v466) = v320.n128_u32[0];
                                    }
                                    while (v467 != 3);
                                    v472 = (*(int *)(v563 + 4 * v466) - v620.i64[1]) / SHIDWORD(v621);
                                    *v307++ = (2 * v620.i32[0]) | ((unint64_t)((2 * (_DWORD)v472) ^ ((int)v472 >> 31)) << 32);
                                    ++v466;
                                    v465 = *v572;
                                  }
                                  while (v466 < *v572);
                                }
                                ++v459;
                              }
                              while (v459 < *v556);
                              v456 = (unint64_t *)v591[3];
                            }
                            v591[3] = 0;
                            if (!v456)
                              goto LABEL_677;
                            v473 = -(uint64_t)*(v456 - 3);
                            do
                              v474 = __ldaxr(&qword_2564313D8);
                            while (__stlxr(v474 + v473, &qword_2564313D8));
                          }
                          free((void *)*(v456 - 4));
                          goto LABEL_677;
                        }
                      }
                      else if (!v322 || v314)
                      {
                        goto LABEL_626;
                      }
                      for (jj = 0; jj != 3; ++jj)
                      {
                        BYTE2(v591[0]) = -1;
                        LOWORD(v591[0]) = 255;
                        v398 = (unsigned int *)v630 + 10 * jj;
                        v399 = v398[1];
                        if ((_DWORD)v399)
                        {
                          v400 = 0;
                          v320.n128_u8[0] = *((_BYTE *)v591 + jj);
                          v320.n128_f32[0] = (float)v320.n128_u32[0];
                          v402 = *((_QWORD *)v398 + 2);
                          v401 = (_DWORD *)*((_QWORD *)v398 + 3);
                          v403 = *v398;
                          do
                          {
                            v404 = v401;
                            v405 = v403;
                            if ((_DWORD)v403)
                            {
                              do
                              {
                                *v404++ = v320.n128_u32[0];
                                --v405;
                              }
                              while (v405);
                            }
                            ++v400;
                            v401 = (_DWORD *)((char *)v401 + v402);
                          }
                          while (v400 != v399);
                        }
                      }
                      v406 = *v556;
                      if (*v556)
                      {
                        v407 = 0;
                        v408 = *(_QWORD *)(v558 + 16) >> 2;
                        v409 = -v408;
                        v410 = *v572;
                        v411 = -1 * v408;
                        do
                        {
                          if (v410)
                          {
                            v412 = 0;
                            v413 = (int *)(*(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v407);
                            v414 = v413;
                            do
                            {
                              if (v412)
                              {
                                v415 = *(v414 - 1);
                                v416 = v415;
                                if (v407)
                                {
                                  v417 = v414[v411 - 1];
                                  v418 = v414[v411];
                                }
                                else
                                {
                                  v418 = v415;
                                  v417 = v415;
                                }
                              }
                              else if (v407)
                              {
                                v415 = v413[v409];
                                v418 = v415;
                                v416 = v415;
                                v417 = v415;
                              }
                              else
                              {
                                v418 = 0;
                                v415 = 0;
                                v416 = 0;
                                v417 = 0;
                              }
                              if (v415 >= (int)v418)
                                v419 = v418;
                              else
                                v419 = v415;
                              if (v415 <= (int)v418)
                                v420 = v418;
                              else
                                v420 = v415;
                              v421 = v415 + v418 - v417;
                              if (v419 > (int)v417)
                                v421 = v420;
                              if (v420 < (int)v417)
                                v421 = v419;
                              v422 = v416 + v418 - v417;
                              if (v422 <= -512)
                                v422 = -512;
                              if (v422 >= 511)
                                v422 = 511;
                              v423 = v422 + 512;
                              v424 = *(unsigned __int16 *)&v319[2 * v423];
                              v425 = *v414++;
                              LODWORD(v423) = v425 - v421 - v319[v423 + 2048];
                              *v307++ = (2 * v424) | ((unint64_t)((2 * (_DWORD)v423) ^ ((int)v423 >> 31)) << 32);
                              ++v412;
                              v410 = *v572;
                            }
                            while (v412 < *v572);
                            v406 = *v556;
                          }
                          ++v407;
                        }
                        while (v407 < v406);
                      }
                      goto LABEL_677;
                    }
                    for (kk = 0; kk != 3; ++kk)
                    {
                      BYTE2(v591[0]) = -1;
                      LOWORD(v591[0]) = -256;
                      v324 = (unsigned int *)v630 + 10 * kk;
                      v325 = v324[1];
                      if ((_DWORD)v325)
                      {
                        v326 = 0;
                        v320.n128_u8[0] = *((_BYTE *)v591 + kk);
                        v320.n128_f32[0] = (float)v320.n128_u32[0];
                        v328 = *((_QWORD *)v324 + 2);
                        v327 = (_DWORD *)*((_QWORD *)v324 + 3);
                        v329 = *v324;
                        do
                        {
                          v330 = v327;
                          v331 = v329;
                          if ((_DWORD)v329)
                          {
                            do
                            {
                              *v330++ = v320.n128_u32[0];
                              --v331;
                            }
                            while (v331);
                          }
                          ++v326;
                          v327 = (_DWORD *)((char *)v327 + v328);
                        }
                        while (v326 != v325);
                      }
                    }
                    v332 = *(_QWORD *)(v558 + 16);
                    *(_QWORD *)__p = &off_250800498;
                    v333 = v541[1];
                    *(_OWORD *)&__p[8] = *v541;
                    *(_OWORD *)&__p[24] = v333;
                    v583 = v541[2];
                    sub_2367FE7B0((uint64_t)v591, (uint64_t)__p, *v572);
                    sub_2367CBE88(v622, 1uLL);
                    v334 = *v556;
                    if (!*v556)
                      goto LABEL_565;
                    v335 = 0;
                    v550 = -(uint64_t)(v332 >> 2);
                    v336 = v319 + 2048;
                    v337 = *v572;
LABEL_476:
                    if (!v337)
                      goto LABEL_564;
                    v338 = 0;
                    v339 = *(_QWORD *)(v558 + 24) + *(_QWORD *)(v558 + 16) * v335;
                    v340 = (int *)(v339 + 4 * v550);
LABEL_478:
                    if (v338)
                    {
                      v341 = *(int *)(v339 + 4 * v338 - 4);
                      if (v335)
                      {
                        v342 = v340[v338 - 1];
                        goto LABEL_483;
                      }
LABEL_489:
                      v344 = v338 + 1;
                      v345 = v341;
                      v343 = v341;
                      v342 = v341;
                      v346 = v341;
                    }
                    else
                    {
                      if (!v335)
                      {
                        v341 = 0;
                        goto LABEL_489;
                      }
                      v341 = *v340;
                      v342 = v341;
LABEL_483:
                      v343 = v340[v338];
                      v344 = v338 + 1;
                      v345 = v343;
                      if (v338 + 1 < v337)
                        v345 = v340[v338 + 1];
                      if (v335 < 2)
                        v346 = v340[v338];
                      else
                        v346 = v340[v550 + v338];
                    }
                    v347 = 0;
                    v348 = (uint64_t)(v335 << 63) >> 63;
                    v349 = v337 + 2;
                    v350 = v348 & (v337 + 2);
                    v351 = v350 + v338;
                    if (v337 - 1 <= v338)
                      v352 = v350 + v338;
                    else
                      v352 = v351 + 1;
                    if (v338)
                      v353 = v351 - 1;
                    else
                      v353 = v350;
                    for (mm = 5; mm != 17; mm += 3)
                    {
                      v355 = (*((_DWORD *)v591[mm] + v352)
                                          + *((_DWORD *)v591[mm] + v351)
                                          + *((_DWORD *)v591[mm] + v353));
                      v356 = __clz(v355 + 1) ^ 0x3F;
                      if (v356 <= 5)
                        LOBYTE(v356) = 5;
                      *(_DWORD *)((char *)&v617 + v347) = ((*(_DWORD *)&v609[4
                                                                                         * (v355 >> (v356 - 5))
                                                                                         + 16]
                                                                        * *(_DWORD *)&v609[v347]) >> (v356 - 5))
                                                        + 4;
                      v347 += 4;
                    }
                    if (v338)
                    {
                      if ((v335 & 1) != 0)
                        v357 = 0;
                      else
                        v357 = v349;
                      v358 = *((int *)v600 + v338 + v357 - 1);
                    }
                    else
                    {
                      v358 = 0;
                    }
                    v359 = 0;
                    v360 = 8 * v343;
                    v361 = 8 * v341;
                    v362 = 8 * v345;
                    v363 = *((int *)v600 + v351);
                    v364 = *((int *)v600 + v353);
                    v365 = v358 + v363;
                    v366 = *((int *)v600 + v352);
                    if (v363 >= 0)
                      v367 = v363;
                    else
                      v367 = -v363;
                    if (v358 >= 0)
                      v368 = v358;
                    else
                      v368 = -v358;
                    if (v367 <= v368)
                      v369 = v358;
                    else
                      v369 = v363;
                    if (v364 >= 0)
                      v370 = v364;
                    else
                      v370 = -v364;
                    if (v369 >= 0)
                      v371 = v369;
                    else
                      v371 = -v369;
                    if (v370 > v371)
                      v369 = v364;
                    if (v366 >= 0)
                      v372 = v366;
                    else
                      v372 = -v366;
                    if (v369 >= 0)
                      v373 = v369;
                    else
                      v373 = -v369;
                    if (v372 <= v373)
                      v374 = v369;
                    else
                      v374 = v366;
                    *(_DWORD *)v622[0] = v374;
                    v591[0] = (void *)(v362 - v360 + v361);
                    v591[1] = (void *)(v360 - (((v365 + v366) * v602) >> 5));
                    v591[2] = (void *)(v361 - (((v365 + v364) * v603) >> 5));
                    v591[3] = (void *)(v360
                                     - ((v604 * (uint64_t)(int)v364
                                       + v605 * (uint64_t)(int)v363
                                       + v606 * (uint64_t)(int)v366
                                       + 8 * ((v346 - v343) * v607 + (v342 - v341) * v608)) >> 5));
                    v320 = (__n128)vshlq_u32((uint32x4_t)v617, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v617)) ^ 0x1F) - 4)));
                    v620 = (int32x4_t)v320;
                    v320.n128_u32[0] = vaddvq_s32((int32x4_t)v320);
                    v375 = (v320.n128_u32[0] >> 1) - 1;
                    do
                    {
                      v375 += (_QWORD)v591[v359] * v620.u32[v359];
                      ++v359;
                    }
                    while (v359 != 4);
                    if (v362 <= v360)
                      v376 = 8 * v343;
                    else
                      v376 = v362;
                    if (v361 > v376)
                      v376 = v361;
                    if (v360 >= v362)
                      v377 = v362;
                    else
                      v377 = 8 * v343;
                    if (v377 >= v361)
                      v377 = v361;
                    if ((v375 * *(unsigned int *)&v609[4 * (v320.n128_u32[0] - 1) + 16]) >> 24 < v376)
                      v376 = (v375 * *(unsigned int *)&v609[4 * (v320.n128_u32[0] - 1) + 16]) >> 24;
                    if (v377 > v376)
                      v376 = v377;
                    if ((v364 ^ v363 | v358 ^ v363) <= 0)
                      v378 = v376;
                    else
                      v378 = (v375 * *(unsigned int *)&v609[4 * (v320.n128_u32[0] - 1) + 16]) >> 24;
                    v592 = (void *)v378;
                    if (v374 < -511)
                    {
                      v374 = -512;
                      v379 = v567;
                    }
                    else
                    {
                      v379 = v567;
                      if (v374 > 511)
                        v374 = 511;
                    }
                    v380 = 0;
                    v381 = *(_DWORD *)(v339 + 4 * v338) - v336[v374 + 512] - ((unint64_t)(v378 + 3) >> 3);
                    *v307 = (2 * *(unsigned __int16 *)&v379[2 * (v374 + 512)]) | ((unint64_t)((2 * v381) ^ (v381 >> 31)) << 32);
                    v382 = *(int *)(v339 + 4 * v338);
                    v337 = *v572;
                    v383 = *v572 + 2;
                    if ((v335 & 1) != 0)
                      v384 = 0;
                    else
                      v384 = *v572 + 2;
                    v385 = 8 * v382;
                    v386 = v384 + v338;
                    *((_DWORD *)v600 + v384 + v338) = (_DWORD)v592 - 8 * v382;
                    v387 = v338 + (v348 & v383) + 1;
                    v388 = (void **)&v593;
                    do
                    {
                      v389 = (char *)v591[v380] - v385;
                      if ((uint64_t)v389 < 0)
                        v389 = (char *)(v385 - (_QWORD)v591[v380]);
                      v390 = (unint64_t)(v389 + 3) >> 3;
                      v391 = *v388;
                      v388 += 3;
                      v391[v386] = v390;
                      v391[v387] += v390;
                      ++v380;
                    }
                    while (v380 != 4);
                    ++v307;
                    v338 = v344;
                    if (v344 >= v337)
                    {
                      v334 = *v556;
LABEL_564:
                      if (++v335 >= v334)
                      {
LABEL_565:
                        if (v622[0])
                        {
                          v622[1] = v622[0];
                          operator delete(v622[0]);
                        }
                        if (v600)
                        {
                          v601 = v600;
                          operator delete(v600);
                        }
                        for (nn = 0; nn != -24; nn -= 6)
                        {
                          v393 = *(void **)&v599[nn - 2];
                          if (v393)
                          {
                            *(_QWORD *)&v599[nn] = v393;
                            operator delete(v393);
                          }
                        }
LABEL_677:
                        v12 = 0;
LABEL_678:
                        MEMORY[0x23B7F8F48](v567, 0x1000C408E7E3807, v320);
                        if (v610[0])
                        {
                          v610[1] = v610[0];
                          operator delete(v610[0]);
                        }
                        if (v611)
                          operator delete(v611);
LABEL_682:
                        for (i1 = 104; i1 != -16; i1 -= 40)
                          sub_2367C2F38((uint64_t *)((char *)v630 + i1));
                        v309 = a2;
                        v257 = v547;
                        v306 = v552;
                        if ((_DWORD)v12)
                          goto LABEL_765;
LABEL_685:
                        if (++v306 == v257)
                          goto LABEL_427;
                        continue;
                      }
                      goto LABEL_476;
                    }
                    goto LABEL_478;
                  }
                }
                v305 = v257;
                bzero(v263, 8 * v254);
                v257 = v305;
                v292 = &v263[8 * v254];
              }
              a11[1] = v292;
              goto LABEL_443;
            }
            v573[0] = v551;
            sub_2367CBE88(&v611, 4 * *(int *)(v39 + 20) + 16);
            v54 = (int)v46;
            v55 = fminf(*(float *)(v39 + 16), 1.0);
            v56 = v55;
            v57 = v49 + ((uint64_t)(int)v46 << 6);
            v58 = *(_QWORD *)(v57 + 40);
            v570 = (uint64_t *)(v57 + 40);
            if (v55 > 0.0)
            {
              v59 = fmin(1024.0 / (double)(unint64_t)(*(_QWORD *)(v49 + ((uint64_t)(int)v46 << 6) + 48) * v58), 1.0);
              if (v59 > v56)
                v56 = v59;
            }
            v560 = v46;
            v616 = (unint64_t)(v56 * 4294967300.0);
            v617 = xmmword_2368AFB70;
            v574[0] = &v617;
            v574[1] = &v616;
            v557 = v49 + ((uint64_t)(int)v46 << 6);
            v613 = *(_QWORD *)(v557 + 16) >> 2;
            v60 = (v612 - (_BYTE *)v611) >> 2;
            v61 = v60 - 16;
            sub_2367DA410((uint64_t)v591, v60 - 16, v58);
            v12 = v593;
            if ((_DWORD)v593)
            {
              v39 = a2;
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)v591;
              *(_OWORD *)&__p[16] = *(_OWORD *)&v591[2];
              *(_QWORD *)&__p[32] = v592;
              *(_QWORD *)&v583 = v61;
              *((_QWORD *)&v583 + 1) = v58;
              v584 = 0;
              v587 = &off_250800498;
              v62 = v544[1];
              v588 = *v544;
              v589 = v62;
              v590 = v544[2];
              sub_2367FE7B0((uint64_t)v591, (uint64_t)&v587, *v570);
              v555 = (unint64_t *)(v49 + (v54 << 6) + 48);
              v63 = (unint64_t)(v56 * (double)*v555 * (double)(unint64_t)*v570 + 64.0);
              v64 = *(void ***)a7;
              v65 = (void **)*((_QWORD *)a7 + 1);
              while (v64 != v65)
              {
                v66 = (_BYTE *)v64[1] - (_BYTE *)*v64;
                v67 = v63 + (v66 >> 1);
                if (v67 > ((_BYTE *)v64[2] - (_BYTE *)*v64) >> 1)
                {
                  if ((v67 & 0x8000000000000000) != 0)
                    sub_2367C3440();
                  v68 = (char *)sub_2367CA09C(v67);
                  v71 = (char *)*v64;
                  v70 = (char *)v64[1];
                  v72 = &v68[2 * (v66 >> 1)];
                  if (v70 != *v64)
                  {
                    do
                    {
                      v73 = *((_WORD *)v70 - 1);
                      v70 -= 2;
                      *((_WORD *)v72 - 1) = v73;
                      v72 -= 2;
                    }
                    while (v70 != v71);
                    v70 = (char *)*v64;
                  }
                  *v64 = v72;
                  v64[1] = &v68[2 * (v66 >> 1)];
                  v64[2] = &v68[2 * v69];
                  if (v70)
                    operator delete(v70);
                }
                v64 += 3;
              }
              v74 = (unint64_t *)*((_QWORD *)a7 + 6);
              v75 = (unint64_t *)*((_QWORD *)a7 + 7);
              while (v74 != v75)
              {
                sub_23681F8EC(v74, v74[1] + v63 - *v74);
                v74 += 3;
              }
              v76 = 3 * (v63 + ((uint64_t)(*((_QWORD *)a7 + 4) - *((_QWORD *)a7 + 3)) >> 1));
              v77 = __clz(v76 >> 1) ^ 0x3F;
              if ((((v76 >> 1) - 1) & (v76 >> 1)) != 0)
                v78 = v77 + 1;
              else
                v78 = v77;
              v79 = a6;
              if (1 << v78 != (uint64_t)(*((_QWORD *)a7 + 23) - *((_QWORD *)a7 + 22)) >> 2)
              {
                sub_2367CBAC8((char **)a7 + 22, 1 << v78, &dword_236923D38);
                v81 = *((_QWORD *)a7 + 3);
                v80 = *((_QWORD *)a7 + 4);
                if (v80 != v81)
                {
                  v82 = 0;
                  do
                  {
                    if (*(__int16 *)(v81 + 2 * v82) != -1)
                    {
                      sub_236875AD8((uint64_t)a7, v82);
                      v81 = *((_QWORD *)a7 + 3);
                      v80 = *((_QWORD *)a7 + 4);
                    }
                    ++v82;
                  }
                  while (v82 < (v80 - v81) >> 1);
                }
              }
              LOBYTE(v585) = *((_QWORD *)a7 + 16) - *((_QWORD *)a7 + 15) != 4;
              v622[0] = &v585;
              v622[1] = &v611;
              v623 = (void *)v557;
              v624 = &v613;
              v625 = __p;
              v626 = v591;
              v627 = a7;
              v628 = v573;
              v629 = v574;
              if (*v555)
              {
                v83 = 0;
                do
                {
                  v84 = *(_QWORD *)(v557 + 24) + *(_QWORD *)(v557 + 16) * v83;
                  sub_2367FE934(v557, v83, a1, v560, (unsigned int *)__p);
                  v85 = v611;
                  *(_DWORD *)v611 = v560;
                  v85[1] = v79;
                  v85[2] = v83;
                  v85[9] = 0;
                  v86 = *v570;
                  if (v83 >= 2 && (v86 >= 9 ? (v87 = (_QWORD)v583 == 0) : (v87 = 0), v87))
                  {
                    v89 = 0;
                    v90 = 1;
                    do
                    {
                      v91 = v90;
                      sub_23686C9C0((uint64_t)v622, v84, v89, v83);
                      v90 = 0;
                      v89 = 1;
                    }
                    while ((v91 & 1) != 0);
                    v94 = *v570;
                    v95 = *v570 - 2;
                    if (v95 >= 3)
                    {
                      v96 = 2;
                      do
                      {
                        v97 = (int *)(v84 + 4 * v96);
                        if ((_BYTE)v585)
                        {
                          v98 = 0;
                          v99 = v97[~v613];
                          v92.i64[0] = *(_QWORD *)&v97[-v613];
                          v100 = v92.i32[0];
                          v102 = *(v97 - 2);
                          v101 = *(v97 - 1);
                          v103 = v97[-2 * v613];
                          v568 = v97[2 - v613];
                          v104 = (char *)v611;
                          if (v92.i32[0] >= 0)
                            LODWORD(v105) = *(_QWORD *)&v97[-v613];
                          else
                            v105 = -(uint64_t)v92.i32[0];
                          *((_DWORD *)v611 + 3) = v96;
                          *((_DWORD *)v104 + 4) = v105;
                          if (v101 >= 0)
                            LODWORD(v106) = v101;
                          else
                            v106 = -v101;
                          *((_DWORD *)v104 + 5) = v106;
                          *((_DWORD *)v104 + 6) = v92.i32[0];
                          v107 = v101 - *((_DWORD *)v104 + 9);
                          *((_DWORD *)v104 + 7) = v101;
                          *((_DWORD *)v104 + 8) = v107;
                          v108 = v92.i32[0] + v101 - v99;
                          *((_DWORD *)v104 + 9) = v108;
                          *((_DWORD *)v104 + 10) = v101 - v99;
                          v93.i32[0] = v99;
                          v109.i64[0] = vzip1q_s32(v93, v92).u64[0];
                          v109.i64[1] = __PAIR64__(v101, v109.u32[1]);
                          v110.i64[0] = v92.i64[0];
                          v110.i64[1] = __PAIR64__(v102, v103);
                          *(int32x4_t *)(v104 + 44) = vsubq_s32(v109, v110);
                          v111 = v94 + 2;
                          if ((v83 & 1) != 0)
                            v112 = v94 + 2;
                          else
                            v112 = 0;
                          v113 = v112 + (int)v96;
                          if (v94 - 1 <= (int)v96)
                            v114 = v112 + (int)v96;
                          else
                            v114 = v113 + 1;
                          if ((_DWORD)v96)
                            v115 = v113 - 1;
                          else
                            v115 = v112;
                          for (i2 = 5; i2 != 17; i2 += 3)
                          {
                            v117 = (*((_DWORD *)v591[i2] + v114)
                                                + *((_DWORD *)v591[i2] + v113)
                                                + *((_DWORD *)v591[i2] + v115));
                            v118 = __clz(v117 + 1) ^ 0x3F;
                            if (v118 <= 5)
                              LOBYTE(v118) = 5;
                            v620.i32[v98] = ((*(_DWORD *)&v609[4 * (v117 >> (v118 - 5))
                                                                           + 16]
                                                          * *(_DWORD *)&v609[v98 * 4]) >> (v118 - 5))
                                          + 4;
                            ++v98;
                          }
                          if ((_DWORD)v96)
                          {
                            if ((v83 & 1) != 0)
                              v119 = 0;
                            else
                              v119 = v111;
                            v120 = (int *)v600;
                            v121 = *((int *)v600 + (int)v96 + v119 - 1);
                          }
                          else
                          {
                            v121 = 0;
                            v120 = (int *)v600;
                          }
                          v148 = 0;
                          v149 = v92.i32[1];
                          v150 = 8 * v92.i32[0];
                          v151 = 8 * v101;
                          v152 = v120[v113];
                          v153 = v120[v115];
                          v154 = 8 * v92.i32[1];
                          v155 = v121 + v152;
                          v156 = v120[v114];
                          if (v152 >= 0)
                            v157 = v152;
                          else
                            v157 = -v152;
                          if (v121 >= 0)
                            v158 = v121;
                          else
                            v158 = -v121;
                          if (v157 <= v158)
                            v159 = v121;
                          else
                            v159 = v152;
                          if (v153 >= 0)
                            v160 = v153;
                          else
                            v160 = -v153;
                          if (v159 >= 0)
                            v161 = v159;
                          else
                            v161 = -v159;
                          if (v160 > v161)
                            v159 = v153;
                          if (v156 >= 0)
                            v162 = v156;
                          else
                            v162 = -v156;
                          if (v159 >= 0)
                            v163 = v159;
                          else
                            v163 = -v159;
                          if (v162 > v163)
                            LODWORD(v159) = v156;
                          *((_DWORD *)v104 + 15) = v159;
                          v591[0] = (void *)(v151 - v150 + v154);
                          v591[1] = (void *)(v150 - (((v155 + v156) * v602) >> 5));
                          v591[2] = (void *)(v151 - (((v155 + v153) * v603) >> 5));
                          v591[3] = (void *)(v150
                                           - ((v604 * (uint64_t)(int)v153
                                             + v605 * (uint64_t)(int)v152
                                             + v606 * (uint64_t)(int)v156
                                             + 8 * ((v103 - v92.i32[0]) * v607 + (v99 - v101) * v608)) >> 5));
                          v93 = vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32(v620)) ^ 0x1F) - 4));
                          v92 = (int32x4_t)vshlq_u32((uint32x4_t)v620, (uint32x4_t)v93);
                          *(int32x4_t *)v610 = v92;
                          v164 = vaddvq_s32(v92);
                          v165 = (v164 >> 1) - 1;
                          do
                          {
                            v165 += (_QWORD)v591[v148] * *((unsigned int *)v610 + v148);
                            ++v148;
                          }
                          while (v148 != 4);
                          v166 = 0;
                          v167 = (v165 * *(unsigned int *)&v609[4 * v164 + 12]) >> 24;
                          v168 = v153 ^ v152 | v121 ^ v152;
                          if (v154 <= v150)
                            v169 = 8 * v100;
                          else
                            v169 = v154;
                          if (v151 > v169)
                            v169 = 8 * v101;
                          if (v150 >= v154)
                            v150 = v154;
                          if (v150 < v151)
                            v151 = v150;
                          if (v167 >= v169)
                            v170 = v169;
                          else
                            v170 = (v165 * *(unsigned int *)&v609[4 * v164 + 12]) >> 24;
                          if (v151 <= v170)
                            v151 = v170;
                          if (v168 <= 0)
                            v167 = v151;
                          v171 = v149 + v100;
                          if (v149 + v100 < 0 != __OFADD__(v149, v100))
                            ++v171;
                          v172 = v99 + v100;
                          if (v99 + v100 < 0 != __OFADD__(v99, v100))
                            ++v172;
                          v173 = v99 + v101;
                          if (v99 + v101 < 0 != __OFADD__(v99, v101))
                            ++v173;
                          v174 = v100 + v101;
                          if (v100 + v101 < 0 != __OFADD__(v100, v101))
                            v175 = v174 + 1;
                          else
                            v175 = v100 + v101;
                          if ((int)v100 >= (int)v101)
                            v176 = v101;
                          else
                            v176 = v100;
                          if ((int)v101 <= (int)v100)
                            v177 = v100;
                          else
                            v177 = v101;
                          if (v176 <= (int)v99)
                            v178 = v108;
                          else
                            v178 = v177;
                          v592 = (void *)v167;
                          v179 = (v167 + 3) >> 3;
                          v180 = v171 >> 1;
                          v181 = v172 >> 1;
                          v182 = v173 >> 1;
                          v183 = v175 >> 1;
                          if (v177 >= (int)v99)
                            v184 = v178;
                          else
                            v184 = v176;
                          v185 = v184;
                          v186 = v174 - v99;
                          v187 = v100 - v99;
                          if (v100 - v99 < 0)
                            v187 = v99 - v100;
                          v188 = v186 - v100;
                          if (v188 < 0)
                            v188 = -v188;
                          if (v187 >= v188)
                            v189 = v100;
                          else
                            v189 = v101;
                          v190 = 6 * (int)v100 - v101 + 8 * v101 + v102 + 3 * v149 - 2 * v103 + v568;
                          v191 = v190 + 8;
                          v192 = v190 + 23;
                          if (v191 >= 0)
                            v192 = v191;
                          v193 = v192 >> 4;
                          do
                          {
                            switch((int)v166)
                            {
                              case 1:
                                v194 = v101;
                                break;
                              case 2:
                                v194 = v100;
                                break;
                              case 3:
                                v194 = v183;
                                break;
                              case 4:
                                v194 = v189;
                                break;
                              case 5:
                                v194 = v185;
                                break;
                              case 6:
                                v194 = v179;
                                break;
                              case 7:
                                v194 = v149;
                                break;
                              case 8:
                                v194 = v99;
                                break;
                              case 9:
                                v194 = v102;
                                break;
                              case 10:
                                v194 = v182;
                                break;
                              case 11:
                                v194 = v181;
                                break;
                              case 12:
                                v194 = v180;
                                break;
                              case 13:
                                v194 = v193;
                                break;
                              default:
                                v194 = 0;
                                break;
                            }
                            *((_QWORD *)v630 + v166++) = v194;
                          }
                          while (v166 != 14);
                        }
                        else
                        {
                          v122 = 0;
                          v123 = **((int **)a7 + 15);
                          v124 = v97[~v613];
                          v92.i64[0] = *(_QWORD *)&v97[-v613];
                          v125 = v92.i32[0];
                          v126 = *(v97 - 2);
                          v127 = *(v97 - 1);
                          v128 = v97[-2 * v613];
                          v129 = v97[2 - v613];
                          v130 = (char *)v611;
                          if (v92.i32[0] >= 0)
                            LODWORD(v131) = *(_QWORD *)&v97[-v613];
                          else
                            v131 = -(uint64_t)v92.i32[0];
                          *((_DWORD *)v611 + 3) = v96;
                          *((_DWORD *)v130 + 4) = v131;
                          if (v127 >= 0)
                            LODWORD(v132) = v127;
                          else
                            v132 = -v127;
                          *((_DWORD *)v130 + 5) = v132;
                          *((_DWORD *)v130 + 6) = v92.i32[0];
                          v133 = v127 - *((_DWORD *)v130 + 9);
                          *((_DWORD *)v130 + 7) = v127;
                          *((_DWORD *)v130 + 8) = v133;
                          v134 = v92.i32[0] + v127 - v124;
                          *((_DWORD *)v130 + 9) = v134;
                          *((_DWORD *)v130 + 10) = v127 - v124;
                          v93.i32[0] = v124;
                          v135.i64[0] = vzip1q_s32(v93, v92).u64[0];
                          v135.i64[1] = __PAIR64__(v127, v135.u32[1]);
                          v136.i64[0] = v92.i64[0];
                          v136.i64[1] = __PAIR64__(v126, v128);
                          v569 = v126;
                          *(int32x4_t *)(v130 + 44) = vsubq_s32(v135, v136);
                          v137 = v94 + 2;
                          if ((v83 & 1) != 0)
                            v138 = v94 + 2;
                          else
                            v138 = 0;
                          v139 = v138 + (int)v96;
                          if (v94 - 1 <= (int)v96)
                            v140 = v138 + (int)v96;
                          else
                            v140 = v139 + 1;
                          if ((_DWORD)v96)
                            v141 = v139 - 1;
                          else
                            v141 = v138;
                          for (i3 = 5; i3 != 17; i3 += 3)
                          {
                            v143 = (*((_DWORD *)v591[i3] + v140)
                                                + *((_DWORD *)v591[i3] + v139)
                                                + *((_DWORD *)v591[i3] + v141));
                            v144 = __clz(v143 + 1) ^ 0x3F;
                            if (v144 <= 5)
                              LOBYTE(v144) = 5;
                            v620.i32[v122] = ((*(_DWORD *)&v609[4 * (v143 >> (v144 - 5))
                                                                            + 16]
                                                           * *(_DWORD *)&v609[v122 * 4]) >> (v144 - 5))
                                           + 4;
                            ++v122;
                          }
                          v561 = v129;
                          if ((_DWORD)v96)
                          {
                            if ((v83 & 1) != 0)
                              v145 = 0;
                            else
                              v145 = v137;
                            v146 = (int *)v600;
                            v147 = *((int *)v600 + (int)v96 + v145 - 1);
                          }
                          else
                          {
                            v147 = 0;
                            v146 = (int *)v600;
                          }
                          v195 = 0;
                          v196 = v92.i32[1];
                          v197 = 8 * v92.i32[0];
                          v198 = 8 * v127;
                          v199 = v146[v139];
                          v200 = v146[v141];
                          v201 = 8 * v92.i32[1];
                          v202 = v147 + v199;
                          v203 = v146[v140];
                          if (v199 >= 0)
                            v204 = v199;
                          else
                            v204 = -v199;
                          if (v147 >= 0)
                            v205 = v147;
                          else
                            v205 = -v147;
                          if (v204 <= v205)
                            v206 = v147;
                          else
                            v206 = v199;
                          if (v200 >= 0)
                            v207 = v200;
                          else
                            v207 = -v200;
                          if (v206 >= 0)
                            v208 = v206;
                          else
                            v208 = -v206;
                          if (v207 <= v208)
                            v209 = v206;
                          else
                            v209 = v200;
                          if (v203 >= 0)
                            v210 = v203;
                          else
                            v210 = -v203;
                          if (v209 >= 0)
                            v211 = v209;
                          else
                            v211 = -v209;
                          if (v210 > v211)
                            LODWORD(v209) = v203;
                          *((_DWORD *)v130 + 15) = v209;
                          v591[0] = (void *)(v198 - v197 + v201);
                          v591[1] = (void *)(v197 - (((v202 + v203) * v602) >> 5));
                          v591[2] = (void *)(v198 - (((v202 + v200) * v603) >> 5));
                          v591[3] = (void *)(v197
                                           - ((v604 * (uint64_t)(int)v200
                                             + v605 * (uint64_t)(int)v199
                                             + v606 * (uint64_t)(int)v203
                                             + 8 * ((v128 - v92.i32[0]) * v607 + (v124 - v127) * v608)) >> 5));
                          v93 = vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32(v620)) ^ 0x1F) - 4));
                          v92 = (int32x4_t)vshlq_u32((uint32x4_t)v620, (uint32x4_t)v93);
                          *(int32x4_t *)v610 = v92;
                          v212 = vaddvq_s32(v92);
                          v213 = (v212 >> 1) - 1;
                          do
                          {
                            v213 += (_QWORD)v591[v195] * *((unsigned int *)v610 + v195);
                            ++v195;
                          }
                          while (v195 != 4);
                          v214 = (v213 * *(unsigned int *)&v609[4 * v212 + 12]) >> 24;
                          v215 = v200 ^ v199 | v147 ^ v199;
                          if (v201 <= v197)
                            v216 = (void *)(8 * v125);
                          else
                            v216 = (void *)v201;
                          if (v198 > (uint64_t)v216)
                            v216 = (void *)(8 * v127);
                          if (v197 >= v201)
                            v217 = v201;
                          else
                            v217 = 8 * v125;
                          if (v217 >= v198)
                            v217 = 8 * v127;
                          if (v214 < (uint64_t)v216)
                            v216 = (void *)v214;
                          if (v217 > (uint64_t)v216)
                            v216 = (void *)v217;
                          if (v215 > 0)
                            v216 = (void *)v214;
                          v592 = v216;
                          switch((int)v123)
                          {
                            case 1:
                              break;
                            case 2:
                              v127 = v125;
                              break;
                            case 3:
                              v225 = __OFADD__(v125, v127);
                              v219 = v125 + v127;
                              v218 = (v219 < 0) ^ v225;
                              goto LABEL_331;
                            case 4:
                              v226 = v125 + v127 - v124;
                              v227 = v226 - v127;
                              if (v226 - v127 < 0)
                                v227 = v127 - v226;
                              v228 = v226 - v125;
                              if (v228 < 0)
                                v228 = -v228;
                              if (v227 >= v228)
                                v127 = v125;
                              break;
                            case 5:
                              if ((int)v125 >= (int)v127)
                                v220 = v127;
                              else
                                v220 = v125;
                              if ((int)v127 <= (int)v125)
                                LODWORD(v127) = v125;
                              if (v220 <= (int)v124)
                                v221 = v134;
                              else
                                v221 = v127;
                              if ((int)v127 >= (int)v124)
                                LODWORD(v127) = v221;
                              else
                                LODWORD(v127) = v220;
                              v127 = (int)v127;
                              break;
                            case 6:
                              v127 = ((uint64_t)v216 + 3) >> 3;
                              break;
                            case 7:
                              v127 = v196;
                              break;
                            case 8:
                              v127 = v124;
                              break;
                            case 9:
                              v127 = v569;
                              break;
                            case 10:
                              v225 = __OFADD__(v124, v127);
                              v219 = v124 + v127;
                              v218 = (v219 < 0) ^ v225;
                              goto LABEL_331;
                            case 11:
                              v219 = v124 + v125;
                              v218 = (v124 + v125 < 0) ^ __OFADD__(v124, v125);
                              goto LABEL_331;
                            case 12:
                              v219 = v196 + v125;
                              v218 = (v196 + v125 < 0) ^ __OFADD__(v196, v125);
LABEL_331:
                              if (v218)
                                ++v219;
                              v127 = v219 >> 1;
                              break;
                            case 13:
                              v222 = 6 * (int)v125 - v127 + 8 * v127 + v569 + 3 * v196 - 2 * v128 + v561;
                              v223 = v222 + 8;
                              v224 = v222 + 23;
                              if (v223 >= 0)
                                v224 = v223;
                              v127 = v224 >> 4;
                              break;
                            default:
                              v127 = 0;
                              break;
                          }
                          *((_QWORD *)v630 + v123) = v127;
                        }
                        ++*(_QWORD *)v573[0];
                        v229 = v574[0];
                        v230 = *((_QWORD *)v574[0] + 1);
                        v231 = v230 + *(_QWORD *)v574[0];
                        v232 = (v230 >> 5) ^ ((*(_QWORD *)v574[0] ^ (*(_QWORD *)v574[0] << 23)) >> 18) ^ v230 ^ *(_QWORD *)v574[0] ^ (*(_QWORD *)v574[0] << 23);
                        *(_QWORD *)v574[0] = v230;
                        v229[1] = v232;
                        if (*(_QWORD *)v574[1] >= HIDWORD(v231))
                          sub_236875CAC((uint64_t)a7, *v97, &v611, (uint64_t)v630);
                        v233 = 0;
                        v94 = *v570;
                        v234 = *v570 + 2;
                        if ((v83 & 1) != 0)
                          v235 = 0;
                        else
                          v235 = *v570 + 2;
                        v236 = 8 * *v97;
                        v237 = v235 + v96;
                        *((_DWORD *)v600 + v237) = (_DWORD)v592 - v236;
                        v238 = ++v96 + (((uint64_t)(v83 << 63) >> 63) & v234);
                        v239 = (void **)&v593;
                        do
                        {
                          v240 = (char *)v591[v233] - v236;
                          if ((uint64_t)v240 < 0)
                            v240 = (char *)(v236 - (_QWORD)v591[v233]);
                          v241 = (unint64_t)(v240 + 3) >> 3;
                          v242 = *v239;
                          v239 += 3;
                          v242[v237] = v241;
                          v242[v238] += v241;
                          ++v233;
                        }
                        while (v233 != 4);
                        v95 = v94 - 2;
                      }
                      while (v96 < v94 - 2);
                      v79 = a6;
                    }
                    if (v95 < v94)
                    {
                      do
                        sub_23686C9C0((uint64_t)v622, v84, v95++, v83);
                      while (v95 < *v570);
                    }
                  }
                  else if (v86)
                  {
                    v88 = 0;
                    do
                      sub_23686C9C0((uint64_t)v622, v84, v88++, v83);
                    while (v88 < *v570);
                  }
                  ++v83;
                }
                while (v83 < *v555);
              }
              if (v600)
              {
                v601 = v600;
                operator delete(v600);
              }
              for (i4 = 0; i4 != -24; i4 -= 6)
              {
                v244 = *(void **)&v599[i4 - 2];
                if (v244)
                {
                  *(_QWORD *)&v599[i4] = v244;
                  operator delete(v244);
                }
              }
              v245 = *(_QWORD *)&__p[24];
              *(_QWORD *)&__p[24] = 0;
              v39 = a2;
              if (v245)
              {
                v246 = -*(_QWORD *)(v245 - 24);
                do
                  v247 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v247 + v246, &qword_2564313D8));
                free(*(void **)(v245 - 32));
              }
              v12 = 0;
            }
            v46 = v560;
            if (v611)
            {
              v612 = v611;
              operator delete(v611);
            }
            v47 = v549;
            if ((_DWORD)v12)
              goto LABEL_767;
          }
        }
        if (++v46 == v47)
          goto LABEL_365;
      }
    }
    v45 = v37;
    if (sub_236875464((uint64_t)v577, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 76)))
    {
      v12 = 1;
      goto LABEL_767;
    }
    v12 = sub_2368759C4((uint64_t)v577, a2 + 24, *(_DWORD *)(a2 + 76));
    if (!(_DWORD)v12)
    {
      memset(v591, 0, 24);
      memset(v630, 0, 24);
      v622[1] = 0;
      v622[0] = 0;
      v623 = 0;
      memset(__p, 0, 24);
      sub_236877434(a1, a2, 0, (uint64_t)v622, (uint64_t)__p, (uint64_t)v591, (uint64_t)v630);
      sub_236876154((uint64_t)v577, &v587, 0, 0, (char **)v622, (char **)__p, (int **)v591, (int **)v630, *(_QWORD *)(a2 + 56));
      if (*(_QWORD *)__p)
        operator delete(*(void **)__p);
      v37 = v45;
      if (v622[0])
        operator delete(v622[0]);
      if (*(_QWORD *)&v630[0])
        operator delete(*(void **)&v630[0]);
      if (v591[0])
        operator delete(v591[0]);
      a7 = v577;
      goto LABEL_58;
    }
LABEL_767:
    sub_236850294((char **)v577);
LABEL_768:
    v579[0] = &off_2507FF4D8;
    v591[0] = v581;
    sub_2367D6C98((void ***)v591);
    return v12;
  }
  return 1;
}

void sub_236874D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t i;

  STACK[0x578] = 0;
  if (v49)
  {
    v52 = -*(_QWORD *)(v49 - 24);
    do
      v53 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v53 + v52, &qword_2564313D8));
    free(*(void **)(v49 - 32));
  }
  MEMORY[0x23B7F8F48](a37, 0x1000C408E7E3807);
  v54 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v54;
    operator delete(v54);
  }
  if (STACK[0x4F0])
    operator delete((void *)STACK[0x4F0]);
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(v50 - 256 + i));
  STACK[0x4F0] = (unint64_t)&a42;
  sub_2367D17E4((void ***)&STACK[0x4F0]);
  if (a45)
    operator delete(a45);
  sub_236850294((char **)&a49);
  STACK[0x210] = (unint64_t)&off_2507FF4D8;
  a49 = (uint64_t)&STACK[0x258];
  sub_2367D6C98((void ***)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_236874FCC(uint64_t *a1, __int128 *a2, unint64_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, _OWORD *a7, unint64_t *a8, uint64_t *a9, uint64_t a10, void **a11, unint64_t *a12)
{
  BOOL v12;
  uint64_t v13;
  const void *v22;
  uint64_t v23;
  __int128 v24;
  const void *v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  void *__p;
  void *v38;
  uint64_t v39;
  _QWORD v40[2];
  char v41;

  if (a1[6])
    v12 = a1[7] == 0;
  else
    v12 = 1;
  if (v12)
    return 0;
  v28 = *a2;
  v23 = *((_QWORD *)a2 + 2);
  v22 = (const void *)*((_QWORD *)a2 + 3);
  v29 = v23;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_2368220C4(&v30, v22, *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - (_QWORD)v22) >> 2);
  v24 = a2[4];
  v33 = a2[3];
  v34 = v24;
  v35 = *((_QWORD *)a2 + 10);
  v36 = *(__int128 *)((char *)a2 + 88);
  v38 = 0;
  v39 = 0;
  v25 = (const void *)*((_QWORD *)a2 + 13);
  v26 = *((_QWORD *)a2 + 14);
  __p = 0;
  sub_2367DBF84(&__p, v25, v26, (v26 - (uint64_t)v25) >> 3);
  v40[0] = *((_QWORD *)a2 + 16);
  *(_QWORD *)((char *)v40 + 5) = *(_QWORD *)((char *)a2 + 133);
  v41 = *((_BYTE *)a2 + 144);
  if ((_DWORD)v34 == -1)
    LODWORD(v34) = 5;
  v13 = sub_236872098(a1, (uint64_t)&v28, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  return v13;
}

void sub_23687512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  sub_2367E2C08(&a13);
  _Unwind_Resume(a1);
}

float sub_236875154(int32x4_t *a1, unint64_t a2)
{
  signed int v2;
  unint64_t v3;
  int32x4_t *v4;
  __int32 v5;
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;

  if (a2)
  {
    v2 = 0;
    v3 = 4 * a2;
    v4 = a1;
    do
    {
      v5 = v4->i32[0];
      v4 = (int32x4_t *)((char *)v4 + 4);
      v2 += v5;
      v3 -= 4;
    }
    while (v3);
    v6 = vdupq_n_s32(v2);
    v7 = (float32x4_t)vdupq_n_s32(0x39800000u);
    v8 = vdupq_n_s32(0xC0D55555);
    v9 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v10 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v11 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v12 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v13 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v14 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    v15 = 0uLL;
    v16.i64[0] = 0x7F0000007FLL;
    v16.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V20.4S, #-1.0 }
    do
    {
      v22 = *a1++;
      v23 = vcvtq_f32_s32(v22);
      v24 = (int32x4_t)vmaxnmq_f32(vmulq_n_f32(v23, 1.0 / (float)v2), v7);
      v25 = vaddq_s32(v24, v8);
      v26 = vaddq_f32((float32x4_t)vsubq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)v25, v16)), _Q20);
      v15 = vsubq_f32(v15, vmulq_f32((float32x4_t)vbicq_s8((int8x16_t)vaddq_f32(vdivq_f32(vmlaq_f32(v13, v26, vmlaq_f32(v10, v9, v26)), vmlaq_f32(v14, v26, vmlaq_f32(v12, v11, v26))), vcvtq_f32_s32(vshrq_n_s32(v25, 0x17uLL))), (int8x16_t)vceqq_s32(v22, v6)), v23));
      v3 += 4;
    }
    while (v3 < a2);
  }
  else
  {
    v15 = 0uLL;
  }
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15));
}

uint64_t sub_23687526C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int16 v12;

  if (a2 != a3)
  {
    v3 = *(uint64_t **)result;
    v4 = *(uint64_t **)(result + 8);
    while (v3 != v4)
    {
      v5 = *v3;
      v3 += 3;
      v6 = *(_WORD *)(v5 + 2 * a2);
      *(_WORD *)(v5 + 2 * a2) = *(_WORD *)(v5 + 2 * a3);
      *(_WORD *)(v5 + 2 * a3) = v6;
    }
    v7 = *(uint64_t **)(result + 48);
    v8 = *(uint64_t **)(result + 56);
    while (v7 != v8)
    {
      v9 = *v7;
      v7 += 3;
      v10 = *(_BYTE *)(v9 + a2);
      *(_BYTE *)(v9 + a2) = *(_BYTE *)(v9 + a3);
      *(_BYTE *)(v9 + a3) = v10;
    }
    v11 = *(_QWORD *)(result + 24);
    v12 = *(_WORD *)(v11 + 2 * a2);
    *(_WORD *)(v11 + 2 * a2) = *(_WORD *)(v11 + 2 * a3);
    *(_WORD *)(v11 + 2 * a3) = v12;
  }
  return result;
}

void sub_2368752D4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = &v5[12 * a2];
    goto LABEL_21;
  }
  v8 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 2) >= v7)
  {
    v18 = &v4[12 * v7];
    v19 = 12 * a2 - 4 * ((v4 - *a1) >> 2);
    v20 = v4 + 8;
    do
    {
      *v20 = 0;
      *((_QWORD *)v20 - 1) = 2139095039;
      v20 += 3;
      v19 -= 12;
    }
    while (v19);
LABEL_21:
    a1[1] = v18;
    return;
  }
  if (a2 > 0x1555555555555555)
    sub_2367C3440();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 2);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0xAAAAAAAAAAAAAAALL)
    v11 = 0x1555555555555555;
  else
    v11 = v10;
  if (v11 > 0x1555555555555555)
    sub_2367C3488();
  v12 = (char *)operator new(12 * v11);
  v13 = &v12[12 * v6];
  v14 = v13 + 8;
  v15 = 12 * a2 - 12 * v6;
  do
  {
    *v14 = 0;
    *((_QWORD *)v14 - 1) = 2139095039;
    v14 += 3;
    v15 -= 12;
  }
  while (v15);
  if (v4 != v5)
  {
    do
    {
      v16 = *(_QWORD *)(v4 - 12);
      v4 -= 12;
      v17 = *((_DWORD *)v4 + 2);
      *(_QWORD *)(v13 - 12) = v16;
      v13 -= 12;
      *((_DWORD *)v13 + 2) = v17;
    }
    while (v4 != v5);
    v4 = v5;
  }
  *a1 = v13;
  a1[1] = &v12[12 * a2];
  a1[2] = &v12[12 * v11];
  if (v4)
    operator delete(v4);
}

uint64_t sub_236875464(uint64_t a1, int a2, int a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int32x2_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1)
  {
    LODWORD(v46) = 6;
    sub_236875894((_QWORD *)(a1 + 120), (char *)&v46, (char *)&v46 + 4, 1uLL);
    v4 = 1;
  }
  else
  {
    if (a2 == 6 && a3 == 2)
      return 1;
    if (a2 == 14)
    {
      v46 = 0x500000006;
      sub_236875894((_QWORD *)(a1 + 120), (char *)&v46, (char *)&v47, 2uLL);
    }
    else if (a2 == 15)
    {
      v7 = 0;
      v8 = *(char **)(a1 + 128);
      do
      {
        v9 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)v8 >= v9)
        {
          v11 = *(char **)(a1 + 120);
          v12 = (v8 - v11) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            sub_2367C3440();
          v14 = v9 - (_QWORD)v11;
          if (v14 >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v15 = (unint64_t)sub_2367C3454(v15);
            v11 = *(char **)(a1 + 120);
            v8 = *(char **)(a1 + 128);
          }
          else
          {
            v16 = 0;
          }
          v17 = (_DWORD *)(v15 + 4 * v12);
          *v17 = v7;
          v10 = (char *)(v17 + 1);
          while (v8 != v11)
          {
            v18 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *--v17 = v18;
          }
          *(_QWORD *)(a1 + 120) = v17;
          *(_QWORD *)(a1 + 128) = v10;
          *(_QWORD *)(a1 + 136) = v15 + 4 * v16;
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_DWORD *)v8 = v7;
          v10 = v8 + 4;
        }
        *(_QWORD *)(a1 + 128) = v10;
        ++v7;
        v8 = v10;
      }
      while (v7 != 14);
      v19 = *(_QWORD *)(a1 + 120);
      v20 = *(int32x2_t *)v19;
      *(int32x2_t *)v19 = vrev64_s32(*(int32x2_t *)(v19 + 20));
      *(int32x2_t *)(v19 + 20) = vrev64_s32(v20);
    }
    else
    {
      LODWORD(v46) = a2;
      sub_236875894((_QWORD *)(a1 + 120), (char *)&v46, (char *)&v46 + 4, 1uLL);
    }
    if (a3 == 2)
    {
      v22 = *(char **)(a1 + 120);
      v21 = *(char **)(a1 + 128);
      if (v22 != v21)
      {
        while (*(_DWORD *)v22 != 6)
        {
          v22 += 4;
          if (v22 == v21)
          {
            v22 = *(char **)(a1 + 128);
            break;
          }
        }
      }
      if (v22 != v21)
      {
        v23 = v21 - (v22 + 4);
        if (v21 != v22 + 4)
          memmove(v22, v22 + 4, v21 - (v22 + 4));
        v21 = &v22[v23];
        *(_QWORD *)(a1 + 128) = &v22[v23];
      }
    }
    else
    {
      v21 = *(char **)(a1 + 128);
    }
    v4 = (uint64_t)&v21[-*(_QWORD *)(a1 + 120)] >> 2;
  }
  v25 = *(_QWORD **)a1;
  v24 = *(_QWORD **)(a1 + 8);
  v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *(_QWORD *)a1) >> 3);
  v27 = v4 - v26;
  if (v4 > v26)
  {
    v28 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v24) >> 3) >= v27)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v27 - 24) / 0x18) + 24);
      result = 0;
      *(_QWORD *)(a1 + 8) = &v24[3 * ((24 * v27 - 24) / 0x18) + 3];
      return result;
    }
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3440();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v25) >> 3);
    if (2 * v29 > v4)
      v4 = 2 * v29;
    if (v29 >= 0x555555555555555)
      v30 = 0xAAAAAAAAAAAAAAALL;
    else
      v30 = v4;
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3488();
    v31 = (char *)operator new(24 * v30);
    v32 = &v31[24 * v26];
    v33 = &v31[24 * v30];
    v34 = 24 * ((24 * v27 - 24) / 0x18) + 24;
    bzero(v32, v34);
    v35 = &v32[v34];
    if (v24 != v25)
    {
      do
      {
        v36 = v32;
        *((_QWORD *)v32 - 1) = 0;
        v37 = *(_OWORD *)(v24 - 3);
        v24 -= 3;
        *(_OWORD *)(v32 - 24) = v37;
        v32 -= 24;
        *((_QWORD *)v36 - 1) = v24[2];
        *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
      }
      while (v24 != v25);
      v38 = *(_QWORD **)a1;
      v24 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v32;
      *(_QWORD *)(a1 + 8) = v35;
      *(_QWORD *)(a1 + 16) = v33;
      if (v24 != v38)
      {
        v39 = v24;
        do
        {
          v41 = (void *)*(v39 - 3);
          v39 -= 3;
          v40 = v41;
          if (v41)
          {
            *(v24 - 2) = v40;
            operator delete(v40);
          }
          v24 = v39;
        }
        while (v39 != v38);
        v24 = v38;
      }
      if (!v24)
        return 0;
      goto LABEL_68;
    }
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = v35;
    *(_QWORD *)(a1 + 16) = v33;
    if (v24)
LABEL_68:
      operator delete(v24);
    return 0;
  }
  if (v4 >= v26)
    return 0;
  v42 = &v25[3 * v4];
  if (v24 != v42)
  {
    v43 = *(_QWORD **)(a1 + 8);
    do
    {
      v45 = (void *)*(v43 - 3);
      v43 -= 3;
      v44 = v45;
      if (v45)
      {
        *(v24 - 2) = v44;
        operator delete(v44);
      }
      v24 = v43;
    }
    while (v43 != v42);
  }
  result = 0;
  *(_QWORD *)(a1 + 8) = v42;
  return result;
}

_QWORD *sub_236875894(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 62)
      sub_2367C3440();
    result = sub_2367C3454(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v12;
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 2;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v18 = (void *)*result;
LABEL_20:
    result = memmove(v18, __src, v13);
    goto LABEL_21;
  }
  v17 = &__src[4 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_20;
  }
LABEL_21:
  *v14 = &v9[v13];
  return result;
}

uint64_t sub_2368759C4(uint64_t a1, uint64_t a2, int a3)
{
  char *v5;
  int *v6;
  int *p_src;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int __src;
  int v16;
  uint64_t v17;

  v5 = (char *)(a1 + 96);
  if (a1 + 96 != a2)
    sub_2367D4108((char *)(a1 + 96), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (!a3)
  {
    __src = 9;
    v6 = &v16;
    p_src = &__src;
LABEL_8:
    sub_236847E58(v5, (char *)p_src, (uint64_t)v6, 1uLL);
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    if (a3 != 1)
      goto LABEL_15;
    v16 = 15;
    v6 = (int *)&v17;
    p_src = &v16;
    goto LABEL_8;
  }
  v8 = *(__int32 **)(a1 + 104);
  v9 = wmemchr(*(__int32 **)(a1 + 96), 15, ((uint64_t)v8 - *(_QWORD *)(a1 + 96)) >> 2);
  if (v9)
    v8 = v9;
  v10 = *(__int32 **)(a1 + 104);
  if (v8 != v10)
  {
    v11 = (char *)v10 - (char *)(v8 + 1);
    if (v10 != v8 + 1)
      memmove(v8, v8 + 1, (char *)v10 - (char *)(v8 + 1));
    *(_QWORD *)(a1 + 104) = (char *)v8 + v11;
  }
LABEL_15:
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  if (v12 == v13)
    return 1;
  sub_2367D1D34((uint64_t *)(a1 + 48), (v13 - v12) >> 2);
  return 0;
}

uint64_t sub_236875AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;

  v4 = sub_236875B3C(a1, a2);
  result = sub_236875BB4(a1, a2);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = (_DWORD *)(v6 + 4 * v4);
  if (*v7 == -1 || (v7 = (_DWORD *)(v6 + 4 * result), *v7 == -1))
    *v7 = a2;
  return result;
}

uint64_t sub_236875B3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;

  v2 = *(uint64_t **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = 506832829;
  if (*(uint64_t **)a1 != v3)
  {
    v4 = 506832829;
    do
    {
      v5 = *v2;
      v2 += 3;
      v4 = *(unsigned __int8 *)(v5 + 2 * a2 + 1) + 506832829 * (*(unsigned __int8 *)(v5 + 2 * a2) + 506832829 * v4);
    }
    while (v2 != v3);
  }
  for (i = *(uint64_t **)(a1 + 48); i != *(uint64_t **)(a1 + 56); i += 3)
  {
    v7 = *i;
    v4 = *(unsigned __int8 *)(v7 + a2) + 506832829 * v4;
  }
  return (((*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 2) - 1) & (v4 >> 16);
}

uint64_t sub_236875BB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;

  v2 = *(uint64_t **)(a1 + 48);
  v3 = 0x1E35A7BD1E35A7BDLL;
  while (v2 != *(uint64_t **)(a1 + 56))
  {
    v4 = *v2;
    v2 += 3;
    v3 = (0x1E35A7BD1E35A7BDLL * v3) ^ *(unsigned __int8 *)(v4 + a2);
  }
  for (i = *(uint64_t **)a1; i != *(uint64_t **)(a1 + 8); i += 3)
  {
    v6 = *i;
    v3 = (0x1E35A7BD1E35A7BDLL * ((0x1E35A7BD1E35A7BDLL * v3) ^ *(unsigned __int8 *)(v6 + 2 * a2))) ^ *(unsigned __int8 *)(v6 + 2 * a2 + 1);
  }
  return (((*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 2) - 1) & (v3 >> 16);
}

uint64_t sub_236875C3C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _BOOL4 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  result = 1;
  while (v4 != v5)
  {
    v7 = *v4;
    v4 += 3;
    v8 = (unsigned __int8 *)(v7 + 2 * a2);
    v9 = (unsigned __int8 *)(v7 + 2 * a3);
    v11 = v8[1] == v9[1] && *v8 == *v9;
    result = v11 & result;
  }
  v13 = a1[6];
  v12 = a1[7];
  while (v13 != v12)
  {
    v14 = *v13;
    v13 += 3;
    result = (*(unsigned __int8 *)(v14 + a2) == *(unsigned __int8 *)(v14 + a3)) & result;
  }
  return result;
}

uint64_t sub_236875CAC(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v8;
  int v9;
  unsigned int v10;
  __int16 v11;
  unsigned int v12;
  void **v13;
  _WORD *v14;
  void **v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  char *v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  int v31;
  char v32;
  _BYTE *v33;
  _QWORD *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  unint64_t v47;
  char *v48;
  _WORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t result;
  __int16 v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;

  v5 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) != v5)
  {
    v8 = 0;
    do
    {
      v9 = a2 - *(_QWORD *)(a4 + 8 * *(int *)(v5 + 4 * v8));
      v10 = (2 * v9) ^ (v9 >> 31);
      if (v10 >= 0x10)
      {
        v12 = __clz(v10);
        v10 = (((-1 << (v12 ^ 0x1F)) + v10) & 3) - 8 * v12 + 4 * (((-1 << (v12 ^ 0x1F)) + v10) >> (30 - v12)) + 232;
        v11 = 28 - v12;
      }
      else
      {
        v11 = 0;
      }
      v13 = (void **)(*(_QWORD *)a1 + 24 * v8);
      v15 = v13 + 1;
      v14 = v13[1];
      v16 = (unint64_t)v13[2];
      if ((unint64_t)v14 >= v16)
      {
        v18 = (char *)v14 - (_BYTE *)*v13;
        if (v18 <= -3)
          sub_2367C3440();
        v19 = v18 >> 1;
        v20 = v16 - (_QWORD)*v13;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)sub_2367CA09C(v22);
        else
          v23 = 0;
        v24 = (_WORD *)(v22 + 2 * v19);
        *v24 = v10 | (unsigned __int16)(v11 << 8);
        v17 = v24 + 1;
        v25 = (char *)*v15;
        v26 = (char *)*v13;
        if (*v15 != *v13)
        {
          do
          {
            v27 = *((_WORD *)v25 - 1);
            v25 -= 2;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)*v13;
        }
        *v13 = v24;
        *v15 = v17;
        v13[2] = (void *)(v22 + 2 * v23);
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v14 = v10 | (unsigned __int16)(v11 << 8);
        v17 = v14 + 1;
      }
      *v15 = v17;
      ++v8;
      v5 = *(_QWORD *)(a1 + 120);
    }
    while (v8 < (*(_QWORD *)(a1 + 128) - v5) >> 2);
  }
  v28 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 104) != v28)
  {
    v29 = 0;
    do
    {
      v30 = (unint64_t *)(*(_QWORD *)(a1 + 48) + 24 * v29);
      v31 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)(v28 + 4 * v29));
      if (v31 <= -511)
        v31 = -511;
      if (v31 >= 511)
        v31 = 511;
      v32 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 24 * v29) + (v31 + 511));
      v34 = v30 + 1;
      v33 = (_BYTE *)v30[1];
      v35 = v30[2];
      if ((unint64_t)v33 >= v35)
      {
        v37 = *v30;
        v38 = &v33[-*v30];
        v39 = (unint64_t)(v38 + 1);
        if ((uint64_t)(v38 + 1) < 0)
          sub_2367C3440();
        v40 = v35 - v37;
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
          v41 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
          v42 = (char *)operator new(v41);
        else
          v42 = 0;
        v43 = &v38[(_QWORD)v42];
        v44 = &v38[(_QWORD)v42];
        *v44 = v32;
        v36 = v44 + 1;
        if (v33 != (_BYTE *)v37)
        {
          v45 = &v33[~v37];
          do
          {
            v46 = *--v33;
            (v45--)[(_QWORD)v42] = v46;
          }
          while (v33 != (_BYTE *)v37);
          v33 = (_BYTE *)*v30;
          v43 = v42;
        }
        *v30 = (unint64_t)v43;
        *v34 = v36;
        v30[2] = (unint64_t)&v42[v41];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v33 = v32;
        v36 = v33 + 1;
      }
      *v34 = v36;
      ++v29;
      v28 = *(_QWORD *)(a1 + 96);
    }
    while (v29 < (*(_QWORD *)(a1 + 104) - v28) >> 2);
  }
  v48 = *(char **)(a1 + 32);
  v47 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v48 >= v47)
  {
    v50 = *(char **)(a1 + 24);
    v51 = v48 - v50;
    if (v48 - v50 <= -3)
      sub_2367C3440();
    v52 = v51 >> 1;
    v53 = v47 - (_QWORD)v50;
    if (v53 <= (v51 >> 1) + 1)
      v54 = v52 + 1;
    else
      v54 = v53;
    v55 = v53 >= 0x7FFFFFFFFFFFFFFELL;
    v56 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v55)
      v56 = v54;
    if (v56)
    {
      v56 = (uint64_t)sub_2367CA09C(v56);
      v50 = *(char **)(a1 + 24);
      v48 = *(char **)(a1 + 32);
    }
    else
    {
      v57 = 0;
    }
    v58 = (_WORD *)(v56 + 2 * v52);
    v59 = v56 + 2 * v57;
    *v58 = 1;
    v49 = v58 + 1;
    while (v48 != v50)
    {
      v60 = *((_WORD *)v48 - 1);
      v48 -= 2;
      *--v58 = v60;
    }
    *(_QWORD *)(a1 + 24) = v58;
    *(_QWORD *)(a1 + 32) = v49;
    *(_QWORD *)(a1 + 40) = v59;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *(_WORD *)v48 = 1;
    v49 = v48 + 2;
  }
  *(_QWORD *)(a1 + 32) = v49;
  ++*(_QWORD *)(a1 + 168);
  v61 = *(_QWORD *)(a1 + 24);
  v62 = (((uint64_t)v49 - v61) >> 1) - 1;
  v63 = sub_236875B3C(a1, v62);
  v64 = sub_236875BB4(a1, v62);
  v65 = *(_QWORD *)(a1 + 176);
  v66 = (_DWORD *)(v65 + 4 * v63);
  v67 = *v66;
  if ((_DWORD)v67 == -1 || (result = sub_236875C3C((uint64_t **)a1, v62, *v66), !(_DWORD)result))
  {
    v66 = (_DWORD *)(v65 + 4 * v64);
    v67 = *v66;
    if ((_DWORD)v67 == -1)
      return sub_236875AD8(a1, v62);
    result = sub_236875C3C((uint64_t **)a1, v62, *v66);
    if (!(_DWORD)result)
      return sub_236875AD8(a1, v62);
  }
  v69 = *(_WORD *)(v61 + 2 * v67) + 1;
  *(_WORD *)(v61 + 2 * v67) = v69;
  if (v69 == -1)
    *v66 = -1;
  v70 = *(uint64_t **)a1;
  v71 = *(uint64_t **)(a1 + 8);
  while (v70 != v71)
  {
    v70[1] -= 2;
    v70 += 3;
  }
  v72 = *(_QWORD *)(a1 + 48);
  v73 = *(_QWORD *)(a1 + 56);
  while (v72 != v73)
  {
    --*(_QWORD *)(v72 + 8);
    v72 += 24;
  }
  *(_QWORD *)(a1 + 32) -= 2;
  return result;
}

void sub_236876154(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, char **a5, char **a6, int **a7, int **a8, unint64_t a9)
{
  _DWORD *v9;
  char *v11;
  int *v12;
  char *v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int *v62;
  _BYTE *v63;
  int *v64;
  int *v65;
  int v66;
  int v67;
  int *v68;
  int v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  size_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  char *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  int *v126;
  int v127;
  uint64_t v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  const void *v142;
  uint64_t v143;
  const void *v144;
  uint64_t v145;
  const void *v146;
  int *v147;
  int *v148;
  int v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  __int128 v158;
  void *v159;
  __int128 v160;
  uint64_t *v161;
  void *v164;
  void *v165;
  uint64_t v166;
  void *__pa;
  char *v169;
  __int128 v170;
  char *v171;
  void *v172;
  int *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  __int128 v178;
  char *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  char *v183;

  v175 = 0;
  v176 = 0;
  v177 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  if (a3 == a4)
  {
    v61 = a1;
  }
  else
  {
    v9 = a3;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v173;
    v169 = v176;
    do
    {
      if (*v9 != *a2)
      {
        v18 = *v9 - 1;
        if ((unint64_t)v12 >= v16)
        {
          v19 = v12 - v15;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
          {
            v172 = v15;
            v173 = v17;
            v175 = v13;
            v176 = v169;
            sub_2367C3440();
          }
          v21 = v14;
          if ((uint64_t)(v16 - (_QWORD)v15) >> 1 > v20)
            v20 = (uint64_t)(v16 - (_QWORD)v15) >> 1;
          if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
            v22 = (unint64_t)sub_2367C3454(v22);
          else
            v23 = 0;
          v24 = (int *)(v22 + 4 * v19);
          *v24 = v18;
          v17 = v24 + 1;
          while (v12 != v15)
          {
            v25 = *--v12;
            *--v24 = v25;
          }
          v16 = v22 + 4 * v23;
          if (v15)
          {
            v26 = v22 + 4 * v23;
            operator delete(v15);
            v16 = v26;
          }
          v12 = v17;
          v15 = v24;
          v14 = v21;
        }
        else
        {
          *v12++ = v18;
          v17 = v12;
        }
      }
      v27 = v9[1];
      if (v27 != a2[1])
      {
        v28 = v27 - 1;
        if ((unint64_t)v12 >= v16)
        {
          v29 = v12 - v15;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
          {
            v172 = v15;
            v173 = v17;
            v175 = v13;
            v176 = v169;
            sub_2367C3440();
          }
          v31 = v14;
          if ((uint64_t)(v16 - (_QWORD)v15) >> 1 > v30)
            v30 = (uint64_t)(v16 - (_QWORD)v15) >> 1;
          if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
            v32 = (unint64_t)sub_2367C3454(v32);
          else
            v33 = 0;
          v34 = (int *)(v32 + 4 * v29);
          *v34 = v28;
          v17 = v34 + 1;
          while (v12 != v15)
          {
            v35 = *--v12;
            *--v34 = v35;
          }
          v16 = v32 + 4 * v33;
          if (v15)
          {
            v36 = v32 + 4 * v33;
            operator delete(v15);
            v16 = v36;
          }
          v12 = v17;
          v15 = v34;
          v14 = v31;
        }
        else
        {
          *v12++ = v28;
          v17 = v12;
        }
      }
      v37 = v9[2];
      if (v37 != a2[2])
      {
        v38 = v37 - 1;
        if ((unint64_t)v11 >= v14)
        {
          v39 = (v11 - v13) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
          {
            v172 = v15;
            v173 = v17;
            v175 = v13;
            v176 = v169;
            sub_2367C3440();
          }
          v41 = v16;
          v42 = v14 - (_QWORD)v13;
          v43 = (uint64_t)(v14 - (_QWORD)v13) >> 1;
          if (v43 > v40)
            v40 = v43;
          if (v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v40;
          if (v44)
            v44 = (unint64_t)sub_2367C3454(v44);
          else
            v45 = 0;
          v46 = (char *)(v44 + 4 * v39);
          *(_DWORD *)v46 = v38;
          v169 = v46 + 4;
          while (v11 != v13)
          {
            v47 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v46 - 1) = v47;
            v46 -= 4;
          }
          v14 = v44 + 4 * v45;
          if (v13)
          {
            v48 = v44 + 4 * v45;
            operator delete(v13);
            v14 = v48;
          }
          v11 = v169;
          v13 = v46;
          v16 = v41;
        }
        else
        {
          *(_DWORD *)v11 = v38;
          v11 += 4;
          v169 = v11;
        }
      }
      v49 = v9[3];
      if (v49 != a2[3])
      {
        v50 = v49 - 1;
        if ((unint64_t)v11 >= v14)
        {
          v51 = (v11 - v13) >> 2;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 62)
          {
            v172 = v15;
            v173 = v17;
            v175 = v13;
            v176 = v169;
            sub_2367C3440();
          }
          v53 = v16;
          v54 = v14 - (_QWORD)v13;
          v55 = (uint64_t)(v14 - (_QWORD)v13) >> 1;
          if (v55 > v52)
            v52 = v55;
          if (v54 >= 0x7FFFFFFFFFFFFFFCLL)
            v56 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v56 = v52;
          if (v56)
            v56 = (unint64_t)sub_2367C3454(v56);
          else
            v57 = 0;
          v58 = (char *)(v56 + 4 * v51);
          *(_DWORD *)v58 = v50;
          v169 = v58 + 4;
          while (v11 != v13)
          {
            v59 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v58 - 1) = v59;
            v58 -= 4;
          }
          v14 = v56 + 4 * v57;
          if (v13)
          {
            v60 = v56 + 4 * v57;
            operator delete(v13);
            v14 = v60;
          }
          v11 = v169;
          v13 = v58;
          v16 = v53;
        }
        else
        {
          *(_DWORD *)v11 = v50;
          v11 += 4;
          v169 = v11;
        }
      }
      v9 += 5;
    }
    while (v9 != a4);
    v173 = v17;
    v174 = v16;
    v172 = v15;
    v176 = v169;
    v177 = v14;
    v175 = v13;
    v61 = a1;
  }
  std::__sort<std::__less<int,int> &,int *>();
  v63 = v172;
  v62 = v173;
  if (v172 == v173)
  {
    v62 = (int *)v172;
  }
  else
  {
    v64 = (int *)((char *)v172 + 4);
    while (v64 != v173)
    {
      v65 = v64 - 1;
      v66 = *(v64 - 1);
      v67 = *v64++;
      if (v66 == v67)
      {
        v68 = v65 + 2;
        if (v65 + 2 != v173)
        {
          do
          {
            v69 = v66;
            v66 = *v68;
            if (v69 != *v68)
            {
              v65[1] = v66;
              ++v65;
            }
            ++v68;
          }
          while (v68 != v62);
          v63 = v172;
        }
        v62 = v65 + 1;
        break;
      }
    }
  }
  sub_2367C5284((char **)&v172, ((char *)v62 - v63) >> 2);
  v71 = v175;
  v70 = v176;
  std::__sort<std::__less<int,int> &,int *>();
  if (v71 == v70)
  {
    v70 = v71;
  }
  else
  {
    v72 = v71 + 4;
    while (v72 != v70)
    {
      v73 = v72 - 4;
      v74 = *((_DWORD *)v72 - 1);
      v75 = *(_DWORD *)v72;
      v72 += 4;
      if (v74 == v75)
      {
        v76 = v73 + 8;
        if (v73 + 8 != v70)
        {
          do
          {
            v77 = v74;
            v74 = *(_DWORD *)v76;
            if (v77 != *(_DWORD *)v76)
            {
              *((_DWORD *)v73 + 1) = v74;
              v73 += 4;
            }
            v76 += 4;
          }
          while (v76 != v70);
          v71 = v175;
        }
        v70 = v73 + 4;
        break;
      }
    }
  }
  sub_2367C5284(&v175, (v70 - v71) >> 2);
  v79 = (uint64_t *)(v61 + 72);
  v78 = *(_QWORD *)(v61 + 72);
  v80 = *(_QWORD *)(v61 + 104) - *(_QWORD *)(v61 + 96);
  v81 = v80 >> 2;
  v82 = *(_QWORD *)(v61 + 80);
  v83 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v78) >> 3);
  v84 = (v80 >> 2) - v83;
  if (v80 >> 2 <= v83)
  {
    if (v80 >> 2 < v83)
    {
      v92 = v78 + 24 * v81;
      if (v82 != v92)
      {
        v93 = *(_QWORD *)(v61 + 80);
        do
        {
          v95 = *(void **)(v93 - 24);
          v93 -= 24;
          v94 = v95;
          if (v95)
          {
            *(_QWORD *)(v82 - 16) = v94;
            operator delete(v94);
          }
          v82 = v93;
        }
        while (v93 != v92);
      }
      *(_QWORD *)(v61 + 80) = v92;
    }
  }
  else
  {
    v85 = *(_QWORD *)(v61 + 88);
    if (0xAAAAAAAAAAAAAAABLL * ((v85 - v82) >> 3) >= v84)
    {
      v96 = 24 * ((24 * v84 - 24) / 0x18) + 24;
      bzero(*(void **)(v61 + 80), v96);
      *(_QWORD *)(v61 + 80) = v82 + v96;
    }
    else
    {
      if ((unint64_t)v80 >= 0x2AAAAAAAAAAAAAA9)
        sub_2367C3440();
      v181 = v61 + 88;
      v86 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v78) >> 3);
      if (2 * v86 > v81)
        v81 = 2 * v86;
      if (v86 >= 0x555555555555555)
        v87 = 0xAAAAAAAAAAAAAAALL;
      else
        v87 = v81;
      v88 = (char *)sub_2367D1EBC(v87);
      v89 = &v88[24 * v83];
      *(_QWORD *)&v178 = v88;
      *((_QWORD *)&v178 + 1) = v89;
      v180 = &v88[24 * v90];
      v91 = 24 * ((24 * v84 - 24) / 0x18) + 24;
      bzero(v89, v91);
      v179 = &v89[v91];
      sub_2367D1F00((_QWORD *)(v61 + 72), &v178);
      sub_2367D1F70((uint64_t)&v178);
    }
  }
  v97 = (_QWORD *)(v61 + 144);
  sub_2367D1D34((uint64_t *)(v61 + 144), (uint64_t)(*(_QWORD *)(v61 + 104) - *(_QWORD *)(v61 + 96)) >> 2);
  v98 = *(_QWORD *)(v61 + 96);
  if (*(_QWORD *)(v61 + 104) != v98)
  {
    v99 = 0;
    v100 = 0;
    v159 = 0;
    __pa = 0;
    v101 = 0;
    v102 = a9;
    v103 = a9 - 1;
    v160 = 0u;
    v158 = 0u;
    v161 = (uint64_t *)(v61 + 72);
    while (1)
    {
      v104 = *(_DWORD *)(v98 + 4 * v99);
      switch(v104)
      {
        case 0u:
          if (v172 == v173)
          {
            sub_236877090((char **)&v178, a6, v102);
          }
          else
          {
            v178 = 0uLL;
            v179 = 0;
            sub_2367CBEFC(&v178, v172, (uint64_t)v173, ((char *)v173 - (_BYTE *)v172) >> 2);
          }
          goto LABEL_173;
        case 1u:
          if (v175 == v176)
          {
            sub_236877090((char **)&v178, a5, v102);
          }
          else
          {
            v178 = 0uLL;
            v179 = 0;
            sub_2367CBEFC(&v178, v175, (uint64_t)v176, (v176 - v175) >> 2);
          }
          goto LABEL_173;
        case 2u:
        case 3u:
          v178 = 0uLL;
          v179 = 0;
          sub_236877260((void **)&v178, v103);
          if (v102 >= 2)
          {
            v164 = v101;
            v165 = v100;
            v110 = (char *)*((_QWORD *)&v178 + 1);
            v111 = (unint64_t)v179;
            v112 = 1;
            v113 = (char *)v178;
            do
            {
              v114 = (v112 << 8) / v102 - 1;
              if ((unint64_t)v110 >= v111)
              {
                v116 = (v110 - v113) >> 2;
                v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 62)
                {
                  v179 = (char *)v111;
                  *(_QWORD *)&v178 = v113;
                  sub_2367C3440();
                }
                if ((uint64_t)(v111 - (_QWORD)v113) >> 1 > v117)
                  v117 = (uint64_t)(v111 - (_QWORD)v113) >> 1;
                if (v111 - (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                  v118 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v118 = v117;
                if (v118)
                  v118 = (unint64_t)sub_2367C3454(v118);
                else
                  v119 = 0;
                v120 = (char *)(v118 + 4 * v116);
                *(_DWORD *)v120 = v114;
                v115 = v120 + 4;
                while (v110 != v113)
                {
                  v121 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *((_DWORD *)v120 - 1) = v121;
                  v120 -= 4;
                }
                v111 = v118 + 4 * v119;
                *((_QWORD *)&v178 + 1) = v115;
                if (v113)
                  operator delete(v113);
                v113 = v120;
                v102 = a9;
              }
              else
              {
                *(_DWORD *)v110 = v114;
                v115 = v110 + 4;
              }
              *((_QWORD *)&v178 + 1) = v115;
              ++v112;
              v110 = v115;
            }
            while (v112 != v102);
            v179 = (char *)v111;
            *(_QWORD *)&v178 = v113;
            v103 = a9 - 1;
            v61 = a1;
            v101 = v164;
            v100 = v165;
            v79 = v161;
          }
LABEL_173:
          v106 = *v79;
          v128 = *v79 + 24 * v99;
          v129 = *(void **)v128;
          if (*(_QWORD *)v128)
          {
            *(_QWORD *)(v106 + 24 * v99 + 8) = v129;
            operator delete(v129);
            *(_QWORD *)v128 = 0;
            *(_QWORD *)(v128 + 8) = 0;
            *(_QWORD *)(v128 + 16) = 0;
          }
          *(_OWORD *)v128 = v178;
          v109 = v179;
          goto LABEL_176;
        case 6u:
        case 7u:
        case 8u:
          goto LABEL_120;
        default:
          if (v104 >= 0x10)
          {
            v122 = v104 & 3;
            if (v122)
            {
              if (v122 != 2)
              {
                if (v122 == 1)
                {
LABEL_120:
                  v105 = (uint64_t)__pa;
                  if (v101 == __pa)
                  {
                    sub_2368772F4((uint64_t)&v178, a7, v102);
                    if (__pa)
                      operator delete(__pa);
                    v105 = *((_QWORD *)&v178 + 1);
                    v101 = (void *)v178;
                  }
                  v182 = 0uLL;
                  v183 = 0;
                  __pa = (void *)v105;
                  sub_2367CBEFC(&v182, v101, v105, (v105 - (uint64_t)v101) >> 2);
                }
                else
                {
LABEL_195:
                  v141 = *((_QWORD *)&v160 + 1);
                  v142 = (const void *)v160;
                  if ((_QWORD)v160 == *((_QWORD *)&v160 + 1))
                  {
                    sub_2368772F4((uint64_t)&v178, a8, a9);
                    if ((_QWORD)v160)
                      operator delete((void *)v160);
                    v142 = (const void *)v178;
                    v160 = v178;
                    v141 = *((_QWORD *)&v178 + 1);
                  }
                  v182 = 0uLL;
                  v183 = 0;
                  sub_2367CBEFC(&v182, v142, v141, (v141 - (uint64_t)v142) >> 2);
                }
                v106 = *v79;
                v107 = *v79 + 24 * v99;
                v108 = *(void **)v107;
                if (*(_QWORD *)v107)
                {
                  *(_QWORD *)(v106 + 24 * v99 + 8) = v108;
                  operator delete(v108);
                  *(_QWORD *)v107 = 0;
                  *(_QWORD *)(v107 + 8) = 0;
                  *(_QWORD *)(v107 + 16) = 0;
                }
                *(_OWORD *)v107 = v182;
                v109 = v183;
LABEL_176:
                *(_QWORD *)(v106 + 24 * v99 + 16) = v109;
                goto LABEL_177;
              }
              v143 = *((_QWORD *)&v158 + 1);
              v144 = (const void *)v158;
              if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
              {
                v145 = *((_QWORD *)&v160 + 1);
                v146 = (const void *)v160;
                if ((_QWORD)v160 == *((_QWORD *)&v160 + 1))
                {
                  sub_2368772F4((uint64_t)&v178, a8, a9);
                  if ((_QWORD)v160)
                    operator delete((void *)v160);
                  v146 = (const void *)v178;
                  v160 = v178;
                  v145 = *((_QWORD *)&v178 + 1);
                }
                v178 = 0uLL;
                v179 = 0;
                sub_2367CBEFC(&v178, v146, v145, (v145 - (uint64_t)v146) >> 2);
                if ((_QWORD)v178)
                {
                  *((_QWORD *)&v178 + 1) = v178;
                  operator delete((void *)v178);
                }
                v147 = *a8;
                v148 = a8[1];
                while (v147 != v148)
                {
                  v149 = *v147;
                  if (*v147 < 0)
                    v149 = -v149;
                  *v147++ = v149;
                }
                sub_2368772F4((uint64_t)&v182, a8, a9);
                if ((_QWORD)v158)
                  operator delete((void *)v158);
                v144 = (const void *)v182;
                v158 = v182;
                v143 = *((_QWORD *)&v182 + 1);
              }
              v170 = 0uLL;
              v171 = 0;
              sub_2367CBEFC(&v170, v144, v143, (v143 - (uint64_t)v144) >> 2);
            }
            else
            {
LABEL_159:
              v123 = (uint64_t)v159;
              if (v100 == v159)
              {
                v124 = (uint64_t)__pa;
                if (v101 == __pa)
                {
                  sub_2368772F4((uint64_t)&v178, a7, v102);
                  if (__pa)
                    operator delete(__pa);
                  v124 = *((_QWORD *)&v178 + 1);
                  v101 = (void *)v178;
                }
                v178 = 0uLL;
                v179 = 0;
                __pa = (void *)v124;
                sub_2367CBEFC(&v178, v101, v124, (v124 - (uint64_t)v101) >> 2);
                if ((_QWORD)v178)
                {
                  *((_QWORD *)&v178 + 1) = v178;
                  operator delete((void *)v178);
                }
                v125 = *a7;
                v126 = a7[1];
                while (v125 != v126)
                {
                  v127 = *v125;
                  if (*v125 < 0)
                    v127 = -v127;
                  *v125++ = v127;
                }
                sub_2368772F4((uint64_t)&v182, a7, v102);
                if (v100)
                  operator delete(v100);
                v123 = *((_QWORD *)&v182 + 1);
                v100 = (void *)v182;
              }
              v170 = 0uLL;
              v171 = 0;
              v159 = (void *)v123;
              sub_2367CBEFC(&v170, v100, v123, (v123 - (uint64_t)v100) >> 2);
            }
            v106 = *v79;
            v150 = *v79 + 24 * v99;
            v151 = *(void **)v150;
            if (*(_QWORD *)v150)
            {
              *(_QWORD *)(v106 + 24 * v99 + 8) = v151;
              operator delete(v151);
              *(_QWORD *)v150 = 0;
              *(_QWORD *)(v150 + 8) = 0;
              *(_QWORD *)(v150 + 16) = 0;
            }
            *(_OWORD *)v150 = v170;
            v109 = v171;
            goto LABEL_176;
          }
          if (v104 - 4 < 2)
            goto LABEL_159;
          if (v104 != 15)
            goto LABEL_195;
          if (v102 > 0x1F)
          {
            if (v102 > 0x3F)
            {
              *(_QWORD *)&v139 = operator new(0xDCuLL);
              v140 = v139 + 220;
              *(_OWORD *)(v139 + 160) = xmmword_236923E8C;
              *(_OWORD *)(v139 + 176) = unk_236923E9C;
              *(_OWORD *)(v139 + 192) = xmmword_236923EAC;
              *(_OWORD *)(v139 + 204) = *(__int128 *)((char *)&xmmword_236923EAC + 12);
              *(_OWORD *)(v139 + 96) = xmmword_236923E4C;
              *(_OWORD *)(v139 + 112) = unk_236923E5C;
              *(_OWORD *)(v139 + 128) = xmmword_236923E6C;
              *(_OWORD *)(v139 + 144) = unk_236923E7C;
              *(_OWORD *)(v139 + 32) = xmmword_236923E0C;
              *(_OWORD *)(v139 + 48) = unk_236923E1C;
              *(_OWORD *)(v139 + 64) = xmmword_236923E2C;
              *(_OWORD *)(v139 + 80) = unk_236923E3C;
              *(_OWORD *)v139 = xmmword_236923DEC;
              *(_OWORD *)(v139 + 16) = unk_236923DFC;
            }
            else
            {
              *(_QWORD *)&v139 = operator new(0x74uLL);
              v140 = v139 + 116;
              *(_DWORD *)(v139 + 112) = 255;
              *(_OWORD *)(v139 + 64) = xmmword_236923DB8;
              *(_OWORD *)(v139 + 80) = unk_236923DC8;
              *(_OWORD *)(v139 + 96) = xmmword_236923DD8;
              *(_OWORD *)v139 = xmmword_236923D78;
              *(_OWORD *)(v139 + 16) = unk_236923D88;
              *(_OWORD *)(v139 + 32) = xmmword_236923D98;
              *(_OWORD *)(v139 + 48) = unk_236923DA8;
            }
          }
          else
          {
            *(_QWORD *)&v139 = operator new(0x3CuLL);
            v140 = v139 + 60;
            *(_OWORD *)v139 = xmmword_236923D3C;
            *(_OWORD *)(v139 + 16) = unk_236923D4C;
            *(_OWORD *)(v139 + 32) = xmmword_236923D5C;
            *(_OWORD *)(v139 + 44) = *(__int128 *)((char *)&xmmword_236923D5C + 12);
          }
          v152 = *v79;
          v153 = *v79 + 24 * v99;
          v154 = *(void **)v153;
          if (*(_QWORD *)v153)
          {
            *(_QWORD *)(v152 + 24 * v99 + 8) = v154;
            v166 = v139;
            operator delete(v154);
            *(_QWORD *)&v139 = v166;
            *(_QWORD *)v153 = 0;
            *(_QWORD *)(v153 + 8) = 0;
            *(_QWORD *)(v153 + 16) = 0;
          }
          *((_QWORD *)&v139 + 1) = v140;
          *(_OWORD *)v153 = v139;
          *(_QWORD *)(v152 + 24 * v99 + 16) = v140;
          v103 = a9 - 1;
LABEL_177:
          v130 = (unint64_t *)(*v97 + 24 * v99);
          v131 = v130[1];
          v132 = *v130;
          v133 = v131 - *v130;
          v102 = a9;
          if (v133 > 0x3FE)
          {
            if (v133 != 1023)
            {
              v130[1] = v132 + 1023;
LABEL_183:
              v134 = 0;
              v135 = 0;
              do
              {
                v136 = *(_QWORD *)(*v79 + 24 * v99);
                v137 = *(_QWORD *)(*v79 + 24 * v99 + 8) - v136;
                if (v135 < v137 >> 2)
                {
                  v138 = v137 >> 2;
                  while ((int)v134 - 511 > *(_DWORD *)(v136 + 4 * v135))
                  {
                    if (v138 == ++v135)
                    {
                      v135 = v138;
                      break;
                    }
                  }
                }
                *(_BYTE *)(v132 + v134++) = v135;
                v132 = *(_QWORD *)(*v97 + 24 * v99);
              }
              while (v134 < *(_QWORD *)(*v97 + 24 * v99 + 8) - v132);
              goto LABEL_190;
            }
          }
          else
          {
            sub_2367C8698(v130, 1023 - v133);
            v132 = *(_QWORD *)(*v97 + 24 * v99);
            v131 = *(_QWORD *)(*v97 + 24 * v99 + 8);
          }
          if (v131 != v132)
            goto LABEL_183;
LABEL_190:
          ++v99;
          v98 = *(_QWORD *)(v61 + 96);
          if (v99 >= (*(_QWORD *)(v61 + 104) - v98) >> 2)
            goto LABEL_230;
          break;
      }
    }
  }
  v101 = 0;
  v100 = 0;
  *(_QWORD *)&v160 = 0;
  *(_QWORD *)&v158 = 0;
LABEL_230:
  if ((_QWORD)v160)
    operator delete((void *)v160);
  if ((_QWORD)v158)
    operator delete((void *)v158);
  if (v101)
    operator delete(v101);
  if (v100)
    operator delete(v100);
  if (v172)
    operator delete(v172);
  if (v175)
    operator delete(v175);
}

void sub_236876F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  void *v32;
  void *v33;
  uint64_t v34;
  void *v36;

  if ((_QWORD)a16)
    operator delete((void *)a16);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  if (v33)
    operator delete(v33);
  if (v32)
    operator delete(v32);
  if (a31)
    operator delete(a31);
  v36 = *(void **)(v34 - 184);
  if (v36)
    operator delete(v36);
  _Unwind_Resume(exception_object);
}

void sub_236877090(char **a1, char **a2, unint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char **v27;

  v4 = *a2;
  v3 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v4 != v3)
  {
    v6 = 0;
    v7 = v4;
    do
    {
      v8 = *(_DWORD *)v7;
      v7 += 4;
      v6 += v8;
    }
    while (v7 != v3);
    if ((unint64_t)(v3 - v4) >= 5)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 1;
      v15 = 1;
      v27 = a2;
      do
      {
        v16 = v14;
        v13 += *(unsigned int *)&v4[4 * v12];
        if (v13 >= v15 * v6 / a3)
        {
          if ((unint64_t)v11 >= v10)
          {
            v18 = (v11 - v9) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              sub_2367C3440();
            if ((uint64_t)(v10 - (_QWORD)v9) >> 1 > v19)
              v19 = (uint64_t)(v10 - (_QWORD)v9) >> 1;
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v20 = (unint64_t)sub_2367C3454(v20);
            else
              v21 = 0;
            v22 = (char *)(v20 + 4 * v18);
            *(_DWORD *)v22 = v12;
            v17 = v22 + 4;
            while (v11 != v9)
            {
              v23 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            v10 = v20 + 4 * v21;
            *a1 = v22;
            a1[1] = v17;
            a1[2] = (char *)v10;
            if (v9)
            {
              v24 = v20 + 4 * v21;
              operator delete(v9);
              v10 = v24;
            }
            v9 = v22;
            a2 = v27;
          }
          else
          {
            *(_DWORD *)v11 = v12;
            v17 = v11 + 4;
          }
          a1[1] = v17;
          v25 = v6 * v15--;
          do
          {
            v26 = v25 / a3;
            ++v15;
            v25 += v6;
          }
          while (v13 > v26);
          v4 = *a2;
          v3 = a2[1];
          v11 = v17;
        }
        v14 = v16 + 1;
        v12 = v16;
      }
      while (v16 + 1 < (unint64_t)((v3 - v4) >> 2));
    }
  }
}

void sub_236877238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_236877260(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_2367C3440();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_2367C3454(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void sub_2368772F4(uint64_t a1, int **a2, unint64_t a3)
{
  int *v4;
  int *v5;
  int *v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  _DWORD *v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  void *__p[3];

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v8 = v4 + 1;
    if (v4 + 1 != v5)
    {
      v9 = *v4;
      v10 = v4 + 1;
      do
      {
        v12 = *v10++;
        v11 = v12;
        if (v12 < v9)
        {
          v9 = v11;
          v4 = v8;
        }
        v8 = v10;
      }
      while (v10 != v5);
    }
    v13 = *v4;
    if (v13 <= -512)
      v13 = -512;
    if (v13 >= 512)
      v14 = 512;
    else
      v14 = v13;
    sub_2367C3BE4(__p, 0x401uLL);
    v15 = *a2;
    v16 = a2[1];
    if (*a2 != v16)
    {
      v17 = __p[0];
      do
      {
        v19 = *v15++;
        v18 = v19;
        if (v19 <= -512)
          v18 = -512;
        if (v18 >= 512)
          v18 = 512;
        ++v17[v18 - v14];
      }
      while (v15 != v16);
    }
    sub_236877090((char **)a1, (char **)__p, a3);
    v20 = *(char **)a1;
    v21 = *(char **)(a1 + 8);
    while (v20 != v21)
    {
      *(_DWORD *)v20 += v14;
      v20 += 4;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_236877418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_236877434(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  double v17;
  float v18;
  float v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t i;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  int *v67;
  _DWORD *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;

  if (*(float *)(a2 + 16) == 0.0)
    return;
  v83 = a1;
  if (a3 >= (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2)
  {
    sub_2367C5284((char **)a4, a3 + 1);
    a1 = v83;
  }
  v14 = *a1;
  v13 = a1[1];
  v15 = (v13 - *a1) >> 6;
  if (v15 > (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v16 = a1;
    sub_2367C5284((char **)a5, v15);
    v14 = *v16;
    v13 = v16[1];
  }
  v17 = *(float *)(a2 + 16) * 0.1;
  if (v17 > 0.99)
    v17 = 0.99;
  v18 = v17;
  v19 = logf(1.0 - v18);
  v20 = v83;
  if (v13 == v14)
    return;
  v80 = (unint64_t *)a2;
  v81 = (_QWORD *)a4;
  v82 = (_QWORD *)a5;
  v84 = a7;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = a3 - 0x40A7B892E31B1A47;
  v28 = 1.0 / v19;
  while (1)
  {
    v29 = v14 + (v26 << 6);
    v30 = *(_QWORD *)(v29 + 40);
    if (v30 >= 2)
    {
      v31 = *(_QWORD *)(v29 + 48);
      if (v31)
        break;
    }
LABEL_36:
    if (++v26 >= (v13 - v14) >> 6)
      goto LABEL_37;
  }
  if (v26 < v20[9] || (v30 <= *v80 ? (v32 = v31 > *v80) : (v32 = 1), !v32))
  {
    if ((unint64_t)v24 >= v23)
    {
      v33 = v24 - v21;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        sub_2367C3440();
      if ((uint64_t)(v23 - (_QWORD)v21) >> 2 > v34)
        v34 = (uint64_t)(v23 - (_QWORD)v21) >> 2;
      if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
      {
        v35 = (unint64_t)sub_2367CA1FC(v35);
        v24 = v22;
      }
      else
      {
        v36 = 0;
      }
      v37 = (unint64_t *)(v35 + 8 * v33);
      *v37 = v26;
      v22 = v37 + 1;
      while (v24 != v21)
      {
        v38 = *--v24;
        *--v37 = v38;
      }
      v23 = v35 + 8 * v36;
      if (v21)
        operator delete(v21);
      v21 = v37;
      v20 = v83;
    }
    else
    {
      *v24 = v26;
      v22 = v24 + 1;
    }
    v14 = *v20;
    v13 = v20[1];
    v39 = *(_QWORD *)(*v20 + (v26 << 6) + 48) * *(_QWORD *)(*v20 + (v26 << 6) + 40);
    *(_DWORD *)(*v81 + 4 * a3) += v39;
    *(_DWORD *)(*v82 + 4 * v26) += v39;
    v25 += v39;
    v24 = v22;
    goto LABEL_36;
  }
LABEL_37:
  if (v21 == v24)
  {
    if (v21)
      goto LABEL_89;
  }
  else
  {
    sub_236877260((void **)a6, (unint64_t)(float)((float)(unint64_t)((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)+ (float)(v18 * (float)v25)));
    sub_236877260((void **)v84, (unint64_t)(float)((float)(unint64_t)((uint64_t)(*(_QWORD *)(v84 + 8) - *(_QWORD *)v84) >> 2)+ (float)(v18 * (float)v25)));
    v40 = (float)(logf(1.0 - (float)(COERCE_FLOAT(((a3 + 0x542891283015F7A4) >> 41) | 0x3F800000) + -1.0))
                              * v28);
    v41 = *v83;
    v42 = *(_QWORD *)(*v83 + (*v21 << 6) + 40);
    v43 = v27;
    v44 = 0;
    v45 = 0;
    for (i = v22 - v21; v40 >= v42; v42 = *(_QWORD *)(v41 + (v47 << 6) + 40))
    {
      v40 -= v42;
      ++v45;
      v47 = v21[v44];
      if (v45 == *(_QWORD *)(v41 + (v47 << 6) + 48))
      {
        if (++v44 >= i)
        {
          v45 = 0;
          break;
        }
        v45 = 0;
        v47 = v21[v44];
      }
    }
    if (v44 < i)
    {
      v48 = v27 ^ (v27 >> 5) ^ 0x4959C36592FDE847;
      v49 = v22 - v21;
      do
      {
        v50 = v43;
        v51 = *(_QWORD *)(v41 + (v21[v44] << 6) + 24) + *(_QWORD *)(v41 + (v21[v44] << 6) + 16) * v45;
        v53 = *(_DWORD **)(a6 + 8);
        v52 = *(_QWORD *)(a6 + 16);
        if ((unint64_t)v53 >= v52)
        {
          v55 = *(_DWORD **)a6;
          v56 = ((uint64_t)v53 - *(_QWORD *)a6) >> 2;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
            sub_2367C3440();
          v58 = v52 - (_QWORD)v55;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          v59 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL;
          v60 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v59)
            v60 = v57;
          if (v60)
          {
            v60 = (unint64_t)sub_2367C3454(v60);
            v55 = *(_DWORD **)a6;
            v53 = *(_DWORD **)(a6 + 8);
          }
          else
          {
            v61 = 0;
          }
          v62 = (_DWORD *)(v60 + 4 * v56);
          *v62 = *(_DWORD *)(v51 + 4 * v40);
          v54 = v62 + 1;
          while (v53 != v55)
          {
            v63 = *--v53;
            *--v62 = v63;
          }
          *(_QWORD *)a6 = v62;
          *(_QWORD *)(a6 + 8) = v54;
          *(_QWORD *)(a6 + 16) = v60 + 4 * v61;
          if (v55)
            operator delete(v55);
        }
        else
        {
          *v53 = *(_DWORD *)(v51 + 4 * v40);
          v54 = v53 + 1;
        }
        *(_QWORD *)(a6 + 8) = v54;
        v64 = v40 - 1;
        if (!v40)
          v64 = 1;
        v65 = *(_DWORD *)(v51 + 4 * v40) - *(_DWORD *)(v51 + 4 * v64);
        v67 = *(int **)(v84 + 8);
        v66 = *(_QWORD *)(v84 + 16);
        if ((unint64_t)v67 >= v66)
        {
          v70 = *(int **)v84;
          v71 = ((uint64_t)v67 - *(_QWORD *)v84) >> 2;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62)
            sub_2367C3440();
          v73 = v66 - (_QWORD)v70;
          if (v73 >> 1 > v72)
            v72 = v73 >> 1;
          v59 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
          v74 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v59)
            v74 = v72;
          if (v74)
          {
            v74 = (unint64_t)sub_2367C3454(v74);
            v70 = *(int **)v84;
            v67 = *(int **)(v84 + 8);
          }
          else
          {
            v75 = 0;
          }
          v76 = (int *)(v74 + 4 * v71);
          *v76 = v65;
          v68 = v76 + 1;
          v43 = v48;
          while (v67 != v70)
          {
            v77 = *--v67;
            *--v76 = v77;
          }
          v69 = v84;
          *(_QWORD *)v84 = v76;
          *(_QWORD *)(v84 + 8) = v68;
          *(_QWORD *)(v84 + 16) = v74 + 4 * v75;
          if (v70)
            operator delete(v70);
        }
        else
        {
          *v67 = v65;
          v68 = v67 + 1;
          v43 = v48;
          v69 = v84;
        }
        *(_QWORD *)(v69 + 8) = v68;
        v40 += (float)(v28 * logf(1.0 - (float)(COERCE_FLOAT(((v43 + v50) >> 41) | 0x3F800000) + -1.0)))
             + 1;
        v41 = *v83;
LABEL_82:
        v78 = v21[v44];
        while (1)
        {
          v79 = *(_QWORD *)(v41 + (v78 << 6) + 40);
          if (v40 < v79)
            break;
          v40 -= v79;
          ++v45;
          v78 = v21[v44];
          if (v45 == *(_QWORD *)(v41 + (v78 << 6) + 48))
          {
            if (++v44 < v49)
            {
              v45 = 0;
              goto LABEL_82;
            }
            v45 = 0;
            break;
          }
        }
        v48 = (v43 >> 5) ^ ((v50 ^ (v50 << 23)) >> 18) ^ v43 ^ v50 ^ (v50 << 23);
      }
      while (v44 < v49);
    }
LABEL_89:
    operator delete(v21);
  }
}

void sub_236877A38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_236877A6C(_QWORD *a1, void **a2, char **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  char *v31;
  int v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int16 v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  int v46;
  int v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t *v119;
  int *v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  int v135;
  uint64_t v136;
  int v137;
  char *v138;
  char *v139;
  char *v140;
  __int128 v141;
  __int128 v142;
  uint64_t v144;
  int v145;
  _OWORD v146[2];
  __int128 v147;

  v147 = 0u;
  memset(v146, 0, sizeof(v146));
  v145 = 0;
  sub_236878318(v146, &v145);
  a3[1] = *a3;
  v6 = *((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v7 = 0;
    do
    {
      v144 = v7;
      v8 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v146[0] + 1) + (((unint64_t)v147 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v147 & 0x3FF));
      *(_QWORD *)&v147 = v147 + 1;
      *((_QWORD *)&v147 + 1) = v6 - 1;
      if ((unint64_t)v147 >= 0x800)
      {
        operator delete(**((void ***)&v146[0] + 1));
        *((_QWORD *)&v146[0] + 1) += 8;
        *(_QWORD *)&v147 = v147 - 1024;
      }
      v9 = *(__int16 *)(*a1 + 40 * v8 + 4) + 1;
      v11 = a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - (_BYTE *)*a2) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          sub_2367C3440();
        v15 = v10 - (_QWORD)*a2;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v17 = (char *)sub_2367CA1FC(v16);
        v19 = &v17[8 * v13];
        *(_DWORD *)v19 = 2;
        *((_DWORD *)v19 + 1) = v9;
        v21 = (char *)*a2;
        v20 = (char *)a2[1];
        v22 = v19;
        if (v20 != *a2)
        {
          do
          {
            v23 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v22 - 1) = v23;
            v22 -= 8;
          }
          while (v20 != v21);
          v20 = (char *)*a2;
        }
        v12 = v19 + 8;
        *a2 = v22;
        a2[1] = v19 + 8;
        a2[2] = &v17[8 * v18];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = 2;
        v11[1] = v9;
        v12 = v11 + 2;
      }
      a2[1] = v12;
      v24 = *a1 + 40 * v8;
      v25 = *(_WORD *)(v24 + 4);
      if (v25 == 0xFFFF)
      {
        v32 = *(_DWORD *)(*a1 + 40 * v8 + 16);
        v33 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v33)
        {
          v62 = ((char *)v12 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v62 + 1) >> 61)
            sub_2367C3440();
          v63 = v33 - (_QWORD)*a2;
          v64 = v63 >> 2;
          if (v63 >> 2 <= (unint64_t)(v62 + 1))
            v64 = v62 + 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v64;
          v66 = (char *)sub_2367CA1FC(v65);
          v68 = &v66[8 * v62];
          *(_DWORD *)v68 = 4;
          *((_DWORD *)v68 + 1) = v32;
          v70 = (char *)*a2;
          v69 = (char *)a2[1];
          v71 = v68;
          if (v69 != *a2)
          {
            do
            {
              v72 = *((_QWORD *)v69 - 1);
              v69 -= 8;
              *((_QWORD *)v71 - 1) = v72;
              v71 -= 8;
            }
            while (v69 != v70);
            v69 = (char *)*a2;
          }
          v34 = v68 + 8;
          *a2 = v71;
          a2[1] = v68 + 8;
          a2[2] = &v66[8 * v67];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v12 = 4;
          v12[1] = v32;
          v34 = v12 + 2;
        }
        a2[1] = v34;
        v73 = *(_DWORD *)(*a1 + 40 * v8 + 24);
        v74 = (2 * v73) ^ (v73 >> 31);
        v75 = (unint64_t)a2[2];
        if ((unint64_t)v34 >= v75)
        {
          v77 = ((char *)v34 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v77 + 1) >> 61)
            sub_2367C3440();
          v78 = v75 - (_QWORD)*a2;
          v79 = v78 >> 2;
          if (v78 >> 2 <= (unint64_t)(v77 + 1))
            v79 = v77 + 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v79;
          v81 = (char *)sub_2367CA1FC(v80);
          v83 = &v81[8 * v77];
          *(_DWORD *)v83 = 6;
          *((_DWORD *)v83 + 1) = v74;
          v85 = (char *)*a2;
          v84 = (char *)a2[1];
          v86 = v83;
          if (v84 != *a2)
          {
            do
            {
              v87 = *((_QWORD *)v84 - 1);
              v84 -= 8;
              *((_QWORD *)v86 - 1) = v87;
              v86 -= 8;
            }
            while (v84 != v85);
            v84 = (char *)*a2;
          }
          v76 = v83 + 8;
          *a2 = v86;
          a2[1] = v83 + 8;
          a2[2] = &v81[8 * v82];
          if (v84)
            operator delete(v84);
        }
        else
        {
          *v34 = 6;
          v34[1] = v74;
          v76 = v34 + 2;
        }
        a2[1] = v76;
        v88 = *(_DWORD *)(*a1 + 40 * v8 + 32);
        v89 = __clz(__rbit32(v88));
        v90 = (unint64_t)a2[2];
        if ((unint64_t)v76 >= v90)
        {
          v92 = ((char *)v76 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v92 + 1) >> 61)
            sub_2367C3440();
          v93 = v90 - (_QWORD)*a2;
          v94 = v93 >> 2;
          if (v93 >> 2 <= (unint64_t)(v92 + 1))
            v94 = v92 + 1;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
            v95 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v95 = v94;
          v96 = (char *)sub_2367CA1FC(v95);
          v98 = &v96[8 * v92];
          *(_DWORD *)v98 = 8;
          *((_DWORD *)v98 + 1) = v89;
          v100 = (char *)*a2;
          v99 = (char *)a2[1];
          v101 = v98;
          if (v99 != *a2)
          {
            do
            {
              v102 = *((_QWORD *)v99 - 1);
              v99 -= 8;
              *((_QWORD *)v101 - 1) = v102;
              v101 -= 8;
            }
            while (v99 != v100);
            v99 = (char *)*a2;
          }
          v91 = v98 + 8;
          *a2 = v101;
          a2[1] = v98 + 8;
          a2[2] = &v96[8 * v97];
          if (v99)
            operator delete(v99);
        }
        else
        {
          *v76 = 8;
          v76[1] = v89;
          v91 = v76 + 2;
        }
        v103 = (v88 >> v89) - 1;
        a2[1] = v91;
        v104 = (unint64_t)a2[2];
        if ((unint64_t)v91 >= v104)
        {
          v106 = ((char *)v91 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v106 + 1) >> 61)
            sub_2367C3440();
          v107 = v104 - (_QWORD)*a2;
          v108 = v107 >> 2;
          if (v107 >> 2 <= (unint64_t)(v106 + 1))
            v108 = v106 + 1;
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
            v109 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v109 = v108;
          v110 = (char *)sub_2367CA1FC(v109);
          v112 = &v110[8 * v106];
          *(_DWORD *)v112 = 10;
          *((_DWORD *)v112 + 1) = v103;
          v114 = (char *)*a2;
          v113 = (char *)a2[1];
          v115 = v112;
          if (v113 != *a2)
          {
            do
            {
              v116 = *((_QWORD *)v113 - 1);
              v113 -= 8;
              *((_QWORD *)v115 - 1) = v116;
              v115 -= 8;
            }
            while (v113 != v114);
            v113 = (char *)*a2;
          }
          v105 = v112 + 8;
          *a2 = v115;
          a2[1] = v112 + 8;
          a2[2] = &v110[8 * v111];
          if (v113)
            operator delete(v113);
        }
        else
        {
          *v91 = 10;
          v91[1] = v103;
          v105 = v91 + 2;
        }
        a2[1] = v105;
        v117 = *a1 + 40 * v8;
        v118 = (int *)(v117 + 16);
        v119 = (uint64_t *)(v117 + 24);
        v120 = (int *)(v117 + 32);
        v121 = (unint64_t)a3[1];
        v122 = (unint64_t)a3[2];
        if (v121 >= v122)
        {
          v128 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v121 - (_QWORD)*a3) >> 3);
          v129 = v128 + 1;
          if (v128 + 1 > 0x666666666666666)
            sub_2367C3440();
          v130 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v122 - (_QWORD)*a3) >> 3);
          if (2 * v130 > v129)
            v129 = 2 * v130;
          if (v130 >= 0x333333333333333)
            v131 = 0x666666666666666;
          else
            v131 = v129;
          v132 = (char *)sub_2367DC0A4(v131);
          v134 = &v132[40 * v128];
          v135 = *v118;
          v136 = *v119;
          v137 = *v120;
          *(_DWORD *)v134 = 0;
          *((_WORD *)v134 + 2) = -1;
          v126 = v144;
          *((_QWORD *)v134 + 1) = v144;
          *((_DWORD *)v134 + 4) = v135;
          *((_QWORD *)v134 + 3) = v136;
          *((_DWORD *)v134 + 8) = v137;
          v139 = *a3;
          v138 = a3[1];
          v140 = v134;
          if (v138 != *a3)
          {
            do
            {
              v141 = *(_OWORD *)(v138 - 40);
              v142 = *(_OWORD *)(v138 - 24);
              *((_DWORD *)v140 - 2) = *((_DWORD *)v138 - 2);
              *(_OWORD *)(v140 - 24) = v142;
              *(_OWORD *)(v140 - 40) = v141;
              v140 -= 40;
              v138 -= 40;
            }
            while (v138 != v139);
            v138 = *a3;
          }
          v127 = v134 + 40;
          *a3 = v140;
          a3[1] = v134 + 40;
          a3[2] = &v132[40 * v133];
          if (v138)
            operator delete(v138);
        }
        else
        {
          v123 = *v118;
          v124 = *v119;
          v125 = *v120;
          *(_DWORD *)v121 = 0;
          *(_WORD *)(v121 + 4) = -1;
          v126 = v144;
          *(_QWORD *)(v121 + 8) = v144;
          *(_DWORD *)(v121 + 16) = v123;
          *(_QWORD *)(v121 + 24) = v124;
          *(_DWORD *)(v121 + 32) = v125;
          v127 = (char *)(v121 + 40);
        }
        a3[1] = v127;
        v7 = v126 + 1;
      }
      else
      {
        v26 = (unint64_t)a3[1];
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (_QWORD)*a3) >> 3);
        v28 = v27 + DWORD2(v147) + 1;
        v29 = v27 + DWORD2(v147) + 2;
        v30 = (unint64_t)a3[2];
        if (v26 >= v30)
        {
          v35 = v27 + 1;
          if (v27 + 1 > 0x666666666666666)
            sub_2367C3440();
          if (0x999999999999999ALL * ((uint64_t)(v30 - (_QWORD)*a3) >> 3) > v35)
            v35 = 0x999999999999999ALL * ((uint64_t)(v30 - (_QWORD)*a3) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - (_QWORD)*a3) >> 3) >= 0x333333333333333)
            v36 = 0x666666666666666;
          else
            v36 = v35;
          v37 = (char *)sub_2367DC0A4(v36);
          v39 = &v37[40 * v27];
          v40 = *(_WORD *)(v24 + 4);
          *(_DWORD *)v39 = *(_DWORD *)v24;
          *((_WORD *)v39 + 2) = v40;
          *((_DWORD *)v39 + 2) = v28;
          *((_DWORD *)v39 + 3) = v29;
          *((_DWORD *)v39 + 4) = 0;
          *((_QWORD *)v39 + 3) = 0;
          *((_DWORD *)v39 + 8) = 1;
          v42 = *a3;
          v41 = a3[1];
          v43 = v39;
          if (v41 != *a3)
          {
            do
            {
              v44 = *(_OWORD *)(v41 - 40);
              v45 = *(_OWORD *)(v41 - 24);
              *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
              *(_OWORD *)(v43 - 24) = v45;
              *(_OWORD *)(v43 - 40) = v44;
              v43 -= 40;
              v41 -= 40;
            }
            while (v41 != v42);
            v41 = *a3;
          }
          v31 = v39 + 40;
          *a3 = v43;
          a3[1] = v39 + 40;
          a3[2] = &v37[40 * v38];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_DWORD *)v26 = *(_DWORD *)v24;
          *(_WORD *)(v26 + 4) = v25;
          *(_DWORD *)(v26 + 8) = v28;
          *(_DWORD *)(v26 + 12) = v29;
          *(_DWORD *)(v26 + 16) = 0;
          *(_QWORD *)(v26 + 24) = 0;
          *(_DWORD *)(v26 + 32) = 1;
          v31 = (char *)(v26 + 40);
        }
        a3[1] = v31;
        v145 = *(_DWORD *)(*a1 + 40 * v8 + 8);
        sub_236878318(v146, &v145);
        v145 = *(_DWORD *)(*a1 + 40 * v8 + 12);
        sub_236878318(v146, &v145);
        v46 = *(_DWORD *)(*a1 + 40 * v8);
        v47 = (2 * v46) ^ (v46 >> 31);
        v49 = a2[1];
        v48 = (unint64_t)a2[2];
        if ((unint64_t)v49 >= v48)
        {
          v51 = ((char *)v49 - (_BYTE *)*a2) >> 3;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61)
            sub_2367C3440();
          v53 = v48 - (_QWORD)*a2;
          if (v53 >> 2 > v52)
            v52 = v53 >> 2;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
            v54 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          v55 = (char *)sub_2367CA1FC(v54);
          v57 = &v55[8 * v51];
          *(_DWORD *)v57 = 0;
          *((_DWORD *)v57 + 1) = v47;
          v59 = (char *)*a2;
          v58 = (char *)a2[1];
          v60 = v57;
          if (v58 == *a2)
          {
            v7 = v144;
          }
          else
          {
            v7 = v144;
            do
            {
              v61 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *((_QWORD *)v60 - 1) = v61;
              v60 -= 8;
            }
            while (v58 != v59);
            v58 = (char *)*a2;
          }
          v50 = v57 + 8;
          *a2 = v60;
          a2[1] = v57 + 8;
          a2[2] = &v55[8 * v56];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *v49 = 0;
          v49[1] = v47;
          v50 = v49 + 2;
          v7 = v144;
        }
        a2[1] = v50;
      }
      v6 = *((_QWORD *)&v147 + 1);
    }
    while (*((_QWORD *)&v147 + 1));
  }
  return sub_236878898((uint64_t)v146);
}

void sub_2368782BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_236878898((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236878318(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)sub_2367CA1FC(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)sub_2367CA1FC(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)sub_2367CA1FC(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)sub_2367CA1FC(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)sub_2367CA1FC(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)sub_2367CA1FC(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(_QWORD *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_236878868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_236878898(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

float sub_23687895C(float *a1, float *a2, int *a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  int v15;

  v3 = 0.0;
  v4 = 0.0;
  if ((unint64_t)((char *)a2 - (char *)a1) >= 9)
    v4 = (float)((float)(a1[2] + (float)((float)(a1[1] + (float)(*a1 + (float)*a3)) + (float)a3[1])) + (float)a3[2])
       * 0.40333;
  v5 = 0.0;
  if (a2 != a1)
  {
    v6 = 0;
    v7 = a2 - a1;
    v8 = 0.0;
    if (v7 <= 1)
      v7 = 1;
    v9 = 0.0;
    v10 = 0.0;
    do
    {
      v11 = a1[v6];
      v12 = a3[v6];
      v13 = (float)v12;
      if (v6 == 1)
        v14 = 5.0;
      else
        v14 = 2.0;
      if (!v6)
        v14 = 3.0;
      if (v6 <= 2 && (float)(v11 + v13) >= v4)
      {
        v14 = v14 + flt_236923EC8[v6];
        if (v6 == 2 && v4 * 1.22 > (float)(a1[2] + (float)a3[2]))
          v14 = v14 + -0.5;
      }
      v8 = v8 + (float)((float)((float)((float)(v11 - v13) * (float)(v11 - v13)) * v14) * v14);
      if (v6 == 1)
        v15 = 5;
      else
        v15 = 1;
      if (!v6)
        v15 = 3;
      v10 = v10 + (float)(v11 * (float)v15);
      v9 = v9 + (float)(v12 * v15);
      ++v6;
    }
    while (v7 != v6);
    v3 = v8 * 4.0;
    v5 = v10 - v9;
  }
  return v3 + (float)(v5 * v5);
}

uint64_t sub_236878AB8(int a1, int a2)
{
  int v2;

  if (a1 < 0)
    return -sub_236878AB8(-a1);
  if (a2 >= 0)
    v2 = a2;
  else
    v2 = a2 + 1;
  return ((a1 + (v2 >> 1)) / a2);
}

uint64_t sub_236878AEC(uint64_t *a1, unsigned int a2, unsigned int a3, int *a4, _DWORD *a5, int a6, int a7, int *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  signed int v30;
  int *v31;
  unint64_t n;
  signed int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  signed int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  signed int v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  int v79;
  __int128 *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  unint64_t ii;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  size_t v98;
  void *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  int v107;
  BOOL v108;
  double v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t v114;
  int v115;
  int v116;
  BOOL v117;
  uint64_t v118;
  int v119;
  int v120;
  BOOL v121;
  uint64_t *v122;
  _QWORD *v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  int *v127;
  void *v128;
  _QWORD *v129;
  _BYTE *v130;
  _BYTE *v131;
  unint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  _QWORD *v135;
  _BYTE *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  _BYTE *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t i;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  int v152;
  int *v153;
  int **v154;
  int *v155;
  void **v156;
  int *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int *v163;
  int v164;
  int **v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  unint64_t j;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t *v187;
  unint64_t v188;
  void **v189;
  void **v190;
  int *v191;
  int **v192;
  unint64_t k;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  _DWORD *v200;
  void **v201;
  void **v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  uint64_t v210;
  _DWORD *v211;
  unint64_t v212;
  uint64_t v213;
  void **v214;
  void **v215;
  uint64_t v216;
  int *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  _OWORD *v224;
  __int128 v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  int64x2_t v255;
  unint64_t v256;
  unint64_t v257;
  __int128 **v258;
  unint64_t v259;
  int *v260;
  _BYTE *v261;
  uint64_t v262;
  unint64_t v263;
  char **v264;
  char **v265;
  char *v266;
  char *v267;
  unint64_t v268;
  BOOL v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  char *v279;
  size_t v280;
  char *v281;
  __int128 v282;
  char *v283;
  char *v284;
  void *v285;
  void *v286;
  char *v287;
  char *v288;
  void *v289;
  void *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  _BYTE *v300;
  unint64_t v301;
  uint64_t v302;
  char v303;
  unint64_t v304;
  double v305;
  uint64_t *v306;
  float *v307;
  _DWORD *v308;
  uint64_t v309;
  float v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int v314;
  uint64_t v315;
  unint64_t v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  _QWORD *v322;
  uint64_t m;
  _QWORD *v324;
  unint64_t v325;
  _QWORD *v326;
  unint64_t v327;
  _DWORD *v328;
  char *v329;
  char **v330;
  char *v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  char *v338;
  int v339;
  double v340;
  unint64_t v341;
  double *v342;
  double *v343;
  unint64_t v344;
  _DWORD *v345;
  double *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  _QWORD *v351;
  char *v352;
  double *v353;
  uint64_t v354;
  _QWORD *v355;
  _BYTE *v356;
  float v357;
  unint64_t v358;
  uint64_t v359;
  int *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  float *v372;
  uint64_t v373;
  float v374;
  float v375;
  int v376;
  char v377;
  float v378;
  char v379;
  int v380;
  float v381;
  uint64_t v382;
  float *v383;
  int *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  float v389;
  float v390;
  float v391;
  uint64_t v392;
  float v393;
  uint64_t v394;
  uint64_t v395;
  float v396;
  uint64_t v397;
  uint64_t v398;
  float v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unsigned int v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  uint64_t v427;
  BOOL v428;
  int v429;
  int v430;
  unint64_t v431;
  uint64_t v432;
  int v433;
  char *v434;
  uint64_t v435;
  int *v436;
  _DWORD *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t *v440;
  _DWORD *v441;
  void *v442;
  int *v443;
  unsigned int v444;
  char v445;
  void **v446;
  _BYTE v447[40];
  _BYTE v448[24];
  __int128 v449;
  int *v450;
  unsigned __int8 *v451;
  void **v452;
  void **v453;
  void *__p[3];
  void *v455[3];
  void *v456[3];
  void *v457[3];
  float v458;
  unsigned __int8 v459;
  int v460;
  void *v461[3];
  int64x2_t v462;
  unint64_t v463;
  int v464;
  uint64_t v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  __int128 v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t *v473;
  _QWORD *v474[2];
  void *v475[3];
  void *v476;
  int *v477;
  void **v478;
  void **v479;
  void **v480;
  uint64_t *v481;
  _QWORD *v482;
  unint64_t v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  int v488;
  uint64_t v489;
  char v490;
  unsigned int v491;
  _OWORD v492[3];
  __int128 v493;
  __int128 v494;
  char v495;
  uint64_t v496;

  v17 = a1;
  v496 = *MEMORY[0x24BDAC8D0];
  if (sub_236803134(a1, a2, a3))
    return 1;
  v433 = a6;
  v443 = a4;
  v19 = a2;
  v20 = (_QWORD *)(*v17 + ((unint64_t)a2 << 6));
  v21 = a2;
  v23 = v20[5];
  v22 = v20[6];
  v444 = v21;
  v24 = a3 - v21;
  v25 = v24 + 1;
  v491 = v24 + 1;
  v439 = v23;
  v440 = v17;
  v436 = a8;
  v423 = v22;
  if (v24 || (a7 & 1) != 0)
  {
    v486 = 0u;
    v487 = 0u;
    v484 = 0u;
    v485 = 0u;
    v488 = 8;
    v489 = 0;
    v490 = 1;
    v429 = a7;
    if (a7)
    {
      sub_2368001CC((uint64_t)v447, v23, v22, *((_DWORD *)v17 + 16), v25);
      v18 = v451;
      if ((_DWORD)v451)
      {
        sub_2367E2C48((uint64_t)v447);
LABEL_494:
        *(_QWORD *)v447 = (char *)&v485 + 8;
        sub_2367D6C98((void ***)v447);
        *(_QWORD *)v447 = &v484;
        sub_2367D6D24((void ***)v447);
        return v18;
      }
      v492[0] = *(_OWORD *)v447;
      memset(v447, 0, sizeof(v447));
      *(_OWORD *)((char *)&v492[1] + 8) = *(_OWORD *)&v447[24];
      *(_QWORD *)&v492[1] = *(_QWORD *)&v447[16];
      *((_QWORD *)&v492[2] + 1) = *(_QWORD *)v448;
      *(_QWORD *)v448 = 0;
      v493 = *(_OWORD *)&v448[8];
      v494 = v449;
      v495 = (char)v450;
      sub_23680046C((uint64_t)&v484, (uint64_t)v492);
      *(_QWORD *)&v467 = (char *)&v492[1] + 8;
      sub_2367D6C98((void ***)&v467);
      *(_QWORD *)&v467 = v492;
      sub_2367D6D24((void ***)&v467);
      v90 = v491;
      v17 = v440;
      if (v491)
      {
        v91 = 0;
        do
        {
          v92 = (unsigned int *)(*v440 + ((v91 + v19) << 6));
          if (v92[1])
            v93 = *v92 == 0;
          else
            v93 = 1;
          if (!v93)
          {
            v94 = 0;
            v95 = v484 + (v91 << 6);
            v97 = *(_QWORD *)(v95 + 16);
            v96 = *(char **)(v95 + 24);
            do
            {
              memcpy(v96, (const void *)(*((_QWORD *)v92 + 3) + *((_QWORD *)v92 + 2) * v94++), 4 * *v92);
              v96 += v97;
            }
            while (v94 < v92[1]);
            v90 = v491;
            v22 = v423;
            a7 = v429;
          }
          ++v91;
        }
        while (v91 < v90);
      }
      sub_2367E2C48((uint64_t)v447);
      v25 = v491;
    }
    *a5 = 0;
    v483 = 0;
    v482 = 0;
    v481 = (uint64_t *)&v482;
    v479 = 0;
    v478 = 0;
    v480 = 0;
    sub_2367CBE88(&v476, v25);
    sub_236803F00(v475, v491);
    v421 = a3;
    v441 = a5;
    if (v491)
    {
      v98 = 8 * v491;
      v99 = operator new(v98);
      bzero(v99, v98);
      a7 = v429;
    }
    else
    {
      v99 = 0;
    }
    v442 = v99;
    v474[1] = 0;
    v474[0] = 0;
    v473 = (uint64_t *)v474;
    if (!a7)
      goto LABEL_246;
    v100 = *((_DWORD *)v17 + 16);
    *(_QWORD *)&v447[8] = 0;
    *(_QWORD *)&v447[16] = 0;
    *(_QWORD *)v447 = &v447[8];
    if (v100 <= 8)
      LOBYTE(v100) = 8;
    v101 = 3 << (v100 - 8);
    v102 = *(_QWORD *)(a10 + 8);
    v103 = *(_QWORD *)(a10 + 16);
    if (v103 != v102)
    {
      v104 = 0;
      v430 = v22 * v23;
      do
      {
        DWORD2(v492[0]) = 0;
        *(_QWORD *)&v492[0] = 0;
        v105 = sub_236878AB8(*(_DWORD *)(v102 + 4 * v104), v101);
        LODWORD(v492[0]) = v105;
        v106 = sub_236878AB8(*(_DWORD *)(*(_QWORD *)(a10 + 32) + 4 * v104), v101);
        DWORD1(v492[0]) = v106;
        v107 = sub_236878AB8(*(_DWORD *)(*(_QWORD *)(a10 + 56) + 4 * v104), v101);
        DWORD2(v492[0]) = v107;
        if (v105)
          v108 = 0;
        else
          v108 = v106 == 0;
        if (v108 && v107 == 0)
        {
          v99 = v442;
        }
        else
        {
          v110 = *(double *)(*(_QWORD *)(a10 + 80) + 8 * v104);
          v111 = *(uint64_t **)&v447[8];
          v112 = (uint64_t **)&v447[8];
          v113 = (uint64_t **)&v447[8];
          if (*(_QWORD *)&v447[8])
          {
LABEL_120:
            while (2)
            {
              v114 = 0;
              v113 = (uint64_t **)v111;
              v23 = v439;
              do
              {
                v115 = *(_DWORD *)((char *)v492 + v114);
                v116 = *(_DWORD *)((char *)v113 + v114 + 32);
                if (v115 < v116)
                {
                  v111 = *v113;
                  v112 = v113;
                  if (*v113)
                    goto LABEL_120;
                  goto LABEL_138;
                }
                v117 = v116 < v115 || v114 == 8;
                v114 += 4;
              }
              while (!v117);
              v118 = 0;
              while (1)
              {
                v119 = *(_DWORD *)((char *)v113 + v118 + 32);
                v120 = *(_DWORD *)((char *)v492 + v118);
                if (v119 < v120)
                  break;
                v121 = v120 < v119 || v118 == 8;
                v118 += 4;
                if (v121)
                {
                  v123 = v113;
                  goto LABEL_142;
                }
              }
              v112 = v113 + 1;
              v111 = v113[1];
              if (v111)
                continue;
              break;
            }
          }
LABEL_138:
          v123 = operator new(0x38uLL);
          v123[4] = *(_QWORD *)&v492[0];
          *((_DWORD *)v123 + 10) = DWORD2(v492[0]);
          v123[6] = 0;
          *v123 = 0;
          v123[1] = 0;
          v123[2] = v113;
          *v112 = v123;
          v122 = v123;
          if (**(_QWORD **)v447)
          {
            *(_QWORD *)v447 = **(_QWORD **)v447;
            v122 = *v112;
          }
          sub_2368262D4(*(uint64_t **)&v447[8], v122);
          ++*(_QWORD *)&v447[16];
          v102 = *(_QWORD *)(a10 + 8);
          v103 = *(_QWORD *)(a10 + 16);
          v23 = v439;
LABEL_142:
          v99 = v442;
          *((double *)v123 + 6) = sqrt(sqrt(v110)) + *((double *)v123 + 6);
        }
        ++v104;
      }
      while (v104 < (v103 - v102) >> 2);
      v124 = *(_BYTE **)v447;
      if (*(_BYTE **)v447 == &v447[8])
      {
        v138 = 0;
        v142 = 0;
        v17 = v440;
        v22 = v423;
        goto LABEL_174;
      }
      do
      {
        v125 = *((_QWORD *)v124 + 4);
        v126 = *((_DWORD *)v124 + 10);
        v127 = (int *)operator new(0xCuLL);
        *(_QWORD *)v127 = v125;
        v127[2] = v126;
        v128 = operator new(0xCuLL);
        *(_QWORD *)v128 = 0;
        *((_DWORD *)v128 + 2) = 0;
        *(float *)&v125 = sqrtf(sub_23687895C((float *)v128, (float *)v128 + 3, v127)) + 1.0;
        operator delete(v128);
        *((double *)v124 + 6) = *((double *)v124 + 6) * (float)((float)(1.0 / (float)v430) * *(float *)&v125);
        operator delete(v127);
        v129 = (_QWORD *)*((_QWORD *)v124 + 1);
        if (v129)
        {
          do
          {
            v130 = v129;
            v129 = (_QWORD *)*v129;
          }
          while (v129);
        }
        else
        {
          do
          {
            v130 = (_BYTE *)*((_QWORD *)v124 + 2);
            v93 = *(_QWORD *)v130 == (_QWORD)v124;
            v124 = v130;
          }
          while (!v93);
        }
        v124 = v130;
        v99 = v442;
      }
      while (v130 != &v447[8]);
      v131 = *(_BYTE **)v447;
      v17 = v440;
      v22 = v423;
      if (*(_BYTE **)v447 != &v447[8])
      {
        v132 = 0;
        v133 = *(_BYTE **)v447;
        do
        {
          v134 = v132;
          v135 = (_QWORD *)*((_QWORD *)v133 + 1);
          if (v135)
          {
            do
            {
              v136 = v135;
              v135 = (_QWORD *)*v135;
            }
            while (v135);
          }
          else
          {
            do
            {
              v136 = (_BYTE *)*((_QWORD *)v133 + 2);
              v93 = *(_QWORD *)v136 == (_QWORD)v133;
              v133 = v136;
            }
            while (!v93);
          }
          v132 = v134 + 1;
          v133 = v136;
        }
        while (v136 != &v447[8]);
        if (v134 > 0xAAAAAAAAAAAAAA9)
          sub_2367C3440();
        v137 = operator new(24 * v132);
        v138 = v137;
        do
        {
          v139 = *((_QWORD *)v131 + 4);
          v138[2] = *((_DWORD *)v131 + 10);
          *(_QWORD *)v138 = v139;
          *((_QWORD *)v138 + 2) = *((_QWORD *)v131 + 6);
          v140 = (_QWORD *)*((_QWORD *)v131 + 1);
          if (v140)
          {
            do
            {
              v141 = v140;
              v140 = (_QWORD *)*v140;
            }
            while (v140);
          }
          else
          {
            do
            {
              v141 = (_BYTE *)*((_QWORD *)v131 + 2);
              v93 = *(_QWORD *)v141 == (_QWORD)v131;
              v131 = v141;
            }
            while (!v93);
          }
          v138 += 6;
          v131 = v141;
        }
        while (v141 != &v447[8]);
        v142 = (uint64_t)v137;
        goto LABEL_174;
      }
    }
    v138 = 0;
    v142 = 0;
LABEL_174:
    v143 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v138 - v142) >> 3));
    if (v138 == (_DWORD *)v142)
      v144 = 0;
    else
      v144 = v143;
    sub_23687EEC0(v142, (double *)v138, v144, 1);
    if (v138 != (_DWORD *)v142)
    {
      v145 = v142;
      v437 = v138;
      do
      {
        if (*(_QWORD *)(a10 + 112) - *(_QWORD *)(a10 + 104) > 0x1FCuLL || *(double *)(v145 + 16) < 17.0)
          break;
        for (i = 0; i != 3; ++i)
        {
          v148 = a10 + 24 * i;
          v151 = *(_QWORD *)(v148 + 120);
          v150 = (_QWORD *)(v148 + 120);
          v149 = v151;
          v152 = *(_DWORD *)(v145 + 4 * i) * v101;
          v154 = (int **)(v150 - 1);
          v153 = (int *)*(v150 - 1);
          if ((unint64_t)v153 >= v151)
          {
            v156 = (void **)(v150 - 2);
            v157 = (int *)*(v150 - 2);
            v158 = v153 - v157;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62)
              sub_2367C3440();
            v160 = v149 - (_QWORD)v157;
            if (v160 >> 1 > v159)
              v159 = v160 >> 1;
            v269 = (unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL;
            v161 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v269)
              v161 = v159;
            if (v161)
            {
              v161 = (unint64_t)sub_2367C3454(v161);
              v153 = *v154;
              v157 = (int *)*v156;
            }
            else
            {
              v162 = 0;
            }
            v163 = (int *)(v161 + 4 * v158);
            *v163 = v152;
            v155 = v163 + 1;
            while (v153 != v157)
            {
              v164 = *--v153;
              *--v163 = v164;
            }
            *v156 = v163;
            *v154 = v155;
            *v150 = v161 + 4 * v162;
            if (v157)
              operator delete(v157);
            v17 = v440;
          }
          else
          {
            *v153 = v152;
            v155 = v153 + 1;
          }
          *v154 = v155;
        }
        v145 += 24;
        v23 = v439;
        v99 = v442;
      }
      while ((_DWORD *)v145 != v437);
      v138 = (_DWORD *)v142;
      v22 = v423;
    }
    a7 = v429;
    if (v138)
      operator delete(v138);
    sub_23682629C(*(_QWORD **)&v447[8]);
    *v441 = (*(_QWORD *)(a10 + 112) - *(_QWORD *)(a10 + 104)) >> 2;
    *(_QWORD *)&v447[8] = 0;
    *(_QWORD *)&v447[16] = 0;
    *(_QWORD *)v447 = &v447[8];
    v165 = (int **)&v447[8];
    if (v22 >= 3)
    {
      v166 = 1;
      v167 = 2;
      while (1)
      {
        v168 = v166;
        v166 = v167;
        v169 = v491;
        if (v491)
        {
          v170 = *v17;
          v171 = v444;
          v172 = v99;
          do
          {
            *v172++ = *(_QWORD *)(v170 + ((unint64_t)v171 << 6) + 24)
                    + *(_QWORD *)(v170 + ((unint64_t)v171 << 6) + 16) * v168;
            ++v171;
            --v169;
          }
          while (v169);
        }
        if (v23 >= 3)
          break;
LABEL_230:
        v167 = v166 + 1;
        v22 = v423;
        if (v166 + 1 >= v423)
        {
          v165 = *(int ***)v447;
          a7 = v429;
          goto LABEL_232;
        }
      }
      v173 = 2;
      v174 = 1;
      while (1)
      {
        v175 = v173;
        v176 = (int *)v476;
        if (v491)
        {
          for (j = 0; j < v491; ++j)
          {
            v176[j] = *(_DWORD *)(*((_QWORD *)v99 + j) + 4 * v174);
            v178 = v491;
          }
          v176 = (int *)v476;
        }
        else
        {
          v178 = 0;
        }
        v179 = 0;
        if (!v178)
          goto LABEL_224;
        while (1)
        {
          v180 = 0;
          v181 = (int *)((char *)&unk_236923ED4 + 8 * v179);
          v182 = *v181;
          v183 = v168 + v181[1];
          v184 = v174 + v182;
          do
          {
            v185 = *(_DWORD *)(*(_QWORD *)(*v17 + ((unint64_t)(v19 + v180) << 6) + 24)
                             + *(_QWORD *)(*v17 + ((unint64_t)(v19 + v180) << 6) + 16) * v183
                             + 4 * v184);
            v186 = v176[v180++];
          }
          while (v180 < v178 && v185 == v186);
          if (v179 > 2 || v185 != v186)
            break;
          while (1)
          {
            ++v179;
            if (v178)
              break;
LABEL_224:
            if (v179 >= 3)
              goto LABEL_228;
          }
        }
        if (v185 == v186)
        {
LABEL_228:
          v187 = sub_23687B054((uint64_t **)v447, v176, v477, (uint64_t)&v476);
          ++v187[7];
        }
        v173 = v175 + 1;
        v174 = v175;
        if (v175 + 1 >= v23)
          goto LABEL_230;
      }
    }
LABEL_232:
    if (v165 != (int **)&v447[8])
    {
      v188 = (unint64_t)(float)((float)((float)(unint64_t)(v17[6] * v17[7]) * 0.01) + 5.0);
      do
      {
        if ((unint64_t)v165[7] > v188)
        {
          sub_23687B208(&v481, v165[4], v165[5], v165[4], (uint64_t)v165[5]);
          v189 = v479;
          if (v479 >= v480)
          {
            v190 = (void **)sub_23687B378(&v478, (uint64_t)(v165 + 4));
          }
          else
          {
            *v479 = 0;
            v189[1] = 0;
            v189[2] = 0;
            sub_2367CBEFC(v189, v165[4], (uint64_t)v165[5], v165[5] - v165[4]);
            v190 = v189 + 3;
          }
          a7 = v429;
          v479 = v190;
        }
        v191 = v165[1];
        if (v191)
        {
          do
          {
            v192 = (int **)v191;
            v191 = *(int **)v191;
          }
          while (v191);
        }
        else
        {
          do
          {
            v192 = (int **)v165[2];
            v93 = *v192 == (int *)v165;
            v165 = v192;
          }
          while (!v93);
        }
        v165 = v192;
      }
      while (v192 != (int **)&v447[8]);
    }
    sub_23687B1C0(*(_QWORD **)&v447[8]);
LABEL_246:
    if (v22)
    {
      for (k = 0; k < v22; ++k)
      {
        v194 = v491;
        if (v491)
        {
          v195 = *v17;
          v196 = v444;
          v197 = v99;
          do
          {
            *v197++ = *(_QWORD *)(v195 + ((unint64_t)v196 << 6) + 24)
                    + *(_QWORD *)(v195 + ((unint64_t)v196 << 6) + 16) * k;
            ++v196;
            --v194;
          }
          while (v194);
        }
        if (v23)
        {
          v198 = 0;
          while (!a7 || v483 < *v443)
          {
            if (v491)
            {
              v199 = 0;
              v200 = v476;
              do
              {
                v200[v199] = *(_DWORD *)(*((_QWORD *)v99 + v199) + 4 * v198);
                ++v199;
              }
              while (v199 < v491);
            }
            if ((sub_23687B208(&v481, (int *)v476, v477, v476, (uint64_t)v477) & 1) != 0)
            {
              v201 = v479;
              if (v479 >= v480)
              {
                v202 = (void **)sub_23687B378(&v478, (uint64_t)&v476);
              }
              else
              {
                *v479 = 0;
                v201[1] = 0;
                v201[2] = 0;
                sub_2367CBEFC(v201, v476, (uint64_t)v477, ((char *)v477 - (_BYTE *)v476) >> 2);
                v202 = v201 + 3;
              }
              a7 = v429;
              v479 = v202;
            }
            if (v483 > *v443)
            {
              v18 = 1;
              goto LABEL_487;
            }
            if (++v198 == v23)
              break;
          }
        }
      }
    }
    v203 = (*v441 + v483);
    *v443 = v203;
    v204 = v491;
    sub_2367DA410((uint64_t)v447, v203, v491);
    v18 = *(unsigned int *)v448;
    if (*(_DWORD *)v448)
    {
      v99 = v442;
    }
    else
    {
      v467 = *(_OWORD *)v447;
      v468 = *(_QWORD *)&v447[16];
      v469 = *(_OWORD *)&v447[24];
      v470 = v203;
      v471 = v204;
      v472 = -1;
      v465 = *(_QWORD *)&v447[16] >> 2;
      v466 = *(_QWORD *)&v447[24];
      v205 = *(_QWORD *)(*v440 + (v19 << 6) + 16);
      v206 = *((_DWORD *)v440 + 16);
      if (v206 >= 24)
        v206 = 24;
      v464 = v206;
      if (v429 && *v441)
      {
        v207 = 0;
        v208 = 4 * (*(_QWORD *)&v447[16] >> 2);
        v209 = *(_DWORD **)&v447[24];
        do
        {
          v210 = 0;
          v211 = v209;
          do
          {
            *v211 = *(_DWORD *)(*(_QWORD *)(a10 + 104 + v210) + 4 * v207);
            v210 += 24;
            v211 = (_DWORD *)((char *)v211 + v208);
          }
          while (v210 != 72);
          ++v207;
          ++v209;
        }
        while (v207 < *v441);
      }
      if (v433 && v491 >= 3)
      {
        v212 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v479 - v478));
        if (v479 == v478)
          v213 = 0;
        else
          v213 = v212;
        sub_23687B488(v478, (unint64_t)v479, v213, 1);
      }
      v214 = v478;
      v215 = v479;
      if (v478 != v479)
      {
        v216 = 0;
        do
        {
          memset(v447, 0, 24);
          sub_2367CBEFC(v447, *v214, (uint64_t)v214[1], ((_BYTE *)v214[1] - (_BYTE *)*v214) >> 2);
          v217 = *(int **)v447;
          if (v491)
          {
            v218 = 0;
            v220 = v465;
            v219 = v466;
            v221 = v216;
            do
            {
              *(_DWORD *)(v219 + 4 * (v221 + *v441)) = v217[v218++];
              v221 += v220;
            }
            while (v218 < v491);
          }
          sub_23687B054(&v473, v217, *(int **)&v447[8], (uint64_t)v447)[7] = v216;
          if (v217)
            operator delete(v217);
          ++v216;
          v214 += 3;
        }
        while (v214 != v215);
      }
      v431 = v205;
      v462 = 0uLL;
      v463 = 0;
      if (v491)
      {
        v222 = 0;
        v223 = 0;
        v224 = (_OWORD *)(a9 + 8);
        do
        {
          if (v222 >= v463)
          {
            v226 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v222 - v462.i64[0]) >> 3);
            v227 = v226 + 1;
            if (v226 + 1 > 0x8AD8F2FBA93868)
              sub_2367C3440();
            if (0x97DD49C34115B1E6 * ((uint64_t)(v463 - v462.i64[0]) >> 3) > v227)
              v227 = 0x97DD49C34115B1E6 * ((uint64_t)(v463 - v462.i64[0]) >> 3);
            if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(v463 - v462.i64[0]) >> 3) >= 0x456C797DD49C34)
              v228 = 0x8AD8F2FBA93868;
            else
              v228 = v227;
            *(_QWORD *)&v492[2] = &v463;
            if (v228)
            {
              if (v228 > 0x8AD8F2FBA93868)
                sub_2367C3488();
              v229 = (char *)operator new(472 * v228);
            }
            else
            {
              v229 = 0;
            }
            *(_QWORD *)&v492[0] = v229;
            *((_QWORD *)&v492[0] + 1) = &v229[472 * v226];
            *(_QWORD *)&v492[1] = *((_QWORD *)&v492[0] + 1);
            *((_QWORD *)&v492[1] + 1) = &v229[472 * v228];
            *(_QWORD *)v447 = &off_250800498;
            v230 = *(_OWORD *)(a9 + 24);
            *(_OWORD *)&v447[8] = *v224;
            *(_OWORD *)&v447[24] = v230;
            *(_OWORD *)v448 = *(_OWORD *)(a9 + 40);
            sub_2367FE7B0(*((uint64_t *)&v492[0] + 1), (uint64_t)v447, v439);
            v231 = *((_QWORD *)&v492[0] + 1);
            v222 = *(_QWORD *)&v492[1] + 472;
            *(_QWORD *)&v492[1] += 472;
            v233 = v462.i64[1];
            v232 = v462.i64[0];
            if (v462.i64[1] == v462.i64[0])
            {
              v255 = vdupq_n_s64(v462.u64[1]);
            }
            else
            {
              do
              {
                v234 = v231 - 472;
                v235 = v233 - 472;
                v236 = *(_OWORD *)(v233 - 472);
                v237 = *(_OWORD *)(v233 - 456);
                *(_QWORD *)(v234 + 32) = *(_QWORD *)(v233 - 440);
                *(_OWORD *)v234 = v236;
                *(_OWORD *)(v234 + 16) = v237;
                v238 = -96;
                do
                {
                  v239 = (_QWORD *)(v231 + v238 - 336);
                  v240 = v233 + v238 - 336;
                  *(_QWORD *)(v231 + v238 - 328) = 0;
                  *v239 = 0;
                  v239[2] = 0;
                  *(_OWORD *)v239 = *(_OWORD *)v240;
                  *(_QWORD *)(v231 + v238 - 320) = *(_QWORD *)(v233 + v238 - 320);
                  *(_QWORD *)(v233 + v238 - 328) = 0;
                  *(_QWORD *)v240 = 0;
                  *(_QWORD *)(v240 + 16) = 0;
                  v238 += 24;
                }
                while (v238);
                *(_QWORD *)(v231 - 336) = 0;
                *(_QWORD *)(v231 - 328) = 0;
                *(_QWORD *)(v231 - 320) = 0;
                *(_OWORD *)(v231 - 336) = *(_OWORD *)(v233 - 336);
                *(_QWORD *)(v231 - 320) = *(_QWORD *)(v233 - 320);
                *(_QWORD *)(v233 - 336) = 0;
                *(_QWORD *)(v233 - 328) = 0;
                *(_QWORD *)(v233 - 320) = 0;
                *(_QWORD *)(v231 - 312) = &off_250800498;
                v241 = *(_OWORD *)(v233 - 304);
                v242 = *(_OWORD *)(v233 - 288);
                *(_OWORD *)(v231 - 272) = *(_OWORD *)(v233 - 272);
                *(_OWORD *)(v231 - 288) = v242;
                *(_OWORD *)(v231 - 304) = v241;
                v243 = *(_OWORD *)(v233 - 144);
                v245 = *(_OWORD *)(v233 - 192);
                v244 = *(_OWORD *)(v233 - 176);
                *(_OWORD *)(v231 - 160) = *(_OWORD *)(v233 - 160);
                *(_OWORD *)(v231 - 144) = v243;
                *(_OWORD *)(v231 - 192) = v245;
                *(_OWORD *)(v231 - 176) = v244;
                v246 = *(_OWORD *)(v233 - 80);
                v248 = *(_OWORD *)(v233 - 128);
                v247 = *(_OWORD *)(v233 - 112);
                *(_OWORD *)(v231 - 96) = *(_OWORD *)(v233 - 96);
                *(_OWORD *)(v231 - 80) = v246;
                *(_OWORD *)(v231 - 128) = v248;
                *(_OWORD *)(v231 - 112) = v247;
                v249 = *(_OWORD *)(v233 - 16);
                v251 = *(_OWORD *)(v233 - 64);
                v250 = *(_OWORD *)(v233 - 48);
                *(_OWORD *)(v231 - 32) = *(_OWORD *)(v233 - 32);
                *(_OWORD *)(v231 - 16) = v249;
                *(_OWORD *)(v231 - 64) = v251;
                *(_OWORD *)(v231 - 48) = v250;
                v252 = *(_OWORD *)(v233 - 256);
                v253 = *(_OWORD *)(v233 - 240);
                v254 = *(_OWORD *)(v233 - 208);
                *(_OWORD *)(v231 - 224) = *(_OWORD *)(v233 - 224);
                *(_OWORD *)(v231 - 208) = v254;
                *(_OWORD *)(v231 - 256) = v252;
                *(_OWORD *)(v231 - 240) = v253;
                v231 -= 472;
                v233 -= 472;
              }
              while (v235 != v232);
              v255 = v462;
              v222 = *(_QWORD *)&v492[1];
              v231 = v234;
            }
            v462.i64[0] = v231;
            v462.i64[1] = v222;
            *(int64x2_t *)((char *)v492 + 8) = v255;
            v256 = v463;
            v463 = *((_QWORD *)&v492[1] + 1);
            *((_QWORD *)&v492[1] + 1) = v256;
            *(_QWORD *)&v492[0] = v255.i64[0];
            sub_23687DA04((uint64_t)v492);
          }
          else
          {
            *(_QWORD *)v447 = &off_250800498;
            v225 = *(_OWORD *)(a9 + 24);
            *(_OWORD *)&v447[8] = *v224;
            *(_OWORD *)&v447[24] = v225;
            *(_OWORD *)v448 = *(_OWORD *)(a9 + 40);
            sub_2367FE7B0(v222, (uint64_t)v447, v439);
            v222 += 472;
          }
          v462.i64[1] = v222;
          ++v223;
          v257 = v491;
        }
        while (v223 < v491);
      }
      else
      {
        v257 = 0;
      }
      sub_23687D47C(v461, v257);
      v258 = (__int128 **)v440;
      *(_QWORD *)&v494 = 0;
      v493 = 0u;
      memset(v492, 0, sizeof(v492));
      v259 = v439;
      v260 = v443;
      v261 = (_BYTE *)a10;
      if (v429)
      {
        v262 = 0;
        v263 = v491;
        do
        {
          v264 = (char **)v492 + 3 * v262;
          v265 = v264 + 1;
          v266 = v264[1];
          v267 = *v264;
          v268 = 0xAAAAAAAAAAAAAAABLL * ((v266 - *v264) >> 3);
          v269 = v263 >= v268;
          v270 = v263 - v268;
          if (v263 <= v268)
          {
            v259 = v439;
            v261 = (_BYTE *)a10;
            if (!v269)
            {
              v287 = &v267[24 * v263];
              if (v266 != v287)
              {
                v288 = v264[1];
                do
                {
                  v290 = (void *)*((_QWORD *)v288 - 3);
                  v288 -= 24;
                  v289 = v290;
                  if (v290)
                  {
                    *((_QWORD *)v266 - 2) = v289;
                    operator delete(v289);
                  }
                  v266 = v288;
                }
                while (v288 != v287);
              }
              *v265 = v287;
            }
          }
          else
          {
            v271 = (char *)v492 + 24 * v262;
            v274 = *((_QWORD *)v271 + 2);
            v273 = v271 + 16;
            v272 = v274;
            if (0xAAAAAAAAAAAAAAABLL * ((v274 - (uint64_t)v266) >> 3) >= v270)
            {
              bzero(v266, 24 * ((24 * v270 - 24) / 0x18) + 24);
              *v265 = &v266[24 * ((24 * v270 - 24) / 0x18) + 24];
              v259 = v439;
              v261 = (_BYTE *)a10;
            }
            else
            {
              v434 = v273;
              v275 = 0xAAAAAAAAAAAAAAABLL * ((v272 - (uint64_t)v267) >> 3);
              if (2 * v275 > v263)
                v263 = 2 * v275;
              if (v275 >= 0x555555555555555)
                v276 = 0xAAAAAAAAAAAAAAALL;
              else
                v276 = v263;
              if (v276 > 0xAAAAAAAAAAAAAAALL)
                sub_2367C3488();
              v277 = (char *)operator new(24 * v276);
              v278 = &v277[24 * v268];
              v279 = &v277[24 * v276];
              v280 = 24 * ((24 * v270 - 24) / 0x18) + 24;
              bzero(v278, v280);
              v281 = &v278[v280];
              if (v266 == v267)
              {
                *v264 = v278;
                *v265 = v281;
                *(_QWORD *)v434 = v279;
                v259 = v439;
                v261 = (_BYTE *)a10;
              }
              else
              {
                do
                {
                  *((_QWORD *)v278 - 3) = 0;
                  *((_QWORD *)v278 - 2) = 0;
                  v278 -= 24;
                  *((_QWORD *)v278 + 2) = 0;
                  v282 = *(_OWORD *)(v266 - 24);
                  v266 -= 24;
                  *(_OWORD *)v278 = v282;
                  *((_QWORD *)v278 + 2) = *((_QWORD *)v266 + 2);
                  *(_QWORD *)v266 = 0;
                  *((_QWORD *)v266 + 1) = 0;
                  *((_QWORD *)v266 + 2) = 0;
                }
                while (v266 != v267);
                v283 = *v264;
                v266 = *v265;
                *v264 = v278;
                *v265 = v281;
                *(_QWORD *)v434 = v279;
                v259 = v439;
                v261 = (_BYTE *)a10;
                if (v266 != v283)
                {
                  v284 = v266;
                  do
                  {
                    v286 = (void *)*((_QWORD *)v284 - 3);
                    v284 -= 24;
                    v285 = v286;
                    if (v286)
                    {
                      *((_QWORD *)v266 - 2) = v285;
                      operator delete(v285);
                    }
                    v266 = v284;
                  }
                  while (v284 != v283);
                  v266 = v283;
                }
              }
              if (v266)
                operator delete(v266);
            }
          }
          if (v491)
          {
            v291 = 0;
            v292 = 0;
            v258 = (__int128 **)v440;
            v260 = v443;
            do
            {
              sub_23681D238((char **)&(*v264)[v291], v439 + 4);
              ++v292;
              v263 = v491;
              v291 += 24;
            }
            while (v292 < v491);
          }
          else
          {
            v263 = 0;
            v258 = (__int128 **)v440;
            v260 = v443;
          }
          ++v262;
        }
        while (v262 != 3);
      }
      if (!v423)
        goto LABEL_475;
      v293 = 0;
      v428 = 0;
      v432 = v431 >> 2;
      v422 = v259 + 2;
      v294 = v19 << 6;
      v295 = v442;
      do
      {
        if (v491)
        {
          v296 = 0;
          v297 = 8 * v491;
          do
          {
            v295[v296 / 8] = *(_QWORD *)((char *)&(*v258)[v296 / 2 + 1] + v294 + 8)
                           + *(_QWORD *)((char *)&(*v258)[v296 / 2 + 1] + v294) * v293;
            if (v429)
              *(_QWORD *)((char *)v461[0] + v296) = *(_QWORD *)(v484 + 8 * v296 + 24)
                                                  + *(_QWORD *)(v484 + 8 * v296 + 16) * v293;
            v296 += 8;
          }
          while (v297 != v296);
        }
        v438 = v293;
        if (v439)
        {
          v435 = 0;
          v298 = 0;
          v427 = *((_QWORD *)&(*v258)[4 * v19 + 1] + 1) + *(_QWORD *)&(*v258)[4 * v19 + 1] * v293;
          if ((v293 & 1) != 0)
            v299 = 0;
          else
            v299 = v422;
          v424 = (v293 << 63 >> 63) & v422;
          v425 = v299;
          v300 = v261;
          do
          {
            if ((v429 & 1) != 0)
            {
              v460 = 0;
              v459 = 0;
              v458 = INFINITY;
              *(_DWORD *)v447 = 0;
              sub_2367C3384(v457, v491, v447);
              *(_DWORD *)v447 = 0;
              sub_2367C3384(v456, v491, v447);
              sub_2367CBE88(v455, v491);
              sub_2367CBE88(__p, v491);
              v302 = 0;
              v303 = 1;
              do
              {
                v445 = v303;
                if (v491)
                {
                  v304 = 0;
                  LOBYTE(v301) = *(_BYTE *)a10;
                  v305 = dbl_236923EF8[v302] * (double)v301;
                  v306 = *(uint64_t **)&v492[0];
                  v307 = (float *)v475[0];
                  v308 = v476;
                  do
                  {
                    v309 = *v306;
                    v306 += 3;
                    v310 = (double)*(int *)(*((_QWORD *)v442 + v304) + 4 * v298)
                         + v305 * *(float *)(v309 + 4 * (v298 + 2));
                    v307[v304] = v310;
                    v311 = llroundf(v310);
                    v312 = -1 << *((_DWORD *)v440 + 16);
                    if (v311 >= ~v312)
                      v313 = ~(_DWORD)v312;
                    else
                      v313 = v311;
                    if (v311 >= 0)
                      v314 = v313;
                    else
                      v314 = 0;
                    v308[v304++] = v314;
                  }
                  while (v304 < v491);
                  if (v491)
                  {
                    v315 = 0;
                    v316 = 0;
                    do
                    {
                      sub_23685126C((uint64_t)v447, v439, *((_QWORD *)v461[0] + v316) + 4 * v298, v432, v298, v438, *v436, v462.i64[0] + v315);
                      *((_DWORD *)__p[0] + v316++) = *(_DWORD *)&v447[8];
                      v315 += 472;
                    }
                    while (v316 < v491);
                  }
                }
                *(_QWORD *)v447 = &v491;
                *(_QWORD *)&v447[8] = v455;
                v260 = v443;
                *(_QWORD *)&v447[16] = &v466;
                *(_QWORD *)&v447[24] = v443;
                *(_QWORD *)&v447[32] = &v465;
                *(_QWORD *)v448 = &v464;
                *(_QWORD *)&v448[8] = v441;
                *(_QWORD *)&v448[16] = __p;
                *(_QWORD *)&v449 = v475;
                *((_QWORD *)&v449 + 1) = &v458;
                v450 = &v460;
                v451 = &v459;
                v452 = v457;
                v453 = v456;
                v317 = *v443;
                if (*v443 >= -142)
                {
                  v318 = -143;
                  do
                  {
                    sub_23687D508((unsigned int **)v447, v318++);
                    v317 = *v443;
                  }
                  while (v318 < *v443);
                }
                v319 = sub_23687D878((char *)v476, (char *)v477, v317, v464, 0);
                sub_23687D508((unsigned int **)v447, v319);
                v320 = sub_23687D878((char *)v476, (char *)v477, *v443, v464, 1);
                sub_23687D508((unsigned int **)v447, v320);
                v303 = 0;
                v302 = 1;
              }
              while ((v445 & 1) != 0);
              v321 = v460;
              v428 = (v459 | v428) != 0;
              v322 = (_QWORD *)a10;
              v295 = v442;
              if (!*(_BYTE *)a10)
              {
                v426 = v460;
                for (m = 0; m != 3; ++m)
                {
                  v324 = &v322[3 * m];
                  v327 = v324[3];
                  v326 = v324 + 3;
                  v325 = v327;
                  v328 = v456[0];
                  v330 = (char **)(v326 - 1);
                  v329 = (char *)*(v326 - 1);
                  if ((unint64_t)v329 >= v327)
                  {
                    v446 = (void **)(v326 - 2);
                    v332 = (char *)*(v326 - 2);
                    v333 = (v329 - v332) >> 2;
                    v334 = v333 + 1;
                    if ((unint64_t)(v333 + 1) >> 62)
                      sub_2367C3440();
                    v335 = v325 - (_QWORD)v332;
                    if (v335 >> 1 > v334)
                      v334 = v335 >> 1;
                    v269 = (unint64_t)v335 >= 0x7FFFFFFFFFFFFFFCLL;
                    v336 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v269)
                      v336 = v334;
                    if (v336)
                    {
                      v336 = (unint64_t)sub_2367C3454(v336);
                      v329 = *v330;
                      v332 = (char *)*v446;
                    }
                    else
                    {
                      v337 = 0;
                    }
                    v338 = (char *)(v336 + 4 * v333);
                    *(_DWORD *)v338 = v328[m];
                    v331 = v338 + 4;
                    while (v329 != v332)
                    {
                      v339 = *((_DWORD *)v329 - 1);
                      v329 -= 4;
                      *((_DWORD *)v338 - 1) = v339;
                      v338 -= 4;
                    }
                    *v446 = v338;
                    *v330 = v331;
                    *v326 = v336 + 4 * v337;
                    if (v332)
                      operator delete(v332);
                    v322 = (_QWORD *)a10;
                    v295 = v442;
                  }
                  else
                  {
                    *(_DWORD *)v329 = *((_DWORD *)v456[0] + m);
                    v331 = v329 + 4;
                    v295 = v442;
                  }
                  *v330 = v331;
                }
                v340 = v458;
                v342 = (double *)v322[11];
                v341 = v322[12];
                if ((unint64_t)v342 >= v341)
                {
                  v346 = (double *)v322[10];
                  v347 = v342 - v346;
                  v348 = v347 + 1;
                  if ((unint64_t)(v347 + 1) >> 61)
                    sub_2367C3440();
                  v349 = v341 - (_QWORD)v346;
                  if (v349 >> 2 > v348)
                    v348 = v349 >> 2;
                  if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFF8)
                    v350 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v350 = v348;
                  if (v350)
                  {
                    if (v350 >> 61)
                      sub_2367C3488();
                    v351 = v322;
                    v352 = (char *)operator new(8 * v350);
                    v322 = v351;
                  }
                  else
                  {
                    v352 = 0;
                  }
                  v353 = (double *)&v352[8 * v347];
                  *v353 = v340;
                  v343 = v353 + 1;
                  while (v342 != v346)
                  {
                    v354 = *((_QWORD *)v342-- - 1);
                    *((_QWORD *)v353-- - 1) = v354;
                  }
                  v322[10] = v353;
                  v322[11] = v343;
                  v322[12] = &v352[8 * v350];
                  if (v346)
                  {
                    v355 = v322;
                    operator delete(v346);
                    v322 = v355;
                  }
                  v295 = v442;
                }
                else
                {
                  *v342 = v340;
                  v343 = v342 + 1;
                }
                v321 = v426;
                v322[11] = v343;
                v260 = v443;
              }
              v356 = v322;
              v357 = 0.0;
              v258 = (__int128 **)v440;
              if (!v491)
                goto LABEL_433;
              v358 = 0;
              v359 = v462.i64[0];
              v360 = (int *)v457[0];
              v361 = v425 + v298;
              v362 = v461[0];
              v363 = (uint64_t *)(v462.i64[0] + 40);
              v364 = v462.i64[0];
              do
              {
                v365 = 0;
                v366 = 8 * v360[v358];
                *(_DWORD *)(*(_QWORD *)(v359 + 472 * v358 + 136) + 4 * v361) = *(_DWORD *)(v359 + 472 * v358 + 32)
                                                                             - v366;
                v367 = v363;
                do
                {
                  v368 = *(_QWORD *)(v364 + v365) - v366;
                  if (v368 < 0)
                    v368 = v366 - *(_QWORD *)(v364 + v365);
                  v369 = (unint64_t)(v368 + 3) >> 3;
                  v370 = *v367;
                  v367 += 3;
                  *(_DWORD *)(v370 + 4 * v361) = v369;
                  *(_DWORD *)(v370 + 4 * (v298 + v424 + 1)) += v369;
                  v365 += 8;
                }
                while (v365 != 32);
                *(_DWORD *)(v362[v358] + 4 * v298) = v360[v358];
                ++v358;
                v371 = v491;
                v363 += 59;
                v364 += 472;
              }
              while (v358 < v491);
              if (v491)
              {
                v357 = 0.0;
                v372 = (float *)v475[0];
                v373 = v491;
                do
                {
                  v374 = *v372++;
                  v375 = v374;
                  v376 = *v360++;
                  v357 = v357 + (float)((float)(v375 - (float)v376) * (float)(v375 - (float)v376));
                  --v373;
                }
                while (v373);
                v377 = 0;
              }
              else
              {
LABEL_433:
                v371 = 0;
                v377 = 1;
              }
              v378 = sqrtf(v357);
              v379 = v464;
              if (v464 <= 8)
                v379 = 8;
              v380 = 38 << (v379 - 8);
              if (v378 <= (float)v380)
                v381 = 1.0;
              else
                v381 = (float)v380 / v378;
              if ((v377 & 1) == 0)
              {
                v382 = 0;
                v383 = (float *)v475[0];
                v384 = (int *)v457[0];
                v385 = *(_QWORD *)&v492[0];
                v386 = *((_QWORD *)&v492[1] + 1);
                v387 = v493;
                do
                {
                  v388 = 0;
                  v389 = v383[v382] - (float)v384[v382];
                  v390 = 0.0;
                  do
                  {
                    v391 = *(float *)(*(_QWORD *)(*((_QWORD *)v492 + 3 * *(int *)((char *)&unk_236923F08 + v388))
                                                + 24 * v382)
                                    + 4 * (v298 + *(int *)((char *)&unk_236923F08 + v388 + 4)));
                    if (((LODWORD(v391) ^ COERCE_UNSIGNED_INT(v383[v382] - (float)v384[v382])) & 0x80000000) == 0)
                      v391 = -0.0;
                    v390 = v390 + v391;
                    v388 += 8;
                  }
                  while (v388 != 88);
                  v392 = 0;
                  v393 = fabsf(v389) / (fabsf(v390) + 0.001);
                  if (v393 > 1.0)
                    v393 = 1.0;
                  do
                  {
                    v394 = *(_QWORD *)(*((_QWORD *)v492 + 3 * *(int *)((char *)&unk_236923F08 + v392)) + 24 * v382);
                    v395 = v298 + *(int *)((char *)&unk_236923F08 + v392 + 4);
                    v396 = *(float *)(v394 + 4 * v395);
                    if ((LODWORD(v396) ^ LODWORD(v389)) < 0)
                    {
                      v389 = v389 + (float)(v393 * v396);
                      *(float *)(v394 + 4 * v395) = (float)(1.0 - v393) * v396;
                    }
                    v392 += 8;
                  }
                  while (v392 != 88);
                  v397 = 0;
                  v398 = *(_QWORD *)(v385 + 24 * v382);
                  v399 = (float)(v381 * v389) * 0.0714285714;
                  *(float *)(v398 + 4 * (v298 + 3)) = *(float *)(v398 + 4 * (v298 + 3)) + (float)(v399 * 2.0);
                  *(float *)(v398 + 4 * (v298 + 4)) = *(float *)(v398 + 4 * (v298 + 4)) + v399;
                  v400 = *(_QWORD *)(v386 + 24 * v382);
                  *(float *)(v400 + 4 * v298) = *(float *)(v400 + 4 * v298) + v399;
                  v401 = *(_QWORD *)(v387 + 24 * v382) + v435;
                  v402 = v400 + v435;
                  do
                  {
                    *(float *)(v402 + v397) = *(float *)(v402 + v397) + v399;
                    *(float *)(v401 + v397) = *(float *)(v401 + v397) + v399;
                    v397 += 4;
                  }
                  while (v397 != 20);
                  ++v382;
                }
                while (v382 != v371);
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v455[0])
              {
                v455[1] = v455[0];
                operator delete(v455[0]);
              }
              if (v456[0])
              {
                v456[1] = v456[0];
                operator delete(v456[0]);
              }
              if (v457[0])
              {
                v457[1] = v457[0];
                operator delete(v457[0]);
              }
              v300 = v356;
            }
            else
            {
              if (v491)
              {
                v344 = 0;
                v345 = v476;
                do
                {
                  v345[v344] = *(_DWORD *)(v295[v344] + 4 * v298);
                  ++v344;
                }
                while (v344 < v491);
              }
              v321 = *((_DWORD *)sub_23687B054(&v473, (int *)v476, v477, (uint64_t)&v476) + 14);
            }
            if (*v300)
              *(_DWORD *)(v427 + 4 * v298) = v321;
            ++v298;
            v435 += 4;
          }
          while (v298 != v439);
        }
        else
        {
          v300 = v261;
        }
        v261 = v300;
        if (v429 && v491)
        {
          v403 = 0;
          v404 = 24 * v491;
          do
          {
            v405 = (_QWORD *)(*(_QWORD *)&v492[0] + v403);
            v406 = (_QWORD *)(*((_QWORD *)&v492[1] + 1) + v403);
            v407 = *(_QWORD *)(*(_QWORD *)&v492[0] + v403);
            *v405 = *(_QWORD *)(*((_QWORD *)&v492[1] + 1) + v403);
            *v406 = v407;
            v408 = v405[1];
            v405[1] = v406[1];
            v406[1] = v408;
            v409 = v405[2];
            v405[2] = v406[2];
            v406[2] = v409;
            v410 = (_QWORD *)(*((_QWORD *)&v492[1] + 1) + v403);
            v411 = (_QWORD *)(v493 + v403);
            v412 = *(_QWORD *)(*((_QWORD *)&v492[1] + 1) + v403);
            *v410 = *(_QWORD *)(v493 + v403);
            *v411 = v412;
            v413 = v410[1];
            v410[1] = v411[1];
            v411[1] = v413;
            v414 = v410[2];
            v410[2] = v411[2];
            v411[2] = v414;
            v415 = *(_QWORD *)(v493 + v403 + 8) - *(_QWORD *)(v493 + v403);
            if (v415 >= 1)
              bzero(*(void **)(v493 + v403), 4 * (((unint64_t)v415 >> 2) - ((unint64_t)v415 > 3)) + 4);
            v403 += 24;
          }
          while (v404 != v403);
        }
        v293 = v438 + 1;
        v294 = v19 << 6;
      }
      while (v438 + 1 != v423);
      if (!v428)
LABEL_475:
        *v436 = 0;
      if (*v261)
      {
        v258[9] = (__int128 *)((char *)v258[9] + 1);
        sub_236801148((uint64_t)v258, (uint64_t)&(*v258)[4 * v19 + 4], &(*v258)[4 * (unint64_t)v421 + 4]);
        sub_2368019F0(v258, *v258, &v467);
      }
      *v260 -= *v441;
      v416 = 48;
      v99 = v442;
      do
      {
        *(_QWORD *)v447 = (char *)v492 + v416;
        sub_2367C4718((void ***)v447);
        v416 -= 24;
      }
      while (v416 != -24);
      if (v461[0])
      {
        v461[1] = v461[0];
        operator delete(v461[0]);
      }
      *(_QWORD *)v447 = &v462;
      sub_23687D944((void ***)v447);
      v417 = v469;
      *(_QWORD *)&v469 = 0;
      if (v417)
      {
        v418 = -*(_QWORD *)(v417 - 24);
        do
          v419 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v419 + v418, &qword_2564313D8));
        free(*(void **)(v417 - 32));
      }
      v18 = 0;
    }
LABEL_487:
    sub_23687B1C0(v474[0]);
    if (v99)
      operator delete(v99);
    if (v475[0])
    {
      v475[1] = v475[0];
      operator delete(v475[0]);
    }
    if (v476)
    {
      v477 = (int *)v476;
      operator delete(v476);
    }
    *(_QWORD *)v447 = &v478;
    sub_2367D17E4((void ***)v447);
    sub_23687B1C0(v482);
    goto LABEL_494;
  }
  if (!*a4)
    return 1;
  memset(v492, 0, 24);
  if (v22)
  {
    v26 = 0;
    v28 = v20[2];
    v27 = (int *)v20[3];
    v29 = 0x7FFFFFFF;
    v30 = 0x80000000;
    do
    {
      v31 = v27;
      for (n = v23; n; --n)
      {
        v34 = *v31++;
        v33 = v34;
        if (v34 < v29)
          v29 = v33;
        if (v33 > v30)
          v30 = v33;
      }
      ++v26;
      v27 = (int *)((char *)v27 + v28);
    }
    while (v26 != v22);
  }
  else
  {
    v30 = 0x80000000;
    v29 = 0x7FFFFFFF;
  }
  v35 = v30 - (uint64_t)v29;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) <= 0x10000)
  {
    *(_DWORD *)v447 = 0;
    sub_2367CBAC8((char **)v492, v35 + 1, v447);
    v67 = 0;
    if (v22)
    {
      v68 = 0;
      v70 = *(_QWORD *)(*v17 + (v19 << 6) + 16);
      v69 = *(int **)(*v17 + (v19 << 6) + 24);
      v71 = *(_QWORD *)&v492[0];
      v18 = 1;
      do
      {
        if (v23)
        {
          v72 = v69;
          v73 = v23;
          do
          {
            v74 = *v72++;
            v75 = v74 - v29;
            if (!*(_DWORD *)(v71 + 4 * v75))
            {
              *(_DWORD *)(v71 + 4 * v75) = 1;
              if (v67 >= *v443)
                goto LABEL_170;
              ++v67;
            }
            --v73;
          }
          while (v73);
        }
        ++v68;
        v69 = (int *)((char *)v69 + v70);
      }
      while (v68 != v22);
    }
    sub_2367DA410((uint64_t)&v484, v67, 1u);
    v18 = DWORD2(v486);
    if (!DWORD2(v486))
    {
      *(_OWORD *)v447 = v484;
      v76 = *((_QWORD *)&v485 + 1);
      *(_OWORD *)&v447[16] = v485;
      *(_QWORD *)&v447[32] = v486;
      *(_QWORD *)v448 = v67;
      *(_QWORD *)&v448[8] = 1;
      *(_QWORD *)&v448[16] = -1;
      *v443 = v67;
      if (v36)
      {
        v77 = 0;
        v78 = *(_DWORD **)&v492[0];
        v79 = v29;
        do
        {
          if (*v78)
          {
            *(_DWORD *)(v76 + 4 * v77) = v79;
            *v78 = v77++;
          }
          ++v79;
          ++v78;
          --v36;
        }
        while (v36);
      }
      v80 = (__int128 *)*v440;
      if (v22)
      {
        v81 = 0;
        v83 = *(_QWORD *)&v80[4 * v19 + 1];
        v82 = (_DWORD *)*((_QWORD *)&v80[4 * v19 + 1] + 1);
        v84 = *(_QWORD *)&v492[0];
        do
        {
          v85 = v82;
          for (ii = v23; ii; --ii)
          {
            *v85 = *(_DWORD *)(v84 + 4 * (*v85 - v29));
            ++v85;
          }
          ++v81;
          v82 = (_DWORD *)((char *)v82 + v83);
        }
        while (v81 != v22);
      }
      *v436 = 0;
      ++v440[9];
      sub_2368019F0(v440, v80, (__int128 *)v447);
      v87 = *(_QWORD *)&v447[24];
      *(_QWORD *)&v447[24] = 0;
      if (v87)
      {
        v88 = -*(_QWORD *)(v87 - 24);
        do
          v89 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v89 + v88, &qword_2564313D8));
        free(*(void **)(v87 - 32));
      }
      v18 = 0;
    }
  }
  else
  {
    *((_QWORD *)&v467 + 1) = 0;
    v468 = 0;
    *(_QWORD *)&v467 = (char *)&v467 + 8;
    v37 = 0;
    if (v22)
    {
      v38 = 0;
      if (v23 <= 1)
        v39 = 1;
      else
        v39 = v23;
      v40 = v23;
      do
      {
        if (v40)
        {
          v41 = 0;
          v42 = *(_QWORD *)(*v17 + (v19 << 6) + 24) + *(_QWORD *)(*v17 + (v19 << 6) + 16) * v38;
          while (1)
          {
            v43 = (_QWORD *)&v467 + 1;
            v44 = (_QWORD *)&v467 + 1;
            if (*((_QWORD *)&v467 + 1))
            {
              v45 = *(_DWORD *)(v42 + 4 * v41);
              v46 = *((_QWORD *)&v467 + 1);
              while (1)
              {
                while (1)
                {
                  v44 = (_QWORD *)v46;
                  v47 = *(_DWORD *)(v46 + 28);
                  if (v45 >= v47)
                    break;
                  v46 = *v44;
                  v43 = v44;
                  if (!*v44)
                    goto LABEL_36;
                }
                if (v47 >= v45)
                  break;
                v46 = v44[1];
                if (!v46)
                {
                  v43 = v44 + 1;
                  goto LABEL_36;
                }
              }
            }
            else
            {
LABEL_36:
              v48 = operator new(0x20uLL);
              v48[7] = *(_DWORD *)(v42 + 4 * v41);
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v48 + 1) = 0;
              *((_QWORD *)v48 + 2) = v44;
              *v43 = v48;
              if (*(_QWORD *)v467)
              {
                *(_QWORD *)&v467 = *(_QWORD *)v467;
                v48 = (_DWORD *)*v43;
              }
              sub_2368262D4(*((uint64_t **)&v467 + 1), (uint64_t *)v48);
              ++v468;
              if (v37 >= *v443)
              {
                v18 = 1;
                goto LABEL_169;
              }
              ++v37;
            }
            if (++v41 == v39)
            {
              v23 = v439;
              v17 = v440;
              v40 = v439;
              break;
            }
          }
        }
        ++v38;
      }
      while (v38 < v423);
    }
    sub_2367DA410((uint64_t)&v484, v37, 1u);
    v18 = DWORD2(v486);
    if (!DWORD2(v486))
    {
      *(_OWORD *)v447 = v484;
      v49 = *((_QWORD *)&v485 + 1);
      *(_OWORD *)&v447[16] = v485;
      *(_QWORD *)&v447[32] = v486;
      *(_QWORD *)v448 = v37;
      *(_QWORD *)&v448[8] = 1;
      *(_QWORD *)&v448[16] = -1;
      *v443 = v37;
      v50 = (__int128 *)v467;
      if ((__int128 *)v467 != (__int128 *)((char *)&v467 + 8))
      {
        v51 = 0;
        do
        {
          *(_DWORD *)(v49 + 4 * v51) = *((_DWORD *)v50 + 7);
          v52 = (__int128 *)*((_QWORD *)v50 + 1);
          if (v52)
          {
            do
            {
              v53 = v52;
              v52 = *(__int128 **)v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              v53 = (__int128 *)*((_QWORD *)v50 + 2);
              v93 = *(_QWORD *)v53 == (_QWORD)v50;
              v50 = v53;
            }
            while (!v93);
          }
          ++v51;
          v50 = v53;
        }
        while (v53 != (__int128 *)((char *)&v467 + 8));
      }
      v54 = (__int128 *)*v440;
      if (v423)
      {
        v55 = 0;
        v57 = *(_QWORD *)&v54[4 * v19 + 1];
        v56 = *((_QWORD *)&v54[4 * v19 + 1] + 1);
        do
        {
          if (v23)
          {
            v58 = 0;
            v59 = v56 + v57 * v55;
            do
            {
              v60 = 0;
              do
              {
                v61 = v60;
                v62 = *(_DWORD *)(v49 + 4 * v60++);
              }
              while (*(_DWORD *)(v59 + 4 * v58) != v62 && v61 < *v443);
              *(_DWORD *)(v59 + 4 * v58++) = v61;
            }
            while (v58 != v23);
          }
          ++v55;
        }
        while (v55 != v423);
      }
      *v436 = 0;
      ++v440[9];
      sub_2368019F0(v440, v54, (__int128 *)v447);
      v64 = *(_QWORD *)&v447[24];
      *(_QWORD *)&v447[24] = 0;
      if (v64)
      {
        v65 = -*(_QWORD *)(v64 - 24);
        do
          v66 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v66 + v65, &qword_2564313D8));
        free(*(void **)(v64 - 32));
      }
      v18 = 0;
    }
LABEL_169:
    sub_23682629C(*((_QWORD **)&v467 + 1));
  }
LABEL_170:
  if (*(_QWORD *)&v492[0])
    operator delete(*(void **)&v492[0]);
  return v18;
}

void sub_23687AD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a68;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  void *v72;

  if (a32)
  {
    v70 = -*(_QWORD *)(a32 - 24);
    do
      v71 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v71 + v70, &qword_2564313D8));
    free(*(void **)(a32 - 32));
  }
  sub_23682629C(a68);
  v72 = *(void **)(v68 - 240);
  if (v72)
    operator delete(v72);
  _Unwind_Resume(a1);
}

uint64_t *sub_23687B054(uint64_t **a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  int *v16;
  int v17;
  int v18;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v8 = a1 + 1;
LABEL_28:
    v20 = (uint64_t *)operator new(0x40uLL);
    v20[5] = 0;
    v20[6] = 0;
    v20[4] = 0;
    sub_2367CBEFC(v20 + 4, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
    v20[7] = 0;
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v8;
    *v7 = v20;
    v21 = (uint64_t *)**a1;
    v22 = v20;
    if (v21)
    {
      *a1 = v21;
      v22 = *v7;
    }
    sub_2368262D4(a1[1], v22);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v20;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v6;
      v9 = (uint64_t *)v6[4];
      v10 = v8[5];
      if (v9 == v10)
        break;
      v11 = (uint64_t *)((char *)v9 + 4);
      v12 = a2;
      while (v12 != a3)
      {
        v13 = *v12;
        v14 = *((_DWORD *)v11 - 1);
        if (*v12 < v14)
          break;
        ++v12;
        v15 = v14 < v13 || v11 == v10;
        v11 = (uint64_t *)((char *)v11 + 4);
        if (v15)
          goto LABEL_11;
      }
      v6 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_28;
    }
LABEL_11:
    if (a2 == a3)
      break;
    v16 = a2 + 1;
    while (v9 != v10)
    {
      v17 = *(_DWORD *)v9;
      v18 = *(v16 - 1);
      if (*(_DWORD *)v9 < v18)
        break;
      v9 = (uint64_t *)((char *)v9 + 4);
      if (v18 < v17 || v16++ == a3)
        goto LABEL_25;
    }
    v7 = v8 + 1;
    v6 = v8[1];
    if (!v6)
      goto LABEL_28;
  }
LABEL_25:
  if (!v8)
    goto LABEL_28;
  return (uint64_t *)v8;
}

void sub_23687B1AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23687B1C0(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_23687B1C0(*a1);
    sub_23687B1C0(a1[1]);
    v2 = (void *)a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_23687B208(uint64_t **a1, int *a2, int *a3, const void *a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int *v14;
  int v15;
  int v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  uint64_t *v23;
  uint64_t *v24;

  v9 = a1 + 1;
  v8 = a1[1];
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = (uint64_t *)v8[4];
        v12 = v10[5];
        if (v11 == v12)
          break;
        v13 = (uint64_t *)((char *)v11 + 4);
        v14 = a2;
        while (v14 != a3)
        {
          v15 = *v14;
          v16 = *((_DWORD *)v13 - 1);
          if (*v14 < v16)
            break;
          ++v14;
          v17 = v16 < v15 || v13 == v12;
          v13 = (uint64_t *)((char *)v13 + 4);
          if (v17)
            goto LABEL_11;
        }
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_28;
      }
LABEL_11:
      if (a2 == a3)
        break;
      v18 = a2 + 1;
      while (v11 != v12)
      {
        v19 = *(_DWORD *)v11;
        v20 = *(v18 - 1);
        if (*(_DWORD *)v11 < v20)
          break;
        v11 = (uint64_t *)((char *)v11 + 4);
        if (v20 < v19 || v18++ == a3)
          goto LABEL_25;
      }
      v9 = v10 + 1;
      v8 = v10[1];
      if (!v8)
        goto LABEL_28;
    }
LABEL_25:
    if (v10)
      return 0;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_28:
  v23 = (uint64_t *)operator new(0x38uLL);
  v23[5] = 0;
  v23[6] = 0;
  v23[4] = 0;
  sub_2367CBEFC(v23 + 4, a4, a5, (a5 - (uint64_t)a4) >> 2);
  *v23 = 0;
  v23[1] = 0;
  v23[2] = (uint64_t)v10;
  *v9 = v23;
  v24 = (uint64_t *)**a1;
  if (v24)
  {
    *a1 = v24;
    v23 = *v9;
  }
  sub_2368262D4(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return 1;
}

void sub_23687B364(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23687B378(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2367C3440();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)sub_2367D1EBC(v7);
  else
    v8 = 0;
  v9 = (_QWORD *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  v13 = v9;
  v14 = v7 + 24 * v8;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_2367CBEFC(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v13 += 3;
  sub_2367D1F00(a1, v12);
  v10 = a1[1];
  sub_2367D1F70((uint64_t)v12);
  return v10;
}

void sub_23687B474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2367D1F70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23687B488(void **a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  float v18;
  float v19;
  const void *v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  int *v27;
  float v28;
  float v29;
  _QWORD *v30;
  const void *v31;
  uint64_t v32;
  int *v33;
  float v34;
  float v35;
  unint64_t v36;
  int *v37;
  float v38;
  float v39;
  unint64_t v40;
  _QWORD *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  int *v47;
  float v48;
  float v49;
  const void *v50;
  uint64_t v51;
  int *v52;
  float v53;
  float v54;
  void *v55;
  BOOL v56;
  const void *v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  float v62;
  float v63;
  int *v64;
  float v65;
  float v66;
  _QWORD *v67;
  int *v68;
  float v69;
  float v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  float v75;
  float v76;
  int *v77;
  float v78;
  float v79;
  void *v80;
  int *v81;
  float v82;
  float v83;
  int *v84;
  float v85;
  float v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int *v94;
  float v95;
  float v96;
  void *v97;
  const void *v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t i;
  char *v103;
  int *v104;
  float v105;
  float v106;
  char *v107;
  void *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  const void **v113;
  uint64_t v114;
  int *v115;
  float v116;
  float v117;
  const void **v118;
  int *v119;
  float v120;
  float v121;
  const void *v122;
  __int128 v123;
  const void **v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  float v130;
  float v131;
  int *v132;
  float v133;
  float v134;
  void *v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  const void *v139;
  void **v140;
  uint64_t v141;
  const void **v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;
  float v146;
  float v147;
  void *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  unint64_t v152;
  const void **v153;
  int *v154;
  float v155;
  float v156;
  unint64_t v157;
  const void *v158;
  __int128 v159;
  uint64_t v160;
  const void **v161;
  void *v162;
  int *v163;
  float v164;
  float v165;
  void *v166;
  unint64_t v168;
  _QWORD *v169;
  int *v170;
  float v171;
  float v172;
  const void *v173;
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  const void *v178;
  uint64_t v179;
  int *v180;
  float v181;
  float v182;
  _QWORD *v183;
  void *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  int64_t v188;
  uint64_t v190;
  unint64_t v191;
  const void *v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  const void *v196;
  __int128 v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  void **v201;
  __int128 v202;
  __int128 v203;
  int *v204;
  int *v205;
  uint64_t v206;
  int *v207;
  int *v208;
  uint64_t v209;
  int *v210;
  int *v211;
  uint64_t v212;
  int *v213;
  int *v214;
  uint64_t v215;
  int *v216;
  int *v217;
  uint64_t v218;
  int *v219;
  int *v220;
  uint64_t v221;
  int *v222;
  int *v223;
  uint64_t v224;
  int *v225;
  int *v226;
  uint64_t v227;
  int *v228;
  int *v229;
  uint64_t v230;
  int *v231;
  int *v232;
  uint64_t v233;
  int *v234;
  int *v235;
  uint64_t v236;
  int *v237;
  int *v238;
  uint64_t v239;
  int *v240;
  int *v241;
  uint64_t v242;
  int *v243;
  int *v244;
  uint64_t v245;

void sub_23687D348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  void *v51;
  uint64_t v52;
  void *v54;

  v54 = *(void **)(v52 - 176);
  if (v54)
    operator delete(v54);
  if (v51)
    operator delete(v51);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23687D47C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_2367C3440();
    v4 = (char *)sub_2367CA1FC(a2);
    *a1 = v4;
    a1[2] = &v4[8 * v5];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23687D4EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23687D508(unsigned int **a1, int a2)
{
  unsigned int *v4;
  char v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  double v27;
  int *v28;
  float v29;
  int v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float *v35;
  BOOL *v36;
  int v37;
  int **v38;
  int *v39;
  int *v40;
  int *v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = *a1;
  if (**a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = a1[1];
    v8 = a1[3];
    v9 = ~a2 % 0x8Fu;
    v10 = &dword_2369261A8[3 * ((v9 + 1) >> 1)];
    v11 = v9 & 1;
    v12 = *(int **)v7;
    v13 = (int *)a1[5];
    v14 = (int *)a1[6];
    v15 = (_DWORD *)(*(_QWORD *)a1[2] + 4 * a2);
    v16 = 4 * (int)*a1[4];
    while (1)
    {
      v17 = *v13;
      if (a2 < 0)
        break;
      v18 = *v8 + 64;
      if (a2 >= (int)*v8 && a2 < v18)
      {
        if (v6 <= 2)
        {
          if ((int)(a2 - *v8) >> v5 <= 0)
            v24 = -(-((int)(a2 - *v8) >> v5) & 3);
          else
            v24 = ((int)(a2 - *v8) >> v5) & 3;
          v25 = (unint64_t)(((uint64_t)v24 << v17) - v24) >> 2;
          if (v17 <= 3)
            LOBYTE(v17) = 3;
          LODWORD(v21) = (1 << (v17 - 3)) + v25;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      v20 = a2 - v18;
      if (a2 >= v18)
      {
        if (v6 <= 2)
        {
          v26 = v20 / 25;
          if (v6 == 1)
            v20 /= 5;
          if (v6 == 2)
            v20 = v26;
          v21 = (unint64_t)(((uint64_t)(v20 % 5) << v17) - v20 % 5) >> 2;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      LODWORD(v21) = *v15;
LABEL_24:
      v12[v6] = v21;
      if (*v14 > a2)
        v12[v6] = *(_DWORD *)(*(_QWORD *)a1[7] + 4 * v6) + v21;
      ++v6;
      v5 += 2;
      v15 = (_DWORD *)((char *)v15 + v16);
      if (v6 >= *v4)
        goto LABEL_34;
    }
    if (v6 <= 2)
    {
      v22 = __OFSUB__(v17, 8);
      v23 = v17 - 8;
      if ((v23 < 0) ^ v22 | (v23 == 0))
        LOBYTE(v23) = 0;
      LODWORD(v21) = (dword_236926508[v11] * v10[v6]) << v23;
      goto LABEL_24;
    }
LABEL_23:
    LODWORD(v21) = 0;
    goto LABEL_24;
  }
  v13 = (int *)a1[5];
  v7 = a1[1];
LABEL_34:
  v27 = 32.0
      / (double)(1 << ((2 * *(_BYTE *)v13 - 16) & ~((2 * *v13 - 16) >> 31)));
  v28 = *(int **)v7;
  v29 = v27 * sub_23687895C(*(float **)a1[8], *((float **)a1[8] + 1), *(int **)v7);
  if (a2 == -1)
  {
    v30 = -1023934464;
    goto LABEL_39;
  }
  if (a2 < 0)
  {
    v31 = (float)(-2 * a2);
    goto LABEL_45;
  }
  if ((int)*a1[6] > a2)
  {
    v30 = 1132068864;
LABEL_39:
    v31 = *(float *)&v30;
    goto LABEL_45;
  }
  v32 = *a1[3];
  v31 = 150.0;
  v33 = 256.0;
  if (v32 + 64 > a2)
    v33 = 70.0;
  if (v32 <= a2)
    v31 = v33;
LABEL_45:
  v34 = v31 + v29;
  v35 = (float *)a1[9];
  if (v34 < *v35)
  {
    v36 = (BOOL *)a1[11];
    *a1[10] = a2;
    v37 = *a1[6];
    *v35 = v34;
    *v36 = v37 > a2;
    v38 = (int **)a1[12];
    v39 = *v38;
    *v38 = v28;
    *(_QWORD *)v7 = v39;
    v40 = v38[1];
    v38[1] = (int *)*((_QWORD *)v7 + 1);
    *((_QWORD *)v7 + 1) = v40;
    v41 = v38[2];
    v38[2] = (int *)*((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = v41;
    v42 = *a1;
    if (**a1)
    {
      v43 = 0;
      v44 = *(_QWORD *)a1[8];
      v45 = *(_QWORD *)a1[7];
      v46 = *(_QWORD *)a1[13];
      do
      {
        *(_DWORD *)(v46 + 4 * v43) = (int)(float)(*(float *)(v44 + 4 * v43) - (float)*(int *)(v45 + 4 * v43));
        ++v43;
      }
      while (v43 < *v42);
    }
  }
}

uint64_t sub_23687D878(char *a1, char *a2, int a3, int a4, char a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v5 = a2 - a1;
  v6 = 0;
  if ((a5 & 1) != 0)
  {
    if (a2 != a1)
    {
      v7 = v5 >> 2;
      v8 = 1;
      if (v7 <= 1)
        v7 = 1;
      do
      {
        v9 = *(_DWORD *)a1;
        a1 += 4;
        v6 += ((1 << (a4 - 1)) + 4 * v9) / ~(-1 << a4) * v8;
        v8 *= 5;
        --v7;
      }
      while (v7);
    }
    return (a3 + v6 + 64);
  }
  else
  {
    if (a2 != a1)
    {
      v11 = v5 >> 2;
      if (a4 <= 3)
        v12 = 3;
      else
        v12 = a4;
      v13 = -1 << (v12 - 3);
      v14 = 1;
      if (v11 <= 1)
        v11 = 1;
      do
      {
        v15 = *(_DWORD *)a1;
        a1 += 4;
        v16 = ((1 << (a4 - 1)) + 4 * ((v15 + v13) & ~((v15 + v13) >> 31))) / ~(-1 << a4);
        if (v16 >= 3)
          v16 = 3;
        v6 += v16 * v14;
        v14 *= 4;
        --v11;
      }
      while (v11);
    }
    return (v6 + a3);
  }
}

void sub_23687D944(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 472;
        sub_23687D9B4(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_23687D9B4(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  for (i = 0; i != -96; i -= 24)
  {
    v4 = *(void **)(a1 + i + 112);
    if (v4)
    {
      *(_QWORD *)(a1 + i + 120) = v4;
      operator delete(v4);
    }
  }
}

uint64_t sub_23687DA04(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 472;
    sub_23687D9B4(i - 472);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23687DA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  float v7;
  float v8;
  int *v9;
  float v10;
  float v11;
  const void *v12;
  uint64_t *v13;
  uint64_t v14;
  int *v15;
  float v16;
  float v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int *v22;
  float v23;
  float v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  float v30;
  float v31;
  const void *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int *v62;
  uint64_t v63;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_2367CBEFC(&v61, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  sub_2367CBEFC(&v58, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v6 = v61;
  v7 = (float)((float)((float)((float)v6[1] * 0.587) + (float)((float)*v6 * 0.299)) + (float)((float)v6[2] * 0.114))
     + 0.1;
  if ((unint64_t)((char *)v62 - (char *)v61) >= 0xD)
    v7 = v7 * (float)((float)v61[3] + 1.0);
  v8 = (float)((float)((float)((float)v58[1] * 0.587) + (float)((float)*v58 * 0.299)) + (float)((float)v58[2] * 0.114))
     + 0.1;
  if ((unint64_t)((char *)v59 - (char *)v58) >= 0xD)
    v8 = v8 * (float)((float)v58[3] + 1.0);
  v59 = v58;
  operator delete(v58);
  v62 = v6;
  operator delete(v6);
  if (v7 >= v8)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    sub_2367CBEFC(&v55, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    sub_2367CBEFC(&v52, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v15 = v55;
    v16 = (float)((float)((float)((float)v55[1] * 0.587) + (float)((float)*v55 * 0.299)) + (float)((float)v55[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v56 - (_QWORD)v55) >= 0xD)
      v16 = v16 * (float)((float)v55[3] + 1.0);
    v17 = (float)((float)((float)((float)v52[1] * 0.587) + (float)((float)*v52 * 0.299)) + (float)((float)v52[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v53 - (_QWORD)v52) >= 0xD)
      v17 = v17 * (float)((float)v52[3] + 1.0);
    operator delete(v52);
    operator delete(v15);
    if (v16 < v17)
    {
      v18 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      v19 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v19;
      v21 = (uint64_t *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v20;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      sub_2367CBEFC(&v49, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v46 = 0;
      v47 = 0;
      v48 = 0;
      sub_2367CBEFC(&v46, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
      v22 = v49;
      v23 = (float)((float)((float)((float)v49[1] * 0.587) + (float)((float)*v49 * 0.299))
                  + (float)((float)v49[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v50 - (_QWORD)v49) >= 0xD)
        v23 = v23 * (float)((float)v49[3] + 1.0);
      v24 = (float)((float)((float)((float)v46[1] * 0.587) + (float)((float)*v46 * 0.299))
                  + (float)((float)v46[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v47 - (_QWORD)v46) >= 0xD)
        v24 = v24 * (float)((float)v46[3] + 1.0);
      operator delete(v46);
      operator delete(v22);
      if (v23 < v24)
      {
        v25 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v25;
        v26 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v26;
        v13 = (uint64_t *)(a1 + 16);
LABEL_30:
        v33 = *v13;
        *v13 = *v21;
        *v21 = v33;
      }
    }
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_2367CBEFC(&v43, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    sub_2367CBEFC(&v40, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v9 = v43;
    v10 = (float)((float)((float)((float)v43[1] * 0.587) + (float)((float)*v43 * 0.299)) + (float)((float)v43[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v44 - (_QWORD)v43) >= 0xD)
      v10 = v10 * (float)((float)v43[3] + 1.0);
    v11 = (float)((float)((float)((float)v40[1] * 0.587) + (float)((float)*v40 * 0.299)) + (float)((float)v40[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v41 - (_QWORD)v40) >= 0xD)
      v11 = v11 * (float)((float)v40[3] + 1.0);
    operator delete(v40);
    operator delete(v9);
    v13 = (uint64_t *)(a1 + 16);
    v12 = *(const void **)a1;
    if (v10 < v11)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
LABEL_29:
      *(_QWORD *)(a3 + 8) = v14;
      v21 = (uint64_t *)(a3 + 16);
      goto LABEL_30;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v12;
    v27 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v27;
    v13 = (uint64_t *)(a2 + 16);
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v28;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    sub_2367CBEFC(&v37, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    sub_2367CBEFC(&v34, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v29 = v37;
    v30 = (float)((float)((float)((float)v37[1] * 0.587) + (float)((float)*v37 * 0.299)) + (float)((float)v37[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v38 - (_QWORD)v37) >= 0xD)
      v30 = v30 * (float)((float)v37[3] + 1.0);
    v31 = (float)((float)((float)((float)v34[1] * 0.587) + (float)((float)*v34 * 0.299)) + (float)((float)v34[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v35 - (_QWORD)v34) >= 0xD)
      v31 = v31 * (float)((float)v34[3] + 1.0);
    operator delete(v34);
    operator delete(v29);
    if (v30 < v31)
    {
      v32 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v32;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      goto LABEL_29;
    }
  }
}

void sub_23687E000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23687E070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v8;
  float v9;
  float v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  float v15;
  float v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  float v21;
  float v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;

  sub_23687DA50(a1, a2, a3);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  sub_2367CBEFC(&v41, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  sub_2367CBEFC(&v38, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v8 = v41;
  v9 = (float)((float)((float)((float)v41[1] * 0.587) + (float)((float)*v41 * 0.299)) + (float)((float)v41[2] * 0.114))
     + 0.1;
  if ((unint64_t)(v42 - (_QWORD)v41) >= 0xD)
    v9 = v9 * (float)((float)v41[3] + 1.0);
  v10 = (float)((float)((float)((float)v38[1] * 0.587) + (float)((float)*v38 * 0.299)) + (float)((float)v38[2] * 0.114))
      + 0.1;
  if ((unint64_t)(v39 - (_QWORD)v38) >= 0xD)
    v10 = v10 * (float)((float)v38[3] + 1.0);
  operator delete(v38);
  operator delete(v8);
  if (v9 < v10)
  {
    v11 = *(const void **)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    v13 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v13;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    sub_2367CBEFC(&v35, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    sub_2367CBEFC(&v32, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v14 = v35;
    v15 = (float)((float)((float)((float)v35[1] * 0.587) + (float)((float)*v35 * 0.299)) + (float)((float)v35[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v36 - (_QWORD)v35) >= 0xD)
      v15 = v15 * (float)((float)v35[3] + 1.0);
    v16 = (float)((float)((float)((float)v32[1] * 0.587) + (float)((float)*v32 * 0.299)) + (float)((float)v32[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v33 - (_QWORD)v32) >= 0xD)
      v16 = v16 * (float)((float)v32[3] + 1.0);
    operator delete(v32);
    operator delete(v14);
    if (v15 < v16)
    {
      v17 = *(const void **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v18 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v18;
      v19 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v19;
      v30 = 0;
      v31 = 0;
      v29 = 0;
      sub_2367CBEFC(&v29, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v26 = 0;
      v27 = 0;
      v28 = 0;
      sub_2367CBEFC(&v26, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
      v20 = v29;
      v21 = (float)((float)((float)((float)v29[1] * 0.587) + (float)((float)*v29 * 0.299))
                  + (float)((float)v29[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v30 - (_QWORD)v29) >= 0xD)
        v21 = v21 * (float)((float)v29[3] + 1.0);
      v22 = (float)((float)((float)((float)v26[1] * 0.587) + (float)((float)*v26 * 0.299))
                  + (float)((float)v26[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v27 - (_QWORD)v26) >= 0xD)
        v22 = v22 * (float)((float)v26[3] + 1.0);
      operator delete(v26);
      operator delete(v20);
      if (v21 < v22)
      {
        v23 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v23;
        v24 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v24;
        v25 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v25;
      }
    }
  }
}

void sub_23687E410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23687E458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v10;
  float v11;
  float v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  float v23;
  float v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  float v29;
  float v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;

  sub_23687E070(a1, a2, a3, a4);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  sub_2367CBEFC(&v55, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  sub_2367CBEFC(&v52, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v10 = v55;
  v11 = (float)((float)((float)((float)v10[1] * 0.587) + (float)((float)*v10 * 0.299)) + (float)((float)v10[2] * 0.114))
      + 0.1;
  if ((unint64_t)(v56 - (_QWORD)v55) >= 0xD)
    v11 = v11 * (float)((float)v55[3] + 1.0);
  v12 = (float)((float)((float)((float)v52[1] * 0.587) + (float)((float)*v52 * 0.299)) + (float)((float)v52[2] * 0.114))
      + 0.1;
  if ((unint64_t)(v53 - (_QWORD)v52) >= 0xD)
    v12 = v12 * (float)((float)v52[3] + 1.0);
  operator delete(v52);
  operator delete(v10);
  if (v11 < v12)
  {
    v13 = *(const void **)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    v15 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v15;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    sub_2367CBEFC(&v49, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    sub_2367CBEFC(&v46, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v16 = v49;
    v17 = (float)((float)((float)((float)v49[1] * 0.587) + (float)((float)*v49 * 0.299)) + (float)((float)v49[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v50 - (_QWORD)v49) >= 0xD)
      v17 = v17 * (float)((float)v49[3] + 1.0);
    v18 = (float)((float)((float)((float)v46[1] * 0.587) + (float)((float)*v46 * 0.299)) + (float)((float)v46[2] * 0.114))
        + 0.1;
    if ((unint64_t)(v47 - (_QWORD)v46) >= 0xD)
      v18 = v18 * (float)((float)v46[3] + 1.0);
    operator delete(v46);
    operator delete(v16);
    if (v17 < v18)
    {
      v19 = *(const void **)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v19;
      v20 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v20;
      v21 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v21;
      v44 = 0;
      v45 = 0;
      v43 = 0;
      sub_2367CBEFC(&v43, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v40 = 0;
      v41 = 0;
      v42 = 0;
      sub_2367CBEFC(&v40, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v22 = v43;
      v23 = (float)((float)((float)((float)v43[1] * 0.587) + (float)((float)*v43 * 0.299))
                  + (float)((float)v43[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v44 - (_QWORD)v43) >= 0xD)
        v23 = v23 * (float)((float)v43[3] + 1.0);
      v24 = (float)((float)((float)((float)v40[1] * 0.587) + (float)((float)*v40 * 0.299))
                  + (float)((float)v40[2] * 0.114))
          + 0.1;
      if ((unint64_t)(v41 - (_QWORD)v40) >= 0xD)
        v24 = v24 * (float)((float)v40[3] + 1.0);
      operator delete(v40);
      operator delete(v22);
      if (v23 < v24)
      {
        v25 = *(const void **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v25;
        v26 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v26;
        v27 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v27;
        v38 = 0;
        v39 = 0;
        v37 = 0;
        sub_2367CBEFC(&v37, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
        v34 = 0;
        v35 = 0;
        v36 = 0;
        sub_2367CBEFC(&v34, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
        v28 = v37;
        v29 = (float)((float)((float)((float)v37[1] * 0.587) + (float)((float)*v37 * 0.299))
                    + (float)((float)v37[2] * 0.114))
            + 0.1;
        if ((unint64_t)(v38 - (_QWORD)v37) >= 0xD)
          v29 = v29 * (float)((float)v37[3] + 1.0);
        v30 = (float)((float)((float)((float)v34[1] * 0.587) + (float)((float)*v34 * 0.299))
                    + (float)((float)v34[2] * 0.114))
            + 0.1;
        if ((unint64_t)(v35 - (_QWORD)v34) >= 0xD)
          v30 = v30 * (float)((float)v34[3] + 1.0);
        operator delete(v34);
        operator delete(v28);
        if (v29 < v30)
        {
          v31 = *(const void **)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v31;
          v32 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v32;
          v33 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v33;
        }
      }
    }
  }
}

void sub_23687E910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_23687E96C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  float v7;
  float v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  float v17;
  float v18;
  void *v19;
  const void *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t i;
  uint64_t v25;
  _QWORD *v26;
  void **v27;
  int *v28;
  float v29;
  float v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int *v39;
  int *v40;
  uint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v51 = 0;
      v52 = 0;
      v53 = 0;
      sub_2367CBEFC(&v51, *(const void **)(a2 - 24), *(_QWORD *)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24)) >> 2);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      sub_2367CBEFC(&v48, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
      v6 = v51;
      v7 = (float)((float)((float)((float)v51[1] * 0.587) + (float)((float)*v51 * 0.299))
                 + (float)((float)v51[2] * 0.114))
         + 0.1;
      if ((unint64_t)(v52 - (_QWORD)v51) >= 0xD)
        v7 = v7 * (float)((float)v51[3] + 1.0);
      v8 = (float)((float)((float)((float)v48[1] * 0.587) + (float)((float)*v48 * 0.299))
                 + (float)((float)v48[2] * 0.114))
         + 0.1;
      if ((unint64_t)(v49 - (_QWORD)v48) >= 0xD)
        v8 = v8 * (float)((float)v48[3] + 1.0);
      operator delete(v48);
      operator delete(v6);
      if (v7 < v8)
      {
        v9 = *(const void **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(v2 - 24);
        *(_QWORD *)(v2 - 24) = v9;
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(v2 - 16);
        *(_QWORD *)(v2 - 16) = v10;
        v11 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 8);
        *(_QWORD *)(v2 - 8) = v11;
      }
      return 1;
    case 3uLL:
      sub_23687DA50(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_23687E070(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_23687E458(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v12 = a1 + 48;
      sub_23687DA50(a1, a1 + 24, a1 + 48);
      v13 = a1 + 72;
      if (a1 + 72 == v2)
        return 1;
      v14 = 0;
      v15 = 0;
      v33 = v2;
      break;
  }
  while (1)
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    sub_2367CBEFC(&v45, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 2);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    sub_2367CBEFC(&v42, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
    v16 = v45;
    v17 = (float)((float)((float)((float)v45[1] * 0.587) + (float)((float)*v45 * 0.299)) + (float)((float)v45[2] * 0.114))
        + 0.1;
    if ((unint64_t)((char *)v46 - (char *)v45) >= 0xD)
      v17 = v17 * (float)((float)v45[3] + 1.0);
    v18 = (float)((float)((float)((float)v42[1] * 0.587) + (float)((float)*v42 * 0.299)) + (float)((float)v42[2] * 0.114))
        + 0.1;
    if ((unint64_t)((char *)v43 - (char *)v42) >= 0xD)
      v18 = v18 * (float)((float)v42[3] + 1.0);
    v43 = v42;
    operator delete(v42);
    v46 = v16;
    operator delete(v16);
    if (v17 < v18)
    {
      v35 = v15;
      v19 = 0;
      v20 = *(const void **)v13;
      v21 = *(_OWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v34 = v21;
      v22 = v21;
      v23 = (uint64_t)(v21 - (_QWORD)v20) >> 2;
      for (i = v14; ; i -= 24)
      {
        v25 = a1 + i;
        v26 = (_QWORD *)(a1 + i + 72);
        if (v19)
        {
          *(_QWORD *)(v25 + 80) = v19;
          operator delete(v19);
          *v26 = 0;
          *(_QWORD *)(a1 + i + 80) = 0;
          *(_QWORD *)(a1 + i + 88) = 0;
        }
        v27 = (void **)(v25 + 48);
        *(_OWORD *)v26 = *(_OWORD *)(v25 + 48);
        *(_QWORD *)(v25 + 88) = *(_QWORD *)(v25 + 64);
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_QWORD *)(v25 + 64) = 0;
        if (i == -48)
        {
          v31 = a1;
          goto LABEL_28;
        }
        v39 = 0;
        v40 = 0;
        v41 = 0;
        sub_2367CBEFC(&v39, v20, v22, v23);
        v36 = 0;
        v37 = 0;
        v38 = 0;
        sub_2367CBEFC(&v36, *(const void **)(a1 + i + 24), *(_QWORD *)(a1 + i + 32), (uint64_t)(*(_QWORD *)(a1 + i + 32) - *(_QWORD *)(a1 + i + 24)) >> 2);
        v28 = v39;
        v29 = (float)((float)((float)((float)v39[1] * 0.587) + (float)((float)*v39 * 0.299))
                    + (float)((float)v39[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v40 - (char *)v39) >= 0xD)
          v29 = v29 * (float)((float)v39[3] + 1.0);
        v30 = (float)((float)((float)((float)v36[1] * 0.587) + (float)((float)*v36 * 0.299))
                    + (float)((float)v36[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v37 - (char *)v36) >= 0xD)
          v30 = v30 * (float)((float)v36[3] + 1.0);
        v37 = v36;
        operator delete(v36);
        v40 = v28;
        operator delete(v28);
        if (v29 >= v30)
          break;
        v19 = *v27;
      }
      v31 = a1 + i + 48;
LABEL_28:
      v2 = v33;
      v32 = *(void **)v31;
      if (*(_QWORD *)v31)
      {
        *(_QWORD *)(v31 + 8) = v32;
        operator delete(v32);
        *(_QWORD *)v31 = 0;
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v31 + 16) = 0;
      }
      *(_QWORD *)v31 = v20;
      *(_OWORD *)(v31 + 8) = v34;
      v15 = v35 + 1;
      if (v35 == 7)
        return v13 + 24 == v33;
    }
    v12 = v13;
    v14 += 24;
    v13 += 24;
    if (v13 == v2)
      return 1;
  }
}

void sub_23687EE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23687EEC0(uint64_t result, double *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t j;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double *v22;
  double v23;
  double *v24;
  double v25;
  unint64_t v26;
  uint64_t m;
  int v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  double v38;
  double *v39;
  double *v40;
  double v41;
  uint64_t k;
  int v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t *v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t i;
  int v52;
  double *v53;
  BOOL v55;
  uint64_t v56;
  double *v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  double v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  double v85;
  uint64_t v86;
  unint64_t v87;
  double v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v92;
  double v93;
  double v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v49 = *(a2 - 1);
        v50 = *(double *)(v9 + 16);
        if (v49 > v50)
        {
          for (i = 0; i != 12; i += 4)
          {
            v52 = *(_DWORD *)(v9 + i);
            *(_DWORD *)(v9 + i) = *(_DWORD *)((char *)v8 + i);
            *(_DWORD *)((char *)v8 + i) = v52;
          }
          *(double *)(v9 + 16) = v49;
          *(a2 - 1) = v50;
        }
        return result;
      case 3:
        return sub_23687F7B8(v9, v9 + 24, (uint64_t)(a2 - 3));
      case 4:
        return sub_23687F8C4(v9, v9 + 24, v9 + 48, (uint64_t)(a2 - 3));
      case 5:
        return sub_23687F9A0(v9, v9 + 24, v9 + 48, v9 + 72, (uint64_t)(a2 - 3));
      default:
        if (v10 <= 575)
        {
          v53 = (double *)(v9 + 24);
          v55 = (double *)v9 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = (double *)v9;
              do
              {
                v58 = v57[5];
                v59 = v57[2];
                v57 = v53;
                if (v58 > v59)
                {
                  v101 = *(_OWORD *)v53;
                  v60 = v56;
                  while (1)
                  {
                    v61 = v9 + v60;
                    *(_QWORD *)(v61 + 24) = *(_QWORD *)(v9 + v60);
                    *(_DWORD *)(v61 + 32) = *(_DWORD *)(v9 + v60 + 8);
                    *(_QWORD *)(v61 + 40) = *(_QWORD *)(v9 + v60 + 16);
                    if (!v60)
                      break;
                    v60 -= 24;
                    if (v58 <= *(double *)(v61 - 8))
                    {
                      v62 = v9 + v60 + 24;
                      goto LABEL_83;
                    }
                  }
                  v62 = v9;
LABEL_83:
                  *(_DWORD *)(v62 + 8) = DWORD2(v101);
                  *(_QWORD *)v62 = v101;
                  *(double *)(v62 + 16) = v58;
                }
                v53 = v57 + 3;
                v56 += 24;
              }
              while (v57 + 3 != a2);
            }
          }
          else if (!v55)
          {
            v92 = v9 + 16;
            do
            {
              v93 = *(double *)(v7 + 40);
              v94 = *(double *)(v7 + 16);
              v7 = (uint64_t)v53;
              if (v93 > v94)
              {
                v104 = *(_OWORD *)v53;
                v95 = v92;
                do
                {
                  v96 = v95 - 16;
                  *(_QWORD *)(v95 + 8) = *(_QWORD *)(v95 - 16);
                  *(_DWORD *)(v95 + 16) = *(_DWORD *)(v95 - 8);
                  *(_QWORD *)(v95 + 24) = *(_QWORD *)v95;
                  v97 = *(double *)(v95 - 24);
                  v95 -= 24;
                }
                while (v93 > v97);
                *(_DWORD *)(v96 + 8) = DWORD2(v104);
                *(_QWORD *)v96 = v104;
                *(double *)(v96 + 16) = v93;
              }
              v53 = (double *)(v7 + 24);
              v92 += 24;
            }
            while ((double *)(v7 + 24) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((double *)v9 != a2)
          {
            v63 = (unint64_t)(v11 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v9 + 24 * v66;
                if (2 * v65 + 2 < v11 && *(double *)(v9 + 24 * v66 + 16) > *(double *)(v67 + 40))
                {
                  v67 += 24;
                  v66 = 2 * v65 + 2;
                }
                v68 = *(double *)(v9 + 24 * v65 + 16);
                if (*(double *)(v67 + 16) <= v68)
                {
                  v69 = v9 + 24 * v65;
                  v102 = *(_OWORD *)v69;
                  do
                  {
                    v70 = v69;
                    v69 = v67;
                    v71 = *(_QWORD *)v67;
                    *(_DWORD *)(v70 + 8) = *(_DWORD *)(v69 + 8);
                    *(_QWORD *)v70 = v71;
                    *(_QWORD *)(v70 + 16) = *(_QWORD *)(v69 + 16);
                    if (v63 < v66)
                      break;
                    v72 = (2 * v66) | 1;
                    v67 = v9 + 24 * v72;
                    v73 = 2 * v66 + 2;
                    if (v73 < v11 && *(double *)(v9 + 24 * v72 + 16) > *(double *)(v67 + 40))
                    {
                      v67 += 24;
                      v72 = v73;
                    }
                    v66 = v72;
                  }
                  while (*(double *)(v67 + 16) <= v68);
                  *(_DWORD *)(v69 + 8) = DWORD2(v102);
                  *(_QWORD *)v69 = v102;
                  *(double *)(v69 + 16) = v68;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v74 = v10 / 0x18uLL;
            do
            {
              v75 = 0;
              v76 = a2;
              v98 = *(_OWORD *)v9;
              v77 = *(_QWORD *)(v9 + 16);
              v78 = v74 - 2;
              if (v74 < 2)
                v78 = v74 - 1;
              v79 = v78 >> 1;
              v80 = v9;
              do
              {
                v81 = v80;
                v82 = v75 + 1;
                v80 += 24 * (v75 + 1);
                v83 = 2 * v75;
                v75 = (2 * v75) | 1;
                v84 = v83 + 2;
                if (v84 < v74 && *(double *)(v81 + 24 * v82 + 16) > *(double *)(v80 + 40))
                {
                  v80 += 24;
                  v75 = v84;
                }
                result = *(_QWORD *)v80;
                *(_DWORD *)(v81 + 8) = *(_DWORD *)(v80 + 8);
                *(_QWORD *)v81 = result;
                *(_QWORD *)(v81 + 16) = *(_QWORD *)(v80 + 16);
              }
              while (v75 <= v79);
              a2 -= 3;
              if ((double *)v80 == v76 - 3)
              {
                *(_DWORD *)(v80 + 8) = DWORD2(v98);
                *(_QWORD *)v80 = v98;
                *(_QWORD *)(v80 + 16) = v77;
              }
              else
              {
                v85 = *a2;
                *(_DWORD *)(v80 + 8) = *((_DWORD *)v76 - 4);
                *(double *)v80 = v85;
                *(double *)(v80 + 16) = *(v76 - 1);
                *((_DWORD *)v76 - 4) = DWORD2(v98);
                *(_QWORD *)a2 = v98;
                *((_QWORD *)v76 - 1) = v77;
                v86 = v80 - v9 + 24;
                if (v86 >= 25)
                {
                  v87 = (unint64_t)(-2 - 0x5555555555555555 * (v86 >> 3)) >> 1;
                  v88 = *(double *)(v80 + 16);
                  if (*(double *)(v9 + 24 * v87 + 16) > v88)
                  {
                    v103 = *(_OWORD *)v80;
                    do
                    {
                      v89 = v80;
                      v80 = v9 + 24 * v87;
                      v90 = *(_QWORD *)v80;
                      *(_DWORD *)(v89 + 8) = *(_DWORD *)(v80 + 8);
                      *(_QWORD *)v89 = v90;
                      *(_QWORD *)(v89 + 16) = *(_QWORD *)(v80 + 16);
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                    }
                    while (*(double *)(v9 + 24 * v87 + 16) > v88);
                    *(_DWORD *)(v80 + 8) = DWORD2(v103);
                    *(_QWORD *)v80 = v103;
                    *(double *)(v80 + 16) = v88;
                  }
                }
              }
            }
            while (v74-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          result = sub_23687F7B8(v7 + 24 * v12, v7, (uint64_t)(a2 - 3));
        }
        else
        {
          sub_23687F7B8(v7, v7 + 24 * v12, (uint64_t)(a2 - 3));
          sub_23687F7B8(v7 + 24, v7 + 24 * v12 - 24, (uint64_t)(a2 - 6));
          sub_23687F7B8(v7 + 48, v7 + 24 + 24 * v12, (uint64_t)(a2 - 9));
          result = sub_23687F7B8(v7 + 24 * v12 - 24, v7 + 24 * v12, v7 + 24 + 24 * v12);
          for (j = 0; j != 12; j += 4)
          {
            v15 = *(_DWORD *)(v7 + j);
            *(_DWORD *)(v7 + j) = *(_DWORD *)(v13 + j);
            *(_DWORD *)(v13 + j) = v15;
          }
          v16 = v7 + 24 * v12;
          v17 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 16) = v17;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(double *)(v7 + 16);
          if (*(double *)(v7 - 8) > v18)
            goto LABEL_14;
          v100 = *(_OWORD *)v7;
          if (v18 <= *(a2 - 1))
          {
            v37 = v7 + 24;
            do
            {
              v9 = v37;
              if (v37 >= (unint64_t)a2)
                break;
              v38 = *(double *)(v37 + 16);
              v37 += 24;
            }
            while (v18 <= v38);
          }
          else
          {
            v35 = v7;
            do
            {
              v9 = v35 + 24;
              v36 = *(double *)(v35 + 40);
              v35 += 24;
            }
            while (v18 <= v36);
          }
          v39 = a2;
          if (v9 < (unint64_t)a2)
          {
            v40 = a2;
            do
            {
              v39 = v40 - 3;
              v41 = *(v40 - 1);
              v40 -= 3;
            }
            while (v18 > v41);
          }
          while (v9 < (unint64_t)v39)
          {
            for (k = 0; k != 12; k += 4)
            {
              v43 = *(_DWORD *)(v9 + k);
              *(_DWORD *)(v9 + k) = *(_DWORD *)((char *)v39 + k);
              *(_DWORD *)((char *)v39 + k) = v43;
            }
            v44 = *(_QWORD *)(v9 + 16);
            *(double *)(v9 + 16) = v39[2];
            *((_QWORD *)v39 + 2) = v44;
            do
            {
              v45 = *(double *)(v9 + 40);
              v9 += 24;
            }
            while (v18 <= v45);
            do
            {
              v46 = *(v39 - 1);
              v39 -= 3;
            }
            while (v18 > v46);
          }
          v47 = (uint64_t *)(v9 - 24);
          if (v9 - 24 != v7)
          {
            v48 = *v47;
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 16);
            *(_QWORD *)v7 = v48;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v9 - 16) = DWORD2(v100);
          *v47 = v100;
          *(double *)(v9 - 8) = v18;
          continue;
        }
        v18 = *(double *)(v7 + 16);
LABEL_14:
        v99 = *(_OWORD *)v7;
        v19 = v7;
        do
        {
          v20 = v19;
          v19 += 24;
        }
        while (*(double *)(v20 + 40) > v18);
        v21 = a2;
        if (v20 == v7)
        {
          v24 = a2;
          while (v19 < (unint64_t)v24)
          {
            v22 = v24 - 3;
            v25 = *(v24 - 1);
            v24 -= 3;
            if (v25 > v18)
              goto LABEL_24;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 3;
            v23 = *(v21 - 1);
            v21 -= 3;
          }
          while (v23 <= v18);
        }
LABEL_24:
        v9 = v19;
        if (v19 < (unint64_t)v22)
        {
          v26 = (unint64_t)v22;
          do
          {
            for (m = 0; m != 12; m += 4)
            {
              v28 = *(_DWORD *)(v9 + m);
              *(_DWORD *)(v9 + m) = *(_DWORD *)(v26 + m);
              *(_DWORD *)(v26 + m) = v28;
            }
            v29 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v26 + 16);
            *(_QWORD *)(v26 + 16) = v29;
            do
            {
              v30 = *(double *)(v9 + 40);
              v9 += 24;
            }
            while (v30 > v18);
            do
            {
              v31 = *(double *)(v26 - 8);
              v26 -= 24;
            }
            while (v31 <= v18);
          }
          while (v9 < v26);
        }
        v32 = (uint64_t *)(v9 - 24);
        if (v9 - 24 != v7)
        {
          v33 = *v32;
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 16);
          *(_QWORD *)v7 = v33;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 - 8);
        }
        *(_DWORD *)(v9 - 16) = DWORD2(v99);
        *v32 = v99;
        *(double *)(v9 - 8) = v18;
        if (v19 < (unint64_t)v22)
        {
LABEL_37:
          result = sub_23687EEC0(v7, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_23687FAC0(v7, v9 - 24);
        result = sub_23687FAC0(v9, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_37;
        }
        a2 = (double *)(v9 - 24);
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_23687F7B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  int v7;
  int v8;
  double v9;
  uint64_t k;
  int v11;
  uint64_t i;
  int v13;
  double v14;
  double v15;
  uint64_t j;
  int v17;

  v3 = *(double *)(a2 + 16);
  v4 = *(double *)(result + 16);
  v5 = *(double *)(a3 + 16);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      for (i = 0; i != 12; i += 4)
      {
        v13 = *(_DWORD *)(a2 + i);
        *(_DWORD *)(a2 + i) = *(_DWORD *)(a3 + i);
        *(_DWORD *)(a3 + i) = v13;
      }
      *(double *)(a2 + 16) = v5;
      *(double *)(a3 + 16) = v3;
      v14 = *(double *)(a2 + 16);
      v15 = *(double *)(result + 16);
      if (v14 > v15)
      {
        for (j = 0; j != 12; j += 4)
        {
          v17 = *(_DWORD *)(result + j);
          *(_DWORD *)(result + j) = *(_DWORD *)(a2 + j);
          *(_DWORD *)(a2 + j) = v17;
        }
        *(double *)(result + 16) = v14;
        *(double *)(a2 + 16) = v15;
      }
    }
  }
  else
  {
    v6 = 0;
    if (v5 > v3)
    {
      do
      {
        v7 = *(_DWORD *)(result + v6);
        *(_DWORD *)(result + v6) = *(_DWORD *)(a3 + v6);
        *(_DWORD *)(a3 + v6) = v7;
        v6 += 4;
      }
      while (v6 != 12);
      *(double *)(result + 16) = v5;
      goto LABEL_10;
    }
    do
    {
      v8 = *(_DWORD *)(result + v6);
      *(_DWORD *)(result + v6) = *(_DWORD *)(a2 + v6);
      *(_DWORD *)(a2 + v6) = v8;
      v6 += 4;
    }
    while (v6 != 12);
    *(double *)(result + 16) = v3;
    *(double *)(a2 + 16) = v4;
    v9 = *(double *)(a3 + 16);
    if (v9 > v4)
    {
      for (k = 0; k != 12; k += 4)
      {
        v11 = *(_DWORD *)(a2 + k);
        *(_DWORD *)(a2 + k) = *(_DWORD *)(a3 + k);
        *(_DWORD *)(a3 + k) = v11;
      }
      *(double *)(a2 + 16) = v9;
LABEL_10:
      *(double *)(a3 + 16) = v4;
    }
  }
  return result;
}

uint64_t sub_23687F8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  double v10;
  uint64_t i;
  int v12;
  double v13;
  double v14;
  uint64_t j;
  int v16;
  double v17;
  double v18;
  uint64_t k;
  int v20;

  result = sub_23687F7B8(a1, a2, a3);
  v9 = *(double *)(a4 + 16);
  v10 = *(double *)(a3 + 16);
  if (v9 > v10)
  {
    for (i = 0; i != 12; i += 4)
    {
      v12 = *(_DWORD *)(a3 + i);
      *(_DWORD *)(a3 + i) = *(_DWORD *)(a4 + i);
      *(_DWORD *)(a4 + i) = v12;
    }
    *(double *)(a3 + 16) = v9;
    *(double *)(a4 + 16) = v10;
    v13 = *(double *)(a3 + 16);
    v14 = *(double *)(a2 + 16);
    if (v13 > v14)
    {
      for (j = 0; j != 12; j += 4)
      {
        v16 = *(_DWORD *)(a2 + j);
        *(_DWORD *)(a2 + j) = *(_DWORD *)(a3 + j);
        *(_DWORD *)(a3 + j) = v16;
      }
      *(double *)(a2 + 16) = v13;
      *(double *)(a3 + 16) = v14;
      v17 = *(double *)(a2 + 16);
      v18 = *(double *)(a1 + 16);
      if (v17 > v18)
      {
        for (k = 0; k != 12; k += 4)
        {
          v20 = *(_DWORD *)(a1 + k);
          *(_DWORD *)(a1 + k) = *(_DWORD *)(a2 + k);
          *(_DWORD *)(a2 + k) = v20;
        }
        *(double *)(a1 + 16) = v17;
        *(double *)(a2 + 16) = v18;
      }
    }
  }
  return result;
}

uint64_t sub_23687F9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  double v11;
  double v12;
  uint64_t i;
  int v14;
  double v15;
  double v16;
  uint64_t j;
  int v18;
  double v19;
  double v20;
  uint64_t k;
  int v22;
  double v23;
  double v24;
  uint64_t m;
  int v26;

  result = sub_23687F8C4(a1, a2, a3, a4);
  v11 = *(double *)(a5 + 16);
  v12 = *(double *)(a4 + 16);
  if (v11 > v12)
  {
    for (i = 0; i != 12; i += 4)
    {
      v14 = *(_DWORD *)(a4 + i);
      *(_DWORD *)(a4 + i) = *(_DWORD *)(a5 + i);
      *(_DWORD *)(a5 + i) = v14;
    }
    *(double *)(a4 + 16) = v11;
    *(double *)(a5 + 16) = v12;
    v15 = *(double *)(a4 + 16);
    v16 = *(double *)(a3 + 16);
    if (v15 > v16)
    {
      for (j = 0; j != 12; j += 4)
      {
        v18 = *(_DWORD *)(a3 + j);
        *(_DWORD *)(a3 + j) = *(_DWORD *)(a4 + j);
        *(_DWORD *)(a4 + j) = v18;
      }
      *(double *)(a3 + 16) = v15;
      *(double *)(a4 + 16) = v16;
      v19 = *(double *)(a3 + 16);
      v20 = *(double *)(a2 + 16);
      if (v19 > v20)
      {
        for (k = 0; k != 12; k += 4)
        {
          v22 = *(_DWORD *)(a2 + k);
          *(_DWORD *)(a2 + k) = *(_DWORD *)(a3 + k);
          *(_DWORD *)(a3 + k) = v22;
        }
        *(double *)(a2 + 16) = v19;
        *(double *)(a3 + 16) = v20;
        v23 = *(double *)(a2 + 16);
        v24 = *(double *)(a1 + 16);
        if (v23 > v24)
        {
          for (m = 0; m != 12; m += 4)
          {
            v26 = *(_DWORD *)(a1 + m);
            *(_DWORD *)(a1 + m) = *(_DWORD *)(a2 + m);
            *(_DWORD *)(a2 + m) = v26;
          }
          *(double *)(a1 + 16) = v23;
          *(double *)(a2 + 16) = v24;
        }
      }
    }
  }
  return result;
}

BOOL sub_23687FAC0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(double *)(a2 - 8);
      v7 = *(double *)(a1 + 16);
      if (v6 > v7)
      {
        v8 = 0;
        v9 = a2 - 24;
        do
        {
          v10 = *(_DWORD *)(a1 + v8);
          *(_DWORD *)(a1 + v8) = *(_DWORD *)(v9 + v8);
          *(_DWORD *)(v9 + v8) = v10;
          v8 += 4;
        }
        while (v8 != 12);
        *(double *)(a1 + 16) = v6;
        *(double *)(a2 - 8) = v7;
        return 1;
      }
      return result;
    case 3uLL:
      sub_23687F7B8(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_23687F8C4(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_23687F9A0(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v11 = a1 + 48;
      sub_23687F7B8(a1, a1 + 24, a1 + 48);
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 16);
    if (v15 > *(double *)(v11 + 16))
    {
      v19 = *(_OWORD *)v12;
      v16 = v13;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 72) = *(_QWORD *)(a1 + v16 + 48);
        *(_DWORD *)(v17 + 80) = *(_DWORD *)(a1 + v16 + 56);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v15 <= *(double *)(v17 + 40))
        {
          v18 = a1 + v16 + 72;
          goto LABEL_14;
        }
      }
      v18 = a1;
LABEL_14:
      *(_QWORD *)v18 = v19;
      *(_DWORD *)(v18 + 8) = DWORD2(v19);
      *(double *)(v18 + 16) = v15;
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

uint64_t sub_23687FCB0(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;
  uint64_t j;
  void *v6;

  for (i = 0; i != -72; i -= 24)
  {
    v3 = *(void **)(a1 + i + 152);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 160) = v3;
      operator delete(v3);
    }
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  for (j = 0; j != -72; j -= 24)
  {
    v6 = *(void **)(a1 + j + 56);
    if (v6)
    {
      *(_QWORD *)(a1 + j + 64) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

BOOL sub_23687FD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_23687FF44, sub_23687FDBC, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_23687FDBC((uint64_t)v6, i);
  return 0;
}

uint64_t sub_23687FDBC(uint64_t a1, int a2)
{
  uint64_t **v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  uint64_t result;
  int *v10;
  _QWORD *v11;
  _DWORD *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *v2[1];
  v4 = *(_DWORD *)v2[2];
  v5 = **v2;
  v6 = (int *)(*(_QWORD *)(v5 + ((v3 + v4 % 3) << 6) + 24) + *(_QWORD *)(v5 + ((v3 + v4 % 3) << 6) + 16) * a2);
  v7 = (int *)(*(_QWORD *)(v5 + ((v3 + (v4 + v4 / 3 + 1) % 3) << 6) + 24)
             + *(_QWORD *)(v5 + ((v3 + (v4 + v4 / 3 + 1) % 3) << 6) + 16) * a2);
  v8 = ((unint64_t)(1431655765 * v4) >> 32) - v4;
  result = (v8 >> 1);
  v10 = (int *)(*(_QWORD *)(v5 + ((v3 + (int)(v4 + result + (v8 >> 31) + 2) % 3) << 6) + 24)
              + *(_QWORD *)(v5 + ((v3 + (int)(v4 + result + (v8 >> 31) + 2) % 3) << 6) + 16) * a2);
  v11 = (_QWORD *)(v5 + (v3 << 6));
  v12 = (_DWORD *)(v11[3] + v11[2] * a2);
  v13 = (int *)(v11[11] + v11[10] * a2);
  v14 = (int *)(v11[19] + v11[18] * a2);
  v15 = *v2[4];
  if (*(_DWORD *)v2[3] == 6)
  {
    for (; v15; --v15)
    {
      v17 = *v6++;
      v16 = v17;
      v19 = *v7++;
      v18 = v19;
      v20 = *v10++;
      v21 = v16 - v20;
      *v13++ = v21;
      v22 = v20 + (v21 >> 1);
      v23 = v18 - v22;
      *v14++ = v23;
      *v12++ = v22 + (v23 >> 1);
    }
  }
  else if (v15)
  {
    v25 = v2[5];
    v24 = v2[6];
    do
    {
      v27 = *v6++;
      v26 = v27;
      v28 = *v7++;
      LODWORD(result) = v28;
      v30 = *v10++;
      v29 = v30;
      v31 = result - ((v30 + v26) >> 1);
      if (*(_DWORD *)v25 == 1)
        LODWORD(result) = result - v26;
      if (*(_DWORD *)v25 == 2)
        result = v31;
      else
        result = result;
      if (*(_DWORD *)v24)
        v32 = v26;
      else
        v32 = 0;
      *v12++ = v26;
      *v13++ = result;
      *v14++ = v29 - v32;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_23687FF44(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t JxlResizableParallelRunner(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, _QWORD), uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::unique_lock<std::mutex> v16;

  if ((_DWORD)a5 + 1 == a6)
  {
    result = a3(a2, 1);
    if ((_DWORD)result)
      return result;
    a4(a2, a5, 0);
    return 0;
  }
  v12 = (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
  v13 = (a6 - a5);
  if (v12 + 1 < v13)
    v14 = v12 + 1;
  else
    v14 = (a6 - a5);
  result = a3(a2, v14);
  if (!(_DWORD)result)
  {
    std::mutex::lock((std::mutex *)(a1 + 120));
    *(_QWORD *)(a1 + 216) = (v13 - 1);
    atomic_store(a5, (unsigned int *)(a1 + 184));
    *(_DWORD *)(a1 + 188) = a6;
    *(_QWORD *)(a1 + 192) = a4;
    *(_QWORD *)(a1 + 200) = a2;
    *(_BYTE *)(a1 + 232) = 1;
    ++*(_QWORD *)(a1 + 224);
    std::condition_variable::notify_all((std::condition_variable *)a1);
    std::mutex::unlock((std::mutex *)(a1 + 120));
    sub_2368800A0(a1);
    do
    {
      v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 120);
      v16.__owns_ = 1;
      std::mutex::lock((std::mutex *)(a1 + 120));
      v15 = *(_QWORD *)(a1 + 224);
      if (v15)
        std::condition_variable::wait((std::condition_variable *)(a1 + 48), &v16);
      if (v16.__owns_)
        std::mutex::unlock(v16.__m_);
    }
    while (v15);
    return 0;
  }
  return result;
}

void sub_2368800A0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = (unsigned int *)(a1 + 184);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (v3 < *(_DWORD *)(a1 + 188))
  {
    do
    {
      (*(void (**)(_QWORD))(a1 + 192))(*(_QWORD *)(a1 + 200));
      do
        v4 = __ldaxr(v2);
      while (__stlxr(v4 + 1, v2));
    }
    while (v4 < *(_DWORD *)(a1 + 188));
  }
  std::mutex::lock((std::mutex *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 224);
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = --v5;
  if (!v5)
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 48));
  std::mutex::unlock((std::mutex *)(a1 + 120));
}

double JxlResizableParallelRunnerCreate()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_QWORD *)v0 = 1018212795;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 1018212795;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_QWORD *)(v0 + 120) = 850045863;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  *(_BYTE *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  return result;
}

void sub_2368801C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  pthread_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::thread *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  std::thread *v42;
  __int128 v43;
  unint64_t v44;
  int64x2_t v45;
  unint64_t v46;
  uint64_t v47;

  if (a2)
    v4 = a2 - 1;
  else
    v4 = 0;
  v5 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  *(_QWORD *)(a1 + 208) = v4;
  std::condition_variable::notify_all((std::condition_variable *)a1);
  std::mutex::unlock(v5);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(pthread_t **)(a1 + 104);
  v8 = ((uint64_t)v7 - v6) >> 3;
  if (v8 < v4)
  {
    do
    {
      *(_QWORD *)&v43 = a1;
      *((_QWORD *)&v43 + 1) = v8;
      v9 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v7 >= v9)
      {
        v10 = *(_QWORD *)(a1 + 96);
        v11 = ((uint64_t)v7 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_45;
        v12 = v9 - v10;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v47 = a1 + 112;
        if (v14)
          v14 = (unint64_t)sub_2367CA1FC(v14);
        else
          v15 = 0;
        v44 = v14;
        v45.i64[0] = v14 + 8 * v11;
        v45.i64[1] = v45.i64[0];
        v46 = v14 + 8 * v15;
        sub_2368804A4((pthread_t *)v45.i64[0], &v43);
        v16 = v45.i64[0];
        v7 = (pthread_t *)(v45.i64[1] + 8);
        v45.i64[1] += 8;
        v18 = *(_QWORD **)(a1 + 96);
        v17 = *(_QWORD **)(a1 + 104);
        if (v17 == v18)
        {
          v20 = vdupq_n_s64((unint64_t)v17);
        }
        else
        {
          do
          {
            v19 = *--v17;
            *(_QWORD *)(v16 - 8) = v19;
            v16 -= 8;
            *v17 = 0;
          }
          while (v17 != v18);
          v20 = *(int64x2_t *)(a1 + 96);
          v7 = (pthread_t *)v45.i64[1];
        }
        *(_QWORD *)(a1 + 96) = v16;
        *(_QWORD *)(a1 + 104) = v7;
        v45 = v20;
        v21 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v46;
        v46 = v21;
        v44 = v20.i64[0];
        sub_236880598((uint64_t)&v44);
      }
      else
      {
        sub_2368804A4(v7++, &v43);
        *(_QWORD *)(a1 + 104) = v7;
      }
      *(_QWORD *)(a1 + 104) = v7;
      ++v8;
    }
    while (v8 < v4);
    v6 = *(_QWORD *)(a1 + 96);
    v8 = ((uint64_t)v7 - v6) >> 3;
  }
  if (v8 > v4)
  {
    v22 = 8 * a2 - 8 * (a2 != 0);
    v23 = v4;
    do
    {
      std::thread::join((std::thread *)(v6 + v22));
      ++v23;
      v6 = *(_QWORD *)(a1 + 96);
      v24 = *(std::thread **)(a1 + 104);
      v25 = (uint64_t)v24 - v6;
      v22 += 8;
    }
    while (v23 < ((uint64_t)v24 - v6) >> 3);
    v26 = v25 >> 3;
    v27 = v4 - (v25 >> 3);
    if (v4 <= v25 >> 3)
    {
      if (v4 < v25 >> 3)
      {
        v42 = (std::thread *)(v6 + 8 * v4);
        while (v24 != v42)
          std::thread::~thread(--v24);
        *(_QWORD *)(a1 + 104) = v42;
      }
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 112);
      if (v27 <= (v28 - (uint64_t)v24) >> 3)
      {
        bzero(*(void **)(a1 + 104), 8 * v27);
        *(_QWORD *)(a1 + 104) = &v24[v27];
      }
      else
      {
        if (v4 >> 61)
LABEL_45:
          sub_2367C3440();
        v47 = a1 + 112;
        v29 = v28 - v6;
        v30 = v29 >> 2;
        if (v29 >> 2 <= v4)
          v30 = v4;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        v32 = (char *)sub_2367CA1FC(v31);
        v34 = *(_QWORD **)(a1 + 96);
        v33 = *(_QWORD **)(a1 + 104);
        v35 = &v32[8 * v26];
        v37 = &v32[8 * v36];
        v46 = (unint64_t)v37;
        bzero(v35, 8 * v27);
        v38 = &v35[8 * v27];
        v45.i64[1] = (uint64_t)v38;
        if (v33 != v34)
        {
          do
          {
            v39 = *--v33;
            *((_QWORD *)v35 - 1) = v39;
            v35 -= 8;
            *v33 = 0;
          }
          while (v33 != v34);
          v38 = (char *)v45.i64[1];
          v37 = (char *)v46;
        }
        v40 = *(_OWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v35;
        *(_QWORD *)(a1 + 104) = v38;
        v45 = (int64x2_t)v40;
        v41 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v37;
        v46 = v41;
        v44 = v40;
        sub_236880598((uint64_t)&v44);
      }
    }
  }
}

void sub_236880484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 104) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t **sub_2368804A4(pthread_t *a1, _OWORD *a2)
{
  std::__thread_struct *v4;
  uint64_t v5;
  int v6;
  uint64_t *v8;

  v4 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v4);
  v5 = operator new();
  *(_QWORD *)v5 = v4;
  *(_OWORD *)(v5 + 8) = *a2;
  v8 = (uint64_t *)v5;
  v6 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_2368805E4, (void *)v5);
  if (v6)
  {
    std::__throw_system_error(v6, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x236880554);
  }
  v8 = 0;
  return sub_2368806F4(&v8);
}

uint64_t sub_236880598(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2368805E4(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  const void **v7;
  std::unique_lock<std::mutex> __lk;

  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (uint64_t)v7[1];
  v4 = (unint64_t)v7[2];
  do
  {
    while (1)
    {
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 120);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)(v3 + 120));
      if (*(_QWORD *)(v3 + 208) <= v4)
      {
        v5 = 1;
      }
      else if (*(_BYTE *)(v3 + 232) && *(_QWORD *)(v3 + 216) > v4)
      {
        v5 = 0;
        ++*(_QWORD *)(v3 + 224);
      }
      else
      {
        std::condition_variable::wait((std::condition_variable *)v3, &__lk);
        v5 = 2;
      }
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      if (v5)
        break;
      sub_2368800A0(v3);
    }
  }
  while (v5 == 2);
  sub_2368806F4((uint64_t **)&v7);
  return 0;
}

void sub_2368806DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2368806F4((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2368806F4(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_236880740(v2);
    MEMORY[0x23B7F8F48](v2, 0x1020C4062D53EE8);
  }
  return a1;
}

uint64_t sub_236880740(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x23B7F8E58]();
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

uint64_t JxlResizableParallelRunnerDestroy(uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    sub_2368801C0(result, 0);
    std::mutex::~mutex((std::mutex *)(v1 + 120));
    v2 = (void **)(v1 + 96);
    sub_2368807F8(&v2);
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)v1);
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

void sub_2368807F8(void ***a1)
{
  void **v1;
  std::thread *v2;
  std::thread *v4;
  void *v5;

  v1 = *a1;
  v2 = (std::thread *)**a1;
  if (v2)
  {
    v4 = (std::thread *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t JxlResizableParallelRunnerSuggestThreads(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  LODWORD(result) = std::thread::hardware_concurrency();
  if ((unint64_t)(a2 * a1) >> 16 >= result)
    return result;
  else
    return (unint64_t)(a2 * a1) >> 16;
}

uint64_t JxlThreadParallelRunner(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, _QWORD), uint64_t a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v8;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a5 > a6)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a5 == a6)
    return 0;
  v8 = a5;
  v12 = *(_DWORD *)(a1 + 48);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  result = a3(a2, v13);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      v14 = (unsigned int *)(a1 + 56);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      if (v15)
      {
        return 0xFFFFFFFFLL;
      }
      else
      {
        *(_QWORD *)(a1 + 240) = a4;
        *(_QWORD *)(a1 + 248) = a2;
        *(_DWORD *)(a1 + 320) = 0;
        std::mutex::lock((std::mutex *)(a1 + 64));
        *(_QWORD *)(a1 + 232) = a6 | (unint64_t)(v8 << 32);
        std::mutex::unlock((std::mutex *)(a1 + 64));
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 184));
        sub_236880DF8(a1);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (v17)
          return 0xFFFFFFFFLL;
        else
          return 0;
      }
    }
    else if (v8 >= a6)
    {
      return 0;
    }
    else
    {
      do
      {
        a4(a2, v8, 0);
        result = 0;
        v8 = (v8 + 1);
      }
      while (a6 != (_DWORD)v8);
    }
  }
  return result;
}

uint64_t JxlThreadParallelRunnerCreate(uint64_t *a1, int a2)
{
  void *(*v3)(int, size_t);
  uint64_t v4;
  void (*v5)(int, void *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  pthread_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;

  v3 = sub_236880CE8;
  if (!a1)
  {
    v7 = 0;
LABEL_8:
    v5 = sub_236880CF8;
    goto LABEL_9;
  }
  v4 = a1[1];
  v5 = (void (*)(int, void *))a1[2];
  if ((v4 == 0) != (v5 == 0))
    return 0;
  v7 = *a1;
  if (v4)
    v3 = (void *(*)(int, size_t))a1[1];
  if (!v5)
    goto LABEL_8;
LABEL_9:
  v8 = (uint64_t)v3(v7, 392);
  v6 = v8;
  if (v8)
  {
    *(_QWORD *)(v8 + 24) = 0;
    v9 = (int64x2_t *)(v8 + 24);
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    if (a2 <= 1)
      v10 = 1;
    else
      v10 = a2;
    *(_DWORD *)(v8 + 48) = a2;
    *(_DWORD *)(v8 + 52) = v10;
    *(_DWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = 850045863;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_QWORD *)(v8 + 128) = 1018212795;
    *(_QWORD *)(v8 + 120) = 0;
    *(_QWORD *)(v8 + 184) = 1018212795;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_OWORD *)(v8 + 164) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_QWORD *)(v8 + 224) = 0;
    *(_DWORD *)(v8 + 320) = 0;
    if (a2)
    {
      v39 = v8 + 40;
      v11 = (char *)sub_2367CA1FC(a2);
      v14 = *(_QWORD **)(v6 + 24);
      v13 = *(_QWORD **)(v6 + 32);
      if (v13 == v14)
      {
        v17 = vdupq_n_s64((unint64_t)v13);
        v15 = v11;
      }
      else
      {
        v15 = v11;
        do
        {
          v16 = *--v13;
          *((_QWORD *)v15 - 1) = v16;
          v15 -= 8;
          *v13 = 0;
        }
        while (v13 != v14);
        v17 = *v9;
      }
      *(_QWORD *)(v6 + 24) = v15;
      *(_QWORD *)(v6 + 32) = v11;
      v37 = v17;
      v18 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = &v11[8 * v12];
      v38 = v18;
      v36 = v17.i64[0];
      sub_236880598((uint64_t)&v36);
      a2 = *(_DWORD *)(v6 + 48);
    }
    *(_QWORD *)(v6 + 232) = -2;
    v34 = 0;
    if (a2)
    {
      v19 = *(pthread_t **)(v6 + 32);
      do
      {
        v35 = v6;
        v20 = *(_QWORD *)(v6 + 40);
        if ((unint64_t)v19 >= v20)
        {
          v21 = ((uint64_t)v19 - v9->i64[0]) >> 3;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_2367C3440();
          v22 = v20 - v9->i64[0];
          v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          v39 = v6 + 40;
          if (v24)
            v24 = (unint64_t)sub_2367CA1FC(v24);
          else
            v25 = 0;
          v36 = v24;
          v37.i64[0] = v24 + 8 * v21;
          v37.i64[1] = v37.i64[0];
          v38 = v24 + 8 * v25;
          sub_2368810A0((pthread_t *)v37.i64[0], &v35, &v34);
          v26 = v37.i64[0];
          v19 = (pthread_t *)(v37.i64[1] + 8);
          v37.i64[1] += 8;
          v28 = *(_QWORD **)(v6 + 24);
          v27 = *(_QWORD **)(v6 + 32);
          if (v27 == v28)
          {
            v30 = vdupq_n_s64((unint64_t)v27);
          }
          else
          {
            do
            {
              v29 = *--v27;
              *(_QWORD *)(v26 - 8) = v29;
              v26 -= 8;
              *v27 = 0;
            }
            while (v27 != v28);
            v30 = *v9;
            v19 = (pthread_t *)v37.i64[1];
          }
          *(_QWORD *)(v6 + 24) = v26;
          *(_QWORD *)(v6 + 32) = v19;
          v37 = v30;
          v31 = *(_QWORD *)(v6 + 40);
          *(_QWORD *)(v6 + 40) = v38;
          v38 = v31;
          v36 = v30.i64[0];
          sub_236880598((uint64_t)&v36);
        }
        else
        {
          sub_2368810A0(v19++, &v35, &v34);
          *(_QWORD *)(v6 + 32) = v19;
        }
        *(_QWORD *)(v6 + 32) = v19;
        ++v34;
        v32 = *(_DWORD *)(v6 + 48);
      }
      while (v34 < v32);
      if (v32)
        sub_236880DF8(v6);
    }
    *(_QWORD *)v6 = v7;
    *(_QWORD *)(v6 + 8) = v3;
    *(_QWORD *)(v6 + 16) = v5;
  }
  return v6;
}

void sub_236880C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::condition_variable *a10, std::mutex *a11, uint64_t a12, uint64_t a13, char a14)
{
  std::condition_variable *v14;

  std::condition_variable::~condition_variable(v14);
  std::condition_variable::~condition_variable(a10);
  std::mutex::~mutex(a11);
  sub_2368807F8((void ***)&a13);
  _Unwind_Resume(a1);
}

void *sub_236880CE8(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9BDDFC5AuLL);
}

void sub_236880CF8(int a1, void *a2)
{
  free(a2);
}

uint64_t JxlThreadParallelRunnerDestroy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  std::thread *v3;
  std::thread *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  void **v6;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)result;
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(result + 16);
    if (*(_DWORD *)(result + 48))
    {
      std::mutex::lock((std::mutex *)(result + 64));
      *(_QWORD *)(v1 + 232) = -4;
      std::mutex::unlock((std::mutex *)(v1 + 64));
      std::condition_variable::notify_all((std::condition_variable *)(v1 + 184));
    }
    v3 = *(std::thread **)(v1 + 24);
    v4 = *(std::thread **)(v1 + 32);
    while (v3 != v4)
      std::thread::join(v3++);
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 184));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 128));
    std::mutex::~mutex((std::mutex *)(v1 + 64));
    v6 = (void **)(v1 + 24);
    sub_2368807F8(&v6);
    return v5(v2, v1);
  }
  return result;
}

uint64_t JxlThreadParallelRunnerDefaultNumWorkerThreads()
{
  return std::thread::hardware_concurrency();
}

void sub_236880DF8(uint64_t a1)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  _BOOL4 owns;
  std::unique_lock<std::mutex> v4;

  m = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 64);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (*(_DWORD *)(a1 + 176) == (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3)
  {
    *(_DWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 232) = -2;
LABEL_6:
    std::mutex::unlock(m);
    return;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 128), &v4);
  while (*(_DWORD *)(a1 + 176) != (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  owns = v4.__owns_;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 232) = -2;
  if (owns)
  {
    m = v4.__m_;
    goto LABEL_6;
  }
}

void sub_236880E9C(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  std::condition_variable *v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  std::mutex *v21;
  std::condition_variable *v23;
  std::unique_lock<std::mutex> __lk;

  v3 = (std::mutex *)(a1 + 64);
  v23 = (std::condition_variable *)(a1 + 128);
  v4 = (std::condition_variable *)(a1 + 184);
  v5 = (int)a2;
  v6 = (unsigned int *)(a1 + 320);
  v21 = (std::mutex *)(a1 + 64);
  do
  {
    __lk.__m_ = v3;
    __lk.__owns_ = 1;
    std::mutex::lock(v3);
    v7 = *(_DWORD *)(a1 + 176) + 1;
    *(_DWORD *)(a1 + 176) = v7;
    if (v7 == *(_DWORD *)(a1 + 52))
      std::condition_variable::notify_one(v23);
    do
    {
      std::condition_variable::wait(v4, &__lk);
      v8 = *(_QWORD *)(a1 + 232);
    }
    while (v8 == -2);
    if (v8 == -4)
    {
      v9 = 0;
    }
    else if (v8 == -3)
    {
      sub_236881060((uint64_t)&__lk);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 240))(*(_QWORD *)(a1 + 248), a2, v5);
      v9 = 1;
    }
    else
    {
      sub_236881060((uint64_t)&__lk);
      v10 = v8 - HIDWORD(v8);
      v11 = 4 * *(_DWORD *)(a1 + 48);
      v12 = *(_DWORD *)(a1 + 320);
      v13 = (int)v8 - HIDWORD(v8) >= v12;
      v14 = v8 - HIDWORD(v8) - v12;
      if (!v13)
        v14 = 0;
      if (v11 > v14)
        v15 = 1;
      else
        v15 = v14 / v11;
      do
        v16 = __ldxr(v6);
      while (__stxr(v16 + v15, v6));
      while (1)
      {
        v17 = v16 + HIDWORD(v8);
        v19 = v17 + v15;
        v20 = v19 >= v8 ? v8 : v19;
        if (v17 >= v20)
          break;
        do
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 240))(*(_QWORD *)(a1 + 248), v17, v5);
          v17 = (v17 + 1);
        }
        while (v17 < v20);
        v18 = v10 - *v6;
        if (v10 < *v6)
          v18 = 0;
        if (v11 > v18)
          v15 = 1;
        else
          v15 = v18 / v11;
        do
          v16 = __ldxr(v6);
        while (__stxr(v16 + v15, v6));
      }
      v9 = 1;
      v3 = v21;
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  while ((v9 & 1) != 0);
}

void sub_236881040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(exception_object);
}

void sub_236881060(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_2368810A0();
  }
}

void sub_2368810A0(pthread_t *a1, _QWORD *a2, _DWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9[2];

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  v9[0] = (uint64_t *)v7;
  v9[1] = 0;
  *(_QWORD *)v7 = v6;
  *(_QWORD *)(v7 + 8) = sub_236880E9C;
  *(_QWORD *)(v7 + 16) = *a2;
  *(_DWORD *)(v7 + 24) = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_2368811B0, (void *)v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v9[0] = 0;
    sub_236881218(v9);
  }
}

void sub_23688116C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_236880740((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2368811B0(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t *v5;

  v5 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24));
  sub_236881218(&v5);
  return 0;
}

void sub_236881204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_236881218((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_236881218(uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_236880740(v1);
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

void sub_236881264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  _QWORD v7[6];

  if ((_DWORD)a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    v5 = a2;
    v7[0] = sub_2367CAAA0;
    v7[1] = a3;
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), float32x4_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))a1)(*(_QWORD *)(a1 + 8), v7, sub_236882478, sub_236882088, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (i = 2; i != v5; ++i)
        sub_236882088((uint64_t)v7, i);
    }
  }
}

uint64_t sub_2368812F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  _QWORD v7[6];

  if ((_DWORD)a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    v5 = a2;
    v7[0] = sub_2367CAAA0;
    v7[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))result)(*(_QWORD *)(result + 8), v7, sub_236882064, sub_236881BCC, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (i = 2; i != v5; ++i)
        result = sub_236881BCC((uint64_t)v7, i);
    }
  }
  return result;
}

uint64_t sub_23688137C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  _QWORD v7[6];

  if ((_DWORD)a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    v5 = a2;
    v7[0] = sub_2367CAAA0;
    v7[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))result)(*(_QWORD *)(result + 8), v7, sub_236881BA8, sub_236881830, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (i = 2; i != v5; ++i)
        result = sub_236881830((uint64_t)v7, i);
    }
  }
  return result;
}

uint64_t sub_236881408(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  _QWORD v7[6];

  if ((_DWORD)a2 != 2)
  {
    v7[4] = v3;
    v7[5] = v4;
    v5 = a2;
    v7[0] = sub_2367CAAA0;
    v7[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))result)(*(_QWORD *)(result + 8), v7, sub_23688180C, sub_236881494, 2, a2);
    }
    else if (a2 >= 3)
    {
      for (i = 2; i != v5; ++i)
        result = sub_236881494((uint64_t)v7, i);
    }
  }
  return result;
}

uint64_t sub_236881494(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t i;
  float v33;
  uint64_t j;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = **v2;
  v4 = v2[1][3];
  v5 = v2[1][2] * ((*v2)[1] + a2);
  v6 = v4 + v5 + 4 * v3;
  v7 = (*v2)[2];
  v8 = (float32x4_t *)v2[3];
  v9 = *v2[2];
  v10 = *(_QWORD *)(*v2[4] + 24);
  result = *(_QWORD *)(*v2[4] + 16) * a2;
  v12 = v10 + result;
  v13 = v6 - 8 * v9;
  v14 = v6 - 4 * v9;
  v15 = v6 + 4 * v9;
  v16 = v6 + 8 * v9;
  v17 = *v8;
  v18 = v8[1];
  v19 = v8[2];
  v20 = v8[3];
  v21 = v8[4];
  v22 = v8[5];
  v23 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  *(float32x4_t *)(v10 + result) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v6), v18, vaddq_f32(*(float32x4_t *)(v6 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v23))), v19, vaddq_f32(*(float32x4_t *)(v6 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v14),
                                             v18,
                                             vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v23))), v19, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v15), v18, vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v23))), v19, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))))), v22, vaddq_f32(
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v13), v18, vaddq_f32(*(float32x4_t *)(v13 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v23))), v19, vaddq_f32(*(float32x4_t *)(v13 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v23))), v19, vaddq_f32(
                                           *(float32x4_t *)(v16 + 8),
                                           (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24)))));
  if (v7 >= 0xA)
  {
    v26 = 0;
    v27 = result + v10 + 16;
    v28 = v5 + 4 * v3;
    v29 = v28 - 4 * v9 + v4 + 24;
    v30 = v28 + 8 * v9 + v4 + 12;
    result = v28 + 4 * v9 + v4 + 24;
    v31 = v28 - 8 * v9 + v4 + 12;
    for (i = 10; i <= v7; i += 4)
    {
      *(float32x4_t *)(v27 + v26) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v6 + v26 + 16)), v18, vaddq_f32(*(float32x4_t *)(v6 + v26 + 12), *(float32x4_t *)(v6 + v26 + 20))), v19, vaddq_f32(*(float32x4_t *)(v6 + v26 + 8), *(float32x4_t *)(v6 + v26 + 24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v29 + v26 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v29 + v26 - 12),
                                                *(float32x4_t *)(v29 + v26 - 4))),
                                            v19,
                                            vaddq_f32(*(float32x4_t *)(v29 + v26 - 16), *(float32x4_t *)(v29 + v26))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(result + v26 - 8)), v18, vaddq_f32(*(float32x4_t *)(result + v26 - 12), *(float32x4_t *)(result + v26 - 4))), v19, vaddq_f32(*(float32x4_t *)(result + v26 - 16), *(float32x4_t *)(result + v26))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v31 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v31 + v26), *(float32x4_t *)(v31 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v31 + v26 - 4), *(float32x4_t *)(v31 + v26 + 12))),
                                        vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v30 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v30 + v26), *(float32x4_t *)(v30 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v30 + v26 - 4), *(float32x4_t *)(v30 + v26 + 12)))));
      v26 += 16;
    }
    v25 = i - 6;
  }
  else
  {
    v25 = 4;
  }
  if (v25 < v7)
  {
    do
    {
      v33 = 0.0;
      for (j = -2; j != 3; ++j)
      {
        if (j >= 0)
          v35 = j;
        else
          v35 = -j;
        for (k = -2; k != 3; ++k)
        {
          if (k >= 0)
            v37 = k;
          else
            v37 = -k;
          v38 = k + v25;
          if ((uint64_t)(k + v25) < 0 || v38 >= (uint64_t)v7)
          {
            v39 = (unint64_t)v38 >> 63;
            do
            {
              v40 = ~v38;
              if ((v39 & 1) != 0)
                v41 = 0;
              else
                v41 = 2 * v7;
              v38 = v41 + v40;
              v39 = (unint64_t)v38 >> 63;
            }
            while (v38 < 0 || v38 >= (uint64_t)v7);
          }
          result = 16 * v37;
          v33 = v33
              + (float)((float)(*(float *)((char *)v8->f32 + result) * *(float *)(v6 + 4 * j * v9 + 4 * v38))
                      * v8[v35 + 3].f32[0]);
        }
      }
      *(float *)(v12 + 4 * v25++) = v33;
    }
    while (v25 != v7);
  }
  return result;
}

uint64_t sub_23688180C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_236881830(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t i;
  float v33;
  uint64_t j;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = **v2;
  v4 = v2[1][3];
  v5 = v2[1][2] * ((*v2)[1] + a2);
  v6 = v4 + v5 + 4 * v3;
  v7 = (*v2)[2];
  v8 = (float32x4_t *)v2[3];
  v9 = *v2[2];
  v10 = *(_QWORD *)(*v2[4] + 24);
  result = *(_QWORD *)(*v2[4] + 16) * a2;
  v12 = v10 + result;
  v13 = v6 - 8 * v9;
  v14 = v6 - 4 * v9;
  v15 = v6 + 4 * v9;
  v16 = v6 + 8 * v9;
  v17 = *v8;
  v18 = v8[1];
  v19 = v8[2];
  v20 = v8[3];
  v21 = v8[4];
  v22 = v8[5];
  v23 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  *(float32x4_t *)(v10 + result) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v6), v18, vaddq_f32(*(float32x4_t *)(v6 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v23))), v19, vaddq_f32(*(float32x4_t *)(v6 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v6, v24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v14),
                                             v18,
                                             vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v23))), v19, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v15), v18, vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v23))), v19, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))))), v22, vaddq_f32(
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v13), v18, vaddq_f32(*(float32x4_t *)(v13 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v23))), v19, vaddq_f32(*(float32x4_t *)(v13 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v13, v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v8, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v23))), v19, vaddq_f32(
                                           *(float32x4_t *)(v16 + 8),
                                           (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24)))));
  if (v7 >= 0xA)
  {
    v26 = 0;
    v27 = result + v10 + 16;
    v28 = v5 + 4 * v3;
    v29 = v28 - 4 * v9 + v4 + 24;
    v30 = v28 + 8 * v9 + v4 + 12;
    result = v28 + 4 * v9 + v4 + 24;
    v31 = v28 - 8 * v9 + v4 + 12;
    for (i = 10; i <= v7; i += 4)
    {
      *(float32x4_t *)(v27 + v26) = vmlaq_f32(vmlaq_f32(vmulq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v6 + v26 + 16)), v18, vaddq_f32(*(float32x4_t *)(v6 + v26 + 12), *(float32x4_t *)(v6 + v26 + 20))), v19, vaddq_f32(*(float32x4_t *)(v6 + v26 + 8), *(float32x4_t *)(v6 + v26 + 24)))), v21, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v29 + v26 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v29 + v26 - 12),
                                                *(float32x4_t *)(v29 + v26 - 4))),
                                            v19,
                                            vaddq_f32(*(float32x4_t *)(v29 + v26 - 16), *(float32x4_t *)(v29 + v26))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(result + v26 - 8)), v18, vaddq_f32(*(float32x4_t *)(result + v26 - 12), *(float32x4_t *)(result + v26 - 4))), v19, vaddq_f32(*(float32x4_t *)(result + v26 - 16), *(float32x4_t *)(result + v26))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v31 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v31 + v26), *(float32x4_t *)(v31 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v31 + v26 - 4), *(float32x4_t *)(v31 + v26 + 12))),
                                        vmlaq_f32(vmlaq_f32(vmulq_f32(v17, *(float32x4_t *)(v30 + v26 + 4)), v18, vaddq_f32(*(float32x4_t *)(v30 + v26), *(float32x4_t *)(v30 + v26 + 8))), v19, vaddq_f32(*(float32x4_t *)(v30 + v26 - 4), *(float32x4_t *)(v30 + v26 + 12)))));
      v26 += 16;
    }
    v25 = i - 6;
  }
  else
  {
    v25 = 4;
  }
  if (v25 < v7)
  {
    do
    {
      v33 = 0.0;
      for (j = -2; j != 3; ++j)
      {
        if (j >= 0)
          v35 = j;
        else
          v35 = -j;
        for (k = -2; k != 3; ++k)
        {
          if (k >= 0)
            v37 = k;
          else
            v37 = -k;
          v38 = k + v25;
          if ((uint64_t)(k + v25) < 0 || v38 >= (uint64_t)v7)
          {
            v39 = (unint64_t)v38 >> 63;
            do
            {
              v40 = ~v38;
              if ((v39 & 1) != 0)
                v41 = 0;
              else
                v41 = 2 * v7;
              v38 = v41 + v40;
              v39 = (unint64_t)v38 >> 63;
            }
            while (v38 < 0 || v38 >= (uint64_t)v7);
          }
          result = 16 * v37;
          v33 = v33
              + (float)((float)(*(float *)((char *)v8->f32 + result) * *(float *)(v6 + 4 * j * v9 + 4 * v38))
                      * v8[v35 + 3].f32[0]);
        }
      }
      *(float *)(v12 + 4 * v25++) = v33;
    }
    while (v25 != v7);
  }
  return result;
}

uint64_t sub_236881BA8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_236881BCC(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t i;
  uint64_t result;
  int8x16_t v39;
  float32x4_t v40;
  float v41;
  uint64_t j;
  uint64_t v43;
  uint64_t k;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = a2;
  v4 = **v2;
  v5 = v2[1][3];
  v6 = v2[1][2] * ((*v2)[1] + a2);
  v7 = v5 + v6 + 4 * v4;
  v8 = (*v2)[2];
  v9 = (float32x4_t *)v2[3];
  v10 = *v2[2];
  v11 = *(_QWORD *)(*v2[4] + 24);
  v12 = *(_QWORD *)(*v2[4] + 16) * v3;
  v13 = v11 + v12;
  v14 = v7 - 8 * v10;
  v15 = v7 - 4 * v10;
  v16 = v7 + 4 * v10;
  v17 = v7 + 8 * v10;
  v19 = *v9;
  v18 = v9[1];
  v20 = v9[2];
  v21 = v9[3];
  v23 = v9[4];
  v22 = v9[5];
  v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v25 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  *(float32x4_t *)(v11 + v12) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v7), v18, vaddq_f32(*(float32x4_t *)(v7 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v24))), v20, vaddq_f32(*(float32x4_t *)(v7 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v25)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v15),
                                          v18,
                                          vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))), v20, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24))), v20, vaddq_f32(*(float32x4_t *)(v16 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v25))))), v22, vaddq_f32(
                                    vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v14), v18, vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), v20, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(*v9, *(float32x4_t *)v17), v18, vaddq_f32(*(float32x4_t *)(v17 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v24))), v20, vaddq_f32(
                                        *(float32x4_t *)(v17 + 8),
                                        (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v25)))));
  if (v8 >= 0xA)
  {
    v28 = 0;
    v29 = v12 + v11;
    v30 = v6 + 4 * v4;
    v31 = v29 + 16;
    v32 = v30 + 24;
    v33 = v5 + v30 + 24 - 4 * v10;
    v34 = v30 + 4 * v10 + v5 + 24;
    v35 = v30 + 8 * v10 + v5 + 12;
    v36 = v5 + v32 - 8 * v10;
    for (i = 10; i <= v8; i += 4)
    {
      *(float32x4_t *)(v31 + v28) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v7 + v28 + 16)), v18, vaddq_f32(*(float32x4_t *)(v7 + v28 + 12), *(float32x4_t *)(v7 + v28 + 20))), v20, vaddq_f32(*(float32x4_t *)(v7 + v28 + 8), *(float32x4_t *)(v7 + v28 + 24)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v33 + v28 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v33 + v28 - 12),
                                                *(float32x4_t *)(v33 + v28 - 4))),
                                            v20,
                                            vaddq_f32(*(float32x4_t *)(v33 + v28 - 16), *(float32x4_t *)(v33 + v28))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v34 + v28 - 8)), v18, vaddq_f32(*(float32x4_t *)(v34 + v28 - 12), *(float32x4_t *)(v34 + v28 - 4))), v20, vaddq_f32(*(float32x4_t *)(v34 + v28 - 16), *(float32x4_t *)(v34 + v28))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v36 + v28 - 8)), v18, vaddq_f32(*(float32x4_t *)(v36 + v28 - 12), *(float32x4_t *)(v36 + v28 - 4))), v20, vaddq_f32(*(float32x4_t *)(v36 + v28 - 16), *(float32x4_t *)(v36 + v28))), vmlaq_f32(vmlaq_f32(
                                            vmulq_f32(v19, *(float32x4_t *)(v35 + v28 + 4)),
                                            v18,
                                            vaddq_f32(*(float32x4_t *)(v35 + v28), *(float32x4_t *)(v35 + v28 + 8))),
                                          v20,
                                          vaddq_f32(*(float32x4_t *)(v35 + v28 - 4), *(float32x4_t *)(v35 + v28 + 12)))));
      v28 += 16;
    }
    v27 = i - 6;
    v26 = i - 2;
  }
  else
  {
    v26 = 8;
    v27 = 4;
  }
  result = v27;
  v39 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFAA0, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v40 = vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v7 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v7 + 4 * v27 - 4), *(float32x4_t *)(v7 + 4 * v8 - 16))), v20, vaddq_f32(*(float32x4_t *)(v7 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v7 + 4 * v8 - 16), v39)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v15 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v15 + 4 * v27 - 4), *(float32x4_t *)(v15 + 4 * v8 - 16))), v20,
              vaddq_f32(*(float32x4_t *)(v15 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v15 + 4 * v8 - 16), v39))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v16 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v16 + 4 * v27 - 4), *(float32x4_t *)(v16 + 4 * v8 - 16))), v20, vaddq_f32(*(float32x4_t *)(v16 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v16 + 4 * v8 - 16), v39)))));
  *(float32x4_t *)(v13 + 4 * v27) = vmlaq_f32(v40, v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v14 + 4 * v27)), v18, vaddq_f32(*(float32x4_t *)(v14 + 4 * v27 - 4), *(float32x4_t *)(v14 + 4 * v8 - 16))), v20, vaddq_f32(*(float32x4_t *)(v14 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v14 + 4 * v8 - 16), v39))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v17 + 4 * v27)), v18, vaddq_f32(
                                              *(float32x4_t *)(v17 + 4 * v27 - 4),
                                              *(float32x4_t *)(v17 + 4 * v8 - 16))),
                                          v20,
                                          vaddq_f32(*(float32x4_t *)(v17 + 4 * v27 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v17 + 4 * v8 - 16), v39)))));
  if (v26 < v8)
  {
    do
    {
      v41 = 0.0;
      for (j = -2; j != 3; ++j)
      {
        if (j >= 0)
          v43 = j;
        else
          v43 = -j;
        for (k = -2; k != 3; ++k)
        {
          if (k >= 0)
            v45 = k;
          else
            v45 = -k;
          v46 = k + v26;
          if ((uint64_t)(k + v26) < 0 || v46 >= (uint64_t)v8)
          {
            v47 = (unint64_t)v46 >> 63;
            do
            {
              v48 = ~v46;
              if ((v47 & 1) != 0)
                v49 = 0;
              else
                v49 = 2 * v8;
              v46 = v49 + v48;
              v47 = (unint64_t)v46 >> 63;
            }
            while (v46 < 0 || v46 >= (uint64_t)v8);
          }
          result = 4 * v45;
          v41 = v41 + (float)((float)(v9->f32[result] * *(float *)(v7 + 4 * j * v10 + 4 * v46)) * v9[v43 + 3].f32[0]);
        }
      }
      *(float *)(v13 + 4 * v26++) = v41;
    }
    while (v26 != v8);
  }
  return result * 4;
}

uint64_t sub_236882064(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

float32x4_t sub_236882088(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t i;
  float32x4_t *v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t result;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = a2;
  v4 = **v2;
  v5 = v2[1][3];
  v6 = v2[1][2] * ((*v2)[1] + a2);
  v7 = v5 + v6 + 4 * v4;
  v8 = (*v2)[2];
  v9 = (float32x4_t *)v2[3];
  v10 = *v2[2];
  v11 = *(_QWORD *)(*v2[4] + 24);
  v12 = *(_QWORD *)(*v2[4] + 16) * v3;
  v13 = v11 + v12;
  v14 = v7 - 8 * v10;
  v15 = v7 - 4 * v10;
  v16 = v7 + 4 * v10;
  v17 = v7 + 8 * v10;
  v19 = *v9;
  v18 = v9[1];
  v20 = v9[2];
  v21 = v9[3];
  v23 = v9[4];
  v22 = v9[5];
  v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v25 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  *(float32x4_t *)(v11 + v12) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v7), v18, vaddq_f32(*(float32x4_t *)(v7 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v24))), v20, vaddq_f32(*(float32x4_t *)(v7 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v7, v25)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v15),
                                          v18,
                                          vaddq_f32(*(float32x4_t *)(v15 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v24))), v20, vaddq_f32(*(float32x4_t *)(v15 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v15, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v16), v18, vaddq_f32(*(float32x4_t *)(v16 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v24))), v20, vaddq_f32(*(float32x4_t *)(v16 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v16, v25))))), v22, vaddq_f32(
                                    vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v14), v18, vaddq_f32(*(float32x4_t *)(v14 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v24))), v20, vaddq_f32(*(float32x4_t *)(v14 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v14, v25))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)v17), v18, vaddq_f32(*(float32x4_t *)(v17 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v24))), v20, vaddq_f32(
                                        *(float32x4_t *)(v17 + 8),
                                        (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v17, v25)))));
  if (v8 >= 0xA)
  {
    v27 = 0;
    v28 = v6 + 4 * v4;
    v29 = v28 - 4 * v10;
    v30 = v28 + 8 * v10;
    v31 = v28 + 4 * v10;
    v32 = v28 - 8 * v10;
    v33 = v12 + v11 + 16;
    v34 = v29 + v5 + 24;
    v35 = v30 + v5 + 12;
    v36 = v31 + v5 + 24;
    v37 = v32 + v5 + 12;
    for (i = 10; i <= v8; i += 4)
    {
      *(float32x4_t *)(v33 + v27) = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v7 + v27 + 16)), v18, vaddq_f32(*(float32x4_t *)(v7 + v27 + 12), *(float32x4_t *)(v7 + v27 + 20))), v20, vaddq_f32(*(float32x4_t *)(v7 + v27 + 8), *(float32x4_t *)(v7 + v27 + 24)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v34 + v27 - 8)), v18, vaddq_f32(
                                                *(float32x4_t *)(v34 + v27 - 12),
                                                *(float32x4_t *)(v34 + v27 - 4))),
                                            v20,
                                            vaddq_f32(*(float32x4_t *)(v34 + v27 - 16), *(float32x4_t *)(v34 + v27))),
                                          vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v36 + v27 - 8)), v18, vaddq_f32(*(float32x4_t *)(v36 + v27 - 12), *(float32x4_t *)(v36 + v27 - 4))), v20, vaddq_f32(*(float32x4_t *)(v36 + v27 - 16), *(float32x4_t *)(v36 + v27))))), v22, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v37 + v27 + 4)), v18, vaddq_f32(*(float32x4_t *)(v37 + v27), *(float32x4_t *)(v37 + v27 + 8))), v20, vaddq_f32(*(float32x4_t *)(v37 + v27 - 4), *(float32x4_t *)(v37 + v27 + 12))), vmlaq_f32(vmlaq_f32(
                                            vmulq_f32(v19, *(float32x4_t *)(v35 + v27 + 4)),
                                            v18,
                                            vaddq_f32(*(float32x4_t *)(v35 + v27), *(float32x4_t *)(v35 + v27 + 8))),
                                          v20,
                                          vaddq_f32(*(float32x4_t *)(v35 + v27 - 4), *(float32x4_t *)(v35 + v27 + 12)))));
      v27 += 16;
    }
    v26 = i - 6;
  }
  else
  {
    v26 = 4;
  }
  v39 = (float32x4_t *)(v7 + 4 * v26);
  v40 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFAB0, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v41 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFAA0, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
  v42 = vmlaq_f32(vmulq_f32(v21, vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *v39), v18, vaddq_f32(*(float32x4_t *)((char *)v39 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v39, v41))), v20, vaddq_f32(*(float32x4_t *)((char *)v39 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v39, v40)))), v23, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v15 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v15 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v15 + 4 * v26), v41))), v20,
              vaddq_f32(*(float32x4_t *)(v15 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v15 + 4 * v26), v40))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v16 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v16 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v16 + 4 * v26), v41))), v20, vaddq_f32(*(float32x4_t *)(v16 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v16 + 4 * v26), v40)))));
  result = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v14 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v14 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v14 + 4 * v26), v41))), v20, vaddq_f32(*(float32x4_t *)(v14 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v14 + 4 * v26), v40))), vmlaq_f32(vmlaq_f32(vmulq_f32(v19, *(float32x4_t *)(v17 + 4 * v26)), v18, vaddq_f32(*(float32x4_t *)(v17 + 4 * v26 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v17 + 4 * v26), v41))), v20,
               vaddq_f32(*(float32x4_t *)(v17 + 4 * v26 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v17 + 4 * v26), v40))));
  *(float32x4_t *)(v13 + 4 * v26) = vmlaq_f32(v42, v22, result);
  return result;
}

uint64_t sub_236882478(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

unint64_t sub_23688249C(unint64_t result, uint64_t *a2, float32x4_t *a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t *v63;
  uint64_t v64;
  unint64_t v65;
  float32x4_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  float32x4_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t *v110;
  unint64_t v111;
  float32x4_t *v112;
  unint64_t v113;
  unint64_t v114;
  float v115;
  uint64_t i;
  uint64_t v117;
  float v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t j;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  float32x4_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  unint64_t v174;
  float32x4_t *v175;
  float32x4_t *v176;
  unint64_t v177;
  unint64_t v178;
  float32x4_t v179;
  float v180;
  uint64_t n;
  uint64_t v182;
  float v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t ii;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  float32x4_t *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  float32x4_t *v235;
  float32x4_t *v236;
  float32x4_t *v237;
  unint64_t v238;
  float32x4_t *v239;
  unint64_t v240;
  unint64_t v241;
  float v242;
  uint64_t mm;
  uint64_t v244;
  float v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t nn;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  float32x4_t *v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  uint64_t v295;
  float32x4_t *v296;
  float32x4_t *v297;
  float32x4_t *v298;
  uint64_t v299;
  float32x4_t *v300;
  uint64_t v301;
  unint64_t v302;
  float32x4_t *v303;
  float32x4_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  float32x4_t *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  float32x4_t *v342;
  float32x4_t *v343;
  float32x4_t *v344;
  uint64_t v345;
  float32x4_t *v346;
  uint64_t v347;
  unint64_t v348;
  float v349;
  uint64_t k;
  uint64_t v351;
  float v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t m;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  float32x4_t *v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  float32x4_t *v402;
  float32x4_t *v403;
  uint64_t v404;
  float32x4_t *v405;
  float32x4_t *v406;
  uint64_t v407;
  unint64_t v408;
  float32x4_t v409;
  float v410;
  uint64_t jj;
  uint64_t v412;
  float v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t kk;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  float32x4_t *v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  unint64_t v460;
  float32x4_t *v461;
  float32x4_t *v462;
  float32x4_t *v463;
  uint64_t v464;
  float32x4_t *v465;
  uint64_t v466;
  unint64_t v467;
  float v468;
  uint64_t i1;
  uint64_t v470;
  float v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t i2;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  __int128 v496;
  uint64_t *v497;
  _QWORD *v498;
  uint64_t *v499;
  unint64_t v500;
  float32x4_t **v501;
  float32x4_t **v502;
  float32x4_t *v503;
  float32x4_t *v504;
  _QWORD *v505;
  _QWORD v506[3];

  v8 = (_QWORD *)result;
  if ((unint64_t)a2[2] >= 6)
  {
    v12 = a2[3];
    v13 = a2[2] & 3;
    v493 = v12;
    if (v13 == 2)
    {
      if (v12 < 1)
        return result;
      v68 = 0;
      v70 = *(_QWORD *)(result + 16);
      v69 = *(_QWORD *)(result + 24);
      v71 = v70 >> 2;
      v72 = v69 + v70 * (v12 - 1);
      v73 = v72 + 4 * (v70 >> 2);
      v74 = v69 - 4 * v71;
      v75 = *a3;
      v76 = a3[1];
      v77 = a3[2];
      v78 = a3[3];
      v79 = a3[4];
      v80 = a3[5];
      v81 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
      v82 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
      v83 = 1;
      if (v12 != 1)
        v83 = 2;
      do
      {
        v84 = *a2;
        v85 = a2[1] + v68;
        v87 = v8[2];
        v86 = v8[3];
        result = v86 + v87 * v85 + 4 * *a2;
        v88 = a2[2];
        v89 = (float32x4_t *)(a5[3] + a5[2] * v68);
        v90 = result - 8 * v71;
        v91 = v73 + v72 - v90;
        if (v72 >= v90)
          v91 = result - 8 * v71;
        v35 = v69 >= v90;
        v92 = v69 - v90;
        v36 = v92 != 0 && v35;
        v93 = v74 + v92;
        if (v36)
          v94 = v93;
        else
          v94 = v91;
        v95 = result - 4 * v71;
        v96 = v73 + v72 - v95;
        if (v72 >= v95)
          v96 = result - 4 * v71;
        v35 = v69 >= v95;
        v97 = v69 - v95;
        v36 = v97 != 0 && v35;
        v98 = v74 + v97;
        if (v36)
          v96 = v98;
        v99 = result + 4 * v71;
        v100 = v73 + v72 - v99;
        if (v72 >= v99)
          v100 = result + 4 * v71;
        v35 = v69 >= v99;
        v101 = v69 - v99;
        v36 = v101 != 0 && v35;
        v102 = v74 + v101;
        if (v36)
          v100 = v102;
        v103 = result + 8 * v71;
        v104 = v73 + v72 - v103;
        if (v72 >= v103)
          v104 = result + 8 * v71;
        v35 = v69 >= v103;
        v105 = v69 - v103;
        v36 = v105 != 0 && v35;
        v106 = v74 + v105;
        if (v36)
          v104 = v106;
        *v89 = vmlaq_f32(vmlaq_f32(vmulq_f32(v78, vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)result), v76, vaddq_f32(*(float32x4_t *)(result + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v81))), v77, vaddq_f32(*(float32x4_t *)(result + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v82)))), v79, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v96), v76, vaddq_f32(*(float32x4_t *)(v96 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v96, v81))), v77, vaddq_f32(*(float32x4_t *)(v96 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v96, v82))),
                     vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v100), v76, vaddq_f32(*(float32x4_t *)(v100 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v100, v81))), v77, vaddq_f32(*(float32x4_t *)(v100 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v100, v82))))), v80, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v94), v76, vaddq_f32(*(float32x4_t *)(v94 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v94, v81))), v77, vaddq_f32(*(float32x4_t *)(v94 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v94, v82))), vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)v104), v76,
                       vaddq_f32(*(float32x4_t *)(v104 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v104, v81))),
                     v77,
                     vaddq_f32(*(float32x4_t *)(v104 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v104, v82)))));
        if (v88 >= 0xA)
        {
          v108 = v89 + 1;
          v109 = (float32x4_t *)(v86 + v87 * v85 + 4 * v84 + 24);
          v110 = (float32x4_t *)(v96 + 24);
          v111 = v104 + 12;
          v112 = (float32x4_t *)(v100 + 24);
          v113 = v94 + 12;
          v114 = 10;
          do
          {
            *v108++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v78, vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)((char *)v109 - 8)), v76, vaddq_f32(*(float32x4_t *)((char *)v109 - 12), *(float32x4_t *)((char *)v109 - 4))), v77, vaddq_f32(v109[-1], *v109))), v79, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)((char *)v110 - 8)), v76, vaddq_f32(*(float32x4_t *)((char *)v110 - 12), *(float32x4_t *)((char *)v110 - 4))), v77, vaddq_f32(v110[-1], *v110)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)((char *)v112 - 8)), v76, vaddq_f32(*(float32x4_t *)((char *)v112 - 12), *(float32x4_t *)((char *)v112 - 4))), v77, vaddq_f32(v112[-1], *v112)))), v80, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)(v113 + 4)), v76, vaddq_f32(*(float32x4_t *)v113, *(float32x4_t *)(v113 + 8))), v77, vaddq_f32(*(float32x4_t *)(v113 - 4), *(float32x4_t *)(v113 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v75, *(float32x4_t *)(v111 + 4)), v76,
                              vaddq_f32(*(float32x4_t *)v111, *(float32x4_t *)(v111 + 8))),
                            v77,
                            vaddq_f32(*(float32x4_t *)(v111 - 4), *(float32x4_t *)(v111 + 12)))));
            v114 += 4;
            ++v109;
            ++v110;
            v111 += 16;
            ++v112;
            v113 += 16;
          }
          while (v114 <= v88);
          v107 = v114 - 6;
        }
        else
        {
          v107 = 4;
        }
        if (v107 < v88)
        {
          do
          {
            v115 = 0.0;
            for (i = -2; i != 3; ++i)
            {
              if (i >= 0)
                v117 = i;
              else
                v117 = -i;
              v118 = a3[v117 + 3].f32[0];
              v119 = result + 4 * i * v71;
              v120 = v73 + v72 - v119;
              if (v72 >= v119)
                v120 = result + 4 * i * v71;
              v35 = v69 >= v119;
              v121 = v69 - v119;
              v36 = v121 != 0 && v35;
              v122 = v74 + v121;
              if (!v36)
                v122 = v120;
              for (j = -2; j != 3; ++j)
              {
                if (j >= 0)
                  v124 = j;
                else
                  v124 = -j;
                v125 = j + v107;
                if ((uint64_t)(j + v107) < 0 || v125 >= (uint64_t)v88)
                {
                  v126 = (unint64_t)v125 >> 63;
                  do
                  {
                    v127 = ~v125;
                    if ((v126 & 1) != 0)
                      v128 = 0;
                    else
                      v128 = 2 * v88;
                    v125 = v128 + v127;
                    v126 = (unint64_t)v125 >> 63;
                  }
                  while (v125 < 0 || v125 >= (uint64_t)v88);
                }
                v115 = v115 + (float)((float)(a3[v124].f32[0] * *(float *)(v122 + 4 * v125)) * v118);
              }
            }
            v89->f32[v107++] = v115;
          }
          while (v107 != v88);
        }
        ++v68;
      }
      while (v68 != v83);
      if (v12 < 5)
      {
        if (v12 < 3)
          return result;
      }
      else
      {
        v486 = v82;
        v490 = v81;
        v505 = (_QWORD *)(v8[2] >> 2);
        v506[0] = a5;
        v497 = a2;
        v498 = v8;
        v499 = (uint64_t *)&v505;
        v500 = (unint64_t)a3;
        v501 = (float32x4_t **)v506;
        if (a4)
        {
          v129 = a4;
        }
        else
        {
          v494 = 0;
          v495 = &v494;
          v129 = &v494;
        }
        sub_23688137C((uint64_t)v129, (v12 - 2), (uint64_t)&v497);
        v82 = v486;
        v81 = v490;
      }
      v305 = v12 - 2;
      v307 = v8[2];
      v306 = v8[3];
      v308 = v307 >> 2;
      v309 = v306 + (a2[3] - 1) * v307;
      v310 = -(uint64_t)(v307 >> 2);
      v311 = v309 + 4 * v308;
      v312 = v306 - 4 * v308;
      v313 = *a3;
      v314 = a3[1];
      v315 = a3[2];
      v316 = a3[3];
      v317 = a3[4];
      v318 = a3[5];
      do
      {
        v319 = *a2;
        v320 = a2[1] + v305;
        v322 = v8[2];
        v321 = v8[3];
        v323 = v321 + v322 * v320 + 4 * *a2;
        result = a2[2];
        v324 = (float32x4_t *)(a5[3] + a5[2] * v305);
        v325 = v323 + 8 * v310;
        v326 = v311 + v309 - v325;
        if (v309 >= v325)
          v326 = v323 + 8 * v310;
        v35 = v306 >= v325;
        v327 = v306 - v325;
        v36 = v327 != 0 && v35;
        v328 = v312 + v327;
        if (v36)
          v326 = v328;
        v329 = v323 + 4 * v310;
        v330 = v311 + v309 - v329;
        if (v309 >= v329)
          v330 = v323 + 4 * v310;
        v35 = v306 >= v329;
        v331 = v306 - v329;
        v36 = v331 != 0 && v35;
        v332 = v312 + v331;
        if (v36)
          v330 = v332;
        v333 = v323 + 4 * v308;
        v334 = v311 + v309 - v333;
        if (v309 >= v333)
          v334 = v323 + 4 * v308;
        v35 = v306 >= v333;
        v335 = v306 - v333;
        v36 = v335 != 0 && v35;
        v336 = v312 + v335;
        if (v36)
          v334 = v336;
        v337 = v323 + 8 * v308;
        v338 = v311 + v309 - v337;
        if (v309 >= v337)
          v338 = v323 + 8 * v308;
        v35 = v306 >= v337;
        v339 = v306 - v337;
        v36 = v339 != 0 && v35;
        v340 = v312 + v339;
        if (v36)
          v338 = v340;
        *v324 = vmlaq_f32(vmlaq_f32(vmulq_f32(v316, vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v323), v314, vaddq_f32(*(float32x4_t *)(v323 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v323, v81))), v315, vaddq_f32(*(float32x4_t *)(v323 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v323, v82)))), v317, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v330), v314, vaddq_f32(*(float32x4_t *)(v330 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v330, v81))), v315, vaddq_f32(*(float32x4_t *)(v330 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v330, v82))),
                      vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v334), v314, vaddq_f32(*(float32x4_t *)(v334 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v334, v81))), v315, vaddq_f32(*(float32x4_t *)(v334 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v334, v82))))), v318, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v326), v314, vaddq_f32(*(float32x4_t *)(v326 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v326, v81))), v315, vaddq_f32(*(float32x4_t *)(v326 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v326, v82))), vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)v338), v314,
                        vaddq_f32(*(float32x4_t *)(v338 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v338, v81))),
                      v315,
                      vaddq_f32(*(float32x4_t *)(v338 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v338, v82)))));
        if (result >= 0xA)
        {
          v342 = v324 + 1;
          v343 = (float32x4_t *)(v321 + v322 * v320 + 4 * v319 + 24);
          v344 = (float32x4_t *)(v330 + 24);
          v345 = v338 + 12;
          v346 = (float32x4_t *)(v334 + 24);
          v347 = v326 + 12;
          v348 = 10;
          do
          {
            *v342++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v316, vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)((char *)v343 - 8)), v314, vaddq_f32(*(float32x4_t *)((char *)v343 - 12), *(float32x4_t *)((char *)v343 - 4))), v315, vaddq_f32(v343[-1], *v343))), v317, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)((char *)v344 - 8)), v314, vaddq_f32(*(float32x4_t *)((char *)v344 - 12), *(float32x4_t *)((char *)v344 - 4))), v315, vaddq_f32(v344[-1], *v344)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)((char *)v346 - 8)), v314, vaddq_f32(*(float32x4_t *)((char *)v346 - 12), *(float32x4_t *)((char *)v346 - 4))), v315, vaddq_f32(v346[-1], *v346)))), v318, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)(v347 + 4)), v314, vaddq_f32(*(float32x4_t *)v347, *(float32x4_t *)(v347 + 8))), v315, vaddq_f32(*(float32x4_t *)(v347 - 4), *(float32x4_t *)(v347 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v313, *(float32x4_t *)(v345 + 4)), v314,
                              vaddq_f32(*(float32x4_t *)v345, *(float32x4_t *)(v345 + 8))),
                            v315,
                            vaddq_f32(*(float32x4_t *)(v345 - 4), *(float32x4_t *)(v345 + 12)))));
            v348 += 4;
            ++v343;
            ++v344;
            v345 += 16;
            ++v346;
            v347 += 16;
          }
          while (v348 <= result);
          v341 = v348 - 6;
        }
        else
        {
          v341 = 4;
        }
        if (v341 < result)
        {
          do
          {
            v349 = 0.0;
            for (k = -2; k != 3; ++k)
            {
              if (k >= 0)
                v351 = k;
              else
                v351 = -k;
              v352 = a3[v351 + 3].f32[0];
              v353 = v323 + 4 * k * v308;
              v354 = v311 + v309 - v353;
              if (v309 >= v353)
                v354 = v323 + 4 * k * v308;
              v35 = v306 >= v353;
              v355 = v306 - v353;
              v36 = v355 != 0 && v35;
              v356 = v312 + v355;
              if (!v36)
                v356 = v354;
              for (m = -2; m != 3; ++m)
              {
                if (m >= 0)
                  v358 = m;
                else
                  v358 = -m;
                v359 = m + v341;
                if ((uint64_t)(m + v341) < 0 || v359 >= (uint64_t)result)
                {
                  v360 = (unint64_t)v359 >> 63;
                  do
                  {
                    v361 = ~v359;
                    if ((v360 & 1) != 0)
                      v362 = 0;
                    else
                      v362 = 2 * result;
                    v359 = v362 + v361;
                    v360 = (unint64_t)v359 >> 63;
                  }
                  while (v359 < 0 || v359 >= (uint64_t)result);
                }
                v349 = v349 + (float)((float)(a3[v358].f32[0] * *(float *)(v356 + 4 * v359)) * v352);
              }
            }
            v324->f32[v341++] = v349;
          }
          while (v341 != result);
        }
        ++v305;
      }
      while (v305 < v12);
    }
    else if (v13 == 1)
    {
      if (v12 < 1)
        return result;
      v130 = 0;
      v132 = *(_QWORD *)(result + 16);
      v131 = *(_QWORD *)(result + 24);
      v133 = v132 >> 2;
      v134 = v131 + v132 * (v12 - 1);
      v135 = v134 + 4 * (v132 >> 2);
      v136 = v131 - 4 * v133;
      v137 = *a3;
      v138 = a3[1];
      v139 = a3[2];
      v140 = a3[3];
      v141 = a3[4];
      v142 = a3[5];
      v143 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
      v144 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
      v145 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFAA0, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
      v146 = 1;
      if (v12 != 1)
        v146 = 2;
      do
      {
        v147 = *a2;
        v148 = a2[1] + v130;
        v150 = v8[2];
        v149 = v8[3];
        result = v149 + v150 * v148 + 4 * *a2;
        v151 = a2[2];
        v152 = (float32x4_t *)(a5[3] + a5[2] * v130);
        v153 = result - 8 * v133;
        v154 = v135 + v134 - v153;
        if (v134 >= v153)
          v154 = result - 8 * v133;
        v35 = v131 >= v153;
        v155 = v131 - v153;
        v36 = v155 != 0 && v35;
        v156 = v136 + v155;
        if (!v36)
          v156 = v154;
        v157 = result - 4 * v133;
        v158 = v135 + v134 - v157;
        if (v134 >= v157)
          v158 = result - 4 * v133;
        v35 = v131 >= v157;
        v159 = v131 - v157;
        v36 = v159 != 0 && v35;
        v160 = v136 + v159;
        if (v36)
          v161 = v160;
        else
          v161 = v158;
        v162 = result + 4 * v133;
        v163 = v135 + v134 - v162;
        if (v134 >= v162)
          v163 = result + 4 * v133;
        v35 = v131 >= v162;
        v164 = v131 - v162;
        v36 = v164 != 0 && v35;
        v165 = v136 + v164;
        if (v36)
          v163 = v165;
        v166 = result + 8 * v133;
        v167 = v135 + v134 - v166;
        if (v134 >= v166)
          v167 = result + 8 * v133;
        v35 = v131 >= v166;
        v168 = v131 - v166;
        v36 = v168 != 0 && v35;
        v169 = v136 + v168;
        if (!v36)
          v169 = v167;
        *v152 = vmlaq_f32(vmlaq_f32(vmulq_f32(v140, vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)result), v138, vaddq_f32(*(float32x4_t *)(result + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v143))), v139, vaddq_f32(*(float32x4_t *)(result + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v144)))), v141, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v161), v138, vaddq_f32(*(float32x4_t *)(v161 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v161, v143))), v139, vaddq_f32(*(float32x4_t *)(v161 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v161, v144))),
                      vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v163), v138, vaddq_f32(*(float32x4_t *)(v163 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v163, v143))), v139, vaddq_f32(*(float32x4_t *)(v163 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v163, v144))))), v142, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v156), v138, vaddq_f32(*(float32x4_t *)(v156 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v156, v143))), v139, vaddq_f32(*(float32x4_t *)(v156 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v156, v144))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)v169), v138,
                        vaddq_f32(*(float32x4_t *)(v169 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v169, v143))),
                      v139,
                      vaddq_f32(*(float32x4_t *)(v169 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v169, v144)))));
        if (v151 >= 0xA)
        {
          v172 = v152 + 1;
          v173 = (float32x4_t *)(v149 + v150 * v148 + 4 * v147 + 24);
          v174 = v169 + 12;
          v175 = (float32x4_t *)(v161 + 24);
          v176 = (float32x4_t *)(v163 + 24);
          v177 = v156 + 12;
          v178 = 10;
          do
          {
            *v172++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v140, vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)((char *)v173 - 8)), v138, vaddq_f32(*(float32x4_t *)((char *)v173 - 12), *(float32x4_t *)((char *)v173 - 4))), v139, vaddq_f32(v173[-1], *v173))), v141, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)((char *)v175 - 8)), v138, vaddq_f32(*(float32x4_t *)((char *)v175 - 12), *(float32x4_t *)((char *)v175 - 4))), v139, vaddq_f32(v175[-1], *v175)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)((char *)v176 - 8)), v138, vaddq_f32(*(float32x4_t *)((char *)v176 - 12), *(float32x4_t *)((char *)v176 - 4))), v139, vaddq_f32(v176[-1], *v176)))), v142, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v177 + 4)), v138, vaddq_f32(*(float32x4_t *)v177, *(float32x4_t *)(v177 + 8))), v139, vaddq_f32(*(float32x4_t *)(v177 - 4), *(float32x4_t *)(v177 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v174 + 4)), v138,
                              vaddq_f32(*(float32x4_t *)v174, *(float32x4_t *)(v174 + 8))),
                            v139,
                            vaddq_f32(*(float32x4_t *)(v174 - 4), *(float32x4_t *)(v174 + 12)))));
            v178 += 4;
            ++v173;
            v174 += 16;
            ++v175;
            ++v176;
            v177 += 16;
          }
          while (v178 <= v151);
          v170 = v178 - 6;
          v171 = v178 - 2;
          v12 = v493;
        }
        else
        {
          v170 = 4;
          v171 = 8;
        }
        v179 = vmlaq_f32(vmulq_f32(v140, vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(result + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(result + 4 * v170 - 4), *(float32x4_t *)(result + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(result + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(result + 4 * v151 - 16), v145)))), v141, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v161 + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(v161 + 4 * v170 - 4), *(float32x4_t *)(v161 + 4 * v151 - 16))), v139,
                     vaddq_f32(*(float32x4_t *)(v161 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v161 + 4 * v151 - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v163 + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(v163 + 4 * v170 - 4), *(float32x4_t *)(v163 + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(v163 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v163 + 4 * v151 - 16), v145)))));
        *(float32x4_t *)((char *)v152 + 4 * v170) = vmlaq_f32(v179, v142, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v156 + 4 * v170)), v138, vaddq_f32(*(float32x4_t *)(v156 + 4 * v170 - 4), *(float32x4_t *)(v156 + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(v156 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v156 + 4 * v151 - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v137, *(float32x4_t *)(v169 + 4 * v170)),
                                                            v138,
                                                            vaddq_f32(*(float32x4_t *)(v169 + 4 * v170 - 4), *(float32x4_t *)(v169 + 4 * v151 - 16))), v139, vaddq_f32(*(float32x4_t *)(v169 + 4 * v170 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v169 + 4 * v151 - 16), v145)))));
        if (v171 < v151)
        {
          do
          {
            v180 = 0.0;
            for (n = -2; n != 3; ++n)
            {
              if (n >= 0)
                v182 = n;
              else
                v182 = -n;
              v183 = a3[v182 + 3].f32[0];
              v184 = result + 4 * n * v133;
              v185 = v135 + v134 - v184;
              if (v134 >= v184)
                v185 = result + 4 * n * v133;
              v35 = v131 >= v184;
              v186 = v131 - v184;
              v36 = v186 != 0 && v35;
              v187 = v136 + v186;
              if (!v36)
                v187 = v185;
              for (ii = -2; ii != 3; ++ii)
              {
                if (ii >= 0)
                  v189 = ii;
                else
                  v189 = -ii;
                v190 = ii + v171;
                if ((uint64_t)(ii + v171) < 0 || v190 >= (uint64_t)v151)
                {
                  v191 = (unint64_t)v190 >> 63;
                  do
                  {
                    v192 = ~v190;
                    if ((v191 & 1) != 0)
                      v193 = 0;
                    else
                      v193 = 2 * v151;
                    v190 = v193 + v192;
                    v191 = (unint64_t)v190 >> 63;
                  }
                  while (v190 < 0 || v190 >= (uint64_t)v151);
                }
                v180 = v180 + (float)((float)(a3[v189].f32[0] * *(float *)(v187 + 4 * v190)) * v183);
              }
            }
            v152->f32[v171++] = v180;
          }
          while (v171 != v151);
        }
        ++v130;
      }
      while (v130 != v146);
      if (v12 < 5)
      {
        if (v12 < 3)
          return result;
      }
      else
      {
        v484 = v145;
        v487 = v144;
        v491 = v143;
        v505 = (_QWORD *)(v8[2] >> 2);
        v506[0] = a5;
        v497 = a2;
        v498 = v8;
        v499 = (uint64_t *)&v505;
        v500 = (unint64_t)a3;
        v501 = (float32x4_t **)v506;
        if (a4)
        {
          v194 = a4;
        }
        else
        {
          v494 = 0;
          v495 = &v494;
          v194 = &v494;
        }
        sub_2368812F0((uint64_t)v194, (v12 - 2), (uint64_t)&v497);
        v12 = v493;
        v144 = v487;
        v143 = v491;
        v145 = v484;
      }
      v363 = v12 - 2;
      v365 = v8[2];
      v364 = v8[3];
      v366 = v365 >> 2;
      v367 = v364 + (a2[3] - 1) * v365;
      v368 = -(uint64_t)(v365 >> 2);
      v369 = v367 + 4 * v366;
      v370 = v364 - 4 * v366;
      v371 = *a3;
      v372 = a3[1];
      v373 = a3[2];
      v374 = a3[3];
      v375 = a3[4];
      v376 = a3[5];
      do
      {
        v377 = *a2;
        v378 = a2[1] + v363;
        v380 = v8[2];
        v379 = v8[3];
        v381 = v379 + v380 * v378 + 4 * *a2;
        result = a2[2];
        v382 = (float32x4_t *)(a5[3] + a5[2] * v363);
        v383 = v381 + 8 * v368;
        v384 = v369 + v367 - v383;
        if (v367 >= v383)
          v384 = v381 + 8 * v368;
        v35 = v364 >= v383;
        v385 = v364 - v383;
        v36 = v385 != 0 && v35;
        v386 = v370 + v385;
        if (!v36)
          v386 = v384;
        v387 = v381 + 4 * v368;
        v388 = v369 + v367 - v387;
        if (v367 >= v387)
          v388 = v381 + 4 * v368;
        v35 = v364 >= v387;
        v389 = v364 - v387;
        v36 = v389 != 0 && v35;
        v390 = v370 + v389;
        if (v36)
          v391 = v390;
        else
          v391 = v388;
        v392 = v381 + 4 * v366;
        v393 = v369 + v367 - v392;
        if (v367 >= v392)
          v393 = v381 + 4 * v366;
        v35 = v364 >= v392;
        v394 = v364 - v392;
        v36 = v394 != 0 && v35;
        v395 = v370 + v394;
        if (v36)
          v393 = v395;
        v396 = v381 + 8 * v366;
        v397 = v369 + v367 - v396;
        if (v367 >= v396)
          v397 = v381 + 8 * v366;
        v35 = v364 >= v396;
        v398 = v364 - v396;
        v36 = v398 != 0 && v35;
        v399 = v370 + v398;
        if (!v36)
          v399 = v397;
        *v382 = vmlaq_f32(vmlaq_f32(vmulq_f32(v374, vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v381), v372, vaddq_f32(*(float32x4_t *)(v381 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v381, v143))), v373, vaddq_f32(*(float32x4_t *)(v381 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v381, v144)))), v375, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v391), v372, vaddq_f32(*(float32x4_t *)(v391 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v391, v143))), v373, vaddq_f32(*(float32x4_t *)(v391 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v391, v144))),
                      vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v393), v372, vaddq_f32(*(float32x4_t *)(v393 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v393, v143))), v373, vaddq_f32(*(float32x4_t *)(v393 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v393, v144))))), v376, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v386), v372, vaddq_f32(*(float32x4_t *)(v386 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v386, v143))), v373, vaddq_f32(*(float32x4_t *)(v386 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v386, v144))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)v399), v372,
                        vaddq_f32(*(float32x4_t *)(v399 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v399, v143))),
                      v373,
                      vaddq_f32(*(float32x4_t *)(v399 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v399, v144)))));
        if (result >= 0xA)
        {
          v402 = v382 + 1;
          v403 = (float32x4_t *)(v379 + v380 * v378 + 4 * v377 + 24);
          v404 = v399 + 12;
          v405 = (float32x4_t *)(v391 + 24);
          v406 = (float32x4_t *)(v393 + 24);
          v407 = v386 + 12;
          v408 = 10;
          do
          {
            *v402++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v374, vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)((char *)v403 - 8)), v372, vaddq_f32(*(float32x4_t *)((char *)v403 - 12), *(float32x4_t *)((char *)v403 - 4))), v373, vaddq_f32(v403[-1], *v403))), v375, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)((char *)v405 - 8)), v372, vaddq_f32(*(float32x4_t *)((char *)v405 - 12), *(float32x4_t *)((char *)v405 - 4))), v373, vaddq_f32(v405[-1], *v405)),
                            vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)((char *)v406 - 8)), v372, vaddq_f32(*(float32x4_t *)((char *)v406 - 12), *(float32x4_t *)((char *)v406 - 4))), v373, vaddq_f32(v406[-1], *v406)))), v376, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v407 + 4)), v372, vaddq_f32(*(float32x4_t *)v407, *(float32x4_t *)(v407 + 8))), v373, vaddq_f32(*(float32x4_t *)(v407 - 4), *(float32x4_t *)(v407 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v404 + 4)), v372,
                              vaddq_f32(*(float32x4_t *)v404, *(float32x4_t *)(v404 + 8))),
                            v373,
                            vaddq_f32(*(float32x4_t *)(v404 - 4), *(float32x4_t *)(v404 + 12)))));
            v408 += 4;
            ++v403;
            v404 += 16;
            ++v405;
            ++v406;
            v407 += 16;
          }
          while (v408 <= result);
          v400 = v408 - 6;
          v401 = v408 - 2;
        }
        else
        {
          v400 = 4;
          v401 = 8;
        }
        v409 = vmlaq_f32(vmulq_f32(v374, vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v381 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v381 + 4 * v400 - 4), *(float32x4_t *)(v381 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v381 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v381 + 4 * result - 16), v145)))), v375, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v391 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v391 + 4 * v400 - 4), *(float32x4_t *)(v391 + 4 * result - 16))), v373,
                     vaddq_f32(*(float32x4_t *)(v391 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v391 + 4 * result - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v393 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v393 + 4 * v400 - 4), *(float32x4_t *)(v393 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v393 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v393 + 4 * result - 16), v145)))));
        *(float32x4_t *)((char *)v382 + 4 * v400) = vmlaq_f32(v409, v376, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v386 + 4 * v400)), v372, vaddq_f32(*(float32x4_t *)(v386 + 4 * v400 - 4), *(float32x4_t *)(v386 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v386 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v386 + 4 * result - 16), v145))), vmlaq_f32(vmlaq_f32(vmulq_f32(v371, *(float32x4_t *)(v399 + 4 * v400)),
                                                            v372,
                                                            vaddq_f32(*(float32x4_t *)(v399 + 4 * v400 - 4), *(float32x4_t *)(v399 + 4 * result - 16))), v373, vaddq_f32(*(float32x4_t *)(v399 + 4 * v400 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v399 + 4 * result - 16), v145)))));
        if (v401 < result)
        {
          do
          {
            v410 = 0.0;
            for (jj = -2; jj != 3; ++jj)
            {
              if (jj >= 0)
                v412 = jj;
              else
                v412 = -jj;
              v413 = a3[v412 + 3].f32[0];
              v414 = v381 + 4 * jj * v366;
              v415 = v369 + v367 - v414;
              if (v367 >= v414)
                v415 = v381 + 4 * jj * v366;
              v35 = v364 >= v414;
              v416 = v364 - v414;
              v36 = v416 != 0 && v35;
              v417 = v370 + v416;
              if (!v36)
                v417 = v415;
              for (kk = -2; kk != 3; ++kk)
              {
                if (kk >= 0)
                  v419 = kk;
                else
                  v419 = -kk;
                v420 = kk + v401;
                if ((uint64_t)(kk + v401) < 0 || v420 >= (uint64_t)result)
                {
                  v421 = (unint64_t)v420 >> 63;
                  do
                  {
                    v422 = ~v420;
                    if ((v421 & 1) != 0)
                      v423 = 0;
                    else
                      v423 = 2 * result;
                    v420 = v423 + v422;
                    v421 = (unint64_t)v420 >> 63;
                  }
                  while (v420 < 0 || v420 >= (uint64_t)result);
                }
                v410 = v410 + (float)((float)(a3[v419].f32[0] * *(float *)(v417 + 4 * v420)) * v413);
              }
            }
            v382->f32[v401++] = v410;
          }
          while (v401 != result);
        }
        ++v363;
      }
      while (v363 < v12);
    }
    else
    {
      v14 = v12 - 1;
      if (v13)
      {
        if (v12 < 1)
          return result;
        v195 = 0;
        v197 = *(_QWORD *)(result + 16);
        v196 = *(_QWORD *)(result + 24);
        v198 = v197 >> 2;
        v199 = v196 + v197 * v14;
        v200 = v199 + 4 * (v197 >> 2);
        v201 = v196 - 4 * v198;
        v202 = *a3;
        v203 = a3[1];
        v204 = a3[2];
        v205 = a3[3];
        v206 = a3[4];
        v207 = a3[5];
        v208 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
        v209 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
        v210 = 1;
        if (v12 != 1)
          v210 = 2;
        do
        {
          v211 = *a2;
          v212 = a2[1] + v195;
          v214 = v8[2];
          v213 = v8[3];
          result = v213 + v214 * v212 + 4 * *a2;
          v215 = a2[2];
          v216 = (float32x4_t *)(a5[3] + a5[2] * v195);
          v217 = result - 8 * v198;
          v218 = v200 + v199 - v217;
          if (v199 >= v217)
            v218 = result - 8 * v198;
          v35 = v196 >= v217;
          v219 = v196 - v217;
          v36 = v219 != 0 && v35;
          v220 = v201 + v219;
          if (v36)
            v221 = v220;
          else
            v221 = v218;
          v222 = result - 4 * v198;
          v223 = v200 + v199 - v222;
          if (v199 >= v222)
            v223 = result - 4 * v198;
          v35 = v196 >= v222;
          v224 = v196 - v222;
          v36 = v224 != 0 && v35;
          v225 = v201 + v224;
          if (v36)
            v223 = v225;
          v226 = result + 4 * v198;
          v227 = v200 + v199 - v226;
          if (v199 >= v226)
            v227 = result + 4 * v198;
          v35 = v196 >= v226;
          v228 = v196 - v226;
          v36 = v228 != 0 && v35;
          v229 = v201 + v228;
          if (v36)
            v227 = v229;
          v230 = result + 8 * v198;
          v231 = v200 + v199 - v230;
          if (v199 >= v230)
            v231 = result + 8 * v198;
          v35 = v196 >= v230;
          v232 = v196 - v230;
          v36 = v232 != 0 && v35;
          v233 = v201 + v232;
          if (v36)
            v231 = v233;
          *v216 = vmlaq_f32(vmlaq_f32(vmulq_f32(v205, vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)result), v203, vaddq_f32(*(float32x4_t *)(result + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v208))), v204, vaddq_f32(*(float32x4_t *)(result + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v209)))), v206, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v223), v203, vaddq_f32(*(float32x4_t *)(v223 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v223, v208))), v204, vaddq_f32(*(float32x4_t *)(v223 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v223, v209))),
                        vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v227), v203, vaddq_f32(*(float32x4_t *)(v227 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v227, v208))), v204, vaddq_f32(*(float32x4_t *)(v227 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v227, v209))))), v207, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v221), v203, vaddq_f32(*(float32x4_t *)(v221 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v221, v208))), v204, vaddq_f32(*(float32x4_t *)(v221 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v221, v209))), vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)v231), v203,
                          vaddq_f32(*(float32x4_t *)(v231 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v231, v208))),
                        v204,
                        vaddq_f32(*(float32x4_t *)(v231 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v231, v209)))));
          if (v215 >= 0xA)
          {
            v235 = v216 + 1;
            v236 = (float32x4_t *)(v213 + v214 * v212 + 4 * v211 + 24);
            v237 = (float32x4_t *)(v223 + 24);
            v238 = v231 + 12;
            v239 = (float32x4_t *)(v227 + 24);
            v240 = v221 + 12;
            v241 = 10;
            do
            {
              *v235++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v205, vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)((char *)v236 - 8)), v203, vaddq_f32(*(float32x4_t *)((char *)v236 - 12), *(float32x4_t *)((char *)v236 - 4))), v204, vaddq_f32(v236[-1], *v236))), v206, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)((char *)v237 - 8)), v203, vaddq_f32(*(float32x4_t *)((char *)v237 - 12), *(float32x4_t *)((char *)v237 - 4))), v204, vaddq_f32(v237[-1], *v237)),
                              vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)((char *)v239 - 8)), v203, vaddq_f32(*(float32x4_t *)((char *)v239 - 12), *(float32x4_t *)((char *)v239 - 4))), v204, vaddq_f32(v239[-1], *v239)))), v207, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)(v240 + 4)), v203, vaddq_f32(*(float32x4_t *)v240, *(float32x4_t *)(v240 + 8))), v204, vaddq_f32(*(float32x4_t *)(v240 - 4), *(float32x4_t *)(v240 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v202, *(float32x4_t *)(v238 + 4)), v203,
                                vaddq_f32(*(float32x4_t *)v238, *(float32x4_t *)(v238 + 8))),
                              v204,
                              vaddq_f32(*(float32x4_t *)(v238 - 4), *(float32x4_t *)(v238 + 12)))));
              v241 += 4;
              ++v236;
              ++v237;
              v238 += 16;
              ++v239;
              v240 += 16;
            }
            while (v241 <= v215);
            v234 = v241 - 6;
          }
          else
          {
            v234 = 4;
          }
          if (v234 < v215)
          {
            do
            {
              v242 = 0.0;
              for (mm = -2; mm != 3; ++mm)
              {
                if (mm >= 0)
                  v244 = mm;
                else
                  v244 = -mm;
                v245 = a3[v244 + 3].f32[0];
                v246 = result + 4 * mm * v198;
                v247 = v200 + v199 - v246;
                if (v199 >= v246)
                  v247 = result + 4 * mm * v198;
                v35 = v196 >= v246;
                v248 = v196 - v246;
                v36 = v248 != 0 && v35;
                v249 = v201 + v248;
                if (!v36)
                  v249 = v247;
                for (nn = -2; nn != 3; ++nn)
                {
                  if (nn >= 0)
                    v251 = nn;
                  else
                    v251 = -nn;
                  v252 = nn + v234;
                  if ((uint64_t)(nn + v234) < 0 || v252 >= (uint64_t)v215)
                  {
                    v253 = (unint64_t)v252 >> 63;
                    do
                    {
                      v254 = ~v252;
                      if ((v253 & 1) != 0)
                        v255 = 0;
                      else
                        v255 = 2 * v215;
                      v252 = v255 + v254;
                      v253 = (unint64_t)v252 >> 63;
                    }
                    while (v252 < 0 || v252 >= (uint64_t)v215);
                  }
                  v242 = v242 + (float)((float)(a3[v251].f32[0] * *(float *)(v249 + 4 * v252)) * v245);
                }
              }
              v216->f32[v234++] = v242;
            }
            while (v234 != v215);
          }
          ++v195;
        }
        while (v195 != v210);
        if (v12 < 5)
        {
          if (v12 < 3)
            return result;
        }
        else
        {
          v488 = v209;
          v492 = v208;
          v505 = (_QWORD *)(v8[2] >> 2);
          v506[0] = a5;
          v497 = a2;
          v498 = v8;
          v499 = (uint64_t *)&v505;
          v500 = (unint64_t)a3;
          v501 = (float32x4_t **)v506;
          if (a4)
          {
            v256 = a4;
          }
          else
          {
            v494 = 0;
            v495 = &v494;
            v256 = &v494;
          }
          sub_236881408((uint64_t)v256, (v12 - 2), (uint64_t)&v497);
          v209 = v488;
          v208 = v492;
        }
        v424 = v12 - 2;
        v426 = v8[2];
        v425 = v8[3];
        v427 = v426 >> 2;
        v428 = v425 + (a2[3] - 1) * v426;
        v429 = -(uint64_t)(v426 >> 2);
        v430 = v428 + 4 * v427;
        v431 = v425 - 4 * v427;
        v432 = *a3;
        v433 = a3[1];
        v434 = a3[2];
        v435 = a3[3];
        v436 = a3[4];
        v437 = a3[5];
        do
        {
          v438 = *a2;
          v439 = a2[1] + v424;
          v441 = v8[2];
          v440 = v8[3];
          v442 = v440 + v441 * v439 + 4 * *a2;
          result = a2[2];
          v443 = (float32x4_t *)(a5[3] + a5[2] * v424);
          v444 = v442 + 8 * v429;
          v445 = v430 + v428 - v444;
          if (v428 >= v444)
            v445 = v442 + 8 * v429;
          v35 = v425 >= v444;
          v446 = v425 - v444;
          v36 = v446 != 0 && v35;
          v447 = v431 + v446;
          if (v36)
            v445 = v447;
          v448 = v442 + 4 * v429;
          v449 = v430 + v428 - v448;
          if (v428 >= v448)
            v449 = v442 + 4 * v429;
          v35 = v425 >= v448;
          v450 = v425 - v448;
          v36 = v450 != 0 && v35;
          v451 = v431 + v450;
          if (v36)
            v449 = v451;
          v452 = v442 + 4 * v427;
          v453 = v430 + v428 - v452;
          if (v428 >= v452)
            v453 = v442 + 4 * v427;
          v35 = v425 >= v452;
          v454 = v425 - v452;
          v36 = v454 != 0 && v35;
          v455 = v431 + v454;
          if (v36)
            v453 = v455;
          v456 = v442 + 8 * v427;
          v457 = v430 + v428 - v456;
          if (v428 >= v456)
            v457 = v442 + 8 * v427;
          v35 = v425 >= v456;
          v458 = v425 - v456;
          v36 = v458 != 0 && v35;
          v459 = v431 + v458;
          if (v36)
            v457 = v459;
          *v443 = vmlaq_f32(vmlaq_f32(vmulq_f32(v435, vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v442), v433, vaddq_f32(*(float32x4_t *)(v442 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v442, v208))), v434, vaddq_f32(*(float32x4_t *)(v442 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v442, v209)))), v436, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v449), v433, vaddq_f32(*(float32x4_t *)(v449 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v449, v208))), v434, vaddq_f32(*(float32x4_t *)(v449 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v449, v209))),
                        vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v453), v433, vaddq_f32(*(float32x4_t *)(v453 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v453, v208))), v434, vaddq_f32(*(float32x4_t *)(v453 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v453, v209))))), v437, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v445), v433, vaddq_f32(*(float32x4_t *)(v445 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v445, v208))), v434, vaddq_f32(*(float32x4_t *)(v445 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v445, v209))), vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)v457), v433,
                          vaddq_f32(*(float32x4_t *)(v457 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v457, v208))),
                        v434,
                        vaddq_f32(*(float32x4_t *)(v457 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v457, v209)))));
          if (result >= 0xA)
          {
            v461 = v443 + 1;
            v462 = (float32x4_t *)(v440 + v441 * v439 + 4 * v438 + 24);
            v463 = (float32x4_t *)(v449 + 24);
            v464 = v457 + 12;
            v465 = (float32x4_t *)(v453 + 24);
            v466 = v445 + 12;
            v467 = 10;
            do
            {
              *v461++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v435, vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)((char *)v462 - 8)), v433, vaddq_f32(*(float32x4_t *)((char *)v462 - 12), *(float32x4_t *)((char *)v462 - 4))), v434, vaddq_f32(v462[-1], *v462))), v436, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)((char *)v463 - 8)), v433, vaddq_f32(*(float32x4_t *)((char *)v463 - 12), *(float32x4_t *)((char *)v463 - 4))), v434, vaddq_f32(v463[-1], *v463)),
                              vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)((char *)v465 - 8)), v433, vaddq_f32(*(float32x4_t *)((char *)v465 - 12), *(float32x4_t *)((char *)v465 - 4))), v434, vaddq_f32(v465[-1], *v465)))), v437, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)(v466 + 4)), v433, vaddq_f32(*(float32x4_t *)v466, *(float32x4_t *)(v466 + 8))), v434, vaddq_f32(*(float32x4_t *)(v466 - 4), *(float32x4_t *)(v466 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v432, *(float32x4_t *)(v464 + 4)), v433,
                                vaddq_f32(*(float32x4_t *)v464, *(float32x4_t *)(v464 + 8))),
                              v434,
                              vaddq_f32(*(float32x4_t *)(v464 - 4), *(float32x4_t *)(v464 + 12)))));
              v467 += 4;
              ++v462;
              ++v463;
              v464 += 16;
              ++v465;
              v466 += 16;
            }
            while (v467 <= result);
            v460 = v467 - 6;
          }
          else
          {
            v460 = 4;
          }
          if (v460 < result)
          {
            do
            {
              v468 = 0.0;
              for (i1 = -2; i1 != 3; ++i1)
              {
                if (i1 >= 0)
                  v470 = i1;
                else
                  v470 = -i1;
                v471 = a3[v470 + 3].f32[0];
                v472 = v442 + 4 * i1 * v427;
                v473 = v430 + v428 - v472;
                if (v428 >= v472)
                  v473 = v442 + 4 * i1 * v427;
                v35 = v425 >= v472;
                v474 = v425 - v472;
                v36 = v474 != 0 && v35;
                v475 = v431 + v474;
                if (!v36)
                  v475 = v473;
                for (i2 = -2; i2 != 3; ++i2)
                {
                  if (i2 >= 0)
                    v477 = i2;
                  else
                    v477 = -i2;
                  v478 = i2 + v460;
                  if ((uint64_t)(i2 + v460) < 0 || v478 >= (uint64_t)result)
                  {
                    v479 = (unint64_t)v478 >> 63;
                    do
                    {
                      v480 = ~v478;
                      if ((v479 & 1) != 0)
                        v481 = 0;
                      else
                        v481 = 2 * result;
                      v478 = v481 + v480;
                      v479 = (unint64_t)v478 >> 63;
                    }
                    while (v478 < 0 || v478 >= (uint64_t)result);
                  }
                  v468 = v468 + (float)((float)(a3[v477].f32[0] * *(float *)(v475 + 4 * v478)) * v471);
                }
              }
              v443->f32[v460++] = v468;
            }
            while (v460 != result);
          }
          ++v424;
        }
        while (v424 < v12);
      }
      else
      {
        if (v12 < 1)
          return result;
        v15 = 0;
        v17 = *(_QWORD *)(result + 16);
        v16 = *(_QWORD *)(result + 24);
        v18 = v17 >> 2;
        v19 = v16 + v17 * v14;
        v20 = v19 + 4 * (v17 >> 2);
        v21 = v16 - 4 * v18;
        v22 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA70, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
        v23 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFA90, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
        v24 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFAB0, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
        v25 = vorrq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)xmmword_2368AFAA0, (int8x16_t)xmmword_2368AFA60), 2uLL), (int8x16_t)xmmword_2368AFA80);
        v26 = 1;
        if (v12 != 1)
          v26 = 2;
        do
        {
          v27 = *a2;
          v28 = a2[1] + v15;
          v30 = v8[2];
          v29 = v8[3];
          v31 = v29 + v30 * v28 + 4 * *a2;
          v32 = a2[2];
          result = a5[3] + a5[2] * v15;
          v33 = v31 - 8 * v18;
          v34 = v20 + v19 - v33;
          if (v19 >= v33)
            v34 = v31 - 8 * v18;
          v35 = v16 >= v33;
          v37 = v16 - v33;
          v36 = v37 != 0 && v35;
          v38 = v21 + v37;
          if (!v36)
            v38 = v34;
          v39 = v31 - 4 * v18;
          v40 = v20 + v19 - v39;
          if (v19 >= v39)
            v40 = v31 - 4 * v18;
          v35 = v16 >= v39;
          v41 = v16 - v39;
          v36 = v41 != 0 && v35;
          v42 = v21 + v41;
          if (v36)
            v43 = v42;
          else
            v43 = v40;
          v44 = v31 + 4 * v18;
          v45 = v20 + v19 - v44;
          if (v19 >= v44)
            v45 = v31 + 4 * v18;
          v35 = v16 >= v44;
          v46 = v16 - v44;
          v36 = v46 != 0 && v35;
          v47 = v21 + v46;
          if (v36)
            v45 = v47;
          v48 = v31 + 8 * v18;
          v49 = v20 + v19 - v48;
          if (v19 >= v48)
            v49 = v31 + 8 * v18;
          v35 = v16 >= v48;
          v50 = v16 - v48;
          v36 = v50 != 0 && v35;
          v51 = v21 + v50;
          if (!v36)
            v51 = v49;
          v53 = *a3;
          v52 = a3[1];
          v54 = a3[2];
          v55 = a3[3];
          v57 = a3[4];
          v56 = a3[5];
          *(float32x4_t *)result = vmlaq_f32(vmlaq_f32(vmulq_f32(v55, vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v31), v52, vaddq_f32(*(float32x4_t *)(v31 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v31, v22))), v54, vaddq_f32(*(float32x4_t *)(v31 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v31, v23)))), v57, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v43),
                                             v52,
                                             vaddq_f32(*(float32x4_t *)(v43 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v43, v22))), v54, vaddq_f32(*(float32x4_t *)(v43 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v43, v23))), vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v45), v52, vaddq_f32(*(float32x4_t *)(v45 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v45, v22))), v54, vaddq_f32(*(float32x4_t *)(v45 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v45, v23))))), v56, vaddq_f32(
                                       vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v38), v52, vaddq_f32(*(float32x4_t *)(v38 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v38, v22))), v54, vaddq_f32(*(float32x4_t *)(v38 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v38, v23))), vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v51), v52, vaddq_f32(*(float32x4_t *)(v51 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v51, v22))), v54, vaddq_f32(
                                           *(float32x4_t *)(v51 + 8),
                                           (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v51, v23)))));
          if (v32 >= 0xA)
          {
            v59 = (float32x4_t *)(result + 16);
            v60 = (float32x4_t *)(v29 + v30 * v28 + 4 * v27 + 24);
            v61 = (float32x4_t *)(v43 + 24);
            v62 = v51 + 12;
            v63 = (float32x4_t *)(v45 + 24);
            v64 = v38 + 12;
            v65 = 10;
            do
            {
              *v59++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v55, vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)((char *)v60 - 8)), v52, vaddq_f32(*(float32x4_t *)((char *)v60 - 12), *(float32x4_t *)((char *)v60 - 4))), v54, vaddq_f32(v60[-1], *v60))), v57, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)((char *)v61 - 8)), v52, vaddq_f32(*(float32x4_t *)((char *)v61 - 12), *(float32x4_t *)((char *)v61 - 4))), v54, vaddq_f32(v61[-1], *v61)),
                             vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)((char *)v63 - 8)), v52, vaddq_f32(*(float32x4_t *)((char *)v63 - 12), *(float32x4_t *)((char *)v63 - 4))), v54, vaddq_f32(v63[-1], *v63)))), v56, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v64 + 4)), v52, vaddq_f32(*(float32x4_t *)v64, *(float32x4_t *)(v64 + 8))), v54, vaddq_f32(*(float32x4_t *)(v64 - 4), *(float32x4_t *)(v64 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v62 + 4)), v52,
                               vaddq_f32(*(float32x4_t *)v62, *(float32x4_t *)(v62 + 8))),
                             v54,
                             vaddq_f32(*(float32x4_t *)(v62 - 4), *(float32x4_t *)(v62 + 12)))));
              v65 += 4;
              ++v60;
              ++v61;
              v62 += 16;
              ++v63;
              v64 += 16;
            }
            while (v65 <= v32);
            v58 = v65 - 6;
            v12 = v493;
          }
          else
          {
            v58 = 4;
          }
          v66 = (float32x4_t *)(v31 + 4 * v58);
          *(float32x4_t *)(result + 4 * v58) = vmlaq_f32(vmlaq_f32(vmulq_f32(v55, vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *v66), v52, vaddq_f32(*(float32x4_t *)((char *)v66 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v66, v25))), v54, vaddq_f32(*(float32x4_t *)((char *)v66 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v66, v24)))), v57, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v43 + 4 * v58)),
                                                         v52,
                                                         vaddq_f32(*(float32x4_t *)(v43 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v43 + 4 * v58), v25))), v54, vaddq_f32(*(float32x4_t *)(v43 + 4 * v58 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v43 + 4 * v58), v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v45 + 4 * v58)), v52, vaddq_f32(*(float32x4_t *)(v45 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v45 + 4 * v58), v25))), v54, vaddq_f32(*(float32x4_t *)(v45 + 4 * v58 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v45 + 4 * v58), v24))))), v56, vaddq_f32(
                                                   vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v38 + 4 * v58)), v52, vaddq_f32(*(float32x4_t *)(v38 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v38 + 4 * v58), v25))), v54, vaddq_f32(*(float32x4_t *)(v38 + 4 * v58 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v38 + 4 * v58), v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(v53, *(float32x4_t *)(v51 + 4 * v58)), v52, vaddq_f32(*(float32x4_t *)(v51 + 4 * v58 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v51 + 4 * v58), v25))), v54, vaddq_f32(
                                                       *(float32x4_t *)(v51 + 4 * v58 - 8),
                                                       (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v51 + 4 * v58), v24)))));
          ++v15;
        }
        while (v15 != v26);
        if (v12 < 5)
        {
          if (v12 < 3)
            return result;
        }
        else
        {
          v482 = v25;
          v483 = v24;
          v485 = v23;
          v489 = v22;
          v505 = (_QWORD *)(v8[2] >> 2);
          v506[0] = a5;
          v497 = a2;
          v498 = v8;
          v499 = (uint64_t *)&v505;
          v500 = (unint64_t)a3;
          v501 = (float32x4_t **)v506;
          if (a4)
          {
            v67 = a4;
          }
          else
          {
            v494 = 0;
            v495 = &v494;
            v67 = &v494;
          }
          sub_236881264((uint64_t)v67, (v12 - 2), (uint64_t)&v497);
          v12 = v493;
          v23 = v485;
          v22 = v489;
          v25 = v482;
          v24 = v483;
        }
        v257 = v12 - 2;
        v259 = v8[2];
        v258 = v8[3];
        v260 = v259 >> 2;
        v261 = -(uint64_t)(v259 >> 2);
        v262 = v258 + (a2[3] - 1) * v259;
        v263 = v262 + 4 * v260;
        v264 = v258 - 4 * v260;
        do
        {
          v265 = *a2;
          v266 = a2[1] + v257;
          v268 = v8[2];
          v267 = v8[3];
          v269 = v267 + v268 * v266 + 4 * *a2;
          v270 = a2[2];
          v271 = (float32x4_t *)(a5[3] + a5[2] * v257);
          v272 = v269 + 8 * v261;
          v273 = v263 + v262 - v272;
          if (v262 >= v272)
            v273 = v269 + 8 * v261;
          v35 = v258 >= v272;
          v274 = v258 - v272;
          v36 = v274 != 0 && v35;
          v275 = v264 + v274;
          if (!v36)
            v275 = v273;
          v276 = v269 + 4 * v261;
          v277 = v263 + v262 - v276;
          if (v262 >= v276)
            v277 = v269 + 4 * v261;
          v35 = v258 >= v276;
          v278 = v258 - v276;
          v36 = v278 != 0 && v35;
          v279 = v264 + v278;
          if (v36)
            v280 = v279;
          else
            v280 = v277;
          v281 = v269 + 4 * v260;
          v282 = v263 + v262 - v281;
          if (v262 >= v281)
            v282 = v269 + 4 * v260;
          v35 = v258 >= v281;
          v283 = v258 - v281;
          v36 = v283 != 0 && v35;
          v284 = v264 + v283;
          if (v36)
            v282 = v284;
          v285 = v269 + 8 * v260;
          v286 = v263 + v262 - v285;
          if (v262 >= v285)
            v286 = v269 + 8 * v260;
          v35 = v258 >= v285;
          v287 = v258 - v285;
          v36 = v287 != 0 && v35;
          v288 = v264 + v287;
          if (!v36)
            v288 = v286;
          v290 = *a3;
          v289 = a3[1];
          v291 = a3[2];
          v292 = a3[3];
          v294 = a3[4];
          v293 = a3[5];
          *v271 = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v269), v289, vaddq_f32(*(float32x4_t *)(v269 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v269, v22))), v291, vaddq_f32(*(float32x4_t *)(v269 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v269, v23)))), v294, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v280), v289, vaddq_f32(*(float32x4_t *)(v280 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v280, v22))), v291, vaddq_f32(*(float32x4_t *)(v280 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v280, v23))),
                        vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v282), v289, vaddq_f32(*(float32x4_t *)(v282 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v282, v22))), v291, vaddq_f32(*(float32x4_t *)(v282 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v282, v23))))), v293, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v275), v289, vaddq_f32(*(float32x4_t *)(v275 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v275, v22))), v291, vaddq_f32(*(float32x4_t *)(v275 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v275, v23))), vmlaq_f32(vmlaq_f32(vmulq_f32(*a3, *(float32x4_t *)v288), v289,
                          vaddq_f32(*(float32x4_t *)(v288 + 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v288, v22))),
                        v291,
                        vaddq_f32(*(float32x4_t *)(v288 + 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v288, v23)))));
          if (v270 >= 0xA)
          {
            v296 = v271 + 1;
            v297 = (float32x4_t *)(v267 + v268 * v266 + 4 * v265 + 24);
            v298 = (float32x4_t *)(v280 + 24);
            v299 = v288 + 12;
            v300 = (float32x4_t *)(v282 + 24);
            v301 = v275 + 12;
            v302 = 10;
            do
            {
              *v296++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)((char *)v297 - 8)), v289, vaddq_f32(*(float32x4_t *)((char *)v297 - 12), *(float32x4_t *)((char *)v297 - 4))), v291, vaddq_f32(v297[-1], *v297))), v294, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)((char *)v298 - 8)), v289, vaddq_f32(*(float32x4_t *)((char *)v298 - 12), *(float32x4_t *)((char *)v298 - 4))), v291, vaddq_f32(v298[-1], *v298)),
                              vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)((char *)v300 - 8)), v289, vaddq_f32(*(float32x4_t *)((char *)v300 - 12), *(float32x4_t *)((char *)v300 - 4))), v291, vaddq_f32(v300[-1], *v300)))), v293, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v301 + 4)), v289, vaddq_f32(*(float32x4_t *)v301, *(float32x4_t *)(v301 + 8))), v291, vaddq_f32(*(float32x4_t *)(v301 - 4), *(float32x4_t *)(v301 + 12))), vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v299 + 4)), v289,
                                vaddq_f32(*(float32x4_t *)v299, *(float32x4_t *)(v299 + 8))),
                              v291,
                              vaddq_f32(*(float32x4_t *)(v299 - 4), *(float32x4_t *)(v299 + 12)))));
              v302 += 4;
              ++v297;
              ++v298;
              v299 += 16;
              ++v300;
              v301 += 16;
            }
            while (v302 <= v270);
            v295 = v302 - 6;
          }
          else
          {
            v295 = 4;
          }
          v303 = (float32x4_t *)(v269 + 4 * v295);
          v304 = vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v275 + 4 * v295)), v289, vaddq_f32(*(float32x4_t *)(v275 + 4 * v295 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v275 + 4 * v295), v25))), v291, vaddq_f32(*(float32x4_t *)(v275 + 4 * v295 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v275 + 4 * v295), v24)));
          result = v288 + 4 * v295;
          *(float32x4_t *)((char *)v271 + 4 * v295) = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *v303), v289, vaddq_f32(*(float32x4_t *)((char *)v303 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v303, v25))), v291, vaddq_f32(*(float32x4_t *)((char *)v303 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)v303, v24)))), v294, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v280 + 4 * v295)),
                                                                v289,
                                                                vaddq_f32(*(float32x4_t *)(v280 + 4 * v295 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v280 + 4 * v295), v25))), v291, vaddq_f32(*(float32x4_t *)(v280 + 4 * v295 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v280 + 4 * v295), v24))), vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)(v282 + 4 * v295)), v289, vaddq_f32(*(float32x4_t *)(v282 + 4 * v295 - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v282 + 4 * v295), v25))),
                                                              v291,
                                                              vaddq_f32(*(float32x4_t *)(v282 + 4 * v295 - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)(v282 + 4 * v295), v24))))), v293, vaddq_f32(v304, vmlaq_f32(vmlaq_f32(vmulq_f32(v290, *(float32x4_t *)result), v289, vaddq_f32(*(float32x4_t *)(result - 4), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v25))), v291, vaddq_f32(*(float32x4_t *)(result - 8), (float32x4_t)vqtbl1q_s8(*(int8x16_t *)result, v24)))));
          ++v257;
        }
        while (v257 < v12);
      }
    }
  }
  else
  {
    v494 = 0;
    v495 = 0;
    *(_QWORD *)&v9 = *a5;
    *((_QWORD *)&v9 + 1) = HIDWORD(*a5);
    v496 = v9;
    v504 = a3;
    v505 = a5;
    v503 = a3 + 3;
    v10 = *((unsigned int *)a2 + 6);
    v497 = &v494;
    v498 = &v505;
    v499 = a2;
    v500 = result;
    v501 = &v504;
    v502 = &v503;
    if (a4)
    {
      v11 = a4;
    }
    else
    {
      v506[0] = 0;
      v506[1] = v506;
      v11 = v506;
    }
    return sub_236884840((uint64_t)v11, v10, (uint64_t)&v497);
  }
  return result;
}

uint64_t sub_236884840(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v5[2];

  if ((_DWORD)a2)
  {
    v3 = a2;
    v5[0] = sub_2367CAAA0;
    v5[1] = a3;
    if (*(_QWORD *)result)
    {
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))result)(*(_QWORD *)(result + 8), v5, sub_2368849D0, sub_2368848C0, 0, a2);
    }
    else
    {
      for (i = 0; i != v3; ++i)
        result = sub_2368848C0((uint64_t)v5, i);
    }
  }
  return result;
}

uint64_t sub_2368848C0(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  uint64_t i;
  int v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t k;
  int v27;
  uint64_t m;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD **)(v2 + 16);
  v4 = v3[2];
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(**(_QWORD **)(v2 + 8) + 24)
       + *(_QWORD *)(**(_QWORD **)(v2 + 8) + 16) * (*(_QWORD *)(*(_QWORD *)v2 + 8) + a2)
       + 4 * **(_QWORD **)v2;
    v7 = *(unsigned int **)(v2 + 24);
    v8 = **(_QWORD **)(v2 + 32);
    v9 = **(_QWORD **)(v2 + 40);
    v10 = *v7;
    v11 = v7[1];
    v14 = v7 + 4;
    v13 = *((_QWORD *)v7 + 2);
    v12 = *((_QWORD *)v14 + 1);
    v16 = v3;
    v15 = *v3;
    result = 2 * v10;
    v17 = v16[1] + a2;
    do
    {
      v18 = 0.0;
      for (i = -2; i != 3; ++i)
      {
        if ((int)i >= 0)
          v20 = i;
        else
          v20 = -(int)i;
        for (j = v17 + i; j >= v11; j = v23 + v22)
        {
          v22 = ~j;
          if (j >= 0)
            v23 = 2 * v11;
          else
            v23 = 0;
        }
        v24 = *(float *)(v9 + 4 * (4 * v20));
        v25 = v12 + j * v13;
        for (k = -2; k != 3; ++k)
        {
          if ((int)k >= 0)
            v27 = k;
          else
            v27 = -(int)k;
          for (m = v5 + v15 + k; m >= v10; m = v30 + v29)
          {
            v29 = ~m;
            if (m >= 0)
              v30 = 2 * v10;
            else
              v30 = 0;
          }
          v18 = v18 + (float)((float)(*(float *)(v8 + 4 * (4 * v27)) * *(float *)(v25 + 4 * m)) * v24);
        }
      }
      *(float *)(v6 + 4 * v5++) = v18;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t sub_2368849D0(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_2368849F4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v10 = a5;
  v7 = *(unsigned int *)(a2 + 24);
  v9[0] = a2;
  v9[1] = a1;
  v9[2] = a3;
  v9[3] = a6;
  v9[4] = &v10;
  if (a4)
  {
    v8 = a4;
  }
  else
  {
    v11[0] = 0;
    v11[1] = v11;
    v8 = v11;
  }
  sub_236884A4C((uint64_t)v8, v7, (uint64_t)v9);
}

void sub_236884A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v5[2];

  if ((_DWORD)a2)
  {
    v3 = a2;
    v5[0] = sub_2367CAAA0;
    v5[1] = a3;
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v5, sub_236885108, sub_236884ACC, 0, a2);
    }
    else
    {
      for (i = 0; i != v3; ++i)
        sub_236884ACC((uint64_t)v5, i);
    }
  }
}

void sub_236884ACC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  _OWORD *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t v79;
  uint64_t v80;
  unint64_t v81;
  float *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unint64_t **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 8) + a2;
  if (v5 < 2 || v5 >= *(unsigned int *)(v4 + 4) - 2)
  {
    v21 = *(float32x4_t **)(v2 + 16);
    v20 = *(uint64_t **)(v2 + 24);
    v23 = *v20;
    v22 = v20[1];
    v24 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 24);
    v108 = v23;
    v110 = v24;
    v106 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 16) * (v22 + a2);
    v25 = v24 + v106 + 4 * v23;
    v26 = *v3;
    v27 = v3[2] + *v3;
    if (v27 >= 4)
      v28 = 4;
    else
      v28 = v3[2] + *v3;
    v29 = v28 - v26;
    if (v28 <= v26)
    {
      v29 = 0;
    }
    else
    {
      v30 = (float *)(v24 + v106 + 4 * v23);
      do
        *v30++ = sub_23688512C((unsigned int *)v4, v26++, v5, v21->f32);
      while (v28 != v26);
    }
    if (v26 + 6 <= v27)
    {
      v32 = *v21;
      v33 = v21[1];
      v34 = v21[2];
      v35 = v21[3];
      v37 = v21[4];
      v36 = v21[5];
      v38 = *(unsigned int *)(v4 + 4);
      v40 = *(_QWORD *)(v4 + 16);
      v39 = *(_QWORD *)(v4 + 24);
      v42 = v5 < 2 || v5 - 2 >= (uint64_t)v38;
      v43 = v5 + 2 >= (uint64_t)v38 || v5 < -2;
      v44 = v5 > (uint64_t)v38 || v5 < 1;
      v45 = v5 + 1 >= (uint64_t)v38 || v5 < -1;
      do
      {
        v46 = v5;
        if (v5 >= v38)
        {
          v46 = v5;
          do
          {
            v47 = ~v46;
            if (v46 >= 0)
              v48 = 2 * v38;
            else
              v48 = 0;
            v46 = v48 + v47;
          }
          while (v46 >= v38);
        }
        v49 = v5 - 2;
        if (v42)
        {
          LOBYTE(v50) = v5 < 2;
          v49 = v5 - 2;
          do
          {
            v51 = ~v49;
            if ((v50 & 1) != 0)
              v52 = 0;
            else
              v52 = 2 * v38;
            v49 = v52 + v51;
            v50 = v49 >> 63;
          }
          while (v49 >= v38);
        }
        v53 = v5 + 2;
        if (v43)
        {
          LOBYTE(v54) = v5 < -2;
          v53 = v5 + 2;
          do
          {
            v55 = ~v53;
            if ((v54 & 1) != 0)
              v56 = 0;
            else
              v56 = 2 * v38;
            v53 = v56 + v55;
            v54 = v53 >> 63;
          }
          while (v53 >= v38);
        }
        v57 = v5 - 1;
        if (v44)
        {
          LOBYTE(v58) = v5 < 1;
          v57 = v5 - 1;
          do
          {
            v59 = ~v57;
            if ((v58 & 1) != 0)
              v60 = 0;
            else
              v60 = 2 * v38;
            v57 = v60 + v59;
            v58 = v57 >> 63;
          }
          while (v57 >= v38);
        }
        v61 = v5 + 1;
        if (v45)
        {
          LOBYTE(v62) = v5 < -1;
          v61 = v5 + 1;
          do
          {
            v63 = ~v61;
            if ((v62 & 1) != 0)
              v64 = 0;
            else
              v64 = 2 * v38;
            v61 = v64 + v63;
            v62 = v61 >> 63;
          }
          while (v61 >= v38);
        }
        v31 = v26 + 4;
        v65 = (_OWORD *)(v39 + v46 * v40 + 4 * v26);
        v66 = *(float32x4_t *)((char *)v65 - 8);
        v67 = *(float32x4_t *)((char *)v65 + 8);
        v68 = *(float32x4_t *)((char *)v65 - 4);
        v69 = *(float32x4_t *)((char *)v65 + 4);
        v70 = *(float32x4_t *)v65;
        v71 = (_OWORD *)(v39 + v49 * v40 + 4 * v26);
        v72 = *(float32x4_t *)((char *)v71 - 8);
        v73 = *(float32x4_t *)((char *)v71 + 8);
        v74 = *(float32x4_t *)((char *)v71 - 4);
        v75 = *(float32x4_t *)((char *)v71 + 4);
        v76 = *(float32x4_t *)v71;
        v77 = v39 + v53 * v40 + 4 * v26;
        v78 = v39 + v57 * v40 + 4 * v26;
        v79 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v34, vaddq_f32(v66, v67)), vaddq_f32(vmulq_f32(v33, vaddq_f32(v68, v69)), vmulq_f32(v32, v70))), vaddq_f32(vmulq_f32(v37, vaddq_f32(v72, v73)), vaddq_f32(vmulq_f32(v36, vaddq_f32(v74, v75)), vmulq_f32(v34, v76)))), vaddq_f32(vmulq_f32(v36, vaddq_f32(*(float32x4_t *)(v78 - 8), *(float32x4_t *)(v78 + 8))), vaddq_f32(vmulq_f32(v35, vaddq_f32(*(float32x4_t *)(v78 - 4), *(float32x4_t *)(v78 + 4))), vmulq_f32(v33, *(float32x4_t *)v78))));
        v80 = v39 + v61 * v40 + 4 * v26;
        *(float32x4_t *)(v25 + 4 * v29) = vaddq_f32(v79, vaddq_f32(vaddq_f32(vmulq_f32(v37, vaddq_f32(*(float32x4_t *)(v77 - 8), *(float32x4_t *)(v77 + 8))), vaddq_f32(vmulq_f32(v36, vaddq_f32(*(float32x4_t *)(v77 - 4), *(float32x4_t *)(v77 + 4))), vmulq_f32(v34, *(float32x4_t *)v77))), vaddq_f32(vmulq_f32(v36, vaddq_f32(*(float32x4_t *)(v80 - 8), *(float32x4_t *)(v80 + 8))), vaddq_f32(vmulq_f32(v35, vaddq_f32(*(float32x4_t *)(v80 - 4), *(float32x4_t *)(v80 + 4))),
                                                  vmulq_f32(v33, *(float32x4_t *)v80)))));
        v29 += 4;
        v81 = v26 + 10;
        v26 += 4;
      }
      while (v81 <= v27);
    }
    else
    {
      v31 = v26;
    }
    if (v31 < v27)
    {
      v82 = (float *)(v110 + v106 + 4 * v29 + 4 * v108);
      do
        *v82++ = sub_23688512C((unsigned int *)v4, v31++, v5, v21->f32);
      while (v27 != v31);
    }
  }
  else
  {
    v7 = *(float32x4_t **)(v2 + 16);
    v6 = *(uint64_t **)(v2 + 24);
    v8 = *v6;
    v9 = v6[1] + a2;
    v12 = (uint64_t *)(**(_QWORD **)(v2 + 32) + 16);
    v10 = *v12;
    v11 = v12[1];
    v13 = *v12 * v9;
    v14 = *v3;
    v15 = v3[2] + *v3;
    if (v15 >= 4)
      v16 = 4;
    else
      v16 = v3[2] + *v3;
    v17 = v16 - v14;
    if (v16 <= v14)
    {
      v17 = 0;
      v19 = *v3;
    }
    else
    {
      v107 = *v6;
      v109 = v11;
      v105 = v10 * v9;
      v18 = (float *)(v11 + v13 + 4 * v8);
      v19 = *v3;
      do
        *v18++ = sub_236885270((unsigned int *)v4, v19++, v5, v7->f32);
      while (v16 != v19);
      v8 = v107;
      v11 = v109;
      v13 = v105;
    }
    if (v19 + 6 <= v15)
    {
      v84 = 0;
      v85 = *(_QWORD *)(v4 + 16);
      v86 = *(_QWORD *)(v4 + 24);
      if (v14 <= v16)
        v87 = v16;
      else
        v87 = v14;
      v88 = v13 + 4 * v8 + 4 * v87;
      v89 = v85 * (v5 - 1);
      v90 = v11 + v88 - 4 * v14;
      v91 = *v7;
      v92 = v7[1];
      v93 = v7[2];
      v94 = v7[3];
      v96 = v7[4];
      v95 = v7[5];
      v97 = v85 * v5 + 4 * v19;
      v98 = v86 + v97;
      v99 = v86 + v85 * (v5 - 2) + 4 * v19;
      v100 = v86 + v85 * (v5 + 2) + 4 * v19;
      v101 = v97 + v85 + v86 - 8;
      v102 = v89 + 4 * v19 + v86 + 8;
      do
      {
        *(float32x4_t *)(v90 + v84) = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v93, vaddq_f32(*(float32x4_t *)(v98 + v84 - 8), *(float32x4_t *)(v98 + v84 + 8))), vaddq_f32(vmulq_f32(v92, vaddq_f32(*(float32x4_t *)(v98 + v84 - 4), *(float32x4_t *)(v98 + v84 + 4))), vmulq_f32(v91, *(float32x4_t *)(v98 + v84)))), vaddq_f32(vmulq_f32(v96, vaddq_f32(
                                                  *(float32x4_t *)(v99 + v84 - 8),
                                                  *(float32x4_t *)(v99 + v84 + 8))),
                                              vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v99 + v84 - 4), *(float32x4_t *)(v99 + v84 + 4))), vmulq_f32(v93, *(float32x4_t *)(v99 + v84))))), vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v102 + v84 - 16), *(float32x4_t *)(v102 + v84))), vaddq_f32(vmulq_f32(v94, vaddq_f32(*(float32x4_t *)(v102 + v84 - 12), *(float32x4_t *)(v102 + v84 - 4))), vmulq_f32(v92, *(float32x4_t *)(v102 + v84 - 8))))), vaddq_f32(vaddq_f32(
                                            vmulq_f32(v96, vaddq_f32(*(float32x4_t *)(v100 + v84 - 8), *(float32x4_t *)(v100 + v84 + 8))), vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v100 + v84 - 4), *(float32x4_t *)(v100 + v84 + 4))), vmulq_f32(v93, *(float32x4_t *)(v100 + v84)))), vaddq_f32(vmulq_f32(v95, vaddq_f32(*(float32x4_t *)(v101 + v84), *(float32x4_t *)(v101 + v84 + 16))), vaddq_f32(vmulq_f32(v94, vaddq_f32(
                                                  *(float32x4_t *)(v101 + v84 + 4),
                                                  *(float32x4_t *)(v101 + v84 + 12))),
                                              vmulq_f32(v92, *(float32x4_t *)(v101 + v84 + 8))))));
        v83 = v19 + 4;
        v17 += 4;
        v84 += 16;
        v103 = v19 + 10;
        v19 += 4;
      }
      while (v103 <= v15);
    }
    else
    {
      v83 = v19;
    }
    if (v83 < v15)
    {
      v104 = (float *)(v11 + v13 + 4 * v17 + 4 * v8);
      do
        *v104++ = sub_236885270((unsigned int *)v4, v83++, v5, v7->f32);
      while (v15 != v83);
    }
  }
}

uint64_t sub_236885108(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

float sub_23688512C(unsigned int *a1, uint64_t a2, int64_t a3, float *a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;

  v6 = a4[4];
  v7 = a4[8];
  v8 = a4[12];
  v9 = a4[20];
  v10 = a4[16];
  v11 = *a1;
  v12 = a1[1];
  v13 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v15 = sub_2368854A8(v13, v14, a2, a3, v11, v12, *a4, v6, v7);
  v16 = v15 + sub_2368854A8(v13, v14, a2, a3 - 2, v11, v12, v7, v9, v10);
  v17 = sub_2368854A8(v13, v14, a2, a3 + 2, v11, v12, v7, v9, v10);
  v18 = v16 + sub_2368854A8(v13, v14, a2, a3 - 1, v11, v12, v6, v8, v9);
  return v18 + (float)(v17 + sub_2368854A8(v13, v14, a2, a3 + 1, v11, v12, v6, v8, v9));
}

float sub_236885270(unsigned int *a1, uint64_t a2, uint64_t a3, float *a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v6 = a4[4];
  v7 = a4[8];
  v8 = a4[12];
  v9 = a4[20];
  v10 = a4[16];
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  v13 = *((_QWORD *)a1 + 3);
  v14 = sub_2368853A0(v12, v13, a2, a3, v11, *a4, v6, v7);
  v15 = v14 + sub_2368853A0(v12, v13, a2, a3 - 2, v11, v7, v9, v10);
  v16 = sub_2368853A0(v12, v13, a2, a3 + 2, v11, v7, v9, v10);
  v17 = v15 + sub_2368853A0(v12, v13, a2, a3 - 1, v11, v6, v8, v9);
  return v17 + (float)(v16 + sub_2368853A0(v12, v13, a2, a3 + 1, v11, v6, v8, v9));
}

float sub_2368853A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = a3 - 2;
  LOBYTE(v9) = a3 < 2;
  if (a3 < 2)
    goto LABEL_3;
  while (v8 >= a5)
  {
    do
    {
LABEL_3:
      v10 = ~v8;
      if ((v9 & 1) != 0)
        v11 = 0;
      else
        v11 = 2 * a5;
      v8 = v11 + v10;
      v9 = (unint64_t)v8 >> 63;
    }
    while (v8 < 0);
  }
  v12 = a2 + a1 * a4;
  v13 = a3 + 2;
  LOBYTE(v14) = a3 < -2;
  if (a3 < -2)
    goto LABEL_10;
  while (v13 >= a5)
  {
    do
    {
LABEL_10:
      v15 = ~v13;
      if ((v14 & 1) != 0)
        v16 = 0;
      else
        v16 = 2 * a5;
      v13 = v16 + v15;
      v14 = (unint64_t)v13 >> 63;
    }
    while (v13 < 0);
  }
  v17 = a3 - 1;
  LOBYTE(v18) = a3 < 1;
  if (a3 < 1 || a3 > a5)
  {
    do
    {
      v19 = ~v17;
      if ((v18 & 1) != 0)
        v20 = 0;
      else
        v20 = 2 * a5;
      v17 = v20 + v19;
      v18 = (unint64_t)v17 >> 63;
    }
    while (v17 < 0 || v17 >= a5);
  }
  v21 = *(float *)(v12 + 4 * v8);
  v22 = *(float *)(v12 + 4 * v13);
  v23 = a3 + 1;
  LOBYTE(v13) = a3 < -1;
  if (a3 < -1)
    goto LABEL_24;
  while (v23 >= a5)
  {
    do
    {
LABEL_24:
      v24 = ~v23;
      if ((v13 & 1) != 0)
        v25 = 0;
      else
        v25 = 2 * a5;
      v23 = v25 + v24;
      v13 = (unint64_t)v23 >> 63;
    }
    while (v23 < 0);
  }
  return (float)((float)(v21 + v22) * a8)
       + (float)((float)((float)(*(float *)(v12 + 4 * v17) + *(float *)(v12 + 4 * v23)) * a7)
               + (float)(*(float *)(v12 + 4 * a3) * a6));
}

float sub_2368854A8(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, float a7, float a8, float a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a4 < 0 || a4 >= a6)
  {
    v9 = (unint64_t)a4 >> 63;
    do
    {
      v10 = ~a4;
      if ((v9 & 1) != 0)
        v11 = 0;
      else
        v11 = 2 * a6;
      a4 = v11 + v10;
      v12 = v11 + v10 < 0;
      v9 = (unint64_t)(v11 + v10) >> 63;
    }
    while (v12 || a4 >= a6);
  }
  v13 = a3 - 2;
  LOBYTE(v14) = a3 < 2;
  if (a3 < 2)
    goto LABEL_11;
  while (v13 >= a5)
  {
    do
    {
LABEL_11:
      v15 = ~v13;
      if ((v14 & 1) != 0)
        v16 = 0;
      else
        v16 = 2 * a5;
      v13 = v16 + v15;
      v14 = (unint64_t)v13 >> 63;
    }
    while (v13 < 0);
  }
  v17 = a2 + a4 * a1;
  v18 = a3 + 2;
  LOBYTE(v19) = a3 < -2;
  if (a3 < -2)
    goto LABEL_18;
  while (v18 >= a5)
  {
    do
    {
LABEL_18:
      v20 = ~v18;
      if ((v19 & 1) != 0)
        v21 = 0;
      else
        v21 = 2 * a5;
      v18 = v21 + v20;
      v19 = (unint64_t)v18 >> 63;
    }
    while (v18 < 0);
  }
  v22 = a3 - 1;
  LOBYTE(v23) = a3 < 1;
  if (a3 < 1 || a3 > a5)
  {
    do
    {
      v24 = ~v22;
      if ((v23 & 1) != 0)
        v25 = 0;
      else
        v25 = 2 * a5;
      v22 = v25 + v24;
      v23 = (unint64_t)v22 >> 63;
    }
    while (v22 < 0 || v22 >= a5);
  }
  v26 = *(float *)(v17 + 4 * v13);
  v27 = *(float *)(v17 + 4 * v18);
  v28 = a3 + 1;
  LOBYTE(v18) = a3 < -1;
  if (a3 < -1)
    goto LABEL_32;
  while (v28 >= a5)
  {
    do
    {
LABEL_32:
      v29 = ~v28;
      if ((v18 & 1) != 0)
        v30 = 0;
      else
        v30 = 2 * a5;
      v28 = v30 + v29;
      v18 = (unint64_t)v28 >> 63;
    }
    while (v28 < 0);
  }
  return (float)((float)(v26 + v27) * a9)
       + (float)((float)((float)(*(float *)(v17 + 4 * v22) + *(float *)(v17 + 4 * v28)) * a8)
               + (float)(*(float *)(v17 + 4 * a3) * a7));
}

BOOL sub_2368855E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236885774, sub_236885678, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_236885678((uint64_t)v6, i);
  return 0;
}

uint64_t sub_236885678(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = a2;
  v4 = *v2[1];
  v5 = **v2;
  v6 = (_QWORD *)(v5 + (v4 << 6));
  v7 = v6[3] + v6[2] * a2;
  v8 = v6[11] + v6[10] * a2;
  v9 = v6[19] + v6[18] * v3;
  LODWORD(v6) = *(_DWORD *)v2[2];
  v10 = *(_QWORD *)(v5 + ((v4 + (int)v6 % 3) << 6) + 24) + *(_QWORD *)(v5 + ((v4 + (int)v6 % 3) << 6) + 16) * v3;
  v11 = *(_QWORD *)(v5 + ((v4 + ((int)v6 + (int)v6 / 3 + 1) % 3) << 6) + 24)
      + *(_QWORD *)(v5 + ((v4 + ((int)v6 + (int)v6 / 3 + 1) % 3) << 6) + 16) * v3;
  LODWORD(v6) = (_DWORD)v6
              + ((int)(((unint64_t)(1431655765 * (int)v6) >> 32) - (_DWORD)v6) >> 1)
              + ((((unint64_t)(1431655765 * (int)v6) >> 32) - (_DWORD)v6) >> 31)
              + 2;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))off_250800A60[*(int *)v2[3]])(v7, v8, v9, v10, v11, *(_QWORD *)(v5 + ((v4 + (int)v6 % 3) << 6) + 24) + *(_QWORD *)(v5 + ((v4 + (int)v6 % 3) << 6) + 16) * v3, *v2[4]);
}

uint64_t sub_236885774(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

__int128 *sub_236885798(__int128 *result, __int128 *a2, __int128 *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, unint64_t a7)
{
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;

  if (a7 < 4)
  {
    v19 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = *v8++;
      v15 = v14;
      v16 = *v9++;
      v17 = v16;
      v18 = *v10++;
      *v11++ = v15;
      *v12++ = v17;
      v19 = v7 + 4;
      *v13++ = v18;
      v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  v21 = a7 - v19;
  if (a7 > v19)
  {
    v22 = 0;
    v23 = (char *)a6 + 4 * v19;
    v24 = (char *)a5 + 4 * v19;
    v25 = (char *)a4 + 4 * v19;
    v26 = (char *)a3 + 4 * v19;
    v27 = (char *)a2 + 4 * v19;
    v28 = (char *)result + 4 * v19;
    do
    {
      v29 = *(_DWORD *)&v27[4 * v22];
      result = (__int128 *)*(unsigned int *)&v26[4 * v22];
      *(_DWORD *)&v25[4 * v22] = *(_DWORD *)&v28[4 * v22];
      *(_DWORD *)&v24[4 * v22] = v29;
      *(_DWORD *)&v23[4 * v22++] = (_DWORD)result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_23688583C(int32x4_t *result, __int128 *a2, int32x4_t *a3, int32x4_t *a4, _OWORD *a5, int32x4_t *a6, unint64_t a7)
{
  uint64_t v7;
  int32x4_t *v8;
  __int128 *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  _OWORD *v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  __int128 v17;
  __int128 v18;
  int32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int8 *v23;
  char *v24;
  __int8 *v25;
  __int8 *v26;
  char *v27;
  __int8 *v28;
  int v29;
  int v30;

  if (a7 < 4)
  {
    v14 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = v7 + 4;
      v15 = *v8++;
      v16 = v15;
      v17 = *v9++;
      v18 = v17;
      v19 = *v10++;
      *v11++ = v16;
      *v12++ = v18;
      *v13++ = vaddq_s32(v19, v16);
      v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  v21 = a7 - v14;
  if (a7 > v14)
  {
    v22 = 0;
    v23 = &a6->i8[4 * v14];
    v24 = (char *)a5 + 4 * v14;
    v25 = &a4->i8[4 * v14];
    v26 = &a3->i8[4 * v14];
    v27 = (char *)a2 + 4 * v14;
    v28 = &result->i8[4 * v14];
    do
    {
      v29 = *(_DWORD *)&v28[4 * v22];
      v30 = *(_DWORD *)&v27[4 * v22];
      result = (int32x4_t *)(*(_DWORD *)&v26[4 * v22] + v29);
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = (_DWORD)result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_2368858E8(int32x4_t *result, int32x4_t *a2, __int128 *a3, int32x4_t *a4, int32x4_t *a5, _OWORD *a6, unint64_t a7)
{
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  __int128 *v10;
  int32x4_t *v11;
  int32x4_t *v12;
  _OWORD *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int8 *v24;
  __int8 *v25;
  char *v26;
  __int8 *v27;
  __int8 *v28;
  int v29;
  int v30;

  if (a7 < 4)
  {
    v19 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = *v8++;
      v15 = v14;
      v16 = *v9++;
      v17 = v16;
      v18 = *v10++;
      *v11++ = v15;
      *v12++ = vaddq_s32(v17, v15);
      v19 = v7 + 4;
      *v13++ = v18;
      v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  v21 = a7 - v19;
  if (a7 > v19)
  {
    v22 = 0;
    v23 = (char *)a6 + 4 * v19;
    v24 = &a5->i8[4 * v19];
    v25 = &a4->i8[4 * v19];
    v26 = (char *)a3 + 4 * v19;
    v27 = &a2->i8[4 * v19];
    v28 = &result->i8[4 * v19];
    do
    {
      v29 = *(_DWORD *)&v28[4 * v22];
      result = (int32x4_t *)*(unsigned int *)&v26[4 * v22];
      v30 = *(_DWORD *)&v27[4 * v22] + v29;
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = (_DWORD)result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_236885994(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  int32x4_t *v12;
  int32x4_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int8 *v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  __int8 *v27;
  __int8 *v28;
  int v29;
  int v30;

  if (a7 < 4)
  {
    v19 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = *v8++;
      v15 = v14;
      v16 = *v9++;
      v17 = v16;
      v18 = *v10++;
      v19 = v7 + 4;
      *v11++ = v15;
      *v12++ = vaddq_s32(v17, v15);
      *v13++ = vaddq_s32(v18, v15);
      v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  v21 = a7 - v19;
  if (a7 > v19)
  {
    v22 = 0;
    v23 = &a6->i8[4 * v19];
    v24 = &a5->i8[4 * v19];
    v25 = &a4->i8[4 * v19];
    v26 = &a3->i8[4 * v19];
    v27 = &a2->i8[4 * v19];
    v28 = &result->i8[4 * v19];
    do
    {
      v29 = *(_DWORD *)&v28[4 * v22];
      result = (int32x4_t *)(*(_DWORD *)&v26[4 * v22] + v29);
      v30 = *(_DWORD *)&v27[4 * v22] + v29;
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = (_DWORD)result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_236885A48(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  int32x4_t *v12;
  int32x4_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int8 *v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  __int8 *v27;
  __int8 *v28;
  int v29;
  int v30;

  if (a7 < 4)
  {
    v19 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = *v8++;
      v15 = v14;
      v16 = *v9++;
      v17 = v16;
      v18 = *v10++;
      *v11++ = v15;
      *v12++ = vsraq_n_s32(v17, vaddq_s32(v18, v15), 1uLL);
      v19 = v7 + 4;
      *v13++ = v18;
      v20 = v7 + 7;
      v7 += 4;
    }
    while (v20 < a7);
  }
  v21 = a7 - v19;
  if (a7 > v19)
  {
    v22 = 0;
    v23 = &a6->i8[4 * v19];
    v24 = &a5->i8[4 * v19];
    v25 = &a4->i8[4 * v19];
    v26 = &a3->i8[4 * v19];
    v27 = &a2->i8[4 * v19];
    v28 = &result->i8[4 * v19];
    do
    {
      v29 = *(_DWORD *)&v28[4 * v22];
      result = (int32x4_t *)*(unsigned int *)&v26[4 * v22];
      v30 = *(_DWORD *)&v27[4 * v22] + (((int)result + v29) >> 1);
      *(_DWORD *)&v25[4 * v22] = v29;
      *(_DWORD *)&v24[4 * v22] = v30;
      *(_DWORD *)&v23[4 * v22++] = (_DWORD)result;
    }
    while (v21 != v22);
  }
  return result;
}

int32x4_t *sub_236885AFC(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  int32x4_t *v12;
  int32x4_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  __int8 *v27;
  __int8 *v28;
  __int8 *v29;
  int v30;
  int v31;

  if (a7 < 4)
  {
    v20 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = *v8++;
      v15 = v14;
      v16 = *v9++;
      v17 = v16;
      v18 = *v10++;
      v19 = vaddq_s32(v18, v15);
      *v11++ = v15;
      *v12++ = vsraq_n_s32(v17, vaddq_s32(v19, v15), 1uLL);
      v20 = v7 + 4;
      *v13++ = v19;
      v21 = v7 + 7;
      v7 += 4;
    }
    while (v21 < a7);
  }
  v22 = a7 - v20;
  if (a7 > v20)
  {
    v23 = 0;
    v24 = &a6->i8[4 * v20];
    v25 = &a5->i8[4 * v20];
    v26 = &a4->i8[4 * v20];
    v27 = &a3->i8[4 * v20];
    v28 = &a2->i8[4 * v20];
    v29 = &result->i8[4 * v20];
    do
    {
      v30 = *(_DWORD *)&v29[4 * v23];
      result = (int32x4_t *)(*(_DWORD *)&v27[4 * v23] + v30);
      v31 = *(_DWORD *)&v28[4 * v23] + (((int)result + v30) >> 1);
      *(_DWORD *)&v26[4 * v23] = v30;
      *(_DWORD *)&v25[4 * v23] = v31;
      *(_DWORD *)&v24[4 * v23++] = (_DWORD)result;
    }
    while (v22 != v23);
  }
  return result;
}

int32x4_t *sub_236885BB8(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, unint64_t a7)
{
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  int32x4_t *v12;
  int32x4_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int8 *v26;
  __int8 *v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  int v32;
  int v33;
  int v34;
  int v35;

  if (a7 < 4)
  {
    v22 = 0;
  }
  else
  {
    v7 = 0;
    v8 = result;
    v9 = a2;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    do
    {
      v14 = *v8++;
      v15 = v14;
      v16 = *v9++;
      v17 = v16;
      v18 = *v10++;
      v19 = vsubq_s32(v15, vshrq_n_s32(v18, 1uLL));
      v20 = vaddq_s32(v19, v18);
      v21 = vsubq_s32(v19, vshrq_n_s32(v17, 1uLL));
      *v11++ = vaddq_s32(v21, v17);
      *v12++ = v20;
      v22 = v7 + 4;
      *v13++ = v21;
      v23 = v7 + 7;
      v7 += 4;
    }
    while (v23 < a7);
  }
  v24 = a7 - v22;
  if (a7 > v22)
  {
    v25 = 0;
    v26 = &a6->i8[4 * v22];
    v27 = &a5->i8[4 * v22];
    v28 = &a4->i8[4 * v22];
    v29 = &a3->i8[4 * v22];
    v30 = &a2->i8[4 * v22];
    v31 = &result->i8[4 * v22];
    do
    {
      v32 = *(_DWORD *)&v30[4 * v25];
      v33 = *(_DWORD *)&v29[4 * v25];
      v34 = *(_DWORD *)&v31[4 * v25] - (v33 >> 1);
      result = (int32x4_t *)(v34 + v33);
      v35 = v34 - (v32 >> 1);
      *(_DWORD *)&v28[4 * v25] = v35 + v32;
      *(_DWORD *)&v27[4 * v25] = (_DWORD)result;
      *(_DWORD *)&v26[4 * v25++] = v35;
    }
    while (v24 != v25);
  }
  return result;
}

void sub_236885C88(uint64_t a1)
{
  sub_236889F40(a1);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_236885CAC(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;

  v2 = *(_QWORD *)(result + 384);
  v3 = a2 / v2;
  v4 = a2 % v2++;
  v5 = v4 + v3 * v2;
  v6 = v5 + 1;
  v7 = v5 + v2;
  v8 = v5 + v2 + 1;
  v9 = (unsigned __int8 *)(*(_QWORD *)(result + 448) + v5);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 & 0xFB, v9));
  v11 = (unsigned __int8 *)(*(_QWORD *)(result + 448) + v6);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 & 0xF7, v11));
  v13 = (unsigned __int8 *)(*(_QWORD *)(result + 448) + v7);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 & 0xFD, v13));
  v15 = (unsigned __int8 *)(*(_QWORD *)(result + 448) + v8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 & 0xFE, v15));
  return result;
}

void sub_236885D30(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v5 = **(_QWORD **)(a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v7 = v6 - v5;
  if (v7)
  {
    if ((unint64_t)v7 >= 0x6666666666666661)
      sub_2367C3440();
    v11 = v7 >> 4;
    v12 = (unint64_t *)sub_2367DC0A4(v7 >> 4);
    *a4 = v12;
    a4[2] = &v12[5 * v13];
    v14 = 40 * ((40 * v11 - 40) / 0x28uLL) + 40;
    bzero(v12, v14);
    a4[1] = (unint64_t *)((char *)v12 + v14);
    v15 = *(uint64_t **)(a1 + 32);
    v17 = *v15;
    v16 = v15[1];
    v18 = v16 - *v15;
    if (v16 != *v15)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = a2 / v19;
      v21 = a2 / v19 * v19 - a2;
      if (*(_BYTE *)(a1 + 248))
        v22 = a2;
      else
        v22 = a3;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 480) + 24 * v22);
      v24 = v18 >> 4;
      if (v24 <= 1)
        v24 = 1;
      v25 = v12 + 2;
      v26 = (_QWORD *)(v17 + 8);
      do
      {
        v27 = *(_QWORD *)(a1 + 504);
        v28 = *(_QWORD *)(a1 + 512);
        v29 = *(_QWORD *)(a1 + 208) << *(_QWORD *)(a1 + 472);
        v30 = *(v26 - 1);
        v31 = v29 >> v30;
        v32 = v29 >> *v26;
        v33 = (*(_QWORD *)(a1 + 96) + (1 << v30) - 1) / (unint64_t)(1 << v30) + v21 * v31 + v27;
        v34 = (*(_QWORD *)(a1 + 104) + (1 << *v26) - 1) / (unint64_t)(1 << *v26) - v32 * v20 + v28;
        v35 = v33 - v27;
        if (v33 < v27)
          v35 = 0;
        if (v31 + v27 <= v33)
          v36 = v31;
        else
          v36 = v35;
        v37 = (*(_QWORD *)(a1 + 104) + (1 << *v26) - 1) / (unint64_t)(1 << *v26) - v32 * v20;
        if (v34 < v28)
          v37 = 0;
        if (v32 + v28 > v34)
          v32 = v37;
        *(v25 - 2) = v23;
        *(v25 - 1) = v27;
        *v25 = v28;
        v25[1] = v36;
        v25[2] = v32;
        v23 += 40;
        v25 += 5;
        v26 += 2;
        --v24;
      }
      while (v24);
    }
  }
}

uint64_t sub_236885ED8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  unsigned __int8 *v110;
  unsigned __int8 v111;
  unsigned __int8 *v112;
  uint64_t *v113;
  uint64_t *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  char *v141;
  char *v142;
  uint64_t v143;
  __int128 *v145;
  uint64_t v146;
  BOOL v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v153;
  char *v154;
  BOOL v155;
  __int128 *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  size_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  size_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  int *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  unint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  __int128 v276;
  int64x2_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  int *v295;
  char v296;
  int v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t *v301;
  char *v302;
  size_t v303;
  unint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  _QWORD *v307;
  char *v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  char *v322;
  char *v323;
  void *v324;
  void *v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  _QWORD *v329;
  _QWORD *v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  BOOL v334;
  unint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  int v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int *v359;
  int *v360;
  int *v361;
  int v362;
  int *v363;
  int v364;
  int v365;
  BOOL v366;
  int v367;
  int v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  BOOL v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  int v428;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  int v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  int v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t *v474;
  unint64_t v475;
  int v476;
  unint64_t v477;
  uint64_t v478;
  _QWORD v479[4];
  _QWORD v480[4];
  _QWORD v481[4];
  _QWORD v482[4];
  _QWORD v483[4];
  _QWORD v484[4];
  _QWORD v485[4];
  _QWORD v486[4];
  _QWORD v487[4];
  void *__p;
  _BYTE *v489;
  int64x2_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  char *v501;
  char *v502;
  char *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  _BYTE v508[32];
  __int128 v509;
  int64x2_t *v510;
  uint64_t v511;

  v511 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 248))
    v3 = a2;
  else
    v3 = a3;
  v4 = (uint64_t *)(*(_QWORD *)(a1 + 480) + 24 * v3);
  v5 = v4[1];
  v473 = v4;
  v474 = v4 + 1;
  v6 = *v4;
  v472 = a1;
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v8 = v6 + 40 * v7;
      v9 = *(_QWORD *)(a1 + 160);
      v10 = a2 / v9;
      v446 = a2 / v9 * v9;
      v11 = (uint64_t *)(**(_QWORD **)(a1 + 32) + 16 * v7);
      v13 = *v11;
      v12 = v11[1];
      v14 = *(_QWORD *)(a1 + 208) << *(_QWORD *)(a1 + 472);
      v15 = (v14 >> v13) * (a2 % v9);
      v437 = a2 % v9;
      v450 = a2 % v9 + 1;
      v16 = (v14 >> v13) * v450;
      v17 = (*(_QWORD *)(a1 + 96) + (1 << v13) - 1) / (unint64_t)(1 << v13);
      if (v17 >= v16)
        v17 = v16;
      v457 = v17;
      v460 = a2 / v9;
      v440 = v14 >> v12;
      v443 = v10 + 1;
      v18 = (v14 >> v12) * (v10 + 1);
      v19 = (*(_QWORD *)(a1 + 104) + (1 << v12) - 1) / (unint64_t)(1 << v12);
      if (v19 >= v18)
        v19 = v18;
      v454 = v19;
      v467 = v7;
      v20 = sub_236889450(a1, v7);
      v22 = v15;
      v463 = v20;
      v23 = v21;
      v475 = v15;
      if (v9 <= a2 && v457 != v15 && v21)
      {
        v24 = 0;
        v25 = *(_QWORD *)(v472 + 504);
        v26 = *(_QWORD *)(v472 + 512);
        v27 = v21 * (2 * v460 - 1);
        v28 = *(_QWORD *)(v472 + 256) + 40 * v467;
        v29 = *(_QWORD *)(v28 + 16);
        v30 = *(_QWORD *)(v28 + 24);
        v31 = 4 * (v457 - v22);
        v32 = v21;
        do
        {
          memcpy((void *)(v30 + (v24 + v27) * v29 + 4 * v22), (const void *)(*(_QWORD *)(v8 + 24) + *(_QWORD *)(v8 + 16) * v26 + 4 * v25), v31);
          v22 = v475;
          ++v24;
          ++v26;
          --v32;
        }
        while (v32);
      }
      v33 = v440 * v460;
      if (v443 < *(_QWORD *)(v472 + 168) && v457 != v22 && v23)
      {
        v34 = 0;
        v35 = *(_QWORD *)(v472 + 504);
        v36 = 2 * v460 * v23;
        v37 = *(_QWORD *)(v472 + 256) + 40 * v467;
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        v40 = v454 - (v33 + v23) + *(_QWORD *)(v472 + 512);
        v41 = 4 * (v457 - v22);
        do
        {
          memcpy((void *)(v38 + (v34 + v36) * v39 + 4 * v22), (const void *)(*(_QWORD *)(v8 + 24) + *(_QWORD *)(v8 + 16) * (v40 + v34) + 4 * v35), v41);
          v22 = v475;
          ++v34;
          --v23;
        }
        while (v23);
      }
      if (a2 != v446 && v463 && v454 != v33)
      {
        v42 = 0;
        v43 = *(_QWORD *)(v472 + 504);
        v44 = *(_QWORD *)(v472 + 512);
        v45 = *(_QWORD *)(v472 + 280) + 40 * v467;
        v46 = *(_QWORD *)(v45 + 16);
        v47 = *(_QWORD *)(v45 + 24);
        if (v454 - v33 <= 1)
          v48 = 1;
        else
          v48 = v454 - v33;
        do
        {
          memcpy((void *)(v47 + (v42 + v33) * v46 + 4 * v463 * (2 * v437 - 1)), (const void *)(*(_QWORD *)(v8 + 24) + *(_QWORD *)(v8 + 16) * v44 + 4 * v43), 4 * v463);
          ++v42;
          ++v44;
          --v48;
        }
        while (v48);
      }
      if (v450 < *(_QWORD *)(v472 + 160) && v463 && v454 != v33)
      {
        v49 = 0;
        v50 = *(_QWORD *)(v472 + 512);
        v51 = v457 - (v475 + v463) + *(_QWORD *)(v472 + 504);
        v52 = *(_QWORD *)(v472 + 280) + 40 * v467;
        v53 = *(_QWORD *)(v52 + 16);
        v54 = *(_QWORD *)(v52 + 24);
        if (v454 - v33 <= 1)
          v55 = 1;
        else
          v55 = v454 - v33;
        do
        {
          memcpy((void *)(v54 + (v49 + v33) * v53 + 8 * v437 * v463), (const void *)(*(_QWORD *)(v8 + 24) + *(_QWORD *)(v8 + 16) * v50 + 4 * v51), 4 * v463);
          ++v49;
          ++v50;
          --v55;
        }
        while (v55);
      }
      a1 = v472;
      v7 = v467 + 1;
      v6 = *v473;
    }
    while (v467 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((*v474 - *v473) >> 3));
  }
  v56 = *(_QWORD *)(a1 + 160);
  v57 = a2 / v56 * v56;
  v416 = a2 % v56;
  v417 = a2 / v56;
  if (*(_QWORD *)(a1 + 720) == (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)
    goto LABEL_77;
  v58 = *(_QWORD *)(v472 + 208) << *(_QWORD *)(v472 + 472);
  v59 = *(_QWORD *)(v472 + 96);
  v60 = *(_QWORD *)(v472 + 104);
  v61 = *(_QWORD *)(v472 + 704);
  v62 = *(_QWORD *)(v472 + 712);
  v63 = *(int *)(v472 + 696);
  v64 = *(int *)(v472 + 700);
  v65 = v63 + v58 * v416;
  v66 = v64 + v58 * v417;
  v67 = v63 & ~(v63 >> 63);
  v68 = v64 & ~(v64 >> 63);
  v69 = v59 + v63;
  if (v61 < v69)
    v69 = *(_QWORD *)(v472 + 704);
  v70 = v60 + v64;
  if (v62 < v70)
    v70 = *(_QWORD *)(v472 + 712);
  v71 = v69 - v67;
  if (v69 <= v67)
    v71 = 0;
  if (v67 + v59 > v69)
    v59 = v71;
  v72 = v70 - v68;
  if (v70 <= v68)
    v72 = 0;
  if (v68 + v60 > v70)
    v60 = v72;
  if (v65 <= v67)
    v73 = v67;
  else
    v73 = v65;
  if (v66 <= v68)
    v74 = v68;
  else
    v74 = v66;
  v75 = v65 + v58;
  if (v59 + v67 < v65 + v58)
    v75 = v59 + v67;
  v76 = v66 + v58;
  if (v60 + v68 < v66 + v58)
    v76 = v60 + v68;
  v77 = v75 - v73;
  if (v75 <= v73)
    v77 = 0;
  if (v73 + v58 <= v75)
    v78 = *(_QWORD *)(v472 + 208) << *(_QWORD *)(v472 + 472);
  else
    v78 = v77;
  v79 = v76 - v74;
  if (v76 <= v74)
    v79 = 0;
  v80 = v74 + v58 <= v76 ? *(_QWORD *)(v472 + 208) << *(_QWORD *)(v472 + 472) : v79;
  if (a2
    || v59 && v60
    || (v487[1] = 0,
        v487[0] = 0,
        v487[2] = v61,
        v487[3] = v62,
        v81 = sub_236889824((_QWORD *)v472, a3, v487),
        !(_DWORD)v81))
  {
    v82 = !v78 || v80 == 0;
    if (v82)
      goto LABEL_77;
    if (v56 <= a2
      || a2 != v57
      || (v486[0] = 0,
          v486[1] = 0,
          v486[2] = v73,
          v486[3] = v74,
          v81 = sub_236889824((_QWORD *)v472, a3, v486),
          !(_DWORD)v81))
    {
      if (v56 <= a2
        || (v485[0] = v73,
            v485[1] = 0,
            v485[2] = v78,
            v485[3] = v74,
            v81 = sub_236889824((_QWORD *)v472, a3, v485),
            !(_DWORD)v81))
      {
        v149 = v80 + v74;
        if (a2 == v57)
        {
          v484[0] = 0;
          v484[1] = v74;
          v484[2] = v73;
          v484[3] = v80;
          v81 = sub_236889824((_QWORD *)v472, a3, v484);
          if ((_DWORD)v81)
            return v81;
          v150 = v417 + 1;
          if (v417 + 1 == *(_QWORD *)(v472 + 168))
          {
            v151 = *(_QWORD *)(v472 + 712) - v149;
            v483[0] = 0;
            v483[1] = v80 + v74;
            v483[2] = v73;
            v483[3] = v151;
            v81 = sub_236889824((_QWORD *)v472, a3, v483);
            if ((_DWORD)v81)
              return v81;
          }
        }
        else
        {
          v150 = v417 + 1;
        }
        if (v150 != *(_QWORD *)(v472 + 168)
          || (v408 = *(_QWORD *)(v472 + 712) - v149,
              v482[0] = v73,
              v482[1] = v80 + v74,
              v482[2] = v78,
              v482[3] = v408,
              v81 = sub_236889824((_QWORD *)v472, a3, v482),
              !(_DWORD)v81))
        {
          v409 = v78 + v73;
          v410 = *(_QWORD *)(v472 + 160);
          v411 = v416 + 1;
          if (v56 > a2 && v411 == v410)
          {
            v412 = *(_QWORD *)(v472 + 704) - v409;
            v481[0] = v409;
            v481[1] = 0;
            v481[2] = v412;
            v481[3] = v74;
            v81 = sub_236889824((_QWORD *)v472, a3, v481);
            if ((_DWORD)v81)
              return v81;
            v410 = *(_QWORD *)(v472 + 160);
          }
          if (v411 != v410
            || (v413 = *(_QWORD *)(v472 + 704) - v409,
                v480[0] = v409,
                v480[1] = v74,
                v480[2] = v413,
                v480[3] = v80,
                v81 = sub_236889824((_QWORD *)v472, a3, v480),
                !(_DWORD)v81))
          {
            if (v150 != *(_QWORD *)(v472 + 168)
              || v411 != *(_QWORD *)(v472 + 160)
              || (v414 = *(_QWORD *)(v472 + 704) - v409,
                  v415 = *(_QWORD *)(v472 + 712) - v149,
                  v479[0] = v409,
                  v479[1] = v80 + v74,
                  v479[2] = v414,
                  v479[3] = v415,
                  v81 = sub_236889824((_QWORD *)v472, a3, v479),
                  !(_DWORD)v81))
            {
LABEL_77:
              v499 = 0u;
              v500 = 0u;
              v497 = 0u;
              v498 = 0u;
              v495 = 0u;
              v496 = 0u;
              v83 = v472;
              v84 = *(_QWORD *)(v472 + 464);
              v86 = *(_QWORD *)(v472 + 376);
              v85 = *(_QWORD *)(v472 + 384);
              v87 = a2 / v85;
              v88 = a2 % v85;
              v89 = *(_QWORD *)(v472 + 432);
              v90 = v89 * (a2 % v85);
              v91 = v89 * (a2 / v85);
              v92 = v91 >> 3;
              v93 = v89 >> 3;
              v94 = *(_QWORD *)(v472 + 368);
              v95 = v94 - (v90 >> 3);
              if (v94 < v90 >> 3)
                v95 = 0;
              if ((v90 >> 3) + (v89 >> 3) <= v94)
                v95 = v89 >> 3;
              v96 = v92 + (v89 >> 3);
              v97 = v86 - (v91 >> 3);
              if (v86 < v91 >> 3)
                v97 = 0;
              if (v96 <= v86)
                v98 = v93;
              else
                v98 = v97;
              v99 = v85 + 1;
              v100 = v88 + v87 * (v85 + 1);
              v101 = v100 + 1;
              v102 = v87 + 1;
              v103 = v88 + (v87 + 1) * v99;
              v104 = *(_QWORD *)(v472 + 456);
              v105 = (unsigned __int8 *)(*(_QWORD *)(v472 + 448) + v100);
              do
              {
                v106 = __ldaxr(v105);
                v107 = v106 | 4;
              }
              while (__stlxr(v107, v105));
              v108 = (unsigned __int8 *)(*(_QWORD *)(v472 + 448) + v101);
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 | 8, v108));
              v110 = (unsigned __int8 *)(*(_QWORD *)(v472 + 448) + v103 + 1);
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 | 1, v110));
              v112 = (unsigned __int8 *)(*(_QWORD *)(v472 + 448) + v103);
              v113 = v473;
              v114 = v474;
              do
                v115 = __ldaxr(v112);
              while (__stlxr(v115 | 2, v112));
              v116 = v95 + (v90 >> 3);
              v117 = *(_QWORD *)(v472 + 384);
              v118 = v88 + 1;
              if (v90 > 7)
              {
                v121 = v90 & 0xFFFFFFFFFFFFFFF8;
                v119 = (char *)(v121 - v104);
                v122 = (char *)(v121 + v104);
                v120 = *(char **)(v472 + 304);
                if (v122 < v120)
                  v120 = v122;
              }
              else
              {
                v119 = 0;
                v120 = 0;
              }
              v123 = *(_QWORD *)(v472 + 392);
              v124 = 8 * v116;
              v501 = v119;
              v502 = v120;
              if (v117 == v118)
              {
                v125 = *(_QWORD *)(v472 + 304);
                v126 = (char *)v125;
              }
              else
              {
                v126 = (char *)(v124 - v104);
                v125 = *(_QWORD *)(v472 + 304);
              }
              v127 = v98 + v92;
              v128 = v124 + v104;
              if (v124 + v104 >= v125)
                v128 = v125;
              v503 = v126;
              v504 = v128;
              if (v91 >= 8)
              {
                v131 = v91 & 0xFFFFFFFFFFFFFFF8;
                v129 = v131 - v84;
                v130 = v131 + v84;
                if (v130 >= *(_QWORD *)(v472 + 312))
                  v130 = *(_QWORD *)(v472 + 312);
              }
              else
              {
                v129 = 0;
                v130 = 0;
              }
              v132 = 8 * v127;
              if (v123 == v102)
              {
                v133 = *(_QWORD *)(v472 + 312);
                v134 = v133;
              }
              else
              {
                v134 = v132 - v84;
                v133 = *(_QWORD *)(v472 + 312);
              }
              v135 = v132 + v84;
              if (v135 >= v133)
                v135 = v133;
              v505 = 0x100000000;
              LOBYTE(v506) = 0;
              if (v107 == 15)
                LOBYTE(v505) = 1;
              if ((v109 & 0xFFFFFFF7) == 7)
                BYTE6(v505) = 1;
              if ((v111 & 0xFE) == 0xE)
                LOBYTE(v506) = 1;
              if ((v115 & 0xFFFFFFFD) == 0xD)
              {
                BYTE2(v505) = 1;
                if ((v107 & 2) != 0)
                  goto LABEL_120;
              }
              else if ((v107 & 2) != 0)
              {
LABEL_120:
                BYTE3(v505) = 1;
                if ((v107 & 8) != 0)
                  goto LABEL_121;
                goto LABEL_126;
              }
              if ((v107 & 8) != 0)
              {
LABEL_121:
                BYTE1(v505) = 1;
                if ((v109 & 4) != 0)
                  goto LABEL_122;
                goto LABEL_127;
              }
LABEL_126:
              if ((v109 & 4) != 0)
              {
LABEL_122:
                HIBYTE(v505) = 1;
                if ((v115 & 4) == 0)
                  goto LABEL_129;
                goto LABEL_128;
              }
LABEL_127:
              if ((v115 & 4) == 0)
              {
LABEL_129:
                v136 = 0;
                *(int64x2_t *)v508 = vdupq_n_s64(3uLL);
                *(_OWORD *)&v508[16] = *(_OWORD *)v508;
                v509 = *(_OWORD *)v508;
                do
                {
                  v137 = 0;
                  v138 = (unint64_t)&v508[16 * v136];
                  do
                  {
                    if (*((_BYTE *)&v505 + 3 * v137 + v136))
                    {
                      v139 = *(_QWORD *)v138;
                      if (*(_QWORD *)v138 == 3)
                        v139 = v137;
                      *(_QWORD *)v138 = v139;
                      *(_QWORD *)(v138 | 8) = ++v137;
                    }
                    else
                    {
                      ++v137;
                    }
                  }
                  while (v137 != 3);
                  ++v136;
                }
                while (v136 != 3);
                v140 = v509;
                v141 = (&v501)[*(_QWORD *)v508];
                v142 = (&v501)[*(_QWORD *)&v508[8]];
                if (*(_QWORD *)v508 == *(_QWORD *)&v508[16] && *(_QWORD *)&v508[8] == *(_QWORD *)&v508[24])
                {
                  if (*(_OWORD *)v508 == v509)
                  {
                    v143 = v142 - v141;
                    if (v142 != v141 && v135 != v129)
                    {
                      *(_QWORD *)&v495 = (&v501)[*(_QWORD *)v508];
                      v145 = &v495;
                      v418 = 1;
LABEL_186:
                      *((_QWORD *)v145 + 1) = v129;
                      *((_QWORD *)v145 + 2) = v143;
                      *((_QWORD *)v145 + 3) = v135 - v129;
                      goto LABEL_188;
                    }
                    return 0;
                  }
                  if (v142 == v141 || v134 == v129)
                  {
                    v418 = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v495 = (&v501)[*(_QWORD *)v508];
                    *((_QWORD *)&v495 + 1) = v129;
                    *(_QWORD *)&v496 = v142 - v141;
                    *((_QWORD *)&v496 + 1) = v134 - v129;
                    v418 = 1;
                  }
                }
                else
                {
                  v146 = v142 - v141;
                  v148 = v142 == v141 || v130 == v129;
                  if (*(_OWORD *)&v508[16] == v509)
                  {
                    if (v148)
                    {
                      v418 = 0;
                    }
                    else
                    {
                      *(_QWORD *)&v495 = (&v501)[*(_QWORD *)v508];
                      *((_QWORD *)&v495 + 1) = v129;
                      *(_QWORD *)&v496 = v146;
                      *((_QWORD *)&v496 + 1) = v130 - v129;
                      v418 = 1;
                    }
                    v157 = (&v501)[*(_QWORD *)&v508[16]];
                    v158 = (&v501)[*(_QWORD *)&v508[24]];
                    v143 = v158 - v157;
                    if (v158 != v157 && v135 != v130)
                    {
                      v145 = &v495 + 2 * v418;
                      *(_QWORD *)v145 = v157;
                      ++v418;
                      v129 = v130;
                      goto LABEL_186;
                    }
                    goto LABEL_187;
                  }
                  if (v148)
                  {
                    v418 = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v495 = (&v501)[*(_QWORD *)v508];
                    *((_QWORD *)&v495 + 1) = v129;
                    *(_QWORD *)&v496 = v146;
                    *((_QWORD *)&v496 + 1) = v130 - v129;
                    v418 = 1;
                  }
                  v153 = (&v501)[*(_QWORD *)&v508[16]];
                  v154 = (char *)((&v501)[*(_QWORD *)&v508[24]] - v153);
                  if (v154)
                    v155 = v134 == v130;
                  else
                    v155 = 1;
                  if (!v155)
                  {
                    v156 = &v495 + 2 * v418;
                    *(_QWORD *)v156 = v153;
                    *((_QWORD *)v156 + 1) = v130;
                    *((_QWORD *)v156 + 2) = v154;
                    *((_QWORD *)v156 + 3) = v134 - v130;
                    ++v418;
                  }
                }
                v159 = (&v501)[(_QWORD)v140];
                v160 = (&v501)[*((_QWORD *)&v140 + 1)];
                v143 = v160 - v159;
                if (v160 != v159 && v135 != v134)
                {
                  v145 = &v495 + 2 * v418;
                  *(_QWORD *)v145 = v159;
                  ++v418;
                  v129 = v134;
                  goto LABEL_186;
                }
LABEL_187:
                if (v418)
                {
LABEL_188:
                  v161 = 0;
                  while (1)
                  {
                    v421 = v161;
                    v162 = &v495 + 2 * v161;
                    v163 = *v113;
                    v164 = *(_QWORD *)v162;
                    v425 = *(_QWORD *)v162;
                    if (*v114 == *v113)
                    {
                      v226 = *((_QWORD *)v162 + 2);
                      v426 = *((_QWORD *)v162 + 1);
                      v227 = *((_QWORD *)v162 + 3);
                    }
                    else
                    {
                      v165 = 0;
                      v420 = *((_QWORD *)v162 + 2);
                      v426 = *((_QWORD *)v162 + 1);
                      v419 = *((_QWORD *)v162 + 3);
                      v423 = v420 + v164;
                      do
                      {
                        v444 = v163 + 40 * v165;
                        v166 = *(_QWORD *)(v83 + 160);
                        v167 = a2 / v166;
                        v168 = a2 % v166;
                        v169 = (uint64_t *)(**(_QWORD **)(v83 + 32) + 16 * v165);
                        v171 = *v169;
                        v170 = v169[1];
                        v172 = *(_QWORD *)(v83 + 472);
                        v173 = *(_QWORD *)(v83 + 208) << v172;
                        v434 = v168;
                        v451 = (v173 >> v171) * v168;
                        v174 = (v173 >> v171) + v451;
                        v476 = 1 << v171;
                        v175 = (1 << v171) - 1;
                        v176 = *(_QWORD *)(v83 + 104);
                        v177 = v175 + *(_QWORD *)(v83 + 96);
                        v178 = v177 / v476;
                        if (v178 >= v174)
                          v179 = v174;
                        else
                          v179 = v177 / v476;
                        v441 = v179;
                        v430 = v167;
                        v180 = (v173 >> v170) * v167;
                        v468 = 1 << v170;
                        v181 = (1 << v170) - 1;
                        v182 = v83;
                        v183 = (v181 + v176) / (unint64_t)(1 << v170);
                        if (v183 >= (v173 >> v170) + v180)
                          v184 = (v173 >> v170) + v180;
                        else
                          v184 = (v181 + v176) / (unint64_t)v468;
                        v438 = v184;
                        v185 = (uint64_t *)(**(_QWORD **)(v182 + 56) + 16 * v165);
                        v186 = *v185;
                        v464 = v185[1];
                        v458 = v165;
                        v447 = sub_236889450(v182, v165);
                        v188 = v187;
                        v189 = v175 + (v425 << v172);
                        if (v189 >= v476)
                          v190 = v189 / v476 - v186;
                        else
                          v190 = 0;
                        v191 = (v175 + (v423 << v172)) / (unint64_t)v476 + v186;
                        if (v178 < v191)
                          v191 = v178;
                        v455 = v191;
                        v192 = v181 + (v426 << v172);
                        if (v192 >= v468)
                          v193 = v192 / v468 - v464;
                        else
                          v193 = 0;
                        v194 = (v181 + ((v419 + v426) << v172)) / (unint64_t)v468 + v464;
                        if (v183 < v194)
                          v194 = v183;
                        v461 = v194;
                        v427 = v180;
                        v432 = v193 - v180;
                        v477 = v190;
                        if (v193 < v180 && v455 != v190 && v187)
                        {
                          v195 = 0;
                          v469 = v187 * (2 * v430 - 2);
                          v465 = v190 - v451 + *(_QWORD *)(v472 + 504);
                          v196 = *(_QWORD *)(v472 + 512) - v187;
                          v197 = *(_QWORD *)(v472 + 256) + 40 * v458;
                          v199 = *(_QWORD *)(v444 + 16);
                          v198 = *(_QWORD *)(v444 + 24);
                          v200 = 4 * (v455 - v190);
                          v201 = v198 + v199 * v196;
                          v202 = v187;
                          do
                          {
                            memcpy((void *)(v198 + (v196 + v195) * v199 + 4 * v465), (const void *)(*(_QWORD *)(v197 + 24) + *(_QWORD *)(v197 + 16) * (v195 + v469) + 4 * v190), v200);
                            v190 = v477;
                            ++v195;
                            v201 += v199;
                            --v202;
                          }
                          while (v202);
                        }
                        if (v461 > v438 && v455 != v190 && v188)
                        {
                          v203 = 0;
                          v204 = v188 * ((2 * v430) | 1);
                          v205 = v190 - v451 + *(_QWORD *)(v472 + 504);
                          v206 = *(_QWORD *)(v472 + 256) + 40 * v458;
                          v208 = *(_QWORD *)(v444 + 16);
                          v207 = *(_QWORD *)(v444 + 24);
                          v209 = v438 - v427 + *(_QWORD *)(v472 + 512);
                          v210 = 4 * (v455 - v190);
                          do
                          {
                            memcpy((void *)(v207 + (v209 + v203) * v208 + 4 * v205), (const void *)(*(_QWORD *)(v206 + 24) + *(_QWORD *)(v206 + 16) * (v203 + v204) + 4 * v190), v210);
                            v190 = v477;
                            ++v203;
                            --v188;
                          }
                          while (v188);
                        }
                        if (v190 < v451 && v447 && v461 != v193)
                        {
                          v211 = 0;
                          v212 = v461 - v193;
                          v213 = *(_QWORD *)(v472 + 504) - v447;
                          v214 = *(_QWORD *)(v472 + 280) + 40 * v458;
                          v216 = *(_QWORD *)(v444 + 16);
                          v215 = *(_QWORD *)(v444 + 24);
                          v217 = v432 + *(_QWORD *)(v472 + 512);
                          v218 = v193;
                          do
                          {
                            memcpy((void *)(v215 + (v217 + v211++) * v216 + 4 * v213), (const void *)(*(_QWORD *)(v214 + 24)+ *(_QWORD *)(v214 + 16) * v218+++ 4 * v447 * (2 * v434 - 2)), 4 * v447);
                            --v212;
                          }
                          while (v212);
                        }
                        if (v455 > v441 && v447 && v461 != v193)
                        {
                          v219 = 0;
                          v220 = v461 - v193;
                          v221 = v441 - v451 + *(_QWORD *)(v472 + 504);
                          v222 = *(_QWORD *)(v472 + 280) + 40 * v458;
                          v224 = *(_QWORD *)(v444 + 16);
                          v223 = *(_QWORD *)(v444 + 24);
                          v225 = v432 + *(_QWORD *)(v472 + 512);
                          do
                          {
                            memcpy((void *)(v223 + (v225 + v219++) * v224 + 4 * v221), (const void *)(*(_QWORD *)(v222 + 24)+ *(_QWORD *)(v222 + 16) * v193+++ 4 * v447 * ((2 * v434) | 1)), 4 * v447);
                            --v220;
                          }
                          while (v220);
                        }
                        v165 = v458 + 1;
                        v113 = v473;
                        v163 = *v473;
                        v83 = v472;
                      }
                      while (v458 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((*v474 - *v473) >> 3));
                      v164 = v425;
                      v227 = v419;
                      v226 = v420;
                    }
                    v470 = *(_QWORD *)(v83 + 208);
                    v452 = *(_QWORD *)(v83 + 504);
                    v456 = *(_QWORD *)(v83 + 512);
                    v505 = 0;
                    v506 = 0;
                    v507 = 0;
                    sub_2368894B0((char **)&v505, (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 3);
                    v228 = *(_QWORD *)(v83 + 472);
                    v229 = 1 << v228;
                    v230 = v164 * v229;
                    v231 = v426 * v229;
                    v232 = v226 << v228;
                    v233 = v227 << v228;
                    v234 = *(_QWORD *)(v83 + 96);
                    v235 = *(_QWORD *)(v83 + 104);
                    if (v234 >= v232 + v230)
                      v236 = v232 + v230;
                    else
                      v236 = *(_QWORD *)(v83 + 96);
                    if (v235 >= v233 + v231)
                      v237 = v233 + v231;
                    else
                      v237 = *(_QWORD *)(v83 + 104);
                    v334 = v236 >= v230;
                    v238 = v236 - v230;
                    if (!v334)
                      v238 = 0;
                    if (v232 + v230 <= v234)
                      v239 = v232;
                    else
                      v239 = v238;
                    v240 = v237 - v231;
                    if (v237 < v231)
                      v240 = 0;
                    if (v233 + v231 <= v235)
                      v241 = v233;
                    else
                      v241 = v240;
                    v242 = *(_QWORD *)(v83 + 8);
                    v243 = *(_QWORD *)(v83 + 16);
                    v244 = (v243 - v242) >> 3;
                    if (v243 != v242)
                    {
                      v245 = *(uint64_t **)(v83 + 32);
                      v246 = *(int **)(v83 + 568);
                      if (v244 <= 1)
                        v247 = 1;
                      else
                        v247 = (v243 - v242) >> 3;
                      v248 = (char *)(v505 + 16);
                      do
                      {
                        v250 = *v246++;
                        v249 = v250;
                        v251 = *v245;
                        v245 += 3;
                        v252 = (uint64_t *)(v251 + 16 * v249);
                        v254 = *v252;
                        v253 = v252[1];
                        *((_QWORD *)v248 - 2) = v230 / (1 << v254);
                        *((_QWORD *)v248 - 1) = v231 / (1 << v253);
                        *(_QWORD *)v248 = (v239 + ~(-1 << v254)) >> v254;
                        *((_QWORD *)v248 + 1) = (unint64_t)(v241 + ~(-1 << v253)) >> v253;
                        v248 += 32;
                        --v247;
                      }
                      while (v247);
                    }
                    if (*(_QWORD *)(v83 + 720) == v244)
                    {
                      v255 = 0;
                      v256 = 0;
                      v257 = (uint64_t *)(v472 + 104);
                      v258 = (uint64_t *)(v472 + 96);
                    }
                    else
                    {
                      v255 = *(int *)(v83 + 696);
                      v256 = *(_DWORD *)(v83 + 700);
                      v257 = (uint64_t *)(v472 + 712);
                      v258 = (uint64_t *)(v472 + 704);
                    }
                    v259 = *v258;
                    v260 = v255 + v230;
                    v261 = (v255 + v230) & ~((uint64_t)(v255 + v230) >> 63);
                    v262 = v239 + v230 + v255;
                    if (v259 < v262)
                      v262 = v259;
                    v462 = v262 - v261;
                    v466 = v261;
                    if (v262 <= v261)
                    {
                      v81 = 0;
                      v114 = v474;
                    }
                    else
                    {
                      v459 = v255;
                      v439 = *v257;
                      v442 = *(_QWORD *)(v83 + 504);
                      v448 = *(_QWORD *)(v83 + 512);
                      v433 = *(_QWORD *)(v83 + 472);
                      v435 = *(_QWORD **)(v83 + 32);
                      v263 = *(_QWORD *)(v83 + 520);
                      v491 = 0;
                      v490 = 0uLL;
                      v264 = *v474;
                      v265 = *v113;
                      v501 = 0;
                      v502 = 0;
                      v503 = 0;
                      v266 = v264 - v265;
                      v431 = v231;
                      v428 = v256;
                      v424 = v260;
                      if (v266)
                      {
                        v267 = 0xCCCCCCCCCCCCCCCDLL * (v266 >> 3);
                        if (v267 > 0xAAAAAAAAAAAAAAALL)
                          sub_2367C3440();
                        v268 = (char *)operator new(0x3333333333333338 * (v266 >> 3));
                        v501 = v268;
                        v503 = &v268[24 * v267];
                        bzero(v268, 24 * ((24 * v267 - 24) / 0x18) + 24);
                        v502 = &v268[24 * ((24 * v267 - 24) / 0x18) + 24];
                      }
                      else
                      {
                        v268 = 0;
                      }
                      v269 = v244 + 1;
                      if (v244 != -1)
                      {
                        if (v269 > 0xAAAAAAAAAAAAAAALL)
                          sub_2367C3440();
                        *(_QWORD *)&v509 = &v491;
                        v270 = operator new(24 * v269);
                        *(_QWORD *)v508 = v270;
                        *(_QWORD *)&v508[8] = v270;
                        v271 = &v270[3 * v269];
                        *(_QWORD *)&v508[16] = v270;
                        *(_QWORD *)&v508[24] = v271;
                        v272 = 24 * v244 + 24;
                        do
                        {
                          sub_236889A50(v270, (uint64_t)&v501);
                          v270 += 3;
                          v272 -= 24;
                        }
                        while (v272);
                        *(_QWORD *)&v508[16] = v271;
                        v273 = (_QWORD *)v490.i64[1];
                        v274 = (_QWORD *)v490.i64[0];
                        v275 = *(_QWORD *)&v508[8];
                        if (v490.i64[1] == v490.i64[0])
                        {
                          v277 = vdupq_n_s64(v490.u64[1]);
                        }
                        else
                        {
                          do
                          {
                            *(_QWORD *)(v275 - 24) = 0;
                            *(_QWORD *)(v275 - 16) = 0;
                            v275 -= 24;
                            *(_QWORD *)(v275 + 16) = 0;
                            v276 = *(_OWORD *)(v273 - 3);
                            v273 -= 3;
                            *(_OWORD *)v275 = v276;
                            *(_QWORD *)(v275 + 16) = v273[2];
                            *v273 = 0;
                            v273[1] = 0;
                            v273[2] = 0;
                          }
                          while (v273 != v274);
                          v277 = v490;
                          v271 = *(_QWORD **)&v508[16];
                        }
                        v490.i64[0] = v275;
                        v490.i64[1] = (uint64_t)v271;
                        *(int64x2_t *)&v508[8] = v277;
                        v278 = v491;
                        v491 = *(_QWORD *)&v508[24];
                        *(_QWORD *)&v508[24] = v278;
                        *(_QWORD *)v508 = v277.i64[0];
                        sub_2367D1F70((uint64_t)v508);
                        v113 = v473;
                      }
                      v445 = v241;
                      if (v268)
                        operator delete(v268);
                      v279 = *v474;
                      v280 = *v113;
                      if (v243 == v242)
                      {
                        v284 = *v474;
                      }
                      else
                      {
                        v281 = 0;
                        v282 = (_QWORD *)(v263 + 24 * a3);
                        if (v244 <= 1)
                          v283 = 1;
                        else
                          v283 = v244;
                        v284 = *v474;
                        do
                        {
                          v285 = v281 + 1;
                          v82 = v284 == v280;
                          v284 = v280;
                          if (!v82)
                          {
                            v286 = 0;
                            v287 = 0;
                            do
                            {
                              v288 = *(_QWORD *)(*(_QWORD *)(v472 + 8) + 8 * v281);
                              if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v288 + 24))(v288, v287) == 2)
                              {
                                v289 = *(_QWORD *)(*v282 + v286) + 40 * v281;
                                v290 = *(_QWORD *)(v490.i64[0] + 24 * v285) + v286;
                                *(_DWORD *)(v290 + 8) = *(_DWORD *)(v289 + 4) - 1;
                                *(_QWORD *)v290 = *(_QWORD *)(v289 + 24);
                                *(_QWORD *)(v290 + 16) = *(_QWORD *)(v289 + 16) >> 2;
                              }
                              ++v287;
                              v279 = *v474;
                              v280 = *v473;
                              v286 += 24;
                            }
                            while (v287 < 0xCCCCCCCCCCCCCCCDLL * ((*v474 - *v473) >> 3));
                            v284 = *v474;
                          }
                          ++v281;
                        }
                        while (v285 != v283);
                      }
                      v291 = v284 - v280;
                      if (v291)
                      {
                        v292 = v291 / 40;
                        if ((unint64_t)(v291 / 40) <= 1)
                          v292 = 1;
                        v293 = *(_QWORD *)v490.i64[0] + 8;
                        v294 = (_QWORD *)(v280 + 24);
                        v295 = (int *)(*v435 + 8);
                        do
                        {
                          v296 = *(v295 - 2);
                          v297 = *v295;
                          v295 += 4;
                          v298 = *(v294 - 1);
                          *(_QWORD *)(v293 - 8) = *v294
                                                + v298
                                                * ((uint64_t)((v456 - v470 * v417 + v426 + -(int)v448) * (1 << v433))
                                                 / (1 << v297)
                                                 + (int)v448)
                                                + 4
                                                * ((int)v442
                                                 - 16
                                                 + (uint64_t)((v425 + v452 - v470 * v416 + -(int)v442) * (1 << v433))
                                                 / (1 << v296));
                          *(_QWORD *)(v293 + 8) = v298 >> 2;
                          *(_DWORD *)v293 = -1;
                          v293 += 24;
                          v294 += 5;
                          --v292;
                        }
                        while (v292);
                      }
                      v299 = *(_QWORD *)(v472 + 688);
                      v502 = 0;
                      v503 = 0;
                      v501 = 0;
                      *(_QWORD *)v508 = &v501;
                      v508[8] = 0;
                      v300 = v299 + 1;
                      v301 = v473;
                      if (v299 == -1)
                        goto LABEL_296;
                      if (v300 > 0xAAAAAAAAAAAAAAALL)
                        sub_2367C3440();
                      v302 = (char *)operator new(24 * v300);
                      v501 = v302;
                      v503 = &v302[24 * v300];
                      v303 = 24 * ((24 * v300 - 24) / 0x18) + 24;
                      bzero(v302, v303);
                      v502 = &v302[v303];
                      if (v299)
                      {
LABEL_296:
                        v304 = 0;
                        do
                        {
                          v305 = (uint64_t *)&v501[24 * v304];
                          v306 = (*v474 - *v301) >> 3;
                          v307 = v305 + 1;
                          v308 = (char *)v305[1];
                          v309 = 0xCCCCCCCCCCCCCCCDLL * v306;
                          v310 = *v305;
                          v311 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v308[-*v305] >> 3);
                          v312 = v309 - v311;
                          if (v309 <= v311)
                          {
                            if (v309 < v311)
                            {
                              v322 = (char *)(v310 + 24 * v309);
                              if (v308 != v322)
                              {
                                v323 = (char *)v305[1];
                                do
                                {
                                  v325 = (void *)*((_QWORD *)v323 - 3);
                                  v323 -= 24;
                                  v324 = v325;
                                  if (v325)
                                  {
                                    *((_QWORD *)v308 - 2) = v324;
                                    operator delete(v324);
                                  }
                                  v308 = v323;
                                }
                                while (v323 != v322);
                              }
                              *v307 = v322;
                            }
                          }
                          else
                          {
                            v313 = &v501[24 * v304];
                            v316 = *((_QWORD *)v313 + 2);
                            v314 = v313 + 16;
                            v315 = v316;
                            if (0xAAAAAAAAAAAAAAABLL * ((v316 - (uint64_t)v308) >> 3) >= v312)
                            {
                              bzero(v308, 24 * ((24 * v312 - 24) / 0x18) + 24);
                              *v307 = &v308[24 * ((24 * v312 - 24) / 0x18) + 24];
                            }
                            else
                            {
                              if (v309 > 0xAAAAAAAAAAAAAAALL)
                                sub_2367C3440();
                              *(_QWORD *)&v509 = v314;
                              v317 = 0xAAAAAAAAAAAAAAABLL * ((v315 - v310) >> 3);
                              if (2 * v317 > v309)
                                v309 = 2 * v317;
                              if (v317 >= 0x555555555555555)
                                v318 = 0xAAAAAAAAAAAAAAALL;
                              else
                                v318 = v309;
                              v319 = (char *)sub_2367D1EBC(v318);
                              v320 = &v319[24 * v311];
                              *(_QWORD *)v508 = v319;
                              *(_QWORD *)&v508[8] = v320;
                              *(_QWORD *)&v508[24] = &v319[24 * v321];
                              bzero(v320, 24 * ((24 * v312 - 24) / 0x18) + 24);
                              *(_QWORD *)&v508[16] = &v320[24 * ((24 * v312 - 24) / 0x18) + 24];
                              sub_2367D1F00(v305, v508);
                              sub_2367D1F70((uint64_t)v508);
                            }
                          }
                          ++v304;
                          v301 = v473;
                          v326 = *(_QWORD *)(v472 + 688);
                        }
                        while (v304 < v326);
                        v302 = v501;
                        v279 = *v474;
                        v280 = *v473;
                      }
                      else
                      {
                        v326 = 0;
                      }
                      sub_2367E1480(&__p, 1uLL);
                      v327 = (v279 - v280) >> 3;
                      v328 = &v302[24 * v326];
                      v329 = v328 + 8;
                      v330 = (_QWORD *)*((_QWORD *)v328 + 1);
                      v331 = 0xCCCCCCCCCCCCCCCDLL * v327;
                      v332 = *(_QWORD *)v328;
                      v333 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v330 - *(_QWORD *)v328) >> 3);
                      v334 = v331 >= v333;
                      v335 = v331 - v333;
                      if (v331 <= v333)
                      {
                        v114 = v474;
                        v344 = v445;
                        if (!v334)
                        {
                          v350 = (_QWORD *)(v332 + 24 * v331);
                          if (v330 != v350)
                          {
                            v351 = (_QWORD *)*((_QWORD *)v328 + 1);
                            do
                            {
                              v353 = (void *)*(v351 - 3);
                              v351 -= 3;
                              v352 = v353;
                              if (v353)
                              {
                                *(v330 - 2) = v352;
                                operator delete(v352);
                              }
                              v330 = v351;
                            }
                            while (v351 != v350);
                          }
                          *v329 = v350;
                        }
                      }
                      else
                      {
                        v336 = &v302[24 * v326];
                        v339 = *((_QWORD *)v336 + 2);
                        v337 = v336 + 16;
                        v338 = v339;
                        if (0xAAAAAAAAAAAAAAABLL * ((v339 - (uint64_t)v330) >> 3) >= v335)
                        {
                          v354 = &v330[3 * v335];
                          v355 = 24 * v331 - 8 * (((uint64_t)v330 - *(_QWORD *)v328) >> 3);
                          v114 = v474;
                          v344 = v445;
                          do
                          {
                            *v330 = 0;
                            v330[1] = 0;
                            v330[2] = 0;
                            sub_2367E2604(v330, __p, (uint64_t)v489, (v489 - (_BYTE *)__p) >> 3);
                            v330 += 3;
                            v355 -= 24;
                          }
                          while (v355);
                          *v329 = v354;
                        }
                        else
                        {
                          if (v331 > 0xAAAAAAAAAAAAAAALL)
                            sub_2367C3440();
                          *(_QWORD *)&v509 = v337;
                          v340 = 0xAAAAAAAAAAAAAAABLL * ((v338 - v332) >> 3);
                          v341 = 2 * v340;
                          if (2 * v340 <= v331)
                            v341 = v331;
                          if (v340 >= 0x555555555555555)
                            v342 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v342 = v341;
                          v343 = (char *)sub_2367D1EBC(v342);
                          v344 = v445;
                          v345 = &v343[24 * v333];
                          *(_QWORD *)v508 = v343;
                          *(_QWORD *)&v508[8] = v345;
                          *(_QWORD *)&v508[16] = v345;
                          *(_QWORD *)&v508[24] = &v343[24 * v346];
                          v347 = 3 * v331;
                          v348 = &v343[24 * v331];
                          v349 = 8 * v347 - 24 * v333;
                          v114 = v474;
                          do
                          {
                            *(_QWORD *)v345 = 0;
                            *((_QWORD *)v345 + 1) = 0;
                            *((_QWORD *)v345 + 2) = 0;
                            sub_2367E2604(v345, __p, (uint64_t)v489, (v489 - (_BYTE *)__p) >> 3);
                            v345 += 24;
                            v349 -= 24;
                          }
                          while (v349);
                          *(_QWORD *)&v508[16] = v348;
                          sub_2367D1F00(v328, v508);
                          sub_2367D1F70((uint64_t)v508);
                        }
                      }
                      if (__p)
                      {
                        v489 = __p;
                        operator delete(__p);
                      }
                      v356 = *v114;
                      v357 = *v473;
                      sub_2367E1480(v508, 8uLL);
                      sub_2367E14F4(&__p, 0xCCCCCCCCCCCCCCCDLL * ((v356 - v357) >> 3), (uint64_t)v508);
                      v358 = a3;
                      if (*(_QWORD *)v508)
                      {
                        *(_QWORD *)&v508[8] = *(_QWORD *)v508;
                        operator delete(*(void **)v508);
                      }
                      v359 = *(int **)(v472 + 640);
                      v360 = *(int **)(v472 + 648);
                      if (v359 != v360)
                      {
                        v361 = v359 + 1;
                        if (v359 + 1 != v360)
                        {
                          v362 = *v359;
                          v363 = v359 + 1;
                          do
                          {
                            v365 = *v363++;
                            v364 = v365;
                            v366 = v362 < v365;
                            if (v362 <= v365)
                              v362 = v364;
                            if (v366)
                              v359 = v361;
                            v361 = v363;
                          }
                          while (v363 != v360);
                        }
                      }
                      v81 = 0;
                      v367 = *v359;
                      v453 = v367;
                      v449 = v367 + v344;
                      if (v367 + v344 > -v367)
                      {
                        v368 = -v367;
                        v436 = v431 + v428;
                        do
                        {
                          v369 = *(_QWORD *)(v472 + 688);
                          v471 = v368;
                          v370 = (v368 - v453);
                          if (v369)
                          {
                            v371 = 0;
                            v372 = v473;
                            while (1)
                            {
                              v373 = *(_DWORD *)(*(_QWORD *)(v472 + 640) + 4 * v371);
                              v374 = v373 + v370;
                              v375 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v472 + 32) + 24 * v371)
                                               + 16 * *(int *)(*(_QWORD *)(v472 + 568) + 4 * v371)
                                               + 8);
                              v376 = (v373 + v370) & ~(-1 << v375);
                              v377 = -v373;
                              if (v376)
                                v378 = 1;
                              else
                                v378 = v374 < v377;
                              if (!v378)
                              {
                                v379 = v374 >> v375;
                                v380 = v505;
                                v381 = *(_QWORD *)(v505 + 32 * v371 + 8) + v379;
                                if (v381 >= 0 && v381 < *(_QWORD *)(*(_QWORD *)(v472 + 592) + 32 * v371 + 24))
                                {
                                  v494 = v379;
                                  v493 = v371;
                                  v382 = *(_QWORD *)(v472 + 8);
                                  v383 = *(_QWORD *)(v382 + 8 * v371);
                                  v492 = *(_QWORD *)(v383 + 16);
                                  v384 = *(_QWORD *)(v383 + 32);
                                  *(_QWORD *)v508 = &v494;
                                  *(_QWORD *)&v508[8] = &v492;
                                  *(_QWORD *)&v508[16] = &v505;
                                  *(_QWORD *)&v508[24] = &v493;
                                  *(_QWORD *)&v509 = v472;
                                  *((_QWORD *)&v509 + 1) = &v501;
                                  v510 = &v490;
                                  if (*v114 == *v372)
                                  {
                                    v399 = v472;
                                  }
                                  else
                                  {
                                    v478 = v381;
                                    v385 = 0;
                                    do
                                    {
                                      v386 = *(_QWORD *)(*(_QWORD *)(v472 + 8) + 8 * v493);
                                      v387 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v386
                                                                                                  + 24))(v386, v385);
                                      if (v387)
                                      {
                                        v388 = v493;
                                        v389 = *(_QWORD *)&v501[24 * v493] + 24 * v385;
                                        v390 = (2 * v492) | 1;
                                        if (v390 == (uint64_t)(*(_QWORD *)(v389 + 8) - *(_QWORD *)v389) >> 3)
                                        {
                                          v391 = 2 * v492;
                                          if (2 * v492 >= 1)
                                          {
                                            v392 = 0;
                                            do
                                            {
                                              v393 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v501[24 * v388] + 24 * v385)
                                                              + 8 * v392);
                                              *v393 = v393[1];
                                              ++v392;
                                            }
                                            while (v391 != v392);
                                          }
                                          sub_236889AE4((unsigned int **)v508, v385, v391);
                                        }
                                        else
                                        {
                                          sub_236889D5C((char **)v389, v390);
                                          if ((v492 & 0x8000000000000000) == 0)
                                          {
                                            v394 = 0;
                                            do
                                              sub_236889AE4((unsigned int **)v508, v385, v394++);
                                            while (v394 < ((2 * v492) | 1));
                                          }
                                        }
                                        v114 = v474;
                                        if (v387 == 2)
                                        {
                                          v395 = 0;
                                          v396 = v494 << v384;
                                          v397 = v493 + 1;
                                          do
                                          {
                                            v398 = *(_QWORD *)(v490.i64[0] + 24 * v397) + 24 * v385;
                                            *(_QWORD *)(*((_QWORD *)__p + 3 * v385) + 8 * v395) = *(_QWORD *)v398
                                                                                                + 4
                                                                                                * *(_QWORD *)(v398 + 16)
                                                                                                * (*(_DWORD *)(v398 + 8) & (v396 + (int)v395));
                                            ++v395;
                                          }
                                          while (1 << v384 != v395);
                                        }
                                      }
                                      ++v385;
                                    }
                                    while (v385 < 0xCCCCCCCCCCCCCCCDLL * ((*v114 - *v372) >> 3));
                                    v399 = v472;
                                    v382 = *(_QWORD *)(v472 + 8);
                                    v380 = v505;
                                    v358 = a3;
                                    v381 = v478;
                                  }
                                  v81 = (*(uint64_t (**)(_QWORD, char *, void **, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v382 + 8 * v371) + 16))(*(_QWORD *)(v382 + 8 * v371), &v501[24 * v371], &__p, *(int *)(*(_QWORD *)(v399 + 664) + 4 * v371), *(_QWORD *)(v380 + 32 * v371 + 16), *(_QWORD *)(v380 + 32 * v371), v381, v358);
                                  if ((_DWORD)v81)
                                    goto LABEL_395;
                                  v372 = v473;
                                  v369 = *(_QWORD *)(v472 + 688);
                                }
                              }
                              if (++v371 >= v369)
                                goto LABEL_381;
                            }
                          }
                          v372 = v473;
LABEL_381:
                          if (*v114 != *v372)
                          {
                            v400 = 0;
                            v401 = 0;
                            do
                            {
                              v402 = *(_QWORD *)(v490.i64[0]
                                               + 24
                                               * *(int *)(*(_QWORD *)(*(_QWORD *)(v472 + 616) + 24 * v369) + 4 * v401)
                                               + 24)
                                   + v400;
                              **(_QWORD **)(*(_QWORD *)&v501[24 * v369] + v400) = *(_QWORD *)v402
                                                                                + 4
                                                                                * *(_QWORD *)(v402 + 16)
                                                                                * (int)(*(_DWORD *)(v402 + 8) & v370)
                                                                                + 4 * (-v424 & (v424 >> 63));
                              ++v401;
                              v400 += 24;
                            }
                            while (v401 < 0xCCCCCCCCCCCCCCCDLL * ((*v114 - *v372) >> 3));
                          }
                          if ((v370 & 0x80000000) == 0 && v445 > v370)
                          {
                            v403 = v436 + v370;
                            if (v436 + v370 >= 0 && v403 < v439)
                            {
                              while (1)
                              {
                                v404 = *(_QWORD *)(v472 + 8);
                                if (v369 >= (*(_QWORD *)(v472 + 16) - v404) >> 3)
                                  break;
                                v406 = v428;
                                v405 = v459;
                                if (v369 >= *(_QWORD *)(v472 + 720))
                                {
                                  v405 = 0;
                                  v406 = 0;
                                }
                                v81 = (*(uint64_t (**)(_QWORD, char *, void **, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v404 + 8 * v369) + 16))(*(_QWORD *)(v404 + 8 * v369), &v501[24 * *(_QWORD *)(v472 + 688)], &__p, 0, v462, v466 - v405, v403 - v406, v358);
                                if ((_DWORD)v81)
                                  goto LABEL_395;
                                ++v369;
                              }
                            }
                          }
                          v368 = v471 + 1;
                        }
                        while (v471 + 1 != v449);
                        v81 = 0;
                      }
LABEL_395:
                      *(_QWORD *)v508 = &__p;
                      sub_2367C4718((void ***)v508);
                      *(_QWORD *)v508 = &v501;
                      sub_236889E54((void ***)v508);
                      sub_236889ED4((void **)&v490);
                      v83 = v472;
                      v113 = v473;
                    }
                    if (v505)
                    {
                      v506 = v505;
                      operator delete((void *)v505);
                    }
                    if ((_DWORD)v81)
                      return v81;
                    v161 = v421 + 1;
                    if (v421 + 1 == v418)
                      return 0;
                  }
                }
                return 0;
              }
LABEL_128:
              BYTE5(v505) = 1;
              goto LABEL_129;
            }
          }
        }
      }
    }
  }
  return v81;
}

void sub_236887E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_236887F44(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  size_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char **v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int32x2_t v94;
  int8x16_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int32x2_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  __int128 v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unsigned int v128;

  v4 = *(uint64_t **)(a1 + 32);
  *(_BYTE *)(a1 + 248) = a3;
  v121 = a2;
  if (a3)
    a2 = *(_QWORD *)(a1 + 192);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 488) - *(_QWORD *)(a1 + 480)) >> 3);
  if (v5 < a2)
  {
    v6 = (_QWORD *)(a1 + 480);
    v119 = a1 + 496;
    v122 = a2;
    while (1)
    {
      v8 = *(_QWORD **)(a1 + 488);
      v7 = *(_QWORD *)(a1 + 496);
      if ((unint64_t)v8 >= v7)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *v6) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_124:
          sub_2367C3440();
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v6) >> 3);
        if (2 * v12 > v11)
          v11 = 2 * v12;
        v13 = (char *)(v12 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11);
        v127 = v119;
        if (v13)
          v13 = (char *)sub_2367D1EBC((unint64_t)v13);
        else
          v14 = 0;
        v15 = &v13[24 * v10];
        *(_QWORD *)&v124 = v13;
        *((_QWORD *)&v124 + 1) = v15;
        v126 = &v13[24 * v14];
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        v125 = v15 + 24;
        sub_2367D1F00((_QWORD *)(a1 + 480), &v124);
        v9 = *(_QWORD **)(a1 + 488);
        sub_236889748((uint64_t)&v124);
      }
      else
      {
        *v8 = 0;
        v8[1] = 0;
        v9 = v8 + 3;
        v8[2] = 0;
      }
      *(_QWORD *)(a1 + 488) = v9;
      sub_2368895C8(*(_QWORD *)(a1 + 480) + 24 * v5, (v4[1] - *v4) >> 4);
      if (v4[1] != *v4)
        break;
LABEL_31:
      if (++v5 == v122)
        goto LABEL_32;
    }
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 208) << *(_QWORD *)(a1 + 472);
      v18 = (_QWORD *)(**(_QWORD **)(a1 + 32) + 16 * v16);
      sub_2367C431C((uint64_t)&v124, (v17 >> *v18) + 2 * *(_DWORD *)(a1 + 504), (v17 >> v18[1]) + 2 * *(_DWORD *)(a1 + 512));
      result = v128;
      if (v128)
        return result;
      v20 = v126;
      v21 = v127;
      v126 = 0;
      v22 = *(_QWORD *)(*v6 + 24 * v5) + 40 * v16;
      *(_OWORD *)v22 = v124;
      v23 = *(_QWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 16) = v125;
      *(_QWORD *)(v22 + 24) = v20;
      if (!v23)
        break;
      v24 = -*(_QWORD *)(v23 - 24);
      do
        v25 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v25 + v24, &qword_2564313D8));
      free(*(void **)(v23 - 32));
      v26 = v128;
      *(_QWORD *)(v22 + 32) = v21;
      if (!v26)
        goto LABEL_26;
LABEL_30:
      if (++v16 >= (unint64_t)((v4[1] - *v4) >> 4))
        goto LABEL_31;
    }
    *(_QWORD *)(v22 + 32) = v21;
LABEL_26:
    v27 = v126;
    v126 = 0;
    if (v27)
    {
      v28 = -*((_QWORD *)v27 - 3);
      do
        v29 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v29 + v28, &qword_2564313D8));
      free(*((void **)v27 - 4));
    }
    goto LABEL_30;
  }
LABEL_32:
  v30 = *(_QWORD **)(a1 + 528);
  v31 = *(_QWORD **)(a1 + 520);
  v32 = 0xAAAAAAAAAAAAAAABLL * (v30 - v31);
  v33 = v121 - v32;
  if (v121 > v32)
  {
    v34 = *(_QWORD *)(a1 + 536);
    if (0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v30) >> 3) >= v33)
    {
      bzero(*(void **)(a1 + 528), 24 * ((24 * v33 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 528) = &v30[3 * ((24 * v33 - 24) / 0x18) + 3];
      goto LABEL_56;
    }
    if (v121 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3440();
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v31) >> 3);
    v36 = 2 * v35;
    if (2 * v35 <= v121)
      v36 = v121;
    if (v35 >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v36;
    if (v37 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3488();
    v38 = 3 * v37;
    v39 = (char *)operator new(24 * v37);
    v40 = &v39[8 * (v30 - v31)];
    v41 = &v39[8 * v38];
    v42 = 24 * ((24 * v33 - 24) / 0x18) + 24;
    bzero(v40, v42);
    v43 = &v40[v42];
    if (v30 == v31)
    {
      *(_QWORD *)(a1 + 520) = v40;
      *(_QWORD *)(a1 + 528) = v43;
      *(_QWORD *)(a1 + 536) = v41;
      if (!v30)
        goto LABEL_56;
    }
    else
    {
      do
      {
        v44 = v40;
        *((_QWORD *)v40 - 1) = 0;
        v45 = *(_OWORD *)(v30 - 3);
        v30 -= 3;
        *(_OWORD *)(v40 - 24) = v45;
        v40 -= 24;
        *((_QWORD *)v44 - 1) = v30[2];
        *v30 = 0;
        v30[1] = 0;
        v30[2] = 0;
      }
      while (v30 != v31);
      v46 = *(_QWORD **)(a1 + 520);
      v30 = *(_QWORD **)(a1 + 528);
      *(_QWORD *)(a1 + 520) = v40;
      *(_QWORD *)(a1 + 528) = v43;
      *(_QWORD *)(a1 + 536) = v41;
      if (v30 != v46)
      {
        do
        {
          v30 -= 3;
          *(_QWORD *)&v124 = v30;
          sub_2368897A4((void ***)&v124);
        }
        while (v30 != v46);
        v30 = v46;
      }
      if (!v30)
        goto LABEL_56;
    }
    operator delete(v30);
    goto LABEL_56;
  }
  if (v121 < v32)
  {
    v47 = &v31[3 * v121];
    while (v30 != v47)
    {
      v30 -= 3;
      *(_QWORD *)&v124 = v30;
      sub_2368897A4((void ***)&v124);
    }
    *(_QWORD *)(a1 + 528) = v47;
  }
LABEL_56:
  v48 = *(_DWORD *)(a1 + 472);
  v49 = *(_QWORD *)(a1 + 208) << v48;
  v50 = ((2 * *(_QWORD *)(a1 + 504)) << v48) + 32;
  if (v121)
  {
    v51 = 0;
    v123 = v50 + v49;
    v52 = *v4;
    v53 = v4[1];
    v118 = v49;
    v120 = v50;
    while (1)
    {
      v54 = *(_QWORD *)(a1 + 520);
      v55 = (uint64_t *)(v54 + 24 * v51);
      v56 = v53 - v52;
      v57 = (char **)(v55 + 1);
      v58 = (char *)v55[1];
      v59 = (v53 - v52) >> 4;
      v60 = *v55;
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v58[-*v55] >> 3);
      v62 = v59 - v61;
      if (v59 <= v61)
      {
        if (v59 < v61)
        {
          v72 = (char *)(v60 + 24 * v59);
          while (v58 != v72)
          {
            v58 -= 24;
            *(_QWORD *)&v124 = v58;
            sub_2367D077C((void ***)&v124);
          }
          *v57 = v72;
        }
      }
      else
      {
        v63 = v54 + 24 * v51;
        v66 = *(_QWORD *)(v63 + 16);
        v64 = v63 + 16;
        v65 = v66;
        if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v58) >> 3) >= v62)
        {
          bzero(v58, 24 * ((24 * v62 - 24) / 0x18) + 24);
          *v57 = &v58[24 * ((24 * v62 - 24) / 0x18) + 24];
        }
        else
        {
          if (v56 < 0)
            goto LABEL_124;
          v127 = v64;
          v67 = 0xAAAAAAAAAAAAAAABLL * ((v65 - v60) >> 3);
          if (2 * v67 > v59)
            v59 = 2 * v67;
          v68 = v67 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v59;
          v69 = (char *)sub_2367D1EBC(v68);
          v70 = &v69[24 * v61];
          *(_QWORD *)&v124 = v69;
          *((_QWORD *)&v124 + 1) = v70;
          v126 = &v69[24 * v71];
          bzero(v70, 24 * ((24 * v62 - 24) / 0x18) + 24);
          v125 = &v70[24 * ((24 * v62 - 24) / 0x18) + 24];
          sub_2367D1F00(v55, &v124);
          sub_236889748((uint64_t)&v124);
        }
      }
      v52 = v4[1];
      if (v52 != *v4)
        break;
      v53 = v4[1];
LABEL_96:
      ++v51;
      LODWORD(v50) = v120;
      v49 = v118;
      if (v51 == v121)
        goto LABEL_97;
    }
    v73 = 0;
    while (1)
    {
      sub_2368895C8(*(_QWORD *)(*(_QWORD *)(a1 + 520) + 24 * v51) + 24 * v73, (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
      v74 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
      if (v74)
        break;
LABEL_93:
      ++v73;
      v52 = *v4;
      v53 = v4[1];
      if (v73 >= (v53 - *v4) >> 4)
        goto LABEL_96;
    }
    v75 = 0;
    v76 = v74 >> 3;
    while (1)
    {
      --v76;
      v77 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v76);
      if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v77 + 24))(v77, v73) == 2)
      {
        v78 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v76);
        v79 = 2 * v75 + (1 << *(_DWORD *)(v78 + 32));
        v80 = __clz(v79) ^ 0x3F;
        if ((v79 & (v79 - 1)) != 0)
          v81 = v80 + 1;
        else
          v81 = v80;
        v75 = *(_QWORD *)(v78 + 16);
        sub_2367C431C((uint64_t)&v124, v123, 1 << v81);
        result = v128;
        if (v128)
          return result;
        v82 = v126;
        v83 = v127;
        v126 = 0;
        v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 520) + 24 * v51) + 24 * v73) + 40 * v76;
        *(_OWORD *)v84 = v124;
        v85 = *(_QWORD *)(v84 + 24);
        *(_QWORD *)(v84 + 16) = v125;
        *(_QWORD *)(v84 + 24) = v82;
        if (!v85)
        {
          *(_QWORD *)(v84 + 32) = v83;
LABEL_88:
          v89 = v126;
          v126 = 0;
          if (v89)
          {
            v90 = -*((_QWORD *)v89 - 3);
            do
              v91 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v91 + v90, &qword_2564313D8));
            free(*((void **)v89 - 4));
          }
          goto LABEL_92;
        }
        v86 = -*(_QWORD *)(v85 - 24);
        do
          v87 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v87 + v86, &qword_2564313D8));
        free(*(void **)(v85 - 32));
        v88 = v128;
        *(_QWORD *)(v84 + 32) = v83;
        if (!v88)
          goto LABEL_88;
      }
LABEL_92:
      if (!v76)
        goto LABEL_93;
    }
  }
LABEL_97:
  if (*(_QWORD *)(a1 + 720) != (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)
  {
    v92 = *(int64x2_t *)(a1 + 96);
    v93 = *(int64x2_t *)(a1 + 704);
    v94 = *(int32x2_t *)(a1 + 696);
    v95.i64[0] = v94.i32[0];
    v95.i64[1] = v94.i32[1];
    v96 = (int64x2_t)vandq_s8(v95, (int8x16_t)vcgtzq_s64((int64x2_t)v95));
    v97 = vaddw_s32(v92, v94);
    v98 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v97, v93), (int8x16_t)v93, (int8x16_t)v97);
    v99 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v96, v92), v98), vandq_s8((int8x16_t)vsubq_s64(v98, v96), (int8x16_t)vcgtq_s64(v98, v96)), (int8x16_t)v92);
    v100 = vmovn_s64(vceqzq_s64(v99));
    if (((v100.i8[0] | v100.i8[4]) & 1) != 0)
      v101 = 0;
    else
      v101 = v96.i64[0];
    v102 = v99.i64[0];
    if (((v100.i8[0] | v100.i8[4]) & 1) != 0)
      v102 = 0;
    v103 = v93.i64[0] - (v101 + v102);
    if (v49 > v103)
      v103 = v49;
    v104 = v101 <= v103 ? v103 : v101;
    v105 = (_QWORD *)(a1 + 544);
    sub_2368895C8((uint64_t)v105, v121);
    if (v121)
    {
      v106 = 0;
      v107 = v104 + v50;
      while (1)
      {
        sub_2367C431C((uint64_t)&v124, v107, (v4[1] - *v4) >> 4);
        result = v128;
        if (v128)
          return result;
        v108 = v126;
        v126 = 0;
        v109 = v127;
        v110 = *v105 + 40 * v106;
        *(_QWORD *)(v110 + 16) = v125;
        *(_OWORD *)v110 = v124;
        v111 = *(_QWORD *)(v110 + 24);
        *(_QWORD *)(v110 + 24) = v108;
        if (!v111)
          break;
        v112 = -*(_QWORD *)(v111 - 24);
        do
          v113 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v113 + v112, &qword_2564313D8));
        free(*(void **)(v111 - 32));
        v114 = v128;
        *(_QWORD *)(v110 + 32) = v109;
        if (!v114)
          goto LABEL_117;
LABEL_121:
        if (++v106 == v121)
          return 0;
      }
      *(_QWORD *)(v110 + 32) = v109;
LABEL_117:
      v115 = v126;
      v126 = 0;
      if (v115)
      {
        v116 = -*((_QWORD *)v115 - 3);
        do
          v117 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v117 + v116, &qword_2564313D8));
        free(*((void **)v115 - 4));
      }
      goto LABEL_121;
    }
  }
  return 0;
}

uint64_t sub_23688881C(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  int *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t i;
  uint64_t v110;
  unint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  void **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  int *v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  void *v167;
  _BYTE *v168;
  void *__p[2];
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  void **v174;
  char v175;

  v2 = (unint64_t *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  v3 = *(_QWORD *)(a1 + 112) / *(_QWORD *)(a1 + 128);
  v4 = __clz(v3) ^ 0x3F;
  if ((v3 & (v3 - 1)) != 0)
    v5 = v4 + 1;
  else
    v5 = v4;
  *(_QWORD *)(a1 + 472) = v5;
  v6 = *(uint64_t **)(a1 + 32);
  v8 = *v6;
  v7 = v6[1];
  v9 = v7 - *v6;
  if (v7 == *v6)
  {
    v28 = 0;
    v27 = 0;
    *v2 = 0;
    v12 = v9 >> 4;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = v9 >> 4;
    v13 = 1 << v5;
    v14 = v13 - 1;
    if (v12 <= 1)
      v15 = 1;
    else
      v15 = v12;
    v16 = (uint64_t *)(v8 + 8);
    v17 = (uint64_t *)(**(_QWORD **)(a1 + 56) + 8);
    v18 = v15;
    do
    {
      if (v11 <= (v14 + (*(v17 - 1) << *(v16 - 1))) / v13)
        v11 = (v14 + (*(v17 - 1) << *(v16 - 1))) / v13;
      *(_QWORD *)(a1 + 456) = v11;
      v20 = *v17;
      v17 += 2;
      v19 = v20;
      v21 = *v16;
      v16 += 2;
      v22 = (v14 + (v19 << v21)) / v13;
      if (v10 <= v22)
        v10 = v22;
      *(_QWORD *)(a1 + 464) = v10;
      --v18;
    }
    while (v18);
    v23 = (_QWORD *)(v8 + 8);
    v24 = v15;
    do
    {
      v25 = *(v23 - 1);
      if (v25 >= v5)
      {
        v11 = (v11 + (1 << (v25 - v5)) - 1) / (1 << (v25 - v5)) * (1 << (v25 - v5));
        *v2 = v11;
      }
      if (*v23 >= v5)
      {
        v10 = (v10 + (1 << (*v23 - v5)) - 1) / (1 << (*v23 - v5)) * (1 << (*v23 - v5));
        *(_QWORD *)(a1 + 464) = v10;
      }
      v23 += 2;
      --v24;
    }
    while (v24);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    *v2 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v29 = sub_236889450(a1, v26);
      if (v29 > v28)
        v28 = v29;
      if (v30 > v27)
        v27 = v30;
      ++v26;
    }
    while (v15 != v26);
  }
  *(_QWORD *)(a1 + 504) = (v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 512) = v27;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 3) < v12)
  {
    sub_2368895C8(a1 + 256, v12);
    sub_2368895C8(a1 + 280, (v6[1] - *v6) >> 4);
    v8 = *v6;
    v7 = v6[1];
  }
  if (v7 != v8)
  {
    v31 = 0;
    while (1)
    {
      v32 = sub_236889450(a1, v31);
      v34 = v33;
      v35 = *(_QWORD *)(a1 + 160);
      v36 = (_DWORD *)(v8 + 16 * v31);
      v37 = *(_QWORD *)(a1 + 120);
      v38 = (*(_QWORD *)(a1 + 112) + (1 << *v36) - 1) / (unint64_t)(1 << *v36);
      v39 = v36[2];
      v40 = (2 * *(_QWORD *)(a1 + 168) - 2) * v34;
      v41 = (_DWORD *)(*(_QWORD *)(a1 + 256) + 40 * v31);
      if (v38 == *v41 && v40 == v41[1])
        goto LABEL_46;
      v42 = v32;
      sub_2367C431C((uint64_t)__p, v38, v40);
      v43 = v173;
      if (v173)
        return v43;
      v44 = v171;
      v171 = 0;
      v45 = v172;
      v46 = *(_QWORD *)(a1 + 256) + 40 * v31;
      *(_QWORD *)(v46 + 16) = v170;
      *(_OWORD *)v46 = *(_OWORD *)__p;
      v47 = *(_QWORD *)(v46 + 24);
      *(_QWORD *)(v46 + 24) = v44;
      if (!v47)
        break;
      v48 = -*(_QWORD *)(v47 - 24);
      do
        v49 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v49 + v48, &qword_2564313D8));
      free(*(void **)(v47 - 32));
      v50 = v173;
      *(_QWORD *)(v46 + 32) = v45;
      if (!v50)
        goto LABEL_41;
LABEL_45:
      v32 = v42;
LABEL_46:
      v54 = (v37 + (1 << v39) - 1) / (unint64_t)(1 << v39);
      v55 = (2 * v35 - 2) * v32;
      v56 = (unsigned int *)(*(_QWORD *)(a1 + 280) + 40 * v31);
      v58 = *v56;
      v57 = v56[1];
      v59 = v55 == v58 && v54 == v57;
      if (!v59)
      {
        sub_2367C431C((uint64_t)__p, v55, v54);
        v43 = v173;
        if (v173)
          return v43;
        v60 = v171;
        v171 = 0;
        v61 = v172;
        v62 = *(_QWORD *)(a1 + 280) + 40 * v31;
        *(_QWORD *)(v62 + 16) = v170;
        *(_OWORD *)v62 = *(_OWORD *)__p;
        v63 = *(_QWORD *)(v62 + 24);
        *(_QWORD *)(v62 + 24) = v60;
        if (!v63)
        {
          *(_QWORD *)(v62 + 32) = v61;
LABEL_57:
          v67 = v171;
          v171 = 0;
          if (v67)
          {
            v68 = -*(_QWORD *)(v67 - 24);
            do
              v69 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v69 + v68, &qword_2564313D8));
            free(*(void **)(v67 - 32));
          }
          goto LABEL_61;
        }
        v64 = -*(_QWORD *)(v63 - 24);
        do
          v65 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v65 + v64, &qword_2564313D8));
        free(*(void **)(v63 - 32));
        v66 = v173;
        *(_QWORD *)(v62 + 32) = v61;
        if (!v66)
          goto LABEL_57;
      }
LABEL_61:
      ++v31;
      v8 = *v6;
      if (v31 >= (v6[1] - *v6) >> 4)
        goto LABEL_62;
    }
    *(_QWORD *)(v46 + 32) = v45;
LABEL_41:
    v51 = v171;
    v171 = 0;
    if (v51)
    {
      v52 = -*(_QWORD *)(v51 - 24);
      do
        v53 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v53 + v52, &qword_2564313D8));
      free(*(void **)(v51 - 32));
    }
    goto LABEL_45;
  }
LABEL_62:
  v70 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 416) = v70;
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 208);
  v71 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 352) = v71;
  v72 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 384) = v72;
  v73 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 320) = v73;
  v74 = operator new[]();
  v75 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v74;
  if (v75)
    MEMORY[0x23B7F8F30](v75, 0x1000C8077774924);
  v76 = *(_QWORD *)(a1 + 392);
  if (v76 != -1)
  {
    v77 = 0;
    v78 = *(_QWORD *)(a1 + 384);
    do
    {
      v79 = v78 + 1;
      if (v78 == -1)
      {
        v78 = -1;
      }
      else
      {
        v80 = 0;
        do
        {
          if (v80)
            v81 = 0;
          else
            v81 = 9;
          if (v80 == v78)
            v82 = v81 | 6;
          else
            v82 = v81;
          if (!v77)
            v82 |= 3u;
          if (v77 == *(_QWORD *)(a1 + 392))
            v82 |= 0xCu;
          atomic_store(v82, (unsigned __int8 *)(*(_QWORD *)(a1 + 448) + v77 * v79 + v80++));
          v78 = *(_QWORD *)(a1 + 384);
          v79 = v78 + 1;
        }
        while (v80 < v78 + 1);
        v76 = *(_QWORD *)(a1 + 392);
      }
      ++v77;
    }
    while (v77 < v76 + 1);
  }
  v83 = *(_QWORD *)(a1 + 16);
  v84 = v83 - *(_QWORD *)(a1 + 8);
  v85 = v84 >> 3;
  *(_QWORD *)(a1 + 688) = v84 >> 3;
  if (!v84)
  {
    v92 = (unint64_t *)(a1 + 720);
    *(_QWORD *)(a1 + 720) = 0;
    v107 = v83;
    v91 = v83;
    goto LABEL_112;
  }
  v87 = *v6;
  v86 = v6[1];
  while (1)
  {
    v59 = v86 == v87;
    v86 = v87;
    if (!v59)
      break;
LABEL_89:
    *(_QWORD *)(a1 + 688) = --v85;
    if (!v85)
      goto LABEL_90;
  }
  v88 = 0;
  v89 = 0;
  do
  {
    v90 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 688) - 8);
    v88 |= (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v90 + 24))(v90, v89++) == 2;
    v87 = *v6;
    v86 = v6[1];
  }
  while (v89 < (v86 - *v6) >> 4);
  if ((v88 & 1) == 0)
  {
    v85 = *(_QWORD *)(a1 + 688);
    goto LABEL_89;
  }
LABEL_90:
  v83 = *(_QWORD *)(a1 + 8);
  v91 = *(_QWORD *)(a1 + 16);
  v92 = (unint64_t *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = (v91 - v83) >> 3;
  if (v91 == v83)
  {
    v107 = v83;
  }
  else
  {
    v93 = 0;
    while (1)
    {
      sub_2368581DC(__p, (v6[1] - *v6) >> 4);
      v94 = v6[1] - *v6;
      if (v94)
      {
        v95 = v94 >> 4;
        v96 = *(_QWORD *)(a1 + 96) - 1;
        v97 = *(_QWORD *)(a1 + 104) - 1;
        if (v95 <= 1)
          v95 = 1;
        v98 = (unint64_t *)((char *)__p[0] + 8);
        v99 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24 * v93) + 8);
        do
        {
          v100 = (v96 + (1 << *(v99 - 2))) / (unint64_t)(1 << *(v99 - 2));
          v101 = *v99;
          v99 += 4;
          *(v98 - 1) = v100;
          *v98 = (v97 + (1 << v101)) / (unint64_t)(1 << v101);
          v98 += 2;
          --v95;
        }
        while (v95);
      }
      v102 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v93);
      v43 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v102 + 40))(v102, __p);
      if ((_DWORD)v43)
      {
        v103 = 0;
        v104 = 0;
      }
      else
      {
        v105 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v93);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v105 + 56))(v105))
        {
          *(_QWORD *)(a1 + 720) = v93 + 1;
          v106 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v93);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106 + 64))(v106, a1 + 704, a1 + 712, a1 + 696);
          v103 = 0;
          v104 = 1;
        }
        else
        {
          v104 = 0;
          v103 = 1;
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v103 & 1) == 0)
        break;
      ++v93;
      v83 = *(_QWORD *)(a1 + 8);
      v107 = *(_QWORD *)(a1 + 16);
      if (v93 >= (v107 - v83) >> 3)
        goto LABEL_111;
    }
    if (!v104)
      return v43;
    v83 = *(_QWORD *)(a1 + 8);
    v107 = *(_QWORD *)(a1 + 16);
LABEL_111:
    v91 = v83;
    v92 = (unint64_t *)(a1 + 720);
  }
LABEL_112:
  v108 = *v92;
  for (i = v107 - v83; v108 < i >> 3; i = *(_QWORD *)(a1 + 16) - v91)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v91 + 8 * v108) + 56))(*(_QWORD *)(v91 + 8 * v108));
    sub_2368581DC(__p, (v6[1] - *v6) >> 4);
    v110 = v6[1] - *v6;
    if (v110)
    {
      v111 = v110 >> 4;
      v112 = __p[0];
      if (v111 <= 1)
        v111 = 1;
      do
      {
        *v112++ = *(_OWORD *)(a1 + 704);
        --v111;
      }
      while (v111);
    }
    v113 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v108);
    v43 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v113 + 40))(v113, __p);
    if ((_DWORD)v43)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return v43;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v108;
    v91 = *(_QWORD *)(a1 + 8);
  }
  sub_2367C5284((char **)(a1 + 568), i >> 3);
  v115 = *(_QWORD *)(a1 + 8);
  v114 = *(_QWORD *)(a1 + 16);
  v116 = *v6;
  v117 = v6[1];
  v118 = v114 - v115;
  if (v114 != v115)
  {
    v119 = 0;
    do
    {
      v59 = v117 == v116;
      v117 = v116;
      if (!v59)
      {
        v120 = 0;
        do
        {
          v121 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v119);
          if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v121 + 24))(v121, v120))
            *(_DWORD *)(*(_QWORD *)(a1 + 568) + 4 * v119) = v120;
          ++v120;
          v116 = *v6;
          v117 = v6[1];
        }
        while (v120 < (v117 - *v6) >> 4);
        v115 = *(_QWORD *)(a1 + 8);
        v114 = *(_QWORD *)(a1 + 16);
      }
      ++v119;
      v118 = v114 - v115;
    }
    while (v119 < (v114 - v115) >> 3);
  }
  v122 = v118 >> 3;
  sub_2367CBE88(&v167, (v117 - v116) >> 4);
  __p[0] = 0;
  __p[1] = 0;
  v170 = 0;
  v174 = __p;
  v175 = 0;
  if (v122)
  {
    if (v122 >= 0xAAAAAAAAAAAAAABLL)
      sub_2367C3440();
    v123 = sub_2367D1EBC(v122);
    __p[0] = v123;
    __p[1] = v123;
    v170 = &v123[3 * v124];
    v125 = 3 * v122;
    v126 = &v123[3 * v122];
    v127 = 8 * v125;
    do
    {
      *v123 = 0;
      v123[1] = 0;
      v123[2] = 0;
      sub_2367CBEFC(v123, v167, (uint64_t)v168, (v168 - (_BYTE *)v167) >> 2);
      v123 += 3;
      v127 -= 24;
    }
    while (v127);
    __p[1] = v126;
  }
  v128 = (void **)(a1 + 616);
  if (*(_QWORD *)(a1 + 616))
  {
    sub_2367D1824((uint64_t *)(a1 + 616));
    operator delete(*v128);
    *v128 = 0;
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 632) = 0;
  }
  *(_OWORD *)v128 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 632) = v170;
  __p[1] = 0;
  v170 = 0;
  __p[0] = 0;
  v174 = __p;
  sub_2367D17E4(&v174);
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  v130 = *v6;
  v129 = v6[1];
  v131 = *(_QWORD *)(a1 + 8);
  v132 = *(_QWORD *)(a1 + 16);
  if (v129 != *v6)
  {
    v133 = 0;
    do
    {
      if (v132 == v131)
      {
        v132 = v131;
      }
      else
      {
        v134 = 0;
        v135 = 0;
        v136 = -1;
        do
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 616) + v134) + 4 * v133) = v136;
          if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v131 + 8 * v135) + 24))(*(_QWORD *)(v131 + 8 * v135), v133) == 2)v136 = v135;
          ++v135;
          v131 = *(_QWORD *)(a1 + 8);
          v132 = *(_QWORD *)(a1 + 16);
          v134 += 24;
        }
        while (v135 < (v132 - v131) >> 3);
        v130 = *v6;
        v129 = v6[1];
      }
      ++v133;
    }
    while (v133 < (v129 - v130) >> 4);
  }
  sub_2368894B0((char **)(a1 + 592), (v132 - v131) >> 3);
  v137 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v138 = v137 >> 3;
  if (v137)
  {
    v139 = *(uint64_t **)(a1 + 32);
    v140 = *(int **)(a1 + 568);
    if (v138 <= 1)
      v141 = 1;
    else
      v141 = v138;
    v142 = (unint64_t *)(*(_QWORD *)(a1 + 592) + 24);
    do
    {
      v144 = *v140++;
      v143 = v144;
      v145 = *v139;
      v139 += 3;
      v146 = (_DWORD *)(v145 + 16 * v143);
      v147 = *(_QWORD *)(a1 + 104);
      v148 = (*(_QWORD *)(a1 + 96) + (1 << *v146) - 1) / (unint64_t)(1 << *v146);
      v149 = 1 << v146[2];
      *(v142 - 3) = 0;
      *(v142 - 2) = 0;
      *(v142 - 1) = v148;
      *v142 = (v147 + v149 - 1) / v149;
      v142 += 4;
      --v141;
    }
    while (v141);
  }
  sub_2367C5284((char **)(a1 + 640), v138);
  sub_2367C5284((char **)(a1 + 664), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v151 = *v6;
  v150 = v6[1];
  if (v150 != *v6)
  {
    v152 = 0;
    do
    {
      v153 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
      if (v153)
      {
        v154 = 0;
        LODWORD(v155) = 0;
        v156 = v153 >> 3;
        v157 = 24 * (v153 >> 3) - 24;
        do
        {
          v158 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v156 - 8);
          if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v158 + 24))(v158, v152))
          {
            v159 = *(_QWORD *)(a1 + 640) + 4 * v156;
            v160 = *(_DWORD *)(v159 - 4);
            if ((int)v155 > v160)
              v160 = v155;
            *(_DWORD *)(v159 - 4) = v160;
            v161 = *(_QWORD *)(a1 + 664) + 4 * v156;
            v162 = *(_DWORD *)(v161 - 4);
            if (v154 > v162)
              v162 = v154;
            *(_DWORD *)(v161 - 4) = v162;
          }
          v163 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v156 - 8);
          if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v163 + 24))(v163, v152) == 2)
          {
            v164 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v157) + 16 * v152 + 8);
            v165 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 8 * v156 - 8);
            v155 = (unint64_t)(v165[4] + ((int)v155 + (1 << v164) - 1) / (1 << v164)) << v164;
            v154 = (v154 + (1 << v165[6]) - 1) / (1 << v165[6]) + v165[2];
          }
          v157 -= 24;
          --v156;
        }
        while (v156);
        v151 = *v6;
        v150 = v6[1];
      }
      ++v152;
    }
    while (v152 < (v150 - v151) >> 4);
  }
  return 0;
}

void sub_236889408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  sub_2367D17E4(&a21);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_236889450(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(**(_QWORD **)(a1 + 32) + 16 * a2);
  return ((unint64_t)((*(_QWORD *)(a1 + 456) << *(_QWORD *)(a1 + 472)) + (1 << *v2) - 1) >> *v2)
       + *(_QWORD *)(**(_QWORD **)(a1 + 56) + 16 * a2);
}

void sub_2368894B0(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[32 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 5)
  {
    bzero(a1[1], 32 * v6);
    v16 = &v3[32 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 59)
    sub_2367C3440();
  v8 = v7 - v4;
  v9 = v8 >> 4;
  if (v8 >> 4 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 59)
    sub_2367C3488();
  v11 = (char *)operator new(32 * v10);
  v12 = &v11[32 * v5];
  v13 = &v11[32 * v10];
  bzero(v12, 32 * v6);
  v14 = &v12[32 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_OWORD *)v3 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v3 - 2);
      *((_OWORD *)v12 - 1) = v15;
      v12 -= 32;
      v3 -= 32;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void sub_2368895C8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  unint64_t i;
  size_t v16;
  _QWORD v17[5];

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      for (i = v3 + 40 * a2; v4 != i; v4 -= 40)
        sub_2367C2F38((uint64_t *)(v4 - 16));
      *(_QWORD *)(a1 + 8) = i;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
    {
      v16 = 40 * ((40 * v6 - 40) / 0x28) + 40;
      bzero(*(void **)(a1 + 8), v16);
      *(_QWORD *)(a1 + 8) = v4 + v16;
    }
    else
    {
      if (a2 > 0x666666666666666)
        sub_2367C3440();
      v17[4] = a1 + 16;
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x333333333333333)
        v10 = 0x666666666666666;
      else
        v10 = v9;
      v11 = (char *)sub_2367DC0A4(v10);
      v12 = &v11[40 * v5];
      v17[0] = v11;
      v17[1] = v12;
      v17[3] = &v11[40 * v13];
      v14 = 40 * ((40 * v6 - 40) / 0x28) + 40;
      bzero(v12, v14);
      v17[2] = &v12[v14];
      sub_236815500((uint64_t *)a1, v17);
      sub_2367F6844((uint64_t)v17);
    }
  }
}

uint64_t sub_236889748(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_2367D077C(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2368897A4(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_2367D077C(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_236889824(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  void *__p;
  void *v20;
  uint64_t v21;
  _QWORD v22[3];
  void **p_p;

  if (!a3[2])
    return 0;
  v6 = (uint64_t *)a1[4];
  v8 = *v6;
  v7 = v6[1];
  v9 = (v7 - *v6) >> 4;
  sub_2367E1480(&__p, 1uLL);
  sub_2367E14F4(v22, v9, (uint64_t)&__p);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = 0;
  v20 = 0;
  v21 = 0;
  if (v7 != v8)
  {
    v10 = 0;
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    do
    {
      **(_QWORD **)(v22[0] + v10) = *(_QWORD *)(a1[68] + 40 * a2 + 24) + *(_QWORD *)(a1[68] + 40 * a2 + 16) * v11++;
      v10 += 24;
    }
    while (v12 != v11);
  }
  if (a3[3])
  {
    v13 = 0;
    v14 = a1[1];
    do
    {
      v15 = *(_QWORD *)(v14 + 8 * a1[90] - 8);
      (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)v15 + 72))(v15, v22, a3[2], *a3, a3[1] + v13);
      for (i = a1[90]; ; ++i)
      {
        v14 = a1[1];
        if (i >= (a1[2] - v14) >> 3)
          break;
        v17 = (*(uint64_t (**)(_QWORD, _QWORD *, void **, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v14 + 8 * i) + 16))(*(_QWORD *)(v14 + 8 * i), v22, &__p, 0, a3[2], *a3, a3[1] + v13, a2);
        if ((_DWORD)v17)
          goto LABEL_17;
      }
      ++v13;
    }
    while (v13 < a3[3]);
  }
  v17 = 0;
LABEL_17:
  p_p = &__p;
  sub_2367C4718(&p_p);
  __p = v22;
  sub_2367C4718((void ***)&__p);
  return v17;
}

void sub_2368899BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_236889A04(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_2367C3440();
  v3 = 3 * a2;
  result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

_QWORD *sub_236889A50(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v3 = *(const void **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 != *(_QWORD *)a2)
  {
    v5 = result;
    sub_236889A04(result, 0xAAAAAAAAAAAAAAABLL * (v4 >> 3));
    v6 = (char *)v5[1];
    result = memmove(v6, v3, v4);
    v5[1] = &v6[8 * (v4 >> 3)];
  }
  return result;
}

void sub_236889AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_236889AE4(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  float result;
  uint64_t v25;
  float *v26;
  float *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = **a1 + a3 - *(_QWORD *)a1[1];
  v4 = a1[4];
  v5 = *(_QWORD *)a1[3];
  v6 = *(_QWORD *)(*(_QWORD *)a1[2] + 32 * v5 + 8);
  v7 = *(_QWORD *)(*((_QWORD *)v4 + 74) + 32 * v5 + 24);
  if (!v6 && ((v3 & 0x80000000) != 0 || **a1 + (_DWORD)a3 - *a1[1] >= v7))
  {
    v6 = (int)v3;
    if (((v3 << 32) & 0x8000000000000000) != 0 || (int)v3 >= v7)
    {
      v39 = (v3 >> 31) & 1;
      do
      {
        v40 = ~v6;
        if ((v39 & 1) != 0)
          v41 = 0;
        else
          v41 = 2 * v7;
        v6 = v41 + v40;
        v39 = (unint64_t)v6 >> 63;
      }
      while (v6 < 0 || v6 >= v7);
    }
  }
  else
  {
    v8 = v6 + (int)v3;
    LODWORD(v6) = ~(_DWORD)v8 - v6 + 2 * v7;
    if (v8 < v7)
      LODWORD(v6) = **a1 + a3 - *a1[1];
  }
  v9 = 3 * v5;
  v10 = *(_QWORD *)(*(_QWORD *)a1[6] + 24 * *(int *)(*(_QWORD *)(*((_QWORD *)v4 + 77) + 8 * v9) + 4 * a2) + 24)
      + 24 * a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[5] + 8 * v9) + 24 * a2) + 8 * a3) = *(_QWORD *)v10
                                                                                      + 4
                                                                                      * *(_QWORD *)(v10 + 16)
                                                                                      * (int)(*(_DWORD *)(v10 + 8) & v6);
  v11 = *(_QWORD *)a1[3];
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[5] + 24 * v11) + 24 * a2) + 8 * a3);
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v11) + 8);
  v14 = (uint64_t *)(*(_QWORD *)a1[2] + 32 * v11);
  v15 = *v14;
  v16 = v14[2];
  v17 = *(_QWORD *)(*((_QWORD *)v4 + 74) + 32 * v11 + 16);
  if (*v14)
    v18 = 1;
  else
    v18 = v13 <= 0;
  v19 = !v18;
  if (v17 <= v13)
  {
    if (v19)
    {
      v29 = 0;
      do
      {
        v30 = ~v29;
        LOBYTE(v31) = 1;
        do
        {
          v32 = ~v30;
          if ((v31 & 1) != 0)
            v33 = 0;
          else
            v33 = 2 * v17;
          v30 = v33 + v32;
          v31 = (unint64_t)v30 >> 63;
        }
        while (v30 < 0 || v30 >= v17);
        result = *(float *)(v12 + 4 * v30 + 64);
        *(float *)(v12 + 4 * (15 - v29++)) = result;
      }
      while (v29 != v13);
    }
    if (v15 + v13 + v16 >= v17 && v13 >= 1)
    {
      for (i = 0; i != v13; ++i)
      {
        v35 = i + v17;
        v36 = (unint64_t)(i + v17) >> 63;
        do
        {
          v37 = ~v35;
          if ((v36 & 1) != 0)
            v38 = 0;
          else
            v38 = 2 * v17;
          v35 = v38 + v37;
          v36 = (unint64_t)v35 >> 63;
        }
        while (v35 < 0 || v35 >= v17);
        result = *(float *)(v12 + 4 * (v35 - v15) + 64);
        *(float *)(v12 + 4 * (v17 - v15 + 16 + i)) = result;
      }
    }
  }
  else
  {
    if (v19)
    {
      v20 = (float *)(v12 + 60);
      v21 = (float *)(v12 + 64);
      v22 = v13;
      do
      {
        v23 = *v21++;
        result = v23;
        *v20-- = v23;
        --v22;
      }
      while (v22);
    }
    if (v15 + v13 + v16 >= v17 && v13 >= 1)
    {
      v25 = v12 - 4 * v15 + 4 * v17;
      v26 = (float *)(v25 + 64);
      v27 = (float *)(v25 + 60);
      do
      {
        v28 = *v27--;
        result = v28;
        *v26++ = v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void sub_236889D5C(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    sub_2367C3440();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_2367CA1FC(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void sub_236889E54(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_2367C4718(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_236889ED4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_236889F40(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void **v11;

  v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(_QWORD *)(a1 + 672) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 640);
  if (v3)
  {
    *(_QWORD *)(a1 + 648) = v3;
    operator delete(v3);
  }
  v11 = (void **)(a1 + 616);
  sub_2367D17E4(&v11);
  v4 = *(void **)(a1 + 592);
  if (v4)
  {
    *(_QWORD *)(a1 + 600) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 568);
  if (v5)
  {
    *(_QWORD *)(a1 + 576) = v5;
    operator delete(v5);
  }
  v11 = (void **)(a1 + 544);
  sub_2367D077C(&v11);
  v6 = *(void ***)(a1 + 520);
  if (v6)
  {
    v7 = *(void ***)(a1 + 528);
    v8 = *(void **)(a1 + 520);
    if (v7 != v6)
    {
      do
      {
        v7 -= 3;
        v11 = v7;
        sub_2368897A4(&v11);
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 528) = v6;
    operator delete(v8);
  }
  v11 = (void **)(a1 + 480);
  sub_2368897A4(&v11);
  v9 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v9)
    MEMORY[0x23B7F8F30](v9, 0x1000C8077774924);
  v11 = (void **)(a1 + 280);
  sub_2367D077C(&v11);
  v11 = (void **)(a1 + 256);
  sub_2367D077C(&v11);
  return sub_23688A05C(a1);
}

uint64_t sub_23688A05C(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_2507FFAE0;
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 56);
  sub_2367C4718(&v4);
  v4 = (void **)(a1 + 32);
  sub_2367C4718(&v4);
  v4 = (void **)(a1 + 8);
  sub_2367D07F0(&v4);
  return a1;
}

uint64_t sub_23688A0DC()
{
  return 0;
}

void sub_23688A0E4(char **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int64x2_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_2367C3440();
    v9 = v4 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 61)
        sub_2367C3488();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = *a2;
    *a2 = 0;
    *(_QWORD *)v13 = v14;
    v7 = v13 + 8;
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      v18 = vdupq_n_s64((unint64_t)v15);
    }
    else
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v18 = *(int64x2_t *)a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = &v12[8 * v11];
    v20 = (_QWORD *)v18.i64[1];
    v19 = (_QWORD *)v18.i64[0];
    while (v20 != v19)
    {
      v22 = *--v20;
      v21 = v22;
      *v20 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)v5 = v6;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

void sub_23688A20C(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v18 = &v4[16 * v6];
LABEL_17:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60)
    sub_2367C3440();
  v8 = v7 - v3;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_2367CD8AC(v10);
  v12 = &v11[16 * v5];
  v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[16 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

uint64_t sub_23688A310(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;

  v6 = (_QWORD *)a1[1];
  v7 = (_QWORD *)a1[2];
  while (v6 != v7)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 48))(*v6, a2);
    if ((_DWORD)result)
      return result;
    ++v6;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, a3);
}

uint64_t sub_23688A398(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_2507FFC58;
  v3 = (void **)(a1 + 248);
  sub_2367D077C(&v3);
  return sub_23688A05C(a1);
}

void sub_23688A3DC(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &off_2507FFC58;
  v2 = (void **)(a1 + 248);
  sub_2367D077C(&v2);
  sub_23688A05C(a1);
  JUMPOUT(0x23B7F8F48);
}

void sub_23688A434(uint64_t a1@<X0>, unint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(a1 + 248);
  if (*(_QWORD *)(a1 + 256) != v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v4 + 40 * v9;
      sub_23688B7FC((unint64_t *)&v23, a1, a2, v9);
      v11 = a3[2];
      if (v8 >= v11)
      {
        v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v8 - v7) >> 3) + 1;
        if (v13 > 0x666666666666666)
          sub_2367C3440();
        v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v11 - v7) >> 3);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x333333333333333)
          v15 = 0x666666666666666;
        else
          v15 = v13;
        if (v15)
          v15 = (unint64_t)sub_2367DC0A4(v15);
        else
          v16 = 0;
        v17 = v15 + 8 * ((uint64_t)((uint64_t)v8 - v7) >> 3);
        *(_QWORD *)v17 = v10;
        v18 = v24;
        *(_OWORD *)(v17 + 8) = v23;
        *(_OWORD *)(v17 + 24) = v18;
        v19 = *a3;
        if (v8 == *a3)
        {
          v7 = v15 + 8 * ((uint64_t)((uint64_t)v8 - v7) >> 3);
        }
        else
        {
          v20 = v15 + 8 * ((uint64_t)((uint64_t)v8 - v7) >> 3);
          do
          {
            v7 = v20 - 40;
            v21 = *(_OWORD *)(v8 - 5);
            v22 = *(_OWORD *)(v8 - 3);
            *(_QWORD *)(v20 - 8) = *(v8 - 1);
            *(_OWORD *)(v20 - 24) = v22;
            *(_OWORD *)(v20 - 40) = v21;
            v8 -= 5;
            v20 -= 40;
          }
          while (v8 != v19);
        }
        v8 = (_QWORD *)(v17 + 40);
        *a3 = (void *)v7;
        a3[1] = (void *)(v17 + 40);
        a3[2] = (void *)(v15 + 40 * v16);
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v8 = v10;
        v12 = v23;
        *(_OWORD *)(v8 + 3) = v24;
        *(_OWORD *)(v8 + 1) = v12;
        v8 += 5;
      }
      a3[1] = v8;
      ++v9;
      v4 = *(_QWORD *)(a1 + 248);
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 256) - v4) >> 3));
  }
}

void sub_23688A5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23688A600(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint32x2_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64x2_t *v28;
  uint32x2_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  int *v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  BOOL v154;
  char v155;
  size_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64x2_t *v166;
  uint64_t v167;
  uint64x2_t v168;
  void *v169;
  BOOL v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  char v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  int v187;
  int v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD v191[3];
  _QWORD v192[3];
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  void *v198[3];
  _QWORD v199[3];
  _QWORD v200[6];

  v3 = a1;
  v4 = (uint64_t *)(a1 + 248);
  v5 = *(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248);
  if (v5)
  {
    v7 = 0;
    v8 = v5 / 40;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    do
      sub_23688B7FC((unint64_t *)&v193, v3, a2, v7++);
    while (v9 != v7);
  }
  v10 = *(unsigned __int8 **)(v3 + 224);
  v11 = *(unsigned __int8 **)(v3 + 232);
  v12 = v10 + 1;
  if (v10 != v11 && v12 != v11)
  {
    v14 = *v10;
    v15 = v10 + 1;
    do
    {
      v17 = *v15++;
      v16 = v17;
      if (v17 < v14)
      {
        v14 = v16;
        v10 = v12;
      }
      v12 = v15;
    }
    while (v15 != v11);
  }
  v18 = *v10;
  v19 = *(_QWORD *)(v3 + 272);
  if (v19 < v18)
  {
    *(_QWORD *)(v3 + 272) = v19 + 1;
    v20 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)(v3 + 16) != v20)
    {
      v21 = 0;
      v166 = (uint64x2_t *)(v3 + 80);
      v167 = v3 + 264;
      v168 = (uint64x2_t)vdupq_n_s64(0xFFFFFFFFFFFFFFE0);
      v184 = v3;
      do
      {
        sub_236831C08(v199, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 256) - *(_QWORD *)(v3 + 248)) >> 3));
        v22 = *(_QWORD *)(v3 + 256) - *(_QWORD *)(v3 + 248);
        v23 = 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3);
        if (v22)
        {
          if (v23 >> 61)
            sub_2367C3440();
          v24 = operator new(0x6666666666666668 * (v22 >> 3));
          bzero(v24, 8 * v23);
        }
        else
        {
          v24 = 0;
        }
        sub_2368581DC(v198, v23);
        v25 = *(uint32x2_t **)(v3 + 248);
        v26 = *(_QWORD *)(v3 + 256) - (_QWORD)v25;
        if (v26)
        {
          v27 = v26 / 40;
          v28 = (uint64x2_t *)v198[0];
          if (v27 <= 1)
            v27 = 1;
          do
          {
            v29 = *v25;
            v25 += 5;
            *v28++ = vaddw_u32(v168, v29);
            --v27;
          }
          while (v27);
          v30 = 0;
          do
          {
            if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v20 + 8 * v21) + 24))(*(_QWORD *)(v20 + 8 * v21), v30) == 2)
            {
              sub_2367C431C((uint64_t)&v193, *(_QWORD *)(v3 + 112) + 160, *(_DWORD *)(v3 + 120) + 32);
              v31 = v197;
              if (v197)
              {
                v95 = 1;
                goto LABEL_124;
              }
              v33 = v194;
              v32 = v195;
              v195 = 0;
              v34 = v196;
              v35 = v199[0] + 40 * v30;
              *(_OWORD *)v35 = v193;
              v36 = *(_QWORD *)(v35 + 24);
              *(_QWORD *)(v35 + 16) = v33;
              *(_QWORD *)(v35 + 24) = v32;
              if (v36)
              {
                v37 = -*(_QWORD *)(v36 - 24);
                do
                  v38 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v38 + v37, &qword_2564313D8));
                free(*(void **)(v36 - 32));
                LODWORD(v36) = v197;
              }
              *(_QWORD *)(v35 + 32) = v34;
              v39 = v199[0];
              *(int32x2_t *)(v199[0] + 40 * v30) = vadd_s32(vmovn_s64((int64x2_t)vshlq_u64(*((uint64x2_t *)v198[0] + v30), *(uint64x2_t *)(*(_QWORD *)(v20 + 8 * v21)+ 24))), (int32x2_t)0x2000000020);
              *((_QWORD *)v24 + v30) = v39 + 40 * v30;
              v3 = v184;
              if (!(_DWORD)v36)
              {
                v40 = v195;
                v195 = 0;
                if (v40)
                {
                  v41 = -*(_QWORD *)(v40 - 24);
                  do
                    v42 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v42 + v41, &qword_2564313D8));
                  free(*(void **)(v40 - 32));
                }
              }
            }
            ++v30;
            v44 = *(_QWORD *)(v3 + 248);
            v43 = *(_QWORD *)(v3 + 256);
          }
          while (v30 < 0xCCCCCCCCCCCCCCCDLL * ((v43 - v44) >> 3));
          if (v43 == v44)
            goto LABEL_97;
          v45 = 0;
          do
          {
            if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v20 + 8 * v21) + 24))(*(_QWORD *)(v20 + 8 * v21), v45) == 2)
            {
              v46 = (uint64_t *)((char *)v198[0] + 16 * v45);
              v47 = v46[1];
              v48 = *(_QWORD *)(v20 + 8 * v21);
              if (v47)
              {
                v49 = 0;
                v51 = *(_QWORD *)(*v4 + 40 * v45 + 16);
                v50 = *(_QWORD *)(*v4 + 40 * v45 + 24);
                v52 = *(_QWORD *)(v48 + 8);
                do
                {
                  if (v52)
                  {
                    v53 = 0;
                    v54 = v50 + v51 * (v49 + 16);
                    v55 = v54 + 64;
                    v56 = v54 + 60;
                    v57 = *v46;
                    v58 = 2 * *v46;
                    do
                    {
                      v59 = ~v53;
                      if ((v53 & 0x8000000000000000) == 0 || v57 <= v59)
                      {
                        LOBYTE(v60) = v53 >= 0;
                        do
                        {
                          v61 = ~v59;
                          if ((v60 & 1) != 0)
                            v62 = 0;
                          else
                            v62 = v58;
                          v59 = v62 + v61;
                          v60 = (unint64_t)v59 >> 63;
                        }
                        while (v59 < 0 || v59 >= v57);
                      }
                      *(_DWORD *)(v56 - 4 * v53++) = *(_DWORD *)(v55 + 4 * v59);
                    }
                    while (v53 != v52);
                    for (i = 0; i != v52; ++i)
                    {
                      v64 = v57 + i;
                      if (v57 + i < 0 || v64 >= v57)
                      {
                        v65 = (unint64_t)v64 >> 63;
                        do
                        {
                          v66 = ~v64;
                          if ((v65 & 1) != 0)
                            v67 = 0;
                          else
                            v67 = v58;
                          v64 = v67 + v66;
                          v65 = (unint64_t)v64 >> 63;
                        }
                        while (v64 < 0 || v64 >= v57);
                      }
                      *(_DWORD *)(v55 + 4 * v57 + 4 * i) = *(_DWORD *)(v55 + 4 * v64);
                    }
                  }
                  ++v49;
                }
                while (v49 != v47);
              }
              if (*(int *)(v48 + 16) >= 1)
              {
                v68 = 0;
                do
                {
                  v71 = *(_QWORD *)(v48 + 8);
                  v72 = ~v68;
                  v73 = *((_QWORD *)v198[0] + 2 * v45 + 1);
                  LOBYTE(v74) = 1;
                  do
                  {
                    v75 = ~v72;
                    if ((v74 & 1) != 0)
                      v76 = 0;
                    else
                      v76 = 2 * v73;
                    v72 = v76 + v75;
                    v74 = (unint64_t)v72 >> 63;
                  }
                  while (v72 < 0 || v72 >= v73);
                  v69 = *(_QWORD *)(*v4 + 40 * v45 + 24);
                  v70 = *(_QWORD *)(*v4 + 40 * v45 + 16);
                  memcpy((void *)(v69 + v70 * (15 - v68++) - 4 * v71 + 64), (const void *)(v69 + (v72 + 16) * v70 - 4 * v71 + 64), 4 * *((_QWORD *)v198[0] + 2 * v45) + 8 * v71);
                  v48 = *(_QWORD *)(v20 + 8 * v21);
                  v77 = *(_QWORD *)(v48 + 16);
                }
                while (v68 < (int)v77);
                if ((int)v77 >= 1)
                {
                  v78 = 0;
                  do
                  {
                    v79 = (char *)v198[0] + 16 * v45;
                    v80 = v79[1];
                    v81 = *v4 + 40 * v45;
                    v82 = v80 + v78;
                    v83 = *(_QWORD *)(v81 + 16);
                    if (v80 + v78 < 0 || (v84 = v83 * (v80 + v78 + 16), v82 >= v80))
                    {
                      v85 = (unint64_t)v82 >> 63;
                      do
                      {
                        v86 = ~v82;
                        if ((v85 & 1) != 0)
                          v87 = 0;
                        else
                          v87 = 2 * v80;
                        v82 = v87 + v86;
                        v85 = (unint64_t)v82 >> 63;
                      }
                      while (v82 < 0 || v82 >= v80);
                      v84 = (v82 + 16) * v83;
                    }
                    memcpy((void *)(*(_QWORD *)(v81 + 24) + v83 * (v80 + v78++ + 16) + 64 - 4 * *(_QWORD *)(v48 + 8)), (const void *)(*(_QWORD *)(v81 + 24) + v84 - 4 * *(_QWORD *)(v48 + 8) + 64), 4 * *v79 + 8 * *(_QWORD *)(v48 + 8));
                    v48 = *(_QWORD *)(v20 + 8 * v21);
                  }
                  while (v78 < *(int *)(v48 + 16));
                }
              }
            }
            ++v45;
            v89 = *(_QWORD *)(v3 + 248);
            v88 = *(_QWORD *)(v3 + 256);
            v90 = 0xCCCCCCCCCCCCCCCDLL * ((v88 - v89) >> 3);
          }
          while (v45 < v90);
          if (v88 == v89)
          {
            v172 = 0;
            v173 = 0;
          }
          else
          {
            v91 = 0;
            v92 = 0;
            v172 = 0;
            v173 = 0;
            do
            {
              if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v20 + 8 * v21) + 24))(*(_QWORD *)(v20 + 8 * v21), v92))
              {
                v93 = v173;
                if (*(_QWORD *)((char *)v198[0] + v91 + 8) > v173)
                  v93 = *(_QWORD *)((char *)v198[0] + v91 + 8);
                v94 = v172;
                if (*(_QWORD *)((char *)v198[0] + v91) > v172)
                  v94 = *(_QWORD *)((char *)v198[0] + v91);
                v172 = v94;
                v173 = v93;
              }
              ++v92;
              v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 256) - *(_QWORD *)(v3 + 248)) >> 3);
              v91 += 16;
            }
            while (v92 < v90);
          }
        }
        else
        {
LABEL_97:
          v172 = 0;
          v173 = 0;
          v90 = 0;
        }
        sub_23688B8C0(v192, v90);
        sub_23688B8C0(v191, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 256) - *(_QWORD *)(v3 + 248)) >> 3));
        v31 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v20 + 8 * v21) + 40))(*(_QWORD *)(v20 + 8 * v21), v198);
        if (!(_DWORD)v31)
        {
          if (v173)
          {
            v96 = 0;
            v97 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v21) + 16);
            v171 = 1;
            v179 = v97;
            v181 = (int)((2 * v97) | 1);
            v177 = -*(_DWORD *)(*(_QWORD *)(v20 + 8 * v21) + 16);
            if ((int)v97 >= 0)
              v98 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v21) + 16);
            else
              v98 = -(int)v97;
            v175 = v98 + v97 + 1;
            v99 = 8 * (int)v97;
            while (1)
            {
              if (*(_QWORD *)(v3 + 256) != *(_QWORD *)(v3 + 248))
              {
                v100 = 0;
                do
                {
                  if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v20 + 8 * v21) + 24))(*(_QWORD *)(v20 + 8 * v21), v100))
                  {
                    sub_236889D5C((char **)(v192[0] + 24 * v100), v181);
                    if ((v179 & 0x80000000) == 0)
                    {
                      v101 = v175;
                      v102 = v177;
                      do
                      {
                        *(_QWORD *)(*(_QWORD *)(v192[0] + 24 * v100) + v99 + 8 * v102) = *(_QWORD *)(*v4 + 40 * v100 + 24)
                                                                                       + *(_QWORD *)(*v4 + 40 * v100 + 16)
                                                                                       * (v96 + v102 + 16);
                        ++v102;
                        --v101;
                      }
                      while (v101);
                    }
                  }
                  ++v100;
                  v104 = *(_QWORD *)(v3 + 248);
                  v103 = *(_QWORD *)(v3 + 256);
                }
                while (v100 < 0xCCCCCCCCCCCCCCCDLL * ((v103 - v104) >> 3));
                if (v103 != v104)
                {
                  v105 = 0;
                  do
                  {
                    if (*((_QWORD *)v24 + v105))
                    {
                      sub_236889D5C((char **)(v191[0] + 24 * v105), 1 << *(_DWORD *)(*(_QWORD *)(v20 + 8 * v21) + 32));
                      v106 = *(_QWORD *)(v191[0] + 24 * v105);
                      if (*(_QWORD *)(v191[0] + 24 * v105 + 8) != v106)
                      {
                        v107 = 0;
                        do
                        {
                          *(_QWORD *)(v106 + 8 * v107) = *(_QWORD *)(*((_QWORD *)v24 + v105) + 24)
                                                       + *(_QWORD *)(*((_QWORD *)v24 + v105) + 16)
                                                       * (v107
                                                        + (v96 << *(_QWORD *)(*(_QWORD *)(v20 + 8 * v21) + 32))
                                                        + 16);
                          ++v107;
                          v106 = *(_QWORD *)(v191[0] + 24 * v105);
                        }
                        while (v107 < (*(_QWORD *)(v191[0] + 24 * v105 + 8) - v106) >> 3);
                      }
                    }
                    ++v105;
                  }
                  while (v105 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 256) - *(_QWORD *)(v3 + 248)) >> 3));
                }
              }
              v31 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 8 * v21) + 16))(*(_QWORD *)(v20 + 8 * v21), v192, v191, 0, v172, 0, v96, a3);
              if ((_DWORD)v31)
                break;
              v171 = ++v96 < v173;
              if (v96 == v173)
              {
                v31 = 0;
                v95 = 0;
                goto LABEL_134;
              }
            }
            v95 = 1;
LABEL_134:
            if (v171)
              goto LABEL_100;
          }
          else
          {
            v31 = 0;
          }
          v108 = *(_QWORD *)(v3 + 256);
          if (v108 == *(_QWORD *)(v3 + 248))
          {
            v117 = 0;
          }
          else
          {
            v109 = 0;
            do
            {
              if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v20 + 8 * v21) + 24))(*(_QWORD *)(v20 + 8 * v21), v109) == 2)
              {
                v110 = v199[0] + 40 * v109;
                v111 = *v4 + 40 * v109;
                v112 = *(_OWORD *)v110;
                *(_QWORD *)(v111 + 16) = *(_QWORD *)(v110 + 16);
                *(_OWORD *)v111 = v112;
                v113 = *(_QWORD *)(v110 + 24);
                *(_QWORD *)(v110 + 24) = 0;
                v114 = *(_QWORD *)(v111 + 24);
                *(_QWORD *)(v111 + 24) = v113;
                if (v114)
                {
                  v115 = -*(_QWORD *)(v114 - 24);
                  do
                    v116 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v116 + v115, &qword_2564313D8));
                  free(*(void **)(v114 - 32));
                }
                *(_QWORD *)(v111 + 32) = *(_QWORD *)(v110 + 32);
                v3 = v184;
              }
              ++v109;
              v108 = *(_QWORD *)(v3 + 248);
              v117 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v3 + 256) - v108) >> 3);
            }
            while (v109 < v117);
            v31 = v31;
          }
          if (v117)
          {
            v118 = *(_QWORD *)(v3 + 32);
            if (-1 - 0x5555555555555555 * ((*(_QWORD *)(v3 + 40) - v118) >> 3) >= v21 + 1)
              v119 = v21 + 1;
            else
              v119 = -1 - 0x5555555555555555 * ((*(_QWORD *)(v3 + 40) - v118) >> 3);
            v120 = *(_QWORD *)(v118 + 24 * v119);
            v121 = *(_QWORD *)(v3 + 96) - 1;
            v122 = *(_QWORD *)(v3 + 104) - 1;
            v123 = (_DWORD *)(v108 + 4);
            v124 = (int *)(v120 + 8);
            do
            {
              v125 = (v121 + (1 << *(v124 - 2))) / (unint64_t)(1 << *(v124 - 2));
              v126 = *v124;
              v124 += 4;
              *(v123 - 1) = v125 + 32;
              *v123 = (v122 + (1 << v126)) / (unint64_t)(1 << v126) + 32;
              v123 += 10;
              --v117;
            }
            while (v117);
          }
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 8 * v21) + 56))(*(_QWORD *)(v20 + 8 * v21)))
          {
            v95 = 0;
            goto LABEL_100;
          }
          v189 = 0;
          v190 = 0;
          (*(void (**)(_QWORD, unint64_t *, unint64_t *, int *))(**(_QWORD **)(v20 + 8 * v21)
                                                                                        + 64))(*(_QWORD *)(v20 + 8 * v21), &v190, &v189, &v187);
          sub_2367DC468(v166, v190, v189, 0, 0, 0, 0, 1uLL);
          v185 = *(_QWORD *)(v3 + 248);
          v186 = *(_OWORD *)(v3 + 256);
          v127 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v186 - v185) >> 3);
          v4[1] = 0;
          v4[2] = 0;
          *v4 = 0;
          sub_236821CF4(v4, v127);
          if ((_QWORD)v186 == v185)
          {
LABEL_170:
            v140 = v189;
            v178 = v31;
            if (v189)
            {
              v141 = 0;
              do
              {
                v182 = v141;
                if (*(_QWORD *)(v3 + 256) != *(_QWORD *)(v3 + 248))
                {
                  v142 = 0;
                  v143 = 0;
                  v144 = 0;
                  do
                  {
                    sub_236889D5C((char **)(v191[0] + v143), 1uLL);
                    **(_QWORD **)(v191[0] + v143) = *(_QWORD *)(*(_QWORD *)(v184 + 248) + v142 + 24)
                                                  + *(_QWORD *)(*(_QWORD *)(v184 + 248) + v142 + 16) * (v182 + 16);
                    ++v144;
                    v143 += 24;
                    v142 += 40;
                  }
                  while (v144 < 0xCCCCCCCCCCCCCCCDLL
                               * ((uint64_t)(*(_QWORD *)(v184 + 256) - *(_QWORD *)(v184 + 248)) >> 3));
                }
                (*(void (**)(_QWORD, _QWORD *, unint64_t, _QWORD, uint64_t))(**(_QWORD **)(v20 + 8 * v21)
                                                                                            + 72))(*(_QWORD *)(v20 + 8 * v21), v191, v190, 0, v182);
                v141 = v182 + 1;
                v140 = v189;
                v3 = v184;
              }
              while (v182 + 1 < v189);
              v31 = v178;
            }
            v145 = v187 & ~(v187 >> 31);
            v146 = v188 & ~(v188 >> 31);
            if (v173 + (v188 & (v188 >> 31)) + v146 <= v140)
              v147 = v173 + (v188 & (v188 >> 31));
            else
              v147 = v140 - v146;
            if (v187 >= 0)
              v148 = 16;
            else
              v148 = 16 - v187;
            if (v188 >= 0)
              v149 = 16;
            else
              v149 = 16 - v145;
            v150 = *(_QWORD *)(v3 + 248);
            v151 = *(_QWORD *)(v3 + 256);
            if (v151 != v150)
            {
              v152 = 0;
              v153 = v172 + (v187 & (v187 >> 31));
              if (v153 + v145 > v190)
                v153 = v190 - v145;
              if (v153)
                v154 = v147 == 0;
              else
                v154 = 1;
              v155 = v154;
              v156 = 4 * v153;
              v157 = 4 * v145 + 64;
              v174 = v146 + 16;
              v169 = v24;
              v176 = v155;
              do
              {
                if ((v155 & 1) == 0)
                {
                  v158 = 0;
                  v159 = v150 + 40 * v152;
                  v160 = v185 + 40 * v152;
                  v180 = v152;
                  v183 = *(_QWORD *)(v159 + 16);
                  v161 = *(_QWORD *)(v159 + 24) + v174 * v183;
                  do
                  {
                    v162 = v148;
                    v163 = v149;
                    v164 = v157;
                    memcpy((void *)(v161 + v157), (const void *)(*(_QWORD *)(v160 + 24) + *(_QWORD *)(v160 + 16) * (v149 + v158) + 4 * v148), v156);
                    v157 = v164;
                    v149 = v163;
                    v148 = v162;
                    ++v158;
                    v161 += v183;
                  }
                  while (v158 < v147);
                  v3 = v184;
                  v150 = *(_QWORD *)(v184 + 248);
                  v151 = *(_QWORD *)(v184 + 256);
                  v155 = v176;
                  v31 = v178;
                  v24 = v169;
                  v152 = v180;
                }
                ++v152;
              }
              while (v152 < 0xCCCCCCCCCCCCCCCDLL * ((v151 - v150) >> 3));
            }
            *(_QWORD *)&v193 = &v185;
            sub_2367D077C((void ***)&v193);
            v95 = 0;
            goto LABEL_100;
          }
          v128 = 0;
          while (1)
          {
            sub_2367C431C((uint64_t)&v193, v190 + 32, v189 + 32);
            v31 = v197;
            if (v197)
              break;
            v129 = v195;
            v130 = v196;
            v195 = 0;
            v131 = *(_QWORD *)(v3 + 256);
            v132 = *(_QWORD *)(v3 + 264);
            if (v131 >= v132)
            {
              v134 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v131 - *v4) >> 3);
              v135 = v134 + 1;
              if (v134 + 1 > 0x666666666666666)
                sub_2367C3440();
              v136 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v132 - *v4) >> 3);
              if (2 * v136 > v135)
                v135 = 2 * v136;
              if (v136 >= 0x333333333333333)
                v137 = 0x666666666666666;
              else
                v137 = v135;
              v200[4] = v167;
              if (v137)
                v137 = (unint64_t)sub_2367DC0A4(v137);
              else
                v138 = 0;
              v139 = v137 + 40 * v134;
              v200[0] = v137;
              v200[1] = v139;
              v200[3] = v137 + 40 * v138;
              *(_OWORD *)v139 = v193;
              *(_QWORD *)(v139 + 16) = v194;
              *(_QWORD *)(v139 + 24) = v129;
              *(_QWORD *)(v139 + 32) = v130;
              v200[2] = v139 + 40;
              sub_236815500(v4, v200);
              v3 = v184;
              v133 = *(_QWORD *)(v184 + 256);
              sub_2367F6844((uint64_t)v200);
            }
            else
            {
              *(_OWORD *)v131 = v193;
              *(_QWORD *)(v131 + 16) = v194;
              *(_QWORD *)(v131 + 24) = v129;
              *(_QWORD *)(v131 + 32) = v130;
              v133 = v131 + 40;
              *(_QWORD *)(v3 + 256) = v131 + 40;
            }
            *(_QWORD *)(v3 + 256) = v133;
            if (++v128 >= 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v186 - v185) >> 3))
            {
              v31 = 0;
              goto LABEL_170;
            }
          }
          *(_QWORD *)&v193 = &v185;
          sub_2367D077C((void ***)&v193);
        }
        v95 = 1;
LABEL_100:
        *(_QWORD *)&v193 = v191;
        sub_2367C4718((void ***)&v193);
        *(_QWORD *)&v193 = v192;
        sub_2367C4718((void ***)&v193);
LABEL_124:
        if (v198[0])
        {
          v198[1] = v198[0];
          operator delete(v198[0]);
        }
        if (v24)
          operator delete(v24);
        *(_QWORD *)&v193 = v199;
        sub_2367D077C((void ***)&v193);
        if (v95)
          return v31;
        ++v21;
        v20 = *(_QWORD *)(v3 + 8);
      }
      while (v21 < (*(_QWORD *)(v3 + 16) - v20) >> 3);
    }
  }
  return 0;
}

void sub_23688B474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void **a35)
{
  void *v35;
  uint64_t v36;
  void *v38;

  a35 = (void **)&a23;
  sub_2367D077C(&a35);
  a35 = (void **)&a29;
  sub_2367C4718(&a35);
  a35 = (void **)&a32;
  sub_2367C4718(&a35);
  v38 = *(void **)(v36 - 192);
  if (v38)
  {
    *(_QWORD *)(v36 - 184) = v38;
    operator delete(v38);
  }
  if (v35)
    operator delete(v35);
  a35 = (void **)(v36 - 168);
  sub_2367D077C(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_23688B5AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[5];

  v1 = (uint64_t *)(a1 + 248);
  if (*(_QWORD *)(a1 + 248) != *(_QWORD *)(a1 + 256))
    return 0;
  v4 = **(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) == v4)
    return 0;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = (_DWORD *)(v4 + v5);
    v8 = 1 << v7[2];
    sub_2367C431C((uint64_t)&v20, (*(_QWORD *)(a1 + 96) + (1 << *v7) - 1) / (unint64_t)(1 << *v7) + 32, (*(_QWORD *)(a1 + 104) + v8 - 1) / v8 + 32);
    result = v24;
    if (v24)
      break;
    v10 = v22;
    v9 = v23;
    v22 = 0;
    v11 = *(_QWORD *)(a1 + 256);
    v12 = *(_QWORD *)(a1 + 264);
    if (v11 >= v12)
    {
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - *v1) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0x666666666666666)
        sub_2367C3440();
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v1) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x333333333333333)
        v17 = 0x666666666666666;
      else
        v17 = v15;
      v25[4] = a1 + 264;
      if (v17)
        v17 = (unint64_t)sub_2367DC0A4(v17);
      else
        v18 = 0;
      v19 = v17 + 40 * v14;
      v25[0] = v17;
      v25[1] = v19;
      v25[3] = v17 + 40 * v18;
      *(_OWORD *)v19 = v20;
      *(_QWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 24) = v10;
      *(_QWORD *)(v19 + 32) = v9;
      v25[2] = v19 + 40;
      sub_236815500(v1, v25);
      v13 = *(_QWORD *)(a1 + 256);
      sub_2367F6844((uint64_t)v25);
    }
    else
    {
      *(_OWORD *)v11 = v20;
      *(_QWORD *)(v11 + 16) = v21;
      *(_QWORD *)(v11 + 24) = v10;
      *(_QWORD *)(v11 + 32) = v9;
      v13 = v11 + 40;
      *(_QWORD *)(a1 + 256) = v11 + 40;
    }
    *(_QWORD *)(a1 + 256) = v13;
    ++v6;
    v4 = **(_QWORD **)(a1 + 32);
    v5 += 16;
    if (v6 >= (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - v4) >> 4)
      return 0;
  }
  return result;
}

void sub_23688B784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (!v15)
    goto LABEL_5;
  v17 = -*(_QWORD *)(v15 - 24);
  do
    v18 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v18 + v17, &qword_2564313D8));
  free(*(void **)(v15 - 32));
  if (!a15)
  {
LABEL_5:
    if (a13)
    {
      v19 = -*(_QWORD *)(a13 - 24);
      do
        v20 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v20 + v19, &qword_2564313D8));
      free(*(void **)(a13 - 32));
    }
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_23688B7FC(unint64_t *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 112) / *(_QWORD *)(a2 + 128);
  v5 = __clz(v4) ^ 0x3F;
  if ((v4 & (v4 - 1)) != 0)
    v6 = v5 + 1;
  else
    v6 = v5;
  v7 = *(_QWORD *)(a2 + 160);
  v8 = a3 / v7;
  v9 = *(_QWORD *)(a2 + 208) << v6;
  v10 = (uint64_t *)(**(_QWORD **)(a2 + 32) + 16 * a4);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9 >> v12;
  v14 = v9 >> v11;
  v15 = v13 * (a3 % v7) + 16;
  v16 = v14 * v8 + 16;
  v17 = (*(_QWORD *)(a2 + 96) + (1 << v12) - 1) / (unint64_t)(1 << v12) + 16;
  v18 = (*(_QWORD *)(a2 + 104) + (1 << v11) - 1) / (unint64_t)(1 << v11) + 16;
  *result = v15;
  result[1] = v16;
  v19 = v15 + v13;
  v20 = v17 >= v15;
  v21 = v17 - v15;
  if (!v20)
    v21 = 0;
  if (v19 <= v17)
    v21 = v13;
  v22 = v16 + v14;
  v20 = v18 >= v16;
  v23 = v18 - v16;
  if (!v20)
    v23 = 0;
  if (v22 > v18)
    v14 = v23;
  result[2] = v21;
  result[3] = v14;
  return result;
}

_QWORD *sub_23688B8C0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367E25B8(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23688B94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367C4718(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23688B960(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_2507FFEF8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_23688B9AC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_2507FFEF8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688BA08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  void *__p[3];
  void *v35[3];

  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(int *)(v7 + 296);
  v9 = v8 + a6;
  v10 = v8 + a6 + a5;
  if (v10 < 1)
    return 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 112);
  if ((uint64_t)v13 <= v8)
    return v12;
  v14 = *(int *)(v7 + 300) + a7;
  if (v14 < 0)
    return v12;
  if (v14 >= *(_QWORD *)(a1 + 120))
    return 0;
  v16 = v9 & ~(v9 >> 63);
  if (v9 >= 0)
    v10 = a5;
  if (v10 + v16 <= v13)
    v17 = v10;
  else
    v17 = (v13 - v16) & ~((uint64_t)(v13 - v16) >> 63);
  sub_2367E755C(v35, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  sub_2367E1480(__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v19 = *(uint64_t **)(a1 + 152);
  if (0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 5) + 3 < v18)
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 5) + 3;
  if (v18)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      *((_QWORD *)__p[0] + v22) = *(_QWORD *)(*(_QWORD *)(*a2 + v20) + 8 * v23) + 4 * ((v9 >> 63) & -(int)v9) + 64;
      if (v22 > 2)
      {
        v26 = *(_QWORD *)(a1 + 48) + 456 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 344) + v21 - 100);
        v27 = v26 + 2376;
        if (!*(_DWORD *)(v26 + 2472) && ((v31 = *(_DWORD **)(v26 + 2792), v31 == *(_DWORD **)(v27 + 424)) || !*v31)
          || (v28 = *(_QWORD *)(v27 + 416), !*(_DWORD *)(v27 + 100))
          && (v28 == *(_QWORD *)(v27 + 424) || !*(_DWORD *)(v28 + 4)))
        {
LABEL_33:
          v29 = *(_QWORD *)(a1 + 160);
          goto LABEL_34;
        }
        v25 = *(_QWORD *)(v28 + v21 - 96) + *(_QWORD *)(v28 + v21 - 104) * v14;
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 96);
        if (!*(_DWORD *)(v24 + 96))
        {
          v30 = *(_DWORD **)(v24 + 416);
          if (v30 == *(_DWORD **)(v24 + 424) || !*v30)
            goto LABEL_33;
        }
        if (!*(_DWORD *)(v24 + 100))
        {
          v32 = *(_QWORD *)(v24 + 416);
          if (v32 == *(_QWORD *)(v24 + 424) || !*(_DWORD *)(v32 + 4))
            goto LABEL_33;
        }
        v25 = *(_QWORD *)(v24 + v21 + 120) + *(_QWORD *)(v24 + 112) * v14;
      }
      v29 = v25 + 4 * v16;
LABEL_34:
      *((_QWORD *)v35[0] + v22++) = v29;
      v21 += 40;
      v20 += 24;
      if (v18 == v22)
      {
        v19 = *(uint64_t **)(a1 + 152);
        break;
      }
    }
  }
  v12 = sub_2367C3C58((_QWORD *)v35[0], (_QWORD *)__p[0], (_QWORD *)__p[0], 0, v17, *(unsigned __int8 **)(a1 + 128), *(_QWORD *)(a1 + 128) + 12, v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  return v12;
}

void sub_23688BC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23688BCC4()
{
  return 1;
}

uint64_t sub_23688BCCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_23688BCD4()
{
  return 0;
}

uint64_t sub_23688BCDC()
{
  return 0;
}

uint64_t sub_23688BCE4()
{
  return 1;
}

_QWORD *sub_23688BCEC(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a2 = result[14];
  *a3 = result[15];
  *a4 = *(_QWORD *)(result[5] + 296);
  return result;
}

void sub_23688BD0C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t i;
  _DWORD *v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;

  v9 = a1[12];
  v10 = 4 * a3;
  if ((*(_DWORD *)(v9 + 96) || (v13 = *(_DWORD **)(v9 + 416), v13 != *(_DWORD **)(v9 + 424)) && *v13)
    && (*(_DWORD *)(v9 + 100) || (v14 = *(_QWORD *)(v9 + 416), v14 != *(_QWORD *)(v9 + 424)) && *(_DWORD *)(v14 + 4)))
  {
    v11 = 0;
    for (i = 120; i != 240; i += 40)
    {
      memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*a2 + v11) + 8 * a1[2]) + 64), (const void *)(*(_QWORD *)(a1[12] + i) + *(_QWORD *)(a1[12] + 112) * a5 + 4 * a4), v10);
      v11 += 24;
    }
  }
  else
  {
    for (j = 0; j != 72; j += 24)
      bzero((void *)(*(_QWORD *)(*(_QWORD *)(*a2 + j) + 8 * a1[2]) + 64), v10);
  }
  if (*(_QWORD *)(a1[19] + 8) != *(_QWORD *)a1[19])
  {
    v16 = 0;
    v17 = 0;
    v18 = 72;
    do
    {
      v19 = a1[6] + 456 * *(unsigned int *)(*(_QWORD *)(a1[5] + 344) + v16 + 20);
      v20 = v19 + 2376;
      if ((*(_DWORD *)(v19 + 2472) || (v22 = *(_DWORD **)(v19 + 2792), v22 != *(_DWORD **)(v20 + 424)) && *v22)
        && ((v21 = *(_QWORD *)(v20 + 416), *(_DWORD *)(v20 + 100))
         || v21 != *(_QWORD *)(v20 + 424) && *(_DWORD *)(v21 + 4)))
      {
        memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*a2 + v18) + 8 * a1[2]) + 64), (const void *)(*(_QWORD *)(v21 + v16 + 24) + *(_QWORD *)(v21 + v16 + 16) * a5 + 4 * a4), v10);
      }
      else
      {
        bzero((void *)(*(_QWORD *)(*(_QWORD *)(*a2 + v18) + 8 * a1[2]) + 64), v10);
      }
      ++v17;
      v16 += 40;
      v18 += 24;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1[19] + 8) - *(_QWORD *)a1[19]) >> 5));
  }
}

const char *sub_23688BF04()
{
  return "Blending";
}

void sub_23688BF14()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688BF28(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  v5 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = -(uint64_t)v5;
  v7 = v5 + a5;
  if (v7 > v6)
  {
    v8 = (uint64_t *)(*(_QWORD *)(*a2 + 24 * *(_QWORD *)(a1 + 40)) + 8 * *(_QWORD *)(a1 + 16));
    v10 = *(v8 - 1);
    v9 = *v8;
    v11 = *(_QWORD **)(*a3 + 24 * *(_QWORD *)(a1 + 40));
    v12 = 64 - 16 * ((unint64_t)(a4 + 3) >> 2);
    v13 = (float32x4_t *)(v11[1] + v12);
    v14 = (float32x4_t *)(*v11 + v12);
    v15 = (float32x4_t *)(v8[1] + v12);
    v16 = (float32x4_t *)(v9 + v12);
    v17 = (float32x4_t *)(v10 + v12);
    __asm
    {
      FMOV            V0.4S, #0.75
      FMOV            V1.4S, #0.25
    }
    do
    {
      v24 = *v17++;
      v25 = v24;
      v26 = *v16++;
      v27 = v26;
      v28 = *v15++;
      v29 = vmulq_f32(v27, _Q0);
      *v14++ = vmlaq_f32(v29, _Q1, v25);
      *v13++ = vmlaq_f32(v29, _Q1, v28);
      v6 += 4;
    }
    while (v6 < v7);
  }
  return 0;
}

uint64_t sub_23688BFCC(uint64_t a1, uint64_t a2)
{
  return 2 * (*(_QWORD *)(a1 + 40) == a2);
}

uint64_t sub_23688BFE0()
{
  return 0;
}

uint64_t sub_23688BFE8()
{
  return 0;
}

const char *sub_23688BFF8()
{
  return "VChromaUps";
}

void sub_23688C008()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688C01C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  int32x4_t *v11;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2x2_t v21;
  int32x4_t v22;
  float *i32;

  v5 = a4 + 3;
  v6 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = -(uint64_t)v6;
  v8 = v6 + a5;
  if (v8 > v7)
  {
    v9 = v5 >> 2;
    v10 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(*a2 + 24 * *(_QWORD *)(a1 + 40)) + 8 * *(_QWORD *)(a1 + 16))
                        - 16 * (v5 >> 2)
                        + 68);
    v11 = (int32x4_t *)(**(_QWORD **)(*a3 + 24 * *(_QWORD *)(a1 + 40)) - 32 * v9 + 80);
    __asm
    {
      FMOV            V0.4S, #0.75
      FMOV            V1.4S, #0.25
    }
    do
    {
      v18 = vmulq_f32(*(float32x4_t *)((char *)v10 - 4), _Q0);
      v19 = *(float32x4_t *)((char *)v10 - 8);
      v20 = *v10++;
      v21 = (float32x2x2_t)vmlaq_f32(v18, _Q1, v19);
      v22 = (int32x4_t)vmlaq_f32(v18, _Q1, v20);
      i32 = (float *)v11[-1].i32;
      vst2_f32(i32, v21);
      *v11 = vzip2q_s32((int32x4_t)v21, v22);
      v11 += 2;
      v7 += 4;
    }
    while (v7 < v8);
  }
  return 0;
}

uint64_t sub_23688C0B4(uint64_t a1, uint64_t a2)
{
  return 2 * (*(_QWORD *)(a1 + 40) == a2);
}

const char *sub_23688C0C8()
{
  return "HChromaUps";
}

void sub_23688C0D8()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688C0EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int32 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  float32x4_t v32;
  _QWORD *v33;
  uint64_t i;
  uint64_t v35;
  float v36;
  uint64_t v37;
  int *v38;
  float32x4_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  _QWORD *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[3];
  _QWORD v70[18];
  _OWORD v71[2];
  __int32 v72;
  int32x4_t v73;
  int v74;
  int v75;
  __int32 v76;
  _QWORD v77[15];

  v7 = 0;
  v77[12] = *MEMORY[0x24BDAC8D0];
  v77[0] = &v65;
  v77[1] = &v64;
  v77[2] = &v63;
  v77[3] = &v62;
  v77[4] = &v61;
  v77[5] = &v60;
  v77[6] = &v59;
  v77[7] = &v58;
  v77[8] = &v57;
  v77[9] = &v56;
  v77[10] = &v55;
  v77[11] = &v54;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 184) + 16) * ((a7 >> 3) + 2);
  v9.i32[1] = 1073374822;
  v10 = *(float *)(a1 + 148) * 1.65;
  *(float *)&v10 = v10;
  *(float *)v9.i32 = *(float *)(a1 + 156) * *(float *)&v10;
  v73 = vdupq_lane_s32(*(int32x2_t *)&v10, 0);
  v72 = v9.i32[0];
  v74 = LODWORD(v10);
  v75 = LODWORD(v10);
  v76 = v9.i32[0];
  v71[0] = vdupq_lane_s32(v9, 0);
  v71[1] = v71[0];
  v11 = *a2;
  v12 = 8 * *(_QWORD *)(a1 + 16) - 24;
  v13 = v69;
  do
  {
    v14 = 0;
    v15 = *(_QWORD *)(v11 + 24 * v7) + v12;
    do
    {
      v13[v14] = *(_QWORD *)(v15 + v14 * 8) + 64;
      ++v14;
    }
    while (v14 != 7);
    ++v7;
    v13 += 7;
  }
  while (v7 != 3);
  v16 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  _ZF = (a7 & 7) == 7 || (a7 & 7) == 0;
  v18 = &v72;
  if (_ZF)
    v18 = (__int32 *)v71;
  v19 = -(uint64_t)v16;
  v20 = v16 + a5;
  if (v20 > v19)
  {
    v21 = v70[0];
    v22 = v70[7];
    v23 = v70[14];
    __asm { FMOV            V3.4S, #1.0 }
    do
    {
      v28 = *(float *)(v8 + (((unint64_t)(v19 + a6 + 16) >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      v29 = 0;
      if (v28 >= -3.9052)
      {
        v32 = *(float32x4_t *)&v18[((_BYTE)v19 + (_BYTE)a6) & 7];
        do
        {
          v33 = (_QWORD *)v77[v29];
          *v33 = 0;
          v33[1] = 0;
          ++v29;
        }
        while (v29 != 12);
        for (i = 0; i != 3; ++i)
        {
          v35 = 0;
          v36 = *(float *)(a1 + 4 * i + 120);
          do
          {
            v37 = 0;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = 0x100000000;
            DWORD2(v66) = -1;
            *(_QWORD *)((char *)&v67 + 4) = 0x1FFFFFFFFLL;
            v38 = (int *)((char *)&unk_236924074 + 8 * v35);
            v39 = 0uLL;
            v40 = *v38;
            v41 = v38[1];
            do
            {
              v42 = 4 * *(int *)((char *)&v66 + v37 + 4);
              v39 = vaddq_f32(v39, vabdq_f32(*(float32x4_t *)(v69[7 * i + 3 + *(_DWORD *)((char *)&v66 + v37)] + 4 * v19 + v42), *(float32x4_t *)(v69[7 * i + 3 + *(_DWORD *)((char *)&v66 + v37) + v40] + 4 * v19 + 4 * v41 + v42)));
              v37 += 8;
            }
            while (v37 != 40);
            *(float32x4_t *)v77[v35] = vmlaq_n_f32(*(float32x4_t *)v77[v35], v39, v36);
            ++v35;
          }
          while (v35 != 12);
        }
        v43 = 0;
        v44 = *(float32x4_t *)(v21 + 4 * v19);
        v45 = vmulq_n_f32(v32, v28);
        v46 = *(float32x4_t *)(v22 + 4 * v19);
        v47 = *(float32x4_t *)(v23 + 4 * v19);
        v48 = _Q3;
        do
        {
          v49 = &v69[*(int *)((char *)&unk_236924074 + v43 * 8)];
          v50 = 4 * (v19 + *(int *)((char *)&unk_236924074 + v43 * 8 + 4));
          v51 = vmaxnmq_f32(vmlaq_f32(_Q3, v45, *(float32x4_t *)v77[v43]), (float32x4_t)0);
          v48 = vaddq_f32(v48, v51);
          v44 = vmlaq_f32(v44, *(float32x4_t *)(v49[3] + v50), v51);
          v46 = vmlaq_f32(v46, *(float32x4_t *)(v49[10] + v50), v51);
          v47 = vmlaq_f32(v47, *(float32x4_t *)(v49[17] + v50), v51);
          ++v43;
        }
        while (v43 != 12);
        v52 = vdivq_f32(_Q3, v48);
        *(float32x4_t *)(***(_QWORD ***)a3 + 4 * v19 + 64) = vmulq_f32(v44, v52);
        *(float32x4_t *)(**(_QWORD **)(*(_QWORD *)a3 + 24) + 4 * v19 + 64) = vmulq_f32(v52, v46);
        *(float32x4_t *)(**(_QWORD **)(*(_QWORD *)a3 + 48) + 4 * v19 + 64) = vmulq_f32(v52, v47);
      }
      else
      {
        v30 = v70;
        do
        {
          v31 = *v30;
          v30 += 7;
          *(_OWORD *)(**(_QWORD **)(*(_QWORD *)a3 + v29 * 8) + 4 * v19 + 64) = *(_OWORD *)(v31 + 4 * v19);
          v29 += 3;
        }
        while (v29 != 9);
      }
      v19 += 4;
    }
    while (v19 < v20);
  }
  return 0;
}

uint64_t sub_23688C4AC(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

const char *sub_23688C4BC()
{
  return "EPF0";
}

void sub_23688C4CC()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688C4E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  float32x4_t v38;
  _QWORD *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  char v82;
  uint64_t v83;
  _QWORD v84[13];
  int32x4_t v85[2];
  int v86;
  int32x4_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;

  v8 = 0;
  v90 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 184) + 16) * ((a7 >> 3) + 2);
  *(float *)&a8 = *(float *)(a1 + 156) * 1.65;
  v87 = vdupq_n_s32(0x3FD33333u);
  v88 = v87.i64[0];
  v86 = LODWORD(a8);
  v89 = LODWORD(a8);
  v85[0] = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
  v85[1] = v85[0];
  v10 = *a2;
  v11 = 8 * *(_QWORD *)(a1 + 16) - 16;
  v12 = &v82;
  do
  {
    v13 = 0;
    v14 = *(_QWORD *)(v10 + 24 * v8) + v11;
    do
    {
      *(_QWORD *)&v12[v13] = *(_QWORD *)(v14 + v13) + 64;
      v13 += 8;
    }
    while (v13 != 40);
    ++v8;
    v12 += 40;
  }
  while (v8 != 3);
  v15 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  _ZF = (a7 & 7) == 7 || (a7 & 7) == 0;
  v17 = &v86;
  if (_ZF)
    v17 = (int *)v85;
  v18 = -(uint64_t)v15;
  v19 = v15 + a5;
  if (v19 > v18)
  {
    v21 = v83;
    v20 = v84[0];
    v23 = v84[9];
    v22 = v84[10];
    v25 = v84[4];
    v24 = v84[5];
    v26 = v84[1];
    v27 = v84[6];
    v28 = a1 + 120;
    v29 = v84[11];
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      v34 = *(float *)(v9 + (((unint64_t)(v18 + a6 + 16) >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      v35 = 0;
      if (v34 >= -3.9052)
      {
        v38 = 0uLL;
        v39 = v84;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        do
        {
          v43 = *(v39 - 1) + 4 * v18;
          v44 = *(float32x4_t *)v43;
          v45 = vabdq_f32(*(float32x4_t *)(*(v39 - 2) + 4 * v18), *(float32x4_t *)v43);
          v46 = *(float32x4_t *)(v43 - 4);
          v47 = vabdq_f32(v46, *(float32x4_t *)v43);
          v48 = *(float32x4_t *)(v43 + 4);
          v49 = vabdq_f32(v48, *(float32x4_t *)v43);
          v50 = *v39 + 4 * v18;
          v51 = *(float32x4_t *)(v50 - 4);
          v52 = vaddq_f32(v45, vabdq_f32(v46, v51));
          v53 = *(float32x4_t *)v50;
          v54 = vabdq_f32(v51, *(float32x4_t *)v50);
          v55 = vaddq_f32(vaddq_f32(v47, vabdq_f32(*(float32x4_t *)(v50 - 8), v51)), v54);
          v56 = vaddq_f32(v49, v54);
          v57 = vabdq_f32(*(float32x4_t *)v50, v44);
          v58 = *(float32x4_t *)(v50 + 4);
          v59 = vaddq_f32(vaddq_f32(v52, v57), vabdq_f32(v48, v58));
          v60 = vabdq_f32(*(float32x4_t *)v50, v58);
          v61 = vaddq_f32(v55, v60);
          v62 = vaddq_f32(vaddq_f32(v56, v60), vabdq_f32(*(float32x4_t *)(v50 + 8), v58));
          v63 = v39[1] + 4 * v18;
          v64 = *(float32x4_t *)(v63 - 4);
          v65 = vabdq_f32(v53, *(float32x4_t *)v63);
          v66 = vaddq_f32(v59, v65);
          v67 = vaddq_f32(vaddq_f32(v57, vabdq_f32(v64, v51)), v65);
          v68 = vaddq_f32(v61, vabdq_f32(v64, *(float32x4_t *)v63));
          v69 = *(float32x4_t *)(v63 + 4);
          v70 = vaddq_f32(v62, vabdq_f32(v69, *(float32x4_t *)v63));
          v71 = vaddq_f32(vaddq_f32(v67, vabdq_f32(v69, v58)), vabdq_f32(*(float32x4_t *)(v39[2] + 4 * v18), *(float32x4_t *)v63));
          v69.i32[0] = *(_DWORD *)(v28 + v35);
          v38 = vmlaq_n_f32(v38, v66, v69.f32[0]);
          v40 = vmlaq_n_f32(v40, v68, v69.f32[0]);
          v41 = vmlaq_n_f32(v41, v70, v69.f32[0]);
          v42 = vmlaq_n_f32(v42, v71, v69.f32[0]);
          v35 += 4;
          v39 += 5;
        }
        while (v35 != 12);
        v72 = vmulq_n_f32(*(float32x4_t *)&v17[((_BYTE)v18 + (_BYTE)a6) & 7], v34);
        v73 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v38), (float32x4_t)0);
        v74 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v40), (float32x4_t)0);
        v75 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v41), (float32x4_t)0);
        v76 = vmaxnmq_f32(vmlaq_f32(_Q0, v72, v42), (float32x4_t)0);
        v77 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v20 + 4 * v18), *(float32x4_t *)(v21 + 4 * v18), v73), *(float32x4_t *)(v20 + 4 * v18 - 4), v74), *(float32x4_t *)(v20 + ((4 * v18) | 4)), v75), *(float32x4_t *)(v26 + 4 * v18), v76);
        v78 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v24 + 4 * v18), *(float32x4_t *)(v25 + 4 * v18), v73), *(float32x4_t *)(v24 + 4 * v18 - 4), v74), *(float32x4_t *)(v24 + ((4 * v18) | 4)), v75), *(float32x4_t *)(v27 + 4 * v18), v76);
        v79 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v22 + 4 * v18), *(float32x4_t *)(v23 + 4 * v18), v73), *(float32x4_t *)(v22 + 4 * v18 - 4), v74), *(float32x4_t *)(v22 + ((4 * v18) | 4)), v75), *(float32x4_t *)(v29 + 4 * v18), v76);
        v80 = vdivq_f32(_Q0, vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v73, _Q0), v74), v75), v76));
        *(float32x4_t *)(***(_QWORD ***)a3 + 4 * v18 + 64) = vmulq_f32(v77, v80);
        *(float32x4_t *)(**(_QWORD **)(*(_QWORD *)a3 + 24) + 4 * v18 + 64) = vmulq_f32(v78, v80);
        *(float32x4_t *)(**(_QWORD **)(*(_QWORD *)a3 + 48) + 4 * v18 + 64) = vmulq_f32(v79, v80);
      }
      else
      {
        v36 = v84;
        do
        {
          v37 = *v36;
          v36 += 5;
          *(_OWORD *)(**(_QWORD **)(*(_QWORD *)a3 + v35) + 4 * v18 + 64) = *(_OWORD *)(v37 + 4 * v18);
          v35 += 24;
        }
        while (v35 != 72);
      }
      v18 += 4;
    }
    while (v18 < v19);
  }
  return 0;
}

uint64_t sub_23688C8BC(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

const char *sub_23688C8CC()
{
  return "EPF1";
}

void sub_23688C8DC()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688C8F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v35;
  uint64_t v36;
  uint64_t i;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v78;
  _QWORD v79[8];
  _OWORD v80[2];
  int v81;
  int32x4_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;

  v9 = 0;
  v86 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 184) + 16) * ((a7 >> 3) + 2);
  v11 = *(float *)(a1 + 152) * 1.65;
  *(float *)&v11 = v11;
  *(float *)&a9 = *(float *)(a1 + 156) * *(float *)&v11;
  v81 = LODWORD(a9);
  v82 = vdupq_lane_s32(*(int32x2_t *)&v11, 0);
  v83 = LODWORD(v11);
  v84 = LODWORD(v11);
  v85 = LODWORD(a9);
  v80[0] = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  v80[1] = v80[0];
  v12 = *a2;
  v13 = 8 * *(_QWORD *)(a1 + 16) - 8;
  v14 = &v78;
  do
  {
    v15 = 0;
    v16 = *(_QWORD *)(v12 + 24 * v9) + v13;
    do
    {
      v14[v15] = *(_QWORD *)(v16 + v15 * 8) + 64;
      ++v15;
    }
    while (v15 != 3);
    ++v9;
    v14 += 3;
  }
  while (v9 != 3);
  v17 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  _ZF = (a7 & 7) == 7 || (a7 & 7) == 0;
  v19 = &v81;
  if (_ZF)
    v19 = (int *)v80;
  v20 = -(uint64_t)v17;
  v21 = v17 + a5;
  if (v21 > v20)
  {
    v23 = v78;
    v22 = v79[0];
    v25 = v79[5];
    v24 = v79[6];
    v26 = v79[1];
    v27 = v79[2];
    v28 = v79[3];
    v29 = v79[4];
    v30 = v79[7];
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      v35 = *(float *)(v10 + (((unint64_t)(v20 + a6 + 16) >> 1) & 0x7FFFFFFFFFFFFFFCLL));
      v36 = 4 * v20;
      if (v35 >= -3.9052)
      {
        v38 = *(float32x4_t *)(v22 + 4 * v20);
        v39 = *(float32x4_t *)(v28 + 4 * v20);
        v40 = *(float32x4_t *)(v24 + 4 * v20);
        v41 = *(float32x4_t *)(v23 + 4 * v20);
        v42 = vmulq_n_f32(*(float32x4_t *)&v19[((_BYTE)v20 + (_BYTE)a6) & 7], v35);
        v43 = *(float32x4_t *)(v27 + 4 * v20);
        v44 = *(float32x4_t *)(v25 + 4 * v20);
        v45 = *(float *)(a1 + 120);
        v46 = *(float *)(a1 + 124);
        v47 = *(float *)(a1 + 128);
        v48 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vabdq_f32(v41, v38), v45), vabdq_f32(v43, v39), v46), vabdq_f32(v44, v40), v47)), (float32x4_t)0);
        v49 = *(float32x4_t *)(v22 + v36 - 4);
        v50 = *(float32x4_t *)(v28 + v36 - 4);
        v51 = *(float32x4_t *)(v24 + v36 - 4);
        v52 = vabdq_f32(v49, v38);
        v53 = *(float32x4_t *)(v22 + (v36 | 4));
        v54 = *(float32x4_t *)(v26 + 4 * v20);
        v55 = vabdq_f32(v53, v38);
        v56 = vabdq_f32(v54, v38);
        v57 = vmlaq_f32(v38, v41, v48);
        v58 = *(float32x4_t *)(v28 + (v36 | 4));
        v59 = vabdq_f32(v50, v39);
        v60 = vabdq_f32(v58, v39);
        v61 = *(float32x4_t *)(v29 + 4 * v20);
        v62 = vabdq_f32(v61, v39);
        v63 = vmlaq_f32(v39, v43, v48);
        v64 = vabdq_f32(v51, v40);
        v65 = *(float32x4_t *)(v24 + (v36 | 4));
        v66 = *(float32x4_t *)(v30 + 4 * v20);
        v67 = vabdq_f32(v65, v40);
        v68 = vabdq_f32(v66, v40);
        v69 = vmlaq_f32(v40, v44, v48);
        v70 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v52, v45), v59, v46), v64, v47)), (float32x4_t)0);
        v71 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v55, v45), v60, v46), v67, v47)), (float32x4_t)0);
        v72 = vmaxnmq_f32(vmlaq_f32(_Q0, v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v56, v45), v62, v46), v68, v47)), (float32x4_t)0);
        v73 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v57, v49, v70), v53, v71), v54, v72);
        v74 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v63, v50, v70), v58, v71), v61, v72);
        v75 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v69, v51, v70), v65, v71), v66, v72);
        v76 = vdivq_f32(_Q0, vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v48, _Q0), v70), v71), v72));
        *(float32x4_t *)(***(_QWORD ***)a3 + 4 * v20 + 64) = vmulq_f32(v73, v76);
        *(float32x4_t *)(**(_QWORD **)(*(_QWORD *)a3 + 24) + 4 * v20 + 64) = vmulq_f32(v74, v76);
        *(float32x4_t *)(**(_QWORD **)(*(_QWORD *)a3 + 48) + 4 * v20 + 64) = vmulq_f32(v75, v76);
      }
      else
      {
        for (i = 0; i != 9; i += 3)
          *(_OWORD *)(**(_QWORD **)(*(_QWORD *)a3 + i * 8) + 4 * v20 + 64) = *(_OWORD *)(v79[i] + 4 * v20);
      }
      v20 += 4;
    }
    while (v20 < v21);
  }
  return 0;
}

uint64_t sub_23688CC28(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

const char *sub_23688CC38()
{
  return "EPF2";
}

uint64_t sub_23688CC44(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  float v7;
  float v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t (**v12)();
  float v13;
  float v14;
  float v15;

  if (*(_BYTE *)(a2 + 312))
    goto LABEL_2;
  v6 = *(_DWORD *)(a2 + 320);
  if (v6 <= 12)
  {
    if (v6 == 1)
    {
      result = operator new();
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      v12 = &off_2507FDCC8;
    }
    else
    {
      if (v6 != 8)
        goto LABEL_2;
      result = operator new();
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      v12 = &off_2507FDE00;
    }
LABEL_17:
    *(_QWORD *)result = v12;
    goto LABEL_18;
  }
  switch(v6)
  {
    case 13:
      result = operator new();
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      v12 = &off_2507FDD30;
      goto LABEL_17;
    case 16:
      v13 = *(float *)(a2 + 200);
      v14 = v13 * 0.0001;
      v15 = 10000.0 / v13;
      result = operator new();
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(_QWORD *)result = &off_2507FDC60;
      *(float *)(result + 40) = v14;
      *(float *)(result + 44) = v15;
      goto LABEL_18;
    case 18:
      v7 = log2f(*(float *)(a2 + 864) / 1000.0);
      v8 = (float)(powf(1.111, -v7) * 0.83333) + -1.0;
      v9 = v8 > 0.01 || v8 < -0.01;
      v10 = *(_DWORD *)(a2 + 860);
      v11 = *(_QWORD *)(a2 + 852);
      result = operator new();
      *(float *)(result + 40) = v8;
      *(_BYTE *)(result + 44) = v9;
      *(_QWORD *)(result + 48) = v11;
      *(_DWORD *)(result + 56) = v10;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      v12 = &off_2507FDE68;
      goto LABEL_17;
  }
LABEL_2:
  v4 = *(_DWORD *)(a2 + 848);
  result = operator new();
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)result = &off_2507FDD98;
  *(_DWORD *)(result + 40) = v4;
LABEL_18:
  *a1 = result;
  return result;
}

void sub_23688CE84()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688CE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int32x4_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
    v13 = vdupq_n_s32(0xC0D55555);
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V3.4S, #-1.0 }
    v20 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v21 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v22 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v23 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v24 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v25 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    __asm { FMOV            V18.4S, #1.0 }
    v27 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    v28 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    v29 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    v30 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    v31 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    v32 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    v33 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    do
    {
      v34 = *(float *)(a1 + 40);
      v35 = vaddq_s32(*v11, v13);
      v36 = vaddq_f32((float32x4_t)vsubq_s32(*v11, (int32x4_t)vandq_s8((int8x16_t)v35, v14)), _Q3);
      v37 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v36, vmlaq_f32(v21, v20, v36)), vmlaq_f32(v25, v36, vmlaq_f32(v23, v22, v36))), vcvtq_f32_s32(vshrq_n_s32(v35, 0x17uLL))), v34);
      v38 = vrndmq_f32(v37);
      v39 = vsubq_f32(v37, v38);
      v40 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v39, vmlaq_f32(v28, v39, vaddq_f32(v39, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v38), 0x17uLL), _Q18)), vmlaq_f32(v33, v39, vmlaq_f32(v32, v39, vmlaq_f32(v31, v30, v39)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v11));
      v41 = vaddq_s32(*v10, v13);
      v42 = vaddq_f32((float32x4_t)vsubq_s32(*v10, (int32x4_t)vandq_s8((int8x16_t)v41, v14)), _Q3);
      v43 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v42, vmlaq_f32(v21, v20, v42)), vmlaq_f32(v25, v42, vmlaq_f32(v23, v22, v42))), vcvtq_f32_s32(vshrq_n_s32(v41, 0x17uLL))), v34);
      v44 = vrndmq_f32(v43);
      v45 = vsubq_f32(v43, v44);
      v46 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v45, vmlaq_f32(v28, v45, vaddq_f32(v45, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v44), 0x17uLL), _Q18)), vmlaq_f32(v33, v45, vmlaq_f32(v32, v45, vmlaq_f32(v31, v30, v45)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v10));
      v47 = vaddq_s32(*v9, v13);
      v48 = vaddq_f32((float32x4_t)vsubq_s32(*v9, (int32x4_t)vandq_s8((int8x16_t)v47, v14)), _Q3);
      v49 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v48, vmlaq_f32(v21, v20, v48)), vmlaq_f32(v25, v48, vmlaq_f32(v23, v22, v48))), vcvtq_f32_s32(vshrq_n_s32(v47, 0x17uLL))), v34);
      v50 = vrndmq_f32(v49);
      v51 = vsubq_f32(v49, v50);
      v52 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v51, vmlaq_f32(v28, v51, vaddq_f32(v51, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v50), 0x17uLL), _Q18)), vmlaq_f32(v33, v51, vmlaq_f32(v32, v51, vmlaq_f32(v31, v30, v51)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v9));
      *v11++ = (int32x4_t)v40;
      *v10++ = (int32x4_t)v46;
      *v9++ = (int32x4_t)v52;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688D198(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688D1A4()
{
  return "FromLinear";
}

void sub_23688D1B4()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688D1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  int32x4_t v17;
  int8x16_t v18;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int32x4_t *)(v7 + v8);
    __asm { FMOV            V0.4S, #4.5 }
    v17 = vdupq_n_s32(0xC0D55555);
    v18.i64[0] = 0x7F0000007FLL;
    v18.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V3.4S, #-1.0 }
    v20 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v21 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v22 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v23 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v24 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v25 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    v26 = (float32x4_t)vdupq_n_s32(0x3EE66666u);
    __asm { FMOV            V19.4S, #1.0 }
    v28 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    v29 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    v30 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    v31 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    v32 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    v33 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    v34 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    v35 = (float32x4_t)vdupq_n_s32(0x3F8CAC08u);
    v36 = (float32x4_t)vdupq_n_s32(0xBDCAC083);
    v37 = (float32x4_t)vdupq_n_s32(0x3C9374BCu);
    do
    {
      v38 = vaddq_s32(*v11, v17);
      v39 = vshrq_n_s32(v38, 0x17uLL);
      v40 = vaddq_f32((float32x4_t)vsubq_s32(*v11, (int32x4_t)vandq_s8((int8x16_t)v38, v18)), _Q3);
      v41 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v40, vmlaq_f32(v21, v20, v40)), vmlaq_f32(v25, v40, vmlaq_f32(v23, v22, v40))), vcvtq_f32_s32(v39)), v26);
      v42 = vrndmq_f32(v41);
      v43 = vsubq_f32(v41, v42);
      v44 = vbslq_s8((int8x16_t)vcgeq_f32(v37, *(float32x4_t *)v11), (int8x16_t)vmulq_f32(*(float32x4_t *)v11, _Q0), (int8x16_t)vmlaq_f32(v36, v35, vdivq_f32(vmulq_f32(vmlaq_f32(v30, v43, vmlaq_f32(v29, v43, vaddq_f32(v43, v28))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v42), 0x17uLL), _Q19)), vmlaq_f32(v34, v43, vmlaq_f32(v33, v43, vmlaq_f32(v32, v31, v43))))));
      v45 = vaddq_s32(*v10, v17);
      v46 = vshrq_n_s32(v45, 0x17uLL);
      v47 = vaddq_f32((float32x4_t)vsubq_s32(*v10, (int32x4_t)vandq_s8((int8x16_t)v45, v18)), _Q3);
      v48 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v47, vmlaq_f32(v21, v20, v47)), vmlaq_f32(v25, v47, vmlaq_f32(v23, v22, v47))), vcvtq_f32_s32(v46)), v26);
      v49 = vrndmq_f32(v48);
      v50 = vsubq_f32(v48, v49);
      v51 = vbslq_s8((int8x16_t)vcgeq_f32(v37, *(float32x4_t *)v10), (int8x16_t)vmulq_f32(*(float32x4_t *)v10, _Q0), (int8x16_t)vmlaq_f32(v36, v35, vdivq_f32(vmulq_f32(vmlaq_f32(v30, v50, vmlaq_f32(v29, v50, vaddq_f32(v50, v28))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v49), 0x17uLL), _Q19)), vmlaq_f32(v34, v50, vmlaq_f32(v33, v50, vmlaq_f32(v32, v31, v50))))));
      v52 = vaddq_s32(*v9, v17);
      v53 = vshrq_n_s32(v52, 0x17uLL);
      v54 = vaddq_f32((float32x4_t)vsubq_s32(*v9, (int32x4_t)vandq_s8((int8x16_t)v52, v18)), _Q3);
      v55 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v54, vmlaq_f32(v21, v20, v54)), vmlaq_f32(v25, v54, vmlaq_f32(v23, v22, v54))), vcvtq_f32_s32(v53)), v26);
      v56 = vrndmq_f32(v55);
      v57 = vsubq_f32(v55, v56);
      v58 = vbslq_s8((int8x16_t)vcgeq_f32(v37, *(float32x4_t *)v9), (int8x16_t)vmulq_f32(*(float32x4_t *)v9, _Q0), (int8x16_t)vmlaq_f32(v36, v35, vdivq_f32(vmulq_f32(vmlaq_f32(v30, v57, vmlaq_f32(v29, v57, vaddq_f32(v57, v28))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v56), 0x17uLL), _Q19)), vmlaq_f32(v34, v57, vmlaq_f32(v33, v57, vmlaq_f32(v32, v31, v57))))));
      *v11++ = (int32x4_t)v44;
      *v10++ = (int32x4_t)v51;
      *v9++ = (int32x4_t)v58;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688D520(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688D52C()
{
  return "FromLinear";
}

void sub_23688D53C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688D550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int8x16_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0xBE91C020);
    __asm
    {
      FMOV            V1.4S, #3.0
      FMOV            V2.4S, #12.0
    }
    v19 = vdupq_n_s32(0xC0D55555);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v22 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v23 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v24 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v25 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v26 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    v27 = (float32x4_t)vdupq_n_s32(0x3DFDDD65u);
    v28 = (float32x4_t)vdupq_n_s32(0x3F0F564Fu);
    __asm { FMOV            V21.4S, #-1.0 }
    v30 = (float32x4_t)vdupq_n_s32(0x3DAAAAABu);
    v31.i64[0] = 0x8000000080000000;
    v31.i64[1] = 0x8000000080000000;
    __asm { FMOV            V17.4S, #1.0 }
    v63 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    v64 = _Q17;
    v62 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    v33 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    v34 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    v35 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    v36 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    v37 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    v38 = (float32x4_t)vdupq_n_s32(0x4E6E6B28u);
    do
    {
      v39 = *(float32x4_t *)v11;
      v40 = *(float32x4_t *)v10;
      v41 = *v9;
      if (*(_BYTE *)(a1 + 44))
      {
        v42 = (int32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v41, *(float *)(a1 + 56)), v40, *(float *)(a1 + 52)), v39, *(float *)(a1 + 48));
        v43 = vaddq_s32(v42, v19);
        v44 = vshrq_n_s32(v43, 0x17uLL);
        v45 = vaddq_f32((float32x4_t)vsubq_s32(v42, (int32x4_t)vandq_s8((int8x16_t)v43, v20)), _Q21);
        v46 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v25, v45, vmlaq_f32(v22, v21, v45)), vmlaq_f32(v26, v45, vmlaq_f32(v24, v23, v45))), vcvtq_f32_s32(v44)), *(float *)(a1 + 40));
        v47 = vrndmq_f32(v46);
        v48 = vsubq_f32(v46, v47);
        v49 = vminnmq_f32(vdivq_f32(vmulq_f32(vmlaq_f32(v33, v48, vmlaq_f32(v62, v48, vaddq_f32(v48, v63))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v47), 0x17uLL), v64)), vmlaq_f32(v37, v48, vmlaq_f32(v36, v48, vmlaq_f32(v35, v34, v48)))), v38);
        v39 = vmulq_f32(v39, v49);
        v40 = vmulq_f32(v40, v49);
        v41 = vmulq_f32(v41, v49);
      }
      v50 = (int32x4_t)vmlaq_f32(v12, _Q2, (float32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v51 = vaddq_s32(v50, v19);
      v52 = vaddq_f32((float32x4_t)vsubq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)v51, v20)), _Q21);
      v53 = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgeq_f32(v30, (float32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int8x16_t)vsqrtq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q1)), (int8x16_t)vmlaq_f32(v28, v27, vaddq_f32(vdivq_f32(vmlaq_f32(v25, v52, vmlaq_f32(v22, v21, v52)), vmlaq_f32(v26, v52, vmlaq_f32(v24, v23, v52))), vcvtq_f32_s32(vshrq_n_s32(v51, 0x17uLL))))), (int8x16_t)v39);
      v54 = (int32x4_t)vmlaq_f32(v12, _Q2, (float32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v55 = vaddq_s32(v54, v19);
      v56 = vaddq_f32((float32x4_t)vsubq_s32(v54, (int32x4_t)vandq_s8((int8x16_t)v55, v20)), _Q21);
      v57 = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgeq_f32(v30, (float32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int8x16_t)vsqrtq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q1)), (int8x16_t)vmlaq_f32(v28, v27, vaddq_f32(vdivq_f32(vmlaq_f32(v25, v56, vmlaq_f32(v22, v21, v56)), vmlaq_f32(v26, v56, vmlaq_f32(v24, v23, v56))), vcvtq_f32_s32(vshrq_n_s32(v55, 0x17uLL))))), (int8x16_t)v40);
      v58 = (int32x4_t)vmlaq_f32(v12, _Q2, (float32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v59 = vaddq_s32(v58, v19);
      v60 = vaddq_f32((float32x4_t)vsubq_s32(v58, (int32x4_t)vandq_s8((int8x16_t)v59, v20)), _Q21);
      *v11++ = v53;
      *v10++ = v57;
      *(int8x16_t *)v9++ = vbslq_s8(v31, vbslq_s8((int8x16_t)vcgeq_f32(v30, (float32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), (int8x16_t)vsqrtq_f32(vmulq_f32((float32x4_t)(*(_OWORD *)&v41 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q1)), (int8x16_t)vmlaq_f32(v28, v27, vaddq_f32(vdivq_f32(vmlaq_f32(v25, v60, vmlaq_f32(v22, v21, v60)),
                                                vmlaq_f32(v26, v60, vmlaq_f32(v24, v23, v60))),
                                              vcvtq_f32_s32(vshrq_n_s32(v59, 0x17uLL))))),
                             (int8x16_t)v41);
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688D8F0(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688D8FC()
{
  return "FromLinear";
}

void sub_23688D90C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688D920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int8x16_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v13 = (float32x4_t)vdupq_n_s32(0xC88BE24D);
    v14 = (float32x4_t)vdupq_n_s32(0x4786914Fu);
    v15 = (float32x4_t)vdupq_n_s32(0xC84A65A6);
    v16 = (float32x4_t)vdupq_n_s32(0xC72B7AD7);
    v17 = (float32x4_t)vdupq_n_s32(0x43074838u);
    v18 = (float32x4_t)vdupq_n_s32(0x467B5314u);
    v19 = (float32x4_t)vdupq_n_s32(0x3EC6B81Cu);
    v20 = (float32x4_t)vdupq_n_s32(0x44B8B702u);
    v21 = (float32x4_t)vdupq_n_s32(0x37257B02u);
    v22 = (float32x4_t)vdupq_n_s32(0x4206DFEEu);
    v23 = (float32x4_t)vdupq_n_s32(0x42418990u);
    v24 = (float32x4_t)vdupq_n_s32(0x43154069u);
    v25 = (float32x4_t)vdupq_n_s32(0x41CF3BC3u);
    v26 = (float32x4_t)vdupq_n_s32(0x42E01F14u);
    v27 = (float32x4_t)vdupq_n_s32(0x425CE93Au);
    v28 = (float32x4_t)vdupq_n_s32(0x42B94632u);
    v29 = (float32x4_t)vdupq_n_s32(0xBF8C4274);
    v30 = (float32x4_t)vdupq_n_s32(0x41A1562Eu);
    v31 = (float32x4_t)vdupq_n_s32(0x3C5D697Du);
    v32.i64[0] = 0x8000000080000000;
    v32.i64[1] = 0x8000000080000000;
    v33 = (float32x4_t)vdupq_n_s32(0x3F8196D9u);
    do
    {
      v34.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v34.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v34.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      v35 = *(float *)(a1 + 40);
      v36 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v34, v35)));
      v37 = vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v12, v34), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v36, vmlaq_f32(v19, v36, vmlaq_f32(v17, v36, vmlaq_f32(v14, v13, v36)))), vmlaq_f32(v22, v36, vmlaq_f32(v20, v36, vmlaq_f32(v18, v36, vmlaq_f32(v16, v15, v36))))), (int8x16_t)vdivq_f32(vmlaq_f32(v31, v36, vmlaq_f32(v29, v36, vmlaq_f32(v27, v36, vmlaq_f32(v24, v23, v36)))), vmlaq_f32(v33, v36, vmlaq_f32(v30, v36, vmlaq_f32(v28, v36, vmlaq_f32(v26, v25, v36)))))), *v11);
      v34.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v34.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v34.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      v38 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v34, v35)));
      v39 = vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v12, v34), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v38, vmlaq_f32(v19, v38, vmlaq_f32(v17, v38, vmlaq_f32(v14, v13, v38)))), vmlaq_f32(v22, v38, vmlaq_f32(v20, v38, vmlaq_f32(v18, v38, vmlaq_f32(v16, v15, v38))))), (int8x16_t)vdivq_f32(vmlaq_f32(v31, v38, vmlaq_f32(v29, v38, vmlaq_f32(v27, v38, vmlaq_f32(v24, v23, v38)))), vmlaq_f32(v33, v38, vmlaq_f32(v30, v38, vmlaq_f32(v28, v38, vmlaq_f32(v26, v25, v38)))))), *v10);
      v34.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v34.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v34.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      v40 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v34, v35)));
      v41 = vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v12, v34), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v40, vmlaq_f32(v19, v40, vmlaq_f32(v17, v40, vmlaq_f32(v14, v13, v40)))), vmlaq_f32(v22, v40, vmlaq_f32(v20, v40, vmlaq_f32(v18, v40, vmlaq_f32(v16, v15, v40))))), (int8x16_t)vdivq_f32(vmlaq_f32(v31, v40, vmlaq_f32(v29, v40, vmlaq_f32(v27, v40, vmlaq_f32(v24, v23, v40)))), vmlaq_f32(v33, v40, vmlaq_f32(v30, v40, vmlaq_f32(v28, v40, vmlaq_f32(v26, v25, v40)))))), *v9);
      *v11++ = v37;
      *v10++ = v39;
      *v9++ = v41;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688DCAC(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688DCB8()
{
  return "FromLinear";
}

void sub_23688DCC8()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688DCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int8x16_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x414EB852u);
    v13 = (float32x4_t)vdupq_n_s32(0x3F3C3A32u);
    v14 = (float32x4_t)vdupq_n_s32(0x3FBCB2C2u);
    v15 = (float32x4_t)vdupq_n_s32(0x3CC6A52Au);
    v16 = (float32x4_t)vdupq_n_s32(0x3F6D0463u);
    v17 = (float32x4_t)vdupq_n_s32(0x3EC7E073u);
    v18 = (float32x4_t)vdupq_n_s32(0x3FAB9FE4u);
    v19 = (float32x4_t)vdupq_n_s32(0x3BAD40B5u);
    v20 = (float32x4_t)vdupq_n_s32(0x3E9B7A50u);
    v21 = (float32x4_t)vdupq_n_s32(0xBA069D6D);
    v22 = (float32x4_t)vdupq_n_s32(0x3C24949Bu);
    v23 = (float32x4_t)vdupq_n_s32(0x3B4D2E1Cu);
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    do
    {
      v25.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      v26 = vsqrtq_f32(v25);
      v27 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v26, vmlaq_f32(v19, v26, vmlaq_f32(v17, v26, vmlaq_f32(v14, v13, v26)))), vmlaq_f32(v22, v26, vmlaq_f32(v20, v26, vmlaq_f32(v18, v26, vmlaq_f32(v16, v15, v26))))), (int8x16_t)vmulq_f32(v25, v12)), *v11);
      v25.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      v28 = vsqrtq_f32(v25);
      v29 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v28, vmlaq_f32(v19, v28, vmlaq_f32(v17, v28, vmlaq_f32(v14, v13, v28)))), vmlaq_f32(v22, v28, vmlaq_f32(v20, v28, vmlaq_f32(v18, v28, vmlaq_f32(v16, v15, v28))))), (int8x16_t)vmulq_f32(v25, v12)), *v10);
      v25.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      v30 = vsqrtq_f32(v25);
      v31 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v30, vmlaq_f32(v19, v30, vmlaq_f32(v17, v30, vmlaq_f32(v14, v13, v30)))), vmlaq_f32(v22, v30, vmlaq_f32(v20, v30, vmlaq_f32(v18, v30, vmlaq_f32(v16, v15, v30))))), (int8x16_t)vmulq_f32(v25, v12)), *v9);
      *v11++ = v27;
      *v10++ = v29;
      *v9++ = v31;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688DF00(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688DF0C()
{
  return "FromLinear";
}

void sub_23688DF1C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688DF30()
{
  return 0;
}

BOOL sub_23688DF38(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688DF44()
{
  return "FromLinear";
}

void sub_23688DF54()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688DF68(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const float *v16;
  float32x4_t v17;
  float32x4_t *v18;
  float v19;
  float v20;
  float32x4_t *v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  v5 = 0;
  v6 = -(uint64_t)((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = a5 + a4;
  v8 = (4 * (a4 + 3)) & 0xFFFFFFFFFFFFFFF0;
  v9 = 64 - v8;
  v10 = 68 - v8;
  do
  {
    if (v7 > v6)
    {
      v11 = (uint64_t *)(*(_QWORD *)(*a2 + 24 * v5) + 8 * *(_QWORD *)(a1 + 16));
      v12 = *(v11 - 1);
      v13 = *v11;
      v14 = v11[1];
      v15 = a1 + 12 * v5;
      v16 = (const float *)(v15 + 40);
      v17 = vld1q_dup_f32(v16);
      v18 = (float32x4_t *)(**(_QWORD **)(*a3 + 24 * v5) + v9);
      v19 = *(float *)(v15 + 44);
      v20 = *(float *)(v15 + 48);
      v21 = (float32x4_t *)(v12 + v10);
      v22 = (float32x4_t *)(v14 + v10);
      v23 = (float32x4_t *)(v13 + v10);
      v24 = v6;
      do
      {
        v25 = *(float32x4_t *)((char *)v21 - 4);
        v26 = *(float32x4_t *)((char *)v21 - 8);
        v27 = *v21++;
        v28 = v27;
        v29 = *(float32x4_t *)((char *)v23 - 4);
        v30 = *(float32x4_t *)((char *)v23 - 8);
        v31 = *v23++;
        v32 = v31;
        v33 = *(float32x4_t *)((char *)v22 - 4);
        v34 = *(float32x4_t *)((char *)v22 - 8);
        v35 = *v22++;
        *v18++ = vmlaq_n_f32(vmlaq_n_f32(vmulq_f32(v17, v29), vaddq_f32(vaddq_f32(v30, v32), vaddq_f32(v25, v33)), v19), vaddq_f32(vaddq_f32(v26, v28), vaddq_f32(v34, v35)), v20);
        v24 += 4;
      }
      while (v24 < v7);
    }
    ++v5;
  }
  while (v5 != 3);
  return 0;
}

uint64_t sub_23688E058(uint64_t a1, unint64_t a2)
{
  return 2 * (a2 < 3);
}

const char *sub_23688E068()
{
  return "Gab";
}

void sub_23688E078()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688E08C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _OWORD *v6;
  float v7;
  uint64_t v9;
  __int128 v10;
  int8x16_t *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float *v16;
  _QWORD *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float v27;
  float v28;
  float v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v83;
  int8x16_t v84;
  _OWORD v85[2];
  uint64_t v86;

  v5 = 0;
  v86 = *MEMORY[0x24BDAC8D0];
  v6 = (_OWORD *)a1[5];
  do
  {
    v7 = fabsf(*(float *)((char *)v6 + v5));
    _ZF = v7 > 0.001 || v5 == 28;
    v5 += 4;
  }
  while (!_ZF);
  if (v7 > 0.001)
  {
    v9 = 0;
    v10 = v6[1];
    v85[0] = *v6;
    v85[1] = v10;
    v11 = &v84;
    do
    {
      v12 = *(_DWORD *)((char *)v85 + v9);
      v11->i16[0] = v12;
      v11[-1].i8[0] = BYTE2(v12);
      v11[-1].i8[1] = HIBYTE(v12);
      v9 += 4;
      v11 = (int8x16_t *)((char *)v11 + 2);
    }
    while (v9 != 32);
    if (((a5 + 3) & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v13 = 0;
      v14 = a1[2];
      v15 = *(float32x4_t **)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v14);
      v16 = (float *)a1[6];
      v17 = (_QWORD *)(*(_QWORD *)a2 + 24 * a1[7]);
      v18 = *(float32x4_t **)(*v17 + 8 * v14);
      v19 = *(float32x4_t **)(v17[3] + 8 * v14);
      v20 = *(float32x4_t **)(v17[6] + 8 * v14);
      v21 = (float32x4_t *)(*(_QWORD *)(**(_QWORD **)a2 + 8 * v14) + 64);
      v22 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v14) + 64);
      v23 = v15 + 4;
      v24 = v18 + 4;
      v25 = v19 + 4;
      v26 = v20 + 4;
      v27 = v16[25];
      v28 = v16[27] + (float)(v27 * 0.0);
      v29 = v16[26] + (float)(v27 * 0.0);
      v31 = v83;
      v30 = v84;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      __asm
      {
        FMOV            V5.4S, #6.0
        FMOV            V7.4S, #7.0
        FMOV            V16.4S, #1.0
      }
      v39 = vdupq_n_s32(0x202u);
      v40.i64[0] = 0x10000000100;
      v40.i64[1] = 0x10000000100;
      v41 = vdupq_n_s32(0x2020000u);
      v42.i64[0] = 0x100000001000000;
      v42.i64[1] = 0x100000001000000;
      v43.i64[0] = 0xFFFF0000FFFF0000;
      v43.i64[1] = 0xFFFF0000FFFF0000;
      v44 = vdupq_n_s32(0x302u);
      v45 = vdupq_n_s32(0x3020000u);
      v46 = (float32x4_t)vdupq_n_s32(0x3E6147AEu);
      v47 = (float32x4_t)vdupq_n_s32(0x3F7E0000u);
      v48.i64[0] = 0x3C0000003C000000;
      v48.i64[1] = 0x3C0000003C000000;
      do
      {
        v49 = vmaxnmq_f32(vmulq_f32(vmulq_f32(vsubq_f32(*v22, *v21), v32), _Q5), (float32x4_t)0);
        v50 = vrndmq_f32(v49);
        v51 = (int8x16_t)vsubq_f32(v49, v50);
        v52 = (int8x16_t)vcgeq_f32(v49, _Q7);
        v53 = (float32x4_t)vbslq_s8(v52, (int8x16_t)_Q5, (int8x16_t)v50);
        v54 = (float32x4_t)vbslq_s8(v52, (int8x16_t)_Q16, v51);
        v55 = vcvtq_s32_f32(v53);
        v56 = vmulq_s32(v55, v39);
        v57 = vmulq_s32(v55, v41);
        v58 = (float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v57, v42)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v56, v40)));
        v59 = vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v58, v54, vsubq_f32((float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v57, v45)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v56, v44))), v58)), _Q16), (float32x4_t)0);
        v60 = vmaxnmq_f32(vmulq_f32(vmulq_f32(vaddq_f32(*v21, *v22), v32), _Q5), (float32x4_t)0);
        v61 = vrndmq_f32(v60);
        v62 = (int8x16_t)vsubq_f32(v60, v61);
        v63 = (int8x16_t)vcgeq_f32(v60, _Q7);
        v64 = (float32x4_t)vbslq_s8(v63, (int8x16_t)_Q5, (int8x16_t)v61);
        v65 = (float32x4_t)vbslq_s8(v63, (int8x16_t)_Q16, v62);
        v66 = vcvtq_s32_f32(v64);
        v67 = vmulq_s32(v66, v39);
        v68 = vmulq_s32(v66, v41);
        v69 = (float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v68, v42)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v67, v40)));
        v70 = vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v69, v65, vsubq_f32((float32x4_t)vbslq_s8(v43, vqtbl1q_s8(v31, (int8x16_t)vaddq_s32(v68, v45)), vqtbl1q_s8(v30, (int8x16_t)vaddq_s32(v67, v44))), v69)), _Q16), (float32x4_t)0);
        v71 = *v24++;
        v72 = vmulq_f32(v71, v46);
        v73 = *v25++;
        v74 = vmulq_f32(v73, v46);
        v75 = *v26++;
        v76 = vmulq_f32(vmulq_f32(v75, v46), v47);
        v77 = vmulq_f32(v70, vmlaq_f32(v76, v48, v72));
        v78 = vmulq_f32(v59, vmlaq_f32(v76, v48, v74));
        v79 = vaddq_f32(v77, v78);
        v80 = vaddq_f32(*v22, v79);
        v81 = vmlaq_n_f32(*v23, v79, v28);
        *v21 = vaddq_f32(*v21, vmlaq_n_f32(vsubq_f32(v77, v78), v79, v29));
        ++v21;
        *v22++ = v80;
        *v23++ = v81;
        v13 += 4;
      }
      while (v13 < ((a5 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
  return 0;
}

uint64_t sub_23688E36C(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 56) <= a2)
    return 3;
  else
    return a2 < 3;
}

const char *sub_23688E388()
{
  return "AddNoise";
}

void sub_23688E398()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688E3AC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 <= 0xFFFFFFFFFFFFFFFCLL)
  {
    v6 = -(uint64_t)((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v7 = a5 + a4;
    v8 = (4 * (a4 + 3)) & 0xFFFFFFFFFFFFFFF0 ^ 0xFFFFFFFFFFFFFFF8;
    v9 = (float32x4_t)vdupq_n_s32(0xC075C28F);
    v10 = (float32x4_t)vdupq_n_s32(0x3E23D70Au);
    v11 = *(_QWORD *)(a1 + 40);
    do
    {
      v12 = 0;
      v29 = 0;
      v27 = 0uLL;
      v28 = 0uLL;
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_QWORD *)(*a2 + 24 * v11);
      v15 = 0xFFFFFFFE00000000;
      do
      {
        *(_QWORD *)((char *)&v27 + v12) = *(_QWORD *)(v14 + 8 * (v13 + (v15 >> 32))) + 64;
        v12 += 8;
        v15 += 0x100000000;
      }
      while (v12 != 40);
      if (v7 > v6)
      {
        v16 = **(_QWORD **)(*a3 + 24 * v11) + 64;
        v17 = v29 + v8;
        v18 = v28;
        v19 = *((_QWORD *)&v28 + 1) + v8;
        v20 = *((_QWORD *)&v27 + 1) + v8;
        v21 = v27 + v8;
        v22 = v6;
        do
        {
          v23 = 0;
          v25 = 0uLL;
          do
          {
            v25 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v25, *(float32x4_t *)(v21 + v23)), *(float32x4_t *)(v20 + v23)), *(float32x4_t *)(v19 + v23)), *(float32x4_t *)(v17 + v23));
            v23 += 4;
          }
          while (v23 != 20);
          v24 = v18 + 4 * v22;
          *(float32x4_t *)(v16 + 4 * v22) = vmlaq_f32(vmulq_f32(*(float32x4_t *)v24, v9), v10, vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v25, *(float32x4_t *)(v24 - 8)), *(float32x4_t *)(v24 - 4)), *(float32x4_t *)(v24 + 4)), *(float32x4_t *)(v24 + 8)));
          v22 += 4;
          v17 += 16;
          v19 += 16;
          v20 += 16;
          v21 += 16;
        }
        while (v22 < v7);
        v5 = *(_QWORD *)(a1 + 40);
      }
      ++v11;
    }
    while (v11 < v5 + 3);
  }
  return 0;
}

uint64_t sub_23688E568(uint64_t a1, unint64_t a2)
{
  return 2 * (*(_QWORD *)(a1 + 40) <= a2);
}

const char *sub_23688E57C()
{
  return "ConvNoise";
}

void sub_23688E58C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688E5A0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *__p;
  uint64_t v44;
  void *v46[3];
  uint64_t *v47;
  uint64_t *v48;
  void *v49[3];

  if (a6)
    v12 = a6 - a4;
  else
    v12 = 0;
  sub_2367E1480(v46, a1[6]);
  v13 = a1[6];
  if (v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = a1[2];
    do
    {
      *((_QWORD *)v46[0] + v15++) = *(_QWORD *)(*(_QWORD *)(*a2 + v14) + 8 * v16) + 4 * v12 - 4 * a6 + 64;
      v14 += 24;
    }
    while (v13 != v15);
  }
  v17 = (_QWORD *)a1[5];
  v18 = v46[0];
  v44 = *(unsigned int *)(*(_QWORD *)*v17 + 320);
  sub_2367E755C(v49, v44 + 3);
  sub_2367E71C4((uint64_t)&v47, v17, a7);
  v19 = v48;
  __p = v47;
  if (v47 == v48)
  {
LABEL_25:
    if (__p)
      operator delete(__p);
    v41 = 0;
  }
  else
  {
    v20 = a5 + a4 + a6;
    v21 = v47;
    while (1)
    {
      v22 = *v21;
      v23 = v17[1];
      v24 = (unint64_t *)(v23 + 24 * *v21);
      v25 = v24[2];
      v26 = v17[4];
      v27 = (uint64_t *)(v26 + 40 * v25);
      v28 = *v24;
      v29 = v27[3] + *v24;
      if (*v24 < v20 && v29 >= v12)
      {
        v31 = 0;
        v32 = v22 * (v44 + 1);
        v33 = *v27;
        v35 = (uint64_t *)(v26 + 40 * v25 + 8);
        v34 = *v35;
        v36 = v35[1] + a7 - *(_QWORD *)(v23 + 24 * v22 + 8);
        v37 = -(uint64_t)v28;
        v38 = 456 * v33 + 2496;
        do
        {
          *(_QWORD *)((char *)v49[0] + v31) = *(_QWORD *)(*v17 + v38)
                                            + *(_QWORD *)(*v17 + 456 * v33 + 2488) * v36
                                            + 4 * v34
                                            + 4 * v12
                                            - 4 * v28;
          v31 += 8;
          v38 += 40;
        }
        while (v31 != 24);
        if (v28 <= v12)
          v28 = v12;
        if (v20 < v29)
          v29 = v20;
        if ((_DWORD)v44)
        {
          v39 = 0;
          v40 = 24;
          do
          {
            *(_QWORD *)((char *)v49[0] + v40) = *(_QWORD *)(*(_QWORD *)(*v17 + 456 * v33 + 2792) + v39 + 24)
                                              + *(_QWORD *)(*(_QWORD *)(*v17 + 456 * v33 + 2792) + v39 + 16) * v36
                                              + 4 * v34
                                              + 4 * v12
                                              + 4 * v37;
            v39 += 40;
            v40 += 8;
          }
          while (40 * v44 != v39);
        }
        v41 = sub_2367C3C58(v18, (_QWORD *)v49[0], v18, v28 - v12, v29 - v28, (unsigned __int8 *)(v17[7] + 12 * v32), v17[7] + 12 * v32 + 12, (uint64_t *)(*(_QWORD *)*v17 + 328));
        if ((_DWORD)v41)
          break;
      }
      if (++v21 == v19)
        goto LABEL_25;
    }
    if (__p)
      operator delete(__p);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return v41;
}

void sub_23688E858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

BOOL sub_23688E8A4(uint64_t a1, unint64_t a2)
{
  return *(_QWORD *)(a1 + 48) > a2;
}

const char *sub_23688E8B4()
{
  return "Patches";
}

void sub_23688E8C4()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688E8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float (__cdecl *v14)(float, float *);
  uint64_t v16[4];

  v8 = *(_QWORD **)(a1 + 40);
  v9 = v8[7];
  if (v9 != v8[8])
  {
    v10 = *(_QWORD **)a2;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v11) + 64;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v11) + 64;
    v14 = (float (__cdecl *)(float, float *))(*(_QWORD *)(*v10 + 8 * v11) + 64);
    v16[0] = a6;
    v16[1] = a7;
    v16[2] = a5;
    v16[3] = 1;
    sub_236806BCC(v14, v13, v12, v16, 1, v9, v8[10], v8[13]);
  }
  return 0;
}

BOOL sub_23688E954(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_23688E960()
{
  return "Splines";
}

void sub_23688E970()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688E984(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float v15;

  v5 = 0;
  v6 = a1[6];
  v7 = *(float *)(v6 + 12);
  v8 = *a2;
  v9 = a1[2];
  v10 = 64 - 4 * a4;
  v11 = (float *)(*(_QWORD *)(*(_QWORD *)(*a2 + 24 * a1[5]) + 8 * v9) + v10);
  do
  {
    if (a5 + a4 > -a4)
    {
      v12 = (float *)(*(_QWORD *)(*(_QWORD *)(v8 + 24 * v5) + 8 * v9) + v10);
      v13 = v11;
      v14 = a5 + 2 * a4;
      do
      {
        v15 = *v13++;
        *v12 = (float)((float)(1.0 - (float)(v7 * v15)) * *v12) + (float)((float)(v7 * v15) * *(float *)(v6 + 4 * v5));
        ++v12;
        --v14;
      }
      while (v14);
    }
    ++v5;
  }
  while (v5 != 3);
  return 0;
}

uint64_t sub_23688EA20(uint64_t a1, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (*(_QWORD *)(a1 + 40) == a2)
    return 3;
  return 0;
}

const char *sub_23688EA44()
{
  return "Spot";
}

void sub_23688EA54()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688EA68()
{
  return 0;
}

BOOL sub_23688EA70(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688EA7C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 41) == 0;
}

const char *sub_23688EA8C()
{
  return "ToLinear";
}

void sub_23688EA9C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688EAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int32x4_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
    v13 = vdupq_n_s32(0xC0D55555);
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V3.4S, #-1.0 }
    v20 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v21 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v22 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v23 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v24 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v25 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    __asm { FMOV            V18.4S, #1.0 }
    v27 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    v28 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    v29 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    v30 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    v31 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    v32 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    v33 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    do
    {
      v34 = *(float *)(a1 + 40);
      v35 = vaddq_s32(*v11, v13);
      v36 = vaddq_f32((float32x4_t)vsubq_s32(*v11, (int32x4_t)vandq_s8((int8x16_t)v35, v14)), _Q3);
      v37 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v36, vmlaq_f32(v21, v20, v36)), vmlaq_f32(v25, v36, vmlaq_f32(v23, v22, v36))), vcvtq_f32_s32(vshrq_n_s32(v35, 0x17uLL))), v34);
      v38 = vrndmq_f32(v37);
      v39 = vsubq_f32(v37, v38);
      v40 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v39, vmlaq_f32(v28, v39, vaddq_f32(v39, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v38), 0x17uLL), _Q18)), vmlaq_f32(v33, v39, vmlaq_f32(v32, v39, vmlaq_f32(v31, v30, v39)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v11));
      v41 = vaddq_s32(*v10, v13);
      v42 = vaddq_f32((float32x4_t)vsubq_s32(*v10, (int32x4_t)vandq_s8((int8x16_t)v41, v14)), _Q3);
      v43 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v42, vmlaq_f32(v21, v20, v42)), vmlaq_f32(v25, v42, vmlaq_f32(v23, v22, v42))), vcvtq_f32_s32(vshrq_n_s32(v41, 0x17uLL))), v34);
      v44 = vrndmq_f32(v43);
      v45 = vsubq_f32(v43, v44);
      v46 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v45, vmlaq_f32(v28, v45, vaddq_f32(v45, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v44), 0x17uLL), _Q18)), vmlaq_f32(v33, v45, vmlaq_f32(v32, v45, vmlaq_f32(v31, v30, v45)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v10));
      v47 = vaddq_s32(*v9, v13);
      v48 = vaddq_f32((float32x4_t)vsubq_s32(*v9, (int32x4_t)vandq_s8((int8x16_t)v47, v14)), _Q3);
      v49 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v24, v48, vmlaq_f32(v21, v20, v48)), vmlaq_f32(v25, v48, vmlaq_f32(v23, v22, v48))), vcvtq_f32_s32(vshrq_n_s32(v47, 0x17uLL))), v34);
      v50 = vrndmq_f32(v49);
      v51 = vsubq_f32(v49, v50);
      v52 = vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v29, v51, vmlaq_f32(v28, v51, vaddq_f32(v51, v27))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v50), 0x17uLL), _Q18)), vmlaq_f32(v33, v51, vmlaq_f32(v32, v51, vmlaq_f32(v31, v30, v51)))), (int8x16_t)vcgeq_f32(v12, *(float32x4_t *)v9));
      *v11++ = (int32x4_t)v40;
      *v10++ = (int32x4_t)v46;
      *v9++ = (int32x4_t)v52;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688EDB0(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688EDBC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 44) == 0;
}

const char *sub_23688EDCC()
{
  return "ToLinear";
}

void sub_23688EDDC()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688EDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (float32x4_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x3E638E39u);
    v13 = (float32x4_t)vdupq_n_s32(0x3F68F065u);
    v14 = (float32x4_t)vdupq_n_s32(0x3DB87CDBu);
    v15 = vdupq_n_s32(0xC0D55555);
    v16.i64[0] = 0x7F0000007FLL;
    v16.i64[1] = 0x7F0000007FLL;
    __asm { FMOV            V5.4S, #-1.0 }
    v22 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v23 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v24 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v25 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v26 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    v27 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    v28 = (float32x4_t)vdupq_n_s32(0x400E38E4u);
    __asm { FMOV            V21.4S, #1.0 }
    v30 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    v31 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    v32 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    v33 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    v34 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    v35 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    v36 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    v37 = (float32x4_t)vdupq_n_s32(0x3DA5E354u);
    do
    {
      v38 = (int32x4_t)vmlaq_f32(v14, v13, *v11);
      v39 = vaddq_s32(v38, v15);
      v40 = vaddq_f32((float32x4_t)vsubq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)v39, v16)), _Q5);
      v41 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v26, v40, vmlaq_f32(v23, v22, v40)), vmlaq_f32(v27, v40, vmlaq_f32(v25, v24, v40))), vcvtq_f32_s32(vshrq_n_s32(v39, 0x17uLL))), v28);
      v42 = vrndmq_f32(v41);
      v43 = vsubq_f32(v41, v42);
      v44 = vbslq_s8((int8x16_t)vcgtq_f32(v37, *v11), (int8x16_t)vmulq_f32(*v11, v12), (int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v32, v43, vmlaq_f32(v31, v43, vaddq_f32(v43, v30))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v42), 0x17uLL), _Q21)), vmlaq_f32(v36, v43, vmlaq_f32(v35, v43, vmlaq_f32(v34, v33, v43)))));
      v45 = (int32x4_t)vmlaq_f32(v14, v13, *v10);
      v46 = vaddq_s32(v45, v15);
      v47 = vaddq_f32((float32x4_t)vsubq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)v46, v16)), _Q5);
      v48 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v26, v47, vmlaq_f32(v23, v22, v47)), vmlaq_f32(v27, v47, vmlaq_f32(v25, v24, v47))), vcvtq_f32_s32(vshrq_n_s32(v46, 0x17uLL))), v28);
      v49 = vrndmq_f32(v48);
      v50 = vsubq_f32(v48, v49);
      v51 = vbslq_s8((int8x16_t)vcgtq_f32(v37, *v10), (int8x16_t)vmulq_f32(*v10, v12), (int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v32, v50, vmlaq_f32(v31, v50, vaddq_f32(v50, v30))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v49), 0x17uLL), _Q21)), vmlaq_f32(v36, v50, vmlaq_f32(v35, v50, vmlaq_f32(v34, v33, v50)))));
      v52 = (int32x4_t)vmlaq_f32(v14, v13, *v9);
      v53 = vaddq_s32(v52, v15);
      v54 = vaddq_f32((float32x4_t)vsubq_s32(v52, (int32x4_t)vandq_s8((int8x16_t)v53, v16)), _Q5);
      v55 = vmulq_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v26, v54, vmlaq_f32(v23, v22, v54)), vmlaq_f32(v27, v54, vmlaq_f32(v25, v24, v54))), vcvtq_f32_s32(vshrq_n_s32(v53, 0x17uLL))), v28);
      v56 = vrndmq_f32(v55);
      v57 = vsubq_f32(v55, v56);
      v58 = vbslq_s8((int8x16_t)vcgtq_f32(v37, *v9), (int8x16_t)vmulq_f32(*v9, v12), (int8x16_t)vdivq_f32(vmulq_f32(vmlaq_f32(v32, v57, vmlaq_f32(v31, v57, vaddq_f32(v57, v30))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v56), 0x17uLL), _Q21)), vmlaq_f32(v36, v57, vmlaq_f32(v35, v57, vmlaq_f32(v34, v33, v57)))));
      *v11++ = (float32x4_t)v44;
      *v10++ = (float32x4_t)v51;
      *v9++ = (float32x4_t)v58;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688F150(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688F15C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 41) == 0;
}

const char *sub_23688F16C()
{
  return "ToLinear";
}

void sub_23688F17C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688F190(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int8x16_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  double v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  _QWORD v64[5];

  v64[3] = *MEMORY[0x24BDAC8D0];
  v8 = -a7;
  v58 = a8 + a7;
  if (a8 + a7 > -a7)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v10) + 64;
    v57 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v10) + 64;
    v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v10) + 64;
    __asm { FMOV            V0.4S, #-1.0 }
    v53 = _Q0;
    v54 = vdupq_n_s32(0xC0D55555);
    v51 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
    v52 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
    v49 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
    v50 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
    v47 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
    v48 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
    __asm { FMOV            V1.4S, #1.0 }
    v45 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
    v46 = _Q1;
    v43 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
    v44 = (float32x4_t)vdupq_n_s32(0x424379A1u);
    v41 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
    v42 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
    v39 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
    v40 = (float32x4_t)vdupq_n_s32(0xC19B8831);
    v38 = (float32x4_t)vdupq_n_s32(0x4E6E6B28u);
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    do
    {
      v18 = 0;
      v19 = (float32x4_t *)(v57 + 4 * v8);
      v62 = *(int8x16_t *)v19;
      v20 = (float32x4_t *)(v56 + 4 * v8);
      v61 = *v20;
      v21 = (float32x4_t *)(v55 + 4 * v8);
      v60 = *v21;
      v64[0] = &v62;
      v64[1] = &v61;
      v64[2] = &v60;
      do
      {
        v22 = 0;
        v23 = (int8x16_t *)v64[v18];
        v24 = *v23;
        v63 = *v23;
        do
        {
          a5.i32[0] = v63.i32[v22];
          v24.i32[0] = 0;
          if (*(float *)a5.i32 != 0.0)
          {
            v25 = fabs(*(float *)a5.i32);
            if (v25 <= 0.5)
            {
              *(double *)v24.i64 = *(float *)a5.i32 * *(float *)a5.i32 * 0.333333333;
            }
            else
            {
              v59 = a5;
              *(double *)v24.i64 = exp((v25 + -0.559910729) * 5.59181631);
              a5 = v59;
              v17.i64[0] = 0x8000000080000000;
              v17.i64[1] = 0x8000000080000000;
              *(double *)v24.i64 = (*(double *)v24.i64 + 0.28466892) * 0.0833333333;
            }
            *(float *)v24.i32 = *(double *)v24.i64;
            v24 = vbslq_s8(v17, v24, a5);
          }
          v63.i32[v22++] = v24.i32[0];
        }
        while (v22 != 4);
        *v23 = v63;
        ++v18;
      }
      while (v18 != 3);
      v26 = v61;
      a5 = v62;
      v27 = v60;
      if (*(_BYTE *)(a1 + 44))
      {
        v28 = (int32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v60, *(float *)(a1 + 56)), v61, *(float *)(a1 + 52)), (float32x4_t)v62, *(float *)(a1 + 48));
        v29 = vaddq_s32(v28, v54);
        v30 = vshrq_n_s32(v29, 0x17uLL);
        v31.i64[0] = 0x7F0000007FLL;
        v31.i64[1] = 0x7F0000007FLL;
        v32 = vaddq_f32((float32x4_t)vsubq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)v29, v31)), v53);
        v33 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v48, v32, vmlaq_f32(v51, v52, v32)), vmlaq_f32(v47, v32, vmlaq_f32(v49, v50, v32))), vcvtq_f32_s32(v30)), *(float *)(a1 + 40));
        v34 = vrndmq_f32(v33);
        v35 = vsubq_f32(v33, v34);
        v36 = vminnmq_f32(vdivq_f32(vmulq_f32(vmlaq_f32(v43, v35, vmlaq_f32(v44, v35, vaddq_f32(v35, v45))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v34), 0x17uLL), v46)), vmlaq_f32(v39, v35, vmlaq_f32(v40, v35, vmlaq_f32(v41, v42, v35)))), v38);
        a5 = (int8x16_t)vmulq_f32((float32x4_t)v62, v36);
        v26 = vmulq_f32(v61, v36);
        v27 = vmulq_f32(v60, v36);
      }
      *v19 = (float32x4_t)a5;
      *v20 = v26;
      *v21 = v27;
      v8 += 4;
    }
    while (v8 < v58);
  }
  return 0;
}

BOOL sub_23688F544(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688F550(uint64_t a1)
{
  return *(_BYTE *)(a1 + 60) == 0;
}

const char *sub_23688F560()
{
  return "ToLinear";
}

void sub_23688F570()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688F584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int8x16_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x3F0CCF16u);
    v13 = (float32x4_t)vdupq_n_s32(0x40295064u);
    v14 = (float32x4_t)vdupq_n_s32(0x402B570Bu);
    v15 = (float32x4_t)vdupq_n_s32(0xC207A1AD);
    v16 = (float32x4_t)vdupq_n_s32(0x3F3D150Au);
    v17 = (float32x4_t)vdupq_n_s32(0x432E5D5Bu);
    v18 = (float32x4_t)vdupq_n_s32(0xBBCC536D);
    v19 = (float32x4_t)vdupq_n_s32(0xC3D65E50);
    v20 = (float32x4_t)vdupq_n_s32(0x3989DFFFu);
    v21 = (float32x4_t)vdupq_n_s32(0x43D2ACD0u);
    v22.i64[0] = 0x8000000080000000;
    v22.i64[1] = 0x8000000080000000;
    do
    {
      v23.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v23.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v23.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      v24 = vmlaq_f32(v23, v23, v23);
      v25 = *(float *)(a1 + 44);
      v26 = vbslq_s8(v22, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v20, v24, vmlaq_f32(v18, v24, vmlaq_f32(v16, v24, vmlaq_f32(v13, v12, v24)))), vmlaq_f32(v21, v24, vmlaq_f32(v19, v24, vmlaq_f32(v17, v24, vmlaq_f32(v15, v14, v24))))), v25), *v11);
      v24.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v24.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v24.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      v27 = vmlaq_f32(v24, v24, v24);
      v28 = vbslq_s8(v22, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v20, v27, vmlaq_f32(v18, v27, vmlaq_f32(v16, v27, vmlaq_f32(v13, v12, v27)))), vmlaq_f32(v21, v27, vmlaq_f32(v19, v27, vmlaq_f32(v17, v27, vmlaq_f32(v15, v14, v27))))), v25), *v10);
      v27.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v27.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v27.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      v29 = vmlaq_f32(v27, v27, v27);
      v30 = vbslq_s8(v22, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v20, v29, vmlaq_f32(v18, v29, vmlaq_f32(v16, v29, vmlaq_f32(v13, v12, v29)))), vmlaq_f32(v21, v29, vmlaq_f32(v19, v29, vmlaq_f32(v17, v29, vmlaq_f32(v15, v14, v29))))), v25), *v9);
      *v11++ = v26;
      *v10++ = v28;
      *v9++ = v30;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688F77C(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688F788(uint64_t a1)
{
  return *(_BYTE *)(a1 + 48) == 0;
}

const char *sub_23688F798()
{
  return "ToLinear";
}

void sub_23688F7A8()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688F7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;

  v5 = -a4;
  if (a5 + a4 > -a4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6);
    v8 = 64 - 4 * a4;
    v9 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + v8);
    v10 = (int8x16_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + v8);
    v11 = (int8x16_t *)(v7 + v8);
    v12 = (float32x4_t)vdupq_n_s32(0x3D9E8391u);
    v13 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
    v14 = (float32x4_t)vdupq_n_s32(0x3F4BD0EAu);
    v15 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
    v16 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
    v17 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
    v18 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
    v19 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
    v20 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
    v21 = (float32x4_t)vdupq_n_s32(0x3966B677u);
    v22 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
    v23 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    do
    {
      v25.i64[0] = __PAIR64__(HIDWORD(v11->i64[0]), *v11) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v11->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v11->i64[0]) & 0x7FFFFFFF;
      v26 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v25, vmlaq_f32(v19, v25, vmlaq_f32(v17, v25, vmlaq_f32(v14, v13, v25)))), vmlaq_f32(v22, v25, vmlaq_f32(v20, v25, vmlaq_f32(v18, v25, vmlaq_f32(v16, v15, v25))))), (int8x16_t)vmulq_f32(v25, v12)), *v11);
      v25.i64[0] = __PAIR64__(HIDWORD(v10->i64[0]), *v10) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v10->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v10->i64[0]) & 0x7FFFFFFF;
      v27 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v25, vmlaq_f32(v19, v25, vmlaq_f32(v17, v25, vmlaq_f32(v14, v13, v25)))), vmlaq_f32(v22, v25, vmlaq_f32(v20, v25, vmlaq_f32(v18, v25, vmlaq_f32(v16, v15, v25))))), (int8x16_t)vmulq_f32(v25, v12)), *v10);
      v25.i64[0] = __PAIR64__(HIDWORD(v9->i64[0]), *v9) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i32[2] = v9->i64[1] & 0x7FFFFFFF;
      v25.i32[3] = HIDWORD(v9->i64[0]) & 0x7FFFFFFF;
      v28 = vbslq_s8(v24, vbslq_s8((int8x16_t)vcgtq_f32(v25, v23), (int8x16_t)vdivq_f32(vmlaq_f32(v21, v25, vmlaq_f32(v19, v25, vmlaq_f32(v17, v25, vmlaq_f32(v14, v13, v25)))), vmlaq_f32(v22, v25, vmlaq_f32(v20, v25, vmlaq_f32(v18, v25, vmlaq_f32(v16, v15, v25))))), (int8x16_t)vmulq_f32(v25, v12)), *v9);
      *v11++ = v26;
      *v10++ = v27;
      *v9++ = v28;
      v5 += 4;
    }
    while (v5 < a5 + a4);
  }
  return 0;
}

BOOL sub_23688F9D4(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688F9E0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 41) == 0;
}

const char *sub_23688F9F0()
{
  return "ToLinear";
}

void sub_23688FA00()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688FA14()
{
  return 0;
}

BOOL sub_23688FA1C(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

BOOL sub_23688FA28(uint64_t a1)
{
  return *(_BYTE *)(a1 + 41) == 0;
}

const char *sub_23688FA38()
{
  return "ToLinear";
}

uint64_t sub_23688FA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)a1 = &off_2507FFA18;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 112) = &off_250800470;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = &off_2507FFCC0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = &off_250800470;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = &off_250800470;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = &off_250800470;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v8 = *(_OWORD *)(a2 + 200);
  v9 = *(_OWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 226);
  *(_QWORD *)(a1 + 248) = &off_2507FFA18;
  *(_OWORD *)(a1 + 226) = v10;
  *(_OWORD *)(a1 + 200) = v8;
  *(_OWORD *)(a1 + 216) = v9;
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  v11 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 269) = *(_QWORD *)(a2 + 269);
  *(_QWORD *)(a1 + 264) = v11;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 280), *(const void **)(a2 + 280), *(_QWORD *)(a2 + 288), *(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280));
  v12 = *(_OWORD *)(a2 + 304);
  v13 = *(_OWORD *)(a2 + 320);
  v14 = *(_OWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v14;
  *(_OWORD *)(a1 + 304) = v12;
  *(_QWORD *)(a1 + 360) = &off_250800470;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = &off_2507FFCC0;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = &off_250800470;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = &off_250800470;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = &off_250800470;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = &off_2507FFA18;
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  v15 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 469) = *(_QWORD *)(a2 + 469);
  *(_QWORD *)(a1 + 464) = v15;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  sub_2367C9F60((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), *(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480));
  v16 = *(_OWORD *)(a2 + 504);
  v17 = *(_OWORD *)(a2 + 520);
  v18 = *(_OWORD *)(a2 + 536);
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = v18;
  *(_OWORD *)(a1 + 520) = v17;
  *(_OWORD *)(a1 + 504) = v16;
  *(_QWORD *)(a1 + 560) = &off_250800470;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = &off_2507FFCC0;
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 600) = &off_250800470;
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = &off_250800470;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = &off_250800470;
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  memcpy((void *)(a1 + 648), (const void *)(a2 + 648), 0x120uLL);
  return a1;
}

void sub_23688FC54(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v1[31] = v2;
  v4 = (void *)v1[35];
  if (v4)
  {
    v1[36] = v4;
    operator delete(v4);
  }
  *v1 = v2;
  v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23688FC90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_250800030;
  v2 = a1[123];
  a1[123] = 0;
  if (v2)
    MEMORY[0x23B7F8F48](v2, 0x1000C402A459A87);
  v3 = a1[122];
  a1[122] = 0;
  if (v3)
    MEMORY[0x23B7F8F48](v3, 0x1000C40B33851A5);
  a1[61] = &off_2507FFA18;
  v4 = (void *)a1[65];
  if (v4)
  {
    a1[66] = v4;
    operator delete(v4);
  }
  a1[36] = &off_2507FFA18;
  v5 = (void *)a1[40];
  if (v5)
  {
    a1[41] = v5;
    operator delete(v5);
  }
  a1[5] = &off_2507FFA18;
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_23688FD40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_250800030;
  v2 = a1[123];
  a1[123] = 0;
  if (v2)
    MEMORY[0x23B7F8F48](v2, 0x1000C402A459A87);
  v3 = a1[122];
  a1[122] = 0;
  if (v3)
    MEMORY[0x23B7F8F48](v3, 0x1000C40B33851A5);
  a1[61] = &off_2507FFA18;
  v4 = (void *)a1[65];
  if (v4)
  {
    a1[66] = v4;
    operator delete(v4);
  }
  a1[36] = &off_2507FFA18;
  v5 = (void *)a1[40];
  if (v5)
  {
    a1[41] = v5;
    operator delete(v5);
  }
  a1[5] = &off_2507FFA18;
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_23688FE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v16;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  uint64_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  const float *v44;
  float32x4_t v45;
  const float *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v58;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  uint64_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  float v91;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t *v104;
  float32x4_t *v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 976) || *(_QWORD *)(a1 + 984))
  {
    v5 = -a4;
    if (a5 + a4 > -a4)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v6) + 64;
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + 64;
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6) + 64;
      v98 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
      v99 = vdupq_n_s32(0xC0D55555);
      v96 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
      v97 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
      v10 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
      __asm { FMOV            V0.4S, #-1.0 }
      v94 = _Q0;
      v95 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
      v16 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
      __asm { FMOV            V5.4S, #1.0 }
      v93 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
      v18 = (float32x4_t)vdupq_n_s32(0x424379A1u);
      v19 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
      v20 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
      v21 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
      v22 = (float32x4_t)vdupq_n_s32(0xC19B8831);
      v23 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
      v24 = (float32x4_t)vdupq_n_s32(0x4E6E6B28u);
      v25 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
      v26 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
      v27 = (float32x4_t)vdupq_n_s32(0xC88BE24D);
      v28 = (float32x4_t)vdupq_n_s32(0x4786914Fu);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      v30.i64[0] = 0x4000000040000000;
      v30.i64[1] = 0x4000000040000000;
      v31.i64[0] = 0xC0000000C0000000;
      v31.i64[1] = 0xC0000000C0000000;
      while (1)
      {
        v32 = (float32x4_t *)(v7 + 4 * v5);
        v33 = *v32;
        v34 = (float32x4_t *)(v8 + 4 * v5);
        v35 = *v34;
        v36 = (float32x4_t *)(v9 + 4 * v5);
        v37 = *v36;
        v38 = *(_QWORD *)(a1 + 976);
        if (!v38 && !*(_QWORD *)(a1 + 984))
          goto LABEL_23;
        v39 = *(float *)(a1 + 992);
        v40 = vmulq_n_f32(v33, v39);
        v41 = vmulq_n_f32(v35, v39);
        v101 = v41;
        v102 = v40;
        v42 = vmulq_n_f32(v37, v39);
        v100 = v42;
        if (!v38)
          break;
        v43 = 0;
        v44 = (const float *)(v38 + 28);
        v45 = vld1q_dup_f32(v44);
        v46 = (const float *)(v38 + 12);
        v47 = vld1q_dup_f32(v46);
        v48 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, *(float *)(v38 + 24)), v41, *(float *)(v38 + 20)), v40, *(float *)(v38 + 16)), *(float *)(v38 + 4));
        v49 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32((float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), *(float *)(v38 + 72))));
        v50 = (int8x16_t)vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x37257B02u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EC6B81Cu), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x43074838u), v49, vmlaq_f32(v28, v27, v49)))), vmlaq_f32((float32x4_t)vdupq_n_s32(0x4206DFEEu), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x44B8B702u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x467B5314u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0xC72B7AD7), (float32x4_t)vdupq_n_s32(0xC84A65A6),
                                   v49)))));
        v51 = (int8x16_t)vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3C5D697Du), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF8C4274), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x425CE93Au), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x43154069u), (float32x4_t)vdupq_n_s32(0x42418990u), v49)))), vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F8196D9u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x41A1562Eu), v49,
                               vmlaq_f32((float32x4_t)vdupq_n_s32(0x42B94632u), v49, vmlaq_f32((float32x4_t)vdupq_n_s32(0x42E01F14u), (float32x4_t)vdupq_n_s32(0x41CF3BC3u), v49)))));
        v52 = vminnmq_f32(vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v29, vbslq_s8((int8x16_t)vcgtq_f32(v26, (float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))), v50, v51), (int8x16_t)v48), v45), *(float *)(v38 + 40)), _Q5);
        v51.i32[0] = *(_DWORD *)(v38 + 52);
        v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0);
        v54 = vmulq_n_f32(vsubq_f32(v52, v53), *(float *)(v38 + 56));
        v55 = vmulq_f32(v54, v54);
        v56 = vmulq_f32(v54, v55);
        __asm { FMOV            V7.4S, #-3.0 }
        v58 = vmlaq_f32(_Q5, _Q7, v55);
        __asm { FMOV            V7.4S, #3.0 }
        v60 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v53, v52), (int8x16_t)v52, (int8x16_t)vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(vmlaq_f32(vmulq_f32(v55, _Q7), v31, v56), *(float *)(v38 + 48)), vsubq_f32(_Q5, v53), vaddq_f32(v56, vmlaq_f32(v54, v31, v55))), vmlaq_f32(v58, v30, v56), *(float *)v51.i32));
        v61 = vsubq_f32(_Q5, v60);
        v62 = vmulq_f32(v61, v61);
        v63 = (int8x16_t)vmlaq_n_f32(v45, vmlaq_n_f32(v60, vmulq_f32(v62, v62), *(float *)(v38 + 44)), *(float *)(v38 + 36));
        v64 = vmlaq_f32((float32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&v63 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v65 = vminnmq_f32(v47, vmaxnmq_f32((float32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3989DFFFu), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBBCC536D), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F3D150Au), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0x40295064u), (float32x4_t)vdupq_n_s32(0x3F0CCF16u), v64)))),
                                                vmlaq_f32((float32x4_t)vdupq_n_s32(0x43D2ACD0u), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0xC3D65E50), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0x432E5D5Bu), v64, vmlaq_f32((float32x4_t)vdupq_n_s32(0xC207A1AD), (float32x4_t)vdupq_n_s32(0x402B570Bu), v64))))), *(float *)(v38 + 76)), v63), (float32x4_t)0));
        v66 = (float32x4_t)vdupq_n_s32(0x358637BDu);
        v67 = (int8x16_t)vmulq_n_f32(v65, *(float *)(v38 + 64));
        v68 = vmulq_n_f32(vdivq_f32(v65, vmaxnmq_f32(v48, v66)), *(float *)(v38 + 60));
        v103 = &v102;
        v104 = &v101;
        v105 = &v100;
        do
        {
          **(int8x16_t **)((char *)&v103 + v43) = vbslq_s8((int8x16_t)vcgeq_f32(v66, v48), v67, (int8x16_t)vmulq_f32(v68, **(float32x4_t **)((char *)&v103 + v43)));
          v43 += 8;
        }
        while (v43 != 24);
        if (!*(_QWORD *)(a1 + 976))
        {
          v69 = *(_QWORD *)(a1 + 984);
          goto LABEL_14;
        }
LABEL_16:
        v79 = 0;
        v80 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v100, *(float *)(a1 + 900)), v101, *(float *)(a1 + 896)), v102, *(float *)(a1 + 892));
        v103 = &v102;
        v104 = &v101;
        v105 = &v100;
        v81 = 0uLL;
        v82 = 0uLL;
        do
        {
          v83 = *(float32x4_t **)((char *)&v103 + v79);
          v84 = vsubq_f32(*v83, v80);
          v85 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v84), (int8x16_t)_Q5, (int8x16_t)vdivq_f32(_Q5, v84));
          v86 = vmulq_f32(*v83, v85);
          v81 = (float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v84), (int8x16_t)v81, (int8x16_t)vmaxnmq_f32(v81, v86));
          v82 = vmaxnmq_f32(v82, (float32x4_t)vbslq_s8((int8x16_t)vclezq_f32(v84), (int8x16_t)v81, (int8x16_t)vsubq_f32(v86, v85)));
          v79 += 8;
        }
        while (v79 != 24);
        v87 = 0;
        v88 = vminnmq_f32(vmaxnmq_f32(vmlaq_f32(v82, v25, vsubq_f32(v81, v82)), (float32x4_t)0), _Q5);
        v103 = &v102;
        v104 = &v101;
        v105 = &v100;
        do
        {
          **(float32x4_t **)((char *)&v103 + v87) = vmlaq_f32(**(float32x4_t **)((char *)&v103 + v87), vsubq_f32(v80, **(float32x4_t **)((char *)&v103 + v87)), v88);
          v87 += 8;
        }
        while (v87 != 24);
        v89 = 0;
        v90 = vdivq_f32(_Q5, vmaxnmq_f32(vmaxnmq_f32(v102, _Q5), vmaxnmq_f32(v101, v100)));
        v103 = &v102;
        v104 = &v101;
        v105 = &v100;
        do
        {
          **(float32x4_t **)((char *)&v103 + v89) = vmulq_f32(v90, **(float32x4_t **)((char *)&v103 + v89));
          v89 += 8;
        }
        while (v89 != 24);
LABEL_22:
        v91 = *(float *)(a1 + 996);
        v33 = vmulq_n_f32(v102, v91);
        v35 = vmulq_n_f32(v101, v91);
        v37 = vmulq_n_f32(v100, v91);
LABEL_23:
        *v32 = v33;
        *v34 = v35;
        *v36 = v37;
        v5 += 4;
        if (v5 >= a5 + a4)
          return 0;
      }
      v69 = *(_QWORD *)(a1 + 984);
      if (*(_BYTE *)(v69 + 4))
      {
        v70 = (int32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, *(float *)(v69 + 16)), v41, *(float *)(v69 + 12)), v40, *(float *)(v69 + 8));
        v71 = vaddq_s32(v70, v99);
        v72 = vshrq_n_s32(v71, 0x17uLL);
        v73.i64[0] = 0x7F0000007FLL;
        v73.i64[1] = 0x7F0000007FLL;
        v74 = vaddq_f32((float32x4_t)vsubq_s32(v70, (int32x4_t)vandq_s8((int8x16_t)v71, v73)), v94);
        v75 = vmulq_n_f32(vaddq_f32(vdivq_f32(vmlaq_f32(v10, v74, vmlaq_f32(v97, v98, v74)), vmlaq_f32(v16, v74, vmlaq_f32(v95, v96, v74))), vcvtq_f32_s32(v72)), *(float *)v69);
        v76 = vrndmq_f32(v75);
        v77 = vsubq_f32(v75, v76);
        v78 = vminnmq_f32(vdivq_f32(vmulq_f32(vmlaq_f32(v19, v77, vmlaq_f32(v18, v77, vaddq_f32(v77, v93))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v76), 0x17uLL), (int32x4_t)_Q5)), vmlaq_f32(v23, v77, vmlaq_f32(v22, v77, vmlaq_f32(v21, v20, v77)))), v24);
        v101 = vmulq_f32(v41, v78);
        v102 = vmulq_f32(v40, v78);
        v100 = vmulq_f32(v42, v78);
      }
LABEL_14:
      if (!*(_BYTE *)(v69 + 4) || *(float *)v69 >= 0.0)
        goto LABEL_22;
      goto LABEL_16;
    }
  }
  return 0;
}

BOOL sub_236890558(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_236890564()
{
  return "ToneMapping";
}

void sub_236890574()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_236890588(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t n;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  unsigned int v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t j;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x2x2_t v62;
  int32x4_t v63;
  float32x2x2_t v64;
  int32x4_t v65;
  float32x2x2_t v66;
  int32x4_t v67;
  float32x2x2_t v68;
  int32x4_t v69;
  float *v70;
  float *i32;
  float *v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t k;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t m;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t *v97;
  float32x2x2_t v98;
  int32x4_t v99;
  float *v100;
  float32x2x2_t v101;
  int32x4_t v102;
  float *v103;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t *v113;
  int32x4_t *v114;
  int32x4_t *v115;
  int32x4_t *v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 24);
  switch(v5)
  {
    case 3:
      v32 = 0;
      v113 = &v112;
      v114 = &v111;
      v115 = &v110;
      v116 = &v109;
      *(_QWORD *)&v117 = &v108;
      *((_QWORD *)&v117 + 1) = &v107;
      *(_QWORD *)&v118 = &v106;
      *((_QWORD *)&v118 + 1) = &v105;
      do
      {
        if (a5 >= 1)
        {
          v33 = 0;
          v34 = *(_QWORD *)(*(_QWORD *)(*a3 + 24 * *(_QWORD *)(a1 + 40)) + 8 * v32) + 64;
          v35 = v32 & 3;
          if ((v32 & 4) != 0)
            v35 = v32 & 3 ^ 3;
          v36 = 56;
          do
          {
            for (i = 0; i != 8; ++i)
            {
              v38 = *(_QWORD *)(*a2 + 24 * *(_QWORD *)(a1 + 40));
              v39 = *(_QWORD *)(a1 + 16);
              v40 = *(float32x4_t *)(*(_QWORD *)(v38 + 8 * v39) + 4 * v33 + 64);
              v41 = i & 3;
              if ((i & 4) != 0)
                v41 = i & 3 ^ 3;
              v42 = -2;
              v43 = 0uLL;
              v44 = *(float32x4_t *)(*(_QWORD *)(v38 + 8 * v39) + 4 * v33 + 64);
              do
              {
                if ((v32 & 4) != 0)
                  v45 = -v42;
                else
                  v45 = v42;
                v46 = v45 + 2;
                v47 = (_OWORD *)(*(_QWORD *)(v38 + 8 * (v39 + (int)v42)) + v36);
                v48 = -2;
                for (j = 2; j != -3; --j)
                {
                  v50 = *(float32x4_t *)v47;
                  v47 = (_OWORD *)((char *)v47 + 4);
                  v51 = v50;
                  if ((i & 4) != 0)
                    v52 = j;
                  else
                    v52 = v48;
                  v43 = vmlaq_n_f32(v43, v51, *(float *)(a1 + 400 * v35 + 100 * v41 + 20 * v46 + 4 * v52 + 56));
                  v40 = vminnmq_f32(v51, v40);
                  v44 = vmaxnmq_f32(v51, v44);
                  ++v48;
                }
                ++v42;
              }
              while (v42 != 3);
              *(float32x4_t *)*(&v113 + i) = vminnmq_f32(vmaxnmq_f32(v40, v43), v44);
            }
            v53 = vzip1q_s32(v112, v108);
            v54 = vzip1q_s32(v111, v107);
            v55 = vzip1q_s32(v110, v106);
            v56 = (int32x4_t *)(v34 + 32 * v33);
            v57 = vzip1q_s32(v109, v105);
            v58 = vzip2q_s32(v112, v108);
            v59 = vzip2q_s32(v111, v107);
            v60 = vzip2q_s32(v110, v106);
            v61 = vzip2q_s32(v109, v105);
            v62 = (float32x2x2_t)vzip1q_s32(v53, v55);
            v63 = vzip1q_s32(v54, v57);
            v64 = (float32x2x2_t)vzip2q_s32(v53, v55);
            v65 = vzip2q_s32(v54, v57);
            v66 = (float32x2x2_t)vzip1q_s32(v58, v60);
            v67 = vzip1q_s32(v59, v61);
            v68 = (float32x2x2_t)vzip2q_s32(v58, v60);
            v69 = vzip2q_s32(v59, v61);
            v70 = (float *)v56;
            vst2_f32(v70, v62);
            v70 += 4;
            *(int32x4_t *)v70 = vzip2q_s32((int32x4_t)v62, v63);
            i32 = (float *)v56[2].i32;
            vst2_f32(i32, v64);
            v56[3] = vzip2q_s32((int32x4_t)v64, v65);
            v72 = (float *)v56[4].i32;
            vst2_f32(v72, v66);
            v73 = (float *)v56[6].i32;
            vst2_f32(v73, v68);
            v56[5] = vzip2q_s32((int32x4_t)v66, v67);
            v56[7] = vzip2q_s32((int32x4_t)v68, v69);
            v33 += 4;
            v36 += 16;
          }
          while (v33 < a5);
        }
        ++v32;
      }
      while (v32 != 8);
      break;
    case 2:
      v74 = 0;
      v117 = 0u;
      v118 = 0u;
      v113 = &v112;
      v114 = &v111;
      v115 = &v110;
      v116 = &v109;
      do
      {
        if (a5 >= 1)
        {
          v75 = 0;
          v76 = *(_QWORD *)(*(_QWORD *)(*a3 + 24 * *(_QWORD *)(a1 + 40)) + 8 * v74) + 64;
          v77 = 56;
          do
          {
            for (k = 0; k != 4; ++k)
            {
              v79 = *(_QWORD *)(a1 + 16);
              v80 = *(_QWORD *)(*a2 + 24 * *(_QWORD *)(a1 + 40));
              v81 = *(float32x4_t *)(*(_QWORD *)(v80 + 8 * v79) + 4 * v75 + 64);
              v82 = -2;
              v83 = 0uLL;
              v84 = v81;
              do
              {
                if ((v74 & 2) != 0)
                  v85 = -v82;
                else
                  v85 = v82;
                v86 = v85 + 2;
                v87 = (_OWORD *)(*(_QWORD *)(v80 + 8 * (v79 + (int)v82)) + v77);
                v88 = -2;
                for (m = 2; m != -3; --m)
                {
                  v90 = *(float32x4_t *)v87;
                  v87 = (_OWORD *)((char *)v87 + 4);
                  v91 = v90;
                  if ((k & 2) != 0)
                    v92 = m;
                  else
                    v92 = v88;
                  v83 = vmlaq_n_f32(v83, v91, *(float *)(a1+ 400 * (v74 & 1 ^ ((unint64_t)(v74 & 2) >> 1))+ 100 * (k & 1 ^ ((unint64_t)(k & 2) >> 1))+ 20 * v86+ 4 * v92+ 56));
                  v81 = vminnmq_f32(v91, v81);
                  v84 = vmaxnmq_f32(v91, v84);
                  ++v88;
                }
                ++v82;
              }
              while (v82 != 3);
              *(float32x4_t *)*(&v113 + k) = vminnmq_f32(vmaxnmq_f32(v81, v83), v84);
            }
            v94 = v111;
            v93 = v112;
            v96 = v109;
            v95 = v110;
            v97 = (int32x4_t *)(v76 + 16 * v75);
            v98 = (float32x2x2_t)vzip1q_s32(v112, v110);
            v99 = vzip1q_s32(v111, v109);
            v100 = (float *)v97;
            vst2_f32(v100, v98);
            v100 += 4;
            v101 = (float32x2x2_t)vzip2q_s32(v93, v95);
            v102 = vzip2q_s32(v94, v96);
            v103 = (float *)v97[2].i32;
            vst2_f32(v103, v101);
            *(int32x4_t *)v100 = vzip2q_s32((int32x4_t)v98, v99);
            v97[3] = vzip2q_s32((int32x4_t)v101, v102);
            v75 += 4;
            v77 += 16;
          }
          while (v75 < a5);
        }
        ++v74;
      }
      while (v74 != 4);
      break;
    case 1:
      v6 = 0;
      v113 = &v112;
      v114 = &v111;
      v7 = 1;
      do
      {
        v8 = v7;
        if (a5 >= 1)
        {
          v9 = 0;
          v10 = *(_QWORD *)(*(_QWORD *)(*a3 + 24 * *(_QWORD *)(a1 + 40)) + 8 * v6) + 64;
          v11 = 56;
          do
          {
            v12 = 0;
            v13 = 1;
            do
            {
              v14 = *(_QWORD *)(a1 + 16);
              v15 = *(_QWORD *)(*a2 + 24 * *(_QWORD *)(a1 + 40));
              v16 = v13;
              v17 = *(float32x4_t *)(*(_QWORD *)(v15 + 8 * v14) + 4 * v9 + 64);
              v18 = -2;
              v19 = 0uLL;
              v20 = v17;
              do
              {
                if ((v8 & 1) != 0)
                  v21 = v18;
                else
                  v21 = -v18;
                v22 = v21 + 2;
                v23 = (_OWORD *)(*(_QWORD *)(v15 + 8 * (v14 + (int)v18)) + v11);
                v24 = -2;
                for (n = 2; n != -3; --n)
                {
                  v26 = *(float32x4_t *)v23;
                  v23 = (_OWORD *)((char *)v23 + 4);
                  v27 = v26;
                  if ((v16 & 1) != 0)
                    v28 = v24;
                  else
                    v28 = n;
                  v19 = vmlaq_n_f32(v19, v27, *(float *)(a1 + 48 + 20 * v22 + 4 * v28 + 8));
                  v17 = vminnmq_f32(v27, v17);
                  v20 = vmaxnmq_f32(v27, v20);
                  ++v24;
                }
                ++v18;
              }
              while (v18 != 3);
              v13 = 0;
              *(float32x4_t *)*(&v113 + v12) = vminnmq_f32(vmaxnmq_f32(v17, v19), v20);
              v12 = 1;
            }
            while ((v16 & 1) != 0);
            v30 = v111;
            v29 = v112;
            v31 = (float *)(v10 + 8 * v9);
            vst2_f32(v31, *(float32x2x2_t *)((char *)&v30 - 8));
            v31 += 4;
            *(int32x4_t *)v31 = vzip2q_s32(v29, v30);
            v9 += 4;
            v11 += 16;
          }
          while (v9 < a5);
        }
        v7 = 0;
        v6 = 1;
      }
      while ((v8 & 1) != 0);
      break;
  }
  return 0;
}

uint64_t sub_236890AC8(uint64_t a1, uint64_t a2)
{
  return 2 * (*(_QWORD *)(a1 + 40) == a2);
}

const char *sub_236890ADC()
{
  return "Upsample";
}

uint64_t sub_236890AE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result = operator new();
  v9 = 0;
  *(int64x2_t *)(result + 8) = vdupq_n_s64(2uLL);
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)result = &off_2507FFFC8;
  *(_QWORD *)(result + 40) = a3;
  v10 = a2 + 100;
  v11 = a2 + 160;
  if (a4 != 2)
    v11 = a2 + 380;
  if (a4 != 1)
    v10 = v11;
  v12 = 5 * (1 << (a4 - 1));
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 5 * (1 << (a4 - 1));
  v14 = result + 48;
  do
  {
    v15 = 0;
    v16 = v14 + 80 * (v9 / 5);
    do
    {
      if (v15 >= v9)
        v17 = v9;
      else
        v17 = v15;
      if (v9 <= v15)
        v18 = v15;
      else
        v18 = v9;
      *(_DWORD *)(v16 + 300 * (v15 / 5)) = *(_DWORD *)(v10 + 4 * (v18 + v17 * v12 - (v17 + (((v17 - 1) * v17) >> 1))));
      ++v15;
      v16 += 20;
    }
    while (v13 != v15);
    ++v9;
    v14 += 4;
  }
  while (v9 != v13);
  *a1 = result;
  return result;
}

void sub_236890C0C(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2367C2F38(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236890C80(uint64_t a1)
{
  sub_236891F04(a1);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_236890CA4(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, size_t a8)
{
  unint64_t v8;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  unint64_t v44;
  _OWORD __dst[2];
  _OWORD __src[2];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 > a7)
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = v10 > a6;
    v12 = v10 - a6;
    if (v11)
    {
      v13 = v8 + ~a7;
      if (*(_BYTE *)(a1 + 177))
        v14 = v13;
      else
        v14 = a7;
      if (v12 >= a5)
        v12 = a5;
      if (v12)
      {
        v16 = 0;
        v43 = a1 + 56;
        v44 = v12;
        __asm { FMOV            V0.4S, #1.0 }
        v41 = _Q0;
        v42 = (float32x4_t)vdupq_n_s32(0x32800000u);
        do
        {
          if (v12 - v16 >= 0x400)
            v22 = 1024;
          else
            v22 = v12 - v16;
          v23.i64[0] = 0;
          memset(__dst, 0, sizeof(__dst));
          v24 = *(_QWORD *)(a1 + 152);
          if (v24)
          {
            v25 = *a2;
            v26 = *(_QWORD *)(a1 + 16);
            v27 = __dst;
            v28 = *(_QWORD *)(a1 + 152);
            do
            {
              v29 = *v25;
              v25 += 3;
              *v27++ = *(_QWORD *)(v29 + 8 * v26) + 4 * v16 + 64;
              --v28;
            }
            while (v28);
          }
          if (*(_BYTE *)(a1 + 161))
          {
            *((_QWORD *)__dst + v24) = *(_QWORD *)((*a2)[3 * *(_QWORD *)(a1 + 168)] + 8 * *(_QWORD *)(a1 + 16))
                                     + 4 * v16
                                     + 64;
            if (*(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 162))
            {
              v23.i64[0] = 0;
              memset(__src, 0, sizeof(__src));
              v30 = *(_QWORD *)(a1 + 120);
              if (v30)
              {
                v31 = 0;
                v32 = v22;
                do
                {
                  v33 = *(void **)(*(_QWORD *)(a1 + 232) + 8 * (v31 + v30 * a8));
                  *((_QWORD *)__src + v31) = v33;
                  memcpy(v33, *((const void **)__dst + v31++), 4 * v22);
                  v30 = *(_QWORD *)(a1 + 120);
                }
                while (v31 < v30);
              }
              else
              {
                v32 = v22;
              }
              v22 = v32;
              if (v32)
              {
                v34 = 0;
                v35 = *(_QWORD *)(a1 + 152);
                do
                {
                  if (v35)
                  {
                    v36 = 0;
                    v23 = vdivq_f32(v41, vmaxnmq_f32(*(float32x4_t *)(*((_QWORD *)__src + v35) + 4 * v34), v42));
                    do
                    {
                      *(float32x4_t *)(*((_QWORD *)__src + v36) + 4 * v34) = vmulq_f32(v23, *(float32x4_t *)(*((_QWORD *)__src + v36)+ 4 * v34));
                      ++v36;
                      v35 = *(_QWORD *)(a1 + 152);
                    }
                    while (v36 < v35);
                  }
                  v34 += 4;
                }
                while (v34 < v32);
                v30 = *(_QWORD *)(a1 + 120);
              }
              if (v30)
                memcpy(__dst, __src, 8 * v30);
            }
          }
          else
          {
            *((_QWORD *)__dst + v24) = *(_QWORD *)(a1 + 208);
          }
          sub_2368912FC((_BYTE *)a1, v43, a8, v14, v16 + a6, v22, (const void **)__dst, *(double *)v23.i64);
          v38 = *(_QWORD *)(a1 + 184);
          v39 = *(_QWORD *)(a1 + 192);
          while (v38 != v39)
          {
            *(_QWORD *)&__dst[0] = *(_QWORD *)((*a2)[3 * *(_QWORD *)(v38 + 88)] + 8 * *(_QWORD *)(a1 + 16))
                                 + 4 * v16
                                 + 64;
            sub_2368912FC((_BYTE *)a1, v38, a8, v14, v16 + a6, v22, (const void **)__dst, v37);
            v38 += 96;
          }
          v16 += 1024;
          v12 = v44;
        }
        while (v16 < v44);
      }
    }
  }
  return 0;
}

uint64_t sub_236890F80(uint64_t a1, unint64_t a2)
{
  uint64_t i;

  if (*(_QWORD *)(a1 + 152) > a2 || *(_BYTE *)(a1 + 161) && *(_QWORD *)(a1 + 168) == a2)
    return 3;
  for (i = *(_QWORD *)(a1 + 184); i != *(_QWORD *)(a1 + 192); i += 96)
  {
    if (*(_QWORD *)(i + 88) == a2)
      return 3;
  }
  return 0;
}

uint64_t sub_236890FD0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  unint64_t *i;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *j;
  unint64_t *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (*(_QWORD *)(a1 + 64))
  {
    v4 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(a1 + 56))(*(_QWORD *)(a1 + 80), a2, 1024);
    *(_QWORD *)(a1 + 88) = v4;
    if (!v4)
      return 1;
  }
  else if (!*(_QWORD *)(a1 + 96))
  {
    return 1;
  }
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 192);
  while (v5 != v6)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      v7 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))v5)(*(_QWORD *)(v5 + 24), a2, 1024);
      *(_QWORD *)(v5 + 32) = v7;
      if (!v7)
        return 1;
    }
    else if (!*(_QWORD *)(v5 + 40))
    {
      return 1;
    }
    v5 += 96;
  }
  sub_2368911AC((__int128 *)(a1 + 256), a2);
  v9 = *(unint64_t **)(a1 + 256);
  for (i = *(unint64_t **)(a1 + 264); v9 != i; ++v9)
  {
    v11 = *(_QWORD *)(a1 + 120) << 12;
    do
      v12 = __ldxr((unsigned int *)&unk_2564313C0);
    while (__stxr(v12 + 1, (unsigned int *)&unk_2564313C0));
    v13 = sub_2368AAD08(v11, (v12 & 0xF) << 7);
    v14 = *v9;
    *v9 = v13;
    if (v14)
    {
      v15 = -*(_QWORD *)(v14 - 24);
      do
        v16 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v16 + v15, &qword_2564313D8));
      free(*(void **)(v14 - 32));
    }
  }
  if (*(_BYTE *)(a1 + 161) && *(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 162) || *(_BYTE *)(a1 + 176))
  {
    sub_2368911AC((__int128 *)(a1 + 232), *(_QWORD *)(a1 + 120) * a2);
    v18 = *(unint64_t **)(a1 + 232);
    for (j = *(unint64_t **)(a1 + 240); v18 != j; ++v18)
    {
      do
        v19 = __ldxr((unsigned int *)&unk_2564313C0);
      while (__stxr(v19 + 1, (unsigned int *)&unk_2564313C0));
      v20 = sub_2368AAD08(4096, (v19 & 0xF) << 7);
      v21 = *v18;
      *v18 = v20;
      if (v21)
      {
        v22 = -*(_QWORD *)(v21 - 24);
        do
          v23 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v23 + v22, &qword_2564313D8));
        free(*(void **)(v21 - 32));
      }
    }
  }
  return 0;
}

const char *sub_2368911A0()
{
  return "WritePixelCB";
}

void sub_2368911AC(__int128 *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;

  v4 = *(uint64_t **)a1;
  v3 = (uint64_t *)*((_QWORD *)a1 + 1);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v16 = &v4[a2];
      while (v3 != v16)
        sub_2367C2F38(--v3);
      *((_QWORD *)a1 + 1) = v16;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = *((_QWORD *)a1 + 2);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*((void **)a1 + 1), 8 * v6);
      *((_QWORD *)a1 + 1) = &v3[v6];
    }
    else
    {
      if (a2 >> 61)
        sub_2367C3440();
      v8 = v7 - (_QWORD)v4;
      v9 = v8 >> 2;
      if (v8 >> 2 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10 >> 61)
        sub_2367C3488();
      v11 = (char *)operator new(8 * v10);
      v12 = &v11[8 * v5];
      v13 = &v11[8 * v10];
      bzero(v12, 8 * v6);
      v14 = &v12[8 * v6];
      while (v3 != v4)
      {
        v15 = *--v3;
        *v3 = 0;
        *((_QWORD *)v12 - 1) = v15;
        v12 -= 8;
      }
      v17 = *a1;
      *(_QWORD *)a1 = v12;
      *((_QWORD *)a1 + 1) = v14;
      *((_QWORD *)a1 + 2) = v13;
      v18 = (uint64_t *)*((_QWORD *)&v17 + 1);
      v19 = (uint64_t *)v17;
      while (v18 != v19)
        sub_2367C2F38(--v18);
      if (v19)
        operator delete(v19);
    }
  }
}

_BYTE *sub_2368912FC(_BYTE *result, uint64_t a2, size_t __n, uint64_t a4, unint64_t a5, unint64_t a6, const void **__dst, double a8)
{
  _BYTE *v14;
  unint64_t v15;
  unint64_t i;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int16x8_t *v25;
  float32x4_t v26;
  uint64_t v27;
  unint64_t v28;
  int16x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float *v33;
  float32x4_t v34;
  uint64_t v35;
  unint64_t v36;
  int32x4_t v37;
  uint64_t v38;
  unint64_t v39;
  float16x4_t *v40;
  uint64_t v41;
  unint64_t v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  float *v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  size_t v56;
  uint64_t v57;
  unint64_t v58;
  __int16 *i16;
  uint64_t v60;
  unint64_t v61;
  __int16 *v62;
  uint64_t v63;
  unint64_t v64;
  __int16 *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  float32x4_t v69;
  int32x4_t v70;
  uint16x8_t v71;
  float32x4_t v72;
  int32x4_t v73;
  uint8x8_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  int32x4_t v79;
  uint16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  unint64_t v83;
  unint64_t v84;
  float32x4_t v85;
  int32x4_t v86;
  uint16x8_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  size_t v98;
  uint64_t v99;
  unint64_t v100;
  __int16 *v101;
  uint64_t v102;
  unint64_t v103;
  __int16 *v104;
  uint64_t v105;
  unint64_t v106;
  __int16 *v107;
  unint64_t v108;
  unint64_t v109;
  uint16x8_t v110;
  int16x8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  size_t v116;
  int16x8_t v117;
  uint64_t v118;
  int16x4x2_t v119;
  int16x4x2_t v120;
  float32x4x2_t v121;
  int16x4x3_t v122;
  int16x4x3_t v123;
  int8x8x3_t v124;
  float32x4x3_t v125;
  int16x4x4_t v126;
  int16x4x4_t v127;
  int8x8x4_t v128;
  float32x4x4_t v129;

  v14 = result;
  v118 = *MEMORY[0x24BDAC8D0];
  if (result[176])
  {
    BYTE4(a8) = 0;
    BYTE5(a8) = 0;
    BYTE6(a8) = 0;
    HIBYTE(a8) = 0;
    memset(&v117, 0, 32);
    v15 = *(_QWORD *)(a2 + 64);
    if (v15)
    {
      for (i = 0; i < v15; ++i)
      {
        result = *(_BYTE **)(*((_QWORD *)v14 + 29) + 8 * (i + *((_QWORD *)v14 + 15) * __n));
        v117.i64[i] = (uint64_t)result;
        v17 = __dst[i];
        if (result != v17)
        {
          result = memcpy(result, v17, 4 * a6);
          v15 = *(_QWORD *)(a2 + 64);
        }
      }
    }
    if (a6 >= 2)
    {
      v18 = 0;
      do
      {
        if (v15)
        {
          v19 = ~v18 + a6;
          v20 = (uint64_t *)&v117;
          v21 = v15;
          do
          {
            v22 = *v20++;
            v23 = *(_DWORD *)(v22 + 4 * v18);
            *(_DWORD *)(v22 + 4 * v18) = *(_DWORD *)(v22 + 4 * v19);
            *(_DWORD *)(v22 + 4 * v19) = v23;
            --v21;
          }
          while (v21);
        }
        ++v18;
      }
      while (v18 != a6 >> 1);
    }
    if (v15)
      result = memcpy(__dst, &v117, 8 * v15);
    a5 = *((_QWORD *)v14 + 5) - (a5 + a6);
  }
  v24 = *(_DWORD *)(a2 + 76);
  switch(v24)
  {
    case 0:
      v25 = *(int16x8_t **)(*((_QWORD *)v14 + 32) + 8 * __n);
      v30 = *(_QWORD *)(a2 + 64);
      switch(v30)
      {
        case 1:
          memcpy(*(void **)(*((_QWORD *)v14 + 32) + 8 * __n), *__dst, 4 * a6);
          break;
        case 2:
          if (a6)
          {
            v41 = 0;
            v42 = 0;
            v43 = *(float **)(*((_QWORD *)v14 + 32) + 8 * __n);
            do
            {
              v121.val[0] = *(float32x4_t *)((char *)*__dst + v41);
              v121.val[1] = *(float32x4_t *)((char *)__dst[1] + v41);
              vst2q_f32(v43, v121);
              v43 += 8;
              v42 += 4;
              v41 += 16;
            }
            while (v42 < a6);
          }
          break;
        case 3:
          if (a6)
          {
            v31 = 0;
            v32 = 0;
            v33 = *(float **)(*((_QWORD *)v14 + 32) + 8 * __n);
            do
            {
              v125.val[0] = *(float32x4_t *)((char *)*__dst + v31);
              v125.val[1] = *(float32x4_t *)((char *)__dst[1] + v31);
              v125.val[2] = *(float32x4_t *)((char *)__dst[2] + v31);
              vst3q_f32(v33, v125);
              v33 += 12;
              v32 += 4;
              v31 += 16;
            }
            while (v32 < a6);
          }
          break;
        default:
          if (a6)
          {
            v44 = 0;
            v45 = 0;
            v46 = *(float **)(*((_QWORD *)v14 + 32) + 8 * __n);
            do
            {
              v129.val[0] = *(float32x4_t *)((char *)*__dst + v44);
              v129.val[1] = *(float32x4_t *)((char *)__dst[1] + v44);
              v129.val[2] = *(float32x4_t *)((char *)__dst[2] + v44);
              v129.val[3] = *(float32x4_t *)((char *)__dst[3] + v44);
              vst4q_f32(v46, v129);
              v46 += 16;
              v45 += 4;
              v44 += 16;
            }
            while (v45 < a6);
          }
          break;
      }
      if (*(_BYTE *)(a2 + 72))
      {
        v47 = *(_QWORD *)(a2 + 64) * a6;
        if (v47)
        {
          v48 = (unsigned int *)v25;
          do
          {
            *v48 = bswap32(*v48);
            ++v48;
            --v47;
          }
          while (v47);
        }
      }
      result = *(_BYTE **)(a2 + 32);
      if (!v14[178])
      {
        if (result)
          goto LABEL_121;
        v50 = *(_QWORD *)(a2 + 56);
        v51 = *(_QWORD *)(a2 + 40);
        v52 = 4 * *(_QWORD *)(a2 + 64);
        goto LABEL_127;
      }
      if (result)
      {
        if (a6)
        {
          v49 = 0;
          do
          {
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, size_t, uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 8))(*(_QWORD *)(a2 + 32), __n, a4, a5, 1, (uint64_t)v25->i64 + 4 * v49);
            v49 += *(_QWORD *)(a2 + 64);
            ++a5;
            --a6;
          }
          while (a6);
        }
      }
      else if (a6)
      {
        v53 = 0;
        v54 = 0;
        v55 = 4 * *(_QWORD *)(a2 + 64);
        v56 = v55 * a4 + *(_QWORD *)(a2 + 56) * a5;
        do
        {
          result = memcpy((void *)(*(_QWORD *)(a2 + 40) + v56 + *(_QWORD *)(a2 + 56) * v54++), (char *)v25 + 4 * v53, v55);
          v53 += *(_QWORD *)(a2 + 64);
        }
        while (a6 != v54);
      }
      break;
    case 2:
      v25 = *(int16x8_t **)(*((_QWORD *)v14 + 32) + 8 * __n);
      *(float *)&a8 = (float)~(-1 << *(_DWORD *)(a2 + 80));
      v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
      switch(*(_QWORD *)(a2 + 64))
      {
        case 1:
          if (a6)
          {
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v35), *(float *)&a8), *(float32x4_t *)((char *)&unk_2369245E0+ 4 * (((_BYTE)a5 + (_BYTE)v36) & 7 | (16 * (a4 & 7))))), (float32x4_t)0), v34));
              *(int16x4_t *)v37.i8 = vqmovun_s32(v37);
              v25->i32[v36 / 4] = vqmovn_u16((uint16x8_t)v37).u32[0];
              v36 += 4;
              v35 += 16;
            }
            while (v36 < a6);
          }
          break;
        case 2:
          if (a6)
          {
            v66 = 0;
            v67 = 0;
            v68 = *(_QWORD **)(*((_QWORD *)v14 + 32) + 8 * __n);
            do
            {
              v69 = *(float32x4_t *)((char *)&unk_2369245E0 + 4 * (((_BYTE)a5 + (_BYTE)v67) & 7 | (16 * (a4 & 7))));
              v70 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v66), *(float *)&a8), v69), (float32x4_t)0), v34));
              v71 = (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v70), v70);
              v72 = vminnmq_f32(vmaxnmq_f32(vaddq_f32(v69, vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v66), *(float *)&a8)), (float32x4_t)0), v34);
              *(uint8x8_t *)v69.f32 = vqmovn_u16(v71);
              v73 = vcvtnq_s32_f32(v72);
              v74 = vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v73), v73));
              vst2_s8(v117.i8, (int8x8x2_t)v69);
              *v68++ = v117.i64[0];
              v67 += 4;
              v66 += 16;
            }
            while (v67 < a6);
          }
          break;
        case 3:
          if (a6)
          {
            v75 = 0;
            v76 = 0;
            v77 = *(_QWORD *)(*((_QWORD *)v14 + 32) + 8 * __n);
            do
            {
              v78 = *(float32x4_t *)((char *)&unk_2369245E0 + 4 * (((_BYTE)a5 + (_BYTE)v76) & 7 | (16 * (a4 & 7))));
              v79 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v75), *(float *)&a8), v78), (float32x4_t)0), v34));
              v80 = (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v79), v79);
              v81 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v78, vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v75), *(float *)&a8)), (float32x4_t)0), v34));
              v124.val[0] = (int8x8_t)vqmovn_u16(v80);
              v124.val[1] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v81), v81));
              v82 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v78, vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v75), *(float *)&a8)), (float32x4_t)0), v34));
              v124.val[2] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v82), v82));
              vst3_s8(v117.i8, v124);
              *(_QWORD *)v77 = v117.i64[0];
              *(_DWORD *)(v77 + 8) = v117.i32[2];
              v76 += 4;
              v77 += 12;
              v75 += 16;
            }
            while (v76 < a6);
          }
          break;
        case 4:
          if (a6)
          {
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = *(float32x4_t *)((char *)&unk_2369245E0 + 4 * (((_BYTE)a5 + (_BYTE)v84) & 7 | (16 * (a4 & 7))));
              v86 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v83), *(float *)&a8), v85), (float32x4_t)0), v34));
              v87 = (uint16x8_t)vqmovun_high_s32(vqmovun_s32(v86), v86);
              v88 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v83), *(float *)&a8)), (float32x4_t)0), v34));
              v128.val[0] = (int8x8_t)vqmovn_u16(v87);
              v128.val[1] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v88), v88));
              v89 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v83), *(float *)&a8)), (float32x4_t)0), v34));
              v128.val[2] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v89), v89));
              v90 = vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)((char *)__dst[3] + v83), *(float *)&a8)), (float32x4_t)0), v34));
              v128.val[3] = (int8x8_t)vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(v90), v90));
              vst4_s8(v117.i8, v128);
              v25[v83 / 0x10] = v117;
              v84 += 4;
              v83 += 16;
            }
            while (v84 < a6);
          }
          break;
        default:
          break;
      }
      result = *(_BYTE **)(a2 + 32);
      if (!v14[178])
      {
        if (result)
          goto LABEL_121;
        v92 = *(_QWORD *)(a2 + 64);
        v93 = (void *)(*(_QWORD *)(a2 + 40) + v92 * a5 + *(_QWORD *)(a2 + 56) * a4);
        v94 = v92 * a6;
        goto LABEL_128;
      }
      if (result)
      {
        if (a6)
        {
          v91 = 0;
          do
          {
            result = (_BYTE *)(*(uint64_t (**)(_QWORD, size_t, uint64_t, unint64_t, uint64_t, __int8 *))(a2 + 8))(*(_QWORD *)(a2 + 32), __n, a4, a5, 1, &v25->i8[v91]);
            v91 += *(_QWORD *)(a2 + 64);
            ++a5;
            --a6;
          }
          while (a6);
        }
      }
      else if (a6)
      {
        v95 = 0;
        v96 = 0;
        v97 = *(_QWORD *)(a2 + 64);
        v98 = v97 * a4 + *(_QWORD *)(a2 + 56) * a5;
        do
        {
          result = memcpy((void *)(*(_QWORD *)(a2 + 40) + v98 + *(_QWORD *)(a2 + 56) * v96++), &v25->i8[v95], v97);
          v95 += *(_QWORD *)(a2 + 64);
        }
        while (a6 != v96);
      }
      break;
    case 3:
    case 5:
      v25 = *(int16x8_t **)(*((_QWORD *)v14 + 32) + 8 * __n);
      if (v24 == 3)
      {
        *(float *)&a8 = (float)~(-1 << *(_DWORD *)(a2 + 80));
        v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
        switch(*(_QWORD *)(a2 + 64))
        {
          case 1:
            if (a6)
            {
              v27 = 0;
              v28 = 0;
              v29 = *(int16x4_t **)(*((_QWORD *)v14 + 32) + 8 * __n);
              do
              {
                *v29++ = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v27), *(float *)&a8), (float32x4_t)0), v26)));
                v28 += 4;
                v27 += 16;
              }
              while (v28 < a6);
            }
            break;
          case 2:
            if (a6)
            {
              v57 = 0;
              v58 = 0;
              do
              {
                v120.val[0] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v57 * 16), *(float *)&a8), (float32x4_t)0), v26)));
                v120.val[1] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v57 * 16), *(float *)&a8), (float32x4_t)0), v26)));
                i16 = v25[v57].i16;
                vst2_s16(i16, v120);
                v58 += 4;
                ++v57;
              }
              while (v58 < a6);
            }
            break;
          case 3:
            if (a6)
            {
              v60 = 0;
              v61 = 0;
              v62 = *(__int16 **)(*((_QWORD *)v14 + 32) + 8 * __n);
              do
              {
                v122.val[0] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v60), *(float *)&a8), (float32x4_t)0), v26)));
                v122.val[1] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v60), *(float *)&a8), (float32x4_t)0), v26)));
                v122.val[2] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v60), *(float *)&a8), (float32x4_t)0), v26)));
                vst3_s16(v62, v122);
                v62 += 12;
                v61 += 4;
                v60 += 16;
              }
              while (v61 < a6);
            }
            break;
          case 4:
            if (a6)
            {
              v63 = 0;
              v64 = 0;
              v65 = *(__int16 **)(*((_QWORD *)v14 + 32) + 8 * __n);
              do
              {
                v126.val[0] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)*__dst + v63), *(float *)&a8), (float32x4_t)0), v26)));
                v126.val[1] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[1] + v63), *(float *)&a8), (float32x4_t)0), v26)));
                v126.val[2] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[2] + v63), *(float *)&a8), (float32x4_t)0), v26)));
                v126.val[3] = vqmovun_s32(vcvtnq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(*(float32x4_t *)((char *)__dst[3] + v63), *(float *)&a8), (float32x4_t)0), v26)));
                vst4_s16(v65, v126);
                v65 += 16;
                v64 += 4;
                v63 += 16;
              }
              while (v64 < a6);
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(_QWORD *)(a2 + 64))
        {
          case 1:
            if (a6)
            {
              v38 = 0;
              v39 = 0;
              v40 = *(float16x4_t **)(*((_QWORD *)v14 + 32) + 8 * __n);
              do
              {
                *v40++ = vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v38));
                v39 += 4;
                v38 += 16;
              }
              while (v39 < a6);
            }
            break;
          case 2:
            if (a6)
            {
              v99 = 0;
              v100 = 0;
              do
              {
                v119.val[0] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v99 * 16));
                v119.val[1] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[1] + v99 * 16));
                v101 = v25[v99].i16;
                vst2_s16(v101, v119);
                v100 += 4;
                ++v99;
              }
              while (v100 < a6);
            }
            break;
          case 3:
            if (a6)
            {
              v102 = 0;
              v103 = 0;
              v104 = *(__int16 **)(*((_QWORD *)v14 + 32) + 8 * __n);
              do
              {
                v123.val[0] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v102));
                v123.val[1] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[1] + v102));
                v123.val[2] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[2] + v102));
                vst3_s16(v104, v123);
                v104 += 12;
                v103 += 4;
                v102 += 16;
              }
              while (v103 < a6);
            }
            break;
          case 4:
            if (a6)
            {
              v105 = 0;
              v106 = 0;
              v107 = *(__int16 **)(*((_QWORD *)v14 + 32) + 8 * __n);
              do
              {
                v127.val[0] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)*__dst + v105));
                v127.val[1] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[1] + v105));
                v127.val[2] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[2] + v105));
                v127.val[3] = (int16x4_t)vcvt_f16_f32(*(float32x4_t *)((char *)__dst[3] + v105));
                vst4_s16(v107, v127);
                v107 += 16;
                v106 += 4;
                v105 += 16;
              }
              while (v106 < a6);
            }
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(a2 + 72))
      {
        v108 = *(_QWORD *)(a2 + 64) * a6;
        if (v108)
        {
          v109 = 0;
          v110.i64[0] = 0x7000700070007;
          v110.i64[1] = 0x7000700070007;
          v111 = v25;
          do
          {
            *(int8x16_t *)v111 = vorrq_s8((int8x16_t)vshlq_n_s16(*v111, 8uLL), (int8x16_t)vshlq_u16(*(uint16x8_t *)v111, v110));
            ++v111;
            v109 += 8;
          }
          while (v109 < v108);
        }
      }
      result = *(_BYTE **)(a2 + 32);
      if (v14[178])
      {
        if (result)
        {
          if (a6)
          {
            v112 = 0;
            do
            {
              result = (_BYTE *)(*(uint64_t (**)(_QWORD, size_t, uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 8))(*(_QWORD *)(a2 + 32), __n, a4, a5, 1, (uint64_t)v25->i64 + 2 * v112);
              v112 += *(_QWORD *)(a2 + 64);
              ++a5;
              --a6;
            }
            while (a6);
          }
        }
        else if (a6)
        {
          v113 = 0;
          v114 = 0;
          v115 = 2 * *(_QWORD *)(a2 + 64);
          v116 = v115 * a4 + *(_QWORD *)(a2 + 56) * a5;
          do
          {
            result = memcpy((void *)(*(_QWORD *)(a2 + 40) + v116 + *(_QWORD *)(a2 + 56) * v114++), (char *)v25 + 2 * v113, v115);
            v113 += *(_QWORD *)(a2 + 64);
          }
          while (a6 != v114);
        }
      }
      else if (result)
      {
LABEL_121:
        result = (_BYTE *)(*(uint64_t (**)(void))(a2 + 8))();
      }
      else
      {
        v50 = *(_QWORD *)(a2 + 56);
        v51 = *(_QWORD *)(a2 + 40);
        v52 = 2 * *(_QWORD *)(a2 + 64);
LABEL_127:
        v93 = (void *)(v51 + v52 * a5 + v50 * a4);
        v94 = v52 * a6;
LABEL_128:
        result = memcpy(v93, v25, v94);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_236891F04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &off_2507FDED0;
  if (*(_QWORD *)(a1 + 88))
    (*(void (**)(void))(a1 + 72))();
  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 192);
  while (v2 != v3)
  {
    if (*(_QWORD *)(v2 + 32))
      (*(void (**)(void))(v2 + 16))();
    v2 += 96;
  }
  v7 = (void **)(a1 + 256);
  sub_236890C0C(&v7);
  v7 = (void **)(a1 + 232);
  sub_236890C0C(&v7);
  v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(_QWORD *)(a1 + 216) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(_QWORD *)(a1 + 192) = v5;
    operator delete(v5);
  }
  return a1;
}

__n128 sub_236891FBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = operator new();
  v7 = *(_WORD *)(a3 + 8);
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v6 + 69) = *(_QWORD *)(a3 + 21);
  v8 = *(_QWORD *)(a3 + 48);
  result = *(__n128 *)(a3 + 32);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)(v6 + 104) = *(_OWORD *)(a3 + 56);
  *(_DWORD *)(v6 + 152) = *(_DWORD *)(a3 + 104);
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a3 + 72);
  v10 = *(_QWORD *)(a3 + 120);
  *(_OWORD *)(v6 + 184) = *(_OWORD *)(a3 + 136);
  v11 = *(_QWORD *)(a3 + 160);
  v12 = *(_QWORD *)(a3 + 176);
  v13 = *(_QWORD *)(a3 + 192);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)v6 = &off_2507FF9B0;
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 48) = &off_2507FFA18;
  *(_WORD *)(v6 + 56) = v7;
  *(__n128 *)(v6 + 80) = result;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 160) = &off_250800470;
  *(_QWORD *)(v6 + 168) = v10;
  *(_QWORD *)(v6 + 176) = &off_2507FFCC0;
  *(_QWORD *)(v6 + 200) = &off_250800470;
  *(_QWORD *)(v6 + 208) = v11;
  *(_QWORD *)(v6 + 216) = &off_250800470;
  *(_QWORD *)(v6 + 224) = v12;
  *(_QWORD *)(v6 + 232) = &off_250800470;
  *(_QWORD *)(v6 + 240) = v13;
  *a1 = v6;
  return result;
}

_QWORD *sub_2368920B4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_2507FF9B0;
  a1[6] = &off_2507FFA18;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2368920FC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_2507FF9B0;
  a1[6] = &off_2507FFA18;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_236892154(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v11 = 0;
  v12 = -a4;
  v13 = 4 * a5 + 8 * a4;
  for (i = 120; i != 240; i += 40)
  {
    memcpy((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + i) + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) * a7 + 4 * a6 + 4 * v12), (const void *)(*(_QWORD *)(*(_QWORD *)(*a2 + v11) + 8 * *(_QWORD *)(a1 + 16)) + 4 * v12 + 64), v13);
    v11 += 24;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 416);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 424) != v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 72;
    do
    {
      memcpy((void *)(*(_QWORD *)(v15 + v16 + 24) + *(_QWORD *)(v15 + v16 + 16) * a7 + 4 * a6 + 4 * v12), (const void *)(*(_QWORD *)(*(_QWORD *)(*a2 + v18) + 8 * *(_QWORD *)(a1 + 16)) + 4 * v12 + 64), v13);
      ++v17;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 416);
      v18 += 24;
      v16 += 40;
    }
    while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 424) - v15) >> 3));
  }
  return 0;
}

uint64_t sub_23689227C()
{
  return 3;
}

uint64_t sub_236892284(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t i;
  uint64_t j;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE v33[120];
  _BYTE v34[120];
  unsigned int v35;
  _QWORD v36[6];

  sub_2367CA770((uint64_t)v34, *(_QWORD *)*a2, *(_QWORD *)(*a2 + 8));
  v4 = v35;
  if (!v35)
  {
    sub_2367CA9E4((uint64_t)v33, (uint64_t)v34);
    sub_2367F67A4(*(_QWORD *)(a1 + 40), (uint64_t)v33, a1 + 48);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(v5 + 416);
    v6 = *(_QWORD *)(v5 + 424);
    if (v6 != v7)
    {
      do
      {
        v8 = v6 - 40;
        sub_2367C2F38((uint64_t *)(v6 - 16));
        v6 = v8;
      }
      while (v8 != v7);
    }
    *(_QWORD *)(v5 + 424) = v7;
    v9 = *a2;
    if (a2[1] - *a2 < 0x31uLL)
    {
LABEL_20:
      v4 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 3;
      while (1)
      {
        sub_2367C431C((uint64_t)&v28, *(_QWORD *)(v9 + v10 + 48), *(_QWORD *)(v9 + v10 + 56));
        v4 = v32;
        if (v32)
          break;
        v13 = v30;
        v12 = v31;
        v30 = 0;
        v14 = *(uint64_t **)(a1 + 40);
        v16 = v14[53];
        v15 = v14[54];
        if (v16 >= v15)
        {
          v18 = v14[52];
          v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v18) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0x666666666666666)
            sub_2367C3440();
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v18) >> 3);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0x333333333333333)
            v22 = 0x666666666666666;
          else
            v22 = v20;
          v36[4] = v14 + 54;
          if (v22)
            v22 = (unint64_t)sub_2367DC0A4(v22);
          else
            v23 = 0;
          v24 = v22 + 40 * v19;
          v36[0] = v22;
          v36[1] = v24;
          v36[3] = v22 + 40 * v23;
          *(_OWORD *)v24 = v28;
          *(_QWORD *)(v24 + 16) = v29;
          *(_QWORD *)(v24 + 24) = v13;
          *(_QWORD *)(v24 + 32) = v12;
          v36[2] = v24 + 40;
          sub_236815500(v14 + 52, v36);
          v17 = v14[53];
          sub_2367F6844((uint64_t)v36);
        }
        else
        {
          *(_OWORD *)v16 = v28;
          *(_QWORD *)(v16 + 16) = v29;
          *(_QWORD *)(v16 + 24) = v13;
          *(_QWORD *)(v16 + 32) = v12;
          v17 = v16 + 40;
          v14[53] = v16 + 40;
        }
        v14[53] = v17;
        ++v11;
        v9 = *a2;
        v10 += 16;
        if (v11 >= (uint64_t)(a2[1] - *a2) >> 4)
          goto LABEL_20;
      }
    }
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)&v33[i]);
    if (!v35)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v34[j]);
    }
  }
  return v4;
}

void sub_2368924B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a16 + i));
  if (!a46)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a31 + j));
  }
  _Unwind_Resume(a1);
}

const char *sub_23689257C()
{
  return "WriteIB";
}

void sub_23689258C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2368925A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t i;

  v11 = 0;
  v12 = -a4;
  v13 = 4 * a5 + 8 * a4;
  for (i = 24; i != 144; i += 40)
  {
    memcpy((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + i) + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) * a7 + 4 * a6 + 4 * v12), (const void *)(*(_QWORD *)(*(_QWORD *)(*a2 + v11) + 8 * *(_QWORD *)(a1 + 16)) + 4 * v12 + 64), v13);
    v11 += 24;
  }
  return 0;
}

uint64_t sub_236892640(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
    return 0;
  else
    return 3;
}

uint64_t sub_236892650(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t j;
  _BYTE v6[120];
  _BYTE v7[120];
  unsigned int v8;

  sub_2367CA770((uint64_t)v7, **(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)a2 + 8));
  result = v8;
  if (!v8)
  {
    sub_2367CA9E4((uint64_t)v6, (uint64_t)v7);
    sub_2367D086C(*(_QWORD *)(a1 + 40), (uint64_t)v6);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)&v6[i]);
    if (!v8)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v7[j]);
    }
    return 0;
  }
  return result;
}

const char *sub_2368926F0()
{
  return "WriteI3F";
}

void sub_236892700()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_236892714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  int32x4_t v26;
  const float *v27;
  float32x4_t v28;
  float32x4_t v29;
  const float *v30;
  float32x4_t v31;
  float32x4_t v32;
  const float *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(**(_QWORD **)a2 + 8 * v5);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v5);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v5);
  v9 = -a4;
  v10 = a5 + a4;
  if (*(_BYTE *)(a1 + 232))
  {
    if (a5 + a4 > -a4)
    {
      v11 = 64 - 4 * a4;
      v12 = (float32x4_t *)(v8 + v11);
      v13 = (float32x4_t *)(v7 + v11);
      v14 = (float32x4_t *)(v6 + v11);
      v15 = (float32x4_t)vdupq_n_s32(0x3C7C1620u);
      v16 = (float32x4_t)vdupq_n_s32(0x41B7F760u);
      v17 = (float32x4_t)vdupq_n_s32(0x3F976C8Cu);
      v18 = (float32x4_t)vdupq_n_s32(0x3E8E2F4Cu);
      v19 = (float32x4_t)vdupq_n_s32(0x3FC0462Bu);
      do
      {
        v20 = vmulq_f32(vaddq_f32(*v13, (float32x4_t)0), v17);
        v21 = vmulq_f32(vaddq_f32(vsubq_f32(*v12, *v13), v18), v19);
        *v14 = vmulq_f32(vaddq_f32(*v14, v15), v16);
        ++v14;
        *v13++ = v20;
        *v12++ = v21;
        v9 += 4;
      }
      while (v9 < v10);
    }
  }
  else if (a5 + a4 > -a4)
  {
    v22 = 64 - 4 * a4;
    v23 = (float32x4_t *)(v8 + v22);
    v24 = (float32x4_t *)(v7 + v22);
    v25 = (float32x4_t *)(v6 + v22);
    do
    {
      v26 = *(int32x4_t *)(a1 + 184);
      v27 = (const float *)(a1 + 200);
      v28 = vld1q_dup_f32(v27);
      v29 = vsubq_f32(vaddq_f32(*v25, *v24), v28);
      v30 = (const float *)(a1 + 204);
      v31 = vld1q_dup_f32(v30);
      v32 = vsubq_f32(vsubq_f32(*v24, *v25), v31);
      v33 = (const float *)(a1 + 208);
      v34 = vld1q_dup_f32(v33);
      v35 = vsubq_f32(*v23, v34);
      v36 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0), v29, vmulq_f32(v29, v29));
      v37 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1), v32, vmulq_f32(v32, v32));
      v38 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(v26, 2), v35, vmulq_f32(v35, v35));
      v39 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a1 + 88), v36), v37, *(float32x4_t *)(a1 + 104)), v38, *(float32x4_t *)(a1 + 120));
      v40 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a1 + 136), v36), v37, *(float32x4_t *)(a1 + 152)), v38, *(float32x4_t *)(a1 + 168));
      *v25++ = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a1 + 40), v36), v37, *(float32x4_t *)(a1 + 56)), v38, *(float32x4_t *)(a1 + 72));
      *v24++ = v39;
      *v23++ = v40;
      v9 += 4;
    }
    while (v9 < v10);
  }
  return 0;
}

BOOL sub_2368928C4(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_2368928D0()
{
  return "XYB";
}

void sub_2368928E0()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2368928F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;

  if (a5)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(float32x4_t **)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v6);
    v8 = (float32x4_t)vdupq_n_s32(0x3F008081u);
    v9 = (float32x4_t)vdupq_n_s32(0x3FB374BCu);
    v10 = (float32x4_t)vdupq_n_s32(0xBEB032A1);
    v11 = (float32x4_t)vdupq_n_s32(0xBF36D1A2);
    v12 = (float32x4_t)vdupq_n_s32(0x3FE2D0E5u);
    v13 = (float32x4_t *)(*(_QWORD *)(**(_QWORD **)a2 + 8 * v6) + 64);
    v14 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v6) + 64);
    v15 = v7 + 4;
    do
    {
      v16 = vaddq_f32(*v14, v8);
      v17 = vmlaq_f32(v16, v9, *v15);
      v18 = vmlaq_f32(vmlaq_f32(v16, v10, *v13), v11, *v15);
      v19 = vmlaq_f32(v16, v12, *v13);
      *v13++ = v17;
      *v14++ = v18;
      *v15++ = v19;
      v5 += 4;
    }
    while (v5 < a5);
  }
  return 0;
}

BOOL sub_2368929AC(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

const char *sub_2368929B8()
{
  return "YCbCr";
}

uint64_t *sub_2368929C4(_QWORD *a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;

  v4 = a1 + 239;
  sub_236892FC0((uint64_t)(a1 + 239), 4 * (a1[248] - a1[247]) + 1000);
  v5 = a1[12];
  v6 = a1[239];
  v7 = a1[241];
  v8 = a1[243];
  ++a1[242];
  *(_QWORD *)(v6 + v7) = v8;
  v9 = a1[242];
  v10 = v9 & 7;
  v11 = a1[243] >> (v9 & 0xF8);
  v12 = a1[241] + (v9 >> 3);
  a1[241] = v12;
  v13 = a1[239];
  a1[243] = v11;
  a1[242] = v10 + 2;
  *(_QWORD *)(v13 + v12) = v11;
  v14 = a1[242];
  v15 = v14 & 7;
  v16 = a1[243] >> (v14 & 0xF8);
  v17 = a1[241] + (v14 >> 3);
  a1[241] = v17;
  v18 = a1[239];
  v19 = v16 | (1 << v15);
  a1[243] = v19;
  a1[242] = v15 + 1;
  *(_QWORD *)(v18 + v17) = v19;
  v20 = a1[242];
  v21 = v20 & 7;
  v22 = a1[243] >> (v20 & 0xF8);
  v23 = a1[241] + (v20 >> 3);
  a1[241] = v23;
  v24 = a1[239];
  a1[243] = v22;
  a1[242] = v21 + 2;
  *(_QWORD *)(v24 + v23) = v22;
  v25 = a1[242];
  v26 = v25 & 7;
  v27 = a1[243] >> (v25 & 0xF8);
  v28 = a1[241] + (v25 >> 3);
  a1[241] = v28;
  v29 = a1[239];
  a1[243] = v27;
  a1[242] = v26 + 1;
  *(_QWORD *)(v29 + v28) = v27;
  v30 = a1[242];
  v31 = v30 & 7;
  v32 = a1[243] >> (v30 & 0xF8);
  v33 = a1[241] + (v30 >> 3);
  a1[241] = v33;
  v34 = a1[239];
  a1[243] = v32;
  a1[242] = v31 + 2;
  *(_QWORD *)(v34 + v33) = v32;
  v35 = a1[242];
  v36 = v35 & 7;
  v37 = a1[243] >> (v35 & 0xF8);
  v38 = a1[241] + (v35 >> 3);
  a1[241] = v38;
  if (v5 == 4 || v5 == 2)
  {
    v39 = a1[239];
    a1[243] = v37;
    a1[242] = v36 + 2;
    *(_QWORD *)(v39 + v38) = v37;
    v40 = a1[242];
    v36 = v40 & 7;
    v37 = a1[243] >> (v40 & 0xF8);
    v38 = a1[241] + (v40 >> 3);
    a1[241] = v38;
  }
  v41 = a1[239];
  v42 = v37 | (1 << v36);
  a1[243] = v42;
  a1[242] = v36 + 2;
  *(_QWORD *)(v41 + v38) = v42;
  v43 = a1[242];
  v44 = v43 & 7;
  v45 = a1[243] >> (v43 & 0xF8);
  v46 = a1[241] + (v43 >> 3);
  a1[241] = v46;
  v47 = a1[239];
  a1[243] = v45;
  a1[242] = v44 + 2;
  *(_QWORD *)(v47 + v46) = v45;
  v48 = a1[242];
  v49 = v48 & 7;
  v50 = a1[243] >> (v48 & 0xF8);
  v51 = a1[241] + (v48 >> 3);
  a1[241] = v51;
  v52 = a1[239];
  a1[243] = v50;
  a1[242] = v49 + 1;
  *(_QWORD *)(v52 + v51) = v50;
  v53 = a1[242];
  v54 = v53 & 7;
  v55 = a1[243] >> (v53 & 0xF8);
  v56 = a1[241] + (v53 >> 3);
  a1[241] = v56;
  v57 = a1[239];
  a1[243] = v55;
  a1[242] = v54 + 2;
  *(_QWORD *)(v57 + v56) = v55;
  v58 = a1[242];
  v59 = v58 & 7;
  v60 = a1[243] >> (v58 & 0xF8);
  v61 = a1[241] + (v58 >> 3);
  a1[241] = v61;
  if (v5 == 4 || v5 == 2)
  {
    v62 = a1[239];
    a1[243] = v60;
    a1[242] = v59 + 2;
    *(_QWORD *)(v62 + v61) = v60;
    v63 = a1[242];
    v59 = v63 & 7;
    v60 = a1[243] >> (v63 & 0xF8);
    v61 = a1[241] + (v63 >> 3);
    a1[241] = v61;
  }
  v64 = a1[239];
  v65 = v60 | ((unint64_t)a2 << v59);
  a1[243] = v65;
  a1[242] = v59 + 1;
  *(_QWORD *)(v64 + v61) = v65;
  v66 = a1[242];
  v67 = v66 & 7;
  v68 = a1[243] >> (v66 & 0xF8);
  a1[243] = v68;
  v69 = a1[241] + (v66 >> 3);
  a1[241] = v69;
  if (!a2)
  {
    v70 = a1[239];
    a1[242] = v67 + 2;
    *(_QWORD *)(v70 + v69) = v68;
    v71 = a1[242];
    v67 = v71 & 7;
    v68 = a1[243] >> (v71 & 0xF8);
    a1[243] = v68;
    v69 = a1[241] + (v71 >> 3);
    a1[241] = v69;
  }
  v72 = a1[239];
  a1[242] = v67 + 2;
  *(_QWORD *)(v72 + v69) = v68;
  v73 = a1[242];
  v74 = v73 & 7;
  v75 = a1[243] >> (v73 & 0xF8);
  v76 = a1[241] + (v73 >> 3);
  a1[241] = v76;
  v77 = a1[239];
  a1[243] = v75;
  a1[242] = v74 + 1;
  *(_QWORD *)(v77 + v76) = v75;
  v78 = a1[242];
  v79 = v78 & 7;
  v80 = a1[243] >> (v78 & 0xF8);
  v81 = a1[241] + (v78 >> 3);
  a1[241] = v81;
  v82 = a1[239];
  a1[243] = v80;
  a1[242] = v79 + 1;
  *(_QWORD *)(v82 + v81) = v80;
  v83 = a1[242];
  v84 = v83 & 7;
  v85 = a1[243] >> (v83 & 0xF8);
  v86 = a1[241] + (v83 >> 3);
  a1[241] = v86;
  v87 = a1[239];
  a1[243] = v85;
  a1[242] = v84 + 2;
  *(_QWORD *)(v87 + v86) = v85;
  v88 = a1[242];
  v89 = v88 & 7;
  v90 = a1[243] >> (v88 & 0xF8);
  v91 = a1[241] + (v88 >> 3);
  a1[241] = v91;
  v92 = a1[239];
  a1[243] = v90;
  a1[242] = v89 + 2;
  *(_QWORD *)(v92 + v91) = v90;
  v93 = a1[242];
  v94 = v93 & 7;
  v95 = a1[243] >> (v93 & 0xF8);
  v96 = a1[241] + (v93 >> 3);
  a1[241] = v96;
  v97 = a1[239];
  a1[243] = v95;
  a1[242] = v94 + 2;
  *(_QWORD *)(v97 + v96) = v95;
  v98 = a1[242];
  v99 = v98 & 7;
  v100 = a1[243] >> (v98 & 0xF8);
  v101 = a1[241] + (v98 >> 3);
  a1[241] = v101;
  v102 = a1[239];
  a1[243] = v100;
  a1[242] = v99 + 1;
  *(_QWORD *)(v102 + v101) = v100;
  v103 = a1[242];
  a1[242] = v103 & 7;
  a1[243] >>= v103 & 0xF8;
  a1[241] += v103 >> 3;
  sub_23689300C(v4);
  v104 = a1[247];
  if (a1[248] != v104)
  {
    v105 = 0;
    do
    {
      v106 = *(_QWORD *)(v104 + 8 * v105);
      v107 = 1;
      while (v107 != 4)
      {
        v108 = qword_236924890[v107++];
        if (v108 > v106)
        {
          v109 = v107 - 2;
          goto LABEL_16;
        }
      }
      v109 = 3;
LABEL_16:
      v110 = a1[239];
      v111 = a1[241];
      v112 = a1[242];
      v113 = a1[243] | (v109 << v112);
      a1[243] = v113;
      a1[242] = v112 + 2;
      *(_QWORD *)(v110 + v111) = v113;
      v114 = a1[242];
      v115 = v114 & 7;
      v116 = a1[243] >> (v114 & 0xF8);
      v117 = a1[241] + (v114 >> 3);
      a1[241] = v117;
      v118 = (LODWORD(qword_236924870[v109]) - 2);
      v119 = v106 - qword_236924890[v109];
      v120 = a1[239];
      v121 = (v119 << v115) | v116;
      a1[243] = v121;
      a1[242] = v118 + v115;
      *(_QWORD *)(v120 + v117) = v121;
      v122 = a1[242];
      a1[242] = v122 & 7;
      a1[243] >>= v122 & 0xF8;
      a1[241] += v122 >> 3;
      ++v105;
      v104 = a1[247];
    }
    while (v105 < (a1[248] - v104) >> 3);
  }
  return sub_23689300C(v4);
}

uint64_t sub_236892FC0(uint64_t a1, unint64_t a2)
{
  void *v3;
  uint64_t result;

  v3 = malloc_type_malloc((a2 >> 3) + 64, 0x8F06D546uLL);
  result = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  if (result)
    return (*(uint64_t (**)(void))(a1 + 8))();
  return result;
}

uint64_t *sub_23689300C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = result[3];
  if (v1)
  {
    v2 = *result;
    v3 = result[2];
    v4 = result[4];
    result[3] = (8 - v1) + v1;
    *(_QWORD *)(v2 + v3) = v4;
    v6 = result[2];
    v5 = result[3];
    v7 = (unint64_t)result[4] >> (v5 & 0xF8);
    result[3] = v5 & 7;
    result[4] = v7;
    result[2] = v6 + (v5 >> 3);
  }
  return result;
}

char *sub_236893058(char *result, unint64_t a2, uint64_t a3)
{
  char *v5;
  void *v6;
  size_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  void *__dst;
  __int128 v12;
  uint64_t v13;
  int v14;

  v5 = result;
  while (a2)
  {
    sub_23685C8C8(&__dst, a3, 1uLL, a2);
    v6 = __dst;
    v8 = (char *)__dst;
    v9 = v12;
    v10 = v13;
    __dst = 0;
    *(_QWORD *)&v12 = 0;
    if (a2 >= (unint64_t)v9)
      v7 = v9;
    else
      v7 = a2;
    if (v7)
    {
      memcpy(v6, v5, v7);
      v8 += v7;
      *(_QWORD *)&v9 = v9 - v7;
      *((_QWORD *)&v9 + 1) += v7;
      v5 += v7;
      a2 -= v7;
    }
    result = (char *)sub_236831498(&v8);
    if (v14)
    {
      if (!v7)
        return result;
    }
    else
    {
      result = (char *)sub_236831498(&__dst);
      if (!v7)
        return result;
    }
  }
  return result;
}

uint64_t sub_236893124(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void **v5;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 1976);
    if (v2)
    {
      *(_QWORD *)(v1 + 1984) = v2;
      operator delete(v2);
    }
    v5 = (void **)(v1 + 1952);
    sub_2368931B8(&v5);
    v3 = *(_QWORD *)(v1 + 1912);
    *(_QWORD *)(v1 + 1912) = 0;
    if (v3)
      (*(void (**)(void))(v1 + 1920))();
    v4 = *(void **)(v1 + 1888);
    if (v4)
    {
      *(_QWORD *)(v1 + 1896) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

void sub_2368931B8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2368931F8((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_2368931F8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 160)
  {
    v5 = 0;
    v6 = i;
    do
    {
      result = *(_QWORD *)(v6 + v5 - 40);
      *(_QWORD *)(v6 + v5 - 40) = 0;
      if (result)
        result = (*(uint64_t (**)(void))(v6 + v5 - 32))();
      v5 -= 40;
    }
    while (v5 != -160);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_236893274(__int128 *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7)
{
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  int v12;
  int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int32 *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unsigned __int8 v26;
  char v27;
  int v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  int v33;
  int v34;
  __int128 v35;
  int v37;
  int v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int32 *v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  unsigned __int8 v51;
  char v52;
  int v53;
  uint64_t v54;
  unsigned __int8 v55;
  int v56;
  int v58;
  int v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int64x2_t *v87;
  uint64_t i;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int64x2_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int ***v96;
  uint64_t j;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(_QWORD);
  unsigned int ***v103;
  __int8 *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int **v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 *v125;
  char *v126;
  char v127;
  int v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  void **v144;
  uint64_t v145;
  unint64_t **v146;
  _BOOL8 v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int *v152;
  _WORD *v153;
  uint64_t v154;
  int v155;
  int v156;
  __int128 v157;
  int v159;
  int v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  __int32 *v168;
  uint64_t v169;
  int v170;
  uint64_t v172;
  unsigned __int8 v173;
  char v174;
  int v175;
  uint64_t v176;
  unsigned __int8 v177;
  int v178;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  BOOL v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v201;
  int64x2_t *v202;
  uint64_t k;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  int64x2_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int ***v211;
  uint64_t m;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)(_QWORD);
  unsigned int ***v217;
  __int8 *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int **v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unsigned __int8 *v238;
  char *v239;
  char v240;
  int v241;
  uint64_t v242;
  char v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  int v247;
  __int128 v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  void **v255;
  uint64_t v256;
  _BOOL8 v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t *v260;
  void *v261;
  unint64_t v263;
  uint64_t v264;
  int *v265;
  _WORD *v266;
  uint64_t v267;
  int v268;
  int v269;
  __int128 v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  int v274;
  int v275;
  int v276;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  int64x2_t *v285;
  uint64_t n;
  int8x16_t v287;
  uint64_t v288;
  unsigned int ***v289;
  uint64_t ii;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t (*v294)(_QWORD);
  unsigned int ***v295;
  __int8 *v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int **v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unsigned __int8 *v316;
  char *v317;
  char v318;
  int v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  unsigned int v323;
  uint64_t v324;
  int v325;
  __int128 v326;
  unint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  void **v332;
  uint64_t v333;
  _BOOL8 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  int64x2_t *v339;
  int v340;
  uint64_t jj;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  int64x2_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int ***v349;
  uint64_t kk;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t (*v354)(_QWORD);
  unsigned int ***v355;
  __int8 *v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int **v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  __int128 *v376;
  char *v377;
  char v378;
  int v379;
  uint64_t v380;
  char v381;
  unsigned int v382;
  unsigned int v383;
  uint64_t v384;
  int v385;
  __int128 v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  __int128 v390;
  unint64_t v391;
  void **v392;
  uint64_t v393;
  _BOOL8 v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  int *v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  int v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  int v414[2];
  int v415[2];
  unint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  char *v429;
  unsigned int ***v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int ***v434;
  unsigned int ***v435;
  char v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439[2];
  uint64_t v440[2];
  uint64_t v441[2];
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  uint64_t v460;
  void *__p;
  _BYTE *v462;
  int v463;
  int8x16_t v464;
  int8x16_t v465;
  char v466;
  unint64_t v467;
  uint64_t v468;
  int v469;
  _OWORD __src[28];
  unsigned int **v471[132];
  int64x2_t v472;
  uint64_t v473;
  int8x16_t v474;
  int8x16_t v475;
  char v476;
  __int128 v477;
  __int128 v478;
  char v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  uint64_t v489;
  uint64_t v490;

  v8 = a3;
  v9 = a2;
  v490 = *MEMORY[0x24BDAC8D0];
  if (a5 <= 8)
  {
    v10 = a1[1];
    v448 = *a1;
    v449 = v10;
    v450 = a1[2];
    *(_QWORD *)&v447 = a2;
    *((_QWORD *)&v447 + 1) = a5;
    *((_QWORD *)&v446 + 1) = a3;
    v438 = a4;
    HIBYTE(v444) = a6 != 0;
    sub_2367C3BE4(&v445, 0x10000uLL);
    sub_236895B3C((char **)&__p);
    *(_WORD *)__p = 0;
    v11 = *((_QWORD *)&v447 + 1) != 8 || a7 == 0;
    v12 = v11;
    BYTE14(v444) = v12;
    v13 = v12 ^ 1;
    if (v8 && (v12 & 1) == 0)
    {
      v14 = 0;
      v15 = v12;
      do
      {
        if (v8 - v14 >= 0x100)
          v16 = 256;
        else
          v16 = v8 - v14;
        if (v9 && !v15)
        {
          v17 = 0;
          do
          {
            if (v9 - v17 >= 0x100)
              v18 = 256;
            else
              v18 = v9 - v17;
            v471[0] = 0;
            v19 = ((uint64_t (*)(_QWORD, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int ***))v449)(v448, v17, v14, v18, v16, v471);
            if (v16 && !BYTE14(v444))
            {
              v20 = 1;
              do
              {
                v21 = (__int32 *)(v19 + (unint64_t)v471[0] * (v20 - 1));
                v22 = v438;
                if (v438 == 1)
                {
                  v23 = sub_236895B84(v19 + (unint64_t)v471[0] * (v20 - 1), v18, v445);
                  BYTE14(v444) = v23;
                  v22 = 1;
                }
                else
                {
                  v23 = 0;
                }
                if (v22 == 2)
                {
                  v23 = sub_236895CF0(v21, v18, v445);
                  BYTE14(v444) = v23;
                  v22 = v438;
                }
                if (v22 == 3)
                {
                  v23 = sub_236895E60(v21, v18, v445);
                  BYTE14(v444) = v23;
                  v22 = v438;
                }
                if (v22 == 4)
                {
                  v23 = sub_236895FD8((uint64_t)v21, v18, v445);
                  BYTE14(v444) = v23;
                }
                if (v20 >= v16)
                  break;
                ++v20;
              }
              while (!v23);
            }
            (*((void (**)(_QWORD, uint64_t))&v450 + 1))(v448, v19);
            v17 += 256;
            v9 = v447;
            LOBYTE(v12) = BYTE14(v444);
          }
          while (v17 < (unint64_t)v447 && BYTE14(v444) == 0);
          v8 = *((_QWORD *)&v446 + 1);
          v15 = BYTE14(v444);
        }
        v14 += 256;
        v13 = v15 == 0;
        if (v14 >= v8)
          break;
        v11 = v15 == 0;
        v15 = 0;
      }
      while (v11);
    }
    if (!v13)
    {
      v28 = 0;
      v34 = 0;
      goto LABEL_132;
    }
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v445;
    v30 = -1;
    while (1)
    {
      v31 = *(_DWORD *)(v29 + v25);
      if (v31)
      {
        *(_DWORD *)(v29 + 4 * v28) = v31;
        LOBYTE(v31) = v31 != BYTE1(v31) || v31 != BYTE2(v31);
        v27 |= v31;
        if (BYTE1(v31) < v30)
          v30 = BYTE1(v31);
        if (BYTE1(v31) > v26)
          v26 = BYTE1(v31);
        v33 = v28 + 1;
        if (v28 >= 511)
        {
          v12 = 1;
          BYTE14(v444) = 1;
          if ((v27 & 1) != 0)
            goto LABEL_134;
LABEL_401:
          v34 = 1;
          v28 = v33;
          if ((float)((float)v33 * 1.4) > (float)(v26 - v30))
          {
            BYTE14(v444) = 1;
            v12 = 1;
            goto LABEL_134;
          }
LABEL_132:
          if (!(_BYTE)v12)
          {
            v471[0] = (unsigned int **)&v438;
            v150 = 126 - 2 * __clz(v28);
            v151 = v28 ? v150 : 0;
            sub_23689611C(v445, (unsigned int *)(v445 + 4 * v28), v471, v151, 1);
            if (v28 >= 1)
            {
              v152 = (int *)v445;
              v153 = __p;
              v154 = v28;
              while (1)
              {
                v156 = *v152++;
                v155 = v156;
                if (!v156)
                  break;
                v12 = v34 + 1;
                v153[(-1640531535 * v155) >> 16] = v34++;
                if (!--v154)
                  goto LABEL_134;
              }
            }
          }
          v12 = v34;
LABEL_134:
          v72 = *((_QWORD *)&v446 + 1);
          v71 = v447;
          v73 = (unint64_t)(v447 + 255) >> 8;
          v74 = (unint64_t)(*((_QWORD *)&v446 + 1) + 255) >> 8;
          bzero(&v472, 0x260uLL);
          bzero(v471, 0x420uLL);
          v76 = v73 == 1 && v74 == 1;
          BYTE13(v444) = v76;
          v439[0] = (uint64_t)&v446 + 8;
          v439[1] = (uint64_t)&v447;
          v440[0] = (uint64_t)&v448;
          v440[1] = (uint64_t)&v472;
          v441[0] = (uint64_t)v471;
          v441[1] = (uint64_t)&v444 + 13;
          *(_QWORD *)&v442 = (char *)&v444 + 14;
          *((_QWORD *)&v442 + 1) = (char *)&v447 + 8;
          *(_QWORD *)&v443 = &v438;
          *((_QWORD *)&v443 + 1) = (char *)&v444 + 15;
          *(_QWORD *)&v444 = &__p;
          if (a7)
          {
            if (v74 * v73)
            {
              v77 = 0;
              do
              {
                v78 = *((_QWORD *)&v446 + 1) - ((v77 / v73) << 8);
                if (v78 >= 0x100)
                  v78 = 256;
                sub_236897824((uint64_t)v439, v77 % v73, v77 / v73, v78 >> 6);
                ++v77;
              }
              while (v74 * v73 != v77);
            }
          }
          else
          {
            sub_236897824((uint64_t)v439, (v73 - 1) >> 1, (v74 - 1) >> 1, 4 * v74 * v73);
          }
          v79 = (unint64_t)(v71 + 2047) >> 11;
          v80 = (unint64_t)(v72 + 2047) >> 11;
          v457 = xmmword_236924A78;
          v458 = unk_236924A88;
          v459 = xmmword_236924A98;
          v453 = xmmword_236924A38;
          v454 = unk_236924A48;
          v455 = xmmword_236924A58;
          v456 = unk_236924A68;
          v451 = xmmword_236924A18;
          v452 = unk_236924A28;
          v81 = BYTE14(v444);
          if (BYTE14(v444))
            v82 = (unint64_t)v438 > 2;
          else
            v82 = 0;
          v83 = v82 || BYTE14(v444) == 0;
          v460 = 1;
          v84 = !v83 && v12 <= 255;
          v85 = 2;
          if (!v84)
            v85 = 3;
          if ((unint64_t)(v85 + *((_QWORD *)&v447 + 1)) <= 0x12)
            bzero((char *)&v451 + 8 * v85 + 8 * *((_QWORD *)&v447 + 1), 152 - 8 * (v85 + *((_QWORD *)&v447 + 1)));
          v86 = 0;
          v87 = &v472;
          do
          {
            for (i = 0; i != 19; ++i)
              v87->i64[i] = *(_QWORD *)((char *)&v451 + i * 8) + (v87->i64[i] << 8);
            ++v86;
            v87 = (int64x2_t *)((char *)v87 + 152);
          }
          while (v86 != 4);
          if (!v81)
          {
            v89 = (2 * (v12 - 1)) ^ ((v12 - 1) >> 31);
            v90 = 33 - __clz(v89);
            if (v89)
              v91 = v90;
            else
              v91 = 1;
            v92 = &v472;
            v93 = v91;
            do
            {
              v94 = v92->i64[0];
              if (v92->i64[0] <= 1uLL)
                v94 = 1;
              v92->i64[0] = v94;
              v92 = (int64x2_t *)((char *)v92 + 8);
              --v93;
            }
            while (v93);
            if (v91 <= 9)
              memset_pattern16((char *)&v472 + 8 * v91, &xmmword_2368AF620, 80 - 8 * v91);
          }
          v95 = 0;
          v96 = v471;
          do
          {
            for (j = 0; j != 33; ++j)
              v96[j] = (unsigned int **)(qword_236924AB0[j] + ((_QWORD)v96[j] << 8));
            ++v95;
            v96 += 33;
          }
          while (v95 != 4);
          v98 = operator new();
          *(_QWORD *)v414 = v80;
          v421 = v73;
          bzero((void *)v98, 0x808uLL);
          v99 = 0;
          v407 = v98 + 128;
          do
          {
            v100 = v98 + v99;
            *(_WORD *)(v100 + 264) = 0;
            *(_OWORD *)(v100 + 248) = 0uLL;
            *(_OWORD *)(v100 + 232) = 0uLL;
            *(_OWORD *)(v100 + 216) = 0uLL;
            *(_OWORD *)(v100 + 200) = 0uLL;
            *(_OWORD *)(v100 + 128) = 0uLL;
            *(_OWORD *)(v100 + 144) = 0uLL;
            *(_OWORD *)(v100 + 160) = 0uLL;
            *(_OWORD *)(v100 + 176) = 0uLL;
            *(_QWORD *)(v100 + 191) = 0;
            *(_OWORD *)(v100 + 272) = 0uLL;
            *(_OWORD *)(v100 + 288) = 0uLL;
            *(_OWORD *)(v100 + 304) = 0uLL;
            *(_OWORD *)(v100 + 320) = 0uLL;
            *(_OWORD *)(v100 + 336) = 0uLL;
            *(_OWORD *)(v100 + 352) = 0uLL;
            *(_OWORD *)(v100 + 368) = 0uLL;
            *(_OWORD *)(v100 + 384) = 0uLL;
            *(_OWORD *)(v100 + 400) = 0uLL;
            *(_OWORD *)(v100 + 416) = 0uLL;
            *(_OWORD *)(v100 + 432) = 0uLL;
            *(_OWORD *)(v100 + 448) = 0uLL;
            *(_OWORD *)(v100 + 464) = 0uLL;
            *(_OWORD *)(v100 + 480) = 0uLL;
            *(_OWORD *)(v100 + 496) = 0uLL;
            *(_OWORD *)(v100 + 512) = 0uLL;
            v99 += 440;
            *(_OWORD *)(v100 + 528) = 0uLL;
            *(_OWORD *)(v100 + 544) = 0uLL;
          }
          while (v99 != 1760);
          v101 = 0;
          v102 = MEMORY[0x24BDAE450];
          *(_OWORD *)(v98 + 1888) = 0u;
          *(_OWORD *)(v98 + 1904) = 0u;
          v411 = (char *)(v98 + 1888);
          *(_QWORD *)(v98 + 1920) = v102;
          v437 = v98;
          *(_OWORD *)(v98 + 1928) = 0u;
          *(_OWORD *)(v98 + 1944) = 0u;
          *(_OWORD *)(v98 + 1960) = 0u;
          *(_OWORD *)(v98 + 1976) = 0u;
          *(_OWORD *)(v98 + 1992) = 0u;
          *(_OWORD *)(v98 + 2008) = 0u;
          *(_OWORD *)(v98 + 2024) = 0u;
          *(_OWORD *)(v98 + 2033) = 0u;
          v103 = v471;
          do
          {
            v104 = &v472.i8[152 * v101];
            v105 = *((_OWORD *)v104 + 7);
            v486 = *((_OWORD *)v104 + 6);
            v487 = v105;
            v488 = *((_OWORD *)v104 + 8);
            v106 = *((_OWORD *)v104 + 3);
            v482 = *((_OWORD *)v104 + 2);
            v483 = v106;
            v107 = *((_OWORD *)v104 + 5);
            v484 = *((_OWORD *)v104 + 4);
            v485 = v107;
            v108 = *((_OWORD *)v104 + 1);
            v480 = *(_OWORD *)v104;
            v430 = &v471[33 * v101];
            WORD4(__src[8]) = 0;
            *(_OWORD *)((char *)&__src[6] + 8) = 0u;
            *(_OWORD *)((char *)&__src[7] + 8) = 0u;
            *(_OWORD *)((char *)&__src[4] + 8) = 0u;
            *(_OWORD *)((char *)&__src[5] + 8) = 0u;
            memset(__src, 0, 71);
            memset(&__src[9], 0, 288);
            v489 = *((_QWORD *)v104 + 18);
            v109 = 18;
            v481 = v108;
            v428 = v101;
            while (1)
            {
              v110 = v109;
              if (v109 == -1)
                break;
              if (*((_QWORD *)&v480 + v109--))
              {
                v112 = v110 + 1;
                goto LABEL_187;
              }
            }
            v112 = 0;
LABEL_187:
            v113 = 0;
            v114 = 0;
            *(_QWORD *)&__src[27] = v112;
            do
              v114 += (uint64_t)v103[v113++];
            while (v113 != 33);
            *((_QWORD *)&v480 + v112) = v114;
            v468 = 0;
            v467 = 0;
            v469 = 0;
            sub_236897CDC(&v480, v112 + 1, byte_2369248B0, "\a\a\a\a\a\a\a\a\a\a\a\n", &v467);
            v479 = 0;
            v478 = 0u;
            v477 = 0u;
            v476 = 0;
            v475 = 0u;
            v474 = 0u;
            v115 = 15 - *((unsigned __int8 *)&v467 + v112);
            v466 = 15 - *((_BYTE *)&v467 + v112);
            v464 = vdupq_n_s8(v115);
            v465 = v464;
            v116 = 33;
            v117 = 32;
            while (1)
            {
              v118 = v117;
              v119 = v116;
              if (v117 == -1)
                break;
              v120 = v103[v117--];
              --v116;
              if (v120)
              {
                v121 = v118 + 1;
                goto LABEL_194;
              }
            }
            v121 = 0;
LABEL_194:
            sub_236897CDC(v430, v121, &v474, &v464, &v477);
            if (v110 == -1)
            {
              v124 = 0;
              v123 = v437;
            }
            else
            {
              v122 = 0;
              v123 = v437;
              do
              {
                *((_BYTE *)__src + v122) = *((_BYTE *)&v467 + v122);
                ++v122;
                v124 = *(_QWORD *)&__src[27];
              }
              while (v122 < *(_QWORD *)&__src[27]);
            }
            if (v118 != -1)
            {
              v125 = (unsigned __int8 *)&v477;
              v126 = (char *)&__src[2] + 6;
              do
              {
                v128 = *v125++;
                v127 = v128;
                if (v128)
                  v127 += *((_BYTE *)&v467 + *(_QWORD *)&__src[27]);
                *v126++ = v127;
                --v119;
              }
              while (v119);
              v124 = *(_QWORD *)&__src[27];
            }
            sub_23689814C((unsigned __int8 *)__src, (_BYTE *)&__src[1] + 3, v124, (unsigned __int8 *)&__src[2] + 6, (_WORD *)&__src[4] + 4, 33);
            v129 = 0;
            v130 = __src[0];
            v131 = BYTE3(__src[1]);
            do
            {
              v132 = 31 - __clz(v129);
              if (!(_DWORD)v129)
                v132 = 0;
              LODWORD(v133) = v132 + 12;
              if (v129 >= 0x10)
                v133 = v133;
              else
                v133 = v129;
              if (v129 < 0x10)
                LOBYTE(v132) = 0;
              v134 = v129 + (-1 << v132);
              if (v129 < 0x10)
                v134 = 0;
              *((_BYTE *)&__src[25] + v129) = *((_BYTE *)&__src[2] + v133 + 6) + v130 + v132;
              *((_QWORD *)&__src[9] + v129++) = (((v134 << *((_BYTE *)&__src[2] + v133 + 6)) | *((unsigned __int16 *)&__src[4]
                                                                                               + v133
                                                                                               + 4)) << v130) | v131;
            }
            while (v129 != 32);
            memcpy((void *)(v123 + 440 * v428 + 128), __src, 0x1B8uLL);
            v101 = v428 + 1;
            v103 += 33;
          }
          while (v428 != 3);
          v135 = *(_QWORD *)v414 * v79;
          v136 = v449;
          v137 = v74 * v421;
          if (BYTE13(v444))
            v138 = 1;
          else
            v138 = *(_QWORD *)v414 * v79 + v74 * v421 + 2;
          *(_OWORD *)v123 = v448;
          *(_OWORD *)(v123 + 16) = v136;
          *(_OWORD *)(v123 + 32) = v450;
          v139 = *((_QWORD *)&v446 + 1);
          *(_QWORD *)(v123 + 48) = v447;
          *(_QWORD *)(v123 + 56) = v139;
          *(_QWORD *)(v123 + 64) = v421;
          *(_QWORD *)(v123 + 72) = v74;
          *(_QWORD *)(v123 + 80) = v79;
          *(_QWORD *)(v123 + 88) = *(_QWORD *)v414;
          v140 = *((_QWORD *)&v447 + 1);
          *(_QWORD *)(v123 + 96) = v438;
          *(_QWORD *)(v123 + 104) = v140;
          *(_DWORD *)(v123 + 112) = HIBYTE(v444);
          *(_DWORD *)(v123 + 116) = 2;
          v141 = (char *)__p;
          v142 = (uint64_t)v462;
          v143 = (v462 - (_BYTE *)__p) >> 1;
          *(_BYTE *)(v123 + 120) = BYTE14(v444);
          sub_236868CAC(v411, v141, v142, v143);
          sub_2368982A0(__src, v138);
          v144 = (void **)(v123 + 1952);
          v145 = *(_QWORD *)(v123 + 1952);
          if (v145)
          {
            sub_2368931F8(v123 + 1952, v145);
            operator delete(*v144);
            *v144 = 0;
            *(_QWORD *)(v123 + 1960) = 0;
            *(_QWORD *)(v123 + 1968) = 0;
          }
          *(_OWORD *)(v123 + 1952) = __src[0];
          *(_QWORD *)(v123 + 1968) = *(_QWORD *)&__src[1];
          memset(__src, 0, 24);
          *(_QWORD *)&v480 = __src;
          sub_2368931B8((void ***)&v480);
          v146 = (unint64_t **)(v123 + 1976);
          sub_2367D7BB0((char **)(v123 + 1976), v138);
          v147 = BYTE13(v444) != 0;
          if (BYTE14(v444))
            sub_23689837C(v147, v447, *((uint64_t *)&v446 + 1), v438, v407, (uint64_t *)*v144);
          else
            sub_2368984B0(v147, v447, *((uint64_t *)&v446 + 1), v438, v407, (uint64_t)&v445, v12, (uint64_t)*v144, v405);
          v148 = 0;
          v149 = 0;
          do
          {
            v149 += *(_QWORD *)((char *)*v144 + v148 + 24) + 8 * *(_QWORD *)((char *)*v144 + v148 + 16);
            v148 += 40;
          }
          while (v148 != 160);
LABEL_391:
          v259 = (unint64_t)(v149 + 7) >> 3;
          v260 = *v146;
LABEL_392:
          *v260 = v259;
          if (!BYTE13(v444))
            sub_236898960(v259, v135, v137, (unint64_t *)(v123 + 2008), (_QWORD *)(v123 + 2000));
          if (__p)
          {
            v462 = __p;
            operator delete(__p);
          }
          v261 = (void *)v445;
          if ((_QWORD)v445)
          {
            *((_QWORD *)&v445 + 1) = v445;
            goto LABEL_398;
          }
          return v123;
        }
        ++v28;
      }
      v25 += 4;
      if (v25 == 0x40000)
      {
        if ((v27 & 1) != 0)
        {
          v34 = 1;
          goto LABEL_132;
        }
        v33 = v28;
        goto LABEL_401;
      }
    }
  }
  if (a5 <= 0xD)
  {
    v35 = a1[1];
    v448 = *a1;
    v449 = v35;
    v450 = a1[2];
    *(_QWORD *)&v447 = a2;
    *((_QWORD *)&v447 + 1) = a5;
    *((_QWORD *)&v446 + 1) = a3;
    v438 = a4;
    HIBYTE(v444) = a6 != 0;
    sub_2367C3BE4(&v445, 0x10000uLL);
    sub_236895B3C((char **)&__p);
    *(_WORD *)__p = 0;
    v37 = *((_QWORD *)&v447 + 1) != 8 || a7 == 0;
    BYTE14(v444) = v37;
    v38 = v37 ^ 1;
    if (v8 && (v37 & 1) == 0)
    {
      v39 = 0;
      v40 = v37;
      do
      {
        if (v8 - v39 >= 0x100)
          v41 = 256;
        else
          v41 = v8 - v39;
        if (v9 && !v40)
        {
          v42 = 0;
          do
          {
            if (v9 - v42 >= 0x100)
              v43 = 256;
            else
              v43 = v9 - v42;
            v471[0] = 0;
            v44 = ((uint64_t (*)(_QWORD, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int ***))v449)(v448, v42, v39, v43, v41, v471);
            if (v41 && !BYTE14(v444))
            {
              v45 = 1;
              do
              {
                v46 = (__int32 *)(v44 + (unint64_t)v471[0] * (v45 - 1));
                v47 = v438;
                if (v438 == 1)
                {
                  v48 = sub_236895B84(v44 + (unint64_t)v471[0] * (v45 - 1), v43, v445);
                  BYTE14(v444) = v48;
                  v47 = 1;
                }
                else
                {
                  v48 = 0;
                }
                if (v47 == 2)
                {
                  v48 = sub_236895CF0(v46, v43, v445);
                  BYTE14(v444) = v48;
                  v47 = v438;
                }
                if (v47 == 3)
                {
                  v48 = sub_236895E60(v46, v43, v445);
                  BYTE14(v444) = v48;
                  v47 = v438;
                }
                if (v47 == 4)
                {
                  v48 = sub_236895FD8((uint64_t)v46, v43, v445);
                  BYTE14(v444) = v48;
                }
                if (v45 >= v41)
                  break;
                ++v45;
              }
              while (!v48);
            }
            (*((void (**)(_QWORD, uint64_t))&v450 + 1))(v448, v44);
            v42 += 256;
            v9 = v447;
            LOBYTE(v37) = BYTE14(v444);
          }
          while (v42 < (unint64_t)v447 && BYTE14(v444) == 0);
          v8 = *((_QWORD *)&v446 + 1);
          v40 = BYTE14(v444);
        }
        v39 += 256;
        v38 = v40 == 0;
        if (v39 >= v8)
          break;
        v11 = v40 == 0;
        v40 = 0;
      }
      while (v11);
    }
    if (!v38)
    {
      v53 = 0;
      v59 = 0;
      goto LABEL_294;
    }
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = v445;
    v55 = -1;
    while (1)
    {
      v56 = *(_DWORD *)(v54 + v50);
      if (v56)
      {
        *(_DWORD *)(v54 + 4 * v53) = v56;
        LOBYTE(v56) = v56 != BYTE1(v56) || v56 != BYTE2(v56);
        v52 |= v56;
        if (BYTE1(v56) < v55)
          v55 = BYTE1(v56);
        if (BYTE1(v56) > v51)
          v51 = BYTE1(v56);
        v58 = v53 + 1;
        if (v53 >= 511)
        {
          v37 = 1;
          BYTE14(v444) = 1;
          if ((v52 & 1) == 0)
          {
LABEL_563:
            v59 = 1;
            v53 = v58;
            if ((float)((float)v58 * 1.4) > (float)(v51 - v55))
            {
              BYTE14(v444) = 1;
              v37 = 1;
              goto LABEL_296;
            }
LABEL_294:
            if (!(_BYTE)v37)
            {
              v471[0] = (unsigned int **)&v438;
              v263 = 126 - 2 * __clz(v53);
              v264 = v53 ? v263 : 0;
              sub_236898A40(v445, (unsigned int *)(v445 + 4 * v53), v471, v264, 1);
              if (v53 >= 1)
              {
                v265 = (int *)v445;
                v266 = __p;
                v267 = v53;
                while (1)
                {
                  v269 = *v265++;
                  v268 = v269;
                  if (!v269)
                    break;
                  v37 = v59 + 1;
                  v266[(-1640531535 * v268) >> 16] = v59++;
                  if (!--v267)
                    goto LABEL_296;
                }
              }
            }
            v37 = v59;
          }
LABEL_296:
          v183 = *((_QWORD *)&v446 + 1);
          v182 = v447;
          v184 = (unint64_t)(v447 + 255) >> 8;
          v185 = (unint64_t)(*((_QWORD *)&v446 + 1) + 255) >> 8;
          bzero(&v472, 0x260uLL);
          bzero(v471, 0x420uLL);
          v191 = v184 == 1 && v185 == 1;
          BYTE13(v444) = v191;
          v439[0] = (uint64_t)&v446 + 8;
          v439[1] = (uint64_t)&v447;
          v440[0] = (uint64_t)&v448;
          v440[1] = (uint64_t)&v472;
          v441[0] = (uint64_t)v471;
          v441[1] = (uint64_t)&v444 + 13;
          *(_QWORD *)&v442 = (char *)&v444 + 14;
          *((_QWORD *)&v442 + 1) = (char *)&v447 + 8;
          *(_QWORD *)&v443 = &v438;
          *((_QWORD *)&v443 + 1) = (char *)&v444 + 15;
          *(_QWORD *)&v444 = &__p;
          if (a7)
          {
            if (v185 * v184)
            {
              v192 = 0;
              do
              {
                v193 = *((_QWORD *)&v446 + 1) - ((v192 / v184) << 8);
                if (v193 >= 0x100)
                  v193 = 256;
                sub_23689A148((uint64_t)v439, v192 % v184, v192 / v184, v193 >> 6, v186, v187, v188, v189, v405, v406, v410, v413, v417, v418, v420, v424, v426, (uint64_t)v427, (uint64_t)v429,
                  v433,
                  v436,
                  v438,
                  v439[0],
                  v439[1],
                  v440[0],
                  v440[1],
                  v441[0],
                  v441[1],
                  v442,
                  v443,
                  v444,
                  v445,
                  v446,
                  v447,
                  v448,
                  *((uint64_t *)&v448 + 1),
                  v449,
                  *((uint64_t *)&v449 + 1),
                  v450,
                  *((uint64_t *)&v450 + 1),
                  v451,
                  *((uint64_t *)&v451 + 1));
                ++v192;
              }
              while (v185 * v184 != v192);
            }
          }
          else
          {
            sub_23689A148((uint64_t)v439, (v184 - 1) >> 1, (v185 - 1) >> 1, 4 * v185 * v184, v186, v187, v188, v189, v405, v406, v410, v413, v417, v418, v420, v424, v426, (uint64_t)v427, (uint64_t)v429,
              v433,
              v436,
              v438,
              v439[0],
              v439[1],
              v440[0],
              v440[1],
              v441[0],
              v441[1],
              v442,
              v443,
              v444,
              v445,
              v446,
              v447,
              v448,
              *((uint64_t *)&v448 + 1),
              v449,
              *((uint64_t *)&v449 + 1),
              v450,
              *((uint64_t *)&v450 + 1),
              v451,
              *((uint64_t *)&v451 + 1));
          }
          v194 = (unint64_t)(v182 + 2047) >> 11;
          v195 = (unint64_t)(v183 + 2047) >> 11;
          v457 = xmmword_236924A78;
          v458 = unk_236924A88;
          v459 = xmmword_236924A98;
          v453 = xmmword_236924A38;
          v454 = unk_236924A48;
          v455 = xmmword_236924A58;
          v456 = unk_236924A68;
          v451 = xmmword_236924A18;
          v452 = unk_236924A28;
          v196 = BYTE14(v444);
          if (BYTE14(v444))
            v197 = (unint64_t)v438 > 2;
          else
            v197 = 0;
          v198 = v197 || BYTE14(v444) == 0;
          v460 = 1;
          v199 = !v198 && v37 <= 255;
          v200 = 2;
          if (!v199)
            v200 = 3;
          if ((unint64_t)(v200 + *((_QWORD *)&v447 + 1)) <= 0x12)
            bzero((char *)&v451 + 8 * v200 + 8 * *((_QWORD *)&v447 + 1), 152 - 8 * (v200 + *((_QWORD *)&v447 + 1)));
          v201 = 0;
          v202 = &v472;
          do
          {
            for (k = 0; k != 19; ++k)
              v202->i64[k] = *(_QWORD *)((char *)&v451 + k * 8) + (v202->i64[k] << 8);
            ++v201;
            v202 = (int64x2_t *)((char *)v202 + 152);
          }
          while (v201 != 4);
          if (!v196)
          {
            v204 = (2 * (v37 - 1)) ^ ((v37 - 1) >> 31);
            v205 = 33 - __clz(v204);
            if (v204)
              v206 = v205;
            else
              v206 = 1;
            v207 = &v472;
            v208 = v206;
            do
            {
              v209 = v207->i64[0];
              if (v207->i64[0] <= 1uLL)
                v209 = 1;
              v207->i64[0] = v209;
              v207 = (int64x2_t *)((char *)v207 + 8);
              --v208;
            }
            while (v208);
            if (v206 <= 9)
              memset_pattern16((char *)&v472 + 8 * v206, &xmmword_2368AF620, 80 - 8 * v206);
          }
          v210 = 0;
          v211 = v471;
          do
          {
            for (m = 0; m != 33; ++m)
              v211[m] = (unsigned int **)(qword_236924AB0[m] + ((_QWORD)v211[m] << 8));
            ++v210;
            v211 += 33;
          }
          while (v210 != 4);
          v123 = operator new();
          *(_QWORD *)v415 = v195;
          v422 = v184;
          bzero((void *)v123, 0x808uLL);
          v213 = 0;
          v408 = v123 + 128;
          do
          {
            v214 = v123 + v213;
            *(_WORD *)(v214 + 264) = 0;
            *(_OWORD *)(v214 + 248) = 0uLL;
            *(_OWORD *)(v214 + 232) = 0uLL;
            *(_OWORD *)(v214 + 216) = 0uLL;
            *(_OWORD *)(v214 + 200) = 0uLL;
            *(_OWORD *)(v214 + 128) = 0uLL;
            *(_OWORD *)(v214 + 144) = 0uLL;
            *(_OWORD *)(v214 + 160) = 0uLL;
            *(_OWORD *)(v214 + 176) = 0uLL;
            *(_QWORD *)(v214 + 191) = 0;
            *(_OWORD *)(v214 + 272) = 0uLL;
            *(_OWORD *)(v214 + 288) = 0uLL;
            *(_OWORD *)(v214 + 304) = 0uLL;
            *(_OWORD *)(v214 + 320) = 0uLL;
            *(_OWORD *)(v214 + 336) = 0uLL;
            *(_OWORD *)(v214 + 352) = 0uLL;
            *(_OWORD *)(v214 + 368) = 0uLL;
            *(_OWORD *)(v214 + 384) = 0uLL;
            *(_OWORD *)(v214 + 400) = 0uLL;
            *(_OWORD *)(v214 + 416) = 0uLL;
            *(_OWORD *)(v214 + 432) = 0uLL;
            *(_OWORD *)(v214 + 448) = 0uLL;
            *(_OWORD *)(v214 + 464) = 0uLL;
            *(_OWORD *)(v214 + 480) = 0uLL;
            *(_OWORD *)(v214 + 496) = 0uLL;
            *(_OWORD *)(v214 + 512) = 0uLL;
            v213 += 440;
            *(_OWORD *)(v214 + 528) = 0uLL;
            *(_OWORD *)(v214 + 544) = 0uLL;
          }
          while (v213 != 1760);
          v215 = 0;
          v216 = MEMORY[0x24BDAE450];
          *(_OWORD *)(v123 + 1888) = 0u;
          *(_OWORD *)(v123 + 1904) = 0u;
          *(_QWORD *)(v123 + 1920) = v216;
          *(_OWORD *)(v123 + 1928) = 0u;
          *(_OWORD *)(v123 + 1944) = 0u;
          *(_OWORD *)(v123 + 1960) = 0u;
          *(_OWORD *)(v123 + 1976) = 0u;
          *(_OWORD *)(v123 + 1992) = 0u;
          *(_OWORD *)(v123 + 2008) = 0u;
          *(_OWORD *)(v123 + 2024) = 0u;
          *(_OWORD *)(v123 + 2033) = 0u;
          v217 = v471;
          while (1)
          {
            v218 = &v472.i8[152 * v215];
            v219 = *((_OWORD *)v218 + 7);
            v486 = *((_OWORD *)v218 + 6);
            v487 = v219;
            v488 = *((_OWORD *)v218 + 8);
            v220 = *((_OWORD *)v218 + 3);
            v482 = *((_OWORD *)v218 + 2);
            v483 = v220;
            v221 = *((_OWORD *)v218 + 5);
            v484 = *((_OWORD *)v218 + 4);
            v485 = v221;
            v222 = *((_OWORD *)v218 + 1);
            v480 = *(_OWORD *)v218;
            WORD4(__src[8]) = 0;
            *(_OWORD *)((char *)&__src[6] + 8) = 0u;
            *(_OWORD *)((char *)&__src[7] + 8) = 0u;
            *(_OWORD *)((char *)&__src[4] + 8) = 0u;
            *(_OWORD *)((char *)&__src[5] + 8) = 0u;
            memset(__src, 0, 71);
            memset(&__src[9], 0, 288);
            v489 = *((_QWORD *)v218 + 18);
            v223 = 18;
            v481 = v222;
            v431 = v215;
            v434 = &v471[33 * v215];
            while (1)
            {
              v224 = v223;
              if (v223 == -1)
                break;
              if (*((_QWORD *)&v480 + v223--))
              {
                v226 = v224 + 1;
                goto LABEL_351;
              }
            }
            v226 = 0;
LABEL_351:
            v227 = 0;
            v228 = 0;
            *(_QWORD *)&__src[27] = v226;
            do
              v228 += (uint64_t)v217[v227++];
            while (v227 != 33);
            *((_QWORD *)&v480 + v226) = v228;
            v468 = 0;
            v467 = 0;
            v469 = 0;
            sub_236897CDC(&v480, v226 + 1, byte_2369249CC, "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n", &v467);
            v479 = 0;
            v478 = 0u;
            v477 = 0u;
            v476 = 0;
            v475 = 0u;
            v474 = 0u;
            v229 = 15 - *((unsigned __int8 *)&v467 + v226);
            v466 = 15 - *((_BYTE *)&v467 + v226);
            v464 = vdupq_n_s8(v229);
            v465 = v464;
            v230 = 33;
            v231 = 32;
            do
            {
              v232 = v231;
              v233 = v230;
              if (v231 == -1)
              {
                v235 = 0;
                goto LABEL_358;
              }
              v234 = v217[v231--];
              --v230;
            }
            while (!v234);
            v235 = v232 + 1;
LABEL_358:
            sub_236897CDC(v434, v235, &v474, &v464, &v477);
            if (v224 == -1)
            {
              v237 = 0;
            }
            else
            {
              v236 = 0;
              do
              {
                *((_BYTE *)__src + v236) = *((_BYTE *)&v467 + v236);
                ++v236;
                v237 = *(_QWORD *)&__src[27];
              }
              while (v236 < *(_QWORD *)&__src[27]);
            }
            if (v232 != -1)
            {
              v238 = (unsigned __int8 *)&v477;
              v239 = (char *)&__src[2] + 6;
              do
              {
                v241 = *v238++;
                v240 = v241;
                if (v241)
                  v240 += *((_BYTE *)&v467 + *(_QWORD *)&__src[27]);
                *v239++ = v240;
                --v233;
              }
              while (v233);
              v237 = *(_QWORD *)&__src[27];
            }
            sub_23689814C((unsigned __int8 *)__src, (_BYTE *)&__src[1] + 3, v237, (unsigned __int8 *)&__src[2] + 6, (_WORD *)&__src[4] + 4, 33);
            v242 = 0;
            v243 = __src[0];
            v244 = BYTE3(__src[1]);
            do
            {
              v245 = 31 - __clz(v242);
              if (!(_DWORD)v242)
                v245 = 0;
              LODWORD(v246) = v245 + 12;
              if (v242 >= 0x10)
                v246 = v246;
              else
                v246 = v242;
              if (v242 < 0x10)
                LOBYTE(v245) = 0;
              v247 = v242 + (-1 << v245);
              if (v242 < 0x10)
                v247 = 0;
              *((_BYTE *)&__src[25] + v242) = *((_BYTE *)&__src[2] + v246 + 6) + v243 + v245;
              *((_QWORD *)&__src[9] + v242++) = (((v247 << *((_BYTE *)&__src[2] + v246 + 6)) | *((unsigned __int16 *)&__src[4]
                                                                                               + v246
                                                                                               + 4)) << v243) | v244;
            }
            while (v242 != 32);
            memcpy((void *)(v123 + 440 * v431 + 128), __src, 0x1B8uLL);
            v215 = v431 + 1;
            v217 += 33;
            if (v431 == 3)
            {
              v135 = *(_QWORD *)v415 * v194;
              v248 = v449;
              v137 = v185 * v422;
              if (BYTE13(v444))
                v249 = 1;
              else
                v249 = *(_QWORD *)v415 * v194 + v185 * v422 + 2;
              *(_OWORD *)v123 = v448;
              *(_OWORD *)(v123 + 16) = v248;
              *(_OWORD *)(v123 + 32) = v450;
              v250 = *((_QWORD *)&v446 + 1);
              *(_QWORD *)(v123 + 48) = v447;
              *(_QWORD *)(v123 + 56) = v250;
              *(_QWORD *)(v123 + 64) = v422;
              *(_QWORD *)(v123 + 72) = v185;
              *(_QWORD *)(v123 + 80) = v194;
              *(_QWORD *)(v123 + 88) = *(_QWORD *)v415;
              v251 = *((_QWORD *)&v447 + 1);
              *(_QWORD *)(v123 + 96) = v438;
              *(_QWORD *)(v123 + 104) = v251;
              *(_DWORD *)(v123 + 112) = HIBYTE(v444);
              *(_DWORD *)(v123 + 116) = 2;
              v252 = (char *)__p;
              v253 = (uint64_t)v462;
              v254 = (v462 - (_BYTE *)__p) >> 1;
              *(_BYTE *)(v123 + 120) = BYTE14(v444);
              sub_236868CAC((char *)(v123 + 1888), v252, v253, v254);
              sub_2368982A0(__src, v249);
              v255 = (void **)(v123 + 1952);
              v256 = *(_QWORD *)(v123 + 1952);
              if (v256)
              {
                sub_2368931F8(v123 + 1952, v256);
                operator delete(*v255);
                *v255 = 0;
                *(_QWORD *)(v123 + 1960) = 0;
                *(_QWORD *)(v123 + 1968) = 0;
              }
              *(_OWORD *)(v123 + 1952) = __src[0];
              *(_QWORD *)(v123 + 1968) = *(_QWORD *)&__src[1];
              memset(__src, 0, 24);
              *(_QWORD *)&v480 = __src;
              sub_2368931B8((void ***)&v480);
              v146 = (unint64_t **)(v123 + 1976);
              sub_2367D7BB0((char **)(v123 + 1976), v249);
              v257 = BYTE13(v444) != 0;
              if (BYTE14(v444))
                sub_23689837C(v257, v447, *((uint64_t *)&v446 + 1), v438, v408, (uint64_t *)*v255);
              else
                sub_2368984B0(v257, v447, *((uint64_t *)&v446 + 1), v438, v408, (uint64_t)&v445, v37, (uint64_t)*v255, v405);
              v258 = 0;
              v149 = 0;
              do
              {
                v149 += *(_QWORD *)((char *)*v255 + v258 + 24) + 8 * *(_QWORD *)((char *)*v255 + v258 + 16);
                v258 += 40;
              }
              while (v258 != 160);
              goto LABEL_391;
            }
          }
        }
        ++v53;
      }
      v50 += 4;
      if (v50 == 0x40000)
      {
        if ((v52 & 1) == 0)
        {
          v58 = v53;
          goto LABEL_563;
        }
        v59 = 1;
        goto LABEL_294;
      }
    }
  }
  if (a5 == 14)
  {
    v60 = a1[1];
    v448 = *a1;
    v449 = v60;
    v450 = a1[2];
    *(_QWORD *)&v447 = a3;
    *((_QWORD *)&v447 + 1) = a2;
    *((_QWORD *)&v446 + 1) = a4;
    HIBYTE(v444) = a6 != 0;
    sub_2367C3BE4(&v445, 0x10000uLL);
    sub_236895B3C((char **)&__p);
    *(_WORD *)__p = 0;
    BYTE14(v444) = 1;
    v61 = (unint64_t)(v9 + 255) >> 8;
    v62 = (v8 + 255) >> 8;
    bzero(&v472, 0x260uLL);
    bzero(v471, 0x420uLL);
    v68 = v61 == 1 && v62 == 1;
    BYTE13(v444) = v68;
    v439[0] = (uint64_t)&v447;
    v439[1] = (uint64_t)&v447 + 8;
    v440[0] = (uint64_t)&v448;
    v440[1] = (uint64_t)&v472;
    v441[0] = (uint64_t)v471;
    v441[1] = (uint64_t)&v444 + 13;
    *(_QWORD *)&v442 = (char *)&v444 + 14;
    *((_QWORD *)&v442 + 1) = &v438;
    *(_QWORD *)&v443 = (char *)&v446 + 8;
    *((_QWORD *)&v443 + 1) = (char *)&v444 + 15;
    *(_QWORD *)&v444 = &__p;
    v425 = (v8 + 255) >> 8;
    if (a7)
    {
      if (v62 * v61)
      {
        v69 = 0;
        do
        {
          v70 = v447 - ((v69 / v61) << 8);
          if (v70 >= 0x100)
            v70 = 256;
          sub_23689A798((uint64_t)v439, v69 % v61, v69 / v61, v70 >> 6, v63, v64, v65, v66, v405, v406, v410, v413, v417, v418, v420, v425, v426, (uint64_t)v427, (uint64_t)v429,
            v433,
            v436,
            v438,
            v439[0],
            v439[1],
            v440[0],
            v440[1],
            v441[0],
            v441[1],
            v442,
            v443,
            v444,
            v445,
            v446,
            v447,
            v448,
            *((uint64_t *)&v448 + 1),
            v449,
            *((uint64_t *)&v449 + 1),
            v450,
            *((uint64_t *)&v450 + 1),
            v451,
            *((uint64_t *)&v451 + 1));
          ++v69;
        }
        while (v62 * v61 != v69);
      }
    }
    else
    {
      sub_23689A798((uint64_t)v439, (v61 - 1) >> 1, (v62 - 1) >> 1, 4 * v62 * v61, v63, v64, v65, v66, v405, v406, v410, v413, v417, v418, v420, v425, v426, (uint64_t)v427, (uint64_t)v429,
        v433,
        v436,
        v438,
        v439[0],
        v439[1],
        v440[0],
        v440[1],
        v441[0],
        v441[1],
        v442,
        v443,
        v444,
        v445,
        v446,
        v447,
        v448,
        *((uint64_t *)&v448 + 1),
        v449,
        *((uint64_t *)&v449 + 1),
        v450,
        *((uint64_t *)&v450 + 1),
        v451,
        *((uint64_t *)&v451 + 1));
    }
    v281 = 0;
    v282 = (unint64_t)(v9 + 2047) >> 11;
    v283 = (v8 + 2047) >> 11;
    v455 = xmmword_236924A58;
    v456 = unk_236924A68;
    v457 = xmmword_236924A78;
    v458 = unk_236924A88;
    v451 = xmmword_236924A18;
    v452 = unk_236924A28;
    v453 = xmmword_236924A38;
    v454 = unk_236924A48;
    v284 = BYTE14(v444);
    v459 = 1uLL;
    v285 = &v472;
    v460 = 0;
    do
    {
      for (n = 0; n != 19; ++n)
        v285->i64[n] = *(_QWORD *)((char *)&v451 + n * 8) + (v285->i64[n] << 8);
      ++v281;
      v285 = (int64x2_t *)((char *)v285 + 152);
    }
    while (v281 != 4);
    if (!v284)
    {
      v287 = (int8x16_t)vcgtq_u64((uint64x2_t)v472, (uint64x2_t)vdupq_n_s64(1uLL));
      v472 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v472, v287), (int64x2_t)vmvnq_s8(v287));
      memset_pattern16(&v473, &xmmword_2368AF620, 0x40uLL);
    }
    v288 = 0;
    v289 = v471;
    do
    {
      for (ii = 0; ii != 33; ++ii)
        v289[ii] = (unsigned int **)(qword_236924AB0[ii] + ((_QWORD)v289[ii] << 8));
      ++v288;
      v289 += 33;
    }
    while (v288 != 4);
    v123 = operator new();
    v419 = v282;
    bzero((void *)v123, 0x808uLL);
    v291 = 0;
    v412 = v123 + 128;
    do
    {
      v292 = v123 + v291;
      *(_WORD *)(v292 + 264) = 0;
      *(_OWORD *)(v292 + 248) = 0uLL;
      *(_OWORD *)(v292 + 232) = 0uLL;
      *(_OWORD *)(v292 + 216) = 0uLL;
      *(_OWORD *)(v292 + 200) = 0uLL;
      *(_OWORD *)(v292 + 128) = 0uLL;
      *(_OWORD *)(v292 + 144) = 0uLL;
      *(_OWORD *)(v292 + 160) = 0uLL;
      *(_OWORD *)(v292 + 176) = 0uLL;
      *(_QWORD *)(v292 + 191) = 0;
      *(_OWORD *)(v292 + 272) = 0uLL;
      *(_OWORD *)(v292 + 288) = 0uLL;
      *(_OWORD *)(v292 + 304) = 0uLL;
      *(_OWORD *)(v292 + 320) = 0uLL;
      *(_OWORD *)(v292 + 336) = 0uLL;
      *(_OWORD *)(v292 + 352) = 0uLL;
      *(_OWORD *)(v292 + 368) = 0uLL;
      *(_OWORD *)(v292 + 384) = 0uLL;
      *(_OWORD *)(v292 + 400) = 0uLL;
      *(_OWORD *)(v292 + 416) = 0uLL;
      *(_OWORD *)(v292 + 432) = 0uLL;
      *(_OWORD *)(v292 + 448) = 0uLL;
      *(_OWORD *)(v292 + 464) = 0uLL;
      *(_OWORD *)(v292 + 480) = 0uLL;
      *(_OWORD *)(v292 + 496) = 0uLL;
      *(_OWORD *)(v292 + 512) = 0uLL;
      v291 += 440;
      *(_OWORD *)(v292 + 528) = 0uLL;
      *(_OWORD *)(v292 + 544) = 0uLL;
    }
    while (v291 != 1760);
    v293 = 0;
    v294 = MEMORY[0x24BDAE450];
    *(_OWORD *)(v123 + 1888) = 0u;
    *(_OWORD *)(v123 + 1904) = 0u;
    *(_QWORD *)(v123 + 1920) = v294;
    *(_OWORD *)(v123 + 1928) = 0u;
    *(_OWORD *)(v123 + 1944) = 0u;
    *(_OWORD *)(v123 + 1960) = 0u;
    *(_OWORD *)(v123 + 1976) = 0u;
    *(_OWORD *)(v123 + 1992) = 0u;
    *(_OWORD *)(v123 + 2008) = 0u;
    *(_OWORD *)(v123 + 2024) = 0u;
    *(_OWORD *)(v123 + 2033) = 0u;
    v295 = v471;
    while (1)
    {
      v296 = &v472.i8[152 * v293];
      v297 = *((_OWORD *)v296 + 7);
      v486 = *((_OWORD *)v296 + 6);
      v487 = v297;
      v488 = *((_OWORD *)v296 + 8);
      v298 = *((_OWORD *)v296 + 3);
      v482 = *((_OWORD *)v296 + 2);
      v483 = v298;
      v299 = *((_OWORD *)v296 + 5);
      v484 = *((_OWORD *)v296 + 4);
      v485 = v299;
      v300 = *((_OWORD *)v296 + 1);
      v480 = *(_OWORD *)v296;
      WORD4(__src[8]) = 0;
      *(_OWORD *)((char *)&__src[6] + 8) = 0u;
      *(_OWORD *)((char *)&__src[7] + 8) = 0u;
      *(_OWORD *)((char *)&__src[4] + 8) = 0u;
      *(_OWORD *)((char *)&__src[5] + 8) = 0u;
      memset(__src, 0, 71);
      memset(&__src[9], 0, 288);
      v489 = *((_QWORD *)v296 + 18);
      v301 = 18;
      v481 = v300;
      while (1)
      {
        v302 = v301;
        if (v301 == -1)
          break;
        if (*((_QWORD *)&v480 + v301--))
        {
          v304 = v302 + 1;
          goto LABEL_448;
        }
      }
      v304 = 0;
LABEL_448:
      v305 = 0;
      v306 = 0;
      *(_QWORD *)&__src[27] = v304;
      do
        v306 += (uint64_t)v295[v305++];
      while (v305 != 33);
      *((_QWORD *)&v480 + v304) = v306;
      v468 = 0;
      v467 = 0;
      v469 = 0;
      sub_236897CDC(&v480, v304 + 1, "", "\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\n", &v467);
      v479 = 0;
      v478 = 0u;
      v477 = 0u;
      v476 = 0;
      v475 = 0u;
      v474 = 0u;
      v307 = 15 - *((unsigned __int8 *)&v467 + v304);
      v466 = 15 - *((_BYTE *)&v467 + v304);
      v464 = vdupq_n_s8(v307);
      v465 = v464;
      v308 = 33;
      v309 = 32;
      do
      {
        v310 = v309;
        v311 = v308;
        if (v309 == -1)
        {
          v313 = 0;
          goto LABEL_455;
        }
        v312 = v295[v309--];
        --v308;
      }
      while (!v312);
      v313 = v310 + 1;
LABEL_455:
      sub_236897CDC(&v471[33 * v293], v313, &v474, &v464, &v477);
      if (v302 == -1)
      {
        v315 = 0;
      }
      else
      {
        v314 = 0;
        do
        {
          *((_BYTE *)__src + v314) = *((_BYTE *)&v467 + v314);
          ++v314;
          v315 = *(_QWORD *)&__src[27];
        }
        while (v314 < *(_QWORD *)&__src[27]);
      }
      if (v310 != -1)
      {
        v316 = (unsigned __int8 *)&v477;
        v317 = (char *)&__src[2] + 6;
        do
        {
          v319 = *v316++;
          v318 = v319;
          if (v319)
            v318 += *((_BYTE *)&v467 + *(_QWORD *)&__src[27]);
          *v317++ = v318;
          --v311;
        }
        while (v311);
        v315 = *(_QWORD *)&__src[27];
      }
      sub_23689814C((unsigned __int8 *)__src, (_BYTE *)&__src[1] + 3, v315, (unsigned __int8 *)&__src[2] + 6, (_WORD *)&__src[4] + 4, 33);
      v320 = 0;
      v321 = __src[0];
      v322 = BYTE3(__src[1]);
      do
      {
        v323 = 31 - __clz(v320);
        if (!(_DWORD)v320)
          v323 = 0;
        LODWORD(v324) = v323 + 12;
        if (v320 >= 0x10)
          v324 = v324;
        else
          v324 = v320;
        if (v320 < 0x10)
          LOBYTE(v323) = 0;
        v325 = v320 + (-1 << v323);
        if (v320 < 0x10)
          v325 = 0;
        *((_BYTE *)&__src[25] + v320) = *((_BYTE *)&__src[2] + v324 + 6) + v321 + v323;
        *((_QWORD *)&__src[9] + v320++) = (((v325 << *((_BYTE *)&__src[2] + v324 + 6)) | *((unsigned __int16 *)&__src[4]
                                                                                         + v324
                                                                                         + 4)) << v321) | v322;
      }
      while (v320 != 32);
      memcpy((void *)(v123 + 440 * v293++ + 128), __src, 0x1B8uLL);
      v295 += 33;
      if (v293 == 4)
      {
        v135 = v283 * v419;
        v326 = v449;
        v137 = v425 * v61;
        if (BYTE13(v444))
          v327 = 1;
        else
          v327 = v283 * v419 + v425 * v61 + 2;
        *(_OWORD *)v123 = v448;
        *(_OWORD *)(v123 + 16) = v326;
        *(_OWORD *)(v123 + 32) = v450;
        v328 = v447;
        *(_QWORD *)(v123 + 48) = *((_QWORD *)&v447 + 1);
        *(_QWORD *)(v123 + 56) = v328;
        *(_QWORD *)(v123 + 64) = v61;
        *(_QWORD *)(v123 + 72) = v425;
        *(_QWORD *)(v123 + 80) = v419;
        *(_QWORD *)(v123 + 88) = v283;
        *(_QWORD *)(v123 + 96) = *((_QWORD *)&v446 + 1);
        *(_QWORD *)(v123 + 104) = 14;
        *(_DWORD *)(v123 + 112) = HIBYTE(v444);
        *(_DWORD *)(v123 + 116) = 2;
        v329 = (char *)__p;
        v330 = (uint64_t)v462;
        v331 = (v462 - (_BYTE *)__p) >> 1;
        *(_BYTE *)(v123 + 120) = BYTE14(v444);
        sub_236868CAC((char *)(v123 + 1888), v329, v330, v331);
        sub_2368982A0(__src, v327);
        v332 = (void **)(v123 + 1952);
        v333 = *(_QWORD *)(v123 + 1952);
        if (v333)
        {
          sub_2368931F8(v123 + 1952, v333);
          operator delete(*v332);
          *v332 = 0;
          *(_QWORD *)(v123 + 1960) = 0;
          *(_QWORD *)(v123 + 1968) = 0;
        }
        *(_OWORD *)(v123 + 1952) = __src[0];
        *(_QWORD *)(v123 + 1968) = *(_QWORD *)&__src[1];
        memset(__src, 0, 24);
        *(_QWORD *)&v480 = __src;
        sub_2368931B8((void ***)&v480);
        sub_2367D7BB0((char **)(v123 + 1976), v327);
        v334 = BYTE13(v444) != 0;
        if (BYTE14(v444))
          sub_23689837C(v334, *((uint64_t *)&v447 + 1), v447, *((unint64_t *)&v446 + 1), v412, (uint64_t *)*v332);
        else
          sub_2368984B0(v334, *((uint64_t *)&v447 + 1), v447, *((uint64_t *)&v446 + 1), v412, (uint64_t)&v445, 0, (uint64_t)*v332, v405);
        v335 = 0;
        v336 = 0;
        do
        {
          v336 += *(_QWORD *)((char *)*v332 + v335 + 24) + 8 * *(_QWORD *)((char *)*v332 + v335 + 16);
          v335 += 40;
        }
        while (v335 != 160);
        v259 = (unint64_t)(v336 + 7) >> 3;
        v260 = *(unint64_t **)(v123 + 1976);
        goto LABEL_392;
      }
    }
  }
  v157 = a1[1];
  *(_OWORD *)v439 = *a1;
  *(_OWORD *)v440 = v157;
  *(_OWORD *)v441 = a1[2];
  v467 = a5;
  *(_QWORD *)&v447 = a3;
  *((_QWORD *)&v447 + 1) = a2;
  *((_QWORD *)&v446 + 1) = a4;
  LOBYTE(v438) = a6 != 0;
  sub_2367C3BE4(&v464, 0x10000uLL);
  sub_236895B3C((char **)&v445);
  *(_WORD *)v445 = 0;
  v159 = v467 != 8 || a7 == 0;
  HIBYTE(v444) = v159;
  v160 = v159 ^ 1;
  if (v8 && (v159 & 1) == 0)
  {
    v161 = 0;
    v162 = v159;
    do
    {
      if (v8 - v161 >= 0x100)
        v163 = 256;
      else
        v163 = v8 - v161;
      if (v9 && !v162)
      {
        v164 = 0;
        do
        {
          if (v9 - v164 >= 0x100)
            v165 = 256;
          else
            v165 = v9 - v164;
          v471[0] = 0;
          v166 = ((uint64_t (*)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int ***))v440[0])(v439[0], v164, v161, v165, v163, v471);
          if (v163 && !HIBYTE(v444))
          {
            v167 = 1;
            do
            {
              v168 = (__int32 *)(v166 + (unint64_t)v471[0] * (v167 - 1));
              v169 = *((_QWORD *)&v446 + 1);
              if (*((_QWORD *)&v446 + 1) == 1)
              {
                v170 = sub_236895B84(v166 + (unint64_t)v471[0] * (v167 - 1), v165, v464.i64[0]);
                HIBYTE(v444) = v170;
                v169 = *((_QWORD *)&v446 + 1);
              }
              else
              {
                v170 = 0;
              }
              if (v169 == 2)
              {
                v170 = sub_236895CF0(v168, v165, v464.i64[0]);
                HIBYTE(v444) = v170;
                v169 = *((_QWORD *)&v446 + 1);
              }
              if (v169 == 3)
              {
                v170 = sub_236895E60(v168, v165, v464.i64[0]);
                HIBYTE(v444) = v170;
                v169 = *((_QWORD *)&v446 + 1);
              }
              if (v169 == 4)
              {
                v170 = sub_236895FD8((uint64_t)v168, v165, v464.i64[0]);
                HIBYTE(v444) = v170;
              }
              if (v167 >= v163)
                break;
              ++v167;
            }
            while (!v170);
          }
          ((void (*)(uint64_t, uint64_t))v441[1])(v439[0], v166);
          v164 += 256;
          v9 = *((_QWORD *)&v447 + 1);
          LOBYTE(v159) = HIBYTE(v444);
        }
        while (v164 < *((_QWORD *)&v447 + 1) && HIBYTE(v444) == 0);
        v8 = v447;
        v162 = HIBYTE(v444);
      }
      v161 += 256;
      v160 = v162 == 0;
      if (v161 >= v8)
        break;
      v11 = v162 == 0;
      v162 = 0;
    }
    while (v11);
  }
  if (!v160)
  {
    v175 = 0;
    v181 = 0;
    goto LABEL_412;
  }
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v176 = v464.i64[0];
  v177 = -1;
  while (1)
  {
    v178 = *(_DWORD *)(v176 + v172);
    if (v178)
      break;
LABEL_290:
    v172 += 4;
    if (v172 == 0x40000)
    {
      if ((v174 & 1) != 0)
      {
        v181 = 1;
        goto LABEL_412;
      }
      v180 = v175;
      goto LABEL_576;
    }
  }
  *(_DWORD *)(v176 + 4 * v175) = v178;
  LOBYTE(v178) = v178 != BYTE1(v178) || v178 != BYTE2(v178);
  v174 |= v178;
  if (BYTE1(v178) < v177)
    v177 = BYTE1(v178);
  if (BYTE1(v178) > v173)
    v173 = BYTE1(v178);
  v180 = v175 + 1;
  if (v175 < 511)
  {
    ++v175;
    goto LABEL_290;
  }
  v159 = 1;
  HIBYTE(v444) = 1;
  if ((v174 & 1) != 0)
    goto LABEL_414;
LABEL_576:
  v181 = 1;
  v175 = v180;
  if ((float)((float)v180 * 1.4) > (float)(v173 - v177))
  {
    HIBYTE(v444) = 1;
    v159 = 1;
    goto LABEL_414;
  }
LABEL_412:
  if (!(_BYTE)v159)
  {
    v471[0] = (unsigned int **)&v446 + 1;
    v398 = 126 - 2 * __clz(v175);
    v399 = v175 ? v398 : 0;
    sub_23689ADE8(v464.u64[0], (unsigned int *)(v464.i64[0] + 4 * v175), v471, v399, 1);
    if (v175 >= 1)
    {
      v400 = (int *)v464.i64[0];
      v401 = v445;
      v402 = v175;
      while (1)
      {
        v404 = *v400++;
        v403 = v404;
        if (!v404)
          break;
        v159 = v181 + 1;
        *(_WORD *)(v401 + 2 * ((-1640531535 * v403) >> 16)) = v181++;
        if (!--v402)
          goto LABEL_414;
      }
    }
  }
  v159 = v181;
LABEL_414:
  v270 = v447;
  v271 = (unint64_t)(*((_QWORD *)&v447 + 1) + 255) >> 8;
  v272 = (unint64_t)(v447 + 255) >> 8;
  bzero(&v472, 0x260uLL);
  bzero(v471, 0x420uLL);
  v278 = v271 == 1 && v272 == 1;
  BYTE14(v444) = v278;
  *(_QWORD *)&v451 = &v447;
  *((_QWORD *)&v451 + 1) = (char *)&v447 + 8;
  *(_QWORD *)&v452 = v439;
  *((_QWORD *)&v452 + 1) = &v472;
  *(_QWORD *)&v453 = v471;
  *((_QWORD *)&v453 + 1) = (char *)&v444 + 14;
  *(_QWORD *)&v454 = (char *)&v444 + 15;
  *((_QWORD *)&v454 + 1) = &v467;
  *(_QWORD *)&v455 = (char *)&v446 + 8;
  *((_QWORD *)&v455 + 1) = &v438;
  *(_QWORD *)&v456 = &v445;
  if (a7)
  {
    if (v272 * v271)
    {
      v279 = 0;
      do
      {
        v280 = v447 - ((v279 / v271) << 8);
        if (v280 >= 0x100)
          v280 = 256;
        sub_23689C4F0((uint64_t)&v451, v279 % v271, v279 / v271, v280 >> 6, v273, v274, v275, v276, v405, (uint64_t)v406, (int)v410, SHIDWORD(v410), v413, (uint64_t)v417, v418, v420, v424, v426, v427,
          v429,
          v433,
          v436,
          v438,
          v439[0],
          v439[1],
          v440[0],
          v440[1],
          v441[0],
          v441[1],
          (uint64_t *)v442,
          *((uint64_t *)&v442 + 1),
          v443,
          *((uint64_t *)&v443 + 1),
          v444,
          *((uint64_t *)&v444 + 1),
          v445,
          *((uint64_t *)&v445 + 1),
          v446,
          v447,
          v448,
          v449,
          v450,
          v451,
          v452,
          v453,
          v454,
          *((uint64_t *)&v454 + 1),
          v455,
          *((uint64_t *)&v455 + 1));
        ++v279;
      }
      while (v272 * v271 != v279);
    }
  }
  else
  {
    sub_23689C4F0((uint64_t)&v451, (v271 - 1) >> 1, (v272 - 1) >> 1, 4 * v272 * v271, v273, v274, v275, v276, v405, (uint64_t)v406, (int)v410, SHIDWORD(v410), v413, (uint64_t)v417, v418, v420, v424, v426, v427,
      v429,
      v433,
      v436,
      v438,
      v439[0],
      v439[1],
      v440[0],
      v440[1],
      v441[0],
      v441[1],
      (uint64_t *)v442,
      *((uint64_t *)&v442 + 1),
      v443,
      *((uint64_t *)&v443 + 1),
      v444,
      *((uint64_t *)&v444 + 1),
      v445,
      *((uint64_t *)&v445 + 1),
      v446,
      v447,
      v448,
      v449,
      v450,
      v451,
      v452,
      v453,
      v454,
      *((uint64_t *)&v454 + 1),
      v455,
      *((uint64_t *)&v455 + 1));
  }
  v337 = 0;
  v338 = (unint64_t)(*((_QWORD *)&v270 + 1) + 2047) >> 11;
  v339 = &v472;
  v340 = HIBYTE(v444);
  do
  {
    for (jj = 0; jj != 19; ++jj)
      v339->i64[jj] = *(_QWORD *)((char *)&xmmword_236924A18 + jj * 8) + (v339->i64[jj] << 8);
    ++v337;
    v339 = (int64x2_t *)((char *)v339 + 152);
  }
  while (v337 != 4);
  if (!v340)
  {
    v342 = (2 * (v159 - 1)) ^ ((v159 - 1) >> 31);
    v343 = 33 - __clz(v342);
    if (v342)
      v344 = v343;
    else
      v344 = 1;
    v345 = &v472;
    v346 = v344;
    do
    {
      v347 = v345->i64[0];
      if (v345->i64[0] <= 1uLL)
        v347 = 1;
      v345->i64[0] = v347;
      v345 = (int64x2_t *)((char *)v345 + 8);
      --v346;
    }
    while (v346);
    if (v344 <= 9)
      memset_pattern16((char *)&v472 + 8 * v344, &xmmword_2368AF620, 80 - 8 * v344);
  }
  v348 = 0;
  v349 = v471;
  do
  {
    for (kk = 0; kk != 33; ++kk)
      v349[kk] = (unsigned int **)(qword_236924AB0[kk] + ((_QWORD)v349[kk] << 8));
    ++v348;
    v349 += 33;
  }
  while (v348 != 4);
  v123 = operator new();
  v416 = (unint64_t)(v270 + 2047) >> 11;
  v423 = v271;
  bzero((void *)v123, 0x808uLL);
  v351 = 0;
  v409 = v123 + 128;
  do
  {
    v352 = v123 + v351;
    *(_WORD *)(v352 + 264) = 0;
    *(_OWORD *)(v352 + 248) = 0uLL;
    *(_OWORD *)(v352 + 232) = 0uLL;
    *(_OWORD *)(v352 + 216) = 0uLL;
    *(_OWORD *)(v352 + 200) = 0uLL;
    *(_OWORD *)(v352 + 128) = 0uLL;
    *(_OWORD *)(v352 + 144) = 0uLL;
    *(_OWORD *)(v352 + 160) = 0uLL;
    *(_OWORD *)(v352 + 176) = 0uLL;
    *(_QWORD *)(v352 + 191) = 0;
    *(_OWORD *)(v352 + 272) = 0uLL;
    *(_OWORD *)(v352 + 288) = 0uLL;
    *(_OWORD *)(v352 + 304) = 0uLL;
    *(_OWORD *)(v352 + 320) = 0uLL;
    *(_OWORD *)(v352 + 336) = 0uLL;
    *(_OWORD *)(v352 + 352) = 0uLL;
    *(_OWORD *)(v352 + 368) = 0uLL;
    *(_OWORD *)(v352 + 384) = 0uLL;
    *(_OWORD *)(v352 + 400) = 0uLL;
    *(_OWORD *)(v352 + 416) = 0uLL;
    *(_OWORD *)(v352 + 432) = 0uLL;
    *(_OWORD *)(v352 + 448) = 0uLL;
    *(_OWORD *)(v352 + 464) = 0uLL;
    *(_OWORD *)(v352 + 480) = 0uLL;
    *(_OWORD *)(v352 + 496) = 0uLL;
    *(_OWORD *)(v352 + 512) = 0uLL;
    v351 += 440;
    *(_OWORD *)(v352 + 528) = 0uLL;
    *(_OWORD *)(v352 + 544) = 0uLL;
  }
  while (v351 != 1760);
  v353 = 0;
  v354 = MEMORY[0x24BDAE450];
  *(_OWORD *)(v123 + 1888) = 0u;
  *(_OWORD *)(v123 + 1904) = 0u;
  *(_QWORD *)(v123 + 1920) = v354;
  *(_OWORD *)(v123 + 1928) = 0u;
  *(_OWORD *)(v123 + 1944) = 0u;
  *(_OWORD *)(v123 + 1960) = 0u;
  *(_OWORD *)(v123 + 1976) = 0u;
  *(_OWORD *)(v123 + 1992) = 0u;
  *(_OWORD *)(v123 + 2008) = 0u;
  *(_OWORD *)(v123 + 2024) = 0u;
  *(_OWORD *)(v123 + 2033) = 0u;
  v355 = v471;
  do
  {
    v356 = &v472.i8[152 * v353];
    v357 = *((_OWORD *)v356 + 7);
    v486 = *((_OWORD *)v356 + 6);
    v487 = v357;
    v488 = *((_OWORD *)v356 + 8);
    v358 = *((_OWORD *)v356 + 3);
    v482 = *((_OWORD *)v356 + 2);
    v483 = v358;
    v359 = *((_OWORD *)v356 + 5);
    v484 = *((_OWORD *)v356 + 4);
    v485 = v359;
    v360 = *((_OWORD *)v356 + 1);
    v480 = *(_OWORD *)v356;
    WORD4(__src[8]) = 0;
    *(_OWORD *)((char *)&__src[6] + 8) = 0u;
    *(_OWORD *)((char *)&__src[7] + 8) = 0u;
    *(_OWORD *)((char *)&__src[4] + 8) = 0u;
    *(_OWORD *)((char *)&__src[5] + 8) = 0u;
    memset(__src, 0, 71);
    memset(&__src[9], 0, 288);
    v489 = *((_QWORD *)v356 + 18);
    v361 = 18;
    v481 = v360;
    v432 = v353;
    v435 = &v471[33 * v353];
    while (1)
    {
      v362 = v361;
      if (v361 == -1)
        break;
      if (*((_QWORD *)&v480 + v361--))
      {
        v364 = v362 + 1;
        goto LABEL_516;
      }
    }
    v364 = 0;
LABEL_516:
    v365 = 0;
    v366 = 0;
    *(_QWORD *)&__src[27] = v364;
    do
      v366 += (uint64_t)v355[v365++];
    while (v365 != 33);
    *((_QWORD *)&v480 + v364) = v366;
    __p = 0;
    v462 = 0;
    v463 = 0;
    sub_236897CDC(&v480, v364 + 1, byte_236924BB8, byte_236924BCC, &__p);
    LOBYTE(v450) = 0;
    v448 = 0u;
    v449 = 0u;
    v479 = 0;
    v478 = 0u;
    v477 = 0u;
    v367 = 15 - *((unsigned __int8 *)&__p + v364);
    v476 = 15 - *((_BYTE *)&__p + v364);
    v475 = vdupq_n_s8(v367);
    v474 = v475;
    v368 = 33;
    v369 = 32;
    while (1)
    {
      v370 = v369;
      v371 = v368;
      if (v369 == -1)
        break;
      v372 = v355[v369--];
      --v368;
      if (v372)
      {
        v373 = v370 + 1;
        goto LABEL_523;
      }
    }
    v373 = 0;
LABEL_523:
    sub_236897CDC(v435, v373, &v477, &v474, &v448);
    if (v362 == -1)
    {
      v375 = 0;
    }
    else
    {
      v374 = 0;
      do
      {
        *((_BYTE *)__src + v374) = *((_BYTE *)&__p + v374);
        ++v374;
        v375 = *(_QWORD *)&__src[27];
      }
      while (v374 < *(_QWORD *)&__src[27]);
    }
    if (v370 != -1)
    {
      v376 = &v448;
      v377 = (char *)&__src[2] + 6;
      do
      {
        v379 = *(unsigned __int8 *)v376;
        v376 = (__int128 *)((char *)v376 + 1);
        v378 = v379;
        if (v379)
          v378 += *((_BYTE *)&__p + *(_QWORD *)&__src[27]);
        *v377++ = v378;
        --v371;
      }
      while (v371);
      v375 = *(_QWORD *)&__src[27];
    }
    sub_23689814C((unsigned __int8 *)__src, (_BYTE *)&__src[1] + 3, v375, (unsigned __int8 *)&__src[2] + 6, (_WORD *)&__src[4] + 4, 33);
    v380 = 0;
    v381 = __src[0];
    v382 = BYTE3(__src[1]);
    do
    {
      v383 = 31 - __clz(v380);
      if (!(_DWORD)v380)
        v383 = 0;
      LODWORD(v384) = v383 + 12;
      if (v380 >= 0x10)
        v384 = v384;
      else
        v384 = v380;
      if (v380 < 0x10)
        LOBYTE(v383) = 0;
      v385 = v380 + (-1 << v383);
      if (v380 < 0x10)
        v385 = 0;
      *((_BYTE *)&__src[25] + v380) = *((_BYTE *)&__src[2] + v384 + 6) + v381 + v383;
      *((_QWORD *)&__src[9] + v380++) = (((v385 << *((_BYTE *)&__src[2] + v384 + 6)) | *((unsigned __int16 *)&__src[4]
                                                                                       + v384
                                                                                       + 4)) << v381) | v382;
    }
    while (v380 != 32);
    memcpy((void *)(v123 + 440 * v432 + 128), __src, 0x1B8uLL);
    v353 = v432 + 1;
    v355 += 33;
  }
  while (v432 != 3);
  v386 = *(_OWORD *)v440;
  if (BYTE14(v444))
    v387 = 1;
  else
    v387 = v416 * v338 + v272 * v423 + 2;
  *(_OWORD *)v123 = *(_OWORD *)v439;
  *(_OWORD *)(v123 + 16) = v386;
  *(_OWORD *)(v123 + 32) = *(_OWORD *)v441;
  v388 = v447;
  *(_QWORD *)(v123 + 48) = *((_QWORD *)&v447 + 1);
  *(_QWORD *)(v123 + 56) = v388;
  *(_QWORD *)(v123 + 64) = v423;
  *(_QWORD *)(v123 + 72) = v272;
  *(_QWORD *)(v123 + 80) = v338;
  *(_QWORD *)(v123 + 88) = v416;
  v389 = v467;
  *(_QWORD *)(v123 + 96) = *((_QWORD *)&v446 + 1);
  *(_QWORD *)(v123 + 104) = v389;
  *(_DWORD *)(v123 + 112) = v438;
  *(_DWORD *)(v123 + 116) = 2;
  v390 = v445;
  v391 = (uint64_t)(*((_QWORD *)&v445 + 1) - v445) >> 1;
  *(_BYTE *)(v123 + 120) = HIBYTE(v444);
  sub_236868CAC((char *)(v123 + 1888), (char *)v390, *((uint64_t *)&v390 + 1), v391);
  sub_2368982A0(__src, v387);
  v392 = (void **)(v123 + 1952);
  v393 = *(_QWORD *)(v123 + 1952);
  if (v393)
  {
    sub_2368931F8(v123 + 1952, v393);
    operator delete(*v392);
    *v392 = 0;
    *(_QWORD *)(v123 + 1960) = 0;
    *(_QWORD *)(v123 + 1968) = 0;
  }
  *(_OWORD *)(v123 + 1952) = __src[0];
  *(_QWORD *)(v123 + 1968) = *(_QWORD *)&__src[1];
  memset(__src, 0, 24);
  *(_QWORD *)&v480 = __src;
  sub_2368931B8((void ***)&v480);
  sub_2367D7BB0((char **)(v123 + 1976), v387);
  v394 = BYTE14(v444) != 0;
  if (HIBYTE(v444))
    sub_23689837C(v394, *((uint64_t *)&v447 + 1), v447, *((unint64_t *)&v446 + 1), v409, (uint64_t *)*v392);
  else
    sub_2368984B0(v394, *((uint64_t *)&v447 + 1), v447, *((uint64_t *)&v446 + 1), v409, (uint64_t)&v464, v159, (uint64_t)*v392, v405);
  v395 = 0;
  v396 = 0;
  do
  {
    v396 += *(_QWORD *)((char *)*v392 + v395 + 24) + 8 * *(_QWORD *)((char *)*v392 + v395 + 16);
    v395 += 40;
  }
  while (v395 != 160);
  v397 = (unint64_t)(v396 + 7) >> 3;
  **(_QWORD **)(v123 + 1976) = v397;
  if (!BYTE14(v444))
    sub_236898960(v397, v416 * v338, v272 * v423, (unint64_t *)(v123 + 2008), (_QWORD *)(v123 + 2000));
  if ((_QWORD)v445)
  {
    *((_QWORD *)&v445 + 1) = v445;
    operator delete((void *)v445);
  }
  v261 = (void *)v464.i64[0];
  if (v464.i64[0])
  {
    v464.i64[1] = v464.i64[0];
LABEL_398:
    operator delete(v261);
  }
  return v123;
}

void sub_236895A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;

  if (__p)
    operator delete(__p);
  if (a69)
    operator delete(a69);
  _Unwind_Resume(a1);
}

char **sub_236895B3C(char **a1)
{
  char *v2;
  char *v3;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x20000uLL);
  *a1 = v2;
  v3 = v2 + 0x20000;
  a1[2] = v2 + 0x20000;
  bzero(v2, 0x20000uLL);
  a1[1] = v3;
  return a1;
}

uint64_t sub_236895B84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v3;
  unint64_t v4;
  int8x16_t v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  uint64_t j;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  char v20;
  _BYTE v22[32];
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2 < 8)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5.i64[0] = 0xFF000000FFLL;
    v5.i64[1] = 0xFF000000FFLL;
    v6 = vdupq_n_s32(0x9E3779B1);
    v7 = a1;
    do
    {
      v8 = 0;
      v23 = 0uLL;
      v24 = 0uLL;
      do
      {
        v23.i32[v8] = *(_DWORD *)(v7 + v8);
        ++v8;
      }
      while (v8 != 8);
      v9 = 0;
      v23 = vandq_s8(v23, v5);
      v24 = vandq_s8(v24, v5);
      do
      {
        *(uint32x4_t *)&v22[v9] = vshrq_n_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)((char *)&v23 + v9), v6), 0x10uLL);
        v9 += 16;
      }
      while (v9 != 32);
      for (i = 0; i != 8; ++i)
      {
        v11 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[i * 4]);
        if (v11)
          LOBYTE(v11) = v23.i32[i] != v11;
        v3 |= v11;
      }
      for (j = 0; j != 8; ++j)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[j * 4]) = v23.i32[j];
      v4 += 8;
      v7 += 8;
    }
    while ((v4 | 7) < a2);
  }
  v13 = a2 - v4;
  if (a2 > v4)
  {
    v14 = (unsigned __int8 *)(a1 + v4);
    do
    {
      v16 = *v14++;
      v15 = v16;
      v17 = (-1640531535 * v16) >> 16;
      v18 = *(_DWORD *)(a3 + 4 * v17);
      if (v18)
        v19 = v18 == v15;
      else
        v19 = 1;
      v20 = !v19;
      v3 |= v20;
      *(_DWORD *)(a3 + 4 * v17) = v15;
      --v13;
    }
    while (v13);
  }
  return v3 & 1;
}

uint64_t sub_236895CF0(__int32 *a1, unint64_t a2, uint64_t a3)
{
  char v3;
  unint64_t v4;
  int8x16_t v5;
  int32x4_t v6;
  __int32 *v7;
  uint64_t v8;
  __int32 *v9;
  __int32 v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t j;
  unint64_t v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  char v22;
  _BYTE v24[32];
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a2 < 8)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5.i64[0] = 0xFFFF0000FFFFLL;
    v5.i64[1] = 0xFFFF0000FFFFLL;
    v6 = vdupq_n_s32(0x9E3779B1);
    v7 = a1;
    do
    {
      v8 = 0;
      v25 = 0uLL;
      v26 = 0uLL;
      v9 = v7;
      do
      {
        v10 = *v9;
        v9 = (__int32 *)((char *)v9 + 2);
        v25.i32[v8++] = v10;
      }
      while (v8 != 8);
      v11 = 0;
      v25 = vandq_s8(v25, v5);
      v26 = vandq_s8(v26, v5);
      do
      {
        *(uint32x4_t *)&v24[v11] = vshrq_n_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)((char *)&v25 + v11), v6), 0x10uLL);
        v11 += 16;
      }
      while (v11 != 32);
      for (i = 0; i != 8; ++i)
      {
        v13 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[i * 4]);
        if (v13)
          LOBYTE(v13) = v25.i32[i] != v13;
        v3 |= v13;
      }
      for (j = 0; j != 8; ++j)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[j * 4]) = v25.i32[j];
      v4 += 8;
      v7 += 4;
    }
    while ((v4 | 7) < a2);
  }
  v15 = a2 - v4;
  if (a2 > v4)
  {
    v16 = (unsigned __int16 *)&a1[v4 / 2];
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = (-1640531535 * v18) >> 16;
      v20 = *(_DWORD *)(a3 + 4 * v19);
      if (v20)
        v21 = v20 == v17;
      else
        v21 = 1;
      v22 = !v21;
      v3 |= v22;
      *(_DWORD *)(a3 + 4 * v19) = v17;
      --v15;
    }
    while (v15);
  }
  return v3 & 1;
}

uint64_t sub_236895E60(int *a1, unint64_t a2, uint64_t a3)
{
  char v3;
  unint64_t v4;
  int32x4_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  uint64_t j;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  char v22;
  _BYTE v24[32];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a2 < 8)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = vdupq_n_s32(0x9E3779B1);
    v6 = a1;
    do
    {
      v7 = 0;
      v25 = 0uLL;
      v26 = 0uLL;
      v8 = v6;
      do
      {
        v9 = *v8;
        v8 = (int *)((char *)v8 + 3);
        *(_DWORD *)((char *)&v25 + v7) = v9;
        v7 += 4;
      }
      while (v7 != 32);
      v10 = 0;
      v25 &= __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
      v26 &= __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
      do
      {
        *(uint32x4_t *)&v24[v10] = vshrq_n_u32((uint32x4_t)vmulq_s32(*(int32x4_t *)((char *)&v25 + v10), v5), 0x10uLL);
        v10 += 16;
      }
      while (v10 != 32);
      for (i = 0; i != 32; i += 4)
      {
        v12 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[i]);
        if (v12)
          LOBYTE(v12) = *(_DWORD *)((char *)&v25 + i) != v12;
        v3 |= v12;
      }
      for (j = 0; j != 32; j += 4)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v24[j]) = *(_DWORD *)((char *)&v25 + j);
      v4 += 8;
      v6 += 6;
    }
    while ((v4 | 7) < a2);
  }
  v14 = a2 - v4;
  if (a2 > v4)
  {
    v15 = (unsigned __int16 *)&a1[3 * v4 / 4];
    do
    {
      v16 = *((unsigned __int8 *)v15 + 2);
      v17 = *v15;
      v15 = (unsigned __int16 *)((char *)v15 + 3);
      v18 = v17 | (v16 << 16);
      v19 = (-1640531535 * v18) >> 16;
      v20 = *(_DWORD *)(a3 + 4 * v19);
      if (v20)
        v21 = v20 == v18;
      else
        v21 = 1;
      v22 = !v21;
      v3 |= v22;
      *(_DWORD *)(a3 + 4 * v19) = v18;
      --v14;
    }
    while (v14);
  }
  return v3 & 1;
}

uint64_t sub_236895FD8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  int32x4_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t i;
  int v11;
  uint64_t j;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  char v20;
  _BYTE v22[32];
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2 < 8)
  {
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = vdupq_n_s32(0x9E3779B1);
    do
    {
      v7 = 0;
      v8 = (_OWORD *)(a1 + 32 * v3);
      v9 = v8[1];
      v23[0] = *v8;
      v23[1] = v9;
      do
      {
        *(uint32x4_t *)&v22[v7 * 16] = vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)v23[v7], v6), 0x10uLL);
        ++v7;
      }
      while (v7 != 2);
      for (i = 0; i != 32; i += 4)
      {
        v11 = *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[i]);
        if (v11)
          LOBYTE(v11) = *(_DWORD *)((char *)v23 + i) != v11;
        v4 |= v11;
      }
      for (j = 0; j != 32; j += 4)
        *(_DWORD *)(a3 + 4 * *(unsigned int *)&v22[j]) = *(_DWORD *)((char *)v23 + j);
      v5 += 8;
      ++v3;
    }
    while ((v5 | 7) < a2);
  }
  v13 = a2 - v5;
  if (a2 > v5)
  {
    v14 = (int *)(a1 + 4 * v5);
    do
    {
      v16 = *v14++;
      v15 = v16;
      v17 = (-1640531535 * v16) >> 16;
      v18 = *(_DWORD *)(a3 + 4 * v17);
      if (v18)
        v19 = v15 == v18;
      else
        v19 = 1;
      v20 = !v19;
      v4 |= v20;
      *(_DWORD *)(a3 + 4 * v17) = v15;
      --v13;
    }
    while (v13);
  }
  return v4 & 1;
}

unint64_t sub_23689611C(unint64_t result, unsigned int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int **v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int **v34;
  float v35;
  unsigned int *v36;
  float v37;
  float v38;
  float v39;
  unsigned int *v40;
  unsigned int *j;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int **v52;
  int v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  unsigned int *v64;
  BOOL v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  char v73;
  unsigned int *v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int **v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  unsigned int *i;
  unsigned int **v86;
  unsigned int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t *v94;
  float v95;
  float v96;
  unsigned int v97;
  float v98;
  float v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  float v104;
  float v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int **v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  float v116;
  float v117;
  unsigned int *v118;
  unsigned int **v119;
  float v120;
  uint64_t v121;
  unsigned int v122;
  float v123;
  float v124;
  float v125;
  int64_t v126;
  unsigned int **v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  float v141;
  float v142;
  unsigned int **v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  int v148;
  float v149;
  float v150;
  unsigned int v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int **v158;
  unsigned int *v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  int v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  float v179;
  float v180;
  float v181;
  float v182;
  unsigned int *v183;
  unsigned int **v185;
  float v186;
  float v187;
  unint64_t v188;
  unsigned int v189;
  float v190;
  float v191;
  float v192;
  unsigned int *v193;
  unsigned int **v194;
  unsigned int *v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  float v200;
  float v201;
  float v202;
  unsigned int **v203;
  float v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  float v208;
  float v209;
  float v210;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v101 = *v10;
        if (*v10 & 0xFF000000 | (BYTE2(*v10) << 16) | (BYTE1(*v10) << 8) | *v10)
        {
          v102 = *v11;
          if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11)
            || ((v103 = *v11,
                 v104 = (float)((float)((float)((float)BYTE1(*v10) * 0.587)
                                      + (float)((float)*v10 * 0.299))
                              + (float)((float)BYTE2(*v10) * 0.114))
                      + 0.01,
                 **a3 != (unsigned int *)4)
              ? (v105 = (float)((float)((float)((float)BYTE1(v102) * 0.587) + (float)((float)v103 * 0.299))
                              + (float)((float)BYTE2(v102) * 0.114))
                      + 0.01)
              : (v104 = v104 * (float)HIBYTE(v101),
                 v105 = (float)((float)((float)((float)((float)BYTE1(v102) * 0.587) + (float)((float)v103 * 0.299))
                                      + (float)((float)BYTE2(v102) * 0.114))
                              + 0.01)
                      * (float)HIBYTE(v102)),
                v104 < v105))
          {
            *v11 = v101;
            *v10 = v102;
          }
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_23689D700(v11, v11 + 1, a2 - 1, *a3);
      case 4uLL:
        return (unint64_t)sub_23689DB8C(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5uLL:
        return (unint64_t)sub_23689DEE8(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v126 = (v13 - 2) >> 1;
              v127 = *a3;
              v128 = v126;
              do
              {
                v129 = v128;
                if (v126 >= v128)
                {
                  v130 = (2 * v128) | 1;
                  v131 = &v11[v130];
                  if (2 * v129 + 2 < (uint64_t)v13)
                  {
                    v132 = v131 + 1;
                    if (*v131 & 0xFF000000 | (BYTE2(*v131) << 16) | (BYTE1(*v131) << 8) | *v131)
                    {
                      v133 = *v132;
                      if (!(*v132 & 0xFF000000 | (BYTE2(*v132) << 16) | (BYTE1(*v132) << 8) | *v132)
                        || ((v134 = (float)((float)((float)((float)BYTE1(*v131) * 0.587)
                                                  + (float)((float)*v131 * 0.299))
                                          + (float)((float)BYTE2(*v131) * 0.114))
                                  + 0.01,
                             v135 = (float)*v132,
                             v136 = (float)BYTE1(v133),
                             *v127 != (unsigned int *)4)
                          ? (v137 = (float)((float)((float)(v136 * 0.587) + (float)(v135 * 0.299))
                                          + (float)((float)BYTE2(v133) * 0.114))
                                  + 0.01)
                          : (v134 = v134 * (float)HIBYTE(*v131),
                             v137 = (float)((float)((float)((float)(v136 * 0.587) + (float)(v135 * 0.299))
                                                  + (float)((float)BYTE2(v133) * 0.114))
                                          + 0.01)
                                  * (float)HIBYTE(v133)),
                            v134 < v137))
                      {
                        ++v131;
                        v130 = 2 * v129 + 2;
                      }
                    }
                  }
                  v138 = *v131;
                  v139 = v11[v129];
                  if (!(*v131 & 0xFF000000 | (BYTE2(*v131) << 16) | (BYTE1(*v131) << 8) | *v131)
                    || (result = v139 >> 8,
                        v11[v129] & 0xFF000000 | (BYTE2(v11[v129]) << 16) | (BYTE1(v11[v129]) << 8) | v11[v129])
                    && ((result = BYTE1(v139),
                         v140 = v11[v129],
                         v141 = (float)((float)((float)((float)BYTE1(*v131) * 0.587)
                                              + (float)((float)*v131 * 0.299))
                                      + (float)((float)BYTE2(*v131) * 0.114))
                              + 0.01,
                         *v127 != (unsigned int *)4)
                      ? (v142 = (float)((float)((float)((float)BYTE1(v139) * 0.587) + (float)((float)v140 * 0.299))
                                      + (float)((float)BYTE2(v139) * 0.114))
                              + 0.01)
                      : (v141 = v141 * (float)HIBYTE(v138),
                         v142 = (float)((float)((float)((float)((float)BYTE1(v139) * 0.587)
                                                      + (float)((float)v140 * 0.299))
                                              + (float)((float)BYTE2(v139) * 0.114))
                                      + 0.01)
                              * (float)HIBYTE(v139)),
                        v141 >= v142))
                  {
                    v11[v129] = v138;
                    if (v126 >= v130)
                    {
                      v143 = *a3;
                      while (1)
                      {
                        v144 = 2 * v130;
                        v130 = (2 * v130) | 1;
                        result = (unint64_t)&v11[v130];
                        v145 = v144 + 2;
                        if (v145 < (uint64_t)v13)
                        {
                          v146 = (unsigned int *)(result + 4);
                          if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                          {
                            v147 = *v146;
                            if (!(*v146 & 0xFF000000 | (BYTE2(*v146) << 16) | (BYTE1(*v146) << 8) | *v146)
                              || ((v148 = *v146,
                                   v149 = (float)((float)((float)((float)BYTE1(*(_DWORD *)result)
                                                                * 0.587)
                                                        + (float)((float)*(_DWORD *)result * 0.299))
                                                + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                        + 0.01,
                                   *v143 != (unsigned int *)4)
                                ? (v150 = (float)((float)((float)((float)BYTE1(v147) * 0.587)
                                                        + (float)((float)v148 * 0.299))
                                                + (float)((float)BYTE2(v147) * 0.114))
                                        + 0.01)
                                : (v149 = v149 * (float)HIBYTE(*(_DWORD *)result),
                                   v150 = (float)((float)((float)((float)((float)BYTE1(v147) * 0.587)
                                                                + (float)((float)v148 * 0.299))
                                                        + (float)((float)BYTE2(v147) * 0.114))
                                                + 0.01)
                                        * (float)HIBYTE(v147)),
                                  v149 < v150))
                            {
                              result += 4;
                              v130 = v145;
                            }
                          }
                        }
                        v151 = *(_DWORD *)result;
                        if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                        {
                          if (!(v139 & 0xFF000000 | (BYTE2(v139) << 16) | (BYTE1(v139) << 8) | v139))
                            break;
                          v152 = (float)HIBYTE(v151);
                          if (*v143 != (unsigned int *)4)
                            v152 = 1.0;
                          v153 = (float)((float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                       + (float)((float)*(_DWORD *)result * 0.299))
                                               + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                       + 0.01)
                               * v152;
                          v154 = *v143 == (unsigned int *)4 ? (float)HIBYTE(v139) : 1.0;
                          if (v153 < (float)((float)((float)((float)((float)((float)BYTE1(v139) * 0.587)
                                                                    + (float)((float)v139 * 0.299))
                                                            + (float)((float)BYTE2(v139) * 0.114))
                                                    + 0.01)
                                            * v154))
                            break;
                        }
                        *v131 = v151;
                        v131 = (unsigned int *)result;
                        if (v126 < v130)
                          goto LABEL_218;
                      }
                    }
                    result = (unint64_t)v131;
LABEL_218:
                    *(_DWORD *)result = v139;
                  }
                }
                v128 = v129 - 1;
              }
              while (v129);
              v155 = (unint64_t)v12 >> 2;
              do
              {
                v156 = 0;
                v157 = *v11;
                v158 = *a3;
                v159 = v11;
                do
                {
                  v160 = v159;
                  v159 += v156 + 1;
                  v161 = 2 * v156;
                  v156 = (2 * v156) | 1;
                  v162 = v161 + 2;
                  if (v162 < v155)
                  {
                    v163 = v159 + 1;
                    result = *v159 >> 8;
                    if (*v159 & 0xFF000000 | (BYTE2(*v159) << 16) | (BYTE1(*v159) << 8) | *v159)
                    {
                      result = *v163;
                      if (!(*v163 & 0xFF000000 | (BYTE2(*v163) << 16) | (BYTE1(*v163) << 8) | *v163)
                        || ((v164 = BYTE2(result),
                             v165 = (float)((float)((float)((float)BYTE1(*v159) * 0.587)
                                                  + (float)((float)*v159 * 0.299))
                                          + (float)((float)BYTE2(*v159) * 0.114))
                                  + 0.01,
                             v166 = (float)*v163,
                             v167 = (float)BYTE1(result),
                             *v158 != (unsigned int *)4)
                          ? (v168 = (float)((float)((float)(v167 * 0.587) + (float)(v166 * 0.299))
                                          + (float)((float)BYTE2(result) * 0.114))
                                  + 0.01)
                          : (result = BYTE3(result),
                             v165 = v165 * (float)HIBYTE(*v159),
                             v168 = (float)((float)((float)((float)(v167 * 0.587) + (float)(v166 * 0.299))
                                                  + (float)((float)v164 * 0.114))
                                          + 0.01)
                                  * (float)(int)result),
                            v165 < v168))
                      {
                        ++v159;
                        v156 = v162;
                      }
                    }
                  }
                  *v160 = *v159;
                }
                while (v156 <= (uint64_t)((unint64_t)(v155 - 2) >> 1));
                if (v159 == --a2)
                {
                  *v159 = v157;
                }
                else
                {
                  *v159 = *a2;
                  *a2 = v157;
                  v169 = (char *)v159 - (char *)v11 + 4;
                  if (v169 >= 5)
                  {
                    v170 = ((unint64_t)v169 >> 2) - 2;
                    v171 = v170 >> 1;
                    v172 = &v11[v170 >> 1];
                    v173 = *v172;
                    if (*v172 & 0xFF000000 | (BYTE2(*v172) << 16) | (BYTE1(*v172) << 8) | *v172)
                    {
                      v174 = *v159;
                      v175 = HIBYTE(*v159);
                      result = BYTE2(*v159);
                      v176 = BYTE1(*v159);
                      v177 = *v159;
                      v178 = *v159 & 0xFF000000 | (BYTE2(*v159) << 16) | (v176 << 8) | v177;
                      if (!v178
                        || ((v179 = (float)((float)((float)((float)BYTE1(*v172) * 0.587)
                                                  + (float)((float)*v172 * 0.299))
                                          + (float)((float)BYTE2(*v172) * 0.114))
                                  + 0.01,
                             v180 = (float)v177,
                             v181 = (float)v176,
                             *v158 != (unsigned int *)4)
                          ? (v182 = (float)((float)((float)(v181 * 0.587) + (float)(v180 * 0.299))
                                          + (float)((float)(int)result * 0.114))
                                  + 0.01)
                          : (v179 = v179 * (float)HIBYTE(v173),
                             v182 = (float)((float)((float)((float)(v181 * 0.587) + (float)(v180 * 0.299))
                                                  + (float)((float)(int)result * 0.114))
                                          + 0.01)
                                  * (float)v175),
                            v179 < v182))
                      {
                        *v159 = v173;
                        if (v170 >= 2)
                        {
                          v185 = *a3;
                          v186 = (float)((float)((float)((float)v176 * 0.587) + (float)((float)v177 * 0.299))
                                       + (float)((float)(int)result * 0.114))
                               + 0.01;
                          v187 = (float)v175;
                          while (1)
                          {
                            v188 = v171 - 1;
                            v171 = (v171 - 1) >> 1;
                            v183 = &v11[v171];
                            v189 = *v183;
                            result = HIWORD(*v183);
                            if (!(*v183 & 0xFF000000 | (BYTE2(*v183) << 16) | (BYTE1(*v183) << 8) | *v183))
                              break;
                            if (v178)
                            {
                              result = BYTE2(v189);
                              v190 = (float)HIBYTE(v189);
                              if (*v185 != (unsigned int *)4)
                                v190 = 1.0;
                              v191 = (float)((float)((float)((float)((float)BYTE1(*v183) * 0.587)
                                                           + (float)((float)*v183 * 0.299))
                                                   + (float)((float)BYTE2(*v183) * 0.114))
                                           + 0.01)
                                   * v190;
                              v192 = *v185 == (unsigned int *)4 ? v187 : 1.0;
                              if (v191 >= (float)(v186 * v192))
                                break;
                            }
                            *v172 = v189;
                            v172 = &v11[v171];
                            if (v188 <= 1)
                              goto LABEL_242;
                          }
                        }
                        v183 = v172;
LABEL_242:
                        *v183 = v174;
                      }
                    }
                  }
                }
              }
              while (v155-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v11[v13 >> 1];
          v16 = *a3;
          if ((unint64_t)v12 < 0x201)
          {
            result = (unint64_t)sub_23689D700(&v9[v13 >> 1], v9, a2 - 1, v16);
          }
          else
          {
            sub_23689D700(v9, &v9[v13 >> 1], a2 - 1, v16);
            sub_23689D700(v9 + 1, v15 - 1, a2 - 2, *a3);
            sub_23689D700(v9 + 2, &v9[v14 + 1], a2 - 3, *a3);
            result = (unint64_t)sub_23689D700(v15 - 1, v15, &v9[v14 + 1], *a3);
            v17 = *v9;
            *v9 = *v15;
            *v15 = v17;
          }
          v18 = *v9;
          v19 = HIBYTE(*v9);
          --a4;
          if ((a5 & 1) == 0)
          {
            v20 = *(v9 - 1);
            v21 = *v9;
            v22 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(*v9) << 8) | v21;
            if (v20 & 0xFF000000 | (BYTE2(v20) << 16) | (BYTE1(v20) << 8) | v20)
            {
              if (!v22)
                goto LABEL_16;
              result = v20;
              v23 = (unint64_t *)*a3;
              v24 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                          + (float)((float)BYTE2(v20) * 0.114))
                  + 0.01;
              v25 = (float)v21;
              v26 = (float)BYTE1(v18);
              if (**a3 == (unsigned int *)4)
              {
                v24 = v24 * (float)HIBYTE(v20);
                v27 = (float)((float)((float)((float)(v26 * 0.587) + (float)(v25 * 0.299))
                                    + (float)((float)BYTE2(v18) * 0.114))
                            + 0.01)
                    * (float)v19;
              }
              else
              {
                v27 = (float)((float)((float)(v26 * 0.587) + (float)(v25 * 0.299)) + (float)((float)BYTE2(v18) * 0.114))
                    + 0.01;
              }
              if (v24 < v27)
                goto LABEL_16;
            }
            else
            {
              if (!v22)
              {
                v73 = 1;
                goto LABEL_97;
              }
              v23 = (unint64_t *)*a3;
            }
            v66 = *v10;
            v67 = (float)BYTE1(v18);
            if (!(*v10 & 0xFF000000 | (BYTE2(*v10) << 16) | (BYTE1(*v10) << 8) | *v10))
            {
              v68 = (float)((float)((float)(v67 * 0.587) + (float)((float)v21 * 0.299))
                          + (float)((float)BYTE2(v18) * 0.114))
                  + 0.01;
LABEL_87:
              v74 = v9 + 1;
              do
              {
                v11 = v74;
                v75 = *v74;
                if (!(v75 & 0xFF000000 | (BYTE2(v75) << 16) | (BYTE1(v75) << 8) | v75))
                  break;
                v76 = (float)HIBYTE(v75);
                if (*v23 == 4)
                  v77 = (float)v19;
                else
                  v77 = 1.0;
                v78 = v68 * v77;
                if (*v23 != 4)
                  v76 = 1.0;
                v79 = (float)((float)((float)((float)((float)BYTE1(v75) * 0.587)
                                            + (float)((float)v75 * 0.299))
                                    + (float)((float)BYTE2(v75) * 0.114))
                            + 0.01)
                    * v76;
                v74 = v11 + 1;
              }
              while (v78 >= v79);
LABEL_95:
              v73 = 0;
              goto LABEL_108;
            }
            result = *v23;
            v68 = (float)((float)((float)(v67 * 0.587) + (float)((float)v21 * 0.299))
                        + (float)((float)BYTE2(v18) * 0.114))
                + 0.01;
            v69 = (float)*v10;
            v70 = (float)BYTE1(v66);
            if (*v23 == 4)
            {
              v71 = v68 * (float)v19;
              v72 = (float)((float)((float)((float)(v70 * 0.587) + (float)(v69 * 0.299))
                                  + (float)((float)BYTE2(v66) * 0.114))
                          + 0.01)
                  * (float)HIBYTE(v66);
            }
            else
            {
              v72 = (float)((float)((float)(v70 * 0.587) + (float)(v69 * 0.299)) + (float)((float)BYTE2(v66) * 0.114))
                  + 0.01;
              v71 = v68;
            }
            if (v71 < v72)
              goto LABEL_87;
            v73 = 0;
LABEL_97:
            v11 = v9 + 1;
            if (v9 + 1 < a2)
            {
              v80 = *a3;
              do
              {
                if ((v73 & 1) == 0)
                {
                  v81 = *v11;
                  result = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11;
                  if (!(_DWORD)result)
                    goto LABEL_95;
                  result = *v11;
                  v82 = (float)HIBYTE(v81);
                  if (*v80 == (unsigned int *)4)
                    v83 = (float)v19;
                  else
                    v83 = 1.0;
                  v84 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                      + (float)((float)BYTE2(v18) * 0.114))
                              + 0.01)
                      * v83;
                  if (*v80 != (unsigned int *)4)
                    v82 = 1.0;
                  if (v84 < (float)((float)((float)((float)((float)((float)BYTE1(v81) * 0.587)
                                                           + (float)((float)(int)result * 0.299))
                                                   + (float)((float)BYTE2(v81) * 0.114))
                                           + 0.01)
                                   * v82))
                    goto LABEL_95;
                }
                ++v11;
              }
              while (v11 < a2);
            }
LABEL_108:
            if (v11 < a2)
              i = a2 - 1;
            else
              i = a2;
            if (v11 < a2 && (v73 & 1) == 0)
            {
              v86 = *a3;
              for (i = a2 - 1; ; --i)
              {
                v87 = *i;
                if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
                {
                  result = BYTE1(v87);
                  v88 = (float)HIBYTE(v87);
                  if (*v86 == (unsigned int *)4)
                    v89 = (float)v19;
                  else
                    v89 = 1.0;
                  v90 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                      + (float)((float)BYTE2(v18) * 0.114))
                              + 0.01)
                      * v89;
                  if (*v86 != (unsigned int *)4)
                    v88 = 1.0;
                  if (v90 >= (float)((float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                                            + (float)((float)*i * 0.299))
                                                    + (float)((float)BYTE2(*i) * 0.114))
                                            + 0.01)
                                    * v88))
                    break;
                }
              }
            }
            if (v11 < i)
            {
              v91 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                  + (float)((float)BYTE2(v18) * 0.114))
                          + 0.01)
                  * (float)v19;
              v92 = *v11;
              v93 = *i;
              do
              {
                *v11++ = v93;
                *i = v92;
                v94 = (unint64_t *)*a3;
                if ((v73 & 1) != 0)
                  goto LABEL_132;
                while (1)
                {
                  v92 = *v11;
                  if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11))
                    break;
                  v95 = (float)HIBYTE(v92);
                  if (*v94 == 4)
                    v96 = v91;
                  else
                    v96 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                  if (*v94 != 4)
                    v95 = 1.0;
                  if (v96 < (float)((float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                                           + (float)((float)*v11 * 0.299))
                                                   + (float)((float)BYTE2(*v11) * 0.114))
                                           + 0.01)
                                   * v95))
                    break;
                  do
LABEL_132:
                    ++v11;
                  while ((v73 & 1) != 0);
                }
                do
                {
                  do
                  {
                    v97 = *--i;
                    v93 = v97;
                  }
                  while (!(v97 & 0xFF000000 | (BYTE2(v97) << 16) | (BYTE1(v97) << 8) | v97));
                  result = *v94;
                  v98 = (float)HIBYTE(v93);
                  if (*v94 == 4)
                    v99 = v91;
                  else
                    v99 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                  if (*v94 != 4)
                    v98 = 1.0;
                }
                while (v99 < (float)((float)((float)((float)((float)((float)BYTE1(v93) * 0.587)
                                                            + (float)((float)v93 * 0.299))
                                                    + (float)((float)BYTE2(v93) * 0.114))
                                            + 0.01)
                                    * v98));
              }
              while (v11 < i);
            }
            v100 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v100;
            a5 = 0;
            *v100 = v18;
            continue;
          }
LABEL_16:
          v29 = v9 + 1;
          v28 = v9[1];
          if (!(v28 & 0xFF000000 | (BYTE2(v28) << 16) | (BYTE1(v28) << 8) | v28))
            goto LABEL_38;
          v30 = BYTE2(v28);
          v31 = BYTE1(v28);
          v32 = v28;
          v33 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9;
          v34 = *a3;
          v35 = (float)((float)((float)((float)BYTE1(*v9) * 0.587)
                              + (float)((float)*v9 * 0.299))
                      + (float)((float)BYTE2(*v9) * 0.114))
              + 0.01;
          while (1)
          {
            v36 = v29;
            if (v33)
            {
              v37 = (float)HIBYTE(v28);
              if (*v34 != (unsigned int *)4)
                v37 = 1.0;
              v38 = (float)((float)((float)((float)((float)v31 * 0.587) + (float)((float)v32 * 0.299))
                                  + (float)((float)v30 * 0.114))
                          + 0.01)
                  * v37;
              v39 = *v34 == (unsigned int *)4 ? (float)v19 : 1.0;
              if (v38 >= (float)(v35 * v39))
                break;
            }
            ++v29;
            v28 = v36[1];
            v30 = BYTE2(v28);
            v31 = BYTE1(v28);
            v32 = v28;
            v40 = v36;
            if (!(v28 & 0xFF000000 | (BYTE2(v28) << 16) | (BYTE1(v28) << 8) | v28))
              goto LABEL_28;
          }
          v40 = v29 - 1;
LABEL_28:
          j = a2 - 1;
          if (v40 == v9)
          {
LABEL_38:
            if (v29 < a2)
            {
              for (j = a2 - 1; ; --j)
              {
                if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
                {
                  if (!(*v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9))
                    goto LABEL_51;
                  v45 = (float)HIBYTE(*j);
                  if (**a3 == (unsigned int *)4)
                  {
                    v46 = (float)v19;
                  }
                  else
                  {
                    v45 = 1.0;
                    v46 = 1.0;
                  }
                  if (v29 >= j
                    || (float)((float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                                     + (float)((float)*j * 0.299))
                                             + (float)((float)BYTE2(*j) * 0.114))
                                     + 0.01)
                             * v45) < (float)((float)((float)((float)((float)((float)BYTE1(*v9) * 0.587)
                                                                    + (float)((float)*v9 * 0.299))
                                                            + (float)((float)BYTE2(*v9) * 0.114))
                                                    + 0.01)
                                            * v46))
                  {
                    goto LABEL_51;
                  }
                }
                else if (v29 >= j)
                {
                  goto LABEL_51;
                }
              }
            }
            j = a2;
          }
          else
          {
            while (1)
            {
              if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
              {
                if (!v33)
                  break;
                v42 = (float)HIBYTE(*j);
                if (*v34 != (unsigned int *)4)
                  v42 = 1.0;
                v43 = (float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                            + (float)((float)*j * 0.299))
                                    + (float)((float)BYTE2(*j) * 0.114))
                            + 0.01)
                    * v42;
                v44 = *v34 == (unsigned int *)4 ? (float)v19 : 1.0;
                if (v43 < (float)(v35 * v44))
                  break;
              }
              --j;
            }
          }
LABEL_51:
          v11 = v29;
          if (v29 < j)
          {
            v47 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9;
            v48 = (float)((float)((float)((float)((float)BYTE1(*v9) * 0.587)
                                        + (float)((float)*v9 * 0.299))
                                + (float)((float)BYTE2(*v9) * 0.114))
                        + 0.01)
                * (float)v19;
            v49 = *j;
            v11 = v29;
            v50 = j;
            do
            {
              *v11 = v49;
              *v50 = v28;
              v51 = v11[1];
              ++v11;
              v28 = v51;
              v52 = *a3;
              if (v51 & 0xFF000000 | (BYTE2(v51) << 16) | (BYTE1(v51) << 8) | v51)
              {
                v53 = BYTE2(v28);
                v54 = BYTE1(v28);
                v55 = v28;
                do
                {
                  if (v47)
                  {
                    v56 = (float)HIBYTE(v28);
                    if (*v52 != (unsigned int *)4)
                      v56 = 1.0;
                    v57 = (float)((float)((float)((float)((float)v54 * 0.587) + (float)((float)v55 * 0.299))
                                        + (float)((float)v53 * 0.114))
                                + 0.01)
                        * v56;
                    v58 = *v52 == (unsigned int *)4
                        ? v48
                        : (float)((float)((float)((float)BYTE1(v18) * 0.587)
                                        + (float)((float)v18 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                    if (v57 >= v58)
                      break;
                  }
                  v59 = v11[1];
                  ++v11;
                  v28 = v59;
                  v53 = BYTE2(v59);
                  v54 = BYTE1(v59);
                  v55 = v59;
                }
                while (v59 & 0xFF000000 | (BYTE2(v59) << 16) | (BYTE1(v59) << 8) | v59);
              }
              do
              {
                do
                {
                  v60 = *--v50;
                  v49 = v60;
                }
                while (!(v60 & 0xFF000000 | (BYTE2(v60) << 16) | (BYTE1(v60) << 8) | v60));
                if (!v47)
                  break;
                v61 = (float)HIBYTE(v49);
                if (*v52 != (unsigned int *)4)
                  v61 = 1.0;
                v62 = (float)((float)((float)((float)((float)BYTE1(v49) * 0.587)
                                            + (float)((float)v49 * 0.299))
                                    + (float)((float)BYTE2(v49) * 0.114))
                            + 0.01)
                    * v61;
                v63 = *v52 == (unsigned int *)4
                    ? v48
                    : (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v18 * 0.299))
                            + (float)((float)BYTE2(v18) * 0.114))
                    + 0.01;
              }
              while (v62 >= v63);
            }
            while (v11 < v50);
          }
          v64 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v64;
          *v64 = v18;
          if (v29 < j)
            goto LABEL_77;
          v65 = sub_2368A05C8(v9, v11 - 1, a3);
          result = sub_2368A05C8(v11, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              continue;
LABEL_77:
            result = sub_23689611C(v9, v11 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v11 - 1;
          if (v65)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if (v11 == a2)
            return result;
          v193 = v11 + 1;
          if (v11 + 1 == a2)
            return result;
          v194 = *a3;
          while (1)
          {
            v195 = v9;
            v9 = v193;
            v196 = v195[1];
            if (v196 & 0xFF000000 | (BYTE2(v196) << 16) | (BYTE1(v196) << 8) | v196)
            {
              v197 = HIBYTE(v196);
              v198 = v195[1];
              v199 = *v195;
              if (!(*v195 & 0xFF000000 | (BYTE2(*v195) << 16) | (BYTE1(*v195) << 8) | *v195))
              {
                v200 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                             + (float)((float)BYTE2(v196) * 0.114))
                     + 0.01;
LABEL_267:
                v203 = *a3;
                v204 = (float)v197;
                do
                {
                  do
                  {
                    v205 = v195;
                    v206 = v199;
                    v207 = *--v195;
                    v199 = v207;
                    v195[2] = v206;
                  }
                  while (!(v207 & 0xFF000000 | (BYTE2(v207) << 16) | (BYTE1(v207) << 8) | v207));
                  result = (unint64_t)*v203;
                  v208 = (float)HIBYTE(v199);
                  if (*v203 == (unsigned int *)4)
                    v209 = v204;
                  else
                    v209 = 1.0;
                  v210 = v200 * v209;
                  if (*v203 != (unsigned int *)4)
                    v208 = 1.0;
                }
                while (v210 < (float)((float)((float)((float)((float)((float)BYTE1(v199) * 0.587)
                                                             + (float)((float)v199 * 0.299))
                                                     + (float)((float)BYTE2(v199) * 0.114))
                                             + 0.01)
                                     * v208));
                *v205 = v196;
                goto LABEL_276;
              }
              result = *v195;
              v200 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                           + (float)((float)BYTE2(v196) * 0.114))
                   + 0.01;
              if (*v194 == (unsigned int *)4)
              {
                v201 = v200 * (float)v197;
                v202 = (float)((float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)(int)result * 0.299))
                                     + (float)((float)BYTE2(v199) * 0.114))
                             + 0.01)
                     * (float)HIBYTE(v199);
              }
              else
              {
                v202 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)(int)result * 0.299))
                             + (float)((float)BYTE2(v199) * 0.114))
                     + 0.01;
                v201 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                             + (float)((float)BYTE2(v196) * 0.114))
                     + 0.01;
              }
              if (v201 < v202)
                goto LABEL_267;
            }
LABEL_276:
            v193 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
        }
        if (v11 != a2)
        {
          v106 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v107 = 0;
            v108 = *a3;
            v109 = v11;
            do
            {
              v110 = v109;
              v109 = v106;
              v111 = v110[1];
              if (v111 & 0xFF000000 | (BYTE2(v111) << 16) | (BYTE1(v111) << 8) | v111)
              {
                v112 = HIBYTE(v111);
                v113 = v110[1];
                v114 = *v110;
                result = HIWORD(*v110);
                if (!(*v110 & 0xFF000000 | (BYTE2(*v110) << 16) | (BYTE1(*v110) << 8) | *v110)
                  || ((result = BYTE2(v114),
                       v115 = *v110,
                       v116 = (float)((float)((float)((float)BYTE1(v111) * 0.587) + (float)((float)v113 * 0.299))
                                    + (float)((float)BYTE2(v111) * 0.114))
                            + 0.01,
                       *v108 != (unsigned int *)4)
                    ? (v117 = (float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v115 * 0.299))
                                    + (float)((float)BYTE2(v114) * 0.114))
                            + 0.01)
                    : (v116 = v116 * (float)v112,
                       v117 = (float)((float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v115 * 0.299))
                                            + (float)((float)BYTE2(v114) * 0.114))
                                    + 0.01)
                            * (float)HIBYTE(v114)),
                      v116 < v117))
                {
                  v110[1] = v114;
                  v118 = v11;
                  if (v110 != v11)
                  {
                    v119 = *a3;
                    v120 = (float)v112;
                    v121 = v107;
                    while (1)
                    {
                      v122 = *(unsigned int *)((char *)v11 + v121 - 4);
                      result = v122 & 0xFF000000 | (BYTE2(v122) << 16) | (BYTE1(v122) << 8) | v122;
                      if ((_DWORD)result)
                      {
                        result = *(unsigned int *)((char *)v11 + v121 - 4);
                        v123 = (float)HIBYTE(v122);
                        if (*v119 == (unsigned int *)4)
                          v124 = v120;
                        else
                          v124 = 1.0;
                        v125 = (float)((float)((float)((float)((float)BYTE1(v111) * 0.587) + (float)((float)v113 * 0.299))
                                             + (float)((float)BYTE2(v111) * 0.114))
                                     + 0.01)
                             * v124;
                        if (*v119 != (unsigned int *)4)
                          v123 = 1.0;
                        if (v125 >= (float)((float)((float)((float)((float)((float)BYTE1(v122) * 0.587)
                                                                   + (float)((float)(int)result * 0.299))
                                                           + (float)((float)BYTE2(v122) * 0.114))
                                                   + 0.01)
                                           * v123))
                          break;
                      }
                      *(unsigned int *)((char *)v11 + v121) = v122;
                      v121 -= 4;
                      if (!v121)
                      {
                        v118 = v11;
                        goto LABEL_178;
                      }
                    }
                    v118 = (unsigned int *)((char *)v11 + v121);
                  }
LABEL_178:
                  *v118 = v111;
                }
              }
              v106 = v109 + 1;
              v107 += 4;
            }
            while (v109 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t sub_236897824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t i;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t k;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint16x8_t *v39;
  _OWORD *v40;
  _OWORD *v41;
  int16x8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint16x8_t *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  const char *v50;
  uint16x8_t *v51;
  uint16x8_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t j;
  _WORD *v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v66;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *__p;
  void *v78;
  uint64_t v79;
  uint64_t *v80[8];
  _BYTE v81[64];
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int8x8x2_t v86;

  v85 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(**(_QWORD **)a1 - (a3 << 8)) >= 0x100)
    v7 = 256;
  else
    v7 = **(_QWORD **)a1 - (a3 << 8);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)(*v6 - (a2 << 8)) >= 0x100)
    v8 = 256;
  else
    v8 = *v6 - (a2 << 8);
  v76 = 0;
  v74 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16), a2 << 8, a3 << 8, v8, v7, &v76);
  v9 = (v7 - a4) & ~((v7 - a4) >> 63);
  v10 = (int)(v9 >> 1);
  v11 = v7 - ((unint64_t)v9 >> 1);
  if (v11 >= (int)a4)
    v11 = a4;
  v12 = v8 & 0x1F0;
  v13 = v76;
  v72 = v10;
  v73 = v11;
  v15 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v16 = **(_QWORD **)(a1 + 64);
  if (**(_BYTE **)(a1 + 48))
  {
    for (i = 1; i != 9; i += 2)
      v80[i] = 0;
    if (v16)
    {
      v18 = (uint64_t *)v81;
      v19 = v80;
      v20 = v16;
      do
      {
        *v19 = v18;
        v19 += 2;
        *v18 = v15;
        v18[1] = v14;
        v18 += 2;
        v14 += 264;
        v15 += 152;
        --v20;
      }
      while (v20);
      sub_23689E738(&__p, v16);
    }
    else
    {
      __p = 0;
      v78 = 0;
      v79 = 0;
    }
    if ((_DWORD)v73 != -1)
    {
      v29 = 0;
      v30 = (const char *)(v74 + v13 * v72);
      v70 = -(uint64_t)(v8 & 0xFFFFFFFFFFFFFFF0);
      v71 = v13;
      v31 = 1;
      while (1)
      {
        v83 = 0u;
        v84 = 0u;
        v32 = (const char *)(v74 + (v29 + v72) * v13);
        memset(v82, 0, sizeof(v82));
        v75 = v31;
        if (!v16)
          break;
        v33 = 0;
        v34 = 0;
        v35 = (char *)__p + 704 * (v31 & 1) + 64;
        v36 = (char *)__p + 704 * (v29 & 1) + 64;
        v37 = v36;
        v38 = v35;
        do
        {
          *((_QWORD *)&v83 + v34) = &v36[v33 + (v37 & 0x3E)];
          *((_QWORD *)v82 + v34++) = &v35[v33 + (v38 & 0x3E)];
          v38 += 1408;
          v33 += 1408;
          v37 += 1408;
        }
        while (v16 != v34);
        switch(v16)
        {
          case 1uLL:
            v43 = v83;
            if (v12)
            {
              v44 = 0;
              v45 = (uint16x8_t *)v83;
              do
              {
                *v45++ = vmovl_u8(*(uint8x8_t *)&v30[v44]);
                v46 = v44 + 8;
                v47 = v44 + 16;
                v44 += 8;
              }
              while (v47 <= v12);
            }
            else
            {
              v46 = 0;
            }
            if (v46 < v12)
            {
              do
              {
                *(_WORD *)(v43 + 2 * v46) = v30[v46];
                ++v46;
              }
              while (v12 != v46);
            }
            break;
          case 2uLL:
            v48 = v83;
            if (v12)
            {
              v49 = 0;
              v50 = v30;
              v52 = (uint16x8_t *)*((_QWORD *)&v83 + 1);
              v51 = (uint16x8_t *)v83;
              do
              {
                v86 = vld2_s8(v50);
                v50 += 16;
                *v51++ = vmovl_u8((uint8x8_t)v86.val[0]);
                *v52++ = vmovl_u8((uint8x8_t)v86.val[1]);
                v53 = v49 + 8;
                v54 = v49 + 16;
                v49 += 8;
              }
              while (v54 <= v12);
            }
            else
            {
              v53 = 0;
            }
            if (v53 < v12)
            {
              v66 = v70 + v53;
              v67 = 2 * v53;
              do
              {
                *(_WORD *)(v48 + v67) = v30[v67];
                *(_WORD *)(*((_QWORD *)&v48 + 1) + v67) = v30[v67 + 1];
                v67 += 2;
              }
              while (!__CFADD__(v66++, 1));
            }
            break;
          case 3uLL:
            sub_2368A0444(v32, v12, (int16x8_t *)v83, *((_OWORD **)&v83 + 1), (_OWORD *)v84);
LABEL_44:
            for (j = 0; j != v16; ++j)
            {
              while (!v29)
              {
                *(_WORD *)(*((_QWORD *)&v83 + j) - 2) = 0;
                *(_WORD *)(*((_QWORD *)v82 + j++) - 2) = 0;
                if (j == v16)
                  goto LABEL_51;
              }
              v56 = (_WORD *)*((_QWORD *)v82 + j);
              *(_WORD *)(*((_QWORD *)&v83 + j) - 2) = *v56;
              *(v56 - 1) = *v56;
            }
            v57 = v80;
            v58 = (uint64_t *)v82;
            v59 = (uint64_t *)&v83;
            v60 = v16;
            do
            {
              v62 = *v59++;
              v61 = v62;
              v63 = v62 - 2;
              v64 = *v58++;
              sub_23689D4AC(v57, v61, v63, v64, v64 - 2, v12);
              v57 += 2;
              --v60;
            }
            while (v60);
            goto LABEL_51;
          default:
            v41 = (_OWORD *)*((_QWORD *)&v83 + 1);
            v42 = (int16x8_t *)v83;
            v39 = (uint16x8_t *)*((_QWORD *)&v84 + 1);
            v40 = (_OWORD *)v84;
            goto LABEL_42;
        }
LABEL_43:
        if (v16)
          goto LABEL_44;
LABEL_51:
        v31 = v75 + 1;
        v13 = v71;
        v30 += v71;
        if (v29++ == v73)
          goto LABEL_64;
      }
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
LABEL_42:
      sub_2368A04FC(v32, v12, v42, v41, v40, v39);
      goto LABEL_43;
    }
LABEL_64:
    if (__p)
    {
      v78 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v21 = **(unsigned __int8 **)(a1 + 40);
    v22 = **(_QWORD **)(a1 + 80);
    for (k = 1; k != 9; k += 2)
      v80[k] = 0;
    if (v16)
    {
      v24 = v15 + 152 * v21;
      v25 = v14 + 264 * v21;
      v26 = (uint64_t *)v81;
      v27 = v80;
      v28 = v16;
      do
      {
        *v27 = v26;
        v27 += 2;
        *v26 = v24;
        v26[1] = v25;
        v26 += 2;
        --v28;
      }
      while (v28);
    }
    sub_23689CBCC(v74, v72, v8 & 0x1F0, v73 + 1, v13, v22, v16, v80);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(**(_QWORD **)(a1 + 16), v74);
}

void sub_236897CDC(_QWORD *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD v80[3];
  int v81;
  __int128 v82;
  __int128 v83;
  char v84;
  _BYTE v85[33];
  _BYTE v86[33];
  _QWORD v87[35];

  v6 = a2;
  v7 = a1;
  v87[33] = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  if (!a2)
  {
    v13 = 0;
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
LABEL_18:
    v26 = -254;
    v25 = 1;
    goto LABEL_19;
  }
  v9 = a1;
  v10 = a2;
  do
  {
    v12 = *v9++;
    v11 = v12;
    if (v12)
    {
      v87[v8] = v11;
      v86[v8] = *a3;
      v85[v8++] = *a4;
    }
    ++a4;
    ++a3;
    --v10;
  }
  while (v10);
  v84 = 0;
  v82 = 0u;
  v83 = 0u;
  v13 = 0;
  if (!v8)
    goto LABEL_18;
  v14 = 0;
  v15 = v85;
  v16 = v86;
  v17 = v87;
  v18 = 255;
  v19 = v8;
  do
  {
    v21 = *v17++;
    v20 = v21;
    if (*v16 <= 1u)
      v22 = 1;
    else
      v22 = *v16;
    *v16++ = v22;
    v24 = *v15++;
    v23 = v24;
    v13 += v20;
    if (v14 <= v24)
      v14 = v23;
    if (v18 >= v22)
      v18 = v22;
    --v19;
  }
  while (v19);
  v25 = 0;
  v26 = v14 - v18 + 1;
LABEL_19:
  v27 = v26 * v13;
  if ((unint64_t)(v26 * v13) >= 0x7FFFFFFF)
  {
    v31 = (1 << v26);
    v32 = (v31 + 1);
    v33 = (v8 + 1) * v32;
    if (v33 >> 61)
      sub_2367C3440();
    v30 = sub_2367CA1FC((v8 + 1) * v32);
    v34 = 0;
    do
      v30[v34++] = v27;
    while (v33 != v34);
    *v30 = 0;
    if ((v25 & 1) == 0)
    {
      v60 = 0;
      v61 = 8 * (int)v32;
      do
      {
        v62 = v86[v60];
        v63 = v85[v60];
        if (v62 <= v63)
        {
          v64 = v60 + 1;
          do
          {
            v65 = (1 << (v26 - v62));
            if (v65 <= v31)
            {
              v66 = v32 - v65;
              v67 = v87[v60] * v62;
              v68 = (_QWORD *)((char *)&v30[v65] + v61 * (v60 + 1));
              v69 = (_QWORD *)((char *)v30 + v61 * v60);
              do
              {
                v70 = *v69++;
                v71 = v67 + v70;
                if (*v68 < (unint64_t)(v67 + v70))
                  v71 = *v68;
                *v68++ = v71;
                --v66;
              }
              while (v66);
            }
            v50 = v62++ == v63;
          }
          while (!v50);
        }
        else
        {
          v64 = v60 + 1;
        }
        v60 = v64;
      }
      while (v64 != v8);
      do
      {
        while (1)
        {
          v72 = v8--;
          v73 = v86[v8];
          v74 = v85[v8];
          if (v73 <= v74)
            break;
LABEL_72:
          if (!v8)
            goto LABEL_26;
        }
        v75 = v31 + v72 * (int)v32;
        v76 = v74 + 1;
        v77 = v26 - v73;
        while (1)
        {
          v78 = (1 << v77);
          v58 = v31 >= v78;
          v79 = v31 - v78;
          if (v58 && v30[v75] == v30[v79 + v8 * (int)v32] + v87[v8] * v73)
            break;
          ++v73;
          --v77;
          if (v76 == v73)
            goto LABEL_72;
        }
        *((_BYTE *)&v82 + v8) = v73;
        v31 = v79;
      }
      while (v8);
    }
  }
  else
  {
    v81 = v26 * v13;
    v28 = (1 << v26);
    v29 = (v28 + 1);
    sub_236818A38(v80, v29 + v29 * v8, &v81);
    v30 = (_QWORD *)v80[0];
    *(_DWORD *)v80[0] = 0;
    if ((v25 & 1) == 0)
    {
      v38 = 0;
      v39 = 4 * (int)v29;
      do
      {
        v40 = v86[v38];
        v41 = v85[v38];
        if (v40 <= v41)
        {
          v42 = v38 + 1;
          do
          {
            v43 = (1 << (v26 - v40));
            if (v43 <= v28)
            {
              v44 = v40 * LODWORD(v87[v38]);
              v45 = v29 - v43;
              v46 = (int *)((char *)v30 + 4 * v43 + v39 * (v38 + 1));
              v47 = (int *)((char *)v30 + v39 * v38);
              do
              {
                v48 = *v47++;
                v49 = v48 + v44;
                if (*v46 < (v48 + v44))
                  v49 = *v46;
                *v46++ = v49;
                --v45;
              }
              while (v45);
            }
            v50 = v40++ == v41;
          }
          while (!v50);
        }
        else
        {
          v42 = v38 + 1;
        }
        v38 = v42;
      }
      while (v42 != v8);
      do
      {
        while (1)
        {
          v51 = v8--;
          v52 = v86[v8];
          v53 = v85[v8];
          if (v52 <= v53)
            break;
LABEL_50:
          if (!v8)
            goto LABEL_21;
        }
        v54 = v28 + v51 * (int)v29;
        v55 = v53 + 1;
        v56 = v26 - v52;
        while (1)
        {
          v57 = (1 << v56);
          v58 = v28 >= v57;
          v59 = v28 - v57;
          if (v58 && *((unsigned int *)v30 + v59 + v8 * (int)v29) + v87[v8] * v52 == *((_DWORD *)v30 + v54))
            break;
          ++v52;
          --v56;
          if (v55 == v52)
            goto LABEL_50;
        }
        *((_BYTE *)&v82 + v8) = v52;
        v28 = v59;
      }
      while (v8);
    }
LABEL_21:
    v80[1] = v30;
  }
LABEL_26:
  operator delete(v30);
  if (v6)
  {
    v35 = 0;
    do
    {
      *a5 = 0;
      if (*v7++)
      {
        v37 = *((_BYTE *)&v82 + v35++);
        *a5 = v37;
      }
      ++a5;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_23689814C(unsigned __int8 *a1, _BYTE *a2, uint64_t a3, unsigned __int8 *a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  _OWORD v24[2];
  _QWORD v25[3];

  v6 = a6;
  v8 = a4;
  v9 = a3;
  v11 = a1;
  v25[2] = *MEMORY[0x24BDAC8D0];
  v25[0] = 0;
  v25[1] = 0;
  v12 = a4;
  v13 = a6;
  if (a3)
  {
    v14 = a1;
    v15 = a3;
    do
    {
      v16 = *v14++;
      ++*((_BYTE *)v25 + v16);
      --v15;
    }
    while (v15);
    v12 = a4;
    v13 = a6;
  }
  do
  {
    v17 = *v12++;
    ++*((_BYTE *)v25 + v17);
    --v13;
  }
  while (v13);
  v18 = 0;
  memset(v24, 0, sizeof(v24));
  do
  {
    LOWORD(v13) = 2 * ((v13 & 0xFFFE) + *((unsigned __int8 *)v25 + v18));
    *((_WORD *)v24 + ++v18) = v13;
  }
  while (v18 != 15);
  if (a3)
  {
    do
    {
      v19 = *v11++;
      v20 = *((unsigned __int16 *)v24 + v19);
      *((_WORD *)v24 + v19) = v20 + 1;
      *a2++ = sub_2368A03F8(v19, v20);
      --v9;
    }
    while (v9);
  }
  do
  {
    v21 = *v8++;
    v22 = *((unsigned __int16 *)v24 + v21);
    *((_WORD *)v24 + v21) = v22 + 1;
    result = sub_2368A03F8(v21, v22);
    *a5++ = result;
    --v6;
  }
  while (v6);
  return result;
}

_QWORD *sub_2368982A0(_QWORD *a1, unint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL)
      sub_2367C3440();
    v4 = operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[10 * a2];
    a1[2] = v5;
    v6 = MEMORY[0x24BDAE450];
    do
    {
      v7 = 0;
      v4[8] = 0uLL;
      v4[9] = 0uLL;
      v4[6] = 0uLL;
      v4[7] = 0uLL;
      v4[4] = 0uLL;
      v4[5] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      *v4 = 0uLL;
      v4[1] = 0uLL;
      do
      {
        v8 = (_QWORD *)((char *)v4 + v7);
        *v8 = 0;
        v8[1] = v6;
        v8[3] = 0;
        v8[4] = 0;
        v7 += 40;
        v8[2] = 0;
      }
      while (v7 != 160);
      v4 += 10;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_236898368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2368931B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_23689837C(int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  char v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v8 = a1;
  result = (uint64_t *)sub_23689F114(a1, a2, a3, a5, a6);
  v10 = *a6;
  v11 = a6[2];
  v12 = a6[3];
  if (a4 < 3)
  {
    v29 = a6[4];
    a6[3] = v12 + 2;
    *(_QWORD *)(v10 + v11) = v29;
  }
  else
  {
    v13 = a6[4] | (1 << v12);
    a6[3] = v12 + 2;
    a6[4] = v13;
    *(_QWORD *)(v10 + v11) = v13;
    v14 = a6[3];
    v15 = v14 & 7;
    v16 = (unint64_t)a6[4] >> (v14 & 0xF8);
    v17 = a6[2] + (v14 >> 3);
    v18 = *a6;
    a6[2] = v17;
    a6[3] = v15 + 2;
    a6[4] = v16;
    *(_QWORD *)(v18 + v17) = v16;
    v19 = a6[3];
    v20 = v19 & 7;
    v21 = (unint64_t)a6[4] >> (v19 & 0xF8);
    v22 = a6[2] + (v19 >> 3);
    v23 = *a6;
    a6[2] = v22;
    a6[3] = v20 + 5;
    a6[4] = v21;
    *(_QWORD *)(v23 + v22) = v21;
    v24 = a6[3];
    v25 = v24 & 7;
    v26 = (unint64_t)a6[4] >> (v24 & 0xF8);
    v27 = a6[2] + (v24 >> 3);
    v28 = *a6;
    a6[2] = v27;
    a6[3] = v25 + 2;
    a6[4] = v26;
    *(_QWORD *)(v28 + v27) = v26;
  }
  v31 = a6[2];
  v30 = a6[3];
  v32 = (unint64_t)a6[4] >> (v30 & 0xF8);
  a6[3] = v30 & 7;
  a6[4] = v32;
  a6[2] = v31 + (v30 >> 3);
  if ((v8 & 1) == 0)
    return sub_23689300C(a6);
  return result;
}

uint64_t *sub_2368984B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t *v85;
  unint64_t v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  uint64_t *result;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t vars8;

  v9 = MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = (_OWORD *)v16;
  v19 = v18;
  v20 = v9;
  STACK[0x2218] = *MEMORY[0x24BDAC8D0];
  sub_23689F114(v9, v21, v22, v16, v10);
  v23 = *v11;
  v24 = v11[2];
  v25 = v11[3];
  v26 = v11[4] | (1 << v25);
  v11[3] = v25 + 2;
  v11[4] = v26;
  *(_QWORD *)(v23 + v24) = v26;
  v27 = v11[3];
  v28 = v27 & 7;
  v29 = (unint64_t)v11[4] >> (v27 & 0xF8);
  v30 = v11[2] + (v27 >> 3);
  v31 = *v11;
  v32 = v29 | (1 << v28);
  v11[2] = v30;
  v11[3] = v28 + 2;
  v11[4] = v32;
  *(_QWORD *)(v31 + v30) = v32;
  v33 = v11[3];
  v34 = v33 & 7;
  v35 = (unint64_t)v11[4] >> (v33 & 0xF8);
  v36 = v11[2] + (v33 >> 3);
  v37 = *v11;
  v11[2] = v36;
  v11[3] = v34 + 5;
  v11[4] = v35;
  *(_QWORD *)(v37 + v36) = v35;
  v38 = v11[3];
  v39 = v38 & 7;
  v40 = (unint64_t)v11[4] >> (v38 & 0xF8);
  v41 = v11[2] + (v38 >> 3);
  v11[2] = v41;
  switch(v19)
  {
    case 4uLL:
      v42 = *v11;
      v43 = 2;
LABEL_7:
      v40 |= v43 << v39;
      goto LABEL_8;
    case 3uLL:
      v42 = *v11;
      v43 = 1;
      goto LABEL_7;
    case 1uLL:
      v42 = *v11;
LABEL_8:
      v11[3] = v39 + 2;
      v11[4] = v40;
      *(_QWORD *)(v42 + v41) = v40;
      goto LABEL_10;
  }
  v44 = *v11;
  v45 = v40 | (3 << v39);
  v11[3] = v39 + 2;
  v11[4] = v45;
  *(_QWORD *)(v44 + v41) = v45;
  v46 = v11[3];
  v47 = v46 & 7;
  v48 = (unint64_t)v11[4] >> (v46 & 0xF8);
  v49 = v11[2] + (v46 >> 3);
  v50 = *v11;
  v51 = v48 | ((v19 - 1) << v47);
  v11[2] = v49;
  v11[3] = v47 + 13;
  v11[4] = v51;
  *(_QWORD *)(v50 + v49) = v51;
LABEL_10:
  v53 = v11[2];
  v52 = v11[3];
  v54 = v52 & 7;
  v55 = (unint64_t)v11[4] >> (v52 & 0xF8);
  v11[4] = v55;
  v56 = v53 + (v52 >> 3);
  v11[2] = v56;
  v57 = *v11;
  if (v13 > 0xFF)
  {
    v62 = v55 | (1 << v54);
    v11[3] = v54 + 2;
    v11[4] = v62;
    *(_QWORD *)(v57 + v56) = v62;
    v63 = v11[3];
    v64 = v63 & 7;
    v65 = (unint64_t)v11[4] >> (v63 & 0xF8);
    v66 = v11[2] + (v63 >> 3);
    v67 = *v11;
    v68 = v65 | ((v13 - 256) << v64);
    v11[2] = v66;
    v11[3] = v64 + 10;
    v11[4] = v68;
    *(_QWORD *)(v67 + v66) = v68;
  }
  else
  {
    v11[3] = v54 + 2;
    *(_QWORD *)(v57 + v56) = v55;
    v58 = v11[3];
    v59 = v11[2] + (v58 >> 3);
    v60 = *v11;
    v61 = ((unint64_t)v11[4] >> (v58 & 0xF8)) | (v13 << (v58 & 7));
    v11[2] = v59;
    v11[3] = v58 & 7 | 8;
    v11[4] = v61;
    *(_QWORD *)(v60 + v59) = v61;
  }
  v69 = v11[3];
  v70 = (unint64_t)v11[4] >> (v69 & 0xF8);
  v71 = v11[2] + (v69 >> 3);
  v72 = *v11;
  v11[2] = v71;
  v11[3] = (v69 & 7) + 2;
  v11[4] = v70;
  *(_QWORD *)(v72 + v71) = v70;
  v73 = v11[3];
  v74 = (unint64_t)v11[4] >> (v73 & 0xF8);
  v75 = v73 & 7;
  v76 = v11[2] + (v73 >> 3);
  v77 = *v11;
  v11[2] = v76;
  v11[3] = v75 + 4;
  v11[4] = v74;
  *(_QWORD *)(v77 + v76) = v74;
  v79 = v11[2];
  v78 = v11[3];
  v80 = (unint64_t)v11[4] >> (v78 & 0xF8);
  v11[3] = v78 & 7;
  v11[4] = v80;
  v11[2] = v79 + (v78 >> 3);
  v98 = &STACK[0x2140];
  v99 = 0;
  STACK[0x2148] = (unint64_t)v11;
  STACK[0x2140] = (unint64_t)v17;
  v81 = *(_OWORD *)((char *)v17 + 19);
  *(_OWORD *)&STACK[0x2180] = *v17;
  *(_OWORD *)&STACK[0x21C0] = v81;
  bzero(&v100, 0x2100uLL);
  if (v13)
  {
    v84 = (unsigned __int8 *)(*v15 + 1);
    v85 = &v100;
    v86 = v13;
    do
    {
      v87 = *v84;
      v88 = v84[1];
      v89 = v84[2];
      *((_WORD *)v85 + 17) = *(v84 - 1);
      *((_WORD *)v85 + 1073) = v87;
      *((_WORD *)v85 + 2129) = v88;
      *((_WORD *)v85 + 3185) = v89;
      v85 = (uint64_t *)((char *)v85 + 2);
      v84 += 4;
      --v86;
    }
    while (v86);
    v90 = a9;
    HIWORD(vars8) = 0;
    sub_23689FE00((uint64_t)&v98, (uint64_t)&a9, (uint64_t)&vars8 + 6, (uint64_t)&vars8 + 6, (uint64_t)&vars8 + 6, v13, v82, v83);
  }
  else
  {
    v90 = 0;
  }
  LOWORD(STACK[0x89E]) = v90;
  HIWORD(vars8) = v90;
  if (v19 <= 1
    || (sub_23689FE00((uint64_t)&v98, (uint64_t)&STACK[0x8A0], (uint64_t)&STACK[0x89E], (uint64_t)&a9, (uint64_t)&vars8 + 6, v13, v82, v83), v93 = STACK[0x8A0], LOWORD(STACK[0x10DE]) = STACK[0x8A0], LOWORD(STACK[0x89E]) = v93, v19 == 2))
  {
    LOWORD(STACK[0x10DE]) = STACK[0x10E0];
  }
  else
  {
    sub_23689FE00((uint64_t)&v98, (uint64_t)&STACK[0x10E0], (uint64_t)&STACK[0x10DE], (uint64_t)&STACK[0x8A0], (uint64_t)&STACK[0x89E], v13, v91, v92);
    v97 = STACK[0x10E0];
    LOWORD(STACK[0x191E]) = STACK[0x10E0];
    LOWORD(STACK[0x10DE]) = v97;
    if (v19 >= 4)
      sub_23689FE00((uint64_t)&v98, (uint64_t)&STACK[0x1920], (uint64_t)&STACK[0x191E], (uint64_t)&STACK[0x10E0], (uint64_t)&STACK[0x10DE], v13, v95, v96);
  }
  result = (uint64_t *)sub_2368A00EC((unsigned __int8 *)*v98, (uint64_t *)v98[1], v99);
  if ((v20 & 1) == 0)
    return sub_23689300C(v11);
  return result;
}

unint64_t sub_236898960(unint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a4 = result;
  v5 = 1;
  v6 = 3;
  while (v5 != 4)
  {
    v7 = qword_236924890[v5++];
    if (v7 > result)
    {
      v6 = v5 - 2;
      break;
    }
  }
  while (1)
  {
    v10 = ((unint64_t)(12 * a3 + 7) >> 3) + 1 + result;
    v11 = 1;
    while (v11 != 4)
    {
      v12 = qword_236924890[v11++];
      if (v12 > v10)
      {
        v13 = v11 - 2;
        goto LABEL_16;
      }
    }
    v13 = 3;
LABEL_16:
    if (v13 <= v6)
      break;
    v8 = 1;
    while (v8 != 4)
    {
      v9 = qword_236924890[v8++];
      if (v9 > v10)
      {
        v6 = v8 - 2;
        goto LABEL_10;
      }
    }
    v6 = 3;
LABEL_10:
    result = qword_236924890[v6];
    *a4 = result;
  }
  *a5 = result + ((unint64_t)(24 * a3 + 12 * a2 + qword_236924870[v6] + 19) >> 3) + 5;
  return result;
}

unint64_t sub_236898A40(unint64_t result, unsigned int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int **v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int **v34;
  float v35;
  unsigned int *v36;
  float v37;
  float v38;
  float v39;
  unsigned int *v40;
  unsigned int *j;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int **v52;
  int v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  unsigned int *v64;
  BOOL v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  char v73;
  unsigned int *v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int **v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  unsigned int *i;
  unsigned int **v86;
  unsigned int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t *v94;
  float v95;
  float v96;
  unsigned int v97;
  float v98;
  float v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  float v104;
  float v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int **v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  float v116;
  float v117;
  unsigned int *v118;
  unsigned int **v119;
  float v120;
  uint64_t v121;
  unsigned int v122;
  float v123;
  float v124;
  float v125;
  int64_t v126;
  unsigned int **v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  float v141;
  float v142;
  unsigned int **v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  int v148;
  float v149;
  float v150;
  unsigned int v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int **v158;
  unsigned int *v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  int v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  float v179;
  float v180;
  float v181;
  float v182;
  unsigned int *v183;
  unsigned int **v185;
  float v186;
  float v187;
  unint64_t v188;
  unsigned int v189;
  float v190;
  float v191;
  float v192;
  unsigned int *v193;
  unsigned int **v194;
  unsigned int *v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  float v200;
  float v201;
  float v202;
  unsigned int **v203;
  float v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  float v208;
  float v209;
  float v210;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v101 = *v10;
        if (*v10 & 0xFF000000 | (BYTE2(*v10) << 16) | (BYTE1(*v10) << 8) | *v10)
        {
          v102 = *v11;
          if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11)
            || ((v103 = *v11,
                 v104 = (float)((float)((float)((float)BYTE1(*v10) * 0.587)
                                      + (float)((float)*v10 * 0.299))
                              + (float)((float)BYTE2(*v10) * 0.114))
                      + 0.01,
                 **a3 != (unsigned int *)4)
              ? (v105 = (float)((float)((float)((float)BYTE1(v102) * 0.587) + (float)((float)v103 * 0.299))
                              + (float)((float)BYTE2(v102) * 0.114))
                      + 0.01)
              : (v104 = v104 * (float)HIBYTE(v101),
                 v105 = (float)((float)((float)((float)((float)BYTE1(v102) * 0.587) + (float)((float)v103 * 0.299))
                                      + (float)((float)BYTE2(v102) * 0.114))
                              + 0.01)
                      * (float)HIBYTE(v102)),
                v104 < v105))
          {
            *v11 = v101;
            *v10 = v102;
          }
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_23689D700(v11, v11 + 1, a2 - 1, *a3);
      case 4uLL:
        return (unint64_t)sub_23689DB8C(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5uLL:
        return (unint64_t)sub_23689DEE8(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v126 = (v13 - 2) >> 1;
              v127 = *a3;
              v128 = v126;
              do
              {
                v129 = v128;
                if (v126 >= v128)
                {
                  v130 = (2 * v128) | 1;
                  v131 = &v11[v130];
                  if (2 * v129 + 2 < (uint64_t)v13)
                  {
                    v132 = v131 + 1;
                    if (*v131 & 0xFF000000 | (BYTE2(*v131) << 16) | (BYTE1(*v131) << 8) | *v131)
                    {
                      v133 = *v132;
                      if (!(*v132 & 0xFF000000 | (BYTE2(*v132) << 16) | (BYTE1(*v132) << 8) | *v132)
                        || ((v134 = (float)((float)((float)((float)BYTE1(*v131) * 0.587)
                                                  + (float)((float)*v131 * 0.299))
                                          + (float)((float)BYTE2(*v131) * 0.114))
                                  + 0.01,
                             v135 = (float)*v132,
                             v136 = (float)BYTE1(v133),
                             *v127 != (unsigned int *)4)
                          ? (v137 = (float)((float)((float)(v136 * 0.587) + (float)(v135 * 0.299))
                                          + (float)((float)BYTE2(v133) * 0.114))
                                  + 0.01)
                          : (v134 = v134 * (float)HIBYTE(*v131),
                             v137 = (float)((float)((float)((float)(v136 * 0.587) + (float)(v135 * 0.299))
                                                  + (float)((float)BYTE2(v133) * 0.114))
                                          + 0.01)
                                  * (float)HIBYTE(v133)),
                            v134 < v137))
                      {
                        ++v131;
                        v130 = 2 * v129 + 2;
                      }
                    }
                  }
                  v138 = *v131;
                  v139 = v11[v129];
                  if (!(*v131 & 0xFF000000 | (BYTE2(*v131) << 16) | (BYTE1(*v131) << 8) | *v131)
                    || (result = v139 >> 8,
                        v11[v129] & 0xFF000000 | (BYTE2(v11[v129]) << 16) | (BYTE1(v11[v129]) << 8) | v11[v129])
                    && ((result = BYTE1(v139),
                         v140 = v11[v129],
                         v141 = (float)((float)((float)((float)BYTE1(*v131) * 0.587)
                                              + (float)((float)*v131 * 0.299))
                                      + (float)((float)BYTE2(*v131) * 0.114))
                              + 0.01,
                         *v127 != (unsigned int *)4)
                      ? (v142 = (float)((float)((float)((float)BYTE1(v139) * 0.587) + (float)((float)v140 * 0.299))
                                      + (float)((float)BYTE2(v139) * 0.114))
                              + 0.01)
                      : (v141 = v141 * (float)HIBYTE(v138),
                         v142 = (float)((float)((float)((float)((float)BYTE1(v139) * 0.587)
                                                      + (float)((float)v140 * 0.299))
                                              + (float)((float)BYTE2(v139) * 0.114))
                                      + 0.01)
                              * (float)HIBYTE(v139)),
                        v141 >= v142))
                  {
                    v11[v129] = v138;
                    if (v126 >= v130)
                    {
                      v143 = *a3;
                      while (1)
                      {
                        v144 = 2 * v130;
                        v130 = (2 * v130) | 1;
                        result = (unint64_t)&v11[v130];
                        v145 = v144 + 2;
                        if (v145 < (uint64_t)v13)
                        {
                          v146 = (unsigned int *)(result + 4);
                          if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                          {
                            v147 = *v146;
                            if (!(*v146 & 0xFF000000 | (BYTE2(*v146) << 16) | (BYTE1(*v146) << 8) | *v146)
                              || ((v148 = *v146,
                                   v149 = (float)((float)((float)((float)BYTE1(*(_DWORD *)result)
                                                                * 0.587)
                                                        + (float)((float)*(_DWORD *)result * 0.299))
                                                + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                        + 0.01,
                                   *v143 != (unsigned int *)4)
                                ? (v150 = (float)((float)((float)((float)BYTE1(v147) * 0.587)
                                                        + (float)((float)v148 * 0.299))
                                                + (float)((float)BYTE2(v147) * 0.114))
                                        + 0.01)
                                : (v149 = v149 * (float)HIBYTE(*(_DWORD *)result),
                                   v150 = (float)((float)((float)((float)((float)BYTE1(v147) * 0.587)
                                                                + (float)((float)v148 * 0.299))
                                                        + (float)((float)BYTE2(v147) * 0.114))
                                                + 0.01)
                                        * (float)HIBYTE(v147)),
                                  v149 < v150))
                            {
                              result += 4;
                              v130 = v145;
                            }
                          }
                        }
                        v151 = *(_DWORD *)result;
                        if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                        {
                          if (!(v139 & 0xFF000000 | (BYTE2(v139) << 16) | (BYTE1(v139) << 8) | v139))
                            break;
                          v152 = (float)HIBYTE(v151);
                          if (*v143 != (unsigned int *)4)
                            v152 = 1.0;
                          v153 = (float)((float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                       + (float)((float)*(_DWORD *)result * 0.299))
                                               + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                       + 0.01)
                               * v152;
                          v154 = *v143 == (unsigned int *)4 ? (float)HIBYTE(v139) : 1.0;
                          if (v153 < (float)((float)((float)((float)((float)((float)BYTE1(v139) * 0.587)
                                                                    + (float)((float)v139 * 0.299))
                                                            + (float)((float)BYTE2(v139) * 0.114))
                                                    + 0.01)
                                            * v154))
                            break;
                        }
                        *v131 = v151;
                        v131 = (unsigned int *)result;
                        if (v126 < v130)
                          goto LABEL_218;
                      }
                    }
                    result = (unint64_t)v131;
LABEL_218:
                    *(_DWORD *)result = v139;
                  }
                }
                v128 = v129 - 1;
              }
              while (v129);
              v155 = (unint64_t)v12 >> 2;
              do
              {
                v156 = 0;
                v157 = *v11;
                v158 = *a3;
                v159 = v11;
                do
                {
                  v160 = v159;
                  v159 += v156 + 1;
                  v161 = 2 * v156;
                  v156 = (2 * v156) | 1;
                  v162 = v161 + 2;
                  if (v162 < v155)
                  {
                    v163 = v159 + 1;
                    result = *v159 >> 8;
                    if (*v159 & 0xFF000000 | (BYTE2(*v159) << 16) | (BYTE1(*v159) << 8) | *v159)
                    {
                      result = *v163;
                      if (!(*v163 & 0xFF000000 | (BYTE2(*v163) << 16) | (BYTE1(*v163) << 8) | *v163)
                        || ((v164 = BYTE2(result),
                             v165 = (float)((float)((float)((float)BYTE1(*v159) * 0.587)
                                                  + (float)((float)*v159 * 0.299))
                                          + (float)((float)BYTE2(*v159) * 0.114))
                                  + 0.01,
                             v166 = (float)*v163,
                             v167 = (float)BYTE1(result),
                             *v158 != (unsigned int *)4)
                          ? (v168 = (float)((float)((float)(v167 * 0.587) + (float)(v166 * 0.299))
                                          + (float)((float)BYTE2(result) * 0.114))
                                  + 0.01)
                          : (result = BYTE3(result),
                             v165 = v165 * (float)HIBYTE(*v159),
                             v168 = (float)((float)((float)((float)(v167 * 0.587) + (float)(v166 * 0.299))
                                                  + (float)((float)v164 * 0.114))
                                          + 0.01)
                                  * (float)(int)result),
                            v165 < v168))
                      {
                        ++v159;
                        v156 = v162;
                      }
                    }
                  }
                  *v160 = *v159;
                }
                while (v156 <= (uint64_t)((unint64_t)(v155 - 2) >> 1));
                if (v159 == --a2)
                {
                  *v159 = v157;
                }
                else
                {
                  *v159 = *a2;
                  *a2 = v157;
                  v169 = (char *)v159 - (char *)v11 + 4;
                  if (v169 >= 5)
                  {
                    v170 = ((unint64_t)v169 >> 2) - 2;
                    v171 = v170 >> 1;
                    v172 = &v11[v170 >> 1];
                    v173 = *v172;
                    if (*v172 & 0xFF000000 | (BYTE2(*v172) << 16) | (BYTE1(*v172) << 8) | *v172)
                    {
                      v174 = *v159;
                      v175 = HIBYTE(*v159);
                      result = BYTE2(*v159);
                      v176 = BYTE1(*v159);
                      v177 = *v159;
                      v178 = *v159 & 0xFF000000 | (BYTE2(*v159) << 16) | (v176 << 8) | v177;
                      if (!v178
                        || ((v179 = (float)((float)((float)((float)BYTE1(*v172) * 0.587)
                                                  + (float)((float)*v172 * 0.299))
                                          + (float)((float)BYTE2(*v172) * 0.114))
                                  + 0.01,
                             v180 = (float)v177,
                             v181 = (float)v176,
                             *v158 != (unsigned int *)4)
                          ? (v182 = (float)((float)((float)(v181 * 0.587) + (float)(v180 * 0.299))
                                          + (float)((float)(int)result * 0.114))
                                  + 0.01)
                          : (v179 = v179 * (float)HIBYTE(v173),
                             v182 = (float)((float)((float)((float)(v181 * 0.587) + (float)(v180 * 0.299))
                                                  + (float)((float)(int)result * 0.114))
                                          + 0.01)
                                  * (float)v175),
                            v179 < v182))
                      {
                        *v159 = v173;
                        if (v170 >= 2)
                        {
                          v185 = *a3;
                          v186 = (float)((float)((float)((float)v176 * 0.587) + (float)((float)v177 * 0.299))
                                       + (float)((float)(int)result * 0.114))
                               + 0.01;
                          v187 = (float)v175;
                          while (1)
                          {
                            v188 = v171 - 1;
                            v171 = (v171 - 1) >> 1;
                            v183 = &v11[v171];
                            v189 = *v183;
                            result = HIWORD(*v183);
                            if (!(*v183 & 0xFF000000 | (BYTE2(*v183) << 16) | (BYTE1(*v183) << 8) | *v183))
                              break;
                            if (v178)
                            {
                              result = BYTE2(v189);
                              v190 = (float)HIBYTE(v189);
                              if (*v185 != (unsigned int *)4)
                                v190 = 1.0;
                              v191 = (float)((float)((float)((float)((float)BYTE1(*v183) * 0.587)
                                                           + (float)((float)*v183 * 0.299))
                                                   + (float)((float)BYTE2(*v183) * 0.114))
                                           + 0.01)
                                   * v190;
                              v192 = *v185 == (unsigned int *)4 ? v187 : 1.0;
                              if (v191 >= (float)(v186 * v192))
                                break;
                            }
                            *v172 = v189;
                            v172 = &v11[v171];
                            if (v188 <= 1)
                              goto LABEL_242;
                          }
                        }
                        v183 = v172;
LABEL_242:
                        *v183 = v174;
                      }
                    }
                  }
                }
              }
              while (v155-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v11[v13 >> 1];
          v16 = *a3;
          if ((unint64_t)v12 < 0x201)
          {
            result = (unint64_t)sub_23689D700(&v9[v13 >> 1], v9, a2 - 1, v16);
          }
          else
          {
            sub_23689D700(v9, &v9[v13 >> 1], a2 - 1, v16);
            sub_23689D700(v9 + 1, v15 - 1, a2 - 2, *a3);
            sub_23689D700(v9 + 2, &v9[v14 + 1], a2 - 3, *a3);
            result = (unint64_t)sub_23689D700(v15 - 1, v15, &v9[v14 + 1], *a3);
            v17 = *v9;
            *v9 = *v15;
            *v15 = v17;
          }
          v18 = *v9;
          v19 = HIBYTE(*v9);
          --a4;
          if ((a5 & 1) == 0)
          {
            v20 = *(v9 - 1);
            v21 = *v9;
            v22 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(*v9) << 8) | v21;
            if (v20 & 0xFF000000 | (BYTE2(v20) << 16) | (BYTE1(v20) << 8) | v20)
            {
              if (!v22)
                goto LABEL_16;
              result = v20;
              v23 = (unint64_t *)*a3;
              v24 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                          + (float)((float)BYTE2(v20) * 0.114))
                  + 0.01;
              v25 = (float)v21;
              v26 = (float)BYTE1(v18);
              if (**a3 == (unsigned int *)4)
              {
                v24 = v24 * (float)HIBYTE(v20);
                v27 = (float)((float)((float)((float)(v26 * 0.587) + (float)(v25 * 0.299))
                                    + (float)((float)BYTE2(v18) * 0.114))
                            + 0.01)
                    * (float)v19;
              }
              else
              {
                v27 = (float)((float)((float)(v26 * 0.587) + (float)(v25 * 0.299)) + (float)((float)BYTE2(v18) * 0.114))
                    + 0.01;
              }
              if (v24 < v27)
                goto LABEL_16;
            }
            else
            {
              if (!v22)
              {
                v73 = 1;
                goto LABEL_97;
              }
              v23 = (unint64_t *)*a3;
            }
            v66 = *v10;
            v67 = (float)BYTE1(v18);
            if (!(*v10 & 0xFF000000 | (BYTE2(*v10) << 16) | (BYTE1(*v10) << 8) | *v10))
            {
              v68 = (float)((float)((float)(v67 * 0.587) + (float)((float)v21 * 0.299))
                          + (float)((float)BYTE2(v18) * 0.114))
                  + 0.01;
LABEL_87:
              v74 = v9 + 1;
              do
              {
                v11 = v74;
                v75 = *v74;
                if (!(v75 & 0xFF000000 | (BYTE2(v75) << 16) | (BYTE1(v75) << 8) | v75))
                  break;
                v76 = (float)HIBYTE(v75);
                if (*v23 == 4)
                  v77 = (float)v19;
                else
                  v77 = 1.0;
                v78 = v68 * v77;
                if (*v23 != 4)
                  v76 = 1.0;
                v79 = (float)((float)((float)((float)((float)BYTE1(v75) * 0.587)
                                            + (float)((float)v75 * 0.299))
                                    + (float)((float)BYTE2(v75) * 0.114))
                            + 0.01)
                    * v76;
                v74 = v11 + 1;
              }
              while (v78 >= v79);
LABEL_95:
              v73 = 0;
              goto LABEL_108;
            }
            result = *v23;
            v68 = (float)((float)((float)(v67 * 0.587) + (float)((float)v21 * 0.299))
                        + (float)((float)BYTE2(v18) * 0.114))
                + 0.01;
            v69 = (float)*v10;
            v70 = (float)BYTE1(v66);
            if (*v23 == 4)
            {
              v71 = v68 * (float)v19;
              v72 = (float)((float)((float)((float)(v70 * 0.587) + (float)(v69 * 0.299))
                                  + (float)((float)BYTE2(v66) * 0.114))
                          + 0.01)
                  * (float)HIBYTE(v66);
            }
            else
            {
              v72 = (float)((float)((float)(v70 * 0.587) + (float)(v69 * 0.299)) + (float)((float)BYTE2(v66) * 0.114))
                  + 0.01;
              v71 = v68;
            }
            if (v71 < v72)
              goto LABEL_87;
            v73 = 0;
LABEL_97:
            v11 = v9 + 1;
            if (v9 + 1 < a2)
            {
              v80 = *a3;
              do
              {
                if ((v73 & 1) == 0)
                {
                  v81 = *v11;
                  result = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11;
                  if (!(_DWORD)result)
                    goto LABEL_95;
                  result = *v11;
                  v82 = (float)HIBYTE(v81);
                  if (*v80 == (unsigned int *)4)
                    v83 = (float)v19;
                  else
                    v83 = 1.0;
                  v84 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                      + (float)((float)BYTE2(v18) * 0.114))
                              + 0.01)
                      * v83;
                  if (*v80 != (unsigned int *)4)
                    v82 = 1.0;
                  if (v84 < (float)((float)((float)((float)((float)((float)BYTE1(v81) * 0.587)
                                                           + (float)((float)(int)result * 0.299))
                                                   + (float)((float)BYTE2(v81) * 0.114))
                                           + 0.01)
                                   * v82))
                    goto LABEL_95;
                }
                ++v11;
              }
              while (v11 < a2);
            }
LABEL_108:
            if (v11 < a2)
              i = a2 - 1;
            else
              i = a2;
            if (v11 < a2 && (v73 & 1) == 0)
            {
              v86 = *a3;
              for (i = a2 - 1; ; --i)
              {
                v87 = *i;
                if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
                {
                  result = BYTE1(v87);
                  v88 = (float)HIBYTE(v87);
                  if (*v86 == (unsigned int *)4)
                    v89 = (float)v19;
                  else
                    v89 = 1.0;
                  v90 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                      + (float)((float)BYTE2(v18) * 0.114))
                              + 0.01)
                      * v89;
                  if (*v86 != (unsigned int *)4)
                    v88 = 1.0;
                  if (v90 >= (float)((float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                                            + (float)((float)*i * 0.299))
                                                    + (float)((float)BYTE2(*i) * 0.114))
                                            + 0.01)
                                    * v88))
                    break;
                }
              }
            }
            if (v11 < i)
            {
              v91 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                  + (float)((float)BYTE2(v18) * 0.114))
                          + 0.01)
                  * (float)v19;
              v92 = *v11;
              v93 = *i;
              do
              {
                *v11++ = v93;
                *i = v92;
                v94 = (unint64_t *)*a3;
                if ((v73 & 1) != 0)
                  goto LABEL_132;
                while (1)
                {
                  v92 = *v11;
                  if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11))
                    break;
                  v95 = (float)HIBYTE(v92);
                  if (*v94 == 4)
                    v96 = v91;
                  else
                    v96 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                  if (*v94 != 4)
                    v95 = 1.0;
                  if (v96 < (float)((float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                                           + (float)((float)*v11 * 0.299))
                                                   + (float)((float)BYTE2(*v11) * 0.114))
                                           + 0.01)
                                   * v95))
                    break;
                  do
LABEL_132:
                    ++v11;
                  while ((v73 & 1) != 0);
                }
                do
                {
                  do
                  {
                    v97 = *--i;
                    v93 = v97;
                  }
                  while (!(v97 & 0xFF000000 | (BYTE2(v97) << 16) | (BYTE1(v97) << 8) | v97));
                  result = *v94;
                  v98 = (float)HIBYTE(v93);
                  if (*v94 == 4)
                    v99 = v91;
                  else
                    v99 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                  if (*v94 != 4)
                    v98 = 1.0;
                }
                while (v99 < (float)((float)((float)((float)((float)((float)BYTE1(v93) * 0.587)
                                                            + (float)((float)v93 * 0.299))
                                                    + (float)((float)BYTE2(v93) * 0.114))
                                            + 0.01)
                                    * v98));
              }
              while (v11 < i);
            }
            v100 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v100;
            a5 = 0;
            *v100 = v18;
            continue;
          }
LABEL_16:
          v29 = v9 + 1;
          v28 = v9[1];
          if (!(v28 & 0xFF000000 | (BYTE2(v28) << 16) | (BYTE1(v28) << 8) | v28))
            goto LABEL_38;
          v30 = BYTE2(v28);
          v31 = BYTE1(v28);
          v32 = v28;
          v33 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9;
          v34 = *a3;
          v35 = (float)((float)((float)((float)BYTE1(*v9) * 0.587)
                              + (float)((float)*v9 * 0.299))
                      + (float)((float)BYTE2(*v9) * 0.114))
              + 0.01;
          while (1)
          {
            v36 = v29;
            if (v33)
            {
              v37 = (float)HIBYTE(v28);
              if (*v34 != (unsigned int *)4)
                v37 = 1.0;
              v38 = (float)((float)((float)((float)((float)v31 * 0.587) + (float)((float)v32 * 0.299))
                                  + (float)((float)v30 * 0.114))
                          + 0.01)
                  * v37;
              v39 = *v34 == (unsigned int *)4 ? (float)v19 : 1.0;
              if (v38 >= (float)(v35 * v39))
                break;
            }
            ++v29;
            v28 = v36[1];
            v30 = BYTE2(v28);
            v31 = BYTE1(v28);
            v32 = v28;
            v40 = v36;
            if (!(v28 & 0xFF000000 | (BYTE2(v28) << 16) | (BYTE1(v28) << 8) | v28))
              goto LABEL_28;
          }
          v40 = v29 - 1;
LABEL_28:
          j = a2 - 1;
          if (v40 == v9)
          {
LABEL_38:
            if (v29 < a2)
            {
              for (j = a2 - 1; ; --j)
              {
                if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
                {
                  if (!(*v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9))
                    goto LABEL_51;
                  v45 = (float)HIBYTE(*j);
                  if (**a3 == (unsigned int *)4)
                  {
                    v46 = (float)v19;
                  }
                  else
                  {
                    v45 = 1.0;
                    v46 = 1.0;
                  }
                  if (v29 >= j
                    || (float)((float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                                     + (float)((float)*j * 0.299))
                                             + (float)((float)BYTE2(*j) * 0.114))
                                     + 0.01)
                             * v45) < (float)((float)((float)((float)((float)((float)BYTE1(*v9) * 0.587)
                                                                    + (float)((float)*v9 * 0.299))
                                                            + (float)((float)BYTE2(*v9) * 0.114))
                                                    + 0.01)
                                            * v46))
                  {
                    goto LABEL_51;
                  }
                }
                else if (v29 >= j)
                {
                  goto LABEL_51;
                }
              }
            }
            j = a2;
          }
          else
          {
            while (1)
            {
              if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
              {
                if (!v33)
                  break;
                v42 = (float)HIBYTE(*j);
                if (*v34 != (unsigned int *)4)
                  v42 = 1.0;
                v43 = (float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                            + (float)((float)*j * 0.299))
                                    + (float)((float)BYTE2(*j) * 0.114))
                            + 0.01)
                    * v42;
                v44 = *v34 == (unsigned int *)4 ? (float)v19 : 1.0;
                if (v43 < (float)(v35 * v44))
                  break;
              }
              --j;
            }
          }
LABEL_51:
          v11 = v29;
          if (v29 < j)
          {
            v47 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9;
            v48 = (float)((float)((float)((float)((float)BYTE1(*v9) * 0.587)
                                        + (float)((float)*v9 * 0.299))
                                + (float)((float)BYTE2(*v9) * 0.114))
                        + 0.01)
                * (float)v19;
            v49 = *j;
            v11 = v29;
            v50 = j;
            do
            {
              *v11 = v49;
              *v50 = v28;
              v51 = v11[1];
              ++v11;
              v28 = v51;
              v52 = *a3;
              if (v51 & 0xFF000000 | (BYTE2(v51) << 16) | (BYTE1(v51) << 8) | v51)
              {
                v53 = BYTE2(v28);
                v54 = BYTE1(v28);
                v55 = v28;
                do
                {
                  if (v47)
                  {
                    v56 = (float)HIBYTE(v28);
                    if (*v52 != (unsigned int *)4)
                      v56 = 1.0;
                    v57 = (float)((float)((float)((float)((float)v54 * 0.587) + (float)((float)v55 * 0.299))
                                        + (float)((float)v53 * 0.114))
                                + 0.01)
                        * v56;
                    v58 = *v52 == (unsigned int *)4
                        ? v48
                        : (float)((float)((float)((float)BYTE1(v18) * 0.587)
                                        + (float)((float)v18 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                    if (v57 >= v58)
                      break;
                  }
                  v59 = v11[1];
                  ++v11;
                  v28 = v59;
                  v53 = BYTE2(v59);
                  v54 = BYTE1(v59);
                  v55 = v59;
                }
                while (v59 & 0xFF000000 | (BYTE2(v59) << 16) | (BYTE1(v59) << 8) | v59);
              }
              do
              {
                do
                {
                  v60 = *--v50;
                  v49 = v60;
                }
                while (!(v60 & 0xFF000000 | (BYTE2(v60) << 16) | (BYTE1(v60) << 8) | v60));
                if (!v47)
                  break;
                v61 = (float)HIBYTE(v49);
                if (*v52 != (unsigned int *)4)
                  v61 = 1.0;
                v62 = (float)((float)((float)((float)((float)BYTE1(v49) * 0.587)
                                            + (float)((float)v49 * 0.299))
                                    + (float)((float)BYTE2(v49) * 0.114))
                            + 0.01)
                    * v61;
                v63 = *v52 == (unsigned int *)4
                    ? v48
                    : (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v18 * 0.299))
                            + (float)((float)BYTE2(v18) * 0.114))
                    + 0.01;
              }
              while (v62 >= v63);
            }
            while (v11 < v50);
          }
          v64 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v64;
          *v64 = v18;
          if (v29 < j)
            goto LABEL_77;
          v65 = sub_23689ED2C(v9, v11 - 1, a3);
          result = sub_23689ED2C(v11, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              continue;
LABEL_77:
            result = sub_236898A40(v9, v11 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v11 - 1;
          if (v65)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if (v11 == a2)
            return result;
          v193 = v11 + 1;
          if (v11 + 1 == a2)
            return result;
          v194 = *a3;
          while (1)
          {
            v195 = v9;
            v9 = v193;
            v196 = v195[1];
            if (v196 & 0xFF000000 | (BYTE2(v196) << 16) | (BYTE1(v196) << 8) | v196)
            {
              v197 = HIBYTE(v196);
              v198 = v195[1];
              v199 = *v195;
              if (!(*v195 & 0xFF000000 | (BYTE2(*v195) << 16) | (BYTE1(*v195) << 8) | *v195))
              {
                v200 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                             + (float)((float)BYTE2(v196) * 0.114))
                     + 0.01;
LABEL_267:
                v203 = *a3;
                v204 = (float)v197;
                do
                {
                  do
                  {
                    v205 = v195;
                    v206 = v199;
                    v207 = *--v195;
                    v199 = v207;
                    v195[2] = v206;
                  }
                  while (!(v207 & 0xFF000000 | (BYTE2(v207) << 16) | (BYTE1(v207) << 8) | v207));
                  result = (unint64_t)*v203;
                  v208 = (float)HIBYTE(v199);
                  if (*v203 == (unsigned int *)4)
                    v209 = v204;
                  else
                    v209 = 1.0;
                  v210 = v200 * v209;
                  if (*v203 != (unsigned int *)4)
                    v208 = 1.0;
                }
                while (v210 < (float)((float)((float)((float)((float)((float)BYTE1(v199) * 0.587)
                                                             + (float)((float)v199 * 0.299))
                                                     + (float)((float)BYTE2(v199) * 0.114))
                                             + 0.01)
                                     * v208));
                *v205 = v196;
                goto LABEL_276;
              }
              result = *v195;
              v200 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                           + (float)((float)BYTE2(v196) * 0.114))
                   + 0.01;
              if (*v194 == (unsigned int *)4)
              {
                v201 = v200 * (float)v197;
                v202 = (float)((float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)(int)result * 0.299))
                                     + (float)((float)BYTE2(v199) * 0.114))
                             + 0.01)
                     * (float)HIBYTE(v199);
              }
              else
              {
                v202 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)(int)result * 0.299))
                             + (float)((float)BYTE2(v199) * 0.114))
                     + 0.01;
                v201 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                             + (float)((float)BYTE2(v196) * 0.114))
                     + 0.01;
              }
              if (v201 < v202)
                goto LABEL_267;
            }
LABEL_276:
            v193 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
        }
        if (v11 != a2)
        {
          v106 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v107 = 0;
            v108 = *a3;
            v109 = v11;
            do
            {
              v110 = v109;
              v109 = v106;
              v111 = v110[1];
              if (v111 & 0xFF000000 | (BYTE2(v111) << 16) | (BYTE1(v111) << 8) | v111)
              {
                v112 = HIBYTE(v111);
                v113 = v110[1];
                v114 = *v110;
                result = HIWORD(*v110);
                if (!(*v110 & 0xFF000000 | (BYTE2(*v110) << 16) | (BYTE1(*v110) << 8) | *v110)
                  || ((result = BYTE2(v114),
                       v115 = *v110,
                       v116 = (float)((float)((float)((float)BYTE1(v111) * 0.587) + (float)((float)v113 * 0.299))
                                    + (float)((float)BYTE2(v111) * 0.114))
                            + 0.01,
                       *v108 != (unsigned int *)4)
                    ? (v117 = (float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v115 * 0.299))
                                    + (float)((float)BYTE2(v114) * 0.114))
                            + 0.01)
                    : (v116 = v116 * (float)v112,
                       v117 = (float)((float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v115 * 0.299))
                                            + (float)((float)BYTE2(v114) * 0.114))
                                    + 0.01)
                            * (float)HIBYTE(v114)),
                      v116 < v117))
                {
                  v110[1] = v114;
                  v118 = v11;
                  if (v110 != v11)
                  {
                    v119 = *a3;
                    v120 = (float)v112;
                    v121 = v107;
                    while (1)
                    {
                      v122 = *(unsigned int *)((char *)v11 + v121 - 4);
                      result = v122 & 0xFF000000 | (BYTE2(v122) << 16) | (BYTE1(v122) << 8) | v122;
                      if ((_DWORD)result)
                      {
                        result = *(unsigned int *)((char *)v11 + v121 - 4);
                        v123 = (float)HIBYTE(v122);
                        if (*v119 == (unsigned int *)4)
                          v124 = v120;
                        else
                          v124 = 1.0;
                        v125 = (float)((float)((float)((float)((float)BYTE1(v111) * 0.587) + (float)((float)v113 * 0.299))
                                             + (float)((float)BYTE2(v111) * 0.114))
                                     + 0.01)
                             * v124;
                        if (*v119 != (unsigned int *)4)
                          v123 = 1.0;
                        if (v125 >= (float)((float)((float)((float)((float)((float)BYTE1(v122) * 0.587)
                                                                   + (float)((float)(int)result * 0.299))
                                                           + (float)((float)BYTE2(v122) * 0.114))
                                                   + 0.01)
                                           * v123))
                          break;
                      }
                      *(unsigned int *)((char *)v11 + v121) = v122;
                      v121 -= 4;
                      if (!v121)
                      {
                        v118 = v11;
                        goto LABEL_178;
                      }
                    }
                    v118 = (unsigned int *)((char *)v11 + v121);
                  }
LABEL_178:
                  *v118 = v111;
                }
              }
              v106 = v109 + 1;
              v107 += 4;
            }
            while (v109 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t sub_23689A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t i;
  char *v55;
  uint64_t **v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int8x16_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  int8x16_t *v76;
  int16x8_t *v77;
  int16x8_t *v78;
  int16x8_t *v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t j;
  _WORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int8x16_t v100;
  int16x8_t v101;
  char v102;
  int16x8_t v103;
  uint16x8_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned __int16 *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t vars0;
  uint64_t vars8;

  a42 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(**(_QWORD **)a1 - (a3 << 8)) >= 0x100)
    v45 = 256;
  else
    v45 = **(_QWORD **)a1 - (a3 << 8);
  v44 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)(*v44 - (a2 << 8)) >= 0x100)
    v46 = 256;
  else
    v46 = *v44 - (a2 << 8);
  a9 = 0;
  vars0 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16), a2 << 8, a3 << 8, v46, v45, &a9);
  v47 = (v45 - a4) & ~((v45 - a4) >> 63);
  v48 = (int)(v47 >> 1);
  v49 = v45 - ((unint64_t)v47 >> 1);
  if (v49 >= (int)a4)
    v49 = a4;
  v50 = v46 & 0x1F0;
  v127 = a9;
  v128 = v48;
  v129 = v49;
  v52 = *(_QWORD *)(a1 + 24);
  v51 = *(_QWORD *)(a1 + 32);
  v53 = **(_QWORD **)(a1 + 64);
  if (**(_BYTE **)(a1 + 48))
  {
    v126 = **(unsigned __int8 **)(a1 + 72);
    for (i = 1; i != 9; i += 2)
      (&a13)[i] = 0;
    if (v53)
    {
      v55 = &a21;
      v56 = &a13;
      v57 = v53;
      do
      {
        *v56 = (uint64_t *)v55;
        v56 += 2;
        *(_QWORD *)v55 = v52;
        *((_QWORD *)v55 + 1) = v51;
        v55 += 16;
        v51 += 264;
        v52 += 152;
        --v57;
      }
      while (v57);
      sub_23689E738(&__p, v53);
    }
    else
    {
      __p = 0;
      a11 = 0;
      a12 = 0;
    }
    if ((_DWORD)v129 != -1)
    {
      v66 = 0;
      v67 = 1;
      v68 = 0uLL;
      do
      {
        a31 = v68;
        a32 = v68;
        v69 = (int8x16_t *)(vars0 + (v66 + v128) * v127);
        a29 = v68;
        a30 = v68;
        vars8 = v67;
        if (v53)
        {
          v70 = 0;
          v71 = 0;
          v72 = &__p[704 * (v67 & 1) + 64];
          v73 = &__p[704 * (v66 & 1) + 64];
          v74 = v73;
          v75 = v72;
          do
          {
            *((_QWORD *)&a31 + v71) = &v73[v70 + (v74 & 0x3E)];
            *((_QWORD *)&a29 + v71++) = &v72[v70 + (v75 & 0x3E)];
            v75 += 1408;
            v70 += 1408;
            v74 += 1408;
          }
          while (v53 != v71);
          switch(v53)
          {
            case 1uLL:
              if (v126)
                sub_23689E804(v69, v50, (int8x16_t *)a31);
              else
                sub_23689E874((__int128 *)v69->i8, v50, (_OWORD *)a31);
              goto LABEL_47;
            case 2uLL:
              if (v126)
                sub_23689E8D8(v69->i16, v50, (int8x16_t *)a31, *((int8x16_t **)&a31 + 1));
              else
                sub_23689E968(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1));
              goto LABEL_47;
            case 3uLL:
              if (v126)
                sub_23689E9E0(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
              else
                sub_23689EAB8(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
LABEL_47:
              v68 = 0uLL;
              v80 = (int8x16_t)xmmword_2368AFAC0;
              v81.i64[0] = 0x8000800080008;
              v81.i64[1] = 0x8000800080008;
LABEL_48:
              for (j = 0; j != v53; ++j)
              {
                while (!v66)
                {
                  *(_WORD *)(*((_QWORD *)&a31 + j) - 2) = 0;
                  *(_WORD *)(*((_QWORD *)&a29 + j++) - 2) = 0;
                  if (j == v53)
                    goto LABEL_100;
                }
                v83 = (_WORD *)*((_QWORD *)&a29 + j);
                *(_WORD *)(*((_QWORD *)&a31 + j) - 2) = *v83;
                *(v83 - 1) = *v83;
              }
              v84 = 0;
              while ((v46 & 0x1F0) == 0)
              {
LABEL_99:
                if (++v84 == v53)
                  goto LABEL_100;
              }
              v85 = 0;
              v86 = *((_QWORD *)&a31 + v84);
              v87 = *((_QWORD *)&a29 + v84);
              v88 = &(&a13)[2 * v84];
              v89 = v88[1];
              v90 = v46 & 0x1F0;
              while (2)
              {
                v91 = 0;
                v92 = 0;
                v93 = v90 - 16;
                if (v90 >= 0x10)
                  v94 = 16;
                else
                  v94 = v90;
                a33 = v68;
                a34 = v68;
                v95 = 1;
                do
                {
                  v96 = *(int16x8_t *)(v86 - 2 + 2 * v85 + 2 * v91);
                  v97 = *(int16x8_t *)(v87 + 2 * v85 + 2 * v91);
                  v98 = *(int16x8_t *)(v87 - 2 + 2 * v85 + 2 * v91);
                  v99 = vsubq_s16(v96, v98);
                  v100 = (int8x16_t)vsubq_s16(v97, v98);
                  v101 = vsubq_s16(*(int16x8_t *)(v86 + 2 * v85 + 2 * v91), (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8((int8x16_t)v99, v100)), (int8x16_t)vaddq_s16(v99, v97), vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v100, (int8x16_t)vsubq_s16(v96, v97))), (int8x16_t)v97, (int8x16_t)v96)));
                  v102 = v95;
                  v103 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v101, v101), (int8x16_t)vcltzq_s16(v101));
                  v104 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v103), v81, v80);
                  v104.i16[0] = vminvq_u16(v104);
                  *(__int128 *)((char *)&a33 + 2 * v91) = (__int128)v103;
                  if (v92 == v91)
                    v105 = v104.u32[0];
                  else
                    v105 = 0;
                  v92 += v105;
                  v91 = 8;
                  v95 = 0;
                }
                while ((v102 & 1) != 0);
                v106 = v50 - v85;
                if (v50 - v85 >= 0x10)
                  v106 = 16;
                v107 = v89;
                if (v92 >= v106)
                  v108 = v106;
                else
                  v108 = v92;
                if (v92 < v106)
                {
LABEL_73:
                  v109 = (unint64_t)v107 + v108;
                  if (v109 >= 8)
                  {
                    v111 = (_QWORD *)**v88;
                    v110 = (*v88)[1];
                    ++*v111;
                    v112 = v109 - 8;
                    v113 = 43 - __clz(v112);
                    if (!v112)
                      v113 = 12;
                    if (v112 >= 0x10)
                      v112 = v113;
                    ++*(_QWORD *)(v110 + 8 * v112);
                    if (v92 < v106)
                    {
                      if (v90 >= v92)
                        v90 = v92;
                      if (v90 >= 0x10)
                        v90 = 16;
                      v114 = v94 - v90;
                      v115 = (unsigned __int16 *)((unint64_t)&a33 | (2 * v90));
                      do
                      {
                        v116 = *v115++;
                        v117 = 32 - __clz(v116);
                        if (v116)
                          v118 = v117;
                        else
                          v118 = 0;
                        ++v111[v118];
                        --v114;
                      }
                      while (v114);
                    }
                    v89 = 0;
                    goto LABEL_97;
                  }
                  if (v106)
                  {
                    v119 = **v88;
                    v120 = &a33;
                    do
                    {
                      v121 = *(unsigned __int16 *)v120;
                      v120 = (__int128 *)((char *)v120 + 2);
                      v122 = 32 - __clz(v121);
                      if (v121)
                        v123 = v122;
                      else
                        v123 = 0;
                      ++*(_QWORD *)(v119 + 8 * v123);
                      --v94;
                    }
                    while (v94);
                  }
                }
                else
                {
                  if (!v89 && v108 < 8)
                  {
                    v107 = 0;
                    goto LABEL_73;
                  }
                  v89 = (uint64_t *)((char *)v89 + v108);
LABEL_97:
                  v88[1] = v89;
                }
                v85 += 16;
                v90 = v93;
                if (v85 >= v50)
                  goto LABEL_99;
                continue;
              }
          }
          v78 = (int16x8_t *)*((_QWORD *)&a31 + 1);
          v79 = (int16x8_t *)a31;
          v76 = (int8x16_t *)*((_QWORD *)&a32 + 1);
          v77 = (int16x8_t *)a32;
        }
        else
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v79 = 0;
        }
        if (v126)
          sub_23689EB70(v69->i16, v50, v79, v78, v77, v76);
        else
          sub_23689EC64(v69->i16, v50, v79, v78, v77, (int16x8_t *)v76);
        v68 = 0uLL;
        v80 = (int8x16_t)xmmword_2368AFAC0;
        v81.i64[0] = 0x8000800080008;
        v81.i64[1] = 0x8000800080008;
        if (v53)
          goto LABEL_48;
LABEL_100:
        v67 = (vars8 + 1);
      }
      while (v66++ != v129);
    }
    if (__p)
    {
      a11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v58 = **(unsigned __int8 **)(a1 + 40);
    v59 = **(_QWORD **)(a1 + 80);
    for (k = 1; k != 9; k += 2)
      (&a13)[k] = 0;
    if (v53)
    {
      v61 = v52 + 152 * v58;
      v62 = v51 + 264 * v58;
      v63 = &a21;
      v64 = &a13;
      v65 = v53;
      do
      {
        *v64 = (uint64_t *)v63;
        v64 += 2;
        *(_QWORD *)v63 = v61;
        *((_QWORD *)v63 + 1) = v62;
        v63 += 16;
        --v65;
      }
      while (v65);
    }
    sub_23689CBCC(vars0, v128, v46 & 0x1F0, v129 + 1, v127, v59, v53, &a13);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(**(_QWORD **)(a1 + 16), vars0);
}

uint64_t sub_23689A798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t i;
  char *v55;
  uint64_t **v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int8x16_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  int8x16_t *v76;
  int16x8_t *v77;
  int16x8_t *v78;
  int16x8_t *v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t j;
  _WORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int8x16_t v100;
  int16x8_t v101;
  char v102;
  int16x8_t v103;
  uint16x8_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unsigned __int16 *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t vars0;
  uint64_t vars8;

  a42 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(**(_QWORD **)a1 - (a3 << 8)) >= 0x100)
    v45 = 256;
  else
    v45 = **(_QWORD **)a1 - (a3 << 8);
  v44 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)(*v44 - (a2 << 8)) >= 0x100)
    v46 = 256;
  else
    v46 = *v44 - (a2 << 8);
  a9 = 0;
  vars0 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16), a2 << 8, a3 << 8, v46, v45, &a9);
  v47 = (v45 - a4) & ~((v45 - a4) >> 63);
  v48 = (int)(v47 >> 1);
  v49 = v45 - ((unint64_t)v47 >> 1);
  if (v49 >= (int)a4)
    v49 = a4;
  v50 = v46 & 0x1F0;
  v127 = a9;
  v128 = v48;
  v129 = v49;
  v52 = *(_QWORD *)(a1 + 24);
  v51 = *(_QWORD *)(a1 + 32);
  v53 = **(_QWORD **)(a1 + 64);
  if (**(_BYTE **)(a1 + 48))
  {
    v126 = **(unsigned __int8 **)(a1 + 72);
    for (i = 1; i != 9; i += 2)
      (&a13)[i] = 0;
    if (v53)
    {
      v55 = &a21;
      v56 = &a13;
      v57 = v53;
      do
      {
        *v56 = (uint64_t *)v55;
        v56 += 2;
        *(_QWORD *)v55 = v52;
        *((_QWORD *)v55 + 1) = v51;
        v55 += 16;
        v51 += 264;
        v52 += 152;
        --v57;
      }
      while (v57);
      sub_23689E738(&__p, v53);
    }
    else
    {
      __p = 0;
      a11 = 0;
      a12 = 0;
    }
    if ((_DWORD)v129 != -1)
    {
      v66 = 0;
      v67 = 1;
      v68 = 0uLL;
      do
      {
        a31 = v68;
        a32 = v68;
        v69 = (int8x16_t *)(vars0 + (v66 + v128) * v127);
        a29 = v68;
        a30 = v68;
        vars8 = v67;
        if (v53)
        {
          v70 = 0;
          v71 = 0;
          v72 = &__p[704 * (v67 & 1) + 64];
          v73 = &__p[704 * (v66 & 1) + 64];
          v74 = v73;
          v75 = v72;
          do
          {
            *((_QWORD *)&a31 + v71) = &v73[v70 + (v74 & 0x3E)];
            *((_QWORD *)&a29 + v71++) = &v72[v70 + (v75 & 0x3E)];
            v75 += 1408;
            v70 += 1408;
            v74 += 1408;
          }
          while (v53 != v71);
          switch(v53)
          {
            case 1uLL:
              if (v126)
                sub_23689E804(v69, v50, (int8x16_t *)a31);
              else
                sub_23689E874((__int128 *)v69->i8, v50, (_OWORD *)a31);
              goto LABEL_47;
            case 2uLL:
              if (v126)
                sub_23689E8D8(v69->i16, v50, (int8x16_t *)a31, *((int8x16_t **)&a31 + 1));
              else
                sub_23689E968(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1));
              goto LABEL_47;
            case 3uLL:
              if (v126)
                sub_23689E9E0(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
              else
                sub_23689EAB8(v69->i16, v50, (int16x8_t *)a31, *((int16x8_t **)&a31 + 1), (int16x8_t *)a32);
LABEL_47:
              v68 = 0uLL;
              v80 = (int8x16_t)xmmword_2368AFAC0;
              v81.i64[0] = 0x8000800080008;
              v81.i64[1] = 0x8000800080008;
LABEL_48:
              for (j = 0; j != v53; ++j)
              {
                while (!v66)
                {
                  *(_WORD *)(*((_QWORD *)&a31 + j) - 2) = 0;
                  *(_WORD *)(*((_QWORD *)&a29 + j++) - 2) = 0;
                  if (j == v53)
                    goto LABEL_100;
                }
                v83 = (_WORD *)*((_QWORD *)&a29 + j);
                *(_WORD *)(*((_QWORD *)&a31 + j) - 2) = *v83;
                *(v83 - 1) = *v83;
              }
              v84 = 0;
              while ((v46 & 0x1F0) == 0)
              {
LABEL_99:
                if (++v84 == v53)
                  goto LABEL_100;
              }
              v85 = 0;
              v86 = *((_QWORD *)&a31 + v84);
              v87 = *((_QWORD *)&a29 + v84);
              v88 = &(&a13)[2 * v84];
              v89 = v88[1];
              v90 = v46 & 0x1F0;
              while (2)
              {
                v91 = 0;
                v92 = 0;
                v93 = v90 - 16;
                if (v90 >= 0x10)
                  v94 = 16;
                else
                  v94 = v90;
                a33 = v68;
                a34 = v68;
                v95 = 1;
                do
                {
                  v96 = *(int16x8_t *)(v86 - 2 + 2 * v85 + 2 * v91);
                  v97 = *(int16x8_t *)(v87 + 2 * v85 + 2 * v91);
                  v98 = *(int16x8_t *)(v87 - 2 + 2 * v85 + 2 * v91);
                  v99 = vsubq_s16(v96, v98);
                  v100 = (int8x16_t)vsubq_s16(v97, v98);
                  v101 = vsubq_s16(*(int16x8_t *)(v86 + 2 * v85 + 2 * v91), (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8((int8x16_t)v99, v100)), (int8x16_t)vaddq_s16(v99, v97), vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v100, (int8x16_t)vsubq_s16(v96, v97))), (int8x16_t)v97, (int8x16_t)v96)));
                  v102 = v95;
                  v103 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v101, v101), (int8x16_t)vcltzq_s16(v101));
                  v104 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v103), v81, v80);
                  v104.i16[0] = vminvq_u16(v104);
                  *(__int128 *)((char *)&a33 + 2 * v91) = (__int128)v103;
                  if (v92 == v91)
                    v105 = v104.u32[0];
                  else
                    v105 = 0;
                  v92 += v105;
                  v91 = 8;
                  v95 = 0;
                }
                while ((v102 & 1) != 0);
                v106 = v50 - v85;
                if (v50 - v85 >= 0x10)
                  v106 = 16;
                v107 = v89;
                if (v92 >= v106)
                  v108 = v106;
                else
                  v108 = v92;
                if (v92 < v106)
                {
LABEL_73:
                  v109 = (unint64_t)v107 + v108;
                  if (v109 >= 8)
                  {
                    v111 = (_QWORD *)**v88;
                    v110 = (*v88)[1];
                    ++*v111;
                    v112 = v109 - 8;
                    v113 = 43 - __clz(v112);
                    if (!v112)
                      v113 = 12;
                    if (v112 >= 0x10)
                      v112 = v113;
                    ++*(_QWORD *)(v110 + 8 * v112);
                    if (v92 < v106)
                    {
                      if (v90 >= v92)
                        v90 = v92;
                      if (v90 >= 0x10)
                        v90 = 16;
                      v114 = v94 - v90;
                      v115 = (unsigned __int16 *)((unint64_t)&a33 | (2 * v90));
                      do
                      {
                        v116 = *v115++;
                        v117 = 32 - __clz(v116);
                        if (v116)
                          v118 = v117;
                        else
                          v118 = 0;
                        ++v111[v118];
                        --v114;
                      }
                      while (v114);
                    }
                    v89 = 0;
                    goto LABEL_97;
                  }
                  if (v106)
                  {
                    v119 = **v88;
                    v120 = &a33;
                    do
                    {
                      v121 = *(unsigned __int16 *)v120;
                      v120 = (__int128 *)((char *)v120 + 2);
                      v122 = 32 - __clz(v121);
                      if (v121)
                        v123 = v122;
                      else
                        v123 = 0;
                      ++*(_QWORD *)(v119 + 8 * v123);
                      --v94;
                    }
                    while (v94);
                  }
                }
                else
                {
                  if (!v89 && v108 < 8)
                  {
                    v107 = 0;
                    goto LABEL_73;
                  }
                  v89 = (uint64_t *)((char *)v89 + v108);
LABEL_97:
                  v88[1] = v89;
                }
                v85 += 16;
                v90 = v93;
                if (v85 >= v50)
                  goto LABEL_99;
                continue;
              }
          }
          v78 = (int16x8_t *)*((_QWORD *)&a31 + 1);
          v79 = (int16x8_t *)a31;
          v76 = (int8x16_t *)*((_QWORD *)&a32 + 1);
          v77 = (int16x8_t *)a32;
        }
        else
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v79 = 0;
        }
        if (v126)
          sub_23689EB70(v69->i16, v50, v79, v78, v77, v76);
        else
          sub_23689EC64(v69->i16, v50, v79, v78, v77, (int16x8_t *)v76);
        v68 = 0uLL;
        v80 = (int8x16_t)xmmword_2368AFAC0;
        v81.i64[0] = 0x8000800080008;
        v81.i64[1] = 0x8000800080008;
        if (v53)
          goto LABEL_48;
LABEL_100:
        v67 = (vars8 + 1);
      }
      while (v66++ != v129);
    }
    if (__p)
    {
      a11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v58 = **(unsigned __int8 **)(a1 + 40);
    v59 = **(_QWORD **)(a1 + 80);
    for (k = 1; k != 9; k += 2)
      (&a13)[k] = 0;
    if (v53)
    {
      v61 = v52 + 152 * v58;
      v62 = v51 + 264 * v58;
      v63 = &a21;
      v64 = &a13;
      v65 = v53;
      do
      {
        *v64 = (uint64_t *)v63;
        v64 += 2;
        *(_QWORD *)v63 = v61;
        *((_QWORD *)v63 + 1) = v62;
        v63 += 16;
        --v65;
      }
      while (v65);
    }
    sub_23689CBCC(vars0, v128, v46 & 0x1F0, v129 + 1, v127, v59, v53, &a13);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(**(_QWORD **)(a1 + 16), vars0);
}

unint64_t sub_23689ADE8(unint64_t result, unsigned int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int **v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int **v34;
  float v35;
  unsigned int *v36;
  float v37;
  float v38;
  float v39;
  unsigned int *v40;
  unsigned int *j;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int **v52;
  int v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  unsigned int *v64;
  BOOL v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  char v73;
  unsigned int *v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int **v80;
  unsigned int v81;
  float v82;
  float v83;
  float v84;
  unsigned int *i;
  unsigned int **v86;
  unsigned int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t *v94;
  float v95;
  float v96;
  unsigned int v97;
  float v98;
  float v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  float v104;
  float v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int **v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  float v116;
  float v117;
  unsigned int *v118;
  unsigned int **v119;
  float v120;
  uint64_t v121;
  unsigned int v122;
  float v123;
  float v124;
  float v125;
  int64_t v126;
  unsigned int **v127;
  int64_t v128;
  int64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  float v141;
  float v142;
  unsigned int **v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  int v148;
  float v149;
  float v150;
  unsigned int v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int **v158;
  unsigned int *v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  int v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  float v179;
  float v180;
  float v181;
  float v182;
  unsigned int *v183;
  unsigned int **v185;
  float v186;
  float v187;
  unint64_t v188;
  unsigned int v189;
  float v190;
  float v191;
  float v192;
  unsigned int *v193;
  unsigned int **v194;
  unsigned int *v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  float v200;
  float v201;
  float v202;
  unsigned int **v203;
  float v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int v207;
  float v208;
  float v209;
  float v210;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v101 = *v10;
        if (*v10 & 0xFF000000 | (BYTE2(*v10) << 16) | (BYTE1(*v10) << 8) | *v10)
        {
          v102 = *v11;
          if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11)
            || ((v103 = *v11,
                 v104 = (float)((float)((float)((float)BYTE1(*v10) * 0.587)
                                      + (float)((float)*v10 * 0.299))
                              + (float)((float)BYTE2(*v10) * 0.114))
                      + 0.01,
                 **a3 != (unsigned int *)4)
              ? (v105 = (float)((float)((float)((float)BYTE1(v102) * 0.587) + (float)((float)v103 * 0.299))
                              + (float)((float)BYTE2(v102) * 0.114))
                      + 0.01)
              : (v104 = v104 * (float)HIBYTE(v101),
                 v105 = (float)((float)((float)((float)((float)BYTE1(v102) * 0.587) + (float)((float)v103 * 0.299))
                                      + (float)((float)BYTE2(v102) * 0.114))
                              + 0.01)
                      * (float)HIBYTE(v102)),
                v104 < v105))
          {
            *v11 = v101;
            *v10 = v102;
          }
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_23689D700(v11, v11 + 1, a2 - 1, *a3);
      case 4uLL:
        return (unint64_t)sub_23689DB8C(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5uLL:
        return (unint64_t)sub_23689DEE8(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v126 = (v13 - 2) >> 1;
              v127 = *a3;
              v128 = v126;
              do
              {
                v129 = v128;
                if (v126 >= v128)
                {
                  v130 = (2 * v128) | 1;
                  v131 = &v11[v130];
                  if (2 * v129 + 2 < (uint64_t)v13)
                  {
                    v132 = v131 + 1;
                    if (*v131 & 0xFF000000 | (BYTE2(*v131) << 16) | (BYTE1(*v131) << 8) | *v131)
                    {
                      v133 = *v132;
                      if (!(*v132 & 0xFF000000 | (BYTE2(*v132) << 16) | (BYTE1(*v132) << 8) | *v132)
                        || ((v134 = (float)((float)((float)((float)BYTE1(*v131) * 0.587)
                                                  + (float)((float)*v131 * 0.299))
                                          + (float)((float)BYTE2(*v131) * 0.114))
                                  + 0.01,
                             v135 = (float)*v132,
                             v136 = (float)BYTE1(v133),
                             *v127 != (unsigned int *)4)
                          ? (v137 = (float)((float)((float)(v136 * 0.587) + (float)(v135 * 0.299))
                                          + (float)((float)BYTE2(v133) * 0.114))
                                  + 0.01)
                          : (v134 = v134 * (float)HIBYTE(*v131),
                             v137 = (float)((float)((float)((float)(v136 * 0.587) + (float)(v135 * 0.299))
                                                  + (float)((float)BYTE2(v133) * 0.114))
                                          + 0.01)
                                  * (float)HIBYTE(v133)),
                            v134 < v137))
                      {
                        ++v131;
                        v130 = 2 * v129 + 2;
                      }
                    }
                  }
                  v138 = *v131;
                  v139 = v11[v129];
                  if (!(*v131 & 0xFF000000 | (BYTE2(*v131) << 16) | (BYTE1(*v131) << 8) | *v131)
                    || (result = v139 >> 8,
                        v11[v129] & 0xFF000000 | (BYTE2(v11[v129]) << 16) | (BYTE1(v11[v129]) << 8) | v11[v129])
                    && ((result = BYTE1(v139),
                         v140 = v11[v129],
                         v141 = (float)((float)((float)((float)BYTE1(*v131) * 0.587)
                                              + (float)((float)*v131 * 0.299))
                                      + (float)((float)BYTE2(*v131) * 0.114))
                              + 0.01,
                         *v127 != (unsigned int *)4)
                      ? (v142 = (float)((float)((float)((float)BYTE1(v139) * 0.587) + (float)((float)v140 * 0.299))
                                      + (float)((float)BYTE2(v139) * 0.114))
                              + 0.01)
                      : (v141 = v141 * (float)HIBYTE(v138),
                         v142 = (float)((float)((float)((float)((float)BYTE1(v139) * 0.587)
                                                      + (float)((float)v140 * 0.299))
                                              + (float)((float)BYTE2(v139) * 0.114))
                                      + 0.01)
                              * (float)HIBYTE(v139)),
                        v141 >= v142))
                  {
                    v11[v129] = v138;
                    if (v126 >= v130)
                    {
                      v143 = *a3;
                      while (1)
                      {
                        v144 = 2 * v130;
                        v130 = (2 * v130) | 1;
                        result = (unint64_t)&v11[v130];
                        v145 = v144 + 2;
                        if (v145 < (uint64_t)v13)
                        {
                          v146 = (unsigned int *)(result + 4);
                          if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                          {
                            v147 = *v146;
                            if (!(*v146 & 0xFF000000 | (BYTE2(*v146) << 16) | (BYTE1(*v146) << 8) | *v146)
                              || ((v148 = *v146,
                                   v149 = (float)((float)((float)((float)BYTE1(*(_DWORD *)result)
                                                                * 0.587)
                                                        + (float)((float)*(_DWORD *)result * 0.299))
                                                + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                        + 0.01,
                                   *v143 != (unsigned int *)4)
                                ? (v150 = (float)((float)((float)((float)BYTE1(v147) * 0.587)
                                                        + (float)((float)v148 * 0.299))
                                                + (float)((float)BYTE2(v147) * 0.114))
                                        + 0.01)
                                : (v149 = v149 * (float)HIBYTE(*(_DWORD *)result),
                                   v150 = (float)((float)((float)((float)((float)BYTE1(v147) * 0.587)
                                                                + (float)((float)v148 * 0.299))
                                                        + (float)((float)BYTE2(v147) * 0.114))
                                                + 0.01)
                                        * (float)HIBYTE(v147)),
                                  v149 < v150))
                            {
                              result += 4;
                              v130 = v145;
                            }
                          }
                        }
                        v151 = *(_DWORD *)result;
                        if (*(_DWORD *)result & 0xFF000000 | (BYTE2(*(_DWORD *)result) << 16) | (BYTE1(*(_DWORD *)result) << 8) | *(_DWORD *)result)
                        {
                          if (!(v139 & 0xFF000000 | (BYTE2(v139) << 16) | (BYTE1(v139) << 8) | v139))
                            break;
                          v152 = (float)HIBYTE(v151);
                          if (*v143 != (unsigned int *)4)
                            v152 = 1.0;
                          v153 = (float)((float)((float)((float)((float)BYTE1(*(_DWORD *)result) * 0.587)
                                                       + (float)((float)*(_DWORD *)result * 0.299))
                                               + (float)((float)BYTE2(*(_DWORD *)result) * 0.114))
                                       + 0.01)
                               * v152;
                          v154 = *v143 == (unsigned int *)4 ? (float)HIBYTE(v139) : 1.0;
                          if (v153 < (float)((float)((float)((float)((float)((float)BYTE1(v139) * 0.587)
                                                                    + (float)((float)v139 * 0.299))
                                                            + (float)((float)BYTE2(v139) * 0.114))
                                                    + 0.01)
                                            * v154))
                            break;
                        }
                        *v131 = v151;
                        v131 = (unsigned int *)result;
                        if (v126 < v130)
                          goto LABEL_218;
                      }
                    }
                    result = (unint64_t)v131;
LABEL_218:
                    *(_DWORD *)result = v139;
                  }
                }
                v128 = v129 - 1;
              }
              while (v129);
              v155 = (unint64_t)v12 >> 2;
              do
              {
                v156 = 0;
                v157 = *v11;
                v158 = *a3;
                v159 = v11;
                do
                {
                  v160 = v159;
                  v159 += v156 + 1;
                  v161 = 2 * v156;
                  v156 = (2 * v156) | 1;
                  v162 = v161 + 2;
                  if (v162 < v155)
                  {
                    v163 = v159 + 1;
                    result = *v159 >> 8;
                    if (*v159 & 0xFF000000 | (BYTE2(*v159) << 16) | (BYTE1(*v159) << 8) | *v159)
                    {
                      result = *v163;
                      if (!(*v163 & 0xFF000000 | (BYTE2(*v163) << 16) | (BYTE1(*v163) << 8) | *v163)
                        || ((v164 = BYTE2(result),
                             v165 = (float)((float)((float)((float)BYTE1(*v159) * 0.587)
                                                  + (float)((float)*v159 * 0.299))
                                          + (float)((float)BYTE2(*v159) * 0.114))
                                  + 0.01,
                             v166 = (float)*v163,
                             v167 = (float)BYTE1(result),
                             *v158 != (unsigned int *)4)
                          ? (v168 = (float)((float)((float)(v167 * 0.587) + (float)(v166 * 0.299))
                                          + (float)((float)BYTE2(result) * 0.114))
                                  + 0.01)
                          : (result = BYTE3(result),
                             v165 = v165 * (float)HIBYTE(*v159),
                             v168 = (float)((float)((float)((float)(v167 * 0.587) + (float)(v166 * 0.299))
                                                  + (float)((float)v164 * 0.114))
                                          + 0.01)
                                  * (float)(int)result),
                            v165 < v168))
                      {
                        ++v159;
                        v156 = v162;
                      }
                    }
                  }
                  *v160 = *v159;
                }
                while (v156 <= (uint64_t)((unint64_t)(v155 - 2) >> 1));
                if (v159 == --a2)
                {
                  *v159 = v157;
                }
                else
                {
                  *v159 = *a2;
                  *a2 = v157;
                  v169 = (char *)v159 - (char *)v11 + 4;
                  if (v169 >= 5)
                  {
                    v170 = ((unint64_t)v169 >> 2) - 2;
                    v171 = v170 >> 1;
                    v172 = &v11[v170 >> 1];
                    v173 = *v172;
                    if (*v172 & 0xFF000000 | (BYTE2(*v172) << 16) | (BYTE1(*v172) << 8) | *v172)
                    {
                      v174 = *v159;
                      v175 = HIBYTE(*v159);
                      result = BYTE2(*v159);
                      v176 = BYTE1(*v159);
                      v177 = *v159;
                      v178 = *v159 & 0xFF000000 | (BYTE2(*v159) << 16) | (v176 << 8) | v177;
                      if (!v178
                        || ((v179 = (float)((float)((float)((float)BYTE1(*v172) * 0.587)
                                                  + (float)((float)*v172 * 0.299))
                                          + (float)((float)BYTE2(*v172) * 0.114))
                                  + 0.01,
                             v180 = (float)v177,
                             v181 = (float)v176,
                             *v158 != (unsigned int *)4)
                          ? (v182 = (float)((float)((float)(v181 * 0.587) + (float)(v180 * 0.299))
                                          + (float)((float)(int)result * 0.114))
                                  + 0.01)
                          : (v179 = v179 * (float)HIBYTE(v173),
                             v182 = (float)((float)((float)((float)(v181 * 0.587) + (float)(v180 * 0.299))
                                                  + (float)((float)(int)result * 0.114))
                                          + 0.01)
                                  * (float)v175),
                            v179 < v182))
                      {
                        *v159 = v173;
                        if (v170 >= 2)
                        {
                          v185 = *a3;
                          v186 = (float)((float)((float)((float)v176 * 0.587) + (float)((float)v177 * 0.299))
                                       + (float)((float)(int)result * 0.114))
                               + 0.01;
                          v187 = (float)v175;
                          while (1)
                          {
                            v188 = v171 - 1;
                            v171 = (v171 - 1) >> 1;
                            v183 = &v11[v171];
                            v189 = *v183;
                            result = HIWORD(*v183);
                            if (!(*v183 & 0xFF000000 | (BYTE2(*v183) << 16) | (BYTE1(*v183) << 8) | *v183))
                              break;
                            if (v178)
                            {
                              result = BYTE2(v189);
                              v190 = (float)HIBYTE(v189);
                              if (*v185 != (unsigned int *)4)
                                v190 = 1.0;
                              v191 = (float)((float)((float)((float)((float)BYTE1(*v183) * 0.587)
                                                           + (float)((float)*v183 * 0.299))
                                                   + (float)((float)BYTE2(*v183) * 0.114))
                                           + 0.01)
                                   * v190;
                              v192 = *v185 == (unsigned int *)4 ? v187 : 1.0;
                              if (v191 >= (float)(v186 * v192))
                                break;
                            }
                            *v172 = v189;
                            v172 = &v11[v171];
                            if (v188 <= 1)
                              goto LABEL_242;
                          }
                        }
                        v183 = v172;
LABEL_242:
                        *v183 = v174;
                      }
                    }
                  }
                }
              }
              while (v155-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v11[v13 >> 1];
          v16 = *a3;
          if ((unint64_t)v12 < 0x201)
          {
            result = (unint64_t)sub_23689D700(&v9[v13 >> 1], v9, a2 - 1, v16);
          }
          else
          {
            sub_23689D700(v9, &v9[v13 >> 1], a2 - 1, v16);
            sub_23689D700(v9 + 1, v15 - 1, a2 - 2, *a3);
            sub_23689D700(v9 + 2, &v9[v14 + 1], a2 - 3, *a3);
            result = (unint64_t)sub_23689D700(v15 - 1, v15, &v9[v14 + 1], *a3);
            v17 = *v9;
            *v9 = *v15;
            *v15 = v17;
          }
          v18 = *v9;
          v19 = HIBYTE(*v9);
          --a4;
          if ((a5 & 1) == 0)
          {
            v20 = *(v9 - 1);
            v21 = *v9;
            v22 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(*v9) << 8) | v21;
            if (v20 & 0xFF000000 | (BYTE2(v20) << 16) | (BYTE1(v20) << 8) | v20)
            {
              if (!v22)
                goto LABEL_16;
              result = v20;
              v23 = (unint64_t *)*a3;
              v24 = (float)((float)((float)((float)BYTE1(v20) * 0.587) + (float)((float)v20 * 0.299))
                          + (float)((float)BYTE2(v20) * 0.114))
                  + 0.01;
              v25 = (float)v21;
              v26 = (float)BYTE1(v18);
              if (**a3 == (unsigned int *)4)
              {
                v24 = v24 * (float)HIBYTE(v20);
                v27 = (float)((float)((float)((float)(v26 * 0.587) + (float)(v25 * 0.299))
                                    + (float)((float)BYTE2(v18) * 0.114))
                            + 0.01)
                    * (float)v19;
              }
              else
              {
                v27 = (float)((float)((float)(v26 * 0.587) + (float)(v25 * 0.299)) + (float)((float)BYTE2(v18) * 0.114))
                    + 0.01;
              }
              if (v24 < v27)
                goto LABEL_16;
            }
            else
            {
              if (!v22)
              {
                v73 = 1;
                goto LABEL_97;
              }
              v23 = (unint64_t *)*a3;
            }
            v66 = *v10;
            v67 = (float)BYTE1(v18);
            if (!(*v10 & 0xFF000000 | (BYTE2(*v10) << 16) | (BYTE1(*v10) << 8) | *v10))
            {
              v68 = (float)((float)((float)(v67 * 0.587) + (float)((float)v21 * 0.299))
                          + (float)((float)BYTE2(v18) * 0.114))
                  + 0.01;
LABEL_87:
              v74 = v9 + 1;
              do
              {
                v11 = v74;
                v75 = *v74;
                if (!(v75 & 0xFF000000 | (BYTE2(v75) << 16) | (BYTE1(v75) << 8) | v75))
                  break;
                v76 = (float)HIBYTE(v75);
                if (*v23 == 4)
                  v77 = (float)v19;
                else
                  v77 = 1.0;
                v78 = v68 * v77;
                if (*v23 != 4)
                  v76 = 1.0;
                v79 = (float)((float)((float)((float)((float)BYTE1(v75) * 0.587)
                                            + (float)((float)v75 * 0.299))
                                    + (float)((float)BYTE2(v75) * 0.114))
                            + 0.01)
                    * v76;
                v74 = v11 + 1;
              }
              while (v78 >= v79);
LABEL_95:
              v73 = 0;
              goto LABEL_108;
            }
            result = *v23;
            v68 = (float)((float)((float)(v67 * 0.587) + (float)((float)v21 * 0.299))
                        + (float)((float)BYTE2(v18) * 0.114))
                + 0.01;
            v69 = (float)*v10;
            v70 = (float)BYTE1(v66);
            if (*v23 == 4)
            {
              v71 = v68 * (float)v19;
              v72 = (float)((float)((float)((float)(v70 * 0.587) + (float)(v69 * 0.299))
                                  + (float)((float)BYTE2(v66) * 0.114))
                          + 0.01)
                  * (float)HIBYTE(v66);
            }
            else
            {
              v72 = (float)((float)((float)(v70 * 0.587) + (float)(v69 * 0.299)) + (float)((float)BYTE2(v66) * 0.114))
                  + 0.01;
              v71 = v68;
            }
            if (v71 < v72)
              goto LABEL_87;
            v73 = 0;
LABEL_97:
            v11 = v9 + 1;
            if (v9 + 1 < a2)
            {
              v80 = *a3;
              do
              {
                if ((v73 & 1) == 0)
                {
                  v81 = *v11;
                  result = *v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11;
                  if (!(_DWORD)result)
                    goto LABEL_95;
                  result = *v11;
                  v82 = (float)HIBYTE(v81);
                  if (*v80 == (unsigned int *)4)
                    v83 = (float)v19;
                  else
                    v83 = 1.0;
                  v84 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                      + (float)((float)BYTE2(v18) * 0.114))
                              + 0.01)
                      * v83;
                  if (*v80 != (unsigned int *)4)
                    v82 = 1.0;
                  if (v84 < (float)((float)((float)((float)((float)((float)BYTE1(v81) * 0.587)
                                                           + (float)((float)(int)result * 0.299))
                                                   + (float)((float)BYTE2(v81) * 0.114))
                                           + 0.01)
                                   * v82))
                    goto LABEL_95;
                }
                ++v11;
              }
              while (v11 < a2);
            }
LABEL_108:
            if (v11 < a2)
              i = a2 - 1;
            else
              i = a2;
            if (v11 < a2 && (v73 & 1) == 0)
            {
              v86 = *a3;
              for (i = a2 - 1; ; --i)
              {
                v87 = *i;
                if (*i & 0xFF000000 | (BYTE2(*i) << 16) | (BYTE1(*i) << 8) | *i)
                {
                  result = BYTE1(v87);
                  v88 = (float)HIBYTE(v87);
                  if (*v86 == (unsigned int *)4)
                    v89 = (float)v19;
                  else
                    v89 = 1.0;
                  v90 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                      + (float)((float)BYTE2(v18) * 0.114))
                              + 0.01)
                      * v89;
                  if (*v86 != (unsigned int *)4)
                    v88 = 1.0;
                  if (v90 >= (float)((float)((float)((float)((float)((float)BYTE1(*i) * 0.587)
                                                            + (float)((float)*i * 0.299))
                                                    + (float)((float)BYTE2(*i) * 0.114))
                                            + 0.01)
                                    * v88))
                    break;
                }
              }
            }
            if (v11 < i)
            {
              v91 = (float)((float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                  + (float)((float)BYTE2(v18) * 0.114))
                          + 0.01)
                  * (float)v19;
              v92 = *v11;
              v93 = *i;
              do
              {
                *v11++ = v93;
                *i = v92;
                v94 = (unint64_t *)*a3;
                if ((v73 & 1) != 0)
                  goto LABEL_132;
                while (1)
                {
                  v92 = *v11;
                  if (!(*v11 & 0xFF000000 | (BYTE2(*v11) << 16) | (BYTE1(*v11) << 8) | *v11))
                    break;
                  v95 = (float)HIBYTE(v92);
                  if (*v94 == 4)
                    v96 = v91;
                  else
                    v96 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                  if (*v94 != 4)
                    v95 = 1.0;
                  if (v96 < (float)((float)((float)((float)((float)((float)BYTE1(*v11) * 0.587)
                                                           + (float)((float)*v11 * 0.299))
                                                   + (float)((float)BYTE2(*v11) * 0.114))
                                           + 0.01)
                                   * v95))
                    break;
                  do
LABEL_132:
                    ++v11;
                  while ((v73 & 1) != 0);
                }
                do
                {
                  do
                  {
                    v97 = *--i;
                    v93 = v97;
                  }
                  while (!(v97 & 0xFF000000 | (BYTE2(v97) << 16) | (BYTE1(v97) << 8) | v97));
                  result = *v94;
                  v98 = (float)HIBYTE(v93);
                  if (*v94 == 4)
                    v99 = v91;
                  else
                    v99 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v21 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                  if (*v94 != 4)
                    v98 = 1.0;
                }
                while (v99 < (float)((float)((float)((float)((float)((float)BYTE1(v93) * 0.587)
                                                            + (float)((float)v93 * 0.299))
                                                    + (float)((float)BYTE2(v93) * 0.114))
                                            + 0.01)
                                    * v98));
              }
              while (v11 < i);
            }
            v100 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v100;
            a5 = 0;
            *v100 = v18;
            continue;
          }
LABEL_16:
          v29 = v9 + 1;
          v28 = v9[1];
          if (!(v28 & 0xFF000000 | (BYTE2(v28) << 16) | (BYTE1(v28) << 8) | v28))
            goto LABEL_38;
          v30 = BYTE2(v28);
          v31 = BYTE1(v28);
          v32 = v28;
          v33 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9;
          v34 = *a3;
          v35 = (float)((float)((float)((float)BYTE1(*v9) * 0.587)
                              + (float)((float)*v9 * 0.299))
                      + (float)((float)BYTE2(*v9) * 0.114))
              + 0.01;
          while (1)
          {
            v36 = v29;
            if (v33)
            {
              v37 = (float)HIBYTE(v28);
              if (*v34 != (unsigned int *)4)
                v37 = 1.0;
              v38 = (float)((float)((float)((float)((float)v31 * 0.587) + (float)((float)v32 * 0.299))
                                  + (float)((float)v30 * 0.114))
                          + 0.01)
                  * v37;
              v39 = *v34 == (unsigned int *)4 ? (float)v19 : 1.0;
              if (v38 >= (float)(v35 * v39))
                break;
            }
            ++v29;
            v28 = v36[1];
            v30 = BYTE2(v28);
            v31 = BYTE1(v28);
            v32 = v28;
            v40 = v36;
            if (!(v28 & 0xFF000000 | (BYTE2(v28) << 16) | (BYTE1(v28) << 8) | v28))
              goto LABEL_28;
          }
          v40 = v29 - 1;
LABEL_28:
          j = a2 - 1;
          if (v40 == v9)
          {
LABEL_38:
            if (v29 < a2)
            {
              for (j = a2 - 1; ; --j)
              {
                if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
                {
                  if (!(*v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9))
                    goto LABEL_51;
                  v45 = (float)HIBYTE(*j);
                  if (**a3 == (unsigned int *)4)
                  {
                    v46 = (float)v19;
                  }
                  else
                  {
                    v45 = 1.0;
                    v46 = 1.0;
                  }
                  if (v29 >= j
                    || (float)((float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                                     + (float)((float)*j * 0.299))
                                             + (float)((float)BYTE2(*j) * 0.114))
                                     + 0.01)
                             * v45) < (float)((float)((float)((float)((float)((float)BYTE1(*v9) * 0.587)
                                                                    + (float)((float)*v9 * 0.299))
                                                            + (float)((float)BYTE2(*v9) * 0.114))
                                                    + 0.01)
                                            * v46))
                  {
                    goto LABEL_51;
                  }
                }
                else if (v29 >= j)
                {
                  goto LABEL_51;
                }
              }
            }
            j = a2;
          }
          else
          {
            while (1)
            {
              if (*j & 0xFF000000 | (BYTE2(*j) << 16) | (BYTE1(*j) << 8) | *j)
              {
                if (!v33)
                  break;
                v42 = (float)HIBYTE(*j);
                if (*v34 != (unsigned int *)4)
                  v42 = 1.0;
                v43 = (float)((float)((float)((float)((float)BYTE1(*j) * 0.587)
                                            + (float)((float)*j * 0.299))
                                    + (float)((float)BYTE2(*j) * 0.114))
                            + 0.01)
                    * v42;
                v44 = *v34 == (unsigned int *)4 ? (float)v19 : 1.0;
                if (v43 < (float)(v35 * v44))
                  break;
              }
              --j;
            }
          }
LABEL_51:
          v11 = v29;
          if (v29 < j)
          {
            v47 = *v9 & 0xFF000000 | (BYTE2(*v9) << 16) | (BYTE1(v18) << 8) | *v9;
            v48 = (float)((float)((float)((float)((float)BYTE1(*v9) * 0.587)
                                        + (float)((float)*v9 * 0.299))
                                + (float)((float)BYTE2(*v9) * 0.114))
                        + 0.01)
                * (float)v19;
            v49 = *j;
            v11 = v29;
            v50 = j;
            do
            {
              *v11 = v49;
              *v50 = v28;
              v51 = v11[1];
              ++v11;
              v28 = v51;
              v52 = *a3;
              if (v51 & 0xFF000000 | (BYTE2(v51) << 16) | (BYTE1(v51) << 8) | v51)
              {
                v53 = BYTE2(v28);
                v54 = BYTE1(v28);
                v55 = v28;
                do
                {
                  if (v47)
                  {
                    v56 = (float)HIBYTE(v28);
                    if (*v52 != (unsigned int *)4)
                      v56 = 1.0;
                    v57 = (float)((float)((float)((float)((float)v54 * 0.587) + (float)((float)v55 * 0.299))
                                        + (float)((float)v53 * 0.114))
                                + 0.01)
                        * v56;
                    v58 = *v52 == (unsigned int *)4
                        ? v48
                        : (float)((float)((float)((float)BYTE1(v18) * 0.587)
                                        + (float)((float)v18 * 0.299))
                                + (float)((float)BYTE2(v18) * 0.114))
                        + 0.01;
                    if (v57 >= v58)
                      break;
                  }
                  v59 = v11[1];
                  ++v11;
                  v28 = v59;
                  v53 = BYTE2(v59);
                  v54 = BYTE1(v59);
                  v55 = v59;
                }
                while (v59 & 0xFF000000 | (BYTE2(v59) << 16) | (BYTE1(v59) << 8) | v59);
              }
              do
              {
                do
                {
                  v60 = *--v50;
                  v49 = v60;
                }
                while (!(v60 & 0xFF000000 | (BYTE2(v60) << 16) | (BYTE1(v60) << 8) | v60));
                if (!v47)
                  break;
                v61 = (float)HIBYTE(v49);
                if (*v52 != (unsigned int *)4)
                  v61 = 1.0;
                v62 = (float)((float)((float)((float)((float)BYTE1(v49) * 0.587)
                                            + (float)((float)v49 * 0.299))
                                    + (float)((float)BYTE2(v49) * 0.114))
                            + 0.01)
                    * v61;
                v63 = *v52 == (unsigned int *)4
                    ? v48
                    : (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v18 * 0.299))
                            + (float)((float)BYTE2(v18) * 0.114))
                    + 0.01;
              }
              while (v62 >= v63);
            }
            while (v11 < v50);
          }
          v64 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v64;
          *v64 = v18;
          if (v29 < j)
            goto LABEL_77;
          v65 = sub_23689E350(v9, v11 - 1, a3);
          result = sub_23689E350(v11, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              continue;
LABEL_77:
            result = sub_23689ADE8(v9, v11 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v11 - 1;
          if (v65)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if (v11 == a2)
            return result;
          v193 = v11 + 1;
          if (v11 + 1 == a2)
            return result;
          v194 = *a3;
          while (1)
          {
            v195 = v9;
            v9 = v193;
            v196 = v195[1];
            if (v196 & 0xFF000000 | (BYTE2(v196) << 16) | (BYTE1(v196) << 8) | v196)
            {
              v197 = HIBYTE(v196);
              v198 = v195[1];
              v199 = *v195;
              if (!(*v195 & 0xFF000000 | (BYTE2(*v195) << 16) | (BYTE1(*v195) << 8) | *v195))
              {
                v200 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                             + (float)((float)BYTE2(v196) * 0.114))
                     + 0.01;
LABEL_267:
                v203 = *a3;
                v204 = (float)v197;
                do
                {
                  do
                  {
                    v205 = v195;
                    v206 = v199;
                    v207 = *--v195;
                    v199 = v207;
                    v195[2] = v206;
                  }
                  while (!(v207 & 0xFF000000 | (BYTE2(v207) << 16) | (BYTE1(v207) << 8) | v207));
                  result = (unint64_t)*v203;
                  v208 = (float)HIBYTE(v199);
                  if (*v203 == (unsigned int *)4)
                    v209 = v204;
                  else
                    v209 = 1.0;
                  v210 = v200 * v209;
                  if (*v203 != (unsigned int *)4)
                    v208 = 1.0;
                }
                while (v210 < (float)((float)((float)((float)((float)((float)BYTE1(v199) * 0.587)
                                                             + (float)((float)v199 * 0.299))
                                                     + (float)((float)BYTE2(v199) * 0.114))
                                             + 0.01)
                                     * v208));
                *v205 = v196;
                goto LABEL_276;
              }
              result = *v195;
              v200 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                           + (float)((float)BYTE2(v196) * 0.114))
                   + 0.01;
              if (*v194 == (unsigned int *)4)
              {
                v201 = v200 * (float)v197;
                v202 = (float)((float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)(int)result * 0.299))
                                     + (float)((float)BYTE2(v199) * 0.114))
                             + 0.01)
                     * (float)HIBYTE(v199);
              }
              else
              {
                v202 = (float)((float)((float)((float)BYTE1(v199) * 0.587) + (float)((float)(int)result * 0.299))
                             + (float)((float)BYTE2(v199) * 0.114))
                     + 0.01;
                v201 = (float)((float)((float)((float)BYTE1(v196) * 0.587) + (float)((float)v198 * 0.299))
                             + (float)((float)BYTE2(v196) * 0.114))
                     + 0.01;
              }
              if (v201 < v202)
                goto LABEL_267;
            }
LABEL_276:
            v193 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
        }
        if (v11 != a2)
        {
          v106 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v107 = 0;
            v108 = *a3;
            v109 = v11;
            do
            {
              v110 = v109;
              v109 = v106;
              v111 = v110[1];
              if (v111 & 0xFF000000 | (BYTE2(v111) << 16) | (BYTE1(v111) << 8) | v111)
              {
                v112 = HIBYTE(v111);
                v113 = v110[1];
                v114 = *v110;
                result = HIWORD(*v110);
                if (!(*v110 & 0xFF000000 | (BYTE2(*v110) << 16) | (BYTE1(*v110) << 8) | *v110)
                  || ((result = BYTE2(v114),
                       v115 = *v110,
                       v116 = (float)((float)((float)((float)BYTE1(v111) * 0.587) + (float)((float)v113 * 0.299))
                                    + (float)((float)BYTE2(v111) * 0.114))
                            + 0.01,
                       *v108 != (unsigned int *)4)
                    ? (v117 = (float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v115 * 0.299))
                                    + (float)((float)BYTE2(v114) * 0.114))
                            + 0.01)
                    : (v116 = v116 * (float)v112,
                       v117 = (float)((float)((float)((float)((float)BYTE1(v114) * 0.587) + (float)((float)v115 * 0.299))
                                            + (float)((float)BYTE2(v114) * 0.114))
                                    + 0.01)
                            * (float)HIBYTE(v114)),
                      v116 < v117))
                {
                  v110[1] = v114;
                  v118 = v11;
                  if (v110 != v11)
                  {
                    v119 = *a3;
                    v120 = (float)v112;
                    v121 = v107;
                    while (1)
                    {
                      v122 = *(unsigned int *)((char *)v11 + v121 - 4);
                      result = v122 & 0xFF000000 | (BYTE2(v122) << 16) | (BYTE1(v122) << 8) | v122;
                      if ((_DWORD)result)
                      {
                        result = *(unsigned int *)((char *)v11 + v121 - 4);
                        v123 = (float)HIBYTE(v122);
                        if (*v119 == (unsigned int *)4)
                          v124 = v120;
                        else
                          v124 = 1.0;
                        v125 = (float)((float)((float)((float)((float)BYTE1(v111) * 0.587) + (float)((float)v113 * 0.299))
                                             + (float)((float)BYTE2(v111) * 0.114))
                                     + 0.01)
                             * v124;
                        if (*v119 != (unsigned int *)4)
                          v123 = 1.0;
                        if (v125 >= (float)((float)((float)((float)((float)((float)BYTE1(v122) * 0.587)
                                                                   + (float)((float)(int)result * 0.299))
                                                           + (float)((float)BYTE2(v122) * 0.114))
                                                   + 0.01)
                                           * v123))
                          break;
                      }
                      *(unsigned int *)((char *)v11 + v121) = v122;
                      v121 -= 4;
                      if (!v121)
                      {
                        v118 = v11;
                        goto LABEL_178;
                      }
                    }
                    v118 = (unsigned int *)((char *)v11 + v121);
                  }
LABEL_178:
                  *v118 = v111;
                }
              }
              v106 = v109 + 1;
              v107 += 4;
            }
            while (v109 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t sub_23689C4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t i;
  uint64_t **v63;
  char *v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t k;
  uint64_t *v69;
  uint64_t *v70;
  __int128 *v71;
  uint64_t **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint16x8_t *v76;
  int v77;
  __int128 v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint32x4_t *v88;
  int16x8_t *v89;
  int32x4_t *v90;
  int32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint32x4_t *v94;
  uint16x8_t *v95;
  uint16x8_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t j;
  _DWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v145;
  __int128 vars0;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;

  v50 = a1;
  a49 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(**(_QWORD **)a1 - (a3 << 8)) >= 0x100)
    v52 = 256;
  else
    v52 = **(_QWORD **)a1 - (a3 << 8);
  v51 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)(*v51 - (a2 << 8)) >= 0x100)
    v53 = 256;
  else
    v53 = *v51 - (a2 << 8);
  a18 = 0;
  v150 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16), a2 << 8, a3 << 8, v53, v52, &a18);
  v54 = (v52 - a4) & ~((v52 - a4) >> 63);
  v55 = (int)(v54 >> 1);
  v56 = v52 - ((unint64_t)v54 >> 1);
  if (v56 >= (int)a4)
    v56 = a4;
  v57 = v53 & 0x1F0;
  v58 = a18;
  v148 = v55;
  v149 = v56;
  v60 = *(uint64_t **)(v50 + 24);
  v59 = *(uint64_t **)(v50 + 32);
  v61 = **(_QWORD **)(v50 + 64);
  if (**(_BYTE **)(v50 + 48))
  {
    v147 = **(unsigned __int8 **)(v50 + 72);
    for (i = 8; i != 72; i += 16)
      *(_QWORD *)(&a22 + i) = 0;
    v145 = v50;
    if (v61)
    {
      v63 = &a30;
      v64 = &a22;
      v65 = v61;
      do
      {
        *(_QWORD *)v64 = v63;
        v64 += 16;
        *v63 = v60;
        v63[1] = v59;
        v63 += 2;
        v59 += 33;
        v60 += 19;
        --v65;
      }
      while (v65);
      sub_23689CDD0(&__p, v61);
    }
    else
    {
      __p = 0;
      a20 = 0;
      a21 = 0;
    }
    if ((_DWORD)v149 != -1)
    {
      v74 = v58;
      v75 = 0;
      v76 = (uint16x8_t *)(v150 + v58 * v148);
      v77 = 1;
      v78 = 0uLL;
      v79 = (int8x16_t)xmmword_2368AF650;
      v80.i64[0] = 0x400000004;
      v80.i64[1] = 0x400000004;
      vars0 = xmmword_2368AF650;
      while (1)
      {
        a40 = v78;
        a41 = v78;
        v81 = (int8x16_t *)(v150 + (v75 + v148) * v74);
        a38 = v78;
        a39 = v78;
        v151 = v77;
        v152 = (uint64_t)v76;
        if (!v61)
          break;
        v82 = 0;
        v83 = 0;
        v84 = &__p[1344 * (v77 & 1) + 128];
        v85 = &__p[1344 * (v75 & 1) + 128];
        v86 = v85;
        v87 = v84;
        do
        {
          *((_QWORD *)&a40 + v83) = &v85[v82 + (v86 & 0x3C)];
          *((_QWORD *)&a38 + v83++) = &v84[v82 + (v87 & 0x3C)];
          v87 += 2688;
          v82 += 2688;
          v86 += 2688;
        }
        while (v61 != v83);
        if (v61 != 1)
        {
          if (v61 == 2)
          {
            if (v147)
              sub_23689CF1C(v81->i16, v57, (uint32x4_t *)a40, *((uint32x4_t **)&a40 + 1));
            else
              sub_23689CFCC(v81->i16, v57, (uint32x4_t *)a40, *((uint32x4_t **)&a40 + 1));
            goto LABEL_51;
          }
          if (v61 == 3)
          {
            if (v147)
              sub_23689D05C(v81->i16, v57, (int32x4_t *)a40, *((int32x4_t **)&a40 + 1), (int16x8_t *)a41);
            else
              sub_23689D160(v81->i16, v57, (int32x4_t *)a40, *((int32x4_t **)&a40 + 1), (int16x8_t *)a41);
LABEL_51:
            v77 = v151;
            v76 = (uint16x8_t *)v152;
            v78 = 0uLL;
            v79 = (int8x16_t)xmmword_2368AF650;
            v80.i64[0] = 0x400000004;
            v80.i64[1] = 0x400000004;
            goto LABEL_52;
          }
          v90 = (int32x4_t *)*((_QWORD *)&a40 + 1);
          v91 = (int32x4_t *)a40;
          v88 = (uint32x4_t *)*((_QWORD *)&a41 + 1);
          v89 = (int16x8_t *)a41;
          goto LABEL_39;
        }
        v92 = a40;
        if (v147)
        {
          sub_23689CE9C(v81, v57, (uint32x4_t *)a40);
          v80.i64[0] = 0x400000004;
          v80.i64[1] = 0x400000004;
          v79 = (int8x16_t)xmmword_2368AF650;
          v78 = 0uLL;
          v77 = v151;
          v76 = (uint16x8_t *)v152;
LABEL_52:
          for (j = 0; j != v61; ++j)
          {
            while (!v75)
            {
              *(_DWORD *)(*((_QWORD *)&a40 + j) - 4) = 0;
              *(_DWORD *)(*((_QWORD *)&a38 + j++) - 4) = 0;
              if (j == v61)
                goto LABEL_103;
            }
            v100 = (_DWORD *)*((_QWORD *)&a38 + j);
            *(_DWORD *)(*((_QWORD *)&a40 + j) - 4) = *v100;
            *(v100 - 1) = *v100;
          }
          v101 = 0;
          while ((v53 & 0x1F0) == 0)
          {
LABEL_102:
            if (++v101 == v61)
              goto LABEL_103;
          }
          v102 = 0;
          v103 = *((_QWORD *)&a40 + v101);
          v104 = *((_QWORD *)&a38 + v101);
          v105 = &a22 + 16 * v101;
          v106 = *((_QWORD *)v105 + 1);
          v107 = v53 & 0x1F0;
          while (2)
          {
            v108 = 0;
            v109 = 0;
            v110 = v107 - 16;
            a44 = v78;
            a45 = v78;
            if (v107 >= 0x10)
              v111 = 16;
            else
              v111 = v107;
            a42 = v78;
            a43 = v78;
            v112 = -4;
            do
            {
              v112 += 4;
              v113 = *(int32x4_t *)(v103 + v108 - 4);
              v114 = *(int32x4_t *)(v104 + v108);
              v115 = *(int32x4_t *)(v104 + v108 - 4);
              v116 = vsubq_s32(v113, v115);
              v117 = (int8x16_t)vsubq_s32(v114, v115);
              v118 = vsubq_s32(*(int32x4_t *)(v103 + v108), (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)veorq_s8((int8x16_t)v116, v117)), (int8x16_t)vaddq_s32(v116, v114), vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)veorq_s8(v117, (int8x16_t)vsubq_s32(v113, v114))), (int8x16_t)v114, (int8x16_t)v113)));
              v119 = (int32x4_t)veorq_s8((int8x16_t)vaddq_s32(v118, v118), (int8x16_t)vcltzq_s32(v118));
              *(__int128 *)((char *)&a42 + v108) = (__int128)v119;
              v120 = vminvq_u32((uint32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v119), v80, v79));
              if (v112 != v109)
                v120 = 0;
              v109 += v120;
              v108 += 16;
            }
            while (v112 < 0xC);
            v121 = v57 - v102;
            if (v57 - v102 >= 0x10)
              v121 = 16;
            v122 = v106;
            if (v109 >= v121)
              v123 = v121;
            else
              v123 = v109;
            if (v109 < v121)
            {
LABEL_76:
              v124 = v122 + v123;
              if (v124 >= 8)
              {
                v126 = **(_QWORD ***)v105;
                v125 = *(_QWORD *)(*(_QWORD *)v105 + 8);
                ++*v126;
                v127 = v124 - 8;
                v128 = 43 - __clz(v127);
                if (!v127)
                  v128 = 12;
                if (v127 >= 0x10)
                  v127 = v128;
                ++*(_QWORD *)(v125 + 8 * v127);
                if (v109 < v121)
                {
                  if (v107 >= v109)
                    v107 = v109;
                  if (v107 >= 0x10)
                    v107 = 16;
                  v129 = v111 - v107;
                  v130 = (unsigned int *)&a42 + v107;
                  do
                  {
                    v131 = *v130++;
                    v132 = 32 - __clz(v131);
                    if (v131)
                      v133 = v132;
                    else
                      v133 = 0;
                    ++v126[v133];
                    --v129;
                  }
                  while (v129);
                }
                v106 = 0;
                goto LABEL_100;
              }
              if (v121)
              {
                v134 = **(_QWORD **)v105;
                v135 = (unsigned int *)&a42;
                do
                {
                  v136 = *v135++;
                  v137 = 32 - __clz(v136);
                  if (v136)
                    v138 = v137;
                  else
                    v138 = 0;
                  ++*(_QWORD *)(v134 + 8 * v138);
                  --v111;
                }
                while (v111);
              }
            }
            else
            {
              if (!v106 && v123 < 8)
              {
                v122 = 0;
                goto LABEL_76;
              }
              v106 += v123;
LABEL_100:
              *((_QWORD *)v105 + 1) = v106;
            }
            v102 += 16;
            v104 += 64;
            v103 += 64;
            v107 = v110;
            if (v102 >= v57)
              goto LABEL_102;
            continue;
          }
        }
        if ((v53 & 0x1F0) != 0)
        {
          v93 = 0;
          v94 = (uint32x4_t *)(a40 + 16);
          v95 = v76;
          do
          {
            v96 = *v95++;
            v94[-1] = vmovl_u16(*(uint16x4_t *)v96.i8);
            *v94 = vmovl_high_u16(v96);
            v97 = v93 + 8;
            v98 = v93 + 16;
            v94 += 2;
            v93 += 8;
          }
          while (v98 <= v57);
        }
        else
        {
          v97 = 0;
        }
        if (v97 < v57)
        {
          v140 = v97 - (v53 & 0xFFFFFFFFFFFFFFF0);
          v141 = v97;
          v142 = (_DWORD *)(v92 + 4 * v97);
          do
            *v142++ = v76->u16[v141++];
          while (!__CFADD__(v140++, 1));
        }
LABEL_43:
        if (v61)
          goto LABEL_52;
LABEL_103:
        ++v77;
        v74 = v58;
        v76 = (uint16x8_t *)((char *)v76 + v58);
        if (v75++ == v149)
          goto LABEL_112;
      }
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
LABEL_39:
      if (v147)
        sub_23689D23C(v81->i16, v57, v91, v90, v89, v88);
      else
        sub_23689D36C(v81->i16, v57, v91, v90, (int32x4_t *)v89, v88);
      v77 = v151;
      v76 = (uint16x8_t *)v152;
      v78 = 0uLL;
      v79 = (int8x16_t)xmmword_2368AF650;
      v80.i64[0] = 0x400000004;
      v80.i64[1] = 0x400000004;
      goto LABEL_43;
    }
LABEL_112:
    if (__p)
    {
      a20 = __p;
      operator delete(__p);
    }
    v50 = v145;
  }
  else
  {
    v66 = **(unsigned __int8 **)(v50 + 40);
    v67 = **(_QWORD **)(v50 + 80);
    for (k = 1; k != 9; k += 2)
      (&a30)[k] = 0;
    if (v61)
    {
      v69 = &v60[19 * v66];
      v70 = &v59[33 * v66];
      v71 = &a42;
      v72 = &a30;
      v73 = v61;
      do
      {
        *v72 = (uint64_t *)v71;
        v72 += 2;
        *(_QWORD *)v71 = v69;
        *((_QWORD *)v71++ + 1) = v70;
        --v73;
      }
      while (v73);
    }
    sub_23689CBCC(v150, v148, v53 & 0x1F0, v149 + 1, v58, v67, v61, &a30);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v50 + 16) + 40))(**(_QWORD **)(v50 + 16), v150);
}

void sub_23689CBCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8)
{
  uint64_t v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  _WORD *v26;
  int *v27;
  unint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[3];

  sub_23689D464((char **)__p);
  if (a4)
  {
    v16 = 0;
    v17 = (int *)(a1 + a5 * a2);
    v18 = a7 - 1;
    do
    {
      v19 = ((v16 & 1u) << 7) | ((unint64_t)(v16 & 1) << 9);
      v20 = __p[0];
      switch(v18)
      {
        case 0:
          if (a3)
          {
            v21 = 0;
            do
            {
              *(_WORD *)((char *)&v20[v21 + 32] + v19) = *(_WORD *)(a6
                                                                  + 2
                                                                  * ((-1640531535
                                                                    * *((unsigned __int8 *)v17 + v21)) >> 16));
              ++v21;
            }
            while (a3 != v21);
          }
          break;
        case 1:
          if (a3)
          {
            v22 = 0;
            do
            {
              *(_WORD *)((char *)&v20[v22 + 32] + v19) = *(_WORD *)(a6
                                                                  + 2
                                                                  * ((-1640531535
                                                                    * *((unsigned __int16 *)v17 + v22)) >> 16));
              ++v22;
            }
            while (a3 != v22);
          }
          break;
        case 2:
          if (a3)
          {
            v23 = 0;
            v24 = (char *)__p[0] + v19 + 64;
            v25 = a3;
            do
            {
              *v24++ = *(_WORD *)(a6
                                + 2
                                * ((-1640531535
                                                * (*(unsigned __int16 *)((char *)v17 + v23) | (*((unsigned __int8 *)v17
                                                                                               + v23
                                                                                               + 2) << 16))) >> 16));
              v23 += 3;
              --v25;
            }
            while (v25);
          }
          break;
        case 3:
          if (a3)
          {
            v26 = (char *)__p[0] + v19 + 64;
            v27 = v17;
            v28 = a3;
            do
            {
              v29 = *v27++;
              *v26++ = *(_WORD *)(a6 + 2 * ((-1640531535 * v29) >> 16));
              --v28;
            }
            while (v28);
          }
          break;
        default:
          break;
      }
      v30 = (char *)v20 + v19;
      if (v16)
      {
        v31 = (char *)&v20[320 * !(v16 & 1)];
        v33 = *((_WORD *)v31 + 32);
        v32 = (uint64_t)(v31 + 64);
        *((_WORD *)v30 + 31) = v33;
        v34 = (uint64_t)(v30 + 62);
        *((_WORD *)v31 + 31) = v33;
        v35 = (uint64_t)(v31 + 62);
      }
      else
      {
        *((_WORD *)v30 + 31) = 0;
        v32 = (uint64_t)(v30 + 62);
        v20[351] = 0;
        v34 = (uint64_t)(v30 + 62);
        v35 = (uint64_t)(v30 + 62);
      }
      sub_23689D4AC(a8, (uint64_t)(v30 + 64), v34, v32, v35, a3);
      ++v16;
      v17 = (int *)((char *)v17 + a5);
    }
    while (v16 != a4);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

_QWORD *sub_23689CDD0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x18618618618619)
      sub_2367C3440();
    v4 = (char *)operator new(2688 * a2);
    *a1 = v4;
    a1[2] = &v4[2688 * a2];
    v5 = 2688 * ((((2688 * a2 - 2688) >> 7) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) + 2688;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23689CE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t *sub_23689CE9C(int8x16_t *result, unint64_t a2, uint32x4_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint32x4_t *v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;

  if (a2 >= 8)
  {
    v4 = 0;
    v5 = a3 + 1;
    v6 = result;
    do
    {
      v7 = *v6++;
      v8 = vrev16q_s8(v7);
      v5[-1] = vmovl_u16(*(uint16x4_t *)v8.i8);
      *v5 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
      v3 = v4 + 8;
      v9 = v4 + 16;
      v5 += 2;
      v4 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    v3 = 0;
  }
  v10 = a2 - v3;
  if (a2 > v3)
  {
    v11 = (unsigned int *)a3 + v3;
    v12 = (uint64_t)result->i64 + 2 * v3 + 1;
    do
    {
      *v11++ = bswap32(*(unsigned __int16 *)(v12 - 1)) >> 16;
      v12 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_23689CF1C(const __int16 *result, unint64_t a2, uint32x4_t *a3, uint32x4_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint32x4_t *v6;
  uint32x4_t *v7;
  const __int16 *v8;
  int8x16_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  int16x8x2_t v16;

  if (a2 >= 8)
  {
    v5 = 0;
    v6 = a4 + 1;
    v7 = a3 + 1;
    v8 = result;
    do
    {
      v16 = vld2q_s16(v8);
      v8 += 16;
      v9 = vrev16q_s8((int8x16_t)v16.val[0]);
      v16.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v16.val[1]);
      v7[-1] = vmovl_u16(*(uint16x4_t *)v9.i8);
      *v7 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
      v4 = v5 + 8;
      v10 = v5 + 16;
      v6[-1] = vmovl_u16(*(uint16x4_t *)v16.val[0].i8);
      *v6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v16.val[0], (int8x16_t)v16.val[0], 8uLL));
      v6 += 2;
      v7 += 2;
      v5 += 8;
    }
    while (v10 <= a2);
  }
  else
  {
    v4 = 0;
  }
  v11 = a2 - v4;
  if (a2 > v4)
  {
    v12 = (unsigned int *)a4 + v4;
    v13 = (unsigned int *)a3 + v4;
    v14 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      v15 = bswap32(*(unsigned __int16 *)(v14 + 1));
      *v13++ = bswap32(*(unsigned __int16 *)(v14 - 1)) >> 16;
      *v12++ = HIWORD(v15);
      v14 += 4;
      --v11;
    }
    while (v11);
  }
  return result;
}

const __int16 *sub_23689CFCC(const __int16 *result, unint64_t a2, uint32x4_t *a3, uint32x4_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint32x4_t *v6;
  uint32x4_t *v7;
  const __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  uint64_t v13;
  __int32 v14;
  int16x8x2_t v15;

  if (a2 >= 8)
  {
    v5 = 0;
    v6 = a4 + 1;
    v7 = a3 + 1;
    v8 = result;
    do
    {
      v15 = vld2q_s16(v8);
      v8 += 16;
      v7[-1] = vmovl_u16(*(uint16x4_t *)v15.val[0].i8);
      *v7 = vmovl_high_u16((uint16x8_t)v15.val[0]);
      v4 = v5 + 8;
      v9 = v5 + 16;
      v6[-1] = vmovl_u16(*(uint16x4_t *)v15.val[1].i8);
      *v6 = vmovl_high_u16((uint16x8_t)v15.val[1]);
      v6 += 2;
      v7 += 2;
      v5 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    v4 = 0;
  }
  v10 = a2 - v4;
  if (a2 > v4)
  {
    v11 = &a4->i32[v4];
    v12 = &a3->i32[v4];
    v13 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      v14 = *(unsigned __int16 *)(v13 + 1);
      *v12++ = *(unsigned __int16 *)(v13 - 1);
      *v11++ = v14;
      v13 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_23689D05C(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x8_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  int16x8_t *v7;
  int32x4_t *v8;
  int32x4_t *v9;
  const __int16 *v10;
  uint16x8_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  signed int *v19;
  __int32 *v20;
  const __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  signed int v24;
  int v25;
  int v26;
  int16x8x3_t v27;

  if (a2 >= 8)
  {
    v6 = 0;
    v7 = a5 + 1;
    v8 = a4 + 1;
    v9 = a3 + 1;
    v10 = result;
    do
    {
      v27 = vld3q_s16(v10);
      v10 += 24;
      v11 = (uint16x8_t)vrev16q_s8((int8x16_t)v27.val[0]);
      v12 = vrev16q_s8((int8x16_t)v27.val[1]);
      v27.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v27.val[2]);
      v27.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v12.i8);
      v27.val[2] = (int16x8_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
      v13 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v27.val[0].i8);
      v14 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.val[0].i8), v13, 1uLL);
      v27.val[1] = (int16x8_t)vsubq_s32((int32x4_t)v27.val[1], v14);
      v15 = (int32x4_t)vsubl_high_u16(v11, (uint16x8_t)v27.val[0]);
      v27.val[0] = (int16x8_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v15, 1uLL), (uint16x8_t)v27.val[0]);
      v27.val[2] = (int16x8_t)vsubq_s32((int32x4_t)v27.val[2], (int32x4_t)v27.val[0]);
      v9[-1] = vsraq_n_s32(v14, (int32x4_t)v27.val[1], 1uLL);
      v8[-1] = v13;
      v7[-1] = v27.val[1];
      *v9 = vsraq_n_s32((int32x4_t)v27.val[0], (int32x4_t)v27.val[2], 1uLL);
      v9 += 2;
      *v8 = v15;
      v8 += 2;
      v5 = v6 + 8;
      v16 = v6 + 16;
      *v7 = v27.val[2];
      v7 += 2;
      v6 += 8;
    }
    while (v16 <= a2);
  }
  else
  {
    v5 = 0;
  }
  v17 = a2 - v5;
  if (a2 > v5)
  {
    v18 = &a5->i32[v5];
    v19 = &a4->i32[v5];
    v20 = &a3->i32[v5];
    v21 = &result[3 * v5 + 1];
    do
    {
      v22 = bswap32(*(unsigned __int16 *)v21);
      v23 = bswap32(*((unsigned __int16 *)v21 + 1));
      v24 = (bswap32(*((unsigned __int16 *)v21 - 1)) >> 16) - HIWORD(v23);
      *v19++ = v24;
      v25 = (v24 >> 1) + HIWORD(v23);
      v26 = HIWORD(v22) - v25;
      *v18++ = v26;
      *v20++ = v25 + (v26 >> 1);
      v21 += 3;
      --v17;
    }
    while (v17);
  }
  return result;
}

const __int16 *sub_23689D160(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x8_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  int16x8_t *v7;
  int32x4_t *v8;
  int32x4_t *v9;
  const __int16 *v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  __int32 *v19;
  const __int16 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int16x8x3_t v26;

  if (a2 >= 8)
  {
    v6 = 0;
    v7 = a5 + 1;
    v8 = a4 + 1;
    v9 = a3 + 1;
    v10 = result;
    do
    {
      v26 = vld3q_s16(v10);
      v10 += 24;
      v11 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v26.val[0].i8, *(uint16x4_t *)v26.val[2].i8);
      v12 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.val[2].i8), v11, 1uLL);
      v13 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.val[1].i8), v12);
      v14 = (int32x4_t)vsubl_high_u16((uint16x8_t)v26.val[0], (uint16x8_t)v26.val[2]);
      v26.val[0] = (int16x8_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v14, 1uLL), (uint16x8_t)v26.val[2]);
      v26.val[1] = (int16x8_t)vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v26.val[1]), (int32x4_t)v26.val[0]);
      v9[-1] = vsraq_n_s32(v12, v13, 1uLL);
      v8[-1] = v11;
      v7[-1] = (int16x8_t)v13;
      *v9 = vsraq_n_s32((int32x4_t)v26.val[0], (int32x4_t)v26.val[1], 1uLL);
      v9 += 2;
      *v8 = v14;
      v8 += 2;
      v5 = v6 + 8;
      v15 = v6 + 16;
      *v7 = v26.val[1];
      v7 += 2;
      v6 += 8;
    }
    while (v15 <= a2);
  }
  else
  {
    v5 = 0;
  }
  v16 = a2 - v5;
  if (a2 > v5)
  {
    v17 = &a5->i32[v5];
    v18 = &a4->i32[v5];
    v19 = &a3->i32[v5];
    v20 = &result[3 * v5 + 1];
    do
    {
      v21 = *(unsigned __int16 *)v20;
      v22 = *((unsigned __int16 *)v20 + 1);
      v23 = *((unsigned __int16 *)v20 - 1) - v22;
      *v18++ = v23;
      v24 = v22 + (v23 >> 1);
      v25 = v21 - v24;
      *v17++ = v25;
      *v19++ = v24 + (v25 >> 1);
      v20 += 3;
      --v16;
    }
    while (v16);
  }
  return result;
}

const __int16 *sub_23689D23C(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x8_t *a5, uint32x4_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint32x4_t *v8;
  int32x4_t *v9;
  int16x8_t *v10;
  int32x4_t *v11;
  const __int16 *v12;
  uint16x8_t v13;
  int8x16_t v14;
  uint16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int *v22;
  signed int *v23;
  uint64_t v24;
  __int32 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  signed int v29;
  int v30;
  int v31;
  int16x8x4_t v32;

  if (a2 >= 8)
  {
    v7 = 0;
    v8 = a6 + 1;
    v9 = a3 + 1;
    v10 = a5 + 1;
    v11 = a4 + 1;
    v12 = result;
    do
    {
      v32 = vld4q_s16(v12);
      v12 += 32;
      v13 = (uint16x8_t)vrev16q_s8((int8x16_t)v32.val[0]);
      v14 = vrev16q_s8((int8x16_t)v32.val[1]);
      v15 = (uint16x8_t)vrev16q_s8((int8x16_t)v32.val[2]);
      v32.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v32.val[3]);
      v32.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v14.i8);
      v32.val[2] = (int16x8_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
      v16 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v15.i8);
      v32.val[3] = (int16x8_t)vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v15.i8), v16, 1uLL);
      v32.val[1] = (int16x8_t)vsubq_s32((int32x4_t)v32.val[1], (int32x4_t)v32.val[3]);
      v17 = (int32x4_t)vsubl_high_u16(v13, v15);
      v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v17, 1uLL), v15);
      v32.val[2] = (int16x8_t)vsubq_s32((int32x4_t)v32.val[2], v18);
      v9[-1] = vsraq_n_s32((int32x4_t)v32.val[3], (int32x4_t)v32.val[1], 1uLL);
      v11[-1] = v16;
      v10[-1] = v32.val[1];
      *v9 = vsraq_n_s32(v18, (int32x4_t)v32.val[2], 1uLL);
      v9 += 2;
      *v11 = v17;
      v11 += 2;
      *v10 = v32.val[2];
      v10 += 2;
      v8[-1] = vmovl_u16(*(uint16x4_t *)v32.val[0].i8);
      *v8 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v32.val[0], (int8x16_t)v32.val[0], 8uLL));
      v6 = v7 + 8;
      v19 = v7 + 16;
      v8 += 2;
      v7 += 8;
    }
    while (v19 <= a2);
  }
  else
  {
    v6 = 0;
  }
  v20 = a2 - v6;
  if (a2 > v6)
  {
    v21 = (unsigned int *)a6 + v6;
    v22 = &a5->i32[v6];
    v23 = &a4->i32[v6];
    v24 = (uint64_t)&result[4 * v6 + 1] + 1;
    v25 = &a3->i32[v6];
    do
    {
      v26 = bswap32(*(unsigned __int16 *)(v24 - 1));
      v27 = bswap32(*(unsigned __int16 *)(v24 + 1));
      v28 = bswap32(*(unsigned __int16 *)(v24 + 3));
      v29 = (bswap32(*(unsigned __int16 *)(v24 - 3)) >> 16) - HIWORD(v27);
      *v23++ = v29;
      v30 = (v29 >> 1) + HIWORD(v27);
      v31 = HIWORD(v26) - v30;
      *v22++ = v31;
      *v25++ = v30 + (v31 >> 1);
      *v21++ = HIWORD(v28);
      v24 += 8;
      --v20;
    }
    while (v20);
  }
  return result;
}

const __int16 *sub_23689D36C(const __int16 *result, unint64_t a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, uint32x4_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  const __int16 *v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  unint64_t v19;
  uint64_t v20;
  __int32 *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  __int32 *v25;
  int v26;
  int v27;
  __int32 v28;
  int v29;
  int v30;
  int v31;
  int16x8x4_t v32;

  if (a2 >= 8)
  {
    v7 = 0;
    v8 = a6 + 1;
    v9 = a3 + 1;
    v10 = a5 + 1;
    v11 = a4 + 1;
    v12 = result;
    do
    {
      v32 = vld4q_s16(v12);
      v12 += 32;
      v13 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v32.val[0].i8, *(uint16x4_t *)v32.val[2].i8);
      v14 = vsraq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.val[2].i8), v13, 1uLL);
      v15 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.val[1].i8), v14);
      v16 = (int32x4_t)vsubl_high_u16((uint16x8_t)v32.val[0], (uint16x8_t)v32.val[2]);
      v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(v16, 1uLL), (uint16x8_t)v32.val[2]);
      v18 = vsubq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v32.val[1]), v17);
      v9[-1] = vsraq_n_s32(v14, v15, 1uLL);
      v11[-1] = v13;
      v10[-1] = v15;
      *v9 = vsraq_n_s32(v17, v18, 1uLL);
      v9 += 2;
      *v11 = v16;
      v11 += 2;
      *v10 = v18;
      v10 += 2;
      v8[-1] = vmovl_u16(*(uint16x4_t *)v32.val[3].i8);
      *v8 = vmovl_high_u16((uint16x8_t)v32.val[3]);
      v6 = v7 + 8;
      v19 = v7 + 16;
      v8 += 2;
      v7 += 8;
    }
    while (v19 <= a2);
  }
  else
  {
    v6 = 0;
  }
  v20 = a2 - v6;
  if (a2 > v6)
  {
    v21 = &a6->i32[v6];
    v22 = &a5->i32[v6];
    v23 = &a4->i32[v6];
    v24 = (uint64_t)&result[4 * v6 + 1] + 1;
    v25 = &a3->i32[v6];
    do
    {
      v26 = *(unsigned __int16 *)(v24 - 1);
      v27 = *(unsigned __int16 *)(v24 + 1);
      v28 = *(unsigned __int16 *)(v24 + 3);
      v29 = *(unsigned __int16 *)(v24 - 3) - v27;
      *v23++ = v29;
      v30 = v27 + (v29 >> 1);
      v31 = v26 - v30;
      *v22++ = v31;
      *v25++ = v30 + (v31 >> 1);
      *v21++ = v28;
      v24 += 8;
      --v20;
    }
    while (v20);
  }
  return result;
}

char **sub_23689D464(char **a1)
{
  char *v2;
  char *v3;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (char *)operator new(0x500uLL);
  *a1 = v2;
  v3 = v2 + 1280;
  a1[2] = v2 + 1280;
  bzero(v2, 0x500uLL);
  a1[1] = v3;
  return a1;
}

uint64_t **sub_23689D4AC(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t *v7;
  int8x16_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  char v21;
  int16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v6 = 0;
    v7 = result[1];
    v8.i64[0] = 0x8000800080008;
    v8.i64[1] = 0x8000800080008;
    v9 = a6;
    do
    {
      v10 = 0;
      v11 = 0;
      v12 = v9 - 16;
      if (v9 >= 0x10)
        v13 = 16;
      else
        v13 = v9;
      memset(v44, 0, sizeof(v44));
      v14 = 1;
      do
      {
        v15 = *(int16x8_t *)(a3 + 2 * v6 + 2 * v10);
        v16 = *(int16x8_t *)(a4 + 2 * v6 + 2 * v10);
        v17 = *(int16x8_t *)(a5 + 2 * v6 + 2 * v10);
        v18 = vsubq_s16(v15, v17);
        v19 = (int8x16_t)vsubq_s16(v16, v17);
        v20 = vsubq_s16(*(int16x8_t *)(a2 + 2 * v6 + 2 * v10), (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8((int8x16_t)v18, v19)), (int8x16_t)vaddq_s16(v18, v16), vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v19, (int8x16_t)vsubq_s16(v15, v16))), (int8x16_t)v16, (int8x16_t)v15)));
        v21 = v14;
        v22 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v20, v20), (int8x16_t)vcltzq_s16(v20));
        v23 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v22), v8, (int8x16_t)xmmword_2368AFAC0);
        v23.i16[0] = vminvq_u16(v23);
        v44[v10 / 8] = v22;
        if (v11 == v10)
          v24 = v23.u32[0];
        else
          v24 = 0;
        v11 += v24;
        v10 = 8;
        v14 = 0;
      }
      while ((v21 & 1) != 0);
      v25 = a6 - v6;
      if (a6 - v6 >= 0x10)
        v25 = 16;
      v26 = v7;
      if (v11 >= v25)
        v27 = v25;
      else
        v27 = v11;
      if (v11 >= v25)
      {
        if (v27 > 7 || v7 != 0)
        {
          v7 = (uint64_t *)((char *)v7 + v27);
          goto LABEL_39;
        }
        v26 = 0;
      }
      v29 = (unint64_t)v26 + v27;
      if (v29 < 8)
      {
        if (v25)
        {
          v39 = **result;
          v40 = (unsigned __int16 *)v44;
          do
          {
            v41 = *v40++;
            v42 = 32 - __clz(v41);
            if (v41)
              v43 = v42;
            else
              v43 = 0;
            ++*(_QWORD *)(v39 + 8 * v43);
            --v13;
          }
          while (v13);
        }
        goto LABEL_46;
      }
      v30 = (_QWORD *)**result;
      v31 = (*result)[1];
      ++*v30;
      v32 = v29 - 8;
      v33 = 43 - __clz(v32);
      if (!v32)
        v33 = 12;
      if (v32 >= 0x10)
        v32 = v33;
      ++*(_QWORD *)(v31 + 8 * v32);
      if (v11 < v25)
      {
        if (v9 >= v11)
          v9 = v11;
        if (v9 >= 0x10)
          v9 = 16;
        v34 = v13 - v9;
        v35 = (unsigned __int16 *)((unint64_t)v44 | (2 * v9));
        do
        {
          v36 = *v35++;
          v37 = 32 - __clz(v36);
          if (v36)
            v38 = v37;
          else
            v38 = 0;
          ++v30[v38];
          --v34;
        }
        while (v34);
      }
      v7 = 0;
LABEL_39:
      result[1] = v7;
LABEL_46:
      v6 += 16;
      v9 = v12;
    }
    while (v6 < a6);
  }
  return result;
}

unsigned int *sub_23689D700(unsigned int *result, unsigned int *a2, unsigned int *a3, _QWORD *a4)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  float v20;
  unsigned int v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  float v30;
  float v31;

  v4 = *a2;
  v5 = HIBYTE(*a2);
  v6 = BYTE2(*a2);
  v7 = BYTE1(*a2);
  v8 = *a2;
  v9 = *a2 & 0xFF000000 | (v6 << 16) | (v7 << 8) | v8;
  if (!v9)
    goto LABEL_10;
  v10 = *result;
  v11 = HIBYTE(*result);
  v12 = BYTE2(*result);
  v13 = BYTE1(*result);
  v14 = *result;
  v15 = *result & 0xFF000000 | (v12 << 16) | (v13 << 8) | v14;
  if (!v15)
    goto LABEL_7;
  v16 = (float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299)) + (float)((float)v6 * 0.114)) + 0.01;
  if (*a4 == 4)
  {
    v16 = v16 * (float)v5;
    v17 = (float)((float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299))
                        + (float)((float)v12 * 0.114))
                + 0.01)
        * (float)v11;
  }
  else
  {
    v17 = (float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299)) + (float)((float)v12 * 0.114))
        + 0.01;
  }
  if (v16 >= v17)
  {
LABEL_10:
    v21 = *a3;
    if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
    {
      if (!v9
        || ((v22 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                 + (float)((float)*a3 * 0.299))
                         + (float)((float)BYTE2(*a3) * 0.114))
                 + 0.01,
             *a4 != 4)
          ? (v23 = (float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299)) + (float)((float)v6 * 0.114))
                 + 0.01)
          : (v22 = v22 * (float)HIBYTE(v21),
             v23 = (float)((float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299))
                                 + (float)((float)v6 * 0.114))
                         + 0.01)
                 * (float)v5),
            v22 < v23))
      {
        *a2 = v21;
        *a3 = v4;
        v27 = *a2;
        if (*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
        {
          v28 = *result;
          if (!(*result & 0xFF000000 | (BYTE2(*result) << 16) | (BYTE1(*result) << 8) | *result)
            || ((v29 = *result,
                 v30 = (float)((float)((float)((float)BYTE1(*a2) * 0.587)
                                     + (float)((float)*a2 * 0.299))
                             + (float)((float)BYTE2(*a2) * 0.114))
                     + 0.01,
                 *a4 != 4)
              ? (v31 = (float)((float)((float)((float)BYTE1(v28) * 0.587) + (float)((float)v29 * 0.299))
                             + (float)((float)BYTE2(v28) * 0.114))
                     + 0.01)
              : (v30 = v30 * (float)HIBYTE(v27),
                 v31 = (float)((float)((float)((float)((float)BYTE1(v28) * 0.587) + (float)((float)v29 * 0.299))
                                     + (float)((float)BYTE2(v28) * 0.114))
                             + 0.01)
                     * (float)HIBYTE(v28)),
                v30 < v31))
          {
            *result = v27;
            *a2 = v28;
          }
        }
      }
    }
  }
  else
  {
LABEL_7:
    v18 = *a3;
    if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
    {
      v19 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                          + (float)((float)*a3 * 0.299))
                  + (float)((float)BYTE2(*a3) * 0.114))
          + 0.01;
      if (*a4 == 4)
      {
        v19 = v19 * (float)HIBYTE(v18);
        v20 = (float)((float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299))
                            + (float)((float)v6 * 0.114))
                    + 0.01)
            * (float)v5;
      }
      else
      {
        v20 = (float)((float)((float)((float)v7 * 0.587) + (float)((float)v8 * 0.299)) + (float)((float)v6 * 0.114))
            + 0.01;
      }
      if (v19 < v20)
      {
        *result = v18;
LABEL_30:
        *a3 = v10;
        return result;
      }
    }
    *result = v4;
    *a2 = v10;
    v24 = *a3;
    if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
    {
      if (!v15
        || ((v25 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                 + (float)((float)*a3 * 0.299))
                         + (float)((float)BYTE2(*a3) * 0.114))
                 + 0.01,
             *a4 != 4)
          ? (v26 = (float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299))
                         + (float)((float)v12 * 0.114))
                 + 0.01)
          : (v25 = v25 * (float)HIBYTE(v24),
             v26 = (float)((float)((float)((float)((float)v13 * 0.587) + (float)((float)v14 * 0.299))
                                 + (float)((float)v12 * 0.114))
                         + 0.01)
                 * (float)v11),
            v25 < v26))
      {
        *a2 = v24;
        goto LABEL_30;
      }
    }
  }
  return result;
}

unsigned int *sub_23689DB8C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD **a5)
{
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  int v13;
  float v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  float v24;
  float v25;

  result = sub_23689D700(a1, a2, a3, *a5);
  v11 = *a4;
  if (*a4 & 0xFF000000 | (BYTE2(*a4) << 16) | (BYTE1(*a4) << 8) | *a4)
  {
    v12 = *a3;
    if (!(*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
      || ((v13 = *a3,
           v14 = (float)((float)((float)((float)BYTE1(*a4) * 0.587)
                               + (float)((float)*a4 * 0.299))
                       + (float)((float)BYTE2(*a4) * 0.114))
               + 0.01,
           **a5 != 4)
        ? (v15 = (float)((float)((float)((float)BYTE1(v12) * 0.587) + (float)((float)v13 * 0.299))
                       + (float)((float)BYTE2(v12) * 0.114))
               + 0.01)
        : (v14 = v14 * (float)HIBYTE(v11),
           v15 = (float)((float)((float)((float)((float)BYTE1(v12) * 0.587) + (float)((float)v13 * 0.299))
                               + (float)((float)BYTE2(v12) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v12)),
          v14 < v15))
    {
      *a3 = v11;
      *a4 = v12;
      v16 = *a3;
      if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
      {
        v17 = *a2;
        if (!(*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
          || ((v18 = *a2,
               v19 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                   + (float)((float)*a3 * 0.299))
                           + (float)((float)BYTE2(*a3) * 0.114))
                   + 0.01,
               **a5 != 4)
            ? (v20 = (float)((float)((float)((float)BYTE1(v17) * 0.587) + (float)((float)v18 * 0.299))
                           + (float)((float)BYTE2(v17) * 0.114))
                   + 0.01)
            : (v19 = v19 * (float)HIBYTE(v16),
               v20 = (float)((float)((float)((float)((float)BYTE1(v17) * 0.587) + (float)((float)v18 * 0.299))
                                   + (float)((float)BYTE2(v17) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v17)),
              v19 < v20))
        {
          *a2 = v16;
          *a3 = v17;
          v21 = *a2;
          if (*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
          {
            v22 = *a1;
            if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
              || ((v23 = *a1,
                   v24 = (float)((float)((float)((float)BYTE1(*a2) * 0.587)
                                       + (float)((float)*a2 * 0.299))
                               + (float)((float)BYTE2(*a2) * 0.114))
                       + 0.01,
                   **a5 != 4)
                ? (v25 = (float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v23 * 0.299))
                               + (float)((float)BYTE2(v22) * 0.114))
                       + 0.01)
                : (v24 = v24 * (float)HIBYTE(v21),
                   v25 = (float)((float)((float)((float)((float)BYTE1(v22) * 0.587) + (float)((float)v23 * 0.299))
                                       + (float)((float)BYTE2(v22) * 0.114))
                               + 0.01)
                       * (float)HIBYTE(v22)),
                  v24 < v25))
            {
              *a1 = v21;
              *a2 = v22;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned int *sub_23689DEE8(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _QWORD **a6)
{
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  float v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  float v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  float v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  float v31;
  float v32;

  result = sub_23689DB8C(a1, a2, a3, a4, a6);
  v13 = *a5;
  if (*a5 & 0xFF000000 | (BYTE2(*a5) << 16) | (BYTE1(*a5) << 8) | *a5)
  {
    v14 = *a4;
    if (!(*a4 & 0xFF000000 | (BYTE2(*a4) << 16) | (BYTE1(*a4) << 8) | *a4)
      || ((v15 = *a4,
           v16 = (float)((float)((float)((float)BYTE1(*a5) * 0.587)
                               + (float)((float)*a5 * 0.299))
                       + (float)((float)BYTE2(*a5) * 0.114))
               + 0.01,
           **a6 != 4)
        ? (v17 = (float)((float)((float)((float)BYTE1(v14) * 0.587) + (float)((float)v15 * 0.299))
                       + (float)((float)BYTE2(v14) * 0.114))
               + 0.01)
        : (v16 = v16 * (float)HIBYTE(v13),
           v17 = (float)((float)((float)((float)((float)BYTE1(v14) * 0.587) + (float)((float)v15 * 0.299))
                               + (float)((float)BYTE2(v14) * 0.114))
                       + 0.01)
               * (float)HIBYTE(v14)),
          v16 < v17))
    {
      *a4 = v13;
      *a5 = v14;
      v18 = *a4;
      if (*a4 & 0xFF000000 | (BYTE2(*a4) << 16) | (BYTE1(*a4) << 8) | *a4)
      {
        v19 = *a3;
        if (!(*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
          || ((v20 = *a3,
               v21 = (float)((float)((float)((float)BYTE1(*a4) * 0.587)
                                   + (float)((float)*a4 * 0.299))
                           + (float)((float)BYTE2(*a4) * 0.114))
                   + 0.01,
               **a6 != 4)
            ? (v22 = (float)((float)((float)((float)BYTE1(v19) * 0.587) + (float)((float)v20 * 0.299))
                           + (float)((float)BYTE2(v19) * 0.114))
                   + 0.01)
            : (v21 = v21 * (float)HIBYTE(v18),
               v22 = (float)((float)((float)((float)((float)BYTE1(v19) * 0.587) + (float)((float)v20 * 0.299))
                                   + (float)((float)BYTE2(v19) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v19)),
              v21 < v22))
        {
          *a3 = v18;
          *a4 = v19;
          v23 = *a3;
          if (*a3 & 0xFF000000 | (BYTE2(*a3) << 16) | (BYTE1(*a3) << 8) | *a3)
          {
            v24 = *a2;
            if (!(*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
              || ((v25 = *a2,
                   v26 = (float)((float)((float)((float)BYTE1(*a3) * 0.587)
                                       + (float)((float)*a3 * 0.299))
                               + (float)((float)BYTE2(*a3) * 0.114))
                       + 0.01,
                   **a6 != 4)
                ? (v27 = (float)((float)((float)((float)BYTE1(v24) * 0.587) + (float)((float)v25 * 0.299))
                               + (float)((float)BYTE2(v24) * 0.114))
                       + 0.01)
                : (v26 = v26 * (float)HIBYTE(v23),
                   v27 = (float)((float)((float)((float)((float)BYTE1(v24) * 0.587) + (float)((float)v25 * 0.299))
                                       + (float)((float)BYTE2(v24) * 0.114))
                               + 0.01)
                       * (float)HIBYTE(v24)),
                  v26 < v27))
            {
              *a2 = v23;
              *a3 = v24;
              v28 = *a2;
              if (*a2 & 0xFF000000 | (BYTE2(*a2) << 16) | (BYTE1(*a2) << 8) | *a2)
              {
                v29 = *a1;
                if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
                  || ((v30 = *a1,
                       v31 = (float)((float)((float)((float)BYTE1(*a2) * 0.587)
                                           + (float)((float)*a2 * 0.299))
                                   + (float)((float)BYTE2(*a2) * 0.114))
                           + 0.01,
                       **a6 != 4)
                    ? (v32 = (float)((float)((float)((float)BYTE1(v29) * 0.587) + (float)((float)v30 * 0.299))
                                   + (float)((float)BYTE2(v29) * 0.114))
                           + 0.01)
                    : (v31 = v31 * (float)HIBYTE(v28),
                       v32 = (float)((float)((float)((float)((float)BYTE1(v29) * 0.587) + (float)((float)v30 * 0.299))
                                           + (float)((float)BYTE2(v29) * 0.114))
                                   + 0.01)
                           * (float)HIBYTE(v29)),
                      v31 < v32))
                {
                  *a1 = v28;
                  *a2 = v29;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_23689E350(unsigned int *a1, unsigned int *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  float v11;
  float v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int *v26;
  float v27;
  _QWORD *v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      if (v8 & 0xFF000000 | (BYTE2(v8) << 16) | (BYTE1(v8) << 8) | v8)
      {
        v9 = *a1;
        if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
          || ((v10 = *a1,
               v11 = (float)((float)((float)((float)BYTE1(v8) * 0.587) + (float)((float)v8 * 0.299))
                           + (float)((float)BYTE2(v8) * 0.114))
                   + 0.01,
               **a3 != 4)
            ? (v12 = (float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                           + (float)((float)BYTE2(v9) * 0.114))
                   + 0.01)
            : (v11 = v11 * (float)HIBYTE(v8),
               v12 = (float)((float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                                   + (float)((float)BYTE2(v9) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v9)),
              v11 < v12))
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 3:
      sub_23689D700(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_23689DB8C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_23689DEE8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      sub_23689D700(a1, a1 + 1, a1 + 2, *a3);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      v17 = *a3;
      break;
  }
  while (1)
  {
    v18 = *v14;
    if (*v14 & 0xFF000000 | (BYTE2(*v14) << 16) | (BYTE1(*v14) << 8) | *v14)
    {
      v19 = HIBYTE(v18);
      v20 = *v14;
      v21 = *v13;
      if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
        || ((v22 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v20 * 0.299))
                         + (float)((float)BYTE2(v18) * 0.114))
                 + 0.01,
             v23 = (float)*v13,
             v24 = (float)BYTE1(v21),
             *v17 != 4)
          ? (v25 = (float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299)) + (float)((float)BYTE2(v21) * 0.114))
                 + 0.01)
          : (v22 = v22 * (float)v19,
             v25 = (float)((float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299))
                                 + (float)((float)BYTE2(v21) * 0.114))
                         + 0.01)
                 * (float)HIBYTE(v21)),
            v22 < v25))
      {
        *v14 = v21;
        v26 = a1;
        if (v13 != a1)
        {
          v27 = (float)v20;
          v28 = *a3;
          v29 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)(v27 * 0.299))
                      + (float)((float)BYTE2(v18) * 0.114))
              + 0.01;
          v30 = (float)v19;
          v31 = v15;
          while (1)
          {
            v32 = *(unsigned int *)((char *)a1 + v31 + 4);
            if (v32 & 0xFF000000 | (BYTE2(v32) << 16) | (BYTE1(v32) << 8) | v32)
            {
              v33 = (float)HIBYTE(v32);
              if (*v28 == 4)
                v34 = v30;
              else
                v34 = 1.0;
              v35 = v29 * v34;
              if (*v28 != 4)
                v33 = 1.0;
              if (v35 >= (float)((float)((float)((float)((float)((float)BYTE1(v32) * 0.587)
                                                        + (float)((float)v32 * 0.299))
                                                + (float)((float)BYTE2(v32) * 0.114))
                                        + 0.01)
                                * v33))
                break;
            }
            *(unsigned int *)((char *)a1 + v31 + 8) = v32;
            v31 -= 4;
            if (v31 == -8)
            {
              v26 = a1;
              goto LABEL_26;
            }
          }
          v26 = (unsigned int *)((char *)a1 + v31 + 8);
        }
LABEL_26:
        *v26 = v18;
        if (++v16 == 8)
          return v14 + 1 == a2;
      }
    }
    v13 = v14;
    v15 += 4;
    if (++v14 == a2)
      return 1;
  }
}

_QWORD *sub_23689E738(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8CLL)
      sub_2367C3440();
    v4 = (char *)operator new(1408 * a2);
    *a1 = v4;
    a1[2] = &v4[1408 * a2];
    v5 = 1408 * ((1408 * a2 - 1408) / 0x580) + 1408;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23689E7E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t *sub_23689E804(int8x16_t *result, unint64_t a2, int8x16_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t *v6;
  int8x16_t v7;
  unint64_t v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;

  if (a2 >= 8)
  {
    v4 = 0;
    v5 = result;
    v6 = a3;
    do
    {
      v7 = *v5++;
      *v6++ = vrev16q_s8(v7);
      v3 = v4 + 8;
      v8 = v4 + 16;
      v4 += 8;
    }
    while (v8 <= a2);
  }
  else
  {
    v3 = 0;
  }
  v9 = a2 - v3;
  if (a2 > v3)
  {
    v10 = &a3->i16[v3];
    v11 = (uint64_t)result->i64 + 2 * v3 + 1;
    do
    {
      *v10++ = bswap32(*(unsigned __int16 *)(v11 - 1)) >> 16;
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  return result;
}

__int128 *sub_23689E874(__int128 *result, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;

  if (a2 >= 8)
  {
    v4 = 0;
    v5 = result;
    v6 = a3;
    do
    {
      v7 = *v5++;
      *v6++ = v7;
      v3 = v4 + 8;
      v8 = v4 + 16;
      v4 += 8;
    }
    while (v8 <= a2);
  }
  else
  {
    v3 = 0;
  }
  v9 = a2 - v3;
  if (a2 > v3)
  {
    v10 = (_WORD *)a3 + v3;
    v11 = (uint64_t)result + 2 * v3 + 1;
    do
    {
      *v10++ = *(_WORD *)(v11 - 1);
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  return result;
}

const __int16 *sub_23689E8D8(const __int16 *result, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  const __int16 *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int16 *v11;
  __int16 *v12;
  uint64_t v13;
  unsigned int v14;
  int16x8x2_t v15;

  if (a2 >= 8)
  {
    v5 = 0;
    v6 = result;
    v7 = a3;
    v8 = a4;
    do
    {
      v15 = vld2q_s16(v6);
      v6 += 16;
      *v7++ = vrev16q_s8((int8x16_t)v15.val[0]);
      *v8++ = vrev16q_s8((int8x16_t)v15.val[1]);
      v4 = v5 + 8;
      v9 = v5 + 16;
      v5 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    v4 = 0;
  }
  v10 = a2 - v4;
  if (a2 > v4)
  {
    v11 = &a4->i16[v4];
    v12 = &a3->i16[v4];
    v13 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      v14 = bswap32(*(unsigned __int16 *)(v13 + 1));
      *v12++ = bswap32(*(unsigned __int16 *)(v13 - 1)) >> 16;
      *v11++ = HIWORD(v14);
      v13 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_23689E968(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t *v7;
  int16x8_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int16 *v11;
  __int16 *v12;
  uint64_t v13;
  __int16 v14;
  int16x8x2_t v15;

  if (a2 >= 8)
  {
    v5 = 0;
    v6 = result;
    v7 = a3;
    v8 = a4;
    do
    {
      v15 = vld2q_s16(v6);
      v6 += 16;
      *v7++ = v15.val[0];
      *v8++ = v15.val[1];
      v4 = v5 + 8;
      v9 = v5 + 16;
      v5 += 8;
    }
    while (v9 <= a2);
  }
  else
  {
    v4 = 0;
  }
  v10 = a2 - v4;
  if (a2 > v4)
  {
    v11 = &a4->i16[v4];
    v12 = &a3->i16[v4];
    v13 = (uint64_t)&result[2 * v4] + 1;
    do
    {
      v14 = *(_WORD *)(v13 + 1);
      *v12++ = *(_WORD *)(v13 - 1);
      *v11++ = v14;
      v13 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

const __int16 *sub_23689E9E0(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  const __int16 *v7;
  int16x8_t *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t v11;
  int16x8_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  __int16 *v16;
  __int16 *v17;
  const __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int16x8x3_t v23;

  if (a2 >= 8)
  {
    v6 = 0;
    v7 = result;
    v8 = a3;
    v9 = a4;
    v10 = a5;
    do
    {
      v23 = vld3q_s16(v7);
      v7 += 24;
      v11 = (int16x8_t)vrev16q_s8((int8x16_t)v23.val[0]);
      v12 = (int16x8_t)vrev16q_s8((int8x16_t)v23.val[1]);
      v23.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)v23.val[2]);
      v23.val[1] = vsubq_s16(v11, v23.val[0]);
      v23.val[0] = vsraq_n_s16(v23.val[0], v23.val[1], 1uLL);
      v23.val[2] = vsubq_s16(v12, v23.val[0]);
      *v8++ = vsraq_n_s16(v23.val[0], v23.val[2], 1uLL);
      *v9++ = v23.val[1];
      *v10++ = v23.val[2];
      v5 = v6 + 8;
      v13 = v6 + 16;
      v6 += 8;
    }
    while (v13 <= a2);
  }
  else
  {
    v5 = 0;
  }
  v14 = a2 - v5;
  if (a2 > v5)
  {
    v15 = &a5->i16[v5];
    v16 = &a4->i16[v5];
    v17 = &a3->i16[v5];
    v18 = &result[3 * v5 + 1];
    do
    {
      v19 = bswap32(*(unsigned __int16 *)v18);
      v20 = bswap32(*((unsigned __int16 *)v18 + 1));
      v21 = (bswap32(*((unsigned __int16 *)v18 - 1)) >> 16) - HIWORD(v20);
      *v16++ = v21;
      v22 = ((__int16)v21 >> 1) + HIWORD(v20);
      *v15++ = HIWORD(v19) - v22;
      *v17++ = v22 + ((__int16)(HIWORD(v19) - v22) >> 1);
      v18 += 3;
      --v14;
    }
    while (v14);
  }
  return result;
}

const __int16 *sub_23689EAB8(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  const __int16 *v7;
  int16x8_t *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t v11;
  int16x8_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  __int16 *v16;
  __int16 *v17;
  const __int16 *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int16x8x3_t v24;

  if (a2 >= 8)
  {
    v6 = 0;
    v7 = result;
    v8 = a3;
    v9 = a4;
    v10 = a5;
    do
    {
      v24 = vld3q_s16(v7);
      v7 += 24;
      v11 = vsubq_s16(v24.val[0], v24.val[2]);
      v24.val[2] = vsraq_n_s16(v24.val[2], v11, 1uLL);
      v12 = vsubq_s16(v24.val[1], v24.val[2]);
      *v8++ = vsraq_n_s16(v24.val[2], v12, 1uLL);
      *v9++ = v11;
      *v10++ = v12;
      v5 = v6 + 8;
      v13 = v6 + 16;
      v6 += 8;
    }
    while (v13 <= a2);
  }
  else
  {
    v5 = 0;
  }
  v14 = a2 - v5;
  if (a2 > v5)
  {
    v15 = &a5->i16[v5];
    v16 = &a4->i16[v5];
    v17 = &a3->i16[v5];
    v18 = &result[3 * v5 + 1];
    do
    {
      v19 = *v18;
      v20 = *((unsigned __int16 *)v18 + 1);
      v21 = *(v18 - 1) - v20;
      *v16++ = v21;
      v22 = v20 + (v21 >> 1);
      v23 = v19 - v22;
      *v15++ = v23;
      *v17++ = v22 + (v23 >> 1);
      v18 += 3;
      --v14;
    }
    while (v14);
  }
  return result;
}

const __int16 *sub_23689EB70(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5, int8x16_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  const __int16 *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int8x16_t *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int16x8x4_t v29;

  if (a2 >= 8)
  {
    v7 = 0;
    v8 = result;
    v9 = a3;
    v10 = a4;
    v11 = a5;
    v12 = a6;
    do
    {
      v29 = vld4q_s16(v8);
      v8 += 32;
      v13 = (int16x8_t)vrev16q_s8((int8x16_t)v29.val[1]);
      v14 = (int16x8_t)vrev16q_s8((int8x16_t)v29.val[2]);
      v29.val[1] = vsubq_s16((int16x8_t)vrev16q_s8((int8x16_t)v29.val[0]), v14);
      v15 = vsraq_n_s16(v14, v29.val[1], 1uLL);
      v29.val[2] = vsubq_s16(v13, v15);
      *v9++ = vsraq_n_s16(v15, v29.val[2], 1uLL);
      *v10++ = v29.val[1];
      *v11++ = v29.val[2];
      *v12++ = vrev16q_s8((int8x16_t)v29.val[3]);
      v6 = v7 + 8;
      v16 = v7 + 16;
      v7 += 8;
    }
    while (v16 <= a2);
  }
  else
  {
    v6 = 0;
  }
  v17 = a2 - v6;
  if (a2 > v6)
  {
    v18 = &a6->i16[v6];
    v19 = &a5->i16[v6];
    v20 = &a4->i16[v6];
    v21 = (uint64_t)&result[4 * v6 + 1] + 1;
    v22 = &a3->i16[v6];
    do
    {
      v23 = bswap32(*(unsigned __int16 *)(v21 - 1));
      v24 = bswap32(*(unsigned __int16 *)(v21 + 1));
      v25 = bswap32(*(unsigned __int16 *)(v21 + 3));
      v26 = (bswap32(*(unsigned __int16 *)(v21 - 3)) >> 16) - HIWORD(v24);
      *v20++ = v26;
      v27 = ((__int16)v26 >> 1) + HIWORD(v24);
      v28 = HIWORD(v23) - v27;
      *v19++ = v28;
      *v22++ = v27 + ((__int16)v28 >> 1);
      *v18++ = HIWORD(v25);
      v21 += 8;
      --v17;
    }
    while (v17);
  }
  return result;
}

const __int16 *sub_23689EC64(const __int16 *result, unint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x8_t *a5, int16x8_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  const __int16 *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t *v12;
  int16x8_t v13;
  int16x8_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  uint64_t v20;
  __int16 *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int16x8x4_t v28;

  if (a2 >= 8)
  {
    v7 = 0;
    v8 = result;
    v9 = a3;
    v10 = a4;
    v11 = a5;
    v12 = a6;
    do
    {
      v28 = vld4q_s16(v8);
      v8 += 32;
      v13 = vsubq_s16(v28.val[0], v28.val[2]);
      v28.val[2] = vsraq_n_s16(v28.val[2], v13, 1uLL);
      v14 = vsubq_s16(v28.val[1], v28.val[2]);
      *v9++ = vsraq_n_s16(v28.val[2], v14, 1uLL);
      *v10++ = v13;
      *v11++ = v14;
      *v12++ = v28.val[3];
      v6 = v7 + 8;
      v15 = v7 + 16;
      v7 += 8;
    }
    while (v15 <= a2);
  }
  else
  {
    v6 = 0;
  }
  v16 = a2 - v6;
  if (a2 > v6)
  {
    v17 = &a6->i16[v6];
    v18 = &a5->i16[v6];
    v19 = &a4->i16[v6];
    v20 = (uint64_t)&result[4 * v6 + 1] + 1;
    v21 = &a3->i16[v6];
    do
    {
      v22 = *(_WORD *)(v20 - 1);
      v23 = *(unsigned __int16 *)(v20 + 1);
      v24 = *(_WORD *)(v20 + 3);
      v25 = *(_WORD *)(v20 - 3) - v23;
      result = (const __int16 *)v25;
      *v19++ = v25;
      v26 = v23 + ((int)result >> 1);
      v27 = v22 - v26;
      *v18++ = v27;
      *v21++ = v26 + (v27 >> 1);
      *v17++ = v24;
      v20 += 8;
      --v16;
    }
    while (v16);
  }
  return result;
}

BOOL sub_23689ED2C(unsigned int *a1, unsigned int *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  float v11;
  float v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int *v26;
  float v27;
  _QWORD *v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      if (v8 & 0xFF000000 | (BYTE2(v8) << 16) | (BYTE1(v8) << 8) | v8)
      {
        v9 = *a1;
        if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
          || ((v10 = *a1,
               v11 = (float)((float)((float)((float)BYTE1(v8) * 0.587) + (float)((float)v8 * 0.299))
                           + (float)((float)BYTE2(v8) * 0.114))
                   + 0.01,
               **a3 != 4)
            ? (v12 = (float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                           + (float)((float)BYTE2(v9) * 0.114))
                   + 0.01)
            : (v11 = v11 * (float)HIBYTE(v8),
               v12 = (float)((float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                                   + (float)((float)BYTE2(v9) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v9)),
              v11 < v12))
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 3:
      sub_23689D700(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_23689DB8C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_23689DEE8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      sub_23689D700(a1, a1 + 1, a1 + 2, *a3);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      v17 = *a3;
      break;
  }
  while (1)
  {
    v18 = *v14;
    if (*v14 & 0xFF000000 | (BYTE2(*v14) << 16) | (BYTE1(*v14) << 8) | *v14)
    {
      v19 = HIBYTE(v18);
      v20 = *v14;
      v21 = *v13;
      if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
        || ((v22 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v20 * 0.299))
                         + (float)((float)BYTE2(v18) * 0.114))
                 + 0.01,
             v23 = (float)*v13,
             v24 = (float)BYTE1(v21),
             *v17 != 4)
          ? (v25 = (float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299)) + (float)((float)BYTE2(v21) * 0.114))
                 + 0.01)
          : (v22 = v22 * (float)v19,
             v25 = (float)((float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299))
                                 + (float)((float)BYTE2(v21) * 0.114))
                         + 0.01)
                 * (float)HIBYTE(v21)),
            v22 < v25))
      {
        *v14 = v21;
        v26 = a1;
        if (v13 != a1)
        {
          v27 = (float)v20;
          v28 = *a3;
          v29 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)(v27 * 0.299))
                      + (float)((float)BYTE2(v18) * 0.114))
              + 0.01;
          v30 = (float)v19;
          v31 = v15;
          while (1)
          {
            v32 = *(unsigned int *)((char *)a1 + v31 + 4);
            if (v32 & 0xFF000000 | (BYTE2(v32) << 16) | (BYTE1(v32) << 8) | v32)
            {
              v33 = (float)HIBYTE(v32);
              if (*v28 == 4)
                v34 = v30;
              else
                v34 = 1.0;
              v35 = v29 * v34;
              if (*v28 != 4)
                v33 = 1.0;
              if (v35 >= (float)((float)((float)((float)((float)((float)BYTE1(v32) * 0.587)
                                                        + (float)((float)v32 * 0.299))
                                                + (float)((float)BYTE2(v32) * 0.114))
                                        + 0.01)
                                * v33))
                break;
            }
            *(unsigned int *)((char *)a1 + v31 + 8) = v32;
            v31 -= 4;
            if (v31 == -8)
            {
              v26 = a1;
              goto LABEL_26;
            }
          }
          v26 = (unsigned int *)((char *)a1 + v31 + 8);
        }
LABEL_26:
        *v26 = v18;
        if (++v16 == 8)
          return v14 + 1 == a2;
      }
    }
    v13 = v14;
    v15 += 4;
    if (++v14 == a2)
      return 1;
  }
}

uint64_t sub_23689F114(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t i;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  char *v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t result;
  uint64_t j;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _OWORD v320[2];
  int v321;
  _QWORD v322[2];
  __int16 v323;
  _QWORD v324[2];
  __int16 v325;
  _OWORD v326[8];
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;

  v329 = *MEMORY[0x24BDAC8D0];
  if (a1)
    v7 = 16 * a2 * a3 + 100000;
  else
    v7 = 100000;
  sub_236892FC0((uint64_t)a5, v7);
  v8 = 0;
  v9 = *a5;
  v10 = a5[2];
  v11 = a5[3];
  v12 = a5[4] | (1 << v11);
  a5[3] = v11 + 1;
  a5[4] = v12;
  *(_QWORD *)(v9 + v10) = v12;
  v13 = a5[3];
  v14 = v13 & 7;
  v15 = (unint64_t)a5[4] >> (v13 & 0xF8);
  v16 = a5[2] + (v13 >> 3);
  v17 = *a5;
  v18 = v15 | (1 << v14);
  a5[2] = v16;
  a5[3] = v14 + 1;
  a5[4] = v18;
  *(_QWORD *)(v17 + v16) = v18;
  v19 = a5[3];
  v20 = v19 & 7;
  v21 = (unint64_t)a5[4] >> (v19 & 0xF8);
  v22 = a5[2] + (v19 >> 3);
  v23 = *a5;
  a5[2] = v22;
  a5[3] = v20 + 1;
  a5[4] = v21;
  *(_QWORD *)(v23 + v22) = v21;
  v24 = a5[3];
  v25 = v24 & 7;
  v26 = (unint64_t)a5[4] >> (v24 & 0xF8);
  v27 = a5[2] + (v24 >> 3);
  v28 = *a5;
  v29 = v26 | (1 << v25);
  a5[2] = v27;
  a5[3] = v25 + 1;
  a5[4] = v29;
  *(_QWORD *)(v28 + v27) = v29;
  v30 = a5[3];
  v31 = v30 & 7;
  v32 = (unint64_t)a5[4] >> (v30 & 0xF8);
  v33 = a5[2] + (v30 >> 3);
  v34 = *a5;
  a5[2] = v33;
  a5[3] = v31 + 2;
  a5[4] = v32;
  *(_QWORD *)(v34 + v33) = v32;
  v35 = a5[3];
  v36 = v35 & 7;
  v37 = (unint64_t)a5[4] >> (v35 & 0xF8);
  v38 = a5[2] + (v35 >> 3);
  v39 = *a5;
  v40 = v37 | (1 << v36);
  a5[2] = v38;
  a5[3] = v36 + 1;
  a5[4] = v40;
  *(_QWORD *)(v39 + v38) = v40;
  v41 = a5[3];
  v42 = v41 & 7;
  v43 = (unint64_t)a5[4] >> (v41 & 0xF8);
  v44 = a5[2] + (v41 >> 3);
  v45 = *a5;
  a5[2] = v44;
  a5[3] = v42 + 4;
  a5[4] = v43;
  *(_QWORD *)(v45 + v44) = v43;
  v46 = a5[3];
  v47 = v46 & 7;
  v48 = (unint64_t)a5[4] >> (v46 & 0xF8);
  v49 = a5[2] + (v46 >> 3);
  v50 = *a5;
  v51 = v48 | (35 << v47);
  a5[2] = v49;
  a5[3] = v47 + 6;
  a5[4] = v51;
  *(_QWORD *)(v50 + v49) = v51;
  v52 = a5[3];
  v53 = v52 & 7;
  v54 = (unint64_t)a5[4] >> (v52 & 0xF8);
  v55 = a5[2] + (v52 >> 3);
  v56 = *a5;
  v57 = v54 | (1 << v53);
  a5[2] = v55;
  a5[3] = v53 + 2;
  a5[4] = v57;
  *(_QWORD *)(v56 + v55) = v57;
  v58 = a5[3];
  v59 = a5[2] + (v58 >> 3);
  v60 = ((unint64_t)a5[4] >> (v58 & 0xF8)) | (3 << (v58 & 7));
  v61 = *a5;
  a5[2] = v59;
  a5[3] = (v58 & 7) + 2;
  a5[4] = v60;
  *(_QWORD *)(v61 + v59) = v60;
  v62 = a5[3];
  v63 = (unint64_t)a5[4] >> (v62 & 0xF8);
  v64 = v62 & 7;
  v65 = a5[2] + (v62 >> 3);
  v66 = *a5;
  a5[2] = v65;
  a5[3] = v64 + 2;
  a5[4] = v63;
  *(_QWORD *)(v66 + v65) = v63;
  v67 = a5[3];
  v68 = (unint64_t)a5[4] >> (v67 & 0xF8);
  v69 = v67 & 7;
  v70 = a5[2] + (v67 >> 3);
  v71 = *a5;
  v72 = v68 | (1 << v69);
  a5[2] = v70;
  a5[3] = v69 + 2;
  a5[4] = v72;
  *(_QWORD *)(v71 + v70) = v72;
  v73 = a5[3];
  v74 = v73 & 7;
  v75 = (unint64_t)a5[4] >> (v73 & 0xF8);
  v76 = a5[2] + (v73 >> 3);
  v77 = *a5;
  v78 = v75 | (2 << v74);
  a5[2] = v76;
  a5[3] = v74 + 2;
  a5[4] = v78;
  *(_QWORD *)(v77 + v76) = v78;
  v79 = a5[3];
  v80 = v79 & 7;
  v81 = (unint64_t)a5[4] >> (v79 & 0xF8);
  v82 = a5[2] + (v79 >> 3);
  v83 = *a5;
  v84 = v81 | (3 << v80);
  a5[2] = v82;
  a5[3] = v80 + 2;
  a5[4] = v84;
  *(_QWORD *)(v83 + v82) = v84;
  v85 = a5[3];
  v86 = v85 & 7;
  v87 = (unint64_t)a5[4] >> (v85 & 0xF8);
  v88 = a5[2] + (v85 >> 3);
  v89 = *a5;
  a5[2] = v88;
  a5[3] = v86 + 1;
  a5[4] = v87;
  *(_QWORD *)(v89 + v88) = v87;
  v90 = a5[3];
  v91 = v90 & 7;
  v92 = (unint64_t)a5[4] >> (v90 & 0xF8);
  v93 = a5[2] + (v90 >> 3);
  a5[2] = v93;
  do
  {
    v94 = dword_2369248F4[v8];
    v95 = *a5;
    v96 = v92 | ((unint64_t)byte_2369248E8[v94] << v91);
    a5[3] = v91 + byte_2369248EE[v94];
    a5[4] = v96;
    *(_QWORD *)(v95 + v93) = v96;
    v98 = a5[2];
    v97 = a5[3];
    v91 = v97 & 7;
    v92 = (unint64_t)a5[4] >> (v97 & 0xF8);
    a5[3] = v91;
    a5[4] = v92;
    v93 = v98 + (v97 >> 3);
    a5[2] = v93;
    ++v8;
  }
  while (v8 != 26);
  v99 = *a5;
  v100 = v92 | (1 << v91);
  a5[3] = v91 + 1;
  a5[4] = v100;
  *(_QWORD *)(v99 + v93) = v100;
  v101 = a5[3];
  v102 = v101 & 7;
  v103 = (unint64_t)a5[4] >> (v101 & 0xF8);
  v104 = a5[2] + (v101 >> 3);
  v105 = *a5;
  a5[2] = v104;
  a5[3] = v102 + 2;
  a5[4] = v103;
  *(_QWORD *)(v105 + v104) = v103;
  v106 = a5[3];
  v107 = v106 & 7;
  v108 = (unint64_t)a5[4] >> (v106 & 0xF8);
  v109 = a5[2] + (v106 >> 3);
  v110 = *a5;
  v111 = v108 | (10 << v107);
  a5[2] = v109;
  a5[3] = v107 + 4;
  a5[4] = v111;
  *(_QWORD *)(v110 + v109) = v111;
  v112 = a5[3];
  v113 = v112 & 7;
  v114 = (unint64_t)a5[4] >> (v112 & 0xF8);
  v115 = a5[2] + (v112 >> 3);
  v116 = *a5;
  v117 = 4;
  v118 = v114 | (4 << v113);
  a5[2] = v115;
  a5[3] = v113 + 4;
  a5[4] = v118;
  *(_QWORD *)(v116 + v115) = v118;
  v119 = a5[3];
  v120 = v119 & 7;
  v121 = (unint64_t)a5[4] >> (v119 & 0xF8);
  v122 = a5[2] + (v119 >> 3);
  v123 = *a5;
  a5[2] = v122;
  a5[3] = v120 + 3;
  a5[4] = v121;
  *(_QWORD *)(v123 + v122) = v121;
  v124 = a5[3];
  v125 = v124 & 7;
  v126 = (unint64_t)a5[4] >> (v124 & 0xF8);
  v127 = a5[2] + (v124 >> 3);
  v128 = *a5;
  a5[2] = v127;
  a5[3] = v125 + 3;
  a5[4] = v126;
  *(_QWORD *)(v128 + v127) = v126;
  v129 = a5[3];
  v130 = v129 & 7;
  v131 = (unint64_t)a5[4] >> (v129 & 0xF8);
  v132 = a5[2] + (v129 >> 3);
  v133 = *a5;
  v134 = v131 | (1 << v130);
  a5[2] = v132;
  a5[3] = v130 + 1;
  a5[4] = v134;
  *(_QWORD *)(v133 + v132) = v134;
  v135 = a5[3];
  v136 = v135 & 7;
  v137 = (unint64_t)a5[4] >> (v135 & 0xF8);
  v138 = a5[2] + (v135 >> 3);
  v139 = *a5;
  v140 = v137 | (3 << v136);
  a5[2] = v138;
  a5[3] = v136 + 2;
  a5[4] = v140;
  *(_QWORD *)(v139 + v138) = v140;
  v141 = a5[3];
  v142 = v141 & 7;
  v143 = (unint64_t)a5[4] >> (v141 & 0xF8);
  v144 = a5[2] + (v141 >> 3);
  v145 = *a5;
  v146 = v143 | (4 << v142);
  a5[2] = v144;
  a5[3] = v142 + 3;
  a5[4] = v146;
  *(_QWORD *)(v145 + v144) = v146;
  v147 = a5[3];
  v148 = v147 & 7;
  v149 = (unint64_t)a5[4] >> (v147 & 0xF8);
  v150 = a5[2] + (v147 >> 3);
  v151 = *a5;
  v152 = v149 | (3 << v148);
  a5[2] = v150;
  a5[3] = v148 + 3;
  a5[4] = v152;
  *(_QWORD *)(v151 + v150) = v152;
  v153 = a5[3];
  v154 = v153 & 7;
  v155 = (unint64_t)a5[4] >> (v153 & 0xF8);
  v156 = a5[2] + (v153 >> 3);
  v157 = *a5;
  v158 = v155 | (2 << v154);
  a5[2] = v156;
  a5[3] = v154 + 3;
  a5[4] = v158;
  *(_QWORD *)(v157 + v156) = v158;
  v159 = a5[3];
  v160 = v159 & 7;
  v161 = (unint64_t)a5[4] >> (v159 & 0xF8);
  v162 = a5[2] + (v159 >> 3);
  v163 = *a5;
  v164 = v161 | (1 << v160);
  a5[2] = v162;
  a5[3] = v160 + 3;
  a5[4] = v164;
  *(_QWORD *)(v163 + v162) = v164;
  v165 = a5[3];
  v166 = v165 & 7;
  v167 = (unint64_t)a5[4] >> (v165 & 0xF8);
  v168 = a5[2] + (v165 >> 3);
  v169 = *a5;
  a5[2] = v168;
  a5[3] = v166 + 3;
  a5[4] = v167;
  *(_QWORD *)(v169 + v168) = v167;
  v170 = a5[3];
  v171 = v170 & 7;
  v172 = (unint64_t)a5[4] >> (v170 & 0xF8);
  v173 = a5[2] + (v170 >> 3);
  v174 = *a5;
  v175 = v172 | (1 << v171);
  a5[2] = v173;
  a5[3] = v171 + 1;
  a5[4] = v175;
  *(_QWORD *)(v174 + v173) = v175;
  v176 = a5[3];
  v177 = v176 & 7;
  v178 = (unint64_t)a5[4] >> (v176 & 0xF8);
  v179 = a5[2] + (v176 >> 3);
  v180 = *a5;
  a5[2] = v179;
  a5[3] = v177 + 4;
  a5[4] = v178;
  *(_QWORD *)(v180 + v179) = v178;
  v182 = a5[2];
  v181 = a5[3];
  v183 = v181 & 7;
  v184 = (unint64_t)a5[4] >> (v181 & 0xF8);
  a5[4] = v184;
  v185 = v182 + (v181 >> 3);
  a5[2] = v185;
  do
  {
    v186 = *a5;
    a5[3] = v183 + 4;
    *(_QWORD *)(v186 + v185) = v184;
    v188 = a5[2];
    v187 = a5[3];
    v184 = (unint64_t)a5[4] >> (v187 & 0xF8);
    v183 = v187 & 7;
    a5[3] = v183;
    a5[4] = v184;
    v185 = v188 + (v187 >> 3);
    a5[2] = v185;
    --v117;
  }
  while (v117);
  v189 = *a5;
  v190 = v184 | (1 << v183);
  a5[3] = v183 + 5;
  a5[4] = v190;
  *(_QWORD *)(v189 + v185) = v190;
  v191 = a5[3];
  v192 = v191 & 7;
  v193 = (unint64_t)a5[4] >> (v191 & 0xF8);
  v194 = a5[2] + (v191 >> 3);
  a5[2] = v194;
  v195 = 4;
  do
  {
    v196 = *a5;
    v197 = v193 | (1 << v192);
    a5[3] = v192 + 1;
    a5[4] = v197;
    *(_QWORD *)(v196 + v194) = v197;
    v198 = a5[3];
    v199 = v198 & 7;
    v200 = (unint64_t)a5[4] >> (v198 & 0xF8);
    v201 = a5[2] + (v198 >> 3);
    v202 = *a5;
    v203 = v200 | (8 << v199);
    a5[2] = v201;
    a5[3] = v199 + 4;
    a5[4] = v203;
    *(_QWORD *)(v202 + v201) = v203;
    v204 = a5[3];
    v205 = a5[2] + (v204 >> 3);
    v206 = *a5;
    v207 = ((unint64_t)a5[4] >> (v204 & 0xF8)) | (256 << (v204 & 7));
    a5[2] = v205;
    a5[3] = v204 & 7 | 8;
    a5[4] = v207;
    *(_QWORD *)(v206 + v205) = v207;
    v209 = a5[2];
    v208 = a5[3];
    v192 = v208 & 7;
    v193 = (unint64_t)a5[4] >> (v208 & 0xF8);
    a5[3] = v192;
    a5[4] = v193;
    v194 = v209 + (v208 >> 3);
    a5[2] = v194;
    --v195;
  }
  while (v195);
  v210 = 0;
  v211 = *a5;
  v212 = v193 | (1 << v192);
  a5[3] = v192 + 2;
  a5[4] = v212;
  *(_QWORD *)(v211 + v194) = v212;
  v213 = a5[3];
  v214 = v213 & 7;
  v215 = (unint64_t)a5[4] >> (v213 & 0xF8);
  v216 = a5[2] + (v213 >> 3);
  v217 = *a5;
  a5[2] = v216;
  a5[3] = v214 + 2;
  a5[4] = v215;
  *(_QWORD *)(v217 + v216) = v215;
  v218 = a5[3];
  v219 = v218 & 7;
  v220 = (unint64_t)a5[4] >> (v218 & 0xF8);
  v221 = a5[2] + (v218 >> 3);
  v222 = *a5;
  v223 = v220 | (1 << v219);
  a5[2] = v221;
  a5[3] = v219 + 1;
  a5[4] = v223;
  *(_QWORD *)(v222 + v221) = v223;
  v224 = a5[3];
  LOBYTE(v222) = v224 & 0xF8;
  v225 = a5[2] + (v224 >> 3);
  v226 = (unint64_t)a5[4] >> v222;
  a5[3] &= 7uLL;
  a5[4] = v226;
  a5[2] = v225;
  do
  {
    v227 = 0;
    memset(v326, 0, sizeof(v326));
    v327 = 0;
    v328 = 67;
    do
      ++*((_QWORD *)v326 + *(unsigned __int8 *)(a4 + v227++));
    while (v227 != 19);
    v319 = v210;
    for (i = 38; i != 71; ++i)
      ++*((_QWORD *)v326 + *(unsigned __int8 *)(a4 + i));
    v324[0] = 0;
    v324[1] = 0;
    v325 = 0;
    v322[0] = 0;
    v322[1] = 0;
    v323 = 0;
    sub_236897CDC(v326, 18, v322, byte_23692495C, v324);
    v229 = *a5;
    v230 = a5[2];
    v231 = a5[4];
    a5[3] += 2;
    *(_QWORD *)(v229 + v230) = v231;
    v233 = a5[2];
    v232 = a5[3];
    v234 = v232 & 7;
    v235 = (unint64_t)a5[4] >> (v232 & 0xF8);
    a5[3] = v234;
    a5[4] = v235;
    v236 = v233 + (v232 >> 3);
    a5[2] = v236;
    v237 = 18;
    v238 = 0x11u;
    do
    {
      v239 = v238;
      v240 = v237;
      v241 = *((unsigned __int8 *)v324 + byte_23692496E[v238--]);
      --v237;
    }
    while (!v241);
    if (v239 != -1)
    {
      v242 = byte_23692496E;
      do
      {
        v243 = *v242++;
        v244 = *((unsigned __int8 *)v324 + v243);
        v245 = byte_236924980[v244];
        v246 = *a5;
        v247 = ((unint64_t)byte_236924986[v244] << v234) | v235;
        a5[3] = v234 + v245;
        a5[4] = v247;
        *(_QWORD *)(v246 + v236) = v247;
        v249 = a5[2];
        v248 = a5[3];
        v234 = v248 & 7;
        v235 = (unint64_t)a5[4] >> (v248 & 0xF8);
        a5[3] = v234;
        a5[4] = v235;
        v236 = v249 + (v248 >> 3);
        a5[2] = v236;
        --v240;
      }
      while (v240);
    }
    v321 = 0;
    memset(v320, 0, sizeof(v320));
    result = sub_23689814C(0, 0, 0, (unsigned __int8 *)v324, v320, 18);
    for (j = 0; j != 19; ++j)
    {
      v252 = *(unsigned __int8 *)(a4 + j);
      v253 = *((unsigned __int8 *)v324 + v252);
      v254 = *a5;
      v255 = ((unint64_t)*((unsigned __int16 *)v320 + v252) << v234) | v235;
      a5[3] = v234 + v253;
      a5[4] = v255;
      *(_QWORD *)(v254 + v236) = v255;
      v257 = a5[2];
      v256 = a5[3];
      v234 = v256 & 7;
      v235 = (unint64_t)a5[4] >> (v256 & 0xF8);
      a5[3] = v234;
      a5[4] = v235;
      v236 = v257 + (v256 >> 3);
      a5[2] = v236;
    }
    v258 = 33;
    v259 = 70;
    do
    {
      v260 = v259;
      v261 = v258;
      v262 = *(unsigned __int8 *)(a4 + v259--);
      --v258;
    }
    while (!v262);
    v263 = HIBYTE(v325);
    v264 = HIWORD(v321);
    v265 = *a5;
    v266 = ((unint64_t)HIWORD(v321) << v234) | v235;
    a5[3] = v234 + HIBYTE(v325);
    a5[4] = v266;
    *(_QWORD *)(v265 + v236) = v266;
    v267 = a5[3];
    v268 = v267 & 7;
    v269 = (unint64_t)a5[4] >> (v267 & 0xF8);
    v270 = a5[2] + (v267 >> 3);
    v271 = *a5;
    v272 = v269 | (2 << v268);
    a5[2] = v270;
    a5[3] = v268 + 3;
    a5[4] = v272;
    *(_QWORD *)(v271 + v270) = v272;
    v273 = a5[3];
    v274 = v273 & 7;
    v275 = (unint64_t)a5[4] >> (v273 & 0xF8);
    v276 = a5[2] + (v273 >> 3);
    v277 = *a5;
    v278 = v275 | (v264 << v274);
    a5[2] = v276;
    a5[3] = v274 + v263;
    a5[4] = v278;
    *(_QWORD *)(v277 + v276) = v278;
    v279 = a5[3];
    v280 = v279 & 7;
    v281 = (unint64_t)a5[4] >> (v279 & 0xF8);
    v282 = a5[2] + (v279 >> 3);
    v283 = *a5;
    a5[2] = v282;
    a5[3] = v280 + 3;
    a5[4] = v281;
    *(_QWORD *)(v283 + v282) = v281;
    v284 = a5[3];
    v285 = v284 & 7;
    v286 = (unint64_t)a5[4] >> (v284 & 0xF8);
    v287 = a5[2] + (v284 >> 3);
    v288 = *a5;
    v289 = v286 | (v264 << v285);
    a5[2] = v287;
    a5[3] = v285 + v263;
    a5[4] = v289;
    *(_QWORD *)(v288 + v287) = v289;
    v290 = a5[3];
    v291 = v290 & 7;
    v292 = (unint64_t)a5[4] >> (v290 & 0xF8);
    v293 = a5[2] + (v290 >> 3);
    v294 = *a5;
    v295 = v292 | (2 << v291);
    a5[2] = v293;
    a5[3] = v291 + 3;
    a5[4] = v295;
    *(_QWORD *)(v294 + v293) = v295;
    v297 = a5[2];
    v296 = a5[3];
    v298 = v296 & 7;
    v299 = (unint64_t)a5[4] >> (v296 & 0xF8);
    a5[3] = v298;
    a5[4] = v299;
    v300 = v297 + (v296 >> 3);
    a5[2] = v300;
    if (v260 == 37)
    {
      v302 = v319;
    }
    else
    {
      v301 = 38;
      v302 = v319;
      do
      {
        v303 = *(unsigned __int8 *)(a4 + v301);
        v304 = *a5;
        v305 = ((unint64_t)*((unsigned __int16 *)v320 + v303) << v298) | v299;
        a5[3] = v298 + *((unsigned __int8 *)v324 + v303);
        a5[4] = v305;
        *(_QWORD *)(v304 + v300) = v305;
        v307 = a5[2];
        v306 = a5[3];
        v298 = v306 & 7;
        v299 = (unint64_t)a5[4] >> (v306 & 0xF8);
        a5[3] = v298;
        a5[4] = v299;
        v300 = v307 + (v306 >> 3);
        a5[2] = v300;
        ++v301;
        --v261;
      }
      while (v261);
    }
    v210 = v302 + 1;
    a4 += 440;
  }
  while (v210 != 4);
  v308 = *a5;
  v309 = v299 | (1 << v298);
  a5[3] = v298 + 1;
  a5[4] = v309;
  *(_QWORD *)(v308 + v300) = v309;
  v310 = a5[3];
  v311 = v310 & 7;
  v312 = (unint64_t)a5[4] >> (v310 & 0xF8);
  v313 = a5[2] + (v310 >> 3);
  v314 = *a5;
  v315 = v312 | (1 << v311);
  a5[2] = v313;
  a5[3] = v311 + 1;
  a5[4] = v315;
  *(_QWORD *)(v314 + v313) = v315;
  v317 = a5[2];
  v316 = a5[3];
  v318 = (unint64_t)a5[4] >> (v316 & 0xF8);
  a5[3] = v316 & 7;
  a5[4] = v318;
  a5[2] = v317 + (v316 >> 3);
  return result;
}

uint64_t sub_23689FE00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t **v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  char v31;
  int16x8_t v32;
  uint16x8_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x16_t *v36;
  unint64_t v37;
  unint64_t v39;
  int8x16_t *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64x2_t v73;
  __int128 v74;
  _OWORD var10[2];

  if (a6)
  {
    v13 = (int8x16_t **)result;
    v14 = 0;
    v15 = (int8x16_t)xmmword_2368AFAC0;
    v16.i64[0] = 0x8000800080008;
    v16.i64[1] = 0x8000800080008;
    v74 = xmmword_2368AFAC0;
    while (1)
    {
      v17 = 0;
      v18 = 0;
      memset(var10, 0, sizeof(var10));
      v19 = 1;
      do
      {
        v20 = *(int16x8_t *)(a3 + 2 * v14 + 2 * v17);
        v21 = *(int16x8_t *)(a4 + 2 * v14 + 2 * v17);
        v22 = *(int16x8_t *)(a5 + 2 * v14 + 2 * v17);
        v23 = vsubq_s16(v20, v22);
        v24 = (int8x16_t)vsubq_s16(v21, v22);
        v25 = (int8x16_t)vaddq_s16(v23, v21);
        v26 = (int8x16_t)vcltzq_s16((int16x8_t)veorq_s8(v24, (int8x16_t)vsubq_s16(v20, v21)));
        v27 = (int16x8_t)veorq_s8((int8x16_t)v23, v24);
        v28 = vbslq_s8(v26, (int8x16_t)v21, (int8x16_t)v20);
        v29 = (int8x16_t)vcltzq_s16(v27);
        v30 = vsubq_s16(*(int16x8_t *)(a2 + 2 * v14 + 2 * v17), (int16x8_t)vbslq_s8(v29, v25, v28));
        v31 = v19;
        v32 = (int16x8_t)veorq_s8((int8x16_t)vaddq_s16(v30, v30), (int8x16_t)vcltzq_s16(v30));
        v33 = (uint16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v32), v16, v15);
        v33.i16[0] = vminvq_u16(v33);
        var10[v17 / 8] = v32;
        if (v18 == v17)
          v34 = v33.u32[0];
        else
          v34 = 0;
        v18 += v34;
        v17 = 8;
        v19 = 0;
      }
      while ((v31 & 1) != 0);
      if (a6 - v14 >= 0x10)
        v35 = 16;
      else
        v35 = a6 - v14;
      v36 = v13[1];
      if (v18 >= v35)
        v37 = v35;
      else
        v37 = v18;
      if (v18 < v35)
        goto LABEL_21;
      if (v37 <= 7 && v36 == 0)
        break;
      v13[1] = (int8x16_t *)((char *)v36 + v37);
LABEL_37:
      v14 += 16;
      if (v14 >= a6)
        return result;
    }
    v36 = 0;
LABEL_21:
    v39 = (unint64_t)v36->u64 + v37;
    v40 = *v13;
    v41 = v39 - 8;
    if (v39 < 8)
    {
      result = sub_2368A0200((uint64_t)var10, v35, 0, (_QWORD *)v40->i64[1], v40[4], v40[8], a5, a6, a7, a8, v29, (int8x16_t)v27, (int8x16_t)v23, v26, v25, v69, v70, v71, v72,
                 (uint64x2_t)v15,
                 v73,
                 v74,
                 *((uint64_t *)&v74 + 1));
      v16.i64[0] = 0x8000800080008;
      v16.i64[1] = 0x8000800080008;
      v15 = (int8x16_t)v74;
    }
    else
    {
      v43 = (unsigned __int8 *)v40->i64[0];
      v42 = (unsigned __int8 *)v40->i64[1];
      if (v41 > 0x1F)
      {
        v54 = 31 - __clz(v41);
        if (!(_DWORD)v41)
          v54 = 0;
        LODWORD(v55) = v54 + 12;
        v56 = v41 >= 0x10;
        if (v41 >= 0x10)
          v55 = v55;
        else
          v55 = v41;
        if (v41 < 0x10)
          v54 = 0;
        LODWORD(v41) = (-1 << v54) + v41;
        if (v56)
          v41 = v41;
        else
          v41 = 0;
        v57 = v43[v55 + 38];
        v58 = (v41 << v57) | *(unsigned __int16 *)&v43[2 * v55 + 72];
        v59 = *v43;
        v60 = (v58 << v59) | v43[19];
        v61 = v54 + v59 + v57;
        v62 = *(_QWORD *)v42;
        v47 = v42 + 16;
        v63 = *((_QWORD *)v42 + 2);
        v49 = (unint64_t *)(v42 + 24);
        v64 = *((_QWORD *)v42 + 3);
        v65 = *((_QWORD *)v42 + 4);
        v51 = v42 + 32;
        v66 = v65 | (v60 << v64);
        *v51 = v66;
        *v49 = v64 + v61;
        *(_QWORD *)(v62 + v63) = v66;
      }
      else
      {
        v44 = v43[v41 + 400];
        v45 = *(_QWORD *)&v43[8 * v41 + 144];
        v46 = *(_QWORD *)v42;
        v47 = v42 + 16;
        v48 = *((_QWORD *)v42 + 2);
        v49 = (unint64_t *)(v42 + 24);
        v50 = *((_QWORD *)v42 + 3);
        v52 = *((_QWORD *)v42 + 4);
        v51 = v42 + 32;
        v53 = v52 | (v45 << v50);
        *v51 = v53;
        *v49 = v50 + v44;
        *(_QWORD *)(v46 + v48) = v53;
      }
      v67 = *v49;
      v68 = *v49 & 0xFFFFFFFFFFFFFFF8;
      *v49 &= 7uLL;
      *v51 >>= v68;
      *v47 += v67 >> 3;
      result = sub_2368A0200((uint64_t)var10, v35, v37, (_QWORD *)v40->i64[1], v40[4], v40[8], a5, a6, a7, a8, v29, (int8x16_t)v27, (int8x16_t)v23, v26, v25, v69, v70, v71, v72,
                 (uint64x2_t)v15,
                 v73,
                 v74,
                 *((uint64_t *)&v74 + 1));
      v13[1] = 0;
      v15 = (int8x16_t)v74;
      v16.i64[0] = 0x8000800080008;
      v16.i64[1] = 0x8000800080008;
    }
    goto LABEL_37;
  }
  return result;
}

unsigned __int8 *sub_2368A00EC(unsigned __int8 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  if (a3)
  {
    v3 = a3 - 8;
    if ((unint64_t)(a3 - 8) > 0x1F)
    {
      v14 = 31 - __clz(v3);
      if ((_DWORD)a3 == 8)
        v14 = 0;
      LODWORD(v15) = v14 + 12;
      v16 = v3 >= 0x10;
      if (v3 >= 0x10)
        v15 = v15;
      else
        v15 = v3;
      if (v3 < 0x10)
        v14 = 0;
      LODWORD(v3) = (-1 << v14) + v3;
      if (v16)
        v3 = v3;
      else
        v3 = 0;
      v17 = result[v15 + 38];
      v18 = (v3 << v17) | *(unsigned __int16 *)&result[2 * v15 + 72];
      v19 = *result;
      v20 = (v18 << v19) | result[19];
      v21 = v14 + v19 + v17;
      v22 = *a2;
      v7 = a2 + 2;
      v23 = a2[2];
      v9 = (unint64_t *)(a2 + 3);
      v24 = a2[3];
      v25 = a2[4];
      v11 = a2 + 4;
      v26 = v25 | (v20 << v24);
      *v11 = v26;
      *v9 = v24 + v21;
      *(_QWORD *)(v22 + v23) = v26;
    }
    else
    {
      v4 = result[v3 + 400];
      v5 = *(_QWORD *)&result[8 * v3 + 144];
      v6 = *a2;
      v7 = a2 + 2;
      v8 = a2[2];
      v9 = (unint64_t *)(a2 + 3);
      v10 = a2[3];
      v12 = a2[4];
      v11 = a2 + 4;
      v13 = v12 | (v5 << v10);
      *v11 = v13;
      *v9 = v10 + v4;
      *(_QWORD *)(v6 + v8) = v13;
    }
    v27 = *v9;
    v28 = *v9 & 0xFFFFFFFFFFFFFFF8;
    *v9 &= 7uLL;
    *v11 = (unint64_t)*v11 >> v28;
    *v7 += v27 >> 3;
  }
  return result;
}

uint64_t sub_2368A0200(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64x2_t a20,uint64x2_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v23;
  char v24;
  int16x8_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  char v28;
  int16x8_t v29;
  uint16x8_t v30;
  int16x8_t v31;
  uint16x8_t v32;
  unsigned __int128 v33;
  int16x8_t v34;
  int8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint32x4_t v46;
  uint64_t v47;
  int8x16_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int8x16_t vars0;

  v23 = 0;
  a23 = *MEMORY[0x24BDAC8D0];
  v24 = 1;
  v25.i64[0] = 0x10001000100010;
  v25.i64[1] = 0x10001000100010;
  v26.i64[0] = 0x1000100010001;
  v26.i64[1] = 0x1000100010001;
  v27.i64[0] = 0xFFFF0000FFFFLL;
  v27.i64[1] = 0xFFFF0000FFFFLL;
  do
  {
    v28 = v24;
    v29 = *(int16x8_t *)(result + 2 * v23);
    v30 = (uint16x8_t)vsubq_s16(v25, vclzq_s16(v29));
    v31 = (int16x8_t)vqsubq_u16(v30, v26);
    v32 = vqsubq_u16((uint16x8_t)v29, vshlq_u16(v26, (uint16x8_t)v31));
    v33 = *(_OWORD *)&v30 | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    v34 = (int16x8_t)vqtbl1q_s8(a5, (int8x16_t)v33);
    v35 = vqtbl1q_s8(a6, (int8x16_t)v33);
    v36 = a2 - v23;
    if (a2 < v23)
      v36 = 0;
    v37 = a3 - v23;
    if (a3 < v23)
      v37 = 0;
    v38 = (int8x16_t *)((char *)&vars0 + 4 * v23);
    v39 = vorrq_s8((int8x16_t)vshlq_u16(v32, (uint16x8_t)v34), v35);
    v40 = (int8x16_t)vaddq_s16(v31, v34);
    if (v36 >= 8)
      v36 = 8;
    v41 = *(int8x16_t *)((char *)&unk_23692498C - 2 * v36 + 16);
    if (v37 >= 8)
      v42 = 8;
    else
      v42 = v37;
    v43 = vandq_s8(v41, *(int8x16_t *)((char *)&unk_2369249AC - 2 * v42 + 16));
    v44 = vandq_s8(v43, v40);
    v45 = vandq_s8(v43, v39);
    v46 = (uint32x4_t)vandq_s8(v44, v27);
    *(uint32x4_t *)v38 = vsraq_n_u32(v46, (uint32x4_t)v44, 0x10uLL);
    v38[1] = vorrq_s8(vandq_s8(v45, v27), (int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v45, 0x10uLL), v46));
    v23 = 8;
    v24 = 0;
  }
  while ((v28 & 1) != 0);
  v47 = 0;
  v48.i64[0] = 0xFFFFFFFFLL;
  v48.i64[1] = 0xFFFFFFFFLL;
  v49 = (uint64x2_t)vandq_s8(vars0, v48);
  v50 = (uint64x2_t)vandq_s8(a12, v48);
  a20 = vsraq_n_u64(v49, (uint64x2_t)vars0, 0x20uLL);
  a21 = vsraq_n_u64(v50, (uint64x2_t)a12, 0x20uLL);
  a14 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a11, 0x20uLL), v49), vandq_s8(a11, v48));
  a15 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a13, 0x20uLL), v50), vandq_s8(a13, v48));
  v51 = a4[3];
  do
  {
    v52 = a14.u64[v47];
    v53 = a4[4] | (v52 << v51);
    a4[4] = v53;
    *(_QWORD *)(*a4 + a4[2]) = v53;
    v54 = a4[3];
    v51 = a20.i64[v47] + v54;
    a4[3] = v51;
    if (v51 >= 0x40)
    {
      a4[3] = v51 - 64;
      a4[4] = v52 >> -(char)v54;
      a4[2] += 8;
      LOBYTE(v51) = v51 - 64;
    }
    ++v47;
  }
  while (v47 != 4);
  *(_QWORD *)(*a4 + a4[2]) = a4[4];
  v56 = a4[2];
  v55 = a4[3];
  a4[4] >>= v55 & 0xF8;
  a4[2] = v56 + (v55 >> 3);
  a4[3] = v55 & 7;
  return result;
}

uint64_t sub_2368A03F8(char a1, unsigned int a2)
{
  return (unsigned __int16)((*(_WORD *)&asc_2369248BC[2 * (a2 >> 4) + 12] << 8) | (*(_WORD *)&asc_2369248BC[2 * (a2 & 0xF) + 12] << 12) | (16 * *(_WORD *)&asc_2369248BC[2 * ((a2 >> 8) & 0xF) + 12]) | *(_WORD *)&asc_2369248BC[2 * (a2 >> 12) + 12]) >> (16 - a1);
}

const char *sub_2368A0444(const char *result, unint64_t a2, int16x8_t *a3, _OWORD *a4, _OWORD *a5)
{
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  int16x8_t *v8;
  _OWORD *v9;
  _OWORD *v10;
  int16x8_t v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  __int16 *v16;
  const char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int8x8x3_t v23;

  if (a2 >= 8)
  {
    v6 = 0;
    v7 = result;
    v8 = a3;
    v9 = a4;
    v10 = a5;
    do
    {
      v23 = vld3_s8(v7);
      v7 += 24;
      *(uint16x8_t *)v23.val[0].i8 = vsubl_u8((uint8x8_t)v23.val[0], (uint8x8_t)v23.val[2]);
      v11 = vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v23.val[2]), *(int16x8_t *)v23.val[0].i8, 1uLL);
      *(int16x8_t *)v23.val[1].i8 = vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v23.val[1]), v11);
      *v8++ = vsraq_n_s16(v11, *(int16x8_t *)v23.val[1].i8, 1uLL);
      *v9++ = *(_OWORD *)v23.val[0].i8;
      *v10++ = *(_OWORD *)v23.val[1].i8;
      v5 = v6 + 8;
      v12 = v6 + 16;
      v6 += 8;
    }
    while (v12 <= a2);
  }
  else
  {
    v5 = 0;
  }
  v13 = a2 - v5;
  if (a2 > v5)
  {
    v14 = (_WORD *)a5 + v5;
    v15 = (_WORD *)a4 + v5;
    v16 = &a3->i16[v5];
    v17 = &result[3 * v5 + 1];
    do
    {
      v18 = *(unsigned __int8 *)v17;
      v19 = *((unsigned __int8 *)v17 + 1);
      v20 = *((unsigned __int8 *)v17 - 1) - v19;
      *v15++ = v20;
      v21 = v19 + (v20 >> 1);
      v22 = v18 - v21;
      *v14++ = v22;
      *v16++ = v21 + (v22 >> 1);
      v17 += 3;
      --v13;
    }
    while (v13);
  }
  return result;
}

const char *sub_2368A04FC(const char *result, unint64_t a2, int16x8_t *a3, _OWORD *a4, _OWORD *a5, uint16x8_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  int16x8_t *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint16x8_t *v12;
  int16x8_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 *v16;
  _WORD *v17;
  _WORD *v18;
  const char *v19;
  __int16 *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  unsigned int v26;
  int8x8x4_t v27;

  if (a2 >= 8)
  {
    v7 = 0;
    v8 = result;
    v9 = a3;
    v10 = a4;
    v11 = a5;
    v12 = a6;
    do
    {
      v27 = vld4_s8(v8);
      v8 += 32;
      *(uint16x8_t *)v27.val[0].i8 = vsubl_u8((uint8x8_t)v27.val[0], (uint8x8_t)v27.val[2]);
      v13 = vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[2]), *(int16x8_t *)v27.val[0].i8, 1uLL);
      *(int16x8_t *)v27.val[1].i8 = vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[1]), v13);
      *v9++ = vsraq_n_s16(v13, *(int16x8_t *)v27.val[1].i8, 1uLL);
      *v10++ = *(_OWORD *)v27.val[0].i8;
      *v11++ = *(_OWORD *)v27.val[1].i8;
      *v12++ = vmovl_u8((uint8x8_t)v27.val[3]);
      v6 = v7 + 8;
      v14 = v7 + 16;
      v7 += 8;
    }
    while (v14 <= a2);
  }
  else
  {
    v6 = 0;
  }
  v15 = a2 - v6;
  if (a2 > v6)
  {
    v16 = &a6->i16[v6];
    v17 = (_WORD *)a5 + v6;
    v18 = (_WORD *)a4 + v6;
    v19 = &result[4 * v6 + 1];
    v20 = &a3->i16[v6];
    do
    {
      v21 = *(unsigned __int8 *)v19;
      v22 = *((unsigned __int8 *)v19 + 1);
      v23 = *((unsigned __int8 *)v19 + 2);
      v24 = *((unsigned __int8 *)v19 - 1) - v22;
      *v18++ = v24;
      v25 = v22 + (v24 >> 1);
      v26 = v21 - v25;
      *v17++ = v26;
      *v20++ = v25 + (v26 >> 1);
      *v16++ = v23;
      v19 += 4;
      --v15;
    }
    while (v15);
  }
  return result;
}

BOOL sub_2368A05C8(unsigned int *a1, unsigned int *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  float v11;
  float v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int *v26;
  float v27;
  _QWORD *v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      if (v8 & 0xFF000000 | (BYTE2(v8) << 16) | (BYTE1(v8) << 8) | v8)
      {
        v9 = *a1;
        if (!(*a1 & 0xFF000000 | (BYTE2(*a1) << 16) | (BYTE1(*a1) << 8) | *a1)
          || ((v10 = *a1,
               v11 = (float)((float)((float)((float)BYTE1(v8) * 0.587) + (float)((float)v8 * 0.299))
                           + (float)((float)BYTE2(v8) * 0.114))
                   + 0.01,
               **a3 != 4)
            ? (v12 = (float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                           + (float)((float)BYTE2(v9) * 0.114))
                   + 0.01)
            : (v11 = v11 * (float)HIBYTE(v8),
               v12 = (float)((float)((float)((float)((float)BYTE1(v9) * 0.587) + (float)((float)v10 * 0.299))
                                   + (float)((float)BYTE2(v9) * 0.114))
                           + 0.01)
                   * (float)HIBYTE(v9)),
              v11 < v12))
        {
          *a1 = v8;
          *(a2 - 1) = v9;
        }
      }
      return result;
    case 3:
      sub_23689D700(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_23689DB8C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_23689DEE8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      sub_23689D700(a1, a1 + 1, a1 + 2, *a3);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      v17 = *a3;
      break;
  }
  while (1)
  {
    v18 = *v14;
    if (*v14 & 0xFF000000 | (BYTE2(*v14) << 16) | (BYTE1(*v14) << 8) | *v14)
    {
      v19 = HIBYTE(v18);
      v20 = *v14;
      v21 = *v13;
      if (!(*v13 & 0xFF000000 | (BYTE2(*v13) << 16) | (BYTE1(*v13) << 8) | *v13)
        || ((v22 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)((float)v20 * 0.299))
                         + (float)((float)BYTE2(v18) * 0.114))
                 + 0.01,
             v23 = (float)*v13,
             v24 = (float)BYTE1(v21),
             *v17 != 4)
          ? (v25 = (float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299)) + (float)((float)BYTE2(v21) * 0.114))
                 + 0.01)
          : (v22 = v22 * (float)v19,
             v25 = (float)((float)((float)((float)(v24 * 0.587) + (float)(v23 * 0.299))
                                 + (float)((float)BYTE2(v21) * 0.114))
                         + 0.01)
                 * (float)HIBYTE(v21)),
            v22 < v25))
      {
        *v14 = v21;
        v26 = a1;
        if (v13 != a1)
        {
          v27 = (float)v20;
          v28 = *a3;
          v29 = (float)((float)((float)((float)BYTE1(v18) * 0.587) + (float)(v27 * 0.299))
                      + (float)((float)BYTE2(v18) * 0.114))
              + 0.01;
          v30 = (float)v19;
          v31 = v15;
          while (1)
          {
            v32 = *(unsigned int *)((char *)a1 + v31 + 4);
            if (v32 & 0xFF000000 | (BYTE2(v32) << 16) | (BYTE1(v32) << 8) | v32)
            {
              v33 = (float)HIBYTE(v32);
              if (*v28 == 4)
                v34 = v30;
              else
                v34 = 1.0;
              v35 = v29 * v34;
              if (*v28 != 4)
                v33 = 1.0;
              if (v35 >= (float)((float)((float)((float)((float)((float)BYTE1(v32) * 0.587)
                                                        + (float)((float)v32 * 0.299))
                                                + (float)((float)BYTE2(v32) * 0.114))
                                        + 0.01)
                                * v33))
                break;
            }
            *(unsigned int *)((char *)a1 + v31 + 8) = v32;
            v31 -= 4;
            if (v31 == -8)
            {
              v26 = a1;
              goto LABEL_26;
            }
          }
          v26 = (unsigned int *)((char *)a1 + v31 + 8);
        }
LABEL_26:
        *v26 = v18;
        if (++v16 == 8)
          return v14 + 1 == a2;
      }
    }
    v13 = v14;
    v15 += 4;
    if (++v14 == a2)
      return 1;
  }
}

void sub_2368A09B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4), _QWORD *a5)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  _QWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  char v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(_QWORD, uint64_t);
  uint64_t v22;
  _BOOL4 v23;
  char v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(_QWORD, uint64_t);
  uint64_t v34;
  _BOOL4 v35;
  char v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(_QWORD, uint64_t);
  unint64_t jj;
  uint64_t kk;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void (*v54)(_QWORD, uint64_t);
  uint64_t v55;
  BOOL v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t n;
  uint64_t ii;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void (*v74)(_QWORD, uint64_t);
  uint64_t v75;
  _BOOL4 v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  char v88;
  _BOOL4 v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(_QWORD, uint64_t);
  _QWORD *i;
  uint64_t j;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  void (*v106)(_QWORD, uint64_t);
  uint64_t v107;
  _BOOL4 v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  void (*v122)(_QWORD, uint64_t);
  unint64_t k;
  uint64_t m;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  void (*v130)(_QWORD, uint64_t);
  uint64_t v131;
  _BOOL4 v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  void (*v145)(_QWORD, uint64_t);
  _QWORD *v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  __int128 v149;
  char *v150;
  BOOL *v151;
  _QWORD *v152;
  uint64_t *v153;
  _QWORD v154[12];
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  void (*v158)(void);
  __int128 v159;
  _QWORD v160[4];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _BYTE v164[25];
  unint64_t v165;
  BOOL v166;
  char v167;
  _QWORD *v168;
  _QWORD *v169;
  void **v170[2];

  v8 = sub_2368A18FC;
  if (a4)
    v8 = a4;
  v147 = v8;
  v9 = *(_QWORD **)(a1 + 104);
  if ((unint64_t)v9 > 8)
  {
    if ((unint64_t)v9 > 0xD)
    {
      if (v9 == (_QWORD *)14)
      {
        v169 = (_QWORD *)a1;
        if (!*(_BYTE *)(a1 + 2048))
        {
          v34 = *(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976);
          v56 = v34 == 8;
          v35 = v34 != 8;
          v36 = v56;
          v167 = v36;
          v37 = a5 != 0;
          v38 = v37 && v35;
          v56 = !v37 || !v35;
          v166 = v37 && v35;
          v39 = *(_QWORD *)(a1 + 72);
          v40 = v39 * *(_QWORD *)(a1 + 64);
          if (v56)
            v41 = v39 * *(_QWORD *)(a1 + 64);
          else
            v41 = 16;
          if (v38)
          {
            v42 = a5[5];
            v43 = *(_QWORD *)(a1 + 2000) + v42;
            v44 = (_QWORD *)a5[9];
            if (v44)
            {
              v45 = (void (*)(_QWORD, uint64_t))v44[3];
              if (v45)
              {
                v45(*v44, v43);
                a5[7] = v43;
              }
            }
            a5[5] = v43;
          }
          else
          {
            v42 = 0;
          }
          v168 = 0;
          if (v40)
          {
            for (i = 0; (unint64_t)i < v40; v168 = i)
            {
              for (j = 0; j != 220; j += 55)
              {
                v100 = &v154[j];
                *((_WORD *)v100 + 132) = 0;
                *(_OWORD *)(v100 + 31) = 0uLL;
                *(_OWORD *)(v100 + 29) = 0uLL;
                *(_OWORD *)(v100 + 27) = 0uLL;
                *(_OWORD *)(v100 + 25) = 0uLL;
                *((_OWORD *)v100 + 8) = 0uLL;
                *((_OWORD *)v100 + 9) = 0uLL;
                *((_OWORD *)v100 + 10) = 0uLL;
                *((_OWORD *)v100 + 11) = 0uLL;
                *(_QWORD *)((char *)v100 + 191) = 0;
                *((_OWORD *)v100 + 17) = 0uLL;
                *((_OWORD *)v100 + 18) = 0uLL;
                *((_OWORD *)v100 + 19) = 0uLL;
                *((_OWORD *)v100 + 20) = 0uLL;
                *((_OWORD *)v100 + 21) = 0uLL;
                *((_OWORD *)v100 + 22) = 0uLL;
                *((_OWORD *)v100 + 23) = 0uLL;
                *((_OWORD *)v100 + 24) = 0uLL;
                *((_OWORD *)v100 + 25) = 0uLL;
                *((_OWORD *)v100 + 26) = 0uLL;
                *((_OWORD *)v100 + 27) = 0uLL;
                *((_OWORD *)v100 + 28) = 0uLL;
                *((_OWORD *)v100 + 29) = 0uLL;
                *((_OWORD *)v100 + 30) = 0uLL;
                *((_OWORD *)v100 + 31) = 0uLL;
                *((_OWORD *)v100 + 32) = 0uLL;
                *((_OWORD *)v100 + 33) = 0uLL;
                *((_OWORD *)v100 + 34) = 0uLL;
              }
              v101 = v40 - (_QWORD)i;
              if (v101 >= v41)
                v102 = v41;
              else
                v102 = v101;
              v156 = 0uLL;
              v157 = 0uLL;
              v158 = (void (*)(void))MEMORY[0x24BDAE450];
              v159 = 0uLL;
              memset(v160, 0, sizeof(v160));
              v161 = 0uLL;
              v162 = 0uLL;
              v163 = 0uLL;
              memset(v164, 0, sizeof(v164));
              if (v166)
              {
                sub_2368982A0(&v149, v102);
                if (v160[1])
                {
                  sub_2368931F8((uint64_t)&v160[1], v160[1]);
                  operator delete((void *)v160[1]);
                }
                *(_OWORD *)&v160[1] = v149;
                v160[3] = v150;
                v150 = 0;
                v149 = 0uLL;
                v170[0] = (void **)&v149;
                sub_2368931B8(v170);
              }
              *(_QWORD *)&v149 = &v168;
              *((_QWORD *)&v149 + 1) = &v169;
              v150 = &v167;
              v151 = &v166;
              v152 = v154;
              v153 = (uint64_t *)&v165;
              v147(a3, (uint64_t)&v149, (uint64_t (*)(uint64_t, uint64_t))&sub_2368A2F9C, v102);
              if (v166)
              {
                v155 = v169[12];
                *((_QWORD *)&v163 + 1) = 1;
                sub_2368A1948(v154, (uint64_t)a5);
              }
              if ((_QWORD)v161)
              {
                *((_QWORD *)&v161 + 1) = v161;
                operator delete((void *)v161);
              }
              *(_QWORD *)&v149 = &v160[1];
              sub_2368931B8((void ***)&v149);
              v103 = *((_QWORD *)&v157 + 1);
              *((_QWORD *)&v157 + 1) = 0;
              if (v103)
                v158();
              if ((_QWORD)v156)
              {
                *((_QWORD *)&v156 + 1) = v156;
                operator delete((void *)v156);
              }
              i = (_QWORD *)((char *)v168 + v41);
            }
            LOBYTE(v38) = v166;
          }
          if ((_BYTE)v38)
          {
            v104 = a5[5];
            v105 = (_QWORD *)a5[9];
            if (v105)
            {
              v106 = (void (*)(_QWORD, uint64_t))v105[3];
              if (v106)
              {
                v106(*v105, v42);
                a5[7] = v42;
              }
            }
            a5[5] = v42;
            sub_2368A2354(v169 + 244);
            v107 = v169[12];
            v109 = v107 == 2 || v107 == 4;
            v110 = sub_2368A2518((uint64_t)(v169 + 247), v169[250], v169[251], v109, a2);
            if (v110)
            {
              v111 = v110;
              do
              {
                v112 = (uint64_t *)v169[244];
                v113 = *v112;
                v114 = v112[2];
                v115 = v112[4];
                v112[3] += 8;
                *(_QWORD *)(v113 + v114) = v115;
                v117 = v112[2];
                v116 = v112[3];
                v118 = (unint64_t)v112[4] >> (v116 & 0xF8);
                v112[3] = v116 & 7;
                v112[4] = v118;
                v112[2] = v117 + (v116 >> 3);
                --v111;
              }
              while (v111);
            }
            v119 = v169;
            *(_QWORD *)v169[247] += v110;
            sub_2368929C4(v119, a2);
            v120 = v169;
            sub_236893058((char *)v169[239], v169[241], (uint64_t)a5);
            sub_236893058(*(char **)v120[244], *(_QWORD *)(v120[244] + 16), (uint64_t)a5);
            v121 = (_QWORD *)a5[9];
            if (v121)
            {
              v122 = (void (*)(_QWORD, uint64_t))v121[3];
              if (v122)
              {
                v122(*v121, v104);
                a5[7] = v104;
              }
            }
            a5[5] = v104;
          }
          else if (a5)
          {
            sub_2368929C4(v169, a2);
            sub_2368A1948(v169, (uint64_t)a5);
          }
          v146 = v169;
          goto LABEL_209;
        }
      }
      else
      {
        v168 = (_QWORD *)a1;
        v169 = v9;
        if (!*(_BYTE *)(a1 + 2048))
        {
          v86 = *(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976);
          v56 = v86 == 8;
          v87 = v86 != 8;
          v88 = v56;
          v167 = v88;
          v89 = a5 != 0;
          v90 = v89 && v87;
          v56 = !v89 || !v87;
          v166 = v89 && v87;
          v91 = *(_QWORD *)(a1 + 72);
          v92 = v91 * *(_QWORD *)(a1 + 64);
          if (v56)
            v93 = v91 * *(_QWORD *)(a1 + 64);
          else
            v93 = 16;
          if (v90)
          {
            v94 = a5[5];
            v95 = *(_QWORD *)(a1 + 2000) + v94;
            v96 = (_QWORD *)a5[9];
            if (v96)
            {
              v97 = (void (*)(_QWORD, uint64_t))v96[3];
              if (v97)
              {
                v97(*v96, v95);
                a5[7] = v95;
              }
            }
            a5[5] = v95;
          }
          else
          {
            v94 = 0;
          }
          v165 = 0;
          if (v92)
          {
            for (k = 0; k < v92; v165 = k)
            {
              for (m = 0; m != 220; m += 55)
              {
                v125 = &v154[m];
                *((_WORD *)v125 + 132) = 0;
                *(_OWORD *)(v125 + 31) = 0uLL;
                *(_OWORD *)(v125 + 29) = 0uLL;
                *(_OWORD *)(v125 + 27) = 0uLL;
                *(_OWORD *)(v125 + 25) = 0uLL;
                *((_OWORD *)v125 + 8) = 0uLL;
                *((_OWORD *)v125 + 9) = 0uLL;
                *((_OWORD *)v125 + 10) = 0uLL;
                *((_OWORD *)v125 + 11) = 0uLL;
                *(_QWORD *)((char *)v125 + 191) = 0;
                *((_OWORD *)v125 + 17) = 0uLL;
                *((_OWORD *)v125 + 18) = 0uLL;
                *((_OWORD *)v125 + 19) = 0uLL;
                *((_OWORD *)v125 + 20) = 0uLL;
                *((_OWORD *)v125 + 21) = 0uLL;
                *((_OWORD *)v125 + 22) = 0uLL;
                *((_OWORD *)v125 + 23) = 0uLL;
                *((_OWORD *)v125 + 24) = 0uLL;
                *((_OWORD *)v125 + 25) = 0uLL;
                *((_OWORD *)v125 + 26) = 0uLL;
                *((_OWORD *)v125 + 27) = 0uLL;
                *((_OWORD *)v125 + 28) = 0uLL;
                *((_OWORD *)v125 + 29) = 0uLL;
                *((_OWORD *)v125 + 30) = 0uLL;
                *((_OWORD *)v125 + 31) = 0uLL;
                *((_OWORD *)v125 + 32) = 0uLL;
                *((_OWORD *)v125 + 33) = 0uLL;
                *((_OWORD *)v125 + 34) = 0uLL;
              }
              v126 = v92 - k;
              if (v126 >= v93)
                v127 = v93;
              else
                v127 = v126;
              v156 = 0uLL;
              v157 = 0uLL;
              v158 = (void (*)(void))MEMORY[0x24BDAE450];
              v159 = 0uLL;
              memset(v160, 0, sizeof(v160));
              v161 = 0uLL;
              v162 = 0uLL;
              v163 = 0uLL;
              memset(v164, 0, sizeof(v164));
              if (v166)
              {
                sub_2368982A0(&v149, v127);
                if (v160[1])
                {
                  sub_2368931F8((uint64_t)&v160[1], v160[1]);
                  operator delete((void *)v160[1]);
                }
                *(_OWORD *)&v160[1] = v149;
                v160[3] = v150;
                v150 = 0;
                v149 = 0uLL;
                v170[0] = (void **)&v149;
                sub_2368931B8(v170);
              }
              *(_QWORD *)&v149 = &v165;
              *((_QWORD *)&v149 + 1) = &v168;
              v150 = &v167;
              v151 = &v166;
              v152 = v154;
              v153 = (uint64_t *)&v169;
              v147(a3, (uint64_t)&v149, (uint64_t (*)(uint64_t, uint64_t))&sub_2368A3900, v127);
              if (v166)
              {
                v155 = v168[12];
                *((_QWORD *)&v163 + 1) = 1;
                sub_2368A1948(v154, (uint64_t)a5);
              }
              if ((_QWORD)v161)
              {
                *((_QWORD *)&v161 + 1) = v161;
                operator delete((void *)v161);
              }
              *(_QWORD *)&v149 = &v160[1];
              sub_2368931B8((void ***)&v149);
              v128 = *((_QWORD *)&v157 + 1);
              *((_QWORD *)&v157 + 1) = 0;
              if (v128)
                v158();
              if ((_QWORD)v156)
              {
                *((_QWORD *)&v156 + 1) = v156;
                operator delete((void *)v156);
              }
              k = v165 + v93;
            }
            LOBYTE(v90) = v166;
          }
          if ((_BYTE)v90)
          {
            v52 = a5[5];
            v129 = (_QWORD *)a5[9];
            if (v129)
            {
              v130 = (void (*)(_QWORD, uint64_t))v129[3];
              if (v130)
              {
                v130(*v129, v94);
                a5[7] = v94;
              }
            }
            a5[5] = v94;
            sub_2368A2354(v168 + 244);
            v131 = v168[12];
            v133 = v131 == 2 || v131 == 4;
            v58 = sub_2368A2518((uint64_t)(v168 + 247), v168[250], v168[251], v133, a2);
            if (v58)
            {
              v134 = v58;
              do
              {
                v135 = (uint64_t *)v168[244];
                v136 = *v135;
                v137 = v135[2];
                v138 = v135[4];
                v135[3] += 8;
                *(_QWORD *)(v136 + v137) = v138;
                v140 = v135[2];
                v139 = v135[3];
                v141 = (unint64_t)v135[4] >> (v139 & 0xF8);
                v135[3] = v139 & 7;
                v135[4] = v141;
                v135[2] = v140 + (v139 >> 3);
                --v134;
              }
              while (v134);
            }
            goto LABEL_202;
          }
          goto LABEL_206;
        }
      }
    }
    else
    {
      v168 = (_QWORD *)a1;
      v169 = v9;
      if (!*(_BYTE *)(a1 + 2048))
      {
        v22 = *(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976);
        v56 = v22 == 8;
        v23 = v22 != 8;
        v24 = v56;
        v167 = v24;
        v25 = a5 != 0;
        v26 = v25 && v23;
        v56 = !v25 || !v23;
        v166 = v25 && v23;
        v27 = *(_QWORD *)(a1 + 72);
        v28 = v27 * *(_QWORD *)(a1 + 64);
        if (v56)
          v29 = v27 * *(_QWORD *)(a1 + 64);
        else
          v29 = 16;
        if (v26)
        {
          v30 = a5[5];
          v31 = *(_QWORD *)(a1 + 2000) + v30;
          v32 = (_QWORD *)a5[9];
          if (v32)
          {
            v33 = (void (*)(_QWORD, uint64_t))v32[3];
            if (v33)
            {
              v33(*v32, v31);
              a5[7] = v31;
            }
          }
          a5[5] = v31;
        }
        else
        {
          v30 = 0;
        }
        v165 = 0;
        if (v28)
        {
          for (n = 0; n < v28; v165 = n)
          {
            for (ii = 0; ii != 220; ii += 55)
            {
              v69 = &v154[ii];
              *((_WORD *)v69 + 132) = 0;
              *(_OWORD *)(v69 + 31) = 0uLL;
              *(_OWORD *)(v69 + 29) = 0uLL;
              *(_OWORD *)(v69 + 27) = 0uLL;
              *(_OWORD *)(v69 + 25) = 0uLL;
              *((_OWORD *)v69 + 8) = 0uLL;
              *((_OWORD *)v69 + 9) = 0uLL;
              *((_OWORD *)v69 + 10) = 0uLL;
              *((_OWORD *)v69 + 11) = 0uLL;
              *(_QWORD *)((char *)v69 + 191) = 0;
              *((_OWORD *)v69 + 17) = 0uLL;
              *((_OWORD *)v69 + 18) = 0uLL;
              *((_OWORD *)v69 + 19) = 0uLL;
              *((_OWORD *)v69 + 20) = 0uLL;
              *((_OWORD *)v69 + 21) = 0uLL;
              *((_OWORD *)v69 + 22) = 0uLL;
              *((_OWORD *)v69 + 23) = 0uLL;
              *((_OWORD *)v69 + 24) = 0uLL;
              *((_OWORD *)v69 + 25) = 0uLL;
              *((_OWORD *)v69 + 26) = 0uLL;
              *((_OWORD *)v69 + 27) = 0uLL;
              *((_OWORD *)v69 + 28) = 0uLL;
              *((_OWORD *)v69 + 29) = 0uLL;
              *((_OWORD *)v69 + 30) = 0uLL;
              *((_OWORD *)v69 + 31) = 0uLL;
              *((_OWORD *)v69 + 32) = 0uLL;
              *((_OWORD *)v69 + 33) = 0uLL;
              *((_OWORD *)v69 + 34) = 0uLL;
            }
            v70 = v28 - n;
            if (v70 >= v29)
              v71 = v29;
            else
              v71 = v70;
            v156 = 0uLL;
            v157 = 0uLL;
            v158 = (void (*)(void))MEMORY[0x24BDAE450];
            v159 = 0uLL;
            memset(v160, 0, sizeof(v160));
            v161 = 0uLL;
            v162 = 0uLL;
            v163 = 0uLL;
            memset(v164, 0, sizeof(v164));
            if (v166)
            {
              sub_2368982A0(&v149, v71);
              if (v160[1])
              {
                sub_2368931F8((uint64_t)&v160[1], v160[1]);
                operator delete((void *)v160[1]);
              }
              *(_OWORD *)&v160[1] = v149;
              v160[3] = v150;
              v150 = 0;
              v149 = 0uLL;
              v170[0] = (void **)&v149;
              sub_2368931B8(v170);
            }
            *(_QWORD *)&v149 = &v165;
            *((_QWORD *)&v149 + 1) = &v168;
            v150 = &v167;
            v151 = &v166;
            v152 = v154;
            v153 = (uint64_t *)&v169;
            v147(a3, (uint64_t)&v149, (uint64_t (*)(uint64_t, uint64_t))&sub_2368A2638, v71);
            if (v166)
            {
              v155 = v168[12];
              *((_QWORD *)&v163 + 1) = 1;
              sub_2368A1948(v154, (uint64_t)a5);
            }
            if ((_QWORD)v161)
            {
              *((_QWORD *)&v161 + 1) = v161;
              operator delete((void *)v161);
            }
            *(_QWORD *)&v149 = &v160[1];
            sub_2368931B8((void ***)&v149);
            v72 = *((_QWORD *)&v157 + 1);
            *((_QWORD *)&v157 + 1) = 0;
            if (v72)
              v158();
            if ((_QWORD)v156)
            {
              *((_QWORD *)&v156 + 1) = v156;
              operator delete((void *)v156);
            }
            n = v165 + v29;
          }
          LOBYTE(v26) = v166;
        }
        if ((_BYTE)v26)
        {
          v52 = a5[5];
          v73 = (_QWORD *)a5[9];
          if (v73)
          {
            v74 = (void (*)(_QWORD, uint64_t))v73[3];
            if (v74)
            {
              v74(*v73, v30);
              a5[7] = v30;
            }
          }
          a5[5] = v30;
          sub_2368A2354(v168 + 244);
          v75 = v168[12];
          v77 = v75 == 2 || v75 == 4;
          v58 = sub_2368A2518((uint64_t)(v168 + 247), v168[250], v168[251], v77, a2);
          if (v58)
          {
            v78 = v58;
            do
            {
              v79 = (uint64_t *)v168[244];
              v80 = *v79;
              v81 = v79[2];
              v82 = v79[4];
              v79[3] += 8;
              *(_QWORD *)(v80 + v81) = v82;
              v84 = v79[2];
              v83 = v79[3];
              v85 = (unint64_t)v79[4] >> (v83 & 0xF8);
              v79[3] = v83 & 7;
              v79[4] = v85;
              v79[2] = v84 + (v83 >> 3);
              --v78;
            }
            while (v78);
          }
          goto LABEL_202;
        }
LABEL_206:
        if (a5)
        {
          sub_2368929C4(v168, a2);
          sub_2368A1948(v168, (uint64_t)a5);
        }
        goto LABEL_208;
      }
    }
  }
  else
  {
    v168 = (_QWORD *)a1;
    v169 = v9;
    if (!*(_BYTE *)(a1 + 2048))
    {
      v10 = *(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976);
      v56 = v10 == 8;
      v11 = v10 != 8;
      v12 = v56;
      v167 = v12;
      v13 = a5 != 0;
      v14 = v13 && v11;
      v56 = !v13 || !v11;
      v166 = v13 && v11;
      v15 = *(_QWORD *)(a1 + 72);
      v16 = v15 * *(_QWORD *)(a1 + 64);
      if (v56)
        v17 = v15 * *(_QWORD *)(a1 + 64);
      else
        v17 = 16;
      if (v14)
      {
        v18 = a5[5];
        v19 = *(_QWORD *)(a1 + 2000) + v18;
        v20 = (_QWORD *)a5[9];
        if (v20)
        {
          v21 = (void (*)(_QWORD, uint64_t))v20[3];
          if (v21)
          {
            v21(*v20, v19);
            a5[7] = v19;
          }
        }
        a5[5] = v19;
      }
      else
      {
        v18 = 0;
      }
      v165 = 0;
      if (v16)
      {
        for (jj = 0; jj < v16; v165 = jj)
        {
          for (kk = 0; kk != 220; kk += 55)
          {
            v48 = &v154[kk];
            *((_WORD *)v48 + 132) = 0;
            *(_OWORD *)(v48 + 31) = 0uLL;
            *(_OWORD *)(v48 + 29) = 0uLL;
            *(_OWORD *)(v48 + 27) = 0uLL;
            *(_OWORD *)(v48 + 25) = 0uLL;
            *((_OWORD *)v48 + 8) = 0uLL;
            *((_OWORD *)v48 + 9) = 0uLL;
            *((_OWORD *)v48 + 10) = 0uLL;
            *((_OWORD *)v48 + 11) = 0uLL;
            *(_QWORD *)((char *)v48 + 191) = 0;
            *((_OWORD *)v48 + 17) = 0uLL;
            *((_OWORD *)v48 + 18) = 0uLL;
            *((_OWORD *)v48 + 19) = 0uLL;
            *((_OWORD *)v48 + 20) = 0uLL;
            *((_OWORD *)v48 + 21) = 0uLL;
            *((_OWORD *)v48 + 22) = 0uLL;
            *((_OWORD *)v48 + 23) = 0uLL;
            *((_OWORD *)v48 + 24) = 0uLL;
            *((_OWORD *)v48 + 25) = 0uLL;
            *((_OWORD *)v48 + 26) = 0uLL;
            *((_OWORD *)v48 + 27) = 0uLL;
            *((_OWORD *)v48 + 28) = 0uLL;
            *((_OWORD *)v48 + 29) = 0uLL;
            *((_OWORD *)v48 + 30) = 0uLL;
            *((_OWORD *)v48 + 31) = 0uLL;
            *((_OWORD *)v48 + 32) = 0uLL;
            *((_OWORD *)v48 + 33) = 0uLL;
            *((_OWORD *)v48 + 34) = 0uLL;
          }
          v49 = v16 - jj;
          if (v49 >= v17)
            v50 = v17;
          else
            v50 = v49;
          v156 = 0uLL;
          v157 = 0uLL;
          v158 = (void (*)(void))MEMORY[0x24BDAE450];
          v159 = 0uLL;
          memset(v160, 0, sizeof(v160));
          v161 = 0uLL;
          v162 = 0uLL;
          v163 = 0uLL;
          memset(v164, 0, sizeof(v164));
          if (v166)
          {
            sub_2368982A0(&v149, v50);
            if (v160[1])
            {
              sub_2368931F8((uint64_t)&v160[1], v160[1]);
              operator delete((void *)v160[1]);
            }
            *(_OWORD *)&v160[1] = v149;
            v160[3] = v150;
            v150 = 0;
            v149 = 0uLL;
            v170[0] = (void **)&v149;
            sub_2368931B8(v170);
          }
          *(_QWORD *)&v149 = &v165;
          *((_QWORD *)&v149 + 1) = &v168;
          v150 = &v167;
          v151 = &v166;
          v152 = v154;
          v153 = (uint64_t *)&v169;
          v147(a3, (uint64_t)&v149, (uint64_t (*)(uint64_t, uint64_t))sub_2368A1D10, v50);
          if (v166)
          {
            v155 = v168[12];
            *((_QWORD *)&v163 + 1) = 1;
            sub_2368A1948(v154, (uint64_t)a5);
          }
          if ((_QWORD)v161)
          {
            *((_QWORD *)&v161 + 1) = v161;
            operator delete((void *)v161);
          }
          *(_QWORD *)&v149 = &v160[1];
          sub_2368931B8((void ***)&v149);
          v51 = *((_QWORD *)&v157 + 1);
          *((_QWORD *)&v157 + 1) = 0;
          if (v51)
            v158();
          if ((_QWORD)v156)
          {
            *((_QWORD *)&v156 + 1) = v156;
            operator delete((void *)v156);
          }
          jj = v165 + v17;
        }
        LOBYTE(v14) = v166;
      }
      if ((_BYTE)v14)
      {
        v52 = a5[5];
        v53 = (_QWORD *)a5[9];
        if (v53)
        {
          v54 = (void (*)(_QWORD, uint64_t))v53[3];
          if (v54)
          {
            v54(*v53, v18);
            a5[7] = v18;
          }
        }
        a5[5] = v18;
        sub_2368A2354(v168 + 244);
        v55 = v168[12];
        v56 = v55 == 2 || v55 == 4;
        v57 = v56;
        v58 = sub_2368A2518((uint64_t)(v168 + 247), v168[250], v168[251], v57, a2);
        if (v58)
        {
          v59 = v58;
          do
          {
            v60 = (uint64_t *)v168[244];
            v61 = *v60;
            v62 = v60[2];
            v63 = v60[4];
            v60[3] += 8;
            *(_QWORD *)(v61 + v62) = v63;
            v65 = v60[2];
            v64 = v60[3];
            v66 = (unint64_t)v60[4] >> (v64 & 0xF8);
            v60[3] = v64 & 7;
            v60[4] = v66;
            v60[2] = v65 + (v64 >> 3);
            --v59;
          }
          while (v59);
        }
LABEL_202:
        v142 = v168;
        *(_QWORD *)v168[247] += v58;
        sub_2368929C4(v142, a2);
        v143 = v168;
        sub_236893058((char *)v168[239], v168[241], (uint64_t)a5);
        sub_236893058(*(char **)v143[244], *(_QWORD *)(v143[244] + 16), (uint64_t)a5);
        v144 = (_QWORD *)a5[9];
        if (v144)
        {
          v145 = (void (*)(_QWORD, uint64_t))v144[3];
          if (v145)
          {
            v145(*v144, v52);
            a5[7] = v52;
          }
        }
        a5[5] = v52;
LABEL_208:
        v146 = v168;
LABEL_209:
        *((_BYTE *)v146 + 2048) = 1;
        return;
      }
      goto LABEL_206;
    }
  }
  sub_2368929C4((_QWORD *)a1, a2);
  if (a5)
    sub_2368A1948((_QWORD *)a1, (uint64_t)a5);
}

void sub_2368A17CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  unint64_t v7;
  void *v8;
  va_list va;

  va_start(va, a5);
  v6 = (void *)STACK[0x810];
  if (STACK[0x810])
  {
    STACK[0x818] = (unint64_t)v6;
    operator delete(v6);
  }
  sub_2368931B8((void ***)va);
  v7 = STACK[0x7D0];
  STACK[0x7D0] = 0;
  if (v7)
    ((void (*)(void))STACK[0x7D8])();
  v8 = (void *)STACK[0x7B8];
  if (STACK[0x7B8])
  {
    STACK[0x7C0] = (unint64_t)v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368A18FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t i;
  uint64_t result;

  if (a4)
  {
    for (i = 0; i != a4; ++i)
      result = a3(a2, i);
  }
  return result;
}

_QWORD *sub_2368A1948(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  int v43;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  void *__dst;
  __int128 v51;
  uint64_t v52;
  int v53;

  v2 = a2;
  v3 = result;
  v4 = result[245];
  v5 = result[244];
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 / 160;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v11 += *(_QWORD *)(v5 + v10 + 24) + 8 * *(_QWORD *)(v5 + v10 + 16);
        v10 += 40;
      }
      while (v10 != 160);
      v8 += (unint64_t)(v11 + 7) >> 3;
      ++v7;
      v5 += 160;
    }
    while (v7 != v9);
  }
  v12 = 0;
  v46 = result[241] + v8;
  while (v46 > v12)
  {
    sub_23685C8C8(&__dst, v2, 0x20uLL, v46 - v12);
    v13 = __dst;
    v47 = (char *)__dst;
    v14 = v51;
    v48 = v51;
    v49 = v52;
    __dst = 0;
    *(_QWORD *)&v51 = 0;
    v15 = v3[252];
    v16 = v3[244];
    v17 = v3[12];
    if (v15 >= 1 - 0x3333333333333333 * ((v3[245] - v16) >> 5) * v17)
    {
      v43 = 1;
    }
    else
    {
      v45 = v12;
      v18 = v14;
      v19 = v13;
      do
      {
        if (v18 < 0xA)
          break;
        v20 = v3 + 239;
        if (v15)
          v20 = (_QWORD *)(v16 + 160 * ((v15 - 1) / v17) + 40 * ((v15 - 1) % v17));
        v21 = v3[253];
        v22 = v20[2] - v21 >= v18 - 9 ? v18 - 9 : v20[2] - v21;
        v23 = v3[254];
        if (v23)
        {
          if (v22 < 9)
          {
            v27 = 0;
          }
          else
          {
            v24 = 0;
            v25 = v3[255];
            do
            {
              v26 = *(_QWORD *)(*v20 + v3[253] + v24);
              v19[v24 / 8] = (v26 << v23) | v25;
              v23 = v3[254];
              v25 = v26 >> -(char)v23;
              v3[255] = v25;
              v27 = v24 + 8;
              v28 = v24 + 16;
              v24 += 8;
            }
            while (v28 < v22);
          }
          if (v27 < v22)
          {
            v29 = v3[255];
            do
            {
              v30 = v29 | ((unint64_t)*(unsigned __int8 *)(*v20 + v3[253] + v27) << v23);
              v3[255] = v30;
              v3[254] = v23 + 8;
              *(_QWORD *)((char *)v19 + v27) = v30;
              LOBYTE(v30) = v3[254] & 0xF8;
              v23 = v3[254] & 7;
              v3[254] = v23;
              v29 = v3[255] >> v30;
              v3[255] = v29;
              ++v27;
            }
            while (v22 != v27);
          }
        }
        else
        {
          memcpy(v19, (const void *)(*v20 + v21), v22);
        }
        v19 = (_QWORD *)((char *)v19 + v22);
        v18 -= v22;
        v31 = v3[253] + v22;
        v3[253] = v31;
        if (v31 == v20[2])
        {
          v32 = v20[3];
          if (v32)
          {
            v33 = v3[254];
            v34 = v3[255] | (v20[4] << v33);
            v3[255] = v34;
            v3[254] = v33 + v32;
            *v19 = v34;
            v35 = v3[254];
            v36 = v3[255] >> (v35 & 0xF8);
            v3[254] = v35 & 7;
            v3[255] = v36;
            v19 = (_QWORD *)((char *)v19 + (v35 >> 3));
            v18 -= v35 >> 3;
          }
          v3[253] = 0;
          v37 = v3[252];
          v3[252] = v37 + 1;
          if (!(v37 % v17))
          {
            v38 = v3[254];
            if (v38)
            {
              v39 = v3[255];
              v3[254] = (8 - v38) + v38;
              *v19 = v39;
              v40 = v3[254];
              v41 = v3[255] >> (v40 & 0xF8);
              v3[254] = v40 & 7;
              v3[255] = v41;
              v19 = (_QWORD *)((char *)v19 + (v40 >> 3));
              v18 -= v40 >> 3;
            }
          }
        }
        v15 = v3[252];
        v16 = v3[244];
        v17 = v3[12];
      }
      while (v15 < 1 - 0x3333333333333333 * ((v3[245] - v16) >> 5) * v17);
      v42 = (char *)v19 - (char *)v13;
      if (v19 == v13)
      {
        v43 = 1;
        v2 = a2;
        v12 = v45;
      }
      else
      {
        v43 = 0;
        v47 += v42;
        *(_QWORD *)&v48 = v48 - v42;
        *((_QWORD *)&v48 + 1) += v42;
        v2 = a2;
        v12 = v42 + v45;
      }
    }
    result = sub_236831498(&v47);
    if (v53)
    {
      if (v43)
        return result;
    }
    else
    {
      result = sub_236831498(&__dst);
      if (v43)
        return result;
    }
  }
  return result;
}

uint64_t sub_2368A1D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  char *v59;
  uint64_t j;
  char *v61;
  char *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t (*v65)(uint64_t, char *);
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint16x8_t *v76;
  _OWORD *v77;
  _OWORD *v78;
  int16x8_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t k;
  _WORD *v86;
  __int16 v87;
  char *v88;
  uint64_t *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint64_t v97;
  const char *v98;
  uint16x8_t *v99;
  uint16x8_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, char *);
  uint64_t v110;
  _QWORD *v111;
  uint64_t v113;
  char *vars0;
  uint64_t vars8;
  int8x8x2_t v116;

  STACK[0x838] = *MEMORY[0x24BDAC8D0];
  v22 = **(_QWORD **)a1 + a2;
  v23 = **(uint64_t ***)(a1 + 8);
  v25 = v23[7];
  v24 = v23[8];
  v26 = v22 / v24;
  v27 = v22 % v24;
  v28 = v22 + v23[11] * v23[10] + 2;
  if (**(_BYTE **)(a1 + 16))
    v28 = 0;
  v110 = v28;
  if (v23[6] - (v27 << 8) >= 0x100)
    v29 = 256;
  else
    v29 = v23[6] - (v27 << 8);
  if (v25 - (v26 << 8) >= 0x100)
    v30 = 256;
  else
    v30 = v25 - (v26 << 8);
  v108 = *v23;
  v109 = (uint64_t (*)(uint64_t, char *))v23[5];
  v113 = v30;
  vars0 = (char *)((uint64_t (*)(void))v23[2])();
  if (**(_BYTE **)(a1 + 24))
  {
    v111 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1952) + 160 * a2);
    v33 = a1;
    v34 = **(_QWORD **)(a1 + 8);
  }
  else
  {
    v34 = **(_QWORD **)(a1 + 8);
    v111 = (_QWORD *)(*(_QWORD *)(v34 + 1952) + 160 * v110);
    v33 = a1;
  }
  v35 = **(unsigned __int8 **)(v33 + 16);
  if (*(_BYTE *)(v34 + 120))
  {
    v36 = *(_QWORD *)(v34 + 96);
    if (v36)
    {
      v37 = 0;
      v38 = (uint64_t)v111;
      do
      {
        if (!v35 || v37)
          sub_236892FC0(v38, (16 * v29 * v113) | 4);
        ++v37;
        v38 += 40;
      }
      while (v36 != v37);
    }
    v39 = (_OWORD *)(v34 + 128);
    if (!v35)
    {
      v40 = *v111;
      v41 = v111[2];
      v42 = v111[3];
      v43 = v111[4] | (1 << v42);
      v111[3] = v42 + 1;
      v111[4] = v43;
      *(_QWORD *)(v40 + v41) = v43;
      v44 = v111[3];
      v45 = v44 & 7;
      v46 = v111[4] >> (v44 & 0xF8);
      v47 = v111[2] + (v44 >> 3);
      v48 = *v111;
      v49 = v46 | (1 << v45);
      v111[2] = v47;
      v111[3] = v45 + 1;
      v111[4] = v49;
      *(_QWORD *)(v48 + v47) = v49;
      v50 = v111[3];
      v51 = v50 & 7;
      v52 = v111[4] >> (v50 & 0xF8);
      v53 = v111[2] + (v50 >> 3);
      v54 = *v111;
      v111[2] = v53;
      v111[3] = v51 + 2;
      v111[4] = v52;
      *(_QWORD *)(v54 + v53) = v52;
      v56 = v111[2];
      v55 = v111[3];
      v57 = v111[4] >> (v55 & 0xF8);
      v111[3] = v55 & 7;
      v111[4] = v57;
      v111[2] = v56 + (v55 >> 3);
    }
    for (i = 0; i != 768; i += 192)
    {
      v59 = &a21 + i;
      *((_QWORD *)v59 + 8) = 0;
      *((_QWORD *)v59 + 9) = 0;
      *((_QWORD *)v59 + 16) = 0;
      *((_QWORD *)v59 + 17) = 0;
    }
    for (j = 8; j != 72; j += 16)
      *(_QWORD *)(&a13 + j) = 0;
    if (v36)
    {
      v61 = &a21;
      v62 = &a13;
      v63 = v111;
      v64 = v36;
      do
      {
        *(_QWORD *)v62 = v61;
        v62 += 16;
        *(_QWORD *)v61 = v39;
        *((_QWORD *)v61 + 1) = v63;
        *((_OWORD *)v61 + 4) = *v39;
        *((_OWORD *)v61 + 8) = *(_OWORD *)((char *)v39 + 19);
        v61 += 192;
        v39 = (_OWORD *)((char *)v39 + 440);
        v63 += 5;
        --v64;
      }
      while (v64);
      sub_23689E738(&__p, v36);
    }
    else
    {
      __p = 0;
      a11 = 0;
      a12 = 0;
    }
    if (v113)
    {
      v68 = 0;
      v69 = 1;
      while (1)
      {
        *(_OWORD *)&STACK[0x810] = 0u;
        *(_OWORD *)&STACK[0x820] = 0u;
        *(_OWORD *)&STACK[0x7F0] = 0u;
        *(_OWORD *)&STACK[0x800] = 0u;
        vars8 = v69;
        if (!v36)
          break;
        v70 = 0;
        v71 = 0;
        v72 = (char *)__p + 704 * (v69 & 1) + 64;
        v73 = (char *)__p + 704 * (v68 & 1) + 64;
        v74 = v73;
        v75 = v72;
        do
        {
          *(&STACK[0x810] + v71) = (unint64_t)&v73[v70 + (v74 & 0x3E)];
          *(&STACK[0x7F0] + v71++) = (unint64_t)&v72[v70 + (v75 & 0x3E)];
          v75 += 1408;
          v70 += 1408;
          v74 += 1408;
        }
        while (v36 != v71);
        switch(v36)
        {
          case 1uLL:
            v80 = STACK[0x810];
            if (v29 >= 8)
            {
              v94 = 0;
              v95 = (uint16x8_t *)STACK[0x810];
              do
              {
                *v95++ = vmovl_u8(*(uint8x8_t *)&vars0[v94]);
                v81 = v94 + 8;
                v96 = v94 + 16;
                v94 += 8;
              }
              while (v96 <= v29);
            }
            else
            {
              v81 = 0;
            }
            if (v81 < v29)
            {
              do
              {
                *(_WORD *)(v80 + 2 * v81) = vars0[v81];
                ++v81;
              }
              while (v29 != v81);
            }
            break;
          case 2uLL:
            v82 = STACK[0x810];
            v83 = STACK[0x818];
            if (v29 >= 8)
            {
              v97 = 0;
              v98 = vars0;
              v99 = (uint16x8_t *)STACK[0x810];
              v100 = (uint16x8_t *)STACK[0x818];
              do
              {
                v116 = vld2_s8(v98);
                v98 += 16;
                *v99++ = vmovl_u8((uint8x8_t)v116.val[0]);
                *v100++ = vmovl_u8((uint8x8_t)v116.val[1]);
                v84 = v97 + 8;
                v101 = v97 + 16;
                v97 += 8;
              }
              while (v101 <= v29);
            }
            else
            {
              v84 = 0;
            }
            v102 = v29 - v84;
            if (v29 > v84)
            {
              v103 = 2 * v84;
              do
              {
                *(_WORD *)(v82 + v103) = vars0[v103];
                *(_WORD *)(v83 + v103) = vars0[v103 + 1];
                v103 += 2;
                --v102;
              }
              while (v102);
            }
            break;
          case 3uLL:
            sub_2368A0444(vars0, v29, (int16x8_t *)STACK[0x810], (_OWORD *)STACK[0x818], (_OWORD *)STACK[0x820]);
LABEL_48:
            for (k = 0; k != v36; ++k)
            {
              if (v68)
              {
                v86 = (_WORD *)*(&STACK[0x7F0] + k);
                *(_WORD *)(*(&STACK[0x810] + k) - 2) = *v86;
                v87 = *v86;
              }
              else
              {
                v87 = 0;
                *(_WORD *)(*(&STACK[0x810] + k) - 2) = 0;
                v86 = (_WORD *)*(&STACK[0x7F0] + k);
              }
              *(v86 - 1) = v87;
            }
            v88 = &a13;
            v89 = (uint64_t *)&STACK[0x7F0];
            v90 = (uint64_t *)&STACK[0x810];
            v91 = v36;
            do
            {
              v92 = *v90 - 2;
              v93 = v92;
              if (v68)
              {
                v92 = *v89;
                v93 = *v89 - 2;
              }
              sub_23689FE00((uint64_t)v88, *v90, *v90 - 2, v92, v93, v29, v31, v32);
              v88 += 16;
              ++v89;
              ++v90;
              --v91;
            }
            while (v91);
            goto LABEL_57;
          default:
            v79 = (int16x8_t *)STACK[0x810];
            v78 = (_OWORD *)STACK[0x818];
            v77 = (_OWORD *)STACK[0x820];
            v76 = (uint16x8_t *)STACK[0x828];
            goto LABEL_46;
        }
LABEL_47:
        if (v36)
          goto LABEL_48;
LABEL_57:
        ++v68;
        v69 = (vars8 + 1);
        if (v68 == v113)
          goto LABEL_70;
      }
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
LABEL_46:
      sub_2368A04FC(vars0, v29, v79, v78, v77, v76);
      goto LABEL_47;
    }
LABEL_70:
    if (v36)
    {
      v104 = &a14;
      do
      {
        sub_2368A00EC(*(unsigned __int8 **)*(v104 - 1), *(uint64_t **)(*(v104 - 1) + 8), *v104);
        v104 += 2;
        --v36;
      }
      while (v36);
    }
    v66 = v108;
    v65 = v109;
    v67 = v111;
    if (__p)
    {
      a11 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_2368A45DC((unsigned __int16 *)vars0, v29, v113, 0, v35 != 0, v34 + 128, *(_QWORD *)(v34 + 1888), *(_QWORD *)(v34 + 96), v111);
    v66 = v108;
    v65 = v109;
    v67 = v111;
  }
  v105 = 0;
  v106 = 0;
  do
  {
    v106 += v67[v105 + 3] + 8 * v67[v105 + 2];
    v105 += 5;
  }
  while (v105 != 20);
  *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 1976) + 8 * v110) = (unint64_t)(v106 + 7) >> 3;
  return v65(v66, vars0);
}

void sub_2368A2354(_QWORD *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  _QWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  _QWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;

  v2 = (_OWORD *)*a1;
  v1 = (_OWORD *)a1[1];
  v3 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v1 - *a1) >> 5);
  if (v3 != 1)
  {
    if (v3)
    {
      sub_2368931F8((uint64_t)a1, (uint64_t)(v2 + 10));
    }
    else if ((_OWORD *)a1[2] == v1)
    {
      v8 = operator new(0xA0uLL);
      v9 = 0;
      *v8 = 0u;
      v8[1] = 0u;
      v8[2] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[9] = 0u;
      v10 = MEMORY[0x24BDAE450];
      do
      {
        v11 = (_QWORD *)((char *)v8 + v9);
        *v11 = 0;
        v11[1] = v10;
        v11[3] = 0;
        v11[4] = 0;
        v9 += 40;
        v11[2] = 0;
      }
      while (v9 != 160);
      v12 = v8 + 10;
      if (v1 == v2)
      {
        *a1 = v8;
        a1[1] = v12;
        a1[2] = v12;
      }
      else
      {
        do
        {
          v13 = v8 - 10;
          v14 = v1 - 10;
          v15 = -160;
          do
          {
            v16 = (char *)v8 + v15;
            v17 = *(_QWORD *)((char *)v1 + v15);
            *(_QWORD *)((char *)v1 + v15) = 0;
            *(_QWORD *)v16 = v17;
            *((_QWORD *)v16 + 1) = *(_QWORD *)((char *)v1 + v15 + 8);
            v18 = *(_OWORD *)((char *)v1 + v15 + 16);
            *((_QWORD *)v16 + 4) = *(_QWORD *)((char *)v1 + v15 + 32);
            *((_OWORD *)v16 + 1) = v18;
            v15 += 40;
          }
          while (v15);
          v8 -= 10;
          v1 -= 10;
        }
        while (v14 != v2);
        v1 = (_OWORD *)*a1;
        v19 = (_OWORD *)a1[1];
        *a1 = v13;
        a1[1] = v12;
        a1[2] = v12;
        while (v19 != v1)
        {
          v20 = 0;
          v21 = v19;
          v19 -= 10;
          do
          {
            v22 = *(_QWORD *)((char *)v21 + v20 - 40);
            *(_QWORD *)((char *)v21 + v20 - 40) = 0;
            if (v22)
              (*(void (**)(void))((char *)v21 + v20 - 32))();
            v20 -= 40;
          }
          while (v20 != -160);
        }
      }
      if (v1)
        operator delete(v1);
    }
    else
    {
      v5 = 0;
      v1[8] = 0u;
      v1[9] = 0u;
      v1[6] = 0u;
      v1[7] = 0u;
      v1[4] = 0u;
      v1[5] = 0u;
      v1[2] = 0u;
      v1[3] = 0u;
      *v1 = 0u;
      v1[1] = 0u;
      v6 = MEMORY[0x24BDAE450];
      do
      {
        v7 = (_QWORD *)((char *)v1 + v5);
        *v7 = 0;
        v7[1] = v6;
        v7[3] = 0;
        v7[4] = 0;
        v5 += 40;
        v7[2] = 0;
      }
      while (v5 != 160);
      a1[1] = v1 + 10;
    }
  }
}

unint64_t sub_2368A2518(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  sub_2367DBF84(&v24, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v10 = v24;
  v11 = v25;
  *v24 = a3;
  v12 = v11 - (_BYTE *)v10;
  if (v11 == (_BYTE *)v10)
  {
    v19 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 >> 3;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = 1;
      while (v16 != 4)
      {
        v17 = qword_236924890[v16++];
        if (v17 > v10[v13])
        {
          v18 = v16 - 2;
          goto LABEL_9;
        }
      }
      v18 = 3;
LABEL_9:
      v14 += qword_236924870[v18];
      ++v13;
    }
    while (v13 != v15);
    v19 = (unint64_t)(v14 + 7) >> 3;
  }
  v20 = 2;
  if (a5)
    v20 = 0;
  v21 = 34;
  if (a4)
    v21 = 38;
  v22 = a2 - (v19 + ((unint64_t)(v20 + v21) >> 3)) - **(_QWORD **)a1;
  operator delete(v10);
  return v22;
}

#error "2368A2C90: call analysis failed (funcsize=600)"

#error "2368A35F4: call analysis failed (funcsize=600)"

#error "2368A3F90: call analysis failed (funcsize=643)"

uint64_t sub_2368A4310(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,uint64x2_t a21,uint64x2_t a22,uint64x2_t a23,uint64x2_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28;
  char v29;
  int32x4_t v30;
  uint32x4_t v31;
  int16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  char v35;
  int32x4_t *v36;
  int32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  int16x8_t v44;
  int8x16_t v45;
  unsigned __int128 v46;
  int8x16_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  unint64_t v63;
  int8x16_t v64;
  uint64_t v65;
  int8x16_t v66;
  uint64_t v67;
  int8x16_t v68;
  uint64x2_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  uint64x2_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  uint64x2_t vars0;

  v28 = 0;
  a28 = *MEMORY[0x24BDAC8D0];
  v29 = 1;
  v30.i64[0] = 0x2000000020;
  v30.i64[1] = 0x2000000020;
  v31.i64[0] = 0x100000001;
  v31.i64[1] = 0x100000001;
  v32.i64[0] = 0xC000C000C000CLL;
  v32.i64[1] = 0xC000C000C000CLL;
  v33.i64[0] = 0xD000D000D000DLL;
  v33.i64[1] = 0xD000D000D000DLL;
  v34.i64[0] = 0x1000100010001;
  v34.i64[1] = 0x1000100010001;
  do
  {
    v35 = v29;
    v36 = (int32x4_t *)(result + 4 * v28);
    v37 = v36[1];
    v38 = (int16x8_t)vsubq_s32(v30, vclzq_s32(*v36));
    v39 = (int16x8_t)vsubq_s32(v30, vclzq_s32(v37));
    v40 = vqsubq_u32((uint32x4_t)v38, v31);
    v41 = vqsubq_u32((uint32x4_t)v39, v31);
    v42 = vqsubq_u32(*(uint32x4_t *)v36, vshlq_u32(v31, v40));
    v43 = vqsubq_u32((uint32x4_t)v37, vshlq_u32(v31, v41));
    v44 = vuzp1q_s16(v38, v39);
    v45 = (int8x16_t)vcgtq_s16(v44, v32);
    v46 = *(_OWORD *)&vbslq_s8(v45, (int8x16_t)vhaddq_u16((uint16x8_t)v44, v33), (int8x16_t)v44) | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    v47 = vqtbl1q_s8(a6, (int8x16_t)v46);
    v48 = (uint16x8_t)vbslq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)v44, v34)), v45), (int8x16_t)(*(_OWORD *)&v47 | __PAIR128__(0x80008000800080, 0x80008000800080)), v47);
    v49 = vqtbl1q_s8(a5, (int8x16_t)v46);
    v50 = a2 - v28;
    if (a2 < v28)
      v50 = 0;
    v51 = a3 - v28;
    if (a3 < v28)
      v51 = 0;
    v52 = (int8x16_t *)((char *)&v79 + 8 * v28);
    v53 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v48.i8);
    v54 = (int8x16_t)vmovl_high_u16(v48);
    v55 = vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    v56 = vorrq_s8((int8x16_t)vshlq_u32(v42, vmovl_u16(*(uint16x4_t *)v49.i8)), v53);
    v57 = (int8x16_t)vaddw_u16(v40, *(uint16x4_t *)v49.i8);
    if (v51 >= 4)
      v58 = 4;
    else
      v58 = v51;
    if (v51 <= 4)
      v51 = 4;
    if (v50 >= 4)
      v59 = 4;
    else
      v59 = v50;
    if (v50 <= 4)
      v50 = 4;
    v60 = vandq_s8(*(int8x16_t *)((char *)&unk_236924BF0 - 4 * v59), *(int8x16_t *)((char *)&unk_236924C10 - 4 * v58));
    *v52 = vandq_s8(v60, v57);
    v52[1] = vandq_s8(v60, v56);
    v61 = vorrq_s8((int8x16_t)vshlq_u32(v43, v55), v54);
    v62 = (int8x16_t)vaddw_high_u16(v41, (uint16x8_t)v49);
    v63 = v50 - 4;
    if (v63 >= 4)
      v63 = 4;
    v64 = *(int8x16_t *)((char *)&unk_236924BF0 - 4 * v63);
    v65 = v51 - 4;
    if (v51 - 4 >= 4)
      v65 = 4;
    v66 = vandq_s8(v64, *(int8x16_t *)((char *)&unk_236924C10 - 4 * v65));
    v52[2] = vandq_s8(v66, v62);
    v52[3] = vandq_s8(v66, v61);
    v28 = 8;
    v29 = 0;
  }
  while ((v35 & 1) != 0);
  v67 = 0;
  v68.i64[0] = 0xFFFFFFFFLL;
  v68.i64[1] = 0xFFFFFFFFLL;
  v69 = (uint64x2_t)vandq_s8(v79, v68);
  v70 = (uint64x2_t)vandq_s8(a11, v68);
  a21 = vsraq_n_u64(v69, (uint64x2_t)v79, 0x20uLL);
  a22 = vsraq_n_u64(v70, (uint64x2_t)a11, 0x20uLL);
  a17 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64(vars0, 0x20uLL), v69), vandq_s8((int8x16_t)vars0, v68));
  a18 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a12, 0x20uLL), v70), vandq_s8(a12, v68));
  v71 = (uint64x2_t)vandq_s8(a13, v68);
  v72 = (uint64x2_t)vandq_s8(a15, v68);
  a23 = vsraq_n_u64(v71, (uint64x2_t)a13, 0x20uLL);
  a24 = vsraq_n_u64(v72, (uint64x2_t)a15, 0x20uLL);
  a19 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a14, 0x20uLL), v71), vandq_s8(a14, v68));
  a20 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a16, 0x20uLL), v72), vandq_s8(a16, v68));
  v73 = a4[3];
  do
  {
    v74 = a17.u64[v67];
    v75 = a4[4] | (v74 << v73);
    a4[4] = v75;
    *(_QWORD *)(*a4 + a4[2]) = v75;
    v76 = a4[3];
    v73 = a21.i64[v67] + v76;
    a4[3] = v73;
    if (v73 >= 0x40)
    {
      a4[3] = v73 - 64;
      a4[4] = v74 >> -(char)v76;
      a4[2] += 8;
      LOBYTE(v73) = v73 - 64;
    }
    ++v67;
  }
  while (v67 != 8);
  *(_QWORD *)(*a4 + a4[2]) = a4[4];
  v78 = a4[2];
  v77 = a4[3];
  a4[4] >>= v77 & 0xF8;
  a4[2] = v78 + (v77 >> 3);
  a4[3] = v77 & 7;
  return result;
}

void sub_2368A45DC(unsigned __int16 *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  int v46;
  int v47;
  _WORD *v48;
  unsigned __int16 *v49;
  unint64_t v50;
  int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 **v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  void *__p[2];
  uint64_t v64;
  _QWORD *v65;

  if ((a5 & 1) == 0)
  {
    sub_236892FC0((uint64_t)a9, (16 * a2 * a3) | 4);
    v17 = *a9;
    v18 = a9[2];
    v19 = a9[3];
    v20 = a9[4] | (1 << v19);
    a9[3] = v19 + 1;
    a9[4] = v20;
    *(_QWORD *)(v17 + v18) = v20;
    v21 = a9[3];
    v22 = v21 & 7;
    v23 = a9[4] >> (v21 & 0xF8);
    v24 = a9[2] + (v21 >> 3);
    v25 = *a9;
    v26 = v23 | (1 << v22);
    a9[2] = v24;
    a9[3] = v22 + 1;
    a9[4] = v26;
    *(_QWORD *)(v25 + v24) = v26;
    v27 = a9[3];
    v28 = v27 & 7;
    v29 = a9[4] >> (v27 & 0xF8);
    v30 = a9[2] + (v27 >> 3);
    v31 = *a9;
    a9[2] = v30;
    a9[3] = v28 + 2;
    a9[4] = v29;
    *(_QWORD *)(v31 + v30) = v29;
    v33 = a9[2];
    v32 = a9[3];
    v34 = a9[4] >> (v32 & 0xF8);
    a9[3] = v32 & 7;
    a9[4] = v34;
    a9[2] = v33 + (v32 >> 3);
  }
  v61 = &v64;
  v62 = 0;
  v64 = a6 + 440 * a5;
  v65 = a9;
  sub_23689D464((char **)__p);
  if (a3)
  {
    v37 = 0;
    v38 = a8 - 1;
    do
    {
      v39 = ((v37 & 1u) << 7) | ((unint64_t)(v37 & 1) << 9);
      v40 = __p[0];
      switch(v38)
      {
        case 0:
          if (a2)
          {
            v41 = 0;
            do
            {
              *(_WORD *)((char *)&v40[v41 + 32] + v39) = *(_WORD *)(a7
                                                                  + 2
                                                                  * ((-1640531535
                                                                    * *((unsigned __int8 *)a1 + v41)) >> 16));
              ++v41;
            }
            while (a2 != v41);
          }
          break;
        case 1:
          if (a2)
          {
            v42 = 0;
            do
            {
              *(_WORD *)((char *)&v40[v42 + 32] + v39) = *(_WORD *)(a7
                                                                  + 2 * ((-1640531535 * a1[v42]) >> 16));
              ++v42;
            }
            while (a2 != v42);
          }
          break;
        case 2:
          if (a2)
          {
            v43 = (char *)__p[0] + v39 + 64;
            v44 = a1;
            v45 = a2;
            do
            {
              v46 = *((unsigned __int8 *)v44 + 2);
              v47 = *v44;
              v44 = (unsigned __int16 *)((char *)v44 + 3);
              *v43++ = *(_WORD *)(a7 + 2 * ((-1640531535 * (v47 | (v46 << 16))) >> 16));
              --v45;
            }
            while (v45);
          }
          break;
        case 3:
          if (a2)
          {
            v48 = (char *)__p[0] + v39 + 64;
            v49 = a1;
            v50 = a2;
            do
            {
              v51 = *(_DWORD *)v49;
              v49 += 2;
              *v48++ = *(_WORD *)(a7 + 2 * ((-1640531535 * v51) >> 16));
              --v50;
            }
            while (v50);
          }
          break;
        default:
          break;
      }
      v52 = (char *)v40 + v39;
      if (v37)
      {
        v53 = (char *)&v40[320 * !(v37 & 1)];
        v55 = *((_WORD *)v53 + 32);
        v54 = (uint64_t)(v53 + 64);
        *((_WORD *)v52 + 31) = v55;
        v56 = (uint64_t)(v52 + 62);
        *((_WORD *)v53 + 31) = v55;
        v57 = (uint64_t)(v53 + 62);
      }
      else
      {
        *((_WORD *)v52 + 31) = 0;
        v54 = (uint64_t)(v52 + 62);
        v40[351] = 0;
        v56 = (uint64_t)(v52 + 62);
        v57 = (uint64_t)(v52 + 62);
      }
      sub_23689FE00((uint64_t)&v61, (uint64_t)(v52 + 64), v56, v54, v57, a2, v35, v36);
      ++v37;
      a1 = (unsigned __int16 *)((char *)a1 + a4);
    }
    while (v37 != a3);
    v59 = (unsigned __int8 **)v61;
    v58 = v62;
    v60 = (uint64_t **)(v61 + 1);
  }
  else
  {
    v58 = 0;
    v60 = &v65;
    v59 = (unsigned __int8 **)&v64;
  }
  sub_2368A00EC(*v59, *v60, v58);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_2368A4910(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,uint64x2_t a21,uint64x2_t a22,uint64x2_t a23,uint64x2_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28;
  char v29;
  int16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int8x16_t v33;
  char v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  unsigned __int128 v40;
  int8x16_t v41;
  int16x8_t v42;
  int16x8_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint64_t v66;
  int8x16_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  uint64x2_t vars0;

  v28 = 0;
  a28 = *MEMORY[0x24BDAC8D0];
  v29 = 1;
  v30.i64[0] = 0x10001000100010;
  v30.i64[1] = 0x10001000100010;
  v31.i64[0] = 0x1000100010001;
  v31.i64[1] = 0x1000100010001;
  v32.i64[0] = 0xF000F000F000FLL;
  v32.i64[1] = 0xF000F000F000FLL;
  v33.i64[0] = 0xFFFF0000FFFFLL;
  v33.i64[1] = 0xFFFF0000FFFFLL;
  do
  {
    v34 = v29;
    v35 = *(int16x8_t *)(result + 2 * v28);
    v36 = vclzq_s16(v35);
    v37 = (uint16x8_t)vsubq_s16(v30, v36);
    v38 = (int16x8_t)vqsubq_u16(v37, v31);
    v39 = (int16x8_t)vqsubq_u16((uint16x8_t)v35, vshlq_u16(v31, (uint16x8_t)v38));
    v40 = *(_OWORD *)&vminq_u16(v37, v32) | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    v41 = vqtbl1q_s8(a6, (int8x16_t)v40);
    v42 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16(v36), (int8x16_t)(*(_OWORD *)&v41 | __PAIR128__(0x80008000800080, 0x80008000800080)), v41);
    v43 = (int16x8_t)vqtbl1q_s8(a5, (int8x16_t)v40);
    v44 = a2 - v28;
    if (a2 < v28)
      v44 = 0;
    v45 = a3 - v28;
    if (a3 < v28)
      v45 = 0;
    v46 = (int8x16_t *)((char *)&v78 + 8 * v28);
    v47 = (int8x16_t)vzip1q_s16(v42, v39);
    v48 = (int8x16_t)vzip2q_s16(v42, v39);
    v49 = (int8x16_t)vzip1q_s16(v43, v38);
    v50 = (int8x16_t)vzip2q_s16(v43, v38);
    v51 = 2 * v44;
    v52 = 2 * v45;
    if (v52 >= 8)
      v53 = 8;
    else
      v53 = v52;
    if (v52 <= 8)
      v52 = 8;
    if (v51 >= 8)
      v54 = 8;
    else
      v54 = v51;
    if (v51 <= 8)
      v51 = 8;
    v55 = vandq_s8(*(int8x16_t *)((char *)&unk_23692499C - 2 * v54), *(int8x16_t *)((char *)&unk_2369249BC - 2 * v53));
    v56 = vandq_s8(v55, v49);
    v57 = vandq_s8(v55, v47);
    v58 = v51 - 8;
    if (v58 >= 8)
      v58 = 8;
    v59 = *(int8x16_t *)((char *)&unk_23692499C - 2 * v58);
    v60 = v52 - 8;
    if (v52 - 8 >= 8)
      v60 = 8;
    v61 = vandq_s8(v59, *(int8x16_t *)((char *)&unk_2369249BC - 2 * v60));
    v62 = vandq_s8(v61, v50);
    v63 = vandq_s8(v61, v48);
    v64 = (uint32x4_t)vandq_s8(v56, v33);
    *(uint32x4_t *)v46 = vsraq_n_u32(v64, (uint32x4_t)v56, 0x10uLL);
    v46[1] = vorrq_s8(vandq_s8(v57, v33), (int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v57, 0x10uLL), v64));
    v65 = (uint32x4_t)vandq_s8(v62, v33);
    v46[2] = (int8x16_t)vsraq_n_u32(v65, (uint32x4_t)v62, 0x10uLL);
    v46[3] = vorrq_s8((int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v63, 0x10uLL), v65), vandq_s8(v63, v33));
    v28 = 8;
    v29 = 0;
  }
  while ((v34 & 1) != 0);
  v66 = 0;
  v67.i64[0] = 0xFFFFFFFFLL;
  v67.i64[1] = 0xFFFFFFFFLL;
  v68 = (uint64x2_t)vandq_s8(v78, v67);
  v69 = (uint64x2_t)vandq_s8(a11, v67);
  a21 = vsraq_n_u64(v68, (uint64x2_t)v78, 0x20uLL);
  a22 = vsraq_n_u64(v69, (uint64x2_t)a11, 0x20uLL);
  a17 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64(vars0, 0x20uLL), v68), vandq_s8((int8x16_t)vars0, v67));
  a18 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a12, 0x20uLL), v69), vandq_s8(a12, v67));
  v70 = (uint64x2_t)vandq_s8(a13, v67);
  v71 = (uint64x2_t)vandq_s8(a15, v67);
  a23 = vsraq_n_u64(v70, (uint64x2_t)a13, 0x20uLL);
  a24 = vsraq_n_u64(v71, (uint64x2_t)a15, 0x20uLL);
  a19 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a14, 0x20uLL), v70), vandq_s8(a14, v67));
  a20 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a16, 0x20uLL), v71), vandq_s8(a16, v67));
  v72 = a4[3];
  do
  {
    v73 = a17.u64[v66];
    v74 = a4[4] | (v73 << v72);
    a4[4] = v74;
    *(_QWORD *)(*a4 + a4[2]) = v74;
    v75 = a4[3];
    v72 = a21.i64[v66] + v75;
    a4[3] = v72;
    if (v72 >= 0x40)
    {
      a4[3] = v72 - 64;
      a4[4] = v73 >> -(char)v75;
      a4[2] += 8;
      LOBYTE(v72) = v72 - 64;
    }
    ++v66;
  }
  while (v66 != 8);
  *(_QWORD *)(*a4 + a4[2]) = a4[4];
  v77 = a4[2];
  v76 = a4[3];
  a4[4] >>= v76 & 0xF8;
  a4[2] = v77 + (v76 >> 3);
  a4[3] = v76 & 7;
  return result;
}

uint64_t sub_2368A4BCC(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,uint64x2_t a21,uint64x2_t a22,uint64x2_t a23,uint64x2_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28;
  char v29;
  int16x8_t v30;
  uint16x8_t v31;
  int8x16_t v32;
  char v33;
  int16x8_t v34;
  uint16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  unsigned __int128 v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  unint64_t v55;
  int8x16_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint64_t v63;
  int8x16_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  uint64x2_t vars0;

  v28 = 0;
  a28 = *MEMORY[0x24BDAC8D0];
  v29 = 1;
  v30.i64[0] = 0x10001000100010;
  v30.i64[1] = 0x10001000100010;
  v31.i64[0] = 0x1000100010001;
  v31.i64[1] = 0x1000100010001;
  v32.i64[0] = 0xFFFF0000FFFFLL;
  v32.i64[1] = 0xFFFF0000FFFFLL;
  do
  {
    v33 = v29;
    v34 = *(int16x8_t *)(result + 2 * v28);
    v35 = (uint16x8_t)vsubq_s16(v30, vclzq_s16(v34));
    v36 = (int16x8_t)vqsubq_u16(v35, v31);
    v37 = (int16x8_t)vqsubq_u16((uint16x8_t)v34, vshlq_u16(v31, (uint16x8_t)v36));
    v38 = *(_OWORD *)&v35 | __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
    v39 = (int16x8_t)vqtbl1q_s8(a5, (int8x16_t)v38);
    v40 = (int16x8_t)vqtbl1q_s8(a6, (int8x16_t)v38);
    v41 = a2 - v28;
    if (a2 < v28)
      v41 = 0;
    v42 = a3 - v28;
    if (a3 < v28)
      v42 = 0;
    v43 = (int8x16_t *)((char *)&v75 + 8 * v28);
    v44 = (int8x16_t)vzip1q_s16(v40, v37);
    v45 = (int8x16_t)vzip2q_s16(v40, v37);
    v46 = (int8x16_t)vzip1q_s16(v39, v36);
    v47 = (int8x16_t)vzip2q_s16(v39, v36);
    v48 = 2 * v41;
    v49 = 2 * v42;
    if (v49 >= 8)
      v50 = 8;
    else
      v50 = v49;
    if (v49 <= 8)
      v49 = 8;
    if (v48 >= 8)
      v51 = 8;
    else
      v51 = v48;
    if (v48 <= 8)
      v48 = 8;
    v52 = vandq_s8(*(int8x16_t *)((char *)&unk_23692499C - 2 * v51), *(int8x16_t *)((char *)&unk_2369249BC - 2 * v50));
    v53 = vandq_s8(v52, v46);
    v54 = vandq_s8(v52, v44);
    v55 = v48 - 8;
    if (v55 >= 8)
      v55 = 8;
    v56 = *(int8x16_t *)((char *)&unk_23692499C - 2 * v55);
    v57 = v49 - 8;
    if (v49 - 8 >= 8)
      v57 = 8;
    v58 = vandq_s8(v56, *(int8x16_t *)((char *)&unk_2369249BC - 2 * v57));
    v59 = vandq_s8(v58, v47);
    v60 = vandq_s8(v58, v45);
    v61 = (uint32x4_t)vandq_s8(v53, v32);
    *(uint32x4_t *)v43 = vsraq_n_u32(v61, (uint32x4_t)v53, 0x10uLL);
    v43[1] = vorrq_s8(vandq_s8(v54, v32), (int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v54, 0x10uLL), v61));
    v62 = (uint32x4_t)vandq_s8(v59, v32);
    v43[2] = (int8x16_t)vsraq_n_u32(v62, (uint32x4_t)v59, 0x10uLL);
    v43[3] = vorrq_s8((int8x16_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v60, 0x10uLL), v62), vandq_s8(v60, v32));
    v28 = 8;
    v29 = 0;
  }
  while ((v33 & 1) != 0);
  v63 = 0;
  v64.i64[0] = 0xFFFFFFFFLL;
  v64.i64[1] = 0xFFFFFFFFLL;
  v65 = (uint64x2_t)vandq_s8(v75, v64);
  v66 = (uint64x2_t)vandq_s8(a11, v64);
  a21 = vsraq_n_u64(v65, (uint64x2_t)v75, 0x20uLL);
  a22 = vsraq_n_u64(v66, (uint64x2_t)a11, 0x20uLL);
  a17 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64(vars0, 0x20uLL), v65), vandq_s8((int8x16_t)vars0, v64));
  a18 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a12, 0x20uLL), v66), vandq_s8(a12, v64));
  v67 = (uint64x2_t)vandq_s8(a13, v64);
  v68 = (uint64x2_t)vandq_s8(a15, v64);
  a23 = vsraq_n_u64(v67, (uint64x2_t)a13, 0x20uLL);
  a24 = vsraq_n_u64(v68, (uint64x2_t)a15, 0x20uLL);
  a19 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a14, 0x20uLL), v67), vandq_s8(a14, v64));
  a20 = vorrq_s8((int8x16_t)vshlq_u64(vshrq_n_u64((uint64x2_t)a16, 0x20uLL), v68), vandq_s8(a16, v64));
  v69 = a4[3];
  do
  {
    v70 = a17.u64[v63];
    v71 = a4[4] | (v70 << v69);
    a4[4] = v71;
    *(_QWORD *)(*a4 + a4[2]) = v71;
    v72 = a4[3];
    v69 = a21.i64[v63] + v72;
    a4[3] = v69;
    if (v69 >= 0x40)
    {
      a4[3] = v69 - 64;
      a4[4] = v70 >> -(char)v72;
      a4[2] += 8;
      LOBYTE(v69) = v69 - 64;
    }
    ++v63;
  }
  while (v63 != 8);
  *(_QWORD *)(*a4 + a4[2]) = a4[4];
  v74 = a4[2];
  v73 = a4[3];
  a4[4] >>= v73 & 0xF8;
  a4[2] = v74 + (v73 >> 3);
  a4[3] = v73 & 7;
  return result;
}

void *sub_2368A4E70(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9BCC536DuLL);
}

void sub_2368A4E80(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_2368A4E88(uint64_t a1, float *a2, unint64_t a3, int a4)
{
  float v8;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;

  v8 = *(float *)(a1 + 152);
  if (v8 >= 295.0 && v8 <= 305.0)
    return 0;
  v10 = log2f(v8 * 0.001);
  v11 = powf(1.111, v10) * 1.2;
  if (a4)
    v12 = v11;
  else
    v12 = 1.0 / v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == 1)
  {
    for (; a3; --a3)
    {
      *a2 = powf(*a2, v12);
      ++a2;
    }
    return 0;
  }
  if (v13 == 3)
  {
    if (a3)
    {
      v14 = 0;
      v15 = *(float *)(a1 + 24);
      v16 = *(float *)(a1 + 28);
      v17 = *(float *)(a1 + 32);
      v18 = v12 + -1.0;
      if (v12 >= 1.0)
        a4 = 0;
      v19 = a2 + 2;
      do
      {
        v20 = *(v19 - 2);
        v21 = *(v19 - 1);
        v22 = *v19;
        v23 = powf((float)((float)(v21 * v16) + (float)(v20 * v15)) + (float)(*v19 * v17), v18);
        if ((LODWORD(v23) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v24 = v20 * v23;
          v25 = v21 * v23;
          *(v19 - 2) = v20 * v23;
          *(v19 - 1) = v21 * v23;
          v26 = v22 * v23;
          *v19 = v26;
          if (a4)
          {
            if (v25 >= v26)
              v27 = v19 - 1;
            else
              v27 = v19;
            if (v24 >= *v27)
              v27 = v19 - 2;
            if (*v27 > 1.0)
            {
              v28 = 1.0 / *v27;
              *(v19 - 2) = v24 * v28;
              *(v19 - 1) = v25 * v28;
              *v19 = v26 * v28;
            }
          }
        }
        v14 += 3;
        v19 += 3;
      }
      while (v14 < a3);
    }
    return 0;
  }
  return 1;
}

__int128 *JxlGetDefaultCms()
{
  return &xmmword_2507FD7C0;
}

uint64_t sub_2368A505C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t (**v17)();
  unsigned int (*v18)(void);
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  char *v24;
  unsigned int v25;
  size_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  uint64_t (**v34)();
  void (*v35)(void);
  int v36;
  uint64_t (**v37)();
  void (*v38)(void);
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  void *v42;
  uint64_t (**v43)();
  unsigned int (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  float64x2_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t (**v59)();
  void (*v60)(void);
  int v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float64x2_t v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  uint64_t *v79;
  float64x2_t v80;
  uint64_t v81;
  float64x2_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  char v92;
  void *v93;
  void *v94;
  _QWORD v95[2];
  char v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  _QWORD v100[2];
  char __dst[8];
  unsigned __int8 v102;
  unsigned __int8 v103;
  char v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111[3];

  v5 = 0;
  v111[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  if (!a4 || !a5)
    return v5;
  *a5 = 0;
  *(_DWORD *)a4 = 3;
  *(_DWORD *)(a4 + 80) = 2;
  if (!a3)
    return 0;
  v90 = 0x100000001;
  v91 = 1;
  v92 = 1;
  v96 = 0;
  v94 = 0;
  memset(v95, 0, 13);
  v93 = 0;
  v97 = 0xD00000000;
  v98 = 0u;
  v99 = 0u;
  v10 = (uint64_t *)sub_2368A69D0();
  v11 = sub_236769F9C(v10, a2, a3);
  v89 = (uint64_t *)v11;
  if (!v11)
    return 0;
  v12 = (_QWORD *)v11;
  if (*(_DWORD *)(v11 + 88) >= 4u)
  {
    sub_236769708(v11);
    return 0;
  }
  v91 = *(_DWORD *)(v11 + 88);
  v14 = *(uint64_t **)(v11 + 8);
  if (v14)
  {
    v15 = &qword_25642E910;
    v16 = &unk_250800620;
    while (1)
    {
      v15 = (uint64_t *)*v15;
      if (!v15)
        break;
      if (v15 == v14)
      {
        v16 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    v16 = &unk_250800620;
  }
  v17 = (uint64_t (**)())*((_QWORD *)v16 + 16);
  if (!v17)
    v17 = &off_2542ABF38;
  v18 = (unsigned int (*)(void))v17[2];
  if (v18 && !v18())
    goto LABEL_111;
  *(_QWORD *)&v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v82 = 0u;
  v19 = *((unsigned int *)v12 + 33);
  if ((int)v19 < 1)
    goto LABEL_98;
  v20 = 1667851120;
  do
  {
    v21 = 0;
    while (*((_DWORD *)v12 + v21 + 34) != v20)
    {
      if (v19 == ++v21)
        goto LABEL_98;
    }
    if ((v21 & 0x80000000) != 0)
      goto LABEL_98;
    v20 = *((_DWORD *)v12 + v21 + 134);
  }
  while (v20);
  v22 = v21;
  v23 = (const void *)v12[v21 + 267];
  if (!v23)
  {
    if (*((_DWORD *)v12 + v21 + 234) >= 0xCu)
      LODWORD(v26) = 12;
    else
      LODWORD(v26) = *((_DWORD *)v12 + v21 + 234);
    if ((*(unsigned int (**)(void))(*v12 + 288))() && (*(unsigned int (**)(void))(*v12 + 280))())
    {
      v27 = (uint64_t *)v12[1];
      if (v27)
      {
        v30 = &qword_25642E910;
        v29 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v30 = (uint64_t *)*v30;
          if (!v30)
            goto LABEL_53;
          if (v30 == v27)
          {
LABEL_46:
            v29 = v27;
            goto LABEL_53;
          }
        }
      }
      goto LABEL_52;
    }
LABEL_98:
    v56 = (uint64_t *)v12[1];
    if (!v56)
    {
LABEL_106:
      v58 = (uint64_t *)&unk_250800620;
LABEL_107:
      v59 = (uint64_t (**)())v58[16];
      if (!v59)
        v59 = &off_2542ABF38;
      v60 = (void (*)(void))v59[3];
      if (v60)
        v60();
      goto LABEL_111;
    }
LABEL_99:
    v57 = &qword_25642E910;
    v58 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v57 = (uint64_t *)*v57;
      if (!v57)
        goto LABEL_107;
      if (v57 == v56)
      {
        v58 = v56;
        goto LABEL_107;
      }
    }
  }
  v24 = (char *)v12 + 4 * v21;
  if (*((_DWORD *)v24 + 434))
  {
    v25 = *((_DWORD *)v24 + 234);
    if (v25 >= 0xC)
      v26 = 12;
    else
      v26 = v25;
    memmove(__dst, v23, v26);
    v27 = (uint64_t *)v12[1];
    if (v27)
    {
      v28 = &qword_25642E910;
      v29 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v28 = (uint64_t *)*v28;
        if (!v28)
          goto LABEL_53;
        if (v28 == v27)
          goto LABEL_46;
      }
    }
LABEL_52:
    v29 = (uint64_t *)&unk_250800620;
LABEL_53:
    v34 = (uint64_t (**)())v29[16];
    if (!v34)
      v34 = &off_2542ABF38;
    goto LABEL_55;
  }
  v31 = (uint64_t *)v12[1];
  if (v31)
  {
    v32 = &qword_25642E910;
    v33 = &unk_250800620;
    while (1)
    {
      v32 = (uint64_t *)*v32;
      if (!v32)
        break;
      if (v32 == v31)
      {
        v33 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    v33 = &unk_250800620;
  }
  v37 = (uint64_t (**)())*((_QWORD *)v33 + 16);
  if (!v37)
    v37 = &off_2542ABF38;
  v38 = (void (*)(void))v37[3];
  if (v38)
    v38();
  v39 = sub_23676A304(v12, 0x63696370u);
  v40 = (uint64_t *)v12[1];
  if (v40)
  {
    v41 = &qword_25642E910;
    v42 = &unk_250800620;
    while (1)
    {
      v41 = (uint64_t *)*v41;
      if (!v41)
        break;
      if (v41 == v40)
      {
        v42 = (void *)v12[1];
        break;
      }
    }
  }
  else
  {
    v42 = &unk_250800620;
  }
  v43 = (uint64_t (**)())*((_QWORD *)v42 + 16);
  if (!v43)
    v43 = &off_2542ABF38;
  v44 = (unsigned int (*)(void))v43[2];
  if (v44 && !v44())
    goto LABEL_111;
  if (!v39)
    goto LABEL_98;
  v45 = sub_2367689F4((uint64_t *)v12[1], __dst, 12, "w");
  if (!v45)
    goto LABEL_98;
  v46 = v45;
  v47 = v12[v22 + 367];
  v79 = (uint64_t *)v12[1];
  v48 = sub_236783C34(v79, 1667851120);
  if (!v48)
  {
LABEL_97:
    (*(void (**)(uint64_t))(v46 + 296))(v46);
    goto LABEL_98;
  }
  if (!v47)
  {
    v56 = v79;
    if (!v79)
      goto LABEL_106;
    goto LABEL_99;
  }
  v49 = v48;
  v50 = *(float64x2_t *)v47;
  v51 = *(_OWORD *)(v47 + 16);
  v52 = *(_OWORD *)(v47 + 32);
  *(_QWORD *)&v85 = *(_QWORD *)(v47 + 48);
  v83 = v51;
  v84 = v52;
  v82 = v50;
  *((_QWORD *)&v84 + 1) = v12[1];
  LODWORD(v85) = *((_DWORD *)v12 + 18);
  *(_QWORD *)&v106 = bswap32(*(_DWORD *)v47);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(v46 + 312))(v46, 8, &v106)
    || !((unsigned int (*)(float64x2_t *, uint64_t, uint64_t, _QWORD))v83)(&v82, v46, v39, *(unsigned int *)v49))
  {
    goto LABEL_97;
  }
  LODWORD(v26) = (*(uint64_t (**)(uint64_t))(v46 + 304))(v46);
  (*(void (**)(uint64_t))(v46 + 296))(v46);
  v53 = (uint64_t *)v12[1];
  if (v53)
  {
    v54 = &qword_25642E910;
    v55 = &unk_250800620;
    while (1)
    {
      v54 = (uint64_t *)*v54;
      if (!v54)
        break;
      if (v54 == v53)
      {
        v55 = (_QWORD *)v12[1];
        break;
      }
    }
  }
  else
  {
    v55 = &unk_250800620;
  }
  v78 = (uint64_t (**)())v55[16];
  v34 = &off_2542ABF38;
  if (v78)
    v34 = v78;
LABEL_55:
  v35 = (void (*)(void))v34[3];
  if (v35)
    v35();
  if ((_DWORD)v26 == 12 && !v104 && v105 == 1 && v103 <= 0x12u && ((1 << v103) & 0x72102) != 0)
  {
    v36 = v102;
    if (v102 > 0xAu)
    {
      if (v102 != 11)
      {
        if (v102 != 12)
          goto LABEL_111;
        v96 = 0;
        HIDWORD(v97) = v103;
        LODWORD(v95[1]) = 0;
        LODWORD(v90) = 1;
        v36 = 11;
        goto LABEL_104;
      }
    }
    else if (v102 != 1 && v102 != 9)
    {
      goto LABEL_111;
    }
    LODWORD(v95[1]) = 0;
    v96 = 0;
    HIDWORD(v97) = v103;
    if (v102 == 11)
      LODWORD(v90) = 11;
    else
      LODWORD(v90) = 1;
LABEL_104:
    HIDWORD(v90) = v36;
LABEL_118:
    sub_2367C5B34((uint64_t)&v82, (uint64_t)&v90);
    v64 = v87;
    *(_OWORD *)(a4 + 64) = v86;
    *(_OWORD *)(a4 + 80) = v64;
    *(_QWORD *)(a4 + 96) = v88;
    v65 = v83;
    *(float64x2_t *)a4 = v82;
    *(_OWORD *)(a4 + 16) = v65;
    v66 = v85;
    *(_OWORD *)(a4 + 32) = v84;
    *(_OWORD *)(a4 + 48) = v66;
    sub_236769708((uint64_t)v12);
    return 1;
  }
LABEL_111:
  v61 = 0;
  v62 = *((_DWORD *)v12 + 20);
  if (v62 != 1129142603 && v62 != 1380401696)
  {
    if (v62 == 1196573017)
    {
      LODWORD(v95[1]) = 1;
      v63 = 4390920;
      goto LABEL_119;
    }
    v61 = 3;
  }
  LODWORD(v95[1]) = v61;
  v63 = 4456472;
  if (v62 == 1129142603)
  {
    *a5 = 1;
    goto LABEL_118;
  }
LABEL_119:
  v67 = sub_23676A304(v12, 0x77747074u);
  if (v67 && (v68 = v67, !sub_23676A304(v12, 0x63686164u)))
  {
    v73 = *(float64x2_t *)v68;
    *(_QWORD *)&v83 = *(_QWORD *)(v68 + 16);
    v82 = v73;
  }
  else
  {
    *(_QWORD *)&v83 = 0x3FF0000000000000;
    v82 = (float64x2_t)xmmword_236925E08;
    v69 = (uint64_t *)sub_2367840E0(v10);
    if (v69)
    {
      v70 = (uint64_t)v69;
      v111[0] = v12;
      v111[1] = v69;
      v109 = 0;
      v110 = 0x300000003;
      v108[0] = 0;
      v108[1] = 0;
      v71 = sub_236784600(v10, 2, v111, (uint64_t)&v109, (int *)&v110, (uint64_t)v108, v63, 4784152, 0x500u);
      if (v71)
      {
        v72 = v71;
        v107 = 0x3FF0000000000000;
        v106 = xmmword_236925E20;
        v100[0] = 0;
        v100[1] = 0x100000001;
        (*(void (**)(uint64_t, __int128 *, float64x2_t *, uint64_t, uint64_t, _QWORD *))(v71 + 8))(v71, &v106, &v82, 1, 1, v100);
        sub_236784540(v72);
      }
      sub_236769708(v70);
    }
  }
  v80 = v82;
  v81 = v83;
  v82 = vmulq_n_f64(v82, 1.0 / (vaddvq_f64(v82) + *(double *)&v83));
  if (sub_2367F0E9C((int *)&v90, v82.f64) || sub_2368AA318(v10, &v89, v80.f64, (unsigned int *)&v90))
  {
    v5 = 0;
  }
  else
  {
    sub_2368AA5C8(v10, &v89, (uint64_t)&v90);
    sub_2367C5B34((uint64_t)&v82, (uint64_t)&v90);
    v75 = v87;
    *(_OWORD *)(a4 + 64) = v86;
    *(_OWORD *)(a4 + 80) = v75;
    *(_QWORD *)(a4 + 96) = v88;
    v76 = v83;
    *(float64x2_t *)a4 = v82;
    *(_OWORD *)(a4 + 16) = v76;
    v77 = v85;
    v5 = 1;
    *(_OWORD *)(a4 + 32) = v84;
    *(_OWORD *)(a4 + 48) = v77;
  }
  v74 = v93;
  sub_236769708((uint64_t)v12);
  if (v74)
  {
    v94 = v74;
    operator delete(v74);
  }
  return v5;
}

void sub_2368A58A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  uint64_t v31;

  sub_236769708(v31);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2368A58C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  _BYTE *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  BOOL v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  _BOOL4 v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  int v63;
  size_t __sz;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  double v70[13];
  uint64_t v71;
  _BYTE v72[13];
  void *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  int v79;
  _BYTE v80[13];
  void *__p;
  uint64_t v82;
  _QWORD v83[8];
  _BYTE v84[13];
  void *v85;
  uint64_t v86;
  _QWORD v87[8];
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_QWORD *)(v12 + 160) = 0;
  v93 = 0;
  v94 = v12;
  v91 = 0;
  v92 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v13 = *(_QWORD *)(a4 + 8);
  if (!v13 || !*(_QWORD *)(a5 + 8))
  {
    v14 = 0;
    goto LABEL_14;
  }
  sub_2367C9C54(&v91, *(char **)a4, (char *)(*(_QWORD *)a4 + v13), v13);
  *(_QWORD *)v84 = 0x100000001;
  *(_DWORD *)&v84[8] = 1;
  v84[12] = 1;
  LOBYTE(v87[2]) = 0;
  v86 = 0;
  v87[0] = 0;
  v85 = 0;
  *(_QWORD *)((char *)v87 + 5) = 0;
  *(_QWORD *)((char *)&v87[2] + 4) = 0xD00000000;
  memset((char *)&v87[3] + 4, 0, 32);
  if (!sub_2367F0C08((uint64_t)v84, &v91, *(_QWORD *)a1, *(unsigned int (**)(uint64_t, _QWORD, _QWORD, int *, int *))(a1 + 8)))
  {
    sub_2367C9C54(&v88, *(char **)a5, (char *)(*(_QWORD *)a5 + *(_QWORD *)(a5 + 8)), *(_QWORD *)(a5 + 8));
    *(_QWORD *)v80 = 0x100000001;
    *(_DWORD *)&v80[8] = 1;
    v80[12] = 1;
    LOBYTE(v83[2]) = 0;
    v82 = 0;
    v83[0] = 0;
    __p = 0;
    *(_QWORD *)((char *)v83 + 5) = 0;
    *(_QWORD *)((char *)&v83[2] + 4) = 0xD00000000;
    memset((char *)&v83[3] + 4, 0, 32);
    if (sub_2367F0C08((uint64_t)v80, &v88, *(_QWORD *)a1, *(unsigned int (**)(uint64_t, _QWORD, _QWORD, int *, int *))(a1 + 8))|| (v16 = (uint64_t *)sub_2368A69D0(), v17 = v85, v18 = v86, (v19 = sub_236769F9C(v16, v85, v86 - (_QWORD)v85)) == 0))
    {
      v14 = 0;
      goto LABEL_8;
    }
    v20 = v19;
    v65 = v82;
    v66 = __p;
    __sz = v82 - (_QWORD)__p;
    v69 = sub_236769F9C(v16, __p, v82 - (_QWORD)__p);
    if (!v69)
    {
      v14 = 0;
LABEL_96:
      sub_236769708(v20);
LABEL_8:
      if (__p)
        operator delete(__p);
      goto LABEL_10;
    }
    v67 = v16;
    v68 = v20;
    v21 = v94;
    *(_BYTE *)(v94 + 156) = 0;
    *(_BYTE *)(v21 + 156) = sub_2367E7FC8((uint64_t)v84, (uint64_t)v80);
    v22 = LOBYTE(v87[2]);
    v23 = v87[3];
    if (LOBYTE(v87[2]))
      v24 = 0;
    else
      v24 = LODWORD(v87[3]) == 18;
    v25 = v24;
    v26 = LOBYTE(v83[2]);
    v63 = v83[3];
    if (LOBYTE(v83[2]))
      v27 = 0;
    else
      v27 = LODWORD(v83[3]) == 18;
    v28 = v27;
    v29 = v25 ^ v28;
    *(_BYTE *)(v21 + 8) = v29;
    if (v29 == 1)
    {
      v30 = v84;
      if (!v25)
        v30 = v80;
      v31 = *((_DWORD *)v30 + 10);
      v32 = v31 == 1;
      v33 = v31 == 1 ? 1 : 3;
      *(_QWORD *)(v21 + 16) = v33;
      if (!v32)
      {
        v34 = v25 ? v84 : v80;
        v35 = v21 + 24;
        v61 = v26;
        v36 = v23;
        v37 = sub_2368A7180((uint64_t)v34, v35);
        v23 = v36;
        v26 = v61;
        if (v37)
        {
          v14 = 0;
          v20 = v68;
          v38 = v69;
          goto LABEL_94;
        }
      }
    }
    if (v22)
    {
      v39 = 0;
      v20 = v68;
LABEL_69:
      if (!v26)
      {
        if ((v63 & 0xFFFFFFFD) == 0x10)
          goto LABEL_87;
        v54 = !v39;
        if (v63 != 13)
          v54 = 1;
        if ((v54 & 1) == 0 && sub_2367E8410(v84, v80))
        {
LABEL_87:
          *(_QWORD *)v72 = *(_QWORD *)v80;
          *(_QWORD *)&v72[5] = *(_QWORD *)&v80[5];
          v73 = 0;
          v74 = 0;
          v75 = 0;
          sub_2367C9F60(&v73, v66, v65, __sz);
          v76 = *(_OWORD *)&v83[1];
          v77 = *(_OWORD *)&v83[3];
          v78 = *(_OWORD *)&v83[5];
          BYTE8(v76) = 0;
          v79 = v83[7];
          LODWORD(v77) = 8;
          v71 = 0;
          sub_2367C5B34((uint64_t)v70, (uint64_t)v72);
          sub_2368A741C(v70, (uint64_t)&v88);
          if (v55)
          {
            v38 = v69;
            if (*(_BYTE *)(v94 + 8))
            {
LABEL_89:
              if (v73)
                operator delete(v73);
              v14 = 0;
              goto LABEL_94;
            }
            v71 = 0;
          }
          else
          {
            v56 = sub_2368A9C6C(v67, v88, v89 - (_QWORD)v88, &v71);
            v57 = v71;
            if (v56)
            {
              if (*(_BYTE *)(v94 + 8))
              {
                v38 = v69;
                if (v71)
                  sub_236769708(v71);
                goto LABEL_89;
              }
              v71 = 0;
              v38 = v69;
              if (!v57)
                goto LABEL_111;
            }
            else
            {
              if (v63 == 16)
                v58 = 1;
              else
                v58 = 2;
              if (v63 == 13)
                v58 = 3;
              *(_DWORD *)(v94 + 164) = v58;
              *(_QWORD *)v80 = *(_QWORD *)v72;
              *(_QWORD *)&v80[5] = *(_QWORD *)&v72[5];
              sub_2367C9C54(&__p, (char *)v73, v74, v74 - (_BYTE *)v73);
              *(_OWORD *)&v83[1] = v76;
              *(_OWORD *)&v83[3] = v77;
              *(_OWORD *)&v83[5] = v78;
              LODWORD(v83[7]) = v79;
              v71 = 0;
              v38 = v57;
              v57 = v69;
            }
            sub_236769708(v57);
          }
LABEL_111:
          if (v73)
            operator delete(v73);
LABEL_71:
          if (sub_2367E7FC8((uint64_t)v84, (uint64_t)v80))
            *(_BYTE *)(v94 + 156) = 1;
          v49 = BYTE4(v87[1]);
          v50 = v87[1];
          if (LODWORD(v83[1]) == 1)
            v51 = 1;
          else
            v51 = 3;
          *(_QWORD *)v94 = sub_236785A68();
          v52 = v94;
          if (*(_QWORD *)v94)
          {
            v53 = 3;
            if (v50 == 1)
              v53 = 1;
            if (v49)
              v53 = 4;
            *(_QWORD *)(v94 + 40) = v53;
            *(_QWORD *)(v52 + 48) = v51;
            sub_2368A9CAC(v53 * a3, a2, (char **)(v52 + 56), (uint64_t **)(v52 + 80));
            sub_2368A9CAC(v51 * a3, a2, (char **)(v94 + 104), (uint64_t **)(v94 + 128));
            v14 = v94;
            *(float *)(v94 + 152) = a6;
            v94 = 0;
          }
          else
          {
            v14 = 0;
          }
          if (!v38)
          {
LABEL_95:
            if (!v20)
              goto LABEL_8;
            goto LABEL_96;
          }
LABEL_94:
          sub_236769708(v38);
          goto LABEL_95;
        }
      }
LABEL_70:
      v38 = v69;
      goto LABEL_71;
    }
    v60 = v23 == 8;
    if ((v23 & 0xFFFFFFFD) != 0x10)
    {
      if (v26 || v23 != 13 || v63 != 8)
      {
        v20 = v68;
LABEL_68:
        v39 = v60;
        goto LABEL_69;
      }
      v40 = v26;
      v41 = v23;
      v42 = sub_2367E8410(v84, v80);
      v23 = v41;
      v26 = v40;
      if (!v42)
      {
        v20 = v68;
        goto LABEL_70;
      }
    }
    v59 = v23;
    v62 = v26;
    *(_QWORD *)v72 = *(_QWORD *)v84;
    *(_QWORD *)&v72[5] = *(_QWORD *)&v84[5];
    v73 = 0;
    v74 = 0;
    v75 = 0;
    sub_2367C9F60(&v73, v17, v18, v18 - (_QWORD)v17);
    v76 = *(_OWORD *)&v87[1];
    v77 = *(_OWORD *)&v87[3];
    v78 = *(_OWORD *)&v87[5];
    BYTE8(v76) = 0;
    v79 = v87[7];
    LODWORD(v77) = 8;
    v71 = 0;
    sub_2367C5B34((uint64_t)v70, (uint64_t)v72);
    v20 = v68;
    sub_2368A741C(v70, (uint64_t)&v91);
    v26 = v62;
    if (v43)
    {
      v44 = *(_BYTE *)(v94 + 8) == 0;
      v71 = 0;
      goto LABEL_65;
    }
    v45 = sub_2368A9C6C(v67, v91, v92 - (_QWORD)v91, &v71);
    v46 = v71;
    if (v45)
    {
      v44 = *(_BYTE *)(v94 + 8) == 0;
      v71 = 0;
      v26 = v62;
      if (!v46)
      {
LABEL_65:
        if (v73)
        {
          operator delete(v73);
          v26 = v62;
        }
        if (!v44)
        {
          v14 = 0;
          v38 = v69;
          goto LABEL_94;
        }
        goto LABEL_68;
      }
    }
    else
    {
      if (v59 == 16)
        v47 = 1;
      else
        v47 = 2;
      if (v59 == 13)
        v47 = 3;
      *(_DWORD *)(v94 + 160) = v47;
      *(_QWORD *)v84 = *(_QWORD *)v72;
      *(_QWORD *)&v84[5] = *(_QWORD *)&v72[5];
      sub_2367C9C54(&v85, (char *)v73, v74, v74 - (_BYTE *)v73);
      *(_OWORD *)&v87[1] = v76;
      *(_OWORD *)&v87[3] = v77;
      *(_OWORD *)&v87[5] = v78;
      LODWORD(v87[7]) = v79;
      v71 = 0;
      v44 = 1;
      v60 = 1;
      v48 = v46;
      v46 = v68;
      v20 = v48;
    }
    sub_236769708(v46);
    v26 = v62;
    goto LABEL_65;
  }
  v14 = 0;
LABEL_10:
  if (v85)
    operator delete(v85);
  if (v88)
    operator delete(v88);
LABEL_14:
  if (v91)
    operator delete(v91);
  sub_2368A9E50(&v94);
  return v14;
}

void sub_2368A6058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;

  sub_236769708(a16);
  if (__p)
    operator delete(__p);
  if (v45)
    sub_236769708(v45);
  if (v46)
    sub_236769708(v46);
  if (a45)
    operator delete(a45);
  v49 = *(void **)(v47 - 240);
  if (v49)
    operator delete(v49);
  v50 = *(void **)(v47 - 160);
  if (v50)
    operator delete(v50);
  v51 = *(void **)(v47 - 136);
  if (v51)
    operator delete(v51);
  sub_2368A9E50((_QWORD *)(v47 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_2368A6144(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
}

uint64_t sub_2368A6150(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * a2);
}

uint64_t sub_2368A615C(uint64_t a1, uint64_t a2, unsigned __int32 *a3, int8x16_t *__dst, uint64_t a5, int32x4_t a6, double a7, int32x4_t a8, int8x16_t a9)
{
  unsigned __int32 *v11;
  int v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  unsigned __int128 v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  int8x16_t v42;
  float32x4_t v43;
  _DWORD *v44;
  uint64_t v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  double v98;
  int8x16_t v100;
  int32x4_t v101;

  v11 = a3;
  v14 = *(_DWORD *)(a1 + 160);
  if (v14)
  {
    v15 = *(float **)(*(_QWORD *)(a1 + 80) + 8 * a2);
    v16 = *(_QWORD *)(a1 + 40) * a5;
    if (v14 == 1)
    {
      if (v16)
      {
        v31 = 0;
        v32 = 0;
        a6 = vdupq_n_s32(0x3F0CCF16u);
        v33 = (float32x4_t)vdupq_n_s32(0x40295064u);
        a8 = vdupq_n_s32(0x402B570Bu);
        v34 = (float32x4_t)vdupq_n_s32(0xC207A1AD);
        v35 = (float32x4_t)vdupq_n_s32(0x3F3D150Au);
        v36 = (float32x4_t)vdupq_n_s32(0x432E5D5Bu);
        v37 = (float32x4_t)vdupq_n_s32(0xBBCC536D);
        v38 = (float32x4_t)vdupq_n_s32(0xC3D65E50);
        v39 = (float32x4_t)vdupq_n_s32(0x3989DFFFu);
        v40 = (float32x4_t)vdupq_n_s32(0x43D2ACD0u);
        v41 = 10000.0 / *(float *)(a1 + 152);
        v42.i64[0] = 0x8000000080000000;
        v42.i64[1] = 0x8000000080000000;
        do
        {
          v43 = vmlaq_f32((float32x4_t)(*(_OWORD *)&a3[v31] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&a3[v31] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)(*(_OWORD *)&a3[v31] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
          *(int8x16_t *)&v15[v31] = vbslq_s8(v42, (int8x16_t)vmulq_n_f32(vdivq_f32(vmlaq_f32(v39, v43, vmlaq_f32(v37, v43, vmlaq_f32(v35, v43, vmlaq_f32(v33, (float32x4_t)a6, v43)))), vmlaq_f32(v40, v43, vmlaq_f32(v38, v43, vmlaq_f32(v36, v43, vmlaq_f32(v34, (float32x4_t)a8, v43))))), v41), *(int8x16_t *)&a3[v31]);
          v32 += 4;
          v31 += 4;
        }
        while (v32 < v16);
      }
    }
    else if (v14 == 2)
    {
      if (v16)
      {
        a8.i64[0] = 0x8000000080000000;
        a8.i32[2] = 0x80000000;
        a8.i32[3] = 0x80000000;
        v44 = *(_DWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2);
        v45 = *(_QWORD *)(a1 + 40) * a5;
        do
        {
          a9.i32[0] = *v11;
          a6.i32[0] = 0;
          if (*(float *)v11 != 0.0)
          {
            v46 = fabs(*(float *)a9.i32);
            if (v46 <= 0.5)
            {
              *(double *)a6.i64 = *(float *)a9.i32 * *(float *)a9.i32 * 0.333333333;
            }
            else
            {
              v100 = a9;
              *(double *)a6.i64 = exp((v46 + -0.559910729) * 5.59181631);
              a9 = v100;
              a8.i64[0] = 0x8000000080000000;
              a8.i32[2] = 0x80000000;
              a8.i32[3] = 0x80000000;
              *(double *)a6.i64 = (*(double *)a6.i64 + 0.28466892) * 0.0833333333;
            }
            *(float *)a6.i32 = *(double *)a6.i64;
            a6 = (int32x4_t)vbslq_s8((int8x16_t)a8, (int8x16_t)a6, a9);
          }
          *v44++ = a6.i32[0];
          ++v11;
          --v45;
        }
        while (v45);
      }
      if (*(_BYTE *)(a1 + 8))
      {
        v47 = 1;
        if (sub_2368A4E88(a1, v15, v16, 1))
          return v47 ^ 1u;
      }
    }
    else if (v14 == 3 && v16)
    {
      v17 = 0;
      v18 = 0;
      a6 = vdupq_n_s32(0x3D9E8391u);
      v19 = (float32x4_t)vdupq_n_s32(0x3F522E0Fu);
      a8 = vdupq_n_s32(0x3F4BD0EAu);
      v20 = (float32x4_t)vdupq_n_s32(0x3BD5AFDEu);
      v21 = (float32x4_t)vdupq_n_s32(0xBD61CABC);
      v22 = (float32x4_t)vdupq_n_s32(0x3E2661B1u);
      v23 = (float32x4_t)vdupq_n_s32(0x3EFF5C88u);
      v24 = (float32x4_t)vdupq_n_s32(0x3C2AFD55u);
      v25 = (float32x4_t)vdupq_n_s32(0x3F89DA5Eu);
      v26 = (float32x4_t)vdupq_n_s32(0x3966B677u);
      v27 = (float32x4_t)vdupq_n_s32(0x3E86C025u);
      v28 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      do
      {
        v30 = *(_OWORD *)&a3[v17] & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
        *(int8x16_t *)&v15[v17] = vbslq_s8(v29, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v30, v28), (int8x16_t)vdivq_f32(vmlaq_f32(v26, (float32x4_t)v30, vmlaq_f32(v24, (float32x4_t)v30, vmlaq_f32(v22, (float32x4_t)v30, vmlaq_f32((float32x4_t)a8, v19, (float32x4_t)v30)))), vmlaq_f32(v27, (float32x4_t)v30, vmlaq_f32(v25,
                                                       (float32x4_t)v30,
                                                       vmlaq_f32(v23, (float32x4_t)v30, vmlaq_f32(v21, v20, (float32x4_t)v30))))), (int8x16_t)vmulq_f32((float32x4_t)v30, (float32x4_t)a6)), *(int8x16_t *)&a3[v17]);
        v18 += 4;
        v17 += 4;
      }
      while (v18 < v16);
    }
  }
  else
  {
    v15 = (float *)a3;
  }
  v48 = *(_QWORD *)(a1 + 40);
  if (v48 == 4)
  {
    if (!*(_BYTE *)(a1 + 156))
    {
      v49 = 4 * a5;
      if (4 * a5)
      {
        v50 = (float32x4_t)vdupq_n_s32(0xC2C80000);
        v51 = (float32x4_t)vdupq_n_s32(0x42C80000u);
        v52 = *(float32x4_t **)(*(_QWORD *)(a1 + 80) + 8 * a2);
        do
        {
          *v52 = vmlaq_f32(v51, v50, *v52);
          ++v52;
          v49 -= 4;
        }
        while (v49);
      }
      goto LABEL_33;
    }
LABEL_31:
    if (v15 != (float *)__dst)
      memcpy(__dst, v15, 4 * a5 * v48);
    goto LABEL_34;
  }
  if (*(_BYTE *)(a1 + 156))
    goto LABEL_31;
LABEL_33:
  (*(void (**)(void))(*(_QWORD *)a1 + 8))();
LABEL_34:
  v53 = *(_DWORD *)(a1 + 164);
  if (!v53)
  {
LABEL_56:
    v47 = 0;
    return v47 ^ 1u;
  }
  v54 = *(_QWORD *)(a1 + 48) * a5;
  if (v53 == 1)
  {
    if (v54)
    {
      v71 = 0;
      v72 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
      v73 = (float32x4_t)vdupq_n_s32(0xC88BE24D);
      v74 = (float32x4_t)vdupq_n_s32(0x4786914Fu);
      v75 = (float32x4_t)vdupq_n_s32(0xC84A65A6);
      v76 = (float32x4_t)vdupq_n_s32(0xC72B7AD7);
      v77 = (float32x4_t)vdupq_n_s32(0x43074838u);
      v78 = (float32x4_t)vdupq_n_s32(0x467B5314u);
      v79 = (float32x4_t)vdupq_n_s32(0x3EC6B81Cu);
      v80 = (float32x4_t)vdupq_n_s32(0x44B8B702u);
      v81 = (float32x4_t)vdupq_n_s32(0x37257B02u);
      v82 = (float32x4_t)vdupq_n_s32(0x4206DFEEu);
      v83 = (float32x4_t)vdupq_n_s32(0x42418990u);
      v84 = (float32x4_t)vdupq_n_s32(0x43154069u);
      v85 = (float32x4_t)vdupq_n_s32(0x41CF3BC3u);
      v86 = (float32x4_t)vdupq_n_s32(0x42E01F14u);
      v87 = (float32x4_t)vdupq_n_s32(0x425CE93Au);
      v88 = (float32x4_t)vdupq_n_s32(0x42B94632u);
      v89 = (float32x4_t)vdupq_n_s32(0xBF8C4274);
      v90 = (float32x4_t)vdupq_n_s32(0x41A1562Eu);
      v91 = (float32x4_t)vdupq_n_s32(0x3C5D697Du);
      v92 = (float32x4_t)vdupq_n_s32(0x3F8196D9u);
      v93 = *(float *)(a1 + 152) * 0.0001;
      v94.i64[0] = 0x8000000080000000;
      v94.i64[1] = 0x8000000080000000;
      do
      {
        v95.i64[0] = __PAIR64__(HIDWORD(__dst->i64[0]), *__dst) & 0x7FFFFFFF7FFFFFFFLL;
        v95.i32[2] = __dst->i64[1] & 0x7FFFFFFF;
        v95.i32[3] = HIDWORD(__dst->i64[0]) & 0x7FFFFFFF;
        v96 = vsqrtq_f32(vsqrtq_f32(vmulq_n_f32(v95, v93)));
        *__dst = vbslq_s8(v94, vbslq_s8((int8x16_t)vcgtq_f32(v72, v95), (int8x16_t)vdivq_f32(vmlaq_f32(v81, v96, vmlaq_f32(v79, v96, vmlaq_f32(v77, v96, vmlaq_f32(v74, v73, v96)))), vmlaq_f32(v82, v96, vmlaq_f32(v80, v96, vmlaq_f32(v78, v96, vmlaq_f32(v76, v75, v96))))), (int8x16_t)vdivq_f32(vmlaq_f32(v91, v96, vmlaq_f32(v89, v96, vmlaq_f32(v87, v96, vmlaq_f32(v84, v83, v96)))), vmlaq_f32(v92,
                                    v96,
                                    vmlaq_f32(v90, v96, vmlaq_f32(v88, v96, vmlaq_f32(v86, v85, v96)))))),
                   *__dst);
        ++__dst;
        v71 += 4;
      }
      while (v71 < v54);
    }
    goto LABEL_56;
  }
  if (v53 != 2)
  {
    if (v53 == 3 && v54)
    {
      v55 = 0;
      v56 = (float32x4_t)vdupq_n_s32(0x414EB852u);
      v57 = (float32x4_t)vdupq_n_s32(0x3F3C3A32u);
      v58 = (float32x4_t)vdupq_n_s32(0x3FBCB2C2u);
      v59 = (float32x4_t)vdupq_n_s32(0x3CC6A52Au);
      v60 = (float32x4_t)vdupq_n_s32(0x3F6D0463u);
      v61 = (float32x4_t)vdupq_n_s32(0x3EC7E073u);
      v62 = (float32x4_t)vdupq_n_s32(0x3FAB9FE4u);
      v63 = (float32x4_t)vdupq_n_s32(0x3BAD40B5u);
      v64 = (float32x4_t)vdupq_n_s32(0x3E9B7A50u);
      v65 = (float32x4_t)vdupq_n_s32(0xBA069D6D);
      v66 = (float32x4_t)vdupq_n_s32(0x3C24949Bu);
      v67 = (float32x4_t)vdupq_n_s32(0x3B4D2E1Cu);
      v68.i64[0] = 0x8000000080000000;
      v68.i64[1] = 0x8000000080000000;
      do
      {
        v69.i64[0] = __PAIR64__(HIDWORD(__dst->i64[0]), *__dst) & 0x7FFFFFFF7FFFFFFFLL;
        v69.i32[2] = __dst->i64[1] & 0x7FFFFFFF;
        v69.i32[3] = HIDWORD(__dst->i64[0]) & 0x7FFFFFFF;
        v70 = vsqrtq_f32(v69);
        *__dst = vbslq_s8(v68, vbslq_s8((int8x16_t)vcgtq_f32(v69, v67), (int8x16_t)vdivq_f32(vmlaq_f32(v65, v70, vmlaq_f32(v63, v70, vmlaq_f32(v61, v70, vmlaq_f32(v58, v57, v70)))), vmlaq_f32(v66, v70, vmlaq_f32(v64, v70, vmlaq_f32(v62, v70, vmlaq_f32(v60, v59, v70))))), (int8x16_t)vmulq_f32(v69, v56)), *__dst);
        ++__dst;
        v55 += 4;
      }
      while (v55 < v54);
    }
    goto LABEL_56;
  }
  if (!*(_BYTE *)(a1 + 8) || (v47 = sub_2368A4E88(a1, (float *)__dst->i32, v54, 0)) == 0)
  {
    if (v54)
    {
      v97.i64[0] = 0x8000000080000000;
      v97.i64[1] = 0x8000000080000000;
      do
      {
        a8.i32[0] = __dst->i32[0];
        a6.i32[0] = 0;
        if (*(float *)__dst->i32 != 0.0)
        {
          v98 = fabsf(*(float *)a8.i32);
          if (v98 <= 0.0833333333)
          {
            *(double *)a6.i64 = sqrt(v98 * 3.0);
          }
          else
          {
            v101 = a8;
            *(double *)a6.i64 = log(v98 * 12.0 + -0.28466892);
            a8 = v101;
            v97.i64[0] = 0x8000000080000000;
            v97.i64[1] = 0x8000000080000000;
            *(double *)a6.i64 = *(double *)a6.i64 * 0.17883277 + 0.559910729;
          }
          *(float *)a6.i32 = *(double *)a6.i64;
          a6 = (int32x4_t)vbslq_s8(v97, (int8x16_t)a6, (int8x16_t)a8);
        }
        __dst->i32[0] = a6.i32[0];
        __dst = (int8x16_t *)((char *)__dst + 4);
        --v54;
      }
      while (v54);
    }
    goto LABEL_56;
  }
  return v47 ^ 1u;
}

uint64_t *sub_2368A6950(uint64_t *result)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (result)
  {
    v1 = result;
    sub_236784540(*result);
    v2 = (void *)v1[16];
    if (v2)
    {
      v1[17] = (uint64_t)v2;
      operator delete(v2);
    }
    v3 = (void *)v1[13];
    if (v3)
    {
      v1[14] = (uint64_t)v3;
      operator delete(v3);
    }
    v4 = (void *)v1[10];
    if (v4)
    {
      v1[11] = (uint64_t)v4;
      operator delete(v4);
    }
    v5 = (void *)v1[7];
    if (v5)
    {
      v1[8] = (uint64_t)v5;
      operator delete(v5);
    }
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

uint64_t sub_2368A69D0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t *v2;
  __int128 *v3;
  uint64_t *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t (**v58)();
  uint64_t **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  __int128 *v65;
  uint64_t *v66;
  uint64_t *v67;
  __int128 *v68;
  uint64_t *v69;
  uint64_t *v70;
  __int128 *v71;
  uint64_t *v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t (**v75)();
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _OWORD v98[3];

  v0 = off_25642E8A8();
  result = *(_QWORD *)v0;
  if (*(_QWORD *)v0)
    return result;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v78 = 0u;
  v80 = 0;
  v76 = 0u;
  v77 = 0u;
  v86 = xmmword_2542ABF08;
  v85 = 0;
  v87 = *(_OWORD *)&off_2542ABF18;
  v2 = &qword_25642E910;
  v88 = xmmword_2542ABF28;
  v3 = (__int128 *)&unk_250800620;
  v4 = &qword_25642E910;
  v79 = &v86;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (v4 == (uint64_t *)&v76)
    {
      v3 = &v76;
      break;
    }
  }
  v5 = (__int128 *)*((_QWORD *)v3 + 6);
  if (!v5)
    v5 = &xmmword_2542ABF08;
  v6 = (*(uint64_t (**)(__int128 *, uint64_t))v5)(&v76, 184);
  if (v6)
  {
    v7 = (uint64_t *)v6;
    *(_QWORD *)(v6 + 176) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)v6 = 0u;
    v8 = (_OWORD *)(v6 + 136);
    v9 = v86;
    v10 = v87;
    *(_OWORD *)(v6 + 168) = v88;
    *(_OWORD *)(v6 + 152) = v10;
    *(_OWORD *)(v6 + 136) = v9;
    pthread_mutex_lock(&stru_25642E800);
    *v7 = qword_25642E910;
    qword_25642E910 = (uint64_t)v7;
    pthread_mutex_unlock(&stru_25642E800);
    v7[2] = 0;
    v7[6] = (uint64_t)v8;
    v11 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        break;
      if (v2 == v7)
      {
        v11 = v7;
        break;
      }
    }
    v12 = (__int128 *)v11[6];
    if (!v12)
      v12 = &xmmword_2542ABF08;
    v13 = (uint64_t **)(*((uint64_t (**)(uint64_t *, uint64_t))v12 + 1))(v7, 16);
    if (v13)
    {
      v20 = (uint64_t)v13;
      *v13 = v7;
      v21 = sub_23676436C(v7, 0xB0u);
      *(_QWORD *)(v20 + 8) = v21;
      if (v21)
      {
        v7[1] = v20;
        v7[3] = (uint64_t)sub_2367642C8(v20, off_2542ABED0, 8uLL);
        v7[4] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E888, 0x20uLL);
        v7[5] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E860, 8uLL);
        v7[6] = (uint64_t)v8;
        v7[7] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E8D8, 8uLL);
        v7[8] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E8D0, 8uLL);
        v7[9] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E8E8, 8uLL);
        v7[10] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E950, 8uLL);
        v7[13] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E958, 8uLL);
        v7[11] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E968, 8uLL);
        v7[12] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E8C8, 8uLL);
        v7[14] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E8E0, 8uLL);
        v7[15] = (uint64_t)sub_2367642C8(v7[1], &unk_25642E990, 8uLL);
        v7[16] = (uint64_t)sub_2367642C8(v7[1], &off_2542ABED8, 0x20uLL);
        *(_QWORD *)v0 = v7;
        v22 = &qword_25642E910;
        while (1)
        {
          v22 = (uint64_t *)*v22;
          if (!v22)
            break;
          if (v22 == v7)
            goto LABEL_132;
        }
        v7 = (uint64_t *)&unk_250800620;
        goto LABEL_132;
      }
      v23 = &qword_25642E910;
      v24 = (uint64_t *)&unk_250800620;
      while (1)
      {
        v23 = (uint64_t *)*v23;
        if (!v23)
          break;
        if (v23 == v7)
        {
          v24 = v7;
          break;
        }
      }
      v25 = (__int128 *)v24[6];
      if (!v25)
        v25 = &xmmword_2542ABF08;
      (*((void (**)(uint64_t *, uint64_t))v25 + 2))(v7, v20);
    }
    v7[1] = 0;
    v97 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v27 = v8[1];
    v26 = v8[2];
    v98[0] = *v8;
    v98[1] = v27;
    v98[2] = v26;
    *(_QWORD *)&v90 = v7[2];
    *(_QWORD *)&v92 = v98;
    v7[6] = (uint64_t)v8;
    v28 = &qword_25642E910;
    v29 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v28 = (uint64_t *)*v28;
      if (!v28)
        break;
      if (v28 == v7)
      {
        v29 = v7;
        break;
      }
    }
    v30 = (_QWORD *)v29[7];
    if (!v30)
      v30 = &unk_25642E918;
    *v30 = 0;
    v31 = &qword_25642E910;
    v32 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v31 = (uint64_t *)*v31;
      if (!v31)
        break;
      if (v31 == v7)
      {
        v32 = v7;
        break;
      }
    }
    v33 = (_QWORD *)v32[10];
    if (!v33)
      v33 = &unk_25642E948;
    *v33 = 0;
    v34 = &qword_25642E910;
    v35 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v34 = (uint64_t *)*v34;
      if (!v34)
        break;
      if (v34 == v7)
      {
        v35 = v7;
        break;
      }
    }
    v36 = (_QWORD *)v35[11];
    if (!v36)
      v36 = &unk_25642E960;
    *v36 = 0;
    v37 = &qword_25642E910;
    v38 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v37 = (uint64_t *)*v37;
      if (!v37)
        break;
      if (v37 == v7)
      {
        v38 = v7;
        break;
      }
    }
    v39 = (_QWORD *)v38[9];
    if (!v39)
      v39 = &unk_25642E928;
    *v39 = 0;
    v40 = &qword_25642E910;
    v41 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v40 = (uint64_t *)*v40;
      if (!v40)
        break;
      if (v40 == v7)
      {
        v41 = v7;
        break;
      }
    }
    v42 = (_QWORD *)v41[12];
    if (!v42)
      v42 = &unk_25642E930;
    *v42 = 0;
    v43 = &qword_25642E910;
    v44 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v43 = (uint64_t *)*v43;
      if (!v43)
        break;
      if (v43 == v7)
      {
        v44 = v7;
        break;
      }
    }
    v45 = (_QWORD *)v44[8];
    if (!v45)
      v45 = &unk_25642E920;
    *v45 = 0;
    v46 = &qword_25642E910;
    v47 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v46 = (uint64_t *)*v46;
      if (!v46)
        break;
      if (v46 == v7)
      {
        v47 = v7;
        break;
      }
    }
    v48 = (_QWORD *)v47[13];
    if (!v48)
      v48 = &unk_25642E940;
    *v48 = 0;
    v49 = &qword_25642E910;
    v50 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v49 = (uint64_t *)*v49;
      if (!v49)
        break;
      if (v49 == v7)
      {
        v50 = v7;
        break;
      }
    }
    v51 = (_QWORD *)v50[14];
    if (!v51)
      v51 = &unk_25642E938;
    *v51 = 0;
    v52 = &qword_25642E910;
    v53 = (uint64_t *)&unk_250800620;
    while (1)
    {
      v52 = (uint64_t *)*v52;
      if (!v52)
        break;
      if (v52 == v7)
      {
        v53 = v7;
        break;
      }
    }
    v54 = (uint64_t *)v53[15];
    if (!v54)
      v54 = &qword_25642E988;
    *v54 = 0;
    v55 = &qword_25642E910;
    v56 = (uint64_t *)&unk_250800620;
    v57 = &qword_25642E910;
    while (1)
    {
      v57 = (uint64_t *)*v57;
      if (!v57)
        break;
      if (v57 == v7)
      {
        v56 = v7;
        break;
      }
    }
    v58 = (uint64_t (**)())v56[16];
    if (!v58)
      v58 = &off_2542ABF38;
    *(_OWORD *)v58 = 0u;
    *((_OWORD *)v58 + 1) = 0u;
    v59 = (uint64_t **)v7[1];
    if (v59)
    {
      v60 = v59[1];
      while (v60)
      {
        v61 = v60;
        v60 = (uint64_t *)v60[2];
        if (*v61)
        {
          v62 = *v59;
          if (*v59)
          {
            v63 = &qword_25642E910;
            while (1)
            {
              v63 = (uint64_t *)*v63;
              if (!v63)
                break;
              if (v63 == v62)
              {
                v64 = *v59;
                goto LABEL_97;
              }
            }
          }
          v64 = (uint64_t *)&unk_250800620;
LABEL_97:
          v65 = (__int128 *)v64[6];
          if (!v65)
            v65 = &xmmword_2542ABF08;
          (*((void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int128 *, uint64_t, _QWORD))v65
           + 2))(v62, *v61, v14, v15, v16, v17, v18, v19, v76, *((_QWORD *)&v76 + 1), v77, *((_QWORD *)&v77 + 1), v78, *((_QWORD *)&v78 + 1), v79, v80, v81);
        }
        if (*v59)
        {
          v66 = &qword_25642E910;
          while (1)
          {
            v66 = (uint64_t *)*v66;
            if (!v66)
              break;
            if (v66 == *v59)
            {
              v67 = *v59;
              goto LABEL_106;
            }
          }
        }
        v67 = (uint64_t *)&unk_250800620;
LABEL_106:
        v68 = (__int128 *)v67[6];
        if (!v68)
          v68 = &xmmword_2542ABF08;
        (*((void (**)(void))v68 + 2))();
      }
      if (*v59)
      {
        v69 = &qword_25642E910;
        v70 = (uint64_t *)&unk_250800620;
        while (1)
        {
          v69 = (uint64_t *)*v69;
          if (!v69)
            break;
          if (v69 == *v59)
          {
            v70 = *v59;
            break;
          }
        }
      }
      else
      {
        v70 = (uint64_t *)&unk_250800620;
      }
      v71 = (__int128 *)v70[6];
      if (!v71)
        v71 = &xmmword_2542ABF08;
      (*((void (**)(void))v71 + 2))();
    }
    v7[1] = 0;
    pthread_mutex_lock(&stru_25642E800);
    while ((uint64_t *)*v55 != v7)
    {
      if (!*v55)
        goto LABEL_124;
      v55 = (uint64_t *)*v55;
    }
    *v55 = *v7;
LABEL_124:
    pthread_mutex_unlock(&stru_25642E800);
    v72 = &qword_25642E910;
    v73 = (__int128 *)&unk_250800620;
    while (1)
    {
      v72 = (uint64_t *)*v72;
      if (!v72)
        break;
      if (v72 == (uint64_t *)&v89)
      {
        v73 = &v89;
        break;
      }
    }
    v74 = (__int128 *)*((_QWORD *)v73 + 6);
    if (!v74)
      v74 = &xmmword_2542ABF08;
    (*((void (**)(__int128 *, uint64_t *))v74 + 2))(&v89, v7);
  }
  *(_QWORD *)v0 = 0;
  v7 = (uint64_t *)&unk_250800620;
LABEL_132:
  v75 = (uint64_t (**)())v7[3];
  if (!v75)
    v75 = &off_2542ABF00;
  *v75 = nullsub_67;
  return *(_QWORD *)v0;
}

uint64_t sub_2368A7180(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  uint64_t v10;
  int64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  double v24;
  uint64_t i;
  uint64_t v26;
  float v27;
  double v28;
  float v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  float v35;
  int64x2_t v37;
  _OWORD v38[2];
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2367CA244((int *)a1);
  if (fabs(v5) < 1.0e-12)
    return 1;
  v6 = *(_DWORD *)(a1 + 4);
  if (v6 > 8)
  {
    if (v6 == 9)
    {
      _Q3 = (float64x2_t)xmmword_2368AF520;
      _Q2 = (float64x2_t)xmmword_2368AF530;
      _Q7 = (float64x2_t)xmmword_2368AF540;
    }
    else
    {
      _Q3 = (float64x2_t)xmmword_2368AF4F0;
      _Q2 = (float64x2_t)xmmword_2368AF500;
      _Q7 = (float64x2_t)xmmword_2368AF510;
    }
  }
  else if (v6 == 1)
  {
    _Q3 = (float64x2_t)xmmword_2368AF4C0;
    _Q2 = (float64x2_t)xmmword_2368AF4D0;
    _Q7 = (float64x2_t)xmmword_2368AF4E0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 68);
    v11.i64[0] = (int)v10;
    v11.i64[1] = SHIDWORD(v10);
    v12 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
    _Q2 = vmulq_f64(vcvtq_f64_s64(v11), v12);
    v13 = *(_QWORD *)(a1 + 76);
    v11.i64[0] = (int)v13;
    v11.i64[1] = SHIDWORD(v13);
    _Q7 = vmulq_f64(vcvtq_f64_s64(v11), v12);
    v14 = *(_QWORD *)(a1 + 84);
    v11.i64[0] = (int)v14;
    v11.i64[1] = SHIDWORD(v14);
    _Q3 = vmulq_f64(vcvtq_f64_s64(v11), v12);
  }
  *(float64_t *)&v15 = _Q3.f64[0];
  *((_QWORD *)&v15 + 1) = *(_QWORD *)&_Q2.f64[1];
  v37 = vzip1q_s64((int64x2_t)_Q2, (int64x2_t)_Q7);
  v38[0] = v15;
  v38[1] = vzip2q_s64((int64x2_t)_Q7, (int64x2_t)_Q3);
  v39 = 1.0 - _Q2.f64[0] - _Q2.f64[1];
  v40 = 1.0 - _Q7.f64[0] - _Q7.f64[1];
  _D19 = 1.0 - _Q3.f64[0] - _Q3.f64[1];
  __asm { FMLA            D20, D19, V7.D[1] }
  v41 = _D19;
  v42 = _D20;
  v43 = vmlad_n_f64(-(_Q7.f64[0] * _D19), v40, _Q3.f64[0]);
  __asm { FMLA            D23, D17, V3.D[1] }
  v44 = vmlad_n_f64(vmuld_lane_f64(-_Q3.f64[0], _Q7, 1), _Q3.f64[1], _Q7.f64[0]);
  v45 = _D23;
  v46 = vmlad_n_f64(-(_Q3.f64[0] * v39), _D19, _Q2.f64[0]);
  v47 = vmlad_n_f64(vmuld_lane_f64(-_Q2.f64[0], _Q3, 1), _Q2.f64[1], _Q3.f64[0]);
  __asm { FMLA            D19, D18, V2.D[1] }
  v48 = _D19;
  v49 = vmlad_n_f64(-(_Q2.f64[0] * v40), v39, _Q7.f64[0]);
  v50 = vmlad_n_f64(vmuld_lane_f64(-_Q7.f64[0], _Q2, 1), _Q7.f64[1], _Q2.f64[0]);
  v24 = vmlad_n_f64(vmlad_n_f64(_D23 * _Q7.f64[0], _D20, _Q2.f64[0]), _D19, _Q3.f64[0]);
  if (fabs(v24) < 1.0e-10)
    return 1;
  for (i = 0; i != 9; ++i)
    *(double *)&v37.i64[i] = 1.0 / v24 * *(double *)((char *)&v42 + i * 8);
  v26 = 0;
  _Q3.f64[0] = 1.0 - v4 - v5;
  v27 = 1.0 / v5;
  v28 = v27;
  *(float *)_Q2.f64 = _Q3.f64[0] * v28;
  v29 = v4 * v28;
  v42 = _Q2.f64[1];
  v43 = _Q7.f64[1];
  v44 = _Q3.f64[1];
  v30 = v29;
  v31 = *(float *)_Q2.f64;
  v32 = (double *)v38;
  do
  {
    v33 = *(v32 - 1) + *(v32 - 2) * v30;
    v34 = *v32;
    v32 += 3;
    v35 = *(&v42 + v26) * (v33 + v34 * v31);
    *(float *)(a2 + 4 * v26++) = v35;
  }
  while (v26 != 3);
  return 0;
}

void sub_2368A741C(double *a1, uint64_t a2)
{
  int v3;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  double v16;
  std::string *v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  double v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  void *v23;
  char *v24;
  char *v25;
  std::string::size_type v26;
  int v27;
  double v28;
  std::string *v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  double v32;
  std::string *v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  double v36;
  std::string *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  double v40;
  std::string *v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  double v44;
  std::string *v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  double v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  void *v51;
  char *v52;
  char *v53;
  std::string::size_type v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  double v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  void *v61;
  char *v62;
  char *v63;
  std::string::size_type v64;
  double v65;
  double v66;
  float v67;
  double v68;
  float v69;
  float v70;
  int v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  char *v80;
  int64_t v81;
  _BYTE *v82;
  int64_t v83;
  _BYTE *v84;
  int64_t v85;
  _BYTE *v86;
  int64_t v87;
  _BYTE *v88;
  int64_t v89;
  double v90;
  double v91;
  double v92;
  float v93;
  float v94;
  char *v95;
  int64_t v96;
  uint64_t kk;
  float v98;
  int v99;
  char *v100;
  int64_t v101;
  _BYTE *v102;
  int64_t v103;
  _BYTE *v104;
  int64_t v105;
  _DWORD *v106;
  int v107;
  _DWORD *v108;
  int v109;
  _DWORD *v110;
  int v111;
  unsigned int mm;
  _BYTE *v113;
  int64_t v114;
  _BYTE *v115;
  int64_t v116;
  _BYTE *v117;
  int64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  char *v123;
  char v124;
  uint64_t v125;
  char v126;
  char *v127;
  char v128;
  uint64_t v129;
  char v130;
  char *v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float *v136;
  float v137;
  int v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  float v144;
  _DWORD *v145;
  int v146;
  uint64_t v147;
  uint64_t i;
  float v149;
  uint64_t j;
  uint64_t k;
  _BYTE *v152;
  int64_t v153;
  unint64_t v154;
  float *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float (__cdecl *v165)(float, float *);
  float v166;
  double v167;
  double v168;
  long double v169;
  unint64_t v170;
  float v171;
  float v172;
  double v173;
  double v174;
  unint64_t v175;
  float v176;
  float v177;
  float v178;
  int8x16_t v179;
  int8x16_t v180;
  float v181;
  uint64_t v182;
  float v183;
  float v184;
  double v185;
  double v186;
  float v187;
  float v188;
  int8x16_t v189;
  float v190;
  float v191;
  float v192;
  uint64_t m;
  double v194;
  double v195;
  int8x16_t v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  uint64_t v203;
  float v204;
  float v205;
  float v206;
  float *v207;
  float v208;
  float v209;
  float v210;
  float v212;
  uint64_t v213;
  float v214;
  float v215;
  float v216;
  char *v217;
  float v218;
  uint64_t n;
  uint64_t v220;
  float v221;
  float v222;
  __int128 *v223;
  uint64_t v224;
  uint64_t v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float (__cdecl *v230)(float, float *);
  float *v231;
  float v232;
  float v233;
  uint64_t v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  char v244;
  _BYTE *v245;
  int64_t v246;
  uint64_t ii;
  uint64_t jj;
  _BYTE *v249;
  int64_t v250;
  uint64_t v251;
  int v252;
  char *v253;
  _DWORD *v254;
  int v255;
  double v256;
  float v257;
  int v258;
  int v259;
  int *v260;
  int *v261;
  uint64_t v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int64x2_t v268;
  __int128 v269;
  size_t v270;
  char *v271;
  void *v272;
  _BYTE *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  size_t v278;
  char *v279;
  char *v280;
  char v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  _BYTE *v287;
  uint64_t v288;
  unint64_t v289;
  size_t v290;
  char *v291;
  char *v292;
  _BYTE *v293;
  _BYTE *v294;
  _BYTE *v295;
  char v296;
  BOOL v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unint64_t v302;
  char v303;
  unint64_t v304;
  char v305;
  char v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  uint64_t v317;
  _DWORD *v318;
  int v319;
  int v320;
  int v321;
  char *v322;
  int64_t v323;
  _BYTE *v324;
  int64_t v325;
  _BYTE *v326;
  int64_t v327;
  _BYTE *v328;
  int64_t v329;
  _BYTE *v330;
  int64_t v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  std::string::size_type v344;
  int v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  double v353;
  float v354;
  float v355;
  int8x16_t v356;
  __int128 v357;
  void *__p[2];
  char v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  int *v363;
  uint64_t v364;
  void *v365[2];
  uint64_t v366;
  void *v367[2];
  uint64_t v368;
  void *v369[2];
  uint64_t v370;
  _BYTE v371[3];
  _DWORD v372[3];
  uint64_t v373;
  float v374;
  char __str[16];
  _BYTE v376[28];
  __int128 v377;
  uint64_t v378;
  std::string v379;
  __int128 v380;
  _DWORD *v381;
  int v382;
  int v383;
  int v384;
  __int128 v385;
  __int128 v386;
  int v387;
  uint64_t v388;

  v388 = *MEMORY[0x24BDAC8D0];
  v369[0] = 0;
  v369[1] = 0;
  v370 = 0;
  v367[0] = 0;
  v367[1] = 0;
  v368 = 0;
  v365[0] = 0;
  v365[1] = 0;
  v366 = 0;
  if (*(_DWORD *)a1 <= 2u)
  {
    v3 = *((_DWORD *)a1 + 20);
    if (v3 != 2 && (*(_DWORD *)a1 != 2 || !*((_DWORD *)a1 + 24)))
    {
      __str[0] = 0;
      sub_2367C8504(v369, 0x80uLL, __str);
      sub_2367C8618(0, 0, (unint64_t *)v369);
      v5 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)7)
      {
        sub_2367C8698((unint64_t *)v369, 8 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        v5 = v369[0];
      }
      v5[1] = 543979626;
      sub_2367C8618(71303168, 8, (unint64_t *)v369);
      v6 = *(_DWORD *)a1;
      v7 = v369[0];
      v8 = (char *)v369[1] - (char *)v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0xF)
      {
        sub_2367C8698((unint64_t *)v369, 16 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v6 == 2)
        v9 = 1919837043;
      else
        v9 = 1920233069;
      v7[3] = v9;
      v10 = *(_DWORD *)a1;
      if (v8 <= 0x13)
      {
        sub_2367C8698((unint64_t *)v369, 20 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v10 == 1)
        v11 = 1497453127;
      else
        v11 = 541214546;
      v7[4] = v11;
      if (sub_2367C87BC(a1))
        v12 = 543318348;
      else
        v12 = 542792024;
      if (v8 <= 0x17)
      {
        sub_2367C8698((unint64_t *)v369, 24 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[5] = v12;
      if (v8 <= 0x19)
      {
        sub_2367C8698((unint64_t *)v369, 26 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 12) = -7417;
      if (v8 <= 0x1B)
      {
        sub_2367C8698((unint64_t *)v369, 28 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 13) = 3072;
      if (v8 <= 0x1D)
      {
        sub_2367C8698((unint64_t *)v369, 30 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 14) = 256;
      if (v8 <= 0x1F)
      {
        sub_2367C8698((unint64_t *)v369, 32 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 15) = 0;
      if (v8 <= 0x21)
      {
        sub_2367C8698((unint64_t *)v369, 34 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 16) = 0;
      if (v8 <= 0x23)
      {
        sub_2367C8698((unint64_t *)v369, 36 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 17) = 0;
      if (v8 <= 0x27)
      {
        sub_2367C8698((unint64_t *)v369, 40 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[9] = 1886610273;
      if (v8 <= 0x2B)
      {
        sub_2367C8698((unint64_t *)v369, 44 - v8);
        v7 = v369[0];
      }
      v7[10] = 1280331841;
      sub_2367C8618(0, 44, (unint64_t *)v369);
      sub_2367C8618(0, 48, (unint64_t *)v369);
      sub_2367C8618(0, 52, (unint64_t *)v369);
      sub_2367C8618(0, 56, (unint64_t *)v369);
      sub_2367C8618(0, 60, (unint64_t *)v369);
      sub_2367C8618(*((_DWORD *)a1 + 24), 64, (unint64_t *)v369);
      sub_2367C8618(63190, 68, (unint64_t *)v369);
      sub_2367C8618(0x10000, 72, (unint64_t *)v369);
      sub_2367C8618(54061, 76, (unint64_t *)v369);
      v13 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0x53)
      {
        sub_2367C8698((unint64_t *)v369, 84 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        v13 = v369[0];
      }
      v13[20] = 543979626;
      v362 = 0;
      v363 = 0;
      v364 = 0;
      sub_2367C8618(0, 0, (unint64_t *)v367);
      v360 = 0;
      v361 = 0;
      sub_2367C8810(&v379, off_250800A98[*(int *)a1]);
      v14 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 != 2)
      {
        std::string::push_back(&v379, 95);
        v15 = *((_DWORD *)a1 + 1);
        if (v15 == 2)
        {
          v16 = a1[1];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v16);
          v17 = (std::string *)sub_2367C8810(&v380, __str);
          std::string::push_back(v17, 59);
          *(_QWORD *)&v386 = v381;
          v385 = v380;
          v381 = 0;
          v380 = 0uLL;
          if ((SBYTE7(v386) & 0x80u) == 0)
            v18 = (const std::string::value_type *)&v385;
          else
            v18 = (const std::string::value_type *)v385;
          if ((SBYTE7(v386) & 0x80u) == 0)
            v19 = BYTE7(v386);
          else
            v19 = *((_QWORD *)&v385 + 1);
          std::string::append(&v379, v18, v19);
          if (SBYTE7(v386) < 0)
            operator delete((void *)v385);
          if (SHIBYTE(v381) < 0)
            operator delete((void *)v380);
          v20 = a1[2];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v20);
          sub_2367C8810(&v385, __str);
          if ((SBYTE7(v386) & 0x80u) == 0)
            v21 = (const std::string::value_type *)&v385;
          else
            v21 = (const std::string::value_type *)v385;
          if ((SBYTE7(v386) & 0x80u) == 0)
            v22 = BYTE7(v386);
          else
            v22 = *((_QWORD *)&v385 + 1);
          std::string::append(&v379, v21, v22);
          if (SBYTE7(v386) < 0)
          {
            v23 = (void *)v385;
LABEL_73:
            operator delete(v23);
          }
        }
        else
        {
          if (v15 == 1)
          {
            v24 = "D65";
          }
          else if (v15 == 11)
          {
            v24 = "DCI";
          }
          else
          {
            v24 = "EER";
          }
          sub_2367C8810(__str, v24);
          if (v376[7] >= 0)
            v25 = __str;
          else
            v25 = *(char **)__str;
          if (v376[7] >= 0)
            v26 = v376[7];
          else
            v26 = *(_QWORD *)&__str[8];
          std::string::append(&v379, v25, v26);
          if ((v376[7] & 0x80000000) != 0)
          {
            v23 = *(void **)__str;
            goto LABEL_73;
          }
        }
      }
      if ((*(_DWORD *)a1 - 1) < 2)
        goto LABEL_148;
      std::string::push_back(&v379, 95);
      v27 = *((_DWORD *)a1 + 6);
      if (v27 == 2)
      {
        v28 = a1[4];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v28);
        v29 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v29, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v30 = (const std::string::value_type *)&v385;
        else
          v30 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v31 = BYTE7(v386);
        else
          v31 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v30, v31);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v32 = a1[5];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v32);
        v33 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v33, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v34 = (const std::string::value_type *)&v385;
        else
          v34 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v35 = BYTE7(v386);
        else
          v35 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v34, v35);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v36 = a1[6];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v36);
        v37 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v37, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v38 = (const std::string::value_type *)&v385;
        else
          v38 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v39 = BYTE7(v386);
        else
          v39 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v38, v39);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v40 = a1[7];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v40);
        v41 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v41, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v42 = (const std::string::value_type *)&v385;
        else
          v42 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v43 = BYTE7(v386);
        else
          v43 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v42, v43);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v44 = a1[8];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v44);
        v45 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v45, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v46 = (const std::string::value_type *)&v385;
        else
          v46 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v47 = BYTE7(v386);
        else
          v47 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v46, v47);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v48 = a1[9];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v48);
        sub_2367C8810(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0)
          v49 = (const std::string::value_type *)&v385;
        else
          v49 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v50 = BYTE7(v386);
        else
          v50 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v49, v50);
        if (SBYTE7(v386) < 0)
        {
          v51 = (void *)v385;
LABEL_147:
          operator delete(v51);
        }
      }
      else
      {
        if (v27 == 1)
        {
          v52 = "SRG";
        }
        else if (v27 == 11)
        {
          v52 = "DCI";
        }
        else
        {
          v52 = "202";
        }
        sub_2367C8810(__str, v52);
        if (v376[7] >= 0)
          v53 = __str;
        else
          v53 = *(char **)__str;
        if (v376[7] >= 0)
          v54 = v376[7];
        else
          v54 = *(_QWORD *)&__str[8];
        std::string::append(&v379, v53, v54);
        if ((v376[7] & 0x80000000) != 0)
        {
          v51 = *(void **)__str;
          goto LABEL_147;
        }
      }
LABEL_148:
      std::string::push_back(&v379, 95);
      sub_2367C8810(__str, off_250800AB8[*((int *)a1 + 24)]);
      if (v376[7] >= 0)
        v55 = __str;
      else
        v55 = *(char **)__str;
      if (v376[7] >= 0)
        v56 = v376[7];
      else
        v56 = *(_QWORD *)&__str[8];
      std::string::append(&v379, v55, v56);
      if ((v376[7] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (v14 != 2)
      {
        v57 = *((_DWORD *)a1 + 20);
        std::string::push_back(&v379, 95);
        if (v57 != 0xFFFF)
        {
          v62 = "SRG";
          switch(v57)
          {
            case 8:
              v62 = "Lin";
              goto LABEL_174;
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
LABEL_495:
              __break(1u);
              return;
            case 13:
              goto LABEL_174;
            case 16:
              v62 = "PeQ";
              goto LABEL_174;
            case 17:
              v62 = "DCI";
              goto LABEL_174;
            case 18:
              v62 = "HLG";
              goto LABEL_174;
            default:
              if (v57 == 1)
                v62 = "709";
              else
                v62 = "TF?";
LABEL_174:
              sub_2367C8810(__str, v62);
              if (v376[7] >= 0)
                v63 = __str;
              else
                v63 = *(char **)__str;
              if (v376[7] >= 0)
                v64 = v376[7];
              else
                v64 = *(_QWORD *)&__str[8];
              std::string::append(&v379, v63, v64);
              if ((v376[7] & 0x80000000) == 0)
                goto LABEL_183;
              v61 = *(void **)__str;
              break;
          }
          goto LABEL_182;
        }
        std::string::push_back(&v379, 103);
        v58 = a1[11];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v58);
        sub_2367C8810(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0)
          v59 = (const std::string::value_type *)&v385;
        else
          v59 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v60 = BYTE7(v386);
        else
          v60 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v59, v60);
        if (SBYTE7(v386) < 0)
        {
          v61 = (void *)v385;
LABEL_182:
          operator delete(v61);
        }
      }
LABEL_183:
      sub_2367C88BC((uint64_t)&v379, (unint64_t *)v365);
      if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v379.__r_.__value_.__l.__data_);
      sub_2367C8B64((uint64_t)v365, &v361, &v360);
      sub_2367C8C8C("desc", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      sub_2367C8810(__p, "CC0");
      sub_2367C88BC((uint64_t)__p, (unint64_t *)v365);
      sub_2367C8B64((uint64_t)v365, &v361, &v360);
      sub_2367C8C8C("cprt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      if (*(_DWORD *)a1 == 1)
      {
        v65 = a1[2];
        if (fabs(v65) < 1.0e-12)
          goto LABEL_379;
        v66 = a1[1];
        v67 = 1.0 / v65;
        v68 = v67;
        v69 = v66 * v68;
        *(float *)__str = v69;
        *(_DWORD *)&__str[4] = 1065353216;
        v70 = (1.0 - v66 - v65) * v68;
        *(float *)&__str[8] = v70;
        v71 = sub_2367C8DBC((uint64_t)__str, (unint64_t *)v365);
      }
      else
      {
        v71 = sub_2367C8DBC((uint64_t)&unk_236925E38, (unint64_t *)v365);
      }
      if (!v71)
      {
        sub_2367C8B64((uint64_t)v365, &v361, &v360);
        sub_2367C8C8C("wtpt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
        if (*(_DWORD *)a1 == 1)
        {
LABEL_191:
          if (sub_2367C87BC(a1))
          {
            v72 = a1[1];
            v73 = a1[2];
            v74 = a1[4];
            v75 = a1[5];
            v76 = a1[6];
            v77 = a1[7];
            v78 = a1[8];
            v79 = a1[9];
            v345 = *((_DWORD *)a1 + 20);
            v80 = (char *)v365[0];
            v81 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2367C8698((unint64_t *)v365, 4uLL);
              v80 = (char *)v365[0];
            }
            *(_DWORD *)&v80[v81] = 829711981;
            sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            v82 = v365[0];
            v83 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v82 = v365[0];
            }
            v82[v83] = 3;
            v84 = v365[0];
            v85 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v84 = v365[0];
            }
            v84[v85] = 3;
            v86 = v365[0];
            v87 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v86 = v365[0];
            }
            v86[v87] = 9;
            v88 = v365[0];
            v89 = (char *)v365[1] - (char *)v365[0];
            v353 = v79;
            if ((char *)v365[1] - (char *)v365[0] == -1)
            {
              v90 = v77;
              v91 = v74;
            }
            else
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v90 = v77;
              v91 = v74;
              v88 = v365[0];
            }
            v147 = 0;
            v88[v89] = 0;
            do
            {
              for (i = 0; i != 3; ++i)
              {
                if (v147 == i)
                  v149 = 1.0;
                else
                  v149 = 0.0;
                sub_2367C8618((int)(float)((float)(v149 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              }
              ++v147;
            }
            while (v147 != 3);
            for (j = 0; j != 3; ++j)
            {
              for (k = 0; k != 256; ++k)
              {
                v152 = v365[0];
                v153 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2367C8698((unint64_t *)v365, 1uLL);
                  v152 = v365[0];
                }
                v152[v153] = k;
              }
            }
            v341 = a2;
            v154 = 0;
            v155 = (float *)v379.__r_.__value_.__r.__words + 1;
            v156 = v91;
            v157 = v75;
            v350 = v157;
            v351 = v156;
            v158 = v76;
            v159 = v90;
            v160 = v78;
            v346 = v160;
            v347 = v158;
            v161 = v353;
            v348 = v161;
            v349 = v159;
            v162 = v72;
            v355 = v162;
            v163 = v73;
            v354 = v163;
            v164 = 0.125;
            v165 = modff;
LABEL_271:
            v342 = v154;
            v166 = (float)v154 * v164;
            v167 = pow(v166, 0.0126833135);
            v168 = v167 + -0.8359375;
            if (v167 + -0.8359375 < 0.0)
              v168 = 0.0;
            v169 = pow(v168 / (v167 * -18.6875 + 18.8515625), 6.27739464);
            v170 = 0;
            *(float *)&v169 = v169;
            v171 = fabsf(*(float *)&v169);
            v352 = v166;
            if (v166 == 0.0)
              v171 = 0.0;
            *(float *)&v344 = v171;
LABEL_276:
            v343 = v170;
            v172 = (float)v170 * v164;
            v173 = pow(v172, 0.0126833135);
            v174 = v173 + -0.8359375;
            if (v173 + -0.8359375 < 0.0)
              v174 = 0.0;
            v175 = 0;
            v176 = pow(v174 / (v173 * -18.6875 + 18.8515625), 6.27739464);
            v177 = fabsf(v176);
            if (v172 == 0.0)
              v177 = 0.0;
            *((float *)&v344 + 1) = v177;
            while (1)
            {
              *(float *)v372 = v352;
              *(float *)&v372[1] = v172;
              v178 = (float)v175 * v164;
              *(float *)&v372[2] = v178;
              if (sub_2367C90C0((uint64_t)&v385, v351, v350, v347, v349, v346, v348, v355, v354))
                break;
              v181 = *((float *)&v385 + 3);
              v182 = v386;
              if (v345 == 16)
              {
                v183 = *(float *)&v386;
                v379.__r_.__value_.__r.__words[0] = v344;
                v184 = 0.0;
                if (v178 != 0.0)
                {
                  v185 = pow(v178, 0.0126833135);
                  v186 = v185 + -0.8359375;
                  if (v185 + -0.8359375 < 0.0)
                    v186 = 0.0;
                  v187 = pow(v186 / (v185 * -18.6875 + 18.8515625), 6.27739464);
                  v184 = fabsf(v187);
                }
                *(float *)&v379.__r_.__value_.__r.__words[1] = v184;
                *(_OWORD *)__str = xmmword_2368AF550;
                v181 = *(float *)&v182;
                *(_DWORD *)v376 = v182;
                *(float *)&v376[4] = v183;
                v188 = *((float *)&v182 + 1);
                *(_DWORD *)&v376[8] = HIDWORD(v182);
                *(_OWORD *)&v376[12] = xmmword_2368AF560;
                v189.i64[1] = 0x3FD6B4FF3ECEC3F3;
                v377 = xmmword_2368AF570;
                v189.i64[0] = 0x3B83126F42200000;
                v378 = 0x3B83126F42200000;
                sub_2367C9738((float *)__str, (float *)&v379, v155, (float *)&v379.__r_.__value_.__r.__words[1], v189);
                v191 = *((float *)v379.__r_.__value_.__r.__words + 1);
                v190 = *(float *)&v379.__r_.__value_.__l.__data_;
                v192 = *(float *)&v379.__r_.__value_.__r.__words[1];
              }
              else
              {
                for (m = 0; m != 3; ++m)
                {
                  v180.i32[0] = v372[m];
                  v179.i32[0] = 0;
                  if (*(float *)v180.i32 != 0.0)
                  {
                    v194 = fabs(*(float *)v180.i32);
                    if (v194 <= 0.5)
                    {
                      *(double *)v179.i64 = *(float *)v180.i32 * *(float *)v180.i32;
                      v195 = 0.333333333;
                    }
                    else
                    {
                      v356 = v180;
                      *(double *)v179.i64 = exp((v194 + *((double *)v165 + 495)) * 5.59181631);
                      v180 = v356;
                      *(double *)v179.i64 = *(double *)v179.i64 + 0.28466892;
                      v195 = 0.0833333333;
                    }
                    *(double *)v179.i64 = *(double *)v179.i64 * v195;
                    *(float *)v179.i32 = *(double *)v179.i64;
                    v196.i64[0] = 0x8000000080000000;
                    v196.i64[1] = 0x8000000080000000;
                    v179 = vbslq_s8(v196, v179, v180);
                  }
                  *(_DWORD *)((char *)&v379.__r_.__value_.__l.__data_ + m * 4) = v179.i32[0];
                }
                v197 = *(float *)&v379.__r_.__value_.__l.__data_;
                v198 = v172;
                v199 = *(float *)&v379.__r_.__value_.__r.__words[1];
                v200 = *((float *)v379.__r_.__value_.__r.__words + 1);
                v188 = *((float *)&v182 + 1);
                v201 = powf((float)((float)(*(float *)&v182 * *((float *)v379.__r_.__value_.__r.__words + 1))+ (float)(v181 * *(float *)&v379.__r_.__value_.__l.__data_))+ (float)(*((float *)&v182 + 1) * *(float *)&v379.__r_.__value_.__r.__words[1]), -0.18186);
                v202 = v201 <= 1000000000.0 ? v201 : 1000000000.0;
                v190 = v197 * v202;
                v191 = v200 * v202;
                v172 = v198;
                *(float *)&v379.__r_.__value_.__l.__data_ = v197 * v202;
                *((float *)v379.__r_.__value_.__r.__words + 1) = v191;
                v192 = v199 * v202;
                v183 = *(float *)&v182;
                *(float *)&v379.__r_.__value_.__r.__words[1] = v192;
              }
              v203 = 0;
              v204 = (float)((float)(v183 * v191) + (float)(v181 * v190)) + (float)(v188 * v192);
              *(_QWORD *)__str = &v379;
              *(_QWORD *)&__str[8] = v155;
              *(_QWORD *)v376 = &v379.__r_.__value_.__l.__size_;
              v205 = 0.0;
              v206 = 0.0;
              do
              {
                v207 = *(float **)&__str[v203];
                v208 = *v207 - v204;
                v209 = 1.0 / v208;
                if (v208 == 0.0)
                  v209 = 1.0;
                v210 = *v207 * v209;
                if (v206 < v210 && v208 < 0.0)
                  v206 = *v207 * v209;
                v212 = v210 - v209;
                if (v208 <= 0.0)
                  v212 = v206;
                if (v205 < v212)
                  v205 = v212;
                v203 += 8;
              }
              while (v203 != 24);
              v213 = 0;
              v214 = v205 + (float)((float)(v206 - v205) * 0.3);
              v215 = v214 <= 1.0 ? v214 : 1.0;
              v216 = v214 >= 0.0 ? v215 : 0.0;
              *(_QWORD *)__str = &v379;
              *(_QWORD *)&__str[8] = v155;
              *(_QWORD *)v376 = &v379.__r_.__value_.__l.__size_;
              do
              {
                **(float **)&__str[v213] = **(float **)&__str[v213]
                                         + (float)(v216 * (float)(v204 - **(float **)&__str[v213]));
                v213 += 8;
              }
              while (v213 != 24);
              *(_DWORD *)__str = 1065353216;
              *(_QWORD *)&__str[4] = v379.__r_.__value_.__r.__words[0];
              *(_DWORD *)&__str[12] = v379.__r_.__value_.__r.__words[1];
              v217 = __str;
              v218 = 1.0;
              for (n = 4; n != 16; n += 4)
              {
                if (v218 < *(float *)&__str[n])
                {
                  v218 = *(float *)&__str[n];
                  v217 = &__str[n];
                }
              }
              v220 = 0;
              v221 = *(float *)v217;
              *(_QWORD *)__str = &v379;
              *(_QWORD *)&__str[8] = v155;
              *(_QWORD *)v376 = &v379.__r_.__value_.__l.__size_;
              v222 = 1.0 / v221;
              do
              {
                **(float **)&__str[v220] = v222 * **(float **)&__str[v220];
                v220 += 8;
              }
              while (v220 != 24);
              if (sub_2368A9ED4((uint64_t)__str, v355, v354))
                break;
              v223 = &v380;
              sub_2367C9278((uint64_t)__str, (int *)&v385, (uint64_t)&v380);
              v224 = 0;
              v374 = 0.0;
              v373 = 0;
              do
              {
                v225 = 0;
                v226 = *((float *)&v373 + v224);
                do
                {
                  v226 = v226
                       + (float)(*(float *)((char *)&v379.__r_.__value_.__l.__data_ + v225)
                               * *(float *)((char *)v223 + v225));
                  v225 += 4;
                }
                while (v225 != 12);
                *((float *)&v373 + v224++) = v226;
                v223 = (__int128 *)((char *)v223 + 12);
              }
              while (v224 != 3);
              v227 = *(float *)&v373 / 0.96421;
              if ((float)(*(float *)&v373 / 0.96421) <= 0.0088565)
                v228 = (float)(v227 * 7.787) + 0.13793;
              else
                v228 = cbrtf(v227);
              if (*((float *)&v373 + 1) <= 0.0088565)
                v229 = (float)(*((float *)&v373 + 1) * 7.787) + 0.13793;
              else
                v229 = cbrtf(*((float *)&v373 + 1));
              v230 = v165;
              v231 = v155;
              v232 = v374 / 0.82519;
              if ((float)(v374 / 0.82519) <= 0.0088565)
                v233 = (float)(v232 * 7.787) + 0.13793;
              else
                v233 = cbrtf(v232);
              v234 = 0;
              v235 = (float)(v229 * 1.16) + -0.16;
              if (v235 <= 1.0)
                v236 = (float)(v229 * 1.16) + -0.16;
              else
                v236 = 1.0;
              if (v235 >= 0.0)
                v237 = v236;
              else
                v237 = 0.0;
              v371[0] = (int)(float)((float)(v237 * 255.0) + 0.5);
              v238 = (float)(v228 - v229) * 500.0;
              v239 = v238 + 128.5;
              if (v238 > 127.0)
                v239 = 255.5;
              if (v238 >= -128.0)
                v240 = v239;
              else
                v240 = 0.5;
              v371[1] = (int)v240;
              v241 = (float)(v229 - v233) * 200.0;
              v242 = v241 + 128.5;
              if (v241 > 127.0)
                v242 = 255.5;
              if (v241 >= -128.0)
                v243 = v242;
              else
                v243 = 0.5;
              v371[2] = (int)v243;
              v164 = 0.125;
              do
              {
                v244 = v371[v234];
                v245 = v365[0];
                v246 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2367C8698((unint64_t *)v365, 1uLL);
                  v245 = v365[0];
                }
                v245[v246] = v244;
                ++v234;
              }
              while (v234 != 3);
              ++v175;
              v155 = v231;
              v165 = v230;
              if (v175 == 9)
              {
                v170 = v343 + 1;
                if (v343 != 8)
                  goto LABEL_276;
                v154 = v342 + 1;
                if (v342 != 8)
                  goto LABEL_271;
                for (ii = 0; ii != 3; ++ii)
                {
                  for (jj = 0; jj != 256; ++jj)
                  {
                    v249 = v365[0];
                    v250 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v249 = v365[0];
                    }
                    v249[v250] = jj;
                  }
                }
                sub_2367C8B64((uint64_t)v365, &v361, &v360);
                sub_2367C8C8C("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                if (!sub_2368AA100((unint64_t *)v365))
                {
                  sub_2367C8B64((uint64_t)v365, &v361, &v360);
                  a2 = v341;
                  goto LABEL_371;
                }
                goto LABEL_379;
              }
            }
          }
          else
          {
            switch(v3)
            {
              case 8:
                v145 = operator new(4uLL);
                *v145 = 1065353216;
                *((_QWORD *)&v385 + 1) = v145 + 1;
                *(_QWORD *)&v386 = v145 + 1;
                *(_QWORD *)&v385 = v145;
                v146 = sub_2367C93A0((float **)&v385, 0, (unint64_t *)v365);
                goto LABEL_378;
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
                goto LABEL_495;
              case 13:
                v145 = operator new(0x14uLL);
                *((_QWORD *)&v385 + 1) = v145 + 5;
                *(_QWORD *)&v386 = v145 + 5;
                v145[4] = 1025879782;
                *(_OWORD *)v145 = xmmword_236925E44;
                *(_QWORD *)&v385 = v145;
                v146 = sub_2367C93A0((float **)&v385, 3, (unint64_t *)v365);
                goto LABEL_378;
              case 16:
                sub_2367C99BC(__str, 1);
                sub_2367C9B50((uint64_t *)__str, (unint64_t *)v365);
                goto LABEL_392;
              case 17:
                v254 = operator new(0x14uLL);
                *((_QWORD *)&v385 + 1) = v254 + 5;
                *(_QWORD *)&v386 = v254 + 5;
                v254[4] = 0;
                *(_OWORD *)v254 = *(_OWORD *)"ff&@";
                *(_QWORD *)&v385 = v254;
                v255 = sub_2367C93A0((float **)&v385, 3, (unint64_t *)v365);
                *((_QWORD *)&v385 + 1) = v254;
                operator delete(v254);
                if (v255)
                  goto LABEL_379;
                goto LABEL_394;
              case 18:
                sub_2367C99BC(__str, 2);
                sub_2367C9B50((uint64_t *)__str, (unint64_t *)v365);
LABEL_392:
                if (*(_QWORD *)__str)
                {
                  *(_QWORD *)&__str[8] = *(_QWORD *)__str;
                  operator delete(*(void **)__str);
                }
                goto LABEL_394;
              default:
                if (v3 == 1)
                {
                  v145 = operator new(0x14uLL);
                  *((_QWORD *)&v385 + 1) = v145 + 5;
                  *(_QWORD *)&v386 = v145 + 5;
                  v145[4] = 1034281812;
                  *(_OWORD *)v145 = xmmword_236925E58;
                  *(_QWORD *)&v385 = v145;
                  v146 = sub_2367C93A0((float **)&v385, 3, (unint64_t *)v365);
                }
                else
                {
                  v256 = a1[11];
                  v145 = operator new(4uLL);
                  v257 = 1.0 / v256;
                  *(float *)v145 = v257;
                  *((_QWORD *)&v385 + 1) = v145 + 1;
                  *(_QWORD *)&v386 = v145 + 1;
                  *(_QWORD *)&v385 = v145;
                  v146 = sub_2367C93A0((float **)&v385, 0, (unint64_t *)v365);
                }
LABEL_378:
                v258 = v146;
                *((_QWORD *)&v385 + 1) = v145;
                operator delete(v145);
                if (v258)
                  goto LABEL_379;
LABEL_394:
                sub_2367C8B64((uint64_t)v365, &v361, &v360);
                v259 = *(_DWORD *)a1;
                v252 = v360;
                v251 = v361;
                if (v259 == 1)
                {
                  v253 = "kTRC";
                }
                else
                {
                  sub_2367C8C8C("rTRC", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  sub_2367C8C8C("gTRC", v251, v252, (unint64_t *)v367, (uint64_t)&v362);
                  v253 = "bTRC";
                }
                break;
            }
LABEL_397:
            sub_2367C8C8C(v253, v251, v252, (unint64_t *)v367, (uint64_t)&v362);
            v260 = (int *)v362;
            v261 = v363;
            v262 = (char *)v363 - (_BYTE *)v362;
            sub_2367C8618((unint64_t)((char *)v363 - (_BYTE *)v362) >> 3, 0, (unint64_t *)v367);
            if (v261 != v260)
            {
              v264 = (int)v369[0];
              v263 = (int)v369[1];
              if ((unint64_t)(v262 >> 3) <= 1)
                v265 = 1;
              else
                v265 = v262 >> 3;
              v266 = 8;
              do
              {
                v267 = *v260;
                v260 += 2;
                sub_2367C8618(v267 + v263 + LODWORD(v367[1]) - (v264 + LODWORD(v367[0])), v266, (unint64_t *)v367);
                v266 += 12;
                --v265;
              }
              while (v265);
            }
            v357 = *(_OWORD *)v367;
            v268 = vaddq_s64(vaddq_s64(*(int64x2_t *)v369, *(int64x2_t *)v367), *(int64x2_t *)v365);
            sub_2367C8618(vsubq_s64(vdupq_laneq_s64(v268, 1), v268).i32[0], 0, (unint64_t *)v369);
            sub_2367C9C54((_QWORD *)a2, (char *)v369[0], (char *)v369[1], (char *)v369[1] - (char *)v369[0]);
            sub_2367C9D5C(a2, *(char **)(a2 + 8), (char *)v357, *((char **)&v357 + 1), *((_QWORD *)&v357 + 1) - v357);
            sub_2367C9D5C(a2, *(char **)(a2 + 8), (char *)v365[0], (char *)v365[1], (char *)v365[1] - (char *)v365[0]);
            v380 = 0uLL;
            v381 = 0;
            sub_2367C9F60(&v380, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
            v269 = v380;
            v270 = *((_QWORD *)&v380 + 1) - v380;
            if (*((_QWORD *)&v380 + 1) - (_QWORD)v380 >= 0x44uLL)
            {
              *(_DWORD *)(v380 + 44) = 0;
              *(_DWORD *)(v269 + 64) = 0;
            }
            memset(__str, 0, sizeof(__str));
            *(_QWORD *)v376 = 0;
            sub_2367C9F60(__str, (const void *)v269, *((uint64_t *)&v269 + 1), v270);
            v271 = *(char **)&__str[8];
            if (*(_QWORD *)&__str[8] >= *(_QWORD *)v376)
            {
              v274 = *(_QWORD *)__str;
              v275 = *(_QWORD *)&__str[8] - *(_QWORD *)__str;
              v276 = *(_QWORD *)&__str[8] - *(_QWORD *)__str + 1;
              if (v276 < 0)
                sub_2367C3440();
              v277 = *(_QWORD *)v376 - *(_QWORD *)__str;
              if (2 * (*(_QWORD *)v376 - *(_QWORD *)__str) > (unint64_t)v276)
                v276 = 2 * v277;
              if (v277 >= 0x3FFFFFFFFFFFFFFFLL)
                v278 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v278 = v276;
              if (v278)
                v272 = operator new(v278);
              else
                v272 = 0;
              v279 = (char *)v272 + v278;
              *((_BYTE *)v272 + v275) = 0x80;
              v273 = (char *)v272 + v275 + 1;
              if (v271 == (char *)v274)
              {
                v272 = (char *)v272 + v275;
              }
              else
              {
                v280 = &v271[~v274];
                do
                {
                  v281 = *--v271;
                  (v280--)[(_QWORD)v272] = v281;
                }
                while (v271 != (char *)v274);
                v271 = *(char **)__str;
              }
              *(_QWORD *)__str = v272;
              *(_QWORD *)v376 = v279;
              if (v271)
                operator delete(v271);
            }
            else
            {
              **(_BYTE **)&__str[8] = 0x80;
              v272 = *(void **)__str;
              v273 = v271 + 1;
            }
            *(_QWORD *)&__str[8] = v273;
            v282 = (56 - ((_BYTE)v273 - (_BYTE)v272)) & 0x3F;
            v283 = v282 + v273 - (_BYTE *)v272;
            v379.__r_.__value_.__s.__data_[0] = 0;
            if (v273 - (_BYTE *)v272 >= v283)
            {
              if (v273 - (_BYTE *)v272 > v283)
              {
                v273 += v282;
                *(_QWORD *)&__str[8] = (char *)v272 + v283;
              }
            }
            else
            {
              sub_2367C8504(__str, v282, &v379);
              v273 = *(_BYTE **)&__str[8];
            }
            v284 = 0;
            do
            {
              v285 = (unint64_t)(8 * (*((_QWORD *)&v380 + 1) - v380)) >> v284;
              if ((unint64_t)v273 >= *(_QWORD *)v376)
              {
                v286 = *(_QWORD *)__str;
                v287 = &v273[-*(_QWORD *)__str];
                v288 = (uint64_t)&v273[-*(_QWORD *)__str + 1];
                if (v288 < 0)
                  sub_2367C3440();
                v289 = *(_QWORD *)v376 - *(_QWORD *)__str;
                if (2 * (*(_QWORD *)v376 - *(_QWORD *)__str) > (unint64_t)v288)
                  v288 = 2 * v289;
                if (v289 >= 0x3FFFFFFFFFFFFFFFLL)
                  v290 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v290 = v288;
                if (v290)
                  v291 = (char *)operator new(v290);
                else
                  v291 = 0;
                v292 = &v287[(_QWORD)v291];
                v293 = &v287[(_QWORD)v291];
                *v293 = v285;
                v294 = v293 + 1;
                if (v273 != (_BYTE *)v286)
                {
                  v295 = &v273[~v286];
                  do
                  {
                    v296 = *--v273;
                    (v295--)[(_QWORD)v291] = v296;
                  }
                  while (v273 != (_BYTE *)v286);
                  v273 = *(_BYTE **)__str;
                  v292 = v291;
                }
                *(_QWORD *)__str = v292;
                *(_QWORD *)&__str[8] = v294;
                *(_QWORD *)v376 = &v291[v290];
                if (v273)
                  operator delete(v273);
                v273 = v294;
              }
              else
              {
                *v273++ = v285;
              }
              *(_QWORD *)&__str[8] = v273;
              v297 = v284 >= 0x38;
              v284 += 8;
            }
            while (!v297);
            v298 = -271733879;
            v299 = -1732584194;
            v300 = 1732584193;
            v301 = 271733878;
            if (v273 != *(_BYTE **)__str)
            {
              v302 = 0;
              do
              {
                v303 = 0;
                v304 = 0;
                v305 = 1;
                v306 = 5;
                v307 = v301;
                v308 = v299;
                v309 = v298;
                v310 = v300;
                do
                {
                  v311 = v310;
                  v312 = v309;
                  v313 = v308;
                  v310 = v307;
                  v314 = (v309 | ~v307) ^ v308;
                  v315 = v303 & 0xF;
                  v316 = v308 ^ v310 ^ v312;
                  if (v304 <= 0x2F)
                  {
                    v314 = v316;
                    v315 = v306 & 0xF;
                  }
                  if (v304 <= 0x1F)
                  {
                    v314 = v312 & v310 | v313 & ~v310;
                    v315 = v305 & 0xF;
                  }
                  if (v304 <= 0xF)
                    v315 = v304;
                  v317 = (4 * v315) + v302;
                  if (v304 <= 0xF)
                    v314 = v310 & ~v312 | v312 & v313;
                  v309 = __ROR4__(v314+ v311+ dword_236925FA8[v304]+ (*(unsigned __int8 *)(*(_QWORD *)__str + v317) | (*(unsigned __int8 *)(*(_QWORD *)__str+ (v317 | 1)) << 8) | (*(unsigned __int8 *)(*(_QWORD *)__str + (v317 | 2)) << 16) | (*(unsigned __int8 *)(*(_QWORD *)__str + (v317 | 3)) << 24)), -byte_2369260A8[4 * v304])+ v312;
                  ++v304;
                  v303 += 7;
                  v306 += 3;
                  v305 += 5;
                  v307 = v313;
                  v308 = v312;
                }
                while (v304 != 64);
                v300 += v310;
                v298 += v309;
                v299 += v312;
                v301 += v313;
                v302 += 64;
              }
              while (v302 < (unint64_t)&v273[-*(_QWORD *)__str]);
            }
            if (*(_QWORD *)__str)
              operator delete(*(void **)__str);
            v318 = *(_DWORD **)a2;
            v318[21] = v300;
            v318[22] = v298;
            v318[23] = v299;
            v318[24] = v301;
            if ((_QWORD)v380)
              operator delete((void *)v380);
          }
          goto LABEL_379;
        }
        v92 = a1[2];
        if (v92 != 0.0)
        {
          v93 = a1[1];
          v94 = v92;
          if (!sub_2368A9ED4((uint64_t)__str, v93, v94))
          {
            v385 = *(_OWORD *)__str;
            v386 = *(_OWORD *)v376;
            v387 = *(_DWORD *)&v376[16];
            v95 = (char *)v365[0];
            v96 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2367C8698((unint64_t *)v365, 4uLL);
              v95 = (char *)v365[0];
            }
            *(_DWORD *)&v95[v96] = 842229363;
            sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            for (kk = 0; kk != 36; kk += 4)
            {
              v98 = *(float *)((char *)&v385 + kk);
              if (v98 < -32768.0 || v98 > 32768.0)
                goto LABEL_379;
              sub_2367C8618((int)(float)((float)(v98 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            }
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("chad", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            v99 = *(_DWORD *)a1;
            if (*(_DWORD *)a1)
            {
LABEL_211:
              if (v99 != 2)
                goto LABEL_191;
              v100 = (char *)v365[0];
              v101 = (char *)v365[1] - (char *)v365[0];
              if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
              {
                sub_2367C8698((unint64_t *)v365, 4uLL);
                v100 = (char *)v365[0];
              }
              *(_DWORD *)&v100[v101] = 541213037;
              sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              v102 = v365[0];
              v103 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2367C8698((unint64_t *)v365, 1uLL);
                v102 = v365[0];
              }
              v102[v103] = 3;
              v104 = v365[0];
              v105 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2367C8698((unint64_t *)v365, 1uLL);
                v104 = v365[0];
              }
              v104[v105] = 3;
              sub_2367C9340(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(244, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(148, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(80, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              v106 = operator new(4uLL);
              *v106 = 1065353216;
              *(_QWORD *)&__str[8] = v106 + 1;
              *(_QWORD *)v376 = v106 + 1;
              *(_QWORD *)__str = v106;
              v107 = sub_2367C93A0((float **)__str, 0, (unint64_t *)v365);
              operator delete(v106);
              if (!v107)
              {
                v108 = operator new(4uLL);
                *v108 = 1065353216;
                *((_QWORD *)&v385 + 1) = v108 + 1;
                *(_QWORD *)&v386 = v108 + 1;
                *(_QWORD *)&v385 = v108;
                v109 = sub_2367C93A0((float **)&v385, 0, (unint64_t *)v365);
                operator delete(v108);
                if (!v109)
                {
                  v110 = operator new(4uLL);
                  *v110 = 1065353216;
                  *((_QWORD *)&v380 + 1) = v110 + 1;
                  v381 = v110 + 1;
                  *(_QWORD *)&v380 = v110;
                  v111 = sub_2367C93A0((float **)&v380, 0, (unint64_t *)v365);
                  operator delete(v110);
                  if (!v111)
                  {
                    v340 = a2;
                    for (mm = 0; mm != 16; ++mm)
                    {
                      v113 = v365[0];
                      v114 = (char *)v365[1] - (char *)v365[0];
                      if ((char *)v365[1] - (char *)v365[0] != -1)
                      {
                        sub_2367C8698((unint64_t *)v365, 1uLL);
                        v113 = v365[0];
                      }
                      v113[v114] = 2 * (mm < 3);
                    }
                    v115 = v365[0];
                    v116 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v115 = v365[0];
                    }
                    v115[v116] = 2;
                    v117 = v365[0];
                    v118 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v117 = v365[0];
                    }
                    v117[v118] = 0;
                    sub_2367C9340(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    v119 = 0;
                    v120 = 1;
                    do
                    {
                      v121 = 0;
                      v122 = v120;
                      v123 = (char *)&unk_236925F48 + 48 * v119;
                      v124 = 1;
                      do
                      {
                        v125 = 0;
                        v126 = v124;
                        v127 = &v123[24 * v121];
                        v128 = 1;
                        do
                        {
                          v129 = 0;
                          v130 = v128;
                          v131 = &v127[12 * v125];
                          do
                          {
                            sub_2367C9340((int)(float)((float)(*(float *)&v131[v129] * 65535.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                            v129 += 4;
                          }
                          while (v129 != 12);
                          v128 = 0;
                          v125 = 1;
                        }
                        while ((v130 & 1) != 0);
                        v124 = 0;
                        v121 = 1;
                      }
                      while ((v126 & 1) != 0);
                      v120 = 0;
                      v119 = 1;
                    }
                    while ((v122 & 1) != 0);
                    v132 = 0;
                    while (1)
                    {
                      v133 = *(float *)&dword_236925ED4[v132];
                      v134 = *(float *)((char *)&xmmword_236925EE0 + v132 * 4);
                      v135 = *(float *)&dword_236925EF0[v132];
                      v136 = (float *)operator new(0x14uLL);
                      v137 = (float)-v133 - cbrtf(v134);
                      *v136 = 3.0;
                      v136[1] = 1.0 / v135;
                      v136[2] = v137;
                      v136[3] = 0.0;
                      v136[4] = fmaxf(-(float)(v137 * v135), 0.0);
                      memset(&v379, 0, sizeof(v379));
                      sub_2367C94AC(&v379, v136, (uint64_t)(v136 + 5), 5uLL);
                      v138 = sub_2367C93A0((float **)&v379, 3, (unint64_t *)v365);
                      if (v379.__r_.__value_.__r.__words[0])
                      {
                        v379.__r_.__value_.__l.__size_ = v379.__r_.__value_.__r.__words[0];
                        operator delete(v379.__r_.__value_.__l.__data_);
                      }
                      operator delete(v136);
                      if (v138)
                        break;
                      if (++v132 == 3)
                      {
                        v139 = 0;
                        while (1)
                        {
                          v140 = *(double *)&qword_236925F00[v139];
                          if (v140 < -32768.0 || v140 > 32768.0)
                            goto LABEL_379;
                          sub_2367C8618((int)(float)((float)(v140 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                          if (++v139 == 9)
                          {
                            v141 = 0;
                            v142 = qword_236925F00;
                            while (1)
                            {
                              v143 = 0;
                              v144 = 0.0;
                              do
                              {
                                v144 = v144 + *(double *)&v142[v143] * *((float *)&xmmword_236925EE0 + v143);
                                ++v143;
                              }
                              while (v143 != 3);
                              if (v144 < -32768.0 || v144 > 32768.0)
                                goto LABEL_379;
                              sub_2367C8618((int)(float)((float)(v144 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                              ++v141;
                              v142 += 3;
                              if (v141 == 3)
                              {
                                sub_2367C8B64((uint64_t)v365, &v361, &v360);
                                a2 = v340;
                                sub_2367C8C8C("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                                if (sub_2368AA100((unint64_t *)v365))
                                  goto LABEL_379;
                                sub_2367C8B64((uint64_t)v365, &v361, &v360);
LABEL_371:
                                v252 = v360;
                                v251 = v361;
                                v253 = "B2A0";
                                goto LABEL_397;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_379;
            }
            v319 = *((_DWORD *)a1 + 6);
            if (v319 != 2)
            {
              if (v319 == 11)
              {
                v320 = *((_DWORD *)a1 + 1);
                if (v320 == 1)
                {
                  LOBYTE(v319) = 12;
                  goto LABEL_474;
                }
                if (v320 == 11)
                {
                  LOBYTE(v319) = 11;
LABEL_474:
                  v321 = *((_DWORD *)a1 + 20);
                  if (v321 != 2 && v321 != 0xFFFF)
                  {
                    v322 = (char *)v365[0];
                    v323 = (char *)v365[1] - (char *)v365[0];
                    if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
                    {
                      sub_2367C8698((unint64_t *)v365, 4uLL);
                      v322 = (char *)v365[0];
                    }
                    *(_DWORD *)&v322[v323] = 1885563235;
                    sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    v324 = v365[0];
                    v325 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v324 = v365[0];
                    }
                    v324[v325] = v319;
                    v326 = v365[0];
                    v327 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v326 = v365[0];
                    }
                    v326[v327] = v321;
                    v328 = v365[0];
                    v329 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v328 = v365[0];
                    }
                    v328[v329] = 0;
                    v330 = v365[0];
                    v331 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v330 = v365[0];
                    }
                    v330[v331] = 1;
                    sub_2367C8B64((uint64_t)v365, &v361, &v360);
                    sub_2367C8C8C("cicp", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  }
                }
              }
              else if (*((_DWORD *)a1 + 1) == 1)
              {
                goto LABEL_474;
              }
            }
            v332 = a1[4];
            v333 = a1[5];
            v334 = a1[6];
            v335 = a1[7];
            v336 = a1[8];
            v337 = a1[9];
            v338 = a1[1];
            v339 = a1[2];
            if (sub_2367C90C0((uint64_t)__str, v332, v333, v334, v335, v336, v337, v338, v339))
              goto LABEL_379;
            if (sub_2368A9ED4((uint64_t)&v385, v338, v339))
              goto LABEL_379;
            sub_2367C9278((uint64_t)&v385, (int *)__str, (uint64_t)&v380);
            *(_DWORD *)__str = v380;
            *(_DWORD *)&__str[4] = HIDWORD(v380);
            *(_DWORD *)&__str[8] = v382;
            *(_QWORD *)&v385 = __PAIR64__(v381, DWORD1(v380));
            DWORD2(v385) = v383;
            *(_QWORD *)&v380 = __PAIR64__(HIDWORD(v381), DWORD2(v380));
            DWORD2(v380) = v384;
            if (sub_2367C8DBC((uint64_t)__str, (unint64_t *)v365))
              goto LABEL_379;
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("rXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2367C8DBC((uint64_t)&v385, (unint64_t *)v365))
              goto LABEL_379;
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("gXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2367C8DBC((uint64_t)&v380, (unint64_t *)v365))
              goto LABEL_379;
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("bXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            v99 = *(_DWORD *)a1;
            goto LABEL_211;
          }
        }
      }
LABEL_379:
      if (v359 < 0)
        operator delete(__p[0]);
      if (v362)
        operator delete(v362);
      if (v365[0])
      {
        v365[1] = v365[0];
        operator delete(v365[0]);
      }
    }
  }
  if (v367[0])
    operator delete(v367[0]);
  if (v369[0])
    operator delete(v369[0]);
}

void sub_2368A9A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a44 < 0)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  if (a50)
    operator delete(a50);
  if (a54)
    operator delete(a54);
  if (a58)
    operator delete(a58);
  _Unwind_Resume(a1);
}

BOOL sub_2368A9C6C(uint64_t *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_236769F9C(a1, a2, a3);
  v6 = *a4;
  *a4 = v5;
  if (v6)
  {
    sub_236769708(v6);
    v5 = *a4;
  }
  return v5 == 0;
}

void sub_2368A9CAC(uint64_t a1, unint64_t a2, char **a3, uint64_t **a4)
{
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;

  v7 = (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
  sub_23681D238(a3, v7 * a2 + 32);
  v8 = *a3;
  v9 = (char *)*a4;
  a4[1] = *a4;
  if (a2 > ((char *)a4[2] - v9) >> 3)
  {
    if (a2 >> 61)
LABEL_28:
      sub_2367C3440();
    v11 = (char *)sub_2367CA1FC(a2);
    v13 = *a4;
    v12 = (char *)a4[1];
    v14 = v11;
    if (v12 != (char *)*a4)
    {
      do
      {
        v15 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v12 != (char *)v13);
      v12 = (char *)*a4;
    }
    *a4 = (uint64_t *)v14;
    a4[1] = (uint64_t *)v11;
    a4[2] = (uint64_t *)&v11[8 * v10];
    if (v12)
      operator delete(v12);
  }
  if (a2)
  {
    v16 = 0;
    v17 = (((unint64_t)(v8 + 127) & 0xFFFFFFFFFFFFFF80) - (unint64_t)v8) >> 2;
    v18 = a4[1];
    do
    {
      v19 = (uint64_t)&(*a3)[4 * v17 + 4 * v16 * v7];
      v20 = (unint64_t)a4[2];
      if ((unint64_t)v18 >= v20)
      {
        v21 = v18 - *a4;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_28;
        v22 = v20 - (_QWORD)*a4;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v24 = (unint64_t)sub_2367CA1FC(v24);
        else
          v25 = 0;
        v26 = (uint64_t *)(v24 + 8 * v21);
        *v26 = v19;
        v18 = v26 + 1;
        v28 = *a4;
        v27 = (char *)a4[1];
        if (v27 != (char *)*a4)
        {
          do
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v26 = v29;
          }
          while (v27 != (char *)v28);
          v27 = (char *)*a4;
        }
        *a4 = v26;
        a4[1] = v18;
        a4[2] = (uint64_t *)(v24 + 8 * v25);
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v18++ = v19;
      }
      a4[1] = v18;
      ++v16;
    }
    while (v16 != a2);
  }
}

_QWORD *sub_2368A9E50(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[16];
    if (v3)
    {
      v2[17] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[13];
    if (v4)
    {
      v2[14] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[10];
    if (v5)
    {
      v2[11] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[7];
    if (v6)
    {
      v2[8] = v6;
      operator delete(v6);
    }
    MEMORY[0x23B7F8F48](v2, 0x1080C40B453349ALL);
  }
  return a1;
}

BOOL sub_2368A9ED4(uint64_t a1, float a2, float a3)
{
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  float v17;
  int v18[9];
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  result = 1;
  if (a3 <= 1.0 && a2 >= 0.0 && a2 <= 1.0 && a3 > 0.0)
  {
    v32[0] = a2 / a3;
    v6 = a2 / a3;
    v32[1] = 1.0;
    v7 = (float)((float)(1.0 - a2) - a3) / a3;
    v32[2] = v7;
    if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      result = (LODWORD(v7) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v8 = 0;
        v9 = (char *)dword_236925E8C;
        do
        {
          v10 = 0;
          v11 = 0.0;
          do
          {
            v11 = v11 + (float)(*(float *)&v9[v10 * 4] * v32[v10]);
            ++v10;
          }
          while (v10 != 3);
          v12 = v11;
          *(&v29 + v8++) = v12;
          v9 += 12;
        }
        while (v8 != 3);
        v13 = 0;
        v14 = (char *)dword_236925E8C;
        do
        {
          v15 = 0;
          v16 = 0.0;
          do
          {
            v16 = v16 + (float)(*(float *)&v14[v15 * 4] * *(float *)&dword_236925E80[v15]);
            ++v15;
          }
          while (v15 != 3);
          v17 = v16;
          *(&v26 + v13++) = v17;
          v14 += 12;
        }
        while (v13 != 3);
        result = 1;
        if (v29 != 0.0 && v30 != 0.0 && v31 != 0.0)
        {
          v19 = v26 / v29;
          v20 = 0;
          v21 = 0;
          v22 = v27 / v30;
          v23 = 0;
          v24 = 0;
          v25 = v28 / v31;
          if (COERCE_INT(fabs(v26 / v29)) <= 2139095039
            && COERCE_UNSIGNED_INT(fabs(v27 / v30)) <= 0x7F7FFFFF
            && COERCE_UNSIGNED_INT(fabs(v28 / v31)) <= 0x7F7FFFFF)
          {
            sub_2367C9278((uint64_t)&v19, dword_236925E8C, (uint64_t)v18);
            sub_2367C9278((uint64_t)&unk_236925EB0, v18, a1);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2368AA100(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  int v9;
  float *v10;
  int v11;
  uint64_t v12;
  float *v14;
  float *v15[3];
  float *v16[3];
  float *v17[3];

  v2 = *a1;
  v3 = a1[1] - *a1;
  if (v3 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a1, 4uLL);
    v2 = *a1;
  }
  *(_DWORD *)(v2 + v3) = 541147757;
  sub_2367C8618(0, a1[1] - *a1, a1);
  v4 = *a1;
  v5 = a1[1] - *a1;
  if (v5 != -1)
  {
    sub_2367C8698(a1, 1uLL);
    v4 = *a1;
  }
  *(_BYTE *)(v4 + v5) = 3;
  v6 = *a1;
  v7 = a1[1] - *a1;
  if (v7 != -1)
  {
    sub_2367C8698(a1, 1uLL);
    v6 = *a1;
  }
  *(_BYTE *)(v6 + v7) = 3;
  sub_2367C9340(0, a1[1] - *a1, a1);
  sub_2367C8618(32, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  v8 = (float *)operator new(4uLL);
  *v8 = 1.0;
  v17[1] = v8 + 1;
  v17[2] = v8 + 1;
  v17[0] = v8;
  v9 = sub_2367C93A0(v17, 0, a1);
  operator delete(v8);
  if (v9)
    return 1;
  v10 = (float *)operator new(4uLL);
  *v10 = 1.0;
  v16[1] = v10 + 1;
  v16[2] = v10 + 1;
  v16[0] = v10;
  v11 = sub_2367C93A0(v16, 0, a1);
  operator delete(v10);
  if (v11)
    return 1;
  v14 = (float *)operator new(4uLL);
  *v14 = 1.0;
  v15[1] = v14 + 1;
  v15[2] = v14 + 1;
  v15[0] = v14;
  v12 = sub_2367C93A0(v15, 0, a1);
  operator delete(v14);
  return v12;
}

void sub_2368AA2F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2368AA318(uint64_t *a1, uint64_t **a2, double *a3, unsigned int *a4)
{
  int v6;
  BOOL v7;
  double *v11;
  double *v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  double v28;
  _BYTE v29[32];
  _BYTE v30[24];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x24BDAC8D0];
  if (a4[10] - 3 <= 0xFFFFFFFD)
  {
    v6 = *((_DWORD *)*a2 + 20);
    v7 = v6 == 1129142603 || v6 == 1380401696;
    if (v7 || v6 == 1196573017)
    {
      v11 = (double *)sub_23676A304(*a2, 0x7258595Au);
      v12 = (double *)sub_23676A304(*a2, 0x6758595Au);
      v13 = sub_23676A304(*a2, 0x6258595Au);
      if (v11)
      {
        if (v12)
        {
          v14 = (double *)v13;
          if (v13)
            goto LABEL_19;
        }
      }
      v15 = sub_2367840E0(a1);
      if (v15)
      {
        v16 = v15;
        *(_QWORD *)&v27.f64[0] = *a2;
        *(_QWORD *)&v27.f64[1] = v15;
        *(_QWORD *)&v23.f64[0] = 0x100000001;
        v33 = 0;
        v25 = 0uLL;
        if (a4[10] == 1)
          v17 = 4390920;
        else
          v17 = 4456472;
        v18 = sub_236784600(a1, 2, (uint64_t **)&v27, (uint64_t)&v33, (int *)&v23, (uint64_t)&v25, v17, 4784152, 0x500u);
        if (v18)
        {
          v19 = v18;
          *(_OWORD *)&v30[8] = 0u;
          memset(&v29[8], 0, 24);
          *(_QWORD *)v29 = 0x3FF0000000000000;
          *(_QWORD *)v30 = 0x3FF0000000000000;
          v31 = 0;
          v32 = 0x3FF0000000000000;
          *(_QWORD *)&v21 = 0;
          *((_QWORD *)&v21 + 1) = 0x300000003;
          v11 = (double *)v34;
          (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, __int128 *))(v18 + 8))(v18, v29, v34, 3, 1, &v21);
          v12 = (double *)&v35;
          v14 = (double *)v36;
          sub_236784540(v19);
          sub_236769708(v16);
LABEL_19:
          v21 = xmmword_2368AFAD0;
          v22 = 0x3FEA65A0026966CCLL;
          sub_2367844B0((uint64_t)&v27, (double *)&v21, a3, v11);
          sub_2367844B0((uint64_t)&v25, (double *)&v21, a3, v12);
          sub_2367844B0((uint64_t)&v23, (double *)&v21, a3, v14);
          *(float64x2_t *)v29 = vmulq_n_f64(v27, 1.0 / (vaddvq_f64(v27) + v28));
          *(float64x2_t *)&v29[16] = vmulq_n_f64(v25, 1.0 / (vaddvq_f64(v25) + v26));
          *(float64x2_t *)v30 = vmulq_n_f64(v23, 1.0 / (vaddvq_f64(v23) + v24));
          return sub_2367F0F88(a4, (double *)v29);
        }
        sub_236769708(v16);
      }
      return 1;
    }
  }
  return 0;
}

void sub_2368AA5C8(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  _DWORD *v6;
  double v7;
  float v8;
  uint64_t v9;
  _DWORD *v10;
  double v11;
  float v12;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  void *v30;
  int v31;
  int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  double v36;
  float v37;
  void *__p[2];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = (_DWORD *)sub_23676A304(*a2, 0x6B545243u);
  if (v6)
  {
    sub_236765D50(v6);
    if (v7 <= 0.0)
      goto LABEL_20;
    v8 = 1.0 / v7;
  }
  else
  {
    v9 = 0;
    v37 = 0.0;
    v36 = 0.0;
    qmemcpy(__p, "CRTrCRTgCRTb", 12);
    do
    {
      v10 = (_DWORD *)sub_23676A304(*a2, *(_DWORD *)((char *)__p + v9));
      if (v10)
      {
        sub_236765D50(v10);
        if (v11 > 0.0)
        {
          v12 = 1.0 / v11;
          *(float *)((char *)&v36 + v9) = v12;
        }
      }
      v9 += 4;
    }
    while (v9 != 12);
    v8 = 0.0;
    if (*(float *)&v36 != 0.0
      && vabds_f32(*(float *)&v36, *((float *)&v36 + 1)) < 0.0001
      && vabds_f32(*((float *)&v36 + 1), v37) < 0.0001)
    {
      v8 = *(float *)&v36;
    }
  }
  if (v8 != 0.0 && v8 >= 0.00012207 && v8 <= 1.0)
  {
    *(_BYTE *)(a3 + 48) = 0;
    if (fabs(v8 + -1.0) <= 0.001)
    {
      v32 = 8;
    }
    else if (fabs(v8 + -0.384615385) <= 0.001)
    {
      v32 = 17;
    }
    else
    {
      *(_BYTE *)(a3 + 48) = 1;
      *(_DWORD *)(a3 + 52) = vcvtas_u32_f32(v8 * 10000000.0);
      v32 = 2;
    }
    *(_DWORD *)(a3 + 56) = v32;
    __p[0] = 0;
    __p[1] = 0;
    v39 = 0;
    sub_2367C5B34((uint64_t)&v36, a3);
    sub_2368A741C(&v36, (uint64_t)__p);
    if (v33)
    {
      v15 = (char *)__p[0];
    }
    else
    {
      v15 = (char *)__p[0];
      if (!sub_2368AA9F4(a1, (uint64_t)a2, __p[0], (int)__p[1], a3))
      {
LABEL_67:
        if (v15)
          operator delete(v15);
        return;
      }
    }
    if (v15)
      operator delete(v15);
  }
LABEL_20:
  v34 = a1;
  v35 = (uint64_t)a2;
  v15 = (char *)operator new(0x1CuLL);
  v16 = v15 + 28;
  v17 = 467206;
  v18 = v15;
  do
  {
    v19 = __clz(__rbit64(v17));
    if (v18 >= v16)
    {
      v20 = (v18 - v15) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        sub_2367C3440();
      if ((v16 - v15) >> 1 > v21)
        v21 = (v16 - v15) >> 1;
      if ((unint64_t)(v16 - v15) >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
      {
        if (v22 >> 62)
          sub_2367C3488();
        v23 = (char *)operator new(4 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[4 * v20];
      *(_DWORD *)v24 = v19;
      v25 = v24 + 4;
      while (v18 != v15)
      {
        v26 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v24 - 1) = v26;
        v24 -= 4;
      }
      v16 = &v23[4 * v22];
      if (v15)
        operator delete(v15);
      v15 = v24;
      v18 = v25;
    }
    else
    {
      *(_DWORD *)v18 = v19;
      v18 += 4;
    }
    v17 &= v17 - 1;
  }
  while (v17);
  if (v15 != v18)
  {
    v27 = v15;
    while (1)
    {
      v28 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 != 2)
        break;
LABEL_49:
      v27 += 4;
      if (v27 == v18)
        goto LABEL_53;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_DWORD *)(a3 + 56) = v28;
    __p[0] = 0;
    __p[1] = 0;
    v39 = 0;
    sub_2367C5B34((uint64_t)&v36, a3);
    sub_2368A741C(&v36, (uint64_t)__p);
    if (v29)
    {
      v30 = __p[0];
    }
    else
    {
      v30 = __p[0];
      if (!sub_2368AA9F4(v34, v35, __p[0], (int)__p[1], a3))
      {
        v31 = 0;
        if (!v30)
        {
LABEL_48:
          if (!v31)
            goto LABEL_67;
          goto LABEL_49;
        }
LABEL_47:
        __p[1] = v30;
        operator delete(v30);
        goto LABEL_48;
      }
    }
    v31 = 1;
    if (!v30)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_53:
  if (v15)
    operator delete(v15);
  *(_BYTE *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 2;
}

void sub_2368AA99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  void *v24;

  if (v24)
    operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2368AA9F4(uint64_t *a1, uint64_t a2, const void *a3, int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  double v20[3];
  double v21[3];
  double v22;
  double v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = sub_236769F9C(a1, a3, (a4 - (_DWORD)a3));
  if (!v7)
    return 1;
  v8 = v7;
  v9 = sub_2367840E0(a1);
  if (v9)
  {
    v10 = v9;
    v11 = 1;
    v12 = sub_236785A68();
    v13 = sub_236785A68();
    v14 = v13;
    if (v12)
      v15 = v13 == 0;
    else
      v15 = 1;
    if (!v15)
    {
      if (*(_DWORD *)(a5 + 40) == 1)
      {
        v22 = 0.001;
        while (1)
        {
          v18 = 0;
          v19 = 0x100000001;
          (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v12 + 8))(v12, &v22, v21, 1, 1, &v18);
          v18 = 0;
          v19 = 0x100000001;
          (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v14 + 8))(v14, &v22, v20, 1, 1, &v18);
          if (vabdd_f64(v21[0], v20[0]) > 0.0002)
            break;
          v22 = v22 + 0.025;
          if (v22 >= 1.0)
          {
            v11 = 0;
            break;
          }
        }
      }
      else
      {
        v22 = 0.001;
        while (2)
        {
          v23 = 0.001;
          do
          {
            v24 = 0.001;
            while (2)
            {
              v18 = 0;
              v19 = 0x100000001;
              (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v12 + 8))(v12, &v22, v21, 1, 1, &v18);
              v18 = 0;
              v19 = 0x100000001;
              (*(void (**)(uint64_t, double *, double *, uint64_t, uint64_t, uint64_t *))(v14 + 8))(v14, &v22, v20, 1, 1, &v18);
              for (i = 0; i != 3; ++i)
              {
                if (vabdd_f64(v21[i], v20[i]) > 0.0002)
                {
                  v11 = 1;
                  goto LABEL_25;
                }
              }
              v24 = v24 + 0.2;
              if (v24 < 1.0)
                continue;
              break;
            }
            v23 = v23 + 0.2;
          }
          while (v23 < 1.0);
          v11 = 0;
          v22 = v22 + 0.2;
          if (v22 < 1.0)
            continue;
          break;
        }
      }
    }
LABEL_25:
    if (v14)
      sub_236784540(v14);
    if (v12)
      sub_236784540(v12);
    sub_236769708(v10);
  }
  else
  {
    v11 = 1;
  }
  sub_236769708(v8);
  return v11;
}

unint64_t sub_2368AAD08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;

  if (a2)
    v2 = a2 + 2048;
  else
    v2 = 2176;
  v3 = v2 + a1;
  v4 = (unint64_t)malloc_type_malloc(v2 + a1, 0x40B96322uLL);
  if (!v4)
    return 0;
  do
    v5 = __ldxr(&qword_2564313C8);
  while (__stxr(v5 + 1, &qword_2564313C8));
  do
  {
    v6 = __ldaxr(&qword_2564313D8);
    v7 = v6 + v3;
  }
  while (__stlxr(v7, &qword_2564313D8));
  v8 = atomic_load(&qword_2564313D0);
  if (v8 <= v7)
    v9 = v7;
  else
    v9 = v8;
  while (1)
  {
    v10 = __ldaxr(&qword_2564313D0);
    if (v10 != v8)
      break;
    if (!__stlxr(v9, &qword_2564313D0))
      goto LABEL_23;
  }
  __clrex();
  do
  {
    if (v10 <= v7)
      v12 = v7;
    else
      v12 = v10;
    while (1)
    {
      v13 = __ldaxr(&qword_2564313D0);
      if (v13 != v10)
        break;
      if (!__stlxr(v12, &qword_2564313D0))
      {
        v14 = 1;
        goto LABEL_22;
      }
    }
    v14 = 0;
    __clrex();
LABEL_22:
    v10 = v13;
  }
  while (!v14);
LABEL_23:
  v11 = v2 + (v4 & 0xFFFFFFFFFFFFF800);
  *(_QWORD *)(v11 - 32) = v4;
  *(_QWORD *)(v11 - 24) = v3;
  return v11;
}

BOOL sub_2368AAE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), unint64_t (*)(unint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2368AB7E8, sub_2368AB73C, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_2368AB73C((unint64_t)v6, i);
  return 0;
}

BOOL sub_2368AAE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2368AB718, sub_2368AB5C0, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_2368AB5C0((uint64_t)v6, i);
  return 0;
}

BOOL sub_2368AAF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), unint64_t (*)(unint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2368AB11C, sub_2368AAFC0, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_2368AAFC0((unint64_t)v6, i);
  return 0;
}

unint64_t sub_2368AAFC0(unint64_t result, unsigned int a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  signed int *v11;
  signed int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE v23[8];
  uint64_t v24;

  v20 = *(_QWORD *)(result + 8);
  v2 = (_QWORD *)(**(_QWORD **)v20 + ((unint64_t)(**(_DWORD **)(v20 + 8) + a2) << 6));
  v19 = v2[6];
  if (v19)
  {
    v21 = 0;
    v22 = a2;
    v3 = v2[5];
    v17 = v2[2];
    v18 = v2[3];
    v15 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 24);
    v4 = v3;
    do
    {
      if (v4)
      {
        v5 = 0;
        v6 = v18 + v17 * v21;
        v7 = **(_QWORD **)(v20 + 24);
        v8 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 40);
        v9 = *(int **)(v20 + 48);
        v10 = **(_DWORD **)(v20 + 40);
        v11 = *(signed int **)(v20 + 56);
        do
        {
          v12 = *(_DWORD *)(v16 + v15 * v21 + 4 * v5);
          result = sub_2368AB140(v7, v12, v22, v8, v10, *v9);
          v13 = result;
          if (v12 >= *v11)
          {
            v14 = result;
          }
          else
          {
            result = sub_236871EA8((uint64_t)v23, v3, v6 + 4 * v5, **(_QWORD **)(v20 + 64), v5, v21, **(_DWORD **)(v20 + 72));
            v14 = v24 + v13;
          }
          *(_DWORD *)(v6 + 4 * v5++) = v14;
        }
        while (v5 < v3);
        v4 = v3;
      }
      ++v21;
    }
    while (v21 < v19);
  }
  return result;
}

uint64_t sub_2368AB11C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

unint64_t sub_2368AB140(uint64_t a1, signed int a2, unint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unint64_t v8;
  char v9;
  char v11;
  int v12;
  int v13;

  if (a2 < 0)
  {
    if (a3 > 2)
      return 0;
    v11 = a6 - 8;
    if (a6 <= 8)
      v11 = 0;
    return ((dword_236926508[(~a2 % 0x8Fu) & 1] * dword_2369261A8[3 * ((~a2 % 0x8Fu + 1) >> 1) + a3]) << v11);
  }
  else
  {
    v6 = a4 + 64;
    if (a2 >= a4 && a2 < v6)
    {
      if (a3 <= 2)
      {
        if ((a2 - a4) >> (2 * a3) <= 0)
          v7 = -(-((a2 - a4) >> (2 * a3)) & 3);
        else
          v7 = ((a2 - a4) >> (2 * a3)) & 3;
        v8 = (unint64_t)(((uint64_t)v7 << a6) - v7) >> 2;
        if (a6 <= 3)
          v9 = 3;
        else
          v9 = a6;
        return ((1 << (v9 - 3)) + v8);
      }
      return 0;
    }
    v12 = a2 - v6;
    if (a2 < v6)
      return *(unsigned int *)(a1 + 4 * (a5 * a3 + a2));
    if (a3 > 2)
      return 0;
    v13 = v12 / 25;
    if (a3 == 1)
      v12 /= 5;
    if (a3 == 2)
      v12 = v13;
    return (unint64_t)(((uint64_t)(v12 % 5) << a6) - v12 % 5) >> 2;
  }
}

BOOL sub_2368AB2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), void (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2368AB59C, sub_2368AB338, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_2368AB338((uint64_t)v6, i);
  return 0;
}

void sub_2368AB338(uint64_t a1, unsigned int a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  signed int *v14;
  unint64_t v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  unint64_t v35;
  int *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  char v40[8];
  uint64_t v41;
  uint64_t (**v42)();
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  int v47;
  _BYTE v48[96];
  void *__p;
  void *v50;

  v3 = *(uint64_t ***)(a1 + 8);
  v4 = *(_DWORD *)v3[1] + a2;
  v5 = **v3;
  v33 = v3;
  v6 = v3[2];
  v42 = &off_250800498;
  v7 = *(_OWORD *)(v6 + 3);
  v43 = *(_OWORD *)(v6 + 1);
  v44 = v7;
  v45 = *(_OWORD *)(v6 + 5);
  v8 = (_QWORD *)(v5 + (v4 << 6));
  sub_2367FE7B0((uint64_t)v46, (uint64_t)&v42, v8[5]);
  v32 = v8[6];
  if (v32)
  {
    v35 = a2;
    v9 = v8[5];
    v30 = v8[2];
    v31 = v8[3];
    v29 = v33[3];
    v34 = 0;
    v10 = v9;
    do
    {
      if (v10)
      {
        v11 = 0;
        v12 = v31 + v30 * v34;
        v39 = v29[3] + v29[2] * v34;
        v38 = v33[4];
        v37 = v33[5];
        v13 = (int *)v33[7];
        v36 = (int *)v33[6];
        v14 = (signed int *)v33[8];
        if ((v34 & 1) != 0)
          v15 = 0;
        else
          v15 = v9 + 2;
        do
        {
          v16 = *(_DWORD *)(v39 + 4 * v11);
          v17 = sub_2368AB140(*v38, v16, v35, *((_DWORD *)v37 + 10), *v36, *v13);
          v18 = v17;
          if (v16 >= *v14)
          {
            v19 = v17;
          }
          else
          {
            sub_23685126C((uint64_t)v40, v9, v12 + 4 * v11, *v33[9], v11, v34, *(_DWORD *)v33[10], (uint64_t)v46);
            v19 = v41 + v18;
          }
          v20 = 0;
          *(_DWORD *)(v12 + 4 * v11) = v19;
          v21 = 8 * v19;
          v22 = v15 + v11;
          *((_DWORD *)__p + v15 + v11++) = v47 - v21;
          v23 = (uint64_t *)v48;
          do
          {
            v24 = *(_QWORD *)&v46[v20] - v21;
            if (v24 < 0)
              v24 = v21 - *(_QWORD *)&v46[v20];
            v25 = (unint64_t)(v24 + 3) >> 3;
            v26 = *v23;
            v23 += 3;
            *(_DWORD *)(v26 + 4 * v22) = v25;
            *(_DWORD *)(v26 + 4 * ((((uint64_t)(v34 << 63) >> 63) & (v9 + 2)) + v11)) += v25;
            v20 += 8;
          }
          while (v20 != 32);
        }
        while (v11 < v9);
        v10 = v9;
      }
      ++v34;
    }
    while (v34 < v32);
  }
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  for (i = 0; i != -96; i -= 24)
  {
    v28 = *(void **)&v48[i + 72];
    if (v28)
    {
      *(_QWORD *)&v48[i + 80] = v28;
      operator delete(v28);
    }
  }
}

uint64_t sub_2368AB59C(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_2368AB5C0(uint64_t a1, unsigned int a2)
{
  int **v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  signed int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[3];

  v2 = *(int ***)(a1 + 8);
  v3 = a2;
  sub_23687D47C(__p, **v2);
  v4 = *v2;
  v7 = *(_QWORD *)v2[1] + ((unint64_t)*v2[2] << 6);
  v6 = *(_QWORD *)(v7 + 16);
  v5 = *(_QWORD *)(v7 + 24);
  LODWORD(v7) = **v2;
  if ((int)v7 >= 1)
  {
    v8 = 0;
    do
    {
      *((_QWORD *)__p[0] + v8) = *(_QWORD *)(*(_QWORD *)v2[1] + ((unint64_t)(v8 + *v2[2]) << 6) + 24)
                               + *(_QWORD *)(*(_QWORD *)v2[1] + ((unint64_t)(v8 + *v2[2]) << 6) + 16)
                               * v3;
      ++v8;
      v4 = *v2;
    }
    while (v8 < **v2);
    LODWORD(v7) = **v2;
  }
  v9 = __p[0];
  v18 = *(_QWORD *)v2[3];
  if (v18)
  {
    v10 = 0;
    v17 = v5 + v6 * v3;
    do
    {
      if ((int)v7 >= 1)
      {
        v11 = 0;
        v12 = *(_DWORD *)(v17 + 4 * v10);
        v13 = *(_QWORD *)v2[4];
        v14 = v2[5][10];
        v15 = v2[7];
        v16 = *v2[6];
        do
        {
          *(_DWORD *)(v9[v11] + 4 * v10) = sub_2368AB140(v13, v12, v11, v14, v16, *v15);
          ++v11;
          v7 = *v4;
        }
        while (v11 < v7);
      }
      ++v10;
    }
    while (v10 != v18);
  }
  if (v9)
  {
    __p[1] = v9;
    operator delete(v9);
  }
}

uint64_t sub_2368AB718(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

unint64_t sub_2368AB73C(unint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  signed int v10;

  v2 = *(_QWORD *)(result + 8);
  v3 = **(_QWORD **)(v2 + 16);
  if (v3)
  {
    v4 = (int *)(*(_QWORD *)(**(_QWORD **)v2 + ((unint64_t)**(unsigned int **)(v2 + 8) << 6) + 24)
               + *(_QWORD *)(**(_QWORD **)v2 + ((unint64_t)**(unsigned int **)(v2 + 8) << 6) + 16) * a2);
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 40);
    v6 = **(_QWORD **)(v2 + 32);
    v7 = *(int **)(v2 + 48);
    v8 = **(_DWORD **)(v2 + 40);
    do
    {
      if (*v4 >= v5 - 1)
        v9 = v5 - 1;
      else
        v9 = *v4;
      if (*v4 >= 0)
        v10 = v9;
      else
        v10 = 0;
      result = sub_2368AB140(v6, v10, 0, v5, v8, *v7);
      *v4++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2368AB7E8(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_2368AB80C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2368474FC(result);
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

_QWORD *sub_2368AB848(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_2507FD6B8;
  a1[124] = &off_2507FFA18;
  v2 = (void *)a1[128];
  if (v2)
  {
    a1[129] = v2;
    operator delete(v2);
  }
  sub_2368AB80C(a1 + 123, 0);
  a1[61] = &off_2507FFA18;
  v3 = (void *)a1[65];
  if (v3)
  {
    a1[66] = v3;
    operator delete(v3);
  }
  a1[36] = &off_2507FFA18;
  v4 = (void *)a1[40];
  if (v4)
  {
    a1[41] = v4;
    operator delete(v4);
  }
  a1[5] = &off_2507FFA18;
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_2368AB8D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_2507FD6B8;
  a1[124] = &off_2507FFA18;
  v2 = (void *)a1[128];
  if (v2)
  {
    a1[129] = v2;
    operator delete(v2);
  }
  sub_2368AB80C(a1 + 123, 0);
  a1[61] = &off_2507FFA18;
  v3 = (void *)a1[65];
  if (v3)
  {
    a1[66] = v3;
    operator delete(v3);
  }
  a1[36] = &off_2507FFA18;
  v4 = (void *)a1[40];
  if (v4)
  {
    a1[41] = v4;
    operator delete(v4);
  }
  a1[5] = &off_2507FFA18;
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x23B7F8F48);
}

BOOL sub_2368AB978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _BOOL8 result;
  BOOL v27;
  int *v28;

  v11 = *(_QWORD *)(a1 + 16);
  v12 = (int *)(*(_QWORD *)(**(_QWORD **)a2 + 8 * v11) + 64);
  v13 = (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8 * v11) + 64);
  v14 = (int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) + 8 * v11) + 64);
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 984) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 984) + 64), a8);
  v16 = v15;
  if (a5)
  {
    v17 = (_DWORD *)(v15 + 4);
    v18 = v12;
    v19 = v13;
    v20 = v14;
    v21 = a5;
    do
    {
      v22 = *v18++;
      *(v17 - 1) = v22;
      v23 = *v19++;
      *v17 = v23;
      v24 = *v20++;
      v17[1] = v24;
      v17 += 3;
      --v21;
    }
    while (v21);
  }
  v25 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 984) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 984) + 64), a8);
  v27 = (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 984) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 984) + 64), a8, v16, v25, a5) == 0;
  result = v27;
  v27 = v27 || a5 == 0;
  if (!v27)
  {
    v28 = (int *)(v25 + 4);
    do
    {
      *v12++ = *(v28 - 1);
      *v13++ = *v28;
      *v14++ = v28[1];
      v28 += 3;
      --a5;
    }
    while (a5);
    return 0;
  }
  return result;
}

BOOL sub_2368ABAA8(uint64_t a1, unint64_t a2)
{
  return a2 < 3;
}

uint64_t sub_2368ABAB4(uint64_t a1, _QWORD **a2)
{
  *(_QWORD *)(a1 + 976) = **a2;
  return 0;
}

BOOL sub_2368ABAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = operator new();
  v5 = *(_OWORD *)(a1 + 928);
  *(_OWORD *)v4 = *(_OWORD *)(a1 + 912);
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)(a1 + 960);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 944);
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 112) = 0;
  sub_2368AB80C((uint64_t *)(a1 + 984), v4);
  return sub_236847550(*(_QWORD *)(a1 + 984), a1 + 992, a1 + 288, *(_QWORD *)(a1 + 976), a2, *(float *)(a1 + 904));
}

const char *sub_2368ABB44()
{
  return "Cms";
}

uint64_t sub_2368ABB50(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _DWORD *v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  BOOL v30;
  uint64_t result;
  uint64_t (**v32)();
  __int16 v33;
  _QWORD v34[2];
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _BYTE v47[26];
  uint64_t (**v48)();
  __int16 v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)();
  __int16 v63;
  _QWORD v64[2];
  __int128 __p;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[288];

  v4 = operator new();
  sub_23688FA44((uint64_t)&v32, a2);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_2507FD6B8;
  *(_QWORD *)(v4 + 40) = &off_2507FFA18;
  *(_WORD *)(v4 + 48) = v33;
  *(_QWORD *)(v4 + 56) = v34[0];
  *(_QWORD *)(v4 + 61) = *(_QWORD *)((char *)v34 + 5);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)v35;
  *(_QWORD *)(v4 + 88) = v36;
  v35[0] = 0;
  v35[1] = 0;
  v5 = v37;
  v6 = v38;
  v7 = v39;
  *(_DWORD *)(v4 + 144) = v40;
  *(_OWORD *)(v4 + 112) = v6;
  *(_OWORD *)(v4 + 128) = v7;
  *(_OWORD *)(v4 + 96) = v5;
  v8 = v41;
  v9 = v43;
  *(_QWORD *)(v4 + 152) = &off_250800470;
  *(_QWORD *)(v4 + 160) = v8;
  *(_QWORD *)(v4 + 168) = &off_2507FFCC0;
  *(_OWORD *)(v4 + 176) = v42;
  *(_QWORD *)(v4 + 192) = &off_250800470;
  *(_QWORD *)(v4 + 200) = v9;
  v10 = v44;
  v11 = v45;
  *(_QWORD *)(v4 + 208) = &off_250800470;
  *(_QWORD *)(v4 + 216) = v10;
  *(_QWORD *)(v4 + 224) = &off_250800470;
  *(_QWORD *)(v4 + 232) = v11;
  *(_OWORD *)(v4 + 266) = *(_OWORD *)&v47[10];
  v12 = *(_OWORD *)v47;
  *(_OWORD *)(v4 + 240) = v46;
  *(_OWORD *)(v4 + 256) = v12;
  *(_QWORD *)(v4 + 288) = &off_2507FFA18;
  *(_WORD *)(v4 + 296) = v49;
  *(_QWORD *)(v4 + 309) = *(_QWORD *)((char *)v50 + 5);
  v13 = v52;
  *(_QWORD *)(v4 + 304) = v50[0];
  *(_OWORD *)(v4 + 320) = v51;
  *(_QWORD *)(v4 + 336) = v13;
  v51 = 0uLL;
  v36 = 0;
  v14 = v53;
  v15 = v54;
  v16 = v55;
  *(_DWORD *)(v4 + 392) = v56;
  *(_OWORD *)(v4 + 360) = v15;
  *(_OWORD *)(v4 + 376) = v16;
  *(_OWORD *)(v4 + 344) = v14;
  v17 = v57;
  *(_QWORD *)(v4 + 400) = &off_250800470;
  *(_QWORD *)(v4 + 408) = v17;
  *(_QWORD *)(v4 + 416) = &off_2507FFCC0;
  *(_OWORD *)(v4 + 424) = v58;
  v18 = v59;
  v19 = v60;
  *(_QWORD *)(v4 + 440) = &off_250800470;
  *(_QWORD *)(v4 + 448) = v18;
  *(_QWORD *)(v4 + 456) = &off_250800470;
  *(_QWORD *)(v4 + 464) = v19;
  v20 = v61;
  *(_QWORD *)(v4 + 472) = &off_250800470;
  *(_QWORD *)(v4 + 480) = v20;
  *(_QWORD *)(v4 + 488) = &off_2507FFA18;
  *(_WORD *)(v4 + 496) = v63;
  v21 = v64[0];
  *(_QWORD *)(v4 + 509) = *(_QWORD *)((char *)v64 + 5);
  *(_QWORD *)(v4 + 504) = v21;
  *(_OWORD *)(v4 + 520) = __p;
  *(_QWORD *)(v4 + 536) = v66;
  v52 = 0;
  __p = 0uLL;
  v66 = 0;
  v22 = v67;
  v23 = v68;
  v24 = v69;
  *(_DWORD *)(v4 + 592) = v70;
  *(_OWORD *)(v4 + 560) = v23;
  *(_OWORD *)(v4 + 576) = v24;
  *(_OWORD *)(v4 + 544) = v22;
  *(_QWORD *)(v4 + 600) = &off_250800470;
  *(_QWORD *)(v4 + 608) = v71;
  *(_QWORD *)(v4 + 616) = &off_2507FFCC0;
  *(_OWORD *)(v4 + 624) = v72;
  *(_QWORD *)(v4 + 640) = &off_250800470;
  *(_QWORD *)(v4 + 648) = v73;
  *(_QWORD *)(v4 + 656) = &off_250800470;
  *(_QWORD *)(v4 + 664) = v74;
  *(_QWORD *)(v4 + 672) = &off_250800470;
  *(_QWORD *)(v4 + 680) = v75;
  memcpy((void *)(v4 + 688), v76, 0x120uLL);
  *(_QWORD *)(v4 + 984) = 0;
  sub_2367CA390(v4 + 992);
  *(_WORD *)(v4 + 1000) = *(_WORD *)(v4 + 496);
  *(_QWORD *)(v4 + 1008) = *(_QWORD *)(v4 + 504);
  *(_QWORD *)(v4 + 1013) = *(_QWORD *)(v4 + 509);
  sub_2367C9C54((_QWORD *)(v4 + 1024), *(char **)(v4 + 520), *(char **)(v4 + 528), *(_QWORD *)(v4 + 528) - *(_QWORD *)(v4 + 520));
  v25 = *(_OWORD *)(v4 + 560);
  *(_OWORD *)(v4 + 1048) = *(_OWORD *)(v4 + 544);
  *(_OWORD *)(v4 + 1064) = v25;
  *(_OWORD *)(v4 + 1080) = *(_OWORD *)(v4 + 576);
  *(_DWORD *)(v4 + 1096) = *(_DWORD *)(v4 + 592);
  *(_QWORD *)(v4 + 1112) = *(_QWORD *)(v4 + 608);
  *(_OWORD *)(v4 + 1128) = *(_OWORD *)(v4 + 624);
  *(_QWORD *)(v4 + 1152) = *(_QWORD *)(v4 + 648);
  *(_QWORD *)(v4 + 1168) = *(_QWORD *)(v4 + 664);
  *(_QWORD *)(v4 + 1184) = *(_QWORD *)(v4 + 680);
  v62 = &off_2507FFA18;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v48 = &off_2507FFA18;
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  v32 = &off_2507FFA18;
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  v26 = (_DWORD *)(v4 + 344);
  if (*(_BYTE *)(v4 + 1052))
  {
    v28 = *v26 == 1;
    v27 = 3;
    if (v28)
      v27 = 1;
LABEL_16:
    if (*(_BYTE *)(v4 + 1052))
      v30 = v27 == 3;
    else
      v30 = 0;
    v29 = v30;
    goto LABEL_22;
  }
  v28 = *v26 == 1;
  v27 = 3;
  if (v28)
    v27 = 1;
  if ((*(_DWORD *)(v4 + 1048) != 1) == v28)
    goto LABEL_16;
  v29 = 1;
LABEL_22:
  if (*(_BYTE *)(v4 + 908) && (result = sub_2367E7FC8(v4 + 1008, v4 + 304), (v29 & ~(_DWORD)result) == 1))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_2368ABF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  _QWORD *v70;
  _QWORD *v71;
  void **v72;
  uint64_t v73;
  void *v75;
  void *v76;
  void *v77;
  void *v78;

  *v71 = v73;
  v75 = *v72;
  if (*v72)
  {
    v70[129] = v75;
    operator delete(v75);
  }
  sub_2368AB80C(v70 + 123, 0);
  v70[61] = v73;
  v76 = (void *)v70[65];
  if (v76)
  {
    v70[66] = v76;
    operator delete(v76);
  }
  v70[36] = v73;
  v77 = (void *)v70[40];
  if (v77)
  {
    v70[41] = v77;
    operator delete(v77);
  }
  v70[5] = v73;
  v78 = (void *)v70[9];
  if (v78)
  {
    v70[10] = v78;
    operator delete(v78);
  }
  if (__p)
    operator delete(__p);
  if (a45)
    operator delete(a45);
  if (a14)
    operator delete(a14);
  MEMORY[0x23B7F8F48](v70, 0x10B1C400044D29ALL);
  _Unwind_Resume(a1);
}

int64x2_t sub_2368ABFFC(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t result;

  for (i = 0; i != 600; i += 40)
  {
    v3 = a1 + i;
    v4 = *(_QWORD *)(a1 + i + 24);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a1 + i + 16) + *(_QWORD *)(a2 + i + 16);
    *(int64x2_t *)v3 = vaddq_s64(*(int64x2_t *)(a1 + i), *(int64x2_t *)(a2 + i));
    *(_QWORD *)(v3 + 24) = v4 + *(_QWORD *)(a2 + i + 24);
    *(double *)(v3 + 32) = *(double *)(a2 + i + 32) + *(double *)(a1 + i + 32);
  }
  v5 = *(int64x2_t *)(a1 + 616);
  *(int64x2_t *)(a1 + 600) = vaddq_s64(*(int64x2_t *)(a1 + 600), *(int64x2_t *)(a2 + 600));
  *(int64x2_t *)(a1 + 616) = vaddq_s64(v5, *(int64x2_t *)(a2 + 616));
  v6 = *(int64x2_t *)(a1 + 648);
  *(int64x2_t *)(a1 + 632) = vaddq_s64(*(int64x2_t *)(a1 + 632), *(int64x2_t *)(a2 + 632));
  *(int64x2_t *)(a1 + 648) = vaddq_s64(v6, *(int64x2_t *)(a2 + 648));
  v7 = *(int64x2_t *)(a1 + 680);
  *(int64x2_t *)(a1 + 664) = vaddq_s64(*(int64x2_t *)(a1 + 664), *(int64x2_t *)(a2 + 664));
  result = vaddq_s64(v7, *(int64x2_t *)(a2 + 680));
  *(int64x2_t *)(a1 + 680) = result;
  *(_DWORD *)(a1 + 696) += *(_DWORD *)(a2 + 696);
  return result;
}

uint64_t sub_2368AC0C0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t i;
  uint64_t j;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t k;
  uint64_t m;
  _OWORD v27[2];
  void *__p[3];
  _BYTE v29[120];
  unsigned int v30;
  _OWORD v31[6];
  uint64_t v32;
  _BYTE v33[120];
  unsigned int v34;
  _QWORD v35[4];

  v35[3] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 624))
    return 0;
  sub_2367CA770((uint64_t)v33, *a3, a3[1]);
  if (v34)
  {
    v30 = v34;
  }
  else
  {
    sub_2367CA9E4((uint64_t)v31, (uint64_t)v33);
    v6 = 0;
    v7 = *((_QWORD *)a3 + 2);
    v8 = *(_QWORD *)&v31[1];
    v10 = *a3;
    v9 = a3[1];
    do
    {
      if ((_DWORD)v9)
      {
        v11 = 0;
        v12 = *(int **)&a3[10 * v6 + 6];
        v13 = (_DWORD *)*((_QWORD *)&v31[1] + 5 * v6 + 1);
        do
        {
          v14 = v12;
          v15 = v13;
          v16 = v10;
          if ((_DWORD)v10)
          {
            do
            {
              v17 = *v14++;
              *v15++ = v17;
              --v16;
            }
            while (v16);
          }
          ++v11;
          v13 = (_DWORD *)((char *)v13 + v8);
          v12 = (int *)((char *)v12 + v7);
        }
        while (v11 != v9);
      }
      ++v6;
    }
    while (v6 != 3);
    v30 = 0;
    sub_2367CA9E4((uint64_t)v29, (uint64_t)v31);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)((char *)v31 + i));
    if (!v34)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v33[j]);
    }
  }
  result = v30;
  if (!v30)
  {
    sub_2367CA9E4((uint64_t)v33, (uint64_t)v29);
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_2367C5B34((uint64_t)v31, a2 + 16);
    v21 = 3 * *a3 * (unint64_t)a3[1];
    sub_2367CA014(__p, v21);
    v22 = 0;
    memset(v35, 0, 24);
    v23 = v33;
    do
    {
      v35[v22++] = v23;
      v23 += 40;
    }
    while (v22 != 3);
    v24 = 6 * *a3;
    memset(v27, 0, sizeof(v27));
    sub_2367D105C(v35, 3uLL, 16, 0, 2u, v24, 0, (uint64_t)__p[0], 2 * v21, (uint64_t)v27);
    (*(void (**)(_QWORD, const char *, _QWORD, _QWORD, _OWORD *, void *))(a1 + 624))(*(_QWORD *)(a1 + 632), "background", *a3, a3[1], v31, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (k = 104; k != -16; k -= 40)
      sub_2367C2F38((uint64_t *)&v33[k]);
    if (!v30)
    {
      for (m = 104; m != -16; m -= 40)
        sub_2367C2F38((uint64_t *)&v29[m]);
    }
    return 0;
  }
  return result;
}

void sub_2368AC344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t i;
  uint64_t j;

  if (__p)
    operator delete(__p);
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(v34 - 208 + i));
  if (!a34)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a19 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368AC3B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  float *v15;
  unsigned __int8 *v16;
  float *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  uint64_t j;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t k;
  uint64_t m;
  _OWORD v29[2];
  void *__p[3];
  _BYTE v31[120];
  unsigned int v32;
  _OWORD v33[6];
  uint64_t v34;
  _BYTE v35[120];
  unsigned int v36;
  _QWORD v37[4];

  v37[3] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 624))
    return 0;
  sub_2367CA770((uint64_t)v35, *a4, a4[1]);
  if (v36)
  {
    v32 = v36;
  }
  else
  {
    sub_2367CA9E4((uint64_t)v33, (uint64_t)v35);
    v8 = 0;
    v9 = *((_QWORD *)a4 + 2);
    v10 = *(_QWORD *)&v33[1];
    v12 = *a4;
    v11 = a4[1];
    do
    {
      if ((_DWORD)v11)
      {
        v13 = 0;
        v14 = *(unsigned __int8 **)&a4[10 * v8 + 6];
        v15 = (float *)*((_QWORD *)&v33[1] + 5 * v8 + 1);
        do
        {
          v16 = v14;
          v17 = v15;
          v18 = v12;
          if ((_DWORD)v12)
          {
            do
            {
              v19 = *v16++;
              *v17++ = (float)v19 * 0.0039216;
              --v18;
            }
            while (v18);
          }
          ++v13;
          v15 = (float *)((char *)v15 + v10);
          v14 += v9;
        }
        while (v13 != v11);
      }
      ++v8;
    }
    while (v8 != 3);
    v32 = 0;
    sub_2367CA9E4((uint64_t)v31, (uint64_t)v33);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)((char *)v33 + i));
    if (!v36)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v35[j]);
    }
  }
  result = v32;
  if (!v32)
  {
    sub_2367CA9E4((uint64_t)v35, (uint64_t)v31);
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    sub_2367C5B34((uint64_t)v33, a3 + 16);
    v23 = 3 * *a4 * (unint64_t)a4[1];
    sub_2367CA014(__p, v23);
    v24 = 0;
    memset(v37, 0, 24);
    v25 = v35;
    do
    {
      v37[v24++] = v25;
      v25 += 40;
    }
    while (v24 != 3);
    v26 = 6 * *a4;
    memset(v29, 0, sizeof(v29));
    sub_2367D105C(v37, 3uLL, 16, 0, 2u, v26, 0, (uint64_t)__p[0], 2 * v23, (uint64_t)v29);
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _OWORD *, void *))(a1 + 624))(*(_QWORD *)(a1 + 632), a2, *a4, a4[1], v33, __p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (k = 104; k != -16; k -= 40)
      sub_2367C2F38((uint64_t *)&v35[k]);
    if (!v32)
    {
      for (m = 104; m != -16; m -= 40)
        sub_2367C2F38((uint64_t *)&v31[m]);
    }
    return 0;
  }
  return result;
}

void sub_2368AC650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t i;
  uint64_t j;

  if (__p)
    operator delete(__p);
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(v34 - 224 + i));
  if (!a34)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a19 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368AC6C0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t i;
  uint64_t j;
  _QWORD v10[2];
  __int128 v11;
  _BYTE v12[192];
  unsigned int v13[30];
  _BYTE v14[120];
  unsigned int v15;

  if (!*(_QWORD *)(a1 + 624))
    return 0;
  sub_2367CA770((uint64_t)v14, *a2, a2[1]);
  v4 = v15;
  if (!v15)
  {
    sub_2367CA9E4((uint64_t)v13, (uint64_t)v14);
    sub_2367E7780((uint64_t)v12);
    v10[0] = 0;
    v10[1] = 0;
    *(_QWORD *)&v5 = v13[0];
    *((_QWORD *)&v5 + 1) = v13[1];
    v11 = v5;
    sub_2367E7714((uint64_t)a2, (uint64_t)v10, (uint64_t)v13, (uint64_t)v12);
    v6 = sub_2367CA62C(0);
    v4 = sub_2368AC0C0(a1, (uint64_t)v6, v13);
    for (i = 26; i != -4; i -= 10)
      sub_2367C2F38((uint64_t *)&v13[i]);
    if (!v15)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v14[j]);
    }
  }
  return v4;
}

void sub_2368AC7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a38 + i));
  if (!*(_DWORD *)(v38 - 40))
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(v38 - 160 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368AC800(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t i;
  uint64_t j;
  unsigned int v28[4];
  uint64_t v29;
  _QWORD v30[12];
  _BYTE v31[120];
  unsigned int v32;

  v4 = *a2;
  v5 = a2[1];
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = (float *)*((_QWORD *)a2 + 3);
    v9 = -3.4028e38;
    v10 = 3.4028e38;
    do
    {
      v11 = v8;
      v12 = v4;
      if ((_DWORD)v4)
      {
        do
        {
          v13 = *v11++;
          v14 = v13;
          if (v13 < v10)
            v10 = v14;
          if (v9 < v14)
            v9 = v14;
          --v12;
        }
        while (v12);
      }
      ++v7;
      v8 = (float *)((char *)v8 + *((_QWORD *)a2 + 2));
    }
    while (v7 != v5);
  }
  else
  {
    v9 = -3.4028e38;
    v10 = 3.4028e38;
  }
  sub_2368ACA10((uint64_t)v31, v4, v5);
  v15 = v32;
  if (!v32)
  {
    sub_2367CA9E4((uint64_t)v28, (uint64_t)v31);
    v16 = 0;
    v17 = 255.0 / (float)(v9 - v10);
    if (v10 == v9)
      v17 = 0.0;
    do
    {
      v18 = a2[1];
      if ((_DWORD)v18)
      {
        v19 = 0;
        LODWORD(v20) = *a2;
        do
        {
          if ((_DWORD)v20)
          {
            v21 = 0;
            v22 = v30[5 * v16] + v29 * v19;
            v23 = *((_QWORD *)a2 + 3) + *((_QWORD *)a2 + 2) * v19;
            do
            {
              *(_BYTE *)(v22 + v21) = (int)(float)(v17 * (float)(*(float *)(v23 + 4 * v21) - v10));
              ++v21;
              v20 = *a2;
            }
            while (v21 < v20);
            v18 = a2[1];
          }
          ++v19;
        }
        while (v19 < v18);
      }
      ++v16;
    }
    while (v16 != 3);
    v24 = sub_2367CA534(0);
    v15 = sub_2368AC3B4(a1, (uint64_t)"ccs", (uint64_t)v24, v28);
    for (i = 26; i != -4; i -= 10)
      sub_2367C2F38((uint64_t *)&v28[i]);
    if (!v32)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v31[j]);
    }
  }
  return v15;
}

void sub_2368AC9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a10 + i));
  if (!a40)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a25 + j));
  }
  _Unwind_Resume(a1);
}

void sub_2368ACA10(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  sub_2367C2E38((uint64_t)&v41, a2, a3);
  if (v45)
  {
    *(_DWORD *)(a1 + 120) = v45;
  }
  else
  {
    sub_2367C2E38((uint64_t)&v36, a2, a3);
    if (v40)
    {
      *(_DWORD *)(a1 + 120) = v40;
    }
    else
    {
      sub_2367C2E38((uint64_t)&v31, a2, a3);
      if (v35)
      {
        *(_DWORD *)(a1 + 120) = v35;
      }
      else
      {
        v19 = v41;
        v6 = v43;
        v43 = 0;
        v7 = v38;
        v38 = 0;
        v8 = v33;
        v33 = 0;
        v20 = v42;
        v21 = v6;
        v22 = v44;
        v24 = v37;
        v25 = v7;
        v23 = v36;
        v26 = v39;
        v27 = v31;
        v28 = v32;
        v29 = v8;
        v30 = v34;
        *(_DWORD *)(a1 + 120) = 0;
        sub_2367CA9E4(a1, (uint64_t)&v19);
        for (i = 104; i != -16; i -= 40)
          sub_2367C2F38((uint64_t *)((char *)&v19 + i));
        if (!v35)
        {
          v10 = v33;
          v33 = 0;
          if (v10)
          {
            v11 = -*(_QWORD *)(v10 - 24);
            do
              v12 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v12 + v11, &qword_2564313D8));
            free(*(void **)(v10 - 32));
          }
        }
      }
      if (!v40)
      {
        v13 = v38;
        v38 = 0;
        if (v13)
        {
          v14 = -*(_QWORD *)(v13 - 24);
          do
            v15 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v15 + v14, &qword_2564313D8));
          free(*(void **)(v13 - 32));
        }
      }
    }
    if (!v45)
    {
      v16 = v43;
      v43 = 0;
      if (v16)
      {
        v17 = -*(_QWORD *)(v16 - 24);
        do
          v18 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v18 + v17, &qword_2564313D8));
        free(*(void **)(v16 - 32));
      }
    }
  }
}

void sub_2368ACC00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 104) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = -*(_QWORD *)(v3 - 24);
  do
    v5 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v5 + v4, &qword_2564313D8));
  free(*(void **)(v3 - 32));
  if (!*(_DWORD *)(v1 - 40))
  {
LABEL_5:
    v6 = *(_QWORD *)(v1 - 56);
    *(_QWORD *)(v1 - 56) = 0;
    if (v6)
    {
      v7 = -*(_QWORD *)(v6 - 24);
      do
        v8 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v8 + v7, &qword_2564313D8));
      free(*(void **)(v6 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368ACC84(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t i;
  uint64_t j;
  unsigned int v31[4];
  uint64_t v32;
  _QWORD v33[12];
  _BYTE v34[120];
  unsigned int v35;

  v6 = a3[1];
  v7 = *a3;
  v8 = 0;
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
    v12 = -1;
    do
    {
      v13 = v11;
      v14 = *a3;
      if (v7)
      {
        do
        {
          v16 = *v13++;
          v15 = v16;
          if (v16 < v12)
            v12 = v15;
          if (v9 <= v15)
            v8 = v15;
          else
            v8 = v9;
          v9 = v8;
          --v14;
        }
        while (v14);
      }
      ++v10;
      v11 += *((_QWORD *)a3 + 2);
    }
    while (v10 != v6);
  }
  else
  {
    v12 = -1;
  }
  sub_2368ACA10((uint64_t)v34, v7, v6);
  v17 = v35;
  if (!v35)
  {
    sub_2367CA9E4((uint64_t)v31, (uint64_t)v34);
    v18 = 0;
    v19 = 255.0 / (float)(v8 - v12);
    v20 = a3[1];
    if (v8 == v12)
      v19 = 0.0;
    v21 = a3[1];
    do
    {
      if (v21)
      {
        v22 = 0;
        LODWORD(v23) = *a3;
        do
        {
          if ((_DWORD)v23)
          {
            v24 = 0;
            v25 = v33[5 * v18] + v32 * v22;
            v26 = *((_QWORD *)a3 + 3) + *((_QWORD *)a3 + 2) * v22;
            do
            {
              *(_BYTE *)(v25 + v24) = (int)(float)(v19 * (float)(*(unsigned __int8 *)(v26 + v24) - v12));
              ++v24;
              v23 = *a3;
            }
            while (v24 < v23);
            v20 = a3[1];
          }
          ++v22;
          v21 = v20;
        }
        while (v22 < v20);
      }
      ++v18;
    }
    while (v18 != 3);
    v27 = sub_2367CA534(0);
    v17 = sub_2368AC3B4(a1, a2, (uint64_t)v27, v31);
    for (i = 26; i != -4; i -= 10)
      sub_2367C2F38((uint64_t *)&v31[i]);
    if (!v35)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v34[j]);
    }
  }
  return v17;
}

void sub_2368ACE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a10 + i));
  if (!a40)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a25 + j));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2368ACEB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int64x2_t v9;
  uint64_t (**v10)();
  int64x2_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _BYTE v16[40];
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  result = sub_2367F1ECC(a1, &v18, &v17);
  if (!(_DWORD)result)
  {
    sub_2367F1484((uint64_t)v16, a2, v17);
    v10 = &off_2507FF660;
    v13 = v18;
    v14 = a2;
    v15 = 1;
    v11 = (int64x2_t)xmmword_2368AF3F0;
    v12 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v10);
    v12 >>= 1;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v9.i64[0] = vaddq_s64(v11, v9).u64[0];
    v9.i64[1] = vshrq_n_u64(*(uint64x2_t *)&v11, 1uLL).i64[1];
    v11 = v9;
    if (!(_DWORD)result)
    {
      if (v15)
      {
        sub_2367F14F8((uint64_t)v16, a2, a3, a4);
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

_QWORD *sub_2368ACFA0(_QWORD *result)
{
  *result = off_2507FD630;
  return result;
}

void sub_2368ACFB0(_QWORD *a1)
{
  *a1 = off_2507FD630;
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2368ACFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  BOOL v7;

  v7 = !sub_2368AD3C4(a2, a3, *a5, *(uint64_t **)(a1 + 40)) && *(_BYTE *)(a1 + 48) != 0;
  *(_BYTE *)(a1 + 48) = v7;
  return 0;
}

uint64_t sub_2368AD01C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;
  char v7;

  v4 = *a4;
  if (v4 >> a2)
  {
    v6 = 1;
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 40);
    *(_QWORD *)(v5[3] + (*v5 >> 3)) = (v4 << (*v5 & 7)) | *(unsigned __int8 *)(v5[3] + (*v5 >> 3));
    *v5 += a2;
    v6 = *(_BYTE *)(a1 + 48) == 0;
  }
  v7 = !v6;
  *(_BYTE *)(a1 + 48) = v7;
  return 0;
}

uint64_t sub_2368AD074(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_2368AD168(*a3, *(uint64_t **)(a1 + 40));
  return 0;
}

uint64_t sub_2368AD098(uint64_t a1, float *a2)
{
  BOOL v3;
  char v4;

  if (sub_2368AD334(*(uint64_t **)(a1 + 40), *a2))
    v3 = 1;
  else
    v3 = *(_BYTE *)(a1 + 48) == 0;
  v4 = !v3;
  *(_BYTE *)(a1 + 48) = v4;
  return 0;
}

uint64_t sub_2368AD0D8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 48))(a1, 0, a2);
  if (!(_DWORD)result)
  {
    ++*(_QWORD *)(a1 + 16);
    if (*a2)
    {
      sub_2368AD168(*(_QWORD *)(a1 + 32), *(uint64_t **)(a1 + 40));
      v5 = *a2;
      while (1)
      {
        v5 &= v5 - 1;
        if (!v5)
          break;
        v6 = *(_QWORD **)(a1 + 40);
        *(_QWORD *)(v6[3] + (*v6 >> 3)) = *(unsigned __int8 *)(v6[3] + (*v6 >> 3));
        *v6 += 2;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_2368AD168(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;

  if (result)
  {
    if (result > 0x10)
    {
      v6 = *a2;
      v7 = (unint64_t)*a2 >> 3;
      v8 = a2[3];
      v9 = *a2 & 7;
      v10 = *(unsigned __int8 *)(v8 + v7);
      v11 = *a2 + 2;
      v12 = v11 >> 3;
      v13 = v11 & 7;
      if (result > 0x110)
      {
        *(_QWORD *)(v8 + v7) = (3 << v9) | v10;
        *(_QWORD *)(v8 + v12) = ((result & 0xFFF) << v13) | *(unsigned __int8 *)(v8 + v12);
        if (result < 0x1000)
        {
          v18 = v6 + 14;
        }
        else
        {
          v14 = result >> 12;
          v4 = v6 + 19;
          v15 = 12;
          do
          {
            v16 = v14;
            *(_QWORD *)(v8 + ((v4 - 5) >> 3)) = (1 << ((v4 - 5) & 7)) | *(unsigned __int8 *)(v8 + ((v4 - 5) >> 3));
            *(_QWORD *)(v8 + ((v4 - 4) >> 3)) = ((unint64_t)v14 << ((v4 - 4) & 7)) | *(unsigned __int8 *)(v8 + ((v4 - 4) >> 3));
            v4 += 9;
            if (v14 < 0x100)
              break;
            v14 >>= 8;
            v17 = v15 >= 0x34;
            v15 += 8;
          }
          while (!v17);
          v18 = v4 - 5;
          if (v16 >= 0x100)
          {
            *(_QWORD *)(v8 + (v18 >> 3)) = (1 << (v18 & 7)) | *(unsigned __int8 *)(v8 + (v18 >> 3));
            *(_QWORD *)(v8 + ((v4 - 4) >> 3)) = (((v16 >> 8) & 0xF) << ((v4 - 4) & 7)) | *(unsigned __int8 *)(v8 + ((v4 - 4) >> 3));
            goto LABEL_16;
          }
        }
        *(_QWORD *)(v8 + (v18 >> 3)) = *(unsigned __int8 *)(v8 + (v18 >> 3));
        v4 = v18 + 1;
        goto LABEL_16;
      }
      *(_QWORD *)(v8 + v7) = (2 << v9) | v10;
      *(_QWORD *)(v8 + v12) = ((result - 17) << v13) | *(unsigned __int8 *)(v8 + v12);
      v4 = v6 + 10;
    }
    else
    {
      v2 = *a2;
      v3 = a2[3];
      *(_QWORD *)(v3 + ((unint64_t)*a2 >> 3)) = (1 << (*a2 & 7)) | *(unsigned __int8 *)(v3
                                                                                               + ((unint64_t)*a2 >> 3));
      *(_QWORD *)(v3 + ((unint64_t)(v2 + 2) >> 3)) = ((result - 1) << ((v2 + 2) & 7)) | *(unsigned __int8 *)(v3 + ((unint64_t)(v2 + 2) >> 3));
      v4 = v2 + 6;
    }
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a2[3] + ((unint64_t)*a2 >> 3)) = *(unsigned __int8 *)(a2[3] + ((unint64_t)*a2 >> 3));
    v4 = v5 + 2;
  }
LABEL_16:
  *a2 = v4;
  return result;
}

uint64_t sub_2368AD334(uint64_t *a1, float a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (LODWORD(a2) >> 23);
  v3 = 1;
  if (v2 <= 0x8E)
  {
    v4 = (1 << (v2 - 103)) + ((LODWORD(a2) & 0x7FFFFFu) >> (126 - v2));
    if (v2 <= 0x70)
      v5 = 0;
    else
      v5 = (v2 << 10) - 114688;
    if (v2 > 0x70)
      v4 = (LODWORD(a2) & 0x7FFFFFu) >> 13;
    v6 = v5 | (LODWORD(a2) >> 31 << 15) | v4;
    if (v2 < 0x67)
      v6 = 0;
    v7 = *a1;
    *(_QWORD *)(a1[3] + ((unint64_t)*a1 >> 3)) = (v6 << (*a1 & 7)) | *(unsigned __int8 *)(a1[3]
                                                                                               + ((unint64_t)*a1 >> 3));
    *a1 = v7 + 16;
    return 0;
  }
  return v3;
}

BOOL sub_2368AD3C4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  v13 = 0;
  v12 = 0;
  result = sub_2367F2290(a1, a2, a3, &v13, &v12);
  if (!result)
  {
    v7 = v13;
    v8 = *a4;
    v9 = a4[3];
    *(_QWORD *)(v9 + ((unint64_t)*a4 >> 3)) = ((unint64_t)v13 << (*a4 & 7)) | *(unsigned __int8 *)(v9 + ((unint64_t)*a4 >> 3));
    *a4 = v8 + 2;
    v10 = *((_DWORD *)v14 + v7);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = v12;
      *(_QWORD *)(v9 + ((unint64_t)(v8 + 2) >> 3)) = ((unint64_t)(a3 - (v10 >> 5)) << ((v8 + 2) & 7)) | *(unsigned __int8 *)(v9 + ((unint64_t)(v8 + 2) >> 3));
      *a4 = v8 + v11;
    }
  }
  return result;
}

uint64_t sub_2368AD468(uint64_t a1, uint64_t a2, float *a3, _QWORD *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x2_t v6;
  int32x2_t v7;
  uint64_t v11;
  float v12;
  double v13;
  double v14;
  double v15;
  int32x4_t *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[96];
  uint64_t v41;
  _QWORD v42[13];

  v11 = 0;
  v42[12] = *MEMORY[0x24BDAC8D0];
  do
  {
    v12 = *a3++;
    *(float *)v4.i32 = v12;
    v13 = (float)((float)(v12 * 4.0) * -0.11033) + 1.0;
    v14 = 1.0 / v13;
    if (v13 >= 0.00001)
      v15 = 1.0 / v13;
    else
      v15 = 100000.0;
    *(float *)&v15 = v15;
    *(float *)v4.i32 = *(float *)v4.i32 * *(float *)&v15;
    *(float *)&v14 = *(float *)v4.i32 * -0.090882;
    *(float *)v5.i32 = *(float *)v4.i32 * 0.013925;
    *(float *)v6.i32 = *(float *)v4.i32 * -0.043664;
    *(float *)v7.i32 = *(float *)v4.i32 * 0.0030558;
    *(float *)v4.i32 = *(float *)v4.i32 * 0.003619;
    v16 = (int32x4_t *)&v40[v11];
    v5 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
    *v16 = vdupq_lane_s32(*(int32x2_t *)&v15, 0);
    v16[1] = vdupq_lane_s32(*(int32x2_t *)&v14, 0);
    v16[2] = v5;
    v16[3] = vdupq_lane_s32(v6, 0);
    v4 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
    v16[4] = vdupq_lane_s32(v7, 0);
    v16[5] = v4;
    v11 += 96;
  }
  while (v11 != 288);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  sub_2367C431C((uint64_t)&v32, *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84));
  v17 = v36;
  if (!v36)
  {
    v37 = v32;
    v18 = v34;
    v34 = 0;
    *(_QWORD *)&v38 = v33;
    *((_QWORD *)&v38 + 1) = v18;
    v19 = *(_DWORD *)(a1 + 80);
    v20 = *(_DWORD *)(a1 + 84);
    v39 = v35;
    if (v20 && v19)
    {
      v21 = 0;
      v22 = v38;
      do
      {
        memcpy(v18, (const void *)(*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 96) * v21++), 4 * *(unsigned int *)(a1 + 80));
        v18 += v22;
      }
      while (v21 < *(unsigned int *)(a1 + 84));
    }
    v23.i64[0] = *(_QWORD *)a1;
    v23.i64[1] = HIDWORD(*(_QWORD *)a1);
    v24 = vdupq_n_s64(3uLL);
    v25 = (int64x2_t)vqsubq_u64(*(uint64x2_t *)a2, (uint64x2_t)v24);
    v26 = (int8x16_t)vaddq_s64(vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 16)), v24);
    v31[0] = v25;
    v31[1] = vsubq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(v23, (uint64x2_t)v26), v26, (int8x16_t)v23), v25);
    sub_2368849F4(a1, (uint64_t)v31, (uint64_t)v40, a4, a1 + 80, (uint64_t)v31);
    sub_2368849F4(a1 + 40, (uint64_t)v31, (uint64_t)&v41, a4, a1, (uint64_t)v31);
    sub_2368849F4((uint64_t)&v37, (uint64_t)v31, (uint64_t)v42, a4, a1 + 40, (uint64_t)v31);
    sub_2367F6750((int *)a1, (int *)(a1 + 40));
    sub_2367F6750((int *)a1, (int *)(a1 + 80));
    v17 = 0;
    v34 = 0;
  }
  v27 = *((_QWORD *)&v38 + 1);
  *((_QWORD *)&v38 + 1) = 0;
  if (v27)
  {
    v28 = -*(_QWORD *)(v27 - 24);
    do
      v29 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v29 + v28, &qword_2564313D8));
    free(*(void **)(v27 - 32));
  }
  return v17;
}

void sub_2368AD700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  unint64_t v24;

  if (a22)
  {
    v23 = -*(_QWORD *)(a22 - 24);
    do
      v24 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v24 + v23, &qword_2564313D8));
    free(*(void **)(a22 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2368AD74C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v8;

  v6 = result;
  if ((*(__int16 *)(result + 4) & 0x80000000) == 0)
  {
    v8 = *(unsigned __int16 *)(result + 4);
    do
    {
      result = sub_2368AD74C(a2 + 8 * v8, a2, a3, ++a4);
      v6 = a2 + 8 * *(__int16 *)(v6 + 6);
      v8 = *(unsigned __int16 *)(v6 + 4);
    }
    while ((*(__int16 *)(v6 + 4) & 0x80000000) == 0);
  }
  *(_BYTE *)(a3 + *(__int16 *)(v6 + 6)) = a4;
  return result;
}

void sub_2368AD7BC(uint64_t a1, unint64_t a2, int a3, _BYTE *a4)
{
  _BYTE *v4;
  unint64_t v5;
  int v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  __int16 *v11;
  __int16 *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  __int16 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 *v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unint64_t v55;
  __int16 *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int16 *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 v68;
  unsigned int v69;
  BOOL v70;
  unint64_t v71;
  unsigned __int8 *v72;
  int64_t v75;
  unint64_t v77;
  uint64_t (*v78)(uint64_t *, uint64_t *);

  v4 = a4;
  v5 = a2;
  v71 = a2 - 1;
  v72 = a4 + 1;
  v77 = (2 * a2) | 1;
  v7 = 1;
  do
  {
    if (v77 >> 61)
      sub_2367C3440();
    v8 = (__int16 *)sub_2367CA1FC(v77);
    v9 = v8;
    v11 = &v8[4 * v10];
    if (v5)
    {
      v12 = v8;
      v13 = v5;
      do
      {
        --v13;
        v14 = *(_DWORD *)(a1 + 4 * v13);
        if (v14)
        {
          if (v14 <= v7 - 1)
            v15 = v7 - 1;
          else
            v15 = *(_DWORD *)(a1 + 4 * v13);
          if (v12 >= v11)
          {
            v16 = ((char *)v12 - (char *)v9) >> 3;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              sub_2367C3440();
            if (((char *)v11 - (char *)v9) >> 2 > v17)
              v17 = ((char *)v11 - (char *)v9) >> 2;
            if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            v19 = (char *)sub_2367CA1FC(v18);
            v21 = &v19[8 * v16];
            *(_DWORD *)v21 = v15;
            *((_WORD *)v21 + 2) = -1;
            *((_WORD *)v21 + 3) = v13;
            v22 = (__int16 *)v21;
            while (v12 != v9)
            {
              v23 = *((_QWORD *)v12 - 1);
              v12 -= 4;
              *((_QWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            v11 = (__int16 *)&v19[8 * v20];
            v12 = (__int16 *)(v21 + 8);
            if (v9)
              operator delete(v9);
            v9 = v22;
          }
          else
          {
            *(_DWORD *)v12 = v15;
            v12[2] = -1;
            v12[3] = v13;
            v12 += 4;
          }
        }
      }
      while (v13);
    }
    else
    {
      v12 = v8;
    }
    v24 = (char *)v12 - (char *)v9;
    if ((char *)v12 - (char *)v9 == 8)
    {
      v4[v9[3]] = 1;
      v25 = 2;
      v5 = a2;
LABEL_115:
      operator delete(v9);
      goto LABEL_116;
    }
    v26 = v24 >> 3;
    v78 = (uint64_t (*)(uint64_t *, uint64_t *))sub_2368ADCD0;
    v75 = (char *)v12 - (char *)v9;
    if (v24 < 1025)
    {
LABEL_32:
      v29 = 0;
      v27 = 0;
    }
    else
    {
      v27 = v24 >> 3;
      while (1)
      {
        v28 = (uint64_t *)operator new(8 * v27, MEMORY[0x24BEDB6B8]);
        if (v28)
          break;
        v48 = v27 > 1;
        v27 >>= 1;
        if (!v48)
          goto LABEL_32;
      }
      v29 = v28;
    }
    sub_2368ADCE4((uint64_t)v9, (uint64_t *)v12, &v78, v26, v29, v27);
    if (v29)
      operator delete(v29);
    if (v12 >= v11)
    {
      v31 = v26 + 1;
      if ((v26 + 1) >> 61)
        goto LABEL_121;
      if (((char *)v11 - (char *)v9) >> 2 > v31)
        v31 = ((char *)v11 - (char *)v9) >> 2;
      if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
        v32 = (unint64_t)sub_2367CA1FC(v32);
      else
        v33 = 0;
      v34 = (__int16 *)(v32 + 8 * v26);
      *(_QWORD *)v34 = -1;
      v30 = v34 + 4;
      while (v12 != v9)
      {
        v35 = *((_QWORD *)v12 - 1);
        v12 -= 4;
        *((_QWORD *)v34 - 1) = v35;
        v34 -= 4;
      }
      v11 = (__int16 *)(v32 + 8 * v33);
      if (v9)
        operator delete(v9);
      v9 = v34;
    }
    else
    {
      *(_QWORD *)v12 = -1;
      v30 = v12 + 4;
    }
    if (v30 >= v11)
    {
      v37 = ((char *)v30 - (char *)v9) >> 3;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61)
LABEL_121:
        sub_2367C3440();
      if (((char *)v11 - (char *)v9) >> 2 > v38)
        v38 = ((char *)v11 - (char *)v9) >> 2;
      if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v39 = (unint64_t)sub_2367CA1FC(v39);
      else
        v40 = 0;
      v41 = (__int16 *)(v39 + 8 * v37);
      *(_QWORD *)v41 = -1;
      v36 = v41 + 4;
      while (v30 != v9)
      {
        v42 = *((_QWORD *)v30 - 1);
        v30 -= 4;
        *((_QWORD *)v41 - 1) = v42;
        v41 -= 4;
      }
      v11 = (__int16 *)(v39 + 8 * v40);
      if (v9)
        operator delete(v9);
      v9 = v41;
    }
    else
    {
      *(_QWORD *)v30 = -1;
      v36 = v30 + 4;
    }
    v43 = v26 - 1;
    if (v26 != 1)
    {
      v44 = 0;
      v45 = v26 + 1;
      do
      {
        v46 = *(_DWORD *)&v9[4 * v44];
        v47 = *(_DWORD *)&v9[4 * v45];
        v48 = v46 > v47;
        if (v46 > v47)
          v49 = v44;
        else
          v49 = v44 + 1;
        if (v48)
          v50 = v45 + 1;
        else
          v50 = v45;
        if (v48)
          v51 = v45;
        else
          v51 = v44;
        v52 = *(_DWORD *)&v9[4 * v49];
        v53 = *(_DWORD *)&v9[4 * v50];
        v54 = v52 > v53;
        if (v52 > v53)
          v55 = v50;
        else
          v55 = v49;
        *((_DWORD *)v36 - 2) = *(_DWORD *)&v9[4 * v55] + *(_DWORD *)&v9[4 * v51];
        if (v54)
          v44 = v49;
        else
          v44 = v49 + 1;
        if (v54)
          v45 = v50 + 1;
        else
          v45 = v50;
        *(v36 - 2) = v51;
        *(v36 - 1) = v55;
        if (v36 >= v11)
        {
          v57 = ((char *)v36 - (char *)v9) >> 3;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 61)
            sub_2367C3440();
          if (((char *)v11 - (char *)v9) >> 2 > v58)
            v58 = ((char *)v11 - (char *)v9) >> 2;
          if ((unint64_t)((char *)v11 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
            v59 = (unint64_t)sub_2367CA1FC(v59);
          else
            v60 = 0;
          v61 = (__int16 *)(v59 + 8 * v57);
          v11 = (__int16 *)(v59 + 8 * v60);
          *(_QWORD *)v61 = -1;
          v56 = v61 + 4;
          if (v36 == v9)
            goto LABEL_104;
          do
          {
            v62 = *((_QWORD *)v36 - 1);
            v36 -= 4;
            *((_QWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          while (v36 != v9);
          if (v9)
LABEL_104:
            operator delete(v9);
          v9 = v61;
        }
        else
        {
          *(_QWORD *)v36 = -1;
          v56 = v36 + 4;
        }
        v36 = v56;
        --v43;
      }
      while (v43);
    }
    v4 = a4;
    sub_2368AD74C((uint64_t)&v9[v75 - 4], (uint64_t)v9, (uint64_t)a4, 0);
    v63 = a4;
    v5 = a2;
    if (a2 >= 2)
    {
      v64 = *a4;
      v65 = v71;
      v66 = v72;
      v63 = a4;
      v67 = v72;
      do
      {
        v69 = *v67++;
        v68 = v69;
        v70 = v64 >= v69;
        if (v64 <= v69)
          v64 = v68;
        if (!v70)
          v63 = v66;
        v66 = v67;
        --v65;
      }
      while (v65);
    }
    v25 = 2 * (*v63 <= a3);
    if (v9)
      goto LABEL_115;
LABEL_116:
    v7 *= 2;
  }
  while (!v25);
}

void sub_2368ADC8C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_2368ADCD0(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_2368ADCE4(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      result = (*a3)(a2 - 1, (uint64_t *)result);
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *v9;
        *v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v19 = (char *)a5;
      v20 = a4 >> 1;
      v21 = (uint64_t *)(result + 8 * (a4 >> 1));
      v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_2368ADF48((uint64_t *)result, v21, a3, v22, a5);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (uint64_t)sub_2368ADF48(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        v24 = &v19[8 * a4];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          result = (*a3)(v25, (uint64_t *)v19);
          if ((_DWORD)result)
            v26 = (char *)v25;
          else
            v26 = v19;
          v19 += 8 * (result ^ 1);
          v25 += result;
          *v8++ = *(_QWORD *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v28 = 0;
          do
          {
            v8[v28] = *(_QWORD *)&v19[v28 * 8];
            ++v28;
          }
          while (&v19[v28 * 8] != (char *)v23);
        }
      }
      else
      {
        sub_2368ADCE4(result, v21, a3, v22, a5, a6);
        sub_2368ADCE4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_2368AE150((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t (**)(_QWORD, _QWORD))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v12 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v13 = 0;
        v14 = (uint64_t *)result;
        do
        {
          v15 = v14;
          v14 = v12;
          result = (*a3)(v12, v15);
          if ((_DWORD)result)
          {
            v29 = *v14;
            v16 = v13;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v16 + 8) = *(uint64_t *)((char *)v8 + v16);
              if (!v16)
                break;
              v16 -= 8;
              result = (*a3)(&v29, (uint64_t *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                v17 = (uint64_t *)((char *)v8 + v16 + 8);
                goto LABEL_15;
              }
            }
            v17 = v8;
LABEL_15:
            *v17 = v29;
          }
          v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_2368ADF48(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v19 = &result[a4 >> 1];
      sub_2368ADCE4(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_2368ADCE4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        result = (uint64_t *)(*a3)(v20, v7);
        if ((_DWORD)result)
          v21 = v20;
        else
          v21 = v7;
        v20 += result;
        v7 += result ^ 1;
        *v5++ = *v21;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            v22 = 0;
            do
            {
              v5[v22] = v20[v22];
              ++v22;
            }
            while (&v20[v22] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        v23 = 0;
        do
        {
          v5[v23] = v7[v23];
          ++v23;
        }
        while (&v7[v23] != v19);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14++;
          result = (uint64_t *)(*a3)(v12, v15);
          v16 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v16 = v5;
            if (v15 != v5)
            {
              v17 = v13;
              while (1)
              {
                v16 = (uint64_t *)((char *)v5 + v17);
                result = (uint64_t *)(*a3)(v12, (uint64_t *)((char *)v5 + v17 - 8));
                if (!(_DWORD)result)
                  break;
                *(uint64_t *)((char *)v5 + v17) = *(uint64_t *)((char *)v5 + v17 - 8);
                v17 -= 8;
                if (!v17)
                {
                  v16 = v5;
                  break;
                }
              }
            }
          }
          v18 = *v12++;
          *v16 = v18;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_2368AE150(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, _QWORD *);
  unint64_t v24;
  _QWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const void *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (_QWORD *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = (*a4)(a2, v15);
      if ((result & 1) != 0)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v76 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v65 = *v15;
        *v15 = *a2;
        *a2 = v65;
        return result;
      }
      if (a5 >= 0)
        v22 = a5;
      else
        v22 = a5 + 1;
      v21 = v22 >> 1;
      v19 = &v15[v22 >> 1];
      v18 = a2;
      if (a2 != a3)
      {
        v68 = v10;
        v72 = v22 >> 1;
        v67 = a7;
        v23 = (uint64_t (*)(_QWORD *, _QWORD *))*a4;
        v24 = a3 - a2;
        v18 = a2;
        do
        {
          v25 = &v18[v24 >> 1];
          v26 = v23(v25, v19);
          if (v26)
            v24 += ~(v24 >> 1);
          else
            v24 >>= 1;
          if (v26)
            v18 = v25 + 1;
        }
        while (v24);
        a7 = v67;
        v10 = v68;
        v21 = v72;
      }
      v17 = v18 - a2;
    }
    else
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v17 = v16 >> 1;
      v18 = &a2[v16 >> 1];
      v19 = a2;
      if (a2 != v15)
      {
        v71 = v16 >> 1;
        v20 = a2 - v15;
        v19 = v15;
        do
        {
          if ((*a4)(v18, &v19[v20 >> 1]))
          {
            v20 >>= 1;
          }
          else
          {
            v19 += (v20 >> 1) + 1;
            v20 += ~(v20 >> 1);
          }
        }
        while (v20);
        v17 = v71;
      }
      v21 = v19 - v15;
    }
    if (v19 == a2)
    {
      a2 = v18;
    }
    else
    {
      v27 = a7;
      v28 = (char *)v18 - (char *)a2;
      if (v18 == a2)
      {
        a2 = v19;
      }
      else
      {
        v29 = v19 + 1;
        if (v19 + 1 == a2)
        {
          v69 = v10;
          v73 = *v19;
          v34 = a2;
          v35 = (char *)v18 - (char *)a2;
          v36 = v21;
          v37 = v17;
          memmove(v19, v34, v35);
          v17 = v37;
          v21 = v36;
          a2 = (_QWORD *)((char *)v19 + v28);
          v10 = v69;
          *(_QWORD *)((char *)v19 + v28) = v73;
        }
        else
        {
          v30 = a2 + 1;
          if (a2 + 1 != v18)
          {
            v31 = a2 - v19;
            if (v31 == v28 >> 3)
            {
              a7 = v27;
              a8 = v76;
              do
              {
                v32 = *(v29 - 1);
                *(v29 - 1) = *(v30 - 1);
                *(v30 - 1) = v32;
                if (v29 == a2)
                  break;
                ++v29;
              }
              while (v30++ != v18);
            }
            else
            {
              v44 = v28 >> 3;
              v45 = v28 >> 3;
              v46 = a2 - v19;
              do
              {
                v47 = v46;
                v46 = v45;
                v45 = v47 % v45;
              }
              while (v45);
              a7 = v27;
              a8 = v76;
              if (v46)
              {
                v48 = &v19[v46];
                do
                {
                  v50 = *--v48;
                  v49 = v50;
                  v51 = &v48[v31];
                  v52 = v48;
                  do
                  {
                    v53 = v51;
                    *v52 = *v51;
                    v54 = &v51[v31];
                    v55 = __OFSUB__(v31, v18 - v51);
                    v57 = v31 - (v18 - v51);
                    v56 = (v57 < 0) ^ v55;
                    v51 = &v19[v57];
                    if (v56)
                      v51 = v54;
                    v52 = v53;
                  }
                  while (v51 != v48);
                  *v53 = v49;
                }
                while (v48 != v19);
              }
              a2 = &v19[v44];
            }
            goto LABEL_53;
          }
          v38 = *(v18 - 1);
          a2 = v19 + 1;
          if (v18 - 1 != v19)
          {
            v70 = *(v18 - 1);
            v74 = v21;
            v39 = v17;
            memmove(v19 + 1, v19, (char *)(v18 - 1) - (char *)v19);
            v38 = v70;
            v21 = v74;
            v17 = v39;
          }
          *v19 = v38;
        }
      }
      a7 = v27;
    }
    a8 = v76;
LABEL_53:
    a5 -= v21;
    v10 -= v17;
    if (v21 + v17 >= a5 + v10)
    {
      v75 = v17;
      v40 = v10;
      v41 = a2;
      v42 = a3;
      v43 = v21;
      result = sub_2368AE150(a2, v18, v42, a4, a5, v40, a7, a8);
      a2 = v19;
      a5 = v43;
      a3 = v41;
      v10 = v75;
      if (!v75)
        return result;
    }
    else
    {
      result = sub_2368AE150(v15, v19, a2, a4, v21, v17, a7, a8);
      v15 = a2;
      a2 = v18;
      if (!v10)
        return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v62 = 0;
      do
      {
        *(_QWORD *)&a7[v62 * 8] = v15[v62];
        ++v62;
      }
      while (&v15[v62] != a2);
      v63 = &a7[v62 * 8];
      if (&a7[v62 * 8] != a7)
      {
        while (a2 != a3)
        {
          result = (*a4)(a2, a7);
          if ((_DWORD)result)
            v64 = (char *)a2;
          else
            v64 = a7;
          a2 += result;
          a7 += 8 * (result ^ 1);
          *v15++ = *(_QWORD *)v64;
          if (a7 == v63)
            return result;
        }
        return (uint64_t)memmove(v15, a7, v63 - a7);
      }
    }
  }
  else if (a3 != a2)
  {
    v58 = 0;
    do
    {
      *(_QWORD *)&a7[v58 * 8] = a2[v58];
      ++v58;
    }
    while (&a2[v58] != a3);
    v59 = &a7[v58 * 8];
    if (&a7[v58 * 8] != a7)
    {
      v60 = a3 - 1;
      while (a2 != v15)
      {
        result = (*a4)(v59 - 8, a2 - 1);
        if ((_DWORD)result)
          v61 = (char *)a2;
        else
          v61 = v59;
        if ((_DWORD)result)
          --a2;
        else
          v59 -= 8;
        *v60-- = *((_QWORD *)v61 - 1);
        if (v59 == a7)
          return result;
      }
      v66 = 0;
      do
      {
        v60[v66] = *(_QWORD *)&v59[v66 * 8 - 8];
        --v66;
      }
      while (&v59[v66 * 8] != a7);
    }
  }
  return result;
}

unsigned __int8 *sub_2368AE658(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  unsigned int v12;
  _BYTE v13[32];
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, sizeof(v14));
  if (a2)
  {
    v3 = result;
    v4 = a2;
    do
    {
      v5 = *v3++;
      ++*((_WORD *)v14 + v5);
      --v4;
    }
    while (v4);
  }
  v6 = 0;
  v7 = 0;
  LOWORD(v14[0]) = 0;
  do
  {
    v7 = 2 * (v7 + *(unsigned __int16 *)((char *)v14 + v6));
    *(_WORD *)&v13[v6 + 2] = v7;
    v6 += 2;
  }
  while (v6 != 30);
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = result[i];
      if (result[i])
      {
        v10 = *(_WORD *)&v13[2 * v9];
        *(_WORD *)&v13[2 * v9] = v10 + 1;
        v11 = qword_2369265C0[v10 & 0xF];
        if (v9 >= 5)
        {
          v12 = 4;
          do
          {
            v10 >>= 4;
            v11 = qword_2369265C0[v10] | (16 * v11);
            v12 += 4;
          }
          while (v12 < v9);
        }
        *(_WORD *)(a3 + 2 * i) = v11 >> (-(char)v9 & 3);
      }
    }
  }
  return result;
}

void sub_2368AE774(unint64_t *a1, char *__src, unsigned int *a3, void **a4)
{
  unint64_t v7;
  unint64_t v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  int v28;

  if (*a1)
  {
    v7 = byte_236926677[*a3] * (unint64_t)byte_23692665C[*a3];
    if (*a1 == 1)
    {
      memcpy(*a4, __src, v7 << 8);
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = v7 << 8;
      v12 = 1;
      do
      {
        bzero(a4[v9], v11);
        v13 = *a3;
        v14 = byte_23692665C[v13];
        v16 = a1[3 * v9 + 1];
        v15 = a1[3 * v9 + 2];
        v17 = byte_236926677[v13];
        if (v17 >= v14)
          v18 = byte_23692665C[v13];
        else
          v18 = byte_236926677[v13];
        v19 = v18 * v16;
        if (v18 * v16)
        {
          v20 = 0;
          v21 = 0;
          if (v17 <= v14)
            v22 = v14;
          else
            v22 = v17;
          v23 = v22 * v16;
          v24 = v22 * v12;
          v25 = v18 * v12;
          v26 = 32 * v22;
          do
          {
            if (v23)
            {
              for (i = 0; i != v23; ++i)
              {
                if (v21 >= v25 || i >= v24)
                {
                  v28 = *(_DWORD *)&__src[4 * i + v20];
                  if (v10)
                    v28 -= (v28 + (v28 >> 31) + (v28 >> 31 << v10)) & (-1 << v10);
                  *(_DWORD *)((char *)a4[v9] + 4 * i + v20) = (int)(v28 + (v28 >> 31) + (v28 >> 31 << v15)) >> v15;
                }
              }
            }
            ++v21;
            v20 += v26;
          }
          while (v21 != v19);
        }
        if (!v15)
          v12 = v16;
        ++v9;
        v10 = v15;
      }
      while (v9 < *a1);
    }
  }
}

unsigned int *sub_2368AE91C(unsigned int *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const void *v16;
  char *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;

  v1 = 0;
  v2 = *result;
  v3 = result[1];
  v4 = (v2 + 7) & 0x1FFFFFFF8;
  v5 = (v3 + 7) & 0x1FFFFFFF8;
  do
  {
    v6 = &result[v1];
    *v6 = v4;
    v6[1] = v5;
    v1 += 10;
  }
  while (v1 != 30);
  v7 = 0;
  v8 = *((_QWORD *)result + 2);
  v18 = v3 - v5;
  v19 = result;
  do
  {
    v20 = v7;
    v9 = *(_QWORD *)&result[10 * v7 + 6];
    if ((_DWORD)v3)
    {
      v10 = 0;
      v11 = (_DWORD *)(v9 + 4 * v2);
      do
      {
        if (v2 < v4)
        {
          v12 = v11;
          v13 = v2 - v4;
          do
          {
            *v12++ = *(_DWORD *)(v9 + v8 * v10 + 4 * (v2 - 1));
            v14 = __CFADD__(v13++, 1);
          }
          while (!v14);
        }
        ++v10;
        v11 = (_DWORD *)((char *)v11 + v8);
      }
      while (v10 != v3);
    }
    if (v3 < v5)
    {
      v15 = v18;
      v16 = (const void *)(v9 + v8 * (v3 - 1));
      v17 = (char *)(v9 + v8 * v3);
      do
      {
        memcpy(v17, v16, 4 * v4);
        v17 += v8;
        v14 = __CFADD__(v15++, 1);
      }
      while (!v14);
    }
    result = v19;
    v7 = v20 + 1;
    v5 = (v3 + 7) & 0x1FFFFFFF8;
  }
  while (v20 != 2);
  return result;
}

double sub_2368AEA5C(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  result = sub_2367C431C((uint64_t)v8, ((a3 - 1 + *a2) / a3) + 8, ((a3 - 1 + a2[1]) / a3) + 8);
  if (v10)
  {
    *(_DWORD *)(a1 + 40) = v10;
  }
  else
  {
    v11 = v8[0];
    v12 = v8[1];
    v13 = v9;
    sub_2368AEB14(a2, a3, (uint64_t)&v11);
    *(_DWORD *)(a1 + 40) = 0;
    result = *(double *)&v11;
    v7 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v13;
  }
  return result;
}

unsigned int *sub_2368AEB14(unsigned int *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t i;

  v3 = result[1];
  v4 = (a2 - 1 + *result) / a2;
  *(_DWORD *)a3 = v4;
  *(_DWORD *)(a3 + 4) = (a2 - 1 + v3) / a2;
  v5 = ((a2 - 1 + v3) / a2);
  if (((a2 - 1 + v3) / a2))
  {
    v6 = 0;
    v8 = *((_QWORD *)result + 2);
    v7 = *((_QWORD *)result + 3);
    v9 = v8 >> 2;
    v11 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 24);
    v12 = v8 * a2;
    v13 = 4 * v9;
    do
    {
      if ((_DWORD)v4)
      {
        v14 = 0;
        v15 = 0;
        v16 = result[1];
        v17 = v7;
        do
        {
          v18 = 0;
          v19 = 0;
          v20 = 0.0;
          v21 = v17;
          do
          {
            if (v18 + v6 * a2 >= v16)
              break;
            for (i = 0; i != a2; ++i)
            {
              if (v14 + i >= (unint64_t)*result)
                break;
              v20 = v20 + *(float *)(v21 + 4 * i);
            }
            v19 += i;
            ++v18;
            v21 += v13;
          }
          while (v18 != a2);
          *(float *)(v10 + v11 * v6 + 4 * v15++) = v20 / (float)v19;
          v17 += 4 * a2;
          v14 += a2;
        }
        while (v15 != v4);
      }
      ++v6;
      v7 += v12;
    }
    while (v6 != v5);
  }
  return result;
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x24BEDB100](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB110](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x24BEDB3A8]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x24BEDB3B0]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x24BEDB3C0]();
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x24BEDB460]();
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x24BEDB468](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_2507FD320();
}

void operator delete(void *__p)
{
  off_2507FD328(__p);
}

uint64_t operator delete()
{
  return off_2507FD330();
}

uint64_t operator new[]()
{
  return off_2507FD338();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_2507FD340(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_2507FD348(__sz, a2);
}

uint64_t operator new()
{
  return off_2507FD350();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

int __fpclassifyf(float a1)
{
  return MEMORY[0x24BDAC7F8](a1);
}

uint64_t __memmove_chk()
{
  return MEMORY[0x24BDAC850]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x24BDAC858]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cbrtf(float a1)
{
  float result;

  MEMORY[0x24BDAD338](a1);
  return result;
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE3F0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

tm *__cdecl gmtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAE7B0](a1);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE838](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE840](a1, a2);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAB0](__x);
  return result;
}

float log1pf(float a1)
{
  float result;

  MEMORY[0x24BDAEAC8](a1);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

float modff(float a1, float *a2)
{
  float result;

  MEMORY[0x24BDAEFB8](a2, a1);
  return result;
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

long double remainder(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAFB28](__x, __y);
  return result;
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BDAFB38](__p, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0370](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

