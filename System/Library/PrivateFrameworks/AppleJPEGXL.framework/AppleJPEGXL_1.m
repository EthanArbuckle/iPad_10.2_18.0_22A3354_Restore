void sub_2367B80C4(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  BOOL v19;

  if (*(_DWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 224) = 0;
    v8 = *(_QWORD *)(a1 + 216);
    v9 = *(void **)v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = v10;
    v11 = *(void **)(v8 + 16);
    *(_QWORD *)(a1 + 136) = v11;
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)a1 = a1 + 56;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 44) = 0x16C4362100010DCDLL;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = 0;
    memset(v11, 255, 0x4000000uLL);
    if (!a2)
      goto LABEL_10;
  }
  else
  {
    v9 = *(void **)(a1 + 8);
    if (!a2)
    {
LABEL_10:
      bzero(v9, 0x40000uLL);
      goto LABEL_11;
    }
  }
  if (a3 > 0x800)
    goto LABEL_10;
  if (!a3)
    return;
  v13 = a4;
  v14 = a3;
  do
  {
    v15 = *v13;
    v13 = (uint64_t *)((char *)v13 + 1);
    v16 = (0xBD1E35A7BD000000 * v15) >> 48;
    *((_DWORD *)v9 + v16) = 0;
    *((_DWORD *)v9 + (unsigned __int16)(v16 + 8)) = 0;
    --v14;
  }
  while (v14);
LABEL_11:
  if (a3 >= 0x20)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v18 = *((unsigned __int8 *)a4 + v17) + v18 * *(_DWORD *)(a1 + 44) + 1;
      v19 = v17 >= 0x1C;
      v17 += 4;
    }
    while (!v19);
    *(_DWORD *)(a1 + 16) = v18;
  }
}

void sub_2367B81F4(uint64_t a1, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;

  if (*(_DWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 224) = 0;
    v8 = *(_QWORD *)(a1 + 216);
    v9 = *(_DWORD **)v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = v10;
    v11 = *(void **)(v8 + 16);
    *(_QWORD *)(a1 + 136) = v11;
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)a1 = a1 + 56;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 44) = 0x16C4362100010DCDLL;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = 0;
    memset(v11, 255, 0x4000000uLL);
  }
  else
  {
    v9 = *(_DWORD **)(a1 + 8);
  }
  sub_2367B8060(v9, a2, a3, a4);
  if (a3 >= 0x20)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v14 = *(unsigned __int8 *)(a4 + v13) + v14 * *(_DWORD *)(a1 + 44) + 1;
      v15 = v13 >= 0x1C;
      v13 += 4;
    }
    while (!v15);
    *(_DWORD *)(a1 + 16) = v14;
  }
}

void sub_2367B82DC(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (*(_DWORD *)(a1 + 280))
  {
    *(_DWORD *)(a1 + 280) = 0;
    v8 = *(uint64_t **)(a1 + 272);
    v9 = *v8;
    *(_QWORD *)(a1 + 112) = *v8;
    v10 = v8[1];
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 120) = v10;
    v11 = *(_DWORD *)(a1 + 172);
    v12 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 16) = 64 - v11;
    v13 = *(_DWORD *)(a1 + 184);
    v14 = 0xFFFFFFFFFFFFFFFFLL >> (-8 * *(_BYTE *)(a1 + 180));
    v15 = (void *)v8[2];
    *(_QWORD *)(a1 + 192) = v15;
    v16 = v8[3];
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 200) = v16;
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)a1 = 1 << v11;
    *(_QWORD *)(a1 + 8) = 1 << v12;
    *(_DWORD *)(a1 + 32) = (1 << v12) - 1;
    *(_DWORD *)(a1 + 36) = v12;
    *(_DWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = a1 + 112;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 100) = 0xF1EBF08100010DCDLL;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = 0;
    memset(v15, 255, 0x4000000uLL);
  }
  sub_2367B7ECC((unint64_t *)a1, a2, a3, a4);
  if (a3 >= 0x20)
  {
    v17 = 0;
    v18 = 0;
    do
      v18 = *((unsigned __int8 *)a4 + v17++) + v18 * *(_DWORD *)(a1 + 100) + 1;
    while (v17 != 32);
    *(_DWORD *)(a1 + 72) = v18;
  }
}

uint64_t sub_2367B83F8(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  _WORD *v42;
  unsigned int v43;
  int v44;

  v3 = *(_QWORD *)(result + 1488);
  v4 = *(_QWORD *)(result + 1496) - 1;
  v5 = (unsigned int *)(v3 + 16 * v4);
  v6 = v5 + 1;
  v7 = v5[1] & 0x1FFFFFF;
  if (*(_QWORD *)(result + 1528) - v7 >= (1 << *(_DWORD *)(result + 8)) - 16)
    v8 = (1 << *(_DWORD *)(result + 8)) - 16;
  else
    v8 = *(_QWORD *)(result + 1528) - v7;
  v9 = *(int *)(result + 1536);
  v10 = *((unsigned __int16 *)v5 + 7);
  v11 = v10 & 0x3FF;
  v12 = *(_DWORD *)(result + 68);
  if (v11 >= v12 + 16)
    v11 = v12
        + 16
        + ((v11 - v12 - 16) & ~(-1 << *(_DWORD *)(result + 64)))
        + ((v5[2] + ((((v11 - v12 - 16) >> *(_DWORD *)(result + 64)) & 1 | 2) << (v10 >> 10)) - 4) << *(_DWORD *)(result + 64));
  if (v11 < 0x10 || v11 - 15 == v9)
  {
    v14 = *(_QWORD *)(result + 1472);
    v15 = *(unsigned int *)(result + 1444);
    v16 = v9 >= v8;
    v17 = v9 - v8;
    if (v17 != 0 && v16)
    {
      v18 = *(_QWORD *)(result + 104);
      if (v17 - 1 < v18 && v17 > v7)
      {
        v20 = v18 - v17 + v7;
        v21 = 47;
        do
        {
          v22 = v21;
          v23 = *(_QWORD *)(result + 8 * v21++);
        }
        while (v20 >= v23);
        if (*a2)
        {
          v24 = v22 - 47;
          v25 = result + 8 * v24;
          v26 = *(_QWORD *)(v25 + 368);
          v27 = v23 - v26;
          v28 = *(_QWORD *)(v25 + 240);
          v29 = v20 - v26;
          v30 = *a3;
          do
          {
            if (*(unsigned __int8 *)(v14 + (v30 & v15)) != *(unsigned __int8 *)(v28 + v29))
              break;
            ++*v6;
            --*a2;
            v30 = (*a3 + 1);
            *a3 = v30;
            if (++v29 == v27)
            {
              v31 = v24 + 1;
              if (v24 + 1 == *(_QWORD *)(result + 96))
                break;
              v29 = 0;
              v28 = *(_QWORD *)(result + 8 * v31 + 240);
              v27 = *(_QWORD *)(result + 368 + 8 * v24++ + 16) - *(_QWORD *)(result + 368 + 8 * v31);
            }
          }
          while (*a2);
        }
      }
    }
    else if (*a2)
    {
      v32 = *a3;
      do
      {
        if (*(unsigned __int8 *)(v14 + (v32 & v15)) != *(unsigned __int8 *)(v14
                                                                           + (((_DWORD)v32 - (_DWORD)v9) & v15)))
          break;
        ++*v6;
        --*a2;
        v32 = (*a3 + 1);
        *a3 = v32;
      }
      while (*a2);
    }
    v33 = *v5;
    v34 = (*v6 & 0x1FFFFFFu) + (*v6 >> 25);
    v35 = v10 & 0x3FF;
    if (v33 > 5)
    {
      if (v33 > 0x81)
      {
        if (v33 > 0x841)
        {
          if (v33 >> 1 >= 0xC21)
          {
            if (v33 < 0x5842)
              LOWORD(v33) = 22;
            else
              LOWORD(v33) = 23;
          }
          else
          {
            LOWORD(v33) = 21;
          }
        }
        else
        {
          LODWORD(v33) = (__clz(v33 - 66) ^ 0x1F) + 10;
        }
      }
      else
      {
        v33 -= 2;
        v36 = (__clz(v33) ^ 0x1F) - 1;
        LODWORD(v33) = (v33 >> v36) + 2 * v36 + 2;
      }
    }
    v37 = v3 + 16 * v4;
    if (v34 > 9)
    {
      v39 = (__clz(v34 - 70) ^ 0x1F) + 12;
      if (v34 <= 0x845)
        v40 = v39;
      else
        v40 = 23;
      v41 = (__clz(v34 - 6) ^ 0x1F) - 1;
      v38 = ((unint64_t)(v34 - 6) >> v41) + 2 * v41 + 4;
      if (v34 > 0x85)
        LOWORD(v38) = v40;
    }
    else
    {
      LOWORD(v38) = v34 - 2;
    }
    v42 = (_WORD *)(v37 + 12);
    v43 = v38 & 7 | (8 * (v33 & 7));
    if (v35 || (unsigned __int16)v33 > 7u || (unsigned __int16)v38 > 0xFu)
    {
      v44 = 3 * ((unsigned __int16)v33 >> 3) + ((unsigned __int16)(v38 & 0xFFF8) >> 3);
      v43 = ((((0x520D40u >> (2 * v44)) & 0xC0) + (v44 << 6)) | v43) + 64;
    }
    else if ((v38 & 0xFFF8) != 0)
    {
      LOWORD(v43) = v43 | 0x40;
    }
    *v42 = v43;
  }
  return result;
}

uint64_t sub_2367B872C(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2[14]);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2[15]);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2[17]);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2[19]);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2[20]);
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2[7]);
}

uint64_t sub_2367B8790(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _DWORD v8[16];
  uint64_t v9;

  LODWORD(v4) = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  v8[0] = -1;
  while (1)
  {
    while (1)
    {
      v5 = a1;
      if ((*(__int16 *)(a2 + 8 * a1 + 4) & 0x80000000) == 0)
        break;
      *(_BYTE *)(a3 + *(__int16 *)(a2 + 8 * a1 + 6)) = v4;
      if ((v4 & 0x80000000) != 0)
        return 1;
      while (1)
      {
        a1 = v8[v4];
        if (a1 != -1)
          break;
        v6 = (int)v4 <= 0;
        LODWORD(v4) = v4 - 1;
        if (v6)
          return 1;
      }
      v8[v4] = -1;
    }
    if ((int)v4 >= a4)
      break;
    a1 = *(unsigned __int16 *)(a2 + 8 * a1 + 4);
    v4 = (int)v4 + 1;
    v8[v4] = *(__int16 *)(a2 + 8 * v5 + 6);
  }
  return 0;
}

uint64_t sub_2367B8860(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int i;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;

  v9 = result;
  v45 = a2 - 1;
  v10 = a4 + 8;
  for (i = 1; ; i *= 2)
  {
    v12 = 0;
    if (a2)
      break;
    v16 = -1;
    *(_QWORD *)a4 = -1;
    *(_QWORD *)(a4 + 8) = -1;
    v23 = 1;
LABEL_37:
    v34 = 0;
    v35 = (_QWORD *)(v10 - 8 * v16 + 16 * v12);
    do
    {
      v36 = *(_DWORD *)(a4 + 8 * v34);
      v37 = *(_DWORD *)(a4 + 8 * v23);
      v38 = v36 > v37;
      if (v36 > v37)
        v39 = v34;
      else
        v39 = v34 + 1;
      if (v38)
        v40 = v23 + 1;
      else
        v40 = v23;
      v41 = *(_DWORD *)(a4 + 8 * v39);
      v42 = *(_DWORD *)(a4 + 8 * v40);
      if (!v38)
        v23 = v34;
      v43 = v41 > v42;
      if (v41 > v42)
        v44 = v40;
      else
        v44 = v39;
      *((_DWORD *)v35 - 2) = *(_DWORD *)(a4 + 8 * v44) + *(_DWORD *)(a4 + 8 * v23);
      *((_WORD *)v35 - 2) = v23;
      if (v43)
        v34 = v39;
      else
        v34 = v39 + 1;
      if (v43)
        v23 = v40 + 1;
      else
        v23 = v40;
      *((_WORD *)v35 - 1) = v44;
      *v35++ = -1;
      --v16;
    }
    while (v16);
    result = sub_2367B8790(2 * (int)v12 - 1, a4, a5, a3);
    if ((_DWORD)result)
      return result;
  }
  v13 = v45;
  do
  {
    v14 = *(_DWORD *)(v9 + 4 * v13);
    if (v14)
    {
      if (v14 <= i)
        v14 = i;
      v15 = a4 + 8 * v12;
      *(_DWORD *)v15 = v14;
      ++v12;
      *(_WORD *)(v15 + 4) = -1;
      *(_WORD *)(v15 + 6) = v13;
    }
    --v13;
  }
  while (v13 != -1);
  v16 = v12 - 1;
  if (v12 != 1)
  {
    if (v12 <= 0xC)
    {
      if (v12 >= 2)
      {
        v17 = 0;
        for (j = 1; j != v12; ++j)
        {
          v19 = *(_QWORD *)(a4 + 8 * j);
          v20 = v17;
          v21 = j;
          do
          {
            v22 = *(_DWORD *)(a4 + v20);
            if (v22 == (_DWORD)v19)
            {
              if (*(__int16 *)(a4 + v20 + 6) >= SHIWORD(v19))
                break;
            }
            else if (v22 <= v19)
            {
              break;
            }
            *(_QWORD *)(a4 + 8 * v21) = *(_QWORD *)(a4 + v20);
            v20 -= 8;
            --v21;
          }
          while (v21);
          *(_QWORD *)(a4 + 8 * v21) = v19;
          v17 += 8;
        }
      }
LABEL_36:
      v23 = v12 + 1;
      *(_QWORD *)&v33 = -1;
      *((_QWORD *)&v33 + 1) = -1;
      *(_OWORD *)(a4 + 8 * v12) = v33;
      goto LABEL_37;
    }
    v24 = 2 * (v12 < 0x39);
LABEL_23:
    v25 = qword_23691E4B8[v24];
    if (v25 >= v12)
      goto LABEL_35;
    v26 = 0;
    v27 = qword_23691E4B8[v24];
LABEL_25:
    v28 = *(_QWORD *)(a4 + 8 * v27);
    v29 = v27;
    if (v27 < v25)
      goto LABEL_34;
    v30 = v26;
    v31 = v27;
    while (1)
    {
      v32 = *(_DWORD *)(a4 + v30);
      if (v32 == (_DWORD)v28)
      {
        if (*(__int16 *)(a4 + v30 + 6) >= SHIWORD(v28))
          goto LABEL_33;
      }
      else if (v32 <= v28)
      {
LABEL_33:
        v29 = v31;
LABEL_34:
        *(_QWORD *)(a4 + 8 * v29) = v28;
        ++v27;
        v26 += 8;
        if (v27 == v12)
        {
LABEL_35:
          if (++v24 == 6)
            goto LABEL_36;
          goto LABEL_23;
        }
        goto LABEL_25;
      }
      v29 = v31 - v25;
      *(_QWORD *)(a4 + 8 * v31) = *(_QWORD *)(a4 + v30);
      v30 -= 8 * v25;
      v31 = v29;
      if (v29 < v25)
        goto LABEL_34;
    }
  }
  *(_BYTE *)(a5 + *(__int16 *)(a4 + 6)) = 1;
  return result;
}

void sub_2367B8B04(uint64_t a1, int *a2, char *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v21;
  int *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  unint64_t v31;
  int v32;
  int v33;
  int *v34;
  unsigned int v35;
  uint64_t v36;

  if (a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (a2[v5])
        ++v6;
      ++v5;
    }
    while (a1 != v5);
    if (v6 >= 0x10)
    {
      v7 = a1 - 1;
      while (v7 != -1)
      {
        v8 = v7;
        if (a2[v7--])
        {
          v10 = 0;
          v11 = 0;
          v12 = v8 + 2;
          v13 = v8 + 1;
          v14 = v7 + 3;
          v15 = v7 + 2;
          v16 = 0x40000000;
          do
          {
            v17 = a2[v11];
            if (v16 >= v17)
              v18 = a2[v11];
            else
              v18 = v16;
            if (v17)
            {
              ++v10;
              v16 = v18;
            }
            ++v11;
          }
          while (v15 != v11);
          if (v10 >= 5)
          {
            if (v16 <= 3 && v13 - v10 <= 5 && v8 >= 2)
            {
              v21 = 0;
              do
              {
                if (a2[v21])
                {
                  v22 = &a2[v21];
                  if (!v22[1])
                  {
                    if (v22[2])
                      v22[1] = 1;
                  }
                }
                ++v21;
              }
              while (v7 != v21);
            }
            if (v10 >= 0x1C)
            {
              bzero(a3, v13);
              v23 = 0;
              v24 = 0;
              v25 = *a2;
              do
              {
                if (v15 == v24 || a2[v24] != v25)
                {
                  if (!v25 && v23 > 4 || v25 && v23 > 6)
                    memset(&a3[v24 - v23], 1, v23);
                  if (v15 != v24)
                    v25 = a2[v24];
                  v23 = 1;
                }
                else
                {
                  ++v23;
                }
                ++v24;
              }
              while (v14 != v24);
              v26 = 0;
              v27 = 0;
              v28 = 0;
              v29 = ((a2[1] + *a2 + a2[2]) << 8) / 3u + 420;
              v30 = a2 - 1;
              do
              {
                if (v26 == v13
                  || a3[v26]
                  || v26 && a3[v26 - 1]
                  || (v36 = a2[v26], ((_DWORD)v36 << 8) - v29 - 1240 <= 0xFFFFFFFFFFFFF64FLL))
                {
                  if (v28 > 3 || v28 == 3 && !v27)
                  {
                    v31 = v27 + (v28 >> 1);
                    if (v28 > v31)
                      v32 = 1;
                    else
                      v32 = v31 / v28;
                    if (v27)
                      v33 = v32;
                    else
                      v33 = 0;
                    v34 = v30;
                    do
                    {
                      *v34-- = v33;
                      --v28;
                    }
                    while (v28);
                  }
                  if (v26 >= v13 - 2)
                  {
                    if (v26 >= v13)
                      v35 = 0;
                    else
                      v35 = a2[v26] << 8;
                  }
                  else
                  {
                    v35 = ((a2[v26 + 1] + a2[v26] + a2[v26 + 2]) << 8) / 3u + 420;
                  }
                  v29 = v35;
                  if (v26 == v13)
                    v27 = 0;
                  else
                    v27 = a2[v26];
                  v28 = 1;
                }
                else
                {
                  ++v28;
                  v27 += v36;
                  if (v28 >= 4)
                  {
                    v29 = ((v27 << 8) + (v28 >> 1)) / v28;
                    if (v28 == 4)
                      v29 += 120;
                  }
                }
                ++v26;
                ++v30;
              }
              while (v26 != v12);
            }
          }
          return;
        }
      }
    }
  }
}

unsigned __int8 *sub_2367B8DE8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  unint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  unint64_t j;
  _BYTE v13[32];
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, sizeof(v14));
  if (a2)
  {
    v3 = result;
    v4 = a2;
    do
    {
      v5 = *v3++;
      ++*((_WORD *)v14 + v5);
      --v4;
    }
    while (v4);
  }
  v6 = 0;
  v7 = 0;
  LOWORD(v14[0]) = 0;
  do
  {
    v7 = 2 * (v7 + *(unsigned __int16 *)((char *)v14 + v6));
    *(_WORD *)&v13[v6 + 2] = v7;
    v6 += 2;
  }
  while (v6 != 30);
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = result[i];
      if (result[i])
      {
        v10 = *(_WORD *)&v13[2 * v9];
        *(_WORD *)&v13[2 * v9] = v10 + 1;
        v11 = qword_2369265C0[v10 & 0xF];
        if (v9 >= 5)
        {
          for (j = 4; j < v9; j += 4)
          {
            v10 >>= 4;
            v11 = qword_2369265C0[v10] | (16 * v11);
          }
        }
        *(_WORD *)(a3 + 2 * i) = v11 >> (-(char)v9 & 3);
      }
    }
  }
  return result;
}

uint64_t sub_2367B8F04(uint64_t result, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  v4 = a3 + 16;
  v5 = a2 + 1;
  if (a4)
  {
    if (a3 <= 0x7FFFFFFB)
    {
      v8 = -1;
      v9 = ((2147483644 - a3) >> a2) + 4;
      do
      {
        v10 = v8++;
        v11 = v9 > 3;
        v9 >>= 1;
      }
      while (v11);
      if ((((((2147483644 - a3) >> a2) + 4) >> v8) & 1 | (2 * (v10 + 2))) == 4)
      {
        v6 = a3 + 16;
      }
      else
      {
        v12 = (((((2147483644 - a3) >> a2) + 4) >> v8) & 1 | (2 * (v10 + 2))) - 5;
        v13 = v12 >> 1;
        v14 = (v12 & 1) << ((v12 >> 1) + 1);
        v6 = a3 + ((v12 << a2) | ~(-1 << a2)) + 17;
        a3 = a3 - (-1 << a2) + (((6 << v13) + v14 - 5) << a2);
      }
    }
    else
    {
      v6 = -2147483636;
      a3 = 2147483644;
    }
    v7 = v4 + (62 << v5);
  }
  else
  {
    v7 = v4 + (24 << v5);
    a3 += (1 << (a2 + 26)) + (-1 << (a2 + 2));
    v6 = v7;
  }
  *(_DWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 12) = v6;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t sub_2367B9014(uint64_t a1, uint64_t a2, size_t a3, size_t a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, size_t a9, int a10, unint64_t *a11)
{
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v27;
  unsigned int v28;
  unint64_t *v29;
  unsigned int v30;
  size_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t i;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  _DWORD *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  double v127;
  double v128;
  unsigned int *v129;
  unint64_t v130;
  double v131;
  unsigned int *v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  _DWORD *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int *v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  unsigned int *v174;
  char v175;
  void *v176;
  uint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unsigned int *v196;
  unsigned int *v197;
  unsigned int *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  double v205;
  double v206;
  unsigned int *v207;
  unint64_t v208;
  double v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _DWORD *v217;
  _DWORD *v218;
  unsigned int v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t v231;
  uint64_t *v232;
  size_t v233;
  _QWORD *v234;
  _DWORD *v236;
  _QWORD *v237;
  uint64_t v238;
  int v239[2];
  uint64_t v240;
  void *__b;
  unsigned int *__ba;
  _DWORD *v244;
  unsigned int *v245;
  unsigned int *v247;
  int v248[2];
  double v249;
  __int128 v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;

  v252 = *(_OWORD *)(a5 + 64);
  v253 = *(_QWORD *)(a5 + 80);
  v250 = *(_OWORD *)(a5 + 64);
  v251 = *(_QWORD *)(a5 + 80);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2192);
  if (!v16)
    goto LABEL_246;
  v17 = (void *)v16;
  v18 = 0;
  v19 = 0;
  v236 = (_DWORD *)a5;
  v20 = a5 + 64;
  v21 = a6;
  v22 = 1;
  v23 = v252;
  v24 = 1.0e99;
  v25 = a7;
  do
  {
    if (v18 <= 0xF)
    {
      while (1)
      {
        v249 = 0.0;
        sub_2367B8F04((uint64_t)&v250, v19, v18 << v19, v236[9]);
        if (v18 << v19 == HIDWORD(v23) && v19 == (_DWORD)v23)
          v22 = 0;
        if (!sub_2367BA268(a8, a9, &v252, (uint64_t)&v250, &v249, v17))
          break;
        v27 = v249;
        if (v249 > v24)
          break;
        *(_OWORD *)v20 = v250;
        *(_QWORD *)(v20 + 16) = v251;
        ++v18;
        v24 = v27;
        if (v18 == 16)
        {
          v24 = v27;
          break;
        }
      }
    }
    v28 = v18 - 1;
    if (!v18)
      v28 = 0;
    v18 = v28 >> 1;
    ++v19;
  }
  while (v19 != 4);
  if (v22)
  {
    v249 = 0.0;
    sub_2367BA268(a8, a9, &v252, (uint64_t)&v252, &v249, v17);
    if (v249 < v24)
    {
      *(_OWORD *)v20 = v252;
      *(_QWORD *)(v20 + 16) = v253;
    }
  }
  (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v17);
  if ((_DWORD)v23 == *(_DWORD *)v20)
  {
    v29 = a11;
    if (!a9 || HIDWORD(v23) == v236[17])
      goto LABEL_34;
  }
  else
  {
    v29 = a11;
    if (!a9)
      goto LABEL_34;
  }
  v30 = HIDWORD(v23) + 16;
  v31 = a9;
  v32 = a8 + 8;
  do
  {
    if ((*(_DWORD *)(v32 - 4) & 0x1FFFFFF) != 0 && *(unsigned __int16 *)(v32 + 4) >= 0x80u)
    {
      v33 = *(unsigned __int16 *)(v32 + 6);
      v34 = v33 & 0x3FF;
      if (v34 >= v30)
        v34 = ((v34 - HIDWORD(v23) - 16) & ~(-1 << v23))
            + v30
            + ((((((v34 - HIDWORD(v23) - 16) >> v23) & 1 | 2) << (v33 >> 10)) + *(_DWORD *)v32 - 4) << v23);
      LOWORD(v35) = v34;
      v36 = v236[17];
      v37 = v36 + 16;
      if (v36 + 16 <= (unint64_t)v34)
      {
        v39 = v34 - v36 + (4 << *(_DWORD *)v20) - 16;
        v40 = (__clz(v39) ^ 0x1F) - 1;
        v41 = ((v39 >> v40) & 1 | 2) << v40;
        v35 = ((v39 & ~(-1 << *(_DWORD *)v20))
             + v37
             + ((((v39 >> v40) & 1 | (2 * (v40 - *(_DWORD *)v20))) + 65534) << *(_DWORD *)v20)) | ((v40 - *(_DWORD *)v20) << 10);
        v38 = (v39 - v41) >> *(_DWORD *)v20;
      }
      else
      {
        LODWORD(v38) = 0;
      }
      *(_WORD *)(v32 + 6) = v35;
      *(_DWORD *)v32 = v38;
    }
    v32 += 16;
    --v31;
  }
  while (v31);
LABEL_34:
  v42 = (uint64_t *)(v29 + 12);
  sub_2367A1D7C(a1, a8, a9, a2, a3, a4, (uint64_t)v236, a11, (uint64_t)(v29 + 6), (uint64_t)(v29 + 12));
  v43 = *a11;
  if (v236[8])
  {
    v44 = 0;
    v45 = 1;
    goto LABEL_44;
  }
  if (!v43)
  {
    v44 = 0;
LABEL_43:
    v45 = 64;
    goto LABEL_44;
  }
  v46 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v43);
  if (!v46)
    goto LABEL_246;
  v44 = v46;
  v43 = *a11;
  if (!*a11)
    goto LABEL_43;
  v47 = 0;
  v45 = 64;
  do
  {
    *(_DWORD *)(v46 + 4 * v47++) = a10;
    v43 = *a11;
  }
  while (v47 < *a11);
LABEL_44:
  v48 = v43 * v45;
  *(_QWORD *)v239 = v43 * v45;
  if (v43 * v45)
  {
    v49 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 1040 * v48);
    if (!v49)
      goto LABEL_246;
    v50 = v49;
    v51 = v48;
    v52 = (_QWORD *)v49;
    do
    {
      bzero(v52, 0x408uLL);
      v52[129] = 0x7FF0000000000000;
      v52 += 130;
      --v51;
    }
    while (v51);
    v48 = *(_QWORD *)v239;
  }
  else
  {
    v50 = 0;
  }
  v53 = *v42;
  v54 = 4 * *v42;
  if (v54)
  {
    v55 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 8768 * v53);
    if (!v55)
      goto LABEL_246;
    v238 = v55;
    v56 = (_QWORD *)v55;
    do
    {
      bzero(v56, 0x888uLL);
      v56[273] = 0x7FF0000000000000;
      v56 += 274;
      --v54;
    }
    while (v54);
    v48 = *(_QWORD *)v239;
  }
  else
  {
    v238 = 0;
  }
  v57 = a11;
  v58 = a11[6];
  a11[25] = v58;
  if (v58)
  {
    v59 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 2832 * v58);
    if (!v59)
      goto LABEL_246;
    v60 = (_QWORD *)v59;
    v57 = a11;
    v61 = a11[25];
    a11[24] = v59;
    if (v61)
    {
      do
      {
        bzero(v60, 0xB08uLL);
        v60[353] = 0x7FF0000000000000;
        v60 += 354;
        --v61;
      }
      while (v61);
      v57 = a11;
      v60 = (_QWORD *)a11[24];
      v48 = *(_QWORD *)v239;
    }
  }
  else
  {
    v60 = 0;
    a11[24] = 0;
  }
  v62 = (unsigned int *)v57[3];
  if (v62)
    v63 = *v62;
  else
    v63 = 0;
  v64 = (unsigned int *)v57[9];
  if (v64)
    v65 = *v64;
  else
    v65 = 0;
  v66 = (unsigned int *)v57[15];
  if (v66)
    v67 = *v66;
  else
    v67 = 0;
  if (a9)
  {
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    do
    {
      if (!v65)
      {
        ++v72;
        v71 = *(unsigned __int8 *)(a11[8] + v72);
        v65 = v64[v72];
      }
      v75 = (unsigned int *)(a8 + 16 * v68);
      v76 = &v60[354 * v71];
      v77 = *((unsigned __int16 *)v75 + 6);
      ++*((_DWORD *)v76 + *((unsigned __int16 *)v75 + 6));
      ++v76[352];
      v78 = *v75;
      if ((_DWORD)v78)
      {
        do
        {
          v79 = v21;
          if (!v63)
          {
            ++v74;
            v73 = *(unsigned __int8 *)(a11[2] + v74);
            v63 = v62[v74];
          }
          v80 = v73;
          if (v44)
          {
            v81 = (char *)&unk_236924C88 + (*(_DWORD *)(v44 + 4 * v73) << 9);
            v80 = (v73 << 6) + (v81[v25 + 256] | v81[v79]);
          }
          v82 = v50 + 1040 * v80;
          --v63;
          ++*(_DWORD *)(v82 + 4 * *(unsigned __int8 *)(a2 + (a3 & a4)));
          ++*(_QWORD *)(v82 + 1024);
          v21 = *(unsigned __int8 *)(a2 + (a3++ & a4));
          v25 = v79;
          --v78;
        }
        while (v78);
      }
      else
      {
        v79 = v25;
      }
      v83 = *(_DWORD *)(a8 + 16 * v68 + 4) & 0x1FFFFFF;
      a3 += v83;
      if ((_DWORD)v83)
      {
        v79 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a4));
        v21 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a4));
        if (v77 >= 0x80)
        {
          if (!v67)
          {
            ++v70;
            v69 = *(unsigned __int8 *)(a11[14] + v70);
            v67 = v66[v70];
          }
          --v67;
          v84 = v77 >> 6;
          v87 = v77 >> 6 != 2 && v84 != 4 && v84 != 7 || (v77 & 7) >= 3;
          v88 = 3;
          if (!v87)
            v88 = v77 & 7;
          v89 = v238 + 2192 * (v88 | (4 * v69));
          v90 = *(_WORD *)(a8 + 16 * v68 + 14) & 0x3FF;
          ++*(_DWORD *)(v89 + 4 * v90);
          ++*(_QWORD *)(v89 + 2176);
        }
      }
      --v65;
      ++v68;
      v25 = v79;
      v48 = *(_QWORD *)v239;
    }
    while (v68 != a9);
  }
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v44);
  v91 = a11;
  v92 = *a11;
  v93 = *a11 << 6;
  a11[19] = v93;
  if (v93)
  {
    v94 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v92 << 8);
    if (!v94)
      goto LABEL_246;
    v91 = a11;
    v95 = a11[19];
    a11[23] = v95;
    v96 = a11 + 23;
    a11[18] = v94;
    v97 = (uint64_t *)(a11 + 18);
    if (v95)
    {
      v98 = (*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 1040 * v95);
      if (!v98)
        goto LABEL_246;
      v99 = v98;
      v94 = *v97;
      v91 = a11;
    }
    else
    {
      v99 = 0;
    }
  }
  else
  {
    v94 = 0;
    v99 = 0;
    a11[18] = 0;
    v97 = (uint64_t *)(a11 + 18);
    a11[23] = 0;
    v96 = a11 + 23;
  }
  v244 = (_DWORD *)v94;
  v91[22] = v99;
  if (v48)
  {
    __b = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v48);
    if (!__b)
      goto LABEL_246;
    v247 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v48);
    if (!v247)
      goto LABEL_246;
  }
  else
  {
    __b = 0;
    v247 = 0;
  }
  v100 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 49176);
  if (!v100)
    goto LABEL_246;
  v101 = (unsigned int *)v100;
  v102 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 1040);
  if (!v102)
    goto LABEL_246;
  v103 = (char *)v102;
  v233 = 4 * v48;
  v234 = v96;
  v232 = v97;
  if (v48)
  {
    memset_pattern16(__b, &unk_2368AFB20, 4 * v48);
    v104 = 0;
    for (i = 0; i != v48; ++i)
    {
      memcpy((void *)(v99 + v104), (const void *)(v50 + v104), 0x410uLL);
      sub_2367A11A8(v50 + v104);
      *(_QWORD *)(v99 + v104 + 1032) = v106;
      v244[i] = i;
      v104 += 1040;
    }
    v107 = 0;
    v108 = 0;
    v109 = v48;
    do
    {
      v110 = v109 - 64;
      if (v109 >= 0x40)
        v109 = 64;
      if (v48 - v107 >= 0x40)
        v111 = 64;
      else
        v111 = v48 - v107;
      if (v111)
      {
        v112 = 0;
        do
        {
          v247[v108 + v112] = v107 + v112;
          ++v112;
        }
        while (v109 != v112);
        v113 = sub_2367A8858(v99, v103, (uint64_t)__b, &v244[v107], &v247[v108], v101, v111, v111, 0x100uLL, 0x800uLL);
      }
      else
      {
        v113 = 0;
      }
      v108 += v113;
      v107 += 64;
      v109 = v110;
    }
    while (v107 < v48);
  }
  else
  {
    v108 = 0;
  }
  if (v108 << 6 >= (v108 >> 1) * v108)
    v114 = (v108 >> 1) * v108;
  else
    v114 = v108 << 6;
  if (v114 < 0x800)
  {
    v117 = a1;
  }
  else
  {
    v115 = 2048;
    do
    {
      v116 = v115;
      v115 *= 2;
    }
    while (v116 <= v114);
    v117 = a1;
    v118 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 24 * v116);
    if (!v118)
      goto LABEL_246;
    v119 = v118;
    memcpy(v118, v101, 0xC000uLL);
    (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v101);
    v101 = v119;
  }
  v231 = v114;
  v120 = v244;
  v121 = sub_2367A8858(v99, v103, (uint64_t)__b, v244, v247, v101, v108, v48, 0x100uLL, v231);
  v122 = v48;
  v123 = v121;
  (*(void (**)(_QWORD, unsigned int *))(v117 + 8))(*(_QWORD *)(v117 + 16), v101);
  (*(void (**)(_QWORD, void *))(v117 + 8))(*(_QWORD *)(v117 + 16), __b);
  if (v122)
  {
    v124 = 0;
    do
    {
      v125 = v124 - 1;
      if (!v124)
        v125 = 0;
      v126 = v120[v125];
      v127 = sub_2367A8B2C((_QWORD *)(v50 + 1040 * v124), v99 + 1040 * v126, v103);
      if (v123)
      {
        v128 = v127;
        v129 = v247;
        v130 = v123;
        do
        {
          v131 = sub_2367A8B2C((_QWORD *)(v50 + 1040 * v124), v99 + 1040 * *v129, v103);
          if (v131 < v128)
          {
            v126 = *v129;
            v128 = v131;
          }
          ++v129;
          --v130;
        }
        while (v130);
      }
      v120 = v244;
      v244[v124++] = v126;
    }
    while (v124 != *(_QWORD *)v239);
  }
  if (v123)
  {
    v132 = v247;
    do
    {
      v133 = *v132++;
      bzero((void *)(v99 + 1040 * v133), 0x408uLL);
      *(_QWORD *)(v99 + 1040 * v133 + 1032) = 0x7FF0000000000000;
      --v123;
    }
    while (v123);
  }
  v134 = *(_QWORD *)v239;
  if (*(_QWORD *)v239)
  {
    v135 = 0;
    v136 = v50;
    do
    {
      v137 = 0;
      v138 = v99 + 1040 * v244[v135];
      *(_QWORD *)(v138 + 1024) += *(_QWORD *)(v50 + 1040 * v135 + 1024);
      do
      {
        *(_DWORD *)(v138 + v137) += *(_DWORD *)(v136 + v137);
        v137 += 4;
      }
      while (v137 != 1024);
      ++v135;
      v136 += 1040;
    }
    while (v135 != *(_QWORD *)v239);
    v139 = a1;
    (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v103);
    (*(void (**)(_QWORD, unsigned int *))(v139 + 8))(*(_QWORD *)(v139 + 16), v247);
    v140 = (_DWORD *)(*(uint64_t (**)(_QWORD, size_t))a1)(*(_QWORD *)(a1 + 16), v233);
    if (!v140)
      goto LABEL_246;
    v141 = v140;
    memset(v140, 255, v233);
    v142 = 0;
    v143 = v244;
    v144 = v244;
    v145 = *(_QWORD *)v239;
    do
    {
      v147 = *v144++;
      v146 = v147;
      if (v141[v147] == -1)
        v141[v146] = v142++;
      --v145;
    }
    while (v145);
    if (v142)
    {
      v148 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 1040 * v142);
      v143 = v244;
      v149 = v148;
      if (!v148)
        goto LABEL_246;
    }
    else
    {
      v149 = 0;
    }
    v151 = 0;
    do
    {
      v152 = *v143;
      v153 = v141[v152];
      if (v153 == v151)
      {
        v154 = v143;
        memcpy((void *)(v149 + 1040 * v151), (const void *)(v99 + 1040 * v152), 0x410uLL);
        v143 = v154;
        ++v151;
        v153 = v141[*v154];
      }
      *v143++ = v153;
      --v134;
    }
    while (v134);
    (*(void (**)(_QWORD, _DWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v141);
    if (v151)
    {
      v155 = 0;
      v150 = v151;
      v156 = 1040 * v151;
      do
      {
        memcpy((void *)(v99 + v155), (const void *)(v149 + v155), 0x410uLL);
        v155 += 1040;
      }
      while (v156 != v155);
    }
    else
    {
      v150 = 0;
    }
  }
  else
  {
    v139 = a1;
    (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v103);
    (*(void (**)(_QWORD, unsigned int *))(v139 + 8))(*(_QWORD *)(v139 + 16), v247);
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), 0);
    v150 = 0;
    v149 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(v139 + 8))(*(_QWORD *)(v139 + 16), v149);
  *v234 = v150;
  (*(void (**)(_QWORD, uint64_t))(v139 + 8))(*(_QWORD *)(v139 + 16), v50);
  v157 = a11;
  if (v236[8])
  {
    v158 = *a11;
    if (*a11)
    {
      v159 = *v232;
      v160 = *v232 + (v158 << 8);
      do
      {
        --v158;
        v161 = -256;
        do
        {
          *(_DWORD *)(v160 + v161) = *(_DWORD *)(v159 + 4 * v158);
          v161 += 4;
        }
        while (v161);
        v160 -= 256;
      }
      while (v158);
    }
  }
  v162 = a11[12];
  a11[21] = 4 * v162;
  if (!(4 * v162))
  {
    v164 = 0;
    a11[27] = 0;
    v166 = a11 + 27;
    a11[20] = 0;
LABEL_192:
    v168 = 0;
    *(_QWORD *)v248 = 0;
    v176 = 0;
    v174 = 0;
    v157[26] = 0;
LABEL_193:
    v175 = 1;
    goto LABEL_194;
  }
  v163 = (*(uint64_t (**)(_QWORD, unint64_t))v139)(*(_QWORD *)(v139 + 16), 16 * v162);
  if (!v163)
    goto LABEL_246;
  v164 = (unsigned int *)v163;
  v157 = a11;
  v165 = a11[21];
  a11[27] = v165;
  v166 = a11 + 27;
  a11[20] = v163;
  if (!v165)
    goto LABEL_192;
  v167 = (*(uint64_t (**)(_QWORD, unint64_t))v139)(*(_QWORD *)(v139 + 16), 2192 * v165);
  if (!v167)
    goto LABEL_246;
  v168 = v167;
  v164 = (unsigned int *)a11[20];
  v169 = a11[21];
  a11[26] = v167;
  if (!v169)
  {
    *(_QWORD *)v248 = 0;
    v176 = 0;
    v174 = 0;
    goto LABEL_193;
  }
  *(_QWORD *)v248 = v169;
  v170 = 4 * v169;
  v171 = (*(uint64_t (**)(_QWORD, unint64_t))v139)(*(_QWORD *)(v139 + 16), 4 * v169);
  if (!v171)
    goto LABEL_246;
  v172 = (void *)v171;
  v173 = (*(uint64_t (**)(_QWORD, uint64_t))v139)(*(_QWORD *)(v139 + 16), v170);
  if (!v173)
    goto LABEL_246;
  v174 = (unsigned int *)v173;
  v175 = 0;
  v176 = v172;
LABEL_194:
  v177 = (*(uint64_t (**)(_QWORD, uint64_t))v139)(*(_QWORD *)(v139 + 16), 49176);
  if (!v177)
    goto LABEL_246;
  v178 = (unsigned int *)v177;
  v179 = (*(uint64_t (**)(_QWORD, uint64_t))v139)(*(_QWORD *)(v139 + 16), 2192);
  if (!v179)
    goto LABEL_246;
  v180 = (char *)v179;
  v237 = v166;
  v240 = (uint64_t)v176;
  __ba = v178;
  v245 = v174;
  if ((v175 & 1) != 0)
  {
    v181 = 0;
    v182 = *(_QWORD *)v248;
  }
  else
  {
    memset_pattern16(v176, &unk_2368AFB20, 4 * *(_QWORD *)v248);
    v183 = 0;
    v184 = 0;
    do
    {
      memcpy((void *)(v168 + v183), (const void *)(v238 + v183), 0x890uLL);
      sub_2367A1988(v238 + v183);
      *(_QWORD *)(v168 + v183 + 2184) = v185;
      v164[v184] = v184;
      ++v184;
      v183 += 2192;
    }
    while (*(_QWORD *)v248 != v184);
    v186 = 0;
    v181 = 0;
    v187 = *(_QWORD *)v248;
    v182 = *(_QWORD *)v248;
    do
    {
      v188 = v187 - 64;
      if (v187 >= 0x40)
        v187 = 64;
      if (*(_QWORD *)v248 - v186 >= 0x40)
        v189 = 64;
      else
        v189 = *(_QWORD *)v248 - v186;
      if (v189)
      {
        v190 = 0;
        do
        {
          v174[v181 + v190] = v186 + v190;
          ++v190;
        }
        while (v187 != v190);
        v191 = sub_2367A9370(v168, v180, v240, &v164[v186], &v174[v181], __ba, v189, v189, 0x100uLL, 0x800uLL);
      }
      else
      {
        v191 = 0;
      }
      v181 += v191;
      v186 += 64;
      v187 = v188;
    }
    while (v186 < *(_QWORD *)v248);
  }
  if (v181 << 6 >= (v181 >> 1) * v181)
    v192 = (v181 >> 1) * v181;
  else
    v192 = v181 << 6;
  if (v192 < 0x800)
  {
    v194 = a1;
    v198 = __ba;
  }
  else
  {
    v193 = 2048;
    v194 = a1;
    do
    {
      v195 = v193;
      v193 *= 2;
    }
    while (v195 <= v192);
    v196 = (unsigned int *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 24 * v195);
    if (!v196)
      goto LABEL_246;
    v197 = v196;
    memcpy(v196, __ba, 0xC000uLL);
    (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), __ba);
    v198 = v197;
  }
  v199 = sub_2367A9370(v168, v180, v240, v164, v174, v198, v181, v182, 0x100uLL, v192);
  v200 = v182;
  v201 = v199;
  (*(void (**)(_QWORD, unsigned int *))(v194 + 8))(*(_QWORD *)(v194 + 16), v198);
  (*(void (**)(_QWORD, uint64_t))(v194 + 8))(*(_QWORD *)(v194 + 16), v240);
  if (v200)
  {
    v202 = 0;
    do
    {
      v203 = v202 - 1;
      if (!v202)
        v203 = 0;
      v204 = v164[v203];
      v205 = sub_2367A9644((_QWORD *)(v238 + 2192 * v202), v168 + 2192 * v204, v180);
      if (v201)
      {
        v206 = v205;
        v207 = v245;
        v208 = v201;
        do
        {
          v209 = sub_2367A9644((_QWORD *)(v238 + 2192 * v202), v168 + 2192 * *v207, v180);
          if (v209 < v206)
          {
            v204 = *v207;
            v206 = v209;
          }
          ++v207;
          --v208;
        }
        while (v208);
      }
      v164[v202++] = v204;
    }
    while (v202 != *(_QWORD *)v248);
  }
  if (v201)
  {
    v210 = v245;
    do
    {
      v211 = *v210++;
      bzero((void *)(v168 + 2192 * v211), 0x888uLL);
      *(_QWORD *)(v168 + 2192 * v211 + 2184) = 0x7FF0000000000000;
      --v201;
    }
    while (v201);
  }
  v212 = *(_QWORD *)v248;
  if (!*(_QWORD *)v248)
  {
    (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v180);
    (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v245);
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), 0);
    v225 = 0;
    v224 = 0;
    goto LABEL_259;
  }
  v213 = 0;
  v214 = v238;
  do
  {
    v215 = 0;
    v216 = v168 + 2192 * v164[v213];
    *(_QWORD *)(v216 + 2176) += *(_QWORD *)(v238 + 2192 * v213 + 2176);
    do
    {
      *(_DWORD *)(v216 + v215) += *(_DWORD *)(v214 + v215);
      v215 += 4;
    }
    while (v215 != 2176);
    ++v213;
    v214 += 2192;
  }
  while (v213 != *(_QWORD *)v248);
  (*(void (**)(_QWORD, char *))(a1 + 8))(*(_QWORD *)(a1 + 16), v180);
  (*(void (**)(_QWORD, unsigned int *))(a1 + 8))(*(_QWORD *)(a1 + 16), v245);
  v217 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * *(_QWORD *)v248);
  if (!v217)
LABEL_246:
    exit(1);
  v218 = v217;
  memset(v217, 255, 4 * *(_QWORD *)v248);
  v219 = 0;
  v220 = v164;
  v221 = *(_QWORD *)v248;
  do
  {
    v223 = *v220++;
    v222 = v223;
    if (v218[v223] == -1)
      v218[v222] = v219++;
    --v221;
  }
  while (v221);
  if (v219)
  {
    v224 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2192 * v219);
    if (!v224)
      goto LABEL_246;
  }
  else
  {
    v224 = 0;
  }
  v226 = 0;
  do
  {
    v227 = *v164;
    v228 = v218[v227];
    if (v228 == v226)
    {
      memcpy((void *)(v224 + 2192 * v226++), (const void *)(v168 + 2192 * v227), 0x890uLL);
      v228 = v218[*v164];
    }
    *v164++ = v228;
    --v212;
  }
  while (v212);
  (*(void (**)(_QWORD, _DWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v218);
  if (v226)
  {
    v229 = 0;
    v225 = v226;
    do
    {
      memcpy((void *)(v168 + v229), (const void *)(v224 + v229), 0x890uLL);
      v229 += 2192;
    }
    while (2192 * v226 != v229);
  }
  else
  {
    v225 = 0;
  }
LABEL_259:
  (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v224);
  *v237 = v225;
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), v238);
}

uint64_t sub_2367BA268(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, double *a5, void *a6)
{
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  double v23;

  bzero(a6, 0x888uLL);
  *((_QWORD *)a6 + 273) = 0x7FF0000000000000;
  if (*a3 == *(_DWORD *)a4)
  {
    v12 = a3[1] != *(_DWORD *)(a4 + 4);
    if (a2)
    {
LABEL_3:
      v13 = 0;
      v14 = a1 + 8;
      v15 = 0.0;
      while (1)
      {
        if ((*(_DWORD *)(v14 - 4) & 0x1FFFFFF) != 0 && *(unsigned __int16 *)(v14 + 4) >= 0x80u)
        {
          v16 = *(unsigned __int16 *)(v14 + 6);
          if (v12)
          {
            v17 = v16 & 0x3FF;
            v18 = a3[1];
            if (v17 >= v18 + 16)
              v17 = v18
                  + 16
                  + ((v17 - v18 - 16) & ~(-1 << *a3))
                  + ((*(_DWORD *)v14 + ((((v17 - v18 - 16) >> *a3) & 1 | 2) << (v16 >> 10)) - 4) << *a3);
            if (*(_QWORD *)(a4 + 16) < (unint64_t)v17)
              return 0;
            v19 = *(unsigned int *)(a4 + 4);
            v20 = v19 + 16;
            if (v19 + 16 <= (unint64_t)v17)
            {
              v21 = v17 - v19 + (4 << *(_DWORD *)a4) - 16;
              v22 = (__clz(v21) ^ 0x1F) - 1;
              v16 = ((v21 & ~(-1 << *(_DWORD *)a4))
                   + v20
                   + ((((v21 >> v22) & 1 | (2 * (v22 - *(_DWORD *)a4))) + 65534) << *(_DWORD *)a4)) | ((v22 - *(_DWORD *)a4) << 10);
            }
            else
            {
              LOWORD(v16) = v17;
            }
          }
          ++*((_DWORD *)a6 + (v16 & 0x3FF));
          *((_QWORD *)a6 + 272) = ++v13;
          v15 = v15 + (double)((unsigned __int16)v16 >> 10);
        }
        v14 += 16;
        if (!--a2)
          goto LABEL_18;
      }
    }
  }
  else
  {
    v12 = 1;
    if (a2)
      goto LABEL_3;
  }
  v15 = 0.0;
LABEL_18:
  sub_2367A1988((uint64_t)a6);
  *a5 = v15 + v23;
  return 1;
}

uint64_t sub_2367BA440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t a9, unsigned int *a10, unint64_t a11, uint64_t *a12)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t i;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t j;
  uint64_t k;
  unint64_t v86;
  double *v87;
  double *v88;
  __int16 v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  double *v99;

  v18 = a12;
  v19 = (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 12488);
  if (!v19)
    goto LABEL_86;
  v20 = v19;
  v97 = a1;
  if (a8 == 1)
  {
    if (a11)
    {
      v21 = 0;
      v22 = a10;
      v23 = a11;
      do
      {
        v24 = *v22;
        v22 += 4;
        v21 += v24;
        --v23;
      }
      while (v23);
      v25 = v21 >> 9;
    }
    else
    {
      v25 = 0;
    }
    v31 = a12 + 23;
    v32 = v25 + 1;
    *(_OWORD *)v19 = xmmword_2368AF460;
    *(_QWORD *)(v19 + 16) = 0x4079000000000000;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = a12;
    *(_QWORD *)(v19 + 48) = a12 + 23;
    *(_QWORD *)(v19 + 2136) = 512;
    *(_QWORD *)(v19 + 2192) = 0;
    *(_OWORD *)(v19 + 2144) = 0u;
    v33 = a12[4];
    if (v33 <= v25)
    {
      if (!v33)
        v33 = v25 + 1;
      do
      {
        v34 = v33;
        v33 *= 2;
      }
      while (v34 <= v25);
      v35 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v34);
      if (!v35)
        goto LABEL_86;
      v36 = (uint64_t)v35;
      v37 = a12[4];
      if (v37)
        memcpy(v35, (const void *)a12[2], v37);
      (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a12[2]);
      a12[2] = v36;
      a12[4] = v34;
      v31 = a12 + 23;
    }
    v38 = a12[5];
    if (v38 <= v25)
    {
      if (!v38)
        v38 = v25 + 1;
      do
      {
        v39 = v38;
        v38 *= 2;
      }
      while (v39 <= v25);
      v40 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v39);
      if (!v40)
        goto LABEL_86;
      v41 = (uint64_t)v40;
      v42 = a12[5];
      if (v42)
        memcpy(v40, (const void *)a12[3], 4 * v42);
      (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a12[3]);
      a12[3] = v41;
      a12[5] = v39;
      v18 = a12;
      v31 = a12 + 23;
    }
    v43 = 257;
    if (v32 < 0x101)
      v43 = v25 + 1;
    *(_QWORD *)(*(_QWORD *)(v20 + 32) + 8) = v32;
    *v31 = v43;
    v44 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 1040 * v43);
    if (v44)
    {
      v45 = v44;
      v18[22] = v44;
      *(_QWORD *)(v20 + 40) = v44;
      bzero(v44, 0x408uLL);
      v45[129] = 0x7FF0000000000000;
      *(_OWORD *)(v20 + 2160) = 0u;
      v99 = (double *)(v20 + 2200);
      sub_2367BAB98(a1, v20 + 2200, a11, (uint64_t)(v18 + 6), v18 + 24, v18 + 25);
      v95 = (double *)(v20 + 7984);
      sub_2367BAD48(a1, v20 + 7984, a11, (uint64_t)(v18 + 12), v18 + 26, v18 + 27);
      if (a11)
      {
        for (i = 0; i != a11; ++i)
        {
          v47 = &a10[4 * i];
          v48 = *v47;
          v49 = v47[1];
          v50 = *((unsigned __int16 *)v47 + 6);
          v51 = *((_WORD *)v47 + 7);
          sub_2367BAEF4((uint64_t)v99, *((unsigned __int16 *)v47 + 6));
          if ((_DWORD)v48)
          {
            do
            {
              v52 = *(_QWORD *)(v20 + 40) + 1040 * *(_QWORD *)(v20 + 2152);
              ++*(_DWORD *)(v52 + 4 * *(unsigned __int8 *)(a2 + (a3 & a4)));
              ++*(_QWORD *)(v52 + 1024);
              v53 = *(_QWORD *)(v20 + 2144) + 1;
              *(_QWORD *)(v20 + 2144) = v53;
              if (v53 == *(_QWORD *)(v20 + 2136))
                sub_2367BAF8C((double *)v20, 0);
              ++a3;
              --v48;
            }
            while (v48);
          }
          if ((v49 & 0x1FFFFFF) != 0 && v50 >= 0x80)
            sub_2367BAF40((uint64_t)v95, v51 & 0x3FF);
          a3 += v49 & 0x1FFFFFF;
        }
      }
      sub_2367BAF8C((double *)v20, 1);
      sub_2367BB560(v99, 1);
      sub_2367BBB3C(v95, 1);
      v54 = v97;
      return (*(uint64_t (**)(_QWORD, uint64_t))(v54 + 8))(*(_QWORD *)(v54 + 16), v20);
    }
LABEL_86:
    exit(1);
  }
  v90 = a6;
  if (a11)
  {
    v26 = 0;
    v27 = a10;
    v28 = a11;
    do
    {
      v29 = *v27;
      v27 += 4;
      v26 += v29;
      --v28;
    }
    while (v28);
    v30 = v26 >> 9;
  }
  else
  {
    v30 = 0;
  }
  v55 = a12;
  *(_QWORD *)v19 = 256;
  *(_QWORD *)(v19 + 8) = a8;
  *(_QWORD *)(v19 + 16) = 0x100 / a8;
  *(_QWORD *)(v19 + 24) = 512;
  *(_QWORD *)(v19 + 32) = 0x4079000000000000;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = a12;
  *(_QWORD *)(v19 + 64) = a12 + 23;
  *(_QWORD *)(v19 + 72) = 512;
  *(_QWORD *)(v19 + 320) = 0;
  if (v30 + 1 >= 0x100 / a8 + 1)
    v56 = 0x100 / a8 + 1;
  else
    v56 = v30 + 1;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  v57 = a12[4];
  v86 = a8;
  v92 = v56;
  if (v57 <= v30)
  {
    if (!v57)
      v57 = v30 + 1;
    do
    {
      v58 = v57;
      v57 *= 2;
    }
    while (v58 <= v30);
    v59 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v58);
    if (!v59)
      goto LABEL_86;
    v60 = (uint64_t)v59;
    v55 = a12;
    v61 = a12[4];
    if (v61)
      memcpy(v59, (const void *)a12[2], v61);
    (*(void (**)(_QWORD, uint64_t))(v97 + 8))(*(_QWORD *)(v97 + 16), a12[2]);
    a12[2] = v60;
    a12[4] = v58;
    a8 = v86;
    v56 = v92;
  }
  v62 = v55[5];
  if (v62 <= v30)
  {
    if (!v62)
      v62 = v30 + 1;
    do
    {
      v63 = v62;
      v62 *= 2;
    }
    while (v63 <= v30);
    v64 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))v97)(*(_QWORD *)(v97 + 16), 4 * v63);
    if (!v64)
      goto LABEL_86;
    v65 = (uint64_t)v64;
    v55 = a12;
    v66 = a12[5];
    if (v66)
      memcpy(v64, (const void *)a12[3], 4 * v66);
    (*(void (**)(_QWORD, uint64_t))(v97 + 8))(*(_QWORD *)(v97 + 16), a12[3]);
    a12[3] = v65;
    a12[5] = v63;
    a8 = v86;
    v56 = v92;
  }
  v55[1] = v30 + 1;
  v55[23] = v56 * a8;
  v67 = v55;
  if (a8)
  {
    a8 = (*(uint64_t (**)(_QWORD, unint64_t))v97)(*(_QWORD *)(v97 + 16), 1040 * v56 * a8);
    if (!a8)
      goto LABEL_86;
  }
  v68 = a5;
  v67[22] = a8;
  *(_QWORD *)(v20 + 56) = a8;
  v69 = v86;
  v70 = v90;
  do
  {
    bzero((void *)a8, 0x408uLL);
    *(_QWORD *)(a8 + 1032) = 0x7FF0000000000000;
    a8 += 1040;
    --v69;
  }
  while (v69);
  *(_QWORD *)(v20 + 96) = 0;
  *(_QWORD *)(v20 + 104) = 0;
  v88 = (double *)(v20 + 2200);
  sub_2367BAB98(v97, v20 + 2200, a11, (uint64_t)(a12 + 6), a12 + 24, a12 + 25);
  v87 = (double *)(v20 + 7984);
  sub_2367BAD48(v97, v20 + 7984, a11, (uint64_t)(a12 + 12), a12 + 26, a12 + 27);
  if (a11)
  {
    v71 = 0;
    do
    {
      v96 = v71;
      v72 = &a10[4 * v71];
      v73 = *v72;
      v89 = *((_WORD *)v72 + 7);
      v91 = *((unsigned __int16 *)v72 + 6);
      v93 = v72[1];
      sub_2367BAEF4((uint64_t)v88, v91);
      if ((_DWORD)v73)
      {
        do
        {
          v74 = *(_BYTE *)(a7 + 256 + v70);
          v70 = v68;
          v68 = *(unsigned __int8 *)(a2 + (a3 & a4));
          v75 = *(_QWORD *)(v20 + 56)
              + 1040
              * (*(_QWORD *)(v20 + 88) + *(unsigned int *)(a9 + 4 * (v74 | *(_BYTE *)(a7 + v70))));
          ++*(_DWORD *)(v75 + 4 * v68);
          ++*(_QWORD *)(v75 + 1024);
          v76 = *(_QWORD *)(v20 + 72);
          v77 = *(_QWORD *)(v20 + 80) + 1;
          *(_QWORD *)(v20 + 80) = v77;
          if (v77 == v76)
            sub_2367BC118((_QWORD *)v20, v97, 0);
          ++a3;
          --v73;
        }
        while (v73);
      }
      v78 = v93 & 0x1FFFFFF;
      a3 += v78;
      if ((_DWORD)v78)
      {
        v70 = *(unsigned __int8 *)(a2 + ((a3 - 2) & a4));
        v68 = *(unsigned __int8 *)(a2 + ((a3 - 1) & a4));
        if (v91 >= 0x80)
          sub_2367BAF40((uint64_t)v87, v89 & 0x3FF);
      }
      v71 = v96 + 1;
    }
    while (v96 + 1 != a11);
  }
  v54 = v97;
  sub_2367BC118((_QWORD *)v20, v97, 1);
  sub_2367BB560(v88, 1);
  sub_2367BBB3C(v87, 1);
  v79 = *a12;
  v80 = *a12 << 6;
  a12[19] = v80;
  if (v80)
  {
    v81 = (*(uint64_t (**)(_QWORD, uint64_t))v97)(*(_QWORD *)(v97 + 16), v79 << 8);
    v82 = v86;
    if (!v81)
      goto LABEL_86;
    v79 = *a12;
  }
  else
  {
    v81 = 0;
    v82 = v86;
  }
  a12[18] = v81;
  if (v79)
  {
    for (j = 0; j != v79; ++j)
    {
      for (k = 0; k != 256; k += 4)
        *(_DWORD *)(v81 + k) = *(_DWORD *)(a9 + k) + j * v82;
      v81 += 256;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v54 + 8))(*(_QWORD *)(v54 + 16), v20);
}

double sub_2367BAB98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  double result;

  v11 = a3 >> 10;
  v12 = (a3 >> 10) + 1;
  *(_OWORD *)a2 = xmmword_2368AF470;
  *(_QWORD *)(a2 + 16) = 0x407F400000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a4;
  *(_QWORD *)(a2 + 48) = a6;
  *(_QWORD *)(a2 + 5720) = 1024;
  *(_QWORD *)(a2 + 5776) = 0;
  *(_OWORD *)(a2 + 5728) = 0u;
  v13 = *(_QWORD *)(a4 + 32);
  if (v13 <= a3 >> 10)
  {
    if (!v13)
      v13 = (a3 >> 10) + 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    v15 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v14);
    if (!v15)
      goto LABEL_21;
    v16 = v15;
    v17 = *(_QWORD *)(a4 + 32);
    if (v17)
      memcpy(v15, *(const void **)(a4 + 16), v17);
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a4 + 16));
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = v14;
  }
  v18 = *(_QWORD *)(a4 + 40);
  if (v18 > v11)
    goto LABEL_17;
  if (!v18)
    v18 = v12;
  do
  {
    v19 = v18;
    v18 *= 2;
  }
  while (v19 <= v11);
  v20 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v19);
  if (!v20)
LABEL_21:
    exit(1);
  v21 = v20;
  v22 = *(_QWORD *)(a4 + 40);
  if (v22)
    memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a4 + 24));
  *(_QWORD *)(a4 + 24) = v21;
  *(_QWORD *)(a4 + 40) = v19;
LABEL_17:
  v23 = 257;
  if (v12 < 0x101)
    v23 = v12;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  v24 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2832 * v23);
  if (!v24)
    goto LABEL_21;
  v25 = v24;
  *a5 = v24;
  *(_QWORD *)(a2 + 40) = v24;
  bzero(v24, 0xB08uLL);
  v25[353] = 0x7FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 5744) = 0u;
  return result;
}

double sub_2367BAD48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  double result;

  v11 = a3 >> 9;
  v12 = (a3 >> 9) + 1;
  *(_OWORD *)a2 = xmmword_2368AF480;
  *(_QWORD *)(a2 + 16) = 0x4059000000000000;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a4;
  *(_QWORD *)(a2 + 48) = a6;
  *(_QWORD *)(a2 + 4440) = 512;
  *(_QWORD *)(a2 + 4496) = 0;
  *(_OWORD *)(a2 + 4448) = 0u;
  v13 = *(_QWORD *)(a4 + 32);
  if (v13 <= a3 >> 9)
  {
    if (!v13)
      v13 = (a3 >> 9) + 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 <= v11);
    v15 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), v14);
    if (!v15)
      goto LABEL_21;
    v16 = v15;
    v17 = *(_QWORD *)(a4 + 32);
    if (v17)
      memcpy(v15, *(const void **)(a4 + 16), v17);
    (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a4 + 16));
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = v14;
  }
  v18 = *(_QWORD *)(a4 + 40);
  if (v18 > v11)
    goto LABEL_17;
  if (!v18)
    v18 = v12;
  do
  {
    v19 = v18;
    v18 *= 2;
  }
  while (v19 <= v11);
  v20 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))a1)(*(_QWORD *)(a1 + 16), 4 * v19);
  if (!v20)
LABEL_21:
    exit(1);
  v21 = v20;
  v22 = *(_QWORD *)(a4 + 40);
  if (v22)
    memcpy(v20, *(const void **)(a4 + 24), 4 * v22);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a4 + 24));
  *(_QWORD *)(a4 + 24) = v21;
  *(_QWORD *)(a4 + 40) = v19;
LABEL_17:
  v23 = 257;
  if (v12 < 0x101)
    v23 = v12;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) = v12;
  *a6 = v23;
  v24 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 16), 2192 * v23);
  if (!v24)
    goto LABEL_21;
  v25 = v24;
  *a5 = v24;
  *(_QWORD *)(a2 + 40) = v24;
  bzero(v24, 0x888uLL);
  v25[273] = 0x7FF0000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 4464) = 0u;
  return result;
}

void sub_2367BAEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40) + 2832 * *(_QWORD *)(a1 + 5736);
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(_QWORD *)(v2 + 2816);
  v3 = *(_QWORD *)(a1 + 5728) + 1;
  *(_QWORD *)(a1 + 5728) = v3;
  if (v3 == *(_QWORD *)(a1 + 5720))
    sub_2367BB560((double *)a1, 0);
}

void sub_2367BAF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40) + 2192 * *(_QWORD *)(a1 + 4456);
  ++*(_DWORD *)(v2 + 4 * a2);
  ++*(_QWORD *)(v2 + 2176);
  v3 = *(_QWORD *)(a1 + 4448) + 1;
  *(_QWORD *)(a1 + 4448) = v3;
  if (v3 == *(_QWORD *)(a1 + 4440))
    sub_2367BBB3C((double *)a1, 0);
}

void sub_2367BAF8C(double *a1, int a2)
{
  int v2;
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  double v10;
  unsigned int *v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  char v42;
  char v43;
  double v44;
  uint64_t *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  unsigned int *__src;
  uint64_t *v85;
  double v86;
  double v87;
  _QWORD v88[3];

  v2 = a2;
  v88[2] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  v5 = (unsigned int *)*((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 1);
  if (*((_QWORD *)a1 + 268) > v6)
    v6 = *((_QWORD *)a1 + 268);
  *((_QWORD *)a1 + 268) = v6;
  if (!*((_QWORD *)a1 + 3))
  {
    v13 = 0;
    v14 = 0;
    *(_DWORD *)v4[3] = v6;
    *(_BYTE *)v4[2] = 0;
    v15 = (unint64_t)&v5[*(_QWORD *)a1];
    v16 = 0.0;
    v17 = v5;
    if ((*(_QWORD *)a1 & 1) != 0)
      goto LABEL_13;
    while (1)
    {
      if ((unint64_t)v17 >= v15)
      {
        v26 = (double)v13;
        if (v13)
        {
          if (v13 > 0xFF)
            v27 = log2((double)v13);
          else
            v27 = dbl_236925608[v13];
          v16 = v16 + v26 * v27;
        }
        if (v16 >= v26)
          v28 = v16;
        else
          v28 = (double)v13;
        a1[272] = v28;
        a1[273] = v28;
        ++*((_QWORD *)a1 + 3);
        ++*v4;
        v29 = *((_QWORD *)a1 + 269) + 1;
        *((_QWORD *)a1 + 269) = v29;
        if (v29 < **((_QWORD **)a1 + 6))
        {
          v30 = &v5[260 * v29];
          bzero(v30, 0x408uLL);
          *((_QWORD *)v30 + 129) = 0x7FF0000000000000;
        }
        a1[268] = 0.0;
        goto LABEL_85;
      }
      v19 = *v17++;
      v18 = v19;
      v14 = v13 + v19;
      v20 = (double)v19;
      if (v19 > 0xFF)
        v21 = log2(v20);
      else
        v21 = dbl_236925608[v18];
      v16 = v16 - v20 * v21;
LABEL_13:
      v23 = *v17++;
      v22 = v23;
      v13 = v14 + v23;
      v24 = (double)v23;
      if (v23 > 0xFF)
        v25 = log2(v24);
      else
        v25 = dbl_236925608[v22];
      v16 = v16 - v24 * v25;
    }
  }
  if (!v6)
    goto LABEL_85;
  v80 = *((_QWORD *)a1 + 3);
  v81 = v6;
  v82 = v4;
  v7 = 0;
  v8 = 0;
  v9 = &v5[260 * *((_QWORD *)a1 + 269)];
  v10 = *a1;
  v11 = &v9[*(_QWORD *)a1];
  v12 = 0.0;
  __src = v9;
  v85 = (uint64_t *)(a1 + 272);
  if ((*(_QWORD *)a1 & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v36 = *v9++;
    v35 = v36;
    v7 = v8 + v36;
    v37 = (double)v36;
    v38 = v36 > 0xFF ? log2(v37) : dbl_236925608[v35];
    v12 = v12 - v37 * v38;
LABEL_28:
    if (v9 >= v11)
      break;
    v32 = *v9++;
    v31 = v32;
    v8 = v7 + v32;
    v33 = (double)v32;
    if (v32 > 0xFF)
      v34 = log2(v33);
    else
      v34 = dbl_236925608[v31];
    v12 = v12 - v33 * v34;
  }
  v39 = (double)v7;
  if (v7)
  {
    if (v7 > 0xFF)
      v40 = log2((double)v7);
    else
      v40 = dbl_236925608[v7];
    v12 = v12 + v39 * v40;
  }
  v41 = 0;
  if (v12 < v39)
    v12 = (double)v7;
  v42 = 1;
  do
  {
    v43 = v42;
    v44 = a1[v41 + 270];
    v45 = (uint64_t *)&a1[130 * v41];
    v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0x410uLL);
    v47 = 0;
    v48 = v5;
    v49 = &v5[260 * *(_QWORD *)&v44];
    v45[135] += *((_QWORD *)v49 + 128);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 256);
    v50 = 0;
    v51 = 0;
    v52 = &v46[*(_QWORD *)&v10];
    v53 = 0.0;
    if ((LOBYTE(v10) & 1) != 0)
      goto LABEL_57;
    while (v46 < v52)
    {
      v55 = *v46++;
      v54 = v55;
      v51 = v50 + v55;
      v56 = (double)v55;
      if (v55 > 0xFF)
        v57 = log2(v56);
      else
        v57 = dbl_236925608[v54];
      v53 = v53 - v56 * v57;
LABEL_57:
      v61 = *v46++;
      v60 = v61;
      v50 = v51 + v61;
      v62 = (double)v61;
      if (v61 > 0xFF)
        v63 = log2(v62);
      else
        v63 = dbl_236925608[v60];
      v53 = v53 - v62 * v63;
    }
    v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF)
        v59 = log2((double)v50);
      else
        v59 = dbl_236925608[v50];
      v5 = v48;
      v53 = v53 + v58 * v59;
    }
    else
    {
      v5 = v48;
    }
    v42 = 0;
    if (v53 >= v58)
      v64 = v53;
    else
      v64 = v58;
    *(double *)&v88[v41] = v64;
    *(&v86 + v41) = v64 - v12 - *(double *)&v85[v41];
    v41 = 1;
  }
  while ((v43 & 1) != 0);
  v4 = v82;
  v65 = *v82;
  if (*v82 >= 0x100uLL)
  {
    v68 = v86;
    v67 = v87;
    v2 = a2;
  }
  else
  {
    v66 = a1[2];
    v68 = v86;
    v67 = v87;
    v69 = v86 <= v66 || v87 <= v66;
    v2 = a2;
    if (!v69)
    {
      *(_DWORD *)(v82[3] + 4 * v80) = v81;
      *(_BYTE *)(v82[2] + v80) = v65;
      a1[271] = a1[270];
      *((_QWORD *)a1 + 270) = *(unsigned __int8 *)v82;
      a1[273] = a1[272];
      a1[272] = v12;
      ++*((_QWORD *)a1 + 3);
      ++*v82;
      v70 = *((_QWORD *)a1 + 269) + 1;
      *((_QWORD *)a1 + 269) = v70;
      if (v70 < **((_QWORD **)a1 + 6))
      {
        v71 = &v5[260 * v70];
        bzero(v71, 0x408uLL);
        *((_QWORD *)v71 + 129) = 0x7FF0000000000000;
      }
      a1[268] = 0.0;
LABEL_79:
      a1[274] = 0.0;
      v76 = *((_QWORD *)a1 + 1);
LABEL_84:
      *((_QWORD *)a1 + 267) = v76;
      goto LABEL_85;
    }
  }
  v72 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v72 + 4 * v80) = v81;
    *(_BYTE *)(v82[2] + v80) = *(_BYTE *)(v82[2] + v80 - 2);
    v73 = *((_QWORD *)a1 + 270);
    v74 = *((_QWORD *)a1 + 271);
    *((_QWORD *)a1 + 270) = v74;
    *((_QWORD *)a1 + 271) = v73;
    memcpy(&v5[260 * v74], a1 + 137, 0x410uLL);
    a1[273] = a1[272];
    a1[272] = *(double *)&v88[1];
    ++*((_QWORD *)a1 + 3);
    a1[268] = 0.0;
    v75 = &v5[260 * *((_QWORD *)a1 + 269)];
    bzero(v75, 0x408uLL);
    *((_QWORD *)v75 + 129) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v72 + 4 * v80 - 4) += v81;
  memcpy(&v5[260 * *((_QWORD *)a1 + 270)], a1 + 7, 0x410uLL);
  v77 = v88[0];
  a1[272] = *(double *)v88;
  if (*v82 == 1)
    *((_QWORD *)a1 + 273) = v77;
  a1[268] = 0.0;
  v78 = &v5[260 * *((_QWORD *)a1 + 269)];
  bzero(v78, 0x408uLL);
  *((_QWORD *)v78 + 129) = 0x7FF0000000000000;
  v79 = *((_QWORD *)a1 + 274) + 1;
  *((_QWORD *)a1 + 274) = v79;
  if (v79 >= 2)
  {
    v76 = *((_QWORD *)a1 + 267) + *((_QWORD *)a1 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (v2)
  {
    **((_QWORD **)a1 + 6) = *v4;
    v4[1] = *((_QWORD *)a1 + 3);
  }
}

void sub_2367BB560(double *a1, int a2)
{
  int v2;
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  double v10;
  unsigned int *v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  char v42;
  char v43;
  double v44;
  uint64_t *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  unsigned int *__src;
  uint64_t *v85;
  double v86;
  double v87;
  _QWORD v88[3];

  v2 = a2;
  v88[2] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  v5 = (unsigned int *)*((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 1);
  if (*((_QWORD *)a1 + 716) > v6)
    v6 = *((_QWORD *)a1 + 716);
  *((_QWORD *)a1 + 716) = v6;
  if (!*((_QWORD *)a1 + 3))
  {
    v13 = 0;
    v14 = 0;
    *(_DWORD *)v4[3] = v6;
    *(_BYTE *)v4[2] = 0;
    v15 = (unint64_t)&v5[*(_QWORD *)a1];
    v16 = 0.0;
    v17 = v5;
    if ((*(_QWORD *)a1 & 1) != 0)
      goto LABEL_13;
    while (1)
    {
      if ((unint64_t)v17 >= v15)
      {
        v26 = (double)v13;
        if (v13)
        {
          if (v13 > 0xFF)
            v27 = log2((double)v13);
          else
            v27 = dbl_236925608[v13];
          v16 = v16 + v26 * v27;
        }
        if (v16 >= v26)
          v28 = v16;
        else
          v28 = (double)v13;
        a1[720] = v28;
        a1[721] = v28;
        ++*((_QWORD *)a1 + 3);
        ++*v4;
        v29 = *((_QWORD *)a1 + 717) + 1;
        *((_QWORD *)a1 + 717) = v29;
        if (v29 < **((_QWORD **)a1 + 6))
        {
          v30 = &v5[708 * v29];
          bzero(v30, 0xB08uLL);
          *((_QWORD *)v30 + 353) = 0x7FF0000000000000;
        }
        a1[716] = 0.0;
        goto LABEL_85;
      }
      v19 = *v17++;
      v18 = v19;
      v14 = v13 + v19;
      v20 = (double)v19;
      if (v19 > 0xFF)
        v21 = log2(v20);
      else
        v21 = dbl_236925608[v18];
      v16 = v16 - v20 * v21;
LABEL_13:
      v23 = *v17++;
      v22 = v23;
      v13 = v14 + v23;
      v24 = (double)v23;
      if (v23 > 0xFF)
        v25 = log2(v24);
      else
        v25 = dbl_236925608[v22];
      v16 = v16 - v24 * v25;
    }
  }
  if (!v6)
    goto LABEL_85;
  v80 = *((_QWORD *)a1 + 3);
  v81 = v6;
  v82 = v4;
  v7 = 0;
  v8 = 0;
  v85 = (uint64_t *)(a1 + 720);
  v9 = &v5[708 * *((_QWORD *)a1 + 717)];
  v10 = *a1;
  v11 = &v9[*(_QWORD *)a1];
  v12 = 0.0;
  __src = v9;
  if ((*(_QWORD *)a1 & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v36 = *v9++;
    v35 = v36;
    v7 = v8 + v36;
    v37 = (double)v36;
    v38 = v36 > 0xFF ? log2(v37) : dbl_236925608[v35];
    v12 = v12 - v37 * v38;
LABEL_28:
    if (v9 >= v11)
      break;
    v32 = *v9++;
    v31 = v32;
    v8 = v7 + v32;
    v33 = (double)v32;
    if (v32 > 0xFF)
      v34 = log2(v33);
    else
      v34 = dbl_236925608[v31];
    v12 = v12 - v33 * v34;
  }
  v39 = (double)v7;
  if (v7)
  {
    if (v7 > 0xFF)
      v40 = log2((double)v7);
    else
      v40 = dbl_236925608[v7];
    v12 = v12 + v39 * v40;
  }
  v41 = 0;
  if (v12 < v39)
    v12 = (double)v7;
  v42 = 1;
  do
  {
    v43 = v42;
    v44 = a1[v41 + 718];
    v45 = (uint64_t *)&a1[354 * v41];
    v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0xB10uLL);
    v47 = 0;
    v48 = v5;
    v49 = &v5[708 * *(_QWORD *)&v44];
    v45[359] += *((_QWORD *)v49 + 352);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 704);
    v50 = 0;
    v51 = 0;
    v52 = &v46[*(_QWORD *)&v10];
    v53 = 0.0;
    if ((LOBYTE(v10) & 1) != 0)
      goto LABEL_57;
    while (v46 < v52)
    {
      v55 = *v46++;
      v54 = v55;
      v51 = v50 + v55;
      v56 = (double)v55;
      if (v55 > 0xFF)
        v57 = log2(v56);
      else
        v57 = dbl_236925608[v54];
      v53 = v53 - v56 * v57;
LABEL_57:
      v61 = *v46++;
      v60 = v61;
      v50 = v51 + v61;
      v62 = (double)v61;
      if (v61 > 0xFF)
        v63 = log2(v62);
      else
        v63 = dbl_236925608[v60];
      v53 = v53 - v62 * v63;
    }
    v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF)
        v59 = log2((double)v50);
      else
        v59 = dbl_236925608[v50];
      v5 = v48;
      v53 = v53 + v58 * v59;
    }
    else
    {
      v5 = v48;
    }
    v42 = 0;
    if (v53 >= v58)
      v64 = v53;
    else
      v64 = v58;
    *(double *)&v88[v41] = v64;
    *(&v86 + v41) = v64 - v12 - *(double *)&v85[v41];
    v41 = 1;
  }
  while ((v43 & 1) != 0);
  v4 = v82;
  v65 = *v82;
  if (*v82 >= 0x100uLL)
  {
    v68 = v86;
    v67 = v87;
    v2 = a2;
  }
  else
  {
    v66 = a1[2];
    v68 = v86;
    v67 = v87;
    v69 = v86 <= v66 || v87 <= v66;
    v2 = a2;
    if (!v69)
    {
      *(_DWORD *)(v82[3] + 4 * v80) = v81;
      *(_BYTE *)(v82[2] + v80) = v65;
      a1[719] = a1[718];
      *((_QWORD *)a1 + 718) = *(unsigned __int8 *)v82;
      a1[721] = a1[720];
      a1[720] = v12;
      ++*((_QWORD *)a1 + 3);
      ++*v82;
      v70 = *((_QWORD *)a1 + 717) + 1;
      *((_QWORD *)a1 + 717) = v70;
      if (v70 < **((_QWORD **)a1 + 6))
      {
        v71 = &v5[708 * v70];
        bzero(v71, 0xB08uLL);
        *((_QWORD *)v71 + 353) = 0x7FF0000000000000;
      }
      a1[716] = 0.0;
LABEL_79:
      a1[722] = 0.0;
      v76 = *((_QWORD *)a1 + 1);
LABEL_84:
      *((_QWORD *)a1 + 715) = v76;
      goto LABEL_85;
    }
  }
  v72 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v72 + 4 * v80) = v81;
    *(_BYTE *)(v82[2] + v80) = *(_BYTE *)(v82[2] + v80 - 2);
    v73 = *((_QWORD *)a1 + 718);
    v74 = *((_QWORD *)a1 + 719);
    *((_QWORD *)a1 + 718) = v74;
    *((_QWORD *)a1 + 719) = v73;
    memcpy(&v5[708 * v74], a1 + 361, 0xB10uLL);
    a1[721] = a1[720];
    a1[720] = *(double *)&v88[1];
    ++*((_QWORD *)a1 + 3);
    a1[716] = 0.0;
    v75 = &v5[708 * *((_QWORD *)a1 + 717)];
    bzero(v75, 0xB08uLL);
    *((_QWORD *)v75 + 353) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v72 + 4 * v80 - 4) += v81;
  memcpy(&v5[708 * *((_QWORD *)a1 + 718)], a1 + 7, 0xB10uLL);
  v77 = v88[0];
  a1[720] = *(double *)v88;
  if (*v82 == 1)
    *((_QWORD *)a1 + 721) = v77;
  a1[716] = 0.0;
  v78 = &v5[708 * *((_QWORD *)a1 + 717)];
  bzero(v78, 0xB08uLL);
  *((_QWORD *)v78 + 353) = 0x7FF0000000000000;
  v79 = *((_QWORD *)a1 + 722) + 1;
  *((_QWORD *)a1 + 722) = v79;
  if (v79 >= 2)
  {
    v76 = *((_QWORD *)a1 + 715) + *((_QWORD *)a1 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (v2)
  {
    **((_QWORD **)a1 + 6) = *v4;
    v4[1] = *((_QWORD *)a1 + 3);
  }
}

void sub_2367BBB3C(double *a1, int a2)
{
  int v2;
  _QWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  double v10;
  unsigned int *v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  char v42;
  char v43;
  double v44;
  uint64_t *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  double v53;
  uint64_t v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  unsigned int *__src;
  uint64_t *v85;
  double v86;
  double v87;
  _QWORD v88[3];

  v2 = a2;
  v88[2] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  v5 = (unsigned int *)*((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 1);
  if (*((_QWORD *)a1 + 556) > v6)
    v6 = *((_QWORD *)a1 + 556);
  *((_QWORD *)a1 + 556) = v6;
  if (!*((_QWORD *)a1 + 3))
  {
    v13 = 0;
    v14 = 0;
    *(_DWORD *)v4[3] = v6;
    *(_BYTE *)v4[2] = 0;
    v15 = (unint64_t)&v5[*(_QWORD *)a1];
    v16 = 0.0;
    v17 = v5;
    if ((*(_QWORD *)a1 & 1) != 0)
      goto LABEL_13;
    while (1)
    {
      if ((unint64_t)v17 >= v15)
      {
        v26 = (double)v13;
        if (v13)
        {
          if (v13 > 0xFF)
            v27 = log2((double)v13);
          else
            v27 = dbl_236925608[v13];
          v16 = v16 + v26 * v27;
        }
        if (v16 >= v26)
          v28 = v16;
        else
          v28 = (double)v13;
        a1[560] = v28;
        a1[561] = v28;
        ++*((_QWORD *)a1 + 3);
        ++*v4;
        v29 = *((_QWORD *)a1 + 557) + 1;
        *((_QWORD *)a1 + 557) = v29;
        if (v29 < **((_QWORD **)a1 + 6))
        {
          v30 = &v5[548 * v29];
          bzero(v30, 0x888uLL);
          *((_QWORD *)v30 + 273) = 0x7FF0000000000000;
        }
        a1[556] = 0.0;
        goto LABEL_85;
      }
      v19 = *v17++;
      v18 = v19;
      v14 = v13 + v19;
      v20 = (double)v19;
      if (v19 > 0xFF)
        v21 = log2(v20);
      else
        v21 = dbl_236925608[v18];
      v16 = v16 - v20 * v21;
LABEL_13:
      v23 = *v17++;
      v22 = v23;
      v13 = v14 + v23;
      v24 = (double)v23;
      if (v23 > 0xFF)
        v25 = log2(v24);
      else
        v25 = dbl_236925608[v22];
      v16 = v16 - v24 * v25;
    }
  }
  if (!v6)
    goto LABEL_85;
  v80 = *((_QWORD *)a1 + 3);
  v81 = v6;
  v82 = v4;
  v7 = 0;
  v8 = 0;
  v85 = (uint64_t *)(a1 + 560);
  v9 = &v5[548 * *((_QWORD *)a1 + 557)];
  v10 = *a1;
  v11 = &v9[*(_QWORD *)a1];
  v12 = 0.0;
  __src = v9;
  if ((*(_QWORD *)a1 & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v36 = *v9++;
    v35 = v36;
    v7 = v8 + v36;
    v37 = (double)v36;
    v38 = v36 > 0xFF ? log2(v37) : dbl_236925608[v35];
    v12 = v12 - v37 * v38;
LABEL_28:
    if (v9 >= v11)
      break;
    v32 = *v9++;
    v31 = v32;
    v8 = v7 + v32;
    v33 = (double)v32;
    if (v32 > 0xFF)
      v34 = log2(v33);
    else
      v34 = dbl_236925608[v31];
    v12 = v12 - v33 * v34;
  }
  v39 = (double)v7;
  if (v7)
  {
    if (v7 > 0xFF)
      v40 = log2((double)v7);
    else
      v40 = dbl_236925608[v7];
    v12 = v12 + v39 * v40;
  }
  v41 = 0;
  if (v12 < v39)
    v12 = (double)v7;
  v42 = 1;
  do
  {
    v43 = v42;
    v44 = a1[v41 + 558];
    v45 = (uint64_t *)&a1[274 * v41];
    v46 = (unsigned int *)(v45 + 7);
    memcpy(v45 + 7, __src, 0x890uLL);
    v47 = 0;
    v48 = v5;
    v49 = &v5[548 * *(_QWORD *)&v44];
    v45[279] += *((_QWORD *)v49 + 272);
    do
    {
      v46[v47] += v49[v47];
      ++v47;
    }
    while (v47 != 544);
    v50 = 0;
    v51 = 0;
    v52 = &v46[*(_QWORD *)&v10];
    v53 = 0.0;
    if ((LOBYTE(v10) & 1) != 0)
      goto LABEL_57;
    while (v46 < v52)
    {
      v55 = *v46++;
      v54 = v55;
      v51 = v50 + v55;
      v56 = (double)v55;
      if (v55 > 0xFF)
        v57 = log2(v56);
      else
        v57 = dbl_236925608[v54];
      v53 = v53 - v56 * v57;
LABEL_57:
      v61 = *v46++;
      v60 = v61;
      v50 = v51 + v61;
      v62 = (double)v61;
      if (v61 > 0xFF)
        v63 = log2(v62);
      else
        v63 = dbl_236925608[v60];
      v53 = v53 - v62 * v63;
    }
    v58 = (double)v50;
    if (v50)
    {
      if (v50 > 0xFF)
        v59 = log2((double)v50);
      else
        v59 = dbl_236925608[v50];
      v5 = v48;
      v53 = v53 + v58 * v59;
    }
    else
    {
      v5 = v48;
    }
    v42 = 0;
    if (v53 >= v58)
      v64 = v53;
    else
      v64 = v58;
    *(double *)&v88[v41] = v64;
    *(&v86 + v41) = v64 - v12 - *(double *)&v85[v41];
    v41 = 1;
  }
  while ((v43 & 1) != 0);
  v4 = v82;
  v65 = *v82;
  if (*v82 >= 0x100uLL)
  {
    v68 = v86;
    v67 = v87;
    v2 = a2;
  }
  else
  {
    v66 = a1[2];
    v68 = v86;
    v67 = v87;
    v69 = v86 <= v66 || v87 <= v66;
    v2 = a2;
    if (!v69)
    {
      *(_DWORD *)(v82[3] + 4 * v80) = v81;
      *(_BYTE *)(v82[2] + v80) = v65;
      a1[559] = a1[558];
      *((_QWORD *)a1 + 558) = *(unsigned __int8 *)v82;
      a1[561] = a1[560];
      a1[560] = v12;
      ++*((_QWORD *)a1 + 3);
      ++*v82;
      v70 = *((_QWORD *)a1 + 557) + 1;
      *((_QWORD *)a1 + 557) = v70;
      if (v70 < **((_QWORD **)a1 + 6))
      {
        v71 = &v5[548 * v70];
        bzero(v71, 0x888uLL);
        *((_QWORD *)v71 + 273) = 0x7FF0000000000000;
      }
      a1[556] = 0.0;
LABEL_79:
      a1[562] = 0.0;
      v76 = *((_QWORD *)a1 + 1);
LABEL_84:
      *((_QWORD *)a1 + 555) = v76;
      goto LABEL_85;
    }
  }
  v72 = v82[3];
  if (v67 < v68 + -20.0)
  {
    *(_DWORD *)(v72 + 4 * v80) = v81;
    *(_BYTE *)(v82[2] + v80) = *(_BYTE *)(v82[2] + v80 - 2);
    v73 = *((_QWORD *)a1 + 558);
    v74 = *((_QWORD *)a1 + 559);
    *((_QWORD *)a1 + 558) = v74;
    *((_QWORD *)a1 + 559) = v73;
    memcpy(&v5[548 * v74], a1 + 281, 0x890uLL);
    a1[561] = a1[560];
    a1[560] = *(double *)&v88[1];
    ++*((_QWORD *)a1 + 3);
    a1[556] = 0.0;
    v75 = &v5[548 * *((_QWORD *)a1 + 557)];
    bzero(v75, 0x888uLL);
    *((_QWORD *)v75 + 273) = 0x7FF0000000000000;
    goto LABEL_79;
  }
  *(_DWORD *)(v72 + 4 * v80 - 4) += v81;
  memcpy(&v5[548 * *((_QWORD *)a1 + 558)], a1 + 7, 0x890uLL);
  v77 = v88[0];
  a1[560] = *(double *)v88;
  if (*v82 == 1)
    *((_QWORD *)a1 + 561) = v77;
  a1[556] = 0.0;
  v78 = &v5[548 * *((_QWORD *)a1 + 557)];
  bzero(v78, 0x888uLL);
  *((_QWORD *)v78 + 273) = 0x7FF0000000000000;
  v79 = *((_QWORD *)a1 + 562) + 1;
  *((_QWORD *)a1 + 562) = v79;
  if (v79 >= 2)
  {
    v76 = *((_QWORD *)a1 + 555) + *((_QWORD *)a1 + 1);
    goto LABEL_84;
  }
LABEL_85:
  if (v2)
  {
    **((_QWORD **)a1 + 6) = *v4;
    v4[1] = *((_QWORD *)a1 + 3);
  }
}

void sub_2367BC118(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double *v6;
  _QWORD *v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  double v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  unsigned int *v27;
  double v28;
  uint64_t v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  double v43;
  uint64_t v44;
  unsigned int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unsigned int v51;
  double v52;
  double v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  double v65;
  uint64_t v66;
  unsigned int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  unsigned int v73;
  double v74;
  double v75;
  double v76;
  char v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  double *v95;
  unsigned int *v96;
  unsigned int *v97;
  uint64_t v98;
  char *v99;
  double v100;
  unsigned int *v101;
  unint64_t v102;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v107;
  char *v108;
  double *v109;
  uint64_t v110;
  unsigned int *__src;
  unsigned int *v112;
  char *v113;
  unsigned int *v114;
  double v115;
  double v116;
  double v117[26];
  _QWORD v118[15];

  v3 = a2;
  v4 = a1;
  v118[13] = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v6 = (double *)(a1 + 14);
  v7 = (_QWORD *)a1[6];
  v8 = (unsigned int *)a1[7];
  v9 = a1[10];
  v10 = a1[3];
  if (v9 < v10)
  {
    a1[10] = v10;
    v9 = v10;
  }
  v110 = v5;
  if (a1[5])
  {
    if (!v9)
      goto LABEL_107;
    v109 = (double *)(a1 + 14);
    v112 = v8;
    v104 = v7;
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      v108 = (char *)(*(uint64_t (**)(_QWORD, uint64_t))a2)(*(_QWORD *)(a2 + 16), 2080 * v5);
      if (!v108)
        exit(1);
      v115 = 0.0;
      v116 = 0.0;
      goto LABEL_36;
    }
    v108 = 0;
    v115 = 0.0;
    v116 = 0.0;
    if (v5)
    {
LABEL_36:
      v37 = 0;
      v107 = 1040 * v5;
      v38 = *v4;
      v113 = v108;
      v114 = v8;
      while (1)
      {
        v39 = 0;
        v40 = 0;
        v41 = &v112[260 * v4[11] + 260 * v37];
        v42 = &v41[v38];
        v43 = 0.0;
        __src = v41;
        if ((v38 & 1) != 0)
          goto LABEL_46;
        while (v41 < v42)
        {
          v45 = *v41++;
          v44 = v45;
          v40 = v39 + v45;
          v46 = (double)v45;
          if (v45 > 0xFF)
            v47 = log2(v46);
          else
            v47 = dbl_236925608[v44];
          v43 = v43 - v46 * v47;
LABEL_46:
          v51 = *v41++;
          v50 = v51;
          v39 = v40 + v51;
          v52 = (double)v51;
          if (v51 > 0xFF)
            v53 = log2(v52);
          else
            v53 = dbl_236925608[v50];
          v43 = v43 - v52 * v53;
        }
        v48 = (double)v39;
        if (v39)
        {
          if (v39 > 0xFF)
            v49 = log2((double)v39);
          else
            v49 = dbl_236925608[v39];
          v43 = v43 + v48 * v49;
        }
        v54 = 0;
        if (v43 < v48)
          v43 = (double)v39;
        *(double *)&v118[v37] = v43;
        v55 = 1;
        do
        {
          v56 = v55;
          v57 = v37 + v54 * v5;
          v58 = v4;
          v59 = v4[v54 + 12];
          v60 = &v108[1040 * v57];
          memcpy(v60, __src, 0x410uLL);
          v61 = 0;
          *((_QWORD *)v60 + 128) += *(_QWORD *)&v112[260 * v59 + 256 + 260 * v37];
          do
          {
            *(_DWORD *)&v113[v107 * v54 + v61 * 4] += v114[260 * v59 + v61];
            ++v61;
          }
          while (v61 != 256);
          v62 = 0;
          v63 = 0;
          v38 = *v58;
          v64 = &v60[4 * *v58];
          v65 = 0.0;
          if ((*v58 & 1) != 0)
            goto LABEL_66;
          while (v60 < v64)
          {
            v67 = *(_DWORD *)v60;
            v60 += 4;
            v66 = v67;
            v63 = v62 + v67;
            v68 = (double)v67;
            if (v67 > 0xFF)
              v69 = log2(v68);
            else
              v69 = dbl_236925608[v66];
            v65 = v65 - v68 * v69;
LABEL_66:
            v73 = *(_DWORD *)v60;
            v60 += 4;
            v72 = v73;
            v62 = v63 + v73;
            v74 = (double)v73;
            if (v73 > 0xFF)
              v75 = log2(v74);
            else
              v75 = dbl_236925608[v72];
            v65 = v65 - v74 * v75;
          }
          v70 = (double)v62;
          if (v62)
          {
            v6 = v109;
            if (v62 > 0xFF)
              v71 = log2((double)v62);
            else
              v71 = dbl_236925608[v62];
            v4 = v58;
            v5 = v110;
            v65 = v65 + v70 * v71;
          }
          else
          {
            v4 = v58;
            v6 = v109;
            v5 = v110;
          }
          v55 = 0;
          if (v65 >= v70)
            v76 = v65;
          else
            v76 = v70;
          v117[v57] = v76;
          *(&v115 + v54) = *(&v115 + v54) + v76 - v43 - v6[v57];
          v54 = 1;
        }
        while ((v56 & 1) != 0);
        ++v37;
        v113 += 1040;
        v114 += 260;
        if (v37 == v5)
        {
          v77 = 0;
          v3 = a2;
          v7 = v104;
          goto LABEL_79;
        }
      }
    }
    v77 = 1;
LABEL_79:
    v78 = *v7;
    if (*v7 >= v4[2])
    {
      v81 = v115;
      v80 = v116;
      v82 = v4[10];
      v83 = v4[5];
    }
    else
    {
      v79 = *((double *)v4 + 4);
      v81 = v115;
      v80 = v116;
      v82 = v4[10];
      v83 = v4[5];
      if (v115 > v79 && v116 > v79)
      {
        *(_DWORD *)(v7[3] + 4 * v83) = v82;
        *(_BYTE *)(v7[2] + v83) = v78;
        v4[13] = v4[12];
        v4[12] = *v7 * v5;
        if ((v77 & 1) == 0)
        {
          v85 = v118;
          v86 = v5;
          do
          {
            v6[v5] = *v6;
            v87 = *v85++;
            *(_QWORD *)v6++ = v87;
            --v86;
          }
          while (v86);
        }
        ++v4[5];
        ++*v7;
        v88 = v4[11] + v5;
        v4[11] = v88;
        if (v88 < *(_QWORD *)v4[8])
        {
          v89 = v4[1];
          if (v89)
          {
            v90 = (_QWORD *)(v4[7] + 1040 * v88);
            do
            {
              bzero(v90, 0x408uLL);
              v90[129] = 0x7FF0000000000000;
              v90 += 130;
              --v89;
            }
            while (v89);
          }
        }
        v4[40] = 0;
        v91 = v4[3];
        v4[10] = 0;
        goto LABEL_105;
      }
    }
    v92 = v7[3];
    if (v80 < v81 + -20.0)
    {
      *(_DWORD *)(v92 + 4 * v83) = v82;
      *(_BYTE *)(v7[2] + v83) = *(_BYTE *)(v7[2] + v83 - 2);
      *((int8x16_t *)v4 + 6) = vextq_s8(*((int8x16_t *)v4 + 6), *((int8x16_t *)v4 + 6), 8uLL);
      if ((v77 & 1) == 0)
      {
        v93 = 0;
        v94 = &v108[1040 * v5];
        v95 = &v6[v5];
        do
        {
          memcpy(&v112[260 * v93 + 260 * v4[12]], v94, 0x410uLL);
          v95[v93] = v6[v93];
          v6[v93] = v117[v5 + v93];
          v96 = &v112[260 * v93 + 260 * v4[11]];
          bzero(v96, 0x408uLL);
          *((_QWORD *)v96 + 129) = 0x7FF0000000000000;
          v6 = v109;
          ++v93;
          v94 += 1040;
        }
        while (v5 != v93);
      }
      ++v4[5];
      v4[40] = 0;
      v4[9] = v4[3];
      v4[10] = 0;
      v3 = a2;
      v7 = v104;
      goto LABEL_106;
    }
    *(_DWORD *)(v92 + 4 * v83 - 4) += v82;
    v97 = v112;
    if ((v77 & 1) == 0)
    {
      v98 = 0;
      v99 = v108;
      do
      {
        memcpy(&v97[260 * v98 + 260 * v4[12]], v99, 0x410uLL);
        v100 = v117[v98];
        v6[v98] = v100;
        if (*v7 == 1)
          *(double *)&v4[v5 + 14 + v98] = v100;
        v97 = v112;
        v101 = &v112[260 * v98 + 260 * v4[11]];
        bzero(v101, 0x408uLL);
        *((_QWORD *)v101 + 129) = 0x7FF0000000000000;
        ++v98;
        v99 += 1040;
        v6 = v109;
      }
      while (v5 != v98);
    }
    v4[10] = 0;
    v102 = v4[40] + 1;
    v4[40] = v102;
    v3 = a2;
    if (v102 < 2)
      goto LABEL_106;
    v91 = v4[9] + v4[3];
LABEL_105:
    v4[9] = v91;
LABEL_106:
    (*(void (**)(_QWORD, char *))(v3 + 8))(*(_QWORD *)(v3 + 16), v108);
    goto LABEL_107;
  }
  *(_DWORD *)v7[3] = v9;
  v105 = v7;
  *(_BYTE *)v7[2] = 0;
  if (v5)
  {
    v11 = *a1;
    v12 = *a1;
    for (i = v5; i; --i)
    {
      v14 = v6;
      v15 = 0;
      v16 = 0;
      v17 = v8;
      v18 = (unint64_t)&v8[v12];
      v19 = 0.0;
      v20 = v17;
      if ((v11 & 1) != 0)
        goto LABEL_19;
      while ((unint64_t)v17 < v18)
      {
        v22 = *v17++;
        v21 = v22;
        v16 = v15 + v22;
        v23 = (double)v22;
        if (v22 > 0xFF)
          v24 = log2(v23);
        else
          v24 = dbl_236925608[v21];
        v19 = v19 - v23 * v24;
LABEL_19:
        v30 = *v17++;
        v29 = v30;
        v15 = v16 + v30;
        v31 = (double)v30;
        if (v30 > 0xFF)
          v32 = log2(v31);
        else
          v32 = dbl_236925608[v29];
        v19 = v19 - v31 * v32;
      }
      v25 = (double)v15;
      if (v15)
      {
        v26 = v14;
        v27 = v20;
        if (v15 > 0xFF)
          v28 = log2((double)v15);
        else
          v28 = dbl_236925608[v15];
        v19 = v19 + v25 * v28;
      }
      else
      {
        v26 = v14;
        v27 = v20;
      }
      if (v19 >= v25)
        v33 = v19;
      else
        v33 = (double)v15;
      *v26 = v33;
      v26[v110] = v33;
      v6 = v26 + 1;
      v8 = v27 + 260;
    }
  }
  ++v4[5];
  v7 = v105;
  ++*v105;
  v5 = v110;
  v34 = v4[11] + v110;
  v4[11] = v34;
  if (v34 < *(_QWORD *)v4[8])
  {
    v35 = v4[1];
    if (v35)
    {
      v36 = (_QWORD *)(v4[7] + 1040 * v34);
      do
      {
        bzero(v36, 0x408uLL);
        v36[129] = 0x7FF0000000000000;
        v36 += 130;
        --v35;
      }
      while (v35);
    }
  }
  v4[10] = 0;
LABEL_107:
  if (a3)
  {
    *(_QWORD *)v4[8] = *v7 * v5;
    v7[1] = v4[5];
  }
}

void sub_2367BC924(unsigned int a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10[704];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2[23])
  {
    v4 = 0;
    v5 = 0;
    do
    {
      sub_2367B8B04(256, (int *)(a2[22] + v4), v10);
      ++v5;
      v4 += 1040;
    }
    while (v5 < a2[23]);
  }
  if (a2[25])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      sub_2367B8B04(704, (int *)(a2[24] + v6), v10);
      ++v7;
      v6 += 2832;
    }
    while (v7 < a2[25]);
  }
  if (a2[27])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      sub_2367B8B04(a1, (int *)(a2[26] + v8), v10);
      ++v9;
      v8 += 2192;
    }
    while (v9 < a2[27]);
  }
}

uint64_t sub_2367BCA34(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t i;
  int v15;
  unsigned int v16;
  _BYTE v18[152];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2367BCB64((uint64_t *)a1, a2, a3, a4, a5);
  v11 = *(_QWORD *)(a1 + 104);
  if (v11 && *(unsigned __int8 *)(v11 + 4) >= 2u)
  {
    v12 = *(uint64_t **)(v11 + 72);
    if (v12 == (uint64_t *)a1)
      v12 = *(uint64_t **)(v11 + 80);
    memset_pattern16(v18, &unk_2368AFB10, 0x98uLL);
    v13 = sub_2367BCB64(v12, a2, a3, a4, (uint64_t)v18);
    for (i = 0; i != 152; i += 4)
    {
      v15 = *(_DWORD *)&v18[i];
      if (v15 != 0xFFFFFFF)
      {
        v16 = v15 + 32 * *(_DWORD *)(a1 + 8) * ((1 << *(_BYTE *)(*(_QWORD *)a1 + (v15 & 0x1F))) & 0x7FFFFFE);
        if (*(_DWORD *)(a5 + i) < v16)
          v16 = *(_DWORD *)(a5 + i);
        *(_DWORD *)(a5 + i) = v16;
      }
    }
    return v13 | v10;
  }
  return v10;
}

uint64_t sub_2367BCB64(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  char v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char v120;
  int v121;
  int v122;
  unint64_t v123;
  char v124;
  unsigned __int8 *v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  unint64_t v146;
  unsigned __int8 *v147;
  int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  unsigned int v157;
  unsigned __int8 *v158;
  int v159;
  unsigned int v160;
  BOOL v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  int v176;
  int v177;
  uint64_t v178;
  unsigned __int8 *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char v184;
  unint64_t v185;
  BOOL v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unsigned int v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  unsigned __int8 *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char v208;
  unint64_t v209;
  BOOL v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unsigned __int8 *v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  unsigned int v221;
  unsigned __int8 *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unsigned __int8 *v230;

  if (*((_DWORD *)a1 + 24))
  {
    v5 = 0;
    if (a4)
    {
      v6 = 0;
      v7 = a1 + 10;
      while (1)
      {
        if (v6 >= a3 && *((_BYTE *)v7 + 2))
        {
          v8 = *((unsigned __int8 *)v7 + 2) + 32 * *((_DWORD *)v7 + 1);
          if (*(_DWORD *)(a5 + 4 * v6) < v8)
            v8 = *(_DWORD *)(a5 + 4 * v6);
          *(_DWORD *)(a5 + 4 * v6) = v8;
          v5 = 1;
        }
        v9 = a2[v6];
        if (*(_BYTE *)v7)
        {
          if (*((unsigned __int8 *)v7 + 1) != v9)
            return v5;
          v10 = a1[7];
          v11 = *((_DWORD *)v7 + 2);
          if (!v10)
            return v5;
        }
        else
        {
          v12 = *((_DWORD *)v7 + 2);
          if (!v12)
            return v5;
          v10 = a1[7];
          v13 = *(_DWORD *)(v10 + 12 * (v12 + (v9 >> 4)) + 8);
          if (!v13)
            return v5;
          v11 = v13 + (v9 & 0xF);
          if (!v10)
            return v5;
        }
        v7 = (uint64_t *)(v10 + 12 * v11);
        if (++v6 >= a4)
          return v5;
      }
    }
    return v5;
  }
  v14 = a1[5];
  v15 = (506832829 * *(_DWORD *)a2) >> 17;
  v16 = *(unsigned __int16 *)(v14 + 2 * v15);
  if (*(_WORD *)(v14 + 2 * v15))
  {
    v5 = 0;
    v17 = a2 + 1;
    v18 = a1[6];
    v19 = *a1;
    while (1)
    {
      v20 = (char *)(v18 + 4 * v16);
      v21 = *v20;
      v22 = v20[1];
      v23 = *((unsigned __int16 *)v20 + 1);
      v24 = *v20 & 0x1F;
      v25 = *(_BYTE *)(v19 + v24);
      if (!v20[1])
      {
        v35 = *(_QWORD *)(v19 + 168)
            + *(unsigned int *)(v19 + 4 * (*v20 & 0x1F) + 32)
            + *((unsigned __int16 *)v20 + 1) * (unint64_t)(*v20 & 0x1F);
        if (v24 >= a4)
          v36 = a4;
        else
          v36 = v21 & 0x1F;
        if (v36 < 8)
        {
          v38 = 0;
          v39 = a2;
LABEL_258:
          v104 = v36 & 7;
          if (v104)
          {
            v105 = v38 | v104;
            while (*(unsigned __int8 *)(v35 + v38) == *v39)
            {
              ++v39;
              ++v38;
              if (!--v104)
              {
                v38 = v105;
                break;
              }
            }
          }
        }
        else
        {
          v37 = 0;
          v38 = v36 & 0x18;
          v39 = &a2[v38];
          while (1)
          {
            v40 = *(_QWORD *)&a2[v37];
            v41 = *(_QWORD *)(v35 + v37);
            if (v40 != v41)
              break;
            v37 += 8;
            if ((v36 & 0xFFFFFFFFFFFFFFF8) == v37)
              goto LABEL_258;
          }
          v38 = v37 + (__clz(__rbit64(v41 ^ v40)) >> 3);
        }
        if (v38 == v24)
        {
          v42 = *(_DWORD *)(a5 + 4 * v24);
          if (v42 >= (v24 | (32 * v23)))
            v42 = v24 | (32 * v23);
          *(_DWORD *)(a5 + 4 * v24) = v42;
          v5 = 1;
        }
        v43 = v24 - 1;
        if (v38 >= v24 - 1)
        {
          v44 = v24 | (32 * ((12 << v25) + v23));
          if (*(_DWORD *)(a5 + 4 * v43) < v44)
            v44 = *(_DWORD *)(a5 + 4 * v43);
          *(_DWORD *)(a5 + 4 * v43) = v44;
          if (v24 + 2 < a4 && a2[v43] == 105 && a2[v24] == 110 && a2[v24 + 1] == 103 && a2[v24 + 2] == 32)
          {
            v45 = v24 | (32 * ((49 << v25) + v23));
            v46 = a5 + 4 * v24;
            if (*(_DWORD *)(v46 + 12) < v45)
              v45 = *(_DWORD *)(v46 + 12);
            *(_DWORD *)(v46 + 12) = v45;
          }
          v5 = 1;
        }
        v47 = v24 - 9;
        if (a3 > v24 - 9)
          v47 = a3;
        if (v24 <= 9)
          v48 = a3;
        else
          v48 = v47;
        v49 = v24 - 2;
        if (v38 < v24 - 2)
          v49 = v38;
        if (v48 <= v49)
        {
          v50 = a1[2];
          v51 = v49 - v48 + 1;
          v52 = (unsigned int *)(a5 + 4 * v48);
          v53 = 6 * v24 - 6 * v48;
          v54 = 4 * v24 - 4 * v48;
          do
          {
            v55 = v24 | (32 * (((unint64_t)(v54 + ((v50 >> v53) & 0x3F)) << v25) + v23));
            if (*v52 < v55)
              v55 = *v52;
            *v52++ = v55;
            v53 -= 6;
            v54 -= 4;
            --v51;
          }
          while (v51);
          v5 = 1;
        }
        if (v38 >= v24)
        {
          v56 = v24 + 6;
          if (v24 + 6 < a4)
          {
            v57 = &a2[v24];
            v58 = a2[v24];
            if (v58 > 0x3C)
            {
              switch(a2[v24])
              {
                case 'a':
                  if (v57[1] == 108 && v57[2] == 32)
                  {
                    v56 = v24 + 3;
                    v63 = 84;
                    goto LABEL_193;
                  }
                  break;
                case 'b':
                case 'c':
                case 'd':
                case 'g':
                case 'h':
                case 'j':
                case 'k':
                case 'm':
                case 'n':
                  goto LABEL_196;
                case 'e':
                  v92 = v57[1];
                  if (v92 == 115)
                  {
                    if (v57[2] == 116 && v57[3] == 32)
                    {
                      v56 = v24 + 4;
                      v63 = 95;
                      goto LABEL_193;
                    }
                  }
                  else if (v92 == 114)
                  {
                    if (v57[2] == 32)
                    {
                      v56 = v24 + 3;
                      v63 = 82;
                      goto LABEL_193;
                    }
                  }
                  else if (v92 == 100 && v57[2] == 32)
                  {
                    v56 = v24 + 3;
                    v63 = 53;
                    goto LABEL_193;
                  }
                  break;
                case 'f':
                  if (v57[1] == 117 && v57[2] == 108 && v57[3] == 32)
                  {
                    v56 = v24 + 4;
                    v63 = 90;
                    goto LABEL_193;
                  }
                  break;
                case 'i':
                  v93 = v57[1];
                  if (v93 == 122)
                  {
                    if (v57[2] == 101 && v57[3] == 32)
                    {
                      v56 = v24 + 4;
                      v63 = 100;
                      goto LABEL_193;
                    }
                  }
                  else if (v93 == 118 && v57[2] == 101 && v57[3] == 32)
                  {
                    v56 = v24 + 4;
                    v63 = 92;
                    goto LABEL_193;
                  }
                  break;
                case 'l':
                  v94 = v57[1];
                  if (v94 == 121)
                  {
                    if (v57[2] == 32)
                    {
                      v56 = v24 + 3;
                      v63 = 61;
                      goto LABEL_193;
                    }
                  }
                  else if (v94 == 101 && v57[2] == 115 && v57[3] == 115 && v57[4] == 32)
                  {
                    v56 = v24 + 5;
                    v63 = 93;
                    goto LABEL_193;
                  }
                  break;
                case 'o':
                  if (v57[1] == 117 && v57[2] == 115 && v57[3] == 32)
                  {
                    v56 = v24 + 4;
                    v63 = 106;
                    goto LABEL_193;
                  }
                  break;
                default:
                  if (v58 == 61)
                  {
                    v97 = v57[1];
                    if (v97 == 39)
                    {
                      v56 = v24 + 2;
                      v63 = 86;
                      goto LABEL_193;
                    }
                    if (v97 == 34)
                    {
                      v56 = v24 + 2;
                      v63 = 70;
                      goto LABEL_193;
                    }
                  }
                  else if (v58 == 93)
                  {
                    v56 = v24 + 1;
                    v63 = 24;
                    goto LABEL_193;
                  }
                  break;
              }
            }
            else
            {
              switch(a2[v24])
              {
                case ' ':
                  v59 = v24 | (32 * ((1 << v25) + v23));
                  v60 = a5 + 4 * v24;
                  if (*(_DWORD *)(v60 + 4) < v59)
                    v59 = *(_DWORD *)(v60 + 4);
                  *(_DWORD *)(v60 + 4) = v59;
                  v61 = v57[1];
                  switch(v57[1])
                  {
                    case 'a':
                      v62 = v57[2];
                      if (v62 > 0x72)
                      {
                        if (v62 == 115)
                        {
                          if (v57[3] == 32)
                          {
                            v56 = v24 + 4;
                            v63 = 46;
                            goto LABEL_193;
                          }
                        }
                        else if (v62 == 116 && v57[3] == 32)
                        {
                          v56 = v24 + 4;
                          v63 = 60;
                          goto LABEL_193;
                        }
                      }
                      else
                      {
                        if (v62 == 32)
                        {
                          v56 = v24 + 3;
                          v63 = 28;
                          goto LABEL_193;
                        }
                        if (v62 == 110 && v57[3] == 100 && v57[4] == 32)
                        {
                          v56 = v24 + 5;
                          v63 = 10;
                          goto LABEL_193;
                        }
                      }
                      break;
                    case 'b':
                      if (v57[2] == 121 && v57[3] == 32)
                      {
                        v56 = v24 + 4;
                        v63 = 38;
                        goto LABEL_193;
                      }
                      break;
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'g':
                    case 'h':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                      goto LABEL_196;
                    case 'f':
                      v99 = v57[2];
                      if (v99 == 114)
                      {
                        if (v57[3] == 111 && v57[4] == 109 && v57[5] == 32)
                        {
                          v63 = 37;
                          goto LABEL_193;
                        }
                      }
                      else if (v99 == 111 && v57[3] == 114 && v57[4] == 32)
                      {
                        v56 = v24 + 5;
                        v63 = 25;
                        goto LABEL_193;
                      }
                      break;
                    case 'i':
                      v100 = v57[2];
                      if (v100 == 115)
                      {
                        if (v57[3] == 32)
                        {
                          v56 = v24 + 4;
                          v63 = 47;
                          goto LABEL_193;
                        }
                      }
                      else if (v100 == 110 && v57[3] == 32)
                      {
                        v56 = v24 + 4;
                        v63 = 16;
                        goto LABEL_193;
                      }
                      break;
                    case 'n':
                      if (v57[2] == 111 && v57[3] == 116 && v57[4] == 32)
                      {
                        v56 = v24 + 5;
                        v63 = 80;
                        goto LABEL_193;
                      }
                      break;
                    case 'o':
                      v101 = v57[2];
                      if (v101 == 110)
                      {
                        if (v57[3] == 32)
                        {
                          v56 = v24 + 4;
                          v63 = 45;
                          goto LABEL_193;
                        }
                      }
                      else if (v101 == 102 && v57[3] == 32)
                      {
                        v56 = v24 + 4;
                        v63 = 8;
                        goto LABEL_193;
                      }
                      break;
                    default:
                      if (v61 == 116)
                      {
                        v102 = v57[2];
                        if (v102 == 111)
                        {
                          if (v57[3] == 32)
                          {
                            v56 = v24 + 4;
                            v63 = 17;
                            goto LABEL_193;
                          }
                        }
                        else if (v102 == 104)
                        {
                          v103 = v57[3];
                          if (v103 == 97)
                          {
                            if (v57[4] == 116 && v57[5] == 32)
                            {
                              v63 = 29;
                              goto LABEL_193;
                            }
                          }
                          else if (v103 == 101 && v57[4] == 32)
                          {
                            v56 = v24 + 5;
                            v63 = 5;
                            goto LABEL_193;
                          }
                        }
                      }
                      else if (v61 == 119 && v57[2] == 105 && v57[3] == 116 && v57[4] == 104 && v57[5] == 32)
                      {
                        v63 = 35;
                        goto LABEL_193;
                      }
                      break;
                  }
                  goto LABEL_196;
                case '!':
                case '#':
                case '$':
                case '%':
                case '&':
                case ')':
                case '*':
                case '+':
                case '-':
                  goto LABEL_196;
                case '"':
                  v84 = v24 | (32 * ((19 << v25) + v23));
                  v85 = a5 + 4 * v24;
                  if (*(_DWORD *)(v85 + 4) < v84)
                    v84 = *(_DWORD *)(v85 + 4);
                  *(_DWORD *)(v85 + 4) = v84;
                  if (v57[1] != 62)
                    goto LABEL_196;
                  v56 = v24 + 2;
                  v63 = 21;
                  goto LABEL_193;
                case '\'':
                  v56 = v24 + 1;
                  v63 = 36;
                  goto LABEL_193;
                case '(':
                  v56 = v24 + 1;
                  v63 = 57;
                  goto LABEL_193;
                case ',':
                  v86 = v24 | (32 * ((76 << v25) + v23));
                  v87 = a5 + 4 * v24;
                  if (*(_DWORD *)(v87 + 4) < v86)
                    v86 = *(_DWORD *)(v87 + 4);
                  *(_DWORD *)(v87 + 4) = v86;
                  if (v57[1] != 32)
                    goto LABEL_196;
                  v56 = v24 + 2;
                  v63 = 14;
                  goto LABEL_193;
                case '.':
                  v88 = v24 | (32 * ((20 << v25) + v23));
                  v89 = a5 + 4 * v24;
                  if (*(_DWORD *)(v89 + 4) < v88)
                    v88 = *(_DWORD *)(v89 + 4);
                  *(_DWORD *)(v89 + 4) = v88;
                  if (v57[1] != 32)
                    goto LABEL_196;
                  v90 = v24 | (32 * ((31 << v25) + v23));
                  if (*(_DWORD *)(v89 + 8) < v90)
                    v90 = *(_DWORD *)(v89 + 8);
                  *(_DWORD *)(v89 + 8) = v90;
                  if (v57[2] != 84 || v57[3] != 104)
                    goto LABEL_196;
                  v91 = v57[4];
                  if (v91 == 105)
                  {
                    if (v57[5] == 115 && v57[6] == 32)
                    {
                      v56 = v24 + 7;
                      v63 = 75;
                      goto LABEL_193;
                    }
                  }
                  else if (v91 == 101 && v57[5] == 32)
                  {
                    v63 = 43;
                    goto LABEL_193;
                  }
                  goto LABEL_196;
                default:
                  if (v58 != 10)
                  {
                    if (v58 != 58)
                      goto LABEL_196;
                    v56 = v24 + 1;
                    v63 = 51;
                    goto LABEL_193;
                  }
                  v95 = v24 | (32 * ((22 << v25) + v23));
                  v96 = a5 + 4 * v24;
                  if (*(_DWORD *)(v96 + 4) < v95)
                    v95 = *(_DWORD *)(v96 + 4);
                  *(_DWORD *)(v96 + 4) = v95;
                  if (v57[1] == 9)
                  {
                    v56 = v24 + 2;
                    v63 = 50;
                    goto LABEL_193;
                  }
                  break;
              }
            }
          }
        }
        goto LABEL_196;
      }
      if (v24 <= a4)
      {
        v26 = (unsigned __int8 *)(*(_QWORD *)(v19 + 168)
                                + *(unsigned int *)(v19 + 4 * (*v20 & 0x1F) + 32)
                                + *((unsigned __int16 *)v20 + 1) * (unint64_t)(*v20 & 0x1F));
        if (v22 == 10)
        {
          v27 = *v26;
          if ((v27 - 97) > 0x19 || (v27 ^ 0x20) != *a2)
            goto LABEL_196;
          v28 = v24 - 1;
          v29 = (v24 - 1);
          if (v29 < 8)
          {
            v31 = 0;
            v32 = a2 + 1;
LABEL_272:
            v106 = v28 & 7;
            if (v106)
            {
              v107 = v31 | v106;
              v108 = v31 + 1;
              while (v26[v108] == *v32)
              {
                ++v32;
                ++v108;
                if (!--v106)
                {
                  v31 = v107;
                  goto LABEL_97;
                }
              }
              v31 = v108 - 1;
            }
          }
          else
          {
            v30 = 0;
            v31 = v28 & 0xFFFFFFF8;
            v32 = &v17[v31];
            while (1)
            {
              v33 = *(_QWORD *)&v17[v30];
              v34 = *(_QWORD *)&v26[v30 + 1];
              if (v33 != v34)
                break;
              v30 += 8;
              if ((v29 & 0xFFFFFFF8) == v30)
                goto LABEL_272;
            }
            v31 = v30 + (__clz(__rbit64(v34 ^ v33)) >> 3);
          }
LABEL_97:
          if (v31 != v29)
            goto LABEL_196;
          v68 = 9;
        }
        else
        {
          v64 = a2;
          v65 = v21 & 0x1F;
          if ((_DWORD)v24)
          {
            do
            {
              v67 = *v26++;
              v66 = v67;
              if ((v67 - 97) <= 0x19)
                v66 ^= 0x20u;
              if (v66 != *v64)
                goto LABEL_196;
              ++v64;
            }
            while (--v65);
          }
          v68 = 44;
        }
        v69 = v24 | (32 * ((v68 << v25) + v23));
        if (*(_DWORD *)(a5 + 4 * v24) < v69)
          v69 = *(_DWORD *)(a5 + 4 * v24);
        *(_DWORD *)(a5 + 4 * v24) = v69;
        v56 = v24 + 1;
        if (v24 + 1 >= a4)
        {
LABEL_134:
          v5 = 1;
        }
        else
        {
          v70 = &a2[v24];
          v5 = 1;
          switch(a2[v24])
          {
            case ' ':
              v71 = v22 == 10;
              v72 = 68;
              v73 = 4;
              goto LABEL_119;
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case ')':
            case '*':
            case '+':
            case '-':
              goto LABEL_196;
            case '"':
              v75 = 87;
              if (v22 == 10)
                v75 = 66;
              v76 = v24 | (32 * ((v75 << v25) + v23));
              if (*(_DWORD *)(a5 + 4 * v56) < v76)
                v76 = *(_DWORD *)(a5 + 4 * v56);
              *(_DWORD *)(a5 + 4 * v56) = v76;
              if (v70[1] != 62)
                goto LABEL_134;
              v77 = v22 == 10;
              v78 = 97;
              v79 = 69;
              goto LABEL_188;
            case '\'':
              v71 = v22 == 10;
              v72 = 94;
              v73 = 74;
              goto LABEL_119;
            case '(':
              v71 = v22 == 10;
              v72 = 113;
              v73 = 78;
LABEL_119:
              if (v71)
                v63 = v73;
              else
                v63 = v72;
              goto LABEL_192;
            case ',':
              v80 = 112;
              if (v22 == 10)
                v80 = 99;
              v81 = v24 | (32 * ((v80 << v25) + v23));
              if (*(_DWORD *)(a5 + 4 * v56) < v81)
                v81 = *(_DWORD *)(a5 + 4 * v56);
              *(_DWORD *)(a5 + 4 * v56) = v81;
              if (v70[1] != 32)
                goto LABEL_134;
              v77 = v22 == 10;
              v78 = 107;
              v79 = 58;
              goto LABEL_188;
            case '.':
              v82 = 101;
              if (v22 == 10)
                v82 = 79;
              v83 = v24 | (32 * ((v82 << v25) + v23));
              if (*(_DWORD *)(a5 + 4 * v56) < v83)
                v83 = *(_DWORD *)(a5 + 4 * v56);
              *(_DWORD *)(a5 + 4 * v56) = v83;
              if (v70[1] != 32)
                goto LABEL_134;
              v77 = v22 == 10;
              v78 = 114;
              v79 = 88;
              goto LABEL_188;
            default:
              if (a2[v24] != 61)
                goto LABEL_196;
              v74 = v70[1];
              if (v74 == 39)
              {
                v77 = v22 == 10;
                v78 = 116;
                v79 = 108;
LABEL_188:
                if (v77)
                  v63 = v79;
                else
                  v63 = v78;
              }
              else
              {
                if (v74 != 34)
                  goto LABEL_134;
                if (v22 == 10)
                  v63 = 104;
                else
                  v63 = 105;
              }
              v56 = v24 + 2;
LABEL_192:
              v5 = 1;
              break;
          }
LABEL_193:
          v98 = v24 | (32 * ((v63 << v25) + v23));
          if (*(_DWORD *)(a5 + 4 * v56) < v98)
            v98 = *(_DWORD *)(a5 + 4 * v56);
          *(_DWORD *)(a5 + 4 * v56) = v98;
        }
      }
LABEL_196:
      ++v16;
      if (v21 < 0)
        goto LABEL_279;
    }
  }
  v5 = 0;
LABEL_279:
  v109 = a4 - 5;
  if (a4 >= 5)
  {
    v110 = *a2;
    if (v110 == 46 || v110 == 32)
    {
      v111 = a2 + 1;
      v112 = *(unsigned __int16 *)(v14 + 2 * ((506832829 * *(_DWORD *)(a2 + 1)) >> 17));
      if (v112)
      {
        v113 = a4 - 1;
        v114 = a1[6];
        v115 = *a1;
        if (v110 == 32)
          v116 = 6;
        else
          v116 = 32;
        if (v110 == 32)
          v117 = 89;
        else
          v117 = 67;
        if (v110 == 32)
          v118 = 2;
        else
          v118 = 77;
        while (1)
        {
          v119 = (char *)(v114 + 4 * v112);
          v120 = *v119;
          v121 = v119[1];
          v122 = *((unsigned __int16 *)v119 + 1);
          v123 = *v119 & 0x1F;
          v124 = *(_BYTE *)(v115 + v123);
          if (!v119[1])
            break;
          if (v110 != 32 || v113 < v123)
            goto LABEL_368;
          v125 = (unsigned __int8 *)(*(_QWORD *)(v115 + 168)
                                   + *(unsigned int *)(v115 + 4 * (*v119 & 0x1F) + 32)
                                   + *((unsigned __int16 *)v119 + 1) * (unint64_t)(*v119 & 0x1F));
          if (v121 == 10)
          {
            v126 = *v125;
            if ((v126 - 97) > 0x19 || (v126 ^ 0x20) != *v111)
              goto LABEL_368;
            v127 = v116;
            v128 = v109;
            v129 = v118;
            v130 = v123 - 1;
            v131 = (v123 - 1);
            v132 = v117;
            if (v131 < 8)
            {
              v134 = 0;
              v230 = a2 + 2;
LABEL_388:
              v172 = v130 & 7;
              if (v172)
              {
                v173 = v134 | v172;
                v174 = v134 + 1;
                v175 = v230;
                while (v125[v174] == *v175)
                {
                  ++v175;
                  ++v174;
                  if (!--v172)
                  {
                    v134 = v173;
                    goto LABEL_336;
                  }
                }
                v134 = v174 - 1;
              }
            }
            else
            {
              v133 = 0;
              v134 = v130 & 0xFFFFFFF8;
              v135 = a2 + 2;
              v230 = &a2[v134 + 2];
              while (1)
              {
                v136 = *(_QWORD *)&v135[v133];
                v137 = *(_QWORD *)&v125[v133 + 1];
                if (v136 != v137)
                  break;
                v133 += 8;
                v135 = a2 + 2;
                if ((v131 & 0xFFFFFFF8) == v133)
                  goto LABEL_388;
              }
              v134 = v133 + (__clz(__rbit64(v137 ^ v136)) >> 3);
            }
LABEL_336:
            v117 = v132;
            v118 = v129;
            v109 = v128;
            v116 = v127;
            if (v134 != v131)
              goto LABEL_368;
            v154 = 30;
          }
          else
          {
            v150 = a2 + 1;
            v151 = v120 & 0x1F;
            if ((_DWORD)v123)
            {
              do
              {
                v153 = *v125++;
                v152 = v153;
                if ((v153 - 97) <= 0x19)
                  v152 ^= 0x20u;
                if (v152 != *v150)
                  goto LABEL_368;
                ++v150;
              }
              while (--v151);
            }
            v154 = 85;
          }
          v155 = (v154 << v124) + v122;
          v156 = v123 + 1;
          v157 = v123 | (32 * v155);
          if (*(_DWORD *)(a5 + 4 * (v123 + 1)) < v157)
            v157 = *(_DWORD *)(a5 + 4 * (v123 + 1));
          *(_DWORD *)(a5 + 4 * v156) = v157;
          v146 = v123 + 2;
          if (v123 + 2 >= a4)
            goto LABEL_367;
          v158 = &a2[v156];
          v159 = a2[v156];
          v5 = 1;
          if (v159 > 45)
          {
            if (v159 == 46)
            {
              v165 = 115;
              if (v121 == 10)
                v165 = 96;
              v166 = v123 | (32 * ((v165 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v166)
                v166 = *(_DWORD *)(a5 + 4 * v146);
              *(_DWORD *)(a5 + 4 * v146) = v166;
              if (v158[1] == 32)
              {
                v161 = v121 == 10;
                v149 = 117;
                v162 = 91;
                goto LABEL_361;
              }
              goto LABEL_367;
            }
            if (v159 == 61)
            {
              v163 = v158[1];
              if (v163 != 39)
              {
                if (v163 == 34)
                {
                  v161 = v121 == 10;
                  v149 = 110;
                  v162 = 118;
                  goto LABEL_361;
                }
LABEL_367:
                v5 = 1;
                goto LABEL_368;
              }
              v149 = 119;
              if (v121 == 10)
                v149 = 120;
LABEL_363:
              v146 = v123 + 3;
LABEL_364:
              v167 = v123 | (32 * ((v149 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v167)
                v167 = *(_DWORD *)(a5 + 4 * v146);
              *(_DWORD *)(a5 + 4 * v146) = v167;
              goto LABEL_367;
            }
          }
          else
          {
            if (v159 == 32)
            {
              v149 = 83;
              if (v121 == 10)
                v149 = 15;
              goto LABEL_364;
            }
            if (v159 == 44)
            {
              if (v121 == 10)
              {
                v160 = v123 | (32 * ((109 << v124) + v122));
                if (*(_DWORD *)(a5 + 4 * v146) < v160)
                  v160 = *(_DWORD *)(a5 + 4 * v146);
                *(_DWORD *)(a5 + 4 * v146) = v160;
              }
              if (v158[1] != 32)
                goto LABEL_367;
              v161 = v121 == 10;
              v149 = 111;
              v162 = 65;
LABEL_361:
              if (v161)
                v149 = v162;
              goto LABEL_363;
            }
          }
LABEL_368:
          ++v112;
          if (v120 < 0)
            goto LABEL_394;
        }
        if (v113 < v123)
          goto LABEL_368;
        v138 = *(_QWORD *)(v115 + 168)
             + *(unsigned int *)(v115 + 4 * (*v119 & 0x1F) + 32)
             + *((unsigned __int16 *)v119 + 1) * (unint64_t)(*v119 & 0x1F);
        if (v123 < 8)
        {
          v140 = 0;
          v141 = a2 + 1;
LABEL_382:
          v170 = v123 & 7;
          if ((v123 & 7) != 0)
          {
            v171 = v140 | v170;
            while (*(unsigned __int8 *)(v138 + v140) == *v141)
            {
              ++v141;
              ++v140;
              if (!--v170)
              {
                v140 = v171;
                break;
              }
            }
          }
        }
        else
        {
          v139 = 0;
          v140 = v123 & 0x18;
          v141 = &v111[v140];
          while (1)
          {
            v142 = *(_QWORD *)&v111[v139];
            v143 = *(_QWORD *)(v138 + v139);
            if (v142 != v143)
              break;
            v139 += 8;
            if (v140 == v139)
              goto LABEL_382;
          }
          v140 = v139 + (__clz(__rbit64(v143 ^ v142)) >> 3);
        }
        if (v140 != v123)
          goto LABEL_368;
        v144 = v123 + 1;
        v145 = v123 | (32 * ((v116 << v124) + v122));
        if (*(_DWORD *)(a5 + 4 * (v123 + 1)) < v145)
          v145 = *(_DWORD *)(a5 + 4 * (v123 + 1));
        *(_DWORD *)(a5 + 4 * v144) = v145;
        v146 = v123 + 2;
        if (v123 + 2 >= a4)
          goto LABEL_367;
        v147 = &a2[v144];
        v148 = *v147;
        if (v148 == 32)
        {
          v149 = v118;
        }
        else if (v148 == 40)
        {
          v149 = v117;
        }
        else
        {
          if (v110 != 32)
            goto LABEL_367;
          switch(v148)
          {
            case '=':
              v168 = v147[1];
              if (v168 == 39)
              {
                v146 = v123 + 3;
                v149 = 98;
              }
              else
              {
                if (v168 != 34)
                  goto LABEL_367;
                v146 = v123 + 3;
                v149 = 81;
              }
              break;
            case '.':
              v169 = v123 | (32 * ((71 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v169)
                v169 = *(_DWORD *)(a5 + 4 * v146);
              *(_DWORD *)(a5 + 4 * v146) = v169;
              if (v147[1] != 32)
                goto LABEL_367;
              v146 = v123 + 3;
              v149 = 52;
              break;
            case ',':
              v164 = v123 | (32 * ((103 << v124) + v122));
              if (*(_DWORD *)(a5 + 4 * v146) < v164)
                v164 = *(_DWORD *)(a5 + 4 * v146);
              *(_DWORD *)(a5 + 4 * v146) = v164;
              if (v147[1] != 32)
                goto LABEL_367;
              v146 = v123 + 3;
              v149 = 33;
              break;
            default:
              goto LABEL_367;
          }
        }
        goto LABEL_364;
      }
    }
LABEL_394:
    if (a4 < 6)
      return v5;
    v176 = a2[1];
    v177 = *a2;
    if (v176 == 32)
    {
      if (v177 != 44 && v177 != 101 && v177 != 115)
        goto LABEL_437;
    }
    else if (v176 != 160 || v177 != 194)
    {
      goto LABEL_437;
    }
    v178 = a1[5];
    v179 = a2 + 2;
    v180 = *(unsigned __int16 *)(v178 + 2 * ((506832829 * *(_DWORD *)(a2 + 2)) >> 17));
    if (!*(_WORD *)(v178 + 2 * ((506832829 * *(_DWORD *)(a2 + 2)) >> 17)))
    {
LABEL_437:
      if (a4 < 9)
        return v5;
      v201 = *a2;
      if (v201 == 46)
      {
        if (a2[1] != 99 || a2[2] != 111 || a2[3] != 109 || a2[4] != 47)
          return v5;
      }
      else if (v201 != 32 || a2[1] != 116 || a2[2] != 104 || a2[3] != 101 || a2[4] != 32)
      {
        return v5;
      }
      v202 = a2 + 5;
      v203 = (506832829 * *(_DWORD *)(a2 + 5)) >> 17;
      v204 = *(unsigned __int16 *)(a1[5] + 2 * v203);
      if (!*(_WORD *)(a1[5] + 2 * v203))
        return v5;
      v205 = a1[6];
      v206 = *a1;
      while (1)
      {
        v207 = (char *)(v205 + 4 * v204);
        v208 = *v207;
        v209 = *v207 & 0x1F;
        if (v207[1])
          v210 = 0;
        else
          v210 = v109 >= v209;
        if (!v210)
          goto LABEL_486;
        v211 = *((unsigned __int16 *)v207 + 1);
        v212 = *(_QWORD *)(v206 + 168)
             + *(unsigned int *)(v206 + 4 * v209 + 32)
             + v211 * (unint64_t)v209;
        if (v209 < 8)
        {
          v214 = 0;
          v215 = a2 + 5;
LABEL_489:
          v227 = v209 & 7;
          if ((v209 & 7) != 0)
          {
            v228 = v214 | v227;
            while (*(unsigned __int8 *)(v212 + v214) == *v215)
            {
              ++v215;
              ++v214;
              if (!--v227)
              {
                v214 = v228;
                break;
              }
            }
          }
        }
        else
        {
          v213 = 0;
          v214 = v209 & 0x18;
          v215 = &v202[v214];
          while (1)
          {
            v216 = *(_QWORD *)&v202[v213];
            v217 = *(_QWORD *)(v212 + v213);
            if (v216 != v217)
              break;
            v213 += 8;
            if (v214 == v213)
              goto LABEL_489;
          }
          v214 = v213 + (__clz(__rbit64(v217 ^ v216)) >> 3);
        }
        if (v214 != v209)
          goto LABEL_486;
        v218 = *(_BYTE *)(v206 + v209);
        if (*a2 == 32)
          v219 = 41;
        else
          v219 = 72;
        v220 = v209 + 5;
        v221 = v209 | (32 * ((v219 << v218) + v211));
        if (*(_DWORD *)(a5 + 4 * (v209 + 5)) < v221)
          v221 = *(_DWORD *)(a5 + 4 * (v209 + 5));
        *(_DWORD *)(a5 + 4 * v220) = v221;
        if (v220 < a4)
        {
          v5 = 1;
          if (*a2 != 32 || v209 + 8 >= a4)
            goto LABEL_486;
          v222 = &a2[v220];
          if (a2[v220] == 32 && v222[1] == 111 && v222[2] == 102 && v222[3] == 32)
          {
            v223 = v209 | (32 * ((62 << v218) + v211));
            v224 = a5 + 4 * v209;
            if (*(_DWORD *)(v224 + 36) < v223)
              v223 = *(_DWORD *)(v224 + 36);
            *(_DWORD *)(v224 + 36) = v223;
            if (v209 + 12 < a4 && v222[4] == 116 && v222[5] == 104 && v222[6] == 101 && v222[7] == 32)
            {
              v225 = v209 | (32 * ((73 << v218) + v211));
              v226 = a5 + 4 * v209;
              if (*(_DWORD *)(v226 + 52) < v225)
                v225 = *(_DWORD *)(v226 + 52);
              *(_DWORD *)(v226 + 52) = v225;
            }
          }
        }
        v5 = 1;
LABEL_486:
        ++v204;
        if (v208 < 0)
          return v5;
      }
    }
    v181 = a1[6];
    v182 = *a1;
    while (1)
    {
      v183 = (char *)(v181 + 4 * v180);
      v184 = *v183;
      v185 = *v183 & 0x1F;
      if (v183[1])
        v186 = 0;
      else
        v186 = a4 - 2 >= v185;
      if (!v186)
        goto LABEL_429;
      v187 = *((unsigned __int16 *)v183 + 1);
      v188 = *(_QWORD *)(v182 + 168)
           + *(unsigned int *)(v182 + 4 * (*v183 & 0x1F) + 32)
           + *((unsigned __int16 *)v183 + 1) * (unint64_t)(*v183 & 0x1F);
      if (v185 < 8)
      {
        v190 = 0;
        v191 = a2 + 2;
LABEL_432:
        v199 = v185 & 7;
        if ((v185 & 7) != 0)
        {
          v200 = v190 | v199;
          while (*(unsigned __int8 *)(v188 + v190) == *v191)
          {
            ++v191;
            ++v190;
            if (!--v199)
            {
              v190 = v200;
              break;
            }
          }
        }
      }
      else
      {
        v189 = 0;
        v190 = *v183 & 0x18;
        v191 = &v179[v190];
        while (1)
        {
          v192 = *(_QWORD *)&v179[v189];
          v193 = *(_QWORD *)(v188 + v189);
          if (v192 != v193)
            break;
          v189 += 8;
          if (v190 == v189)
            goto LABEL_432;
        }
        v190 = v189 + (__clz(__rbit64(v193 ^ v192)) >> 3);
      }
      if (v190 != v185)
        goto LABEL_429;
      v194 = *a2;
      if (v194 == 194)
        break;
      if (v185 + 2 < a4 && a2[v185 + 2] == 32)
      {
        if (v194 == 115)
          v195 = 7;
        else
          v195 = 13;
        if (v194 == 101)
          v195 = 18;
        v196 = 3;
        goto LABEL_418;
      }
LABEL_429:
      ++v180;
      if (v184 < 0)
        goto LABEL_437;
    }
    v195 = 102;
    v196 = 2;
LABEL_418:
    v197 = v196 + v185;
    v198 = v185 | (32 * ((v195 << *(_BYTE *)(v182 + v185)) + v187));
    if (*(_DWORD *)(a5 + 4 * v197) < v198)
      v198 = *(_DWORD *)(a5 + 4 * v197);
    *(_DWORD *)(a5 + 4 * v197) = v198;
    v5 = 1;
    goto LABEL_429;
  }
  return v5;
}

BOOL sub_2367BE1BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  double v19;

  if (!a4)
  {
    v19 = 0.0;
    return (double)a4 * 0.75 < v19;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (char *)(a1 + ((v4 + a2) & a3));
    v7 = *v6;
    if (*v6 <= 0)
    {
      v8 = a4 - v4;
      if (a4 - v4 >= 2)
      {
        if ((v7 & 0xE0) == 0xC0)
        {
          v9 = v6[1];
          if ((v9 & 0xC0) == 0x80)
          {
            v10 = v9 & 0x3F | ((v7 & 0x1F) << 6);
            if (v10 > 0x7F)
            {
              v7 = v10;
              v11 = 2;
              goto LABEL_24;
            }
          }
        }
        if (v8 >= 3)
        {
          if ((v7 & 0xF0) == 0xE0)
          {
            v12 = v6[1];
            if ((v12 & 0xC0) == 0x80)
            {
              v13 = v6[2];
              if ((v13 & 0xC0) == 0x80 && (((v7 & 0xF) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F) > 0x7FF)
              {
                v7 = ((v7 & 0xF) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F;
                v11 = 3;
                goto LABEL_24;
              }
            }
          }
          if (v8 >= 4 && (v7 & 0xF8) == 0xF0)
          {
            v14 = v6[1];
            if ((v14 & 0xC0) == 0x80)
            {
              v15 = v6[2];
              if ((v15 & 0xC0) == 0x80)
              {
                v16 = v6[3];
                if ((v16 & 0xC0) == 0x80)
                {
                  v17 = ((v7 & 7) << 18) | ((v14 & 0x3F) << 12);
                  if ((v17 - 0x10000) < 0x100000)
                  {
                    v7 = v16 & 0x3F | ((v15 & 0x3F) << 6) | v17;
                    v11 = 4;
                    goto LABEL_24;
                  }
                }
              }
            }
          }
        }
      }
      v7 |= 0x110000u;
    }
    v11 = 1;
LABEL_24:
    v4 += v11;
    if (v7 >= 0x110000)
      v18 = 0;
    else
      v18 = v11;
    v5 += v18;
  }
  while (v4 < a4);
  v19 = (double)v5;
  return (double)a4 * 0.75 < v19;
}

uint64_t sub_2367BE330(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;
  __int128 v4;

  if (*((_DWORD *)a1 + 2) != 64)
    return 1;
  v1 = a1[3];
  if (v1)
  {
    v2 = *a1;
    *a1 >>= 8;
    v3 = (unsigned __int8 *)a1[2];
    *((_QWORD *)&v4 + 1) = *v3;
    *(_QWORD *)&v4 = v2;
    *a1 = v4 >> 8;
    *((_DWORD *)a1 + 2) = 56;
    a1[2] = (unint64_t)(v3 + 1);
    a1[3] = v1 - 1;
    return 1;
  }
  return 0;
}

uint64_t sub_2367BE380(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t, _QWORD *);
  uint64_t v5;
  uint64_t (*v7)(uint64_t, _QWORD *);

  v7 = (uint64_t (*)(uint64_t, _QWORD *))a1[6];
  v2 = a1[7];
  sub_2367C2C38((uint64_t)a1);
  ((void (*)(_QWORD, _QWORD))a1[6])(a1[7], a1[89]);
  a1[89] = 0;
  v3 = (_QWORD *)a1[88];
  if (v3)
  {
    v4 = (void (*)(uint64_t, _QWORD *))v3[174];
    v5 = v3[175];
    v4(v5, (_QWORD *)v3[169]);
    v4(v5, (_QWORD *)v3[171]);
    v4(v5, (_QWORD *)v3[172]);
    v4(v5, v3);
  }
  a1[88] = 0;
  ((void (*)(_QWORD, _QWORD))a1[6])(a1[7], a1[15]);
  a1[15] = 0;
  ((void (*)(_QWORD, _QWORD))a1[6])(a1[7], a1[30]);
  a1[30] = 0;
  return v7(v2, a1);
}

uint64_t sub_2367BE448(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 116) = a2;
  *(_QWORD *)(a1 + 648) += a3;
  if (a2 - 1 >= 3)
    return 0;
  else
    return a2;
}

uint64_t sub_2367BE468(uint64_t a1, size_t *a2, void **a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  void *v15;
  size_t v16;
  int v18;
  int v20;
  BOOL v21;
  int v22;

  v4 = *(int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 76) >= (int)v4)
    v5 = *(_DWORD *)(a1 + 88);
  else
    v5 = *(_DWORD *)(a1 + 76);
  v6 = *(_QWORD *)(a1 + 376);
  v7 = *(_QWORD *)(a1 + 368) * v4 - v6;
  v8 = v7 + v5;
  v9 = *a2;
  if (*a2 >= v8)
    v10 = v7 + v5;
  else
    v10 = *a2;
  if ((*(_DWORD *)(a1 + 264) & 0x80000000) != 0)
    return 4294967287;
  if (a3)
  {
    v15 = (void *)(*(_QWORD *)(a1 + 120) + (v6 & *(int *)(a1 + 92)));
    if (*a3)
    {
      memcpy(*a3, v15, v10);
      *a3 = (char *)*a3 + v10;
      v16 = *a2;
      LODWORD(v4) = *(_DWORD *)(a1 + 88);
      goto LABEL_14;
    }
    *a3 = v15;
  }
  v16 = v9;
LABEL_14:
  *a2 = v16 - v10;
  *(_QWORD *)(a1 + 376) += v10;
  v18 = 1 << *(_DWORD *)(a1 + 676);
  if (v8 <= v9)
  {
    if ((_DWORD)v4 == v18)
    {
      v20 = *(_DWORD *)(a1 + 76);
      v21 = __OFSUB__(v20, (_DWORD)v4);
      v22 = v20 - v4;
      if (v22 < 0 == v21)
      {
        *(_DWORD *)(a1 + 76) = v22;
        ++*(_QWORD *)(a1 + 368);
        *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xFFF7 | (8 * (v22 != 0));
      }
    }
    return 1;
  }
  else if ((_DWORD)v4 != v18 && a4 == 0)
  {
    return 1;
  }
  else
  {
    return 3;
  }
}

uint64_t sub_2367BE5A0(uint64_t a1, unint64_t *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  __int128 v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  __int128 v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unint64_t v56;
  __int128 v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  __int128 v65;
  int v66;
  unsigned int v67;
  int v70;

  v2 = *(_DWORD *)(a1 + 656);
  while (2)
  {
    switch(v2)
    {
      case 0:
        v3 = *((_DWORD *)a2 + 2);
        if (v3 == 64)
        {
          v4 = a2[3];
          if (!v4)
            return 2;
          v5 = *a2;
          *a2 >>= 8;
          v6 = (unsigned __int8 *)a2[2];
          *((_QWORD *)&v8 + 1) = *v6;
          *(_QWORD *)&v8 = v5;
          v7 = v8 >> 8;
          *a2 = v7;
          a2[2] = (unint64_t)(v6 + 1);
          a2[3] = v4 - 1;
          v3 = 56;
        }
        else
        {
          v7 = *a2;
        }
        *((_DWORD *)a2 + 2) = v3 + 1;
        v10 = v7 & (1 << v3);
        v11 = *(_WORD *)(a1 + 672) & 0xFFF8 | (v10 != 0);
        *(_DWORD *)(a1 + 264) = 0;
        *(_WORD *)(a1 + 672) = v11;
        if (v10)
        {
          *(_DWORD *)(a1 + 656) = 1;
          goto LABEL_10;
        }
        v2 = 2;
        goto LABEL_22;
      case 1:
LABEL_10:
        v12 = *((_DWORD *)a2 + 2);
        if (v12 == 64)
        {
          v13 = a2[3];
          if (!v13)
            return 2;
          v14 = *a2;
          *a2 >>= 8;
          v15 = (unsigned __int8 *)a2[2];
          *((_QWORD *)&v17 + 1) = *v15;
          *(_QWORD *)&v17 = v14;
          v16 = v17 >> 8;
          *a2 = v16;
          a2[2] = (unint64_t)(v15 + 1);
          a2[3] = v13 - 1;
          v12 = 56;
        }
        else
        {
          v16 = *a2;
        }
        v9 = v12 + 1;
        *((_DWORD *)a2 + 2) = v12 + 1;
        if (((v16 >> v12) & 1) != 0)
          goto LABEL_84;
        *(_DWORD *)(a1 + 656) = 2;
LABEL_16:
        if ((v9 - 63) >= 2)
        {
          v21 = *a2;
        }
        else
        {
          v18 = a2[3];
          if (!v18)
            return 2;
          v19 = *a2;
          *a2 >>= 8;
          v20 = (unsigned __int8 *)a2[2];
          *((_QWORD *)&v22 + 1) = *v20;
          *(_QWORD *)&v22 = v19;
          v21 = v22 >> 8;
          *a2 = v21;
          v9 -= 8;
          a2[2] = (unint64_t)(v20 + 1);
          a2[3] = v18 - 1;
        }
        v23 = v21 >> v9;
        *((_DWORD *)a2 + 2) = v9 + 2;
        v24 = *(_WORD *)(a1 + 672) & 0xC03F | ((v23 & 3) << 6) | 0x100;
        *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xC03F | ((v23 & 3) << 6) | 0x100;
        *(_DWORD *)(a1 + 4) = 0;
        if ((v23 & 3) == 3)
        {
          *(_WORD *)(a1 + 672) = v24 | 4;
          v2 = 5;
LABEL_22:
          *(_DWORD *)(a1 + 656) = v2;
          continue;
        }
        v25 = 0;
        *(_DWORD *)(a1 + 656) = 3;
LABEL_27:
        if (v25 < (v24 >> 6))
        {
          v27 = *((_DWORD *)a2 + 2);
          v28 = 4 * v25;
          do
          {
            if ((v27 - 61) >= 4)
            {
              v32 = *a2;
            }
            else
            {
              v29 = a2[3];
              if (!v29)
              {
LABEL_85:
                *(_DWORD *)(a1 + 4) = v25;
                return 2;
              }
              v30 = *a2;
              *a2 >>= 8;
              v31 = (unsigned __int8 *)a2[2];
              *((_QWORD *)&v33 + 1) = *v31;
              *(_QWORD *)&v33 = v30;
              v32 = v33 >> 8;
              *a2 = v32;
              v27 -= 8;
              a2[2] = (unint64_t)(v31 + 1);
              a2[3] = v29 - 1;
            }
            v34 = (v32 >> v27) & 0xF;
            v27 += 4;
            *((_DWORD *)a2 + 2) = v27;
            ++v25;
            v24 = *(unsigned __int16 *)(a1 + 672);
            v35 = (v24 >> 6);
            if (v25 == v35 && v35 >= 5 && (_DWORD)v34 == 0)
              return 0xFFFFFFFFLL;
            *(_DWORD *)(a1 + 264) |= (_DWORD)v34 << v28;
            v28 += 4;
          }
          while (v25 < (int)v35);
        }
        *(_DWORD *)(a1 + 656) = 4;
        if ((v24 & 1) == 0)
        {
LABEL_44:
          v38 = *((_DWORD *)a2 + 2);
          if (v38 == 64)
          {
            v39 = a2[3];
            if (!v39)
              return 2;
            v40 = *a2;
            *a2 >>= 8;
            v41 = (unsigned __int8 *)a2[2];
            *((_QWORD *)&v43 + 1) = *v41;
            *(_QWORD *)&v43 = v40;
            v42 = v43 >> 8;
            *a2 = v42;
            a2[2] = (unint64_t)(v41 + 1);
            a2[3] = v39 - 1;
            v38 = 56;
          }
          else
          {
            v42 = *a2;
          }
          *((_DWORD *)a2 + 2) = v38 + 1;
          *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xFFFD | (2 * ((v42 >> v38) & 1));
        }
LABEL_54:
        v52 = *(_DWORD *)(a1 + 264) + 1;
LABEL_83:
        *(_DWORD *)(a1 + 264) = v52;
LABEL_84:
        *(_DWORD *)(a1 + 656) = 0;
        return 1;
      case 2:
        v9 = *((_DWORD *)a2 + 2);
        goto LABEL_16;
      case 3:
        v25 = *(_DWORD *)(a1 + 4);
        v24 = *(unsigned __int16 *)(a1 + 672);
        goto LABEL_27;
      case 4:
        if ((*(_WORD *)(a1 + 672) & 1) == 0)
          goto LABEL_44;
        goto LABEL_54;
      case 5:
        v44 = *((_DWORD *)a2 + 2);
        if (v44 == 64)
        {
          v45 = a2[3];
          if (!v45)
            return 2;
          v46 = *a2;
          *a2 >>= 8;
          v47 = (unsigned __int8 *)a2[2];
          *((_QWORD *)&v49 + 1) = *v47;
          *(_QWORD *)&v49 = v46;
          v48 = v49 >> 8;
          *a2 = v48;
          a2[2] = (unint64_t)(v47 + 1);
          a2[3] = v45 - 1;
          v44 = 56;
        }
        else
        {
          v48 = *a2;
        }
        v50 = v44 + 1;
        *((_DWORD *)a2 + 2) = v44 + 1;
        if (((v48 >> v44) & 1) != 0)
          return 4294967294;
        *(_DWORD *)(a1 + 656) = 6;
LABEL_60:
        if ((v50 - 63) >= 2)
        {
          v56 = *a2;
        }
        else
        {
          v53 = a2[3];
          if (!v53)
            return 2;
          v54 = *a2;
          *a2 >>= 8;
          v55 = (unsigned __int8 *)a2[2];
          *((_QWORD *)&v57 + 1) = *v55;
          *(_QWORD *)&v57 = v54;
          v56 = v57 >> 8;
          *a2 = v56;
          v50 -= 8;
          a2[2] = (unint64_t)(v55 + 1);
          a2[3] = v53 - 1;
        }
        *((_DWORD *)a2 + 2) = v50 + 2;
        v58 = (v56 >> v50) & 3;
        if (!v58)
          goto LABEL_84;
        v51 = *(_WORD *)(a1 + 672) & 0xC03F | (v58 << 6);
        *(_WORD *)(a1 + 672) = *(_WORD *)(a1 + 672) & 0xC03F | ((_WORD)v58 << 6);
        *(_DWORD *)(a1 + 656) = 7;
LABEL_66:
        v25 = *(_DWORD *)(a1 + 4);
        if (v25 >= (v51 >> 6))
        {
          v70 = *(_DWORD *)(a1 + 264);
        }
        else
        {
          v59 = *((_DWORD *)a2 + 2);
          v60 = 8 * v25;
          do
          {
            if ((v59 - 57) >= 8)
            {
              v64 = *a2;
            }
            else
            {
              v61 = a2[3];
              if (!v61)
                goto LABEL_85;
              v62 = *a2;
              *a2 >>= 8;
              v63 = (unsigned __int8 *)a2[2];
              *((_QWORD *)&v65 + 1) = *v63;
              *(_QWORD *)&v65 = v62;
              v64 = v65 >> 8;
              *a2 = v64;
              v59 -= 8;
              a2[2] = (unint64_t)(v63 + 1);
              a2[3] = v61 - 1;
            }
            v66 = (v64 >> v59);
            v59 += 8;
            *((_DWORD *)a2 + 2) = v59;
            ++v25;
            v67 = (*(unsigned __int16 *)(a1 + 672) >> 6);
            if (v25 == v67 && v67 >= 2 && v66 == 0)
              return 4294967293;
            v70 = *(_DWORD *)(a1 + 264) | (v66 << v60);
            *(_DWORD *)(a1 + 264) = v70;
            v60 += 8;
          }
          while (v25 < (int)v67);
        }
        v52 = v70 + 1;
        goto LABEL_83;
      case 6:
        v50 = *((_DWORD *)a2 + 2);
        goto LABEL_60;
      case 7:
        v51 = *(unsigned __int16 *)(a1 + 672);
        goto LABEL_66;
      default:
        return 4294967265;
    }
  }
}

uint64_t sub_2367BEA44(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  int v7;

  v1 = 1 << *(_DWORD *)(result + 676);
  v2 = *(_DWORD *)(result + 88);
  if (v2)
    v3 = *(_DWORD *)(result + 88);
  else
    v3 = 1024;
  if (v2 != v1)
  {
    v4 = *(_WORD *)(result + 672);
    if ((v4 & 4) == 0)
    {
      v5 = *(_QWORD *)(result + 120);
      if (v5)
        LODWORD(v5) = *(_DWORD *)(result + 76);
      v6 = *(_DWORD *)(result + 264) + v5;
      if (v3 <= v6)
        v3 = v6;
      if ((v4 & 0x10) != 0)
      {
        do
        {
          v7 = v1;
          v1 >>= 1;
        }
        while (v1 >= v3);
      }
      else
      {
        v7 = 1 << *(_DWORD *)(result + 676);
      }
      *(_DWORD *)(result + 680) = v7;
    }
  }
  return result;
}

uint64_t sub_2367BEAB0(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __int128 v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  __int128 v24;
  int v25;

  v3 = *(_DWORD *)(a1 + 664);
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 != 2)
        return 4294967265;
      v4 = *a3;
      goto LABEL_18;
    }
    v11 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v5 = *((_DWORD *)a2 + 2);
    if (v5 == 64)
    {
      v6 = a2[3];
      if (!v6)
        return 2;
      v7 = *a2;
      *a2 >>= 8;
      v8 = (unsigned __int8 *)a2[2];
      *((_QWORD *)&v10 + 1) = *v8;
      *(_QWORD *)&v10 = v7;
      v9 = v10 >> 8;
      *a2 = v9;
      a2[2] = (unint64_t)(v8 + 1);
      a2[3] = v6 - 1;
      v5 = 56;
    }
    else
    {
      v9 = *a2;
    }
    v11 = v5 + 1;
    *((_DWORD *)a2 + 2) = v5 + 1;
    if (((v9 >> v5) & 1) == 0)
    {
      *a3 = 0;
      return 1;
    }
  }
  if ((v11 - 62) >= 3)
  {
    v16 = *a2;
    goto LABEL_16;
  }
  v13 = a2[3];
  if (!v13)
  {
    *(_DWORD *)(a1 + 664) = 1;
    return 2;
  }
  v14 = *a2;
  *a2 >>= 8;
  v15 = (unsigned __int8 *)a2[2];
  *((_QWORD *)&v17 + 1) = *v15;
  *(_QWORD *)&v17 = v14;
  v16 = v17 >> 8;
  *a2 = v16;
  v11 -= 8;
  a2[2] = (unint64_t)(v15 + 1);
  a2[3] = v13 - 1;
LABEL_16:
  *((_DWORD *)a2 + 2) = v11 + 3;
  v4 = (v16 >> v11) & 7;
  if (!v4)
  {
    v12 = 1;
    *a3 = 1;
LABEL_26:
    *(_DWORD *)(a1 + 664) = 0;
    return v12;
  }
  *a3 = v4;
LABEL_18:
  v18 = *((_DWORD *)a2 + 2);
  v19 = 64 - v18;
  if (64 - v18 >= v4)
  {
    v23 = *a2;
LABEL_24:
    v25 = (v23 >> v18) & ~(-1 << v4);
    *((_DWORD *)a2 + 2) = v18 + v4;
    v12 = 1;
    *a3 = (1 << *a3) + v25;
    goto LABEL_26;
  }
  v20 = a2[3] - 1;
  while (v20 != -1)
  {
    v21 = *a2;
    *a2 >>= 8;
    v22 = (unsigned __int8 *)a2[2];
    *((_QWORD *)&v24 + 1) = *v22;
    *(_QWORD *)&v24 = v21;
    v23 = v24 >> 8;
    *a2 = v23;
    v18 -= 8;
    *((_DWORD *)a2 + 2) = v18;
    a2[2] = (unint64_t)(v22 + 1);
    a2[3] = v20--;
    v19 += 8;
    if (v19 >= v4)
      goto LABEL_24;
  }
  v12 = 2;
  *(_DWORD *)(a1 + 664) = 2;
  return v12;
}

uint64_t sub_2367BEC60(int a1, unsigned int a2, char *__src, int *a4, uint64_t a5)
{
  unint64_t *v8;
  int v9;
  int *v10;
  _OWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  __int128 v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  __int128 v66;
  unsigned int v67;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t j;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unsigned __int16 *v96;
  unsigned int i;
  uint64_t v98;
  int32x4_t v99;
  unint64_t v100;
  _OWORD *v101;
  __int128 v102;
  int32x2_t v103;
  int64x2_t v104;
  __int128 v105;
  int32x2_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t *v109;
  unsigned int v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int *v116;
  __int128 v117;
  unsigned __int8 *v118;
  unsigned int v119;
  uint64_t v120;
  BOOL v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  BOOL v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned __int8 *v139;
  __int128 v140;
  int v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  unsigned int v148;
  char v149;
  int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int16 v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  int v186;
  int v187;
  char *v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  int v195;
  unint64_t v196;
  char *v197;
  int v198;
  unint64_t v199;
  int v200;
  unsigned __int8 v201;
  uint64_t v202;
  int v203;
  int v204;
  unint64_t v205;
  char *v206;
  int v207;
  __int16 v208;
  int v209;
  int *v210;
  int *v211;
  unsigned int v212;
  _DWORD v213[6];
  _DWORD v214[18];
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t *)(a5 + 8);
  v9 = *(_DWORD *)(a5 + 760);
  v10 = (int *)(a5 + 780);
  v11 = (_OWORD *)(a5 + 2514);
  if (!v9)
  {
    v12 = *(_DWORD *)(a5 + 16);
    if ((v12 - 63) >= 2)
    {
      v16 = *v8;
    }
    else
    {
      v13 = *(_QWORD *)(a5 + 32);
      if (!v13)
        return 2;
      v14 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)(a5 + 8) = v14 >> 8;
      v15 = *(unsigned __int8 **)(a5 + 24);
      *((_QWORD *)&v17 + 1) = *v15;
      *(_QWORD *)&v17 = v14;
      v16 = v17 >> 8;
      *(_QWORD *)(a5 + 8) = v16;
      v12 -= 8;
      *(_QWORD *)(a5 + 24) = v15 + 1;
      *(_QWORD *)(a5 + 32) = v13 - 1;
    }
    v18 = (v16 >> v12) & 3;
    *(_DWORD *)(a5 + 764) = v18;
    v19 = v12 + 2;
    *(_DWORD *)(a5 + 16) = v19;
    if ((_DWORD)v18 != 1)
    {
      *(_QWORD *)v10 = 0x2000000000;
      *(_QWORD *)(a5 + 2504) = 0;
      *(_QWORD *)(a5 + 2512) = 0;
      *(_QWORD *)(a5 + 2496) = 0;
      *(_QWORD *)(a5 + 2518) = 0;
      v9 = 4;
      *(_DWORD *)(a5 + 760) = 4;
      goto LABEL_8;
    }
LABEL_10:
    if ((v19 - 63) >= 2)
    {
      v23 = *v8;
    }
    else
    {
      v20 = *(_QWORD *)(a5 + 32);
      if (!v20)
      {
        v45 = 1;
LABEL_180:
        *(_DWORD *)(a5 + 760) = v45;
        return 2;
      }
      v21 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)(a5 + 8) = v21 >> 8;
      v22 = *(unsigned __int8 **)(a5 + 24);
      *((_QWORD *)&v24 + 1) = *v22;
      *(_QWORD *)&v24 = v21;
      v23 = v24 >> 8;
      *(_QWORD *)(a5 + 8) = v23;
      v19 -= 8;
      *(_QWORD *)(a5 + 24) = v22 + 1;
      *(_QWORD *)(a5 + 32) = v20 - 1;
    }
    *(_DWORD *)(a5 + 776) = (v23 >> v19) & 3;
    *(_DWORD *)(a5 + 16) = v19 + 2;
    *(_DWORD *)(a5 + 764) = 0;
LABEL_38:
    v52 = 0;
    v53 = a1 - 1;
    if (a1 != 1)
    {
      do
      {
        ++v52;
        v54 = v53 > 1;
        v53 >>= 1;
      }
      while (v54);
    }
    v55 = *(_DWORD *)(a5 + 764);
    v25 = *(unsigned int *)(a5 + 776);
    if (v55 <= v25)
    {
      v60 = *(_DWORD *)(a5 + 16);
      do
      {
        v61 = 64 - v60;
        if (64 - v60 >= v52)
        {
          v65 = *v8;
        }
        else
        {
          v62 = *(_QWORD *)(a5 + 32) - 1;
          do
          {
            if (v62 == -1)
            {
              *(_DWORD *)(a5 + 764) = v55;
              result = 2;
              *(_DWORD *)(a5 + 760) = 2;
              return result;
            }
            v63 = *(_QWORD *)(a5 + 8);
            *(_QWORD *)(a5 + 8) = v63 >> 8;
            v64 = *(unsigned __int8 **)(a5 + 24);
            *((_QWORD *)&v66 + 1) = *v64;
            *(_QWORD *)&v66 = v63;
            v65 = v66 >> 8;
            *(_QWORD *)(a5 + 8) = v65;
            v60 -= 8;
            *(_DWORD *)(a5 + 16) = v60;
            *(_QWORD *)(a5 + 24) = v64 + 1;
            *(_QWORD *)(a5 + 32) = v62--;
            v61 += 8;
          }
          while (v61 < v52);
        }
        v67 = (v65 >> v60) & ~(-1 << v52);
        v60 += v52;
        *(_DWORD *)(a5 + 16) = v60;
        if (v67 >= a2)
          return 4294967292;
        *(_WORD *)(a5 + 2 * v55++ + 928) = v67;
      }
      while (v55 <= v25);
    }
    if (!(_DWORD)v25)
    {
      v96 = (unsigned __int16 *)(a5 + 928);
LABEL_81:
      *(_DWORD *)__src = *v96 << 16;
LABEL_82:
      for (i = 1; i != 256; i *= 2)
LABEL_234:
        memcpy(&__src[4 * i], __src, 4 * i);
      if (a4)
        *a4 = 256;
      goto LABEL_237;
    }
    v56 = 0;
    while (2)
    {
      v57 = a5 + 2 * v56++;
      v58 = *(unsigned __int16 *)(v57 + 928);
      v59 = v56;
      do
      {
        if (v58 == *(unsigned __int16 *)(a5 + 2 * v59 + 928))
          return 4294967291;
        ++v59;
      }
      while (v59 <= v25);
      if (v56 != v25)
        continue;
      break;
    }
LABEL_14:
    if ((_DWORD)v25 != 3)
    {
LABEL_80:
      v96 = (unsigned __int16 *)(a5 + 928);
      switch((int)v25)
      {
        case 0:
          goto LABEL_81;
        case 1:
          v160 = *(unsigned __int16 *)(a5 + 930);
          v161 = *(unsigned __int16 *)(a5 + 928);
          if (v160 <= v161)
          {
            *(_DWORD *)__src = (v160 << 16) | 1;
            v162 = (*v96 << 16) | 1;
          }
          else
          {
            *(_DWORD *)__src = (v161 << 16) | 1;
            v162 = (*(unsigned __int16 *)(a5 + 930) << 16) | 1;
          }
          *((_DWORD *)__src + 1) = v162;
          i = 2;
          goto LABEL_234;
        case 2:
          *(_DWORD *)__src = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 2) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          v163 = *(unsigned __int16 *)(a5 + 932);
          v164 = *(unsigned __int16 *)(a5 + 930);
          if (v163 <= v164)
          {
            *((_DWORD *)__src + 1) = (v163 << 16) | 2;
            v172 = *(unsigned __int16 *)(a5 + 930);
LABEL_232:
            v165 = (v172 << 16) | 2;
          }
          else
          {
            *((_DWORD *)__src + 1) = (v164 << 16) | 2;
            v165 = (*(unsigned __int16 *)(a5 + 932) << 16) | 2;
          }
          *((_DWORD *)__src + 3) = v165;
          i = 4;
          break;
        case 3:
          v166 = 0;
          v167 = 0;
          v168 = a5 + 930;
          do
          {
            v169 = v96[v167];
            v170 = v166;
            do
            {
              v171 = *(unsigned __int16 *)(v168 + v170);
              if (v171 < v169)
              {
                *(_WORD *)(v168 + v170) = v169;
                v96[v167] = v171;
                v169 = v171;
              }
              v170 += 2;
            }
            while (v170 != 6);
            ++v167;
            v166 += 2;
          }
          while (v167 != 3);
          *(_DWORD *)__src = (*(unsigned __int16 *)(a5 + 928) << 16) | 2;
          *((_DWORD *)__src + 2) = (*(unsigned __int16 *)(a5 + 930) << 16) | 2;
          *((_DWORD *)__src + 1) = (*(unsigned __int16 *)(a5 + 932) << 16) | 2;
          v172 = *(unsigned __int16 *)(a5 + 934);
          goto LABEL_232;
        case 4:
          v173 = *(unsigned __int16 *)(a5 + 934);
          v174 = *(unsigned __int16 *)(a5 + 932);
          if (v173 < v174)
          {
            *(_WORD *)(a5 + 934) = v174;
            *(_WORD *)(a5 + 932) = v173;
          }
          *(_DWORD *)__src = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 1) = (*(unsigned __int16 *)(a5 + 930) << 16) | 2;
          *((_DWORD *)__src + 2) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 3) = (*(unsigned __int16 *)(a5 + 932) << 16) | 3;
          *((_DWORD *)__src + 4) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 5) = (*(unsigned __int16 *)(a5 + 930) << 16) | 2;
          *((_DWORD *)__src + 6) = (*(unsigned __int16 *)(a5 + 928) << 16) | 1;
          *((_DWORD *)__src + 7) = (*(unsigned __int16 *)(a5 + 934) << 16) | 3;
          i = 8;
          goto LABEL_234;
        default:
          goto LABEL_82;
      }
      goto LABEL_234;
    }
    v26 = *(_DWORD *)(a5 + 16);
    if (v26 != 64)
    {
      v30 = *v8;
      goto LABEL_79;
    }
    v27 = *(_QWORD *)(a5 + 32);
    if (v27)
    {
      v28 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)(a5 + 8) = v28 >> 8;
      v29 = *(unsigned __int8 **)(a5 + 24);
      *((_QWORD *)&v31 + 1) = *v29;
      *(_QWORD *)&v31 = v28;
      v30 = v31 >> 8;
      *(_QWORD *)(a5 + 8) = v30;
      *(_QWORD *)(a5 + 24) = v29 + 1;
      *(_QWORD *)(a5 + 32) = v27 - 1;
      v26 = 56;
LABEL_79:
      *(_DWORD *)(a5 + 16) = v26 + 1;
      LODWORD(v25) = ((v30 >> v26) & 1) + 3;
      *(_DWORD *)(a5 + 776) = v25;
      goto LABEL_80;
    }
    v45 = 3;
    goto LABEL_180;
  }
LABEL_8:
  switch(v9)
  {
    case 1:
      v19 = *(_DWORD *)(a5 + 16);
      goto LABEL_10;
    case 2:
      goto LABEL_38;
    case 3:
      LODWORD(v25) = *(_DWORD *)(a5 + 776);
      goto LABEL_14;
    case 4:
      v32 = *(_DWORD *)(a5 + 780);
      v33 = *(_DWORD *)(a5 + 784);
      v34 = *(unsigned int *)(a5 + 764);
      if (v34 > 0x11)
        goto LABEL_59;
      v35 = *(_DWORD *)(a5 + 16);
      break;
    case 5:
      v210 = a4;
      v211 = (int *)(a5 + 780);
      v212 = a2;
      v46 = *(_DWORD *)(a5 + 776);
      v47 = *(_DWORD *)(a5 + 780);
      v48 = *(_DWORD *)(a5 + 784);
      v209 = *(_DWORD *)(a5 + 772);
      LODWORD(v49) = *(_DWORD *)(a5 + 768);
      v50 = *(_QWORD *)(a5 + 920);
      goto LABEL_88;
    default:
      return 4294967265;
  }
  do
  {
    v36 = byte_23692496E[v34];
    if ((v35 - 61) >= 4)
    {
      v40 = *v8;
      goto LABEL_24;
    }
    v37 = *(_QWORD *)(a5 + 32);
    if (v37)
    {
      v38 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)(a5 + 8) = v38 >> 8;
      v39 = *(unsigned __int8 **)(a5 + 24);
      *((_QWORD *)&v41 + 1) = *v39;
      *(_QWORD *)&v41 = v38;
      v40 = v41 >> 8;
      *(_QWORD *)(a5 + 8) = v40;
      v35 -= 8;
      *(_QWORD *)(a5 + 24) = v39 + 1;
      *(_QWORD *)(a5 + 32) = v37 - 1;
LABEL_24:
      v42 = (v40 >> v35) & 0xF;
      v43 = byte_23691E4E8[v42];
      goto LABEL_25;
    }
    if (v35 == 64)
      v42 = 0;
    else
      v42 = *v8 >> v35;
    v43 = byte_23691E4E8[v42];
    if (64 - v35 < v43)
    {
      *(_DWORD *)(a5 + 764) = v34;
      *(_DWORD *)(a5 + 780) = v32;
      *(_DWORD *)(a5 + 784) = v33;
      v45 = 4;
      goto LABEL_180;
    }
LABEL_25:
    v44 = byte_23691E4F8[v42];
    v35 += v43;
    *(_DWORD *)(a5 + 16) = v35;
    *(_BYTE *)(a5 + v36 + 2496) = v44;
    if (((0x1111uLL >> v42) & 1) == 0)
    {
      v33 -= 0x20u >> v44;
      ++v32;
      ++*(_WORD *)(a5 + 2 * v44 + 2514);
      if ((v33 - 33) < 0xFFFFFFE0)
        break;
    }
    ++v34;
  }
  while ((_DWORD)v34 != 18);
LABEL_59:
  if (v32 != 1 && v33 != 0)
    return 4294967290;
  v69 = 0;
  v70 = *(unsigned __int16 *)(a5 + 2516) - 1;
  v71 = v70 + *(unsigned __int16 *)(a5 + 2518) + *(unsigned __int16 *)(a5 + 2520);
  v213[2] = v70 + *(unsigned __int16 *)(a5 + 2518);
  v213[3] = v71;
  v72 = v71 + *(unsigned __int16 *)(a5 + 2522);
  v73 = v72 + *(unsigned __int16 *)(a5 + 2524);
  v213[4] = v72;
  v213[5] = v73;
  v213[0] = 17;
  v213[1] = v70;
  v74 = a5 + 2513;
  do
  {
    v75 = *(unsigned __int8 *)(v74 + v69);
    v76 = (int)v213[v75];
    v214[v76] = v69 + 17;
    v213[v75] = v76 - 1;
    v77 = *(unsigned __int8 *)(v74 + v69 - 1);
    v78 = (int)v213[v77];
    v213[v77] = v78 - 1;
    v79 = *(unsigned __int8 *)(v74 + v69 - 2);
    v80 = (int)v213[v79];
    v214[v78] = v69 + 16;
    v214[v80] = v69 + 15;
    v213[v79] = v80 - 1;
    v81 = *(unsigned __int8 *)(v74 + v69 - 3);
    v82 = (int)v213[v81];
    v213[v81] = v82 - 1;
    v83 = *(unsigned __int8 *)(v74 + v69 - 4);
    v84 = (int)v213[v83];
    v214[v82] = v69 + 14;
    v214[v84] = v69 + 13;
    v213[v83] = v84 - 1;
    v85 = *(unsigned __int8 *)(v74 + v69 - 5);
    v86 = (int)v213[v85];
    v213[v85] = v86 - 1;
    v214[v86] = v69 + 12;
    v69 -= 6;
  }
  while (v69 != -18);
  if (v213[0])
  {
    v87 = 0;
    LODWORD(v88) = 0;
    v89 = 2;
    v90 = 0x8000000000000000;
    for (j = 1; j != 6; ++j)
    {
      v92 = *((unsigned __int16 *)v11 + j);
      if (*((_WORD *)v11 + j))
      {
        v88 = (int)v88;
        do
        {
          v93 = j | (v214[v88] << 16);
          v94 = a5 - 4 * v89 + 4 * __rbit64(v87);
          v95 = 229;
          do
          {
            *(_DWORD *)(v94 + 4 * v95) = v93;
            v95 -= v89;
          }
          while (v95 - 197 > 0);
          ++v88;
          v87 += v90;
          --v92;
        }
        while (v92);
      }
      v89 *= 2;
      v90 >>= 1;
    }
  }
  else
  {
    v98 = 0;
    v99 = vdupq_n_s32(v214[0] << 16);
    do
    {
      *(int32x4_t *)(a5 + 788 + v98) = v99;
      v98 += 16;
    }
    while (v98 != 128);
  }
  v210 = a4;
  v211 = v10;
  v100 = 0;
  *v11 = 0u;
  v11[1] = 0u;
  v101 = (_OWORD *)(a5 + 2368);
  *(_QWORD *)&v102 = -1;
  *((_QWORD *)&v102 + 1) = -1;
  v50 = *(_QWORD *)(a5 + 920);
  do
  {
    v103 = vdup_n_s32(v100);
    v104 = vaddq_s64(vdupq_n_s64(v100), (int64x2_t)xmmword_2368AF490);
    *(int32x2_t *)&v105 = vmovn_s64(v104);
    *((int32x2_t *)&v105 + 1) = vadd_s32(v103, (int32x2_t)0xFFFFFFF3FFFFFFF2);
    v106 = vadd_s32(v103, (int32x2_t)0xFFFFFFF7FFFFFFF6);
    *(int32x2_t *)&v107 = vadd_s32(v103, (int32x2_t)0xFFFFFFF5FFFFFFF4);
    *((int32x2_t *)&v107 + 1) = v106;
    *v101 = v105;
    v101[1] = v107;
    v101 += 2;
    *(_OWORD *)(v50 + 2 * v104.i64[0]) = v102;
    v100 += 8;
  }
  while (v100 != 16);
  v212 = a2;
  LODWORD(v49) = 0;
  v47 = 0;
  v46 = 0;
  *(_OWORD *)(a5 + 768) = xmmword_2368AF4A0;
  v48 = 0x8000;
  *(_DWORD *)(a5 + 784) = 0x8000;
  *(_DWORD *)(a5 + 760) = 5;
  v209 = 8;
LABEL_88:
  v108 = a5 + 2368;
  v109 = v8;
  if (!sub_2367BE330(v8))
  {
    v46 = *(_DWORD *)(a5 + 776);
    v48 = *(_DWORD *)(a5 + 784);
    v110 = v212;
    goto LABEL_130;
  }
  v110 = v212;
  if (v46 < v212 && v48)
  {
    v111 = *(_QWORD *)(a5 + 32);
    v112 = v209;
    while (1)
    {
      v113 = v111 - 4;
      if (v111 < 4)
        break;
      v114 = *(_DWORD *)(a5 + 16);
      v115 = *(_QWORD *)(a5 + 8);
      if (v114 >= 0x20)
      {
        v116 = *(unsigned int **)(a5 + 24);
        *((_QWORD *)&v117 + 1) = *v116;
        *(_QWORD *)&v117 = *(_QWORD *)(a5 + 8);
        v115 = v117 >> 32;
        *(_QWORD *)(a5 + 8) = v115;
        v114 ^= 0x20u;
        *(_QWORD *)(a5 + 24) = v116 + 1;
        *(_QWORD *)(a5 + 32) = v113;
        v111 = v113;
      }
      v118 = (unsigned __int8 *)(a5 + 788 + 4 * ((v115 >> v114) & 0x1F));
      v119 = v114 + *v118;
      *(_DWORD *)(a5 + 16) = v119;
      v120 = *((unsigned __int16 *)v118 + 1);
      if (v120 > 0xF)
      {
        v121 = (_DWORD)v120 == 16;
        if ((_DWORD)v120 == 16)
          v122 = 2;
        else
          v122 = 3;
        v123 = (v115 >> v119) & ~(-1 << v122);
        *(_DWORD *)(a5 + 16) = v122 + v119;
        if (v121)
          v124 = v112;
        else
          v124 = 0;
        v125 = (v47 - 2) << v122;
        if (v47)
          v126 = v47;
        else
          v126 = 0;
        if (!v47)
          v125 = 0;
        v127 = (_DWORD)v49 == v124;
        if ((_DWORD)v49 == v124)
          v49 = v49;
        else
          v49 = v124;
        if (v127)
          v128 = v126;
        else
          v128 = 0;
        if (v127)
          v129 = v125;
        else
          v129 = 0;
        v47 = v123 + v129 + 3;
        v130 = v47 - v128;
        v131 = v47 - v128 + v46;
        if (v131 > v212)
        {
          v48 = 0xFFFFF;
          goto LABEL_183;
        }
        if ((_DWORD)v49)
        {
          v132 = *(_DWORD *)(v108 + 4 * v49);
          v133 = v129 + v123 - v128 + 3;
          do
          {
            v134 = v132;
            v132 = v46;
            *(_WORD *)(v50 + 2 * (int)v134) = v46++;
            --v133;
          }
          while (v133);
          *(_DWORD *)(v108 + 4 * v49) = v132;
          v48 -= v130 << (15 - v49);
          *((_WORD *)v11 + v49) += v130;
        }
        v46 = v131;
      }
      else
      {
        if (*((_WORD *)v118 + 1))
        {
          *(_WORD *)(v50 + 2 * *(int *)(v108 + 4 * v120)) = v46;
          *(_DWORD *)(v108 + 4 * v120) = v46;
          v48 -= 0x8000u >> v120;
          ++*((_WORD *)v11 + v120);
          v112 = v120;
        }
        v47 = 0;
        ++v46;
      }
      if (v46 >= v212 || !v48)
        goto LABEL_183;
    }
    *(_DWORD *)(a5 + 776) = v46;
    *(_DWORD *)(a5 + 780) = v47;
    *(_DWORD *)(a5 + 772) = v112;
    *(_DWORD *)(a5 + 768) = v49;
    *(_DWORD *)(a5 + 784) = v48;
LABEL_130:
    if (v46 < v110)
    {
      v135 = 0;
      v136 = a5 + 788;
      do
      {
        if (!v48)
          goto LABEL_186;
        if (v135)
        {
          v137 = *(_QWORD *)(a5 + 32);
          if (!v137)
            return 2;
          v138 = *(_QWORD *)(a5 + 8);
          *(_QWORD *)(a5 + 8) = v138 >> 8;
          v139 = *(unsigned __int8 **)(a5 + 24);
          *((_QWORD *)&v140 + 1) = *v139;
          *(_QWORD *)&v140 = v138;
          *(_QWORD *)(a5 + 8) = v140 >> 8;
          v141 = *(_DWORD *)(a5 + 16) - 8;
          *(_DWORD *)(a5 + 16) = v141;
          *(_QWORD *)(a5 + 24) = v139 + 1;
          *(_QWORD *)(a5 + 32) = v137 - 1;
        }
        else
        {
          v141 = *(_DWORD *)(a5 + 16);
        }
        if (v141 == 64)
          LODWORD(v142) = 0;
        else
          v142 = *v109 >> v141;
        v143 = *(unsigned __int8 *)(v136 + 4 * (v142 & 0x1F));
        if (64 - v141 < v143)
          goto LABEL_141;
        v144 = *(unsigned __int16 *)(v136 + 4 * (v142 & 0x1F) + 2);
        if (v144 <= 0xF)
        {
          *(_DWORD *)(a5 + 16) = v141 + v143;
          v145 = *(_QWORD *)(a5 + 920);
          *(_DWORD *)(a5 + 780) = 0;
          if ((_DWORD)v144)
          {
            *(_WORD *)(v145 + 2 * *(int *)(v108 + 4 * v144)) = v46;
            *(_DWORD *)(v108 + 4 * v144) = v46;
            *(_DWORD *)(a5 + 772) = v144;
            v48 -= 0x8000u >> v144;
            *(_DWORD *)(a5 + 784) = v48;
            ++*((_WORD *)v11 + v144);
          }
          v135 = 0;
          *(_DWORD *)(a5 + 776) = ++v46;
          continue;
        }
        v146 = v144 - 14;
        v147 = v144 - 14 + v143;
        if (64 - v141 < v147)
        {
LABEL_141:
          v135 = 1;
        }
        else
        {
          *(_DWORD *)(a5 + 16) = v147 + v141;
          if ((_DWORD)v144 == 16)
          {
            v148 = *(_DWORD *)(a5 + 772);
            v149 = 2;
          }
          else
          {
            v148 = 0;
            v149 = 3;
          }
          if (*(_DWORD *)(a5 + 768) == v148)
          {
            v150 = *v211;
            if (*v211)
              v151 = (v150 - 2) << v149;
            else
              v151 = 0;
          }
          else
          {
            v151 = 0;
            v150 = 0;
            *(_DWORD *)(a5 + 768) = v148;
          }
          v152 = (v142 >> v143) & ~(-1 << v146);
          v153 = *(_QWORD *)(a5 + 920);
          v154 = v152 + v151 + 3;
          *v211 = v154;
          v155 = v154 - v150;
          v156 = v154 - v150 + v46;
          if (v156 > v110)
          {
            *(_DWORD *)(a5 + 776) = v110;
            *(_DWORD *)(a5 + 784) = 0xFFFFF;
            return 4294967289;
          }
          if (v148)
          {
            v157 = *(_DWORD *)(v108 + 4 * v148);
            v158 = v151 + v152 - v150 + 3;
            do
            {
              v159 = v157;
              v157 = v46;
              *(_WORD *)(v153 + 2 * (int)v159) = v46++;
              --v158;
            }
            while (v158);
            v135 = 0;
            *(_DWORD *)(a5 + 776) = v156;
            *(_DWORD *)(v108 + 4 * v148) = v157;
            v48 -= v155 << (15 - v148);
            *(_DWORD *)(a5 + 784) = v48;
            *((_WORD *)v11 + v148) += v155;
          }
          else
          {
            v135 = 0;
            *(_DWORD *)(a5 + 776) = v156;
          }
          v46 = v156;
        }
      }
      while (v46 < v110);
    }
  }
  else
  {
LABEL_183:
    *(_DWORD *)(a5 + 784) = v48;
  }
  if (v48)
    return 4294967289;
LABEL_186:
  v175 = 0;
  v176 = *(_QWORD *)(a5 + 920);
  do
    v177 = *(__int16 *)(v176 - 2 + 2 * v175--);
  while (v177 == -1);
  v178 = 0;
  v179 = v175 + 16;
  v180 = 1;
  if ((int)v175 >= -8)
    v181 = 256;
  else
    v181 = 1 << (v175 + 16);
  if (v179 >= 8)
    v182 = 8;
  else
    v182 = v175 + 16;
  if (v182 <= 1)
    v182 = 1;
  v183 = (v182 + 1);
  v184 = 2;
  v185 = 0x8000000000000000;
  do
  {
    v186 = *((unsigned __int16 *)v11 + v180);
    if (*((_WORD *)v11 + v180))
    {
      v187 = v180 - 16;
      do
      {
        v187 = *(unsigned __int16 *)(v176 + 2 * v187);
        v188 = &__src[4 * __rbit64(v178)];
        v189 = v181;
        do
        {
          *(_DWORD *)&v188[4 * (v189 - v184)] = v180 | (v187 << 16);
          v189 -= v184;
        }
        while (v189 > 0);
        v178 += v185;
        --v186;
      }
      while (v186);
    }
    v184 *= 2;
    v185 >>= 1;
    ++v180;
  }
  while (v180 != v183);
  while (v181 != 256)
  {
    memcpy(&__src[4 * v181], __src, 4 * v181);
    v181 *= 2;
  }
  if ((int)v175 < -7)
  {
    v195 = 256;
  }
  else
  {
    v190 = 0;
    v191 = 0;
    if (v179 <= 9)
      v192 = 9;
    else
      v192 = v179;
    v193 = 0x8000000000000000;
    v194 = 2;
    v195 = 256;
    v196 = 8;
    v197 = __src;
    v198 = 256;
    do
    {
      v199 = v196 + 1;
      if (*((_WORD *)v11 + v196 + 1))
      {
        v200 = v196 - 15;
        do
        {
          if (!v191)
          {
            v201 = v196 + 1;
            if (v196 <= 0xD)
            {
              v202 = v190;
              v203 = 1 << (v196 - 7);
              while (1)
              {
                v204 = v203 - *(unsigned __int16 *)(a5 + 2532 + 2 * v202);
                if (v204 < 1)
                  break;
                v203 = 2 * v204;
                if (++v202 == 6)
                {
                  v201 = 15;
                  goto LABEL_220;
                }
              }
              v201 = v202 + 9;
            }
LABEL_220:
            v197 += 4 * v198;
            v198 = 1 << (v201 - 8);
            v195 += v198;
            v205 = __rbit64(v178);
            v178 += 0x100000000000000;
            *(_DWORD *)&__src[4 * v205] = v201 | (((((_DWORD)v197 - (_DWORD)__src) >> 2) - (_DWORD)v205) << 16);
          }
          v200 = *(unsigned __int16 *)(v176 + 2 * v200);
          v206 = &v197[4 * __rbit64(v191)];
          v207 = v198;
          do
          {
            *(_DWORD *)&v206[4 * (v207 - v194)] = (v196 - 7) | (v200 << 16);
            v207 -= v194;
          }
          while (v207 > 0);
          v191 += v193;
          v208 = *((_WORD *)v11 + v199) - 1;
          *((_WORD *)v11 + v199) = v208;
        }
        while (v208);
      }
      v194 *= 2;
      v193 >>= 1;
      ++v190;
      ++v196;
    }
    while (v199 != v192);
  }
  if (v210)
    *v210 = v195;
LABEL_237:
  *(_DWORD *)(a5 + 760) = 0;
  return 1;
}

uint64_t sub_2367BFB8C(_BYTE *a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 != 64)
  {
    v5 = 64 - v3;
    v6 = *(_QWORD *)a2 >> v3;
    v7 = &a1[4 * v6];
    v8 = *v7;
    if (v8 > 8)
    {
      if (v5 < 9)
        return 0;
      v10 = *(unsigned __int16 *)&a1[4 * v6 + 2] + ((v6 & ~(-1 << v8)) >> 8);
      v11 = v7[4 * v10];
      if (56 - v3 < v11)
        return 0;
      *(_DWORD *)(a2 + 8) = v3 + v11 + 8;
      v9 = &v7[4 * v10];
    }
    else
    {
      if (v5 < v8)
        return 0;
      *(_DWORD *)(a2 + 8) = v3 + v8;
      v9 = &a1[4 * v6];
    }
    v4 = (unsigned __int16 *)(v9 + 2);
    goto LABEL_12;
  }
  if (*a1)
    return 0;
  v4 = (unsigned __int16 *)(a1 + 2);
LABEL_12:
  *a3 = *v4;
  return 1;
}

uint64_t sub_2367BFC48(size_t *a1, void **a2, uint64_t a3)
{
  int i;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  size_t v14;
  size_t v16;
  int v17;
  int v18;
  uint64_t result;

  if (!sub_2367C01FC(a3))
    return 4294967270;
  for (i = *(_DWORD *)(a3 + 660); ; i = 0)
  {
    do
    {
      if (i == 1)
        goto LABEL_24;
    }
    while (i);
    v7 = *(_QWORD *)(a3 + 32);
    v8 = *(_DWORD *)(a3 + 16);
    if (v7 <= 0x40000000)
      LODWORD(v7) = v7 + ((64 - v8) >> 3);
    else
      LODWORD(v7) = 0x40000000;
    if (*(_DWORD *)(a3 + 264) < (int)v7)
      LODWORD(v7) = *(_DWORD *)(a3 + 264);
    v9 = *(int *)(a3 + 76);
    v10 = *(_DWORD *)(a3 + 88);
    if ((int)v9 + (int)v7 > v10)
      LODWORD(v7) = v10 - v9;
    v11 = (_BYTE *)(*(_QWORD *)(a3 + 120) + v9);
    v12 = v7;
    if ((v8 - 65) <= 0xFFFFFFF7 && (_DWORD)v7)
    {
      v7 = (int)v7;
      do
      {
        *v11++ = *(_QWORD *)(a3 + 8) >> v8;
        v13 = *(_DWORD *)(a3 + 16);
        LOBYTE(v8) = v13 + 8;
        *(_DWORD *)(a3 + 16) = v13 + 8;
        v14 = v7 - 1;
      }
      while ((v13 - 57) <= 0xFFFFFFF7 && v7-- != 1);
    }
    else
    {
      v14 = (int)v7;
    }
    memcpy(v11, *(const void **)(a3 + 24), v14);
    v16 = *(_QWORD *)(a3 + 32) - v14;
    *(_QWORD *)(a3 + 24) += v14;
    *(_QWORD *)(a3 + 32) = v16;
    v17 = *(_DWORD *)(a3 + 76) + v12;
    *(_DWORD *)(a3 + 76) = v17;
    v18 = *(_DWORD *)(a3 + 264);
    *(_DWORD *)(a3 + 264) = v18 - v12;
    if (v17 < 1 << *(_DWORD *)(a3 + 676))
      break;
    *(_DWORD *)(a3 + 660) = 1;
LABEL_24:
    result = sub_2367BE468(a3, a1, a2, 0);
    if ((_DWORD)result != 1)
      return result;
    if (*(_DWORD *)(a3 + 88) == 1 << *(_DWORD *)(a3 + 676))
      *(_DWORD *)(a3 + 84) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a3 + 660) = 0;
  }
  if (v18 == v12)
    return 1;
  else
    return 2;
}

uint64_t sub_2367BFDE0(unsigned int a1, unsigned int *a2, unsigned __int8 **a3, uint64_t a4)
{
  unint64_t *v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  __int128 v32;
  int v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  __int128 v50;
  int v51;
  unsigned int v52;

  v8 = (unint64_t *)(a4 + 8);
  switch(*(_DWORD *)(a4 + 756))
  {
    case 0:
      result = sub_2367BEAB0(a4, (unint64_t *)(a4 + 8), a2);
      if ((_DWORD)result == 1)
      {
        ++*a2;
        *(_DWORD *)(a4 + 2560) = 0;
        v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))(a4 + 40))(*(_QWORD *)(a4 + 56), a1);
        *a3 = v10;
        if (v10)
        {
          if (*a2 > 1)
          {
            *(_DWORD *)(a4 + 756) = 1;
            goto LABEL_11;
          }
          bzero(v10, a1);
          return 1;
        }
        else
        {
          return 4294967271;
        }
      }
      return result;
    case 1:
LABEL_11:
      v13 = *(_DWORD *)(a4 + 16);
      if ((v13 - 60) >= 5)
      {
        v17 = *v8;
      }
      else
      {
        v14 = *(_QWORD *)(a4 + 32);
        if (!v14)
          return 2;
        v15 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(a4 + 8) = v15 >> 8;
        v16 = *(unsigned __int8 **)(a4 + 24);
        *((_QWORD *)&v18 + 1) = *v16;
        *(_QWORD *)&v18 = v15;
        v17 = v18 >> 8;
        *(_QWORD *)(a4 + 8) = v17;
        v13 -= 8;
        *(_QWORD *)(a4 + 24) = v16 + 1;
        *(_QWORD *)(a4 + 32) = v14 - 1;
      }
      v19 = v17 >> v13;
      v25 = (v19 & 1) == 0;
      v11 = ((int)((_DWORD)v19 << 31) >> 31) & (((v19 >> 1) & 0xF) + 1);
      if (v25)
        v20 = v13 + 1;
      else
        v20 = v13 + 5;
      *(_DWORD *)(a4 + 2564) = v11;
      *(_DWORD *)(a4 + 16) = v20;
      *(_DWORD *)(a4 + 756) = 2;
      goto LABEL_19;
    case 2:
      v11 = *(_DWORD *)(a4 + 2564);
LABEL_19:
      result = sub_2367BEC60(v11 + *a2, v11 + *a2, (char *)(a4 + 2572), 0, a4);
      if ((_DWORD)result != 1)
        return result;
      v12 = 0xFFFF;
      *(_DWORD *)(a4 + 2568) = 0xFFFF;
      *(_DWORD *)(a4 + 756) = 3;
LABEL_21:
      v21 = *(_DWORD *)(a4 + 2560);
      v22 = *(_DWORD *)(a4 + 2564);
      v23 = *a3;
      v52 = v12;
      v24 = v12 != 0xFFFF;
      v25 = v21 >= a1 && v12 == 0xFFFF;
      if (v25)
        goto LABEL_52;
      v26 = a4 + 2572;
      break;
    case 3:
      v12 = *(_DWORD *)(a4 + 2568);
      goto LABEL_21;
    case 4:
      goto LABEL_52;
    default:
      return 4294967265;
  }
  while (1)
  {
    v27 = *(_DWORD *)(a4 + 16);
    if (v24)
      break;
    if ((v27 - 50) >= 0xF)
    {
      v31 = *v8;
LABEL_33:
      v34 = v31 >> v27;
      v35 = (unsigned __int8 *)(v26 + 4 * (v31 >> v27));
      v36 = *v35;
      if (v36 >= 9)
      {
        v27 += 8;
        v35 += 4 * (BYTE1(v34) & ~(-1 << (v36 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)(v26 + 4 * v34 + 2);
        v36 = *v35;
      }
      *(_DWORD *)(a4 + 16) = v27 + v36;
      v12 = *((unsigned __int16 *)v35 + 1);
      v52 = v12;
      if (!v12)
        goto LABEL_49;
    }
    else
    {
      v28 = *(_QWORD *)(a4 + 32) - 1;
      while (v28 != -1)
      {
        v29 = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(a4 + 8) = v29 >> 8;
        v30 = *(unsigned __int8 **)(a4 + 24);
        *((_QWORD *)&v32 + 1) = *v30;
        *(_QWORD *)&v32 = v29;
        v31 = v32 >> 8;
        *(_QWORD *)(a4 + 8) = v31;
        v33 = v27 - 8;
        *(_DWORD *)(a4 + 16) = v27 - 8;
        *(_QWORD *)(a4 + 24) = v30 + 1;
        *(_QWORD *)(a4 + 32) = v28--;
        LODWORD(v30) = v27 - 58;
        v27 -= 8;
        if (v30 >= 0xF)
        {
          v27 = v33;
          goto LABEL_33;
        }
      }
      if (!sub_2367BFB8C((_BYTE *)(a4 + 2572), (uint64_t)v8, &v52))
      {
        v12 = 0xFFFF;
        goto LABEL_63;
      }
      v12 = v52;
      if (!v52)
      {
LABEL_49:
        v37 = 0;
        goto LABEL_50;
      }
    }
    v37 = v12 - v22;
    if (v12 <= v22)
    {
      v27 = *(_DWORD *)(a4 + 16);
      break;
    }
LABEL_50:
    v23[v21++] = v37;
LABEL_51:
    v24 = 0;
    if (v21 >= a1)
    {
LABEL_52:
      v45 = *(_DWORD *)(a4 + 16);
      if (v45 == 64)
      {
        v46 = *(_QWORD *)(a4 + 32);
        if (v46)
        {
          v47 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)(a4 + 8) = v47 >> 8;
          v48 = *(unsigned __int8 **)(a4 + 24);
          *((_QWORD *)&v50 + 1) = *v48;
          *(_QWORD *)&v50 = v47;
          v49 = v50 >> 8;
          *(_QWORD *)(a4 + 8) = v49;
          *(_QWORD *)(a4 + 24) = v48 + 1;
          *(_QWORD *)(a4 + 32) = v46 - 1;
          v45 = 56;
          goto LABEL_56;
        }
        result = 2;
        v51 = 4;
      }
      else
      {
        v49 = *v8;
LABEL_56:
        *(_DWORD *)(a4 + 16) = v45 + 1;
        if (((v49 >> v45) & 1) != 0)
          sub_2367C2B6C(*a3, a1, (_DWORD *)a4);
        v51 = 0;
        result = 1;
      }
      *(_DWORD *)(a4 + 756) = v51;
      return result;
    }
  }
  v38 = 64 - v27;
  if (64 - v27 >= v12)
  {
    v42 = *v8;
LABEL_44:
    *(_DWORD *)(a4 + 16) = v27 + v12;
    v44 = ((v42 >> v27) & ~(-1 << v12)) + (1 << v12);
    if (v44 + v21 > a1)
      return 4294967288;
    do
    {
      v23[v21++] = 0;
      --v44;
    }
    while (v44);
    goto LABEL_51;
  }
  v39 = *(_QWORD *)(a4 + 32) - 1;
  while (v39 != -1)
  {
    v40 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v40 >> 8;
    v41 = *(unsigned __int8 **)(a4 + 24);
    *((_QWORD *)&v43 + 1) = *v41;
    *(_QWORD *)&v43 = v40;
    v42 = v43 >> 8;
    *(_QWORD *)(a4 + 8) = v42;
    v27 -= 8;
    *(_DWORD *)(a4 + 16) = v27;
    *(_QWORD *)(a4 + 24) = v41 + 1;
    *(_QWORD *)(a4 + 32) = v39--;
    v38 += 8;
    if (v38 >= v12)
      goto LABEL_44;
  }
LABEL_63:
  *(_DWORD *)(a4 + 2568) = v12;
  *(_DWORD *)(a4 + 2560) = v21;
  return 2;
}

uint64_t sub_2367C01FC(uint64_t a1)
{
  uint64_t v1;
  const void *v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(int *)(a1 + 680);
  if (*(_DWORD *)(a1 + 88) == (_DWORD)v1)
    return 1;
  v3 = *(const void **)(a1 + 120);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 56), v1 + 542);
  *(_QWORD *)(a1 + 120) = result;
  if (result)
  {
    *(_BYTE *)(*(int *)(a1 + 680) + result - 2) = 0;
    *(_BYTE *)(*(int *)(a1 + 680) + *(_QWORD *)(a1 + 120) - 1) = 0;
    if (v3)
    {
      memcpy(*(void **)(a1 + 120), v3, *(int *)(a1 + 76));
      (*(void (**)(_QWORD, const void *))(a1 + 48))(*(_QWORD *)(a1 + 56), v3);
    }
    v5 = *(int *)(a1 + 680);
    *(_DWORD *)(a1 + 88) = v5;
    *(_DWORD *)(a1 + 92) = v5 - 1;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120) + v5;
    return 1;
  }
  *(_QWORD *)(a1 + 120) = v3;
  return result;
}

uint64_t sub_2367C02A4(uint64_t a1)
{
  int i;
  size_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int *v26;
  __int128 v27;
  size_t v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  unsigned __int8 *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  unsigned __int8 *v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  signed int v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  char v89;
  int v90;
  int v91;
  unsigned int *v92;
  uint64_t v93;
  __int128 v94;
  char v95;
  char v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  BOOL v116;
  int v117;
  uint64_t v118;
  void *v119;
  void *v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  _OWORD *v125;
  _OWORD *v126;
  int v127;
  int v129;
  int v131;
  int v133;
  _OWORD *v134;
  _OWORD *v135;
  int v136;
  unsigned int *v137;
  __int128 v138;
  unint64_t *v139;

  i = *(_DWORD *)(a1 + 76);
  v3 = *(unsigned int *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 712);
  if (v4)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  if (*(_QWORD *)(a1 + 32) < 0x1CuLL)
    goto LABEL_5;
  v139 = (unint64_t *)(a1 + 8);
  sub_2367BE330((unint64_t *)(a1 + 8));
  switch(*(_DWORD *)a1)
  {
    case 7:
      goto LABEL_10;
    case 8:
      goto LABEL_22;
    case 9:
      goto LABEL_60;
    case 0xA:
      v7 = i;
      break;
    default:
      return 4294967265;
  }
LABEL_118:
  v131 = i - *(_DWORD *)(a1 + 88);
  while (1)
  {
    v116 = __OFSUB__((_DWORD)v3, 1);
    LODWORD(v3) = v3 - 1;
    if (((v3 & 0x80000000) != 0) != v116)
      break;
    *(_BYTE *)(*(_QWORD *)(a1 + 120) + v7) = *(_BYTE *)(*(_QWORD *)(a1 + 120)
                                                      + (((int)v7 - *(_DWORD *)(a1 + 360)) & *(_DWORD *)(a1 + 92)));
    ++v7;
    if (__CFADD__(v131++, 1))
    {
      v133 = 16;
LABEL_140:
      *(_DWORD *)a1 = v133;
      result = 1;
      i = v7;
      goto LABEL_57;
    }
  }
  if (*(int *)(a1 + 264) <= 0)
  {
    v133 = 14;
    goto LABEL_140;
  }
  for (i = v7; ; i = v127)
  {
    while (1)
    {
LABEL_10:
      v8 = *(_QWORD *)(a1 + 32);
      if (v8 < 0x1C)
      {
        *(_DWORD *)a1 = 7;
LABEL_5:
        result = 2;
        goto LABEL_57;
      }
      v9 = *(_DWORD *)(a1 + 276);
      if (v9)
        break;
      sub_2367C2608(a1);
    }
    v10 = *(_QWORD *)(a1 + 136);
    v11 = *(_DWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    if (v11 >= 0x30)
    {
      v13 = *(_QWORD **)(a1 + 24);
      *((_QWORD *)&v14 + 1) = *v13;
      *(_QWORD *)&v14 = *(_QWORD *)(a1 + 8);
      v12 = v14 >> 48;
      *(_QWORD *)(a1 + 8) = v12;
      v11 ^= 0x30u;
      v8 -= 6;
      *(_QWORD *)(a1 + 24) = (char *)v13 + 6;
      *(_QWORD *)(a1 + 32) = v8;
    }
    v15 = v12 >> v11;
    v16 = (unsigned __int8 *)(v10 + 4 * (v12 >> v11));
    v17 = *v16;
    if (v17 >= 9)
    {
      v11 += 8;
      v16 += 4 * ((v15 >> 8) & ~(-1 << (v17 - 8)))
           + 4 * *(unsigned __int16 *)(v10 + 4 * v15 + 2);
      v17 = *v16;
    }
    v18 = v11 + v17;
    *(_DWORD *)(a1 + 16) = v11 + v17;
    v19 = (unsigned __int8 *)&unk_23691E508 + 8 * *((unsigned __int16 *)v16 + 1);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[3];
    *(_DWORD *)(a1 + 360) = (char)v19[2];
    *(_DWORD *)(a1 + 260) = v22;
    v23 = *((unsigned __int16 *)v19 + 2);
    v24 = *((unsigned __int16 *)v19 + 3);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(*(_QWORD *)(a1 + 160) + v22);
    if (v20)
    {
      if (v18 >= 0x20)
      {
        v137 = *(unsigned int **)(a1 + 24);
        *((_QWORD *)&v138 + 1) = *v137;
        *(_QWORD *)&v138 = v12;
        v12 = v138 >> 32;
        *(_QWORD *)(a1 + 8) = v12;
        v18 ^= 0x20u;
        v8 -= 4;
        *(_QWORD *)(a1 + 24) = v137 + 1;
        *(_QWORD *)(a1 + 32) = v8;
      }
      v25 = (v12 >> v18) & ~(-1 << v20);
      v18 += v20;
      *(_DWORD *)(a1 + 16) = v18;
    }
    else
    {
      v25 = 0;
    }
    if (v18 >= 0x20)
    {
      v26 = *(unsigned int **)(a1 + 24);
      *((_QWORD *)&v27 + 1) = *v26;
      *(_QWORD *)&v27 = v12;
      v12 = v27 >> 32;
      *(_QWORD *)(a1 + 8) = v12;
      v18 ^= 0x20u;
      *(_QWORD *)(a1 + 24) = v26 + 1;
      *(_QWORD *)(a1 + 32) = v8 - 4;
    }
    *(_DWORD *)(a1 + 16) = v18 + v21;
    *(_DWORD *)(a1 + 356) = ((v12 >> v18) & ~(-1 << v21)) + v24;
    *(_DWORD *)(a1 + 276) = v9 - 1;
    v3 = (v25 + v23);
    if (!(v25 + v23))
      goto LABEL_60;
    *(_DWORD *)(a1 + 264) -= v3;
LABEL_22:
    v28 = v3;
    v29 = i;
    if (!*(_DWORD *)(a1 + 256))
    {
LABEL_43:
      v59 = *(_QWORD *)(a1 + 120);
      v38 = v29;
      v60 = *(int *)(a1 + 92);
      v61 = *(unsigned __int8 *)(v59 + (v60 & (v29 - 1)));
      v62 = *(unsigned __int8 *)(v59 + (v60 & (v29 - 2)));
      v63 = v29 + 1;
      v3 = v28;
      while (1)
      {
        v64 = v61;
        if (*(_QWORD *)(a1 + 32) <= 0x1BuLL)
          break;
        if (!*(_DWORD *)(a1 + 272))
        {
          sub_2367C27B8(a1);
          v53 = *(_DWORD *)(a1 + 256);
          if (v53)
            goto LABEL_54;
        }
        v65 = *(_QWORD *)(*(_QWORD *)(a1 + 168)
                        + 8
                        * *(unsigned __int8 *)(*(_QWORD *)(a1 + 152)
                                             + (*(_BYTE *)(*(_QWORD *)(a1 + 144) + v62 + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 144) + v64))));
        v66 = *(_DWORD *)(a1 + 16);
        v67 = *(_QWORD *)(a1 + 8);
        if (v66 >= 0x30)
        {
          v68 = *(_QWORD **)(a1 + 24);
          v69 = *(_QWORD *)(a1 + 32);
          *((_QWORD *)&v70 + 1) = *v68;
          *(_QWORD *)&v70 = *(_QWORD *)(a1 + 8);
          v67 = v70 >> 48;
          *(_QWORD *)(a1 + 8) = v67;
          v66 ^= 0x30u;
          *(_QWORD *)(a1 + 24) = (char *)v68 + 6;
          *(_QWORD *)(a1 + 32) = v69 - 6;
        }
        v71 = v67 >> v66;
        v72 = (unsigned __int8 *)(v65 + 4 * (v67 >> v66));
        v73 = *v72;
        if (v73 >= 9)
        {
          v66 += 8;
          v72 += 4 * ((v71 >> 8) & ~(-1 << (v73 - 8)))
               + 4 * *(unsigned __int16 *)(v65 + 4 * v71 + 2);
          v73 = *v72;
        }
        *(_DWORD *)(a1 + 16) = v66 + v73;
        v61 = v72[2];
        *(_BYTE *)(*(_QWORD *)(a1 + 120) + v38) = v61;
        --*(_DWORD *)(a1 + 272);
        i = *(_DWORD *)(a1 + 88);
        if (v63 == i)
          goto LABEL_147;
        ++v63;
        ++v38;
        v62 = v64;
        v3 = (v3 - 1);
        if (!(_DWORD)v3)
          goto LABEL_59;
      }
LABEL_56:
      *(_DWORD *)a1 = 8;
      result = 2;
      i = v38;
      goto LABEL_57;
    }
LABEL_23:
    v30 = *(_DWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 8);
    if (v30 >= 0x38)
    {
      v32 = *(_QWORD **)(a1 + 24);
      v33 = *(_QWORD *)(a1 + 32);
      *((_QWORD *)&v34 + 1) = *v32;
      *(_QWORD *)&v34 = *(_QWORD *)(a1 + 8);
      v31 = v34 >> 56;
      *(_QWORD *)(a1 + 8) = v31;
      v30 ^= 0x38u;
      *(_DWORD *)(a1 + 16) = v30;
      *(_QWORD *)(a1 + 24) = (char *)v32 + 7;
      *(_QWORD *)(a1 + 32) = v33 - 7;
    }
    v35 = (unsigned __int8 *)(*(_QWORD *)(a1 + 344) + 4 * (v31 >> v30));
    v36 = *v35;
    v37 = *((unsigned __int16 *)v35 + 1);
    v38 = v29;
    v39 = v29 + 1;
    v3 = v28;
    do
    {
      if (*(_QWORD *)(a1 + 32) <= 0x1BuLL)
        goto LABEL_56;
      if (*(_DWORD *)(a1 + 272))
      {
        v40 = *(_QWORD *)(a1 + 344);
        v41 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        sub_2367C27B8(a1);
        v41 = *(_DWORD *)(a1 + 16);
        v49 = *(_QWORD *)(a1 + 8);
        if (v41 >= 0x38)
        {
          v50 = *(_QWORD **)(a1 + 24);
          v51 = *(_QWORD *)(a1 + 32);
          *((_QWORD *)&v52 + 1) = *v50;
          *(_QWORD *)&v52 = *(_QWORD *)(a1 + 8);
          v49 = v52 >> 56;
          *(_QWORD *)(a1 + 8) = v49;
          v41 ^= 0x38u;
          *(_DWORD *)(a1 + 16) = v41;
          *(_QWORD *)(a1 + 24) = (char *)v50 + 7;
          *(_QWORD *)(a1 + 32) = v51 - 7;
        }
        v53 = *(_DWORD *)(a1 + 256);
        if (!v53)
        {
LABEL_54:
          v28 = v3;
          v29 = v38;
          if (!v53)
            goto LABEL_43;
          goto LABEL_23;
        }
        v40 = *(_QWORD *)(a1 + 344);
        v54 = (unsigned __int8 *)(v40 + 4 * (v49 >> v41));
        v36 = *v54;
        v37 = *((unsigned __int16 *)v54 + 1);
      }
      if (v36 >= 9)
      {
        v44 = *v139;
        if (v41 >= 0x30)
        {
          v55 = *(_QWORD **)(a1 + 24);
          v56 = *(_QWORD *)(a1 + 32);
          *((_QWORD *)&v57 + 1) = *v55;
          *(_QWORD *)&v57 = *v139;
          v44 = v57 >> 48;
          *(_QWORD *)(a1 + 8) = v44;
          v41 ^= 0x30u;
          *(_QWORD *)(a1 + 24) = (char *)v55 + 6;
          *(_QWORD *)(a1 + 32) = v56 - 6;
        }
        v58 = (unsigned __int8 *)(v40
                                + 4 * (v44 >> v41)
                                + 4 * v37
                                + 4 * (((v44 >> v41) >> 8) & ~(-1 << (v36 - 8))));
        v42 = v41 + *v58 + 8;
        *(_DWORD *)(a1 + 16) = v42;
        v43 = v58[2];
      }
      else
      {
        v42 = v41 + v36;
        *(_DWORD *)(a1 + 16) = v42;
        v43 = v37;
        v44 = *(_QWORD *)(a1 + 8);
      }
      if (v42 >= 0x38)
      {
        v45 = *(_QWORD **)(a1 + 24);
        v46 = *(_QWORD *)(a1 + 32);
        *((_QWORD *)&v47 + 1) = *v45;
        *(_QWORD *)&v47 = v44;
        v44 = v47 >> 56;
        *(_QWORD *)(a1 + 8) = v44;
        v42 ^= 0x38u;
        *(_DWORD *)(a1 + 16) = v42;
        *(_QWORD *)(a1 + 24) = (char *)v45 + 7;
        *(_QWORD *)(a1 + 32) = v46 - 7;
      }
      v48 = (unsigned __int8 *)(v40 + 4 * (v44 >> v42));
      v36 = *v48;
      v37 = *((unsigned __int16 *)v48 + 1);
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v38) = v43;
      --*(_DWORD *)(a1 + 272);
      i = *(_DWORD *)(a1 + 88);
      if (v39 == i)
      {
LABEL_147:
        *(_DWORD *)a1 = 13;
        LODWORD(v3) = v3 - 1;
        goto LABEL_148;
      }
      ++v39;
      ++v38;
      v3 = (v3 - 1);
    }
    while ((_DWORD)v3);
LABEL_59:
    i = v28 + v29;
    if (*(int *)(a1 + 264) <= 0)
    {
      LODWORD(v3) = 0;
      v136 = 14;
      goto LABEL_145;
    }
LABEL_60:
    v74 = *(_DWORD *)(a1 + 360);
    if ((v74 & 0x80000000) == 0)
    {
      v75 = v74 == 0;
      *(_DWORD *)(a1 + 260) = v75;
      v76 = *(_DWORD *)(a1 + 96) - 1;
      *(_DWORD *)(a1 + 96) = v76;
      v77 = *(_DWORD *)(a1 + 4 * (v76 & 3) + 100);
      goto LABEL_82;
    }
    if (!*(_DWORD *)(a1 + 280))
      sub_2367C29A8(a1);
    v78 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * *(unsigned __int8 *)(a1 + 352));
    v79 = *(_DWORD *)(a1 + 16);
    v80 = *(_QWORD *)(a1 + 8);
    if (v79 >= 0x30)
    {
      v81 = *(_QWORD **)(a1 + 24);
      v82 = *(_QWORD *)(a1 + 32);
      *((_QWORD *)&v83 + 1) = *v81;
      *(_QWORD *)&v83 = *(_QWORD *)(a1 + 8);
      v80 = v83 >> 48;
      *(_QWORD *)(a1 + 8) = v80;
      v79 ^= 0x30u;
      *(_QWORD *)(a1 + 24) = (char *)v81 + 6;
      *(_QWORD *)(a1 + 32) = v82 - 6;
    }
    v84 = v80 >> v79;
    v85 = (unsigned __int8 *)(v78 + 4 * (v80 >> v79));
    v86 = *v85;
    if (v86 >= 9)
    {
      v79 += 8;
      v85 += 4 * ((v84 >> 8) & ~(-1 << (v86 - 8)))
           + 4 * *(unsigned __int16 *)(v78 + 4 * v84 + 2);
      v86 = *v85;
    }
    v87 = v79 + v86;
    *(_DWORD *)(a1 + 16) = v79 + v86;
    v88 = *((unsigned __int16 *)v85 + 1);
    --*(_DWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 260) = 0;
    if (v88 > 0xF)
    {
      v91 = *(unsigned __int8 *)(a1 + 752 + v88);
      if (v87 >= 0x20)
      {
        v92 = *(unsigned int **)(a1 + 24);
        v93 = *(_QWORD *)(a1 + 32);
        *((_QWORD *)&v94 + 1) = *v92;
        *(_QWORD *)&v94 = v80;
        v80 = v94 >> 32;
        *(_QWORD *)(a1 + 8) = v80;
        v87 ^= 0x20u;
        *(_QWORD *)(a1 + 24) = v92 + 1;
        *(_QWORD *)(a1 + 32) = v93 - 4;
      }
      v75 = 0;
      *(_DWORD *)(a1 + 16) = v87 + v91;
      v77 = (((v80 >> v87) & ~(-1 << v91)) << *(_DWORD *)(a1 + 320)) + *(_DWORD *)(a1 + 4 * v88 + 1296);
    }
    else
    {
      *(_DWORD *)(a1 + 360) = v88;
      if (v88 <= 3)
      {
        v89 = ~(_BYTE)v88;
        v75 = 1u >> v88;
        *(_DWORD *)(a1 + 260) = 1u >> v88;
        v90 = *(_DWORD *)(a1 + 96);
        v77 = *(_DWORD *)(a1 + 4 * (((_BYTE)v90 + v89) & 3) + 100);
        *(_DWORD *)(a1 + 360) = v77;
        *(_DWORD *)(a1 + 96) = v90 - v75;
        goto LABEL_83;
      }
      v75 = 0;
      if (v88 >= 0xA)
        v95 = -10;
      else
        v95 = -4;
      if (v88 >= 0xA)
        v96 = 2;
      else
        v96 = 3;
      v77 = ((0x605142u >> (4 * (v95 + v88))) & 7)
          + *(_DWORD *)(a1 + 4 * ((*(_DWORD *)(a1 + 96) + v96) & 3) + 100)
          - 3;
      if (v77 < 1)
        v77 = 0x7FFFFFFF;
    }
LABEL_82:
    *(_DWORD *)(a1 + 360) = v77;
LABEL_83:
    v97 = *(_DWORD *)(a1 + 80);
    v98 = *(_DWORD *)(a1 + 84);
    if (v98 != v97)
    {
      if (i >= v97)
        v98 = *(_DWORD *)(a1 + 80);
      else
        v98 = i;
      *(_DWORD *)(a1 + 84) = v98;
    }
    v3 = *(unsigned int *)(a1 + 356);
    v99 = v77 - v98;
    if (v77 > v98)
      break;
    v122 = *(_DWORD *)(a1 + 96);
    v123 = *(_DWORD *)(a1 + 92) & (i - v77);
    v124 = *(_QWORD *)(a1 + 120);
    v7 = i;
    v125 = (_OWORD *)(v124 + i);
    v126 = (_OWORD *)(v124 + v123);
    v127 = v3 + i;
    *(_DWORD *)(a1 + 4 * (v122 & 3) + 100) = v77;
    *(_DWORD *)(a1 + 96) = v122 + 1;
    *(_DWORD *)(a1 + 264) -= v3;
    *v125 = *v126;
    if (v123 + (int)v3 > i && v127 > v123)
      goto LABEL_118;
    v129 = *(_DWORD *)(a1 + 88);
    if (v127 >= v129 || v123 + (int)v3 >= v129)
      goto LABEL_118;
    if ((int)v3 >= 17)
    {
      v134 = v125 + 1;
      v135 = v126 + 1;
      if (v3 < 0x21)
        *v134 = *v135;
      else
        memcpy(v134, v135, (v3 - 16));
    }
LABEL_135:
    if (*(int *)(a1 + 264) <= 0)
    {
      *(_DWORD *)a1 = 14;
      result = 1;
      i = v127;
      goto LABEL_57;
    }
  }
  if (v77 > 2147483644)
    return 4294967280;
  if (v5 >= v99)
  {
    if (sub_2367C2504(a1, v5 - v99, *(_DWORD *)(a1 + 356)))
    {
      i += sub_2367C1A60(a1, i);
      goto LABEL_133;
    }
    return 4294967278;
  }
  if ((v3 - 4) > 0x1B)
    return 4294967284;
  v100 = 0;
  v101 = *(_QWORD *)(a1 + 704);
  if (*(_DWORD *)(v101 + 248))
    v100 = *(unsigned __int8 *)(v101
                              + (*(_BYTE *)(*(_QWORD *)(a1 + 144)
                                                           + *(unsigned __int8 *)(*(_QWORD *)(a1 + 120)
                                                                                + (*(int *)(a1 + 92) & (unint64_t)(i - 2)))
                                                           + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 144)
                                                                               + *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + (*(int *)(a1 + 92) & (unint64_t)(i - 1)))))
                              + 252);
  v102 = v100;
  v103 = v101 + 8 * v100;
  v104 = *(_QWORD *)(v103 + 320);
  v105 = *(_QWORD *)(v103 + 832);
  LODWORD(v103) = *(_DWORD *)(v104 + 4 * v3 + 32);
  v106 = *(_BYTE *)(v104 + v3);
  v107 = v77 - v5 + ~v98;
  v108 = v107 >> v106;
  *(_DWORD *)(a1 + 96) += v75;
  v109 = v103 + (v107 & ~(-1 << v106)) * v3;
  v110 = *(_DWORD *)(v105 + 24);
  if (v107 >> v106 < v110 && *(_BYTE *)(v104 + v3) || (v111 = *(unsigned __int8 *)(v101 + 316), v111 < 2))
  {
LABEL_103:
    v113 = v104;
    goto LABEL_104;
  }
  v112 = v107 - v110 * ((1 << v106) & 0xFFFFFFFE);
  while (2)
  {
    if (!v102 || (v113 = *(_QWORD *)(v101 + 320), (v114 = *(_BYTE *)(v113 + v3)) == 0))
    {
LABEL_102:
      v101 += 8;
      --v102;
      if (!--v111)
        goto LABEL_103;
      continue;
    }
    break;
  }
  v115 = *(_DWORD *)(*(_QWORD *)(v101 + 832) + 24) * ((1 << v114) & 0xFFFFFFFE);
  v116 = __OFSUB__(v112, v115);
  v117 = v112 - v115;
  if (v117 < 0 == v116)
  {
    v112 = v117;
    goto LABEL_102;
  }
  v108 = v112 >> v114;
  v109 = *(_DWORD *)(v113 + 4 * v3 + 32) + (v112 & ~(-1 << v114)) * v3;
  v105 = *(_QWORD *)(v101 + 832);
LABEL_104:
  if (!*(_BYTE *)(v113 + v3))
    return 4294967284;
  v118 = *(_QWORD *)(v113 + 168);
  if (!v118)
    return 4294967277;
  if (v108 >= *(_DWORD *)(v105 + 24))
    return 4294967285;
  v119 = (void *)(v118 + v109);
  v120 = (void *)(*(_QWORD *)(a1 + 120) + i);
  if (v108 == *(__int16 *)(v105 + 48))
  {
    memcpy(v120, v119, v3);
    v121 = v3;
    goto LABEL_132;
  }
  v121 = sub_236785D98((uint64_t)v120, (char *)v119, v3, (_QWORD *)v105, v108);
  if (!v121 && *(int *)(a1 + 360) < 121)
    return 4294967285;
LABEL_132:
  i += v121;
  *(_DWORD *)(a1 + 264) -= v121;
LABEL_133:
  if (i < *(_DWORD *)(a1 + 88))
  {
    v127 = i;
    goto LABEL_135;
  }
  v136 = 15;
LABEL_145:
  *(_DWORD *)a1 = v136;
LABEL_148:
  result = 1;
LABEL_57:
  *(_DWORD *)(a1 + 76) = i;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

uint64_t sub_2367C0D84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int i;
  size_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  __int128 v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  size_t v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  __int128 v58;
  int v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  __int16 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _BYTE *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  unint64_t v76;
  __int128 v77;
  int v78;
  unint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  unsigned int v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unint64_t v108;
  __int128 v109;
  char v110;
  char v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  BOOL v131;
  int v132;
  uint64_t v133;
  void *v134;
  void *v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  _OWORD *v140;
  _OWORD *v141;
  int v142;
  int v144;
  _OWORD *v145;
  _OWORD *v146;
  int v147;
  int v149;
  int v150;
  unsigned int v151;

  v2 = *(_QWORD *)(a1 + 712);
  if (v2)
    v3 = *(unsigned int *)(v2 + 4);
  else
    v3 = 0;
  i = *(_DWORD *)(a1 + 76);
  v5 = *(unsigned int *)(a1 + 4);
  v6 = (unint64_t *)(a1 + 8);
  switch(*(_DWORD *)a1)
  {
    case 7:
      goto LABEL_7;
    case 8:
      goto LABEL_37;
    case 9:
      goto LABEL_81;
    case 0xA:
      v7 = i;
      break;
    default:
      return 4294967265;
  }
LABEL_153:
  v147 = i - *(_DWORD *)(a1 + 88);
  while (1)
  {
    v131 = __OFSUB__((_DWORD)v5, 1);
    LODWORD(v5) = v5 - 1;
    if (((v5 & 0x80000000) != 0) != v131)
      break;
    *(_BYTE *)(*(_QWORD *)(a1 + 120) + v7) = *(_BYTE *)(*(_QWORD *)(a1 + 120)
                                                      + (((int)v7 - *(_DWORD *)(a1 + 360)) & *(_DWORD *)(a1 + 92)));
    ++v7;
    if (__CFADD__(v147++, 1))
    {
      v149 = 16;
LABEL_170:
      *(_DWORD *)a1 = v149;
      result = 1;
      i = v7;
      goto LABEL_175;
    }
  }
  if (*(int *)(a1 + 264) <= 0)
  {
    v149 = 14;
    goto LABEL_170;
  }
  for (i = v7; ; i = v142)
  {
LABEL_7:
    while (1)
    {
      *(_DWORD *)a1 = 7;
      if (*(_DWORD *)(a1 + 276))
        break;
      if (!sub_2367C1B30(a1))
        goto LABEL_174;
    }
    v151 = 0;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_BYTE **)(a1 + 136);
    v14 = v9;
    v15 = v10;
    if ((v10 - 50) > 0xE)
    {
LABEL_14:
      v21 = v14 >> v15;
      v22 = &v13[4 * (v14 >> v15)];
      v23 = *v22;
      if (v23 >= 9)
      {
        v15 += 8;
        v22 += 4 * (BYTE1(v21) & ~(-1 << (v23 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v13[4 * v21 + 2];
        v23 = *v22;
      }
      *(_DWORD *)(a1 + 16) = v15 + v23;
      v24 = *((unsigned __int16 *)v22 + 1);
    }
    else
    {
      v16 = v11 + 1;
      v17 = v12 - 1;
      v14 = *(_QWORD *)(a1 + 8);
      v18 = *(_DWORD *)(a1 + 16);
      while (v17 != -1)
      {
        *(_QWORD *)(a1 + 8) = v14 >> 8;
        *((_QWORD *)&v19 + 1) = *(unsigned __int8 *)(v16 - 1);
        *(_QWORD *)&v19 = v14;
        v14 = v19 >> 8;
        *(_QWORD *)(a1 + 8) = v14;
        v15 = v18 - 8;
        *(_DWORD *)(a1 + 16) = v18 - 8;
        *(_QWORD *)(a1 + 24) = v16;
        *(_QWORD *)(a1 + 32) = v17;
        ++v16;
        --v17;
        v20 = v18 - 58;
        v18 -= 8;
        if (v20 >= 0xF)
          goto LABEL_14;
      }
      if (!sub_2367BFB8C(v13, a1 + 8, &v151))
        goto LABEL_174;
      v24 = v151;
    }
    v25 = 0;
    v26 = (unsigned __int8 *)&unk_23691E508 + 8 * v24;
    v27 = *v26;
    v28 = v26[1];
    v29 = (char)v26[2];
    v30 = v26[3];
    LODWORD(v5) = *((unsigned __int16 *)v26 + 2);
    v31 = *((unsigned __int16 *)v26 + 3);
    *(_DWORD *)(a1 + 360) = v29;
    *(_DWORD *)(a1 + 260) = v30;
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(*(_QWORD *)(a1 + 160) + v30);
    if (v27)
    {
      v32 = *(_DWORD *)(a1 + 16);
      v33 = 64 - v32;
      if (64 - v32 < v27)
      {
        v34 = *(_QWORD *)(a1 + 32) - 1;
        while (v34 != -1)
        {
          v35 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v35 >> 8;
          v36 = *(unsigned __int8 **)(a1 + 24);
          *((_QWORD *)&v38 + 1) = *v36;
          *(_QWORD *)&v38 = v35;
          v37 = v38 >> 8;
          *(_QWORD *)(a1 + 8) = v37;
          v32 -= 8;
          *(_DWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 24) = v36 + 1;
          *(_QWORD *)(a1 + 32) = v34--;
          v33 += 8;
          if (v33 >= v27)
            goto LABEL_26;
        }
LABEL_173:
        *(_QWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = v12;
        goto LABEL_174;
      }
      v37 = *v6;
LABEL_26:
      v25 = (v37 >> v32) & ~(-1 << v27);
      *(_DWORD *)(a1 + 16) = v32 + v27;
    }
    v39 = 0;
    if (v28)
    {
      v40 = *(_DWORD *)(a1 + 16);
      v41 = 64 - v40;
      if (64 - v40 < v28)
      {
        v42 = *(_QWORD *)(a1 + 32) - 1;
        while (v42 != -1)
        {
          v43 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v43 >> 8;
          v44 = *(unsigned __int8 **)(a1 + 24);
          *((_QWORD *)&v46 + 1) = *v44;
          *(_QWORD *)&v46 = v43;
          v45 = v46 >> 8;
          *(_QWORD *)(a1 + 8) = v45;
          v40 -= 8;
          *(_DWORD *)(a1 + 16) = v40;
          *(_QWORD *)(a1 + 24) = v44 + 1;
          *(_QWORD *)(a1 + 32) = v42--;
          v41 += 8;
          if (v41 >= v28)
            goto LABEL_34;
        }
        goto LABEL_173;
      }
      v45 = *v6;
LABEL_34:
      v39 = (v45 >> v40) & ~(-1 << v28);
      *(_DWORD *)(a1 + 16) = v40 + v28;
    }
    *(_DWORD *)(a1 + 356) = v39 + v31;
    --*(_DWORD *)(a1 + 276);
    if (!(v25 + (_DWORD)v5))
    {
      LODWORD(v5) = 0;
      goto LABEL_81;
    }
    *(_DWORD *)(a1 + 264) -= v25 + v5;
    v5 = (v25 + v5);
LABEL_37:
    v47 = v3;
    v48 = *(_DWORD *)(a1 + 256);
    LODWORD(v3) = i;
LABEL_38:
    *(_DWORD *)a1 = 8;
    if (v48)
    {
      v49 = (int)v3;
      v50 = *(_DWORD *)(a1 + 272);
      v51 = v5;
      while (1)
      {
        if (!v50)
        {
          if (!sub_2367C1E58(a1))
            goto LABEL_91;
          if (!*(_DWORD *)(a1 + 256))
            break;
        }
        v151 = 0;
        v52 = *(_BYTE **)(a1 + 344);
        v53 = *(_DWORD *)(a1 + 16);
        if ((v53 - 50) >= 0xF)
        {
          v57 = *v6;
LABEL_47:
          v60 = v57 >> v53;
          v61 = &v52[4 * (v57 >> v53)];
          v62 = *v61;
          if (v62 >= 9)
          {
            v53 += 8;
            v61 += 4 * (BYTE1(v60) & ~(-1 << (v62 - 8)) & 0x7F)
                 + 4 * *(unsigned __int16 *)&v52[4 * v60 + 2];
            v62 = *v61;
          }
          *(_DWORD *)(a1 + 16) = v53 + v62;
          v63 = *((_WORD *)v61 + 1);
        }
        else
        {
          v54 = *(_QWORD *)(a1 + 32) - 1;
          while (v54 != -1)
          {
            v55 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v55 >> 8;
            v56 = *(unsigned __int8 **)(a1 + 24);
            *((_QWORD *)&v58 + 1) = *v56;
            *(_QWORD *)&v58 = v55;
            v57 = v58 >> 8;
            *(_QWORD *)(a1 + 8) = v57;
            v59 = v53 - 8;
            *(_DWORD *)(a1 + 16) = v53 - 8;
            *(_QWORD *)(a1 + 24) = v56 + 1;
            *(_QWORD *)(a1 + 32) = v54--;
            LODWORD(v56) = v53 - 58;
            v53 -= 8;
            if (v56 >= 0xF)
            {
              v53 = v59;
              goto LABEL_47;
            }
          }
          if (!sub_2367BFB8C(v52, a1 + 8, &v151))
          {
LABEL_91:
            result = 2;
            LODWORD(v5) = v51;
            i = v49;
            goto LABEL_175;
          }
          LOBYTE(v63) = v151;
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 120) + v49) = v63;
        v50 = *(_DWORD *)(a1 + 272) - 1;
        *(_DWORD *)(a1 + 272) = v50;
        ++v49;
        i = *(_DWORD *)(a1 + 88);
        if (i == (_DWORD)v49)
        {
          *(_DWORD *)a1 = 13;
          LODWORD(v5) = v51 - 1;
          goto LABEL_187;
        }
        v51 = (v51 - 1);
        if (!(_DWORD)v51)
        {
          i = v5 + v3;
          goto LABEL_78;
        }
      }
      *(_DWORD *)a1 = 8;
      LODWORD(v3) = v49;
    }
    else
    {
      v51 = v5;
    }
    v64 = *(_QWORD *)(a1 + 120);
    v65 = v3;
    v66 = *(int *)(a1 + 92);
    v67 = *(unsigned __int8 *)(v64 + (v66 & ((int)v3 - 1)));
    v68 = *(unsigned __int8 *)(v64 + (v66 & ((int)v3 - 2)));
    v69 = *(_DWORD *)(a1 + 272);
    v3 = (int)v3;
    v5 = v51;
    do
    {
      v70 = v67;
      if (!v69)
      {
        if (!sub_2367C1E58(a1))
          goto LABEL_112;
        if (*(_DWORD *)(a1 + 256))
        {
          v48 = 1;
          goto LABEL_38;
        }
      }
      v71 = *(_BYTE **)(*(_QWORD *)(a1 + 168)
                      + 8
                      * *(unsigned __int8 *)(*(_QWORD *)(a1 + 152)
                                           + (*(_BYTE *)(*(_QWORD *)(a1 + 144) + v68 + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 144) + v70))));
      v151 = 0;
      v72 = *(_DWORD *)(a1 + 16);
      if ((v72 - 50) >= 0xF)
      {
        v76 = *v6;
LABEL_67:
        v79 = v76 >> v72;
        v80 = &v71[4 * (v76 >> v72)];
        v81 = *v80;
        if (v81 >= 9)
        {
          v72 += 8;
          v80 += 4 * (BYTE1(v79) & ~(-1 << (v81 - 8)) & 0x7F)
               + 4 * *(unsigned __int16 *)&v71[4 * v79 + 2];
          v81 = *v80;
        }
        *(_DWORD *)(a1 + 16) = v72 + v81;
        v67 = v80[2];
      }
      else
      {
        v73 = *(_QWORD *)(a1 + 32) - 1;
        while (v73 != -1)
        {
          v74 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v74 >> 8;
          v75 = *(unsigned __int8 **)(a1 + 24);
          *((_QWORD *)&v77 + 1) = *v75;
          *(_QWORD *)&v77 = v74;
          v76 = v77 >> 8;
          *(_QWORD *)(a1 + 8) = v76;
          v78 = v72 - 8;
          *(_DWORD *)(a1 + 16) = v72 - 8;
          *(_QWORD *)(a1 + 24) = v75 + 1;
          *(_QWORD *)(a1 + 32) = v73--;
          LODWORD(v75) = v72 - 58;
          v72 -= 8;
          if (v75 >= 0xF)
          {
            v72 = v78;
            goto LABEL_67;
          }
        }
        if (!sub_2367BFB8C(v71, a1 + 8, &v151))
        {
LABEL_112:
          result = 2;
          i = v3;
          goto LABEL_175;
        }
        v67 = v151;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + v3) = v67;
      v69 = *(_DWORD *)(a1 + 272) - 1;
      *(_DWORD *)(a1 + 272) = v69;
      ++v3;
      i = *(_DWORD *)(a1 + 88);
      if (i == (_DWORD)v3)
      {
        *(_DWORD *)a1 = 13;
        LODWORD(v5) = v5 - 1;
        goto LABEL_187;
      }
      v68 = v70;
      v5 = (v5 - 1);
    }
    while ((_DWORD)v5);
    i = v51 + v65;
LABEL_78:
    if (*(int *)(a1 + 264) <= 0)
    {
      LODWORD(v5) = 0;
      v150 = 14;
      goto LABEL_181;
    }
    LODWORD(v5) = 0;
    v3 = v47;
LABEL_81:
    *(_DWORD *)a1 = 9;
    v82 = *(_DWORD *)(a1 + 360);
    if ((v82 & 0x80000000) == 0)
    {
      v83 = v82 == 0;
      *(_DWORD *)(a1 + 260) = v83;
      v84 = *(_DWORD *)(a1 + 96) - 1;
      *(_DWORD *)(a1 + 96) = v84;
      v85 = *(_DWORD *)(a1 + 4 * (v84 & 3) + 100);
      goto LABEL_116;
    }
    if (!*(_DWORD *)(a1 + 280) && !sub_2367C21C8(a1))
    {
LABEL_174:
      result = 2;
      goto LABEL_175;
    }
    v86 = a1 + 752;
    v151 = 0;
    v87 = *(_BYTE **)(*(_QWORD *)(a1 + 216) + 8 * *(unsigned __int8 *)(a1 + 352));
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v88 = v9;
    v89 = v10;
    if ((v10 - 50) > 0xE)
    {
LABEL_88:
      v95 = v88 >> v89;
      v96 = &v87[4 * (v88 >> v89)];
      v97 = *v96;
      if (v97 >= 9)
      {
        v89 += 8;
        v96 += 4 * (BYTE1(v95) & ~(-1 << (v97 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v87[4 * v95 + 2];
        v97 = *v96;
      }
      *(_DWORD *)(a1 + 16) = v89 + v97;
      v98 = *((unsigned __int16 *)v96 + 1);
    }
    else
    {
      v90 = v11 + 1;
      v91 = v12 - 1;
      v88 = *(_QWORD *)(a1 + 8);
      v92 = *(_DWORD *)(a1 + 16);
      while (v91 != -1)
      {
        *(_QWORD *)(a1 + 8) = v88 >> 8;
        *((_QWORD *)&v93 + 1) = *(unsigned __int8 *)(v90 - 1);
        *(_QWORD *)&v93 = v88;
        v88 = v93 >> 8;
        *(_QWORD *)(a1 + 8) = v88;
        v89 = v92 - 8;
        *(_DWORD *)(a1 + 16) = v92 - 8;
        *(_QWORD *)(a1 + 24) = v90;
        *(_QWORD *)(a1 + 32) = v91;
        ++v90;
        --v91;
        v94 = v92 - 58;
        v92 -= 8;
        if (v94 >= 0xF)
          goto LABEL_88;
      }
      if (!sub_2367BFB8C(v87, a1 + 8, &v151))
        goto LABEL_174;
      v98 = v151;
    }
    v99 = *(_DWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 280) = v99 - 1;
    *(_DWORD *)(a1 + 260) = 0;
    if (v98 > 0xF)
    {
      v101 = 0;
      v102 = *(unsigned __int8 *)(v86 + v98);
      if (*(_BYTE *)(v86 + v98))
      {
        v103 = *(_DWORD *)(a1 + 16);
        v104 = 64 - v103;
        if (64 - v103 < v102)
        {
          v105 = *(_QWORD *)(a1 + 32) - 1;
          while (v105 != -1)
          {
            v106 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v106 >> 8;
            v107 = *(unsigned __int8 **)(a1 + 24);
            *((_QWORD *)&v109 + 1) = *v107;
            *(_QWORD *)&v109 = v106;
            v108 = v109 >> 8;
            *(_QWORD *)(a1 + 8) = v108;
            v103 -= 8;
            *(_DWORD *)(a1 + 16) = v103;
            *(_QWORD *)(a1 + 24) = v107 + 1;
            *(_QWORD *)(a1 + 32) = v105--;
            v104 += 8;
            if (v104 >= v102)
              goto LABEL_114;
          }
          *(_DWORD *)(a1 + 280) = v99;
          goto LABEL_173;
        }
        v108 = *v6;
LABEL_114:
        v101 = (v108 >> v103) & ~(-1 << v102);
        *(_DWORD *)(a1 + 16) = v103 + v102;
      }
      v83 = 0;
      v85 = (v101 << *(_DWORD *)(a1 + 320)) + *(_DWORD *)(a1 + 4 * v98 + 1296);
      goto LABEL_116;
    }
    *(_DWORD *)(a1 + 360) = v98;
    if (v98 <= 3)
    {
      v83 = 1u >> v98;
      *(_DWORD *)(a1 + 260) = 1u >> v98;
      v100 = *(_DWORD *)(a1 + 96);
      v85 = *(_DWORD *)(a1 + 4 * (((_BYTE)v100 + ~(_BYTE)v98) & 3) + 100);
      *(_DWORD *)(a1 + 360) = v85;
      *(_DWORD *)(a1 + 96) = v100 - v83;
      goto LABEL_117;
    }
    v83 = 0;
    if (v98 >= 0xA)
      v110 = 10;
    else
      v110 = 3;
    if (v98 >= 0xA)
      v111 = -10;
    else
      v111 = -4;
    v85 = ((0x605142u >> (4 * (v111 + v98))) & 7)
        + *(_DWORD *)(a1 + 4 * ((*(_DWORD *)(a1 + 96) + v110) & 3) + 100)
        - 3;
    if (v85 < 1)
      v85 = 0x7FFFFFFF;
LABEL_116:
    *(_DWORD *)(a1 + 360) = v85;
LABEL_117:
    v112 = *(_DWORD *)(a1 + 80);
    v113 = *(_DWORD *)(a1 + 84);
    if (v113 != v112)
    {
      if (i >= v112)
        v113 = *(_DWORD *)(a1 + 80);
      else
        v113 = i;
      *(_DWORD *)(a1 + 84) = v113;
    }
    v5 = *(unsigned int *)(a1 + 356);
    v114 = v85 - v113;
    if (v85 > v113)
      break;
    v137 = *(_DWORD *)(a1 + 96);
    v138 = *(_DWORD *)(a1 + 92) & (i - v85);
    v139 = *(_QWORD *)(a1 + 120);
    v7 = i;
    v140 = (_OWORD *)(v139 + i);
    v141 = (_OWORD *)(v139 + v138);
    v142 = v5 + i;
    *(_DWORD *)(a1 + 4 * (v137 & 3) + 100) = v85;
    *(_DWORD *)(a1 + 96) = v137 + 1;
    *(_DWORD *)(a1 + 264) -= v5;
    *v140 = *v141;
    if (v138 + (int)v5 > i && v142 > v138)
      goto LABEL_153;
    v144 = *(_DWORD *)(a1 + 88);
    if (v142 >= v144 || v138 + (int)v5 >= v144)
      goto LABEL_153;
    if ((int)v5 >= 17)
    {
      v145 = v140 + 1;
      v146 = v141 + 1;
      if (v5 < 0x21)
        *v145 = *v146;
      else
        memcpy(v145, v146, (v5 - 16));
    }
LABEL_167:
    if (*(int *)(a1 + 264) <= 0)
    {
      *(_DWORD *)a1 = 14;
      result = 1;
      i = v142;
      goto LABEL_175;
    }
  }
  if (v85 > 2147483644)
    return 4294967280;
  if ((int)v3 >= v114)
  {
    if (sub_2367C2504(a1, (int)v3 - v114, *(_DWORD *)(a1 + 356)))
    {
      i += sub_2367C1A60(a1, i);
      goto LABEL_165;
    }
    return 4294967278;
  }
  if ((v5 - 4) > 0x1B)
    return 4294967284;
  v115 = 0;
  v116 = *(_QWORD *)(a1 + 704);
  if (*(_DWORD *)(v116 + 248))
    v115 = *(unsigned __int8 *)(v116
                              + (*(_BYTE *)(*(_QWORD *)(a1 + 144)
                                                           + *(unsigned __int8 *)(*(_QWORD *)(a1 + 120)
                                                                                + (*(int *)(a1 + 92) & (unint64_t)(i - 2)))
                                                           + 256) | *(_BYTE *)(*(_QWORD *)(a1 + 144)
                                                                               + *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + (*(int *)(a1 + 92) & (unint64_t)(i - 1)))))
                              + 252);
  v117 = v115;
  v118 = v116 + 8 * v115;
  v119 = *(_QWORD *)(v118 + 320);
  v120 = *(_QWORD *)(v118 + 832);
  LODWORD(v118) = *(_DWORD *)(v119 + 4 * v5 + 32);
  v121 = *(_BYTE *)(v119 + v5);
  v122 = v85 - v3 + ~v113;
  v123 = v122 >> v121;
  *(_DWORD *)(a1 + 96) += v83;
  v124 = v118 + (v122 & ~(-1 << v121)) * v5;
  v125 = *(_DWORD *)(v120 + 24);
  if (v122 >> v121 < v125 && *(_BYTE *)(v119 + v5) || (v126 = *(unsigned __int8 *)(v116 + 316), v126 < 2))
  {
LABEL_137:
    v128 = v119;
    goto LABEL_138;
  }
  v127 = v122 - v125 * ((1 << v121) & 0xFFFFFFFE);
  while (2)
  {
    if (!v117 || (v128 = *(_QWORD *)(v116 + 320), (v129 = *(_BYTE *)(v128 + v5)) == 0))
    {
LABEL_136:
      v116 += 8;
      --v117;
      if (!--v126)
        goto LABEL_137;
      continue;
    }
    break;
  }
  v130 = *(_DWORD *)(*(_QWORD *)(v116 + 832) + 24) * ((1 << v129) & 0xFFFFFFFE);
  v131 = __OFSUB__(v127, v130);
  v132 = v127 - v130;
  if (v132 < 0 == v131)
  {
    v127 = v132;
    goto LABEL_136;
  }
  v123 = v127 >> v129;
  v124 = *(_DWORD *)(v128 + 4 * v5 + 32) + (v127 & ~(-1 << v129)) * v5;
  v120 = *(_QWORD *)(v116 + 832);
LABEL_138:
  if (!*(_BYTE *)(v128 + v5))
    return 4294967284;
  v133 = *(_QWORD *)(v128 + 168);
  if (!v133)
    return 4294967277;
  if (v123 >= *(_DWORD *)(v120 + 24))
    return 4294967285;
  v134 = (void *)(v133 + v124);
  v135 = (void *)(*(_QWORD *)(a1 + 120) + i);
  if (v123 == *(__int16 *)(v120 + 48))
  {
    memcpy(v135, v134, v5);
    v136 = v5;
    goto LABEL_164;
  }
  v136 = sub_236785D98((uint64_t)v135, (char *)v134, v5, (_QWORD *)v120, v123);
  if (!v136 && *(int *)(a1 + 360) < 121)
    return 4294967285;
LABEL_164:
  i += v136;
  *(_DWORD *)(a1 + 264) -= v136;
LABEL_165:
  if (i < *(_DWORD *)(a1 + 88))
  {
    v142 = i;
    goto LABEL_167;
  }
  v150 = 15;
LABEL_181:
  *(_DWORD *)a1 = v150;
LABEL_187:
  result = 1;
LABEL_175:
  *(_DWORD *)(a1 + 76) = i;
  *(_DWORD *)(a1 + 4) = v5;
  return result;
}

void **sub_2367C1A20(void **result)
{
  void **v1;

  if (((_WORD)result[84] & 8) != 0)
  {
    v1 = result;
    result = (void **)memcpy(result[15], v1[16], *((int *)v1 + 19));
    *((_WORD *)v1 + 336) &= ~8u;
  }
  return result;
}

uint64_t sub_2367C1A60(uint64_t a1, int a2)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v4 = *(int **)(a1 + 712);
  v5 = v4[5];
  v6 = a2;
  do
  {
    v7 = v4[4] - v5;
    if (!v7)
      break;
    v8 = v4[2];
    v9 = v4[3];
    v10 = v4[v8 + 39] - (v9 + v4[v8 + 38]);
    if (v7 >= v10)
      v7 = v4[v8 + 39] - (v9 + v4[v8 + 38]);
    v11 = v7 >= *(_DWORD *)(a1 + 88) - v6 ? *(_DWORD *)(a1 + 88) - v6 : v7;
    memcpy((void *)(*(_QWORD *)(a1 + 120) + v6), (const void *)(*(_QWORD *)&v4[2 * v8 + 6] + v9), v11);
    v4[3] += v11;
    v5 = v4[5] + v11;
    v4[5] = v5;
    if (v11 == v10)
      *((_QWORD *)v4 + 1) = (v4[2] + 1);
    v6 += v11;
  }
  while (v6 != *(_DWORD *)(a1 + 88));
  return (v6 - a2);
}

uint64_t sub_2367C1B30(uint64_t a1)
{
  unsigned int v1;
  uint64_t v3;
  _BYTE *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  __int128 v27;
  int v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int16 *v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  __int128 v41;
  unsigned int v42;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;

  v1 = *(_DWORD *)(a1 + 288);
  if (v1 < 2)
    return 0;
  v3 = *(_QWORD *)(a1 + 248);
  v4 = (_BYTE *)(*(_QWORD *)(a1 + 240) + 2528);
  v5 = (unint64_t *)(a1 + 8);
  v46 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  if ((v7 - 50) > 0xE)
  {
LABEL_6:
    v17 = v10 >> v11;
    v18 = &v4[4 * (v10 >> v11)];
    v19 = *v18;
    if (v19 >= 9)
    {
      v11 += 8;
      v18 += 4 * (BYTE1(v17) & ~(-1 << (v19 - 8)) & 0x7F)
           + 4 * *(unsigned __int16 *)&v4[4 * v17 + 2];
      v19 = *v18;
    }
    *(_DWORD *)(a1 + 16) = v11 + v19;
    v46 = *((unsigned __int16 *)v18 + 1);
  }
  else
  {
    v12 = v8 + 1;
    v13 = v9 - 1;
    v10 = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    while (v13 != -1)
    {
      *(_QWORD *)(a1 + 8) = v10 >> 8;
      *((_QWORD *)&v15 + 1) = *(unsigned __int8 *)(v12 - 1);
      *(_QWORD *)&v15 = v10;
      v10 = v15 >> 8;
      *(_QWORD *)(a1 + 8) = v10;
      v11 = v14 - 8;
      *(_DWORD *)(a1 + 16) = v14 - 8;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      ++v12;
      --v13;
      v16 = v14 - 58;
      v14 -= 8;
      if (v16 >= 0xF)
        goto LABEL_6;
    }
    if (!sub_2367BFB8C(v4, a1 + 8, &v46))
      return 0;
  }
  v47 = 0;
  if (*(_DWORD *)(a1 + 668))
  {
    v20 = *(_DWORD *)(a1 + 268);
  }
  else
  {
    v21 = (_BYTE *)(v3 + 1584);
    v22 = *(_DWORD *)(a1 + 16);
    if ((v22 - 50) >= 0xF)
    {
      v26 = *v5;
LABEL_19:
      v29 = v26 >> v22;
      v30 = &v21[4 * (v26 >> v22)];
      v31 = *v30;
      if (v31 >= 9)
      {
        v22 += 8;
        v30 += 4 * (BYTE1(v29) & ~(-1 << (v31 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v21[4 * v29 + 2];
        v31 = *v30;
      }
      *(_DWORD *)(a1 + 16) = v22 + v31;
      v20 = *((unsigned __int16 *)v30 + 1);
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 32) - 1;
      while (v23 != -1)
      {
        v24 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v24 >> 8;
        v25 = *(unsigned __int8 **)(a1 + 24);
        *((_QWORD *)&v27 + 1) = *v25;
        *(_QWORD *)&v27 = v24;
        v26 = v27 >> 8;
        *(_QWORD *)(a1 + 8) = v26;
        v28 = v22 - 8;
        *(_DWORD *)(a1 + 16) = v22 - 8;
        *(_QWORD *)(a1 + 24) = v25 + 1;
        *(_QWORD *)(a1 + 32) = v23--;
        LODWORD(v25) = v22 - 58;
        v22 -= 8;
        if (v25 >= 0xF)
        {
          v22 = v28;
          goto LABEL_19;
        }
      }
      if (!sub_2367BFB8C(v21, a1 + 8, &v47))
        goto LABEL_32;
      v20 = v47;
    }
  }
  v32 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v20);
  v33 = *((unsigned __int8 *)v32 + 2);
  v34 = *v32;
  v35 = *(_DWORD *)(a1 + 16);
  v36 = 64 - v35;
  if (64 - v35 < v33)
  {
    v37 = *(_QWORD *)(a1 + 32) - 1;
    while (v37 != -1)
    {
      v38 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v38 >> 8;
      v39 = *(unsigned __int8 **)(a1 + 24);
      *((_QWORD *)&v41 + 1) = *v39;
      *(_QWORD *)&v41 = v38;
      v40 = v41 >> 8;
      *(_QWORD *)(a1 + 8) = v40;
      v35 -= 8;
      *(_DWORD *)(a1 + 16) = v35;
      *(_QWORD *)(a1 + 24) = v39 + 1;
      *(_QWORD *)(a1 + 32) = v37--;
      v36 += 8;
      if (v36 >= v33)
        goto LABEL_28;
    }
    *(_DWORD *)(a1 + 268) = v20;
LABEL_32:
    *(_DWORD *)(a1 + 668) = 0;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    return 0;
  }
  v40 = *v5;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v35 + v33;
  *(_DWORD *)(a1 + 276) = ((v40 >> v35) & ~(-1 << v33)) + v34;
  *(_DWORD *)(a1 + 668) = 0;
  if (v46)
  {
    if (v46 == 1)
      v42 = *(_DWORD *)(a1 + 308) + 1;
    else
      v42 = v46 - 2;
  }
  else
  {
    v42 = *(_DWORD *)(a1 + 304);
  }
  if (v42 >= v1)
    v44 = v1;
  else
    v44 = 0;
  v45 = v42 - v44;
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = v45;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v45);
  return 1;
}

uint64_t sub_2367C1E58(uint64_t a1)
{
  unsigned int v1;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  __int128 v40;
  unsigned int v41;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;

  v1 = *(_DWORD *)(a1 + 284);
  if (v1 < 2)
    return 0;
  v3 = *(_BYTE **)(a1 + 240);
  v4 = *(_BYTE **)(a1 + 248);
  v5 = (unint64_t *)(a1 + 8);
  v47 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  if ((v7 - 50) > 0xE)
  {
LABEL_6:
    v17 = v10 >> v11;
    v18 = &v3[4 * (v10 >> v11)];
    v19 = *v18;
    if (v19 >= 9)
    {
      v11 += 8;
      v18 += 4 * (BYTE1(v17) & ~(-1 << (v19 - 8)) & 0x7F)
           + 4 * *(unsigned __int16 *)&v3[4 * v17 + 2];
      v19 = *v18;
    }
    *(_DWORD *)(a1 + 16) = v11 + v19;
    v47 = *((unsigned __int16 *)v18 + 1);
  }
  else
  {
    v12 = v8 + 1;
    v13 = v9 - 1;
    v10 = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    while (v13 != -1)
    {
      *(_QWORD *)(a1 + 8) = v10 >> 8;
      *((_QWORD *)&v15 + 1) = *(unsigned __int8 *)(v12 - 1);
      *(_QWORD *)&v15 = v10;
      v10 = v15 >> 8;
      *(_QWORD *)(a1 + 8) = v10;
      v11 = v14 - 8;
      *(_DWORD *)(a1 + 16) = v14 - 8;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      ++v12;
      --v13;
      v16 = v14 - 58;
      v14 -= 8;
      if (v16 >= 0xF)
        goto LABEL_6;
    }
    if (!sub_2367BFB8C(v3, a1 + 8, &v47))
      return 0;
  }
  v48 = 0;
  if (*(_DWORD *)(a1 + 668))
  {
    v20 = *(_DWORD *)(a1 + 268);
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 16);
    if ((v21 - 50) >= 0xF)
    {
      v25 = *v5;
LABEL_19:
      v28 = v25 >> v21;
      v29 = &v4[4 * (v25 >> v21)];
      v30 = *v29;
      if (v30 >= 9)
      {
        v21 += 8;
        v29 += 4 * (BYTE1(v28) & ~(-1 << (v30 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v4[4 * v28 + 2];
        v30 = *v29;
      }
      *(_DWORD *)(a1 + 16) = v21 + v30;
      v20 = *((unsigned __int16 *)v29 + 1);
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 32) - 1;
      while (v22 != -1)
      {
        v23 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23 >> 8;
        v24 = *(unsigned __int8 **)(a1 + 24);
        *((_QWORD *)&v26 + 1) = *v24;
        *(_QWORD *)&v26 = v23;
        v25 = v26 >> 8;
        *(_QWORD *)(a1 + 8) = v25;
        v27 = v21 - 8;
        *(_DWORD *)(a1 + 16) = v21 - 8;
        *(_QWORD *)(a1 + 24) = v24 + 1;
        *(_QWORD *)(a1 + 32) = v22--;
        LODWORD(v24) = v21 - 58;
        v21 -= 8;
        if (v24 >= 0xF)
        {
          v21 = v27;
          goto LABEL_19;
        }
      }
      if (!sub_2367BFB8C(v4, a1 + 8, &v48))
        goto LABEL_32;
      v20 = v48;
    }
  }
  v31 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v20);
  v32 = *((unsigned __int8 *)v31 + 2);
  v33 = *v31;
  v34 = *(_DWORD *)(a1 + 16);
  v35 = 64 - v34;
  if (64 - v34 < v32)
  {
    v36 = *(_QWORD *)(a1 + 32) - 1;
    while (v36 != -1)
    {
      v37 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v37 >> 8;
      v38 = *(unsigned __int8 **)(a1 + 24);
      *((_QWORD *)&v40 + 1) = *v38;
      *(_QWORD *)&v40 = v37;
      v39 = v40 >> 8;
      *(_QWORD *)(a1 + 8) = v39;
      v34 -= 8;
      *(_DWORD *)(a1 + 16) = v34;
      *(_QWORD *)(a1 + 24) = v38 + 1;
      *(_QWORD *)(a1 + 32) = v36--;
      v35 += 8;
      if (v35 >= v32)
        goto LABEL_28;
    }
    *(_DWORD *)(a1 + 268) = v20;
LABEL_32:
    *(_DWORD *)(a1 + 668) = 0;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    return 0;
  }
  v39 = *v5;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v34 + v32;
  *(_DWORD *)(a1 + 272) = ((v39 >> v34) & ~(-1 << v32)) + v33;
  *(_DWORD *)(a1 + 668) = 0;
  if (v47)
  {
    if (v47 == 1)
      v41 = *(_DWORD *)(a1 + 300) + 1;
    else
      v41 = v47 - 2;
  }
  else
  {
    v41 = *(_DWORD *)(a1 + 296);
  }
  if (v41 >= v1)
    v43 = v1;
  else
    v43 = 0;
  v44 = v41 - v43;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 300) = v44;
  v45 = v44 << 6;
  v46 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 152) = v46 + v45;
  *(_DWORD *)(a1 + 256) = (*(_DWORD *)(a1 + 4 * (v44 >> 5) + 720) >> v44) & 1;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(unsigned __int8 *)(v46 + v45));
  *(_QWORD *)(a1 + 144) = (char *)&unk_236924C88 + 512 * (unint64_t)(*(_BYTE *)(*(_QWORD *)(a1 + 696) + v44) & 3);
  return 1;
}

uint64_t sub_2367C21C8(uint64_t a1)
{
  unsigned int v1;
  uint64_t v3;
  _BYTE *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  __int128 v27;
  int v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int16 *v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  __int128 v41;
  unsigned int v42;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;

  v1 = *(_DWORD *)(a1 + 292);
  if (v1 < 2)
    return 0;
  v3 = *(_QWORD *)(a1 + 248);
  v4 = (_BYTE *)(*(_QWORD *)(a1 + 240) + 5056);
  v5 = (unint64_t *)(a1 + 8);
  v47 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  if ((v7 - 50) > 0xE)
  {
LABEL_6:
    v17 = v10 >> v11;
    v18 = &v4[4 * (v10 >> v11)];
    v19 = *v18;
    if (v19 >= 9)
    {
      v11 += 8;
      v18 += 4 * (BYTE1(v17) & ~(-1 << (v19 - 8)) & 0x7F)
           + 4 * *(unsigned __int16 *)&v4[4 * v17 + 2];
      v19 = *v18;
    }
    *(_DWORD *)(a1 + 16) = v11 + v19;
    v47 = *((unsigned __int16 *)v18 + 1);
  }
  else
  {
    v12 = v8 + 1;
    v13 = v9 - 1;
    v10 = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    while (v13 != -1)
    {
      *(_QWORD *)(a1 + 8) = v10 >> 8;
      *((_QWORD *)&v15 + 1) = *(unsigned __int8 *)(v12 - 1);
      *(_QWORD *)&v15 = v10;
      v10 = v15 >> 8;
      *(_QWORD *)(a1 + 8) = v10;
      v11 = v14 - 8;
      *(_DWORD *)(a1 + 16) = v14 - 8;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      ++v12;
      --v13;
      v16 = v14 - 58;
      v14 -= 8;
      if (v16 >= 0xF)
        goto LABEL_6;
    }
    if (!sub_2367BFB8C(v4, a1 + 8, &v47))
      return 0;
  }
  v48 = 0;
  if (*(_DWORD *)(a1 + 668))
  {
    v20 = *(_DWORD *)(a1 + 268);
  }
  else
  {
    v21 = (_BYTE *)(v3 + 3168);
    v22 = *(_DWORD *)(a1 + 16);
    if ((v22 - 50) >= 0xF)
    {
      v26 = *v5;
LABEL_19:
      v29 = v26 >> v22;
      v30 = &v21[4 * (v26 >> v22)];
      v31 = *v30;
      if (v31 >= 9)
      {
        v22 += 8;
        v30 += 4 * (BYTE1(v29) & ~(-1 << (v31 - 8)) & 0x7F)
             + 4 * *(unsigned __int16 *)&v21[4 * v29 + 2];
        v31 = *v30;
      }
      *(_DWORD *)(a1 + 16) = v22 + v31;
      v20 = *((unsigned __int16 *)v30 + 1);
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 32) - 1;
      while (v23 != -1)
      {
        v24 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v24 >> 8;
        v25 = *(unsigned __int8 **)(a1 + 24);
        *((_QWORD *)&v27 + 1) = *v25;
        *(_QWORD *)&v27 = v24;
        v26 = v27 >> 8;
        *(_QWORD *)(a1 + 8) = v26;
        v28 = v22 - 8;
        *(_DWORD *)(a1 + 16) = v22 - 8;
        *(_QWORD *)(a1 + 24) = v25 + 1;
        *(_QWORD *)(a1 + 32) = v23--;
        LODWORD(v25) = v22 - 58;
        v22 -= 8;
        if (v25 >= 0xF)
        {
          v22 = v28;
          goto LABEL_19;
        }
      }
      if (!sub_2367BFB8C(v21, a1 + 8, &v48))
        goto LABEL_32;
      v20 = v48;
    }
  }
  v32 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v20);
  v33 = *((unsigned __int8 *)v32 + 2);
  v34 = *v32;
  v35 = *(_DWORD *)(a1 + 16);
  v36 = 64 - v35;
  if (64 - v35 < v33)
  {
    v37 = *(_QWORD *)(a1 + 32) - 1;
    while (v37 != -1)
    {
      v38 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v38 >> 8;
      v39 = *(unsigned __int8 **)(a1 + 24);
      *((_QWORD *)&v41 + 1) = *v39;
      *(_QWORD *)&v41 = v38;
      v40 = v41 >> 8;
      *(_QWORD *)(a1 + 8) = v40;
      v35 -= 8;
      *(_DWORD *)(a1 + 16) = v35;
      *(_QWORD *)(a1 + 24) = v39 + 1;
      *(_QWORD *)(a1 + 32) = v37--;
      v36 += 8;
      if (v36 >= v33)
        goto LABEL_28;
    }
    *(_DWORD *)(a1 + 268) = v20;
LABEL_32:
    *(_DWORD *)(a1 + 668) = 0;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    return 0;
  }
  v40 = *v5;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v35 + v33;
  *(_DWORD *)(a1 + 280) = ((v40 >> v35) & ~(-1 << v33)) + v34;
  *(_DWORD *)(a1 + 668) = 0;
  if (v47)
  {
    if (v47 == 1)
      v42 = *(_DWORD *)(a1 + 316) + 1;
    else
      v42 = v47 - 2;
  }
  else
  {
    v42 = *(_DWORD *)(a1 + 312);
  }
  if (v42 >= v1)
    v44 = v1;
  else
    v44 = 0;
  v45 = v42 - v44;
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 316) = v45;
  v46 = *(_QWORD *)(a1 + 336) + 4 * v45;
  *(_QWORD *)(a1 + 160) = v46;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(v46 + *(int *)(a1 + 260));
  return 1;
}

uint64_t sub_2367C2504(uint64_t a1, int a2, int a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  signed int v6;
  uint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;

  v3 = *(_DWORD **)(a1 + 712);
  v4 = v3[54];
  if (v4 == -1)
  {
    v5 = v3[1];
    v6 = 32 - __clz(v5 - 1);
    if (v6 <= 8)
      v6 = 8;
    v4 = v6 - 8;
    v3[54] = v4;
    if (v5 >= 1)
    {
      LODWORD(v7) = 0;
      for (i = 0; i < v5; i += 1 << v4)
      {
        v9 = (int)v7;
        do
          v7 = v9++;
        while (v3[v7 + 39] < i);
        *((_BYTE *)v3 + (i >> v4) + 220) = v7;
      }
    }
  }
  v10 = *((unsigned __int8 *)v3 + (a2 >> v4) + 220);
  do
    v11 = v10++;
  while (v3[v11 + 39] <= a2);
  if (v3[1] < a3 + a2)
    return 0;
  v13 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 4 * (v13 & 3) + 100) = *(_DWORD *)(a1 + 360);
  *(_DWORD *)(a1 + 96) = v13 + 1;
  *(_DWORD *)(a1 + 264) -= a3;
  v14 = a2 - v3[v11 + 38];
  v3[2] = v11;
  v3[3] = v14;
  v3[4] = a3;
  v3[5] = 0;
  return 1;
}

uint64_t sub_2367C2608(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;

  v1 = *(_DWORD *)(result + 288);
  if (v1 >= 2)
  {
    v2 = *(_QWORD *)(result + 240) + 2528;
    v3 = *(_DWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 8);
    if (v3 >= 0x30)
    {
      v5 = *(_QWORD **)(result + 24);
      v6 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v7 + 1) = *v5;
      *(_QWORD *)&v7 = *(_QWORD *)(result + 8);
      v4 = v7 >> 48;
      *(_QWORD *)(result + 8) = v4;
      v3 ^= 0x30u;
      *(_QWORD *)(result + 24) = (char *)v5 + 6;
      *(_QWORD *)(result + 32) = v6 - 6;
    }
    v8 = v4 >> v3;
    v9 = (unsigned __int8 *)(v2 + 4 * (v4 >> v3));
    v10 = *v9;
    if (v10 >= 9)
    {
      v3 += 8;
      v9 += 4 * ((v8 >> 8) & ~(-1 << (v10 - 8)))
          + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      v10 = *v9;
    }
    v11 = *(_QWORD *)(result + 248) + 1584;
    v12 = v3 + v10;
    *(_DWORD *)(result + 16) = v3 + v10;
    v13 = *((unsigned __int16 *)v9 + 1);
    if (v12 >= 0x30)
    {
      v14 = *(_QWORD **)(result + 24);
      v15 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v16 + 1) = *v14;
      *(_QWORD *)&v16 = v4;
      v4 = v16 >> 48;
      *(_QWORD *)(result + 8) = v4;
      v12 ^= 0x30u;
      *(_QWORD *)(result + 24) = (char *)v14 + 6;
      *(_QWORD *)(result + 32) = v15 - 6;
    }
    v17 = v4 >> v12;
    v18 = (unsigned __int8 *)(v11 + 4 * (v4 >> v12));
    v19 = *v18;
    if (v19 >= 9)
    {
      v12 += 8;
      v18 += 4 * ((v17 >> 8) & ~(-1 << (v19 - 8)))
           + 4 * *(unsigned __int16 *)(v11 + 4 * v17 + 2);
      v19 = *v18;
    }
    v20 = v12 + v19;
    *(_DWORD *)(result + 16) = v20;
    v21 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * *((unsigned __int16 *)v18 + 1));
    v22 = *((unsigned __int8 *)v21 + 2);
    v23 = *v21;
    if (v20 >= 0x20)
    {
      v24 = *(unsigned int **)(result + 24);
      v25 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v26 + 1) = *v24;
      *(_QWORD *)&v26 = v4;
      v4 = v26 >> 32;
      *(_QWORD *)(result + 8) = v4;
      v20 ^= 0x20u;
      *(_QWORD *)(result + 24) = v24 + 1;
      *(_QWORD *)(result + 32) = v25 - 4;
    }
    *(_DWORD *)(result + 16) = v20 + v22;
    *(_DWORD *)(result + 276) = ((v4 >> v20) & ~(-1 << v22)) + v23;
    if (v13)
    {
      if (v13 == 1)
        v27 = *(_DWORD *)(result + 308) + 1;
      else
        v27 = v13 - 2;
    }
    else
    {
      v27 = *(_DWORD *)(result + 304);
    }
    if (v27 < v1)
      v1 = 0;
    v28 = v27 - v1;
    *(_DWORD *)(result + 304) = *(_DWORD *)(result + 308);
    *(_DWORD *)(result + 308) = v28;
    *(_QWORD *)(result + 136) = *(_QWORD *)(*(_QWORD *)(result + 192) + 8 * v28);
  }
  return result;
}

uint64_t sub_2367C27B8(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_DWORD *)(result + 284);
  if (v1 >= 2)
  {
    v2 = *(_QWORD *)(result + 240);
    v3 = *(_DWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 8);
    if (v3 >= 0x30)
    {
      v5 = *(_QWORD **)(result + 24);
      v6 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v7 + 1) = *v5;
      *(_QWORD *)&v7 = *(_QWORD *)(result + 8);
      v4 = v7 >> 48;
      *(_QWORD *)(result + 8) = v4;
      v3 ^= 0x30u;
      *(_QWORD *)(result + 24) = (char *)v5 + 6;
      *(_QWORD *)(result + 32) = v6 - 6;
    }
    v8 = v4 >> v3;
    v9 = (unsigned __int8 *)(v2 + 4 * (v4 >> v3));
    v10 = *v9;
    if (v10 >= 9)
    {
      v3 += 8;
      v9 += 4 * ((v8 >> 8) & ~(-1 << (v10 - 8)))
          + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      v10 = *v9;
    }
    v11 = *(_QWORD *)(result + 248);
    v12 = v3 + v10;
    *(_DWORD *)(result + 16) = v3 + v10;
    v13 = *((unsigned __int16 *)v9 + 1);
    if (v12 >= 0x30)
    {
      v14 = *(_QWORD **)(result + 24);
      v15 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v16 + 1) = *v14;
      *(_QWORD *)&v16 = v4;
      v4 = v16 >> 48;
      *(_QWORD *)(result + 8) = v4;
      v12 ^= 0x30u;
      *(_QWORD *)(result + 24) = (char *)v14 + 6;
      *(_QWORD *)(result + 32) = v15 - 6;
    }
    v17 = v4 >> v12;
    v18 = (unsigned __int8 *)(v11 + 4 * (v4 >> v12));
    v19 = *v18;
    if (v19 >= 9)
    {
      v12 += 8;
      v18 += 4 * ((v17 >> 8) & ~(-1 << (v19 - 8)))
           + 4 * *(unsigned __int16 *)(v11 + 4 * v17 + 2);
      v19 = *v18;
    }
    v20 = v12 + v19;
    *(_DWORD *)(result + 16) = v20;
    v21 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * *((unsigned __int16 *)v18 + 1));
    v22 = *((unsigned __int8 *)v21 + 2);
    v23 = *v21;
    if (v20 >= 0x20)
    {
      v24 = *(unsigned int **)(result + 24);
      v25 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v26 + 1) = *v24;
      *(_QWORD *)&v26 = v4;
      v4 = v26 >> 32;
      *(_QWORD *)(result + 8) = v4;
      v20 ^= 0x20u;
      *(_QWORD *)(result + 24) = v24 + 1;
      *(_QWORD *)(result + 32) = v25 - 4;
    }
    *(_DWORD *)(result + 16) = v20 + v22;
    *(_DWORD *)(result + 272) = ((v4 >> v20) & ~(-1 << v22)) + v23;
    if (v13)
    {
      if (v13 == 1)
        v27 = *(_DWORD *)(result + 300) + 1;
      else
        v27 = v13 - 2;
    }
    else
    {
      v27 = *(_DWORD *)(result + 296);
    }
    if (v27 < v1)
      v1 = 0;
    v28 = v27 - v1;
    *(_DWORD *)(result + 296) = *(_DWORD *)(result + 300);
    *(_DWORD *)(result + 300) = v28;
    v29 = v28 << 6;
    v30 = *(_QWORD *)(result + 688);
    *(_QWORD *)(result + 152) = v30 + v29;
    *(_DWORD *)(result + 256) = (*(_DWORD *)(result + 4 * (v28 >> 5) + 720) >> v28) & 1;
    *(_QWORD *)(result + 344) = *(_QWORD *)(*(_QWORD *)(result + 168)
                                          + 8 * *(unsigned __int8 *)(v30 + v29));
    *(_QWORD *)(result + 144) = (char *)&unk_236924C88
                              + 512 * (unint64_t)(*(_BYTE *)(*(_QWORD *)(result + 696) + v28) & 3);
  }
  return result;
}

uint64_t sub_2367C29A8(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v1 = *(_DWORD *)(result + 292);
  if (v1 >= 2)
  {
    v2 = *(_QWORD *)(result + 240) + 5056;
    v3 = *(_DWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 8);
    if (v3 >= 0x30)
    {
      v5 = *(_QWORD **)(result + 24);
      v6 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v7 + 1) = *v5;
      *(_QWORD *)&v7 = *(_QWORD *)(result + 8);
      v4 = v7 >> 48;
      *(_QWORD *)(result + 8) = v4;
      v3 ^= 0x30u;
      *(_QWORD *)(result + 24) = (char *)v5 + 6;
      *(_QWORD *)(result + 32) = v6 - 6;
    }
    v8 = v4 >> v3;
    v9 = (unsigned __int8 *)(v2 + 4 * (v4 >> v3));
    v10 = *v9;
    if (v10 >= 9)
    {
      v3 += 8;
      v9 += 4 * ((v8 >> 8) & ~(-1 << (v10 - 8)))
          + 4 * *(unsigned __int16 *)(v2 + 4 * v8 + 2);
      v10 = *v9;
    }
    v11 = *(_QWORD *)(result + 248) + 3168;
    v12 = v3 + v10;
    *(_DWORD *)(result + 16) = v3 + v10;
    v13 = *((unsigned __int16 *)v9 + 1);
    if (v12 >= 0x30)
    {
      v14 = *(_QWORD **)(result + 24);
      v15 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v16 + 1) = *v14;
      *(_QWORD *)&v16 = v4;
      v4 = v16 >> 48;
      *(_QWORD *)(result + 8) = v4;
      v12 ^= 0x30u;
      *(_QWORD *)(result + 24) = (char *)v14 + 6;
      *(_QWORD *)(result + 32) = v15 - 6;
    }
    v17 = v4 >> v12;
    v18 = (unsigned __int8 *)(v11 + 4 * (v4 >> v12));
    v19 = *v18;
    if (v19 >= 9)
    {
      v12 += 8;
      v18 += 4 * ((v17 >> 8) & ~(-1 << (v19 - 8)))
           + 4 * *(unsigned __int16 *)(v11 + 4 * v17 + 2);
      v19 = *v18;
    }
    v20 = v12 + v19;
    *(_DWORD *)(result + 16) = v20;
    v21 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * *((unsigned __int16 *)v18 + 1));
    v22 = *((unsigned __int8 *)v21 + 2);
    v23 = *v21;
    if (v20 >= 0x20)
    {
      v24 = *(unsigned int **)(result + 24);
      v25 = *(_QWORD *)(result + 32);
      *((_QWORD *)&v26 + 1) = *v24;
      *(_QWORD *)&v26 = v4;
      v4 = v26 >> 32;
      *(_QWORD *)(result + 8) = v4;
      v20 ^= 0x20u;
      *(_QWORD *)(result + 24) = v24 + 1;
      *(_QWORD *)(result + 32) = v25 - 4;
    }
    *(_DWORD *)(result + 16) = v20 + v22;
    *(_DWORD *)(result + 280) = ((v4 >> v20) & ~(-1 << v22)) + v23;
    if (v13)
    {
      if (v13 == 1)
        v27 = *(_DWORD *)(result + 316) + 1;
      else
        v27 = v13 - 2;
    }
    else
    {
      v27 = *(_DWORD *)(result + 312);
    }
    if (v27 < v1)
      v1 = 0;
    v28 = v27 - v1;
    *(_DWORD *)(result + 312) = *(_DWORD *)(result + 316);
    *(_DWORD *)(result + 316) = v28;
    v29 = *(_QWORD *)(result + 336) + 4 * v28;
    *(_QWORD *)(result + 160) = v29;
    *(_BYTE *)(result + 352) = *(_BYTE *)(v29 + *(int *)(result + 260));
  }
  return result;
}

unsigned __int8 *sub_2367C2B6C(unsigned __int8 *result, unsigned int a2, _DWORD *a3)
{
  unsigned __int8 *v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned int v16;

  v4 = result;
  v5 = a3[96];
  v6 = a3 + 98;
  a3[98] = 50462976;
  if ((v5 + 1) > 2)
    v7 = (v5 + 1);
  else
    v7 = 2;
  v8 = v7 - 1;
  v9 = a3 + 99;
  v10 = 117835012;
  do
  {
    *v9++ = v10;
    v10 += 67372036;
    --v8;
  }
  while (v8);
  if (a2)
  {
    v11 = 0;
    v12 = (unsigned __int8 *)a3 + 391;
    v13 = a2;
    do
    {
      v14 = *v4;
      v15 = v6[v14];
      *v4++ = v15;
      *v12 = v15;
      result = (unsigned __int8 *)memmove(v6, (char *)a3 + 391, v14 + 1);
      v11 |= v14;
      --v13;
    }
    while (v13);
    v16 = v11 >> 2;
  }
  else
  {
    v16 = 0;
  }
  a3[96] = v16;
  return result;
}

uint64_t sub_2367C2C38(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 696));
  *(_QWORD *)(a1 + 696) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 688));
  *(_QWORD *)(a1 + 688) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 336));
  *(_QWORD *)(a1 + 336) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
  (*(void (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 192));
  *(_QWORD *)(a1 + 192) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 216) = 0;
  return result;
}

unint64_t sub_2367C2CB4(int a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t result;
  unint64_t v30;
  unint64_t v31;
  int v32;

  v2 = byte_23692665C[a1];
  v3 = byte_236926677[a1];
  if (v3 >= v2)
    v4 = byte_23692665C[a1];
  else
    v4 = byte_236926677[a1];
  if (v3 <= v2)
    v5 = byte_23692665C[a1];
  else
    v5 = byte_236926677[a1];
  v6 = v5 / v4;
  v7 = v6 - 1;
  v8 = __clz(v6) ^ 0x3F;
  if ((v6 & (v6 - 1)) != 0)
    v9 = v8 + 1;
  else
    v9 = v8;
  v10 = byte_236926677[a1] * (unint64_t)byte_23692665C[a1];
  v11 = 8 * v5;
  if (v5)
  {
    v12 = 0;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = 8 * v5;
    do
    {
      v14 = 0;
      v15 = v12;
      do
      {
        if ((v12 & 1) != 0)
          v16 = v14;
        else
          v16 = v15;
        if ((v16 & v7) == 0)
        {
          if ((v12 & 1) != 0)
            v17 = v15;
          else
            v17 = v14;
          v18 = v16 >> v9;
          v19 = v17 >= v5 || v18 >= v4;
          v20 = v19;
          v21 = v18 * v5;
          if (v19)
            v22 = v10 + 1;
          else
            v22 = v10;
          if (!v20)
            v10 = v21 + v17;
          *(_DWORD *)(a2 + 4 * v10) = v17 + 8 * v21;
          v10 = v22;
        }
        ++v14;
        --v15;
      }
      while (v15 != -1);
      ++v12;
    }
    while (v12 != v13);
  }
  v23 = 0;
  v24 = 1;
  v25 = v11 - 1;
  LOBYTE(v26) = 8 * v5;
  do
  {
    v27 = v26;
    v26 = v25;
    v28 = v24;
    result = v11 - 1;
    do
    {
      if ((v27 & 1) != 0)
        v30 = v28;
      else
        v30 = result;
      if ((v30 & v7) == 0)
      {
        v31 = v30 >> v9;
        if ((v27 & 1) != 0)
          v32 = result;
        else
          v32 = v28;
        *(_DWORD *)(a2 + 4 * v10++) = v32 + v31 * v11;
      }
      --result;
      ++v28;
    }
    while (v23 + result);
    --v23;
    ++v24;
    v25 = v26 - 1;
  }
  while (v26 != 1);
  return result;
}

void sub_2367C2DE4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2367C2E38((uint64_t)&v8, a2, a3);
  v4 = v12;
  if (!v12)
  {
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_OWORD *)a1 = v8;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v5;
  }
  *(_DWORD *)(a1 + 56) = v4;
}

double sub_2367C2E38(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)&v11 = __PAIR64__(a3, a2);
  *((_QWORD *)&v11 + 1) = __PAIR64__(a3, a2);
  v4 = a2;
  if (a2)
  {
    v5 = a2 + 142;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x1FFFFFF80;
    else
      v4 = (v5 & 0x1FFFFFF80) + 128;
  }
  v12 = (unint64_t)v4;
  v13 = 1;
  if (sub_2367F66B4((uint64_t)&v11))
  {
    v7 = *((_QWORD *)&v12 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((_QWORD *)&v12 + 1) = 0;
    if (v7)
    {
      v8 = -*(_QWORD *)(v7 - 24);
      do
        v9 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v9 + v8, &qword_2564313D8));
      free(*(void **)(v7 - 32));
    }
  }
  else
  {
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v13;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2367C2EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unint64_t v15;

  if (a13)
  {
    v14 = -*(_QWORD *)(a13 - 24);
    do
      v15 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v15 + v14, &qword_2564313D8));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2367C2F38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    v2 = -*(_QWORD *)(v1 - 24);
    do
      v3 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v3 + v2, &qword_2564313D8));
    free(*(void **)(v1 - 32));
  }
}

void sub_2367C2F70(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_2367C2F80(unsigned int *a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  v2 = a1[1];
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  result = 0;
  v7 = *((_QWORD *)a1 + 2);
  v6 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  v8 = *a1;
  do
  {
    v9 = v6;
    v10 = v8;
    if ((_DWORD)v8)
    {
      do
      {
        v11 = *v9++;
        if (((2 * a2) | 1) == v11)
          ++result;
        --v10;
      }
      while (v10);
    }
    ++v4;
    v6 += v7;
  }
  while (v4 != v2);
  return result;
}

float *sub_2367C2FE0(float *result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;

  if ((a5 & 1) != 0)
  {
    if (a4)
    {
      v6 = 0;
      v7 = *a2;
      v8 = a2[1];
      v9 = *(_QWORD *)result;
      v10 = *((_QWORD *)result + 1);
      v11 = *a3;
      v12 = a3[1];
      v14 = a2[2];
      v13 = a2[3];
      v15 = *((_QWORD *)result + 2);
      result = (float *)*((_QWORD *)result + 3);
      v16 = a3[2];
      v17 = a3[3];
      do
      {
        v18 = *(float *)(v13 + 4 * v6);
        v19 = fminf(v18, 1.0);
        if (v19 < 0.0)
          v19 = 0.0;
        if (a6)
          v18 = v19;
        v20 = 1.0 - v18;
        *(float *)(v11 + 4 * v6) = *(float *)(v7 + 4 * v6) + (float)(*(float *)(v9 + 4 * v6) * v20);
        *(float *)(v12 + 4 * v6) = *(float *)(v8 + 4 * v6) + (float)(*(float *)(v10 + 4 * v6) * v20);
        *(float *)(v16 + 4 * v6) = *(float *)(v14 + 4 * v6) + (float)(*(float *)(v15 + 4 * v6) * v20);
        *(float *)(v17 + 4 * v6) = 1.0 - (float)(v20 * (float)(1.0 - result[v6]));
        ++v6;
      }
      while (a4 != v6);
    }
  }
  else if (a4)
  {
    v21 = 0;
    v22 = *a2;
    v23 = a2[1];
    v24 = *(_QWORD *)result;
    v25 = *((_QWORD *)result + 1);
    v26 = *a3;
    v27 = a3[1];
    v29 = a2[2];
    v28 = a2[3];
    v31 = result + 4;
    result = (float *)*((_QWORD *)result + 2);
    v30 = v31[1];
    v32 = a3[2];
    v33 = a3[3];
    do
    {
      v34 = *(float *)(v28 + 4 * v21);
      v35 = fminf(v34, 1.0);
      if (v35 < 0.0)
        v35 = 0.0;
      if (a6)
        v34 = v35;
      v36 = 1.0 - v34;
      v37 = *(float *)(v30 + 4 * v21);
      v38 = 1.0 - (float)((float)(1.0 - v34) * (float)(1.0 - v37));
      v39 = 1.0 / v38;
      if (v38 <= 0.0)
        v39 = 0.0;
      *(float *)(v26 + 4 * v21) = v39
                                * (float)((float)(v36 * (float)(v37 * *(float *)(v24 + 4 * v21)))
                                        + (float)(*(float *)(v22 + 4 * v21) * v34));
      *(float *)(v27 + 4 * v21) = v39
                                * (float)((float)(v36 * (float)(*(float *)(v25 + 4 * v21) * *(float *)(v30 + 4 * v21)))
                                        + (float)(*(float *)(v23 + 4 * v21) * v34));
      *(float *)(v32 + 4 * v21) = v39
                                * (float)((float)(v36 * (float)(result[v21] * *(float *)(v30 + 4 * v21)))
                                        + (float)(*(float *)(v29 + 4 * v21) * v34));
      *(float *)(v33 + 4 * v21++) = v38;
    }
    while (a4 != v21);
  }
  return result;
}

float *sub_2367C3144(float *result, float *a2, float *a3, float *a4, float *a5, uint64_t a6, char a7, int a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  float v29;
  float v30;

  if (result == a2 && a3 == a4)
  {
    for (; a6; --a6)
    {
      v8 = *a3++;
      v9 = v8;
      v10 = fminf(v8, 1.0);
      if (v10 < 0.0)
        v10 = 0.0;
      if (!a8)
        v9 = v10;
      v11 = *result++;
      *a5++ = 1.0 - (float)((float)(1.0 - v9) * (float)(1.0 - v11));
    }
  }
  else if ((a7 & 1) != 0)
  {
    for (; a6; --a6)
    {
      v12 = *a4++;
      v13 = v12;
      v14 = fminf(v12, 1.0);
      if (v14 < 0.0)
        v14 = 0.0;
      v15 = *a3++;
      v16 = v15;
      v17 = *result++;
      v18 = v17;
      if (!a8)
        v13 = v14;
      *a5++ = v16 + (float)(v18 * (float)(1.0 - v13));
    }
  }
  else
  {
    for (; a6; --a6)
    {
      v19 = *a4++;
      v20 = v19;
      v21 = fminf(v19, 1.0);
      if (v21 < 0.0)
        v21 = 0.0;
      if (!a8)
        v20 = v21;
      v22 = *a2++;
      v23 = v22;
      v24 = 1.0 - (float)((float)(1.0 - v20) * (float)(1.0 - v22));
      v25 = 1.0 / v24;
      v26 = v24 <= 0.0;
      v27 = *a3++;
      v28 = v27;
      v29 = *result++;
      v30 = v23 * v29;
      if (v26)
        v25 = 0.0;
      *a5++ = v25 * (float)((float)((float)(1.0 - v20) * v30) + (float)(v28 * v20));
    }
  }
  return result;
}

float sub_2367C3248(float *__src, float *a2, float *a3, float *__dst, uint64_t a5, char a6)
{
  float *v6;
  float result;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  v6 = __src;
  if (a2 == a3)
  {
    memcpy(__dst, __src, 4 * a5);
  }
  else if ((a6 & 1) != 0)
  {
    if (a5)
    {
      result = 1.0;
      do
      {
        v8 = *v6++;
        v9 = v8;
        v10 = *a2++;
        v11 = v10;
        v12 = *a3++;
        v13 = fminf(v12, 1.0);
        if (v13 < 0.0)
          v13 = 0.0;
        *__dst++ = v9 + (float)(v11 * v13);
        --a5;
      }
      while (a5);
    }
  }
  else
  {
    for (; a5; --a5)
    {
      v14 = *v6++;
      v15 = v14;
      v16 = *a2++;
      v17 = v16;
      v18 = *a3++;
      result = v15 + (float)(v17 * v18);
      *__dst++ = result;
    }
  }
  return result;
}

float sub_2367C32C4(float *a1, float *a2, float *a3, uint64_t a4, char a5)
{
  float result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  if ((a5 & 1) != 0)
  {
    if (a4)
    {
      result = 1.0;
      do
      {
        v6 = *a1++;
        v7 = v6;
        v8 = *a2++;
        v9 = fminf(v8, 1.0);
        if (v9 < 0.0)
          v9 = 0.0;
        *a3++ = v7 * v9;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      v10 = *a1++;
      v11 = v10;
      v12 = *a2++;
      result = v11 * v12;
      *a3++ = result;
    }
  }
  return result;
}

_QWORD *sub_2367C331C(_QWORD *a1, int a2)
{
  int v3;
  _QWORD *result;
  uint64_t v5;
  _DWORD *v6;
  int v7;

  v3 = 4096 / a2;
  v7 = 4096 / a2;
  result = sub_2367C3384(a1, a2, &v7);
  v5 = (4096 - v3 * a2);
  if ((int)v5 >= 1)
  {
    v6 = (_DWORD *)*result;
    do
    {
      ++*v6++;
      --v5;
    }
    while (v5);
  }
  return result;
}

_QWORD *sub_2367C3384(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C3404(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2367C33E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2367C3404(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_2367C3440();
  result = (char *)sub_2367C3454(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_2367C3440()
{
  sub_2367C34B0("vector");
}

void *sub_2367C3454(unint64_t a1)
{
  if (a1 >> 62)
    sub_2367C3488();
  return operator new(4 * a1);
}

void sub_2367C3488()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_2367C34B0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2367C3500(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2507FD308, MEMORY[0x24BEDAAF0]);
}

void sub_2367C34EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2367C3500(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_2367C3524(_DWORD **a1, char a2, uint64_t a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  char *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  char *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  unint64_t v86;
  _WORD *v87;
  int v88;
  int v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  _WORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD v99[3];

  v4 = a1;
  v5 = *a1;
  v6 = (_DWORD *)v4[1];
  if (v5 == v6)
  {
LABEL_6:
    v9 = v4[2];
    if ((unint64_t)v5 >= v9)
    {
      v11 = v9 - (_QWORD)v5;
      v12 = v11 >> 1;
      if ((unint64_t)(v11 >> 1) <= 1)
        v12 = 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v5 = sub_2367C3454(v13);
      v14 = (_DWORD *)*v4;
      v15 = (_DWORD *)v4[1];
      v17 = &v5[v16];
      *v5 = 4096;
      v10 = v5 + 1;
      while (v15 != v14)
      {
        v18 = *--v15;
        *--v5 = v18;
      }
      *v4 = v5;
      v4[1] = v10;
      v4[2] = v17;
      if (v14)
      {
        operator delete(v14);
        v5 = (_DWORD *)*v4;
      }
    }
    else
    {
      *v5 = 4096;
      v10 = v5 + 1;
    }
    v4[1] = v10;
  }
  else
  {
    v7 = v6 - 1;
    while (!*v7)
    {
      v4[1] = v7;
      if (v7-- == v5)
        goto LABEL_6;
    }
    v10 = v7 + 1;
  }
  v19 = 1 << a2;
  v20 = 0x1000u >> a2;
  if (v10 == v5)
  {
LABEL_25:
    sub_2367C3BE4(v99, 1 << a2);
    v23 = (_DWORD *)*v4;
    v24 = v4[1] - *v4;
    v97 = v4;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    if (v24)
    {
      v31 = 0;
      v96 = v19;
      do
      {
        v32 = v23[v31];
        *(_DWORD *)(v99[0] + 4 * v31) = v32;
        if (v32 <= v20)
        {
          if (v32 < v20)
          {
            if ((unint64_t)v26 >= v27)
            {
              v39 = (v26 - v25) >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
                sub_2367C3440();
              if ((uint64_t)(v27 - (_QWORD)v25) >> 1 > v40)
                v40 = (uint64_t)(v27 - (_QWORD)v25) >> 1;
              if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              v94 = v30;
              if (v41)
                v41 = (unint64_t)sub_2367C3454(v41);
              else
                v42 = 0;
              v46 = (char *)(v41 + 4 * v39);
              *(_DWORD *)v46 = v31;
              v47 = v46 + 4;
              while (v26 != v25)
              {
                v48 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v46 - 1) = v48;
                v46 -= 4;
              }
              v27 = v41 + 4 * v42;
              if (v25)
              {
                v49 = v41 + 4 * v42;
                operator delete(v25);
                v27 = v49;
              }
              v25 = v46;
              v26 = v47;
              v30 = v94;
            }
            else
            {
              *(_DWORD *)v26 = v31;
              v26 += 4;
            }
          }
        }
        else if ((unint64_t)v29 >= v30)
        {
          v33 = (v29 - v28) >> 2;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62)
            sub_2367C3440();
          v35 = v20;
          v36 = v27;
          if ((uint64_t)(v30 - (_QWORD)v28) >> 1 > v34)
            v34 = (uint64_t)(v30 - (_QWORD)v28) >> 1;
          if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v34;
          if (v37)
            v37 = (unint64_t)sub_2367C3454(v37);
          else
            v38 = 0;
          v43 = (char *)(v37 + 4 * v33);
          *(_DWORD *)v43 = v31;
          v44 = v43 + 4;
          while (v29 != v28)
          {
            v45 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *((_DWORD *)v43 - 1) = v45;
            v43 -= 4;
          }
          v30 = v37 + 4 * v38;
          if (v28)
            operator delete(v28);
          v28 = v43;
          v29 = v44;
          v27 = v36;
          v20 = v35;
          v19 = v96;
          v4 = v97;
        }
        else
        {
          *(_DWORD *)v29 = v31;
          v29 += 4;
        }
        ++v31;
        v23 = (_DWORD *)*v4;
        v24 = v4[1] - *v4;
      }
      while (v31 < v24 >> 2);
    }
    v50 = v24 >> 2;
    v51 = (v24 >> 2);
    if (v51 >= v19)
    {
      v53 = v26;
    }
    else
    {
      v52 = v30;
      do
      {
        *(_DWORD *)(v99[0] + 4 * v51) = 0;
        if ((unint64_t)v26 >= v27)
        {
          v54 = (v26 - v25) >> 2;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62)
            sub_2367C3440();
          if ((uint64_t)(v27 - (_QWORD)v25) >> 1 > v55)
            v55 = (uint64_t)(v27 - (_QWORD)v25) >> 1;
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v56 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v56 = v55;
          if (v56)
            v56 = (unint64_t)sub_2367C3454(v56);
          else
            v57 = 0;
          v58 = (char *)(v56 + 4 * v54);
          *(_DWORD *)v58 = v50;
          v53 = v58 + 4;
          while (v26 != v25)
          {
            v59 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v58 - 1) = v59;
            v58 -= 4;
          }
          v27 = v56 + 4 * v57;
          if (v25)
          {
            v60 = v56 + 4 * v57;
            operator delete(v25);
            v27 = v60;
          }
          v25 = v58;
          v30 = v52;
        }
        else
        {
          *(_DWORD *)v26 = v50;
          v53 = v26 + 4;
        }
        v26 = v53;
        LODWORD(v50) = v50 + 1;
        v51 = v50;
      }
      while (v50 < v19);
    }
    if (v28 != v29)
    {
      v61 = v29;
      do
      {
        v63 = *((_DWORD *)v61 - 1);
        v61 -= 4;
        v62 = v63;
        v65 = v53 - 4;
        v64 = *((unsigned int *)v53 - 1);
        v66 = *(_DWORD *)(v99[0] + 4 * v64) - v20 + *(_DWORD *)(v99[0] + 4 * v63);
        *(_DWORD *)(v99[0] + 4 * v63) = v66;
        v67 = a3 + 8 * v64;
        *(_BYTE *)(v67 + 1) = v63;
        *(_WORD *)(v67 + 4) = v66;
        if (v66 >= v20)
        {
          if (v66 > v20)
          {
            if ((unint64_t)v61 >= v30)
            {
              v72 = (v61 - v28) >> 2;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
LABEL_145:
                sub_2367C3440();
              v95 = v27;
              if ((uint64_t)(v30 - (_QWORD)v28) >> 1 > v73)
                v73 = (uint64_t)(v30 - (_QWORD)v28) >> 1;
              if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              if (v74)
                v74 = (unint64_t)sub_2367C3454(v74);
              else
                v75 = 0;
              v79 = (char *)(v74 + 4 * v72);
              *(_DWORD *)v79 = v62;
              v80 = v79 + 4;
              while (v61 != v28)
              {
                v81 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v79 - 1) = v81;
                v79 -= 4;
              }
              v82 = v74 + 4 * v75;
              if (v28)
                operator delete(v28);
              v53 = v65;
              v28 = v79;
              v61 = v80;
              v30 = v82;
              v27 = v95;
            }
            else
            {
              *(_DWORD *)v61 = v62;
              v53 -= 4;
              v61 = v29;
            }
          }
          else
          {
            v53 -= 4;
          }
        }
        else if ((unint64_t)v65 >= v27)
        {
          v68 = (v65 - v25) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            goto LABEL_145;
          if ((uint64_t)(v27 - (_QWORD)v25) >> 1 > v69)
            v69 = (uint64_t)(v27 - (_QWORD)v25) >> 1;
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v70 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v70 = v69;
          if (v70)
            v70 = (unint64_t)sub_2367C3454(v70);
          else
            v71 = 0;
          v76 = (char *)(v70 + 4 * v68);
          *(_DWORD *)v76 = v62;
          v53 = v76 + 4;
          while (v65 != v25)
          {
            v77 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }
          v27 = v70 + 4 * v71;
          if (v25)
          {
            v78 = v70 + 4 * v71;
            operator delete(v25);
            v27 = v78;
          }
          v25 = v76;
        }
        else
        {
          *(_DWORD *)v65 = v62;
        }
        v29 = v61;
      }
      while (v28 != v61);
    }
    v83 = 0;
    v84 = (_DWORD *)v99[0];
    v85 = *v97;
    v86 = (uint64_t)(v97[1] - *v97) >> 2;
    v87 = (_WORD *)(a3 + 4);
    do
    {
      v88 = v84[v83];
      if (v88 == (_DWORD)v20)
      {
        LOBYTE(v88) = 0;
        *((_BYTE *)v87 - 3) = v83;
        *v87 = 0;
      }
      else
      {
        *v87 -= v88;
      }
      *((_BYTE *)v87 - 4) = v88;
      if (v86 <= v83)
        LOWORD(v89) = 0;
      else
        v89 = *(_DWORD *)(v85 + 4 * v83);
      v90 = *((unsigned __int8 *)v87 - 3);
      if (v86 <= v90)
        LOWORD(v91) = 0;
      else
        v91 = *(_DWORD *)(v85 + 4 * v90);
      *(v87 - 1) = v89;
      v87[1] = v91 ^ v89;
      ++v83;
      v87 += 4;
    }
    while (v19 > v83);
    v99[1] = v84;
    operator delete(v84);
    if (v28)
      operator delete(v28);
    if (v25)
      operator delete(v25);
  }
  else
  {
    v21 = 0;
    v22 = v10 - v5;
    if (v22 <= 1)
      v22 = 1;
    while (v5[v21] != 4096)
    {
      if (v22 == ++v21)
        goto LABEL_25;
    }
    v92 = 0;
    v93 = (_WORD *)(a3 + 4);
    do
    {
      *((_BYTE *)v93 - 3) = v21;
      *((_BYTE *)v93 - 4) = 0;
      *v93 = v92;
      *(v93 - 1) = 0;
      v93[1] = 4096;
      v93 += 4;
      v92 += v20;
      --v19;
    }
    while (v19);
  }
}

void sub_2367C3B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  if (__p)
  {
    operator delete(__p);
    if (!v16)
    {
LABEL_3:
      if (!v15)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  if (!v15)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v15);
  goto LABEL_5;
}

_QWORD *sub_2367C3BE4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C3404(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2367C3C3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367C3C58(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t m;
  float *v72;
  float *v73;
  float *v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  float *v79;
  uint64_t v80;
  unint64_t v81;
  float *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  uint64_t k;
  uint64_t j;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t __n;
  float *__src;
  uint64_t v98;
  uint64_t v100[4];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109[16];
  uint64_t v110;
  float *v111;
  unsigned int v112;

  v14 = *a8;
  v13 = a8[1];
  v15 = (v13 - *a8) / 96;
  if (v13 == *a8)
  {
    v20 = 0;
  }
  else
  {
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = (v13 - v14) / 96;
    if (*(_DWORD *)(v14 + 12))
    {
      v17 = 0;
      v18 = (int *)(v14 + 108);
      while (v16 - 1 != v17)
      {
        v19 = *v18;
        v18 += 24;
        ++v17;
        if (!v19)
          goto LABEL_13;
      }
      v17 = v16;
LABEL_13:
      v20 = v17 < v15;
    }
    else
    {
      v20 = 1;
    }
  }
  v21 = v15 + 3;
  sub_2367C431C((uint64_t)v109, a5, v15 + 3);
  result = v112;
  if (!v112)
  {
    v93 = v20;
    v23 = v110;
    __src = v111;
    __n = 4 * a5;
    v24 = v13;
    v25 = 4 * a4;
    v111 = 0;
    if (v24 != v14)
    {
      v26 = 0;
      if (v15 <= 1)
        v27 = 1;
      else
        v27 = v15;
      v98 = v27;
      v28 = (float *)((char *)__src + 3 * v110);
      do
      {
        switch(*(_BYTE *)(a7 + 12 * v26))
        {
          case 1:
            v29 = (char *)__src + v23 * (v26 + 3);
            v30 = &a2[v26 + 3];
            goto LABEL_24;
          case 2:
            if (a5)
            {
              v31 = 8 * v26 + 24;
              v32 = *(_QWORD *)((char *)a1 + v31);
              v33 = (float *)(*(_QWORD *)((char *)a2 + v31) + v25);
              v34 = (float *)(v32 + v25);
              v35 = v28;
              v36 = a5;
              do
              {
                v37 = *v34++;
                v38 = v37;
                v39 = *v33++;
                *v35++ = v38 + v39;
                --v36;
              }
              while (v36);
            }
            break;
          case 3:
            sub_2367C32C4((float *)(a1[v26 + 3] + 4 * a4), (float *)(a2[v26 + 3] + 4 * a4), (float *)((char *)__src + v23 * (v26 + 3)), a5, *(_BYTE *)(a7 + 12 * v26 + 8));
            break;
          case 4:
            v40 = a7 + 12 * v26;
            v41 = *(unsigned int *)(v40 + 4);
            v42 = *(_BYTE *)(*a8 + 96 * v41 + 72);
            v43 = v26 + 3;
            v44 = a1[v26 + 3];
            v45 = 8 * v41 + 24;
            v46 = *(_QWORD *)((char *)a1 + v45);
            v47 = a2[v26 + 3];
            v48 = *(_QWORD *)((char *)a2 + v45);
            goto LABEL_32;
          case 5:
            v40 = a7 + 12 * v26;
            v49 = *(unsigned int *)(v40 + 4);
            v42 = *(_BYTE *)(*a8 + 96 * v49 + 72);
            v43 = v26 + 3;
            v44 = a2[v26 + 3];
            v50 = 8 * v49 + 24;
            v46 = *(_QWORD *)((char *)a2 + v50);
            v47 = a1[v26 + 3];
            v48 = *(_QWORD *)((char *)a1 + v50);
LABEL_32:
            sub_2367C3144((float *)(v44 + 4 * a4), (float *)(v46 + 4 * a4), (float *)(v47 + 4 * a4), (float *)(v48 + 4 * a4), (float *)((char *)__src + v23 * v43), a5, v42, *(unsigned __int8 *)(v40 + 8));
            break;
          case 6:
            v51 = a7 + 12 * v26;
            v52 = v26 + 3;
            v53 = a1[v26 + 3];
            v54 = a2[v26 + 3];
            v55 = &a2[*(unsigned int *)(v51 + 4)];
            goto LABEL_35;
          case 7:
            v51 = a7 + 12 * v26;
            v52 = v26 + 3;
            v53 = a2[v26 + 3];
            v54 = a1[v26 + 3];
            v55 = &a1[*(unsigned int *)(v51 + 4)];
LABEL_35:
            sub_2367C3248((float *)(v53 + 4 * a4), (float *)(v54 + 4 * a4), (float *)(v55[3] + 4 * a4), (float *)((char *)__src + v23 * v52), a5, *(_BYTE *)(v51 + 8));
            break;
          default:
            if (a5)
            {
              v29 = (char *)__src + v23 * (v26 + 3);
              v30 = &a1[v26 + 3];
LABEL_24:
              memcpy(v29, (const void *)(*v30 + 4 * a4), __n);
            }
            break;
        }
        ++v26;
        v28 = (float *)((char *)v28 + v23);
      }
      while (v26 != v98);
    }
    v56 = *a6;
    v57 = __src;
    if (v56 != 2)
    {
      v58 = *((unsigned int *)a6 + 1);
      if (v56 == 6)
      {
        if ((v93 & 1) != 0)
        {
          v59 = 0;
          v60 = v58 + 3;
          do
          {
            sub_2367C3248((float *)(a1[v59] + 4 * a4), (float *)(a2[v59] + 4 * a4), (float *)(a2[v60] + 4 * a4), v57, a5, a6[8]);
            ++v59;
            v57 = (float *)((char *)v57 + v23);
          }
          while (v59 != 3);
          goto LABEL_56;
        }
      }
      else
      {
        v61 = v93;
        if (v56 != 7)
          v61 = 1;
        if ((v61 & 1) != 0)
        {
          v62 = v93 ^ 1;
          if (v56 == 4)
            v63 = v93 ^ 1;
          else
            v63 = 1;
          if ((v63 & 1) != 0)
          {
            if (v56 != 5)
              v62 = 1;
            if ((v62 & 1) != 0)
            {
              switch(*a6)
              {
                case 1u:
                case 4u:
                case 5u:
                  for (i = 0; i != 3; ++i)
                  {
                    memcpy(v57, (const void *)(a2[i] + 4 * a4), __n);
                    v57 = (float *)((char *)v57 + v23);
                  }
                  break;
                case 3u:
                  for (j = 0; j != 3; ++j)
                  {
                    sub_2367C32C4((float *)(a1[j] + 4 * a4), (float *)(a2[j] + 4 * a4), v57, a5, a6[8]);
                    v57 = (float *)((char *)v57 + v23);
                  }
                  break;
                case 7u:
                  v91 = 0;
                  v92 = v58 + 3;
                  do
                  {
                    sub_2367C3248((float *)(a2[v91] + 4 * a4), (float *)(a1[v91] + 4 * a4), (float *)(a1[v92] + 4 * a4), v57, a5, a6[8]);
                    ++v91;
                    v57 = (float *)((char *)v57 + v23);
                  }
                  while (v91 != 3);
                  break;
                default:
                  for (k = 0; k != 3; ++k)
                  {
                    memcpy(v57, (const void *)(a1[k] + 4 * a4), __n);
                    v57 = (float *)((char *)v57 + v23);
                  }
                  break;
              }
              goto LABEL_56;
            }
            v64 = *(_BYTE *)(*a8 + 96 * v58 + 72);
            v85 = a2[1] + 4 * a4;
            v105 = *a2 + 4 * a4;
            v106 = v85;
            v66 = v58 + 3;
            v86 = a2[v66] + 4 * a4;
            v107 = a2[2] + 4 * a4;
            v108 = v86;
            v87 = a1[1] + 4 * a4;
            v101 = *a1 + 4 * a4;
            v102 = v87;
            v69 = a1[2];
            v70 = a1[v66];
          }
          else
          {
            v64 = *(_BYTE *)(*a8 + 96 * v58 + 72);
            v65 = a1[1] + 4 * a4;
            v105 = *a1 + 4 * a4;
            v106 = v65;
            v66 = v58 + 3;
            v67 = a1[v66] + 4 * a4;
            v107 = a1[2] + 4 * a4;
            v108 = v67;
            v68 = a2[1] + 4 * a4;
            v101 = *a2 + 4 * a4;
            v102 = v68;
            v69 = a2[2];
            v70 = a2[v66];
          }
          v103 = v69 + 4 * a4;
          v104 = v70 + 4 * a4;
          v100[0] = (uint64_t)__src;
          v100[1] = (uint64_t)__src + v23;
          v100[2] = (uint64_t)__src + 2 * v23;
          v100[3] = (uint64_t)__src + v23 * v66;
          sub_2367C2FE0((float *)&v105, &v101, v100, a5, v64, a6[8]);
LABEL_56:
          if (v21)
          {
            v79 = __src;
            do
            {
              if (a5)
                memcpy((void *)(*a3 + 4 * a4), v79, __n);
              v79 = (float *)((char *)v79 + v23);
              ++a3;
              --v21;
            }
            while (v21);
          }
          if (!__src)
            goto LABEL_65;
          v80 = -*((_QWORD *)__src - 3);
          do
            v81 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v81 + v80, &qword_2564313D8));
          free(*((void **)__src - 4));
          if (!v112)
          {
LABEL_65:
            v82 = v111;
            v111 = 0;
            if (v82)
            {
              v83 = -*((_QWORD *)v82 - 3);
              do
                v84 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v84 + v83, &qword_2564313D8));
              free(*((void **)v82 - 4));
            }
          }
          return 0;
        }
      }
    }
    for (m = 0; m != 3; ++m)
    {
      if (a5)
      {
        v72 = (float *)(a2[m] + v25);
        v73 = (float *)(a1[m] + v25);
        v74 = v57;
        v75 = a5;
        do
        {
          v76 = *v73++;
          v77 = v76;
          v78 = *v72++;
          *v74++ = v77 + v78;
          --v75;
        }
        while (v75);
      }
      v57 = (float *)((char *)v57 + v23);
    }
    goto LABEL_56;
  }
  return result;
}

double sub_2367C431C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)&v11 = __PAIR64__(a3, a2);
  *((_QWORD *)&v11 + 1) = __PAIR64__(a3, a2);
  v4 = a2;
  if (a2)
  {
    v5 = 4 * a2 + 139;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x7FFFFFF80;
    else
      v4 = (v5 & 0x7FFFFFF80) + 128;
  }
  v12 = (unint64_t)v4;
  v13 = 4;
  if (sub_2367F66B4((uint64_t)&v11))
  {
    v7 = *((_QWORD *)&v12 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((_QWORD *)&v12 + 1) = 0;
    if (v7)
    {
      v8 = -*(_QWORD *)(v7 - 24);
      do
        v9 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v9 + v8, &qword_2564313D8));
      free(*(void **)(v7 - 32));
    }
  }
  else
  {
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v13;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2367C43E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unint64_t v15;

  if (a13)
  {
    v14 = -*(_QWORD *)(a13 - 24);
    do
      v15 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v15 + v14, &qword_2564313D8));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2367C4420(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _DWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  _DWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;

  v6 = (unint64_t)(a2 + 63) >> 6;
  v7 = (unint64_t)(a3 + 63) >> 6;
  sub_2367C4618((uint64_t)v32, v6, v7);
  if (v37)
  {
    *(_DWORD *)(a1 + 120) = v37;
  }
  else
  {
    v8 = v32[0];
    v9 = v32[1];
    v11 = v34;
    v10 = v35;
    v35 = 0;
    v12 = v36;
    sub_2367C4618((uint64_t)v26, v6, v7);
    if (v31)
    {
      *(_DWORD *)(a1 + 120) = v31;
      if (v10)
      {
        v13 = -*((_QWORD *)v10 - 3);
        do
          v14 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v14 + v13, &qword_2564313D8));
        free(*((void **)v10 - 4));
      }
    }
    else
    {
      v15 = v26[0];
      v25 = v26[1];
      v16 = v28;
      v23 = v12;
      v24 = v29;
      v29 = 0;
      v22 = v30;
      if ((_DWORD)v8 && (_DWORD)v9)
      {
        v17 = v10;
        v18 = v9;
        do
        {
          bzero(v17, v8);
          v17 += v11;
          --v18;
        }
        while (v18);
      }
      if ((_DWORD)v15 && (_DWORD)v25)
      {
        v19 = v24;
        v20 = v25;
        do
        {
          bzero(v19, v15);
          v19 += v16;
          --v20;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 120) = 0;
      v21 = 0.0;
      if (a4)
        v21 = 1.0;
      *(_DWORD *)a1 = v8;
      *(_DWORD *)(a1 + 4) = v9;
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v23;
      *(_DWORD *)(a1 + 40) = v15;
      *(_DWORD *)(a1 + 44) = v25;
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v16;
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v22;
      *(_QWORD *)(a1 + 80) = 0;
      *(float *)(a1 + 88) = v21;
      *(_QWORD *)(a1 + 92) = 0x5400000000;
      *(_QWORD *)(a1 + 100) = 1011026993;
      *(float *)(a1 + 108) = v21;
      *(_QWORD *)(a1 + 112) = 0;
    }
  }
}

void sub_2367C45E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  if (v1)
  {
    v3 = -*(_QWORD *)(v1 - 24);
    do
      v4 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v4 + v3, &qword_2564313D8));
    free(*(void **)(v1 - 32));
  }
  _Unwind_Resume(exception_object);
}

double sub_2367C4618(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)&v11 = __PAIR64__(a3, a2);
  *((_QWORD *)&v11 + 1) = __PAIR64__(a3, a2);
  v4 = a2;
  if (a2)
  {
    v5 = a2 + 142;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x1FFFFFF80;
    else
      v4 = (v5 & 0x1FFFFFF80) + 128;
  }
  v12 = (unint64_t)v4;
  v13 = 1;
  if (sub_2367F66B4((uint64_t)&v11))
  {
    v7 = *((_QWORD *)&v12 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((_QWORD *)&v12 + 1) = 0;
    if (v7)
    {
      v8 = -*(_QWORD *)(v7 - 24);
      do
        v9 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v9 + v8, &qword_2564313D8));
      free(*(void **)(v7 - 32));
    }
  }
  else
  {
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v13;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2367C46D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unint64_t v15;

  if (a13)
  {
    v14 = -*(_QWORD *)(a13 - 24);
    do
      v15 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v15 + v14, &qword_2564313D8));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2367C4718(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2367C4794(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unint64_t *v9;
  _OWORD *v10;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  int v25;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = (unint64_t *)(a1 + 48);
  *(_BYTE *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = 1245184;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  v10 = (_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 84) = xmmword_2368AF4B0;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_QWORD *)(a1 + 580) = 0;
  *(_OWORD *)(a1 + 564) = 0u;
  *(_OWORD *)(a1 + 548) = 0u;
  *(_OWORD *)(a1 + 532) = 0u;
  *(_OWORD *)(a1 + 516) = 0u;
  *(_OWORD *)(a1 + 500) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  if (v7)
  {
    *(_DWORD *)(a1 + 20) = 1245184;
  }
  else
  {
    v12 = (_QWORD *)a3[2];
    if ((unint64_t)v12 > a3[3])
    {
      sub_2367C5188(a3);
      v14 = *a3;
      v15 = a3[1];
    }
    else
    {
      v13 = a3[1];
      v14 = *a3 | (*v12 << v13);
      a3[2] = (unint64_t)v12 + ((63 - v13) >> 3);
      v15 = v13 | 0x38;
      *a3 = v14;
      a3[1] = v13 | 0x38;
    }
    *a3 = HIDWORD(v14);
    a3[1] = v15 - 32;
    *(_DWORD *)(a1 + 20) = v14;
    v16 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(a1 + 32) = v16;
    *(_DWORD *)(a1 + 36) = 12 - v16;
    *(_DWORD *)(a1 + 40) = ~(-1 << (12 - v16));
  }
  if (*(_BYTE *)(a2 + 96))
  {
    do
      v17 = __ldxr((unsigned int *)&unk_2564313C0);
    while (__stxr(v17 + 1, (unsigned int *)&unk_2564313C0));
    v18 = sub_2368AAD08(0x400000, (v17 & 0xF) << 7);
    v19 = *v9;
    *v9 = v18;
    if (v19)
    {
      v20 = -*(_QWORD *)(v19 - 24);
      do
        v21 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v21 + v20, &qword_2564313D8));
      free(*(void **)(v19 - 32));
      v18 = *v9;
    }
    *(_QWORD *)(a1 + 56) = v18;
    *(_DWORD *)(a1 + 76) = *(_QWORD *)(a2 + 128);
    *v10 = *(_OWORD *)(a2 + 108);
    *(int32x2_t *)(a1 + 80) = vrev64_s32(*(int32x2_t *)(a2 + 100));
    if (a4)
      v22 = 120;
    else
      v22 = 0;
    *(_DWORD *)(a1 + 584) = v22;
    if (a4)
    {
      v23 = 0;
      v24 = &byte_236921C1D;
      do
      {
        v25 = *(v24 - 1) + *v24 * (_DWORD)a4;
        if (v25 <= 1)
          v25 = 1;
        *(_DWORD *)(a1 + 104 + 4 * v23++) = v25;
        v24 += 2;
      }
      while (v23 < *(unsigned int *)(a1 + 584));
    }
  }
  return a1;
}

void sub_2367C4A24(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_2367C2F38(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2367C4A38(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, _QWORD *a6)
{
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t i;
  void *__p[3];
  void *v37[3];

  sub_2367C3BE4(v37, a2);
  sub_2367C3BE4(__p, 2 * a2);
  v12 = __clz(a2);
  v13 = (((-1 << (v12 ^ 0x1F)) + a2) >> (v12 ^ 0x1F)) - v12 + 32;
  if (!(_DWORD)a2)
    v13 = 0;
  if (v13 >= 7)
    v13 = 7;
  v14 = sub_2367C4CF4(a5, *(unsigned __int8 *)(*a6 + v13), a4) + a1;
  if (v14 > a2)
  {
LABEL_6:
    a3 = 1;
    goto LABEL_33;
  }
  if (v14 > a1)
  {
    LODWORD(v15) = 0;
    v16 = a2 - a1;
    do
    {
      v17 = __clz(v15);
      v18 = (((-1 << (v17 ^ 0x1F)) + v15) >> (v17 ^ 0x1F)) - v17 + 32;
      if (!(_DWORD)v15)
        v18 = 0;
      if (v18 >= 7)
        v18 = 7;
      v15 = sub_2367C4CF4(a5, *(unsigned __int8 *)(*a6 + v18), a4);
      *((_DWORD *)v37[0] + a1) = v15;
      if (v16 <= v15)
        goto LABEL_6;
      ++a1;
      --v16;
    }
    while (v14 != a1);
  }
  if (a3)
  {
    v19 = 0;
    v20 = v37[0];
    v21 = __p[0];
    v22 = __clz(a2) ^ 0x3F;
    if ((a2 & (a2 - 1)) != 0)
      v23 = v22 + 1;
    else
      v23 = v22;
    v24 = 1 << v23;
    v25 = -1;
    do
    {
      v21[v19] = v25-- & (v19 + 1);
      ++v19;
    }
    while (v24 != v19);
    if (a2)
    {
      v26 = 0;
      v27 = v22 + ((a2 & (a2 - 1)) != 0) + 1;
      do
      {
        v28 = 0;
        v29 = v20[v26] + 1;
        v30 = v27;
        v31 = v24;
        do
        {
          v32 = v28 + v31;
          v31 >>= 1;
          v33 = v21[v32 - 1];
          if (v33 < v29)
            v28 = v32;
          else
            v33 = 0;
          v29 -= v33;
          --v30;
        }
        while (v30);
        *(_DWORD *)(a3 + 4 * v26) = v28;
        for (i = v28 + 1; i <= v24; i += i & -(uint64_t)i)
          --v21[i - 1];
        ++v26;
      }
      while (v26 != a2);
    }
    a3 = 0;
  }
LABEL_33:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return a3;
}

void sub_2367C4C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367C4C94(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 8);
  sub_2367C4718(&v5);
  sub_2367C2F38((uint64_t *)a1);
  return a1;
}

uint64_t sub_2367C4CF4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v4;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  _DWORD *v32;
  char v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  char v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  _BOOL4 v63;
  unint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  int v70;
  int v71;
  _DWORD *v72;
  char v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;

  v4 = *(_DWORD *)(a1 + 68);
  if (v4)
  {
    v36 = *(_QWORD *)(a1 + 56);
    v40 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v40 + 1;
    LODWORD(v18) = *(_DWORD *)(v36 + 4 * (*(_QWORD *)&v40 & 0xFFFFFLL));
    *(_DWORD *)(a1 + 68) = v4 - 1;
    goto LABEL_19;
  }
  v7 = (_QWORD *)a3[2];
  if ((unint64_t)v7 > a3[3])
  {
    sub_2367C5188(a3);
  }
  else
  {
    v8 = a3[1];
    v9 = *a3 | (*v7 << v8);
    a3[2] = (unint64_t)v7 + ((63 - v8) >> 3);
    *a3 = v9;
    a3[1] = v8 | 0x38;
  }
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v18 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2), a3);
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 20);
    v12 = (unint64_t)(v11 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    v13 = *(_DWORD *)(a1 + 40) & v11 & 0xFFFu;
    v14 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v12);
    if (v14 <= v13)
      v15 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v12);
    else
      v15 = 0;
    v16 = HIDWORD(v15);
    v17 = HIWORD(v15);
    if (v14 <= v13)
      v18 = BYTE1(v14);
    else
      v18 = (unint64_t)(v11 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    v19 = v13 + (unsigned __int16)v16 + (v17 ^ WORD1(v14)) * (*(_DWORD *)(a1 + 20) >> 12);
    v20 = v19 < 0x10000;
    v21 = a3[1];
    v22 = *a3 >> (16 * v20);
    if (v19 < 0x10000)
      v19 = (unsigned __int16)*a3 | ((unsigned __int16)v19 << 16);
    *(_DWORD *)(a1 + 20) = v19;
    *a3 = v22;
    a3[1] = v21 - 16 * v20;
  }
  v23 = *(unsigned int *)(a1 + 84);
  v24 = v18 >= v23;
  v25 = v18 - v23;
  if (v24)
  {
    v41 = *(unsigned int *)(a1 + 92);
    v24 = v25 >= v41;
    v42 = v25 - v41;
    if (v24)
    {
      v44 = *(_DWORD *)(a1 + 96);
      v43 = *(_DWORD *)(a1 + 100);
      v45 = *(_DWORD *)(a1 + 88) - (v44 + v43) + (v42 >> (v44 + v43));
      v46 = *a3 & ~(-1 << v45);
      v47 = a3[1] - (v45 & 0x1F);
      *a3 >>= v45 & 0x1F;
      a3[1] = v47;
      LODWORD(v25) = v25 & ~(-1 << v43) | ((unint64_t)(v46 | (((v25 >> v43) & ((1 << v44)
                                                                                                  - 1) | (1 << v44)) << v45)) << v43);
    }
    v48 = *(_DWORD *)(a1 + 80);
    v49 = v48 + v25;
    *(_DWORD *)(a1 + 68) = v48 + v25;
    v50 = (_QWORD *)a3[2];
    if ((unint64_t)v50 > a3[3])
    {
      v83 = v48;
      sub_2367C5188(a3);
      v48 = v83;
    }
    else
    {
      v51 = a3[1];
      v52 = *a3 | (*v50 << v51);
      a3[2] = (unint64_t)v50 + ((63 - v51) >> 3);
      *a3 = v52;
      a3[1] = v51 | 0x38;
    }
    v53 = *(unsigned int *)(a1 + 76);
    if (v10)
    {
      v84 = v48;
      v80 = *(unsigned int *)(a1 + 76);
      v81 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v53), a3);
      v53 = v80;
      v48 = v84;
      v61 = v81;
    }
    else
    {
      v54 = *(_DWORD *)(a1 + 20);
      v55 = (unint64_t)(v54 & 0xFFF) >> *(_DWORD *)(a1 + 36);
      v56 = *(_DWORD *)(a1 + 40) & v54 & 0xFFFu;
      v57 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v53 << *(_DWORD *)(a1 + 32)) + 8 * v55);
      if (v57 <= v56)
        v58 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v53 << *(_DWORD *)(a1 + 32)) + 8 * v55);
      else
        v58 = 0;
      v59 = HIDWORD(v58);
      v60 = HIWORD(v58);
      if (v57 <= v56)
        v61 = BYTE1(v57);
      else
        v61 = (unint64_t)(v54 & 0xFFF) >> *(_DWORD *)(a1 + 36);
      v62 = v56 + (unsigned __int16)v59 + (v60 ^ WORD1(v57)) * (*(_DWORD *)(a1 + 20) >> 12);
      v63 = v62 < 0x10000;
      v64 = a3[1];
      v65 = *a3 >> (16 * v63);
      if (v62 < 0x10000)
        v62 = (unsigned __int16)*a3 | ((unsigned __int16)v62 << 16);
      *(_DWORD *)(a1 + 20) = v62;
      *a3 = v65;
      a3[1] = v64 - 16 * v63;
    }
    v66 = (_DWORD *)(*(_QWORD *)(a1 + 24) + 16 * v53);
    v67 = v66[1];
    v24 = v61 >= v67;
    v68 = v61 - v67;
    if (v24)
    {
      v69 = *v66;
      v72 = v66 + 2;
      v70 = v66[2];
      v71 = v72[1];
      v73 = v69 - (v70 + v71) + (v68 >> (v70 + v71));
      v74 = *a3 & ~(-1 << v73);
      v75 = a3[1] - (v73 & 0x1F);
      *a3 >>= v73 & 0x1F;
      a3[1] = v75;
      LODWORD(v61) = v61 & ~(-1 << v71) | ((unint64_t)(v74 | (((v61 >> v71) & ((1 << v70)
                                                                                                  - 1) | (1 << v70)) << v73)) << v71);
    }
    v76 = *(unsigned int *)(a1 + 584);
    if (v61 >= v76)
      v77 = v61 - v76 + 1;
    else
      v77 = *(unsigned int *)(a1 + 4 * v61 + 104);
    v37 = (_DWORD *)(a1 + 64);
    v78 = *(unsigned int *)(a1 + 64);
    if (v77 > v78)
      v77 = *(unsigned int *)(a1 + 64);
    if (v77 > 0x100000)
    {
      *(_DWORD *)(a1 + 72) = v78 - 0x100000;
    }
    else
    {
      *(_DWORD *)(a1 + 72) = v78 - v77;
      if (!v77)
      {
        if (v49 >= 0x100000)
          v82 = 0x100000;
        else
          v82 = v49;
        bzero(*(void **)(a1 + 56), (4 * v82));
        v49 = *(_DWORD *)(a1 + 68);
        v48 = *(_DWORD *)(a1 + 80);
      }
    }
    if (v49 < v48)
    {
      LODWORD(v18) = 0;
      return v18;
    }
    v36 = *(_QWORD *)(a1 + 56);
    v79 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v79 + 1;
    LODWORD(v18) = *(_DWORD *)(v36 + 4 * (*(_QWORD *)&v79 & 0xFFFFFLL));
    *(_DWORD *)(a1 + 68) = v49 - 1;
    goto LABEL_20;
  }
  v26 = (int *)(*(_QWORD *)(a1 + 24) + 16 * a2);
  v27 = v26[1];
  v24 = v18 >= v27;
  v28 = v18 - v27;
  if (v24)
  {
    v29 = *v26;
    v32 = v26 + 2;
    v30 = v26[2];
    v31 = v32[1];
    v33 = v29 - (v30 + v31) + (v28 >> (v30 + v31));
    v34 = *a3 & ~(-1 << v33);
    v35 = a3[1] - (v33 & 0x1F);
    *a3 >>= v33 & 0x1F;
    a3[1] = v35;
    LODWORD(v18) = v18 & ~(-1 << v31) | ((unint64_t)(v34 | (((v18 >> v31) & ((1 << v30)
                                                                                                - 1) | (1 << v30)) << v33)) << v31);
  }
  v36 = *(_QWORD *)(a1 + 56);
  if (v36)
  {
LABEL_19:
    v37 = (_DWORD *)(a1 + 64);
LABEL_20:
    v38 = (*v37)++;
    *(_DWORD *)(v36 + 4 * (*(_QWORD *)&v38 & 0xFFFFFLL)) = v18;
  }
  return v18;
}

_QWORD *sub_2367C5188(_QWORD *result)
{
  unint64_t v1;
  unsigned __int8 *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;

  v1 = result[1];
  if (v1 <= 0x37)
  {
    v2 = (unsigned __int8 *)result[2];
    v3 = result[3] + 8;
    while ((unint64_t)v2 < v3)
    {
      result[2] = v2 + 1;
      v4 = v1 + 8;
      *result |= (unint64_t)*v2 << v1;
      result[1] = v1 + 8;
      ++v2;
      v5 = v1 >= 0x30;
      v1 += 8;
      if (v5)
        goto LABEL_8;
    }
  }
  v4 = v1;
LABEL_8:
  result[5] += (63 - v4) >> 3;
  result[1] = ((63 - v4) & 0xFFFFFFFFFFFFFFF8) + v4;
  return result;
}

void sub_2367C5200(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = -*(_QWORD *)(v2 - 24);
    do
      v4 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v4 + v3, &qword_2564313D8));
    free(*(void **)(v2 - 32));
  }
}

uint64_t *sub_2367C5238(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_2367C2F38((uint64_t *)(v2 + 48));
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

void sub_2367C5284(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    sub_2367C3440();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_2367C3454(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void sub_2367C5388()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367C539C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  v6 = (2 * *(_DWORD *)(a1 + 8)) ^ (*(int *)(a1 + 8) >> 31);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x100001200000012, 0x400001402000013, 0, &v6);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 8) = -(v6 & 1) ^ (v6 >> 1);
    v5 = (2 * *(_DWORD *)(a1 + 12)) ^ (*(int *)(a1 + 12) >> 31);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x100001200000012, 0x400001402000013, 0, &v5);
    if (!(_DWORD)result)
      *(_DWORD *)(a1 + 12) = -(v5 & 1) ^ (v5 >> 1);
  }
  return result;
}

void sub_2367C5480()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367C5494(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  _BYTE *v6;
  unint64_t v7;
  BOOL v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    *(_BYTE *)(a1 + 12) = 1;
    *(_QWORD *)(a1 + 16) = 0x20032DCD5;
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, v4 != 2))
    return 0;
  v6 = (_BYTE *)(a1 + 12);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 12);
  if (!(_DWORD)result)
  {
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *v6))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 24, 10000000, a1 + 16);
      if ((_DWORD)result)
        return result;
      if ((*(_DWORD *)(a1 + 16) - 10000001) < 0xFF676E44)
        return 1;
    }
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v6 == 0))
      return 0;
    v9 = *(_DWORD *)(a1 + 20);
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 13, &v9);
    if (!(_DWORD)result)
    {
      v7 = v9;
      *(_DWORD *)(a1 + 20) = v9;
      v8 = ((1 << v7) & 0x72106) == 0 || v7 > 0x3F;
      result = v8;
      if (!v8)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_2367C5610(_QWORD *a1)
{
  void *v2;

  *a1 = &off_2507FFA18;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2367C564C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_2507FFA18;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367C5698(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t result;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _QWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  v4 = (_BYTE *)(a1 + 9);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 9);
  if (!(_DWORD)result)
  {
    v12 = *(_DWORD *)(a1 + 56);
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 0, &v12);
    if (!(_DWORD)result)
    {
      v6 = v12;
      *(_DWORD *)(a1 + 56) = v12;
      if (v6 > 3)
        return 1;
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 == 0))
        return (!*v4 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) & 1) == 0)
            && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40);
      v7 = (_DWORD *)(a1 + 16);
      v8 = *(_DWORD *)(a1 + 56);
      if (v8 == 2)
        *v7 = 1;
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, v8 != 2))
      {
        result = sub_2367C59D8(a2, (unsigned int *)(a1 + 16));
        if ((_DWORD)result)
          return result;
        if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v7 == 2))
        {
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 76);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 112);
          if ((_DWORD)result)
            return result;
          *(_QWORD *)(a1 + 76) = *(_QWORD *)(a1 + 120);
        }
      }
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, (*(_DWORD *)(a1 + 56) - 3) < 0xFFFFFFFE))
      {
        result = sub_2367C5A50(a2, (unsigned int *)(a1 + 20));
        if ((_DWORD)result)
          return result;
        if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 20) == 2))
        {
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 84);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 152);
          if ((_DWORD)result)
            return result;
          *(_QWORD *)(a1 + 84) = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 92);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 168);
          if ((_DWORD)result)
            return result;
          *(_QWORD *)(a1 + 92) = *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 100);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 184);
          if ((_DWORD)result)
            return result;
          *(_QWORD *)(a1 + 100) = *(_QWORD *)(a1 + 192);
        }
      }
      v9 = (_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 140) = *(_QWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 148) = *(_DWORD *)(a1 + 72);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 128);
      if (!(_DWORD)result)
      {
        *v9 = *(_QWORD *)(a1 + 140);
        *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 148);
        v13 = *(_DWORD *)(a1 + 24);
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 1, &v13);
        if (!(_DWORD)result)
        {
          v10 = v13;
          *(_DWORD *)(a1 + 24) = v13;
          if (v10 > 3 || *(_DWORD *)(a1 + 56) == 3 || !*(_BYTE *)v9 && *(_DWORD *)(a1 + 72) == 2)
            return 1;
          sub_2367C5AC8(a1);
          if (v11)
            return 1;
          return (!*v4 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) & 1) == 0)
              && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2367C59D8(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned int v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 32))(a1, 0x8000000180000000, 0x24500000043, 1, &v6);
  if (!(_DWORD)result)
  {
    v4 = v6;
    *a2 = v6;
    return ((1 << v4) & 0xC06) == 0 || v4 > 0x3F;
  }
  return result;
}

uint64_t sub_2367C5A50(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned int v6;

  v6 = *a2;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 32))(a1, 0x8000000180000000, 0x24500000043, 1, &v6);
  if (!(_DWORD)result)
  {
    v4 = v6;
    *a2 = v6;
    return ((1 << v4) & 0xA06) == 0 || v4 > 0x3F;
  }
  return result;
}

void sub_2367C5AC8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _OWORD v4[6];
  uint64_t v5;

  v2 = a1 + 32;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_2367C5B34((uint64_t)v4, a1 + 16);
  sub_2367C5CB4((double *)v4, v2);
  if (v3)
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
}

void sub_2367C5B34(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  float64x2_t v6;
  uint64_t v7;
  int v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_BYTE *)(a2 + 12))
  {
    v4 = *(_DWORD *)(a2 + 40);
    v5 = *(_DWORD *)a2;
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v5;
    v6.f64[0] = sub_2367CA244((int *)a2);
    *(float64_t *)(a1 + 8) = v6.f64[0];
    *(_QWORD *)(a1 + 16) = v7;
    if (v4 == 3 || !v4)
    {
      v8 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a1 + 24) = v8;
      if (v8 > 8)
      {
        if (v8 == 9)
        {
          v9 = (float64x2_t)xmmword_2368AF520;
          v6 = (float64x2_t)xmmword_2368AF530;
          v10 = (float64x2_t)xmmword_2368AF540;
        }
        else
        {
          v9 = (float64x2_t)xmmword_2368AF4F0;
          v6 = (float64x2_t)xmmword_2368AF500;
          v10 = (float64x2_t)xmmword_2368AF510;
        }
      }
      else if (v8 == 1)
      {
        v9 = (float64x2_t)xmmword_2368AF4C0;
        v6 = (float64x2_t)xmmword_2368AF4D0;
        v10 = (float64x2_t)xmmword_2368AF4E0;
      }
      else
      {
        v11 = *(_QWORD *)(a2 + 68);
        v12.i64[0] = (int)v11;
        v12.i64[1] = SHIDWORD(v11);
        v13 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
        v6 = vmulq_f64(vcvtq_f64_s64(v12), v13);
        v14 = *(_QWORD *)(a2 + 76);
        v12.i64[0] = (int)v14;
        v12.i64[1] = SHIDWORD(v14);
        v10 = vmulq_f64(vcvtq_f64_s64(v12), v13);
        v15 = *(_QWORD *)(a2 + 84);
        v12.i64[0] = (int)v15;
        v12.i64[1] = SHIDWORD(v15);
        v9 = vmulq_f64(vcvtq_f64_s64(v12), v13);
      }
      *(float64x2_t *)(a1 + 32) = v6;
      *(float64x2_t *)(a1 + 48) = v10;
      *(float64x2_t *)(a1 + 64) = v9;
    }
    if (*(_BYTE *)(a2 + 48))
    {
      LODWORD(v6.f64[0]) = *(_DWORD *)(a2 + 52);
      v6.f64[0] = (double)*(unint64_t *)&v6.f64[0] * 0.0000001;
      v16 = 0xFFFF;
    }
    else
    {
      v16 = *(_DWORD *)(a2 + 56);
      v6.f64[0] = 0.0;
    }
    *(_DWORD *)(a1 + 80) = v16;
    *(float64_t *)(a1 + 88) = v6.f64[0];
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 2;
    *(_DWORD *)(a1 + 80) = 2;
    *(_QWORD *)a1 = 0x200000003;
  }
}

void sub_2367C5CB4(double *a1, uint64_t a2)
{
  int v3;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  double v16;
  std::string *v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  double v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  void *v23;
  char *v24;
  char *v25;
  std::string::size_type v26;
  int v27;
  double v28;
  std::string *v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  double v32;
  std::string *v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  double v36;
  std::string *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  double v40;
  std::string *v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  double v44;
  std::string *v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  double v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  void *v51;
  char *v52;
  char *v53;
  std::string::size_type v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  double v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  void *v61;
  char *v62;
  char *v63;
  std::string::size_type v64;
  double v65;
  double v66;
  float v67;
  double v68;
  float v69;
  float v70;
  int v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  char *v80;
  int64_t v81;
  _BYTE *v82;
  int64_t v83;
  _BYTE *v84;
  int64_t v85;
  _BYTE *v86;
  int64_t v87;
  _BYTE *v88;
  int64_t v89;
  double v90;
  double v91;
  double v92;
  float v93;
  float v94;
  char *v95;
  int64_t v96;
  uint64_t kk;
  float v98;
  int v99;
  char *v100;
  int64_t v101;
  _BYTE *v102;
  int64_t v103;
  _BYTE *v104;
  int64_t v105;
  _DWORD *v106;
  int v107;
  _DWORD *v108;
  int v109;
  _DWORD *v110;
  int v111;
  unsigned int mm;
  _BYTE *v113;
  int64_t v114;
  _BYTE *v115;
  int64_t v116;
  _BYTE *v117;
  int64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  char *v123;
  char v124;
  uint64_t v125;
  char v126;
  char *v127;
  char v128;
  uint64_t v129;
  char v130;
  char *v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float *v136;
  float v137;
  int v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  float v144;
  _DWORD *v145;
  int v146;
  uint64_t v147;
  uint64_t i;
  float v149;
  uint64_t j;
  uint64_t k;
  _BYTE *v152;
  int64_t v153;
  unint64_t v154;
  float *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float (__cdecl *v165)(float, float *);
  float v166;
  double v167;
  double v168;
  long double v169;
  unint64_t v170;
  float v171;
  float v172;
  double v173;
  double v174;
  unint64_t v175;
  float v176;
  float v177;
  float v178;
  int8x16_t v179;
  int8x16_t v180;
  float v181;
  uint64_t v182;
  float v183;
  float v184;
  double v185;
  double v186;
  float v187;
  float v188;
  int8x16_t v189;
  float v190;
  float v191;
  float v192;
  uint64_t m;
  double v194;
  double v195;
  int8x16_t v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  uint64_t v203;
  float v204;
  float v205;
  float v206;
  float *v207;
  float v208;
  float v209;
  float v210;
  float v212;
  uint64_t v213;
  float v214;
  float v215;
  float v216;
  char *v217;
  float v218;
  uint64_t n;
  uint64_t v220;
  float v221;
  float v222;
  __int128 *v223;
  uint64_t v224;
  uint64_t v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float (__cdecl *v230)(float, float *);
  float *v231;
  float v232;
  float v233;
  uint64_t v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  char v244;
  _BYTE *v245;
  int64_t v246;
  uint64_t ii;
  uint64_t jj;
  _BYTE *v249;
  int64_t v250;
  uint64_t v251;
  int v252;
  char *v253;
  _DWORD *v254;
  int v255;
  double v256;
  float v257;
  int v258;
  int v259;
  int *v260;
  int *v261;
  uint64_t v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int64x2_t v268;
  __int128 v269;
  size_t v270;
  char *v271;
  void *v272;
  _BYTE *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  size_t v278;
  char *v279;
  char *v280;
  char v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  _BYTE *v287;
  uint64_t v288;
  unint64_t v289;
  size_t v290;
  char *v291;
  char *v292;
  _BYTE *v293;
  _BYTE *v294;
  _BYTE *v295;
  char v296;
  BOOL v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unint64_t v302;
  char v303;
  unint64_t v304;
  char v305;
  char v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  uint64_t v317;
  _DWORD *v318;
  int v319;
  int v320;
  int v321;
  char *v322;
  int64_t v323;
  _BYTE *v324;
  int64_t v325;
  _BYTE *v326;
  int64_t v327;
  _BYTE *v328;
  int64_t v329;
  _BYTE *v330;
  int64_t v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  std::string::size_type v344;
  int v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  double v353;
  float v354;
  float v355;
  int8x16_t v356;
  __int128 v357;
  void *__p[2];
  char v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  int *v363;
  uint64_t v364;
  void *v365[2];
  uint64_t v366;
  void *v367[2];
  uint64_t v368;
  void *v369[2];
  uint64_t v370;
  _BYTE v371[3];
  _DWORD v372[3];
  uint64_t v373;
  float v374;
  char __str[16];
  _BYTE v376[28];
  __int128 v377;
  uint64_t v378;
  std::string v379;
  __int128 v380;
  _DWORD *v381;
  int v382;
  int v383;
  int v384;
  __int128 v385;
  __int128 v386;
  int v387;
  uint64_t v388;

  v388 = *MEMORY[0x24BDAC8D0];
  v369[0] = 0;
  v369[1] = 0;
  v370 = 0;
  v367[0] = 0;
  v367[1] = 0;
  v368 = 0;
  v365[0] = 0;
  v365[1] = 0;
  v366 = 0;
  if (*(_DWORD *)a1 <= 2u)
  {
    v3 = *((_DWORD *)a1 + 20);
    if (v3 != 2 && (*(_DWORD *)a1 != 2 || !*((_DWORD *)a1 + 24)))
    {
      __str[0] = 0;
      sub_2367C8504(v369, 0x80uLL, __str);
      sub_2367C8618(0, 0, (unint64_t *)v369);
      v5 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)7)
      {
        sub_2367C8698((unint64_t *)v369, 8 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        v5 = v369[0];
      }
      v5[1] = 543979626;
      sub_2367C8618(71303168, 8, (unint64_t *)v369);
      v6 = *(_DWORD *)a1;
      v7 = v369[0];
      v8 = (char *)v369[1] - (char *)v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0xF)
      {
        sub_2367C8698((unint64_t *)v369, 16 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v6 == 2)
        v9 = 1919837043;
      else
        v9 = 1920233069;
      v7[3] = v9;
      v10 = *(_DWORD *)a1;
      if (v8 <= 0x13)
      {
        sub_2367C8698((unint64_t *)v369, 20 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      if (v10 == 1)
        v11 = 1497453127;
      else
        v11 = 541214546;
      v7[4] = v11;
      if (sub_2367C87BC(a1))
        v12 = 543318348;
      else
        v12 = 542792024;
      if (v8 <= 0x17)
      {
        sub_2367C8698((unint64_t *)v369, 24 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[5] = v12;
      if (v8 <= 0x19)
      {
        sub_2367C8698((unint64_t *)v369, 26 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 12) = -7417;
      if (v8 <= 0x1B)
      {
        sub_2367C8698((unint64_t *)v369, 28 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 13) = 3072;
      if (v8 <= 0x1D)
      {
        sub_2367C8698((unint64_t *)v369, 30 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 14) = 256;
      if (v8 <= 0x1F)
      {
        sub_2367C8698((unint64_t *)v369, 32 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 15) = 0;
      if (v8 <= 0x21)
      {
        sub_2367C8698((unint64_t *)v369, 34 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 16) = 0;
      if (v8 <= 0x23)
      {
        sub_2367C8698((unint64_t *)v369, 36 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      *((_WORD *)v7 + 17) = 0;
      if (v8 <= 0x27)
      {
        sub_2367C8698((unint64_t *)v369, 40 - v8);
        v7 = v369[0];
        v8 = (char *)v369[1] - (char *)v369[0];
      }
      v7[9] = 1886610273;
      if (v8 <= 0x2B)
      {
        sub_2367C8698((unint64_t *)v369, 44 - v8);
        v7 = v369[0];
      }
      v7[10] = 1280331841;
      sub_2367C8618(0, 44, (unint64_t *)v369);
      sub_2367C8618(0, 48, (unint64_t *)v369);
      sub_2367C8618(0, 52, (unint64_t *)v369);
      sub_2367C8618(0, 56, (unint64_t *)v369);
      sub_2367C8618(0, 60, (unint64_t *)v369);
      sub_2367C8618(*((_DWORD *)a1 + 24), 64, (unint64_t *)v369);
      sub_2367C8618(63190, 68, (unint64_t *)v369);
      sub_2367C8618(0x10000, 72, (unint64_t *)v369);
      sub_2367C8618(54061, 76, (unint64_t *)v369);
      v13 = v369[0];
      if ((void *)((char *)v369[1] - (char *)v369[0]) <= (void *)0x53)
      {
        sub_2367C8698((unint64_t *)v369, 84 - (unint64_t)((char *)v369[1] - (char *)v369[0]));
        v13 = v369[0];
      }
      v13[20] = 543979626;
      v362 = 0;
      v363 = 0;
      v364 = 0;
      sub_2367C8618(0, 0, (unint64_t *)v367);
      v360 = 0;
      v361 = 0;
      sub_2367C8810(&v379, off_250800A98[*(int *)a1]);
      v14 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 != 2)
      {
        std::string::push_back(&v379, 95);
        v15 = *((_DWORD *)a1 + 1);
        if (v15 == 2)
        {
          v16 = a1[1];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v16);
          v17 = (std::string *)sub_2367C8810(&v380, __str);
          std::string::push_back(v17, 59);
          *(_QWORD *)&v386 = v381;
          v385 = v380;
          v381 = 0;
          v380 = 0uLL;
          if ((SBYTE7(v386) & 0x80u) == 0)
            v18 = (const std::string::value_type *)&v385;
          else
            v18 = (const std::string::value_type *)v385;
          if ((SBYTE7(v386) & 0x80u) == 0)
            v19 = BYTE7(v386);
          else
            v19 = *((_QWORD *)&v385 + 1);
          std::string::append(&v379, v18, v19);
          if (SBYTE7(v386) < 0)
            operator delete((void *)v385);
          if (SHIBYTE(v381) < 0)
            operator delete((void *)v380);
          v20 = a1[2];
          *(_OWORD *)__str = 0u;
          *(_OWORD *)v376 = 0u;
          snprintf(__str, 0x20uLL, "%g", v20);
          sub_2367C8810(&v385, __str);
          if ((SBYTE7(v386) & 0x80u) == 0)
            v21 = (const std::string::value_type *)&v385;
          else
            v21 = (const std::string::value_type *)v385;
          if ((SBYTE7(v386) & 0x80u) == 0)
            v22 = BYTE7(v386);
          else
            v22 = *((_QWORD *)&v385 + 1);
          std::string::append(&v379, v21, v22);
          if (SBYTE7(v386) < 0)
          {
            v23 = (void *)v385;
LABEL_73:
            operator delete(v23);
          }
        }
        else
        {
          if (v15 == 1)
          {
            v24 = "D65";
          }
          else if (v15 == 11)
          {
            v24 = "DCI";
          }
          else
          {
            v24 = "EER";
          }
          sub_2367C8810(__str, v24);
          if (v376[7] >= 0)
            v25 = __str;
          else
            v25 = *(char **)__str;
          if (v376[7] >= 0)
            v26 = v376[7];
          else
            v26 = *(_QWORD *)&__str[8];
          std::string::append(&v379, v25, v26);
          if ((v376[7] & 0x80000000) != 0)
          {
            v23 = *(void **)__str;
            goto LABEL_73;
          }
        }
      }
      if ((*(_DWORD *)a1 - 1) < 2)
        goto LABEL_148;
      std::string::push_back(&v379, 95);
      v27 = *((_DWORD *)a1 + 6);
      if (v27 == 2)
      {
        v28 = a1[4];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v28);
        v29 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v29, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v30 = (const std::string::value_type *)&v385;
        else
          v30 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v31 = BYTE7(v386);
        else
          v31 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v30, v31);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v32 = a1[5];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v32);
        v33 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v33, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v34 = (const std::string::value_type *)&v385;
        else
          v34 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v35 = BYTE7(v386);
        else
          v35 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v34, v35);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v36 = a1[6];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v36);
        v37 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v37, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v38 = (const std::string::value_type *)&v385;
        else
          v38 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v39 = BYTE7(v386);
        else
          v39 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v38, v39);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v40 = a1[7];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v40);
        v41 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v41, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v42 = (const std::string::value_type *)&v385;
        else
          v42 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v43 = BYTE7(v386);
        else
          v43 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v42, v43);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v44 = a1[8];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v44);
        v45 = (std::string *)sub_2367C8810(&v380, __str);
        std::string::push_back(v45, 59);
        *(_QWORD *)&v386 = v381;
        v385 = v380;
        v381 = 0;
        v380 = 0uLL;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v46 = (const std::string::value_type *)&v385;
        else
          v46 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v47 = BYTE7(v386);
        else
          v47 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v46, v47);
        if (SBYTE7(v386) < 0)
          operator delete((void *)v385);
        if (SHIBYTE(v381) < 0)
          operator delete((void *)v380);
        v48 = a1[9];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v48);
        sub_2367C8810(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0)
          v49 = (const std::string::value_type *)&v385;
        else
          v49 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v50 = BYTE7(v386);
        else
          v50 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v49, v50);
        if (SBYTE7(v386) < 0)
        {
          v51 = (void *)v385;
LABEL_147:
          operator delete(v51);
        }
      }
      else
      {
        if (v27 == 1)
        {
          v52 = "SRG";
        }
        else if (v27 == 11)
        {
          v52 = "DCI";
        }
        else
        {
          v52 = "202";
        }
        sub_2367C8810(__str, v52);
        if (v376[7] >= 0)
          v53 = __str;
        else
          v53 = *(char **)__str;
        if (v376[7] >= 0)
          v54 = v376[7];
        else
          v54 = *(_QWORD *)&__str[8];
        std::string::append(&v379, v53, v54);
        if ((v376[7] & 0x80000000) != 0)
        {
          v51 = *(void **)__str;
          goto LABEL_147;
        }
      }
LABEL_148:
      std::string::push_back(&v379, 95);
      sub_2367C8810(__str, off_250800AB8[*((int *)a1 + 24)]);
      if (v376[7] >= 0)
        v55 = __str;
      else
        v55 = *(char **)__str;
      if (v376[7] >= 0)
        v56 = v376[7];
      else
        v56 = *(_QWORD *)&__str[8];
      std::string::append(&v379, v55, v56);
      if ((v376[7] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (v14 != 2)
      {
        v57 = *((_DWORD *)a1 + 20);
        std::string::push_back(&v379, 95);
        if (v57 != 0xFFFF)
        {
          v62 = "SRG";
          switch(v57)
          {
            case 8:
              v62 = "Lin";
              goto LABEL_174;
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
LABEL_495:
              __break(1u);
              return;
            case 13:
              goto LABEL_174;
            case 16:
              v62 = "PeQ";
              goto LABEL_174;
            case 17:
              v62 = "DCI";
              goto LABEL_174;
            case 18:
              v62 = "HLG";
              goto LABEL_174;
            default:
              if (v57 == 1)
                v62 = "709";
              else
                v62 = "TF?";
LABEL_174:
              sub_2367C8810(__str, v62);
              if (v376[7] >= 0)
                v63 = __str;
              else
                v63 = *(char **)__str;
              if (v376[7] >= 0)
                v64 = v376[7];
              else
                v64 = *(_QWORD *)&__str[8];
              std::string::append(&v379, v63, v64);
              if ((v376[7] & 0x80000000) == 0)
                goto LABEL_183;
              v61 = *(void **)__str;
              break;
          }
          goto LABEL_182;
        }
        std::string::push_back(&v379, 103);
        v58 = a1[11];
        *(_OWORD *)__str = 0u;
        *(_OWORD *)v376 = 0u;
        snprintf(__str, 0x20uLL, "%g", v58);
        sub_2367C8810(&v385, __str);
        if ((SBYTE7(v386) & 0x80u) == 0)
          v59 = (const std::string::value_type *)&v385;
        else
          v59 = (const std::string::value_type *)v385;
        if ((SBYTE7(v386) & 0x80u) == 0)
          v60 = BYTE7(v386);
        else
          v60 = *((_QWORD *)&v385 + 1);
        std::string::append(&v379, v59, v60);
        if (SBYTE7(v386) < 0)
        {
          v61 = (void *)v385;
LABEL_182:
          operator delete(v61);
        }
      }
LABEL_183:
      sub_2367C88BC((uint64_t)&v379, (unint64_t *)v365);
      if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v379.__r_.__value_.__l.__data_);
      sub_2367C8B64((uint64_t)v365, &v361, &v360);
      sub_2367C8C8C("desc", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      sub_2367C8810(__p, "CC0");
      sub_2367C88BC((uint64_t)__p, (unint64_t *)v365);
      sub_2367C8B64((uint64_t)v365, &v361, &v360);
      sub_2367C8C8C("cprt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
      if (*(_DWORD *)a1 == 1)
      {
        v65 = a1[2];
        if (fabs(v65) < 1.0e-12)
          goto LABEL_379;
        v66 = a1[1];
        v67 = 1.0 / v65;
        v68 = v67;
        v69 = v66 * v68;
        *(float *)__str = v69;
        *(_DWORD *)&__str[4] = 1065353216;
        v70 = (1.0 - v66 - v65) * v68;
        *(float *)&__str[8] = v70;
        v71 = sub_2367C8DBC((uint64_t)__str, (unint64_t *)v365);
      }
      else
      {
        v71 = sub_2367C8DBC((uint64_t)&unk_236925E38, (unint64_t *)v365);
      }
      if (!v71)
      {
        sub_2367C8B64((uint64_t)v365, &v361, &v360);
        sub_2367C8C8C("wtpt", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
        if (*(_DWORD *)a1 == 1)
        {
LABEL_191:
          if (sub_2367C87BC(a1))
          {
            v72 = a1[1];
            v73 = a1[2];
            v74 = a1[4];
            v75 = a1[5];
            v76 = a1[6];
            v77 = a1[7];
            v78 = a1[8];
            v79 = a1[9];
            v345 = *((_DWORD *)a1 + 20);
            v80 = (char *)v365[0];
            v81 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2367C8698((unint64_t *)v365, 4uLL);
              v80 = (char *)v365[0];
            }
            *(_DWORD *)&v80[v81] = 829711981;
            sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            v82 = v365[0];
            v83 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v82 = v365[0];
            }
            v82[v83] = 3;
            v84 = v365[0];
            v85 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v84 = v365[0];
            }
            v84[v85] = 3;
            v86 = v365[0];
            v87 = (char *)v365[1] - (char *)v365[0];
            if ((char *)v365[1] - (char *)v365[0] != -1)
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v86 = v365[0];
            }
            v86[v87] = 9;
            v88 = v365[0];
            v89 = (char *)v365[1] - (char *)v365[0];
            v353 = v79;
            if ((char *)v365[1] - (char *)v365[0] == -1)
            {
              v90 = v77;
              v91 = v74;
            }
            else
            {
              sub_2367C8698((unint64_t *)v365, 1uLL);
              v90 = v77;
              v91 = v74;
              v88 = v365[0];
            }
            v147 = 0;
            v88[v89] = 0;
            do
            {
              for (i = 0; i != 3; ++i)
              {
                if (v147 == i)
                  v149 = 1.0;
                else
                  v149 = 0.0;
                sub_2367C8618((int)(float)((float)(v149 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              }
              ++v147;
            }
            while (v147 != 3);
            for (j = 0; j != 3; ++j)
            {
              for (k = 0; k != 256; ++k)
              {
                v152 = v365[0];
                v153 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2367C8698((unint64_t *)v365, 1uLL);
                  v152 = v365[0];
                }
                v152[v153] = k;
              }
            }
            v341 = a2;
            v154 = 0;
            v155 = (float *)v379.__r_.__value_.__r.__words + 1;
            v156 = v91;
            v157 = v75;
            v350 = v157;
            v351 = v156;
            v158 = v76;
            v159 = v90;
            v160 = v78;
            v346 = v160;
            v347 = v158;
            v161 = v353;
            v348 = v161;
            v349 = v159;
            v162 = v72;
            v355 = v162;
            v163 = v73;
            v354 = v163;
            v164 = 0.125;
            v165 = modff;
LABEL_271:
            v342 = v154;
            v166 = (float)v154 * v164;
            v167 = pow(v166, 0.0126833135);
            v168 = v167 + -0.8359375;
            if (v167 + -0.8359375 < 0.0)
              v168 = 0.0;
            v169 = pow(v168 / (v167 * -18.6875 + 18.8515625), 6.27739464);
            v170 = 0;
            *(float *)&v169 = v169;
            v171 = fabsf(*(float *)&v169);
            v352 = v166;
            if (v166 == 0.0)
              v171 = 0.0;
            *(float *)&v344 = v171;
LABEL_276:
            v343 = v170;
            v172 = (float)v170 * v164;
            v173 = pow(v172, 0.0126833135);
            v174 = v173 + -0.8359375;
            if (v173 + -0.8359375 < 0.0)
              v174 = 0.0;
            v175 = 0;
            v176 = pow(v174 / (v173 * -18.6875 + 18.8515625), 6.27739464);
            v177 = fabsf(v176);
            if (v172 == 0.0)
              v177 = 0.0;
            *((float *)&v344 + 1) = v177;
            while (1)
            {
              *(float *)v372 = v352;
              *(float *)&v372[1] = v172;
              v178 = (float)v175 * v164;
              *(float *)&v372[2] = v178;
              if (sub_2367C90C0((uint64_t)&v385, v351, v350, v347, v349, v346, v348, v355, v354))
                break;
              v181 = *((float *)&v385 + 3);
              v182 = v386;
              if (v345 == 16)
              {
                v183 = *(float *)&v386;
                v379.__r_.__value_.__r.__words[0] = v344;
                v184 = 0.0;
                if (v178 != 0.0)
                {
                  v185 = pow(v178, 0.0126833135);
                  v186 = v185 + -0.8359375;
                  if (v185 + -0.8359375 < 0.0)
                    v186 = 0.0;
                  v187 = pow(v186 / (v185 * -18.6875 + 18.8515625), 6.27739464);
                  v184 = fabsf(v187);
                }
                *(float *)&v379.__r_.__value_.__r.__words[1] = v184;
                *(_OWORD *)__str = xmmword_2368AF550;
                v181 = *(float *)&v182;
                *(_DWORD *)v376 = v182;
                *(float *)&v376[4] = v183;
                v188 = *((float *)&v182 + 1);
                *(_DWORD *)&v376[8] = HIDWORD(v182);
                *(_OWORD *)&v376[12] = xmmword_2368AF560;
                v189.i64[1] = 0x3FD6B4FF3ECEC3F3;
                v377 = xmmword_2368AF570;
                v189.i64[0] = 0x3B83126F42200000;
                v378 = 0x3B83126F42200000;
                sub_2367C9738((float *)__str, (float *)&v379, v155, (float *)&v379.__r_.__value_.__r.__words[1], v189);
                v191 = *((float *)v379.__r_.__value_.__r.__words + 1);
                v190 = *(float *)&v379.__r_.__value_.__l.__data_;
                v192 = *(float *)&v379.__r_.__value_.__r.__words[1];
              }
              else
              {
                for (m = 0; m != 3; ++m)
                {
                  v180.i32[0] = v372[m];
                  v179.i32[0] = 0;
                  if (*(float *)v180.i32 != 0.0)
                  {
                    v194 = fabs(*(float *)v180.i32);
                    if (v194 <= 0.5)
                    {
                      *(double *)v179.i64 = *(float *)v180.i32 * *(float *)v180.i32;
                      v195 = 0.333333333;
                    }
                    else
                    {
                      v356 = v180;
                      *(double *)v179.i64 = exp((v194 + *((double *)v165 + 495)) * 5.59181631);
                      v180 = v356;
                      *(double *)v179.i64 = *(double *)v179.i64 + 0.28466892;
                      v195 = 0.0833333333;
                    }
                    *(double *)v179.i64 = *(double *)v179.i64 * v195;
                    *(float *)v179.i32 = *(double *)v179.i64;
                    v196.i64[0] = 0x8000000080000000;
                    v196.i64[1] = 0x8000000080000000;
                    v179 = vbslq_s8(v196, v179, v180);
                  }
                  *(_DWORD *)((char *)&v379.__r_.__value_.__l.__data_ + m * 4) = v179.i32[0];
                }
                v197 = *(float *)&v379.__r_.__value_.__l.__data_;
                v198 = v172;
                v199 = *(float *)&v379.__r_.__value_.__r.__words[1];
                v200 = *((float *)v379.__r_.__value_.__r.__words + 1);
                v188 = *((float *)&v182 + 1);
                v201 = powf((float)((float)(*(float *)&v182 * *((float *)v379.__r_.__value_.__r.__words + 1))+ (float)(v181 * *(float *)&v379.__r_.__value_.__l.__data_))+ (float)(*((float *)&v182 + 1) * *(float *)&v379.__r_.__value_.__r.__words[1]), -0.18186);
                v202 = v201 <= 1000000000.0 ? v201 : 1000000000.0;
                v190 = v197 * v202;
                v191 = v200 * v202;
                v172 = v198;
                *(float *)&v379.__r_.__value_.__l.__data_ = v197 * v202;
                *((float *)v379.__r_.__value_.__r.__words + 1) = v191;
                v192 = v199 * v202;
                v183 = *(float *)&v182;
                *(float *)&v379.__r_.__value_.__r.__words[1] = v192;
              }
              v203 = 0;
              v204 = (float)((float)(v183 * v191) + (float)(v181 * v190)) + (float)(v188 * v192);
              *(_QWORD *)__str = &v379;
              *(_QWORD *)&__str[8] = v155;
              *(_QWORD *)v376 = &v379.__r_.__value_.__l.__size_;
              v205 = 0.0;
              v206 = 0.0;
              do
              {
                v207 = *(float **)&__str[v203];
                v208 = *v207 - v204;
                v209 = 1.0 / v208;
                if (v208 == 0.0)
                  v209 = 1.0;
                v210 = *v207 * v209;
                if (v206 < v210 && v208 < 0.0)
                  v206 = *v207 * v209;
                v212 = v210 - v209;
                if (v208 <= 0.0)
                  v212 = v206;
                if (v205 < v212)
                  v205 = v212;
                v203 += 8;
              }
              while (v203 != 24);
              v213 = 0;
              v214 = v205 + (float)((float)(v206 - v205) * 0.3);
              v215 = v214 <= 1.0 ? v214 : 1.0;
              v216 = v214 >= 0.0 ? v215 : 0.0;
              *(_QWORD *)__str = &v379;
              *(_QWORD *)&__str[8] = v155;
              *(_QWORD *)v376 = &v379.__r_.__value_.__l.__size_;
              do
              {
                **(float **)&__str[v213] = **(float **)&__str[v213]
                                         + (float)(v216 * (float)(v204 - **(float **)&__str[v213]));
                v213 += 8;
              }
              while (v213 != 24);
              *(_DWORD *)__str = 1065353216;
              *(_QWORD *)&__str[4] = v379.__r_.__value_.__r.__words[0];
              *(_DWORD *)&__str[12] = v379.__r_.__value_.__r.__words[1];
              v217 = __str;
              v218 = 1.0;
              for (n = 4; n != 16; n += 4)
              {
                if (v218 < *(float *)&__str[n])
                {
                  v218 = *(float *)&__str[n];
                  v217 = &__str[n];
                }
              }
              v220 = 0;
              v221 = *(float *)v217;
              *(_QWORD *)__str = &v379;
              *(_QWORD *)&__str[8] = v155;
              *(_QWORD *)v376 = &v379.__r_.__value_.__l.__size_;
              v222 = 1.0 / v221;
              do
              {
                **(float **)&__str[v220] = v222 * **(float **)&__str[v220];
                v220 += 8;
              }
              while (v220 != 24);
              if (sub_2367C8E94((uint64_t)__str, v355, v354))
                break;
              v223 = &v380;
              sub_2367C9278((uint64_t)__str, (int *)&v385, (uint64_t)&v380);
              v224 = 0;
              v374 = 0.0;
              v373 = 0;
              do
              {
                v225 = 0;
                v226 = *((float *)&v373 + v224);
                do
                {
                  v226 = v226
                       + (float)(*(float *)((char *)&v379.__r_.__value_.__l.__data_ + v225)
                               * *(float *)((char *)v223 + v225));
                  v225 += 4;
                }
                while (v225 != 12);
                *((float *)&v373 + v224++) = v226;
                v223 = (__int128 *)((char *)v223 + 12);
              }
              while (v224 != 3);
              v227 = *(float *)&v373 / 0.96421;
              if ((float)(*(float *)&v373 / 0.96421) <= 0.0088565)
                v228 = (float)(v227 * 7.787) + 0.13793;
              else
                v228 = cbrtf(v227);
              if (*((float *)&v373 + 1) <= 0.0088565)
                v229 = (float)(*((float *)&v373 + 1) * 7.787) + 0.13793;
              else
                v229 = cbrtf(*((float *)&v373 + 1));
              v230 = v165;
              v231 = v155;
              v232 = v374 / 0.82519;
              if ((float)(v374 / 0.82519) <= 0.0088565)
                v233 = (float)(v232 * 7.787) + 0.13793;
              else
                v233 = cbrtf(v232);
              v234 = 0;
              v235 = (float)(v229 * 1.16) + -0.16;
              if (v235 <= 1.0)
                v236 = (float)(v229 * 1.16) + -0.16;
              else
                v236 = 1.0;
              if (v235 >= 0.0)
                v237 = v236;
              else
                v237 = 0.0;
              v371[0] = (int)(float)((float)(v237 * 255.0) + 0.5);
              v238 = (float)(v228 - v229) * 500.0;
              v239 = v238 + 128.5;
              if (v238 > 127.0)
                v239 = 255.5;
              if (v238 >= -128.0)
                v240 = v239;
              else
                v240 = 0.5;
              v371[1] = (int)v240;
              v241 = (float)(v229 - v233) * 200.0;
              v242 = v241 + 128.5;
              if (v241 > 127.0)
                v242 = 255.5;
              if (v241 >= -128.0)
                v243 = v242;
              else
                v243 = 0.5;
              v371[2] = (int)v243;
              v164 = 0.125;
              do
              {
                v244 = v371[v234];
                v245 = v365[0];
                v246 = (char *)v365[1] - (char *)v365[0];
                if ((char *)v365[1] - (char *)v365[0] != -1)
                {
                  sub_2367C8698((unint64_t *)v365, 1uLL);
                  v245 = v365[0];
                }
                v245[v246] = v244;
                ++v234;
              }
              while (v234 != 3);
              ++v175;
              v155 = v231;
              v165 = v230;
              if (v175 == 9)
              {
                v170 = v343 + 1;
                if (v343 != 8)
                  goto LABEL_276;
                v154 = v342 + 1;
                if (v342 != 8)
                  goto LABEL_271;
                for (ii = 0; ii != 3; ++ii)
                {
                  for (jj = 0; jj != 256; ++jj)
                  {
                    v249 = v365[0];
                    v250 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v249 = v365[0];
                    }
                    v249[v250] = jj;
                  }
                }
                sub_2367C8B64((uint64_t)v365, &v361, &v360);
                sub_2367C8C8C("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                if (!sub_2367C9524((unint64_t *)v365))
                {
                  sub_2367C8B64((uint64_t)v365, &v361, &v360);
                  a2 = v341;
                  goto LABEL_371;
                }
                goto LABEL_379;
              }
            }
          }
          else
          {
            switch(v3)
            {
              case 8:
                v145 = operator new(4uLL);
                *v145 = 1065353216;
                *((_QWORD *)&v385 + 1) = v145 + 1;
                *(_QWORD *)&v386 = v145 + 1;
                *(_QWORD *)&v385 = v145;
                v146 = sub_2367C93A0((float **)&v385, 0, (unint64_t *)v365);
                goto LABEL_378;
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
                goto LABEL_495;
              case 13:
                v145 = operator new(0x14uLL);
                *((_QWORD *)&v385 + 1) = v145 + 5;
                *(_QWORD *)&v386 = v145 + 5;
                v145[4] = 1025879782;
                *(_OWORD *)v145 = xmmword_236925E44;
                *(_QWORD *)&v385 = v145;
                v146 = sub_2367C93A0((float **)&v385, 3, (unint64_t *)v365);
                goto LABEL_378;
              case 16:
                sub_2367C99BC(__str, 1);
                sub_2367C9B50((uint64_t *)__str, (unint64_t *)v365);
                goto LABEL_392;
              case 17:
                v254 = operator new(0x14uLL);
                *((_QWORD *)&v385 + 1) = v254 + 5;
                *(_QWORD *)&v386 = v254 + 5;
                v254[4] = 0;
                *(_OWORD *)v254 = *(_OWORD *)"ff&@";
                *(_QWORD *)&v385 = v254;
                v255 = sub_2367C93A0((float **)&v385, 3, (unint64_t *)v365);
                *((_QWORD *)&v385 + 1) = v254;
                operator delete(v254);
                if (v255)
                  goto LABEL_379;
                goto LABEL_394;
              case 18:
                sub_2367C99BC(__str, 2);
                sub_2367C9B50((uint64_t *)__str, (unint64_t *)v365);
LABEL_392:
                if (*(_QWORD *)__str)
                {
                  *(_QWORD *)&__str[8] = *(_QWORD *)__str;
                  operator delete(*(void **)__str);
                }
                goto LABEL_394;
              default:
                if (v3 == 1)
                {
                  v145 = operator new(0x14uLL);
                  *((_QWORD *)&v385 + 1) = v145 + 5;
                  *(_QWORD *)&v386 = v145 + 5;
                  v145[4] = 1034281812;
                  *(_OWORD *)v145 = xmmword_236925E58;
                  *(_QWORD *)&v385 = v145;
                  v146 = sub_2367C93A0((float **)&v385, 3, (unint64_t *)v365);
                }
                else
                {
                  v256 = a1[11];
                  v145 = operator new(4uLL);
                  v257 = 1.0 / v256;
                  *(float *)v145 = v257;
                  *((_QWORD *)&v385 + 1) = v145 + 1;
                  *(_QWORD *)&v386 = v145 + 1;
                  *(_QWORD *)&v385 = v145;
                  v146 = sub_2367C93A0((float **)&v385, 0, (unint64_t *)v365);
                }
LABEL_378:
                v258 = v146;
                *((_QWORD *)&v385 + 1) = v145;
                operator delete(v145);
                if (v258)
                  goto LABEL_379;
LABEL_394:
                sub_2367C8B64((uint64_t)v365, &v361, &v360);
                v259 = *(_DWORD *)a1;
                v252 = v360;
                v251 = v361;
                if (v259 == 1)
                {
                  v253 = "kTRC";
                }
                else
                {
                  sub_2367C8C8C("rTRC", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  sub_2367C8C8C("gTRC", v251, v252, (unint64_t *)v367, (uint64_t)&v362);
                  v253 = "bTRC";
                }
                break;
            }
LABEL_397:
            sub_2367C8C8C(v253, v251, v252, (unint64_t *)v367, (uint64_t)&v362);
            v260 = (int *)v362;
            v261 = v363;
            v262 = (char *)v363 - (_BYTE *)v362;
            sub_2367C8618((unint64_t)((char *)v363 - (_BYTE *)v362) >> 3, 0, (unint64_t *)v367);
            if (v261 != v260)
            {
              v264 = (int)v369[0];
              v263 = (int)v369[1];
              if ((unint64_t)(v262 >> 3) <= 1)
                v265 = 1;
              else
                v265 = v262 >> 3;
              v266 = 8;
              do
              {
                v267 = *v260;
                v260 += 2;
                sub_2367C8618(v267 + v263 + LODWORD(v367[1]) - (v264 + LODWORD(v367[0])), v266, (unint64_t *)v367);
                v266 += 12;
                --v265;
              }
              while (v265);
            }
            v357 = *(_OWORD *)v367;
            v268 = vaddq_s64(vaddq_s64(*(int64x2_t *)v369, *(int64x2_t *)v367), *(int64x2_t *)v365);
            sub_2367C8618(vsubq_s64(vdupq_laneq_s64(v268, 1), v268).i32[0], 0, (unint64_t *)v369);
            sub_2367C9C54((_QWORD *)a2, (char *)v369[0], (char *)v369[1], (char *)v369[1] - (char *)v369[0]);
            sub_2367C9D5C(a2, *(char **)(a2 + 8), (char *)v357, *((char **)&v357 + 1), *((_QWORD *)&v357 + 1) - v357);
            sub_2367C9D5C(a2, *(char **)(a2 + 8), (char *)v365[0], (char *)v365[1], (char *)v365[1] - (char *)v365[0]);
            v380 = 0uLL;
            v381 = 0;
            sub_2367C9F60(&v380, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
            v269 = v380;
            v270 = *((_QWORD *)&v380 + 1) - v380;
            if (*((_QWORD *)&v380 + 1) - (_QWORD)v380 >= 0x44uLL)
            {
              *(_DWORD *)(v380 + 44) = 0;
              *(_DWORD *)(v269 + 64) = 0;
            }
            memset(__str, 0, sizeof(__str));
            *(_QWORD *)v376 = 0;
            sub_2367C9F60(__str, (const void *)v269, *((uint64_t *)&v269 + 1), v270);
            v271 = *(char **)&__str[8];
            if (*(_QWORD *)&__str[8] >= *(_QWORD *)v376)
            {
              v274 = *(_QWORD *)__str;
              v275 = *(_QWORD *)&__str[8] - *(_QWORD *)__str;
              v276 = *(_QWORD *)&__str[8] - *(_QWORD *)__str + 1;
              if (v276 < 0)
                sub_2367C3440();
              v277 = *(_QWORD *)v376 - *(_QWORD *)__str;
              if (2 * (*(_QWORD *)v376 - *(_QWORD *)__str) > (unint64_t)v276)
                v276 = 2 * v277;
              if (v277 >= 0x3FFFFFFFFFFFFFFFLL)
                v278 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v278 = v276;
              if (v278)
                v272 = operator new(v278);
              else
                v272 = 0;
              v279 = (char *)v272 + v278;
              *((_BYTE *)v272 + v275) = 0x80;
              v273 = (char *)v272 + v275 + 1;
              if (v271 == (char *)v274)
              {
                v272 = (char *)v272 + v275;
              }
              else
              {
                v280 = &v271[~v274];
                do
                {
                  v281 = *--v271;
                  (v280--)[(_QWORD)v272] = v281;
                }
                while (v271 != (char *)v274);
                v271 = *(char **)__str;
              }
              *(_QWORD *)__str = v272;
              *(_QWORD *)v376 = v279;
              if (v271)
                operator delete(v271);
            }
            else
            {
              **(_BYTE **)&__str[8] = 0x80;
              v272 = *(void **)__str;
              v273 = v271 + 1;
            }
            *(_QWORD *)&__str[8] = v273;
            v282 = (56 - ((_BYTE)v273 - (_BYTE)v272)) & 0x3F;
            v283 = v282 + v273 - (_BYTE *)v272;
            v379.__r_.__value_.__s.__data_[0] = 0;
            if (v273 - (_BYTE *)v272 >= v283)
            {
              if (v273 - (_BYTE *)v272 > v283)
              {
                v273 += v282;
                *(_QWORD *)&__str[8] = (char *)v272 + v283;
              }
            }
            else
            {
              sub_2367C8504(__str, v282, &v379);
              v273 = *(_BYTE **)&__str[8];
            }
            v284 = 0;
            do
            {
              v285 = (unint64_t)(8 * (*((_QWORD *)&v380 + 1) - v380)) >> v284;
              if ((unint64_t)v273 >= *(_QWORD *)v376)
              {
                v286 = *(_QWORD *)__str;
                v287 = &v273[-*(_QWORD *)__str];
                v288 = (uint64_t)&v273[-*(_QWORD *)__str + 1];
                if (v288 < 0)
                  sub_2367C3440();
                v289 = *(_QWORD *)v376 - *(_QWORD *)__str;
                if (2 * (*(_QWORD *)v376 - *(_QWORD *)__str) > (unint64_t)v288)
                  v288 = 2 * v289;
                if (v289 >= 0x3FFFFFFFFFFFFFFFLL)
                  v290 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v290 = v288;
                if (v290)
                  v291 = (char *)operator new(v290);
                else
                  v291 = 0;
                v292 = &v287[(_QWORD)v291];
                v293 = &v287[(_QWORD)v291];
                *v293 = v285;
                v294 = v293 + 1;
                if (v273 != (_BYTE *)v286)
                {
                  v295 = &v273[~v286];
                  do
                  {
                    v296 = *--v273;
                    (v295--)[(_QWORD)v291] = v296;
                  }
                  while (v273 != (_BYTE *)v286);
                  v273 = *(_BYTE **)__str;
                  v292 = v291;
                }
                *(_QWORD *)__str = v292;
                *(_QWORD *)&__str[8] = v294;
                *(_QWORD *)v376 = &v291[v290];
                if (v273)
                  operator delete(v273);
                v273 = v294;
              }
              else
              {
                *v273++ = v285;
              }
              *(_QWORD *)&__str[8] = v273;
              v297 = v284 >= 0x38;
              v284 += 8;
            }
            while (!v297);
            v298 = -271733879;
            v299 = -1732584194;
            v300 = 1732584193;
            v301 = 271733878;
            if (v273 != *(_BYTE **)__str)
            {
              v302 = 0;
              do
              {
                v303 = 0;
                v304 = 0;
                v305 = 1;
                v306 = 5;
                v307 = v301;
                v308 = v299;
                v309 = v298;
                v310 = v300;
                do
                {
                  v311 = v310;
                  v312 = v309;
                  v313 = v308;
                  v310 = v307;
                  v314 = (v309 | ~v307) ^ v308;
                  v315 = v303 & 0xF;
                  v316 = v308 ^ v310 ^ v312;
                  if (v304 <= 0x2F)
                  {
                    v314 = v316;
                    v315 = v306 & 0xF;
                  }
                  if (v304 <= 0x1F)
                  {
                    v314 = v312 & v310 | v313 & ~v310;
                    v315 = v305 & 0xF;
                  }
                  if (v304 <= 0xF)
                    v315 = v304;
                  v317 = (4 * v315) + v302;
                  if (v304 <= 0xF)
                    v314 = v310 & ~v312 | v312 & v313;
                  v309 = __ROR4__(v314+ v311+ dword_236925FA8[v304]+ (*(unsigned __int8 *)(*(_QWORD *)__str + v317) | (*(unsigned __int8 *)(*(_QWORD *)__str+ (v317 | 1)) << 8) | (*(unsigned __int8 *)(*(_QWORD *)__str + (v317 | 2)) << 16) | (*(unsigned __int8 *)(*(_QWORD *)__str + (v317 | 3)) << 24)), -byte_2369260A8[4 * v304])+ v312;
                  ++v304;
                  v303 += 7;
                  v306 += 3;
                  v305 += 5;
                  v307 = v313;
                  v308 = v312;
                }
                while (v304 != 64);
                v300 += v310;
                v298 += v309;
                v299 += v312;
                v301 += v313;
                v302 += 64;
              }
              while (v302 < (unint64_t)&v273[-*(_QWORD *)__str]);
            }
            if (*(_QWORD *)__str)
              operator delete(*(void **)__str);
            v318 = *(_DWORD **)a2;
            v318[21] = v300;
            v318[22] = v298;
            v318[23] = v299;
            v318[24] = v301;
            if ((_QWORD)v380)
              operator delete((void *)v380);
          }
          goto LABEL_379;
        }
        v92 = a1[2];
        if (v92 != 0.0)
        {
          v93 = a1[1];
          v94 = v92;
          if (!sub_2367C8E94((uint64_t)__str, v93, v94))
          {
            v385 = *(_OWORD *)__str;
            v386 = *(_OWORD *)v376;
            v387 = *(_DWORD *)&v376[16];
            v95 = (char *)v365[0];
            v96 = (char *)v365[1] - (char *)v365[0];
            if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
            {
              sub_2367C8698((unint64_t *)v365, 4uLL);
              v95 = (char *)v365[0];
            }
            *(_DWORD *)&v95[v96] = 842229363;
            sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            for (kk = 0; kk != 36; kk += 4)
            {
              v98 = *(float *)((char *)&v385 + kk);
              if (v98 < -32768.0 || v98 > 32768.0)
                goto LABEL_379;
              sub_2367C8618((int)(float)((float)(v98 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
            }
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("chad", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            v99 = *(_DWORD *)a1;
            if (*(_DWORD *)a1)
            {
LABEL_211:
              if (v99 != 2)
                goto LABEL_191;
              v100 = (char *)v365[0];
              v101 = (char *)v365[1] - (char *)v365[0];
              if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
              {
                sub_2367C8698((unint64_t *)v365, 4uLL);
                v100 = (char *)v365[0];
              }
              *(_DWORD *)&v100[v101] = 541213037;
              sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              v102 = v365[0];
              v103 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2367C8698((unint64_t *)v365, 1uLL);
                v102 = v365[0];
              }
              v102[v103] = 3;
              v104 = v365[0];
              v105 = (char *)v365[1] - (char *)v365[0];
              if ((char *)v365[1] - (char *)v365[0] != -1)
              {
                sub_2367C8698((unint64_t *)v365, 1uLL);
                v104 = v365[0];
              }
              v104[v105] = 3;
              sub_2367C9340(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(244, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(148, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(80, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              sub_2367C8618(32, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
              v106 = operator new(4uLL);
              *v106 = 1065353216;
              *(_QWORD *)&__str[8] = v106 + 1;
              *(_QWORD *)v376 = v106 + 1;
              *(_QWORD *)__str = v106;
              v107 = sub_2367C93A0((float **)__str, 0, (unint64_t *)v365);
              operator delete(v106);
              if (!v107)
              {
                v108 = operator new(4uLL);
                *v108 = 1065353216;
                *((_QWORD *)&v385 + 1) = v108 + 1;
                *(_QWORD *)&v386 = v108 + 1;
                *(_QWORD *)&v385 = v108;
                v109 = sub_2367C93A0((float **)&v385, 0, (unint64_t *)v365);
                operator delete(v108);
                if (!v109)
                {
                  v110 = operator new(4uLL);
                  *v110 = 1065353216;
                  *((_QWORD *)&v380 + 1) = v110 + 1;
                  v381 = v110 + 1;
                  *(_QWORD *)&v380 = v110;
                  v111 = sub_2367C93A0((float **)&v380, 0, (unint64_t *)v365);
                  operator delete(v110);
                  if (!v111)
                  {
                    v340 = a2;
                    for (mm = 0; mm != 16; ++mm)
                    {
                      v113 = v365[0];
                      v114 = (char *)v365[1] - (char *)v365[0];
                      if ((char *)v365[1] - (char *)v365[0] != -1)
                      {
                        sub_2367C8698((unint64_t *)v365, 1uLL);
                        v113 = v365[0];
                      }
                      v113[v114] = 2 * (mm < 3);
                    }
                    v115 = v365[0];
                    v116 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v115 = v365[0];
                    }
                    v115[v116] = 2;
                    v117 = v365[0];
                    v118 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v117 = v365[0];
                    }
                    v117[v118] = 0;
                    sub_2367C9340(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    v119 = 0;
                    v120 = 1;
                    do
                    {
                      v121 = 0;
                      v122 = v120;
                      v123 = (char *)&unk_236925F48 + 48 * v119;
                      v124 = 1;
                      do
                      {
                        v125 = 0;
                        v126 = v124;
                        v127 = &v123[24 * v121];
                        v128 = 1;
                        do
                        {
                          v129 = 0;
                          v130 = v128;
                          v131 = &v127[12 * v125];
                          do
                          {
                            sub_2367C9340((int)(float)((float)(*(float *)&v131[v129] * 65535.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                            v129 += 4;
                          }
                          while (v129 != 12);
                          v128 = 0;
                          v125 = 1;
                        }
                        while ((v130 & 1) != 0);
                        v124 = 0;
                        v121 = 1;
                      }
                      while ((v126 & 1) != 0);
                      v120 = 0;
                      v119 = 1;
                    }
                    while ((v122 & 1) != 0);
                    v132 = 0;
                    while (1)
                    {
                      v133 = *(float *)&dword_236925ED4[v132];
                      v134 = *(float *)((char *)&xmmword_236925EE0 + v132 * 4);
                      v135 = *(float *)&dword_236925EF0[v132];
                      v136 = (float *)operator new(0x14uLL);
                      v137 = (float)-v133 - cbrtf(v134);
                      *v136 = 3.0;
                      v136[1] = 1.0 / v135;
                      v136[2] = v137;
                      v136[3] = 0.0;
                      v136[4] = fmaxf(-(float)(v137 * v135), 0.0);
                      memset(&v379, 0, sizeof(v379));
                      sub_2367C94AC(&v379, v136, (uint64_t)(v136 + 5), 5uLL);
                      v138 = sub_2367C93A0((float **)&v379, 3, (unint64_t *)v365);
                      if (v379.__r_.__value_.__r.__words[0])
                      {
                        v379.__r_.__value_.__l.__size_ = v379.__r_.__value_.__r.__words[0];
                        operator delete(v379.__r_.__value_.__l.__data_);
                      }
                      operator delete(v136);
                      if (v138)
                        break;
                      if (++v132 == 3)
                      {
                        v139 = 0;
                        while (1)
                        {
                          v140 = *(double *)&qword_236925F00[v139];
                          if (v140 < -32768.0 || v140 > 32768.0)
                            goto LABEL_379;
                          sub_2367C8618((int)(float)((float)(v140 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                          if (++v139 == 9)
                          {
                            v141 = 0;
                            v142 = qword_236925F00;
                            while (1)
                            {
                              v143 = 0;
                              v144 = 0.0;
                              do
                              {
                                v144 = v144 + *(double *)&v142[v143] * *((float *)&xmmword_236925EE0 + v143);
                                ++v143;
                              }
                              while (v143 != 3);
                              if (v144 < -32768.0 || v144 > 32768.0)
                                goto LABEL_379;
                              sub_2367C8618((int)(float)((float)(v144 * 65536.0) + 0.5), (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                              ++v141;
                              v142 += 3;
                              if (v141 == 3)
                              {
                                sub_2367C8B64((uint64_t)v365, &v361, &v360);
                                a2 = v340;
                                sub_2367C8C8C("A2B0", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                                if (sub_2367C9524((unint64_t *)v365))
                                  goto LABEL_379;
                                sub_2367C8B64((uint64_t)v365, &v361, &v360);
LABEL_371:
                                v252 = v360;
                                v251 = v361;
                                v253 = "B2A0";
                                goto LABEL_397;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_379;
            }
            v319 = *((_DWORD *)a1 + 6);
            if (v319 != 2)
            {
              if (v319 == 11)
              {
                v320 = *((_DWORD *)a1 + 1);
                if (v320 == 1)
                {
                  LOBYTE(v319) = 12;
                  goto LABEL_474;
                }
                if (v320 == 11)
                {
                  LOBYTE(v319) = 11;
LABEL_474:
                  v321 = *((_DWORD *)a1 + 20);
                  if (v321 != 2 && v321 != 0xFFFF)
                  {
                    v322 = (char *)v365[0];
                    v323 = (char *)v365[1] - (char *)v365[0];
                    if ((void *)((char *)v365[1] - (char *)v365[0]) <= (void *)0xFFFFFFFFFFFFFFFBLL)
                    {
                      sub_2367C8698((unint64_t *)v365, 4uLL);
                      v322 = (char *)v365[0];
                    }
                    *(_DWORD *)&v322[v323] = 1885563235;
                    sub_2367C8618(0, (char *)v365[1] - (char *)v365[0], (unint64_t *)v365);
                    v324 = v365[0];
                    v325 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v324 = v365[0];
                    }
                    v324[v325] = v319;
                    v326 = v365[0];
                    v327 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v326 = v365[0];
                    }
                    v326[v327] = v321;
                    v328 = v365[0];
                    v329 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v328 = v365[0];
                    }
                    v328[v329] = 0;
                    v330 = v365[0];
                    v331 = (char *)v365[1] - (char *)v365[0];
                    if ((char *)v365[1] - (char *)v365[0] != -1)
                    {
                      sub_2367C8698((unint64_t *)v365, 1uLL);
                      v330 = v365[0];
                    }
                    v330[v331] = 1;
                    sub_2367C8B64((uint64_t)v365, &v361, &v360);
                    sub_2367C8C8C("cicp", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
                  }
                }
              }
              else if (*((_DWORD *)a1 + 1) == 1)
              {
                goto LABEL_474;
              }
            }
            v332 = a1[4];
            v333 = a1[5];
            v334 = a1[6];
            v335 = a1[7];
            v336 = a1[8];
            v337 = a1[9];
            v338 = a1[1];
            v339 = a1[2];
            if (sub_2367C90C0((uint64_t)__str, v332, v333, v334, v335, v336, v337, v338, v339))
              goto LABEL_379;
            if (sub_2367C8E94((uint64_t)&v385, v338, v339))
              goto LABEL_379;
            sub_2367C9278((uint64_t)&v385, (int *)__str, (uint64_t)&v380);
            *(_DWORD *)__str = v380;
            *(_DWORD *)&__str[4] = HIDWORD(v380);
            *(_DWORD *)&__str[8] = v382;
            *(_QWORD *)&v385 = __PAIR64__(v381, DWORD1(v380));
            DWORD2(v385) = v383;
            *(_QWORD *)&v380 = __PAIR64__(HIDWORD(v381), DWORD2(v380));
            DWORD2(v380) = v384;
            if (sub_2367C8DBC((uint64_t)__str, (unint64_t *)v365))
              goto LABEL_379;
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("rXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2367C8DBC((uint64_t)&v385, (unint64_t *)v365))
              goto LABEL_379;
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("gXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            if (sub_2367C8DBC((uint64_t)&v380, (unint64_t *)v365))
              goto LABEL_379;
            sub_2367C8B64((uint64_t)v365, &v361, &v360);
            sub_2367C8C8C("bXYZ", v361, v360, (unint64_t *)v367, (uint64_t)&v362);
            v99 = *(_DWORD *)a1;
            goto LABEL_211;
          }
        }
      }
LABEL_379:
      if (v359 < 0)
        operator delete(__p[0]);
      if (v362)
        operator delete(v362);
      if (v365[0])
      {
        v365[1] = v365[0];
        operator delete(v365[0]);
      }
    }
  }
  if (v367[0])
    operator delete(v367[0]);
  if (v369[0])
    operator delete(v369[0]);
}

void sub_2367C82AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a44 < 0)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  if (a50)
    operator delete(a50);
  if (a54)
    operator delete(a54);
  if (a58)
    operator delete(a58);
  _Unwind_Resume(a1);
}

void sub_2367C8504(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      sub_2367C3440();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void sub_2367C8618(int a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  size_t v9;

  v6 = *a3;
  v7 = a3[1] - *a3;
  v8 = a2 + 4 >= v7;
  v9 = a2 + 4 - v7;
  if (v9 != 0 && v8)
  {
    sub_2367C8698(a3, v9);
    v6 = *a3;
  }
  *(_BYTE *)(v6 + a2) = HIBYTE(a1);
  *(_BYTE *)(a2 + *a3 + 1) = BYTE2(a1);
  *(_BYTE *)(a2 + *a3 + 2) = BYTE1(a1);
  *(_BYTE *)(a2 + *a3 + 3) = a1;
}

void sub_2367C8698(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_2367C3440();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

BOOL sub_2367C87BC(_DWORD *a1)
{
  int v1;
  int v2;

  if (*a1 || (a1[20] & 0xFFFFFFFD) != 0x10)
    return 0;
  v1 = a1[6];
  v2 = a1[1];
  if (v1 == 11 && (v2 == 1 || v2 == 11))
    return 1;
  return v1 != 2 && v2 == 1;
}

_QWORD *sub_2367C8810(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_2367CA230();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_2367C88BC(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  _BYTE *v34;
  char v35;

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a2, 4uLL);
    v4 = *a2;
  }
  *(_DWORD *)(v4 + v5) = 1668639853;
  sub_2367C8618(0, a2[1] - *a2, a2);
  sub_2367C8618(1, a2[1] - *a2, a2);
  sub_2367C8618(12, a2[1] - *a2, a2);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a2, 4uLL);
    v6 = *a2;
  }
  *(_DWORD *)(v6 + v7) = 1398107749;
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_DWORD *)(a1 + 8);
  sub_2367C8618(2 * v8, a2[1] - *a2, a2);
  sub_2367C8618(28, a2[1] - *a2, a2);
  v9 = *(unsigned __int8 *)(a1 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = (char *)a1;
  else
    v10 = *(char **)a1;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v11 = &v10[v9];
    v12 = (_BYTE *)a2[1];
    do
    {
      v13 = *v10;
      v14 = a2[2];
      if ((unint64_t)v12 >= v14)
      {
        v16 = *a2;
        v17 = &v12[-*a2];
        v18 = (unint64_t)(v17 + 1);
        if ((uint64_t)(v17 + 1) < 0)
          goto LABEL_51;
        v19 = v14 - v16;
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
          v21 = (char *)operator new(v20);
        else
          v21 = 0;
        v22 = &v17[(_QWORD)v21];
        v23 = &v17[(_QWORD)v21];
        *v23 = 0;
        v15 = v23 + 1;
        if (v12 != (_BYTE *)v16)
        {
          v24 = &v12[~v16];
          do
          {
            v25 = *--v12;
            (v24--)[(_QWORD)v21] = v25;
          }
          while (v12 != (_BYTE *)v16);
          v12 = (_BYTE *)*a2;
          v22 = v21;
        }
        *a2 = (unint64_t)v22;
        a2[1] = (unint64_t)v15;
        a2[2] = (unint64_t)&v21[v20];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = 0;
        v15 = v12 + 1;
      }
      a2[1] = (unint64_t)v15;
      v26 = a2[2];
      if ((unint64_t)v15 >= v26)
      {
        v27 = *a2;
        v28 = &v15[-*a2];
        v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0)
LABEL_51:
          sub_2367C3440();
        v30 = v26 - v27;
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v32 = (unint64_t)operator new(v31);
        else
          v32 = 0;
        v33 = (char *)(v32 + v31);
        v28[v32] = v13;
        v12 = &v28[v32 + 1];
        if (v15 == (_BYTE *)v27)
        {
          *a2 = (unint64_t)&v28[v32];
          a2[1] = (unint64_t)v12;
          a2[2] = (unint64_t)v33;
        }
        else
        {
          v34 = &v15[~v27];
          do
          {
            v35 = *--v15;
            (v34--)[v32] = v35;
          }
          while (v15 != (_BYTE *)v27);
          v15 = (_BYTE *)*a2;
          *a2 = v32;
          a2[1] = (unint64_t)v12;
          a2[2] = (unint64_t)v33;
          if (!v15)
            goto LABEL_49;
        }
        operator delete(v15);
      }
      else
      {
        *v15 = v13;
        v12 = v15 + 1;
      }
LABEL_49:
      a2[1] = (unint64_t)v12;
      ++v10;
    }
    while (v10 != v11);
  }
}

void sub_2367C8B64(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v5 = *(_BYTE **)a1;
  v6 = *(_BYTE **)(a1 + 8);
  for (i = (uint64_t)&v6[-*(_QWORD *)a1]; (i & 3) != 0; v6 = (_BYTE *)v10)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v6 >= v9)
    {
      v11 = i + 1;
      if (i + 1 < 0)
        sub_2367C3440();
      v12 = v9 - (_QWORD)v5;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = (char *)operator new(v13);
      else
        v14 = 0;
      v15 = &v14[i];
      v14[i] = 0;
      v10 = (uint64_t)&v14[i + 1];
      if (v6 != v5)
      {
        v16 = i - 1;
        do
        {
          v17 = *--v6;
          v14[v16--] = v17;
        }
        while (v6 != v5);
        v5 = *(_BYTE **)a1;
        v15 = v14;
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = &v14[v13];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v6 = 0;
      v10 = (uint64_t)(v6 + 1);
    }
    *(_QWORD *)(a1 + 8) = v10;
    v5 = *(_BYTE **)a1;
    i = v10 - *(_QWORD *)a1;
  }
  v18 = *a2 + *a3;
  *a2 = v18;
  *a3 = i - v18;
}

void sub_2367C8C8C(_DWORD *a1, uint64_t a2, int a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;

  v10 = *a4;
  v11 = a4[1] - *a4;
  if (v11 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a4, 4uLL);
    v10 = *a4;
  }
  *(_DWORD *)(v10 + v11) = *a1;
  sub_2367C8618(0, a4[1] - *a4, a4);
  v13 = *(_QWORD **)(a5 + 8);
  v12 = *(_QWORD *)(a5 + 16);
  if ((unint64_t)v13 >= v12)
  {
    v15 = *(_QWORD **)a5;
    v16 = ((uint64_t)v13 - *(_QWORD *)a5) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_2367C3440();
    v18 = v12 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
    v20 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v17;
    if (v20)
    {
      v20 = (unint64_t)sub_2367CA1FC(v20);
      v15 = *(_QWORD **)a5;
      v13 = *(_QWORD **)(a5 + 8);
    }
    else
    {
      v21 = 0;
    }
    v22 = (_QWORD *)(v20 + 8 * v16);
    v23 = v20 + 8 * v21;
    *v22 = a2;
    v14 = v22 + 1;
    while (v13 != v15)
    {
      v24 = *--v13;
      *--v22 = v24;
    }
    *(_QWORD *)a5 = v22;
    *(_QWORD *)(a5 + 8) = v14;
    *(_QWORD *)(a5 + 16) = v23;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v13 = a2;
    v14 = v13 + 1;
  }
  *(_QWORD *)(a5 + 8) = v14;
  sub_2367C8618(a3, a4[1] - *a4, a4);
}

uint64_t sub_2367C8DBC(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a2, 4uLL);
    v4 = *a2;
  }
  *(_DWORD *)(v4 + v5) = 542792024;
  sub_2367C8618(0, a2[1] - *a2, a2);
  v6 = 0;
  while (1)
  {
    v7 = *(float *)(a1 + v6);
    result = 1;
    if (v7 < -32768.0 || v7 > 32768.0)
      break;
    sub_2367C8618((int)(float)((float)(v7 * 65536.0) + 0.5), a2[1] - *a2, a2);
    v6 += 4;
    if (v6 == 12)
      return 0;
  }
  return result;
}

BOOL sub_2367C8E94(uint64_t a1, float a2, float a3)
{
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  float v17;
  int v18[9];
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  result = 1;
  if (a3 <= 1.0 && a2 >= 0.0 && a2 <= 1.0 && a3 > 0.0)
  {
    v32[0] = a2 / a3;
    v6 = a2 / a3;
    v32[1] = 1.0;
    v7 = (float)((float)(1.0 - a2) - a3) / a3;
    v32[2] = v7;
    if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      result = (LODWORD(v7) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v8 = 0;
        v9 = (char *)dword_23691FB50;
        do
        {
          v10 = 0;
          v11 = 0.0;
          do
          {
            v11 = v11 + (float)(*(float *)&v9[v10 * 4] * v32[v10]);
            ++v10;
          }
          while (v10 != 3);
          v12 = v11;
          *(&v29 + v8++) = v12;
          v9 += 12;
        }
        while (v8 != 3);
        v13 = 0;
        v14 = (char *)dword_23691FB50;
        do
        {
          v15 = 0;
          v16 = 0.0;
          do
          {
            v16 = v16 + (float)(*(float *)&v14[v15 * 4] * *(float *)&dword_236925E80[v15]);
            ++v15;
          }
          while (v15 != 3);
          v17 = v16;
          *(&v26 + v13++) = v17;
          v14 += 12;
        }
        while (v13 != 3);
        result = 1;
        if (v29 != 0.0 && v30 != 0.0 && v31 != 0.0)
        {
          v19 = v26 / v29;
          v20 = 0;
          v21 = 0;
          v22 = v27 / v30;
          v23 = 0;
          v24 = 0;
          v25 = v28 / v31;
          if (COERCE_INT(fabs(v26 / v29)) <= 2139095039
            && COERCE_UNSIGNED_INT(fabs(v27 / v30)) <= 0x7F7FFFFF
            && COERCE_UNSIGNED_INT(fabs(v28 / v31)) <= 0x7F7FFFFF)
          {
            sub_2367C9278((uint64_t)&v19, dword_23691FB50, (uint64_t)v18);
            sub_2367C9278((uint64_t)&unk_23691FB74, v18, a1);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2367C90C0(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  _BOOL8 result;
  BOOL v12;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  double v18;
  float v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  _DWORD v27[3];
  float v28[3];
  _OWORD v29[2];
  float v30;
  __int128 v31;
  __int128 v32;
  float v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  result = 1;
  if (a9 <= 1.0)
  {
    v12 = a8 < 0.0 || a8 > 1.0;
    if (!v12 && a9 > 0.0)
    {
      *(_QWORD *)&v31 = __PAIR64__(LODWORD(a4), LODWORD(a2));
      *((_QWORD *)&v31 + 1) = __PAIR64__(LODWORD(a3), LODWORD(a6));
      *(_QWORD *)&v32 = __PAIR64__(LODWORD(a7), LODWORD(a5));
      *((float *)&v32 + 2) = (float)(1.0 - a2) - a3;
      *((float *)&v32 + 3) = (float)(1.0 - a4) - a5;
      v33 = (float)(1.0 - a6) - a7;
      v29[0] = v31;
      v29[1] = v32;
      v30 = v33;
      if (sub_2367CA0CC((float *)v29))
        return 1;
      v28[0] = a8 / a9;
      v28[1] = 1.0;
      v28[2] = (float)((float)(1.0 - a8) - a9) / a9;
      if (COERCE_INT(fabs(a8 / a9)) > 2139095039)
      {
        return 1;
      }
      else
      {
        v14 = fabs((float)((float)(1.0 - a8) - a9) / a9);
        result = v14 > 2139095039;
        if (v14 <= 2139095039)
        {
          v15 = 0;
          v16 = v29;
          do
          {
            v17 = 0;
            v18 = 0.0;
            do
            {
              v18 = v18 + (float)(*(float *)((char *)v16 + v17 * 4) * v28[v17]);
              ++v17;
            }
            while (v17 != 3);
            v19 = v18;
            *(float *)&v27[v15++] = v19;
            v16 = (_OWORD *)((char *)v16 + 12);
          }
          while (v15 != 3);
          v20 = v27[0];
          v21 = 0;
          v22 = 0;
          v23 = v27[1];
          v24 = 0;
          v25 = 0;
          v26 = v27[2];
          sub_2367C9278((uint64_t)&v31, &v20, a1);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2367C9278(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  _BYTE v12[24];
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  do
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = *v5;
      v5 += 3;
      *(_DWORD *)&v12[v4] = v6;
      v4 += 4;
    }
    while (v4 != 12);
    v7 = 0;
    v8 = result;
    do
    {
      v9 = 0;
      v10 = 0.0;
      do
      {
        v10 = v10 + (float)(*(float *)(v8 + v9) * *(float *)&v12[v9]);
        v9 += 4;
      }
      while (v9 != 12);
      v11 = v10;
      *(float *)(a3 + 4 * (3 * v7++ + v3)) = v11;
      v8 += 12;
    }
    while (v7 != 3);
    ++v3;
    ++a2;
  }
  while (v3 != 3);
  return result;
}

void sub_2367C9340(__int16 a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  size_t v9;

  v6 = *a3;
  v7 = a3[1] - *a3;
  v8 = a2 + 2 >= v7;
  v9 = a2 + 2 - v7;
  if (v9 != 0 && v8)
  {
    sub_2367C8698(a3, v9);
    v6 = *a3;
  }
  *(_BYTE *)(v6 + a2) = HIBYTE(a1);
  *(_BYTE *)(a2 + *a3 + 1) = a1;
}

uint64_t sub_2367C93A0(float **a1, __int16 a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float v10;
  uint64_t result;

  v6 = *a3;
  v7 = a3[1] - *a3;
  if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a3, 4uLL);
    v6 = *a3;
  }
  *(_DWORD *)(v6 + v7) = 1634886000;
  sub_2367C8618(0, a3[1] - *a3, a3);
  sub_2367C9340(a2, a3[1] - *a3, a3);
  sub_2367C9340(0, a3[1] - *a3, a3);
  v9 = *a1;
  v8 = a1[1];
  if (v9 == v8)
    return 0;
  while (1)
  {
    v10 = *v9;
    result = 1;
    if (*v9 < -32768.0 || v10 > 32768.0)
      break;
    sub_2367C8618((int)(float)((float)(v10 * 65536.0) + 0.5), a3[1] - *a3, a3);
    if (++v9 == v8)
      return 0;
  }
  return result;
}

_QWORD *sub_2367C94AC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367C3404(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2367C9508(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367C9524(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  int v9;
  float *v10;
  int v11;
  uint64_t v12;
  float *v14;
  float *v15[3];
  float *v16[3];
  float *v17[3];

  v2 = *a1;
  v3 = a1[1] - *a1;
  if (v3 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    sub_2367C8698(a1, 4uLL);
    v2 = *a1;
  }
  *(_DWORD *)(v2 + v3) = 541147757;
  sub_2367C8618(0, a1[1] - *a1, a1);
  v4 = *a1;
  v5 = a1[1] - *a1;
  if (v5 != -1)
  {
    sub_2367C8698(a1, 1uLL);
    v4 = *a1;
  }
  *(_BYTE *)(v4 + v5) = 3;
  v6 = *a1;
  v7 = a1[1] - *a1;
  if (v7 != -1)
  {
    sub_2367C8698(a1, 1uLL);
    v6 = *a1;
  }
  *(_BYTE *)(v6 + v7) = 3;
  sub_2367C9340(0, a1[1] - *a1, a1);
  sub_2367C8618(32, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  sub_2367C8618(0, a1[1] - *a1, a1);
  v8 = (float *)operator new(4uLL);
  *v8 = 1.0;
  v17[1] = v8 + 1;
  v17[2] = v8 + 1;
  v17[0] = v8;
  v9 = sub_2367C93A0(v17, 0, a1);
  operator delete(v8);
  if (v9)
    return 1;
  v10 = (float *)operator new(4uLL);
  *v10 = 1.0;
  v16[1] = v10 + 1;
  v16[2] = v10 + 1;
  v16[0] = v10;
  v11 = sub_2367C93A0(v16, 0, a1);
  operator delete(v10);
  if (v11)
    return 1;
  v14 = (float *)operator new(4uLL);
  *v14 = 1.0;
  v15[1] = v14 + 1;
  v15[2] = v14 + 1;
  v15[0] = v14;
  v12 = sub_2367C93A0(v15, 0, a1);
  operator delete(v14);
  return v12;
}

void sub_2367C971C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2367C9738(float *a1, float *a2, float *a3, float *a4, int8x16_t a5)
{
  int8x16_t v5;
  float v10;
  long double v11;
  int8x16_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  long double v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  int8x16_t v32;
  int8x16_t v33;
  __int32 v34;
  _QWORD v35[4];

  v35[3] = *MEMORY[0x24BDAC8D0];
  *(float *)v5.i32 = a1[1] * (float)((float)((float)(a1[5] * *a3) + (float)(a1[4] * *a2)) + (float)(a1[6] * *a4));
  v10 = 0.0;
  if (*(float *)v5.i32 != 0.0)
  {
    v33 = v5;
    v11 = pow(fabsf(*(float *)v5.i32) * 0.0000999999975, 0.159301758);
    *(double *)a5.i64 = pow((v11 * 18.8515625 + 0.8359375) / (v11 * 18.6875 + 1.0), 78.84375);
    v5.i32[0] = v33.i32[0];
    *(float *)a5.i32 = *(double *)a5.i64;
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    LODWORD(v10) = vbslq_s8(v12, a5, v33).u32[0];
  }
  v13 = a1[7];
  v14 = fminf((float)(v10 - v13) * a1[10], 1.0);
  v15 = a1[13];
  if (v14 >= v15)
  {
    v16 = (float)(v14 - v15) * a1[14];
    v14 = (float)((float)((float)(1.0 - v15)
                        * (float)(v16 + (float)((float)(v16 * (float)(v16 * v16)) + (float)((float)(v16 * v16) * -2.0))))
                + (float)((float)(1.0
                                - (float)((float)((float)(v16 * v16) * 3.0)
                                        - (float)((float)(v16 * (float)(v16 * v16)) * 2.0)))
                        * v15))
        + (float)((float)((float)((float)(v16 * v16) * 3.0) + (float)((float)(v16 * (float)(v16 * v16)) * -2.0)) * a1[12]);
  }
  *(float *)a5.i32 = v13
                   + (float)((float)(v14
                                   + (float)(a1[11]
                                           * (float)((float)((float)(1.0 - v14) * (float)(1.0 - v14))
                                                   * (float)((float)(1.0 - v14) * (float)(1.0 - v14)))))
                           * a1[9]);
  v17 = 0.0;
  if (*(float *)a5.i32 != 0.0)
  {
    v32 = a5;
    v34 = v5.i32[0];
    v18 = pow(fabsf(*(float *)a5.i32), 0.0126833135);
    v19 = v18 + -0.8359375;
    if (v18 + -0.8359375 < 0.0)
      v19 = 0.0;
    v20 = pow(v19 / (v18 * -18.6875 + 18.8515625), 6.27739464);
    v5.i32[0] = v34;
    *(double *)v21.i64 = v20 * 10000.0;
    *(float *)v21.i32 = *(double *)v21.i64;
    v22.i64[0] = 0x8000000080000000;
    v22.i64[1] = 0x8000000080000000;
    LODWORD(v17) = vbslq_s8(v22, v21, v32).u32[0];
  }
  v23 = 0;
  v24 = a1[3];
  if (v17 <= v24)
    v24 = v17;
  if (v17 >= 0.0)
    v25 = v24;
  else
    v25 = 0.0;
  if (*(float *)v5.i32 >= 0.000001)
    v26 = *(float *)v5.i32;
  else
    v26 = 0.000001;
  v27 = v25 / v26;
  v28 = a1[16] * v25;
  v29 = a1[15] * v27;
  v35[0] = a2;
  v35[1] = a3;
  v35[2] = a4;
  do
  {
    v30 = (float *)v35[v23];
    v31 = v28;
    if (*(float *)v5.i32 > 0.000001)
      v31 = v29 * *v30;
    *v30 = v31;
    ++v23;
  }
  while (v23 != 3);
}

void sub_2367C99BC(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  double v14;
  float v15;

  v3 = 0;
  v4 = *sub_2367CA014(a1, 64);
  do
  {
    v5 = (float)v3 / 63.0;
    v6 = v5;
    v7 = 0.0;
    if (a2 == 2)
    {
      if (v5 == 0.0)
        goto LABEL_13;
      if (v5 <= 0.5)
      {
        v8 = v6 * v6;
        v9 = 0.333333333;
      }
      else
      {
        v8 = exp((v6 + -0.559910729) * 5.59181631) + 0.28466892;
        v9 = 0.0833333333;
      }
      v12 = v8 * v9;
    }
    else
    {
      if (v5 == 0.0)
        goto LABEL_13;
      v10 = pow(v6, 0.0126833135);
      v11 = v10 + -0.8359375;
      if (v10 + -0.8359375 < 0.0)
        v11 = 0.0;
      v12 = pow(v11 / (v10 * -18.6875 + 18.8515625), 6.27739464);
    }
    v13 = v12;
    v7 = fabsf(v13);
LABEL_13:
    v14 = v7 * 65535.0;
    if (v7 > 1.0)
      v14 = 65535.0;
    v15 = v14;
    *(_WORD *)(v4 + 2 * v3++) = llroundf(v15);
  }
  while (v3 != 64);
}

void sub_2367C9B50(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  v7 = v6 + 12;
  v8 = a1[1] - *a1 + v6 + 12;
  v12 = 0;
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v5 = v4 + v8;
      a2[1] = v4 + v8;
    }
  }
  else
  {
    sub_2367C8504(a2, v8 - v6, &v12);
    v4 = *a2;
    v5 = a2[1];
  }
  v9 = v5 - v4;
  if (v6 + 4 > v9)
  {
    sub_2367C8698(a2, v6 + 4 - v9);
    v4 = *a2;
  }
  *(_DWORD *)(v4 + v6) = 1987212643;
  sub_2367C8618(0, v6 + 4, a2);
  sub_2367C8618((unint64_t)(a1[1] - *a1) >> 1, v6 + 8, a2);
  v10 = *a1;
  if (a1[1] != *a1)
  {
    v11 = 0;
    do
    {
      sub_2367C9340(*(_WORD *)(v10 + 2 * v11++), v7, a2);
      v10 = *a1;
      v7 += 2;
    }
    while (v11 < (a1[1] - *a1) >> 1);
  }
}

_QWORD *sub_2367C9C54(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_2367C3440();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_2367C9FD8(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_2367C9D5C(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  if (a5 < 1)
    return;
  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_2367C3440();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    memcpy(&v13[(_QWORD)v16], __src, a5);
    if (v11 == __dst)
    {
      v27 = &v13[(_QWORD)v16];
    }
    else
    {
      do
      {
        v13[(_QWORD)v16 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(_BYTE **)(a1 + 8);
      v27 = v16;
    }
    v28 = &v26[a5];
    v29 = &v16[v15];
    if (v10 != __dst)
      memmove(v28, __dst, v10 - __dst);
    v30 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v28[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v29;
    if (v30)
      operator delete(v30);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_17:
    v21 = &__dst[a5];
    v22 = &v20[-a5];
    v23 = v20;
    if (&v20[-a5] < v10)
    {
      v24 = (char *)(&v10[a5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[a5], __dst, v20 - v21);
    if (v18 != __src)
      memmove(__dst, __src, v18 - __src);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
}

_QWORD *sub_2367C9F60(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_2367C9FD8(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2367C9FBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2367C9FD8(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_2367C3440();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *sub_2367CA014(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 < 0)
      sub_2367C3440();
    v4 = (char *)sub_2367CA09C(a2);
    *a1 = v4;
    a1[2] = &v4[2 * v5];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_2367CA080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2367CA09C(uint64_t a1)
{
  if (a1 < 0)
    sub_2367C3488();
  return operator new(2 * a1);
}

uint64_t sub_2367CA0CC(float *a1)
{
  double v1;
  double v2;
  double v3;
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  double v16;
  float v17;
  double v18[3];
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v1 = a1[4];
  v2 = a1[8];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[3];
  v7 = a1[2];
  v8 = *a1;
  v9 = a1[1];
  v18[0] = v1 * v2 - v3 * v5;
  v18[1] = v7 * v5 - v9 * v2;
  v10 = v4;
  v11 = v6;
  v18[2] = v9 * v3 - v7 * v1;
  v19 = v3 * v10 - v11 * v2;
  v12 = v8;
  v20 = v12 * v2 - v7 * v10;
  v21 = v7 * v11 - v12 * v3;
  v22 = v11 * v5 - v1 * v10;
  v23 = v9 * v10 - v12 * v5;
  v24 = v12 * v1 - v9 * v11;
  v13 = v19 * v9 + v12 * v18[0] + v7 * v22;
  if (fabs(v13) < 1.0e-10)
    return 1;
  v15 = 0;
  v16 = 1.0 / v13;
  do
  {
    v17 = v16 * v18[v15];
    a1[v15++] = v17;
  }
  while (v15 != 9);
  return 0;
}

void *sub_2367CA1FC(unint64_t a1)
{
  if (a1 >> 61)
    sub_2367C3488();
  return operator new(8 * a1);
}

void sub_2367CA230()
{
  sub_2367C34B0("basic_string");
}

double sub_2367CA244(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 > 9)
  {
    if (v1 == 10)
      return 0.333333333;
    else
      return 0.314;
  }
  else if (v1 == 1)
  {
    return 0.3127;
  }
  else
  {
    return (double)a1[15] * 0.000001;
  }
}

void sub_2367CA2B8(uint64_t a1, int a2, int a3)
{
  uint64_t v6;

  v6 = sub_2367CA390(a1) + 200;
  sub_2367CA390(v6);
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = a2;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = a3;
  sub_2367C5AC8(a1);
  *(_DWORD *)(a1 + 256) = 1;
  *(_DWORD *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = a2;
  *(_BYTE *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = a3;
  sub_2367C5AC8(v6);
}

void sub_2367CA330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = 400;
  while (1)
  {
    *(_QWORD *)(v1 + v3 - 200) = &off_2507FFA18;
    v4 = *(void **)(v1 + v3 - 168);
    if (v4)
    {
      *(_QWORD *)(v1 + v3 - 160) = v4;
      operator delete(v4);
    }
    v3 -= 200;
    if (!v3)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_2367CA390(uint64_t a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_2507FFA18;
  *(_QWORD *)(a1 + 16) = 0x100000001;
  *(_DWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 53) = 0;
  *(_QWORD *)(a1 + 68) = 0xD00000000;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_QWORD *)(a1 + 112) = &off_250800470;
  *(_QWORD *)(a1 + 120) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367C539C(a1 + 112, (uint64_t)&v3);
  *(_QWORD *)(a1 + 128) = &off_2507FFCC0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 144) = 0xD00000000;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367C5494(a1 + 128, (uint64_t)&v3);
  *(_QWORD *)(a1 + 152) = &off_250800470;
  *(_QWORD *)(a1 + 160) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367C539C(a1 + 152, (uint64_t)&v3);
  *(_QWORD *)(a1 + 168) = &off_250800470;
  *(_QWORD *)(a1 + 176) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367C539C(a1 + 168, (uint64_t)&v3);
  *(_QWORD *)(a1 + 184) = &off_250800470;
  *(_QWORD *)(a1 + 192) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367C539C(a1 + 184, (uint64_t)&v3);
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v3);
  return a1;
}

void sub_2367CA504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2367CA534(unsigned int a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25642EB30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25642EB30))
  {
    sub_2367CA2B8((uint64_t)&unk_25642E9A0, 1, 13);
    __cxa_atexit((void (*)(void *))sub_2367CA5D8, &unk_25642E9A0, &dword_23675F000);
    __cxa_guard_release(&qword_25642EB30);
  }
  return (char *)&unk_25642E9A0 + 200 * a1;
}

void sub_2367CA5C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25642EB30);
  _Unwind_Resume(a1);
}

uint64_t sub_2367CA5D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = 400;
  do
  {
    *(_QWORD *)(a1 + v2 - 200) = &off_2507FFA18;
    v3 = *(void **)(a1 + v2 - 168);
    if (v3)
    {
      *(_QWORD *)(a1 + v2 - 160) = v3;
      operator delete(v3);
    }
    v2 -= 200;
  }
  while (v2);
  return a1;
}

char *sub_2367CA62C(unsigned int a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25642ECC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25642ECC8))
  {
    sub_2367CA2B8((uint64_t)&unk_25642EB38, 1, 8);
    __cxa_atexit((void (*)(void *))sub_2367CA5D8, &unk_25642EB38, &dword_23675F000);
    __cxa_guard_release(&qword_25642ECC8);
  }
  return (char *)&unk_25642EB38 + 200 * a1;
}

void sub_2367CA6B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25642ECC8);
  _Unwind_Resume(a1);
}

void sub_2367CA6D0(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, uint64_t, uint64_t, double *, int *))
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  void *__p[3];
  int v9;
  double v10[13];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3 != v4)
  {
    v9 = 0;
    if (a3(a2, v3, v4 - v3, v10, &v9) && v9 == 0)
    {
      memset(__p, 0, sizeof(__p));
      sub_2367C5CB4(v10, (uint64_t)__p);
      if (!v7)
        *(_BYTE *)(a1 + 9) = 0;
      if (__p[0])
        operator delete(__p[0]);
    }
  }
}

void sub_2367CA758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2367CA770(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  sub_2367C431C((uint64_t)&v41, a2, a3);
  if (v45)
  {
    *(_DWORD *)(a1 + 120) = v45;
  }
  else
  {
    sub_2367C431C((uint64_t)&v36, a2, a3);
    if (v40)
    {
      *(_DWORD *)(a1 + 120) = v40;
    }
    else
    {
      sub_2367C431C((uint64_t)&v31, a2, a3);
      if (v35)
      {
        *(_DWORD *)(a1 + 120) = v35;
      }
      else
      {
        v19 = v41;
        v6 = v43;
        v43 = 0;
        v7 = v38;
        v38 = 0;
        v8 = v33;
        v33 = 0;
        v20 = v42;
        v21 = v6;
        v22 = v44;
        v24 = v37;
        v25 = v7;
        v23 = v36;
        v26 = v39;
        v27 = v31;
        v28 = v32;
        v29 = v8;
        v30 = v34;
        *(_DWORD *)(a1 + 120) = 0;
        sub_2367CA9E4(a1, (uint64_t)&v19);
        for (i = 104; i != -16; i -= 40)
          sub_2367C2F38((uint64_t *)((char *)&v19 + i));
        if (!v35)
        {
          v10 = v33;
          v33 = 0;
          if (v10)
          {
            v11 = -*(_QWORD *)(v10 - 24);
            do
              v12 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v12 + v11, &qword_2564313D8));
            free(*(void **)(v10 - 32));
          }
        }
      }
      if (!v40)
      {
        v13 = v38;
        v38 = 0;
        if (v13)
        {
          v14 = -*(_QWORD *)(v13 - 24);
          do
            v15 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v15 + v14, &qword_2564313D8));
          free(*(void **)(v13 - 32));
        }
      }
    }
    if (!v45)
    {
      v16 = v43;
      v43 = 0;
      if (v16)
      {
        v17 = -*(_QWORD *)(v16 - 24);
        do
          v18 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v18 + v17, &qword_2564313D8));
        free(*(void **)(v16 - 32));
      }
    }
  }
}

void sub_2367CA960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 104) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = -*(_QWORD *)(v3 - 24);
  do
    v5 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v5 + v4, &qword_2564313D8));
  free(*(void **)(v3 - 32));
  if (!*(_DWORD *)(v1 - 40))
  {
LABEL_5:
    v6 = *(_QWORD *)(v1 - 56);
    *(_QWORD *)(v1 - 56) = 0;
    if (v6)
    {
      v7 = -*(_QWORD *)(v6 - 24);
      do
        v8 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v8 + v7, &qword_2564313D8));
      free(*(void **)(v6 - 32));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2367CA9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  do
  {
    v5 = (__int128 *)(a2 + 40 * v4);
    v6 = a1 + 40 * v4;
    v7 = *v5;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v7;
    v8 = *((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = 0;
    v9 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v8;
    if (v9)
    {
      v10 = -*(_QWORD *)(v9 - 24);
      do
        v11 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v11 + v10, &qword_2564313D8));
      free(*(void **)(v9 - 32));
    }
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v5 + 4);
    ++v4;
  }
  while (v4 != 3);
  return a1;
}

uint64_t sub_2367CAAA0()
{
  return 0;
}

uint64_t sub_2367CAAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  _QWORD v6[2];

  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), uint64_t, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2367CB2D0, sub_2367CAB24, 1, a2);
  v5 = 1;
  do
    result = sub_2367CAB24((uint64_t)v6, v5++);
  while (v3 != v5);
  return result;
}

uint64_t sub_2367CAB24(uint64_t a1, unsigned int a2)
{
  float32x4_t v2;
  int32x2_t v3;
  float32x4_t v4;
  float32x4_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  unint64_t v45;
  const float *v46;
  float32x2_t v47;
  float32x2_t v48;
  const float *v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const float *v78;
  float32x4_t v79;
  const float *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x2_t v95;
  float32x2_t v96;
  uint64_t v97;
  float32x2_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  const float *v107;
  float32x2_t v108;
  const float *v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  _QWORD v118[2];
  _QWORD v119[3];
  _QWORD v120[4];

  v6 = 0;
  v7 = 0;
  v120[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(v8 + 8);
  v10 = **(_QWORD ***)v8;
  v11 = v10[2];
  v12 = v10[3];
  v13 = v11 * (a2 - 1);
  v14 = v10[8];
  v15 = v10[13];
  v16 = v11 * a2;
  v120[0] = v12 + v16;
  v120[1] = v14 + v16;
  v17 = v15 + v16;
  v120[2] = v15 + v16;
  result = v11 * (a2 + 1);
  v19 = v9[3];
  v20 = v9[2] * a2;
  v21 = v19 + v20;
  v22 = v9[8];
  v23 = v22 + v20;
  v119[0] = v19 + v20;
  v119[1] = v22 + v20;
  v24 = v9[13];
  v25 = v24 + v20;
  v119[2] = v24 + v20;
  v26 = **(_QWORD **)(v8 + 16) - 1;
  v118[0] = 0;
  v118[1] = v26;
  do
  {
    v27 = 0;
    v28 = v6;
    v29 = v118[v7];
    do
    {
      *(_DWORD *)(v119[v27] + 4 * v29) = *(_DWORD *)(v120[v27] + 4 * v29);
      ++v27;
    }
    while (v27 != 3);
    v6 = 1;
    v7 = 1;
  }
  while ((v28 & 1) == 0);
  v30 = 4;
  if (v26 < 4)
    v30 = v26;
  __asm
  {
    FMOV            V0.2S, #-4.0
    FMOV            V1.2S, #3.0
  }
  if (v30 < 2)
  {
    v45 = 1;
  }
  else
  {
    v37 = 0;
    v38 = v20 + 4;
    v39 = v24 + v20 + 4;
    v40 = v22 + v38;
    v41 = v19 + v38;
    v42 = (float32x2_t)vdup_n_s32(0x3D561170u);
    v43 = (float32x2_t)vdup_n_s32(0x3E505590u);
    v44 = (float32x2_t)vdup_n_s32(0x3D092563u);
    v45 = 1;
    do
    {
      v46 = **(const float ***)(v8 + 24);
      v2.i32[0] = *(_DWORD *)(v12 + v16 + 8 + v37 - 4);
      v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.f32, 0);
      v48 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v42, v2.f32[0]), v43, (float)(*(float *)(v12 + v16 + v37) + *(float *)(v12 + v16 + 8 + v37))+ (float)(*(float *)(v12 + v13 + 8 + v37 - 4) + *(float *)(v12 + result + 8 + v37 - 4))), v44, (float)(*(float *)(v12 + v13 + v37) + *(float *)(v12 + v13 + 8 + v37))+ (float)(*(float *)(v12 + result + v37) + *(float *)(v12 + result + 8 + v37)));
      v49 = v46 + 2;
      v50 = vld1_dup_f32(v46++);
      v3.i32[0] = *(_DWORD *)(v14 + v16 + 8 + v37 - 4);
      v51 = (float32x2_t)vdup_lane_s32(v3, 0);
      *(float32x2_t *)v2.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v42, *(float *)v3.i32), v43, (float)(*(float *)(v14 + v16 + v37) + *(float *)(v14 + v16 + 8 + v37))+ (float)(*(float *)(v14 + v13 + 8 + v37 - 4) + *(float *)(v14 + result + 8 + v37 - 4))), v44, (float)(*(float *)(v14 + v13 + v37) + *(float *)(v14 + v13 + 8 + v37))+ (float)(*(float *)(v14 + result + v37) + *(float *)(v14 + result + 8 + v37)));
      v52 = vld1_dup_f32(v46);
      v53 = vmaxnm_f32(vmaxnm_f32(vabs_f32(vdiv_f32(vsub_f32(v47, v48), v50)), (float32x2_t)0x3F0000003F000000), vabs_f32(vdiv_f32(vsub_f32(v51, *(float32x2_t *)v2.f32), v52)));
      v5.i32[0] = *(_DWORD *)(v17 + v37 + 4);
      v54 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0);
      v55 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v42, v5.f32[0]), v43, (float)(*(float *)(v17 + v37) + *(float *)(v17 + v37 + 8))+ (float)(*(float *)(v15 + v13 + v37 + 4) + *(float *)(v15 + result + v37 + 4))), v44, (float)(*(float *)(v15 + v13 + v37) + *(float *)(v15 + v13 + v37 + 8))+ (float)(*(float *)(v15 + result + v37) + *(float *)(v15 + result + v37 + 8)));
      v56 = vld1_dup_f32(v49);
      v57 = vmaxnm_f32(vmla_f32(_D1, _D0, vmaxnm_f32(v53, vabs_f32(vdiv_f32(vsub_f32(v54, v55), v56)))), 0);
      *(_DWORD *)(v41 + v37) = vmla_f32(v47, v57, vsub_f32(v48, v47)).u32[0];
      *(float32x2_t *)v4.f32 = vmla_f32(v51, v57, vsub_f32(*(float32x2_t *)v2.f32, v51));
      *(_DWORD *)(v40 + v37) = v4.i32[0];
      *(_DWORD *)(v39 + v37) = vmla_f32(v54, v57, vsub_f32(v55, v54)).u32[0];
      ++v45;
      v26 = **(_QWORD **)(v8 + 16) - 1;
      if (v26 >= 4)
        v58 = 4;
      else
        v58 = **(_QWORD **)(v8 + 16) - 1;
      v37 += 4;
    }
    while (v45 < v58);
  }
  if (v45 + 4 <= v26)
  {
    v59 = 4 * v45;
    v60 = v12 + v13 + 4;
    v61 = v12 + v16 + 4;
    v62 = result + v15 - 4;
    v63 = v12 + result + 4;
    v64 = v14 + v13 + 4;
    v65 = (float32x4_t)vdupq_n_s32(0x3D561170u);
    v66 = v16 + v15 - 4;
    v67 = v14 + v16 + 4;
    v68 = (float32x4_t)vdupq_n_s32(0x3E505590u);
    v69 = (float32x4_t)vdupq_n_s32(0x3D092563u);
    v70 = v14 + result + 4;
    v71.i64[0] = 0x3F0000003F000000;
    v71.i64[1] = 0x3F0000003F000000;
    v72 = v13 + v15 - 4;
    __asm
    {
      FMOV            V6.4S, #-4.0
      FMOV            V7.4S, #3.0
    }
    v75 = v21;
    v76 = v23;
    v77 = v25;
    do
    {
      v78 = **(const float ***)(v8 + 24);
      v79 = *(float32x4_t *)(v61 + v59 - 4);
      v80 = v78 + 2;
      v81 = vld1q_dup_f32(v78++);
      v82 = vmlaq_f32(vmlaq_f32(vmulq_f32(v79, v65), v68, vaddq_f32(vaddq_f32(*(float32x4_t *)(v61 + v59 - 8), *(float32x4_t *)(v61 + v59)), vaddq_f32(*(float32x4_t *)(v60 + v59 - 4), *(float32x4_t *)(v63 + v59 - 4)))), v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v60 + v59 - 8), *(float32x4_t *)(v60 + v59)), vaddq_f32(*(float32x4_t *)(v63 + v59 - 8), *(float32x4_t *)(v63 + v59))));
      v83 = *(float32x4_t *)(v67 + v59 - 4);
      v84 = vmlaq_f32(vmlaq_f32(vmulq_f32(v83, v65), v68, vaddq_f32(vaddq_f32(*(float32x4_t *)(v67 + v59 - 8), *(float32x4_t *)(v67 + v59)), vaddq_f32(*(float32x4_t *)(v64 + v59 - 4), *(float32x4_t *)(v70 + v59 - 4)))), v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v64 + v59 - 8), *(float32x4_t *)(v64 + v59)), vaddq_f32(*(float32x4_t *)(v70 + v59 - 8), *(float32x4_t *)(v70 + v59))));
      v85 = vld1q_dup_f32(v78);
      v86 = *(float32x4_t *)(v66 + v59 + 4);
      v4 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v66 + v59), *(float32x4_t *)(v66 + v59 + 8)), vaddq_f32(*(float32x4_t *)(v72 + v59 + 4), *(float32x4_t *)(v62 + v59 + 4)));
      v87 = vmaxnmq_f32(vmaxnmq_f32(vabsq_f32(vdivq_f32(vsubq_f32(v79, v82), v81)), v71), vabsq_f32(vdivq_f32(vsubq_f32(v83, v84), v85)));
      v88 = vmlaq_f32(vmlaq_f32(vmulq_f32(v86, v65), v68, v4), v69, vaddq_f32(vaddq_f32(*(float32x4_t *)(v72 + v59), *(float32x4_t *)(v72 + v59 + 8)), vaddq_f32(*(float32x4_t *)(v62 + v59), *(float32x4_t *)(v62 + v59 + 8))));
      v89 = vld1q_dup_f32(v80);
      v2 = vsubq_f32(v86, v88);
      v90 = vmaxnmq_f32(vmlaq_f32(_Q7, _Q6, vmaxnmq_f32(v87, vabsq_f32(vdivq_f32(v2, v89)))), (float32x4_t)0);
      *(float32x4_t *)(v75 + v59) = vmlaq_f32(v79, v90, vsubq_f32(v82, v79));
      v5 = vmlaq_f32(v83, v90, vsubq_f32(v84, v83));
      *(float32x4_t *)(v76 + v59) = v5;
      *(float32x4_t *)(v77 + v59) = vmlaq_f32(v86, v90, vsubq_f32(v88, v86));
      v91 = v45 + 8;
      v45 += 4;
      v77 += 16;
      v76 += 16;
      v75 += 16;
      v60 += 16;
      v61 += 16;
      v62 += 16;
      v63 += 16;
      v26 = **(_QWORD **)(v8 + 16) - 1;
      v64 += 16;
      v66 += 16;
      v67 += 16;
      v70 += 16;
      v72 += 16;
    }
    while (v91 <= v26);
  }
  if (v45 < v26)
  {
    v92 = 4 * v45;
    v93 = v12 + v13 + 4;
    v94 = v16 + 4;
    v95 = (float32x2_t)vdup_n_s32(0x3D561170u);
    v96 = (float32x2_t)vdup_n_s32(0x3E505590u);
    v97 = v12 + v16 + 4;
    v98 = (float32x2_t)vdup_n_s32(0x3D092563u);
    v99 = result + v15 - 4;
    v100 = result + 4;
    v101 = v12 + result + 4;
    result = v14 + v13 + 4;
    v102 = v16 + v15 - 4;
    v103 = v14 + v94;
    v104 = v14 + v100;
    v105 = v13 + v15 - 4;
    v106 = v45;
    do
    {
      v107 = **(const float ***)(v8 + 24);
      v2.i32[0] = *(_DWORD *)(v97 + v92 - 4);
      v108 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.f32, 0);
      v109 = v107 + 2;
      v110 = vld1_dup_f32(v107++);
      v4.i32[0] = *(_DWORD *)(v103 + v92 - 4);
      v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 0);
      v112 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v2.f32[0]), v96, (float)(*(float *)(v97 + 4 * v45 - 8) + *(float *)(v97 + 4 * v45))+ (float)(*(float *)(v93 + 4 * v45 - 4) + *(float *)(v101 + 4 * v45 - 4))), v98, (float)(*(float *)(v93 + 4 * v45 - 8) + *(float *)(v93 + 4 * v45))+ (float)(*(float *)(v101 + 4 * v45 - 8) + *(float *)(v101 + 4 * v45)));
      v113 = vld1_dup_f32(v107);
      *(float32x2_t *)v2.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v4.f32[0]), v96, (float)(*(float *)(v103 + 4 * v45 - 8) + *(float *)(v103 + 4 * v45))+ (float)(*(float *)(result + 4 * v45 - 4) + *(float *)(v104 + 4 * v45 - 4))), v98, (float)(*(float *)(result + 4 * v45 - 8) + *(float *)(result + 4 * v45))+ (float)(*(float *)(v104 + 4 * v45 - 8) + *(float *)(v104 + 4 * v45)));
      v5.i32[0] = *(_DWORD *)(v102 + v92 + 4);
      v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0);
      v115 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v5.f32[0]), v96, (float)(*(float *)(v102 + 4 * v45) + *(float *)(v102 + 4 * v45 + 8))+ (float)(*(float *)(v105 + 4 * v45 + 4) + *(float *)(v99 + 4 * v45 + 4))), v98, (float)(*(float *)(v105 + 4 * v45) + *(float *)(v105 + 4 * v45 + 8))+ (float)(*(float *)(v99 + 4 * v45) + *(float *)(v99 + 4 * v45 + 8)));
      v116 = vld1_dup_f32(v109);
      v117 = vmaxnm_f32(vmla_f32(_D1, _D0, vmaxnm_f32(vmaxnm_f32(vmaxnm_f32(vabs_f32(vdiv_f32(vsub_f32(v108, v112), v110)), (float32x2_t)0x3F0000003F000000), vabs_f32(vdiv_f32(vsub_f32(v111, *(float32x2_t *)v2.f32), v113))), vabs_f32(vdiv_f32(vsub_f32(v114, v115), v116)))), 0);
      *(_DWORD *)(v21 + 4 * v45) = vmla_f32(v108, v117, vsub_f32(v112, v108)).u32[0];
      *(_DWORD *)(v23 + 4 * v45) = vmla_f32(v111, v117, vsub_f32(*(float32x2_t *)v2.f32, v111)).u32[0];
      *(_DWORD *)(v25 + 4 * v45) = vmla_f32(v114, v117, vsub_f32(v115, v114)).u32[0];
      ++v106;
      v25 += 4;
      v23 += 4;
      v21 += 4;
      v93 += 4;
      v97 += 4;
      v99 += 4;
      v101 += 4;
      result += 4;
      v102 += 4;
      v103 += 4;
      v104 += 4;
      v105 += 4;
    }
    while (v106 < **(_QWORD **)(v8 + 16) - 1);
  }
  return result;
}

uint64_t sub_2367CB2D0(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL sub_2367CB2F4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(a1 + 20);
  v2 = *(unsigned int *)(a1 + 8);
  if (v1 == byte_236923AD4[v2]
    && (v3 = *(unsigned __int8 *)(a1 + 21), v3 == byte_236923AD8[v2])
    && (v4 = *(unsigned int *)(a1 + 16), v1 == byte_236923AD4[v4])
    && v3 == byte_236923AD8[v4]
    && (v5 = *(unsigned int *)(a1 + 12), v1 == byte_236923AD4[v5]))
  {
    return v3 == byte_236923AD8[v5];
  }
  else
  {
    return 0;
  }
}

uint64_t sub_2367CB36C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t i;
  uint64_t j;
  _BYTE v17[16];
  uint64_t v18;
  _QWORD v19[12];
  _BYTE v20[120];
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD v25[2];
  unsigned int **v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v24 = a1;
  v4 = *a2;
  v3 = a2[1];
  v22 = v4;
  if (v3 < 3 || v4 < 3)
    return 0;
  sub_2367CA770((uint64_t)v20, v4, v3);
  result = v21;
  if (!v21)
  {
    sub_2367CA9E4((uint64_t)v17, (uint64_t)v20);
    v9 = 0;
    v10 = 4 * v4;
    do
    {
      v11 = 0;
      v26 = 0;
      v27 = (_BYTE *)(v3 - 1);
      do
      {
        memcpy((void *)(v19[5 * v9] + v18 * (_QWORD)(&v26)[v11]), (const void *)(*(_QWORD *)&a2[10 * v9 + 6] + *((_QWORD *)a2 + 2) * (_QWORD)(&v26)[v11]), v10);
        ++v11;
      }
      while (v11 != 2);
      ++v9;
    }
    while (v9 != 3);
    v26 = &v23;
    v27 = v17;
    v28 = &v22;
    v29 = &v24;
    v12 = (v3 - 1);
    if (a3)
    {
      sub_2367CAAA8(a3, v12, (uint64_t)&v26);
    }
    else
    {
      v25[0] = 0;
      v25[1] = v25;
      sub_2367CAAA8((uint64_t)v25, v12, (uint64_t)&v26);
    }
    v13 = 0;
    v14 = v23;
    do
    {
      sub_2367F6750((int *)&v17[v13 * 4], (int *)&v14[v13]);
      v13 += 10;
    }
    while (v13 != 30);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)&v17[i]);
    if (!v21)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v20[j]);
    }
    return 0;
  }
  return result;
}

void sub_2367CB540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  uint64_t i;
  uint64_t j;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(&a11 + i));
  if (!a41)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a26 + j));
  }
  _Unwind_Resume(a1);
}

void sub_2367CB594(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, uint64_t a7, int **a8, float a9)
{
  unint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  int32x4_t *v31;
  int32x4_t *v32;
  int32x4_t *v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  float32x4_t *v55;
  int32x4_t *v56;
  int32x4_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int *v67;
  int *v68;
  char v69;
  int v70;
  int *v71;
  int *v72;
  char v73;
  int *v74;
  int v75;
  int *v76;
  int *v77;
  char v78;
  int *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (sub_2367CB2F4(a7))
  {
    v18 = a1[3];
    if (v18)
    {
      v19 = 0;
      v20 = *a5 * a9;
      v21 = a5[1] * a9;
      v22 = a5[2] * a9;
      v23 = *a6;
      v24 = a6[2];
      v25 = a1[2];
      do
      {
        if (v25)
        {
          v26 = 0;
          v27 = a2[2] * (a1[1] + v19) + 4 * *a1;
          v28 = (float32x4_t *)(a2[13] + v27);
          v29 = (float32x4_t *)(a2[3] + v27);
          v30 = (float32x4_t *)(a2[8] + v27);
          v31 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)a4 + 152) + *(_QWORD *)(*(_QWORD *)a4 + 144) * v19);
          v32 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + *(_QWORD *)(*(_QWORD *)a4 + 16) * v19);
          v33 = (int32x4_t *)(*(_QWORD *)(*(_QWORD *)a4 + 88) + *(_QWORD *)(*(_QWORD *)a4 + 80) * v19);
          do
          {
            v34 = *v33++;
            v35 = v34;
            v36 = *v32++;
            v37 = v36;
            v38 = *v31++;
            v39 = vmulq_n_f32(vcvtq_f32_s32(v37), v21);
            *v30++ = v39;
            *v29++ = vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_s32(v35), v20), v39, v23);
            *v28++ = vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_s32(v38), v22), v39, v24);
            v26 += 4;
            v25 = a1[2];
          }
          while (v26 < v25);
          v18 = a1[3];
        }
        ++v19;
      }
      while (v19 < v18);
    }
  }
  else
  {
    v40 = 0;
    v81 = 1;
    v82 = 2;
    do
    {
      v41 = *((int *)&v81 + v40);
      v42 = *(unsigned int *)(a7 + 4 * v41 + 8);
      v43 = *(_BYTE *)(a7 + 21) - byte_236923AD8[v42];
      v44 = a1[3] >> v43;
      if (v44)
      {
        v45 = 0;
        v46 = *(_BYTE *)(a7 + 20) - byte_236923AD4[v42];
        v47 = *a1 >> v46;
        v48 = a1[1] >> v43;
        v49 = a1[2] >> v46;
        v50 = *(_QWORD *)a4 + (((v41 < 2) ^ v41) << 6);
        v51 = a5[v41] * a9;
        v52 = &a2[5 * (int)v41 + 3];
        v53 = 4 * v47;
        do
        {
          if (v49)
          {
            v54 = 0;
            v55 = (float32x4_t *)(*v52 + v53 + a2[2] * v48);
            v56 = (int32x4_t *)(*(_QWORD *)(v50 + 24) + *(_QWORD *)(v50 + 16) * v45);
            do
            {
              v57 = *v56++;
              *v55++ = vmulq_n_f32(vcvtq_f32_s32(v57), v51);
              v54 += 4;
            }
            while (v54 < v49);
          }
          ++v45;
          ++v48;
        }
        while (v45 != v44);
      }
      ++v40;
    }
    while (v40 != 3);
    v18 = a1[3];
  }
  if ((unint64_t)a8[16] >= 2)
  {
    if (v18)
    {
      v59 = 0;
      v60 = a1[2];
      do
      {
        if (v60)
        {
          v61 = 0;
          v62 = *(_BYTE *)(a7 + 21);
          v63 = *(_QWORD *)(*(_QWORD *)a4 + 88)
              + (v59 >> (v62 - byte_236923AD8[*(unsigned int *)(a7 + 8)])) * *(_QWORD *)(*(_QWORD *)a4 + 80);
          v64 = *(_QWORD *)(*(_QWORD *)a4 + 24)
              + (v59 >> (v62 - byte_236923AD8[*(unsigned int *)(a7 + 12)])) * *(_QWORD *)(*(_QWORD *)a4 + 16);
          v65 = *(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 16) * (a1[1] + v59) + *a1;
          v66 = *(_QWORD *)(*(_QWORD *)a4 + 152)
              + (v59 >> (v62 - byte_236923AD8[*(unsigned int *)(a7 + 16)])) * *(_QWORD *)(*(_QWORD *)a4 + 144);
          do
          {
            v68 = *a8;
            v67 = a8[1];
            if (*a8 == v67)
            {
              v69 = 0;
            }
            else
            {
              v69 = 0;
              do
              {
                v70 = *v68++;
                if (*(_DWORD *)(v63 + 4 * (v61 >> (*(_BYTE *)(a7 + 20) - byte_236923AD4[*(unsigned int *)(a7 + 8)]))) > v70)
                  ++v69;
              }
              while (v68 != v67);
            }
            v72 = a8[3];
            v71 = a8[4];
            if (v72 == v71)
            {
              v73 = 0;
            }
            else
            {
              v73 = 0;
              v74 = a8[3];
              do
              {
                v75 = *v74++;
                if (*(_DWORD *)(v64 + 4 * (v61 >> (*(_BYTE *)(a7 + 20) - byte_236923AD4[*(unsigned int *)(a7 + 12)]))) > v75)
                  ++v73;
              }
              while (v74 != v71);
            }
            v76 = a8[6];
            v77 = a8[7];
            if (v76 == v77)
            {
              v78 = 0;
            }
            else
            {
              v78 = 0;
              v79 = a8[6];
              do
              {
                v80 = *v79++;
                if (*(_DWORD *)(v66 + 4 * (v61 >> (*(_BYTE *)(a7 + 20) - byte_236923AD4[*(unsigned int *)(a7 + 16)]))) > v80)
                  ++v78;
              }
              while (v79 != v77);
            }
            *(_BYTE *)(v65 + v61++) = v78
                                    + v69
                                    + v69 * (((_DWORD)v77 - (_DWORD)v76) >> 2)
                                    + (v78 + v69 + v69 * (((_DWORD)v77 - (_DWORD)v76) >> 2))
                                    * (((_DWORD)v71 - (_DWORD)v72) >> 2)
                                    + v73;
            v60 = a1[2];
          }
          while (v61 < v60);
          v18 = a1[3];
        }
        ++v59;
      }
      while (v59 < v18);
    }
  }
  else if (v18)
  {
    v58 = 0;
    do
    {
      bzero((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 16) * (v58 + a1[1]) + *a1), a1[2]);
      ++v58;
    }
    while (v58 < a1[3]);
  }
}

void sub_2367CB9E4()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367CB9F8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;

  v4 = (unsigned __int8 *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 8);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *v4))
    {
      return 0;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x80000200800000E0, 0x10E80001000, 224, a1 + 12);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000480000003, 0x127000000A1, 3, a1 + 16);
    }
  }
  return result;
}

void sub_2367CBAC8(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      v23 = &v5[4 * (a2 - v7)];
      v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62)
        sub_2367C3440();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 1;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)sub_2367C3454(v12);
      v15 = &v13[4 * v7];
      v16 = &v13[4 * a2];
      v17 = 4 * a2 - 4 * v7;
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      v19 = &v13[4 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 4)
      {
        v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void sub_2367CBBE0(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[4 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v16 = &v3[4 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 62)
    sub_2367C3440();
  v8 = v7 - v4;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 62)
    sub_2367C3488();
  v11 = (char *)operator new(4 * v10);
  v12 = &v11[4 * v5];
  v13 = &v11[4 * v10];
  bzero(v12, 4 * v6);
  v14 = &v12[4 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *((_DWORD *)v12 - 1) = v15;
      v12 -= 4;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

uint64_t sub_2367CBCF0(uint64_t result, uint64_t a2, unint64_t a3)
{
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (unsigned int *)(*(_QWORD *)(result + 32) + 16 * a2);
  if (*(_BYTE *)(result + 96) && *(_QWORD *)(result + 128) != a2)
  {
    v4 = *(unsigned int *)(result + 100);
    v5 = a3 >= v4;
    v6 = a3 - v4;
    if (v5)
      v3 = (unsigned int *)(result + 108);
    if (v5)
      a3 = v6;
  }
  v7 = *v3;
  v8 = v3[1];
  v5 = a3 >= v8;
  v9 = a3 - v8;
  if (v5)
  {
    v10 = v3[2] + (unint64_t)v3[3];
    v7 = v10 + (_DWORD)v7 - (_DWORD)v10 + (v9 >> v10) + 1;
  }
  v11 = *(_QWORD *)(result + 136);
  if (v11 <= v7)
    v11 = v7;
  *(_QWORD *)(result + 136) = v11;
  return result;
}

uint64_t sub_2367CBD5C(unint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (_QWORD *)a1[2];
  if ((unint64_t)v2 > a1[3])
  {
    sub_2367C5188(a1);
    v4 = *a1;
    v5 = a1[1];
  }
  else
  {
    v3 = a1[1];
    v4 = *a1 | (*v2 << v3);
    a1[2] = (unint64_t)v2 + ((63 - v3) >> 3);
    v5 = v3 | 0x38;
  }
  v6 = v5 - 1;
  *a1 = v4 >> 1;
  a1[1] = v5 - 1;
  if ((v4 & 1) == 0)
    return 0;
  v8 = (_QWORD *)a1[2];
  if ((unint64_t)v8 > a1[3])
  {
    sub_2367C5188(a1);
    v9 = *a1;
    v10 = a1[1];
  }
  else
  {
    v9 = (*v8 << v6) | (v4 >> 1);
    a1[2] = (unint64_t)v8 + ((unint64_t)(64 - v5) >> 3);
    v10 = v6 | 0x38;
  }
  v11 = v10 - 3;
  *a1 = v9 >> 3;
  a1[1] = v10 - 3;
  v12 = v9 & 7;
  if ((v9 & 7) == 0)
    return 1;
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 > a1[3])
  {
    sub_2367C5188(a1);
    v14 = *a1;
    v15 = a1[1];
  }
  else
  {
    v14 = (*v13 << v11) | (v9 >> 3);
    a1[2] = (unint64_t)v13 + ((unint64_t)(66 - v10) >> 3);
    v15 = v11 | 0x38;
  }
  *a1 = v14 >> v12;
  a1[1] = v15 - v12;
  return (1 << v12) + (v14 & ~(-1 << v12));
}

_QWORD *sub_2367CBE88(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C3404(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2367CBEE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2367CBEFC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367C3404(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2367CBF58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367CBF74(uint64_t a1, _DWORD *a2, unint64_t *a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v7 = (_QWORD *)a3[2];
  v6 = a3[3];
  if ((unint64_t)v7 > v6)
  {
    sub_2367C5188(a3);
    v10 = (_QWORD *)a3[2];
    v6 = a3[3];
  }
  else
  {
    v8 = a3[1];
    v9 = *a3 | (*v7 << v8);
    v10 = (_QWORD *)((char *)v7 + ((63 - v8) >> 3));
    *a3 = v9;
    a3[1] = v8 | 0x38;
    a3[2] = (unint64_t)v10;
  }
  v11 = __clz(a1 + 1) ^ 0x3F;
  if (((a1 + 1) & a1) != 0)
    v12 = v11 + 1;
  else
    v12 = v11;
  if ((unint64_t)v10 > v6)
  {
    sub_2367C5188(a3);
    v14 = *a3;
    v15 = a3[1];
  }
  else
  {
    v13 = a3[1];
    v14 = *a3 | (*v10 << v13);
    a3[2] = (unint64_t)v10 + ((63 - v13) >> 3);
    v15 = v13 | 0x38;
  }
  v16 = v14 & ~(-1 << v12);
  v17 = v15 - v12;
  v18 = v14 >> v12;
  *a3 = v14 >> v12;
  a3[1] = v17;
  if (v16 == a1)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v21 = __clz(v16 + 1);
    v22 = v21 ^ 0x3F;
    v23 = 64 - v21;
    if (((v16 + 1) & v16) != 0)
      v24 = v23;
    else
      v24 = v22;
    v25 = (_QWORD *)a3[2];
    if ((unint64_t)v25 > a3[3])
    {
      sub_2367C5188(a3);
      v26 = *a3;
      v27 = a3[1];
    }
    else
    {
      v26 = (*v25 << v17) | v18;
      a3[2] = (unint64_t)v25 + ((63 - v17) >> 3);
      v27 = v17 | 0x38;
    }
    v20 = v26 & ~(-1 << v24);
    v28 = v27 - v24;
    v29 = v26 >> v24;
    *a3 = v29;
    a3[1] = v27 - v24;
    v30 = v16 - v20;
    if (v16 < v20)
      return 1;
    v32 = __clz(v30 + 1) ^ 0x3F;
    if (((v30 + 1) & v30) != 0)
      v33 = v32 + 1;
    else
      v33 = v32;
    v34 = (_QWORD *)a3[2];
    if ((unint64_t)v34 > a3[3])
    {
      v37 = v33;
      sub_2367C5188(a3);
      v33 = v37;
      v35 = *a3;
      v36 = a3[1];
    }
    else
    {
      v35 = (*v34 << v28) | v29;
      a3[2] = (unint64_t)v34 + ((unint64_t)(63 - v28) >> 3);
      v36 = v28 | 0x38;
    }
    v19 = v35 & ~(-1 << v33);
    *a3 = v35 >> v33;
    a3[1] = v36 - v33;
  }
  result = 1;
  if (v20 + v19 <= v16)
  {
    *a2 = v16;
    a2[1] = 1 << v16;
    a2[2] = v20;
    a2[3] = v19;
    return 0;
  }
  return result;
}

uint64_t sub_2367CC178(unint64_t *a1, unint64_t a2, uint64_t a3, unint64_t *a4, char a5)
{
  uint64_t v7;
  uint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  size_t v38;
  char *v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int i;
  _QWORD *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  char *v81;
  int v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  void *v88;
  _DWORD *v89;
  unint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  int v102;
  int v103;
  BOOL v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  _BOOL4 v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  _DWORD *v116;
  _DWORD *v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  _WORD *v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  unsigned __int16 v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  unsigned __int16 v185;
  int v186;
  int v187;
  uint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v194;
  __int16 v195;
  BOOL v196;
  unsigned int v197;
  uint64_t v199;
  unsigned __int8 v200;
  int v201;
  int v202;
  int v203;
  _QWORD *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  char *v222;
  size_t v223;
  int v224;
  int v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  _QWORD *v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  __int16 v234;
  char *v235;
  uint64_t j;
  uint64_t v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unsigned int v242;
  unsigned int v243;
  __int16 v244;
  __int16 v245;
  __int16 v246;
  __int16 v247;
  __int16 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int v254;
  __int16 v255;
  __int16 v256;
  __int16 v257;
  __int16 v258;
  __int16 v259;
  __int16 v260;
  __int16 v261;
  __int16 v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  _DWORD *v267;
  uint64_t v268;
  _DWORD *v269;
  unsigned int v270;
  unint64_t v271;
  char **v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  int v276;
  unint64_t __src;
  char *__srca;
  _BYTE *__srcb;
  uint64_t v280;
  unint64_t v281;
  void *v282;
  void *v283;
  uint64_t v284;
  void *v285[2];
  uint64_t v286;
  _QWORD v287[2];
  __int16 v288;
  void *__p[2];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;

  v7 = a3;
  v293 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2367F232C((uint64_t)a1, a3 + 88);
  if ((_DWORD)v10)
    return v10;
  if (*(_BYTE *)(v7 + 96))
  {
    v10 = sub_2367CBF74(8, (_DWORD *)(v7 + 108), a1);
    if ((_DWORD)v10)
      return v10;
    ++a2;
    if (*(_BYTE *)(v7 + 96))
    {
      if ((a5 & 1) != 0)
        return 1;
    }
  }
  v281 = 1;
  v12 = a4[1] - *a4;
  if (a2 <= v12)
  {
    if (a2 < v12)
      a4[1] = *a4 + a2;
  }
  else
  {
    sub_2367C8698(a4, a2 - v12);
  }
  if (a2 >= 2)
  {
    v10 = sub_2367D0978((void **)a4, &v281, a1);
    if ((_DWORD)v10)
      return v10;
  }
  *(_QWORD *)(v7 + 128) = *(unsigned __int8 *)(a4[1] - 1);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 > a1[3])
  {
    sub_2367C5188(a1);
    v15 = *a1;
    v16 = a1[1];
  }
  else
  {
    v14 = a1[1];
    v15 = *a1 | (*v13 << v14);
    a1[2] = (unint64_t)v13 + ((63 - v14) >> 3);
    v16 = v14 | 0x38;
  }
  v17 = v16 - 1;
  *a1 = v15 >> 1;
  a1[1] = v16 - 1;
  *(_BYTE *)(v7 + 80) = v15 & 1;
  if ((v15 & 1) != 0)
  {
    v21 = 15;
  }
  else
  {
    v18 = (_QWORD *)a1[2];
    if ((unint64_t)v18 > a1[3])
    {
      sub_2367C5188(a1);
      v19 = *a1;
      v20 = a1[1];
    }
    else
    {
      v19 = (*v18 << v17) | (v15 >> 1);
      a1[2] = (unint64_t)v18 + ((unint64_t)(64 - v16) >> 3);
      v20 = v17 | 0x38;
    }
    *a1 = v19 >> 2;
    a1[1] = v20 - 2;
    v21 = (v19 & 3) + 5;
  }
  *(_BYTE *)(v7 + 81) = v21;
  v22 = v281;
  sub_2367CD780((void **)(v7 + 32), v281);
  v23 = *(unsigned __int8 *)(v7 + 81);
  v25 = *(_DWORD **)(v7 + 32);
  v24 = *(_DWORD **)(v7 + 40);
  if (v25 != v24)
  {
    do
    {
      if (sub_2367CBF74(v23, v25, a1))
        return 1;
      v25 += 4;
    }
    while (v25 != v24);
    LOBYTE(v23) = *(_BYTE *)(v7 + 81);
  }
  LODWORD(v291) = -1;
  v274 = (_QWORD *)(v7 + 56);
  sub_2367CBAC8((char **)(v7 + 56), v22, &v291);
  __src = 1 << v23;
  v280 = v7;
  v273 = v22;
  if (!*(_BYTE *)(v7 + 80))
  {
    v45 = 8 * v22 * (1 << *(_BYTE *)(v7 + 81));
    do
      v46 = __ldxr((unsigned int *)&unk_2564313C0);
    while (__stxr(v46 + 1, (unsigned int *)&unk_2564313C0));
    v47 = sub_2368AAD08(v45, (v46 & 0xF) << 7);
    v48 = *(_QWORD *)v7;
    *(_QWORD *)v7 = v47;
    if (v48)
    {
      v49 = -*(_QWORD *)(v48 - 24);
      do
        v50 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v50 + v49, &qword_2564313D8));
      free(*(void **)(v48 - 32));
      v51 = *(_QWORD *)v7;
    }
    else
    {
      v51 = v47;
    }
    if (!v22)
      return 0;
    v56 = 0;
    v271 = v51;
    while (1)
    {
      v285[0] = 0;
      v285[1] = 0;
      v286 = 0;
      v57 = (_QWORD *)a1[2];
      if ((unint64_t)v57 > a1[3])
      {
        sub_2367C5188(a1);
        v59 = *a1;
        v60 = a1[1];
      }
      else
      {
        v58 = a1[1];
        v59 = *a1 | (*v57 << v58);
        a1[2] = (unint64_t)v57 + ((63 - v58) >> 3);
        v60 = v58 | 0x38;
        *a1 = v59;
        a1[1] = v58 | 0x38;
      }
      v61 = v60 - 1;
      v62 = v59 >> 1;
      *a1 = v59 >> 1;
      a1[1] = v60 - 1;
      if ((v59 & 1) == 0)
        break;
      *(_QWORD *)&v291 = 0;
      v73 = (_QWORD *)a1[2];
      if ((unint64_t)v73 > a1[3])
      {
        sub_2367C5188(a1);
        v74 = *a1;
        v76 = a1[1];
      }
      else
      {
        v74 = (*v73 << v61) | v62;
        v75 = (char *)v73 + ((unint64_t)(64 - v60) >> 3);
        v76 = v61 | 0x38;
        *a1 = v74;
        a1[1] = v61 | 0x38;
        a1[2] = (unint64_t)v75;
      }
      v77 = 0;
      v78 = 0;
      *a1 = v74 >> 1;
      a1[1] = v76 - 1;
      do
      {
        v79 = sub_2367CBD5C(a1);
        *(_DWORD *)((char *)&v291 + v77) = v79;
        if (v79 > v78)
          v78 = v79;
        v77 += 4;
      }
      while (4 * (v74 & 1) + 4 != v77);
      sub_2367C5284((char **)v285, v78 + 1);
      v51 = v271;
      v80 = (int)v291;
      if ((v74 & 1) == 0)
      {
        v81 = (char *)v285[0];
        *((_DWORD *)v285[0] + (int)v291) = 4096;
        goto LABEL_135;
      }
      v105 = SDWORD1(v291);
      if ((_DWORD)v291 == DWORD1(v291))
        goto LABEL_168;
      v106 = (_QWORD *)a1[2];
      if ((unint64_t)v106 > a1[3])
      {
        sub_2367C5188(a1);
        v108 = *a1;
        v109 = a1[1];
      }
      else
      {
        v107 = a1[1];
        v108 = *a1 | (*v106 << v107);
        a1[2] = (unint64_t)v106 + ((63 - v107) >> 3);
        v109 = v107 | 0x38;
        *a1 = v108;
        a1[1] = v107 | 0x38;
      }
      *a1 = v108 >> 12;
      a1[1] = v109 - 12;
      v110 = v108 & 0xFFF;
      v81 = (char *)v285[0];
      *((_DWORD *)v285[0] + v80) = v110;
      *(_DWORD *)&v81[4 * v105] = 4096 - v110;
LABEL_135:
      v132 = (char *)v285[1];
      if (__src < ((char *)v285[1] - (char *)v81) >> 2)
      {
LABEL_168:
        if (v285[0])
          operator delete(v285[0]);
        return 1;
      }
      if (v81 == v285[1])
      {
        v135 = 0;
        v136 = 0;
LABEL_142:
        v132 = v81;
      }
      else
      {
        v133 = (char *)v285[1];
        while (1)
        {
          v134 = *((_DWORD *)v133 - 1);
          v133 -= 4;
          if (v134)
            break;
          v132 = v133;
          if (v133 == v81)
          {
            v135 = 0;
            v136 = 0;
            v285[1] = v81;
            goto LABEL_142;
          }
        }
        v285[1] = v132;
        v137 = v132 - v81;
        v135 = (v132 - v81) >> 2;
        if (v132 != v81)
        {
          v138 = 0;
          if (v135 <= 1)
            v139 = 1;
          else
            v139 = (v132 - v81) >> 2;
          do
          {
            if (*(_DWORD *)&v81[4 * v138])
              sub_2367CBCF0(v280, v56, v138);
            ++v138;
          }
          while (v139 != v138);
        }
        v136 = (v137 >> 2) - 1;
        if (v136 < 1)
        {
          v22 = v273;
        }
        else
        {
          v140 = v81;
          v141 = (v137 >> 2) - 1;
          v22 = v273;
          while (1)
          {
            v142 = *(_DWORD *)v140;
            v140 += 4;
            if (v142)
              break;
            if (!--v141)
              goto LABEL_143;
          }
          v136 = -1;
        }
      }
LABEL_143:
      *(_DWORD *)(*v274 + 4 * v56) = v136;
      v283 = 0;
      v284 = 0;
      v282 = 0;
      sub_2367CBEFC(&v282, v81, (uint64_t)v132, v135);
      sub_2367C3524((_DWORD **)&v282, *(_BYTE *)(v280 + 81), v51 + 8 * v56 * (1 << *(_BYTE *)(v280 + 81)));
      if (v282)
      {
        v283 = v282;
        operator delete(v282);
      }
      if (v285[0])
        operator delete(v285[0]);
      if (++v56 == v22)
        return 0;
    }
    v63 = (_QWORD *)a1[2];
    if ((unint64_t)v63 > a1[3])
    {
      sub_2367C5188(a1);
      v64 = *a1;
      v65 = a1[1];
    }
    else
    {
      v64 = (*v63 << v61) | v62;
      a1[2] = (unint64_t)v63 + ((unint64_t)(64 - v60) >> 3);
      v65 = v61 | 0x38;
      *a1 = v64;
      a1[1] = v61 | 0x38;
    }
    v66 = v65 - 1;
    v67 = v64 >> 1;
    *a1 = v64 >> 1;
    a1[1] = v66;
    if ((v64 & 1) != 0)
    {
      v82 = sub_2367CBD5C(a1);
      sub_2367C331C(&v291, v82 + 1);
      *(_OWORD *)v285 = v291;
      v286 = v292;
      v81 = (char *)v291;
      goto LABEL_135;
    }
    for (i = 0; i != 3; ++i)
    {
      v69 = (_QWORD *)a1[2];
      if ((unint64_t)v69 > a1[3])
      {
        sub_2367C5188(a1);
        v70 = *a1;
        v72 = a1[1];
      }
      else
      {
        v70 = (*v69 << v66) | v67;
        v71 = (char *)v69 + ((unint64_t)(63 - v66) >> 3);
        v72 = v66 | 0x38;
        *a1 = v70;
        a1[1] = v66 | 0x38;
        a1[2] = (unint64_t)v71;
      }
      v66 = v72 - 1;
      v67 = v70 >> 1;
      *a1 = v70 >> 1;
      a1[1] = v72 - 1;
      if ((v70 & 1) == 0)
        break;
    }
    v83 = (_QWORD *)a1[2];
    if ((unint64_t)v83 > a1[3])
    {
      sub_2367C5188(a1);
      v84 = *a1;
      v85 = a1[1];
    }
    else
    {
      v84 = (*v83 << v66) | v67;
      v85 = v66 | 0x38;
      *a1 = v84;
      a1[1] = v85;
      a1[2] = (unint64_t)v83 + ((unint64_t)(64 - v72) >> 3);
    }
    *a1 = v84 >> i;
    a1[1] = v85 - i;
    v270 = (1 << i) | v84 & ~(-1 << i);
    if (v270 > 0xE)
      goto LABEL_168;
    v86 = sub_2367CBD5C(a1);
    sub_2367C5284((char **)v285, v86 + 3);
    v87 = ((char *)v285[1] - (char *)v285[0]) >> 2;
    sub_2367CBE88(&v291, v87);
    LODWORD(v287[0]) = 0;
    sub_2367C3384(__p, v87, v287);
    v88 = (void *)*((_QWORD *)&v291 + 1);
    v89 = (_DWORD *)v291;
    if (*((_QWORD *)&v291 + 1) == (_QWORD)v291)
    {
      v111 = 1;
      goto LABEL_129;
    }
    v268 = *((_QWORD *)&v291 + 1);
    v90 = 0;
    v91 = __p[0];
    v92 = (uint64_t)(*((_QWORD *)&v291 + 1) - v291) >> 2;
    v93 = 0xFFFFFFFFLL;
    v94 = -1;
    do
    {
      v95 = (_QWORD *)a1[2];
      if ((unint64_t)v95 > a1[3])
      {
        sub_2367C5188(a1);
        v97 = *a1;
        v98 = a1[1];
      }
      else
      {
        v96 = a1[1];
        v97 = *a1 | (*v95 << v96);
        a1[2] = (unint64_t)v95 + ((63 - v96) >> 3);
        v98 = v96 | 0x38;
        *a1 = v97;
        a1[1] = v96 | 0x38;
      }
      v99 = v97 & 0x7F;
      v100 = (unsigned __int8 *)&unk_23691FBAB + 2 * v99;
      v101 = *v100;
      *a1 = v97 >> v101;
      a1[1] = v98 - v101;
      v102 = v100[1];
      v89[v90] = v102;
      if (v99 == 65)
      {
        v103 = sub_2367CBD5C(a1);
        v91[v90] = v103 + 5;
        v90 += v103 + 3;
      }
      else
      {
        v104 = v94 < v102;
        if (v94 <= v102)
          v94 = v102;
        if (v104)
          v93 = v90;
      }
      ++v90;
    }
    while (v90 < v92);
    if ((v93 & 0x80000000) != 0 || v93 + 1 < v92 && v89[v93 + 1] == 4097)
    {
      v111 = 1;
      goto LABEL_128;
    }
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v116 = v285[0];
    v117 = __p[0];
    v118 = *((_QWORD *)&v291 + 1);
    v119 = (_DWORD *)v291;
    v120 = v268;
    while (1)
    {
      v121 = v117[v112];
      if (v121)
      {
        v113 = v121 - 1;
        if (v112)
          v114 = v116[v112 - 1];
        else
          v114 = 0;
      }
      if (v113 < 1)
      {
        if (v93 == v112)
          goto LABEL_125;
        v122 = v89[v112];
        if (!v122)
          goto LABEL_125;
        v123 = v120;
        v124 = v122 - 1;
        if (v122 != 1)
        {
          v125 = v270 + ~((13 - v122) >> 1);
          if (v125 >= v124)
            v126 = v124;
          else
            v126 = v125;
          v127 = (_QWORD *)a1[2];
          if ((unint64_t)v127 > a1[3])
          {
            v267 = v119;
            v269 = v117;
            v131 = v118;
            v266 = v126;
            sub_2367C5188(a1);
            v126 = v266;
            v119 = v267;
            v117 = v269;
            v118 = v131;
            v129 = *a1;
            v130 = a1[1];
            v89 = v267;
            v123 = v118;
          }
          else
          {
            v128 = a1[1];
            v129 = *a1 | (*v127 << v128);
            a1[2] = (unint64_t)v127 + ((63 - v128) >> 3);
            v130 = v128 | 0x38;
            *a1 = v129;
            a1[1] = v128 | 0x38;
          }
          *a1 = v129 >> (v126 & ~(v126 >> 31));
          a1[1] = v130 - (v126 & ~(v126 >> 31));
          v122 = (1 << v124)
               + ((unint64_t)(v129 & ~(-1 << (v126 & ~(v126 >> 31)))) << (v124 - (v126 & ~(v126 >> 31))));
        }
        v116[v112] = v122;
        v120 = v123;
      }
      else
      {
        v116[v112] = v114;
        v122 = v114;
        --v113;
      }
      v115 += v122;
LABEL_125:
      if (++v112 >= (unint64_t)((v120 - (uint64_t)v89) >> 2))
      {
        v116[v93] = 4096 - v115;
        v111 = v115 > 4095;
LABEL_128:
        v88 = v89;
        v51 = v271;
        v22 = v273;
LABEL_129:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
          v88 = (void *)v291;
        }
        if (v88)
        {
          *((_QWORD *)&v291 + 1) = v88;
          operator delete(v88);
        }
        if (!v111)
        {
          v81 = (char *)v285[0];
          goto LABEL_135;
        }
        goto LABEL_168;
      }
    }
  }
  v26 = *(_QWORD **)(v7 + 8);
  v27 = *(_QWORD **)(v7 + 16);
  v28 = 0xAAAAAAAAAAAAAAABLL * (v27 - v26);
  v29 = v22 - v28;
  if (v22 <= v28)
  {
    if (v22 < v28)
    {
      v52 = &v26[3 * v22];
      if (v27 != v52)
      {
        v53 = *(_QWORD **)(v7 + 16);
        do
        {
          v55 = (void *)*(v53 - 3);
          v53 -= 3;
          v54 = v55;
          if (v55)
          {
            *(v27 - 2) = v54;
            operator delete(v54);
          }
          v27 = v53;
        }
        while (v53 != v52);
      }
      *(_QWORD *)(v7 + 16) = v52;
    }
  }
  else
  {
    v30 = *(_QWORD *)(v7 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v27) >> 3) >= v29)
    {
      bzero(*(void **)(v7 + 16), 24 * ((24 * v29 - 24) / 0x18) + 24);
      *(_QWORD *)(v7 + 16) = &v27[3 * ((24 * v29 - 24) / 0x18) + 3];
      sub_2367CA014(&v282, v22);
      goto LABEL_174;
    }
    if (v22 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3440();
    v31 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v26) >> 3);
    v32 = 2 * v31;
    if (2 * v31 <= v22)
      v32 = v22;
    if (v31 >= 0x555555555555555)
      v33 = 0xAAAAAAAAAAAAAAALL;
    else
      v33 = v32;
    if (v33 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3488();
    v34 = 3 * v33;
    v35 = (char *)operator new(24 * v33);
    v36 = &v35[8 * (v27 - v26)];
    v37 = &v35[8 * v34];
    v38 = 24 * ((24 * v29 - 24) / 0x18) + 24;
    bzero(v36, v38);
    v39 = &v36[v38];
    if (v27 == v26)
    {
      *(_QWORD *)(v7 + 8) = v36;
      *(_QWORD *)(v7 + 16) = v39;
      *(_QWORD *)(v7 + 24) = v37;
    }
    else
    {
      do
      {
        *((_QWORD *)v36 - 3) = 0;
        *((_QWORD *)v36 - 2) = 0;
        v36 -= 24;
        *((_QWORD *)v36 + 2) = 0;
        v40 = *(_OWORD *)(v27 - 3);
        v27 -= 3;
        *(_OWORD *)v36 = v40;
        *((_QWORD *)v36 + 2) = v27[2];
        *v27 = 0;
        v27[1] = 0;
        v27[2] = 0;
      }
      while (v27 != v26);
      v41 = *(_QWORD **)(v7 + 8);
      v27 = *(_QWORD **)(v7 + 16);
      *(_QWORD *)(v7 + 8) = v36;
      *(_QWORD *)(v7 + 16) = v39;
      *(_QWORD *)(v7 + 24) = v37;
      if (v27 != v41)
      {
        v42 = v27;
        do
        {
          v44 = (void *)*(v42 - 3);
          v42 -= 3;
          v43 = v44;
          if (v44)
          {
            *(v27 - 2) = v43;
            operator delete(v43);
          }
          v27 = v42;
        }
        while (v42 != v41);
        v27 = v41;
      }
    }
    if (v27)
      operator delete(v27);
  }
  sub_2367CA014(&v282, v22);
  if (!v22)
  {
LABEL_313:
    v160 = 0;
    v10 = 1;
    goto LABEL_317;
  }
LABEL_174:
  v143 = 0;
  v144 = v282;
  do
  {
    v145 = (_QWORD *)a1[2];
    if ((unint64_t)v145 > a1[3])
    {
      sub_2367C5188(a1);
      v147 = *a1;
      v148 = a1[1];
    }
    else
    {
      v146 = a1[1];
      v147 = *a1 | (*v145 << v146);
      a1[2] = (unint64_t)v145 + ((63 - v146) >> 3);
      v148 = v146 | 0x38;
    }
    v149 = v148 - 1;
    *a1 = v147 >> 1;
    a1[1] = v148 - 1;
    if ((v147 & 1) != 0)
    {
      v151 = (_QWORD *)a1[2];
      if ((unint64_t)v151 > a1[3])
      {
        sub_2367C5188(a1);
        v152 = *a1;
        v153 = a1[1];
      }
      else
      {
        v152 = (*v151 << v149) | (v147 >> 1);
        a1[2] = (unint64_t)v151 + ((unint64_t)(64 - v148) >> 3);
        v153 = v149 | 0x38;
      }
      v154 = v153 - 4;
      *a1 = v152 >> 4;
      a1[1] = v153 - 4;
      v155 = v152 & 0xF;
      if ((v152 & 0xF) != 0)
      {
        v156 = (_QWORD *)a1[2];
        if ((unint64_t)v156 > a1[3])
        {
          sub_2367C5188(a1);
          v157 = *a1;
          v158 = a1[1];
        }
        else
        {
          v157 = (*v156 << v154) | (v152 >> 4);
          a1[2] = (unint64_t)v156 + ((unint64_t)(67 - v153) >> 3);
          v158 = v154 | 0x38;
        }
        *a1 = v157 >> v155;
        a1[1] = v158 - v155;
        v150 = (1 << v155) + (v157 & ~(-1 << v155));
      }
      else
      {
        LOWORD(v150) = 1;
      }
    }
    else
    {
      LOWORD(v150) = 0;
    }
    v159 = v150 + 1;
    v144[v143] = v159;
    if (__src < v159)
    {
      v160 = 1;
LABEL_320:
      v10 = 1;
LABEL_321:
      v283 = v144;
      operator delete(v144);
      goto LABEL_322;
    }
    ++v143;
  }
  while (v22 != v143);
  v161 = 0;
  while (1)
  {
    v162 = *((unsigned __int16 *)v282 + v161);
    v163 = *(_QWORD *)(v7 + 8) + 24 * v161;
    if (v162 < 2)
    {
      *(_QWORD *)(v163 + 8) = *(_QWORD *)v163;
      sub_2367CBBE0((char **)v163, 0x100uLL);
      goto LABEL_275;
    }
    if (v162 > 0x8000)
      goto LABEL_314;
    v164 = (_QWORD *)a1[2];
    if ((unint64_t)v164 > a1[3])
    {
      sub_2367C5188(a1);
      v166 = *a1;
      v167 = a1[1];
    }
    else
    {
      v165 = a1[1];
      v166 = *a1 | (*v164 << v165);
      a1[2] = (unint64_t)v164 + ((63 - v165) >> 3);
      v167 = v165 | 0x38;
      *a1 = v166;
      a1[1] = v165 | 0x38;
    }
    v168 = v166 & 3;
    *a1 = v166 >> 2;
    a1[1] = v167 - 2;
    if (v168 == 1)
      break;
    LOBYTE(v291) = 0;
    sub_2367E2738(v285, v162, &v291);
    v272 = (char **)v163;
    v186 = 0;
    v287[0] = 0;
    v287[1] = 0;
    v187 = 32;
    v288 = 0;
    do
    {
      v188 = byte_23692496E[v168];
      v189 = (_QWORD *)a1[2];
      if ((unint64_t)v189 > a1[3])
      {
        sub_2367C5188(a1);
        v191 = *a1;
        v192 = a1[1];
      }
      else
      {
        v190 = a1[1];
        v191 = *a1 | (*v189 << v190);
        a1[2] = (unint64_t)v189 + ((63 - v190) >> 3);
        v192 = v190 | 0x38;
        *a1 = v191;
        a1[1] = v190 | 0x38;
      }
      v193 = (unsigned __int8 *)&unk_23691FE04 + 4 * (v191 & 0xF);
      v194 = *v193;
      *a1 = v191 >> v194;
      a1[1] = v192 - v194;
      v195 = *((_WORD *)v193 + 1);
      *((_BYTE *)v287 + v188) = v195;
      v196 = v195 == 0;
      if ((_BYTE)v195)
        v197 = 0x20u >> v195;
      else
        v197 = 0;
      if (!v196)
        ++v186;
      v187 -= v197;
      if (v168 > 0x10)
        break;
      ++v168;
    }
    while (v187 > 0);
    if (v186 == 1 || v187 == 0)
    {
      v199 = 0;
      __srcb = v285[0];
      *(_OWORD *)__p = 0u;
      v290 = 0u;
      do
        ++*((_WORD *)__p + *((unsigned __int8 *)v287 + v199++));
      while (v199 != 18);
      if (!sub_2367F48D4((char *)&v291, 5u, (uint64_t)v287, 18, (uint64_t)__p))
        goto LABEL_271;
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v276 = 8;
      v203 = 0x8000;
      do
      {
        v204 = (_QWORD *)a1[2];
        if ((unint64_t)v204 > a1[3])
        {
          sub_2367C5188(a1);
          v206 = *a1;
          v207 = a1[1];
        }
        else
        {
          v205 = a1[1];
          v206 = *a1 | (*v204 << v205);
          a1[2] = (unint64_t)v204 + ((63 - v205) >> 3);
          v207 = v205 | 0x38;
        }
        v208 = (unsigned __int8 *)&v291 + 4 * (v206 & 0x1F);
        v209 = *v208;
        v210 = v207 - v209;
        v211 = v206 >> v209;
        *a1 = v211;
        a1[1] = v210;
        v212 = v208[2];
        if (v212 > 0xF)
        {
          v213 = v212 - 14;
          if (v212 == 16)
            v214 = v276;
          else
            v214 = 0;
          if (v200 == v214)
            v215 = v201;
          else
            v215 = 0;
          if (v215 <= 0)
            v216 = v215;
          else
            v216 = (v215 - 2) << (v212 - 14);
          v217 = (_QWORD *)a1[2];
          if ((unint64_t)v217 > a1[3])
          {
            sub_2367C5188(a1);
            v218 = *a1;
            v219 = a1[1];
          }
          else
          {
            v218 = (*v217 << v210) | v211;
            a1[2] = (unint64_t)v217 + ((63 - v210) >> 3);
            v219 = v210 | 0x38;
          }
          *a1 = v218 >> v213;
          a1[1] = v219 - v213;
          v201 = v216 + (v218 & ~(-1 << v213)) + 3;
          v220 = v201 - v215;
          v221 = v201 - v215 + v202;
          if (v221 > (int)v162)
            goto LABEL_271;
          v222 = &__srcb[v202];
          v223 = v220;
          v224 = v220 << (15 - v214);
          if ((_BYTE)v214)
            v225 = v224;
          else
            v225 = 0;
          memset(v222, v214, v223);
          v203 -= v225;
          v202 = v221;
          v200 = v214;
        }
        else
        {
          __srcb[v202] = v212;
          v201 = 0;
          if (v212)
          {
            v203 -= 0x8000u >> v212;
            ++v202;
            v276 = v212;
          }
          else
          {
            ++v202;
          }
        }
      }
      while ((int)v162 > v202 && v203 > 0);
      if (!v203)
      {
        bzero(&__srcb[v202], (int)v162 - v202);
        v291 = 0u;
        v292 = 0u;
        v240 = v162;
        v241 = (unsigned __int8 *)v285[0];
        do
        {
          v242 = *v241++;
          ++*((_WORD *)&v291 + v242);
          --v240;
        }
        while (v240);
        sub_2367CBBE0(v272, v162 + 376);
        v7 = v280;
        v243 = sub_2367F48D4(*v272, 8u, (uint64_t)v285[0], v162, (uint64_t)&v291);
        sub_2367CBBE0(v272, v243);
        v226 = v243 != 0;
      }
      else
      {
LABEL_271:
        v226 = 0;
        v7 = v280;
      }
    }
    else
    {
      v226 = 0;
      v7 = v280;
    }
    if (v285[0])
    {
      v285[1] = v285[0];
      operator delete(v285[0]);
    }
    if (!v226)
    {
LABEL_314:
      v177 = a1[1];
      goto LABEL_315;
    }
LABEL_275:
    v237 = *(_QWORD *)(v7 + 8) + 24 * v161;
    v238 = *(unsigned __int8 **)v237;
    v239 = *(unsigned __int8 **)(v237 + 8);
    while (v238 != v239)
    {
      if (*v238 <= 8u)
        sub_2367CBCF0(v7, v161, *((unsigned __int16 *)v238 + 1));
      v238 += 4;
    }
    if (++v161 == v22)
      goto LABEL_313;
  }
  sub_2367CBBE0((char **)v163, 0x100uLL);
  v169 = (_QWORD *)a1[2];
  __srca = *(char **)v163;
  if ((unint64_t)v169 > a1[3])
  {
    sub_2367C5188(a1);
    v171 = *a1;
    v172 = a1[1];
  }
  else
  {
    v170 = a1[1];
    v171 = *a1 | (*v169 << v170);
    a1[2] = (unint64_t)v169 + ((63 - v170) >> 3);
    v172 = v170 | 0x38;
    *a1 = v171;
    a1[1] = v170 | 0x38;
  }
  v173 = 0;
  v174 = __clz(v162 - 1) ^ 0x3F;
  v175 = v174 + 1;
  v176 = v171 & 3;
  v177 = v172 - 2;
  v178 = v171 >> 2;
  *a1 = v178;
  a1[1] = v177;
  v179 = v176 + 1;
  *(_QWORD *)&v291 = 0;
  v180 = ~(-2 << v174);
  while (1)
  {
    v181 = (_QWORD *)a1[2];
    if ((unint64_t)v181 > a1[3])
    {
      v275 = v179;
      sub_2367C5188(a1);
      v179 = v275;
      v182 = *a1;
      v184 = a1[1];
    }
    else
    {
      v182 = v178 | (*v181 << v177);
      v183 = (char *)v181 + ((unint64_t)(63 - v177) >> 3);
      v184 = v177 | 0x38;
      *a1 = v182;
      a1[1] = v184;
      a1[2] = (unint64_t)v183;
    }
    v185 = v182 & v180;
    v177 = v184 - v175;
    v178 = v182 >> v175;
    *a1 = v178;
    a1[1] = v177;
    if (v162 <= v185)
      break;
    *(_WORD *)((char *)&v291 + v173) = v185;
    v173 += 2;
    if (2 * v176 + 2 == v173)
    {
      v7 = v280;
      if (!v176)
      {
LABEL_267:
        v234 = v291;
        v235 = __srca;
        *__srca = 0;
        *((_WORD *)__srca + 1) = v234;
        for (j = 1; j != 256; j *= 2)
LABEL_268:
          memcpy(&v235[4 * j], v235, 4 * j);
        goto LABEL_275;
      }
      v227 = 0;
LABEL_258:
      v228 = v227++;
      v229 = *((unsigned __int16 *)&v291 + v228);
      while (v229 != *((unsigned __int16 *)&v291 + v228 + 1))
      {
        if (v176 == ++v228)
        {
          if (v227 == v176)
          {
            if (v179 == 4)
            {
              v230 = (_QWORD *)a1[2];
              if ((unint64_t)v230 > a1[3])
              {
                sub_2367C5188(a1);
                v231 = *a1;
                v233 = a1[1];
              }
              else
              {
                v231 = v178 | (*v230 << v177);
                v232 = (char *)v230 + ((unint64_t)(63 - v177) >> 3);
                v233 = v177 | 0x38;
                *a1 = v231;
                a1[1] = v233;
                a1[2] = (unint64_t)v232;
              }
              v177 = v233 - 1;
              *a1 = v231 >> 1;
              a1[1] = v177;
              v179 = v231 & 1 | 4;
              v7 = v280;
            }
            switch(v179)
            {
              case 1:
                goto LABEL_267;
              case 2:
                v244 = v291;
                if ((unsigned __int16)v291 <= WORD1(v291))
                  v245 = WORD1(v291);
                else
                  v245 = v291;
                if ((unsigned __int16)v291 >= WORD1(v291))
                  v244 = WORD1(v291);
                v235 = __srca;
                *__srca = 1;
                *((_WORD *)__srca + 1) = v244;
                __srca[4] = 1;
                *((_WORD *)__srca + 3) = v245;
                j = 2;
                goto LABEL_268;
              case 3:
                v246 = WORD1(v291);
                if (WORD1(v291) <= WORD2(v291))
                  v247 = WORD2(v291);
                else
                  v247 = WORD1(v291);
                if (WORD1(v291) >= WORD2(v291))
                  v246 = WORD2(v291);
                v248 = v291;
                v235 = __srca;
                *__srca = 1;
                *((_WORD *)__srca + 1) = v248;
                __srca[8] = 1;
                *((_WORD *)__srca + 5) = v248;
                __srca[4] = 2;
                *((_WORD *)__srca + 3) = v246;
                __srca[12] = 2;
                *((_WORD *)__srca + 7) = v247;
                j = 4;
                goto LABEL_268;
              case 4:
                v249 = 0;
                v250 = 2;
                do
                {
                  v251 = v249++;
                  v252 = *((unsigned __int16 *)&v291 + v251);
                  v253 = v250;
                  do
                  {
                    v254 = *(unsigned __int16 *)((char *)&v291 + v253);
                    if (v252 > v254)
                    {
                      *(_WORD *)((char *)&v291 + v253) = v252;
                      *((_WORD *)&v291 + v251) = v254;
                      v252 = v254;
                    }
                    v253 += 2;
                  }
                  while (v253 != 8);
                  v250 += 2;
                }
                while (v249 != 3);
                v255 = v291;
                v235 = __srca;
                v7 = v280;
                *__srca = 2;
                *((_WORD *)__srca + 1) = v255;
                v256 = WORD1(v291);
                __srca[8] = 2;
                *((_WORD *)__srca + 5) = v256;
                v257 = WORD2(v291);
                __srca[4] = 2;
                *((_WORD *)__srca + 3) = v257;
                v258 = WORD3(v291);
                __srca[12] = 2;
                *((_WORD *)__srca + 7) = v258;
                j = 4;
                goto LABEL_268;
              case 5:
                v259 = WORD2(v291);
                if (WORD2(v291) <= WORD3(v291))
                  v260 = WORD3(v291);
                else
                  v260 = WORD2(v291);
                if (WORD2(v291) >= WORD3(v291))
                  v259 = WORD3(v291);
                v261 = v291;
                v235 = __srca;
                *__srca = 1;
                *((_WORD *)__srca + 1) = v261;
                v262 = WORD1(v291);
                __srca[4] = 2;
                *((_WORD *)__srca + 3) = v262;
                __srca[8] = 1;
                *((_WORD *)__srca + 5) = v261;
                __srca[12] = 3;
                *((_WORD *)__srca + 7) = v259;
                __srca[16] = 1;
                *((_WORD *)__srca + 9) = v261;
                __srca[20] = 2;
                *((_WORD *)__srca + 11) = v262;
                __srca[24] = 1;
                *((_WORD *)__srca + 13) = v261;
                __srca[28] = 3;
                *((_WORD *)__srca + 15) = v260;
                j = 8;
                goto LABEL_268;
              default:
                goto LABEL_315;
            }
          }
          goto LABEL_258;
        }
      }
      break;
    }
  }
LABEL_315:
  v263 = a1[4];
  v264 = a1[3];
  v265 = 8 * (a1[2] - v263 + a1[5]) - v177;
  a1[7] = v265;
  v160 = 1;
  if (v265 <= 8 * (v264 - v263) + 64)
  {
    v144 = v282;
    goto LABEL_320;
  }
  v10 = 0xFFFFFFFFLL;
LABEL_317:
  v144 = v282;
  if (v282)
    goto LABEL_321;
LABEL_322:
  if (!v160)
    return 0;
  return v10;
}

void sub_2367CD700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_2367CD780(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = (v4 - (_BYTE *)*a1) >> 4;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[16 * a2];
  }
  else
  {
    v7 = a1[2];
    if (a2 - v6 <= (v7 - v4) >> 4)
    {
      v20 = &v4[16 * (a2 - v6)];
      v21 = 16 * a2 - 16 * v6;
      do
      {
        *(_OWORD *)v4 = xmmword_2368AF580;
        v4 += 16;
        v21 -= 16;
      }
      while (v21);
      a1[1] = v20;
    }
    else
    {
      if (a2 >> 60)
        sub_2367C3440();
      v8 = v7 - v5;
      v9 = (v7 - v5) >> 3;
      if (v9 <= a2)
        v9 = a2;
      if (v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)sub_2367CD8AC(v10);
      v13 = &v11[16 * v6];
      v14 = &v11[16 * a2];
      v15 = 16 * a2 - 16 * v6;
      v16 = v13;
      do
      {
        *(_OWORD *)v16 = xmmword_2368AF580;
        v16 += 16;
        v15 -= 16;
      }
      while (v15);
      v17 = &v11[16 * v12];
      v19 = (char *)*a1;
      v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          *((_OWORD *)v13 - 1) = *((_OWORD *)v18 - 1);
          v13 -= 16;
          v18 -= 16;
        }
        while (v18 != v19);
        v18 = (char *)*a1;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (v18)
        operator delete(v18);
    }
  }
}

void *sub_2367CD8AC(unint64_t a1)
{
  if (a1 >> 60)
    sub_2367C3488();
  return operator new(16 * a1);
}

uint64_t sub_2367CD8E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _BOOL4 v47;
  int *v48;
  int *v49;
  int *v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int *v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t *v128;
  int8x16_t v133;
  int8x16_t v134;
  _QWORD *v135;
  int v136;
  uint64_t v137;
  int32x2_t v138;
  float v139;
  long double v140;
  int8x16_t v141;
  int8x16_t v142;
  float v143;
  float v144;
  long double v145;
  int8x16_t v146;
  int8x16_t v147;
  float v148;
  float v149;
  float v150;
  BOOL v151;
  float v152;
  uint64_t v153;
  int v154;
  char v155;
  uint64_t k;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  float v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  BOOL v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  _OWORD *v213;
  __int128 v214;
  _OWORD *v215;
  _OWORD *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  __int128 v224;
  char *v225;
  char *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _OWORD *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  unint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  _QWORD **v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void **v273;
  _QWORD *v274;
  _QWORD *v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t (**v287)();
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _DWORD *v303;
  uint64_t v304;
  _DWORD *v305;
  uint64_t v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  _DWORD *v310;
  uint64_t v311;
  float v312;
  int v313;
  uint64_t v314;
  float v315;
  float v316;
  BOOL v317;
  float v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unsigned int *v328;
  _DWORD *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  int v333;
  BOOL v334;
  uint64_t v336;
  BOOL v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  char *v350;
  char *v351;
  uint64_t v352;
  char *v353;
  char *v354;
  _DWORD *v355;
  _DWORD *v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  _BYTE *v363;
  _BYTE *v364;
  unsigned int v365;
  int8x16_t v366;
  int8x16_t v367;
  uint64_t v368;
  uint64_t v369;
  BOOL v370;
  uint64_t v371;
  BOOL v372;
  uint64_t v373;
  unsigned int v374;
  unint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t (**v387)();
  __int16 v388;
  _QWORD v389[2];
  void *v390;
  void *v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  int v396;
  uint64_t (**v397)();
  uint64_t v398;
  uint64_t (**v399)();
  __int128 v400;
  uint64_t (**v401)();
  uint64_t v402;
  uint64_t (**v403)();
  uint64_t v404;
  uint64_t (**v405)();
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t (**v414)();
  __int16 v415;
  _QWORD v416[2];
  void *v417;
  void *v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  int v423;
  uint64_t (**v424)();
  uint64_t v425;
  uint64_t (**v426)();
  __int128 v427;
  uint64_t (**v428)();
  uint64_t v429;
  uint64_t (**v430)();
  uint64_t v431;
  uint64_t (**v432)();
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t (**v440)();
  __int16 v441;
  _QWORD v442[2];
  void *v443;
  void *v444;
  uint64_t v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  int v449;
  uint64_t (**v450)();
  uint64_t v451;
  uint64_t (**v452)();
  __int128 v453;
  uint64_t (**v454)();
  uint64_t v455;
  uint64_t (**v456)();
  uint64_t v457;
  uint64_t (**v458)();
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  unint64_t v476;
  char v477;
  _BYTE v478[32];
  void *v479[2];
  uint64_t v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  int v484;
  uint64_t v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  __int128 v490;
  _OWORD v491[2];
  void *__p;
  void *v493;
  _QWORD v494[2];
  __int128 v495;
  uint64_t v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  int v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  _QWORD v504[5];
  __int16 v505;
  _QWORD v506[2];
  void *v507[2];
  uint64_t v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  int v512;
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _BYTE v518[288];

  v8 = (*(_DWORD *)(*(_QWORD *)(a2 + 408) + 320) + 3);
  if ((a4 & 0x1000000) != 0 && (*(_BYTE *)(a2 + 24) & 1) != 0)
    v8 += 3;
  if (!*(_BYTE *)(a2 + 392) && *(_DWORD *)(a2 + 16) != 1 && (!*(_DWORD *)(a2 + 376) || *(_DWORD *)(a2 + 396)))
  {
    sub_2367D050C((uint64_t)v478, *(_QWORD *)(a3 + 88));
    sub_2367D0618((uint64_t *)(a1 + 4496), (uint64_t *)v478);
    *(_QWORD *)&v474 = v504;
    sub_2367D077C((void ***)&v474);
    *(_QWORD *)&v491[0] = &off_2507FFA18;
    if (__p)
    {
      v493 = __p;
      operator delete(__p);
    }
    for (i = 200; i != 80; i -= 40)
      sub_2367C2F38((uint64_t *)&v478[i]);
    if (SHIBYTE(v482) < 0)
      operator delete(*((void **)&v481 + 1));
    v10 = *(_QWORD *)v478;
    *(_QWORD *)v478 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v373 = a3;
  v474 = 0uLL;
  v475 = 0;
  v476 = v8;
  v477 = a4 & 1;
  if (!sub_2367CB2F4(a2 + 40))
  {
    v11 = 0;
    v12 = a2 + 48;
    do
    {
      if (*(unsigned __int8 *)(a2 + 60) != byte_236923AD4[*(unsigned int *)(v12 + 4 * v11)])
      {
        v13 = operator new();
        *(_OWORD *)(v13 + 8) = xmmword_2368AF3F0;
        *(_OWORD *)(v13 + 24) = xmmword_2368AF3F0;
        *(_QWORD *)v13 = &off_250800168;
        *(_QWORD *)(v13 + 40) = v11;
        v473 = v13;
        sub_23688A0E4((char **)&v474, &v473);
        v14 = v473;
        v473 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      if (*(unsigned __int8 *)(a2 + 61) != byte_236923AD8[*(unsigned int *)(v12 + 4 * v11)])
      {
        v15 = operator new();
        *(_OWORD *)(v15 + 8) = xmmword_2368AF310;
        *(_OWORD *)(v15 + 24) = xmmword_2368AF310;
        *(_QWORD *)v15 = &off_250800100;
        *(_QWORD *)(v15 + 40) = v11;
        v472 = v15;
        sub_23688A0E4((char **)&v474, &v472);
        v16 = v472;
        v472 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      ++v11;
    }
    while (v11 != 3);
  }
  if (*(_BYTE *)(a2 + 425))
  {
    v17 = operator new();
    v18 = 0;
    *(_QWORD *)v17 = &off_2507FFF60;
    *(_DWORD *)(v17 + 40) = 1065353216;
    *(_DWORD *)(v17 + 52) = 1065353216;
    *(_DWORD *)(v17 + 64) = 1065353216;
    *(int64x2_t *)(v17 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 0;
    v19 = *(_QWORD *)(a2 + 436);
    *(_QWORD *)(v17 + 44) = *(_QWORD *)(a2 + 428);
    *(_QWORD *)(v17 + 56) = v19;
    *(_QWORD *)(v17 + 68) = *(_QWORD *)(a2 + 444);
    do
    {
      v20 = (float *)(v17 + v18);
      v21 = *(float *)(v17 + v18 + 40);
      v22 = *(float *)(v17 + v18 + 44);
      v23 = *(float *)(v17 + v18 + 48);
      v24 = 1.0 / (float)(v21 + (float)((float)(v22 + v23) * 4.0));
      v20[10] = v21 * v24;
      v20[11] = v22 * v24;
      v20[12] = v23 * v24;
      v18 += 12;
    }
    while (v18 != 36);
    v471 = v17;
    sub_23688A0E4((char **)&v474, &v471);
    v25 = v471;
    v471 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  v26 = *(_DWORD *)(a2 + 452);
  v27 = a3;
  if (v26 >= 3)
  {
    v28 = operator new();
    *(int64x2_t *)(v28 + 8) = vdupq_n_s64(3uLL);
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)v28 = &off_250800238;
    *(_QWORD *)(v28 + 40) = &off_2507FF460;
    *(_BYTE *)(v28 + 176) = *(_BYTE *)(a2 + 552);
    v29 = *(_OWORD *)(a2 + 504);
    v30 = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(v28 + 144) = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(v28 + 160) = v30;
    v31 = *(_OWORD *)(a2 + 440);
    v32 = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(v28 + 80) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(v28 + 96) = v32;
    *(_OWORD *)(v28 + 112) = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(v28 + 128) = v29;
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(v28 + 64) = v31;
    *(_QWORD *)(v28 + 184) = a1 + 4280;
    v470 = v28;
    sub_23688A0E4((char **)&v474, &v470);
    v33 = v470;
    v470 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v26 = *(_DWORD *)(a2 + 452);
  }
  if (v26)
  {
    v34 = operator new();
    *(int64x2_t *)(v34 + 8) = vdupq_n_s64(2uLL);
    *(_QWORD *)(v34 + 24) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)v34 = &off_2508002A0;
    *(_QWORD *)(v34 + 40) = &off_2507FF460;
    *(_BYTE *)(v34 + 176) = *(_BYTE *)(a2 + 552);
    v35 = *(_OWORD *)(a2 + 504);
    v36 = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(v34 + 144) = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(v34 + 160) = v36;
    v37 = *(_OWORD *)(a2 + 440);
    v38 = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(v34 + 80) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(v34 + 96) = v38;
    *(_OWORD *)(v34 + 112) = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(v34 + 128) = v35;
    *(_OWORD *)(v34 + 48) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(v34 + 64) = v37;
    *(_QWORD *)(v34 + 184) = a1 + 4280;
    v469 = v34;
    sub_23688A0E4((char **)&v474, &v469);
    v39 = v469;
    v469 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  if (*(_DWORD *)(a2 + 452) >= 2u)
  {
    v40 = operator new();
    *(int64x2_t *)(v40 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)v40 = &off_250800308;
    *(_QWORD *)(v40 + 40) = &off_2507FF460;
    *(_BYTE *)(v40 + 176) = *(_BYTE *)(a2 + 552);
    v41 = *(_OWORD *)(a2 + 504);
    v42 = *(_OWORD *)(a2 + 536);
    *(_OWORD *)(v40 + 144) = *(_OWORD *)(a2 + 520);
    *(_OWORD *)(v40 + 160) = v42;
    v43 = *(_OWORD *)(a2 + 440);
    v44 = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(v40 + 80) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(v40 + 96) = v44;
    *(_OWORD *)(v40 + 112) = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(v40 + 128) = v41;
    *(_OWORD *)(v40 + 48) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(v40 + 64) = v43;
    *(_QWORD *)(v40 + 184) = a1 + 4280;
    v468 = v40;
    sub_23688A0E4((char **)&v474, &v468);
    v45 = v468;
    v468 = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  v46 = *(_DWORD *)(a2 + 268);
  v47 = v46 != 1;
  v48 = *(int **)(a2 + 272);
  v49 = *(int **)(a2 + 280);
  if (v48 != v49)
  {
    v50 = *(int **)(a2 + 272);
    do
    {
      v51 = *v50++;
      LOBYTE(v47) = v51 == v46 && v47;
    }
    while (v50 != v49);
    if (v47)
    {
      v47 = 1;
    }
    else
    {
      v52 = 0;
      do
      {
        v53 = v48[v52];
        if (v53 != 1)
        {
          v54 = __clz(v53) ^ 0x1F;
          v55 = (v53 & (v53 - 1)) != 0 ? v54 + 1 : v54;
          sub_236890AE8(&v467, *(_QWORD *)(a2 + 408) + 456, v52 + 3, v55);
          sub_23688A0E4((char **)&v474, &v467);
          v56 = v467;
          v467 = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        }
        ++v52;
        v48 = *(int **)(a2 + 272);
      }
      while (v52 < (uint64_t)(*(_QWORD *)(a2 + 280) - (_QWORD)v48) >> 2);
      v47 = 0;
    }
  }
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    v57 = *(_QWORD *)(a1 + 4208);
    v58 = *(_DWORD *)(*(_QWORD *)v57 + 320);
    v59 = operator new();
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 8) = 0u;
    *(_QWORD *)v59 = &off_2507FF918;
    *(_QWORD *)(v59 + 40) = v57 + 1256;
    *(_QWORD *)(v59 + 48) = (v58 + 3);
    v466 = v59;
    sub_23688A0E4((char **)&v474, &v466);
    v60 = v466;
    v466 = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  if ((*(_BYTE *)(a2 + 24) & 0x10) != 0)
  {
    v61 = *(_QWORD *)(a1 + 4208);
    v62 = operator new();
    *(_OWORD *)(v62 + 24) = 0u;
    *(_OWORD *)(v62 + 8) = 0u;
    *(_QWORD *)v62 = &off_2507FFDC0;
    *(_QWORD *)(v62 + 40) = v61 + 1432;
    v465 = v62;
    sub_23688A0E4((char **)&v474, &v465);
    v63 = v465;
    v465 = 0;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
  if (*(_DWORD *)(a2 + 268) != 1)
  {
    v64 = v47 ? ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 2) + 3 : 3;
    if (v64)
    {
      for (j = 0; j != v64; ++j)
      {
        v66 = *(_DWORD *)(a2 + 268);
        v67 = __clz(v66) ^ 0x1F;
        if ((v66 & (v66 - 1)) != 0)
          v68 = v67 + 1;
        else
          v68 = v67;
        sub_236890AE8(&v464, *(_QWORD *)(a2 + 408) + 456, j, v68);
        sub_23688A0E4((char **)&v474, &v464);
        v69 = v464;
        v464 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
    }
  }
  if ((a4 & 0x1000000) != 0 && (*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v70 = operator new();
    *(int64x2_t *)(v70 + 8) = vdupq_n_s64(2uLL);
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    *(_QWORD *)v70 = &off_250800098;
    *(_QWORD *)(v70 + 40) = v8 - 3;
    v463 = v70;
    sub_23688A0E4((char **)&v474, &v463);
    v71 = v463;
    v463 = 0;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    v72 = *(_QWORD *)(a1 + 4208);
    v73 = operator new();
    *(_OWORD *)(v73 + 24) = 0u;
    *(_OWORD *)(v73 + 8) = 0u;
    *(_QWORD *)v73 = &off_2507FFE90;
    *(_QWORD *)(v73 + 40) = v72 + 1224;
    *(_QWORD *)(v73 + 48) = v72 + 1104;
    *(_QWORD *)(v73 + 56) = v8 - 3;
    v462 = v73;
    sub_23688A0E4((char **)&v474, &v462);
    v74 = v462;
    v462 = 0;
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  }
  v75 = *(_DWORD *)(a2 + 404);
  if (v75)
  {
    v76 = operator new();
    *(_OWORD *)(v76 + 24) = 0u;
    *(_OWORD *)(v76 + 8) = 0u;
    *(_QWORD *)v76 = &off_2507FF8B0;
    *(_QWORD *)(v76 + 40) = a1 + 120 * (v75 - 1) + 1896;
    v461 = v76;
    sub_23688A0E4((char **)&v474, &v461);
    v77 = v461;
    v461 = 0;
    if (v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  }
  if (!*(_BYTE *)(a2 + 392) && *(_DWORD *)(a2 + 16) != 1)
  {
    _ZF = *(_DWORD *)(a2 + 396) || *(_DWORD *)(a2 + 376) == 0;
    if (_ZF && *(_BYTE *)(a2 + 400))
    {
      v440 = &off_2507FFA18;
      v441 = *(_WORD *)(a1 + 5200);
      v79 = *(_QWORD *)(a1 + 5213);
      v442[0] = *(_QWORD *)(a1 + 5208);
      *(_QWORD *)((char *)v442 + 5) = v79;
      v443 = 0;
      v445 = 0;
      v444 = 0;
      sub_2367C9F60(&v443, *(const void **)(a1 + 5224), *(_QWORD *)(a1 + 5232), *(_QWORD *)(a1 + 5232) - *(_QWORD *)(a1 + 5224));
      v446 = *(_OWORD *)(a1 + 5248);
      v447 = *(_OWORD *)(a1 + 5264);
      v448 = *(_OWORD *)(a1 + 5280);
      v449 = *(_DWORD *)(a1 + 5296);
      v80 = *(_QWORD *)(a1 + 5312);
      v450 = &off_250800470;
      v451 = v80;
      v453 = *(_OWORD *)(a1 + 5328);
      v452 = &off_2507FFCC0;
      v454 = &off_250800470;
      v455 = *(_QWORD *)(a1 + 5352);
      v456 = &off_250800470;
      v457 = *(_QWORD *)(a1 + 5368);
      v458 = &off_250800470;
      v459 = *(_QWORD *)(a1 + 5384);
      sub_236891FBC(&v460, a1 + 4496, (uint64_t)&v440);
      sub_23688A0E4((char **)&v474, &v460);
      v81 = v460;
      v460 = 0;
      if (v81)
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      v440 = &off_2507FFA18;
      if (v443)
      {
        v444 = v443;
        operator delete(v443);
      }
    }
  }
  v82 = a1 + 4408;
  v83 = *(_QWORD *)(v373 + 88);
  v85 = *(_QWORD *)(v83 + 328);
  v84 = *(_QWORD *)(v83 + 336);
  if (v84 == v85)
  {
LABEL_102:
    v93 = 0;
    v375 = 0;
    goto LABEL_105;
  }
  v86 = (unsigned __int128)((v84 - v85) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v87 = (v84 - v85) / 96;
  if (v87 <= 1)
    v88 = 1;
  else
    v88 = (v86 >> 4) + ((unint64_t)v86 >> 63);
  if (*(_DWORD *)(v85 + 12))
  {
    v89 = 0;
    v90 = (int *)(v85 + 108);
    v91 = v88 - 1;
    while (v91 != v89)
    {
      v92 = *v90;
      v90 += 24;
      ++v89;
      if (!v92)
      {
        v93 = v89 < v87;
        goto LABEL_104;
      }
    }
    goto LABEL_102;
  }
  v89 = 0;
  v93 = 1;
LABEL_104:
  v375 = v89 + 3;
LABEL_105:
  v377 = a1;
  if (*(_BYTE *)(a1 + 4448))
    goto LABEL_221;
  v94 = *(_DWORD *)(a2 + 32);
  if (v94)
  {
    if (v94 == 2)
    {
      v95 = operator new();
      *(_OWORD *)(v95 + 24) = 0u;
      *(_OWORD *)(v95 + 8) = 0u;
      *(_QWORD *)v95 = &off_2507FFE28;
      v439 = v95;
      sub_23688A0E4((char **)&v474, &v439);
      v96 = v439;
      v439 = 0;
      if (v96)
        (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
    }
    v97 = 0;
  }
  else
  {
    v98 = operator new();
    *(_OWORD *)(v98 + 24) = 0u;
    *(_OWORD *)(v98 + 8) = 0u;
    v99 = *(_OWORD *)(a1 + 5740);
    *(_OWORD *)(v98 + 168) = *(_OWORD *)(a1 + 5724);
    *(_OWORD *)(v98 + 184) = v99;
    v100 = *(_OWORD *)(a1 + 5772);
    *(_OWORD *)(v98 + 200) = *(_OWORD *)(a1 + 5756);
    *(_OWORD *)(v98 + 216) = v100;
    v101 = *(_OWORD *)(a1 + 5676);
    *(_OWORD *)(v98 + 104) = *(_OWORD *)(a1 + 5660);
    *(_OWORD *)(v98 + 120) = v101;
    v102 = *(_OWORD *)(a1 + 5708);
    *(_OWORD *)(v98 + 136) = *(_OWORD *)(a1 + 5692);
    *(_OWORD *)(v98 + 152) = v102;
    v103 = *(_OWORD *)(a1 + 5612);
    *(_OWORD *)(v98 + 40) = *(_OWORD *)(a1 + 5596);
    *(_OWORD *)(v98 + 56) = v103;
    v104 = *(_OWORD *)(a1 + 5644);
    *(_OWORD *)(v98 + 72) = *(_OWORD *)(a1 + 5628);
    *(_QWORD *)v98 = &off_2508001D0;
    *(_OWORD *)(v98 + 88) = v104;
    *(_BYTE *)(v98 + 232) = *(_DWORD *)(a1 + 5248) == 2;
    v438 = v98;
    sub_23688A0E4((char **)&v474, &v438);
    v105 = v438;
    v438 = 0;
    if (v105)
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
    v97 = *(_DWORD *)(a1 + 5248) != 2;
  }
  v370 = v93;
  if ((a4 & 0x100) != 0)
  {
    v154 = *(_DWORD *)(a2 + 16);
    if (v154 != 3 && v154)
      goto LABEL_381;
    v155 = *(_DWORD *)(a2 + 312) == 0;
    for (k = *(_QWORD *)(a2 + 344); k != *(_QWORD *)(a2 + 352); k += 40)
      v155 &= *(_DWORD *)(k + 8) == 0;
    if (!*(_BYTE *)(a2 + 256) && (v155 & 1) != 0)
    {
LABEL_381:
      if (!*(_BYTE *)(a2 + 392) && *(_DWORD *)(a2 + 16) != 1)
      {
        v337 = *(_DWORD *)(a2 + 396) || *(_DWORD *)(a2 + 376) == 0;
        if (v337 && !*(_BYTE *)(a2 + 400))
        {
          if (v97)
          {
            sub_23688CC44(&v435, v377 + 4944);
            sub_23688A0E4((char **)&v474, &v435);
            v338 = v435;
            v435 = 0;
            if (v338)
              (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
          }
          v414 = &off_2507FFA18;
          v415 = *(_WORD *)(v377 + 5200);
          v339 = *(_QWORD *)(v377 + 5213);
          v416[0] = *(_QWORD *)(v377 + 5208);
          *(_QWORD *)((char *)v416 + 5) = v339;
          v417 = 0;
          v419 = 0;
          v418 = 0;
          sub_2367C9F60(&v417, *(const void **)(v377 + 5224), *(_QWORD *)(v377 + 5232), *(_QWORD *)(v377 + 5232) - *(_QWORD *)(v377 + 5224));
          v420 = *(_OWORD *)(v377 + 5248);
          v421 = *(_OWORD *)(v377 + 5264);
          v422 = *(_OWORD *)(v377 + 5280);
          v423 = *(_DWORD *)(v377 + 5296);
          v340 = *(_QWORD *)(v377 + 5312);
          v424 = &off_250800470;
          v425 = v340;
          v427 = *(_OWORD *)(v377 + 5328);
          v426 = &off_2507FFCC0;
          v428 = &off_250800470;
          v429 = *(_QWORD *)(v377 + 5352);
          v430 = &off_250800470;
          v431 = *(_QWORD *)(v377 + 5368);
          v432 = &off_250800470;
          v433 = *(_QWORD *)(v377 + 5384);
          sub_236891FBC(&v434, v377 + 4496, (uint64_t)&v414);
          sub_23688A0E4((char **)&v474, &v434);
          v341 = v434;
          v434 = 0;
          if (v341)
            (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
          v414 = &off_2507FFA18;
          if (v417)
          {
            v418 = v417;
            operator delete(v417);
          }
          LOBYTE(v97) = 0;
        }
      }
      goto LABEL_115;
    }
    if (v97)
    {
      sub_23688CC44(&v437, v377 + 4944);
      sub_23688A0E4((char **)&v474, &v437);
      v160 = v437;
      v437 = 0;
      if (v160)
        (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
    }
    v161 = operator new();
    *(_OWORD *)(v161 + 24) = 0u;
    *(_OWORD *)(v161 + 8) = 0u;
    *(_QWORD *)v161 = &off_2507FFEF8;
    v162 = *(_QWORD *)(v377 + 4208);
    *(_QWORD *)(v161 + 40) = a2;
    *(_QWORD *)(v161 + 48) = v162;
    *(_QWORD *)(v161 + 56) = &off_2507FF528;
    *(_QWORD *)(v161 + 80) = 0;
    *(_BYTE *)(v161 + 88) = 0;
    *(_OWORD *)&v478[8] = xmmword_2368AF3F0;
    *(_QWORD *)v478 = &off_2507FF550;
    *(_QWORD *)&v478[24] = 0;
    sub_2367F2CB4(v161 + 56, (uint64_t)v478);
    *(_QWORD *)(v161 + 128) = 0;
    *(_DWORD *)(v161 + 104) = 0;
    *(_QWORD *)(v161 + 160) = 0;
    *(_QWORD *)(v161 + 136) = 0;
    *(_QWORD *)(v161 + 144) = 0;
    *(_QWORD *)(v161 + 168) = 0;
    *(_QWORD *)(v161 + 176) = 0;
    v368 = *(_QWORD *)(v161 + 40);
    v163 = *(_QWORD *)(v368 + 408);
    v164 = sub_2367F4718(v163 + 424);
    *(_QWORD *)(v161 + 112) = v164;
    if (*(_BYTE *)(v163 + 432))
      v165 = 8 * *(_DWORD *)(v163 + 436) + 8;
    else
      v165 = *(_DWORD *)(v163 + 440);
    *(_QWORD *)(v161 + 120) = v165;
    *(_QWORD *)(v161 + 152) = v163 + 328;
    v294 = *(_OWORD *)(v368 + 312);
    *(_OWORD *)(v161 + 73) = *(_OWORD *)(v368 + 321);
    *(_OWORD *)(v161 + 64) = v294;
    v295 = *(_QWORD *)(v161 + 48);
    v296 = *(_DWORD *)(v161 + 76);
    v297 = v295 + 456 * v296;
    v298 = v297 + 2376;
    *(_QWORD *)(v161 + 96) = v297 + 2376;
    if (*(_DWORD *)(v297 + 2472) || (v305 = *(_DWORD **)(v297 + 2792), v305 != *(_DWORD **)(v298 + 424)) && *v305)
    {
      if (*(_DWORD *)(v298 + 100)
        || (v306 = *(_QWORD *)(v298 + 416), v306 != *(_QWORD *)(v298 + 424)) && *(_DWORD *)(v306 + 4))
      {
        if (*(_BYTE *)(v295 + 456 * v296 + 2824))
          goto LABEL_377;
        v299 = *(_QWORD *)(v368 + 344);
        v300 = *(_QWORD *)(v368 + 352);
        if (v299 == v300)
        {
LABEL_313:
          v307 = *(_DWORD *)(v298 + 96);
          if (!v307)
          {
            v310 = *(_DWORD **)(v298 + 416);
            if (v310 == *(_DWORD **)(v298 + 424) || !*v310)
              goto LABEL_344;
          }
          v308 = *(_DWORD *)(v298 + 100);
          if (!v308)
          {
            v311 = *(_QWORD *)(v298 + 416);
            if (v311 == *(_QWORD *)(v298 + 424) || !*(_DWORD *)(v311 + 4))
              goto LABEL_344;
          }
          if (!v307)
          {
            v309 = *(unsigned int **)(v298 + 416);
            if (v309 == *(unsigned int **)(v298 + 424))
              v307 = 0;
            else
              v307 = *v309;
          }
          if (*(_QWORD *)(v161 + 112) > (unint64_t)v307)
            goto LABEL_336;
          if (!v308)
          {
            v320 = *(_QWORD *)(v298 + 416);
            if (v320 == *(_QWORD *)(v298 + 424))
              v308 = 0;
            else
              v308 = *(_DWORD *)(v320 + 4);
          }
          if (*(_QWORD *)(v161 + 120) > (unint64_t)v308 || *(_DWORD *)(v298 + 40) || *(_DWORD *)(v298 + 44))
LABEL_336:
            v319 = 1;
          else
LABEL_344:
            v319 = 0;
          v321 = *(_QWORD *)(v368 + 344);
          v322 = *(_QWORD *)(v368 + 352);
          if (v321 != v322)
          {
            v323 = *(_QWORD *)(v368 + 344);
            do
            {
              if (v319)
                goto LABEL_348;
              v324 = *(_QWORD *)(v161 + 48) + 456 * *(unsigned int *)(v323 + 20);
              v325 = v324 + 2376;
              v326 = *(unsigned int *)(v324 + 2472);
              if (!(_DWORD)v326)
              {
                v329 = *(_DWORD **)(v324 + 2792);
                if (v329 == *(_DWORD **)(v325 + 424) || !*v329)
                  goto LABEL_374;
              }
              v327 = *(unsigned int *)(v325 + 100);
              if (!(_DWORD)v327)
              {
                v330 = *(_QWORD *)(v325 + 416);
                if (v330 == *(_QWORD *)(v325 + 424) || !*(_DWORD *)(v330 + 4))
                  goto LABEL_374;
              }
              if (!v326)
              {
                v328 = *(unsigned int **)(v325 + 416);
                if (v328 == *(unsigned int **)(v325 + 424))
                  v326 = 0;
                else
                  v326 = *v328;
              }
              if (*(_QWORD *)(v161 + 112) > v326)
                goto LABEL_348;
              if (!*(_DWORD *)(v325 + 100))
              {
                v331 = *(_QWORD *)(v325 + 416);
                if (v331 == *(_QWORD *)(v325 + 424))
                  v327 = 0;
                else
                  v327 = *(unsigned int *)(v331 + 4);
              }
              v333 = *(_DWORD *)(v325 + 40);
              v332 = *(_DWORD *)(v325 + 44);
              v334 = *(_QWORD *)(v161 + 120) <= v327 && v333 == 0;
              if (!v334 || v332 != 0)
LABEL_348:
                v319 = 1;
              else
LABEL_374:
                v319 = 0;
              v323 += 40;
            }
            while (v323 != v322);
          }
          if (!v319 && (!*(_BYTE *)(**(_QWORD **)(v161 + 48) + 41) || *(_BYTE *)(v377 + 5592)))
          {
            v342 = 0xCCCCCCCCCCCCCCCDLL * ((v322 - v321) >> 3) + 1;
            v343 = *(_QWORD *)(v161 + 128);
            v344 = *(_QWORD *)(v161 + 136);
            v345 = 0xAAAAAAAAAAAAAAABLL * ((v344 - v343) >> 2);
            v346 = v342 - v345;
            if (v342 <= v345)
            {
              v27 = v373;
              if (v342 < v345)
                *(_QWORD *)(v161 + 136) = v343 + 12 * v342;
            }
            else
            {
              v347 = *(_QWORD *)(v161 + 144);
              if (0xAAAAAAAAAAAAAAABLL * ((v347 - v344) >> 2) >= v346)
              {
                bzero(*(void **)(v161 + 136), 12 * ((12 * v346 - 12) / 0xC) + 12);
                *(_QWORD *)(v161 + 136) = v344 + 12 * ((12 * v346 - 12) / 0xC) + 12;
                v27 = v373;
              }
              else
              {
                if (v342 > 0x1555555555555555)
                  sub_2367C3440();
                v348 = 0xAAAAAAAAAAAAAAABLL * ((v347 - v343) >> 2);
                if (2 * v348 > v342)
                  v342 = 2 * v348;
                if (v348 >= 0xAAAAAAAAAAAAAAALL)
                  v349 = 0x1555555555555555;
                else
                  v349 = v342;
                v350 = (char *)sub_2367E4DB0(v349);
                v351 = &v350[12 * v345];
                v353 = &v350[12 * v352];
                bzero(v351, 12 * ((12 * v346 - 12) / 0xC) + 12);
                v354 = &v351[12 * ((12 * v346 - 12) / 0xC) + 12];
                v356 = *(_DWORD **)(v161 + 128);
                v355 = *(_DWORD **)(v161 + 136);
                if (v355 == v356)
                {
                  v27 = v373;
                }
                else
                {
                  v27 = v373;
                  do
                  {
                    v357 = *(_QWORD *)(v355 - 3);
                    v355 -= 3;
                    v358 = v355[2];
                    *(_QWORD *)(v351 - 12) = v357;
                    v351 -= 12;
                    *((_DWORD *)v351 + 2) = v358;
                  }
                  while (v355 != v356);
                  v355 = *(_DWORD **)(v161 + 128);
                }
                *(_QWORD *)(v161 + 128) = v351;
                *(_QWORD *)(v161 + 136) = v354;
                *(_QWORD *)(v161 + 144) = v353;
                if (v355)
                  operator delete(v355);
              }
            }
            v359 = *(_QWORD *)(v161 + 128);
            *(_DWORD *)(v359 + 4) = *(_DWORD *)(v161 + 68);
            *(_BYTE *)(v359 + 8) = *(_BYTE *)(v161 + 72);
            *(_BYTE *)v359 = 0x306040201uLL >> (8 * *(_DWORD *)(v161 + 64));
            v360 = *(_QWORD *)(v368 + 344);
            v361 = *(_QWORD *)(v368 + 352) - v360;
            if (v361)
            {
              v362 = v361 / 40;
              if (v362 <= 1)
                v362 = 1;
              v363 = (_BYTE *)(v360 + 16);
              v364 = (_BYTE *)(v359 + 20);
              do
              {
                *((_DWORD *)v364 - 1) = *((_DWORD *)v363 - 1);
                *v364 = *v363;
                *(v364 - 8) = 0x306040201uLL >> (8 * *((_DWORD *)v363 - 2));
                v363 += 40;
                v364 += 12;
                --v362;
              }
              while (v362);
            }
            goto LABEL_378;
          }
LABEL_377:
          *(_DWORD *)(v161 + 104) = 1;
LABEL_378:
          v436 = v161;
          sub_23688A0E4((char **)&v474, &v436);
          v336 = v436;
          v436 = 0;
          if (v336)
            (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
          v97 = 0;
          goto LABEL_381;
        }
        while (1)
        {
          v301 = v295 + 456 * *(unsigned int *)(v299 + 20);
          v302 = v301 + 2376;
          if (!*(_DWORD *)(v301 + 2472))
          {
            v303 = *(_DWORD **)(v301 + 2792);
            if (v303 == *(_DWORD **)(v302 + 424) || !*v303)
              break;
          }
          if (!*(_DWORD *)(v302 + 100))
          {
            v304 = *(_QWORD *)(v302 + 416);
            if (v304 == *(_QWORD *)(v302 + 424) || !*(_DWORD *)(v304 + 4))
              break;
          }
          v299 += 40;
          if (v299 == v300)
            goto LABEL_313;
        }
      }
    }
    *(_DWORD *)v478 = 0;
    sub_236862354((char **)(v161 + 160), v164, v478);
    goto LABEL_313;
  }
LABEL_115:
  if ((a4 & 0x10000) != 0)
  {
    v157 = *(_QWORD *)(a2 + 408);
    v158 = *(_QWORD *)(v157 + 328);
    v159 = *(_QWORD *)(v157 + 336);
    while (v158 != v159)
    {
      if (*(_DWORD *)(v158 + 12) == 2)
      {
        v166 = *(_QWORD *)(v27 + 88);
        v167 = *(_QWORD *)(v166 + 328);
        if (*(_QWORD *)(v166 + 336) != v167)
        {
          v168 = 0;
          v169 = 0;
          do
          {
            if (*(_DWORD *)(v167 + v168 + 12) == 2)
            {
              v170 = operator new();
              *(_OWORD *)(v170 + 24) = 0u;
              *(_OWORD *)(v170 + 8) = 0u;
              *(_QWORD *)v170 = &off_2507FFB28;
              *(_QWORD *)(v170 + 40) = v169 + 3;
              *(_QWORD *)(v170 + 48) = v167 + v168 + 76;
              v413 = v170;
              sub_23688A0E4((char **)&v474, &v413);
              v171 = v413;
              v413 = 0;
              if (v171)
                (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
            }
            ++v169;
            v172 = *(_QWORD *)(v27 + 88);
            v167 = *(_QWORD *)(v172 + 328);
            v168 += 96;
          }
          while (v169 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v172 + 336) - v167) >> 5));
        }
        break;
      }
      v158 += 96;
    }
  }
  v106 = operator new();
  v107 = v377 + 4944;
  sub_23688FA44((uint64_t)v478, v377 + 4944);
  *(_OWORD *)(v106 + 24) = 0u;
  *(_OWORD *)(v106 + 8) = 0u;
  *(_QWORD *)v106 = &off_250800030;
  *(_QWORD *)(v106 + 40) = &off_2507FFA18;
  *(_WORD *)(v106 + 48) = *(_WORD *)&v478[8];
  *(_QWORD *)(v106 + 56) = *(_QWORD *)&v478[16];
  *(_QWORD *)(v106 + 61) = *(_QWORD *)&v478[21];
  *(_OWORD *)(v106 + 72) = *(_OWORD *)v479;
  *(_QWORD *)(v106 + 88) = v480;
  *(_OWORD *)v479 = 0u;
  v108 = v481;
  v109 = v482;
  v110 = v483;
  *(_DWORD *)(v106 + 144) = v484;
  *(_OWORD *)(v106 + 112) = v109;
  *(_OWORD *)(v106 + 128) = v110;
  *(_OWORD *)(v106 + 96) = v108;
  v111 = v485;
  v112 = v487;
  *(_QWORD *)(v106 + 152) = &off_250800470;
  *(_QWORD *)(v106 + 160) = v111;
  *(_QWORD *)(v106 + 168) = &off_2507FFCC0;
  *(_OWORD *)(v106 + 176) = v486;
  *(_QWORD *)(v106 + 192) = &off_250800470;
  *(_QWORD *)(v106 + 200) = v112;
  v113 = v488;
  v114 = v489;
  *(_QWORD *)(v106 + 208) = &off_250800470;
  *(_QWORD *)(v106 + 216) = v113;
  *(_QWORD *)(v106 + 224) = &off_250800470;
  *(_QWORD *)(v106 + 232) = v114;
  *(_OWORD *)(v106 + 266) = *(_OWORD *)((char *)v491 + 10);
  v115 = v491[0];
  *(_OWORD *)(v106 + 240) = v490;
  *(_OWORD *)(v106 + 256) = v115;
  *(_QWORD *)(v106 + 288) = &off_2507FFA18;
  *(_WORD *)(v106 + 296) = (_WORD)v493;
  *(_QWORD *)(v106 + 309) = *(_QWORD *)((char *)v494 + 5);
  v116 = v496;
  *(_QWORD *)(v106 + 304) = v494[0];
  *(_OWORD *)(v106 + 320) = v495;
  *(_QWORD *)(v106 + 336) = v116;
  v495 = 0u;
  v480 = 0;
  v496 = 0;
  v117 = v497;
  v118 = v498;
  v119 = v499;
  *(_DWORD *)(v106 + 392) = v500;
  *(_OWORD *)(v106 + 360) = v118;
  *(_OWORD *)(v106 + 376) = v119;
  *(_OWORD *)(v106 + 344) = v117;
  v120 = v501;
  *(_QWORD *)(v106 + 400) = &off_250800470;
  *(_QWORD *)(v106 + 408) = v120;
  *(_QWORD *)(v106 + 416) = &off_2507FFCC0;
  *(_OWORD *)(v106 + 424) = v502;
  v121 = v503;
  v122 = v504[1];
  *(_QWORD *)(v106 + 440) = &off_250800470;
  *(_QWORD *)(v106 + 448) = v121;
  *(_QWORD *)(v106 + 456) = &off_250800470;
  *(_QWORD *)(v106 + 464) = v122;
  v123 = v504[3];
  *(_QWORD *)(v106 + 472) = &off_250800470;
  *(_QWORD *)(v106 + 480) = v123;
  *(_QWORD *)(v106 + 488) = &off_2507FFA18;
  *(_WORD *)(v106 + 496) = v505;
  v124 = v506[0];
  *(_QWORD *)(v106 + 509) = *(_QWORD *)((char *)v506 + 5);
  *(_QWORD *)(v106 + 504) = v124;
  *(_OWORD *)(v106 + 520) = *(_OWORD *)v507;
  *(_QWORD *)(v106 + 536) = v508;
  *(_OWORD *)v507 = 0u;
  v508 = 0;
  v125 = v509;
  v126 = v510;
  v127 = v511;
  *(_DWORD *)(v106 + 592) = v512;
  *(_OWORD *)(v106 + 560) = v126;
  *(_OWORD *)(v106 + 576) = v127;
  *(_OWORD *)(v106 + 544) = v125;
  *(_QWORD *)(v106 + 600) = &off_250800470;
  *(_QWORD *)(v106 + 608) = v513;
  *(_QWORD *)(v106 + 616) = &off_2507FFCC0;
  *(_OWORD *)(v106 + 624) = v514;
  *(_QWORD *)(v106 + 640) = &off_250800470;
  *(_QWORD *)(v106 + 648) = v515;
  *(_QWORD *)(v106 + 656) = &off_250800470;
  *(_QWORD *)(v106 + 664) = v516;
  *(_QWORD *)(v106 + 672) = &off_250800470;
  *(_QWORD *)(v106 + 680) = v517;
  memcpy((void *)(v106 + 688), v518, 0x120uLL);
  v128 = (uint64_t *)(v106 + 976);
  *(_OWORD *)(v106 + 976) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v106 + 992) = _D0;
  v133.i32[0] = *(_DWORD *)(v106 + 904);
  v134.i32[0] = *(_DWORD *)(v106 + 240);
  if (*(float *)v133.i32 != *(float *)v134.i32)
  {
    v366 = v133;
    v367 = v134;
    v365 = HIDWORD(_D0);
    if (!*(_BYTE *)(v106 + 104))
    {
      v135 = (_QWORD *)(v106 + 892);
      v136 = *(_DWORD *)(v106 + 112);
      if (*(float *)v133.i32 < *(float *)v134.i32 && v136 == 16)
      {
        v137 = operator new();
        *(_DWORD *)v137 = 0;
        v138 = *(int32x2_t *)v366.i8;
        *(_QWORD *)(v137 + 4) = v367.u32[0];
        *(_DWORD *)(v137 + 12) = v366.i32[0];
        *(_QWORD *)(v137 + 16) = *v135;
        *(_DWORD *)(v137 + 24) = *(_DWORD *)(v106 + 900);
        *(_DWORD *)(v137 + 28) = 0;
        v139 = 0.0;
        if (*(float *)v367.i32 != 0.0)
        {
          v140 = pow(fabsf(*(float *)v367.i32) * 0.0000999999975, 0.159301758);
          *(double *)v141.i64 = pow((v140 * 18.8515625 + 0.8359375) / (v140 * 18.6875 + 1.0), 78.84375);
          v138 = *(int32x2_t *)v366.i8;
          *(float *)v141.i32 = *(double *)v141.i64;
          v142.i64[0] = 0x8000000080000000;
          v142.i64[1] = 0x8000000080000000;
          LODWORD(v139) = vbslq_s8(v142, v141, v367).u32[0];
        }
        *(float *)(v137 + 32) = v139;
        *(float *)(v137 + 36) = v139;
        v143 = 1.0 / v139;
        v144 = (float)(1.0 / v139) * 0.0;
        *(float *)(v137 + 40) = v143;
        *(float *)(v137 + 44) = v144;
        if (*(float *)v138.i32 != 0.0)
        {
          v145 = pow(fabsf(*(float *)v138.i32) * 0.0000999999975, 0.159301758);
          *(double *)v146.i64 = pow((v145 * 18.8515625 + 0.8359375) / (v145 * 18.6875 + 1.0), 78.84375);
          v138 = *(int32x2_t *)v366.i8;
          *(float *)v146.i32 = *(double *)v146.i64;
          v147.i64[0] = 0x8000000080000000;
          v147.i64[1] = 0x8000000080000000;
          v144 = v143 * *(float *)vbslq_s8(v147, v146, v366).i32;
        }
        v148 = (float)(v144 * 1.5) + -0.5;
        *(float *)(v137 + 48) = v144;
        *(float *)(v137 + 52) = v148;
        v149 = 1.0 - v148;
        v150 = 1.0 / (float)(1.0 - v148);
        v151 = v149 <= 0.000001;
        v152 = 1000000.0;
        if (!v151)
          v152 = v150;
        *(float *)(v137 + 56) = v152;
        *(float32x2_t *)(v137 + 60) = vdiv_f32((float32x2_t)__PAIR64__(v365, v367.u32[0]), (float32x2_t)vdup_lane_s32(v138, 0));
        *(_QWORD *)(v137 + 72) = 0x461C400038D1B717;
        v153 = *v128;
        *v128 = v137;
        if (!v153)
          goto LABEL_158;
      }
      else
      {
        if (v136 != 18 || !*(_BYTE *)(v106 + 352) && *(_DWORD *)(v106 + 360) == 18)
          goto LABEL_158;
        v173 = operator new();
        v174 = log2f(*(float *)(v106 + 904) / *(float *)(v106 + 240));
        v175 = powf(1.111, v174) + -1.0;
        *(float *)v173 = v175;
        v176 = v175 < -0.01;
        if (v175 > 0.01)
          v176 = 1;
        *(_BYTE *)(v173 + 4) = v176;
        *(_QWORD *)(v173 + 8) = *v135;
        *(_DWORD *)(v173 + 16) = *(_DWORD *)(v106 + 900);
        v177 = *(_QWORD *)(v106 + 984);
        *(_QWORD *)(v106 + 984) = v173;
        if (!v177)
          goto LABEL_158;
      }
      MEMORY[0x23B7F8F48]();
    }
LABEL_158:
    if (!*(_BYTE *)(v106 + 352) && *(_DWORD *)(v106 + 360) == 16 && (*v128 || *(_QWORD *)(v106 + 984)))
    {
      *(float *)(v106 + 992) = 10000.0 / *(float *)(v106 + 240);
      *(float *)(v106 + 996) = *(float *)(v106 + 904) / 10000.0;
    }
  }
  v504[4] = &off_2507FFA18;
  if (v507[0])
  {
    v507[1] = v507[0];
    operator delete(v507[0]);
  }
  __p = &off_2507FFA18;
  if ((_QWORD)v495)
  {
    *((_QWORD *)&v495 + 1) = v495;
    operator delete((void *)v495);
  }
  *(_QWORD *)v478 = &off_2507FFA18;
  if (v479[0])
  {
    v479[1] = v479[0];
    operator delete(v479[0]);
  }
  if (*v128 || *(_QWORD *)(v106 + 984))
  {
    v178 = v377 + 5256;
    if (!v97)
    {
      if (*(_BYTE *)(v377 + 5256))
      {
LABEL_173:
        v179 = *(float *)(v377 + 5792);
        v180 = operator new();
        *(_OWORD *)(v180 + 24) = 0u;
        *(_OWORD *)(v180 + 8) = 0u;
        *(_QWORD *)v180 = &off_2507FDAC0;
        *(float *)(v180 + 40) = 1.0 / v179;
        *(_BYTE *)(v180 + 44) = 1;
      }
      else
      {
        v286 = *(_DWORD *)(v377 + 5264);
        switch(v286)
        {
          case 8:
            v180 = operator new();
            *(_OWORD *)(v180 + 24) = 0u;
            *(_OWORD *)(v180 + 8) = 0u;
            v287 = &off_2507FDB28;
            goto LABEL_332;
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
            goto LABEL_326;
          case 13:
            v180 = operator new();
            *(_OWORD *)(v180 + 24) = 0u;
            *(_OWORD *)(v180 + 8) = 0u;
            v287 = &off_2507FDA58;
            goto LABEL_332;
          case 16:
            v318 = *(float *)(v377 + 5144);
            v180 = operator new();
            *(_OWORD *)(v180 + 24) = 0u;
            *(_OWORD *)(v180 + 8) = 0u;
            *(_QWORD *)v180 = &off_2507FD988;
            *(float *)(v180 + 40) = v318 * 0.0001;
            *(float *)(v180 + 44) = 10000.0 / v318;
            *(_BYTE *)(v180 + 48) = 1;
            break;
          case 17:
            goto LABEL_173;
          case 18:
            v312 = *(float *)(v377 + 5144);
            v313 = *(_DWORD *)(v377 + 5804);
            v314 = *(_QWORD *)(v377 + 5796);
            v180 = operator new();
            v315 = log2f(v312 / 1000.0);
            v316 = (float)(powf(1.111, v315) * 1.2) + -1.0;
            v317 = v316 < -0.01;
            *(float *)(v180 + 40) = v316;
            if (v316 > 0.01)
              v317 = 1;
            *(_BYTE *)(v180 + 44) = v317;
            *(_QWORD *)(v180 + 48) = v314;
            *(_DWORD *)(v180 + 56) = v313;
            *(_OWORD *)(v180 + 8) = 0u;
            *(_OWORD *)(v180 + 24) = 0u;
            *(_QWORD *)v180 = &off_2507FDB90;
            *(_BYTE *)(v180 + 60) = 1;
            break;
          default:
            if (v286 == 1)
            {
              v180 = operator new();
              *(_OWORD *)(v180 + 24) = 0u;
              *(_OWORD *)(v180 + 8) = 0u;
              v287 = &off_2507FD9F0;
LABEL_332:
              *(_QWORD *)v180 = v287;
              *(_BYTE *)(v180 + 41) = 1;
            }
            else
            {
LABEL_326:
              v180 = operator new();
              *(_OWORD *)(v180 + 24) = 0u;
              *(_OWORD *)(v180 + 8) = 0u;
              *(_QWORD *)v180 = &off_2507FDBF8;
              *(_BYTE *)(v180 + 41) = 0;
            }
            break;
        }
      }
      v412 = v180;
      sub_23688A0E4((char **)&v474, &v412);
      v181 = v412;
      v412 = 0;
      if (v181)
        (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
    }
    v411 = v106;
    sub_23688A0E4((char **)&v474, &v411);
    v182 = v411;
    v411 = 0;
    if (v182)
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
    v178 = v377 + 5256;
    if (!v97)
      goto LABEL_185;
  }
  if (*(_BYTE *)(v82 + 596))
  {
    v183 = 4;
    v184 = v377;
  }
  else
  {
    v184 = v377;
    v183 = 3;
    if (*(_DWORD *)(v377 + 5000) == 1)
      v183 = 1;
  }
  if (!*(_BYTE *)(v178 + 336))
  {
    v284 = 3;
    if (*(_DWORD *)(v184 + 5248) == 1)
      v284 = 1;
    if (*(_BYTE *)(v377 + 5812) && v284 == v183)
    {
      sub_2367C5AC8(v184 + 5392);
      if (v285)
      {
        v279 = 1;
        goto LABEL_276;
      }
      sub_2368ABB50((uint64_t *)v478, v107);
      if (!*(_QWORD *)v478)
        goto LABEL_185;
      v409 = *(_QWORD *)v478;
      sub_23688A0E4((char **)&v474, &v409);
      v185 = v409;
      v409 = 0;
      if (!v185)
        goto LABEL_185;
      goto LABEL_184;
    }
  }
  sub_23688CC44(&v410, v107);
  sub_23688A0E4((char **)&v474, &v410);
  v185 = v410;
  v410 = 0;
  if (v185)
LABEL_184:
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
LABEL_185:
  a1 = v377;
  if (*(_QWORD *)(v377 + 4376) || *(_QWORD *)(v377 + 4400))
  {
    v186 = *(_QWORD *)(v377 + 4320);
    v187 = *(_QWORD *)(v377 + 4328);
    v188 = *(_BYTE *)(v82 + 41);
    v189 = *(_DWORD *)(v377 + 4452);
    v190 = operator new();
    v191 = v190;
    *(_OWORD *)(v190 + 24) = 0u;
    *(_OWORD *)(v190 + 8) = 0u;
    *(_QWORD *)v190 = &off_2507FDED0;
    *(_QWORD *)(v190 + 40) = v186;
    *(_QWORD *)(v190 + 48) = v187;
    *(_OWORD *)(v190 + 56) = *(_OWORD *)(v377 + 4368);
    *(_OWORD *)(v190 + 72) = *(_OWORD *)(v377 + 4384);
    v192 = *(_QWORD *)(v377 + 4400);
    *(_QWORD *)(v190 + 88) = 0;
    *(_QWORD *)(v190 + 96) = v192;
    *(_OWORD *)(v190 + 104) = *(_OWORD *)v82;
    v193 = *(unsigned int *)(v377 + 4336);
    v194 = *(_DWORD *)(v377 + 4344) == 2;
    v195 = 3;
    if (v193 < 3)
      v195 = 1;
    *(_QWORD *)(v190 + 120) = v193;
    *(_QWORD *)(v190 + 184) = 0;
    *(_BYTE *)(v190 + 128) = v194;
    *(_DWORD *)(v190 + 132) = *(_DWORD *)(v377 + 4340);
    *(_QWORD *)(v190 + 136) = *(_QWORD *)(v377 + 4360);
    *(_QWORD *)(v190 + 152) = v195;
    v197 = v193 == 2 || v193 == 4;
    *(_BYTE *)(v190 + 160) = v197;
    *(_BYTE *)(v190 + 161) = v370;
    *(_BYTE *)(v190 + 162) = v188;
    *(_QWORD *)(v190 + 168) = v375;
    *(_BYTE *)(v190 + 176) = (v189 < 9) & (0x18Cu >> v189);
    *(_BYTE *)(v190 + 177) = (v189 < 8) & (0xD8u >> v189);
    *(_BYTE *)(v190 + 178) = v189 - 5 < 4;
    *(_QWORD *)(v190 + 192) = 0;
    *(_QWORD *)(v190 + 200) = 0;
    v376 = (_QWORD *)(v190 + 184);
    *(_DWORD *)v478 = 1065353216;
    v369 = v190;
    sub_23681EDEC((_QWORD *)(v190 + 208), 0x400uLL, v478);
    *(_OWORD *)(v191 + 232) = 0u;
    *(_OWORD *)(v191 + 248) = 0u;
    *(_OWORD *)(v191 + 264) = 0u;
    v198 = *(_QWORD *)(v377 + 4432);
    v199 = *(_QWORD *)(v377 + 4424);
    if (v198 != v199)
    {
      v200 = 0;
      do
      {
        v201 = v199 + 88 * v200;
        v202 = *(_QWORD *)(v201 + 64);
        if (*(_QWORD *)(v201 + 40) | v202)
        {
          v203 = (unsigned int *)(v199 + 88 * v200);
          v204 = *(_OWORD *)(v201 + 32);
          *(_OWORD *)&v478[16] = *(_OWORD *)(v201 + 48);
          *(_OWORD *)v478 = v204;
          v206 = *((_QWORD *)v203 + 9);
          v205 = *((_QWORD *)v203 + 10);
          v207 = v203[1];
          v208 = v203[2] == 2;
          v209 = *v203;
          v210 = *((_QWORD *)v203 + 3);
          v211 = v200 + 3;
          v213 = *(_OWORD **)(v191 + 192);
          v212 = *(_QWORD *)(v191 + 200);
          if ((unint64_t)v213 >= v212)
          {
            v216 = (_OWORD *)*v376;
            v217 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v213 - *v376) >> 5);
            v218 = v217 + 1;
            if (v217 + 1 > 0x2AAAAAAAAAAAAAALL)
              sub_2367C3440();
            v219 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212 - (_QWORD)v216) >> 5);
            if (2 * v219 > v218)
              v218 = 2 * v219;
            if (v219 >= 0x155555555555555)
              v220 = 0x2AAAAAAAAAAAAAALL;
            else
              v220 = v218;
            if (v220)
            {
              v371 = v209;
              v372 = v208;
              v374 = v207;
              if (v220 > 0x2AAAAAAAAAAAAAALL)
                sub_2367C3488();
              v221 = v210;
              v222 = v220;
              v223 = (char *)operator new(96 * v220);
              v210 = v221;
              v207 = v374;
              v208 = v372;
              v209 = v371;
            }
            else
            {
              v223 = 0;
              v222 = 0;
            }
            v224 = *(_OWORD *)&v478[16];
            v225 = &v223[96 * v217];
            *(_OWORD *)v225 = *(_OWORD *)v478;
            *((_OWORD *)v225 + 1) = v224;
            *((_QWORD *)v225 + 4) = 0;
            *((_QWORD *)v225 + 5) = v202;
            *((_QWORD *)v225 + 6) = v206;
            *((_QWORD *)v225 + 7) = v205;
            *((_QWORD *)v225 + 8) = v209;
            v225[72] = v208;
            *((_DWORD *)v225 + 19) = v207;
            *((_QWORD *)v225 + 10) = v210;
            *((_QWORD *)v225 + 11) = v211;
            v226 = v225;
            if (v213 == v216)
            {
              a1 = v377;
              v191 = v369;
            }
            else
            {
              a1 = v377;
              v191 = v369;
              do
              {
                v227 = *(v213 - 5);
                *((_OWORD *)v226 - 6) = *(v213 - 6);
                *((_OWORD *)v226 - 5) = v227;
                v228 = *(v213 - 4);
                v229 = *(v213 - 3);
                v230 = *(v213 - 1);
                *((_OWORD *)v226 - 2) = *(v213 - 2);
                *((_OWORD *)v226 - 1) = v230;
                *((_OWORD *)v226 - 4) = v228;
                *((_OWORD *)v226 - 3) = v229;
                v226 -= 96;
                v213 -= 6;
              }
              while (v213 != v216);
              v213 = (_OWORD *)*v376;
            }
            v215 = v225 + 96;
            *(_QWORD *)(v191 + 184) = v226;
            *(_QWORD *)(v191 + 192) = v225 + 96;
            *(_QWORD *)(v191 + 200) = &v223[96 * v222];
            if (v213)
              operator delete(v213);
          }
          else
          {
            v214 = *(_OWORD *)(v201 + 48);
            *v213 = *(_OWORD *)(v201 + 32);
            v213[1] = v214;
            *((_QWORD *)v213 + 4) = 0;
            *((_QWORD *)v213 + 5) = v202;
            *((_QWORD *)v213 + 6) = v206;
            *((_QWORD *)v213 + 7) = v205;
            *((_QWORD *)v213 + 8) = v209;
            *((_BYTE *)v213 + 72) = v208;
            *((_DWORD *)v213 + 19) = v207;
            v215 = v213 + 6;
            *((_QWORD *)v213 + 10) = v210;
            *((_QWORD *)v213 + 11) = v211;
            a1 = v377;
          }
          *(_QWORD *)(v191 + 192) = v215;
          v198 = *(_QWORD *)(a1 + 4432);
          v199 = *(_QWORD *)(a1 + 4424);
        }
        ++v200;
      }
      while (v200 < 0x2E8BA2E8BA2E8BA3 * ((v198 - v199) >> 3));
    }
    v408 = v191;
    sub_23688A0E4((char **)&v474, &v408);
    v231 = v408;
    v408 = 0;
    if (v231)
      (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  }
  else
  {
    v387 = &off_2507FFA18;
    v388 = *(_WORD *)(v377 + 5200);
    v288 = *(_QWORD *)(v377 + 5213);
    v389[0] = *(_QWORD *)(v377 + 5208);
    *(_QWORD *)((char *)v389 + 5) = v288;
    v390 = 0;
    v391 = 0;
    v392 = 0;
    sub_2367C9F60(&v390, *(const void **)(v377 + 5224), *(_QWORD *)(v377 + 5232), *(_QWORD *)(v377 + 5232) - *(_QWORD *)(v377 + 5224));
    v393 = *(_OWORD *)(v377 + 5248);
    v394 = *(_OWORD *)(v377 + 5264);
    v395 = *(_OWORD *)(v377 + 5280);
    v396 = *(_DWORD *)(v377 + 5296);
    v289 = *(_QWORD *)(v377 + 5312);
    v397 = &off_250800470;
    v398 = v289;
    v400 = *(_OWORD *)(v377 + 5328);
    v399 = &off_2507FFCC0;
    v290 = *(_QWORD *)(v377 + 5352);
    v401 = &off_250800470;
    v402 = v290;
    v291 = *(_QWORD *)(v377 + 5368);
    v403 = &off_250800470;
    v404 = v291;
    v292 = *(_QWORD *)(v377 + 5384);
    v405 = &off_250800470;
    v406 = v292;
    sub_236891FBC(&v407, v373, (uint64_t)&v387);
    sub_23688A0E4((char **)&v474, &v407);
    v293 = v407;
    v407 = 0;
    if (v293)
      (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
    v387 = &off_2507FFA18;
    if (v390)
    {
      v391 = v390;
      operator delete(v390);
    }
  }
LABEL_221:
  v232 = *(_QWORD *)(a1 + 4208);
  v384 = *(_OWORD *)(v232 + 72);
  v385 = *(_OWORD *)(v232 + 88);
  v386 = *(_OWORD *)(v232 + 104);
  v380 = *(_OWORD *)(v232 + 8);
  v381 = *(_OWORD *)(v232 + 24);
  v382 = *(_OWORD *)(v232 + 40);
  v383 = *(_OWORD *)(v232 + 56);
  v233 = *(_QWORD *)(v232 + 120);
  v379 = *(_QWORD *)(v232 + 144);
  v378 = *(_OWORD *)(v232 + 128);
  if (v477)
  {
    v234 = (_OWORD *)operator new();
    v234[14] = 0u;
    v234[15] = 0u;
    v234[12] = 0u;
    v234[13] = 0u;
    v234[10] = 0u;
    v234[11] = 0u;
    v234[8] = 0u;
    v234[9] = 0u;
    v234[6] = 0u;
    v234[7] = 0u;
    v234[4] = 0u;
    v234[5] = 0u;
    v234[2] = 0u;
    v234[3] = 0u;
    *v234 = 0u;
    v234[1] = 0u;
    *(_QWORD *)v234 = &off_2507FFC58;
    *(_OWORD *)((char *)v234 + 248) = 0u;
    *(_OWORD *)((char *)v234 + 264) = 0u;
  }
  else
  {
    v234 = (_OWORD *)operator new();
    bzero(v234, 0x2D8uLL);
    *(_QWORD *)v234 = &off_2507FFD10;
    *((_QWORD *)v234 + 61) = 0;
    *((_QWORD *)v234 + 62) = 0;
    *((_QWORD *)v234 + 60) = 0;
    v234[16] = 0u;
    v234[17] = 0u;
    v234[18] = 0u;
    *((_QWORD *)v234 + 57) = 0;
    *((_QWORD *)v234 + 58) = 0;
    *((_QWORD *)v234 + 56) = 0;
    *(_OWORD *)((char *)v234 + 520) = 0u;
    *(_OWORD *)((char *)v234 + 536) = 0u;
    *(_OWORD *)((char *)v234 + 552) = 0u;
    *(_OWORD *)((char *)v234 + 568) = 0u;
    *(_OWORD *)((char *)v234 + 584) = 0u;
    *(_OWORD *)((char *)v234 + 600) = 0u;
    *(_OWORD *)((char *)v234 + 616) = 0u;
    *(_OWORD *)((char *)v234 + 632) = 0u;
    *(_OWORD *)((char *)v234 + 648) = 0u;
    *(_OWORD *)((char *)v234 + 664) = 0u;
    *((_QWORD *)v234 + 85) = 0;
  }
  v235 = (uint64_t *)v234 + 7;
  sub_23681D030((uint64_t)v234 + 56, (uint64_t)(*((_QWORD *)&v474 + 1) - v474) >> 3);
  if (*((_QWORD *)&v474 + 1) != (_QWORD)v474)
  {
    v236 = (uint64_t)(*((_QWORD *)&v474 + 1) - v474) >> 3;
    do
    {
      v237 = v236 - 1;
      v238 = v474;
      sub_23688A20C((char **)(*v235 + 24 * (v236 - 1)), v476);
      if (v236 != (uint64_t)(*((_QWORD *)&v474 + 1) - v474) >> 3 && v476 != 0)
      {
        v240 = 0;
        v241 = 0;
        do
        {
          v242 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v238 + 8 * v237) + 24))(*(_QWORD *)(v238 + 8 * v237), v241);
          v243 = *v235;
          v244 = *(_QWORD *)(*v235 + 24 * v236);
          if (v242 == 2)
          {
            v245 = (_QWORD *)(v244 + v240);
            v246 = *(_QWORD *)(v238 + 8 * v237);
            v247 = *(_QWORD *)(v243 + 24 * v237);
            *(_QWORD *)(v247 + v240) = *(_QWORD *)(v246 + 8)
                                     + (*v245 + (1 << *(_DWORD *)(v246 + 24)) - 1)
                                     / (unint64_t)(1 << *(_DWORD *)(v246 + 24));
            v248 = 1 << *(_DWORD *)(v246 + 32);
            v249 = *(_QWORD *)(v246 + 16) + (v245[1] + v248 - 1) / v248;
          }
          else
          {
            v247 = *(_QWORD *)(v243 + 24 * v237);
            v250 = (_QWORD *)(v244 + v240);
            *(_QWORD *)(v247 + v240) = *v250;
            v249 = v250[1];
          }
          *(_QWORD *)(v247 + v240 + 8) = v249;
          ++v241;
          v240 += 16;
        }
        while (v241 < v476);
      }
      --v236;
    }
    while (v237);
  }
  v234[9] = v384;
  v234[10] = v385;
  v234[11] = v386;
  v234[5] = v380;
  v234[6] = v381;
  v234[7] = v382;
  v234[8] = v383;
  *((_QWORD *)v234 + 24) = v233;
  v251 = *((_QWORD *)v234 + 28);
  *((_QWORD *)v234 + 27) = v379;
  v252 = *((_QWORD *)v234 + 29) - v251;
  *(_OWORD *)((char *)v234 + 200) = v378;
  if (v233 <= v252)
  {
    v253 = v377;
    if (v233 < v252)
      *((_QWORD *)v234 + 29) = v251 + v233;
  }
  else
  {
    sub_2367C8698((unint64_t *)v234 + 28, v233 - v252);
    v253 = v377;
  }
  v254 = (_QWORD **)(v234 + 2);
  sub_23681D030((uint64_t)(v234 + 2), (uint64_t)(*((_QWORD *)&v474 + 1) - v474) >> 3);
  sub_23688A20C(*((char ***)v234 + 4), v476);
  v255 = *((_QWORD *)&v474 + 1);
  v256 = v474;
  if (*((_QWORD *)&v474 + 1) - (_QWORD)v474 >= 9uLL)
  {
    v257 = v476;
    v258 = 1;
    v259 = v476;
    do
    {
      if (v259)
      {
        v260 = 0;
        v261 = v258 - 1;
        do
        {
          if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v256 + 8 * v261) + 24))(*(_QWORD *)(v256 + 8 * v261), v260) == 2)*(int64x2_t *)(**v254 + 16 * v260) = vaddq_s64(*(int64x2_t *)(**v254 + 16 * v260), *(int64x2_t *)(*(_QWORD *)(v256 + 8 * v261) + 24));
          ++v260;
          v257 = v476;
        }
        while (v260 < v476);
        v255 = *((_QWORD *)&v474 + 1);
        v256 = v474;
        v259 = v476;
      }
      ++v258;
    }
    while (v258 < (v255 - v256) >> 3);
    if ((unint64_t)(v255 - v256) >= 9)
    {
      v262 = 1;
      do
      {
        sub_23688A20C((char **)&(*v254)[3 * v262], v257);
        if (v476)
        {
          v263 = 0;
          v264 = 0;
          v265 = v262 - 1;
          do
          {
            v266 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v256 + 8 * v265) + 24))(*(_QWORD *)(v256 + 8 * v265), v264);
            v267 = *v254;
            v268 = (*v254)[3 * v265];
            v269 = *(_QWORD *)(v268 + v263);
            if (v266 == 2)
            {
              v270 = *(_QWORD *)(v256 + 8 * v265);
              v271 = v267[3 * v262];
              *(_QWORD *)(v271 + v263) = v269 - *(_QWORD *)(v270 + 24);
              v272 = *(_QWORD *)(v268 + v263 + 8) - *(_QWORD *)(v270 + 32);
            }
            else
            {
              v271 = v267[3 * v262];
              *(_QWORD *)(v271 + v263) = v269;
              v272 = *(_QWORD *)(v268 + v263 + 8);
            }
            *(_QWORD *)(v271 + v263 + 8) = v272;
            ++v264;
            v257 = v476;
            v263 += 16;
          }
          while (v264 < v476);
        }
        else
        {
          v257 = 0;
        }
        ++v262;
        v256 = v474;
      }
      while (v262 < (uint64_t)(*((_QWORD *)&v474 + 1) - v474) >> 3);
    }
  }
  v273 = (void **)v234 + 1;
  v274 = (_QWORD *)*((_QWORD *)v234 + 1);
  if (v274)
  {
    v275 = (_QWORD *)*((_QWORD *)v234 + 2);
    v276 = (void *)*((_QWORD *)v234 + 1);
    if (v275 != v274)
    {
      do
      {
        v278 = *--v275;
        v277 = v278;
        *v275 = 0;
        if (v278)
          (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
      }
      while (v275 != v274);
      v276 = *v273;
    }
    *((_QWORD *)v234 + 2) = v274;
    operator delete(v276);
    *v273 = 0;
    *((_QWORD *)v234 + 2) = 0;
    *((_QWORD *)v234 + 3) = 0;
  }
  *(_OWORD *)((char *)v234 + 8) = v474;
  *((_QWORD *)v234 + 3) = v475;
  v475 = 0;
  v474 = 0uLL;
  v279 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v234 + 48))(v234);
  if ((_DWORD)v279)
  {
    (*(void (**)(_OWORD *))(*(_QWORD *)v234 + 8))(v234);
  }
  else
  {
    v280 = *(_QWORD *)(v253 + 4488);
    *(_QWORD *)(v253 + 4488) = v234;
    if (v280)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
      v234 = *(_OWORD **)(v253 + 4488);
    }
    v281 = (_QWORD *)*((_QWORD *)v234 + 1);
    v282 = (_QWORD *)*((_QWORD *)v234 + 2);
    while (v281 != v282)
    {
      v279 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v281 + 32))(*v281);
      if ((_DWORD)v279)
        goto LABEL_276;
      ++v281;
    }
    v279 = 0;
  }
LABEL_276:
  *(_QWORD *)v478 = &v474;
  sub_2367D07F0((void ***)v478);
  return v279;
}

void sub_2367D00AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 168) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 136) = v6;
    operator delete(v6);
  }
  MEMORY[0x23B7F8F48](v1, 0x10E1C4001FEA094);
  STACK[0x468] = (unint64_t)&STACK[0x440];
  sub_2367D07F0((void ***)&STACK[0x468]);
  _Unwind_Resume(a1);
}

uint64_t sub_2367D050C(uint64_t a1, uint64_t a2)
{
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = &off_2507FFCE8;
  *(_DWORD *)(a1 + 8) = 1;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367F4014(a1 + 16, (uint64_t)&v5);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a2;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  sub_2367CA390(a1 + 216);
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return a1;
}

void sub_2367D05C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  uint64_t i;
  uint64_t v5;

  for (i = 25; i != 10; i -= 5)
    sub_2367C2F38(&v1[i]);
  if (*((char *)v1 + 87) < 0)
    operator delete(*v2);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

uint64_t *sub_2367D0618(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  v6 = a2[3];
  *(uint64_t *)((char *)a1 + 30) = *(uint64_t *)((char *)a2 + 30);
  a1[3] = v6;
  v7 = *(_OWORD *)(a2 + 5);
  a1[7] = a2[7];
  *(_OWORD *)(a1 + 5) = v7;
  v8 = (void **)(a1 + 8);
  if (*((char *)a1 + 87) < 0)
    operator delete(*v8);
  v9 = *((_OWORD *)a2 + 4);
  a1[10] = a2[10];
  *(_OWORD *)v8 = v9;
  *((_BYTE *)a2 + 87) = 0;
  *((_BYTE *)a2 + 64) = 0;
  a1[11] = a2[11];
  sub_2367D086C((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  v10 = (void *)a1[31];
  *((_WORD *)a1 + 112) = *((_WORD *)a2 + 112);
  v11 = a2[29];
  *(uint64_t *)((char *)a1 + 237) = *(uint64_t *)((char *)a2 + 237);
  a1[29] = v11;
  if (v10)
  {
    a1[32] = (uint64_t)v10;
    operator delete(v10);
    a1[31] = 0;
    a1[32] = 0;
    a1[33] = 0;
  }
  *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
  a1[33] = a2[33];
  a2[31] = 0;
  a2[32] = 0;
  a2[33] = 0;
  v12 = *((_OWORD *)a2 + 17);
  v13 = *((_OWORD *)a2 + 18);
  v14 = *((_OWORD *)a2 + 19);
  *((_DWORD *)a1 + 80) = *((_DWORD *)a2 + 80);
  *((_OWORD *)a1 + 18) = v13;
  *((_OWORD *)a1 + 19) = v14;
  *((_OWORD *)a1 + 17) = v12;
  a1[42] = a2[42];
  *((_OWORD *)a1 + 22) = *((_OWORD *)a2 + 22);
  a1[47] = a2[47];
  a1[49] = a2[49];
  a1[51] = a2[51];
  sub_2367D0910((void **)a1 + 52);
  *((_OWORD *)a1 + 26) = *((_OWORD *)a2 + 26);
  v15 = a2[55];
  a1[54] = a2[54];
  a2[52] = 0;
  a2[53] = 0;
  a2[54] = 0;
  a1[55] = v15;
  return a1;
}

void sub_2367D077C(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 5;
        sub_2367C2F38(v4 - 2);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2367D07F0(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2367D086C(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  for (i = 0; i != 3; ++i)
  {
    v5 = (__int128 *)(a2 + 40 * i);
    v6 = a1 + 40 * i;
    v7 = *v5;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v6 = v7;
    v8 = *((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = 0;
    v9 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v8;
    if (v9)
    {
      v10 = -*(_QWORD *)(v9 - 24);
      do
        v11 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v11 + v10, &qword_2564313D8));
      free(*(void **)(v9 - 32));
    }
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v5 + 4);
  }
  return a1;
}

void sub_2367D0910(void **a1)
{
  uint64_t *v1;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;

  v1 = (uint64_t *)*a1;
  if (*a1)
  {
    v3 = (uint64_t *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 5;
        sub_2367C2F38(v3 - 2);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_2367D0978(void **a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *i;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned __int8 v54;
  unsigned __int8 *v55;
  unsigned __int8 v56;
  unsigned int v57;
  BOOL v58;
  unint64_t v59;
  void **v60;
  void **v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t (**v71)();
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  void *__p[3];
  _QWORD v76[4];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t (**v80)();
  __int128 v81;
  uint64_t v82;
  _BYTE v83[328];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)a3[2];
  v7 = a3[3];
  if ((unint64_t)v6 > v7)
  {
    sub_2367C5188(a3);
    v9 = *a3;
    v11 = a3[1];
    v10 = (_QWORD *)a3[2];
    v7 = a3[3];
  }
  else
  {
    v8 = a3[1];
    v9 = *a3 | (*v6 << v8);
    v10 = (_QWORD *)((char *)v6 + ((63 - v8) >> 3));
    v11 = v8 | 0x38;
    *a3 = v9;
    a3[1] = v8 | 0x38;
    a3[2] = (unint64_t)v10;
  }
  v12 = v11 - 1;
  v13 = v9 >> 1;
  *a3 = v9 >> 1;
  a3[1] = v11 - 1;
  if ((v9 & 1) != 0)
  {
    if ((unint64_t)v10 > v7)
    {
      sub_2367C5188(a3);
      v19 = *a3;
      v21 = a3[1];
    }
    else
    {
      v19 = (*v10 << v12) | v13;
      v20 = (char *)v10 + ((unint64_t)(64 - v11) >> 3);
      v21 = v12 | 0x38;
      *a3 = v19;
      a3[1] = v12 | 0x38;
      a3[2] = (unint64_t)v20;
    }
    *a3 = v19 >> 2;
    a3[1] = v21 - 2;
    v22 = (unsigned __int8 *)*a1;
    v23 = v19 & 3;
    if ((v19 & 3) != 0)
    {
      for (i = (unsigned __int8 *)a1[1]; v22 != i; ++v22)
      {
        v25 = (_QWORD *)a3[2];
        if ((unint64_t)v25 > a3[3])
        {
          sub_2367C5188(a3);
          v27 = *a3;
          v28 = a3[1];
        }
        else
        {
          v26 = a3[1];
          v27 = *a3 | (*v25 << v26);
          a3[2] = (unint64_t)v25 + ((63 - v26) >> 3);
          v28 = v26 | 0x38;
          *a3 = v27;
          a3[1] = v26 | 0x38;
        }
        *a3 = v27 >> v23;
        a3[1] = v28 - v23;
        *v22 = v27 & ~(-1 << v23);
      }
    }
    else
    {
      v29 = (_BYTE *)a1[1] - v22;
      if (v29 >= 1)
        bzero(*a1, v29);
    }
  }
  else
  {
    if ((unint64_t)v10 > v7)
    {
      sub_2367C5188(a3);
      v14 = *a3;
      v16 = a3[1];
    }
    else
    {
      v14 = (*v10 << v12) | v13;
      v15 = (char *)v10 + ((unint64_t)(64 - v11) >> 3);
      v16 = v12 | 0x38;
      *a3 = v14;
      a3[1] = v12 | 0x38;
      a3[2] = (unint64_t)v15;
    }
    *a3 = v14 >> 1;
    a3[1] = v16 - 1;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    memset(v76, 0, sizeof(v76));
    v80 = &off_2507FF438;
    v81 = xmmword_2368AF590;
    v71 = &off_2507FF550;
    v72 = xmmword_2368AF3F0;
    v73 = 0;
    sub_2367CB9F8((uint64_t)&v80, (uint64_t)&v71);
    v82 = 0;
    memset(__p, 0, sizeof(__p));
    v17 = sub_2367CC178(a3, 1, v76, __p, (unint64_t)((_BYTE *)a1[1] - (_BYTE *)*a1) < 3);
    if ((_DWORD)v17)
    {
      v18 = 1;
    }
    else
    {
      sub_2367C4794((uint64_t)&v71, (uint64_t)v76, a3, 0);
      v30 = (unsigned __int8 *)a1[1];
      if (v30 == *a1)
      {
        v31 = 0;
        LODWORD(v35) = 0;
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = (unsigned __int8 *)__p[0];
        do
        {
          v34 = sub_2367C4CF4((uint64_t)&v71, *v33, a3);
          *((_BYTE *)*a1 + v32) = v34;
          if (v31 <= v34)
            v31 = v34;
          ++v32;
          v30 = (unsigned __int8 *)*a1;
          v35 = (_BYTE *)a1[1] - (_BYTE *)*a1;
        }
        while (v32 < v35);
      }
      v36 = v31 <= 0xFF && HIDWORD(v72) == 1245184;
      v17 = !v36;
      if (v36 && (v14 & 1) != 0)
      {
        v37 = 0;
        v38 = (int8x16_t)xmmword_2368AF5A0;
        v39.i64[0] = 0x1010101010101010;
        v39.i64[1] = 0x1010101010101010;
        do
        {
          *(int8x16_t *)&v83[v37] = v38;
          v37 += 16;
          v38 = vaddq_s8(v38, v39);
        }
        while (v37 != 256);
        if ((int)v35 >= 1)
        {
          v40 = 0;
          do
          {
            v41 = v30[v40];
            v42 = v83[v41];
            v30[v40] = v42;
            if (v41)
            {
              if (v41 > 3)
              {
                v43 = v41 & 0xF;
                if ((v41 & 0xF) == 0
                  || (*(int8x16_t *)&v83[(v41 - v43) + 1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v43), (uint8x16_t)xmmword_2368AF5A0), *(int8x16_t *)&v83[(v41 - v43)], *(int8x16_t *)&v83[(v41 - v43)+ 1]), LODWORD(v41) = v41 - v43, (_BYTE)v41))
                {
                  do
                  {
                    LODWORD(v41) = v41 - 16;
                    *(_OWORD *)&v83[v41 + 1] = *(_OWORD *)&v83[v41];
                  }
                  while ((_BYTE)v41);
                }
              }
              else
              {
                do
                {
                  v83[v41] = v83[(v41 - 1)];
                  --v41;
                }
                while ((_BYTE)v41);
              }
              v83[0] = v42;
            }
            ++v40;
          }
          while (v40 != v35);
        }
        v17 = 0;
      }
      v44 = v74;
      v74 = 0;
      if (v44)
      {
        v45 = -*(_QWORD *)(v44 - 24);
        do
          v46 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v46 + v45, &qword_2564313D8));
        free(*(void **)(v44 - 32));
      }
      v18 = v17;
    }
    if (__p[0])
      operator delete(__p[0]);
    if (*((_QWORD *)&v78 + 1))
    {
      *(_QWORD *)&v79 = *((_QWORD *)&v78 + 1);
      operator delete(*((void **)&v78 + 1));
    }
    if ((_QWORD)v77)
    {
      *((_QWORD *)&v77 + 1) = v77;
      operator delete((void *)v77);
    }
    v71 = (uint64_t (**)())&v76[1];
    sub_2367C4718((void ***)&v71);
    v47 = v76[0];
    v76[0] = 0;
    if (v47)
    {
      v48 = -*(_QWORD *)(v47 - 24);
      do
        v49 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v49 + v48, &qword_2564313D8));
      free(*(void **)(v47 - 32));
    }
    if (v18)
      return v17;
  }
  v50 = (unsigned __int8 *)*a1;
  v51 = (unsigned __int8 *)a1[1];
  v52 = (uint64_t)*a1 + 1;
  if (*a1 != v51 && v52 != (_QWORD)v51)
  {
    v54 = *v50;
    v55 = (unsigned __int8 *)*a1 + 1;
    do
    {
      v57 = *v55++;
      v56 = v57;
      v58 = v54 >= v57;
      if (v54 <= v57)
        v54 = v56;
      if (!v58)
        v50 = (unsigned __int8 *)v52;
      v52 = (uint64_t)v55;
    }
    while (v55 != v51);
  }
  v59 = *v50;
  *a2 = v59 + 1;
  v60 = (void **)sub_2367CA1FC((v59 >> 6) + 1);
  v61 = v60;
  if (v59 >= 0x40)
    v62 = v59 >> 6;
  else
    v62 = 0;
  v60[v62] = 0;
  v71 = (uint64_t (**)())v60;
  LODWORD(v72) = 0;
  sub_2367D0FB0((uint64_t)&v71, v59 + 1);
  v63 = (unsigned __int8 *)*a1;
  v64 = (unsigned __int8 *)a1[1];
  if (*a1 != v64)
  {
    v65 = 0;
    while (1)
    {
      v66 = *v63;
      if (v59 < v66)
        break;
      v67 = v66 >> 6;
      v68 = 1 << v66;
      v69 = (unint64_t)v61[v67];
      if ((v69 & v68) == 0)
      {
        v61[v67] = (void *)(v69 | v68);
        ++v65;
      }
      if (++v63 == v64)
        goto LABEL_86;
    }
    v17 = 1;
    if (!v61)
      return v17;
LABEL_87:
    operator delete(v61);
    return v17;
  }
  v65 = 0;
LABEL_86:
  v17 = v65 != v59 + 1;
  if (v61)
    goto LABEL_87;
  return v17;
}

void sub_2367D0F14(_Unwind_Exception *a1)
{
  if (STACK[0x258])
    operator delete((void *)STACK[0x258]);
  sub_2367C4C94((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_2367D0FB0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_2367D105C(const void *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5, unint64_t a6, _QWORD *a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v16;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  _BOOL8 v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  size_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t i;
  uint64_t v52;
  __int128 v55;
  uint64_t *v56;
  unint64_t *v57;
  unint64_t *v58;
  void **p_p;
  void **v60;
  BOOL *v61;
  unint64_t *v62;
  float *v63;
  uint64_t *v64;
  BOOL *v65;
  uint64_t *v66;
  float v67;
  uint64_t *v68;
  unint64_t *v69;
  __int128 *v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  unint64_t *v77;
  BOOL v78;
  uint64_t v79;
  _QWORD v80[4];
  uint64_t v81;
  uint64_t v82;
  void *v83[3];
  void *__p;
  unsigned int **v85;
  unsigned int **v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _OWORD v93[10];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v89 = a3;
  v90 = a2;
  v87 = a8;
  v88 = a6;
  v10 = *(_QWORD *)(a10 + 8);
  if ((a8 == 0) != (v10 != 0))
    return 1;
  v16 = a2;
  __p = 0;
  v85 = 0;
  v86 = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_2367C3440();
    v18 = a2;
    v19 = (unsigned int **)operator new(8 * a2);
    __p = v19;
    v85 = v19;
    v86 = &v19[v16];
    memcpy(v19, a1, 8 * v16);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v85 = &v19[v18];
  memset(v83, 0, sizeof(v83));
  v81 = 0;
  v82 = a10;
  v80[0] = a10;
  v80[1] = &v81;
  v80[2] = &v88;
  v80[3] = v83;
  memset(v93, 0, sizeof(v93));
  v79 = 0;
  v20 = (uint64_t)*v19;
  v21 = **v19;
  v79 = v21;
  v22 = ((unint64_t)(a3 + 7) >> 3) * v16 * v21;
  if (v22 <= a6)
  {
    v23 = *(unsigned int *)(v20 + 4);
    if (v10 || v22 + (v23 - 1) * a6 <= a9)
    {
      v78 = a5 < 2;
      v77 = 0;
      v75 = 0uLL;
      v76 = 0uLL;
      if (v16)
      {
        while (*v19)
        {
          ++v19;
          if (!--v16)
            goto LABEL_14;
        }
        sub_2367C431C((uint64_t)&v55, v21, 1u);
        v11 = p_p;
        if ((_DWORD)p_p)
          goto LABEL_58;
        v75 = v55;
        v26 = v57;
        v57 = 0;
        v27 = v58;
        v28 = *((_QWORD *)&v76 + 1);
        *(_QWORD *)&v76 = v56;
        *((_QWORD *)&v76 + 1) = v26;
        if (v28)
        {
          v29 = -*(_QWORD *)(v28 - 24);
          do
            v30 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v30 + v29, &qword_2564313D8));
          free(*(void **)(v28 - 32));
        }
        v77 = v27;
        v31 = DWORD1(v75);
        if (DWORD1(v75))
        {
          v32 = (char *)*((_QWORD *)&v76 + 1);
          v33 = v76;
          v34 = v75;
          v35 = 4 * v75;
          do
          {
            if (v34)
              memset_pattern16(v32, &unk_2368AFB60, v35);
            v32 += v33;
            --v31;
          }
          while (v31);
        }
        if (!(_DWORD)p_p)
        {
          v36 = v57;
          v57 = 0;
          if (v36)
          {
            v37 = -(uint64_t)*(v36 - 3);
            do
              v38 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v38 + v37, &qword_2564313D8));
            free((void *)*(v36 - 4));
          }
        }
      }
LABEL_14:
      if (a4)
      {
        if (v89 == 32)
        {
          v68 = v80;
          *(_QWORD *)&v55 = a10;
          *((_QWORD *)&v55 + 1) = v83;
          v56 = &v87;
          v57 = &v88;
          v58 = &v90;
          p_p = &__p;
          v60 = (void **)&v75;
          v61 = &v78;
          v62 = (unint64_t *)&v79;
          v63 = (float *)&v81;
          if (a7)
          {
            v44 = sub_2367D1FD0(a7, v23, (uint64_t ***)&v68, (uint64_t ***)&v55);
          }
          else
          {
            *(_QWORD *)&v72 = 0;
            *((_QWORD *)&v72 + 1) = &v72;
            v44 = sub_2367D1FD0(&v72, v23, (uint64_t ***)&v68, (uint64_t ***)&v55);
          }
          v11 = v44;
        }
        else
        {
          if (v89 != 16)
          {
            v11 = 1;
            goto LABEL_58;
          }
          LOBYTE(v67) = !v78;
          v74 = 0;
          v72 = 0u;
          v73 = 0u;
          v68 = &v79;
          v69 = &v90;
          v70 = &v72;
          v71 = v80;
          *(_QWORD *)&v55 = &v90;
          *((_QWORD *)&v55 + 1) = &__p;
          v56 = (uint64_t *)&v75;
          v57 = (unint64_t *)&v72;
          v58 = (unint64_t *)&v79;
          p_p = (void **)a10;
          v60 = v83;
          v61 = (BOOL *)&v87;
          v62 = &v88;
          v63 = &v67;
          v64 = &v81;
          if (a7)
          {
            v24 = sub_2367D22FC(a7, v23, &v68, (uint64_t **)&v55);
          }
          else
          {
            v91 = 0;
            v92 = &v91;
            v24 = sub_2367D22FC(&v91, v23, &v68, (uint64_t **)&v55);
          }
          v11 = v24;
          v45 = *((_QWORD *)&v73 + 1);
          *((_QWORD *)&v73 + 1) = 0;
          if (v45)
          {
            v46 = -*(_QWORD *)(v45 - 24);
            do
              v47 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v47 + v46, &qword_2564313D8));
            free(*(void **)(v45 - 32));
          }
        }
        if ((_DWORD)v11)
        {
LABEL_58:
          v48 = *((_QWORD *)&v76 + 1);
          *((_QWORD *)&v76 + 1) = 0;
          if (v48)
          {
            v49 = -*(_QWORD *)(v48 - 24);
            do
              v50 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v50 + v49, &qword_2564313D8));
            free(*(void **)(v48 - 32));
          }
          goto LABEL_62;
        }
      }
      else
      {
        v67 = (float)(unint64_t)~(-1 << v89);
        v74 = 0;
        v72 = 0u;
        v73 = 0u;
        v68 = &v79;
        v69 = &v90;
        v70 = &v72;
        v71 = v80;
        *(_QWORD *)&v55 = a10;
        *((_QWORD *)&v55 + 1) = v83;
        v56 = &v87;
        v57 = &v88;
        v58 = &v90;
        p_p = &__p;
        v60 = (void **)&v75;
        v61 = (BOOL *)&v72;
        v62 = (unint64_t *)&v79;
        v63 = &v67;
        v64 = &v89;
        v65 = &v78;
        v66 = &v81;
        if (a7)
        {
          v25 = sub_2367D1744(a7, v23, &v68, (uint64_t **)&v55);
        }
        else
        {
          v91 = 0;
          v92 = &v91;
          v25 = sub_2367D1744(&v91, v23, &v68, (uint64_t **)&v55);
        }
        v11 = v25;
        v39 = *((_QWORD *)&v73 + 1);
        *((_QWORD *)&v73 + 1) = 0;
        if (v25)
        {
          if (v39)
          {
            v40 = -*(_QWORD *)(v39 - 24);
            do
              v41 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v41 + v40, &qword_2564313D8));
            free(*(void **)(v39 - 32));
          }
          goto LABEL_58;
        }
        if (v39)
        {
          v42 = -*(_QWORD *)(v39 - 24);
          do
            v43 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v43 + v42, &qword_2564313D8));
          free(*(void **)(v39 - 32));
        }
      }
      v11 = 0;
      goto LABEL_58;
    }
  }
  v11 = 1;
LABEL_62:
  for (i = 144; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)((char *)v93 + i));
  v52 = v81;
  v81 = 0;
  if (v52)
    (*(void (**)(void))(v82 + 16))();
  *(_QWORD *)&v93[0] = v83;
  sub_2367D17E4((void ***)v93);
  if (__p)
  {
    v85 = (unsigned int **)__p;
    operator delete(__p);
  }
  return v11;
}

void sub_2367D1620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t i;

  if (a38)
  {
    v55 = -*(_QWORD *)(a38 - 24);
    do
      v56 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v56 + v55, &qword_2564313D8));
    free(*(void **)(a38 - 32));
  }
  for (i = 144; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(v53 - 256 + i));
  if (a47)
    (*(void (**)(void))(a48 + 16))();
  *(_QWORD *)(v53 - 256) = &a49;
  sub_2367D17E4((void ***)(v53 - 256));
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2367D1744(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  uint64_t **v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_2367D1878(v8, 1uLL))
      return v5;
    for (i = 0; i != v4; ++i)
      sub_2367D1A80((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, uint64_t ***, uint64_t (*)(uint64_t ***, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2367D1878, sub_2367D1A80, 0, a2) != 0;
}

void sub_2367D17E4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2367D1824((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_2367D1824(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_2367D1878(uint64_t ***a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a2;
  v3 = *a1;
  v4 = ***a1;
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(*a1)[1] * (int)a2, v4);
  *((_QWORD *)&v27 + 1) = v27;
  v4 = v4;
  if ((_DWORD)v4)
  {
    v5 = 4 * v4 + 139;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x7FFFFFF80;
    else
      v4 = (v5 & 0x7FFFFFF80) + 128;
  }
  v28 = v4;
  v29 = 0;
  v30 = 4;
  if (sub_2367F66B4((uint64_t)&v27))
  {
    v6 = v29;
    v29 = 0;
    if (v6)
    {
      v7 = -*(_QWORD *)(v6 - 24);
      do
        v8 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v8 + v7, &qword_2564313D8));
      free(*(void **)(v6 - 32));
    }
    return 0xFFFFFFFFLL;
  }
  v10 = v28;
  v11 = v29;
  v12 = v30;
  v13 = v3[2];
  *(_OWORD *)v13 = v27;
  v14 = v13[3];
  v13[2] = v10;
  v13[3] = v11;
  if (v14)
  {
    v15 = -*(_QWORD *)(v14 - 24);
    do
      v16 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v16 + v15, &qword_2564313D8));
    free(*(void **)(v14 - 32));
  }
  v13[4] = v12;
  v17 = v3[3];
  if (*(_QWORD *)(*v17 + 8))
  {
    v18 = (uint64_t *)v17[1];
    v21 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))*v17)(*(_QWORD *)(*v17 + 24), v2, *(_QWORD *)v17[2]);
    v22 = *v18;
    *v18 = v21;
    if (v22)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18[1] + 16))(v22, v19, v20);
    if (!*(_QWORD *)v17[1])
      return 0xFFFFFFFFLL;
    sub_2367D1D34((uint64_t *)v17[3], v2);
    if (v2)
    {
      v23 = 0;
      do
      {
        v24 = (unint64_t *)(*(_QWORD *)v17[3] + v23);
        v25 = *(_QWORD *)v17[2];
        v26 = v24[1] - *v24;
        if (v25 <= v26)
        {
          if (v25 < v26)
            v24[1] = *v24 + v25;
        }
        else
        {
          sub_2367C8698(v24, v25 - v26);
        }
        v23 += 24;
        --v2;
      }
      while (v2);
    }
  }
  return 0;
}

void sub_2367D1A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367D1A80(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  int32x4_t *v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t *v36;
  _BYTE *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  _BYTE *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *);
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(*(_QWORD *)v3 + 8))
    v4 = *(_BYTE **)(**(_QWORD **)(v3 + 8) + 24 * a3);
  else
    v4 = (_BYTE *)(**(_QWORD **)(v3 + 16) + **(_QWORD **)(v3 + 24) * a2);
  memset(v49, 0, sizeof(v49));
  v5 = **(_QWORD **)(v3 + 32);
  if (v5)
  {
    v6 = 0;
    v7 = **(_QWORD **)(v3 + 40);
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      if (v8)
        v9 = *(_QWORD *)(v8 + 24) + *(_QWORD *)(v8 + 16) * a2;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 24);
      *((_QWORD *)v49 + v6++) = v9;
    }
    while (v5 != v6);
    v10 = 0;
    v47 = 0u;
    v48 = 0u;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      v16 = v5 * a3;
      v17 = *(_QWORD *)(v3 + 56);
      result = *(_QWORD *)(v3 + 64);
      v19 = *(_QWORD *)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
      *((_QWORD *)&v47 + v10) = v18 + v19 * (v5 * a3 + v10);
      v20 = *(_QWORD *)result;
      if (*(_QWORD *)result)
      {
        v21 = 0;
        v22 = (float32x4_t *)*((_QWORD *)v49 + v10);
        result = *(_QWORD *)(v3 + 72);
        v23 = vld1q_dup_f32((const float *)result);
        v24 = (int32x4_t *)(v18 + v19 * (v10 + v16));
        do
        {
          v25 = *v22++;
          *v24++ = vcvtnq_s32_f32(vmulq_f32(v23, vminnmq_f32(vmaxnmq_f32(v25, (float32x4_t)0), _Q1)));
          v21 += 4;
        }
        while (v21 < v20);
        v5 = **(_QWORD **)(v3 + 32);
      }
      ++v10;
    }
    while (v10 < v5);
  }
  else
  {
    v47 = 0uLL;
    v48 = 0uLL;
  }
  if (**(_QWORD **)(v3 + 80) >= 9uLL)
  {
    v33 = **(_QWORD **)(v3 + 64);
    if (**(_BYTE **)(v3 + 88))
    {
      if (v33)
      {
        v34 = 0;
        v35 = v4 + 1;
        do
        {
          if (v5)
          {
            v36 = (uint64_t *)&v47;
            v37 = v35;
            v38 = v5;
            do
            {
              v39 = *v36++;
              *(_WORD *)(v37 - 1) = *(_DWORD *)(v39 + 4 * v34);
              v37 += 2;
              --v38;
            }
            while (v38);
          }
          ++v34;
          v35 += 2 * v5;
        }
        while (v34 != v33);
      }
    }
    else if (v33)
    {
      v40 = 0;
      v41 = v4 + 1;
      do
      {
        if (v5)
        {
          v42 = (uint64_t *)&v47;
          v43 = v41;
          v44 = v5;
          do
          {
            v45 = *v42++;
            *(_WORD *)(v43 - 1) = bswap32(*(_DWORD *)(v45 + 4 * v40)) >> 16;
            v43 += 2;
            --v44;
          }
          while (v44);
        }
        ++v40;
        v41 += 2 * v5;
      }
      while (v40 != v33);
    }
  }
  else
  {
    v26 = **(_QWORD **)(v3 + 64);
    if (v26)
    {
      v27 = 0;
      v28 = v4;
      do
      {
        if (v5)
        {
          v29 = (uint64_t *)&v47;
          v30 = v28;
          v31 = v5;
          do
          {
            v32 = *v29++;
            *v30++ = *(_DWORD *)(v32 + 4 * v27);
            --v31;
          }
          while (v31);
        }
        ++v27;
        v28 += v5;
      }
      while (v27 != v26);
    }
  }
  v46 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v3 + 8);
  if (v46)
    return v46(**(_QWORD **)(v3 + 96), a3, 0, a2, **(_QWORD **)(v3 + 64), v4);
  return result;
}

void sub_2367D1D34(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  _QWORD v20[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        v16 = a1[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v4 - 16) = v17;
            operator delete(v17);
          }
          v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_2367C3440();
      v20[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)sub_2367D1EBC(v10);
      v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      sub_2367D1F00(a1, v20);
      sub_2367D1F70((uint64_t)v20);
    }
  }
}

void *sub_2367D1EBC(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_2367C3488();
  return operator new(24 * a1);
}

_QWORD *sub_2367D1F00(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2367D1F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_2367D1FD0(_QWORD *a1, uint64_t a2, uint64_t ***a3, uint64_t ***a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  uint64_t ***v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_2367D2070(v8, 1uLL))
      return v5;
    for (i = 0; i != v4; ++i)
      sub_2367D2148((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, uint64_t ****, uint64_t (*)(uint64_t ****, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2367D2070, sub_2367D2148, 0, a2) != 0;
}

uint64_t sub_2367D2070(uint64_t ****a1, unint64_t a2)
{
  uint64_t **v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  v2 = **a1;
  if (!(*v2)[1])
    return 0;
  v3 = a2;
  v4 = v2[1];
  v5 = ((uint64_t (*)(uint64_t, unint64_t, _QWORD))**v2)((*v2)[3], a2, *v2[2]);
  v6 = *v4;
  *v4 = v5;
  if (v6)
    (*(void (**)(void))(v4[1] + 16))();
  if (*v2[1])
  {
    sub_2367D1D34(v2[3], v3);
    if (v3)
    {
      v7 = 0;
      do
      {
        v8 = (unint64_t *)(*v2[3] + v7);
        v9 = *v2[2];
        v10 = v8[1] - *v8;
        if (v9 <= v10)
        {
          if (v9 < v10)
            v8[1] = *v8 + v9;
        }
        else
        {
          sub_2367C8698(v8, v9 - v10);
        }
        v7 += 24;
        --v3;
      }
      while (v3);
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2367D2148(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _DWORD *);
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(*(_QWORD *)v3 + 8))
    v4 = *(_DWORD **)(**(_QWORD **)(v3 + 8) + 24 * a3);
  else
    v4 = (_DWORD *)(**(_QWORD **)(v3 + 16) + **(_QWORD **)(v3 + 24) * a2);
  memset(v24, 0, sizeof(v24));
  v5 = **(_QWORD **)(v3 + 32);
  if (v5)
  {
    v6 = **(_QWORD **)(v3 + 40);
    v7 = v24;
    v8 = **(_QWORD **)(v3 + 32);
    do
    {
      if (*(_QWORD *)v6)
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 24) + *(_QWORD *)(*(_QWORD *)v6 + 16) * a2;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 24);
      *v7++ = v9;
      v6 += 8;
      --v8;
    }
    while (v8);
  }
  v10 = **(_QWORD **)(v3 + 64);
  if (**(_BYTE **)(v3 + 56))
  {
    if (v10)
    {
      v11 = 0;
      v12 = v4;
      do
      {
        if (v5)
        {
          v13 = (uint64_t *)v24;
          v14 = v12;
          v15 = v5;
          do
          {
            v16 = *v13++;
            *v14++ = *(_DWORD *)(v16 + 4 * v11);
            --v15;
          }
          while (v15);
        }
        ++v11;
        v12 += v5;
      }
      while (v11 != v10);
    }
  }
  else if (v10)
  {
    v17 = 0;
    v18 = v4;
    do
    {
      if (v5)
      {
        v19 = (uint64_t *)v24;
        v20 = v18;
        v21 = v5;
        do
        {
          v22 = *v19++;
          *v20++ = bswap32(*(_DWORD *)(v22 + 4 * v17));
          --v21;
        }
        while (v21);
      }
      ++v17;
      v18 += v5;
    }
    while (v17 != v10);
  }
  v23 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _DWORD *))(*(_QWORD *)v3 + 8);
  if (v23)
    return v23(**(_QWORD **)(v3 + 72), a3, 0, a2, **(_QWORD **)(v3 + 64), v4);
  return result;
}

BOOL sub_2367D22FC(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  uint64_t **v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_2367D239C(v8, 1uLL))
      return v5;
    for (i = 0; i != v4; ++i)
      sub_2367D25A4((unint64_t *)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, uint64_t ***, uint64_t (*)(uint64_t ***, unint64_t), unint64_t *(*)(unint64_t *, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2367D239C, sub_2367D25A4, 0, a2) != 0;
}

uint64_t sub_2367D239C(uint64_t ***a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a2;
  v3 = *a1;
  v4 = ***a1;
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(*a1)[1] * (int)a2, v4);
  *((_QWORD *)&v27 + 1) = v27;
  v4 = v4;
  if ((_DWORD)v4)
  {
    v5 = 2 * v4 + 141;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x3FFFFFF80;
    else
      v4 = (v5 & 0x3FFFFFF80) + 128;
  }
  v28 = v4;
  v29 = 0;
  v30 = 2;
  if (sub_2367F66B4((uint64_t)&v27))
  {
    v6 = v29;
    v29 = 0;
    if (v6)
    {
      v7 = -*(_QWORD *)(v6 - 24);
      do
        v8 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v8 + v7, &qword_2564313D8));
      free(*(void **)(v6 - 32));
    }
    return 0xFFFFFFFFLL;
  }
  v10 = v28;
  v11 = v29;
  v12 = v30;
  v13 = v3[2];
  *(_OWORD *)v13 = v27;
  v14 = v13[3];
  v13[2] = v10;
  v13[3] = v11;
  if (v14)
  {
    v15 = -*(_QWORD *)(v14 - 24);
    do
      v16 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v16 + v15, &qword_2564313D8));
    free(*(void **)(v14 - 32));
  }
  v13[4] = v12;
  v17 = v3[3];
  if (*(_QWORD *)(*v17 + 8))
  {
    v18 = (uint64_t *)v17[1];
    v21 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))*v17)(*(_QWORD *)(*v17 + 24), v2, *(_QWORD *)v17[2]);
    v22 = *v18;
    *v18 = v21;
    if (v22)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18[1] + 16))(v22, v19, v20);
    if (!*(_QWORD *)v17[1])
      return 0xFFFFFFFFLL;
    sub_2367D1D34((uint64_t *)v17[3], v2);
    if (v2)
    {
      v23 = 0;
      do
      {
        v24 = (unint64_t *)(*(_QWORD *)v17[3] + v23);
        v25 = *(_QWORD *)v17[2];
        v26 = v24[1] - *v24;
        if (v25 <= v26)
        {
          if (v25 < v26)
            v24[1] = *v24 + v25;
        }
        else
        {
          sub_2367C8698(v24, v25 - v26);
        }
        v23 += 24;
        --v2;
      }
      while (v2);
    }
  }
  return 0;
}

void sub_2367D2558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2367D25A4(unint64_t *result, unsigned int a2, uint64_t a3)
{
  unint64_t **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x4_t *v16;
  float16x4_t *v17;
  float32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  _BYTE *v27;
  char v28;
  uint64_t (*v29)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t);
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = (unint64_t **)result[1];
  memset(v32, 0, sizeof(v32));
  v4 = **v3;
  if (v4)
  {
    v5 = 0;
    v6 = *v3[1];
    do
    {
      v7 = *(_QWORD *)(v6 + 8 * v5);
      if (v7)
        v8 = *(_QWORD *)(v7 + 24) + *(_QWORD *)(v7 + 16) * a2;
      else
        v8 = v3[2][3];
      *((_QWORD *)v32 + v5++) = v8;
    }
    while (v4 != v5);
    v9 = 0;
    v30 = 0u;
    v31 = 0u;
    do
    {
      v10 = v4 * a3;
      v11 = (uint64_t *)v3[3];
      result = v3[4];
      v13 = v11[2];
      v12 = v11[3];
      *((_QWORD *)&v30 + v9) = v12 + v13 * (v4 * a3 + v9);
      v14 = *result;
      if (*result)
      {
        v15 = 0;
        v16 = (float32x4_t *)*((_QWORD *)v32 + v9);
        v17 = (float16x4_t *)(v12 + v13 * (v9 + v10));
        do
        {
          v18 = *v16++;
          *v17++ = vcvt_f16_f32(v18);
          v15 += 4;
        }
        while (v15 < v14);
        v4 = **v3;
      }
      ++v9;
    }
    while (v9 < v4);
  }
  else
  {
    v30 = 0uLL;
    v31 = 0uLL;
  }
  if (v3[5][1])
    v19 = *(_QWORD *)(*v3[6] + 24 * a3);
  else
    v19 = *v3[7] + *v3[8] * a2;
  v20 = *v3[4];
  if (v20)
  {
    v21 = 0;
    v22 = v4;
    do
    {
      if (v22)
      {
        for (i = 0; i < v22; ++i)
        {
          *(_WORD *)(v19 + 2 * (i + v21 * v22)) = *(_WORD *)(*((_QWORD *)&v30 + i) + 2 * v21);
          v22 = **v3;
        }
        v20 = *v3[4];
        v4 = **v3;
      }
      ++v21;
    }
    while (v21 < v20);
  }
  v24 = 2 * v20 * v4;
  if (*(_BYTE *)v3[9])
    v25 = v24 == 0;
  else
    v25 = 1;
  if (!v25)
  {
    v26 = 0;
    do
    {
      v27 = (_BYTE *)(v19 + v26);
      v28 = *(_BYTE *)(v19 + v26);
      *v27 = *(_BYTE *)(v19 + v26 + 1);
      v27[1] = v28;
      v26 += 2;
    }
    while (v26 < v24);
  }
  v29 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t))v3[5][1];
  if (v29)
    return (unint64_t *)v29(*v3[10], a3, 0, a2, *v3[4], v19);
  return result;
}

unsigned int *sub_2367D27D0(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = result;
  v4 = 0;
  v5 = result[1];
  if (*result)
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = v6;
  v8 = 4 * *result;
  do
  {
    if ((v7 & 1) == 0)
    {
      v9 = 0;
      v10 = a2 + 40 * v4;
      v12 = *(_QWORD *)(v10 + 16);
      v11 = *(char **)(v10 + 24);
      do
      {
        result = (unsigned int *)memcpy(v11, (const void *)(*(_QWORD *)&v3[10 * v4 + 6] + *(_QWORD *)&v3[10 * v4 + 4] * v9++), v8);
        v11 += v12;
      }
      while (v5 != v9);
    }
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t sub_2367D2870(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  unint64_t v10;
  void ***v11;
  uint64_t *v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  int64x2_t v38;
  void **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  void ***v76;
  _QWORD *__p;
  unint64_t v78;
  uint64_t v79;
  void **v80[2];
  int64x2_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  int v86;
  unint64_t v87[4];
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64x2_t v92;
  void ***v93;
  void ***v94;

  sub_2367D2FC4((uint64_t)&v92, a1, a6, a2);
  v83 = a3;
  v84 = a4;
  sub_2367D31C0((uint64_t)v87, (uint64_t)&v83);
  if (sub_2367D3224(&v92, v87, a5, 0))
    return sub_2367D6A70((uint64_t)&v92);
  if (sub_2367D3A24((uint64_t)&v92))
    return sub_2367D6A70((uint64_t)&v92);
  v9 = 8 * (v87[2] - v88 + v89) - v87[1];
  v91 = v9;
  if (v9 > 8 * (v87[3] - v88) + 64)
    return sub_2367D6A70((uint64_t)&v92);
  v10 = v9 >> 3;
  v90 = 1;
  v86 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v81 = 0uLL;
  v82 = 0;
  v11 = v93;
  v76 = v94;
  v72 = a5;
  v73 = v10;
  if (v93 == v94)
  {
    v60 = 0;
    v12 = 0;
LABEL_82:
    v63 = 0;
    v64 = 0;
    goto LABEL_83;
  }
  __p = 0;
  v78 = 0;
  v12 = 0;
  v13 = 0;
  v74 = a4;
  v75 = a3;
  do
  {
    v14 = *v11;
    v15 = (unint64_t)*v11 + v10;
    if (v15 > (unint64_t)a4)
    {
      v61 = 0;
      v62 = v73;
      v60 = __p;
      goto LABEL_94;
    }
    v16 = (uint64_t)v11[1];
    v80[0] = (void **)((char *)a3 + v10);
    v80[1] = v14;
    v17 = operator new();
    v79 = sub_2367D31C0(v17, (uint64_t)v80);
    if ((unint64_t)v12 >= v78)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * (v12 - __p) + 1;
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        sub_2367C3440();
      if (0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 3) > v18)
        v18 = 0x5555555555555556 * ((uint64_t)(v78 - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19)
        v19 = (unint64_t)sub_2367D1EBC(v19);
      else
        v20 = 0;
      v21 = (uint64_t *)(v19 + 8 * (v12 - __p));
      *v21 = v79;
      v21[1] = v16;
      v21[2] = v13;
      if (v12 == __p)
      {
        v24 = (_QWORD *)(v19 + 8 * (v12 - __p));
      }
      else
      {
        v22 = v19 + 8 * (v12 - __p);
        do
        {
          v23 = *(_OWORD *)(v12 - 3);
          v24 = (_QWORD *)(v22 - 24);
          *(_QWORD *)(v22 - 8) = *(v12 - 1);
          *(_OWORD *)(v22 - 24) = v23;
          v12 -= 3;
          v22 -= 24;
        }
        while (v12 != __p);
      }
      v78 = v19 + 24 * v20;
      v12 = v21 + 3;
      if (__p)
        operator delete(__p);
      __p = v24;
      v17 = v79;
    }
    else
    {
      *v12 = v17;
      v12[1] = v16;
      v12[2] = v13;
      v12 += 3;
    }
    v25 = operator new();
    v26 = v25;
    *(_QWORD *)v25 = v17;
    *(_QWORD *)(v25 + 8) = &v86;
    v80[0] = (void **)v25;
    v27 = (_QWORD *)v81.i64[1];
    if (v81.i64[1] >= (unint64_t)v82)
    {
      v28 = v13;
      v29 = (_QWORD *)v81.i64[0];
      v30 = (v81.i64[1] - v81.i64[0]) >> 3;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
        sub_2367C3440();
      v32 = (uint64_t)&v82[-v81.i64[0]];
      if ((uint64_t)&v82[-v81.i64[0]] >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 >> 61)
          sub_2367C3488();
        v34 = (char *)operator new(8 * v33);
      }
      else
      {
        v34 = 0;
      }
      v35 = (uint64_t *)&v34[8 * v30];
      v80[0] = 0;
      *v35 = v26;
      v36 = v35 + 1;
      if (v27 == v29)
      {
        v39 = 0;
        v38 = vdupq_n_s64((unint64_t)v27);
      }
      else
      {
        do
        {
          v37 = *--v27;
          *v27 = 0;
          *--v35 = v37;
        }
        while (v27 != v29);
        v38 = v81;
        v39 = v80[0];
      }
      v81.i64[0] = (uint64_t)v35;
      v81.i64[1] = (uint64_t)v36;
      v82 = &v34[8 * v33];
      v41 = (uint64_t *)v38.i64[1];
      v40 = (uint64_t *)v38.i64[0];
      v13 = v28;
      while (v41 != v40)
        sub_2367D420C(--v41);
      if (v40)
        operator delete(v40);
      v81.i64[1] = (uint64_t)v36;
      a4 = v74;
      a3 = v75;
      if (v39)
      {
        if (*v39 && sub_2367DBFFC((uint64_t)*v39))
          *(_DWORD *)v39[1] = 1;
        MEMORY[0x23B7F8F48](v39, 0x20C40A4A59CD2);
      }
    }
    else
    {
      *(_QWORD *)v81.i64[1] = v25;
      v81.i64[1] = (uint64_t)(v27 + 1);
    }
    v42 = v84;
    if ((unint64_t)v84 < v85)
    {
      *v84 = v17;
      v43 = v42 + 1;
      goto LABEL_72;
    }
    v44 = v15;
    v45 = a4;
    v46 = a3;
    v47 = v13;
    v48 = v83;
    v49 = v84 - v83;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 61)
      sub_2367C3440();
    v51 = v85 - (_QWORD)v83;
    if ((uint64_t)(v85 - (_QWORD)v83) >> 2 > v50)
      v50 = v51 >> 2;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
    {
      if (v52 >> 61)
        sub_2367C3488();
      v53 = (char *)operator new(8 * v52);
    }
    else
    {
      v53 = 0;
    }
    v54 = (uint64_t *)&v53[8 * v49];
    v55 = &v53[8 * v52];
    *v54 = v79;
    v43 = v54 + 1;
    if (v42 == v48)
    {
      v83 = (uint64_t *)&v53[8 * v49];
      v84 = v54 + 1;
      v85 = (unint64_t)v55;
      v13 = v47;
LABEL_75:
      a3 = v46;
      a4 = v45;
      v15 = v44;
      if (v42)
        goto LABEL_71;
      goto LABEL_72;
    }
    do
    {
      v56 = *--v42;
      *v42 = 0;
      *--v54 = v56;
    }
    while (v42 != v48);
    v42 = v83;
    v57 = v84;
    v83 = v54;
    v84 = v43;
    v85 = (unint64_t)v55;
    v13 = v47;
    if (v57 == v42)
      goto LABEL_75;
    a3 = v46;
    a4 = v45;
    v15 = v44;
    do
    {
      v59 = *--v57;
      v58 = v59;
      *v57 = 0;
      if (v59)
        MEMORY[0x23B7F8F48](v58, 0x1050C402DCFFC91);
    }
    while (v57 != v42);
    if (v42)
LABEL_71:
      operator delete(v42);
LABEL_72:
    ++v13;
    v84 = v43;
    v11 += 2;
    v10 = v15;
  }
  while (v11 != v76);
  v60 = __p;
  if (v12 == __p)
    goto LABEL_82;
  if ((0xAAAAAAAAAAAAAAABLL * (v12 - __p)) >> 62)
    sub_2367C3440();
  v63 = (char *)sub_2367C3454(0xAAAAAAAAAAAAAAABLL * (v12 - __p));
  bzero(v63, 0xAAAAAAAAAAAAAAACLL * (v12 - __p));
  v64 = &v63[0xAAAAAAAAAAAAAAACLL * (v12 - __p)];
LABEL_83:
  v62 = v73;
  if (!sub_2367D426C((uint64_t)&v92, (uint64_t)v60, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v60) >> 3), v63))
  {
    if (v64 == v63)
    {
      v61 = 1;
      if (!v63)
        goto LABEL_94;
    }
    else
    {
      v65 = 0;
      v66 = (v64 - v63) >> 2;
      v67 = (uint64_t *)v93;
      if (v66 <= 1)
        v66 = 1;
      while (1)
      {
        v68 = *(_DWORD *)&v63[4 * v65];
        v61 = v68 == 0;
        if (v68)
          break;
        v69 = *v67;
        v67 += 2;
        v62 += v69;
        if (v66 == ++v65)
        {
          v61 = 1;
          goto LABEL_93;
        }
      }
    }
    goto LABEL_93;
  }
  v61 = 0;
  if (v63)
LABEL_93:
    operator delete(v63);
LABEL_94:
  if (v60)
    operator delete(v60);
  v80[0] = (void **)&v81;
  sub_2367D68E4(v80);
  if (v86)
    v70 = 0;
  else
    v70 = v61;
  if (v70 && !sub_2367D6954((uint64_t)&v92))
    *(_QWORD *)(v72 + 440) = v62;
  v81.i64[0] = (uint64_t)&v83;
  sub_2367D69EC((void ***)&v81);
  return sub_2367D6A70((uint64_t)&v92);
}

void sub_2367D2F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char **a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p)
    operator delete(__p);
  a17 = &a19;
  sub_2367D68E4((void ***)&a17);
  a19 = &a22;
  sub_2367D69EC((void ***)&a19);
  sub_2367D6A70((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_2367D2FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v6)();
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_2367F40C8(a1 + 48, a3);
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 840) = 8;
  *(_QWORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 1;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 1034) = 1;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1152) = &off_2507FF438;
  *(_OWORD *)(a1 + 1172) = xmmword_2368AF590;
  v6 = &off_2507FF550;
  v7 = xmmword_2368AF3F0;
  v8 = 0;
  sub_2367CB9F8(a1 + 1152, (uint64_t)&v6);
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  sub_2367FF658(a1 + 1232);
  *(_WORD *)(a1 + 1328) = 257;
  *(_QWORD *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_BYTE *)(a1 + 1410) = 1;
  *(_QWORD *)(a1 + 1416) = 0;
  *(_WORD *)(a1 + 1424) = 1;
  *(_DWORD *)(a1 + 1484) = 0;
  *(_QWORD *)(a1 + 1468) = 0;
  *(_QWORD *)(a1 + 1476) = 0;
  *(_QWORD *)(a1 + 1460) = 0;
  *(_QWORD *)(a1 + 1432) = 0;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_WORD *)(a1 + 1456) = 0;
  return a1;
}

void sub_2367D3110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;

  v16 = *(void **)(v10 + 1208);
  if (v16)
  {
    *(_QWORD *)(v10 + 1216) = v16;
    operator delete(v16);
  }
  sub_2367C4C94(v13);
  v17 = *(void **)(v10 + 1040);
  if (v17)
  {
    *(_QWORD *)(v10 + 1048) = v17;
    operator delete(v17);
  }
  a10 = (void **)(v10 + 864);
  sub_2367D6C98(&a10);
  sub_2367DC5FC(v12);
  sub_2367DC598(v11);
  v18 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 24) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2367D31C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(uint64_t **)a2;
  v4 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 8;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if ((unint64_t)v3 > v4)
  {
    sub_2367C5188((_QWORD *)a1);
  }
  else
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 16) = (char *)v3 + 7;
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = 56;
  }
  return a1;
}

uint64_t sub_2367D3224(uint64x2_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64x2_t v11;
  uint64x2_t v12;
  uint64x2_t v13;
  uint64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v25;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void *__p;
  uint64_t v79;
  uint64_t v80;
  uint64x2_t v81[2];
  _OWORD v82[43];
  __int128 v83;
  uint64_t v84;
  _OWORD v85[2];
  void *v86[2];
  void *v87[2];
  __int128 v88;
  uint64_t (**v89)();
  __int128 v90;
  uint64_t v91;
  unint64_t v92[5];

  a1[48].i64[0] = a3;
  sub_236804FD4((uint64_t)v81);
  v8 = a1->i64[0];
  *(_DWORD *)(v8 + 208) = v81[0].i32[0];
  v9 = v81[0].i64[1];
  v81[0].i64[1] = 0;
  sub_2367DA3D0((uint64_t *)(v8 + 216), v9);
  *(uint64x2_t *)(v8 + 224) = v81[1];
  memcpy((void *)(v8 + 240), v82, 0x2B0uLL);
  sub_2367DC280((void **)(v8 + 928));
  *(_OWORD *)(v8 + 928) = v83;
  *(_QWORD *)(v8 + 944) = v84;
  v84 = 0;
  v83 = 0u;
  *(_QWORD *)&v85[0] = &v83;
  sub_2367DC2DC((void ***)v85);
  sub_2367D7A7C(&v81[0].i64[1]);
  a1[38].i8[0] = a4;
  v10 = sub_2367F232C((uint64_t)a2, (uint64_t)a1[3].i64);
  if ((_DWORD)v10)
    return v10;
  sub_2367DC34C(v81, (uint64_t)a1[3].i64);
  v11 = (uint64x2_t)v82[5];
  a1[45] = (uint64x2_t)v82[4];
  a1[46] = v11;
  a1[47] = (uint64x2_t)v82[6];
  v12 = (uint64x2_t)v82[1];
  a1[41] = (uint64x2_t)v82[0];
  a1[42] = v12;
  v13 = (uint64x2_t)v82[3];
  a1[43] = (uint64x2_t)v82[2];
  a1[44] = v13;
  v14 = v81[1];
  a1[39] = v81[0];
  a1[40] = v14;
  v15 = a1[10].u32[0];
  v16 = a1[46].i64[0];
  memset(v82, 0, 88);
  memset(v81, 0, sizeof(v81));
  sub_2367D086C(a3 + 96, (uint64_t)v81);
  for (i = 13; i != -2; i -= 5)
    sub_2367C2F38(&v81[0].i64[i]);
  v19 = *(_QWORD *)(a3 + 416);
  v18 = *(_QWORD *)(a3 + 424);
  if (v18 != v19)
  {
    do
    {
      v20 = v18 - 40;
      sub_2367C2F38((uint64_t *)(v18 - 16));
      v18 = v20;
    }
    while (v20 != v19);
  }
  *(_QWORD *)(a3 + 424) = v19;
  v21 = a1[26].i32[2];
  *(_DWORD *)(a3 + 48) = v21;
  if (!a1[38].i8[0] && (a1[27].i8[8] || v21) && ((v22 = a1[4].i32[0], v22 == 3) || !v22))
  {
    v23 = a1->i64[0];
    *(_QWORD *)(v23 + 4456) = *(_QWORD *)(a1->i64[0] + 4456) + 1;
    *(_QWORD *)(v23 + 4464) = 0;
  }
  else
  {
    ++*(_QWORD *)(a1->i64[0] + 4464);
  }
  if (v16 == 1 && (_DWORD)v15 == 1)
    v25 = 1;
  else
    v25 = a1[46].i64[1] + v16 * v15 + 2;
  __p = 0;
  v79 = 0;
  v80 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  if (v25 <= 0x10000)
  {
    v79 = 0;
    sub_2367C5284((char **)&__p, v25);
    v28 = a2[1];
    v27 = (_QWORD *)a2[2];
    v29 = a2[3];
    if (8 * ((_QWORD)v27 + a2[5] - a2[4]) - v28 < 8 * (v29 - a2[4]) + 64)
    {
      if ((unint64_t)v27 > v29)
      {
        sub_2367C5188(a2);
        v30 = *a2;
        v31 = a2[1];
      }
      else
      {
        v30 = *a2 | (*v27 << v28);
        a2[2] = (unint64_t)v27 + ((63 - v28) >> 3);
        v31 = v28 | 0x38;
      }
      v32 = v31 - 1;
      *a2 = v30 >> 1;
      a2[1] = v32;
      if ((v30 & 1) != 0)
      {
        v40 = a2[4];
        v41 = 8 * (a2[3] - v40) + 64;
        v42 = 8 * (a2[2] - v40 + a2[5]) - v32;
        v36 = v41 >= v42;
        v43 = v41 - v42;
        if (!v36 || 12 * v25 > v43)
          goto LABEL_41;
        sub_2367C5284(&v75, v25);
        v44 = v75;
        memset(v92, 0, 24);
        *(_OWORD *)v87 = 0u;
        v88 = 0u;
        *(_OWORD *)v86 = 0u;
        memset(v85, 0, sizeof(v85));
        v89 = &off_2507FF438;
        v90 = xmmword_2368AF590;
        v81[0].i64[0] = (uint64_t)&off_2507FF550;
        *(uint64x2_t *)((char *)v81 + 8) = (uint64x2_t)xmmword_2368AF3F0;
        v81[1].i64[1] = 0;
        sub_2367CB9F8((uint64_t)&v89, (uint64_t)v81);
        v91 = 0;
        v10 = sub_2367CC178(a2, 8uLL, (uint64_t)v85, v92, 0);
        if (!(_DWORD)v10)
        {
          sub_2367C4794((uint64_t)v81, (uint64_t)v85, a2, 0);
          v45 = sub_2367C4A38(0, v25, (uint64_t)v44, a2, (uint64_t)v81, v92);
          v10 = v45 ? v45 : (v81[1].i32[1] != 1245184);
          v46 = *(_QWORD *)&v82[1];
          *(_QWORD *)&v82[1] = 0;
          if (v46)
          {
            v47 = -*(_QWORD *)(v46 - 24);
            do
              v48 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v48 + v47, &qword_2564313D8));
            free(*(void **)(v46 - 32));
          }
        }
        if (v87[1])
        {
          *(void **)&v88 = v87[1];
          operator delete(v87[1]);
        }
        if (v86[0])
        {
          v86[1] = v86[0];
          operator delete(v86[0]);
        }
        v81[0].i64[0] = (uint64_t)v85 + 8;
        sub_2367C4718((void ***)v81);
        v49 = *(_QWORD *)&v85[0];
        *(_QWORD *)&v85[0] = 0;
        if (v49)
        {
          v50 = -*(_QWORD *)(v49 - 24);
          do
            v51 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v51 + v50, &qword_2564313D8));
          free(*(void **)(v49 - 32));
        }
        if (v92[0])
          operator delete((void *)v92[0]);
        if ((_DWORD)v10)
          goto LABEL_42;
      }
      v10 = sub_2367EE6EC(a2);
      if ((_DWORD)v10)
        goto LABEL_42;
      v33 = a2[4];
      v34 = 8 * (a2[3] - v33) + 64;
      v35 = 8 * (a2[2] - v33 + a2[5]) - a2[1];
      v36 = v34 >= v35;
      v37 = v34 - v35;
      if (v36 && 12 * v25 <= v37)
      {
        if (v25)
        {
          v38 = __p;
          v39 = v25;
          do
          {
            *v38++ = sub_2367F2B30(0x800D00000009, 0x808801D00088015, a2);
            --v39;
          }
          while (v39);
        }
        if (sub_2367EE6EC(a2))
        {
LABEL_37:
          v10 = 1;
          goto LABEL_42;
        }
        if (8 * (a2[2] - a2[4] + a2[5]) - a2[1] <= 8 * (a2[3] - a2[4]) + 64)
        {
          v52 = v75;
          v53 = v76;
          v55 = (_BYTE *)a1[1].i64[0];
          v54 = (char *)a1[1].i64[1];
          v56 = (v54 - v55) >> 4;
          if (v25 <= v56)
          {
            if (v25 < v56)
              a1[1].i64[1] = (uint64_t)&v55[16 * v25];
          }
          else
          {
            v57 = v25 - v56;
            v58 = a1[2].i64[0];
            if (v25 - v56 <= (v58 - (uint64_t)v54) >> 4)
            {
              bzero((void *)a1[1].i64[1], 16 * v57);
              a1[2].i64[1] = 0;
              v66 = &a1[2].i64[1];
              a1[1].i64[1] = (uint64_t)&v54[16 * v57];
              v67 = v52;
LABEL_85:
              v68 = 0;
              v69 = 0;
              v70 = (unsigned int *)__p;
              v71 = (_QWORD *)a1[1].i64[0];
              v72 = v71;
              while (1)
              {
                v73 = v70[v69];
                *v72 = v73;
                v74 = v69;
                if (v52 != v53)
                  v74 = *(unsigned int *)&v67[4 * v69];
                v71[2 * v74 + 1] = v69;
                v36 = __CFADD__(v68, v73);
                v68 += v73;
                if (v36)
                  goto LABEL_37;
                *v66 = v68;
                ++v69;
                v72 += 2;
                if (v25 == v69)
                  goto LABEL_90;
              }
            }
            if (v25 >> 60)
              sub_2367C3440();
            v59 = v58 - (_QWORD)v55;
            v60 = v59 >> 3;
            if (v59 >> 3 <= v25)
              v60 = v25;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
              v61 = 0xFFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            if (v61 >> 60)
              sub_2367C3488();
            v62 = (char *)operator new(16 * v61);
            v63 = &v62[16 * v56];
            v64 = &v62[16 * v61];
            bzero(v63, 16 * v57);
            v65 = &v63[16 * v57];
            if (v54 != v55)
            {
              do
              {
                *((_OWORD *)v63 - 1) = *((_OWORD *)v54 - 1);
                v63 -= 16;
                v54 -= 16;
              }
              while (v54 != v55);
              v54 = (char *)a1[1].i64[0];
            }
            a1[1].i64[0] = (uint64_t)v63;
            a1[1].i64[1] = (uint64_t)v65;
            a1[2].i64[0] = (uint64_t)v64;
            if (v54)
              operator delete(v54);
          }
          a1[2].i64[1] = 0;
          v66 = &a1[2].i64[1];
          if (v25)
          {
            v67 = v75;
            goto LABEL_85;
          }
          v68 = 0;
LABEL_90:
          if (__CFADD__(v68, (8 * (a2[2] - a2[4] + a2[5]) - a2[1]) >> 3)
            || !sub_2367CB2F4((uint64_t)&a1[5].i64[1]) && (a1[4].i8[8] & 0x80) == 0 && !a1[3].i32[3])
          {
            goto LABEL_37;
          }
          v10 = 0;
LABEL_42:
          if (v75)
            operator delete(v75);
          goto LABEL_22;
        }
      }
    }
LABEL_41:
    v10 = 0xFFFFFFFFLL;
    goto LABEL_42;
  }
  v10 = 1;
LABEL_22:
  if (__p)
    operator delete(__p);
  return v10;
}

void sub_2367D3930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2367D3A24(uint64_t a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t k;
  uint64_t i;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64x2_t v91;
  unsigned int v92;
  uint64x2_t v93;
  __int128 v94;
  _BYTE v95[32];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v2 = (unsigned int *)(a1 + 48);
  v3 = *(_QWORD **)a1;
  **(_QWORD **)a1 = *(_QWORD *)(a1 + 456);
  sub_2367DC34C(&v93, a1 + 48);
  *(_OWORD *)(v3 + 11) = v97;
  *(_OWORD *)(v3 + 13) = v98;
  *(_OWORD *)(v3 + 15) = v99;
  *(_OWORD *)(v3 + 17) = v100;
  *(_OWORD *)(v3 + 3) = v94;
  *(_OWORD *)(v3 + 5) = *(_OWORD *)v95;
  *(_OWORD *)(v3 + 7) = *(_OWORD *)&v95[16];
  *(_OWORD *)(v3 + 9) = v96;
  *(uint64x2_t *)(v3 + 1) = v93;
  v3[157] = v3;
  sub_2367C2DE4((uint64_t)&v87, v3[9], v3[10]);
  v4 = v92;
  if (v92)
    return v4;
  v6 = v88;
  v5 = v89;
  v89 = 0;
  v7 = v90;
  v93 = v91;
  *(_OWORD *)(v3 + 19) = v87;
  v8 = v3[22];
  v3[21] = v6;
  v3[22] = v5;
  if (v8)
  {
    v9 = -*(_QWORD *)(v8 - 24);
    do
      v10 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v10 + v9, &qword_2564313D8));
    free(*(void **)(v8 - 32));
  }
  v3[23] = v7;
  *((uint64x2_t *)v3 + 12) = v93;
  sub_2367DA410((uint64_t)&v82, v3[9], v3[10]);
  v4 = v86;
  if (!v86)
  {
    v11 = v83;
    v12 = v84;
    v84 = 0;
    v13 = v85;
    *((_OWORD *)v3 + 64) = v82;
    v3[130] = v11;
    v14 = v3[131];
    v3[131] = v12;
    if (v14)
    {
      v15 = -*(_QWORD *)(v14 - 24);
      do
        v16 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v16 + v15, &qword_2564313D8));
      free(*(void **)(v14 - 32));
    }
    v3[132] = v13;
    sub_2367C2E38((uint64_t)&v77, v3[9], v3[10]);
    v4 = v81;
    if (v81)
      goto LABEL_54;
    v17 = v79;
    v79 = 0;
    v18 = v80;
    v3[135] = v78;
    *(_OWORD *)(v3 + 133) = v77;
    v19 = v3[136];
    v3[136] = v17;
    if (v19)
    {
      v20 = -*(_QWORD *)(v19 - 24);
      do
        v21 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v21 + v20, &qword_2564313D8));
      free(*(void **)(v19 - 32));
    }
    v3[137] = v18;
    sub_2367C4420((uint64_t)&v93, v3[1], v3[2], 1);
    v4 = DWORD2(v99);
    if (DWORD2(v99))
      goto LABEL_49;
    v61 = *(_OWORD *)&v95[8];
    v22 = *((_QWORD *)&v94 + 1);
    v23 = *(_QWORD *)v95;
    v24 = v96;
    v62 = *(_QWORD *)&v95[24];
    v25 = *((_QWORD *)&v96 + 1);
    *(_QWORD *)&v65 = v99;
    *((_QWORD *)&v94 + 1) = 0;
    *(_QWORD *)&v96 = 0;
    v63 = v97;
    v64 = v98;
    v26 = v93;
    v3[140] = v94;
    *((uint64x2_t *)v3 + 69) = v26;
    v27 = v3[141];
    v3[141] = v22;
    if (v27)
    {
      v28 = -*(_QWORD *)(v27 - 24);
      do
        v29 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v29 + v28, &qword_2564313D8));
      free(*(void **)(v27 - 32));
    }
    v3[142] = v23;
    v3[145] = v62;
    *(_OWORD *)(v3 + 143) = v61;
    v30 = v3[146];
    v3[146] = v24;
    if (v30)
    {
      v31 = -*(_QWORD *)(v30 - 24);
      do
        v32 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v32 + v31, &qword_2564313D8));
      free(*(void **)(v30 - 32));
    }
    v3[147] = v25;
    v33 = v64;
    *((_OWORD *)v3 + 74) = v63;
    *((_OWORD *)v3 + 75) = v33;
    v3[152] = v65;
    v3[195] = 393984;
    sub_2367C2E38((uint64_t)&v72, v3[9], v3[10]);
    v4 = v76;
    if (v76)
    {
LABEL_49:
      sub_23680320C((uint64_t)&v93);
      if (!v81)
      {
        v44 = v79;
        v79 = 0;
        if (v44)
        {
          v45 = -*(_QWORD *)(v44 - 24);
          do
            v46 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v46 + v45, &qword_2564313D8));
          free(*(void **)(v44 - 32));
        }
      }
LABEL_54:
      if (!v86)
      {
        v47 = v84;
        v84 = 0;
        if (v47)
        {
          v48 = -*(_QWORD *)(v47 - 24);
          do
            v49 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v49 + v48, &qword_2564313D8));
          free(*(void **)(v47 - 32));
        }
      }
      goto LABEL_59;
    }
    v34 = v74;
    v74 = 0;
    v35 = v75;
    v3[201] = v73;
    *(_OWORD *)(v3 + 199) = v72;
    sub_2367C5200(v3 + 202, v34);
    v3[203] = v35;
    if ((*(_BYTE *)(a1 + 72) & 0x20) != 0)
    {
      if (*(_DWORD *)(a1 + 452) == 4)
        goto LABEL_43;
      v70 = 0;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v63 = 0u;
      sub_2367D086C((uint64_t)(v3 + 204), (uint64_t)&v63);
      for (i = 104; i != -16; i -= 40)
        sub_2367C2F38((uint64_t *)((char *)&v63 + i));
      v39 = &v3[15 * *(unsigned int *)(a1 + 452) + 237];
      v3[219] = v39;
      if (!*v39)
      {
LABEL_43:
        v4 = 1;
        goto LABEL_44;
      }
      if (*((_DWORD *)v3 + 398) && *((_DWORD *)v3 + 399))
      {
        v40 = 0;
        do
          bzero((void *)(v3[202] + v3[201] * v40++), *((unsigned int *)v3 + 398));
        while (v40 < *((unsigned int *)v3 + 399));
      }
    }
    else
    {
      sub_2367CA770((uint64_t)&v63, v3[9], v3[10]);
      v4 = v71;
      if (v71)
      {
LABEL_44:
        if (!v76)
        {
          v41 = v74;
          v74 = 0;
          if (v41)
          {
            v42 = -*(_QWORD *)(v41 - 24);
            do
              v43 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v43 + v42, &qword_2564313D8));
            free(*(void **)(v41 - 32));
          }
        }
        goto LABEL_49;
      }
      sub_2367CA9E4((uint64_t)&v61, (uint64_t)&v63);
      sub_2367D086C((uint64_t)(v3 + 204), (uint64_t)&v61);
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)((char *)&v61 + j));
      v3[219] = v3 + 204;
      if (!v71)
      {
        for (k = 104; k != -16; k -= 40)
          sub_2367C2F38((uint64_t *)((char *)&v63 + k));
      }
    }
    v4 = 0;
    goto LABEL_44;
  }
LABEL_59:
  if (!v92)
  {
    v50 = v89;
    v89 = 0;
    if (v50)
    {
      v51 = -*(_QWORD *)(v50 - 24);
      do
        v52 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v52 + v51, &qword_2564313D8));
      free(*(void **)(v50 - 32));
    }
  }
  if (!(_DWORD)v4)
  {
    v4 = sub_2367DC0E8(*(_QWORD *)a1, v2);
    if (!(_DWORD)v4)
    {
      v53 = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 984) = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 1000) = v53;
      *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a1 + 752);
      v54 = *(_OWORD *)(a1 + 672);
      *(_OWORD *)(a1 + 920) = *(_OWORD *)(a1 + 656);
      *(_OWORD *)(a1 + 936) = v54;
      v55 = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 952) = *(_OWORD *)(a1 + 688);
      *(_OWORD *)(a1 + 968) = v55;
      v56 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 888) = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 904) = v56;
      *(_WORD *)(a1 + 1408) = 0;
      *(_BYTE *)(a1 + 1424) = 0;
      *(_BYTE *)(a1 + 1410) = 0;
      *(_QWORD *)(a1 + 1416) = 0;
      *(_QWORD *)(a1 + 1392) = *(_QWORD *)(a1 + 1384);
      v57 = *(_QWORD *)(a1 + 744);
      if (v57)
        sub_2367C8698((unint64_t *)(a1 + 1384), v57);
      *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a1 + 1360);
      v58 = *(_QWORD *)(a1 + 736);
      v93.i8[0] = 0;
      if (v58)
        sub_2367C8504((_QWORD *)(a1 + 1360), v58, &v93);
      *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a1 + 1336);
      v59 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
      if (v59)
        sub_2367C8698((unint64_t *)(a1 + 1336), v59 >> 4);
      v4 = 0;
      *(_BYTE *)(a1 + 1425) = 0;
    }
  }
  return v4;
}

void sub_2367D401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a66;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  sub_23680320C(v66 - 208);
  if (!a52 && a50)
  {
    v68 = -*(_QWORD *)(a50 - 24);
    do
      v69 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v69 + v68, &qword_2564313D8));
    free(*(void **)(a50 - 32));
  }
  if (!a58 && a56)
  {
    v70 = -*(_QWORD *)(a56 - 24);
    do
      v71 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v71 + v70, &qword_2564313D8));
    free(*(void **)(a56 - 32));
  }
  if (!a66 && a62)
  {
    v72 = -*(_QWORD *)(a62 - 24);
    do
      v73 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v73 + v72, &qword_2564313D8));
    free(*(void **)(a62 - 32));
  }
  _Unwind_Resume(a1);
}

char *sub_2367D4108(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_2367C3440();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_2367C3404(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *sub_2367D420C(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(_QWORD *)v1)
    {
      if (sub_2367DBFFC(*(_QWORD *)v1))
        **(_DWORD **)(v1 + 8) = 1;
    }
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

uint64_t sub_2367D426C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *__b)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  char **v9;
  char **v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float v51;
  float v52;
  float *v53;
  unint64_t v54;
  float *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  float *v62;
  char *v63;
  char *v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  char v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  void **v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  _DWORD *i;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  _DWORD *v150;
  _DWORD *v151;
  char *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  int v174;
  BOOL v175;
  BOOL v176;
  char *v177;
  unint64_t v178;
  _DWORD *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  int v189;
  char *v190;
  unint64_t v191;
  _QWORD *v192;
  char *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  __int128 v201;
  char *v202;
  int64x2_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  __int128 v212;
  void **v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  _BOOL8 v222;
  unsigned __int8 v223;
  _BYTE *n;
  BOOL v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t *v228;
  unsigned __int8 *v229;
  unsigned int v230;
  unint64_t v231;
  char **v232;
  char **v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  unint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t j;
  _QWORD *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _DWORD *v257;
  _QWORD *v258;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  void **v265;
  uint64_t v266;
  int v267;
  _QWORD *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  unsigned int v275;
  _QWORD *v276;
  _BOOL8 v277;
  unsigned __int8 v278;
  uint64_t v279;
  uint64_t v280;
  _DWORD *v281;
  _QWORD *v282;
  unint64_t v284;
  _DWORD *v285;
  _DWORD *v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  int v302;
  unsigned int v303;
  _BOOL4 v304;
  unsigned int v305;
  unsigned int v306;
  void **v307;
  int v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t k;
  uint64_t v318;
  void **v319;
  void *v320;
  _QWORD *v321;
  void *v322;
  void *v323;
  uint64_t m;
  void *v325;
  uint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  _DWORD *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  void (***v340)(_QWORD);
  void (***v341)(_QWORD);
  void (***v342)(_QWORD);
  void (***v343)(_QWORD);
  void (**v344)(_QWORD);
  void *v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  int64x2_t *v366;
  char **v367;
  int v368[2];
  _QWORD *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void *v375[3];
  char **v376;
  char **v377;
  char **v378;
  void *v379;
  _BYTE *v380;
  _DWORD *v381;
  uint64_t v382;
  uint64_t v383;
  void *v384[2];
  _OWORD v385[33];
  __int128 v386[3];
  void *v387[2];
  __int128 v388;
  char v389;
  uint64_t (**v390)();
  __int128 v391;
  uint64_t v392;
  void *v393[3];
  void *v394[2];
  __int128 v395;
  uint64_t v396;
  void *__p;
  __int128 v398;
  void *v399;
  uint64_t *v400;
  void **v401;
  void **v402;
  _QWORD v403[7];
  void *v404;
  __int128 v405;
  int v406;
  char v407;
  char v408;
  uint64_t v409;

  v409 = *MEMORY[0x24BDAC8D0];
  v382 = a3;
  v383 = a2;
  v381 = __b;
  if (!a3)
    return 0;
  v4 = a3;
  if (a3 >= 1)
    memset_pattern16(__b, &unk_2368AFB20, 4 * (a3 - ((a3 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  sub_2367D7ABC(&v379, *(_QWORD *)(a1 + 744), &v382);
  v6 = *(_QWORD *)(a1 + 736);
  sub_2367D7ABC(&__p, *(unsigned int *)(a1 + 160), &v382);
  v376 = 0;
  v377 = 0;
  v378 = 0;
  v384[0] = &v376;
  LOBYTE(v384[1]) = 0;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2367C3440();
    v7 = 3 * v6;
    v8 = 24 * v6;
    v9 = (char **)operator new(v8);
    v376 = v9;
    v377 = v9;
    v10 = &v9[v7];
    v378 = v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      sub_2367DBF84(v9, __p, v398, (uint64_t)(v398 - (_QWORD)__p) >> 3);
      v9 += 3;
      v8 -= 24;
    }
    while (v8);
    v377 = v10;
  }
  if (__p)
  {
    *(_QWORD *)&v398 = __p;
    operator delete(__p);
  }
  sub_2367D7B3C(v375, *(_QWORD *)(a1 + 736));
  if (*(_QWORD *)(a1 + 736) == 1 && *(_DWORD *)(a1 + 160) == 1)
  {
    v11 = *(_BYTE **)(a1 + 1336);
    if (*v11)
    {
      *v381 = 2;
      v12 = v4;
    }
    else
    {
      *v11 = 1;
      sub_2367D7BB0(v376, 1uLL);
      v4 = 0;
      v12 = 0;
      *(_QWORD *)*v376 = 0;
      *(_QWORD *)v379 = 0;
      *(_QWORD *)v375[0] = 1;
    }
    goto LABEL_42;
  }
  v13 = v382;
  if (v382)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 744);
    v16 = v15 + 1;
    v17 = 8;
    v12 = v4;
    while (1)
    {
      v18 = v383;
      v19 = *(_QWORD *)(v383 + v17);
      v20 = *(_QWORD *)(a1 + 1336);
      if (!*(_BYTE *)(v20 + v19))
        break;
      v381[v14] = 2;
LABEL_29:
      ++v14;
      v17 += 24;
      if (v14 >= v13)
        goto LABEL_33;
    }
    if (v19)
    {
      if (v19 < v16)
      {
        v21 = (char *)v379 + 8 * v19 - 8;
LABEL_27:
        *(_QWORD *)v21 = v14;
        v22 = *(_QWORD *)(v18 + v17);
        goto LABEL_28;
      }
      if (v19 != v16)
      {
        v23 = v19 - v15 - 2;
        v24 = *(_QWORD *)(a1 + 736);
        if (v23 / v24 >= *(unsigned int *)(a1 + 160))
          goto LABEL_454;
        v21 = &v376[3 * (v23 % v24)][8 * (v23 / v24)];
        goto LABEL_27;
      }
      v22 = v15 + 1;
      v4 = v14;
    }
    else
    {
      v22 = 0;
      v12 = v14;
    }
LABEL_28:
    *(_BYTE *)(v20 + v22) = 1;
    v13 = v382;
    goto LABEL_29;
  }
  v12 = v4;
LABEL_33:
  v26 = v376;
  if (v377 != v376)
  {
    v27 = 0;
    v28 = ((char *)v377 - (char *)v376) / 24;
    v29 = *(_QWORD *)(a1 + 1360);
    v30 = *(unsigned int *)(a1 + 160);
    v31 = v375[0];
    if (v28 <= 1)
      v28 = 1;
    do
    {
      v32 = *(unsigned __int8 *)(v29 + v27);
      v33 = 0;
      v34 = v30 - v32;
      if (v30 > v32)
      {
        v35 = (uint64_t)&v26[3 * v27][8 * v32];
        while (*(_QWORD *)(v35 + 8 * v33) != v382)
        {
          if (v34 == ++v33)
          {
            v33 = v34;
            break;
          }
        }
      }
      v31[v27++] = v33;
    }
    while (v27 != v28);
  }
LABEL_42:
  if (v12 == v382)
    goto LABEL_283;
  v374 = v12;
  v36 = *(unint64_t **)(v383 + 24 * v12);
  v37 = *(_QWORD *)a1;
  v38 = (_QWORD *)(*(_QWORD *)a1 + 1256);
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    v103 = *(_QWORD *)(a1 + 672);
    v104 = *(_QWORD *)(a1 + 680);
    *(_QWORD *)(v37 + 1272) = *(_QWORD *)(v37 + 1264);
    v394[1] = 0;
    v394[0] = 0;
    *(_QWORD *)&v395 = 0;
    memset(v385, 0, 64);
    *(_OWORD *)v384 = 0u;
    *((_QWORD *)&v385[4] + 1) = &off_2507FF438;
    *(_OWORD *)((char *)&v385[5] + 12) = xmmword_2368AF590;
    v398 = xmmword_2368AF3F0;
    __p = &off_2507FF550;
    v399 = 0;
    sub_2367CB9F8((uint64_t)&v385[4] + 8, (uint64_t)&__p);
    *((_QWORD *)&v385[7] + 1) = 0;
    v25 = sub_2367CC178(v36, 0xAuLL, (uint64_t)v384, (unint64_t *)v394, 0);
    if ((_DWORD)v25)
    {
      v105 = 0;
      goto LABEL_136;
    }
    sub_2367C4794((uint64_t)&__p, (uint64_t)v384, v36, 0);
    v106 = sub_2367C4CF4((uint64_t)&__p, *(unsigned __int8 *)v394[0], v36);
    v107 = ((v104 * v103) >> 2) + 1024;
    if (v106 > v107)
    {
      v105 = 0;
      goto LABEL_131;
    }
    v116 = v106;
    v366 = (int64x2_t *)(v37 + 1272);
    v369 = v38;
    if (v106)
    {
      v357 = v104;
      v358 = v103;
      v105 = 0;
      v360 = 0;
      v117 = 0;
      v355 = 4 * v107;
      v372 = *(unsigned int *)(**(_QWORD **)(v37 + 1256) + 320);
      v352 = v372 + 1;
      v353 = 16 * v107;
      v118 = 1;
LABEL_155:
      v119 = (unsigned __int8 *)v394[0];
      v120 = sub_2367C4CF4((uint64_t)&__p, *((unsigned __int8 *)v394[0] + 1), v36);
      *(_QWORD *)&v386[0] = v120;
      if (v120 > 3)
        goto LABEL_131;
      v347 = v116;
      v121 = *v369 + 456 * v120;
      v122 = v121 + 2376;
      if (!*(_DWORD *)(v121 + 2472))
      {
        v123 = *(_DWORD **)(v121 + 2792);
        if (v123 == *(_DWORD **)(v122 + 424) || !*v123)
          goto LABEL_131;
      }
      if (!*(_BYTE *)(*v369 + 456 * v120 + 2824))
        goto LABEL_131;
      v362 = v118;
      v346 = v117;
      v124 = sub_2367C4CF4((uint64_t)&__p, v119[3], v36);
      *((_QWORD *)&v386[0] + 1) = v124;
      v125 = sub_2367C4CF4((uint64_t)&__p, v119[3], v36);
      *(_QWORD *)&v386[1] = v125;
      v126 = sub_2367C4CF4((uint64_t)&__p, v119[2], v36) + 1;
      *((_QWORD *)&v386[1] + 1) = v126;
      v127 = sub_2367C4CF4((uint64_t)&__p, v119[2], v36);
      *(_QWORD *)&v386[2] = v127 + 1;
      v128 = *(unsigned int *)(v122 + 96);
      if (!(_DWORD)v128)
      {
        v129 = *(unsigned int **)(v122 + 416);
        if (v129 == *(unsigned int **)(v122 + 424))
          v128 = 0;
        else
          v128 = *v129;
      }
      if (v126 + v124 > v128)
        goto LABEL_131;
      v130 = *(unsigned int *)(v122 + 100);
      v131 = v362;
      if (!(_DWORD)v130)
      {
        v132 = *(_QWORD *)(v122 + 416);
        if (v132 == *(_QWORD *)(v122 + 424))
          v130 = 0;
        else
          v130 = *(unsigned int *)(v132 + 4);
      }
      if (v125 + v127 + 1 > v130)
        goto LABEL_131;
      v133 = sub_2367C4CF4((uint64_t)&__p, v119[7], v36);
      if (v133 > v355)
        goto LABEL_131;
      v134 = v133;
      v135 = v133 + v360 + 1;
      if (v135 > v355)
        goto LABEL_131;
      v136 = 2 * v362;
      if (v355 < 2 * v362)
        v136 = v355;
      if (v362 < v135)
        v131 = v136;
      v137 = v131 * v352;
      if (v131 * v352 > v353)
        goto LABEL_131;
      v360 += v133 + 1;
      v138 = *(_QWORD *)(v37 + 1264);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v37 + 1280) - v138) >> 3) < v131)
      {
        if (v131 > 0xAAAAAAAAAAAAAAALL)
          sub_2367C3440();
        v139 = v366->i64[0];
        v140 = (char *)sub_2367D1EBC(v131);
        v142 = *(char **)(v37 + 1272);
        v143 = *(char **)(v37 + 1264);
        v144 = &v140[24 * ((v139 - v138) / 24)];
        if (v142 != v143)
        {
          do
          {
            v145 = *(_OWORD *)(v142 - 24);
            *((_QWORD *)v144 - 1) = *((_QWORD *)v142 - 1);
            *(_OWORD *)(v144 - 24) = v145;
            v144 -= 24;
            v142 -= 24;
          }
          while (v142 != v143);
          v142 = *(char **)(v37 + 1264);
        }
        *(_QWORD *)(v37 + 1264) = v144;
        *(_QWORD *)(v37 + 1272) = &v140[24 * ((v139 - v138) / 24)];
        *(_QWORD *)(v37 + 1280) = &v140[24 * v141];
        if (v142)
          operator delete(v142);
      }
      v146 = *(_QWORD *)(v37 + 1312);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v37 + 1328) - v146) >> 2) < v137)
      {
        if (v137 > 0x1555555555555555)
          sub_2367C3440();
        v147 = *(_QWORD *)(v37 + 1320);
        v148 = (char *)sub_2367E4DB0(v137);
        v150 = *(_DWORD **)(v37 + 1320);
        v151 = *(_DWORD **)(v37 + 1312);
        v152 = &v148[12 * ((v147 - v146) / 12)];
        if (v150 != v151)
        {
          do
          {
            v153 = *(_QWORD *)(v150 - 3);
            v150 -= 3;
            v154 = v150[2];
            *(_QWORD *)(v152 - 12) = v153;
            v152 -= 12;
            *((_DWORD *)v152 + 2) = v154;
          }
          while (v150 != v151);
          v150 = *(_DWORD **)(v37 + 1312);
        }
        *(_QWORD *)(v37 + 1312) = v152;
        *(_QWORD *)(v37 + 1320) = &v148[12 * ((v147 - v146) / 12)];
        *(_QWORD *)(v37 + 1328) = &v148[12 * v149];
        if (v150)
          operator delete(v150);
      }
      v348 = v134;
      v155 = 0;
      v363 = v131;
LABEL_192:
      v156 = *(_QWORD *)(v37 + 1296);
      v157 = *(_QWORD *)(v37 + 1288);
      v158 = (unsigned __int8 *)v394[0];
      v354 = v155;
      if (v155)
      {
        v159 = sub_2367C4CF4((uint64_t)&__p, *((unsigned __int8 *)v394[0] + 6), v36);
        v160 = -(uint64_t)(v159 & 1) ^ (v159 >> 1);
        v161 = v366->i64[0];
        if ((v160 & 0x8000000000000000) != 0)
        {
          v162 = *(_QWORD *)(v161 - 24);
          if (v162 < -(uint64_t)v160)
            goto LABEL_131;
        }
        else
        {
          v162 = *(_QWORD *)(v161 - 24);
        }
        v165 = sub_2367C4CF4((uint64_t)&__p, v158[6], v36);
        v166 = -(uint64_t)(v165 & 1) ^ (v165 >> 1);
        v167 = v366->i64[0];
        if ((v166 & 0x8000000000000000) != 0)
        {
          v168 = *(_QWORD *)(v167 - 16);
          if (v168 < -(uint64_t)v166)
            goto LABEL_131;
        }
        else
        {
          v168 = *(_QWORD *)(v167 - 16);
        }
        v163 = v162 + v160;
        v164 = v168 + v166;
      }
      else
      {
        v163 = sub_2367C4CF4((uint64_t)&__p, *((unsigned __int8 *)v394[0] + 4), v36);
        v164 = sub_2367C4CF4((uint64_t)&__p, v158[4], v36);
      }
      if (*((_QWORD *)&v386[1] + 1) + v163 > v358 || *(_QWORD *)&v386[2] + v164 > v357)
        goto LABEL_131;
      v350 = v164;
      v351 = v163;
      v169 = 0;
      v349 = 0xCCCCCCCCCCCCCCCDLL * ((v156 - v157) >> 3);
      while (1)
      {
        v170 = (unsigned __int8 *)v394[0];
        v171 = sub_2367C4CF4((uint64_t)&__p, *((unsigned __int8 *)v394[0] + 5), v36);
        if (v171 > 7)
          goto LABEL_131;
        v172 = v171;
        if ((v171 & 0xFC) == 4)
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)*v369 + 336) - *(_QWORD *)(*(_QWORD *)*v369 + 328)) >> 5) < 2)
          {
            v174 = 0;
            v105 = 1;
          }
          else
          {
            v173 = sub_2367C4CF4((uint64_t)&__p, v170[8], v36);
            v174 = v173;
            v105 = 1;
            if (v173 >= 0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)*v369 + 336) - *(_QWORD *)(*(_QWORD *)*v369 + 328)) >> 5))
              goto LABEL_131;
          }
        }
        else
        {
          v174 = 0;
          v175 = 0;
          if ((_BYTE)v171)
            v176 = v169 == 0;
          else
            v176 = 1;
          if (!v176)
            v105 = 1;
          if (v171 != 3)
            goto LABEL_218;
        }
        v175 = sub_2367C4CF4((uint64_t)&__p, v170[9], v36) != 0;
LABEL_218:
        v177 = *(char **)(v37 + 1320);
        v178 = *(_QWORD *)(v37 + 1328);
        if ((unint64_t)v177 >= v178)
        {
          v180 = *(char **)(v37 + 1312);
          v181 = 0xAAAAAAAAAAAAAAABLL * ((v177 - v180) >> 2);
          v182 = v181 + 1;
          if (v181 + 1 > 0x1555555555555555)
            sub_2367C3440();
          v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (_QWORD)v180) >> 2);
          if (2 * v183 > v182)
            v182 = 2 * v183;
          if (v183 >= 0xAAAAAAAAAAAAAAALL)
            v184 = 0x1555555555555555;
          else
            v184 = v182;
          if (v184)
          {
            v184 = (unint64_t)sub_2367E4DB0(v184);
            v177 = *(char **)(v37 + 1320);
            v180 = *(char **)(v37 + 1312);
          }
          else
          {
            v185 = 0;
          }
          v186 = v184 + 12 * v181;
          *(_BYTE *)v186 = v172;
          *(_DWORD *)(v186 + 4) = v174;
          *(_BYTE *)(v186 + 8) = v175;
          v187 = v186;
          if (v177 != v180)
          {
            do
            {
              v188 = *(_QWORD *)(v177 - 12);
              v177 -= 12;
              v189 = *((_DWORD *)v177 + 2);
              *(_QWORD *)(v187 - 12) = v188;
              v187 -= 12;
              *(_DWORD *)(v187 + 8) = v189;
            }
            while (v177 != v180);
            v180 = *(char **)(v37 + 1312);
          }
          *(_QWORD *)(v37 + 1312) = v187;
          v179 = (_DWORD *)(v186 + 12);
          *(_QWORD *)(v37 + 1320) = v186 + 12;
          *(_QWORD *)(v37 + 1328) = v184 + 12 * v185;
          if (v180)
            operator delete(v180);
        }
        else
        {
          *v177 = v172;
          *((_DWORD *)v177 + 1) = v174;
          v179 = v177 + 12;
          v177[8] = v175;
        }
        *(_QWORD *)(v37 + 1320) = v179;
        v176 = v169++ == v372;
        if (v176)
        {
          v190 = *(char **)(v37 + 1272);
          v191 = *(_QWORD *)(v37 + 1280);
          if ((unint64_t)v190 >= v191)
          {
            v193 = *(char **)(v37 + 1264);
            v194 = 0xAAAAAAAAAAAAAAABLL * ((v190 - v193) >> 3);
            v195 = v194 + 1;
            v118 = v363;
            if (v194 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_2367C3440();
            v196 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191 - (_QWORD)v193) >> 3);
            if (2 * v196 > v195)
              v195 = 2 * v196;
            if (v196 >= 0x555555555555555)
              v197 = 0xAAAAAAAAAAAAAAALL;
            else
              v197 = v195;
            if (v197)
            {
              v197 = (unint64_t)sub_2367D1EBC(v197);
              v190 = *(char **)(v37 + 1272);
              v193 = *(char **)(v37 + 1264);
            }
            else
            {
              v198 = 0;
            }
            v199 = (uint64_t *)(v197 + 24 * v194);
            *v199 = v351;
            v199[1] = v350;
            v199[2] = v349;
            v200 = v199;
            if (v190 != v193)
            {
              do
              {
                v201 = *(_OWORD *)(v190 - 24);
                *(v200 - 1) = *((_QWORD *)v190 - 1);
                *(_OWORD *)(v200 - 3) = v201;
                v200 -= 3;
                v190 -= 24;
              }
              while (v190 != v193);
              v193 = *(char **)(v37 + 1264);
            }
            *(_QWORD *)(v37 + 1264) = v200;
            v192 = v199 + 3;
            *(_QWORD *)(v37 + 1272) = v199 + 3;
            *(_QWORD *)(v37 + 1280) = v197 + 24 * v198;
            if (v193)
              operator delete(v193);
          }
          else
          {
            *(_QWORD *)v190 = v351;
            *((_QWORD *)v190 + 1) = v350;
            v192 = v190 + 24;
            *((_QWORD *)v190 + 2) = v349;
            v118 = v363;
          }
          v366->i64[0] = (uint64_t)v192;
          v155 = v354 + 1;
          if (v354 != v348)
            goto LABEL_192;
          sub_2367E4DF4((void **)(v37 + 1288), v386);
          v116 = v347;
          v117 = v346 + 1;
          if (v346 + 1 != v347)
            goto LABEL_155;
          goto LABEL_256;
        }
      }
    }
    v105 = 0;
LABEL_256:
    v202 = *(char **)(v37 + 1264);
    v203 = vshrq_n_s64(vsubq_s64(*v366, vdupq_n_s64((unint64_t)v202)), 3uLL);
    v204 = 0xAAAAAAAAAAAAAAABLL * v203.i64[0];
    v205 = v204;
    if (0xAAAAAAAAAAAAAAABLL * v203.i64[1] <= v204)
    {
LABEL_450:
      if (HIDWORD(v398) == 1245184)
      {
        sub_2367E4F18(v369);
        v25 = 0;
LABEL_132:
        v108 = v402;
        v402 = 0;
        if (v108)
        {
          v109 = -(uint64_t)*(v108 - 3);
          do
            v110 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v110 + v109, &qword_2564313D8));
          free(*(v108 - 4));
        }
LABEL_136:
        if (*((_QWORD *)&v385[2] + 1))
        {
          *(_QWORD *)&v385[3] = *((_QWORD *)&v385[2] + 1);
          operator delete(*((void **)&v385[2] + 1));
        }
        if (*(_QWORD *)&v385[1])
        {
          *((_QWORD *)&v385[1] + 1) = *(_QWORD *)&v385[1];
          operator delete(*(void **)&v385[1]);
        }
        __p = &v384[1];
        sub_2367C4718((void ***)&__p);
        v111 = v384[0];
        v384[0] = 0;
        if (v111)
        {
          v112 = -*(v111 - 3);
          do
            v113 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v113 + v112, &qword_2564313D8));
          free((void *)*(v111 - 4));
        }
        if (v394[0])
          operator delete(v394[0]);
        if ((_DWORD)v25)
          goto LABEL_280;
        if (v105)
        {
          v114 = *(_DWORD *)(a1 + 316);
          if (v114 != 1)
          {
            for (i = *(_DWORD **)(a1 + 320); i != *(_DWORD **)(a1 + 328); ++i)
            {
              if (*i != v114)
                goto LABEL_454;
            }
          }
        }
        goto LABEL_45;
      }
LABEL_131:
      v25 = 1;
      goto LABEL_132;
    }
    if ((char *)v366->i64[0] == v202)
    {
      v210 = 0;
      v208 = 24 * v204;
    }
    else
    {
      v206 = (char *)sub_2367D1EBC(v204);
      v202 = *(char **)(v37 + 1272);
      v207 = *(char **)(v37 + 1264);
      v208 = (uint64_t)&v206[24 * v205];
      v210 = &v206[24 * v209];
      if (v202 != v207)
      {
        v211 = v208;
        do
        {
          v212 = *(_OWORD *)(v202 - 24);
          *(_QWORD *)(v211 - 8) = *((_QWORD *)v202 - 1);
          *(_OWORD *)(v211 - 24) = v212;
          v211 -= 24;
          v202 -= 24;
        }
        while (v202 != v207);
        v202 = *(char **)(v37 + 1264);
LABEL_448:
        *(_QWORD *)(v37 + 1264) = v211;
        *(_QWORD *)(v37 + 1272) = v208;
        *(_QWORD *)(v37 + 1280) = v210;
        if (v202)
          operator delete(v202);
        goto LABEL_450;
      }
    }
    v211 = v208;
    goto LABEL_448;
  }
  *(_QWORD *)(v37 + 1272) = *(_QWORD *)(v37 + 1264);
  sub_2367E4F18(v38);
LABEL_45:
  *(_DWORD *)(v37 + 1432) = 0;
  sub_2367E97D0((uint64_t *)(v37 + 1440));
  *(_QWORD *)(v37 + 1472) = *(_QWORD *)(v37 + 1464);
  *(_QWORD *)(v37 + 1496) = *(_QWORD *)(v37 + 1488);
  *(_QWORD *)(v37 + 1520) = *(_QWORD *)(v37 + 1512);
  *(_QWORD *)(v37 + 1544) = *(_QWORD *)(v37 + 1536);
  v39 = *(_QWORD *)(a1 + 72);
  if ((v39 & 0x10) == 0)
    goto LABEL_314;
  v40 = *(_QWORD *)(a1 + 624);
  v41 = *(_QWORD *)(a1 + 632);
  memset(v393, 0, sizeof(v393));
  *(_OWORD *)v387 = 0u;
  v388 = 0u;
  memset(v386, 0, sizeof(v386));
  v390 = &off_2507FF438;
  v391 = xmmword_2368AF590;
  v398 = xmmword_2368AF3F0;
  __p = &off_2507FF550;
  v399 = 0;
  sub_2367CB9F8((uint64_t)&v390, (uint64_t)&__p);
  v392 = 0;
  v25 = sub_2367CC178(v36, 6uLL, (uint64_t)v386, (unint64_t *)v393, 0);
  if ((_DWORD)v25)
    goto LABEL_269;
  sub_2367C4794((uint64_t)&__p, (uint64_t)v386, v36, 0);
  v42 = (unsigned __int8 *)v393[0];
  v43 = sub_2367C4CF4((uint64_t)&__p, *((unsigned __int8 *)v393[0] + 2), v36);
  v44 = (unint64_t)(v41 * v40) >> 1;
  if (v44 >= 0x100000)
    v44 = 0x100000;
  if (v43 >= v44)
  {
LABEL_264:
    v25 = 1;
    goto LABEL_265;
  }
  v361 = v44;
  v367 = (char **)(v37 + 1464);
  v371 = v43;
  *(_QWORD *)(v37 + 1472) = *(_QWORD *)(v37 + 1464);
  v365 = v43 + 1;
  sub_2368069B0((void **)(v37 + 1464), v43 + 1);
  v359 = (uint64_t *)(v37 + 1440);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = sub_2367C4CF4((uint64_t)&__p, v42[1], v36);
    v49 = sub_2367C4CF4((uint64_t)&__p, v42[1], v36);
    if (v47)
      v46 += -(uint64_t)(v49 & 1) ^ (v49 >> 1);
    else
      v46 = v49;
    if (v47)
      v45 += -(uint64_t)(v48 & 1) ^ (v48 >> 1);
    else
      v45 = v48;
    if ((unint64_t)(v45 - 0x800000) < 0xFFFFFFFFFF000001
      || (unint64_t)(v46 - 0x800000) < 0xFFFFFFFFFF000001)
    {
      goto LABEL_264;
    }
    v51 = (float)v45;
    v52 = (float)v46;
    v53 = *(float **)(v37 + 1472);
    v54 = *(_QWORD *)(v37 + 1480);
    if ((unint64_t)v53 >= v54)
    {
      v56 = ((char *)v53 - *v367) >> 3;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        sub_2367C3440();
      v58 = v54 - (_QWORD)*v367;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      v60 = (char *)sub_2367CA1FC(v59);
      v62 = (float *)&v60[8 * v56];
      *v62 = v51;
      v62[1] = v52;
      v63 = *(char **)(v37 + 1472);
      v64 = *(char **)(v37 + 1464);
      v65 = v62;
      if (v63 != v64)
      {
        do
        {
          v66 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *((_QWORD *)v65 - 1) = v66;
          v65 -= 2;
        }
        while (v63 != v64);
        v63 = *v367;
      }
      *(_QWORD *)(v37 + 1464) = v65;
      v55 = v62 + 2;
      *(_QWORD *)(v37 + 1472) = v62 + 2;
      *(_QWORD *)(v37 + 1480) = &v60[8 * v61];
      if (v63)
        operator delete(v63);
    }
    else
    {
      *v53 = v51;
      v53[1] = v52;
      v55 = v53 + 2;
    }
    *(_QWORD *)(v37 + 1472) = v55;
    v176 = v47++ == v371;
  }
  while (!v176);
  v67 = sub_2367C4CF4((uint64_t)&__p, *v42, v36);
  *(_DWORD *)(v37 + 1432) = (v67 >> 1) ^ -(v67 & 1);
  v68 = (_QWORD *)(v37 + 1440);
  sub_2367E97D0(v359);
  v69 = *(_QWORD *)(v37 + 1440);
  if (0xF0B7672A07A44C6BLL * ((*(_QWORD *)(v37 + 1456) - v69) >> 3) <= v371)
  {
    v70 = *(_QWORD *)(v37 + 1448);
    *(_QWORD *)&v385[1] = v37 + 1456;
    v384[0] = sub_236806A44(v365);
    v384[1] = (char *)v384[0] + v70 - v69;
    *(void **)&v385[0] = v384[1];
    *((_QWORD *)&v385[0] + 1) = (char *)v384[0] + 536 * v71;
    sub_236806A8C(v359, v384);
    sub_236806B68((uint64_t)v384);
  }
  v72 = 0;
  do
  {
    bzero(v384, 0x218uLL);
    v73 = sub_2367C4CF4((uint64_t)&__p, v42[3], v36);
    if (v73 > v361)
    {
      v74 = 0;
      v75 = 0;
      goto LABEL_85;
    }
    v76 = v73;
    v365 += v73;
    if (v365 <= v361)
    {
      if (v73)
      {
        *(_QWORD *)v368 = v72;
        v77 = sub_2367CD8AC(v73);
        v79 = &v77[2 * v78];
        bzero(v77, 16 * v76);
        v80 = &v77[2 * v76];
        v384[0] = v77;
        v384[1] = v80;
        v356 = v79;
        *(_QWORD *)&v385[0] = v79;
        if (16 * v76)
        {
          v68 = (_QWORD *)(v37 + 1440);
          v72 = *(_QWORD *)v368;
          while (1)
          {
            v81 = sub_2367C4CF4((uint64_t)&__p, v42[4], v36);
            *v77 = -(uint64_t)(v81 & 1) ^ (v81 >> 1);
            v82 = sub_2367C4CF4((uint64_t)&__p, v42[4], v36);
            v83 = -(uint64_t)(v82 & 1) ^ (v82 >> 1);
            v77[1] = v83;
            v84 = (unint64_t)(*v77 - 0x40000000) >= 0xFFFFFFFF80000001 && v83 <= 0x3FFFFFFF;
            if (!v84 || v83 < -1073741823)
              goto LABEL_83;
            v77 += 2;
            if (v77 == v80)
              goto LABEL_105;
          }
        }
        v68 = (_QWORD *)(v37 + 1440);
        v72 = *(_QWORD *)v368;
      }
      else
      {
        v356 = 0;
      }
LABEL_105:
      v86 = 0;
      v87 = (char *)v385 + 8;
LABEL_106:
      v88 = 0;
      while (1)
      {
        v89 = sub_2367C4CF4((uint64_t)&__p, v42[5], v36);
        v90 = (v89 >> 1) ^ -(v89 & 1);
        *(_DWORD *)&v87[v88] = v90;
        if (v90 == 0x80000000)
          break;
        v88 += 4;
        if (v88 == 128)
        {
          ++v86;
          v87 += 128;
          if (v86 != 3)
            goto LABEL_106;
          v91 = 408;
          while (1)
          {
            v92 = sub_2367C4CF4((uint64_t)&__p, v42[5], v36);
            v93 = (v92 >> 1) ^ -(v92 & 1);
            *(_DWORD *)((char *)v384 + v91) = v93;
            if (v93 == 0x80000000)
              goto LABEL_83;
            v91 += 4;
            if (v91 == 536)
            {
              v94 = *(_QWORD *)(v37 + 1448);
              v95 = *(_QWORD *)(v37 + 1456);
              if (v94 >= v95)
              {
                v97 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v94 - *v68) >> 3);
                v98 = v97 + 1;
                if (v97 + 1 > 0x7A44C6AFC2DD9CLL)
                  sub_2367C3440();
                v99 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v95 - *v68) >> 3);
                if (2 * v99 > v98)
                  v98 = 2 * v99;
                if (v99 >= 0x3D226357E16ECELL)
                  v100 = 0x7A44C6AFC2DD9CLL;
                else
                  v100 = v98;
                v396 = v37 + 1456;
                if (v100)
                  v100 = (unint64_t)sub_236806A44(v100);
                else
                  v101 = 0;
                v102 = (_QWORD *)(v100 + 536 * v97);
                v394[0] = (void *)v100;
                v394[1] = v102;
                *((_QWORD *)&v395 + 1) = v100 + 536 * v101;
                *(_OWORD *)v102 = *(_OWORD *)v384;
                v102[2] = v356;
                v384[0] = 0;
                v384[1] = 0;
                *(_QWORD *)&v385[0] = 0;
                memcpy(v102 + 3, (char *)v385 + 8, 0x200uLL);
                *(_QWORD *)&v395 = v102 + 67;
                v68 = (_QWORD *)(v37 + 1440);
                sub_236806A8C(v359, v394);
                v96 = *(_QWORD *)(v37 + 1448);
                sub_236806B68((uint64_t)v394);
              }
              else
              {
                *(_OWORD *)v94 = *(_OWORD *)v384;
                *(_QWORD *)(v94 + 16) = v356;
                v384[1] = 0;
                *(_QWORD *)&v385[0] = 0;
                v384[0] = 0;
                memcpy((void *)(v94 + 24), (char *)v385 + 8, 0x200uLL);
                v96 = v94 + 536;
              }
              *(_QWORD *)(v37 + 1448) = v96;
              v75 = 1;
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_83:
    v75 = 0;
LABEL_84:
    v74 = v384[0];
LABEL_85:
    if (v74)
      operator delete(v74);
    if ((v75 & 1) == 0)
      goto LABEL_264;
    v176 = v72++ == v371;
  }
  while (!v176);
  if (HIDWORD(v398) != 1245184)
    goto LABEL_264;
  v25 = *(_QWORD *)(v37 + 1440) == *(_QWORD *)(v37 + 1448);
LABEL_265:
  v213 = v402;
  v402 = 0;
  if (v213)
  {
    v214 = -(uint64_t)*(v213 - 3);
    do
      v215 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v215 + v214, &qword_2564313D8));
    free(*(v213 - 4));
  }
LABEL_269:
  if (v387[1])
  {
    *(void **)&v388 = v387[1];
    operator delete(v387[1]);
  }
  if (*(_QWORD *)&v386[2])
  {
    *((_QWORD *)&v386[2] + 1) = *(_QWORD *)&v386[2];
    operator delete(*(void **)&v386[2]);
  }
  __p = (char *)v386 + 8;
  sub_2367C4718((void ***)&__p);
  v216 = *(_QWORD *)&v386[0];
  *(_QWORD *)&v386[0] = 0;
  if (v216)
  {
    v217 = -*(_QWORD *)(v216 - 24);
    do
      v218 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v218 + v217, &qword_2564313D8));
    free(*(void **)(v216 - 32));
  }
  if (v393[0])
    operator delete(v393[0]);
  if ((_DWORD)v25)
  {
LABEL_280:
    if ((int)v25 <= 0)
    {
      v219 = 3;
      goto LABEL_282;
    }
    goto LABEL_455;
  }
  v39 = *(_QWORD *)(a1 + 72);
LABEL_314:
  if ((v39 & 1) != 0)
  {
    for (j = 0; j != 32; j += 4)
    {
      v251 = (_QWORD *)v36[2];
      if ((unint64_t)v251 > v36[3])
      {
        sub_2367C5188(v36);
        v253 = *v36;
        v254 = v36[1];
      }
      else
      {
        v252 = v36[1];
        v253 = *v36 | (*v251 << v252);
        v36[2] = (unint64_t)v251 + ((63 - v252) >> 3);
        v254 = v252 | 0x38;
      }
      *v36 = v253 >> 10;
      v36[1] = v254 - 10;
      *(float *)(v37 + 1224 + j) = (float)(v253 & 0x3FF) * 0.00097656;
    }
  }
  v25 = sub_236804EB8(*(_QWORD *)a1 + 208, v36);
  if ((_DWORD)v25)
    goto LABEL_455;
  if (!*(_DWORD *)(a1 + 60))
  {
    v260 = *(_QWORD *)a1;
    v384[0] = &off_2507FFBB8;
    v398 = xmmword_2368AF3F0;
    __p = &off_2507FF550;
    v399 = 0;
    sub_236806244((uint64_t)v384, (uint64_t)&__p);
    v25 = sub_2367F232C((uint64_t)v36, (uint64_t)v384);
    if ((_DWORD)v25)
      goto LABEL_280;
    *(void **)(v260 + 984) = v384[1];
    sub_2368062D0(v260 + 952);
    v261 = (_QWORD *)v36[2];
    if ((unint64_t)v261 > v36[3])
    {
      sub_2367C5188(v36);
      v263 = *v36;
      v264 = v36[1];
    }
    else
    {
      v262 = v36[1];
      v263 = *v36 | (*v261 << v262);
      v36[2] = (unint64_t)v261 + ((63 - v262) >> 3);
      v264 = v262 | 0x38;
    }
    v265 = (void **)(v260 + 1832);
    *v36 = v263 >> 1;
    v36[1] = v264 - 1;
    if ((v263 & 1) != 0)
    {
      sub_2367EF3E8((uint64_t)&__p);
      for (k = 0; k != 72; k += 24)
      {
        v318 = v260 + k;
        v319 = (void **)(v260 + k + 1760);
        v320 = *v319;
        if (*v319)
        {
          *(_QWORD *)(v318 + 1768) = v320;
          operator delete(v320);
          *v319 = 0;
          *(_QWORD *)(v260 + k + 1768) = 0;
          *(_QWORD *)(v260 + k + 1776) = 0;
        }
        v321 = (void **)((char *)&__p + k);
        *(_OWORD *)v319 = *(_OWORD *)((char *)&__p + k);
        *(_QWORD *)(v318 + 1776) = *(_QWORD *)((char *)&v398 + k + 8);
        *v321 = 0;
        v321[1] = 0;
        v321[2] = 0;
      }
      v322 = *v265;
      if (*v265)
      {
        *(_QWORD *)(v260 + 1840) = v322;
        operator delete(v322);
      }
      *(_OWORD *)v265 = *(_OWORD *)&v403[2];
      *(_QWORD *)(v260 + 1848) = v403[4];
      memset(&v403[2], 0, 24);
      v323 = *(void **)(v260 + 1856);
      if (v323)
      {
        *(_QWORD *)(v260 + 1864) = v323;
        operator delete(v323);
        v323 = (void *)v403[2];
      }
      *(_OWORD *)(v260 + 1856) = *(_OWORD *)&v403[5];
      *(_QWORD *)(v260 + 1872) = v404;
      v403[6] = 0;
      v404 = 0;
      v403[5] = 0;
      *(_OWORD *)(v260 + 1880) = v405;
      if (v323)
      {
        v403[3] = v323;
        operator delete(v323);
      }
      for (m = 0; m != -9; m -= 3)
      {
        v325 = (void *)v403[m - 1];
        if (v325)
        {
          v403[m] = v325;
          operator delete(v325);
        }
      }
    }
    else
    {
      v266 = 0;
      v370 = (unint64_t *)(v260 + 1856);
      *(_QWORD *)(v260 + 1888) = 1;
      __p = (void *)0x100000000;
      LODWORD(v398) = 2;
      do
      {
        v267 = *((_DWORD *)&__p + v266);
        v268 = (_QWORD *)v36[2];
        if ((unint64_t)v268 > v36[3])
        {
          sub_2367C5188(v36);
          v270 = *v36;
          v271 = v36[1];
        }
        else
        {
          v269 = v36[1];
          v270 = *v36 | (*v268 << v269);
          v36[2] = (unint64_t)v268 + ((63 - v269) >> 3);
          v271 = v269 | 0x38;
        }
        v272 = v260 + 1760 + 24 * v267;
        *v36 = v270 >> 4;
        v36[1] = v271 - 4;
        sub_2367C5284((char **)v272, v270 & 0xF);
        v273 = *(char **)(v272 + 8);
        v274 = *(char **)v272;
        for (*(_QWORD *)(v260 + 1888) += *(_QWORD *)(v260 + 1888) * ((v273 - v274) >> 2); v274 != v273; v274 += 4)
        {
          v275 = sub_2367F2B30(0x20700000003, 0x20221F0000220FLL, v36);
          *(_DWORD *)v274 = -(v275 & 1) ^ (v275 >> 1);
        }
        ++v266;
      }
      while (v266 != 3);
      v327 = (_QWORD *)v36[2];
      if ((unint64_t)v327 > v36[3])
      {
        sub_2367C5188(v36);
        v329 = *v36;
        v330 = v36[1];
      }
      else
      {
        v328 = v36[1];
        v329 = *v36 | (*v327 << v328);
        v36[2] = (unint64_t)v327 + ((63 - v328) >> 3);
        v330 = v328 | 0x38;
      }
      *v36 = v329 >> 4;
      v36[1] = v330 - 4;
      sub_2367C5284((char **)(v260 + 1832), v329 & 0xF);
      v331 = *(_DWORD **)(v260 + 1832);
      v332 = *(_DWORD **)(v260 + 1840);
      if (v331 == v332)
      {
        v333 = *(_QWORD *)(v260 + 1832);
      }
      else
      {
        do
          *v331++ = sub_2367F2B30(0x8200000001, 0x58700000184, v36) + 1;
        while (v331 != v332);
        v333 = *(_QWORD *)(v260 + 1840);
        v331 = *(_DWORD **)(v260 + 1832);
      }
      v334 = *(_QWORD *)(v260 + 1888) + *(_QWORD *)(v260 + 1888) * ((v333 - (uint64_t)v331) >> 2);
      if (v334 > 0x40)
        goto LABEL_454;
      v336 = 39 * v334;
      v337 = *(_QWORD *)(v260 + 1856);
      v338 = *(_QWORD *)(v260 + 1864) - v337;
      if (v336 <= v338)
      {
        if (v336 < v338)
          *(_QWORD *)(v260 + 1864) = v337 + v336;
      }
      else
      {
        sub_2367C8698(v370, v336 - v338);
      }
      v339 = (_QWORD *)(v260 + 1880);
      v25 = sub_2367D0978((void **)v370, (_QWORD *)(v260 + 1880), v36);
      if ((_DWORD)v25)
        goto LABEL_280;
      v25 = *v339 > 0x10uLL;
      if (*v339 > 0x10uLL)
        goto LABEL_280;
    }
    sub_2367DBD00(v260 + 1104, v36);
    v25 = v326;
    if ((_DWORD)v326)
      goto LABEL_455;
    sub_2367DBF00(255, (unsigned int *)(v260 + 152));
  }
  if ((*(_BYTE *)(a1 + 72) & 0x10) != 0)
  {
    v25 = sub_236806FC4((_QWORD *)(v37 + 1432), *(_QWORD *)(a1 + 640), *(_QWORD *)(a1 + 648), (float *)(*(_QWORD *)(*(_QWORD *)a1 + 4208) + 1104));
    if ((_DWORD)v25)
      goto LABEL_280;
  }
  v236 = *(_QWORD *)(a1 + 456);
  v237 = *(_DWORD *)(a1 + 80) == 1 && *(_DWORD *)(v236 + 104) == 1;
  v238 = v237 ? 1 : 3;
  *(_BYTE *)(a1 + 1032) = *(_DWORD *)(a1 + 60) == 1;
  v239 = *(_QWORD *)(v236 + 336);
  v240 = (unsigned __int128)((v239 - *(_QWORD *)(v236 + 328)) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v241 = (_QWORD *)v36[2];
  v373 = *(_QWORD *)(v236 + 328);
  if ((unint64_t)v241 > v36[3])
  {
    sub_2367C5188(v36);
    v243 = *v36;
    v244 = v36[1];
  }
  else
  {
    v242 = v36[1];
    v243 = *v36 | (*v241 << v242);
    v36[2] = (unint64_t)v241 + ((63 - v242) >> 3);
    v244 = v242 | 0x38;
    *v36 = v243;
    v36[1] = v242 | 0x38;
  }
  v245 = (v240 >> 4) + ((unint64_t)v240 >> 63);
  *v36 = v243 >> 1;
  v36[1] = v244 - 1;
  if ((v243 & 1) != 0)
  {
    v284 = (*(_QWORD *)(a1 + 888) * (v245 + v238) * *(_QWORD *)(a1 + 896)) >> 4;
    if (v284 >= 0x3FFC00)
      v284 = 4193280;
    v25 = sub_2367F8130(v36, (uint64_t *)(a1 + 1040), v284 + 1024);
    if ((_DWORD)v25)
      goto LABEL_280;
    v25 = sub_2367CC178(v36, (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 1048) - *(_QWORD *)(a1 + 1040)) >> 3) + 1) >> 1, a1 + 1064, (unint64_t *)(a1 + 1208), 0);
    if ((_DWORD)v25)
      goto LABEL_280;
  }
  v246 = *(unsigned __int8 *)(a1 + 1032);
  if (*(_BYTE *)(a1 + 1032))
    v247 = v238;
  else
    v247 = 0;
  v248 = *(_DWORD *)(v236 + 28);
  if (v248 >= 0x20 && *(_BYTE *)(a1 + 1032) && *(_DWORD *)(a1 + 80))
  {
    v249 = *(_BYTE *)(v236 + 24) == 0;
    v25 = 1;
    if (v248 != 32)
      v249 = 0;
    if (v248 > 0x20 || v249)
      goto LABEL_455;
  }
  sub_2368001CC((uint64_t)v384, *(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v248, v247 + v245);
  v25 = DWORD2(v385[4]);
  if (DWORD2(v385[4]))
  {
    sub_2367E2C48((uint64_t)v384);
    goto LABEL_280;
  }
  v285 = v384[0];
  v386[0] = *(_OWORD *)v384;
  v384[0] = 0;
  v384[1] = 0;
  *(__int128 *)((char *)&v386[1] + 8) = *(_OWORD *)((char *)v385 + 8);
  *(_QWORD *)&v386[1] = *(_QWORD *)&v385[0];
  *((_QWORD *)&v386[2] + 1) = *((_QWORD *)&v385[1] + 1);
  memset(v385, 0, 32);
  *(_OWORD *)v387 = v385[2];
  v388 = v385[3];
  v389 = v385[4];
  *(_BYTE *)(a1 + 1035) = 1;
  v286 = v285;
  v364 = v247;
  if (*(_DWORD *)(a1 + 80) == 2 && v246)
  {
    v287 = 0;
    if (v247 <= 1)
      v288 = 1;
    else
      v288 = v247;
    v289 = (unsigned int *)(a1 + 96);
    v290 = v288 << 6;
    do
    {
      v291 = *(unsigned __int8 *)(a1 + 108) - byte_236923AD4[*v289];
      v292 = (uint64_t)&v286[v287 / 4];
      *(_DWORD *)(v292 + 56) = v291;
      v293 = *v289++;
      v294 = *(unsigned __int8 *)(a1 + 109) - byte_236923AD8[v293];
      *(_DWORD *)(v292 + 60) = v294;
      v295 = (int)((*(_QWORD *)(a1 + 896) + (1 << v294) - 1) / (unint64_t)(1 << v294));
      *(_QWORD *)(v292 + 40) = (int)((*(_QWORD *)(a1 + 888) + (1 << v291) - 1) / (unint64_t)(1 << v291));
      *(_QWORD *)(v292 + 48) = v295;
      v25 = sub_2367E28F4(v292);
      if ((_DWORD)v25)
        goto LABEL_474;
      v286 = *(_DWORD **)&v386[0];
      if (*(_DWORD *)(*(_QWORD *)&v386[0] + v287 + 56) != *(_DWORD *)(*(_QWORD *)&v386[0] + 56)
        || *(_DWORD *)(*(_QWORD *)&v386[0] + v287 + 60) != *(_DWORD *)(*(_QWORD *)&v386[0] + 60))
      {
        *(_BYTE *)(a1 + 1035) = 0;
      }
      v287 += 64;
    }
    while (v290 != v287);
  }
  if (v239 != v373)
  {
    v296 = 0;
    if (v245 <= 1)
      v297 = 1;
    else
      v297 = v245;
    v298 = v364 << 6;
    do
    {
      v299 = *(unsigned int *)(*(_QWORD *)(a1 + 320) + 4 * v296);
      v300 = (char *)v286 + v298;
      v301 = (int)((v299 - 1 + *(_QWORD *)(a1 + 912)) / v299);
      *((_QWORD *)v300 + 5) = (int)((v299 - 1 + *(_QWORD *)(a1 + 904)) / v299);
      *((_QWORD *)v300 + 6) = v301;
      v25 = sub_2367E28F4((uint64_t)v286 + v298);
      if ((_DWORD)v25)
        goto LABEL_474;
      v302 = __clz(v299) ^ 0x3F;
      v303 = *(_DWORD *)(a1 + 316);
      v304 = (v303 & (v303 - 1)) != 0;
      v305 = __clz(v303) ^ 0xFFFFFFE0;
      if ((v299 & (v299 - 1)) != 0)
        ++v302;
      v306 = v305 + v302 - v304 + 1;
      v286 = *(_DWORD **)&v386[0];
      *(int32x2_t *)(*(_QWORD *)&v386[0] + v298 + 56) = vdup_n_s32(v306);
      if (v286[14] != v306 || v286[15] != v306)
        *(_BYTE *)(a1 + 1035) = 0;
      ++v296;
      v298 += 64;
    }
    while (v297 != v296);
  }
  *((_QWORD *)&v398 + 1) = 1056964608;
  v307 = (void **)operator new(0x20uLL);
  v401 = v307 + 4;
  *(_OWORD *)v307 = xmmword_2369238DC;
  *((_OWORD *)v307 + 1) = unk_2369238EC;
  v399 = v307;
  v400 = (uint64_t *)(v307 + 4);
  LODWORD(v402) = 1119879168;
  v403[0] = 32;
  v403[1] = 0xFFFFFFFFLL;
  v403[2] = 0x33F8147AELL;
  LOBYTE(v403[3]) = 0;
  *(_OWORD *)((char *)&v403[3] + 4) = xmmword_2368AF5B0;
  HIDWORD(v403[5]) = 2;
  v403[6] = 0;
  v404 = 0;
  *(_QWORD *)&v405 = 0;
  *((_QWORD *)&v405 + 1) = -1;
  v406 = 256;
  v407 = 0;
  v408 = 0;
  __p = *(void **)(a1 + 1016);
  *(_QWORD *)&v398 = __p;
  *(_OWORD *)v394 = 0u;
  v395 = 0u;
  v308 = sub_2367E29EC((uint64_t)v394, *(_QWORD *)(a1 + 1000), *(_QWORD *)(a1 + 1008));
  v25 = sub_2367FF970(v36, (uint64_t)v386, a1 + 1232, v308, (unint64_t *)&__p, 0, (uint64_t *)(a1 + 1040), (_BYTE *)(a1 + 1064), (uint64_t *)(a1 + 1208));
  if (!(_DWORD)v25)
  {
    *(_BYTE *)(a1 + 1033) = 0;
    if (*((_QWORD *)&v386[0] + 1) != *(_QWORD *)&v386[0])
    {
      v309 = 0;
      v310 = (uint64_t)(*((_QWORD *)&v386[0] + 1) - *(_QWORD *)&v386[0]) >> 6;
      v311 = *((_QWORD *)&v388 + 1);
      if (v310 <= 1)
        v310 = 1;
      v312 = *(_QWORD *)&v386[0] + 48;
      v313 = 1;
LABEL_414:
      v314 = (unint64_t *)(v312 + (v309 << 6));
      do
      {
        if (v309 >= v311)
        {
          v315 = *(_QWORD *)(a1 + 1016);
          if (*(v314 - 1) <= v315 && *v314 <= v315)
          {
            v313 = 0;
            *(_BYTE *)(a1 + 1033) = 1;
            if (++v309 != v310)
              goto LABEL_414;
            goto LABEL_471;
          }
        }
        ++v309;
        v314 += 8;
      }
      while (v310 != v309);
      if ((v313 & 1) == 0)
        goto LABEL_471;
    }
    if (*(_BYTE *)(a1 + 1035)
      && (v340 = *(void (****)(_QWORD))&v386[2],
          v341 = (void (***)(_QWORD))*((_QWORD *)&v386[1] + 1),
          *(_QWORD *)&v386[2] - *((_QWORD *)&v386[1] + 1) == 72)
      && !*(_DWORD *)(*((_QWORD *)&v386[1] + 1) + 8))
    {
      if ((__int128 *)(a1 + 864) != (__int128 *)((char *)&v386[1] + 8))
      {
        sub_2367E2A68(a1 + 864, *((uint64_t *)&v386[1] + 1), *(uint64_t *)&v386[2], 1uLL);
        v340 = *(void (****)(_QWORD))&v386[2];
        v341 = (void (***)(_QWORD))*((_QWORD *)&v386[1] + 1);
      }
      if (v340 == v341)
      {
        *(_QWORD *)&v386[2] = v341;
        goto LABEL_471;
      }
      v342 = v340 - 9;
      v343 = v340 - 9;
      do
      {
        v344 = *v343;
        v343 -= 9;
        (*v344)(v342);
        v176 = v342 == v341;
        v342 = v343;
      }
      while (!v176);
      v345 = (void *)v403[6];
      *(_QWORD *)&v386[2] = v341;
      sub_23680046C(a1 + 776, (uint64_t)v386);
      if (v345)
      {
        v404 = v345;
        operator delete(v345);
      }
    }
    else
    {
LABEL_471:
      sub_23680046C(a1 + 776, (uint64_t)v386);
    }
  }
  if (v399)
    operator delete(v399);
LABEL_474:
  __p = (char *)&v386[1] + 8;
  sub_2367D6C98((void ***)&__p);
  __p = v386;
  sub_2367D6D24((void ***)&__p);
  sub_2367E2C48((uint64_t)v384);
  if ((_DWORD)v25)
    goto LABEL_280;
  v219 = 0;
  *(_BYTE *)(a1 + 1408) = 1;
LABEL_282:
  v381[v374] = v219;
LABEL_283:
  LOBYTE(v394[0]) = 0;
  if (*(_BYTE *)(a1 + 1408))
  {
    v220 = *(_QWORD *)(a1 + 8);
    v221 = (unint64_t)(v380 - (_BYTE *)v379) >> 3;
    __p = (void *)a1;
    *(_QWORD *)&v398 = &v379;
    *((_QWORD *)&v398 + 1) = &v382;
    v399 = &v383;
    v400 = (uint64_t *)&v381;
    v401 = v394;
    if (v220)
    {
      v222 = sub_2367D7CB0(v220, v221, (uint64_t)&__p);
    }
    else
    {
      v384[0] = 0;
      v384[1] = v384;
      v222 = sub_2367D7CB0((uint64_t)v384, v221, (uint64_t)&__p);
    }
    v25 = v222;
    if (v222)
      goto LABEL_455;
  }
  v223 = atomic_load((unsigned __int8 *)v394);
  if ((v223 & 1) != 0)
  {
LABEL_454:
    v25 = 1;
    goto LABEL_455;
  }
  for (n = *(_BYTE **)(a1 + 1384); n != *(_BYTE **)(a1 + 1392); ++n)
  {
    if (!*n)
      goto LABEL_294;
  }
  if (!*(_BYTE *)(a1 + 1410))
  {
    v25 = sub_2367CD8E0(*(_QWORD *)a1, a1 + 48, *(_QWORD *)(a1 + 768), *(unsigned __int8 *)(a1 + 1457) | (*(unsigned __int8 *)(a1 + 1329) << 8) | (*(unsigned __int8 *)(a1 + 1328) << 16) | 0x1000000u);
    if ((_DWORD)v25)
      goto LABEL_455;
    v25 = sub_2367D7D44((uint64_t *)a1);
    if ((_DWORD)v25)
      goto LABEL_455;
    sub_2367D7D9C(a1);
    if (*(int *)(a1 + 1460) >= 1)
    {
      v255 = v382;
      v256 = v383;
      v257 = v381;
      *(_QWORD *)(a1 + 1416) += v382;
      if (v255)
      {
        v258 = (_QWORD *)(v256 + 8);
        v25 = 0;
        do
        {
          if (*v257++)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 1336) + *v258) = 0;
            --*(_QWORD *)(a1 + 1416);
          }
          v258 += 3;
          --v255;
        }
        while (v255);
        goto LABEL_455;
      }
LABEL_378:
      v25 = 0;
      goto LABEL_455;
    }
  }
LABEL_294:
  if (*(_BYTE *)(a1 + 1410))
    v225 = v4 == v382;
  else
    v225 = 1;
  if (!v225 && !*(_BYTE *)(a1 + 1409))
  {
    v25 = sub_2367D7E68((unsigned int *)a1, *(unint64_t **)(v383 + 24 * v4));
    if ((_DWORD)v25)
      goto LABEL_455;
    v381[v4] = 0;
  }
  if (*(int *)(a1 + 1460) >= 2)
  {
    v226 = sub_2367D8864((_QWORD *)a1);
    if (v377 != v376)
    {
      v227 = ((char *)v377 - (char *)v376) / 24;
      v228 = (unint64_t *)v375[0];
      v229 = *(unsigned __int8 **)(a1 + 1360);
      if (v227 <= 1)
        v227 = 1;
      do
      {
        v230 = *v229++;
        v231 = v226 - v230;
        if (v231 >= *v228)
          v231 = *v228;
        *v228++ = v231;
        --v227;
      }
      while (v227);
    }
  }
  if (!*(_BYTE *)(a1 + 1409))
    goto LABEL_372;
  v233 = v376;
  v232 = v377;
  if (v377 == v376)
  {
    v235 = 0xAAAAAAAAAAAAAAABLL * (v377 - v376);
  }
  else
  {
    v234 = 0;
    do
    {
      if (*((_QWORD *)v375[0] + v234))
      {
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 4488) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 4488), v234);
        v233 = v376;
        v232 = v377;
      }
      ++v234;
      v235 = 0xAAAAAAAAAAAAAAABLL * (v232 - v233);
    }
    while (v234 < v235);
  }
  v276 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)&v386[0] = a1;
  __p = (void *)a1;
  *(_QWORD *)&v398 = &v376;
  *((_QWORD *)&v398 + 1) = v375;
  v399 = &v382;
  v400 = &v383;
  v401 = (void **)&v381;
  v402 = v394;
  if (v276)
  {
    v277 = sub_2367D88FC(v276, v235, (uint64_t *)v386, (uint64_t)&__p);
  }
  else
  {
    v384[0] = 0;
    v384[1] = v384;
    v277 = sub_2367D88FC(v384, v235, (uint64_t *)v386, (uint64_t)&__p);
  }
  v25 = v277;
  if (!v277)
  {
LABEL_372:
    v278 = atomic_load((unsigned __int8 *)v394);
    if ((v278 & 1) != 0)
      goto LABEL_454;
    v279 = v382;
    v280 = v383;
    v281 = v381;
    *(_QWORD *)(a1 + 1416) += v382;
    if (v279)
    {
      v282 = (_QWORD *)(v280 + 8);
      do
      {
        if (*v281++)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 1336) + *v282) = 0;
          --*(_QWORD *)(a1 + 1416);
        }
        v282 += 3;
        --v279;
      }
      while (v279);
    }
    goto LABEL_378;
  }
LABEL_455:
  if (v375[0])
  {
    v375[1] = v375[0];
    operator delete(v375[0]);
  }
  __p = &v376;
  sub_2367C4718((void ***)&__p);
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  return v25;
}

void sub_2367D6628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_2367E2C08(&STACK[0x3F8]);
  sub_2367DC5FC((void **)&STACK[0x320]);
  sub_2367E2C48((uint64_t)&a41);
  if (__p)
    operator delete(__p);
  STACK[0x320] = (unint64_t)&a32;
  sub_2367C4718((void ***)&STACK[0x320]);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void sub_2367D68E4(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2367D420C(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2367D6954(uint64_t a1)
{
  int v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 1424);
  result = 1;
  if (!v2)
  {
    *(_BYTE *)(a1 + 1424) = 1;
    result = sub_2367E448C(a1 + 776, a1 + 48, *(_QWORD *)a1, *(_QWORD **)(a1 + 8), 1);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 440))
        return 0;
      if (*(_DWORD *)(a1 + 64) == 1)
        return 0;
      v4 = *(_DWORD *)(a1 + 444);
      if (*(_DWORD *)(a1 + 424) && !v4)
      {
        return 0;
      }
      else
      {
        v5 = *(_QWORD *)a1 + 456 * v4;
        sub_2367D0618((uint64_t *)(v5 + 2376), (uint64_t *)(*(_QWORD *)a1 + 4496));
        result = 0;
        *(_BYTE *)(v5 + 2824) = *(_BYTE *)(a1 + 448);
      }
    }
  }
  return result;
}

void sub_2367D69EC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x23B7F8F48](v6, 0x1050C402DCFFC91);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2367D6A70(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v16;

  v2 = *(void **)(a1 + 1464);
  if (v2)
  {
    *(_QWORD *)(a1 + 1472) = v2;
    operator delete(v2);
  }
  v3 = *(uint64_t **)(a1 + 1432);
  if (v3)
  {
    v4 = *(uint64_t **)(a1 + 1440);
    v5 = *(void **)(a1 + 1432);
    if (v4 != v3)
    {
      do
      {
        v4 -= 184;
        sub_2367D7984(v4);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 1432);
    }
    *(_QWORD *)(a1 + 1440) = v3;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1384);
  if (v6)
  {
    *(_QWORD *)(a1 + 1392) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 1360);
  if (v7)
  {
    *(_QWORD *)(a1 + 1368) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1336);
  if (v8)
  {
    *(_QWORD *)(a1 + 1344) = v8;
    operator delete(v8);
  }
  *(_QWORD *)(a1 + 1232) = &off_2507FF4D8;
  v16 = (void **)(a1 + 1304);
  sub_2367D6C98(&v16);
  v9 = *(void **)(a1 + 1208);
  if (v9)
  {
    *(_QWORD *)(a1 + 1216) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 1120);
  if (v10)
  {
    *(_QWORD *)(a1 + 1128) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1096);
  if (v11)
  {
    *(_QWORD *)(a1 + 1104) = v11;
    operator delete(v11);
  }
  v16 = (void **)(a1 + 1072);
  sub_2367C4718(&v16);
  sub_2367C2F38((uint64_t *)(a1 + 1064));
  v12 = *(void **)(a1 + 1040);
  if (v12)
  {
    *(_QWORD *)(a1 + 1048) = v12;
    operator delete(v12);
  }
  v16 = (void **)(a1 + 864);
  sub_2367D6C98(&v16);
  v16 = (void **)(a1 + 800);
  sub_2367D6C98(&v16);
  v16 = (void **)(a1 + 776);
  sub_2367D6D24(&v16);
  *(_QWORD *)(a1 + 48) = off_2507FF4B0;
  v16 = (void **)(a1 + 392);
  sub_2367D6C0C(&v16);
  v13 = *(void **)(a1 + 320);
  if (v13)
  {
    *(_QWORD *)(a1 + 328) = v13;
    operator delete(v13);
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v14 = *(void **)(a1 + 16);
  if (v14)
  {
    *(_QWORD *)(a1 + 24) = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_2367D6C0C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 40;
      v7 = v4 - 40;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2367D6C98(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2367D6D24(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 8;
        sub_2367C2F38(v4 - 5);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2367D6D98(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_2507FF4D8;
  v3 = (void **)(a1 + 72);
  sub_2367D6C98(&v3);
  return a1;
}

void sub_2367D6DDC(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_2507FF4D8;
  v1 = (void **)(a1 + 72);
  sub_2367D6C98(&v1);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367D6E30(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int64x2_t *v16;
  uint64_t v17;
  int64x2_t *v18;
  uint64_t v19;
  int64x2_t *v20;
  int64x2_t *v21;
  int64x2_t *v22;
  void (**v23)(int64x2_t *);
  BOOL v24;
  __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD v30[2];
  int64x2_t *v31;
  char *v32;
  _QWORD *v33;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 1);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 88))(a2, a1 + 2);
    if (!(_DWORD)result)
    {
      v5 = a1 + 9;
      v29 = 954437177 * ((a1[10] - a1[9]) >> 3);
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x24700000043, 0, &v29);
      if (!(_DWORD)result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2))
        {
          v6 = v29;
          v7 = a1[9];
          v8 = (int64x2_t *)a1[10];
          v9 = 0x8E38E38E38E38E39 * (((uint64_t)v8->i64 - v7) >> 3);
          v10 = v29 - v9;
          if (v29 <= v9)
          {
            if (v29 < v9)
            {
              v20 = (int64x2_t *)(v7 + 72 * v29);
              if (v8 != v20)
              {
                v21 = (int64x2_t *)((char *)v8 - 72);
                v22 = v21;
                do
                {
                  v23 = (void (**)(int64x2_t *))v22->i64[0];
                  v22 = (int64x2_t *)((char *)v22 - 72);
                  (*v23)(v21);
                  v24 = v21 == v20;
                  v21 = v22;
                }
                while (!v24);
              }
              a1[10] = v20;
            }
          }
          else
          {
            v11 = a1[11];
            if (0x8E38E38E38E38E39 * ((v11 - (uint64_t)v8) >> 3) >= v10)
            {
              v25 = &v8->i8[72 * v10];
              v26 = 72 * v29 - 8 * (((uint64_t)v8->i64 - v7) >> 3);
              do
              {
                sub_236801E64(v8, 3);
                v8 = (int64x2_t *)((char *)v8 + 72);
                v26 -= 72;
              }
              while (v26);
              a1[10] = v25;
            }
            else
            {
              v33 = a1 + 11;
              v12 = 0x8E38E38E38E38E39 * ((v11 - v7) >> 3);
              v13 = 2 * v12;
              if (2 * v12 <= v29)
                v13 = v29;
              if (v12 >= 0x1C71C71C71C71C7)
                v14 = 0x38E38E38E38E38ELL;
              else
                v14 = v13;
              v15 = (char *)sub_2367D70D4(v14);
              v16 = (int64x2_t *)&v15[72 * v9];
              v30[0] = v15;
              v30[1] = v16;
              v31 = v16;
              v32 = &v15[72 * v17];
              v18 = (int64x2_t *)&v15[72 * v6];
              v19 = 72 * v6 - 72 * v9;
              do
              {
                sub_236801E64(v16, 3);
                v16 = (int64x2_t *)((char *)v16 + 72);
                v19 -= 72;
              }
              while (v19);
              v31 = v18;
              sub_2367D711C(v5, v30);
              sub_2367D71C0((uint64_t)v30);
            }
          }
        }
        if (v29)
        {
          v27 = 0;
          v28 = 0;
          while (1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, *v5 + v27);
            if ((_DWORD)result)
              break;
            ++v28;
            v27 += 72;
            if (v28 >= v29)
              return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_2367D70B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 80) = v13;
  _Unwind_Resume(exception_object);
}

void *sub_2367D70D4(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    sub_2367C3488();
  return operator new(72 * a1);
}

uint64_t *sub_2367D711C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 72) = &off_2508004C0;
      v4 -= 72;
      v5 = *(_QWORD *)(v3 - 48);
      *(_OWORD *)(v4 + 8) = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 + 24) = v5;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(v3 - 24);
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v6 = *(_QWORD *)(v3 - 16);
      *(_WORD *)(v4 + 64) = *(_WORD *)(v3 - 8);
      *(_QWORD *)(v4 + 56) = v6;
      v3 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2367D71C0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2367D7210(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_2508004C0;
  v3 = (void **)(a1 + 32);
  sub_2367D78F8(&v3);
  return a1;
}

void sub_2367D7254(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_2508004C0;
  v1 = (void **)(a1 + 32);
  sub_2367D78F8(&v1);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367D72A8(int64x2_t *a1, uint64_t a2)
{
  __int32 *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v4 = &a1->i32[2];
  result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD, uint64_t *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, &a1->i64[1]);
  if (!(_DWORD)result)
  {
    if (*v4 == 3)
      return 1;
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 < 2)
      || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x10500000002, 0x890C00000909, 0, (uint64_t)&a1->i64[1] + 4), !(_DWORD)result))
    {
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 == 0))
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int64x2_t *))(*(_QWORD *)a2 + 32))(a2, 0x180000006, 0x14500000043, 6, a1 + 1);
        if ((_DWORD)result)
          return result;
        if (a1[1].i32[0] > 0x29u)
          return 1;
      }
      if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 == 1))
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000380000001, 0x2C80000004, 3, (uint64_t)a1[1].i64 + 4);
        if ((_DWORD)result)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 32))(a2, 0x200900000007, 0x2A00F0000A00BLL, 256, &a1[1].i64[1]);
        if ((_DWORD)result)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x2780000000, 0xA02F00002029, 0, (uint64_t)&a1[1].i64[1] + 4);
        if ((_DWORD)result)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 4, 0, (uint64_t)&a1[3].i64[1] + 4);
        if ((_DWORD)result)
          return result;
        if (a1[3].i32[3] > 0xDu)
          return 1;
      }
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 == 2))
        return 0;
      v6 = a1[2].i64[0];
      v7 = a1[2].i64[1];
      v8 = a1 + 2;
      v11 = -1431655765 * ((unint64_t)(v7 - v6) >> 3);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x2380000000, 0x52700000125, 0, &v11);
      if (!(_DWORD)result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2))
          sub_2367D7578(v8, v11);
        if (!v11)
          return 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, v8->i64[0] + v9);
          if ((_DWORD)result)
            break;
          ++v10;
          v9 += 24;
          if (v10 >= v11)
            return 0;
        }
      }
    }
  }
  return result;
}

int64x2_t *sub_2367D7578(int64x2_t *result, unint64_t a2)
{
  int64x2_t *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  _QWORD *v23;
  uint64_t (***v24)(_QWORD);
  uint64_t (***v25)(_QWORD);
  uint64_t (**v26)(_QWORD);
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t (**v31)();
  __int128 v32;
  uint64_t (**v33)();
  int64x2_t *v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;

  v3 = result;
  v4 = result->i64[0];
  v5 = (_QWORD *)result->i64[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - result->i64[0]) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v23 = (_QWORD *)(v4 + 24 * a2);
      if (v5 != v23)
      {
        v24 = (uint64_t (***)(_QWORD))(v5 - 3);
        v25 = v24;
        do
        {
          v26 = *v25;
          v25 -= 3;
          result = (int64x2_t *)(*v26)(v24);
          v27 = v24 == v23;
          v24 = v25;
        }
        while (!v27);
      }
      v3->i64[1] = (uint64_t)v23;
    }
  }
  else
  {
    v8 = result[1].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      v28 = &v5[3 * v7];
      v29 = 24 * a2 - 8 * (((uint64_t)v5 - result->i64[0]) >> 3);
      do
      {
        *v5 = &off_2507FFA90;
        v31 = &off_2507FF550;
        v32 = xmmword_2368AF3F0;
        v33 = 0;
        result = (int64x2_t *)sub_2367D7840((uint64_t)v5, (uint64_t)&v31);
        v5 += 3;
        v29 -= 24;
      }
      while (v29);
      v3->i64[1] = (uint64_t)v28;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_2367C3440();
      v34 = result + 1;
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (uint64_t (**)())sub_2367D1EBC(v11);
      v13 = &v12[3 * v6];
      v31 = v12;
      *(_QWORD *)&v32 = v13;
      *((_QWORD *)&v32 + 1) = v13;
      v33 = &v12[3 * v14];
      v15 = 3 * a2;
      v16 = &v12[3 * a2];
      v17 = 8 * v15 - 24 * v6;
      do
      {
        *v13 = (uint64_t (*)())&off_2507FFA90;
        v35 = &off_2507FF550;
        v36 = xmmword_2368AF3F0;
        v37 = 0;
        (*((void (**)(uint64_t (**)(), uint64_t (***)()))*v13 + 2))(v13, &v35);
        v13 += 3;
        v17 -= 24;
      }
      while (v17);
      v18 = v3->i64[0];
      v19 = v3->u64[1];
      v20 = v32;
      if (v19 == v3->i64[0])
      {
        v22 = vdupq_n_s64(v19);
      }
      else
      {
        do
        {
          *(_QWORD *)(v20 - 24) = &off_2507FFA90;
          v20 -= 24;
          v21 = *(_QWORD *)(v19 - 16);
          *(_DWORD *)(v20 + 16) = *(_DWORD *)(v19 - 8);
          *(_QWORD *)(v20 + 8) = v21;
          v19 -= 24;
        }
        while (v19 != v18);
        v22 = *v3;
      }
      v3->i64[0] = v20;
      v3->i64[1] = (uint64_t)v16;
      v32 = (__int128)v22;
      v30 = (uint64_t (**)())v3[1].i64[0];
      v3[1].i64[0] = (uint64_t)v33;
      v33 = v30;
      v31 = (uint64_t (**)())v22.i64[0];
      return (int64x2_t *)sub_2367D77D8((uint64_t)&v31);
    }
  }
  return result;
}

void sub_2367D77B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367D77D8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2367D782C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367D7840(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 8);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 9);
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x10500000002, 0x890C00000909, 0, a1 + 12);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000280000001, 0x8380000003, 2, a1 + 16);
    }
  }
  return result;
}

void sub_2367D78F8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2367D7984(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  sub_2367D79FC(a1 + 180);
  sub_2367D7A3C(a1 + 177);
  sub_2367D7A7C(a1 + 174);
  v2 = a1 + 169;
  sub_2367C2F38(a1 + 172);
  v3 = a1 + 4;
  v4 = a1 + 167;
  do
  {
    v5 = 0;
    v2 -= 15;
    do
    {
      sub_2367C2F38(&v4[v5]);
      v5 -= 5;
    }
    while (v5 != -15);
    v4 -= 15;
  }
  while (v2 != v3);
}

void sub_2367D79FC(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    v2 = (void (*)(uint64_t, _QWORD))a1[1];
    if (v2)
      v2(a1[2], *(_QWORD *)(v1 - 16));
    else
      free(*(void **)(v1 - 16));
  }
}

void sub_2367D7A3C(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    v2 = (void (*)(uint64_t, _QWORD))a1[1];
    if (v2)
      v2(a1[2], *(_QWORD *)(v1 - 16));
    else
      free(*(void **)(v1 - 16));
  }
}

void sub_2367D7A7C(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    v2 = (void (*)(uint64_t, _QWORD))a1[1];
    if (v2)
      v2(a1[2], *(_QWORD *)(v1 - 16));
    else
      free(*(void **)(v1 - 16));
  }
}

_QWORD *sub_2367D7ABC(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367DBF48(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2367D7B20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2367D7B3C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367DBF48(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2367D7B94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2367D7BB0(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    sub_2367C3440();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_2367CA1FC(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    v18 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    *((_QWORD *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

BOOL sub_2367D7CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), uint64_t (*)(uint64_t, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_2367DBCDC, sub_2367DB0DC, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_2367DB0DC((uint64_t)v6, i);
  return 0;
}

uint64_t sub_2367D7D44(uint64_t *a1)
{
  uint64_t result;

  if (*((_DWORD *)a1 + 15)
    || (a1[9] & 0xA0) != 0
    || (result = sub_2367CB36C(*(_QWORD *)(*a1 + 4208) + 952, (unsigned int *)(*a1 + 1632), a1[1]), !(_DWORD)result))
  {
    result = 0;
    *((_BYTE *)a1 + 1410) = 1;
  }
  return result;
}

void sub_2367D7D9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)(a1 + 1425))
  {
    if (*(_QWORD *)(a1 + 800) == *(_QWORD *)(a1 + 808) && !*(_BYTE *)(a1 + 1033))
    {
      if (*(_BYTE *)(a1 + 1035))
      {
        *(_BYTE *)(a1 + 1034) = 0;
        v2 = *(_QWORD *)(a1 + 776);
        for (i = *(_QWORD *)(a1 + 784); v2 != i; v2 += 64)
        {
          v4 = *(_QWORD *)(v2 + 24);
          *(_OWORD *)v2 = 0u;
          *(_OWORD *)(v2 + 16) = 0u;
          if (v4)
          {
            v5 = -*(_QWORD *)(v4 - 24);
            do
              v6 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v6 + v5, &qword_2564313D8));
            free(*(void **)(v4 - 32));
          }
          *(_QWORD *)(v2 + 32) = 0;
        }
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 768) + 40) = *(_QWORD *)(a1 + 344);
    sub_2367DB058(*(_QWORD *)a1, *(unsigned int *)(a1 + 160));
    *(_BYTE *)(a1 + 1425) = 1;
  }
}

uint64_t sub_2367D7E68(unsigned int *a1, unint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int64x2_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  _OWORD v92[2];
  void *v93[2];
  void *__p[2];
  __int128 v95;
  uint64_t (**v96)();
  __int128 v97;
  uint64_t v98;
  unint64_t v99[3];
  uint64_t v100;
  uint64_t (**v101)();
  __int128 v102;
  uint64_t v103;

  v2 = a1;
  if (a1[15])
  {
LABEL_2:
    v3 = 0;
    *((_BYTE *)v2 + 1409) = 1;
    return v3;
  }
  v4 = a2;
  v3 = sub_236803F74(*(_QWORD *)a1 + 208, a2);
  if (!(_DWORD)v3)
  {
    v5 = *(_QWORD *)v2 + 208;
    v6 = atomic_load((unsigned int *)(*(_QWORD *)v2 + 4472));
    v3 = sub_2368052F8(v5, v6);
    if (!(_DWORD)v3)
    {
      v8 = *(int64x2_t **)v2;
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 4208) + 120);
      v10 = __clz(v9) ^ 0x3F;
      if ((v9 & (v9 - 1)) != 0)
        v11 = v10 + 1;
      else
        v11 = v10;
      v12 = (_QWORD *)v4[2];
      if ((unint64_t)v12 > v4[3])
      {
        sub_2367C5188(v4);
        v14 = *v4;
        v15 = v4[1];
        v8 = *(int64x2_t **)v2;
      }
      else
      {
        v13 = v4[1];
        v14 = *v4 | (*v12 << v13);
        v4[2] = (unint64_t)v12 + ((63 - v13) >> 3);
        v15 = v13 | 0x38;
      }
      *v4 = v14 >> v11;
      v4[1] = v15 - v11;
      v8[262].i64[1] = (v14 & ~(-1 << v11)) + 1;
      v16 = v8[264].i64[1];
      v17 = v8[264].i64[0];
      v18 = 0x8E38E38E38E38E39 * ((v16 - v17) >> 4);
      if (v18 > 0xA)
      {
        if (v16 - v17 != 1584)
        {
          v39 = v17 + 1584;
          while (v16 != v39)
          {
            v16 -= 144;
            sub_2367DAEF4(v16);
          }
          v8[264].i64[1] = v39;
        }
      }
      else
      {
        v19 = v8[265].i64[0];
        if (0x8E38E38E38E38E39 * ((v19 - v16) >> 4) >= 11 - v18)
        {
          v40 = v16 + 144 * (11 - v18);
          v41 = 1584 - 16 * ((v16 - v17) >> 4);
          do
          {
            sub_2367DAF4C(v16);
            v16 += 144;
            v41 -= 144;
          }
          while (v41);
          v8[264].i64[1] = v40;
        }
        else
        {
          v20 = 0x8E38E38E38E38E39 * ((v19 - v17) >> 4);
          v21 = 2 * v20;
          if (2 * v20 <= 0xB)
            v21 = 11;
          if (v20 >= 0xE38E38E38E38E3)
            v22 = 0x1C71C71C71C71C7;
          else
            v22 = v21;
          v93[0] = &v8[265];
          if (v22 > 0x1C71C71C71C71C7)
            sub_2367C3488();
          v23 = 9 * v22;
          v24 = (char *)operator new(144 * v22);
          v25 = (uint64_t)&v24[144 * v18];
          *(_QWORD *)&v92[0] = v24;
          *((_QWORD *)&v92[0] + 1) = v25;
          *(_QWORD *)&v92[1] = v25;
          *((_QWORD *)&v92[1] + 1) = &v24[16 * v23];
          v26 = v24 + 1584;
          v27 = v18 - 11;
          do
          {
            sub_2367DAF4C(v25);
            v25 += 144;
          }
          while (!__CFADD__(v27++, 1));
          *(_QWORD *)&v92[1] = v26;
          v29 = v8[264].u64[1];
          v30 = v8[264].i64[0];
          v31 = *((_QWORD *)&v92[0] + 1);
          if (v29 == v30)
          {
            v38 = vdupq_n_s64(v29);
          }
          else
          {
            v32 = 0;
            do
            {
              v33 = v31 + v32;
              v34 = v29 + v32;
              v35 = *(_QWORD *)(v29 + v32 - 144);
              *(_QWORD *)(v34 - 144) = 0;
              *(_QWORD *)(v33 - 128) = 0;
              *(_QWORD *)(v33 - 120) = 0;
              *(_QWORD *)(v33 - 144) = v35;
              *(_QWORD *)(v33 - 136) = 0;
              *(_OWORD *)(v33 - 136) = *(_OWORD *)(v29 + v32 - 136);
              *(_QWORD *)(v33 - 120) = *(_QWORD *)(v29 + v32 - 120);
              *(_QWORD *)(v34 - 136) = 0;
              *(_QWORD *)(v34 - 128) = 0;
              *(_QWORD *)(v34 - 120) = 0;
              *(_QWORD *)(v33 - 112) = 0;
              *(_QWORD *)(v33 - 104) = 0;
              *(_QWORD *)(v33 - 96) = 0;
              *(_OWORD *)(v33 - 112) = *(_OWORD *)(v29 + v32 - 112);
              *(_QWORD *)(v33 - 96) = *(_QWORD *)(v29 + v32 - 96);
              *(_QWORD *)(v34 - 112) = 0;
              *(_QWORD *)(v34 - 104) = 0;
              *(_QWORD *)(v34 - 96) = 0;
              *(_QWORD *)(v33 - 88) = 0;
              *(_QWORD *)(v33 - 80) = 0;
              *(_QWORD *)(v33 - 72) = 0;
              *(_OWORD *)(v33 - 88) = *(_OWORD *)(v29 + v32 - 88);
              *(_QWORD *)(v33 - 72) = *(_QWORD *)(v29 + v32 - 72);
              *(_QWORD *)(v34 - 80) = 0;
              *(_QWORD *)(v34 - 72) = 0;
              *(_QWORD *)(v34 - 88) = 0;
              *(_WORD *)(v33 - 64) = *(_WORD *)(v29 + v32 - 64);
              *(_QWORD *)(v33 - 56) = &off_2507FF438;
              v36 = *(_OWORD *)(v29 + v32 - 48);
              v37 = *(_OWORD *)(v29 + v32 - 32);
              *(_QWORD *)(v33 - 16) = *(_QWORD *)(v29 + v32 - 16);
              *(_OWORD *)(v33 - 48) = v36;
              *(_OWORD *)(v33 - 32) = v37;
              *(_QWORD *)(v33 - 8) = *(_QWORD *)(v29 + v32 - 8);
              v32 -= 144;
            }
            while (v29 + v32 != v30);
            v31 += v32;
            v38 = v8[264];
            v26 = *(char **)&v92[1];
          }
          v8[264].i64[0] = v31;
          v8[264].i64[1] = (uint64_t)v26;
          *(int64x2_t *)((char *)v92 + 8) = v38;
          v42 = v8[265].i64[0];
          v8[265].i64[0] = *((_QWORD *)&v92[1] + 1);
          *((_QWORD *)&v92[1] + 1) = v42;
          *(_QWORD *)&v92[0] = v38.i64[0];
          sub_2367DB00C((uint64_t)v92);
        }
      }
      sub_2367D1D34((uint64_t *)(*(_QWORD *)v2 + 4248), 0xBuLL);
      if (!v2[40])
      {
        LODWORD(v77) = 0;
        v44 = 0;
LABEL_100:
        v78 = __clz(v77) ^ 0x1F;
        if ((v77 & ((_DWORD)v77 - 1)) != 0)
          v79 = v44 + 1;
        else
          v79 = v44;
        v80 = v79 + v78;
        v81 = (v77 > 1) << 16;
        if (v77 >= 2)
          v82 = *((_QWORD *)v2 + 92);
        else
          LODWORD(v82) = 0;
        if (v80 > 0xF)
          sub_2367DA928((uint64_t)v92, v81, v82);
        else
          sub_2367DA514((uint64_t)v92, v81, v82);
        v3 = DWORD2(v92[0]);
        if (!DWORD2(v92[0]))
        {
          v83 = *(_QWORD *)(*(_QWORD *)v2 + 4480);
          *(_QWORD *)(*(_QWORD *)v2 + 4480) = *(_QWORD *)&v92[0];
          if (v83)
            (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
          if (v77 >= 2)
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v2 + 4480) + 48))(*(_QWORD *)(*(_QWORD *)v2 + 4480));
          goto LABEL_2;
        }
        return v3;
      }
      v43 = 0;
      v44 = 0;
      v84 = v2;
      v91 = v4;
      while (1)
      {
        v45 = sub_2367F2B30(0x800000138000005FLL, 0xC80000000, v4);
        v46 = atomic_load((unsigned int *)(*(_QWORD *)v2 + 4472));
        v47 = *(_QWORD *)(*(_QWORD *)v2 + 1560);
        v48 = *(_QWORD *)(*(_QWORD *)v2 + 1568);
        memset(v99, 0, sizeof(v99));
        *(_OWORD *)__p = 0u;
        v95 = 0u;
        *(_OWORD *)v93 = 0u;
        memset(v92, 0, sizeof(v92));
        v96 = &off_2507FF438;
        v97 = xmmword_2368AF590;
        v101 = &off_2507FF550;
        v102 = xmmword_2368AF3F0;
        v103 = 0;
        sub_2367CB9F8((uint64_t)&v96, (uint64_t)&v101);
        v98 = 0;
        v100 = 0;
        v101 = 0;
        v102 = 0uLL;
        v88 = v45;
        if (v45)
        {
          v3 = sub_2367CC178(v4, 8uLL, (uint64_t)v92, v99, 0);
          if ((_DWORD)v3)
            goto LABEL_75;
          v49 = operator new();
          sub_2367C4794(v49, (uint64_t)v92, v4, 0);
          v87 = v43;
          v85 = v44;
          v100 = v49;
        }
        else
        {
          v87 = v43;
          v85 = v44;
          v49 = 0;
        }
        v50 = 0;
        v51 = 0;
        v89 = v48 + 4 * v47 * v87;
        do
        {
          if (((v46 >> v50) & 1) != 0)
            v51 |= 1 << byte_236923064[v50];
          ++v50;
        }
        while (v50 != 27);
        v90 = v49;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = v51 | v88;
        do
        {
          v56 = byte_236923064[v53];
          v57 = 1 << v56;
          if (((1 << v56) & v54) == 0)
          {
            v54 |= (unsigned __int16)(1 << v56);
            if ((v57 & v55) != 0)
            {
              v58 = byte_236926677[v53] * (unint64_t)byte_23692665C[v53];
              if (v58 << 6 > (uint64_t)(v102 - (_QWORD)v52) >> 2)
              {
                sub_2367C5284((char **)&v101, v58 << 6);
                v52 = (char *)v101;
              }
              v59 = v57 & v51;
              sub_2367C2CB4(v53, (uint64_t)v52);
              if ((v57 & v88) != 0)
              {
                v86 = v54;
                v60 = 0;
                v61 = 3 * v56;
                v62 = byte_236926677[v53]
                    * (unint64_t)byte_23692665C[v53];
                v52 = (char *)v101;
                if (v62 << 6 <= 1)
                  v63 = 1;
                else
                  v63 = v62 << 6;
                while (1)
                {
                  v64 = v59 ? (_DWORD *)(v89 + (qword_236922110[v60 + v61] << 8)) : 0;
                  if (sub_2367C4A38(v62, v62 << 6, (uint64_t)v64, v91, v90, v99))
                    goto LABEL_73;
                  if (v64 && v62)
                  {
                    v65 = v63;
                    do
                    {
                      *v64 = *(_DWORD *)&v52[4 * *v64];
                      ++v64;
                      --v65;
                    }
                    while (v65);
                  }
                  if (++v60 == 3)
                  {
                    v54 = v86;
                    goto LABEL_68;
                  }
                }
              }
              if (v59)
              {
                v66 = 0;
                v52 = (char *)v101;
                do
                  memcpy((void *)(v89 + (qword_236922110[3 * v56 + v66++] << 8)), v52, v58 << 8);
                while (v66 != 3);
              }
LABEL_68:
              v55 = v51 | v88;
            }
          }
          ++v53;
        }
        while (v53 != 27);
        if (!v88 || *(_DWORD *)(v100 + 20) == 1245184)
        {
          v3 = 0;
          goto LABEL_74;
        }
LABEL_73:
        v3 = 1;
LABEL_74:
        v2 = v84;
        v4 = v91;
        v44 = v85;
        v43 = v87;
LABEL_75:
        if (v101)
          operator delete(v101);
        v67 = v100;
        if (v100)
        {
          sub_2367C2F38((uint64_t *)(v100 + 48));
          MEMORY[0x23B7F8F48](v67, 0x1070C40D148930ELL);
        }
        if (__p[1])
        {
          *(void **)&v95 = __p[1];
          operator delete(__p[1]);
        }
        if (v93[0])
        {
          v93[1] = v93[0];
          operator delete(v93[0]);
        }
        v101 = (uint64_t (**)())v92 + 1;
        sub_2367C4718((void ***)&v101);
        v68 = *(_QWORD *)&v92[0];
        *(_QWORD *)&v92[0] = 0;
        if (v68)
        {
          v69 = -*(_QWORD *)(v68 - 24);
          do
            v70 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v70 + v69, &qword_2564313D8));
          free(*(void **)(v68 - 32));
        }
        if (v99[0])
          operator delete((void *)v99[0]);
        if ((_DWORD)v3)
          return v3;
        v71 = (495 * *(_DWORD *)(*(_QWORD *)v2 + 1880))
            * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 4208) + 4200);
        v72 = sub_2367CC178(v4, v71, *(_QWORD *)(*(_QWORD *)v2 + 4224) + 144 * v43, (unint64_t *)(*(_QWORD *)(*(_QWORD *)v2 + 4248) + 24 * v43), 0);
        if ((_DWORD)v72)
          return v72;
        v73 = *(int64x2_t **)v2;
        v74 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)v2 + 4248) + 24 * v43);
        v75 = v74[1] - *v74;
        if (v71 + 16 <= v75)
        {
          if (v71 + 16 < v75)
            v74[1] = *v74 + v71 + 16;
        }
        else
        {
          sub_2367C8698(v74, v71 + 16 - v75);
          v73 = *(int64x2_t **)v2;
        }
        v76 = *(_QWORD *)(v73[264].i64[0] + 144 * v43 + 136);
        if (v44 <= v76)
          v44 = v76;
        ++v43;
        v77 = v2[40];
        if (v43 >= v77)
          goto LABEL_100;
      }
    }
  }
  return v3;
}

void sub_2367D8764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v34;

  MEMORY[0x23B7F8F48](v31, 0x1070C40D148930ELL);
  sub_2367C5238((uint64_t *)(v32 - 128), 0);
  sub_2367C4C94((uint64_t)&a23);
  v34 = *(void **)(v32 - 152);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_2367D8864(_QWORD *a1)
{
  int *v1;
  int *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int *v15;
  unint64_t v16;

  v1 = (int *)a1[183];
  v2 = (int *)a1[184];
  v3 = (unsigned __int8 *)a1[170];
  v4 = (unsigned __int8 *)a1[171];
  v5 = v3 + 1;
  if (v3 != v4 && v5 != v4)
  {
    v7 = *v3;
    v8 = v3 + 1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      if (v10 < v7)
      {
        v7 = v9;
        v3 = v5;
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
  if (v2 != v1)
  {
    v11 = *v3;
    v12 = v2 - v1;
    do
    {
      v13 = v12 >> 1;
      v14 = &v1[v12 >> 1];
      v16 = *v14;
      v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v11 < v16)
        v12 = v13;
      else
        v1 = v15;
    }
    while (v12);
  }
  if (v1 == v2)
    return -1;
  else
    return *v1;
}

BOOL sub_2367D88FC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  _QWORD v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_2367D89A8(*a3, 1uLL, *(_QWORD *)(*a3 + 1368) - *(_QWORD *)(*a3 + 1360)))
      return v5;
    for (i = 0; i != v4; ++i)
      sub_2367D8C90((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, _QWORD *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2367D8DD4, sub_2367D8C90, 0, a2) != 0;
}

uint64_t sub_2367D89A8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  char *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t i;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  _QWORD *v31;
  uint64_t result;
  char *v33;
  char *v34;

  if (a3 >= a2)
    v6 = a2;
  else
    v6 = a3;
  v7 = *(uint64_t **)(a1 + 1440);
  v8 = *(uint64_t **)(a1 + 1432);
  v9 = 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v8) >> 6);
  v10 = v6 - v9;
  if (v6 <= v9)
    goto LABEL_26;
  v11 = *(_QWORD *)(a1 + 1448);
  if (0xD37A6F4DE9BD37A7 * ((v11 - (uint64_t)v7) >> 6) >= v10)
  {
    bzero(*(void **)(a1 + 1440), 1472 * ((((1472 * v10 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64) + 1472);
    *(_QWORD *)(a1 + 1440) = &v7[184 * ((((1472 * v10 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64)
                               + 184];
    goto LABEL_26;
  }
  if (v6 > 0x2C8590B21642C8)
    sub_2367C3440();
  v12 = 0xD37A6F4DE9BD37A7 * ((v11 - (uint64_t)v8) >> 6);
  v13 = 2 * v12;
  if (2 * v12 <= v6)
    v13 = v6;
  if (v12 >= 0x1642C8590B2164)
    v14 = 0x2C8590B21642C8;
  else
    v14 = v13;
  if (v14 > 0x2C8590B21642C8)
    sub_2367C3488();
  v15 = 1472 * v14;
  v16 = (char *)operator new(1472 * v14);
  v17 = &v16[64 * (((char *)v7 - (char *)v8) >> 6)];
  v34 = &v16[v15];
  v18 = 1472 * ((((1472 * v10 - 1472) >> 6) * (unsigned __int128)0xB21642C8590B217uLL) >> 64) + 1472;
  bzero(v17, v18);
  if (v7 == v8)
  {
    *(_QWORD *)(a1 + 1432) = v17;
    *(_QWORD *)(a1 + 1440) = &v17[v18];
    *(_QWORD *)(a1 + 1448) = v34;
    if (!v7)
      goto LABEL_26;
    goto LABEL_25;
  }
  v33 = &v17[v18];
  do
  {
    v19 = v17 - 1472;
    v20 = v7 - 184;
    v21 = *((_OWORD *)v7 - 91);
    *(_OWORD *)v19 = *((_OWORD *)v7 - 92);
    *((_OWORD *)v19 + 1) = v21;
    for (i = 0x1FFFFFFFFFFFFF4CLL; i != -15; i += 15)
      sub_2367CA9E4((uint64_t)&v17[i * 8], (uint64_t)&v7[i]);
    v23 = *(_OWORD *)(v7 - 15);
    *((_QWORD *)v17 - 13) = *(v7 - 13);
    *(_OWORD *)(v17 - 120) = v23;
    v24 = *(v7 - 12);
    v25 = *(v7 - 11);
    *(v7 - 12) = 0;
    *((_QWORD *)v17 - 12) = v24;
    *((_QWORD *)v17 - 11) = v25;
    v26 = *(v7 - 10);
    *(v7 - 10) = 0;
    *((_QWORD *)v17 - 10) = v26;
    *(_OWORD *)(v17 - 72) = *(_OWORD *)(v7 - 9);
    v27 = *(v7 - 7);
    *(v7 - 7) = 0;
    *((_QWORD *)v17 - 7) = v27;
    *((_OWORD *)v17 - 3) = *((_OWORD *)v7 - 3);
    v28 = *(v7 - 4);
    *(v7 - 4) = 0;
    *((_QWORD *)v17 - 4) = v28;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)(v7 - 3);
    *((_QWORD *)v17 - 1) = *(v7 - 1);
    v17 -= 1472;
    v7 -= 184;
  }
  while (v20 != v8);
  v29 = *(uint64_t **)(a1 + 1432);
  v7 = *(uint64_t **)(a1 + 1440);
  *(_QWORD *)(a1 + 1432) = v19;
  *(_QWORD *)(a1 + 1440) = v33;
  *(_QWORD *)(a1 + 1448) = v34;
  if (v7 != v29)
  {
    do
    {
      v7 -= 184;
      sub_2367D7984(v7);
    }
    while (v7 != v29);
    v7 = v29;
  }
  if (v7)
LABEL_25:
    operator delete(v7);
LABEL_26:
  *(_BYTE *)(a1 + 1456) = a3 < a2;
  v30 = *(_BYTE *)(a1 + 1034);
  if (v30)
    v30 = (*(_DWORD *)(a1 + 60) == 0) | *(_BYTE *)(a1 + 72);
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 4488);
  if (!v31)
    return 0;
  result = sub_23688A310(v31, v6, v30 & 1);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t sub_2367D8C90(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _OWORD v16[5];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(**(_QWORD **)(v3 + 16) + 8 * a2);
  if (v4)
  {
    v5 = 0;
    v6 = a2;
    v7 = *(_QWORD *)v3;
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 1360) + a2);
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    v9 = **(_QWORD **)(v3 + 32);
    v10 = *(_QWORD *)(**(_QWORD **)(v3 + 8) + 24 * a2) + 8 * v8;
    do
    {
      *((_QWORD *)v16 + v5) = *(_QWORD *)(v9 + 24 * *(_QWORD *)(v10 + 8 * v5));
      ++v5;
    }
    while (v4 != v5);
    if (*(_BYTE *)(v7 + 1456))
      a3 = a2;
    result = sub_2367D8E04(v7, a2, (unint64_t **)v16, v4, a3, 0, 0);
    if ((_DWORD)result)
    {
      atomic_store(1u, *(unsigned __int8 **)(v3 + 48));
    }
    else
    {
      v12 = *(_QWORD *)(**(_QWORD **)(v3 + 16) + 8 * v6);
      if (v12)
      {
        v13 = **(_QWORD **)(v3 + 40);
        v14 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)(v3 + 8) + 24 * v6) + 8 * v8);
        do
        {
          v15 = *v14++;
          *(_DWORD *)(v13 + 4 * v15) = 0;
          --v12;
        }
        while (v12);
      }
    }
  }
  return result;
}

uint64_t sub_2367D8DD4(uint64_t **a1, unint64_t a2)
{
  if (sub_2367D89A8(**a1, a2, *(_QWORD *)(**a1 + 1368) - *(_QWORD *)(**a1 + 1360)))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_2367D8E04(uint64_t a1, unint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t i;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t *v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int64x2_t v108;
  uint64_t v109;
  void ***v110;
  int64x2_t v111;
  uint64x2_t v112;
  int64x2_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  __int8 *v123;
  unint64_t v124;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int64x2_t *v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  int v186;
  char v187;
  int v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  int v194;
  int v195;
  int v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int64x2_t v203;
  unint64_t v204;
  size_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char v213;
  uint64x2_t __p;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  int64x2_t v220;
  uint64_t v221;
  int64x2_t v222;
  _BYTE v223[28];
  uint64_t v224;
  _QWORD v225[67];
  void **v226[4];
  __int128 v227;
  uint64_t v228[9];
  uint64_t v229;
  int v230;
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v211 = *(_QWORD *)(a1 + 752);
  v12 = *(_QWORD *)(a1 + 704);
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 4488);
  v218 = a2;
  v219 = a5;
  v217 = v13;
  (*(void (**)(int64x2_t *__return_ptr))(*(_QWORD *)v13 + 24))(&v222);
  v220 = v222;
  v221 = *(_QWORD *)v223;
  v200 = a1 + 48;
  v212 = a1;
  if (!*(_DWORD *)(a1 + 60))
  {
    v22 = *(_QWORD *)(a1 + 1432) + 1472 * a5;
    v23 = *(unsigned int *)(a1 + 160);
    v24 = atomic_load((unsigned int *)(*(_QWORD *)a1 + 4472));
    v25 = sub_2367D9E18(v22, v23, v24, v14, v15, v16, v17, v18);
    if ((_DWORD)v25)
      goto LABEL_93;
    v189 = *(_QWORD **)a1;
    v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1360) + a2);
    v27 = *(_QWORD *)(a1 + 1432);
    if (v26 + a4 == *(_DWORD *)(a1 + 160))
      v28 = 1;
    else
      v28 = a6;
    v208 = *(unsigned __int8 *)(*(_QWORD *)(v212 + 1360) + a2);
    if (v26 | a4 || !v28)
    {
      if ((a7 & 1) != 0)
      {
        v127 = 0;
      }
      else
      {
        v128 = *(_QWORD *)(v189[526] + 4200);
        v129 = __clz(v128) ^ 0x3F;
        if ((v128 & (v128 - 1)) != 0)
          v127 = v129 + 1;
        else
          v127 = v129;
      }
      v130 = operator new();
      v196 = v28;
      bzero((void *)(v130 + 16), 0x1C88uLL);
      v131 = 0;
      *(_QWORD *)v130 = off_2507FF980;
      *(_QWORD *)(v130 + 8) = 0;
      do
      {
        *(_OWORD *)(v130 + v131 + 140) = 0uLL;
        v132 = v130 + v131 + 140;
        *(_DWORD *)(v132 - 80) = 1245184;
        *(_QWORD *)(v132 - 68) = 0;
        *(_DWORD *)(v132 - 60) = 0;
        *(_OWORD *)(v132 - 52) = 0uLL;
        *(_OWORD *)(v132 - 36) = 0uLL;
        *(_DWORD *)(v132 - 20) = 0;
        *(_OWORD *)(v132 - 16) = xmmword_2368AF4B0;
        *(_OWORD *)(v132 + 16) = 0uLL;
        *(_OWORD *)(v132 + 32) = 0uLL;
        *(_OWORD *)(v132 + 48) = 0uLL;
        *(_OWORD *)(v132 + 64) = 0uLL;
        *(_OWORD *)(v132 + 80) = 0uLL;
        *(_OWORD *)(v132 + 96) = 0uLL;
        *(_OWORD *)(v132 + 112) = 0uLL;
        *(_OWORD *)(v132 + 128) = 0uLL;
        *(_OWORD *)(v132 + 144) = 0uLL;
        *(_OWORD *)(v132 + 160) = 0uLL;
        *(_OWORD *)(v132 + 176) = 0uLL;
        *(_OWORD *)(v132 + 192) = 0uLL;
        *(_OWORD *)(v132 + 208) = 0uLL;
        *(_OWORD *)(v132 + 224) = 0uLL;
        *(_OWORD *)(v132 + 240) = 0uLL;
        *(_OWORD *)(v132 + 256) = 0uLL;
        *(_OWORD *)(v132 + 272) = 0uLL;
        *(_OWORD *)(v132 + 288) = 0uLL;
        *(_OWORD *)(v132 + 304) = 0uLL;
        *(_OWORD *)(v132 + 320) = 0uLL;
        *(_OWORD *)(v132 + 336) = 0uLL;
        *(_OWORD *)(v132 + 352) = 0uLL;
        *(_OWORD *)(v132 + 368) = 0uLL;
        *(_OWORD *)(v132 + 384) = 0uLL;
        *(_OWORD *)(v132 + 400) = 0uLL;
        *(_OWORD *)(v132 + 416) = 0uLL;
        *(_OWORD *)(v132 + 432) = 0uLL;
        *(_OWORD *)(v132 + 448) = 0uLL;
        *(_OWORD *)(v132 + 464) = 0uLL;
        v131 += 592;
        *(_QWORD *)(v132 + 480) = 0;
      }
      while (v131 != 6512);
      v199 = v27;
      v188 = a6;
      *(_OWORD *)(v130 + 7240) = 0u;
      *(_OWORD *)(v130 + 7256) = 0u;
      v133 = (_QWORD *)v189[526];
      v135 = v133[10];
      v134 = v133[11];
      v136 = a2 / v134;
      v137 = v133[17] >> 3;
      v138 = v137 * (a2 % v134);
      v139 = v137 * v136;
      v140 = v133[9];
      v141 = *(unsigned __int8 *)(v212 + 108);
      v142 = *(unsigned __int8 *)(v212 + 109);
      v143 = (int *)(v212 + 96);
      v144 = -24;
      do
      {
        v145 = *v143++;
        v146 = v130 + v144;
        *(_QWORD *)(v146 + 7296) = v141 - byte_236923AD4[v145];
        *(_QWORD *)(v146 + 7320) = v142 - byte_236923AD8[v145];
        v144 += 8;
      }
      while (v144);
      v147 = v140 - v138;
      if (v140 < v138)
        v147 = 0;
      v148 = v135 - v139;
      if (v135 < v139)
        v148 = 0;
      if (v138 + v137 <= v140)
        v149 = v137;
      else
        v149 = v147;
      v150 = v133[195];
      *(_QWORD *)(v130 + 24) = v150;
      *(_QWORD *)(v130 + 16) = v133[196] + 4 * v150 * v208;
      *(_QWORD *)(v130 + 32) = v189[531] + 24 * v208;
      if (v139 + v137 > v135)
        v137 = v148;
      *(_QWORD *)(v130 + 6552) = a3;
      *(_QWORD *)(v130 + 6560) = a4;
      *(_QWORD *)(v130 + 8) = v212 + 4 * v208 + 256;
      v193 = (_QWORD *)(v27 + 1472 * a5);
      *(_QWORD *)(v130 + 7192) = v193;
      *(_QWORD *)(v130 + 7240) = v138;
      *(_QWORD *)(v130 + 7248) = v139;
      *(_QWORD *)(v130 + 7256) = v149;
      *(_QWORD *)(v130 + 7264) = v137;
      *(_QWORD *)(v130 + 7200) = v133 + 220;
      *(_QWORD *)(v130 + 7208) = v133 + 128;
      *(_QWORD *)(v130 + 7216) = v133 + 199;
      if (a4)
      {
        v151 = 0;
        while (1)
        {
          if (v127)
          {
            v152 = a3[v151];
            v153 = (_QWORD *)v152[2];
            if ((unint64_t)v153 > v152[3])
            {
              sub_2367C5188(a3[v151]);
              v155 = *v152;
              v156 = v152[1];
            }
            else
            {
              v154 = v152[1];
              v155 = *v152 | (*v153 << v154);
              v152[2] = (unint64_t)v153 + ((63 - v154) >> 3);
              v156 = v154 | 0x38;
            }
            v157 = v155 & ~(-1 << v127);
            *v152 = v155 >> v127;
            v152[1] = v156 - v127;
          }
          else
          {
            v157 = 0;
          }
          if (v157 >= v133[525])
            break;
          *(_QWORD *)(v130 + 8 * v151 + 6568) = (495 * *(_DWORD *)(*(_QWORD *)(v130 + 7200) + 120))
                                              * v157;
          sub_2367C4794((uint64_t)&v222, v189[528] + 144 * (v151 + v208), a3[v151], 0);
          v158 = v130 + 592 * v151;
          v159 = *(_OWORD *)v223;
          *(int64x2_t *)(v158 + 40) = v222;
          *(_OWORD *)(v158 + 56) = v159;
          *(_OWORD *)(v158 + 68) = *(_OWORD *)&v223[12];
          v160 = v224;
          v224 = 0;
          v161 = *(_QWORD *)(v158 + 88);
          *(_QWORD *)(v158 + 88) = v160;
          if (v161)
          {
            v162 = -*(_QWORD *)(v161 - 24);
            do
              v163 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v163 + v162, &qword_2564313D8));
            free(*(void **)(v161 - 32));
            v164 = v224;
            memcpy((void *)(v130 + 592 * v151 + 96), v225, 0x214uLL);
            v224 = 0;
            if (v164)
            {
              v165 = -*(_QWORD *)(v164 - 24);
              do
                v166 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v166 + v165, &qword_2564313D8));
              free(*(void **)(v164 - 32));
            }
          }
          else
          {
            memcpy((void *)(v130 + 592 * v151 + 96), v225, 0x214uLL);
          }
          if (++v151 == a4)
            goto LABEL_139;
        }
        v25 = 1;
        a6 = v188;
      }
      else
      {
LABEL_139:
        *(_QWORD *)(v130 + 6656) = *(_QWORD *)(v199 + 1472 * a5 + 48) >> 2;
        v25 = sub_2367DC82C(v200, v130, v193, (uint64_t)v189, a2, (uint64_t)&v217, v28 ^ 1u);
        a6 = v188;
        if (!(_DWORD)v25 && a4)
        {
          v167 = (_DWORD *)(v130 + 60);
          v168 = a4;
          while (*v167 == 1245184)
          {
            v167 += 148;
            if (!--v168)
            {
              v25 = 0;
              goto LABEL_153;
            }
          }
          v25 = 1;
        }
      }
LABEL_153:
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130);
      if ((_DWORD)v25)
        goto LABEL_93;
      goto LABEL_3;
    }
    v184 = a4;
    v179 = (int64x2_t *)(v27 + 1472 * a5 + 1352);
    if (!v179->i32[0])
    {
      sub_2367C431C((uint64_t)&v222, 0x40u, 0x24u);
      v25 = *(unsigned int *)&v223[24];
      if (*(_DWORD *)&v223[24])
        goto LABEL_93;
      v169 = *(_QWORD *)&v223[8];
      v170 = *(_QWORD *)&v223[16];
      *(_QWORD *)&v223[8] = 0;
      *v179 = v222;
      *(_QWORD *)(v27 + 1472 * a5 + 1368) = *(_QWORD *)v223;
      v171 = v27 + 1472 * a5;
      v172 = *(_QWORD *)(v171 + 1376);
      *(_QWORD *)(v171 + 1376) = v169;
      if (v172)
      {
        v173 = -*(_QWORD *)(v172 - 24);
        do
          v174 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v174 + v173, &qword_2564313D8));
        free(*(void **)(v172 - 32));
        v175 = *(_DWORD *)&v223[24];
        *(_QWORD *)(v27 + 1472 * a5 + 1384) = v170;
        if (v175)
          goto LABEL_12;
      }
      else
      {
        *(_QWORD *)(v27 + 1472 * a5 + 1384) = v170;
      }
      v176 = *(_QWORD *)&v223[8];
      *(_QWORD *)&v223[8] = 0;
      if (v176)
      {
        v177 = -*(_QWORD *)(v176 - 24);
        do
          v178 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v178 + v177, &qword_2564313D8));
        free(*(void **)(v176 - 32));
      }
    }
LABEL_12:
    v180 = v12;
    v186 = a6;
    v29 = 0;
    v229 = 0x100000000;
    v230 = 2;
    v190 = a5;
    v30 = v27 + 1472 * a5;
    v31 = (uint64_t *)(v30 + 1376);
    v32 = (uint64_t *)(v30 + 1368);
    v33 = (_QWORD *)v189[526];
    v197 = v33;
    while (1)
    {
      v182 = v29;
      v34 = *((int *)&v229 + v29);
      v35 = *(unsigned int *)(v212 + 4 * v34 + 96);
      v36 = *(_BYTE *)(v212 + 108) - byte_236923AD4[v35];
      v37 = *(_BYTE *)(v212 + 109) - byte_236923AD8[v35];
      v39 = v33[10];
      v38 = v33[11];
      v40 = a2 / v38;
      v41 = v33[17];
      v42 = v41 >> 3;
      v43 = (v41 >> 3) * (a2 % v38);
      v44 = (v41 >> 3) * v40;
      v45 = v33[9];
      v46 = v45 - v43;
      if (v45 < v43)
        v46 = 0;
      if (v43 + (v41 >> 3) <= v45)
        v47 = v41 >> 3;
      else
        v47 = v46;
      v48 = v44 + (v41 >> 3);
      v49 = v39 - v44;
      if (v39 < v44)
        v49 = 0;
      if (v48 <= v39)
        v50 = v42;
      else
        v50 = v49;
      v51 = v43 >> v36;
      v52 = v44 >> v37;
      v181 = v36;
      v53 = v47 >> v36;
      v54 = v50 >> v37;
      v55 = (unsigned int *)(v33[219] + 40 * (int)v34);
      if (v43 >> v36 >= 2)
        v56 = 2;
      else
        v56 = v43 >> v36;
      v57 = *v55;
      if (v57 - (v53 + v51) >= 2)
        v58 = 2;
      else
        v58 = v57 - (v53 + v51);
      if (v52 >= 2)
        v59 = 2;
      else
        v59 = v44 >> v37;
      v192 = v54 + v52;
      v194 = v34;
      v60 = v55[1] - (v54 + v52);
      if (v60 >= 2)
        v60 = 2;
      v191 = v47 >> v36;
      v61 = v53 + v56 + v58;
      v183 = v54;
      v62 = v54 + v59 + v60;
      if (v61)
        v63 = v62 == 0;
      else
        v63 = 1;
      if (!v63)
      {
        v209 = v51 - v56;
        v205 = 4 * v61;
        v198 = 64 - 4 * v56;
        v64 = v179[1].i64[0];
        v65 = v179[1].i64[1] + v64 * (2 - v59);
        v66 = v52 - v59;
        do
        {
          memcpy((void *)(v65 + v198), (const void *)(*((_QWORD *)v55 + 3) + *((_QWORD *)v55 + 2) * v66 + 4 * v209), v205);
          v65 += v64;
          ++v66;
          --v62;
        }
        while (v62);
      }
      if (v183 != -4)
      {
        v67 = 0;
        v68 = (unsigned int *)v197[219];
        v69 = ((unint64_t)v68[10 * v194] >> v181) - v51 + 16;
        v70 = (unint64_t)*v68 >> v181;
        do
        {
          v71 = 0;
          v72 = 1;
          do
          {
            v73 = v72;
            if (!v51)
              *(_DWORD *)(*v31 + *v32 * v67 + 4 * (v71 ^ 0xF)) = *(_DWORD *)(*v31 + *v32 * v67 + ((4 * v71) | 0x40));
            if (v51 + v191 + 2 >= v70)
              *(_DWORD *)(*v31 + *v32 * v67 + 4 * (v71 + v69)) = *(_DWORD *)(*v31 + *v32 * v67 + 4 * (v69 + ~v71));
            v72 = 0;
            v71 = 1;
          }
          while ((v73 & 1) != 0);
          ++v67;
        }
        while (v67 != v183 + 4);
      }
      v74 = (uint64_t *)(v220.i64[0] + 40 * v194);
      v76 = v74[1];
      v75 = v74[2];
      v77 = *v74;
      sub_2367E1480(v226, 5uLL);
      sub_2367E14F4(&v222, 1uLL, (uint64_t)v226);
      if (v226[0])
      {
        v226[1] = v226[0];
        operator delete(v226[0]);
      }
      sub_2367E1480(&__p, 8uLL);
      sub_2367E14F4(v226, 1uLL, (uint64_t)&__p);
      if (__p.i64[0])
      {
        __p.i64[1] = __p.i64[0];
        operator delete((void *)__p.i64[0]);
      }
      if (v52 < v192)
        break;
LABEL_67:
      __p.i64[0] = (uint64_t)v226;
      sub_2367C4718((void ***)&__p);
      v226[0] = (void **)&v222;
      sub_2367C4718(v226);
      v29 = v182 + 1;
      v33 = v197;
      if (v182 == 2)
      {
        v196 = 1;
        a6 = v186;
        a4 = v184;
        v12 = v180;
        goto LABEL_3;
      }
    }
    v78 = v75;
    v79 = *v32;
    v80 = *v31;
    v206 = v189[527];
    v81 = 4 * v76 - 64;
    v82 = v52;
    while (1)
    {
      for (i = 0; i != 5; ++i)
      {
        v84 = (unint64_t)*(unsigned int *)(v197[219] + 40 * v194 + 4) >> v37;
        v85 = i + v82 - 2;
        LOBYTE(v86) = (uint64_t)(i + v82) < 2;
        if ((uint64_t)(i + v82) < 2 || (uint64_t)v85 >= (uint64_t)v84)
        {
          do
          {
            v87 = ~v85;
            if ((v86 & 1) != 0)
              v88 = 0;
            else
              v88 = 2 * v84;
            v85 = v88 + v87;
            v86 = v85 >> 63;
          }
          while (v85 >= v84);
        }
        *(_QWORD *)(*(_QWORD *)v222.i64[0] + 8 * i) = v80 + v79 * (v85 - v52 + 2);
      }
      v89 = 0;
      v90 = *(_QWORD *)(v77 + 16);
      v210 = v78;
      v91 = v90 * v78;
      do
      {
        *(_QWORD *)((char *)*v226[0] + v89) = *(_QWORD *)(v77 + 24) + v81 + v91;
        v89 += 8;
        v91 += v90;
      }
      while (v89 != 64);
      v25 = (*(uint64_t (**)(uint64_t, int64x2_t *, void ***, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v206 + 16))(v206, &v222, v226, 0, v191, 0, 0, v190);
      if ((_DWORD)v25)
        break;
      ++v82;
      v78 = v210 + 8;
      if (v82 == v192)
        goto LABEL_67;
    }
    __p.i64[0] = (uint64_t)v226;
    sub_2367C4718((void ***)&__p);
    v226[0] = (void **)&v222;
    sub_2367C4718(v226);
    goto LABEL_93;
  }
  v196 = 1;
LABEL_3:
  v204 = a2 % v12;
  v207 = a2 / v12;
  __p.i64[0] = a2 % v12 * v211;
  __p.i64[1] = a2 / v12 * v211;
  v215 = v211;
  v216 = v211;
  v19 = *(_QWORD *)(v212 + 1360);
  v20 = *(unsigned __int8 *)(v19 + a2);
  if (a6)
    v21 = *(unsigned int *)(v212 + 160);
  else
    v21 = v20 + a4;
  if (v21 <= v20)
  {
    v92 = 0;
LABEL_79:
    *(_BYTE *)(v19 + a2) = v20 + a4;
    v98 = (_BYTE *)v212;
    if ((*(_BYTE *)(v212 + 72) & 1) != 0)
    {
      v195 = v92;
      v99 = *(_DWORD *)(*(_QWORD *)(v212 + 456) + 320);
      memset(v228, 0, sizeof(v228));
      v227 = 0u;
      memset(v226, 0, sizeof(v226));
      v100 = *(unsigned int *)(v212 + 316);
      v101 = v211;
      if ((_DWORD)v100)
      {
        v102 = 0;
        v103 = vdupq_n_s64(v211);
        v104 = 40 * (v99 + 3);
        v203 = v103;
        do
        {
          if (v100)
          {
            v105 = 0;
            v106 = v102 * v101;
            do
            {
              v107 = 0;
              v108.i64[0] = v105 * v101;
              v108.i64[1] = v106;
              v109 = v220.i64[0] + v104;
              do
              {
                v110 = &v226[v107];
                *v110 = *(void ***)(v109 + v107 * 8);
                v111 = *(int64x2_t *)(v109 + v107 * 8 + 8);
                v112 = (uint64x2_t)vaddq_s64(*(int64x2_t *)(v109 + v107 * 8 + 24), v111);
                v113 = vaddq_s64(v111, v108);
                *(int64x2_t *)(v110 + 1) = v113;
                *(int8x16_t *)(v110 + 3) = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v113, v103), v112), (int8x16_t)vqsubq_u64(v112, (uint64x2_t)v113), (int8x16_t)v103);
                v107 += 5;
              }
              while (v107 != 15);
              v114 = 0;
              v115 = (*(_QWORD *)(*(_QWORD *)v98 + 4456) << 32)
                   - 0x61C8864680B583EBLL
                   + *(unsigned int *)(*(_QWORD *)v98 + 4464);
              v116 = ((v105 + v100 * v204) * v101);
              v117 = ((v102 + v100 * v207) * v101);
              v118 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v115 ^ (v115 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v115 ^ (v115 >> 30))) >> 27));
              v119 = v118 ^ (v118 >> 31);
              v222.i64[0] = v119;
              v120 = 0xBF58476D1CE4E5B9
                   * (((v116 << 32) - 0x61C8864680B583EBLL + v117) ^ ((unint64_t)((v116 << 32)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + v117) >> 30));
              v121 = (0x94D049BB133111EBLL * (v120 ^ (v120 >> 27))) ^ ((0x94D049BB133111EBLL * (v120 ^ (v120 >> 27))) >> 31);
              v225[1] = v121;
              do
              {
                v122 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v119 ^ (v119 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v119 ^ (v119 >> 30))) >> 27));
                v119 = v122 ^ (v122 >> 31);
                v123 = &v222.i8[v114];
                *((_QWORD *)v123 + 1) = v119;
                v124 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v121 ^ (v121 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v121 ^ (v121 >> 30))) >> 27));
                v121 = v124 ^ (v124 >> 31);
                *((_QWORD *)v123 + 9) = v121;
                v114 += 8;
              }
              while (v114 != 56);
              sub_2367E4C04(&v222, (uint64_t *)&v226[1], (uint64_t)v226[0]);
              sub_2367E4C04(&v222, v228, *((uint64_t *)&v227 + 1));
              sub_2367E4C04(&v222, &v228[5], v228[4]);
              ++v105;
              v101 = v211;
              v98 = (_BYTE *)v212;
              v100 = *(unsigned int *)(v212 + 316);
              v103 = v203;
            }
            while (v105 < v100);
          }
          ++v102;
        }
        while (v102 < v100);
      }
      v92 = v195;
    }
    if (!v98[1034])
    {
      if ((v196 & v92) == 1)
      {
        v126 = v217;
        ++*(_BYTE *)(*(_QWORD *)(v217 + 224) + v218);
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
        if ((_DWORD)v25)
          goto LABEL_93;
      }
      else if ((a6 & 1) != 0)
      {
        v25 = 1;
        goto LABEL_93;
      }
    }
    v25 = 0;
    goto LABEL_93;
  }
  v187 = a6;
  v92 = 0;
  v185 = a4;
  v93 = v20 + a4;
  v94 = v212 + 776;
  while (1)
  {
    v95 = v92;
    LODWORD(v226[0]) = 0;
    LODWORD(v229) = 0;
    sub_2367DA0A4(v212 + 152, v20, v226, &v229);
    v213 = 1;
    if (v20 >= v93)
    {
      v222.i32[0] = 5;
      v222.i64[1] = 0;
      *(_QWORD *)v223 = a2;
      *(_QWORD *)&v223[8] = v20;
      v97 = sub_2367E3144(v94, v200, &__p, 0, (int)v226[0], v229, (uint64_t)&v222, 1, *(_QWORD *)v212, (uint64_t)&v217, &v213);
    }
    else
    {
      v96 = *a3;
      v222.i32[0] = 5;
      v222.i64[1] = 0;
      *(_QWORD *)v223 = a2;
      *(_QWORD *)&v223[8] = v20;
      v97 = sub_2367E3144(v94, v200, &__p, v96, (int)v226[0], v229, (uint64_t)&v222, 0, *(_QWORD *)v212, (uint64_t)&v217, &v213);
    }
    v25 = v97;
    if ((_DWORD)v97)
      break;
    v92 = (v213 != 0) | v95;
    ++v20;
    ++a3;
    if (v21 == v20)
    {
      v19 = *(_QWORD *)(v212 + 1360);
      LOBYTE(v20) = *(_BYTE *)(v19 + a2);
      LOBYTE(a6) = v187;
      LOBYTE(a4) = v185;
      goto LABEL_79;
    }
  }
LABEL_93:
  if (v220.i64[0])
  {
    v220.i64[1] = v220.i64[0];
    operator delete((void *)v220.i64[0]);
  }
  return v25;
}

void sub_2367D9D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2367D9E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t j;
  uint64_t k;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[120];
  uint64_t v46;
  __int128 v47;
  unsigned int v48;

  v8 = a3;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v12 = a1 + 120 * i;
      v14 = *(_DWORD *)(v12 + 32);
      v13 = v12 + 32;
      if (!v14)
      {
        sub_2367DA15C((uint64_t)&v46, 0x20u, 0x20u);
        result = v48;
        if (v48)
          return result;
        sub_2367CA9E4((uint64_t)v45, (uint64_t)&v46);
        sub_2367D086C(v13, (uint64_t)v45);
        for (j = 104; j != -16; j -= 40)
          sub_2367C2F38((uint64_t *)&v45[j]);
        if (!v48)
        {
          for (k = 104; k != -16; k -= 40)
            sub_2367C2F38((uint64_t *)((char *)&v46 + k));
        }
      }
    }
  }
  v18 = 0;
  v19 = 0;
  do
  {
    if (((1 << v18) & v8) != 0
      && (byte_23692665C[v18] * (unint64_t)byte_236926677[v18]) << 6 > v19)
    {
      v19 = (byte_23692665C[v18] * (unint64_t)byte_236926677[v18]) << 6;
    }
    ++v18;
  }
  while (v18 != 27);
  v20 = *(_QWORD *)(a1 + 1464);
  if (v19 > v20)
  {
    *(_QWORD *)(a1 + 1464) = v19;
    if ((7 * v19) >> 62)
      v21 = 0;
    else
      v21 = sub_236785B78(28 * v19, a2, a3, a4, a5, a6, a7, a8);
    v46 = 0;
    v47 = 0uLL;
    sub_2367DA3D0((uint64_t *)(a1 + 1392), v21);
    *(_OWORD *)(a1 + 1400) = v47;
    sub_2367D7A7C(&v46);
    v29 = 0;
    if (!((unint64_t)(3 * *(_QWORD *)(a1 + 1464)) >> 62))
      v29 = sub_236785B78(12 * *(_QWORD *)(a1 + 1464), v22, v23, v24, v25, v26, v27, v28);
    v46 = 0;
    v47 = 0uLL;
    v30 = *(_QWORD *)(a1 + 1416);
    *(_QWORD *)(a1 + 1416) = v29;
    if (v30)
    {
      v31 = *(void (**)(_QWORD, _QWORD))(a1 + 1424);
      if (v31)
        v31(*(_QWORD *)(a1 + 1432), *(_QWORD *)(v30 - 16));
      else
        free(*(void **)(v30 - 16));
    }
    *(_OWORD *)(a1 + 1424) = v47;
    sub_2367D7A3C(&v46);
    v39 = *(_QWORD *)(a1 + 1464);
    if (3 * v39 < 0)
      v40 = 0;
    else
      v40 = sub_236785B78(6 * v39, v32, v33, v34, v35, v36, v37, v38);
    v46 = 0;
    v47 = 0uLL;
    v41 = *(_QWORD *)(a1 + 1440);
    *(_QWORD *)(a1 + 1440) = v40;
    if (v41)
    {
      v42 = *(void (**)(_QWORD, _QWORD))(a1 + 1448);
      if (v42)
        v42(*(_QWORD *)(a1 + 1456), *(_QWORD *)(v41 - 16));
      else
        free(*(void **)(v41 - 16));
    }
    *(_OWORD *)(a1 + 1448) = v47;
    sub_2367D79FC(&v46);
    v20 = *(_QWORD *)(a1 + 1464);
  }
  result = 0;
  v43 = *(_QWORD *)(a1 + 1392);
  v44 = *(_QWORD *)(a1 + 1416);
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v44;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 1440);
  *(_QWORD *)(a1 + 24) = v43 + 12 * v20;
  return result;
}

uint64_t sub_2367DA0A4(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  *a4 = 2;
  *a3 = 3;
  while (1)
  {
    if (*(_DWORD *)(result + 12))
    {
      v5 = 0;
      do
      {
        v6 = result + 4 * v5;
        if (v4 == *(_DWORD *)(v6 + 60))
        {
          v7 = *(_DWORD *)(v6 + 16);
          if (v7 == 8)
          {
            *a3 = 3;
            v7 = *(_DWORD *)(v6 + 16);
          }
          if (v7 == 4)
          {
            *a3 = 2;
            v7 = *(_DWORD *)(v6 + 16);
          }
          if (v7 == 2)
          {
            *a3 = 1;
            v7 = *(_DWORD *)(v6 + 16);
          }
          if (v7 == 1)
            *a3 = 0;
        }
        ++v5;
      }
      while (v5 < *(unsigned int *)(result + 12));
    }
    if (v4 == *(_DWORD *)(result + 8) - 1)
      *a3 = 0;
    if (v4 == a2)
      break;
    *a4 = *a3 - 1;
    ++v4;
  }
  return result;
}

void sub_2367DA15C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  sub_2367DA410((uint64_t)&v41, a2, a3);
  if (v45)
  {
    *(_DWORD *)(a1 + 120) = v45;
  }
  else
  {
    sub_2367DA410((uint64_t)&v36, a2, a3);
    if (v40)
    {
      *(_DWORD *)(a1 + 120) = v40;
    }
    else
    {
      sub_2367DA410((uint64_t)&v31, a2, a3);
      if (v35)
      {
        *(_DWORD *)(a1 + 120) = v35;
      }
      else
      {
        v19 = v41;
        v6 = v43;
        v43 = 0;
        v7 = v38;
        v38 = 0;
        v8 = v33;
        v33 = 0;
        v20 = v42;
        v21 = v6;
        v22 = v44;
        v24 = v37;
        v25 = v7;
        v23 = v36;
        v26 = v39;
        v27 = v31;
        v28 = v32;
        v29 = v8;
        v30 = v34;
        *(_DWORD *)(a1 + 120) = 0;
        sub_2367CA9E4(a1, (uint64_t)&v19);
        for (i = 104; i != -16; i -= 40)
          sub_2367C2F38((uint64_t *)((char *)&v19 + i));
        if (!v35)
        {
          v10 = v33;
          v33 = 0;
          if (v10)
          {
            v11 = -*(_QWORD *)(v10 - 24);
            do
              v12 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v12 + v11, &qword_2564313D8));
            free(*(void **)(v10 - 32));
          }
        }
      }
      if (!v40)
      {
        v13 = v38;
        v38 = 0;
        if (v13)
        {
          v14 = -*(_QWORD *)(v13 - 24);
          do
            v15 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v15 + v14, &qword_2564313D8));
          free(*(void **)(v13 - 32));
        }
      }
    }
    if (!v45)
    {
      v16 = v43;
      v43 = 0;
      if (v16)
      {
        v17 = -*(_QWORD *)(v16 - 24);
        do
          v18 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v18 + v17, &qword_2564313D8));
        free(*(void **)(v16 - 32));
      }
    }
  }
}

void sub_2367DA34C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 104) = 0;
  if (!v3)
    goto LABEL_5;
  v4 = -*(_QWORD *)(v3 - 24);
  do
    v5 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v5 + v4, &qword_2564313D8));
  free(*(void **)(v3 - 32));
  if (!*(_DWORD *)(v1 - 40))
  {
LABEL_5:
    v6 = *(_QWORD *)(v1 - 56);
    *(_QWORD *)(v1 - 56) = 0;
    if (v6)
    {
      v7 = -*(_QWORD *)(v6 - 24);
      do
        v8 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v8 + v7, &qword_2564313D8));
      free(*(void **)(v6 - 32));
    }
  }
  _Unwind_Resume(a1);
}

void sub_2367DA3D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = (void (*)(uint64_t, _QWORD))a1[1];
    if (v3)
      v3(a1[2], *(_QWORD *)(v2 - 16));
    else
      free(*(void **)(v2 - 16));
  }
}

double sub_2367DA410(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)&v11 = __PAIR64__(a3, a2);
  *((_QWORD *)&v11 + 1) = __PAIR64__(a3, a2);
  v4 = a2;
  if (a2)
  {
    v5 = 4 * a2 + 139;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x7FFFFFF80;
    else
      v4 = (v5 & 0x7FFFFFF80) + 128;
  }
  v12 = (unint64_t)v4;
  v13 = 4;
  if (sub_2367F66B4((uint64_t)&v11))
  {
    v7 = *((_QWORD *)&v12 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((_QWORD *)&v12 + 1) = 0;
    if (v7)
    {
      v8 = -*(_QWORD *)(v7 - 24);
      do
        v9 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v9 + v8, &qword_2564313D8));
      free(*(void **)(v7 - 32));
    }
  }
  else
  {
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v13;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2367DA4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unint64_t v15;

  if (a13)
  {
    v14 = -*(_QWORD *)(a13 - 24);
    do
      v15 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v15 + v14, &qword_2564313D8));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

void sub_2367DA514(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t j;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t k;
  uint64_t m;
  _BYTE v30[120];
  int v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  v6 = operator new();
  *(_QWORD *)v6 = &off_2508003F0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_QWORD *)(v6 + 120) = 0;
  sub_2367DAC20((uint64_t)&v58, a2, a3);
  if (v62)
  {
    v31 = v62;
  }
  else
  {
    sub_2367DAC20((uint64_t)&v53, a2, a3);
    if (v57)
    {
      v31 = v57;
    }
    else
    {
      sub_2367DAC20((uint64_t)&v48, a2, a3);
      if (v52)
      {
        v31 = v52;
      }
      else
      {
        v36 = v58;
        v7 = v60;
        v60 = 0;
        v34 = v53;
        v8 = v55;
        v35 = v54;
        v55 = 0;
        v32 = v48;
        v9 = v50;
        v33 = v49;
        v50 = 0;
        v37 = v59;
        v38 = v7;
        v39 = v61;
        v41 = v54;
        v42 = v8;
        v40 = v53;
        v43 = v56;
        v44 = v48;
        v45 = v49;
        v46 = v9;
        v47 = v51;
        v31 = 0;
        sub_2367CA9E4((uint64_t)v30, (uint64_t)&v36);
        for (i = 104; i != -16; i -= 40)
          sub_2367C2F38((uint64_t *)((char *)&v36 + i));
        if (!v52)
        {
          v11 = v50;
          v50 = 0;
          if (v11)
          {
            v12 = -*(_QWORD *)(v11 - 24);
            do
              v13 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v13 + v12, &qword_2564313D8));
            free(*(void **)(v11 - 32));
          }
        }
      }
      if (!v57)
      {
        v14 = v55;
        v55 = 0;
        if (v14)
        {
          v15 = -*(_QWORD *)(v14 - 24);
          do
            v16 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v16 + v15, &qword_2564313D8));
          free(*(void **)(v14 - 32));
        }
      }
    }
    if (!v62)
    {
      v17 = v60;
      v60 = 0;
      if (v17)
      {
        v18 = -*(_QWORD *)(v17 - 24);
        do
          v19 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v19 + v18, &qword_2564313D8));
        free(*(void **)(v17 - 32));
      }
    }
  }
  if (v31)
  {
    *(_DWORD *)(a1 + 8) = v31;
    sub_2367DA8E0(v6);
  }
  sub_2367CA9E4((uint64_t)&v36, (uint64_t)v30);
  for (j = 0; j != 3; ++j)
  {
    v21 = (char *)&v36 + 40 * j;
    v22 = v6 + 8 + 40 * j;
    *(_OWORD *)v22 = *(_OWORD *)v21;
    v23 = *((_QWORD *)v21 + 2);
    v24 = *((_QWORD *)v21 + 3);
    *((_QWORD *)v21 + 3) = 0;
    v25 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 16) = v23;
    *(_QWORD *)(v22 + 24) = v24;
    if (v25)
    {
      v26 = -*(_QWORD *)(v25 - 24);
      do
        v27 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v27 + v26, &qword_2564313D8));
      free(*(void **)(v25 - 32));
    }
    *(_QWORD *)(v22 + 32) = *((_QWORD *)v21 + 4);
  }
  for (k = 104; k != -16; k -= 40)
    sub_2367C2F38((uint64_t *)((char *)&v36 + k));
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v6;
  if (!v31)
  {
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)&v30[m]);
  }
}

void sub_2367DA84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(v1 - 152);
  *(_QWORD *)(v1 - 152) = 0;
  if (!v2)
    goto LABEL_5;
  v3 = -*(_QWORD *)(v2 - 24);
  do
    v4 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v4 + v3, &qword_2564313D8));
  free(*(void **)(v2 - 32));
  if (!*(_DWORD *)(v1 - 88))
  {
LABEL_5:
    v5 = *(_QWORD *)(v1 - 104);
    *(_QWORD *)(v1 - 104) = 0;
    if (v5)
    {
      v6 = -*(_QWORD *)(v5 - 24);
      do
        v7 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v7 + v6, &qword_2564313D8));
      free(*(void **)(v5 - 32));
    }
  }
  sub_2367DA8E0(v0);
}

void sub_2367DA8D8()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void sub_2367DA8E0(uint64_t a1)
{
  uint64_t i;

  for (i = 112; i != -8; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  JUMPOUT(0x23B7F8F48);
}

void sub_2367DA928(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t j;
  _BYTE v9[120];
  _BYTE v10[120];
  int v11;

  v6 = operator new();
  *(_QWORD *)v6 = &off_250800398;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_QWORD *)(v6 + 120) = 0;
  sub_2367DA15C((uint64_t)v10, a2, a3);
  if (v11)
  {
    *(_DWORD *)(a1 + 8) = v11;
    sub_2367DA8E0(v6);
  }
  sub_2367CA9E4((uint64_t)v9, (uint64_t)v10);
  sub_2367D086C(v6 + 8, (uint64_t)v9);
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)&v9[i]);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v6;
  if (!v11)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)&v10[j]);
  }
}

void sub_2367DAA3C()
{
  uint64_t v0;

  sub_2367DA8E0(v0);
}

void sub_2367DAA48()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t sub_2367DAA50(uint64_t a1)
{
  uint64_t i;

  for (i = 112; i != -8; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  return a1;
}

void sub_2367DAA88(uint64_t a1)
{
  uint64_t i;

  for (i = 112; i != -8; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367DAAD0()
{
  return 1;
}

uint64_t sub_2367DAAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(_QWORD *)(a1 + 40 * a2 + 32) + *(_QWORD *)(a1 + 24) * a3 + 4 * a4;
}

uint64_t sub_2367DAAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(_QWORD *)(a1 + 40 * a2 + 32) + *(_QWORD *)(a1 + 24) * a3 + 4 * a4;
}

uint64_t sub_2367DAB10(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 2;
}

void sub_2367DAB1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 0;
  v3 = a1 + 8;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4;
  do
  {
    if (v5)
    {
      v6 = 0;
      do
      {
        v7 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v7)
        {
          bzero((void *)(*(_QWORD *)(v3 + 40 * v2 + 24) + *(_QWORD *)(a1 + 24) * v6), 4 * v7);
          v4 = *(unsigned int *)(a1 + 12);
        }
        ++v6;
        v5 = v4;
      }
      while (v6 < v4);
    }
    ++v2;
  }
  while (v2 != 3);
}

void sub_2367DABA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;

  v2 = a1 + 40 * a2;
  v4 = *(_DWORD *)(v2 + 8);
  v3 = (unsigned int *)(v2 + 8);
  if (v4 && v3[1])
  {
    v5 = 0;
    do
      bzero((void *)(*((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 2) * v5++), 4 * *v3);
    while (v5 < v3[1]);
  }
}

BOOL sub_2367DAC00(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) == 0;
}

double sub_2367DAC20(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)&v11 = __PAIR64__(a3, a2);
  *((_QWORD *)&v11 + 1) = __PAIR64__(a3, a2);
  v4 = a2;
  if (a2)
  {
    v5 = 2 * a2 + 141;
    if ((v5 & 0x780) != 0)
      v4 = v5 & 0x3FFFFFF80;
    else
      v4 = (v5 & 0x3FFFFFF80) + 128;
  }
  v12 = (unint64_t)v4;
  v13 = 2;
  if (sub_2367F66B4((uint64_t)&v11))
  {
    v7 = *((_QWORD *)&v12 + 1);
    *(_DWORD *)(a1 + 40) = 1;
    *((_QWORD *)&v12 + 1) = 0;
    if (v7)
    {
      v8 = -*(_QWORD *)(v7 - 24);
      do
        v9 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v9 + v8, &qword_2564313D8));
      free(*(void **)(v7 - 32));
    }
  }
  else
  {
    result = *(double *)&v11;
    v10 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v13;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_2367DACE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  unint64_t v15;

  if (a13)
  {
    v14 = -*(_QWORD *)(a13 - 24);
    do
      v15 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v15 + v14, &qword_2564313D8));
    free(*(void **)(a13 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367DAD24(uint64_t a1)
{
  uint64_t i;

  for (i = 112; i != -8; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  return a1;
}

void sub_2367DAD5C(uint64_t a1)
{
  uint64_t i;

  for (i = 112; i != -8; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + i));
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367DADA4()
{
  return 0;
}

uint64_t sub_2367DADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(_QWORD *)(a1 + 40 * a2 + 32) + *(_QWORD *)(a1 + 24) * a3 + 2 * a4;
}

uint64_t sub_2367DADC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(_QWORD *)(a1 + 40 * a2 + 32) + *(_QWORD *)(a1 + 24) * a3 + 2 * a4;
}

uint64_t sub_2367DADE4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 1;
}

void sub_2367DADF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 0;
  v3 = a1 + 8;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4;
  do
  {
    if (v5)
    {
      v6 = 0;
      do
      {
        v7 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v7)
        {
          bzero((void *)(*(_QWORD *)(v3 + 40 * v2 + 24) + *(_QWORD *)(a1 + 24) * v6), 2 * v7);
          v4 = *(unsigned int *)(a1 + 12);
        }
        ++v6;
        v5 = v4;
      }
      while (v6 < v4);
    }
    ++v2;
  }
  while (v2 != 3);
}

void sub_2367DAE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  unint64_t v5;

  v2 = a1 + 40 * a2;
  v4 = *(_DWORD *)(v2 + 8);
  v3 = (unsigned int *)(v2 + 8);
  if (v4 && v3[1])
  {
    v5 = 0;
    do
      bzero((void *)(*((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 2) * v5++), 2 * *v3);
    while (v5 < v3[1]);
  }
}

BOOL sub_2367DAED4(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) == 0;
}

void sub_2367DAEF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a1 + 8);
  sub_2367C4718(&v4);
  sub_2367C2F38((uint64_t *)a1);
}

uint64_t sub_2367DAF4C(uint64_t a1)
{
  uint64_t result;
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 88) = &off_2507FF438;
  *(_OWORD *)(a1 + 108) = xmmword_2368AF590;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  result = sub_2367CB9F8(a1 + 88, (uint64_t)&v3);
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

void sub_2367DAFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;
  void *v13;

  v12 = *(void **)(v10 + 56);
  if (v12)
  {
    *(_QWORD *)(v10 + 64) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v10 + 32);
  if (v13)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  a10 = (void **)(v10 + 8);
  sub_2367C4718(&a10);
  sub_2367C2F38((uint64_t *)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2367DB00C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    sub_2367DAEF4(i - 144);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2367DB058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  do
  {
    v3 = atomic_load((unsigned int *)(a1 + 4472));
    if (((v3 >> v2) & 1) != 0)
    {
      v4 = qword_236922110[3 * byte_236923064[v2] + 3] << 6;
      if (v4 <= *(_QWORD *)(a1 + 1560))
        v4 = *(_QWORD *)(a1 + 1560);
      *(_QWORD *)(a1 + 1560) = v4;
    }
    ++v2;
  }
  while (v2 != 27);
  v5 = *(_QWORD *)(a1 + 1560) * a2;
  if (v5 > (uint64_t)(*(_QWORD *)(a1 + 1576) - *(_QWORD *)(a1 + 1568)) >> 2)
    sub_2367C5284((char **)(a1 + 1568), v5);
}

uint64_t sub_2367DB0DC(uint64_t result, unsigned int a2)
{
  uint64_t **v2;
  int *v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  void *v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  _OWORD *v98;
  _QWORD *v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int *v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  int v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  uint64x2_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  void *v156;
  _OWORD *v157;
  _OWORD *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  __int128 v164;
  int v165;
  void *__p;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  char v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  _QWORD v179[2];
  unint64_t v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  char v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  char v195;
  int v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v2 = *(uint64_t ***)(result + 8);
  v3 = (int *)*v2;
  v4 = atomic_load((unsigned __int8 *)v2[5]);
  if ((v4 & 1) == 0)
  {
    v5 = a2;
    v6 = *(_QWORD *)(*v2[1] + 8 * a2);
    if (v6 != *v2[2])
    {
      v7 = *(unint64_t **)(*v2[3] + 24 * v6);
      v8 = *((_QWORD *)v3 + 90);
      if (!v3[15] && (v3[18] & 0x20) == 0)
      {
        v9 = *(_QWORD *)v3;
        v10 = *(_QWORD **)(*(_QWORD *)v3 + 4208);
        v11 = v10[13];
        v12 = v10[17];
        v13 = v12 * (a2 / v11);
        v15 = v10[9];
        v14 = v10[10];
        v197 = v12 * (a2 % v11);
        v198 = v13;
        v16 = v15 - v197;
        if (v15 < v197)
          v16 = 0;
        if (v197 + v12 <= v15)
          v17 = v12;
        else
          v17 = v16;
        v18 = v13 + v12;
        v19 = v14 >= v13;
        v20 = v14 - v13;
        if (!v19)
          v20 = 0;
        if (v18 <= v14)
          v21 = v12;
        else
          v21 = v20;
        v199 = v17;
        v200 = v21;
        sub_2368001CC((uint64_t)&v189, v17, v21, v3[210], 3);
        if (v196)
          goto LABEL_54;
        v182 = v189;
        v189 = 0uLL;
        v184 = v191;
        v183 = v190;
        v185 = v192;
        v190 = 0;
        v191 = 0uLL;
        v192 = 0;
        v186 = v193;
        v187 = v194;
        v188 = v195;
        LODWORD(v154) = 1;
        *((_QWORD *)&v154 + 1) = 0;
        v155 = v5;
        v156 = 0;
        v145 = sub_2367E29EC((uint64_t)&v154, *((_QWORD *)v3 + 125), *((_QWORD *)v3 + 126));
        v23 = (_QWORD *)v7[2];
        v22 = v7[3];
        if ((unint64_t)v23 > v22)
        {
          sub_2367C5188(v7);
          v26 = (_QWORD *)v7[2];
          v22 = v7[3];
        }
        else
        {
          v24 = v7[1];
          v25 = *v7 | (*v23 << v24);
          v26 = (_QWORD *)((char *)v23 + ((63 - v24) >> 3));
          *v7 = v25;
          v7[1] = v24 | 0x38;
          v7[2] = (unint64_t)v26;
        }
        v143 = v9;
        if ((unint64_t)v26 > v22)
        {
          sub_2367C5188(v7);
          v28 = *v7;
          v29 = v7[1];
        }
        else
        {
          v27 = v7[1];
          v28 = *v7 | (*v26 << v27);
          v29 = v27 | 0x38;
          *v7 = v28;
          v7[1] = v27 | 0x38;
          v7[2] = (unint64_t)v26 + ((63 - v27) >> 3);
        }
        *v7 = v28 >> 2;
        v7[1] = v29 - 2;
        v154 = xmmword_2368AF5C0;
        v155 = 1056964608;
        v30 = operator new(0x20uLL);
        v31 = 0;
        *v30 = xmmword_2369238DC;
        v30[1] = unk_2369238EC;
        v161 = 0xFFFFFFFFLL;
        v164 = xmmword_2368AF5B0;
        v157 = v30 + 2;
        v158 = v30 + 2;
        v156 = v30;
        v159 = 1119879168;
        v160 = 32;
        v162 = 0x33F8147AELL;
        v163 = 0;
        v165 = 2;
        __p = 0;
        v167 = 0;
        v168 = 0;
        v169 = -1;
        v170 = 256;
        v171 = 0;
        v172 = 0;
        do
        {
          v32 = v31 ^ 1;
          if (v31 == 2)
            v32 = 2;
          v33 = v182 + (v32 << 6);
          v34 = v3[v31 + 24];
          v35 = *(_QWORD *)(v33 + 48);
          *(_QWORD *)(v33 + 40) >>= *((_BYTE *)v3 + 108) - byte_236923AD4[v34];
          *(_QWORD *)(v33 + 48) = v35 >> (*((_BYTE *)v3 + 109) - byte_236923AD8[v34]);
          if (sub_2367E28F4(v33))
            goto LABEL_26;
          ++v31;
        }
        while (v31 != 3);
        if (sub_2367FF970(v7, (uint64_t)&v182, 0, v145, (unint64_t *)&v154, 1, (uint64_t *)v3 + 130, (_BYTE *)v3 + 1064, (uint64_t *)v3 + 151))
        {
LABEL_26:
          v36 = 0;
          goto LABEL_27;
        }
        sub_2367CB594(&v197, (_QWORD *)(v143 + 1632), v143 + 1592, (uint64_t)&v182, (float *)(*(_QWORD *)(v143 + 4208) + 952), (float *)(*(_QWORD *)(v143 + 4208) + 1184), (uint64_t)(v3 + 22), (int **)(*(_QWORD *)(v143 + 4208) + 1760), 1.0 / (float)(1 << (v28 & 3)));
        v36 = 1;
LABEL_27:
        operator delete(v30);
        *(_QWORD *)&v154 = &v184;
        sub_2367D6C98((void ***)&v154);
        *(_QWORD *)&v154 = &v182;
        sub_2367D6D24((void ***)&v154);
        result = sub_2367E2C48((uint64_t)&v189);
        if ((v36 & 1) == 0)
          goto LABEL_55;
      }
      v37 = *((_QWORD *)v3 + 95);
      v148.i64[0] = v37 * (v5 % v8);
      v148.i64[1] = v37 * (v5 / v8);
      v149 = v37;
      v150 = v37;
      LODWORD(v154) = 2;
      *((_QWORD *)&v154 + 1) = 0;
      v155 = v5;
      v156 = 0;
      result = sub_2367E3144((uint64_t)(v3 + 194), (uint64_t)(v3 + 12), &v148, v7, 3, 1000, (uint64_t)&v154, 0, 0, 0, 0);
      if ((_DWORD)result)
      {
LABEL_55:
        atomic_store(1u, (unsigned __int8 *)v2[5]);
        return result;
      }
      if (v3[15])
      {
        if (v3[125])
        {
          v38 = *(_QWORD *)v3;
          v39 = *(unsigned int *)(*(_QWORD *)v3 + 4284);
          if ((_DWORD)v39)
          {
            v40 = 0;
            v41 = *(float **)(v38 + 4304);
            v42 = *(_QWORD *)(v38 + 4296);
            v43 = *(unsigned int *)(v38 + 4280);
            v44 = -1.1716 / *((float *)v3 + 146);
            do
            {
              v45 = v41;
              v46 = v43;
              if ((_DWORD)v43)
              {
                do
                {
                  *v45++ = v44;
                  --v46;
                }
                while (v46);
              }
              ++v40;
              v41 = (float *)((char *)v41 + v42);
            }
            while (v40 != v39);
          }
        }
        goto LABEL_36;
      }
      v47 = *(_QWORD *)v3;
      v48 = *(_QWORD **)(*(_QWORD *)v3 + 4208);
      v49 = v48[13];
      v50 = v48[17];
      v51 = v50 * (v5 % v49);
      v52 = v50 * (v5 / v49);
      v54 = v48[9];
      v53 = v48[10];
      v197 = v51;
      v198 = v52;
      v55 = v54 - v51;
      if (v54 < v51)
        v55 = 0;
      if (v51 + v50 <= v54)
        v55 = v50;
      v56 = v53 - v52;
      if (v53 < v52)
        v56 = 0;
      if (v52 + v50 <= v53)
        v57 = v50;
      else
        v57 = v56;
      v199 = v55;
      v200 = v57;
      v147 = v55;
      v58 = v55 * v57;
      v60 = (_QWORD *)v7[2];
      v59 = v7[3];
      if ((unint64_t)v60 > v59)
      {
        sub_2367C5188(v7);
        v63 = (_QWORD *)v7[2];
        v59 = v7[3];
      }
      else
      {
        v61 = v7[1];
        v62 = *v7 | (*v60 << v61);
        v63 = (_QWORD *)((char *)v60 + ((63 - v61) >> 3));
        *v7 = v62;
        v7[1] = v61 | 0x38;
        v7[2] = (unint64_t)v63;
      }
      v64 = __clz(v58) ^ 0x3F;
      if ((v58 & (v58 - 1)) != 0)
        v65 = v64 + 1;
      else
        v65 = v64;
      v144 = v47;
      v146 = v51;
      if ((unint64_t)v63 > v59)
      {
        sub_2367C5188(v7);
        v67 = *v7;
        v68 = v7[1];
      }
      else
      {
        v66 = v7[1];
        v67 = *v7 | (*v63 << v66);
        v68 = v66 | 0x38;
        *v7 = v67;
        v7[1] = v66 | 0x38;
        v7[2] = (unint64_t)v63 + ((63 - v66) >> 3);
      }
      *v7 = v67 >> v65;
      v7[1] = v68 - v65;
      LODWORD(v154) = 3;
      *((_QWORD *)&v154 + 1) = 0;
      v155 = v5;
      v156 = 0;
      v69 = sub_2367E29EC((uint64_t)&v154, *((_QWORD *)v3 + 125), *((_QWORD *)v3 + 126));
      sub_2368001CC((uint64_t)&v189, v147, v57, v3[210], 4);
      if (v196)
      {
LABEL_54:
        result = sub_2367E2C48((uint64_t)&v189);
        goto LABEL_55;
      }
      v138 = v67;
      v140 = v65;
      v136 = v69;
      v182 = v189;
      v189 = 0uLL;
      v184 = v191;
      v183 = v190;
      v185 = v192;
      v190 = 0;
      v191 = 0uLL;
      v192 = 0;
      v186 = v193;
      v187 = v194;
      v188 = v195;
      v135 = v52;
      v70 = v52 >> 3;
      v71 = (v147 + 7) >> 3;
      v72 = (unint64_t)(v57 + 7) >> 3;
      v179[0] = v146 >> 3;
      v179[1] = v70;
      v180 = v71;
      v181 = v72;
      sub_2367DA410((uint64_t)&v154, v71, v72);
      if ((_DWORD)v158)
      {
        v73 = 1;
        goto LABEL_75;
      }
      v74 = v57;
      v75 = v154;
      v177 = v154;
      v76 = v155;
      v77 = v156;
      v178 = v155;
      v78 = v157;
      v79 = v182;
      *(_QWORD *)(v182 + 40) = v71;
      *(_QWORD *)(v79 + 48) = v72;
      *(_QWORD *)(v79 + 56) = 0x300000003;
      *(_OWORD *)v79 = v75;
      v80 = *(_QWORD *)(v79 + 24);
      *(_QWORD *)(v79 + 16) = v76;
      *(_QWORD *)(v79 + 24) = v77;
      if (v80)
      {
        v81 = -*(_QWORD *)(v80 - 24);
        do
          v82 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v82 + v81, &qword_2564313D8));
        free(*(void **)(v80 - 32));
        v71 = v180;
        v72 = v181;
      }
      *(_QWORD *)(v79 + 32) = v78;
      sub_2367DA410((uint64_t)&v154, v71, v72);
      v73 = (int)v158;
      if ((_DWORD)v158)
        goto LABEL_75;
      v83 = v138 & ~(-1 << v140);
      v141 = v83 + 1;
      v84 = v154;
      v175 = v154;
      v85 = v155;
      v86 = v156;
      v176 = v155;
      v87 = v157;
      v88 = v182;
      *(_QWORD *)(v182 + 104) = v71;
      *(_QWORD *)(v88 + 112) = v72;
      *(_QWORD *)(v88 + 120) = 0x300000003;
      *(_OWORD *)(v88 + 64) = v84;
      v89 = *(_QWORD *)(v88 + 88);
      *(_QWORD *)(v88 + 80) = v85;
      *(_QWORD *)(v88 + 88) = v86;
      v90 = v146;
      if (v89)
      {
        v91 = -*(_QWORD *)(v89 - 24);
        do
          v92 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v92 + v91, &qword_2564313D8));
        free(*(void **)(v89 - 32));
      }
      *(_QWORD *)(v88 + 96) = v87;
      sub_2367DA410((uint64_t)&v154, v141, 2u);
      v73 = (int)v158;
      if ((_DWORD)v158)
      {
LABEL_75:
        *(_QWORD *)&v154 = &v184;
        sub_2367D6C98((void ***)&v154);
        *(_QWORD *)&v154 = &v182;
        sub_2367D6D24((void ***)&v154);
        result = sub_2367E2C48((uint64_t)&v189);
        if (!v73)
        {
LABEL_36:
          *(_BYTE *)(*((_QWORD *)v3 + 173) + v5) = 1;
          *(_DWORD *)(*v2[4] + 4 * *(_QWORD *)(*v2[1] + 8 * v5)) = 0;
          return result;
        }
        goto LABEL_55;
      }
      v139 = v83;
      v93 = v154;
      v173 = v154;
      v95 = v155;
      v94 = v156;
      v174 = v155;
      v96 = v157;
      v97 = v182;
      *(_QWORD *)(v182 + 168) = v141;
      *(_QWORD *)(v97 + 176) = 2;
      *(_QWORD *)(v97 + 184) = 0;
      *(_QWORD *)(v97 + 144) = v95;
      *(_OWORD *)(v97 + 128) = v93;
      sub_2367C5200((uint64_t *)(v97 + 152), (uint64_t)v94);
      *(_QWORD *)(v97 + 160) = v96;
      v154 = xmmword_2368AF5C0;
      v155 = 1056964608;
      v98 = operator new(0x20uLL);
      v157 = v98 + 2;
      v158 = v98 + 2;
      *v98 = xmmword_2369238DC;
      v98[1] = unk_2369238EC;
      v156 = v98;
      v159 = 1119879168;
      v160 = 32;
      v161 = 0xFFFFFFFFLL;
      v162 = 0x33F8147AELL;
      v163 = 0;
      v164 = xmmword_2368AF5B0;
      v165 = 2;
      __p = 0;
      v167 = 0;
      v168 = 0;
      v169 = -1;
      v170 = 256;
      v171 = 0;
      v172 = 0;
      v99 = (_QWORD *)v144;
      if (!sub_2367FF970(v7, (uint64_t)&v182, 0, v136, (unint64_t *)&v154, 1, (uint64_t *)v3 + 130, (_BYTE *)v3 + 1064, (uint64_t *)v3 + 151))
      {
        *(_QWORD *)&v100 = *(_QWORD *)v182;
        *((_QWORD *)&v100 + 1) = HIDWORD(*(_QWORD *)v182);
        v151 = 0;
        v152 = 0;
        v153 = v100;
        sub_2367E4370(&v151, v182, v179, v144 + 1104);
        v151 = 0;
        v152 = 0;
        v101 = *(_QWORD *)(v182 + 64);
        *(_QWORD *)&v100 = v101;
        *((_QWORD *)&v100 + 1) = HIDWORD(v101);
        v153 = v100;
        sub_2367E4370(&v151, v182 + 64, v179, v144 + 1144);
        v142 = sub_2367CB2F4((uint64_t)(v3 + 22));
        v102 = *(unsigned int *)(v144 + 152);
        if (v147 + v146 < v102)
          v102 = v147 + v146;
        v137 = v102;
        if (!v74)
        {
          v105 = 0;
LABEL_116:
          v123 = (unsigned int *)(v99 + 559);
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 | v105, v123));
          if (v3[125])
            sub_2367F17C4((unint64_t)(v3 + 116), &v197, (_QWORD *)v144);
          v73 = 0;
          goto LABEL_71;
        }
        v103 = 0;
        v104 = 0;
        v105 = 0;
        if (v74 + v135 >= *(unsigned int *)(v144 + 156))
          v106 = *(unsigned int *)(v144 + 156);
        else
          v106 = v74 + v135;
        if (v147 <= 1)
          v107 = 1;
        else
          v107 = v147;
        v108 = v147;
        v128 = v74;
        v125 = v107;
        v126 = v106;
        while (!v108)
        {
LABEL_113:
          if (++v104 == v74)
            goto LABEL_116;
        }
        v109 = 0;
        v110 = v135 + v104;
        v131 = v99[131] + v99[130] * (v135 + v104) + 4 * v90;
        v132 = v135 + v104;
        v111 = v99[136] + v99[135] * (v135 + v104) + v90;
        v134 = *(_QWORD *)(v182 + 152);
        v129 = v134 + *(_QWORD *)(v182 + 144);
        v130 = v111;
        v112 = ((v135 + v104) & 0xFFFFFFFFFFFFFFE0) + 32;
        if (v112 >= v106)
          v112 = v106;
        v133 = v112;
        v127 = v104;
        v113 = (unsigned int *)(*(_QWORD *)(v182 + 216) + *(_QWORD *)(v182 + 208) * v104);
        while (1)
        {
          v115 = *v113++;
          v114 = v115;
          if (v115 > 7)
            break;
          v116 = v90 + v109;
          *(_BYTE *)(v111 + v109) = v114;
          if (*(unsigned __int8 *)(v99[24] + v90 + v109 + v99[25] * v110) == 255)
          {
            if (v103 > v139)
              break;
            v117 = *(unsigned int *)(v134 + 4 * v103);
            if (v117 > 0x1A)
              break;
            if (((0x7FC0EB0uLL >> v117) & 1) != 0)
            {
              if (!v142)
                break;
            }
            else
            {
              v118 = v142;
              if (((0x7FC0D70uLL >> v117) & 1) == 0)
                v118 = 1;
              if ((v118 & 1) == 0)
                break;
            }
            v119 = v116 + byte_23692665C[v117];
            v120 = v119 > (v116 & 0xFFFFFFFFFFFFFFE0) + 32 || v119 > v137;
            if (v120 || v110 + (unint64_t)byte_236926677[v117] > v133)
              break;
            v121 = v103;
            v73 = 1;
            if (sub_2367E43F8(v144 + 152, v116, v110, *(_DWORD *)(v134 + 4 * v103), 1))
              goto LABEL_71;
            v105 |= 1 << v117;
            v111 = v130;
            v122 = *(_DWORD *)(v129 + 4 * v121);
            if (v122 >= 255)
              v122 = 255;
            v110 = v132;
            *(_DWORD *)(v131 + 4 * v109) = (v122 & ~(v122 >> 31)) + 1;
            v103 = v121 + 1;
            v99 = (_QWORD *)v144;
            v90 = v146;
            v74 = v128;
          }
          ++v109;
          if (!--v107)
          {
            v108 = v147;
            v106 = v126;
            v104 = v127;
            v107 = v125;
            goto LABEL_113;
          }
        }
      }
      v73 = 1;
LABEL_71:
      if (__p)
        operator delete(__p);
      if (v156)
        operator delete(v156);
      goto LABEL_75;
    }
  }
  return result;
}

void sub_2367DBC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  sub_2367E2C08(&a39);
  sub_2367DC5FC((void **)&STACK[0x210]);
  sub_2367E2C48(v39 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_2367DBCDC(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

float sub_2367DBD00(uint64_t a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float result;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  float v26;

  v4 = (_QWORD *)a2[2];
  if ((unint64_t)v4 > a2[3])
  {
    sub_2367C5188(a2);
    v6 = *a2;
    v7 = a2[1];
  }
  else
  {
    v5 = a2[1];
    v6 = *a2 | (*v4 << v5);
    a2[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    v7 = v5 | 0x38;
  }
  *a2 = v6 >> 1;
  a2[1] = v7 - 1;
  if ((v6 & 1) == 0)
  {
    v8 = sub_2367F2B30(0x8000010080000054, 0x204F00000047, a2);
    v9 = *(float *)(a1 + 108);
    v10 = 1.0 / (float)v8;
    v11 = *(_DWORD *)(a1 + 116);
    v12 = *(float *)(a1 + 104) + (float)((float)*(int *)(a1 + 112) * v10);
    *(_DWORD *)(a1 + 96) = v8;
    *(float *)(a1 + 100) = v10;
    *(float *)(a1 + 80) = v12;
    *(float *)(a1 + 88) = v9 + (float)((float)v11 * v10);
    if (!sub_2367F27D0(a2, (float *)(a1 + 104)))
    {
      result = fabsf(*(float *)(a1 + 104));
      if (result <= 4.0 && !sub_2367F27D0(a2, (float *)(a1 + 108)))
      {
        result = fabsf(*(float *)(a1 + 108));
        if (result <= 4.0)
        {
          v15 = (_QWORD *)a2[2];
          v14 = a2[3];
          if ((unint64_t)v15 > v14)
          {
            sub_2367C5188(a2);
            v17 = *a2;
            v19 = a2[1];
            v18 = (_QWORD *)a2[2];
            v14 = a2[3];
          }
          else
          {
            v16 = a2[1];
            v17 = *a2 | (*v15 << v16);
            v18 = (_QWORD *)((char *)v15 + ((63 - v16) >> 3));
            a2[2] = (unint64_t)v18;
            v19 = v16 | 0x38;
          }
          v20 = v19 - 8;
          v21 = v17 >> 8;
          *a2 = v17 >> 8;
          a2[1] = v19 - 8;
          v22 = v17 - 128;
          *(_DWORD *)(a1 + 112) = v22;
          if ((unint64_t)v18 > v14)
          {
            sub_2367C5188(a2);
            v23 = *a2;
            v24 = a2[1];
            v22 = *(_DWORD *)(a1 + 112);
          }
          else
          {
            v23 = (*v18 << v20) | v21;
            a2[2] = (unint64_t)v18 + ((unint64_t)(71 - v19) >> 3);
            v24 = v20 | 0x38;
          }
          *a2 = v23 >> 8;
          a2[1] = v24 - 8;
          v25 = v23 - 128;
          *(_DWORD *)(a1 + 116) = v25;
          v26 = *(float *)(a1 + 100);
          *(float *)(a1 + 80) = *(float *)(a1 + 104) + (float)((float)v22 * v26);
          result = *(float *)(a1 + 108) + (float)((float)v25 * v26);
          *(float *)(a1 + 88) = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2367DBF00(uint64_t result, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = a2[1];
  if ((_DWORD)v2)
  {
    v3 = 0;
    LODWORD(v4) = *a2;
    do
    {
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = *((_QWORD *)a2 + 3) + *((_QWORD *)a2 + 2) * v3;
        do
        {
          *(_BYTE *)(v6 + v5++) = result;
          v4 = *a2;
        }
        while (v5 < v4);
        v2 = a2[1];
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

char *sub_2367DBF48(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_2367C3440();
  result = (char *)sub_2367CA1FC(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *sub_2367DBF84(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367DBF48(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2367DBFE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2367DBFFC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _BOOL8 result;

  *(_BYTE *)(a1 + 48) = 1;
  v1 = *(_QWORD *)(a1 + 32);
  result = 0;
  if (v1)
  {
    v2 = 8 * (*(_QWORD *)(a1 + 16) - v1 + *(_QWORD *)(a1 + 40)) - *(_QWORD *)(a1 + 8);
    if (v2 > *(_QWORD *)(a1 + 56) && v2 > 8 * (*(_QWORD *)(a1 + 24) - v1) + 64)
      return 1;
  }
  return result;
}

char *sub_2367DC058(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_2367C3440();
  result = (char *)sub_2367DC0A4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_2367DC0A4(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    sub_2367C3488();
  return operator new(40 * a1);
}

uint64_t sub_2367DC0E8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  *(float *)(a1 + 4272) = powf(0.8, (float)a2[17] + -2.0);
  *(float *)(a1 + 4276) = powf(0.8, (float)a2[18] + -2.0);
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_QWORD *)(a1 + 4400) = 0;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_QWORD *)(a1 + 4432) = *(_QWORD *)(a1 + 4424);
  *(_WORD *)(a1 + 4448) = 0;
  *(_DWORD *)(a1 + 4452) = 1;
  atomic_store(0, (unsigned int *)(a1 + 4472));
  sub_236890AE8((uint64_t *)&v16, **(_QWORD **)(a1 + 4208) + 456, 0, 3);
  v4 = *(_QWORD *)(a1 + 4216);
  *(_QWORD *)(a1 + 4216) = v16;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (!a2[113])
    return 0;
  sub_2367C431C((uint64_t)&v16, *(_QWORD *)(*(_QWORD *)(a1 + 4208) + 72) + 4, *(_QWORD *)(*(_QWORD *)(a1 + 4208) + 80) + 4);
  result = v20;
  if (v20)
    return result;
  v6 = v17;
  v7 = v18;
  v18 = 0;
  *(_OWORD *)(a1 + 4280) = v16;
  v8 = v19;
  *(_QWORD *)(a1 + 4296) = v6;
  v9 = *(_QWORD *)(a1 + 4304);
  *(_QWORD *)(a1 + 4304) = v7;
  if (!v9)
  {
    *(_QWORD *)(a1 + 4312) = v8;
    goto LABEL_11;
  }
  v10 = -*(_QWORD *)(v9 - 24);
  do
    v11 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v11 + v10, &qword_2564313D8));
  free(*(void **)(v9 - 32));
  v12 = v20;
  *(_QWORD *)(a1 + 4312) = v8;
  if (!v12)
  {
LABEL_11:
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      v14 = -*(_QWORD *)(v13 - 24);
      do
        v15 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v15 + v14, &qword_2564313D8));
      free(*(void **)(v13 - 32));
    }
  }
  return 0;
}

void sub_2367DC280(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_2367DC53C(v3 - 560);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2367DC2DC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_2367DC53C(v4 - 560);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64x2_t *sub_2367DC34C(uint64x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;

  v4 = sub_2367DC3F0(a2);
  v5 = sub_2367DC418(a2);
  if (*(_DWORD *)(a2 + 260))
    v6 = *(unsigned int *)(a2 + 260);
  else
    v6 = v4;
  if (*(_DWORD *)(a2 + 264))
    v7 = *(unsigned int *)(a2 + 264);
  else
    v7 = v5;
  v8 = *(_DWORD *)(a2 + 404);
  if (v8)
  {
    v9 = 1 << (3 * v8);
    v6 = (v6 + v9 - 1) / v9;
    v7 = (v7 + v9 - 1) / v9;
  }
  return sub_2367DC468(a1, v6, v7, *(unsigned int *)(a2 + 64), *(_BYTE *)(a2 + 60), *(_BYTE *)(a2 + 61), *(_DWORD *)(a2 + 12) == 1, *(unsigned int *)(a2 + 268));
}

uint64_t sub_2367DC3F0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 408);
  if (!v1)
    return 0;
  if (*(_BYTE *)(a1 + 560))
    return sub_2367F4874(v1 + 352);
  return sub_2367F4718(v1 + 424);
}

uint64_t sub_2367DC418(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 408);
  if (v1)
  {
    if (*(_BYTE *)(a1 + 560))
    {
      if (*(_BYTE *)(v1 + 360))
        LODWORD(v1) = 8 * *(_DWORD *)(v1 + 364);
      else
        LODWORD(v1) = *(_DWORD *)(v1 + 368);
    }
    else if (*(_BYTE *)(v1 + 432))
    {
      LODWORD(v1) = 8 * *(_DWORD *)(v1 + 436) + 8;
    }
    else
    {
      LODWORD(v1) = *(_DWORD *)(v1 + 440);
    }
  }
  return v1;
}

uint64x2_t *sub_2367DC468(uint64x2_t *result, uint64_t a2, uint64_t a3, unint64_t a4, char a5, char a6, int a7, unint64_t a8)
{
  uint64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v8 = vshlq_u64((uint64x2_t)xmmword_2368AF5D0, (uint64x2_t)vdupq_n_s64(a4));
  result[8] = v8;
  result[1].i64[0] = a2;
  result[1].i64[1] = a3;
  v9 = (a8 - 1 + a2) / a8;
  v10 = (a8 - 1 + a3) / a8;
  result->i64[0] = v9;
  result->i64[1] = v10;
  v11 = (v9 - 1 + (8 << a5)) >> (a5 + 3) << a5;
  v12 = (v10 - 1 + (8 << a6)) >> (a6 + 3) << a6;
  result[4].i64[0] = v11;
  result[4].i64[1] = v12;
  v13 = 8 * v11;
  v14 = 8 * v12;
  result[3].i64[0] = 8 * v11;
  result[3].i64[1] = 8 * v12;
  if (a7)
  {
    result[3].i64[0] = v9;
    result[3].i64[1] = v10;
    v14 = (a8 - 1 + a3) / a8;
    v13 = (a8 - 1 + a2) / a8;
  }
  result[2].i64[0] = v13 * a8;
  result[2].i64[1] = v14 * a8;
  v15 = (v9 - 1 + v8.i64[0]) >> (a4 + 7);
  v16 = (v10 - 1 + v8.i64[0]) >> (a4 + 7);
  result[5].i64[0] = v15;
  result[5].i64[1] = v16;
  v17 = (v8.i64[0] - 1 + v11) >> (a4 + 7);
  v18 = (v8.i64[0] - 1 + v12) >> (a4 + 7);
  result[6].i64[0] = v17;
  result[6].i64[1] = v18;
  result[7].i64[0] = v16 * v15;
  result[7].i64[1] = v18 * v17;
  return result;
}

uint64_t sub_2367DC53C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (*(_DWORD *)a1 == 7)
  {
    v2 = *(_QWORD *)(a1 + 224);
    if (v2)
    {
      v3 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v3;
        operator delete(v3);
      }
      MEMORY[0x23B7F8F48](v2, 0x10C402FEFCB83);
    }
  }
  return a1;
}

uint64_t sub_2367DC598(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_2507FF4B0;
  v4 = (void **)(a1 + 344);
  sub_2367D6C0C(&v4);
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return a1;
}

void **sub_2367DC5FC(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_2367D6C98(&v3);
  v3 = a1;
  sub_2367D6D24(&v3);
  return a1;
}

BOOL sub_2367DC640(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  _QWORD v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_2367D89A8(*a3, 1uLL, *(_QWORD *)(*a3 + 1368) - *(_QWORD *)(*a3 + 1360)))
      return v5;
    for (i = 0; i != v4; ++i)
      sub_2367DC6EC((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, _QWORD *, uint64_t (*)(uint64_t **, unint64_t), uint64_t (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2367DC7AC, sub_2367DC6EC, 0, a2) != 0;
}

uint64_t sub_2367DC6EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned __int8 v5;
  _OWORD v7[5];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)v3;
  v5 = atomic_load(*(unsigned __int8 **)(v3 + 8));
  if ((v5 & 1) == 0 && *(_DWORD *)(result + 160) != *(unsigned __int8 *)(*(_QWORD *)(result + 1360) + a2))
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    if (*(_BYTE *)(result + 1456))
      a3 = a2;
    result = sub_2367D8E04(result, a2, (unint64_t **)v7, 0, a3, 1, *(_BYTE *)(result + 1409) == 0);
    if ((_DWORD)result)
      atomic_store(1u, *(unsigned __int8 **)(v3 + 8));
  }
  return result;
}

uint64_t sub_2367DC7AC(uint64_t **a1, unint64_t a2)
{
  if (sub_2367D89A8(**a1, a2, *(_QWORD *)(**a1 + 1368) - *(_QWORD *)(**a1 + 1360)))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_2367DC7DC(uint64_t a1)
{
  int v2;
  BOOL v3;

  if (*(_DWORD *)(a1 + 16) == 1)
    return (16 << (*(_BYTE *)(a1 + 404) - 1));
  if (*(_BYTE *)(a1 + 392))
    return 0;
  v2 = *(_DWORD *)(a1 + 396);
  if (v2)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 376) == 0;
  if (v3)
    return (1 << v2);
  else
    return 0;
}

uint64_t sub_2367DC82C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  unint64_t v46;
  uint64_t v47;
  int32x4_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t result;
  unint64_t v60;
  float *v61;
  float v62;
  int32x4_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t i;
  uint64_t k;
  char *v71;
  uint64_t j;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t *v81;
  uint64_t v82;
  void (*v83)(uint64_t *, uint64_t *, unint64_t, float32x4_t *);
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  float *v106;
  float v107;
  float *v108;
  uint64_t v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float *v116;
  uint64_t v117;
  float32_t v118;
  unsigned int v119;
  unsigned int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  unint64_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  uint64_t v136;
  uint64_t m;
  uint64_t v138;
  float32x4_t *v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t *v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  __int8 *v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  __int32 *v165;
  float32x4_t *v166;
  uint64_t v167;
  __int32 *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  char v172;
  float32x4_t *v173;
  char v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  float32x2x2_t v179;
  int32x4_t v180;
  float32x2x2_t v181;
  int32x4_t v182;
  float *f32;
  uint64_t v184;
  float *v185;
  BOOL v186;
  uint64_t v187;
  float v188;
  float v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  float32x4_t *v195;
  uint64_t n;
  uint64_t v197;
  float v198;
  float v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  float32x4_t *v205;
  uint64_t ii;
  float32x4_t *v207;
  uint64_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  uint64_t *v213;
  uint64_t v214;
  float32x4_t *v215;
  unint64_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t v219;
  uint64_t v220;
  float32x4_t *v221;
  uint64_t v222;
  uint64_t v223;
  __int32 *v224;
  float32x4_t *v225;
  uint64_t v226;
  __int32 *v227;
  float32_t v228;
  float32x4_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t jj;
  uint64_t v233;
  float v234;
  float v235;
  float v236;
  float v237;
  uint64_t *v238;
  uint64_t v239;
  float32x4_t *v240;
  unint64_t v241;
  float32x4_t *v242;
  uint64_t v243;
  float32x4_t v244;
  uint64_t v245;
  int8x16_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  __int32 *v250;
  float32x4_t *v251;
  uint64_t v252;
  __int32 *v253;
  float32_t v254;
  float32x4_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t kk;
  uint64_t v259;
  float v260;
  float v261;
  float v262;
  float v263;
  uint64_t *v264;
  uint64_t v265;
  float32x4_t *v266;
  unint64_t v267;
  float32x4_t *v268;
  uint64_t v269;
  float32x4_t v270;
  float32x4_t *v271;
  uint64_t mm;
  uint64_t v273;
  uint64_t v274;
  __int32 *v275;
  float32x4_t *v276;
  uint64_t v277;
  __int32 *v278;
  float32_t v279;
  float32x4_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t nn;
  uint64_t v284;
  float v285;
  float v286;
  float v287;
  float v288;
  uint64_t *v289;
  uint64_t v290;
  float32x4_t *v291;
  unint64_t v292;
  float32x4_t *v293;
  uint64_t v294;
  float32x4_t v295;
  int8x16_t *v296;
  uint64_t i1;
  int8x16_t v298;
  uint64_t v299;
  uint64_t v300;
  __int32 *v301;
  float32x4_t *v302;
  uint64_t v303;
  __int32 *v304;
  float32_t v305;
  float32x4_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t i2;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  unint64_t v323;
  __n128 v324;
  __n128 v325;
  void (*v327)(unint64_t *, _QWORD, _QWORD, uint64_t, uint64_t, unint64_t, int32x4_t *, uint64_t *, float, float, float, __n128, __n128, unint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  _QWORD v348[3];
  int32x4_t v349;
  unint64_t v350;
  _QWORD v351[3];
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD v355[3];
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int64x2_t v365;
  uint64_t v366;
  _QWORD v367[3];
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  uint64_t v384;
  float32x4_t *v385;
  uint64_t v386;
  float32x4_t *v387;
  float32x4_t v388[32];
  uint64_t v389;
  float32x4x2_t v390;
  float32x4x2_t v391;

  v7 = a4;
  v9 = 0;
  v389 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a4 + 4208);
  v11 = *(_QWORD *)(v10 + 88);
  v12 = *(_QWORD *)(v10 + 136) >> 3;
  v13 = v12 * (a5 % v11);
  v14 = v12 * (a5 / v11);
  v16 = *(_QWORD *)(v10 + 72);
  v15 = *(_QWORD *)(v10 + 80);
  v17 = v13 + v12;
  v319 = v14;
  v18 = v14 + v12;
  v19 = *(_QWORD *)(*(_QWORD *)(v10 + 1752) + 16);
  v316 = v10;
  v20 = *(float *)(v10 + 992);
  v21 = *(uint64_t **)(a6 + 24);
  do
  {
    v22 = *v21;
    v21 += 5;
    v367[v9++] = *(_QWORD *)(v22 + 16) >> 2;
  }
  while (v9 != 3);
  v318 = v13;
  if (v16 >= v13)
    v23 = v16 - v13;
  else
    v23 = 0;
  v24 = v15 - v319;
  if (v15 < v319)
    v24 = 0;
  if (v18 <= v15)
    v25 = v12;
  else
    v25 = v24;
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 4480) + 16))(*(_QWORD *)(a4 + 4480));
  v321 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 4480) + 64))(*(_QWORD *)(v7 + 4480));
  v27 = 0;
  v28 = *(unsigned __int8 *)(a1 + 60);
  v29 = *(unsigned int *)(a1 + 48);
  v30 = *(unsigned int *)(a1 + 52);
  v31 = v28 - byte_236923AD4[v30];
  v365.i64[0] = v28 - byte_236923AD4[v29];
  v365.i64[1] = v31;
  v32 = *(unsigned int *)(a1 + 56);
  v366 = v28 - byte_236923AD4[v32];
  v33 = *(unsigned __int8 *)(a1 + 61);
  v34 = v33 - byte_236923AD8[v30];
  v362 = v33 - byte_236923AD8[v29];
  v363 = v34;
  v364 = v33 - byte_236923AD8[v32];
  v360 = 0u;
  v361 = 0u;
  v358 = 0u;
  v359 = 0u;
  v35 = (unint64_t *)&v357;
  if (v17 <= v16)
    v36 = v12;
  else
    v36 = v23;
  v37 = sub_2367DEAE4;
  v328 = v19 >> 2;
  v336 = v26;
  if (!v26)
    v37 = sub_2367DE8F0;
  v327 = (void (*)(unint64_t *, _QWORD, _QWORD, uint64_t, uint64_t, unint64_t, int32x4_t *, uint64_t *, float, float, float, __n128, __n128, unint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))v37;
  v38 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v7 + 4208) + 1752) + 4);
  v356 = 0uLL;
  v357 = 0uLL;
  do
  {
    v39 = v365.i64[v27];
    v40 = *(uint64_t *)((char *)&v362 + v27 * 8);
    *(v35 - 2) = v318 >> v39;
    *(v35 - 1) = v319 >> v40;
    *v35 = v36 >> v39;
    v35[1] = v25 >> v40;
    if ((v36 >> v39) + (v318 >> v39) > *(v38 - 1) || (v25 >> v40) + (v319 >> v40) > *v38)
      return 1;
    v38 += 10;
    ++v27;
    v35 += 4;
  }
  while (v27 != 3);
  if (!v25)
    return 0;
  v41 = 0;
  v42 = 0;
  v310 = v25;
  v311 = v36 + 7;
  v312 = v318 >> 3;
  v322 = v7 + 5772;
  if ((v36 + 7) >> 3 <= 1)
    v43 = 1;
  else
    v43 = (v36 + 7) >> 3;
  v315 = v43;
  v44 = (float32x4_t *)v355;
  v45 = (float32x4_t *)v351;
  v46 = a5;
  v47 = v321;
  v339 = v7;
  v329 = v36;
  do
  {
    (**(void (***)(uint64_t, unint64_t))a2)(a2, v42);
    v49 = 0;
    v355[0] = v42 >> v362;
    v355[1] = v42 >> v363;
    v50 = *(_QWORD **)(v7 + 4208);
    v51 = v50[131] + v50[130] * (v42 + v319);
    v353 = 0;
    v354 = 0;
    v52 = (_QWORD *)v50[219];
    v53 = v52[2];
    v54 = v52[3] + v53 * (*((_QWORD *)&v356 + 1) + (v42 >> v362));
    v355[2] = v42 >> v364;
    v352 = v54 + 4 * v356;
    v55 = v52[13] + (*((_QWORD *)&v360 + 1) + (v42 >> v364)) * v53 + 4 * v360;
    v353 = v52[8] + (*((_QWORD *)&v358 + 1) + (v42 >> v363)) * v53 + 4 * v358;
    v354 = v55;
    v56 = (v42 + v319) >> 3;
    v57 = *(_QWORD *)(v316 + 176) + *(_QWORD *)(v316 + 168) * (v42 + v319);
    v313 = v50[146] + v50[145] * v56;
    v314 = v50[141] + v50[140] * v56;
    memset(v351, 0, sizeof(v351));
    v58 = (_QWORD *)(*(_QWORD *)(a6 + 24) + 8);
    do
    {
      v45->i64[v49] = *(_QWORD *)(*(v58 - 1) + 24)
                    + *(_QWORD *)(*(v58 - 1) + 16) * (v58[1] + 8 * v44->i64[v49])
                    + 4 * *v58;
      ++v49;
      v58 += 5;
    }
    while (v49 != 3);
    if (v311 >= 8)
    {
      v60 = 0;
      v320 = 0;
      v330 = v57 + v318;
      v323 = v51 + 4 * v318;
      v338 = v42;
      do
      {
        if (v60 < v36)
        {
          v61 = *(float **)(v7 + 4208);
          v62 = v61[301];
          *(float *)v48.i32 = v61[303] + (float)((float)*(char *)(v313 + v320 + v312) * v62);
          v63 = vdupq_lane_s32(*(int32x2_t *)v48.i8, 0);
          *(float *)v48.i32 = v61[302] + (float)((float)*(char *)(v314 + v320 + v312) * v62);
          v48 = vdupq_lane_s32(*(int32x2_t *)v48.i8, 0);
          v324 = (__n128)v48;
          v325 = (__n128)v63;
          while (v60 < 8 * v320 + 8)
          {
            v48 = (int32x4_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v60), (uint64x2_t)vnegq_s64(v365));
            v349 = v48;
            v350 = v60 >> v366;
            v64 = *(unsigned __int8 *)(v330 + v60);
            v345 = (v64 >> 1) & 0xFFFFFFFEFFFFFFFFLL | ((v64 & 1) << 32);
            v65 = byte_23692665C[v64 >> 1];
            if ((v64 & 1) != 0)
            {
              v66 = 1 << byte_236921FC8[v64 >> 1];
              v67 = v66;
              v344 = v60;
              v337 = byte_23692665C[v64 >> 1];
              if ((v47 & 1) != 0)
              {
                if (v336)
                {
                  v68 = (char *)a3[1];
                  bzero(v68, 768 * v66);
                  for (i = 0; i != 3; ++i)
                  {
                    v348[i] = v68;
                    v68 += 256 * (uint64_t)v66;
                  }
                }
                else
                {
                  v71 = (char *)a3[2];
                  bzero(v71, 384 * v66);
                  for (j = 0; j != 3; ++j)
                  {
                    v348[j] = v71;
                    v71 += 128 * (uint64_t)v66;
                  }
                }
              }
              else
              {
                for (k = 0; k != 3; ++k)
                  v348[k] = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(v7 + 4480)
                                                                                                  + 24))(*(_QWORD *)(v7 + 4480), k, v46, v41);
              }
              v73 = (uint64_t)v66 << 6;
              v42 = v338;
              v343 = v73;
              result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 8))(a2, v60, v338, &v345);
              if ((_DWORD)result)
                return result;
              if (a7 != 1)
              {
                v74 = v46;
                v75 = v47;
                v76 = *a3;
                v327(&v345, *(unsigned int *)(v323 + 4 * v60), v345, v343, *(_QWORD *)(v7 + 4208) + 952, byte_23692665C[v345]* (unint64_t)byte_236926677[v345], &v349, &v352, v20, *(float *)(v7 + 4272), *(float *)(v7 + 4276), v324, v325, v328, v322, v348, *a3, a3[3]);
                v77 = 0;
                v346 = 1;
                v347 = 2;
                v335 = v67 << 8;
                v341 = v76;
                v331 = v76 + 32;
                v332 = v76 + 4;
                v47 = v75;
                v46 = v74;
                v45 = (float32x4_t *)v351;
                v340 = v41;
                do
                {
                  v78 = *((int *)&v346 + v77);
                  v79 = v349.i64[v78];
                  if (v79 << v365.i64[v78] == v344 && v44->i64[v78] << *(&v362 + v78) == v42)
                  {
                    v80 = v45->i64[v78];
                    v44 = (float32x4_t *)(v80 + 32 * v79);
                    v45 = (float32x4_t *)(v341 + 4 * v343 * v78);
                    v7 = v367[v78];
                    v81 = (float32x4_t *)a3[3];
                    switch((int)v345)
                    {
                      case 0:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[16];
                        v388[0].i64[0] = 8;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF1C0, (uint64_t)v388, (uint64_t)&v368, 8, (uint64_t)&v81[16]);
                        v388[0].i64[0] = 8;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DF630(v388, &v368);
                        v388[0].i64[0] = 8;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF1C0;
                        goto LABEL_97;
                      case 1:
                        v84 = 0;
                        v85 = v45->f32[0];
                        v86 = v45->f32[1];
                        v87 = v45[2].f32[0];
                        v88 = v45[2].f32[1];
                        v89 = v45->f32[0] + v86;
                        v388[0].f32[0] = (float)(v89 + v87) + v88;
                        v388[0].f32[1] = (float)(v89 - v87) - v88;
                        v90 = v85 - v86;
                        v388[0].f32[2] = (float)(v90 + v87) - v88;
                        v388[0].f32[3] = (float)(v90 - v87) + v88;
                        v91 = v80 + 32 * v79;
                        v92 = v341 + v335 * v78;
                        v93 = 1;
                        do
                        {
                          v94 = 0;
                          v95 = v93;
                          v96 = 2 * v84;
                          v97 = 8 * v84;
                          v98 = 1;
                          v99 = ((4 * v84) | 1) * v7 + 1;
                          v100 = 4 * v84 * v7;
                          v101 = v91 + 16 * v7 * v84;
                          v102 = v92 + 32 * v84;
                          do
                          {
                            v103 = 0;
                            v104 = v98;
                            v105 = v94 | v97;
                            v106 = (float *)(v102 + 4 * v94);
                            v107 = 0.0;
                            v108 = v106;
                            do
                            {
                              v109 = 0;
                              v110 = v108;
                              do
                              {
                                if (v109 | v103)
                                  v107 = v107 + *v110;
                                ++v109;
                                v110 += 2;
                              }
                              while (v109 != 4);
                              ++v103;
                              v108 += 16;
                            }
                            while (v103 != 4);
                            v111 = 0;
                            v112 = v94;
                            v113 = v99 + 4 * v94;
                            v44->f32[v113] = v388[0].f32[v94 | v96] + (float)(v107 * -0.0625);
                            v114 = v101 + 16 * v94;
                            do
                            {
                              v115 = 0;
                              v116 = v106;
                              do
                              {
                                if (v111 != 1 || v115 != 4)
                                  *(float *)(v114 + v115) = *v116 + v44->f32[v113];
                                v115 += 4;
                                v116 += 2;
                              }
                              while (v115 != 16);
                              ++v111;
                              v114 += 4 * v7;
                              v106 += 16;
                            }
                            while (v111 != 4);
                            v98 = 0;
                            v44[v112].f32[v100] = *(float *)((char *)v45->f32 + ((4 * v105) | 0x48)) + v44->f32[v113];
                            v94 = 1;
                          }
                          while ((v104 & 1) != 0);
                          v93 = 0;
                          v84 = 1;
                        }
                        while ((v95 & 1) != 0);
                        v7 = v339;
                        v41 = v340;
                        v42 = v338;
                        v44 = (float32x4_t *)v355;
                        v45 = (float32x4_t *)v351;
                        break;
                      case 2:
                        v117 = 0;
                        v380 = v45[12];
                        v381 = v45[13];
                        v382 = v45[14];
                        v383 = v45[15];
                        v376 = v45[8];
                        v377 = v45[9];
                        v378 = v45[10];
                        v379 = v45[11];
                        v372 = v45[4];
                        v373 = v45[5];
                        v374 = v45[6];
                        v375 = v45[7];
                        v368 = *v45;
                        v369 = v45[1];
                        v370 = v45[2];
                        v371 = v45[3];
                        v118 = (float)((float)(v368.f32[0] + v368.f32[1]) - v370.f32[0]) - v370.f32[1];
                        *(float *)&v119 = (float)((float)(v368.f32[0] - v368.f32[1]) + v370.f32[0]) - v370.f32[1];
                        *(float *)&v120 = (float)((float)(v368.f32[0] - v368.f32[1]) - v370.f32[0]) + v370.f32[1];
                        v368.f32[0] = (float)((float)(v368.f32[0] + v368.f32[1]) + v370.f32[0]) + v370.f32[1];
                        v368.f32[1] = v118;
                        v370.i64[0] = __PAIR64__(v120, v119);
                        v121 = 1;
                        v45 = (float32x4_t *)v351;
                        do
                        {
                          v122 = 0;
                          v123 = v121;
                          v124 = 8 * v117;
                          v125 = 16 * v117;
                          v126 = 1;
                          do
                          {
                            v127 = v126;
                            v128 = 4 * (v122 | v124);
                            v129 = v368.f32[v128 / 4];
                            v130 = *(float *)((char *)v368.f32 + (v128 | 8));
                            v131 = *(float *)((char *)v368.f32 + (v128 | 0x40));
                            v132 = *(float *)((char *)v368.f32 + (v128 | 0x48));
                            v133 = (float)((float)(v129 + v130) + v131) + v132;
                            v134 = (float)((float)(v129 + v130) - v131) - v132;
                            v135 = v129 - v130;
                            v136 = (8 * v122) | (4 * v125);
                            *(float *)((char *)v388[0].f32 + v136) = v133;
                            *(float *)((char *)v388[0].f32 + (v136 | 4)) = v134;
                            *(float *)((char *)v388[0].f32 + (v136 | 0x20)) = (float)(v135 + v131) - v132;
                            *(float *)((char *)v388[0].f32 + (v136 | 0x24)) = (float)(v135 - v131) + v132;
                            v122 = 1;
                            v126 = 0;
                          }
                          while ((v127 & 1) != 0);
                          v121 = 0;
                          v117 = 1;
                        }
                        while ((v123 & 1) != 0);
                        for (m = 0; m != 8; m += 2)
                          *(float32x4_t *)((char *)&v368 + m * 16) = v388[m];
                        v138 = 0;
                        v139 = &v376;
                        do
                        {
                          v140 = v139[-8];
                          v141 = v139[-7];
                          v142 = *v139;
                          v143 = v139[1];
                          v139 += 2;
                          v144 = vaddq_f32(v140, v141);
                          v390.val[0] = vaddq_f32(vaddq_f32(v144, v142), v143);
                          v390.val[1] = vsubq_f32(vsubq_f32(v144, v142), v143);
                          v145 = vsubq_f32(v140, v141);
                          v391.val[0] = vsubq_f32(vaddq_f32(v145, v142), v143);
                          v146 = &v388[v138];
                          vst2q_f32(v146->f32, v390);
                          v146 += 2;
                          v391.val[1] = vaddq_f32(vsubq_f32(v145, v142), v143);
                          vst2q_f32(v146->f32, v391);
                          v138 += 4;
                        }
                        while (v138 != 16);
                        v147 = 0;
                        v380 = v388[12];
                        v381 = v388[13];
                        v382 = v388[14];
                        v383 = v388[15];
                        v376 = v388[8];
                        v377 = v388[9];
                        v378 = v388[10];
                        v379 = v388[11];
                        v372 = v388[4];
                        v373 = v388[5];
                        v374 = v388[6];
                        v375 = v388[7];
                        v368 = v388[0];
                        v369 = v388[1];
                        v370 = v388[2];
                        v371 = v388[3];
                        do
                        {
                          *v44 = *(float32x4_t *)((char *)&v368 + v147);
                          v48 = *(int32x4_t *)((char *)&v368 + v147 + 16);
                          v44[1] = (float32x4_t)v48;
                          v147 += 32;
                          v44 = (float32x4_t *)((char *)v44 + 4 * v7);
                        }
                        while (v147 != 256);
                        v7 = v339;
                        v44 = (float32x4_t *)v355;
                        break;
                      case 3:
                        v148 = 0;
                        v149 = v45->f32[0];
                        v150 = v45->f32[1];
                        v151 = v45[2].f32[0];
                        v152 = v45[2].f32[1];
                        v153 = v45->f32[0] + v150;
                        v368.f32[0] = (float)(v153 + v151) + v152;
                        v368.f32[1] = (float)(v153 - v151) - v152;
                        v154 = v149 - v150;
                        v368.f32[2] = (float)(v154 + v151) - v152;
                        v368.f32[3] = (float)(v154 - v151) + v152;
                        v155 = v341 + v335 * v78;
                        v156 = 1;
                        do
                        {
                          v157 = 0;
                          v158 = v156;
                          v159 = 2 * v148;
                          v160 = &v44->i8[4 * 4 * v7 * v148];
                          v161 = v155 + 32 * v148;
                          v162 = 1;
                          do
                          {
                            v163 = 0;
                            v164 = v162;
                            v388[0].i32[0] = v368.i32[v157 | v159];
                            v165 = (__int32 *)(v161 + 4 * v157);
                            v166 = v388;
                            do
                            {
                              v167 = 0;
                              v168 = v165;
                              do
                              {
                                if (v167 | v163)
                                  v166->i32[v167] = *v168;
                                ++v167;
                                v168 += 2;
                              }
                              while (v167 != 4);
                              ++v163;
                              ++v166;
                              v165 += 16;
                            }
                            while (v163 != 4);
                            sub_2367DEFD0((uint64_t)v388, v7, (uint64_t)&v160[16 * v157], (uint64_t)v81);
                            v162 = 0;
                            v157 = 1;
                          }
                          while ((v164 & 1) != 0);
                          v156 = 0;
                          v148 = 1;
                        }
                        while ((v158 & 1) != 0);
                        goto LABEL_124;
                      case 4:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[64];
                        v388[0].i64[0] = 16;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF06C, (uint64_t)v388, (uint64_t)&v368, 16, (uint64_t)&v81[64]);
                        v388[0].i64[0] = 16;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DF0D8(v388, &v368);
                        v388[0].i64[0] = 16;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF06C;
                        goto LABEL_105;
                      case 5:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[256];
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF4E0, (uint64_t)v388, (uint64_t)&v368, 32, (uint64_t)&v81[256]);
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 32, 32);
                        v388[0].i64[0] = 32;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF4E0;
                        goto LABEL_234;
                      case 6:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[32];
                        v388[0].i64[0] = 16;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF1C0, (uint64_t)v388, (uint64_t)&v368, 16, (uint64_t)&v81[32]);
                        v388[0].i64[0] = 16;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DF22C(v388, &v368);
                        v388[0].i64[0] = 8;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF06C;
                        goto LABEL_97;
                      case 7:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[32];
                        v388[0].i64[0] = 16;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DF22C(v388, &v368);
                        v388[0].i64[0] = 8;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF06C, (uint64_t)v388, (uint64_t)&v368, 8, (uint64_t)&v81[32]);
                        v388[0].i64[0] = 8;
                        v42 = v338;
                        v388[0].i64[1] = (uint64_t)v45;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DF314(v388, &v368);
                        v388[0].i64[0] = 16;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v81;
                        v83 = sub_2367DF1C0;
                        goto LABEL_105;
                      case 8:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[64];
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF1C0, (uint64_t)v388, (uint64_t)&v368, 32, (uint64_t)&v81[64]);
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DF3F8(v388, &v368);
                        v388[0].i64[0] = 8;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF4E0;
LABEL_97:
                        v169 = 8;
                        goto LABEL_245;
                      case 9:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 8;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DF3F8(v388, &v368);
                        v388[0].i64[0] = 8;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 8;
                        v41 = v340;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF4E0, (uint64_t)v388, (uint64_t)&v368, 8, (uint64_t)&v81[64]);
                        v170 = 0;
                        v44 = (float32x4_t *)v355;
                        do
                        {
                          v171 = 0;
                          v172 = 1;
                          v173 = &v81[v170 / 4];
                          do
                          {
                            v174 = v172;
                            v175 = (int32x4_t)v45[2 * v170 + v171];
                            v176 = *(int32x4_t *)((char *)&v45[v171] + ((32 * v170) | 0x20));
                            v177 = *(int32x4_t *)((char *)&v45[v171] + ((32 * v170) | 0x40));
                            v178 = *(int32x4_t *)((char *)&v45[v171] + ((32 * v170) | 0x60));
                            v179 = (float32x2x2_t)vzip1q_s32(v175, v177);
                            v180 = vzip1q_s32(v176, v178);
                            v181 = (float32x2x2_t)vzip2q_s32(v175, v177);
                            v182 = vzip2q_s32(v176, v178);
                            f32 = v173[2 * v171].f32;
                            v184 = (v171 * 4) << 7;
                            vst2_f32(f32, v179);
                            *(int32x4_t *)((char *)v173 + (v184 | 0x80)) = vzip2q_s32((int32x4_t)v179, v180);
                            v185 = (float *)((char *)v173->f32 + (v184 | 0x100));
                            vst2_f32(v185, v181);
                            *(int32x4_t *)((char *)v173 + (v184 | 0x180)) = vzip2q_s32((int32x4_t)v181, v182);
                            v171 = 1;
                            v172 = 0;
                          }
                          while ((v174 & 1) != 0);
                          v186 = v170 >= 0x1C;
                          v170 += 4;
                        }
                        while (!v186);
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF1C0, (uint64_t)v388, (uint64_t)&v386, 32, (uint64_t)&v81[64]);
                        v7 = v339;
                        v45 = (float32x4_t *)v351;
                        goto LABEL_231;
                      case 10:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[128];
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF06C, (uint64_t)v388, (uint64_t)&v368, 32, (uint64_t)&v81[128]);
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 16, 32);
                        v388[0].i64[0] = 16;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF4E0;
LABEL_105:
                        v169 = 16;
                        goto LABEL_245;
                      case 11:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[128];
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 16, 32);
                        v388[0].i64[0] = 16;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 16;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF4E0, (uint64_t)v388, (uint64_t)&v368, 16, (uint64_t)&v81[128]);
                        v388[0].i64[0] = 16;
                        v42 = v338;
                        v388[0].i64[1] = (uint64_t)v45;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 32, 16);
                        v388[0].i64[0] = 32;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v81;
                        v83 = sub_2367DF06C;
                        goto LABEL_234;
                      case 12:
                        v187 = 0;
                        v188 = v45[2].f32[0];
                        v189 = v45->f32[0] - v188;
                        *(float *)&v386 = v45->f32[0] + v188;
                        *((float *)&v386 + 1) = v189;
                        v190 = v341 + v335 * v78;
                        v191 = 1;
                        v45 = (float32x4_t *)v351;
                        do
                        {
                          v192 = 0;
                          v193 = v191;
                          v388[0].i32[0] = *((_DWORD *)&v386 + v187);
                          v194 = v190 + 32 * v187;
                          v195 = v388;
                          do
                          {
                            for (n = 0; n != 8; ++n)
                            {
                              if (n | v192)
                                v195->i32[n] = *(_DWORD *)(v194 + 4 * n);
                            }
                            ++v192;
                            v195 += 2;
                            v194 += 64;
                          }
                          while (v192 != 4);
                          v368.i64[0] = v7;
                          v368.i64[1] = (uint64_t)v44->i64 + 4 * 4 * v7 * v187;
                          sub_2367DEF28(v388, (uint64_t)&v368, v81);
                          v191 = 0;
                          v187 = 1;
                        }
                        while ((v193 & 1) != 0);
                        v46 = a5;
                        v7 = v339;
                        v41 = v340;
                        goto LABEL_230;
                      case 13:
                        v197 = 0;
                        v198 = v45[2].f32[0];
                        v199 = v45->f32[0] - v198;
                        *(float *)&v384 = v45->f32[0] + v198;
                        *((float *)&v384 + 1) = v199;
                        v200 = v341 + v335 * v78;
                        v201 = 1;
                        do
                        {
                          v202 = 0;
                          v203 = v201;
                          v388[0].i32[0] = *((_DWORD *)&v384 + v197);
                          v204 = v200 + 32 * v197;
                          v205 = v388;
                          do
                          {
                            for (ii = 0; ii != 8; ++ii)
                            {
                              if (ii | v202)
                                v205->i32[ii] = *(_DWORD *)(v204 + 4 * ii);
                            }
                            ++v202;
                            v205 += 2;
                            v204 += 64;
                          }
                          while (v202 != 4);
                          v368.i64[0] = 8;
                          v368.i64[1] = (uint64_t)v388;
                          v207 = &v44[v197];
                          v386 = 8;
                          v387 = v81;
                          sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DECCC, (uint64_t)&v368, (uint64_t)&v386, 8, (uint64_t)&v81[8]);
                          v368.i64[0] = 8;
                          v368.i64[1] = (uint64_t)v81;
                          v386 = 4;
                          v387 = v388;
                          sub_2367DED50(&v368, &v386);
                          sub_2367DEDF8(v388, 4, v207, v7, v81 + 8);
                          v201 = 0;
                          v197 = 1;
                        }
                        while ((v203 & 1) != 0);
LABEL_124:
                        v46 = a5;
                        v7 = v339;
                        v41 = v340;
                        v47 = v321;
                        v42 = v338;
                        v44 = (float32x4_t *)v355;
                        v45 = (float32x4_t *)v351;
                        goto LABEL_231;
                      case 14:
                        v208 = 0;
                        v209 = v45->f32[0];
                        v210 = v45->f32[1];
                        v211 = v45[2].f32[0];
                        v212 = v45->f32[0] + v211;
                        *(float *)&v386 = (float)(v210 + v212) * 4.0;
                        v213 = &v386;
                        do
                        {
                          v214 = 0;
                          v215 = v45;
                          do
                          {
                            if (v214 | v208)
                              *((_DWORD *)v213 + v214) = v215->i32[0];
                            ++v214;
                            v215 = (float32x4_t *)((char *)v215 + 8);
                          }
                          while (v214 != 4);
                          ++v208;
                          v213 += 2;
                          v45 += 4;
                        }
                        while (v208 != 4);
                        v216 = 0;
                        v217 = (float32x4_t *)&unk_2369217E0;
                        v45 = (float32x4_t *)v351;
                        do
                        {
                          v218 = 0;
                          v219 = 0uLL;
                          do
                          {
                            v219 = vmlaq_n_f32(v219, v217[v218], *(float *)((char *)&v386 + v218));
                            v218 += 4;
                          }
                          while (v218 != 64);
                          *(float32x4_t *)((char *)&v368 + 4 * v216) = v219;
                          ++v217;
                          v186 = v216 >= 0xC;
                          v216 += 4;
                        }
                        while (!v186);
                        v220 = 0;
                        v221 = v44;
                        do
                        {
                          *v221 = *(float32x4_t *)((char *)&v368 + v220);
                          v220 += 16;
                          v221 = (float32x4_t *)((char *)v221 + 4 * v7);
                        }
                        while (v220 != 64);
                        v222 = 0;
                        v368.f32[0] = v212 - v210;
                        v223 = v335 * v78;
                        v224 = (__int32 *)(v332 + v335 * v78);
                        v225 = &v368;
                        do
                        {
                          v226 = 0;
                          v227 = v224;
                          do
                          {
                            if (v226 | v222)
                              v225->i32[v226] = *v227;
                            ++v226;
                            v227 += 2;
                          }
                          while (v226 != 4);
                          ++v222;
                          ++v225;
                          v224 += 16;
                        }
                        while (v222 != 4);
                        v228 = v209 - v211;
                        v229 = &v368;
                        sub_2367DEFD0((uint64_t)&v368, v7, (uint64_t)&v44[1], (uint64_t)v388);
                        v230 = 0;
                        v368.f32[0] = v228;
                        v231 = v331 + v223;
                        v41 = v340;
                        do
                        {
                          for (jj = 0; jj != 8; ++jj)
                          {
                            if (jj | v230)
                              v229->i32[jj] = *(_DWORD *)(v231 + 4 * jj);
                          }
                          ++v230;
                          v229 += 2;
                          v231 += 64;
                        }
                        while (v230 != 4);
                        v384 = v7;
                        v385 = &v44[v7];
                        sub_2367DEF28(&v368, (uint64_t)&v384, v388);
                        v42 = v338;
                        v7 = v339;
                        v44 = (float32x4_t *)v355;
                        goto LABEL_231;
                      case 15:
                        v233 = 0;
                        v234 = v45->f32[0];
                        v235 = v45->f32[1];
                        v236 = v45[2].f32[0];
                        v237 = v45->f32[0] + v236;
                        *(float *)&v386 = (float)(v235 + v237) * 4.0;
                        v238 = &v386;
                        do
                        {
                          v239 = 0;
                          v240 = v45;
                          do
                          {
                            if (v239 | v233)
                              *((_DWORD *)v238 + v239) = v240->i32[0];
                            ++v239;
                            v240 = (float32x4_t *)((char *)v240 + 8);
                          }
                          while (v239 != 4);
                          ++v233;
                          v238 += 2;
                          v45 += 4;
                        }
                        while (v233 != 4);
                        v241 = 0;
                        v242 = (float32x4_t *)&unk_2369217E0;
                        v45 = (float32x4_t *)v351;
                        do
                        {
                          v243 = 0;
                          v244 = 0uLL;
                          do
                          {
                            v244 = vmlaq_n_f32(v244, v242[v243], *(float *)((char *)&v386 + v243));
                            v243 += 4;
                          }
                          while (v243 != 64);
                          *(float32x4_t *)((char *)&v368 + 4 * v241) = v244;
                          ++v242;
                          v186 = v241 >= 0xC;
                          v241 += 4;
                        }
                        while (!v186);
                        v245 = 0;
                        v246 = (int8x16_t *)(v80 + 32 * v79 + 16);
                        do
                        {
                          v247 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v368 + v245));
                          *v246 = vextq_s8(v247, v247, 8uLL);
                          v245 += 16;
                          v246 = (int8x16_t *)((char *)v246 + 4 * v7);
                        }
                        while (v245 != 64);
                        v248 = 0;
                        v368.f32[0] = v237 - v235;
                        v249 = v335 * v78;
                        v250 = (__int32 *)(v332 + v335 * v78);
                        v251 = &v368;
                        do
                        {
                          v252 = 0;
                          v253 = v250;
                          do
                          {
                            if (v252 | v248)
                              v251->i32[v252] = *v253;
                            ++v252;
                            v253 += 2;
                          }
                          while (v252 != 4);
                          ++v248;
                          ++v251;
                          v250 += 16;
                        }
                        while (v248 != 4);
                        v254 = v234 - v236;
                        v255 = &v368;
                        sub_2367DEFD0((uint64_t)&v368, v7, (uint64_t)v44, (uint64_t)v388);
                        v256 = 0;
                        v368.f32[0] = v254;
                        v257 = v331 + v249;
                        v41 = v340;
                        do
                        {
                          for (kk = 0; kk != 8; ++kk)
                          {
                            if (kk | v256)
                              v255->i32[kk] = *(_DWORD *)(v257 + 4 * kk);
                          }
                          ++v256;
                          v255 += 2;
                          v257 += 64;
                        }
                        while (v256 != 4);
                        v384 = v7;
                        v385 = &v44[v7];
                        goto LABEL_229;
                      case 16:
                        v259 = 0;
                        v260 = v45->f32[0];
                        v261 = v45->f32[1];
                        v262 = v45[2].f32[0];
                        v263 = v45->f32[0] + v262;
                        *(float *)&v386 = (float)(v261 + v263) * 4.0;
                        v264 = &v386;
                        do
                        {
                          v265 = 0;
                          v266 = v45;
                          do
                          {
                            if (v265 | v259)
                              *((_DWORD *)v264 + v265) = v266->i32[0];
                            ++v265;
                            v266 = (float32x4_t *)((char *)v266 + 8);
                          }
                          while (v265 != 4);
                          ++v259;
                          v264 += 2;
                          v45 += 4;
                        }
                        while (v259 != 4);
                        v267 = 0;
                        v268 = (float32x4_t *)&unk_2369217E0;
                        v45 = (float32x4_t *)v351;
                        do
                        {
                          v269 = 0;
                          v270 = 0uLL;
                          do
                          {
                            v270 = vmlaq_n_f32(v270, v268[v269], *(float *)((char *)&v386 + v269));
                            v269 += 4;
                          }
                          while (v269 != 64);
                          *(float32x4_t *)((char *)&v368 + 4 * v267) = v270;
                          ++v268;
                          v186 = v267 >= 0xC;
                          v267 += 4;
                        }
                        while (!v186);
                        v271 = (float32x4_t *)(v80 + 32 * v79 + 16 * v7);
                        for (mm = 48; mm != -16; mm -= 16)
                        {
                          *v271 = *(float32x4_t *)((char *)&v368 + mm);
                          v271 = (float32x4_t *)((char *)v271 + 4 * v7);
                        }
                        v273 = 0;
                        v368.f32[0] = v263 - v261;
                        v274 = v335 * v78;
                        v275 = (__int32 *)(v332 + v335 * v78);
                        v276 = &v368;
                        do
                        {
                          v277 = 0;
                          v278 = v275;
                          do
                          {
                            if (v277 | v273)
                              v276->i32[v277] = *v278;
                            ++v277;
                            v278 += 2;
                          }
                          while (v277 != 4);
                          ++v273;
                          ++v276;
                          v275 += 16;
                        }
                        while (v273 != 4);
                        v279 = v260 - v262;
                        v280 = &v368;
                        sub_2367DEFD0((uint64_t)&v368, v7, (uint64_t)&v44[v7 + 1], (uint64_t)v388);
                        v281 = 0;
                        v368.f32[0] = v279;
                        v282 = v331 + v274;
                        v41 = v340;
                        do
                        {
                          for (nn = 0; nn != 8; ++nn)
                          {
                            if (nn | v281)
                              v280->i32[nn] = *(_DWORD *)(v282 + 4 * nn);
                          }
                          ++v281;
                          v280 += 2;
                          v282 += 64;
                        }
                        while (v281 != 4);
                        goto LABEL_228;
                      case 17:
                        v284 = 0;
                        v285 = v45->f32[0];
                        v286 = v45->f32[1];
                        v287 = v45[2].f32[0];
                        v288 = v45->f32[0] + v287;
                        *(float *)&v386 = (float)(v286 + v288) * 4.0;
                        v289 = &v386;
                        do
                        {
                          v290 = 0;
                          v291 = v45;
                          do
                          {
                            if (v290 | v284)
                              *((_DWORD *)v289 + v290) = v291->i32[0];
                            ++v290;
                            v291 = (float32x4_t *)((char *)v291 + 8);
                          }
                          while (v290 != 4);
                          ++v284;
                          v289 += 2;
                          v45 += 4;
                        }
                        while (v284 != 4);
                        v292 = 0;
                        v293 = (float32x4_t *)&unk_2369217E0;
                        v45 = (float32x4_t *)v351;
                        do
                        {
                          v294 = 0;
                          v295 = 0uLL;
                          do
                          {
                            v295 = vmlaq_n_f32(v295, v293[v294], *(float *)((char *)&v386 + v294));
                            v294 += 4;
                          }
                          while (v294 != 64);
                          *(float32x4_t *)((char *)&v368 + 4 * v292) = v295;
                          ++v293;
                          v186 = v292 >= 0xC;
                          v292 += 4;
                        }
                        while (!v186);
                        v296 = (int8x16_t *)(v80 + 32 * v79 + 16 * v7 + 16);
                        for (i1 = 48; i1 != -16; i1 -= 16)
                        {
                          v298 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v368 + i1));
                          *v296 = vextq_s8(v298, v298, 8uLL);
                          v296 = (int8x16_t *)((char *)v296 + 4 * v7);
                        }
                        v299 = 0;
                        v368.f32[0] = v288 - v286;
                        v300 = v335 * v78;
                        v301 = (__int32 *)(v332 + v335 * v78);
                        v302 = &v368;
                        do
                        {
                          v303 = 0;
                          v304 = v301;
                          do
                          {
                            if (v303 | v299)
                              v302->i32[v303] = *v304;
                            ++v303;
                            v304 += 2;
                          }
                          while (v303 != 4);
                          ++v299;
                          ++v302;
                          v301 += 16;
                        }
                        while (v299 != 4);
                        v305 = v285 - v287;
                        v306 = &v368;
                        sub_2367DEFD0((uint64_t)&v368, v7, (uint64_t)&v44[v7], (uint64_t)v388);
                        v307 = 0;
                        v368.f32[0] = v305;
                        v308 = v331 + v300;
                        v41 = v340;
                        do
                        {
                          for (i2 = 0; i2 != 8; ++i2)
                          {
                            if (i2 | v307)
                              v306->i32[i2] = *(_DWORD *)(v308 + 4 * i2);
                          }
                          ++v307;
                          v306 += 2;
                          v308 += 64;
                        }
                        while (v307 != 4);
LABEL_228:
                        v384 = v7;
                        v385 = v44;
LABEL_229:
                        sub_2367DEF28(&v368, (uint64_t)&v384, v388);
                        v7 = v339;
LABEL_230:
                        v42 = v338;
                        v44 = (float32x4_t *)v355;
LABEL_231:
                        v60 = v344;
                        break;
                      case 18:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[1024];
                        v388[0].i64[0] = 64;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF718, (uint64_t)v388, (uint64_t)&v368, 64, (uint64_t)&v81[1024]);
                        v388[0].i64[0] = 64;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 64, 64);
                        v388[0].i64[0] = 64;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF718;
                        goto LABEL_238;
                      case 19:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[512];
                        v388[0].i64[0] = 64;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF4E0, (uint64_t)v388, (uint64_t)&v368, 64, (uint64_t)&v81[512]);
                        v388[0].i64[0] = 64;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 32, 64);
                        v388[0].i64[0] = 32;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF718;
LABEL_234:
                        v169 = 32;
                        goto LABEL_245;
                      case 20:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[512];
                        v388[0].i64[0] = 64;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 32, 64);
                        v388[0].i64[0] = 32;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 32;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF718, (uint64_t)v388, (uint64_t)&v368, 32, (uint64_t)&v81[512]);
                        v388[0].i64[0] = 32;
                        v42 = v338;
                        v388[0].i64[1] = (uint64_t)v45;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 64, 32);
                        v388[0].i64[0] = 64;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v81;
                        v83 = sub_2367DF4E0;
                        goto LABEL_238;
                      case 21:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[4096];
                        v388[0].i64[0] = 128;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF784, (uint64_t)v388, (uint64_t)&v368, 128, (uint64_t)&v81[4096]);
                        v388[0].i64[0] = 128;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 128, 128);
                        v388[0].i64[0] = 128;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF784;
                        goto LABEL_242;
                      case 22:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[2048];
                        v388[0].i64[0] = 128;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF718, (uint64_t)v388, (uint64_t)&v368, 128, (uint64_t)&v81[2048]);
                        v388[0].i64[0] = 128;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 64, 128);
                        v388[0].i64[0] = 64;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF784;
LABEL_238:
                        v169 = 64;
                        goto LABEL_245;
                      case 23:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[2048];
                        v388[0].i64[0] = 128;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 64, 128);
                        v388[0].i64[0] = 64;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 64;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF784, (uint64_t)v388, (uint64_t)&v368, 64, (uint64_t)&v81[2048]);
                        v388[0].i64[0] = 64;
                        v42 = v338;
                        v388[0].i64[1] = (uint64_t)v45;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 128, 64);
                        v388[0].i64[0] = 128;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v81;
                        v83 = sub_2367DF718;
                        goto LABEL_242;
                      case 24:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[0x4000];
                        v388[0].i64[0] = 256;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 256;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF7F0, (uint64_t)v388, (uint64_t)&v368, 256, (uint64_t)&v81[0x4000]);
                        v388[0].i64[0] = 256;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 256;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 256, 256);
                        v388[0].i64[0] = 256;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF7F0;
                        goto LABEL_244;
                      case 25:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[0x2000];
                        v388[0].i64[0] = 256;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 256;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF784, (uint64_t)v388, (uint64_t)&v368, 256, (uint64_t)&v81[0x2000]);
                        v388[0].i64[0] = 256;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 128, 256);
                        v388[0].i64[0] = 128;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v45;
                        v83 = sub_2367DF7F0;
LABEL_242:
                        v169 = 128;
                        goto LABEL_245;
                      case 26:
                        v386 = v367[v78];
                        v387 = (float32x4_t *)(v80 + 32 * v79);
                        v82 = (uint64_t)&v81[0x2000];
                        v388[0].i64[0] = 256;
                        v388[0].i64[1] = v341 + 4 * v343 * v78;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 128, 256);
                        v388[0].i64[0] = 128;
                        v388[0].i64[1] = (uint64_t)v81;
                        v368.i64[0] = 128;
                        v368.i64[1] = (uint64_t)v45;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF7F0, (uint64_t)v388, (uint64_t)&v368, 128, (uint64_t)&v81[0x2000]);
                        v388[0].i64[0] = 128;
                        v42 = v338;
                        v388[0].i64[1] = (uint64_t)v45;
                        v368.i64[0] = 256;
                        v368.i64[1] = (uint64_t)v81;
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)v388, (uint64_t)&v368, 256, 128);
                        v388[0].i64[0] = 256;
                        v41 = v340;
                        v388[0].i64[1] = (uint64_t)v81;
                        v83 = sub_2367DF784;
LABEL_244:
                        v169 = 256;
LABEL_245:
                        sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v83, (uint64_t)v388, (uint64_t)&v386, v169, v82);
                        v60 = v344;
                        v7 = v339;
                        v44 = (float32x4_t *)v355;
                        v45 = (float32x4_t *)v351;
                        break;
                      default:
                        break;
                    }
                  }
                  ++v77;
                }
                while (v77 != 3);
              }
              v41 += v343;
              v36 = v329;
              v65 = v337;
            }
            v60 += v65;
            if (v60 >= v36)
              break;
          }
        }
        ++v320;
      }
      while (v320 != v315);
    }
    result = 0;
    ++v42;
  }
  while (v42 != v310);
  return result;
}

void sub_2367DE8F0(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int8x16_t a14, double a15, int32x2_t a16, uint64_t a17, unsigned __int32 *a18, int16x4_t **a19, float32x4_t *a20,float32x4_t *a21)
{
  int32x2_t v21;
  float32x4_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int16x4_t *v29;
  int16x4_t *v30;
  int16x4_t *v31;
  const float *v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  uint64_t v57;
  uint64_t v58;

  v25 = a20;
  if (a6 << 6)
  {
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 32) + 4 * *(_QWORD *)(*(_QWORD *)(a5 + 64) + 24 * a3 + 72);
    *(float *)&a9 = *(float *)&a9 / (float)a2;
    *(float *)&a11 = *(float *)&a9 * *(float *)&a11;
    *(float *)&a10 = *(float *)&a9 * *(float *)&a10;
    v29 = *a19;
    v30 = a19[1];
    v31 = a19[2];
    a14.i32[0] = *a18;
    a16.i32[0] = a18[1];
    a14 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
    v32 = (const float *)(a18 + 3);
    v33 = vld1q_dup_f32(v32);
    v34 = vnegq_f32(v33);
    v35 = (int8x16_t)vdupq_lane_s32(a16, 0);
    v21.i32[0] = a18[2];
    v36 = (int8x16_t)vdupq_lane_s32(v21, 0);
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    __asm { FMOV            V18.4S, #1.125 }
    do
    {
      v43 = *v29++;
      v44 = v43;
      v45 = *v30++;
      v46 = v45;
      v47 = *v31++;
      v48 = vcvtq_f32_s32(vmovl_s16(v44));
      v49 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v50 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + v26), *(float *)&a10), (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)vmlaq_f32(v48, vrecpeq_f32(v48), v34), v49), vandq_s8(veorq_s8(a14, vandq_s8((int8x16_t)v48, v37)), vandq_s8(v49, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))))));
      v51 = vcvtq_f32_s32(vmovl_s16(v46));
      v52 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v53 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 4 * a4 + v26), *(float *)&a9), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v35, vandq_s8((int8x16_t)v51, v37)), vandq_s8(v52, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v51, vrecpeq_f32(v51), v34), v52)));
      v54 = vcvtq_f32_s32(vmovl_s16(v47));
      v55 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v56 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 8 * a4 + v26), *(float *)&a11), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v36, vandq_s8((int8x16_t)v54, v37)), vandq_s8(v55, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v54, vrecpeq_f32(v54), v34), v55)));
      a20[v26 / 0x10] = vmlaq_f32(v50, v53, a12);
      *(float32x4_t *)((char *)a20 + 4 * a4 + v26) = v53;
      *(float32x4_t *)((char *)a20 + 8 * a4 + v26) = vmlaq_f32(v56, v53, a13);
      v27 += 4;
      v26 += 16;
    }
    while (v27 < a6 << 6);
  }
  v57 = 0;
  v58 = 4 * a4;
  do
  {
    sub_2367DFF9C(*a1, (float32x2_t *)(*(_QWORD *)(a8 + v57) + 4 * *(_QWORD *)(a7 + v57)), a17, v25, a21, a9, a10, a11, *(double *)a12.i64, *(double *)a13.i64, *(double *)a14.i64);
    v57 += 8;
    v25 = (float32x4_t *)((char *)v25 + v58);
  }
  while (v57 != 24);
}

void sub_2367DEAE4(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, int8x16_t a14, double a15, int32x2_t a16, uint64_t a17, unsigned __int32 *a18, uint64_t *a19, float32x4_t *a20,float32x4_t *a21)
{
  int32x2_t v21;
  float32x4_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const float *v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;

  v25 = a20;
  if (a6 << 6)
  {
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 32) + 4 * *(_QWORD *)(*(_QWORD *)(a5 + 64) + 24 * a3 + 72);
    *(float *)&a9 = *(float *)&a9 / (float)a2;
    *(float *)&a11 = *(float *)&a9 * *(float *)&a11;
    *(float *)&a10 = *(float *)&a9 * *(float *)&a10;
    v29 = *a19;
    v30 = a19[1];
    v31 = a19[2];
    a14.i32[0] = *a18;
    a16.i32[0] = a18[1];
    a14 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a14.i8, 0);
    v32 = (const float *)(a18 + 3);
    v33 = vld1q_dup_f32(v32);
    v34 = vnegq_f32(v33);
    v35 = (int8x16_t)vdupq_lane_s32(a16, 0);
    v21.i32[0] = a18[2];
    v36 = (int8x16_t)vdupq_lane_s32(v21, 0);
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    __asm { FMOV            V18.4S, #1.125 }
    do
    {
      v43 = vcvtq_f32_s32(*(int32x4_t *)(v29 + v26));
      v44 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v45 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + v26), *(float *)&a10), (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)vmlaq_f32(v43, vrecpeq_f32(v43), v34), v44), vandq_s8(veorq_s8(a14, vandq_s8((int8x16_t)v43, v37)), vandq_s8(v44, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))))));
      v46 = vcvtq_f32_s32(*(int32x4_t *)(v30 + v26));
      v47 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v48 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 4 * a4 + v26), *(float *)&a9), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v35, vandq_s8((int8x16_t)v46, v37)), vandq_s8(v47, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v46, vrecpeq_f32(v46), v34), v47)));
      v49 = vcvtq_f32_s32(*(int32x4_t *)(v31 + v26));
      v50 = (int8x16_t)vcgtq_f32(_Q18, (float32x4_t)(*(_OWORD *)&v49 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v51 = vmulq_f32(vmulq_n_f32(*(float32x4_t *)(v28 + 8 * a4 + v26), *(float *)&a11), (float32x4_t)vorrq_s8(vandq_s8(veorq_s8(v36, vandq_s8((int8x16_t)v49, v37)), vandq_s8(v50, (int8x16_t)vcgtzq_f32((float32x4_t)(*(_OWORD *)&v49 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))), vbicq_s8((int8x16_t)vmlaq_f32(v49, vrecpeq_f32(v49), v34), v50)));
      a20[v26 / 0x10] = vmlaq_f32(v45, v48, a12);
      *(float32x4_t *)((char *)a20 + 4 * a4 + v26) = v48;
      *(float32x4_t *)((char *)a20 + 8 * a4 + v26) = vmlaq_f32(v51, v48, a13);
      v27 += 4;
      v26 += 16;
    }
    while (v27 < a6 << 6);
  }
  v52 = 0;
  v53 = 4 * a4;
  do
  {
    sub_2367DFF9C(*a1, (float32x2_t *)(*(_QWORD *)(a8 + v52) + 4 * *(_QWORD *)(a7 + v52)), a17, v25, a21, a9, a10, a11, *(double *)a12.i64, *(double *)a13.i64, *(double *)a14.i64);
    v52 += 8;
    v25 = (float32x4_t *)((char *)v25 + v53);
  }
  while (v52 != 24);
}

void sub_2367DECCC(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFE40((float32x4_t *)(a1[1] + v8), *a1, a2[1] + v8, *a2, a4);
      v8 += 16;
    }
  }
}

uint64_t sub_2367DED38(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1(a2, a3, a4, a5);
}

int32x4_t sub_2367DED50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  int32x4_t *v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  float32x2x2_t v8;
  float32x2x2_t v9;
  int32x4_t v10;
  float *v11;
  int32x4_t v12;
  float *v13;
  char v14;
  int32x4_t result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = (int32x4_t *)(a1[1] + 4 * v2);
    v5 = *(int32x4_t *)((char *)v4 + 4 * *a1);
    v6 = *(int32x4_t *)((char *)v4 + 8 * *a1);
    v7 = *(int32x4_t *)((char *)v4 + 12 * *a1);
    v8 = (float32x2x2_t)vzip1q_s32(*v4, v6);
    v9 = (float32x2x2_t)vzip2q_s32(*v4, v6);
    v10 = vzip1q_s32(v5, v7);
    v11 = (float *)(a2[1] + 4 * *a2 * v2);
    vst2_f32(v11, v8);
    *(int32x4_t *)(a2[1] + 4 * *a2 * (v2 | 1)) = vzip2q_s32((int32x4_t)v8, v10);
    v12 = vzip2q_s32(v5, v7);
    v13 = (float *)(a2[1] + 4 * *a2 * (v2 | 2));
    v14 = v3;
    vst2_f32(v13, v9);
    result = vzip2q_s32((int32x4_t)v9, v12);
    *(int32x4_t *)(a2[1] + 4 * *a2 * (v2 | 3)) = result;
    v2 = 4;
    v3 = 0;
  }
  while ((v14 & 1) != 0);
  return result;
}

float32_t sub_2367DEDF8(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t i;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;

  v8 = 0;
  v9 = 8 * a2;
  v10 = a1;
  do
  {
    a5[v8++] = *v10;
    v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 4);
  v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (i = 4; i != 8; ++i)
  {
    a5[i] = *v11;
    v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_2367DFE40(a5, 4, (uint64_t)a5, 4, a5 + 8);
  v13 = 0;
  v14 = a5 + 4;
  do
  {
    a5[v13 + 7] = vaddq_f32(a5[v13 + 7], a5[v13 + 6]);
    --v13;
  }
  while (v13 != -3);
  *v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_2367DFE40(v14, 4, (uint64_t)&a5[4], 4, a5 + 8);
  v16 = 0;
  v17 = (float32x4_t *)((char *)a3 + 28 * a4);
  do
  {
    v15.f32[0] = flt_2368AFB50[v16];
    v18 = &a5[v16];
    v19 = v18[4];
    v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *v17 = v20;
    ++v16;
    v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 4);
  return v15.f32[0];
}

uint64_t sub_2367DEF28(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t *v6;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t *v11;

  v6 = a3 + 8;
  v10 = 8;
  v11 = a1;
  v8 = 4;
  v9 = a3;
  sub_2367DED50(&v10, &v8);
  sub_2367DEDF8(a3, 4, a1, 4, v6);
  v10 = 4;
  v11 = a1;
  v8 = 8;
  v9 = a3;
  sub_2367DFEEC(&v10, &v8);
  v10 = 8;
  v11 = a3;
  return sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DECCC, (uint64_t)&v10, a2, 8, (uint64_t)v6);
}

float32_t sub_2367DEFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x4_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  float32x2x2_t v12;
  int32x4_t v13;
  float32x2x2_t v14;
  int32x4_t v15;
  float *v16;
  float *v17;

  v8 = (float32x4_t *)(a4 + 64);
  sub_2367DFE40((float32x4_t *)a1, 4, a4, 4, (float32x4_t *)(a4 + 64));
  v9 = *(int32x4_t *)(a4 + 16);
  v10 = *(int32x4_t *)(a4 + 32);
  v11 = *(int32x4_t *)(a4 + 48);
  v12 = (float32x2x2_t)vzip1q_s32(*(int32x4_t *)a4, v10);
  v13 = vzip1q_s32(v9, v11);
  v14 = (float32x2x2_t)vzip2q_s32(*(int32x4_t *)a4, v10);
  v15 = vzip2q_s32(v9, v11);
  v16 = (float *)a1;
  vst2_f32(v16, v12);
  v16 += 4;
  *(int32x4_t *)v16 = vzip2q_s32((int32x4_t)v12, v13);
  v17 = (float *)(a1 + 32);
  vst2_f32(v17, v14);
  *(int32x4_t *)(a1 + 48) = vzip2q_s32((int32x4_t)v14, v15);
  return sub_2367DFE40((float32x4_t *)a1, 4, a3, a2, v8);
}

void sub_2367DF06C(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFD10((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

_QWORD *sub_2367DF0D8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  int32x4_t v19;
  float32x2x2_t v20;
  float *v21;
  uint64_t v22;
  int32x4_t v23;
  float *v24;
  BOOL v25;

  v2 = 0;
  v3 = 0;
  v4 = 12;
  v5 = 8;
  v6 = 4;
  do
  {
    v7 = 0;
    v8 = -4;
    do
    {
      v9 = result[1];
      v10 = *(int32x4_t *)(v9 + v2 * *result + v7);
      v11 = *(int32x4_t *)(v9 + v6 * *result + v7);
      v12 = *(int32x4_t *)(v9 + v5 * *result + v7);
      v13 = v8 + 5;
      v14 = v8 + 6;
      v15 = v8 + 7;
      v16 = v8 + 4;
      v17 = *(int32x4_t *)(v9 + v4 * *result + v7);
      v18 = (float32x2x2_t)vzip1q_s32(v10, v12);
      v19 = vzip1q_s32(v11, v17);
      v20 = (float32x2x2_t)vzip2q_s32(v10, v12);
      v21 = (float *)(a2[1] + 4 * *a2 * (v8 + 4) + 4 * v3);
      vst2_f32(v21, v18);
      v22 = 4 * v3;
      *(int32x4_t *)(a2[1] + 4 * *a2 * v13 + v22) = vzip2q_s32((int32x4_t)v18, v19);
      v23 = vzip2q_s32(v11, v17);
      v24 = (float *)(a2[1] + 4 * *a2 * v14 + 4 * v3);
      vst2_f32(v24, v20);
      *(int32x4_t *)(a2[1] + 4 * *a2 * v15 + v22) = vzip2q_s32((int32x4_t)v20, v23);
      v7 += 16;
      v8 = v16;
    }
    while (v16 < 0xC);
    v4 += 16;
    v5 += 16;
    v6 += 16;
    v2 += 16;
    v25 = v3 >= 0xC;
    v3 += 4;
  }
  while (!v25);
  return result;
}

void sub_2367DF1C0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DEDF8((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

_QWORD *sub_2367DF22C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int32x4_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  float *v19;
  uint64_t v20;
  int32x4_t v21;
  float *v22;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = -4;
    do
    {
      v7 = result[1];
      v8 = *(int32x4_t *)(v7 + 4 * *result * v2 + v4);
      v9 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 1) + v4);
      v10 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 2) + v4);
      v11 = v6 + 5;
      v12 = v6 + 6;
      v13 = v6 + 7;
      v14 = v6 + 4;
      v15 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 3) + v4);
      v16 = (float32x2x2_t)vzip1q_s32(v8, v10);
      v17 = vzip1q_s32(v9, v15);
      v18 = (float32x2x2_t)vzip2q_s32(v8, v10);
      v19 = (float *)(a2[1] + 4 * *a2 * (v6 + 4) + 4 * v2);
      vst2_f32(v19, v16);
      v20 = 4 * v2;
      *(int32x4_t *)(a2[1] + 4 * *a2 * v11 + v20) = vzip2q_s32((int32x4_t)v16, v17);
      v21 = vzip2q_s32(v9, v15);
      v22 = (float *)(a2[1] + 4 * *a2 * v12 + 4 * v2);
      vst2_f32(v22, v18);
      *(int32x4_t *)(a2[1] + 4 * *a2 * v13 + v20) = vzip2q_s32((int32x4_t)v18, v21);
      v4 += 16;
      v6 = v14;
    }
    while (v14 < 0xC);
    v3 = 0;
    v2 = 4;
  }
  while ((v5 & 1) != 0);
  return result;
}

_QWORD *sub_2367DF314(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x2x2_t v10;
  int32x4_t v11;
  float *v12;
  uint64_t v13;
  float32x2x2_t v14;
  int32x4_t v15;
  float *v16;
  char v17;
  BOOL v18;

  v2 = 0;
  do
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = result[1];
      v6 = *(int32x4_t *)(v5 + 4 * *result * v2 + 4 * v3);
      v7 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 1) + 4 * v3);
      v8 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 2) + 4 * v3);
      v9 = *(int32x4_t *)(v5 + 4 * *result * (v2 | 3) + 4 * v3);
      v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v11 = vzip1q_s32(v7, v9);
      v12 = (float *)(a2[1] + 4 * *a2 * v3 + 4 * v2);
      v13 = 4 * v2;
      v14 = (float32x2x2_t)vzip2q_s32(v6, v8);
      vst2_f32(v12, v10);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 1) + v13) = vzip2q_s32((int32x4_t)v10, v11);
      v15 = vzip2q_s32(v7, v9);
      v16 = (float *)(a2[1] + 4 * *a2 * (v3 | 2) + 4 * v2);
      v17 = v4;
      vst2_f32(v16, v14);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v3 | 3) + v13) = vzip2q_s32((int32x4_t)v14, v15);
      v3 = 4;
      v4 = 0;
    }
    while ((v17 & 1) != 0);
    v18 = v2 >= 0xC;
    v2 += 4;
  }
  while (!v18);
  return result;
}

_QWORD *sub_2367DF3F8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int32x4_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  float *v19;
  uint64_t v20;
  int32x4_t v21;
  float *v22;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = -4;
    do
    {
      v7 = result[1];
      v8 = *(int32x4_t *)(v7 + 4 * *result * v2 + v4);
      v9 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 1) + v4);
      v10 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 2) + v4);
      v11 = v6 + 5;
      v12 = v6 + 6;
      v13 = v6 + 7;
      v14 = v6 + 4;
      v15 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 3) + v4);
      v16 = (float32x2x2_t)vzip1q_s32(v8, v10);
      v17 = vzip1q_s32(v9, v15);
      v18 = (float32x2x2_t)vzip2q_s32(v8, v10);
      v19 = (float *)(a2[1] + 4 * *a2 * (v6 + 4) + 4 * v2);
      vst2_f32(v19, v16);
      v20 = 4 * v2;
      *(int32x4_t *)(a2[1] + 4 * *a2 * v11 + v20) = vzip2q_s32((int32x4_t)v16, v17);
      v21 = vzip2q_s32(v9, v15);
      v22 = (float *)(a2[1] + 4 * *a2 * v12 + 4 * v2);
      vst2_f32(v22, v18);
      *(int32x4_t *)(a2[1] + 4 * *a2 * v13 + v20) = vzip2q_s32((int32x4_t)v18, v21);
      v4 += 16;
      v6 = v14;
    }
    while (v14 < 0x1C);
    v3 = 0;
    v2 = 4;
  }
  while ((v5 & 1) != 0);
  return result;
}

void sub_2367DF4E0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFBE0((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

_QWORD *sub_2367DF54C(_QWORD *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float32x2x2_t v18;
  int32x4_t v19;
  float *v20;
  uint64_t v21;
  float *v22;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 12;
    v7 = 8;
    v8 = 4;
    do
    {
      if (a4)
      {
        v9 = 0;
        for (i = 0; i < a4; i += 4)
        {
          v11 = result[1];
          v12 = *(int32x4_t *)(v11 + v4 * *result + v9);
          v13 = *(int32x4_t *)(v11 + v8 * *result + v9);
          v14 = *(int32x4_t *)(v11 + v7 * *result + v9);
          v15 = *(int32x4_t *)(v11 + v6 * *result + v9);
          v16 = (float32x2x2_t)vzip1q_s32(v12, v14);
          v17 = vzip1q_s32(v13, v15);
          v18 = (float32x2x2_t)vzip2q_s32(v12, v14);
          v19 = vzip2q_s32(v13, v15);
          v20 = (float *)(a2[1] + 4 * *a2 * i + 4 * v5);
          v21 = 4 * v5;
          vst2_f32(v20, v16);
          *(int32x4_t *)(a2[1] + 4 * (*a2 + *a2 * i) + v21) = vzip2q_s32((int32x4_t)v16, v17);
          v22 = (float *)(a2[1] + 4 * *a2 * (i + 2) + 4 * v5);
          vst2_f32(v22, v18);
          *(int32x4_t *)(a2[1] + 4 * *a2 * (i + 3) + v21) = vzip2q_s32((int32x4_t)v18, v19);
          v9 += 16;
        }
      }
      v5 += 4;
      v6 += 16;
      v7 += 16;
      v8 += 16;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

_QWORD *sub_2367DF630(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  float32x2x2_t v12;
  int32x4_t v13;
  float *v14;
  uint64_t v15;
  float32x2x2_t v16;
  int32x4_t v17;
  float *v18;
  char v19;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = 1;
    do
    {
      v7 = result[1];
      v8 = *(int32x4_t *)(v7 + 4 * *result * v2 + 4 * v4);
      v9 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 1) + 4 * v4);
      v10 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 2) + 4 * v4);
      v11 = *(int32x4_t *)(v7 + 4 * *result * (v2 | 3) + 4 * v4);
      v12 = (float32x2x2_t)vzip1q_s32(v8, v10);
      v13 = vzip1q_s32(v9, v11);
      v14 = (float *)(a2[1] + 4 * *a2 * v4 + 4 * v2);
      v15 = 4 * v2;
      v16 = (float32x2x2_t)vzip2q_s32(v8, v10);
      vst2_f32(v14, v12);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v4 | 1) + v15) = vzip2q_s32((int32x4_t)v12, v13);
      v17 = vzip2q_s32(v9, v11);
      v18 = (float *)(a2[1] + 4 * *a2 * (v4 | 2) + 4 * v2);
      v19 = v6;
      vst2_f32(v18, v16);
      *(int32x4_t *)(a2[1] + 4 * *a2 * (v4 | 3) + v15) = vzip2q_s32((int32x4_t)v16, v17);
      v4 = 4;
      v6 = 0;
    }
    while ((v19 & 1) != 0);
    v3 = 0;
    v2 = 4;
  }
  while ((v5 & 1) != 0);
  return result;
}

void sub_2367DF718(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DFAB0((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_2367DF784(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t i;

  if (a3)
  {
    v8 = 0;
    for (i = 0; i < a3; i += 4)
    {
      sub_2367DF97C((float32x4_t *)(a1[1] + v8), *a1, (float32x4_t *)(a2[1] + v8), *a2, a4);
      v8 += 16;
    }
  }
}

void sub_2367DF7F0(uint64_t *a1, uint64_t *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t j;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = a4 + 256;
    v10 = a4 + 128;
    v27 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v11 = 0;
      v13 = *a1;
      v12 = a1[1];
      v14 = *a2;
      v15 = a2[1];
      v16 = (float32x4_t *)(v12 + v7);
      v17 = 8 * *a1;
      do
      {
        a4[v11++] = *v16;
        v16 = (float32x4_t *)((char *)v16 + v17);
      }
      while (v11 != 128);
      v18 = v12 + 4 * v13;
      for (i = 128; i != 256; ++i)
      {
        a4[i] = *(float32x4_t *)(v18 + v7);
        v18 += v17;
      }
      sub_2367DF97C(a4, 4, a4, 4, v9);
      for (j = 0; j != -127; --j)
        a4[j + 255] = vaddq_f32(a4[j + 255], a4[j + 254]);
      *v10 = vmulq_f32(*v10, v27);
      sub_2367DF97C(v10, 4, v10, 4, v9);
      v22 = 0;
      v23 = v15 + 1020 * v14;
      do
      {
        v21.i32[0] = dword_236922D50[v22];
        v24 = &a4[v22];
        v25 = v24[128];
        v26 = vmlsq_lane_f32(*v24, v25, v21, 0);
        *(float32x4_t *)(v15 + v7) = vmlaq_n_f32(*v24, v25, v21.f32[0]);
        *(float32x4_t *)(v23 + v7) = v26;
        ++v22;
        v23 -= 4 * v14;
        v15 += 4 * v14;
      }
      while (v22 != 128);
      v8 += 4;
      v7 += 16;
    }
    while (v8 < a3);
  }
}

float32_t sub_2367DF97C(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t i;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;

  v8 = 0;
  v9 = 8 * a2;
  v10 = a1;
  do
  {
    a5[v8++] = *v10;
    v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 64);
  v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (i = 64; i != 128; ++i)
  {
    a5[i] = *v11;
    v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_2367DFAB0(a5, 4, a5, 4, a5 + 128);
  v13 = 0;
  v14 = a5 + 64;
  do
  {
    a5[v13 + 127] = vaddq_f32(a5[v13 + 127], a5[v13 + 126]);
    --v13;
  }
  while (v13 != -63);
  *v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_2367DFAB0(v14, 4, a5 + 64, 4, a5 + 128);
  v16 = 0;
  v17 = (float32x4_t *)((char *)a3 + 508 * a4);
  do
  {
    v15.i32[0] = dword_236922C50[v16];
    v18 = &a5[v16];
    v19 = v18[64];
    v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *v17 = v20;
    ++v16;
    v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 64);
  return v15.f32[0];
}

float32_t sub_2367DFAB0(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t i;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;

  v8 = 0;
  v9 = 8 * a2;
  v10 = a1;
  do
  {
    a5[v8++] = *v10;
    v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 32);
  v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (i = 32; i != 64; ++i)
  {
    a5[i] = *v11;
    v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_2367DFBE0(a5, 4, a5, 4, a5 + 64);
  v13 = 0;
  v14 = a5 + 32;
  do
  {
    a5[v13 + 63] = vaddq_f32(a5[v13 + 63], a5[v13 + 62]);
    --v13;
  }
  while (v13 != -31);
  *v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_2367DFBE0(v14, 4, a5 + 32, 4, a5 + 64);
  v16 = 0;
  v17 = (float32x4_t *)((char *)a3 + 252 * a4);
  do
  {
    v15.i32[0] = dword_236922BD0[v16];
    v18 = &a5[v16];
    v19 = v18[32];
    v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *v17 = v20;
    ++v16;
    v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 32);
  return v15.f32[0];
}

float32_t sub_2367DFBE0(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t i;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;

  v8 = 0;
  v9 = 8 * a2;
  v10 = a1;
  do
  {
    a5[v8++] = *v10;
    v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 16);
  v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (i = 16; i != 32; ++i)
  {
    a5[i] = *v11;
    v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_2367DFD10(a5, 4, a5, 4, a5 + 32);
  v13 = 0;
  v14 = a5 + 16;
  do
  {
    a5[v13 + 31] = vaddq_f32(a5[v13 + 31], a5[v13 + 30]);
    --v13;
  }
  while (v13 != -15);
  *v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_2367DFD10(v14, 4, a5 + 16, 4, a5 + 32);
  v16 = 0;
  v17 = (float32x4_t *)((char *)a3 + 124 * a4);
  do
  {
    v15.f32[0] = flt_23692278C[v16];
    v18 = &a5[v16];
    v19 = v18[16];
    v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *v17 = v20;
    ++v16;
    v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 16);
  return v15.f32[0];
}

float32_t sub_2367DFD10(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t i;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;

  v8 = 0;
  v9 = 8 * a2;
  v10 = a1;
  do
  {
    a5[v8++] = *v10;
    v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v8 != 8);
  v11 = (float32x4_t *)((char *)a1 + 4 * a2);
  for (i = 8; i != 16; ++i)
  {
    a5[i] = *v11;
    v11 = (float32x4_t *)((char *)v11 + v9);
  }
  sub_2367DEDF8(a5, 4, a5, 4, a5 + 16);
  v13 = 0;
  v14 = a5 + 8;
  do
  {
    a5[v13 + 15] = vaddq_f32(a5[v13 + 15], a5[v13 + 14]);
    --v13;
  }
  while (v13 != -7);
  *v14 = vmulq_f32(*v14, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  sub_2367DEDF8(v14, 4, a5 + 8, 4, a5 + 16);
  v16 = 0;
  v17 = (float32x4_t *)((char *)a3 + 60 * a4);
  do
  {
    v15.f32[0] = flt_23692276C[v16];
    v18 = &a5[v16];
    v19 = v18[8];
    v20 = vmlsq_lane_f32(*v18, v19, v15, 0);
    *a3 = vmlaq_n_f32(*v18, v19, v15.f32[0]);
    *v17 = v20;
    ++v16;
    v17 = (float32x4_t *)((char *)v17 - 4 * a4);
    a3 = (float32x4_t *)((char *)a3 + 4 * a4);
  }
  while (v16 != 8);
  return v15.f32[0];
}

float32_t sub_2367DFE40(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  char v15;
  char v16;
  float32x4_t v17;
  float32x4_t v18;

  v5 = 0;
  v6 = *(float32x4_t *)((char *)a1 + 8 * a2);
  v7 = *(float32x4_t *)((char *)a1 + 4 * a2);
  v8 = *(float32x4_t *)((char *)a1 + 12 * a2);
  v9 = vaddq_f32(*a1, v6);
  v10 = vsubq_f32(*a1, v6);
  *a5 = v9;
  a5[1] = v10;
  v11 = vaddq_f32(v7, v8);
  v12 = vmulq_f32(v7, (float32x4_t)vdupq_n_s32(0x3FB504F3u));
  v13 = vaddq_f32(v12, v11);
  v14 = vsubq_f32(v12, v11);
  a5[2] = v13;
  a5[3] = v14;
  v15 = 1;
  do
  {
    v16 = v15;
    v14.i32[0] = dword_2368B04B8[v5];
    v17 = *(float32x4_t *)((char *)a5 + ((16 * v5) | 0x20));
    v18 = vmlsq_lane_f32(a5[v5], v17, *(float32x2_t *)v14.f32, 0);
    *(float32x4_t *)(a3 + 4 * v5 * a4) = vmlaq_n_f32(a5[v5], v17, v14.f32[0]);
    *(float32x4_t *)(a3 + 4 * (v5 ^ 3) * a4) = v18;
    v5 = 1;
    v15 = 0;
  }
  while ((v16 & 1) != 0);
  return v14.f32[0];
}

int32x4_t sub_2367DFEEC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  char v9;
  float32x2x2_t v10;
  int32x4_t v11;
  float32x2x2_t v12;
  int32x4_t v13;
  int32x4_t result;
  float *v15;
  uint64_t v16;
  float *v17;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = a1[1];
    v5 = *(int32x4_t *)(v4 + 4 * *a1 * v2);
    v6 = *(int32x4_t *)(v4 + 4 * *a1 * (v2 | 1));
    v7 = *(int32x4_t *)(v4 + 4 * *a1 * (v2 | 2));
    v8 = *(int32x4_t *)(v4 + 4 * *a1 * (v2 | 3));
    v9 = v3;
    v10 = (float32x2x2_t)vzip1q_s32(v5, v7);
    v11 = vzip1q_s32(v6, v8);
    v12 = (float32x2x2_t)vzip2q_s32(v5, v7);
    v13 = vzip2q_s32(v6, v8);
    result = vzip2q_s32((int32x4_t)v10, v11);
    v15 = (float *)(a2[1] + 4 * v2);
    v16 = 4 * v2;
    vst2_f32(v15, v10);
    *(int32x4_t *)(a2[1] + 4 * *a2 + v16) = result;
    v17 = (float *)(a2[1] + 8 * *a2 + 4 * v2);
    vst2_f32(v17, v12);
    *(int32x4_t *)(a2[1] + 12 * *a2 + v16) = vzip2q_s32((int32x4_t)v12, v13);
    v2 = 4;
    v3 = 0;
  }
  while ((v9 & 1) != 0);
  return result;
}

void sub_2367DFF9C(int a1, float32x2_t *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x4_t *v11;
  float32x4_t *v12;
  float32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2x2_t v20;
  int32x4_t v21;
  float32x2x2_t v22;
  int32x4_t v23;
  float32x4_t *v24;
  float *v25;
  uint64_t i;
  float32x2_t v27;
  float32_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  char v32;
  char v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t j;
  uint64_t v47;
  const float *v48;
  float32x4_t v49;
  uint64_t k;
  uint64_t v51;
  const float *v52;
  float32x4_t v53;
  uint64_t m;
  uint64_t v55;
  const float *v56;
  float32x4_t v57;
  uint64_t n;
  uint64_t v59;
  const float *v60;
  float32x4_t v61;
  uint64_t ii;
  uint64_t v63;
  const float *v64;
  float32x4_t v65;
  uint64_t jj;
  uint64_t v67;
  const float *v68;
  float32x4_t v69;
  uint64_t kk;
  uint64_t v71;
  const float *v72;
  float32x4_t v73;
  uint64_t mm;
  uint64_t v75;
  const float *v76;
  float32x4_t v77;
  uint64_t nn;
  uint64_t v79;
  const float *v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  float32x4_t v88[12];
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  uint64_t v93;
  float32x4x2_t v94;
  float32x4x2_t v95;

  v93 = *MEMORY[0x24BDAC8D0];
  v11 = a5;
  v12 = a4;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      a4->i32[0] = a2->i32[0];
      break;
    case 4:
      v13 = *(float32x2_t *)((char *)a2 + 4 * a3);
      v14 = (int32x2_t)vmul_f32(vadd_f32(*a2, v13), (float32x2_t)0x3F0000003F000000);
      v15 = (int32x2_t)vmul_f32(vsub_f32(*a2, v13), (float32x2_t)0x3F0000003F000000);
      v16 = (float32x2_t)vzip1_s32(v14, v15);
      v17 = (float32x2_t)vzip2_s32(v14, v15);
      v18 = vmul_f32(vadd_f32(v16, v17), (float32x2_t)0x3F0000003F000000);
      v19 = vmul_f32(vsub_f32(v16, v17), (float32x2_t)0x3F0000003F000000);
      a4->i32[0] = v18.i32[0];
      a4->f32[1] = vmuls_lane_f32(1.1089, v18, 1);
      a4[4].f32[0] = 1.1089 * v19.f32[0];
      a4[4].f32[1] = vmuls_lane_f32(1.1089, v19, 1) * 1.1089;
      break;
    case 5:
      v82 = 4;
      v83 = (float32x4_t *)&v89;
      sub_2367E0C18(a3, (float32x4_t *)a2, &v82, v88);
      v20 = (float32x2x2_t)vzip1q_s32(v89, v91);
      v21 = vzip1q_s32(v90, v92);
      v22 = (float32x2x2_t)vzip2q_s32(v89, v91);
      v23 = vzip2q_s32(v90, v92);
      v24 = &v84;
      vst2_f32(v24->f32, v20);
      *(int32x4_t *)++v24 = vzip2q_s32((int32x4_t)v20, v21);
      v25 = (float *)&v86;
      vst2_f32(v25, v22);
      v87 = vzip2q_s32((int32x4_t)v22, v23);
      v82 = 4;
      v83 = (float32x4_t *)&v89;
      sub_2367E0C18(4, &v84, &v82, v88);
      for (i = 0; i != 4; ++i)
      {
        *v12 = vmulq_f32(vmulq_n_f32(*((float32x4_t *)&v89 + i), *((float *)&xmmword_2368AF5E0 + i)), (float32x4_t)xmmword_2368AF5E0);
        v12 += 8;
      }
      break;
    case 6:
      LODWORD(a6) = a2->i32[0];
      LODWORD(a7) = a2->i32[a3];
      v27 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a7), (int32x2_t)vsub_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a7)), (float32x2_t)0x3F0000003F000000);
      a4->i32[0] = v27.i32[0];
      a4->f32[1] = vmuls_lane_f32(1.1089, v27, 1);
      break;
    case 7:
      v28 = (float)(0.5 * vsub_f32(*a2, (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1)).f32[0]) * 1.1089;
      a4->f32[0] = vaddv_f32(*a2) * 0.5;
      a4->f32[1] = v28;
      break;
    case 8:
      v82 = 1;
      v83 = (float32x4_t *)&v89;
      sub_2367E0A9C(a3, a2, &v82, (uint64_t)&v85, a6, a7, a8, a9, a10, a11);
      v84 = (float32x4_t)v89;
      v29 = (float32x4_t)v89;
      goto LABEL_12;
    case 9:
      v84 = *(float32x4_t *)a2->f32;
      v85 = v84;
      v89 = (int32x4_t)v84;
      v82 = 1;
      v83 = &v84;
      sub_2367E0A9C(1, &v89, &v82, (uint64_t)&v85, *(double *)v84.i64, a7, a8, a9, a10, a11);
      v89 = (int32x4_t)v84;
      v29 = v84;
LABEL_12:
      *v12 = vmulq_f32(v29, (float32x4_t)xmmword_2368AF5E0);
      break;
    case 10:
      v82 = 2;
      v83 = (float32x4_t *)&v89;
      sub_2367E0B5C(a3, a2, &v82, (float32x2_t *)&v86);
      v30 = 0;
      v94 = vld2q_f32((const float *)v89.i32);
      v31 = vaddq_f32(v94.val[0], v94.val[1]);
      v94.val[0] = vsubq_f32(v94.val[0], v94.val[1]);
      v94.val[1].i64[0] = 0x3F0000003F000000;
      v94.val[1].i64[1] = 0x3F0000003F000000;
      v89 = (int32x4_t)vmulq_f32(v31, v94.val[1]);
      v90 = (int32x4_t)vmulq_f32(v94.val[0], v94.val[1]);
      v32 = 1;
      do
      {
        v33 = v32;
        v12[8 * v30] = vmulq_f32(vmulq_n_f32(*((float32x4_t *)&v89 + v30), flt_2368B04B0[v30]), (float32x4_t)xmmword_2368AF5E0);
        v30 = 1;
        v32 = 0;
      }
      while ((v33 & 1) != 0);
      break;
    case 11:
      v34 = 0;
      v35 = *(float32x4_t *)&a2->f32[a3];
      v36 = vaddq_f32(*(float32x4_t *)a2->f32, v35);
      v37 = vsubq_f32(*(float32x4_t *)a2->f32, v35);
      v35.i64[0] = 0x3F0000003F000000;
      v35.i64[1] = 0x3F0000003F000000;
      v84 = vmulq_f32(v36, v35);
      v85 = vmulq_f32(v37, v35);
      v86 = v36;
      v87 = (int32x4_t)v37;
      v38 = 1;
      do
      {
        v39 = 0;
        v40 = v38;
        v41 = v34;
        v42 = &v84 + v34;
        do
        {
          v89.i32[v41] = v42->i32[v39++];
          v41 += 2;
        }
        while (v39 != 4);
        v38 = 0;
        v34 = 1;
      }
      while ((v40 & 1) != 0);
      v82 = 2;
      v83 = &v84;
      sub_2367E0B5C(2, (float32x2_t *)&v89, &v82, (float32x2_t *)&v86);
      v43 = 0;
      v95 = vld2q_f32(v84.f32);
      v89 = (int32x4_t)v95.val[0];
      v90 = (int32x4_t)v95.val[1];
      v44 = 1;
      do
      {
        v45 = v44;
        v12[8 * v43] = vmulq_f32(vmulq_n_f32(*((float32x4_t *)&v89 + v43), flt_2368B04B0[v43]), (float32x4_t)xmmword_2368AF5E0);
        v43 = 1;
        v44 = 0;
      }
      while ((v45 & 1) != 0);
      break;
    case 18:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0E30, (uint64_t)&v82, (uint64_t)&v84, 8, (uint64_t)&a5[32]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)&v11[16];
      sub_2367DF630(&v84, &v89);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[16];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0E30, (uint64_t)&v84, (uint64_t)&v89, 8, (uint64_t)&v11[32]);
      for (j = 0; j != 8; ++j)
      {
        v47 = 0;
        v48 = (const float *)xmmword_23691FCF8 + j;
        v49 = vld1q_dup_f32(v48);
        do
        {
          v12[v47] = vmulq_f32(vmulq_f32(v11[v47], v49), (float32x4_t)xmmword_23691FCF8[v47]);
          ++v47;
        }
        while (v47 != 2);
        v12 += 16;
        v11 += 2;
      }
      break;
    case 19:
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)a5;
      sub_2367E0CD4(a3, (float32x4_t *)a2, &v84, a5 + 16);
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)&v11[8];
      sub_2367DFEEC(&v84, &v89);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[8];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0D4C, (uint64_t)&v84, (uint64_t)&v89, 8, (uint64_t)&v11[16]);
      for (k = 0; k != 4; ++k)
      {
        v51 = 0;
        v52 = (const float *)&xmmword_2368AF5E0 + k;
        v53 = vld1q_dup_f32(v52);
        do
        {
          v12[v51] = vmulq_f32(vmulq_f32(v11[v51], v53), (float32x4_t)xmmword_23691FCF8[v51]);
          ++v51;
        }
        while (v51 != 2);
        v12 += 16;
        v11 += 2;
      }
      break;
    case 20:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&a5[8];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0D4C, (uint64_t)&v82, (uint64_t)&v84, 8, (uint64_t)&a5[16]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[8];
      v89.i64[0] = 4;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED50(&v84, &v89);
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)&v11[8];
      sub_2367E0CD4(4, v11, &v84, v11 + 16);
      v84.i64[0] = 4;
      v84.i64[1] = (uint64_t)&v11[8];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DFEEC(&v84, &v89);
      for (m = 0; m != 4; ++m)
      {
        v55 = 0;
        v56 = (const float *)&xmmword_2368AF5E0 + m;
        v57 = vld1q_dup_f32(v56);
        do
        {
          v12[v55] = vmulq_f32(vmulq_f32(v11[v55], v57), (float32x4_t)xmmword_23691FCF8[v55]);
          ++v55;
        }
        while (v55 != 2);
        v12 += 16;
        v11 += 2;
      }
      break;
    case 21:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0EF4, (uint64_t)&v82, (uint64_t)&v84, 16, (uint64_t)&a5[128]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)&v11[64];
      sub_2367DF0D8(&v84, &v89);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[64];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0EF4, (uint64_t)&v84, (uint64_t)&v89, 16, (uint64_t)&v11[128]);
      for (n = 0; n != 16; ++n)
      {
        v59 = 0;
        v60 = (const float *)xmmword_23691FD18 + n;
        v61 = vld1q_dup_f32(v60);
        do
        {
          v12[v59] = vmulq_f32(vmulq_f32(v11[v59], v61), (float32x4_t)xmmword_23691FD18[v59]);
          ++v59;
        }
        while (v59 != 4);
        v12 += 32;
        v11 += 4;
      }
      break;
    case 22:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0EF4, (uint64_t)&v82, (uint64_t)&v84, 8, (uint64_t)&a5[64]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)&v11[32];
      sub_2367DF314(&v84, &v89);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[32];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0E30, (uint64_t)&v84, (uint64_t)&v89, 16, (uint64_t)&v11[64]);
      for (ii = 0; ii != 8; ++ii)
      {
        v63 = 0;
        v64 = (const float *)xmmword_23691FCF8 + ii;
        v65 = vld1q_dup_f32(v64);
        do
        {
          v12[v63] = vmulq_f32(vmulq_f32(v11[v63], v65), (float32x4_t)xmmword_23691FD18[v63]);
          ++v63;
        }
        while (v63 != 4);
        v12 += 32;
        v11 += 4;
      }
      break;
    case 23:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&a5[32];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0E30, (uint64_t)&v82, (uint64_t)&v84, 16, (uint64_t)&a5[64]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[32];
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DF22C(&v84, &v89);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 8;
      v89.i64[1] = (uint64_t)&v11[32];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0EF4, (uint64_t)&v84, (uint64_t)&v89, 8, (uint64_t)&v11[64]);
      v84.i64[0] = 8;
      v84.i64[1] = (uint64_t)&v11[32];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DF314(&v84, &v89);
      for (jj = 0; jj != 8; ++jj)
      {
        v67 = 0;
        v68 = (const float *)xmmword_23691FCF8 + jj;
        v69 = vld1q_dup_f32(v68);
        do
        {
          v12[v67] = vmulq_f32(vmulq_f32(v11[v67], v69), (float32x4_t)xmmword_23691FD18[v67]);
          ++v67;
        }
        while (v67 != 4);
        v12 += 32;
        v11 += 4;
      }
      break;
    case 24:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0FCC, (uint64_t)&v82, (uint64_t)&v84, 32, (uint64_t)&a5[512]);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)&v11[256];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)&v84, (uint64_t)&v89, 32, 32);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&v11[256];
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0FCC, (uint64_t)&v84, (uint64_t)&v89, 32, (uint64_t)&v11[512]);
      for (kk = 0; kk != 32; ++kk)
      {
        v71 = 0;
        v72 = (const float *)xmmword_23691FD58 + kk;
        v73 = vld1q_dup_f32(v72);
        do
        {
          v12[v71] = vmulq_f32(vmulq_f32(v11[v71], v73), (float32x4_t)xmmword_23691FD58[v71]);
          ++v71;
        }
        while (v71 != 8);
        v12 += 64;
        v11 += 8;
      }
      break;
    case 25:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)a5;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0FCC, (uint64_t)&v82, (uint64_t)&v84, 16, (uint64_t)&a5[256]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)&v11[128];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)&v84, (uint64_t)&v89, 32, 16);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&v11[128];
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0EF4, (uint64_t)&v84, (uint64_t)&v89, 32, (uint64_t)&v11[256]);
      for (mm = 0; mm != 16; ++mm)
      {
        v75 = 0;
        v76 = (const float *)xmmword_23691FD18 + mm;
        v77 = vld1q_dup_f32(v76);
        do
        {
          v12[v75] = vmulq_f32(vmulq_f32(v11[v75], v77), (float32x4_t)xmmword_23691FD58[v75]);
          ++v75;
        }
        while (v75 != 8);
        v12 += 64;
        v11 += 8;
      }
      break;
    case 26:
      v82 = a3;
      v83 = (float32x4_t *)a2;
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&a5[128];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0EF4, (uint64_t)&v82, (uint64_t)&v84, 32, (uint64_t)&a5[256]);
      v84.i64[0] = 32;
      v84.i64[1] = (uint64_t)&v11[128];
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)&v84, (uint64_t)&v89, 16, 32);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)v11;
      v89.i64[0] = 16;
      v89.i64[1] = (uint64_t)&v11[128];
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367E0FCC, (uint64_t)&v84, (uint64_t)&v89, 16, (uint64_t)&v11[256]);
      v84.i64[0] = 16;
      v84.i64[1] = (uint64_t)&v11[128];
      v89.i64[0] = 32;
      v89.i64[1] = (uint64_t)v11;
      sub_2367DED38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2367DF54C, (uint64_t)&v84, (uint64_t)&v89, 32, 16);
      for (nn = 0; nn != 16; ++nn)
      {
        v79 = 0;
        v80 = (const float *)xmmword_23691FD18 + nn;
        v81 = vld1q_dup_f32(v80);
        do
        {
          v12[v79] = vmulq_f32(vmulq_f32(v11[v79], v81), (float32x4_t)xmmword_23691FD58[v79]);
          ++v79;
        }
        while (v79 != 8);
        v12 += 64;
        v11 += 8;
      }
      break;
    default:
      return;
  }
}

uint64_t sub_2367E0A9C(uint64_t result, _DWORD *a2, _QWORD *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t i;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  float v19;
  float v20;
  int32x2_t v21;

  for (i = 0; i != 16; i += 4)
  {
    *(_DWORD *)(a4 + i) = *a2;
    a2 += result;
  }
  v11 = 0;
  v12 = *(float *)a4;
  v13 = *(float *)(a4 + 4);
  v14 = *(float *)(a4 + 8);
  LODWORD(a7) = *(_DWORD *)(a4 + 12);
  *(float *)&a9 = *(float *)a4 + *(float *)&a7;
  v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  *(float *)&a10 = v13 + v14;
  v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
  v17 = (int32x2_t)vadd_f32(v15, v16);
  v18 = (int32x2_t)vsub_f32(v15, v16);
  *(int32x2_t *)(a4 + 16) = vzip1_s32(v17, v18);
  v19 = (float)(v12 - *(float *)&a7) * 0.5412;
  v20 = (float)(v13 - v14) * 1.3066;
  *(float *)&a7 = v19 - v20;
  v21 = (int32x2_t)vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0), (float32x2_t)vdup_n_s32(0x3FB504F3u), v19 + v20);
  *(_DWORD *)(a4 + 24) = v21.i32[0];
  *(float *)(a4 + 28) = v19 - v20;
  *(int32x2_t *)a4 = vzip1_s32(v17, v21);
  *(_DWORD *)(a4 + 8) = v18.i32[0];
  *(float *)(a4 + 12) = v19 - v20;
  do
  {
    *(float *)(a3[1] + 4 * *a3 * v11) = *(float *)(a4 + 4 * v11) * 0.25;
    ++v11;
  }
  while (v11 != 4);
  return result;
}

uint64_t sub_2367E0B5C(uint64_t result, float32x2_t *a2, _QWORD *a3, float32x2_t *a4)
{
  uint64_t i;
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;

  for (i = 0; i != 4; ++i)
  {
    a4[i] = *a2;
    a2 = (float32x2_t *)((char *)a2 + 4 * result);
  }
  v5 = 0;
  v6 = a4[1];
  v8 = a4[2];
  v7 = a4[3];
  v9 = vadd_f32(*a4, v7);
  v10 = vadd_f32(v6, v8);
  v11 = vadd_f32(v9, v10);
  v12 = vsub_f32(v9, v10);
  v13 = vsub_f32(*a4, v7);
  a4[4] = v11;
  a4[5] = v12;
  v14 = vmul_f32(v13, (float32x2_t)vdup_n_s32(0x3F0A8BD4u));
  v15 = vmul_f32(vsub_f32(v6, v8), (float32x2_t)vdup_n_s32(0x3FA73D75u));
  v16 = vadd_f32(v14, v15);
  v17 = vsub_f32(v14, v15);
  a4[7] = v17;
  a4[2] = v12;
  a4[3] = v17;
  v18 = vmla_f32(v17, (float32x2_t)vdup_n_s32(0x3FB504F3u), v16);
  a4[6] = v18;
  *a4 = v11;
  a4[1] = v18;
  __asm { FMOV            V0.2S, #0.25 }
  do
  {
    *(float32x2_t *)(a3[1] + 4 * *a3 * v5) = vmul_f32(a4[v5], _D0);
    ++v5;
  }
  while (v5 != 4);
  return result;
}

uint64_t sub_2367E0C18(uint64_t result, float32x4_t *a2, _QWORD *a3, float32x4_t *a4)
{
  uint64_t i;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  for (i = 0; i != 4; ++i)
  {
    a4[i] = *a2;
    a2 = (float32x4_t *)((char *)a2 + 4 * result);
  }
  v5 = 0;
  v6 = a4[1];
  v8 = a4[2];
  v7 = a4[3];
  v9 = vaddq_f32(*a4, v7);
  v10 = vaddq_f32(v6, v8);
  v11 = vaddq_f32(v9, v10);
  v12 = vsubq_f32(v9, v10);
  v13 = vsubq_f32(*a4, v7);
  a4[4] = v11;
  a4[5] = v12;
  v14 = vmulq_f32(v13, (float32x4_t)vdupq_n_s32(0x3F0A8BD4u));
  v15 = vmulq_f32(vsubq_f32(v6, v8), (float32x4_t)vdupq_n_s32(0x3FA73D75u));
  v16 = vaddq_f32(v14, v15);
  v17 = vsubq_f32(v14, v15);
  a4[7] = v17;
  a4[2] = v12;
  a4[3] = v17;
  v18 = vmlaq_f32(v17, (float32x4_t)vdupq_n_s32(0x3FB504F3u), v16);
  a4[6] = v18;
  *a4 = v11;
  a4[1] = v18;
  __asm { FMOV            V0.4S, #0.25 }
  do
  {
    *(float32x4_t *)(a3[1] + 4 * *a3 * v5) = vmulq_f32(a4[v5], _Q0);
    ++v5;
  }
  while (v5 != 4);
  return result;
}

void sub_2367E0CD4(uint64_t a1, float32x4_t *a2, _QWORD *a3, float32x4_t *a4)
{
  uint64_t i;
  uint64_t v7;
  float32x4_t v8;

  for (i = 0; i != 8; ++i)
  {
    a4[i] = *a2;
    a2 = (float32x4_t *)((char *)a2 + 4 * a1);
  }
  sub_2367E12DC((uint64_t)a4, a4 + 8);
  v7 = 0;
  v8.i64[0] = 0x3E0000003E000000;
  v8.i64[1] = 0x3E0000003E000000;
  do
  {
    *(float32x4_t *)(a3[1] + 4 * *a3 * v7) = vmulq_f32(a4[v7], v8);
    ++v7;
  }
  while (v7 != 8);
}

_QWORD *sub_2367E0D4C(_QWORD *result, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
    v7 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
    v8 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    __asm { FMOV            V3.4S, #0.25 }
    do
    {
      v14 = 0;
      v15 = (float32x4_t *)(result[1] + v4);
      v16 = 4 * *result;
      do
      {
        a4[v14++] = *v15;
        v15 = (float32x4_t *)((char *)v15 + v16);
      }
      while (v14 != 4);
      v17 = 0;
      v18 = *a4;
      v19 = a4[1];
      v21 = a4[2];
      v20 = a4[3];
      v22 = vaddq_f32(*a4, v20);
      v23 = vaddq_f32(v19, v21);
      v24 = vaddq_f32(v22, v23);
      v25 = vsubq_f32(v22, v23);
      a4[4] = v24;
      a4[5] = v25;
      v26 = vmulq_f32(vsubq_f32(v18, v20), v6);
      v27 = vmulq_f32(vsubq_f32(v19, v21), v7);
      v28 = vaddq_f32(v26, v27);
      v29 = vsubq_f32(v26, v27);
      a4[7] = v29;
      a4[2] = v25;
      a4[3] = v29;
      v30 = vmlaq_f32(v29, v8, v28);
      a4[6] = v30;
      *a4 = v24;
      a4[1] = v30;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v17 + 4 * v5) = vmulq_f32(a4[v17], _Q3);
        ++v17;
      }
      while (v17 != 4);
      v5 += 4;
      v4 += 16;
    }
    while (v5 < a3);
  }
  return result;
}

void sub_2367E0E30(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 128);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 128);
      sub_2367E12DC(a4, v10);
      v14 = 0;
      v15.i64[0] = 0x3E0000003E000000;
      v15.i64[1] = 0x3E0000003E000000;
      do
      {
        *(float32x4_t *)(a2[1] + 4 * *a2 * v14 + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * v14), v15);
        ++v14;
      }
      while (v14 != 8);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_2367E0EF4(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t i;
  float32x4_t v15;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (float32x4_t *)(a4 + 256);
    v15 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      v11 = 0;
      v12 = (_OWORD *)(a1[1] + v8);
      v13 = 4 * *a1;
      do
      {
        *(_OWORD *)(a4 + v11) = *v12;
        v11 += 16;
        v12 = (_OWORD *)((char *)v12 + v13);
      }
      while (v11 != 256);
      sub_2367E11AC(a4, v10);
      for (i = 0; i != 16; ++i)
        *(float32x4_t *)(a2[1] + 4 * *a2 * i + 4 * v9) = vmulq_f32(*(float32x4_t *)(a4 + 16 * i), v15);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

void sub_2367E0FCC(_QWORD *a1, _QWORD *a2, unint64_t a3, float32x4_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t i;
  float32x4_t *v18;
  uint64_t j;
  uint64_t k;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  uint64_t m;
  float32x4_t v28;
  float32x4_t *v29;

  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = (uint64_t)&a4[32];
    v11 = a4 + 64;
    v12 = (uint64_t)&a4[48];
    v29 = a4 + 1;
    v28 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
    do
    {
      v13 = 0;
      v14 = (float32x4_t *)(a1[1] + v8);
      v15 = 4 * *a1;
      do
      {
        a4[v13++] = *v14;
        v14 = (float32x4_t *)((char *)v14 + v15);
      }
      while (v13 != 32);
      v16 = a4;
      for (i = 31; i != 15; --i)
      {
        v16[32] = vaddq_f32(*v16, a4[i]);
        ++v16;
      }
      sub_2367E11AC(v10, v11);
      v18 = a4;
      for (j = 31; j != 15; --j)
      {
        v18[48] = vsubq_f32(*v18, a4[j]);
        ++v18;
      }
      for (k = 0; k != 16; ++k)
        *(float32x4_t *)(v12 + 16 * k) = vmulq_n_f32(*(float32x4_t *)(v12 + 16 * k), flt_23692278C[k]);
      sub_2367E11AC(v12, v11);
      v21 = 0;
      a4[48] = vmlaq_f32(a4[49], v28, a4[48]);
      do
      {
        a4[v21 + 49] = vaddq_f32(a4[v21 + 49], a4[v21 + 50]);
        ++v21;
      }
      while (v21 != 14);
      v22 = 0;
      v23 = -512;
      do
      {
        *(_OWORD *)(v10 + v23) = *(_OWORD *)(v10 + v22);
        v22 += 16;
        v23 += 32;
      }
      while (v23);
      v24 = 0;
      v25 = v29;
      v26.i64[0] = 0x3D0000003D000000;
      v26.i64[1] = 0x3D0000003D000000;
      do
      {
        *v25 = *(float32x4_t *)(v12 + v24);
        v25 += 2;
        v24 += 16;
      }
      while (v24 != 256);
      for (m = 0; m != 32; ++m)
        *(float32x4_t *)(a2[1] + 4 * *a2 * m + 4 * v9) = vmulq_f32(a4[m], v26);
      v9 += 4;
      v8 += 16;
    }
    while (v9 < a3);
  }
}

__n128 sub_2367E11AC(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 result;

  v4 = 0;
  for (i = 240; i != 112; i -= 16)
  {
    a2[v4] = vaddq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + i));
    ++v4;
  }
  sub_2367E12DC((uint64_t)a2, a2 + 16);
  v6 = 0;
  v7 = (uint64_t)&a2[8];
  v8 = 240;
  do
  {
    *(float32x4_t *)(v7 + v6) = vsubq_f32(*(float32x4_t *)(a1 + v6), *(float32x4_t *)(a1 + v8));
    v6 += 16;
    v8 -= 16;
  }
  while (v6 != 128);
  for (j = 0; j != 8; ++j)
    *(float32x4_t *)(v7 + 16 * j) = vmulq_n_f32(*(float32x4_t *)(v7 + 16 * j), flt_23692276C[j]);
  sub_2367E12DC(v7, a2 + 16);
  v10 = 0;
  a2[8] = vmlaq_f32(a2[9], (float32x4_t)vdupq_n_s32(0x3FB504F3u), a2[8]);
  do
  {
    a2[v10 + 9] = vaddq_f32(a2[v10 + 9], a2[v10 + 10]);
    ++v10;
  }
  while (v10 != 6);
  v11 = 0;
  v12 = (_OWORD *)a1;
  do
  {
    *v12 = a2[v11];
    v12 += 2;
    ++v11;
  }
  while (v11 != 8);
  v13 = 0;
  v14 = (__n128 *)(a1 + 16);
  do
  {
    result = (__n128)a2[v13 + 8];
    *v14 = result;
    v14 += 2;
    ++v13;
  }
  while (v13 != 8);
  return result;
}

__n128 sub_2367E12DC(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t j;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _OWORD *v35;
  uint64_t v36;
  __n128 *v37;
  __n128 result;

  v2 = 0;
  for (i = 112; i != 48; i -= 16)
  {
    a2[v2] = vaddq_f32(*(float32x4_t *)(a1 + v2 * 16), *(float32x4_t *)(a1 + i));
    ++v2;
  }
  v4 = 0;
  v5 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = vaddq_f32(*a2, v7);
  v10 = vaddq_f32(v6, v8);
  v11 = vaddq_f32(v9, v10);
  v12 = vsubq_f32(v9, v10);
  a2[8] = v11;
  a2[9] = v12;
  v13 = vmulq_f32(vsubq_f32(v5, v7), (float32x4_t)vdupq_n_s32(0x3F0A8BD4u));
  v14 = vmulq_f32(vsubq_f32(v6, v8), (float32x4_t)vdupq_n_s32(0x3FA73D75u));
  v15 = vaddq_f32(v13, v14);
  v16 = vsubq_f32(v13, v14);
  a2[11] = v16;
  a2[2] = v12;
  a2[3] = v16;
  v17 = vmlaq_f32(v16, (float32x4_t)vdupq_n_s32(0x3FB504F3u), v15);
  a2[10] = v17;
  *a2 = v11;
  a2[1] = v17;
  v18 = 112;
  do
  {
    a2[v4 + 4] = vsubq_f32(*(float32x4_t *)(a1 + v4 * 16), *(float32x4_t *)(a1 + v18));
    ++v4;
    v18 -= 16;
  }
  while (v4 != 4);
  for (j = 0; j != 4; ++j)
    a2[j + 4] = vmulq_n_f32(a2[j + 4], flt_2368AFB50[j]);
  v20 = 0;
  v21 = a2[4];
  v22 = a2[5];
  v24 = a2[6];
  v23 = a2[7];
  v25 = vaddq_f32(v21, v23);
  v26 = vaddq_f32(v22, v24);
  v27 = vaddq_f32(v25, v26);
  v28 = vsubq_f32(v25, v26);
  a2[8] = v27;
  a2[9] = v28;
  v29 = vmulq_f32(vsubq_f32(v21, v23), (float32x4_t)vdupq_n_s32(0x3F0A8BD4u));
  v30 = vmulq_f32(vsubq_f32(v22, v24), (float32x4_t)vdupq_n_s32(0x3FA73D75u));
  v31 = vaddq_f32(v29, v30);
  v32 = vsubq_f32(v29, v30);
  v33 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
  v34 = vmlaq_f32(v32, v33, v31);
  a2[10] = v34;
  a2[11] = v32;
  a2[4] = vmlaq_f32(v34, v33, v27);
  a2[5] = vaddq_f32(v28, v34);
  a2[6] = vaddq_f32(v28, v32);
  a2[7] = v32;
  v35 = (_OWORD *)a1;
  do
  {
    *v35 = a2[v20];
    v35 += 2;
    ++v20;
  }
  while (v20 != 4);
  v36 = 0;
  v37 = (__n128 *)(a1 + 16);
  do
  {
    result = (__n128)a2[v36 + 4];
    *v37 = result;
    v37 += 2;
    ++v36;
  }
  while (v36 != 4);
  return result;
}

_QWORD *sub_2367E1480(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367DBF48(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2367E14D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2367E14F4(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367E25B8(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_2367E2604(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_2367E158C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367C4718(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2367E15AC(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  v3 = result[906] + a2;
  v4 = result[905];
  result[903] = *(_QWORD *)(result[901] + 24) + *(_QWORD *)(result[901] + 16) * v3 + 4 * v4;
  v5 = result[820];
  v6 = result + 833;
  v7 = 56;
  do
  {
    v8 = result[v2 + 912];
    result[904] = *(_QWORD *)(result[902] + 24) + *(_QWORD *)(result[902] + 16) * v3 + v4;
    if (v5)
    {
      v9 = 0;
      v10 = a2 >> v8;
      v11 = v6;
      v12 = v5;
      do
      {
        *v11 = *(_QWORD *)(result[899] + v9 + v7) + *(_QWORD *)(result[899] + v9 + 48) * v10;
        if (v10)
          v13 = *(_QWORD *)(result[899] + v9 + v7) + *(_QWORD *)(result[899] + v9 + 48) * (v10 - 1);
        else
          v13 = 0;
        v11[33] = v13;
        v11 += 3;
        v9 += 120;
        --v12;
      }
      while (v12);
    }
    ++v2;
    v7 += 40;
    ++v6;
  }
  while (v2 != 3);
  return result;
}

uint64_t sub_2367E1678(_QWORD *a1, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v12;
  BOOL (*v13)(uint64_t, char, uint64_t, unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char);
  BOOL (*v14)(uint64_t, char, uint64_t, unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char);
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL (*v31)(uint64_t, char, uint64_t, unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t result;
  _QWORD *v33;
  BOOL (*v34)(uint64_t, char, uint64_t, unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char);
  BOOL (*v35)(uint64_t, char, uint64_t, unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v12 = 0;
  v44 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v43 = 2;
  if (a8)
    v13 = sub_2367E1BD8;
  else
    v13 = sub_2367E193C;
  if (a8)
    v14 = sub_2367E2114;
  else
    v14 = sub_2367E1E78;
  v15 = a1 + 12;
  v16 = a1 + 833;
  v17 = a1 + 821;
  while (1)
  {
    v18 = *((int *)&v42 + v12);
    v19 = &a1[v18];
    v20 = v19[909];
    v21 = a2 >> v20;
    v22 = v19[912];
    v23 = a3 >> v22;
    v24 = a3 >> v22 << v22;
    v25 = a2 >> v20 << v20 == a2 && v24 == a3;
    if (v25 && a1[820])
      break;
LABEL_14:
    if (++v12 == 3)
      return 0;
  }
  v26 = 0;
  v27 = 0;
  v28 = v15;
  v29 = &v16[v18];
  v37 = a6;
  v38 = a7;
  v35 = v13;
  v36 = a4;
  v33 = v15;
  v34 = v14;
  while (1)
  {
    v39 = v28;
    v30 = v28 - 7;
    v31 = *v28 ? v13 : v14;
    v40 = v27;
    v41 = v26;
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, unint64_t, unint64_t, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v31)(v17[v27], a6, *(_QWORD *)((char *)v29 + v26), *(_QWORD *)((char *)v29 + v26 + 264), a1[832], v18, v21, v23, a2, *a4, a1[2] + 4 * a1[3] * v27, *(_QWORD *)(a1[819] + 8 * v27), v30, a1[4] + v26, a1[904], a1[903], a1[900], *(_QWORD *)(a7 + 8 * v18), *(unsigned int *)(a1[1] + 4 * v27));
    if ((_DWORD)result)
      return result;
    v27 = v40 + 1;
    v26 = v41 + 24;
    v28 = v39 + 74;
    a6 = v37;
    a7 = v38;
    v13 = v35;
    a4 = v36;
    v15 = v33;
    v14 = v34;
    v29 = &v16[v18];
    if ((unint64_t)(v40 + 1) >= a1[820])
      goto LABEL_14;
  }
}

_QWORD *sub_2367E187C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = 0;
  *a1 = off_2507FF980;
  v3 = a1 + 751;
  do
  {
    sub_2367C2F38(&v3[v2]);
    v2 -= 74;
  }
  while (v2 != -814);
  return a1;
}

void sub_2367E18D4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = 0;
  *a1 = off_2507FF980;
  v2 = a1 + 751;
  do
  {
    sub_2367C2F38(&v2[v1]);
    v1 -= 74;
  }
  while (v1 != -814);
  JUMPOUT(0x23B7F8F48);
}

BOOL sub_2367E193C(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  _BOOL8 result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v22 = 1 << a2;
  v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0)
        v25 = v24 + 1;
      else
        v25 = v24 + 2;
      v26 = v25 >> 1;
    }
    else
    {
      v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    v26 = *a4;
  }
  else
  {
    v26 = 32;
  }
  v27 = byte_236923064[a10];
  v28 = qword_236922110[3 * v27 + a6];
  v29 = sub_2367E23B4((_QWORD *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40)
    v30 = 64;
  else
    v30 = v26;
  v31 = v29;
  if (v30 >= 8)
    v30 = (v30 >> 1) + 4;
  v32 = sub_2367C4CF4(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22)
    return 1;
  v34 = v32;
  v35 = 0;
  v36 = a5;
  v37 = a11 + (v28 << 8);
  v38 = (uint64_t)v22 << 6;
  v39 = v23 - 1;
  v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_23692665C[a10] <= 1u)
    v41 = 1;
  else
    v41 = byte_23692665C[a10];
  if (byte_236926677[a10] <= 1u)
    v42 = 1;
  else
    v42 = byte_236926677[a10];
  v43 = 4 * v36;
  do
  {
    v44 = v40;
    v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  result = v32 != 0;
  if (v38 > v23 && v34)
  {
    v46 = v34 <= v38 >> 4;
    v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      v48 = sub_2367C4CF4(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_2369222D0[v23 >> a2] + (unint64_t)word_236922250[(v39 + v34) >> a2])), a12);
      *(_WORD *)(a18 + 2 * *(unsigned int *)(v37 + 4 * v23)) += (unint64_t)(-(v48 & 1) ^ (v48 >> 1)) << a19;
      v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

BOOL sub_2367E1BD8(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  _BOOL8 result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v22 = 1 << a2;
  v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0)
        v25 = v24 + 1;
      else
        v25 = v24 + 2;
      v26 = v25 >> 1;
    }
    else
    {
      v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    v26 = *a4;
  }
  else
  {
    v26 = 32;
  }
  v27 = byte_236923064[a10];
  v28 = qword_236922110[3 * v27 + a6];
  v29 = sub_2367E23B4((_QWORD *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40)
    v30 = 64;
  else
    v30 = v26;
  v31 = v29;
  if (v30 >= 8)
    v30 = (v30 >> 1) + 4;
  v32 = sub_2367C4CF4(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22)
    return 1;
  v34 = v32;
  v35 = 0;
  v36 = a5;
  v37 = a11 + (v28 << 8);
  v38 = (uint64_t)v22 << 6;
  v39 = v23 - 1;
  v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_23692665C[a10] <= 1u)
    v41 = 1;
  else
    v41 = byte_23692665C[a10];
  if (byte_236926677[a10] <= 1u)
    v42 = 1;
  else
    v42 = byte_236926677[a10];
  v43 = 4 * v36;
  do
  {
    v44 = v40;
    v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  result = v32 != 0;
  if (v38 > v23 && v34)
  {
    v46 = v34 <= v38 >> 4;
    v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      v48 = sub_2367C4CF4(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_2369222D0[v23 >> a2] + (unint64_t)word_236922250[(v39 + v34) >> a2])), a12);
      *(_DWORD *)(a18 + 4 * *(unsigned int *)(v37 + 4 * v23)) += ((v48 >> 1) ^ -(v48 & 1)) << a19;
      v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

BOOL sub_2367E1E78(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  _BOOL8 result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v22 = 1 << a2;
  v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0)
        v25 = v24 + 1;
      else
        v25 = v24 + 2;
      v26 = v25 >> 1;
    }
    else
    {
      v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    v26 = *a4;
  }
  else
  {
    v26 = 32;
  }
  v27 = byte_236923064[a10];
  v28 = qword_236922110[3 * v27 + a6];
  v29 = sub_2367E23B4((_QWORD *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40)
    v30 = 64;
  else
    v30 = v26;
  v31 = v29;
  if (v30 >= 8)
    v30 = (v30 >> 1) + 4;
  v32 = sub_2367E2428(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22)
    return 1;
  v34 = v32;
  v35 = 0;
  v36 = a5;
  v37 = a11 + (v28 << 8);
  v38 = (uint64_t)v22 << 6;
  v39 = v23 - 1;
  v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_23692665C[a10] <= 1u)
    v41 = 1;
  else
    v41 = byte_23692665C[a10];
  if (byte_236926677[a10] <= 1u)
    v42 = 1;
  else
    v42 = byte_236926677[a10];
  v43 = 4 * v36;
  do
  {
    v44 = v40;
    v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  result = v32 != 0;
  if (v38 > v23 && v34)
  {
    v46 = v34 <= v38 >> 4;
    v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      v48 = sub_2367E2428(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_2369222D0[v23 >> a2] + (unint64_t)word_236922250[(v39 + v34) >> a2])), a12);
      *(_WORD *)(a18 + 2 * *(unsigned int *)(v37 + 4 * v23)) += (unint64_t)(-(v48 & 1) ^ (v48 >> 1)) << a19;
      v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

BOOL sub_2367E2114(uint64_t a1, char a2, uint64_t a3, unsigned int *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unint64_t *a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  _BOOL8 result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v22 = 1 << a2;
  v23 = 1 << a2;
  if (a7)
  {
    if (a4)
    {
      v24 = a4[a7] + *(_DWORD *)(a3 + 4 * a7 - 4);
      if (v24 + 1 >= 0)
        v25 = v24 + 1;
      else
        v25 = v24 + 2;
      v26 = v25 >> 1;
    }
    else
    {
      v26 = *(_DWORD *)(a3 + 4 * a7 - 4);
    }
  }
  else if (a4)
  {
    v26 = *a4;
  }
  else
  {
    v26 = 32;
  }
  v27 = byte_236923064[a10];
  v28 = qword_236922110[3 * v27 + a6];
  v29 = sub_2367E23B4((_QWORD *)a17, *(unsigned __int8 *)(a15 + a9), *(_DWORD *)(a16 + 4 * a7), v27, a6);
  if (v26 >= 0x40)
    v30 = 64;
  else
    v30 = v26;
  v31 = v29;
  if (v30 >= 8)
    v30 = (v30 >> 1) + 4;
  v32 = sub_2367E2428(a13, *(unsigned __int8 *)(*a14 + (int)(v29 + a1 + v30 * *(_DWORD *)(a17 + 120))), a12);
  if (v32 > 63 * v22)
    return 1;
  v34 = v32;
  v35 = 0;
  v36 = a5;
  v37 = a11 + (v28 << 8);
  v38 = (uint64_t)v22 << 6;
  v39 = v23 - 1;
  v40 = (_DWORD *)(a3 + 4 * a7);
  if (byte_23692665C[a10] <= 1u)
    v41 = 1;
  else
    v41 = byte_23692665C[a10];
  if (byte_236926677[a10] <= 1u)
    v42 = 1;
  else
    v42 = byte_236926677[a10];
  v43 = 4 * v36;
  do
  {
    v44 = v40;
    v45 = v41;
    do
    {
      *v44++ = (v23 - 1 + v32) >> a2;
      --v45;
    }
    while (v45);
    ++v35;
    v40 = (_DWORD *)((char *)v40 + v43);
  }
  while (v35 != v42);
  result = v32 != 0;
  if (v38 > v23 && v34)
  {
    v46 = v34 <= v38 >> 4;
    v47 = (458 * v31 + 37 * *(_DWORD *)(a17 + 120)) + a1;
    do
    {
      v48 = sub_2367E2428(a13, *(unsigned __int8 *)(*a14+ v47+ v46+ 2 * (word_2369222D0[v23 >> a2] + (unint64_t)word_236922250[(v39 + v34) >> a2])), a12);
      *(_DWORD *)(a18 + 4 * *(unsigned int *)(v37 + 4 * v23)) += ((v48 >> 1) ^ -(v48 & 1)) << a19;
      v46 = v48 != 0;
      v34 -= v46;
      ++v23;
      result = v34 != 0;
    }
    while (v23 < v38 && v34);
  }
  return result;
}

uint64_t sub_2367E23B4(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v5 = (unsigned int *)a1[9];
  v6 = (unsigned int *)a1[10];
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (unsigned int *)a1[9];
    do
    {
      v9 = *v8++;
      if (v9 < a3)
        ++v7;
    }
    while (v8 != v6);
  }
  v10 = 13 * (a5 ^ 1);
  if (a5 >= 2)
    v10 = 26;
  return *(unsigned __int8 *)(a1[12] + a1[16] * (v7 + v10 + a4 + (v10 + a4) * (v6 - v5)) + a2);
}

uint64_t sub_2367E2428(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  char v29;
  int v30;
  unint64_t v31;

  v6 = (_QWORD *)a3[2];
  if ((unint64_t)v6 > a3[3])
  {
    sub_2367C5188(a3);
  }
  else
  {
    v7 = a3[1];
    v8 = *a3 | (*v6 << v7);
    a3[2] = (unint64_t)v6 + ((63 - v7) >> 3);
    *a3 = v8;
    a3[1] = v7 | 0x38;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v16 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2), a3);
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 20);
    v10 = (unint64_t)(v9 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    v11 = *(_DWORD *)(a1 + 40) & v9 & 0xFFFu;
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v10);
    if (v12 <= v11)
      v13 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (a2 << *(_DWORD *)(a1 + 32)) + 8 * v10);
    else
      v13 = 0;
    v14 = HIDWORD(v13);
    v15 = HIWORD(v13);
    if (v12 <= v11)
      v16 = BYTE1(v12);
    else
      v16 = (unint64_t)(v9 & 0xFFF) >> *(_DWORD *)(a1 + 36);
    v17 = v11 + (unsigned __int16)v14 + (v15 ^ WORD1(v12)) * (*(_DWORD *)(a1 + 20) >> 12);
    v18 = v17 < 0x10000;
    v19 = a3[1];
    v20 = *a3 >> (16 * v18);
    if (v17 < 0x10000)
      v17 = (unsigned __int16)*a3 | ((unsigned __int16)v17 << 16);
    *(_DWORD *)(a1 + 20) = v17;
    *a3 = v20;
    a3[1] = v19 - 16 * v18;
  }
  v21 = (int *)(*(_QWORD *)(a1 + 24) + 16 * a2);
  v22 = v21[1];
  v23 = v16 >= v22;
  v24 = v16 - v22;
  if (v23)
  {
    v25 = *v21;
    v28 = v21 + 2;
    v26 = v21[2];
    v27 = v28[1];
    v29 = v25 - (v26 + v27) + (v24 >> (v26 + v27));
    v30 = *a3 & ~(-1 << v29);
    v31 = a3[1] - (v29 & 0x1F);
    *a3 >>= v29 & 0x1F;
    a3[1] = v31;
    LODWORD(v16) = v16 & ~(-1 << v27) | ((unint64_t)(v30 | (((v16 >> v27) & ((1 << v26)
                                                                                                - 1) | (1 << v26)) << v29)) << v27);
  }
  return v16;
}

char *sub_2367E25B8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_2367C3440();
  result = (char *)sub_2367D1EBC(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *sub_2367E2604(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367DBF48(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2367E2660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367E2680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = 0;
  v9 = **(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = (v8 - v9) >> 3;
  if (v10 <= 1)
    v10 = 1;
  do
  {
    if (v8 != v9)
    {
      for (i = 0; i != v10; ++i)
      {
        if (a5)
        {
          v12 = 0;
          v13 = *(_QWORD *)(a1 + 288);
          v14 = *(_QWORD *)(a1 + 24 * i + 8 * v7 + 24) + 4 * *(_QWORD *)(a1 + 16);
          do
          {
            *(_DWORD *)(*(_QWORD *)(a7 + 8 * v7) + 4 * v12) += *(_DWORD *)(v14 + 4 * v12) << *(_DWORD *)(v13 + 4 * i);
            ++v12;
          }
          while (a5 != v12);
        }
      }
    }
    ++v7;
  }
  while (v7 != 3);
  *(_QWORD *)(a1 + 16) += a5;
  return 0;
}

void sub_2367E2724()
{
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_2367E2738(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_2367C9FD8(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2367E2798(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367E27B4(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *a2;
  v3 = (unsigned __int8 *)(a1 + 4 * *a2);
  v4 = *v3;
  if (v4 <= 8)
  {
    v5 = a2[1];
  }
  else
  {
    v5 = a2[1] - 8;
    v2 >>= 8;
    v3 += 4 * *(unsigned __int16 *)(a1 + 4 * *a2 + 2)
        + 4 * (v2 & ~(-1 << (v4 - 8)));
    LODWORD(v4) = *v3;
  }
  *a2 = v2 >> v4;
  a2[1] = v5 - v4;
  return *((unsigned __int16 *)v3 + 1);
}

unsigned int *sub_2367E2814(unsigned int *__src, char *__dst, uint64_t a3, int a4, int a5)
{
  unsigned int *v5;
  char v6;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  float v19;

  v5 = __src;
  if (a4 == 32)
    return (unsigned int *)memcpy(__dst, __src, 4 * a3);
  if (a3)
  {
    v6 = a4 - 1;
    v7 = ~(_BYTE)a5 + a4;
    v8 = ~(-1 << (a4 - 1));
    do
    {
      v9 = *v5++;
      v10 = v9 >> v6;
      v11 = v9 & v8;
      if ((v9 & v8) != 0)
      {
        v12 = v11 >> v7;
        v13 = v11 << (23 - v7);
        v14 = v13 & 0x7FFFFF;
        v15 = __clz(v13 & 0x7FFFFF);
        v16 = v13 << (v15 - 8);
        v17 = 9 - v15;
        v18 = v16 & 0x7FFFFE;
        if (v12)
        {
          v17 = v12;
          v18 = v14;
        }
        if (a5 > 7)
          v18 = v14;
        else
          v12 = v17;
        __src = (unsigned int *)((((-1 << (a5 - 1)) + 1 + v12) << 23) + 1065353216);
        *(_DWORD *)__dst = v18 | ((v10 != 0) << 31) | __src;
      }
      else
      {
        if (v10)
          v19 = -0.0;
        else
          v19 = 0.0;
        *(float *)__dst = v19;
      }
      __dst += 4;
      --a3;
    }
    while (a3);
  }
  return __src;
}

uint64_t sub_2367E28F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_DWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3 == *(_DWORD *)(a1 + 4))
      return 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 48);
  }
  sub_2367DA410((uint64_t)&v16, v2, v3);
  v4 = v20;
  if (v20)
    return v4;
  v7 = v17;
  v6 = v18;
  v18 = 0;
  v8 = v19;
  *(_OWORD *)a1 = v16;
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  if (v9)
  {
    v10 = -*(_QWORD *)(v9 - 24);
    do
      v11 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v11 + v10, &qword_2564313D8));
    free(*(void **)(v9 - 32));
    v12 = v20;
    *(_QWORD *)(a1 + 32) = v8;
    if (v12)
      return v4;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v8;
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    v14 = -*(_QWORD *)(v13 - 24);
    do
      v15 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v15 + v14, &qword_2564313D8));
    free(*(void **)(v13 - 32));
  }
  return v4;
}

uint64_t sub_2367E29EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  switch(*(_DWORD *)a1)
  {
    case 1:
      v3 = *(_QWORD *)(a1 + 16);
      v4 = 1;
      goto LABEL_9;
    case 2:
      v3 = a3 + 1;
      goto LABEL_6;
    case 3:
      v3 = (2 * a3) | 1;
LABEL_6:
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_9;
    case 4:
      v3 = 3 * a3 + 1;
      v4 = *(_QWORD *)(a1 + 8);
      goto LABEL_9;
    case 5:
      v4 = *(_QWORD *)(a1 + 16);
      v3 = 3 * a3 + *(_QWORD *)(a1 + 24) * a2 + 18;
LABEL_9:
      result = v3 + v4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_2367E2A68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)(_QWORD);
  uint64_t (***v18)(_QWORD);
  uint64_t (**v19)(_QWORD);
  BOOL v20;

  v8 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_2367E3038((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      goto LABEL_18;
    v9 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7
        ? 0x38E38E38E38E38ELL
        : v9;
    if (v10 > 0x38E38E38E38E38ELL)
LABEL_18:
      sub_2367C3440();
    v11 = (char *)sub_2367D70D4(v10);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = &v11[72 * v12];
    result = sub_2367E2F4C(a2, a3, (uint64_t)v11);
    goto LABEL_12;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v14 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
    sub_2367E2C94(a2, v14, (uint64_t)v8);
    result = sub_2367E2F4C(v14, a3, *(_QWORD *)(a1 + 8));
LABEL_12:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_2367E2C94(a2, a3, (uint64_t)v8);
  v15 = result;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != result)
  {
    v17 = (uint64_t (***)(_QWORD))(v16 - 72);
    v18 = (uint64_t (***)(_QWORD))(v16 - 72);
    do
    {
      v19 = *v18;
      v18 -= 9;
      result = (*v19)(v17);
      v20 = v17 == (uint64_t (***)(_QWORD))v15;
      v17 = v18;
    }
    while (!v20);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_2367E2BF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2367E2C00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_2367E2C08(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_2367E2C48(uint64_t a1)
{
  void **v3;

  if (!*(_DWORD *)(a1 + 88))
  {
    v3 = (void **)(a1 + 24);
    sub_2367D6C98(&v3);
    v3 = (void **)a1;
    sub_2367D6D24(&v3);
  }
  return a1;
}

uint64_t sub_2367E2C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (**v35)(_QWORD);
  uint64_t v36;

  if (a1 != a2)
  {
    v4 = a2;
    for (i = a1; i != v4; i += 72)
    {
      v6 = *(_OWORD *)(i + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(i + 24);
      *(_OWORD *)(a3 + 8) = v6;
      if (a3 != i)
      {
        v7 = (void **)(a3 + 32);
        v8 = *(_QWORD *)(a3 + 32);
        v9 = *(_QWORD *)(i + 32);
        v10 = *(_QWORD *)(i + 40);
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
        v12 = *(_QWORD *)(a3 + 48);
        if (0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3) >= v11)
        {
          v24 = *(_QWORD *)(a3 + 40);
          v25 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v8) >> 3);
          if (v25 >= v11)
          {
            if (v9 != v10)
            {
              do
              {
                v32 = *(_QWORD *)(v9 + 8);
                *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
                *(_QWORD *)(v8 + 8) = v32;
                v9 += 24;
                v8 += 24;
              }
              while (v9 != v10);
              v24 = *(_QWORD *)(a3 + 40);
            }
            if (v24 != v8)
            {
              v33 = (void (***)(_QWORD))(v24 - 24);
              v34 = (void (***)(_QWORD))(v24 - 24);
              do
              {
                v35 = *v34;
                v34 -= 3;
                (*v35)(v33);
                v18 = v33 == (void (***)(_QWORD))v8;
                v33 = v34;
              }
              while (!v18);
            }
            *(_QWORD *)(a3 + 40) = v8;
            goto LABEL_38;
          }
          if (v24 != v8)
          {
            v26 = v8 + 8;
            v27 = 24 * v25;
            v28 = (uint64_t *)(v9 + 8);
            do
            {
              v29 = *v28;
              *(_DWORD *)(v26 + 8) = *((_DWORD *)v28 + 2);
              *(_QWORD *)v26 = v29;
              v26 += 24;
              v28 += 3;
              v27 -= 24;
            }
            while (v27);
            v8 = *(_QWORD *)(a3 + 40);
          }
          v30 = v9 + 24 * v25;
          v22 = v8;
          if (v30 != v10)
          {
            v22 = v8;
            do
            {
              *(_QWORD *)v22 = &off_2507FFA90;
              v31 = *(_QWORD *)(v30 + 8);
              *(_DWORD *)(v22 + 16) = *(_DWORD *)(v30 + 16);
              *(_QWORD *)(v22 + 8) = v31;
              v30 += 24;
              v22 += 24;
            }
            while (v30 != v10);
          }
        }
        else
        {
          if (v8)
          {
            v13 = *(_QWORD *)(a3 + 40);
            v14 = *(void **)(a3 + 32);
            if (v13 != v8)
            {
              v15 = (void (***)(_QWORD))(v13 - 24);
              v16 = (void (***)(_QWORD))(v13 - 24);
              do
              {
                v17 = *v16;
                v16 -= 3;
                (*v17)(v15);
                v18 = v15 == (void (***)(_QWORD))v8;
                v15 = v16;
              }
              while (!v18);
              v14 = *v7;
              v4 = a2;
            }
            *(_QWORD *)(a3 + 40) = v8;
            operator delete(v14);
            v12 = 0;
            *v7 = 0;
            *(_QWORD *)(a3 + 40) = 0;
            *(_QWORD *)(a3 + 48) = 0;
          }
          if (v11 > 0xAAAAAAAAAAAAAAALL)
            sub_2367C3440();
          v19 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
          v20 = 2 * v19;
          if (2 * v19 <= v11)
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
          if (v19 >= 0x555555555555555)
            v21 = 0xAAAAAAAAAAAAAAALL;
          else
            v21 = v20;
          sub_2367E25B8((_QWORD *)(a3 + 32), v21);
          v22 = *(_QWORD *)(a3 + 40);
          while (v9 != v10)
          {
            *(_QWORD *)v22 = &off_2507FFA90;
            v23 = *(_QWORD *)(v9 + 8);
            *(_DWORD *)(v22 + 16) = *(_DWORD *)(v9 + 16);
            *(_QWORD *)(v22 + 8) = v23;
            v9 += 24;
            v22 += 24;
          }
        }
        *(_QWORD *)(a3 + 40) = v22;
      }
LABEL_38:
      v36 = *(_QWORD *)(i + 56);
      *(_WORD *)(a3 + 64) = *(_WORD *)(i + 64);
      *(_QWORD *)(a3 + 56) = v36;
      a3 += 72;
    }
  }
  return a3;
}

uint64_t sub_2367E2F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_QWORD *)v7 = &off_2508004C0;
      v8 = *(_OWORD *)(a1 + v6 + 8);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(a1 + v6 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(_QWORD *)(a3 + v6 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      sub_2367E30AC((char *)(a3 + v6 + 32), *(_QWORD *)(a1 + v6 + 32), *(_QWORD *)(a1 + v6 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v6 + 40) - *(_QWORD *)(a1 + v6 + 32)) >> 3));
      v9 = *(_QWORD *)(a1 + v6 + 56);
      *(_WORD *)(v7 + 64) = *(_WORD *)(a1 + v6 + 64);
      *(_QWORD *)(v7 + 56) = v9;
      v6 += 72;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2367E3038(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 72;
      v6 = v3 - 72;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 72;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_2367E30AC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t i;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367E25B8(result, a4);
    for (i = *((_QWORD *)v6 + 1); a2 != a3; i += 24)
    {
      *(_QWORD *)i = &off_2507FFA90;
      v8 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(i + 16) = *(_DWORD *)(a2 + 16);
      *(_QWORD *)(i + 8) = v8;
      a2 += 24;
    }
    *((_QWORD *)v6 + 1) = i;
  }
  return result;
}

void sub_2367E3130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2367D78F8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2367E3144(uint64_t a1, uint64_t a2, uint64x2_t *a3, unint64_t *a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  uint64x2_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int64x2_t v35;
  uint64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int8x16_t v39;
  uint64_t v40;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  int64x2_t v67;
  char *v68;
  _OWORD *v69;
  __n128 v70;
  _OWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  BOOL v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  unint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  char *v111;
  int v112;
  int v113;
  int8x16_t v114;
  _OWORD *v115;
  uint64x2_t *v116;
  int v117;
  int v118;
  _QWORD v119[2];
  __int128 v120;
  uint64_t (**v121)();
  __int128 v122;
  uint64_t v123;
  char v124[24];
  uint64_t v125;
  __int16 v126;
  _BYTE v127[24];
  char *v128;
  char **v129;
  _OWORD *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  __int128 v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  char v143;
  char v144;
  int64x2_t v145;
  char *v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  char v151;
  int64x2_t v152;
  char *v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  char v158;
  unsigned int v159;
  void **v160[3];

  v16 = a3;
  v18 = a1;
  sub_2368001CC((uint64_t)&v152, a3[1].i64[0], a3[1].i64[1], *(_DWORD *)(a1 + 64), 0);
  v19 = v159;
  if (!v159)
  {
    v112 = a8;
    v108 = a7;
    v145 = v152;
    v152 = 0uLL;
    v147 = v154;
    v146 = v153;
    v148 = v155;
    v153 = 0;
    v154 = 0uLL;
    v155 = 0;
    v20 = *(_QWORD *)v18;
    v21 = *(_QWORD *)(v18 + 8) - *(_QWORD *)v18;
    v149 = v156;
    v150 = v157;
    v22 = *(_QWORD *)(v18 + 72);
    v23 = v21 >> 6;
    v151 = v158;
    v116 = v16;
    if (v22 < v21 >> 6)
    {
      v24 = *(_QWORD *)(v18 + 240);
      v25 = (unint64_t *)(v20 + (v22 << 6) + 48);
      while (*(v25 - 1) <= v24 && *v25 <= v24)
      {
        v25 += 8;
        if (v23 == ++v22)
          goto LABEL_52;
      }
    }
    if (v22 >= v23)
    {
      v23 = v22;
    }
    else
    {
      v106 = a4;
      v107 = a2;
      v27 = a6;
      v109 = a6;
      v28 = v22;
      v117 = a5;
      do
      {
        v29 = v18;
        v30 = v20 + (v28 << 6);
        v31 = (uint64_t *)(v30 + 56);
        v32 = *(_QWORD *)(v30 + 56);
        v33 = v32;
        if (SHIDWORD(v32) < (int)v32)
          v33 = HIDWORD(v32);
        if (v33 <= v27 && v33 >= a5)
        {
          v35.i64[0] = v32;
          v35.i64[1] = HIDWORD(v32);
          v36 = (uint64x2_t)vnegq_s64(v35);
          v37 = (int64x2_t)vshlq_u64(*v116, v36);
          v38 = (int64x2_t)vshlq_u64(v116[1], v36);
          v39 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vaddq_s64(v38, v37), *(uint64x2_t *)(v30 + 40)), (int8x16_t)vqsubq_u64(*(uint64x2_t *)(v30 + 40), (uint64x2_t)v37), (int8x16_t)v38);
          v114 = v39;
          v40 = v39.i64[1];
          if (v39.i64[0] && v39.i64[1] != 0)
          {
            if (v112 && *(_BYTE *)(v29 + 258))
            {
              v42 = 4 * v39.i64[0];
              v44 = v37.i64[1];
              v43 = v37.i64[0];
              do
              {
                bzero((void *)(*(_QWORD *)(v30 + 24) + *(_QWORD *)(v30 + 16) * v44++ + 4 * v43), v42);
                --v40;
              }
              while (v40);
            }
            else
            {
              sub_2367DA410((uint64_t)v127, v39.u32[0], v39.u32[2]);
              v19 = v130;
              if ((_DWORD)v130)
                goto LABEL_100;
              v45 = *(unsigned int *)v127;
              v113 = *(_DWORD *)&v127[4];
              v46 = *(_QWORD *)&v127[16];
              v121 = *(uint64_t (***)())&v127[8];
              v47 = v129;
              v111 = v128;
              v48 = v112 ^ 1;
              if (!*(_DWORD *)v127)
                v48 = 1;
              if ((v48 & 1) == 0 && *(_DWORD *)&v127[4])
              {
                v49 = v128;
                v50 = *(unsigned int *)&v127[4];
                do
                {
                  bzero(v49, 4 * v45);
                  v49 += v46;
                  --v50;
                }
                while (v50);
              }
              v51 = *v31;
              v52 = v145.i64[1];
              if (v145.i64[1] >= (unint64_t)v146)
              {
                v54 = (v145.i64[1] - v145.i64[0]) >> 6;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 58)
                  sub_2367C3440();
                v56 = (uint64_t)&v146[-v145.i64[0]];
                if ((uint64_t)&v146[-v145.i64[0]] >> 5 > v55)
                  v55 = v56 >> 5;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFC0)
                  v57 = 0x3FFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                v129 = &v146;
                v58 = (char *)sub_2367E42EC(v57);
                v59 = &v58[64 * v54];
                *(_QWORD *)v127 = v58;
                *(_QWORD *)&v127[8] = v59;
                v128 = &v58[64 * v60];
                *(_DWORD *)v59 = v45;
                *((_DWORD *)v59 + 1) = v113;
                *((_QWORD *)v59 + 1) = v121;
                *((_QWORD *)v59 + 2) = v46;
                *((_QWORD *)v59 + 3) = v111;
                *((_QWORD *)v59 + 4) = v47;
                *(int8x16_t *)(v59 + 40) = v114;
                *((_QWORD *)v59 + 7) = v51;
                v53 = v59 + 64;
                *(_QWORD *)&v127[16] = v59 + 64;
                v61 = v145.i64[1];
                v62 = v145.i64[0];
                v63 = *(_QWORD *)&v127[8];
                if (v145.i64[1] == v145.i64[0])
                {
                  v67 = vdupq_n_s64(v145.u64[1]);
                  v27 = v109;
                }
                else
                {
                  v27 = v109;
                  do
                  {
                    v64 = *(_OWORD *)(v61 - 64);
                    *(_QWORD *)(v63 - 48) = *(_QWORD *)(v61 - 48);
                    *(_OWORD *)(v63 - 64) = v64;
                    v65 = *(_QWORD *)(v61 - 40);
                    *(_QWORD *)(v61 - 40) = 0;
                    *(_QWORD *)(v63 - 40) = v65;
                    *(_QWORD *)(v63 - 32) = *(_QWORD *)(v61 - 32);
                    v66 = *(_OWORD *)(v61 - 24);
                    *(_QWORD *)(v63 - 8) = *(_QWORD *)(v61 - 8);
                    *(_OWORD *)(v63 - 24) = v66;
                    v63 -= 64;
                    v61 -= 64;
                  }
                  while (v61 != v62);
                  v67 = v145;
                  v53 = *(char **)&v127[16];
                }
                v145.i64[0] = v63;
                v145.i64[1] = (uint64_t)v53;
                *(int64x2_t *)&v127[8] = v67;
                v68 = v146;
                v146 = v128;
                v128 = v68;
                *(_QWORD *)v127 = v67.i64[0];
                sub_2367E4320((uint64_t)v127);
              }
              else
              {
                *(_DWORD *)v145.i64[1] = v45;
                *(_DWORD *)(v52 + 4) = v113;
                *(_QWORD *)(v52 + 8) = v121;
                *(_QWORD *)(v52 + 16) = v46;
                *(_QWORD *)(v52 + 24) = v111;
                *(_QWORD *)(v52 + 32) = v47;
                *(int8x16_t *)(v52 + 40) = v114;
                *(_QWORD *)(v52 + 56) = v51;
                v53 = (char *)(v52 + 64);
                v27 = v109;
              }
              v145.i64[1] = (uint64_t)v53;
            }
          }
        }
        ++v28;
        v18 = v29;
        v20 = *(_QWORD *)v29;
        a5 = v117;
      }
      while (v28 < (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 6);
      v23 = v22;
      v16 = v116;
      a6 = v27;
      a4 = v106;
      a2 = v107;
    }
LABEL_52:
    if (!v112 || !*(_BYTE *)(v18 + 258))
    {
      if (v145.i64[0] != v145.i64[1])
      {
        *(_OWORD *)v127 = xmmword_2368AF5C0;
        *(_QWORD *)&v127[16] = 1056964608;
        v69 = operator new(0x20uLL);
        v129 = (char **)(v69 + 2);
        v130 = v69 + 2;
        v70 = (__n128)unk_2369238EC;
        *v69 = xmmword_2369238DC;
        v69[1] = unk_2369238EC;
        v128 = (char *)v69;
        v131 = 1119879168;
        v132 = 32;
        v133 = 0xFFFFFFFFLL;
        v134 = 0x33F8147AELL;
        v135 = 0;
        v136 = xmmword_2368AF5B0;
        v137 = 2;
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v141 = -1;
        v142 = 256;
        v143 = 0;
        v144 = 0;
        if ((v112 & 1) != 0
          || (v71 = v69,
              v72 = sub_2367E29EC(v108, *(_QWORD *)(v18 + 224), *(_QWORD *)(v18 + 232)),
              v19 = sub_2367FF970(a4, (uint64_t)&v145, 0, v72, (unint64_t *)v127, 1, (uint64_t *)(v18 + 264), (_BYTE *)(v18 + 288), (uint64_t *)(v18 + 432)), v69 = v71, !(_DWORD)v19))
        {
          if (*(_BYTE *)(v18 + 258))
          {
            v74 = *(_QWORD *)v18;
            v73 = *(_QWORD *)(v18 + 8);
            if (v23 >= (v73 - *(_QWORD *)v18) >> 6)
            {
              v19 = 0;
            }
            else
            {
              v115 = v69;
              v75 = 0;
              v110 = a6;
              v118 = a5;
              do
              {
                v76 = v74 + (v23 << 6);
                v78 = *(_DWORD *)(v76 + 56);
                v77 = *(_DWORD *)(v76 + 60);
                if (v77 >= v78)
                  v79 = *(_DWORD *)(v76 + 56);
                else
                  v79 = *(_DWORD *)(v76 + 60);
                if (v79 <= a6 && v79 >= a5)
                {
                  v81 = (unint64_t)v16->i64[0] >> v78;
                  v82 = (unint64_t)v16->i64[1] >> v77;
                  v83 = (unint64_t)v16[1].i64[0] >> v78;
                  v84 = (unint64_t)v16[1].i64[1] >> v77;
                  v85 = *(_QWORD *)(v76 + 40);
                  v86 = *(_QWORD *)(v76 + 48);
                  v87 = v85 - v81;
                  if (v85 < v81)
                    v87 = 0;
                  if (v83 + v81 <= v85)
                    v88 = v83;
                  else
                    v88 = v87;
                  v89 = v86 - v82;
                  if (v86 < v82)
                    v89 = 0;
                  if (v84 + v82 <= v86)
                    v90 = v84;
                  else
                    v90 = v89;
                  if (v88)
                    v91 = v90 == 0;
                  else
                    v91 = 1;
                  if (!v91)
                  {
                    v92 = (uint64_t *)v18;
                    v93 = 0;
                    v94 = v75;
                    v95 = v145.i64[0] + ((uint64_t)v75 << 6);
                    v96 = *(_QWORD *)(v76 + 16);
                    v97 = 4 * v88;
                    v98 = 4 * v81;
                    v99 = *(_QWORD *)(v76 + 24) + v96 * v82;
                    do
                    {
                      memcpy((void *)(v99 + v98), (const void *)(*(_QWORD *)(v95 + 24) + *(_QWORD *)(v95 + 16) * v93++), v97);
                      v99 += v96;
                    }
                    while (v90 != v93);
                    v75 = v94 + 1;
                    v18 = (uint64_t)v92;
                    v74 = *v92;
                    v73 = v92[1];
                    a5 = v118;
                    v16 = v116;
                    a6 = v110;
                  }
                }
                ++v23;
              }
              while (v23 < (v73 - v74) >> 6);
              v19 = 0;
              v69 = v115;
            }
          }
          else
          {
            v100 = v69;
            v101 = *(_QWORD *)(v18 + 88);
            v102 = *(_QWORD *)(v18 + 96);
            if (v101 == v102)
            {
LABEL_95:
              v119[0] = 0;
              v119[1] = 0;
              v120 = v149;
              v19 = sub_2367E3964(v18, a2, (BOOL *)v145.i8, a9, a10, v119, *(double *)&v149, v70);
            }
            else
            {
              while (1)
              {
                v121 = &off_2508004C0;
                v103 = *(_OWORD *)(v101 + 8);
                v123 = *(_QWORD *)(v101 + 24);
                v122 = v103;
                memset(v124, 0, sizeof(v124));
                sub_2367E30AC(v124, *(_QWORD *)(v101 + 32), *(_QWORD *)(v101 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v101 + 40) - *(_QWORD *)(v101 + 32)) >> 3));
                v104 = *(_QWORD *)(v101 + 56);
                v126 = *(_WORD *)(v101 + 64);
                v125 = v104;
                v19 = sub_236801EF8((uint64_t)&v121, v145.i64, v18 + 472, 0);
                v121 = &off_2508004C0;
                if ((_DWORD)v19)
                  break;
                v160[0] = (void **)v124;
                sub_2367D78F8(v160);
                v101 += 72;
                if (v101 == v102)
                  goto LABEL_95;
              }
              v160[0] = (void **)v124;
              sub_2367D78F8(v160);
            }
            v69 = v100;
          }
        }
        operator delete(v69);
        goto LABEL_100;
      }
      v19 = 0;
      if (!a9 || !a11)
      {
LABEL_100:
        *(_QWORD *)v127 = &v147;
        sub_2367D6C98((void ***)v127);
        *(_QWORD *)v127 = &v145;
        sub_2367D6D24((void ***)v127);
        goto LABEL_101;
      }
      if (*(_BYTE *)(v18 + 256) || *(_DWORD *)(*(_QWORD *)(a2 + 408) + 320))
      {
        v19 = 0;
        *a11 = 0;
        goto LABEL_100;
      }
    }
    v19 = 0;
    goto LABEL_100;
  }
LABEL_101:
  sub_2367E2C48((uint64_t)&v152);
  return v19;
}

void sub_2367E38D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;

  sub_2367E2C08(&a37);
  sub_2367DC5FC(&a57);
  sub_2367E2C48(v57 - 224);
  _Unwind_Resume(a1);
}

uint64_t sub_2367E3964(uint64_t a1, uint64_t a2, BOOL *a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7, __n128 a8)
{
  uint64_t v10;
  unint64_t v13;
  int v14;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  double v20;
  int v21;
  unint64_t v22;
  unsigned int *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  int v49;
  double v50;
  unsigned int *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  float32x4_t *v80;
  int32x4_t *v81;
  int32x4_t v82;
  float *v83;
  int *v84;
  unint64_t v85;
  int v86;
  float v87;
  BOOL *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  _QWORD *v102;
  unsigned int *v103;
  BOOL *v104;
  uint64_t *v105;
  uint64_t *v106;
  double *v107;
  double *v108;
  uint64_t *v109;
  int v110;
  int v111;
  uint64_t v112;
  _QWORD v113[4];
  double v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t (*v120)();
  _QWORD *v121;

  v10 = *(_QWORD *)(a2 + 408);
  v116 = 0;
  v117 = a5;
  v90 = v10;
  if (*(_BYTE *)(a1 + 256))
  {
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 32);
    v16 = *(_DWORD *)(v10 + 104) == 1 && v14 == 1;
    if (*(_BYTE *)(v10 + 24))
      v17 = v14 == 0;
    else
      v17 = 1;
    v18 = !v17;
    v115 = v16;
    while (1)
    {
      v19 = *(_DWORD *)(a1 + 64);
      v20 = 1.0 / (double)~(-1 << v19);
      if (v19 > 31)
        v20 = 0.0;
      v114 = v20;
      v21 = *(_DWORD *)(a2 + 32);
      if (v21)
      {
        if (v16)
          v22 = 0;
        else
          v22 = v13;
      }
      else
      {
        v114 = *(float *)(*(_QWORD *)(a4 + 4208) + 4 * v13 + 256);
        v22 = 1 - v13;
        if (v13 >= 2)
          v22 = v13;
      }
      v23 = (unsigned int *)(*(_QWORD *)a3 + (v22 << 6));
      if (*((_QWORD *)v23 + 5))
        v24 = *((_QWORD *)v23 + 6) == 0;
      else
        v24 = 1;
      if (v24)
        return 1;
      v25 = *(_QWORD *)(a5 + 24) + 40 * v13;
      v26 = *(_QWORD *)(v25 + 24);
      v27 = *(_QWORD *)(v25 + 32);
      v28 = v23[14];
      v29 = v23[15];
      v30 = *a6 >> v28;
      v31 = a6[1] >> v29;
      v32 = (a6[2] + (1 << v28) - 1) / (unint64_t)(1 << v28);
      v33 = (a6[3] + (1 << v29) - 1) / (unint64_t)(1 << v29);
      v34 = *v23;
      v35 = v23[1];
      if (v34 >= v32 + v30)
        v36 = v32 + v30;
      else
        v36 = *v23;
      if (v35 >= v33 + v31)
        v37 = v33 + v31;
      else
        v37 = v23[1];
      v38 = v36 >= v30;
      v39 = v36 - v30;
      if (!v38)
        v39 = 0;
      if (v32 + v30 > v34)
        v32 = v39;
      v40 = v37 - v31;
      if (v37 < v31)
        v40 = 0;
      if (v33 + v31 > v35)
        v33 = v40;
      v113[0] = v30;
      v113[1] = v31;
      v113[2] = v32;
      v113[3] = v33;
      v112 = v26;
      if (v27 != v33 || v26 != v32)
        return 1;
      if (v13 != 2 || v21)
      {
        if (v18)
        {
          v43 = *(_DWORD *)(v90 + 28);
          v110 = *(_DWORD *)(v90 + 32);
          v111 = v43;
          v102 = v113;
          v103 = v23;
          v104 = &v115;
          v105 = &v117;
          v106 = &v112;
          v107 = (double *)&v111;
          v108 = (double *)&v110;
          v109 = &v116;
          v118 = 0;
          v119 = &v118;
          if ((_DWORD)v27)
          {
            v44 = 0;
            v120 = sub_2367CAAA0;
            v121 = &v102;
            do
              sub_2367E4154((uint64_t)&v120, v44++);
            while ((_DWORD)v27 != v44);
          }
        }
        else
        {
          v102 = v113;
          v103 = v23;
          v104 = &v115;
          v105 = (uint64_t *)a1;
          v106 = &v112;
          v107 = &v114;
          v108 = (double *)&v117;
          v109 = &v116;
          v118 = 0;
          v119 = &v118;
          if ((_DWORD)v27)
          {
            v45 = 0;
            v120 = sub_2367CAAA0;
            v121 = &v102;
            do
              sub_2367E3F28((uint64_t)&v120, v45++);
            while ((_DWORD)v27 != v45);
          }
        }
      }
      else
      {
        v102 = v113;
        v103 = v23;
        v104 = a3;
        v105 = &v117;
        v106 = &v116;
        v107 = (double *)&v112;
        v108 = &v114;
        v118 = 0;
        v119 = &v118;
        if ((_DWORD)v27)
        {
          v42 = 0;
          v120 = sub_2367CAAA0;
          v121 = &v102;
          do
            sub_2367E4248((uint64_t)&v120, v42++);
          while ((_DWORD)v27 != v42);
        }
      }
      if (v115)
        break;
      v16 = 0;
      v13 = v116 + 1;
      v116 = v13;
      if (v13 >= 3)
        goto LABEL_66;
    }
    v13 = 1;
    v116 = 1;
LABEL_66:
    v10 = v90;
  }
  else
  {
    v13 = 0;
  }
  v91 = *(unsigned int *)(v10 + 320);
  if (!(_DWORD)v91)
    return 0;
  v47 = 0;
  v88 = a3;
  v89 = a6;
  while (1)
  {
    v48 = *(_QWORD *)(v10 + 328) + 96 * v47;
    v99 = *(_DWORD *)(v48 + 28);
    v49 = *(unsigned __int8 *)(v48 + 24);
    v50 = 0.0;
    if (!*(_BYTE *)(v48 + 24))
      v50 = 1.0 / (double)~(-1 << v99);
    v51 = (unsigned int *)(*(_QWORD *)a3 + (v13 << 6));
    v52 = v47 + 3;
    v53 = (_QWORD *)(*(_QWORD *)(a5 + 24) + 40 * (v47 + 3));
    v55 = v53[3];
    v54 = v53[4];
    v56 = v51[14];
    v57 = v51[15];
    v58 = *a6 >> v56;
    v59 = a6[1] >> v57;
    result = 1;
    v60 = (a6[2] + (1 << v56) - 1) / (unint64_t)(1 << v56);
    v61 = (a6[3] + (1 << v57) - 1) / (unint64_t)(1 << v57);
    v62 = *v51;
    v63 = v51[1];
    if (v62 >= v60 + v58)
      v64 = v60 + v58;
    else
      v64 = *v51;
    if (v63 >= v61 + v59)
      v65 = v61 + v59;
    else
      v65 = v51[1];
    v100 = v58;
    v38 = v64 >= v58;
    v66 = v64 - v58;
    if (!v38)
      v66 = 0;
    if (v60 + v58 > v62)
      v60 = v66;
    v67 = v65 - v59;
    if (v65 < v59)
      v67 = 0;
    if (v61 + v59 > v63)
      v61 = v67;
    if (v54 != v61 || v55 != v60)
      break;
    if (v54)
    {
      v69 = v59;
      v70 = 0;
      v98 = *(_DWORD *)(v48 + 32);
      v71 = v53[2];
      a8.n128_f32[0] = v50;
      v97 = v53[1];
      v94 = 4 * v97;
      v92 = v47;
      v93 = 4 * v58;
      v72 = v59;
      v73 = v71;
      v96 = a8;
      do
      {
        v74 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 40 * v52);
        v75 = *(_QWORD *)(v74 + 16);
        v76 = *(_QWORD *)(v74 + 24);
        v77 = *((_QWORD *)v51 + 2);
        v78 = *((_QWORD *)v51 + 3);
        if (v49)
        {
          sub_2367E2814((unsigned int *)(v78 + v77 * (v70 + v69) + 4 * v100), (char *)(v76 + v75 * (v70 + v73) + 4 * v97), v55, v99, v98);
          a8 = v96;
        }
        else if (*(int *)(a1 + 64) > 22)
        {
          if (v55)
          {
            v83 = (float *)(v76 + v94 + v75 * v71);
            v84 = (int *)(v78 + v93 + v77 * v72);
            v85 = v55;
            do
            {
              v86 = *v84++;
              v87 = v50 * (double)v86;
              *v83++ = v87;
              --v85;
            }
            while (v85);
          }
        }
        else if (v55)
        {
          v79 = 0;
          v80 = (float32x4_t *)(v76 + v94 + v75 * v71);
          v81 = (int32x4_t *)(v78 + v93 + v77 * v72);
          do
          {
            v82 = *v81++;
            *v80++ = vmulq_n_f32(vcvtq_f32_s32(v82), a8.n128_f32[0]);
            v79 += 4;
          }
          while (v79 < v55);
        }
        ++v70;
        ++v71;
        ++v72;
      }
      while (v70 != v54);
      v13 = v116;
      a3 = v88;
      a6 = v89;
      v10 = v90;
      v47 = v92;
    }
    ++v47;
    v116 = ++v13;
    if (v47 == v91)
      return 0;
  }
  return result;
}

uint64_t sub_2367E3F28(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  float32x4_t *v10;
  float v11;
  float32x4_t *v12;
  float32x4_t *v13;
  int32x4_t v14;
  float32x4_t v15;
  _QWORD *v16;
  float *v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  float v21;
  int32x4_t v22;
  _QWORD *v23;
  float *v24;
  int *v25;
  unint64_t v26;
  int v27;
  float v28;
  float *v29;
  int *v30;
  unint64_t v31;
  int v32;
  float v33;
  float *v34;
  int v35;
  float v36;
  int v37;
  float v38;

  v2 = *(_QWORD *)(result + 8);
  v3 = (int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24)
             + *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) * (*(_QWORD *)(*(_QWORD *)v2 + 8) + a2)
             + 4 * **(_QWORD **)v2);
  v4 = *(_QWORD *)(v2 + 24);
  if (**(_BYTE **)(v2 + 16))
  {
    v5 = **(_QWORD **)(v2 + 32);
    v6 = **(double **)(v2 + 40);
    if (*(int *)(v4 + 64) > 22)
    {
      v23 = *(_QWORD **)(**(_QWORD **)(v2 + 48) + 24);
      if (v5)
      {
        v24 = (float *)(*(_QWORD *)(*v23 + 24) + *(_QWORD *)(*v23 + 16) * (v23[2] + a2) + 4 * v23[1]);
        v25 = v3;
        v26 = v5;
        do
        {
          v27 = *v25++;
          v28 = v6 * (double)v27;
          *v24++ = v28;
          --v26;
        }
        while (v26);
      }
      if (v5)
      {
        v29 = (float *)(*(_QWORD *)(v23[5] + 24) + *(_QWORD *)(v23[5] + 16) * (v23[7] + a2) + 4 * v23[6]);
        v30 = v3;
        v31 = v5;
        do
        {
          v32 = *v30++;
          v33 = v6 * (double)v32;
          *v29++ = v33;
          --v31;
        }
        while (v31);
      }
      if (v5)
      {
        v34 = (float *)(*(_QWORD *)(v23[10] + 24) + *(_QWORD *)(v23[10] + 16) * (v23[12] + a2) + 4 * v23[11]);
        do
        {
          v35 = *v3++;
          v36 = v6 * (double)v35;
          *v34++ = v36;
          --v5;
        }
        while (v5);
      }
    }
    else if (v5)
    {
      v7 = 0;
      v8 = *(_QWORD **)(**(_QWORD **)(v2 + 48) + 24);
      result = v8[11];
      v9 = *(_QWORD *)(v8[10] + 24) + *(_QWORD *)(v8[10] + 16) * (v8[12] + a2);
      v10 = (float32x4_t *)(*(_QWORD *)(*v8 + 24) + *(_QWORD *)(*v8 + 16) * (v8[2] + a2) + 4 * v8[1]);
      v11 = v6;
      v12 = (float32x4_t *)(*(_QWORD *)(v8[5] + 24) + *(_QWORD *)(v8[5] + 16) * (v8[7] + a2) + 4 * v8[6]);
      v13 = (float32x4_t *)(v9 + 4 * result);
      do
      {
        v14 = *(int32x4_t *)v3;
        v3 += 4;
        v15 = vmulq_n_f32(vcvtq_f32_s32(v14), v11);
        *v10++ = v15;
        *v12++ = v15;
        *v13++ = v15;
        v7 += 4;
      }
      while (v7 < v5);
    }
  }
  else
  {
    v16 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(v2 + 48) + 24) + 40 * **(_QWORD **)(v2 + 56));
    v17 = (float *)(*(_QWORD *)(*v16 + 24) + *(_QWORD *)(*v16 + 16) * (v16[2] + a2) + 4 * v16[1]);
    v18 = **(_QWORD **)(v2 + 32);
    v19 = **(double **)(v2 + 40);
    if (*(int *)(v4 + 64) > 22)
    {
      for (; v18; --v18)
      {
        v37 = *v3++;
        v38 = v19 * (double)v37;
        *v17++ = v38;
      }
    }
    else if (v18)
    {
      v20 = 0;
      v21 = v19;
      do
      {
        v22 = *(int32x4_t *)v3;
        v3 += 4;
        *(float32x4_t *)v17 = vmulq_n_f32(vcvtq_f32_s32(v22), v21);
        v17 += 4;
        v20 += 4;
      }
      while (v20 < v18);
    }
  }
  return result;
}

unsigned int *sub_2367E4154(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t i;
  _QWORD *v6;
  unsigned int *result;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2;
  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24)
                      + *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) * (*(_QWORD *)(*(_QWORD *)v2 + 8) + a2)
                      + 4 * **(_QWORD **)v2);
  if (**(_BYTE **)(v2 + 16))
  {
    for (i = 0; i != 120; i += 40)
    {
      v6 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(v2 + 24) + 24) + i);
      result = sub_2367E2814(v4, (char *)(*(_QWORD *)(*v6 + 24) + *(_QWORD *)(*v6 + 16) * (v6[2] + v3) + 4 * v6[1]), **(_QWORD **)(v2 + 32), **(_DWORD **)(v2 + 40), **(_DWORD **)(v2 + 48));
    }
  }
  else
  {
    v8 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(v2 + 24) + 24) + 40 * **(_QWORD **)(v2 + 56));
    return sub_2367E2814((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24)+ *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) * (*(_QWORD *)(*(_QWORD *)v2 + 8) + a2)+ 4 * **(_QWORD **)v2), (char *)(*(_QWORD *)(*v8 + 24) + *(_QWORD *)(*v8 + 16) * (v8[2] + a2) + 4 * v8[1]), **(_QWORD **)(v2 + 32), **(_DWORD **)(v2 + 40), **(_DWORD **)(v2 + 48));
  }
  return result;
}

uint64_t sub_2367E4248(uint64_t result, unsigned int a2)
{
  uint64_t **v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  float32x4_t *v14;
  float v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;

  v2 = *(uint64_t ***)(result + 8);
  v3 = *v2[5];
  if (v3)
  {
    v4 = 0;
    v5 = **v2;
    v6 = (*v2)[1] + a2;
    v7 = v2[1][3] + v2[1][2] * v6;
    v8 = *(_QWORD *)(*v2[2] + 24) + *(_QWORD *)(*v2[2] + 16) * v6;
    v9 = (_QWORD *)(*(_QWORD *)(*v2[3] + 24) + 40 * *v2[4]);
    v10 = v9[1];
    v11 = *(_QWORD *)(*v9 + 24) + *(_QWORD *)(*v9 + 16) * (v9[2] + a2);
    v12 = (int32x4_t *)(v7 + 4 * v5);
    v13 = (int32x4_t *)(v8 + 4 * v5);
    v14 = (float32x4_t *)(v11 + 4 * v10);
    v15 = *(double *)v2[6];
    do
    {
      v16 = *v12++;
      v17 = v16;
      v18 = *v13++;
      *v14++ = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(v18, v17)), v15);
      v4 += 4;
    }
    while (v4 < v3);
  }
  return result;
}

void *sub_2367E42EC(unint64_t a1)
{
  if (a1 >> 58)
    sub_2367C3488();
  return operator new(a1 << 6);
}

uint64_t sub_2367E4320(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    sub_2367C2F38((uint64_t *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_2367E4370(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = a3[3];
  if (v4)
  {
    v5 = 0;
    v7 = *(_QWORD *)(a4 + 16);
    v6 = *(_QWORD *)(a4 + 24);
    v8 = a3[2];
    do
    {
      if (v8)
      {
        v9 = 0;
        v10 = v6 + *a3 + v7 * (a3[1] + v5);
        v11 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 16) * (result[1] + v5) + 4 * *result;
        do
        {
          v12 = *(_DWORD *)(v11 + 4 * v9);
          if (v12 <= -128)
            v12 = -128;
          if (v12 >= 127)
            LOBYTE(v12) = 127;
          *(_BYTE *)(v10 + v9++) = v12;
          v8 = a3[2];
        }
        while (v9 < v8);
        v4 = a3[3];
      }
      ++v5;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t sub_2367E43F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = 0;
  if (byte_23692665C[a4] <= 1u)
    v6 = 1;
  else
    v6 = byte_23692665C[a4];
  if (byte_236926677[a4] <= 1u)
    v7 = 1;
  else
    v7 = byte_236926677[a4];
  while (2)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 40) + a3 * *(_QWORD *)(a1 + 48);
      if (a5 && *(unsigned __int8 *)(v9 + a2 + v8) != 255)
        return 1;
      *(_BYTE *)(v9 + a2 + v8) = (2 * a4) | ((v8 | v5) == 0);
      ++v8;
    }
    while (v6 != v8);
    ++v5;
    ++a3;
    if (v5 != v7)
      continue;
    break;
  }
  return 0;
}

uint64_t sub_2367E448C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  int64x2_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL8 v41;
  unsigned __int8 v42;
  __int128 v44;
  unsigned int **v46;
  int64x2_t v48;
  int64x2_t v49;
  unsigned int **v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  char v55;
  unsigned int v56;
  _OWORD v57[3];
  __int128 v58;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  int64x2_t v64;
  _OWORD v65[2];
  __int128 v66;
  __int128 v67;
  char v68;
  _BYTE v69[24];
  char *v70;
  _OWORD *v71;
  unsigned int v72;

  v62 = a3;
  if (*(_BYTE *)(a1 + 258))
  {
    v6 = a4;
    v8 = a2;
    v9 = (unsigned int **)a1;
    v58 = 0u;
    memset(v57, 0, sizeof(v57));
    v59 = 8;
    v60 = 0;
    v61 = 1;
    if (a5)
    {
      sub_23680046C((uint64_t)v57, a1);
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 64);
      v64 = 0uLL;
      memset(v65, 0, sizeof(v65));
      v66 = *(_OWORD *)(a1 + 48);
      LODWORD(v67) = v11;
      *((_QWORD *)&v67 + 1) = *(_QWORD *)(a1 + 72);
      v68 = *(_BYTE *)(a1 + 80);
      if (&v64 != (int64x2_t *)a1)
        sub_2367E2A68((uint64_t)v65 + 8, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
      v46 = v9;
      v13 = *v9;
      v12 = v9[1];
      if (*v9 == v12)
      {
LABEL_28:
        v10 = 0;
        v56 = 0;
        v48 = v64;
        v49 = v64;
        v55 = v68;
        v5 = *(_QWORD **)&v65[0];
        v12 = (unsigned int *)*((_QWORD *)&v65[1] + 1);
        v50 = *(unsigned int ***)&v65[0];
        v64 = 0uLL;
        memset(v65, 0, sizeof(v65));
        v44 = *(_OWORD *)((char *)v65 + 8);
        v51 = *(_OWORD *)((char *)v65 + 8);
        v52 = *((_QWORD *)&v65[1] + 1);
        v53 = v66;
        v54 = v67;
      }
      else
      {
        v48.i64[0] = (uint64_t)v65;
        while (1)
        {
          v15 = *((_QWORD *)v13 + 5);
          v14 = *((_QWORD *)v13 + 6);
          v16 = *((_QWORD *)v13 + 7);
          sub_2367DA410((uint64_t)v69, v15, v14);
          v10 = v72;
          if (v72)
            break;
          v63 = *(_OWORD *)v69;
          v17 = *(_QWORD *)&v69[16];
          v18 = v70;
          v19 = v71;
          if (v13[1] && *v13)
          {
            v20 = 0;
            v21 = v70;
            do
            {
              memcpy(v21, (const void *)(*((_QWORD *)v13 + 3) + *((_QWORD *)v13 + 2) * v20++), 4 * *v13);
              v21 += v17;
            }
            while (v20 < v13[1]);
          }
          v22 = (_QWORD *)v64.i64[1];
          if (v64.i64[1] >= *(_QWORD *)&v65[0])
          {
            v23 = (v64.i64[1] - v64.i64[0]) >> 6;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 58)
              sub_2367C3440();
            v25 = *(_QWORD *)&v65[0] - v64.i64[0];
            if ((*(_QWORD *)&v65[0] - v64.i64[0]) >> 5 > v24)
              v24 = v25 >> 5;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFC0)
              v26 = 0x3FFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            v71 = v65;
            v27 = (char *)sub_2367E42EC(v26);
            v28 = &v27[64 * v23];
            *(_QWORD *)v69 = v27;
            *(_QWORD *)&v69[8] = v28;
            v70 = &v27[64 * v29];
            *(_OWORD *)v28 = v63;
            *((_QWORD *)v28 + 2) = v17;
            *((_QWORD *)v28 + 3) = v18;
            *((_QWORD *)v28 + 4) = v19;
            *((_QWORD *)v28 + 5) = v15;
            *((_QWORD *)v28 + 6) = v14;
            *((_QWORD *)v28 + 7) = v16;
            v5 = v28 + 64;
            *(_QWORD *)&v69[16] = v28 + 64;
            v30 = v64.i64[1];
            v31 = v64.i64[0];
            v32 = *(_QWORD *)&v69[8];
            if (v64.i64[1] == v64.i64[0])
            {
              v36 = vdupq_n_s64(v64.u64[1]);
            }
            else
            {
              do
              {
                v33 = *(_OWORD *)(v30 - 64);
                *(_QWORD *)(v32 - 48) = *(_QWORD *)(v30 - 48);
                *(_OWORD *)(v32 - 64) = v33;
                v34 = *(_QWORD *)(v30 - 40);
                *(_QWORD *)(v30 - 40) = 0;
                *(_QWORD *)(v32 - 40) = v34;
                *(_QWORD *)(v32 - 32) = *(_QWORD *)(v30 - 32);
                v35 = *(_OWORD *)(v30 - 24);
                *(_QWORD *)(v32 - 8) = *(_QWORD *)(v30 - 8);
                *(_OWORD *)(v32 - 24) = v35;
                v32 -= 64;
                v30 -= 64;
              }
              while (v30 != v31);
              v36 = v64;
              v5 = *(_QWORD **)&v69[16];
            }
            v64.i64[0] = v32;
            v64.i64[1] = (uint64_t)v5;
            *(int64x2_t *)&v69[8] = v36;
            v37 = *(char **)&v65[0];
            *(_QWORD *)&v65[0] = v70;
            v70 = v37;
            *(_QWORD *)v69 = v36.i64[0];
            sub_2367E4320((uint64_t)v69);
          }
          else
          {
            *(_OWORD *)v64.i64[1] = v63;
            v22[2] = v17;
            v22[3] = v18;
            v22[4] = v19;
            v22[5] = v15;
            v22[6] = v14;
            v22[7] = v16;
            v5 = v22 + 8;
          }
          v64.i64[1] = (uint64_t)v5;
          v13 += 16;
          if (v13 == v12)
            goto LABEL_28;
        }
        v56 = v72;
      }
      *(_QWORD *)v69 = (char *)v65 + 8;
      sub_2367D6C98((void ***)v69);
      *(_QWORD *)v69 = &v64;
      sub_2367D6D24((void ***)v69);
      v9 = v46;
      v6 = a4;
      if ((_DWORD)v10)
      {
        sub_2367E2C48((uint64_t)&v49);
LABEL_48:
        v49.i64[0] = (uint64_t)&v57[1] + 8;
        sub_2367D6C98((void ***)&v49);
        v49.i64[0] = (uint64_t)v57;
        sub_2367D6D24((void ***)&v49);
        return v10;
      }
      v64 = v48;
      v49 = 0uLL;
      v50 = 0;
      v51 = 0uLL;
      *(_OWORD *)((char *)v65 + 8) = v44;
      *(_QWORD *)&v65[0] = v5;
      *((_QWORD *)&v65[1] + 1) = v12;
      v52 = 0;
      v66 = v53;
      v67 = v54;
      v68 = v55;
      sub_23680046C((uint64_t)v57, (uint64_t)&v64);
      *(_QWORD *)v69 = (char *)v65 + 8;
      sub_2367D6C98((void ***)v69);
      *(_QWORD *)v69 = &v64;
      sub_2367D6D24((void ***)v69);
      sub_2367E2C48((uint64_t)&v49);
      v8 = a2;
    }
    if (*((_QWORD *)&v58 + 1) * (_QWORD)v58 >= (_QWORD)v9[30] * (_QWORD)v9[30])
      v38 = v6;
    else
      v38 = 0;
    sub_23680008C((uint64_t)v57, (uint64_t)(v9 + 59), (uint64_t)v38);
    if (v61)
    {
      v10 = 1;
    }
    else
    {
      if (*(_QWORD *)(*(_QWORD *)(a3 + 4208) + 120))
      {
        v39 = 0;
        do
        {
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a3 + 4488) + 16))(*(_QWORD *)(a3 + 4488), v39++);
          v40 = *(_QWORD *)(*(_QWORD *)(a3 + 4208) + 120);
        }
        while (v39 < v40);
      }
      else
      {
        v40 = 0;
      }
      LOBYTE(v63) = 0;
      *(_QWORD *)v69 = v8;
      *(_QWORD *)&v69[8] = &v62;
      v49.i64[0] = (uint64_t)&v63;
      v49.i64[1] = (uint64_t)&v62;
      v50 = v9;
      *(_QWORD *)&v51 = v8;
      *((_QWORD *)&v51 + 1) = v57;
      if (v38)
      {
        v41 = sub_2367E49D0(v38, v40, (uint64_t *)v69, v49.i64);
      }
      else
      {
        v64.i64[0] = 0;
        v64.i64[1] = (uint64_t)&v64;
        v41 = sub_2367E49D0(&v64, v40, (uint64_t *)v69, v49.i64);
      }
      v10 = v41;
      if (!v41)
      {
        v42 = atomic_load((unsigned __int8 *)&v63);
        v10 = v42 & 1;
      }
    }
    goto LABEL_48;
  }
  return 0;
}

void sub_2367E4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_2367DC5FC(&a29);
  _Unwind_Resume(a1);
}

BOOL sub_2367E49D0(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  unsigned int i;
  uint64_t *v8[2];

  if (!(_DWORD)a2)
    return 0;
  v4 = a2;
  v8[0] = a3;
  v8[1] = a4;
  if (!*a1)
  {
    v5 = 1;
    if (sub_2367E4A70(v8, 1))
      return v5;
    for (i = 0; i != v4; ++i)
      sub_2367E4AB8((uint64_t)v8, i, 0);
    return 0;
  }
  return ((unsigned int (*)(_QWORD, uint64_t **, uint64_t (*)(uint64_t **, uint64_t), void (*)(uint64_t, unsigned int, uint64_t), _QWORD, uint64_t))*a1)(a1[1], v8, sub_2367E4A70, sub_2367E4AB8, 0, a2) != 0;
}

uint64_t sub_2367E4A70(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 12))
    v3 = *(_BYTE *)(v2 + 24) & 1;
  else
    v3 = 1;
  if (sub_23688A310(*(_QWORD **)(*(_QWORD *)(*a1)[1] + 4488), a2, v3))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_2367E4AB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  double v9;
  uint64_t v10;
  BOOL *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *__p[2];
  unint64_t v32;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = atomic_load(*(unsigned __int8 **)v3);
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(**(_QWORD **)(v3 + 8) + 4488);
    v7 = a2;
    v29 = a2;
    v30 = a3;
    v28 = v6;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v25, v6, a2);
    v9 = *(double *)&v25;
    *(_OWORD *)__p = v25;
    v32 = v26;
    v10 = *(_QWORD *)(v3 + 24);
    v11 = *(BOOL **)(v3 + 32);
    v12 = **(_QWORD **)(v3 + 8);
    v13 = *(_QWORD **)(v12 + 4208);
    v14 = v13[11];
    v15 = v13[17];
    v16 = v15 * (v7 / v14);
    v18 = v13[1];
    v17 = v13[2];
    *(_QWORD *)&v25 = v15 * (v7 % v14);
    *((_QWORD *)&v25 + 1) = v16;
    v19 = v18 - v25;
    if (v18 < (unint64_t)v25)
      v19 = 0;
    if ((unint64_t)v25 + v15 <= v18)
      v19 = v15;
    v20 = v16 + v15;
    v21 = v17 >= v16;
    v22 = v17 - v16;
    if (!v21)
      v22 = 0;
    if (v20 <= v17)
      v23 = v15;
    else
      v23 = v22;
    v26 = v19;
    v27 = v23;
    if (sub_2367E3964(v4, v10, v11, v12, (uint64_t)&v28, &v25, v9, v8)
      || (v24 = v28,
          ++*(_BYTE *)(*(_QWORD *)(v28 + 224) + v29),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24)))
    {
      atomic_store(1u, *(unsigned __int8 **)v3);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_2367E4BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_2367E4C04(int64x2_t *result, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64x2_t *v20;
  int64x2_t *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int8x16_t v25;
  unint64_t v26;
  uint32x4_t *v27;
  int8x16_t *v28;
  uint32x4_t v29;
  unint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t *v36;
  uint32x4_t *v37;
  uint32x4_t v38;
  _OWORD v39[4];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = a2[2];
  v4 = a2[3];
  memset(v39, 0, sizeof(v39));
  if (v4)
  {
    v5 = 0;
    v7 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v8 = result + 4;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      v14 = *a2;
      v15 = a2[1];
      if (v3 < 0x11)
      {
        v18 = 0;
      }
      else
      {
        v16 = (int8x16_t *)(v6 + v7 * (v15 + v5) + 4 * v14);
        v17 = 16;
        do
        {
          v18 = v17;
          v19 = -2;
          v20 = (int64x2_t *)v39;
          v21 = v8;
          do
          {
            v22 = v21[-4];
            v23 = *(int8x16_t *)v21;
            v24 = vaddq_s64(*v21, v22);
            v21[-4] = *v21;
            v25 = veorq_s8((int8x16_t)vshlq_n_s64(v22, 0x17uLL), (int8x16_t)v22);
            *v20++ = v24;
            *(int8x16_t *)v21++ = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v23, 5uLL), v23), v25), (int8x16_t)vshrq_n_u64((uint64x2_t)v25, 0x12uLL));
            v19 += 2;
          }
          while (v19 < 6);
          v26 = -4;
          v27 = (uint32x4_t *)v39;
          v28 = v16;
          do
          {
            v29 = *v27++;
            *v28++ = vorrq_s8((int8x16_t)vshrq_n_u32(v29, 9uLL), _Q0);
            v26 += 4;
          }
          while (v26 < 0xC);
          v17 = v18 + 16;
          v16 += 4;
        }
        while (v18 + 16 < v3);
      }
      v30 = -2;
      result = (int64x2_t *)v39;
      v31 = v8;
      do
      {
        v32 = v31[-4];
        v33 = *(int8x16_t *)v31;
        v34 = vaddq_s64(*v31, v32);
        v31[-4] = *v31;
        v35 = veorq_s8((int8x16_t)vshlq_n_s64(v32, 0x17uLL), (int8x16_t)v32);
        *result++ = v34;
        *(int8x16_t *)v31++ = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v33, 5uLL), v33), v35), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 0x12uLL));
        v30 += 2;
      }
      while (v30 < 6);
      if (v18 < v3)
      {
        v36 = (int8x16_t *)(v6 + v7 * (v15 + v5) + 4 * v18 + 4 * v14);
        v37 = (uint32x4_t *)v39;
        do
        {
          v38 = *v37++;
          *v36++ = vorrq_s8((int8x16_t)vshrq_n_u32(v38, 9uLL), _Q0);
          v18 += 4;
        }
        while (v18 < v3);
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

void *sub_2367E4DB0(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    sub_2367C3488();
  return operator new(12 * a1);
}

void sub_2367E4DF4(void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0x666666666666666)
      sub_2367C3440();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)sub_2367DC0A4(v12);
    else
      v13 = 0;
    v14 = v12 + 40 * v9;
    v15 = v12 + 40 * v13;
    v16 = *a2;
    v17 = a2[1];
    *(_QWORD *)(v14 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v14 = v16;
    *(_OWORD *)(v14 + 16) = v17;
    v8 = (void *)(v14 + 40);
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 40);
        v21 = *(_OWORD *)(v18 - 24);
        *(_QWORD *)(v14 - 8) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = (void *)v14;
    a1[1] = v8;
    a1[2] = (void *)v15;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    *((_QWORD *)v4 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v4 = v6;
    *((_OWORD *)v4 + 1) = v7;
    v8 = v4 + 40;
  }
  a1[1] = v8;
}

void sub_2367E4F18(_QWORD *a1)
{
  uint64_t v1;
  char **v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _BOOL4 v130;
  char *v131;
  unint64_t v132;
  __int128 *v133;

  v2 = (char **)(a1 + 13);
  v1 = a1[13];
  a1[11] = a1[10];
  a1[14] = v1;
  a1[17] = a1[16];
  a1[20] = a1[19];
  v4 = a1[1];
  v3 = a1[2];
  if (v4 != v3)
  {
    v5 = v3 - v4;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_2367C3440();
    v8 = (char *)operator new(v5);
    v9 = 24 * ((v5 - 24) / 0x18) + 24;
    bzero(v8, v9);
    v10 = 0;
    v11 = 0;
    v12 = a1[4];
    if (v6 <= 1)
      v13 = 1;
    else
      v13 = v6;
    do
    {
      v14 = &v8[v10];
      v16 = *(_QWORD *)(v4 + v10 + 8);
      v15 = *(_QWORD *)(v4 + v10 + 16);
      *(_QWORD *)v14 = v11;
      *((_QWORD *)v14 + 1) = v16;
      *((_QWORD *)v14 + 2) = *(_QWORD *)(v12 + 40 * v15 + 32) + v16;
      ++v11;
      v10 += 24;
    }
    while (v13 != v11);
    v17 = (unint64_t)&v8[v9];
    v18 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    sub_2367E5818((uint64_t)v8, v17, 126 - 2 * __clz(v18), 1);
    sub_2367D7BB0(v2, *(_QWORD *)(v17 - 8));
    v19 = v8;
    do
    {
      v21 = *((_QWORD *)v19 + 1);
      v20 = *((_QWORD *)v19 + 2);
      v22 = v20 > v21;
      v23 = v20 - v21;
      if (v22)
      {
        v24 = &(*v2)[8 * v21];
        do
        {
          ++*(_QWORD *)v24;
          v24 += 8;
          --v23;
        }
        while (v23);
      }
      v19 += 24;
    }
    while (v19 != (char *)v17);
    v26 = (char *)a1[11];
    v25 = a1[12];
    if ((unint64_t)v26 >= v25)
    {
      v28 = (char *)a1[10];
      v29 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - v28) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0x666666666666666)
        sub_2367C3440();
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v28) >> 3);
      if (2 * v31 > v30)
        v30 = 2 * v31;
      if (v31 >= 0x333333333333333)
        v32 = 0x666666666666666;
      else
        v32 = v30;
      if (v32)
      {
        v32 = (unint64_t)sub_2367DC0A4(v32);
        v28 = (char *)a1[10];
        v26 = (char *)a1[11];
      }
      else
      {
        v33 = 0;
      }
      v34 = v32 + 40 * v29;
      v35 = v32 + 40 * v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = v18;
      v27 = (char *)(v34 + 40);
      if (v26 != v28)
      {
        do
        {
          v36 = *(_OWORD *)(v26 - 40);
          v37 = *(_OWORD *)(v26 - 24);
          *(_QWORD *)(v34 - 8) = *((_QWORD *)v26 - 1);
          *(_OWORD *)(v34 - 24) = v37;
          *(_OWORD *)(v34 - 40) = v36;
          v34 -= 40;
          v26 -= 40;
        }
        while (v26 != v28);
        v28 = (char *)a1[10];
      }
      a1[10] = v34;
      a1[11] = v27;
      a1[12] = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *((_QWORD *)v26 + 3) = 0;
      *((_QWORD *)v26 + 4) = v18;
      v27 = v26 + 40;
    }
    a1[11] = v27;
    v38 = (char *)a1[10];
    if (v27 != v38)
    {
      v39 = 0;
      while (1)
      {
        v132 = v39;
        v40 = &v38[40 * v39];
        v42 = (uint64_t *)(v40 + 24);
        v41 = *((_QWORD *)v40 + 3);
        v43 = (unint64_t *)(v40 + 32);
        v44 = *((_QWORD *)v40 + 4);
        v45 = v44 + v41;
        v46 = &v8[24 * v41];
        v47 = (__int128 *)&v8[24 * v44 + 24 * v41];
        v48 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v47 - v46) >> 3));
        v49 = v44 ? v48 : 0;
        sub_2367E60C4((uint64_t)&v8[24 * v41], v47, v49, 1);
        v50 = *v43;
        v51 = v41 + (*v43 >> 1);
        v52 = *(_QWORD *)&v8[24 * v51 + 8];
        v131 = v40;
        *((_QWORD *)v40 + 2) = v52;
        v53 = (unint64_t *)(v40 + 16);
        v129 = v44 + v41;
        if (v51 >= v45)
        {
          v130 = 0;
        }
        else
        {
          v54 = v50 >> 1;
          v55 = &v8[24 * v51 + 32];
          v56 = ~v54 + v44;
          while (v56)
          {
            v57 = *(_QWORD *)v55;
            v55 += 24;
            --v56;
            ++v51;
            if (v57 != v52)
              goto LABEL_42;
          }
          v51 = v44 + v41;
LABEL_42:
          v130 = v51 < v45;
        }
        v58 = (unint64_t)&v8[24 * v51];
        v59 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)v46) >> 3));
        v60 = v51 == v41 ? 0 : v59;
        v61 = v51 >= v41 ? v41 : v51;
        v133 = (__int128 *)&v8[24 * v51];
        sub_2367E5818((uint64_t)&v8[24 * v41], v58, v60, 1);
        v62 = &v8[24 * v51 - 8];
        v63 = v51;
        while (1)
        {
          v64 = v63;
          if (v63 <= v41)
            break;
          --v63;
          v65 = *(_QWORD *)v62;
          v62 -= 24;
          if (v65 <= *v53)
          {
            v61 = v64;
            break;
          }
        }
        *v42 = (uint64_t)(a1[17] - a1[16]) >> 4;
        *v43 = v51 - v61;
        if ((uint64_t)v51 > v61)
        {
          v66 = (_QWORD *)a1[20];
          v67 = v51;
          do
          {
            --v67;
            v68 = &v8[24 * v67];
            v69 = v68 + 16;
            v70 = a1[21];
            if ((unint64_t)v66 >= v70)
            {
              v71 = a1[19];
              v72 = ((uint64_t)v66 - v71) >> 4;
              if ((unint64_t)(v72 + 1) >> 60)
                sub_2367C3440();
              v73 = v70 - v71;
              v74 = v73 >> 3;
              if (v73 >> 3 <= (unint64_t)(v72 + 1))
                v74 = v72 + 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
                v75 = 0xFFFFFFFFFFFFFFFLL;
              else
                v75 = v74;
              v76 = (char *)sub_2367CD8AC(v75);
              v78 = &v76[16 * v72];
              *(_QWORD *)v78 = *v69;
              *((_QWORD *)v78 + 1) = *(_QWORD *)v68;
              v80 = (char *)a1[19];
              v79 = (char *)a1[20];
              v81 = v78;
              if (v79 != v80)
              {
                do
                {
                  *((_OWORD *)v81 - 1) = *((_OWORD *)v79 - 1);
                  v81 -= 16;
                  v79 -= 16;
                }
                while (v79 != v80);
                v79 = (char *)a1[19];
              }
              v66 = v78 + 16;
              a1[19] = v81;
              a1[20] = v78 + 16;
              a1[21] = &v76[16 * v77];
              if (v79)
                operator delete(v79);
            }
            else
            {
              *v66 = *v69;
              v66[1] = *(_QWORD *)v68;
              v66 += 2;
            }
            a1[20] = v66;
          }
          while (v67 > v61);
        }
        v82 = (uint64_t)&v8[24 * v61];
        v83 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v133 - v82) >> 3));
        if (v51 == v61)
          v84 = 0;
        else
          v84 = v83;
        sub_2367E60C4(v82, v133, v84, 1);
        if (v51 > v61)
        {
          v85 = (_QWORD *)a1[17];
          v86 = v61;
          do
          {
            v87 = &v8[24 * v86];
            v88 = v87 + 8;
            v89 = a1[18];
            if ((unint64_t)v85 >= v89)
            {
              v90 = a1[16];
              v91 = ((uint64_t)v85 - v90) >> 4;
              if ((unint64_t)(v91 + 1) >> 60)
                sub_2367C3440();
              v92 = v89 - v90;
              v93 = v92 >> 3;
              if (v92 >> 3 <= (unint64_t)(v91 + 1))
                v93 = v91 + 1;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0)
                v94 = 0xFFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              v95 = (char *)sub_2367CD8AC(v94);
              v97 = &v95[16 * v91];
              *(_QWORD *)v97 = *v88;
              *((_QWORD *)v97 + 1) = *(_QWORD *)v87;
              v99 = (char *)a1[16];
              v98 = (char *)a1[17];
              v100 = v97;
              if (v98 != v99)
              {
                do
                {
                  *((_OWORD *)v100 - 1) = *((_OWORD *)v98 - 1);
                  v100 -= 16;
                  v98 -= 16;
                }
                while (v98 != v99);
                v98 = (char *)a1[16];
              }
              v85 = v97 + 16;
              a1[16] = v100;
              a1[17] = v97 + 16;
              a1[18] = &v95[16 * v96];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *v85 = *v88;
              v85[1] = *(_QWORD *)v87;
              v85 += 2;
            }
            a1[17] = v85;
            ++v86;
          }
          while (v86 != v51);
        }
        *(_QWORD *)v131 = -1;
        *((_QWORD *)v131 + 1) = -1;
        v38 = (char *)a1[10];
        v101 = (_QWORD *)a1[11];
        if (v64 > v41)
          break;
        v104 = v132;
        if (v130)
          goto LABEL_108;
LABEL_125:
        v39 = v104 + 1;
        if (v39 >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v101 - v38) >> 3))
          goto LABEL_126;
      }
      v102 = v61 - v41;
      v103 = ((char *)v101 - v38) / 40;
      v104 = v132;
      *(_QWORD *)&v38[40 * v132] = v103;
      v105 = a1[12];
      if ((unint64_t)v101 >= v105)
      {
        if ((unint64_t)(v103 + 1) > 0x666666666666666)
          sub_2367C3440();
        v107 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v105 - (_QWORD)v38) >> 3);
        v108 = 2 * v107;
        if (2 * v107 <= v103 + 1)
          v108 = v103 + 1;
        if (v107 >= 0x333333333333333)
          v109 = 0x666666666666666;
        else
          v109 = v108;
        if (v109)
        {
          v109 = (unint64_t)sub_2367DC0A4(v109);
          v101 = (_QWORD *)a1[11];
        }
        else
        {
          v110 = 0;
        }
        v111 = v109 + 40 * v103;
        *(_QWORD *)(v111 + 24) = v41;
        *(_QWORD *)(v111 + 32) = v102;
        v112 = (_QWORD *)a1[10];
        v113 = v111;
        if (v101 != v112)
        {
          do
          {
            v114 = *(_OWORD *)(v101 - 5);
            v115 = *(_OWORD *)(v101 - 3);
            *(_QWORD *)(v113 - 8) = *(v101 - 1);
            *(_OWORD *)(v113 - 24) = v115;
            *(_OWORD *)(v113 - 40) = v114;
            v113 -= 40;
            v101 -= 5;
          }
          while (v101 != v112);
          v101 = (_QWORD *)a1[10];
        }
        v106 = (_QWORD *)(v111 + 40);
        a1[10] = v113;
        a1[11] = v111 + 40;
        a1[12] = v109 + 40 * v110;
        if (v101)
          operator delete(v101);
      }
      else
      {
        v101[3] = v41;
        v101[4] = v102;
        v106 = v101 + 5;
      }
      a1[11] = v106;
      v38 = (char *)a1[10];
      v101 = v106;
      if (!v130)
        goto LABEL_125;
LABEL_108:
      v116 = v129 - v51;
      v117 = ((char *)v101 - v38) / 40;
      *(_QWORD *)&v38[40 * v104 + 8] = v117;
      v118 = a1[12];
      if ((unint64_t)v101 >= v118)
      {
        if ((unint64_t)(v117 + 1) > 0x666666666666666)
          sub_2367C3440();
        v120 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v118 - (_QWORD)v38) >> 3);
        v121 = 2 * v120;
        if (2 * v120 <= v117 + 1)
          v121 = v117 + 1;
        if (v120 >= 0x333333333333333)
          v122 = 0x666666666666666;
        else
          v122 = v121;
        if (v122)
        {
          v122 = (unint64_t)sub_2367DC0A4(v122);
          v101 = (_QWORD *)a1[11];
        }
        else
        {
          v123 = 0;
        }
        v124 = v122 + 40 * v117;
        *(_QWORD *)(v124 + 24) = v51;
        *(_QWORD *)(v124 + 32) = v116;
        v125 = (_QWORD *)a1[10];
        v126 = v124;
        if (v101 != v125)
        {
          do
          {
            v127 = *(_OWORD *)(v101 - 5);
            v128 = *(_OWORD *)(v101 - 3);
            *(_QWORD *)(v126 - 8) = *(v101 - 1);
            *(_OWORD *)(v126 - 24) = v128;
            *(_OWORD *)(v126 - 40) = v127;
            v126 -= 40;
            v101 -= 5;
          }
          while (v101 != v125);
          v101 = (_QWORD *)a1[10];
        }
        v119 = (_QWORD *)(v124 + 40);
        a1[10] = v126;
        a1[11] = v124 + 40;
        a1[12] = v122 + 40 * v123;
        if (v101)
          operator delete(v101);
      }
      else
      {
        v101[3] = v51;
        v101[4] = v116;
        v119 = v101 + 5;
      }
      a1[11] = v119;
      v38 = (char *)a1[10];
      v101 = v119;
      goto LABEL_125;
    }
LABEL_126:
    operator delete(v8);
  }
}

void sub_2367E57E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2367E5818(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  _OWORD *v58;
  BOOL v60;
  uint64_t v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  unint64_t v100;
  unint64_t v101;
  _OWORD *v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

LABEL_1:
  v8 = (__int128 *)(a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(v9 + 16))
        {
          v117 = *(_QWORD *)(v9 + 16);
          v109 = *(_OWORD *)v9;
          v47 = *v8;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v9 = v47;
          *(_QWORD *)(a2 - 8) = v117;
          *v8 = v109;
        }
        return;
      case 3:
        sub_2367E6D90((__int128 *)v9, (__int128 *)(v9 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_2367E6E80(v9, v9 + 24, v9 + 48, a2 - 24);
        return;
      case 5:
        v48 = (__int128 *)(v9 + 24);
        v49 = (__int128 *)(v9 + 48);
        v50 = (__int128 *)(v9 + 72);
        sub_2367E6E80(v9, v9 + 24, v9 + 48, v9 + 72);
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(v9 + 88))
        {
          v51 = *v50;
          v52 = *(_QWORD *)(v9 + 88);
          v53 = *(_QWORD *)(a2 - 8);
          *v50 = *v8;
          *(_QWORD *)(v9 + 88) = v53;
          *(_QWORD *)(a2 - 8) = v52;
          *v8 = v51;
          if (*(_QWORD *)(v9 + 88) < *(_QWORD *)(v9 + 64))
          {
            v54 = *(_QWORD *)(v9 + 64);
            v55 = *v49;
            *v49 = *v50;
            *(_QWORD *)(v9 + 64) = *(_QWORD *)(v9 + 88);
            *v50 = v55;
            *(_QWORD *)(v9 + 88) = v54;
            if (*(_QWORD *)(v9 + 64) < *(_QWORD *)(v9 + 40))
            {
              v56 = *(_QWORD *)(v9 + 40);
              v57 = *v48;
              *v48 = *v49;
              *(_QWORD *)(v9 + 40) = *(_QWORD *)(v9 + 64);
              *v49 = v57;
              *(_QWORD *)(v9 + 64) = v56;
              if (*(_QWORD *)(v9 + 40) < *(_QWORD *)(v9 + 16))
              {
                v118 = *(_QWORD *)(v9 + 16);
                v110 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v48;
                *(_QWORD *)(v9 + 16) = *(_QWORD *)(v9 + 40);
                *v48 = v110;
                *(_QWORD *)(v9 + 40) = v118;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          v58 = (_OWORD *)(v9 + 24);
          v60 = v9 == a2 || v58 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = (_OWORD *)v9;
              do
              {
                v63 = *((_QWORD *)v62 + 5);
                v64 = *((_QWORD *)v62 + 2);
                v62 = v58;
                if (v63 < v64)
                {
                  v111 = *v58;
                  v65 = v61;
                  while (1)
                  {
                    v66 = v9 + v65;
                    *(_OWORD *)(v66 + 24) = *(_OWORD *)(v9 + v65);
                    *(_QWORD *)(v66 + 40) = *(_QWORD *)(v9 + v65 + 16);
                    if (!v65)
                      break;
                    v65 -= 24;
                    if (v63 >= *(_QWORD *)(v66 - 8))
                    {
                      v67 = v9 + v65 + 24;
                      goto LABEL_78;
                    }
                  }
                  v67 = v9;
LABEL_78:
                  *(_OWORD *)v67 = v111;
                  *(_QWORD *)(v67 + 16) = v63;
                }
                v58 = (_OWORD *)((char *)v62 + 24);
                v61 += 24;
              }
              while ((_OWORD *)((char *)v62 + 24) != (_OWORD *)a2);
            }
          }
          else if (!v60)
          {
            do
            {
              v100 = *(_QWORD *)(a1 + 40);
              v101 = *(_QWORD *)(a1 + 16);
              a1 = (uint64_t)v58;
              if (v100 < v101)
              {
                v114 = *v58;
                v102 = v58;
                do
                {
                  *v102 = *(_OWORD *)((char *)v102 - 24);
                  *((_QWORD *)v102 + 2) = *((_QWORD *)v102 - 1);
                  v103 = *((_QWORD *)v102 - 4);
                  v102 = (_OWORD *)((char *)v102 - 24);
                }
                while (v100 < v103);
                *v102 = v114;
                *((_QWORD *)v102 + 2) = v100;
              }
              v58 = (_OWORD *)(a1 + 24);
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v68 = (unint64_t)(v11 - 2) >> 1;
            v69 = v68;
            do
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = v9 + 24 * v71;
                if (2 * v70 + 2 < v11)
                {
                  v73 = *(_QWORD *)(v9 + 24 * v71 + 16);
                  v74 = *(_QWORD *)(v72 + 40);
                  v72 += 24 * (v73 < v74);
                  if (v73 < v74)
                    v71 = 2 * v70 + 2;
                }
                v75 = *(_QWORD *)(v9 + 24 * v70 + 16);
                if (*(_QWORD *)(v72 + 16) >= v75)
                {
                  v76 = v9 + 24 * v70;
                  v112 = *(_OWORD *)v76;
                  do
                  {
                    v77 = v76;
                    v76 = v72;
                    v78 = *(_OWORD *)v72;
                    *(_QWORD *)(v77 + 16) = *(_QWORD *)(v72 + 16);
                    *(_OWORD *)v77 = v78;
                    if (v68 < v71)
                      break;
                    v79 = (2 * v71) | 1;
                    v72 = v9 + 24 * v79;
                    v80 = 2 * v71 + 2;
                    if (v80 < v11)
                    {
                      v81 = *(_QWORD *)(v9 + 24 * v79 + 16);
                      v82 = *(_QWORD *)(v72 + 40);
                      v72 += 24 * (v81 < v82);
                      if (v81 < v82)
                        v79 = v80;
                    }
                    v71 = v79;
                  }
                  while (*(_QWORD *)(v72 + 16) >= v75);
                  *(_OWORD *)v76 = v112;
                  *(_QWORD *)(v76 + 16) = v75;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v83 = v10 / 0x18uLL;
            do
            {
              v84 = 0;
              v119 = *(_QWORD *)(v9 + 16);
              v113 = *(_OWORD *)v9;
              v85 = v9;
              do
              {
                v86 = v84 + 1;
                v87 = v85 + 24 * (v84 + 1);
                v88 = (2 * v84) | 1;
                v89 = 2 * v84 + 2;
                if (v89 < v83)
                {
                  v90 = *(_QWORD *)(v85 + 24 * v86 + 16);
                  v91 = *(_QWORD *)(v87 + 40);
                  v87 += 24 * (v90 < v91);
                  if (v90 < v91)
                    v88 = v89;
                }
                v92 = *(_OWORD *)v87;
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(v87 + 16);
                *(_OWORD *)v85 = v92;
                v85 = v87;
                v84 = v88;
              }
              while (v88 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 24;
              if (v87 == a2)
              {
                *(_QWORD *)(v87 + 16) = v119;
                *(_OWORD *)v87 = v113;
              }
              else
              {
                v93 = *(_OWORD *)a2;
                *(_QWORD *)(v87 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v87 = v93;
                *(_QWORD *)(a2 + 16) = v119;
                *(_OWORD *)a2 = v113;
                v94 = v87 - v9 + 24;
                if (v94 >= 25)
                {
                  v95 = (v94 / 0x18uLL - 2) >> 1;
                  v96 = *(_QWORD *)(v87 + 16);
                  if (*(_QWORD *)(v9 + 24 * v95 + 16) < v96)
                  {
                    v106 = *(_OWORD *)v87;
                    do
                    {
                      v97 = v87;
                      v87 = v9 + 24 * v95;
                      v98 = *(_OWORD *)v87;
                      *(_QWORD *)(v97 + 16) = *(_QWORD *)(v87 + 16);
                      *(_OWORD *)v97 = v98;
                      if (!v95)
                        break;
                      v95 = (v95 - 1) >> 1;
                    }
                    while (*(_QWORD *)(v9 + 24 * v95 + 16) < v96);
                    *(_OWORD *)v87 = v106;
                    *(_QWORD *)(v87 + 16) = v96;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_2367E6D90((__int128 *)(a1 + 24 * v12), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_2367E6D90((__int128 *)a1, (__int128 *)(a1 + 24 * v12), (__int128 *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (__int128 *)(a1 + 24 * v12 - 24);
          sub_2367E6D90((__int128 *)(a1 + 24), v15, (__int128 *)(a2 - 48));
          v16 = (__int128 *)(a1 + 24 + 8 * v14);
          sub_2367E6D90((__int128 *)(a1 + 48), v16, (__int128 *)(a2 - 72));
          sub_2367E6D90(v15, (__int128 *)v13, v16);
          v115 = *(_QWORD *)(a1 + 16);
          v107 = *(_OWORD *)a1;
          v17 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v17;
          *(_QWORD *)(v13 + 16) = v115;
          *(_OWORD *)v13 = v107;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(a1 - 8) < v18)
            goto LABEL_11;
          v105 = *(_OWORD *)a1;
          if (v18 >= *(_QWORD *)(a2 - 8))
          {
            v37 = a1 + 24;
            do
            {
              v9 = v37;
              if (v37 >= a2)
                break;
              v38 = *(_QWORD *)(v37 + 16);
              v37 += 24;
            }
            while (v18 >= v38);
          }
          else
          {
            v35 = a1;
            do
            {
              v9 = v35 + 24;
              v36 = *(_QWORD *)(v35 + 40);
              v35 += 24;
            }
            while (v18 >= v36);
          }
          v39 = a2;
          if (v9 < a2)
          {
            v40 = a2;
            do
            {
              v39 = v40 - 24;
              v41 = *(_QWORD *)(v40 - 8);
              v40 -= 24;
            }
            while (v18 < v41);
          }
          while (v9 < v39)
          {
            v116 = *(_QWORD *)(v9 + 16);
            v108 = *(_OWORD *)v9;
            v42 = *(_OWORD *)v39;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v39 + 16);
            *(_OWORD *)v9 = v42;
            *(_QWORD *)(v39 + 16) = v116;
            *(_OWORD *)v39 = v108;
            do
            {
              v43 = *(_QWORD *)(v9 + 40);
              v9 += 24;
            }
            while (v18 >= v43);
            do
            {
              v44 = *(_QWORD *)(v39 - 8);
              v39 -= 24;
            }
            while (v18 < v44);
          }
          v45 = (__int128 *)(v9 - 24);
          if (v9 - 24 != a1)
          {
            v46 = *v45;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          *v45 = v105;
          *(_QWORD *)(v9 - 8) = v18;
          continue;
        }
        v18 = *(_QWORD *)(a1 + 16);
LABEL_11:
        v104 = *(_OWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 24;
        }
        while (*(_QWORD *)(v20 + 40) < v18);
        v21 = a2;
        if (v20 == a1)
        {
          v24 = a2;
          while (v19 < v24)
          {
            v22 = v24 - 24;
            v25 = *(_QWORD *)(v24 - 8);
            v24 -= 24;
            if (v25 < v18)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 24;
            v23 = *(_QWORD *)(v21 - 8);
            v21 -= 24;
          }
          while (v23 >= v18);
        }
LABEL_21:
        v9 = v19;
        if (v19 < v22)
        {
          v26 = v22;
          do
          {
            v27 = *(_OWORD *)v9;
            v28 = *(_QWORD *)(v9 + 16);
            v29 = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v26;
            *(_QWORD *)(v9 + 16) = v29;
            *(_QWORD *)(v26 + 16) = v28;
            *(_OWORD *)v26 = v27;
            do
            {
              v30 = *(_QWORD *)(v9 + 40);
              v9 += 24;
            }
            while (v30 < v18);
            do
            {
              v31 = *(_QWORD *)(v26 - 8);
              v26 -= 24;
            }
            while (v31 >= v18);
          }
          while (v9 < v26);
        }
        v32 = (__int128 *)(v9 - 24);
        if (v9 - 24 != a1)
        {
          v33 = *v32;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)a1 = v33;
        }
        *v32 = v104;
        *(_QWORD *)(v9 - 8) = v18;
        if (v19 < v22)
        {
LABEL_32:
          sub_2367E5818(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = sub_2367E6F4C(a1, v9 - 24);
        if (!sub_2367E6F4C(v9, a2))
        {
          if (v34)
            continue;
          goto LABEL_32;
        }
        a2 = v9 - 24;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (__int128 *)((char *)a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_QWORD *)a2 - 2) < *(_QWORD *)(v9 + 8))
        {
          v121 = *(_QWORD *)(v9 + 16);
          v116 = *(_OWORD *)v9;
          v49 = *v8;
          *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v9 = v49;
          *((_QWORD *)a2 - 1) = v121;
          *v8 = v116;
        }
        return;
      case 3:
        sub_2367E6960((__int128 *)v9, (__int128 *)(v9 + 24), (__int128 *)((char *)a2 - 24));
        return;
      case 4:
        sub_2367E6A50(v9, v9 + 24, v9 + 48, (uint64_t)a2 - 24);
        return;
      case 5:
        v50 = (__int128 *)(v9 + 24);
        v51 = (__int128 *)(v9 + 48);
        v52 = (__int128 *)(v9 + 72);
        sub_2367E6A50(v9, v9 + 24, v9 + 48, v9 + 72);
        if (*((_QWORD *)a2 - 2) < *(_QWORD *)(v9 + 80))
        {
          v53 = *v52;
          v54 = *(_QWORD *)(v9 + 88);
          v55 = *((_QWORD *)a2 - 1);
          *v52 = *v8;
          *(_QWORD *)(v9 + 88) = v55;
          *((_QWORD *)a2 - 1) = v54;
          *v8 = v53;
          if (*(_QWORD *)(v9 + 80) < *(_QWORD *)(v9 + 56))
          {
            v56 = *(_QWORD *)(v9 + 64);
            v57 = *v51;
            *v51 = *v52;
            *(_QWORD *)(v9 + 64) = *(_QWORD *)(v9 + 88);
            *v52 = v57;
            *(_QWORD *)(v9 + 88) = v56;
            if (*(_QWORD *)(v9 + 56) < *(_QWORD *)(v9 + 32))
            {
              v58 = *(_QWORD *)(v9 + 40);
              v59 = *v50;
              *v50 = *v51;
              *(_QWORD *)(v9 + 40) = *(_QWORD *)(v9 + 64);
              *v51 = v59;
              *(_QWORD *)(v9 + 64) = v58;
              if (*(_QWORD *)(v9 + 32) < *(_QWORD *)(v9 + 8))
              {
                v122 = *(_QWORD *)(v9 + 16);
                v117 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v50;
                *(_QWORD *)(v9 + 16) = *(_QWORD *)(v9 + 40);
                *v50 = v117;
                *(_QWORD *)(v9 + 40) = v122;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          v60 = (__int128 *)(v9 + 24);
          v62 = (__int128 *)v9 == a2 || v60 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v62)
            {
              v63 = 0;
              v64 = (_QWORD *)v9;
              do
              {
                v65 = v60;
                v66 = v64[4];
                if (v66 < v64[1])
                {
                  v67 = *(_QWORD *)v65;
                  v68 = v64[5];
                  v69 = v63;
                  while (1)
                  {
                    v70 = v9 + v69;
                    *(_OWORD *)(v70 + 24) = *(_OWORD *)(v9 + v69);
                    *(_QWORD *)(v70 + 40) = *(_QWORD *)(v9 + v69 + 16);
                    if (!v69)
                      break;
                    v69 -= 24;
                    if (v66 >= *(_QWORD *)(v70 - 16))
                    {
                      v71 = (_QWORD *)(v9 + v69 + 24);
                      goto LABEL_79;
                    }
                  }
                  v71 = (_QWORD *)v9;
LABEL_79:
                  *v71 = v67;
                  v71[1] = v66;
                  v71[2] = v68;
                }
                v60 = (__int128 *)((char *)v65 + 24);
                v63 += 24;
                v64 = v65;
              }
              while ((__int128 *)((char *)v65 + 24) != a2);
            }
          }
          else if (!v62)
          {
            do
            {
              v108 = v60;
              v109 = *(_QWORD *)(a1 + 32);
              if (v109 < *(_QWORD *)(a1 + 8))
              {
                v110 = *(_QWORD *)v60;
                v111 = *(_QWORD *)(a1 + 40);
                v112 = v108;
                do
                {
                  *v112 = *(__int128 *)((char *)v112 - 24);
                  *((_QWORD *)v112 + 2) = *((_QWORD *)v112 - 1);
                  v113 = *((_QWORD *)v112 - 5);
                  v112 = (__int128 *)((char *)v112 - 24);
                }
                while (v109 < v113);
                *(_QWORD *)v112 = v110;
                *((_QWORD *)v112 + 1) = v109;
                *((_QWORD *)v112 + 2) = v111;
              }
              v60 = (__int128 *)((char *)v108 + 24);
              a1 = (uint64_t)v108;
            }
            while ((__int128 *)((char *)v108 + 24) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v9 != a2)
          {
            v72 = (unint64_t)(v11 - 2) >> 1;
            v73 = v72;
            do
            {
              v74 = v73;
              if (v72 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = (_QWORD *)(v9 + 24 * v75);
                if (2 * v74 + 2 < v11)
                {
                  v77 = *(_QWORD *)(v9 + 24 * v75 + 8);
                  v78 = v76[4];
                  v76 += 3 * (v77 < v78);
                  if (v77 < v78)
                    v75 = 2 * v74 + 2;
                }
                v79 = *(_QWORD *)(v9 + 24 * v74 + 8);
                if (v76[1] >= v79)
                {
                  v80 = (_QWORD *)(v9 + 24 * v74);
                  v81 = *v80;
                  v82 = v80[2];
                  do
                  {
                    v83 = v80;
                    v80 = v76;
                    v84 = *(_OWORD *)v76;
                    v83[2] = v76[2];
                    *(_OWORD *)v83 = v84;
                    if (v72 < v75)
                      break;
                    v85 = (2 * v75) | 1;
                    v76 = (_QWORD *)(v9 + 24 * v85);
                    v86 = 2 * v75 + 2;
                    if (v86 < v11)
                    {
                      v87 = *(_QWORD *)(v9 + 24 * v85 + 8);
                      v88 = v76[4];
                      v76 += 3 * (v87 < v88);
                      if (v87 < v88)
                        v85 = v86;
                    }
                    v75 = v85;
                  }
                  while (v76[1] >= v79);
                  *v80 = v81;
                  v80[1] = v79;
                  v80[2] = v82;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            v89 = v10 / 0x18uLL;
            do
            {
              v90 = 0;
              v123 = *(_QWORD *)(v9 + 16);
              v118 = *(_OWORD *)v9;
              v91 = v9;
              do
              {
                v92 = v90 + 1;
                v93 = (__int128 *)(v91 + 24 * (v90 + 1));
                v94 = (2 * v90) | 1;
                v95 = 2 * v90 + 2;
                if (v95 < v89)
                {
                  v96 = *(_QWORD *)(v91 + 24 * v92 + 8);
                  v97 = *((_QWORD *)v93 + 4);
                  v93 = (__int128 *)((char *)v93 + 24 * (v96 < v97));
                  if (v96 < v97)
                    v94 = v95;
                }
                v98 = *v93;
                *(_QWORD *)(v91 + 16) = *((_QWORD *)v93 + 2);
                *(_OWORD *)v91 = v98;
                v91 = (unint64_t)v93;
                v90 = v94;
              }
              while (v94 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
              a2 = (__int128 *)((char *)a2 - 24);
              if (v93 == a2)
              {
                *((_QWORD *)v93 + 2) = v123;
                *v93 = v118;
              }
              else
              {
                v99 = *a2;
                *((_QWORD *)v93 + 2) = *((_QWORD *)a2 + 2);
                *v93 = v99;
                *((_QWORD *)a2 + 2) = v123;
                *a2 = v118;
                v100 = (uint64_t)v93 - v9 + 24;
                if (v100 >= 25)
                {
                  v101 = (v100 / 0x18uLL - 2) >> 1;
                  v102 = *((_QWORD *)v93 + 1);
                  if (*(_QWORD *)(v9 + 24 * v101 + 8) < v102)
                  {
                    v103 = *(_QWORD *)v93;
                    v104 = *((_QWORD *)v93 + 2);
                    do
                    {
                      v105 = v93;
                      v93 = (__int128 *)(v9 + 24 * v101);
                      v106 = *v93;
                      *((_QWORD *)v105 + 2) = *((_QWORD *)v93 + 2);
                      *v105 = v106;
                      if (!v101)
                        break;
                      v101 = (v101 - 1) >> 1;
                    }
                    while (*(_QWORD *)(v9 + 24 * v101 + 8) < v102);
                    *(_QWORD *)v93 = v103;
                    *((_QWORD *)v93 + 1) = v102;
                    *((_QWORD *)v93 + 2) = v104;
                  }
                }
              }
            }
            while (v89-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_2367E6960((__int128 *)(a1 + 24 * v12), (__int128 *)a1, (__int128 *)((char *)a2 - 24));
        }
        else
        {
          sub_2367E6960((__int128 *)a1, (__int128 *)(a1 + 24 * v12), (__int128 *)((char *)a2 - 24));
          v14 = 3 * v12;
          v15 = (__int128 *)(a1 + 24 * v12 - 24);
          sub_2367E6960((__int128 *)(a1 + 24), v15, a2 - 3);
          v16 = (__int128 *)(a1 + 24 + 8 * v14);
          sub_2367E6960((__int128 *)(a1 + 48), v16, (__int128 *)((char *)a2 - 72));
          sub_2367E6960(v15, (__int128 *)v13, v16);
          v119 = *(_QWORD *)(a1 + 16);
          v114 = *(_OWORD *)a1;
          v17 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v17;
          *(_QWORD *)(v13 + 16) = v119;
          *(_OWORD *)v13 = v114;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 - 16) < v18)
            goto LABEL_11;
          if (v18 >= *((_QWORD *)a2 - 2))
          {
            v38 = a1 + 24;
            do
            {
              v9 = v38;
              if (v38 >= (unint64_t)a2)
                break;
              v39 = *(_QWORD *)(v38 + 8);
              v38 += 24;
            }
            while (v18 >= v39);
          }
          else
          {
            v36 = a1;
            do
            {
              v9 = v36 + 24;
              v37 = *(_QWORD *)(v36 + 32);
              v36 += 24;
            }
            while (v18 >= v37);
          }
          v40 = a2;
          if (v9 < (unint64_t)a2)
          {
            v41 = a2;
            do
            {
              v40 = (__int128 *)((char *)v41 - 24);
              v42 = *((_QWORD *)v41 - 2);
              v41 = (__int128 *)((char *)v41 - 24);
            }
            while (v18 < v42);
          }
          v43 = *(_QWORD *)a1;
          v44 = *(_QWORD *)(a1 + 16);
          while (v9 < (unint64_t)v40)
          {
            v120 = *(_QWORD *)(v9 + 16);
            v115 = *(_OWORD *)v9;
            v45 = *v40;
            *(_QWORD *)(v9 + 16) = *((_QWORD *)v40 + 2);
            *(_OWORD *)v9 = v45;
            *((_QWORD *)v40 + 2) = v120;
            *v40 = v115;
            do
            {
              v46 = *(_QWORD *)(v9 + 32);
              v9 += 24;
            }
            while (v18 >= v46);
            do
            {
              v47 = *((_QWORD *)v40 - 2);
              v40 = (__int128 *)((char *)v40 - 24);
            }
            while (v18 < v47);
          }
          if (v9 - 24 != a1)
          {
            v48 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)a1 = v48;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 24) = v43;
          *(_QWORD *)(v9 - 16) = v18;
          *(_QWORD *)(v9 - 8) = v44;
          continue;
        }
        v18 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 24;
        }
        while (*(_QWORD *)(v22 + 32) < v18);
        v23 = a2;
        if (v22 == a1)
        {
          v26 = a2;
          while (v21 < (unint64_t)v26)
          {
            v24 = (__int128 *)((char *)v26 - 24);
            v27 = *((_QWORD *)v26 - 2);
            v26 = (__int128 *)((char *)v26 - 24);
            if (v27 < v18)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = (__int128 *)((char *)v23 - 24);
            v25 = *((_QWORD *)v23 - 2);
            v23 = (__int128 *)((char *)v23 - 24);
          }
          while (v25 >= v18);
        }
LABEL_21:
        v9 = v21;
        if (v21 < (unint64_t)v24)
        {
          v28 = (unint64_t)v24;
          do
          {
            v29 = *(_OWORD *)v9;
            v30 = *(_QWORD *)(v9 + 16);
            v31 = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v28;
            *(_QWORD *)(v9 + 16) = v31;
            *(_QWORD *)(v28 + 16) = v30;
            *(_OWORD *)v28 = v29;
            do
            {
              v32 = *(_QWORD *)(v9 + 32);
              v9 += 24;
            }
            while (v32 < v18);
            do
            {
              v33 = *(_QWORD *)(v28 - 16);
              v28 -= 24;
            }
            while (v33 >= v18);
          }
          while (v9 < v28);
        }
        if (v9 - 24 != a1)
        {
          v34 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)a1 = v34;
        }
        *(_QWORD *)(v9 - 24) = v19;
        *(_QWORD *)(v9 - 16) = v18;
        *(_QWORD *)(v9 - 8) = v20;
        if (v21 < (unint64_t)v24)
        {
LABEL_32:
          sub_2367E60C4(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = sub_2367E6B1C(a1, (_QWORD *)(v9 - 24));
        if (!sub_2367E6B1C(v9, a2))
        {
          if (v35)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v9 - 24);
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v139 = (uint64_t)(a2 - 44);
  v140 = (__int128 *)(a2 - 22);
  v138 = (uint64_t)(a2 - 66);
  v7 = a1;
  v151 = (uint64_t)a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 3) > *(float *)(a1 + 76))
        {
          v52 = (__int128 *)a1;
          v53 = v140;
          goto LABEL_66;
        }
        return;
      case 3:
        sub_23682A5DC(a1, a1 + 88, (uint64_t)v140);
        return;
      case 4:
        sub_23682A688(a1, a1 + 88, a1 + 176, (uint64_t)v140);
        return;
      case 5:
        sub_23682A688(a1, a1 + 88, a1 + 176, a1 + 264);
        if (*(a2 - 3) > *(float *)(a1 + 340))
        {
          sub_23682A528((__int128 *)(a1 + 264), v140);
          if (*(float *)(a1 + 340) > *(float *)(a1 + 252))
          {
            sub_23682A528((__int128 *)(a1 + 176), (__int128 *)(a1 + 264));
            if (*(float *)(a1 + 252) > *(float *)(a1 + 164))
            {
              sub_23682A528((__int128 *)(a1 + 88), (__int128 *)(a1 + 176));
              if (*(float *)(a1 + 164) > *(float *)(a1 + 76))
              {
                v52 = (__int128 *)a1;
                v53 = (__int128 *)(a1 + 88);
LABEL_66:
                sub_23682A528(v52, v53);
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 2111)
        {
          v54 = (float *)(a1 + 88);
          v56 = (float *)a1 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = a1;
              do
              {
                v59 = v54;
                v60 = *(float *)(v58 + 164);
                if (v60 > *(float *)(v58 + 76))
                {
                  v175 = *(_OWORD *)v54;
                  v182 = *((_OWORD *)v54 + 1);
                  v61 = *(void **)(v58 + 120);
                  v146 = *(_OWORD *)(v58 + 128);
                  v62 = *(_OWORD *)(v58 + 144);
                  *(_QWORD *)(v58 + 120) = 0;
                  *(_QWORD *)(v58 + 128) = 0;
                  *(_QWORD *)(v58 + 136) = 0;
                  v161 = v62;
                  v168 = *(_DWORD *)(v58 + 160);
                  v63 = v57;
                  v64 = *(_QWORD *)(v58 + 168);
                  while (1)
                  {
                    v65 = a1 + v63;
                    v66 = *(_OWORD *)(a1 + v63 + 16);
                    *(_OWORD *)(v65 + 88) = *(_OWORD *)(a1 + v63);
                    *(_OWORD *)(v65 + 104) = v66;
                    v67 = *(void **)(a1 + v63 + 120);
                    if (v67)
                    {
                      *(_QWORD *)(v65 + 128) = v67;
                      operator delete(v67);
                      *(_QWORD *)(v65 + 128) = 0;
                      *(_QWORD *)(v65 + 136) = 0;
                    }
                    *(_OWORD *)(v65 + 120) = *(_OWORD *)(v65 + 32);
                    *(_QWORD *)(v65 + 136) = *(_QWORD *)(v65 + 48);
                    *(_QWORD *)(v65 + 40) = 0;
                    *(_QWORD *)(v65 + 48) = 0;
                    *(_QWORD *)(v65 + 32) = 0;
                    v68 = *(_OWORD *)(v65 + 72);
                    *(_OWORD *)(v65 + 144) = *(_OWORD *)(v65 + 56);
                    *(_OWORD *)(v65 + 160) = v68;
                    if (!v63)
                      break;
                    v69 = a1 + v63;
                    v70 = *(float *)(a1 + v63 - 12);
                    v63 -= 88;
                    if (v60 <= v70)
                    {
                      v71 = (void **)(v69 + 32);
                      v72 = a1 + v63 + 88;
                      v73 = v69 + 56;
                      goto LABEL_91;
                    }
                  }
                  v71 = (void **)(a1 + 32);
                  v73 = a1 + 56;
                  v72 = a1;
LABEL_91:
                  *(_OWORD *)v72 = v175;
                  *(_OWORD *)(v72 + 16) = v182;
                  v74 = *v71;
                  if (*v71)
                  {
                    *(_QWORD *)(v72 + 40) = v74;
                    operator delete(v74);
                  }
                  *v71 = v61;
                  *(_OWORD *)(v72 + 40) = v146;
                  *(_DWORD *)(v73 + 16) = v168;
                  *(_OWORD *)v73 = v161;
                  *(float *)(v72 + 76) = v60;
                  *(_QWORD *)(v72 + 80) = v64;
                  a2 = (float *)v151;
                }
                v54 = (float *)v59 + 22;
                v57 += 88;
                v58 = (uint64_t)v59;
              }
              while ((float *)((char *)v59 + 88) != a2);
            }
          }
          else if (!v56)
          {
            do
            {
              v126 = v54;
              v127 = *(float *)(a1 + 164);
              if (v127 > *(float *)(a1 + 76))
              {
                v178 = *(_OWORD *)v54;
                v185 = *((_OWORD *)v54 + 1);
                v150 = *(_OWORD *)(a1 + 120);
                v128 = *(_QWORD *)(a1 + 136);
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 136) = 0;
                v164 = *(_OWORD *)(a1 + 144);
                v171 = *(_DWORD *)(a1 + 160);
                v129 = v54;
                v130 = *(_QWORD *)(a1 + 168);
                do
                {
                  v131 = v129;
                  v132 = *(_OWORD *)(v129 - 18);
                  *(_OWORD *)v129 = *(_OWORD *)(v129 - 22);
                  *((_OWORD *)v129 + 1) = v132;
                  v133 = (void *)*((_QWORD *)v129 + 4);
                  if (v133)
                  {
                    *((_QWORD *)v129 + 5) = v133;
                    operator delete(v133);
                    *((_QWORD *)v129 + 5) = 0;
                    *((_QWORD *)v129 + 6) = 0;
                  }
                  *((_OWORD *)v129 + 2) = *(_OWORD *)(v129 - 14);
                  *((_QWORD *)v129 + 6) = *((_QWORD *)v129 - 5);
                  *((_QWORD *)v129 - 6) = 0;
                  *((_QWORD *)v129 - 5) = 0;
                  *((_QWORD *)v129 - 7) = 0;
                  v134 = *((_OWORD *)v129 - 1);
                  *(_OWORD *)(v129 + 14) = *((_OWORD *)v129 - 2);
                  v129 -= 22;
                  v135 = *(v131 - 25);
                  *(_OWORD *)(v131 + 18) = v134;
                }
                while (v127 > v135);
                *(_OWORD *)v129 = v178;
                *(_OWORD *)(v131 - 18) = v185;
                v136 = (void *)*((_QWORD *)v131 - 7);
                if (v136)
                {
                  *((_QWORD *)v131 - 6) = v136;
                  operator delete(v136);
                }
                v137 = v131 - 8;
                *(_OWORD *)(v131 - 14) = v150;
                *((_QWORD *)v131 - 5) = v128;
                *((_DWORD *)v137 + 4) = v171;
                *(_OWORD *)v137 = v164;
                *(v131 - 3) = v127;
                *((_QWORD *)v131 - 1) = v130;
                a2 = (float *)v151;
              }
              v54 = (float *)v126 + 22;
              a1 = (uint64_t)v126;
            }
            while ((float *)((char *)v126 + 88) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)a1 != a2)
          {
            v75 = (unint64_t)(v9 - 2) >> 1;
            v76 = v75;
            do
            {
              v77 = v76;
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = a1 + 88 * v78;
                if (2 * v77 + 2 < v9 && *(float *)(a1 + 88 * v78 + 76) > *(float *)(v79 + 164))
                {
                  v79 += 88;
                  v78 = 2 * v77 + 2;
                }
                v80 = *(float *)(a1 + 88 * v77 + 76);
                if (*(float *)(v79 + 76) <= v80)
                {
                  v81 = a1 + 88 * v77;
                  v176 = *(_OWORD *)v81;
                  v183 = *(_OWORD *)(v81 + 16);
                  v147 = *(_OWORD *)(v81 + 32);
                  v82 = *(_QWORD *)(v81 + 48);
                  *(_QWORD *)(v81 + 40) = 0;
                  *(_QWORD *)(v81 + 48) = 0;
                  *(_QWORD *)(v81 + 32) = 0;
                  v169 = *(_DWORD *)(v81 + 72);
                  v162 = *(_OWORD *)(v81 + 56);
                  v141 = *(_QWORD *)(v81 + 80);
                  v143 = v82;
                  do
                  {
                    v83 = v81;
                    v81 = v79;
                    v84 = *(_OWORD *)(v79 + 16);
                    *(_OWORD *)v83 = *(_OWORD *)v79;
                    *(_OWORD *)(v83 + 16) = v84;
                    v85 = *(void **)(v83 + 32);
                    if (v85)
                    {
                      *(_QWORD *)(v83 + 40) = v85;
                      operator delete(v85);
                      *(_QWORD *)(v83 + 32) = 0;
                      *(_QWORD *)(v83 + 40) = 0;
                      *(_QWORD *)(v83 + 48) = 0;
                    }
                    *(_OWORD *)(v83 + 32) = *(_OWORD *)(v81 + 32);
                    *(_QWORD *)(v83 + 48) = *(_QWORD *)(v81 + 48);
                    *(_QWORD *)(v81 + 32) = 0;
                    *(_QWORD *)(v81 + 40) = 0;
                    *(_QWORD *)(v81 + 48) = 0;
                    v86 = *(_OWORD *)(v81 + 56);
                    *(_OWORD *)(v83 + 72) = *(_OWORD *)(v81 + 72);
                    *(_OWORD *)(v83 + 56) = v86;
                    if (v75 < v78)
                      break;
                    v87 = (2 * v78) | 1;
                    v79 = a1 + 88 * v87;
                    if (2 * v78 + 2 < v9 && *(float *)(a1 + 88 * v87 + 76) > *(float *)(v79 + 164))
                    {
                      v79 += 88;
                      v87 = 2 * v78 + 2;
                    }
                    v78 = v87;
                  }
                  while (*(float *)(v79 + 76) <= v80);
                  *(_OWORD *)v81 = v176;
                  *(_OWORD *)(v81 + 16) = v183;
                  v88 = *(void **)(v81 + 32);
                  if (v88)
                  {
                    *(_QWORD *)(v81 + 40) = v88;
                    operator delete(v88);
                  }
                  *(_OWORD *)(v81 + 32) = v147;
                  *(_QWORD *)(v81 + 48) = v143;
                  *(_OWORD *)(v81 + 56) = v162;
                  *(_DWORD *)(v81 + 72) = v169;
                  *(float *)(v81 + 76) = v80;
                  *(_QWORD *)(v81 + 80) = v141;
                }
              }
              v76 = v77 - 1;
            }
            while (v77);
            v89 = v8 / 0x58uLL;
            v90 = (_OWORD *)v151;
            do
            {
              v91 = 0;
              v92 = v90;
              v163 = *(_OWORD *)a1;
              v170 = *(_OWORD *)(a1 + 16);
              v93 = *(_QWORD *)(a1 + 40);
              v152 = *(_QWORD *)(a1 + 32);
              v148 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              v94 = a1;
              v154 = *(_OWORD *)(a1 + 56);
              v155 = *(_OWORD *)(a1 + 72);
              do
              {
                v95 = v91 + 1;
                v96 = (_OWORD *)(v94 + 88 * (v91 + 1));
                v97 = 2 * v91;
                v91 = (2 * v91) | 1;
                v98 = v97 + 2;
                if (v98 < v89 && *(float *)(v94 + 88 * v95 + 76) > *((float *)v96 + 41))
                {
                  v96 = (_OWORD *)((char *)v96 + 88);
                  v91 = v98;
                }
                v99 = v96[1];
                *(_OWORD *)v94 = *v96;
                *(_OWORD *)(v94 + 16) = v99;
                v100 = *(void **)(v94 + 32);
                if (v100)
                {
                  *(_QWORD *)(v94 + 40) = v100;
                  operator delete(v100);
                  *(_QWORD *)(v94 + 32) = 0;
                  *(_QWORD *)(v94 + 40) = 0;
                  *(_QWORD *)(v94 + 48) = 0;
                }
                v101 = v96 + 2;
                *(_OWORD *)(v94 + 32) = v96[2];
                *(_QWORD *)(v94 + 48) = *((_QWORD *)v96 + 6);
                *((_QWORD *)v96 + 4) = 0;
                *((_QWORD *)v96 + 5) = 0;
                *((_QWORD *)v96 + 6) = 0;
                v102 = *(_OWORD *)((char *)v96 + 56);
                *(_OWORD *)(v94 + 72) = *(_OWORD *)((char *)v96 + 72);
                *(_OWORD *)(v94 + 56) = v102;
                v94 = (uint64_t)v96;
              }
              while (v91 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
              v103 = (_OWORD *)((char *)v96 + 56);
              v90 = (_OWORD *)((char *)v90 - 88);
              if (v96 == (_OWORD *)((char *)v92 - 88))
              {
                *v96 = v163;
                v96[1] = v170;
                v124 = (void *)*((_QWORD *)v96 + 4);
                if (v124)
                {
                  *((_QWORD *)v96 + 5) = v124;
                  operator delete(v124);
                }
                *((_QWORD *)v96 + 4) = v152;
                *((_QWORD *)v96 + 5) = v93;
                *((_QWORD *)v96 + 6) = v148;
                *v103 = v154;
                *(_OWORD *)((char *)v96 + 72) = v155;
              }
              else
              {
                v104 = *(_OWORD *)((char *)v92 - 72);
                *v96 = *v90;
                v96[1] = v104;
                v105 = (void *)*((_QWORD *)v96 + 4);
                if (v105)
                {
                  *((_QWORD *)v96 + 5) = v105;
                  operator delete(v105);
                  *v101 = 0;
                  *((_QWORD *)v96 + 5) = 0;
                  *((_QWORD *)v96 + 6) = 0;
                }
                v96[2] = *(_OWORD *)((char *)v92 - 56);
                *((_QWORD *)v96 + 6) = *((_QWORD *)v92 - 5);
                *((_QWORD *)v92 - 7) = 0;
                *((_QWORD *)v92 - 6) = 0;
                *((_QWORD *)v92 - 5) = 0;
                v106 = *(v92 - 1);
                *v103 = *(v92 - 2);
                *(_OWORD *)((char *)v96 + 72) = v106;
                *v90 = v163;
                *(_OWORD *)((char *)v92 - 72) = v170;
                v107 = (void *)*((_QWORD *)v92 - 7);
                if (v107)
                {
                  *((_QWORD *)v92 - 6) = v107;
                  operator delete(v107);
                }
                v108 = v92 - 2;
                *((_QWORD *)v92 - 7) = v152;
                *((_QWORD *)v92 - 6) = v93;
                *((_QWORD *)v92 - 5) = v148;
                *v108 = v154;
                v108[1] = v155;
                v109 = (uint64_t)v96 - a1 + 88;
                if (v109 >= 89)
                {
                  v110 = (v109 / 0x58uLL - 2) >> 1;
                  v111 = *((float *)v96 + 19);
                  if (*(float *)(a1 + 88 * v110 + 76) > v111)
                  {
                    v153 = (_OWORD *)((char *)v92 - 88);
                    v177 = *v96;
                    v184 = v96[1];
                    v149 = v96[2];
                    v112 = *((_QWORD *)v96 + 6);
                    *((_QWORD *)v96 + 5) = 0;
                    *((_QWORD *)v96 + 6) = 0;
                    *v101 = 0;
                    v157 = *((_DWORD *)v96 + 18);
                    v156 = *v103;
                    v113 = *((_QWORD *)v96 + 10);
                    do
                    {
                      v114 = v110;
                      v115 = (_OWORD *)(a1 + 88 * v110);
                      v116 = v115[1];
                      *v96 = *v115;
                      v96[1] = v116;
                      v117 = (void *)*((_QWORD *)v96 + 4);
                      if (v117)
                      {
                        *((_QWORD *)v96 + 5) = v117;
                        operator delete(v117);
                        *((_QWORD *)v96 + 4) = 0;
                        *((_QWORD *)v96 + 5) = 0;
                        *((_QWORD *)v96 + 6) = 0;
                      }
                      v118 = a1 + 88 * v114;
                      v119 = (void **)(v118 + 32);
                      v96[2] = *(_OWORD *)(v118 + 32);
                      v121 = *(_QWORD *)(v118 + 48);
                      v120 = v118 + 48;
                      *((_QWORD *)v96 + 6) = v121;
                      *(_QWORD *)(v120 - 8) = 0;
                      *(_QWORD *)v120 = 0;
                      *v119 = 0;
                      v122 = *(_OWORD *)(v120 + 8);
                      *(_OWORD *)((char *)v96 + 72) = *(_OWORD *)(v120 + 24);
                      *(_OWORD *)((char *)v96 + 56) = v122;
                      if (!v114)
                        break;
                      v110 = (v114 - 1) >> 1;
                      v96 = v115;
                    }
                    while (*(float *)(a1 + 88 * v110 + 76) > v111);
                    *v115 = v177;
                    v115[1] = v184;
                    v123 = *v119;
                    if (*v119)
                    {
                      *(_QWORD *)(a1 + 88 * v114 + 40) = v123;
                      operator delete(v123);
                      v119[2] = 0;
                    }
                    *(_OWORD *)v119 = v149;
                    *(_QWORD *)v120 = v112;
                    *(_DWORD *)(v120 + 24) = v157;
                    *(_OWORD *)(v120 + 8) = v156;
                    *(float *)(v120 + 28) = v111;
                    *(_QWORD *)(v120 + 32) = v113;
                    v90 = v153;
                  }
                }
              }
            }
            while (v89-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (_OWORD *)(a1 + 88 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x2C01)
        {
          sub_23682A5DC((uint64_t)v11, a1, (uint64_t)v140);
        }
        else
        {
          sub_23682A5DC(a1, (uint64_t)v11, (uint64_t)v140);
          v12 = 88 * v10;
          v13 = a1 + 88 * v10;
          sub_23682A5DC(a1 + 88, v13 - 88, v139);
          sub_23682A5DC(a1 + 176, a1 + 88 + v12, v138);
          sub_23682A5DC(v13 - 88, (uint64_t)v11, a1 + 88 + v12);
          v172 = *(_OWORD *)a1;
          v179 = *(_OWORD *)(a1 + 16);
          v14 = *(_QWORD *)(a1 + 48);
          v15 = *(_OWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v158 = *(_OWORD *)(a1 + 56);
          v165 = *(_OWORD *)(a1 + 72);
          v16 = v11[1];
          *(_OWORD *)a1 = *v11;
          *(_OWORD *)(a1 + 16) = v16;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v13 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v13 + 48);
          *(_QWORD *)(v13 + 32) = 0;
          *(_QWORD *)(v13 + 40) = 0;
          *(_QWORD *)(v13 + 48) = 0;
          v17 = *(_OWORD *)(v13 + 56);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(v13 + 72);
          *(_OWORD *)(a1 + 56) = v17;
          *v11 = v172;
          v11[1] = v179;
          *(_OWORD *)(v13 + 32) = v15;
          *(_QWORD *)(v13 + 48) = v14;
          *(_OWORD *)(v13 + 72) = v165;
          *(_OWORD *)(v13 + 56) = v158;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(float *)(a1 + 76);
          if (*(float *)(a1 - 12) > v18)
            goto LABEL_11;
          v174 = *(_OWORD *)a1;
          v181 = *(_OWORD *)(a1 + 16);
          v145 = *(_OWORD *)(a1 + 32);
          v37 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v160 = *(_OWORD *)(a1 + 56);
          v167 = *(_DWORD *)(a1 + 72);
          if (v18 <= *(a2 - 3))
          {
            v40 = a1 + 88;
            do
            {
              v7 = v40;
              if (v40 >= (unint64_t)a2)
                break;
              v41 = *(float *)(v40 + 76);
              v40 += 88;
            }
            while (v18 <= v41);
          }
          else
          {
            v38 = a1;
            do
            {
              v7 = v38 + 88;
              v39 = *(float *)(v38 + 164);
              v38 += 88;
            }
            while (v18 <= v39);
          }
          v42 = (__int128 *)a2;
          if (v7 < (unint64_t)a2)
          {
            do
            {
              v42 = (__int128 *)(a2 - 22);
              v43 = *(a2 - 3);
              a2 -= 22;
            }
            while (v18 > v43);
          }
          v44 = *(_QWORD *)(a1 + 80);
          while (v7 < (unint64_t)v42)
          {
            sub_23682A528((__int128 *)v7, v42);
            do
            {
              v45 = *(float *)(v7 + 164);
              v7 += 88;
            }
            while (v18 <= v45);
            do
            {
              v46 = *((float *)v42 - 3);
              v42 = (__int128 *)((char *)v42 - 88);
            }
            while (v18 > v46);
          }
          v47 = (_OWORD *)(v7 - 88);
          if (v7 - 88 != a1)
          {
            v48 = *(_OWORD *)(v7 - 72);
            *(_OWORD *)a1 = *v47;
            *(_OWORD *)(a1 + 16) = v48;
            v49 = *(void **)(a1 + 32);
            if (v49)
            {
              *(_QWORD *)(a1 + 40) = v49;
              operator delete(v49);
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 48) = 0;
            }
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v7 - 56);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v7 - 40);
            *(_QWORD *)(v7 - 56) = 0;
            *(_QWORD *)(v7 - 48) = 0;
            *(_QWORD *)(v7 - 40) = 0;
            v50 = *(_OWORD *)(v7 - 16);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 - 32);
            *(_OWORD *)(a1 + 72) = v50;
          }
          *v47 = v174;
          *(_OWORD *)(v7 - 72) = v181;
          v51 = *(void **)(v7 - 56);
          if (v51)
          {
            *(_QWORD *)(v7 - 48) = v51;
            operator delete(v51);
          }
          a4 = 0;
          *(_OWORD *)(v7 - 56) = v145;
          *(_QWORD *)(v7 - 40) = v37;
          *(_DWORD *)(v7 - 16) = v167;
          *(_OWORD *)(v7 - 32) = v160;
          *(float *)(v7 - 12) = v18;
          *(_QWORD *)(v7 - 8) = v44;
          a2 = (float *)v151;
          continue;
        }
        v18 = *(float *)(a1 + 76);
LABEL_11:
        v144 = *(_OWORD *)(a1 + 32);
        v173 = *(_OWORD *)a1;
        v180 = *(_OWORD *)(a1 + 16);
        v19 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        v159 = *(_OWORD *)(a1 + 56);
        v166 = *(_DWORD *)(a1 + 72);
        v20 = a1;
        v21 = *(_QWORD *)(a1 + 80);
        do
        {
          v22 = v20;
          v20 += 88;
        }
        while (*(float *)(v22 + 164) > v18);
        v23 = v151;
        if (v22 == a1)
        {
          v26 = v151;
          while (v20 < v26)
          {
            v24 = (__int128 *)(v26 - 88);
            v27 = *(float *)(v26 - 12);
            v26 -= 88;
            if (v27 > v18)
              goto LABEL_21;
          }
          v24 = (__int128 *)v26;
        }
        else
        {
          do
          {
            v24 = (__int128 *)(v23 - 88);
            v25 = *(float *)(v23 - 12);
            v23 -= 88;
          }
          while (v25 <= v18);
        }
LABEL_21:
        if (v20 >= (unint64_t)v24)
        {
          v7 = v20;
        }
        else
        {
          v28 = v24;
          v7 = v20;
          do
          {
            sub_23682A528((__int128 *)v7, v28);
            do
            {
              v29 = *(float *)(v7 + 164);
              v7 += 88;
            }
            while (v29 > v18);
            do
            {
              v30 = *((float *)v28 - 3);
              v28 = (__int128 *)((char *)v28 - 88);
            }
            while (v30 <= v18);
          }
          while (v7 < (unint64_t)v28);
        }
        v31 = (_OWORD *)(v7 - 88);
        if (v7 - 88 != a1)
        {
          v32 = *(_OWORD *)(v7 - 72);
          *(_OWORD *)a1 = *v31;
          *(_OWORD *)(a1 + 16) = v32;
          v33 = *(void **)(a1 + 32);
          if (v33)
          {
            *(_QWORD *)(a1 + 40) = v33;
            operator delete(v33);
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = 0;
          }
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v7 - 56);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v7 - 40);
          *(_QWORD *)(v7 - 56) = 0;
          *(_QWORD *)(v7 - 48) = 0;
          *(_QWORD *)(v7 - 40) = 0;
          v34 = *(_OWORD *)(v7 - 16);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 - 32);
          *(_OWORD *)(a1 + 72) = v34;
        }
        *v31 = v173;
        *(_OWORD *)(v7 - 72) = v180;
        v35 = *(void **)(v7 - 56);
        if (v35)
        {
          *(_QWORD *)(v7 - 48) = v35;
          operator delete(v35);
        }
        *(_OWORD *)(v7 - 56) = v144;
        *(_QWORD *)(v7 - 40) = v19;
        *(_DWORD *)(v7 - 16) = v166;
        *(_OWORD *)(v7 - 32) = v159;
        *(float *)(v7 - 12) = v18;
        *(_QWORD *)(v7 - 8) = v21;
        a2 = (float *)v151;
        if (v20 < (unint64_t)v24)
        {
LABEL_38:
          sub_236829258(a1, v7 - 88, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = sub_23682A71C(a1, v7 - 88);
        if (!sub_23682A71C(v7, v151))
        {
          if (v36)
            continue;
          goto LABEL_38;
        }
        a2 = (float *)(v7 - 88);
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2;
  v8 = a2 - 184;
  v9 = (char *)a1;
  while (2)
  {
    a1 = (uint64_t)v9;
    v10 = v7 - v9;
    v11 = 0xD37A6F4DE9BD37A7 * ((v7 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_QWORD *)a2 - 22) * *((_QWORD *)a2 - 23) > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
        {
          sub_236858C08((_OWORD *)a1, v8);
          v61 = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 3) = v61;
          v62 = *(_QWORD *)(a1 + 168);
          *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v62;
          v63 = *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v63;
        }
        return;
      case 3:
        sub_236858E48(a1, a1 + 184, (uint64_t)v8);
        return;
      case 4:
        sub_236859000(a1, a1 + 184, a1 + 368, (uint64_t)v8);
        return;
      case 5:
        sub_236859130(a1, a1 + 184, a1 + 368, a1 + 552, (uint64_t)v8);
        return;
      default:
        if (v10 <= 4415)
        {
          if ((a4 & 1) != 0)
          {
            if ((char *)a1 != v7)
            {
              v64 = a1 + 184;
              if ((char *)(a1 + 184) != a2)
              {
                v65 = 0;
                v66 = (uint64_t *)a1;
                do
                {
                  v67 = v66[23];
                  v68 = v66[24];
                  v69 = *v66;
                  v70 = v66[1];
                  v66 = (uint64_t *)v64;
                  if (v68 * v67 > (unint64_t)(v70 * v69))
                  {
                    sub_23682A48C((uint64_t)&v124, v64);
                    v71 = v65;
                    while (1)
                    {
                      sub_2368592C0(a1 + v71 + 184, a1 + v71);
                      if (!v71)
                        break;
                      v72 = *(_QWORD *)(a1 + v71 - 176) * *(_QWORD *)(a1 + v71 - 184);
                      v71 -= 184;
                      if (v125 * v124 <= v72)
                      {
                        v73 = a1 + v71 + 184;
                        goto LABEL_87;
                      }
                    }
                    v73 = a1;
LABEL_87:
                    sub_2368592C0(v73, (uint64_t)&v124);
                    if (__p)
                    {
                      v128 = __p;
                      operator delete(__p);
                    }
                    for (i = 0; i != -72; i -= 24)
                    {
                      v75 = *(void **)&v126[i + 72];
                      if (v75)
                      {
                        *(_QWORD *)&v126[i + 80] = v75;
                        operator delete(v75);
                      }
                    }
                    for (j = 0; j != -72; j -= 24)
                    {
                      v77 = *(void **)&v126[j];
                      if (v77)
                      {
                        *(_QWORD *)&v126[j + 8] = v77;
                        operator delete(v77);
                      }
                    }
                  }
                  v64 = (uint64_t)(v66 + 23);
                  v65 += 184;
                }
                while (v66 + 23 != (uint64_t *)a2);
              }
            }
          }
          else if ((char *)a1 != v7)
          {
            v112 = a1 + 184;
            if ((char *)(a1 + 184) != a2)
            {
              do
              {
                v113 = v112;
                if (*(_QWORD *)(a1 + 192) * *(_QWORD *)(a1 + 184) > *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
                {
                  sub_23682A48C((uint64_t)&v124, v112);
                  do
                  {
                    v114 = a1;
                    sub_2368592C0(a1 + 184, a1);
                    v115 = *(_QWORD *)(a1 - 184);
                    a1 -= 184;
                  }
                  while (v125 * v124 > (unint64_t)(*(_QWORD *)(v114 - 176) * v115));
                  sub_2368592C0(v114, (uint64_t)&v124);
                  if (__p)
                  {
                    v128 = __p;
                    operator delete(__p);
                  }
                  for (k = 0; k != -72; k -= 24)
                  {
                    v117 = *(void **)&v126[k + 72];
                    if (v117)
                    {
                      *(_QWORD *)&v126[k + 80] = v117;
                      operator delete(v117);
                    }
                  }
                  for (m = 0; m != -72; m -= 24)
                  {
                    v119 = *(void **)&v126[m];
                    if (v119)
                    {
                      *(_QWORD *)&v126[m + 8] = v119;
                      operator delete(v119);
                    }
                  }
                }
                v112 = v113 + 184;
                a1 = v113;
              }
              while ((char *)(v113 + 184) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((char *)a1 != v7)
          {
            v78 = (unint64_t)(v11 - 2) >> 1;
            v79 = v78;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = (uint64_t *)(a1 + 184 * v81);
                if (2 * v79 + 2 >= v11)
                {
                  v83 = *v82;
                }
                else
                {
                  v83 = *v82;
                  if (v82[1] * *v82 > (unint64_t)(v82[24] * v82[23]))
                  {
                    v83 = v82[23];
                    v82 += 23;
                    v81 = 2 * v80 + 2;
                  }
                }
                v84 = (_QWORD *)(a1 + 184 * v80);
                if ((unint64_t)(v82[1] * v83) <= v84[1] * *v84)
                {
                  sub_23682A48C((uint64_t)&v124, a1 + 184 * v80);
                  do
                  {
                    v85 = (uint64_t)v82;
                    sub_2368592C0((uint64_t)v84, (uint64_t)v82);
                    if (v78 < v81)
                      break;
                    v82 = (uint64_t *)(a1 + 184 * ((2 * v81) | 1));
                    if (2 * v81 + 2 >= v11)
                    {
                      v86 = *v82;
                      v81 = (2 * v81) | 1;
                    }
                    else
                    {
                      v86 = *v82;
                      if (v82[1] * *v82 <= (unint64_t)(v82[24] * v82[23]))
                      {
                        v81 = (2 * v81) | 1;
                      }
                      else
                      {
                        v86 = v82[23];
                        v82 += 23;
                        v81 = 2 * v81 + 2;
                      }
                    }
                    v84 = (_QWORD *)v85;
                  }
                  while (v82[1] * v86 <= (unint64_t)(v125 * v124));
                  sub_2368592C0(v85, (uint64_t)&v124);
                  if (__p)
                  {
                    v128 = __p;
                    operator delete(__p);
                  }
                  for (n = 0; n != -72; n -= 24)
                  {
                    v88 = *(void **)&v126[n + 72];
                    if (v88)
                    {
                      *(_QWORD *)&v126[n + 80] = v88;
                      operator delete(v88);
                    }
                  }
                  for (ii = 0; ii != -72; ii -= 24)
                  {
                    v90 = *(void **)&v126[ii];
                    if (v90)
                    {
                      *(_QWORD *)&v126[ii + 8] = v90;
                      operator delete(v90);
                    }
                  }
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v91 = v10 / 0xB8uLL;
            do
            {
              sub_23682A48C((uint64_t)v121, a1);
              v92 = 0;
              v93 = a1;
              do
              {
                v94 = (char *)(v93 + 184 * v92 + 184);
                v95 = (2 * v92) | 1;
                v96 = 2 * v92 + 2;
                if (v96 < v91 && *((_QWORD *)v94 + 1) * *(_QWORD *)v94 > *((_QWORD *)v94 + 24) * *((_QWORD *)v94 + 23))
                {
                  v94 += 184;
                  v95 = v96;
                }
                sub_2368592C0(v93, (uint64_t)v94);
                v93 = (uint64_t)v94;
                v92 = v95;
              }
              while (v95 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
              v97 = (uint64_t)(a2 - 184);
              v98 = v94 == a2 - 184;
              a2 -= 184;
              if (v98)
              {
                sub_2368592C0((uint64_t)v94, (uint64_t)v121);
              }
              else
              {
                sub_2368592C0((uint64_t)v94, v97);
                sub_2368592C0(v97, (uint64_t)v121);
                v99 = (uint64_t)&v94[-a1 + 184];
                if (v99 >= 185)
                {
                  v100 = (v99 / 0xB8uLL - 2) >> 1;
                  v101 = (_QWORD *)(a1 + 184 * v100);
                  if (v101[1] * *v101 > *((_QWORD *)v94 + 1) * *(_QWORD *)v94)
                  {
                    sub_23682A48C((uint64_t)&v124, (uint64_t)v94);
                    do
                    {
                      v102 = (uint64_t)v101;
                      sub_2368592C0((uint64_t)v94, (uint64_t)v101);
                      if (!v100)
                        break;
                      v100 = (v100 - 1) >> 1;
                      v101 = (_QWORD *)(a1 + 184 * v100);
                      v94 = (char *)v102;
                    }
                    while (v101[1] * *v101 > (unint64_t)(v125 * v124));
                    sub_2368592C0(v102, (uint64_t)&v124);
                    if (__p)
                    {
                      v128 = __p;
                      operator delete(__p);
                    }
                    for (jj = 0; jj != -72; jj -= 24)
                    {
                      v104 = *(void **)&v126[jj + 72];
                      if (v104)
                      {
                        *(_QWORD *)&v126[jj + 80] = v104;
                        operator delete(v104);
                      }
                    }
                    for (kk = 0; kk != -72; kk -= 24)
                    {
                      v106 = *(void **)&v126[kk];
                      if (v106)
                      {
                        *(_QWORD *)&v126[kk + 8] = v106;
                        operator delete(v106);
                      }
                    }
                  }
                }
              }
              if (v122)
              {
                v123 = v122;
                operator delete(v122);
              }
              for (mm = 0; mm != -72; mm -= 24)
              {
                v108 = *(void **)&v121[mm + 136];
                if (v108)
                {
                  *(_QWORD *)&v121[mm + 144] = v108;
                  operator delete(v108);
                }
              }
              for (nn = 0; nn != -72; nn -= 24)
              {
                v110 = *(void **)&v121[nn + 64];
                if (v110)
                {
                  *(_QWORD *)&v121[nn + 72] = v110;
                  operator delete(v110);
                }
              }
            }
            while (v91-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_OWORD *)(a1 + 184 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x5C01)
        {
          sub_236858E48((uint64_t)v13, a1, (uint64_t)v8);
        }
        else
        {
          sub_236858E48(a1, (uint64_t)v13, (uint64_t)v8);
          v14 = 184 * v12;
          v15 = a1 + v14;
          sub_236858E48(a1 + 184, a1 + v14 - 184, (uint64_t)(a2 - 368));
          sub_236858E48(a1 + 368, a1 + 184 + v14, (uint64_t)(a2 - 552));
          sub_236858E48(a1 + v14 - 184, (uint64_t)v13, a1 + 184 + v14);
          sub_236858C08((_OWORD *)a1, v13);
          v16 = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + v14 + 160);
          *(_OWORD *)(v15 + 160) = v16;
          v17 = *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + v14 + 176);
          *(_QWORD *)(v15 + 176) = v17;
          v7 = a2;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 176) * *(_QWORD *)(a1 - 184) <= *(_QWORD *)(a1 + 8) * *(_QWORD *)a1)
        {
          sub_23682A48C((uint64_t)&v124, a1);
          v41 = v125 * v124;
          if ((unint64_t)(v125 * v124) <= *((_QWORD *)v7 - 22) * *((_QWORD *)v7 - 23))
          {
            v44 = (char *)(a1 + 184);
            do
            {
              v9 = v44;
              if (v44 >= v7)
                break;
              v45 = *((_QWORD *)v44 + 1) * *(_QWORD *)v44;
              v44 += 184;
            }
            while (v41 <= v45);
          }
          else
          {
            v9 = (char *)a1;
            do
            {
              v42 = *((_QWORD *)v9 + 23);
              v43 = *((_QWORD *)v9 + 24);
              v9 += 184;
            }
            while (v41 <= v43 * v42);
          }
          v46 = v7;
          if (v9 < v7)
          {
            v46 = v7;
            do
            {
              v47 = *((_QWORD *)v46 - 23);
              v48 = *((_QWORD *)v46 - 22);
              v46 -= 184;
            }
            while (v41 > v48 * v47);
          }
          while (v9 < v46)
          {
            sub_236858C08(v9, v46);
            v49 = *((_QWORD *)v9 + 20);
            *((_QWORD *)v9 + 20) = *((_QWORD *)v46 + 20);
            *((_QWORD *)v46 + 20) = v49;
            v50 = *((_QWORD *)v9 + 21);
            *((_QWORD *)v9 + 21) = *((_QWORD *)v46 + 21);
            *((_QWORD *)v46 + 21) = v50;
            v51 = *((_QWORD *)v9 + 22);
            *((_QWORD *)v9 + 22) = *((_QWORD *)v46 + 22);
            *((_QWORD *)v46 + 22) = v51;
            v52 = v125 * v124;
            do
            {
              v53 = *((_QWORD *)v9 + 23);
              v54 = *((_QWORD *)v9 + 24);
              v9 += 184;
            }
            while (v52 <= v54 * v53);
            do
            {
              v55 = *((_QWORD *)v46 - 23);
              v56 = *((_QWORD *)v46 - 22);
              v46 -= 184;
            }
            while (v52 > v56 * v55);
          }
          if (v9 - 184 != (char *)a1)
            sub_2368592C0(a1, (uint64_t)(v9 - 184));
          sub_2368592C0((uint64_t)(v9 - 184), (uint64_t)&v124);
          if (__p)
          {
            v128 = __p;
            operator delete(__p);
          }
          for (i1 = 0; i1 != -72; i1 -= 24)
          {
            v58 = *(void **)&v126[i1 + 72];
            if (v58)
            {
              *(_QWORD *)&v126[i1 + 80] = v58;
              operator delete(v58);
            }
          }
          for (i2 = 0; i2 != -72; i2 -= 24)
          {
            v60 = *(void **)&v126[i2];
            if (v60)
            {
              *(_QWORD *)&v126[i2 + 8] = v60;
              operator delete(v60);
            }
          }
          a4 = 0;
          continue;
        }
        sub_23682A48C((uint64_t)&v124, a1);
        v18 = v125 * v124;
        v19 = (char *)a1;
        do
        {
          v20 = v19;
          v21 = *((_QWORD *)v19 + 23);
          v19 += 184;
        }
        while (*((_QWORD *)v20 + 24) * v21 > v18);
        if (v20 == (char *)a1)
        {
          v7 = a2;
          do
          {
            if (v19 >= v7)
              break;
            v24 = *((_QWORD *)v7 - 23);
            v25 = *((_QWORD *)v7 - 22);
            v7 -= 184;
          }
          while (v25 * v24 <= v18);
        }
        else
        {
          do
          {
            v22 = *((_QWORD *)v7 - 23);
            v23 = *((_QWORD *)v7 - 22);
            v7 -= 184;
          }
          while (v23 * v22 <= v18);
        }
        if (v19 < v7)
        {
          v26 = v19;
          v27 = v7;
          do
          {
            sub_236858C08(v26, v27);
            v28 = *((_QWORD *)v26 + 20);
            *((_QWORD *)v26 + 20) = *((_QWORD *)v27 + 20);
            *((_QWORD *)v27 + 20) = v28;
            v29 = *((_QWORD *)v26 + 21);
            *((_QWORD *)v26 + 21) = *((_QWORD *)v27 + 21);
            *((_QWORD *)v27 + 21) = v29;
            v30 = *((_QWORD *)v26 + 22);
            *((_QWORD *)v26 + 22) = *((_QWORD *)v27 + 22);
            *((_QWORD *)v27 + 22) = v30;
            v31 = v125 * v124;
            do
            {
              v20 = v26;
              v32 = *((_QWORD *)v26 + 23);
              v26 += 184;
            }
            while (*((_QWORD *)v20 + 24) * v32 > v31);
            do
            {
              v33 = *((_QWORD *)v27 - 23);
              v34 = *((_QWORD *)v27 - 22);
              v27 -= 184;
            }
            while (v34 * v33 <= v31);
          }
          while (v26 < v27);
        }
        if (v20 != (char *)a1)
          sub_2368592C0(a1, (uint64_t)v20);
        sub_2368592C0((uint64_t)v20, (uint64_t)&v124);
        if (__p)
        {
          v128 = __p;
          operator delete(__p);
        }
        for (i3 = 0; i3 != -72; i3 -= 24)
        {
          v36 = *(void **)&v126[i3 + 72];
          if (v36)
          {
            *(_QWORD *)&v126[i3 + 80] = v36;
            operator delete(v36);
          }
        }
        for (i4 = 0; i4 != -72; i4 -= 24)
        {
          v38 = *(void **)&v126[i4];
          if (v38)
          {
            *(_QWORD *)&v126[i4 + 8] = v38;
            operator delete(v38);
          }
        }
        v39 = v19 >= v7;
        v7 = a2;
        if (!v39)
        {
LABEL_40:
          sub_2368576B8(a1, v20, a3, a4 & 1);
          a4 = 0;
          v9 = v20 + 184;
          continue;
        }
        v40 = sub_2368593D0(a1, v20);
        v9 = v20 + 184;
        if (!sub_2368593D0((uint64_t)(v20 + 184), a2))
        {
          if (v40)
            continue;
          goto LABEL_40;
        }
        a2 = v20;
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

  v94 = a2;
  v96 = a2 - 23;
  v92 = a2 - 69;
  v93 = a2 - 46;
  v8 = (_QWORD *)a1;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xD37A6F4DE9BD37A7 * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_23685A128(v96, v8))
        {
          sub_236858C08(v8, v96);
          v40 = v8[20];
          v8[20] = *(a2 - 3);
          *(a2 - 3) = v40;
          v41 = v8[21];
          v8[21] = *(a2 - 2);
          *(a2 - 2) = v41;
          v42 = v8[22];
          v8[22] = *(a2 - 1);
          *(a2 - 1) = v42;
        }
        return;
      case 3:
        sub_23685A1CC(v8, v8 + 23, v96);
        return;
      case 4:
        sub_23685A36C(v8, v8 + 23, v8 + 46, (uint64_t)v96);
        return;
      case 5:
        sub_23685A484(v8, v8 + 23, v8 + 46, (uint64_t)(v8 + 69), (uint64_t)v96);
        return;
      default:
        if (v9 <= 4415)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 != a2)
            {
              v43 = v8 + 23;
              if (v8 + 23 != a2)
              {
                v44 = 0;
                v45 = (uint64_t)v8;
                do
                {
                  v46 = (_QWORD *)v45;
                  v45 = (uint64_t)v43;
                  if (sub_23685A128(v43, v46))
                  {
                    sub_23682A48C((uint64_t)v101, v45);
                    v47 = v44;
                    while (1)
                    {
                      sub_2368592C0((uint64_t)v8 + v47 + 184, (uint64_t)v8 + v47);
                      if (!v47)
                        break;
                      v47 -= 184;
                      if ((sub_23685A128(v101, (_QWORD *)((char *)v8 + v47)) & 1) == 0)
                      {
                        v48 = (uint64_t)v8 + v47 + 184;
                        goto LABEL_86;
                      }
                    }
                    v48 = (uint64_t)v8;
LABEL_86:
                    sub_2368592C0(v48, (uint64_t)v101);
                    if (__p)
                    {
                      v103 = __p;
                      operator delete(__p);
                    }
                    for (i = 0; i != -9; i -= 3)
                    {
                      v50 = (void *)v101[i + 17];
                      if (v50)
                      {
                        v101[i + 18] = v50;
                        operator delete(v50);
                      }
                    }
                    for (j = 0; j != -9; j -= 3)
                    {
                      v52 = (void *)v101[j + 8];
                      if (v52)
                      {
                        v101[j + 9] = v52;
                        operator delete(v52);
                      }
                    }
                  }
                  v43 = (_QWORD *)(v45 + 184);
                  v44 += 184;
                }
                while ((_QWORD *)(v45 + 184) != a2);
              }
            }
          }
          else if (v8 != a2)
          {
            v85 = v8 + 23;
            if (v8 + 23 != a2)
            {
              do
              {
                v86 = (uint64_t)v85;
                if (sub_23685A128(v85, (_QWORD *)a1))
                {
                  sub_23682A48C((uint64_t)v101, v86);
                  do
                  {
                    v87 = a1;
                    sub_2368592C0(a1 + 184, a1);
                    a1 -= 184;
                  }
                  while ((sub_23685A128(v101, (_QWORD *)a1) & 1) != 0);
                  sub_2368592C0(v87, (uint64_t)v101);
                  if (__p)
                  {
                    v103 = __p;
                    operator delete(__p);
                  }
                  for (k = 0; k != -9; k -= 3)
                  {
                    v89 = (void *)v101[k + 17];
                    if (v89)
                    {
                      v101[k + 18] = v89;
                      operator delete(v89);
                    }
                  }
                  for (m = 0; m != -9; m -= 3)
                  {
                    v91 = (void *)v101[m + 8];
                    if (v91)
                    {
                      v101[m + 9] = v91;
                      operator delete(v91);
                    }
                  }
                }
                v85 = (_QWORD *)(v86 + 184);
                a1 = v86;
              }
              while ((_QWORD *)(v86 + 184) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v53 = (unint64_t)(v10 - 2) >> 1;
            v97 = v53;
            do
            {
              v54 = v53;
              if (v97 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = (_QWORD *)(a1 + 184 * v55);
                if (2 * v53 + 2 < v10 && sub_23685A128((_QWORD *)(a1 + 184 * v55), v56 + 23))
                {
                  v56 += 23;
                  v55 = 2 * v54 + 2;
                }
                v57 = (_QWORD *)(a1 + 184 * v54);
                if ((sub_23685A128(v56, v57) & 1) == 0)
                {
                  sub_23682A48C((uint64_t)v101, a1 + 184 * v54);
                  do
                  {
                    v58 = (uint64_t)v56;
                    sub_2368592C0((uint64_t)v57, (uint64_t)v56);
                    if (v97 < v55)
                      break;
                    v59 = (2 * v55) | 1;
                    v56 = (_QWORD *)(a1 + 184 * v59);
                    v60 = 2 * v55 + 2;
                    if (v60 < v10 && sub_23685A128((_QWORD *)(a1 + 184 * v59), v56 + 23))
                    {
                      v56 += 23;
                      v59 = v60;
                    }
                    v57 = (_QWORD *)v58;
                    v55 = v59;
                  }
                  while (!sub_23685A128(v56, v101));
                  sub_2368592C0(v58, (uint64_t)v101);
                  if (__p)
                  {
                    v103 = __p;
                    operator delete(__p);
                  }
                  for (n = 0; n != -9; n -= 3)
                  {
                    v62 = (void *)v101[n + 17];
                    if (v62)
                    {
                      v101[n + 18] = v62;
                      operator delete(v62);
                    }
                  }
                  for (ii = 0; ii != -9; ii -= 3)
                  {
                    v64 = (void *)v101[ii + 8];
                    if (v64)
                    {
                      v101[ii + 9] = v64;
                      operator delete(v64);
                    }
                  }
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v65 = v9 / 0xB8uLL;
            v66 = v94;
            do
            {
              if (v65 >= 2)
              {
                v95 = v66;
                sub_23682A48C((uint64_t)v98, a1);
                v67 = 0;
                v68 = a1;
                do
                {
                  v69 = (_QWORD *)(v68 + 184 * v67 + 184);
                  v70 = (2 * v67) | 1;
                  v71 = 2 * v67 + 2;
                  if (v71 < v65
                    && sub_23685A128((_QWORD *)(v68 + 184 * v67 + 184), (_QWORD *)(v68 + 184 * v67 + 368)))
                  {
                    v69 += 23;
                    v70 = v71;
                  }
                  sub_2368592C0(v68, (uint64_t)v69);
                  v68 = (uint64_t)v69;
                  v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
                v66 = v95;
                if (v69 == v95 - 23)
                {
                  sub_2368592C0((uint64_t)v69, (uint64_t)v98);
                }
                else
                {
                  sub_2368592C0((uint64_t)v69, (uint64_t)(v95 - 23));
                  sub_2368592C0((uint64_t)(v95 - 23), (uint64_t)v98);
                  v72 = (uint64_t)v69 - a1 + 184;
                  if (v72 >= 185)
                  {
                    v73 = (unint64_t)(-2 - 0x2C8590B21642C859 * (v72 >> 3)) >> 1;
                    v74 = (_QWORD *)(a1 + 184 * v73);
                    if (sub_23685A128(v74, v69))
                    {
                      sub_23682A48C((uint64_t)v101, (uint64_t)v69);
                      do
                      {
                        v75 = (uint64_t)v74;
                        sub_2368592C0((uint64_t)v69, (uint64_t)v74);
                        if (!v73)
                          break;
                        v73 = (v73 - 1) >> 1;
                        v74 = (_QWORD *)(a1 + 184 * v73);
                        v69 = (_QWORD *)v75;
                      }
                      while ((sub_23685A128(v74, v101) & 1) != 0);
                      sub_2368592C0(v75, (uint64_t)v101);
                      if (__p)
                      {
                        v103 = __p;
                        operator delete(__p);
                      }
                      for (jj = 0; jj != -9; jj -= 3)
                      {
                        v77 = (void *)v101[jj + 17];
                        if (v77)
                        {
                          v101[jj + 18] = v77;
                          operator delete(v77);
                        }
                      }
                      for (kk = 0; kk != -9; kk -= 3)
                      {
                        v79 = (void *)v101[kk + 8];
                        if (v79)
                        {
                          v101[kk + 9] = v79;
                          operator delete(v79);
                        }
                      }
                    }
                  }
                }
                if (v99)
                {
                  v100 = v99;
                  operator delete(v99);
                }
                for (mm = 0; mm != -72; mm -= 24)
                {
                  v81 = *(void **)&v98[mm + 136];
                  if (v81)
                  {
                    *(_QWORD *)&v98[mm + 144] = v81;
                    operator delete(v81);
                  }
                }
                for (nn = 0; nn != -72; nn -= 24)
                {
                  v83 = *(void **)&v98[nn + 64];
                  if (v83)
                  {
                    *(_QWORD *)&v98[nn + 72] = v83;
                    operator delete(v83);
                  }
                }
              }
              v66 -= 23;
            }
            while ((unint64_t)v65-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[23 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x5C01)
        {
          sub_23685A1CC(&v8[23 * v11], v8, v96);
        }
        else
        {
          sub_23685A1CC(v8, &v8[23 * v11], v96);
          v13 = 184 * v11;
          v14 = &v8[(unint64_t)v13 / 8];
          sub_23685A1CC((_QWORD *)(a1 + 184), (_QWORD *)(a1 + v13 - 184), v93);
          sub_23685A1CC((_QWORD *)(a1 + 368), (_QWORD *)(a1 + 184 + v13), v92);
          sub_23685A1CC((_QWORD *)(a1 + v13 - 184), v12, (_QWORD *)(a1 + 184 + v13));
          sub_236858C08((_OWORD *)a1, v12);
          v15 = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 160) = *((_OWORD *)v14 + 10);
          *((_OWORD *)v14 + 10) = v15;
          v16 = *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 176) = v14[22];
          v14[22] = v16;
        }
        --a3;
        if ((a4 & 1) == 0 && (sub_23685A128((_QWORD *)(a1 - 184), (_QWORD *)a1) & 1) == 0)
        {
          sub_23682A48C((uint64_t)v101, a1);
          if ((sub_23685A128(v101, v96) & 1) != 0)
          {
            v8 = (_QWORD *)a1;
            do
              v8 += 23;
            while ((sub_23685A128(v101, v8) & 1) == 0);
          }
          else
          {
            v30 = (_QWORD *)(a1 + 184);
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v31 = sub_23685A128(v101, v30);
              v30 = v8 + 23;
            }
            while (!v31);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v32 -= 23;
            while ((sub_23685A128(v101, v32) & 1) != 0);
          }
          while (v8 < v32)
          {
            sub_236858C08(v8, v32);
            v33 = v8[20];
            v8[20] = v32[20];
            v32[20] = v33;
            v34 = v8[21];
            v8[21] = v32[21];
            v32[21] = v34;
            v35 = v8[22];
            v8[22] = v32[22];
            v32[22] = v35;
            do
              v8 += 23;
            while (!sub_23685A128(v101, v8));
            do
              v32 -= 23;
            while ((sub_23685A128(v101, v32) & 1) != 0);
          }
          if (v8 - 23 != (_QWORD *)a1)
            sub_2368592C0(a1, (uint64_t)(v8 - 23));
          sub_2368592C0((uint64_t)(v8 - 23), (uint64_t)v101);
          if (__p)
          {
            v103 = __p;
            operator delete(__p);
          }
          for (i1 = 0; i1 != -9; i1 -= 3)
          {
            v37 = (void *)v101[i1 + 17];
            if (v37)
            {
              v101[i1 + 18] = v37;
              operator delete(v37);
            }
          }
          for (i2 = 0; i2 != -9; i2 -= 3)
          {
            v39 = (void *)v101[i2 + 8];
            if (v39)
            {
              v101[i2 + 9] = v39;
              operator delete(v39);
            }
          }
          a4 = 0;
          continue;
        }
        sub_23682A48C((uint64_t)v101, a1);
        v17 = (_QWORD *)a1;
        do
        {
          v18 = v17;
          v17 += 23;
        }
        while ((sub_23685A128(v17, v101) & 1) != 0);
        v19 = a2;
        if (v18 == (_QWORD *)a1)
        {
          v19 = a2;
          do
          {
            if (v17 >= v19)
              break;
            v19 -= 23;
          }
          while ((sub_23685A128(v19, v101) & 1) == 0);
        }
        else
        {
          do
            v19 -= 23;
          while (!sub_23685A128(v19, v101));
        }
        if (v17 < v19)
        {
          v20 = v17;
          v21 = v19;
          do
          {
            sub_236858C08(v20, v21);
            v22 = v20[20];
            v20[20] = v21[20];
            v21[20] = v22;
            v23 = v20[21];
            v20[21] = v21[21];
            v21[21] = v23;
            v24 = v20[22];
            v20[22] = v21[22];
            v21[22] = v24;
            do
            {
              v18 = v20;
              v20 += 23;
            }
            while ((sub_23685A128(v20, v101) & 1) != 0);
            do
              v21 -= 23;
            while (!sub_23685A128(v21, v101));
          }
          while (v20 < v21);
        }
        if (v18 != (_QWORD *)a1)
          sub_2368592C0(a1, (uint64_t)v18);
        sub_2368592C0((uint64_t)v18, (uint64_t)v101);
        if (__p)
        {
          v103 = __p;
          operator delete(__p);
        }
        v25 = 0;
        a2 = v94;
        do
        {
          v26 = (void *)v101[v25 + 17];
          if (v26)
          {
            v101[v25 + 18] = v26;
            operator delete(v26);
          }
          v25 -= 3;
        }
        while (v25 != -9);
        for (i3 = 0; i3 != -9; i3 -= 3)
        {
          v28 = (void *)v101[i3 + 8];
          if (v28)
          {
            v101[i3 + 9] = v28;
            operator delete(v28);
          }
        }
        if (v17 < v19)
        {
LABEL_39:
          sub_236859628(a1, v18, a3, a4 & 1);
          a4 = 0;
          v8 = v18 + 23;
          continue;
        }
        v29 = sub_23685A5F4(a1, v18);
        v8 = v18 + 23;
        if (!sub_23685A5F4((uint64_t)(v18 + 23), v94))
        {
          if (v29)
            continue;
          goto LABEL_39;
        }
        a2 = v18;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v190 = a2 - 24;
  v187 = a2 - 48;
  v185 = a2 - 72;
  v7 = (unint64_t)a1;
  v198 = a2;
  while (2)
  {
    v8 = (_QWORD *)v7;
    v9 = a2 - v7;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v213 = 0;
        v214 = 0;
        v215 = 0;
        sub_2367CBEFC(&v213, *(const void **)(a2 - 24), *(_QWORD *)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24)) >> 2);
        v210 = 0;
        v211 = 0;
        v212 = 0;
        sub_2367CBEFC(&v210, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
        v84 = v213;
        v85 = (float)((float)((float)((float)v213[1] * 0.587) + (float)((float)*v213 * 0.299))
                    + (float)((float)v213[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v214 - (char *)v213) >= 0xD)
          v85 = v85 * (float)((float)v213[3] + 1.0);
        v86 = (float)((float)((float)((float)v210[1] * 0.587) + (float)((float)*v210 * 0.299))
                    + (float)((float)v210[2] * 0.114))
            + 0.1;
        if ((unint64_t)((char *)v211 - (char *)v210) >= 0xD)
          v86 = v86 * (float)((float)v210[3] + 1.0);
        v211 = v210;
        operator delete(v210);
        v214 = v84;
        operator delete(v84);
        if (v85 < v86)
        {
          v87 = *(const void **)v7;
          *(_QWORD *)v7 = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v87;
          v88 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v88;
          v89 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v89;
        }
        return;
      case 3uLL:
        sub_23687DA50(v7, v7 + 24, v190);
        return;
      case 4uLL:
        sub_23687E070(v7, v7 + 24, v7 + 48, v190);
        return;
      case 5uLL:
        sub_23687E458(v7, v7 + 24, v7 + 48, v7 + 72, v190);
        return;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != a2)
            {
              v90 = v7 + 24;
              if (v7 + 24 != a2)
              {
                v91 = 0;
                v92 = v7;
                do
                {
                  v93 = v90;
                  v243 = 0;
                  v244 = 0;
                  v245 = 0;
                  sub_2367CBEFC(&v243, *(const void **)(v92 + 24), *(_QWORD *)(v92 + 32), (uint64_t)(*(_QWORD *)(v92 + 32) - *(_QWORD *)(v92 + 24)) >> 2);
                  v240 = 0;
                  v241 = 0;
                  v242 = 0;
                  sub_2367CBEFC(&v240, *(const void **)v92, *(_QWORD *)(v92 + 8), (uint64_t)(*(_QWORD *)(v92 + 8) - *(_QWORD *)v92) >> 2);
                  v94 = v243;
                  v95 = (float)((float)((float)((float)v94[1] * 0.587) + (float)((float)*v94 * 0.299))
                              + (float)((float)v94[2] * 0.114))
                      + 0.1;
                  if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
                    v95 = v95 * (float)((float)v243[3] + 1.0);
                  v96 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                              + (float)((float)v240[2] * 0.114))
                      + 0.1;
                  if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
                    v96 = v96 * (float)((float)v240[3] + 1.0);
                  v241 = v240;
                  operator delete(v240);
                  v244 = v94;
                  operator delete(v94);
                  if (v95 < v96)
                  {
                    v97 = 0;
                    v98 = *(const void **)v93;
                    v99 = *(_OWORD *)(v92 + 32);
                    *(_QWORD *)(v93 + 8) = 0;
                    *(_QWORD *)(v93 + 16) = 0;
                    *(_QWORD *)v93 = 0;
                    v202 = v99;
                    v100 = v99;
                    v101 = (uint64_t)(v99 - (_QWORD)v98) >> 2;
                    for (i = v91; ; i -= 24)
                    {
                      v103 = (char *)v8 + i;
                      if (v97)
                      {
                        *((_QWORD *)v103 + 4) = v97;
                        operator delete(v97);
                        *((_QWORD *)v103 + 3) = 0;
                        *((_QWORD *)v103 + 4) = 0;
                        *((_QWORD *)v103 + 5) = 0;
                      }
                      *(_OWORD *)(v103 + 24) = *(_OWORD *)v103;
                      *((_QWORD *)v103 + 5) = *((_QWORD *)v103 + 2);
                      *((_QWORD *)v103 + 1) = 0;
                      *((_QWORD *)v103 + 2) = 0;
                      *(_QWORD *)v103 = 0;
                      if (!i)
                      {
                        v107 = (char *)v8;
                        goto LABEL_140;
                      }
                      v237 = 0;
                      v238 = 0;
                      v239 = 0;
                      sub_2367CBEFC(&v237, v98, v100, v101);
                      v234 = 0;
                      v235 = 0;
                      v236 = 0;
                      sub_2367CBEFC(&v234, *(const void **)((char *)v8 + i - 24), *(_QWORD *)((char *)v8 + i - 16), (uint64_t)(*(_QWORD *)((char *)v8 + i - 16) - *(_QWORD *)((char *)v8 + i - 24)) >> 2);
                      v104 = v237;
                      v105 = (float)((float)((float)((float)v104[1] * 0.587) + (float)((float)*v104 * 0.299))
                                   + (float)((float)v104[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                        v105 = v105 * (float)((float)v237[3] + 1.0);
                      v106 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                                   + (float)((float)v234[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                        v106 = v106 * (float)((float)v234[3] + 1.0);
                      v235 = v234;
                      operator delete(v234);
                      v238 = v104;
                      operator delete(v104);
                      if (v105 >= v106)
                        break;
                      v97 = *(void **)v103;
                    }
                    v107 = (char *)v8 + i;
LABEL_140:
                    v108 = *(void **)v107;
                    a2 = v198;
                    if (*(_QWORD *)v107)
                    {
                      *((_QWORD *)v107 + 1) = v108;
                      operator delete(v108);
                      *(_QWORD *)v107 = 0;
                      *((_QWORD *)v107 + 1) = 0;
                      *((_QWORD *)v107 + 2) = 0;
                    }
                    *(_QWORD *)v107 = v98;
                    *(_OWORD *)(v107 + 8) = v202;
                  }
                  v90 = v93 + 24;
                  v91 += 24;
                  v92 = v93;
                }
                while (v93 + 24 != a2);
              }
            }
          }
          else if (v7 != a2)
          {
            v168 = v7 + 24;
            if (v7 + 24 != a2)
            {
              do
              {
                v169 = (_QWORD *)v168;
                v243 = 0;
                v244 = 0;
                v245 = 0;
                sub_2367CBEFC(&v243, (const void *)v8[3], v8[4], (uint64_t)(v8[4] - v8[3]) >> 2);
                v240 = 0;
                v241 = 0;
                v242 = 0;
                sub_2367CBEFC(&v240, (const void *)*v8, v8[1], (uint64_t)(v8[1] - *v8) >> 2);
                v170 = v243;
                v171 = (float)((float)((float)((float)v170[1] * 0.587) + (float)((float)*v170 * 0.299))
                             + (float)((float)v170[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
                  v171 = v171 * (float)((float)v243[3] + 1.0);
                v172 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                             + (float)((float)v240[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
                  v172 = v172 * (float)((float)v240[3] + 1.0);
                v241 = v240;
                operator delete(v240);
                v244 = v170;
                operator delete(v170);
                if (v171 < v172)
                {
                  v173 = (const void *)*v169;
                  v174 = *((_OWORD *)v8 + 2);
                  v169[1] = 0;
                  v169[2] = 0;
                  *v169 = 0;
                  v203 = v174;
                  v175 = v174;
                  v176 = (uint64_t)(v174 - (_QWORD)v173) >> 2;
                  do
                  {
                    v177 = (void *)v8[3];
                    if (v177)
                    {
                      v8[4] = v177;
                      operator delete(v177);
                      v8[3] = 0;
                      v8[4] = 0;
                      v8[5] = 0;
                    }
                    *(_OWORD *)(v8 + 3) = *(_OWORD *)v8;
                    v8[5] = v8[2];
                    v8[1] = 0;
                    v8[2] = 0;
                    *v8 = 0;
                    v237 = 0;
                    v238 = 0;
                    v239 = 0;
                    sub_2367CBEFC(&v237, v173, v175, v176);
                    v234 = 0;
                    v235 = 0;
                    v236 = 0;
                    v178 = (const void *)*(v8 - 3);
                    v179 = *(v8 - 2);
                    v8 -= 3;
                    sub_2367CBEFC(&v234, v178, v179, (v179 - (uint64_t)v178) >> 2);
                    v180 = v237;
                    v181 = (float)((float)((float)((float)v180[1] * 0.587) + (float)((float)*v180 * 0.299))
                                 + (float)((float)v180[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                      v181 = v181 * (float)((float)v237[3] + 1.0);
                    v182 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                                 + (float)((float)v234[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                      v182 = v182 * (float)((float)v234[3] + 1.0);
                    v235 = v234;
                    operator delete(v234);
                    v238 = v180;
                    operator delete(v180);
                  }
                  while (v181 < v182);
                  v183 = v8 + 3;
                  v184 = (void *)v8[3];
                  if (v184)
                  {
                    v8[4] = v184;
                    operator delete(v184);
                    *v183 = 0;
                    v8[4] = 0;
                    v8[5] = 0;
                  }
                  *v183 = v173;
                  *((_OWORD *)v8 + 2) = v203;
                  a2 = v198;
                }
                v168 = (unint64_t)(v169 + 3);
                v8 = v169;
              }
              while (v169 + 3 != (_QWORD *)a2);
            }
          }
          return;
        }
        v201 = (void **)v7;
        if (!a3)
        {
          if (v7 != a2)
          {
            v109 = (v10 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v188 = v110;
                v112 = (2 * v110) | 1;
                v113 = (const void **)&v8[3 * v112];
                v114 = 2 * v110 + 2;
                if (v114 < (uint64_t)v10)
                {
                  v243 = 0;
                  v244 = 0;
                  v245 = 0;
                  sub_2367CBEFC(&v243, *v113, v8[3 * v112 + 1], (uint64_t)(v8[3 * v112 + 1] - (_QWORD)*v113) >> 2);
                  v240 = 0;
                  v241 = 0;
                  v242 = 0;
                  sub_2367CBEFC(&v240, v113[3], (uint64_t)v113[4], ((_BYTE *)v113[4] - (_BYTE *)v113[3]) >> 2);
                  v115 = v243;
                  v116 = (float)((float)((float)((float)v115[1] * 0.587) + (float)((float)*v115 * 0.299))
                               + (float)((float)v115[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
                    v116 = v116 * (float)((float)v243[3] + 1.0);
                  v117 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                               + (float)((float)v240[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
                    v117 = v117 * (float)((float)v240[3] + 1.0);
                  v241 = v240;
                  operator delete(v240);
                  v244 = v115;
                  operator delete(v115);
                  if (v116 < v117)
                  {
                    v113 += 3;
                    v112 = v114;
                  }
                }
                v111 = v188;
                v118 = (const void **)&v8[3 * v188];
                v237 = 0;
                v238 = 0;
                v239 = 0;
                sub_2367CBEFC(&v237, *v113, (uint64_t)v113[1], ((_BYTE *)v113[1] - (_BYTE *)*v113) >> 2);
                v234 = 0;
                v235 = 0;
                v236 = 0;
                sub_2367CBEFC(&v234, *v118, (uint64_t)v118[1], ((_BYTE *)v118[1] - (_BYTE *)*v118) >> 2);
                v119 = v237;
                v120 = (float)((float)((float)((float)v119[1] * 0.587) + (float)((float)*v119 * 0.299))
                             + (float)((float)v119[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                  v120 = v120 * (float)((float)v237[3] + 1.0);
                v121 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                             + (float)((float)v234[2] * 0.114))
                     + 0.1;
                if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                  v121 = v121 * (float)((float)v234[3] + 1.0);
                v235 = v234;
                operator delete(v234);
                v238 = v119;
                operator delete(v119);
                if (v120 >= v121)
                {
                  v122 = *v118;
                  v123 = *(_OWORD *)(v118 + 1);
                  v118[1] = 0;
                  v118[2] = 0;
                  *v118 = 0;
                  v186 = v123;
                  v195 = v123;
                  v191 = (uint64_t)(v123 - (_QWORD)v122) >> 2;
                  while (1)
                  {
                    v124 = v113;
                    v125 = (void *)*v118;
                    if (*v118)
                    {
                      v118[1] = v125;
                      operator delete(v125);
                      *v118 = 0;
                      v118[1] = 0;
                      v118[2] = 0;
                    }
                    *(_OWORD *)v118 = *(_OWORD *)v113;
                    v118[2] = v113[2];
                    *v113 = 0;
                    v113[1] = 0;
                    v113[2] = 0;
                    if ((uint64_t)((v10 - 2) >> 1) < v112)
                      break;
                    v126 = 2 * v112;
                    v127 = (2 * v112) | 1;
                    v112 = v127;
                    v113 = (const void **)&v8[3 * v127];
                    v128 = v126 + 2;
                    if (v126 + 2 < (uint64_t)v10)
                    {
                      v231 = 0;
                      v232 = 0;
                      v233 = 0;
                      sub_2367CBEFC(&v231, *v113, v8[3 * v127 + 1], (uint64_t)(v8[3 * v127 + 1] - (_QWORD)*v113) >> 2);
                      v228 = 0;
                      v229 = 0;
                      v230 = 0;
                      sub_2367CBEFC(&v228, v113[3], (uint64_t)v113[4], ((_BYTE *)v113[4] - (_BYTE *)v113[3]) >> 2);
                      v129 = v231;
                      v130 = (float)((float)((float)((float)v231[1] * 0.587) + (float)((float)*v231 * 0.299))
                                   + (float)((float)v231[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v232 - (char *)v231) >= 0xD)
                        v130 = v130 * (float)((float)v231[3] + 1.0);
                      v131 = (float)((float)((float)((float)v228[1] * 0.587) + (float)((float)*v228 * 0.299))
                                   + (float)((float)v228[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v229 - (char *)v228) >= 0xD)
                        v131 = v131 * (float)((float)v228[3] + 1.0);
                      v229 = v228;
                      operator delete(v228);
                      v232 = v129;
                      operator delete(v129);
                      if (v130 < v131)
                      {
                        v113 += 3;
                        v112 = v128;
                      }
                    }
                    v225 = 0;
                    v226 = 0;
                    v227 = 0;
                    sub_2367CBEFC(&v225, *v113, (uint64_t)v113[1], ((_BYTE *)v113[1] - (_BYTE *)*v113) >> 2);
                    v222 = 0;
                    v223 = 0;
                    v224 = 0;
                    sub_2367CBEFC(&v222, v122, v195, v191);
                    v8 = v201;
                    v132 = v225;
                    v133 = (float)((float)((float)((float)v225[1] * 0.587) + (float)((float)*v225 * 0.299))
                                 + (float)((float)v225[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v226 - (char *)v225) >= 0xD)
                      v133 = v133 * (float)((float)v225[3] + 1.0);
                    v134 = (float)((float)((float)((float)v222[1] * 0.587) + (float)((float)*v222 * 0.299))
                                 + (float)((float)v222[2] * 0.114))
                         + 0.1;
                    if ((unint64_t)((char *)v223 - (char *)v222) >= 0xD)
                      v134 = v134 * (float)((float)v222[3] + 1.0);
                    v223 = v222;
                    operator delete(v222);
                    v226 = v132;
                    operator delete(v132);
                    v118 = v124;
                    if (v133 < v134)
                    {
                      v135 = (void *)*v124;
                      if (*v124)
                      {
                        v124[1] = v135;
                        operator delete(v135);
                        *v124 = 0;
                        v124[1] = 0;
                        v124[2] = 0;
                      }
                      break;
                    }
                  }
                  *v124 = v122;
                  *(_OWORD *)(v124 + 1) = v186;
                  v111 = v188;
                }
              }
              v110 = v111 - 1;
              v109 = (v10 - 2) >> 1;
            }
            while (v111);
            v136 = v9 / 0x18uLL;
            v137 = v198;
            do
            {
              v199 = v137;
              v138 = 0;
              v139 = (const void *)*v8;
              v192 = (const void *)v8[2];
              v196 = (const void *)v8[1];
              v8[2] = 0;
              v140 = (void **)v8;
              *v8 = 0;
              v8[1] = 0;
              do
              {
                v141 = v138 + 1;
                v142 = (const void **)&v140[3 * v138 + 3];
                v143 = 2 * v138;
                v138 = (2 * v138) | 1;
                v144 = v143 + 2;
                if (v143 + 2 < v136)
                {
                  v243 = 0;
                  v244 = 0;
                  v245 = 0;
                  sub_2367CBEFC(&v243, *v142, (uint64_t)v140[3 * v141 + 1], ((_BYTE *)v140[3 * v141 + 1] - (_BYTE *)*v142) >> 2);
                  v240 = 0;
                  v241 = 0;
                  v242 = 0;
                  sub_2367CBEFC(&v240, v142[3], (uint64_t)v142[4], ((_BYTE *)v142[4] - (_BYTE *)v142[3]) >> 2);
                  v145 = v243;
                  v146 = (float)((float)((float)((float)v145[1] * 0.587) + (float)((float)*v145 * 0.299))
                               + (float)((float)v145[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
                    v146 = v146 * (float)((float)v243[3] + 1.0);
                  v147 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                               + (float)((float)v240[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
                    v147 = v147 * (float)((float)v240[3] + 1.0);
                  v241 = v240;
                  operator delete(v240);
                  v244 = v145;
                  operator delete(v145);
                  if (v146 < v147)
                  {
                    v142 += 3;
                    v138 = v144;
                  }
                }
                v148 = *v140;
                if (*v140)
                {
                  v140[1] = v148;
                  operator delete(v148);
                  *v140 = 0;
                  v140[1] = 0;
                  v140[2] = 0;
                }
                *(_OWORD *)v140 = *(_OWORD *)v142;
                v140[2] = (void *)v142[2];
                *v142 = 0;
                v142[1] = 0;
                v142[2] = 0;
                v140 = (void **)v142;
              }
              while (v138 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              v149 = v199 - 24;
              v150 = (void *)*v142;
              if (v142 == (const void **)(v199 - 24))
              {
                v8 = v201;
                if (v150)
                {
                  v142[1] = v150;
                  operator delete(v150);
                  *v142 = 0;
                  v142[1] = 0;
                  v142[2] = 0;
                }
                *v142 = v139;
                v142[1] = v196;
                v142[2] = v192;
              }
              else
              {
                if (v150)
                {
                  v142[1] = v150;
                  operator delete(v150);
                  *v142 = 0;
                  v142[1] = 0;
                  v142[2] = 0;
                }
                *(_OWORD *)v142 = *(_OWORD *)(v199 - 24);
                v142[2] = *(const void **)(v199 - 8);
                *(_QWORD *)(v199 - 24) = v139;
                *(_QWORD *)(v199 - 16) = v196;
                *(_QWORD *)(v199 - 8) = v192;
                v151 = (char *)v142 - (char *)v201 + 24;
                if (v151 >= 25)
                {
                  v152 = (v151 / 0x18uLL - 2) >> 1;
                  v153 = (const void **)&v201[3 * v152];
                  v243 = 0;
                  v244 = 0;
                  v245 = 0;
                  sub_2367CBEFC(&v243, *v153, (uint64_t)v153[1], ((_BYTE *)v153[1] - (_BYTE *)*v153) >> 2);
                  v240 = 0;
                  v241 = 0;
                  v242 = 0;
                  sub_2367CBEFC(&v240, *v142, (uint64_t)v142[1], ((_BYTE *)v142[1] - (_BYTE *)*v142) >> 2);
                  v154 = v243;
                  v155 = (float)((float)((float)((float)v154[1] * 0.587) + (float)((float)*v154 * 0.299))
                               + (float)((float)v154[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
                    v155 = v155 * (float)((float)v243[3] + 1.0);
                  v156 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                               + (float)((float)v240[2] * 0.114))
                       + 0.1;
                  if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
                    v156 = v156 * (float)((float)v240[3] + 1.0);
                  v241 = v240;
                  operator delete(v240);
                  v244 = v154;
                  operator delete(v154);
                  if (v155 < v156)
                  {
                    v157 = v199 - 24;
                    v158 = *v142;
                    v159 = *(_OWORD *)(v142 + 1);
                    v142[1] = 0;
                    v142[2] = 0;
                    *v142 = 0;
                    v197 = v159;
                    v160 = v159;
                    v200 = (uint64_t)(v159 - (_QWORD)v158) >> 2;
                    while (1)
                    {
                      v161 = v153;
                      v162 = (void *)*v142;
                      if (*v142)
                      {
                        v142[1] = v162;
                        operator delete(v162);
                        *v142 = 0;
                        v142[1] = 0;
                        v142[2] = 0;
                      }
                      *(_OWORD *)v142 = *(_OWORD *)v153;
                      v142[2] = v153[2];
                      *v153 = 0;
                      v153[1] = 0;
                      v153[2] = 0;
                      if (!v152)
                        break;
                      v152 = (v152 - 1) >> 1;
                      v153 = (const void **)&v201[3 * v152];
                      v237 = 0;
                      v238 = 0;
                      v239 = 0;
                      sub_2367CBEFC(&v237, *v153, (uint64_t)v153[1], ((_BYTE *)v153[1] - (_BYTE *)*v153) >> 2);
                      v234 = 0;
                      v235 = 0;
                      v236 = 0;
                      sub_2367CBEFC(&v234, v158, v160, v200);
                      v163 = v237;
                      v164 = (float)((float)((float)((float)v163[1] * 0.587) + (float)((float)*v163 * 0.299))
                                   + (float)((float)v163[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                        v164 = v164 * (float)((float)v237[3] + 1.0);
                      v165 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                                   + (float)((float)v234[2] * 0.114))
                           + 0.1;
                      if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                        v165 = v165 * (float)((float)v234[3] + 1.0);
                      v235 = v234;
                      operator delete(v234);
                      v238 = v163;
                      operator delete(v163);
                      v142 = v161;
                      if (v164 >= v165)
                      {
                        v166 = (void *)*v161;
                        if (*v161)
                        {
                          v161[1] = v166;
                          operator delete(v166);
                          *v161 = 0;
                          v161[1] = 0;
                          v161[2] = 0;
                        }
                        break;
                      }
                    }
                    *v161 = v158;
                    *(_OWORD *)(v161 + 1) = v197;
                    v149 = v157;
                  }
                }
                v8 = v201;
              }
              v137 = v149;
            }
            while (v136-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (_OWORD *)(v7 + 24 * (v10 >> 1));
        if ((unint64_t)v9 < 0xC01)
        {
          sub_23687DA50(v7 + 24 * (v10 >> 1), v7, v190);
        }
        else
        {
          sub_23687DA50(v7, v7 + 24 * (v10 >> 1), v190);
          v13 = 3 * v11;
          v14 = v7 + 24 * v11;
          sub_23687DA50(v7 + 24, v14 - 24, v187);
          sub_23687DA50(v7 + 48, v7 + 24 + 8 * v13, v185);
          sub_23687DA50(v14 - 24, v7 + 24 * (v10 >> 1), v7 + 24 + 8 * v13);
          v15 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *v12;
          *v12 = v15;
          v16 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v14 + 16);
          *(_QWORD *)(v14 + 16) = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v207 = 0;
          v208 = 0;
          v209 = 0;
          sub_2367CBEFC(&v207, *(const void **)(v7 - 24), *(_QWORD *)(v7 - 16), (uint64_t)(*(_QWORD *)(v7 - 16) - *(_QWORD *)(v7 - 24)) >> 2);
          v204 = 0;
          v205 = 0;
          v206 = 0;
          sub_2367CBEFC(&v204, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
          v17 = v207;
          v18 = (float)((float)((float)((float)v207[1] * 0.587) + (float)((float)*v207 * 0.299))
                      + (float)((float)v207[2] * 0.114))
              + 0.1;
          if ((unint64_t)((char *)v208 - (char *)v207) >= 0xD)
            v18 = v18 * (float)((float)v207[3] + 1.0);
          v19 = (float)((float)((float)((float)v204[1] * 0.587) + (float)((float)*v204 * 0.299))
                      + (float)((float)v204[2] * 0.114))
              + 0.1;
          if ((unint64_t)((char *)v205 - (char *)v204) >= 0xD)
            v19 = v19 * (float)((float)v204[3] + 1.0);
          v205 = v204;
          operator delete(v204);
          v208 = v17;
          operator delete(v17);
          if (v18 >= v19)
          {
            v57 = *(const void **)v7;
            v58 = *(_OWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v243 = 0;
            v244 = 0;
            v245 = 0;
            v194 = v58;
            v59 = v58;
            v60 = (uint64_t)(v58 - (_QWORD)v57) >> 2;
            sub_2367CBEFC(&v243, v57, v58, v60);
            v240 = 0;
            v241 = 0;
            v242 = 0;
            sub_2367CBEFC(&v240, *(const void **)(a2 - 24), *(_QWORD *)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24)) >> 2);
            v61 = v243;
            v62 = (float)((float)((float)((float)v61[1] * 0.587) + (float)((float)*v61 * 0.299))
                        + (float)((float)v61[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
              v62 = v62 * (float)((float)v243[3] + 1.0);
            v63 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                        + (float)((float)v240[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
              v63 = v63 * (float)((float)v240[3] + 1.0);
            v241 = v240;
            operator delete(v240);
            v244 = v61;
            operator delete(v61);
            if (v62 >= v63)
            {
              for (v7 += 24; v7 < a2; v7 += 24)
              {
                v237 = 0;
                v238 = 0;
                v239 = 0;
                sub_2367CBEFC(&v237, v57, v59, v60);
                v234 = 0;
                v235 = 0;
                v236 = 0;
                sub_2367CBEFC(&v234, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
                v81 = v237;
                v82 = (float)((float)((float)((float)v81[1] * 0.587) + (float)((float)*v81 * 0.299))
                            + (float)((float)v81[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                  v82 = v82 * (float)((float)v237[3] + 1.0);
                v83 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                            + (float)((float)v234[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                  v83 = v83 * (float)((float)v234[3] + 1.0);
                v235 = v234;
                operator delete(v234);
                v238 = v81;
                operator delete(v81);
                if (v82 < v83)
                  break;
              }
            }
            else
            {
              do
              {
                v237 = 0;
                v238 = 0;
                v239 = 0;
                sub_2367CBEFC(&v237, v57, v59, v60);
                v234 = 0;
                v235 = 0;
                v236 = 0;
                sub_2367CBEFC(&v234, *(const void **)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 2);
                v64 = v237;
                v65 = (float)((float)((float)((float)v64[1] * 0.587) + (float)((float)*v64 * 0.299))
                            + (float)((float)v64[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                  v65 = v65 * (float)((float)v237[3] + 1.0);
                v66 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                            + (float)((float)v234[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                  v66 = v66 * (float)((float)v234[3] + 1.0);
                v7 += 24;
                v235 = v234;
                operator delete(v234);
                v238 = v64;
                operator delete(v64);
              }
              while (v65 >= v66);
            }
            v67 = (_QWORD *)a2;
            if (v7 < a2)
            {
              v67 = (_QWORD *)a2;
              do
              {
                v231 = 0;
                v232 = 0;
                v233 = 0;
                sub_2367CBEFC(&v231, v57, v59, v60);
                v228 = 0;
                v229 = 0;
                v230 = 0;
                sub_2367CBEFC(&v228, (const void *)*(v67 - 3), *(v67 - 2), (uint64_t)(*(v67 - 2) - *(v67 - 3)) >> 2);
                v68 = v231;
                v69 = (float)((float)((float)((float)v231[1] * 0.587) + (float)((float)*v231 * 0.299))
                            + (float)((float)v231[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v232 - (char *)v231) >= 0xD)
                  v69 = v69 * (float)((float)v231[3] + 1.0);
                v70 = (float)((float)((float)((float)v228[1] * 0.587) + (float)((float)*v228 * 0.299))
                            + (float)((float)v228[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v229 - (char *)v228) >= 0xD)
                  v70 = v70 * (float)((float)v228[3] + 1.0);
                v67 -= 3;
                v229 = v228;
                operator delete(v228);
                v232 = v68;
                operator delete(v68);
              }
              while (v69 < v70);
            }
            while (v7 < (unint64_t)v67)
            {
              v71 = *(const void **)v7;
              *(_QWORD *)v7 = *v67;
              *v67 = v71;
              v72 = *(_QWORD *)(v7 + 8);
              *(_QWORD *)(v7 + 8) = v67[1];
              v67[1] = v72;
              v73 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)(v7 + 16) = v67[2];
              v67[2] = v73;
              do
              {
                v225 = 0;
                v226 = 0;
                v227 = 0;
                sub_2367CBEFC(&v225, v57, v59, v60);
                v222 = 0;
                v223 = 0;
                v224 = 0;
                sub_2367CBEFC(&v222, *(const void **)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 2);
                v74 = v225;
                v75 = (float)((float)((float)((float)v225[1] * 0.587) + (float)((float)*v225 * 0.299))
                            + (float)((float)v225[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v226 - (char *)v225) >= 0xD)
                  v75 = v75 * (float)((float)v225[3] + 1.0);
                v76 = (float)((float)((float)((float)v222[1] * 0.587) + (float)((float)*v222 * 0.299))
                            + (float)((float)v222[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v223 - (char *)v222) >= 0xD)
                  v76 = v76 * (float)((float)v222[3] + 1.0);
                v7 += 24;
                v223 = v222;
                operator delete(v222);
                v226 = v74;
                operator delete(v74);
              }
              while (v75 >= v76);
              do
              {
                v219 = 0;
                v220 = 0;
                v221 = 0;
                sub_2367CBEFC(&v219, v57, v59, v60);
                v216 = 0;
                v217 = 0;
                v218 = 0;
                sub_2367CBEFC(&v216, (const void *)*(v67 - 3), *(v67 - 2), (uint64_t)(*(v67 - 2) - *(v67 - 3)) >> 2);
                v77 = v219;
                v78 = (float)((float)((float)((float)v219[1] * 0.587) + (float)((float)*v219 * 0.299))
                            + (float)((float)v219[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v220 - (char *)v219) >= 0xD)
                  v78 = v78 * (float)((float)v219[3] + 1.0);
                v79 = (float)((float)((float)((float)v216[1] * 0.587) + (float)((float)*v216 * 0.299))
                            + (float)((float)v216[2] * 0.114))
                    + 0.1;
                if ((unint64_t)((char *)v217 - (char *)v216) >= 0xD)
                  v79 = v79 * (float)((float)v216[3] + 1.0);
                v67 -= 3;
                v217 = v216;
                operator delete(v216);
                v220 = v77;
                operator delete(v77);
              }
              while (v78 < v79);
            }
            v80 = *v201;
            if ((void **)(v7 - 24) == v201)
            {
              if (!v80)
                goto LABEL_106;
              *(_QWORD *)(v7 - 16) = v80;
              operator delete(v80);
            }
            else
            {
              if (v80)
              {
                v201[1] = v80;
                operator delete(v80);
                *v201 = 0;
                v201[1] = 0;
                v201[2] = 0;
              }
              *(_OWORD *)v201 = *(_OWORD *)(v7 - 24);
              v201[2] = *(void **)(v7 - 8);
            }
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 16) = 0;
            *(_QWORD *)(v7 - 8) = 0;
LABEL_106:
            a4 = 0;
            *(_QWORD *)(v7 - 24) = v57;
            *(_OWORD *)(v7 - 16) = v194;
            continue;
          }
        }
        v20 = *(const void **)v7;
        v21 = *(_OWORD *)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        v22 = v7;
        v193 = v21;
        v23 = v21;
        v24 = (uint64_t)(v21 - (_QWORD)v20) >> 2;
        do
        {
          v243 = 0;
          v244 = 0;
          v245 = 0;
          v25 = *(const void **)(v22 + 24);
          v26 = *(_QWORD *)(v22 + 32);
          v22 += 24;
          sub_2367CBEFC(&v243, v25, v26, (v26 - (uint64_t)v25) >> 2);
          v240 = 0;
          v241 = 0;
          v242 = 0;
          sub_2367CBEFC(&v240, v20, v23, v24);
          v27 = v243;
          v28 = (float)((float)((float)((float)v27[1] * 0.587) + (float)((float)*v27 * 0.299))
                      + (float)((float)v27[2] * 0.114))
              + 0.1;
          if ((unint64_t)((char *)v244 - (char *)v243) >= 0xD)
            v28 = v28 * (float)((float)v243[3] + 1.0);
          v29 = (float)((float)((float)((float)v240[1] * 0.587) + (float)((float)*v240 * 0.299))
                      + (float)((float)v240[2] * 0.114))
              + 0.1;
          if ((unint64_t)((char *)v241 - (char *)v240) >= 0xD)
            v29 = v29 * (float)((float)v240[3] + 1.0);
          v241 = v240;
          operator delete(v240);
          v244 = v27;
          operator delete(v27);
        }
        while (v28 < v29);
        v30 = (_QWORD *)a2;
        if ((void **)(v22 - 24) == v201)
        {
          v30 = (_QWORD *)a2;
          if (v22 < a2)
          {
            v36 = v190;
            do
            {
              v237 = 0;
              v238 = 0;
              v239 = 0;
              sub_2367CBEFC(&v237, *(const void **)v36, *(_QWORD *)(v36 + 8), (uint64_t)(*(_QWORD *)(v36 + 8) - *(_QWORD *)v36) >> 2);
              v234 = 0;
              v235 = 0;
              v236 = 0;
              sub_2367CBEFC(&v234, v20, v23, v24);
              v37 = v237;
              v38 = (float)((float)((float)((float)v37[1] * 0.587) + (float)((float)*v37 * 0.299))
                          + (float)((float)v37[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
                v38 = v38 * (float)((float)v237[3] + 1.0);
              v39 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                          + (float)((float)v234[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
                v39 = v39 * (float)((float)v234[3] + 1.0);
              v235 = v234;
              operator delete(v234);
              v238 = v37;
              operator delete(v37);
              v40 = v36 - 24;
              if (v22 >= v36)
                break;
              v36 -= 24;
            }
            while (v38 >= v39);
            v30 = (_QWORD *)(v40 + 24);
          }
        }
        else
        {
          do
          {
            v237 = 0;
            v238 = 0;
            v239 = 0;
            v31 = (const void *)*(v30 - 3);
            v32 = *(v30 - 2);
            v30 -= 3;
            sub_2367CBEFC(&v237, v31, v32, (v32 - (uint64_t)v31) >> 2);
            v234 = 0;
            v235 = 0;
            v236 = 0;
            sub_2367CBEFC(&v234, v20, v23, v24);
            v33 = v237;
            v34 = (float)((float)((float)((float)v33[1] * 0.587) + (float)((float)*v33 * 0.299))
                        + (float)((float)v33[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v238 - (char *)v237) >= 0xD)
              v34 = v34 * (float)((float)v237[3] + 1.0);
            v35 = (float)((float)((float)((float)v234[1] * 0.587) + (float)((float)*v234 * 0.299))
                        + (float)((float)v234[2] * 0.114))
                + 0.1;
            if ((unint64_t)((char *)v235 - (char *)v234) >= 0xD)
              v35 = v35 * (float)((float)v234[3] + 1.0);
            v235 = v234;
            operator delete(v234);
            v238 = v33;
            operator delete(v33);
          }
          while (v34 >= v35);
        }
        v7 = v22;
        if (v22 < (unint64_t)v30)
        {
          v41 = v30;
          do
          {
            v42 = *(const void **)v7;
            *(_QWORD *)v7 = *v41;
            *v41 = v42;
            v43 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = v41[1];
            v41[1] = v43;
            v44 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 16) = v41[2];
            v41[2] = v44;
            do
            {
              v231 = 0;
              v232 = 0;
              v233 = 0;
              v45 = *(const void **)(v7 + 24);
              v46 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              sub_2367CBEFC(&v231, v45, v46, (v46 - (uint64_t)v45) >> 2);
              v228 = 0;
              v229 = 0;
              v230 = 0;
              sub_2367CBEFC(&v228, v20, v23, v24);
              v47 = v231;
              v48 = (float)((float)((float)((float)v231[1] * 0.587) + (float)((float)*v231 * 0.299))
                          + (float)((float)v231[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v232 - (char *)v231) >= 0xD)
                v48 = v48 * (float)((float)v231[3] + 1.0);
              v49 = (float)((float)((float)((float)v228[1] * 0.587) + (float)((float)*v228 * 0.299))
                          + (float)((float)v228[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v229 - (char *)v228) >= 0xD)
                v49 = v49 * (float)((float)v228[3] + 1.0);
              v229 = v228;
              operator delete(v228);
              v232 = v47;
              operator delete(v47);
            }
            while (v48 < v49);
            do
            {
              v225 = 0;
              v226 = 0;
              v227 = 0;
              v50 = (const void *)*(v41 - 3);
              v51 = *(v41 - 2);
              v41 -= 3;
              sub_2367CBEFC(&v225, v50, v51, (v51 - (uint64_t)v50) >> 2);
              v222 = 0;
              v223 = 0;
              v224 = 0;
              sub_2367CBEFC(&v222, v20, v23, v24);
              v52 = v225;
              v53 = (float)((float)((float)((float)v225[1] * 0.587) + (float)((float)*v225 * 0.299))
                          + (float)((float)v225[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v226 - (char *)v225) >= 0xD)
                v53 = v53 * (float)((float)v225[3] + 1.0);
              v54 = (float)((float)((float)((float)v222[1] * 0.587) + (float)((float)*v222 * 0.299))
                          + (float)((float)v222[2] * 0.114))
                  + 0.1;
              if ((unint64_t)((char *)v223 - (char *)v222) >= 0xD)
                v54 = v54 * (float)((float)v222[3] + 1.0);
              v223 = v222;
              operator delete(v222);
              v226 = v52;
              operator delete(v52);
            }
            while (v53 >= v54);
          }
          while (v7 < (unint64_t)v41);
        }
        a1 = v201;
        v55 = *v201;
        if ((void **)(v7 - 24) == v201)
        {
          a2 = v198;
          if (v55)
          {
            *(_QWORD *)(v7 - 16) = v55;
            operator delete(v55);
            goto LABEL_56;
          }
        }
        else
        {
          if (v55)
          {
            v201[1] = v55;
            operator delete(v55);
            *v201 = 0;
            v201[1] = 0;
            v201[2] = 0;
          }
          *(_OWORD *)v201 = *(_OWORD *)(v7 - 24);
          v201[2] = *(void **)(v7 - 8);
          a2 = v198;
LABEL_56:
          *(_QWORD *)(v7 - 24) = 0;
          *(_QWORD *)(v7 - 16) = 0;
          *(_QWORD *)(v7 - 8) = 0;
        }
        *(_QWORD *)(v7 - 24) = v20;
        *(_OWORD *)(v7 - 16) = v193;
        if (v22 < (unint64_t)v30)
        {
LABEL_60:
          sub_23687B488(v201, v7 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v56 = sub_23687E96C((uint64_t)v201, v7 - 24);
        if (!sub_23687E96C(v7, a2))
        {
          if (v56)
            continue;
          goto LABEL_60;
        }
        a2 = v7 - 24;
        if (!v56)
          goto LABEL_1;
        return;
    }
  }
}

void sub_2367E60C4(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 *v60;
  BOOL v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  __int128 v106;
  __int128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

__int128 *sub_2367E6960(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a3 + 1);
  if (v3 >= *((_QWORD *)result + 1))
  {
    if (v4 < v3)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      if (*((_QWORD *)a2 + 1) < *((_QWORD *)result + 1))
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v13;
        *a2 = v12;
        *((_QWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v16;
      *a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
      if (*((_QWORD *)a3 + 1) >= *((_QWORD *)a2 + 1))
        return result;
      v5 = *((_QWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_QWORD *)a3 + 2) = v5;
  }
  return result;
}

__n128 sub_2367E6A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_2367E6960((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*(_QWORD *)(a3 + 8) < *(_QWORD *)(a2 + 8))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

BOOL sub_2367E6B1C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 2) < *(_QWORD *)(a1 + 8))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 3) = v7;
        *(a2 - 1) = v6;
      }
      return result;
    case 3uLL:
      sub_2367E6960((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 3));
      return 1;
    case 4uLL:
      sub_2367E6A50(a1, a1 + 24, a1 + 48, (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      sub_2367E6A50(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(a2 - 2) < *(_QWORD *)(a1 + 80))
      {
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *v21;
        v24 = *(a2 - 1);
        *v21 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 3) = v23;
        *(a2 - 1) = v22;
        if (*(_QWORD *)(a1 + 80) < *(_QWORD *)(a1 + 56))
        {
          v25 = *(_QWORD *)(a1 + 64);
          v26 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v26;
          *(_QWORD *)(a1 + 88) = v25;
          if (*(_QWORD *)(a1 + 56) < *(_QWORD *)(a1 + 32))
          {
            v27 = *(_QWORD *)(a1 + 40);
            v28 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v28;
            *(_QWORD *)(a1 + 64) = v27;
            if (*(_QWORD *)(a1 + 32) < *(_QWORD *)(a1 + 8))
            {
              v29 = *(_QWORD *)(a1 + 16);
              v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v30;
              *(_QWORD *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (_QWORD *)(a1 + 48);
      sub_2367E6960((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v10 = (_QWORD *)(a1 + 72);
      if ((_QWORD *)(a1 + 72) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 < v9[1])
    {
      v14 = *v10;
      v15 = v10[2];
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *(_QWORD *)(v17 + 32))
        {
          v18 = (_QWORD *)(a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      v18 = (_QWORD *)a1;
LABEL_13:
      *v18 = v14;
      v18[1] = v13;
      v18[2] = v15;
      if (++v12 == 8)
        return v10 + 3 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
}

__int128 *sub_2367E6D90(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a3 + 2);
  if (v3 >= *((_QWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      if (*((_QWORD *)a2 + 2) < *((_QWORD *)result + 2))
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v13;
        *a2 = v12;
        *((_QWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v16;
      *a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
      if (*((_QWORD *)a3 + 2) >= *((_QWORD *)a2 + 2))
        return result;
      v5 = *((_QWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_QWORD *)a3 + 2) = v5;
  }
  return result;
}

__n128 sub_2367E6E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_2367E6D90((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*(_QWORD *)(a3 + 16) < *(_QWORD *)(a2 + 16))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_QWORD *)(a2 + 16) < *(_QWORD *)(a1 + 16))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

BOOL sub_2367E6F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 16))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_2367E6D90((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_2367E6E80(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v17 = (__int128 *)(a1 + 24);
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a1 + 72);
      sub_2367E6E80(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 88))
      {
        v20 = *(_QWORD *)(a1 + 88);
        v21 = *v19;
        v22 = *(_QWORD *)(a2 - 8);
        *v19 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v22;
        *(_OWORD *)(a2 - 24) = v21;
        *(_QWORD *)(a2 - 8) = v20;
        if (*(_QWORD *)(a1 + 88) < *(_QWORD *)(a1 + 64))
        {
          v23 = *(_QWORD *)(a1 + 64);
          v24 = *v18;
          *v18 = *v19;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v19 = v24;
          *(_QWORD *)(a1 + 88) = v23;
          if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 40))
          {
            v25 = *(_QWORD *)(a1 + 40);
            v26 = *v17;
            *v17 = *v18;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v18 = v26;
            *(_QWORD *)(a1 + 64) = v25;
            if (*(_QWORD *)(a1 + 40) < *(_QWORD *)(a1 + 16))
            {
              v27 = *(_QWORD *)(a1 + 16);
              v28 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v17 = v28;
              *(_QWORD *)(a1 + 40) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 48;
      sub_2367E6D90((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v10 + 16);
    if (v13 < *(_QWORD *)(v9 + 16))
    {
      v29 = *(_OWORD *)v10;
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_QWORD *)(v15 + 88) = *(_QWORD *)(a1 + v14 + 64);
        if (v14 == -48)
          break;
        v14 -= 24;
        if (v13 >= *(_QWORD *)(v15 + 40))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(_OWORD *)v16 = v29;
      *(_QWORD *)(v16 + 16) = v13;
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

uint64_t sub_2367E71C4(uint64_t result, _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  _QWORD *v48;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = a2[13];
  if (a3 < (a2[14] - v3) >> 3)
  {
    v5 = a2;
    v6 = *(_QWORD *)(v3 + 8 * a3);
    if (v6)
    {
      v7 = result;
      sub_2367E74C8((void **)result, v6);
      v8 = 0;
      while (1)
      {
        v9 = v5[10];
        v10 = (_QWORD *)(v9 + 40 * v8);
        v11 = v10[2];
        v13 = v10 + 4;
        v12 = v10[4];
        if (v11 >= a3)
        {
          if (v12)
          {
            v46 = v10 + 2;
            v48 = (_QWORD *)(v9 + 40 * v8);
            v30 = 0;
            do
            {
              v31 = v48[3] + v30;
              v32 = v5[16];
              if (*(_QWORD *)(v32 + 16 * v31) > a3)
                break;
              v33 = (_QWORD *)(v32 + 16 * v31 + 8);
              v35 = *(_QWORD **)(v7 + 8);
              v34 = *(_QWORD *)(v7 + 16);
              if ((unint64_t)v35 >= v34)
              {
                v37 = *(_QWORD **)v7;
                v38 = ((uint64_t)v35 - *(_QWORD *)v7) >> 3;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61)
                  sub_2367C3440();
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 2 > v39)
                  v39 = v40 >> 2;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                  v41 = (unint64_t)sub_2367CA1FC(v41);
                else
                  v42 = 0;
                v43 = (_QWORD *)(v41 + 8 * v38);
                *v43 = *v33;
                v36 = v43 + 1;
                while (v35 != v37)
                {
                  v44 = *--v35;
                  *--v43 = v44;
                }
                *(_QWORD *)v7 = v43;
                *(_QWORD *)(v7 + 8) = v36;
                *(_QWORD *)(v7 + 16) = v41 + 8 * v42;
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *v35 = *v33;
                v36 = v35 + 1;
              }
              *(_QWORD *)(v7 + 8) = v36;
              ++v30;
            }
            while (v30 < *v13);
            v10 = v48;
            v11 = *v46;
          }
          if (v11 <= a3)
            return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        }
        else
        {
          v45 = v5[10];
          v47 = v8;
          if (v12)
          {
            v14 = 0;
            do
            {
              v15 = *(_QWORD *)(v45 + 40 * v47 + 24) + v14;
              v16 = v5[19];
              if (*(_QWORD *)(v16 + 16 * v15) <= a3)
                break;
              v17 = (_QWORD *)(v16 + 16 * v15 + 8);
              v19 = *(_QWORD **)(v7 + 8);
              v18 = *(_QWORD *)(v7 + 16);
              if ((unint64_t)v19 >= v18)
              {
                v21 = v5;
                v22 = *(_QWORD **)v7;
                v23 = ((uint64_t)v19 - *(_QWORD *)v7) >> 3;
                v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 61)
                  sub_2367C3440();
                v25 = v18 - (_QWORD)v22;
                if (v25 >> 2 > v24)
                  v24 = v25 >> 2;
                v26 = (char *)((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v24);
                if (v26)
                  v26 = (char *)sub_2367CA1FC((unint64_t)v26);
                else
                  v27 = 0;
                v28 = &v26[8 * v23];
                *(_QWORD *)v28 = *v17;
                v20 = v28 + 8;
                v5 = v21;
                while (v19 != v22)
                {
                  v29 = *--v19;
                  *((_QWORD *)v28 - 1) = v29;
                  v28 -= 8;
                }
                *(_QWORD *)v7 = v28;
                *(_QWORD *)(v7 + 8) = v20;
                *(_QWORD *)(v7 + 16) = &v26[8 * v27];
                if (v22)
                  operator delete(v22);
              }
              else
              {
                *v19 = *v17;
                v20 = v19 + 1;
              }
              *(_QWORD *)(v7 + 8) = v20;
              ++v14;
            }
            while (v14 < *v13);
          }
          v10 = (_QWORD *)(v45 + 40 * v47 + 8);
        }
        v8 = *v10;
        if (*v10 == -1)
          return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      }
    }
  }
  return result;
}

void sub_2367E7494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2367E74C8(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_2367C3440();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_2367CA1FC(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *sub_2367E755C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_2367C3440();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_2367E75D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_2367E75EC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  _QWORD *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  const float *v25;
  float32x4_t v26;
  float32x4_t v27;
  const float *v28;
  float32x4_t v29;
  const float *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t result;
  float32x4_t v38;
  float32x4_t v39;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)v2;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v4 = 0;
    v5 = *v3;
    v6 = *(_QWORD **)(v2 + 8);
    v7 = v6[2] * (v3[1] + a2);
    v8 = (float32x4_t *)(v6[3] + v7 + 4 * *v3);
    v9 = (float32x4_t *)(v6[8] + v7 + 4 * v5);
    v10 = (float32x4_t *)(v6[13] + v7 + 4 * v5);
    v11 = **(_QWORD ***)(v2 + 16);
    v12 = v11[2] * a2;
    v13 = (float32x4_t *)(v11[3] + v12);
    v14 = (float32x4_t *)(v11[8] + v12);
    v15 = (float32x4_t *)(v11[13] + v12);
    do
    {
      v16 = *v8++;
      v17 = v16;
      v18 = *v9++;
      v19 = v18;
      v20 = *v10++;
      v21 = *(_QWORD *)(v2 + 24);
      v22 = *(int32x4_t *)(v21 + 144);
      v23 = vaddq_f32(v17, v19);
      v24 = vsubq_f32(v19, v17);
      v25 = (const float *)(v21 + 160);
      v26 = vld1q_dup_f32(v25);
      v27 = vsubq_f32(v23, v26);
      v28 = (const float *)(v21 + 164);
      v29 = vld1q_dup_f32(v28);
      v30 = (const float *)(v21 + 168);
      v31 = vsubq_f32(v24, v29);
      v32 = vld1q_dup_f32(v30);
      v33 = vsubq_f32(v20, v32);
      v34 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0), v27, vmulq_f32(v27, v27));
      v35 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1), v31, vmulq_f32(v31, v31));
      v36 = vmlaq_f32((float32x4_t)vdupq_laneq_s32(v22, 2), v33, vmulq_f32(v33, v33));
      result = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)v21, v34), v35, *(float32x4_t *)(v21 + 16)), v36, *(float32x4_t *)(v21 + 32));
      v38 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v21 + 48), v34), v35, *(float32x4_t *)(v21 + 64)), v36, *(float32x4_t *)(v21 + 80));
      v39 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v21 + 96), v34), v35, *(float32x4_t *)(v21 + 112)), v36, *(float32x4_t *)(v21 + 128));
      *v13++ = result;
      *v14++ = v38;
      *v15++ = v39;
      v4 += 4;
    }
    while (v4 < *(_QWORD *)(*(_QWORD *)v2 + 16));
  }
  return result;
}

void sub_2367E7714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  _QWORD v6[4];
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v6[3] = a4;
  v7 = a3;
  v4 = *(_DWORD *)(a2 + 24);
  v6[0] = a2;
  v6[1] = a1;
  v6[2] = &v7;
  v8[0] = 0;
  v8[1] = v8;
  if (v4)
  {
    v5 = 0;
    v9[0] = sub_2367CAAA0;
    v9[1] = v6;
    do
      sub_2367E75EC((uint64_t)v9, v5++);
    while (v4 != v5);
  }
}

void sub_2367E7780(uint64_t a1)
{
  uint64_t i;
  const float *v3;
  float32x4_t v4;
  uint64_t v5;

  for (i = 0; i != 9; ++i)
  {
    v3 = (const float *)&dword_2369206F4[i];
    v4 = vld1q_dup_f32(v3);
    *(float32x4_t *)(a1 + 16 * i) = v4;
  }
  v5 = 0;
  *(_OWORD *)(a1 + 144) = xmmword_236925EE0;
  *(_OWORD *)(a1 + 176) = xmmword_236920658;
  do
  {
    *(float *)(a1 + v5 + 160) = cbrtf(*(float *)(a1 + v5 + 144));
    v5 += 4;
  }
  while (v5 != 16);
}

BOOL sub_2367E7808(uint64_t a1)
{
  unsigned int v1;
  BOOL v3;
  int v4;

  if (!*(_BYTE *)(a1 + 28))
    return 0;
  v1 = *(_DWORD *)(a1 + 72);
  if (!*(_BYTE *)(a1 + 64) && v1 != 16)
  {
    v3 = v1 > 0x12;
    v4 = (1 << v1) & 0x62102;
    if (v3 || v4 == 0)
      return 0;
  }
  return *(_DWORD *)(a1 + 56) != 1 || *(_DWORD *)(a1 + 16) == 1;
}

uint64_t sub_2367E7864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char *v14;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 69);
  *(_QWORD *)(a1 + 16) = v4;
  if (a2 + 48 != a1)
    sub_2367C9C54((_QWORD *)(a1 + 32), *(char **)(a2 + 80), *(char **)(a2 + 88), *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80));
  v5 = 0;
  v6 = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 240);
  LODWORD(v6) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 200) = v6;
  *(_DWORD *)(a1 + 864) = v6;
  v9 = *(_OWORD *)(a2 + 484);
  v10 = *(_OWORD *)(a2 + 500);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 516);
  *(_OWORD *)(a1 + 220) = v10;
  *(_OWORD *)(a1 + 204) = v9;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 480);
  v11 = *(unsigned __int8 *)(a2 + 41);
  *(_BYTE *)(a1 + 241) = v11;
  v12 = *(_QWORD *)(a2 + 520);
  *(_DWORD *)(a1 + 804) = *(_DWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 796) = v12;
  do
  {
    *(float *)(a1 + v5 + 812) = cbrtf(*(float *)(a1 + v5 + 796));
    v5 += 4;
  }
  while (v5 != 12);
  *(_DWORD *)(a1 + 808) = 1065353216;
  *(_DWORD *)(a1 + 824) = 1065353216;
  *(_OWORD *)(a1 + 828) = *(_OWORD *)(a2 + 532);
  v13 = sub_2367E7808(a1);
  v14 = (char *)a1;
  if (v11)
  {
    v14 = (char *)a1;
    if (!v13)
      v14 = sub_2367CA62C(*(_DWORD *)(a1 + 56) == 1);
  }
  return sub_2367E79CC(a1, (uint64_t)v14);
}

uint64_t sub_2367E79CC(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int32x4_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  float v21;
  BOOL v22;
  uint64_t result;
  float v24;
  char *v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  int64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  double v42;
  float v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  int64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  double v60;
  float v61;
  float v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  __int128 v66;
  __int128 v67;
  float64x2_t v68;
  float64x2_t v69;
  _BYTE v70[36];
  float v71[9];
  int v72[9];
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  _BYTE v82[32];
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v4 = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 256) = v4;
  v5 = (_QWORD *)(a1 + 264);
  v7 = (int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 269) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 264) = v6;
  if (a1 + 248 != a2)
  {
    sub_2367C9C54((_QWORD *)(a1 + 280), *(char **)(a2 + 32), *(char **)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
    v4 = *(_WORD *)(a1 + 256);
  }
  v8 = (_DWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 72);
  v11 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 320) = v10;
  *(_OWORD *)(a1 + 336) = v11;
  *(_OWORD *)(a1 + 304) = v9;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 192);
  *(_WORD *)(a1 + 456) = v4;
  *(_QWORD *)(a1 + 464) = *v5;
  *(_QWORD *)(a1 + 469) = *(_QWORD *)((char *)v5 + 5);
  sub_2367C9C54((_QWORD *)(a1 + 480), *(char **)(a1 + 280), *(char **)(a1 + 288), *(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280));
  v12 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 520) = v12;
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a1 + 336);
  *(_DWORD *)(a1 + 552) = *(_DWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 368);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a1 + 440);
  *(_BYTE *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 8;
  *(_BYTE *)(a1 + 648) = sub_2367E7FC8(a1 + 16, (uint64_t)v7);
  v14 = *(unsigned __int8 *)(a1 + 240);
  v15 = *(_OWORD *)(a1 + 204);
  v16 = *(_OWORD *)(a1 + 220);
  v73 = v15;
  v74 = v16;
  v75 = *(_DWORD *)(a1 + 236);
  v17 = (uint64_t *)(a1 + 852);
  *(_QWORD *)(a1 + 852) = 0x3F3717593E59B3D0;
  *(_DWORD *)(a1 + 860) = 1033100696;
  if (*(_DWORD *)(a2 + 20) == 1 && *(_DWORD *)(a2 + 16) == 1)
    goto LABEL_5;
  if (*v8 != 1)
  {
    v25 = sub_2367CA534(0);
    v26 = *((_DWORD *)v25 + 5);
    if (v26 > 8)
    {
      if (v26 == 9)
      {
        v68 = (float64x2_t)xmmword_2368AF520;
        v66 = xmmword_2368AF530;
        v27 = xmmword_2368AF540;
      }
      else
      {
        v68 = (float64x2_t)xmmword_2368AF4F0;
        v66 = xmmword_2368AF500;
        v27 = xmmword_2368AF510;
      }
    }
    else
    {
      if (v26 != 1)
      {
        v28 = *(_QWORD *)(v25 + 84);
        v29.i64[0] = (int)v28;
        v29.i64[1] = SHIDWORD(v28);
        v30 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
        v31 = vmulq_f64(vcvtq_f64_s64(v29), v30);
        v32 = *(_QWORD *)(v25 + 92);
        v29.i64[0] = (int)v32;
        v29.i64[1] = SHIDWORD(v32);
        v64 = vmulq_f64(vcvtq_f64_s64(v29), v30);
        v66 = (__int128)v31;
        v33 = *(_QWORD *)(v25 + 100);
        v29.i64[0] = (int)v33;
        v29.i64[1] = SHIDWORD(v33);
        v68 = vmulq_f64(vcvtq_f64_s64(v29), v30);
LABEL_30:
        v34 = sub_2367CA244((int *)v25 + 4);
        v35 = *(double *)&v66;
        v36 = *((double *)&v66 + 1);
        v37 = v64.f64[0];
        v38 = v64.f64[1];
        v39 = v68.f64[0];
        v40 = v68.f64[1];
        v41 = v34;
        v43 = v42;
        if (!sub_2367E802C((uint64_t)v82, v35, v36, v37, v38, v39, v40, v41, v43)
          && !sub_2367E81E4((uint64_t)&v76, v41, v43))
        {
          sub_2367C9278((uint64_t)&v76, (int *)v82, (uint64_t)v72);
        }
        v44 = *(_DWORD *)(a2 + 20);
        if (v44 > 8)
        {
          if (v44 == 9)
          {
            v69 = (float64x2_t)xmmword_2368AF520;
            v67 = xmmword_2368AF530;
            v45 = xmmword_2368AF540;
          }
          else
          {
            v69 = (float64x2_t)xmmword_2368AF4F0;
            v67 = xmmword_2368AF500;
            v45 = xmmword_2368AF510;
          }
        }
        else
        {
          if (v44 != 1)
          {
            v46 = *(_QWORD *)(a2 + 84);
            v47.i64[0] = (int)v46;
            v47.i64[1] = SHIDWORD(v46);
            v48 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
            v49 = vmulq_f64(vcvtq_f64_s64(v47), v48);
            v50 = *(_QWORD *)(a2 + 92);
            v47.i64[0] = (int)v50;
            v47.i64[1] = SHIDWORD(v50);
            v65 = vmulq_f64(vcvtq_f64_s64(v47), v48);
            v67 = (__int128)v49;
            v51 = *(_QWORD *)(a2 + 100);
            v47.i64[0] = (int)v51;
            v47.i64[1] = SHIDWORD(v51);
            v69 = vmulq_f64(vcvtq_f64_s64(v47), v48);
            goto LABEL_41;
          }
          v69 = (float64x2_t)xmmword_2368AF4C0;
          v67 = xmmword_2368AF4D0;
          v45 = xmmword_2368AF4E0;
        }
        v65 = (float64x2_t)v45;
LABEL_41:
        v52 = sub_2367CA244(v7);
        v53 = *(double *)&v67;
        v54 = *((double *)&v67 + 1);
        v55 = v65.f64[0];
        v56 = v65.f64[1];
        v57 = v69.f64[0];
        v58 = v69.f64[1];
        v59 = v52;
        v61 = v60;
        if (sub_2367E802C((uint64_t)v82, v53, v54, v55, v56, v57, v58, v59, v61))
          return 1;
        *v17 = *(_QWORD *)&v82[12];
        *(_DWORD *)(a1 + 860) = *(_DWORD *)&v82[20];
        if (!*(_BYTE *)(a1 + 241))
          goto LABEL_5;
        v62 = sub_2367CA244(v7);
        *(float *)&v63 = v63;
        if (sub_2367E81E4((uint64_t)&v76, v62, *(float *)&v63))
          return 1;
        sub_2367C9278((uint64_t)&v76, (int *)v82, (uint64_t)v71);
        if (sub_2367CA0CC(v71))
          return 1;
        sub_2367C9278((uint64_t)v71, v72, (uint64_t)v70);
        sub_2367C9278((uint64_t)v70, (int *)(a1 + 204), (uint64_t)&v73);
        v14 = 0;
LABEL_5:
        v18 = v14 != 0;
        if (*v8 != 1)
          goto LABEL_10;
        goto LABEL_9;
      }
      v68 = (float64x2_t)xmmword_2368AF4C0;
      v66 = xmmword_2368AF4D0;
      v27 = xmmword_2368AF4E0;
    }
    v64 = (float64x2_t)v27;
    goto LABEL_30;
  }
  v18 = v14 != 0;
LABEL_9:
  *(_OWORD *)v82 = v73;
  *(_OWORD *)&v82[16] = v74;
  v83 = v75;
  v76 = *v17;
  v19 = *(_DWORD *)(a1 + 860);
  v78 = v76;
  v77 = v19;
  v79 = v19;
  v80 = v76;
  v81 = v19;
  sub_2367C9278((uint64_t)&v76, (int *)v82, (uint64_t)&v73);
LABEL_10:
  if (*(_BYTE *)(a1 + 241))
  {
    v20 = 0;
    v21 = *(float *)(a1 + 200);
    do
    {
      *(float *)v13.i32 = (float)(255.0 / v21) * *((float *)&v73 + v20);
      v13 = vdupq_lane_s32(*(int32x2_t *)v13.i8, 0);
      *(int32x4_t *)(a1 + 652 + 16 * v20++) = v13;
    }
    while (v20 != 9);
    *(double *)&v15 = fabs(v21 + -255.0);
    v22 = *(double *)&v15 <= 0.100000001 && v18;
    *(_BYTE *)(a1 + 844) = v22;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    LODWORD(v15) = *(_DWORD *)(a2 + 68);
    *(double *)&v15 = (double)(unint64_t)v15 * 0.0000001;
  }
  else
  {
    *(_QWORD *)&v15 = 0x3FD89D89E0000000;
    if (*(_DWORD *)(a2 + 72) != 17)
      *(double *)&v15 = 1.0;
  }
  result = 0;
  v24 = *(double *)&v15;
  *(float *)(a1 + 848) = v24;
  return result;
}

BOOL sub_2367E7FC8(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  int v6;

  result = sub_2367E8410((_DWORD *)a1, (_DWORD *)a2);
  if (result)
  {
    result = 0;
    if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
    {
      if (*(_BYTE *)(a1 + 48))
      {
        v5 = *(_DWORD *)(a1 + 52);
        v6 = *(_DWORD *)(a2 + 52);
      }
      else
      {
        v5 = *(_DWORD *)(a1 + 56);
        v6 = *(_DWORD *)(a2 + 56);
      }
      if (v5 == v6)
        return 1;
    }
  }
  return result;
}

uint64_t sub_2367E802C(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t result;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  double v18;
  float v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  _DWORD v27[3];
  float v28[3];
  _OWORD v29[2];
  float v30;
  __int128 v31;
  __int128 v32;
  float v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  result = 1;
  if (a9 <= 1.0 && a8 >= 0.0 && a8 <= 1.0 && a9 > 0.0)
  {
    *(_QWORD *)&v31 = __PAIR64__(LODWORD(a4), LODWORD(a2));
    *((_QWORD *)&v31 + 1) = __PAIR64__(LODWORD(a3), LODWORD(a6));
    *(_QWORD *)&v32 = __PAIR64__(LODWORD(a7), LODWORD(a5));
    *((float *)&v32 + 2) = (float)(1.0 - a2) - a3;
    *((float *)&v32 + 3) = (float)(1.0 - a4) - a5;
    v33 = (float)(1.0 - a6) - a7;
    v29[0] = v31;
    v29[1] = v32;
    v30 = v33;
    result = sub_2367CA0CC((float *)v29);
    if (!(_DWORD)result)
    {
      v28[0] = a8 / a9;
      v28[1] = 1.0;
      v28[2] = (float)((float)(1.0 - a8) - a9) / a9;
      if (COERCE_INT(fabs(a8 / a9)) > 2139095039)
      {
        return 1;
      }
      else
      {
        v14 = fabs((float)((float)(1.0 - a8) - a9) / a9);
        result = v14 > 2139095039;
        if (v14 <= 2139095039)
        {
          v15 = 0;
          v16 = v29;
          do
          {
            v17 = 0;
            v18 = 0.0;
            do
            {
              v18 = v18 + (float)(*(float *)((char *)v16 + v17 * 4) * v28[v17]);
              ++v17;
            }
            while (v17 != 3);
            v19 = v18;
            *(float *)&v27[v15++] = v19;
            v16 = (_OWORD *)((char *)v16 + 12);
          }
          while (v15 != 3);
          v20 = v27[0];
          v21 = 0;
          v22 = 0;
          v23 = v27[1];
          v24 = 0;
          v25 = 0;
          v26 = v27[2];
          sub_2367C9278((uint64_t)&v31, &v20, a1);
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_2367E81E4(uint64_t a1, float a2, float a3)
{
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  float v17;
  int v18[9];
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  result = 1;
  if (a3 <= 1.0 && a2 >= 0.0 && a2 <= 1.0 && a3 > 0.0)
  {
    v32[0] = a2 / a3;
    v6 = a2 / a3;
    v32[1] = 1.0;
    v7 = (float)((float)(1.0 - a2) - a3) / a3;
    v32[2] = v7;
    if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      result = (LODWORD(v7) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      if ((LODWORD(v7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v8 = 0;
        v9 = (char *)dword_23691FE50;
        do
        {
          v10 = 0;
          v11 = 0.0;
          do
          {
            v11 = v11 + (float)(*(float *)&v9[v10 * 4] * v32[v10]);
            ++v10;
          }
          while (v10 != 3);
          v12 = v11;
          *(&v29 + v8++) = v12;
          v9 += 12;
        }
        while (v8 != 3);
        v13 = 0;
        v14 = (char *)dword_23691FE50;
        do
        {
          v15 = 0;
          v16 = 0.0;
          do
          {
            v16 = v16 + (float)(*(float *)&v14[v15 * 4] * *(float *)&dword_236925E80[v15]);
            ++v15;
          }
          while (v15 != 3);
          v17 = v16;
          *(&v26 + v13++) = v17;
          v14 += 12;
        }
        while (v13 != 3);
        result = 1;
        if (v29 != 0.0 && v30 != 0.0 && v31 != 0.0)
        {
          v19 = v26 / v29;
          v20 = 0;
          v21 = 0;
          v22 = v27 / v30;
          v23 = 0;
          v24 = 0;
          v25 = v28 / v31;
          if (COERCE_INT(fabs(v26 / v29)) <= 2139095039
            && COERCE_UNSIGNED_INT(fabs(v27 / v30)) <= 0x7F7FFFFF
            && COERCE_UNSIGNED_INT(fabs(v28 / v31)) <= 0x7F7FFFFF)
          {
            sub_2367C9278((uint64_t)&v19, dword_23691FE50, (uint64_t)v18);
            sub_2367C9278((uint64_t)&unk_23691FE74, v18, a1);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2367E8410(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _BOOL8 result;

  v2 = a1[10];
  result = 0;
  if (v2 == a2[10] && *a1 == *a2 && (*a1 != 2 || a1[15] == a2[15] && a1[16] == a2[16]))
  {
    if ((v2 - 3) > 0xFFFFFFFD)
      return 1;
    v3 = a1[1];
    if (v3 == a2[1]
      && (v3 != 2
       || a1[17] == a2[17]
       && a1[18] == a2[18]
       && a1[19] == a2[19]
       && a1[20] == a2[20]
       && a1[21] == a2[21]
       && a1[22] == a2[22]))
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_2367E84EC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 56) != 2
     || (*(_DWORD *)(a1 + 304) || *(_DWORD *)(a1 + 268) == 1) && (*(_BYTE *)(a1 + 312) || *(_DWORD *)(a1 + 320) != 16))
    && (*(_BYTE *)(a1 + 241) || sub_2367E7808(a2)))
  {
    return sub_2367E79CC(a1, a2);
  }
  else
  {
    return 1;
  }
}

uint64_t JxlDecoderVersion()
{
  return 10002;
}

uint64_t JxlSignatureCheck(unsigned __int8 *a1, unint64_t a2)
{
  if (!a2)
    return 0;
  if (*a1)
  {
    if (*a1 == 255)
    {
      if (a2 >= 2)
      {
        if (a1[1] == 10)
          return 2;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (a2 < 0xC)
      return 0;
    if (!a1[1]
      && !a1[2]
      && a1[3] == 12
      && a1[4] == 74
      && a1[5] == 88
      && a1[6] == 76
      && a1[7] == 32
      && a1[8] == 13
      && a1[9] == 10
      && a1[10] == 135
      && a1[11] == 10)
    {
      return 3;
    }
  }
  return 1;
}

double JxlDecoderRewind_0(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t (**v20)();
  char v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t (**v25)();
  __int16 v26;
  _QWORD v27[2];
  void *__p[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD v39[4];
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  char v50;
  uint64_t (**v51)();
  __int128 v52;
  uint64_t v53;
  _WORD v54[12];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  _BYTE v60[1124];
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
  sub_2367E8BBC((size_t *)(a1 + 840), 0);
  *(_QWORD *)(a1 + 840) = 0;
  *(_WORD *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 3552) = 0;
  *(_WORD *)(a1 + 963) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 946) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a1 + 1012);
  *(_QWORD *)(a1 + 1016) = 98;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = 8;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_QWORD *)(a1 + 1176) = *(_QWORD *)(a1 + 1168);
  *(_OWORD *)(a1 + 3592) = 0u;
  *(_BYTE *)(a1 + 3608) = 0;
  sub_2367E8C9C((uint64_t *)(a1 + 3304), 0);
  sub_2367E8CD8((uint64_t *)(a1 + 3312), 0);
  *(_QWORD *)(a1 + 3320) = 0;
  *(_QWORD *)(a1 + 3336) = *(_QWORD *)(a1 + 3328);
  v2 = *(uint64_t **)(a1 + 3296);
  *(_QWORD *)(a1 + 3296) = 0;
  if (v2)
    sub_2367E8D14(v2);
  bzero(&v20, 0x690uLL);
  sub_2367F7A14((uint64_t)&v20);
  v51 = &off_2507FF488;
  v61 = &off_2507FF550;
  v62 = xmmword_2368AF3F0;
  v63 = 0;
  sub_2367F42A0((uint64_t)&v51, (uint64_t)&v61);
  sub_2367F7984((uint64_t)v54);
  *(_BYTE *)(a1 + 1200) = v21;
  *(_QWORD *)(a1 + 1216) = v22;
  *(_DWORD *)(a1 + 1224) = v23;
  *(_WORD *)(a1 + 1232) = v24;
  *(_WORD *)(a1 + 1248) = v26;
  *(_QWORD *)(a1 + 1256) = v27[0];
  *(_QWORD *)(a1 + 1261) = *(_QWORD *)((char *)v27 + 5);
  v3 = (_QWORD *)(a1 + 1272);
  v4 = *(void **)(a1 + 1272);
  if (v4)
  {
    *(_QWORD *)(a1 + 1280) = v4;
    operator delete(v4);
    *v3 = 0;
    *(_QWORD *)(a1 + 1280) = 0;
    *(_QWORD *)(a1 + 1288) = 0;
  }
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 1288) = v29;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  *(_OWORD *)(a1 + 1296) = v30;
  *(_OWORD *)(a1 + 1312) = v31;
  *(_OWORD *)(a1 + 1328) = v32;
  *(_DWORD *)(a1 + 1344) = v33;
  v5 = v36;
  *(_QWORD *)(a1 + 1360) = v34;
  *(_OWORD *)(a1 + 1376) = v35;
  *(_QWORD *)(a1 + 1400) = v5;
  v6 = v38;
  *(_QWORD *)(a1 + 1416) = v37;
  *(_QWORD *)(a1 + 1432) = v6;
  v7 = v39[0];
  *(_DWORD *)(a1 + 1443) = *(_DWORD *)((char *)v39 + 3);
  *(_DWORD *)(a1 + 1440) = v7;
  v8 = v40;
  *(_QWORD *)(a1 + 1472) = v41;
  *(_OWORD *)(a1 + 1456) = v8;
  v9 = v42;
  *(_DWORD *)(a1 + 1504) = v43;
  *(_DWORD *)(a1 + 1512) = v44;
  *(_OWORD *)(a1 + 1488) = v9;
  sub_2367E8E44((void **)(a1 + 1520));
  *(_OWORD *)(a1 + 1520) = v45;
  v10 = v48;
  *(_QWORD *)(a1 + 1536) = v46;
  v46 = 0;
  v45 = 0uLL;
  *(_OWORD *)(a1 + 1552) = v47;
  *(_QWORD *)(a1 + 1568) = v10;
  v11 = v49[2];
  *(_QWORD *)(a1 + 1584) = v49[0];
  *(_QWORD *)(a1 + 1589) = *(_QWORD *)((char *)v49 + 5);
  *(_BYTE *)(a1 + 1608) = v50;
  *(_QWORD *)(a1 + 1600) = v11;
  *(_OWORD *)(a1 + 1624) = v52;
  *(_QWORD *)(a1 + 1640) = v53;
  *(_WORD *)(a1 + 1656) = v54[4];
  v12 = v58;
  *(_OWORD *)(a1 + 1704) = v57;
  *(_OWORD *)(a1 + 1720) = v12;
  *(_DWORD *)(a1 + 1736) = v59;
  v13 = v56;
  *(_OWORD *)(a1 + 1672) = v55;
  *(_OWORD *)(a1 + 1688) = v13;
  memcpy((void *)(a1 + 1744), v60, 0x464uLL);
  v20 = &off_2507FFA40;
  v61 = (uint64_t (**)())&v45;
  sub_2367E8DB8((void ***)&v61);
  v25 = &off_2507FFA18;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 2880) = *(_BYTE *)(a1 + 1200);
  *(_QWORD *)(a1 + 2896) = *(_QWORD *)(a1 + 1216);
  *(_DWORD *)(a1 + 2904) = *(_DWORD *)(a1 + 1224);
  *(_WORD *)(a1 + 2912) = *(_WORD *)(a1 + 1232);
  *(_WORD *)(a1 + 2928) = *(_WORD *)(a1 + 1248);
  *(_QWORD *)(a1 + 2936) = *(_QWORD *)(a1 + 1256);
  *(_QWORD *)(a1 + 2941) = *(_QWORD *)(a1 + 1261);
  sub_2367C9C54((_QWORD *)(a1 + 2952), *(char **)(a1 + 1272), *(char **)(a1 + 1280), *(_QWORD *)(a1 + 1280) - *(_QWORD *)(a1 + 1272));
  v14 = *(_OWORD *)(a1 + 1312);
  *(_OWORD *)(a1 + 2976) = *(_OWORD *)(a1 + 1296);
  *(_OWORD *)(a1 + 2992) = v14;
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a1 + 1328);
  *(_DWORD *)(a1 + 3024) = *(_DWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 3040) = *(_QWORD *)(a1 + 1360);
  *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 3080) = *(_QWORD *)(a1 + 1400);
  *(_QWORD *)(a1 + 3096) = *(_QWORD *)(a1 + 1416);
  *(_QWORD *)(a1 + 3112) = *(_QWORD *)(a1 + 1432);
  *(_DWORD *)(a1 + 3120) = *(_DWORD *)(a1 + 1440);
  *(_DWORD *)(a1 + 3123) = *(_DWORD *)(a1 + 1443);
  *(_OWORD *)(a1 + 3136) = *(_OWORD *)(a1 + 1456);
  *(_QWORD *)(a1 + 3152) = *(_QWORD *)(a1 + 1472);
  *(_OWORD *)(a1 + 3168) = *(_OWORD *)(a1 + 1488);
  v15 = *(_QWORD *)(a1 + 1520);
  v16 = *(_QWORD *)(a1 + 1528);
  *(_DWORD *)(a1 + 3184) = *(_DWORD *)(a1 + 1504);
  *(_DWORD *)(a1 + 3192) = *(_DWORD *)(a1 + 1512);
  sub_2367E8EB8(a1 + 3200, v15, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 5));
  *(_OWORD *)(a1 + 3232) = *(_OWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 3248) = *(_QWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 3264) = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 3269) = *(_QWORD *)(a1 + 1589);
  *(_QWORD *)(a1 + 3280) = *(_QWORD *)(a1 + 1600);
  *(_BYTE *)(a1 + 3288) = *(_BYTE *)(a1 + 1608);
  v17 = operator new();
  sub_2367F40C8(v17, a1 + 1192);
  v18 = *(_QWORD *)(a1 + 3352);
  *(_QWORD *)(a1 + 3352) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *(_QWORD *)(a1 + 3512) = *(_QWORD *)(a1 + 3504);
  *(_DWORD *)(a1 + 3368) = 0;
  *(_QWORD *)(a1 + 3360) = 0;
  *(_WORD *)(a1 + 3373) = 0;
  *(_QWORD *)(a1 + 3376) = 0;
  *(_BYTE *)(a1 + 3384) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_QWORD *)(a1 + 3528) = 0;
  *(_QWORD *)(a1 + 3544) = 0;
  *(_QWORD *)(a1 + 3536) = 0;
  return result;
}

void sub_2367E8B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;

  MEMORY[0x23B7F8F48](v24, 0x10F3C403E7815E9);
  _Unwind_Resume(a1);
}

void sub_2367E8BBC(size_t *a1, unint64_t a2)
{
  size_t v2;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (3 * v2) >> 1;
    if (v4 <= a2)
      v4 = a2;
    if (v4 <= 0x40)
      v5 = 64;
    else
      v5 = v4;
    do
      v6 = __ldxr((unsigned int *)&unk_2564313C0);
    while (__stxr(v6 + 1, (unsigned int *)&unk_2564313C0));
    v7 = (_BYTE *)sub_2368AAD08(v5 + 8, (v6 & 0xF) << 7);
    if (v7)
    {
      v8 = v7;
      v9 = (const void *)a1[2];
      v10 = v7;
      if (v9)
      {
        memcpy(v7, v9, *a1);
        v10 = &v8[*a1];
      }
      *v10 = 0;
      v11 = a1[2];
      a1[1] = v5;
      a1[2] = (size_t)v8;
      if (v11)
      {
        v12 = -*(_QWORD *)(v11 - 24);
        do
          v13 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v13 + v12, &qword_2564313D8));
        free(*(void **)(v11 - 32));
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
}

uint64_t sub_2367E8C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2367E9308(result);
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

uint64_t sub_2367E8CD8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2367D6A70(result);
    JUMPOUT(0x23B7F8F48);
  }
  return result;
}

void sub_2367E8D14(uint64_t *a1)
{
  void *v2;
  uint64_t i;
  uint64_t v4;
  void **v5;

  v5 = (void **)(a1 + 52);
  sub_2367D077C(&v5);
  a1[27] = (uint64_t)&off_2507FFA18;
  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = (uint64_t)v2;
    operator delete(v2);
  }
  for (i = 25; i != 10; i -= 5)
    sub_2367C2F38(&a1[i]);
  if (*((char *)a1 + 87) < 0)
    operator delete((void *)a1[8]);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x23B7F8F48);
}

void sub_2367E8DB8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 96;
      v7 = v4 - 96;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 96;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2367E8E44(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 96;
      v6 = v3 - 96;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 96;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_2367E8EB8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (***v23)(char *);
  uint64_t (**v24)(char *);
  BOOL v25;

  v7 = (_QWORD *)result;
  v8 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 5) < a4)
  {
    sub_2367E8E44((void **)result);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      sub_2367C3440();
    v9 = 0x5555555555555556 * ((uint64_t)(v7[2] - *v7) >> 5);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[2] - *v7) >> 5) >= 0x155555555555555)
      v10 = 0x2AAAAAAAAAAAAAALL;
    else
      v10 = v9;
    sub_2367E91F0(v7, v10);
    result = sub_2367E90DC(a2, a3, v7[1]);
LABEL_15:
    v7[1] = result;
    return result;
  }
  v11 = *(_BYTE **)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v8) >> 5) < a4)
  {
    v12 = a2 + 32 * ((v11 - v8) >> 5);
    if (v11 != v8)
    {
      v13 = 0;
      v14 = 32 * ((v11 - v8) >> 5);
      do
      {
        v15 = &v8[v13];
        *((_QWORD *)v15 + 1) = *(_QWORD *)(a2 + v13 + 8);
        v16 = *(_QWORD *)(a2 + v13 + 24);
        *((_DWORD *)v15 + 8) = *(_DWORD *)(a2 + v13 + 32);
        *((_QWORD *)v15 + 3) = v16;
        *((_DWORD *)v15 + 10) = *(_DWORD *)(a2 + v13 + 40);
        std::string::operator=((std::string *)&v8[v13 + 48], (const std::string *)(a2 + v13 + 48));
        v17 = *(_QWORD *)(a2 + v13 + 88);
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a2 + v13 + 72);
        *((_QWORD *)v15 + 11) = v17;
        v13 += 96;
      }
      while (v14 != v13);
      v8 = (char *)v7[1];
    }
    result = sub_2367E90DC(v12, a3, (uint64_t)v8);
    goto LABEL_15;
  }
  if (a2 != a3)
  {
    v18 = 0;
    do
    {
      v19 = &v8[v18];
      *((_QWORD *)v19 + 1) = *(_QWORD *)(a2 + v18 + 8);
      v20 = *(_QWORD *)(a2 + v18 + 24);
      *((_DWORD *)v19 + 8) = *(_DWORD *)(a2 + v18 + 32);
      *((_QWORD *)v19 + 3) = v20;
      *((_DWORD *)v19 + 10) = *(_DWORD *)(a2 + v18 + 40);
      result = (uint64_t)std::string::operator=((std::string *)&v8[v18 + 48], (const std::string *)(a2 + v18 + 48));
      v21 = *(_QWORD *)(a2 + v18 + 88);
      *(_OWORD *)(v19 + 72) = *(_OWORD *)(a2 + v18 + 72);
      *((_QWORD *)v19 + 11) = v21;
      v18 += 96;
    }
    while (a2 + v18 != a3);
    v8 += v18;
    v11 = (_BYTE *)v7[1];
  }
  if (v11 != v8)
  {
    v22 = v11 - 96;
    v23 = (uint64_t (***)(char *))(v11 - 96);
    do
    {
      v24 = *v23;
      v23 -= 12;
      result = (*v24)(v22);
      v25 = v22 == v8;
      v22 = (char *)v23;
    }
    while (!v25);
  }
  v7[1] = v8;
  return result;
}

void sub_2367E90D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2367E90DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_QWORD *)v7 = off_2507FFBE0;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 + v6 + 8);
      *(_QWORD *)(v7 + 16) = &off_250800448;
      v8 = *(_QWORD *)(a1 + v6 + 24);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(a1 + v6 + 32);
      *(_QWORD *)(v7 + 24) = v8;
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(a1 + v6 + 40);
      v9 = (_BYTE *)(a3 + v6 + 48);
      v10 = (void **)(a1 + v6 + 48);
      if (*(char *)(a1 + v6 + 71) < 0)
      {
        sub_2367E9280(v9, *v10, *(_QWORD *)(a1 + v6 + 56));
      }
      else
      {
        v11 = *(_OWORD *)v10;
        *(_QWORD *)(a3 + v6 + 64) = *(_QWORD *)(a1 + v6 + 64);
        *(_OWORD *)v9 = v11;
      }
      v12 = a3 + v6;
      v13 = *(_OWORD *)(a1 + v6 + 72);
      *(_QWORD *)(v12 + 88) = *(_QWORD *)(a1 + v6 + 88);
      *(_OWORD *)(v12 + 72) = v13;
      v6 += 96;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

char *sub_2367E91F0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_2367C3440();
  result = (char *)sub_2367E923C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *sub_2367E923C(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL)
    sub_2367C3488();
  return operator new(96 * a1);
}

void *sub_2367E9280(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_2367CA230();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_2367E9308(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v13;

  *(_QWORD *)(a1 + 5392) = &off_2507FFA18;
  v2 = *(void **)(a1 + 5424);
  if (v2)
  {
    *(_QWORD *)(a1 + 5432) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 5192) = &off_2507FFA18;
  v3 = *(void **)(a1 + 5224);
  if (v3)
  {
    *(_QWORD *)(a1 + 5232) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 4944) = &off_2507FFA18;
  v4 = *(void **)(a1 + 4976);
  if (v4)
  {
    *(_QWORD *)(a1 + 4984) = v4;
    operator delete(v4);
  }
  v13 = (void **)(a1 + 4912);
  sub_2367D077C(&v13);
  *(_QWORD *)(a1 + 4712) = &off_2507FFA18;
  v5 = *(void **)(a1 + 4744);
  if (v5)
  {
    *(_QWORD *)(a1 + 4752) = v5;
    operator delete(v5);
  }
  for (i = 0; i != -120; i -= 40)
    sub_2367C2F38((uint64_t *)(a1 + 4696 + i));
  if (*(char *)(a1 + 4583) < 0)
    operator delete(*(void **)(a1 + 4560));
  v7 = *(_QWORD *)(a1 + 4496);
  *(_QWORD *)(a1 + 4496) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 4488);
  *(_QWORD *)(a1 + 4488) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 4480);
  *(_QWORD *)(a1 + 4480) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(void **)(a1 + 4424);
  if (v10)
  {
    *(_QWORD *)(a1 + 4432) = v10;
    operator delete(v10);
  }
  sub_2367C2F38((uint64_t *)(a1 + 4304));
  v13 = (void **)(a1 + 4248);
  sub_2367D17E4(&v13);
  v13 = (void **)(a1 + 4224);
  sub_2367E947C(&v13);
  v11 = *(_QWORD *)(a1 + 4216);
  *(_QWORD *)(a1 + 4216) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return sub_2367E94EC(a1);
}

void sub_2367E947C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        sub_2367DAEF4(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2367E94EC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t i;
  void *v14;
  uint64_t j;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void **v22;

  v2 = (uint64_t *)(a1 + 2376);
  v3 = a1 + 4200;
  v4 = a1 + 3944;
  do
  {
    v22 = (void **)(v3 - 40);
    sub_2367D077C(&v22);
    *(_QWORD *)(v3 - 240) = &off_2507FFA18;
    v5 = *(void **)(v3 - 208);
    if (v5)
    {
      *(_QWORD *)(v3 - 200) = v5;
      operator delete(v5);
    }
    v6 = 0;
    v7 = (uint64_t *)(v3 - 456);
    do
    {
      sub_2367C2F38((uint64_t *)(v4 + v6));
      v6 -= 40;
    }
    while (v6 != -120);
    if (*(char *)(v3 - 369) < 0)
      operator delete(*(void **)(v3 - 392));
    v8 = *v7;
    *v7 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v4 -= 456;
    v3 -= 456;
  }
  while (v7 != v2);
  v9 = a1 + 2360;
  do
  {
    v10 = 0;
    v2 -= 15;
    do
    {
      sub_2367C2F38((uint64_t *)(v9 + v10));
      v10 -= 40;
    }
    while (v10 != -120);
    v9 -= 120;
  }
  while (v2 != (uint64_t *)(a1 + 1896));
  v11 = *(void **)(a1 + 1856);
  if (v11)
  {
    *(_QWORD *)(a1 + 1864) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 1832);
  if (v12)
  {
    *(_QWORD *)(a1 + 1840) = v12;
    operator delete(v12);
  }
  for (i = 0; i != -72; i -= 24)
  {
    v14 = *(void **)(a1 + i + 1808);
    if (v14)
    {
      *(_QWORD *)(a1 + i + 1816) = v14;
      operator delete(v14);
    }
  }
  for (j = 1736; j != 1616; j -= 40)
    sub_2367C2F38((uint64_t *)(a1 + j));
  sub_2367C2F38((uint64_t *)(a1 + 1616));
  v16 = *(void **)(a1 + 1568);
  if (v16)
  {
    *(_QWORD *)(a1 + 1576) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 1536);
  if (v17)
  {
    *(_QWORD *)(a1 + 1544) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 1512);
  if (v18)
  {
    *(_QWORD *)(a1 + 1520) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 1488);
  if (v19)
  {
    *(_QWORD *)(a1 + 1496) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1464);
  if (v20)
  {
    *(_QWORD *)(a1 + 1472) = v20;
    operator delete(v20);
  }
  v22 = (void **)(a1 + 1440);
  sub_2367E9700(&v22);
  sub_2367E9740((_QWORD *)(a1 + 1256));
  sub_2367C2F38((uint64_t *)(a1 + 1168));
  sub_2367C2F38((uint64_t *)(a1 + 1128));
  sub_2367C2F38((uint64_t *)(a1 + 1088));
  sub_2367C2F38((uint64_t *)(a1 + 1048));
  v22 = (void **)(a1 + 928);
  sub_2367DC2DC(&v22);
  sub_2367D7A7C((uint64_t *)(a1 + 216));
  sub_2367C2F38((uint64_t *)(a1 + 176));
  return a1;
}

void sub_2367E9700(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2367E97D0((uint64_t *)v2);
    operator delete(**a1);
  }
}

_QWORD *sub_2367E9740(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_2367E97D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  BOOL v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 536;
    do
    {
      v5 = *(void **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)(v4 + 8) = v5;
        operator delete(v5);
      }
      v6 = v4 == v3;
      v4 -= 536;
    }
    while (!v6);
  }
  a1[1] = v3;
}

double JxlDecoderReset(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double result;

  v2 = JxlDecoderRewind_0(a1);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    MEMORY[0x23B7F8F48](v3, 0xC0C40D1025EB5, v2);
  *(_QWORD *)(a1 + 1000) = 16842752;
  result = 0.0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 3416) = *(_QWORD *)(a1 + 3408);
  *(_QWORD *)(a1 + 3440) = *(_QWORD *)(a1 + 3432);
  *(_QWORD *)(a1 + 3464) = *(_QWORD *)(a1 + 3456);
  *(_QWORD *)(a1 + 3488) = *(_QWORD *)(a1 + 3480);
  *(_BYTE *)(a1 + 962) = 0;
  return result;
}

uint64_t JxlDecoderCreate(uint64_t *a1)
{
  void *(*v1)(int, size_t);
  uint64_t v2;
  void (*v3)(int, void *);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;

  v1 = sub_2367F8118;
  if (!a1)
  {
    v5 = 0;
LABEL_8:
    v3 = sub_2367F8128;
    goto LABEL_9;
  }
  v2 = a1[1];
  v3 = (void (*)(int, void *))a1[2];
  if ((v2 == 0) != (v3 == 0))
    return 0;
  v5 = *a1;
  if (v2)
    v1 = (void *(*)(int, size_t))a1[1];
  if (!v3)
    goto LABEL_8;
LABEL_9:
  v6 = v1(v5, 3640);
  v4 = (uint64_t)v6;
  if (v6)
  {
    bzero(v6, 0xE38uLL);
    *(_QWORD *)(v4 + 192) = &off_2507FF438;
    *(_OWORD *)(v4 + 212) = xmmword_2368AF590;
    v8 = &off_2507FF550;
    v9 = xmmword_2368AF3F0;
    v10 = 0;
    sub_2367CB9F8(v4 + 192, (uint64_t)&v8);
    *(_QWORD *)(v4 + 240) = 0;
    *(_DWORD *)(v4 + 268) = 1245184;
    *(_QWORD *)(v4 + 280) = 0;
    *(_DWORD *)(v4 + 288) = 0;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_DWORD *)(v4 + 328) = 0;
    *(_OWORD *)(v4 + 348) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 332) = xmmword_2368AF4B0;
    *(_OWORD *)(v4 + 508) = 0u;
    *(_OWORD *)(v4 + 524) = 0u;
    *(_OWORD *)(v4 + 540) = 0u;
    *(_OWORD *)(v4 + 556) = 0u;
    *(_OWORD *)(v4 + 572) = 0u;
    *(_OWORD *)(v4 + 588) = 0u;
    *(_OWORD *)(v4 + 364) = 0u;
    *(_OWORD *)(v4 + 380) = 0u;
    *(_OWORD *)(v4 + 396) = 0u;
    *(_OWORD *)(v4 + 412) = 0u;
    *(_OWORD *)(v4 + 428) = 0u;
    *(_OWORD *)(v4 + 444) = 0u;
    *(_OWORD *)(v4 + 460) = 0u;
    *(_OWORD *)(v4 + 476) = 0u;
    *(_OWORD *)(v4 + 492) = 0u;
    *(_OWORD *)(v4 + 604) = 0u;
    *(_OWORD *)(v4 + 620) = 0u;
    *(_OWORD *)(v4 + 636) = 0u;
    *(_OWORD *)(v4 + 652) = 0u;
    *(_OWORD *)(v4 + 668) = 0u;
    *(_OWORD *)(v4 + 684) = 0u;
    *(_OWORD *)(v4 + 700) = 0u;
    *(_OWORD *)(v4 + 716) = 0u;
    *(_OWORD *)(v4 + 732) = 0u;
    *(_OWORD *)(v4 + 748) = 0u;
    *(_OWORD *)(v4 + 764) = 0u;
    *(_OWORD *)(v4 + 780) = 0u;
    *(_OWORD *)(v4 + 796) = 0u;
    *(_OWORD *)(v4 + 812) = 0u;
    *(_QWORD *)(v4 + 828) = 0;
    *(_QWORD *)(v4 + 856) = 0;
    *(_OWORD *)(v4 + 840) = 0u;
    *(_QWORD *)(v4 + 864) = 0x3E800000001;
    *(_QWORD *)(v4 + 872) = 0;
    *(_OWORD *)(v4 + 880) = 0u;
    *(_DWORD *)(v4 + 1040) = 1;
    *(_QWORD *)(v4 + 1168) = 0;
    *(_OWORD *)(v4 + 1176) = 0u;
    sub_2367F7A14(v4 + 1192);
    *(_QWORD *)(v4 + 1616) = &off_2507FF488;
    v8 = &off_2507FF550;
    v9 = xmmword_2368AF3F0;
    v10 = 0;
    sub_2367F42A0(v4 + 1616, (uint64_t)&v8);
    sub_2367F7984(v4 + 1648);
    sub_2367F7A14(v4 + 2872);
    *(_QWORD *)(v4 + 3312) = 0;
    *(_OWORD *)(v4 + 3296) = 0u;
    *(_OWORD *)(v4 + 3328) = 0u;
    *(_OWORD *)(v4 + 3344) = 0u;
    *(_OWORD *)(v4 + 3408) = 0u;
    *(_OWORD *)(v4 + 3424) = 0u;
    *(_OWORD *)(v4 + 3440) = 0u;
    *(_OWORD *)(v4 + 3456) = 0u;
    *(_OWORD *)(v4 + 3472) = 0u;
    *(_OWORD *)(v4 + 3488) = 0u;
    *(_OWORD *)(v4 + 3504) = 0u;
    *(_QWORD *)(v4 + 3520) = 0;
    *(_QWORD *)(v4 + 3616) = 0;
    *(_OWORD *)(v4 + 3624) = 0u;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 8) = v1;
    *(_QWORD *)(v4 + 16) = v3;
    JxlDecoderReset(v4);
  }
  return v4;
}

void sub_2367E9AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  void *v21;
  void **v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  *(_QWORD *)(v16 + 1192) = &off_2507FFA40;
  a12 = (void **)(v16 + 1520);
  sub_2367E8DB8(&a12);
  *(_QWORD *)(v16 + 1240) = &off_2507FFA18;
  v21 = *(void **)(v16 + 1272);
  if (v21)
  {
    *(_QWORD *)(v16 + 1280) = v21;
    operator delete(v21);
  }
  v22 = (void **)(v16 + 872);
  v23 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v16 + 1176) = v23;
    operator delete(v23);
  }
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v16 + 880) = v24;
    operator delete(v24);
  }
  sub_2367C2F38((uint64_t *)(v16 + 856));
  sub_2367C2F38(v18);
  v25 = *(void **)(v16 + 160);
  if (v25)
  {
    *(_QWORD *)(v16 + 168) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v16 + 136);
  if (v26)
  {
    *(_QWORD *)(v16 + 144) = v26;
    operator delete(v26);
  }
  a16 = (void **)(v16 + 112);
  sub_2367C4718(&a16);
  sub_2367C2F38(v17);
  v27 = *(void **)(v16 + 80);
  if (v27)
  {
    *(_QWORD *)(v16 + 88) = v27;
    operator delete(v27);
  }
  v28 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 24) = 0;
  if (v28)
    MEMORY[0x23B7F8F48](v28, 0xC0C40D1025EB5);
  _Unwind_Resume(a1);
}

uint64_t sub_2367E9BFC(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_2507FFA40;
  v4 = (void **)(a1 + 328);
  sub_2367E8DB8(&v4);
  *(_QWORD *)(a1 + 48) = &off_2507FFA18;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2367E9C5C(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_2507FFA40;
  v4 = (void **)(a1 + 328);
  sub_2367E8DB8(&v4);
  *(_QWORD *)(a1 + 48) = &off_2507FFA18;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *JxlDecoderDestroy(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *);
  void **v21;

  if (result)
  {
    v1 = result;
    v2 = *result;
    v20 = (uint64_t (*)(uint64_t, _QWORD *))result[2];
    v3 = (_QWORD *)result[445];
    if (v3)
      sub_2367BE380(v3);
    v4 = (void *)v1[438];
    if (v4)
    {
      v1[439] = v4;
      operator delete(v4);
    }
    v5 = (void *)v1[435];
    if (v5)
    {
      v1[436] = v5;
      operator delete(v5);
    }
    v6 = (void *)v1[432];
    if (v6)
    {
      v1[433] = v6;
      operator delete(v6);
    }
    v7 = (void *)v1[429];
    if (v7)
    {
      v1[430] = v7;
      operator delete(v7);
    }
    v8 = (void *)v1[426];
    if (v8)
    {
      v1[427] = v8;
      operator delete(v8);
    }
    v9 = v1[419];
    v1[419] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = (void *)v1[416];
    if (v10)
    {
      v1[417] = v10;
      operator delete(v10);
    }
    sub_2367E8CD8(v1 + 414, 0);
    sub_2367E8C9C(v1 + 413, 0);
    v11 = (uint64_t *)v1[412];
    v1[412] = 0;
    if (v11)
      sub_2367E8D14(v11);
    v1[359] = &off_2507FFA40;
    v21 = (void **)(v1 + 400);
    sub_2367E8DB8(&v21);
    v1[365] = &off_2507FFA18;
    v12 = (void *)v1[369];
    if (v12)
    {
      v1[370] = v12;
      operator delete(v12);
    }
    v1[149] = &off_2507FFA40;
    v21 = (void **)(v1 + 190);
    sub_2367E8DB8(&v21);
    v1[155] = &off_2507FFA18;
    v13 = (void *)v1[159];
    if (v13)
    {
      v1[160] = v13;
      operator delete(v13);
    }
    v14 = (void *)v1[146];
    if (v14)
    {
      v1[147] = v14;
      operator delete(v14);
    }
    v15 = (void *)v1[109];
    if (v15)
    {
      v1[110] = v15;
      operator delete(v15);
    }
    sub_2367C2F38(v1 + 107);
    sub_2367C2F38(v1 + 37);
    v16 = (void *)v1[20];
    if (v16)
    {
      v1[21] = v16;
      operator delete(v16);
    }
    v17 = (void *)v1[17];
    if (v17)
    {
      v1[18] = v17;
      operator delete(v17);
    }
    v21 = (void **)(v1 + 14);
    sub_2367C4718(&v21);
    sub_2367C2F38(v1 + 13);
    v18 = (void *)v1[10];
    if (v18)
    {
      v1[11] = v18;
      operator delete(v18);
    }
    v19 = v1[3];
    v1[3] = 0;
    if (v19)
      MEMORY[0x23B7F8F48](v19, 0xC0C40D1025EB5);
    return (_QWORD *)v20(v2, v1);
  }
  return result;
}

void JxlDecoderSkipFrames(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t i;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  char *v82;
  char *__p;
  _BYTE *v84;
  uint64_t v86;
  _OWORD v87[13];

  v2 = a1[422] + a2;
  a1[422] = v2;
  a1[436] = a1[435];
  v3 = a1[425] + v2;
  v4 = a1[432];
  if (v3 < (a1[433] - v4) >> 3)
  {
    v5 = *(_QWORD *)(v4 + 8 * v3);
    v6 = a1[430];
    v7 = a1[429];
    if (v5 < (v6 - v7) >> 2)
    {
      v81 = v5;
      v8 = 0;
      v9 = a1 + 435;
      v86 = (uint64_t)(a1[427] - a1[426]) >> 2;
      memset(v87, 0, 192);
      do
      {
        sub_2367D7BB0((char **)v87 + 3 * v8, (v6 - v7) >> 2);
        v6 = a1[430];
        v7 = a1[429];
        if (v6 != v7)
        {
          v10 = 0;
          v11 = (v6 - v7) >> 2;
          v12 = *((_QWORD *)v87 + 3 * v8);
          if (v11 <= 1)
            v11 = 1;
          v13 = v86;
          do
          {
            if ((*(_DWORD *)(v7 + 4 * v10) & (1 << v8)) != 0)
              v13 = v10;
            *(_QWORD *)(v12 + 8 * v10++) = v13;
          }
          while (v11 != v10);
        }
        ++v8;
      }
      while (v8 != 8);
      v14 = v81;
      if ((uint64_t)(v81 + 1) < 0)
        sub_2367C3440();
      v15 = operator new(v81 + 1);
      v16 = a1;
      v17 = v15;
      v18 = 0;
      do
        v15[v18++] = 0;
      while (v81 + 1 != v18);
      v79 = v81 + 1;
      v80 = v9;
      v84 = v15;
      v19 = (char *)operator new(8uLL);
      __p = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      *(_QWORD *)v19 = v81;
      v23 = v19 + 8;
      v17[v81] = 1;
      v24 = v19 + 8;
      do
      {
        v25 = *(_QWORD *)(*((_QWORD *)v87 + 3 * v22) + 8 * v14);
        if (v25 != v86 && !v84[v25])
        {
          if (v24 >= v23)
          {
            v27 = (v24 - v19) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              goto LABEL_123;
            v29 = v21;
            if ((v23 - v19) >> 2 > v28)
              v28 = (v23 - v19) >> 2;
            if ((unint64_t)(v23 - v19) >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
              v30 = (unint64_t)sub_2367CA1FC(v30);
            else
              v31 = 0;
            v32 = (char *)(v30 + 8 * v27);
            *(_QWORD *)v32 = v25;
            v26 = v32 + 8;
            while (v24 != v19)
            {
              v33 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v32 - 1) = v33;
              v32 -= 8;
            }
            v23 = (char *)(v30 + 8 * v31);
            if (v19)
            {
              v34 = v30 + 8 * v31;
              operator delete(v19);
              v23 = (char *)v34;
            }
            v19 = v32;
            v21 = v29;
          }
          else
          {
            *(_QWORD *)v24 = v25;
            v26 = v24 + 8;
          }
          v84[v25] = 1;
          if ((unint64_t)v20 >= v21)
          {
            v35 = v23;
            v36 = (v20 - __p) >> 3;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61)
LABEL_123:
              sub_2367C3440();
            v38 = v21 - (_QWORD)__p;
            v39 = (uint64_t)(v21 - (_QWORD)__p) >> 2;
            if (v39 > v37)
              v37 = v39;
            if (v38 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v37;
            if (v40)
              v40 = (unint64_t)sub_2367CA1FC(v40);
            else
              v41 = 0;
            v42 = (char *)(v40 + 8 * v36);
            *(_QWORD *)v42 = v25;
            v43 = v42 + 8;
            if (v20 == __p)
            {
              v44 = __p;
            }
            else
            {
              v44 = __p;
              do
              {
                v45 = *((_QWORD *)v20 - 1);
                v20 -= 8;
                *((_QWORD *)v42 - 1) = v45;
                v42 -= 8;
              }
              while (v20 != __p);
            }
            v21 = v40 + 8 * v41;
            if (v44)
            {
              v46 = v40 + 8 * v41;
              operator delete(v44);
              v21 = v46;
            }
            v24 = v26;
            __p = v42;
            v20 = v43;
            v16 = a1;
            v14 = v81;
            v23 = v35;
          }
          else
          {
            *(_QWORD *)v20 = v25;
            v20 += 8;
            v24 = v26;
            v16 = a1;
          }
        }
        ++v22;
      }
      while (v22 != 8);
      if (v19 != v24)
      {
        while (1)
        {
          v49 = *((_QWORD *)v24 - 1);
          v48 = v24 - 8;
          v47 = v49;
          if (v49)
            break;
          v53 = v20;
          v52 = v48;
LABEL_103:
          v20 = v53;
          v24 = v52;
          if (v19 == v52)
          {
            if (v52)
              goto LABEL_105;
            goto LABEL_106;
          }
        }
        v50 = 0;
        while (1)
        {
          if (((*(_DWORD *)(v16[426] + 4 * v47) >> v50) & 1) == 0)
          {
            v52 = v48;
            v53 = v20;
            goto LABEL_64;
          }
          v51 = *(_QWORD *)(*((_QWORD *)v87 + 3 * v50) + 8 * (v47 - 1));
          if (v51 == v86 || v84[v51])
            break;
          if (v48 >= v23)
          {
            v54 = (v48 - v19) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
              goto LABEL_122;
            v56 = v21;
            if ((v23 - v19) >> 2 > v55)
              v55 = (v23 - v19) >> 2;
            if ((unint64_t)(v23 - v19) >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
              v57 = (unint64_t)sub_2367CA1FC(v57);
            else
              v58 = 0;
            v59 = (char *)(v57 + 8 * v54);
            *(_QWORD *)v59 = v51;
            v52 = v59 + 8;
            while (v48 != v19)
            {
              v60 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *((_QWORD *)v59 - 1) = v60;
              v59 -= 8;
            }
            v23 = (char *)(v57 + 8 * v58);
            if (v19)
            {
              v61 = v19;
              v62 = v23;
              operator delete(v61);
              v23 = v62;
            }
            v19 = v59;
            v21 = v56;
          }
          else
          {
            *(_QWORD *)v48 = v51;
            v52 = v48 + 8;
          }
          v84[v51] = 1;
          if ((unint64_t)v20 < v21)
          {
            *(_QWORD *)v20 = v51;
            v20 += 8;
            goto LABEL_62;
          }
          v82 = v23;
          v63 = (v20 - __p) >> 3;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61)
LABEL_122:
            sub_2367C3440();
          v65 = v21 - (_QWORD)__p;
          v66 = (uint64_t)(v21 - (_QWORD)__p) >> 2;
          if (v66 > v64)
            v64 = v66;
          if (v65 >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v67 = v64;
          if (v67)
            v67 = (unint64_t)sub_2367CA1FC(v67);
          else
            v68 = 0;
          v69 = (char *)(v67 + 8 * v63);
          *(_QWORD *)v69 = v51;
          v53 = v69 + 8;
          if (v20 == __p)
          {
            v16 = a1;
            v70 = __p;
          }
          else
          {
            v16 = a1;
            v70 = __p;
            do
            {
              v71 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v69 - 1) = v71;
              v69 -= 8;
            }
            while (v20 != __p);
          }
          v21 = v67 + 8 * v68;
          if (v70)
          {
            v72 = v67 + 8 * v68;
            operator delete(v70);
            v21 = v72;
          }
          __p = v69;
          v23 = v82;
LABEL_64:
          ++v50;
          v48 = v52;
          v20 = v53;
          if (v50 == 8)
            goto LABEL_103;
        }
        v52 = v48;
LABEL_62:
        v53 = v20;
        v16 = a1;
        goto LABEL_64;
      }
      v53 = v20;
      v52 = v24;
      if (v24)
LABEL_105:
        operator delete(v52);
LABEL_106:
      operator delete(v84);
      for (i = 0; i != -192; i -= 24)
      {
        v74 = *(void **)((char *)&v87[10] + i + 8);
        if (v74)
        {
          *(_QWORD *)((char *)&v87[11] + i) = v74;
          operator delete(v74);
        }
      }
      LOBYTE(v87[0]) = 0;
      v75 = a1[435];
      v76 = a1[436] - v75;
      if (v76 <= v81)
      {
        sub_2367C8504(v80, v79 - v76, v87);
      }
      else if (v79 < v76)
      {
        a1[436] = v75 + v79;
      }
      if (__p != v53)
      {
        v77 = __p;
        do
        {
          v78 = *(_QWORD *)v77;
          v77 += 8;
          *(_BYTE *)(*v80 + v78) = 1;
        }
        while (v77 != v53);
      }
      if (__p)
        operator delete(__p);
    }
  }
}

void sub_2367EA508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t JxlDecoderSkipCurrentFrame(uint64_t a1)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 3368) != 2)
    return 1;
  *(_DWORD *)(a1 + 3368) = 0;
  sub_2367EA5E4(a1, *(_QWORD *)(a1 + 3360));
  result = 0;
  if (*(_BYTE *)(a1 + 3373))
    *(_BYTE *)(a1 + 1056) = 0;
  return result;
}

uint64_t sub_2367EA5E4(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 3600);
  v3 = v2;
  if (!*(_BYTE *)(result + 952))
  {
    v4 = *(_QWORD *)(result + 904);
    if (*(_QWORD *)(result + 920) - v4 >= v2)
      v3 = *(_QWORD *)(result + 3600);
    else
      v3 = *(_QWORD *)(result + 920) - v4;
  }
  v5 = *(_QWORD *)(result + 3504);
  v6 = *(_QWORD *)(result + 3512);
  if (v5 == v6)
  {
    if (a2 <= v3)
    {
      *(_QWORD *)(result + 3592) += a2;
      *(_QWORD *)(result + 3600) = v2 - a2;
      v11 = *(_QWORD *)(result + 904) + a2;
    }
    else
    {
      *(_QWORD *)(result + 3536) = a2 - v3;
      *(_QWORD *)(result + 3592) += v3;
      *(_QWORD *)(result + 3600) = v2 - v3;
      v11 = *(_QWORD *)(result + 904) + v3;
    }
    *(_QWORD *)(result + 904) = v11;
  }
  else
  {
    v7 = *(_QWORD *)(result + 3536) + a2;
    *(_QWORD *)(result + 3536) = v7;
    v8 = *(_QWORD *)(result + 3528);
    v9 = v6 - v5;
    if (v8 + v7 >= v9)
    {
      if (v8 + v7 - v9 < v8)
        v8 = v8 + v7 - v9;
      *(_QWORD *)(result + 3592) += v8;
      *(_QWORD *)(result + 3600) = v2 - v8;
      *(_QWORD *)(result + 904) += v8;
      v10 = v7 - v9;
      if (v7 < v9)
        v10 = 0;
      *(_QWORD *)(result + 3536) = v10;
      *(_QWORD *)(result + 3528) = 0;
      *(_QWORD *)(result + 3512) = v5;
    }
  }
  return result;
}

uint64_t JxlDecoderSetParallelRunner(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(_DWORD *)(a1 + 32))
    return 1;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  if (a2)
    v9 = a3;
  else
    v9 = v7;
  *v7 = a2;
  v7[1] = v9;
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (result)
  {
    MEMORY[0x23B7F8F48](result, 0xC0C40D1025EB5);
    return 0;
  }
  return result;
}

uint64_t JxlDecoderSizeHintBasicInfo(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 39))
    return 0;
  else
    return *(_QWORD *)(a1 + 1016);
}

uint64_t JxlDecoderSubscribeEvents(_DWORD *a1, int a2)
{
  uint64_t result;

  if (a1[8] | a2 & 0x3F)
    return 1;
  result = 0;
  a1[252] = a2;
  a1[253] = a2;
  return result;
}

uint64_t JxlDecoderSetKeepOrientation(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 32))
    return 1;
  result = 0;
  *(_BYTE *)(a1 + 1000) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetUnpremultiplyAlpha(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 32))
    return 1;
  result = 0;
  *(_BYTE *)(a1 + 1001) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetRenderSpotcolors(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 32))
    return 1;
  result = 0;
  *(_BYTE *)(a1 + 1002) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetCoalescing(uint64_t a1, int a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 32))
    return 1;
  result = 0;
  *(_BYTE *)(a1 + 1003) = a2 != 0;
  return result;
}

uint64_t JxlDecoderSetInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 3592) || *(_BYTE *)(a1 + 3608))
    return 1;
  result = 0;
  *(_QWORD *)(a1 + 3592) = a2;
  *(_QWORD *)(a1 + 3600) = a3;
  return result;
}

uint64_t JxlDecoderReleaseInput(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 3600);
  *(_OWORD *)(a1 + 3592) = 0u;
  return v1;
}

uint64_t JxlDecoderCloseInput(uint64_t result)
{
  *(_BYTE *)(result + 3608) = 1;
  return result;
}

uint64_t JxlDecoderSetJPEGBuffer()
{
  return 1;
}

uint64_t JxlDecoderReleaseJPEGBuffer()
{
  return 1;
}

uint64_t JxlDecoderProcessInput(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  char *v19;
  __int16 v20;
  _BYTE *v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  char *v32;
  _DWORD *v33;
  _DWORD *v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t n;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  __int128 v72;
  int v73;
  int v74;
  _DWORD *v75;
  int v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  char v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  __int128 v122;
  int v123;
  unint64_t v124;
  unsigned __int8 *v125;
  unsigned int v126;
  unsigned __int16 *v127;
  unsigned int v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  __int128 v136;
  int v137;
  int v138;
  char *v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int ii;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  char v153;
  unsigned int v154;
  unsigned int v155;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  char v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unsigned __int8 *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  BOOL v184;
  BOOL v185;
  _BOOL4 v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  unint64_t v190;
  char v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void **v236;
  uint64_t v237;
  void *v238;
  void (***v239)(_QWORD);
  void (***v240)(_QWORD);
  void (**v241)(_QWORD);
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t i;
  __int128 v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  _OWORD *v254;
  __int128 *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  int8x16_t **v260;
  int8x16_t v261;
  int8x16_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  int v270;
  int v271;
  int8x16_t *v272;
  int8x16_t *v273;
  int8x16_t *v274;
  char v275;
  char v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t j;
  BOOL v280;
  int v281;
  uint64_t v282;
  unint64_t v283;
  unsigned int *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unint64_t v290;
  char v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  uint64_t *v324;
  uint64_t *v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  BOOL v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t *v340;
  char *v341;
  __int128 v342;
  uint64_t *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  int v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  void (***v355)(_QWORD);
  void (***v356)(_QWORD);
  void (**v357)(_QWORD);
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  char v364;
  unint64_t v365;
  int v366;
  int v367;
  unint64_t v368;
  int v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  char v375;
  uint64_t *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  int v381;
  unsigned int v382;
  unint64_t v383;
  _QWORD *v384;
  char *v385;
  int v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  BOOL v395;
  int v396;
  char v397;
  unsigned __int8 *v398;
  unsigned __int8 *v399;
  unsigned __int8 *v400;
  BOOL v401;
  char v402;
  unsigned __int8 *v403;
  unsigned __int8 v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  unsigned __int8 v407;
  unsigned int v408;
  int v409;
  uint64_t *v410;
  _BYTE *k;
  int v412;
  uint64_t v413;
  int v414;
  BOOL v415;
  unsigned int v416;
  unsigned int v417;
  int v419;
  uint64_t m;
  int v422;
  BOOL v423;
  BOOL v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  BOOL v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int *v434;
  int *v435;
  int v436;
  int v437;
  unint64_t v438;
  unint64_t v439;
  _DWORD *v440;
  _QWORD *v441;
  int v442;
  _QWORD *v443;
  int v444;
  unint64_t v445;
  char *v446;
  char *v447;
  __int128 v448;
  __int128 v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  unsigned int v453;
  int v454;
  unint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  int v459;
  char v460;
  uint64x2_t *v461;
  _QWORD *v462;
  int v463;
  unint64_t v464;
  _OWORD *v465;
  void *v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  void *v471;
  float v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v486;
  _DWORD *v487;
  unsigned __int8 v488;
  unsigned __int8 *v489;
  unsigned __int8 v490;
  unsigned int v491;
  unsigned int v492;
  uint64_t v493;
  unsigned int *v494;
  unsigned int v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  _QWORD *v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _DWORD *v512;
  _DWORD *v513;
  _OWORD *v514;
  _OWORD *v515;
  uint64_t v516;
  uint64_t v517;
  _QWORD *v518;
  _QWORD *v519;
  _QWORD *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 **v526;
  unint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  uint64_t v530;
  unsigned __int8 **v531;
  unsigned int v532;
  uint64_t v533;
  _DWORD *v534;
  unint64_t *v535;
  uint64_t v536;
  uint64_t v537;
  _DWORD *v538;
  uint64_t v539;
  unint64_t v540;
  void **__p;
  int __pa;
  char *__pb;
  char *__pc;
  void *__pd[2];
  _QWORD *v546;
  uint64_t *v547;
  uint64_t v548;
  int v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  uint64_t v553;
  __int128 v554;
  void *__src;
  uint64x2_t v556[2];
  __int128 v557;
  _BYTE v558[536];
  uint64_t v559;
  int8x16x4_t v560;

  v559 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 32);
  if (v1 == 3)
    return 1;
  v2 = a1;
  if (!v1)
    *(_DWORD *)(a1 + 32) = 1;
  if (!*(_BYTE *)(a1 + 36))
  {
    v482 = JxlSignatureCheck(*(unsigned __int8 **)(a1 + 3592), *(_QWORD *)(a1 + 3600));
    v28 = v482;
    if ((_DWORD)v482 == 1)
      return v28;
    if (!(_DWORD)v482)
    {
      if (*(_BYTE *)(v2 + 3608))
        return 1;
      else
        return 2;
    }
    *(_BYTE *)(v2 + 36) = 1;
    if ((_DWORD)v482 == 3)
      *(_BYTE *)(v2 + 1024) = 1;
    else
      *(_BYTE *)(v2 + 37) = 1;
  }
  v497 = v2 + 1272;
  v3 = (_DWORD *)(v2 + 953);
  v533 = v2 + 1192;
  v530 = v2 + 1616;
  v528 = v2 + 2872;
  v521 = v2 + 1216;
  v522 = v2 + 2896;
  v519 = (_QWORD *)(v2 + 1256);
  v520 = (_QWORD *)(v2 + 2936);
  v517 = v2 + 2976;
  v518 = (_QWORD *)(v2 + 2952);
  v515 = (_OWORD *)(v2 + 3056);
  v516 = v2 + 1296;
  v513 = (_DWORD *)(v2 + 3120);
  v514 = (_OWORD *)(v2 + 1376);
  v511 = v2 + 3136;
  v512 = (_DWORD *)(v2 + 1440);
  v509 = v2 + 3168;
  v510 = v2 + 1456;
  v507 = v2 + 3200;
  v508 = v2 + 1488;
  v505 = v2 + 1552;
  v506 = v2 + 3232;
  v503 = (_QWORD *)(v2 + 1584);
  v504 = (_QWORD *)(v2 + 3264);
  v501 = v2 + 1600;
  v502 = v2 + 3280;
  v523 = v2 + 1648;
  v524 = v2 + 48;
  v499 = v2 + 3456;
  v500 = (uint64_t *)(v2 + 3304);
  v498 = v2 + 3432;
  v529 = (_QWORD *)(v2 + 3408);
  v546 = (_QWORD *)(v2 + 3328);
  v547 = (uint64_t *)(v2 + 3312);
  v4 = *(_DWORD *)(v2 + 3552);
  v548 = v2;
  v534 = (_DWORD *)(v2 + 953);
  while (2)
  {
    while (!v4)
    {
LABEL_257:
      if (!*(_BYTE *)(v2 + 1024))
      {
        if (*(_DWORD *)(v2 + 32) == 2)
          return 0;
        v4 = 3;
        *(_DWORD *)(v2 + 3552) = 3;
        *(_BYTE *)(v2 + 952) = 1;
        continue;
      }
      v174 = *(_QWORD *)(v2 + 3600);
      if (!v174)
      {
        if (*(_DWORD *)(v2 + 32) != 2)
          goto LABEL_802;
        if (*(_BYTE *)(v2 + 3608))
          return *(_DWORD *)(v2 + 32) != 2;
        v28 = (*(_DWORD *)(v2 + 1008) >> 13) & 2;
        goto LABEL_788;
      }
      v175 = *(_DWORD *)(v2 + 1008);
      if ((v175 & 0x4000) != 0 && *(_DWORD *)(v2 + 32) == 2 && *(_BYTE *)(v2 + 37))
      {
        if (v174 <= 1)
        {
          v178 = *(_QWORD *)(v2 + 904);
LABEL_800:
          v483 = 106;
LABEL_801:
          *(_QWORD *)(v2 + 1016) = v483 - v178;
          goto LABEL_802;
        }
        v176 = *(unsigned __int8 **)(v2 + 3592);
        if (*v176 == 255 && v176[1] == 10)
          return *(_DWORD *)(v2 + 32) != 2;
        v177 = 1;
      }
      else
      {
        v177 = 0;
      }
      v178 = *(_QWORD *)(v2 + 904);
      if (v174 < 8)
        goto LABEL_800;
      v179 = *(_QWORD *)(v2 + 3592);
      v180 = *(_DWORD *)v179;
      v181 = *(_DWORD *)(v179 + 4);
      *v3 = v181;
      if (v180 == 0x1000000)
      {
        if (v174 < 0x10)
        {
          v483 = 114;
          goto LABEL_801;
        }
        v182 = bswap64(*(_QWORD *)(v179 + 8));
        v183 = 16;
      }
      else
      {
        v182 = bswap32(v180);
        v183 = 8;
      }
      v184 = __CFADD__(v178, v182);
      v185 = v182 >= v183 || v182 == 0;
      v28 = 1;
      if (!v185 || v184)
        return v28;
      v186 = *v3 != 1651470946;
      if (*v3 == 1651470946)
      {
        if (v174 < (v183 | 4))
          goto LABEL_802;
        v181 = *(_DWORD *)(v179 + v183);
      }
      v3[1] = v181;
      v187 = *(_QWORD *)(v2 + 1032) + 1;
      *(_QWORD *)(v2 + 1032) = v187;
      if (v177 && *v3 == 541874250)
        return *(_DWORD *)(v2 + 32) != 2;
      if (v187 == 2)
      {
        if (*v3 != 1887007846)
          return v28;
      }
      else if (*v3 == 1887007846)
      {
        return v28;
      }
      v188 = v182 == 0;
      *(_BYTE *)(v2 + 952) = v182 == 0;
      *(_QWORD *)(v2 + 912) = v183 + v178;
      v189 = v182 + v178;
      if (!v182)
        v189 = 0;
      *(_QWORD *)(v2 + 920) = v189;
      if (v182)
        v190 = v182 - v183;
      else
        v190 = 0;
      *(_QWORD *)(v2 + 928) = v190;
      *(_QWORD *)(v2 + 936) = v182;
      *(_QWORD *)(v2 + 944) = v183;
      if ((v175 & 0x4000) != 0)
      {
        v192 = !v186 && *(_BYTE *)(v2 + 962) != 0;
        v193 = *(_QWORD **)(v2 + 3560);
        if (v193)
        {
          sub_2367BE380(v193);
          *(_QWORD *)(v2 + 3560) = 0;
        }
        *(_BYTE *)(v2 + 3568) = 0;
        *(_BYTE *)(v2 + 3569) = v192;
        *(_BYTE *)(v2 + 3570) = v188;
        *(_QWORD *)(v2 + 3576) = v190;
        *(_QWORD *)(v2 + 3584) = 0;
      }
      switch(*v3)
      {
        case 0x70797466:
          v4 = 1;
          break;
        case 0x636C786A:
          if (*(_BYTE *)(v2 + 37))
            return 1;
          *(_BYTE *)(v2 + 37) = 1;
          v4 = 3;
          break;
        case 0x706C786A:
          v4 = 4;
          break;
        default:
          v4 = 2;
          break;
      }
      *(_DWORD *)(v2 + 3552) = v4;
      if ((*(_BYTE *)(v2 + 1009) & 0x40) != 0)
      {
        *(_BYTE *)(v2 + 961) = 1;
        *(_BYTE *)(v2 + 964) = 0;
        return 0x4000;
      }
    }
    v5 = *(_QWORD *)(v2 + 944);
    v6 = *(_QWORD *)(v2 + 3592) + v5;
    *(_QWORD *)(v2 + 3592) = v6;
    v7 = *(_QWORD *)(v2 + 3600) - v5;
    *(_QWORD *)(v2 + 3600) = v7;
    v8 = *(_QWORD *)(v2 + 904) + v5;
    *(_QWORD *)(v2 + 904) = v8;
    *(_QWORD *)(v2 + 944) = 0;
    if ((*(_BYTE *)(v2 + 1009) & 0x40) == 0 || !*(_BYTE *)(v2 + 964))
    {
LABEL_256:
      switch(v4)
      {
        case 0:
          goto LABEL_257;
        case 1:
          if (*(_QWORD *)(v2 + 928) < 0xCuLL)
            return 1;
          v438 = *(_QWORD *)(v2 + 3600);
          v25 = v438 >= 4;
          v439 = v438 - 4;
          if (!v25)
            goto LABEL_802;
          v440 = *(_DWORD **)(v2 + 3592);
          if (*v440 != 543979626)
            return 1;
          *(_QWORD *)(v2 + 3592) = v440 + 1;
          *(_QWORD *)(v2 + 3600) = v439;
          *(_QWORD *)(v2 + 904) += 4;
          goto LABEL_737;
        case 2:
          if (*(_BYTE *)(v2 + 952))
          {
            if (*(_BYTE *)(v2 + 3608) || !*(_BYTE *)(v2 + 963))
              return *(_DWORD *)(v2 + 32) != 2;
            v486 = *(_QWORD *)(v2 + 3600);
            *(_QWORD *)(v2 + 3592) += v486;
            *(_QWORD *)(v2 + 3600) = 0;
            v484 = *(_QWORD *)(v2 + 904) + v486;
          }
          else
          {
            v197 = *(_QWORD *)(v2 + 920);
            v198 = *(_QWORD *)(v2 + 904);
            v199 = v197 - v198;
            v200 = *(_QWORD *)(v2 + 3600);
            v201 = v200 - (v197 - v198);
            if (v200 >= v197 - v198)
            {
              v4 = 0;
              *(_QWORD *)(v2 + 3592) += v199;
              *(_QWORD *)(v2 + 3600) = v201;
              *(_QWORD *)(v2 + 904) = v197;
              *(_DWORD *)(v2 + 3552) = 0;
              continue;
            }
            *(_QWORD *)(v2 + 1016) = v199 + 98;
            *(_QWORD *)(v2 + 3592) += v200;
            *(_QWORD *)(v2 + 3600) = 0;
            v484 = v200 + v198;
          }
          *(_QWORD *)(v2 + 904) = v484;
          goto LABEL_802;
        case 3:
          if (!*(_QWORD *)(v2 + 24))
          {
            v202 = (_QWORD *)operator new();
            *v202 = 0;
            v202[1] = v202;
            v2 = v548;
            v203 = *(_QWORD *)(v548 + 24);
            *(_QWORD *)(v548 + 24) = v202;
            v3 = v534;
            if (v203)
              MEMORY[0x23B7F8F48](v203, 0xC0C40D1025EB5);
          }
          if (*(_BYTE *)(v2 + 39))
            goto LABEL_327;
          if (*(_BYTE *)(v2 + 38))
            goto LABEL_687;
          v556[0] = 0uLL;
          v28 = sub_2367EE348(v2, v556);
          if ((_DWORD)v28)
            goto LABEL_722;
          if (v556[0].i64[1] <= 1uLL)
          {
            sub_2367EE470(v548);
            v28 = 2;
LABEL_722:
            v2 = v548;
            v3 = v534;
LABEL_723:
            if (!(_DWORD)v28)
              goto LABEL_735;
            goto LABEL_724;
          }
          if (*(unsigned __int8 *)v556[0].i64[0] != 255 || *(_BYTE *)(v556[0].i64[0] + 1) != 10)
          {
            v28 = 1;
            goto LABEL_722;
          }
          v2 = v548;
          *(_BYTE *)(v548 + 38) = 1;
          sub_2367EA5E4(v548, 2uLL);
LABEL_687:
          v550 = 0uLL;
          v28 = sub_2367EE348(v2, &v550);
          if ((_DWORD)v28)
            goto LABEL_707;
          sub_2367EE524((uint64_t *)&v552, v550, *((uint64_t *)&v550 + 1));
          v441 = (_QWORD *)v552;
          *(_OWORD *)__pd = v550;
          v551 = v550;
          sub_2367D31C0((uint64_t)&v554, (uint64_t)&v551);
          sub_2367EE5C0((unint64_t *)&v554, 8 * (v441[2] - v441[4] + v441[5]) - v441[1]);
          v556[0].i64[0] = (uint64_t)&off_2507FF5D8;
          LOWORD(v557) = 257;
          *((_QWORD *)&v557 + 1) = &v554;
          bzero(v558, 0x210uLL);
          *(uint64x2_t *)((char *)v556 + 8) = (uint64x2_t)xmmword_2368AF3F0;
          v556[1].i64[1] = 0;
          v2 = v548;
          if ((*(unsigned int (**)(uint64_t, uint64x2_t *))(*(_QWORD *)v530 + 16))(v530, v556) == -1)
          {
            sub_2367EE470(v548);
            v28 = 2;
          }
          else
          {
            v442 = sub_2367F232C((uint64_t)v441, v530);
            v28 = v442 != 0;
            if (!v442)
            {
              v443 = (_QWORD *)v552;
              v554 = *(_OWORD *)__pd;
              sub_2367D31C0((uint64_t)v556, (uint64_t)&v554);
              sub_2367EE5C0((unint64_t *)v556, 8 * (v443[2] - v443[4] + v443[5]) - v443[1]);
              v3 = v534;
              if (sub_2367F2C24((uint64_t)v556, v533))
              {
                v444 = sub_2367F232C((uint64_t)v443, v533);
                v28 = v444 != 0;
                if (!v444)
                {
                  v445 = 8 * (*(_QWORD *)(v552 + 16) - *(_QWORD *)(v552 + 32) + *(_QWORD *)(v552 + 40))
                       - *(_QWORD *)(v552 + 8);
                  sub_2367EA5E4(v548, v445 >> 3);
                  *(_QWORD *)(v548 + 3544) = v445 & 7;
                  *(_BYTE *)(v548 + 39) = 1;
                  *(_BYTE *)(v548 + 2880) = *(_BYTE *)(v548 + 1200);
                  *(_QWORD *)v522 = *(_QWORD *)v521;
                  *(_DWORD *)(v522 + 8) = *(_DWORD *)(v521 + 8);
                  *(_WORD *)(v548 + 2912) = *(_WORD *)(v548 + 1232);
                  *(_WORD *)(v548 + 2928) = *(_WORD *)(v548 + 1248);
                  *v520 = *v519;
                  *(_QWORD *)((char *)v520 + 5) = *(_QWORD *)((char *)v519 + 5);
                  v446 = *(char **)(v548 + 1272);
                  v447 = *(char **)(v548 + 1280);
                  *(_QWORD *)(v548 + 1016) = 0;
                  sub_2367C9C54(v518, v446, v447, v447 - v446);
                  v448 = *(_OWORD *)(v516 + 16);
                  *(_OWORD *)v517 = *(_OWORD *)v516;
                  *(_OWORD *)(v517 + 16) = v448;
                  *(_OWORD *)(v517 + 32) = *(_OWORD *)(v516 + 32);
                  *(_DWORD *)(v517 + 48) = *(_DWORD *)(v516 + 48);
                  *(_QWORD *)(v548 + 3040) = *(_QWORD *)(v548 + 1360);
                  *v515 = *v514;
                  *(_QWORD *)(v548 + 3080) = *(_QWORD *)(v548 + 1400);
                  *(_QWORD *)(v548 + 3096) = *(_QWORD *)(v548 + 1416);
                  *(_QWORD *)(v548 + 3112) = *(_QWORD *)(v548 + 1432);
                  *(_DWORD *)((char *)v513 + 3) = *(_DWORD *)((char *)v512 + 3);
                  *v513 = *v512;
                  *(_QWORD *)(v511 + 16) = *(_QWORD *)(v510 + 16);
                  v449 = *(_OWORD *)v510;
                  *(_DWORD *)(v509 + 16) = *(_DWORD *)(v508 + 16);
                  *(_DWORD *)(v548 + 3192) = *(_DWORD *)(v548 + 1512);
                  v450 = *(_QWORD *)(v548 + 1520);
                  v451 = *(_QWORD *)(v548 + 1528);
                  *(_OWORD *)v511 = v449;
                  *(_OWORD *)v509 = *(_OWORD *)v508;
                  sub_2367E8EB8(v507, v450, v451, 0xAAAAAAAAAAAAAAABLL * ((v451 - v450) >> 5));
                  *(_OWORD *)v506 = *(_OWORD *)v505;
                  *(_QWORD *)(v506 + 16) = *(_QWORD *)(v505 + 16);
                  *v504 = *v503;
                  *(_QWORD *)((char *)v504 + 5) = *(_QWORD *)((char *)v503 + 5);
                  *(_QWORD *)v502 = *(_QWORD *)v501;
                  *(_BYTE *)(v502 + 8) = *(_BYTE *)(v501 + 8);
                  v452 = sub_2367F4718(v530);
                  v453 = *(_BYTE *)(v548 + 1624) ? 8 * *(_DWORD *)(v548 + 1628) + 8 : *(_DWORD *)(v548 + 1632);
                  v480 = *(_QWORD *)(v548 + 3616);
                  if (!v480
                    || !v452
                    || !v453
                    || (v28 = 1, v480 > v452)
                    && v480 > v453
                    && (v481 = (v452 + 31) & 0x1FFFFFFE0, is_mul_ok(v481, v453))
                    && v481 * v453 <= v480)
                  {
                    sub_2367EE660((uint64_t *)&v552);
LABEL_327:
                    v204 = *(_DWORD *)(v2 + 1008);
                    if ((v204 & 0x40) != 0)
                    {
                      *(_DWORD *)(v2 + 1008) = v204 & 0xFFFFFFBF;
                      return 64;
                    }
                    if (!v204)
                      goto LABEL_734;
                    if (*(_BYTE *)(v2 + 41))
                    {
                      if ((v204 & 0x100) == 0)
                      {
LABEL_331:
                        if (!v204)
                          goto LABEL_734;
                        *(_BYTE *)(v2 + 42) = 1;
                        if (!*(_BYTE *)(v2 + 896) && *(_BYTE *)(v2 + 1444))
                          *(_BYTE *)(v2 + 897) = 1;
                        if ((v204 & 0x1600) == 0)
                        {
LABEL_734:
                          *(_DWORD *)(v2 + 32) = 2;
                          goto LABEL_735;
                        }
                        v532 = 0;
LABEL_337:
                        v205 = *(_DWORD *)(v2 + 3368);
                        if (v205)
                          goto LABEL_338;
                        if (*(_BYTE *)(v2 + 3374))
                          goto LABEL_734;
                        if (!*(_QWORD *)(v2 + 3296))
                        {
                          v210 = operator new();
                          sub_2367D050C(v210, v528);
                          v211 = *(uint64_t **)(v548 + 3296);
                          *(_QWORD *)(v548 + 3296) = v210;
                          if (v211)
                            sub_2367E8D14(v211);
                        }
                        v212 = operator new();
                        sub_2367D2FC4(v212, *(_QWORD *)(v548 + 3304), v533, *(_QWORD *)(v548 + 24));
                        sub_2367E8CD8(v547, v212);
                        v213 = operator new();
                        sub_2367F40C8(v213, v533);
                        v214 = *(_QWORD *)(v548 + 3352);
                        *(_QWORD *)(v548 + 3352) = v213;
                        if (v214)
                          (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
                        v552 = 0uLL;
                        v28 = sub_2367EE348(v548, &v552);
                        if ((_DWORD)v28)
                          goto LABEL_707;
                        sub_2367EE524((uint64_t *)&v554, v552, *((uint64_t *)&v552 + 1));
                        v2 = v548;
                        v215 = sub_2367D3224(*(uint64x2_t **)(v548 + 3312), (unint64_t *)v554, *(_QWORD *)(v548 + 3296), *(_BYTE *)(v548 + 897));
                        v217 = *(_QWORD *)(v554 + 24);
                        v216 = *(_QWORD *)(v554 + 32);
                        v218 = 8 * (*(_QWORD *)(v554 + 16) - v216 + *(_QWORD *)(v554 + 40)) - *(_QWORD *)(v554 + 8);
                        *(_QWORD *)(v554 + 56) = v218;
                        if (v218 > 8 * (v217 - v216) + 64 || v215 == -1)
                        {
                          sub_2367EE470(v548);
                          v28 = 2;
                          v3 = v534;
                          goto LABEL_747;
                        }
                        if (v215)
                        {
                          v28 = 1;
                          v3 = v534;
LABEL_747:
                          v461 = (uint64x2_t *)&v554;
LABEL_714:
                          sub_2367EE660(v461->i64);
                          if (!(_DWORD)v28)
                            goto LABEL_735;
                          goto LABEL_724;
                        }
                        sub_2367EA5E4(v548, v218 >> 3);
                        v219 = *(_QWORD *)(v548 + 3312);
                        v220 = *(_QWORD *)(v548 + 3352);
                        v221 = *(_OWORD *)(v219 + 68);
                        *(_OWORD *)(v220 + 8) = *(_OWORD *)(v219 + 56);
                        *(_OWORD *)(v220 + 20) = v221;
                        v222 = *(_QWORD *)(v219 + 102);
                        *(_QWORD *)(v220 + 48) = *(_QWORD *)(v219 + 96);
                        *(_QWORD *)(v220 + 54) = v222;
                        v223 = *(_QWORD *)(v219 + 112);
                        *(_DWORD *)(v220 + 72) = *(_DWORD *)(v219 + 120);
                        *(_QWORD *)(v220 + 64) = v223;
                        std::string::operator=((std::string *)(v220 + 80), (const std::string *)(v219 + 128));
                        *(_OWORD *)(v220 + 112) = *(_OWORD *)(v219 + 160);
                        v224 = *(_OWORD *)(v219 + 176);
                        v225 = *(_OWORD *)(v219 + 192);
                        v226 = *(_OWORD *)(v219 + 224);
                        *(_OWORD *)(v220 + 160) = *(_OWORD *)(v219 + 208);
                        *(_OWORD *)(v220 + 176) = v226;
                        *(_OWORD *)(v220 + 128) = v224;
                        *(_OWORD *)(v220 + 144) = v225;
                        v227 = *(_OWORD *)(v219 + 240);
                        v228 = *(_OWORD *)(v219 + 256);
                        v229 = *(_OWORD *)(v219 + 272);
                        *(_OWORD *)(v220 + 236) = *(_OWORD *)(v219 + 284);
                        *(_OWORD *)(v220 + 208) = v228;
                        *(_OWORD *)(v220 + 224) = v229;
                        *(_OWORD *)(v220 + 192) = v227;
                        *(_OWORD *)(v220 + 256) = *(_OWORD *)(v219 + 304);
                        if (v220 == v219 + 48)
                        {
                          *(_QWORD *)(v220 + 296) = *(_QWORD *)(v219 + 344);
                          v250 = *(_OWORD *)(v219 + 360);
                          *(_OWORD *)(v220 + 321) = *(_OWORD *)(v219 + 369);
                          *(_OWORD *)(v220 + 312) = v250;
                          v3 = v534;
                        }
                        else
                        {
                          sub_2367D4108((char *)(v220 + 272), *(char **)(v219 + 320), *(_QWORD *)(v219 + 328), (uint64_t)(*(_QWORD *)(v219 + 328) - *(_QWORD *)(v219 + 320)) >> 2);
                          *(_QWORD *)(v220 + 296) = *(_QWORD *)(v219 + 344);
                          v230 = *(_OWORD *)(v219 + 360);
                          *(_OWORD *)(v220 + 321) = *(_OWORD *)(v219 + 369);
                          *(_OWORD *)(v220 + 312) = v230;
                          v232 = *(_QWORD *)(v219 + 392);
                          v231 = *(_QWORD *)(v219 + 400);
                          v233 = 0xCCCCCCCCCCCCCCCDLL * ((v231 - v232) >> 3);
                          v234 = *(_QWORD *)(v220 + 360);
                          v235 = *(_QWORD *)(v220 + 344);
                          if (0xCCCCCCCCCCCCCCCDLL * ((v234 - v235) >> 3) >= v233)
                          {
                            v251 = *(_QWORD *)(v220 + 352);
                            v252 = v251 - v235;
                            v253 = 0xCCCCCCCCCCCCCCCDLL * ((v251 - v235) >> 3);
                            if (v253 >= v233)
                            {
                              if (v232 != v231)
                              {
                                do
                                {
                                  v354 = *(_OWORD *)(v232 + 8);
                                  *(_OWORD *)(v235 + 17) = *(_OWORD *)(v232 + 17);
                                  *(_OWORD *)(v235 + 8) = v354;
                                  v232 += 40;
                                  v235 += 40;
                                }
                                while (v232 != v231);
                                v251 = *(_QWORD *)(v220 + 352);
                              }
                              if (v251 != v235)
                              {
                                v355 = (void (***)(_QWORD))(v251 - 40);
                                v356 = (void (***)(_QWORD))(v251 - 40);
                                do
                                {
                                  v357 = *v356;
                                  v356 -= 5;
                                  (*v357)(v355);
                                  v185 = v355 == (void (***)(_QWORD))v235;
                                  v355 = v356;
                                }
                                while (!v185);
                              }
                              *(_QWORD *)(v220 + 352) = v235;
                            }
                            else
                            {
                              if (v251 != v235)
                              {
                                v254 = (_OWORD *)(v235 + 8);
                                v255 = (__int128 *)(v232 + 8);
                                do
                                {
                                  v256 = *v255;
                                  *(_OWORD *)((char *)v254 + 9) = *(__int128 *)((char *)v255 + 9);
                                  *v254 = v256;
                                  v254 = (_OWORD *)((char *)v254 + 40);
                                  v255 = (__int128 *)((char *)v255 + 40);
                                  v252 -= 40;
                                }
                                while (v252);
                                v235 = *(_QWORD *)(v220 + 352);
                              }
                              v257 = v232 + 40 * v253;
                              v258 = v235;
                              if (v257 != v231)
                              {
                                v258 = v235;
                                do
                                {
                                  *(_QWORD *)v258 = &off_2507FF528;
                                  v259 = *(_OWORD *)(v257 + 8);
                                  *(_OWORD *)(v258 + 17) = *(_OWORD *)(v257 + 17);
                                  *(_OWORD *)(v258 + 8) = v259;
                                  v257 += 40;
                                  v258 += 40;
                                }
                                while (v257 != v231);
                              }
                              *(_QWORD *)(v220 + 352) = v258;
                            }
                            v3 = v534;
                          }
                          else
                          {
                            v236 = (void **)(v220 + 344);
                            if (v235)
                            {
                              v237 = *(_QWORD *)(v220 + 352);
                              v238 = *(void **)(v220 + 344);
                              if (v237 != v235)
                              {
                                v239 = (void (***)(_QWORD))(v237 - 40);
                                v240 = (void (***)(_QWORD))(v237 - 40);
                                do
                                {
                                  v241 = *v240;
                                  v240 -= 5;
                                  (*v241)(v239);
                                  v185 = v239 == (void (***)(_QWORD))v235;
                                  v239 = v240;
                                }
                                while (!v185);
                                v238 = *v236;
                              }
                              *(_QWORD *)(v220 + 352) = v235;
                              operator delete(v238);
                              v234 = 0;
                              *v236 = 0;
                              *(_QWORD *)(v220 + 352) = 0;
                              *(_QWORD *)(v220 + 360) = 0;
                            }
                            if (v233 > 0x666666666666666)
                              sub_2367C3440();
                            v242 = 0xCCCCCCCCCCCCCCCDLL * (v234 >> 3);
                            v243 = 2 * v242;
                            if (2 * v242 <= v233)
                              v243 = 0xCCCCCCCCCCCCCCCDLL * ((v231 - v232) >> 3);
                            if (v242 >= 0x333333333333333)
                              v244 = 0x666666666666666;
                            else
                              v244 = v243;
                            sub_2367DC058((_QWORD *)(v220 + 344), v244);
                            for (i = *(_QWORD *)(v220 + 352); v232 != v231; i += 40)
                            {
                              *(_QWORD *)i = &off_2507FF528;
                              v246 = *(_OWORD *)(v232 + 8);
                              *(_OWORD *)(i + 17) = *(_OWORD *)(v232 + 17);
                              *(_OWORD *)(i + 8) = v246;
                              v232 += 40;
                            }
                            v3 = v534;
                            *(_QWORD *)(v220 + 352) = i;
                          }
                        }
                        *(_OWORD *)(v220 + 376) = *(_OWORD *)(v219 + 424);
                        v358 = *(_OWORD *)(v219 + 440);
                        *(_QWORD *)(v220 + 408) = *(_QWORD *)(v219 + 456);
                        *(_OWORD *)(v220 + 392) = v358;
                        v359 = *(_OWORD *)(v219 + 504);
                        v360 = *(_OWORD *)(v219 + 520);
                        v361 = *(_OWORD *)(v219 + 536);
                        *(_OWORD *)(v220 + 440) = *(_OWORD *)(v219 + 488);
                        *(_OWORD *)(v220 + 488) = v361;
                        *(_OWORD *)(v220 + 472) = v360;
                        *(_OWORD *)(v220 + 456) = v359;
                        v362 = *(_OWORD *)(v219 + 568);
                        v363 = *(_OWORD *)(v219 + 584);
                        v364 = *(_BYTE *)(v219 + 600);
                        *(_OWORD *)(v220 + 504) = *(_OWORD *)(v219 + 552);
                        *(_BYTE *)(v220 + 552) = v364;
                        *(_OWORD *)(v220 + 536) = v363;
                        *(_OWORD *)(v220 + 520) = v362;
                        *(_OWORD *)(v220 + 424) = *(_OWORD *)(v219 + 472);
                        *(_OWORD *)(v220 + 560) = *(_OWORD *)(v219 + 608);
                        memset(v558, 0, 96);
                        v557 = 0u;
                        memset(v556, 0, sizeof(v556));
                        sub_2367DC34C(v556, *(_QWORD *)(v548 + 3352));
                        v365 = *(_QWORD *)(v548 + 3616);
                        if (v365 && (_QWORD)v557 && *((_QWORD *)&v557 + 1))
                        {
                          v366 = 1;
                          if (v365 <= (unint64_t)v557)
                            goto LABEL_531;
                          v367 = 1;
                          if (v365 <= *((_QWORD *)&v557 + 1))
                            goto LABEL_536;
                          v368 = (v557 + 31) & 0xFFFFFFFFFFFFFFE0;
                          if (!is_mul_ok(v368, *((unint64_t *)&v557 + 1))
                            || v368 * *((_QWORD *)&v557 + 1) > v365)
                          {
                            goto LABEL_536;
                          }
                        }
                        if (*(_BYTE *)(v548 + 897))
                          v369 = 512;
                        else
                          v369 = 4096;
                        if ((v369 & *(_DWORD *)(v548 + 1008)) != 0 && sub_2367D3A24(*v547)
                          || (v370 = *(_QWORD *)(v548 + 3624)) != 0
                          && ((v371 = *(_QWORD *)(v548 + 3632),
                               v372 = v371 + v556[0].i64[1] * v556[0].i64[0],
                               __CFADD__(v371, v556[0].i64[1] * v556[0].i64[0]))
                           || (*(_QWORD *)(v548 + 3632) = v372, v372 > v370)))
                        {
                          v366 = 1;
LABEL_531:
                          v367 = 1;
LABEL_536:
                          sub_2367EE660((uint64_t *)&v554);
                          v532 = v367;
LABEL_537:
                          if (v366 == 3)
                            goto LABEL_601;
                          v28 = v532;
                          if (!v532)
                          {
LABEL_735:
                            if (!*(_BYTE *)(v2 + 952) && (*(_BYTE *)(v2 + 1009) & 0x40) != 0)
                            {
LABEL_737:
                              v4 = 2;
                              goto LABEL_738;
                            }
                            return *(_DWORD *)(v2 + 32) != 2;
                          }
LABEL_724:
                          if ((_DWORD)v28 != 2)
                            goto LABEL_788;
LABEL_725:
                          if (*(_QWORD *)(v2 + 904) != *(_QWORD *)(v2 + 920))
                            goto LABEL_802;
                          v4 = *(unsigned __int8 *)(v2 + 952);
                          if (*(_BYTE *)(v2 + 952))
                            goto LABEL_802;
LABEL_738:
                          *(_DWORD *)(v2 + 3552) = v4;
                          continue;
                        }
                        v373 = *(_QWORD *)(*(_QWORD *)(v548 + 3312) + 40);
                        *(_QWORD *)(v548 + 3360) = v373;
                        *(_DWORD *)(v548 + 3368) = 1;
                        if (*(_BYTE *)(v548 + 897))
                        {
                          if ((*(_BYTE *)(v548 + 1009) & 2) == 0)
                          {
                            *(_DWORD *)(v548 + 3368) = 0;
                            sub_2367EA5E4(v548, v373);
                            *(_WORD *)(v548 + 896) = 1;
                          }
                          v366 = 3;
                          v367 = v532;
                          goto LABEL_536;
                        }
                        v413 = *(_QWORD *)(v548 + 3352);
                        LODWORD(v550) = sub_2367DC7DC(v413);
                        v414 = *(unsigned __int8 *)(v413 + 392);
                        *(_BYTE *)(v548 + 3374) = v414;
                        if (v414)
                          v415 = 1;
                        else
                          v415 = *(_DWORD *)(v413 + 376) != 0;
                        *(_BYTE *)(v548 + 3373) = v415;
                        if (*(_BYTE *)(v548 + 1003))
                          v423 = 0;
                        else
                          v423 = *(_DWORD *)(v413 + 16) == 0;
                        v424 = v415 || v423;
                        *(_BYTE *)(v548 + 3373) = v424;
                        v425 = *(_QWORD *)(v548 + 3392);
                        *(_QWORD *)&v551 = v425;
                        v426 = *(_QWORD *)(v548 + 3400);
                        if (v424)
                        {
                          *(_QWORD *)(v548 + 3400) = v426 + 1;
                          *(_QWORD *)(v548 + 3392) = v425 + 1;
                          v427 = *(_QWORD *)(v548 + 3376);
                          if (v427)
                          {
                            *(_BYTE *)(v548 + 3384) = 1;
                            *(_QWORD *)(v548 + 3376) = v427 - 1;
                            goto LABEL_645;
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v548 + 3392) = v425 + 1;
                          if (*(_QWORD *)(v548 + 3376))
                          {
                            *(_BYTE *)(v548 + 3384) = 1;
                            goto LABEL_645;
                          }
                        }
                        *(_BYTE *)(v548 + 3384) = 0;
LABEL_645:
                        if (v426 >= (uint64_t)(*(_QWORD *)(v548 + 3464) - *(_QWORD *)(v548 + 3456)) >> 3)
                          sub_2367EE994(v499, &v551);
                        if (v425 >= (uint64_t)(*(_QWORD *)(v548 + 3440) - *(_QWORD *)(v548 + 3432)) >> 2)
                        {
                          sub_2367EEA6C(v498, &v550);
                          v549 = 255;
                          sub_2367EEA6C((uint64_t)v529, &v549);
                        }
                        if (!*(_BYTE *)(v548 + 3384))
                          goto LABEL_838;
                        v428 = *(_QWORD *)(v548 + 3352);
                        v429 = *(_DWORD *)(v428 + 16);
                        v430 = !*(_BYTE *)(v428 + 392)
                            && v429 != 1
                            && (!*(_DWORD *)(v428 + 376) || *(_DWORD *)(v428 + 396))
                            || v429 == 1;
                        v431 = *(_QWORD *)(v548 + 3480);
                        if (v425 < *(_QWORD *)(v548 + 3488) - v431 && !*(_BYTE *)(v431 + v425))
                          v430 = 0;
                        if (!v430)
                        {
                          *(_DWORD *)(v548 + 3368) = 0;
                          sub_2367EA5E4(v548, *(_QWORD *)(v548 + 3360));
                          v366 = 3;
                        }
                        else
                        {
LABEL_838:
                          if ((*(_BYTE *)(v548 + 1009) & 4) == 0 || *(_BYTE *)(v548 + 3384) || !*(_BYTE *)(v548 + 3373))
                          {
                            sub_2367EE660((uint64_t *)&v554);
                            v205 = *(_DWORD *)(v548 + 3368);
LABEL_338:
                            if (v205 != 2)
                            {
                              if (v205 != 1)
                                goto LABEL_595;
                              v206 = *(_QWORD *)(v2 + 3312);
                              *(_WORD *)(v206 + 1328) = *(_WORD *)(v2 + 1002);
                              if (!*(_BYTE *)(v2 + 897) && (*(_BYTE *)(v2 + 1009) & 0x80) != 0)
                              {
                                v412 = sub_2367EEB44(v206, *(_DWORD *)(v2 + 1040));
                                v2 = v548;
                                *(_DWORD *)(v548 + 1044) = v412;
                                v206 = *(_QWORD *)(v548 + 3312);
                              }
                              else
                              {
                                *(_DWORD *)(v2 + 1044) = 0;
                              }
                              *(_BYTE *)(v2 + 3372) = 0;
                              *(_QWORD *)(v2 + 3320) = 0;
                              *(_QWORD *)(v2 + 3336) = *(_QWORD *)(v2 + 3328);
                              v208 = *(_QWORD *)(v206 + 16);
                              v207 = *(_QWORD *)(v206 + 24);
                              v556[0].i8[0] = 0;
                              v209 = v207 - v208;
                              if (v209)
                              {
                                sub_2367C8504(v546, v209 >> 4, v556);
                                v2 = v548;
                              }
                              if (!*(_BYTE *)(v2 + 897) && (*(_BYTE *)(v2 + 1009) & 0x10) == 0)
                              {
                                v3 = v534;
                                if (!*(_BYTE *)(v2 + 3374))
                                {
                                  *(_DWORD *)(v2 + 3368) = 0;
                                  sub_2367EA5E4(v2, *(_QWORD *)(v2 + 3360));
                                  goto LABEL_601;
                                }
                                goto LABEL_734;
                              }
                              *(_DWORD *)(v2 + 3368) = 2;
                            }
                            if (*(_BYTE *)(v2 + 1056))
                            {
                              v556[0].i64[0] = 0;
                              *(_QWORD *)&v554 = 0;
                              sub_2367EEDB4(v2, v556[0].i64, (uint64_t *)&v554);
                              v247 = *(_QWORD *)(v2 + 1152);
                              v248 = *(unsigned int *)(v2 + 1132);
                              if ((_DWORD)v247 == 2)
                              {
                                v249 = HIDWORD(v247);
                              }
                              else if ((_DWORD)v247 == 1)
                              {
                                v249 = *(unsigned int *)(v2 + 1220);
                              }
                              else if ((_DWORD)v247 || v248 >= 6)
                              {
                                v249 = 0;
                              }
                              else
                              {
                                v249 = dword_236922648[v248];
                              }
                              v260 = *(int8x16_t ***)(v2 + 3312);
                              v261 = *(int8x16_t *)(v2 + 1072);
                              v262 = *(int8x16_t *)(v2 + 1088);
                              v263 = *(_QWORD *)(v2 + 1064);
                              v264 = *(_QWORD *)(v2 + 1120);
                              v265 = v556[0].i64[0];
                              v266 = v554;
                              v267 = *(unsigned int *)(v2 + 1128);
                              v268 = *(_QWORD *)(v2 + 1136);
                              v269 = *(_QWORD *)(v2 + 1144);
                              v270 = *(unsigned __int8 *)(v2 + 1001);
                              v271 = *(unsigned __int8 *)(v2 + 1000);
                              v272 = *v260;
                              v272[270].i64[0] = v556[0].i64[0];
                              v272[270].i64[1] = v266;
                              v272[271].i32[0] = v267;
                              v272[271].i32[1] = v248;
                              v272[271].i64[1] = v268;
                              v272[272].i64[0] = v269;
                              v273 = *v260;
                              v273[272].i64[1] = v249;
                              v273[273] = v261;
                              v273[274] = v262;
                              v274 = *v260;
                              v274[275].i64[0] = v263;
                              v274[275].i64[1] = v264;
                              v275 = 1;
                              if (!(_DWORD)v248)
                                v275 = 2;
                              if ((_DWORD)v248 == 2)
                                v276 = 0;
                              else
                                v276 = v275;
                              v277 = (v265 << v276) * v267;
                              if (v269 >= 2)
                                v277 = (v269 + v277 - 1) / v269 * v269;
                              v274[276].i64[0] = v277;
                              v278 = v260[96][5].i64[1];
                              for (j = *(_QWORD *)(v278 + 328); j != *(_QWORD *)(v278 + 336); j += 96)
                              {
                                if (!*(_DWORD *)(j + 12))
                                {
                                  if (*(_BYTE *)(j + 72))
                                    v280 = v270 == 0;
                                  else
                                    v280 = 1;
                                  if (!v280)
                                    v274[278].i8[1] = 1;
                                  break;
                                }
                              }
                              if (!v271)
                              {
                                v281 = *(_DWORD *)(v278 + 248);
                                v274[278].i32[1] = v281;
                                if (v281 >= 5)
                                  v274[270] = vextq_s8(v274[270], v274[270], 8uLL);
                              }
                              v274[277].i64[0] = v274[276].i64[1];
                              v282 = *(_QWORD *)(v2 + 1168);
                              if (*(_QWORD *)(v2 + 1176) != v282)
                              {
                                v283 = 0;
                                v536 = v265;
                                do
                                {
                                  v284 = (unsigned int *)(v282 + 40 * v283);
                                  v285 = *(_QWORD *)(v2 + 1152);
                                  if ((_DWORD)v285 == 2)
                                  {
                                    v287 = HIDWORD(v285);
                                  }
                                  else if ((_DWORD)v285 == 1)
                                  {
                                    v287 = *(unsigned int *)(*(_QWORD *)(v2 + 1520) + 96 * v283 + 28);
                                  }
                                  else if ((_DWORD)v285 || (v286 = v284[1], v286 >= 6))
                                  {
                                    v287 = 0;
                                  }
                                  else
                                  {
                                    v287 = dword_236922648[v286];
                                  }
                                  v288 = *v284;
                                  v289 = v284[1];
                                  v290 = *((_QWORD *)v284 + 2);
                                  v291 = 1;
                                  if (!v289)
                                    v291 = 2;
                                  if (v289 == 2)
                                    v291 = 0;
                                  v292 = (v265 << v291) * v288;
                                  if (v290 >= 2)
                                    v292 = (v290 + v292 - 1) / v290 * v290;
                                  v293 = v282 + 40 * v283;
                                  v295 = *(_QWORD *)(v293 + 24);
                                  v294 = *(_QWORD *)(v293 + 32);
                                  v296 = *((_QWORD *)v284 + 1);
                                  v297 = *(_QWORD **)*v547;
                                  v298 = v297[554];
                                  v299 = v297[555];
                                  if (v298 >= v299)
                                  {
                                    v301 = v297[553];
                                    v302 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v298 - v301) >> 3);
                                    v303 = v302 + 1;
                                    if ((unint64_t)(v302 + 1) > 0x2E8BA2E8BA2E8BALL)
                                      sub_2367C3440();
                                    v304 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v299 - v301) >> 3);
                                    if (2 * v304 > v303)
                                      v303 = 2 * v304;
                                    if (v304 >= 0x1745D1745D1745DLL)
                                      v305 = 0x2E8BA2E8BA2E8BALL;
                                    else
                                      v305 = v303;
                                    if (v305)
                                    {
                                      v539 = v296;
                                      __pa = v288;
                                      if (v305 > 0x2E8BA2E8BA2E8BALL)
                                        sub_2367C3488();
                                      v306 = v294;
                                      v307 = v305;
                                      v308 = (char *)operator new(88 * v305);
                                      v294 = v306;
                                      v296 = v539;
                                      LODWORD(v288) = __pa;
                                    }
                                    else
                                    {
                                      v308 = 0;
                                      v307 = 0;
                                    }
                                    v309 = &v308[88 * v302];
                                    *(_DWORD *)v309 = v288;
                                    *((_DWORD *)v309 + 1) = v289;
                                    *((_QWORD *)v309 + 1) = v296;
                                    *((_QWORD *)v309 + 2) = v290;
                                    *((_QWORD *)v309 + 3) = v287;
                                    *((_OWORD *)v309 + 2) = 0u;
                                    *((_OWORD *)v309 + 3) = 0u;
                                    *((_QWORD *)v309 + 8) = v295;
                                    *((_QWORD *)v309 + 9) = v294;
                                    *((_QWORD *)v309 + 10) = v292;
                                    v310 = (char *)v297[554];
                                    v311 = (char *)v297[553];
                                    v312 = v309;
                                    if (v310 == v311)
                                    {
                                      v265 = v536;
                                    }
                                    else
                                    {
                                      v265 = v536;
                                      do
                                      {
                                        v313 = *(_OWORD *)(v310 - 88);
                                        *(_OWORD *)(v312 - 72) = *(_OWORD *)(v310 - 72);
                                        *(_OWORD *)(v312 - 88) = v313;
                                        v314 = *(_OWORD *)(v310 - 56);
                                        v315 = *(_OWORD *)(v310 - 40);
                                        v316 = *(_OWORD *)(v310 - 24);
                                        *((_QWORD *)v312 - 1) = *((_QWORD *)v310 - 1);
                                        *(_OWORD *)(v312 - 24) = v316;
                                        *(_OWORD *)(v312 - 40) = v315;
                                        *(_OWORD *)(v312 - 56) = v314;
                                        v312 -= 88;
                                        v310 -= 88;
                                      }
                                      while (v310 != v311);
                                      v310 = (char *)v297[553];
                                    }
                                    v297[553] = v312;
                                    v300 = v309 + 88;
                                    v297[554] = v309 + 88;
                                    v297[555] = &v308[88 * v307];
                                    if (v310)
                                      operator delete(v310);
                                    v2 = v548;
                                  }
                                  else
                                  {
                                    *(_DWORD *)v298 = v288;
                                    *(_DWORD *)(v298 + 4) = v289;
                                    *(_QWORD *)(v298 + 8) = v296;
                                    *(_QWORD *)(v298 + 16) = v290;
                                    *(_QWORD *)(v298 + 24) = v287;
                                    *(_OWORD *)(v298 + 32) = 0u;
                                    *(_OWORD *)(v298 + 48) = 0u;
                                    *(_QWORD *)(v298 + 64) = v295;
                                    *(_QWORD *)(v298 + 72) = v294;
                                    v300 = (char *)(v298 + 88);
                                    *(_QWORD *)(v298 + 80) = v292;
                                  }
                                  v297[554] = v300;
                                  ++v283;
                                  v282 = *(_QWORD *)(v2 + 1168);
                                }
                                while (v283 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v2 + 1176) - v282) >> 3));
                              }
                            }
                            else
                            {
                              if (*(_BYTE *)(v2 + 897))
                                return 3;
                              if (*(_BYTE *)(v2 + 3373) && !*(_BYTE *)(v2 + 3384))
                                return 5;
                            }
                            v317 = sub_2367D8864(*(_QWORD **)(v2 + 3312));
                            v556[0] = 0uLL;
                            v28 = sub_2367EE348(v2, v556);
                            if ((_DWORD)v28)
                              goto LABEL_707;
                            v527 = v317;
                            v318 = *(_QWORD *)(v548 + 3312);
                            v319 = *(_QWORD *)(v548 + 3320);
                            v321 = *(_QWORD *)(v318 + 16);
                            v320 = *(_QWORD *)(v318 + 24);
                            if (v319 >= (v320 - v321) >> 4)
                            {
                              v323 = 0;
                              v351 = 0;
                              v324 = 0;
                              v325 = 0;
                              v352 = *(_QWORD *)(v548 + 3312);
                              v353 = v352;
                              goto LABEL_541;
                            }
                            v537 = *(_QWORD *)(v548 + 3312);
                            v540 = 0;
                            v322 = 0;
                            v323 = 0;
                            __pb = 0;
                            v324 = 0;
                            v325 = 0;
                            v326 = 0;
                            while (1)
                            {
                              v327 = (_QWORD *)(v321 + 16 * v319);
                              if (*(_BYTE *)(*v546 + v319))
                              {
                                v328 = *v327 + v326;
                              }
                              else
                              {
                                v329 = v325;
                                v330 = v322;
                                v331 = *v327;
                                v328 = *v327 + v326;
                                v332 = __CFADD__(*v327, v326);
                                if (v328 > v556[0].i64[1] || v332)
                                {
                                  v325 = v329;
LABEL_540:
                                  v352 = *v547;
                                  v353 = v537;
                                  v351 = __pb;
LABEL_541:
                                  __pc = v351;
                                  v374 = sub_2367D426C(v352, (uint64_t)v325, 0xAAAAAAAAAAAAAAABLL * (v324 - v325), v351);
                                  if (v325 == v324)
                                  {
                                    v375 = 0;
                                  }
                                  else
                                  {
                                    v375 = 0;
                                    v376 = v325;
                                    do
                                    {
                                      v377 = (_QWORD *)*v376;
                                      v376 += 3;
                                      v379 = v377[3];
                                      v378 = v377[4];
                                      v380 = 8 * (v377[2] - v378 + v377[5]) - v377[1];
                                      v377[7] = v380;
                                      v375 |= v380 > 8 * (v379 - v378) + 64;
                                      MEMORY[0x23B7F8F48]();
                                    }
                                    while (v376 != v324);
                                  }
                                  v381 = 1;
                                  if ((v375 & 1) != 0)
                                  {
                                    v382 = v532;
                                    goto LABEL_562;
                                  }
                                  v382 = v532;
                                  if (v374)
                                    goto LABEL_562;
                                  if (v323 == __pc)
                                  {
LABEL_554:
                                    v387 = *(_QWORD *)(v548 + 3328);
                                    v388 = *(_QWORD *)(v548 + 3336) - v387;
                                    v389 = *(_QWORD *)(v548 + 3320);
                                    if (v389 >= v388)
                                    {
                                      v390 = 0;
                                    }
                                    else
                                    {
                                      v390 = 0;
                                      v391 = 16 * v389;
                                      do
                                      {
                                        if (*(_BYTE *)(v387 + v389) != 1)
                                          break;
                                        v390 += *(_QWORD *)(*(_QWORD *)(v353 + 16) + v391);
                                        *(_QWORD *)(v548 + 3320) = ++v389;
                                        v391 += 16;
                                      }
                                      while (v389 < v388);
                                    }
                                    *(_QWORD *)(v548 + 3360) -= v390;
                                    sub_2367EA5E4(v548, v390);
                                    v381 = 0;
LABEL_562:
                                    v385 = __pc;
                                    if (__pc)
                                      goto LABEL_563;
                                    goto LABEL_564;
                                  }
                                  v383 = 0;
                                  v384 = v325 + 2;
                                  while (2)
                                  {
                                    v385 = __pc;
                                    v386 = *(_DWORD *)&__pc[4 * v383];
                                    if (v386 == 1)
                                    {
LABEL_553:
                                      ++v383;
                                      v384 += 3;
                                      if (v383 >= (v323 - __pc) >> 2)
                                        goto LABEL_554;
                                      continue;
                                    }
                                    break;
                                  }
                                  if (!v386)
                                  {
                                    *(_BYTE *)(*v546 + *v384) = 1;
                                    goto LABEL_553;
                                  }
                                  v381 = 1;
LABEL_563:
                                  operator delete(v385);
LABEL_564:
                                  if (v325)
                                    operator delete(v325);
                                  if (v381)
                                    return 1;
                                  v392 = *v547;
                                  v393 = (uint64_t)(*(_QWORD *)(*v547 + 24) - *(_QWORD *)(*v547 + 16)) >> 4;
                                  v394 = *(_QWORD *)(*v547 + 1416);
                                  v395 = v393 != v394 && *(_BYTE *)(v392 + 1410) != 0;
                                  v396 = *(_DWORD *)(v548 + 1044);
                                  if (v396 >= 1)
                                  {
                                    v397 = !v395;
                                    if (*(_BYTE *)(v548 + 3372))
                                      v397 = 1;
                                    if ((v397 & 1) == 0)
                                    {
                                      *(_BYTE *)(v548 + 3372) = 1;
                                      *(_QWORD *)(v548 + 1048) = 8;
                                      return 0x8000;
                                    }
                                  }
                                  v398 = *(unsigned __int8 **)(v392 + 1360);
                                  v399 = *(unsigned __int8 **)(v392 + 1368);
                                  v400 = v398 + 1;
                                  v401 = v398 == v399 || v400 == v399;
                                  v402 = v401;
                                  v403 = *(unsigned __int8 **)(v392 + 1360);
                                  if (!v401)
                                  {
                                    v404 = *v398;
                                    v405 = v398 + 1;
                                    v403 = *(unsigned __int8 **)(v392 + 1360);
                                    v406 = v398 + 1;
                                    do
                                    {
                                      v408 = *v406++;
                                      v407 = v408;
                                      if (v408 < v404)
                                      {
                                        v404 = v407;
                                        v403 = v405;
                                      }
                                      v405 = v406;
                                    }
                                    while (v406 != v399);
                                  }
                                  if (v393 != v394)
                                  {
                                    if (v396 < 2 || v527 > *v403)
                                    {
                                      sub_2367EE470(v548);
                                      v2 = v548;
                                      v3 = v534;
                                      goto LABEL_725;
                                    }
                                    v487 = *(_DWORD **)(v548 + 3352);
                                    if ((v402 & 1) == 0)
                                    {
                                      v488 = *v398;
                                      v489 = v398 + 1;
                                      do
                                      {
                                        v491 = *v489++;
                                        v490 = v491;
                                        if (v491 < v488)
                                        {
                                          v488 = v490;
                                          v398 = v400;
                                        }
                                        v400 = v489;
                                      }
                                      while (v489 != v399);
                                    }
                                    v492 = *v398;
                                    if (v487[28] <= v492)
                                    {
                                      v495 = 1;
                                    }
                                    else
                                    {
                                      v493 = v487[29];
                                      if ((_DWORD)v493)
                                      {
                                        v494 = v487 + 30;
                                        v495 = 8;
                                        do
                                        {
                                          if (v494[11] < v492 && *v494 < v495)
                                            v495 = *v494;
                                          ++v494;
                                          --v493;
                                        }
                                        while (v493);
                                      }
                                      else
                                      {
                                        v495 = 8;
                                      }
                                    }
                                    *(_QWORD *)(v548 + 1048) = v495;
                                    return 0x8000;
                                  }
                                  if (!*(_BYTE *)(v548 + 897))
                                  {
                                    if (*(_BYTE *)(v392 + 1424) || !*(_BYTE *)(v392 + 1408) || !*(_BYTE *)(v392 + 1409))
                                      goto LABEL_588;
                                    for (k = *(_BYTE **)(v392 + 1384); k != *(_BYTE **)(v392 + 1392); ++k)
                                    {
                                      if (!*k)
                                        goto LABEL_588;
                                    }
                                    if (v398 == v399)
                                      goto LABEL_621;
                                    v416 = *(_DWORD *)(v392 + 160);
                                    do
                                      v417 = *(v400 - 1);
                                    while (v416 <= v417 && v400++ != v399);
                                    if (v416 <= v417)
                                    {
LABEL_621:
                                      v419 = *(_DWORD *)(v392 + 64);
                                      if (v419 == 3 || v419 == 0)
                                      {
                                        if (*(_BYTE *)(v392 + 304) || (v409 = *(_DWORD *)(v392 + 360)) != 0)
                                          v409 = 1 << *(_DWORD *)(v392 + 372);
                                        for (m = *(_QWORD *)(v392 + 392); m != *(_QWORD *)(v392 + 400); m += 40)
                                        {
                                          if (*(unsigned __int8 *)(v392 + 304) | *(_DWORD *)(m + 8))
                                            v422 = 1 << *(_DWORD *)(m + 20);
                                          else
                                            v422 = 0;
                                          v409 |= v422;
                                        }
                                      }
                                      else
                                      {
                                        v409 = 0;
                                      }
                                      v432 = *(_QWORD *)(v392 + 72);
                                      if ((v432 & 2) != 0)
                                      {
                                        v433 = *(_QWORD *)(*(_QWORD *)v392 + 4208);
                                        v434 = *(int **)(v433 + 1288);
                                        v435 = *(int **)(v433 + 1296);
                                        if (v434 == v435)
                                        {
                                          v436 = 0;
                                        }
                                        else
                                        {
                                          v436 = 0;
                                          do
                                          {
                                            v437 = *v434;
                                            v434 += 10;
                                            v436 |= 1 << v437;
                                          }
                                          while (v434 != v435);
                                        }
                                        v409 |= v436;
                                      }
                                      if ((v432 & 0x20) != 0)
                                        v409 |= 16 << *(_DWORD *)(v392 + 452);
                                    }
                                    else
                                    {
LABEL_588:
                                      v409 = 0;
                                    }
                                    *(_DWORD *)(*v529 + 4 * (*(_QWORD *)(v548 + 3392) - 1)) = v409;
                                  }
                                  v532 = v382;
                                  if (sub_2367D6954(v392))
                                    return 1;
                                  v2 = v548;
                                  if (*(_BYTE *)(v548 + 897) || *(_BYTE *)(v548 + 3373))
                                  {
                                    *(_BYTE *)(v548 + 1056) = 0;
                                    *(_QWORD *)(v548 + 1176) = *(_QWORD *)(v548 + 1168);
                                  }
                                  v3 = v534;
LABEL_595:
                                  *(_DWORD *)(v2 + 3368) = 0;
                                  v410 = *(uint64_t **)(v2 + 3296);
                                  *(_QWORD *)(v2 + 3296) = 0;
                                  if (v410)
                                    sub_2367E8D14(v410);
                                  if (*(_BYTE *)(v2 + 897))
                                  {
                                    *(_WORD *)(v2 + 896) = 1;
                                    *(_DWORD *)(v2 + 1008) &= ~0x200u;
                                    return 512;
                                  }
                                  if (*(_BYTE *)(v2 + 3373)
                                    && (*(_BYTE *)(v2 + 1009) & 0x10) != 0
                                    && !*(_BYTE *)(v2 + 3384))
                                  {
                                    return 4096;
                                  }
LABEL_601:
                                  if ((*(_BYTE *)(v2 + 1009) & 0x16) == 0)
                                    goto LABEL_734;
                                  goto LABEL_337;
                                }
                                v333 = v327[1];
                                v334 = operator new();
                                *(_QWORD *)&v554 = v556[0].i64[0] + v326;
                                *((_QWORD *)&v554 + 1) = v331;
                                sub_2367D31C0(v334, (uint64_t)&v554);
                                if ((unint64_t)v324 >= v540)
                                {
                                  v336 = 0xAAAAAAAAAAAAAAABLL * (v324 - v329) + 1;
                                  if (v336 > 0xAAAAAAAAAAAAAAALL)
                                    sub_2367C3440();
                                  v322 = v330;
                                  if (0x5555555555555556 * ((uint64_t)(v540 - (_QWORD)v329) >> 3) > v336)
                                    v336 = 0x5555555555555556 * ((uint64_t)(v540 - (_QWORD)v329) >> 3);
                                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v540 - (_QWORD)v329) >> 3) >= 0x555555555555555)
                                    v337 = 0xAAAAAAAAAAAAAAALL;
                                  else
                                    v337 = v336;
                                  v338 = v329;
                                  if (v337)
                                    v337 = (unint64_t)sub_2367D1EBC(v337);
                                  else
                                    v339 = 0;
                                  v340 = (uint64_t *)(v337 + 8 * (v324 - v329));
                                  *v340 = v334;
                                  v340[1] = v333;
                                  v340[2] = v319;
                                  if (v324 == v329)
                                  {
                                    v343 = v324;
                                    v325 = (uint64_t *)(v337 + 8 * (v324 - v329));
                                    v335 = __pb;
                                  }
                                  else
                                  {
                                    v341 = (char *)(v337 + 8 * (v324 - v329));
                                    v335 = __pb;
                                    do
                                    {
                                      v342 = *(_OWORD *)(v324 - 3);
                                      *((_QWORD *)v341 - 1) = *(v324 - 1);
                                      *(_OWORD *)(v341 - 24) = v342;
                                      v341 -= 24;
                                      v324 -= 3;
                                    }
                                    while (v324 != v338);
                                    v343 = v338;
                                    v325 = (uint64_t *)v341;
                                  }
                                  v540 = v337 + 24 * v339;
                                  v324 = v340 + 3;
                                  if (v343)
                                    operator delete(v343);
                                }
                                else
                                {
                                  *v324 = v334;
                                  v324[1] = v333;
                                  v324[2] = v319;
                                  v324 += 3;
                                  v322 = v330;
                                  v325 = v329;
                                  v335 = __pb;
                                }
                                if ((unint64_t)v323 >= v322)
                                {
                                  v345 = (v323 - v335) >> 2;
                                  v346 = v345 + 1;
                                  if ((unint64_t)(v345 + 1) >> 62)
                                    sub_2367C3440();
                                  if ((uint64_t)(v322 - (_QWORD)v335) >> 1 > v346)
                                    v346 = (uint64_t)(v322 - (_QWORD)v335) >> 1;
                                  if (v322 - (unint64_t)v335 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v347 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v347 = v346;
                                  if (v347)
                                  {
                                    v347 = (unint64_t)sub_2367C3454(v347);
                                    v335 = __pb;
                                  }
                                  else
                                  {
                                    v348 = 0;
                                  }
                                  v349 = (char *)(v347 + 4 * v345);
                                  *(_DWORD *)v349 = 0;
                                  v344 = v349 + 4;
                                  while (v323 != v335)
                                  {
                                    v350 = *((_DWORD *)v323 - 1);
                                    v323 -= 4;
                                    *((_DWORD *)v349 - 1) = v350;
                                    v349 -= 4;
                                  }
                                  v322 = v347 + 4 * v348;
                                  if (v335)
                                    operator delete(v335);
                                  __pb = v349;
                                }
                                else
                                {
                                  *(_DWORD *)v323 = 0;
                                  v344 = v323 + 4;
                                }
                                v321 = *(_QWORD *)(v537 + 16);
                                v320 = *(_QWORD *)(v537 + 24);
                                v323 = v344;
                              }
                              ++v319;
                              v326 = v328;
                              if (v319 >= (v320 - v321) >> 4)
                                goto LABEL_540;
                            }
                          }
                          v532 = 1024;
                          v366 = 1;
                        }
                        sub_2367EE660((uint64_t *)&v554);
                        goto LABEL_537;
                      }
LABEL_809:
                      *(_DWORD *)(v2 + 1008) = v204 & 0xFFFFFEFF;
                      return 256;
                    }
                    if (*(_BYTE *)(v2 + 40))
                    {
LABEL_695:
                      v551 = 0uLL;
                      v28 = sub_2367EE348(v2, &v551);
                      if (!(_DWORD)v28)
                      {
                        sub_2367EE524(v556[0].i64, v551, *((uint64_t *)&v551 + 1));
                        v2 = v548;
                        sub_2367EE5C0((unint64_t *)v556[0].i64[0], *(_QWORD *)(v548 + 3544));
                        v3 = v534;
                        if (!*(_BYTE *)(v548 + 1249))
                          goto LABEL_760;
                        v454 = sub_2367F4EFC(v524, (unint64_t *)v556[0].i64[0], *(_QWORD *)(v548 + 3616));
                        v455 = (unint64_t *)v556[0].i64[0];
                        v457 = *(_QWORD *)(v556[0].i64[0] + 24);
                        v456 = *(_QWORD *)(v556[0].i64[0] + 32);
                        v458 = 8 * (*(_QWORD *)(v556[0].i64[0] + 16) - v456 + *(_QWORD *)(v556[0].i64[0] + 40))
                             - *(_QWORD *)(v556[0].i64[0] + 8);
                        *(_QWORD *)(v556[0].i64[0] + 56) = v458;
                        if (v458 > 8 * (v457 - v456) + 64 || v454 == -1)
                        {
                          sub_2367EE470(v548);
                          sub_2367EE660(v556[0].i64);
                          goto LABEL_725;
                        }
                        if (v454)
                          goto LABEL_814;
                        v554 = 0uLL;
                        __src = 0;
                        v459 = sub_2367F5214(v524, v455, (uint64_t)&v554);
                        if (v459)
                        {
                          if (v459 == -1)
                          {
                            sub_2367EE470(v548);
                            v460 = 0;
                            v28 = 2;
                            goto LABEL_755;
                          }
                        }
                        else if ((_QWORD)v554)
                        {
                          v552 = 0uLL;
                          v553 = 0;
                          sub_2367C9D5C((uint64_t)&v552, 0, (char *)__src, (char *)__src + v554, v554);
                          v465 = (_OWORD *)v497;
                          v466 = *(void **)v497;
                          if (*(_QWORD *)v497)
                          {
                            *(_QWORD *)(v548 + 1280) = v466;
                            operator delete(v466);
                            v465 = (_OWORD *)v497;
                            *(_QWORD *)v497 = 0;
                            *(_QWORD *)(v497 + 8) = 0;
                            *(_QWORD *)(v497 + 16) = 0;
                          }
                          v28 = 0;
                          *v465 = v552;
                          *(_QWORD *)(v548 + 1288) = v553;
                          *(_BYTE *)(v548 + 1268) = 0;
                          v460 = 1;
                          *(_BYTE *)(v548 + 1249) = 1;
LABEL_755:
                          v467 = __src;
                          __src = 0;
                          if (v467)
                          {
                            v468 = -*(v467 - 3);
                            do
                              v469 = __ldaxr(&qword_2564313D8);
                            while (__stlxr(v469 + v468, &qword_2564313D8));
                            free((void *)*(v467 - 4));
                          }
                          if ((v460 & 1) == 0)
                          {
                            v461 = v556;
                            goto LABEL_714;
                          }
LABEL_760:
                          *(_BYTE *)(v548 + 41) = 1;
                          if (!sub_2367EE6EC((unint64_t *)v556[0].i64[0]))
                          {
                            sub_2367EA5E4(v548, (unint64_t)(8* (*(_QWORD *)(v556[0].i64[0] + 16)- *(_QWORD *)(v556[0].i64[0] + 32)+ *(_QWORD *)(v556[0].i64[0] + 40))- *(_QWORD *)(v556[0].i64[0] + 8)) >> 3);
                            *(_QWORD *)(v548 + 3544) = 0;
                            v470 = *(_QWORD *)(v548 + 3304);
                            if (!v470)
                            {
                              v471 = (void *)operator new();
                              bzero(v471, 0x16F8uLL);
                              sub_2367EE784((uint64_t)v471);
                              sub_2367E8C9C(v500, (uint64_t)v471);
                              v470 = *v500;
                            }
                            if (!sub_2367E7864(v470 + 4944, v533))
                            {
                              v472 = *(float *)(v548 + 1004);
                              if (v472 > 0.0)
                                *(float *)(*v500 + 5808) = v472;
                              *(_BYTE *)(v548 + 2880) = *(_BYTE *)(v548 + 1200);
                              *(_QWORD *)v522 = *(_QWORD *)v521;
                              *(_DWORD *)(v522 + 8) = *(_DWORD *)(v521 + 8);
                              *(_WORD *)(v548 + 2912) = *(_WORD *)(v548 + 1232);
                              *(_WORD *)(v548 + 2928) = *(_WORD *)(v548 + 1248);
                              *v520 = *v519;
                              *(_QWORD *)((char *)v520 + 5) = *(_QWORD *)((char *)v519 + 5);
                              sub_2367C9C54(v518, *(char **)(v548 + 1272), *(char **)(v548 + 1280), *(_QWORD *)(v548 + 1280) - *(_QWORD *)(v548 + 1272));
                              v473 = *(_OWORD *)(v516 + 16);
                              *(_OWORD *)v517 = *(_OWORD *)v516;
                              *(_OWORD *)(v517 + 16) = v473;
                              *(_OWORD *)(v517 + 32) = *(_OWORD *)(v516 + 32);
                              *(_DWORD *)(v517 + 48) = *(_DWORD *)(v516 + 48);
                              *(_QWORD *)(v548 + 3040) = *(_QWORD *)(v548 + 1360);
                              *v515 = *v514;
                              *(_QWORD *)(v548 + 3080) = *(_QWORD *)(v548 + 1400);
                              *(_QWORD *)(v548 + 3096) = *(_QWORD *)(v548 + 1416);
                              *(_QWORD *)(v548 + 3112) = *(_QWORD *)(v548 + 1432);
                              *(_DWORD *)((char *)v513 + 3) = *(_DWORD *)((char *)v512 + 3);
                              *v513 = *v512;
                              *(_QWORD *)(v511 + 16) = *(_QWORD *)(v510 + 16);
                              v474 = *(_OWORD *)v510;
                              *(_DWORD *)(v509 + 16) = *(_DWORD *)(v508 + 16);
                              *(_DWORD *)(v548 + 3192) = *(_DWORD *)(v548 + 1512);
                              v475 = *(_QWORD *)(v548 + 1520);
                              v476 = *(_QWORD *)(v548 + 1528);
                              *(_OWORD *)v511 = v474;
                              *(_OWORD *)v509 = *(_OWORD *)v508;
                              sub_2367E8EB8(v507, v475, v476, 0xAAAAAAAAAAAAAAABLL * ((v476 - v475) >> 5));
                              *(_OWORD *)v506 = *(_OWORD *)v505;
                              *(_QWORD *)(v506 + 16) = *(_QWORD *)(v505 + 16);
                              *v504 = *v503;
                              *(_QWORD *)((char *)v504 + 5) = *(_QWORD *)((char *)v503 + 5);
                              *(_QWORD *)v502 = *(_QWORD *)v501;
                              *(_BYTE *)(v502 + 8) = *(_BYTE *)(v501 + 8);
                              sub_2367EE660(v556[0].i64);
                              v204 = *(_DWORD *)(v548 + 1008);
                              if ((v204 & 0x100) == 0)
                                goto LABEL_331;
                              goto LABEL_809;
                            }
                          }
LABEL_814:
                          sub_2367EE660(v556[0].i64);
                          return 1;
                        }
                        v460 = 0;
                        v28 = 1;
                        goto LABEL_755;
                      }
                      goto LABEL_707;
                    }
                    v551 = 0uLL;
                    v28 = sub_2367EE348(v2, &v551);
                    if ((_DWORD)v28)
                    {
LABEL_707:
                      v2 = v548;
LABEL_708:
                      v3 = v534;
                      goto LABEL_723;
                    }
                    sub_2367EE524((uint64_t *)&v554, v551, *((uint64_t *)&v551 + 1));
                    v2 = v548;
                    sub_2367EE5C0((unint64_t *)v554, *(_QWORD *)(v548 + 3544));
                    *(_BYTE *)(v548 + 1656) = *(_BYTE *)(v548 + 1233);
                    v462 = (_QWORD *)v554;
                    v552 = v551;
                    sub_2367D31C0((uint64_t)v556, (uint64_t)&v552);
                    sub_2367EE5C0((unint64_t *)v556, 8 * (v462[2] - v462[4] + v462[5]) - v462[1]);
                    if (sub_2367F2C24((uint64_t)v556, v523))
                    {
                      v463 = sub_2367F232C((uint64_t)v462, v523);
                      v28 = v463 != 0;
                      if (!v463)
                      {
                        v464 = 8 * (*(_QWORD *)(v554 + 16) - *(_QWORD *)(v554 + 32) + *(_QWORD *)(v554 + 40))
                             - *(_QWORD *)(v554 + 8);
                        sub_2367EA5E4(v548, v464 >> 3);
                        *(_QWORD *)(v548 + 3544) = v464 & 7;
                        *(_BYTE *)(v548 + 40) = 1;
                        sub_2367EE660((uint64_t *)&v554);
                        goto LABEL_695;
                      }
                    }
                    else
                    {
                      sub_2367EE470(v548);
                      v28 = 2;
                    }
                    sub_2367EE660((uint64_t *)&v554);
                    goto LABEL_708;
                  }
                }
              }
              else
              {
                sub_2367EE470(v548);
                v28 = 2;
              }
LABEL_713:
              v461 = (uint64x2_t *)&v552;
              goto LABEL_714;
            }
          }
          v3 = v534;
          goto LABEL_713;
        case 4:
          if (*(_BYTE *)(v2 + 37))
            return 1;
          v194 = *(_QWORD *)(v2 + 3600);
          v25 = v194 >= 4;
          v195 = v194 - 4;
          if (!v25)
            goto LABEL_802;
          if (!*(_BYTE *)(v2 + 952) && *(_QWORD *)(v2 + 928) < 4uLL)
            return 1;
          v196 = *(_BYTE **)(v2 + 3592);
          if ((*v196 & 0x80) != 0)
            *(_BYTE *)(v2 + 37) = 1;
          *(_QWORD *)(v2 + 3592) = v196 + 4;
          *(_QWORD *)(v2 + 3600) = v195;
          *(_QWORD *)(v2 + 904) += 4;
          v4 = 3;
          goto LABEL_738;
        default:
          continue;
      }
    }
    break;
  }
  v9 = *(_QWORD *)(v2 + 992);
  v10 = (void *)(*(_QWORD *)(v2 + 968) + v9);
  v556[0].i64[0] = (uint64_t)v10;
  v11 = *(_QWORD *)(v2 + 976);
  v12 = v11 - v9;
  *(_QWORD *)&v554 = v11 - v9;
  v13 = v8 - *(_QWORD *)(v2 + 912);
  v14 = *(_QWORD *)(v2 + 3584);
  v15 = (char *)(v6 + v14 - v13);
  v16 = v13 - v14 + v7;
  if (!*(_BYTE *)(v2 + 3569))
  {
    if (!*(_BYTE *)(v2 + 3570) && *(_QWORD *)(v2 + 3576) < v16)
      v16 = *(_QWORD *)(v2 + 3576);
    if (v12 >= v16)
      v23 = v16;
    else
      v23 = v11 - v9;
    v24 = v16;
    memcpy(v10, v15, v23);
    v556[0].i64[0] += v23;
    if (*(_BYTE *)(v2 + 3570))
    {
      *(_QWORD *)(v2 + 3584) += v23;
      if (v12 >= v24)
        goto LABEL_32;
    }
    else
    {
      v29 = *(_QWORD *)(v2 + 3576);
      *(_QWORD *)(v2 + 3576) = v29 - v23;
      *(_QWORD *)(v2 + 3584) += v23;
      if (v12 >= v24)
      {
        if (v29 != v23)
          goto LABEL_33;
LABEL_32:
        v28 = 0;
        goto LABEL_254;
      }
    }
    v28 = 7;
    goto LABEL_254;
  }
  if (*(_BYTE *)(v2 + 3568))
    goto LABEL_11;
  v25 = v16 >= 4;
  v16 -= 4;
  if (!v25)
  {
LABEL_33:
    v28 = 2;
    goto LABEL_254;
  }
  if (!*(_BYTE *)(v2 + 3570))
  {
    v26 = *(_QWORD *)(v2 + 3576);
    v25 = v26 >= 4;
    v27 = v26 - 4;
    if (!v25)
    {
      v28 = 1;
      goto LABEL_254;
    }
    *(_QWORD *)(v2 + 3576) = v27;
  }
  v15 += 4;
  *(_QWORD *)(v2 + 3584) = v14 + 4;
  *(_BYTE *)(v2 + 3568) = 1;
LABEL_11:
  v17 = *(int **)(v2 + 3560);
  if (!v17)
  {
    v18 = v16;
    v19 = (char *)malloc_type_malloc(0x1428uLL, 0x10F2040F1FA04F5uLL);
    v17 = (int *)v19;
    if (v19)
    {
      *((_QWORD *)v19 + 5) = sub_2368A4E70;
      *((_QWORD *)v19 + 6) = sub_2368A4E80;
      *((_QWORD *)v19 + 7) = 0;
      *((_DWORD *)v19 + 29) = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_DWORD *)v19 + 4) = 64;
      v20 = *((_WORD *)v19 + 336);
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 9) = 0;
      *((_QWORD *)v19 + 15) = 0;
      *((_DWORD *)v19 + 170) = 0;
      *((_QWORD *)v19 + 42) = 0;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *((_OWORD *)v19 + 12) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *((_OWORD *)v19 + 23) = 0u;
      *((_QWORD *)v19 + 83) = 0;
      *(_OWORD *)(v19 + 648) = 0u;
      *((_OWORD *)v19 + 43) = 0u;
      *((_WORD *)v19 + 336) = v20 & 0xFFC0 | 0x10;
      *((_DWORD *)v19 + 169) = 0;
      *(_OWORD *)(v19 + 100) = xmmword_2368AF5F0;
      *((_DWORD *)v19 + 21) = 0;
      *((_QWORD *)v19 + 11) = 0;
      *((_DWORD *)v19 + 24) = 0;
      *((_QWORD *)v19 + 30) = 0;
      *((_QWORD *)v19 + 31) = 0;
      *((_DWORD *)v19 + 96) = 63;
      *((_QWORD *)v19 + 89) = 0;
      v21 = malloc_type_malloc(0x580uLL, 0x10F00400AFAC3FDuLL);
      if (v21)
      {
        v22 = v21;
        bzero(v21, 0x568uLL);
        v22[316] = 1;
        v22[1360] = 0;
        *((_QWORD *)v22 + 40) = &unk_2508006D8;
        *((_QWORD *)v22 + 104) = &unk_250800788;
        *((_QWORD *)v22 + 173) = sub_2368A4E70;
        *((_QWORD *)v22 + 174) = sub_2368A4E80;
        *((_QWORD *)v22 + 175) = 0;
        *((_QWORD *)v17 + 88) = v22;
      }
      else
      {
        free(v17);
        v17 = 0;
      }
    }
    *(_QWORD *)(v2 + 3560) = v17;
    v16 = v18;
  }
  if (v17[29] < 0)
  {
    v28 = 1;
    goto LABEL_254;
  }
  if (v11 == v9)
  {
    __p = 0;
  }
  else
  {
    if (!v556[0].i64[0])
    {
      v164 = sub_2367BE448((uint64_t)v17, 0xFFFFFFEC, 0);
      v32 = v15;
      goto LABEL_249;
    }
    __p = (void **)v556;
  }
  if (v17[18])
  {
    v30 = v17 + 16;
    v31 = 2;
  }
  else
  {
    *((_QWORD *)v17 + 4) = v16;
    v31 = 1;
    v30 = v15;
  }
  v32 = v15;
  v535 = (unint64_t *)(v17 + 2);
  v538 = v17 + 16;
  *((_QWORD *)v17 + 3) = v30;
  v531 = (unsigned __int8 **)(v17 + 172);
  v525 = v16;
  v526 = (unsigned __int8 **)(v17 + 84);
  v33 = v17 + 188;
  v34 = v17 + 324;
  v35 = v16;
  v496 = v32;
LABEL_46:
  while (2)
  {
    while (2)
    {
      if (v31 != 1)
      {
        if (v31 != 2)
        {
          v15 = v496;
          v165 = v525;
          if (v17[18])
          {
            v17[18] = 0;
          }
          else
          {
            v169 = v17[4];
            v170 = (64 - v169) >> 3;
            v171 = (64 - v169) & 0xFFFFFFF8;
            v35 = *((_QWORD *)v17 + 4) + v170;
            v32 = (char *)(*((_QWORD *)v17 + 3) - v170);
            *((_QWORD *)v17 + 3) = v32;
            *((_QWORD *)v17 + 4) = v35;
            if (v171 == 64)
              v172 = 0;
            else
              v172 = *v535 << v171;
            v165 = v525;
            *((_QWORD *)v17 + 1) = v172;
            v17[4] = v171 + v169;
          }
          goto LABEL_248;
        }
        if (*((_QWORD *)v17 + 15)
          && (v36 = sub_2367BE468((uint64_t)v17, (size_t *)&v554, __p, 1), (v36 & 0x80000000) != 0))
        {
          v31 = v36;
        }
        else
        {
          v37 = v17[18];
          if ((_DWORD)v37)
          {
            if (!*((_QWORD *)v17 + 4))
            {
              v17[18] = 0;
              v31 = 1;
              *((_QWORD *)v17 + 3) = v32;
              *((_QWORD *)v17 + 4) = v35;
              continue;
            }
            if (v35)
            {
              v38 = *v32++;
              *((_BYTE *)v538 + v37) = v38;
              v39 = (v17[18] + 1);
              v17[18] = v39;
              *((_QWORD *)v17 + 4) = v39;
              --v35;
              v31 = 1;
              continue;
            }
          }
          else
          {
            v32 = (char *)*((_QWORD *)v17 + 3);
            v166 = *((_QWORD *)v17 + 4);
            if (v166)
            {
              v167 = 0;
              v15 = v496;
              v165 = v525;
              do
              {
                v168 = *v32++;
                *((_BYTE *)v538 + v167) = v168;
                v167 = v17[18] + 1;
                v17[18] = v167;
                --v166;
              }
              while (v166);
              v35 = 0;
              v31 = 2;
              goto LABEL_248;
            }
            v35 = 0;
          }
          v31 = 2;
        }
        v15 = v496;
        v165 = v525;
LABEL_248:
        v164 = sub_2367BE448((uint64_t)v17, v31, v165 - v35);
        goto LABEL_249;
      }
      break;
    }
    switch(*v17)
    {
      case 0:
        v55 = sub_2367BE330(v535);
        v31 = 2;
        if (!v55)
          continue;
        v56 = *((_WORD *)v17 + 336);
        *((_WORD *)v17 + 336) = v56 & 0xFFDF;
        v57 = *((_QWORD *)v17 + 1);
        v58 = v17[4];
        v17[4] = v58 + 1;
        if (((v57 >> v58) & 1) == 0)
        {
          v60 = 16;
          goto LABEL_213;
        }
        v17[4] = v58 + 4;
        v59 = (v57 >> (v58 + 1)) & 7;
        if (v59)
        {
          v60 = v59 + 17;
LABEL_213:
          v17[169] = v60;
          v76 = 2;
          goto LABEL_214;
        }
        v17[4] = v58 + 7;
        v163 = (v57 >> (v58 + 4)) & 7;
        if (!v163)
        {
          v60 = 17;
          goto LABEL_213;
        }
        if (v163 != 1)
        {
          v60 = v163 | 8;
          goto LABEL_213;
        }
        v31 = -13;
        if ((v56 & 0x20) != 0)
        {
          v17[4] = v58 + 8;
          if (((v57 >> (v58 + 7)) & 1) == 0)
          {
            *((_WORD *)v17 + 336) = v56 | 0x20;
            v31 = 1;
            *v17 = 1;
          }
        }
        continue;
      case 1:
        v61 = v17[4];
        if ((v61 - 59) >= 6)
        {
          v65 = *v535;
        }
        else
        {
          v62 = *((_QWORD *)v17 + 4);
          v31 = 2;
          if (!v62)
            continue;
          v63 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = v63 >> 8;
          v64 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
          *((_QWORD *)&v66 + 1) = *v64;
          *(_QWORD *)&v66 = v63;
          v65 = v66 >> 8;
          *((_QWORD *)v17 + 1) = v65;
          v61 -= 8;
          *((_QWORD *)v17 + 3) = v64 + 1;
          *((_QWORD *)v17 + 4) = v62 - 1;
        }
        v54 = (v65 >> v61) & 0x3F;
        v17[169] = v54;
        v17[4] = v61 + 6;
        v31 = -13;
        if ((v54 - 31) < 0xFFFFFFEB)
          continue;
        *v17 = 2;
LABEL_105:
        v17[20] = (1 << v54) - 16;
        v77 = (*((uint64_t (**)(_QWORD, uint64_t))v17 + 5))(*((_QWORD *)v17 + 7), 12336);
        *((_QWORD *)v17 + 30) = v77;
        v31 = -30;
        if (!v77)
          continue;
        *((_QWORD *)v17 + 31) = v77 + 7584;
        *v17 = 3;
LABEL_107:
        v17[66] = 0;
        *((_OWORD *)v17 + 17) = xmmword_2368AF600;
        *((_OWORD *)v17 + 18) = xmmword_2368AF610;
        *((_OWORD *)v17 + 19) = xmmword_2368AF620;
        *((_OWORD *)v17 + 9) = 0u;
        *((_OWORD *)v17 + 10) = 0u;
        *((_QWORD *)v17 + 22) = 0;
        *((_QWORD *)v17 + 24) = 0;
        *((_QWORD *)v17 + 25) = 0;
        *((_QWORD *)v17 + 27) = 0;
        *((_QWORD *)v17 + 28) = 0;
        *v526 = 0;
        *((_QWORD *)v17 + 43) = 0;
        *((_BYTE *)v17 + 352) = 0;
        *v531 = 0;
        *((_QWORD *)v17 + 87) = 0;
        *v17 = 4;
LABEL_108:
        v31 = sub_2367BE5A0((uint64_t)v17, v535);
        if (v31 != 1)
          continue;
        v78 = *((_WORD *)v17 + 336);
        if ((v78 & 6) == 0)
          goto LABEL_113;
        v79 = v17[4];
        v80 = -v79 & 7;
        if (v80)
        {
          v81 = *((_QWORD *)v17 + 1) >> v79;
          v17[4] = v80 + v79;
          v31 = -14;
          if ((v81 & ~(-1 << v80)) != 0)
            continue;
        }
        if ((v78 & 4) != 0)
        {
          v42 = 12;
          goto LABEL_218;
        }
LABEL_113:
        if (!v17[66])
          goto LABEL_217;
        sub_2367BEA44((uint64_t)v17);
        if ((v17[168] & 2) != 0)
        {
          v42 = 11;
          goto LABEL_218;
        }
LABEL_115:
        v73 = 0;
        *((_QWORD *)v17 + 115) = v17 + 240;
        *((_OWORD *)v17 + 47) = 0u;
        *(_QWORD *)v17 = 18;
LABEL_116:
        v31 = sub_2367BEAB0((uint64_t)v17, v535, (unsigned int *)&v17[v73 + 71]);
        if (v31 == 1)
        {
          ++v17[v17[1] + 71];
          v44 = v17[1];
          v45 = v17[v44 + 71];
          if (v45 <= 1)
          {
            v17[1] = v44 + 1;
            v31 = 1;
            continue;
          }
          *v17 = 19;
LABEL_152:
          v31 = sub_2367BEC60(v45 + 2, v45 + 2, (char *)(*((_QWORD *)v17 + 30) + 2528 * (_DWORD)v44), 0, (uint64_t)v17);
          if (v31 == 1)
          {
            *v17 = 20;
LABEL_154:
            v31 = sub_2367BEC60(26, 0x1Au, (char *)(*((_QWORD *)v17 + 31) + 1584 * v17[1]), 0, (uint64_t)v17);
            if (v31 == 1)
            {
              *v17 = 21;
LABEL_156:
              v113 = v17[1];
              v114 = *((_QWORD *)v17 + 31);
              LODWORD(v552) = 0;
              if (v17[167])
              {
                v115 = v17[67];
                goto LABEL_167;
              }
              v116 = (_BYTE *)(v114 + 1584 * (int)v113);
              v117 = v17[4];
              if ((v117 - 50) >= 0xF)
              {
                v121 = *v535;
LABEL_164:
                v124 = v121 >> v117;
                v125 = &v116[4 * (v121 >> v117)];
                v126 = *v125;
                if (v126 >= 9)
                {
                  v117 += 8;
                  v125 += 4 * (BYTE1(v124) & ~(-1 << (v126 - 8)) & 0x7F)
                        + 4 * *(unsigned __int16 *)&v116[4 * v124 + 2];
                  v126 = *v125;
                }
                v17[4] = v117 + v126;
                v115 = *((unsigned __int16 *)v125 + 1);
LABEL_167:
                v127 = (unsigned __int16 *)((char *)&unk_236924C20 + 4 * v115);
                v128 = *((unsigned __int8 *)v127 + 2);
                v129 = *v127;
                v130 = v17[4];
                v131 = 64 - v130;
                if (64 - v130 >= v128)
                {
                  v135 = *v535;
LABEL_173:
                  v17[4] = v130 + v128;
                  v17[v113 + 68] = ((v135 >> v130) & ~(-1 << v128)) + v129;
                  v17[167] = 0;
                  v137 = v17[1] + 1;
                  *v17 = 18;
                  v17[1] = v137;
                  v31 = 1;
                  continue;
                }
                v132 = *((_QWORD *)v17 + 4) - 1;
                while (v132 != -1)
                {
                  v133 = *((_QWORD *)v17 + 1);
                  *((_QWORD *)v17 + 1) = v133 >> 8;
                  v134 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                  *((_QWORD *)&v136 + 1) = *v134;
                  *(_QWORD *)&v136 = v133;
                  v135 = v136 >> 8;
                  *((_QWORD *)v17 + 1) = v135;
                  v130 -= 8;
                  v17[4] = v130;
                  *((_QWORD *)v17 + 3) = v134 + 1;
                  *((_QWORD *)v17 + 4) = v132--;
                  v131 += 8;
                  if (v131 >= v128)
                    goto LABEL_173;
                }
                v17[67] = v115;
                v17[167] = 1;
              }
              else
              {
                v118 = *((_QWORD *)v17 + 4) - 1;
                while (v118 != -1)
                {
                  v119 = *((_QWORD *)v17 + 1);
                  *((_QWORD *)v17 + 1) = v119 >> 8;
                  v120 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
                  *((_QWORD *)&v122 + 1) = *v120;
                  *(_QWORD *)&v122 = v119;
                  v121 = v122 >> 8;
                  *((_QWORD *)v17 + 1) = v121;
                  v123 = v117 - 8;
                  v17[4] = v117 - 8;
                  *((_QWORD *)v17 + 3) = v120 + 1;
                  *((_QWORD *)v17 + 4) = v118--;
                  LODWORD(v120) = v117 - 58;
                  v117 -= 8;
                  if (v120 >= 0xF)
                  {
                    v117 = v123;
                    goto LABEL_164;
                  }
                }
                if (sub_2367BFB8C(v116, (uint64_t)v535, &v552))
                {
                  v115 = v552;
                  goto LABEL_167;
                }
              }
              v31 = 2;
              continue;
            }
          }
        }
        continue;
      case 2:
        LODWORD(v54) = v17[169];
        goto LABEL_105;
      case 3:
        goto LABEL_107;
      case 4:
        goto LABEL_108;
      case 5:
        v67 = v17[4];
        if ((v67 - 59) >= 6)
        {
          v71 = *v535;
        }
        else
        {
          v68 = *((_QWORD *)v17 + 4);
          v31 = 2;
          if (!v68)
            continue;
          v69 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = v69 >> 8;
          v70 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
          *((_QWORD *)&v72 + 1) = *v70;
          *(_QWORD *)&v72 = v69;
          v71 = v72 >> 8;
          *((_QWORD *)v17 + 1) = v71;
          v67 -= 8;
          *((_QWORD *)v17 + 3) = v70 + 1;
          *((_QWORD *)v17 + 4) = v68 - 1;
        }
        v82 = v71 >> v67;
        v17[4] = v67 + 6;
        v83 = (v71 >> v67) & 3;
        v17[80] = v83;
        v17[81] = ((v82 >> 2) & 0xF) << v83;
        v84 = (*((uint64_t (**)(_QWORD, _QWORD))v17 + 5))(*((_QWORD *)v17 + 7), v17[71]);
        *((_QWORD *)v17 + 87) = v84;
        v31 = -21;
        if (!v84)
          continue;
        LODWORD(n) = 0;
        *(_QWORD *)v17 = 6;
LABEL_122:
        LODWORD(v43) = v17[71];
        if ((int)n < (int)v43)
        {
          for (n = (int)n; n < v43; ++n)
          {
            v85 = v17[4];
            if ((v85 - 63) >= 2)
            {
              v89 = *v535;
            }
            else
            {
              v86 = *((_QWORD *)v17 + 4);
              if (!v86)
              {
                v17[1] = n;
LABEL_211:
                v31 = 2;
                goto LABEL_46;
              }
              v87 = *((_QWORD *)v17 + 1);
              *((_QWORD *)v17 + 1) = v87 >> 8;
              v88 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
              *((_QWORD *)&v90 + 1) = *v88;
              *(_QWORD *)&v90 = v87;
              v89 = v90 >> 8;
              *((_QWORD *)v17 + 1) = v89;
              v85 -= 8;
              *((_QWORD *)v17 + 3) = v88 + 1;
              *((_QWORD *)v17 + 4) = v86 - 1;
            }
            v17[4] = v85 + 2;
            *(_BYTE *)(*((_QWORD *)v17 + 87) + n) = (v89 >> v85) & 3;
            v43 = v17[71];
          }
        }
        *v17 = 22;
LABEL_130:
        v31 = sub_2367BFDE0((_DWORD)v43 << 6, (unsigned int *)v17 + 171, v531, (uint64_t)v17);
        if (v31 != 1)
          continue;
        *((_OWORD *)v17 + 45) = 0u;
        *((_OWORD *)v17 + 46) = 0u;
        v91 = v17[71];
        if ((_DWORD)v91)
        {
          v92 = 0;
          v93 = *v531;
          do
          {
            v560 = vld4q_s8((const char *)v93);
            v94 = vld1q_dup_s8((const char *)v93);
            v560.val[0] = vorrq_s8(vorrq_s8(veorq_s8(v560.val[1], v94), veorq_s8(v560.val[0], v94)), vorrq_s8(veorq_s8(v560.val[2], v94), veorq_s8(v560.val[3], v94)));
            v560.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v560.val[0]);
            v560.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v560.val[1].i8);
            v560.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v560.val[0].i8);
            v95 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v560.val[0].i8);
            v560.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v560.val[1]);
            v560.val[0] = (int8x16_t)vmovl_high_u16((uint16x8_t)v560.val[0]);
            *(int8x8_t *)v560.val[0].i8 = vorr_s8(vorr_s8(vorr_s8(*(int8x8_t *)v95.i8, *(int8x8_t *)v560.val[2].i8), vorr_s8(*(int8x8_t *)v560.val[0].i8, *(int8x8_t *)v560.val[1].i8)), vorr_s8(vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v560.val[2], v560.val[2], 8uLL)), vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v560.val[0], v560.val[0], 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v560.val[1], v560.val[1], 8uLL))));
            v96.i64[0] = v560.val[0].u32[0];
            v96.i64[1] = v560.val[0].u32[1];
            if (!*(_QWORD *)&vorr_s8((int8x8_t)v560.val[0].u32[0], (int8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)))
              v17[(v92 >> 5) + 180] |= 1 << v92;
            ++v92;
            v93 += 64;
          }
          while (v91 != v92);
        }
        *v17 = 23;
LABEL_137:
        v97 = v17[80];
        v98 = v17[81];
        v99 = v98 + 16;
        v100 = v97 + 1;
        if ((v17[168] & 0x20) != 0)
        {
          if (v98 <= 0x7FFFFFFB)
          {
            v102 = v98 + 16;
            v103 = -1;
            v104 = ((2147483644 - v98) >> v97) + 4;
            do
            {
              v105 = v103++;
              v106 = v104 > 3;
              v104 >>= 1;
            }
            while (v106);
            if ((((((2147483644 - v98) >> v97) + 4) >> v103) & 1 | (2 * (v105 + 2))) != 4)
              v102 = v98
                   + ((((((((2147483644 - v98) >> v97) + 4) >> v103) & 1 | (2 * (v105 + 2))) - 5) << v97) | ~(-1 << v97))
                   + 17;
          }
          else
          {
            v102 = -2147483636;
          }
          v101 = v99 + (62 << v100);
        }
        else
        {
          v101 = v99 + (24 << v100);
          v102 = v101;
        }
        v31 = sub_2367BFDE0(4 * v17[73], (unsigned int *)v17 + 82, v526, (uint64_t)v17);
        if (v31 != 1)
          continue;
        v107 = v17[171];
        v108 = (*((uint64_t (**)(_QWORD, uint64_t))v17 + 5))(*((_QWORD *)v17 + 7), 2536 * v107);
        v17[46] = 16777472;
        *((_WORD *)v17 + 94) = v107;
        *((_QWORD *)v17 + 21) = v108;
        *((_QWORD *)v17 + 22) = v108 + 8 * v107;
        v109 = v17[72];
        v110 = (*((uint64_t (**)(_QWORD, uint64_t))v17 + 5))(*((_QWORD *)v17 + 7), 4328 * v109);
        v17[52] = 46138048;
        *((_WORD *)v17 + 106) = v109;
        *((_QWORD *)v17 + 24) = v110;
        *((_QWORD *)v17 + 25) = v110 + 8 * v109;
        v111 = v17[82];
        v112 = (*((uint64_t (**)(_QWORD, uint64_t))v17 + 5))(*((_QWORD *)v17 + 7), (4 * (v102 + 376) + 8) * v111);
        *((_WORD *)v17 + 116) = v101;
        *((_WORD *)v17 + 117) = v102;
        *((_WORD *)v17 + 118) = v111;
        *((_QWORD *)v17 + 27) = v112;
        *((_QWORD *)v17 + 28) = v112 + 8 * v111;
        if (!v108 || !v110 || !v112)
        {
          v164 = sub_2367BE448((uint64_t)v17, 0xFFFFFFEA, v525 - v35);
          v3 = v534;
          goto LABEL_749;
        }
        v74 = 0;
        *(_QWORD *)v17 = 24;
        v75 = v17 + 42;
        v3 = v534;
        goto LABEL_178;
      case 6:
        LODWORD(n) = v17[1];
        goto LABEL_122;
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_200;
      case 11:
        v31 = sub_2367BFC48((size_t *)&v554, __p, (uint64_t)v17);
        if (v31 == 1)
          *v17 = 14;
        continue;
      case 12:
        v47 = v17[66];
        if (v47 < 1)
          goto LABEL_217;
        v48 = v17[4];
        v49 = v47 + 1;
        do
        {
          if ((v48 - 57) <= 7)
          {
            v50 = *((_QWORD *)v17 + 4);
            if (!v50)
              goto LABEL_211;
            v51 = *((_QWORD *)v17 + 1);
            *((_QWORD *)v17 + 1) = v51 >> 8;
            v52 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
            *((_QWORD *)&v53 + 1) = *v52;
            *(_QWORD *)&v53 = v51;
            *((_QWORD *)v17 + 1) = v53 >> 8;
            v48 -= 8;
            *((_QWORD *)v17 + 3) = v52 + 1;
            *((_QWORD *)v17 + 4) = v50 - 1;
          }
          v48 += 8;
          v17[4] = v48;
          v17[66] = v49 - 2;
          --v49;
        }
        while (v49 > 1);
LABEL_217:
        v42 = 14;
        goto LABEL_218;
      case 13:
      case 15:
      case 16:
        v31 = sub_2367BE468((uint64_t)v17, (size_t *)&v554, __p, 0);
        if (v31 != 1)
          continue;
        sub_2367C1A20((void **)v17);
        if (v17[22] == 1 << v17[169])
          v17[21] = v17[20];
        if (*v17 == 16)
        {
          v42 = 10;
          goto LABEL_218;
        }
        if (*v17 == 15)
        {
          v40 = *((_QWORD *)v17 + 89);
          if (!v40
            || *(_DWORD *)(v40 + 16) == *(_DWORD *)(v40 + 20)
            || (v41 = v17[19] + sub_2367C1A60((uint64_t)v17, v17[19]), v17[19] = v41, v31 = 1, v41 < v17[22]))
          {
            if (v17[66])
              v42 = 7;
            else
              v42 = 14;
            goto LABEL_218;
          }
          continue;
        }
        if (v17[1])
        {
          v76 = 8;
LABEL_214:
          *v17 = v76;
          v31 = 1;
          continue;
        }
        if (!v17[66])
          goto LABEL_217;
        v42 = 9;
        goto LABEL_218;
      case 14:
        v31 = -10;
        if (v17[66] < 0)
          continue;
        sub_2367C2C38((uint64_t)v17);
        if ((v17[168] & 1) == 0)
        {
          v42 = 3;
LABEL_218:
          *v17 = v42;
          v31 = 1;
          continue;
        }
        v157 = v17[4];
        v158 = -v157 & 7;
        if (v158)
        {
          v159 = *((_QWORD *)v17 + 1) >> v157;
          v157 += v158;
          v17[4] = v157;
          v31 = -15;
          if ((v159 & ~(-1 << v158)) != 0)
            continue;
        }
        if (!v17[18])
        {
          v160 = (64 - v157) >> 3;
          v161 = (64 - v157) & 0xFFFFFFF8;
          v35 = *((_QWORD *)v17 + 4) + v160;
          v32 = (char *)(*((_QWORD *)v17 + 3) - v160);
          *((_QWORD *)v17 + 3) = v32;
          *((_QWORD *)v17 + 4) = v35;
          if (v161 == 64)
            v162 = 0;
          else
            v162 = *v535 << v161;
          *((_QWORD *)v17 + 1) = v162;
          v17[4] = v161 + v157;
        }
        *v17 = 26;
LABEL_231:
        if (*((_QWORD *)v17 + 15))
        {
          v31 = sub_2367BE468((uint64_t)v17, (size_t *)&v554, __p, 1);
          if (v31 != 1)
            continue;
        }
        v477 = v525 - v35;
        v478 = (uint64_t)v17;
        v479 = 1;
        goto LABEL_234;
      case 17:
        goto LABEL_115;
      case 18:
        v73 = v17[1];
        if (v73 < 3)
          goto LABEL_116;
        v42 = 5;
        goto LABEL_218;
      case 19:
        v44 = v17[1];
        v45 = v17[v44 + 71];
        goto LABEL_152;
      case 20:
        goto LABEL_154;
      case 21:
        goto LABEL_156;
      case 22:
        LODWORD(v43) = v17[71];
        goto LABEL_130;
      case 23:
        goto LABEL_137;
      case 24:
        v74 = v17[1];
        if (!v74)
        {
          v75 = v17 + 42;
LABEL_178:
          if (*v33 == 1)
          {
            v138 = v17[637];
          }
          else
          {
            v138 = 0;
            *((_QWORD *)v17 + 319) = *((_QWORD *)v75 + 1);
            v17[637] = 0;
            v17[188] = 1;
          }
          if (v138 < *((unsigned __int16 *)v75 + 10))
          {
            v139 = (char *)*((_QWORD *)v17 + 319);
            while (1)
            {
              LODWORD(v552) = 0;
              v140 = sub_2367BEC60(*((unsigned __int16 *)v75 + 8), *((unsigned __int16 *)v75 + 9), v139, (int *)&v552, (uint64_t)v17);
              if (v140 != 1)
                goto LABEL_202;
              v141 = v17[637];
              *(_QWORD *)(*(_QWORD *)v75 + 8 * v141) = *((_QWORD *)v17 + 319);
              v139 = (char *)(*((_QWORD *)v17 + 319) + 4 * v552);
              *((_QWORD *)v17 + 319) = v139;
              v17[637] = v141 + 1;
              if ((int)v141 + 1 >= *((unsigned __int16 *)v75 + 10))
              {
                v74 = v17[1];
                break;
              }
            }
          }
          v17[188] = 0;
          v17[1] = v74 + 1;
          v31 = 1;
          if (v74 >= 2)
          {
            *v17 = 25;
LABEL_188:
            v142 = v17[75];
            v143 = ((_DWORD)v142 << 6);
            v144 = *((_QWORD *)v17 + 86);
            *((_QWORD *)v17 + 19) = v144 + v143;
            v17[64] = (*(unsigned int *)((char *)v17 + ((v142 >> 3) & 0x1FFFFFFC) + 720) >> v142) & 1;
            *((_QWORD *)v17 + 43) = *(_QWORD *)(*((_QWORD *)v17 + 21)
                                              + 8 * *(unsigned __int8 *)(v144 + v143));
            *((_QWORD *)v17 + 18) = (char *)&unk_236924C88
                                  + 512 * (unint64_t)(*(_BYTE *)(*((_QWORD *)v17 + 87) + v142) & 3);
            *((_QWORD *)v17 + 20) = *((_QWORD *)v17 + 42);
            *((_QWORD *)v17 + 17) = **((_QWORD **)v17 + 24);
            v145 = sub_2367C01FC((uint64_t)v17);
            v31 = -27;
            if (v145)
            {
              v146 = v17[81];
              if (v146)
              {
                for (ii = 0; ii != v146; v34[v148] = ii)
                {
                  v148 = ii + 16;
                  *((_BYTE *)v33 + v148) = 0;
                  ++ii;
                }
                v149 = ii + 16;
              }
              else
              {
                v149 = 16;
              }
              v150 = *((unsigned __int16 *)v17 + 117);
              if (v149 < v150)
              {
                v151 = 0;
                v152 = v17[80];
                v153 = 1;
                do
                {
                  v154 = 1;
                  do
                  {
                    v155 = v149 + v154 - 1;
                    *((_BYTE *)v33 + v155) = v153;
                    v34[v155] = v146 + ((((v151 + 2) << v153) - 4) << v152) + v154;
                  }
                  while (!(v154++ >> v152));
                  v149 = v149 + v154 - 1;
                  v153 += v151;
                  v151 ^= 1u;
                }
                while (v149 < v150);
              }
              *v17 = 7;
LABEL_200:
              v31 = sub_2367C02A4((uint64_t)v17);
              if (v31 == 2)
              {
                v140 = sub_2367C0D84((uint64_t)v17);
LABEL_202:
                v31 = v140;
                continue;
              }
            }
          }
          continue;
        }
        if (v74 == 2)
        {
          v75 = v17 + 54;
          goto LABEL_178;
        }
        v75 = v17 + 48;
        if (v74 == 1)
          goto LABEL_178;
        v477 = v525 - v35;
        v478 = (uint64_t)v17;
        v479 = -31;
LABEL_234:
        v164 = sub_2367BE448(v478, v479, v477);
LABEL_749:
        v15 = v496;
LABEL_249:
        if (v164)
        {
          v173 = v32 - v15;
          v2 = v548;
          *(_QWORD *)(v548 + 3584) += v173;
          if (!*(_BYTE *)(v548 + 3570))
            *(_QWORD *)(v548 + 3576) -= v173;
          v28 = dword_236923F80[v164 - 1];
        }
        else
        {
          v28 = 1;
          v2 = v548;
        }
LABEL_254:
        *(_QWORD *)(v2 + 992) = v556[0].i64[0] - *(_QWORD *)(v2 + 968);
        if ((v28 & 0xFFFFFFFD) == 0)
        {
          v4 = *(_DWORD *)(v2 + 3552);
          goto LABEL_256;
        }
LABEL_788:
        if (!(_DWORD)v28)
          return *(_DWORD *)(v2 + 32) != 2;
        if ((_DWORD)v28 == 2)
        {
LABEL_802:
          if (!*(_BYTE *)(v2 + 3608))
            return 2;
          return 1;
        }
        return v28;
      case 25:
        goto LABEL_188;
      case 26:
        goto LABEL_231;
      default:
        continue;
    }
  }
}

void sub_2367EE1F4(_Unwind_Exception *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (STACK[0x220])
    operator delete((void *)STACK[0x220]);
  v2 = STACK[0x260];
  STACK[0x260] = 0;
  if (v2)
  {
    v3 = -*(_QWORD *)(v2 - 24);
    do
      v4 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v4 + v3, &qword_2564313D8));
    free(*(void **)(v2 - 32));
  }
  sub_2367EE660((uint64_t *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

uint64_t sub_2367EE348(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(char **)(a1 + 3504);
  v5 = *(char **)(a1 + 3512);
  if (v4 == v5)
  {
    v11 = *(_QWORD *)(a1 + 3536);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 3600);
      if (*(_BYTE *)(a1 + 952))
      {
        v13 = *(_QWORD *)(a1 + 904);
        v14 = *(_QWORD *)(a1 + 3600);
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 904);
        v14 = *(_QWORD *)(a1 + 920) - v13;
        if (v14 >= v12)
          v14 = *(_QWORD *)(a1 + 3600);
      }
      v15 = v14 >= v11 ? *(_QWORD *)(a1 + 3536) : v14;
      *(_QWORD *)(a1 + 3592) += v15;
      *(_QWORD *)(a1 + 3600) = v12 - v15;
      *(_QWORD *)(a1 + 904) = v13 + v15;
      *(_QWORD *)(a1 + 3536) = v11 - v15;
      if (v14 < v11)
        goto LABEL_18;
    }
  }
  v6 = *(_QWORD *)(a1 + 3600);
  if (!*(_BYTE *)(a1 + 952))
  {
    v7 = *(_QWORD *)(a1 + 904);
    if (*(_QWORD *)(a1 + 920) - v7 < v6)
      v6 = *(_QWORD *)(a1 + 920) - v7;
  }
  if (v4 != v5)
  {
    sub_2367C9D5C(a1 + 3504, v5, (char *)(*(_QWORD *)(a1 + 3592) + *(_QWORD *)(a1 + 3528)), (char *)(*(_QWORD *)(a1 + 3592) + v6), v6 - *(_QWORD *)(a1 + 3528));
    result = 0;
    *(_QWORD *)(a1 + 3528) = v6;
    v9 = *(_QWORD *)(a1 + 3504) + *(_QWORD *)(a1 + 3536);
    v10 = *(_QWORD *)(a1 + 3512) - v9;
    *a2 = v9;
    a2[1] = v10;
    return result;
  }
  if (!v6)
  {
LABEL_18:
    sub_2367EE470(a1);
    return 2;
  }
  else
  {
    result = 0;
    *a2 = *(_QWORD *)(a1 + 3592);
    a2[1] = v6;
  }
  return result;
}

void sub_2367EE470(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(char **)(a1 + 3504);
  if (v2 == *(char **)(a1 + 3512))
  {
    v4 = a1 + 3504;
    v5 = *(_QWORD *)(a1 + 3600);
    if (!*(_BYTE *)(a1 + 952))
    {
      v6 = *(_QWORD *)(a1 + 904);
      if (*(_QWORD *)(a1 + 920) - v6 < v5)
        v5 = *(_QWORD *)(a1 + 920) - v6;
    }
    sub_2367C9D5C(v4, v2, *(char **)(a1 + 3592), (char *)(*(_QWORD *)(a1 + 3592) + v5), v5);
    *(_QWORD *)(a1 + 3592) += v5;
    *(_QWORD *)(a1 + 3600) -= v5;
    *(_QWORD *)(a1 + 904) += v5;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 3528);
    *(_QWORD *)(a1 + 3592) += v3;
    *(_QWORD *)(a1 + 3600) -= v3;
    *(_QWORD *)(a1 + 904) += v3;
    *(_QWORD *)(a1 + 3528) = 0;
  }
}

void sub_2367EE524(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[5];

  v7[4] = *MEMORY[0x24BDAC8D0];
  v6[0] = a2;
  v6[1] = a3;
  v4 = operator new();
  v5 = sub_2367D31C0(v4, (uint64_t)v6);
  v7[0] = &off_2507FDF38;
  v7[3] = v7;
  *a1 = v5;
  a1[4] = (uint64_t)(a1 + 1);
  sub_2367EF69C((uint64_t)v7, a1 + 1);
}

unint64_t *sub_2367EE5C0(unint64_t *result, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = result;
  v3 = result[1];
  if (v3 >= a2)
  {
    result[1] = v3 - a2;
    v12 = *result >> a2;
    goto LABEL_6;
  }
  v4 = a2 - v3;
  v5 = (a2 - v3) >> 3;
  v6 = v4 & 7;
  *result = 0;
  result[1] = 0;
  v8 = result[2];
  v7 = result[3];
  if (v5 > v7 + 8 - v8)
  {
    v6 |= 8uLL;
    result[2] = v7 + 8;
    goto LABEL_9;
  }
  v9 = (unint64_t *)(v8 + v5);
  result[2] = v8 + v5;
  if (v8 + v5 > v7)
  {
LABEL_9:
    result = sub_2367C5188(result);
    v10 = *v2;
    v11 = v2[1];
    goto LABEL_5;
  }
  v10 = *v9;
  result[2] = (unint64_t)v9 + 7;
  v11 = 56;
LABEL_5:
  v2[1] = v11 - v6;
  v12 = v10 >> v6;
LABEL_6:
  *v2 = v12;
  return result;
}

uint64_t *sub_2367EE660(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      sub_2367EF608();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

BOOL sub_2367EE6EC(unint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v1 = a1[1];
  if ((-*((_BYTE *)a1 + 8) & 7) == 0)
    return 0;
  v3 = 8 - (-*((_BYTE *)a1 + 8) & 7);
  v4 = (_QWORD *)a1[2];
  if ((unint64_t)v4 > a1[3])
  {
    sub_2367C5188(a1);
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v5 = *a1 | (*v4 << v1);
    a1[2] = (unint64_t)v4 + ((63 - v1) >> 3);
    v6 = v1 | 0x38;
  }
  *a1 = v5 >> v3;
  a1[1] = v6 - v3;
  return (v5 & ~(-1 << v3)) != 0;
}

uint64_t sub_2367EE784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_2367EEF48(a1);
  *(_QWORD *)(v2 + 4208) = v2;
  *(_QWORD *)(v2 + 4312) = 0;
  *(_OWORD *)(v2 + 4280) = 0u;
  *(_OWORD *)(v2 + 4296) = 0u;
  *(_OWORD *)(v2 + 4368) = 0u;
  *(_OWORD *)(v2 + 4384) = 0u;
  *(_QWORD *)(v2 + 4424) = 0;
  *(_OWORD *)(v2 + 4432) = 0u;
  *(_QWORD *)(v2 + 4264) = 0;
  *(_OWORD *)(v2 + 4216) = 0u;
  *(_OWORD *)(v2 + 4232) = 0u;
  *(_OWORD *)(v2 + 4248) = 0u;
  *(_OWORD *)(v2 + 4456) = 0u;
  *(_DWORD *)(v2 + 4472) = 0;
  v3 = operator new();
  *(_QWORD *)v3 = &off_250800398;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(a1 + 4480) = v3;
  *(_QWORD *)(a1 + 4488) = 0;
  sub_2367EF254(a1 + 4496);
  sub_2367CA390(a1 + 4944);
  sub_2367CA390(a1 + 5192);
  sub_2367CA390(a1 + 5392);
  *(_BYTE *)(a1 + 5812) = 0;
  return a1;
}

void sub_2367EE88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t *v11;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  *(_QWORD *)(v10 + 5192) = &off_2507FFA18;
  v13 = *(void **)(v10 + 5224);
  if (v13)
  {
    *(_QWORD *)(v10 + 5232) = v13;
    operator delete(v13);
  }
  *(_QWORD *)(v10 + 4944) = &off_2507FFA18;
  v14 = *(void **)(v10 + 4976);
  if (v14)
  {
    *(_QWORD *)(v10 + 4984) = v14;
    operator delete(v14);
  }
  sub_2367EF354(v11);
  v15 = *(_QWORD *)(v10 + 4488);
  *(_QWORD *)(v10 + 4488) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(v10 + 4480);
  *(_QWORD *)(v10 + 4480) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(void **)(v10 + 4424);
  if (v17)
  {
    *(_QWORD *)(v10 + 4432) = v17;
    operator delete(v17);
  }
  sub_2367C2F38((uint64_t *)(v10 + 4304));
  a10 = (void **)(v10 + 4248);
  sub_2367D17E4(&a10);
  a10 = (void **)(v10 + 4224);
  sub_2367E947C(&a10);
  v18 = *(_QWORD *)(v10 + 4216);
  *(_QWORD *)(v10 + 4216) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_2367E94EC(v10);
  _Unwind_Resume(a1);
}

void sub_2367EE994(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_2367C3440();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)sub_2367CA1FC(v12);
      v7 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (_QWORD *)(v12 + 8 * v8);
    v15 = v12 + 8 * v13;
    *v14 = *a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      v16 = *--v5;
      *--v14 = v16;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_2367EEA6C(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_DWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_2367C3440();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)sub_2367C3454(v12);
      v7 = *(_DWORD **)a1;
      v5 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (_DWORD *)(v12 + 4 * v8);
    v15 = v12 + 4 * v13;
    *v14 = *a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      v16 = *--v5;
      *--v14 = v16;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
}

uint64_t sub_2367EEB44(uint64_t a1, int a2)
{
  BOOL v3;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;

  v3 = *(_QWORD *)(a1 + 736) == 1 && *(_DWORD *)(a1 + 160) == 1;
  if (*(_DWORD *)(a1 + 64) == 3
    || v3
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + 88) + 328) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 768)
                                                                                               + 88)
                                                                                   + 336)
    || *(_DWORD *)(a1 + 60))
  {
    *(_DWORD *)(a1 + 1460) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 1460) = a2;
    if (a2 < 3)
    {
      if (a2 == 2)
      {
        if (*(_DWORD *)(a1 + 164))
        {
          v17 = 0;
          v18 = *(int **)(a1 + 1472);
          do
          {
            v19 = *(_DWORD *)(a1 + 4 * v17 + 212) + 1;
            v20 = *(_QWORD *)(a1 + 1480);
            if ((unint64_t)v18 >= v20)
            {
              v22 = *(int **)(a1 + 1464);
              v23 = v18 - v22;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 62)
LABEL_52:
                sub_2367C3440();
              v25 = v20 - (_QWORD)v22;
              if (v25 >> 1 > v24)
                v24 = v25 >> 1;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                v26 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v26 = v24;
              if (v26)
              {
                v26 = (unint64_t)sub_2367C3454(v26);
                v18 = *(int **)(a1 + 1472);
                v22 = *(int **)(a1 + 1464);
              }
              else
              {
                v27 = 0;
              }
              v28 = (int *)(v26 + 4 * v23);
              *v28 = v19;
              v21 = v28 + 1;
              while (v18 != v22)
              {
                v29 = *--v18;
                *--v28 = v29;
              }
              *(_QWORD *)(a1 + 1464) = v28;
              *(_QWORD *)(a1 + 1472) = v21;
              *(_QWORD *)(a1 + 1480) = v26 + 4 * v27;
              if (v22)
                operator delete(v22);
            }
            else
            {
              *v18 = v19;
              v21 = v18 + 1;
            }
            *(_QWORD *)(a1 + 1472) = v21;
            ++v17;
            v18 = v21;
          }
          while (v17 < *(unsigned int *)(a1 + 164));
        }
        std::__sort<std::__less<int,int> &,int *>();
      }
    }
    else if (*(_DWORD *)(a1 + 160) >= 2u)
    {
      v5 = *(char **)(a1 + 1472);
      v6 = 1;
      do
      {
        v7 = *(_QWORD *)(a1 + 1480);
        if ((unint64_t)v5 >= v7)
        {
          v9 = *(char **)(a1 + 1464);
          v10 = (v5 - v9) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            goto LABEL_52;
          v12 = v7 - (_QWORD)v9;
          if (v12 >> 1 > v11)
            v11 = v12 >> 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
            v13 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v13 = (unint64_t)sub_2367C3454(v13);
            v5 = *(char **)(a1 + 1472);
            v9 = *(char **)(a1 + 1464);
          }
          else
          {
            v14 = 0;
          }
          v15 = (_DWORD *)(v13 + 4 * v10);
          *v15 = v6;
          v8 = (char *)(v15 + 1);
          while (v5 != v9)
          {
            v16 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *--v15 = v16;
          }
          *(_QWORD *)(a1 + 1464) = v15;
          *(_QWORD *)(a1 + 1472) = v8;
          *(_QWORD *)(a1 + 1480) = v13 + 4 * v14;
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_DWORD *)v5 = v6;
          v8 = v5 + 4;
        }
        *(_QWORD *)(a1 + 1472) = v8;
        ++v6;
        v5 = v8;
      }
      while (v6 < *(unsigned int *)(a1 + 160));
    }
  }
  return *(unsigned int *)(a1 + 1460);
}

uint64_t sub_2367EEDB4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = *(_QWORD *)(a1 + 3352);
  v7 = *(unsigned __int8 *)(a1 + 1000);
  v8 = *(_BYTE *)(a1 + 1000) != 0;
  v9 = *(_DWORD *)(a1 + 1440);
  if (*(_BYTE *)(v6 + 560))
  {
    if (*(_BYTE *)(a1 + 1000))
      v10 = 0;
    else
      v10 = v9 >= 5;
    if (v10)
    {
      if (*(_BYTE *)(a1 + 1552))
        v14 = 8 * *(_DWORD *)(a1 + 1556);
      else
        v14 = *(_DWORD *)(a1 + 1560);
      v8 = 0;
      v11 = v14;
    }
    else
    {
      v11 = sub_2367F4874(a1 + 1544);
    }
    *a2 = v11;
    if (v8 || v9 < 5)
    {
      if (*(_BYTE *)(a1 + 1552))
        v17 = 8 * *(_DWORD *)(a1 + 1556);
      else
        v17 = *(_DWORD *)(a1 + 1560);
      result = v17;
    }
    else
    {
      result = sub_2367F4874(a1 + 1544);
    }
    *a3 = result;
  }
  else
  {
    if (v9 >= 5 && v7 == 0)
    {
      if (*(_BYTE *)(a1 + 1624))
        v15 = 8 * *(_DWORD *)(a1 + 1628) + 8;
      else
        v15 = *(_DWORD *)(a1 + 1632);
      *a2 = v15;
      result = sub_2367F4718(a1 + 1616);
    }
    else
    {
      *a2 = sub_2367F4718(a1 + 1616);
      if (*(_BYTE *)(a1 + 1624))
        v13 = 8 * *(_DWORD *)(a1 + 1628) + 8;
      else
        v13 = *(_DWORD *)(a1 + 1632);
      result = v13;
    }
    *a3 = result;
    if (!*(_BYTE *)(a1 + 1003))
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      result = (uint64_t)sub_2367DC34C(&v20, v6);
      v18 = *((_QWORD *)&v21 + 1);
      *a2 = v21;
      *a3 = v18;
      if (!v7 && (int)v9 >= 5)
      {
        v19 = *a2;
        *a2 = v18;
        *a3 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_2367EEF48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v2 = a1 + 208;
  sub_236804FD4(a1 + 208);
  *(_QWORD *)(a1 + 984) = 0x4000000400;
  *(_QWORD *)(a1 + 1016) = v2;
  sub_2368062D0(a1 + 952);
  *(float *)(a1 + 1000) = *(float *)(a1 + 992) / (float)*(int *)(a1 + 988);
  *(_QWORD *)(a1 + 1004) = 0x3F0000003F000000;
  *(_DWORD *)(a1 + 1012) = 1056964608;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_QWORD *)(a1 + 1200) = 0x3C430C3100000054;
  *(_QWORD *)(a1 + 1208) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1420) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_QWORD *)(a1 + 1752) = a1 + 1632;
  *(_OWORD *)(a1 + 1440) = 0u;
  sub_2367EF3E8(a1 + 1760);
  v3 = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  do
  {
    *(_QWORD *)(a1 + v3 + 2824) = 0;
    v4 = (_OWORD *)(a1 + v3 + 2376);
    v4[26] = 0u;
    v4[27] = 0u;
    v4[24] = 0u;
    v4[25] = 0u;
    v4[22] = 0u;
    v4[23] = 0u;
    v4[20] = 0u;
    v4[21] = 0u;
    v4[18] = 0u;
    v4[19] = 0u;
    v4[16] = 0u;
    v4[17] = 0u;
    v4[14] = 0u;
    v4[15] = 0u;
    v4[12] = 0u;
    v4[13] = 0u;
    v4[10] = 0u;
    v4[11] = 0u;
    v4[8] = 0u;
    v4[9] = 0u;
    v4[6] = 0u;
    v4[7] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *v4 = 0u;
    v4[1] = 0u;
    sub_2367EF254((uint64_t)v4);
    *(_BYTE *)(a1 + v3 + 2824) = 0;
    v3 += 456;
  }
  while (v3 != 1824);
  *(_QWORD *)(a1 + 4200) = 0;
  return a1;
}

void sub_2367EF178(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v6;

  for (i = 0; i != -15; i -= 5)
    sub_2367C2F38(&v1[i + 217]);
  sub_2367C2F38(v1 + 202);
  v6 = (void *)v1[196];
  if (v6)
  {
    v1[197] = (uint64_t)v6;
    operator delete(v6);
  }
  sub_2367EF548(v3);
  sub_2367C2F38(v1 + 146);
  sub_2367C2F38(v1 + 141);
  sub_2367C2F38(v1 + 136);
  sub_2367C2F38(v1 + 131);
  sub_2367EF5C8(v2);
  sub_2367C2F38(v1 + 22);
  _Unwind_Resume(a1);
}

uint64_t sub_2367EF254(uint64_t a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = &off_2507FFCE8;
  *(_DWORD *)(a1 + 8) = 1;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F4014(a1 + 16, (uint64_t)&v3);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  sub_2367CA390(a1 + 216);
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return a1;
}

void sub_2367EF300(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  uint64_t i;
  uint64_t v5;

  for (i = 25; i != 10; i -= 5)
    sub_2367C2F38(&v1[i]);
  if (*((char *)v1 + 87) < 0)
    operator delete(*v2);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

uint64_t *sub_2367EF354(uint64_t *a1)
{
  void *v2;
  uint64_t i;
  uint64_t v4;
  void **v6;

  v6 = (void **)(a1 + 52);
  sub_2367D077C(&v6);
  a1[27] = (uint64_t)&off_2507FFA18;
  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = (uint64_t)v2;
    operator delete(v2);
  }
  for (i = 25; i != 10; i -= 5)
    sub_2367C2F38(&a1[i]);
  if (*((char *)a1 + 87) < 0)
    operator delete((void *)a1[8]);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sub_2367EF3E8(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  unsigned int v9;
  BOOL v10;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2367C9C54((_QWORD *)(a1 + 96), byte_23692376C, "N3jxl8ACImageTIiEE", 0x27uLL);
  v2 = *(unsigned __int8 **)(a1 + 96);
  v3 = *(unsigned __int8 **)(a1 + 104);
  v4 = v2 + 1;
  if (v2 != v3 && v4 != v3)
  {
    v6 = *v2;
    v7 = v2 + 1;
    do
    {
      v9 = *v7++;
      v8 = v9;
      v10 = v6 >= v9;
      if (v6 <= v9)
        v6 = v8;
      if (!v10)
        v2 = v4;
      v4 = v7;
    }
    while (v7 != v3);
  }
  *(_QWORD *)(a1 + 120) = *v2 + 1;
  *(_QWORD *)(a1 + 128) = 1;
  return a1;
}

void sub_2367EF490(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    v1[13] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[9];
  if (v6)
  {
    v1[10] = v6;
    operator delete(v6);
  }
  v7 = 0;
  while (1)
  {
    v8 = (void *)v1[v7 + 6];
    if (v8)
    {
      v1[v7 + 7] = v8;
      operator delete(v8);
    }
    v7 -= 3;
    if (v7 == -9)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *sub_2367EF4E4(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  for (i = 0; i != -9; i -= 3)
  {
    v5 = (void *)a1[i + 6];
    if (v5)
    {
      a1[i + 7] = v5;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t sub_2367EF548(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 288);
  if (v3)
  {
    *(_QWORD *)(a1 + 296) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 264);
  if (v4)
  {
    *(_QWORD *)(a1 + 272) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 240);
  if (v5)
  {
    *(_QWORD *)(a1 + 248) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 216);
  sub_2367E9700(&v7);
  sub_2367E9740((_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_2367EF5C8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 720);
  sub_2367DC2DC(&v3);
  sub_2367D7A7C((uint64_t *)(a1 + 8));
  return a1;
}

void sub_2367EF608()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_2508004E8;
  __cxa_throw(exception, (struct type_info *)&unk_2507FF410, (void (*)(void *))std::exception::~exception);
}

void sub_2367EF63C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B7F8F48);
}

void sub_2367EF664()
{
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_2367EF678()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2507FDF38;
  return result;
}

void sub_2367EF69C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2507FDF38;
}

void sub_2367EF6B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(v2 + 56) = 8 * (*(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 32) + *(_QWORD *)(*a2 + 40))
                       - *(_QWORD *)(*a2 + 8);
  sub_2367DBFFC(v2);
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367EF708(uint64_t a1, uint64_t a2)
{
  if (sub_2367EF74C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3jxl12_GLOBAL__N_112GetBitReaderENS_4SpanIKhEEE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *sub_2367EF740()
{
  return &unk_2507FD968;
}

BOOL sub_2367EF74C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t JxlDecoderGetBasicInfo(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  float v11;
  uint64_t i;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (!*(_BYTE *)(a1 + 39))
    return 2;
  if (!a2)
    return 0;
  *(_OWORD *)(a2 + 188) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(unsigned __int8 *)(a1 + 1024);
  v4 = sub_2367F4718(a1 + 1616);
  v5 = v4;
  *(_DWORD *)(a2 + 4) = v4;
  if (*(_BYTE *)(a1 + 1624))
    v6 = 8 * *(_DWORD *)(a1 + 1628) + 8;
  else
    v6 = *(_DWORD *)(a1 + 1632);
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 36) = *(_BYTE *)(a1 + 1233) == 0;
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(a1 + 1220);
  v8 = *(unsigned __int8 *)(a1 + 1444);
  v9 = *(unsigned __int8 *)(a1 + 1445);
  *(_DWORD *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = v9;
  v10 = *(_DWORD *)(a1 + 1440);
  *(_DWORD *)(a2 + 48) = v10;
  if (!*(_BYTE *)(a1 + 1000))
  {
    if (v10 < 5)
    {
      v4 = v6;
      v6 = v5;
    }
    else
    {
      *(_DWORD *)(a2 + 4) = v6;
      *(_DWORD *)(a2 + 8) = v4;
    }
    v5 = v6;
    *(_DWORD *)(a2 + 48) = 1;
    v6 = v4;
  }
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 1492);
  v11 = *(float *)(a1 + 1004);
  if (v11 > 0.0)
    *(float *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 1496);
  *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(a1 + 1500);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 1504);
  for (i = *(_QWORD *)(a1 + 1520); ; i += 96)
  {
    if (i == *(_QWORD *)(a1 + 1528))
    {
      v13 = 0;
      *(_DWORD *)(a2 + 60) = 0;
      *(_DWORD *)(a2 + 64) = 0;
      goto LABEL_21;
    }
    if (!*(_DWORD *)(i + 12))
      break;
  }
  *(_QWORD *)(a2 + 60) = *(_QWORD *)(i + 28);
  v13 = *(unsigned __int8 *)(i + 72);
LABEL_21:
  *(_DWORD *)(a2 + 68) = v13;
  if (*(_DWORD *)(a1 + 1296) == 1)
    v14 = 1;
  else
    v14 = 3;
  v15 = *(_DWORD *)(a1 + 1512);
  *(_DWORD *)(a2 + 52) = v14;
  *(_DWORD *)(a2 + 56) = v15;
  if (v8)
  {
    *(_DWORD *)(a2 + 72) = sub_2367F4874(a1 + 1544);
    if (*(_BYTE *)(a1 + 1552))
      v16 = 8 * *(_DWORD *)(a1 + 1556);
    else
      v16 = *(_DWORD *)(a1 + 1560);
    *(_DWORD *)(a2 + 76) = v16;
  }
  if (v9)
  {
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 1584);
    v17 = *(unsigned __int8 *)(a1 + 1596);
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 1592);
    *(_DWORD *)(a2 + 92) = v17;
  }
  if (*(_BYTE *)(a1 + 1446))
  {
    *(_DWORD *)(a2 + 96) = sub_2367F4718(a1 + 1448);
    if (*(_BYTE *)(a1 + 1456))
      v6 = 8 * *(_DWORD *)(a1 + 1460) + 8;
    else
      v6 = *(_DWORD *)(a1 + 1464);
  }
  else
  {
    *(_DWORD *)(a2 + 96) = v5;
  }
  result = 0;
  *(_DWORD *)(a2 + 100) = v6;
  return result;
}

float JxlDecoderGetExtraChannelInfo(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  float result;

  if (*(_BYTE *)(a1 + 39))
  {
    v3 = *(_QWORD *)(a1 + 1520);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1528) - v3) >> 5) > a2)
    {
      v4 = v3 + 96 * a2;
      v5 = *(_DWORD *)(v4 + 28);
      *(_DWORD *)a3 = *(_DWORD *)(v4 + 12);
      *(_DWORD *)(a3 + 4) = v5;
      if (*(_BYTE *)(v4 + 24))
        v6 = *(_DWORD *)(v4 + 32);
      else
        v6 = 0;
      v7 = *(_DWORD *)(v4 + 40);
      *(_DWORD *)(a3 + 8) = v6;
      *(_DWORD *)(a3 + 12) = v7;
      if (*(char *)(v4 + 71) < 0)
        v4 = *(_QWORD *)(v4 + 56);
      else
        LODWORD(v4) = *(unsigned __int8 *)(v4 + 71);
      v8 = v3 + 96 * a2;
      v9 = *(unsigned __int8 *)(v8 + 72);
      *(_DWORD *)(a3 + 16) = v4;
      *(_DWORD *)(a3 + 20) = v9;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v8 + 76);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(v8 + 80);
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(v8 + 84);
      result = *(float *)(v8 + 88);
      *(float *)(a3 + 36) = result;
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(v8 + 92);
    }
  }
  return result;
}

uint64_t JxlDecoderGetExtraChannelName(uint64_t a1, unint64_t a2, void *__dst, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  size_t v8;

  if (!*(_BYTE *)(a1 + 39))
    return 2;
  v4 = *(_QWORD *)(a1 + 1520);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1528) - v4) >> 5) <= a2)
    return 1;
  v5 = v4 + 96 * a2;
  v6 = (_QWORD *)(v5 + 48);
  v7 = *(char *)(v5 + 71);
  if (v7 < 0)
  {
    v8 = v6[1] + 1;
    if (v8 <= a4)
    {
      v6 = (_QWORD *)*v6;
      goto LABEL_10;
    }
    return 1;
  }
  if (v7 >= a4)
    return 1;
  v8 = v7 + 1;
LABEL_10:
  memcpy(__dst, v6, v8);
  return 0;
}

uint64_t JxlDecoderGetColorAsEncodedProfile(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[6];
  uint64_t v10;

  if (!*(_BYTE *)(a1 + 41))
    return 2;
  if (a2 == 1 && *(_BYTE *)(a1 + 1233))
    v4 = *(_QWORD *)(a1 + 3304) + 5192;
  else
    v4 = a1 + 1240;
  if (*(_BYTE *)(v4 + 9))
    return 1;
  if (!a3)
    return 0;
  sub_2367C5B34((uint64_t)v9, v4 + 16);
  result = 0;
  *(_QWORD *)(a3 + 96) = v10;
  v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  v8 = v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(_OWORD *)(a3 + 48) = v8;
  return result;
}

uint64_t JxlDecoderGetICCProfileSize(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 41))
    return 2;
  if (a2 == 1 && *(_BYTE *)(a1 + 1233))
    v3 = *(_QWORD *)(a1 + 3304) + 5192;
  else
    v3 = a1 + 1240;
  if (*(_BYTE *)(v3 + 9) && (*(_DWORD *)(a1 + 1296) & 0xFFFFFFFE) == 2)
    return 1;
  result = 0;
  if (a3)
    *a3 = *(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32);
  return result;
}

uint64_t JxlDecoderGetColorAsICCProfile(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  v10 = 0;
  result = JxlDecoderGetICCProfileSize(a1, a2, &v10);
  if (!(_DWORD)result)
  {
    if (v10 <= a4)
    {
      if (*(_BYTE *)(a1 + 41))
      {
        if (a2 == 1 && *(_BYTE *)(a1 + 1233))
          v9 = *(_QWORD *)(a1 + 3304) + 5192;
        else
          v9 = a1 + 1240;
        memcpy(a3, *(const void **)(v9 + 32), *(_QWORD *)(v9 + 40) - *(_QWORD *)(v9 + 32));
        return 0;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t JxlDecoderGetIntendedDownsamplingRatio(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1048);
}

uint64_t JxlDecoderFlushImage(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t i;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v18[2];
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD v21[2];

  if (!*(_BYTE *)(a1 + 1056))
    return 1;
  if (*(_DWORD *)(a1 + 3368) != 2)
    return 1;
  v1 = *(_QWORD *)(a1 + 3312);
  if (!*(_BYTE *)(v1 + 1410))
    return 1;
  if (*(_DWORD *)(v1 + 360))
    v2 = 1;
  else
    v2 = *(_BYTE *)(v1 + 304) != 0;
  for (i = *(_QWORD *)(v1 + 392); i != *(_QWORD *)(v1 + 400); i += 40)
    v2 |= *(_DWORD *)(i + 8) != 0;
  if ((v2 & 1) != 0 && !*(_BYTE *)(v1 + 1424))
    goto LABEL_35;
  if (*(_DWORD *)(v1 + 64) != 3 || *(_BYTE *)(v1 + 1424))
  {
    sub_2367D7D9C(*(_QWORD *)(a1 + 3312));
    v5 = *(unsigned __int8 **)(v1 + 1360);
    v6 = *(unsigned __int8 **)(v1 + 1368);
    v7 = v5;
    if (v5 != v6)
    {
      v8 = v5 + 1;
      v7 = *(unsigned __int8 **)(v1 + 1360);
      if (v5 + 1 != v6)
      {
        v9 = *v5;
        v7 = *(unsigned __int8 **)(v1 + 1360);
        v10 = v5 + 1;
        do
        {
          v12 = *v10++;
          v11 = v12;
          if (v12 < v9)
          {
            v9 = v11;
            v7 = v8;
          }
          v8 = v10;
        }
        while (v10 != v6);
      }
    }
    if (*(_DWORD *)(v1 + 160) <= *v7)
      goto LABEL_34;
    if (v5 == v6)
    {
      v14 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        if (*(_DWORD *)(v1 + 160) > v5[v13])
        {
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)v1 + 4488) + 16))(*(_QWORD *)(*(_QWORD *)v1 + 4488), v13);
          v6 = *(unsigned __int8 **)(v1 + 1368);
          v5 = *(unsigned __int8 **)(v1 + 1360);
        }
        ++v13;
        v14 = v6 - v5;
      }
      while (v13 < v6 - v5);
    }
    v20 = 0;
    v16 = *(_QWORD **)(v1 + 8);
    v18[0] = v1;
    v18[1] = &v20;
    v19 = v1;
    if (!v16)
    {
      v21[0] = 0;
      v21[1] = v21;
      v16 = v21;
    }
    v15 = sub_2367DC640(v16, v14, &v19, (uint64_t)v18);
    if (v15)
      return v15 != 0;
    v17 = atomic_load(&v20);
    if ((v17 & 1) == 0)
    {
LABEL_34:
      v15 = sub_2367E448C(v1 + 776, v1 + 48, *(_QWORD *)v1, *(_QWORD **)(v1 + 8), *(unsigned __int8 *)(v1 + 1424));
      return v15 != 0;
    }
LABEL_35:
    v15 = 1;
    return v15 != 0;
  }
  v15 = 0;
  return v15 != 0;
}

uint64_t JxlDecoderSetCms(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = (uint64_t *)(a1 + 3304);
  v4 = *(_QWORD *)(a1 + 3304);
  if (!v4)
  {
    v5 = (void *)operator new();
    bzero(v5, 0x16F8uLL);
    sub_2367EE784((uint64_t)v5);
    sub_2367E8C9C(v3, (uint64_t)v5);
    v4 = *v3;
  }
  v6 = (_OWORD *)(v4 + 5816);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[3];
  v6[2] = a2[2];
  v6[3] = v9;
  *v6 = v7;
  v6[1] = v8;
  *(_BYTE *)(*v3 + 5812) = 1;
  return 0;
}

void sub_2367EFF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7F8F48](v1, 0x10F2C40BD9CC6D3);
  _Unwind_Resume(a1);
}

uint64_t JxlDecoderPreviewOutBufferSize(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  if (*a2 > 2 || *(_DWORD *)(a1 + 2976) == 1)
    return sub_2367EFF7C(a1, a2, 0, a3, 1);
  else
    return 1;
}

uint64_t sub_2367EFF7C(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = 0;
  v10 = sub_2367F00D8(a1, a2, &v24);
  if ((_DWORD)v10)
    return v10;
  v22 = 0;
  v23 = 0;
  if (a5)
  {
    v11 = *(_BYTE *)(a1 + 1000) != 0;
    v12 = *(_DWORD *)(a1 + 1440);
    if (*(_BYTE *)(a1 + 1000) || v12 < 5)
    {
      v15 = sub_2367F4874(a1 + 1544);
    }
    else
    {
      if (*(_BYTE *)(a1 + 1552))
        v13 = 8 * *(_DWORD *)(a1 + 1556);
      else
        v13 = *(_DWORD *)(a1 + 1560);
      v11 = 0;
      v15 = v13;
    }
    v23 = v15;
    if (v11 || v12 < 5)
    {
      if (*(_BYTE *)(a1 + 1552))
        v17 = 8 * *(_DWORD *)(a1 + 1556);
      else
        v17 = *(_DWORD *)(a1 + 1560);
      v16 = v17;
    }
    else
    {
      v16 = sub_2367F4874(a1 + 1544);
    }
    v22 = v16;
    if (!a3)
      goto LABEL_20;
  }
  else
  {
    sub_2367EEDB4(a1, &v23, &v22);
    if (!a3)
    {
LABEL_20:
      v14 = *a2;
      goto LABEL_21;
    }
  }
  v14 = 1;
LABEL_21:
  v18 = (unint64_t)(v23 * v14 * v24 + 7) >> 3;
  v19 = *((_QWORD *)a2 + 2);
  v20 = v18;
  if (v19 >= 2)
    v20 = (v19 + v18 - 1) / v19 * v19;
  *a4 = v18 + (v22 - 1) * v20;
  return v10;
}

uint64_t sub_2367F00D8(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 39))
    return 2;
  if (!*(_BYTE *)(a1 + 1003) && (!*(_QWORD *)(a1 + 3352) || !*(_DWORD *)(a1 + 3368)) || *a2 > 4u)
    return 1;
  v3 = a2[1];
  if (v3 > 5)
  {
    v4 = 0;
    result = 1;
  }
  else
  {
    v4 = qword_236922660[v3];
    result = dword_23691FF7C[v3];
  }
  *a3 = v4;
  return result;
}

uint64_t JxlDecoderSetPreviewOutBuffer(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  __int128 v9;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 39)
    || !*(_BYTE *)(a1 + 1444)
    || (*(_BYTE *)(a1 + 1013) & 2) == 0
    || *a2 <= 2 && *(_DWORD *)(a1 + 2976) != 1)
  {
    return 1;
  }
  v10 = 0;
  result = sub_2367EFF7C(a1, a2, 0, &v10, 1);
  if (!(_DWORD)result)
  {
    result = 1;
    if (v10 <= a4)
    {
      *(_BYTE *)(a1 + 1056) = 1;
      *(_QWORD *)(a1 + 1064) = a3;
      *(_QWORD *)(a1 + 1120) = a4;
      v9 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 1144) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 1128) = v9;
      return 0;
    }
  }
  return result;
}

uint64_t JxlDecoderImageOutBufferSize(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  if (*a2 > 2 || *(_DWORD *)(a1 + 2976) == 1)
    return sub_2367EFF7C(a1, a2, 0, a3, 0);
  else
    return 1;
}

uint64_t JxlDecoderSetImageOutBuffer(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  __int128 v9;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 39)
    || (*(_BYTE *)(a1 + 1013) & 0x10) == 0
    || *(_BYTE *)(a1 + 1056) && *(_QWORD *)(a1 + 1080)
    || *a2 <= 2 && *(_DWORD *)(a1 + 2976) != 1)
  {
    return 1;
  }
  v10 = 0;
  result = sub_2367EFF7C(a1, a2, 0, &v10, 0);
  if (!(_DWORD)result)
  {
    result = 1;
    if (v10 <= a4)
    {
      *(_BYTE *)(a1 + 1056) = 1;
      *(_QWORD *)(a1 + 1064) = a3;
      *(_QWORD *)(a1 + 1120) = a4;
      v9 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 1144) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 1128) = v9;
      return 0;
    }
  }
  return result;
}

uint64_t JxlDecoderExtraChannelBufferSize(uint64_t a1, unsigned int *a2, _QWORD *a3, unsigned int a4)
{
  if (*(_BYTE *)(a1 + 39) && (*(_BYTE *)(a1 + 1013) & 0x10) != 0 && *(_DWORD *)(a1 + 1512) > a4)
    return sub_2367EFF7C(a1, a2, 1, a3, 0);
  else
    return 1;
}

__n128 JxlDecoderSetExtraChannelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  __n128 result;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  unint64_t v30;

  v30 = 0;
  if (!JxlDecoderExtraChannelBufferSize(a1, (unsigned int *)a2, &v30, a5) && v30 <= a4)
  {
    v11 = *(char **)(a1 + 1176);
    v12 = *(char **)(a1 + 1168);
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v12) >> 3);
    if (v13 > a5)
    {
LABEL_25:
      v28 = (__n128 *)&v12[40 * a5];
      result = *(__n128 *)a2;
      v28[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
      *v28 = result;
      v29 = *(_QWORD *)(a1 + 1168) + 40 * a5;
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 24) = a3;
      *(_QWORD *)(v29 + 32) = a4;
      return result;
    }
    v14 = *(unsigned int *)(a1 + 1512);
    v15 = v14 - v13;
    if (v14 <= v13)
    {
      if (v14 >= v13)
      {
LABEL_24:
        v12 = *(char **)(a1 + 1168);
        goto LABEL_25;
      }
      v26 = &v12[40 * v14];
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 1184);
      if (0xCCCCCCCCCCCCCCCDLL * ((v16 - (uint64_t)v11) >> 3) < v15)
      {
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (uint64_t)v12) >> 3);
        v18 = 2 * v17;
        if (2 * v17 <= v14)
          v18 = *(unsigned int *)(a1 + 1512);
        if (v17 >= 0x333333333333333)
          v19 = 0x666666666666666;
        else
          v19 = v18;
        if (v19 > 0x666666666666666)
          sub_2367C3488();
        v20 = (char *)operator new(40 * v19);
        v21 = &v20[8 * ((v11 - v12) >> 3)];
        v22 = v21;
        v23 = 40 * v14 - 8 * ((v11 - v12) >> 3);
        do
        {
          *((_QWORD *)v22 + 4) = 0;
          *(_OWORD *)v22 = 0uLL;
          *((_OWORD *)v22 + 1) = 0uLL;
          v22 += 40;
          v23 -= 40;
        }
        while (v23);
        if (v11 != v12)
        {
          do
          {
            v24 = *(_OWORD *)(v11 - 40);
            v25 = *(_OWORD *)(v11 - 24);
            *((_QWORD *)v21 - 1) = *((_QWORD *)v11 - 1);
            *(_OWORD *)(v21 - 24) = v25;
            *(_OWORD *)(v21 - 40) = v24;
            v21 -= 40;
            v11 -= 40;
          }
          while (v11 != v12);
          v11 = v12;
        }
        *(_QWORD *)(a1 + 1168) = v21;
        *(_QWORD *)(a1 + 1176) = &v20[40 * v14];
        *(_QWORD *)(a1 + 1184) = &v20[40 * v19];
        if (v11)
          operator delete(v11);
        goto LABEL_24;
      }
      v26 = &v11[40 * v15];
      v27 = 40 * v14 - 8 * ((v11 - v12) >> 3);
      do
      {
        *((_QWORD *)v11 + 4) = 0;
        *(_OWORD *)v11 = 0uLL;
        *((_OWORD *)v11 + 1) = 0uLL;
        v11 += 40;
        v27 -= 40;
      }
      while (v27);
    }
    *(_QWORD *)(a1 + 1176) = v26;
    goto LABEL_24;
  }
  return result;
}

double JxlDecoderSetImageOutCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)(a1 + 1104) = a3;
  *(_QWORD *)(a1 + 1112) = a4;
  *(_QWORD *)&result = JxlDecoderSetMultithreadedImageOutCallback(a1, a2, (uint64_t)nullsub_10, (uint64_t)sub_2367F0588, (uint64_t)nullsub_11, a1 + 1104).n128_u64[0];
  return result;
}

uint64_t sub_2367F0588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))a1)(*(_QWORD *)(a1 + 8), a3, a4, a5, a6);
}

__n128 JxlDecoderSetMultithreadedImageOutCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;

  if ((!*(_BYTE *)(a1 + 1056) || !*(_QWORD *)(a1 + 1064))
    && a3
    && a4
    && a5
    && !sub_2367F00D8(a1, (_DWORD *)a2, &v13))
  {
    *(_BYTE *)(a1 + 1056) = 1;
    *(_QWORD *)(a1 + 1072) = a3;
    *(_QWORD *)(a1 + 1080) = a4;
    *(_QWORD *)(a1 + 1088) = a5;
    *(_QWORD *)(a1 + 1096) = a6;
    result = *(__n128 *)a2;
    *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 16);
    *(__n128 *)(a1 + 1128) = result;
  }
  return result;
}

uint64_t JxlDecoderGetFrameHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int32x2_t *v14;
  int32x2_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int32x2_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 3352) || !*(_DWORD *)(a1 + 3368))
    return 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *(_QWORD *)(a1 + 3352);
  if (*(_BYTE *)(a1 + 1445))
  {
    *(_DWORD *)a2 = *(_DWORD *)(v4 + 376);
    if (*(_BYTE *)(a1 + 1596))
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + 380);
  }
  if (*(char *)(v4 + 103) < 0)
    v5 = *(_QWORD *)(v4 + 88);
  else
    LODWORD(v5) = *(unsigned __int8 *)(v4 + 103);
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(v4 + 392);
  v25 = 0;
  v26 = 0;
  sub_2367EEDB4(a1, &v26, &v25);
  v7 = v25;
  v8 = v26;
  *(_DWORD *)(a2 + 28) = v26;
  *(_DWORD *)(a2 + 32) = v7;
  if (*(_BYTE *)(a1 + 1003))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    v14 = *(int32x2_t **)(a1 + 3352);
    if (v14[32].i8[0])
    {
      v15 = v14[37];
      *(int32x2_t *)(a2 + 20) = v15;
      *(_DWORD *)(a2 + 16) = 1;
    }
    else
    {
      *(_DWORD *)(a2 + 24) = 0;
      v15 = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    if (!*(_BYTE *)(a1 + 1000))
    {
      v16 = *(_DWORD *)(a1 + 1440);
      if (v16 >= 5)
      {
        if (*(_BYTE *)(a1 + 1624))
          v19 = 8 * *(_DWORD *)(a1 + 1628) + 8;
        else
          v19 = *(_DWORD *)(a1 + 1632);
        v17 = v19;
        v21 = sub_2367F4718(a1 + 1616);
        v20 = vrev64_s32(*(int32x2_t *)(a2 + 20));
        *(int32x2_t *)(a2 + 20) = v20;
        v16 = *(_DWORD *)(a1 + 1440);
      }
      else
      {
        v24 = v15;
        v17 = sub_2367F4718(a1 + 1616);
        if (*(_BYTE *)(a1 + 1624))
          v18 = 8 * *(_DWORD *)(a1 + 1628) + 8;
        else
          v18 = *(_DWORD *)(a1 + 1632);
        v20 = v24;
        v21 = v18;
      }
      v22 = ((_BYTE)v16 - 1) & 3;
      if ((((_BYTE)v16 - 1) & 3) != 0 && v22 != 3)
        *(_DWORD *)(a2 + 20) = v17 - (v8 + v20.i32[0]);
      if (v22 >= 2)
        *(_DWORD *)(a2 + 24) = v21 - v7 - v20.i32[1];
    }
    v23 = *(_QWORD *)(a1 + 3352);
    v9 = *(_DWORD *)(v23 + 312);
    v10 = *(_DWORD *)(v23 + 324);
    v11 = *(_DWORD *)(v23 + 316);
    v12 = *(unsigned __int8 *)(v23 + 320);
    v13 = *(_DWORD *)(v23 + 396);
  }
  result = 0;
  *(_DWORD *)(a2 + 36) = v9;
  *(_DWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 44) = v11;
  *(_DWORD *)(a2 + 48) = v12;
  *(_DWORD *)(a2 + 52) = v13;
  return result;
}

uint64_t JxlDecoderGetExtraChannelBlendInfo(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 3352);
  if (!v3 || !*(_DWORD *)(a1 + 3368) || *(unsigned int *)(a1 + 1512) <= a2)
    return 1;
  result = 0;
  v5 = *(_QWORD *)(v3 + 344) + 40 * a2;
  v6 = *(_DWORD *)(v5 + 20);
  v7 = *(_DWORD *)(v5 + 12);
  *a3 = *(_DWORD *)(v5 + 8);
  a3[1] = v6;
  LODWORD(v5) = *(unsigned __int8 *)(v5 + 16);
  a3[2] = v7;
  a3[3] = v5;
  return result;
}

uint64_t JxlDecoderGetFrameName(uint64_t a1, void *__dst, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  size_t v5;

  v3 = *(_QWORD *)(a1 + 3352);
  if (v3 && *(_DWORD *)(a1 + 3368))
  {
    v4 = (_QWORD *)(v3 + 80);
    if (*(char *)(v3 + 103) < 0)
    {
      v5 = *(_QWORD *)(v3 + 88) + 1;
      if (v5 <= a3)
      {
        v4 = (_QWORD *)*v4;
        goto LABEL_10;
      }
    }
    else if (*(unsigned __int8 *)(v3 + 103) < a3)
    {
      v5 = *(unsigned __int8 *)(v3 + 103) + 1;
LABEL_10:
      memcpy(__dst, v4, v5);
      return 0;
    }
  }
  return 1;
}

uint64_t JxlDecoderSetPreferredColorProfile(uint64_t a1, int *a2)
{
  return JxlDecoderSetOutputColorProfile(a1, a2, 0, 0);
}

uint64_t JxlDecoderSetOutputColorProfile(uint64_t a1, int *a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  _BOOL4 v12;
  void *__p[3];
  uint64_t (**v14)();
  BOOL v15;
  _BYTE v16[16];
  void *v17;
  void *v18;

  if (a2 && a3)
    return 1;
  if (!((unint64_t)a2 | (unint64_t)a3))
    return 1;
  if (!*(_BYTE *)(a1 + 41))
    return 1;
  if (*(_BYTE *)(a1 + 42))
    return 1;
  v8 = *(_QWORD *)(a1 + 3304);
  if (a3)
  {
    if (!*(_BYTE *)(v8 + 5812))
      return 1;
  }
  if (!a2)
  {
    sub_2367CA390((uint64_t)&v14);
    memset(__p, 0, sizeof(__p));
    sub_2367C9C54(__p, a3, &a3[a4], a4);
    v12 = sub_2367F0C08((uint64_t)v16, __p, *(_QWORD *)(v8 + 5816), *(unsigned int (**)(uint64_t, _QWORD, _QWORD, int *, int *))(v8 + 5824));
    v15 = !v12;
    if (v12)
      v9 = 1;
    else
      v9 = sub_2367E84EC(v8 + 4944, (uint64_t)&v14);
    if (__p[0])
      operator delete(__p[0]);
    goto LABEL_30;
  }
  v11 = *a2;
  if (*(_DWORD *)(a1 + 2976) != 1)
    goto LABEL_19;
  if (v11 == 1)
    goto LABEL_20;
  if (*(_BYTE *)(a1 + 1056))
  {
    v9 = 1;
    if (*(_DWORD *)(a1 + 1128) < 3u || v11 == 3)
      return v9;
  }
  else
  {
LABEL_19:
    if (v11 == 3)
      return 1;
  }
LABEL_20:
  sub_2367CA390((uint64_t)&v14);
  if (sub_2367F0B34((uint64_t)&v14, a2) || v17 == v18)
    goto LABEL_21;
  if (!sub_2367E7FC8((uint64_t)v16, v8 + 5208))
  {
    if (!sub_2367E84EC(v8 + 4944, (uint64_t)&v14))
    {
      sub_2367F0B6C(a1 + 2920, v8 + 5192);
      goto LABEL_26;
    }
LABEL_21:
    v9 = 1;
    goto LABEL_30;
  }
LABEL_26:
  v9 = 0;
LABEL_30:
  v14 = &off_2507FFA18;
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  return v9;
}

void sub_2367F0AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2367F0B34(uint64_t a1, int *a2)
{
  _BOOL8 v3;

  v3 = sub_2367F0CDC(a1 + 16, a2);
  if (!v3)
    sub_2367C5AC8(a1);
  return v3;
}

uint64_t sub_2367F0B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 16) = v4;
  if (a1 != a2)
    sub_2367C9C54((_QWORD *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

BOOL sub_2367F0C08(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int (*a4)(uint64_t, _QWORD, _QWORD, int *, int *))
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  void *v9;
  int v10;
  int v11[26];

  v7 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = 3;
  *(_DWORD *)(a1 + 56) = 2;
  *(_QWORD *)(a1 + 24) = v6;
  v10 = 0;
  if (!a4(a3, *a2, a2[1] - *a2, v11, &v10))
    return 1;
  *(_BYTE *)(a1 + 44) = v10 != 0;
  result = sub_2367F0CDC(a1, v11);
  if (!result)
  {
    v9 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(a1 + 24) = v9;
      operator delete(v9);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    result = 0;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

BOOL sub_2367F0CDC(uint64_t a1, int *a2)
{
  int v3;
  unsigned int v4;
  _BOOL8 result;
  unsigned int v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  double v15;
  float v17;
  _OWORD v18[3];

  v3 = *a2;
  *(_DWORD *)(a1 + 40) = *a2;
  v4 = a2[1];
  result = 1;
  if (v4 <= 0xB && ((1 << v4) & 0xC06) != 0)
  {
    *(_DWORD *)a1 = v4;
    if (v4 == 2)
    {
      v18[0] = *(_OWORD *)(a2 + 2);
      result = sub_2367F0E9C((int *)a1, (double *)v18);
      if (result)
        return result;
      v3 = *a2;
    }
    if (v3 != 3 && v3 != 0)
      goto LABEL_17;
    v9 = a2[6];
    result = 1;
    if (v9 <= 0xB && ((1 << v9) & 0xA06) != 0)
    {
      *(_DWORD *)(a1 + 4) = v9;
      if (v9 != 2
        || (v10 = *((_OWORD *)a2 + 3),
            v18[0] = *((_OWORD *)a2 + 2),
            v18[1] = v10,
            v18[2] = *((_OWORD *)a2 + 4),
            !(result = sub_2367F0F88((unsigned int *)a1, (double *)v18))))
      {
LABEL_17:
        v11 = a2[20];
        result = 1;
        if (v11 <= 0x12 && ((1 << v11) & 0x72106) != 0)
        {
          v12 = 0;
          v13 = 0;
LABEL_20:
          *(_BYTE *)(a1 + 48) = v13;
          *(_DWORD *)(a1 + 52) = v12;
          *(_DWORD *)(a1 + 56) = v11;
          v14 = a2[24];
          if (v14 <= 3)
          {
            result = 0;
            *(_DWORD *)(a1 + 8) = v14;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
          }
          return result;
        }
        if (v11 == 0xFFFF)
        {
          v15 = *((double *)a2 + 11);
          if (v15 >= 0.000122070312 && v15 <= 1.0)
          {
            if (fabs(v15 + -1.0) <= 0.001)
            {
              v12 = 0;
              v13 = 0;
              v11 = 8;
            }
            else if (fabs(v15 + -0.384615385) <= 0.001)
            {
              v12 = 0;
              v13 = 0;
              v11 = 17;
            }
            else
            {
              v17 = v15 * 10000000.0;
              v12 = vcvtas_u32_f32(v17);
              v13 = 1;
              v11 = 2;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2367F0E9C(int *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  int v6;

  v2 = *a2;
  if (*a2 == 0.0)
    return 1;
  v3 = a2[1];
  if (v3 == 0.0)
    return 1;
  if (fabs(v2 + -0.3127) <= 0.001 && fabs(v3 + -0.329) <= 0.001)
  {
    v4 = 0;
    v6 = 1;
LABEL_15:
    *a1 = v6;
    return v4;
  }
  if (fabs(v2 + -0.333333333) <= 0.001 && fabs(v3 + -0.333333333) <= 0.001)
  {
    v4 = 0;
    v6 = 10;
    goto LABEL_15;
  }
  if (fabs(v2 + -0.314) <= 0.001 && fabs(v3 + -0.351) <= 0.001)
  {
    v4 = 0;
    v6 = 11;
    goto LABEL_15;
  }
  *a1 = 2;
  return sub_2367F1210((unsigned int *)a1 + 15, v2, a2[1]);
}

BOOL sub_2367F0F88(unsigned int *a1, double *a2)
{
  double v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  _BOOL8 result;
  int v11;

  v2 = *a2;
  if (*a2 == 0.0)
    return 1;
  v4 = a2[1];
  if (v4 == 0.0)
    return 1;
  v5 = a2[2];
  if (v5 == 0.0)
    return 1;
  v6 = a2[3];
  if (v6 == 0.0)
    return 1;
  v7 = a2[4];
  if (v7 == 0.0)
    return 1;
  v8 = a2[5];
  if (v8 == 0.0)
    return 1;
  if (fabs(v2 + -0.64) <= 0.001
    && fabs(v4 + -0.33) <= 0.001
    && fabs(v5 + -0.3) <= 0.001
    && fabs(v6 + -0.6) <= 0.001
    && fabs(v7 + -0.15) <= 0.001
    && fabs(v8 + -0.06) <= 0.001)
  {
    result = 0;
    v11 = 1;
LABEL_33:
    a1[1] = v11;
    return result;
  }
  if (fabs(v2 + -0.708) <= 0.001
    && fabs(v4 + -0.292) <= 0.001
    && fabs(v5 + -0.17) <= 0.001
    && fabs(v6 + -0.797) <= 0.001
    && fabs(v7 + -0.131) <= 0.001
    && fabs(v8 + -0.046) <= 0.001)
  {
    result = 0;
    v11 = 9;
    goto LABEL_33;
  }
  if (fabs(v2 + -0.68) <= 0.001
    && fabs(v4 + -0.32) <= 0.001
    && fabs(v5 + -0.265) <= 0.001
    && fabs(v6 + -0.69) <= 0.001
    && fabs(v7 + -0.15) <= 0.001
    && fabs(v8 + -0.06) <= 0.001)
  {
    result = 0;
    v11 = 11;
    goto LABEL_33;
  }
  a1[1] = 2;
  result = sub_2367F1210(a1 + 17, v2, a2[1]);
  if (!result)
  {
    if (!sub_2367F1210(a1 + 19, a2[2], a2[3]))
      return sub_2367F1210(a1 + 21, a2[4], a2[5]);
    return 1;
  }
  return result;
}

BOOL sub_2367F1210(unsigned int *a1, double a2, double a3)
{
  double v3;
  float v5;
  unsigned int v6;
  float v8;
  unsigned int v9;

  v3 = fabs(a3);
  if (fabs(a2) >= 4.0 || v3 >= 4.0)
    return 1;
  v5 = a2 * 1000000.0;
  v6 = llroundf(v5);
  *a1 = v6;
  if (v6 - 0x200000 < 0xFFC00000)
    return 1;
  v8 = a3 * 1000000.0;
  v9 = llroundf(v8);
  a1[1] = v9;
  return v9 - 0x200000 < 0xFFC00000;
}

uint64_t JxlDecoderSetDesiredIntensityTarget(uint64_t a1, float a2)
{
  uint64_t result;

  if (a2 < 0.0)
    return 1;
  result = 0;
  *(float *)(a1 + 1004) = a2;
  return result;
}

uint64_t JxlDecoderSetBoxBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 963) || !*(_BYTE *)(a1 + 961))
    return 1;
  result = 0;
  *(_WORD *)(a1 + 963) = 257;
  *(_QWORD *)(a1 + 968) = a2;
  *(_QWORD *)(a1 + 976) = a3;
  *(_QWORD *)(a1 + 992) = 0;
  return result;
}

uint64_t JxlDecoderReleaseBoxBuffer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 963))
    return 0;
  v1 = *(_QWORD *)(a1 + 992);
  v2 = *(_QWORD *)(a1 + 976) - v1;
  *(_BYTE *)(a1 + 963) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  if (*(_BYTE *)(a1 + 964))
    v3 = *(_QWORD *)(a1 + 984) + v1;
  else
    v3 = 0;
  *(_QWORD *)(a1 + 984) = v3;
  *(_BYTE *)(a1 + 964) = 0;
  return v2;
}

uint64_t JxlDecoderSetDecompressBoxes(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 962) = a2 != 0;
  return 0;
}

uint64_t JxlDecoderGetBoxType(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result;
  _DWORD *v5;

  if (!*(_BYTE *)(a1 + 961))
    return 1;
  result = 0;
  v5 = (_DWORD *)(a1 + 953);
  if (a3)
    ++v5;
  *a2 = *v5;
  return result;
}

uint64_t JxlDecoderGetBoxSizeRaw(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 961))
    return 1;
  if (!a2)
    return 0;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 936);
  return result;
}

uint64_t JxlDecoderGetBoxSizeContents(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 961))
    return 1;
  if (!a2)
    return 0;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 928);
  return result;
}

uint64_t JxlDecoderSetProgressiveDetail(uint64_t a1, int a2)
{
  uint64_t result;

  if ((a2 - 4) < 0xFFFFFFFD)
    return 1;
  result = 0;
  *(_DWORD *)(a1 + 1040) = a2;
  return result;
}

uint64_t JxlDecoderSetImageOutBitDepth(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 1056))
    return 1;
  v2 = *a2;
  v3 = *(unsigned int *)(a1 + 1132);
  if (*a2 == 2)
  {
    v5 = a2[1];
    if (!v5)
      return 1;
    goto LABEL_11;
  }
  if (v2 == 1)
  {
    v4 = (unsigned int *)(a1 + 1220);
  }
  else
  {
    if (v2 || v3 >= 6)
      return 1;
    v4 = (unsigned int *)((char *)&unk_236922648 + 4 * v3);
  }
  v5 = *v4;
  if (v5)
  {
LABEL_11:
    v6 = (_DWORD)v3 == 2 && v5 > 8;
    if (!v6 && ((_DWORD)v3 != 3 || v5 <= 0x10))
    {
      v7 = 0;
      v9 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 1160) = a2[2];
      *(_QWORD *)(a1 + 1152) = v9;
      return v7;
    }
  }
  return 1;
}

uint64_t sub_2367F1484(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)a1 = *a2;
    v5 = a2 + 1;
    v6 = a2[1] + ((unint64_t)(a3 + 7) >> 3);
    sub_2367E8BBC(a2 + 1, v6);
    v7 = a2[4];
    if (a2[3])
      v8 = v6;
    else
      v8 = 0;
    *v5 = v8;
    *(_QWORD *)(a1 + 32) = v7;
    a2[4] = a1;
  }
  return a1;
}

void sub_2367F14F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  sub_2367F1560(a1, a2, &v10, &v9);
  if (a4)
  {
    v7 = a4 + 40 * a3;
    v8 = *(_QWORD *)(v7 + 24) + v10;
    *(_QWORD *)(v7 + 16) += *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v7 + 24) = v8;
  }
}

void sub_2367F1560(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  *(_BYTE *)(a1 + 24) = 1;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *a2 - *(_QWORD *)a1;
    *a3 = v7;
    *a4 = v6 - v7;
    v8 = a2 + 1;
    v9 = a2[1] - ((unint64_t)(v6 - v7) >> 3);
    sub_2367E8BBC(a2 + 1, v9);
    if (a2[3])
      v10 = v9;
    else
      v10 = 0;
    *v8 = v10;
    v11 = *(_QWORD **)(a1 + 32);
    for (a2[4] = v11; v11; v11 = (_QWORD *)v11[4])
      *v11 += v7;
  }
}

void sub_2367F15FC(unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v9[40];
  uint64_t v10;
  uint64_t v11;

  sub_2367F1484((uint64_t)v9, a1, *a2);
  v4 = (unint64_t)*a2 >> 3;
  v5 = *a2 & 7;
  if ((unint64_t)*a2 >= 8)
  {
    v6 = 0;
    if (v4 <= 1)
      v7 = 1;
    else
      v7 = (unint64_t)*a2 >> 3;
    v8 = *a1;
    do
    {
      *(_QWORD *)(a1[3] + (v8 >> 3)) = ((unint64_t)*(unsigned __int8 *)(a2[3] + v6) << (v8 & 7)) | *(unsigned __int8 *)(a1[3] + (v8 >> 3));
      v8 = *a1 + 8;
      *a1 = v8;
      ++v6;
    }
    while (v7 != v6);
  }
  if (v5)
  {
    *(_QWORD *)(a1[3] + (*a1 >> 3)) = ((unint64_t)(*(unsigned __int8 *)(a2[3] + v4) & ~(-1 << v5)) << (*a1 & 7)) | *(unsigned __int8 *)(a1[3] + (*a1 >> 3));
    *a1 += v5;
  }
  sub_2367F1560((uint64_t)v9, a1, &v11, &v10);
}

void sub_2367F16F0(_QWORD *a1, unint64_t **a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v6 = 0;
    do
    {
      v7 = *v2;
      v2 += 5;
      v6 += v7 >> 3;
    }
    while (v2 != v3);
    if (v6)
    {
      v8 = v6 + a1[1];
      sub_2367E8BBC(a1 + 1, v8 + 1);
      v9 = a1[3];
      if (v9)
        v10 = v8 + 1;
      else
        v10 = 0;
      a1[1] = v10;
      v11 = *a1 >> 3;
      v13 = *a2;
      v12 = a2[1];
      if (v13 != v12)
      {
        do
        {
          v14 = *v13;
          if (*v13 >= 8)
          {
            memcpy((void *)(a1[3] + v11), (const void *)v13[3], v14 >> 3);
            v11 += v14 >> 3;
          }
          v13 += 5;
        }
        while (v13 != v12);
        v9 = a1[3];
      }
      *(_BYTE *)(v9 + v11) = 0;
      *a1 += 8 * v6;
    }
  }
}

unint64_t sub_2367F17C4(unint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  float *v30;
  unsigned __int8 *v31;
  float *v32;
  uint64_t v33;
  unsigned int v34;
  float v35;
  float v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;

  v3 = a2[3];
  if (v3)
  {
    v4 = result;
    result = 0;
    v5 = a3[526];
    v6 = *(float *)(v5 + 996);
    v7 = a3[537] >> 2;
    v8 = *(_QWORD *)(v5 + 1080);
    v50 = v5;
    v51 = 2 * v7;
    v9 = a2[2];
    v49 = 8 * v7 + 8;
    v10 = 4 * v7;
    v52 = v7;
    v48 = (8 * v7) | 4;
    v53 = a2;
    do
    {
      if (v9)
      {
        v11 = 0;
        v12 = a2[1] + result;
        v13 = a3[538];
        v14 = a3[537];
        v55 = v13 + v14 * v12 + 4 * *a2;
        v15 = (_QWORD *)a3[526];
        v16 = *(_QWORD *)(v50 + 176) + *(_QWORD *)(v50 + 168) * v12 + *a2;
        v17 = v14 * v12 + 4 * *a2;
        v18 = v13 + v49 + v17;
        v19 = (unsigned __int8 *)(v15[136] + *a2 + v15[135] * v12);
        v20 = v13 + v48 + v17;
        v57 = (_DWORD *)v18;
        v58 = v15[131] + v15[130] * v12 + 4 * *a2;
        v56 = result;
        v54 = v16;
        do
        {
          v21 = *(unsigned __int8 *)(v16 + v11);
          if ((v21 & 1) != 0)
          {
            v22 = 0;
            v23 = v21 >> 1;
            v24 = byte_23692665C[v21 >> 1];
            v25 = *(float *)(v4 + 104) / (float)((float)(v6 * (float)*(int *)(v58 + 4 * v11)) * -1.1716);
            v26 = byte_236926677[v23];
            if (v24 <= 1)
              v27 = 1;
            else
              v27 = v24;
            if (v26 <= 1)
              v28 = 1;
            else
              v28 = byte_236926677[v23];
            v29 = v19;
            v30 = (float *)v18;
            do
            {
              v31 = v29;
              v32 = v30;
              v33 = v27;
              do
              {
                v34 = *v31++;
                v35 = v25 * *(float *)(v4 + 4 * v34 + 44);
                if (v35 >= -0.0001)
                  v36 = -10000.0;
                else
                  v36 = 1.0 / v35;
                *v32++ = v36;
                --v33;
              }
              while (v33);
              ++v22;
              v30 = (float *)((char *)v30 + v10);
              v29 += v8;
            }
            while (v22 != v28);
            v37 = *a2;
            v38 = v57;
            v39 = v28;
            if (!(v11 + *a2))
            {
              do
              {
                *(v38 - 1) = *v38;
                v38 = (_DWORD *)((char *)v38 + v10);
                --v39;
              }
              while (v39);
            }
            v40 = -v37;
            v41 = v11 + v24 + v37;
            v42 = a3[526];
            if (v41 == *(_QWORD *)(v42 + 72))
            {
              v43 = 4 * v24;
              do
              {
                *(_DWORD *)(v18 + v43) = *(_DWORD *)(v20 + v43);
                v43 += v10;
                --v28;
              }
              while (v28);
              if (v11 == v40)
                v44 = 1;
              else
                v44 = v11 + 2;
              v45 = v11 + 3;
            }
            else
            {
              v45 = v11 + 2;
              if (v11 == v40)
                v44 = 1;
              else
                v44 = v11 + 2;
            }
            v46 = v45 + v24 - v44;
            v47 = a2[1];
            if (!(result + v47))
            {
              memcpy((void *)(v55 + 4 * v44 + 4 * v52), (const void *)(v55 + 4 * v44 + 4 * v51), 4 * v46);
              a2 = v53;
              v16 = v54;
              result = v56;
              v47 = v53[1];
              v42 = a3[526];
            }
            if (result + v26 + v47 == *(_QWORD *)(v42 + 80))
            {
              memcpy((void *)(v55 + 4 * v44 + 4 * (v26 + 2) * v52), (const void *)(v55 + 4 * v44 + 4 * (v52 + v52 * v26)), 4 * v46);
              a2 = v53;
              v16 = v54;
              result = v56;
            }
          }
          ++v11;
          v9 = a2[2];
          v18 += 4;
          ++v19;
          v20 += 4;
        }
        while (v11 < v9);
        v3 = a2[3];
      }
      ++result;
    }
    while (result < v3);
  }
  return result;
}

uint64_t sub_2367F1AF8(uint64_t a1)
{
  uint64_t (**v2)();
  __int128 v3;
  uint64_t v4;

  v2 = &off_2507FF550;
  v3 = xmmword_2368AF3F0;
  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v2);
}

uint64x2_t sub_2367F1B3C(uint64_t a1, uint64_t a2, double a3, int64x2_t a4)
{
  int64x2_t v5;
  __int128 v6;
  int64x2_t v7;
  int64x2_t v8;
  uint64x2_t result;

  v5 = *(int64x2_t *)(a1 + 8);
  a4.i64[0] = 1;
  *(_QWORD *)&v6 = vaddq_s64(v5, a4).u64[0];
  *((_QWORD *)&v6 + 1) = vaddq_s64(v5, v5).i64[1];
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) *= 2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  *(_QWORD *)(a1 + 24) >>= 1;
  v7 = *(int64x2_t *)(a1 + 8);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v8.i64[0] = vaddq_s64(v7, v8).u64[0];
  result = vshrq_n_u64((uint64x2_t)v7, 1uLL);
  v8.i64[1] = result.i64[1];
  *(int64x2_t *)(a1 + 8) = v8;
  return result;
}

_QWORD *sub_2367F1BB8(_QWORD *result)
{
  *result = off_2507FD630;
  return result;
}

void sub_2367F1BC8(_QWORD *a1)
{
  *a1 = off_2507FD630;
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F1BE8(uint64_t a1, char a2, _BYTE *a3)
{
  *a3 = a2;
  return 0;
}

uint64_t sub_2367F1BF4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  *a5 = a4;
  return 0;
}

uint64_t sub_2367F1C00(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  *a4 = a3;
  return 0;
}

uint64_t sub_2367F1C0C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a2;
  return 0;
}

uint64_t sub_2367F1C18(float a1, uint64_t a2, float *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t sub_2367F1C24()
{
  return 0;
}

uint64_t sub_2367F1C2C(uint64_t a1)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  if (result <= 1)
    return 1;
  else
    return result;
}

uint64_t sub_2367F1C58()
{
  return 0;
}

uint64_t sub_2367F1C60()
{
  return 0;
}

uint64_t sub_2367F1C68(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 48))(a1, 0, a2);
  if (!(_DWORD)result)
    ++a1[2];
  return result;
}

uint64_t sub_2367F1CA8(uint64_t a1)
{
  ++*(_QWORD *)(a1 + 24);
  return 0;
}

uint64_t sub_2367F1CC4(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;
  _BOOL4 v5;

  v5 = *a3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL4 *))(*(_QWORD *)a1 + 40))(a1, 1, a2, &v5);
  if (!(_DWORD)result)
    *a3 = v5;
  return result;
}

uint64_t sub_2367F1D1C(uint64_t a1, int a2)
{
  return a2 ^ 1u;
}

uint64_t sub_2367F1D24(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  if (!(_DWORD)result)
    return *a3 == 0;
  return result;
}

uint64_t sub_2367F1D60(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *sub_2367F1D6C(_QWORD *result)
{
  *result = off_2507FD630;
  return result;
}

void sub_2367F1D7C(_QWORD *a1)
{
  *a1 = off_2507FD630;
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F1D9C(uint64_t a1, char a2, _BYTE *a3)
{
  *a3 = a2;
  return 0;
}

uint64_t sub_2367F1DA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  *a5 = a4;
  return 0;
}

uint64_t sub_2367F1DB4(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  *a4 = a3;
  return 0;
}

uint64_t sub_2367F1DC0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a2;
  return 0;
}

uint64_t sub_2367F1DCC(float a1, uint64_t a2, float *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t sub_2367F1DD8()
{
  return 0;
}

uint64_t sub_2367F1DE0(uint64_t a1)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  if (result <= 1)
    return 1;
  else
    return result;
}

_QWORD *sub_2367F1E08(_QWORD *result)
{
  *result = off_2507FD630;
  return result;
}

void sub_2367F1E18(_QWORD *a1)
{
  *a1 = off_2507FD630;
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F1E38(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  BOOL v6;

  v6 = *a5 == a4 && *(_BYTE *)(a1 + 32) != 0;
  *(_BYTE *)(a1 + 32) = v6;
  return 0;
}

uint64_t sub_2367F1E58(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  BOOL v5;

  v5 = *a4 == a3 && *(_BYTE *)(a1 + 32) != 0;
  *(_BYTE *)(a1 + 32) = v5;
  return 0;
}

uint64_t sub_2367F1E78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v4;

  v4 = *a3 == a2 && *(_BYTE *)(a1 + 32) != 0;
  *(_BYTE *)(a1 + 32) = v4;
  return 0;
}

uint64_t sub_2367F1E98(uint64_t a1, float *a2, float a3)
{
  BOOL v4;

  v4 = vabds_f32(*a2, a3) < 0.000001 && *(_BYTE *)(a1 + 32) != 0;
  *(_BYTE *)(a1 + 32) = v4;
  return 0;
}

uint64_t sub_2367F1EC4()
{
  return 1;
}

uint64_t sub_2367F1ECC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = &off_2507FF6E8;
  v13 = 1;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v11 = xmmword_2368AF3F0;
  v12 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v10);
  if (!(_DWORD)result)
  {
    if (v13)
    {
      *a2 = 0;
      v6 = v14;
      v7 = v16;
      *a3 = v14;
      if (v7)
      {
        *a2 = v6 - v7;
        v17 = 0;
        sub_2367F1FA8(v6 - v7, &v17);
        v8 = v17 + v6;
        *a3 = v17 + v6;
        v9 = (uint8x8_t)vcnt_s8(v15);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] >= 2uLL)
          *a3 = v8 + 2 * v9.u32[0] - 2;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unint64_t sub_2367F1FA8(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (!result)
  {
    v2 = 2;
    goto LABEL_16;
  }
  if (result < 0x11)
  {
    v2 = 6;
    goto LABEL_16;
  }
  if (result < 0x111)
  {
    v2 = 10;
    goto LABEL_16;
  }
  if (result < 0x1000)
  {
    v7 = 14;
    goto LABEL_15;
  }
  v3 = result >> 12;
  v4 = 12;
  v2 = 19;
  do
  {
    v5 = v3;
    v2 += 9;
    if (v3 < 0x100)
      break;
    v3 >>= 8;
    v6 = v4 >= 0x34;
    v4 += 8;
  }
  while (!v6);
  if (v5 <= 0xFF)
  {
    v7 = v2 - 5;
LABEL_15:
    v2 = v7 + 1;
  }
LABEL_16:
  *a2 = v2;
  return result;
}

_QWORD *sub_2367F202C(_QWORD *result)
{
  *result = off_2507FD630;
  return result;
}

void sub_2367F203C(_QWORD *a1)
{
  *a1 = off_2507FD630;
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F205C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v12;
  int v13;

  v7 = *a5;
  v12 = 0;
  v8 = sub_2367F2290(a2, a3, v7, &v13, &v12);
  v9 = !v8;
  v10 = v12;
  if (v8)
    v10 = 0;
  if (!*(_BYTE *)(a1 + 32))
    v9 = 0;
  *(_BYTE *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) += v10;
  return 0;
}

uint64_t sub_2367F20D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  BOOL v4;
  char v5;

  if (*(_BYTE *)(a1 + 32))
    v4 = (unint64_t)*a4 >> a2 == 0;
  else
    v4 = 0;
  v5 = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) += a2;
  return 0;
}

uint64_t sub_2367F2100(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  v5 = 0;
  sub_2367F1FA8(*a3, &v5);
  *(_QWORD *)(a1 + 40) += v5;
  return 0;
}

uint64_t sub_2367F2148(uint64_t a1, float *a2)
{
  float v2;
  BOOL v3;

  v2 = fabsf(*a2);
  v3 = v2 != INFINITY && v2 <= 65504.0;
  if (!*(_BYTE *)(a1 + 32))
    v3 = 0;
  *(_BYTE *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) += 16;
  return 0;
}

uint64_t sub_2367F21A4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t v8;
  char v9;

  v6 = &off_2507FF770;
  v9 = 1;
  v7 = xmmword_2368AF3F0;
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a2 + 16))(a2, &v6);
  *a3 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, 1, a3);
  if (!(_DWORD)result)
    return *a3 == 0;
  return result;
}

uint64_t sub_2367F2238(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t *))(*a1 + 48))(a1, 0, a2);
  if (!(_DWORD)result)
  {
    ++a1[2];
    v5 = *a2;
    a1[6] = *a2;
    if (v5)
      a1[7] = a1[5];
  }
  return result;
}

BOOL sub_2367F2290(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  _BOOL8 result;
  _QWORD v15[2];

  v5 = 0;
  v15[0] = a1;
  v15[1] = a2;
  *a4 = 0;
  v6 = 64;
  *a5 = 64;
  while (1)
  {
    v7 = *((_DWORD *)v15 + v5);
    if ((v7 & 0x80000000) == 0)
    {
      v8 = (v7 & 0x1F) + 1;
      v9 = v7 >> 5;
      v11 = v9 > a3;
      v10 = (1 << v8) + v9;
      v11 = !v11 && v10 > a3;
      v12 = v8 + 2;
      if (v11 && v12 < v6)
      {
        *a4 = v5;
        *a5 = v12;
        v6 = v8 + 2;
      }
      goto LABEL_12;
    }
    if ((v7 & 0x7FFFFFFF) == a3)
      break;
LABEL_12:
    if (++v5 == 4)
      return v6 == 64;
  }
  result = 0;
  *a4 = v5;
  *a5 = 2;
  return result;
}

uint64_t sub_2367F232C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (**v4)();
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = &off_2507FF5D8;
  v7 = 257;
  v8 = a1;
  bzero(&v9, 0x210uLL);
  v5 = xmmword_2368AF3F0;
  v6 = 0;
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a2 + 16))(a2, &v4);
  if ((_DWORD)result)
    return result;
  else
    return (_BYTE)v7 == 0;
}

_QWORD *sub_2367F23B0(_QWORD *result)
{
  *result = off_2507FD630;
  return result;
}

void sub_2367F23C0(_QWORD *a1)
{
  *a1 = off_2507FD630;
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F23E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a5 = sub_2367F2B30(a2, a3, *(unint64_t **)(a1 + 40));
  v6 = *(_QWORD **)(a1 + 40);
  v8 = v6[3];
  v7 = v6[4];
  v9 = 8 * (v6[2] - v7 + v6[5]) - v6[1];
  v6[7] = v9;
  if (v9 <= 8 * (v8 - v7) + 64)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2367F2450(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v6 = *(unint64_t **)(a1 + 40);
  v8 = (_QWORD *)v6[2];
  v7 = v6[3];
  if ((unint64_t)v8 > v7)
  {
    sub_2367C5188(*(_QWORD **)(a1 + 40));
    v10 = *v6;
    v12 = v6[1];
    v13 = *(unint64_t **)(a1 + 40);
    v11 = (char *)v13[2];
    v7 = v13[3];
  }
  else
  {
    v9 = v6[1];
    v10 = *v6 | (*v8 << v9);
    v11 = (char *)v8 + ((63 - v9) >> 3);
    v6[2] = (unint64_t)v11;
    v12 = v9 | 0x38;
    v13 = v6;
  }
  *v6 = v10 >> a2;
  v6[1] = v12 - a2;
  *a4 = v10 & ~(-1 << a2);
  v14 = v13[4];
  v15 = 8 * (_QWORD)&v11[v13[5] - v14] - v13[1];
  v13[7] = v15;
  if (v15 <= 8 * (v7 - v14) + 64)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2367F2518(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a3 = sub_2367F28AC(*(unint64_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 40);
  v6 = v4[3];
  v5 = v4[4];
  v7 = 8 * (v4[2] - v5 + v4[5]) - v4[1];
  v4[7] = v7;
  if (v7 <= 8 * (v6 - v5) + 64)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2367F257C(uint64_t a1, float *a2)
{
  BOOL v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (sub_2367F27D0(*(unint64_t **)(a1 + 40), a2))
    v3 = 1;
  else
    v3 = *(_BYTE *)(a1 + 32) == 0;
  v4 = !v3;
  *(_BYTE *)(a1 + 32) = v4;
  v5 = *(_QWORD **)(a1 + 40);
  v7 = v5[3];
  v6 = v5[4];
  v8 = 8 * (v5[2] - v6 + v5[5]) - v5[1];
  v5[7] = v8;
  if (v8 <= 8 * (v7 - v6) + 64)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_2367F25EC(uint64_t a1, uint64_t a2)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  v3 = &off_2507FF7F8;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a2 + 16))(a2, &v3);
}

uint64_t sub_2367F2634()
{
  return 1;
}

uint64_t sub_2367F263C(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;

  result = (*(uint64_t (**)(_QWORD *, _QWORD, unint64_t *))(*a1 + 48))(a1, 0, a2);
  if (!(_DWORD)result)
  {
    ++a1[2];
    v5 = *a2;
    if (*a2)
    {
      while (1)
      {
        v6 = &a1[__clz(__rbit64(v5)) + 6];
        result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*a1 + 48))(a1, 0, v6);
        if ((_DWORD)result)
          break;
        v7 = a1[70];
        v8 = __CFADD__(*v6, v7);
        a1[70] = *v6 + v7;
        if (v8)
          return 1;
        v5 &= v5 - 1;
        if (!v5)
        {
          result = 0;
          a1[71] = 8 * (*(_QWORD *)(a1[5] + 16) - *(_QWORD *)(a1[5] + 32) + *(_QWORD *)(a1[5] + 40))
                 - *(_QWORD *)(a1[5] + 8);
          return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2367F2714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  ++*(_QWORD *)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 568);
  if (!v1 || !*(_BYTE *)(a1 + 33))
    return 0;
  v3 = *(_QWORD *)(a1 + 560);
  result = 1;
  v5 = __CFADD__(v3, v1);
  v6 = v3 + v1;
  if (!v5)
  {
    v7 = 8
       * (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16)
        - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)
        + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
       - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (v6 >= v7)
    {
      if (v6 != v7)
      {
        sub_2367EE5C0(*(unint64_t **)(a1 + 40), v6 - v7);
        v8 = *(_QWORD **)(a1 + 40);
        v10 = v8[3];
        v9 = v8[4];
        v11 = 8 * (v8[2] - v9 + v8[5]) - v8[1];
        v8[7] = v11;
        if (v11 > 8 * (v10 - v9) + 64)
          return 0xFFFFFFFFLL;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_2367F27D0(unint64_t *a1, float *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  float v12;

  v4 = (_QWORD *)a1[2];
  if ((unint64_t)v4 > a1[3])
  {
    sub_2367C5188(a1);
    v6 = *a1;
    v7 = a1[1];
  }
  else
  {
    v5 = a1[1];
    v6 = *a1 | (*v4 << v5);
    a1[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    v7 = v5 | 0x38;
  }
  *a1 = v6 >> 16;
  a1[1] = v7 - 16;
  v8 = (v6 >> 10) & 0x1F;
  if (v8 == 31)
    return 1;
  v9 = (unsigned __int16)v6;
  v10 = v6 & 0x3FF;
  result = 0;
  if (v8)
  {
    *(_DWORD *)a2 = ((v9 << 16) & 0x80000000 | (v8 << 23) | (v10 << 13)) + 939524096;
  }
  else
  {
    v12 = -(float)((float)((float)v10 * 0.00097656) * 0.000061035);
    if (v9 < 0x8000)
      v12 = (float)((float)v10 * 0.00097656) * 0.000061035;
    *a2 = v12;
  }
  return result;
}

uint64_t sub_2367F28AC(unint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t i;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = (_QWORD *)a1[2];
  if ((unint64_t)v2 > a1[3])
  {
    sub_2367C5188(a1);
    v4 = *a1;
    v5 = a1[1];
  }
  else
  {
    v3 = a1[1];
    v4 = *a1 | (*v2 << v3);
    a1[2] = (unint64_t)v2 + ((63 - v3) >> 3);
    v5 = v3 | 0x38;
  }
  v6 = v5 - 2;
  v7 = v4 >> 2;
  *a1 = v4 >> 2;
  a1[1] = v5 - 2;
  v8 = v4 & 3;
  if ((v4 & 3) != 0)
  {
    if (v8 == 2)
    {
      v12 = (_QWORD *)a1[2];
      if ((unint64_t)v12 > a1[3])
      {
        sub_2367C5188(a1);
        v13 = *a1;
        v14 = a1[1];
      }
      else
      {
        v13 = (*v12 << v6) | v7;
        a1[2] = (unint64_t)v12 + ((unint64_t)(65 - v5) >> 3);
        v14 = v6 | 0x38;
      }
      *a1 = v13 >> 8;
      a1[1] = v14 - 8;
      return v13 + 17;
    }
    else if (v8 == 1)
    {
      v9 = (_QWORD *)a1[2];
      if ((unint64_t)v9 > a1[3])
      {
        sub_2367C5188(a1);
        v10 = *a1;
        v11 = a1[1];
      }
      else
      {
        v10 = (*v9 << v6) | v7;
        a1[2] = (unint64_t)v9 + ((unint64_t)(65 - v5) >> 3);
        v11 = v6 | 0x38;
      }
      *a1 = v10 >> 4;
      a1[1] = v11 - 4;
      return (v10 & 0xF) + 1;
    }
    else
    {
      v15 = (_QWORD *)a1[2];
      if ((unint64_t)v15 > a1[3])
      {
        sub_2367C5188(a1);
        v16 = *a1;
        v17 = a1[1];
      }
      else
      {
        v16 = (*v15 << v6) | v7;
        a1[2] = (unint64_t)v15 + ((unint64_t)(65 - v5) >> 3);
        v17 = v6 | 0x38;
      }
      v8 = v16 & 0xFFF;
      v18 = v17 - 12;
      v19 = v16 >> 12;
      *a1 = v16 >> 12;
      a1[1] = v18;
      for (i = 12; ; i += 8)
      {
        v21 = (_QWORD *)a1[2];
        if ((unint64_t)v21 > a1[3])
        {
          sub_2367C5188(a1);
          v22 = *a1;
          v23 = a1[1];
        }
        else
        {
          v22 = v19 | (*v21 << v18);
          a1[2] = (unint64_t)v21 + ((unint64_t)(63 - v18) >> 3);
          v23 = v18 | 0x38;
        }
        v24 = v23 - 1;
        v25 = v22 >> 1;
        *a1 = v22 >> 1;
        a1[1] = v23 - 1;
        if ((v22 & 1) == 0)
          break;
        v26 = (_QWORD *)a1[2];
        v27 = a1[3];
        if (i == 60)
        {
          if ((unint64_t)v26 > v27)
          {
            sub_2367C5188(a1);
            v30 = *a1;
            v31 = a1[1];
          }
          else
          {
            v30 = (*v26 << v24) | v25;
            a1[2] = (unint64_t)v26 + ((unint64_t)(64 - v23) >> 3);
            v31 = v24 | 0x38;
          }
          *a1 = v30 >> 4;
          a1[1] = v31 - 4;
          return v8 | (v30 << 60);
        }
        if ((unint64_t)v26 > v27)
        {
          sub_2367C5188(a1);
          v28 = *a1;
          v29 = a1[1];
        }
        else
        {
          v28 = (*v26 << v24) | v25;
          a1[2] = (unint64_t)v26 + ((unint64_t)(64 - v23) >> 3);
          v29 = v24 | 0x38;
        }
        v18 = v29 - 8;
        v19 = v28 >> 8;
        *a1 = v28 >> 8;
        a1[1] = v18;
        v8 |= (unint64_t)v28 << i;
      }
    }
  }
  return v8;
}

uint64_t sub_2367F2B30(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v4 = (_QWORD *)a3[2];
  if ((unint64_t)v4 > a3[3])
  {
    sub_2367C5188(a3);
    v6 = *a3;
    v7 = a3[1];
  }
  else
  {
    v5 = a3[1];
    v6 = *a3 | (*v4 << v5);
    a3[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    v7 = v5 | 0x38;
  }
  v8 = v7 - 2;
  *a3 = v6 >> 2;
  a3[1] = v7 - 2;
  v9 = *((_DWORD *)v15 + (v6 & 3));
  if ((v9 & 0x80000000) != 0)
    return v9 & 0x7FFFFFFF;
  v10 = (v9 & 0x1F) + 1;
  v11 = (_QWORD *)a3[2];
  if ((unint64_t)v11 > a3[3])
  {
    sub_2367C5188(a3);
    v12 = *a3;
    v13 = a3[1];
  }
  else
  {
    v12 = (*v11 << v8) | (v6 >> 2);
    a3[2] = (unint64_t)v11 + ((unint64_t)(65 - v7) >> 3);
    v13 = v8 | 0x38;
  }
  *a3 = v12 >> v10;
  a3[1] = v13 - v10;
  return (v12 & ~(-1 << v10)) + (v9 >> 5);
}

BOOL sub_2367F2C24(uint64_t a1, uint64_t a2)
{
  uint64_t (**v4)();
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = &off_2507FF5D8;
  v7 = 257;
  v8 = a1;
  bzero(&v9, 0x210uLL);
  v5 = xmmword_2368AF3F0;
  v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a2 + 16))(a2, &v4) != -1;
}

void sub_2367F2CA0()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F2CB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  _BOOL8 v11;
  unsigned int v12;

  v12 = *(_DWORD *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x6180000002, 0, &v12);
  if ((_DWORD)result)
    return result;
  v5 = v12;
  if (v12 >= 5)
    return 1;
  *(_DWORD *)(a1 + 8) = v12;
  v6 = v5 & 0xFFFFFFFE;
  if (*(_QWORD *)(a1 + 24))
    v7 = v6 == 2;
  else
    v7 = 0;
  v8 = v7;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v8))
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x6280000002, 0, a1 + 12);
  if ((_DWORD)result)
    return result;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2))
  {
LABEL_11:
    if (!*(_QWORD *)(a1 + 24))
    {
      v9 = *(_DWORD *)(a1 + 8);
      goto LABEL_19;
    }
  }
  else if (*(_QWORD *)(a1 + 24) <= (unint64_t)*(unsigned int *)(a1 + 12))
  {
    return 1;
  }
  v9 = *(_DWORD *)(a1 + 8);
  if ((v9 & 0xFFFFFFFE) != 2)
  {
LABEL_19:
    v10 = v9 == 4;
    goto LABEL_20;
  }
  v10 = 1;
LABEL_20:
  if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v10)
    || (result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 16),
        !(_DWORD)result))
  {
    if (*(_DWORD *)(a1 + 8))
      v11 = 1;
    else
      v11 = *(_BYTE *)(a1 + 32) != 0;
    if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v11))
      return 0;
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, a1 + 20);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

void sub_2367F2E74()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F2E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 253) != 0;
  else
    v5 = 0;
  if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v5)
    || (result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x1F00000007, 0, a1 + 8), !(_DWORD)result))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 404) != 0;
    else
      v7 = 0;
    if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v7))
      return 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 32, 0, a1 + 12);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

void sub_2367F2F60()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F2F74(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t result;
  unsigned int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *i;
  unsigned int v16;

  v4 = a1 + 2;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000280000001, 0x8280000003, 1, a1 + 2);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 != 1))
      return 0;
    v6 = a1 + 3;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x6080000002, 0, a1 + 3);
    if (!(_DWORD)result)
    {
      v7 = *v6;
      if (*v6 <= *v4)
      {
        if (*v4 == 1)
        {
          v8 = 0;
LABEL_14:
          a1[v8 + 26] = 0;
          if (!v7)
            return 0;
          v11 = 0;
          v12 = a1 + 4;
          while (1)
          {
            result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 32))(a2, 0x8000000280000001, 0x8000000880000004, 1, v12);
            if ((_DWORD)result)
              break;
            if (v11 && *v12 >= *(v12 - 1))
              return 1;
            ++v11;
            v13 = *v6;
            ++v12;
            if (v11 >= v13)
            {
              if (!(_DWORD)v13)
                return 0;
              v14 = 0;
              for (i = a1 + 15; ; ++i)
              {
                result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x280000002, 0, i);
                if ((_DWORD)result)
                  break;
                v16 = *i;
                if (v14 && v16 <= *(i - 1) || v16 >= *v4)
                  return 1;
                result = 0;
                if (++v14 >= (unint64_t)*v6)
                  return result;
              }
              return result;
            }
          }
        }
        else
        {
          v9 = 0;
          v10 = a1 + 26;
          while (1)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *))(*(_QWORD *)a2 + 40))(a2, 2, 0, v10);
            if ((_DWORD)result)
              break;
            ++v9;
            v8 = *v4 - 1;
            ++v10;
            if (v9 >= v8)
            {
              v7 = *v6;
              goto LABEL_14;
            }
          }
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void sub_2367F3178(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = off_2507FF4B0;
  v3 = (void **)(a1 + 344);
  sub_2367D6C0C(&v3);
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F31EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL8 v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  char v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  _BOOL8 v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  char v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  v58 = *(_DWORD *)(a1 + 16);
  result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, &v58);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 16) = v58;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2)
      && *(_BYTE *)(a1 + 560)
      && *(_DWORD *)(a1 + 16))
    {
      return 1;
    }
    v57 = *(_DWORD *)(a1 + 12) == 1;
    result = (*(uint64_t (**)(uint64_t, _QWORD, BOOL *))(*(_QWORD *)a2 + 24))(a2, 0, &v57);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 12) = v57;
      v5 = (_BYTE *)(a1 + 24);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 48))(a2, 0, a1 + 24);
      if (!(_DWORD)result)
      {
        v6 = *(_QWORD *)(a1 + 408);
        if (v6 && !*(_BYTE *)(v6 + 41))
        {
          LOBYTE(v58) = *(_DWORD *)(a1 + 32) == 2;
          result = (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 24))(a2, 0, &v58);
          if ((_DWORD)result)
            return result;
          v11 = v58;
          v12 = (_BYTE)v58 ? 2 : 1;
          *(_DWORD *)(a1 + 32) = v12;
          v7 = v11 && (unint64_t)((*v5 & 0x20) == 0);
        }
        else
        {
          v7 = 0;
          *(_DWORD *)(a1 + 32) = 0;
        }
        if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v7)
          || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 40), !(_DWORD)result))
        {
          v8 = *(_QWORD *)(a1 + 408);
          if (v8)
            v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 336) - *(_QWORD *)(v8 + 328)) >> 5);
          else
            v9 = 0;
          if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, (*(_QWORD *)v5 & 0x20) == 0))
          {
            result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000280000001, 0x8000000880000004, 1, a1 + 268);
            if ((_DWORD)result)
              return result;
            if (*(_QWORD *)(a1 + 408)
              && !(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, v9 != 0))
            {
              v32 = *(_QWORD *)(a1 + 408);
              v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v32 + 336) - *(_QWORD *)(v32 + 328)) >> 5);
              v58 = 1;
              sub_2367CBAC8((char **)(a1 + 272), v33, &v58);
              if (*(_QWORD *)(v32 + 336) != *(_QWORD *)(v32 + 328))
              {
                v34 = 0;
                v35 = 0;
                v36 = 40;
                do
                {
                  v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 408) + 328) + v36);
                  v38 = (unsigned int *)(*(_QWORD *)(a1 + 272) + v34);
                  *v38 >>= v37;
                  result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000280000001, 0x8000000880000004, 1, v38);
                  if ((_DWORD)result)
                    return result;
                  v39 = *v38 << v37;
                  *v38 = v39;
                  if (v39 > 8 || v39 < *(_DWORD *)(a1 + 268))
                    return 1;
                  ++v35;
                  v34 += 4;
                  v36 += 96;
                }
                while (v35 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v32 + 336) - *(_QWORD *)(v32 + 328)) >> 5));
              }
            }
            else
            {
              *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
            }
          }
          if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 1)
            || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 2, 1, a1 + 64), !(_DWORD)result))
          {
            v10 = !*(_DWORD *)(a1 + 12) && (unint64_t)(*(_DWORD *)(a1 + 32) == 0);
            v13 = (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v10);
            v14 = (_QWORD *)(a1 + 68);
            if (v13)
            {
              *v14 = 0x200000002;
            }
            else
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 40))(a2, 3, 3, v14);
              if ((_DWORD)result)
                return result;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 3, 2, a1 + 72);
              if ((_DWORD)result)
                return result;
            }
            if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 16) != 2)
              || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 104),
                  !(_DWORD)result))
            {
              if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 16) == 1)
                || (result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000280000001, 0x8000000480000003, 1, a1 + 404), !(_DWORD)result))
              {
                v15 = *(_DWORD *)(a1 + 16);
                if (v15 != 1)
                  *(_DWORD *)(a1 + 404) = 0;
                if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, v15 != 1))
                {
                  v16 = 0;
                  v17 = *(_DWORD *)(a1 + 16);
                }
                else
                {
                  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 256);
                  if ((_DWORD)result)
                    return result;
                  v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 256));
                  v17 = *(_DWORD *)(a1 + 16);
                  if (v21)
                    goto LABEL_64;
                  if (v17)
                    v43 = v17 == 3;
                  else
                    v43 = 1;
                  v44 = v43;
                  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v44))
                  {
                    v58 = (2 * *(_DWORD *)(a1 + 296)) ^ (*(int *)(a1 + 296) >> 31);
                    v56 = (2 * *(_DWORD *)(a1 + 300)) ^ (*(int *)(a1 + 300) >> 31);
                    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, &v58);
                    if ((_DWORD)result)
                      return result;
                    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, &v56);
                    if ((_DWORD)result)
                      return result;
                    *(_DWORD *)(a1 + 296) = -(v58 & 1) ^ (v58 >> 1);
                    *(_DWORD *)(a1 + 300) = -(v56 & 1) ^ (v56 >> 1);
                  }
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, a1 + 260);
                  if ((_DWORD)result)
                    return result;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x200A00000007, 0x9201D0001200DLL, 0, a1 + 264);
                  if ((_DWORD)result)
                    return result;
                  if (*(_BYTE *)(a1 + 256) && (!*(_DWORD *)(a1 + 260) || !*(_DWORD *)(a1 + 264)))
                    return 1;
                  v17 = *(_DWORD *)(a1 + 16);
                  if (v17 != 3 && v17)
                  {
LABEL_64:
                    v16 = 0;
                  }
                  else
                  {
                    v45 = sub_2367DC418(a1);
                    v46 = sub_2367DC3F0(a1);
                    v47 = *(_DWORD *)(a1 + 296);
                    v48 = *(_DWORD *)(a1 + 300);
                    v49 = v47 <= 0 && v48 <= 0;
                    v50 = *(_DWORD *)(a1 + 260) + v47;
                    v16 = !v49 || v50 < v46 || *(_DWORD *)(a1 + 264) + v48 < v45;
                  }
                }
                if (v17)
                  v18 = v17 == 3;
                else
                  v18 = 1;
                v19 = v18;
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v19))
                {
                  *(_BYTE *)(a1 + 392) = 0;
LABEL_53:
                  v20 = *(_DWORD *)(a1 + 16) != 1 && *(_BYTE *)(a1 + 392) == 0;
                  if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v20)
                    || (result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x8000000380000002, 0, a1 + 396), !(_DWORD)result))
                  {
                    v28 = *(_DWORD *)(a1 + 16);
                    if (v28 == 1)
                    {
                      *(_BYTE *)(a1 + 400) = 1;
                    }
                    else
                    {
                      if (*(_BYTE *)(a1 + 392)
                        || *(_DWORD *)(a1 + 376) && !*(_DWORD *)(a1 + 396)
                        || (*(_DWORD *)(a1 + 312) ? (v41 = 1) : (v41 = v16), (v41 & 1) != 0))
                      {
                        v29 = 0;
                      }
                      else
                      {
                        if (v28)
                          v42 = v28 == 3;
                        else
                          v42 = 1;
                        v29 = v42;
                      }
                      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v29))
                      {
                        if (!(*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 16) == 2))
                        {
                          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 1, a1 + 400);
                          if ((_DWORD)result)
                            return result;
                          if (*(_BYTE *)(a1 + 256))
                          {
                            v30 = *(unsigned int *)(a1 + 260);
                            v31 = *(_DWORD *)(a1 + 264);
                          }
                          else
                          {
                            v53 = *(_QWORD *)(a1 + 408);
                            v30 = sub_2367F4718(v53 + 424);
                            if (*(_BYTE *)(v53 + 432))
                              v31 = 8 * *(_DWORD *)(v53 + 436) + 8;
                            else
                              v31 = *(_DWORD *)(v53 + 440);
                          }
                          if (!*(_BYTE *)(a1 + 400))
                          {
                            v54 = *(_QWORD *)(a1 + 408);
                            if (v30 < sub_2367F4718(v54 + 424))
                              return 1;
                            v55 = *(_BYTE *)(v54 + 432) ? 8 * *(_DWORD *)(v54 + 436) + 8 : *(_DWORD *)(v54 + 440);
                            if (v31 < v55 || *(_DWORD *)(a1 + 296) || *(_DWORD *)(a1 + 300))
                              return 1;
                          }
                        }
                      }
                      else
                      {
                        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 400);
                        if ((_DWORD)result)
                          return result;
                      }
                    }
                    result = sub_2367F3EA4(a2, (std::string *)(a1 + 80));
                    if (!(_DWORD)result)
                    {
                      *(_BYTE *)(a1 + 552) = v57;
                      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 416);
                      if (!(_DWORD)result)
                      {
                        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a1 + 568);
                        if (!(_DWORD)result)
                          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
                      }
                    }
                  }
                  return result;
                }
                *(_QWORD *)(a1 + 328) = v9;
                *(_BYTE *)(a1 + 336) = v16;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 304);
                if ((_DWORD)result)
                  return result;
                v22 = *(_DWORD *)(a1 + 312) == 0;
                sub_2367F3C34((int64x2_t *)(a1 + 344), v9);
                if (v9)
                {
                  v23 = 0;
                  v24 = v9;
                  do
                  {
                    v25 = *(_QWORD *)(a1 + 344) + v23;
                    *(_BYTE *)(v25 + 32) = v16;
                    *(_QWORD *)(v25 + 24) = v9;
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, v25);
                    if ((_DWORD)result)
                      return result;
                    v22 = v22 & (*(_DWORD *)(v25 + 8) == 0);
                    v23 += 40;
                  }
                  while (--v24);
                }
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2)
                  || !*(_BYTE *)(a1 + 560)
                  || v22 && !*(_BYTE *)(a1 + 256))
                {
                  v26 = *(_QWORD *)(a1 + 408);
                  if (v26)
                    v27 = *(unsigned __int8 *)(v26 + 253) != 0;
                  else
                    v27 = 0;
                  if (!(*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v27))
                  {
                    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 408);
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 368);
                    if ((_DWORD)result)
                      return result;
                  }
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 1, a1 + 392);
                  if ((_DWORD)result)
                    return result;
                  goto LABEL_53;
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

int64x2_t *sub_2367F3C34(int64x2_t *result, unint64_t a2)
{
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t (***v23)(_QWORD);
  uint64_t (***v24)(_QWORD);
  uint64_t (***v25)(_QWORD);
  uint64_t (**v26)(_QWORD);
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t (**v31)();
  __int128 v32;
  uint64_t (**v33)();
  int64x2_t *v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;

  v3 = result;
  v4 = result->i64[0];
  v5 = result->i64[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - result->i64[0]) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v23 = (uint64_t (***)(_QWORD))(v4 + 40 * a2);
      if ((uint64_t (***)(_QWORD))v5 != v23)
      {
        v24 = (uint64_t (***)(_QWORD))(v5 - 40);
        v25 = v24;
        do
        {
          v26 = *v25;
          v25 -= 5;
          result = (int64x2_t *)(*v26)(v24);
          v27 = v24 == v23;
          v24 = v25;
        }
        while (!v27);
      }
      v3->i64[1] = (uint64_t)v23;
    }
  }
  else
  {
    v8 = result[1].i64[0];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
    {
      v28 = v5 + 40 * v7;
      v29 = 40 * a2 - 8 * ((v5 - result->i64[0]) >> 3);
      do
      {
        *(_QWORD *)v5 = &off_2507FF528;
        *(_QWORD *)(v5 + 24) = 0;
        *(_BYTE *)(v5 + 32) = 0;
        v31 = &off_2507FF550;
        v32 = xmmword_2368AF3F0;
        v33 = 0;
        result = (int64x2_t *)sub_2367F2CB4(v5, (uint64_t)&v31);
        v5 += 40;
        v29 -= 40;
      }
      while (v29);
      v3->i64[1] = v28;
    }
    else
    {
      if (a2 > 0x666666666666666)
        sub_2367C3440();
      v34 = result + 1;
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x333333333333333)
        v11 = 0x666666666666666;
      else
        v11 = v10;
      v12 = (uint64_t (**)())sub_2367DC0A4(v11);
      v13 = &v12[5 * v6];
      v31 = v12;
      *(_QWORD *)&v32 = v13;
      *((_QWORD *)&v32 + 1) = v13;
      v33 = &v12[5 * v14];
      v15 = 5 * a2;
      v16 = &v12[5 * a2];
      v17 = 8 * v15 - 40 * v6;
      do
      {
        *v13 = (uint64_t (*)())&off_2507FF528;
        v13[3] = 0;
        *((_BYTE *)v13 + 32) = 0;
        v35 = &off_2507FF550;
        v36 = xmmword_2368AF3F0;
        v37 = 0;
        (*((void (**)(uint64_t (**)(), uint64_t (***)()))*v13 + 2))(v13, &v35);
        v13 += 5;
        v17 -= 40;
      }
      while (v17);
      v18 = v3->i64[0];
      v19 = v3->u64[1];
      v20 = v32;
      if (v19 == v3->i64[0])
      {
        v22 = vdupq_n_s64(v19);
      }
      else
      {
        do
        {
          *(_QWORD *)(v20 - 40) = &off_2507FF528;
          v20 -= 40;
          v21 = *(_OWORD *)(v19 - 32);
          *(_OWORD *)(v20 + 17) = *(_OWORD *)(v19 - 23);
          *(_OWORD *)(v20 + 8) = v21;
          v19 -= 40;
        }
        while (v19 != v18);
        v22 = *v3;
      }
      v3->i64[0] = v20;
      v3->i64[1] = (uint64_t)v16;
      v32 = (__int128)v22;
      v30 = (uint64_t (**)())v3[1].i64[0];
      v3[1].i64[0] = (uint64_t)v33;
      v33 = v30;
      v31 = (uint64_t (**)())v22.i64[0];
      return (int64x2_t *)sub_2367F3FAC((uint64_t)&v31);
    }
  }
  return result;
}

void sub_2367F3E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367F3EA4(uint64_t a1, std::string *a2)
{
  std::string::size_type size;
  uint64_t result;
  unint64_t v6;
  std::string *v7;
  std::string *v8;
  int v9;
  std::string::size_type __n;

  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    LODWORD(size) = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  LODWORD(__n) = size;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, std::string::size_type *))(*(_QWORD *)a1 + 32))(a1, 0x380000000, 0x60900000204, 0, &__n);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
      std::string::resize(a2, __n, 0);
    if ((_DWORD)__n)
    {
      v6 = 0;
      while (1)
      {
        v9 = 0;
        v7 = a2;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v9 = v7->__r_.__value_.__s.__data_[v6];
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)a1 + 40))(a1, 8, 0, &v9);
        if ((_DWORD)result)
          break;
        v8 = a2;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v8->__r_.__value_.__s.__data_[v6++] = v9;
        if (v6 >= __n)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2367F3FAC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2367F4000()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F4014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v4 = 0;
  v5 = a1 + 8;
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 2, 0, v5 + v4);
    if ((_DWORD)result)
      break;
    v4 += 4;
    if (v4 == 12)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *(unsigned int *)(v5 + v7);
        v11 = byte_236923AD4[v10];
        v12 = byte_236923AD8[v10];
        if (v8 <= v11)
          v8 = v11;
        if (v9 <= v12)
          v9 = v12;
        v7 += 4;
      }
      while (v7 != 12);
      result = 0;
      *(_BYTE *)(a1 + 20) = v8;
      *(_BYTE *)(a1 + 21) = v9;
      return result;
    }
  }
  return result;
}

uint64_t sub_2367F40C8(uint64_t a1, uint64_t a2)
{
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_2507FF4B0;
  *(_QWORD *)(a1 + 40) = &off_2507FFCE8;
  *(_DWORD *)(a1 + 16) = 0;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367F4014(a1 + 40, (uint64_t)&v5);
  *(_QWORD *)(a1 + 104) = &off_250800370;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367F2F74((unsigned int *)(a1 + 104), (uint64_t)&v5);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = &off_2507FF528;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367F2CB4(a1 + 304, (uint64_t)&v5);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = &off_2507FFAB8;
  *(_QWORD *)(a1 + 384) = a2;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367F2E88(a1 + 368, (uint64_t)&v5);
  *(_QWORD *)(a1 + 408) = a2;
  *(_QWORD *)(a1 + 416) = &off_2507FF460;
  *(_BYTE *)(a1 + 552) = 0;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367F7BC4(a1 + 416, (uint64_t)&v5);
  *(_BYTE *)(a1 + 560) = 0;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v5);
  return a1;
}

void sub_2367F4230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void **v13;
  void *v15;

  a12 = (void **)(v12 + 344);
  sub_2367D6C0C(&a12);
  v15 = *(void **)(v12 + 272);
  if (v15)
  {
    *(_QWORD *)(v12 + 280) = v15;
    operator delete(v15);
  }
  if (*(char *)(v12 + 103) < 0)
    operator delete(*v13);
  _Unwind_Resume(a1);
}

void sub_2367F428C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F42A0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t result;
  _DWORD *v6;
  _BOOL8 v7;
  _BOOL8 v8;

  v4 = (_BYTE *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 8);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *v4)
      || (result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 5, 0, a1 + 12), !(_DWORD)result))
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 == 0)
        || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x2C00000028, 0x3D00000031, 1, a1 + 16), !(_DWORD)result))
      {
        v6 = (_DWORD *)(a1 + 20);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 3, 0, a1 + 20);
        if (!(_DWORD)result)
        {
          v7 = !*v6 && (unint64_t)(*v4 != 0);
          if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v7)
            || (result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 5, 0, a1 + 24), !(_DWORD)result))
          {
            if (*v6)
              v8 = 0;
            else
              v8 = *v4 == 0;
            if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v8))
              return 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x2C00000028, 0x3D00000031, 1, a1 + 28);
            if (!(_DWORD)result)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_2367F4454()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F4468(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t result;
  _DWORD *v6;
  _BOOL8 v7;
  _BOOL8 v8;

  v4 = (_BYTE *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 8);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *v4)
      || (result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000002080000010, 0x42800000024, 1, a1 + 12), !(_DWORD)result))
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *v4 == 0)
        || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x82700000025, 0xA82B00002829, 1, a1 + 16), !(_DWORD)result))
      {
        v6 = (_DWORD *)(a1 + 20);
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 3, 0, a1 + 20);
        if (!(_DWORD)result)
        {
          v7 = !*v6 && (unint64_t)(*v4 != 0);
          if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v7)
            || (result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000002080000010, 0x42800000024, 1, a1 + 24), !(_DWORD)result))
          {
            if (*v6)
              v8 = 0;
            else
              v8 = *v4 == 0;
            if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 64))(a2, v8))
              return 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x82700000025, 0xA82B00002829, 1, a1 + 28);
            if (!(_DWORD)result)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_2367F463C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F4650(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x800003E880000064, 0x3D00000029, 1, a1 + 8);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x800003E980000001, 0x2900000027, 1, a1 + 12);
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x280000000, 0x1F0000000FLL, 0, a1 + 16);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 20);
    }
  }
  return result;
}

uint64_t sub_2367F4718(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 20);
  if (v1)
  {
    v2 = qword_2369200E0[v1 - 1];
    if (*(_BYTE *)(a1 + 8))
      v3 = 8 * *(_DWORD *)(a1 + 12) + 8;
    else
      v3 = *(_DWORD *)(a1 + 16);
    return (v2 * (unint64_t)v3 / HIDWORD(v2));
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    LODWORD(v4) = 8 * *(_DWORD *)(a1 + 24) + 8;
  }
  else
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
  }
  return v4;
}

uint64_t sub_2367F4780(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 1;
  if (a2 && a3)
  {
    v4 = 0;
    while (1)
    {
      v5 = v4 + 1;
      if ((qword_2369200E0[v4] * a3 / HIDWORD(qword_2369200E0[v4])) == (_DWORD)a2)
        break;
      ++v4;
      if (v5 == 7)
      {
        *(_DWORD *)(a1 + 20) = 0;
        if (a2 <= 0x100 && a3 <= 0x100 && (a3 & 7) == 0)
          goto LABEL_9;
LABEL_18:
        *(_BYTE *)(a1 + 8) = 0;
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a1 + 20) = v5;
    if (a3 <= 0x100 && (a3 & 7) == 0)
    {
      if ((_DWORD)v4 != -1)
      {
        v3 = 0;
        *(_BYTE *)(a1 + 8) = 1;
        *(_DWORD *)(a1 + 12) = (a3 >> 3) - 1;
        return v3;
      }
      if (a2 > 0x100)
        goto LABEL_18;
LABEL_9:
      v3 = a2 & 7;
      *(_BYTE *)(a1 + 8) = v3 == 0;
      if ((a2 & 7) == 0)
      {
        *(_DWORD *)(a1 + 12) = (a3 >> 3) - 1;
        *(_DWORD *)(a1 + 24) = (a2 >> 3) - 1;
        return v3;
      }
LABEL_19:
      *(_DWORD *)(a1 + 16) = a3;
      goto LABEL_20;
    }
    v3 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = a3;
    if ((_DWORD)v4 != -1)
      return v3;
LABEL_20:
    v3 = 0;
    *(_DWORD *)(a1 + 28) = a2;
  }
  return v3;
}

uint64_t sub_2367F4874(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 20);
  if (v1)
  {
    v2 = qword_2369200E0[v1 - 1];
    if (*(_BYTE *)(a1 + 8))
      v3 = 8 * *(_DWORD *)(a1 + 12);
    else
      v3 = *(_DWORD *)(a1 + 16);
    return (v2 * (unint64_t)v3 / HIDWORD(v2));
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    LODWORD(v4) = 8 * *(_DWORD *)(a1 + 24);
  }
  else
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
  }
  return v4;
}

uint64_t sub_2367F48D4(char *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  __int16 *v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned __int8 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  unint64_t j;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  void *__p[6];
  __int16 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  sub_2367CA014(__p, a4);
  v10 = 0;
  v11 = (__int16 *)__p[0];
  v12 = 1;
  for (i = 1; i != 16; ++i)
  {
    *((_WORD *)&__p[3] + i) = v10;
    v10 += *(unsigned __int16 *)(a5 + 2 * i);
    if (*(_WORD *)(a5 + 2 * i))
      v12 = i;
  }
  v14 = 0;
  do
  {
    v15 = *(unsigned __int8 *)(a3 + v14);
    if (*(_BYTE *)(a3 + v14))
    {
      v16 = *((unsigned __int16 *)&__p[3] + v15);
      *((_WORD *)&__p[3] + v15) = v16 + 1;
      v11[v16] = v14;
    }
    ++v14;
  }
  while (a4 != v14);
  v17 = (1 << a2);
  if (v53 == 1)
  {
    v18 = *v11;
    if ((int)v17 <= 1)
      v19 = 1;
    else
      v19 = v17;
    v20 = a1 + 2;
    do
    {
      *((_BYTE *)v20 - 2) = 0;
      *v20 = v18;
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = a2;
    if (v12 >= a2)
    {
      v24 = 1 << a2;
    }
    else
    {
      v23 = v12;
      v24 = 1 << v12;
    }
    v25 = 2;
    v26 = 1;
    do
    {
      if (*(_WORD *)(a5 + 2 * v26))
      {
        do
        {
          v27 = v26 | ((unsigned __int16)v11[v21] << 16);
          v28 = v24;
          do
          {
            *(_DWORD *)&a1[4 * v22 + 4 * (v28 - v25)] = v27;
            v28 -= v25;
          }
          while (v28 > 0);
          v29 = 1 << (v26 - 1);
          do
          {
            v30 = v29;
            v29 >>= 1;
          }
          while ((v30 & v22) != 0);
          ++v21;
          v22 = ((v30 - 1) & v22) + v30;
          v31 = *(_WORD *)(a5 + 2 * v26) - 1;
          *(_WORD *)(a5 + 2 * v26) = v31;
        }
        while (v31);
      }
      v25 *= 2;
      ++v26;
    }
    while (v23 >= v26);
    if ((_DWORD)v17 != v24)
    {
      do
      {
        memcpy(&a1[4 * v24], a1, 4 * v24);
        v32 = (_DWORD)v17 == 2 * v24;
        v24 *= 2;
      }
      while (!v32);
    }
    v33 = a2 + 1;
    if (v12 >= v33)
    {
      v34 = v17 - 1;
      v35 = 2;
      v36 = -1;
      v37 = 1 << a2;
      v38 = a1;
      do
      {
        if (*(_WORD *)(a5 + 2 * v33))
        {
          do
          {
            if ((v22 & v34) != v36)
            {
              v39 = 1 << (v33 - a2);
              LOBYTE(j) = v33;
              if (v33 <= 0xE)
              {
                v41 = (1 << (v33 - a2));
                for (j = v33; j != 15; ++j)
                {
                  v42 = *(unsigned __int16 *)(a5 + 2 * j);
                  v43 = v41 > v42;
                  v44 = v41 - v42;
                  if (!v43)
                    break;
                  v41 = 2 * v44;
                }
                v39 = 1 << (j - a2);
              }
              v38 += 4 * v37;
              v17 = (v39 + v17);
              v45 = &a1[4 * (v22 & v34)];
              *v45 = j;
              *((_WORD *)v45 + 1) = (((_DWORD)v38 - (_DWORD)a1) >> 2) - (v22 & v34);
              v36 = v22 & v34;
              v37 = v39;
            }
            v46 = (v33 - a2) | ((unsigned __int16)v11[v21] << 16);
            v47 = v37;
            do
            {
              *(_DWORD *)&v38[4 * (v22 >> a2) + 4 * (v47 - v35)] = v46;
              v47 -= v35;
            }
            while (v47 > 0);
            v48 = 1 << (v33 - 1);
            do
            {
              v49 = v48;
              v48 >>= 1;
            }
            while ((v49 & v22) != 0);
            ++v21;
            v22 = ((v49 - 1) & v22) + v49;
            v50 = *(_WORD *)(a5 + 2 * v33) - 1;
            *(_WORD *)(a5 + 2 * v33) = v50;
          }
          while (v50);
        }
        ++v33;
        v35 *= 2;
      }
      while (v33 <= v12);
      v11 = (__int16 *)__p[0];
    }
  }
  if (v11)
  {
    __p[1] = v11;
    operator delete(v11);
  }
  return v17;
}

uint64_t sub_2367F4C10(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unsigned int v23;

  if (a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = a1 - 1;
    if (a1 - 1 >= 9)
      v7 = 9;
    v8 = v7 + 1;
    while (1)
    {
      v6 |= (unint64_t)(*(_BYTE *)(a2 + v5) & 0x7F) << v4;
      if ((*(_BYTE *)(a2 + v5) & 0x80) == 0)
        break;
      ++v5;
      v4 += 7;
      if (v8 == v5)
      {
        v5 = v8;
        break;
      }
    }
    if (HIDWORD(v6))
      return 1;
    v9 = v5 + 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v9 = 1;
  }
  if (v9 >= a1)
    return 1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a2 + v9;
  v14 = v9 + 1;
  while (1)
  {
    v11 |= (unint64_t)(*(_BYTE *)(v13 + v12) & 0x7F) << v10;
    if ((*(_BYTE *)(v13 + v12) & 0x80) == 0)
      break;
    v15 = v12 + 1;
    if (v12 <= 8)
    {
      v16 = v14 + v12;
      v10 += 7;
      ++v12;
      if (v16 < a1)
        continue;
    }
    goto LABEL_18;
  }
  v15 = v12;
LABEL_18:
  if (HIDWORD(v11))
    return 1;
  v17 = v5 + v15 + 2;
  v18 = v11 + v17;
  v19 = __CFADD__(v11, v17);
  v20 = 1;
  if (v18 <= a1 && !v19)
  {
    v21 = v6 + 0x10000;
    if (a4)
      v22 = v6 > a4;
    else
      v22 = 0;
    v23 = v22;
    if (v21 >= a3)
      return v23;
    else
      return 1;
  }
  return v20;
}

size_t *sub_2367F4D20(size_t *result, const void *a2, int64_t a3)
{
  size_t *v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;

  if (a3 >= 1)
  {
    v5 = result;
    v6 = *result;
    v7 = *result + a3;
    sub_2367E8BBC(result, v7);
    v8 = v5[2];
    if (v8)
      v9 = v7;
    else
      v9 = 0;
    *v5 = v9;
    return (size_t *)memcpy((void *)(v8 + v6), a2, a3);
  }
  return result;
}

void sub_2367F4D8C(size_t *a1, char a2)
{
  size_t v4;
  size_t v5;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    sub_2367E8BBC(a1, v4 + 1);
    v5 = a1[2];
    if (!v5)
      return;
    v4 = *a1;
  }
  else
  {
    v5 = a1[2];
  }
  *a1 = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
}

size_t *sub_2367F4DE4(size_t *a1, unint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  sub_2367E8BBC(a1, a2);
  return a1;
}

void sub_2367F4E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2367C2F38((uint64_t *)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_2367F4E24(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13[2];
  uint64_t v14;

  sub_2367F4DE4(v13, a2);
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      *(_BYTE *)(v14 + v6) = *(_BYTE *)(a1 + v7);
      v7 += (a2 + a3 - 1) / a3;
      if (v7 >= a2)
        v7 = ++v8;
      ++v6;
    }
    while (a2 != v6);
    v9 = 0;
    v10 = v14;
    do
    {
      *(_BYTE *)(a1 + v9) = *(_BYTE *)(v10 + v9);
      ++v9;
    }
    while (a2 != v9);
    v14 = 0;
  }
  else
  {
    v10 = v14;
    v14 = 0;
    if (!v10)
      return;
  }
  v11 = -*(_QWORD *)(v10 - 24);
  do
    v12 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v12 + v11, &qword_2564313D8));
  free(*(void **)(v10 - 32));
}

uint64_t sub_2367F4EFC(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v9;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  _BYTE v36[532];

  v4 = a2[3];
  v3 = a2[4];
  v5 = 8 * (a2[2] - v3 + a2[5]) - a2[1];
  a2[7] = v5;
  if (v5 > 8 * (v4 - v3) + 64)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = v5;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    sub_2367EE5C0(a2, v9);
    return 0;
  }
  v11 = sub_2367F28AC(a2);
  *(_QWORD *)(a1 + 24) = v11;
  if (v11 > 0x10000000)
    return 1;
  result = sub_2367CC178(a2, 0x29uLL, a1 + 56, (unint64_t *)(a1 + 32), 0);
  if (!(_DWORD)result)
  {
    sub_2367C4794((uint64_t)&v33, a1 + 56, a2, 0);
    v12 = v34[0];
    *(_OWORD *)(a1 + 200) = v33;
    *(_OWORD *)(a1 + 216) = v12;
    *(_OWORD *)(a1 + 228) = *(_OWORD *)((char *)v34 + 12);
    v13 = v35;
    v35 = 0;
    v14 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v13;
    if (v14)
    {
      v15 = -*(_QWORD *)(v14 - 24);
      do
        v16 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v16 + v15, &qword_2564313D8));
      free(*(void **)(v14 - 32));
      v17 = v35;
      memcpy((void *)(a1 + 256), v36, 0x214uLL);
      v35 = 0;
      if (v17)
      {
        v18 = -*(_QWORD *)(v17 - 24);
        do
          v19 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v19 + v18, &qword_2564313D8));
        free(*(void **)(v17 - 32));
      }
    }
    else
    {
      memcpy((void *)(a1 + 256), v36, 0x214uLL);
    }
    *(_QWORD *)a1 = 0;
    if (*(_QWORD *)(a1 + 24) >= 0x400uLL)
      v20 = 1024;
    else
      v20 = *(_QWORD *)(a1 + 24);
    sub_2367E8BBC((size_t *)(a1 + 792), v20);
    if (*(_QWORD *)(a1 + 808))
      v21 = v20;
    else
      v21 = 0;
    *(_QWORD *)(a1 + 792) = v21;
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD *)(a1 + 24);
    v24 = 2;
    if (v23 < 2)
      v24 = *(_QWORD *)(a1 + 24);
    if (v22 < v24)
    {
      do
      {
        if (v22)
          v25 = **(_BYTE **)(a1 + 808);
        else
          v25 = 0;
        v26 = sub_2367F65C8(v22, v25, 0);
        *(_BYTE *)(*(_QWORD *)(a1 + 808) + *(_QWORD *)a1) = sub_2367C4CF4(a1 + 200, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v26), a2);
        v22 = *(_QWORD *)a1 + 1;
        *(_QWORD *)a1 = v22;
        v23 = *(_QWORD *)(a1 + 24);
        if (v23 >= 2)
          v27 = 2;
        else
          v27 = *(_QWORD *)(a1 + 24);
      }
      while (v22 < v27);
    }
    if (v23 <= 0x16)
    {
      v29 = a2[1];
      v32 = 8 * (a2[2] - a2[4] + a2[5]);
LABEL_39:
      result = 0;
      *(_QWORD *)(a1 + 8) = v32 - *(_QWORD *)(a1 + 16) - v29;
      return result;
    }
    if (v22 <= 0x15)
    {
      do
      {
        v28 = sub_2367F65C8(v22, *(_BYTE *)(v22 + *(_QWORD *)(a1 + 808) - 1), *(_BYTE *)(v22 + *(_QWORD *)(a1 + 808) - 2));
        *(_BYTE *)(*(_QWORD *)(a1 + 808) + *(_QWORD *)a1) = sub_2367C4CF4(a1 + 200, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v28), a2);
        v22 = *(_QWORD *)a1 + 1;
        *(_QWORD *)a1 = v22;
      }
      while (v22 < 0x16);
    }
    v29 = a2[1];
    v31 = a2[3];
    v30 = a2[4];
    v32 = 8 * (a2[2] - v30 + a2[5]);
    a2[7] = v32 - v29;
    if (v32 - v29 > 8 * (v31 - v30) + 64)
      return 0xFFFFFFFFLL;
    result = sub_2367F4C10(*(_QWORD *)(a1 + 792), *(_QWORD *)(a1 + 808), *(_QWORD *)(a1 + 24), a3);
    if (!(_DWORD)result)
      goto LABEL_39;
  }
  return result;
}

uint64_t sub_2367F5214(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  size_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  size_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  size_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t k;
  _DWORD *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v141;
  uint64_t i;
  uint64_t j;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t m;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _DWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _BYTE v182[2064];
  size_t v183[2];
  uint64_t v184;
  size_t v185[2];
  _DWORD *v186;

  v6 = (char *)(a1 + 200);
  sub_2367F61D0((char *)(a1 + 200), (uint64_t)v182);
  v7 = a2[4];
  v8 = a2[1];
  v9 = 8 * (a2[2] - v7 + a2[5]);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v9 - (*(_QWORD *)(a1 + 16) + v8);
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 < v10)
  {
    v12 = *(_QWORD *)a1;
    while (1)
    {
      if (!v11 || (v11 & 0x1FF) != 0)
      {
        v18 = *(_QWORD *)(a1 + 808);
      }
      else
      {
        v14 = a2[3];
        v13 = a2[4];
        v15 = 8 * (a2[2] - v13 + a2[5]) - a2[1];
        a2[7] = v15;
        if (v15 > 8 * (v14 - v13) + 64)
        {
          sub_2367F626C(v6, (uint64_t)v182);
          *(_QWORD *)a1 = v12;
          return 0xFFFFFFFFLL;
        }
        sub_2367F61D0(v6, (uint64_t)v182);
        v16 = 8 * (a2[2] - a2[4] + a2[5]) - (*(_QWORD *)(a1 + 16) + a2[1]);
        *(_QWORD *)(a1 + 8) = v16;
        v12 = *(_QWORD *)a1;
        if (*(_QWORD *)a1
          && !(unsigned __int16)*(_QWORD *)a1
          && (float)((float)((float)(unint64_t)v16 * 0.125) * 256.0) < (float)v12)
        {
          return 1;
        }
        if (*(_QWORD *)(a1 + 24) >= v12 + 1024)
          v17 = v12 + 1024;
        else
          v17 = *(_QWORD *)(a1 + 24);
        sub_2367E8BBC((size_t *)(a1 + 792), v17);
        v18 = *(_QWORD *)(a1 + 808);
        if (v18)
          v19 = v17;
        else
          v19 = 0;
        *(_QWORD *)(a1 + 792) = v19;
        v11 = *(_QWORD *)a1;
      }
      v20 = sub_2367F65C8(v11, *(_BYTE *)(v11 + v18 - 1), *(_BYTE *)(v11 + v18 - 2));
      *(_BYTE *)(*(_QWORD *)(a1 + 808) + *(_QWORD *)a1) = sub_2367C4CF4((uint64_t)v6, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v20), a2);
      v11 = *(_QWORD *)a1 + 1;
      *(_QWORD *)a1 = v11;
      if (v11 >= *(_QWORD *)(a1 + 24))
      {
        v7 = a2[4];
        v8 = a2[1];
        v9 = 8 * (a2[2] - v7 + a2[5]);
        v11 = v12;
        break;
      }
    }
  }
  a2[7] = v9 - v8;
  if (v9 - v8 > 8 * (a2[3] - v7) + 64)
  {
    sub_2367F626C(v6, (uint64_t)v182);
    *(_QWORD *)a1 = v11;
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 8) = v9 - *(_QWORD *)(a1 + 16) - v8;
  if (*(_DWORD *)(a1 + 220) != 1245184)
    return 1;
  sub_2367E8BBC((size_t *)a3, 0);
  *(_QWORD *)a3 = 0;
  v21 = *(_QWORD *)(a1 + 792);
  if (!v21)
    return 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = *(_QWORD *)(a1 + 808);
  v26 = v21 - 1;
  if (v21 - 1 >= 9)
    v26 = 9;
  v27 = v26 + 1;
  while (1)
  {
    v24 |= (unint64_t)(*(_BYTE *)(v25 + v23) & 0x7F) << v22;
    if ((*(_BYTE *)(v25 + v23) & 0x80) == 0)
      break;
    ++v23;
    v22 += 7;
    if (v27 == v23)
    {
      v23 = v27;
      break;
    }
  }
  v28 = v23 + 1;
  if (HIDWORD(v24) || v28 >= v21)
    return 1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v25 + v28;
  while (1)
  {
    v31 |= (unint64_t)(*(_BYTE *)(v33 + v32) & 0x7F) << v30;
    if ((*(_BYTE *)(v33 + v32) & 0x80) == 0)
      break;
    v34 = v32 + 1;
    if (v32 <= 8)
    {
      v35 = v23 + 2 + v32;
      v30 += 7;
      ++v32;
      if (v35 < v21)
        continue;
    }
    goto LABEL_41;
  }
  v34 = v32;
LABEL_41:
  if (HIDWORD(v31))
    return 1;
  v37 = v23 + v34 + 2;
  v38 = v31 + v37;
  v39 = __CFADD__(v31, v37);
  v36 = 1;
  if (v38 <= v21 && !v39)
  {
    v185[0] = 0;
    v185[1] = 0;
    v186 = 0;
    sub_2367F4D20(v185, &xmmword_236920178, 128);
    if (v185[0] >= 4)
      *v186 = bswap32(v24);
    v40 = *(_QWORD *)a3;
    if (*(_QWORD *)a3 == v24)
    {
LABEL_55:
      if (v31)
        v43 = 0;
      else
        v43 = v38 == v21;
LABEL_58:
      v36 = !v43;
      goto LABEL_285;
    }
    v180 = v21;
    v181 = v31 + v37;
    v41 = 0;
    v42 = (uint64_t)v186;
    v176 = v23 + v34 + 2;
    while (v41 != 128)
    {
      sub_2367F6360(*(_BYTE **)(a3 + 16), v40, v42, v41);
      if (v181 + v41 >= v180)
        goto LABEL_284;
      v21 = v180;
      sub_2367F4D8C((size_t *)a3, *(_BYTE *)(v42 + v41) + *(_BYTE *)(v25 + v176 + v31 + v41));
      ++v41;
      v40 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 == v24)
      {
        v38 = v181 + v41;
        goto LABEL_55;
      }
    }
    if (v176 >= v181)
      goto LABEL_284;
    if (v176 >= v180)
    {
      v177 = v23 + v34 + 3;
      v49 = v181 + 128;
      v50 = a3;
    }
    else
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = v34 + v23 + 3;
      v49 = v181 + 128;
      v50 = a3;
      while (1)
      {
        v46 |= (unint64_t)(*(_BYTE *)(v25 + v176 + v47) & 0x7F) << v45;
        if ((*(_BYTE *)(v25 + v176 + v47) & 0x80) == 0)
          break;
        v51 = v47 + 1;
        if (v47 <= 8)
        {
          v52 = v48 + v47;
          v45 += 7;
          ++v47;
          if (v52 < v180)
            continue;
        }
        goto LABEL_72;
      }
      v51 = v47;
LABEL_72:
      v53 = v176 + v51 + 1;
      if (v46)
      {
        if (v46 < 0x100000001)
        {
          v54 = v46 - 1;
          sub_2367F6308(v46 - 1, (size_t *)a3);
          v40 = *(_QWORD *)a3;
          v36 = 1;
          if (*(_QWORD *)a3 > v24 || v53 > v181)
          {
LABEL_285:
            v164 = v186;
            v186 = 0;
            if (v164)
            {
              v165 = -*((_QWORD *)v164 - 3);
              do
                v166 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v166 + v165, &qword_2564313D8));
              free(*((void **)v164 - 4));
            }
            return v36;
          }
          v55 = 0;
          v56 = 12 * v54 + 128;
          v167 = v25 + 1;
          while (2)
          {
            if (v53 != v181)
            {
              v174 = *(_BYTE *)(v25 + v53);
              v177 = v53 + 1;
              v57 = v174 & 0x3F;
              v169 = v174 & 0x3F;
              v58 = 1129469042;
              switch(v174 & 0x3F)
              {
                case 0:
                  goto LABEL_155;
                case 1:
                  v36 = 1;
                  if (v49 + 4 > v180 || v49 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_285;
                  v58 = *(_DWORD *)(v25 + v49);
                  v49 += 4;
LABEL_85:
                  v171 = v53;
                  v59 = v40 + 4;
                  v60 = v40;
                  sub_2367E8BBC((size_t *)a3, v40 + 4);
                  v61 = *(_QWORD *)(a3 + 16);
                  if (v61)
                    v62 = v59;
                  else
                    v62 = 0;
                  *(_QWORD *)a3 = v62;
                  *(_DWORD *)(v61 + v60) = v58;
                  if (v58 == 1768781164
                    || v58 == 1953524578
                    || v58 == 1953526903
                    || v58 == 1515804779
                    || v58 == 1515804775
                    || (v58 & 0xFFFFFFEF) == 1515804770)
                  {
                    v68 = 20;
                  }
                  else
                  {
                    v68 = v55;
                  }
                  if ((v174 & 0x40) != 0)
                  {
                    if (v177 >= v181)
                      goto LABEL_284;
                    if (v177 >= v180)
                    {
                      v72 = 0;
                      v56 = 0;
                    }
                    else
                    {
                      v70 = 0;
                      v56 = 0;
                      v71 = 0;
                      while (1)
                      {
                        v56 |= (unint64_t)(*(_BYTE *)(v167 + v171 + v71) & 0x7F) << v70;
                        if ((*(_BYTE *)(v167 + v171 + v71) & 0x80) == 0)
                          break;
                        v72 = v71 + 1;
                        if (v71 <= 8)
                        {
                          v73 = v171 + 2 + v71;
                          v70 += 7;
                          ++v71;
                          if (v73 < v180)
                            continue;
                        }
                        goto LABEL_118;
                      }
                      v72 = v71;
                    }
LABEL_118:
                    v69 = v171 + v72 + 2;
                  }
                  else
                  {
                    v69 = v177;
                    if (HIDWORD(v56))
                      goto LABEL_284;
                    v56 += v55;
                  }
                  v172 = v49;
                  if (HIDWORD(v56))
                    goto LABEL_284;
                  sub_2367F6308(v56, (size_t *)a3);
                  if (v174 < 0)
                  {
                    if (v69 >= v181)
                      goto LABEL_284;
                    if (v69 >= v180)
                    {
                      v76 = 0;
                      v55 = 0;
                    }
                    else
                    {
                      v74 = 0;
                      v55 = 0;
                      v75 = 0;
                      while (1)
                      {
                        v55 |= (unint64_t)(*(_BYTE *)(v25 + v69 + v75) & 0x7F) << v74;
                        if ((*(_BYTE *)(v25 + v69 + v75) & 0x80) == 0)
                          break;
                        v76 = v75 + 1;
                        if (v75 <= 8)
                        {
                          v77 = v69 + 1 + v75;
                          v74 += 7;
                          ++v75;
                          if (v77 < v180)
                            continue;
                        }
                        goto LABEL_131;
                      }
                      v76 = v75;
                    }
LABEL_131:
                    v53 = v69 + v76 + 1;
                  }
                  else
                  {
                    v53 = v69;
                    v55 = v68;
                  }
                  if (HIDWORD(v55))
                    goto LABEL_284;
                  sub_2367F6308(v55, (size_t *)a3);
                  if (v169 == 3)
                  {
                    v86 = v56 + 2 * v55;
                    if (HIDWORD(v86))
                      goto LABEL_284;
                    v87 = *(_QWORD *)a3;
                    v88 = *(_QWORD *)a3 + 4;
                    sub_2367E8BBC((size_t *)a3, v88);
                    v89 = *(_QWORD *)(a3 + 16);
                    if (v89)
                      v90 = v88;
                    else
                      v90 = 0;
                    *(_QWORD *)a3 = v90;
                    *(_DWORD *)(v89 + v87) = 1515804775;
                    sub_2367F6308(v55 + v56, (size_t *)a3);
                    sub_2367F6308(v55, (size_t *)a3);
                    v91 = *(_QWORD *)a3;
                    v92 = *(_QWORD *)a3 + 4;
                    sub_2367E8BBC((size_t *)a3, v92);
                    v93 = *(_QWORD *)(a3 + 16);
                    if (v93)
                      v94 = v92;
                    else
                      v94 = 0;
                    *(_QWORD *)a3 = v94;
                    *(_DWORD *)(v93 + v91) = 1515804770;
                  }
                  else
                  {
                    if (v169 != 2)
                      goto LABEL_151;
                    v78 = *(_QWORD *)a3;
                    v79 = *(_QWORD *)a3 + 4;
                    sub_2367E8BBC((size_t *)a3, v79);
                    v80 = *(_QWORD *)(a3 + 16);
                    if (v80)
                      v81 = v79;
                    else
                      v81 = 0;
                    *(_QWORD *)a3 = v81;
                    *(_DWORD *)(v80 + v78) = 1129469031;
                    sub_2367F6308(v56, (size_t *)a3);
                    sub_2367F6308(v55, (size_t *)a3);
                    v82 = *(_QWORD *)a3;
                    v83 = *(_QWORD *)a3 + 4;
                    sub_2367E8BBC((size_t *)a3, v83);
                    v84 = *(_QWORD *)(a3 + 16);
                    if (v84)
                      v85 = v83;
                    else
                      v85 = 0;
                    *(_QWORD *)a3 = v85;
                    *(_DWORD *)(v84 + v82) = 1129469026;
                    LODWORD(v86) = v56;
                  }
                  sub_2367F6308(v86, (size_t *)a3);
                  sub_2367F6308(v55, (size_t *)a3);
LABEL_151:
                  v40 = *(_QWORD *)a3;
                  v36 = 1;
                  if (*(_QWORD *)a3 > v24)
                    goto LABEL_285;
                  v49 = v172;
                  if (v53 > v181)
                    goto LABEL_285;
                  continue;
                case 2:
                  goto LABEL_85;
                case 3:
                  v58 = 1515804786;
                  goto LABEL_85;
                default:
                  if ((unint64_t)(v57 - 4) > 0x10)
                    goto LABEL_284;
                  v58 = *(_DWORD *)*(&off_2508007D0 + v57 - 4);
                  goto LABEL_85;
              }
            }
            break;
          }
          v177 = v181;
          goto LABEL_155;
        }
LABEL_284:
        v36 = 1;
        goto LABEL_285;
      }
      v177 = v176 + v51 + 1;
    }
LABEL_155:
    v95 = v180;
    if (v181 < v180)
      v95 = v181;
    v36 = 1;
    if (v40 > v24)
      goto LABEL_285;
    v168 = v95;
    if (v177 > v181)
      goto LABEL_285;
    if (v177 != v181)
    {
      v170 = v25 + 1;
      v96 = v177;
      v97 = v180;
      while (1)
      {
        v98 = v96 + 1;
        v99 = *(unsigned __int8 *)(v25 + v96);
        if ((_DWORD)v99 == 1)
        {
          v100 = v181;
          if (v98 >= v181)
            goto LABEL_284;
          if (v98 >= v97)
          {
            v104 = 0;
            v102 = 0;
          }
          else
          {
            v101 = 0;
            v102 = 0;
            v103 = 0;
            while (1)
            {
              v102 |= (unint64_t)(*(_BYTE *)(v170 + v96 + v103) & 0x7F) << v101;
              if ((*(_BYTE *)(v170 + v96 + v103) & 0x80) == 0)
                break;
              v104 = v103 + 1;
              if (v103 <= 8)
              {
                v105 = v96 + 2 + v103;
                v101 += 7;
                ++v103;
                if (v105 < v97)
                  continue;
              }
              goto LABEL_196;
            }
            v104 = v103;
          }
LABEL_196:
          if (v102 + v49 > v97 || v102 + v49 < v49)
            goto LABEL_284;
          for (v96 += v104 + 2; v102; --v102)
            sub_2367F4D8C((size_t *)v50, *(_BYTE *)(v25 + v49++));
        }
        else
        {
          if ((v99 & 0xFE) == 2)
          {
            if (v98 >= v181)
              goto LABEL_284;
            v178 = v96;
            if (v98 >= v97)
            {
              v111 = 0;
              v107 = 0;
            }
            else
            {
              v106 = 0;
              v107 = 0;
              v108 = 0;
              v109 = v170 + v96;
              v110 = v96 + 2;
              while (1)
              {
                v107 |= (unint64_t)(*(_BYTE *)(v109 + v108) & 0x7F) << v106;
                if ((*(_BYTE *)(v109 + v108) & 0x80) == 0)
                  break;
                v111 = v108 + 1;
                if (v108 <= 8)
                {
                  v112 = v110 + v108;
                  v106 += 7;
                  ++v108;
                  if (v112 < v97)
                    continue;
                }
                goto LABEL_223;
              }
              v111 = v108;
            }
LABEL_223:
            v138 = v49;
            v139 = v107 + v49;
            if (v139 > v97 || v139 < v138)
              goto LABEL_284;
            v141 = v138;
            sub_2367F4DE4(v183, v107);
            if (v107)
            {
              for (i = 0; i != v107; ++i)
                *(_BYTE *)(v184 + i) = *(_BYTE *)(v25 + v141 + i);
            }
            if ((_DWORD)v99 == 2)
            {
LABEL_234:
              sub_2367F4E24(v184, v107, v99);
            }
            else if ((_DWORD)v99 == 3)
            {
              v99 = 4;
              goto LABEL_234;
            }
            if (v107)
            {
              for (j = 0; j != v107; ++j)
                sub_2367F4D8C((size_t *)v50, *(_BYTE *)(v184 + j));
              v141 = v139;
            }
            v144 = v184;
            v184 = 0;
            v100 = v181;
            if (v144)
            {
              v145 = -*(_QWORD *)(v144 - 24);
              do
                v146 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v146 + v145, &qword_2564313D8));
              free(*(void **)(v144 - 32));
            }
            v96 = v178 + v111 + 2;
            v49 = v141;
            goto LABEL_278;
          }
          if ((_DWORD)v99 == 10)
          {
            v126 = v40 + 4;
            v127 = v40;
            sub_2367E8BBC((size_t *)v50, v40 + 4);
            v128 = *(_QWORD *)(v50 + 16);
            if (v128)
              v129 = v126;
            else
              v129 = 0;
            *(_QWORD *)v50 = v129;
            *(_DWORD *)(v128 + v127) = 542792024;
            v130 = 4;
            do
            {
              sub_2367F4D8C((size_t *)v50, 0);
              --v130;
            }
            while (v130);
            v36 = 1;
            if (v49 + 12 > v97 || v49 > 0xFFFFFFFFFFFFFFF3)
              goto LABEL_285;
            for (k = 0; k != 12; ++k)
              sub_2367F4D8C((size_t *)v50, *(_BYTE *)(v25 + v49 + k));
            v49 += 12;
            v96 = v98;
            v97 = v180;
            v100 = v181;
          }
          else if ((_DWORD)v99 == 4)
          {
            v113 = v96;
            v114 = v96 + 3;
            v36 = 1;
            if (v114 > v181)
              goto LABEL_285;
            if (v114 < v98)
              goto LABEL_285;
            v173 = v49;
            v115 = *(unsigned __int8 *)(v25 + v98);
            v116 = v115 & 3;
            v117 = (v115 & 3) + 1;
            if (v116 == 2)
              goto LABEL_285;
            v175 = (v115 >> 2) & 3;
            if (v175 == 3)
              goto LABEL_285;
            v118 = v113 + 2;
            v119 = (v115 & 3) + 1;
            if ((v115 & 0x10) != 0)
            {
              if (v118 >= v168)
                goto LABEL_284;
              v120 = 0;
              v119 = 0;
              v121 = 0;
              v122 = v25 + 2 + v113;
              while (1)
              {
                v119 |= (unint64_t)(*(_BYTE *)(v122 + v121) & 0x7F) << v120;
                if ((*(_BYTE *)(v122 + v121) & 0x80) == 0)
                  break;
                v123 = v121 + 1;
                if (v121 <= 8)
                {
                  v124 = v114 + v121;
                  v120 += 7;
                  ++v121;
                  if (v124 < v97)
                    continue;
                }
                goto LABEL_245;
              }
              v123 = v121;
LABEL_245:
              if (v119 < v117)
                goto LABEL_284;
              v118 = v114 + v123;
              v50 = a3;
            }
            if (!v40)
              goto LABEL_284;
            if (v119 > (v40 - 1) >> 2 || v118 >= v181)
              goto LABEL_284;
            v179 = v118;
            if (v118 >= v97)
            {
              v153 = 0;
              v149 = 0;
            }
            else
            {
              v148 = 0;
              v149 = 0;
              v150 = 0;
              v151 = v25 + v118;
              v152 = v118 + 1;
              while (1)
              {
                v149 |= (unint64_t)(*(_BYTE *)(v151 + v150) & 0x7F) << v148;
                if ((*(_BYTE *)(v151 + v150) & 0x80) == 0)
                  break;
                v153 = v150 + 1;
                if (v150 <= 8)
                {
                  v154 = v152 + v150;
                  v148 += 7;
                  ++v150;
                  if (v154 < v97)
                    continue;
                }
                goto LABEL_260;
              }
              v153 = v150;
            }
LABEL_260:
            if (v149 + v173 > v97 || v149 + v173 < v173)
              goto LABEL_284;
            sub_2367F4DE4(v183, v149);
            if (v149)
            {
              for (m = 0; m != v149; ++m)
                *(_BYTE *)(v184 + m) = *(_BYTE *)(v25 + v173 + m);
            }
            if (v116)
              sub_2367F4E24(v184, v149, v117);
            if (v149)
            {
              v157 = 0;
              v158 = *(_QWORD *)v50;
              do
              {
                v159 = sub_2367F643C(*(_QWORD *)(v50 + 16), v158, v157, v119, v117, v175);
                sub_2367F4D8C((size_t *)v50, *(_BYTE *)(v184 + v157++) + v159);
              }
              while (v149 != v157);
            }
            v160 = v184;
            v184 = 0;
            v97 = v180;
            v100 = v181;
            if (v160)
            {
              v161 = -*(_QWORD *)(v160 - 24);
              do
                v162 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v162 + v161, &qword_2564313D8));
              free(*(void **)(v160 - 32));
            }
            v96 = v179 + v153 + 1;
            v49 = v149 + v173;
          }
          else
          {
            if ((v99 & 0xF8) != 0x10)
              goto LABEL_284;
            v132 = *(&off_250800858 + v99 - 16);
            v133 = v40 + 4;
            v134 = v40;
            sub_2367E8BBC((size_t *)v50, v40 + 4);
            v135 = *(_QWORD *)(v50 + 16);
            if (v135)
              v136 = v133;
            else
              v136 = 0;
            *(_QWORD *)v50 = v136;
            *(_DWORD *)(v135 + v134) = *v132;
            v137 = 4;
            v100 = v181;
            do
            {
              sub_2367F4D8C((size_t *)v50, 0);
              --v137;
            }
            while (v137);
            v96 = v98;
          }
        }
LABEL_278:
        v40 = *(_QWORD *)v50;
        if (*(_QWORD *)v50 > v24 || v96 > v100)
          goto LABEL_284;
        if (v96 == v100)
          goto LABEL_162;
      }
    }
    v97 = v180;
LABEL_162:
    v43 = v49 == v97 && v40 == v24;
    goto LABEL_58;
  }
  return v36;
}

void sub_2367F60EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(v1 - 136);
  *(_QWORD *)(v1 - 136) = 0;
  if (v3)
  {
    v4 = -*(_QWORD *)(v3 - 24);
    do
      v5 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v5 + v4, &qword_2564313D8));
    free(*(void **)(v3 - 32));
  }
  v6 = *(_QWORD *)(v1 - 112);
  *(_QWORD *)(v1 - 112) = 0;
  if (v6)
  {
    v7 = -*(_QWORD *)(v6 - 24);
    do
      v8 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v8 + v7, &qword_2564313D8));
    free(*(void **)(v6 - 32));
  }
  _Unwind_Resume(exception_object);
}

char *sub_2367F61D0(char *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  const void *v7;
  BOOL v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  size_t v13;

  *(_DWORD *)a2 = *((_DWORD *)result + 5);
  v2 = *((_DWORD *)result + 16);
  *(_DWORD *)(a2 + 12) = v2;
  *(_QWORD *)(a2 + 4) = *(_QWORD *)(result + 68);
  v3 = *((_QWORD *)result + 7);
  if (v3)
  {
    v4 = *(_QWORD *)&v2 & 0xFFFFFLL;
    v5 = (v2 + 512) & 0xFFFFF;
    v6 = (char *)(a2 + 16);
    v7 = (const void *)(v3 + 4 * (*(_QWORD *)&v2 & 0xFFFFFLL));
    v8 = v5 >= (*(_QWORD *)&v2 & 0xFFFFFuLL);
    v9 = v5 - (*(_QWORD *)&v2 & 0xFFFFFLL);
    if (v9 != 0 && v8)
    {
      v13 = 4 * v9;
      v12 = v6;
    }
    else
    {
      v10 = result;
      v11 = 0x100000 - v4;
      memcpy(v6, v7, 4 * (0x100000 - v4));
      v12 = &v6[4 * v11];
      v7 = (const void *)*((_QWORD *)v10 + 7);
      v13 = 4 * v5;
    }
    return (char *)memcpy(v12, v7, v13);
  }
  return result;
}

char *sub_2367F626C(char *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;

  *((_DWORD *)result + 5) = *(_DWORD *)a2;
  v2 = *(_DWORD *)(a2 + 12);
  *((_DWORD *)result + 16) = v2;
  *(_QWORD *)(result + 68) = *(_QWORD *)(a2 + 4);
  v3 = *((_QWORD *)result + 7);
  if (v3)
  {
    v4 = result;
    v5 = *(_QWORD *)&v2 & 0xFFFFFLL;
    v6 = (v2 + 512) & 0xFFFFF;
    v7 = (void *)(v3 + 4 * (*(_QWORD *)&v2 & 0xFFFFFLL));
    v8 = a2 + 16;
    v9 = v6 >= (*(_QWORD *)&v2 & 0xFFFFFuLL);
    v10 = v6 - (*(_QWORD *)&v2 & 0xFFFFFLL);
    if (v10 != 0 && v9)
    {
      v13 = 4 * v10;
      v12 = (const void *)(a2 + 16);
    }
    else
    {
      v11 = 0x100000 - v5;
      memcpy(v7, (const void *)(a2 + 16), 4 * (0x100000 - v5));
      v7 = (void *)*((_QWORD *)v4 + 7);
      v12 = (const void *)(v8 + 4 * v11);
      v13 = 4 * v6;
    }
    return (char *)memcpy(v7, v12, v13);
  }
  return result;
}

void sub_2367F6308(unsigned int a1, size_t *a2)
{
  unint64_t v4;
  size_t v5;
  size_t v6;

  v4 = *a2 + 4;
  sub_2367E8BBC(a2, v4);
  v5 = a2[2];
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  *a2 = v6;
  *(_DWORD *)(v6 + v5 - 4) = bswap32(a1);
}

_BYTE *sub_2367F6360(_BYTE *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  int v6;
  int v7;

  if (a2 >= 8 && a4 == 8)
  {
    *(_BYTE *)(a3 + 80) = result[4];
    *(_BYTE *)(a3 + 81) = result[5];
    *(_BYTE *)(a3 + 82) = result[6];
    v4 = result[7];
    v5 = 83;
LABEL_11:
    *(_BYTE *)(a3 + v5) = v4;
    return result;
  }
  if (a2 >= 0x29 && a4 == 41)
  {
    v6 = result[40];
    if (v6 == 65)
    {
      *(_WORD *)(a3 + 41) = 20560;
      *(_BYTE *)(a3 + 43) = 76;
      v6 = result[40];
    }
    if (v6 == 77)
    {
      *(_WORD *)(a3 + 41) = 18003;
      v4 = 84;
LABEL_10:
      v5 = 43;
      goto LABEL_11;
    }
  }
  else if (a2 >= 0x2A && a4 == 42 && result[40] == 83)
  {
    v7 = result[41];
    if (v7 == 71)
    {
      *(_WORD *)(a3 + 42) = 8265;
      if (result[40] != 83)
        return result;
      v7 = result[41];
    }
    if (v7 == 85)
    {
      *(_BYTE *)(a3 + 42) = 78;
      v4 = 87;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_2367F643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (a5 == 2)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFFELL) + a2;
    v10 = (unsigned __int8 *)(a1 + v9 - a4);
    v7 = *v10;
    v11 = v10[1];
    if (a6)
    {
      v11 |= v7 << 8;
      v7 = bswap32(*(unsigned __int16 *)(a1 + v9 - 2 * a4)) >> 16;
      if (a6 == 2)
      {
        v11 = 3 * (v11 - v7) + (bswap32(*(unsigned __int16 *)(a1 + -3 * a4 + v9)) >> 16);
        LOBYTE(v7) = BYTE1(v11);
      }
      else
      {
        LOWORD(v11) = 2 * v11 - v7;
        LOBYTE(v7) = BYTE1(v11);
        if (a6 != 1)
        {
          LOBYTE(v11) = 0;
          LOBYTE(v7) = 0;
        }
      }
    }
    if ((a3 & 1) != 0)
      LOBYTE(v7) = v11;
  }
  else
  {
    v6 = a3 + a2;
    if (a5 == 1)
    {
      LOBYTE(v7) = *(_BYTE *)(a1 + v6 - a4);
      if (a6)
      {
        v8 = *(_BYTE *)(a1 + v6 - 2 * a4);
        if (a6 == 2)
        {
          LOBYTE(v7) = *(_BYTE *)(a1 + -3 * a4 + v6) + 3 * (v7 - v8);
        }
        else if (a6 == 1)
        {
          LOBYTE(v7) = 2 * v7 - v8;
        }
        else
        {
          LOBYTE(v7) = 0;
        }
      }
    }
    else
    {
      v12 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + a2;
      if (v12 - a4 + 4 <= v6)
        v13 = bswap32(*(_DWORD *)(a1 + v12 - a4));
      else
        v13 = 0;
      v14 = v12 - 2 * a4;
      if (v14 + 4 <= v6)
        v15 = bswap32(*(_DWORD *)(a1 + v14));
      else
        v15 = 0;
      v16 = -3 * a4 + v12;
      if (v16 + 4 <= v6)
        v17 = bswap32(*(_DWORD *)(a1 + v16));
      else
        v17 = 0;
      v18 = v17 + 3 * (v13 - v15);
      v19 = 2 * v13 - v15;
      if (a6 != 1)
        v19 = 0;
      if (a6 != 2)
        v18 = v19;
      if (!a6)
        v18 = v13;
      return (v18 >> (~(8 * a3) & 0x18));
    }
  }
  return v7;
}

uint64_t sub_2367F65C8(unint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0x81)
    return 0;
  if ((a2 & 0xDFu) - 65 >= 0x1A)
  {
    v4 = 2;
    if (a2 - 48 >= 0xA && (a2 & 0xFD) != 0x2C)
    {
      if (a2)
      {
        if (a2 == 1)
        {
          v4 = 4;
        }
        else if (a2 >= 0x10u)
        {
          if (a2 == 255)
          {
            v4 = 7;
          }
          else
          {
            v4 = 8;
            if (a2 > 0xF0u)
              v4 = 6;
          }
        }
        else
        {
          v4 = 5;
        }
      }
      else
      {
        v4 = 3;
      }
    }
  }
  else
  {
    v4 = 1;
  }
  v5 = 32;
  if (a3 > 0xF0u)
    v5 = 24;
  if (a3 >= 0x10u)
    v6 = v5;
  else
    v6 = 16;
  if ((a3 & 0xFD) == 0x2C)
    v6 = 8;
  if (a3 - 48 < 0xA)
    v6 = 8;
  if ((a3 & 0xDFu) - 65 >= 0x1A)
    v7 = v6;
  else
    v7 = 0;
  return v7 + v4;
}

BOOL sub_2367F66B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (!*(_DWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(a1 + 4);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 16) * v2;
  do
    v4 = __ldxr((unsigned int *)&unk_2564313C0);
  while (__stxr(v4 + 1, (unsigned int *)&unk_2564313C0));
  v5 = sub_2368AAD08(v3, (v4 & 0xF) << 7);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
  {
    v7 = -*(_QWORD *)(v6 - 24);
    do
      v8 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v8 + v7, &qword_2564313D8));
    free(*(void **)(v6 - 32));
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 == 0;
}

int *sub_2367F6750(int *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  v5 = result[3];
  result[3] = a2[3];
  v6 = *((_QWORD *)result + 2);
  v7 = *((_QWORD *)result + 3);
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)result + 3) = v8;
  a2[3] = v5;
  *((_QWORD *)a2 + 2) = v6;
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

__n128 sub_2367F67A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  sub_2367D086C(a1 + 96, a2);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a3 + 8);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 237) = *(_QWORD *)(a3 + 21);
  *(_QWORD *)(a1 + 232) = v5;
  if (a1 + 216 != a3)
    sub_2367C9C54((_QWORD *)(a1 + 248), *(char **)(a3 + 32), *(char **)(a3 + 40), *(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32));
  v6 = *(_OWORD *)(a3 + 56);
  v7 = *(_OWORD *)(a3 + 72);
  v8 = *(_OWORD *)(a3 + 88);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a3 + 104);
  *(_OWORD *)(a1 + 288) = v7;
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 272) = v6;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a3 + 120);
  result = *(__n128 *)(a3 + 136);
  *(__n128 *)(a1 + 352) = result;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a3 + 176);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a3 + 192);
  return result;
}

uint64_t sub_2367F6844(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_2367C2F38((uint64_t *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2367F6898()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F68AC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t result;
  _DWORD *v6;
  uint64_t (*v7)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  int *v8;
  int v9;
  int v10;

  v4 = (_BYTE *)(a1 + 8);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 8);
  if (!(_DWORD)result)
  {
    v6 = (_DWORD *)(a1 + 12);
    v7 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32);
    if (*(_BYTE *)(a1 + 8))
    {
      result = v7(a2, 0x8000001080000020, 0x2580000018, 32, a1 + 12);
      if ((_DWORD)result)
        return result;
      v9 = *(_DWORD *)(a1 + 16);
      v8 = (int *)(a1 + 16);
      *v8 = v9 - 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(a2, 4, 7, v8);
      if ((_DWORD)result)
        return result;
      v10 = *v8 + 1;
      *v8 = v10;
    }
    else
    {
      result = v7(a2, 0x8000000A80000008, 0x258000000CLL, 8, a1 + 12);
      if ((_DWORD)result)
        return result;
      v10 = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
    if (*v4)
    {
      if ((v10 - 9) < 0xFFFFFFF9 || (*v6 - v10 - 25) < 0xFFFFFFEA)
        return 1;
    }
    else if (*v6 > 0x1Fu)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_2367F69EC()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F6A00(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 9))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 8)))
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 16);
    if ((_DWORD)result)
      return result;
  }
  v4 = (_DWORD *)(a1 + 96);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 3, 0, a1 + 96);
  if ((_DWORD)result)
    return result;
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *v4 & 1))
  {
LABEL_8:
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, (*v4 >> 1) & 1))
    {
      for (i = 0; i != 55; ++i)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 160 + i * 4, *(float *)&dword_236920234[i]);
        if ((_DWORD)result)
          return result;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, (*v4 >> 2) & 1))
    {
      v8 = 0;
      v9 = a1 + 380;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, v9 + v8 * 4, *(float *)&dword_236920310[v8]);
        if ((_DWORD)result)
          break;
        ++v8;
      }
      while (v8 != 210);
      return result;
    }
    return 0;
  }
  v6 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 100 + v6 * 4, *(float *)&dword_2369201F8[v6]);
    if ((_DWORD)result)
      return result;
    if (++v6 == 15)
      goto LABEL_8;
  }
}

uint64_t sub_2367F6BBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_2507FFBE0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_2367F6BF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_2507FFBE0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F6C44(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int __n;
  unsigned int __n_4;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 8))
  {
    __n_4 = *(_DWORD *)(a1 + 12);
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x8000000180000000, 0x24500000043, 0, &__n_4);
    if (!(_DWORD)result)
    {
      v5 = __n_4;
      *(_DWORD *)(a1 + 12) = __n_4;
      v6 = ((1 << v5) & 0x1807F) == 0 || v5 > 0x3F;
      result = v6;
      if (!v6)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1 + 16);
        if (!(_DWORD)result)
        {
          result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x8000000380000000, 0x2280000004, 0, a1 + 40);
          if (!(_DWORD)result)
          {
            if (*(_DWORD *)(a1 + 40) <= 3u)
            {
              if (*(char *)(a1 + 71) < 0)
                v7 = *(_QWORD *)(a1 + 56);
              else
                LODWORD(v7) = *(unsigned __int8 *)(a1 + 71);
              __n = v7;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)a2 + 32))(a2, 0x380000000, 0x60900000204, 0, &__n);
              if (!(_DWORD)result)
              {
                v8 = (uint64_t *)(a1 + 48);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2))
                  std::string::resize((std::string *)(a1 + 48), __n, 0);
                if (__n)
                {
                  v9 = 0;
                  while (1)
                  {
                    v13 = 0;
                    v10 = a1 + 48;
                    if (*(char *)(a1 + 71) < 0)
                      v10 = *v8;
                    v13 = *(unsigned __int8 *)(v10 + v9);
                    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 40))(a2, 8, 0, &v13);
                    if ((_DWORD)result)
                      break;
                    v11 = a1 + 48;
                    if (*(char *)(a1 + 71) < 0)
                      v11 = *v8;
                    *(_BYTE *)(v11 + v9++) = v13;
                    if (v9 >= __n)
                      goto LABEL_30;
                  }
                }
                else
                {
LABEL_30:
                  if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 0)|| (result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 72), !(_DWORD)result))
                  {
                    if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 2))
                    {
LABEL_35:
                      if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 12) == 5))
                      {
                        return (*(_DWORD *)(a1 + 12) - 7) < 9;
                      }
                      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x180000001, 0x26700000063, 1, a1 + 92);
                      if (!(_DWORD)result)
                        return (*(_DWORD *)(a1 + 12) - 7) < 9;
                    }
                    else
                    {
                      v12 = 0;
                      while (1)
                      {
                        result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 76 + v12, 0.0);
                        if ((_DWORD)result)
                          break;
                        v12 += 4;
                        if (v12 == 16)
                          goto LABEL_35;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              return 1;
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

void sub_2367F6F30(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &off_2507FFA40;
  v3 = (void **)(a1 + 328);
  sub_2367E8DB8(&v3);
  *(_QWORD *)(a1 + 48) = &off_2507FFA18;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F6FA0(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  char v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  char v15;

  v4 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 72))(a2, a1, a1 + 8);
  v5 = *a2;
  if (!v4)
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 80))(a2, a1);
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t *))(v5 + 96))(a2) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v12 = &off_2507FF770;
    v15 = 1;
    v13 = xmmword_2368AF3F0;
    v14 = 0;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(a1 + 288) + 16))(a1 + 288, &v12);
    v6 = v15 != 0;
  }
  if (*(_DWORD *)(a1 + 248) != 1 || *(_BYTE *)(a1 + 252) || *(_BYTE *)(a1 + 253))
  {
    v8 = 1;
  }
  else
  {
    v8 = !v6;
    if (*(_BYTE *)(a1 + 254))
      v8 = 1;
  }
  LOBYTE(v12) = v8;
  result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t (***)()))(*a2 + 24))(a2, 0, &v12);
  if (!(_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a2 + 64))(a2, v12))
    {
      *(_DWORD *)(a1 + 248) = 1;
      *(_BYTE *)(a1 + 254) = 0;
      *(_WORD *)(a1 + 252) = 0;
    }
    else
    {
      --*(_DWORD *)(a1 + 248);
      result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*a2 + 40))(a2, 3, 0, a1 + 248);
      if ((_DWORD)result)
        return result;
      ++*(_DWORD *)(a1 + 248);
      result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*a2 + 24))(a2, 0, a1 + 254);
      if ((_DWORD)result)
        return result;
      if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a2 + 64))(a2, *(unsigned __int8 *)(a1 + 254)))
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 256);
        if ((_DWORD)result)
          return result;
      }
      result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*a2 + 24))(a2, 0, a1 + 252);
      if ((_DWORD)result)
        return result;
      if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a2 + 64))(a2, *(unsigned __int8 *)(a1 + 252)))
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 352);
        if ((_DWORD)result)
          return result;
      }
      result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*a2 + 24))(a2, 0, a1 + 253);
      if ((_DWORD)result)
        return result;
      if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a2 + 64))(a2, *(unsigned __int8 *)(a1 + 253)))
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 384);
        if ((_DWORD)result)
          return result;
      }
    }
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 16);
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 24))(a2, 1, a1 + 40);
      if (!(_DWORD)result)
      {
        v9 = (_DWORD *)(a1 + 320);
        *(_DWORD *)(a1 + 320) = -1431655765 * ((*(_QWORD *)(a1 + 336) - *(_QWORD *)(a1 + 328)) >> 5);
        result = (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t, _QWORD, uint64_t))(*a2 + 32))(a2, 0x8000000180000000, 0x2B00000043, 0, a1 + 320);
        if (!(_DWORD)result)
        {
          if (!(*(unsigned int (**)(uint64_t *, BOOL))(*a2 + 64))(a2, *v9 != 0))
          {
            if ((*(unsigned int (**)(uint64_t *))(*a2 + 96))(a2))
              sub_2367F73B4((int64x2_t *)(a1 + 328), *v9);
            v10 = *(_QWORD *)(a1 + 328);
            v11 = *(_QWORD *)(a1 + 336);
            while (v10 != v11)
            {
              result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, v10);
              if ((_DWORD)result)
                return result;
              v10 += 96;
            }
          }
          result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 24))(a2, 1, a1 + 41);
          if (!(_DWORD)result)
          {
            result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 48);
            if (!(_DWORD)result)
            {
              if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a2 + 64))(a2, v12)
                || (result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 88))(a2, a1 + 288), !(_DWORD)result))
              {
                if (!(*(unsigned int (**)(uint64_t *))(*a2 + 96))(a2) || !*(_BYTE *)(a1 + 416))
                {
                  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 104))(a2, a1 + 408);
                  if (!(_DWORD)result)
                    return (*(uint64_t (**)(uint64_t *))(*a2 + 112))(a2);
                  return result;
                }
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

int64x2_t *sub_2367F73B4(int64x2_t *result, unint64_t a2)
{
  int64x2_t *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int64x2_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t (***v30)(_QWORD);
  uint64_t (**v31)(_QWORD *);
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int64x2_t v37;
  char *v38;
  int64x2_t *v39;

  v3 = result;
  v4 = result->i64[0];
  v5 = (_QWORD *)result->i64[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - result->i64[0]) >> 5);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v28 = (_QWORD *)(v4 + 96 * a2);
      if (v5 != v28)
      {
        v29 = v5 - 12;
        v30 = (uint64_t (***)(_QWORD))(v5 - 12);
        do
        {
          v31 = (uint64_t (**)(_QWORD *))*v30;
          v30 -= 12;
          result = (int64x2_t *)(*v31)(v29);
          v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
      }
      v3->i64[1] = (uint64_t)v28;
    }
  }
  else
  {
    v8 = result[1].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 5) >= v7)
    {
      v33 = &v5[12 * v7];
      v34 = 96 * a2 - 32 * (((uint64_t)v5 - result->i64[0]) >> 5);
      do
      {
        result = (int64x2_t *)sub_2367F7604(v5);
        v5 += 12;
        v34 -= 96;
      }
      while (v34);
      v3->i64[1] = (uint64_t)v33;
    }
    else
    {
      if (a2 > 0x2AAAAAAAAAAAAAALL)
        sub_2367C3440();
      v39 = result + 1;
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 5);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x155555555555555)
        v11 = 0x2AAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (char *)sub_2367E923C(v11);
      v13 = &v12[96 * v6];
      v36 = v12;
      v37.i64[0] = (uint64_t)v13;
      v37.i64[1] = (uint64_t)v13;
      v38 = &v12[96 * v14];
      v15 = 3 * a2;
      v16 = &v12[96 * a2];
      v17 = 32 * v15 - 96 * v6;
      do
      {
        sub_2367F7604(v13);
        v13 += 96;
        v17 -= 96;
      }
      while (v17);
      v37.i64[1] = (uint64_t)v16;
      v19 = v3->i64[0];
      v18 = v3->u64[1];
      v20 = v37.i64[0];
      if (v18 == v3->i64[0])
      {
        v27 = vdupq_n_s64(v18);
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v20 + v21;
          *(_QWORD *)(v22 - 96) = off_2507FFBE0;
          v23 = v18 + v21;
          *(_QWORD *)(v22 - 88) = *(_QWORD *)(v18 + v21 - 88);
          *(_QWORD *)(v22 - 80) = &off_250800448;
          v24 = *(_QWORD *)(v18 + v21 - 72);
          *(_DWORD *)(v22 - 64) = *(_DWORD *)(v18 + v21 - 64);
          *(_QWORD *)(v22 - 72) = v24;
          *(_DWORD *)(v22 - 56) = *(_DWORD *)(v18 + v21 - 56);
          v25 = *(_OWORD *)(v18 + v21 - 48);
          *(_QWORD *)(v22 - 32) = *(_QWORD *)(v18 + v21 - 32);
          *(_OWORD *)(v22 - 48) = v25;
          *(_QWORD *)(v23 - 40) = 0;
          *(_QWORD *)(v23 - 32) = 0;
          *(_QWORD *)(v23 - 48) = 0;
          v26 = *(_OWORD *)(v18 + v21 - 24);
          *(_QWORD *)(v22 - 8) = *(_QWORD *)(v18 + v21 - 8);
          *(_OWORD *)(v22 - 24) = v26;
          v21 -= 96;
        }
        while (v18 + v21 != v19);
        v20 += v21;
        v27 = *v3;
        v16 = (char *)v37.i64[1];
      }
      v3->i64[0] = v20;
      v3->i64[1] = (uint64_t)v16;
      v37 = v27;
      v35 = (char *)v3[1].i64[0];
      v3[1].i64[0] = (uint64_t)v38;
      v38 = v35;
      v36 = (char *)v27.i64[0];
      return (int64x2_t *)sub_2367F76C0((uint64_t)&v36);
    }
  }
  return result;
}

void sub_2367F75E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2367F7604(_QWORD *a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  a1[2] = &off_250800448;
  *a1 = off_2507FFBE0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F68AC((uint64_t)(a1 + 2), (uint64_t)&v3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*a1 + 16))(a1, &v3);
  return a1;
}

void sub_2367F76A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367F76C0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2367F7714()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F7728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 8))
  {
    v4 = 0;
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 12 + v4 * 4, *(float *)&dword_2369206F4[v4]);
      if ((_DWORD)result)
        break;
      if (++v4 == 9)
      {
        v6 = 0;
        while (1)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 48 + v6, *(float *)((char *)&xmmword_236925EE0 + v6));
          if ((_DWORD)result)
            break;
          v6 += 4;
          if (v6 == 12)
          {
            v7 = 0;
            v8 = a1 + 60;
            while (1)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, v8 + v7, *(float *)((char *)&xmmword_236920658 + v7));
              if ((_DWORD)result)
                break;
              v7 += 4;
              if (v7 == 16)
                return 0;
            }
            return result;
          }
        }
        return result;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

void sub_2367F783C()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F7850(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t result;
  float *v6;
  _BYTE *v7;
  float *v8;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 8))
  {
    v4 = (float *)(a1 + 12);
    result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 12, 255.0);
    if (!(_DWORD)result)
    {
      if (*v4 <= 0.0)
        return 1;
      v6 = (float *)(a1 + 16);
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 16, 0.0);
      if (!(_DWORD)result)
      {
        if (*v6 < 0.0)
          return 1;
        if (*v6 > *v4)
          return 1;
        v7 = (_BYTE *)(a1 + 20);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 20);
        if (!(_DWORD)result)
        {
          v8 = (float *)(a1 + 24);
          result = (*(uint64_t (**)(uint64_t, float *, float))(*(_QWORD *)a2 + 56))(a2, v8, 0.0);
          if (!(_DWORD)result)
          {
            if (*v8 < 0.0)
              return 1;
            result = 0;
            if (*v8 > 1.0)
            {
              if (*v7)
                return 1;
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

uint64_t sub_2367F7984(uint64_t a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_2507FFC30;
  *(_QWORD *)(a1 + 16) = &off_2507FFC08;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F7728(a1 + 16, (uint64_t)&v3);
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v3);
  return a1;
}

uint64_t sub_2367F7A14(uint64_t a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = &off_250800448;
  *(_QWORD *)a1 = &off_2507FFA40;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F68AC(a1 + 16, (uint64_t)&v3);
  sub_2367CA390(a1 + 48);
  *(_DWORD *)(a1 + 248) = 1;
  *(_WORD *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 254) = 0;
  *(_QWORD *)(a1 + 256) = &off_2507FF488;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F42A0(a1 + 256, (uint64_t)&v3);
  *(_QWORD *)(a1 + 288) = &off_2507FF500;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F7850(a1 + 288, (uint64_t)&v3);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = &off_2507FFA68;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F4468(a1 + 352, (uint64_t)&v3);
  *(_QWORD *)(a1 + 384) = &off_2507FFB90;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367F4650(a1 + 384, (uint64_t)&v3);
  *(_BYTE *)(a1 + 416) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v3);
  return a1;
}

void sub_2367F7B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  a12 = (void **)(v12 + 328);
  sub_2367E8DB8(&a12);
  *(_QWORD *)(v12 + 48) = &off_2507FFA18;
  v14 = *(void **)(v12 + 80);
  if (v14)
  {
    *(_QWORD *)(v12 + 88) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void sub_2367F7BB0()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367F7BC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 1, a1 + 9);
  if ((_DWORD)result)
    return result;
  if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 9)))
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 10);
    if ((_DWORD)result)
      return result;
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 10)))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 12, 0.11517);
      if ((_DWORD)result)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 16, 0.061249);
      if ((_DWORD)result)
        return result;
      if (fabsf((float)((float)(*(float *)(a1 + 12) + *(float *)(a1 + 16)) * 4.0) + 1.0) < 0.00000001)
        return 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 20, 0.11517);
      if ((_DWORD)result)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 24, 0.061249);
      if ((_DWORD)result)
        return result;
      if (fabsf((float)((float)(*(float *)(a1 + 20) + *(float *)(a1 + 24)) * 4.0) + 1.0) < 0.00000001)
        return 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 28, 0.11517);
      if ((_DWORD)result)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 32, 0.061249);
      if ((_DWORD)result)
        return result;
      if (fabsf((float)((float)(*(float *)(a1 + 28) + *(float *)(a1 + 32)) * 4.0) + 1.0) < 0.00000001)
        return 1;
    }
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 2, 2, a1 + 36);
  if ((_DWORD)result)
    return result;
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 36) != 0))
  {
LABEL_6:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a1 + 128);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_BYTE *)(a1 + 136) == 0))
    goto LABEL_17;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 40);
  if ((_DWORD)result)
    return result;
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 40)))
  {
LABEL_17:
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 76);
    if (!(_DWORD)result)
    {
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 76))
        || (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 80, 40.0),
            !(_DWORD)result)
        && (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 84, 5.0),
            !(_DWORD)result)
        && (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 88, 3.5),
            !(_DWORD)result)
        && (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 92, 0.45),
            !(_DWORD)result)
        && (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 96, 0.6),
            !(_DWORD)result))
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, a1 + 100);
        if (!(_DWORD)result)
        {
          if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 100))|| ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_BYTE *)(a1 + 136) == 0)|| (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 104, 0.46), !(_DWORD)result))&& (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 108, 0.9), !(_DWORD)result)&& (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 112, 6.5), !(_DWORD)result)&& (result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 116, 0.66667), !(_DWORD)result))
          {
            if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(a1 + 136)))
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, a1 + 120, 1.0);
              if ((_DWORD)result)
                return result;
              if (*(float *)(a1 + 120) < 0.00000001)
                return 1;
            }
            goto LABEL_6;
          }
        }
      }
    }
  }
  else
  {
    v5 = 0;
    v6 = a1 + 44;
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 56))(a2, v6, (float)v5 / 7.0);
      if ((_DWORD)result)
        break;
      ++v5;
      v6 += 4;
      if (v5 == 8)
        goto LABEL_17;
    }
  }
  return result;
}

void *sub_2367F8118(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9A607DBBuLL);
}

void sub_2367F8128(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_2367F8130(unint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __int16 v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int64x2_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v69;
  uint64_t (**v70)();
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[2];
  void *v75[2];
  void *__p[2];
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  unint64_t v81[3];
  char *v82;
  char *v83;
  char *v84;

  memset(v81, 0, sizeof(v81));
  *(_OWORD *)__p = 0u;
  v77 = 0u;
  *(_OWORD *)v75 = 0u;
  memset(v74, 0, sizeof(v74));
  v78 = &off_2507FF438;
  v79 = xmmword_2368AF590;
  v70 = &off_2507FF550;
  v71 = xmmword_2368AF3F0;
  v72 = 0;
  sub_2367CB9F8((uint64_t)&v78, (uint64_t)&v70);
  v80 = 0;
  v6 = sub_2367CC178(a1, 6uLL, (uint64_t)v74, v81, 0);
  if (!(_DWORD)v6)
  {
    v7 = (unsigned __int8 *)v81[0];
    if (*((int *)__p[1] + *(unsigned __int8 *)(v81[0] + 1)) <= 0)
    {
      sub_2367C4794((uint64_t)&v70, (uint64_t)v74, a1, 0);
      v8 = 0;
      v9 = 0x400000;
      if (a3 < 0x400000)
        v9 = a3;
      v69 = v9;
      v10 = *a2;
      a2[1] = *a2;
      v11 = 1;
      do
      {
        v13 = a1[3];
        v12 = a1[4];
        v14 = 8 * (a1[2] - v12 + a1[5]) - a1[1];
        a1[7] = v14;
        if (v14 > 8 * (v13 - v12) + 64
          || 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a2) >> 3) > v69
          || (v15 = sub_2367C4CF4((uint64_t)&v70, v7[1], a1), v15 > 0x100))
        {
LABEL_48:
          v6 = 1;
          goto LABEL_49;
        }
        if (v15)
        {
          v16 = v15 - 1;
          v17 = sub_2367C4CF4((uint64_t)&v70, *v7, a1);
          v18 = (v17 >> 1) ^ -(v17 & 1);
          v19 = a2[1];
          v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - *a2) >> 3);
          v21 = v20 + v11++;
          v22 = v20 + v11;
          v23 = a2[2];
          if (v19 >= v23)
          {
            v35 = v20 + 1;
            if (v20 + 1 > 0x666666666666666)
              goto LABEL_64;
            if (0x999999999999999ALL * ((uint64_t)(v23 - *a2) >> 3) > v35)
              v35 = 0x999999999999999ALL * ((uint64_t)(v23 - *a2) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *a2) >> 3) >= 0x333333333333333)
              v36 = 0x666666666666666;
            else
              v36 = v35;
            v37 = (char *)sub_2367DC0A4(v36);
            v39 = &v37[40 * v20];
            *(_DWORD *)v39 = v18;
            *((_WORD *)v39 + 2) = v16;
            *((_DWORD *)v39 + 2) = v21;
            *((_DWORD *)v39 + 3) = v22;
            *((_DWORD *)v39 + 4) = 0;
            *((_QWORD *)v39 + 3) = 0;
            *((_DWORD *)v39 + 8) = 1;
            v41 = (char *)*a2;
            v40 = (char *)a2[1];
            v42 = (uint64_t)v39;
            if (v40 != (char *)*a2)
            {
              do
              {
                v43 = *(_OWORD *)(v40 - 40);
                v44 = *(_OWORD *)(v40 - 24);
                *(_DWORD *)(v42 - 8) = *((_DWORD *)v40 - 2);
                *(_OWORD *)(v42 - 24) = v44;
                *(_OWORD *)(v42 - 40) = v43;
                v42 -= 40;
                v40 -= 40;
              }
              while (v40 != v41);
              v40 = (char *)*a2;
            }
            v10 = (uint64_t)(v39 + 40);
            *a2 = v42;
            a2[1] = (uint64_t)(v39 + 40);
            a2[2] = (uint64_t)&v37[40 * v38];
            if (v40)
              operator delete(v40);
            v24 = v8;
          }
          else
          {
            *(_DWORD *)v19 = v18;
            *(_WORD *)(v19 + 4) = v16;
            *(_DWORD *)(v19 + 8) = v21;
            *(_DWORD *)(v19 + 12) = v22;
            *(_DWORD *)(v19 + 16) = 0;
            *(_QWORD *)(v19 + 24) = 0;
            v10 = v19 + 40;
            v24 = v8;
            *(_DWORD *)(v19 + 32) = 1;
          }
        }
        else
        {
          v25 = sub_2367C4CF4((uint64_t)&v70, v7[2], a1);
          if (v25 > 0xD)
            goto LABEL_48;
          v26 = v25;
          v27 = sub_2367C4CF4((uint64_t)&v70, v7[3], a1);
          v28 = sub_2367C4CF4((uint64_t)&v70, v7[4], a1);
          v29 = v28;
          if (v28 > 0x1E)
            goto LABEL_48;
          v30 = sub_2367C4CF4((uint64_t)&v70, v7[5], a1);
          if ((0x80000000 >> v29) - 1 <= v30)
            goto LABEL_48;
          --v11;
          v31 = -(uint64_t)(v27 & 1) ^ (v27 >> 1);
          v32 = (v30 + 1) << v29;
          v24 = v8 + 1;
          v33 = a2[1];
          v34 = a2[2];
          if (v33 >= v34)
          {
            v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - *a2) >> 3);
            v46 = v45 + 1;
            if (v45 + 1 > 0x666666666666666)
LABEL_64:
              sub_2367C3440();
            v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - *a2) >> 3);
            if (2 * v47 > v46)
              v46 = 2 * v47;
            if (v47 >= 0x333333333333333)
              v48 = 0x666666666666666;
            else
              v48 = v46;
            v49 = (char *)sub_2367DC0A4(v48);
            v51 = &v49[40 * v45];
            *(_DWORD *)v51 = 0;
            *((_WORD *)v51 + 2) = -1;
            *((_DWORD *)v51 + 2) = v8;
            *((_DWORD *)v51 + 3) = 0;
            *((_DWORD *)v51 + 4) = v26;
            *((_QWORD *)v51 + 3) = v31;
            *((_DWORD *)v51 + 8) = v32;
            v53 = (char *)*a2;
            v52 = (char *)a2[1];
            v54 = (uint64_t)v51;
            if (v52 != (char *)*a2)
            {
              do
              {
                v55 = *(_OWORD *)(v52 - 40);
                v56 = *(_OWORD *)(v52 - 24);
                *(_DWORD *)(v54 - 8) = *((_DWORD *)v52 - 2);
                *(_OWORD *)(v54 - 24) = v56;
                *(_OWORD *)(v54 - 40) = v55;
                v54 -= 40;
                v52 -= 40;
              }
              while (v52 != v53);
              v52 = (char *)*a2;
            }
            v10 = (uint64_t)(v51 + 40);
            *a2 = v54;
            a2[1] = (uint64_t)(v51 + 40);
            a2[2] = (uint64_t)&v49[40 * v50];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *(_DWORD *)v33 = 0;
            *(_WORD *)(v33 + 4) = -1;
            *(_DWORD *)(v33 + 8) = v8;
            *(_DWORD *)(v33 + 12) = 0;
            *(_DWORD *)(v33 + 16) = v26;
            *(_QWORD *)(v33 + 24) = v31;
            v10 = v33 + 40;
            *(_DWORD *)(v33 + 32) = v32;
          }
        }
        a2[1] = v10;
        v8 = v24;
      }
      while (v11);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v57 = (char *)sub_2367CA1FC(0x100uLL);
      v59 = v57;
      v60 = 0;
      v61 = vdupq_n_s64(0x7FFFFFFF80000000uLL);
      do
      {
        *(int64x2_t *)&v57[v60] = v61;
        v60 += 16;
      }
      while (v60 != 2048);
      v82 = v57;
      v83 = v57 + 2048;
      v84 = &v57[8 * v58];
      v6 = sub_2367F87F0(a2, (uint64_t *)&v82, 0);
      if (v59)
      {
        v83 = v59;
        operator delete(v59);
      }
      if (!(_DWORD)v6)
        v6 = HIDWORD(v71) != 1245184;
LABEL_49:
      v62 = v73;
      v73 = 0;
      if (v62)
      {
        v63 = -*(_QWORD *)(v62 - 24);
        do
          v64 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v64 + v63, &qword_2564313D8));
        free(*(void **)(v62 - 32));
      }
    }
    else
    {
      v6 = 1;
    }
  }
  if (__p[1])
  {
    *(void **)&v77 = __p[1];
    operator delete(__p[1]);
  }
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  v70 = (uint64_t (**)())v74 + 1;
  sub_2367C4718((void ***)&v70);
  v65 = *(_QWORD *)&v74[0];
  *(_QWORD *)&v74[0] = 0;
  if (v65)
  {
    v66 = -*(_QWORD *)(v65 - 24);
    do
      v67 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v67 + v66, &qword_2564313D8));
    free(*(void **)(v65 - 32));
  }
  if (v81[0])
    operator delete((void *)v81[0]);
  return v6;
}

void sub_2367F8704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  void *v22;

  *(_QWORD *)(v18 - 104) = v17;
  operator delete(v17);
  if (a17)
  {
    v20 = -*(_QWORD *)(a17 - 24);
    do
      v21 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v21 + v20, &qword_2564313D8));
    free(*(void **)(a17 - 32));
  }
  sub_2367C4C94((uint64_t)&STACK[0x260]);
  v22 = *(void **)(v18 - 136);
  if (v22)
    operator delete(v22);
  _Unwind_Resume(a1);
}

void sub_2367F8780()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v1;
    operator delete(v1);
  }
  v2 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v2;
    operator delete(v2);
  }
  *(_QWORD *)(v0 - 112) = &STACK[0x268];
  sub_2367C4718((void ***)(v0 - 112));
  v3 = STACK[0x260];
  STACK[0x260] = 0;
  if (v3)
  {
    v4 = -*(_QWORD *)(v3 - 24);
    do
      v5 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v5 + v4, &qword_2564313D8));
    free(*(void **)(v3 - 32));
  }
  JUMPOUT(0x2367F876CLL);
}

uint64_t sub_2367F87F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char *v19;
  char *v20;
  char *v21;

  v3 = *a1;
  v4 = *(__int16 *)(*a1 + 40 * a3 + 4);
  if (v4 == -1)
    return 0;
  v7 = *(_DWORD *)(v3 + 40 * a3);
  v8 = *a2;
  if (*(_DWORD *)(*a2 + 8 * v4) > v7 || *(_DWORD *)(v8 + 8 * v4 + 4) <= v7)
    return 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v10 = a2[1];
  v11 = v10 - v8;
  if (v10 == v8)
  {
    v13 = 0;
  }
  else
  {
    if (v11 < 0)
      sub_2367C3440();
    v12 = (char *)sub_2367CA1FC(v11 >> 3);
    v13 = v12;
    v14 = 0;
    v19 = v12;
    v21 = &v12[8 * v15];
    do
    {
      *(_QWORD *)&v12[v14] = *(_QWORD *)(v8 + v14);
      v14 += 8;
    }
    while (v8 + v14 != v10);
    v20 = &v12[v14];
    v3 = *a1;
  }
  v17 = &v13[2 * v4];
  *v17 = v7 + 1;
  v16 = sub_2367F87F0(a1, &v19, *(unsigned int *)(v3 + 40 * a3 + 8));
  if (!(_DWORD)v16)
  {
    *v17 = *(_DWORD *)(*a2 + 8 * v4);
    v13[2 * v4 + 1] = v7;
    v16 = sub_2367F87F0(a1, &v19, *(unsigned int *)(*a1 + 40 * a3 + 12));
  }
  operator delete(v13);
  return v16;
}

void sub_2367F8964(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2367F8978(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, _BYTE *a5, BOOL *a6, BOOL *a7)
{
  BOOL *v7;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  BOOL v67;
  _BYTE *v69;
  BOOL *v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _OWORD v81[2];
  __int128 v82;

  v7 = a7;
  *a4 = 0;
  *a7 = 1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v82 = 0u;
  memset(v81, 0, sizeof(v81));
  *(_QWORD *)&v79 = 0;
  sub_2367F8FA4(v81, &v79);
  v69 = a5;
  v11 = *((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v12 = 0;
    v13 = 0;
    v73 = 0;
    v14 = 0;
    v70 = v7;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v81[0] + 1) + (((unint64_t)v82 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v82 & 0x1FF));
      *(_QWORD *)&v82 = v82 + 1;
      *((_QWORD *)&v82 + 1) = v11 - 1;
      if ((unint64_t)v82 >= 0x400)
      {
        operator delete(**((void ***)&v81[0] + 1));
        *((_QWORD *)&v81[0] + 1) += 8;
        *(_QWORD *)&v82 = v82 - 512;
      }
      v16 = *a2;
      v17 = *a2 + 40 * v15;
      v18 = *(__int16 *)(v17 + 4);
      if (v18 > 1)
        break;
      while ((_WORD)v18 != 0xFFFF)
      {
        v19 = v16 + 40 * v15;
        v20 = (unsigned int *)(v19 + 8);
        v21 = (unsigned int *)(v19 + 12);
        if (*(_DWORD *)(a3 + 4 * (__int16)v18) <= *(_DWORD *)v17)
          v22 = v21;
        else
          v22 = v20;
        v15 = *v22;
        v17 = v16 + 40 * v15;
        v18 = *(__int16 *)(v17 + 4);
        if (v18 >= 2)
          goto LABEL_11;
      }
      v43 = v16 + 40 * v15;
      v44 = *(_QWORD *)(v43 + 24);
      LODWORD(v80) = *(_DWORD *)(v43 + 8);
      HIDWORD(v80) = v44;
      v45 = *(_DWORD *)(v43 + 16);
      LODWORD(v79) = -1;
      DWORD1(v79) = v45;
      DWORD2(v79) = *(_DWORD *)(v43 + 32);
      v47 = v45 == 5 && *v7;
      *v7 = v47;
      v73 |= v45 == 6;
      v14 |= v45 != 6;
      v48 = a1;
      v49 = a1[2];
      if ((unint64_t)v13 < v49)
        goto LABEL_57;
      v50 = (_QWORD *)*a1;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - *a1) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_86;
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)v50) >> 3);
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v52;
      if (v54)
        v54 = (unint64_t)sub_2367D1EBC(v54);
      else
        v55 = 0;
      v61 = v54 + 24 * v51;
      *(_OWORD *)v61 = v79;
      *(_QWORD *)(v61 + 16) = v80;
      v12 = v61;
      if (v13 == v50)
        goto LABEL_74;
      do
      {
        v64 = *(_OWORD *)(v13 - 3);
        *(_QWORD *)(v12 - 8) = *(v13 - 1);
        *(_OWORD *)(v12 - 24) = v64;
        v12 -= 24;
        v13 -= 3;
      }
      while (v13 != v50);
LABEL_73:
      v65 = a1;
      v13 = (_QWORD *)*a1;
LABEL_75:
      v58 = (_QWORD *)(v61 + 24);
      *v65 = v12;
      v65[1] = v61 + 24;
      v65[2] = v54 + 24 * v55;
      if (v13)
      {
        operator delete(v13);
        v48 = a1;
      }
      else
      {
        v48 = v65;
      }
LABEL_78:
      v48[1] = (unint64_t)v58;
      v11 = *((_QWORD *)&v82 + 1);
      v13 = v58;
      if (!*((_QWORD *)&v82 + 1))
        goto LABEL_81;
    }
LABEL_11:
    v72 = v14;
    v23 = 0;
    v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v12) >> 3);
    LODWORD(v80) = v71 + DWORD2(v82) + 1;
    v24 = (unsigned __int16)v18 + 1;
    if (*a4 > v24)
      v24 = *a4;
    *a4 = v24;
    v25 = *(_DWORD *)v17;
    LODWORD(v79) = (unsigned __int16)v18;
    DWORD1(v79) = v25;
    v26 = 1;
    do
    {
      v27 = v26;
      v28 = *a2;
      v29 = 12;
      if ((v27 & 1) != 0)
        v29 = 8;
      v30 = *(unsigned int *)(*a2 + 40 * v15 + v29);
      v31 = v28 + 40 * v30;
      v32 = *(__int16 *)(v31 + 4);
      if (v32 > 1)
      {
LABEL_22:
        *((_WORD *)&v80 + v23 + 2) = v32;
        *((_DWORD *)&v79 + v23 + 2) = *(_DWORD *)v31;
        v77 = *(unsigned int *)(v28 + 40 * v30 + 8);
        sub_2367F8FA4(v81, &v77);
        v77 = *(unsigned int *)(*a2 + 40 * v30 + 12);
        sub_2367F8FA4(v81, &v77);
        if (v32 + 1 > (unint64_t)*a4)
          v37 = v32 + 1;
        else
          v37 = *a4;
        *a4 = v37;
      }
      else
      {
        while ((_WORD)v32 != 0xFFFF)
        {
          v33 = v28 + 40 * v30;
          v34 = (unsigned int *)(v33 + 12);
          v35 = (unsigned int *)(v33 + 8);
          if (*(_DWORD *)(a3 + 4 * (__int16)v32) <= *(_DWORD *)v31)
            v36 = v34;
          else
            v36 = v35;
          v30 = *v36;
          v31 = v28 + 40 * v30;
          v32 = *(__int16 *)(v31 + 4);
          if (v32 >= 2)
            goto LABEL_22;
        }
        v78 = v30;
        *((_WORD *)&v80 + v23 + 2) = 0;
        *((_DWORD *)&v79 + v23 + 2) = 0;
        sub_2367F8FA4(v81, &v78);
        sub_2367F8FA4(v81, &v78);
      }
      v26 = 0;
      v23 = 1;
    }
    while ((v27 & 1) != 0);
    v38 = 0;
    v39 = 1;
    v7 = v70;
    v14 = v72;
    v40 = v73;
    while (1)
    {
      v41 = v39;
      v42 = *((unsigned __int16 *)&v80 + v38 + 2);
      if (v42 == 15)
      {
        v40 = 1;
      }
      else
      {
        if ((__int16)v42 < 2)
          goto LABEL_34;
        v14 = 1;
        if (v42 == 9)
          goto LABEL_34;
      }
      *v70 = 0;
LABEL_34:
      v39 = 0;
      v38 = 1;
      if ((v41 & 1) == 0)
      {
        if (v18 == 9)
        {
          v14 = 1;
        }
        else
        {
          if ((unsigned __int16)v18 == 15)
            v40 = 1;
          else
            v14 = 1;
          *v70 = 0;
        }
        v73 = v40;
        v48 = a1;
        v56 = a1[2];
        if ((unint64_t)v13 < v56)
        {
LABEL_57:
          v57 = v79;
          v13[2] = v80;
          *(_OWORD *)v13 = v57;
          v58 = v13 + 3;
          goto LABEL_78;
        }
        v59 = v71 + 1;
        if (v71 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v12) >> 3);
          if (2 * v60 > v59)
            v59 = 2 * v60;
          if (v60 >= 0x555555555555555)
            v54 = 0xAAAAAAAAAAAAAAALL;
          else
            v54 = v59;
          if (v54)
            v54 = (unint64_t)sub_2367D1EBC(v54);
          else
            v55 = 0;
          v61 = v54 + 8 * ((uint64_t)((uint64_t)v13 - v12) >> 3);
          *(_OWORD *)v61 = v79;
          *(_QWORD *)(v61 + 16) = v80;
          v62 = (_QWORD *)*a1;
          v12 = v61;
          if (v13 != (_QWORD *)*a1)
          {
            do
            {
              v63 = *(_OWORD *)(v13 - 3);
              *(_QWORD *)(v12 - 8) = *(v13 - 1);
              *(_OWORD *)(v12 - 24) = v63;
              v12 -= 24;
              v13 -= 3;
            }
            while (v13 != v62);
            goto LABEL_73;
          }
LABEL_74:
          v65 = a1;
          goto LABEL_75;
        }
LABEL_86:
        sub_2367C3440();
      }
    }
  }
  LOBYTE(v14) = 0;
  LOBYTE(v73) = 0;
LABEL_81:
  v66 = 16;
  if ((unint64_t)*a4 > 0x10)
    v66 = ((*a4 - 13) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  *a4 = v66;
  *v69 = v73;
  v67 = v73 != 0;
  if ((_BYTE)v14)
    v67 = 0;
  *a6 = v67;
  return sub_2367F902C((uint64_t)v81);
}

void sub_2367F8F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v18;
  va_list va;

  va_start(va, a17);
  sub_2367F902C((uint64_t)va);
  v18 = *(void **)a8;
  if (*(_QWORD *)a8)
  {
    *(_QWORD *)(a8 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_2367F8FA4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_2367F90F0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

uint64_t sub_2367F902C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2367F90F0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)sub_2367CA1FC(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)sub_2367CA1FC(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)sub_2367CA1FC(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)sub_2367CA1FC(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0x1000uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)sub_2367CA1FC(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)sub_2367CA1FC(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_2367F959C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2367F95CC(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v13;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t *v17;
  unsigned int *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  int *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  _DWORD *v54;
  char v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  int *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  char v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _DWORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t i;
  void *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int v183;
  _QWORD *v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  _BOOL4 v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  int *v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  int v205;
  int v206;
  _DWORD *v207;
  char v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  int v215;
  int v216;
  char v217;
  int v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int v232;
  _BOOL4 v233;
  unint64_t v234;
  uint64_t v235;
  int *v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  int v240;
  int v241;
  _DWORD *v242;
  char v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  int v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _DWORD *v254;
  _DWORD *v255;
  unint64_t v256;
  BOOL v257;
  uint64_t v258;
  char v259;
  char v260;
  _DWORD *v261;
  unint64_t v262;
  int32x4_t v263;
  int32x4_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  int32x4_t v285;
  int32x4_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int *v290;
  signed int v291;
  _BOOL4 v292;
  signed int v293;
  unsigned int v294;
  int v295;
  unsigned int *v296;
  uint64_t v297;
  unsigned int *v298;
  signed int v299;
  _BOOL4 v300;
  signed int v301;
  unsigned int v302;
  int v303;
  uint64_t v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;
  BOOL v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  unsigned int v317;
  _QWORD *v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unsigned int v329;
  _BOOL4 v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  int *v335;
  unint64_t v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  _DWORD *v341;
  char v342;
  int v343;
  unint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unint64_t v352;
  int v353;
  int v354;
  char v355;
  int v356;
  unint64_t v357;
  _QWORD *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  int v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unsigned int v370;
  _BOOL4 v371;
  unint64_t v372;
  uint64_t v373;
  int *v374;
  unint64_t v375;
  unint64_t v376;
  int v377;
  int v378;
  int v379;
  _DWORD *v380;
  char v381;
  int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  unint64_t v391;
  _DWORD *v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  _DWORD *v425;
  int v426;
  uint64_t v427;
  _DWORD *v428;
  _DWORD *v429;
  unint64_t *v430;
  uint64_t *v431;
  int v432;
  uint64_t v433;
  unsigned int v434;
  void *v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD v443[12];
  void *__p;
  void *v445;
  __int128 v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int *v453;
  _DWORD *v454;
  unsigned int *v455;
  unsigned int *v456;
  unint64_t v457;
  BOOL v458;
  __int16 v459;
  _DWORD v460[4];

  v13 = a2;
  if (!*(_QWORD *)(a2 + 56))
    return sub_2367FB154(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = (_QWORD *)(*a9 + ((uint64_t)a6 << 6));
  v460[0] = a6;
  v460[1] = a7;
  v16 = v15 + 5;
  if (!v15[5])
    return 0;
  v17 = v15 + 6;
  if (!v15[6])
    return 0;
  v459 = 0;
  v458 = 0;
  v457 = 0;
  sub_2367F8978((unint64_t *)&v455, a4, (uint64_t)v460, (uint64_t *)&v457, (_BYTE *)&v459 + 1, (BOOL *)&v459, &v458);
  v18 = v455;
  v19 = (char *)v456 - (char *)v455;
  if (v456 != v455)
  {
    v20 = v19 / 24;
    v21 = *a3;
    if ((unint64_t)(v19 / 24) <= 1)
      v20 = 1;
    v22 = v455 + 4;
    do
    {
      if (*(v22 - 4) == -1)
        *v22 = *(unsigned __int8 *)(v21 + *v22);
      v22 += 6;
      --v20;
    }
    while (v20);
  }
  v426 = a7;
  v428 = (_DWORD *)v13;
  v430 = a1;
  v431 = v15 + 5;
  v421 = v15 + 6;
  v422 = (uint64_t)v15;
  if (v19 == 24)
  {
    v23 = v18[1];
    v24 = v18[2];
    v26 = v18[4];
    v25 = v18[5];
    if (v23)
    {
      if (v23 == 5 && !v25 && v24 == 1)
      {
        v27 = v430;
        if (!*(_QWORD *)(v13 + 56) || !*(_BYTE *)(v13 + 16))
          goto LABEL_120;
        v28 = 0;
        v29 = *(unsigned int *)(v13 + 76);
        v30 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v29);
        do
        {
          if (*(_BYTE *)(v30 + v28) || *(_WORD *)(v30 + v28 + 2) != 1)
            goto LABEL_120;
          v28 += 4;
        }
        while (v28 != 32);
        if (*(_DWORD *)(*(_QWORD *)(v13 + 24) + 16 * v29 + 4) > 1u)
        {
LABEL_120:
          v136 = *v17;
          if (*v17)
          {
            v137 = 0;
            v138 = v15[2] >> 2;
            v139 = -v138;
            v140 = *v16;
            v141 = -1 * v138;
            do
            {
              if (v140)
              {
                v142 = 0;
                v143 = (_DWORD *)(v15[3] + v15[2] * v137);
                v144 = v143;
                do
                {
                  if (v142)
                  {
                    v145 = *(v144 - 1);
                    if (v137)
                    {
                      v147 = v144[v141 - 1];
                      v146 = v144[v141];
                    }
                    else
                    {
                      v146 = *(v144 - 1);
                      v147 = v146;
                    }
                  }
                  else if (v137)
                  {
                    v146 = v143[v139];
                    v145 = v146;
                    v147 = v146;
                  }
                  else
                  {
                    v146 = 0;
                    v145 = 0;
                    v147 = 0;
                  }
                  v148 = sub_2367C4CF4((uint64_t)v428, v26, v430);
                  if (v146 <= v145)
                    v149 = v145;
                  else
                    v149 = v146;
                  if (v145 >= v146)
                    v150 = v146;
                  else
                    v150 = v145;
                  v151 = v145 + v146 - v147;
                  if (v150 > v147)
                    v151 = v149;
                  if (v149 >= v147)
                    v152 = v151;
                  else
                    v152 = v150;
                  *v144++ = v152 + ((v148 >> 1) ^ -(v148 & 1));
                  ++v142;
                  v140 = *v431;
                }
                while (v142 < *v431);
                v15 = (_QWORD *)v422;
                v136 = *v421;
              }
              ++v137;
            }
            while (v137 < v136);
          }
          goto LABEL_384;
        }
        if (!*v17)
          goto LABEL_384;
        v31 = 0;
        LODWORD(v32) = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *(_QWORD *)(v422 + 16);
          v36 = *(_QWORD *)(v422 + 24);
          v37 = (_DWORD *)(v36 + v35 * v31);
          if (v31)
          {
            v38 = v35 * (v31 - 1);
            v39 = (_DWORD *)(v36 + v38);
            v40 = *(_DWORD *)(v36 + v38);
            if (!v34)
              goto LABEL_29;
          }
          else
          {
            v38 = 0;
            v40 = 0;
            v39 = v37 - 1;
            if (!v34)
            {
LABEL_29:
              v41 = (_QWORD *)v27[2];
              if ((unint64_t)v41 > v27[3])
              {
                sub_2367C5188(v27);
              }
              else
              {
                v42 = v27[1];
                v43 = *v27 | (*v41 << v42);
                v27[2] = (unint64_t)v41 + ((63 - v42) >> 3);
                *v27 = v43;
                v27[1] = v42 | 0x38;
              }
              v44 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v26), v27);
              v45 = *(unsigned int *)(v13 + 84);
              v46 = v44 >= v45;
              v47 = v44 - v45;
              if (v46)
              {
                v95 = *(unsigned int *)(v13 + 92);
                v46 = v47 >= v95;
                v96 = v47 - v95;
                if (v46)
                {
                  v98 = v428[24];
                  v97 = v428[25];
                  v99 = v428[22] - (v98 + v97) + (v96 >> (v98 + v97));
                  v100 = *v430 & ~(-1 << v99);
                  v101 = v430[1] - (v99 & 0x1F);
                  *v430 >>= v99 & 0x1F;
                  v430[1] = v101;
                  LODWORD(v47) = v47 & ~(-1 << v97) | ((unint64_t)(v100 | (((v47 >> v97) & ((1 << v98) - 1) | (1 << v98)) << v99)) << v97);
                }
                v13 = (uint64_t)v428;
                v27 = v430;
                v34 = v47 + v428[20] - 1;
              }
              else
              {
                v48 = (int *)(*(_QWORD *)(v13 + 24) + 16 * v26);
                v49 = v48[1];
                v50 = v44 - v49;
                if (v44 >= v49)
                {
                  v34 = 0;
                  v51 = *v48;
                  v54 = v48 + 2;
                  v52 = v48[2];
                  v53 = v54[1];
                  v55 = v51 - (v52 + v53) + (v50 >> (v52 + v53));
                  v56 = *v27 & ~(-1 << v55);
                  v57 = v27[1] - (v55 & 0x1F);
                  *v27 >>= v55 & 0x1F;
                  v27[1] = v57;
                  v33 = v44 & ~(-1 << v53) | ((v56 | ((((unint64_t)v44 >> v53) & ((1 << v52) - 1) | (1 << v52)) << v55)) << v53);
                }
                else
                {
                  v34 = 0;
                  v33 = v44;
                }
              }
              v32 = -(uint64_t)(v33 & 1) ^ ((unint64_t)v33 >> 1);
              goto LABEL_36;
            }
          }
          --v34;
LABEL_36:
          v58 = v40 + v32;
          *v37 = v40 + v32;
          v59 = *v431;
          if ((unint64_t)*v431 >= 2)
          {
            v60 = 0;
            v61 = v36 + v38;
            v62 = v37 + 1;
            v63 = v39 + 1;
            do
            {
              v64 = v63[v60];
              v65 = *(_DWORD *)(v61 + 4 * v60);
              if (v58 >= v64)
                v66 = v63[v60];
              else
                v66 = v58;
              if (v64 <= v58)
                v67 = v58;
              else
                v67 = v63[v60];
              v68 = v64 + v58 - v65;
              if (v66 > v65)
                v68 = v67;
              if (v67 >= v65)
                v69 = v68;
              else
                v69 = v66;
              if (v34)
              {
                --v34;
              }
              else
              {
                v70 = (_QWORD *)v27[2];
                if ((unint64_t)v70 > v27[3])
                {
                  sub_2367C5188(v27);
                }
                else
                {
                  v71 = v27[1];
                  v72 = *v27 | (*v70 << v71);
                  v27[2] = (unint64_t)v70 + ((63 - v71) >> 3);
                  *v27 = v72;
                  v27[1] = v71 | 0x38;
                }
                v73 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v26), v27);
                v74 = *(unsigned int *)(v13 + 84);
                v46 = v73 >= v74;
                v75 = v73 - v74;
                if (v46)
                {
                  v87 = *(unsigned int *)(v13 + 92);
                  v46 = v75 >= v87;
                  v88 = v75 - v87;
                  if (v46)
                  {
                    v90 = *(_DWORD *)(v13 + 96);
                    v89 = *(_DWORD *)(v13 + 100);
                    v91 = *(_DWORD *)(v13 + 88) - (v90 + v89) + (v88 >> (v90 + v89));
                    v92 = *v27 & ~(-1 << v91);
                    v93 = v27[1] - (v91 & 0x1F);
                    *v27 >>= v91 & 0x1F;
                    v27[1] = v93;
                    LODWORD(v75) = v75 & ~(-1 << v89) | ((unint64_t)(v92 | (((v75 >> v89) & ((1 << v90) - 1) | (1 << v90)) << v91)) << v89);
                  }
                  v34 = v75 + *(_DWORD *)(v13 + 80) - 1;
                }
                else
                {
                  v76 = (int *)(*(_QWORD *)(v13 + 24) + 16 * v26);
                  v77 = v76[1];
                  v78 = v73 - v77;
                  if (v73 >= v77)
                  {
                    v34 = 0;
                    v79 = *v76;
                    v82 = v76 + 2;
                    v80 = v76[2];
                    v81 = v82[1];
                    v83 = v79 - (v80 + v81) + (v78 >> (v80 + v81));
                    v84 = *v27 & ~(-1 << v83);
                    v85 = v27[1] - (v83 & 0x1F);
                    *v27 >>= v83 & 0x1F;
                    v27[1] = v85;
                    v33 = v73 & ~(-1 << v81) | ((v84 | ((((unint64_t)v73 >> v81) & ((1 << v80) - 1) | (1 << v80)) << v83)) << v81);
                  }
                  else
                  {
                    v34 = 0;
                    v33 = v73;
                  }
                }
                v32 = -(uint64_t)(v33 & 1) ^ ((unint64_t)v33 >> 1);
                v59 = *v431;
              }
              v58 = v69 + v32;
              v62[v60] = v69 + v32;
              v86 = v60 + 2;
              ++v60;
            }
            while (v86 < v59);
          }
          v94 = 0;
          if (++v31 >= *v421)
            goto LABEL_385;
        }
      }
      goto LABEL_74;
    }
    LODWORD(v439) = 0;
    if (sub_2367FE070(v13, v26, &v439, *v17 * *v16))
    {
      v125 = *v17;
      if (*v17)
      {
        v126 = 0;
        v127 = v25 + (-(v439 & 1) ^ (v439 >> 1)) * v24;
        v128 = *v431;
        v129 = (*v431 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          if (v128 >= 1)
          {
            v130 = (_DWORD *)(v15[3] + v15[2] * v126);
            v131 = v129;
            do
            {
              *v130++ = v127;
              --v131;
            }
            while (v131 > 1);
          }
          ++v126;
        }
        while (v126 != v125);
      }
      goto LABEL_384;
    }
    v178 = *v17;
    if (v24 != 1 || v25)
    {
      if (v178)
      {
        v396 = 0;
        v397 = *v431;
        do
        {
          if (v397)
          {
            v398 = 0;
            v399 = v13;
            v400 = *(_QWORD *)(v422 + 24) + *(_QWORD *)(v422 + 16) * v396;
            do
            {
              v401 = sub_2367C4CF4(v399, v26, v430);
              *(_DWORD *)(v400 + 4 * v398++) = v25 + v24 * ((v401 >> 1) ^ -(v401 & 1));
              v397 = *v431;
            }
            while (v398 < *v431);
            v178 = *v421;
            v13 = v399;
          }
          ++v396;
        }
        while (v396 < v178);
      }
      goto LABEL_384;
    }
    if (!v178)
      goto LABEL_384;
    v179 = 0;
    v180 = *v431;
    while (!v180)
    {
LABEL_237:
      if (++v179 >= v178)
        goto LABEL_384;
    }
    v181 = 0;
    v182 = v15[3] + v15[2] * v179;
    while (1)
    {
      v183 = *(_DWORD *)(v13 + 68);
      if (!v183)
      {
        v184 = (_QWORD *)v430[2];
        if ((unint64_t)v184 > v430[3])
        {
          sub_2367C5188(v430);
        }
        else
        {
          v185 = v430[1];
          v186 = *v430 | (*v184 << v185);
          v430[2] = (unint64_t)v184 + ((63 - v185) >> 3);
          *v430 = v186;
          v430[1] = v185 | 0x38;
        }
        if (*(_BYTE *)(v13 + 16))
        {
          v194 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v26), v430);
        }
        else
        {
          v187 = *(_DWORD *)(v13 + 20);
          v188 = (unint64_t)(v187 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          v189 = *(_DWORD *)(v13 + 40) & v187 & 0xFFFu;
          v190 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v26 << *(_DWORD *)(v13 + 32)) + 8 * v188);
          if (v190 <= v189)
            v191 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v26 << *(_DWORD *)(v13 + 32)) + 8 * v188);
          else
            v191 = 0;
          v192 = HIDWORD(v191);
          v193 = HIWORD(v191);
          if (v190 <= v189)
            v194 = BYTE1(v190);
          else
            v194 = (unint64_t)(v187 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          v195 = v189 + (unsigned __int16)v192 + (v193 ^ WORD1(v190)) * (*(_DWORD *)(v13 + 20) >> 12);
          v196 = v195 < 0x10000;
          v197 = *v430 >> (16 * v196);
          if (v195 < 0x10000)
            v195 = (unsigned __int16)*v430 | ((unsigned __int16)v195 << 16);
          *(_DWORD *)(v13 + 20) = v195;
          v198 = v430[1] - 16 * v196;
          *v430 = v197;
          v430[1] = v198;
        }
        v199 = *(unsigned int *)(v13 + 84);
        v46 = v194 >= v199;
        v200 = v194 - v199;
        if (!v46)
        {
          v201 = (int *)(*(_QWORD *)(v13 + 24) + 16 * v26);
          v202 = v201[1];
          v46 = v194 >= v202;
          v203 = v194 - v202;
          if (v46)
          {
            v204 = *v201;
            v207 = v201 + 2;
            v205 = v201[2];
            v206 = v207[1];
            v208 = v204 - (v205 + v206) + (v203 >> (v205 + v206));
            v209 = *v430 & ~(-1 << v208);
            v210 = v430[1] - (v208 & 0x1F);
            *v430 >>= v208 & 0x1F;
            v430[1] = v210;
            LODWORD(v194) = v194 & ~(-1 << v206) | ((unint64_t)(v209 | (((v194 >> v206) & ((1 << v205) - 1) | (1 << v205)) << v208)) << v206);
          }
          v211 = *(_QWORD *)(v13 + 56);
          if (!v211)
            goto LABEL_199;
          goto LABEL_198;
        }
        v213 = *(unsigned int *)(v13 + 92);
        v46 = v200 >= v213;
        v214 = v200 - v213;
        if (v46)
        {
          v216 = *(_DWORD *)(v13 + 96);
          v215 = *(_DWORD *)(v13 + 100);
          v217 = *(_DWORD *)(v13 + 88) - (v216 + v215) + (v214 >> (v216 + v215));
          v218 = *v430 & ~(-1 << v217);
          v219 = v430[1] - (v217 & 0x1F);
          *v430 >>= v217 & 0x1F;
          v430[1] = v219;
          LODWORD(v200) = v200 & ~(-1 << v215) | ((unint64_t)(v218 | (((v200 >> v215) & ((1 << v216) - 1) | (1 << v216)) << v217)) << v215);
        }
        *(_DWORD *)(v13 + 68) = *(_DWORD *)(v13 + 80) + v200;
        v220 = (_QWORD *)v430[2];
        if ((unint64_t)v220 > v430[3])
        {
          sub_2367C5188(v430);
        }
        else
        {
          v221 = v430[1];
          v222 = *v430 | (*v220 << v221);
          v430[2] = (unint64_t)v220 + ((63 - v221) >> 3);
          *v430 = v222;
          v430[1] = v221 | 0x38;
        }
        v223 = *(unsigned int *)(v13 + 76);
        if (*(_BYTE *)(v13 + 16))
        {
          v231 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v223), v430);
          v223 = *(unsigned int *)(v13 + 76);
        }
        else
        {
          v224 = *(_DWORD *)(v13 + 20);
          v225 = (unint64_t)(v224 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          v226 = *(_DWORD *)(v13 + 40) & v224 & 0xFFFu;
          v227 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v223 << *(_DWORD *)(v13 + 32)) + 8 * v225);
          if (v227 <= v226)
            v228 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v223 << *(_DWORD *)(v13 + 32)) + 8 * v225);
          else
            v228 = 0;
          v229 = HIDWORD(v228);
          v230 = HIWORD(v228);
          if (v227 <= v226)
            v231 = BYTE1(v227);
          else
            v231 = (unint64_t)(v224 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          v232 = v226 + (unsigned __int16)v229 + (v230 ^ WORD1(v227)) * (*(_DWORD *)(v13 + 20) >> 12);
          v233 = v232 < 0x10000;
          v234 = *v430 >> (16 * v233);
          if (v232 < 0x10000)
            v232 = (unsigned __int16)*v430 | ((unsigned __int16)v232 << 16);
          *(_DWORD *)(v13 + 20) = v232;
          v235 = v430[1] - 16 * v233;
          *v430 = v234;
          v430[1] = v235;
        }
        v236 = (int *)(*(_QWORD *)(v13 + 24) + 16 * v223);
        v237 = v236[1];
        v46 = v231 >= v237;
        v238 = v231 - v237;
        if (v46)
        {
          v239 = *v236;
          v242 = v236 + 2;
          v240 = v236[2];
          v241 = v242[1];
          v243 = v239 - (v240 + v241) + (v238 >> (v240 + v241));
          v244 = *v430 & ~(-1 << v243);
          v245 = v430[1] - (v243 & 0x1F);
          *v430 >>= v243 & 0x1F;
          v430[1] = v245;
          LODWORD(v231) = v231 & ~(-1 << v241) | ((unint64_t)(v244 | (((v231 >> v241) & ((1 << v240) - 1) | (1 << v240)) << v243)) << v241);
        }
        v246 = *(unsigned int *)(v13 + 584);
        if (v231 >= v246)
          v247 = v231 - v246 + 1;
        else
          v247 = *(unsigned int *)(v13 + 4 * v231 + 104);
        v248 = *(unsigned int *)(v13 + 64);
        if (v247 > v248)
          v247 = *(unsigned int *)(v13 + 64);
        if (v247 > 0x100000)
        {
          *(_DWORD *)(v13 + 72) = v248 - 0x100000;
        }
        else
        {
          *(_DWORD *)(v13 + 72) = v248 - v247;
          if (!v247)
          {
            v250 = *(_DWORD *)(v13 + 68);
            if (v250 >= 0x100000)
              v250 = 0x100000;
            bzero(*(void **)(v13 + 56), 4 * v250);
          }
        }
        v183 = *(_DWORD *)(v13 + 68);
        if (v183 < *(_DWORD *)(v13 + 80))
        {
          LODWORD(v194) = 0;
          goto LABEL_199;
        }
      }
      v211 = *(_QWORD *)(v13 + 56);
      v249 = *(_DWORD *)(v13 + 72);
      *(_DWORD *)(v13 + 72) = v249 + 1;
      LODWORD(v194) = *(_DWORD *)(v211 + 4 * (*(_QWORD *)&v249 & 0xFFFFFLL));
      *(_DWORD *)(v13 + 68) = v183 - 1;
LABEL_198:
      v212 = *(_DWORD *)(v13 + 64);
      *(_DWORD *)(v13 + 64) = v212 + 1;
      *(_DWORD *)(v211 + 4 * (*(_QWORD *)&v212 & 0xFFFFFLL)) = v194;
LABEL_199:
      *(_DWORD *)(v182 + 4 * v181++) = -(v194 & 1) ^ (v194 >> 1);
      v180 = *v431;
      if (v181 >= *v431)
      {
        v178 = *v421;
        goto LABEL_237;
      }
    }
  }
LABEL_74:
  if ((_BYTE)v459)
    LOBYTE(v459) = sub_2367FE12C((uint64_t *)&v455, a8);
  if (v458)
  {
    v103 = sub_2367FE12C((uint64_t *)&v455, a8);
    v458 = v103;
    if (v103)
    {
      v104 = *v17;
      if (*v17)
      {
        v105 = 0;
        v106 = v15[2] >> 2;
        v423 = -v106;
        v107 = *v431;
        v427 = -1 * v106;
        do
        {
          if (v107)
          {
            v108 = 0;
            v109 = (_DWORD *)(*(_QWORD *)(v422 + 24) + *(_QWORD *)(v422 + 16) * v105);
            v425 = v109;
            do
            {
              if (v108)
              {
                v110 = *(v109 - 1);
                v111 = v110;
                if (v105)
                {
                  v113 = (int)v109[v427 - 1];
                  v112 = (int)v109[v427];
                }
                else
                {
                  v112 = v110;
                  v113 = v110;
                }
              }
              else if (v105)
              {
                v110 = v425[v423];
                v112 = v110;
                v111 = v110;
                v113 = v110;
              }
              else
              {
                v112 = 0;
                v110 = 0;
                v111 = 0;
                v113 = 0;
              }
              v114 = v111 + v112 - v113;
              if (v114 <= -512)
                v114 = -512;
              if (v114 >= 511)
                v114 = 511;
              v115 = v114 + 512;
              v116 = sub_2367C4CF4((uint64_t)v428, *(unsigned __int8 *)(a8 + v114 + 512), v430);
              if (v110 <= (int)v112)
                v117 = v112;
              else
                v117 = v110;
              if (v110 >= (int)v112)
                v118 = v112;
              else
                v118 = v110;
              v119 = v110 + v112 - v113;
              if (v118 > (int)v113)
                v119 = v117;
              if (v117 >= (int)v113)
                v118 = v119;
              *v109++ = *(char *)(a8 + 1024 + v115) + v118 + ((v116 >> 1) ^ -(v116 & 1)) * *(char *)(a8 + 2048 + v115);
              ++v108;
              v107 = *v431;
            }
            while (v108 < *v431);
            v104 = *v421;
          }
          ++v105;
        }
        while (v105 < v104);
      }
      goto LABEL_384;
    }
  }
  if (HIBYTE(v459))
  {
    sub_2367CBE88(&v453, v457);
    v120 = v15[2];
    v121 = v454 - v453;
    v122 = v121 - 16;
    v123 = *v16;
    sub_2367DA410((uint64_t)&v439, v121 - 16, *v16);
    v124 = v443[0];
    if (LODWORD(v443[0]))
    {
      v94 = LODWORD(v443[0]);
    }
    else
    {
      v446 = v439;
      v447 = v440;
      v448 = v441;
      v419 = v441;
      v449 = v442;
      v450 = v122;
      v451 = v123;
      v452 = 0;
      v435 = &off_250800498;
      v153 = *(_OWORD *)(a5 + 8);
      v154 = *(_OWORD *)(a5 + 40);
      v437 = *(_OWORD *)(a5 + 24);
      v438 = v154;
      v436 = v153;
      sub_2367FE7B0((uint64_t)&v439, (uint64_t)&v435, *v16);
      if (*v17)
      {
        v155 = 0;
        do
        {
          v157 = *(_QWORD *)(v422 + 16);
          v156 = *(_QWORD *)(v422 + 24);
          v158 = v453;
          *v453 = a6;
          v158[1] = v426;
          v158[2] = v155;
          v158[9] = 0;
          sub_2367FE934(v422, v155, a9, a6, (unsigned int *)&v446);
          v159 = *v431;
          if (*v431)
          {
            v160 = 0;
            v161 = v156 + v157 * v155;
            do
            {
              sub_2367FEE64((uint64_t)&v432, v453, v159, v161 + 4 * v160, v120 >> 2, v160, v155, &v455, &v446, (uint64_t)&v439);
              v162 = sub_2367C4CF4((uint64_t)v428, v432, v430);
              v163 = 0;
              v164 = v433 + (-(uint64_t)(v162 & 1) ^ (v162 >> 1)) * v434;
              *(_DWORD *)(v161 + 4 * v160) = v164;
              v159 = *v431;
              v165 = *v431 + 2;
              if ((v155 & 1) != 0)
                v166 = 0;
              else
                v166 = *v431 + 2;
              v167 = 8 * (int)v164;
              v168 = v166 + v160;
              *((_DWORD *)__p + v168) = v442 - v167;
              v169 = ++v160 + (((uint64_t)(v155 << 63) >> 63) & v165);
              v170 = v443;
              do
              {
                v171 = *(_QWORD *)((char *)&v439 + v163) - v167;
                if (v171 < 0)
                  v171 = v167 - *(_QWORD *)((char *)&v439 + v163);
                v172 = (unint64_t)(v171 + 3) >> 3;
                v173 = *v170;
                v170 += 3;
                *(_DWORD *)(v173 + 4 * v168) = v172;
                *(_DWORD *)(v173 + 4 * v169) += v172;
                v163 += 8;
              }
              while (v163 != 32);
            }
            while (v160 < v159);
          }
          ++v155;
        }
        while (v155 < *v421);
      }
      if (__p)
      {
        v445 = __p;
        operator delete(__p);
      }
      for (i = 0; i != -12; i -= 3)
      {
        v175 = (void *)v443[i + 9];
        if (v175)
        {
          v443[i + 10] = v175;
          operator delete(v175);
        }
      }
      v448 = 0;
      v124 = 0;
      if (v419)
      {
        v176 = -*(_QWORD *)(v419 - 24);
        do
          v177 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v177 + v176, &qword_2564313D8));
        free(*(void **)(v419 - 32));
      }
      v94 = 0;
    }
    if (v453)
    {
      v454 = v453;
      operator delete(v453);
    }
    if (!v124)
      goto LABEL_384;
    goto LABEL_385;
  }
  sub_2367CBE88(&v435, v457);
  v132 = v15[2];
  v133 = (uint64_t)(v436 - (_QWORD)v435) >> 2;
  v134 = *v16;
  v418 = v133 - 16;
  sub_2367DA410((uint64_t)&v446, v133 - 16, *v16);
  v135 = v450;
  if ((_DWORD)v450)
  {
    v94 = v450;
    goto LABEL_373;
  }
  v439 = v446;
  v440 = v447;
  v441 = v448;
  v412 = v448;
  v442 = v449;
  v443[0] = v418;
  v443[1] = v134;
  v443[2] = 0;
  if (!*v17)
    goto LABEL_368;
  v251 = 0;
  v252 = v132 >> 2;
  v416 = ~(v132 >> 2);
  v415 = -(uint64_t)(v132 >> 2) - (v132 >> 2);
  v413 = -4 * (v132 >> 2);
  v414 = 2 - (v132 >> 2);
  do
  {
    v253 = *(_QWORD *)(v422 + 24);
    v420 = *(_QWORD *)(v422 + 16);
    v254 = (_DWORD *)(v253 + v420 * v251);
    sub_2367FE934(v422, v251, a9, a6, (unsigned int *)&v439);
    v255 = v435;
    *(_DWORD *)v435 = a6;
    v255[1] = v426;
    v255[2] = v251;
    v255[9] = 0;
    v256 = *v16;
    if (v251 < 2 || (v256 >= 9 ? (v257 = v418 == 0) : (v257 = 0), !v257))
    {
      if (v256)
      {
        v390 = 0;
        do
        {
          sub_2367FEB28((uint64_t)&v446, v435, v256, (uint64_t)v254, v252, v390, v251, &v455, &v439);
          v391 = sub_2367C4CF4(v13, (int)v446, v430);
          *v254++ = DWORD2(v446) + ((v391 >> 1) ^ -(v391 & 1)) * HIDWORD(v447);
          ++v390;
          v256 = *v16;
        }
        while (v390 < *v16);
      }
      goto LABEL_367;
    }
    v417 = v253;
    v258 = 0;
    v259 = 1;
    do
    {
      v260 = v259;
      v261 = &v254[v258];
      sub_2367FEB28((uint64_t)&v446, v435, *v16, (uint64_t)v261, v252, v258, v251, &v455, &v439);
      v262 = sub_2367C4CF4(v13, (int)v446, v430);
      v259 = 0;
      *v261 = DWORD2(v446) + ((v262 >> 1) ^ -(v262 & 1)) * HIDWORD(v447);
      v258 = 1;
    }
    while ((v260 & 1) != 0);
    v429 = v254;
    v265 = v252;
    v266 = *v16;
    v267 = *v16 - 2;
    if (v267 < 3)
    {
      v269 = v430;
      goto LABEL_364;
    }
    v268 = 2;
    v269 = v430;
    v271 = v415;
    v270 = v416;
    v273 = v413;
    v272 = v414;
    do
    {
      v274 = &v429[v268];
      v275 = (int)v274[v270];
      v263.i64[0] = *(_QWORD *)((char *)v274 + v273);
      v277 = (int)*(v274 - 2);
      v276 = (int)*(v274 - 1);
      v278 = (int)v274[v271];
      v279 = (int)v274[v272];
      v280 = (char *)v435;
      if (v263.i32[0] >= 0)
        LODWORD(v281) = v263.i32[0];
      else
        v281 = -(uint64_t)v263.i32[0];
      *((_DWORD *)v435 + 3) = v268;
      *((_DWORD *)v280 + 4) = v281;
      if (v276 >= 0)
        LODWORD(v282) = v276;
      else
        v282 = -v276;
      *((_DWORD *)v280 + 5) = v282;
      *((_DWORD *)v280 + 6) = v263.i32[0];
      v283 = v276 - *((_DWORD *)v280 + 9);
      *((_DWORD *)v280 + 7) = v276;
      *((_DWORD *)v280 + 8) = v283;
      v284 = v263.i32[0] + v276 - v275;
      v264.i32[0] = v275;
      v285.i64[0] = vzip1q_s32(v264, v263).u64[0];
      v285.i64[1] = __PAIR64__(v276, v285.u32[1]);
      v286.i64[0] = v263.i64[0];
      v286.i64[1] = __PAIR64__(v277, v278);
      *((_DWORD *)v280 + 9) = v284;
      *((_DWORD *)v280 + 10) = v276 - v275;
      v264 = vsubq_s32(v285, v286);
      *(int32x4_t *)(v280 + 44) = v264;
      v287 = *v18;
      if ((v287 & 0x80000000) != 0)
      {
        LODWORD(v288) = 0;
      }
      else
      {
        v288 = 0;
        v289 = v18;
        do
        {
          v290 = &v18[6 * v288];
          v291 = v290[1];
          v292 = *(_DWORD *)&v280[4 * *((__int16 *)v290 + 10)] <= (int)v290[2];
          v293 = v290[3];
          v294 = v290[4];
          v295 = (*(_DWORD *)&v280[4 * *((__int16 *)v289 + 11)] <= v293) | 2;
          if (*(_DWORD *)&v280[4 * v287] > v291)
            v295 = v292;
          LODWORD(v288) = v295 + v294;
          v296 = &v18[6 * v288];
          v297 = *v296;
          if ((v297 & 0x80000000) != 0)
            break;
          v298 = &v18[6 * v288];
          v299 = v298[1];
          v300 = *(_DWORD *)&v280[4 * *((__int16 *)v298 + 10)] <= (int)v298[2];
          v301 = v298[3];
          v302 = v298[4];
          v303 = (*(_DWORD *)&v280[4 * *((__int16 *)v296 + 11)] <= v301) | 2;
          if (*(_DWORD *)&v280[4 * v297] > v299)
            v303 = v300;
          v288 = v303 + v302;
          v289 = &v18[6 * v288];
          v287 = *v289;
        }
        while ((v287 & 0x80000000) == 0);
      }
      LODWORD(v304) = 0;
      v305 = &v18[6 * v288];
      v306 = v305[2];
      v307 = v305[5];
      v308 = (int)v305[4];
      switch(v305[1])
      {
        case 1u:
          LODWORD(v304) = v276;
          break;
        case 2u:
          LODWORD(v304) = v263.i32[0];
          break;
        case 3u:
          v309 = __OFADD__(v263.i32[0], v276);
          v311 = v263.i32[0] + v276;
          v310 = (v311 < 0) ^ v309;
          goto LABEL_295;
        case 4u:
          v312 = v263.i32[0] + v276 - v275;
          v313 = v312 - v276;
          if (v312 - v276 < 0)
            v313 = v276 - v312;
          v314 = v312 - v263.i32[0];
          if (v314 < 0)
            v314 = -v314;
          if (v313 >= v314)
            LODWORD(v304) = v263.i32[0];
          else
            LODWORD(v304) = v276;
          break;
        case 5u:
          if (v263.i32[0] >= (int)v276)
            v315 = v276;
          else
            v315 = v263.i32[0];
          if ((int)v276 <= v263.i32[0])
            LODWORD(v276) = v263.i32[0];
          if (v315 <= (int)v275)
            v316 = v284;
          else
            v316 = v276;
          if ((int)v276 >= (int)v275)
            LODWORD(v304) = v316;
          else
            LODWORD(v304) = v315;
          break;
        case 7u:
          LODWORD(v304) = v263.i32[1];
          break;
        case 8u:
          LODWORD(v304) = v275;
          break;
        case 9u:
          LODWORD(v304) = v277;
          break;
        case 0xAu:
          v309 = __OFADD__(v275, v276);
          v311 = v275 + v276;
          v310 = (v311 < 0) ^ v309;
          goto LABEL_295;
        case 0xBu:
          v311 = v275 + v263.i32[0];
          v310 = (v311 < 0) ^ __OFADD__(v275, v263.i32[0]);
          goto LABEL_295;
        case 0xCu:
          v311 = v263.i32[1] + (uint64_t)v263.i32[0];
          v310 = (v311 < 0) ^ __OFADD__(v263.i32[1], v263.i32[0]);
LABEL_295:
          if (v310)
            ++v311;
          v304 = v311 >> 1;
          break;
        case 0xDu:
          v347 = 6 * v263.i32[0] - v276 + 8 * v276 + v277 + 3 * v263.i32[1] - 2 * v278 + v279;
          v348 = v347 + 8;
          v349 = v347 + 23;
          if (v348 >= 0)
            v349 = v348;
          v304 = v349 >> 4;
          break;
        default:
          break;
      }
      v317 = *(_DWORD *)(v13 + 68);
      if (v317)
      {
        v252 = v265;
LABEL_351:
        v345 = *(_QWORD *)(v13 + 56);
        v387 = *(_DWORD *)(v13 + 72);
        *(_DWORD *)(v13 + 72) = v387 + 1;
        LODWORD(v328) = *(_DWORD *)(v345 + 4 * (*(_QWORD *)&v387 & 0xFFFFFLL));
        *(_DWORD *)(v13 + 68) = v317 - 1;
LABEL_316:
        v346 = *(_DWORD *)(v13 + 64);
        *(_DWORD *)(v13 + 64) = v346 + 1;
        *(_DWORD *)(v345 + 4 * (*(_QWORD *)&v346 & 0xFFFFFLL)) = v328;
        goto LABEL_317;
      }
      v318 = (_QWORD *)v430[2];
      if ((unint64_t)v318 > v430[3])
      {
        v402 = v305[5];
        v407 = v305[2];
        sub_2367C5188(v430);
        v307 = v402;
        v306 = v407;
        v273 = v413;
        v272 = v414;
        v271 = v415;
        v270 = v416;
      }
      else
      {
        v319 = v430[1];
        v320 = *v430 | (*v318 << v319);
        v430[2] = (unint64_t)v318 + ((63 - v319) >> 3);
        *v430 = v320;
        v430[1] = v319 | 0x38;
      }
      if (*(_BYTE *)(v13 + 16))
      {
        v403 = v307;
        v408 = v306;
        v350 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * (int)v308), v430);
        v307 = v403;
        v306 = v408;
        v273 = v413;
        v272 = v414;
        v271 = v415;
        v270 = v416;
        v328 = v350;
      }
      else
      {
        v321 = *(_DWORD *)(v13 + 20);
        v322 = (unint64_t)(v321 & 0xFFF) >> *(_DWORD *)(v13 + 36);
        v323 = *(_DWORD *)(v13 + 40) & v321 & 0xFFFu;
        v324 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v308 << *(_DWORD *)(v13 + 32)) + 8 * v322);
        if (v324 <= v323)
          v325 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v308 << *(_DWORD *)(v13 + 32)) + 8 * v322);
        else
          v325 = 0;
        v326 = HIDWORD(v325);
        v327 = HIWORD(v325);
        if (v324 <= v323)
          v328 = BYTE1(v324);
        else
          v328 = (unint64_t)(v321 & 0xFFF) >> *(_DWORD *)(v13 + 36);
        v329 = v323 + (unsigned __int16)v326 + (v327 ^ WORD1(v324)) * (*(_DWORD *)(v13 + 20) >> 12);
        v330 = v329 < 0x10000;
        v331 = *v430 >> (16 * v330);
        if (v329 < 0x10000)
          v329 = (unsigned __int16)*v430 | ((unsigned __int16)v329 << 16);
        *(_DWORD *)(v13 + 20) = v329;
        v332 = v430[1] - 16 * v330;
        *v430 = v331;
        v430[1] = v332;
      }
      v333 = *(unsigned int *)(v13 + 84);
      v46 = v328 >= v333;
      v334 = v328 - v333;
      if (v46)
      {
        v351 = *(unsigned int *)(v13 + 92);
        v46 = v334 >= v351;
        v352 = v334 - v351;
        if (v46)
        {
          v354 = *(_DWORD *)(v13 + 96);
          v353 = *(_DWORD *)(v13 + 100);
          v355 = *(_DWORD *)(v13 + 88) - (v354 + v353) + (v352 >> (v354 + v353));
          v356 = *v430 & ~(-1 << v355);
          v357 = v430[1] - (v355 & 0x1F);
          *v430 >>= v355 & 0x1F;
          v430[1] = v357;
          LODWORD(v334) = v334 & ~(-1 << v353) | ((unint64_t)(v356 | (((v334 >> v353) & ((1 << v354) - 1) | (1 << v354)) << v355)) << v353);
        }
        v252 = v265;
        *(_DWORD *)(v13 + 68) = *(_DWORD *)(v13 + 80) + v334;
        v358 = (_QWORD *)v430[2];
        if ((unint64_t)v358 > v430[3])
        {
          v404 = v307;
          v409 = v306;
          sub_2367C5188(v430);
          v307 = v404;
          v306 = v409;
          v273 = v413;
          v272 = v414;
          v271 = v415;
          v270 = v416;
        }
        else
        {
          v359 = v430[1];
          v360 = *v430 | (*v358 << v359);
          v430[2] = (unint64_t)v358 + ((63 - v359) >> 3);
          *v430 = v360;
          v430[1] = v359 | 0x38;
        }
        v361 = *(unsigned int *)(v13 + 76);
        if (*(_BYTE *)(v13 + 16))
        {
          v405 = v307;
          v410 = v306;
          v388 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24 * v361), v430);
          v307 = v405;
          v306 = v410;
          v273 = v413;
          v272 = v414;
          v271 = v415;
          v270 = v416;
          v369 = v388;
          v361 = *(unsigned int *)(v13 + 76);
        }
        else
        {
          v362 = *(_DWORD *)(v13 + 20);
          v363 = (unint64_t)(v362 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          v364 = *(_DWORD *)(v13 + 40) & v362 & 0xFFFu;
          v365 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v361 << *(_DWORD *)(v13 + 32)) + 8 * v363);
          if (v365 <= v364)
            v366 = *(_QWORD *)(*(_QWORD *)v13 + 8 * (v361 << *(_DWORD *)(v13 + 32)) + 8 * v363);
          else
            v366 = 0;
          v367 = HIDWORD(v366);
          v368 = HIWORD(v366);
          if (v365 <= v364)
            v369 = BYTE1(v365);
          else
            v369 = (unint64_t)(v362 & 0xFFF) >> *(_DWORD *)(v13 + 36);
          v370 = v364 + (unsigned __int16)v367 + (v368 ^ WORD1(v365)) * (*(_DWORD *)(v13 + 20) >> 12);
          v371 = v370 < 0x10000;
          v372 = *v430 >> (16 * v371);
          if (v370 < 0x10000)
            v370 = (unsigned __int16)*v430 | ((unsigned __int16)v370 << 16);
          *(_DWORD *)(v13 + 20) = v370;
          v373 = v430[1] - 16 * v371;
          *v430 = v372;
          v430[1] = v373;
        }
        v374 = (int *)(*(_QWORD *)(v13 + 24) + 16 * v361);
        v375 = v374[1];
        v46 = v369 >= v375;
        v376 = v369 - v375;
        if (v46)
        {
          v377 = *v374;
          v380 = v374 + 2;
          v378 = v374[2];
          v379 = v380[1];
          v381 = v377 - (v378 + v379) + (v376 >> (v378 + v379));
          v382 = *v430 & ~(-1 << v381);
          v383 = v430[1] - (v381 & 0x1F);
          *v430 >>= v381 & 0x1F;
          v430[1] = v383;
          LODWORD(v369) = v369 & ~(-1 << v379) | ((unint64_t)(v382 | (((v369 >> v379) & ((1 << v378) - 1) | (1 << v378)) << v381)) << v379);
        }
        v384 = *(unsigned int *)(v13 + 584);
        if (v369 >= v384)
          v385 = v369 - v384 + 1;
        else
          v385 = *(unsigned int *)(v13 + 4 * v369 + 104);
        v386 = *(unsigned int *)(v13 + 64);
        if (v385 > v386)
          v385 = *(unsigned int *)(v13 + 64);
        if (v385 > 0x100000)
        {
          *(_DWORD *)(v13 + 72) = v386 - 0x100000;
        }
        else
        {
          *(_DWORD *)(v13 + 72) = v386 - v385;
          if (!v385)
          {
            v389 = *(_DWORD *)(v13 + 68);
            if (v389 >= 0x100000)
              v389 = 0x100000;
            v406 = v307;
            v411 = v306;
            bzero(*(void **)(v13 + 56), 4 * v389);
            v307 = v406;
            v306 = v411;
            v273 = v413;
            v272 = v414;
            v271 = v415;
            v270 = v416;
          }
        }
        v317 = *(_DWORD *)(v13 + 68);
        if (v317 >= *(_DWORD *)(v13 + 80))
          goto LABEL_351;
        LODWORD(v328) = 0;
      }
      else
      {
        v335 = (int *)(*(_QWORD *)(v13 + 24) + 16 * v308);
        v336 = v335[1];
        v46 = v328 >= v336;
        v337 = v328 - v336;
        if (v46)
        {
          v338 = *v335;
          v341 = v335 + 2;
          v339 = v335[2];
          v340 = v341[1];
          v342 = v338 - (v339 + v340) + (v337 >> (v339 + v340));
          v343 = *v430 & ~(-1 << v342);
          v344 = v430[1] - (v342 & 0x1F);
          *v430 >>= v342 & 0x1F;
          v430[1] = v344;
          LODWORD(v328) = v328 & ~(-1 << v340) | ((unint64_t)(v343 | (((v328 >> v340) & ((1 << v339) - 1) | (1 << v339)) << v342)) << v340);
        }
        v252 = v265;
        v345 = *(_QWORD *)(v13 + 56);
        if (v345)
          goto LABEL_316;
      }
LABEL_317:
      *v274 = v304 + v307 + ((v328 >> 1) ^ -(v328 & 1)) * v306;
      ++v268;
      v266 = *v431;
      v267 = *v431 - 2;
    }
    while (v268 < v267);
    v16 = v431;
LABEL_364:
    if (v267 < v266)
    {
      v392 = (_DWORD *)(v417 + v420 * v251 + 4 * v267);
      do
      {
        sub_2367FEB28((uint64_t)&v446, v435, v266, (uint64_t)v392, v252, v267, v251, &v455, &v439);
        v393 = sub_2367C4CF4(v13, (int)v446, v269);
        *v392++ = DWORD2(v446) + ((v393 >> 1) ^ -(v393 & 1)) * HIDWORD(v447);
        ++v267;
        v266 = *v16;
      }
      while (v267 < *v16);
    }
LABEL_367:
    ++v251;
  }
  while (v251 < *v421);
LABEL_368:
  v441 = 0;
  v135 = 0;
  if (v412)
  {
    v394 = -*(_QWORD *)(v412 - 24);
    do
      v395 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v395 + v394, &qword_2564313D8));
    free(*(void **)(v412 - 32));
  }
  v94 = 0;
LABEL_373:
  if (v435)
  {
    *(_QWORD *)&v436 = v435;
    operator delete(v435);
  }
  if (!v135)
LABEL_384:
    v94 = 0;
LABEL_385:
  if (v455)
    operator delete(v455);
  return v94;
}

void sub_2367FB0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  void *v39;

  *(_QWORD *)(v35 - 200) = 0;
  if (a22)
  {
    v37 = -*(_QWORD *)(a22 - 24);
    do
      v38 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v38 + v37, &qword_2564313D8));
    free(*(void **)(a22 - 32));
  }
  v39 = *(void **)(v35 - 160);
  if (v39)
  {
    *(_QWORD *)(v35 - 152) = v39;
    operator delete(v39);
  }
  if (*(_QWORD *)(v35 - 136))
    operator delete(*(void **)(v35 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367FB154(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t *a9)
{
  int v9;
  _QWORD *v10;
  unint64_t *v11;
  unsigned int *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  int *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  char v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  _BOOL4 v104;
  unint64_t v105;
  uint64_t v106;
  int *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  int v112;
  _DWORD *v113;
  char v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  int *v124;
  uint64_t v125;
  int *v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  unint64_t v137;
  int v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  _BOOL4 v170;
  unint64_t v171;
  uint64_t v172;
  int *v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  int v177;
  int v178;
  _DWORD *v179;
  char v180;
  int v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t j;
  unint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  _BOOL4 v248;
  unint64_t v249;
  uint64_t v250;
  int *v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  int v255;
  int v256;
  _DWORD *v257;
  char v258;
  int v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t k;
  unint64_t v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  unint64_t v308;
  int v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unsigned int v317;
  _BOOL4 v318;
  unint64_t v319;
  uint64_t v320;
  int *v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  int v325;
  int v326;
  _DWORD *v327;
  char v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  unint64_t v350;
  int64_t v351;
  uint64_t v352;
  int v353;
  unint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  _DWORD *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unsigned int v377;
  _BOOL4 v378;
  unint64_t v379;
  uint64_t v380;
  int *v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  int v385;
  int v386;
  _DWORD *v387;
  char v388;
  int v389;
  unint64_t v390;
  unint64_t v391;
  int64_t v392;
  uint64_t v393;
  int v394;
  uint64_t m;
  void *v396;
  __int128 v398;
  __int128 v399;
  unint64_t v400;
  _DWORD *v401;
  unint64_t v402;
  unint64_t v403;
  BOOL v404;
  uint64_t v405;
  char v406;
  char v407;
  unint64_t v408;
  int32x4_t v409;
  int32x4_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int *v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  char *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  unsigned int v436;
  int32x4_t v437;
  int32x4_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t n;
  unint64_t v445;
  int v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unsigned int v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unsigned int *v473;
  signed int v474;
  unsigned int *v475;
  signed int v476;
  _BOOL4 v477;
  signed int v478;
  unsigned int v479;
  int v480;
  int v481;
  unsigned int *v482;
  uint64_t v483;
  signed int v484;
  unsigned int *v485;
  signed int v486;
  _BOOL4 v487;
  signed int v488;
  unsigned int v489;
  int v490;
  int v491;
  unsigned int *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  BOOL v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  _QWORD *v504;
  unint64_t v505;
  unint64_t v506;
  int v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unsigned int v515;
  _BOOL4 v516;
  unint64_t v517;
  uint64_t v518;
  int *v519;
  unint64_t v520;
  unint64_t v521;
  int v522;
  int v523;
  int v524;
  _DWORD *v525;
  char v526;
  int v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  unint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t ii;
  void *v570;
  uint64_t v571;
  unint64_t v572;
  int v573;
  unint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  _QWORD *v578;
  unint64_t v579;
  unint64_t v580;
  int v581;
  unint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  unsigned int v589;
  _BOOL4 v590;
  unint64_t v591;
  uint64_t v592;
  int *v593;
  unint64_t v594;
  unint64_t v595;
  int v596;
  int v597;
  int v598;
  _DWORD *v599;
  char v600;
  int v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  char *v605;
  _DWORD *v606;
  unint64_t v607;
  BOOL v608;
  uint64_t v609;
  char v610;
  uint64_t v611;
  char v612;
  char *v613;
  unint64_t v614;
  int32x4_t v615;
  int32x4_t v616;
  unint64_t v617;
  unint64_t v618;
  char *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  char *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  int v634;
  int32x4_t v635;
  int32x4_t v636;
  uint64_t v637;
  uint64_t v638;
  unsigned int *v639;
  unsigned int *v640;
  signed int v641;
  _BOOL4 v642;
  signed int v643;
  unsigned int v644;
  int v645;
  unsigned int *v646;
  uint64_t v647;
  unsigned int *v648;
  signed int v649;
  _BOOL4 v650;
  signed int v651;
  unsigned int v652;
  int v653;
  uint64_t v654;
  unsigned int *v655;
  unsigned int v656;
  unsigned int v657;
  uint64_t v658;
  char v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  int v664;
  int v665;
  _QWORD *v666;
  unint64_t v667;
  unint64_t v668;
  int v669;
  unint64_t v670;
  unint64_t v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unsigned int v677;
  _BOOL4 v678;
  unint64_t v679;
  uint64_t v680;
  int *v681;
  unint64_t v682;
  unint64_t v683;
  int v684;
  int v685;
  int v686;
  _DWORD *v687;
  char v688;
  int v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unsigned int v694;
  char *v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  _QWORD *v699;
  unint64_t v700;
  unint64_t v701;
  int v702;
  unint64_t v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t v708;
  unint64_t v709;
  unsigned int v710;
  _BOOL4 v711;
  unint64_t v712;
  uint64_t v713;
  int *v714;
  unint64_t v715;
  unint64_t v716;
  int v717;
  int v718;
  int v719;
  _DWORD *v720;
  char v721;
  int v722;
  unint64_t v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int64_t v733;
  int v734;
  int v735;
  unint64_t v737;
  unint64_t v738;
  unint64_t v739;
  unint64_t v740;
  unint64_t v741;
  unint64_t v742;
  unint64_t *v743;
  uint64_t v744;
  uint64_t v745;
  unsigned int v746;
  unsigned int v747;
  int *v748;
  unsigned int v749;
  unsigned int v750;
  uint64_t v751;
  uint64_t v752;
  int *v753;
  int *v754;
  int *v755;
  int *v756;
  int *v757;
  int *v758;
  _DWORD *v759;
  uint64_t v760;
  _DWORD *v761;
  _DWORD *v762;
  _DWORD *v763;
  _DWORD *v764;
  _DWORD *v765;
  uint64_t v766;
  int v767;
  int v768;
  uint64_t v769;
  int *v770;
  uint64_t v771;
  uint64_t v772;
  int *v773;
  uint64_t v774;
  int64_t v775;
  uint64_t v776;
  _DWORD *v777;
  _DWORD *v778;
  uint64_t v779;
  uint64_t v780;
  void *__pc;
  void *__pd;
  _DWORD *__p;
  _DWORD *__pa;
  char *__pb;
  _DWORD *v786;
  _DWORD *v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t *v798;
  uint32x4_t v799;
  unsigned int v800;
  uint64_t (**v801)();
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  int64_t v809;
  uint64_t v810;
  uint64_t v811;
  void *v812[2];
  uint64_t (**v813)();
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  _QWORD v821[12];
  void *v822;
  void *v823;
  int v824;
  int v825;
  int v826;
  int v827;
  int v828;
  int v829;
  int v830;
  _BYTE v831[280];
  unsigned int *v832;
  unsigned int *v833;
  unint64_t v834;
  BOOL v835;
  __int16 v836;
  _DWORD v837[2];
  int32x4_t v838[2];

  v9 = a7;
  v10 = (_QWORD *)(*a9 + ((uint64_t)a6 << 6));
  v837[0] = a6;
  v837[1] = a7;
  if (!v10[5])
    return 0;
  v11 = v10 + 6;
  if (!v10[6])
    return 0;
  v836 = 0;
  v835 = 0;
  v834 = 0;
  sub_2367F8978((unint64_t *)&v832, a4, (uint64_t)v837, (uint64_t *)&v834, (_BYTE *)&v836 + 1, (BOOL *)&v836, &v835);
  v16 = v832;
  v17 = (char *)v833 - (char *)v832;
  if (v833 != v832)
  {
    v18 = v17 / 24;
    v19 = *a3;
    if ((unint64_t)(v17 / 24) <= 1)
      v18 = 1;
    v20 = v832 + 4;
    do
    {
      if (*(v20 - 4) == -1)
        *v20 = *(unsigned __int8 *)(v19 + *v20);
      v20 += 6;
      --v18;
    }
    while (v18);
  }
  v798 = v10 + 5;
  v743 = v10 + 6;
  v744 = (uint64_t)v10;
  if (v17 != 24)
    goto LABEL_59;
  v21 = v16[1];
  v22 = v16[2];
  v24 = v16[4];
  v23 = v16[5];
  if (!v21)
  {
    LODWORD(v817) = 0;
    if (sub_2367FE070(a2, v24, &v817, *v11 * *v798))
    {
      v354 = *v11;
      if (*v11)
      {
        v355 = 0;
        v356 = v23 + (-(v817 & 1) ^ (v817 >> 1)) * v22;
        v357 = *v798;
        v358 = (*v798 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          if (v357 >= 1)
          {
            v359 = (_DWORD *)(v10[3] + v10[2] * v355);
            v360 = v358;
            do
            {
              *v359++ = v356;
              --v360;
            }
            while (v360 > 1);
          }
          ++v355;
        }
        while (v355 != v354);
      }
    }
    else
    {
      v361 = *v11;
      if (v22 != 1 || v23)
      {
        if (v361)
        {
          v574 = 0;
          v575 = *v798;
          do
          {
            if (v575)
            {
              v576 = 0;
              v577 = v10[3] + v10[2] * v574;
              do
              {
                v578 = (_QWORD *)a1[2];
                if ((unint64_t)v578 > a1[3])
                {
                  sub_2367C5188(a1);
                }
                else
                {
                  v579 = a1[1];
                  v580 = *a1 | (*v578 << v579);
                  a1[2] = (unint64_t)v578 + ((63 - v579) >> 3);
                  *a1 = v580;
                  a1[1] = v579 | 0x38;
                }
                if (*(_BYTE *)(a2 + 16))
                {
                  v588 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * v24), a1);
                }
                else
                {
                  v581 = *(_DWORD *)(a2 + 20);
                  v582 = (unint64_t)(v581 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  v583 = *(_DWORD *)(a2 + 40) & v581 & 0xFFFu;
                  v584 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v582);
                  if (v584 <= v583)
                    v585 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v582);
                  else
                    v585 = 0;
                  v586 = HIDWORD(v585);
                  v587 = HIWORD(v585);
                  if (v584 <= v583)
                    v588 = BYTE1(v584);
                  else
                    v588 = (unint64_t)(v581 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  v589 = v583 + (unsigned __int16)v586 + (v587 ^ WORD1(v584)) * (*(_DWORD *)(a2 + 20) >> 12);
                  v590 = v589 < 0x10000;
                  v591 = *a1 >> (16 * v590);
                  if (v589 < 0x10000)
                    v589 = (unsigned __int16)*a1 | ((unsigned __int16)v589 << 16);
                  *(_DWORD *)(a2 + 20) = v589;
                  v592 = a1[1] - 16 * v590;
                  *a1 = v591;
                  a1[1] = v592;
                }
                v593 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v24);
                v594 = v593[1];
                v58 = v588 >= v594;
                v595 = v588 - v594;
                if (v58)
                {
                  v596 = *v593;
                  v599 = v593 + 2;
                  v597 = v593[2];
                  v598 = v599[1];
                  v600 = v596 - (v597 + v598) + (v595 >> (v597 + v598));
                  v601 = *a1 & ~(-1 << v600);
                  v602 = a1[1] - (v600 & 0x1F);
                  *a1 >>= v600 & 0x1F;
                  a1[1] = v602;
                  LODWORD(v588) = v588 & ~(-1 << v598) | ((unint64_t)(v601 | (((v588 >> v598) & ((1 << v597) - 1) | (1 << v597)) << v600)) << v598);
                }
                *(_DWORD *)(v577 + 4 * v576++) = v23 + (-(v588 & 1) ^ (v588 >> 1)) * v22;
                v575 = *v798;
              }
              while (v576 < *v798);
              v361 = *v743;
            }
            ++v574;
          }
          while (v574 < v361);
        }
      }
      else if (v361)
      {
        v362 = 0;
        v363 = *v798;
        do
        {
          if (v363)
          {
            v364 = 0;
            v365 = v10[3] + v10[2] * v362;
            do
            {
              v366 = (_QWORD *)a1[2];
              if ((unint64_t)v366 > a1[3])
              {
                sub_2367C5188(a1);
              }
              else
              {
                v367 = a1[1];
                v368 = *a1 | (*v366 << v367);
                a1[2] = (unint64_t)v366 + ((63 - v367) >> 3);
                *a1 = v368;
                a1[1] = v367 | 0x38;
              }
              if (*(_BYTE *)(a2 + 16))
              {
                v376 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * v24), a1);
              }
              else
              {
                v369 = *(_DWORD *)(a2 + 20);
                v370 = (unint64_t)(v369 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                v371 = *(_DWORD *)(a2 + 40) & v369 & 0xFFFu;
                v372 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v370);
                if (v372 <= v371)
                  v373 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v370);
                else
                  v373 = 0;
                v374 = HIDWORD(v373);
                v375 = HIWORD(v373);
                if (v372 <= v371)
                  v376 = BYTE1(v372);
                else
                  v376 = (unint64_t)(v369 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                v377 = v371 + (unsigned __int16)v374 + (v375 ^ WORD1(v372)) * (*(_DWORD *)(a2 + 20) >> 12);
                v378 = v377 < 0x10000;
                v379 = *a1 >> (16 * v378);
                if (v377 < 0x10000)
                  v377 = (unsigned __int16)*a1 | ((unsigned __int16)v377 << 16);
                *(_DWORD *)(a2 + 20) = v377;
                v380 = a1[1] - 16 * v378;
                *a1 = v379;
                a1[1] = v380;
              }
              v381 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v24);
              v382 = v381[1];
              v58 = v376 >= v382;
              v383 = v376 - v382;
              if (v58)
              {
                v384 = *v381;
                v387 = v381 + 2;
                v385 = v381[2];
                v386 = v387[1];
                v388 = v384 - (v385 + v386) + (v383 >> (v385 + v386));
                v389 = *a1 & ~(-1 << v388);
                v390 = a1[1] - (v388 & 0x1F);
                *a1 >>= v388 & 0x1F;
                a1[1] = v390;
                LODWORD(v376) = v376 & ~(-1 << v386) | ((unint64_t)(v389 | (((v376 >> v386) & ((1 << v385) - 1) | (1 << v385)) << v388)) << v386);
              }
              *(_DWORD *)(v365 + 4 * v364++) = -(v376 & 1) ^ (v376 >> 1);
              v363 = *v798;
            }
            while (v364 < *v798);
            v361 = *v743;
          }
          ++v362;
        }
        while (v362 < v361);
      }
    }
    goto LABEL_398;
  }
  if (v21 == 5 && !v23 && v22 == 1)
  {
    v25 = *v11;
    if (*v11)
    {
      v26 = 0;
      v27 = v10[2];
      v28 = -(uint64_t)(v27 >> 2);
      v29 = ~(v27 >> 2);
      v30 = *v798;
      do
      {
        if (v30)
        {
          v31 = 0;
          v32 = (_DWORD *)(v10[3] + v10[2] * v26);
          v33 = v32;
          do
          {
            if (v31)
            {
              v34 = *(v33 - 1);
              if (v26)
              {
                v36 = v33[v29];
                v35 = v33[v29 + 1];
              }
              else
              {
                v35 = *(v33 - 1);
                v36 = v35;
              }
            }
            else if (v26)
            {
              v35 = v32[v28];
              v34 = v35;
              v36 = v35;
            }
            else
            {
              v35 = 0;
              v34 = 0;
              v36 = 0;
            }
            if (v34 >= v35)
              v37 = v35;
            else
              v37 = v34;
            if (v35 <= v34)
              v38 = v34;
            else
              v38 = v35;
            v39 = v34 + v35 - v36;
            if (v37 > v36)
              v39 = v38;
            if (v38 >= v36)
              v40 = v39;
            else
              v40 = v37;
            v41 = (_QWORD *)a1[2];
            if ((unint64_t)v41 > a1[3])
            {
              v786 = v32;
              v794 = v28;
              sub_2367C5188(a1);
              v32 = v786;
              v28 = v794;
            }
            else
            {
              v42 = a1[1];
              v43 = *a1 | (*v41 << v42);
              a1[2] = (unint64_t)v41 + ((63 - v42) >> 3);
              *a1 = v43;
              a1[1] = v42 | 0x38;
            }
            if (*(_BYTE *)(a2 + 16))
            {
              v787 = v32;
              v795 = v28;
              v67 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * v24), a1);
              v32 = v787;
              v28 = v795;
              v51 = v67;
            }
            else
            {
              v44 = *(_DWORD *)(a2 + 20);
              v45 = (unint64_t)(v44 & 0xFFF) >> *(_DWORD *)(a2 + 36);
              v46 = *(_DWORD *)(a2 + 40) & v44 & 0xFFFu;
              v47 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v45);
              if (v47 <= v46)
                v48 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v24 << *(_DWORD *)(a2 + 32)) + 8 * v45);
              else
                v48 = 0;
              v49 = HIDWORD(v48);
              v50 = HIWORD(v48);
              if (v47 <= v46)
                v51 = BYTE1(v47);
              else
                v51 = (unint64_t)(v44 & 0xFFF) >> *(_DWORD *)(a2 + 36);
              v52 = v46 + (unsigned __int16)v49 + (v50 ^ WORD1(v47)) * (*(_DWORD *)(a2 + 20) >> 12);
              v53 = v52 < 0x10000;
              v54 = *a1 >> (16 * v53);
              if (v52 < 0x10000)
                v52 = (unsigned __int16)*a1 | ((unsigned __int16)v52 << 16);
              *(_DWORD *)(a2 + 20) = v52;
              v55 = a1[1] - 16 * v53;
              *a1 = v54;
              a1[1] = v55;
            }
            v56 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v24);
            v57 = v56[1];
            v58 = v51 >= v57;
            v59 = v51 - v57;
            if (v58)
            {
              v60 = *v56;
              v63 = v56 + 2;
              v61 = v56[2];
              v62 = v63[1];
              v64 = v60 - (v61 + v62) + (v59 >> (v61 + v62));
              v65 = *a1 & ~(-1 << v64);
              v66 = a1[1] - (v64 & 0x1F);
              *a1 >>= v64 & 0x1F;
              a1[1] = v66;
              LODWORD(v51) = v51 & ~(-1 << v62) | ((unint64_t)(v65 | (((v51 >> v62) & ((1 << v61) - 1) | (1 << v61)) << v64)) << v62);
            }
            *v33++ = (-(v51 & 1) ^ (v51 >> 1)) + v40;
            ++v31;
            v30 = *v798;
          }
          while (v31 < *v798);
          v25 = *v743;
        }
        ++v26;
      }
      while (v26 < v25);
    }
  }
  else
  {
LABEL_59:
    if ((_BYTE)v836)
    {
      v69 = v10 + 5;
      v70 = sub_2367FE12C((uint64_t *)&v832, a8);
      LOBYTE(v836) = v70;
    }
    else
    {
      v70 = 0;
      v69 = v10 + 5;
    }
    if (v835 && (v71 = sub_2367FE12C((uint64_t *)&v832, a8), v835 = v71, v71))
    {
      v72 = *v11;
      if (*v11)
      {
        v73 = 0;
        v74 = v10[2];
        v75 = -(uint64_t)(v74 >> 2);
        v76 = *v69;
        v77 = 4 * ~(v74 >> 2);
        do
        {
          if (v76)
          {
            v78 = 0;
            v79 = (_DWORD *)(v10[3] + v10[2] * v73);
            v80 = v79;
            do
            {
              if (v78)
              {
                v81 = *(v80 - 1);
                v82 = v81;
                if (v73)
                {
                  v84 = *(int *)((char *)v80 + v77);
                  v83 = *(int *)((char *)v80 + v77 + 4);
                }
                else
                {
                  v83 = v81;
                  v84 = v81;
                }
              }
              else if (v73)
              {
                v81 = v79[v75];
                v83 = v81;
                v82 = v81;
                v84 = v81;
              }
              else
              {
                v83 = 0;
                v81 = 0;
                v82 = 0;
                v84 = 0;
              }
              if (v81 >= (int)v83)
                v85 = v83;
              else
                v85 = v81;
              if (v81 <= (int)v83)
                v86 = v83;
              else
                v86 = v81;
              v87 = v81 + v83 - v84;
              if (v85 > (int)v84)
                v87 = v86;
              if (v86 >= (int)v84)
                v88 = v87;
              else
                v88 = v85;
              v89 = v82 + v83 - v84;
              if (v89 <= -512)
                v89 = -512;
              if (v89 >= 511)
                v89 = 511;
              v90 = v89 + 512;
              v91 = *(unsigned __int8 *)(a8 + v89 + 512);
              v92 = (_QWORD *)a1[2];
              if ((unint64_t)v92 > a1[3])
              {
                __pc = (void *)v77;
                v788 = v75;
                v777 = v79;
                sub_2367C5188(a1);
                v79 = v777;
                v77 = (uint64_t)__pc;
                v75 = v788;
              }
              else
              {
                v93 = a1[1];
                v94 = *a1 | (*v92 << v93);
                a1[2] = (unint64_t)v92 + ((63 - v93) >> 3);
                *a1 = v94;
                a1[1] = v93 | 0x38;
              }
              if (*(_BYTE *)(a2 + 16))
              {
                __pd = (void *)v77;
                v789 = v75;
                v778 = v79;
                v117 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * v91), a1);
                v75 = v789;
                v102 = v117;
                v79 = v778;
                v77 = (uint64_t)__pd;
              }
              else
              {
                v95 = *(_DWORD *)(a2 + 20);
                v96 = (unint64_t)(v95 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                v97 = *(_DWORD *)(a2 + 40) & v95 & 0xFFFu;
                v98 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v91 << *(_DWORD *)(a2 + 32)) + 8 * v96);
                if (v98 <= v97)
                  v99 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v91 << *(_DWORD *)(a2 + 32)) + 8 * v96);
                else
                  v99 = 0;
                v100 = HIDWORD(v99);
                v101 = HIWORD(v99);
                if (v98 <= v97)
                  v102 = BYTE1(v98);
                else
                  v102 = (unint64_t)(v95 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                v103 = v97 + (unsigned __int16)v100 + (v101 ^ WORD1(v98)) * (*(_DWORD *)(a2 + 20) >> 12);
                v104 = v103 < 0x10000;
                v105 = *a1 >> (16 * v104);
                if (v103 < 0x10000)
                  v103 = (unsigned __int16)*a1 | ((unsigned __int16)v103 << 16);
                *(_DWORD *)(a2 + 20) = v103;
                v106 = a1[1] - 16 * v104;
                *a1 = v105;
                a1[1] = v106;
              }
              v107 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v91);
              v108 = v107[1];
              v58 = v102 >= v108;
              v109 = v102 - v108;
              if (v58)
              {
                v110 = *v107;
                v113 = v107 + 2;
                v111 = v107[2];
                v112 = v113[1];
                v114 = v110 - (v111 + v112) + (v109 >> (v111 + v112));
                v115 = *a1 & ~(-1 << v114);
                v116 = a1[1] - (v114 & 0x1F);
                *a1 >>= v114 & 0x1F;
                a1[1] = v116;
                LODWORD(v102) = v102 & ~(-1 << v112) | ((unint64_t)(v115 | (((v102 >> v112) & ((1 << v111) - 1) | (1 << v111)) << v114)) << v112);
              }
              *v80++ = v88
                     + *(char *)(a8 + 1024 + v90)
                     + (-(v102 & 1) ^ (v102 >> 1)) * *(char *)(a8 + 2048 + v90);
              ++v78;
              v76 = *v798;
            }
            while (v78 < *v798);
            v72 = *v743;
          }
          ++v73;
        }
        while (v73 < v72);
      }
    }
    else if (v70 && (v118 = *v69, (unint64_t)*v69 >= 9))
    {
      v813 = &off_250800498;
      v814 = *(_OWORD *)(a5 + 8);
      v815 = *(_OWORD *)(a5 + 24);
      v816 = *(_OWORD *)(a5 + 40);
      sub_2367FE7B0((uint64_t)&v817, (uint64_t)&v813, v118);
      sub_2367CBE88(&v805, 1uLL);
      if (*v11)
      {
        v119 = 0;
        v120 = a8 + 2048;
        v779 = a8 + 1024;
        v745 = a2;
        do
        {
          v122 = v10[2];
          v121 = v10[3];
          v123 = (_DWORD *)(v121 + v122 * v119);
          if (v119)
          {
            v124 = (int *)(v121 + v122 * (v119 - 2));
            v125 = v122 * (v119 - 1);
            v126 = (int *)(v121 + v125);
            if (v119 == 1)
              v127 = (int *)(v121 + v125);
            else
              v127 = v124;
            v128 = *v126;
            v129 = *v127;
            v130 = *v798;
            v770 = v126 + 1;
            if ((unint64_t)*v798 >= 2)
              v131 = v126[1];
            else
              v131 = *v126;
          }
          else
          {
            v129 = 0;
            v125 = 0;
            v128 = 0;
            v131 = 0;
            v126 = v123 - 1;
            v130 = *v798;
            v127 = v123 - 1;
            v770 = v123 - 1;
          }
          v132 = 0;
          v133 = (uint64_t)(v119 << 63) >> 63;
          v134 = v133 & (v130 + 2);
          if (v130 == 1)
            v135 = ((uint64_t)(v119 << 63) >> 63) & 3;
          else
            v135 = v134 + 1;
          for (i = 40; i != 136; i += 24)
          {
            v137 = (*(_DWORD *)(*(_QWORD *)((char *)&v817 + i) + 4 * v135)
                                + 2 * *(_DWORD *)(*(_QWORD *)((char *)&v817 + i) + 4 * v134));
            v138 = __clz(v137 + 1) ^ 0x3F;
            if (v138 <= 5)
              LOBYTE(v138) = 5;
            v799.i32[v132] = ((*(_DWORD *)&v831[4 * (v137 >> (v138 - 5)) + 16]
                                           * *(_DWORD *)&v831[v132 * 4]) >> (v138 - 5))
                           + 4;
            ++v132;
          }
          v139 = 0;
          v140 = (int *)v822;
          v141 = *((int *)v822 + v134);
          v142 = *((int *)v822 + v135);
          if (v142 >= 0)
            v143 = *((int *)v822 + v135);
          else
            v143 = -v142;
          if (v141 >= 0)
            v144 = v141;
          else
            v144 = -v141;
          if (v143 <= v144)
            v145 = v141;
          else
            v145 = v142;
          __p = (_DWORD *)v805;
          *(_DWORD *)v805 = v145;
          v146 = (v827 + (uint64_t)v826) * v141 + v828 * (uint64_t)(int)v142;
          v147 = (v142 + v141) * v824;
          v148 = 8 * v128;
          v149 = 8 * v131;
          *(_QWORD *)&v817 = v149;
          *((_QWORD *)&v817 + 1) = 8 * v128 - (v147 >> 5);
          v818 = 8 * v128 - ((2 * (int)v141 * (uint64_t)v825) >> 5);
          v819 = 8 * v128 - ((v146 + 8 * (v129 - v128) * v829) >> 5);
          *(uint32x4_t *)v812 = vshlq_u32(v799, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v799)) ^ 0x1F) - 4)));
          v150 = vaddvq_s32(*(int32x4_t *)v812);
          v151 = (v150 >> 1) - 1;
          do
          {
            v151 += *((_QWORD *)&v817 + v139) * *((unsigned int *)v812 + v139);
            ++v139;
          }
          while (v139 != 4);
          v772 = v121 + v125 - 4;
          v152 = (v151 * *(unsigned int *)&v831[4 * v150 + 12]) >> 24;
          if (v149 <= v148)
            v153 = v148;
          else
            v153 = v149;
          if (v148 >= v149)
            v154 = v149;
          else
            v154 = v148;
          if (v152 < v153)
            v153 = v152;
          if (v154 > v153)
            v153 = v154;
          if ((int)v141 <= 0)
            v155 = v153;
          else
            v155 = v152;
          v820 = v155;
          if (v145 < -511)
          {
            v145 = -512;
          }
          else if (v145 > 511)
          {
            v145 = 511;
          }
          v156 = (v145 + 512);
          v157 = *(unsigned __int8 *)(a8 + v156);
          v158 = (_QWORD *)a1[2];
          if ((unint64_t)v158 > a1[3])
          {
            v739 = v119;
            v757 = v127;
            v762 = v123;
            v342 = (uint64_t)(v119 << 63) >> 63;
            v754 = v126;
            sub_2367C5188(a1);
            v126 = v754;
            v127 = v757;
            v133 = v342;
            v123 = v762;
            a2 = v745;
            v119 = v739;
          }
          else
          {
            v159 = a1[1];
            v160 = *a1 | (*v158 << v159);
            a1[2] = (unint64_t)v158 + ((63 - v159) >> 3);
            *a1 = v160;
            a1[1] = v159 | 0x38;
          }
          if (*(_BYTE *)(a2 + 16))
          {
            v343 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * v157);
            v740 = v119;
            v758 = v127;
            v763 = v123;
            v344 = v133;
            v755 = v126;
            v345 = sub_2367E27B4(v343, a1);
            v126 = v755;
            v127 = v758;
            v133 = v344;
            v123 = v763;
            a2 = v745;
            v119 = v740;
            v168 = v345;
          }
          else
          {
            v161 = *(_DWORD *)(a2 + 20);
            v162 = (unint64_t)(v161 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            v163 = *(_DWORD *)(a2 + 40) & v161 & 0xFFFu;
            v164 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v157 << *(_DWORD *)(a2 + 32)) + 8 * v162);
            if (v164 <= v163)
              v165 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v157 << *(_DWORD *)(a2 + 32)) + 8 * v162);
            else
              v165 = 0;
            v166 = HIDWORD(v165);
            v167 = HIWORD(v165);
            if (v164 <= v163)
              v168 = BYTE1(v164);
            else
              v168 = (unint64_t)(v161 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            v169 = v163 + (unsigned __int16)v166 + (v167 ^ WORD1(v164)) * (*(_DWORD *)(a2 + 20) >> 12);
            v170 = v169 < 0x10000;
            v171 = *a1 >> (16 * v170);
            if (v169 < 0x10000)
              v169 = (unsigned __int16)*a1 | ((unsigned __int16)v169 << 16);
            *(_DWORD *)(a2 + 20) = v169;
            v172 = a1[1] - 16 * v170;
            *a1 = v171;
            a1[1] = v172;
          }
          v173 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v157);
          v174 = v173[1];
          v58 = v168 >= v174;
          v175 = v168 - v174;
          if (v58)
          {
            v176 = *v173;
            v179 = v173 + 2;
            v177 = v173[2];
            v178 = v179[1];
            v180 = v176 - (v177 + v178) + (v175 >> (v177 + v178));
            v181 = *a1 & ~(-1 << v180);
            v182 = a1[1] - (v180 & 0x1F);
            *a1 >>= v180 & 0x1F;
            a1[1] = v182;
            LODWORD(v168) = v168 & ~(-1 << v178) | ((unint64_t)(v181 | (((v168 >> v178) & ((1 << v177) - 1) | (1 << v177)) << v180)) << v178);
          }
          v183 = 0;
          v184 = *(char *)(v779 + v156)
               + ((unint64_t)((v155 << 29) + 1610612736) >> 32)
               + (int)(-(v168 & 1) ^ (v168 >> 1)) * (uint64_t)*(char *)(v120 + v156);
          *v123 = v184;
          v185 = *v798;
          v186 = *v798 + 2;
          v187 = 8 * (int)v184;
          if ((v119 & 1) != 0)
            v188 = 0;
          else
            v188 = *v798 + 2;
          v140[v188] = v155 - v187;
          if ((v119 & 1) != 0)
            v189 = v185 + 3;
          else
            v189 = 1;
          v190 = v821;
          do
          {
            v191 = *(_QWORD *)((char *)&v817 + v183) - v187;
            if (v191 < 0)
              v191 = v187 - *(_QWORD *)((char *)&v817 + v183);
            v192 = (unint64_t)(v191 + 3) >> 3;
            v193 = *v190;
            v190 += 3;
            *(_DWORD *)(v193 + 4 * v188) = v192;
            *(_DWORD *)(v193 + 4 * v189) += v192;
            v183 += 8;
          }
          while (v183 != 32);
          if (v185 < 3)
          {
            v264 = v133 & v186;
            v195 = 1;
          }
          else
          {
            v748 = (int *)v822;
            v751 = v133;
            v194 = 2;
            v195 = 1;
            v756 = v127;
            v761 = v123;
            v753 = v126;
            do
            {
              v196 = 0;
              v197 = v195;
              v198 = v126[v195];
              v199 = v194;
              v200 = (int)v123[v197 - 1];
              v201 = v770[v197];
              v202 = *(int *)(v772 + 4 * v197);
              v203 = v127[v197];
              v204 = v185 + 2;
              v205 = (v133 & (v185 + 2)) + v197;
              if (v185 - 1 <= v197)
                v206 = (v133 & (v185 + 2)) + v197;
              else
                v206 = v205 + 1;
              v207 = v205 - 1;
              for (j = 40; j != 136; j += 24)
              {
                v209 = (*(_DWORD *)(*(_QWORD *)((char *)&v817 + j) + 4 * v206)
                                    + *(_DWORD *)(*(_QWORD *)((char *)&v817 + j) + 4 * v205)
                                    + *(_DWORD *)(*(_QWORD *)((char *)&v817 + j) + 4 * v207));
                v210 = __clz(v209 + 1) ^ 0x3F;
                if (v210 <= 5)
                  LOBYTE(v210) = 5;
                v799.i32[v196] = ((*(_DWORD *)&v831[4 * (v209 >> (v210 - 5)) + 16]
                                               * *(_DWORD *)&v831[v196 * 4]) >> (v210 - 5))
                               + 4;
                ++v196;
              }
              v211 = 0;
              v212 = 8 * v198;
              v213 = 8 * v200;
              if ((v119 & 1) != 0)
                v204 = 0;
              v214 = v140[v197 - 1 + v204];
              v215 = v140[v205];
              v216 = v140[v207];
              v217 = v214 + v215;
              v218 = v140[v206];
              if (v215 >= 0)
                v219 = v215;
              else
                v219 = -v215;
              if (v214 >= 0)
                v220 = v214;
              else
                v220 = -v214;
              if (v219 <= v220)
                v221 = v214;
              else
                v221 = v215;
              if (v216 >= 0)
                v222 = v216;
              else
                v222 = -v216;
              if (v221 >= 0)
                v223 = v221;
              else
                v223 = -v221;
              if (v222 > v223)
                v221 = v216;
              if (v218 >= 0)
                v224 = v218;
              else
                v224 = -v218;
              if (v221 >= 0)
                v225 = v221;
              else
                v225 = -v221;
              if (v224 > v225)
                LODWORD(v221) = v218;
              *__p = v221;
              v226 = v213 - 8 * v198 + 8 * v201;
              v227 = 8 * v201;
              *(_QWORD *)&v817 = v226;
              *((_QWORD *)&v817 + 1) = v212 - (((v217 + v218) * v824) >> 5);
              v818 = v213 - (((v217 + v216) * v825) >> 5);
              v819 = v212
                   - ((v826 * (uint64_t)(int)v216
                     + v827 * (uint64_t)(int)v215
                     + v828 * (uint64_t)(int)v218
                     + 8 * ((v203 - v198) * v829 + (v202 - v200) * v830)) >> 5);
              *(uint32x4_t *)v812 = vshlq_u32(v799, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v799)) ^ 0x1F) - 4)));
              v228 = vaddvq_s32(*(int32x4_t *)v812);
              v229 = (v228 >> 1) - 1;
              do
              {
                v229 += *((_QWORD *)&v817 + v211) * *((unsigned int *)v812 + v211);
                ++v211;
              }
              while (v211 != 4);
              v230 = (v229 * *(unsigned int *)&v831[4 * v228 + 12]) >> 24;
              if (v227 <= v212)
                v231 = v212;
              else
                v231 = v227;
              if (v213 > v231)
                v231 = v213;
              if (v212 >= v227)
                v212 = v227;
              if (v212 < v213)
                v213 = v212;
              if (v230 >= v231)
                v232 = v231;
              else
                v232 = v230;
              if (v213 <= v232)
                v213 = v232;
              if ((v216 ^ v215 | v214 ^ v215) <= 0)
                v233 = v213;
              else
                v233 = v230;
              v820 = v233;
              v790 = v199;
              if ((int)v221 < -511)
              {
                LODWORD(v221) = -512;
                v127 = v756;
                v123 = v761;
                v133 = v751;
                v126 = v753;
              }
              else
              {
                v127 = v756;
                v123 = v761;
                v133 = v751;
                v126 = v753;
                if ((int)v221 > 511)
                  LODWORD(v221) = 511;
              }
              v234 = (v221 + 512);
              v235 = *(unsigned __int8 *)(a8 + v234);
              v236 = (_QWORD *)a1[2];
              if ((unint64_t)v236 > a1[3])
              {
                v737 = v119;
                sub_2367C5188(a1);
                v126 = v753;
                v127 = v756;
                v133 = v751;
                v123 = v761;
                v119 = v737;
              }
              else
              {
                v237 = a1[1];
                v238 = *a1 | (*v236 << v237);
                a1[2] = (unint64_t)v236 + ((63 - v237) >> 3);
                *a1 = v238;
                a1[1] = v237 | 0x38;
              }
              a2 = v745;
              if (*(_BYTE *)(v745 + 16))
              {
                v738 = v119;
                v271 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(v745 + 8) + 24 * v235), a1);
                v126 = v753;
                v127 = v756;
                v133 = v751;
                v123 = v761;
                v119 = v738;
                v246 = v271;
              }
              else
              {
                v239 = *(_DWORD *)(v745 + 20);
                v240 = (unint64_t)(v239 & 0xFFF) >> *(_DWORD *)(v745 + 36);
                v241 = *(_DWORD *)(v745 + 40) & v239 & 0xFFFu;
                v242 = *(_QWORD *)(*(_QWORD *)v745 + 8 * (v235 << *(_DWORD *)(v745 + 32)) + 8 * v240);
                if (v242 <= v241)
                  v243 = *(_QWORD *)(*(_QWORD *)v745 + 8 * (v235 << *(_DWORD *)(v745 + 32)) + 8 * v240);
                else
                  v243 = 0;
                v244 = HIDWORD(v243);
                v245 = HIWORD(v243);
                if (v242 <= v241)
                  v246 = BYTE1(v242);
                else
                  v246 = (unint64_t)(v239 & 0xFFF) >> *(_DWORD *)(v745 + 36);
                v247 = v241 + (unsigned __int16)v244 + (v245 ^ WORD1(v242)) * (*(_DWORD *)(v745 + 20) >> 12);
                v248 = v247 < 0x10000;
                v249 = *a1 >> (16 * v248);
                if (v247 < 0x10000)
                  v247 = (unsigned __int16)*a1 | ((unsigned __int16)v247 << 16);
                *(_DWORD *)(v745 + 20) = v247;
                v250 = a1[1] - 16 * v248;
                *a1 = v249;
                a1[1] = v250;
              }
              v251 = (int *)(*(_QWORD *)(v745 + 24) + 16 * v235);
              v252 = v251[1];
              v58 = v246 >= v252;
              v253 = v246 - v252;
              if (v58)
              {
                v254 = *v251;
                v257 = v251 + 2;
                v255 = v251[2];
                v256 = v257[1];
                v258 = v254 - (v255 + v256) + (v253 >> (v255 + v256));
                v259 = *a1 & ~(-1 << v258);
                v260 = a1[1] - (v258 & 0x1F);
                *a1 >>= v258 & 0x1F;
                a1[1] = v260;
                LODWORD(v246) = v246 & ~(-1 << v256) | ((unint64_t)(v259 | (((v246 >> v256) & ((1 << v255) - 1) | (1 << v255)) << v258)) << v256);
              }
              v195 = v790;
              v261 = 0;
              v262 = *(char *)(v779 + v234)
                   + ((unint64_t)((v233 << 29) + 1610612736) >> 32)
                   + (int)(-(v246 & 1) ^ (v246 >> 1)) * (uint64_t)*(char *)(v120 + v234);
              v123[v197] = v262;
              v185 = *v798;
              v186 = *v798 + 2;
              if ((v119 & 1) != 0)
                v263 = 0;
              else
                v263 = *v798 + 2;
              v264 = v133 & v186;
              v265 = 8 * (int)v262;
              v266 = v263 + v197;
              v748[v266] = v233 - v265;
              v267 = v821;
              do
              {
                v268 = *(_QWORD *)((char *)&v817 + v261) - v265;
                if (v268 < 0)
                  v268 = v265 - *(_QWORD *)((char *)&v817 + v261);
                v269 = (unint64_t)(v268 + 3) >> 3;
                v270 = *v267;
                v267 += 3;
                *(_DWORD *)(v270 + 4 * v266) = v269;
                *(_DWORD *)(v270 + 4 * (v197 + (v133 & v186) + 1)) += v269;
                v261 += 8;
              }
              while (v261 != 32);
              v194 = v790 + 1;
              v140 = v748;
            }
            while (v790 + 1 < v185);
            v140 = v748;
          }
          v272 = 0;
          v273 = v126[v195];
          v274 = (int)v123[v195 - 1];
          v275 = *(int *)(v772 + 4 * v195);
          v276 = v127[v195];
          v277 = v264 + v195;
          if (v185 - 1 <= v195)
            v278 = v264 + v195;
          else
            v278 = v277 + 1;
          v279 = v277 - 1;
          for (k = 40; k != 136; k += 24)
          {
            v281 = (*(_DWORD *)(*(_QWORD *)((char *)&v817 + k) + 4 * v278)
                                + *(_DWORD *)(*(_QWORD *)((char *)&v817 + k) + 4 * v277)
                                + *(_DWORD *)(*(_QWORD *)((char *)&v817 + k) + 4 * v279));
            v282 = __clz(v281 + 1) ^ 0x3F;
            if (v282 <= 5)
              LOBYTE(v282) = 5;
            v799.i32[v272] = ((*(_DWORD *)&v831[4 * (v281 >> (v282 - 5)) + 16]
                                           * *(_DWORD *)&v831[v272 * 4]) >> (v282 - 5))
                           + 4;
            ++v272;
          }
          v283 = v195;
          v284 = 0;
          v285 = 8 * v273;
          if ((v119 & 1) != 0)
            v186 = 0;
          v286 = v140[v195 - 1 + v186];
          v287 = v140[v277];
          v288 = v140[v279];
          v289 = v286 + v287;
          v290 = v140[v278];
          if (v287 >= 0)
            v291 = v140[v277];
          else
            v291 = -v287;
          if (v286 >= 0)
            v292 = v286;
          else
            v292 = -v286;
          if (v291 <= v292)
            v293 = v286;
          else
            v293 = v287;
          if (v288 >= 0)
            v294 = v288;
          else
            v294 = -v288;
          if (v293 >= 0)
            v295 = v293;
          else
            v295 = -v293;
          if (v294 > v295)
            v293 = v288;
          if (v290 >= 0)
            v296 = v290;
          else
            v296 = -v290;
          if (v293 >= 0)
            v297 = v293;
          else
            v297 = -v293;
          if (v296 > v297)
            LODWORD(v293) = v290;
          *__p = v293;
          v298 = 8 * v274;
          *(_QWORD *)&v817 = 8 * v274;
          *((_QWORD *)&v817 + 1) = v285 - (((v289 + v290) * v824) >> 5);
          v818 = 8 * v274 - (((v289 + v288) * v825) >> 5);
          v819 = v285
               - ((v826 * (uint64_t)(int)v288
                 + v827 * (uint64_t)(int)v287
                 + v828 * (uint64_t)(int)v290
                 + 8 * ((v276 - v273) * v829 + (v275 - v274) * v830)) >> 5);
          *(uint32x4_t *)v812 = vshlq_u32(v799, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v799)) ^ 0x1F) - 4)));
          v299 = vaddvq_s32(*(int32x4_t *)v812);
          v300 = (v299 >> 1) - 1;
          do
          {
            v300 += *((_QWORD *)&v817 + v284) * *((unsigned int *)v812 + v284);
            ++v284;
          }
          while (v284 != 4);
          v301 = (v300 * *(unsigned int *)&v831[4 * v299 + 12]) >> 24;
          if (v298 <= v285)
            v302 = v285;
          else
            v302 = v298;
          if (v285 >= v298)
            v285 = v298;
          if (v301 < v302)
            v302 = v301;
          if (v285 <= v302)
            v285 = v302;
          if ((v288 ^ v287 | v286 ^ v287) <= 0)
            v303 = v285;
          else
            v303 = v301;
          v820 = v303;
          if ((int)v293 < -511)
          {
            LODWORD(v293) = -512;
          }
          else if ((int)v293 > 511)
          {
            LODWORD(v293) = 511;
          }
          v304 = (v293 + 512);
          v305 = *(unsigned __int8 *)(a8 + v304);
          v306 = (_QWORD *)a1[2];
          if ((unint64_t)v306 > a1[3])
          {
            v741 = v119;
            v764 = v123;
            v346 = v133;
            sub_2367C5188(a1);
            v133 = v346;
            v123 = v764;
            a2 = v745;
            v119 = v741;
          }
          else
          {
            v307 = a1[1];
            v308 = *a1 | (*v306 << v307);
            a1[2] = (unint64_t)v306 + ((63 - v307) >> 3);
            *a1 = v308;
            a1[1] = v307 | 0x38;
          }
          if (*(_BYTE *)(a2 + 16))
          {
            v347 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * v305);
            v742 = v119;
            v765 = v123;
            v348 = v133;
            v349 = sub_2367E27B4(v347, a1);
            v133 = v348;
            v123 = v765;
            a2 = v745;
            v119 = v742;
            v316 = v349;
          }
          else
          {
            v309 = *(_DWORD *)(a2 + 20);
            v310 = (unint64_t)(v309 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            v311 = *(_DWORD *)(a2 + 40) & v309 & 0xFFFu;
            v312 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v305 << *(_DWORD *)(a2 + 32)) + 8 * v310);
            if (v312 <= v311)
              v313 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v305 << *(_DWORD *)(a2 + 32)) + 8 * v310);
            else
              v313 = 0;
            v314 = HIDWORD(v313);
            v315 = HIWORD(v313);
            if (v312 <= v311)
              v316 = BYTE1(v312);
            else
              v316 = (unint64_t)(v309 & 0xFFF) >> *(_DWORD *)(a2 + 36);
            v317 = v311 + (unsigned __int16)v314 + (v315 ^ WORD1(v312)) * (*(_DWORD *)(a2 + 20) >> 12);
            v318 = v317 < 0x10000;
            v319 = *a1 >> (16 * v318);
            if (v317 < 0x10000)
              v317 = (unsigned __int16)*a1 | ((unsigned __int16)v317 << 16);
            *(_DWORD *)(a2 + 20) = v317;
            v320 = a1[1] - 16 * v318;
            *a1 = v319;
            a1[1] = v320;
          }
          v321 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v305);
          v322 = v321[1];
          v58 = v316 >= v322;
          v323 = v316 - v322;
          if (v58)
          {
            v324 = *v321;
            v327 = v321 + 2;
            v325 = v321[2];
            v326 = v327[1];
            v328 = v324 - (v325 + v326) + (v323 >> (v325 + v326));
            v329 = *a1 & ~(-1 << v328);
            v330 = a1[1] - (v328 & 0x1F);
            *a1 >>= v328 & 0x1F;
            a1[1] = v330;
            LODWORD(v316) = v316 & ~(-1 << v326) | ((unint64_t)(v329 | (((v316 >> v326) & ((1 << v325) - 1) | (1 << v325)) << v328)) << v326);
          }
          v331 = 0;
          v332 = *(char *)(v779 + v304)
               + ((unint64_t)((v303 << 29) + 1610612736) >> 32)
               + (int)(-(v316 & 1) ^ (v316 >> 1)) * (uint64_t)*(char *)(v120 + v304);
          v123[v283] = v332;
          if ((v119 & 1) != 0)
            v333 = 0;
          else
            v333 = *v798 + 2;
          v334 = v133 & (*v798 + 2);
          v335 = 8 * (int)v332;
          v336 = v333 + v283;
          *((_DWORD *)v822 + v333 + v283) = v303 - v335;
          v337 = v283 + v334 + 1;
          v338 = v821;
          do
          {
            v339 = *(_QWORD *)((char *)&v817 + v331) - v335;
            if (v339 < 0)
              v339 = v335 - *(_QWORD *)((char *)&v817 + v331);
            v340 = (unint64_t)(v339 + 3) >> 3;
            v341 = *v338;
            v338 += 3;
            *(_DWORD *)(v341 + 4 * v336) = v340;
            *(_DWORD *)(v341 + 4 * v337) += v340;
            v331 += 8;
          }
          while (v331 != 32);
          ++v119;
        }
        while (v119 < *v743);
      }
      else
      {
        __p = (_DWORD *)v805;
      }
      if (__p)
      {
        *((_QWORD *)&v805 + 1) = __p;
        operator delete(__p);
      }
      if (v822)
      {
        v823 = v822;
        operator delete(v822);
      }
      for (m = 0; m != -12; m -= 3)
      {
        v396 = (void *)v821[m + 9];
        if (v396)
        {
          v821[m + 10] = v396;
          operator delete(v396);
        }
      }
    }
    else if (HIBYTE(v836))
    {
      sub_2367CBE88(v812, v834);
      v350 = v10[2];
      v351 = ((char *)v812[1] - (char *)v812[0]) >> 2;
      v352 = *v69;
      v733 = v351 - 16;
      sub_2367DA410((uint64_t)&v817, v351 - 16, *v69);
      v353 = v821[0];
      if (LODWORD(v821[0]))
      {
        v68 = LODWORD(v821[0]);
      }
      else
      {
        v805 = v817;
        v806 = v818;
        v807 = v819;
        v732 = v819;
        v808 = v820;
        v809 = v733;
        v810 = v352;
        v811 = 0;
        v801 = &off_250800498;
        v398 = *(_OWORD *)(a5 + 8);
        v399 = *(_OWORD *)(a5 + 24);
        v804 = *(_OWORD *)(a5 + 40);
        v803 = v399;
        v802 = v398;
        sub_2367FE7B0((uint64_t)&v817, (uint64_t)&v801, *v69);
        if (*v11)
        {
          v400 = 0;
          v776 = v350 >> 2;
          v734 = v9;
          do
          {
            __pa = (_DWORD *)(v10[3] + v10[2] * v400);
            v791 = v400;
            v401 = v812[0];
            *(_DWORD *)v812[0] = a6;
            v401[1] = v9;
            v401[2] = v400;
            v401[9] = 0;
            sub_2367FE934((uint64_t)v10, v400, a9, a6, (unsigned int *)&v805);
            v402 = v791;
            v403 = *v798;
            v796 = (uint64_t)(v791 << 63) >> 63;
            if (v791 >= 2 && (v403 >= 9 ? (v404 = v733 == 0) : (v404 = 0), v404))
            {
              v405 = 0;
              v406 = 1;
              do
              {
                v407 = v406;
                sub_2367FEE64((uint64_t)&v799, (_DWORD *)v812[0], v403, (uint64_t)&__pa[v405], v776, v405, v402, &v832, &v805, (uint64_t)&v817);
                v408 = sub_2367E2428(a2, v799.i32[0], a1);
                v402 = v791;
                v411 = 0;
                v412 = v799.i64[1] + (-(uint64_t)(v408 & 1) ^ (v408 >> 1)) * v800;
                __pa[v405] = v412;
                v403 = *v798;
                v413 = *v798 + 2;
                if ((v791 & 1) != 0)
                  v414 = 0;
                else
                  v414 = *v798 + 2;
                v415 = 8 * (int)v412;
                v416 = v414 + v405;
                v417 = (int *)v822;
                *((_DWORD *)v822 + v416) = v820 - v415;
                v418 = v405 + (v796 & v413) + 1;
                v419 = v821;
                do
                {
                  v420 = *(_QWORD *)((char *)&v817 + v411) - v415;
                  if (v420 < 0)
                    v420 = v415 - *(_QWORD *)((char *)&v817 + v411);
                  v421 = (unint64_t)(v420 + 3) >> 3;
                  v422 = *v419;
                  v419 += 3;
                  *(_DWORD *)(v422 + 4 * v416) = v421;
                  *(_DWORD *)(v422 + 4 * v418) += v421;
                  v411 += 8;
                }
                while (v411 != 32);
                v406 = 0;
                v405 = 1;
              }
              while ((v407 & 1) != 0);
              v423 = v403 - 2;
              if (v403 - 2 >= 3)
              {
                v424 = (char *)v812[0];
                v759 = v822;
                v425 = 2;
                do
                {
                  v426 = 0;
                  v427 = (uint64_t)&__pa[v425];
                  v428 = v425 << 32;
                  v429 = *(int *)(v427 + 4 * ~(v350 >> 2));
                  v409.i64[0] = *(_QWORD *)(v427 - 4 * (v350 >> 2));
                  v430 = v409.i32[0];
                  v431 = *(int *)(v427 - 8);
                  v432 = *(int *)(v427 - 4);
                  v433 = *(int *)(v427 + 4 * (-(uint64_t)(v350 >> 2) - (v350 >> 2)));
                  v766 = *(int *)(v427 + 4 * (2 - (v350 >> 2)));
                  if (v409.i32[0] >= 0)
                    LODWORD(v427) = *(_QWORD *)(v427 - 4 * (v350 >> 2));
                  else
                    v427 = -(uint64_t)v409.i32[0];
                  *((_DWORD *)v424 + 3) = v425;
                  *((_DWORD *)v424 + 4) = v427;
                  if (v432 >= 0)
                    LODWORD(v434) = v432;
                  else
                    v434 = -v432;
                  *((_DWORD *)v424 + 5) = v434;
                  *((_DWORD *)v424 + 6) = v409.i32[0];
                  v435 = v432 - *((_DWORD *)v424 + 9);
                  *((_DWORD *)v424 + 7) = v432;
                  *((_DWORD *)v424 + 8) = v435;
                  v436 = v409.i32[0] + v432 - v429;
                  v410.i32[0] = v429;
                  v437.i64[0] = vzip1q_s32(v410, v409).u64[0];
                  v437.i64[1] = __PAIR64__(v432, v437.u32[1]);
                  *((_DWORD *)v424 + 9) = v436;
                  *((_DWORD *)v424 + 10) = v432 - v429;
                  v438.i64[0] = v409.i64[0];
                  v438.i64[1] = __PAIR64__(v431, v433);
                  *(int32x4_t *)(v424 + 44) = vsubq_s32(v437, v438);
                  v439 = v403 + 2;
                  v440 = v796 & (v403 + 2);
                  v441 = v440 + (int)v425;
                  if (v403 - 1 <= (int)v425)
                    v442 = v440 + (int)v425;
                  else
                    v442 = v441 + 1;
                  if (v428)
                    v443 = v441 - 1;
                  else
                    v443 = v796 & (v403 + 2);
                  for (n = 40; n != 136; n += 24)
                  {
                    v445 = (*(_DWORD *)(*(_QWORD *)((char *)&v817 + n) + 4 * v442)
                                        + *(_DWORD *)(*(_QWORD *)((char *)&v817 + n) + 4 * v441)
                                        + *(_DWORD *)(*(_QWORD *)((char *)&v817 + n) + 4 * v443));
                    v446 = __clz(v445 + 1) ^ 0x3F;
                    if (v446 <= 5)
                      LOBYTE(v446) = 5;
                    v838[0].i32[v426] = ((*(_DWORD *)&v831[4 * (v445 >> (v446 - 5)) + 16]
                                                      * *(_DWORD *)&v831[v426 * 4]) >> (v446 - 5))
                                      + 4;
                    ++v426;
                  }
                  if (v428)
                  {
                    if ((v402 & 1) != 0)
                      v447 = 0;
                    else
                      v447 = v439;
                    v448 = v417[(int)v425 - 1 + v447];
                  }
                  else
                  {
                    v448 = 0;
                  }
                  v449 = 0;
                  v450 = v409.i32[1];
                  v451 = 8 * v409.i32[0];
                  v452 = 8 * v432;
                  v453 = v417[v441];
                  v454 = v417[v443];
                  v455 = 8 * v409.i32[1];
                  v456 = v448 + v453;
                  v773 = v417;
                  v457 = v417[v442];
                  if (v453 >= 0)
                    v458 = v453;
                  else
                    v458 = -v453;
                  if (v448 >= 0)
                    v459 = v448;
                  else
                    v459 = -v448;
                  if (v458 <= v459)
                    v460 = v448;
                  else
                    v460 = v453;
                  if (v454 >= 0)
                    v461 = v454;
                  else
                    v461 = -v454;
                  if (v460 >= 0)
                    v462 = v460;
                  else
                    v462 = -v460;
                  if (v461 > v462)
                    v460 = v454;
                  if (v457 >= 0)
                    v463 = v457;
                  else
                    v463 = -v457;
                  if (v460 >= 0)
                    v464 = v460;
                  else
                    v464 = -v460;
                  if (v463 > v464)
                    LODWORD(v460) = v457;
                  *((_DWORD *)v424 + 15) = v460;
                  *(_QWORD *)&v817 = v452 - v451 + v455;
                  *((_QWORD *)&v817 + 1) = v451 - (((v456 + v457) * v824) >> 5);
                  v818 = v452 - (((v456 + v454) * v825) >> 5);
                  v819 = v451
                       - ((v826 * (uint64_t)(int)v454
                         + v827 * (uint64_t)(int)v453
                         + v828 * (uint64_t)(int)v457
                         + 8 * ((v433 - v409.i32[0]) * v829 + (v429 - v432) * v830)) >> 5);
                  v410 = vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32(v838[0])) ^ 0x1F) - 4));
                  v409 = (int32x4_t)vshlq_u32((uint32x4_t)v838[0], (uint32x4_t)v410);
                  v799 = (uint32x4_t)v409;
                  v465 = vaddvq_s32(v409);
                  v466 = (v465 >> 1) - 1;
                  do
                  {
                    v466 += *((_QWORD *)&v817 + v449) * v799.u32[v449];
                    ++v449;
                  }
                  while (v449 != 4);
                  v467 = v454 ^ v453 | v448 ^ v453;
                  if (v455 <= v451)
                    v468 = 8 * v430;
                  else
                    v468 = v455;
                  if (v452 > v468)
                    v468 = 8 * v432;
                  if (v451 >= v455)
                    v451 = v455;
                  if (v451 < v452)
                    v452 = v451;
                  if ((v466 * *(unsigned int *)&v831[4 * v465 + 12]) >> 24 >= v468)
                    v469 = v468;
                  else
                    v469 = (v466 * *(unsigned int *)&v831[4 * v465 + 12]) >> 24;
                  if (v452 <= v469)
                    v452 = v469;
                  if (v467 <= 0)
                    v470 = v452;
                  else
                    v470 = (v466 * *(unsigned int *)&v831[4 * v465 + 12]) >> 24;
                  v820 = v470;
                  v471 = *v16;
                  if ((v471 & 0x80000000) != 0)
                  {
                    LODWORD(v472) = 0;
                    v402 = v791;
                    v417 = v773;
                  }
                  else
                  {
                    v472 = 0;
                    v473 = v16;
                    v402 = v791;
                    v417 = v773;
                    do
                    {
                      v474 = *(_DWORD *)&v424[4 * v471];
                      v475 = &v16[6 * v472];
                      v476 = v475[1];
                      v477 = *(_DWORD *)&v424[4 * *((__int16 *)v475 + 10)] <= (int)v475[2];
                      v478 = v475[3];
                      v479 = v475[4];
                      v480 = (*(_DWORD *)&v424[4 * *((__int16 *)v473 + 11)] <= v478) | 2;
                      if (v474 <= v476)
                        v481 = v480;
                      else
                        v481 = v477;
                      LODWORD(v472) = v481 + v479;
                      v482 = &v16[6 * v472];
                      v483 = *v482;
                      if ((v483 & 0x80000000) != 0)
                        break;
                      v484 = *(_DWORD *)&v424[4 * v483];
                      v485 = &v16[6 * v472];
                      v486 = v485[1];
                      v487 = *(_DWORD *)&v424[4 * *((__int16 *)v485 + 10)] <= (int)v485[2];
                      v488 = v485[3];
                      v489 = v485[4];
                      v490 = (*(_DWORD *)&v424[4 * *((__int16 *)v482 + 11)] <= v488) | 2;
                      v491 = v484 <= v486 ? v490 : v487;
                      v472 = v491 + v489;
                      v473 = &v16[6 * v472];
                      v471 = *v473;
                    }
                    while ((v471 & 0x80000000) == 0);
                  }
                  v492 = &v16[6 * v472];
                  v493 = v492[2];
                  v494 = v492[5];
                  v495 = (int)v492[4];
                  switch(v492[1])
                  {
                    case 1u:
                      break;
                    case 2u:
                      v432 = v430;
                      break;
                    case 3u:
                      v496 = __OFADD__(v430, v432);
                      v498 = v430 + v432;
                      v497 = (v498 < 0) ^ v496;
                      goto LABEL_528;
                    case 4u:
                      v499 = v430 + v432 - v429;
                      v500 = v499 - v432;
                      if (v499 - v432 < 0)
                        v500 = v432 - v499;
                      v501 = v499 - v430;
                      if (v501 < 0)
                        v501 = -v501;
                      if (v500 >= v501)
                        v432 = v430;
                      break;
                    case 5u:
                      if ((int)v430 >= (int)v432)
                        v502 = v432;
                      else
                        v502 = v430;
                      if ((int)v432 > (int)v430)
                        LODWORD(v430) = v432;
                      if (v502 <= (int)v429)
                        v503 = v436;
                      else
                        v503 = v430;
                      if ((int)v430 >= (int)v429)
                        v432 = v503;
                      else
                        v432 = v502;
                      break;
                    case 6u:
                      v432 = (v470 + 3) >> 3;
                      break;
                    case 7u:
                      v432 = v450;
                      break;
                    case 8u:
                      v432 = v429;
                      break;
                    case 9u:
                      v432 = v431;
                      break;
                    case 0xAu:
                      v498 = v429 + v432;
                      v497 = (v429 + v432 < 0) ^ __OFADD__(v429, v432);
                      goto LABEL_528;
                    case 0xBu:
                      v496 = __OFADD__(v429, v430);
                      v498 = v429 + v430;
                      v497 = (v498 < 0) ^ v496;
                      goto LABEL_528;
                    case 0xCu:
                      v496 = __OFADD__(v450, v430);
                      v498 = v450 + v430;
                      v497 = (v498 < 0) ^ v496;
LABEL_528:
                      if (v497)
                        ++v498;
                      v432 = v498 >> 1;
                      break;
                    case 0xDu:
                      v540 = 6 * (int)v430 - v432 + 8 * v432 + v431 + 3 * v450 - 2 * v433 + v766;
                      v541 = v540 + 8;
                      v542 = v540 + 23;
                      if (v541 >= 0)
                        v542 = v541;
                      v432 = v542 >> 4;
                      break;
                    default:
                      v432 = 0;
                      break;
                  }
                  v504 = (_QWORD *)a1[2];
                  if ((unint64_t)v504 > a1[3])
                  {
                    v728 = v492[5];
                    v730 = v492[2];
                    v767 = v470;
                    v726 = (int)v492[4];
                    sub_2367C5188(a1);
                    v495 = v726;
                    v494 = v728;
                    v493 = v730;
                    LODWORD(v470) = v767;
                    v417 = v773;
                    v402 = v791;
                  }
                  else
                  {
                    v505 = a1[1];
                    v506 = *a1 | (*v504 << v505);
                    a1[2] = (unint64_t)v504 + ((63 - v505) >> 3);
                    *a1 = v506;
                    a1[1] = v505 | 0x38;
                  }
                  if (*(_BYTE *)(a2 + 16))
                  {
                    v729 = v494;
                    v731 = v493;
                    v768 = v470;
                    v727 = v495;
                    v543 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * (int)v495), a1);
                    v495 = v727;
                    v494 = v729;
                    LODWORD(v470) = v768;
                    v417 = v773;
                    v402 = v791;
                    v514 = v543;
                    v493 = v731;
                  }
                  else
                  {
                    v507 = *(_DWORD *)(a2 + 20);
                    v508 = (unint64_t)(v507 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    v509 = *(_DWORD *)(a2 + 40) & v507 & 0xFFFu;
                    v510 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v495 << *(_DWORD *)(a2 + 32)) + 8 * v508);
                    if (v510 <= v509)
                      v511 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v495 << *(_DWORD *)(a2 + 32)) + 8 * v508);
                    else
                      v511 = 0;
                    v512 = HIDWORD(v511);
                    v513 = HIWORD(v511);
                    if (v510 <= v509)
                      v514 = BYTE1(v510);
                    else
                      v514 = (unint64_t)(v507 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    v515 = v509 + (unsigned __int16)v512 + (v513 ^ WORD1(v510)) * (*(_DWORD *)(a2 + 20) >> 12);
                    v516 = v515 < 0x10000;
                    v517 = *a1 >> (16 * v516);
                    if (v515 < 0x10000)
                      v515 = (unsigned __int16)*a1 | ((unsigned __int16)v515 << 16);
                    *(_DWORD *)(a2 + 20) = v515;
                    v518 = a1[1] - 16 * v516;
                    *a1 = v517;
                    a1[1] = v518;
                  }
                  v519 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v495);
                  v520 = v519[1];
                  v58 = v514 >= v520;
                  v521 = v514 - v520;
                  if (v58)
                  {
                    v522 = *v519;
                    v525 = v519 + 2;
                    v523 = v519[2];
                    v524 = v525[1];
                    v526 = v522 - (v523 + v524) + (v521 >> (v523 + v524));
                    v527 = *a1 & ~(-1 << v526);
                    v528 = a1[1] - (v526 & 0x1F);
                    *a1 >>= v526 & 0x1F;
                    a1[1] = v528;
                    LODWORD(v514) = v514 & ~(-1 << v524) | ((unint64_t)(v527 | (((v514 >> v524) & ((1 << v523) - 1) | (1 << v523)) << v526)) << v524);
                  }
                  v529 = 0;
                  v530 = v432 + v494 + (-(uint64_t)(v514 & 1) ^ ((unint64_t)v514 >> 1)) * v493;
                  __pa[v425] = v530;
                  v403 = *v798;
                  if ((v402 & 1) != 0)
                    v531 = 0;
                  else
                    v531 = *v798 + 2;
                  v532 = v796 & (*v798 + 2);
                  v533 = 8 * (int)v530;
                  v534 = v531 + v425;
                  v759[v531 + v425++] = v470 - v533;
                  v535 = v425 + v532;
                  v536 = v821;
                  do
                  {
                    v537 = *(_QWORD *)((char *)&v817 + v529) - v533;
                    if (v537 < 0)
                      v537 = v533 - *(_QWORD *)((char *)&v817 + v529);
                    v538 = (unint64_t)(v537 + 3) >> 3;
                    v539 = *v536;
                    v536 += 3;
                    *(_DWORD *)(v539 + 4 * v534) = v538;
                    *(_DWORD *)(v539 + 4 * v535) += v538;
                    v529 += 8;
                  }
                  while (v529 != 32);
                  v423 = v403 - 2;
                }
                while (v425 < v403 - 2);
              }
              v10 = (_QWORD *)v744;
              while (v423 < v403)
              {
                sub_2367FEE64((uint64_t)&v799, (_DWORD *)v812[0], v403, (uint64_t)&__pa[v423], v776, v423, v402, &v832, &v805, (uint64_t)&v817);
                v544 = sub_2367E2428(a2, v799.i32[0], a1);
                v402 = v791;
                v545 = 0;
                v546 = v799.i64[1] + (-(uint64_t)(v544 & 1) ^ (v544 >> 1)) * v800;
                __pa[v423] = v546;
                v403 = *v798;
                v547 = *v798 + 2;
                if ((v791 & 1) != 0)
                  v548 = 0;
                else
                  v548 = *v798 + 2;
                v549 = 8 * (int)v546;
                v550 = v548 + v423;
                *((_DWORD *)v822 + v550) = v820 - v549;
                v551 = ++v423 + (v796 & v547);
                v552 = v821;
                do
                {
                  v553 = *(_QWORD *)((char *)&v817 + v545) - v549;
                  if (v553 < 0)
                    v553 = v549 - *(_QWORD *)((char *)&v817 + v545);
                  v554 = (unint64_t)(v553 + 3) >> 3;
                  v555 = *v552;
                  v552 += 3;
                  *(_DWORD *)(v555 + 4 * v550) = v554;
                  *(_DWORD *)(v555 + 4 * v551) += v554;
                  v545 += 8;
                }
                while (v545 != 32);
              }
            }
            else if (v403)
            {
              v556 = 0;
              do
              {
                sub_2367FEE64((uint64_t)&v799, (_DWORD *)v812[0], v403, (uint64_t)&__pa[v556], v776, v556, v402, &v832, &v805, (uint64_t)&v817);
                v557 = sub_2367E2428(a2, v799.i32[0], a1);
                v402 = v791;
                v558 = 0;
                v559 = v799.i64[1] + (-(uint64_t)(v557 & 1) ^ (v557 >> 1)) * v800;
                __pa[v556] = v559;
                v403 = *v798;
                v560 = *v798 + 2;
                if ((v791 & 1) != 0)
                  v561 = 0;
                else
                  v561 = *v798 + 2;
                v562 = 8 * (int)v559;
                v563 = v561 + v556;
                *((_DWORD *)v822 + v563) = v820 - v562;
                v564 = ++v556 + (v796 & v560);
                v565 = v821;
                do
                {
                  v566 = *(_QWORD *)((char *)&v817 + v558) - v562;
                  if (v566 < 0)
                    v566 = v562 - *(_QWORD *)((char *)&v817 + v558);
                  v567 = (unint64_t)(v566 + 3) >> 3;
                  v568 = *v565;
                  v565 += 3;
                  *(_DWORD *)(v568 + 4 * v563) = v567;
                  *(_DWORD *)(v568 + 4 * v564) += v567;
                  v558 += 8;
                }
                while (v558 != 32);
              }
              while (v556 < v403);
            }
            v400 = v402 + 1;
            v9 = v734;
          }
          while (v400 < *v743);
        }
        if (v822)
        {
          v823 = v822;
          operator delete(v822);
        }
        for (ii = 0; ii != -12; ii -= 3)
        {
          v570 = (void *)v821[ii + 9];
          if (v570)
          {
            v821[ii + 10] = v570;
            operator delete(v570);
          }
        }
        v807 = 0;
        if (v732)
        {
          v571 = -*(_QWORD *)(v732 - 24);
          do
            v572 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v572 + v571, &qword_2564313D8));
          free(*(void **)(v732 - 32));
        }
        v68 = 0;
        v353 = 0;
      }
      if (v812[0])
      {
        v812[1] = v812[0];
        v573 = v353;
        operator delete(v812[0]);
        v353 = v573;
      }
      if (v353)
        goto LABEL_399;
    }
    else
    {
      sub_2367CBE88(v812, v834);
      v391 = v10[2];
      v392 = ((char *)v812[1] - (char *)v812[0]) >> 2;
      v393 = *v69;
      v775 = v392 - 16;
      sub_2367DA410((uint64_t)&v805, v392 - 16, *v69);
      v394 = v809;
      if ((_DWORD)v809)
      {
        v68 = v809;
      }
      else
      {
        v735 = v9;
        v817 = v805;
        v818 = v806;
        v819 = v807;
        v752 = v807;
        v820 = v808;
        v821[0] = v775;
        v821[1] = v393;
        v821[2] = 0;
        if (*v11)
        {
          v603 = 0;
          v604 = v391 >> 2;
          v774 = ~v604;
          v771 = -v604 - v604;
          v760 = -4 * v604;
          v769 = 2 - v604;
          v797 = v604;
          do
          {
            v780 = *(_QWORD *)(v744 + 16);
            __pb = *(char **)(v744 + 24);
            v605 = &__pb[v780 * v603];
            sub_2367FE934(v744, v603, a9, a6, (unsigned int *)&v817);
            v606 = v812[0];
            *(_DWORD *)v812[0] = a6;
            v606[1] = v735;
            v606[2] = v603;
            v606[9] = 0;
            v607 = *v69;
            if (v603 >= 2 && (v607 >= 9 ? (v608 = v775 == 0) : (v608 = 0), v608))
            {
              v609 = 0;
              v610 = 1;
              v611 = v604;
              do
              {
                v612 = v610;
                v613 = &v605[4 * v609];
                sub_2367FEB28((uint64_t)&v805, (_DWORD *)v812[0], *v69, (uint64_t)v613, v611, v609, v603, &v832, &v817);
                v614 = sub_2367E2428(a2, (int)v805, a1);
                v610 = 0;
                *(_DWORD *)v613 = DWORD2(v805) + ((v614 >> 1) ^ -(v614 & 1)) * HIDWORD(v806);
                v609 = 1;
              }
              while ((v612 & 1) != 0);
              v617 = *v69;
              v618 = *v69 - 2;
              if (v618 >= 3)
              {
                v619 = (char *)v812[0];
                v620 = 2;
                v622 = v771;
                v621 = v774;
                v624 = v760;
                v623 = v769;
                v792 = v603;
                do
                {
                  v625 = &v605[4 * v620];
                  v626 = *(int *)&v625[4 * v621];
                  v615.i64[0] = *(_QWORD *)&v625[v624];
                  v628 = *((int *)v625 - 2);
                  v627 = *((int *)v625 - 1);
                  v629 = *(int *)&v625[4 * v622];
                  v630 = *(int *)&v625[4 * v623];
                  if (v615.i32[0] >= 0)
                    LODWORD(v631) = v615.i32[0];
                  else
                    v631 = -(uint64_t)v615.i32[0];
                  *((_DWORD *)v619 + 3) = v620;
                  *((_DWORD *)v619 + 4) = v631;
                  if (v627 >= 0)
                    LODWORD(v632) = v627;
                  else
                    v632 = -v627;
                  *((_DWORD *)v619 + 5) = v632;
                  *((_DWORD *)v619 + 6) = v615.i32[0];
                  v633 = v627 - *((_DWORD *)v619 + 9);
                  *((_DWORD *)v619 + 7) = v627;
                  *((_DWORD *)v619 + 8) = v633;
                  v634 = v615.i32[0] + v627 - v626;
                  v616.i32[0] = v626;
                  v635.i64[0] = vzip1q_s32(v616, v615).u64[0];
                  v635.i64[1] = __PAIR64__(v627, v635.u32[1]);
                  v636.i64[0] = v615.i64[0];
                  v636.i64[1] = __PAIR64__(v628, v629);
                  *((_DWORD *)v619 + 9) = v634;
                  *((_DWORD *)v619 + 10) = v627 - v626;
                  v616 = vsubq_s32(v635, v636);
                  *(int32x4_t *)(v619 + 44) = v616;
                  v637 = *v16;
                  if ((v637 & 0x80000000) != 0)
                  {
                    LODWORD(v638) = 0;
                  }
                  else
                  {
                    v638 = 0;
                    v639 = v16;
                    do
                    {
                      v640 = &v16[6 * v638];
                      v641 = v640[1];
                      v642 = *(_DWORD *)&v619[4 * *((__int16 *)v640 + 10)] <= (int)v640[2];
                      v643 = v640[3];
                      v644 = v640[4];
                      v645 = (*(_DWORD *)&v619[4 * *((__int16 *)v639 + 11)] <= v643) | 2;
                      if (*(_DWORD *)&v619[4 * v637] > v641)
                        v645 = v642;
                      LODWORD(v638) = v645 + v644;
                      v646 = &v16[6 * v638];
                      v647 = *v646;
                      if ((v647 & 0x80000000) != 0)
                        break;
                      v648 = &v16[6 * v638];
                      v649 = v648[1];
                      v650 = *(_DWORD *)&v619[4 * *((__int16 *)v648 + 10)] <= (int)v648[2];
                      v651 = v648[3];
                      v652 = v648[4];
                      v653 = (*(_DWORD *)&v619[4 * *((__int16 *)v646 + 11)] <= v651) | 2;
                      if (*(_DWORD *)&v619[4 * v647] > v649)
                        v653 = v650;
                      v638 = v653 + v652;
                      v639 = &v16[6 * v638];
                      v637 = *v639;
                    }
                    while ((v637 & 0x80000000) == 0);
                  }
                  LODWORD(v654) = 0;
                  v655 = &v16[6 * v638];
                  v656 = v655[2];
                  v657 = v655[5];
                  v658 = (int)v655[4];
                  switch(v655[1])
                  {
                    case 1u:
                      LODWORD(v654) = v627;
                      break;
                    case 2u:
                      LODWORD(v654) = v615.i32[0];
                      break;
                    case 3u:
                      v496 = __OFADD__(v615.i32[0], v627);
                      v660 = v615.i32[0] + v627;
                      v659 = (v660 < 0) ^ v496;
                      goto LABEL_677;
                    case 4u:
                      v661 = v615.i32[0] + v627 - v626;
                      v662 = v661 - v627;
                      if (v661 - v627 < 0)
                        v662 = v627 - v661;
                      v663 = v661 - v615.i32[0];
                      if (v663 < 0)
                        v663 = -v663;
                      if (v662 >= v663)
                        LODWORD(v654) = v615.i32[0];
                      else
                        LODWORD(v654) = v627;
                      break;
                    case 5u:
                      if (v615.i32[0] >= (int)v627)
                        v664 = v627;
                      else
                        v664 = v615.i32[0];
                      if ((int)v627 <= v615.i32[0])
                        LODWORD(v627) = v615.i32[0];
                      if (v664 <= (int)v626)
                        v665 = v634;
                      else
                        v665 = v627;
                      if ((int)v627 >= (int)v626)
                        LODWORD(v654) = v665;
                      else
                        LODWORD(v654) = v664;
                      break;
                    case 7u:
                      LODWORD(v654) = v615.i32[1];
                      break;
                    case 8u:
                      LODWORD(v654) = v626;
                      break;
                    case 9u:
                      LODWORD(v654) = v628;
                      break;
                    case 0xAu:
                      v496 = __OFADD__(v626, v627);
                      v660 = v626 + v627;
                      v659 = (v660 < 0) ^ v496;
                      goto LABEL_677;
                    case 0xBu:
                      v660 = v626 + v615.i32[0];
                      v659 = (v660 < 0) ^ __OFADD__(v626, v615.i32[0]);
                      goto LABEL_677;
                    case 0xCu:
                      v660 = v615.i32[1] + (uint64_t)v615.i32[0];
                      v659 = (v660 < 0) ^ __OFADD__(v615.i32[1], v615.i32[0]);
LABEL_677:
                      if (v659)
                        ++v660;
                      v654 = v660 >> 1;
                      break;
                    case 0xDu:
                      v691 = 6 * v615.i32[0] - v627 + 8 * v627 + v628 + 3 * v615.i32[1] - 2 * v629 + v630;
                      v692 = v691 + 8;
                      v693 = v691 + 23;
                      if (v692 >= 0)
                        v693 = v692;
                      v654 = v693 >> 4;
                      break;
                    default:
                      break;
                  }
                  v666 = (_QWORD *)a1[2];
                  if ((unint64_t)v666 > a1[3])
                  {
                    v746 = v655[5];
                    v749 = v655[2];
                    sub_2367C5188(a1);
                    v657 = v746;
                    v656 = v749;
                    v624 = v760;
                    v623 = v769;
                    v622 = v771;
                    v621 = v774;
                  }
                  else
                  {
                    v667 = a1[1];
                    v668 = *a1 | (*v666 << v667);
                    a1[2] = (unint64_t)v666 + ((63 - v667) >> 3);
                    *a1 = v668;
                    a1[1] = v667 | 0x38;
                  }
                  if (*(_BYTE *)(a2 + 16))
                  {
                    v747 = v657;
                    v750 = v656;
                    v694 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * (int)v658), a1);
                    v657 = v747;
                    v656 = v750;
                    v624 = v760;
                    v623 = v769;
                    v622 = v771;
                    v621 = v774;
                    v676 = v694;
                  }
                  else
                  {
                    v669 = *(_DWORD *)(a2 + 20);
                    v670 = (unint64_t)(v669 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    v671 = *(_DWORD *)(a2 + 40) & v669 & 0xFFFu;
                    v672 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v658 << *(_DWORD *)(a2 + 32)) + 8 * v670);
                    if (v672 <= v671)
                      v673 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v658 << *(_DWORD *)(a2 + 32)) + 8 * v670);
                    else
                      v673 = 0;
                    v674 = HIDWORD(v673);
                    v675 = HIWORD(v673);
                    if (v672 <= v671)
                      v676 = BYTE1(v672);
                    else
                      v676 = (unint64_t)(v669 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                    v677 = v671 + (unsigned __int16)v674 + (v675 ^ WORD1(v672)) * (*(_DWORD *)(a2 + 20) >> 12);
                    v678 = v677 < 0x10000;
                    v679 = *a1 >> (16 * v678);
                    if (v677 < 0x10000)
                      v677 = (unsigned __int16)*a1 | ((unsigned __int16)v677 << 16);
                    *(_DWORD *)(a2 + 20) = v677;
                    v680 = a1[1] - 16 * v678;
                    *a1 = v679;
                    a1[1] = v680;
                  }
                  v681 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v658);
                  v682 = v681[1];
                  v58 = v676 >= v682;
                  v683 = v676 - v682;
                  if (v58)
                  {
                    v684 = *v681;
                    v687 = v681 + 2;
                    v685 = v681[2];
                    v686 = v687[1];
                    v688 = v684 - (v685 + v686) + (v683 >> (v685 + v686));
                    v689 = *a1 & ~(-1 << v688);
                    v690 = a1[1] - (v688 & 0x1F);
                    *a1 >>= v688 & 0x1F;
                    a1[1] = v690;
                    LODWORD(v676) = v676 & ~(-1 << v686) | ((unint64_t)(v689 | (((v676 >> v686) & ((1 << v685) - 1) | (1 << v685)) << v688)) << v686);
                  }
                  v603 = v792;
                  *(_DWORD *)v625 = v654 + v657 + ((v676 >> 1) ^ -(v676 & 1)) * v656;
                  ++v620;
                  v69 = v798;
                  v617 = *v798;
                  v618 = *v798 - 2;
                }
                while (v620 < v618);
              }
              v604 = v797;
              if (v618 < v617)
              {
                v695 = &__pb[4 * v618 + v780 * v603];
                do
                {
                  sub_2367FEB28((uint64_t)&v805, (_DWORD *)v812[0], v617, (uint64_t)v695, v797, v618, v603, &v832, &v817);
                  v696 = sub_2367E2428(a2, (int)v805, a1);
                  *(_DWORD *)v695 = DWORD2(v805) + ((v696 >> 1) ^ -(v696 & 1)) * HIDWORD(v806);
                  v695 += 4;
                  ++v618;
                  v617 = *v69;
                }
                while (v618 < *v69);
              }
            }
            else if (v607)
            {
              v697 = 0;
              do
              {
                sub_2367FEB28((uint64_t)&v805, (_DWORD *)v812[0], v607, (uint64_t)v605, v604, v697, v603, &v832, &v817);
                v698 = (int)v805;
                v699 = (_QWORD *)a1[2];
                if ((unint64_t)v699 > a1[3])
                {
                  sub_2367C5188(a1);
                }
                else
                {
                  v700 = a1[1];
                  v701 = *a1 | (*v699 << v700);
                  a1[2] = (unint64_t)v699 + ((63 - v700) >> 3);
                  *a1 = v701;
                  a1[1] = v700 | 0x38;
                }
                if (*(_BYTE *)(a2 + 16))
                {
                  v709 = sub_2367E27B4(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * (int)v698), a1);
                }
                else
                {
                  v702 = *(_DWORD *)(a2 + 20);
                  v703 = (unint64_t)(v702 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  v704 = *(_DWORD *)(a2 + 40) & v702 & 0xFFFu;
                  v705 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v698 << *(_DWORD *)(a2 + 32)) + 8 * v703);
                  if (v705 <= v704)
                    v706 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v698 << *(_DWORD *)(a2 + 32)) + 8 * v703);
                  else
                    v706 = 0;
                  v707 = HIDWORD(v706);
                  v708 = HIWORD(v706);
                  if (v705 <= v704)
                    v709 = BYTE1(v705);
                  else
                    v709 = (unint64_t)(v702 & 0xFFF) >> *(_DWORD *)(a2 + 36);
                  v710 = v704 + (unsigned __int16)v707 + (v708 ^ WORD1(v705)) * (*(_DWORD *)(a2 + 20) >> 12);
                  v711 = v710 < 0x10000;
                  v712 = *a1 >> (16 * v711);
                  if (v710 < 0x10000)
                    v710 = (unsigned __int16)*a1 | ((unsigned __int16)v710 << 16);
                  *(_DWORD *)(a2 + 20) = v710;
                  v713 = a1[1] - 16 * v711;
                  *a1 = v712;
                  a1[1] = v713;
                }
                v714 = (int *)(*(_QWORD *)(a2 + 24) + 16 * v698);
                v715 = v714[1];
                v58 = v709 >= v715;
                v716 = v709 - v715;
                if (v58)
                {
                  v717 = *v714;
                  v720 = v714 + 2;
                  v718 = v714[2];
                  v719 = v720[1];
                  v721 = v717 - (v718 + v719) + (v716 >> (v718 + v719));
                  v722 = *a1 & ~(-1 << v721);
                  v723 = a1[1] - (v721 & 0x1F);
                  *a1 >>= v721 & 0x1F;
                  a1[1] = v723;
                  LODWORD(v709) = v709 & ~(-1 << v719) | ((unint64_t)(v722 | (((v709 >> v719) & ((1 << v718) - 1) | (1 << v718)) << v721)) << v719);
                }
                v604 = v797;
                *(_DWORD *)v605 = DWORD2(v805) + ((v709 >> 1) ^ -(v709 & 1)) * HIDWORD(v806);
                v605 += 4;
                ++v697;
                v607 = *v69;
              }
              while (v697 < *v69);
            }
            ++v603;
          }
          while (v603 < *v743);
        }
        v819 = 0;
        v394 = 0;
        if (v752)
        {
          v724 = -*(_QWORD *)(v752 - 24);
          do
            v725 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v725 + v724, &qword_2564313D8));
          free(*(void **)(v752 - 32));
        }
        v68 = 0;
      }
      if (v812[0])
      {
        v812[1] = v812[0];
        operator delete(v812[0]);
      }
      if (v394)
        goto LABEL_399;
    }
  }
LABEL_398:
  v68 = 0;
LABEL_399:
  if (v832)
    operator delete(v832);
  return v68;
}

void sub_2367FDFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;

  if (a16)
  {
    v57 = -*(_QWORD *)(a16 - 24);
    do
      v58 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v58 + v57, &qword_2564313D8));
    free(*(void **)(a16 - 32));
  }
  if (__p)
    operator delete(__p);
  if (*(_QWORD *)(v55 - 160))
    operator delete(*(void **)(v55 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_2367FE070(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v4 = *(_DWORD *)(a1 + 40) & *(_DWORD *)(a1 + 20) & 0xFFFu;
  v5 = *(_QWORD *)(*(_QWORD *)a1
                 + 8 * (a2 << *(_DWORD *)(a1 + 32))
                 + 8 * ((unint64_t)(*(_DWORD *)(a1 + 20) & 0xFFF) >> *(_DWORD *)(a1 + 36)));
  v6 = v5;
  v7 = BYTE1(v5);
  v8 = WORD1(v5);
  v9 = HIWORD(v5);
  v10 = v6 > v4;
  v11 = v6 <= v4 ? v9 : 0;
  v12 = v10 ? (unint64_t)(*(_DWORD *)(a1 + 20) & 0xFFF) >> *(_DWORD *)(a1 + 36) : v7;
  if ((v11 ^ v8) != 0x1000
    || v12 >= *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16 * a2 + 4)
    || v12 >= *(unsigned int *)(a1 + 84))
  {
    return 0;
  }
  *a3 = v12;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = 1;
  if (v13 && a4)
  {
    do
    {
      v15 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v15 + 1;
      *(_DWORD *)(v13 + 4 * (*(_QWORD *)&v15 & 0xFFFFFLL)) = v12;
      v14 = 1;
      --a4;
    }
    while (a4);
  }
  return v14;
}

uint64_t sub_2367FE12C(uint64_t *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;

  v3 = (char *)operator new(0x10uLL);
  v4 = v3 + 16;
  *(_QWORD *)v3 = 0x1FFFFFFFDFFLL;
  *((_QWORD *)v3 + 1) = 0;
  v84 = a2 + 2048;
  v85 = a2;
  v83 = a2 + 1024;
  v5 = v3 + 16;
  v6 = v3 + 16;
  while (1)
  {
    v8 = *((_DWORD *)v6 - 4);
    v6 -= 16;
    v7 = v8;
    if ((v8 - 511) < 0xFFFFFC00)
      break;
    v9 = *((_DWORD *)v6 + 1);
    if (v9 > 511)
      break;
    v10 = *((_QWORD *)v6 + 1);
    v11 = *a1;
    v12 = *a1 + 24 * v10;
    v13 = (__int16 *)(v12 + 20);
    if (*(_DWORD *)v12 != -1)
    {
      v14 = v11 + 24 * v10;
      v17 = *(_DWORD *)(v14 + 16);
      v15 = (_DWORD *)(v14 + 16);
      v16 = v17;
      if (*v13 < 2)
      {
        v26 = *(_DWORD *)(v11 + 24 * v10 + 4);
        if (v6 < v4)
        {
          *((_DWORD *)v5 - 4) = v26;
          *((_QWORD *)v5 - 1) = v16;
          goto LABEL_64;
        }
        v87 = *a1 + 24 * v10;
        v88 = v15;
        v31 = (v6 - v3) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          sub_2367C3440();
        v33 = v16;
        if ((v4 - v3) >> 3 > v32)
          v32 = (v4 - v3) >> 3;
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
          v34 = (unint64_t)sub_2367CD8AC(v34);
        else
          v35 = 0;
        v39 = v34 + 16 * v31;
        *(_DWORD *)v39 = v26;
        *(_DWORD *)(v39 + 4) = v9;
        *(_QWORD *)(v39 + 8) = v33;
        if (v6 != v3)
        {
          v40 = v34 + 16 * v31;
          do
          {
            v41 = (char *)(v40 - 16);
            *(_OWORD *)(v40 - 16) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v40 -= 16;
          }
          while (v6 != v3);
          goto LABEL_61;
        }
      }
      else
      {
        v18 = v11 + 24 * v10;
        v21 = *(_DWORD *)(v18 + 8);
        v19 = (int *)(v18 + 8);
        v20 = v21;
        v87 = *a1 + 24 * v10;
        v88 = v15;
        if (v6 >= v4)
        {
          v86 = v16;
          v27 = (v6 - v3) >> 4;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60)
            sub_2367C3440();
          if ((v4 - v3) >> 3 > v28)
            v28 = (v4 - v3) >> 3;
          if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v29 = (unint64_t)sub_2367CD8AC(v29);
          else
            v30 = 0;
          v36 = v29 + 16 * v27;
          *(_DWORD *)v36 = v20;
          *(_DWORD *)(v36 + 4) = v9;
          *(_QWORD *)(v36 + 8) = v86;
          if (v6 == v3)
          {
            v38 = (char *)(v29 + 16 * v27);
          }
          else
          {
            v37 = v29 + 16 * v27;
            do
            {
              v38 = (char *)(v37 - 16);
              *(_OWORD *)(v37 - 16) = *((_OWORD *)v6 - 1);
              v6 -= 16;
              v37 -= 16;
            }
            while (v6 != v3);
          }
          v4 = (char *)(v29 + 16 * v30);
          v5 = (char *)(v36 + 16);
          if (v3)
            operator delete(v3);
          v3 = v38;
          v12 = v87;
          v15 = v88;
        }
        else
        {
          *((_DWORD *)v5 - 4) = v20;
          *((_QWORD *)v5 - 1) = v16;
        }
        v42 = *(_DWORD *)(v11 + 24 * v10 + 4);
        v43 = *v19;
        v44 = (*v15 + 1);
        if (v5 < v4)
        {
          *(_DWORD *)v5 = v42;
          *((_DWORD *)v5 + 1) = v43;
          *((_QWORD *)v5 + 1) = v44;
          v5 += 16;
LABEL_64:
          if (*(__int16 *)(v12 + 22) < 2)
          {
            v55 = *(_DWORD *)(v11 + 24 * v10 + 4);
            v56 = (*v15 + 2);
            if (v5 >= v4)
            {
              v62 = (v5 - v3) >> 4;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 60)
                sub_2367C3440();
              if ((v4 - v3) >> 3 > v63)
                v63 = (v4 - v3) >> 3;
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
                v64 = 0xFFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
                v64 = (unint64_t)sub_2367CD8AC(v64);
              else
                v65 = 0;
              v69 = v64 + 16 * v62;
              *(_DWORD *)v69 = v7;
              *(_DWORD *)(v69 + 4) = v55;
              *(_QWORD *)(v69 + 8) = v56;
              if (v5 == v3)
              {
                v71 = (char *)(v64 + 16 * v62);
              }
              else
              {
                v70 = v64 + 16 * v62;
                do
                {
                  v71 = (char *)(v70 - 16);
                  *(_OWORD *)(v70 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v70 -= 16;
                }
                while (v5 != v3);
              }
              v4 = (char *)(v64 + 16 * v65);
              v6 = (char *)(v69 + 16);
              if (v3)
                operator delete(v3);
              v3 = v71;
            }
            else
            {
              *(_DWORD *)v5 = v7;
              *((_DWORD *)v5 + 1) = v55;
              v6 = v5 + 16;
              *((_QWORD *)v5 + 1) = v56;
            }
          }
          else
          {
            v48 = v11 + 24 * v10;
            v51 = *(_DWORD *)(v48 + 12);
            v49 = (int *)(v48 + 12);
            v50 = v51;
            v52 = *(v49 - 2);
            v53 = (*v15 + 2);
            if (v5 >= v4)
            {
              v57 = v15;
              v58 = (v5 - v3) >> 4;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 60)
                sub_2367C3440();
              if ((v4 - v3) >> 3 > v59)
                v59 = (v4 - v3) >> 3;
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
                v60 = 0xFFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              if (v60)
                v60 = (unint64_t)sub_2367CD8AC(v60);
              else
                v61 = 0;
              v66 = v60 + 16 * v58;
              *(_DWORD *)v66 = v50;
              *(_DWORD *)(v66 + 4) = v52;
              *(_QWORD *)(v66 + 8) = v53;
              if (v5 == v3)
              {
                v68 = (char *)(v60 + 16 * v58);
              }
              else
              {
                v67 = v60 + 16 * v58;
                do
                {
                  v68 = (char *)(v67 - 16);
                  *(_OWORD *)(v67 - 16) = *((_OWORD *)v5 - 1);
                  v5 -= 16;
                  v67 -= 16;
                }
                while (v5 != v3);
              }
              v4 = (char *)(v60 + 16 * v61);
              v54 = (char *)(v66 + 16);
              if (v3)
                operator delete(v3);
              v3 = v68;
              v15 = v57;
            }
            else
            {
              *(_DWORD *)v5 = v50;
              *((_DWORD *)v5 + 1) = v52;
              v54 = v5 + 16;
              *((_QWORD *)v5 + 1) = v53;
            }
            v72 = *v49;
            v73 = (*v15 + 3);
            if (v54 >= v4)
            {
              v74 = (v54 - v3) >> 4;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 60)
                sub_2367C3440();
              if ((v4 - v3) >> 3 > v75)
                v75 = (v4 - v3) >> 3;
              if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
                v76 = 0xFFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
                v76 = (unint64_t)sub_2367CD8AC(v76);
              else
                v77 = 0;
              v78 = v76 + 16 * v74;
              *(_DWORD *)v78 = v7;
              *(_DWORD *)(v78 + 4) = v72;
              *(_QWORD *)(v78 + 8) = v73;
              if (v54 == v3)
              {
                v80 = (char *)(v76 + 16 * v74);
              }
              else
              {
                v79 = v76 + 16 * v74;
                do
                {
                  v80 = (char *)(v79 - 16);
                  *(_OWORD *)(v79 - 16) = *((_OWORD *)v54 - 1);
                  v54 -= 16;
                  v79 -= 16;
                }
                while (v54 != v3);
              }
              v4 = (char *)(v76 + 16 * v77);
              v6 = (char *)(v78 + 16);
              if (v3)
                operator delete(v3);
              v3 = v80;
            }
            else
            {
              *(_DWORD *)v54 = v7;
              *((_DWORD *)v54 + 1) = v72;
              v6 = v54 + 16;
              *((_QWORD *)v54 + 1) = v73;
            }
          }
          goto LABEL_122;
        }
        v45 = (v5 - v3) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          sub_2367C3440();
        if ((v4 - v3) >> 3 > v46)
          v46 = (v4 - v3) >> 3;
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v46;
        if (v34)
          v34 = (unint64_t)sub_2367CD8AC(v34);
        else
          v35 = 0;
        v39 = v34 + 16 * v45;
        *(_DWORD *)v39 = v42;
        *(_DWORD *)(v39 + 4) = v43;
        *(_QWORD *)(v39 + 8) = v44;
        if (v5 != v3)
        {
          v47 = v34 + 16 * v45;
          do
          {
            v41 = (char *)(v47 - 16);
            *(_OWORD *)(v47 - 16) = *((_OWORD *)v5 - 1);
            v5 -= 16;
            v47 -= 16;
          }
          while (v5 != v3);
          goto LABEL_61;
        }
      }
      v41 = (char *)v39;
LABEL_61:
      v4 = (char *)(v34 + 16 * v35);
      v5 = (char *)(v39 + 16);
      if (v3)
        operator delete(v3);
      v3 = v41;
      v12 = v87;
      v15 = v88;
      goto LABEL_64;
    }
    if (*(_DWORD *)v13 != (char)*(_DWORD *)v13)
      break;
    v22 = v11 + 24 * v10;
    v24 = *(_DWORD *)(v22 + 8);
    v23 = (_DWORD *)(v22 + 8);
    if (v24 != (char)v24)
      break;
    if (v7 < v9)
    {
      do
      {
        v25 = v7 + 513;
        *(_BYTE *)(v85 + v25) = *(_DWORD *)(v11 + 24 * v10 + 16);
        *(_BYTE *)(v84 + v25) = *v23;
        *(_BYTE *)(v83 + v25) = *(_DWORD *)v13;
        ++v7;
      }
      while (v9 != v7);
    }
LABEL_122:
    v5 = v6;
    if (v3 == v6)
    {
      v81 = 1;
      goto LABEL_125;
    }
  }
  v81 = 0;
  result = 0;
  if (!v3)
    return result;
LABEL_125:
  operator delete(v3);
  return v81;
}

void sub_2367FE76C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2367FE7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  char **v6;
  unint64_t v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = &off_250800498;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 424) = unk_2369207FC;
  *(_OWORD *)(a1 + 440) = xmmword_23692080C;
  *(_OWORD *)(a1 + 456) = unk_23692081C;
  *(_OWORD *)(a1 + 360) = unk_2369207BC;
  *(_OWORD *)(a1 + 376) = xmmword_2369207CC;
  *(_OWORD *)(a1 + 392) = unk_2369207DC;
  *(_OWORD *)(a1 + 408) = xmmword_2369207EC;
  *(_OWORD *)(a1 + 296) = unk_23692077C;
  *(_OWORD *)(a1 + 312) = xmmword_23692078C;
  v6 = (char **)(a1 + 136);
  *(_OWORD *)(a1 + 328) = unk_23692079C;
  *(_OWORD *)(a1 + 344) = xmmword_2369207AC;
  *(_OWORD *)(a1 + 216) = xmmword_23692072C;
  *(_OWORD *)(a1 + 232) = unk_23692073C;
  *(_OWORD *)(a1 + 248) = xmmword_23692074C;
  v7 = 2 * a3 + 4;
  v8 = 40;
  *(_OWORD *)(a1 + 264) = unk_23692075C;
  *(_OWORD *)(a1 + 280) = xmmword_23692076C;
  do
  {
    sub_2367C5284((char **)(a1 + v8), v7);
    v8 += 24;
  }
  while (v8 != 136);
  sub_2367C5284(v6, v7);
  return a1;
}

void sub_2367FE89C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 144) = v4;
    operator delete(v4);
  }
  v5 = 0;
  while (1)
  {
    v6 = *(void **)(v1 + v5 + 112);
    if (v6)
    {
      *(_QWORD *)(v1 + v5 + 120) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -96)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_2367FE8E0(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  for (i = 0; i != -96; i -= 24)
  {
    v4 = *(void **)(a1 + i + 112);
    if (v4)
    {
      *(_QWORD *)(a1 + i + 120) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_2367FE934(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, unsigned int *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int *v31;
  int *v32;
  _DWORD *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  if (*a5 && a5[1])
  {
    v10 = 0;
    do
      bzero((void *)(*((_QWORD *)a5 + 3) + *((_QWORD *)a5 + 2) * v10++), 4 * *a5);
    while (v10 < a5[1]);
  }
  if (a4 >= 1)
  {
    v11 = *((_QWORD *)a5 + 5);
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = *a3;
      v15 = a4;
      v16 = *a3 + ((unint64_t)a4 << 6);
      v17 = *(_QWORD *)(v16 + 40);
      v18 = (_QWORD *)(v16 + 48);
      v19 = (_DWORD *)(v16 + 56);
      v20 = (_DWORD *)(v16 + 60);
      v21 = a2 - 1;
      if (!a2)
        v21 = 0;
      v22 = *(_QWORD *)(a1 + 40);
      v23 = 4 * (*((_QWORD *)a5 + 2) >> 2);
      do
      {
        v24 = (v15 - 1);
        v25 = (_QWORD *)(v14 + (v24 << 6));
        if (v25[5] == v17 && v25[6] == *v18)
        {
          v26 = v14 + (v24 << 6);
          if (*(_DWORD *)(v26 + 56) == *v19 && *(_DWORD *)(v26 + 60) == *v20)
          {
            if (v22)
            {
              v27 = 0;
              v30 = v25 + 2;
              v28 = v25[2];
              v29 = v30[1];
              v31 = (int *)(v29 + v28 * a2);
              v32 = (int *)(v29 + v28 * v21);
              v33 = (_DWORD *)(*((_QWORD *)a5 + 3) + 4 * v12 + 8);
              v34 = v32;
              v35 = v31;
              do
              {
                v37 = *v35++;
                v36 = v37;
                if (v37 >= 0)
                  LODWORD(v38) = v36;
                else
                  v38 = -v36;
                *(v33 - 2) = v38;
                *(v33 - 1) = v36;
                if (v27)
                {
                  v39 = *(v31 - 1);
                  if (a2)
                  {
                    v40 = *(v34 - 1);
                    v41 = *v34;
                  }
                  else
                  {
                    v41 = v39;
                    v40 = v39;
                  }
                }
                else
                {
                  v39 = 0;
                  if (a2)
                  {
                    v40 = 0;
                    v41 = *v32;
                  }
                  else
                  {
                    v41 = 0;
                    v40 = 0;
                  }
                }
                if (v41 >= v39)
                  v42 = v39;
                else
                  v42 = v41;
                if (v39 <= v41)
                  v43 = v41;
                else
                  v43 = v39;
                v44 = v41 + v39 - v40;
                if (v42 > v40)
                  v44 = v43;
                if (v43 < v40)
                  v44 = v42;
                v45 = v36 - v44;
                if (v45 >= 0)
                  LODWORD(v46) = v45;
                else
                  v46 = -v45;
                *v33 = v46;
                v33[1] = v45;
                ++v27;
                v33 = (_DWORD *)((char *)v33 + v23);
                ++v34;
                v31 = v35;
              }
              while (v22 != v27);
            }
            v13 += 4;
          }
        }
        if (v15 < 2)
          break;
        v12 = v13;
        --v15;
      }
      while (v11 > v13);
    }
  }
}

uint64_t sub_2367FEB28(uint64_t result, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, signed int a6, unsigned int a7, unsigned int **a8, _QWORD *a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _DWORD *v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  int v33;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  _BOOL4 v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (!a6)
  {
    if (!a7)
    {
      v16 = 0;
      v14 = 0;
      v12 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v15 = 0;
      v18 = 0;
      goto LABEL_20;
    }
    v9 = *(_DWORD *)(a4 - 4 * a5);
    v12 = v9;
    v10 = v9;
    v11 = v9;
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a4 - 4);
  v10 = v9;
  if (a7)
  {
    v11 = *(int *)(a4 + 4 * ~a5);
    v12 = *(int *)(a4 - 4 * a5);
LABEL_6:
    v13 = 1;
    if (a6 + 1 >= a3)
      v14 = v12;
    else
      v14 = *(int *)(a4 + 4 * (1 - a5));
    goto LABEL_10;
  }
  v13 = 0;
  v11 = v9;
  v12 = v9;
  v14 = v9;
LABEL_10:
  v15 = v10;
  if (a6 >= 2)
    v15 = *(int *)(a4 - 8);
  v16 = v12;
  if (a7 >= 2)
    v16 = *(int *)(a4 - 8 * a5);
  v17 = v13 ^ 1;
  if (a6 + 2 >= a3)
    v17 = 1;
  if ((v17 & 1) != 0)
    v18 = v14;
  else
    v18 = *(int *)(a4 + 4 * (2 - a5));
LABEL_20:
  if (v12 >= 0)
    LODWORD(v19) = v12;
  else
    v19 = -v12;
  a2[3] = a6;
  a2[4] = v19;
  if (v10 >= 0)
    LODWORD(v20) = v10;
  else
    v20 = -v10;
  a2[5] = v20;
  a2[6] = v12;
  v21 = v9 - a2[9];
  a2[7] = v9;
  a2[8] = v21;
  v22 = v10 + v12;
  v23 = v10 + v12 - v11;
  a2[9] = v23;
  a2[10] = v9 - v11;
  a2[11] = v11 - v12;
  a2[12] = v12 - v14;
  a2[13] = v12 - v16;
  a2[14] = v9 - v15;
  v24 = a9[5];
  if (v24)
  {
    v25 = (int *)(a9[3] + a9[2] * a6);
    v26 = a2 + 16;
    do
    {
      v27 = *v25++;
      *v26++ = v27;
      --v24;
    }
    while (v24);
  }
  v28 = *a8;
  v29 = **a8;
  if ((v29 & 0x80000000) != 0)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    v30 = 0;
    v31 = *a8;
    do
    {
      v32 = &v28[6 * v30];
      v33 = v32[1];
      v34 = a2[*((__int16 *)v32 + 10)] <= (int)v32[2];
      v36 = v32[3];
      v35 = v32[4];
      v37 = (a2[*((__int16 *)v31 + 11)] <= v36) | 2;
      if (a2[v29] > v33)
        v37 = v34;
      LODWORD(v30) = v37 + v35;
      v38 = &v28[6 * v30];
      v39 = *v38;
      if ((v39 & 0x80000000) != 0)
        break;
      v40 = &v28[6 * v30];
      v41 = v40[1];
      v42 = a2[*((__int16 *)v40 + 10)] <= (int)v40[2];
      v44 = v40[3];
      v43 = v40[4];
      v45 = (a2[*((__int16 *)v38 + 11)] <= v44) | 2;
      if (a2[v39] > v41)
        v45 = v42;
      v30 = v45 + v43;
      v31 = &v28[6 * v30];
      v29 = *v31;
    }
    while ((v29 & 0x80000000) == 0);
  }
  v46 = 0;
  v47 = &v28[6 * v30];
  v49 = v47[1];
  v48 = v47[2];
  v50 = (int)v47[5];
  *(_DWORD *)result = v47[4];
  *(_DWORD *)(result + 20) = v48;
  switch(v49)
  {
    case 1u:
      v46 = v10;
      break;
    case 2u:
      v46 = v12;
      break;
    case 3u:
      if (v22 >= 0)
        v51 = v10 + v12;
      else
        v51 = v22 + 1;
      goto LABEL_71;
    case 4u:
      v52 = v12 - v11;
      if (v12 - v11 < 0)
        v52 = v11 - v12;
      v53 = v10 - v11;
      if (v23 - v12 < 0)
        v53 = v12 - v23;
      if (v52 >= v53)
        v46 = v12;
      else
        v46 = v10;
      break;
    case 5u:
      if (v9 >= (int)v12)
        v54 = v12;
      else
        v54 = v9;
      if (v9 <= (int)v12)
        v55 = v12;
      else
        v55 = v9;
      v56 = v9 + v12 - v11;
      if (v54 > (int)v11)
        v56 = v55;
      if (v55 >= (int)v11)
        v54 = v56;
      v46 = v54;
      break;
    case 7u:
      v46 = v14;
      break;
    case 8u:
      v46 = v11;
      break;
    case 9u:
      v46 = v15;
      break;
    case 0xAu:
      v57 = __OFADD__(v11, v10);
      v51 = v11 + v10;
      v58 = (v51 < 0) ^ v57;
      goto LABEL_69;
    case 0xBu:
      v51 = v11 + v12;
      v58 = (v11 + v12 < 0) ^ __OFADD__(v11, v12);
      goto LABEL_69;
    case 0xCu:
      v51 = v12 + v14;
      v58 = (v12 + v14 < 0) ^ __OFADD__(v12, v14);
LABEL_69:
      if (v58)
        ++v51;
LABEL_71:
      v46 = v51 >> 1;
      break;
    case 0xDu:
      v59 = 3 * v14 - 2 * v16 + 6 * (int)v12 - v10 + 8 * v10 + v15 + v18;
      v60 = v59 + 8;
      v61 = v59 + 23;
      if (v60 >= 0)
        v61 = v60;
      v46 = v61 >> 4;
      break;
    default:
      break;
  }
  *(_QWORD *)(result + 8) = v46 + v50;
  *(_DWORD *)(result + 16) = v49;
  return result;
}

uint64_t sub_2367FEE64(uint64_t result, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, signed int a6, unsigned int a7, unsigned int **a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t i;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  _DWORD *v62;
  int v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  signed int v69;
  _BOOL4 v70;
  unsigned int v71;
  signed int v72;
  int v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  signed int v77;
  _BOOL4 v78;
  unsigned int v79;
  signed int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  BOOL v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint32x4_t v96;
  int32x4_t v97;

  v10 = a6;
  if (!a6)
  {
    if (!a7)
    {
      v18 = 0;
      v16 = 0;
      v14 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v17 = 0;
      v20 = 0;
      goto LABEL_20;
    }
    v11 = *(_DWORD *)(a4 - 4 * a5);
    v14 = v11;
    v12 = v11;
    v13 = v11;
    goto LABEL_6;
  }
  v11 = *(_DWORD *)(a4 - 4);
  v12 = v11;
  if (a7)
  {
    v13 = *(int *)(a4 + 4 * ~a5);
    v14 = *(int *)(a4 - 4 * a5);
LABEL_6:
    v15 = 1;
    if (a6 + 1 >= a3)
      v16 = v14;
    else
      v16 = *(int *)(a4 + 4 * (1 - a5));
    goto LABEL_10;
  }
  v15 = 0;
  v13 = v11;
  v14 = v11;
  v16 = v11;
LABEL_10:
  v17 = v12;
  if (a6 >= 2)
    v17 = *(int *)(a4 - 8);
  v18 = v14;
  if (a7 >= 2)
    v18 = *(int *)(a4 - 8 * a5);
  v19 = v15 ^ 1;
  if (a6 + 2 >= a3)
    v19 = 1;
  if ((v19 & 1) != 0)
    v20 = v16;
  else
    v20 = *(int *)(a4 + 4 * (2 - a5));
LABEL_20:
  v21 = 0;
  if (v14 >= 0)
    LODWORD(v22) = v14;
  else
    v22 = -v14;
  a2[3] = a6;
  a2[4] = v22;
  if (v12 >= 0)
    LODWORD(v23) = v12;
  else
    v23 = -v12;
  v24 = v11 - a2[9];
  a2[5] = v23;
  a2[6] = v14;
  a2[7] = v11;
  a2[8] = v24;
  v25 = v12 + v14;
  v26 = v12 + v14 - v13;
  a2[9] = v26;
  a2[10] = v11 - v13;
  a2[11] = v13 - v14;
  a2[12] = v14 - v16;
  v27 = a3 + 2;
  if ((a7 & 1) != 0)
    v28 = a3 + 2;
  else
    v28 = 0;
  v29 = v28 + a6;
  if (a3 - 1 <= a6)
    v30 = v28 + a6;
  else
    v30 = v29 + 1;
  a2[13] = v14 - v18;
  a2[14] = v11 - v17;
  if (a6)
    v31 = v29 - 1;
  else
    v31 = v28;
  for (i = 40; i != 136; i += 24)
  {
    v33 = (*(_DWORD *)(*(_QWORD *)(a10 + i) + 4 * v30)
                       + *(_DWORD *)(*(_QWORD *)(a10 + i) + 4 * v29)
                       + *(_DWORD *)(*(_QWORD *)(a10 + i) + 4 * v31));
    v34 = __clz(v33 + 1) ^ 0x3F;
    if (v34 <= 5)
      LOBYTE(v34) = 5;
    v96.i32[v21] = ((*(_DWORD *)(a10 + 4 * (v33 >> (v34 - 5)) + 216)
                                 * *(_DWORD *)(a10 + v21 * 4 + 200)) >> (v34 - 5))
                 + 4;
    ++v21;
  }
  v35 = 8 * v14;
  v36 = 8 * v12;
  v37 = 8 * v16;
  if (a6)
  {
    if ((a7 & 1) != 0)
      v38 = 0;
    else
      v38 = v27;
    v39 = *(_QWORD *)(a10 + 136);
    v40 = *(int *)(v39 + 4 * (v10 + v38) - 4);
  }
  else
  {
    v40 = 0;
    v39 = *(_QWORD *)(a10 + 136);
  }
  v41 = 0;
  v42 = *(int *)(v39 + 4 * v29);
  v43 = *(int *)(v39 + 4 * v31);
  v44 = v40 + v42;
  v45 = *(int *)(v39 + 4 * v30);
  if (v42 >= 0)
    v46 = v42;
  else
    v46 = -v42;
  if (v40 >= 0)
    v47 = v40;
  else
    v47 = -v40;
  if (v46 <= v47)
    v48 = v40;
  else
    v48 = v42;
  if (v43 >= 0)
    v49 = v43;
  else
    v49 = -v43;
  if (v48 >= 0)
    v50 = v48;
  else
    v50 = -v48;
  if (v49 > v50)
    v48 = v43;
  if (v45 >= 0)
    v51 = v45;
  else
    v51 = -v45;
  if (v48 >= 0)
    v52 = v48;
  else
    v52 = -v48;
  if (v51 > v52)
    LODWORD(v48) = v45;
  a2[15] = v48;
  v53 = *(int *)(a10 + 176);
  v54 = v35 - (((v44 + v45) * *(int *)(a10 + 172)) >> 5);
  *(_QWORD *)a10 = v37 - v35 + v36;
  *(_QWORD *)(a10 + 8) = v54;
  v55 = v35
      - ((*(int *)(a10 + 180) * (uint64_t)(int)v43
        + *(int *)(a10 + 184) * (uint64_t)(int)v42
        + *(int *)(a10 + 188) * (uint64_t)(int)v45
        + 8 * ((v18 - v14) * *(int *)(a10 + 192) + (v13 - v12) * *(int *)(a10 + 196))) >> 5);
  *(_QWORD *)(a10 + 16) = v36 - (((v44 + v43) * v53) >> 5);
  *(_QWORD *)(a10 + 24) = v55;
  v97 = (int32x4_t)vshlq_u32(v96, (uint32x4_t)vnegq_s32(vdupq_n_s32((__clz(vaddvq_s32((int32x4_t)v96)) ^ 0x1F) - 4)));
  v56 = vaddvq_s32(v97);
  v57 = (v56 >> 1) - 1;
  do
  {
    v57 += *(_QWORD *)(a10 + 8 * v41) * v97.u32[v41];
    ++v41;
  }
  while (v41 != 4);
  v58 = v43 ^ v42 | v40 ^ v42;
  if (v37 <= v35)
    v59 = 8 * v14;
  else
    v59 = 8 * v16;
  if (v36 > v59)
    v59 = 8 * v12;
  if (v35 >= v37)
    v35 = 8 * v16;
  if (v35 < v36)
    v36 = v35;
  if ((v57 * *(unsigned int *)(a10 + 4 * (v56 - 1) + 216)) >> 24 < v59)
    v59 = (v57 * *(unsigned int *)(a10 + 4 * (v56 - 1) + 216)) >> 24;
  if (v36 <= v59)
    v36 = v59;
  if (v58 > 0)
    v36 = (v57 * *(unsigned int *)(a10 + 4 * (v56 - 1) + 216)) >> 24;
  *(_QWORD *)(a10 + 32) = v36;
  v60 = a9[5];
  if (v60)
  {
    v61 = (int *)(a9[3] + a9[2] * v10);
    v62 = a2 + 16;
    do
    {
      v63 = *v61++;
      *v62++ = v63;
      --v60;
    }
    while (v60);
  }
  v64 = *a8;
  v65 = **a8;
  if ((v65 & 0x80000000) != 0)
  {
    LODWORD(v66) = 0;
  }
  else
  {
    v66 = 0;
    v67 = v64;
    do
    {
      v68 = &v64[6 * v66];
      v69 = v68[1];
      v70 = a2[*((__int16 *)v68 + 10)] <= (int)v68[2];
      v72 = v68[3];
      v71 = v68[4];
      v73 = (a2[*((__int16 *)v67 + 11)] <= v72) | 2;
      if (a2[v65] > v69)
        v73 = v70;
      LODWORD(v66) = v73 + v71;
      v74 = &v64[6 * v66];
      v75 = *v74;
      if ((v75 & 0x80000000) != 0)
        break;
      v76 = &v64[6 * v66];
      v77 = v76[1];
      v78 = a2[*((__int16 *)v76 + 10)] <= (int)v76[2];
      v80 = v76[3];
      v79 = v76[4];
      v81 = (a2[*((__int16 *)v74 + 11)] <= v80) | 2;
      if (a2[v75] > v77)
        v81 = v78;
      v66 = v81 + v79;
      v67 = &v64[6 * v66];
      v65 = *v67;
    }
    while ((v65 & 0x80000000) == 0);
  }
  v82 = &v64[6 * v66];
  v84 = v82[1];
  v83 = v82[2];
  v85 = (int)v82[5];
  *(_DWORD *)result = v82[4];
  *(_DWORD *)(result + 20) = v83;
  switch(v84)
  {
    case 1u:
      break;
    case 2u:
      v12 = v14;
      break;
    case 3u:
      if (v25 >= 0)
        v86 = v12 + v14;
      else
        v86 = v25 + 1;
      goto LABEL_133;
    case 4u:
      v87 = v14 - v13;
      if (v14 - v13 < 0)
        v87 = v13 - v14;
      v88 = v12 - v13;
      if (v26 - v14 < 0)
        v88 = v14 - v26;
      if (v87 >= v88)
        v12 = v14;
      break;
    case 5u:
      if (v11 >= (int)v14)
        LODWORD(v12) = v14;
      else
        LODWORD(v12) = v11;
      if (v11 <= (int)v14)
        v89 = v14;
      else
        v89 = v11;
      v90 = v11 + v14 - v13;
      if ((int)v12 > (int)v13)
        v90 = v89;
      if (v89 >= (int)v13)
        LODWORD(v12) = v90;
      v12 = (int)v12;
      break;
    case 6u:
      v12 = (v36 + 3) >> 3;
      break;
    case 7u:
      v12 = v16;
      break;
    case 8u:
      v12 = v13;
      break;
    case 9u:
      v12 = v17;
      break;
    case 0xAu:
      v91 = __OFADD__(v13, v12);
      v86 = v13 + v12;
      v92 = (v86 < 0) ^ v91;
      goto LABEL_131;
    case 0xBu:
      v86 = v13 + v14;
      v92 = (v13 + v14 < 0) ^ __OFADD__(v13, v14);
      goto LABEL_131;
    case 0xCu:
      v86 = v14 + v16;
      v92 = (v14 + v16 < 0) ^ __OFADD__(v14, v16);
LABEL_131:
      if (v92)
        ++v86;
LABEL_133:
      v12 = v86 >> 1;
      break;
    case 0xDu:
      v93 = 3 * v16 - 2 * v18 + 6 * (int)v14 - v12 + 8 * v12 + v17 + v20;
      v94 = v93 + 8;
      v95 = v93 + 23;
      if (v94 >= 0)
        v95 = v94;
      v12 = v95 >> 4;
      break;
    default:
      v12 = 0;
      break;
  }
  *(_QWORD *)(result + 8) = v12 + v85;
  *(_DWORD *)(result + 16) = v84;
  return result;
}

void sub_2367FF418()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_2367FF42C(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a2 + 72))(a2, a1, a1 + 2))
  {
    v5 = a1[3];
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(a2, 5, 16, &v5);
    if (!(_DWORD)result)
    {
      a1[3] = v5;
      v5 = a1[4];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(a2, 5, 10, &v5);
      if (!(_DWORD)result)
      {
        a1[4] = v5;
        v5 = a1[5];
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(a2, 5, 7, &v5);
        if (!(_DWORD)result)
        {
          a1[5] = v5;
          v5 = a1[6];
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(a2, 5, 7, &v5);
          if (!(_DWORD)result)
          {
            a1[6] = v5;
            v5 = a1[7];
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(a2, 5, 7, &v5);
            if (!(_DWORD)result)
            {
              a1[7] = v5;
              v5 = a1[8];
              result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 40))(a2, 5, 0, &v5);
              if (!(_DWORD)result)
              {
                a1[8] = v5;
                v5 = a1[9];
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 40))(a2, 5, 0, &v5);
                if (!(_DWORD)result)
                {
                  a1[9] = v5;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, 4, 13, a1 + 10);
                  if (!(_DWORD)result)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, 4, 12, a1 + 11);
                    if (!(_DWORD)result)
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, 4, 12, a1 + 12);
                      if (!(_DWORD)result)
                        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, 4, 12, a1 + 13);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 80))(a2, a1);
    return 0;
  }
  return result;
}

uint64_t sub_2367FF658(uint64_t a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = &off_250800498;
  *(_QWORD *)a1 = &off_2507FF4D8;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367FF42C((_DWORD *)(a1 + 16), (uint64_t)&v3);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 16))(a1, &v3);
  return a1;
}

void sub_2367FF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2367D6C98((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2367FF720(uint64_t *a1, unint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  char v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int v19;
  int v20;
  int v21;
  __int16 v23;

  v2 = 0;
  v3 = 0;
  v4 = *a1;
  v5 = (a1[1] - *a1) >> 6;
  v23 = 1;
  v6 = a1[9];
  v7 = v4 + (v6 << 6) + 48;
  v8 = v4 + 60;
  while (1)
  {
    v9 = v2;
    v10 = *((unsigned __int8 *)&v23 + v3);
    if (*((_BYTE *)&v23 + v3))
      v11 = 3;
    else
      v11 = 0;
    v12 = v6;
    if (v6 < v5)
    {
      v13 = (unint64_t *)v7;
      v12 = v6;
      while (*(v13 - 1) <= a2 && *v13 <= a2)
      {
        v13 += 8;
        if (v5 == ++v12)
          goto LABEL_27;
      }
    }
    v15 = v5 - v12;
    if (v5 > v12)
      break;
LABEL_27:
    v2 = 1;
    v3 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  v16 = a2 << v11;
  v17 = (int *)(v8 + (v12 << 6));
  while (1)
  {
    if (*(_QWORD *)(v17 - 5) && *(_QWORD *)(v17 - 3) != 0)
    {
      v20 = *(v17 - 1);
      v19 = *v17;
      v21 = *v17 >= v20 ? *(v17 - 1) : *v17;
      if (v10 == v21 > 2)
      {
        if (v20 > v19)
          LOBYTE(v19) = *(v17 - 1);
        if (!(v16 >> v19))
          return 1;
      }
    }
    v17 += 16;
    if (!--v15)
      goto LABEL_27;
  }
}

uint64_t sub_2367FF81C(uint64_t a1)
{
  uint64_t (**v3)();
  __int128 v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 88) = &off_2507FF438;
  *(_OWORD *)(a1 + 108) = xmmword_2368AF590;
  v3 = &off_2507FF550;
  v4 = xmmword_2368AF3F0;
  v5 = 0;
  sub_2367CB9F8(a1 + 88, (uint64_t)&v3);
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void sub_2367FF894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;
  void *v13;

  v12 = *(void **)(v10 + 56);
  if (v12)
  {
    *(_QWORD *)(v10 + 64) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v10 + 32);
  if (v13)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  a10 = (void **)(v10 + 8);
  sub_2367C4718(&a10);
  sub_2367C2F38((uint64_t *)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2367FF8D8(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = **(_QWORD **)a1;
    v4 = *v2;
    for (i = v2[1]; v3 < (i - v4) >> 6; i = v2[1])
    {
      v6 = (unsigned int *)(v4 + (v3 << 6));
      if (*v6 && v6[1])
      {
        v7 = 0;
        do
          bzero((void *)(*((_QWORD *)v6 + 3) + *((_QWORD *)v6 + 2) * v7++), 4 * *v6);
        while (v7 < v6[1]);
        v2 = *(uint64_t **)(a1 + 8);
        v4 = *v2;
      }
      ++v3;
    }
  }
  return a1;
}

uint64_t sub_2367FF970(unint64_t *a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, int a6, uint64_t *a7, _BYTE *a8, uint64_t *a9)
{
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t *v20;
  int64x2_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (**v35)(_QWORD);
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v79;
  uint64_t v80;
  _QWORD v83[2];
  _BYTE v84[56];
  _BYTE v85[24];
  void **v86[2];
  int v87;
  uint64_t v88;
  _BYTE v89[144];
  unint64_t v90[3];
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  _QWORD v94[2];
  char v95;
  unint64_t v96;

  v15 = *(_QWORD *)(a2 + 8);
  v16 = v15 - *(_QWORD *)a2;
  if (v15 == *(_QWORD *)a2)
  {
    v17 = 0;
  }
  else
  {
    if (v16 < 0)
      sub_2367C3440();
    v17 = (int32x2_t *)sub_2367CA1FC(v16 >> 6);
    bzero(v17, v16 >> 3);
    if (v16 >> 3)
    {
      v18 = 0;
      v19 = v16 >> 6;
      if ((unint64_t)(v16 >> 6) <= 1)
        v19 = 1;
      v20 = (int64x2_t *)(*(_QWORD *)a2 + 40);
      do
      {
        v21 = *v20;
        v20 += 4;
        v17[v18++] = vmovn_s64(v21);
      }
      while (v19 != v18);
    }
  }
  sub_2367FF658((uint64_t)v83);
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    goto LABEL_115;
  if (a3)
    v22 = (_QWORD *)a3;
  else
    v22 = v83;
  v23 = sub_2367F232C((uint64_t)a1, (uint64_t)v22);
  if (!(_DWORD)v23)
  {
    v25 = a1[3];
    v24 = a1[4];
    v26 = 8 * (a1[2] - v24 + a1[5]) - a1[1];
    a1[7] = v26;
    v27 = 8 * (v25 - v24) + 64;
    if (a3)
      v28 = (_QWORD *)a3;
    else
      v28 = v83;
    if (a3)
      v29 = (_BYTE *)(a3 + 72);
    else
      v29 = v85;
    if (v26 > v27)
    {
      if (a3)
        v30 = (_QWORD *)a3;
      else
        v30 = v83;
      v31 = v30[10];
      v32 = v28[9];
      if (v31 != v32)
      {
        v33 = (void (***)(_QWORD))(v31 - 72);
        v34 = (void (***)(_QWORD))(v31 - 72);
        do
        {
          v35 = *v34;
          v34 -= 9;
          (*v35)(v33);
          v36 = v33 == (void (***)(_QWORD))v32;
          v33 = v34;
        }
        while (!v36);
      }
      v30[10] = v32;
      if ((_BYTE *)(a2 + 24) != v29)
        sub_2367E2A68(a2 + 24, v28[9], v32, 0x8E38E38E38E38E39 * ((v32 - v28[9]) >> 3));
      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      if (v37 != *(_QWORD *)a2)
      {
        v39 = 0;
        do
        {
          v40 = (unsigned int *)(v38 + (v39 << 6));
          if (*v40 && v40[1])
          {
            v41 = 0;
            do
              bzero((void *)(*((_QWORD *)v40 + 3) + *((_QWORD *)v40 + 2) * v41++), 4 * *v40);
            while (v41 < v40[1]);
            v38 = *(_QWORD *)a2;
            v37 = *(_QWORD *)(a2 + 8);
          }
          ++v39;
        }
        while (v39 < (v37 - v38) >> 6);
      }
      v23 = 0xFFFFFFFFLL;
      goto LABEL_121;
    }
    if ((_BYTE *)(a2 + 24) != v29)
    {
      v42 = v83;
      if (a3)
        v42 = (_QWORD *)a3;
      sub_2367E2A68(a2 + 24, v28[9], v42[10], 0x8E38E38E38E38E39 * ((uint64_t)(v42[10] - v28[9]) >> 3));
    }
    v44 = *(_QWORD *)(a2 + 24);
    v43 = *(_QWORD *)(a2 + 32);
    while (v44 != v43)
    {
      v23 = sub_236802D28(v44, (uint64_t *)a2);
      if ((_DWORD)v23)
        goto LABEL_121;
      v44 += 72;
    }
    if (*(_BYTE *)(a2 + 80))
    {
      v23 = 1;
      goto LABEL_121;
    }
    v23 = sub_2367FF720((uint64_t *)a2, a5[1]);
    if (!(_DWORD)v23)
    {
      v45 = *(_QWORD *)(a2 + 8);
      v46 = v45 - *(_QWORD *)a2;
      if (v45 == *(_QWORD *)a2)
        goto LABEL_115;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = a9;
      v51 = v46 >> 6;
      if ((unint64_t)(v46 >> 6) <= 1)
        v52 = 1;
      else
        v52 = v46 >> 6;
      v53 = (unint64_t *)(*(_QWORD *)a2 + 48);
      while (1)
      {
        v54 = *(v53 - 1);
        if (v54 && *v53)
        {
          if (v49 >= *(_QWORD *)(a2 + 72) && (v54 > *a5 || *v53 > *a5))
          {
LABEL_67:
            if (!v47)
              goto LABEL_115;
            v79 = v48;
            v96 = 0;
            v94[0] = &v96;
            v94[1] = a2;
            v95 = 1;
            v91 = 0;
            v92 = 0;
            v93 = 0;
            memset(v90, 0, sizeof(v90));
            sub_2367FF81C((uint64_t)v89);
            v56 = v83;
            if (a3)
              v56 = (_QWORD *)a3;
            if (*((_BYTE *)v56 + 8))
            {
              v23 = 1;
              if (a7 && a8 && a9 && *a7 != a7[1])
              {
LABEL_90:
                sub_2367C4794((uint64_t)v86, (uint64_t)a8, a1, v79);
                v64 = (void *)operator new();
                bzero(v64, 0xC00uLL);
                v65 = v96;
                if (v96 < v51)
                {
                  v66 = v84;
                  if (a3)
                    v66 = (_BYTE *)(a3 + 16);
                  v80 = (uint64_t)v66;
                  do
                  {
                    v67 = *(_QWORD *)a2 + (v65 << 6);
                    v68 = *(_QWORD *)(v67 + 40);
                    if (v68)
                    {
                      v69 = *(_QWORD *)(v67 + 48);
                      if (v69)
                      {
                        if (v65 >= *(_QWORD *)(a2 + 72) && (v68 > *a5 || v69 > *a5))
                          break;
                        v23 = sub_2367F95CC(a1, (uint64_t)v86, v50, a7, v80, v65, a4, (uint64_t)v64, (uint64_t *)a2);
                        if ((_DWORD)v23)
                          goto LABEL_106;
                        v72 = a1[3];
                        v71 = a1[4];
                        v73 = 8 * (a1[2] - v71 + a1[5]) - a1[1];
                        a1[7] = v73;
                        if (v73 > 8 * (v72 - v71) + 64)
                        {
                          v23 = 1;
                          goto LABEL_106;
                        }
                        v65 = v96;
                      }
                    }
                    v96 = ++v65;
                  }
                  while (v65 < v51);
                }
                v95 = 0;
                v23 = v87 != 1245184;
LABEL_106:
                MEMORY[0x23B7F8F48](v64, 0x1000C40BD1F2613);
                v74 = v88;
                v88 = 0;
                if (v74)
                {
                  v75 = -*(_QWORD *)(v74 - 24);
                  do
                    v76 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v76 + v75, &qword_2564313D8));
                  free(*(void **)(v74 - 32));
                }
              }
              goto LABEL_110;
            }
            v57 = 0;
            v58 = (unint64_t *)(*(_QWORD *)a2 + 48);
            v59 = 1024;
            while (1)
            {
              v60 = *(v58 - 1);
              if (v57 >= *(_QWORD *)(a2 + 72))
              {
                v61 = *v58;
                if (v60 > *a5 || v61 > *a5)
                {
LABEL_84:
                  if (v59 >= 0x100000)
                    v63 = 0x100000;
                  else
                    v63 = v59;
                  v23 = sub_2367F8130(a1, (uint64_t *)&v91, v63);
                  if (!(_DWORD)v23)
                  {
                    v23 = sub_2367CC178(a1, (0xCCCCCCCCCCCCCCCDLL * ((v92 - v91) >> 3) + 1) >> 1, (uint64_t)v89, v90, 0);
                    if (!(_DWORD)v23)
                    {
                      a7 = (uint64_t *)&v91;
                      a8 = v89;
                      v50 = (uint64_t *)v90;
                      goto LABEL_90;
                    }
                  }
LABEL_110:
                  sub_2367C4C94((uint64_t)v89);
                  if (v90[0])
                    operator delete((void *)v90[0]);
                  if (v91)
                  {
                    v92 = v91;
                    operator delete(v91);
                  }
                  sub_2367FF8D8((uint64_t)v94);
                  if (!(_DWORD)v23)
                  {
LABEL_115:
                    if (a6)
                    {
                      if (a3)
                        v77 = (_BYTE *)(a3 + 16);
                      else
                        v77 = v84;
                      sub_23680008C(a2, (uint64_t)v77, 0);
                    }
                    v23 = *(unsigned __int8 *)(a2 + 80);
                  }
                  goto LABEL_121;
                }
              }
              else
              {
                v61 = *v58;
              }
              v59 += v61 * v60;
              ++v57;
              v58 += 8;
              if (v52 == v57)
                goto LABEL_84;
            }
          }
          if (v54 > v48)
            v48 = *(v53 - 1);
          ++v47;
        }
        ++v49;
        v53 += 8;
        if (v52 == v49)
          goto LABEL_67;
      }
    }
  }
LABEL_121:
  v83[0] = &off_2507FF4D8;
  v86[0] = (void **)v85;
  sub_2367D6C98(v86);
  if (v17)
    operator delete(v17);
  return v23;
}

void sub_23680008C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  char v14[24];
  uint64_t v15;
  __int16 v16;
  void **v17;

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) != v3)
  {
    while (1)
    {
      v11 = &off_2508004C0;
      v7 = *(_OWORD *)(v3 - 64);
      v13 = *(_QWORD *)(v3 - 48);
      v12 = v7;
      memset(v14, 0, sizeof(v14));
      sub_2367E30AC(v14, *(_QWORD *)(v3 - 40), *(_QWORD *)(v3 - 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 - 32) - *(_QWORD *)(v3 - 40)) >> 3));
      v8 = *(_QWORD *)(v3 - 16);
      v16 = *(_WORD *)(v3 - 8);
      v15 = v8;
      if (sub_236801EF8((uint64_t)&v11, (uint64_t *)a1, a2, a3))
        break;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void (***)(uint64_t))(v9 - 72);
      v9 -= 72;
      (*v10)(v9);
      *(_QWORD *)(a1 + 32) = v9;
      v11 = &off_2508004C0;
      v17 = (void **)v14;
      sub_2367D78F8(&v17);
      v3 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(a1 + 24) == v3)
        return;
    }
    *(_BYTE *)(a1 + 80) = 1;
    v11 = &off_2508004C0;
    v17 = (void **)v14;
    sub_2367D78F8(&v17);
  }
}

void sub_2368001B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2367D78F8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2368001CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  int v12;
  char *v13;
  __int128 *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int64x2_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  _BYTE v42[24];
  char *v43;
  __int128 *v44;
  int v45;

  v6 = 0uLL;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  *(_QWORD *)&v39 = a2;
  *((_QWORD *)&v39 + 1) = a3;
  LODWORD(v40) = a4;
  *((_QWORD *)&v40 + 1) = 0;
  v7 = 0uLL;
  v8 = 0uLL;
  v41 = 0;
  if (a5 < 1)
  {
LABEL_19:
    *(_DWORD *)(a1 + 88) = 0;
    v36 = 0uLL;
    v37 = 0uLL;
    *(int64x2_t *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v7;
    v38 = 0uLL;
    v32 = v39;
    v33 = v40;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v32;
    *(_OWORD *)(a1 + 64) = v33;
    *(_BYTE *)(a1 + 80) = v41;
  }
  else
  {
    v12 = 0;
    while (1)
    {
      sub_2367DA410((uint64_t)v42, a2, a3);
      if (v45)
        break;
      v34 = *(_OWORD *)v42;
      v13 = v43;
      v35 = *(_QWORD *)&v42[16];
      v14 = v44;
      v15 = (_QWORD *)v36.i64[1];
      if (v36.i64[1] >= (unint64_t)v37)
      {
        v17 = (v36.i64[1] - v36.i64[0]) >> 6;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 58)
          sub_2367C3440();
        v19 = v37 - v36.i64[0];
        if ((uint64_t)(v37 - v36.i64[0]) >> 5 > v18)
          v18 = v19 >> 5;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
          v20 = 0x3FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v44 = &v37;
        v21 = (char *)sub_2367E42EC(v20);
        v22 = &v21[64 * v17];
        *(_QWORD *)v42 = v21;
        *(_QWORD *)&v42[8] = v22;
        v43 = &v21[64 * v23];
        *(_OWORD *)v22 = v34;
        *((_QWORD *)v22 + 2) = v35;
        *((_QWORD *)v22 + 3) = v13;
        *((_QWORD *)v22 + 4) = v14;
        *((_QWORD *)v22 + 5) = a2;
        *((_QWORD *)v22 + 6) = a3;
        *((_QWORD *)v22 + 7) = 0;
        v16 = v22 + 64;
        *(_QWORD *)&v42[16] = v22 + 64;
        v24 = v36.i64[1];
        v25 = v36.i64[0];
        v26 = *(_QWORD *)&v42[8];
        if (v36.i64[1] == v36.i64[0])
        {
          v30 = vdupq_n_s64(v36.u64[1]);
        }
        else
        {
          do
          {
            v27 = *(_OWORD *)(v24 - 64);
            *(_QWORD *)(v26 - 48) = *(_QWORD *)(v24 - 48);
            *(_OWORD *)(v26 - 64) = v27;
            v28 = *(_QWORD *)(v24 - 40);
            *(_QWORD *)(v24 - 40) = 0;
            *(_QWORD *)(v26 - 40) = v28;
            *(_QWORD *)(v26 - 32) = *(_QWORD *)(v24 - 32);
            v29 = *(_OWORD *)(v24 - 24);
            *(_QWORD *)(v26 - 8) = *(_QWORD *)(v24 - 8);
            *(_OWORD *)(v26 - 24) = v29;
            v26 -= 64;
            v24 -= 64;
          }
          while (v24 != v25);
          v30 = v36;
          v16 = *(_QWORD **)&v42[16];
        }
        v36.i64[0] = v26;
        v36.i64[1] = (uint64_t)v16;
        *(int64x2_t *)&v42[8] = v30;
        v31 = (char *)v37;
        *(_QWORD *)&v37 = v43;
        v43 = v31;
        *(_QWORD *)v42 = v30.i64[0];
        sub_2367E4320((uint64_t)v42);
      }
      else
      {
        *(_OWORD *)v36.i64[1] = *(_OWORD *)v42;
        v15[2] = v35;
        v15[3] = v13;
        v15[4] = v14;
        v15[5] = a2;
        v15[6] = a3;
        v15[7] = 0;
        v16 = v15 + 8;
      }
      v36.i64[1] = (uint64_t)v16;
      if (++v12 == a5)
      {
        v6 = v36;
        v7 = v37;
        v8 = v38;
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a1 + 88) = v45;
  }
  *(_QWORD *)v42 = (char *)&v37 + 8;
  sub_2367D6C98((void ***)v42);
  *(_QWORD *)v42 = &v36;
  sub_2367D6D24((void ***)v42);
}

void sub_236800420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  va_list va;

  va_start(va, a5);
  if (v5)
  {
    v7 = -*(_QWORD *)(v5 - 24);
    do
      v8 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v8 + v7, &qword_2564313D8));
    free(*(void **)(v5 - 32));
  }
  sub_2367DC5FC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23680046C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v4 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = *(uint64_t **)a1;
    if (v5 != v4)
    {
      do
      {
        v7 = v5 - 8;
        sub_2367C2F38(v5 - 5);
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *(uint64_t **)a1;
    }
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_2367E3038((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return a1;
}

BOOL sub_236800534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), _DWORD *(*)(_DWORD *, unsigned int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236800D18, sub_2368005C8, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_2368005C8(v6, i);
  return 0;
}

_DWORD *sub_2368005C8(_DWORD *result, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int32x2_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  char v38;
  char v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x2x2_t v44;
  int32x4_t v45;
  float32x2x2_t v46;
  int32x4_t v47;
  float *v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  char v61;
  char v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x2x2_t v67;
  int32x4_t v68;
  float32x2x2_t v69;
  int32x4_t v70;
  float *v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _DWORD *v79;
  _DWORD *v80;
  BOOL v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  char v85;
  unint64_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  _DWORD *v109;
  char *v110;
  char *v111;
  char *v112;
  char v113;
  _DWORD *v114;
  char v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  float32x2x2_t v120;
  int32x4_t v121;
  float32x2x2_t v122;
  int32x4_t v123;
  float *v124;
  uint64_t v125;
  float *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  _DWORD *v131;
  char *v132;
  char *v133;
  char *v134;
  char v135;
  _DWORD *v136;
  char v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  float32x2x2_t v142;
  int32x4_t v143;
  float32x2x2_t v144;
  int32x4_t v145;
  float *v146;
  uint64_t v147;
  float *v148;
  uint64_t i;
  uint64_t v150;
  char v151;
  float32x2x2_t v152;
  int32x4_t v153;
  float *v154;
  char v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _DWORD *v169;
  uint64_t v170;
  unint64_t v171;
  int *v172;
  _DWORD *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  BOOL v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD v195[320];
  _DWORD v196[72];
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*((_QWORD *)result + 1);
  v3 = 8 * a2;
  v4 = *v2;
  v5 = (_QWORD *)v2[1];
  v6 = *(_QWORD *)(*v2 + 48) - v3;
  v7 = 8;
  if (v6 < 8)
    v7 = *(_QWORD *)(*v2 + 48) - 8 * a2;
  v193 = 8 * a2;
  v194 = v7;
  if (v5[5] >= 0x11uLL && v6 >= 8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(v4 + 16);
    v12 = v11 >> 2;
    v13 = v5[2];
    v14 = v5[3];
    v15 = v13 >> 2;
    v16 = v2[2];
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    v19 = v17 >> 2;
    v20 = v14 + v13 * v3;
    v21 = *(_QWORD *)(v4 + 24) + v11 * v3;
    v22 = v18 + v17 * v3;
    result = v196;
    v23 = (_DWORD *)(v21 + 32);
    v24 = vdup_n_s32(0x55555556u);
    v25.i64[0] = 0x200000002;
    v25.i64[1] = 0x200000002;
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    v27.i64[0] = 0x100000001;
    v27.i64[1] = 0x100000001;
    do
    {
      v28 = 0;
      v29 = v20 + 4 * v10;
      v30 = 1;
      do
      {
        v31 = 0;
        v32 = v30;
        v33 = v29 + 4 * v28 * v15;
        v34 = v29 + 4 * (v28 | 1) * v15;
        v35 = v29 + 4 * (v28 | 2) * v15;
        v36 = v29 + 4 * (v28 | 3) * v15;
        v37 = &v195[v28 + 256];
        v38 = 1;
        do
        {
          v39 = v38;
          v40 = *(int32x4_t *)(v33 + 4 * v31);
          v41 = *(int32x4_t *)(v34 + 4 * v31);
          v42 = *(int32x4_t *)(v35 + 4 * v31);
          v43 = *(int32x4_t *)(v36 + 4 * v31);
          v44 = (float32x2x2_t)vzip1q_s32(v40, v42);
          v45 = vzip1q_s32(v41, v43);
          v46 = (float32x2x2_t)vzip2q_s32(v40, v42);
          v47 = vzip2q_s32(v41, v43);
          v48 = (float *)&v37[8 * v31];
          v49 = 32 * v31;
          vst2_f32(v48, v44);
          *(int32x4_t *)((char *)v37 + (v49 | 0x20)) = vzip2q_s32((int32x4_t)v44, v45);
          v50 = (float *)((char *)v37 + (v49 | 0x40));
          vst2_f32(v50, v46);
          *(int32x4_t *)((char *)v37 + (v49 | 0x60)) = vzip2q_s32((int32x4_t)v46, v47);
          v31 = 4;
          v38 = 0;
        }
        while ((v39 & 1) != 0);
        v30 = 0;
        v28 = 4;
      }
      while ((v32 & 1) != 0);
      v51 = 0;
      v52 = v21 + 4 * v10;
      v53 = 1;
      do
      {
        v54 = 0;
        v55 = v53;
        v56 = v52 + 4 * v51 * v12;
        v57 = v52 + 4 * (v51 | 1) * v12;
        v58 = v52 + 4 * (v51 | 2) * v12;
        v59 = v52 + 4 * (v51 | 3) * v12;
        v60 = &v196[v51];
        v61 = 1;
        do
        {
          v62 = v61;
          v63 = *(int32x4_t *)(v56 + 4 * v54);
          v64 = *(int32x4_t *)(v57 + 4 * v54);
          v65 = *(int32x4_t *)(v58 + 4 * v54);
          v66 = *(int32x4_t *)(v59 + 4 * v54);
          v67 = (float32x2x2_t)vzip1q_s32(v63, v65);
          v68 = vzip1q_s32(v64, v66);
          v69 = (float32x2x2_t)vzip2q_s32(v63, v65);
          v70 = vzip2q_s32(v64, v66);
          v71 = (float *)&v60[8 * v54];
          v72 = 32 * v54;
          vst2_f32(v71, v67);
          *(int32x4_t *)((char *)v60 + (v72 | 0x20)) = vzip2q_s32((int32x4_t)v67, v68);
          v73 = (float *)((char *)v60 + (v72 | 0x40));
          vst2_f32(v73, v69);
          *(int32x4_t *)((char *)v60 + (v72 | 0x60)) = vzip2q_s32((int32x4_t)v69, v70);
          v54 = 4;
          v61 = 0;
        }
        while ((v62 & 1) != 0);
        v53 = 0;
        v51 = 4;
      }
      while ((v55 & 1) != 0);
      v74 = 0;
      v9 = v10 + 8;
      v75 = v23;
      do
      {
        v196[v74 + 64] = *v75;
        ++v74;
        v75 += v12;
      }
      while (v74 != 8);
      v76 = 0;
      do
      {
        v77 = 0;
        v78 = 8 * v76;
        v79 = &v195[8 * v76 + 256];
        v80 = &v196[8 * v76];
        v81 = v10 + v76 == 0;
        v82 = &v195[8 * v76 + 192];
        v83 = &v195[8 * v76++ + 128];
        v84 = &v195[((v78 + 56) & 0x38) + 128];
        if (v81)
          v84 = v80;
        v85 = 1;
        do
        {
          v86 = v77;
          v87 = *(int32x4_t *)&v80[v86];
          v88 = *(int32x4_t *)&v84[v86];
          v89 = vsubq_s32(v88, v87);
          v90 = *(int32x4_t *)&v196[8 * v76 + v86];
          v91 = vsubq_s32(v87, v90);
          v92 = (int32x4_t)veorq_s8((int8x16_t)v89, (int8x16_t)v91);
          v93 = vabsq_s32(v89);
          v94 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 0xCuLL);
          v95 = (int8x16_t)vmull_s32(vzip1_s32(*(int32x2_t *)v94.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)), v24);
          v96 = (int32x4_t)vextq_s8(v95, v95, 8uLL);
          v97 = vabsq_s32(v91);
          v98 = vshrq_n_s32(vaddq_s32(vaddq_s32(vabsq_s32(vsubq_s32(v88, v90)), v25), vtrn2q_s32(vtrn1q_s32(v96, (int32x4_t)vshrq_n_u64((uint64x2_t)vmull_s32(vzip1_s32(*(int32x2_t *)v93.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL)), v24), 0x20uLL)), v96)), 2uLL);
          v99 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v98, vsliq_n_s32(v98, v93, 1uLL)), (int8x16_t)(*(_OWORD *)&vaddq_s32(v93, v93) | __PAIR128__(0x100000001, 0x100000001)), (int8x16_t)v98);
          v100 = vaddq_s32(v97, v97);
          v101 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v99, v27), v99), v100), (int8x16_t)v100, (int8x16_t)v99);
          v102 = vaddq_s32((int32x4_t)vandq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v90, v88), (int8x16_t)vnegq_s32(v101), (int8x16_t)v101), vorrq_s8(vorrq_s8((int8x16_t)vceqq_s32(v88, v87), (int8x16_t)vceqq_s32(v87, v90)), (int8x16_t)vcgtq_s32(v92, v26))), *(int32x4_t *)&v79[v86]);
          v103 = vsraq_n_s32(v87, (int32x4_t)vsraq_n_u32((uint32x4_t)v102, (uint32x4_t)v102, 0x1FuLL), 1uLL);
          *(int32x4_t *)&v82[v86] = v103;
          v104 = v85;
          *(int32x4_t *)&v83[v86] = vsubq_s32(v103, v102);
          v77 = 4;
          v85 = 0;
        }
        while ((v104 & 1) != 0);
      }
      while (v76 != 8);
      v105 = 0;
      v106 = 1;
      do
      {
        v107 = 0;
        v108 = v106;
        v109 = &v195[8 * v105 + 192];
        v110 = (char *)&v195[192] + ((32 * v105) | 0x20);
        v111 = (char *)&v195[192] + ((32 * v105) | 0x40);
        v112 = (char *)&v195[192] + ((32 * v105) | 0x60);
        v113 = 1;
        v114 = &v195[v105 + 64];
        do
        {
          v115 = v113;
          v116 = *(int32x4_t *)&v109[v107];
          v117 = *(int32x4_t *)&v110[4 * v107];
          v118 = *(int32x4_t *)&v111[4 * v107];
          v119 = *(int32x4_t *)&v112[4 * v107];
          v120 = (float32x2x2_t)vzip1q_s32(v116, v118);
          v121 = vzip1q_s32(v117, v119);
          v122 = (float32x2x2_t)vzip2q_s32(v116, v118);
          v123 = vzip2q_s32(v117, v119);
          v124 = (float *)&v114[8 * v107];
          v125 = 32 * v107;
          vst2_f32(v124, v120);
          *(int32x4_t *)((char *)v114 + (v125 | 0x20)) = vzip2q_s32((int32x4_t)v120, v121);
          v126 = (float *)((char *)v114 + (v125 | 0x40));
          vst2_f32(v126, v122);
          *(int32x4_t *)((char *)v114 + (v125 | 0x60)) = vzip2q_s32((int32x4_t)v122, v123);
          v107 = 4;
          v113 = 0;
        }
        while ((v115 & 1) != 0);
        v106 = 0;
        v105 = 4;
      }
      while ((v108 & 1) != 0);
      v127 = 0;
      v128 = 1;
      do
      {
        v129 = 0;
        v130 = v128;
        v131 = &v195[8 * v127 + 128];
        v132 = (char *)&v195[128] + ((32 * v127) | 0x20);
        v133 = (char *)&v195[128] + ((32 * v127) | 0x40);
        v134 = (char *)&v195[128] + ((32 * v127) | 0x60);
        v135 = 1;
        v136 = &v195[v127];
        do
        {
          v137 = v135;
          v138 = *(int32x4_t *)&v131[v129];
          v139 = *(int32x4_t *)&v132[4 * v129];
          v140 = *(int32x4_t *)&v133[4 * v129];
          v141 = *(int32x4_t *)&v134[4 * v129];
          v142 = (float32x2x2_t)vzip1q_s32(v138, v140);
          v143 = vzip1q_s32(v139, v141);
          v144 = (float32x2x2_t)vzip2q_s32(v138, v140);
          v145 = vzip2q_s32(v139, v141);
          v146 = (float *)&v136[8 * v129];
          v147 = 32 * v129;
          vst2_f32(v146, v142);
          *(int32x4_t *)((char *)v136 + (v147 | 0x20)) = vzip2q_s32((int32x4_t)v142, v143);
          v148 = (float *)((char *)v136 + (v147 | 0x40));
          vst2_f32(v148, v144);
          *(int32x4_t *)((char *)v136 + (v147 | 0x60)) = vzip2q_s32((int32x4_t)v144, v145);
          v129 = 4;
          v135 = 0;
        }
        while ((v137 & 1) != 0);
        v128 = 0;
        v127 = 4;
      }
      while ((v130 & 1) != 0);
      for (i = 0; i != 8; ++i)
      {
        v150 = 0;
        v151 = 1;
        do
        {
          v152 = *(float32x2x2_t *)&v195[8 * i + 64 + v150];
          v153 = *(int32x4_t *)&v195[8 * i + v150];
          v154 = (float *)(v22 + 4 * i * v19 + 8 * (v150 | v10));
          vst2_f32(v154, v152);
          v154 += 4;
          v155 = v151;
          *(int32x4_t *)v154 = vzip2q_s32((int32x4_t)v152, v153);
          v150 = 4;
          v151 = 0;
        }
        while ((v155 & 1) != 0);
      }
      v23 += 8;
      v10 += 8;
    }
    while (v9 < *(_QWORD *)(v2[1] + 40) - 9);
  }
  else
  {
    v9 = 0;
  }
  if (v194)
  {
    v156 = 0;
    v157 = (_QWORD *)v2[3];
    v159 = *v157;
    v158 = (_QWORD *)v157[1];
    v161 = *(_QWORD *)(*v157 + 16);
    v160 = *(_QWORD *)(*v157 + 24);
    v163 = v158[2];
    v162 = v158[3];
    v164 = (_QWORD *)v157[2];
    v166 = v164[2];
    v165 = v164[3];
    v167 = *(_QWORD *)(v159 + 40);
    result = (_DWORD *)v164[5];
    v168 = v160 + 8 * v161 * a2;
    v169 = (_DWORD *)(v165 + 8 * v166 * a2 + 8 * v9);
    v170 = 8 * v163 * a2 + 4 * v9 + v162 + 4;
    do
    {
      if (v167 > v9)
      {
        v171 = v158[5];
        v172 = (int *)v170;
        v173 = v169;
        v174 = v9;
        do
        {
          v175 = *(v172 - 1);
          v176 = v174 + 1;
          v177 = v175;
          if (v174 + 1 < v171)
            v177 = *v172;
          v178 = *(v172 - 1);
          if (v174)
            v178 = (int)*(v173 - 1);
          v179 = *(int *)(v168 + 4 * v174);
          v180 = -3 * v177 - v175 + 4 * v178;
          v181 = (v180 - 6) / 12;
          v182 = v178 - v175;
          if ((v181 & 1) + v181 < 2 * (v178 - v175))
            v181 = 2 * (v178 - v175) - 1;
          v183 = 2 * (v175 - v177);
          if ((uint64_t)(v181 & 0xFFFFFFFFFFFFFFFELL) >= v183)
            v183 = v181;
          v184 = v175 - v177;
          if (v175 > v177 || v178 > v175)
            v183 = 0;
          v186 = (unsigned __int128)((v180 + 6) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          v187 = (v186 >> 1) + ((unint64_t)v186 >> 63);
          if ((uint64_t)(v187 & 0xFFFFFFFFFFFFFFFELL) > 2 * v182)
            v187 = (2 * v182) | 1;
          if ((v187 & 1) + v187 > 2 * v184)
            v187 = 2 * v184;
          if (v175 < v177 || v178 < v175)
            v187 = v183;
          v189 = __OFADD__(v187, v179);
          v190 = v187 + v179;
          if (v190 < 0 != v189)
            v191 = v190 + 1;
          else
            v191 = v190;
          v192 = (v191 >> 1) + v175;
          *v173 = v192;
          v173[1] = v192 - v190;
          v173 += 2;
          ++v172;
          v174 = v176;
        }
        while (v167 != v176);
      }
      if ((result & 1) != 0)
        *(_DWORD *)(v165 + (v156 + v193) * v166 + 4 * ((_QWORD)result - 1)) = *(_DWORD *)(v162
                                                                                          + (v156 + v193) * v163
                                                                                          + 4 * v158[5]
                                                                                          - 4);
      ++v156;
      v168 += v161;
      v169 = (_DWORD *)((char *)v169 + v166);
      v170 += v163;
    }
    while (v156 != v194);
  }
  return result;
}

uint64_t sub_236800D18(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

BOOL sub_236800D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  _QWORD v6[2];

  if (!(_DWORD)a2)
    return 0;
  v3 = a2;
  v6[0] = sub_2367CAAA0;
  v6[1] = a3;
  if (*(_QWORD *)a1)
    return (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t (*)(unsigned int (**)(uint64_t), uint64_t), _QWORD *(*)(uint64_t, int), _QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v6, sub_236801124, sub_236800DD0, 0, a2) != 0;
  for (i = 0; i != v3; ++i)
    sub_236800DD0((uint64_t)v6, i);
  return 0;
}

_QWORD *sub_236800DD0(uint64_t a1, int a2)
{
  _QWORD *result;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int32x2_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;

  result = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)result[1];
  if (*(_QWORD *)(*result + 40) >= (unint64_t)(a2 + 1) << 6)
    v4 = (unint64_t)(a2 + 1) << 6;
  else
    v4 = *(_QWORD *)(*result + 40);
  if (v3[6])
  {
    v5 = 0;
    v6 = 0;
    v7 = (a2 << 6);
    v8 = v4 - v7;
    v71 = 4 * v7;
    v72 = result;
    v9 = vdup_n_s32(0x55555556u);
    v10.i64[0] = 0x200000002;
    v10.i64[1] = 0x200000002;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    v13 = 1;
    do
    {
      v15 = v3[2];
      v14 = v3[3];
      v17 = *(_QWORD *)(*result + 16);
      v16 = *(_QWORD *)(*result + 24);
      v18 = v6 + 1;
      if (v6 + 1 >= *(_QWORD *)(*result + 48))
        v19 = v6;
      else
        v19 = v6 + 1;
      v20 = v16 + v19 * v17 + 4 * v7;
      v21 = result[2];
      v22 = *(_QWORD *)(v21 + 16);
      v23 = *(_QWORD *)(v21 + 24);
      if (v6)
        v24 = v23 + v22 * (2 * v6 - 1) + 4 * v7;
      else
        v24 = v16 + 4 * v7;
      v73 = v14;
      v25 = 0;
      if (v8 >= 8)
      {
        v26 = v14 + v15 * v6 + 4 * v7;
        do
        {
          v27 = 0;
          v28 = 1;
          do
          {
            v29 = 4 * v27;
            v30 = *(int32x4_t *)(v16 + v17 * v6 + 4 * v7 + 4 * v25 + v29);
            v31 = *(int32x4_t *)(v24 + 4 * v25 + v29);
            v32 = vsubq_s32(v31, v30);
            v33 = *(int32x4_t *)(v20 + 4 * v25 + v29);
            v34 = vsubq_s32(v30, v33);
            v35 = (int32x4_t)veorq_s8((int8x16_t)v32, (int8x16_t)v34);
            v36 = vabsq_s32(v32);
            v37 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL);
            v38 = (int8x16_t)vmull_s32(vzip1_s32(*(int32x2_t *)v37.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)), v9);
            v39 = (int32x4_t)vextq_s8(v38, v38, 8uLL);
            v40 = vabsq_s32(v34);
            v41 = vshrq_n_s32(vaddq_s32(vaddq_s32(vabsq_s32(vsubq_s32(v31, v33)), v10), vtrn2q_s32(vtrn1q_s32(v39, (int32x4_t)vshrq_n_u64((uint64x2_t)vmull_s32(vzip1_s32(*(int32x2_t *)v36.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL)), v9), 0x20uLL)), v39)), 2uLL);
            v42 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v41, vsliq_n_s32(v41, v36, 1uLL)), (int8x16_t)(*(_OWORD *)&vaddq_s32(v36, v36) | __PAIR128__(0x100000001, 0x100000001)), (int8x16_t)v41);
            v43 = vaddq_s32(v40, v40);
            v44 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v42, v12), v42), v43), (int8x16_t)v43, (int8x16_t)v42);
            v45 = vaddq_s32((int32x4_t)vandq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v33, v31), (int8x16_t)vnegq_s32(v44), (int8x16_t)v44), vorrq_s8(vorrq_s8((int8x16_t)vceqq_s32(v31, v30), (int8x16_t)vceqq_s32(v30, v33)), (int8x16_t)vcgtq_s32(v35, v11))), *(int32x4_t *)(v26 + 4 * v25 + v29));
            v46 = vsraq_n_s32(v30, (int32x4_t)vsraq_n_u32((uint32x4_t)v45, (uint32x4_t)v45, 0x1FuLL), 1uLL);
            *(int32x4_t *)(v23 + v22 * 2 * v6 + 4 * v7 + 4 * v25 + v29) = v46;
            v47 = v28;
            *(int32x4_t *)(v23 + v22 * ((2 * v6) | 1) + 4 * v7 + 4 * v25 + v29) = vsubq_s32(v46, v45);
            v27 = 4;
            v28 = 0;
          }
          while ((v47 & 1) != 0);
          v25 += 8;
        }
        while ((v25 | 7) < v8);
      }
      if (v25 < v8)
      {
        v48 = v23 + v71;
        v49 = v23 + v71 + v22 * v13;
        v50 = v48 + v22 * v5;
        v51 = v73 + v71 + v15 * v6;
        v52 = v16 + v71 + v17 * v6;
        do
        {
          v53 = *(_DWORD *)(v52 + 4 * v25);
          v54 = v53;
          v55 = *(int *)(v20 + 4 * v25);
          v56 = *(_DWORD *)(v24 + 4 * v25);
          v57 = -3 * v55 - v53 + 4 * v56;
          v58 = (v57 - 6) / 12;
          v59 = v56 - (uint64_t)v53;
          if ((v58 & 1) + v58 < 2 * v59)
            v58 = 2 * v59 - 1;
          if ((uint64_t)(v58 & 0xFFFFFFFFFFFFFFFELL) < 2 * (v53 - v55))
            v58 = 2 * (v53 - v55);
          if (v53 <= (int)v55 && v56 <= v53)
            v61 = v58;
          else
            v61 = 0;
          v62 = (unsigned __int128)((v57 + 6) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          v63 = (v62 >> 1) + ((unint64_t)v62 >> 63);
          if ((uint64_t)(v63 & 0xFFFFFFFFFFFFFFFELL) > 2 * v59)
            v63 = (2 * v59) | 1;
          if ((v63 & 1) + v63 > 2 * (v53 - v55))
            v63 = 2 * (v53 - v55);
          if (v53 < (int)v55 || v56 < v53)
            v65 = v61;
          else
            v65 = v63;
          v66 = *(int *)(v51 + 4 * v25);
          v67 = __OFADD__(v65, v66);
          v68 = v65 + v66;
          if (v68 < 0 != v67)
            v69 = v68 + 1;
          else
            v69 = v68;
          v70 = (v69 >> 1) + v54;
          *(_DWORD *)(v50 + 4 * v25) = v70;
          *(_DWORD *)(v49 + 4 * v25++) = v70 - v68;
        }
        while (v25 < v8);
      }
      result = v72;
      v3 = (_QWORD *)v72[1];
      v13 += 2;
      v5 += 2;
      v6 = v18;
    }
    while (v18 < v3[6]);
  }
  return result;
}

uint64_t sub_236801124(unsigned int (**a1)(uint64_t), uint64_t a2)
{
  if ((*a1)(a2))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

void sub_236801148(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((__int128 *)a2 != a3)
  {
    v4 = sub_2368011B4(a3, *(__int128 **)(a1 + 8), a2);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 != v4)
    {
      do
      {
        v6 = v5 - 64;
        sub_2367C2F38((uint64_t *)(v5 - 40));
        v5 = v6;
      }
      while (v6 != v4);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
}

uint64_t sub_2368011B4(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)(a3 + 40) = *(__int128 *)((char *)v5 + 40);
      *(_QWORD *)(a3 + 56) = *((_QWORD *)v5 + 7);
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      v8 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v7;
      if (v8)
      {
        v9 = -*(_QWORD *)(v8 - 24);
        do
          v10 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v10 + v9, &qword_2564313D8));
        free(*(void **)(v8 - 32));
      }
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v5 + 4);
      v5 += 4;
      a3 += 64;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_236801260(unint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  uint64_t result;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  BOOL v69;
  BOOL v70;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int64x2_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int64x2_t v104;
  unint64_t v105;
  uint64_t (**v106)();
  uint64_t v107;
  int v108;
  uint64_t (**v109)();
  __int128 v110;
  unint64_t v111;
  _QWORD *v112;

  v4 = *a2;
  v5 = a2[9];
  v6 = ((a2[1] - *a2) >> 6) - v5;
  v8 = (void (***)(_QWORD))*a1;
  v7 = a1[1];
  if (v7 != *a1)
  {
    v9 = (void (***)(_QWORD))(v7 - 24);
    v10 = (void (***)(_QWORD))(v7 - 24);
    do
    {
      v11 = *v10;
      v10 -= 3;
      (*v11)(v9);
      v12 = v9 == v8;
      v9 = v10;
    }
    while (!v12);
    v5 = a2[9];
    v4 = *a2;
  }
  a1[1] = (unint64_t)v8;
  v13 = v4 + (v5 << 6);
  v14 = *(_QWORD *)(v13 + 40);
  v15 = *(_QWORD *)(v13 + 48);
  if (v6 >= 3)
  {
    v16 = v4 + ((v5 + 1) << 6);
    if (*(_QWORD *)(v16 + 40) == v14 && *(_QWORD *)(v16 + 48) == v15)
    {
      v106 = &off_2507FFA90;
      v109 = &off_2507FF550;
      v110 = xmmword_2368AF3F0;
      v111 = 0;
      sub_2367D7840((uint64_t)&v106, (uint64_t)&v109);
      LOWORD(v107) = 1;
      HIDWORD(v107) = *((_DWORD *)a2 + 18) + 1;
      v108 = 2;
      v17 = a1[2];
      v18 = a1[1];
      if (v18 >= v17)
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a1) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_113;
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a1) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        v112 = a1 + 2;
        if (v24)
          v24 = (unint64_t)sub_2367D1EBC(v24);
        else
          v25 = 0;
        v26 = v24 + 24 * v21;
        *(_QWORD *)v26 = &off_2507FFA90;
        v27 = v107;
        *(_DWORD *)(v26 + 16) = v108;
        *(_QWORD *)(v26 + 8) = v27;
        v28 = *a1;
        v29 = a1[1];
        if (v29 == *a1)
        {
          v32 = vdupq_n_s64(v29);
          v30 = v24 + 24 * v21;
        }
        else
        {
          v30 = v24 + 24 * v21;
          do
          {
            *(_QWORD *)(v30 - 24) = &off_2507FFA90;
            v30 -= 24;
            v31 = *(_QWORD *)(v29 - 16);
            *(_DWORD *)(v30 + 16) = *(_DWORD *)(v29 - 8);
            *(_QWORD *)(v30 + 8) = v31;
            v29 -= 24;
          }
          while (v29 != v28);
          v32 = *(int64x2_t *)a1;
        }
        v20 = v26 + 24;
        *a1 = v30;
        a1[1] = v26 + 24;
        v110 = (__int128)v32;
        v33 = a1[2];
        a1[2] = v24 + 24 * v25;
        v111 = v33;
        v109 = (uint64_t (**)())v32.i64[0];
        sub_2367D77D8((uint64_t)&v109);
      }
      else
      {
        *(_QWORD *)v18 = &off_2507FFA90;
        v19 = v107;
        *(_DWORD *)(v18 + 16) = v108;
        *(_QWORD *)(v18 + 8) = v19;
        v20 = v18 + 24;
      }
      a1[1] = v20;
      LOBYTE(v107) = 0;
      v34 = a1[2];
      if (v20 >= v34)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_113;
        v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a1) >> 3);
        v39 = 2 * v38;
        if (2 * v38 <= v37 + 1)
          v39 = v37 + 1;
        if (v38 >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v39;
        v112 = a1 + 2;
        if (v40)
          v40 = (unint64_t)sub_2367D1EBC(v40);
        else
          v41 = 0;
        v42 = v40 + 24 * v37;
        *(_QWORD *)v42 = &off_2507FFA90;
        v43 = v107;
        *(_DWORD *)(v42 + 16) = v108;
        *(_QWORD *)(v42 + 8) = v43;
        v44 = *a1;
        v45 = a1[1];
        if (v45 == *a1)
        {
          v48 = vdupq_n_s64(v45);
          v46 = v40 + 24 * v37;
        }
        else
        {
          v46 = v40 + 24 * v37;
          do
          {
            *(_QWORD *)(v46 - 24) = &off_2507FFA90;
            v46 -= 24;
            v47 = *(_QWORD *)(v45 - 16);
            *(_DWORD *)(v46 + 16) = *(_DWORD *)(v45 - 8);
            *(_QWORD *)(v46 + 8) = v47;
            v45 -= 24;
          }
          while (v45 != v44);
          v48 = *(int64x2_t *)a1;
        }
        v36 = v42 + 24;
        *a1 = v46;
        a1[1] = v42 + 24;
        v110 = (__int128)v48;
        v49 = a1[2];
        a1[2] = v40 + 24 * v41;
        v111 = v49;
        v109 = (uint64_t (**)())v48.i64[0];
        sub_2367D77D8((uint64_t)&v109);
      }
      else
      {
        *(_QWORD *)v20 = &off_2507FFA90;
        v35 = v107;
        *(_DWORD *)(v20 + 16) = v108;
        *(_QWORD *)(v20 + 8) = v35;
        v36 = v20 + 24;
      }
      a1[1] = v36;
    }
  }
  v106 = &off_2507FFA90;
  v109 = &off_2507FF550;
  v110 = xmmword_2368AF3F0;
  v111 = 0;
  result = sub_2367D7840((uint64_t)&v106, (uint64_t)&v109);
  HIDWORD(v107) = a2[9];
  v108 = v6;
  BYTE1(v107) = 1;
  if (v14 <= v15 && v15 >= 9)
  {
    LOBYTE(v107) = 0;
    v52 = a1[2];
    v53 = a1[1];
    if (v53 < v52)
    {
      *(_QWORD *)v53 = &off_2507FFA90;
      v54 = v107;
      *(_DWORD *)(v53 + 16) = v108;
      *(_QWORD *)(v53 + 8) = v54;
      v55 = v53 + 24;
LABEL_66:
      a1[1] = v55;
      v15 = (v15 + 1) >> 1;
      goto LABEL_67;
    }
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *a1) >> 3);
    v57 = v56 + 1;
    if (v56 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *a1) >> 3);
      if (2 * v58 > v57)
        v57 = 2 * v58;
      if (v58 >= 0x555555555555555)
        v59 = 0xAAAAAAAAAAAAAAALL;
      else
        v59 = v57;
      v112 = a1 + 2;
      if (v59)
        v59 = (unint64_t)sub_2367D1EBC(v59);
      else
        v60 = 0;
      v61 = v59 + 24 * v56;
      *(_QWORD *)v61 = &off_2507FFA90;
      v62 = v107;
      *(_DWORD *)(v61 + 16) = v108;
      *(_QWORD *)(v61 + 8) = v62;
      v63 = *a1;
      v64 = a1[1];
      if (v64 == *a1)
      {
        v67 = vdupq_n_s64(v64);
        v65 = v59 + 24 * v56;
      }
      else
      {
        v65 = v59 + 24 * v56;
        do
        {
          *(_QWORD *)(v65 - 24) = &off_2507FFA90;
          v65 -= 24;
          v66 = *(_QWORD *)(v64 - 16);
          *(_DWORD *)(v65 + 16) = *(_DWORD *)(v64 - 8);
          *(_QWORD *)(v65 + 8) = v66;
          v64 -= 24;
        }
        while (v64 != v63);
        v67 = *(int64x2_t *)a1;
      }
      v55 = v61 + 24;
      *a1 = v65;
      a1[1] = v61 + 24;
      v110 = (__int128)v67;
      v68 = a1[2];
      a1[2] = v59 + 24 * v60;
      v111 = v68;
      v109 = (uint64_t (**)())v67.i64[0];
      result = sub_2367D77D8((uint64_t)&v109);
      goto LABEL_66;
    }
LABEL_113:
    sub_2367C3440();
  }
LABEL_67:
  v69 = v15 > 8;
  v70 = v14 > 8;
  if (v14 > 8 || v15 >= 9)
  {
    do
    {
      if (v70)
      {
        LOBYTE(v107) = 1;
        v72 = a1[1];
        v73 = a1[2];
        if (v72 >= v73)
        {
          v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *a1) >> 3);
          v77 = v76 + 1;
          if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_113;
          v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *a1) >> 3);
          if (2 * v78 > v77)
            v77 = 2 * v78;
          if (v78 >= 0x555555555555555)
            v79 = 0xAAAAAAAAAAAAAAALL;
          else
            v79 = v77;
          v112 = a1 + 2;
          if (v79)
            v79 = (unint64_t)sub_2367D1EBC(v79);
          else
            v80 = 0;
          v81 = v79 + 24 * v76;
          *(_QWORD *)v81 = &off_2507FFA90;
          v82 = v107;
          *(_DWORD *)(v81 + 16) = v108;
          *(_QWORD *)(v81 + 8) = v82;
          v83 = *a1;
          v84 = a1[1];
          if (v84 == *a1)
          {
            v87 = vdupq_n_s64(v84);
            v85 = v79 + 24 * v76;
          }
          else
          {
            v85 = v79 + 24 * v76;
            do
            {
              *(_QWORD *)(v85 - 24) = &off_2507FFA90;
              v85 -= 24;
              v86 = *(_QWORD *)(v84 - 16);
              *(_DWORD *)(v85 + 16) = *(_DWORD *)(v84 - 8);
              *(_QWORD *)(v85 + 8) = v86;
              v84 -= 24;
            }
            while (v84 != v83);
            v87 = *(int64x2_t *)a1;
          }
          v75 = v81 + 24;
          *a1 = v85;
          a1[1] = v81 + 24;
          v110 = (__int128)v87;
          v88 = a1[2];
          a1[2] = v79 + 24 * v80;
          v111 = v88;
          v109 = (uint64_t (**)())v87.i64[0];
          result = sub_2367D77D8((uint64_t)&v109);
        }
        else
        {
          *(_QWORD *)v72 = &off_2507FFA90;
          v74 = v107;
          *(_DWORD *)(v72 + 16) = v108;
          *(_QWORD *)(v72 + 8) = v74;
          v75 = v72 + 24;
        }
        a1[1] = v75;
        v14 = (v14 + 1) >> 1;
      }
      if (v69)
      {
        LOBYTE(v107) = 0;
        v89 = a1[1];
        v90 = a1[2];
        if (v89 >= v90)
        {
          v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - *a1) >> 3);
          v94 = v93 + 1;
          if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_113;
          v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - *a1) >> 3);
          if (2 * v95 > v94)
            v94 = 2 * v95;
          if (v95 >= 0x555555555555555)
            v96 = 0xAAAAAAAAAAAAAAALL;
          else
            v96 = v94;
          v112 = a1 + 2;
          if (v96)
            v96 = (unint64_t)sub_2367D1EBC(v96);
          else
            v97 = 0;
          v98 = v96 + 24 * v93;
          *(_QWORD *)v98 = &off_2507FFA90;
          v99 = v107;
          *(_DWORD *)(v98 + 16) = v108;
          *(_QWORD *)(v98 + 8) = v99;
          v100 = *a1;
          v101 = a1[1];
          if (v101 == *a1)
          {
            v104 = vdupq_n_s64(v101);
            v102 = v96 + 24 * v93;
          }
          else
          {
            v102 = v96 + 24 * v93;
            do
            {
              *(_QWORD *)(v102 - 24) = &off_2507FFA90;
              v102 -= 24;
              v103 = *(_QWORD *)(v101 - 16);
              *(_DWORD *)(v102 + 16) = *(_DWORD *)(v101 - 8);
              *(_QWORD *)(v102 + 8) = v103;
              v101 -= 24;
            }
            while (v101 != v100);
            v104 = *(int64x2_t *)a1;
          }
          v92 = v98 + 24;
          *a1 = v102;
          a1[1] = v98 + 24;
          v110 = (__int128)v104;
          v105 = a1[2];
          a1[2] = v96 + 24 * v97;
          v111 = v105;
          v109 = (uint64_t (**)())v104.i64[0];
          result = sub_2367D77D8((uint64_t)&v109);
        }
        else
        {
          *(_QWORD *)v89 = &off_2507FFA90;
          v91 = v107;
          *(_DWORD *)(v89 + 16) = v108;
          *(_QWORD *)(v89 + 8) = v91;
          v92 = v89 + 24;
        }
        a1[1] = v92;
        v15 = (v15 + 1) >> 1;
      }
      v69 = v15 > 8;
      v70 = v14 > 8;
    }
    while (v14 > 8 || v15 > 8);
  }
  return result;
}

void sub_2368019F0(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  int64x2_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 *v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  int64x2_t v73;
  char *v74;
  _QWORD *v75;

  v4 = a2;
  v6 = (char *)*a1;
  v7 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = v8 >> 6;
  v11 = a1 + 2;
  v10 = a1[2];
  if (v7 >= v10)
  {
    v29 = ((uint64_t)(v7 - (_QWORD)v6) >> 6) + 1;
    if (v29 >> 58)
      sub_2367C3440();
    v30 = v10 - (_QWORD)v6;
    if (v30 >> 5 > v29)
      v29 = v30 >> 5;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0)
      v31 = 0x3FFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    v71 = v11;
    if (v31)
    {
      v33 = (char *)sub_2367E42EC(v31);
    }
    else
    {
      v33 = 0;
      v32 = 0;
    }
    v38 = (uint64_t)&v33[64 * v9];
    v68 = v33;
    *(_QWORD *)&v69 = v38;
    *((_QWORD *)&v69 + 1) = v38;
    v70 = &v33[64 * v32];
    if (v9 == v32)
    {
      if (v8 < 1)
      {
        if (v6 == (char *)v4)
          v41 = 1;
        else
          v41 = v8 >> 5;
        v75 = v11;
        v42 = (char *)sub_2367E42EC(v41);
        v44 = (__int128 *)v69;
        if (*((_QWORD *)&v69 + 1) == (_QWORD)v69)
        {
          v50 = vdupq_n_s64(v69);
          v45 = &v42[64 * (v41 >> 2)];
        }
        else
        {
          v45 = &v42[64 * (v41 >> 2) + *((_QWORD *)&v69 + 1) - v69];
          v46 = &v42[64 * (v41 >> 2)];
          do
          {
            v47 = *v44;
            *((_QWORD *)v46 + 2) = *((_QWORD *)v44 + 2);
            *(_OWORD *)v46 = v47;
            v48 = *((_QWORD *)v44 + 3);
            *((_QWORD *)v44 + 3) = 0;
            *((_QWORD *)v46 + 3) = v48;
            *((_QWORD *)v46 + 4) = *((_QWORD *)v44 + 4);
            v49 = *(__int128 *)((char *)v44 + 40);
            *((_QWORD *)v46 + 7) = *((_QWORD *)v44 + 7);
            *(_OWORD *)(v46 + 40) = v49;
            v46 += 64;
            v44 += 4;
          }
          while (v46 != v45);
          v50 = (int64x2_t)v69;
        }
        v51 = v70;
        v72 = v68;
        v68 = v42;
        *(_QWORD *)&v69 = &v42[64 * (v41 >> 2)];
        v73 = v50;
        *((_QWORD *)&v69 + 1) = v45;
        v70 = &v42[64 * v43];
        v74 = v51;
        sub_2367E4320((uint64_t)&v72);
        v38 = *((_QWORD *)&v69 + 1);
      }
      else
      {
        v39 = v9 + 2;
        if (v9 >= -1)
          v39 = v9 + 1;
        v40 = v38 - (v39 >> 1 << 6);
        v38 = sub_2368011B4((__int128 *)v38, (__int128 *)v38, v40);
        *(_QWORD *)&v69 = v40;
        *((_QWORD *)&v69 + 1) = v38;
      }
    }
    v52 = *a3;
    *(_QWORD *)(v38 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v38 = v52;
    v53 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)(v38 + 24) = v53;
    *(_QWORD *)(v38 + 32) = *((_QWORD *)a3 + 4);
    v54 = *(__int128 *)((char *)a3 + 40);
    *(_QWORD *)(v38 + 56) = *((_QWORD *)a3 + 7);
    *(_OWORD *)(v38 + 40) = v54;
    v55 = v69;
    v56 = *((_QWORD *)&v69 + 1) + 64;
    *((_QWORD *)&v69 + 1) += 64;
    v57 = (char *)*a1;
    if ((__int128 *)*a1 != v4)
    {
      v58 = v4;
      do
      {
        v59 = *(v58 - 4);
        *(_QWORD *)(v55 - 48) = *((_QWORD *)v58 - 6);
        *(_OWORD *)(v55 - 64) = v59;
        v60 = *((_QWORD *)v58 - 5);
        *((_QWORD *)v58 - 5) = 0;
        *(_QWORD *)(v55 - 40) = v60;
        *(_QWORD *)(v55 - 32) = *((_QWORD *)v58 - 4);
        v61 = *(__int128 *)((char *)v58 - 24);
        *(_QWORD *)(v55 - 8) = *((_QWORD *)v58 - 1);
        *(_OWORD *)(v55 - 24) = v61;
        v55 -= 64;
        v58 -= 4;
      }
      while (v58 != (__int128 *)v57);
      v56 = *((_QWORD *)&v69 + 1);
    }
    *(_QWORD *)&v69 = v55;
    v62 = (__int128 *)a1[1];
    if (v62 != v4)
    {
      do
      {
        v63 = *v4;
        *(_QWORD *)(v56 + 16) = *((_QWORD *)v4 + 2);
        *(_OWORD *)v56 = v63;
        v64 = *((_QWORD *)v4 + 3);
        *((_QWORD *)v4 + 3) = 0;
        *(_QWORD *)(v56 + 24) = v64;
        *(_QWORD *)(v56 + 32) = *((_QWORD *)v4 + 4);
        v65 = *(__int128 *)((char *)v4 + 40);
        *(_QWORD *)(v56 + 56) = *((_QWORD *)v4 + 7);
        *(_OWORD *)(v56 + 40) = v65;
        v56 += 64;
        v4 += 4;
      }
      while (v4 != v62);
      v55 = v69;
      v4 = (__int128 *)a1[1];
    }
    v66 = (char *)*a1;
    *a1 = v55;
    a1[1] = v56;
    v67 = (char *)a1[2];
    a1[2] = v70;
    *((_QWORD *)&v69 + 1) = v4;
    v70 = v67;
    v68 = v66;
    *(_QWORD *)&v69 = v66;
    sub_2367E4320((uint64_t)&v68);
  }
  else if (a2 == (__int128 *)v7)
  {
    v34 = *a3;
    *((_QWORD *)a2 + 2) = *((_QWORD *)a3 + 2);
    *a2 = v34;
    v35 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a2 + 3) = v35;
    *((_QWORD *)a2 + 4) = *((_QWORD *)a3 + 4);
    v36 = &v6[64 * v9];
    v37 = *(__int128 *)((char *)a3 + 40);
    *((_QWORD *)v36 + 7) = *((_QWORD *)a3 + 7);
    *(_OWORD *)(v36 + 40) = v37;
    a1[1] = a2 + 4;
  }
  else
  {
    v12 = v7 - 64;
    v13 = a1[1];
    if (v7 >= 0x40)
    {
      v14 = v7 - 64;
      v13 = a1[1];
      do
      {
        v15 = *(_OWORD *)v14;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
        *(_OWORD *)v13 = v15;
        v16 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v13 + 24) = v16;
        *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
        v17 = *(_OWORD *)(v14 + 40);
        *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 40) = v17;
        v13 += 64;
        v14 += 64;
      }
      while (v14 < v7);
    }
    a1[1] = v13;
    if ((__int128 *)v7 != a2 + 4)
    {
      do
      {
        *(_OWORD *)(v7 - 24) = *(_OWORD *)(v12 - 24);
        *(_QWORD *)(v7 - 8) = *(_QWORD *)(v12 - 8);
        v18 = *(_OWORD *)(v12 - 64);
        *(_QWORD *)(v7 - 48) = *(_QWORD *)(v12 - 48);
        *(_OWORD *)(v7 - 64) = v18;
        v19 = *(_QWORD *)(v12 - 40);
        *(_QWORD *)(v12 - 40) = 0;
        v20 = *(_QWORD *)(v7 - 40);
        *(_QWORD *)(v7 - 40) = v19;
        if (v20)
        {
          v21 = -*(_QWORD *)(v20 - 24);
          do
            v22 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v22 + v21, &qword_2564313D8));
          free(*(void **)(v20 - 32));
        }
        *(_QWORD *)(v7 - 32) = *(_QWORD *)(v12 - 32);
        v7 -= 64;
        v12 -= 64;
      }
      while ((__int128 *)v12 != v4);
    }
    v23 = &v6[64 * v9];
    *(_OWORD *)(v23 + 40) = *(__int128 *)((char *)a3 + 40);
    *((_QWORD *)v23 + 7) = *((_QWORD *)a3 + 7);
    v24 = *a3;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a3 + 2);
    *v4 = v24;
    v25 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = 0;
    v26 = *((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = v25;
    if (v26)
    {
      v27 = -*(_QWORD *)(v26 - 24);
      do
        v28 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v28 + v27, &qword_2564313D8));
      free(*(void **)(v26 - 32));
    }
    *((_QWORD *)v4 + 4) = *((_QWORD *)a3 + 4);
  }
}

void sub_236801E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2367E4320((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t *sub_236801E64(int64x2_t *a1, __int32 a2)
{
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;

  a1[2].i64[0] = 0;
  a1->i64[0] = (uint64_t)&off_2508004C0;
  a1[4].i16[0] = 1;
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0;
  v5 = &off_2507FF550;
  v6 = xmmword_2368AF3F0;
  v7 = 0;
  sub_2367D72A8(a1, (uint64_t)&v5);
  a1->i32[2] = a2;
  return a1;
}

void sub_236801EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2367D78F8((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_236801EF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int *v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _BOOL8 v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  _DWORD *v109;
  int v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  __int128 *v146;
  _BOOL8 v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL8 v159;
  __int128 *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v176;
  int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v186;
  __int128 v187;
  uint64_t *v188;
  __int128 v189;
  int *v190;
  uint64_t *v191;
  uint64_t *v192;
  int *v193;
  __int128 v194;
  __int128 v195;
  _QWORD *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  __int128 v206;
  __int128 v207;
  _QWORD *v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t *v211;

  v4 = a2;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    v39 = -1431655765 * ((*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3) - 1;
    if ((v39 & 0x80000000) != 0)
      return 0;
    while (1)
    {
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(unsigned int *)(v40 + 24 * v39 + 12);
      if ((v41 & 0x80000000) != 0)
        return 1;
      v42 = *v4;
      v43 = v4[1] - *v4;
      v8 = 1;
      if ((int)v41 >= (int)((unint64_t)v43 >> 6))
        return v8;
      v44 = v41 + *(_DWORD *)(v40 + 24 * v39 + 16) - 1;
      if (v44 < 0)
        return v8;
      v176 = *(unsigned int *)(v40 + 24 * v39 + 16);
      v45 = v44 >= (int)((unint64_t)v43 >> 6) || v44 < (int)v41;
      if (v45)
        return v8;
      v46 = v40 + 24 * v39;
      v181 = *(unsigned __int8 *)(v46 + 8);
      v47 = *(unsigned __int8 *)(v46 + 9);
      v48 = v176;
      v49 = v176 + v41;
      v50 = (v43 >> 6) - v176;
      if (v47)
        v51 = v49;
      else
        v51 = v50;
      v52 = v4[9];
      if (v52 > v41)
        v4[9] = v52 - v176;
      v179 = v49 - 1;
      if (v41 <= v49 - 1)
        break;
LABEL_45:
      sub_236801148((uint64_t)v4, v42 + (v51 << 6), (__int128 *)(v42 + (v51 << 6) + (v48 << 6)));
      v8 = 0;
      v45 = v39-- <= 0;
      if (v45)
        return v8;
    }
    v173 = v51;
    v178 = v51 - v41;
    v180 = v39;
    while (1)
    {
      v53 = v41;
      v54 = *v4;
      v55 = *v4 + ((unint64_t)v41 << 6);
      v57 = (uint64_t *)(v55 + 40);
      v56 = *(_QWORD *)(v55 + 40);
      v58 = (v178 + v41);
      v59 = v54 + (v58 << 6);
      v61 = (_QWORD *)(v59 + 40);
      v60 = *(_QWORD *)(v59 + 40);
      if (v56 < v60)
        return 1;
      v64 = *(_QWORD *)(v55 + 48);
      v63 = (_QWORD *)(v55 + 48);
      v62 = v64;
      v67 = *(_QWORD *)(v59 + 48);
      v66 = (_QWORD *)(v59 + 48);
      v65 = v67;
      if (v62 < v67)
        return 1;
      v183 = v54 + (v53 << 6);
      v68 = v54 + (v58 << 6);
      if (v181)
      {
        if (!v60)
        {
          --*(_DWORD *)(v54 + (v53 << 6) + 56);
LABEL_69:
          v4 = a2;
          goto LABEL_70;
        }
        v69 = v60 + v56;
        v70 = v54 + (v53 << 6);
        v71 = *(_DWORD *)(v70 + 56);
        v72 = *(_DWORD *)(v70 + 60);
        sub_2367DA410((uint64_t)&v206, v69, v62);
        v8 = v209;
        if (v209)
          return v8;
        v73 = v71 - 1;
        v186 = v206;
        v74 = *((_QWORD *)&v207 + 1);
        v75 = v208;
        v187 = v207;
        v188 = v208;
        *(_QWORD *)&v189 = v69;
        *((_QWORD *)&v189 + 1) = v62;
        v190 = (int *)__PAIR64__(v72, v73);
        if (*v66)
        {
          *(_QWORD *)&v194 = v68;
          *((_QWORD *)&v194 + 1) = v183;
          *(_QWORD *)&v195 = &v186;
          *(_QWORD *)&v206 = v183;
          *((_QWORD *)&v206 + 1) = v68;
          *(_QWORD *)&v207 = &v186;
          *((_QWORD *)&v207 + 1) = &v194;
          v76 = (unint64_t)(*v63 + 7) >> 3;
          v4 = a2;
          if (a4)
          {
            v77 = sub_236800534(a4, v76, (uint64_t)&v206);
          }
          else
          {
            v210 = 0;
            v211 = &v210;
            v77 = sub_236800534((uint64_t)&v210, v76, (uint64_t)&v206);
          }
          v39 = v180;
          v8 = v77;
          if (!v77)
          {
            v91 = *a2 + (v53 << 6);
            *(_OWORD *)(v91 + 40) = v189;
            *(_QWORD *)(v91 + 56) = v190;
            v92 = v186;
            *(_QWORD *)(v91 + 16) = v187;
            *(_OWORD *)v91 = v92;
            v93 = *((_QWORD *)&v187 + 1);
            *((_QWORD *)&v187 + 1) = 0;
            v94 = *(_QWORD *)(v91 + 24);
            *(_QWORD *)(v91 + 24) = v93;
            if (v94)
            {
              v95 = -*(_QWORD *)(v94 - 24);
              do
                v96 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v96 + v95, &qword_2564313D8));
              free(*(void **)(v94 - 32));
            }
            *(_QWORD *)(v91 + 32) = v188;
            v39 = v180;
          }
          v97 = *((_QWORD *)&v187 + 1);
          *((_QWORD *)&v187 + 1) = 0;
          if (v97)
          {
            v98 = -*(_QWORD *)(v97 - 24);
            do
              v99 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v99 + v98, &qword_2564313D8));
            goto LABEL_101;
          }
          goto LABEL_102;
        }
        v4 = a2;
        v86 = *a2 + (v53 << 6);
        *(_OWORD *)(v86 + 40) = v189;
        *(_QWORD *)(v86 + 56) = v190;
        v87 = v187;
        *(_OWORD *)v86 = v186;
        v88 = *(_QWORD *)(v86 + 24);
        *(_QWORD *)(v86 + 16) = v87;
        *(_QWORD *)(v86 + 24) = v74;
        if (v88)
        {
          v89 = -*(_QWORD *)(v88 - 24);
          do
            v90 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v90 + v89, &qword_2564313D8));
          free(*(void **)(v88 - 32));
        }
        *(_QWORD *)(v86 + 32) = v75;
      }
      else
      {
        if (!v65)
        {
          --*(_DWORD *)(v54 + (v53 << 6) + 60);
          goto LABEL_69;
        }
        v174 = v54 + (v58 << 6);
        v78 = v65 + v62;
        v79 = v54 + (v53 << 6);
        v81 = *(_DWORD *)(v79 + 56);
        v80 = *(_DWORD *)(v79 + 60);
        sub_2367DA410((uint64_t)&v206, v56, v78);
        v8 = v209;
        if (v209)
          return v8;
        v186 = v206;
        v82 = *((_QWORD *)&v207 + 1);
        v83 = v208;
        v187 = v207;
        v188 = v208;
        *(_QWORD *)&v189 = v56;
        *((_QWORD *)&v189 + 1) = v78;
        LODWORD(v190) = v81;
        HIDWORD(v190) = v80 - 1;
        if (*v61)
        {
          *(_QWORD *)&v206 = v183;
          *((_QWORD *)&v206 + 1) = v174;
          *(_QWORD *)&v207 = &v186;
          v84 = (unint64_t)(*v57 + 63) >> 6;
          if (a4)
          {
            v85 = sub_236800D3C(a4, v84, (uint64_t)&v206);
          }
          else
          {
            *(_QWORD *)&v194 = 0;
            *((_QWORD *)&v194 + 1) = &v194;
            v85 = sub_236800D3C((uint64_t)&v194, v84, (uint64_t)&v206);
          }
          v39 = v180;
          v8 = v85;
          if (!v85)
          {
            v105 = *((_QWORD *)&v189 + 1);
            if ((BYTE8(v189) & 1) != 0)
            {
              v106 = *v57;
              if (*v57)
              {
                v107 = *v63 - 1;
                v108 = (int *)(*(_QWORD *)(v183 + 24) + *(_QWORD *)(v183 + 16) * v107);
                v109 = (_DWORD *)(*((_QWORD *)&v187 + 1) + 2 * v107 * v187);
                do
                {
                  v110 = *v108++;
                  *v109++ = v110;
                  --v106;
                }
                while (v106);
              }
            }
            v111 = *a2 + (v53 << 6);
            *(_QWORD *)(v111 + 40) = v189;
            *(_QWORD *)(v111 + 48) = v105;
            *(_QWORD *)(v111 + 56) = v190;
            v112 = v186;
            *(_QWORD *)(v111 + 16) = v187;
            *(_OWORD *)v111 = v112;
            v113 = *((_QWORD *)&v187 + 1);
            *((_QWORD *)&v187 + 1) = 0;
            v114 = *(_QWORD *)(v111 + 24);
            *(_QWORD *)(v111 + 24) = v113;
            if (v114)
            {
              v115 = -*(_QWORD *)(v114 - 24);
              do
                v116 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v116 + v115, &qword_2564313D8));
              free(*(void **)(v114 - 32));
            }
            v8 = 0;
            *(_QWORD *)(v111 + 32) = v188;
            v39 = v180;
          }
          v97 = *((_QWORD *)&v187 + 1);
          *((_QWORD *)&v187 + 1) = 0;
          v4 = a2;
          if (v97)
          {
            v117 = -*(_QWORD *)(v97 - 24);
            do
              v118 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v118 + v117, &qword_2564313D8));
LABEL_101:
            free(*(void **)(v97 - 32));
          }
LABEL_102:
          if ((_DWORD)v8)
            return v8;
          goto LABEL_103;
        }
        v4 = a2;
        v100 = *a2 + (v53 << 6);
        *(_OWORD *)(v100 + 40) = v189;
        *(_QWORD *)(v100 + 56) = v190;
        v101 = v187;
        *(_OWORD *)v100 = v186;
        v102 = *(_QWORD *)(v100 + 24);
        *(_QWORD *)(v100 + 16) = v101;
        *(_QWORD *)(v100 + 24) = v82;
        if (v102)
        {
          v103 = -*(_QWORD *)(v102 - 24);
          do
            v104 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v104 + v103, &qword_2564313D8));
          free(*(void **)(v102 - 32));
        }
        *(_QWORD *)(v100 + 32) = v83;
      }
LABEL_70:
      v39 = v180;
LABEL_103:
      LODWORD(v41) = v53 + 1;
      if ((int)v53 + 1 > v179)
      {
        v42 = *v4;
        v48 = v176;
        v51 = v173;
        goto LABEL_45;
      }
    }
  }
  if (v5 != 1)
  {
    if (!v5)
    {
      v7 = *(unsigned int *)(a1 + 12);
      v6 = *(_DWORD *)(a1 + 16);
      v8 = sub_236803134(a2, v7, (int)v7 + 2);
      if ((_DWORD)v8)
        return v8;
      v210 = v7;
      v9 = *v4 + (v7 << 6);
      v11 = v9 + 40;
      v10 = *(_QWORD *)(v9 + 40);
      v201 = v10;
      if (v6)
      {
        v12 = *(_QWORD *)(v9 + 48);
        v13 = v6 / 7;
        LODWORD(v200) = v6 / 7;
        LODWORD(v199) = v6 % 7;
        if (v6 % 7)
        {
          *(_QWORD *)&v186 = v4;
          *((_QWORD *)&v186 + 1) = &v210;
          *(_QWORD *)&v187 = &v200;
          *((_QWORD *)&v187 + 1) = &v199;
          v188 = &v201;
          v14 = (__int128 *)a4;
          if (!a4)
          {
            *(_QWORD *)&v206 = 0;
            *((_QWORD *)&v206 + 1) = &v206;
            v14 = &v206;
          }
          return sub_2368855E4((uint64_t)v14, v12, (uint64_t)&v186);
        }
        else
        {
          v186 = *(_OWORD *)v9;
          *(_QWORD *)&v187 = *(_QWORD *)(v9 + 16);
          v119 = *(_QWORD *)(v9 + 24);
          v120 = *(_QWORD *)(v9 + 32);
          *(_QWORD *)(v9 + 24) = 0;
          v121 = *v4 + (v7 << 6);
          v122 = *(_QWORD *)(v11 + 16);
          v206 = *(_OWORD *)(v121 + 64);
          *(_QWORD *)&v207 = *(_QWORD *)(v121 + 80);
          v124 = *(_QWORD *)(v121 + 88);
          v123 = *(_QWORD *)(v121 + 96);
          *(_QWORD *)(v121 + 88) = 0;
          v125 = *v4 + (v7 << 6);
          v126 = (v13 + v6 / 0x15 + 1 - 3 * ((1431655766 * (unint64_t)(v13 + v6 / 0x15 + 1)) >> 32))
               + v7;
          v127 = *(_OWORD *)(v121 + 104);
          v128 = *(_QWORD *)(v121 + 120);
          v194 = *(_OWORD *)(v125 + 128);
          *(_QWORD *)&v195 = *(_QWORD *)(v125 + 144);
          v130 = *(_QWORD *)(v125 + 152);
          v129 = *(_QWORD *)(v125 + 160);
          *(_QWORD *)(v125 + 152) = 0;
          v184 = *(_OWORD *)(v125 + 168);
          v131 = *v4 + ((v7 + (int)(-3 * (v6 / 0x15) + v13)) << 6);
          v132 = (int)(v13
                     + ((int)(((1431655765 * (unint64_t)v13) >> 32) - v13) >> 1)
                     + ((((1431655765 * (unint64_t)v13) >> 32) - v13) >> 31)
                     + 2)
               % 3;
          v133 = *(_QWORD *)(v125 + 184);
          *(_QWORD *)(v131 + 40) = v10;
          *(_QWORD *)(v131 + 48) = v12;
          *(_QWORD *)(v131 + 56) = v122;
          *(_QWORD *)(v131 + 16) = v187;
          *(_OWORD *)v131 = v186;
          v134 = *(_QWORD *)(v131 + 24);
          *(_QWORD *)(v131 + 24) = v119;
          if (v134)
          {
            v182 = v127;
            v135 = -*(_QWORD *)(v134 - 24);
            do
              v136 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v136 + v135, &qword_2564313D8));
            free(*(void **)(v134 - 32));
            v127 = v182;
          }
          v137 = v7 + v132;
          *(_QWORD *)(v131 + 32) = v120;
          v138 = *a2 + (v126 << 6);
          *(_OWORD *)(v138 + 40) = v127;
          *(_QWORD *)(v138 + 56) = v128;
          *(_OWORD *)v138 = v206;
          v139 = *(_QWORD *)(v138 + 24);
          *(_QWORD *)(v138 + 16) = v207;
          *(_QWORD *)(v138 + 24) = v124;
          if (v139)
          {
            v140 = -*(_QWORD *)(v139 - 24);
            do
              v141 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v141 + v140, &qword_2564313D8));
            free(*(void **)(v139 - 32));
          }
          *(_QWORD *)(v138 + 32) = v123;
          v142 = *a2 + (v137 << 6);
          *(_OWORD *)(v142 + 40) = v184;
          *(_QWORD *)(v142 + 56) = v133;
          *(_OWORD *)v142 = v194;
          v143 = *(_QWORD *)(v142 + 24);
          *(_QWORD *)(v142 + 16) = v195;
          *(_QWORD *)(v142 + 24) = v130;
          if (v143)
          {
            v144 = -*(_QWORD *)(v143 - 24);
            do
              v145 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v145 + v144, &qword_2564313D8));
            free(*(void **)(v143 - 32));
          }
          v8 = 0;
          *(_QWORD *)(v142 + 32) = v129;
        }
        return v8;
      }
      return 0;
    }
    return 1;
  }
  v15 = *(_DWORD *)(a1 + 12);
  v16 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 60);
  v204 = v17;
  v205 = v16;
  if (!a2[9])
    return 1;
  v19 = *a2;
  v18 = a2[1];
  v20 = *(_DWORD *)(*a2 + 48);
  v21 = (v15 + 1);
  v202 = v21;
  v203 = v20;
  if (v21 >= (v18 - v19) >> 6)
    return 1;
  v22 = v19 + (v21 << 6);
  v23 = *(_QWORD *)(v22 + 40);
  v201 = v23;
  if (v20 < 1)
    return 1;
  v25 = *(_QWORD *)(v22 + 48);
  if (v20 == 1)
  {
LABEL_22:
    v32 = *(_QWORD *)(v19 + 24);
    v199 = *(_QWORD *)(v19 + 16) >> 2;
    v200 = v32;
    v33 = v4;
    v34 = v19 + (v21 << 6);
    v198 = *(_QWORD *)(v34 + 16) >> 2;
    v35 = *((_DWORD *)v33 + 16);
    if (v35 >= 24)
      v35 = 24;
    v197 = v35;
    if (v23)
    {
      if (v16 | v17)
      {
        v196 = 0;
        v194 = 0u;
        v195 = 0u;
        sub_2367DA410((uint64_t)&v206, *(_DWORD *)v34, *(_DWORD *)(v34 + 4));
        v8 = v209;
        if (v209)
        {
LABEL_27:
          v36 = *((_QWORD *)&v195 + 1);
          *((_QWORD *)&v195 + 1) = 0;
          if (v36)
          {
            v37 = -*(_QWORD *)(v36 - 24);
            do
              v38 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v38 + v37, &qword_2564313D8));
            free(*(void **)(v36 - 32));
          }
          return v8;
        }
        v194 = v206;
        v148 = *((_QWORD *)&v207 + 1);
        *((_QWORD *)&v207 + 1) = 0;
        v149 = v208;
        v150 = *((_QWORD *)&v195 + 1);
        *(_QWORD *)&v195 = v207;
        *((_QWORD *)&v195 + 1) = v148;
        if (v150)
        {
          v151 = -*(_QWORD *)(v150 - 24);
          do
            v152 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v152 + v151, &qword_2564313D8));
          free(*(void **)(v150 - 32));
          v148 = *((_QWORD *)&v195 + 1);
        }
        v196 = v149;
        v153 = *(_DWORD *)v34;
        *(_DWORD *)v34 = v194;
        LODWORD(v194) = v153;
        v154 = *(_DWORD *)(v34 + 4);
        *(_DWORD *)(v34 + 4) = DWORD1(v194);
        DWORD1(v194) = v154;
        v155 = *(_DWORD *)(v34 + 8);
        *(_DWORD *)(v34 + 8) = DWORD2(v194);
        DWORD2(v194) = v155;
        v156 = *(_DWORD *)(v34 + 12);
        *(_DWORD *)(v34 + 12) = HIDWORD(v194);
        HIDWORD(v194) = v156;
        v157 = *(_QWORD *)(v34 + 16);
        *(_QWORD *)(v34 + 16) = v195;
        *(_QWORD *)&v195 = v157;
        v158 = *(_QWORD *)(v34 + 24);
        *(_QWORD *)(v34 + 24) = v148;
        *((_QWORD *)&v195 + 1) = v158;
        if (v204 == 6)
        {
          *(_QWORD *)&v186 = a2;
          *((_QWORD *)&v186 + 1) = &v202;
          *(_QWORD *)&v187 = a3;
          *((_QWORD *)&v187 + 1) = &v194;
          v188 = &v200;
          *(_QWORD *)&v189 = v19;
          *((_QWORD *)&v189 + 1) = &v199;
          v190 = &v197;
          v191 = (uint64_t *)&v205;
          v192 = &v198;
          v193 = &v204;
          if (a4)
          {
            v159 = sub_2368AB2A4(a4, v203, (uint64_t)&v186);
          }
          else
          {
            v210 = 0;
            v211 = &v210;
            v159 = sub_2368AB2A4((uint64_t)&v210, v203, (uint64_t)&v186);
          }
        }
        else
        {
          *(_QWORD *)&v186 = a2;
          *((_QWORD *)&v186 + 1) = &v202;
          *(_QWORD *)&v187 = &v194;
          *((_QWORD *)&v187 + 1) = &v200;
          v188 = (uint64_t *)v19;
          *(_QWORD *)&v189 = &v199;
          *((_QWORD *)&v189 + 1) = &v197;
          v190 = &v205;
          v191 = &v198;
          v192 = (uint64_t *)&v204;
          if (a4)
          {
            v159 = sub_2368AAF2C(a4, v203, (uint64_t)&v186);
          }
          else
          {
            v210 = 0;
            v211 = &v210;
            v159 = sub_2368AAF2C((uint64_t)&v210, v203, (uint64_t)&v186);
          }
        }
        v8 = v159;
        if (v159)
        {
          if (!v209)
          {
            v161 = *((_QWORD *)&v207 + 1);
            *((_QWORD *)&v207 + 1) = 0;
            if (v161)
            {
              v162 = -*(_QWORD *)(v161 - 24);
              do
                v163 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v163 + v162, &qword_2564313D8));
              free(*(void **)(v161 - 32));
            }
          }
          goto LABEL_27;
        }
        if (!v209)
        {
          v164 = *((_QWORD *)&v207 + 1);
          *((_QWORD *)&v207 + 1) = 0;
          if (v164)
          {
            v165 = -*(_QWORD *)(v164 - 24);
            do
              v166 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v166 + v165, &qword_2564313D8));
            free(*(void **)(v164 - 32));
          }
        }
        v167 = *((_QWORD *)&v195 + 1);
        *((_QWORD *)&v195 + 1) = 0;
        if (v167)
        {
          v168 = -*(_QWORD *)(v167 - 24);
          do
            v169 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v169 + v168, &qword_2564313D8));
          free(*(void **)(v167 - 32));
        }
      }
      else
      {
        if (v20 == 1)
        {
          *(_QWORD *)&v186 = a2;
          *((_QWORD *)&v186 + 1) = &v202;
          *(_QWORD *)&v187 = &v201;
          *((_QWORD *)&v187 + 1) = v19;
          v188 = &v200;
          *(_QWORD *)&v189 = &v199;
          *((_QWORD *)&v189 + 1) = &v197;
          v146 = (__int128 *)a4;
          if (!a4)
          {
            *(_QWORD *)&v206 = 0;
            *((_QWORD *)&v206 + 1) = &v206;
            v146 = &v206;
          }
          v147 = sub_2368AAE04((uint64_t)v146, v25, (uint64_t)&v186);
        }
        else
        {
          *(_QWORD *)&v186 = &v203;
          *((_QWORD *)&v186 + 1) = a2;
          *(_QWORD *)&v187 = &v202;
          *((_QWORD *)&v187 + 1) = &v201;
          v188 = &v200;
          *(_QWORD *)&v189 = v19;
          *((_QWORD *)&v189 + 1) = &v199;
          v190 = &v197;
          v160 = (__int128 *)a4;
          if (!a4)
          {
            *(_QWORD *)&v206 = 0;
            *((_QWORD *)&v206 + 1) = &v206;
            v160 = &v206;
          }
          v147 = sub_2368AAE98((uint64_t)v160, v25, (uint64_t)&v186);
        }
        v8 = v147;
        if (v147)
          return v8;
      }
    }
    v170 = a2[9];
    if (v170 <= v202)
      v171 = v170 - 1;
    else
      v171 = (int)v203 + v170 - 2;
    a2[9] = v171;
    sub_236801148((uint64_t)a2, *a2, (__int128 *)(*a2 + 64));
    return 0;
  }
  v26 = 1;
  while (1)
  {
    v27 = *(int **)(*v4 + ((unint64_t)v202 << 6) + 56);
    sub_2367DA410((uint64_t)&v206, v23, v25);
    v8 = v209;
    if (v209)
      return v8;
    v186 = v206;
    v187 = v207;
    v28 = (__int128 *)(*v4 + ((unint64_t)v202 << 6) + 64);
    v188 = v208;
    *(_QWORD *)&v189 = v23;
    *((_QWORD *)&v189 + 1) = v25;
    v190 = v27;
    sub_2368019F0(v4, v28, &v186);
    v29 = *((_QWORD *)&v187 + 1);
    *((_QWORD *)&v187 + 1) = 0;
    if (v29)
    {
      v30 = -*(_QWORD *)(v29 - 24);
      do
        v31 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v31 + v30, &qword_2564313D8));
      free(*(void **)(v29 - 32));
    }
    if (++v26 == v20)
    {
      v19 = *v4;
      v21 = v202;
      goto LABEL_22;
    }
  }
}

void sub_236802C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  if (!*(_DWORD *)(v38 - 136))
  {
    v40 = *(_QWORD *)(v38 - 152);
    *(_QWORD *)(v38 - 152) = 0;
    if (v40)
    {
      v41 = -*(_QWORD *)(v40 - 24);
      do
        v42 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v42 + v41, &qword_2564313D8));
      free(*(void **)(v40 - 32));
    }
  }
  if (a38)
  {
    v43 = -*(_QWORD *)(a38 - 24);
    do
      v44 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v44 + v43, &qword_2564313D8));
    free(*(void **)(a38 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_236802D28(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t result;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned int v59;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v6 = (unint64_t *)(a1 + 32);
    if (v8 == v7)
    {
      sub_236801260(v6, a2);
      v8 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
    }
    if (v7 != v8)
    {
      v9 = 0;
      while (1)
      {
        v10 = *(unsigned int *)(v8 + 24 * v9 + 12);
        if ((v10 & 0x80000000) != 0)
          return 1;
        v11 = (unint64_t)(a2[1] - *a2) >> 6;
        result = 1;
        if ((int)v10 >= (int)v11)
          return result;
        v12 = *(unsigned int *)(v8 + 24 * v9 + 16);
        v13 = v10 + v12 - 1;
        if (v13 < 0)
          return result;
        if (v13 >= (int)v11 || v13 < (int)v10)
          return result;
        v15 = v8 + 24 * v9;
        v16 = *(unsigned __int8 *)(v15 + 8);
        v17 = *(unsigned __int8 *)(v15 + 9);
        v18 = v12 + v10;
        v19 = (v12 + v10 - 1);
        v20 = a2[9];
        if (v20 <= v10)
        {
          if (!v17)
            v18 = (unint64_t)(a2[1] - *a2) >> 6;
        }
        else
        {
          if (v17)
            v21 = v20 > v19;
          else
            v21 = 0;
          if (!v21)
            return result;
          a2[9] = v20 + v12;
        }
        if (v10 <= v19)
        {
          v49 = v18;
          v22 = v10;
          while (1)
          {
            v23 = v22;
            v24 = *a2 + ((unint64_t)v22 << 6);
            v25 = *(_DWORD *)(v24 + 56);
            if (v25 > 30)
              return 1;
            v26 = *(_DWORD *)(v24 + 60);
            if (v26 > 30)
              return 1;
            v27 = *a2 + ((unint64_t)v22 << 6);
            v30 = *(_QWORD *)(v27 + 40);
            v28 = (unint64_t *)(v27 + 40);
            v29 = v30;
            v31 = v28[1];
            if (!v30 || v31 == 0)
              return 1;
            if (v16)
            {
              v33 = (unint64_t)(v29 + 1) >> 1;
              *v28 = v33;
              if ((v25 & 0x80000000) == 0)
                *(_DWORD *)(v24 + 56) = v25 + 1;
              v29 -= v33;
            }
            else
            {
              v34 = (v31 + 1) >> 1;
              v28[1] = v34;
              if ((v26 & 0x80000000) == 0)
                *(_DWORD *)(v24 + 60) = v26 + 1;
              v31 -= v34;
            }
            result = sub_2367E28F4(v24);
            if ((_DWORD)result)
              return result;
            sub_2367DA410((uint64_t)&v56, v29, v31);
            result = v59;
            if (v59)
              return result;
            v50 = v56;
            v51 = v57;
            v52 = v58;
            v53 = v29;
            v54 = v31;
            v35 = *a2;
            v55 = *(_QWORD *)(*a2 + (v23 << 6) + 56);
            sub_2368019F0(a2, (__int128 *)(v35 + (v49 << 6) + ((unint64_t)(v23 - v10) << 6)), &v50);
            v36 = *((_QWORD *)&v51 + 1);
            *((_QWORD *)&v51 + 1) = 0;
            if (v36)
            {
              v37 = -*(_QWORD *)(v36 - 24);
              do
                v38 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v38 + v37, &qword_2564313D8));
              free(*(void **)(v36 - 32));
            }
            v22 = v23 + 1;
            if ((int)v23 + 1 > v19)
            {
              v8 = *(_QWORD *)(a1 + 32);
              v7 = *(_QWORD *)(a1 + 40);
              break;
            }
          }
        }
        result = 0;
        if (++v9 >= 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3))
          return result;
      }
    }
    return 0;
  }
  if (v4 != 1)
  {
    if (!v4)
      return sub_236803134(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 12) + 2);
    return 1;
  }
  v39 = *(unsigned int *)(a1 + 12);
  v40 = v39 + *(_DWORD *)(a1 + 20);
  v41 = (v40 - 1);
  if (sub_236803134(a2, *(_DWORD *)(a1 + 12), v40 - 1))
    return 1;
  v43 = *(_DWORD *)(a1 + 24);
  v42 = *(_DWORD *)(a1 + 28);
  v44 = a2[9];
  if (v44 <= v39)
    v45 = v44 + 1;
  else
    v45 = v44 - (v41 - v39 + 1) + 2;
  a2[9] = v45;
  sub_236801148((uint64_t)a2, *a2 + (v39 << 6) + 64, (__int128 *)(*a2 + (v41 << 6) + 64));
  sub_2367DA410((uint64_t)&v56, v42 + v43, v41 - v39 + 1);
  result = v59;
  if (!v59)
  {
    v50 = v56;
    v51 = v57;
    v52 = v58;
    v53 = (v42 + v43);
    v54 = (v41 - v39 + 1);
    v55 = -1;
    sub_2368019F0(a2, (__int128 *)*a2, &v50);
    v46 = *((_QWORD *)&v51 + 1);
    *((_QWORD *)&v51 + 1) = 0;
    if (v46)
    {
      v47 = -*(_QWORD *)(v46 - 24);
      do
        v48 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v48 + v47, &qword_2564313D8));
      free(*(void **)(v46 - 32));
    }
    return 0;
  }
  return result;
}

void sub_2368030C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  unint64_t v16;

  if (a14)
  {
    v15 = -*(_QWORD *)(a14 - 24);
    do
      v16 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v16 + v15, &qword_2564313D8));
    free(*(void **)(a14 - 32));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_236803134(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  if (v4 < a2)
    return 1;
  result = 1;
  if (a3 >= a2 && v4 > a3)
  {
    v7 = a1[9];
    if (v7 <= a2 || v7 > a3)
    {
      v8 = a2 + 1;
      if (v8 > a3)
        return 0;
      v9 = v3 + ((unint64_t)a2 << 6);
      v10 = (_QWORD *)(v9 + 48);
      v11 = (_DWORD *)(v9 + 56);
      v12 = (_DWORD *)(v9 + 60);
      v13 = *(_QWORD *)(v9 + 40);
      v14 = (_DWORD *)(v3 + (v8 << 6) + 60);
      v15 = a3 - (unint64_t)v8 + 1;
      while (v13 == *(_QWORD *)(v14 - 5) && *v10 == *(_QWORD *)(v14 - 3) && *v11 == *(v14 - 1) && *v12 == *v14)
      {
        result = 0;
        v14 += 16;
        if (!--v15)
          return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_23680320C(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 120))
  {
    sub_2367C2F38((uint64_t *)(a1 + 64));
    sub_2367C2F38((uint64_t *)(a1 + 24));
  }
  return a1;
}

uint64_t sub_236803244(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  float32x4_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float v32;
  unint64_t v33;
  float *v34;
  float *v35;
  float v36;
  uint64_t v37;
  unsigned int v38;
  int32x4_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x2_t v58;
  int v59;
  float32x4_t v60;
  int32x4_t v61;
  uint64_t v62;

  v6 = 0;
  v62 = *MEMORY[0x24BDAC8D0];
  v7 = (float)(a4 - 1) / 1.4142;
  v8 = v7 / (float)(a2 - 1);
  v9 = v7 / (float)(a1 - 1);
  v10 = (float *)(a3 + 4);
  v11 = vdupq_n_s32(0xC0D55555);
  v12 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
  v13 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
  v14 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
  v15 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
  v16 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
  v17 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
  v18 = (float32x4_t)vdupq_n_s32(0x4122CC6Bu);
  v19 = (float32x4_t)vdupq_n_s32(0x424379A1u);
  v20 = (float32x4_t)vdupq_n_s32(0x42C519F0u);
  v21 = (float32x4_t)vdupq_n_s32(0x3E5749EEu);
  v22 = (float32x4_t)vdupq_n_s32(0xBCB621BE);
  v23 = (float32x4_t)vdupq_n_s32(0xC19B8831);
  v24 = (float32x4_t)vdupq_n_s32(0x42C519F1u);
  v25.i64[0] = 0x7F0000007FLL;
  v25.i64[1] = 0x7F0000007FLL;
  __asm
  {
    FMOV            V29.4S, #-1.0
    FMOV            V30.4S, #1.0
  }
  while (1)
  {
    v59 = 0;
    memset(&v58, 0, 64);
    v32 = *(float *)(a3 + 68 * v6);
    *(float *)v58.i32 = v32;
    if (v32 < 0.00000001)
      return 1;
    v33 = a4 - 1;
    v34 = v10;
    v35 = (float *)&v58 + 1;
    if (a4 >= 2)
    {
      do
      {
        v36 = *v34 + 1.0;
        if (*v34 <= 0.0)
          v36 = 1.0 / (float)(1.0 - *v34);
        v32 = v32 * v36;
        *v35 = v32;
        if (v32 < 0.00000001)
          return 1;
        ++v35;
        ++v34;
      }
      while (--v33);
    }
    if (a1)
    {
      v37 = 0;
      v38 = 0;
      v39 = vdupq_lane_s32(v58, 0);
      do
      {
        if (a2)
        {
          v40 = 0;
          v41 = 0;
          v5.f32[0] = (float)(v9 * (float)v38) * (float)(v9 * (float)v38);
          v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
          v42 = a5 + 4 * a2 * a1 * v6 + 4 * v37 * a2;
          do
          {
            v43 = (float32x4_t)v39;
            if (a4 != 1)
            {
              v44 = 0;
              v43.f32[0] = (float)v41;
              v45 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0), (float32x4_t)xmmword_2368AF630), v8);
              v46 = vsqrtq_f32(vmlaq_f32(v5, v45, v45));
              v47 = vcvtq_s32_f32(v46);
              v61 = v47;
              do
              {
                v60.i32[v44] = v58.i32[v61.i32[v44]];
                ++v44;
              }
              while (v44 != 4);
              v48 = 0;
              v49 = v60;
              v61 = v47;
              do
              {
                v60.i32[v48] = v58.i32[v61.i32[v48] + 1];
                ++v48;
              }
              while (v48 != 4);
              v50 = vsubq_f32(v46, vcvtq_f32_s32(v47));
              v51 = (int32x4_t)vdivq_f32(v60, v49);
              v52 = vaddq_s32(v51, v11);
              v53 = vaddq_f32((float32x4_t)vsubq_s32(v51, (int32x4_t)vandq_s8((int8x16_t)v52, v25)), _Q29);
              v54 = vmulq_f32(v50, vaddq_f32(vdivq_f32(vmlaq_f32(v16, v53, vmlaq_f32(v13, v12, v53)), vmlaq_f32(v17, v53, vmlaq_f32(v15, v14, v53))), vcvtq_f32_s32(vshrq_n_s32(v52, 0x17uLL))));
              v55 = vrndmq_f32(v54);
              v56 = vsubq_f32(v54, v55);
              v43 = vmulq_f32(v49, vdivq_f32(vmulq_f32(vmlaq_f32(v20, v56, vmlaq_f32(v19, v56, vaddq_f32(v56, v18))), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v55), 0x17uLL), _Q30)), vmlaq_f32(v24, v56, vmlaq_f32(v23, v56, vmlaq_f32(v22, v21, v56)))));
            }
            *(float32x4_t *)(v42 + 4 * v40) = v43;
            v41 += 4;
            v40 = v41;
          }
          while (v41 < a2);
        }
        v37 = ++v38;
      }
      while (v38 < a1);
    }
    ++v6;
    v10 += 17;
    if (v6 == 3)
      return 0;
  }
}

uint64_t sub_2368035D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float32x2_t v5;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  float32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  uint64_t v29;
  float32x2_t *v30;
  const float *v31;
  float32x2_t v32;
  float *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  int32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float *v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  float v74;
  BOOL v75;
  float v76;
  float v77;
  unint64_t v78;
  char *v79;
  float *v80;
  float *v81;
  uint64_t v82;
  float *v83;
  float v84;
  float *v85;
  int32x2_t v86;
  int32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  uint64_t v92;
  _BYTE *v93;
  char *v94;
  uint64_t k;
  uint64_t v96;
  _BYTE *v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  int *v107;
  int v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t i;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t j;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  float *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  float32x4_t *v126;
  float32x4_t *v127;
  float32x4_t *v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  size_t v138;
  char *v139;
  char *v140;
  unint64_t m;
  void *__p[3];
  float v144[4];
  _BYTE v145[192];
  _BYTE v146[384];
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v10 = dword_2369237B8[a4];
  v11 = 8 * v10;
  v12 = dword_2369237FC[a4];
  v13 = 8 * v12;
  v14 = 8 * v12 * 8 * v10;
  v15 = 3 * v14;
  sub_236803F00(__p, 3 * v14);
  switch(*(_DWORD *)a1)
  {
    case 1:
      v16 = 0;
      v17 = (char *)__p[0];
      v18 = (char *)__p[0];
      do
      {
        v19 = 0;
        v20 = (_DWORD *)(a1 + 224 + 12 * v16);
        do
        {
          *(_DWORD *)&v18[v19] = *v20;
          v19 += 4;
        }
        while (v19 != 256);
        *(_DWORD *)&v17[(v16 << 8) | 4] = v20[1];
        *(_DWORD *)&v17[(v16 << 8) | 0x20] = v20[1];
        *(_DWORD *)&v17[(v16++ << 8) | 0x24] = v20[2];
        v18 += 256;
      }
      while (v16 != 3);
      goto LABEL_72;
    case 2:
      v101 = 0;
      v102 = (char *)__p[0];
      v103 = (char *)__p[0] + 144;
      v104 = (char *)__p[0];
      do
      {
        v105 = 0;
        v106 = &v102[256 * v101];
        *(_DWORD *)v106 = 1161482240;
        v107 = (int *)(a1 + 224 + 24 * v101);
        v108 = *v107;
        *((_DWORD *)v106 + 8) = *v107;
        *((_DWORD *)v106 + 1) = v108;
        *((_DWORD *)v106 + 9) = v107[1];
        v109 = 1;
        do
        {
          v110 = v109;
          v111 = v105 | (v101 << 6);
          *(_DWORD *)&v102[(4 * v111) | 8] = v107[2];
          *(_DWORD *)&v102[(4 * v111) | 0x40] = v107[2];
          *(_DWORD *)&v102[(4 * v111) | 0xC] = v107[2];
          *(_DWORD *)&v102[(4 * v111) | 0x44] = v107[2];
          v105 = 8;
          v109 = 0;
        }
        while ((v110 & 1) != 0);
        v112 = 0;
        *(_DWORD *)&v102[(v101 << 8) | 0x48] = v107[3];
        *(_DWORD *)&v102[(v101 << 8) | 0x4C] = v107[3];
        *(_DWORD *)&v102[(v101 << 8) | 0x68] = v107[3];
        *(_DWORD *)&v102[(v101 << 8) | 0x6C] = v107[3];
        v113 = v104;
        do
        {
          for (i = 0; i != 16; i += 4)
          {
            v115 = &v113[i];
            *((_DWORD *)v115 + 4) = v107[4];
            *((_DWORD *)v115 + 32) = v107[4];
          }
          ++v112;
          v113 += 32;
        }
        while (v112 != 4);
        v116 = 0;
        v117 = v103;
        do
        {
          for (j = 0; j != 16; j += 4)
            *(_DWORD *)&v117[j] = v107[5];
          ++v116;
          v117 += 32;
        }
        while (v116 != 4);
        ++v101;
        v104 += 256;
        v103 += 256;
      }
      while (v101 != 3);
      goto LABEL_72;
    case 3:
      if (sub_236803244(4uLL, 4uLL, a1 + 16, *(_QWORD *)(a1 + 8), (uint64_t)v146))
        goto LABEL_88;
      v21 = 0;
      v22 = (char *)__p[0];
      v23 = v146;
      v24 = (float32x2_t *)__p[0];
      do
      {
        v25 = 0;
        v26 = 0;
        v27 = v21 * v14;
        v28 = v24;
        do
        {
          v29 = 0;
          v30 = v28;
          do
          {
            v31 = (const float *)&v23[16 * (v25 >> 2) + v29];
            v32 = vld1_dup_f32(v31);
            *v30++ = v32;
            v29 += 4;
          }
          while (v29 != 16);
          ++v26;
          v28 += 4;
          v25 += 2;
        }
        while (v26 != 8);
        v33 = (float *)(a1 + 224 + 8 * v21);
        *(float *)&v22[(4 * v27) | 4] = *(float *)&v22[(4 * v27) | 4] / *v33;
        *(float *)&v22[(4 * v27) | 0x20] = *(float *)&v22[(4 * v27) | 0x20] / *v33;
        *(float *)&v22[(4 * v27) | 0x24] = *(float *)&v22[(4 * v27) | 0x24] / v33[1];
        ++v21;
        v24 = (float32x2_t *)((char *)v24 + 4 * v11 * v13);
        v23 += 64;
      }
      while (v21 != 3);
      goto LABEL_72;
    case 4:
      if (sub_236803244(4uLL, 8uLL, a1 + 16, *(_QWORD *)(a1 + 8), (uint64_t)v146))
        goto LABEL_88;
      v34 = 0;
      v35 = (char *)__p[0];
      v36 = (char *)__p[0];
      do
      {
        v37 = 0;
        v38 = v36;
        do
        {
          v39 = &v146[128 * v34 + (v37 & 0x7FFFFFFFFFFFFFE0)];
          v40 = v39[1];
          *v38 = *v39;
          v38[1] = v40;
          v38 += 2;
          v37 += 16;
        }
        while (v37 != 128);
        *(float *)&v35[(4 * v34 * v14) | 0x20] = *(float *)&v35[(4 * v34 * v14) | 0x20] / *(float *)(a1 + 224 + 4 * v34);
        ++v34;
        v36 += 4 * v14;
      }
      while (v34 != 3);
      goto LABEL_72;
    case 5:
      if (sub_236803244(4uLL, 8uLL, a1 + 16, *(_QWORD *)(a1 + 8), (uint64_t)v146)
        || sub_236803244(4uLL, 4uLL, a1 + 344, *(_QWORD *)(a1 + 336), (uint64_t)v145))
      {
        goto LABEL_88;
      }
      v41 = 0;
      v42 = a1 + 224;
      v43 = (char *)__p[0];
      v44 = a1 + 248;
      v45 = (char *)__p[0] + 32;
      v46 = 4 * v11 * v13;
      v47 = (char *)__p[0] + 4;
      v48 = v146;
      v49 = v145;
      v50 = vdup_n_s32(0xC0D55555);
      v51 = (float32x2_t)vdup_n_s32(0x3F3E11C7u);
      v52 = (float32x2_t)vdup_n_s32(0x3FB6E02Bu);
      v53 = (float32x2_t)vdup_n_s32(0x3E32458Cu);
      v54 = (float32x2_t)vdup_n_s32(0x3F813CEDu);
      v55 = (float32x2_t)vdup_n_s32(0xB5F85AB0);
      v56 = (float32x2_t)vdup_n_s32(0x3F7D8625u);
      __asm
      {
        FMOV            V21.2S, #-1.0
        FMOV            V22.2S, #1.0
      }
      v63 = (float32x2_t)vdup_n_s32(0x4122CC6Bu);
      v64 = (float32x2_t)vdup_n_s32(0x424379A1u);
      v65 = (float32x2_t)vdup_n_s32(0x42C519F0u);
      v66 = (float32x2_t)vdup_n_s32(0x3E5749EEu);
      v67 = (float32x2_t)vdup_n_s32(0xBCB621BE);
      v68 = (float32x2_t)vdup_n_s32(0xC19B8831);
      v69 = (float32x2_t)vdup_n_s32(0x42C519F1u);
      v70 = (float *)__p[0];
      break;
    case 6:
      v119 = sub_236803244(8 * v10, 8 * v12, a1 + 16, *(_QWORD *)(a1 + 8), (uint64_t)__p[0]);
      if (!(_DWORD)v119)
        goto LABEL_72;
      goto LABEL_89;
    case 7:
      v120 = *(_QWORD **)(a1 + 224);
      if (!v120 || v15 != (uint64_t)(v120[1] - *v120) >> 2)
        goto LABEL_88;
      if (!v14)
      {
        v124 = *a5;
        goto LABEL_77;
      }
      v121 = 0;
      v122 = (float *)__p[0];
      if (v15 <= 1)
        v123 = 1;
      else
        v123 = 3 * v14;
      do
      {
        v122[v121] = 1.0 / (float)(*(float *)(a1 + 232) * (float)*(int *)(**(_QWORD **)(a1 + 224) + 4 * v121));
        ++v121;
      }
      while (v123 != v121);
      goto LABEL_72;
    default:
      goto LABEL_72;
  }
LABEL_24:
  v71 = v42 + 36 * v41;
  v72 = *(float *)(v71 + 20);
  v144[0] = v72;
  if (v72 >= 0.00000001)
  {
    v73 = 0;
    while (1)
    {
      v74 = *(float *)(v44 + v73 * 4);
      v75 = v74 <= 0.0;
      v76 = 1.0 / (float)(1.0 - v74);
      v77 = v74 + 1.0;
      if (v75)
        v77 = v76;
      v72 = v72 * v77;
      v144[v73 + 1] = v72;
      if (v72 < 0.00000001)
        break;
      if (++v73 == 3)
      {
        v78 = 0;
        v79 = &v43[256 * v41];
        *(_DWORD *)v79 = 1065353216;
        *((_DWORD *)v79 + 8) = *(_DWORD *)v71;
        *((_DWORD *)v79 + 1) = *(_DWORD *)(v71 + 4);
        *((_DWORD *)v79 + 16) = *(_DWORD *)(v71 + 8);
        *((_DWORD *)v79 + 2) = *(_DWORD *)(v71 + 12);
        *((_DWORD *)v79 + 18) = *(_DWORD *)(v71 + 16);
        v80 = (float *)&unk_23692082C;
        v81 = v70;
        do
        {
          v82 = 0;
          v83 = v81;
          do
          {
            if ((v82 | v78) >= 2)
            {
              v84 = (float)((float)(v80[v82] + -0.85178) * 3.0) / 12.12;
              v85 = &v144[(unint64_t)v84];
              v5.f32[0] = v85[1] / *v85;
              v86 = vdup_lane_s32((int32x2_t)v5, 0);
              v87 = vadd_s32(v86, v50);
              v88 = vadd_f32((float32x2_t)vsub_s32(v86, (int32x2_t)vand_s8((int8x8_t)v87, (int8x8_t)0x7F0000007FLL)), _D21);
              v89 = vmul_n_f32(vadd_f32(vdiv_f32(vmla_f32(v55, v88, vmla_f32(v52, v51, v88)), vmla_f32(v56, v88, vmla_f32(v54, v53, v88))), vcvt_f32_s32(vshr_n_s32(v87, 0x17uLL))), v84 - (float)(unint64_t)v84);
              v90 = vrndm_f32(v89);
              v91 = vsub_f32(v89, v90);
              v5 = vmul_f32(vmla_f32(v65, v91, vmla_f32(v64, v91, vadd_f32(v91, v63))), (float32x2_t)vadd_s32(vshl_n_s32(vcvt_s32_f32(v90), 0x17uLL), _D22));
              *v83 = *v85 * vdiv_f32(v5, vmla_f32(v69, v91, vmla_f32(v68, v91, vmla_f32(v67, v66, v91)))).f32[0];
            }
            ++v82;
            v83 += 2;
          }
          while (v82 != 4);
          ++v78;
          v81 += 16;
          v80 += 4;
        }
        while (v78 != 4);
        v92 = 0;
        v93 = v48;
        v94 = v45;
        do
        {
          for (k = 0; k != 8; ++k)
          {
            if (k | v92)
              *(_DWORD *)&v94[4 * k] = *(_DWORD *)&v93[4 * k];
          }
          ++v92;
          v94 += 64;
          v93 += 32;
        }
        while (v92 != 4);
        v96 = 0;
        v97 = v49;
        v98 = v47;
        do
        {
          v99 = 0;
          v100 = v98;
          do
          {
            if (v99 | v96)
              *v100 = *(_DWORD *)&v97[4 * v99];
            ++v99;
            v100 += 2;
          }
          while (v99 != 4);
          ++v96;
          v98 += 16;
          v97 += 16;
        }
        while (v96 != 4);
        ++v41;
        v44 += 36;
        v70 += 64;
        v45 += v46;
        v48 += 128;
        v47 += v46;
        v49 += 64;
        if (v41 != 3)
          goto LABEL_24;
LABEL_72:
        v124 = *a5;
        if (!v14)
        {
LABEL_77:
          v133 = 0;
          *a5 = v124 + v15;
          v134 = ((int)v12 * (uint64_t)(int)v10) << 8;
          if (v12 >= v10)
            v135 = v10;
          else
            v135 = v12;
          if (v12 <= v10)
            v136 = v10;
          else
            v136 = v12;
          v137 = 32 * v136;
          v138 = 4 * v136;
          v139 = (char *)(a3 + 4 * v124);
          do
          {
            v140 = v139;
            for (m = v135; m; --m)
            {
              bzero(v140, v138);
              v140 += v137;
            }
            ++v133;
            v139 += v134;
          }
          while (v133 != 3);
          v119 = 0;
          goto LABEL_89;
        }
        v125 = 0;
        v126 = (float32x4_t *)__p[0];
        v127 = (float32x4_t *)(a2 + 4 * v124);
        v128 = (float32x4_t *)(a3 + 4 * v124);
        v129 = (float32x4_t)vdupq_n_s32(0x4CBEBC20u);
        v130 = (float32x4_t)vdupq_n_s32(0x322BCC77u);
        __asm { FMOV            V2.4S, #1.0 }
        while (1)
        {
          v132 = *v126;
          if (*(_QWORD *)&vshrn_n_s16((int16x8_t)vcgeq_f32(*v126, v129), 4uLL)
            || *(_QWORD *)&vshrn_n_s16((int16x8_t)vcgtq_f32(v130, v132), 4uLL))
          {
            goto LABEL_88;
          }
          *v127++ = vdivq_f32(_Q2, v132);
          *v128++ = v132;
          v125 += 4;
          ++v126;
          if (v125 >= v15)
            goto LABEL_77;
        }
      }
    }
  }
LABEL_88:
  v119 = 1;
LABEL_89:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v119;
}

_QWORD *sub_236803F00(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2367C3404(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_236803F58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_236803F74(uint64_t a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v16[20];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  _BYTE v52[212];
  int v53;
  _BYTE v54[112];
  _BYTE v55[212];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a2[2];
  if ((unint64_t)v4 > a2[3])
  {
    sub_2367C5188(a2);
    v6 = *a2;
    v8 = a2[1];
  }
  else
  {
    v5 = a2[1];
    v6 = *a2 | (*v4 << v5);
    v7 = (char *)v4 + ((63 - v5) >> 3);
    v8 = v5 | 0x38;
    *a2 = v6;
    a2[1] = v5 | 0x38;
    a2[2] = (unint64_t)v7;
  }
  *a2 = v6 >> 1;
  a2[1] = v8 - 1;
  v9 = *(_QWORD *)(a1 + 728);
  v10 = *(_QWORD *)(a1 + 720);
  while (v9 != v10)
    v9 = sub_2367DC53C(v9 - 560);
  *(_QWORD *)(a1 + 728) = v10;
  memset(&v55[4], 0, 208);
  v56 = 0;
  memset(&v54[4], 0, 108);
  v53 = 0;
  memset(&v52[4], 0, 208);
  *(_DWORD *)v16 = 0;
  *(_OWORD *)&v16[4] = *(_OWORD *)v55;
  v17 = *(_OWORD *)&v55[16];
  v21 = *(_OWORD *)&v55[80];
  v20 = *(_OWORD *)&v55[64];
  v19 = *(_OWORD *)&v55[48];
  v18 = *(_OWORD *)&v55[32];
  v25 = *(_OWORD *)&v55[144];
  v24 = *(_OWORD *)&v55[128];
  v23 = *(_OWORD *)&v55[112];
  v22 = *(_OWORD *)&v55[96];
  v29 = 0;
  v28 = *(_OWORD *)&v55[192];
  v27 = *(_OWORD *)&v55[176];
  v26 = *(_OWORD *)&v55[160];
  v33 = *(_OWORD *)&v54[48];
  v34 = *(_OWORD *)&v54[64];
  v35 = *(_OWORD *)&v54[80];
  v36 = 0u;
  v30 = *(_OWORD *)v54;
  v31 = *(_OWORD *)&v54[16];
  v32 = *(_OWORD *)&v54[32];
  v37 = *(_OWORD *)v52;
  v38 = *(_OWORD *)&v52[16];
  v41 = *(_OWORD *)&v52[64];
  v42 = *(_OWORD *)&v52[80];
  v39 = *(_OWORD *)&v52[32];
  v40 = *(_OWORD *)&v52[48];
  v45 = *(_OWORD *)&v52[128];
  v46 = *(_OWORD *)&v52[144];
  v43 = *(_OWORD *)&v52[96];
  v44 = *(_OWORD *)&v52[112];
  v50 = 0;
  v48 = *(_OWORD *)&v52[176];
  v49 = *(_OWORD *)&v52[192];
  v47 = *(_OWORD *)&v52[160];
  v51 = 0;
  sub_236804A34((_QWORD *)(a1 + 720), v16);
  sub_2367DC53C((uint64_t)v16);
  if ((v6 & 1) == 0)
  {
    v11 = (_QWORD *)a2[2];
    if ((unint64_t)v11 > a2[3])
    {
      sub_2367C5188(a2);
      v13 = *a2;
      v14 = a2[1];
    }
    else
    {
      v12 = a2[1];
      v13 = *a2 | (*v11 << v12);
      a2[2] = (unint64_t)v11 + ((63 - v12) >> 3);
      v14 = v12 | 0x38;
    }
    *a2 = v13 >> 3;
    a2[1] = v14 - 3;
    __asm { BR              X9 }
  }
  *(_DWORD *)a1 = 0;
  return 0;
}

void sub_2368049EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_2367E2C08(&a31);
  sub_2367DC5FC((void **)&STACK[0x2E0]);
  sub_2367E2C48((uint64_t)&STACK[0x430]);
  _Unwind_Resume(a1);
}

_QWORD *sub_236804A34(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  BOOL v22;
  int64x2_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int64x2_t v29;
  char *v30;
  _QWORD *v31;

  v2 = result;
  v3 = *result;
  v4 = (_QWORD *)result[1];
  v5 = (uint64_t)v4 - *result;
  v6 = 0xAF8AF8AF8AF8AF8BLL * (v5 >> 4);
  if (v6 > 0x10)
  {
    if (v5 != 9520)
    {
      v24 = (_QWORD *)(v3 + 9520);
      while (v4 != v24)
      {
        v4 -= 70;
        result = (_QWORD *)sub_2367DC53C((uint64_t)v4);
      }
      v2[1] = v24;
    }
  }
  else
  {
    v8 = result[2];
    if (0xAF8AF8AF8AF8AF8BLL * ((v8 - (uint64_t)v4) >> 4) >= 17 - v6)
    {
      v25 = &v4[70 * (17 - v6)];
      v26 = 9520 - 16 * (v5 >> 4);
      do
      {
        result = sub_236804D7C(v4, a2);
        v4 += 70;
        v26 -= 560;
      }
      while (v26);
      v2[1] = v25;
    }
    else
    {
      v31 = result + 2;
      v9 = 0xAF8AF8AF8AF8AF8BLL * ((v8 - v3) >> 4);
      v10 = 2 * v9;
      if (2 * v9 <= 0x11)
        v10 = 17;
      if (v9 >= 0x3A83A83A83A83ALL)
        v11 = 0x75075075075075;
      else
        v11 = v10;
      v12 = (char *)sub_236804E24(v11);
      v13 = &v12[560 * v6];
      v28 = v12;
      v29.i64[0] = (uint64_t)v13;
      v29.i64[1] = (uint64_t)v13;
      v30 = &v12[560 * v14];
      v15 = v12 + 9520;
      v16 = v6 - 17;
      do
      {
        sub_236804D7C(v13, a2);
        v13 += 560;
      }
      while (!__CFADD__(v16++, 1));
      v29.i64[1] = (uint64_t)v15;
      v19 = (_QWORD *)*v2;
      v18 = v2[1];
      v20 = (_DWORD *)v29.i64[0];
      if (v18 == *v2)
      {
        v23 = vdupq_n_s64(v18);
      }
      else
      {
        v21 = (_QWORD *)(v18 - 560);
        do
        {
          v20 -= 140;
          memcpy(v20, v21, 0x229uLL);
          if (*v20 == 7)
            v21[28] = 0;
          v22 = v21 == v19;
          v21 -= 70;
        }
        while (!v22);
        v23 = *(int64x2_t *)v2;
        v15 = (char *)v29.i64[1];
      }
      *v2 = v20;
      v2[1] = v15;
      v29 = v23;
      v27 = (char *)v2[2];
      v2[2] = v30;
      v30 = v27;
      v28 = (char *)v23.i64[0];
      return (_QWORD *)sub_236804E6C((uint64_t)&v28);
    }
  }
  return result;
}

void sub_236804C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_236804C54(unint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  float *v12;
  float *v13;

  v4 = (_QWORD *)a1[2];
  if ((unint64_t)v4 > a1[3])
  {
    sub_2367C5188(a1);
    v6 = *a1;
    v7 = a1[1];
  }
  else
  {
    v5 = a1[1];
    v6 = *a1 | (*v4 << v5);
    a1[2] = (unint64_t)v4 + ((63 - v5) >> 3);
    v7 = v5 | 0x38;
  }
  v8 = 0;
  *a1 = v6 >> 4;
  a1[1] = v7 - 4;
  *a2 = (v6 & 0xF) + 1;
  v9 = 1;
  v10 = (float *)(a2 + 1);
  while (!v9)
  {
LABEL_8:
    v13 = (float *)a2 + 17 * v8 + 2;
    if (*v13 < 0.00000001)
      return 1;
    *v13 = *v13 * 64.0;
    ++v8;
    v10 += 17;
    if (v8 == 3)
      return 0;
  }
  v11 = 0;
  v12 = v10;
  while (!sub_2367F27D0(a1, v12))
  {
    ++v11;
    v9 = *a2;
    ++v12;
    if (v11 >= *a2)
      goto LABEL_8;
  }
  return 1;
}

_QWORD *sub_236804D7C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  memcpy(a1, a2, 0x229uLL);
  if (*(_DWORD *)a1 == 7 && a1[28])
  {
    v4 = (_QWORD *)operator new();
    v5 = a2[28];
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    sub_2367CBEFC(v4, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
    a1[28] = v4;
  }
  return a1;
}

void sub_236804E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7F8F48](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void *sub_236804E24(unint64_t a1)
{
  if (a1 >= 0x75075075075076)
    sub_2367C3488();
  return operator new(560 * a1);
}

uint64_t sub_236804E6C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 560;
    sub_2367DC53C(i - 560);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_236804EB8(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  float *v15;
  float v16;

  v5 = (_QWORD *)a2[2];
  v4 = a2[3];
  if ((unint64_t)v5 > v4)
  {
    sub_2367C5188(a2);
    v7 = *a2;
    v9 = a2[1];
    v8 = (char *)a2[2];
    v4 = a2[3];
  }
  else
  {
    v6 = a2[1];
    v7 = *a2 | (*v5 << v6);
    v8 = (char *)v5 + ((63 - v6) >> 3);
    a2[2] = (unint64_t)v8;
    v9 = v6 | 0x38;
  }
  v10 = v9 - 1;
  *a2 = v7 >> 1;
  a2[1] = v10;
  v11 = a2[4];
  v12 = 8 * (_QWORD)&v8[a2[5] - v11] - v10;
  a2[7] = v12;
  if (v12 > 8 * (v4 - v11) + 64)
    return 1;
  if ((v7 & 1) == 0)
  {
    v14 = 0;
    while (1)
    {
      v15 = (float *)(a1 + v14 + 48);
      if (sub_2367F27D0(a2, v15))
        break;
      v16 = *v15 * 0.0078125;
      *v15 = v16;
      if (v16 < 0.00000001)
        break;
      *(float *)(a1 + v14 + 60) = 1.0 / v16;
      v14 += 4;
      if (v14 == 12)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_236804FD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  _BYTE v51[212];
  int v52;
  _OWORD v53[7];
  _BYTE v54[212];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_2368AF640;
  *(_QWORD *)(a1 + 64) = 0x4380000044000000;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  memset(&v54[4], 0, 208);
  v55 = 0;
  *(_OWORD *)((char *)v53 + 4) = 0u;
  *(_OWORD *)((char *)&v53[1] + 4) = 0u;
  *(_OWORD *)((char *)&v53[2] + 4) = 0u;
  *(_OWORD *)((char *)&v53[3] + 4) = 0u;
  *(_OWORD *)((char *)&v53[4] + 4) = 0u;
  *(_OWORD *)((char *)&v53[5] + 4) = 0u;
  v53[6] = 0u;
  v52 = 0;
  memset(&v51[4], 0, 208);
  v14 = 0;
  v15 = *(_OWORD *)v54;
  v16 = *(_OWORD *)&v54[16];
  v20 = *(_OWORD *)&v54[80];
  v19 = *(_OWORD *)&v54[64];
  v18 = *(_OWORD *)&v54[48];
  v17 = *(_OWORD *)&v54[32];
  v24 = *(_OWORD *)&v54[144];
  v23 = *(_OWORD *)&v54[128];
  v22 = *(_OWORD *)&v54[112];
  v21 = *(_OWORD *)&v54[96];
  v28 = 0;
  v27 = *(_OWORD *)&v54[192];
  v26 = *(_OWORD *)&v54[176];
  v25 = *(_OWORD *)&v54[160];
  v32 = v53[3];
  v33 = v53[4];
  v34 = v53[5];
  v35 = 0u;
  v29 = v53[0];
  v30 = v53[1];
  v31 = v53[2];
  v36 = *(_OWORD *)v51;
  v37 = *(_OWORD *)&v51[16];
  v40 = *(_OWORD *)&v51[64];
  v41 = *(_OWORD *)&v51[80];
  v38 = *(_OWORD *)&v51[32];
  v39 = *(_OWORD *)&v51[48];
  v44 = *(_OWORD *)&v51[128];
  v45 = *(_OWORD *)&v51[144];
  v42 = *(_OWORD *)&v51[96];
  v43 = *(_OWORD *)&v51[112];
  v49 = 0;
  v47 = *(_OWORD *)&v51[176];
  v48 = *(_OWORD *)&v51[192];
  v46 = *(_OWORD *)&v51[160];
  v50 = 0;
  sub_236804A34((_QWORD *)(a1 + 720), &v14);
  sub_2367DC53C((uint64_t)&v14);
  v2 = 0;
  v3 = 0;
  v4 = &v14;
  do
  {
    v5 = 0;
    v6 = dword_2369237FC[v2] * (uint64_t)dword_2369237B8[v2];
    v7 = v3;
    do
    {
      *(_QWORD *)&v4[v5] = v7;
      v5 += 2;
      v7 += v6 << 6;
    }
    while (v5 != 6);
    v3 += 192 * v6;
    ++v2;
    v4 += 6;
  }
  while (v2 != 17);
  v8 = 72;
  v9 = &qword_236920870;
  do
  {
    v10 = a1 + v8;
    v11 = *v9++;
    v12 = &v14 + 6 * v11;
    *(_OWORD *)v10 = *(_OWORD *)v12;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)v12 + 2);
    v8 += 24;
  }
  while (v8 != 720);
  return a1;
}

void sub_2368052D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_2367DC53C((uint64_t)va);
  sub_2367DC2DC((void ***)va);
  sub_2367D7A7C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2368052F8(uint64_t a1, unsigned int a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v25;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256431398);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256431398))
  {
    dword_25642EE68[0] = 6;
    qword_25642EE70 = 6;
    xmmword_25642EF18 = xmmword_2369209E8;
    unk_25642EF28 = unk_2369209F8;
    unk_25642EF34 = unk_236920A04;
    xmmword_25642EED8 = xmmword_2369209A8;
    unk_25642EEE8 = unk_2369209B8;
    xmmword_25642EEF8 = xmmword_2369209C8;
    unk_25642EF08 = unk_2369209D8;
    xmmword_25642EE98 = xmmword_236920968;
    unk_25642EEA8 = unk_236920978;
    xmmword_25642EEB8 = xmmword_236920988;
    unk_25642EEC8 = unk_236920998;
    xmmword_25642EE78 = xmmword_236920948;
    unk_25642EE88 = unk_236920958;
    xmmword_25642EF48 = 0u;
    unk_25642EFA4 = 0u;
    xmmword_25642EF88 = 0u;
    unk_25642EF98 = 0u;
    xmmword_25642EF68 = 0u;
    unk_25642EF78 = 0u;
    xmmword_25642EF58 = 0u;
    xmmword_25642EFB8 = 0u;
    unk_25642EFC8 = 0u;
    xmmword_25642EFD8 = 0u;
    unk_25642EFE8 = 0u;
    xmmword_25642EFF8 = 0u;
    unk_25642F008 = 0u;
    xmmword_25642F018 = 0u;
    unk_25642F028 = 0u;
    xmmword_25642F038 = 0u;
    unk_25642F048 = 0u;
    xmmword_25642F058 = 0u;
    unk_25642F068 = 0u;
    xmmword_25642F078 = 0u;
    dword_25642F088 = 0;
    byte_25642F090 = 0;
    dword_25642F098 = 1;
    unk_25642F0A0 = 0u;
    unk_25642F0B0 = 0u;
    unk_25642F0C0 = 0u;
    unk_25642F0D0 = 0u;
    unk_25642F0E0 = 0u;
    unk_25642F0F0 = 0u;
    unk_25642F100 = 0u;
    unk_25642F110 = 0u;
    unk_25642F120 = 0u;
    unk_25642F130 = 0u;
    unk_25642F140 = 0u;
    unk_25642F150 = 0u;
    unk_25642F160 = 0u;
    dword_25642F170 = 0;
    dword_25642F198 = 1128792064;
    xmmword_25642F178 = xmmword_236920A18;
    unk_25642F188 = unk_236920A28;
    dword_25642F2B8 = 0;
    xmmword_25642F298 = 0u;
    unk_25642F2A8 = 0u;
    xmmword_25642F278 = 0u;
    unk_25642F288 = 0u;
    xmmword_25642F258 = 0u;
    unk_25642F268 = 0u;
    xmmword_25642F238 = 0u;
    unk_25642F248 = 0u;
    xmmword_25642F218 = 0u;
    unk_25642F228 = 0u;
    xmmword_25642F1F8 = 0u;
    unk_25642F208 = 0u;
    xmmword_25642F1E8 = 0u;
    byte_25642F2C0 = 0;
    dword_25642F2C8 = 2;
    dword_25642F3A0 = 0;
    unk_25642F390 = 0u;
    unk_25642F380 = 0u;
    unk_25642F370 = 0u;
    unk_25642F360 = 0u;
    unk_25642F350 = 0u;
    unk_25642F340 = 0u;
    unk_25642F330 = 0u;
    unk_25642F320 = 0u;
    unk_25642F310 = 0u;
    unk_25642F300 = 0u;
    unk_25642F2F0 = 0u;
    unk_25642F2E0 = 0u;
    unk_25642F2D0 = 0u;
    xmmword_25642F3A8 = xmmword_236920A40;
    qword_25642F3E8 = 0x4180000042000000;
    xmmword_25642F3D8 = unk_236920A70;
    xmmword_25642F3C8 = xmmword_236920A60;
    xmmword_25642F3B8 = unk_236920A50;
    dword_25642F4E8 = 0;
    xmmword_25642F4D8 = 0u;
    xmmword_25642F4C8 = 0u;
    xmmword_25642F4B8 = 0u;
    xmmword_25642F4A8 = 0u;
    xmmword_25642F498 = 0u;
    xmmword_25642F488 = 0u;
    xmmword_25642F478 = 0u;
    xmmword_25642F468 = 0u;
    xmmword_25642F458 = 0u;
    xmmword_25642F448 = 0u;
    xmmword_25642F438 = 0u;
    xmmword_25642F428 = 0u;
    xmmword_25642F418 = 0u;
    byte_25642F4F0 = 0;
    xmmword_25642F508 = xmmword_236920A88;
    xmmword_25642F548 = xmmword_236920AC8;
    xmmword_25642F538 = unk_236920AB8;
    xmmword_25642F528 = xmmword_236920AA8;
    xmmword_25642F518 = unk_236920A98;
    xmmword_25642F588 = xmmword_236920B08;
    xmmword_25642F578 = unk_236920AF8;
    xmmword_25642F568 = xmmword_236920AE8;
    xmmword_25642F558 = unk_236920AD8;
    *(__int128 *)((char *)&xmmword_25642F5B8 + 12) = unk_236920B44;
    xmmword_25642F5B8 = unk_236920B38;
    xmmword_25642F5A8 = xmmword_236920B28;
    xmmword_25642F598 = unk_236920B18;
    dword_25642F4F8 = 3;
    qword_25642F500 = 4;
    qword_25642F5E8 = 0x3F8000003F800000;
    xmmword_25642F5D8 = xmmword_236920B58;
    xmmword_25642F648 = 0u;
    xmmword_25642F658 = 0u;
    xmmword_25642F668 = 0u;
    xmmword_25642F678 = 0u;
    xmmword_25642F688 = 0u;
    xmmword_25642F698 = 0u;
    xmmword_25642F6A8 = 0u;
    xmmword_25642F6B8 = 0u;
    xmmword_25642F6C8 = 0u;
    xmmword_25642F6D8 = 0u;
    xmmword_25642F6E8 = 0u;
    xmmword_25642F6F8 = 0u;
    xmmword_25642F708 = 0u;
    dword_25642F718 = 0;
    byte_25642F720 = 0;
    dword_25642F728 = 6;
    qword_25642F730 = 7;
    xmmword_25642F7C8 = unk_236920C00;
    xmmword_25642F7D8 = xmmword_236920C10;
    xmmword_25642F7E8 = unk_236920C20;
    *(__int128 *)((char *)&xmmword_25642F7E8 + 12) = unk_236920C2C;
    xmmword_25642F788 = unk_236920BC0;
    xmmword_25642F798 = xmmword_236920BD0;
    xmmword_25642F7A8 = unk_236920BE0;
    xmmword_25642F7B8 = xmmword_236920BF0;
    xmmword_25642F748 = unk_236920B80;
    xmmword_25642F758 = xmmword_236920B90;
    xmmword_25642F768 = unk_236920BA0;
    xmmword_25642F778 = xmmword_236920BB0;
    xmmword_25642F738 = xmmword_236920B70;
    *(__int128 *)((char *)&xmmword_25642F858 + 12) = 0u;
    xmmword_25642F858 = 0u;
    xmmword_25642F848 = 0u;
    xmmword_25642F838 = 0u;
    xmmword_25642F828 = 0u;
    xmmword_25642F818 = 0u;
    xmmword_25642F808 = 0u;
    xmmword_25642F878 = 0u;
    xmmword_25642F888 = 0u;
    xmmword_25642F898 = 0u;
    xmmword_25642F8A8 = 0u;
    xmmword_25642F8B8 = 0u;
    xmmword_25642F8C8 = 0u;
    xmmword_25642F8D8 = 0u;
    xmmword_25642F8E8 = 0u;
    xmmword_25642F8F8 = 0u;
    xmmword_25642F908 = 0u;
    xmmword_25642F918 = 0u;
    xmmword_25642F928 = 0u;
    xmmword_25642F938 = 0u;
    dword_25642F948 = 0;
    byte_25642F950 = 0;
    dword_25642F958 = 6;
    qword_25642F960 = 8;
    xmmword_25642F9F8 = unk_236920CD0;
    xmmword_25642FA08 = xmmword_236920CE0;
    xmmword_25642FA18 = unk_236920CF0;
    *(__int128 *)((char *)&xmmword_25642FA18 + 12) = unk_236920CFC;
    xmmword_25642F9B8 = unk_236920C90;
    xmmword_25642F9C8 = xmmword_236920CA0;
    xmmword_25642F9D8 = unk_236920CB0;
    xmmword_25642F9E8 = xmmword_236920CC0;
    xmmword_25642F978 = unk_236920C50;
    xmmword_25642F988 = xmmword_236920C60;
    xmmword_25642F998 = unk_236920C70;
    xmmword_25642F9A8 = xmmword_236920C80;
    xmmword_25642F968 = xmmword_236920C40;
    *(__int128 *)((char *)&xmmword_25642FA88 + 12) = 0u;
    xmmword_25642FA88 = 0u;
    xmmword_25642FA78 = 0u;
    xmmword_25642FA68 = 0u;
    xmmword_25642FA58 = 0u;
    xmmword_25642FA48 = 0u;
    xmmword_25642FA38 = 0u;
    xmmword_25642FAA8 = 0u;
    xmmword_25642FAB8 = 0u;
    xmmword_25642FAC8 = 0u;
    xmmword_25642FAD8 = 0u;
    xmmword_25642FAE8 = 0u;
    xmmword_25642FAF8 = 0u;
    xmmword_25642FB08 = 0u;
    xmmword_25642FB18 = 0u;
    xmmword_25642FB28 = 0u;
    xmmword_25642FB38 = 0u;
    xmmword_25642FB48 = 0u;
    xmmword_25642FB58 = 0u;
    xmmword_25642FB68 = 0u;
    dword_25642FB78 = 0;
    byte_25642FB80 = 0;
    dword_25642FB88 = 6;
    qword_25642FB90 = 7;
    xmmword_25642FC28 = unk_236920DA0;
    xmmword_25642FC38 = xmmword_236920DB0;
    xmmword_25642FC48 = unk_236920DC0;
    *(__int128 *)((char *)&xmmword_25642FC48 + 12) = unk_236920DCC;
    xmmword_25642FBE8 = unk_236920D60;
    xmmword_25642FBF8 = xmmword_236920D70;
    xmmword_25642FC08 = unk_236920D80;
    xmmword_25642FC18 = xmmword_236920D90;
    xmmword_25642FBA8 = unk_236920D20;
    xmmword_25642FBB8 = xmmword_236920D30;
    xmmword_25642FBC8 = unk_236920D40;
    xmmword_25642FBD8 = xmmword_236920D50;
    xmmword_25642FB98 = xmmword_236920D10;
    *(__int128 *)((char *)&xmmword_25642FCB8 + 12) = 0u;
    xmmword_25642FCB8 = 0u;
    xmmword_25642FCA8 = 0u;
    xmmword_25642FC98 = 0u;
    xmmword_25642FC88 = 0u;
    xmmword_25642FC78 = 0u;
    xmmword_25642FC68 = 0u;
    xmmword_25642FCD8 = 0u;
    xmmword_25642FCE8 = 0u;
    xmmword_25642FCF8 = 0u;
    xmmword_25642FD08 = 0u;
    xmmword_25642FE58 = unk_236920E70;
    xmmword_25642FE68 = xmmword_236920E80;
    xmmword_25642FE78 = unk_236920E90;
    *(__int128 *)((char *)&xmmword_25642FE78 + 12) = unk_236920E9C;
    xmmword_25642FE18 = unk_236920E30;
    xmmword_25642FE28 = xmmword_236920E40;
    xmmword_25642FE38 = unk_236920E50;
    xmmword_25642FE48 = xmmword_236920E60;
    xmmword_25642FDD8 = unk_236920DF0;
    xmmword_25642FDE8 = xmmword_236920E00;
    xmmword_25642FDF8 = unk_236920E10;
    xmmword_25642FE08 = xmmword_236920E20;
    xmmword_256430088 = unk_236920F40;
    xmmword_256430098 = xmmword_236920F50;
    xmmword_2564300A8 = unk_236920F60;
    *(__int128 *)((char *)&xmmword_2564300A8 + 12) = unk_236920F6C;
    xmmword_256430048 = unk_236920F00;
    xmmword_256430058 = xmmword_236920F10;
    xmmword_256430068 = unk_236920F20;
    xmmword_256430078 = xmmword_236920F30;
    xmmword_256430008 = unk_236920EC0;
    xmmword_256430018 = xmmword_236920ED0;
    xmmword_256430028 = unk_236920EE0;
    xmmword_256430038 = xmmword_236920EF0;
    xmmword_25642FFF8 = xmmword_236920EB0;
    dword_256430300 = 1065353216;
    xmmword_256430378 = 0u;
    qword_256430220 = 4;
    __asm { FMOV            V23.2S, #1.0 }
    qword_2564302F8 = _D23;
    xmmword_256430368 = 0u;
    xmmword_256430268 = xmmword_236920FC0;
    xmmword_256430228 = xmmword_236920F80;
    dword_256430218 = 4;
    xmmword_256430238 = *(_OWORD *)algn_236920F90;
    xmmword_256430248 = xmmword_236920FA0;
    xmmword_256430258 = unk_236920FB0;
    xmmword_256430288 = xmmword_236920FE0;
    xmmword_256430298 = unk_236920FF0;
    xmmword_2564302A8 = xmmword_236921000;
    xmmword_2564301F8 = 0u;
    dword_256430208 = 0;
    xmmword_2564302D8 = unk_236921030;
    xmmword_256430278 = unk_236920FD0;
    byte_256430210 = 0;
    xmmword_2564302B8 = unk_236921010;
    xmmword_2564302C8 = xmmword_236921020;
    *(__int128 *)((char *)&xmmword_2564302D8 + 12) = unk_23692103C;
    xmmword_256430198 = 0u;
    xmmword_2564301A8 = 0u;
    xmmword_2564301B8 = 0u;
    xmmword_2564301C8 = 0u;
    xmmword_2564301D8 = 0u;
    xmmword_2564301E8 = 0u;
    xmmword_256430138 = 0u;
    xmmword_256430148 = 0u;
    xmmword_256430158 = 0u;
    xmmword_256430168 = 0u;
    xmmword_256430178 = 0u;
    xmmword_256430188 = 0u;
    xmmword_25642FD18 = 0u;
    xmmword_25642FD28 = 0u;
    xmmword_25642FD38 = 0u;
    xmmword_2564300E8 = 0u;
    xmmword_2564300D8 = 0u;
    xmmword_2564300C8 = 0u;
    *(__int128 *)((char *)&xmmword_256430118 + 12) = 0u;
    xmmword_256430118 = 0u;
    xmmword_256430108 = 0u;
    xmmword_2564300F8 = 0u;
    xmmword_25642FD48 = 0u;
    xmmword_25642FD58 = 0u;
    xmmword_25642FD68 = 0u;
    xmmword_25642FD78 = 0u;
    xmmword_25642FD88 = 0u;
    xmmword_25642FD98 = 0u;
    dword_25642FDA8 = 0;
    byte_25642FDB0 = 0;
    dword_25642FDB8 = 6;
    byte_25642FFE0 = 0;
    dword_25642FFE8 = 6;
    qword_25642FFF0 = 8;
    xmmword_25642FF88 = 0u;
    xmmword_25642FF98 = 0u;
    xmmword_25642FFA8 = 0u;
    xmmword_25642FFB8 = 0u;
    xmmword_25642FFC8 = 0u;
    dword_25642FFD8 = 0;
    xmmword_25642FF28 = 0u;
    xmmword_25642FF38 = 0u;
    xmmword_25642FF48 = 0u;
    xmmword_25642FF58 = 0u;
    xmmword_25642FF68 = 0u;
    xmmword_25642FF78 = 0u;
    qword_25642FDC0 = 8;
    xmmword_25642FDC8 = xmmword_236920DE0;
    xmmword_25642FEA8 = 0u;
    xmmword_25642FE98 = 0u;
    xmmword_25642FF08 = 0u;
    xmmword_25642FF18 = 0u;
    *(__int128 *)((char *)&xmmword_25642FEE8 + 12) = 0u;
    xmmword_25642FEE8 = 0u;
    xmmword_25642FED8 = 0u;
    xmmword_25642FEC8 = 0u;
    xmmword_25642FEB8 = 0u;
    xmmword_256430388 = 0u;
    xmmword_256430398 = 0u;
    xmmword_2564303A8 = 0u;
    xmmword_2564303B8 = 0u;
    xmmword_2564303C8 = 0u;
    xmmword_2564303D8 = 0u;
    xmmword_2564303E8 = 0u;
    xmmword_2564303F8 = 0u;
    xmmword_256430408 = 0u;
    xmmword_256430418 = 0u;
    xmmword_256430428 = 0u;
    dword_256430438 = 0;
    byte_256430440 = 0;
    dword_256430448 = 5;
    qword_256430450 = 4;
    xmmword_2564304E8 = unk_236921010;
    xmmword_2564304F8 = xmmword_236921020;
    xmmword_256430508 = unk_236921030;
    *(__int128 *)((char *)&xmmword_256430508 + 12) = unk_23692103C;
    xmmword_2564304A8 = unk_236920FD0;
    xmmword_2564304B8 = xmmword_236920FE0;
    xmmword_2564304C8 = unk_236920FF0;
    xmmword_2564304D8 = xmmword_236921000;
    xmmword_256430468 = *(_OWORD *)algn_236920F90;
    xmmword_256430478 = xmmword_236920FA0;
    xmmword_256430488 = unk_236920FB0;
    xmmword_256430498 = xmmword_236920FC0;
    xmmword_256430458 = xmmword_236920F80;
    xmmword_256430558 = unk_236921080;
    xmmword_256430568 = xmmword_236921090;
    xmmword_256430578 = unk_2369210A0;
    *(__int128 *)((char *)&xmmword_256430578 + 12) = unk_2369210AC;
    xmmword_256430528 = xmmword_236921050;
    xmmword_256430538 = unk_236921060;
    xmmword_256430548 = xmmword_236921070;
    qword_256430598 = 4;
    unk_2564305A0 = xmmword_236920A88;
    unk_2564305E0 = xmmword_236920AC8;
    unk_2564305D0 = unk_236920AB8;
    unk_2564305C0 = xmmword_236920AA8;
    unk_2564305B0 = unk_236920A98;
    unk_256430620 = xmmword_236920B08;
    unk_256430610 = unk_236920AF8;
    unk_256430600 = xmmword_236920AE8;
    unk_2564305F0 = unk_236920AD8;
    unk_25643065C = unk_236920B44;
    xmmword_256430738 = unk_236921170;
    unk_256430650 = unk_236920B38;
    unk_256430640 = xmmword_236920B28;
    unk_256430630 = unk_236920B18;
    byte_256430670 = 0;
    dword_256430678 = 6;
    qword_256430680 = 8;
    xmmword_256430718 = unk_236921150;
    xmmword_256430728 = xmmword_236921160;
    *(__int128 *)((char *)&xmmword_256430738 + 12) = unk_23692117C;
    xmmword_2564306D8 = unk_236921110;
    xmmword_2564306E8 = xmmword_236921120;
    xmmword_2564306F8 = unk_236921130;
    xmmword_256430708 = xmmword_236921140;
    xmmword_256430698 = unk_2369210D0;
    xmmword_2564306A8 = xmmword_2369210E0;
    xmmword_2564306B8 = unk_2369210F0;
    xmmword_2564306C8 = xmmword_236921100;
    xmmword_256430688 = xmmword_2369210C0;
    *(__int128 *)((char *)&xmmword_2564307A8 + 12) = 0u;
    xmmword_2564307A8 = 0u;
    xmmword_256430798 = 0u;
    xmmword_256430788 = 0u;
    xmmword_256430778 = 0u;
    xmmword_256430768 = 0u;
    xmmword_256430758 = 0u;
    xmmword_2564307C8 = 0u;
    xmmword_2564307D8 = 0u;
    xmmword_2564307E8 = 0u;
    xmmword_2564307F8 = 0u;
    xmmword_256430808 = 0u;
    xmmword_256430818 = 0u;
    xmmword_256430828 = 0u;
    xmmword_256430838 = 0u;
    xmmword_256430848 = 0u;
    xmmword_256430858 = 0u;
    xmmword_256430868 = 0u;
    xmmword_256430878 = 0u;
    xmmword_256430888 = 0u;
    dword_256430898 = 0;
    byte_2564308A0 = 0;
    dword_2564308A8 = 6;
    qword_2564308B0 = 8;
    xmmword_256430948 = unk_236921220;
    xmmword_256430958 = xmmword_236921230;
    xmmword_256430968 = unk_236921240;
    *(__int128 *)((char *)&xmmword_256430968 + 12) = unk_23692124C;
    xmmword_256430908 = unk_2369211E0;
    xmmword_256430918 = xmmword_2369211F0;
    xmmword_256430928 = unk_236921200;
    xmmword_256430938 = xmmword_236921210;
    xmmword_2564308C8 = unk_2369211A0;
    xmmword_2564308D8 = xmmword_2369211B0;
    xmmword_2564308E8 = unk_2369211C0;
    xmmword_2564308F8 = xmmword_2369211D0;
    xmmword_2564308B8 = xmmword_236921190;
    *(__int128 *)((char *)&xmmword_2564309D8 + 12) = 0u;
    xmmword_2564309D8 = 0u;
    xmmword_2564309C8 = 0u;
    xmmword_2564309B8 = 0u;
    xmmword_2564309A8 = 0u;
    xmmword_256430998 = 0u;
    xmmword_256430988 = 0u;
    xmmword_2564309F8 = 0u;
    xmmword_256430A08 = 0u;
    xmmword_256430A18 = 0u;
    xmmword_256430A28 = 0u;
    xmmword_256430A38 = 0u;
    xmmword_256430A48 = 0u;
    xmmword_256430A58 = 0u;
    xmmword_256430A68 = 0u;
    xmmword_256430A78 = 0u;
    xmmword_256430A88 = 0u;
    xmmword_256430A98 = 0u;
    xmmword_256430AA8 = 0u;
    xmmword_256430AB8 = 0u;
    dword_256430AC8 = 0;
    byte_256430AD0 = 0;
    dword_256430AD8 = 6;
    qword_256430AE0 = 8;
    xmmword_256430B78 = unk_2369212F0;
    xmmword_256430B88 = xmmword_236921300;
    xmmword_256430B98 = unk_236921310;
    *(__int128 *)((char *)&xmmword_256430B98 + 12) = unk_23692131C;
    xmmword_256430B38 = unk_2369212B0;
    xmmword_256430B48 = xmmword_2369212C0;
    xmmword_256430B58 = unk_2369212D0;
    xmmword_256430B68 = xmmword_2369212E0;
    xmmword_256430AF8 = unk_236921270;
    xmmword_256430B08 = xmmword_236921280;
    xmmword_256430B18 = unk_236921290;
    xmmword_256430B28 = xmmword_2369212A0;
    xmmword_256430AE8 = xmmword_236921260;
    *(__int128 *)((char *)&xmmword_256430C08 + 12) = 0u;
    xmmword_256430C08 = 0u;
    xmmword_256430BF8 = 0u;
    xmmword_256430BE8 = 0u;
    xmmword_256430BD8 = 0u;
    xmmword_256430BC8 = 0u;
    xmmword_256430BB8 = 0u;
    xmmword_256430C28 = 0u;
    xmmword_256430C38 = 0u;
    xmmword_256430C48 = 0u;
    xmmword_256430C58 = 0u;
    xmmword_256430C68 = 0u;
    xmmword_256430C78 = 0u;
    xmmword_256430C88 = 0u;
    xmmword_256430C98 = 0u;
    xmmword_256430CA8 = 0u;
    xmmword_256430CB8 = 0u;
    xmmword_256430CC8 = 0u;
    xmmword_256430DC8 = unk_2369213E0;
    xmmword_256430CD8 = 0u;
    xmmword_256430CE8 = 0u;
    dword_256430CF8 = 0;
    byte_256430D00 = 0;
    dword_256430D08 = 6;
    qword_256430D10 = 8;
    xmmword_256430DA8 = unk_2369213C0;
    xmmword_256430DB8 = xmmword_2369213D0;
    *(__int128 *)((char *)&xmmword_256430DC8 + 12) = unk_2369213EC;
    xmmword_256430D68 = unk_236921380;
    xmmword_256430D78 = xmmword_236921390;
    xmmword_256430D88 = unk_2369213A0;
    xmmword_256430D98 = xmmword_2369213B0;
    xmmword_256430D28 = unk_236921340;
    xmmword_256430D38 = xmmword_236921350;
    xmmword_256430D48 = unk_236921360;
    xmmword_256430D58 = xmmword_236921370;
    xmmword_256430D18 = xmmword_236921330;
    *(__int128 *)((char *)&xmmword_256430E38 + 12) = 0u;
    xmmword_256430E38 = 0u;
    xmmword_256430E28 = 0u;
    xmmword_256430E18 = 0u;
    xmmword_256430E08 = 0u;
    xmmword_256430DF8 = 0u;
    xmmword_256430DE8 = 0u;
    xmmword_256430E58 = 0u;
    xmmword_256430E68 = 0u;
    xmmword_256430E78 = 0u;
    xmmword_256430E88 = 0u;
    xmmword_256430E98 = 0u;
    xmmword_256430EA8 = 0u;
    xmmword_256430EB8 = 0u;
    xmmword_256430EC8 = 0u;
    xmmword_256430ED8 = 0u;
    xmmword_256430EE8 = 0u;
    xmmword_256430EF8 = 0u;
    xmmword_256430F08 = 0u;
    xmmword_256430F18 = 0u;
    dword_256430F28 = 0;
    byte_256430F30 = 0;
    dword_256430F38 = 6;
    qword_256430F40 = 8;
    xmmword_256430FD8 = unk_236921490;
    xmmword_256430FE8 = xmmword_2369214A0;
    xmmword_256430FF8 = unk_2369214B0;
    *(__int128 *)((char *)&xmmword_256430FF8 + 12) = unk_2369214BC;
    xmmword_256430F98 = unk_236921450;
    xmmword_256430FA8 = xmmword_236921460;
    xmmword_256430FB8 = unk_236921470;
    xmmword_256430FC8 = xmmword_236921480;
    xmmword_256430F58 = unk_236921410;
    xmmword_256430F68 = xmmword_236921420;
    xmmword_256430F78 = unk_236921430;
    xmmword_256430F88 = xmmword_236921440;
    xmmword_256430F48 = xmmword_236921400;
    *(__int128 *)((char *)&xmmword_256431068 + 12) = 0u;
    xmmword_256431068 = 0u;
    xmmword_256431058 = 0u;
    xmmword_256431048 = 0u;
    xmmword_256431038 = 0u;
    xmmword_256431028 = 0u;
    xmmword_256431018 = 0u;
    xmmword_256431088 = 0u;
    xmmword_256431098 = 0u;
    xmmword_2564310A8 = 0u;
    xmmword_2564310B8 = 0u;
    xmmword_2564310C8 = 0u;
    xmmword_2564310D8 = 0u;
    xmmword_2564310E8 = 0u;
    xmmword_2564310F8 = 0u;
    xmmword_256431108 = 0u;
    xmmword_256431118 = 0u;
    xmmword_256431128 = 0u;
    xmmword_256431138 = 0u;
    xmmword_256431148 = 0u;
    dword_256431158 = 0;
    byte_256431160 = 0;
    dword_256431168 = 6;
    qword_256431170 = 8;
    xmmword_256431208 = unk_236921560;
    xmmword_256431218 = xmmword_236921570;
    xmmword_256431228 = unk_236921580;
    *(__int128 *)((char *)&xmmword_256431228 + 12) = unk_23692158C;
    xmmword_2564311C8 = unk_236921520;
    xmmword_2564311D8 = xmmword_236921530;
    xmmword_2564311E8 = unk_236921540;
    xmmword_2564311F8 = xmmword_236921550;
    xmmword_256431188 = unk_2369214E0;
    xmmword_256431198 = xmmword_2369214F0;
    xmmword_2564311A8 = unk_236921500;
    xmmword_2564311B8 = xmmword_236921510;
    xmmword_256431178 = xmmword_2369214D0;
    *(__int128 *)((char *)&xmmword_256431298 + 12) = 0u;
    xmmword_256431298 = 0u;
    xmmword_256431288 = 0u;
    xmmword_256431278 = 0u;
    xmmword_256431268 = 0u;
    xmmword_256431258 = 0u;
    xmmword_256431248 = 0u;
    xmmword_2564312B8 = 0u;
    xmmword_2564312C8 = 0u;
    xmmword_2564312D8 = 0u;
    xmmword_2564312E8 = 0u;
    xmmword_2564312F8 = 0u;
    xmmword_256431308 = 0u;
    xmmword_256431318 = 0u;
    xmmword_256431328 = 0u;
    xmmword_256431338 = 0u;
    xmmword_256431348 = 0u;
    xmmword_256431358 = 0u;
    xmmword_256431368 = 0u;
    xmmword_256431378 = 0u;
    dword_256431388 = 0;
    byte_256431390 = 0;
    __cxa_guard_release(&qword_256431398);
  }
  v5 = (uint64_t *)(a1 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    do
      v6 = __ldxr(&qword_25642E998);
    while (__stxr(v6 + 1, &qword_25642E998));
    v7 = (unint64_t)malloc_type_malloc(0x303100uLL, 0xFBCB090DuLL);
    if (v7)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFF80;
      v9 = (v7 & 0xFFFFFFFFFFFFFF80) + 256;
      *(_QWORD *)(v8 + 240) = v7;
      *(_QWORD *)(v8 + 248) = 3158016;
    }
    else
    {
      v9 = 0;
    }
    v32 = 0;
    v33 = 0uLL;
    sub_2367DA3D0((uint64_t *)(a1 + 8), v9);
    *(_OWORD *)(a1 + 16) = 0uLL;
    sub_2367D7A7C(&v32);
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v10 + 1579008;
  }
  v11 = 0;
  v12 = 0;
  v13 = &v32;
  do
  {
    v14 = 0;
    v15 = dword_2369237FC[v12] * (uint64_t)dword_2369237B8[v12];
    v16 = v11;
    do
    {
      v13[v14++] = v16;
      v16 += v15 << 6;
    }
    while (v14 != 3);
    v11 += 192 * v15;
    ++v12;
    v13 += 3;
  }
  while (v12 != 17);
  v17 = 0;
  v18 = 0;
  v34 = 394752;
  do
  {
    if (((a2 >> v17) & 1) != 0)
      v18 |= 1 << LODWORD(qword_236920870[v17]);
    ++v17;
  }
  while (v17 != 27);
  v19 = 0;
  v20 = 0;
  do
  {
    if (((*(_DWORD *)a1 >> v19) & 1) != 0)
      v20 |= 1 << LODWORD(qword_236920870[v19]);
    ++v19;
  }
  while (v19 != 27);
  v21 = 0;
  v22 = 0;
  v23 = &v32;
  do
  {
    if (((1 << v22) & v20) == 0 && ((1 << v22) & v18) != 0)
    {
      v31 = *v23;
      v25 = (_DWORD *)(*(_QWORD *)(a1 + 720) + v21 * 4);
      if (*v25)
      {
        result = sub_2368035D0((uint64_t)v25, *v5, *v5 + 1579008, v22, &v31);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        sub_2368035D0((uint64_t)&dword_25642EE68[v21], *v5, *v5 + 1579008, v22, &v31);
      }
    }
    ++v22;
    v21 += 140;
    v23 += 3;
  }
  while (v22 != 17);
  result = 0;
  *(_DWORD *)a1 |= a2;
  return result;
}

void sub_236806230()
{
  JUMPOUT(0x23B7F8F48);
}

uint64_t sub_236806244(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x1002A0000002ALL, 0x4002F0002002BLL, 1, a1 + 8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 0x2480000010, 0x2F00000027, 1, a1 + 12);
  return result;
}

uint64_t sub_2368062D0(uint64_t result)
{
  uint64_t v1;
  double v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  float *v7;

  v1 = 0;
  v2 = (double)*(int *)(result + 32);
  v3 = v2 * 0.0000152587891;
  v4 = 65536.0 / v2;
  *(float *)(result + 40) = v4;
  *(float *)(result + 44) = v3;
  v5 = (float)*(int *)(result + 36);
  *(float *)(result + 48) = v4 / v5;
  v6 = *(_QWORD *)(result + 64) + 60;
  do
  {
    v7 = (float *)(result + v1);
    *v7 = *(float *)(result + 48) * *(float *)(v6 + v1 - 12);
    v7[4] = *(float *)(v6 + v1) * (float)(*(float *)(result + 44) * v5);
    v1 += 4;
  }
  while (v1 != 12);
  return result;
}

uint64_t sub_236806354(uint64_t a1, float a2, float a3, float a4)
{
  float v6;
  int v7;
  int v8;
  int v9;

  v6 = (float)((float)(a3 - a4) * 65536.0) / 5.0;
  if (v6 < 1.0)
    v6 = 1.0;
  if (v6 > 32768.0)
    v6 = 32768.0;
  v7 = (int)v6;
  v8 = (int)((float)(a2 * 4096.0) * 1.6);
  if (v8 <= 1)
    v9 = 1;
  else
    v9 = (int)((float)(a2 * 4096.0) * 1.6);
  if (v7 > v8)
    v7 = v9;
  *(_DWORD *)(a1 + 32) = v7;
  sub_2368062D0(a1);
  *(_DWORD *)(a1 + 36) = (int)fminf((float)(a2 * *(float *)(a1 + 40)) + 0.5, 65536.0);
  return sub_2368062D0(a1);
}

uint64_t sub_236806404(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  float *v13;
  _DWORD *v14;
  uint64_t v15;
  float v16;
  float v17;

  v5 = a4[3];
  if (v5)
  {
    v6 = 0;
    v7 = a4[1];
    v8 = *(_QWORD *)(a5 + 16);
    v9 = *(_QWORD *)(a5 + 24) + v7 * v8 + 4 * *a4;
    v10 = a4[2];
    v11 = (float *)(a3 + v7 * a2 + 4 * *a4);
    do
    {
      if (v10)
      {
        v12 = *(float *)(result + 40);
        v13 = v11;
        v14 = (_DWORD *)v9;
        v15 = v10;
        do
        {
          v16 = *v13++;
          v17 = (float)(v16 * v12) + 0.5;
          if (v17 > 256.0)
            v17 = 256.0;
          *v14++ = (int)fmaxf(v17, 1.0);
          --v15;
        }
        while (v15);
      }
      ++v6;
      v9 += v8;
      v11 = (float *)((char *)v11 + a2);
    }
    while (v6 != v5);
  }
  return result;
}

void sub_236806494(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  float *v22;
  float *v23;
  unint64_t v24;
  float *v25;
  float v26;
  unint64_t v27;
  float *v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;
  float *v32;
  float *v33;
  void *__p;
  float *v35;

  sub_236803F00(&__p, a2[1] * (unint64_t)*a2);
  v8 = a2[1];
  v9 = __p;
  if ((_DWORD)v8)
  {
    v10 = 0;
    v12 = *((_QWORD *)a2 + 2);
    v11 = (int *)*((_QWORD *)a2 + 3);
    v13 = *a2;
    v14 = (char *)__p;
    do
    {
      v15 = v11;
      v16 = v14;
      v17 = v13;
      if ((_DWORD)v13)
      {
        do
        {
          v18 = *v15++;
          *v16++ = v18;
          --v17;
        }
        while (v17);
      }
      ++v10;
      v14 += 4 * v13;
      v11 = (int *)((char *)v11 + v12);
    }
    while (v10 != v8);
  }
  v19 = ((char *)v35 - v9) >> 2;
  v20 = v19 >> 1;
  if (&v9[4 * (v19 >> 1)] != (_BYTE *)v35)
  {
    sub_23680665C((uint64_t)v9, (float *)&v9[4 * (v19 >> 1)], v35);
    v9 = __p;
    v19 = ((char *)v35 - (_BYTE *)__p) >> 2;
    v20 = v19 >> 1;
  }
  v21 = *(float *)&v9[4 * v20];
  sub_236803F00(&v32, v19);
  v22 = (float *)__p;
  v23 = v32;
  if (v35 != __p)
  {
    v24 = ((char *)v35 - (_BYTE *)__p) >> 2;
    if (v24 <= 1)
      v24 = 1;
    v25 = v32;
    do
    {
      v26 = *v22++;
      *v25++ = vabds_f32(v26, v21);
      --v24;
    }
    while (v24);
  }
  v27 = (unint64_t)(v33 - v23) >> 1;
  v28 = &v23[v27];
  if (v28 != v33)
  {
    sub_23680665C((uint64_t)v23, v28, v33);
    v23 = v32;
    v27 = (unint64_t)(v33 - v32) >> 1;
  }
  sub_236806354(a1, a4, v21, v23[v27]);
  if (!a3
    || (v30[0] = 0,
        v30[1] = 0,
        *(_QWORD *)&v29 = *(_QWORD *)a2,
        *((_QWORD *)&v29 + 1) = HIDWORD(*(_QWORD *)a2),
        v31 = v29,
        sub_236806404(a1, *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), v30, a3),
        (v23 = v32) != 0))
  {
    v33 = v23;
    operator delete(v23);
  }
  if (__p)
  {
    v35 = (float *)__p;
    operator delete(__p);
  }
}

void sub_236806640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23680665C(uint64_t result, float *a2, float *a3)
{
  float *v3;
  float *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  float *v41;
  float *v42;
  float *v43;
  float v44;
  float v45;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (float *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return sub_236806928(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v36 = *(v3 - 1);
        v37 = *v5;
        if (v36 < *v5)
        {
          *v5 = v36;
          *(v3 - 1) = v37;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 31)
      {
        while (v5 != v3 - 1)
        {
          v38 = v5++;
          if (v38 != v3 && v5 != v3)
          {
            v39 = *v38;
            v40 = *v38;
            v41 = v5;
            v42 = v38;
            v43 = v5;
            do
            {
              v44 = *v43++;
              v45 = v44;
              if (v44 < v40)
              {
                v40 = v45;
                v42 = v41;
              }
              v41 = v43;
            }
            while (v43 != v3);
            if (v42 != v38)
            {
              *v38 = *v42;
              *v42 = v39;
            }
          }
        }
        return result;
      }
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = sub_236806928(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 < *v7)
      {
LABEL_12:
        v14 = v5 + 1;
        if (v5 + 1 >= v8)
        {
          v17 = v5 + 1;
        }
        else
        {
          v15 = v5 + 1;
          while (1)
          {
            v16 = *v7;
            do
            {
              v17 = v15;
              v18 = *v15++;
              v19 = v18;
            }
            while (v18 < v16);
            do
            {
              v20 = *--v8;
              v21 = v20;
            }
            while (v20 >= v16);
            if (v17 >= v8)
              break;
            *v17 = v21;
            *v8 = v19;
            result = (result + 1);
            if (v7 == v17)
              v7 = v8;
          }
        }
        if (v17 != v7)
        {
          v22 = *v17;
          if (*v7 < *v17)
          {
            *v17 = *v7;
            *v7 = v22;
            result = (result + 1);
          }
        }
        if (v17 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v17 <= a2)
          {
            v28 = v17 + 1;
            while (v28 != v3)
            {
              v30 = *(v28 - 1);
              v29 = *v28++;
              if (v29 < v30)
                goto LABEL_27;
            }
          }
          else
          {
            while (v14 != v17)
            {
              v25 = *(v14 - 1);
              v24 = *v14++;
              if (v24 < v25)
                goto LABEL_27;
            }
          }
          return result;
        }
LABEL_27:
        if (v17 <= a2)
        {
          v23 = v17 + 1;
        }
        else
        {
          v3 = v17;
          v23 = v5;
        }
      }
      else
      {
        v10 = v3 - 2;
        while (v10 != v5)
        {
          v11 = v10;
          v12 = *v10--;
          v13 = v12;
          if (v12 < *v7)
          {
            *v5 = v13;
            *v11 = v9;
            result = (result + 1);
            v8 = v11;
            goto LABEL_12;
          }
        }
        v26 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v26 != v8)
          {
            v27 = *v26;
            if (v9 < *v26)
            {
              *v26++ = *v8;
              *v8 = v27;
              goto LABEL_43;
            }
            ++v26;
          }
          return result;
        }
LABEL_43:
        if (v26 == v8)
          return result;
        while (1)
        {
          v31 = *v5;
          do
          {
            v23 = v26;
            v32 = *v26++;
            v33 = v32;
          }
          while (v31 >= v32);
          do
          {
            v34 = *--v8;
            v35 = v34;
          }
          while (v31 < v34);
          if (v23 >= v8)
            break;
          *v23 = v35;
          *v8 = v33;
        }
        if (v23 > a2)
          return result;
      }
      v5 = v23;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_236806928(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

void sub_2368069B0(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_2367C3440();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_2367CA1FC(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void *sub_236806A44(unint64_t a1)
{
  if (a1 >= 0x7A44C6AFC2DD9DLL)
    sub_2367C3488();
  return operator new(536 * a1);
}

uint64_t *sub_236806A8C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7 - 536;
      v9 = v4 + v7 - 536;
      *(_QWORD *)(v8 + 16) = 0;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v6 + v7 - 520) = *(_QWORD *)(v4 + v7 - 520);
      *(_QWORD *)(v9 + 16) = 0;
      *(_OWORD *)v9 = 0u;
      result = (uint64_t *)memcpy((void *)(v6 + v7 - 512), (const void *)(v4 + v7 - 512), 0x200uLL);
      v7 -= 536;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_236806B68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 536;
    v4 = *(void **)(v2 - 536);
    if (v4)
    {
      *(_QWORD *)(v2 - 528) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 536;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

float (__cdecl *sub_236806BCC(float (__cdecl *result)(float, float *), uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8))(float, float *)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v33;
  float32x4_t v34;
  uint64_t v35;
  __int128 *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  int32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int8x8_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int8x8_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float v79;
  uint64_t v80;
  const float *v81;
  float32x2_t v82;
  _QWORD v83[4];

  v83[3] = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = a4[1];
  v10 = a2 - 4 * *a4;
  v83[0] = (char *)result - 4 * *a4;
  v83[1] = v10;
  v83[2] = a3 - 4 * v8;
  v11 = *(_QWORD *)(a8 + 8 * v9);
  v12 = v9 + 1;
  if (v11 < *(_QWORD *)(a8 + 8 * (v9 + 1)))
  {
    v13 = (float)v9;
    v14 = a6 + 20;
    v15 = (float32x2_t)vdup_n_s32(0x3EB504F3u);
    v16 = (float32x2_t)vdup_n_s32(0x3D9F35DBu);
    v17 = (float32x2_t)vdup_n_s32(0x39573B11u);
    v18 = (float32x2_t)vdup_n_s32(0x3E6DB0ECu);
    v19 = (float32x2_t)vdup_n_s32(0x3E8E3E87u);
    __asm { FMOV            V18.2S, #1.0 }
    v25 = (float32x2_t)vdup_n_s32(0xBEB504F3);
    result = modff;
    v26 = (float32x4_t)vdupq_n_s32(0x3EB504F3u);
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v28 = (float32x4_t)vdupq_n_s32(0x3D9F35DBu);
    v29 = (float32x4_t)vdupq_n_s32(0x39573B11u);
    v30 = (float32x4_t)vdupq_n_s32(0x3E6DB0ECu);
    v31 = (float32x4_t)vdupq_n_s32(0x3E8E3E87u);
    __asm { FMOV            V28.4S, #1.0 }
    v33.i64[0] = 0x8000000080000000;
    v33.i64[1] = 0x8000000080000000;
    v34 = (float32x4_t)vdupq_n_s32(0xBEB504F3);
    do
    {
      v35 = *(_QWORD *)(a7 + 8 * v11);
      v36 = (__int128 *)(a6 + 32 * v35);
      v37 = *((float *)v36 + 2);
      v38 = (uint64_t)(float)((float)(*(float *)v36 - v37) + 0.5);
      if (v38 <= *a4)
        v38 = *a4;
      v39 = (uint64_t)(float)((float)(*(float *)v36 + v37) + 1.5);
      if (v39 >= a4[2] + *a4)
        v39 = a4[2] + *a4;
      v40 = v38 + 4;
      if (v38 + 4 <= v39)
      {
        v42 = (__int128 *)((char *)v36 + 12);
        result = (float (__cdecl *)(float, float *))(v36 + 1);
        do
        {
          v43 = 0;
          v41 = v40;
          v44 = *v36;
          v45 = vsubq_f32(vcvtq_f32_s32(vaddq_s32(vdupq_n_s32(v38), (int32x4_t)xmmword_2368AF650)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36, 0));
          *(float *)&v44 = (float)(v13 - COERCE_FLOAT(HIDWORD(*(_QWORD *)v36)))
                         * (float)(v13 - COERCE_FLOAT(HIDWORD(*(_QWORD *)v36)));
          v46 = vsqrtq_f32(vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v44, 0), v45, v45));
          v47 = vmulq_n_f32(vmlaq_f32(v26, v27, v46), COERCE_FLOAT(*v42));
          v48 = (int8x16_t)vclezq_f32(v47);
          v49 = vabsq_f32(v47);
          v50 = vmlaq_f32(_Q28, v49, vmlaq_f32(v31, v49, vmlaq_f32(v30, v49, vmlaq_f32(v29, v28, v49))));
          v51 = vdivq_f32(_Q28, vmulq_f32(v50, v50));
          v52 = vmulq_n_f32(vmlaq_f32(v34, v27, v46), COERCE_FLOAT(*v42));
          v53 = (int8x16_t)vclezq_f32(v52);
          v54 = vabsq_f32(v52);
          v55 = vmlaq_f32(_Q28, v54, vmlaq_f32(v31, v54, vmlaq_f32(v30, v54, vmlaq_f32(v29, v28, v54))));
          v56 = vdivq_f32(_Q28, vmulq_f32(v55, v55));
          v57 = vsubq_f32((float32x4_t)veorq_s8(vandq_s8(v48, v33), (int8x16_t)vmlsq_f32(_Q28, v51, v51)), (float32x4_t)veorq_s8(vandq_s8(v53, v33), (int8x16_t)vmlsq_f32(_Q28, v56, v56)));
          v58 = vmulq_n_f32(vmulq_f32(v57, v57), COERCE_FLOAT(*(_OWORD *)result));
          do
          {
            v59 = *(float *)(v14 + 32 * v35 + 4 * v43);
            if (!a5)
              v59 = -v59;
            *(float32x4_t *)(v83[v43] + 4 * v38) = vmlaq_n_f32(*(float32x4_t *)(v83[v43] + 4 * v38), v58, v59);
            ++v43;
          }
          while (v43 != 3);
          v40 += 4;
          v38 = v41;
        }
        while (v41 + 4 <= v39);
      }
      else
      {
        v41 = v38;
      }
      if (v41 < v39)
      {
        v60 = a6 + 32 * v35;
        v61 = (_QWORD *)(v60 + 12);
        v62 = (_QWORD *)(v60 + 16);
        v63 = v14 + 32 * v35;
        do
        {
          result = 0;
          v64 = *(int32x2_t *)v36;
          v65 = vsub_f32(vcvt_f32_s32(vadd_s32(vdup_n_s32(v41), (int32x2_t)0x100000000)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36, 0));
          *(float *)v64.i32 = (float)(v13 - COERCE_FLOAT(HIDWORD(*(_QWORD *)v36)))
                            * (float)(v13 - COERCE_FLOAT(HIDWORD(*(_QWORD *)v36)));
          v66 = vsqrt_f32(vmla_f32((float32x2_t)vdup_lane_s32(v64, 0), v65, v65));
          v67 = vmul_n_f32(vmla_f32(v15, (float32x2_t)0x3F0000003F000000, v66), COERCE_FLOAT(*v61));
          v68 = (int8x8_t)vclez_f32(v67);
          v69 = vabs_f32(v67);
          v70 = vmla_f32(_D18, v69, vmla_f32(v19, v69, vmla_f32(v18, v69, vmla_f32(v17, v16, v69))));
          v71 = vdiv_f32(_D18, vmul_f32(v70, v70));
          v72 = vmul_n_f32(vmla_f32(v25, (float32x2_t)0x3F0000003F000000, v66), COERCE_FLOAT(*v61));
          v73 = (int8x8_t)vclez_f32(v72);
          v74 = vabs_f32(v72);
          v75 = vmla_f32(_D18, v74, vmla_f32(v19, v74, vmla_f32(v18, v74, vmla_f32(v17, v16, v74))));
          v76 = vdiv_f32(_D18, vmul_f32(v75, v75));
          v77 = vsub_f32((float32x2_t)veor_s8(vand_s8(v68, (int8x8_t)0x8000000080000000), (int8x8_t)vmls_f32(_D18, v71, v71)), (float32x2_t)veor_s8(vand_s8(v73, (int8x8_t)0x8000000080000000), (int8x8_t)vmls_f32(_D18, v76, v76)));
          v78 = vmul_n_f32(vmul_f32(v77, v77), COERCE_FLOAT(*v62));
          do
          {
            v79 = *(float *)(v63 + 4 * (_QWORD)result);
            v80 = v83[(_QWORD)result];
            v81 = (const float *)(v80 + 4 * v41);
            v82 = vld1_dup_f32(v81);
            if (!a5)
              v79 = -v79;
            *(_DWORD *)(v80 + 4 * v41) = vmla_n_f32(v82, v78, v79).u32[0];
            result = (float (__cdecl *)(float, float *))((char *)result + 1);
          }
          while (result != (float (__cdecl *)(float, float *))3);
          ++v41;
        }
        while (v41 != v39);
      }
      ++v11;
    }
    while (v11 < *(_QWORD *)(a8 + 8 * v12));
  }
  return result;
}

uint64_t sub_236806FC4(_QWORD *a1, uint64_t a2, unint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  int32x2_t v22;
  int32x2_t v23;
  float *v24;
  float v25;
  float v26;
  float v30;
  float v31;
  char *v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  char *v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v55;
  float v58;
  float v59;
  float *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  float *v66;
  float *v67;
  uint64_t v68;
  char *v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  const float *v78;
  float32x4_t v79;
  int64x2_t v80;
  int64x2_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64x2_t v89;
  float32x4_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  float32x4_t v96;
  int64x2_t v97;
  int64x2_t v98;
  uint64_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  uint64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  unint64_t v110;
  void *v111;
  float *v112;
  float v113;
  float v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int64x2_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int64x2_t v127;
  char *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t *v132;
  float v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t *v136;
  uint64_t v137;
  float32x2_t *v138;
  float32x2_t *v139;
  float32x2_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  float32x2_t v144;
  unint64_t v145;
  unint64_t v146;
  float32x2_t *v147;
  uint64_t v148;
  float32x2_t *v149;
  unint64_t v150;
  unint64_t v151;
  float32x2_t *v152;
  uint64_t v153;
  float32x2_t *v154;
  float32x2_t *v155;
  uint64_t v156;
  float32x2_t *v157;
  float32x2_t *v158;
  float32x2_t *v159;
  float32x2_t v160;
  int64_t v161;
  void *v162;
  uint64_t v163;
  float32x2_t v164;
  float32x2_t *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  float32x2_t *v170;
  float32x2_t v171;
  float *v172;
  float32x2_t *v173;
  uint64_t v174;
  char *v175;
  float *v176;
  float32x2_t *v177;
  float32x2_t *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  float32x2_t *v184;
  float32x2_t v185;
  uint64_t v186;
  float v187;
  float v188;
  float *v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float *v194;
  float *v195;
  int v196;
  float32x2_t *v197;
  uint64_t v198;
  float v199;
  float v200;
  float v201;
  float32x2_t v202;
  float32x2_t v203;
  uint64_t v204;
  char v205;
  void *v206;
  char v207;
  float v208;
  float32x2_t v209;
  float32x2_t v210;
  float32x2_t *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  float32x2_t *v217;
  float32x2_t *v218;
  float32x2_t v219;
  uint64_t v220;
  float32x2_t *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  float32x2_t *v227;
  float32x2_t v228;
  float *v229;
  uint64_t v230;
  float *v231;
  float v232;
  float v233;
  uint64_t v234;
  char *v235;
  float *v236;
  float *v237;
  float *v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  float *v252;
  uint64_t v253;
  int v254;
  float *v255;
  float *v256;
  char *v257;
  BOOL v258;
  float v259;
  float v260;
  float v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  int v270;
  float *v271;
  char *v272;
  char *v273;
  float v274;
  _QWORD *v275;
  int v276;
  float *v277;
  float v278;
  uint64_t v279;
  float v280;
  float v281;
  float v282;
  float32x4_t *v283;
  float v284;
  float v285;
  float v287;
  BOOL v288;
  float *v289;
  uint64_t v290;
  float v291;
  float v292;
  float v293;
  int v294;
  float v295;
  uint64_t v296;
  int64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t *v305;
  char *v306;
  unint64_t *v307;
  char *v308;
  float v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  char *v322;
  unint64_t v323;
  __int128 v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  float32x4_t v338;
  int64x2_t v339;
  float32x4_t v340;
  int8x16_t v341;
  uint64_t v342;
  float v343;
  unint64_t *v344;
  char **v345;
  uint64_t v346;
  uint64_t v347;
  char **v348;
  int v350;
  char *__src;
  void *__srca;
  unint64_t v353;
  float32x4_t *v354;
  uint64_t v356;
  uint64_t v357;
  float *v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  void *v362;
  unint64_t *v363;
  unint64_t v364;
  float32x2_t *v365;
  float *v366;
  void *v367;
  float32x2_t *v368;
  unint64_t v369;
  int64x2_t v370;
  char *v371;
  void *v372;
  float *v373;
  float32x2_t *v374;
  void *__p;
  float *v376;
  unint64_t v377;
  _BYTE v378[512];
  float32x2_t v379;
  float32x2_t v380;
  float v381;
  float v382;
  void *v383;
  int64x2_t v384;
  char *v385;
  char **v386;
  uint64_t v387;

  v387 = *MEMORY[0x24BDAC8D0];
  v4 = a1[10];
  a1[8] = a1[7];
  a1[11] = v4;
  v348 = (char **)(a1 + 13);
  a1[14] = a1[13];
  v372 = 0;
  v373 = 0;
  v374 = 0;
  v370 = 0uLL;
  v371 = 0;
  v5 = a1[1];
  v345 = (char **)(a1 + 10);
  if (a1[2] != v5)
  {
    v6 = a4;
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v353 = 0;
    v10 = ((a3 * a2) << 10) + 0x100000000;
    if (v10 >= 0x40000000000)
      v10 = 0x40000000000;
    v364 = v10;
    v343 = (float)v10;
    v11 = 24;
    v341 = (int8x16_t)vdupq_n_s32(0x3F3504F3u);
    __asm { FMOV            V1.4S, #1.0 }
    v339 = vdupq_n_s64(4uLL);
    v340 = _Q1;
    v338 = (float32x4_t)vdupq_n_s32(0x3EAAA64Cu);
    do
    {
      v356 = v11;
      v359 = v8;
      __p = 0;
      v376 = 0;
      v377 = 0;
      v17 = (_QWORD *)(v5 + 536 * v9);
      v18 = v7[4];
      v350 = *(_DWORD *)v7;
      v19 = v6[25];
      v20 = v6[26];
      v21 = v6[27];
      sub_2368069B0(&__p, ((uint64_t)(v17[1] - *v17) >> 4) + 1);
      v346 = v5;
      v362 = (void *)v9;
      v24 = (float *)(v18 + 8 * v9);
      v25 = roundf(*v24);
      v26 = roundf(v24[1]);
      if (v25 >= 8388600.0 || v25 <= -8388600.0 || v26 >= 8388600.0 || v26 <= -8388600.0)
      {
LABEL_358:
        v325 = 1;
        v111 = __p;
LABEL_359:
        if (v111)
          operator delete(v111);
        v130 = 0;
        goto LABEL_378;
      }
      v30 = (float)(int)v25;
      v31 = (float)(int)v26;
      v33 = v376;
      v32 = (char *)v377;
      if ((unint64_t)v376 >= v377)
      {
        v35 = (float *)__p;
        v36 = ((char *)v376 - (_BYTE *)__p) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_389;
        if ((uint64_t)(v377 - (_QWORD)__p) >> 2 > v37)
          v37 = (uint64_t)(v377 - (_QWORD)__p) >> 2;
        if (v377 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        v39 = (char *)sub_2367CA1FC(v38);
        v41 = (float *)&v39[8 * v36];
        *v41 = v30;
        v41[1] = v31;
        v42 = v41;
        if (v33 != v35)
        {
          do
          {
            v43 = *((_QWORD *)v33 - 1);
            v33 -= 2;
            *((_QWORD *)v42 - 1) = v43;
            v42 -= 2;
          }
          while (v33 != v35);
          v33 = v35;
        }
        v32 = &v39[8 * v40];
        v34 = v41 + 2;
        __p = v42;
        v377 = (unint64_t)v32;
        if (v33)
        {
          v44 = &v39[8 * v40];
          operator delete(v33);
          v32 = v44;
        }
      }
      else
      {
        *v376 = v30;
        v33[1] = v31;
        v34 = v33 + 2;
      }
      v376 = v34;
      v46 = (_DWORD *)*v17;
      v45 = (_DWORD *)v17[1];
      if ((_DWORD *)*v17 != v45)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = (int)v25;
        v51 = (int)v26;
        while (1)
        {
          v48 += *v46;
          v49 += v46[2];
          if (v48 >= 0)
            v52 = v48;
          else
            v52 = -v48;
          if (v49 >= 0)
            v53 = v49;
          else
            v53 = -v49;
          v47 += (v53 + v52);
          v55 = v47 > v364 || (v48 + 0x7FFFFF) > 0xFFFFFE || (v49 + 0x7FFFFF) > 0xFFFFFE;
          v50 += v48;
          v51 += v49;
          if (v55 || (v50 + 0x7FFFFF) > 0xFFFFFE || (v51 + 0x7FFFFF) > 0xFFFFFE)
            goto LABEL_358;
          v58 = (float)v50;
          v59 = (float)v51;
          if (v34 >= (float *)v32)
            break;
          *v34 = v58;
          v34[1] = v59;
          v34 += 2;
LABEL_65:
          v376 = v34;
          v46 += 4;
          if (v46 == v45)
          {
            v377 = (unint64_t)v32;
            v9 = (unint64_t)v362;
            goto LABEL_68;
          }
        }
        v60 = (float *)__p;
        v61 = ((char *)v34 - (_BYTE *)__p) >> 3;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61)
        {
          v377 = (unint64_t)v32;
LABEL_389:
          sub_2367C3440();
        }
        if ((v32 - (_BYTE *)__p) >> 2 > v62)
          v62 = (v32 - (_BYTE *)__p) >> 2;
        if ((unint64_t)(v32 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        v64 = (char *)sub_2367CA1FC(v63);
        v66 = (float *)&v64[8 * v61];
        v32 = &v64[8 * v65];
        *v66 = v58;
        v66[1] = v59;
        v67 = v66 + 2;
        if (v34 == v60)
        {
          __p = v66;
          v376 = v66 + 2;
          v60 = v34;
        }
        else
        {
          do
          {
            v68 = *((_QWORD *)v34 - 1);
            v34 -= 2;
            *((_QWORD *)v66 - 1) = v68;
            v66 -= 2;
          }
          while (v34 != v60);
          __p = v66;
          v376 = v67;
          if (!v60)
            goto LABEL_64;
        }
        v69 = &v64[8 * v65];
        operator delete(v60);
        v32 = v69;
LABEL_64:
        v34 = v67;
        goto LABEL_65;
      }
      v47 = 0;
LABEL_68:
      v70 = (float)v350;
      v72 = v356;
      v71 = v359;
      if (v350 < 0)
        v73 = (float)(v70 * -0.125) + 1.0;
      else
        v73 = 1.0 / (float)((float)(v70 * 0.125) + 1.0);
      v74 = 0;
      *(float *)v23.i32 = v20 + (float)(v19 * 0.0);
      *(float *)v22.i32 = v21 + (float)(v19 * 0.0);
      v75 = v346 + v356;
      v76 = v378;
      do
      {
        v77 = 0;
        v78 = (const float *)((char *)&unk_2369215C0 + 4 * v74);
        v79 = vld1q_dup_f32(v78);
        v80 = (int64x2_t)xmmword_2368AF310;
        v81 = (int64x2_t)xmmword_2368AF660;
        do
        {
          *(float32x4_t *)&v76[v77] = vmulq_n_f32(vmulq_f32(v79, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v80), (int32x4_t)vceqzq_s64(v81)), v341, (int8x16_t)v340), vcvtq_f32_s32(*(int32x4_t *)(v75 + v77)))), v73);
          v81 = vaddq_s64(v81, v339);
          v80 = vaddq_s64(v80, v339);
          v77 += 16;
        }
        while (v77 != 128);
        ++v74;
        v76 += 128;
        v75 += 128;
      }
      while (v74 != 3);
      v82 = 0;
      v83 = (float32x4_t)vdupq_lane_s32(v23, 0);
      v84 = (float32x4_t)vdupq_lane_s32(v22, 0);
      do
      {
        v85 = *(float32x4_t *)&v378[v82 + 128];
        *(float32x4_t *)&v378[v82] = vmlaq_f32(*(float32x4_t *)&v378[v82], v85, v83);
        *(float32x4_t *)&v378[v82 + 256] = vmlaq_f32(*(float32x4_t *)&v378[v82 + 256], v85, v84);
        v82 += 16;
      }
      while (v82 != 128);
      v86 = 0;
      v383 = 0;
      v384 = 0uLL;
      v87 = v346 + v356;
      do
      {
        v88 = 0;
        v83.i64[0] = (uint64_t)*(&v383 + v86);
        v89 = 0uLL;
        do
        {
          v90 = vrndpq_f32(vmulq_n_f32(vcvtq_f32_s32(vabsq_s32(*(int32x4_t *)(v87 + v88))), v73));
          v89 = vaddq_s64(v89, (int64x2_t)vcvtq_u64_f64(vcvt_hight_f64_f32(v90)));
          v83 = (float32x4_t)vaddq_s64((int64x2_t)v83, (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v90.f32)));
          v88 += 16;
        }
        while (v88 != 128);
        v83 = (float32x4_t)vaddq_s64((int64x2_t)v83, v89);
        *(&v383 + v86++) = (void *)vaddvq_s64((int64x2_t)v83);
        v87 += 128;
      }
      while (v86 != 3);
      v91 = (unint64_t)v383 + v384.i64[0] * vcvtps_u32_f32(fabsf(*(float *)v23.i32));
      if (v384.i64[0] > v91)
        v91 = v384.i64[0];
      v92 = v384.i64[1] + v384.i64[0] * vcvtps_u32_f32(fabsf(*(float *)v22.i32));
      if (v91 > v92)
        v92 = v91;
      v93 = __clz(v92 + 1) ^ 0x3F;
      if (((v92 + 1) & v92) != 0)
        v94 = v93 + 1;
      else
        v94 = v93;
      if (v94 <= 1)
        v94 = 1;
      if (v47 <= 1)
        v95 = 1;
      else
        v95 = v47;
      *(float *)v22.i32 = ceilf(sqrtf((float)(v343 / (float)v94) / (float)v95));
      v96 = (float32x4_t)vdupq_lane_s32(v22, 0);
      v97 = vdupq_n_s64(v94);
      v98 = 0uLL;
      v99 = 408;
      v100 = (int64x2_t)xmmword_2368AF310;
      v101 = (int64x2_t)xmmword_2368AF660;
      v102 = 0uLL;
      do
      {
        v103 = *(int32x4_t *)(v346 + v359 + v99);
        v104 = vmulq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v100), (int32x4_t)vceqzq_s64(v101)), v341, (int8x16_t)v340), vcvtq_f32_s32(v103)), v338);
        v105 = vmaxnmq_f32(vrndpq_f32(vmulq_n_f32(vcvtq_f32_s32(vabsq_s32(v103)), v73)), v340);
        v106 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v96, v105), (int8x16_t)v105, (int8x16_t)v96);
        v107 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v106.f32));
        v108 = (int64x2_t)vcvtq_u64_f64(vcvt_hight_f64_f32(v106));
        *(float32x4_t *)((char *)&__p + v99) = vmulq_n_f32(v104, v73);
        v104.i64[0] = v97.i64[0] * v107.i64[0] * v107.i64[0];
        v104.i64[1] = v97.i64[1] * v107.i64[1] * v107.i64[1];
        v108.i64[0] *= v97.i64[0] * v108.i64[0];
        v108.i64[1] *= v97.i64[1] * v108.i64[1];
        v102 = vaddq_s64(v108, v102);
        v98 = vaddq_s64((int64x2_t)v104, v98);
        v109 = vdupq_n_s64(4uLL);
        v101 = vaddq_s64(v101, v109);
        v100 = vaddq_s64(v100, v109);
        v99 += 16;
      }
      while (v99 != 536);
      v110 = v353 + vaddvq_s64(vaddq_s64(v98, v102)) * v47;
      v111 = __p;
      if (v110 > v364)
      {
        v325 = 1;
        goto LABEL_359;
      }
      if (__p != v34)
      {
        v112 = (float *)((char *)__p + 8);
        if ((char *)__p + 8 != (char *)v34)
        {
          v113 = *(float *)__p;
          while (1)
          {
            v114 = v113;
            v113 = *v112;
            if (vabds_f32(v114, *v112) < 0.001 && vabds_f32(*(v112 - 1), v112[1]) < 0.001)
              break;
            v112 += 2;
            if (v112 == v34)
              goto LABEL_104;
          }
          if (v112 - 2 != v34)
          {
            v325 = 1;
            goto LABEL_359;
          }
        }
      }
LABEL_104:
      v115 = (_QWORD *)v370.i64[1];
      v353 = v110;
      if (v370.i64[1] >= (unint64_t)v371)
      {
        v117 = 0xF0B7672A07A44C6BLL * ((v370.i64[1] - v370.i64[0]) >> 3);
        v118 = v117 + 1;
        if (v117 + 1 > 0x7A44C6AFC2DD9CLL)
          sub_2367C3440();
        if (0xE16ECE540F4898D6 * ((uint64_t)&v371[-v370.i64[0]] >> 3) > v118)
          v118 = 0xE16ECE540F4898D6 * ((uint64_t)&v371[-v370.i64[0]] >> 3);
        if (0xF0B7672A07A44C6BLL * ((uint64_t)&v371[-v370.i64[0]] >> 3) >= 0x3D226357E16ECELL)
          v119 = 0x7A44C6AFC2DD9CLL;
        else
          v119 = v118;
        v386 = &v371;
        if (v119)
        {
          if (v119 > 0x7A44C6AFC2DD9CLL)
            sub_2367C3488();
          v120 = (char *)operator new(536 * v119);
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[8 * ((v370.i64[1] - v370.i64[0]) >> 3)];
        v383 = v120;
        v384.i64[0] = (uint64_t)v121;
        v384.i64[1] = (uint64_t)v121;
        v385 = &v120[536 * v119];
        *((_QWORD *)v121 + 1) = 0;
        *((_QWORD *)v121 + 2) = 0;
        *(_QWORD *)v121 = 0;
        sub_236808910(v121, v111, (uint64_t)v34, ((char *)v34 - (_BYTE *)v111) >> 3);
        memcpy(&v120[536 * v117 + 24], v378, 0x200uLL);
        v122 = v384.i64[0];
        v116 = v384.i64[1] + 536;
        v384.i64[1] += 536;
        v123 = v370;
        v7 = a1;
        v6 = a4;
        if (v370.i64[1] == v370.i64[0])
        {
          v127 = vdupq_n_s64(v370.u64[1]);
        }
        else
        {
          v124 = 0;
          do
          {
            v125 = v122 + v124 - 536;
            v126 = v123.i64[1] + v124 - 536;
            *(_QWORD *)(v125 + 16) = 0;
            *(_OWORD *)v125 = 0u;
            *(_OWORD *)v125 = *(_OWORD *)v126;
            *(_QWORD *)(v122 + v124 - 520) = *(_QWORD *)(v123.i64[1] + v124 - 520);
            *(_QWORD *)(v126 + 16) = 0;
            *(_OWORD *)v126 = 0u;
            memcpy((void *)(v122 + v124 - 512), (const void *)(v123.i64[1] + v124 - 512), 0x200uLL);
            v124 -= 536;
          }
          while (v123.i64[1] + v124 != v123.i64[0]);
          v122 += v124;
          v127 = v370;
          v116 = v384.i64[1];
        }
        v370.i64[0] = v122;
        v370.i64[1] = v116;
        v384 = v127;
        v128 = v371;
        v371 = v385;
        v385 = v128;
        v383 = (void *)v127.i64[0];
        sub_236806B68((uint64_t)&v383);
        v72 = v356;
        v71 = v359;
      }
      else
      {
        *(_QWORD *)v370.i64[1] = 0;
        v115[1] = 0;
        v115[2] = 0;
        sub_236808910(v115, v111, (uint64_t)v34, ((char *)v34 - (_BYTE *)v111) >> 3);
        memcpy(v115 + 3, v378, 0x200uLL);
        v116 = (uint64_t)(v115 + 67);
        v7 = a1;
        v6 = a4;
      }
      v370.i64[1] = v116;
      if (__p)
        operator delete(__p);
      ++v9;
      v5 = v7[1];
      v11 = v72 + 536;
      v8 = v71 + 536;
    }
    while (v9 < 0xF0B7672A07A44C6BLL * ((v7[2] - v5) >> 3));
    v342 = v370.i64[1];
    v129 = v370.i64[0];
    if (v370.i64[0] != v370.i64[1])
    {
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v354 = (float32x4_t *)(v370.i64[0] + 24);
      v133 = 31.0;
      while (1)
      {
        v344 = v132;
        v363 = v130;
        v134 = (float32x2_t *)v372;
        v373 = (float *)v372;
        v368 = 0;
        v369 = 0;
        v367 = 0;
        v347 = v129;
        sub_236808910(&v367, *(const void **)v129, *(_QWORD *)(v129 + 8), (uint64_t)(*(_QWORD *)(v129 + 8) - *(_QWORD *)v129) >> 3);
        v136 = (float32x2_t *)v367;
        v135 = v368;
        if (v367 == v368)
          goto LABEL_248;
        v137 = (char *)v368 - (_BYTE *)v367;
        if ((char *)v368 - (_BYTE *)v367 == 8)
        {
          if (v134 < v374)
          {
            *v134 = *(float32x2_t *)v367;
            v138 = v134 + 1;
            goto LABEL_247;
          }
          v145 = ((char *)v374 - (char *)v134) >> 2;
          if (v145 <= 1)
            v145 = 1;
          if ((unint64_t)((char *)v374 - (char *)v134) >= 0x7FFFFFFFFFFFFFF8)
            v146 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v146 = v145;
          v147 = (float32x2_t *)sub_2367CA1FC(v146);
          *v147 = *v136;
          v138 = v147 + 1;
          v372 = v147;
          v374 = &v147[v148];
          if (v134)
          {
            v149 = v134;
            goto LABEL_246;
          }
          goto LABEL_247;
        }
        sub_2368069B0(&v372, 2 * v137 - 15);
        v139 = v136 + 1;
        v140 = vadd_f32(*v136, vsub_f32(*v136, v136[1]));
        v141 = (float32x2_t *)v369;
        if ((unint64_t)v135 < v369)
        {
          v142 = v135 - 1;
          v143 = v135;
          while (v142 < v135)
          {
            v144 = *v142++;
            *v143++ = v144;
          }
          v368 = v143;
          if (v135 != v139)
            memmove(&v135[-(v135 - v139)], v136, (char *)v135 - (char *)v139);
          *v136 = v140;
          goto LABEL_166;
        }
        v150 = (v137 >> 3) + 1;
        if (v150 >> 61)
          sub_2367C3440();
        if ((uint64_t)(v369 - (_QWORD)v136) >> 2 > v150)
          v150 = (uint64_t)(v369 - (_QWORD)v136) >> 2;
        v151 = v369 - (unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v150;
        if (!v151)
          break;
        v152 = (float32x2_t *)sub_2367CA1FC(v151);
        v154 = v152;
        if (!v153)
          goto LABEL_155;
        v141 = &v152[v153];
LABEL_158:
        *v154 = v140;
        v157 = v154 + 1;
        v158 = (float32x2_t *)v367;
        if (v367 != v136)
        {
          v159 = v136;
          do
          {
            v160 = v159[-1];
            --v159;
            v154[-1] = v160;
            --v154;
          }
          while (v159 != v158);
        }
        v161 = (char *)v368 - (char *)v136;
        if (v368 != v136)
          memmove(v157, v136, (char *)v368 - (char *)v136);
        v143 = (float32x2_t *)((char *)v157 + v161);
        v162 = v367;
        v367 = v154;
        v368 = v143;
        v369 = (unint64_t)v141;
        if (v162)
          operator delete(v162);
        v136 = v154;
LABEL_166:
        v163 = (char *)v143 - (char *)v136;
        v164 = vadd_f32(v143[-1], vsub_f32(v143[-1], v143[-2]));
        if (v143 >= v141)
        {
          v166 = v163 >> 3;
          v167 = (v163 >> 3) + 1;
          if (v167 >> 61)
            goto LABEL_385;
          if (((char *)v141 - (char *)v136) >> 2 > v167)
            v167 = ((char *)v141 - (char *)v136) >> 2;
          if ((unint64_t)((char *)v141 - (char *)v136) >= 0x7FFFFFFFFFFFFFF8)
            v168 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v168 = v167;
          if (v168)
            v168 = (unint64_t)sub_2367CA1FC(v168);
          else
            v169 = 0;
          v170 = (float32x2_t *)(v168 + 8 * v166);
          *v170 = v164;
          v165 = v170 + 1;
          if (v143 == v136)
          {
            v367 = (void *)(v168 + 8 * v166);
            v368 = v170 + 1;
            v369 = v168 + 8 * v169;
          }
          else
          {
            do
            {
              v171 = v143[-1];
              --v143;
              v170[-1] = v171;
              --v170;
            }
            while (v143 != v136);
            v136 = (float32x2_t *)v367;
            v367 = v170;
            v368 = v165;
            v369 = v168 + 8 * v169;
            if (!v136)
              goto LABEL_183;
          }
          operator delete(v136);
        }
        else
        {
          *v143 = v164;
          v165 = v143 + 1;
        }
LABEL_183:
        v368 = v165;
        v172 = (float *)v367;
        v173 = (float32x2_t *)v373;
        if ((char *)v165 - (_BYTE *)v367 == 24)
        {
          v174 = 3;
          goto LABEL_230;
        }
        v175 = 0;
        v360 = 2;
        v357 = 3;
        do
        {
          v176 = &v172[2 * (_QWORD)v175];
          v365 = (float32x2_t *)v176;
          if (v173 >= v374)
          {
            v178 = (float32x2_t *)v372;
            v179 = ((char *)v173 - (_BYTE *)v372) >> 3;
            v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 61)
              goto LABEL_385;
            v181 = (char *)v374 - (_BYTE *)v372;
            if (((char *)v374 - (_BYTE *)v372) >> 2 > v180)
              v180 = v181 >> 2;
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
              v182 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v182 = v180;
            if (v182)
              v182 = (unint64_t)sub_2367CA1FC(v182);
            else
              v183 = 0;
            v184 = (float32x2_t *)(v182 + 8 * v179);
            *v184 = v365[1];
            v177 = v184 + 1;
            if (v173 != v178)
            {
              do
              {
                v185 = v173[-1];
                --v173;
                v184[-1] = v185;
                --v184;
              }
              while (v173 != v178);
              v173 = (float32x2_t *)v372;
            }
            v372 = v184;
            v373 = (float *)v177;
            v374 = (float32x2_t *)(v182 + 8 * v183);
            if (v173)
              operator delete(v173);
            v176 = &v172[2 * (_QWORD)v175];
          }
          else
          {
            *v173 = *(float32x2_t *)(v176 + 2);
            v177 = v173 + 1;
          }
          v186 = 0;
          v373 = (float *)v177;
          LODWORD(v383) = 0;
          v187 = *v176;
          __src = v175;
          v188 = v172[2 * (_QWORD)v175 + 1];
          v189 = &v172[v357];
          v190 = 0.0;
          do
          {
            v191 = *(v189 - 1);
            v192 = *v189;
            v193 = sqrtf(hypotf(v191 - v187, *v189 - v188));
            *(float *)((char *)&v381 + v186) = v193;
            v194 = (float *)((char *)&v383 + v186);
            v186 += 4;
            v190 = v190 + v193;
            v194[1] = v190;
            v189 += 2;
            v188 = v192;
            v187 = v191;
          }
          while (v186 != 12);
          v195 = &v172[v360];
          v196 = 1;
          v173 = v177;
          v197 = v365;
          do
          {
            v198 = 0;
            v200 = v381;
            v199 = v382;
            __p = 0;
            v376 = 0;
            v377 = 0;
            v201 = v381 + (float)((float)((float)v196 * 0.0625) * v382);
            v202 = *v197;
            do
            {
              v203 = *(float32x2_t *)&v195[2 * v198];
              *(&__p + v198) = (void *)vadd_f32(v202, vmul_n_f32(vsub_f32(v203, v202), (float)(v201 - *((float *)&v383 + v198)) / *(&v381 + v198)));
              ++v198;
              v202 = v203;
            }
            while (v198 != 3);
            v204 = 0;
            v379 = 0;
            v380 = 0;
            v205 = 1;
            v206 = __p;
            do
            {
              v207 = v205;
              v208 = *(&v381 + v204 + 1);
              v209 = (float32x2_t)*(&__p + v204 + 1);
              *(&v379 + v204) = vadd_f32((float32x2_t)v206, vmul_n_f32(vsub_f32(v209, (float32x2_t)v206), (float)(v201 - *((float *)&v383 + v204)) / (float)(v200 + v208)));
              v200 = v208;
              v204 = 1;
              v206 = (void *)v209;
              v205 = 0;
            }
            while ((v207 & 1) != 0);
            v210 = vadd_f32(v379, vmul_n_f32(vsub_f32(v380, v379), (float)(v201 - *((float *)&v383 + 1)) / v199));
            if (v173 < v374)
            {
              *v173++ = v210;
              goto LABEL_228;
            }
            v211 = (float32x2_t *)v372;
            v212 = ((char *)v173 - (_BYTE *)v372) >> 3;
            v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 61)
              goto LABEL_385;
            v214 = (char *)v374 - (_BYTE *)v372;
            if (((char *)v374 - (_BYTE *)v372) >> 2 > v213)
              v213 = v214 >> 2;
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
              v215 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v215 = v213;
            if (v215)
              v215 = (unint64_t)sub_2367CA1FC(v215);
            else
              v216 = 0;
            v217 = (float32x2_t *)(v215 + 8 * v212);
            *v217 = v210;
            v218 = v217 + 1;
            if (v173 == v211)
            {
              v372 = v217;
              v373 = (float *)&v217[1];
              v374 = (float32x2_t *)(v215 + 8 * v216);
            }
            else
            {
              do
              {
                v219 = v173[-1];
                --v173;
                v217[-1] = v219;
                --v217;
              }
              while (v173 != v211);
              v173 = (float32x2_t *)v372;
              v372 = v217;
              v373 = (float *)v218;
              v374 = (float32x2_t *)(v215 + 8 * v216);
              if (!v173)
                goto LABEL_227;
            }
            operator delete(v173);
LABEL_227:
            v173 = v218;
            v197 = v365;
LABEL_228:
            v373 = (float *)v173;
            ++v196;
          }
          while (v196 != 16);
          v175 = __src + 1;
          v172 = (float *)v367;
          v174 = ((char *)v368 - (_BYTE *)v367) >> 3;
          v357 += 2;
          v360 += 2;
        }
        while ((unint64_t)(__src + 1) < v174 - 3);
LABEL_230:
        v220 = v174 - 2;
        if (v173 < v374)
        {
          *v173 = *(float32x2_t *)&v172[2 * v220];
          v138 = v173 + 1;
          goto LABEL_247;
        }
        v221 = (float32x2_t *)v372;
        v222 = ((char *)v173 - (_BYTE *)v372) >> 3;
        v223 = v222 + 1;
        if ((unint64_t)(v222 + 1) >> 61)
LABEL_385:
          sub_2367C3440();
        v224 = (char *)v374 - (_BYTE *)v372;
        if (((char *)v374 - (_BYTE *)v372) >> 2 > v223)
          v223 = v224 >> 2;
        if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v223;
        if (v225)
          v225 = (unint64_t)sub_2367CA1FC(v225);
        else
          v226 = 0;
        v227 = (float32x2_t *)(v225 + 8 * v222);
        *v227 = *(float32x2_t *)&v172[2 * v220];
        v138 = v227 + 1;
        if (v173 != v221)
        {
          do
          {
            v228 = v173[-1];
            --v173;
            v227[-1] = v228;
            --v227;
          }
          while (v173 != v221);
          v173 = (float32x2_t *)v372;
        }
        v372 = v227;
        v373 = (float *)v138;
        v374 = (float32x2_t *)(v225 + 8 * v226);
        if (v173)
        {
          v149 = v173;
LABEL_246:
          operator delete(v149);
        }
LABEL_247:
        v373 = (float *)v138;
        v136 = (float32x2_t *)v367;
LABEL_248:
        if (v136)
        {
          v368 = v136;
          operator delete(v136);
        }
        v229 = (float *)v372;
        v230 = *(_QWORD *)v372;
        v231 = (float *)sub_2367E4DB0(1uLL);
        v232 = *((float *)&v230 + 1);
        v233 = *(float *)&v230;
        v235 = (char *)&v231[3 * v234];
        *(_QWORD *)v231 = v230;
        v231[2] = 1.0;
        v236 = v231 + 3;
        while (2)
        {
          v237 = v236;
LABEL_252:
          v238 = v373;
          if (v229 == v373)
          {
            v252 = v231;
            v236 = v237;
          }
          else
          {
            v239 = 0.0;
            v240 = v232;
            v241 = v233;
            while (1)
            {
              v242 = *v229;
              v243 = v229[1];
              v244 = *v229 - v241;
              v245 = v243 - v240;
              v246 = sqrtf((float)(v245 * v245) + (float)(v244 * v244));
              v247 = v239 + v246;
              if ((float)(v239 + v246) >= 1.0)
                break;
              v229 += 2;
              v240 = v243;
              v241 = v242;
              v239 = v239 + v246;
              if (v229 == v373)
              {
                if (v237 < (float *)v235)
                {
                  *(_QWORD *)v237 = *((_QWORD *)v229 - 1);
                  v237[2] = v247;
                  v236 = v237 + 3;
                  v252 = v231;
                  goto LABEL_292;
                }
                v248 = 0xAAAAAAAAAAAAAAABLL * (v237 - v231) + 1;
                if (v248 > 0x1555555555555555)
                  goto LABEL_387;
                if (0x5555555555555556 * ((v235 - (char *)v231) >> 2) > v248)
                  v248 = 0x5555555555555556 * ((v235 - (char *)v231) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v235 - (char *)v231) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v249 = 0x1555555555555555;
                else
                  v249 = v248;
                v250 = (char *)sub_2367E4DB0(v249);
                v252 = (float *)&v250[4 * (v237 - v231)];
                *(_QWORD *)v252 = *((_QWORD *)v229 - 1);
                v252[2] = v247;
                v236 = v252 + 3;
                if (v237 == v231)
                {
                  if (v231)
                  {
                    operator delete(v231);
                    v236 = v252 + 3;
                  }
                  goto LABEL_292;
                }
                v235 = &v250[12 * v251];
                do
                {
                  v253 = *(_QWORD *)(v237 - 3);
                  v237 -= 3;
                  v254 = *((_DWORD *)v237 + 2);
                  *(_QWORD *)(v252 - 3) = v253;
                  v252 -= 3;
                  *((_DWORD *)v252 + 2) = v254;
                }
                while (v237 != v231);
                if (v231)
                {
                  v255 = v231;
                  v256 = v236;
                  v257 = v235;
                  operator delete(v255);
                  v235 = v257;
                  v236 = v256;
                  v258 = v247 < 1.0;
                  v231 = v252;
                  v237 = v256;
                }
                else
                {
                  v258 = v247 < 1.0;
                  v231 = v252;
                  v237 = v236;
                }
                v229 = v238;
                if (v258)
                  goto LABEL_292;
                goto LABEL_252;
              }
            }
            v259 = (float)(1.0 - v239) / v246;
            v260 = v241 + (float)(v244 * v259);
            v261 = v240 + (float)(v245 * v259);
            if (v237 >= (float *)v235)
            {
              v263 = 0xAAAAAAAAAAAAAAABLL * (v237 - v231) + 1;
              if (v263 > 0x1555555555555555)
LABEL_387:
                sub_2367C3440();
              if (0x5555555555555556 * ((v235 - (char *)v231) >> 2) > v263)
                v263 = 0x5555555555555556 * ((v235 - (char *)v231) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v235 - (char *)v231) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v264 = 0x1555555555555555;
              else
                v264 = v263;
              v265 = (char *)sub_2367E4DB0(v264);
              v267 = &v265[4 * (v237 - v231)];
              v262 = LODWORD(v260) | ((unint64_t)LODWORD(v261) << 32);
              *(_QWORD *)v267 = v262;
              *((_DWORD *)v267 + 2) = 1065353216;
              v268 = v267;
              while (v237 != v231)
              {
                v269 = *(_QWORD *)(v237 - 3);
                v237 -= 3;
                v270 = *((_DWORD *)v237 + 2);
                *(_QWORD *)(v268 - 12) = v269;
                v268 -= 12;
                *((_DWORD *)v268 + 2) = v270;
              }
              v235 = &v265[12 * v266];
              v236 = (float *)(v267 + 12);
              if (v231)
              {
                v271 = v231;
                v272 = v267 + 12;
                v273 = v235;
                operator delete(v271);
                v235 = v273;
                v236 = (float *)v272;
              }
              v231 = (float *)v268;
            }
            else
            {
              v262 = LODWORD(v260) | ((unint64_t)LODWORD(v261) << 32);
              *(_QWORD *)v237 = v262;
              v237[2] = 1.0;
              v236 = v237 + 3;
            }
            v232 = *((float *)&v262 + 1);
            v233 = *(float *)&v262;
            v252 = v231;
            if (v247 >= 1.0)
              continue;
          }
          break;
        }
LABEL_292:
        v274 = *(v236 - 1) + (float)(unint64_t)(-2 - 0x5555555555555555 * (v236 - v252));
        if (v274 <= 0.0)
        {
          v132 = v344;
LABEL_354:
          if (v252)
            goto LABEL_355;
        }
        else
        {
          v275 = a1;
          v132 = v344;
          if (v252 != v236)
          {
            v276 = 0;
            v277 = v252;
            v278 = 1.0 / v274;
            v358 = v236;
            while (1)
            {
              v279 = 0;
              v361 = v276;
              v366 = v277;
              v280 = v277[2];
              v281 = v278 * (float)v276;
              if (v281 >= 1.0)
                v282 = v133;
              else
                v282 = v281 * v133;
              v283 = v354;
              do
              {
                *(float *)((char *)&v383 + v279) = sub_236809304(v283, v282);
                v279 += 4;
                v283 += 8;
              }
              while (v279 != 12);
              v284 = sub_236809304((float32x4_t *)(v347 + 408), v282);
              v285 = v284;
              if (((LODWORD(v284) & 0x7FFFFFFFu) - 0x800000) >> 24 > 0x7E
                && (LODWORD(v284) & 0x7FFFFFFFu) - 1 > 0x7FFFFE)
              {
                v289 = v358;
              }
              else
              {
                v287 = 1.0 / v284;
                v288 = COERCE_INT(fabs(1.0 / v284)) <= 2139095039 && (LODWORD(v280) & 0x7FFFFFFFu) <= 0x7F7FFFFF;
                v289 = v358;
                if (v288)
                {
                  v290 = 0;
                  v291 = 0.01;
                  do
                  {
                    v292 = fabsf(v280 * *(float *)((char *)&v383 + v290));
                    if (v291 < v292)
                      v291 = v292;
                    v290 += 4;
                  }
                  while (v290 != 12);
                  v293 = sqrt((-11.5129255 - logf(v291)) * (float)(v285 * (float)(v285 * -2.0)));
                  v294 = *(_DWORD *)v366;
                  v295 = v366[1];
                  __p = v383;
                  v296 = llroundf(v295 - v293);
                  LODWORD(v376) = v384.i32[0];
                  v297 = llroundf(v295 + v293);
                  v298 = v296 & ~(v296 >> 63);
                  __srca = (void *)v297;
                  if (v298 <= v297)
                  {
                    do
                    {
                      v299 = (uint64_t)(v275[8] - v275[7]) >> 5;
                      if (v131 >= v132)
                      {
                        v300 = ((char *)v131 - (char *)v363) >> 4;
                        v301 = v300 + 1;
                        if ((unint64_t)(v300 + 1) >> 60)
                          sub_2367C3440();
                        if (v132 - v363 > v301)
                          v301 = v132 - v363;
                        if ((unint64_t)((char *)v132 - (char *)v363) >= 0x7FFFFFFFFFFFFFF0)
                          v302 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v302 = v301;
                        v303 = (char *)sub_2367CD8AC(v302);
                        v305 = (uint64_t *)&v303[16 * v300];
                        *v305 = v298;
                        v305[1] = v299;
                        if (v131 == v363)
                        {
                          v308 = &v303[16 * v300];
                          v275 = a1;
                          v307 = v363;
                        }
                        else
                        {
                          v306 = &v303[16 * v300];
                          v275 = a1;
                          v307 = v363;
                          do
                          {
                            v308 = v306 - 16;
                            *((_OWORD *)v306 - 1) = *((_OWORD *)v131 - 1);
                            v131 -= 2;
                            v306 -= 16;
                          }
                          while (v131 != v363);
                        }
                        v132 = (unint64_t *)&v303[16 * v304];
                        v131 = (unint64_t *)(v305 + 2);
                        if (v307)
                          operator delete(v307);
                        v363 = (unint64_t *)v308;
                        v297 = (int64_t)__srca;
                      }
                      else
                      {
                        *v131 = v298;
                        v131[1] = v299;
                        v131 += 2;
                      }
                    }
                    while (v298++ != v297);
                  }
                  v309 = v280 * (float)(v285 * 0.25);
                  v310 = v275[8];
                  v311 = v275[9];
                  if (v310 >= v311)
                  {
                    v314 = v275[7];
                    v315 = (uint64_t)(v310 - v314) >> 5;
                    v316 = v315 + 1;
                    if ((unint64_t)(v315 + 1) >> 59)
                      sub_2367C3440();
                    v317 = v311 - v314;
                    if (v317 >> 4 > v316)
                      v316 = v317 >> 4;
                    if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFE0)
                      v318 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v318 = v316;
                    if (v318)
                      v318 = (unint64_t)sub_236809410(v318);
                    else
                      v319 = 0;
                    v320 = v318 + 32 * v315;
                    *(_DWORD *)v320 = v294;
                    *(float *)(v320 + 4) = v295;
                    *(float *)(v320 + 8) = v293;
                    *(float *)(v320 + 12) = v287;
                    *(float *)(v320 + 16) = v309;
                    *(_QWORD *)(v320 + 20) = __p;
                    *(_DWORD *)(v320 + 28) = (_DWORD)v376;
                    v322 = (char *)v275[7];
                    v321 = (char *)v275[8];
                    v323 = v320;
                    v133 = 31.0;
                    if (v321 != v322)
                    {
                      do
                      {
                        v324 = *((_OWORD *)v321 - 1);
                        *(_OWORD *)(v323 - 32) = *((_OWORD *)v321 - 2);
                        *(_OWORD *)(v323 - 16) = v324;
                        v323 -= 32;
                        v321 -= 32;
                      }
                      while (v321 != v322);
                      v321 = (char *)v275[7];
                    }
                    v312 = v320 + 32;
                    v275[7] = v323;
                    v275[8] = v320 + 32;
                    v275[9] = v318 + 32 * v319;
                    if (v321)
                      operator delete(v321);
                  }
                  else
                  {
                    *(_DWORD *)v310 = v294;
                    *(float *)(v310 + 4) = v295;
                    *(float *)(v310 + 8) = v293;
                    *(float *)(v310 + 12) = v287;
                    *(float *)(v310 + 16) = v309;
                    *(_QWORD *)(v310 + 20) = __p;
                    *(_DWORD *)(v310 + 28) = (_DWORD)v376;
                    v312 = v310 + 32;
                    v133 = 31.0;
                  }
                  v289 = v358;
                  v313 = v361;
                  v275[8] = v312;
                  goto LABEL_336;
                }
              }
              v313 = v361;
LABEL_336:
              v276 = v313 + 1;
              v277 = v366 + 3;
              if (v366 + 3 == v289)
                goto LABEL_354;
            }
          }
LABEL_355:
          operator delete(v252);
        }
        v129 = v347 + 536;
        v354 = (float32x4_t *)((char *)v354 + 536);
        v130 = v363;
        if (v347 + 536 == v342)
          goto LABEL_363;
      }
      v154 = 0;
LABEL_155:
      v155 = (float32x2_t *)sub_2367CA1FC(1uLL);
      v141 = &v155[v156];
      if (v154)
        operator delete(v154);
      v154 = v155;
      goto LABEL_158;
    }
  }
  v130 = 0;
  v131 = 0;
LABEL_363:
  v326 = ((char *)v131 - (char *)v130) >> 4;
  v327 = 126 - 2 * __clz(v326);
  if (v131 == v130)
    v328 = 0;
  else
    v328 = v327;
  sub_236808988((unint64_t)v130, v131, v328, 1);
  sub_2367D7BB0(v345, ((char *)v131 - (char *)v130) >> 4);
  sub_2367D7BB0(v348, a3 + 1);
  v329 = a3;
  if (v131 != v130)
  {
    v330 = *v345;
    if (v326 <= 1)
      v331 = 1;
    else
      v331 = ((char *)v131 - (char *)v130) >> 4;
    v332 = v130 + 1;
    do
    {
      *(_QWORD *)v330 = *v332;
      v333 = *(v332 - 1);
      if (v333 < a3)
        ++*(_QWORD *)&(*v348)[8 * v333 + 8];
      v332 += 2;
      v330 += 8;
      --v331;
    }
    while (v331);
  }
  if (a3)
  {
    v334 = *v348 + 8;
    v335 = *(_QWORD *)*v348;
    do
    {
      v335 += *v334;
      *v334++ = v335;
      --v329;
    }
    while (v329);
  }
  v325 = 0;
LABEL_378:
  __p = &v370;
  sub_236809444((void ***)&__p);
  if (v372)
    operator delete(v372);
  if (v130)
    operator delete(v130);
  return v325;
}

void sub_23680882C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char *a46,void *a47)
{
  void *v47;

  if (v47)
    operator delete(v47);
  if (__p)
    operator delete(__p);
  a46 = &a39;
  sub_236809444((void ***)&a46);
  if (a43)
    operator delete(a43);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(a1);
}

_QWORD *sub_236808910(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2367DBF48(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23680896C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_236808988(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *k;
  unint64_t v20;
  unint64_t v21;
  unint64_t *m;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *j;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  BOOL v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *v8;
        v44 = *i;
        if (*v8 < *i || v44 >= v43 && *(a2 - 1) < i[1])
        {
          *i = v43;
          *(a2 - 2) = v44;
          v45 = i[1];
          i[1] = *(a2 - 1);
          *(a2 - 1) = v45;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_2368094C4(i, i + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)sub_2368095F8(i, i + 2, i + 4, a2 - 2);
      case 5uLL:
        return (unint64_t)sub_2368096F4(i, i + 2, i + 4, i + 6, a2 - 2);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            while (1)
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &i[2 * v63];
                if (2 * v62 + 2 < (uint64_t)v11)
                {
                  v65 = v64[2];
                  if (*v64 < v65 || v65 >= *v64 && i[2 * v63 + 1] < v64[3])
                  {
                    v64 += 2;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &i[2 * v62];
                v67 = *v64;
                v68 = *v66;
                if (*v64 >= *v66)
                {
                  if (v68 < v67)
                  {
                    v69 = v66[1];
LABEL_129:
                    *v66 = v67;
                    v66[1] = v64[1];
                    if (v60 >= v63)
                    {
                      while (1)
                      {
                        v71 = 2 * v63;
                        v63 = (2 * v63) | 1;
                        v70 = &i[2 * v63];
                        v72 = v71 + 2;
                        if (v72 < (uint64_t)v11)
                        {
                          v73 = v70[2];
                          if (*v70 < v73 || v73 >= *v70 && i[2 * v63 + 1] < v70[3])
                          {
                            v70 += 2;
                            v63 = v72;
                          }
                        }
                        v74 = *v70;
                        if (*v70 < v68 || v68 >= v74 && v70[1] < v69)
                          break;
                        *v64 = v74;
                        v64[1] = v70[1];
                        v64 = v70;
                        if (v60 < v63)
                          goto LABEL_131;
                      }
                    }
                    v70 = v64;
LABEL_131:
                    *v70 = v68;
                    v70[1] = v69;
                    goto LABEL_132;
                  }
                  v69 = i[2 * v62 + 1];
                  if (v64[1] >= v69)
                    goto LABEL_129;
                }
              }
LABEL_132:
              v61 = v62 - 1;
              if (!v62)
              {
                v83 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v84 = 0;
                  v85 = *i;
                  v86 = i[1];
                  v87 = v83 - 2;
                  if (v83 < 2)
                    v87 = v83 - 1;
                  v88 = v87 >> 1;
                  v89 = i;
                  do
                  {
                    v90 = v89;
                    v91 = v84 + 1;
                    v89 += 2 * v84 + 2;
                    v92 = 2 * v84;
                    result = (2 * v84) | 1;
                    v84 = result;
                    v93 = v92 + 2;
                    if (v93 < v83)
                    {
                      result = (unint64_t)(v89 + 2);
                      v94 = v89[2];
                      if (*v89 < v94 || v94 >= *v89 && v90[2 * v91 + 1] < v89[3])
                      {
                        v89 += 2;
                        v84 = v93;
                      }
                    }
                    *v90 = *v89;
                    v90[1] = v89[1];
                  }
                  while (v84 <= v88);
                  if (v89 == a2 - 2)
                  {
                    *v89 = v85;
                    v89[1] = v86;
                  }
                  else
                  {
                    *v89 = *(a2 - 2);
                    v89[1] = *(a2 - 1);
                    *(a2 - 2) = v85;
                    *(a2 - 1) = v86;
                    v95 = (char *)v89 - (char *)i + 16;
                    if (v95 >= 17)
                    {
                      v96 = (v95 >> 4) - 2;
                      v97 = v96 >> 1;
                      v98 = &i[2 * (v96 >> 1)];
                      v99 = *v98;
                      v100 = *v89;
                      if (*v98 < *v89)
                      {
                        v101 = v89[1];
LABEL_171:
                        *v89 = v99;
                        v89[1] = i[2 * v97 + 1];
                        if (v96 >= 2)
                        {
                          while (1)
                          {
                            v103 = v97 - 1;
                            v97 = (v97 - 1) >> 1;
                            v102 = &i[2 * v97];
                            v104 = *v102;
                            if (*v102 >= v100)
                            {
                              if (v100 < v104)
                                break;
                              result = i[2 * v97 + 1];
                              if (result >= v101)
                                break;
                            }
                            else
                            {
                              result = v102[1];
                            }
                            *v98 = v104;
                            v98[1] = result;
                            v98 = &i[2 * v97];
                            if (v103 <= 1)
                              goto LABEL_178;
                          }
                        }
                        v102 = v98;
LABEL_178:
                        *v102 = v100;
                        v102[1] = v101;
                        goto LABEL_180;
                      }
                      if (v100 >= v99)
                      {
                        result = i[2 * v97 + 1];
                        v101 = v89[1];
                        if (result < v101)
                          goto LABEL_171;
                      }
                    }
                  }
LABEL_180:
                  a2 -= 2;
                  if (v83-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = &i[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)sub_2368094C4(&v7[2 * (v11 >> 1)], v7, a2 - 2);
          }
          else
          {
            sub_2368094C4(v7, &v7[2 * (v11 >> 1)], a2 - 2);
            sub_2368094C4(v7 + 2, v13 - 2, a2 - 4);
            sub_2368094C4(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
            result = (unint64_t)sub_2368094C4(v13 - 2, v13, &v7[2 * v12 + 2]);
            v14 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) == 0)
          {
            v16 = *(v7 - 2);
            if (v16 >= v15)
            {
              if (v15 < v16)
              {
                v17 = v7[1];
              }
              else
              {
                v17 = v7[1];
                if (*(v7 - 1) < v17)
                  goto LABEL_13;
              }
              v33 = *v8;
              if (v15 >= *v8 && (v33 < v15 || v17 >= *(a2 - 1)))
              {
                for (i = v7 + 2; i < a2 && v15 >= *i && (*i < v15 || v17 >= i[1]); i += 2)
                  ;
              }
              else
              {
                i = v7;
                do
                {
                  v35 = i[2];
                  i += 2;
                  v34 = v35;
                }
                while (v15 >= v35 && (v34 < v15 || v17 >= i[1]));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 2; v15 < v33 || v33 >= v15 && v17 < j[1]; j -= 2)
                {
                  v37 = *(j - 2);
                  v33 = v37;
                }
              }
              if (i < j)
              {
                v38 = *i;
                v39 = *j;
                do
                {
                  *i = v39;
                  *j = v38;
                  v40 = i[1];
                  i[1] = j[1];
                  j[1] = v40;
                  do
                  {
                    v41 = i[2];
                    i += 2;
                    v38 = v41;
                  }
                  while (v15 >= v41 && (v38 < v15 || v17 >= i[1]));
                  do
                  {
                    do
                    {
                      v42 = *(j - 2);
                      j -= 2;
                      v39 = v42;
                    }
                    while (v15 < v42);
                  }
                  while (v39 >= v15 && v17 < j[1]);
                }
                while (i < j);
              }
              if (i - 2 != v7)
              {
                *v7 = *(i - 2);
                v7[1] = *(i - 1);
              }
              a4 = 0;
              *(i - 2) = v15;
              *(i - 1) = v17;
              continue;
            }
          }
LABEL_13:
          v18 = v7[1];
          for (k = v7 + 2; ; k += 2)
          {
            v20 = *k;
            if (*k >= v15 && (v15 < v20 || k[1] >= v18))
              break;
          }
          if (k - 2 == v7)
          {
            m = a2;
            if (k < a2)
            {
              v24 = *v8;
              m = a2 - 2;
              if (*v8 >= v15)
              {
                m = a2 - 2;
                do
                {
                  if (v15 >= v24)
                  {
                    if (m[1] < v18 || k >= m)
                      break;
                  }
                  else if (k >= m)
                  {
                    break;
                  }
                  v26 = *(m - 2);
                  m -= 2;
                  v24 = v26;
                }
                while (v26 >= v15);
              }
            }
          }
          else
          {
            v21 = *v8;
            for (m = a2 - 2; v21 >= v15 && (v15 < v21 || m[1] >= v18); m -= 2)
            {
              v23 = *(m - 2);
              v21 = v23;
            }
          }
          i = k;
          if (k < m)
          {
            v27 = *m;
            i = k;
            v28 = m;
            do
            {
              *i = v27;
              *v28 = v20;
              v29 = i[1];
              i[1] = v28[1];
              v28[1] = v29;
              do
              {
                do
                {
                  v30 = i[2];
                  i += 2;
                  v20 = v30;
                }
                while (v30 < v15);
              }
              while (v15 >= v20 && i[1] < v18);
              do
              {
                v31 = *(v28 - 2);
                v28 -= 2;
                v27 = v31;
              }
              while (v31 >= v15 && (v15 < v27 || v28[1] >= v18));
            }
            while (i < v28);
          }
          if (i - 2 != v7)
          {
            *v7 = *(i - 2);
            v7[1] = *(i - 1);
          }
          *(i - 2) = v15;
          *(i - 1) = v18;
          if (k < m)
          {
LABEL_50:
            result = sub_236808988(v7, i - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = sub_236809844(v7, i - 2);
          result = sub_236809844(i, a2);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
            goto LABEL_50;
          }
          a2 = i - 2;
          if (v32)
            return result;
          goto LABEL_2;
        }
        v46 = i + 2;
        v48 = i == a2 || v46 == a2;
        if ((a4 & 1) == 0)
        {
          if (v48)
            return result;
          while (1)
          {
            v75 = v7;
            v7 = v46;
            v76 = v75[2];
            v77 = *v75;
            if (v76 < *v75)
              break;
            if (v77 >= v76)
            {
              v78 = v75[3];
              if (v78 < v75[1])
                goto LABEL_152;
            }
LABEL_156:
            v46 = v7 + 2;
            if (v7 + 2 == a2)
              return result;
          }
          v78 = v75[3];
          do
          {
            do
            {
LABEL_152:
              v79 = v75;
              v80 = v77;
              v81 = *(v75 - 2);
              v75 -= 2;
              v77 = v81;
              v82 = v75[3];
              v75[4] = v80;
              v75[5] = v82;
            }
            while (v76 < v81);
          }
          while (v77 >= v76 && v78 < *(v79 - 1));
          *v79 = v76;
          v79[1] = v78;
          goto LABEL_156;
        }
        if (v48)
          return result;
        v49 = 0;
        v50 = i;
        do
        {
          v51 = v50;
          v50 = v46;
          v52 = v51[2];
          v53 = *v51;
          if (v52 >= *v51)
          {
            if (v53 < v52)
              goto LABEL_115;
            v54 = v51[3];
            if (v54 >= v51[1])
              goto LABEL_115;
          }
          else
          {
            v54 = v51[3];
          }
          v51[2] = v53;
          v50[1] = v51[1];
          v55 = i;
          if (v51 == i)
            goto LABEL_114;
          v56 = v49;
          while (1)
          {
            v57 = *(unint64_t *)((char *)i + v56 - 16);
            if (v52 >= v57)
              break;
            v58 = *(unint64_t *)((char *)i + v56 - 8);
LABEL_111:
            v51 -= 2;
            v59 = (unint64_t *)((char *)i + v56);
            *v59 = v57;
            v59[1] = v58;
            v56 -= 16;
            if (!v56)
            {
              v55 = i;
              goto LABEL_114;
            }
          }
          if (v57 >= v52)
          {
            v55 = (unint64_t *)((char *)i + v56);
            v58 = *(unint64_t *)((char *)i + v56 - 8);
            if (v54 >= v58)
              goto LABEL_114;
            goto LABEL_111;
          }
          v55 = v51;
LABEL_114:
          *v55 = v52;
          v55[1] = v54;
LABEL_115:
          v46 = v50 + 2;
          v49 += 16;
        }
        while (v50 + 2 != a2);
        return result;
    }
  }
}

float sub_236809304(float32x4_t *a1, float a2)
{
  float v2;
  float32x4_t v3;
  __int128 *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t v9;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v2 = a2 + 0.5;
  v3 = 0uLL;
  v4 = &xmmword_2369215D0;
  v5 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
  v6 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
  v7 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
  v8 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v9 = -4;
  __asm { FMOV            V6.4S, #0.25 }
  v15 = (float32x4_t)vdupq_n_s32(0xBF574380);
  v16 = (float32x4_t)vdupq_n_s32(0x3FD744FCu);
  v17 = (float32x4_t)vdupq_n_s32(0x3D8E8CBEu);
  v18 = (float32x4_t)vdupq_n_s32(0xBFB504F3);
  __asm { FMOV            V19.4S, #-1.0 }
  v20 = (float32x4_t)vdupq_n_s32(0x3FB504F3u);
  do
  {
    v21 = (float32x4_t)*v4++;
    v22 = vmulq_n_f32(v21, v2);
    v23 = vsubq_f32(v22, vmulq_f32(vrndmq_f32(vmulq_f32(v22, v5)), v6));
    v24 = vminnmq_f32(v23, vsubq_f32(v6, v23));
    v25 = vcgeq_f32(v24, v7);
    v26 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vsubq_f32(v8, v24), (int8x16_t)v24), _Q6);
    v27 = vmulq_f32(v26, v26);
    v28 = vmlaq_f32(vmlaq_f32(v16, v15, v27), v17, vmulq_f32(v27, v27));
    v29 = vmlaq_f32(v18, v28, v28);
    v30 = *a1++;
    v3 = vmlaq_f32(v3, v20, vmulq_f32(v30, (float32x4_t)veorq_s8((int8x16_t)vshlq_n_s32(v25, 0x1FuLL), (int8x16_t)vmlaq_f32(_Q19, v29, v29))));
    v9 += 4;
  }
  while (v9 < 0x1C);
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v3, v3));
}

void *sub_236809410(unint64_t a1)
{
  if (a1 >> 59)
    sub_2367C3488();
  return operator new(32 * a1);
}

void sub_236809444(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  BOOL v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 536;
      do
      {
        v7 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *((_QWORD *)v6 + 1) = v7;
          operator delete(v7);
        }
        v8 = v6 == v2;
        v6 -= 536;
      }
      while (!v8);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *sub_2368094C4(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      v8 = a2 + 1;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *a2;
      v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        v15 = *result;
        *result = *v8;
        *v8 = v15;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
LABEL_17:
      v8 = v6;
      goto LABEL_18;
    }
    *result = v3;
    *a2 = v4;
    v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      v6 = a3 + 1;
      result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

unint64_t *sub_2368095F8(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = sub_2368094C4(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unint64_t *sub_2368096F4(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = sub_2368095F8(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL sub_236809844(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_2368094C4(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_2368095F8(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2368096F4(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_2368094C4(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *((_QWORD *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_22;
      }
    }
    v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_236809A34(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;

  v5 = (unint64_t)((a3 - a2) >> 2) >> 1;
  v6 = a4 - v5;
  if (a4 < v5)
    v6 = 0;
  v7 = *(_DWORD *)result - 1;
  if (v7 >= (int)v5 + (int)a4)
    v7 = v5 + a4;
  v8 = 0.0;
  if (v7 >= v6)
  {
    v9 = ~(uint64_t)v7 + v6;
    v10 = (float *)(a2 + 4 * (v5 + v6 - a4));
    do
    {
      v11 = *v10++;
      v8 = v8 + v11;
      v12 = __CFADD__(v9++, 1);
    }
    while (!v12);
  }
  v13 = *(unsigned int *)(result + 4);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 16);
    v16 = (float *)(a2 + 4 * (v5 + v6 - a4));
    v17 = *(_QWORD *)(result + 24) + 4 * v6;
    v18 = 1.0 / v8;
    do
    {
      v19 = 0.0;
      if (v7 >= v6)
      {
        v20 = (float *)v17;
        v21 = v16;
        result = ~(uint64_t)v7 + v6;
        do
        {
          v22 = *v20++;
          v23 = v22;
          v24 = *v21++;
          v19 = v19 + (float)(v23 * v24);
          v12 = __CFADD__(result++, 1);
        }
        while (!v12);
      }
      *(float *)(a5 + 4 * v14++) = v18 * v19;
      v17 += v15;
    }
    while (v14 != v13);
  }
  return result;
}

void sub_236809B0C(unsigned int *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float32x2_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float32x2_t v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  float v59;
  float32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float *v71;
  float v72;
  float v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *__p[3];

  v6 = *a1;
  v7 = (float *)*a2;
  v8 = a2[1] - *a2;
  v9 = v8 >> 2;
  v10 = (unint64_t)(v8 >> 2) >> 1;
  if (v8)
  {
    if ((unint64_t)v9 <= 1)
      v11 = 1;
    else
      v11 = v8 >> 2;
    v12 = 0.0;
    do
    {
      v13 = *v7++;
      v12 = v12 + v13;
      --v11;
    }
    while (v11);
  }
  else
  {
    v12 = 0.0;
  }
  v14 = v10 + 1;
  v15 = 1.0 / v12;
  sub_236803F00(__p, v10 + 1);
  v16 = (float *)*a2;
  v17 = (float *)__p[0];
  do
  {
    v18 = *v16++;
    *v17++ = v15 * v18;
    --v14;
  }
  while (v14);
  if (v10 >= v6)
    v19 = v6;
  else
    v19 = v10;
  if (v6 >= v10)
    v20 = v6 - v10;
  else
    v20 = 0;
  if (v9 > 14)
  {
    if (v9 == 15)
    {
      v36 = a1[1];
      if ((_DWORD)v36)
      {
        v37 = 0;
        v38 = 0;
        v39 = *((_QWORD *)a1 + 2);
        v40 = (float *)__p[0];
        v41 = *((_QWORD *)a1 + 3) + 4 * v19 - 4 * v10;
        do
        {
          if (v19 < v20)
          {
            v42 = (float *)(v41 + v39 * v38);
            v43 = *(_QWORD *)(a3 + 16);
            v44 = *(_QWORD *)(a3 + 24) + v19 * v43;
            v45 = v6 - 2 * v19;
            v46 = v42;
            do
            {
              v47 = v46[1];
              ++v46;
              *(float *)(v44 + v37) = (float)((float)(v42[3] + v42[11]) * v40[3])
                                    + (float)((float)((float)((float)(v42[2] + v42[12]) * v40[2])
                                                    + (float)((float)(v42[6] + v42[8]) * v40[6]))
                                            + (float)((float)((float)((float)(v47 + v42[13]) * v40[1])
                                                            + (float)((float)(v42[5] + v42[9]) * v40[5]))
                                                    + (float)((float)((float)((float)(*v42 + v42[14]) * *v40)
                                                                    + (float)((float)(v42[4] + v42[10]) * v40[4]))
                                                            + (float)(v42[7] * v40[7]))));
              v44 += v43;
              v42 = v46;
              --v45;
            }
            while (v45);
          }
          ++v38;
          v37 += 4;
        }
        while (v38 != v36);
      }
    }
    else
    {
      v61 = a1[1];
      if ((_DWORD)v61)
      {
        v62 = 0;
        v63 = 0;
        v64 = *((_QWORD *)a1 + 2);
        v65 = (float *)__p[0];
        v66 = *((_QWORD *)a1 + 3) + 4 * v19 - 4 * v10;
        do
        {
          if (v19 < v20)
          {
            v67 = (float *)(v66 + v64 * v63);
            v68 = *(_QWORD *)(a3 + 16);
            v69 = *(_QWORD *)(a3 + 24) + v19 * v68;
            v70 = v6 - 2 * v19;
            v71 = v67;
            do
            {
              v72 = v71[1];
              ++v71;
              v73 = (float)((float)((float)((float)(v72 + v67[31]) * v65[1])
                                  + (float)((float)(v67[5] + v67[27]) * v65[5]))
                          + (float)((float)(v67[9] + v67[23]) * v65[9]))
                  + (float)((float)(v67[13] + v67[19]) * v65[13]);
              *(float *)(v69 + v62) = (float)((float)((float)((float)((float)(v67[3] + v67[29]) * v65[3])
                                                            + (float)((float)(v67[7] + v67[25]) * v65[7]))
                                                    + (float)((float)(v67[11] + v67[21]) * v65[11]))
                                            + (float)((float)(v67[15] + v67[17]) * v65[15]))
                                    + (float)((float)((float)((float)((float)((float)(v67[2] + v67[30]) * v65[2])
                                                                    + (float)((float)(v67[6] + v67[26]) * v65[6]))
                                                            + (float)((float)(v67[10] + v67[22]) * v65[10]))
                                                    + (float)((float)(v67[14] + v67[18]) * v65[14]))
                                            + (float)(v73
                                                    + (float)((float)((float)((float)((float)((float)(*v67 + v67[32])
                                                                                            * *v65)
                                                                                    + (float)((float)(v67[4] + v67[28])
                                                                                            * v65[4]))
                                                                            + (float)((float)(v67[8] + v67[24]) * v65[8]))
                                                                    + (float)((float)(v67[12] + v67[20]) * v65[12]))
                                                            + (float)(v67[16] * v65[16]))));
              v69 += v68;
              v67 = v71;
              --v70;
            }
            while (v70);
          }
          ++v63;
          v62 += 4;
        }
        while (v63 != v61);
      }
    }
  }
  else if (v9 == 7)
  {
    v21 = a1[1];
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = 0;
      v24 = *(float *)__p[0];
      v25 = *(float32x2_t *)((char *)__p[0] + 4);
      v26 = *((_QWORD *)a1 + 2);
      v27 = *((float *)__p[0] + 3);
      v28 = *((_QWORD *)a1 + 3) + 4 * v19 - 4 * v10;
      do
      {
        if (v19 < v20)
        {
          v29 = v28 + v26 * v23;
          v30 = *(_QWORD *)(a3 + 16);
          v31 = *(_QWORD *)(a3 + 24) + v19 * v30;
          v32 = v6 - 2 * v19;
          v33 = v29;
          do
          {
            v34 = *(float32x2_t *)(v33 + 4);
            v33 += 4;
            v35 = vmul_f32(v25, vadd_f32(v34, (float32x2_t)vrev64_s32(*(int32x2_t *)(v29 + 16))));
            *(float *)(v31 + v22) = v35.f32[1]
                                  + (float)(v35.f32[0]
                                          + (float)((float)(v24 * (float)(*(float *)v29 + *(float *)(v29 + 24)))
                                                  + (float)(*(float *)(v29 + 12) * v27)));
            v31 += v30;
            v29 = v33;
            --v32;
          }
          while (v32);
        }
        ++v23;
        v22 += 4;
      }
      while (v23 != v21);
    }
  }
  else
  {
    v48 = a1[1];
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = 0;
      v51 = *((_QWORD *)a1 + 2);
      v52 = (float32x2_t *)__p[0];
      v53 = *((_QWORD *)a1 + 3) + 4 * v19 - 4 * v10;
      do
      {
        if (v19 < v20)
        {
          v54 = v53 + v51 * v50;
          v55 = *(_QWORD *)(a3 + 16);
          v56 = *(_QWORD *)(a3 + 24) + v19 * v55;
          v57 = v6 - 2 * v19;
          v58 = v54;
          do
          {
            v59 = *(float *)(v58 + 4);
            v58 += 4;
            v60 = vmul_f32(vadd_f32(*(float32x2_t *)(v54 + 8), (float32x2_t)vrev64_s32(*(int32x2_t *)(v54 + 36))), v52[1]);
            *(float *)(v56 + v49) = v60.f32[1]
                                  + (float)(v60.f32[0]
                                          + (float)((float)((float)((float)(v59 + *(float *)(v54 + 44)) * v52->f32[1])
                                                          + (float)((float)(*(float *)(v54 + 20) + *(float *)(v54 + 28))
                                                                  * v52[2].f32[1]))
                                                  + (float)((float)((float)((float)(*(float *)v54 + *(float *)(v54 + 48))
                                                                          * v52->f32[0])
                                                                  + (float)((float)(*(float *)(v54 + 16)
                                                                                  + *(float *)(v54 + 32))
                                                                          * v52[2].f32[0]))
                                                          + (float)(*(float *)(v54 + 24) * v52[3].f32[0]))));
            v56 += v55;
            v54 = v58;
            --v57;
          }
          while (v57);
        }
        ++v50;
        v49 += 4;
      }
      while (v50 != v48);
    }
  }
  if (v19)
  {
    v74 = 0;
    v76 = *(_QWORD *)(a3 + 16);
    v75 = *(_QWORD *)(a3 + 24);
    do
    {
      sub_236809A34((uint64_t)a1, *a2, a2[1], v74++, v75);
      v75 += v76;
    }
    while (v19 != v74);
  }
  if (v20 < *a1)
  {
    v77 = *(_QWORD *)(a3 + 16);
    v78 = *(_QWORD *)(a3 + 24) + v77 * v20;
    do
    {
      sub_236809A34((uint64_t)a1, *a2, a2[1], v20++, v78);
      v78 += v77;
    }
    while (v20 < *a1);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_23680A040(unsigned int *a1, uint64_t a2, unsigned int *a3, float a4)
{
  int v7;
  unsigned int v8;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  int32x2_t v12;
  unint64_t v13;
  int64x2_t v14;
  float64x2_t v15;
  long double v16;
  int32x2_t v17;
  int32x2_t v18;
  float v19;
  float *v20;
  float v21;
  __int128 v22;
  uint64_t v23;
  int32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int32 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64x2_t v34;
  double v35;
  float64x2_t __x;
  double v37;
  int32x2_t v38;
  uint64_t v39[2];
  __int128 v40;
  float32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float *v47;
  float *v48;

  v35 = -1.0 / ((a4 + a4) * a4);
  v7 = (int)(float)(fabsf(a4) * 2.25);
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  sub_236803F00(&v47, (2 * v8) | 1);
  v9 = 0;
  v10 = v47;
  v11 = 2 * v8;
  v34 = (uint64x2_t)vdupq_n_s64(v11);
  v12 = vadd_s32(vdup_n_s32(-v8), (int32x2_t)0x100000000);
  v13 = v11 + 2;
  do
  {
    v38 = vmovn_s64((int64x2_t)vcgeq_u64(v34, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v9), (int8x16_t)xmmword_2368AF310)));
    v14.i64[0] = v12.i32[0];
    v14.i64[1] = v12.i32[1];
    v15 = vcvtq_f64_s64(v14);
    __x = vmulq_f64(vmulq_n_f64(v15, v35), v15);
    v37 = exp(__x.f64[1]);
    v16 = exp(__x.f64[0]);
    v17.i32[1] = HIDWORD(v37);
    v18.i32[1] = v38.i32[1];
    if ((v38.i8[0] & 1) != 0)
    {
      v19 = v16;
      v10[v9] = v19;
    }
    if ((v38.i8[4] & 1) != 0)
    {
      HIDWORD(v16) = HIDWORD(v37);
      *(float *)&v16 = v37;
      v10[v9 + 1] = *(float *)&v16;
    }
    v9 += 2;
    v12 = vadd_s32(v12, (int32x2_t)0x200000002);
  }
  while (v13 != v9);
  if (a1 != a3 && (char *)v48 - (char *)v10 == 20)
  {
    LODWORD(v16) = 0;
    if (v10 != v48)
    {
      v20 = v10;
      do
      {
        v21 = *v20++;
        *(float *)&v16 = *(float *)&v16 + v21;
      }
      while (v20 != v48);
    }
    *(float *)&v16 = 1.0 / *(float *)&v16;
    *(float *)v17.i32 = *(float *)&v16 * v10[2];
    *(float *)v18.i32 = *(float *)&v16 * v10[1];
    *(float *)&v16 = *(float *)&v16 * *v10;
    v41 = (float32x4_t)vdupq_lane_s32(v17, 0);
    v42 = vdupq_lane_s32(v18, 0);
    v43 = vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    v44 = v41;
    v45 = v42;
    v46 = v43;
    v39[0] = 0;
    v39[1] = 0;
    *(_QWORD *)&v22 = *(_QWORD *)a1;
    *((_QWORD *)&v22 + 1) = HIDWORD(*(_QWORD *)a1);
    v40 = v22;
    sub_23688249C((unint64_t)a1, v39, &v41, 0, a3);
    goto LABEL_18;
  }
  if (*(_DWORD *)a2)
  {
LABEL_17:
    sub_236809B0C(a1, (uint64_t *)&v47, a2);
    sub_236809B0C((unsigned int *)a2, (uint64_t *)&v47, (uint64_t)a3);
LABEL_18:
    v23 = 0;
    goto LABEL_19;
  }
  sub_2367C431C((uint64_t)&v41, a1[1], *a1);
  v23 = v43.u32[2];
  if (!v43.i32[2])
  {
    v25 = v42;
    v42.i64[1] = 0;
    v26 = v43.i64[0];
    *(float32x4_t *)a2 = v41;
    v27 = *(_QWORD *)(a2 + 24);
    *(int32x4_t *)(a2 + 16) = v25;
    if (v27)
    {
      v28 = -*(_QWORD *)(v27 - 24);
      do
        v29 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v29 + v28, &qword_2564313D8));
      free(*(void **)(v27 - 32));
      v30 = v43.i32[2];
      *(_QWORD *)(a2 + 32) = v26;
      if (v30)
        goto LABEL_17;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v26;
    }
    v31 = v42.i64[1];
    v42.i64[1] = 0;
    if (v31)
    {
      v32 = -*(_QWORD *)(v31 - 24);
      do
        v33 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v33 + v32, &qword_2564313D8));
      free(*(void **)(v31 - 32));
    }
    goto LABEL_17;
  }
LABEL_19:
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  return v23;
}

void sub_23680A308(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23680A328(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int *v35;
  _DWORD *v36;
  unint64_t v37;
  int v38;
  uint64_t i;
  unint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  uint64_t j;
  unint64_t v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;

  v6 = *a1;
  v7 = a1[1];
  sub_2367C431C((uint64_t)&v76, v6, v7);
  v8 = v80;
  if (!v80)
  {
    v10 = v77;
    v9 = v78;
    v78 = 0;
    v11 = v79;
    *(_OWORD *)a2 = v76;
    v12 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v9;
    if (v12)
    {
      v13 = -*(_QWORD *)(v12 - 24);
      do
        v14 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v14 + v13, &qword_2564313D8));
      free(*(void **)(v12 - 32));
    }
    *(_QWORD *)(a2 + 32) = v11;
    sub_2367C431C((uint64_t)&v71, v6, v7);
    v8 = v75;
    if (!v75)
    {
      v16 = v72;
      v15 = v73;
      v73 = 0;
      v17 = v74;
      *(_OWORD *)(a2 + 40) = v71;
      v18 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 56) = v16;
      *(_QWORD *)(a2 + 64) = v15;
      if (v18)
      {
        v19 = -*(_QWORD *)(v18 - 24);
        do
          v20 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v20 + v19, &qword_2564313D8));
        free(*(void **)(v18 - 32));
      }
      v21 = 0;
      *(_QWORD *)(a2 + 72) = v17;
      v22 = 1;
      __asm
      {
        FMOV            V24.4S, #1.5
        FMOV            V25.4S, #-1.5
      }
      v69 = (float32x4_t)vdupq_n_s32(0xBD23D70A);
      v70 = (float32x4_t)vdupq_n_s32(0x3D23D70Au);
      v67 = (float32x4_t)vdupq_n_s32(0x3F39663Bu);
      v68 = (float32x4_t)vdupq_n_s32(0xC1E3C0E2);
      v65 = (float32x4_t)vdupq_n_s32(0xC0A622D7);
      v66 = (float32x4_t)vdupq_n_s32(0x41E3C0E2u);
      v63 = (float32x4_t)vdupq_n_s32(0x402C5C5Eu);
      v64 = (float32x4_t)vdupq_n_s32(0x40A622D7u);
      v61 = (float32x4_t)vdupq_n_s32(0x3E072B02u);
      v62 = (float32x4_t)vdupq_n_s32(0x4009EB85u);
      v59 = _Q24;
      v60 = (float32x4_t)vdupq_n_s32(0xBE072B02);
      v58 = _Q25;
      while (1)
      {
        v29 = v22;
        if ((_DWORD)v7)
        {
          v30 = 0;
          v32 = *(_QWORD *)(a2 + 40 * v21 + 16);
          v31 = *(_DWORD **)(a2 + 40 * v21 + 24);
          v34 = *(_QWORD *)&a1[10 * v21 + 4];
          v33 = *(int **)&a1[10 * v21 + 6];
          do
          {
            v35 = v33;
            v36 = v31;
            v37 = v6;
            if ((_DWORD)v6)
            {
              do
              {
                v38 = *v35++;
                *v36++ = v38;
                --v37;
              }
              while (v37);
            }
            ++v30;
            v31 = (_DWORD *)((char *)v31 + v32);
            v33 = (int *)((char *)v33 + v34);
          }
          while (v30 != v7);
        }
        v8 = sub_23680A040(&a1[10 * v21], a3, &a1[10 * v21], 1.5642);
        if ((_DWORD)v8)
          break;
        if ((v29 & 1) != 0)
        {
          if ((_DWORD)v7)
          {
            for (i = 0; i != v7; ++i)
            {
              if ((_DWORD)v6)
              {
                v40 = 0;
                v41 = (float32x4_t *)(*(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 16) * i);
                v42 = (float32x4_t *)(*((_QWORD *)a1 + 3) + *((_QWORD *)a1 + 2) * i);
                do
                {
                  v43 = vsubq_f32(*v41, *v42);
                  *(int8x16_t *)v42 = vbslq_s8((int8x16_t)vcgtq_f32(*v42, v59), (int8x16_t)vaddq_f32(*v42, v58), vandq_s8((int8x16_t)vaddq_f32(*v42, v59), (int8x16_t)vcgtq_f32(v58, *v42)));
                  ++v42;
                  *(int8x16_t *)v41++ = vbslq_s8((int8x16_t)vcgtq_f32(v43, v70), (int8x16_t)vaddq_f32(v43, v69), vandq_s8((int8x16_t)vaddq_f32(v43, v70), (int8x16_t)vcgtq_f32(v69, v43)));
                  v40 += 4;
                }
                while (v40 < v6);
              }
            }
          }
        }
        else
        {
          if (!(_DWORD)v7)
            goto LABEL_33;
          for (j = 0; j != v7; ++j)
          {
            if ((_DWORD)v6)
            {
              v45 = 0;
              v46 = (float32x4_t *)(*(_QWORD *)(a2 + 64) + *(_QWORD *)(a2 + 56) * j);
              v47 = (float32x4_t *)(*((_QWORD *)a1 + 8) + *((_QWORD *)a1 + 7) * j);
              do
              {
                v48 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, *v47), (int8x16_t)vmlaq_f32(v68, v67, vaddq_f32(*v47, v66)), vbslq_s8((int8x16_t)vcgeq_f32(*v47, v66), (int8x16_t)vmlaq_f32(v66, v67, vaddq_f32(*v47, v68)), *(int8x16_t *)v47));
                v49 = vsubq_f32(*v46, v48);
                *v46++ = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v65, v49), (int8x16_t)vmlaq_f32(v65, v67, vaddq_f32(v49, v64)), vbslq_s8((int8x16_t)vcgeq_f32(v49, v64), (int8x16_t)vmlaq_f32(v64, v67, vaddq_f32(v49, v65)), (int8x16_t)v49)), v63);
                v50 = vmulq_f32(v48, v62);
                *v47++ = vaddq_f32(v50, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v50, v61), (int8x16_t)v61, vbslq_s8((int8x16_t)vcgtq_f32(v60, v50), (int8x16_t)v60, (int8x16_t)v50)));
                v45 += 4;
              }
              while (v45 < v6);
            }
          }
        }
        v22 = 0;
        v21 = 1;
        if ((v29 & 1) == 0)
        {
LABEL_33:
          v8 = 0;
          break;
        }
      }
      if (!v75)
      {
        v51 = v73;
        v73 = 0;
        if (v51)
        {
          v52 = -*(_QWORD *)(v51 - 24);
          do
            v53 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v53 + v52, &qword_2564313D8));
          free(*(void **)(v51 - 32));
        }
      }
    }
    if (!v80)
    {
      v54 = v78;
      v78 = 0;
      if (v54)
      {
        v55 = -*(_QWORD *)(v54 - 24);
        do
          v56 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v56 + v55, &qword_2564313D8));
        free(*(void **)(v54 - 32));
      }
    }
  }
  return v8;
}

void sub_23680A758(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (!*(_DWORD *)(v1 - 104))
  {
    v3 = *(_QWORD *)(v1 - 120);
    *(_QWORD *)(v1 - 120) = 0;
    if (v3)
    {
      v4 = -*(_QWORD *)(v3 - 24);
      do
        v5 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v5 + v4, &qword_2564313D8));
      free(*(void **)(v3 - 32));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23680A7E4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t k;
  unint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  __int128 v59;
  uint64_t m;
  unint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t v64;
  uint64_t n;
  unint64_t v66;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  float32x4_t *v79;
  float32x4_t *v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t ii;
  uint64_t jj;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _BYTE v100[120];
  unsigned int v101;
  _BYTE v102[120];
  unsigned int v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;

  sub_2367CA770((uint64_t)v102, *a2, a2[1]);
  v6 = v103;
  if (!v103)
  {
    sub_2367CA9E4((uint64_t)v100, (uint64_t)v102);
    v7 = (unsigned int *)(a3 + 280);
    sub_2367D086C(a3 + 280, (uint64_t)v100);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)&v100[i]);
    sub_2367CA770((uint64_t)v100, *a2, a2[1]);
    v6 = v101;
    if (!v101)
    {
      sub_2367CA9E4((uint64_t)&v95, (uint64_t)v100);
      v9 = a3 + 160;
      sub_2367D086C(a3 + 160, (uint64_t)&v95);
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)((char *)&v95 + j));
      v11 = 0;
      while (1)
      {
        v12 = &a2[10 * v11];
        v6 = sub_23680A040(v12, a1, &v7[10 * v11], 7.1559);
        if ((_DWORD)v6)
          break;
        v13 = v12[1];
        if ((_DWORD)v13)
        {
          v14 = 0;
          LODWORD(v15) = *v12;
          do
          {
            if ((_DWORD)v15)
            {
              v16 = 0;
              v17 = (float32x4_t *)(*(_QWORD *)(v9 + 40 * v11 + 24) + *(_QWORD *)(v9 + 40 * v11 + 16) * v14);
              v18 = (float32x4_t *)(*(_QWORD *)&v7[10 * v11 + 6] + *(_QWORD *)&v7[10 * v11 + 4] * v14);
              v19 = (float32x4_t *)(*((_QWORD *)v12 + 3) + *((_QWORD *)v12 + 2) * v14);
              do
              {
                v20 = *v19++;
                v21 = v20;
                v22 = *v18++;
                *v17++ = vsubq_f32(v21, v22);
                v16 += 4;
                v15 = *v12;
              }
              while (v16 < v15);
              v13 = v12[1];
            }
            ++v14;
          }
          while (v14 < v13);
        }
        if (++v11 == 3)
        {
          v23 = *(unsigned int *)(a3 + 284);
          if ((_DWORD)v23)
          {
            v24 = 0;
            LODWORD(v25) = *(_DWORD *)(a3 + 280);
            v26 = (float32x4_t)vdupq_n_s32(0xBEB97B11);
            v27 = (float32x4_t)vdupq_n_s32(0x424784F6u);
            v28 = (float32x4_t)vdupq_n_s32(0x420754D3u);
            v29 = (float32x4_t)vdupq_n_s32(0x41675511u);
            do
            {
              if ((_DWORD)v25)
              {
                v30 = 0;
                v31 = *(_QWORD *)(a3 + 296) * v24;
                v32 = (float32x4_t *)(*(_QWORD *)(a3 + 384) + v31);
                v33 = (float32x4_t *)(*(_QWORD *)(a3 + 344) + v31);
                v34 = (float32x4_t *)(*(_QWORD *)(a3 + 304) + v31);
                do
                {
                  v35 = vmlaq_f32(*v32, v26, *v33);
                  v36 = vmulq_f32(*v33, v29);
                  *v34 = vmulq_f32(*v34, v28);
                  ++v34;
                  *v33++ = v36;
                  *v32++ = vmulq_f32(v35, v27);
                  v30 += 4;
                  v25 = *v7;
                }
                while (v30 < v25);
                v23 = *(unsigned int *)(a3 + 284);
              }
              ++v24;
            }
            while (v24 < v23);
          }
          v37 = *(unsigned int *)(a3 + 160);
          v38 = *(unsigned int *)(a3 + 164);
          sub_2367C431C((uint64_t)&v95, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 164));
          v6 = v99;
          if (!v99)
          {
            v39 = v96;
            v40 = v97;
            v97 = 0;
            v41 = v98;
            *(_OWORD *)(a3 + 80) = v95;
            *(_QWORD *)(a3 + 96) = v39;
            v42 = *(_QWORD *)(a3 + 104);
            *(_QWORD *)(a3 + 104) = v40;
            if (v42)
            {
              v43 = -*(_QWORD *)(v42 - 24);
              do
                v44 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v44 + v43, &qword_2564313D8));
              free(*(void **)(v42 - 32));
            }
            *(_QWORD *)(a3 + 112) = v41;
            sub_2367C431C((uint64_t)&v104, v37, v38);
            v6 = v108;
            if (!v108)
            {
              v46 = v105;
              v45 = v106;
              v106 = 0;
              v47 = v107;
              *(_OWORD *)(a3 + 120) = v104;
              v48 = *(_QWORD *)(a3 + 144);
              *(_QWORD *)(a3 + 136) = v46;
              *(_QWORD *)(a3 + 144) = v45;
              if (v48)
              {
                v49 = -*(_QWORD *)(v48 - 24);
                do
                  v50 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v50 + v49, &qword_2564313D8));
                free(*(void **)(v48 - 32));
              }
              v51 = 0;
              v52 = 0;
              *(_QWORD *)(a3 + 152) = v47;
              v53 = 1;
              v93 = (float32x4_t)vdupq_n_s32(0xBE947AE1);
              v94 = (float32x4_t)vdupq_n_s32(0x3E947AE1u);
              v91 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
              v92 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
              while (1)
              {
                v54 = v51;
                if ((_DWORD)v38)
                {
                  for (k = 0; k != v38; ++k)
                  {
                    if ((_DWORD)v37)
                    {
                      v56 = 0;
                      v57 = (_OWORD *)(*(_QWORD *)(a3 + 80 + 40 * v52 + 24) + *(_QWORD *)(a3 + 80 + 40 * v52 + 16) * k);
                      v58 = (__int128 *)(*(_QWORD *)(v9 + 40 * v52 + 24) + *(_QWORD *)(a3 + 176) * k);
                      do
                      {
                        v59 = *v58++;
                        *v57++ = v59;
                        v56 += 4;
                      }
                      while (v56 < v37);
                    }
                  }
                }
                v6 = sub_23680A040((unsigned int *)(v9 + 40 * v52), a1, (unsigned int *)(v9 + 40 * v52), 3.2249);
                if ((_DWORD)v6)
                  break;
                if ((v53 & 1) != 0)
                {
                  if ((_DWORD)v38)
                  {
                    for (m = 0; m != v38; ++m)
                    {
                      if ((_DWORD)v37)
                      {
                        v61 = 0;
                        v62 = (float32x4_t *)(*(_QWORD *)(a3 + 104) + *(_QWORD *)(a3 + 96) * m);
                        v63 = (float32x4_t *)(*(_QWORD *)(a3 + 184) + *(_QWORD *)(a3 + 176) * m);
                        do
                        {
                          v64 = vsubq_f32(*v62, *v63);
                          *(int8x16_t *)v63 = vbslq_s8((int8x16_t)vcgtq_f32(*v63, v94), (int8x16_t)vaddq_f32(*v63, v93), vandq_s8((int8x16_t)vaddq_f32(*v63, v94), (int8x16_t)vcgtq_f32(v93, *v63)));
                          ++v63;
                          *v62++ = v64;
                          v61 += 4;
                        }
                        while (v61 < v37);
                      }
                    }
                  }
                }
                else if ((_DWORD)v38)
                {
                  for (n = 0; n != v38; ++n)
                  {
                    if ((_DWORD)v37)
                    {
                      v66 = 0;
                      v67 = (float32x4_t *)(*(_QWORD *)(a3 + 144) + *(_QWORD *)(a3 + 136) * n);
                      v68 = (float32x4_t *)(*(_QWORD *)(a3 + 224) + *(_QWORD *)(a3 + 176) * n);
                      do
                      {
                        v69 = vsubq_f32(*v67, *v68);
                        *v68 = vaddq_f32(*v68, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v68, v92), (int8x16_t)v92, vbslq_s8((int8x16_t)vcgtq_f32(v91, *v68), (int8x16_t)v91, *(int8x16_t *)v68)));
                        ++v68;
                        *v67++ = v69;
                        v66 += 4;
                      }
                      while (v66 < v37);
                    }
                  }
                }
                v53 = 0;
                v51 = 1;
                v52 = 1;
                if ((v54 & 1) != 0)
                {
                  v6 = sub_23680A040((unsigned int *)(a3 + 240), a1, (unsigned int *)(a3 + 240), 3.2249);
                  if (!(_DWORD)v6)
                  {
                    v70 = *(unsigned int *)(a3 + 124);
                    if ((_DWORD)v70)
                    {
                      v71 = 0;
                      v72 = *(unsigned int *)(a3 + 120);
                      v74 = *(_QWORD *)(a3 + 96);
                      v73 = *(float32x4_t **)(a3 + 104);
                      v75 = (float32x4_t)vdupq_n_s32(0x42380000u);
                      v76 = (float32x4_t)vdupq_n_s32(0x3EB1A74Au);
                      v77 = (float32x4_t)vdupq_n_s32(0x3F272C5Bu);
                      do
                      {
                        if ((_DWORD)v72)
                        {
                          v78 = 0;
                          v79 = (float32x4_t *)(*(_QWORD *)(a3 + 144) + *(_QWORD *)(a3 + 136) * v71);
                          v80 = v73;
                          do
                          {
                            v81 = *v79++;
                            *v80 = vmulq_f32(*v80, vmlaq_f32(v77, v76, vdivq_f32(v75, vmlaq_f32(v75, v81, v81))));
                            ++v80;
                            v78 += 4;
                          }
                          while (v78 < v72);
                        }
                        ++v71;
                        v73 = (float32x4_t *)((char *)v73 + v74);
                      }
                      while (v71 != v70);
                    }
                    v6 = 0;
                  }
                  break;
                }
              }
              if (!v108)
              {
                v82 = v106;
                v106 = 0;
                if (v82)
                {
                  v83 = -*(_QWORD *)(v82 - 24);
                  do
                    v84 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v84 + v83, &qword_2564313D8));
                  free(*(void **)(v82 - 32));
                }
              }
            }
            if (!v99)
            {
              v85 = v97;
              v97 = 0;
              if (v85)
              {
                v86 = -*(_QWORD *)(v85 - 24);
                do
                  v87 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v87 + v86, &qword_2564313D8));
                free(*(void **)(v85 - 32));
              }
            }
            if (!(_DWORD)v6)
              v6 = sub_23680A328((unsigned int *)(a3 + 80), a3, a1);
          }
          break;
        }
      }
      if (!v101)
      {
        for (ii = 104; ii != -16; ii -= 40)
          sub_2367C2F38((uint64_t *)&v100[ii]);
      }
    }
    if (!v103)
    {
      for (jj = 104; jj != -16; jj -= 40)
        sub_2367C2F38((uint64_t *)&v102[jj]);
    }
  }
  return v6;
}

void sub_23680AE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,int a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t i;
  uint64_t j;

  if (!*(_DWORD *)(v64 - 112))
  {
    v66 = *(_QWORD *)(v64 - 128);
    *(_QWORD *)(v64 - 128) = 0;
    if (v66)
    {
      v67 = -*(_QWORD *)(v66 - 24);
      do
        v68 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v68 + v67, &qword_2564313D8));
      free(*(void **)(v66 - 32));
    }
  }
  if (!a22 && a20)
  {
    v69 = -*(_QWORD *)(a20 - 24);
    do
      v70 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v70 + v69, &qword_2564313D8));
    free(*(void **)(a20 - 32));
  }
  if (!a47)
  {
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)(&a32 + i));
  }
  if (!a64)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a49 + j));
  }
  _Unwind_Resume(a1);
}

void sub_23680AF18(unsigned int *a1, uint64_t a2, float *a3, unsigned int *a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  _DWORD *v23;
  unint64_t v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _OWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  float32x4_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t i;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  _OWORD *v126;
  unint64_t v127;
  __int128 v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  float *v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  _OWORD *v144;
  unint64_t v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _OWORD v164[13];
  float v165[56];
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  v14 = a1[1];
  if ((_DWORD)v14)
  {
    v15 = 0;
    a7.n128_f64[0] = sqrt(a7.n128_f64[0] * 0.5) * 0.399058176 / 8.5 * *(double *)a9.i64;
    a7.n128_f32[0] = a7.n128_f64[0];
    v16 = sqrt(a8 * 0.330000013) * 0.399058176 / 8.5 * *(double *)a9.i64;
    v18 = *((_QWORD *)a1 + 2);
    v17 = (float *)*((_QWORD *)a1 + 3);
    a10.i64[0] = 0x3FE199999999999ALL;
    a11.i64[0] = 0x3FF0CCCCCCCCCCCDLL;
    v20 = *((_QWORD *)a4 + 2);
    v19 = (_DWORD *)*((_QWORD *)a4 + 3);
    a9.f32[0] = *(double *)a9.i64;
    a12.i64[0] = COERCE_UNSIGNED_INT(0.5) | 0x3FD51EB800000000;
    while (1)
    {
      v21 = v17;
      v22 = a3;
      v23 = v19;
      v24 = v13;
      if ((_DWORD)v13)
        break;
LABEL_17:
      ++v15;
      v19 = (_DWORD *)((char *)v19 + v20);
      a3 = (float *)((char *)a3 + a2);
      v17 = (float *)((char *)v17 + v18);
      if (v15 == v14)
        goto LABEL_18;
    }
    while (1)
    {
      v25 = (float)((float)(fabsf(*v21) + fabsf(*v22)) * 0.5) + a9.f32[0];
      a13.f32[0] = (float)(*v21 - *v22) * (float)(a7.n128_f32[0] / v25);
      *v23 = a13.i32[0];
      v26 = v16 / v25;
      v27 = fabsf(*v21);
      v28 = v27 * 0.55;
      v29 = v27 * 1.05;
      v30 = *v22;
      if (*v21 >= 0.0)
      {
        if (v28 > v30)
        {
          v33 = v26;
          v34 = v28 - v30;
          goto LABEL_11;
        }
        if (v29 < v30)
        {
          v31 = v26;
          v32 = v30 - v29;
LABEL_14:
          *(double *)a13.i64 = a13.f32[0] - v32 * v31;
          goto LABEL_15;
        }
      }
      else
      {
        if (v30 > -v28)
        {
          v31 = v26;
          v32 = v28 + v30;
          goto LABEL_14;
        }
        if (v30 < -v29)
        {
          v33 = v26;
          v34 = (float)-*v22 - v29;
LABEL_11:
          *(double *)a13.i64 = v34 * v33 + a13.f32[0];
LABEL_15:
          a13.f32[0] = *(double *)a13.i64;
          *v23 = a13.i32[0];
        }
      }
      ++v23;
      ++v22;
      ++v21;
      if (!--v24)
        goto LABEL_17;
    }
  }
LABEL_18:
  v145 = v14;
  v161 = 0;
  v163 = v13;
  v35 = 0uLL;
  do
  {
    if ((_DWORD)v13)
    {
      v36 = 0;
      v37 = a6 + v161 * a5;
      v39 = *((_QWORD *)a4 + 2);
      v38 = *((_QWORD *)a4 + 3);
      v40 = v161 - 4;
      v41 = -4;
      v43 = *a4;
      v42 = a4[1];
      do
      {
        v44 = 0;
        v45 = v164;
        do
        {
          v46 = (v40 + v44);
          if (v40 + (int)v44 < 0 || v42 <= v46)
          {
            v50 = &v164[3 * v44];
            v50[1] = v35;
            v50[2] = v35;
            *v50 = v35;
          }
          else
          {
            v47 = 0;
            v48 = v38 + v39 * v46;
            do
            {
              v49 = v41 + v47;
              a7.n128_u32[0] = 0;
              if (((v41 + (_DWORD)v47) & 0x80000000) == 0 && v43 > v49)
                a7.n128_u32[0] = *(_DWORD *)(v48 + 4 * v49);
              *((_DWORD *)v45 + v47++) = a7.n128_u32[0];
            }
            while (v47 != 9);
            HIDWORD(v164[3 * v44 + 2]) = 0;
            *(_QWORD *)((char *)&v164[3 * v44 + 2] + 4) = 0;
          }
          ++v44;
          v45 += 3;
        }
        while (v44 != 9);
        a7.n128_u64[0] = (unint64_t)sub_23680B928(v165, 12, a7.n128_f64[0], *(double *)&v35, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v37 + 4 * v36);
        v35 = 0uLL;
        *(_DWORD *)(v37 + 4 * v36++) = a7.n128_u32[0];
        ++v41;
        LODWORD(v13) = v163;
      }
      while (v36 != v163);
    }
    ++v161;
  }
  while (v161 != 4);
  v51 = v145;
  v52 = *((_QWORD *)a4 + 2);
  v53 = v52 >> 2;
  if (v145 - 4 < 5)
  {
    v127 = 4;
  }
  else
  {
    v54 = *((_QWORD *)a4 + 3);
    v55 = a5;
    v57 = *a4;
    v56 = a4[1];
    v58 = a6 + 4 * a5 + 16;
    v59 = 4 * v52 - 16 * v53 + v54 + 12;
    v60 = 4 * v52 + 28;
    v61 = v54 + v60 - 12 * v53;
    v62 = v54 + v60 - 8 * v53;
    v63 = 4 * v52 - 4 * v53 + v54 + 16;
    v64 = 16 * v53 + 4 * v52 + v54 + 12;
    v65 = 4 * v52 + 4 * v53 + v54 + 16;
    v66 = 12 * v53 + 4 * v52 + v54 + 16;
    v67 = 8 * v53 + 4 * v52 + v54 + 28;
    v68 = 4;
    v69 = 0uLL;
    v70 = v54 + 4 * v52;
    do
    {
      v147 = v67;
      v148 = v66;
      v149 = v65;
      v150 = v64;
      v151 = v63;
      v152 = v62;
      v153 = v61;
      v154 = v59;
      v155 = v58;
      v71 = 0;
      v158 = v54 + v68 * v52;
      v72 = v68 - 4;
      v73 = -4;
      v159 = v68;
      v74 = a6 + v68 * v55;
      do
      {
        v75 = 0;
        v76 = v164;
        do
        {
          v77 = (v72 + v75);
          if (v72 + (int)v75 < 0 || v56 <= v77)
          {
            v81 = (float32x4_t *)&v164[3 * v75];
            v81[1] = v69;
            v81[2] = v69;
            *v81 = v69;
          }
          else
          {
            v78 = 0;
            v79 = v54 + v52 * v77;
            do
            {
              v80 = v73 + v78;
              a7.n128_u32[0] = 0;
              if (((v73 + (_DWORD)v78) & 0x80000000) == 0 && v57 > v80)
                a7.n128_u32[0] = *(_DWORD *)(v79 + 4 * v80);
              *((_DWORD *)v76 + v78++) = a7.n128_u32[0];
            }
            while (v78 != 9);
            HIDWORD(v164[3 * v75 + 2]) = 0;
            *(_QWORD *)((char *)&v164[3 * v75 + 2] + 4) = 0;
          }
          ++v75;
          v76 += 3;
        }
        while (v75 != 9);
        a7.n128_u64[0] = (unint64_t)sub_23680B928(v165, 12, a7.n128_f64[0], *(double *)v69.i64, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = *(float *)(v74 + 4 * v71) + a7.n128_f32[0];
        v69 = 0uLL;
        *(_DWORD *)(v74 + 4 * v71++) = a7.n128_u32[0];
        ++v73;
      }
      while (v71 != 4);
      LODWORD(v13) = v163;
      if (v163 >= 0xC)
      {
        v83 = 0;
        for (i = 12; i <= v163; i += 4)
        {
          v85 = *(float32x4_t *)(v70 + v83 + 16);
          v86 = *(float32x4_t *)(v70 + v83 + 12);
          v87 = vaddq_f32(v85, *(float32x4_t *)(v70 + v83 + 20));
          v88 = vaddq_f32(*(float32x4_t *)(v70 + v83 + 32), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v70 + v83), *(float32x4_t *)(v70 + v83 + 4)), vaddq_f32(*(float32x4_t *)(v70 + v83 + 8), v86)), vaddq_f32(v87, vaddq_f32(*(float32x4_t *)(v70 + v83 + 24), *(float32x4_t *)(v70 + v83 + 28)))));
          v89 = *(float32x4_t *)(v151 + v83);
          v90 = vaddq_f32(v85, *(float32x4_t *)(v149 + v83));
          v91 = vaddq_f32(*(float32x4_t *)(v150 + v83 + 4), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 + 4), *(float32x4_t *)(v153 + v83 - 12)), vaddq_f32(*(float32x4_t *)(v152 + v83 - 12), v89)), vaddq_f32(v90, vaddq_f32(*(float32x4_t *)(v147 + v83 - 12), *(float32x4_t *)(v148 + v83)))));
          v92 = vmlaq_f32(vmulq_f32(v88, v88), v91, v91);
          v93 = *(float32x4_t *)(v151 + v83 - 4);
          v94 = vaddq_f32(v85, *(float32x4_t *)(v149 + v83 + 4));
          v95 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83 - 24), *(float32x4_t *)(v152 + v83 - 20)), vaddq_f32(v93, vaddq_f32(v94, vaddq_f32(*(float32x4_t *)(v147 + v83 - 4), *(float32x4_t *)(v148 + v83 + 12)))));
          v96 = vmlaq_f32(v92, v95, v95);
          a12 = *(float32x4_t *)(v151 + v83 + 4);
          v97 = vaddq_f32(v85, *(float32x4_t *)(v149 + v83 - 4));
          v98 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83), *(float32x4_t *)(v152 + v83 - 4)), vaddq_f32(a12, vaddq_f32(v97, vaddq_f32(*(float32x4_t *)(v147 + v83 - 20), *(float32x4_t *)(v148 + v83 - 12)))));
          v99 = vmlaq_f32(v96, v98, v98);
          v100 = *(float32x4_t *)(v152 + v83 - 8);
          v101 = *(float32x4_t *)(v147 + v83 - 16);
          v102 = vaddq_f32(*(float32x4_t *)(v150 + v83), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 + 8), *(float32x4_t *)(v153 + v83 - 8)), vaddq_f32(v89, v100)), vaddq_f32(v90, vaddq_f32(v101, *(float32x4_t *)(v148 + v83 - 4)))));
          v103 = *(float32x4_t *)(v152 + v83 - 16);
          v104 = *(float32x4_t *)(v147 + v83 - 8);
          v105 = vaddq_f32(*(float32x4_t *)(v150 + v83 + 8), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83), *(float32x4_t *)(v153 + v83 - 16)), vaddq_f32(v89, v103)), vaddq_f32(v90, vaddq_f32(v104, *(float32x4_t *)(v148 + v83 + 4)))));
          v106 = *(float32x4_t *)(v151 + v83 - 8);
          v107 = *(float32x4_t *)(v149 + v83 + 8);
          v108 = vaddq_f32(*(float32x4_t *)(v149 + v83 + 16), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v151 + v83 - 16), *(float32x4_t *)(v151 + v83 - 12)), vaddq_f32(v86, v106)), vaddq_f32(v87, vaddq_f32(v107, *(float32x4_t *)(v149 + v83 + 12)))));
          v109 = *(float32x4_t *)(v149 + v83 - 8);
          v110 = *(float32x4_t *)(v151 + v83 + 8);
          a9 = vaddq_f32(*(float32x4_t *)(v151 + v83 + 16), vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v149 + v83 - 16), *(float32x4_t *)(v149 + v83 - 12)), vaddq_f32(v86, v109)), vaddq_f32(v87, vaddq_f32(v110, *(float32x4_t *)(v151 + v83 + 12)))));
          v111 = vaddq_f32(vaddq_f32(v103, *(float32x4_t *)(v153 + v83 - 20)), vaddq_f32(v93, vaddq_f32(v94, vaddq_f32(v104, *(float32x4_t *)(v148 + v83 + 8)))));
          v112 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v99, v102, v102), v105, v105), v108, v108), a9, a9), v111, v111);
          v113 = vaddq_f32(vaddq_f32(v100, *(float32x4_t *)(v153 + v83 - 4)), vaddq_f32(a12, vaddq_f32(v97, vaddq_f32(v101, *(float32x4_t *)(v148 + v83 - 8)))));
          v114 = vmlaq_f32(v112, v113, v113);
          a13 = vaddq_f32(v94, vaddq_f32(v107, *(float32x4_t *)(v147 + v83)));
          v115 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v152 + v83 - 24), v106), vaddq_f32(v93, a13));
          v116 = vmlaq_f32(v114, v115, v115);
          a11 = vaddq_f32(a12, vaddq_f32(v97, vaddq_f32(v109, *(float32x4_t *)(v147 + v83 - 24))));
          a10 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v152 + v83), v110), a11);
          v69 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v116, a10, a10), a9, a9), v108, v108), v105, v105), v102, v102);
          a7 = (__n128)vaddq_f32(*(float32x4_t *)(v155 + v83), v69);
          *(__n128 *)(v155 + v83) = a7;
          v83 += 16;
        }
        v82 = i - 8;
      }
      else
      {
        v82 = 4;
      }
      if (v82 < v163)
      {
        v117 = v82 - 4;
        do
        {
          if (v57 - 4 <= v82 || v56 - 4 <= v159)
          {
            v120 = 0;
            v121 = v164;
            v69 = 0uLL;
            do
            {
              v122 = (v72 + v120);
              if (v72 + (int)v120 < 0 || v56 <= v122)
              {
                v126 = &v164[3 * v120];
                v126[1] = 0uLL;
                v126[2] = 0uLL;
                *v126 = 0uLL;
              }
              else
              {
                v123 = 0;
                v124 = v54 + v52 * v122;
                do
                {
                  v125 = v117 + v123;
                  a7.n128_u32[0] = 0;
                  if (((v117 + (_DWORD)v123) & 0x80000000) == 0 && v57 > v125)
                    a7.n128_u32[0] = *(_DWORD *)(v124 + 4 * v125);
                  *((_DWORD *)v121 + v123++) = a7.n128_u32[0];
                }
                while (v123 != 9);
                HIDWORD(v164[3 * v120 + 2]) = 0;
                *(_QWORD *)((char *)&v164[3 * v120 + 2] + 4) = 0;
              }
              ++v120;
              v121 += 3;
            }
            while (v120 != 9);
            v118 = v165;
            v119 = 12;
          }
          else
          {
            v118 = (float *)(v158 + 4 * v82);
            v119 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_23680B928(v118, v119, a7.n128_f64[0], *(double *)v69.i64, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          v69.i32[0] = *(_DWORD *)(v74 + 4 * v82);
          a7.n128_f32[0] = a7.n128_f32[0] + v69.f32[0];
          *(_DWORD *)(v74 + 4 * v82++) = a7.n128_u32[0];
          ++v117;
          LODWORD(v13) = v163;
        }
        while (v82 != v163);
      }
      v68 = v159 + 1;
      v55 = a5;
      v58 = v155 + a5;
      v70 += v52;
      v59 = v154 + v52;
      v61 = v153 + v52;
      v62 = v152 + v52;
      v63 = v151 + v52;
      v64 = v150 + v52;
      v65 = v149 + v52;
      v66 = v148 + v52;
      v67 = v147 + v52;
      v127 = v145 - 4;
      v69 = 0uLL;
    }
    while (v159 + 1 != v145 - 4);
    v51 = v145;
  }
  if (v127 < v51)
  {
    v128 = 0uLL;
    do
    {
      v162 = v127;
      if ((_DWORD)v13)
      {
        v129 = 0;
        v130 = a6 + v127 * a5;
        v131 = *((_QWORD *)a4 + 3);
        v132 = *a4;
        v133 = a4[1];
        v134 = v127 - 4;
        v160 = v131 + v127 * v52;
        v135 = -4;
        do
        {
          if (v129 < 4 || v132 - 4 <= v129 || v133 - 4 <= v162)
          {
            v138 = 0;
            v139 = v164;
            do
            {
              v140 = (v134 + v138);
              if (v134 + (int)v138 < 0 || v133 <= v140)
              {
                v144 = &v164[3 * v138];
                v144[1] = v128;
                v144[2] = v128;
                *v144 = v128;
              }
              else
              {
                v141 = 0;
                v142 = v131 + v52 * v140;
                do
                {
                  v143 = v135 + v141;
                  a7.n128_u32[0] = 0;
                  if (((v135 + (_DWORD)v141) & 0x80000000) == 0 && v132 > v143)
                    a7.n128_u32[0] = *(_DWORD *)(v142 + 4 * v143);
                  *((_DWORD *)v139 + v141++) = a7.n128_u32[0];
                }
                while (v141 != 9);
                HIDWORD(v164[3 * v138 + 2]) = 0;
                *(_QWORD *)((char *)&v164[3 * v138 + 2] + 4) = 0;
              }
              ++v138;
              v139 += 3;
            }
            while (v138 != 9);
            v136 = v165;
            v137 = 12;
          }
          else
          {
            v136 = (float *)(v160 + 4 * v129);
            v137 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_23680B928(v136, v137, a7.n128_f64[0], *(double *)&v128, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v130 + 4 * v129);
          *(_DWORD *)(v130 + 4 * v129++) = a7.n128_u32[0];
          ++v135;
          LODWORD(v13) = v163;
          v128 = 0uLL;
        }
        while (v129 != v163);
      }
      v127 = v162 + 1;
    }
    while (v162 + 1 != v145);
  }
}

int32x2_t sub_23680B928(float *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float32x2_t v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;

  *(float *)&a3 = *(a1 - 1);
  v13 = *a1;
  v14 = &a1[-3 * a2];
  v15 = &a1[-a2];
  v16 = &a1[a2];
  v17 = a1 - 4;
  v18 = a1 - 3;
  v19 = a1 - 2;
  v20 = a1 + 2;
  v21 = &a1[3 * a2];
  v22 = a1 + 3;
  v23 = a1 + 4;
  *(float *)&a5 = *a1 + a1[1];
  *(float *)&a4 = a1[4]
                + (float)((float)((float)(*(a1 - 4) + *(a1 - 3)) + (float)(*(a1 - 2) + *(float *)&a3))
                        + (float)(*(float *)&a5 + (float)(a1[2] + a1[3])));
  *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
  v24 = &v14[-a2];
  v25 = &v15[-a2];
  v26 = &v16[a2];
  v27 = &v21[a2];
  v28 = v15[1];
  v29 = v25[1];
  v10.f32[0] = v13 + *v16;
  v30 = v26[1];
  *(float *)&a9 = *v27
                + (float)((float)((float)(*v24 + *v14) + (float)(*v25 + *v15))
                        + (float)(v10.f32[0] + (float)(*v26 + *v21)));
  v31 = vmla_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a9, *(float32x2_t *)&a9);
  v32 = *(v15 - 1);
  v33 = v13 + v16[1];
  v34 = *(v14 - 2);
  v12.f32[0] = (float)(*(v14 - 3) + *(v25 - 2)) + (float)(v32 + (float)(v33 + (float)(v26[2] + v21[3])));
  v35 = vmla_f32(v31, v12, v12);
  v36 = v13 + *(v16 - 1);
  v37 = v14[2];
  v12.f32[0] = (float)(v14[3] + v25[2]) + (float)(v28 + (float)(v36 + (float)(*(v26 - 2) + *(v21 - 3))));
  v38 = vmla_f32(v35, v12, v12);
  v39 = *(v26 - 1);
  v11.f32[0] = *(v27 - 1)
             + (float)((float)((float)(v24[1] + v14[1]) + (float)(*v15 + v29))
                     + (float)(v10.f32[0] + (float)(v39 + *(v21 - 1))));
  v40 = *(v25 - 1);
  v9.f32[0] = v27[1]
            + (float)((float)((float)(*(v24 - 1) + *(v14 - 1)) + (float)(*v15 + v40))
                    + (float)(v10.f32[0] + (float)(v30 + v21[1])));
  v41 = &v19[-a2];
  v42 = v20[a2];
  v10.f32[0] = v23[a2]
             + (float)((float)((float)(v17[-a2] + v18[-a2]) + (float)(*(float *)&a3 + *v41))
                     + (float)(*(float *)&a5 + (float)(v42 + v22[a2])));
  v43 = v19[a2];
  v44 = v20[-a2];
  *(float *)&a3 = v23[-a2]
                + (float)((float)((float)(v17[a2] + v18[a2]) + (float)(*(float *)&a3 + v43))
                        + (float)(*(float *)&a5 + (float)(v44 + v22[-a2])));
  *(float *)&a5 = (float)(v40 + v34) + (float)(v32 + (float)(v33 + (float)(v30 + v21[2])));
  v45 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(v38, v11, v11), v9, v9), v10, v10), *(float32x2_t *)&a3, *(float32x2_t *)&a3), *(float32x2_t *)&a5, *(float32x2_t *)&a5);
  *(float *)&a5 = (float)(v29 + v37) + (float)(v28 + (float)(v36 + (float)(v39 + *(v21 - 2))));
  v46 = vmla_f32(v45, *(float32x2_t *)&a5, *(float32x2_t *)&a5);
  *(float *)&a5 = (float)(*(v25 - 3) + *v41) + (float)(v32 + (float)(v33 + (float)(v42 + v26[3])));
  v47 = vmla_f32(v46, *(float32x2_t *)&a5, *(float32x2_t *)&a5);
  *(float *)&a5 = (float)(v25[3] + v44) + (float)(v28 + (float)(v36 + (float)(v43 + *(v26 - 3))));
  return vdup_lane_s32((int32x2_t)vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(v47, *(float32x2_t *)&a5, *(float32x2_t *)&a5), *(float32x2_t *)&a3, *(float32x2_t *)&a3), v10, v10), v9, v9), v11, v11), 0);
}

void sub_23680BBB4(unsigned int *a1, uint64_t a2, float *a3, unsigned int *a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  _DWORD *v23;
  unint64_t v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _OWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  float32x4_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t i;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int v122;
  float *v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  _OWORD *v131;
  unint64_t v132;
  __int128 v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  float *v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  _OWORD *v149;
  unint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _OWORD v169[13];
  float v170[56];
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  v14 = a1[1];
  if ((_DWORD)v14)
  {
    v15 = 0;
    a7.n128_f64[0] = sqrt(a7.n128_f64[0] * 0.5) * 0.611612574 / 8.5 * *(double *)a9.i64;
    a7.n128_f32[0] = a7.n128_f64[0];
    v16 = sqrt(a8 * 0.330000013) * 0.611612574 / 8.5 * *(double *)a9.i64;
    v18 = *((_QWORD *)a1 + 2);
    v17 = (float *)*((_QWORD *)a1 + 3);
    a10.i64[0] = 0x3FE199999999999ALL;
    a11.i64[0] = 0x3FF0CCCCCCCCCCCDLL;
    v20 = *((_QWORD *)a4 + 2);
    v19 = (_DWORD *)*((_QWORD *)a4 + 3);
    a9.f32[0] = *(double *)a9.i64;
    a12.i64[0] = COERCE_UNSIGNED_INT(0.5) | 0x3FD51EB800000000;
    while (1)
    {
      v21 = v17;
      v22 = a3;
      v23 = v19;
      v24 = v13;
      if ((_DWORD)v13)
        break;
LABEL_17:
      ++v15;
      v19 = (_DWORD *)((char *)v19 + v20);
      a3 = (float *)((char *)a3 + a2);
      v17 = (float *)((char *)v17 + v18);
      if (v15 == v14)
        goto LABEL_18;
    }
    while (1)
    {
      v25 = (float)((float)(fabsf(*v21) + fabsf(*v22)) * 0.5) + a9.f32[0];
      a13.f32[0] = (float)(*v21 - *v22) * (float)(a7.n128_f32[0] / v25);
      *v23 = a13.i32[0];
      v26 = v16 / v25;
      v27 = fabsf(*v21);
      v28 = v27 * 0.55;
      v29 = v27 * 1.05;
      v30 = *v22;
      if (*v21 >= 0.0)
      {
        if (v28 > v30)
        {
          v33 = v26;
          v34 = v28 - v30;
          goto LABEL_11;
        }
        if (v29 < v30)
        {
          v31 = v26;
          v32 = v30 - v29;
LABEL_14:
          *(double *)a13.i64 = a13.f32[0] - v32 * v31;
          goto LABEL_15;
        }
      }
      else
      {
        if (v30 > -v28)
        {
          v31 = v26;
          v32 = v28 + v30;
          goto LABEL_14;
        }
        if (v30 < -v29)
        {
          v33 = v26;
          v34 = (float)-*v22 - v29;
LABEL_11:
          *(double *)a13.i64 = v34 * v33 + a13.f32[0];
LABEL_15:
          a13.f32[0] = *(double *)a13.i64;
          *v23 = a13.i32[0];
        }
      }
      ++v23;
      ++v22;
      ++v21;
      if (!--v24)
        goto LABEL_17;
    }
  }
LABEL_18:
  v150 = v14;
  v166 = 0;
  v168 = v13;
  v35 = 0uLL;
  do
  {
    if ((_DWORD)v13)
    {
      v36 = 0;
      v37 = a6 + v166 * a5;
      v39 = *((_QWORD *)a4 + 2);
      v38 = *((_QWORD *)a4 + 3);
      v40 = v166 - 4;
      v41 = -4;
      v43 = *a4;
      v42 = a4[1];
      do
      {
        v44 = 0;
        v45 = v169;
        do
        {
          v46 = (v40 + v44);
          if (v40 + (int)v44 < 0 || v42 <= v46)
          {
            v50 = &v169[3 * v44];
            v50[1] = v35;
            v50[2] = v35;
            *v50 = v35;
          }
          else
          {
            v47 = 0;
            v48 = v38 + v39 * v46;
            do
            {
              v49 = v41 + v47;
              a7.n128_u32[0] = 0;
              if (((v41 + (_DWORD)v47) & 0x80000000) == 0 && v43 > v49)
                a7.n128_u32[0] = *(_DWORD *)(v48 + 4 * v49);
              *((_DWORD *)v45 + v47++) = a7.n128_u32[0];
            }
            while (v47 != 9);
            HIDWORD(v169[3 * v44 + 2]) = 0;
            *(_QWORD *)((char *)&v169[3 * v44 + 2] + 4) = 0;
          }
          ++v44;
          v45 += 3;
        }
        while (v44 != 9);
        a7.n128_u64[0] = (unint64_t)sub_23680C560(v170, 12, a7.n128_f64[0], *(double *)&v35, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v37 + 4 * v36);
        v35 = 0uLL;
        *(_DWORD *)(v37 + 4 * v36++) = a7.n128_u32[0];
        ++v41;
        LODWORD(v13) = v168;
      }
      while (v36 != v168);
    }
    ++v166;
  }
  while (v166 != 4);
  v51 = v150;
  v52 = *((_QWORD *)a4 + 2);
  v53 = v52 >> 2;
  if (v150 - 4 < 5)
  {
    v132 = 4;
  }
  else
  {
    v54 = *((_QWORD *)a4 + 3);
    v55 = a5;
    v57 = *a4;
    v56 = a4[1];
    v58 = a6 + 4 * a5 + 16;
    v59 = 12 * v53 + 4 * v52 + v54 + 28;
    v60 = 4 * v52 + 4 * v53 + v54 + 32;
    v61 = 4 * v52 - 4 * v53 + v54 + 32;
    v62 = 4 * v52 + 24;
    v63 = v54 + v62 - 16 * v53;
    v64 = 16 * v53 + 4 * v52 + v54 + 12;
    v65 = v54 + v62 - 12 * v53;
    v66 = v54 + 4 * v52 - 8 * v53;
    v67 = 8 * v53 + 4 * v52 + v54 + 16;
    v68 = 4;
    v69 = 0uLL;
    v70 = v54 + 4 * v52;
    do
    {
      v152 = v67;
      v153 = v66;
      v154 = v65;
      v155 = v64;
      v156 = v63;
      v157 = v61;
      v158 = v60;
      v159 = v59;
      v160 = v58;
      v71 = 0;
      v163 = v54 + v68 * v52;
      v72 = v68 - 4;
      v73 = -4;
      v164 = v68;
      v74 = a6 + v68 * v55;
      do
      {
        v75 = 0;
        v76 = v169;
        do
        {
          v77 = (v72 + v75);
          if (v72 + (int)v75 < 0 || v56 <= v77)
          {
            v81 = (float32x4_t *)&v169[3 * v75];
            v81[1] = v69;
            v81[2] = v69;
            *v81 = v69;
          }
          else
          {
            v78 = 0;
            v79 = v54 + v52 * v77;
            do
            {
              v80 = v73 + v78;
              a7.n128_u32[0] = 0;
              if (((v73 + (_DWORD)v78) & 0x80000000) == 0 && v57 > v80)
                a7.n128_u32[0] = *(_DWORD *)(v79 + 4 * v80);
              *((_DWORD *)v76 + v78++) = a7.n128_u32[0];
            }
            while (v78 != 9);
            HIDWORD(v169[3 * v75 + 2]) = 0;
            *(_QWORD *)((char *)&v169[3 * v75 + 2] + 4) = 0;
          }
          ++v75;
          v76 += 3;
        }
        while (v75 != 9);
        a7.n128_u64[0] = (unint64_t)sub_23680C560(v170, 12, a7.n128_f64[0], *(double *)v69.i64, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
        a7.n128_f32[0] = *(float *)(v74 + 4 * v71) + a7.n128_f32[0];
        v69 = 0uLL;
        *(_DWORD *)(v74 + 4 * v71++) = a7.n128_u32[0];
        ++v73;
      }
      while (v71 != 4);
      LODWORD(v13) = v168;
      if (v168 >= 0xC)
      {
        v83 = 0;
        for (i = 12; i <= v168; i += 4)
        {
          v85 = *(float32x4_t *)(v70 + v83 + 16);
          v86 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v70 + v83), *(float32x4_t *)(v70 + v83 + 8)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v70 + v83 + 24), *(float32x4_t *)(v70 + v83 + 32))));
          v87 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v156 + v83 - 8), *(float32x4_t *)(v153 + v83 + 16)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v152 + v83), *(float32x4_t *)(v155 + v83 + 4))));
          v88 = vmlaq_f32(vmulq_f32(v86, v86), v87, v87);
          v89 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 - 20), *(float32x4_t *)(v153 + v83 + 8)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v152 + v83 + 8), *(float32x4_t *)(v159 + v83))));
          v90 = vmlaq_f32(v88, v89, v89);
          v91 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v154 + v83 + 4), *(float32x4_t *)(v153 + v83 + 24)), vaddq_f32(v85, vaddq_f32(*(float32x4_t *)(v152 + v83 - 8), *(float32x4_t *)(v159 + v83 - 24))));
          v92 = vmlaq_f32(v90, v91, v91);
          v93 = *(float32x4_t *)(v153 + v83 + 20);
          v94 = *(float32x4_t *)(v152 + v83 - 4);
          v95 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v156 + v83 - 4), v93), vaddq_f32(v85, vaddq_f32(v94, *(float32x4_t *)(v155 + v83))));
          v96 = vmlaq_f32(v92, v95, v95);
          v97 = *(float32x4_t *)(v153 + v83 + 12);
          v98 = *(float32x4_t *)(v152 + v83 + 4);
          v99 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v156 + v83 - 12), v97), vaddq_f32(v85, vaddq_f32(v98, *(float32x4_t *)(v155 + v83 + 8))));
          v100 = vmlaq_f32(v96, v99, v99);
          v101 = *(float32x4_t *)(v157 + v83 - 24);
          v102 = *(float32x4_t *)(v158 + v83 - 8);
          v103 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v157 + v83 - 32), v101), vaddq_f32(v85, vaddq_f32(v102, *(float32x4_t *)(v158 + v83))));
          v104 = vmlaq_f32(v100, v103, v103);
          v105 = *(float32x4_t *)(v158 + v83 - 24);
          v106 = *(float32x4_t *)(v157 + v83 - 8);
          v107 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v158 + v83 - 32), v105), vaddq_f32(v85, vaddq_f32(v106, *(float32x4_t *)(v157 + v83))));
          v108 = vmlaq_f32(v104, v107, v107);
          v109 = vaddq_f32(vaddq_f32(v97, *(float32x4_t *)(v154 + v83 - 16)), vaddq_f32(v85, vaddq_f32(v98, *(float32x4_t *)(v159 + v83 - 4))));
          v110 = vmlaq_f32(v108, v109, v109);
          v111 = vaddq_f32(vaddq_f32(v93, *(float32x4_t *)(v154 + v83)), vaddq_f32(v85, vaddq_f32(v94, *(float32x4_t *)(v159 + v83 - 20))));
          v112 = vmlaq_f32(v110, v111, v111);
          v113 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83 + 4), v101), vaddq_f32(v85, vaddq_f32(v102, *(float32x4_t *)(v152 + v83 + 12))));
          v114 = vmlaq_f32(v112, v113, v113);
          v115 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v153 + v83 + 28), v106), vaddq_f32(v85, vaddq_f32(v105, *(float32x4_t *)(v152 + v83 - 12))));
          v116 = vmlaq_f32(v114, v115, v115);
          v117 = vaddq_f32(vaddq_f32(v105, *(float32x4_t *)(v152 + v83 - 16)), vaddq_f32(v85, vaddq_f32(v106, *(float32x4_t *)(v153 + v83 + 32))));
          v118 = vmlaq_f32(v116, v117, v117);
          v119 = vaddq_f32(vaddq_f32(v101, *(float32x4_t *)(v153 + v83)), vaddq_f32(v85, vaddq_f32(v102, *(float32x4_t *)(v152 + v83 + 16))));
          v120 = vaddq_f32(vaddq_f32(v97, *(float32x4_t *)(v156 + v83 - 16)), vaddq_f32(v85, vaddq_f32(v98, *(float32x4_t *)(v155 + v83 + 12))));
          v121 = vmlaq_f32(vmlaq_f32(v118, v119, v119), v120, v120);
          a12 = *(float32x4_t *)(v156 + v83);
          a13 = *(float32x4_t *)(v155 + v83 - 4);
          a11 = vaddq_f32(v94, a13);
          a10 = vaddq_f32(v93, a12);
          v69 = vaddq_f32(a10, vaddq_f32(v85, a11));
          a9 = vmlaq_f32(v121, v69, v69);
          a7 = (__n128)vaddq_f32(*(float32x4_t *)(v160 + v83), a9);
          *(__n128 *)(v160 + v83) = a7;
          v83 += 16;
        }
        v82 = i - 8;
      }
      else
      {
        v82 = 4;
      }
      if (v82 < v168)
      {
        v122 = v82 - 4;
        do
        {
          if (v57 - 4 <= v82 || v56 - 4 <= v164)
          {
            v125 = 0;
            v126 = v169;
            v69 = 0uLL;
            do
            {
              v127 = (v72 + v125);
              if (v72 + (int)v125 < 0 || v56 <= v127)
              {
                v131 = &v169[3 * v125];
                v131[1] = 0uLL;
                v131[2] = 0uLL;
                *v131 = 0uLL;
              }
              else
              {
                v128 = 0;
                v129 = v54 + v52 * v127;
                do
                {
                  v130 = v122 + v128;
                  a7.n128_u32[0] = 0;
                  if (((v122 + (_DWORD)v128) & 0x80000000) == 0 && v57 > v130)
                    a7.n128_u32[0] = *(_DWORD *)(v129 + 4 * v130);
                  *((_DWORD *)v126 + v128++) = a7.n128_u32[0];
                }
                while (v128 != 9);
                HIDWORD(v169[3 * v125 + 2]) = 0;
                *(_QWORD *)((char *)&v169[3 * v125 + 2] + 4) = 0;
              }
              ++v125;
              v126 += 3;
            }
            while (v125 != 9);
            v123 = v170;
            v124 = 12;
          }
          else
          {
            v123 = (float *)(v163 + 4 * v82);
            v124 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_23680C560(v123, v124, a7.n128_f64[0], *(double *)v69.i64, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          v69.i32[0] = *(_DWORD *)(v74 + 4 * v82);
          a7.n128_f32[0] = a7.n128_f32[0] + v69.f32[0];
          *(_DWORD *)(v74 + 4 * v82++) = a7.n128_u32[0];
          ++v122;
          LODWORD(v13) = v168;
        }
        while (v82 != v168);
      }
      v68 = v164 + 1;
      v55 = a5;
      v58 = v160 + a5;
      v70 += v52;
      v59 = v159 + v52;
      v60 = v158 + v52;
      v61 = v157 + v52;
      v63 = v156 + v52;
      v64 = v155 + v52;
      v65 = v154 + v52;
      v66 = v153 + v52;
      v67 = v152 + v52;
      v132 = v150 - 4;
      v69 = 0uLL;
    }
    while (v164 + 1 != v150 - 4);
    v51 = v150;
  }
  if (v132 < v51)
  {
    v133 = 0uLL;
    do
    {
      v167 = v132;
      if ((_DWORD)v13)
      {
        v134 = 0;
        v135 = a6 + v132 * a5;
        v136 = *((_QWORD *)a4 + 3);
        v137 = *a4;
        v138 = a4[1];
        v139 = v132 - 4;
        v165 = v136 + v132 * v52;
        v140 = -4;
        do
        {
          if (v134 < 4 || v137 - 4 <= v134 || v138 - 4 <= v167)
          {
            v143 = 0;
            v144 = v169;
            do
            {
              v145 = (v139 + v143);
              if (v139 + (int)v143 < 0 || v138 <= v145)
              {
                v149 = &v169[3 * v143];
                v149[1] = v133;
                v149[2] = v133;
                *v149 = v133;
              }
              else
              {
                v146 = 0;
                v147 = v136 + v52 * v145;
                do
                {
                  v148 = v140 + v146;
                  a7.n128_u32[0] = 0;
                  if (((v140 + (_DWORD)v146) & 0x80000000) == 0 && v137 > v148)
                    a7.n128_u32[0] = *(_DWORD *)(v147 + 4 * v148);
                  *((_DWORD *)v144 + v146++) = a7.n128_u32[0];
                }
                while (v146 != 9);
                HIDWORD(v169[3 * v143 + 2]) = 0;
                *(_QWORD *)((char *)&v169[3 * v143 + 2] + 4) = 0;
              }
              ++v143;
              v144 += 3;
            }
            while (v143 != 9);
            v141 = v170;
            v142 = 12;
          }
          else
          {
            v141 = (float *)(v165 + 4 * v134);
            v142 = v52 >> 2;
          }
          a7.n128_u64[0] = (unint64_t)sub_23680C560(v141, v142, a7.n128_f64[0], *(double *)&v133, *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64);
          a7.n128_f32[0] = a7.n128_f32[0] + *(float *)(v135 + 4 * v134);
          *(_DWORD *)(v135 + 4 * v134++) = a7.n128_u32[0];
          ++v140;
          LODWORD(v13) = v168;
          v133 = 0uLL;
        }
        while (v134 != v168);
      }
      v132 = v167 + 1;
    }
    while (v167 + 1 != v150);
  }
}

int32x2_t sub_23680C560(float *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float32x2_t v9;
  float32x2_t v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float32x2_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  float *v24;
  float v25;
  float32x2_t v26;
  float v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;

  v11 = &a1[-3 * a2];
  v12 = &a1[3 * a2];
  *(float *)&a4 = (float)(*(a1 - 4) + *(a1 - 2)) + (float)(*a1 + (float)(a1[2] + a1[4]));
  *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
  v13 = &v11[-a2];
  v14 = &a1[-a2 - a2];
  v15 = (uint64_t)&a1[a2 + a2];
  v16 = &v12[a2];
  LODWORD(a6) = *(_DWORD *)(v15 + 4);
  v17 = v14[1];
  *(float *)&a9 = (float)(*v13 + *v14) + (float)(*a1 + (float)(*(float *)v15 + *v16));
  v18 = *(v14 - 1);
  v19 = *(v11 - 2);
  v9.f32[0] = (float)(*(v11 - 3) + *(v14 - 2)) + (float)(*a1 + (float)(*(float *)(v15 + 8) + v12[3]));
  v20 = vmla_f32(vmla_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a9, *(float32x2_t *)&a9), v9, v9);
  v21 = *(float *)(v15 - 4);
  v22 = v11[2];
  v10.f32[0] = (float)(v11[3] + v14[2]) + (float)(*a1 + (float)(*(float *)(v15 - 8) + *(v12 - 3)));
  *(float *)&a8 = (float)(v13[1] + v17) + (float)(*a1 + (float)(v21 + *(v16 - 1)));
  *(float *)&a7 = (float)(*(v13 - 1) + v18) + (float)(*a1 + (float)(*(float *)&a6 + v16[1]));
  v23 = vmla_f32(vmla_f32(vmla_f32(v20, v10, v10), *(float32x2_t *)&a8, *(float32x2_t *)&a8), *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  v24 = &a1[-a2 - 2];
  v25 = a1[a2 + 2];
  *(float *)&a7 = (float)(a1[-a2 - 4] + *v24) + (float)(*a1 + (float)(v25 + a1[a2 + 4]));
  v26 = vmla_f32(v23, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  v27 = a1[a2 - 2];
  v28 = a1[-a2 + 2];
  *(float *)&a7 = (float)(a1[a2 - 4] + v27) + (float)(*a1 + (float)(v28 + a1[-a2 + 4]));
  v29 = vmla_f32(v26, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v18 + v19) + (float)(*a1 + (float)(*(float *)&a6 + v12[2]));
  v30 = vmla_f32(v29, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v17 + v22) + (float)(*a1 + (float)(v21 + *(v12 - 2)));
  v31 = vmla_f32(v30, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(*(v14 - 3) + *v24) + (float)(*a1 + (float)(v25 + *(float *)(v15 + 12)));
  v32 = vmla_f32(v31, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v14[3] + v28) + (float)(*a1 + (float)(v27 + *(float *)(v15 - 12)));
  v33 = vmla_f32(v32, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(v27 + *(float *)(v15 - 16)) + (float)(*a1 + (float)(v28 + v14[4]));
  v34 = vmla_f32(v33, *(float32x2_t *)&a7, *(float32x2_t *)&a7);
  *(float *)&a7 = (float)(*v24 + *(v14 - 4)) + (float)(*a1 + (float)(v25 + *(float *)(v15 + 16)));
  *(float *)&a6 = (float)(v18 + *(v13 - 2)) + (float)(*a1 + (float)(*(float *)&a6 + v16[2]));
  *(float *)&a3 = (float)(v17 + v13[2]) + (float)(*a1 + (float)(v21 + *(v16 - 2)));
  return vdup_lane_s32((int32x2_t)vmla_f32(vmla_f32(vmla_f32(v34, *(float32x2_t *)&a7, *(float32x2_t *)&a7), *(float32x2_t *)&a6, *(float32x2_t *)&a6), *(float32x2_t *)&a3, *(float32x2_t *)&a3), 0);
}

unsigned int *sub_23680C770(unsigned int *result, _QWORD *a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  unsigned int *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  v4 = result[1];
  if ((_DWORD)v4)
  {
    v5 = 0;
    v7 = *((_QWORD *)result + 7);
    v6 = (float *)*((_QWORD *)result + 8);
    v9 = a2[7];
    v8 = (float *)a2[8];
    v11 = *((_QWORD *)result + 2);
    v10 = (float *)*((_QWORD *)result + 3);
    v13 = a2[2];
    v12 = (float *)a2[3];
    result = (unsigned int *)*result;
    do
    {
      v14 = v12;
      v15 = v10;
      v16 = v8;
      v17 = v6;
      v18 = a4;
      v19 = result;
      if ((_DWORD)result)
      {
        do
        {
          v20 = *v14++;
          v21 = v20;
          v22 = *v15++;
          v23 = (float)(v21 + v22) * 2.5;
          v24 = *v16++;
          v25 = v24;
          v26 = *v17++;
          *v18++ = sqrtf((float)((float)((float)(v26 * 0.4) + (float)(v25 * 0.4))* (float)((float)(v26 * 0.4) + (float)(v25 * 0.4)))+ (float)(v23 * v23));
          v19 = (unsigned int *)((char *)v19 - 1);
        }
        while (v19);
      }
      ++v5;
      a4 = (float *)((char *)a4 + a3);
      v6 = (float *)((char *)v6 + v7);
      v8 = (float *)((char *)v8 + v9);
      v10 = (float *)((char *)v10 + v11);
      v12 = (float *)((char *)v12 + v13);
    }
    while (v5 != v4);
  }
  return result;
}

unsigned int *sub_23680C81C(unsigned int *result, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  float v11;

  v3 = result[1];
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *result;
    v7 = *((_QWORD *)result + 2);
    v6 = (float *)*((_QWORD *)result + 3);
    do
    {
      v8 = v6;
      v9 = a3;
      v10 = v5;
      if ((_DWORD)v5)
      {
        do
        {
          v11 = *v8++;
          *v9++ = sqrtf((float)(fabsf(v11) * 6.1942) + 78.113) + -8.8381;
          --v10;
        }
        while (v10);
      }
      ++v4;
      a3 = (float *)((char *)a3 + a2);
      v6 = (float *)((char *)v6 + v7);
    }
    while (v4 != v3);
  }
  return result;
}

float (__cdecl *sub_23680C890(float (__cdecl *result)(float, float *), uint64_t a2, uint64_t a3))(float, float *)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float *v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  float *v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;

  v3 = *((unsigned int *)result + 1);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(unsigned int *)result;
    v6 = *((_QWORD *)result + 2);
    v7 = *((_QWORD *)result + 3);
    v8 = v3 - 3;
    v9 = v7 - 12;
    v10 = v7 - 12 + 3 * v6;
    v11 = v7 - 3 * v6 - 12;
    result = modff;
    do
    {
      if ((_DWORD)v5)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = *(float *)(v9 + v12 + 12);
          v15 = v14 + v14;
          v33 = v14 + v14;
          v34 = v14;
          v32 = v14 + v14;
          if (v13 >= 3)
          {
            v16 = *(float *)(v9 + v12);
            if (v15 > v16)
            {
              if (v14 <= v16)
              {
                v17 = &v33;
              }
              else
              {
                v33 = v14;
                v17 = &v34;
              }
              v32 = v14 + v14;
              *v17 = v16;
            }
            if (v4 >= 3)
            {
              v18 = *(float *)(v11 + v12);
              if (v15 > v18)
              {
                if (v34 <= v18)
                {
                  if (v33 <= v18)
                  {
                    v19 = &v32;
                  }
                  else
                  {
                    v32 = v33;
                    v19 = &v33;
                  }
                }
                else
                {
                  v32 = v33;
                  v33 = v34;
                  v19 = &v34;
                }
                *v19 = v18;
                v15 = v32;
              }
            }
            if (v4 < v8)
            {
              v20 = *(float *)(v10 + v12);
              if (v15 > v20)
              {
                if (v34 <= v20)
                {
                  if (v33 <= v20)
                  {
                    v21 = &v32;
                  }
                  else
                  {
                    v32 = v33;
                    v21 = &v33;
                  }
                }
                else
                {
                  v32 = v33;
                  v33 = v34;
                  v21 = &v34;
                }
                *v21 = v20;
                v15 = v32;
              }
            }
          }
          if (v13 < v5 - 3)
          {
            v22 = *(float *)(v9 + v12 + 24);
            if (v15 > v22)
            {
              if (v34 <= v22)
              {
                if (v33 <= v22)
                {
                  v23 = &v32;
                }
                else
                {
                  v32 = v33;
                  v23 = &v33;
                }
              }
              else
              {
                v32 = v33;
                v33 = v34;
                v23 = &v34;
              }
              *v23 = v22;
              v15 = v32;
            }
            if (v4 >= 3)
            {
              v24 = *(float *)(v11 + v12 + 24);
              if (v15 > v24)
              {
                if (v34 <= v24)
                {
                  if (v33 <= v24)
                  {
                    v25 = &v32;
                  }
                  else
                  {
                    v32 = v33;
                    v25 = &v33;
                  }
                }
                else
                {
                  v32 = v33;
                  v33 = v34;
                  v25 = &v34;
                }
                *v25 = v24;
                v15 = v32;
              }
            }
            if (v4 < v8)
            {
              v26 = *(float *)(v10 + v12 + 24);
              if (v15 > v26)
              {
                if (v34 <= v26)
                {
                  if (v33 <= v26)
                  {
                    v27 = &v32;
                  }
                  else
                  {
                    v32 = v33;
                    v27 = &v33;
                  }
                }
                else
                {
                  v32 = v33;
                  v33 = v34;
                  v27 = &v34;
                }
                *v27 = v26;
                v15 = v32;
              }
            }
          }
          if (v4 >= 3)
          {
            v28 = *(float *)(v11 + v12 + 12);
            if (v15 > v28)
            {
              if (v34 <= v28)
              {
                if (v33 <= v28)
                {
                  v29 = &v32;
                }
                else
                {
                  v32 = v33;
                  v29 = &v33;
                }
              }
              else
              {
                v32 = v33;
                v33 = v34;
                v29 = &v34;
              }
              *v29 = v28;
              v15 = v32;
            }
          }
          if (v4 < v8)
          {
            v30 = *(float *)(v10 + v12 + 12);
            if (v15 > v30)
            {
              if (v34 <= v30)
              {
                if (v33 <= v30)
                {
                  v31 = &v32;
                }
                else
                {
                  v32 = v33;
                  v31 = &v33;
                }
              }
              else
              {
                v32 = v33;
                v33 = v34;
                v31 = &v34;
              }
              *v31 = v30;
              v15 = v32;
            }
          }
          *(float *)(a3 + v12) = (float)((float)(v33 * 0.3) + (float)(v34 * 0.45)) + (float)(v15 * 0.25);
          ++v13;
          v12 += 4;
        }
        while (4 * v5 != v12);
      }
      ++v4;
      a3 += a2;
      v10 += v6;
      v11 += v6;
      v9 += v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_23680CBA0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  unsigned int v80;
  __int128 v81;
  uint64_t v82;
  float *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unsigned int v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unsigned int v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  unsigned int v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;

  sub_2367C431C((uint64_t)&v85, a3, a4);
  v14 = v89;
  if (!v89)
  {
    v81 = v85;
    v15 = v87;
    v87 = 0;
    v82 = v86;
    v83 = v15;
    v84 = v88;
    sub_2367C431C((uint64_t)&v76, a3, a4);
    v14 = v80;
    if (!v80)
    {
      v72 = v76;
      v16 = v78;
      v78 = 0;
      v73 = v77;
      v74 = v16;
      v75 = v79;
      sub_23680C770((unsigned int *)(a1 + 80), (_QWORD *)a1, v82, v15);
      sub_23680C770((unsigned int *)(a2 + 80), (_QWORD *)a2, v73, v16);
      v17 = v81;
      v18 = DWORD1(v81);
      sub_2367C431C((uint64_t)&v118, v81, DWORD1(v81));
      v14 = v122;
      if (!v122)
      {
        v20 = v119;
        v19 = v120;
        v120 = 0;
        v21 = v121;
        *(_OWORD *)a6 = v118;
        v22 = *(_QWORD *)(a6 + 24);
        *(_QWORD *)(a6 + 16) = v20;
        *(_QWORD *)(a6 + 24) = v19;
        if (v22)
        {
          v23 = -*(_QWORD *)(v22 - 24);
          do
            v24 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v24 + v23, &qword_2564313D8));
          free(*(void **)(v22 - 32));
        }
        *(_QWORD *)(a6 + 32) = v21;
        sub_2367C431C((uint64_t)&v114, v17, v18);
        v14 = v117;
        if (!v117)
        {
          v111 = v114;
          v112 = v115;
          *((_QWORD *)&v115 + 1) = 0;
          v113 = v116;
          sub_2367C431C((uint64_t)&v107, v17, v18);
          v14 = v110;
          if (!v110)
          {
            v104 = v107;
            v105 = v108;
            *((_QWORD *)&v108 + 1) = 0;
            v106 = v109;
            sub_2367C431C((uint64_t)&v100, v17, v18);
            v14 = v103;
            if (!v103)
            {
              v97 = v100;
              v98 = v101;
              *((_QWORD *)&v101 + 1) = 0;
              v99 = v102;
              sub_2367C431C((uint64_t)&v93, v17, v18);
              v14 = v96;
              if (!v96)
              {
                v90 = v93;
                v91 = v94;
                *((_QWORD *)&v94 + 1) = 0;
                v92 = v95;
                sub_23680C81C((unsigned int *)&v81, v112, *((float **)&v112 + 1));
                sub_23680C81C((unsigned int *)&v72, v105, *((float **)&v105 + 1));
                v14 = sub_23680A040((unsigned int *)&v111, a5, (unsigned int *)&v97, 2.7);
                if (!(_DWORD)v14)
                {
                  sub_23680C890((float (__cdecl *)(float, float *))&v97, v112, *((uint64_t *)&v112 + 1));
                  v14 = sub_23680A040((unsigned int *)&v104, a5, (unsigned int *)&v90, 2.7);
                  if (!(_DWORD)v14)
                  {
                    if ((_DWORD)v18)
                    {
                      v57 = 0;
                      v58 = *((_QWORD *)&v112 + 1);
                      v59 = v112;
                      do
                      {
                        if ((_DWORD)v17)
                        {
                          v60 = 0;
                          v61 = *(_QWORD *)(a6 + 24) + *(_QWORD *)(a6 + 16) * v57;
                          v62 = *((_QWORD *)&v98 + 1) + v98 * v57;
                          v63 = *((_QWORD *)&v91 + 1) + v91 * v57;
                          do
                          {
                            *(_DWORD *)(v61 + v60) = *(_DWORD *)(v58 + v60);
                            if (a7)
                            {
                              v64 = *(float *)(v62 + v60) - *(float *)(v63 + v60);
                              v65 = *(_QWORD *)(a7 + 24) + v57 * *(_QWORD *)(a7 + 16);
                              *(float *)(v65 + v60) = *(float *)(v65 + v60) + (float)((float)(v64 * 10.0) * v64);
                            }
                            v60 += 4;
                          }
                          while (4 * v17 != v60);
                        }
                        ++v57;
                        v58 += v59;
                      }
                      while (v57 != v18);
                    }
                    v14 = 0;
                  }
                }
                v66 = *((_QWORD *)&v91 + 1);
                *((_QWORD *)&v91 + 1) = 0;
                if (!v66)
                  goto LABEL_84;
                v67 = -*(_QWORD *)(v66 - 24);
                do
                  v68 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v68 + v67, &qword_2564313D8));
                free(*(void **)(v66 - 32));
                if (!v96)
                {
LABEL_84:
                  v69 = *((_QWORD *)&v94 + 1);
                  *((_QWORD *)&v94 + 1) = 0;
                  if (v69)
                  {
                    v70 = -*(_QWORD *)(v69 - 24);
                    do
                      v71 = __ldaxr(&qword_2564313D8);
                    while (__stlxr(v71 + v70, &qword_2564313D8));
                    free(*(void **)(v69 - 32));
                  }
                }
              }
              v25 = *((_QWORD *)&v98 + 1);
              *((_QWORD *)&v98 + 1) = 0;
              if (v25)
              {
                v26 = -*(_QWORD *)(v25 - 24);
                do
                  v27 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v27 + v26, &qword_2564313D8));
                free(*(void **)(v25 - 32));
              }
              if (!v103)
              {
                v28 = *((_QWORD *)&v101 + 1);
                *((_QWORD *)&v101 + 1) = 0;
                if (v28)
                {
                  v29 = -*(_QWORD *)(v28 - 24);
                  do
                    v30 = __ldaxr(&qword_2564313D8);
                  while (__stlxr(v30 + v29, &qword_2564313D8));
                  free(*(void **)(v28 - 32));
                }
              }
            }
            v31 = *((_QWORD *)&v105 + 1);
            *((_QWORD *)&v105 + 1) = 0;
            if (v31)
            {
              v32 = -*(_QWORD *)(v31 - 24);
              do
                v33 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v33 + v32, &qword_2564313D8));
              free(*(void **)(v31 - 32));
            }
            if (!v110)
            {
              v34 = *((_QWORD *)&v108 + 1);
              *((_QWORD *)&v108 + 1) = 0;
              if (v34)
              {
                v35 = -*(_QWORD *)(v34 - 24);
                do
                  v36 = __ldaxr(&qword_2564313D8);
                while (__stlxr(v36 + v35, &qword_2564313D8));
                free(*(void **)(v34 - 32));
              }
            }
          }
          v37 = *((_QWORD *)&v112 + 1);
          *((_QWORD *)&v112 + 1) = 0;
          if (v37)
          {
            v38 = -*(_QWORD *)(v37 - 24);
            do
              v39 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v39 + v38, &qword_2564313D8));
            free(*(void **)(v37 - 32));
          }
          if (!v117)
          {
            v40 = *((_QWORD *)&v115 + 1);
            *((_QWORD *)&v115 + 1) = 0;
            if (v40)
            {
              v41 = -*(_QWORD *)(v40 - 24);
              do
                v42 = __ldaxr(&qword_2564313D8);
              while (__stlxr(v42 + v41, &qword_2564313D8));
              free(*(void **)(v40 - 32));
            }
          }
        }
        if (!v122)
        {
          v43 = v120;
          v120 = 0;
          if (v43)
          {
            v44 = -*(_QWORD *)(v43 - 24);
            do
              v45 = __ldaxr(&qword_2564313D8);
            while (__stlxr(v45 + v44, &qword_2564313D8));
            free(*(void **)(v43 - 32));
          }
        }
      }
      v74 = 0;
      if (v16)
      {
        v46 = -*((_QWORD *)v16 - 3);
        do
          v47 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v47 + v46, &qword_2564313D8));
        free(*((void **)v16 - 4));
      }
      if (!v80)
      {
        v48 = v78;
        v78 = 0;
        if (v48)
        {
          v49 = -*((_QWORD *)v48 - 3);
          do
            v50 = __ldaxr(&qword_2564313D8);
          while (__stlxr(v50 + v49, &qword_2564313D8));
          free(*((void **)v48 - 4));
        }
      }
    }
    v83 = 0;
    if (v15)
    {
      v51 = -*((_QWORD *)v15 - 3);
      do
        v52 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v52 + v51, &qword_2564313D8));
      free(*((void **)v15 - 4));
    }
    if (!v89)
    {
      v53 = v87;
      v87 = 0;
      if (v53)
      {
        v54 = -*((_QWORD *)v53 - 3);
        do
          v55 = __ldaxr(&qword_2564313D8);
        while (__stlxr(v55 + v54, &qword_2564313D8));
        free(*((void **)v53 - 4));
      }
    }
  }
  return v14;
}

void sub_23680D170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  int a68;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;

  if (!a36)
    goto LABEL_5;
  v70 = -*(_QWORD *)(a36 - 24);
  do
    v71 = __ldaxr(&qword_2564313D8);
  while (__stlxr(v71 + v70, &qword_2564313D8));
  free(*(void **)(a36 - 32));
  if (!a44)
  {
LABEL_5:
    if (a42)
    {
      v72 = -*(_QWORD *)(a42 - 24);
      do
        v73 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v73 + v72, &qword_2564313D8));
      free(*(void **)(a42 - 32));
    }
  }
  if (a48)
  {
    v74 = -*(_QWORD *)(a48 - 24);
    do
      v75 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v75 + v74, &qword_2564313D8));
    free(*(void **)(a48 - 32));
  }
  if (!a56 && a54)
  {
    v76 = -*(_QWORD *)(a54 - 24);
    do
      v77 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v77 + v76, &qword_2564313D8));
    free(*(void **)(a54 - 32));
  }
  if (a60)
  {
    v78 = -*(_QWORD *)(a60 - 24);
    do
      v79 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v79 + v78, &qword_2564313D8));
    free(*(void **)(a60 - 32));
  }
  if (!a68 && a66)
  {
    v80 = -*(_QWORD *)(a66 - 24);
    do
      v81 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v81 + v80, &qword_2564313D8));
    free(*(void **)(a66 - 32));
  }
  v82 = *(_QWORD *)(v68 - 216);
  *(_QWORD *)(v68 - 216) = 0;
  if (v82)
  {
    v83 = -*(_QWORD *)(v82 - 24);
    do
      v84 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v84 + v83, &qword_2564313D8));
    free(*(void **)(v82 - 32));
  }
  if (!*(_DWORD *)(v68 - 152))
  {
    v85 = *(_QWORD *)(v68 - 168);
    *(_QWORD *)(v68 - 168) = 0;
    if (v85)
    {
      v86 = -*(_QWORD *)(v85 - 24);
      do
        v87 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v87 + v86, &qword_2564313D8));
      free(*(void **)(v85 - 32));
    }
  }
  if (!*(_DWORD *)(v68 - 104))
  {
    v88 = *(_QWORD *)(v68 - 120);
    *(_QWORD *)(v68 - 120) = 0;
    if (v88)
    {
      v89 = -*(_QWORD *)(v88 - 24);
      do
        v90 = __ldaxr(&qword_2564313D8);
      while (__stlxr(v90 + v89, &qword_2564313D8));
      free(*(void **)(v88 - 32));
    }
  }
  if (a12)
  {
    v91 = -*(_QWORD *)(a12 - 24);
    do
      v92 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v92 + v91, &qword_2564313D8));
    free(*(void **)(a12 - 32));
  }
  if (!a20 && a18)
  {
    v93 = -*(_QWORD *)(a18 - 24);
    do
      v94 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v94 + v93, &qword_2564313D8));
    free(*(void **)(a18 - 32));
  }
  if (a24)
  {
    v95 = -*(_QWORD *)(a24 - 24);
    do
      v96 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v96 + v95, &qword_2564313D8));
    free(*(void **)(a24 - 32));
  }
  if (!a32 && a30)
  {
    v97 = -*(_QWORD *)(a30 - 24);
    do
      v98 = __ldaxr(&qword_2564313D8);
    while (__stlxr(v98 + v97, &qword_2564313D8));
    free(*(void **)(a30 - 32));
  }
  _Unwind_Resume(a1);
}

unsigned int *sub_23680D488(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float64x2_t v18;
  uint64_t i;
  uint64_t v20;
  float64x2_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  _DWORD v27[3];
  _DWORD v28[4];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = result[1];
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *result;
    v10 = *((_QWORD *)result + 2);
    v9 = *((_QWORD *)result + 3);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = (uint64_t *)(a2 + 24);
    __asm { FMOV            V4.2D, #1.0 }
    v18 = (float64x2_t)vdupq_n_s64(0x3FB227F5C0000000uLL);
    result = *(unsigned int **)(a3 + 16);
    do
    {
      if ((_DWORD)v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v20 = 0;
          v21 = vmulq_f64(vaddq_f64(vdivq_f64((float64x2_t)xmmword_2368AF690, vmlaq_n_f64((float64x2_t)xmmword_2368AF680, (float64x2_t)xmmword_2368AF670, *(float *)(v9 + v10 * v7 + 4 * i))), _Q4), v18);
          v22 = v12;
          v23 = (uint64_t *)(a3 + 24);
          do
          {
            v24 = *v22;
            v22 += 5;
            v28[v20] = *(_DWORD *)(v24 + v11 * v7 + 4 * i);
            v25 = *v23;
            v23 += 5;
            v27[v20++] = *(_DWORD *)(v25 + (_QWORD)result * v7 + 4 * i);
          }
          while (v20 != 3);
          v26 = vcvt_f32_f64(vmulq_f64(v21, v21));
          *(float *)(a5 + v7 * a4 + 4 * i) = sqrtf(vaddv_f32(vmla_f32(vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v27[1], v28[1]), v26), v26, vmul_n_f32((float32x2_t)__PAIR64__(v27[0], v28[0]), a6)), v26, (float32x2_t)__PAIR64__(v27[2], v28[2]))));
        }
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_23680D5FC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  const float *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  float32x4_t v34;
  int8x16_t v35;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;

  result = sub_23680A040(a1, a4, (unsigned int *)a3, 1.2);
  if (!(_DWORD)result)
  {
    result = sub_23680A040(a1 + 10, a4, (unsigned int *)(a3 + 40), 1.2);
    if (!(_DWORD)result)
    {
      result = sub_23680A040(a1 + 20, a4, (unsigned int *)(a3 + 80), 1.2);
      if (!(_DWORD)result)
      {
        v11 = a1[1];
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = (const float *)(a2 + 8);
          v14 = vld1q_dup_f32(v13);
          v15 = (float32x4_t)vdupq_n_s32(0x3D9F241Fu);
          v16 = (float32x4_t)vdupq_n_s32(0x3FE0BC5Du);
          v17 = (float32x4_t)vdupq_n_s32(0x3F223C30u);
          v18 = (float32x4_t)vdupq_n_s32(0x3E9960A6u);
          v19 = (float32x4_t)vdupq_n_s32(0x3DCA33ABu);
          v20 = (float32x4_t)vdupq_n_s32(0x3F31A457u);
          v21 = (float32x4_t)vdupq_n_s32(0x3E62E7AEu);
          v22 = (float32x4_t)vdupq_n_s32(0x3E51B76Eu);
          v23 = (float32x4_t)vdupq_n_s32(0x41439F8Fu);
          v24 = (float32x4_t)vdupq_n_s32(0x3CA3D70Au);
          v25 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          v26 = (float32x4_t)vdupq_n_s32(0x411F897Au);
          v27 = vdupq_n_s32(0xC0D55555);
          v28 = (float32x4_t)vdupq_n_s32(0x3F3E11C7u);
          v29 = (float32x4_t)vdupq_n_s32(0x3FB6E02Bu);
          v30 = (float32x4_t)vdupq_n_s32(0x3E32458Cu);
          v31 = (float32x4_t)vdupq_n_s32(0x3F813CEDu);
          v32 = (float32x4_t)vdupq_n_s32(0xC1B948A1);
          LODWORD(v33) = *a1;
          v34 = 0uLL;
          v35.i64[0] = 0x7F0000007FLL;
          v35.i64[1] = 0x7F0000007FLL;
          __asm { FMOV            V25.4S, #-1.0 }
          v118 = v17;
          v119 = (float32x4_t)vdupq_n_s32(0x41556F1Du);
          v116 = v18;
          v117 = (float32x4_t)vdupq_n_s32(0xB5F85AB0);
          v114 = v24;
          v115 = (float32x4_t)vdupq_n_s32(0x3F7D8625u);
          v112 = v22;
          v113 = _Q25;
          do
          {
            if ((_DWORD)v33)
            {
              v41 = 0;
              v42 = 0;
              v43 = a5[2] * v12;
              v44 = a5[13] + v43;
              v45 = a5[8] + v43;
              v46 = a5[3] + v43;
              v47 = *((_QWORD *)a1 + 2) * v12;
              v48 = *((_QWORD *)a1 + 13) + v47;
              v49 = *((_QWORD *)a1 + 8) + v47;
              v50 = *((_QWORD *)a1 + 3) + v47;
              v51 = *(_QWORD *)(a3 + 16) * v12;
              v52 = *(_QWORD *)(a3 + 104) + v51;
              v53 = *(_QWORD *)(a3 + 64) + v51;
              v54 = *(_QWORD *)(a3 + 24) + v51;
              do
              {
                v55 = vmulq_f32(v14, *(float32x4_t *)(v54 + v41));
                v56 = vmulq_f32(v14, *(float32x4_t *)(v53 + v41));
                v57 = vmulq_f32(v14, *(float32x4_t *)(v52 + v41));
                v58 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v16, v15, v57), v17, v56), v18, v55);
                v59 = v15;
                v60 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v16, v19, v57), v20, v56), v21, v55);
                v61 = v14;
                v62 = v32;
                v63 = v21;
                v64 = v20;
                v65 = v19;
                v66 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v23, v22, v57), v24, v56), v24, v55);
                v67 = vmaxnmq_f32(vmaxnmq_f32(v58, v16), v25);
                v68 = vmaxnmq_f32(vmaxnmq_f32(v60, v16), v25);
                v69 = vmaxnmq_f32(vmaxnmq_f32(v66, v23), v25);
                v70 = (int32x4_t)vaddq_f32(vmaxnmq_f32(v67, v34), v26);
                v71 = vaddq_s32(v70, v27);
                v72 = vaddq_f32((float32x4_t)vsubq_s32(v70, (int32x4_t)vandq_s8((int8x16_t)v71, v35)), v113);
                v73 = vmlaq_f32(v117, v72, vmlaq_f32(v29, v28, v72));
                v74 = vmlaq_f32(v115, v72, vmlaq_f32(v31, v30, v72));
                v75 = (int32x4_t)vaddq_f32(vmaxnmq_f32(v68, v34), v26);
                v76 = vaddq_s32(v75, v27);
                v77 = v23;
                v78 = vaddq_f32((float32x4_t)vsubq_s32(v75, (int32x4_t)vandq_s8((int8x16_t)v76, v35)), v113);
                v79 = vmlaq_f32(v117, v78, vmlaq_f32(v29, v28, v78));
                v80 = vmlaq_f32(v115, v78, vmlaq_f32(v31, v30, v78));
                v81 = (int32x4_t)vaddq_f32(vmaxnmq_f32(v69, v34), v26);
                v82 = vaddq_s32(v81, v27);
                v83 = vaddq_f32((float32x4_t)vsubq_s32(v81, (int32x4_t)vandq_s8((int8x16_t)v82, v35)), v113);
                v84 = vmlaq_f32(v29, v28, v83);
                v85 = v28;
                v86 = v26;
                v87 = vmlaq_f32(v31, v30, v83);
                v88 = v31;
                v89 = v30;
                v90 = v29;
                v91 = v27;
                v92 = vmlaq_f32(v117, v83, v84);
                v93 = vmlaq_f32(v115, v83, v87);
                v94 = vdivq_f32(v73, v74);
                v19 = v65;
                v20 = v64;
                v21 = v63;
                v32 = v62;
                v14 = v61;
                v95 = vshrq_n_s32(v71, 0x17uLL);
                v15 = v59;
                v17 = v118;
                v18 = v116;
                v96 = vdivq_f32(vmlaq_f32(v32, v119, vaddq_f32(v94, vcvtq_f32_s32(v95))), v67);
                v22 = v112;
                v24 = v114;
                v97 = vdivq_f32(vmlaq_f32(v32, v119, vaddq_f32(vdivq_f32(v79, v80), vcvtq_f32_s32(vshrq_n_s32(v76, 0x17uLL)))), v68);
                v98 = vdivq_f32(vmlaq_f32(v32, v119, vaddq_f32(vdivq_f32(v92, v93), vcvtq_f32_s32(vshrq_n_s32(v82, 0x17uLL)))), v69);
                v99 = vmulq_f32(v14, *(float32x4_t *)(v48 + v41));
                v100 = vmlaq_f32(v16, v59, v99);
                v101 = vmlaq_f32(v16, v19, v99);
                v102 = vmlaq_f32(v77, v112, v99);
                v103 = vmulq_f32(v14, *(float32x4_t *)(v49 + v41));
                v104 = vmlaq_f32(v100, v118, v103);
                v105 = vmlaq_f32(v101, v20, v103);
                v106 = vmlaq_f32(v102, v114, v103);
                v107 = vmulq_f32(v14, *(float32x4_t *)(v50 + v41));
                v108 = vmulq_f32(vmaxnmq_f32(v97, v25), vmlaq_f32(v105, v21, v107));
                v23 = v77;
                v109 = vmaxnmq_f32(vmulq_f32(vmaxnmq_f32(v96, v25), vmlaq_f32(v104, v116, v107)), v16);
                v110 = vmaxnmq_f32(v108, v16);
                *(float32x4_t *)(v46 + v41) = vsubq_f32(v109, v110);
                *(float32x4_t *)(v45 + v41) = vaddq_f32(v109, v110);
                v111 = vmaxnmq_f32(vmulq_f32(vmaxnmq_f32(v98, v25), vmlaq_f32(v106, v114, v107)), v77);
                v27 = v91;
                v29 = v90;
                v30 = v89;
                v31 = v88;
                v35.i64[0] = 0x7F0000007FLL;
                v35.i64[1] = 0x7F0000007FLL;
                *(float32x4_t *)(v44 + v41) = v111;
                v26 = v86;
                v28 = v85;
                v34 = 0uLL;
                v42 += 4;
                v33 = *a1;
                v41 += 16;
              }
              while (v42 < v33);
              v11 = a1[1];
            }
            ++v12;
          }
          while (v12 < v11);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_23680DAD4(_QWORD *a1)
{
  sub_23680DAF8(a1);
  JUMPOUT(0x23B7F8F48);
}

_QWORD *sub_23680DAF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;

  *a1 = &off_2507FFCA0;
  v2 = a1[76];
  a1[76] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_2367C2F38(a1 + 74);
  for (i = 68; i != 53; i -= 5)
    sub_2367C2F38(&a1[i]);
  do
  {
    sub_2367C2F38(&a1[i]);
    i -= 5;
  }
  while (i != 38);
  do
  {
    sub_2367C2F38(&a1[i]);
    i -= 5;
  }
  while (i != 23);
  do
  {
    sub_2367C2F38(&a1[i]);
    i -= 5;
  }
  while (i != 13);
  do
  {
    sub_2367C2F38(&a1[i]);
    i -= 5;
  }
  while (i != 3);
  return a1;
}

void sub_23680DBAC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t ii;
  unsigned __int8 *v13;
  int v14;
  uint64_t m;
  uint64_t n;
  uint64_t v17;
  uint64_t j;
  uint64_t k;
  uint64_t v20;
  int v21;
  _BYTE v22[120];
  _BYTE v23[120];
  int v24;
  unsigned int v25[30];
  _BYTE v26[120];
  int v27;
  _BYTE v28[120];
  int v29;

  v6 = *a2;
  v7 = a2[1];
  v8 = operator new();
  *(_QWORD *)v8 = &off_2507FFCA0;
  *(_QWORD *)(v8 + 8) = v6;
  v9 = *(_QWORD *)a3;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v9;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a3 + 8);
  v10 = v8 + 568;
  bzero((void *)(v8 + 40), 0x209uLL);
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 568) = 0u;
  sub_2367CA770((uint64_t)v28, v6, v7);
  if (v29)
  {
    *(_DWORD *)(a1 + 8) = v29;
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return;
  }
  sub_2367CA9E4((uint64_t)v26, (uint64_t)v28);
  sub_2367D086C(v8 + 440, (uint64_t)v26);
  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)&v26[i]);
  if (v6 < 8 || v7 <= 7)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = v8;
    v8 = 0;
  }
  else
  {
    sub_2367CA770((uint64_t)v26, v6, v7);
    if (v27)
    {
      *(_DWORD *)(a1 + 8) = v27;
    }
    else
    {
      sub_2367CA9E4((uint64_t)v25, (uint64_t)v26);
      v13 = (unsigned __int8 *)(v8 + 560);
      do
        __ldaxr(v13);
      while (__stlxr(1u, v13));
      v14 = sub_23680D5FC(a2, a3, v8 + 440, v10, v25);
      if (v14 || (atomic_store(0, v13), (v14 = sub_23680A7E4(v10, v25, v8 + 40)) != 0))
      {
        *(_DWORD *)(a1 + 8) = v14;
      }
      else
      {
        sub_23680DF50((uint64_t)v23, a2);
        if (v24)
        {
          *(_DWORD *)(a1 + 8) = v24;
        }
        else
        {
          sub_2367CA9E4((uint64_t)v22, (uint64_t)v23);
          sub_23680DBAC(&v20, v22, a3);
          if (v21)
          {
            *(_DWORD *)(a1 + 8) = v21;
          }
          else
          {
            v17 = *(_QWORD *)(v8 + 608);
            *(_QWORD *)(v8 + 608) = v20;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            *(_DWORD *)(a1 + 8) = 0;
            *(_QWORD *)a1 = v8;
            v8 = 0;
          }
          for (j = 104; j != -16; j -= 40)
            sub_2367C2F38((uint64_t *)&v22[j]);
          if (!v24)
          {
            for (k = 104; k != -16; k -= 40)
              sub_2367C2F38((uint64_t *)&v23[k]);
          }
        }
      }
      for (m = 26; m != -4; m -= 10)
        sub_2367C2F38((uint64_t *)&v25[m]);
      if (!v27)
      {
        for (n = 104; n != -16; n -= 40)
          sub_2367C2F38((uint64_t *)&v26[n]);
      }
    }
  }
  if (!v29)
  {
    for (ii = 104; ii != -16; ii -= 40)
      sub_2367C2F38((uint64_t *)&v28[ii]);
  }
  if (v8)
    goto LABEL_14;
}

void sub_23680DE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;

  for (i = 104; i != -16; i -= 40)
    sub_2367C2F38((uint64_t *)(v60 + i));
  if (!a42)
  {
    for (j = 104; j != -16; j -= 40)
      sub_2367C2F38((uint64_t *)(&a27 + j));
  }
  for (k = 104; k != -16; k -= 40)
    sub_2367C2F38((uint64_t *)(&a44 + k));
  if (!LODWORD(STACK[0x200]))
  {
    for (m = 104; m != -16; m -= 40)
      sub_2367C2F38((uint64_t *)(&a59 + m));
  }
  if (!*(_DWORD *)(v61 - 96))
  {
    for (n = 104; n != -16; n -= 40)
      sub_2367C2F38((uint64_t *)(v61 - 216 + n));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  _Unwind_Resume(a1);
}

void sub_23680DF50(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t i;
  uint64_t j;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[12];
  _BYTE v43[120];
  int v44;

  v4 = *a2;
  v5 = a2[1];
  sub_2367CA770((uint64_t)v43, (unint64_t)(v4 + 1) >> 1, (unint64_t)(v5 + 1) >> 1);
  if (v44)
  {
    *(_DWORD *)(a1 + 120) = v44;
  }
  else
  {
    v38 = a1;
    sub_2367CA9E4((uint64_t)&v39, (uint64_t)v43);
    v6 = 0;
    if ((unint64_t)(v4 + 1) >> 1 <= 1)
      v7 = 1;
    else
      v7 = (unint64_t)(v4 + 1) >> 1;
    v8 = 4 * v7;
    if ((unint64_t)(v5 + 1) >> 1 <= 1)
      v9 = 1;
    else
      v9 = (unint64_t)(v5 + 1) >> 1;
    do
    {
      if ((_DWORD)v5)
      {
        v10 = 0;
        v11 = v41;
        v12 = v9;
        do
        {
          if ((_DWORD)v4)
            bzero((void *)(v42[5 * v6] + v10), v8);
          v10 += v11;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != 3);
    v13 = 0;
    v15 = *a2;
    v14 = a2[1];
    v17 = v39;
    v16 = v40;
    v19 = (v15 & 1) == 0 || v40 == 0;
    v20 = v41;
    v21 = (v40 - 1) * v41;
    v23 = (v14 & 1) == 0 || v39 == 0;
    v24 = 4 * v39 - 4;
    do
    {
      if ((_DWORD)v14)
      {
        v25 = 0;
        v26 = 0;
        v27 = *((_QWORD *)a2 + 2);
        v28 = v41;
        do
        {
          if ((_DWORD)v15)
          {
            v29 = 0;
            v30 = v42[5 * v13] + v28 * (v26 >> 1);
            v31 = *(_QWORD *)&a2[10 * v13 + 6] + v25;
            do
            {
              *(float *)(v30 + ((2 * v29) & 0xFFFFFFFFFFFFFFFCLL)) = *(float *)(v30 + ((2 * v29) & 0xFFFFFFFFFFFFFFFCLL))
                                                                   + (float)(*(float *)(v31 + 4 * v29) * 0.25);
              ++v29;
            }
            while (v15 != v29);
          }
          ++v26;
          v25 += v27;
        }
        while (v26 != v14);
      }
      if (!v19)
      {
        v32 = v42[5 * v13];
        v33 = v16;
        do
        {
          *(float *)(v32 + v24) = *(float *)(v32 + v24) + *(float *)(v32 + v24);
          v32 += v20;
          --v33;
        }
        while (v33);
      }
      if (!v23)
      {
        v34 = (float *)(v42[5 * v13] + v21);
        v35 = v17;
        do
        {
          *v34 = *v34 + *v34;
          ++v34;
          --v35;
        }
        while (v35);
      }
      ++v13;
    }
    while (v13 != 3);
    *(_DWORD *)(v38 + 120) = 0;
    sub_2367CA9E4(v38, (uint64_t)&v39);
    for (i = 104; i != -16; i -= 40)
      sub_2367C2F38((uint64_t *)((char *)&v39 + i));
    if (!v44)
    {
      for (j = 104; j != -16; j -= 40)
        sub_2367C2F38((uint64_t *)&v43[j]);
    }
  }
}

