void AspirePirPirPreprocessDbCommand.keyword.modify(uint64_t **a1, char a2)
{
  AspirePirPirPreprocessDbCommand.keyword.modify(a1, a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t AspirePirPirPreprocessDbCommand.index.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  *a1 = 0;
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspirePirPirPreprocessDbCommand.index : AspirePirPirPreprocessDbCommand@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  *a2 = 0;
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.keyword : AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  outlined init with copy of SecretKey(a1, (uint64_t)&v13 - v9, a5);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined init with take of SecretKey((uint64_t)v10, a2, a5);
  v11 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
}

uint64_t AspirePirPirPreprocessDbCommand.index.setter(uint64_t a1)
{
  return AspirePirPirPreprocessDbCommand.keyword.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t AspirePirPirPreprocessDbCommand.keyword.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined init with take of SecretKey(a1, v2, a2);
  v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return UnknownStorage.init()();
}

void (*AspirePirPirPreprocessDbCommand.index.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
LABEL_6:
    *v7 = 0;
    UnknownStorage.init()();
    return AspirePirPirPreprocessDbCommand.index.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  return AspirePirPirPreprocessDbCommand.index.modify;
}

void AspirePirPirPreprocessDbCommand.index.modify(uint64_t **a1, char a2)
{
  AspirePirPirPreprocessDbCommand.keyword.modify(a1, a2, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

void AspirePirPirPreprocessDbCommand.keyword.modify(uint64_t **a1, char a2, uint64_t (*a3)(_QWORD))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v4 = *a1;
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (void *)(*a1)[2];
  v8 = (void *)(*a1)[3];
  v10 = **a1;
  v9 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey((*a1)[3], (uint64_t)v7, a3);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of SecretKey((uint64_t)v7, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
    outlined destroy of AspireApiPECConfig((uint64_t)v8, a3);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of SecretKey((uint64_t)v8, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  free(v8);
  free(v7);
  free(v9);
  free(v4);
}

uint64_t AspirePirPirPreprocessDbCommand.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspirePirPirPreprocessDbCommand, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t (*AspirePirPirPreprocessDbCommand.unknownFields.modify())()
{
  type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.numEntries.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.numEntries.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Index.numEntries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.entrySize.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.entrySize.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Index.entrySize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Index, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t (*AspirePirPirPreprocessDbCommand.Index.unknownFields.modify())()
{
  type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.keyword.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbCommand.Keyword.keyword : AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.Keyword.keyword : AspirePirPirPreprocessDbCommand.Keyword(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.keyword.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.keyword.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

BOOL AspirePirPirPreprocessDbCommand.Keyword.hasKeyword.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20) + 8) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbCommand.Keyword.clearKeyword()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.value.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbCommand.Keyword.value : AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.Keyword.value : AspirePirPirPreprocessDbCommand.Keyword(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.value.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

BOOL AspirePirPirPreprocessDbCommand.Keyword.hasValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbCommand.Keyword.clearValue()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 24));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  v7 = type metadata accessor for AspirePirCuckooTableConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirCuckooTableConfig);
  *(_OWORD *)((char *)a1 + 26) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
}

uint64_t key path getter for AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig : AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirCuckooTableConfig);
  *(_OWORD *)((char *)a2 + 26) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
}

uint64_t key path setter for AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig : AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspirePirCuckooTableConfig);
  v8 = a2 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspirePirCuckooTableConfig);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspirePirCuckooTableConfig);
  v4 = type metadata accessor for AspirePirCuckooTableConfig(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)((char *)v9 + 26) = 0u;
    *v9 = 0u;
    v9[1] = 0u;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirCuckooTableConfig);
  }
  return AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify;
}

void AspirePirPirPreprocessDbCommand.Keyword.cuckooConfig.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4, type metadata accessor for AspirePirCuckooTableConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined init with take of SecretKey((uint64_t)v4, v9, type metadata accessor for AspirePirCuckooTableConfig);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspirePirCuckooTableConfig);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(_QWORD **)a1 + v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined init with take of SecretKey((uint64_t)v5, v9, type metadata accessor for AspirePirCuckooTableConfig);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL AspirePirPirPreprocessDbCommand.Keyword.hasCuckooConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  v5 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  return v6;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbCommand.Keyword.clearCuckooConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  v2 = type metadata accessor for AspirePirCuckooTableConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*AspirePirPirPreprocessDbCommand.Keyword.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspirePirPirAlgorithm._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirAlgorithm._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirAlgorithm@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirAlgorithm._protobuf_nameMap, a1);
}

uint64_t static AspirePirKeyCompressionStrategy._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeyCompressionStrategy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirKeyCompressionStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeyCompressionStrategy._protobuf_nameMap, a1);
}

unint64_t static AspirePirPirParameters.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static AspirePirPirParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirParameters._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1)
{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for AspirePirPirParameters._StorageClass, AspirePirPirParameters._StorageClass.init(), &static AspirePirPirParameters._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass, AspirePirPirPreprocessDbArgs._StorageClass.init(), &static AspirePirPirPreprocessDbArgs._StorageClass.defaultInstance);
}

uint64_t AspirePirPirParameters._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions) = MEMORY[0x24BEE4AF8];
  v3 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  v4 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize) = 0;
  v6 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse) = 2;
  v9 = v0
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  v11 = type metadata accessor for AspirePirBatchPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return v0;
}

uint64_t AspirePirPirParameters._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v66 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v65 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries) = 0;
  v15 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize) = 0;
  v16 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions) = MEMORY[0x24BEE4AF8];
  v17 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  v57 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  v18 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v58 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize) = 0;
  v20 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  v59 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  v21 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  v61 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  v23 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  *v23 = 2;
  v24 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  v62 = v23;
  v63 = v24;
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  v64 = v1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  v26 = type metadata accessor for AspirePirBatchPirParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v27, (uint64_t)v11, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, v12, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_endAccess();
  v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  v29 = *v28;
  swift_beginAccess();
  *v14 = v29;
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  v31 = *v30;
  swift_beginAccess();
  *v15 = v31;
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  v33 = *v32;
  swift_beginAccess();
  *v16 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  v35 = v60;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v60, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v36 = v57;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v35, v36, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  swift_endAccess();
  v37 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
  swift_beginAccess();
  v38 = *v37;
  LOBYTE(v37) = *((_BYTE *)v37 + 8);
  swift_beginAccess();
  *(_QWORD *)v19 = v38;
  *(_BYTE *)(v19 + 8) = (_BYTE)v37;
  v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  v40 = *v39;
  v41 = v58;
  swift_beginAccess();
  *v41 = v40;
  v42 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  v43 = v65;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v65, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v44 = v59;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v43, v44, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  swift_endAccess();
  v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
  swift_beginAccess();
  v46 = *v45;
  LOBYTE(v45) = *((_BYTE *)v45 + 8);
  v47 = v61;
  swift_beginAccess();
  *(_QWORD *)v47 = v46;
  *(_BYTE *)(v47 + 8) = (_BYTE)v45;
  v48 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  LOBYTE(v48) = *v48;
  v49 = v62;
  swift_beginAccess();
  *v49 = (_BYTE)v48;
  v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize);
  swift_beginAccess();
  v51 = *v50;
  LOBYTE(v50) = *((_BYTE *)v50 + 8);
  v52 = v63;
  swift_beginAccess();
  *(_QWORD *)v52 = v51;
  *(_BYTE *)(v52 + 8) = (_BYTE)v50;
  v53 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  v54 = v66;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v53, v66, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  swift_release();
  v55 = v64;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v54, v55, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  swift_endAccess();
  return v1;
}

uint64_t type metadata accessor for AspirePirBatchPirParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirBatchPirParameters);
}

uint64_t type metadata accessor for AspirePirCuckooTableConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirCuckooTableConfig);
}

uint64_t type metadata accessor for AspirePirSerializedKeywordDbRow(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirSerializedKeywordDbRow);
}

uint64_t type metadata accessor for AspirePirSerializedKeywordDb(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirSerializedKeywordDb);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbArgs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbArgs);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbArgs._StorageClass);
}

uint64_t AspirePirPirParameters._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  return swift_deallocClassInstance();
}

uint64_t AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspirePirPirParameters, (void (*)(_QWORD))type metadata accessor for AspirePirPirParameters._StorageClass, AspirePirPirParameters._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t (*v17)(uint64_t);
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t (*v31)();

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    v11 = MEMORY[0x24BE5C140];
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
          v17 = type metadata accessor for AspireHeEncryptionParameters;
          v18 = (unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters;
          v19 = &protocol conformance descriptor for AspireHeEncryptionParameters;
          goto LABEL_5;
        case 2:
          v20 = a2;
          v21 = a1;
          v22 = a3;
          v23 = a4;
          v24 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries;
          goto LABEL_15;
        case 3:
          v20 = a2;
          v21 = a1;
          v22 = a3;
          v23 = a4;
          v24 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize;
          goto LABEL_15;
        case 4:
          v20 = a2;
          v21 = a1;
          v22 = a3;
          v23 = a4;
          v24 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions;
          v25 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0F8];
          goto LABEL_16;
        case 5:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
          v17 = type metadata accessor for AspirePirKeywordPirParameters;
          v18 = &lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters;
          v19 = &protocol conformance descriptor for AspirePirKeywordPirParameters;
          goto LABEL_5;
        case 6:
          v26 = a2;
          v27 = a1;
          v28 = a3;
          v29 = a4;
          v30 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
          v31 = lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
          goto LABEL_19;
        case 7:
          v20 = a2;
          v21 = a1;
          v22 = a3;
          v23 = a4;
          v24 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize;
LABEL_15:
          v25 = (void (*)(uint64_t, uint64_t, uint64_t))v11;
LABEL_16:
          closure #2 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(v20, v21, v22, v23, v24, v25);
          break;
        case 8:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
          v17 = type metadata accessor for AspireHeEvaluationKeyConfig;
          v18 = &lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig;
          v19 = &protocol conformance descriptor for AspireHeEvaluationKeyConfig;
          goto LABEL_5;
        case 9:
          v26 = a2;
          v27 = a1;
          v28 = a3;
          v29 = a4;
          v30 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
          v31 = lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
LABEL_19:
          closure #6 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(v26, v27, v28, v29, (uint64_t)v30, (void (*)(uint64_t))v31);
          break;
        case 10:
          closure #10 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)();
          break;
        case 12:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
          v17 = type metadata accessor for AspirePirBatchPirParameters;
          v18 = (unint64_t *)&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters;
          v19 = &protocol conformance descriptor for AspirePirBatchPirParameters;
LABEL_5:
          closure #1 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(v12, v13, v14, v15, (uint64_t)v16, v17, v18, (uint64_t)v19);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;

  v7 = swift_beginAccess();
  a6(v7);
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AspirePirPirParameters, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirParameters.traverse<A>(visitor:));
}

uint64_t closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  result = closure #1 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    v10 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
    swift_beginAccess();
    if (*v10)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    v11 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
    swift_beginAccess();
    if (*v11)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    v12 = a1
        + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #2 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
    v13 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
    swift_beginAccess();
    if (*v13)
    {
      lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    v14 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
    swift_beginAccess();
    if (*v14)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    closure #3 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
    v15 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
    swift_beginAccess();
    if (*v15)
    {
      lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1);
    closure #5 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1);
    return closure #6 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t closure #3 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t closure #4 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(a1
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  result = swift_beginAccess();
  if (*v1 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in closure #1 in AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirBatchPirParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirBatchPirParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirBatchPirParameters);
}

uint64_t static AspirePirPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, type metadata accessor for AspirePirPirParameters, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirParameters.== infix(_:_:)) & 1;
}

BOOL closure #1 in static AspirePirPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD **v54;
  _QWORD *v55;
  _QWORD **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v136 = a2;
  v3 = type metadata accessor for AspirePirBatchPirParameters(0);
  v116 = *(_QWORD *)(v3 - 8);
  v117 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v113 = (uint64_t)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirBatchPirParameters?, AspirePirBatchPirParameters?));
  MEMORY[0x24BDAC7A8](v115);
  v119 = (uint64_t)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v114 = (uint64_t)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v118 = (uint64_t)&v112 - v9;
  v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v122 = *(_QWORD *)(v10 - 8);
  v123 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v120 = (uint64_t *)((char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x24BDAC7A8](v121);
  v124 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v131 = (uint64_t *)((char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v130 = (char *)&v112 - v16;
  v132 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v128 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132);
  v125 = (uint64_t)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?));
  MEMORY[0x24BDAC7A8](v127);
  v129 = (uint64_t)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v126 = (uint64_t)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v133 = (uint64_t)&v112 - v22;
  v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v134 = (uint64_t)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v135 = (uint64_t)&v112 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v112 - v32;
  v34 = a1;
  v35 = a1
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, (uint64_t)v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v36 = v136;
  v37 = v136
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  v38 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, (uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v38, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v39((uint64_t)v28, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    v40 = v39(v38, 1, v23);
    v41 = v36;
    v42 = v34;
    if (v40 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    v44 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    v45 = (uint64_t)v28;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, v44);
    goto LABEL_64;
  }
  v42 = v34;
  v43 = v135;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v135, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v39(v38, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig(v43, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  v46 = v134;
  outlined init with take of SecretKey(v38, v134, type metadata accessor for AspireHeEncryptionParameters);
  swift_retain();
  v41 = v36;
  swift_retain();
  v47 = static AspireHeEncryptionParameters.== infix(_:_:)(v43, v46);
  outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AspireApiPECConfig(v43, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v47 & 1) == 0)
    goto LABEL_64;
LABEL_9:
  v48 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  v49 = *v48;
  v50 = (_QWORD *)(v41
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  if (v49 != *v50)
    goto LABEL_64;
  v51 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  v52 = *v51;
  v53 = (_QWORD *)(v41
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  if (v52 != *v53)
    goto LABEL_64;
  v54 = (_QWORD **)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  v55 = *v54;
  v56 = (_QWORD **)(v41
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v55, *v56))
    goto LABEL_64;
  v57 = v42
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  v58 = v133;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v57, v133, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v59 = v41
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  v60 = v129;
  v61 = v129 + *(int *)(v127 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v58, v129, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v59, v61, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  v63 = v132;
  if (v62(v60, 1, v132) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    v64 = v62(v61, 1, v63);
    v66 = (uint64_t)v130;
    v65 = v131;
    if (v64 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v60, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  v71 = v126;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, v126, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v72 = v62(v61, 1, v63);
  v66 = (uint64_t)v130;
  v65 = v131;
  if (v72 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AspireApiPECConfig(v71, type metadata accessor for AspirePirKeywordPirParameters);
LABEL_22:
    v44 = &demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?);
    v45 = v60;
    goto LABEL_7;
  }
  v73 = v125;
  outlined init with take of SecretKey(v61, v125, type metadata accessor for AspirePirKeywordPirParameters);
  if (*(_QWORD *)v71 != *(_QWORD *)v73 || *(unsigned __int8 *)(v71 + 8) != *(unsigned __int8 *)(v73 + 8))
  {
    outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspirePirKeywordPirParameters);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v133, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AspireApiPECConfig(v71, type metadata accessor for AspirePirKeywordPirParameters);
    v45 = v60;
    v44 = &demangling cache variable for type metadata for AspirePirKeywordPirParameters?;
    goto LABEL_7;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v133, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AspireApiPECConfig(v126, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v60, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((v74 & 1) == 0)
    goto LABEL_64;
LABEL_15:
  v67 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
  swift_beginAccess();
  v68 = *v67;
  v69 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
  swift_beginAccess();
  v70 = *v69;
  if (*((_BYTE *)v69 + 8) == 1)
  {
    if (v70)
    {
      if (v70 == 1)
      {
        if (v68 != 1)
          goto LABEL_64;
      }
      else if (v68 != 2)
      {
        goto LABEL_64;
      }
    }
    else if (v68)
    {
      goto LABEL_64;
    }
  }
  else if (v68 != v70)
  {
    goto LABEL_64;
  }
  v75 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  v76 = *v75;
  v77 = (_QWORD *)(v41
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  if (v76 != *v77)
    goto LABEL_64;
  v78 = v42
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v78, v66, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v79 = v41
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  v80 = v124;
  v81 = v124 + *(int *)(v121 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v66, v124, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v82 = v79;
  v83 = v80;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v82, v81, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  v85 = v80;
  v86 = v123;
  if (v84(v85, 1, v123) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v66, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v84(v81, 1, v86) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v83, (uint64_t)v65, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if (v84(v81, 1, v86) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v66, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_39:
    v44 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
    v45 = v83;
    goto LABEL_7;
  }
  v87 = v120;
  outlined init with take of SecretKey(v81, (uint64_t)v120, type metadata accessor for AspireHeEvaluationKeyConfig);
  v88 = specialized static AspireHeEvaluationKeyConfig.== infix(_:_:)(v65, v87);
  outlined destroy of AspireApiPECConfig((uint64_t)v87, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v66, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((v88 & 1) == 0)
    goto LABEL_64;
LABEL_41:
  v89 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
  swift_beginAccess();
  v90 = *v89;
  v91 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
  swift_beginAccess();
  v92 = *v91;
  if (*((_BYTE *)v91 + 8) == 1)
  {
    if (v92)
    {
      if (v92 == 1)
      {
        if (v90 != 1)
          goto LABEL_64;
      }
      else if (v90 != 2)
      {
        goto LABEL_64;
      }
    }
    else if (v90)
    {
      goto LABEL_64;
    }
  }
  else if (v90 != v92)
  {
    goto LABEL_64;
  }
  v93 = (unsigned __int8 *)(v42
                          + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  v94 = *v93;
  v95 = (unsigned __int8 *)(v41
                          + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  v96 = *v95;
  if (v94 == 2)
  {
    if (v96 != 2)
      goto LABEL_64;
  }
  else if (v96 == 2 || ((((v96 & 1) == 0) ^ v94) & 1) == 0)
  {
    goto LABEL_64;
  }
  v97 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize);
  swift_beginAccess();
  v98 = *v97;
  v99 = *((_BYTE *)v97 + 8);
  v100 = v41
       + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  if ((v99 & 1) != 0)
  {
    if ((*(_BYTE *)(v100 + 8) & 1) != 0)
      goto LABEL_61;
LABEL_64:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(_BYTE *)(v100 + 8) & 1) != 0 || v98 != *(_QWORD *)v100)
    goto LABEL_64;
LABEL_61:
  v101 = v42
       + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  v102 = v118;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v101, v118, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  v103 = v41
       + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  v104 = v119;
  v105 = v119 + *(int *)(v115 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v102, v119, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v103, v105, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  v106 = v117;
  v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v107(v104, 1, v117) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v118, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    if (v107(v105, 1, v106) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v119, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
      return 1;
    }
LABEL_68:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v119, &demangling cache variable for type metadata for (AspirePirBatchPirParameters?, AspirePirBatchPirParameters?));
    return 0;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v119, v114, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if (v107(v105, 1, v106) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v118, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
    outlined destroy of AspireApiPECConfig(v114, type metadata accessor for AspirePirBatchPirParameters);
    goto LABEL_68;
  }
  v109 = v113;
  outlined init with take of SecretKey(v105, v113, type metadata accessor for AspirePirBatchPirParameters);
  v110 = v114;
  v111 = specialized static AspirePirBatchPirParameters.== infix(_:_:)(v114, v109);
  swift_release();
  swift_release();
  outlined destroy of AspireApiPECConfig(v109, type metadata accessor for AspirePirBatchPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v118, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  outlined destroy of AspireApiPECConfig(v110, type metadata accessor for AspirePirBatchPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v119, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  return (v111 & 1) != 0;
}

Swift::Int AspirePirPirParameters.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirPirParameters, &lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspirePirPirParameters(a1, &one-time initialization token for defaultInstance, &static AspirePirPirParameters._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirParameters()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspirePirPirParameters(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, type metadata accessor for AspirePirPirParameters, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirParameters.== infix(_:_:)) & 1;
}

unint64_t static AspirePirCuckooTableConfig.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static AspirePirCuckooTableConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirCuckooTableConfig._protobuf_nameMap, a1);
}

uint64_t AspirePirCuckooTableConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirCuckooTableConfig.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(double *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0 + 8)
      || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0 + 16)
        || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (*(double *)(v0 + 24) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 32)
            || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (*(_BYTE *)(v0 + 40) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (*(_BYTE *)(v0 + 41) != 1
                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for AspirePirCuckooTableConfig(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int AspirePirCuckooTableConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirCuckooTableConfig, &lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
}

uint64_t protocol witness for Message.init() in conformance AspirePirCuckooTableConfig@<X0>(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 26) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirCuckooTableConfig()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AspirePirCuckooTableConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AspirePirCuckooTableConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirCuckooTableConfig()
{
  return AspirePirCuckooTableConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirCuckooTableConfig()
{
  return AspirePirCuckooTableConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirCuckooTableConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirCuckooTableConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirCuckooTableConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirCuckooTableConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirCuckooTableConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
  return Message.hash(into:)();
}

unint64_t static AspirePirBatchPirParameters.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspirePirBatchPirParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirBatchPirParameters._protobuf_nameMap, a1);
}

uint64_t AspirePirBatchPirParameters.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirBatchPirParameters.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AspirePirBatchPirParameters(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AspirePirBatchPirParameters.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirBatchPirParameters, &lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirBatchPirParameters()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirBatchPirParameters()
{
  return AspirePirBatchPirParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirBatchPirParameters()
{
  return AspirePirBatchPirParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirBatchPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirBatchPirParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirBatchPirParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirBatchPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirBatchPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
  return Message.hash(into:)();
}

unint64_t static AspirePirKeywordPirParameters.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t static AspirePirKeywordPirParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeywordPirParameters._protobuf_nameMap, a1);
}

uint64_t AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirKeywordPirParameters.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 8) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspirePirKeywordPirParameters(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AspirePirKeywordPirParameters.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirKeywordPirParameters, &lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
}

uint64_t protocol witness for Message.init() in conformance AspirePirKeywordPirParameters@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirKeywordPirParameters()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirKeywordPirParameters()
{
  return AspirePirKeywordPirParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirKeywordPirParameters()
{
  return AspirePirKeywordPirParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirKeywordPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirKeywordPirParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirKeywordPirParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirKeywordPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirKeywordPirParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
  return Message.hash(into:)();
}

unint64_t static AspirePirEncryptedIndices.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static AspirePirEncryptedIndices._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirEncryptedIndices._protobuf_nameMap, a1);
}

uint64_t AspirePirEncryptedIndices.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for AspireHeSerializedCiphertext(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirEncryptedIndices.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for AspireHeSerializedCiphertext(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspirePirEncryptedIndices(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AspirePirEncryptedIndices.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirEncryptedIndices, &lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
}

uint64_t protocol witness for Message.init() in conformance AspirePirEncryptedIndices@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirEncryptedIndices()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirEncryptedIndices()
{
  return AspirePirEncryptedIndices.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirEncryptedIndices()
{
  return AspirePirEncryptedIndices.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirEncryptedIndices()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirEncryptedIndices@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirEncryptedIndices._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirEncryptedIndices()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirEncryptedIndices()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  return Message.hash(into:)();
}

unint64_t static AspirePirSerializedKeywordDbRow.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspirePirSerializedKeywordDbRow._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDbRow._protobuf_nameMap, a1);
}

uint64_t AspirePirSerializedKeywordDbRow.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for AspirePirSerializedKeywordDbRow(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_237CEE360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    __asm { BR              X10 }
  }
  return result;
}

uint64_t closure #1 in AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int AspirePirSerializedKeywordDbRow.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirSerializedKeywordDbRow, &lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
}

uint64_t protocol witness for Message.init() in conformance AspirePirSerializedKeywordDbRow@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  *a2 = xmmword_237D54090;
  a2[1] = xmmword_237D54090;
  result = UnknownStorage.init()();
  v5 = (_QWORD *)((char *)a2 + *(int *)(a1 + 28));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirSerializedKeywordDbRow()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirSerializedKeywordDbRow()
{
  return AspirePirSerializedKeywordDbRow.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirSerializedKeywordDbRow()
{
  AspirePirSerializedKeywordDbRow.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirSerializedKeywordDbRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirSerializedKeywordDbRow@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDbRow._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirSerializedKeywordDbRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirSerializedKeywordDbRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
  return Message.hash(into:)();
}

unint64_t static AspirePirSerializedKeywordDb.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspirePirSerializedKeywordDb._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDb._protobuf_nameMap, a1);
}

uint64_t AspirePirSerializedKeywordDb.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for AspirePirSerializedKeywordDbRow(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirSerializedKeywordDb.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for AspirePirSerializedKeywordDbRow(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspirePirSerializedKeywordDb(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AspirePirSerializedKeywordDb.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirSerializedKeywordDb, &lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirSerializedKeywordDb()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirSerializedKeywordDb()
{
  return AspirePirSerializedKeywordDb.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirSerializedKeywordDb()
{
  return AspirePirSerializedKeywordDb.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirSerializedKeywordDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirSerializedKeywordDb@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirSerializedKeywordDb._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirSerializedKeywordDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirSerializedKeywordDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
  return Message.hash(into:)();
}

unint64_t static AspirePirPirPreprocessDbArgs.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspirePirPirPreprocessDbArgs._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbArgs._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t result;

  a2(0);
  swift_allocObject();
  result = a3();
  *a4 = result;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)(v0 + 41) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_BYTE *)(v0 + 57) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = -1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_WORD *)(v0 + 112) = 256;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 161) = 0u;
  *(_WORD *)(v0 + 177) = 513;
  *(_DWORD *)(v0 + 180) = 0;
  *(_BYTE *)(v0 + 184) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  *(_WORD *)(v0 + 185) = 514;
  v2 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x24BDAC7A8](v3);
  v49 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 41) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v39 = v1 + 48;
  *(_BYTE *)(v1 + 57) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = -1;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_WORD *)(v1 + 112) = 256;
  *(_QWORD *)(v1 + 88) = 0;
  *(_OWORD *)(v1 + 161) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v42 = (_QWORD *)(v1 + 152);
  v43 = v1 + 168;
  *(_OWORD *)(v1 + 136) = 0u;
  v41 = (_QWORD *)(v1 + 136);
  *(_OWORD *)(v1 + 120) = 0u;
  v40 = (_QWORD *)(v1 + 120);
  *(_WORD *)(v1 + 177) = 513;
  *(_BYTE *)(v1 + 184) = 1;
  *(_WORD *)(v1 + 185) = 514;
  v46 = (_BYTE *)(v1 + 185);
  v47 = v1 + 186;
  v5 = v1
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  v48 = v1
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  *(_DWORD *)(v1 + 180) = 0;
  v44 = v1 + 178;
  v45 = (_DWORD *)(v1 + 180);
  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v9;
  *(_QWORD *)(v1 + 40) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 48);
  LOBYTE(v10) = *(_BYTE *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 57);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v11;
  *(_BYTE *)(v1 + 56) = v10;
  *(_BYTE *)(v1 + 57) = v12;
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(v1 + 64);
  v16 = *(_QWORD *)(v1 + 72);
  v17 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(v1 + 64) = v13;
  *(_QWORD *)(v1 + 72) = v14;
  v18 = *(_BYTE *)(v1 + 80);
  *(_BYTE *)(v1 + 80) = v17;
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v13, v14, v17);
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v15, v16, v18);
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 96);
  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = v19;
  *(_QWORD *)(v1 + 96) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 104);
  v22 = *(_BYTE *)(a1 + 112);
  LOBYTE(v20) = *(_BYTE *)(a1 + 113);
  swift_beginAccess();
  *(_QWORD *)(v1 + 104) = v21;
  *(_BYTE *)(v1 + 112) = v22;
  *(_BYTE *)(v1 + 113) = v20;
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = v40;
  swift_beginAccess();
  *v25 = v23;
  *(_QWORD *)(v1 + 128) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = *(_QWORD *)(a1 + 136);
  v26 = *(_QWORD *)(a1 + 144);
  v28 = v41;
  swift_beginAccess();
  *v28 = v27;
  *(_QWORD *)(v1 + 144) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = *(_QWORD *)(a1 + 152);
  v29 = *(_QWORD *)(a1 + 160);
  v31 = v42;
  swift_beginAccess();
  *v31 = v30;
  *(_QWORD *)(v1 + 160) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = *(_QWORD *)(a1 + 168);
  LOBYTE(v24) = *(_BYTE *)(a1 + 176);
  LOBYTE(v30) = *(_BYTE *)(a1 + 177);
  swift_beginAccess();
  *(_QWORD *)(v1 + 168) = v32;
  *(_BYTE *)(v1 + 176) = v24;
  *(_BYTE *)(v1 + 177) = v30;
  swift_beginAccess();
  LOBYTE(v32) = *(_BYTE *)(a1 + 178);
  swift_beginAccess();
  *(_BYTE *)(v1 + 178) = v32;
  swift_beginAccess();
  LODWORD(v32) = *(_DWORD *)(a1 + 180);
  LOBYTE(v24) = *(_BYTE *)(a1 + 184);
  v33 = v45;
  swift_beginAccess();
  *v33 = v32;
  *(_BYTE *)(v1 + 184) = v24;
  swift_beginAccess();
  LOBYTE(v32) = *(_BYTE *)(a1 + 185);
  v34 = v46;
  swift_beginAccess();
  *v34 = v32;
  swift_beginAccess();
  LOBYTE(v32) = *(_BYTE *)(a1 + 186);
  swift_beginAccess();
  *(_BYTE *)(v1 + 186) = v32;
  v35 = a1
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  v36 = v49;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, v49, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_release();
  v37 = v48;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v36, v37, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_endAccess();
  return v1;
}

uint64_t outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.OneOf_Command);
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  return v0;
}

uint64_t AspirePirPirPreprocessDbArgs._StorageClass.__deallocating_deinit()
{
  AspirePirPirPreprocessDbArgs._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspirePirPirPreprocessDbArgs, (void (*)(_QWORD))type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass, AspirePirPirPreprocessDbArgs._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:));
}

uint64_t AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v7 + v13) = a6(v14);
    swift_release();
  }
  v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 4:
        case 5:
          closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(a2, a1);
          break;
        case 7:
          closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #1 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command, type metadata accessor for AspirePirPirPreprocessDbCommand, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v2)
    return swift_bridgeObjectRelease();
  if (v8)
  {
    if (*(unsigned __int8 *)(a2 + 80) == 255)
    {
      v5 = -1;
    }
    else
    {
      dispatch thunk of Decoder.handleConflictingOneOf()();
      v5 = *(_BYTE *)(a2 + 80);
    }
    v6 = *(_QWORD *)(a2 + 64);
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v8;
    *(_BYTE *)(a2 + 80) = 2;
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v6, v7, v5);
  }
  return result;
}

uint64_t closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in AspirePirPirParameters.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  swift_beginAccess();
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirParameters.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AspirePirPirPreprocessDbArgs, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:));
}

uint64_t AspirePirPirParameters.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
  if (!v4)
  {
    closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    if (*(unsigned __int8 *)(a1 + 80) > 1u)
    {
      if (*(_BYTE *)(a1 + 80) == 2)
        closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    }
    else if (*(_BYTE *)(a1 + 80))
    {
      closure #5 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    }
    else
    {
      closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    }
    closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    return closure #17 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #3 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 57) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t result)
{
  if (*(_BYTE *)(result + 80))
  {
    __break(1u);
  }
  else
  {
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)(result + 64), *(_QWORD *)(result + 72), 0);
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #5 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t result)
{
  if (*(_BYTE *)(result + 80) == 1)
  {
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)(result + 64), *(_QWORD *)(result + 72), 1);
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #6 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 80) == 2)
  {
    v2 = *(_QWORD *)(result + 64);
    v1 = *(_QWORD *)(result + 72);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v1, 2);
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v2, v1, 2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #7 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 96))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #8 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 113) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 128))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #10 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 144))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #11 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 160))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #12 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 177) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #13 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 178) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #14 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 184) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #15 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 185) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #16 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 186) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #17 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

uint64_t static AspirePirPirPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirPreprocessDbArgs.== infix(_:_:)) & 1;
}

BOOL closure #1 in static AspirePirPirPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v4 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v79 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand?, AspirePirPirPreprocessDbCommand?));
  MEMORY[0x24BDAC7A8](v7);
  v80 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v74 - v13;
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v17 = *(_QWORD *)(a2 + 24);
  if (!v16)
  {
    if (v17)
      return 0;
    goto LABEL_8;
  }
  if (!v17)
    return 0;
  if (v15 == *(_QWORD *)(a2 + 16) && v16 == v17
    || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v18 & 1) != 0))
  {
LABEL_8:
    swift_beginAccess();
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    swift_beginAccess();
    v22 = *(_QWORD *)(a2 + 40);
    if (v21)
    {
      if (!v22)
        return 0;
      if (v20 != *(_QWORD *)(a2 + 32) || v21 != v22)
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v23 & 1) == 0)
          return result;
      }
    }
    else if (v22)
    {
      return 0;
    }
    swift_beginAccess();
    v24 = *(_QWORD *)(a1 + 48);
    v25 = *(_BYTE *)(a1 + 57);
    swift_beginAccess();
    if ((v25 & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 57) & 1) == 0)
        return 0;
LABEL_29:
      v28 = *(_QWORD *)(a1 + 64);
      v27 = *(_QWORD *)(a1 + 72);
      v29 = *(unsigned __int8 *)(a1 + 80);
      v31 = *(_QWORD *)(a2 + 64);
      v30 = *(_QWORD *)(a2 + 72);
      v32 = *(unsigned __int8 *)(a2 + 80);
      v77 = v28;
      v78 = v27;
      if (v29 == 255)
      {
        v75 = v31;
        v76 = v30;
        swift_retain();
        swift_retain();
        if (v32 == 255)
        {
LABEL_34:
          swift_beginAccess();
          v36 = *(_QWORD *)(a1 + 88);
          v37 = *(_QWORD *)(a1 + 96);
          swift_beginAccess();
          v38 = *(_QWORD *)(a2 + 96);
          if (v37)
          {
            if (!v38
              || (v36 != *(_QWORD *)(a2 + 88) || v37 != v38) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v38)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v43 = *(_QWORD *)(a1 + 104);
          v44 = *(_BYTE *)(a1 + 113);
          swift_beginAccess();
          if ((v44 & 1) != 0)
          {
            if ((*(_BYTE *)(a2 + 113) & 1) == 0)
              goto LABEL_42;
          }
          else
          {
            if ((*(_BYTE *)(a2 + 113) & 1) != 0)
              goto LABEL_42;
            v48 = *(_QWORD *)(a2 + 104);
            if ((*(_BYTE *)(a2 + 112) & 1) != 0)
            {
              if (v48)
              {
                if (v48 == 1)
                {
                  if (v43 != 1)
                    goto LABEL_42;
                }
                else if (v43 != 2)
                {
                  goto LABEL_42;
                }
              }
              else if (v43)
              {
                goto LABEL_42;
              }
            }
            else if (v43 != v48)
            {
              goto LABEL_42;
            }
          }
          swift_beginAccess();
          v45 = *(_QWORD *)(a1 + 120);
          v46 = *(_QWORD *)(a1 + 128);
          swift_beginAccess();
          v47 = *(_QWORD *)(a2 + 128);
          if (v46)
          {
            if (!v47
              || (v45 != *(_QWORD *)(a2 + 120) || v46 != v47)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v47)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v49 = *(_QWORD *)(a1 + 136);
          v50 = *(_QWORD *)(a1 + 144);
          swift_beginAccess();
          v51 = *(_QWORD *)(a2 + 144);
          if (v50)
          {
            if (!v51
              || (v49 != *(_QWORD *)(a2 + 136) || v50 != v51)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v51)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v52 = *(_QWORD *)(a1 + 152);
          v53 = *(_QWORD *)(a1 + 160);
          swift_beginAccess();
          v54 = *(_QWORD *)(a2 + 160);
          if (v53)
          {
            if (!v54
              || (v52 != *(_QWORD *)(a2 + 152) || v53 != v54)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              goto LABEL_42;
            }
          }
          else if (v54)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v55 = *(_QWORD *)(a1 + 168);
          v56 = *(_BYTE *)(a1 + 177);
          swift_beginAccess();
          if ((v56 & 1) != 0)
          {
            if ((*(_BYTE *)(a2 + 177) & 1) == 0)
              goto LABEL_42;
          }
          else
          {
            if ((*(_BYTE *)(a2 + 177) & 1) != 0)
              goto LABEL_42;
            v59 = *(_QWORD *)(a2 + 168);
            if ((*(_BYTE *)(a2 + 176) & 1) != 0)
            {
              if (v59)
              {
                if (v59 == 1)
                {
                  if (v55 != 1)
                    goto LABEL_42;
                }
                else if (v55 != 2)
                {
                  goto LABEL_42;
                }
              }
              else if (v55)
              {
                goto LABEL_42;
              }
            }
            else if (v55 != v59)
            {
              goto LABEL_42;
            }
          }
          swift_beginAccess();
          v57 = *(unsigned __int8 *)(a1 + 178);
          swift_beginAccess();
          v58 = *(unsigned __int8 *)(a2 + 178);
          if (v57 == 2)
          {
            if (v58 != 2)
              goto LABEL_42;
          }
          else if (v58 == 2 || ((((v58 & 1) == 0) ^ v57) & 1) == 0)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v60 = *(_DWORD *)(a1 + 180);
          v61 = *(_BYTE *)(a1 + 184);
          swift_beginAccess();
          if ((v61 & 1) != 0)
          {
            if ((*(_BYTE *)(a2 + 184) & 1) == 0)
              goto LABEL_42;
          }
          else if ((*(_BYTE *)(a2 + 184) & 1) != 0 || v60 != *(_DWORD *)(a2 + 180))
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v62 = *(unsigned __int8 *)(a1 + 185);
          swift_beginAccess();
          v63 = *(unsigned __int8 *)(a2 + 185);
          if (v62 == 2)
          {
            if (v63 != 2)
              goto LABEL_42;
          }
          else if (v63 == 2 || ((((v63 & 1) == 0) ^ v62) & 1) == 0)
          {
            goto LABEL_42;
          }
          swift_beginAccess();
          v64 = *(unsigned __int8 *)(a1 + 186);
          swift_beginAccess();
          v65 = *(unsigned __int8 *)(a2 + 186);
          if (v64 != 2)
          {
            if (v65 == 2 || ((((v65 & 1) == 0) ^ v64) & 1) == 0)
              goto LABEL_42;
LABEL_114:
            v66 = a1
                + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
            swift_beginAccess();
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v66, (uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
            v67 = a2
                + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
            swift_beginAccess();
            v68 = *(int *)(v7 + 48);
            v69 = v80;
            v70 = v80 + v68;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, v80, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
            v78 = v70;
            outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67, v70, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
            v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
            if (v71(v69, 1, v4) == 1)
            {
              swift_release();
              swift_release();
              outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
              if (v71(v78, 1, v4) == 1)
              {
                outlined destroy of AMDPbHEConfig.OneOf_Config?(v80, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
                return 1;
              }
            }
            else
            {
              outlined init with copy of AMDPbHEConfig.OneOf_Config?(v80, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
              if (v71(v78, 1, v4) != 1)
              {
                v72 = v79;
                outlined init with take of SecretKey(v78, v79, type metadata accessor for AspirePirPirPreprocessDbCommand);
                v73 = specialized static AspirePirPirPreprocessDbCommand.== infix(_:_:)((uint64_t)v12, v72);
                swift_release();
                swift_release();
                outlined destroy of AspireApiPECConfig(v72, type metadata accessor for AspirePirPirPreprocessDbCommand);
                outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
                outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspirePirPirPreprocessDbCommand);
                outlined destroy of AMDPbHEConfig.OneOf_Config?(v80, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
                return (v73 & 1) != 0;
              }
              swift_release();
              swift_release();
              outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
              outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspirePirPirPreprocessDbCommand);
            }
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v80, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand?, AspirePirPirPreprocessDbCommand?));
            return 0;
          }
          if (v65 == 2)
            goto LABEL_114;
LABEL_42:
          swift_release();
          swift_release();
          return 0;
        }
      }
      else
      {
        v83 = v28;
        v84 = v27;
        v85 = v29;
        if (v32 != 255)
        {
          v81[0] = v31;
          v81[1] = v30;
          v82 = v32;
          v33 = v28;
          outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v28, v27, v29);
          v34 = v33;
          v35 = v78;
          outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v34, v78, v29);
          swift_retain();
          swift_retain();
          LODWORD(v76) = specialized static AspirePirPirPreprocessDbArgs.OneOf_Sharding.== infix(_:_:)((uint64_t)&v83, (uint64_t)v81);
          outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v83, v84, v85);
          outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v77, v35, v29);
          if ((v76 & 1) == 0)
            goto LABEL_42;
          goto LABEL_34;
        }
        v75 = v31;
        v76 = v30;
        v39 = v28;
        v40 = v27;
        outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v28, v27, v29);
        outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v39, v40, v29);
        swift_retain();
        swift_retain();
        outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v39, v40, v29);
      }
      v42 = v75;
      v41 = v76;
      outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v75, v76, v32);
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v77, v78, v29);
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v42, v41, v32);
      goto LABEL_42;
    }
    if ((*(_BYTE *)(a2 + 57) & 1) == 0)
    {
      v26 = *(_QWORD *)(a2 + 48);
      if ((*(_BYTE *)(a2 + 56) & 1) == 0)
      {
        if (v24 != v26)
          return 0;
        goto LABEL_29;
      }
      if (v26)
      {
        if (v26 == 1)
        {
          if (v24 != 1)
            return 0;
          goto LABEL_29;
        }
        if (v24 == 2)
          goto LABEL_29;
      }
      else if (!v24)
      {
        goto LABEL_29;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int AspirePirPirPreprocessDbArgs.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirPirPreprocessDbArgs, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspirePirPirParameters(a1, &one-time initialization token for defaultInstance, &static AspirePirPirPreprocessDbArgs._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirParameters@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbArgs()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbArgs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbArgs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbArgs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbArgs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2)
{
  return specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(a1, a2, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static AspirePirPirPreprocessDbArgs.== infix(_:_:)) & 1;
}

unint64_t static AspirePirPirPreprocessDbCommand.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspirePirPirPreprocessDbCommand._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand._protobuf_nameMap, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
    else if (result == 1)
    {
      closure #1 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Keyword?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.Index?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(v0);
  else
    closure #1 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(v0);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AspirePirPirPreprocessDbCommand(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  __break(1u);
  return result;
}

Swift::Int AspirePirPirPreprocessDbCommand.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirPirPreprocessDbCommand, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbCommand@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbCommand.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbCommand()
{
  return AspirePirPirPreprocessDbCommand.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbCommand()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbCommand@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbCommand()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbCommand()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName(int a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x7865646E492ELL;
  v1._object = (void *)0xE600000000000000;
  one-time initialization function for protoMessageName(a1, v1, static AspirePirPirPreprocessDbCommand.Index.protoMessageName, &static AspirePirPirPreprocessDbCommand.Index.protoMessageName[1]);
}

{
  Swift::String v1;

  v1._countAndFlagsBits = 0x64726F7779654B2ELL;
  v1._object = (void *)0xE800000000000000;
  one-time initialization function for protoMessageName(a1, v1, static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName, &static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName[1]);
}

uint64_t static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter()
{
  return static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter(&one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Index.protoMessageName);
}

uint64_t static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Index.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspirePirPirPreprocessDbCommand.Index.traverse<A>(visitor:)()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AspirePirPirPreprocessDbCommand.Index.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Index, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbCommand.Index@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(a1, a2, &one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Index.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbCommand.Index()
{
  return AspirePirPirPreprocessDbCommand.Index.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbCommand.Index()
{
  return AspirePirPirPreprocessDbCommand.Index.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbCommand.Index()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbCommand.Index@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbCommand.Index()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbCommand.Index()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName(int a1, Swift::String a2, _QWORD *a3, _QWORD *a4)
{
  String.append(_:)(a2);
  *a3 = 0xD000000000000021;
  *a4 = 0x8000000237D63C00;
}

uint64_t static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName.getter()
{
  return static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter(&one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName);
}

uint64_t static AspirePirPirPreprocessDbCommand.Index.protoMessageName.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap, a1);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3)
    {
      closure #3 in AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)();
    }
    else if (result == 2 || result == 1)
    {
      type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t closure #3 in AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  type metadata accessor for AspirePirCuckooTableConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #2 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(v3);
    closure #3 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirCuckooTableConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirCuckooTableConfig);
}

Swift::Int AspirePirPirPreprocessDbCommand.Keyword.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, &lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t protocol witness for Message.init() in conformance AspirePirPirPreprocessDbCommand.Keyword@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = (_QWORD *)(a2 + a1[5]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a2 + v4);
  *v6 = 0;
  v6[1] = 0;
  v7 = a2 + a1[7];
  v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(a1, a2, &one-time initialization token for protoMessageName, static AspirePirPirPreprocessDbCommand.Keyword.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AspirePirPirPreprocessDbCommand.Index(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspirePirPirPreprocessDbCommand.Keyword()
{
  return AspirePirPirPreprocessDbCommand.Keyword.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspirePirPirPreprocessDbCommand.Keyword.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspirePirPirPreprocessDbCommand.Keyword()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspirePirPirPreprocessDbCommand.Keyword@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspirePirPirPreprocessDbCommand.Keyword()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirPreprocessDbCommand.Keyword()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
  return Message.hash(into:)();
}

uint64_t specialized static AspirePirPirPreprocessDbArgs.OneOf_Sharding.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)a1, v3, 0);
      v8 = v5;
      v9 = v6;
      v10 = 0;
      goto LABEL_7;
    }
LABEL_15:
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, v7);
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v3, v4);
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, v7);
    v11 = 0;
    return v11 & 1;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)a1, v3, 1);
      v8 = v5;
      v9 = v6;
      v10 = 1;
LABEL_7:
      outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v8, v9, v10);
      v11 = (_DWORD)v2 == (_DWORD)v5;
      return v11 & 1;
    }
    goto LABEL_15;
  }
  if (v7 != 2)
  {
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  if (v2 == v5 && v3 == v6)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, 2);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v3, 2);
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, v3, 2);
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v5, v6, 2);
  return v11 & 1;
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t type metadata accessor for AspirePirPirPreprocessDbCommand.Index(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t specialized static AspirePirSerializedKeywordDbRow.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_12;
  specialized static Data.== infix(_:_:)(a1[2], a1[3]);
  if ((v12 & 1) == 0)
    goto LABEL_12;
  v13 = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  v14 = *(int *)(v13 + 28);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = *(uint64_t *)((char *)a1 + v14 + 8);
  v17 = (_QWORD *)(a2 + v14);
  v18 = v17[1];
  if (!v16)
  {
    if (!v18)
    {
LABEL_14:
      v22 = (char *)a1 + *(int *)(v13 + 24);
      v23 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v23(v10, v22, v4);
      v23(v8, (char *)(a2 + *(int *)(v13 + 24)), v4);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v8, v4);
      v24(v10, v4);
      return v20 & 1;
    }
LABEL_12:
    v20 = 0;
    return v20 & 1;
  }
  if (!v18)
    goto LABEL_12;
  if (*v15 == *v17 && v16 == v18)
    goto LABEL_14;
  v20 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_14;
  return v20 & 1;
}

uint64_t specialized static AspirePirSerializedKeywordDb.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v11 = type metadata accessor for AspirePirSerializedKeywordDb(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AspirePirEncryptedIndices.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0 && a1[1] == a2[1])
  {
    v11 = type metadata accessor for AspirePirEncryptedIndices(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.Index.== infix(_:_:)(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_DWORD *)a2 && a1[1] == *((_DWORD *)a2 + 1))
  {
    v11 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AspirePirCuckooTableConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (*(double *)a1 == *(double *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41))
  {
    v13 = type metadata accessor for AspirePirCuckooTableConfig(0);
    v14 = a1 + *(int *)(v13 + 44);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 44), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.Keyword.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v46 - v7;
  v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirCuckooTableConfig?, AspirePirCuckooTableConfig?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v51 = (uint64_t)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v46 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v46 - v20;
  v22 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  v23 = v22[5];
  v52 = a1;
  v53 = a2;
  v24 = (_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a1 + v23 + 8);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  if (!v25)
  {
    v46 = v4;
    if (v27)
      goto LABEL_23;
    goto LABEL_8;
  }
  if (!v27)
    goto LABEL_23;
  v46 = v4;
  if (*v24 == *v26 && v25 == v27 || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_8:
    v29 = v22[6];
    v30 = (_QWORD *)(v52 + v29);
    v31 = *(_QWORD *)(v52 + v29 + 8);
    v32 = (_QWORD *)(v53 + v29);
    v33 = v32[1];
    if (v31)
    {
      if (!v33)
        goto LABEL_23;
      if (*v30 != *v32 || v31 != v33)
      {
        v28 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v28 & 1;
      }
    }
    else if (v33)
    {
      goto LABEL_23;
    }
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v52 + v22[7], (uint64_t)v21, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v53 + v22[7], (uint64_t)v19, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    v34 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v34, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v35((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      if (v35(v34, 1, v8) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
LABEL_22:
        v39 = v50;
        v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
        v41 = v48;
        v42 = v46;
        v40(v48, v52, v46);
        v43 = v49;
        v40(v49, v53, v42);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        v44 = *(void (**)(char *, uint64_t))(v39 + 8);
        v44(v43, v42);
        v44(v41, v42);
        return v28 & 1;
      }
      goto LABEL_20;
    }
    v36 = v51;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, v51, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    if (v35(v34, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspirePirCuckooTableConfig);
LABEL_20:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspirePirCuckooTableConfig?, AspirePirCuckooTableConfig?));
      goto LABEL_23;
    }
    v37 = v47;
    outlined init with take of SecretKey(v34, v47, type metadata accessor for AspirePirCuckooTableConfig);
    v38 = specialized static AspirePirCuckooTableConfig.== infix(_:_:)(v36, v37);
    outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AspirePirCuckooTableConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspirePirCuckooTableConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    if ((v38 & 1) != 0)
      goto LABEL_22;
LABEL_23:
    v28 = 0;
  }
  return v28 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.OneOf_Command.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v3 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_DWORD *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (_DWORD *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command, AspirePirPirPreprocessDbCommand.OneOf_Command));
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v18, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  outlined init with copy of SecretKey(v25, v19, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of SecretKey((uint64_t)v18, (uint64_t)v14, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v19, (uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      v20 = specialized static AspirePirPirPreprocessDbCommand.Keyword.== infix(_:_:)((uint64_t)v14, (uint64_t)v8);
      outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      outlined destroy of AspireApiPECConfig((uint64_t)v14, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      return v20 & 1;
    }
    v21 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword;
    v22 = (uint64_t)v14;
    goto LABEL_10;
  }
  outlined init with copy of SecretKey((uint64_t)v18, (uint64_t)v12, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21 = type metadata accessor for AspirePirPirPreprocessDbCommand.Index;
    v22 = (uint64_t)v12;
LABEL_10:
    outlined destroy of AspireApiPECConfig(v22, v21);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command, AspirePirPirPreprocessDbCommand.OneOf_Command));
LABEL_13:
    v20 = 0;
    return v20 & 1;
  }
  outlined init with take of SecretKey(v19, (uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  if (*v12 != *v5
    || v12[1] != v5[1]
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
    outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_13;
  }
  outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
  outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  v20 = 1;
  return v20 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbCommand.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command?, AspirePirPirPreprocessDbCommand.OneOf_Command?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v39 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of SecretKey(v22, v36, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      v25 = specialized static AspirePirPirPreprocessDbCommand.OneOf_Command.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AspirePirPirPreprocessDbCommand.OneOf_Command?, AspirePirPirPreprocessDbCommand.OneOf_Command?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
LABEL_8:
  v26 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AspirePirPirPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = *(int *)(a3(0) + 20);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static AspirePirKeywordPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    v12 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v13 = a1 + *(int *)(v12 + 24);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, a2 + *(int *)(v12 + 24), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static AspirePirBatchPirParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16)))
  {
    v11 = type metadata accessor for AspirePirBatchPirParameters(0);
    v12 = a1 + *(int *)(v11 + 28);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspirePirPirAlgorithm()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspirePirPirAlgorithm] and conformance [A], &demangling cache variable for type metadata for [AspirePirPirAlgorithm]);
}

unint64_t lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirKeyCompressionStrategy, &type metadata for AspirePirKeyCompressionStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirKeyCompressionStrategy, &type metadata for AspirePirKeyCompressionStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirKeyCompressionStrategy, &type metadata for AspirePirKeyCompressionStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy;
  if (!lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirKeyCompressionStrategy, &type metadata for AspirePirKeyCompressionStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspirePirKeyCompressionStrategy()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspirePirKeyCompressionStrategy] and conformance [A], &demangling cache variable for type metadata for [AspirePirKeyCompressionStrategy]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
}

uint64_t base witness table accessor for Message in AspirePirPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
}

uint64_t base witness table accessor for Hashable in AspirePirPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
}

uint64_t base witness table accessor for Equatable in AspirePirPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, type metadata accessor for AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirCuckooTableConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for Message in AspirePirCuckooTableConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for Hashable in AspirePirCuckooTableConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for Equatable in AspirePirCuckooTableConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirCuckooTableConfig and conformance AspirePirCuckooTableConfig, type metadata accessor for AspirePirCuckooTableConfig, (uint64_t)&protocol conformance descriptor for AspirePirCuckooTableConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirBatchPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for Message in AspirePirBatchPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for Hashable in AspirePirBatchPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for Equatable in AspirePirBatchPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirBatchPirParameters and conformance AspirePirBatchPirParameters, type metadata accessor for AspirePirBatchPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirBatchPirParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirKeywordPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for Message in AspirePirKeywordPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for Hashable in AspirePirKeywordPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for Equatable in AspirePirKeywordPirParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirEncryptedIndices()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for Message in AspirePirEncryptedIndices()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for Hashable in AspirePirEncryptedIndices()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for Equatable in AspirePirEncryptedIndices()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirSerializedKeywordDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for Message in AspirePirSerializedKeywordDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for Hashable in AspirePirSerializedKeywordDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for Equatable in AspirePirSerializedKeywordDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDbRow and conformance AspirePirSerializedKeywordDbRow, type metadata accessor for AspirePirSerializedKeywordDbRow, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDbRow);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirSerializedKeywordDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for Message in AspirePirSerializedKeywordDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for Hashable in AspirePirSerializedKeywordDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for Equatable in AspirePirSerializedKeywordDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirSerializedKeywordDb and conformance AspirePirSerializedKeywordDb, type metadata accessor for AspirePirSerializedKeywordDb, (uint64_t)&protocol conformance descriptor for AspirePirSerializedKeywordDb);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbArgs and conformance AspirePirPirPreprocessDbArgs, type metadata accessor for AspirePirPirPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbArgs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbCommand()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbCommand()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbCommand()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbCommand()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand and conformance AspirePirPirPreprocessDbCommand, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbCommand.Index()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbCommand.Index()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbCommand.Index()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbCommand.Index()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Index and conformance AspirePirPirPreprocessDbCommand.Index, type metadata accessor for AspirePirPirPreprocessDbCommand.Index, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Index);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspirePirPirPreprocessDbCommand.Keyword()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for Message in AspirePirPirPreprocessDbCommand.Keyword()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for Hashable in AspirePirPirPreprocessDbCommand.Keyword()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t base witness table accessor for Equatable in AspirePirPirPreprocessDbCommand.Keyword()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirPirPreprocessDbCommand.Keyword and conformance AspirePirPirPreprocessDbCommand.Keyword, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword, (uint64_t)&protocol conformance descriptor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t sub_237CF5C98@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.encryptionParameters.getter(a1);
}

uint64_t sub_237CF5CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspireHeEncryptionParameters, (uint64_t (*)(char *))AspirePirPirParameters.encryptionParameters.setter);
}

uint64_t sub_237CF5CDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm_0(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries, a2);
}

uint64_t sub_237CF5CE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

uint64_t sub_237CF5D04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm_0(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize, a2);
}

uint64_t keypath_get_1Tm_0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_237CF5D78(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

uint64_t sub_237CF5DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t (*)(char *))AspirePirPirParameters.keywordPirParams.setter);
}

uint64_t sub_237CF5DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm, a2);
}

uint64_t sub_237CF5DE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
}

uint64_t sub_237CF5DFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm_0(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize, a2);
}

uint64_t sub_237CF5E08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

uint64_t sub_237CF5E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t (*)(char *))AspirePirPirParameters.evaluationKeyConfig.setter);
}

uint64_t sub_237CF5E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy, a2);
}

uint64_t sub_237CF5E68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.algorithm : AspirePirPirParameters(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
}

uint64_t sub_237CF5E84@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  result = swift_beginAccess();
  *a2 = *v3 & 1;
  return result;
}

uint64_t sub_237CF5EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspirePirBatchPirParameters, (uint64_t (*)(char *))AspirePirPirParameters.batchPirParams.setter);
}

uint64_t sub_237CF5F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 80);
  *(_BYTE *)(a2 + 16) = v6;
  return outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v4, v5, v6);
}

uint64_t sub_237CF5F84(unsigned int *a1)
{
  return AspirePirPirPreprocessDbArgs.numShards.setter(*a1);
}

uint64_t sub_237CF5FAC(unsigned int *a1)
{
  return AspirePirPirPreprocessDbArgs.numEntriesPerShard.setter(*a1);
}

uint64_t sub_237CF5FD4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.shardID.setter(v1, v2);
}

uint64_t sub_237CF6040@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 178) & 1;
  return result;
}

uint64_t sub_237CF609C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  v5 = *(_DWORD *)(v3 + 180);
  if (*(_BYTE *)(v3 + 184))
    v5 = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_237CF6100@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 185) & 1;
  return result;
}

uint64_t sub_237CF615C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 186) & 1;
  return result;
}

uint64_t sub_237CF61BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(a1, a2, a3, a4, type metadata accessor for AspirePirPirPreprocessDbCommand, (uint64_t (*)(char *))AspirePirPirPreprocessDbArgs.command.setter);
}

uint64_t sub_237CF61E0@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirPreprocessDbCommand.keyword.getter(a1);
}

uint64_t sub_237CF6200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirPreprocessDbCommand.keyword : AspirePirPirPreprocessDbCommand(a1, a2, a3, a4, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t sub_237CF6224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspirePirPirPreprocessDbCommand.keyword : AspirePirPirPreprocessDbCommand(a1, a2, a3, a4, type metadata accessor for AspirePirPirPreprocessDbCommand.Index);
}

ValueMetadata *type metadata accessor for AspirePirPirAlgorithm()
{
  return &type metadata for AspirePirPirAlgorithm;
}

ValueMetadata *type metadata accessor for AspirePirKeyCompressionStrategy()
{
  return &type metadata for AspirePirKeyCompressionStrategy;
}

uint64_t getEnumTagSinglePayload for AspirePirPirParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspirePirPirParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for AspirePirCuckooTableConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    v6 = *(int *)(a3 + 44);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 44);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v5 = *(int *)(a3 + 44);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v5 = *(int *)(a3 + 44);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AspirePirCuckooTableConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 44);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirCuckooTableConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF657C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirCuckooTableConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF6604(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 40) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirCuckooTableConfig()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspirePirBatchPirParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF670C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirBatchPirParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF6794(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AspirePirKeywordPirParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirKeywordPirParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF6A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirKeywordPirParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF6AC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirKeywordPirParameters()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirEncryptedIndices(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AspirePirEncryptedIndices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AspirePirEncryptedIndices(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AspirePirEncryptedIndices(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for AspirePirEncryptedIndices(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirEncryptedIndices()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF6D9C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirEncryptedIndices()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237CF6E24(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspirePirEncryptedIndices()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = *(int *)(a3 + 28);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AspirePirSerializedKeywordDbRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 28);
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for AspirePirSerializedKeywordDbRow(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *assignWithTake for AspirePirSerializedKeywordDbRow(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirSerializedKeywordDbRow()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF7284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AspirePirSerializedKeywordDbRow()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF7320(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for AspirePirSerializedKeywordDbRow()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspirePirSerializedKeywordDb()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF7428(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirSerializedKeywordDb()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237CF74B0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AspirePirPirParameters(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbArgs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbArgs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for AspirePirPirParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1)
{
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v4, v5, v6);
  return a1;
}

uint64_t destructiveInjectEnumTag for AspirePirPirPreprocessDbArgs.OneOf_Sharding(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AspirePirPirPreprocessDbArgs.OneOf_Sharding()
{
  return &type metadata for AspirePirPirPreprocessDbArgs.OneOf_Sharding;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  unsigned int (*v28)(_OWORD *, uint64_t, uint64_t);
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(uint64_t *, uint64_t *);
  uint64_t v38;
  _OWORD *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        v11 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      }
      else
      {
        v15 = type metadata accessor for UnknownStorage();
        v37 = *(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v15 - 8) + 16);
        v38 = v15;
        v37(a1, a2);
        v16 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        v17 = v16[5];
        v18 = (uint64_t *)((char *)a1 + v17);
        v19 = (uint64_t *)((char *)a2 + v17);
        v20 = v19[1];
        *v18 = *v19;
        v18[1] = v20;
        v21 = v16[6];
        v22 = (uint64_t *)((char *)a1 + v21);
        v23 = (uint64_t *)((char *)a2 + v21);
        v24 = v23[1];
        *v22 = *v23;
        v22[1] = v24;
        v25 = v16[7];
        __dst = (_OWORD *)((char *)a1 + v25);
        v26 = (_OWORD *)((char *)a2 + v25);
        v27 = type metadata accessor for AspirePirCuckooTableConfig(0);
        v36 = *(_QWORD *)(v27 - 8);
        v28 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v28(v26, 1, v27))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          v30 = v26[1];
          *__dst = *v26;
          __dst[1] = v30;
          *((_QWORD *)__dst + 4) = *((_QWORD *)v26 + 4);
          *((_WORD *)__dst + 20) = *((_WORD *)v26 + 20);
          ((void (*)(char *, char *, uint64_t))v37)((char *)__dst + *(int *)(v27 + 44), (char *)v26 + *(int *)(v27 + 44), v38);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v27);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v31 = *(int *)(a3 + 20);
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v6 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    }
    else
    {
      v7 = type metadata accessor for UnknownStorage();
      v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
      v8(a1, v7);
      v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = a1 + *(int *)(v9 + 28);
      v11 = type metadata accessor for AspirePirCuckooTableConfig(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
        v8(v10 + *(int *)(v11 + 44), v7);
    }
  }
  v12 = a1 + *(int *)(a2 + 20);
  v13 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

_QWORD *initializeWithCopy for AspirePirPirPreprocessDbCommand(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  unsigned int (*v27)(_OWORD *, uint64_t, uint64_t);
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      v38 = a3;
      v13 = type metadata accessor for UnknownStorage();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v37 = v13;
      ((void (*)(_QWORD *, _QWORD *))v36)(a1, a2);
      v14 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      v15 = v14[5];
      v16 = (_QWORD *)((char *)a1 + v15);
      v17 = (_QWORD *)((char *)a2 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      v19 = v14[6];
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      v23 = v14[7];
      v24 = (_OWORD *)((char *)a1 + v23);
      v25 = (_OWORD *)((char *)a2 + v23);
      v26 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v35 = *(_QWORD *)(v26 - 8);
      v27 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v29 = v25[1];
        *v24 = *v25;
        v24[1] = v29;
        *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
        *((_WORD *)v24 + 20) = *((_WORD *)v25 + 20);
        v36((char *)v24 + *(int *)(v26 + 44), (char *)v25 + *(int *)(v26 + 44), v37);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v24, 0, 1, v26);
      }
      a3 = v38;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v30 = *(int *)(a3 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

_DWORD *assignWithCopy for AspirePirPirPreprocessDbCommand(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_DWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int (*v32)(_QWORD *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(_QWORD *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v11 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      }
      else
      {
        v59 = a3;
        v20 = type metadata accessor for UnknownStorage();
        v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
        v57 = v20;
        ((void (*)(_DWORD *, _DWORD *))v55)(a1, a2);
        v21 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        v22 = v21[5];
        v23 = (_QWORD *)((char *)a1 + v22);
        v24 = (_QWORD *)((char *)a2 + v22);
        *v23 = *v24;
        v23[1] = v24[1];
        v25 = v21[6];
        v26 = (_QWORD *)((char *)a1 + v25);
        v27 = (_QWORD *)((char *)a2 + v25);
        *v26 = *v27;
        v26[1] = v27[1];
        v28 = v21[7];
        v29 = (_QWORD *)((char *)a1 + v28);
        v30 = (_QWORD *)((char *)a2 + v28);
        v31 = type metadata accessor for AspirePirCuckooTableConfig(0);
        v54 = *(_QWORD *)(v31 - 8);
        v32 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          *v29 = *v30;
          v29[1] = v30[1];
          v29[2] = v30[2];
          v29[3] = v30[3];
          v29[4] = v30[4];
          *((_BYTE *)v29 + 40) = *((_BYTE *)v30 + 40);
          *((_BYTE *)v29 + 41) = *((_BYTE *)v30 + 41);
          v55((char *)v29 + *(int *)(v31 + 44), (char *)v30 + *(int *)(v31 + 44), v57);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v29, 0, 1, v31);
        }
        a3 = v59;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_7:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v16 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v60 = a3;
      v34 = type metadata accessor for UnknownStorage();
      v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v58 = v34;
      ((void (*)(_DWORD *, _DWORD *))v56)(a1, a2);
      v35 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      v36 = v35[5];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      *v37 = *v38;
      v37[1] = v38[1];
      v39 = v35[6];
      v40 = (_QWORD *)((char *)a1 + v39);
      v41 = (_QWORD *)((char *)a2 + v39);
      *v40 = *v41;
      v40[1] = v41[1];
      v42 = v35[7];
      v43 = (_QWORD *)((char *)a1 + v42);
      v44 = (_QWORD *)((char *)a2 + v42);
      v45 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v46 = *(_QWORD *)(v45 - 8);
      v47 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v46 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47(v44, 1, v45))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        *v43 = *v44;
        v43[1] = v44[1];
        v43[2] = v44[2];
        v43[3] = v44[3];
        v43[4] = v44[4];
        *((_BYTE *)v43 + 40) = *((_BYTE *)v44 + 40);
        *((_BYTE *)v43 + 41) = *((_BYTE *)v44 + 41);
        v56((char *)v43 + *(int *)(v45 + 44), (char *)v44 + *(int *)(v45 + 44), v58);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      swift_storeEnumTagMultiPayload();
      a3 = v60;
    }
  }
LABEL_18:
  v49 = *(int *)(a3 + 20);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  return a1;
}

_QWORD *initializeWithTake for AspirePirPirPreprocessDbCommand(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v27)(_OWORD *, _OWORD *, uint64_t);

  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else
    {
      v13 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v27(a1, a2, v13);
      v14 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      *(_OWORD *)((char *)a1 + v14[5]) = *(_OWORD *)((char *)a2 + v14[5]);
      *(_OWORD *)((char *)a1 + v14[6]) = *(_OWORD *)((char *)a2 + v14[6]);
      v15 = v14[7];
      v16 = (_OWORD *)((char *)a1 + v15);
      v17 = (_OWORD *)((char *)a2 + v15);
      v18 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = v17[1];
        *v16 = *v17;
        v16[1] = v21;
        *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
        *((_WORD *)v16 + 20) = *((_WORD *)v17 + 20);
        v27((_OWORD *)((char *)v16 + *(int *)(v18 + 44)), (_OWORD *)((char *)v17 + *(int *)(v18 + 44)), v13);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v22 = *(int *)(a3 + 20);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  return a1;
}

_QWORD *assignWithTake for AspirePirPirPreprocessDbCommand(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_OWORD *, _OWORD *, uint64_t);
  int *v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v43;
  void (*v44)(_OWORD *, _OWORD *, uint64_t);

  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1 = *a2;
        v11 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      }
      else
      {
        v20 = type metadata accessor for UnknownStorage();
        v44 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
        v44(a1, a2, v20);
        v21 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
        *(_OWORD *)((char *)a1 + v21[5]) = *(_OWORD *)((char *)a2 + v21[5]);
        *(_OWORD *)((char *)a1 + v21[6]) = *(_OWORD *)((char *)a2 + v21[6]);
        v22 = v21[7];
        v23 = (_OWORD *)((char *)a1 + v22);
        v24 = (_OWORD *)((char *)a2 + v22);
        v25 = type metadata accessor for AspirePirCuckooTableConfig(0);
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          v37 = v24[1];
          *v23 = *v24;
          v23[1] = v37;
          *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
          *((_WORD *)v23 + 20) = *((_WORD *)v24 + 20);
          v44((_OWORD *)((char *)v23 + *(int *)(v25 + 44)), (_OWORD *)((char *)v24 + *(int *)(v25 + 44)), v20);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v16 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
      v29(a1, a2, v28);
      v30 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      *(_OWORD *)((char *)a1 + v30[5]) = *(_OWORD *)((char *)a2 + v30[5]);
      *(_OWORD *)((char *)a1 + v30[6]) = *(_OWORD *)((char *)a2 + v30[6]);
      v31 = v30[7];
      v32 = (_OWORD *)((char *)a1 + v31);
      v33 = (_OWORD *)((char *)a2 + v31);
      v34 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v43 = v33[1];
        *v32 = *v33;
        v32[1] = v43;
        *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
        *((_WORD *)v32 + 20) = *((_WORD *)v33 + 20);
        v29((_OWORD *)((char *)v32 + *(int *)(v34 + 44)), (_OWORD *)((char *)v33 + *(int *)(v34 + 44)), v28);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  v38 = *(int *)(a3 + 20);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbCommand()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF8AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbCommand()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF8B4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspirePirPirPreprocessDbCommand()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(_OWORD *, uint64_t, uint64_t);
  uint64_t v27;
  __int128 v28;
  void (*v30)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      v11 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v30(a1, a2, v11);
      v12 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      v13 = v12[5];
      v14 = (uint64_t *)((char *)a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = v12[6];
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v21 = v12[7];
      v22 = (_OWORD *)((char *)a1 + v21);
      v23 = (_OWORD *)((char *)a2 + v21);
      v24 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26(v23, 1, v24))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v28 = v23[1];
        *v22 = *v23;
        v22[1] = v28;
        *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
        *((_WORD *)v22 + 20) = *((_WORD *)v23 + 20);
        v30((uint64_t *)((char *)v22 + *(int *)(v24 + 44)), (uint64_t *)((char *)v23 + *(int *)(v24 + 44)), v11);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand.OneOf_Command(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
    v3 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  }
  else
  {
    v5 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v9(a1, v5);
    v6 = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = a1 + *(int *)(v6 + 28);
    v8 = type metadata accessor for AspirePirCuckooTableConfig(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7 + *(int *)(v8 + 44), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for AspirePirPirPreprocessDbCommand.OneOf_Command(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(_OWORD *, uint64_t, uint64_t);
  uint64_t v24;
  __int128 v25;
  void (*v27)(_OWORD *, _OWORD *, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v27 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v27(a1, a2, v8);
    v9 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    v10 = v9[5];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = v9[6];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v9[7];
    v19 = (_OWORD *)((char *)a1 + v18);
    v20 = (_OWORD *)((char *)a2 + v18);
    v21 = type metadata accessor for AspirePirCuckooTableConfig(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = v20[1];
      *v19 = *v20;
      v19[1] = v25;
      *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
      *((_WORD *)v19 + 20) = *((_WORD *)v20 + 20);
      v27((_OWORD *)((char *)v19 + *(int *)(v21 + 44)), (_OWORD *)((char *)v20 + *(int *)(v21 + 44)), v8);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_DWORD *assignWithCopy for AspirePirPirPreprocessDbCommand.OneOf_Command(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v24)(_DWORD *, _DWORD *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v5 = (char *)a1 + v4;
      v6 = (char *)a2 + v4;
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      v8 = type metadata accessor for UnknownStorage();
      v24 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v24(a1, a2, v8);
      v9 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      v10 = v9[5];
      v11 = (_QWORD *)((char *)a1 + v10);
      v12 = (_QWORD *)((char *)a2 + v10);
      *v11 = *v12;
      v11[1] = v12[1];
      v13 = v9[6];
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      *v14 = *v15;
      v14[1] = v15[1];
      v16 = v9[7];
      v17 = (_QWORD *)((char *)a1 + v16);
      v18 = (_QWORD *)((char *)a2 + v16);
      v19 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        *v17 = *v18;
        v17[1] = v18[1];
        v17[2] = v18[2];
        v17[3] = v18[3];
        v17[4] = v18[4];
        *((_BYTE *)v17 + 40) = *((_BYTE *)v18 + 40);
        *((_BYTE *)v17 + 41) = *((_BYTE *)v18 + 41);
        v24((_QWORD *)((char *)v17 + *(int *)(v19 + 44)), (_QWORD *)((char *)v18 + *(int *)(v19 + 44)), v8);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for AspirePirPirPreprocessDbCommand.OneOf_Command(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *, _OWORD *, uint64_t);
  int *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
    v9(a1, a2, v8);
    v10 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    *(_OWORD *)((char *)a1 + v10[5]) = *(_OWORD *)((char *)a2 + v10[5]);
    *(_OWORD *)((char *)a1 + v10[6]) = *(_OWORD *)((char *)a2 + v10[6]);
    v11 = v10[7];
    v12 = (_OWORD *)((char *)a1 + v11);
    v13 = (_OWORD *)((char *)a2 + v11);
    v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = v13[1];
      *v12 = *v13;
      v12[1] = v17;
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      *((_WORD *)v12 + 20) = *((_WORD *)v13 + 20);
      v9((_OWORD *)((char *)v12 + *(int *)(v14 + 44)), (_OWORD *)((char *)v13 + *(int *)(v14 + 44)), v8);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for AspirePirPirPreprocessDbCommand.OneOf_Command(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *, _OWORD *, uint64_t);
  int *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbCommand.Index(0) + 24);
      v5 = (char *)a1 + v4;
      v6 = (char *)a2 + v4;
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      v8 = type metadata accessor for UnknownStorage();
      v9 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
      v9(a1, a2, v8);
      v10 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
      *(_OWORD *)((char *)a1 + v10[5]) = *(_OWORD *)((char *)a2 + v10[5]);
      *(_OWORD *)((char *)a1 + v10[6]) = *(_OWORD *)((char *)a2 + v10[6]);
      v11 = v10[7];
      v12 = (_OWORD *)((char *)a1 + v11);
      v13 = (_OWORD *)((char *)a2 + v11);
      v14 = type metadata accessor for AspirePirCuckooTableConfig(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v17 = v13[1];
        *v12 = *v13;
        v12[1] = v17;
        *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
        *((_WORD *)v12 + 20) = *((_WORD *)v13 + 20);
        v9((_OWORD *)((char *)v12 + *(int *)(v14 + 44)), (_OWORD *)((char *)v13 + *(int *)(v14 + 44)), v8);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspirePirPirPreprocessDbCommand.OneOf_Command()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AspirePirPirPreprocessDbCommand.Index(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.Index(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AspirePirKeywordPirParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for AspirePirPirPreprocessDbCommand.Index(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for AspirePirPirPreprocessDbCommand.Index(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for AspirePirPirPreprocessDbCommand.Index(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AspirePirPirPreprocessDbCommand.Index(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Index()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF9918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Index()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CF9964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for AspirePirPirPreprocessDbCommand.Index()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspirePirPirPreprocessDbCommand.Keyword(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_OWORD *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (uint64_t *)((char *)a1 + v10);
    v15 = (uint64_t *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[7];
    v18 = (_OWORD *)((char *)a1 + v17);
    v19 = (_OWORD *)((char *)a2 + v17);
    v20 = type metadata accessor for AspirePirCuckooTableConfig(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v25 = v19[1];
      *v18 = *v19;
      v18[1] = v25;
      *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
      *((_WORD *)v18 + 20) = *((_WORD *)v19 + 20);
      v8((uint64_t *)((char *)v18 + *(int *)(v20 + 44)), (uint64_t *)((char *)v19 + *(int *)(v20 + 44)), v7);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for AspirePirCuckooTableConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5 + *(int *)(v6 + 44), v4);
  return result;
}

char *initializeWithCopy for AspirePirPirPreprocessDbCommand.Keyword(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  __int128 v23;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = &a1[v9];
  v14 = &a2[v9];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v21(v18, 1, v19))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v23;
    *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    *((_WORD *)v17 + 20) = *((_WORD *)v18 + 20);
    v7(&v17[*(int *)(v19 + 44)], &v18[*(int *)(v19 + 44)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
      *(_BYTE *)(v16 + 40) = *(_BYTE *)(v17 + 40);
      *(_BYTE *)(v16 + 41) = *(_BYTE *)(v17 + 41);
      v8(v16 + *(int *)(v18 + 44), v17 + *(int *)(v18 + 44), v6);
      return a1;
    }
    outlined destroy of AspireApiPECConfig(v16, type metadata accessor for AspirePirCuckooTableConfig);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy((void *)v16, (const void *)v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  *(_BYTE *)(v16 + 40) = *(_BYTE *)(v17 + 40);
  *(_BYTE *)(v16 + 41) = *(_BYTE *)(v17 + 41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v16 + *(int *)(v18 + 44), v17 + *(int *)(v18 + 44), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

char *initializeWithTake for AspirePirPirPreprocessDbCommand.Keyword(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v15;
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    *((_WORD *)v10 + 20) = *((_WORD *)v11 + 20);
    v7(&v10[*(int *)(v12 + 44)], &v11[*(int *)(v12 + 44)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithTake for AspirePirPirPreprocessDbCommand.Keyword(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for AspirePirCuckooTableConfig(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
      *(_BYTE *)(v20 + 40) = *(_BYTE *)(v21 + 40);
      *(_BYTE *)(v20 + 41) = *(_BYTE *)(v21 + 41);
      v8(v20 + *(int *)(v22 + 44), v21 + *(int *)(v22 + 44), v6);
      return a1;
    }
    outlined destroy of AspireApiPECConfig(v20, type metadata accessor for AspirePirCuckooTableConfig);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    memcpy((void *)v20, (const void *)v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  v27 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v27;
  *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
  *(_WORD *)(v20 + 40) = *(_WORD *)(v21 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v20 + *(int *)(v22 + 44), v21 + *(int *)(v22 + 44), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Keyword()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CFA200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for AspirePirPirPreprocessDbCommand.Keyword()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CFA2C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirCuckooTableConfig?);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspirePirPirPreprocessDbCommand.Keyword()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirCuckooTableConfig?, (void (*)(uint64_t))type metadata accessor for AspirePirCuckooTableConfig);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t ObjC metadata update function for AspirePirPirParameters._StorageClass()
{
  return type metadata accessor for AspirePirPirParameters._StorageClass(0);
}

void type metadata completion function for AspirePirPirParameters._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirKeywordPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEvaluationKeyConfig?, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
      if (v2 <= 0x3F)
      {
        type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirBatchPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirBatchPirParameters);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t ObjC metadata update function for AspirePirPirPreprocessDbArgs._StorageClass()
{
  return type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
}

void type metadata completion function for AspirePirPirPreprocessDbArgs._StorageClass()
{
  unint64_t v0;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirPirPreprocessDbCommand?, (void (*)(uint64_t))type metadata accessor for AspirePirPirPreprocessDbCommand);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeHeScheme, &type metadata for AspireHeHeScheme);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeHeScheme, &type metadata for AspireHeHeScheme);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeHeScheme, &type metadata for AspireHeHeScheme);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme;
  if (!lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeHeScheme, &type metadata for AspireHeHeScheme);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeHeScheme and conformance AspireHeHeScheme);
  }
  return result;
}

uint64_t CMLXPCServer.requestsManager.getter()
{
  return swift_retain();
}

id CMLXPCServer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t CMLXPCServer.init()()
{
  uint64_t ObjectType;
  _QWORD *v1;
  uint64_t v2;

  ObjectType = swift_getObjectType();
  type metadata accessor for RequestsManager();
  swift_allocObject();
  v1 = RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(0, 0, 0, 0, 0, (uint8_t *)closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
  v2 = (*(uint64_t (**)(_QWORD *))(ObjectType + 88))(v1);
  swift_deallocPartialClassInstance();
  return v2;
}

id CMLXPCServer.__allocating_init(requestsManager:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8CipherML12CMLXPCServer_requestsManager] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id CMLXPCServer.init(requestsManager:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8CipherML12CMLXPCServer_requestsManager] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CMLXPCServer();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for CMLXPCServer()
{
  return objc_opt_self();
}

Swift::Void __swiftcall CMLXPCServer.start()()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;

  v1 = objc_allocWithZone(MEMORY[0x24BDD1998]);
  v2 = (void *)MEMORY[0x23B821F68](0xD000000000000013, 0x8000000237D61440);
  v7 = objc_msgSend(v1, sel_initWithMachServiceName_, v2);

  objc_msgSend(v7, sel_setDelegate_, v0);
  objc_msgSend(v7, sel_resume);
  if (one-time initialization token for framework != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.framework);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_237BC8000, v4, v5, "XPC Server has started", v6, 2u);
    MEMORY[0x23B822DA8](v6, -1, -1);
  }

}

Swift::Void __swiftcall CMLXPCServer.registerScheduledTasks()()
{
  specialized ScheduledActivity.register()();
  specialized ScheduledActivity.register()();
  specialized ScheduledActivity.register()();
}

Swift::Bool __swiftcall CMLXPCServer.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized CMLXPCServer.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

id CMLXPCServer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CMLXPCServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized CMLXPCServer.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char v14;
  _OWORD v15[2];
  _BYTE v16[24];
  uint64_t v17;

  v3 = (void *)MEMORY[0x23B821F68](0xD000000000000021, 0x8000000237D63530);
  v4 = objc_msgSend(a1, sel_valueForEntitlement_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v16);
  if (v17)
  {
    if ((swift_dynamicCast() & 1) != 0 && v14 == 1)
    {
      v5 = objc_msgSend((id)objc_opt_self(), sel_interfaceDescription);
      objc_msgSend(a1, sel_setExportedInterface_, v5);

      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8CipherML12CMLXPCServer_requestsManager);
      type metadata accessor for XPCHandler();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(v7 + 24) = a1;
      swift_retain();
      v8 = a1;
      objc_msgSend(v8, sel_setExportedObject_, v7);
      swift_release();
      objc_msgSend(v8, sel_resume);
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16);
  }
  if (one-time initialization token for framework != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.framework);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_237BC8000, v11, v12, "Client does not have specified entitlement", v13, 2u);
    MEMORY[0x23B822DA8](v13, -1, -1);
  }

  return 0;
}

uint64_t method lookup function for CMLXPCServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CMLXPCServer.__allocating_init(requestsManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of CMLXPCServer.start()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CMLXPCServer.registerScheduledTasks()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CMLXPCServer.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AspireHeEvaluationKeyConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  v2 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t type metadata accessor for AspireHeEvaluationKeyConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeEvaluationKeyConfig);
}

uint64_t type metadata accessor for AspireHeEncryptionParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeEncryptionParameters);
}

uint64_t AspireHeEncryptionParameters.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  type metadata accessor for AspireHeEncryptionParameters(0);
  return UnknownStorage.init()();
}

uint64_t AspireHeSerializedEvaluationKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 24);
  v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AspireHeSerializedEvaluationKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedEvaluationKey);
}

uint64_t type metadata accessor for AspireHeSerializedGaloisKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedGaloisKey);
}

uint64_t type metadata accessor for AspireHeSerializedRelinKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedRelinKey);
}

uint64_t AspireHeEvaluationKeyConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t AspireHeSerializedKeySwitchKey.keySwitchKey.setter(uint64_t a1)
{
  return AspireHeSerializedKeySwitchKey.keySwitchKey.setter(a1, type metadata accessor for AspireHeSerializedKeySwitchKey, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?, type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t AspireHeSerializedRelinKey.relinKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v7 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedKeySwitchKey);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t AspireHeSerializedRelinKey.relinKey.setter(uint64_t a1)
{
  return AspireHeSerializedKeySwitchKey.keySwitchKey.setter(a1, type metadata accessor for AspireHeSerializedRelinKey, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t AspireHeSerializedEvaluationKey.galoisKey.setter(uint64_t a1)
{
  return AspireHeSerializedKeySwitchKey.keySwitchKey.setter(a1, type metadata accessor for AspireHeSerializedEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t AspireHeSerializedKeySwitchKey.keySwitchKey.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, a3);
  outlined init with take of SecretKey(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

uint64_t AspireHeSerializedEvaluationKey.relinKey.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireHeSerializedRelinKey);
  v4 = type metadata accessor for AspireHeSerializedRelinKey(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

unint64_t AspireHeSecurityLevel.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireHeSecurityLevel.rawValue.getter()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance AspireHeSecurityLevel@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AspireHeSecurityLevel()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AspireHeSecurityLevel@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AspireHeSecurityLevel(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSecurityLevel()
{
  lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSecurityLevel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

uint64_t static AspireHeSecurityLevel.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireHeSecurityLevel@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspireHeSecurityLevel.allCases, a1);
}

uint64_t AspireHeErrorStdDev.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireHeErrorStdDev.rawValue.getter()
{
  _BYTE *v0;

  if ((v0[8] & 1) != 0)
    return 0;
  else
    return *(_QWORD *)v0;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AspireHeErrorStdDev@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AspireHeErrorStdDev()
{
  _BYTE *v0;

  if ((v0[8] & 1) != 0)
    return 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AspireHeErrorStdDev@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result == 0;
  *(_QWORD *)a2 = *result;
  v3 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AspireHeErrorStdDev(_QWORD *a1@<X8>)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    *a1 = 0;
  else
    *a1 = *(_QWORD *)v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeErrorStdDev()
{
  lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeErrorStdDev(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if ((a1[1] & 1) != 0)
    v3 = 0;
  else
    v3 = *a1;
  if (*((_BYTE *)a2 + 8))
    v2 = 0;
  return v3 == v2;
}

uint64_t static AspireHeErrorStdDev.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireHeErrorStdDev@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspireHeErrorStdDev.allCases, a1);
}

void AspireHeHeScheme.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t AspireHeHeScheme.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireHeHeScheme.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeHeScheme()
{
  lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
  return Enum.hash(into:)();
}

uint64_t static AspireHeHeScheme.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireHeHeScheme@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspireHeHeScheme.allCases, a1);
}

uint64_t (*AspireHeSerializedDcrtPlaintext.poly.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedDcrtPlaintext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireHeSerializedDcrtPlaintext, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedDcrtPlaintext);
}

uint64_t (*AspireHeSerializedDcrtPlaintext.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedDcrtPlaintext(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedDcrtPlaintext.init()@<X0>(_OWORD *a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.init()((void (*)(_QWORD))type metadata accessor for AspireHeSerializedDcrtPlaintext, a1);
}

uint64_t (*AspireHeSerializedCiphertextVec.ciphertexts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertextVec.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireHeSerializedCiphertextVec, a1);
}

uint64_t AspireHeSerializedCiphertextVec.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t (*AspireHeSerializedCiphertextVec.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedCiphertextVec(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertextVec.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AspireHeSerializedCiphertextVec(0);
  return UnknownStorage.init()();
}

uint64_t AspireHeSerializedCiphertext.serializedCiphertextType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
}

uint64_t AspireHeSerializedCiphertext.serializedCiphertextType.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(a1, v1);
}

uint64_t (*AspireHeSerializedCiphertext.serializedCiphertextType.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertext.seeded.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
LABEL_5:
    *a1 = xmmword_237D54090;
    a1[1] = xmmword_237D54090;
    type metadata accessor for AspireHeSerializedSeededCiphertext(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t AspireHeSerializedCiphertext.seeded.setter(uint64_t a1)
{
  return AspireHeSerializedCiphertext.seeded.setter(a1, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t AspireHeSerializedSeededCiphertext.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_237D54090;
  a1[1] = xmmword_237D54090;
  type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  return UnknownStorage.init()();
}

void (*AspireHeSerializedCiphertext.seeded.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AspireHeSerializedSeededCiphertext);
      return AspireHeSerializedCiphertext.seeded.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  }
  *v7 = xmmword_237D54090;
  v7[1] = xmmword_237D54090;
  UnknownStorage.init()();
  return AspireHeSerializedCiphertext.seeded.modify;
}

void AspireHeSerializedCiphertext.seeded.modify(uint64_t **a1, char a2)
{
  AspireHeSerializedCiphertext.seeded.modify(a1, a2, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t AspireHeSerializedCiphertext.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspireHeSerializedFullCiphertext);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  }
  *(_OWORD *)a1 = xmmword_237D54090;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  type metadata accessor for AspireHeSerializedFullCiphertext(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AspireHeSerializedCiphertext.seeded : AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  outlined init with copy of SecretKey(a1, (uint64_t)&v13 - v9, a5);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined init with take of SecretKey((uint64_t)v10, a2, a5);
  v11 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
}

uint64_t AspireHeSerializedCiphertext.full.setter(uint64_t a1)
{
  return AspireHeSerializedCiphertext.seeded.setter(a1, type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t AspireHeSerializedCiphertext.seeded.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined init with take of SecretKey(a1, v2, a2);
  v5 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
}

uint64_t AspireHeSerializedFullCiphertext.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_237D54090;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  type metadata accessor for AspireHeSerializedFullCiphertext(0);
  return UnknownStorage.init()();
}

void (*AspireHeSerializedCiphertext.full.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
LABEL_6:
    *(_OWORD *)v7 = xmmword_237D54090;
    v7[2] = MEMORY[0x24BEE4AF8];
    v7[3] = 0;
    UnknownStorage.init()();
    return AspireHeSerializedCiphertext.full.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
  return AspireHeSerializedCiphertext.full.modify;
}

void AspireHeSerializedCiphertext.full.modify(uint64_t **a1, char a2)
{
  AspireHeSerializedCiphertext.seeded.modify(a1, a2, type metadata accessor for AspireHeSerializedFullCiphertext);
}

void AspireHeSerializedCiphertext.seeded.modify(uint64_t **a1, char a2, uint64_t (*a3)(_QWORD))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v4 = *a1;
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (void *)(*a1)[2];
  v8 = (void *)(*a1)[3];
  v10 = **a1;
  v9 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey((*a1)[3], (uint64_t)v7, a3);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with take of SecretKey((uint64_t)v7, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
    outlined destroy of AspireApiPECConfig((uint64_t)v8, a3);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with take of SecretKey((uint64_t)v8, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  free(v8);
  free(v7);
  free(v9);
  free(v4);
}

uint64_t AspireHeSerializedCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireHeSerializedCiphertext, a1);
}

uint64_t AspireHeSerializedCiphertext.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedCiphertext);
}

uint64_t (*AspireHeSerializedCiphertext.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedCiphertext(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedCiphertext.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for AspireHeSerializedCiphertext(0);
  return UnknownStorage.init()();
}

uint64_t (*AspireHeSerializedSeededCiphertext.poly0.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSeededCiphertext.seed.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AspireHeSerializedSeededCiphertext.seed.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AspireHeSerializedSeededCiphertext.seed.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSeededCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireHeSerializedSeededCiphertext, a1);
}

uint64_t AspireHeSerializedSeededCiphertext.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t (*AspireHeSerializedSeededCiphertext.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireHeSerializedFullCiphertext.polys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireHeSerializedFullCiphertext.skipLsbs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedFullCiphertext.correctionFactor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AspireHeSerializedFullCiphertext.correctionFactor.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*AspireHeSerializedFullCiphertext.correctionFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedFullCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspireHeSerializedFullCiphertext.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspireHeSerializedFullCiphertext.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedFullCiphertext(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedKeySwitchKey.keySwitchKey.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v7 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertextVec);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

uint64_t key path getter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireHeSerializedCiphertextVec);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

void (*AspireHeSerializedKeySwitchKey.keySwitchKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireHeSerializedKeySwitchKey(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeSerializedCiphertextVec);
  }
  return AspireHeSerializedKeySwitchKey.keySwitchKey.modify;
}

void AspireHeSerializedKeySwitchKey.keySwitchKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?, type metadata accessor for AspireHeSerializedCiphertextVec);
}

BOOL AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter()
{
  return AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?, type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedCiphertextVec);
}

Swift::Void __swiftcall AspireHeSerializedKeySwitchKey.clearKeySwitchKey()()
{
  AspireHeSerializedKeySwitchKey.clearKeySwitchKey()(type metadata accessor for AspireHeSerializedKeySwitchKey, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?, type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t (*AspireHeSerializedKeySwitchKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedKeySwitchKey.init()@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedKeySwitchKey.init()(type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedCiphertextVec, a1);
}

uint64_t (*AspireHeSerializedGaloisKey.keySwitchKeys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedGaloisKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireHeSerializedGaloisKey, a1);
}

uint64_t AspireHeSerializedGaloisKey.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t (*AspireHeSerializedGaloisKey.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedGaloisKey(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedGaloisKey.init()@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for AspireHeSerializedGaloisKey(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspireHeSerializedRelinKey.relinKey : AspireHeSerializedRelinKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireHeSerializedRelinKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v8 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedKeySwitchKey);
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

void (*AspireHeSerializedRelinKey.relinKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireHeSerializedRelinKey(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  return AspireHeSerializedRelinKey.relinKey.modify;
}

void AspireHeSerializedRelinKey.relinKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

BOOL AspireHeSerializedRelinKey.hasRelinKey.getter()
{
  return AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?, type metadata accessor for AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

BOOL AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AspireHeSerializedRelinKey.clearRelinKey()()
{
  AspireHeSerializedKeySwitchKey.clearKeySwitchKey()(type metadata accessor for AspireHeSerializedRelinKey, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

uint64_t AspireHeSerializedKeySwitchKey.clearKeySwitchKey()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t (*AspireHeSerializedRelinKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedRelinKey.init()@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedKeySwitchKey.init()(type metadata accessor for AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedKeySwitchKey, a1);
}

uint64_t AspireHeSerializedKeySwitchKey.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1(0) + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AspireHeSerializedSecretKey.polys.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t AspireHeSerializedSecretKey.polys.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AspireHeSerializedSecretKey.polys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSecretKey.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireHeSerializedSecretKey, a1);
}

uint64_t AspireHeSerializedSecretKey.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireHeSerializedSecretKey);
}

uint64_t (*AspireHeSerializedSecretKey.unknownFields.modify())()
{
  type metadata accessor for AspireHeSerializedSecretKey(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeSerializedSecretKey.init()@<X0>(_OWORD *a1@<X8>)
{
  return AspireHeSerializedDcrtPlaintext.init()((void (*)(_QWORD))type metadata accessor for AspireHeSerializedSecretKey, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.init()@<X0>(void (*a1)(_QWORD)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_237D54090;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AspireHeSerializedEvaluationKey.galoisKey.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  v7 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireHeSerializedGaloisKey);
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
}

uint64_t key path getter for AspireHeSerializedEvaluationKey.galoisKey : AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  v8 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireHeSerializedGaloisKey);
  *a2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
}

uint64_t key path setter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of SecretKey(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, a7);
  outlined init with take of SecretKey((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

void (*AspireHeSerializedEvaluationKey.galoisKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeSerializedGaloisKey);
  }
  return AspireHeSerializedEvaluationKey.galoisKey.modify;
}

void AspireHeSerializedEvaluationKey.galoisKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?, type metadata accessor for AspireHeSerializedGaloisKey);
}

BOOL AspireHeSerializedEvaluationKey.hasGaloisKey.getter()
{
  return AspireHeSerializedKeySwitchKey.hasKeySwitchKey.getter(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?, type metadata accessor for AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedGaloisKey);
}

Swift::Void __swiftcall AspireHeSerializedEvaluationKey.clearGaloisKey()()
{
  AspireHeSerializedKeySwitchKey.clearKeySwitchKey()(type metadata accessor for AspireHeSerializedEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t AspireHeSerializedEvaluationKey.relinKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v7 = type metadata accessor for AspireHeSerializedRelinKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedRelinKey);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
}

uint64_t key path getter for AspireHeSerializedEvaluationKey.relinKey : AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v8 = type metadata accessor for AspireHeSerializedRelinKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedRelinKey);
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
}

uint64_t key path setter for AspireHeSerializedEvaluationKey.relinKey : AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedRelinKey);
  v8 = a2 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedRelinKey);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireHeSerializedEvaluationKey.relinKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeSerializedRelinKey);
  }
  return AspireHeSerializedEvaluationKey.relinKey.modify;
}

void AspireHeSerializedEvaluationKey.relinKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?, type metadata accessor for AspireHeSerializedRelinKey);
}

BOOL AspireHeSerializedEvaluationKey.hasRelinKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v5 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  return v6;
}

Swift::Void __swiftcall AspireHeSerializedEvaluationKey.clearRelinKey()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v2 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*AspireHeSerializedEvaluationKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path setter for AspireHeEvaluationKeyConfig.encryptionParameters : AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireHeEncryptionParameters);
  v8 = a2 + *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireHeEncryptionParameters);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireHeEvaluationKeyConfig.encryptionParameters.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireHeEncryptionParameters);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspireHeEvaluationKeyConfig.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AspireHeEvaluationKeyConfig.encryptionParameters.modify;
}

void AspireHeEvaluationKeyConfig.encryptionParameters.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters);
}

BOOL AspireHeEvaluationKeyConfig.hasEncryptionParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  return v6;
}

Swift::Void __swiftcall AspireHeEvaluationKeyConfig.clearEncryptionParameters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireHeEvaluationKeyConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireHeEvaluationKeyConfig.galoisElements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireHeEvaluationKeyConfig.galoisElements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AspireHeEvaluationKeyConfig.galoisElements.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEvaluationKeyConfig.hasRelinKey_p.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AspireHeEvaluationKeyConfig.hasRelinKey_p.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireHeEvaluationKeyConfig.hasRelinKey_p.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEvaluationKeyConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireHeEvaluationKeyConfig, a1);
}

uint64_t AspireHeEvaluationKeyConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t (*AspireHeEvaluationKeyConfig.unknownFields.modify())()
{
  type metadata accessor for AspireHeEvaluationKeyConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.polynomialDegree.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AspireHeEncryptionParameters.polynomialDegree.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.polynomialDegree.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.plaintextModulus.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AspireHeEncryptionParameters.plaintextModulus.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.plaintextModulus.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.coefficientModuli.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireHeEncryptionParameters.coefficientModuli.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.coefficientModuli.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireHeEncryptionParameters.errorStdDev.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AspireHeEncryptionParameters.errorStdDev.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.errorStdDev.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireHeEncryptionParameters.securityLevel.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AspireHeEncryptionParameters.securityLevel.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 48) = v2;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.securityLevel.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireHeEncryptionParameters.heScheme.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AspireHeEncryptionParameters.heScheme.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 64) = v2;
  return result;
}

uint64_t (*AspireHeEncryptionParameters.heScheme.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireHeEncryptionParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspireHeEncryptionParameters.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspireHeEncryptionParameters.unknownFields.modify())()
{
  type metadata accessor for AspireHeEncryptionParameters(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspireHeSecurityLevel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSecurityLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSecurityLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSecurityLevel._protobuf_nameMap, a1);
}

uint64_t static AspireHeErrorStdDev._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeErrorStdDev._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeErrorStdDev@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeErrorStdDev._protobuf_nameMap, a1);
}

uint64_t static AspireHeHeScheme._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeHeScheme._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeHeScheme@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeHeScheme._protobuf_nameMap, a1);
}

unint64_t static AspireHeSerializedDcrtPlaintext.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireHeSerializedDcrtPlaintext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedDcrtPlaintext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedDcrtPlaintext.decodeMessage<A>(decoder:)()
{
  return AspireHeSerializedDcrtPlaintext.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  }
  return result;
}

void AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)()
{
  AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)();
}

{
  __asm { BR              X10 }
}

uint64_t static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedDcrtPlaintext) & 1;
}

Swift::Int AspireHeSerializedDcrtPlaintext.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedDcrtPlaintext, &lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedDcrtPlaintext()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedDcrtPlaintext()
{
  return AspireHeSerializedSecretKey.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedDcrtPlaintext()
{
  AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedDcrtPlaintext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedDcrtPlaintext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedDcrtPlaintext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedDcrtPlaintext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedDcrtPlaintext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedDcrtPlaintext) & 1;
}

unint64_t static AspireHeSerializedCiphertextVec.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireHeSerializedCiphertextVec._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertextVec._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedCiphertextVec.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for AspireHeSerializedCiphertext(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireHeSerializedCiphertextVec.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for AspireHeSerializedCiphertext(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireHeSerializedCiphertextVec(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireHeSerializedCiphertextVec.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireHeSerializedCiphertextVec) & 1;
}

Swift::Int AspireHeSerializedCiphertextVec.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedCiphertextVec()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedCiphertextVec()
{
  return AspireHeSerializedCiphertextVec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedCiphertextVec()
{
  return AspireHeSerializedCiphertextVec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedCiphertextVec()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedCiphertextVec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertextVec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedCiphertextVec()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedCiphertextVec()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedCiphertextVec(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireHeSerializedCiphertextVec) & 1;
}

unint64_t static AspireHeSerializedCiphertext.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspireHeSerializedCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
    else if (result == 1)
    {
      closure #1 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireHeSerializedSeededCiphertext);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireHeSerializedSeededCiphertext);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireHeSerializedSeededCiphertext);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedSeededCiphertext?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireHeSerializedSeededCiphertext);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireHeSerializedFullCiphertext);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireHeSerializedFullCiphertext);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireHeSerializedFullCiphertext);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireHeSerializedFullCiphertext?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireHeSerializedFullCiphertext);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AspireHeSerializedCiphertext.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v5 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(v0);
  else
    closure #1 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(v0);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AspireHeSerializedCiphertext(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireHeSerializedSeededCiphertext);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireHeSerializedSeededCiphertext);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireHeSerializedCiphertext.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v8 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  __break(1u);
  return result;
}

Swift::Int AspireHeSerializedCiphertext.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedCiphertext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedCiphertext()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedCiphertext.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedCiphertext()
{
  return AspireHeSerializedCiphertext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedCiphertext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedCiphertext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
  return Message.hash(into:)();
}

unint64_t static AspireHeSerializedSeededCiphertext.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t static AspireHeSerializedSeededCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSeededCiphertext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedSeededCiphertext.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AspireHeSerializedSeededCiphertext.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_237CFFA58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    __asm { BR              X10 }
  }
  return result;
}

Swift::Int AspireHeSerializedSeededCiphertext.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedSeededCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedSeededCiphertext@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_237D54090;
  a1[1] = xmmword_237D54090;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedSeededCiphertext()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedSeededCiphertext()
{
  return AspireHeSerializedSeededCiphertext.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedSeededCiphertext()
{
  AspireHeSerializedSeededCiphertext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedSeededCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedSeededCiphertext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSeededCiphertext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedSeededCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedSeededCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
  return Message.hash(into:)();
}

unint64_t static AspireHeSerializedFullCiphertext.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static AspireHeSerializedFullCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedFullCiphertext._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedFullCiphertext.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AspireHeSerializedFullCiphertext.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_237CFFFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16)
      || (result = dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)(), !v2))
    {
      if (!*(_QWORD *)(v3 + 24)
        || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v2))
      {
        type metadata accessor for AspireHeSerializedFullCiphertext(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AspireHeSerializedFullCiphertext.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedFullCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedFullCiphertext@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_237D54090;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedFullCiphertext()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedFullCiphertext()
{
  return AspireHeSerializedFullCiphertext.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedFullCiphertext()
{
  AspireHeSerializedFullCiphertext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedFullCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedFullCiphertext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedFullCiphertext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedFullCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedFullCiphertext()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
  return Message.hash(into:)();
}

unint64_t static AspireHeSerializedKeySwitchKey.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static AspireHeSerializedKeySwitchKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedKeySwitchKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(a1, a2, a3, closure #1 in AspireHeSerializedKeySwitchKey.traverse<A>(visitor:));
}

uint64_t closure #1 in AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedCiphertextVec);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeSerializedCiphertextVec);
}

Swift::Int AspireHeSerializedKeySwitchKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedKeySwitchKey, &lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey(a1, type metadata accessor for AspireHeSerializedCiphertextVec, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedKeySwitchKey()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedKeySwitchKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedKeySwitchKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedKeySwitchKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedKeySwitchKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
  return Message.hash(into:)();
}

unint64_t static AspireHeSerializedGaloisKey.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspireHeSerializedGaloisKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedGaloisKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufUInt64();
  type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t AspireHeSerializedGaloisKey.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for ProtobufUInt64(),
        type metadata accessor for AspireHeSerializedKeySwitchKey(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey), lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireHeSerializedGaloisKey(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireHeSerializedGaloisKey.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for AspireHeSerializedGaloisKey) & 1;
}

Swift::Int AspireHeSerializedGaloisKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedGaloisKey, &lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedGaloisKey@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedGaloisKey()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedGaloisKey()
{
  return AspireHeSerializedGaloisKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedGaloisKey()
{
  return AspireHeSerializedGaloisKey.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedGaloisKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedGaloisKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedGaloisKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedGaloisKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedGaloisKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedGaloisKey(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for AspireHeSerializedGaloisKey) & 1;
}

unint64_t static AspireHeSerializedRelinKey.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static AspireHeSerializedRelinKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedRelinKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedRelinKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedKeySwitchKey, &lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
}

uint64_t AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;
  char v18;

  v13 = v7;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v8 || (v18 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t AspireHeSerializedRelinKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(a1, a2, a3, closure #1 in AspireHeSerializedRelinKey.traverse<A>(visitor:));
}

uint64_t AspireHeSerializedKeySwitchKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = a4(v4, a1, a2, a3);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in AspireHeSerializedRelinKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireHeSerializedRelinKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedKeySwitchKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeSerializedKeySwitchKey);
}

Swift::Int AspireHeSerializedRelinKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedRelinKey, &lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedRelinKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey(a1, type metadata accessor for AspireHeSerializedKeySwitchKey, a2);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedKeySwitchKey@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedRelinKey()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedRelinKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedRelinKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedRelinKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedRelinKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedRelinKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedRelinKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedRelinKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
  return Message.hash(into:)();
}

unint64_t static AspireHeSerializedSecretKey.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspireHeSerializedSecretKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSecretKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedSecretKey.decodeMessage<A>(decoder:)()
{
  return AspireHeSerializedDcrtPlaintext.decodeMessage<A>(decoder:)();
}

void AspireHeSerializedSecretKey.traverse<A>(visitor:)()
{
  AspireHeSerializedDcrtPlaintext.traverse<A>(visitor:)();
}

uint64_t sub_237D01410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(_QWORD);
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    v3(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireHeSerializedSecretKey.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedSecretKey) & 1;
}

Swift::Int AspireHeSerializedSecretKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedSecretKey, &lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedSecretKey@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_237D54090;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedSecretKey()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedSecretKey()
{
  return AspireHeSerializedSecretKey.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedSecretKey()
{
  AspireHeSerializedSecretKey.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedSecretKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedSecretKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedSecretKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedSecretKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedSecretKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireHeSerializedSecretKey(uint64_t *a1, uint64_t a2)
{
  return specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(a1, a2, type metadata accessor for AspireHeSerializedSecretKey) & 1;
}

unint64_t static AspireHeSerializedEvaluationKey.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireHeSerializedEvaluationKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedEvaluationKey._protobuf_nameMap, a1);
}

uint64_t AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)();
      }
      else if (result == 1)
      {
        closure #1 in AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedGaloisKey, &lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedKeySwitchKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireHeSerializedEvaluationKey(0);
  type metadata accessor for AspireHeSerializedRelinKey(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedGaloisKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeSerializedGaloisKey);
}

uint64_t closure #2 in AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedRelinKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeSerializedRelinKey);
}

Swift::Int AspireHeSerializedEvaluationKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeSerializedEvaluationKey, &lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
}

uint64_t protocol witness for Message.init() in conformance AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for AspireHeSerializedRelinKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeSerializedEvaluationKey()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedEvaluationKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeSerializedEvaluationKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeSerializedEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeSerializedEvaluationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeSerializedEvaluationKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeSerializedEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeSerializedEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
  return Message.hash(into:)();
}

unint64_t static AspireHeEvaluationKeyConfig.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static AspireHeEvaluationKeyConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEvaluationKeyConfig._protobuf_nameMap, a1);
}

uint64_t AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 1:
          closure #1 in AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireHeEvaluationKeyConfig(0);
  type metadata accessor for AspireHeEncryptionParameters(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireHeEvaluationKeyConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireHeEvaluationKeyConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
      dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)();
    if (v3[8] == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    type metadata accessor for AspireHeEvaluationKeyConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireHeEvaluationKeyConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Int AspireHeEvaluationKeyConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeEvaluationKeyConfig, &lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireHeEvaluationKeyConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeEvaluationKeyConfig()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeEvaluationKeyConfig()
{
  return AspireHeEvaluationKeyConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireHeEvaluationKeyConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeEvaluationKeyConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeEvaluationKeyConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEvaluationKeyConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeEvaluationKeyConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeEvaluationKeyConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  return Message.hash(into:)();
}

unint64_t static AspireHeEncryptionParameters.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspireHeEncryptionParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEncryptionParameters._protobuf_nameMap, a1);
}

uint64_t AspireHeEncryptionParameters.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_6;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_6;
        case 4:
          lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel();
          goto LABEL_5;
        case 6:
          lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
LABEL_5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireHeEncryptionParameters.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0 + 8)
      || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
        || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        if ((*(_BYTE *)(v0 + 32) & 1) != 0
          || !*(_QWORD *)(v0 + 24)
          || (lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev(),
              result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          if (!*(_QWORD *)(v0 + 40)
            || (lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel(),
                result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            if (!*(_QWORD *)(v0 + 56)
              || (lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme(),
                  result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                  !v1))
            {
              type metadata accessor for AspireHeEncryptionParameters(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int AspireHeEncryptionParameters.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireHeEncryptionParameters, &lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
}

uint64_t protocol witness for Message.init() in conformance AspireHeEncryptionParameters@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireHeEncryptionParameters()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AspireHeEncryptionParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AspireHeEncryptionParameters())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireHeEncryptionParameters()
{
  return AspireHeEncryptionParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireHeEncryptionParameters()
{
  return AspireHeEncryptionParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireHeEncryptionParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireHeEncryptionParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireHeEncryptionParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireHeEncryptionParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireHeEncryptionParameters()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  return Message.hash(into:)();
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v79;
  int64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x24BDAC7A8](v4);
  v86 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x24BDAC7A8](v6);
  v85 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
  MEMORY[0x24BDAC7A8](v89);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v95 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v79 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v94 = (uint64_t)&v79 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v18);
  v96 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?));
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AspireApiConfig(0);
  v100 = *(_QWORD *)(v23 - 8);
  v101 = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v103 = (uint64_t)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v79 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig)?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (uint64_t *)((char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v29);
  v97 = (uint64_t *)((char *)&v79 - v32);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v93 = 0;
  v33 = *(_QWORD *)(a1 + 64);
  v83 = a1 + 64;
  v34 = 1 << *(_BYTE *)(a1 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v102 = v27;
  v90 = v20;
  v36 = v35 & v33;
  v84 = (unint64_t)(v34 + 63) >> 6;
  v80 = v84 - 1;
  v91 = v22;
  v92 = a2;
  v88 = a1;
  v98 = v10;
  v82 = v13;
  v81 = v16;
  v87 = v9;
  if ((v35 & v33) != 0)
  {
    v37 = __clz(__rbit64(v36));
    v38 = (v36 - 1) & v36;
    v39 = v37 | (v93 << 6);
LABEL_7:
    v40 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v39);
    v42 = *v40;
    v41 = v40[1];
    v43 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v100 + 72) * v39;
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
    outlined init with copy of SecretKey(v43, (uint64_t)v31 + *(int *)(v44 + 48), type metadata accessor for AspireApiConfig);
    *v31 = v42;
    v31[1] = v41;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v31, 0, 1, v44);
    swift_bridgeObjectRetain();
    v10 = v98;
    goto LABEL_26;
  }
  v45 = v93 + 1;
  if (__OFADD__(v93, 1))
  {
    __break(1u);
    JUMPOUT(0x237D03F04);
  }
  if (v45 < v84)
  {
    v46 = *(_QWORD *)(v83 + 8 * v45);
    if (v46)
    {
LABEL_11:
      v38 = (v46 - 1) & v46;
      v39 = __clz(__rbit64(v46)) + (v45 << 6);
      v93 = v45;
      goto LABEL_7;
    }
    v47 = v93 + 2;
    ++v93;
    if (v45 + 1 < v84)
    {
      v46 = *(_QWORD *)(v83 + 8 * v47);
      if (v46)
      {
LABEL_14:
        v45 = v47;
        goto LABEL_11;
      }
      v93 = v45 + 1;
      if (v45 + 2 < v84)
      {
        v46 = *(_QWORD *)(v83 + 8 * (v45 + 2));
        if (v46)
        {
          v45 += 2;
          goto LABEL_11;
        }
        v47 = v45 + 3;
        v93 = v45 + 2;
        if (v45 + 3 < v84)
        {
          v46 = *(_QWORD *)(v83 + 8 * v47);
          if (v46)
            goto LABEL_14;
          while (1)
          {
            v45 = v47 + 1;
            if (__OFADD__(v47, 1))
              __break(1u);
            if (v45 >= v84)
              break;
            v46 = *(_QWORD *)(v83 + 8 * v45);
            ++v47;
            if (v46)
              goto LABEL_11;
          }
          v93 = v80;
        }
      }
    }
  }
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v31, 1, 1, v48);
  v38 = 0;
LABEL_26:
  v49 = v97;
  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v31, (uint64_t)v97, &demangling cache variable for type metadata for (key: String, value: AspireApiConfig)?);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
  v51 = 1;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v49, 1, v50) != 1)
  {
    v99 = v38;
    v52 = (uint64_t)v49 + *(int *)(v50 + 48);
    v53 = *v49;
    v54 = v49[1];
    v55 = (uint64_t)v102;
    outlined init with take of SecretKey(v52, (uint64_t)v102, type metadata accessor for AspireApiConfig);
    v56 = v92;
    v57 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
    v59 = v58;
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
LABEL_48:
      outlined destroy of AspireApiPECConfig(v55, type metadata accessor for AspireApiConfig);
      return 0;
    }
    v60 = *(_QWORD *)(v56 + 56) + *(_QWORD *)(v100 + 72) * v57;
    v61 = v103;
    outlined init with copy of SecretKey(v60, v103, type metadata accessor for AspireApiConfig);
    v62 = (uint64_t)v91;
    v63 = (uint64_t)&v91[*(int *)(v90 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v61, (uint64_t)v91, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55, v63, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
    if (v64(v62, 1, v10) == 1)
    {
      v65 = v64(v63, 1, v10);
      v55 = (uint64_t)v102;
      if (v65 != 1)
      {
        v75 = &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?);
LABEL_47:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, v75);
        outlined destroy of AspireApiPECConfig(v103, type metadata accessor for AspireApiConfig);
        goto LABEL_48;
      }
LABEL_39:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      __asm { BR              X10 }
    }
    v66 = v96;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v62, v96, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    if (v64(v63, 1, v10) == 1)
    {
      v75 = &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?);
      v55 = (uint64_t)v102;
LABEL_46:
      outlined destroy of AspireApiPECConfig(v96, type metadata accessor for AspireApiConfig.OneOf_Config);
      goto LABEL_47;
    }
    v67 = v94;
    outlined init with take of SecretKey(v63, v94, type metadata accessor for AspireApiConfig.OneOf_Config);
    v68 = (uint64_t)&v9[*(int *)(v89 + 48)];
    outlined init with copy of SecretKey(v66, (uint64_t)v9, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined init with copy of SecretKey(v67, v68, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v69 = (uint64_t)v82;
      outlined init with copy of SecretKey((uint64_t)v9, (uint64_t)v82, type metadata accessor for AspireApiConfig.OneOf_Config);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v70 = v86;
        outlined init with take of SecretKey(v68, v86, type metadata accessor for AspireApiPECConfig);
        v71 = static AspireApiPECConfig.== infix(_:_:)(v69, v70);
        outlined destroy of AspireApiPECConfig(v70, type metadata accessor for AspireApiPECConfig);
        outlined destroy of AspireApiPECConfig(v69, type metadata accessor for AspireApiPECConfig);
        outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiConfig.OneOf_Config);
        v55 = (uint64_t)v102;
        if ((v71 & 1) == 0)
          goto LABEL_45;
LABEL_38:
        outlined destroy of AspireApiPECConfig(v94, type metadata accessor for AspireApiConfig.OneOf_Config);
        outlined destroy of AspireApiPECConfig(v96, type metadata accessor for AspireApiConfig.OneOf_Config);
        goto LABEL_39;
      }
      v76 = type metadata accessor for AspireApiPECConfig;
      v77 = v69;
    }
    else
    {
      v72 = (uint64_t)v81;
      outlined init with copy of SecretKey((uint64_t)v9, (uint64_t)v81, type metadata accessor for AspireApiConfig.OneOf_Config);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        v73 = v85;
        outlined init with take of SecretKey(v68, v85, type metadata accessor for AspireApiPIRConfig);
        v74 = static AspireApiPIRConfig.== infix(_:_:)(v72, v73);
        outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspireApiPIRConfig);
        outlined destroy of AspireApiPECConfig(v72, type metadata accessor for AspireApiPIRConfig);
        outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiConfig.OneOf_Config);
        v55 = (uint64_t)v102;
        if ((v74 & 1) != 0)
          goto LABEL_38;
LABEL_45:
        outlined destroy of AspireApiPECConfig(v94, type metadata accessor for AspireApiConfig.OneOf_Config);
        v75 = &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?;
        goto LABEL_46;
      }
      v76 = type metadata accessor for AspireApiPIRConfig;
      v77 = v72;
    }
    outlined destroy of AspireApiPECConfig(v77, v76);
    v55 = (uint64_t)v102;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
    goto LABEL_45;
  }
  return v51;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int (*v72)(_BYTE *, uint64_t, uint64_t);
  uint64_t v73;
  unsigned int v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned int (*v94)(_BYTE *, uint64_t, uint64_t);
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  int EnumCaseMultiPayload;
  _BYTE *v102;
  char v103;
  uint64_t v104;
  uint64_t *v105;
  char v106;
  char v107;
  int64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t (*v112)(uint64_t);
  _BYTE v113[64];
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  int64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t *v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  int64_t v137;
  _BOOL4 v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  uint64_t *v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v4);
  v133 = &v113[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v126 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v126);
  v142 = &v113[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v134);
  v8 = &v113[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v150 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v9 = *(_QWORD *)(v150 - 8);
  v10 = MEMORY[0x24BDAC7A8](v150);
  v151 = &v113[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v10);
  v135 = &v113[-v13];
  MEMORY[0x24BDAC7A8](v12);
  v144 = &v113[-v14];
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v149);
  v16 = &v113[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v154 = &v113[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v155 = &v113[-v21];
  MEMORY[0x24BDAC7A8](v20);
  v148 = &v113[-v22];
  v139 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v125 = *(_QWORD *)(v139 - 8);
  v23 = MEMORY[0x24BDAC7A8](v139);
  v160 = &v113[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v23);
  v161 = &v113[-v25];
  v152 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v147 = *(_QWORD *)(v152 - 8);
  MEMORY[0x24BDAC7A8](v152);
  v143 = (uint64_t *)&v113[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?));
  MEMORY[0x24BDAC7A8](v146);
  v28 = &v113[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v156 = &v113[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = MEMORY[0x24BDAC7A8](v30);
  v159 = &v113[-v33];
  MEMORY[0x24BDAC7A8](v32);
  v158 = &v113[-v34];
  v145 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v157 = *(_QWORD *)(v145 - 8);
  v35 = MEMORY[0x24BDAC7A8](v145);
  v37 = &v113[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v35);
  v39 = &v113[-v38];
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey)?);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v43 = &v113[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v41);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v131 = v9;
  v130 = v8;
  v132 = (uint64_t *)&v113[-v44];
  v115 = v4;
  v45 = 0;
  v119 = 0;
  v46 = *(_QWORD *)(a1 + 64);
  v116 = a1 + 64;
  v47 = 1 << *(_BYTE *)(a1 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & v46;
  v124 = a1;
  v121 = (unint64_t)(v47 + 63) >> 6;
  v114 = v121 - 1;
  v153 = v28;
  v162 = v39;
  v117 = a2;
  v120 = v37;
  v123 = v43;
  while (1)
  {
    if (v49)
    {
      v140 = (v49 - 1) & v49;
      v50 = __clz(__rbit64(v49)) | (v45 << 6);
LABEL_8:
      v51 = *(_QWORD *)(*(_QWORD *)(v124 + 48) + 8 * v50);
      v52 = *(_QWORD *)(v124 + 56) + *(_QWORD *)(v157 + 72) * v50;
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey));
      outlined init with copy of SecretKey(v52, (uint64_t)v43 + *(int *)(v53 + 48), type metadata accessor for AspireHeSerializedKeySwitchKey);
      *v43 = v51;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v43, 0, 1, v53);
      v28 = v153;
      v39 = v162;
      goto LABEL_18;
    }
    v54 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_73;
    if (v54 < v121)
    {
      v55 = *(_QWORD *)(v116 + 8 * v54);
      if (v55)
        goto LABEL_12;
      v45 += 2;
      if (v54 + 1 >= v121)
      {
        v45 = v54;
      }
      else
      {
        v55 = *(_QWORD *)(v116 + 8 * v45);
        if (v55)
        {
          ++v54;
LABEL_12:
          v140 = (v55 - 1) & v55;
          v50 = __clz(__rbit64(v55)) + (v54 << 6);
          v45 = v54;
          goto LABEL_8;
        }
        if (v54 + 2 < v121)
        {
          v55 = *(_QWORD *)(v116 + 8 * (v54 + 2));
          if (v55)
          {
            v54 += 2;
            goto LABEL_12;
          }
          v108 = v54 + 3;
          if (v54 + 3 >= v121)
          {
            v45 = v54 + 2;
          }
          else
          {
            v55 = *(_QWORD *)(v116 + 8 * v108);
            if (v55)
            {
              v54 += 3;
              goto LABEL_12;
            }
            while (1)
            {
              v54 = v108 + 1;
              if (__OFADD__(v108, 1))
              {
                __break(1u);
                JUMPOUT(0x237D062C4);
              }
              if (v54 >= v121)
                break;
              v55 = *(_QWORD *)(v116 + 8 * v54);
              ++v108;
              if (v55)
                goto LABEL_12;
            }
            v45 = v114;
          }
        }
      }
    }
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v43, 1, 1, v56);
    v140 = 0;
LABEL_18:
    v57 = (uint64_t)v43;
    v58 = v132;
    outlined init with take of RequestContext<StaticPIRParameters>(v57, (uint64_t)v132, &demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey)?);
    v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: AspireHeSerializedKeySwitchKey));
    v60 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v58, 1, v59) == 1;
    result = v60;
    if (v60)
      return result;
    v138 = v60;
    v62 = (uint64_t)v58 + *(int *)(v59 + 48);
    v63 = *v58;
    outlined init with take of SecretKey(v62, (uint64_t)v39, type metadata accessor for AspireHeSerializedKeySwitchKey);
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
    if ((v65 & 1) == 0)
      goto LABEL_63;
    v137 = v45;
    outlined init with copy of SecretKey(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v157 + 72) * v64, (uint64_t)v37, type metadata accessor for AspireHeSerializedKeySwitchKey);
    v66 = v145;
    v67 = v39;
    v68 = v158;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v37[*(int *)(v145 + 20)], (uint64_t)v158, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    v69 = (uint64_t)&v67[*(int *)(v66 + 20)];
    v70 = v159;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69, (uint64_t)v159, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    v71 = (uint64_t)&v28[*(int *)(v146 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v68, (uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v70, v71, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    v72 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v147 + 48);
    v73 = v152;
    if (v72(v28, 1, v152) != 1)
      break;
    v74 = v72((_BYTE *)v71, 1, v73);
    v75 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
    if (v74 != 1)
    {
      v39 = v162;
      v109 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?);
      goto LABEL_61;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v159, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v158, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    v39 = v162;
    v76 = MEMORY[0x24BE5BF20];
LABEL_42:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v75, v76);
    v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireHeSerializedKeySwitchKey);
    outlined destroy of AspireApiPECConfig((uint64_t)v39, type metadata accessor for AspireHeSerializedKeySwitchKey);
    v45 = v137;
    v49 = v140;
    result = v138;
    v43 = v123;
    if ((v107 & 1) == 0)
      return result;
  }
  v77 = v156;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, (uint64_t)v156, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if (v72((_BYTE *)v71, 1, v73) == 1)
  {
    v39 = v162;
    v109 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?);
    goto LABEL_60;
  }
  v78 = v71;
  v79 = v143;
  outlined init with take of SecretKey(v78, (uint64_t)v143, type metadata accessor for AspireHeSerializedCiphertextVec);
  v80 = *(_QWORD *)v77;
  v81 = *(_QWORD *)(*(_QWORD *)v77 + 16);
  v136 = *v79;
  v82 = (uint64_t)v161;
  v39 = v162;
  v75 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
  if (v81 != *(_QWORD *)(v136 + 16))
    goto LABEL_59;
  if (!v81 || (v83 = v136, v80 == v136))
  {
LABEL_41:
    v105 = v143;
    type metadata accessor for UnknownStorage();
    v76 = MEMORY[0x24BE5BF20];
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v75, MEMORY[0x24BE5BF20]);
    v39 = v162;
    v28 = v153;
    v106 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertextVec);
    outlined destroy of AspireApiPECConfig((uint64_t)v77, type metadata accessor for AspireHeSerializedCiphertextVec);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v159, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v158, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    a2 = v117;
    v37 = v120;
    if ((v106 & 1) == 0)
      goto LABEL_62;
    goto LABEL_42;
  }
  v84 = 0;
  v85 = (*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
  v129 = v80 + v85;
  v127 = v136 + v85;
  v128 = *(_QWORD *)(v125 + 72);
  v118 = v16;
  v122 = v81;
  while (1)
  {
    v86 = v84;
    v87 = v128 * v84;
    outlined init with copy of SecretKey(v129 + v128 * v84, v82, type metadata accessor for AspireHeSerializedCiphertext);
    v88 = *(_QWORD *)(v83 + 16);
    v141 = v86;
    if (v86 >= v88)
    {
      __break(1u);
LABEL_73:
      __break(1u);
      JUMPOUT(0x237D06228);
    }
    v89 = v127 + v87;
    v90 = v160;
    outlined init with copy of SecretKey(v89, (uint64_t)v160, type metadata accessor for AspireHeSerializedCiphertext);
    v91 = v148;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v82, (uint64_t)v148, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v92 = v155;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v90, (uint64_t)v155, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v93 = (uint64_t)&v16[*(int *)(v149 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v91, (uint64_t)v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v92, v93, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v94 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v131 + 48);
    v95 = v150;
    if (v94(v16, 1, v150) != 1)
      break;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v92, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v91, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    if (v94((_BYTE *)v93, 1, v95) != 1)
    {
      v28 = v153;
      v110 = (uint64_t)v161;
      v39 = v162;
      v111 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      goto LABEL_58;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v102 = v160;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v75, MEMORY[0x24BE5BF20]);
    v103 = dispatch thunk of static Equatable.== infix(_:_:)();
    v104 = (uint64_t)v102;
    v82 = (uint64_t)v161;
    outlined destroy of AspireApiPECConfig(v104, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireApiPECConfig(v82, type metadata accessor for AspireHeSerializedCiphertext);
    v28 = v153;
    v39 = v162;
    v77 = v156;
    if ((v103 & 1) == 0)
      goto LABEL_59;
    v84 = v141 + 1;
    v83 = v136;
    if (v141 + 1 == v122)
      goto LABEL_41;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, (uint64_t)v154, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v94((_BYTE *)v93, 1, v95) == 1)
  {
    v99 = (uint64_t)v91;
    v110 = (uint64_t)v161;
    v39 = v162;
    v111 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  else
  {
    v96 = v144;
    outlined init with take of SecretKey(v93, (uint64_t)v144, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v97 = (uint64_t)v130;
    v98 = (uint64_t)&v130[*(int *)(v134 + 48)];
    outlined init with copy of SecretKey((uint64_t)v154, (uint64_t)v130, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined init with copy of SecretKey((uint64_t)v96, v98, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v99 = (uint64_t)v91;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v100 = v151;
      outlined init with copy of SecretKey(v97, (uint64_t)v151, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of SecretKey(v98, (uint64_t)v133, type metadata accessor for AspireHeSerializedFullCiphertext);
        __asm { BR              X8 }
      }
      v112 = type metadata accessor for AspireHeSerializedFullCiphertext;
    }
    else
    {
      v100 = v135;
      outlined init with copy of SecretKey(v97, (uint64_t)v135, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 1)
      {
        outlined init with take of SecretKey(v98, (uint64_t)v142, type metadata accessor for AspireHeSerializedSeededCiphertext);
        __asm { BR              X10 }
      }
      v112 = type metadata accessor for AspireHeSerializedSeededCiphertext;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v100, v112);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    v110 = (uint64_t)v161;
    v39 = v162;
    outlined destroy of AspireApiPECConfig((uint64_t)v144, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v111 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v155, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v99, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AspireApiPECConfig((uint64_t)v154, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_58:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, v111);
  outlined destroy of AspireApiPECConfig((uint64_t)v160, type metadata accessor for AspireHeSerializedCiphertext);
  outlined destroy of AspireApiPECConfig(v110, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_59:
  outlined destroy of AspireApiPECConfig((uint64_t)v143, type metadata accessor for AspireHeSerializedCiphertextVec);
  v109 = &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?;
LABEL_60:
  outlined destroy of AspireApiPECConfig((uint64_t)v156, type metadata accessor for AspireHeSerializedCiphertextVec);
  v37 = v120;
LABEL_61:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v109);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v159, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v158, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
LABEL_62:
  outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_63:
  outlined destroy of AspireApiPECConfig((uint64_t)v39, type metadata accessor for AspireHeSerializedKeySwitchKey);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int EnumCaseMultiPayload;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  char v76;
  int v77;
  char v78;
  uint64_t *v79;
  uint64_t (*v80)(uint64_t);
  int64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v4 = type metadata accessor for AMDPbPECConfig(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbPIRConfig(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
  MEMORY[0x24BDAC7A8](v90);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v99 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v88 = (uint64_t)&v81 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v97 = (uint64_t)&v81 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?));
  MEMORY[0x24BDAC7A8](v98);
  v91 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for AMDPbHEConfig(0);
  v102 = *(_QWORD *)(v95 - 8);
  v23 = MEMORY[0x24BDAC7A8](v95);
  v103 = (uint64_t)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v92 = (char *)&v81 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig)?);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v100 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v27);
  v31 = (int64_t *)((char *)&v81 - v30);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v84 = v15;
  v93 = v21;
  v82 = v9;
  v83 = v6;
  v96 = 0;
  v89 = a1;
  v32 = *(_QWORD *)(a1 + 64);
  v85 = a1 + 64;
  v86 = v11;
  v33 = 1 << *(_BYTE *)(a1 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & v32;
  v87 = (unint64_t)(v33 + 63) >> 6;
  v81 = v87 - 1;
  v94 = v12;
  v37 = (uint64_t)v91;
  v36 = (uint64_t)v92;
  while (1)
  {
    if (v35)
    {
      v40 = __clz(__rbit64(v35));
      v41 = (v35 - 1) & v35;
      v42 = v40 | (v96 << 6);
      v43 = v100;
LABEL_10:
      v44 = *(_QWORD *)(v89 + 56);
      v45 = (_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v42);
      v46 = v45[1];
      *v43 = *v45;
      v43[1] = v46;
      v47 = v44 + *(_QWORD *)(v102 + 72) * v42;
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig));
      outlined init with copy of SecretKey(v47, (uint64_t)v43 + *(int *)(v48 + 48), type metadata accessor for AMDPbHEConfig);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v43, 0, 1, v48);
      swift_bridgeObjectRetain();
      goto LABEL_32;
    }
    v49 = v96 + 1;
    v43 = v100;
    if (__OFADD__(v96, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v49 < v87)
    {
      v50 = *(_QWORD *)(v85 + 8 * v49);
      if (v50)
        goto LABEL_14;
      v51 = v96 + 2;
      ++v96;
      if (v49 + 1 < v87)
      {
        v50 = *(_QWORD *)(v85 + 8 * v51);
        if (v50)
          goto LABEL_17;
        v96 = v49 + 1;
        if (v49 + 2 < v87)
        {
          v50 = *(_QWORD *)(v85 + 8 * (v49 + 2));
          if (v50)
          {
            v49 += 2;
            goto LABEL_14;
          }
          v96 = v49 + 2;
          if (v49 + 3 < v87)
          {
            v50 = *(_QWORD *)(v85 + 8 * (v49 + 3));
            if (v50)
            {
              v49 += 3;
              goto LABEL_14;
            }
            v51 = v49 + 4;
            v96 = v49 + 3;
            if (v49 + 4 < v87)
              break;
          }
        }
      }
    }
LABEL_31:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v43, 1, 1, v52);
    v41 = 0;
LABEL_32:
    outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v43, (uint64_t)v31, &demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig)?);
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AMDPbHEConfig));
    v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v31, 1, v53);
    v55 = v54 == 1;
    if (v54 == 1)
      return v55;
    v56 = (uint64_t)v31 + *(int *)(v53 + 48);
    v57 = *v31;
    v58 = v31[1];
    outlined init with take of SecretKey(v56, v36, type metadata accessor for AMDPbHEConfig);
    v59 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v58);
    v61 = v60;
    swift_bridgeObjectRelease();
    if ((v61 & 1) == 0)
      goto LABEL_52;
    v101 = v41;
    v62 = v103;
    outlined init with copy of SecretKey(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v102 + 72) * v59, v103, type metadata accessor for AMDPbHEConfig);
    v63 = v37;
    v64 = v37 + *(int *)(v98 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v62, v37, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v64, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
    v66 = v94;
    if (v65(v37, 1, v94) == 1)
    {
      if (v65(v64, 1, v66) != 1)
      {
        v79 = &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?);
        goto LABEL_51;
      }
    }
    else
    {
      v67 = (uint64_t)v93;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, (uint64_t)v93, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      if (v65(v64, 1, v66) == 1)
      {
        v63 = (uint64_t)v91;
        v36 = (uint64_t)v92;
        v79 = &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?);
        goto LABEL_50;
      }
      v68 = v97;
      outlined init with take of SecretKey(v64, v97, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      v69 = (uint64_t)v86;
      v70 = (uint64_t)&v86[*(int *)(v90 + 48)];
      outlined init with copy of SecretKey(v67, (uint64_t)v86, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined init with copy of SecretKey(v68, v70, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v71 = (uint64_t)v84;
        outlined init with copy of SecretKey(v69, (uint64_t)v84, type metadata accessor for AMDPbHEConfig.OneOf_Config);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v73 = v91;
        if (EnumCaseMultiPayload != 1)
        {
          v80 = type metadata accessor for AMDPbPECConfig;
LABEL_48:
          outlined destroy of AspireApiPECConfig(v71, v80);
          v36 = (uint64_t)v92;
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v69, &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
LABEL_49:
          outlined destroy of AspireApiPECConfig(v97, type metadata accessor for AMDPbHEConfig.OneOf_Config);
          v79 = &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?;
          v63 = (uint64_t)v73;
LABEL_50:
          outlined destroy of AspireApiPECConfig((uint64_t)v93, type metadata accessor for AMDPbHEConfig.OneOf_Config);
LABEL_51:
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, v79);
          outlined destroy of AspireApiPECConfig(v103, type metadata accessor for AMDPbHEConfig);
LABEL_52:
          outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AMDPbHEConfig);
          return 0;
        }
        v74 = (uint64_t)v83;
        v75 = type metadata accessor for AMDPbPECConfig;
        outlined init with take of SecretKey(v70, (uint64_t)v83, type metadata accessor for AMDPbPECConfig);
        v76 = static AMDPbPECConfig.== infix(_:_:)(v71, v74);
      }
      else
      {
        v71 = v88;
        outlined init with copy of SecretKey(v69, v88, type metadata accessor for AMDPbHEConfig.OneOf_Config);
        v77 = swift_getEnumCaseMultiPayload();
        v73 = v91;
        if (v77 == 1)
        {
          v80 = type metadata accessor for AMDPbPIRConfig;
          goto LABEL_48;
        }
        v74 = (uint64_t)v82;
        v75 = type metadata accessor for AMDPbPIRConfig;
        outlined init with take of SecretKey(v70, (uint64_t)v82, type metadata accessor for AMDPbPIRConfig);
        v76 = static AMDPbPIRConfig.== infix(_:_:)(v71, v74);
      }
      v78 = v76;
      outlined destroy of AspireApiPECConfig(v74, v75);
      outlined destroy of AspireApiPECConfig(v71, v75);
      outlined destroy of AspireApiPECConfig(v69, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      v36 = (uint64_t)v92;
      if ((v78 & 1) == 0)
        goto LABEL_49;
      outlined destroy of AspireApiPECConfig(v97, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined destroy of AspireApiPECConfig((uint64_t)v93, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      v63 = (uint64_t)v73;
    }
    v37 = v63;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    v38 = v103;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig(v38, type metadata accessor for AMDPbHEConfig);
    result = outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AMDPbHEConfig);
    v35 = v101;
    if ((v39 & 1) == 0)
      return v55;
  }
  v50 = *(_QWORD *)(v85 + 8 * v51);
  if (v50)
  {
LABEL_17:
    v49 = v51;
LABEL_14:
    v41 = (v50 - 1) & v50;
    v42 = __clz(__rbit64(v50)) + (v49 << 6);
    v96 = v49;
    goto LABEL_10;
  }
  while (1)
  {
    v49 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v49 >= v87)
    {
      v96 = v81;
      goto LABEL_31;
    }
    v50 = *(_QWORD *)(v85 + 8 * v49);
    ++v51;
    if (v50)
      goto LABEL_14;
  }
LABEL_56:
  __break(1u);
  return result;
}

BOOL specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t __s2;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  __s2 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  if (!__s1)
    __break(1u);
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_237D06E54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;

  v21 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v20 & 0xFFFFFFFFFFFFFFLL, v17);
  if (!v18)
    return v21;
  return v19;
}

uint64_t specialized static AspireHeSerializedSeededCiphertext.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0 && (specialized static Data.== infix(_:_:)(a1[2], a1[3]), (v12 & 1) != 0))
  {
    v13 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)(a2 + *(int *)(v13 + 24)), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static AspireHeSerializedFullCiphertext.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(a1[2], *(_QWORD *)(a2 + 16))
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    v12 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
    v13 = (char *)a1 + *(int *)(v12 + 28);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 28)), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AspireHeSerializedEvaluationKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = a2;
  v62 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v62 - 8);
  v3 = MEMORY[0x24BDAC7A8](v62);
  v59 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v58 = (char *)&v56 - v5;
  v68 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v65 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v57 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedRelinKey?, AspireHeSerializedRelinKey?));
  MEMORY[0x24BDAC7A8](v64);
  v69 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v61 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v66 = (uint64_t)&v56 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v67 = (uint64_t)&v56 - v13;
  v14 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v63 = (uint64_t *)((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedGaloisKey?, AspireHeSerializedGaloisKey?));
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (uint64_t *)((char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v56 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v56 - v27;
  v29 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v30 = *(int *)(v29 + 20);
  v70 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v30, (uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v71 + *(int *)(v29 + 20), (uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  v31 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, (uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, v31, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v19, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      goto LABEL_4;
    }
LABEL_9:
    v41 = &demangling cache variable for type metadata for (AspireHeSerializedGaloisKey?, AspireHeSerializedGaloisKey?);
    v42 = (uint64_t)v19;
LABEL_17:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, v41);
    goto LABEL_18;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireHeSerializedGaloisKey);
    goto LABEL_9;
  }
  v43 = v63;
  outlined init with take of SecretKey(v31, (uint64_t)v63, type metadata accessor for AspireHeSerializedGaloisKey);
  if ((specialized static Dictionary<>.== infix(_:_:)(*v23, *v43) & 1) == 0)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v43, type metadata accessor for AspireHeSerializedGaloisKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireHeSerializedGaloisKey);
    v42 = (uint64_t)v19;
    v41 = &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?;
    goto LABEL_17;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig((uint64_t)v43, type metadata accessor for AspireHeSerializedGaloisKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireHeSerializedGaloisKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
  if ((v44 & 1) == 0)
    goto LABEL_18;
LABEL_4:
  v33 = v70;
  v34 = v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v70 + *(int *)(v29 + 24), v67, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v35 = v71;
  v36 = v66;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v71 + *(int *)(v29 + 24), v66, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v37 = v69;
  v38 = v69 + *(int *)(v64 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v69, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v38, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  v40 = v68;
  if (v39(v37, 1, v68) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    if (v39(v38, 1, v40) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
LABEL_21:
      v50 = v60;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      v52 = v58;
      v53 = v62;
      v51(v58, v33, v62);
      v54 = v59;
      v51(v59, v35, v53);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v54, v53);
      v55(v52, v53);
      return v46 & 1;
    }
    goto LABEL_15;
  }
  v45 = v61;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v61, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if (v39(v38, 1, v40) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined destroy of AspireApiPECConfig(v45, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_15:
    v41 = &demangling cache variable for type metadata for (AspireHeSerializedRelinKey?, AspireHeSerializedRelinKey?);
    v42 = v37;
    goto LABEL_17;
  }
  v48 = v57;
  outlined init with take of SecretKey(v38, v57, type metadata accessor for AspireHeSerializedRelinKey);
  v49 = specialized static AspireHeSerializedRelinKey.== infix(_:_:)(v45, v48);
  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireHeSerializedRelinKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  outlined destroy of AspireApiPECConfig(v45, type metadata accessor for AspireHeSerializedRelinKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
  if ((v49 & 1) != 0)
    goto LABEL_21;
LABEL_18:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static AspireHeSerializedCiphertext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v39 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of SecretKey(v22, v36, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      v25 = specialized static AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
LABEL_8:
  v26 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v3 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v14 = (uint64_t *)((char *)&v26 - v13);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v18, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  outlined init with copy of SecretKey(v27, v19, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of SecretKey((uint64_t)v18, (uint64_t)v14, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v19, (uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
      specialized static Data.== infix(_:_:)(*v14, v14[1]);
      if ((v23 & 1) != 0)
      {
        specialized static Data.== infix(_:_:)(v14[2], v14[3]);
        if ((v24 & 1) != 0)
        {
          type metadata accessor for UnknownStorage();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
          {
            outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
            outlined destroy of AspireApiPECConfig((uint64_t)v14, type metadata accessor for AspireHeSerializedSeededCiphertext);
            outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            v20 = 1;
            return v20 & 1;
          }
        }
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspireHeSerializedSeededCiphertext);
      outlined destroy of AspireApiPECConfig((uint64_t)v14, type metadata accessor for AspireHeSerializedSeededCiphertext);
      outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_13:
      v20 = 0;
      return v20 & 1;
    }
    v21 = type metadata accessor for AspireHeSerializedSeededCiphertext;
    v22 = (uint64_t)v14;
LABEL_7:
    outlined destroy of AspireApiPECConfig(v22, v21);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    goto LABEL_13;
  }
  outlined init with copy of SecretKey((uint64_t)v18, (uint64_t)v12, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21 = type metadata accessor for AspireHeSerializedFullCiphertext;
    v22 = (uint64_t)v12;
    goto LABEL_7;
  }
  outlined init with take of SecretKey(v19, (uint64_t)v5, type metadata accessor for AspireHeSerializedFullCiphertext);
  v20 = specialized static AspireHeSerializedFullCiphertext.== infix(_:_:)(v12, (uint64_t)v5);
  outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireHeSerializedFullCiphertext);
  outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspireHeSerializedFullCiphertext);
  outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  return v20 & 1;
}

uint64_t specialized static AspireHeSerializedDcrtPlaintext.== infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v13 & 1) != 0)
  {
    v14 = a3(0);
    v15 = (char *)a1 + *(int *)(v14 + 20);
    v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v16(v12, v15, v6);
    v16(v10, (char *)(a2 + *(int *)(v14 + 20)), v6);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static AspireHeSerializedRelinKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - v7;
  v8 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedKeySwitchKey?, AspireHeSerializedKeySwitchKey?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v23 = *(int *)(v22 + 20);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v24 = *(int *)(v22 + 20);
  v40 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v25, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v45;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, v45, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v38;
      outlined init with take of SecretKey(v25, v38, type metadata accessor for AspireHeSerializedKeySwitchKey);
      v29 = specialized static AspireHeSerializedKeySwitchKey.== infix(_:_:)(v27, v28);
      outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedKeySwitchKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      outlined destroy of AspireApiPECConfig(v27, type metadata accessor for AspireHeSerializedKeySwitchKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    outlined destroy of AspireApiPECConfig(v27, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireHeSerializedKeySwitchKey?, AspireHeSerializedKeySwitchKey?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
LABEL_8:
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v39, v44);
  v34 = v42;
  v32(v42, v40, v30);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v34, v30);
  v36(v33, v30);
  return v35 & 1;
}

uint64_t specialized static AspireHeEvaluationKeyConfig.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v43 - v7;
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  v23 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v24 = *(int *)(v23 + 28);
  v48 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = v23;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v25, (uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v27 = *(int *)(v26 + 28);
  v49 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_8;
    }
  }
  else
  {
    v30 = (uint64_t)v50;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v29(v28, 1, v8) != 1)
    {
      outlined init with take of SecretKey(v28, v30, type metadata accessor for AspireHeEncryptionParameters);
      v32 = specialized static AspireHeEncryptionParameters.== infix(_:_:)((uint64_t)v17, v30);
      outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if ((v32 & 1) == 0)
      {
LABEL_10:
        v31 = 0;
        return v31 & 1;
      }
LABEL_8:
      v33 = v48;
      v34 = v49;
      if (specialized static Array<A>.== infix(_:_:)(*v48, *v49)
        && *((unsigned __int8 *)v33 + 8) == *((unsigned __int8 *)v34 + 8))
      {
        v35 = (char *)v33 + *(int *)(v26 + 24);
        v37 = v46;
        v36 = v47;
        v38 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v39 = v44;
        v38(v44, v35, v47);
        v40 = v45;
        v38(v45, (char *)v34 + *(int *)(v26 + 24), v36);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        v41 = *(void (**)(char *, uint64_t))(v37 + 8);
        v41(v40, v36);
        v41(v39, v36);
        return v31 & 1;
      }
      goto LABEL_10;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  v31 = 0;
  return v31 & 1;
}

uint64_t specialized static AspireHeSerializedKeySwitchKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v42 - v7;
  v8 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v48 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v49 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v42 - v20;
  v22 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v23 = *(int *)(v22 + 20);
  v42 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v24 = *(int *)(v22 + 20);
  v43 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v25, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v34 = v48;
    v35 = v49;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v49, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    if (v26(v25, 1, v8) != 1)
    {
      v39 = v25;
      v40 = (uint64_t)v34;
      outlined init with take of SecretKey(v39, (uint64_t)v34, type metadata accessor for AspireHeSerializedCiphertextVec);
      if ((specialized static Array<A>.== infix(_:_:)(*v35, *v34) & 1) != 0)
      {
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = v47;
        v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireHeSerializedCiphertextVec);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireHeSerializedCiphertextVec);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        if ((v41 & 1) != 0)
          goto LABEL_4;
LABEL_9:
        v32 = 0;
        return v32 & 1;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v34, type metadata accessor for AspireHeSerializedCiphertextVec);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireHeSerializedCiphertextVec);
      v37 = (uint64_t)v13;
      v36 = &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?;
LABEL_8:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, v36);
      goto LABEL_9;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireHeSerializedCiphertextVec);
LABEL_7:
    v36 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertextVec?, AspireHeSerializedCiphertextVec?);
    v37 = (uint64_t)v13;
    goto LABEL_8;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_7;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
  v27 = v47;
LABEL_4:
  v28 = v46;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v30 = v44;
  v29(v44, v42, v27);
  v31 = v45;
  v29(v45, v43, v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AspireHeEncryptionParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || !specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16)))
  {
    goto LABEL_28;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      goto LABEL_11;
    v11 = 0;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
  {
LABEL_10:
    if (v11 != *(_QWORD *)(a2 + 24))
      goto LABEL_28;
    goto LABEL_11;
  }
  if (v11)
    goto LABEL_28;
LABEL_11:
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a1 + 48))
    v12 = v12 != 0;
  if (*(_BYTE *)(a2 + 48) == 1)
  {
    if (v13)
    {
      if (v12 != 1)
        goto LABEL_28;
    }
    else if (v12)
    {
      goto LABEL_28;
    }
  }
  else if (v12 != v13)
  {
    goto LABEL_28;
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a2 + 56);
  if (*(_BYTE *)(a2 + 64) == 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (v14 == 1)
          goto LABEL_26;
      }
      else if (v14 == 2)
      {
        goto LABEL_26;
      }
LABEL_28:
      v19 = 0;
      return v19 & 1;
    }
    if (v14)
      goto LABEL_28;
  }
  else if (v14 != v15)
  {
    goto LABEL_28;
  }
LABEL_26:
  v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  v17 = a1 + *(int *)(v16 + 40);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, v17, v4);
  v18(v8, a2 + *(int *)(v16 + 40), v4);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t type metadata accessor for AspireHeSerializedKeySwitchKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedKeySwitchKey);
}

uint64_t type metadata accessor for AspireHeSerializedCiphertextVec(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedCiphertextVec);
}

uint64_t type metadata accessor for AspireHeSerializedDcrtPlaintext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedDcrtPlaintext);
}

uint64_t outlined assign with take of AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
}

uint64_t type metadata accessor for AspireHeSerializedSeededCiphertext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedSeededCiphertext);
}

uint64_t type metadata accessor for AspireHeSerializedFullCiphertext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedFullCiphertext);
}

uint64_t type metadata accessor for AspireHeSerializedCiphertext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedCiphertext);
}

uint64_t type metadata accessor for AspireHeSerializedSecretKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireHeSerializedSecretKey);
}

unint64_t lazy protocol witness table accessor for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeErrorStdDev, &type metadata for AspireHeErrorStdDev);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeErrorStdDev, &type metadata for AspireHeErrorStdDev);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeErrorStdDev, &type metadata for AspireHeErrorStdDev);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev;
  if (!lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeErrorStdDev, &type metadata for AspireHeErrorStdDev);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeErrorStdDev and conformance AspireHeErrorStdDev);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeSecurityLevel, &type metadata for AspireHeSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeSecurityLevel, &type metadata for AspireHeSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeSecurityLevel, &type metadata for AspireHeSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel;
  if (!lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireHeSecurityLevel, &type metadata for AspireHeSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeSecurityLevel and conformance AspireHeSecurityLevel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspireHeSecurityLevel()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspireHeSecurityLevel] and conformance [A], &demangling cache variable for type metadata for [AspireHeSecurityLevel]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspireHeErrorStdDev()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspireHeErrorStdDev] and conformance [A], &demangling cache variable for type metadata for [AspireHeErrorStdDev]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AspireHeHeScheme()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AspireHeHeScheme] and conformance [A], &demangling cache variable for type metadata for [AspireHeHeScheme]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedDcrtPlaintext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for Message in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedCiphertextVec()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedSeededCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, type metadata accessor for AspireHeSerializedSeededCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for Message in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedFullCiphertext()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, type metadata accessor for AspireHeSerializedFullCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedKeySwitchKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedGaloisKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedRelinKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedSecretKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSecretKey and conformance AspireHeSerializedSecretKey, type metadata accessor for AspireHeSerializedSecretKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSecretKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for Message in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for Hashable in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for Equatable in AspireHeSerializedEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for Message in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for Hashable in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for Equatable in AspireHeEvaluationKeyConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
}

uint64_t base witness table accessor for Message in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
}

uint64_t base witness table accessor for Hashable in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
}

uint64_t base witness table accessor for Equatable in AspireHeEncryptionParameters()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
}

uint64_t sub_237D09C30@<X0>(_OWORD *a1@<X8>)
{
  return AspireHeSerializedCiphertext.seeded.getter(a1);
}

uint64_t sub_237D09C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedCiphertext.seeded : AspireHeSerializedCiphertext(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedSeededCiphertext);
}

uint64_t sub_237D09C70@<X0>(uint64_t a1@<X8>)
{
  return AspireHeSerializedCiphertext.full.getter(a1);
}

uint64_t sub_237D09C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedCiphertext.seeded : AspireHeSerializedCiphertext(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedFullCiphertext);
}

uint64_t sub_237D09CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedKeySwitchKey, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

uint64_t sub_237D09CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedRelinKey, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t sub_237D09D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireHeSerializedKeySwitchKey.keySwitchKey : AspireHeSerializedKeySwitchKey(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
}

uint64_t sub_237D09D48@<X0>(uint64_t a1@<X8>)
{
  return AspireHeEvaluationKeyConfig.encryptionParameters.getter(a1);
}

ValueMetadata *type metadata accessor for AspireHeSecurityLevel()
{
  return &type metadata for AspireHeSecurityLevel;
}

ValueMetadata *type metadata accessor for AspireHeErrorStdDev()
{
  return &type metadata for AspireHeErrorStdDev;
}

ValueMetadata *type metadata accessor for AspireHeHeScheme()
{
  return &type metadata for AspireHeHeScheme;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedDcrtPlaintext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedDcrtPlaintext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AspireHeSerializedDcrtPlaintext()
{
  return type metadata completion function for AspireHeSerializedDcrtPlaintext();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedCiphertextVec()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedCiphertextVec()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AspireHeSerializedCiphertextVec()
{
  return type metadata completion function for AspireHeSerializedDcrtPlaintext();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        v15 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
      }
      else
      {
        v20 = a2[2];
        v21 = a2[3];
        outlined copy of Data._Representation(v20, v21);
        a1[2] = v20;
        a1[3] = v21;
        v22 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v26 = *(int *)(a3 + 20);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    }
    else
    {
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      v6 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    }
    v7 = a1 + v6;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = a1 + *(int *)(a2 + 20);
  v10 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for AspireHeSerializedCiphertext(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = *a2;
    v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      v13 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
    }
    else
    {
      v18 = a2[2];
      v19 = a2[3];
      outlined copy of Data._Representation(v18, v19);
      a1[2] = v18;
      a1[3] = v19;
      v20 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v24 = *(int *)(a3 + 20);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        a1[3] = a2[3];
        v14 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        v18(v15, v16, v17);
      }
      else
      {
        v28 = a2[2];
        v29 = a2[3];
        outlined copy of Data._Representation(v28, v29);
        a1[2] = v28;
        a1[3] = v29;
        v30 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
        v31 = (char *)a1 + v30;
        v32 = (char *)a2 + v30;
        v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v20 = swift_getEnumCaseMultiPayload();
    v21 = *a2;
    v22 = a2[1];
    outlined copy of Data._Representation(*a2, v22);
    *a1 = v21;
    a1[1] = v22;
    if (v20 == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      v23 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      v27(v24, v25, v26);
    }
    else
    {
      v39 = a2[2];
      v40 = a2[3];
      outlined copy of Data._Representation(v39, v40);
      a1[2] = v39;
      a1[3] = v40;
      v41 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v34 = *(int *)(a3 + 20);
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
      v10 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    else
      v10 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_OWORD *assignWithTake for AspireHeSerializedCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      a1[1] = a2[1];
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      else
        v12 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v17 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (v17 == 1)
      v18 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    else
      v18 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v22 = *(int *)(a3 + 20);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedCiphertext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0A958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedCiphertext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0A9DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireHeSerializedCiphertext()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    if (EnumCaseMultiPayload == 1)
    {
      v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      v10 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
    }
    else
    {
      v16 = a2[2];
      v17 = a2[3];
      outlined copy of Data._Representation(v16, v17);
      a1[2] = v16;
      a1[3] = v17;
      v18 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    v3 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    v3 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
  }
  v4 = a1 + v3;
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  else
  {
    v13 = a2[2];
    v14 = a2[3];
    outlined copy of Data._Representation(v13, v14);
    a1[2] = v13;
    a1[3] = v14;
    v15 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      v7 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    else
    {
      v12 = a2[2];
      v13 = a2[3];
      outlined copy of Data._Representation(v12, v13);
      a1[2] = v12;
      a1[3] = v13;
      v14 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  a1[1] = a2[1];
  if (EnumCaseMultiPayload == 1)
    v5 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
  else
    v5 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
      v5 = *(int *)(type metadata accessor for AspireHeSerializedFullCiphertext(0) + 28);
    else
      v5 = *(int *)(type metadata accessor for AspireHeSerializedSeededCiphertext(0) + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AspireHeSerializedSeededCiphertext(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AspireHeSerializedFullCiphertext(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedSeededCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedSeededCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedSeededCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedSeededCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedSeededCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for AspireHeSerializedSeededCiphertext(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedSeededCiphertext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0B468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedSeededCiphertext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237D0B4FC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireHeSerializedSeededCiphertext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedFullCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedFullCiphertext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for AspireHeSerializedFullCiphertext(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  a1[3] = *(_QWORD *)(a2 + 24);
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedFullCiphertext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0B914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedFullCiphertext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0B99C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireHeSerializedFullCiphertext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AspireHeSerializedKeySwitchKey(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v10 = *v11;
      v16 = *(int *)(v12 + 20);
      v17 = &v10[v16];
      v18 = (char *)v11 + v16;
      swift_bridgeObjectRetain();
      v8(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5 + *(int *)(v6 + 20), v4);
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = *(int *)(v11 + 20);
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    swift_bridgeObjectRetain();
    v7((uint64_t)v15, (uint64_t)v16, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20), v6);
      return a1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireHeSerializedCiphertextVec);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *v10 = *v11;
  v17 = *(int *)(v12 + 20);
  v18 = (char *)v10 + v17;
  v19 = (char *)v11 + v17;
  v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  v20(v18, v19, v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

char *initializeWithTake for AspireHeSerializedKeySwitchKey(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v7(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *v10 = *v11;
      swift_bridgeObjectRelease();
      v8((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20), v6);
      return a1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireHeSerializedCiphertextVec);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  *v10 = *v11;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v10 + *(int *)(v12 + 20), (char *)v11 + *(int *)(v12 + 20), v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedKeySwitchKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0C124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_21Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedKeySwitchKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0C13C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_22Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
}

void type metadata completion function for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AspireHeSerializedKeySwitchKey(a1, a2, a3, &lazy cache variable for type metadata for AspireHeSerializedCiphertextVec?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedCiphertextVec);
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedGaloisKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedGaloisKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedRelinKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = *(int *)(v12 + 20);
      v17 = &v10[v16];
      v18 = &v11[v16];
      v19 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v17 = *(_QWORD *)v18;
        v22 = *(int *)(v19 + 20);
        v25 = &v17[v22];
        v23 = &v18[v22];
        swift_bridgeObjectRetain();
        v8((uint64_t *)v25, (uint64_t *)v23, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    v8 = v5 + *(int *)(v6 + 20);
    v9 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8 + *(int *)(v9 + 20), v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v23;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = *(int *)(v11 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v20 = *(int *)(v17 + 20);
      v23 = &v15[v20];
      v21 = &v16[v20];
      swift_bridgeObjectRetain();
      v7((uint64_t)v23, (uint64_t)v21, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v42;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      v27 = *(int *)(v12 + 20);
      v28 = (char *)(v10 + v27);
      v29 = &v11[v27];
      v30 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
      v33 = v32(v28, 1, v30);
      v34 = v32(v29, 1, v30);
      if (v33)
      {
        if (!v34)
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          v35 = *(int *)(v30 + 20);
          v36 = &v28[v35];
          v37 = &v29[v35];
          v38 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
          swift_bridgeObjectRetain();
          v38(v36, v37, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
          return a1;
        }
      }
      else
      {
        if (!v34)
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v8((uint64_t)&v28[*(int *)(v30 + 20)], (uint64_t)&v29[*(int *)(v30 + 20)], v6);
          return a1;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      v25 = v28;
      v26 = v29;
      goto LABEL_8;
    }
    outlined destroy of AspireApiPECConfig(v10, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_7:
    v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                - 8)
                    + 64);
    v25 = (void *)v10;
    v26 = v11;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  v18 = *(int *)(v12 + 20);
  v19 = (_QWORD *)(v10 + v18);
  v20 = &v11[v18];
  v21 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v19 = *(_QWORD *)v20;
    v39 = *(int *)(v21 + 20);
    v42 = (char *)v19 + v39;
    v40 = &v20[v39];
    swift_bridgeObjectRetain();
    v17((uint64_t)v42, v40, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = *(int *)(v11 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v7((uint64_t)&v15[*(int *)(v17 + 20)], (uint64_t)&v16[*(int *)(v17 + 20)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      v27 = *(int *)(v12 + 20);
      v28 = (char *)(v10 + v27);
      v29 = &v11[v27];
      v30 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
      v33 = v32(v28, 1, v30);
      v34 = v32(v29, 1, v30);
      if (v33)
      {
        if (!v34)
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v28[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
          return a1;
        }
      }
      else
      {
        if (!v34)
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          swift_bridgeObjectRelease();
          v8((uint64_t)&v28[*(int *)(v30 + 20)], (uint64_t)&v29[*(int *)(v30 + 20)], v6);
          return a1;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      v25 = v28;
      v26 = v29;
      goto LABEL_8;
    }
    outlined destroy of AspireApiPECConfig(v10, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_7:
    v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                - 8)
                    + 64);
    v25 = (void *)v10;
    v26 = v11;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v17(v10, v11, v6);
  v18 = *(int *)(v12 + 20);
  v19 = (_QWORD *)(v10 + v18);
  v20 = &v11[v18];
  v21 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v19 = *(_QWORD *)v20;
    v17((uint64_t)v19 + *(int *)(v21 + 20), &v20[*(int *)(v21 + 20)], v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedRelinKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0CC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_21Tm(a1, a2, a3, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t __swift_get_extra_inhabitant_index_21Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v12 = a1 + *(int *)(a3 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedRelinKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0CD28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_22Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
}

uint64_t __swift_store_extra_inhabitant_index_22Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = a1 + *(int *)(a4 + 20);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void type metadata completion function for AspireHeSerializedRelinKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AspireHeSerializedKeySwitchKey(a1, a2, a3, &lazy cache variable for type metadata for AspireHeSerializedKeySwitchKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedKeySwitchKey);
}

void type metadata completion function for AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a4, a5);
    if (v8 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedDcrtPlaintext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for AspireHeSerializedDcrtPlaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AspireHeSerializedDcrtPlaintext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for AspireHeSerializedDcrtPlaintext(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedSecretKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedSecretKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_indexTm_0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireHeSerializedEvaluationKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  uint64_t v39;
  char *v40;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *v10 = *v11;
      v16 = *(int *)(v12 + 20);
      v17 = (char *)v10 + v16;
      v18 = (char *)v11 + v16;
      swift_bridgeObjectRetain();
      v8((uint64_t *)v17, (uint64_t *)v18, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v19 = *(int *)(a3 + 24);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v20, (uint64_t *)v21, v7);
      v25 = *(int *)(v22 + 20);
      v26 = &v20[v25];
      v27 = &v21[v25];
      v28 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v26, (uint64_t *)v27, v7);
        v31 = *(int *)(v28 + 20);
        v40 = v26;
        __dst = &v26[v31];
        v32 = &v27[v31];
        v33 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v39 = *(_QWORD *)(v33 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v32, 1, v33))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dst = *(_QWORD *)v32;
          v35 = *(int *)(v33 + 20);
          v38 = &__dst[v35];
          v36 = &v32[v35];
          swift_bridgeObjectRetain();
          v8((uint64_t *)v38, (uint64_t *)v36, v7);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v33);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v40, 0, 1, v28);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t destroy for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v14(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    v14(v5 + *(int *)(v6 + 20), v4);
  }
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for AspireHeSerializedRelinKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v14(v7, v4);
    v10 = v7 + *(int *)(v8 + 20);
    v11 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
    if (!(_DWORD)result)
    {
      v14(v10, v4);
      v12 = v10 + *(int *)(v11 + 20);
      v13 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
      if (!(_DWORD)result)
      {
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12 + *(int *)(v13 + 20), v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v36;
  uint64_t v37;
  char *v38;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = *(int *)(v11 + 20);
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    swift_bridgeObjectRetain();
    v7((uint64_t)v15, (uint64_t)v16, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 24);
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v18, (uint64_t)v19, v6);
    v23 = *(int *)(v20 + 20);
    v24 = &v18[v23];
    v25 = &v19[v23];
    v26 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v24, (uint64_t)v25, v6);
      v29 = *(int *)(v26 + 20);
      v38 = v24;
      __dst = &v24[v29];
      v30 = &v25[v29];
      v31 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v37 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v30, 1, v31))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v30;
        v33 = *(int *)(v31 + 20);
        v36 = &__dst[v33];
        v34 = &v30[v33];
        swift_bridgeObjectRetain();
        v7((uint64_t)v36, (uint64_t)v34, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v31);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v38, 0, 1, v26);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  int v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  int v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  void (*__dst)(uint64_t, uint64_t, uint64_t);
  char *__dsta;
  uint64_t v81;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  __dst(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v81 = a1;
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *v9 = *v10;
      v16 = *(int *)(v11 + 20);
      v17 = (char *)v9 + v16;
      v18 = (char *)v10 + v16;
      v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      v19(v17, v18, v6);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireHeSerializedGaloisKey);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *v9 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
LABEL_7:
  v21 = v81;
  v22 = *(int *)(a3 + 24);
  v23 = v81 + v22;
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27((uint64_t)v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v30 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
      v30(v23, v24, v6);
      v31 = *(int *)(v25 + 20);
      v32 = (char *)(v23 + v31);
      v33 = &v24[v31];
      v34 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v30((uint64_t)v32, v33, v6);
        v53 = *(int *)(v34 + 20);
        v78 = v32;
        __dsta = &v32[v53];
        v54 = &v33[v53];
        v55 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dsta, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dsta = *(_QWORD *)v54;
          v58 = *(int *)(v55 + 20);
          v77 = &__dsta[v58];
          v59 = &v54[v58];
          swift_bridgeObjectRetain();
          v30((uint64_t)v77, v59, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dsta, 0, 1, v55);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v78, 0, 1, v34);
      }
      v21 = v81;
      v60 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56);
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  if (v29)
  {
    outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_13:
    v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v38 = (void *)v23;
    v39 = v24;
    goto LABEL_14;
  }
  __dst(v23, (uint64_t)v24, v6);
  v40 = *(int *)(v25 + 20);
  v23 += v40;
  v41 = &v24[v40];
  v25 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v42 = *(_QWORD *)(v25 - 8);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v23, 1, v25);
  v45 = v43((uint64_t)v41, 1, v25);
  if (v44)
  {
    if (!v45)
    {
      v46 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
      v46(v23, v41, v6);
      v47 = *(int *)(v25 + 20);
      v48 = (_QWORD *)(v23 + v47);
      v49 = &v41[v47];
      v50 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        *v48 = *(_QWORD *)v49;
        v74 = *(int *)(v50 + 20);
        v75 = (char *)v48 + v74;
        v76 = &v49[v74];
        swift_bridgeObjectRetain();
        v46((uint64_t)v75, v76, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v21 = v81;
      v60 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56);
LABEL_28:
      v60(v23, 0, 1, v25);
      return v21;
    }
  }
  else
  {
    if (!v45)
    {
      __dst(v23, (uint64_t)v41, v6);
      v62 = *(int *)(v25 + 20);
      v63 = (char *)(v23 + v62);
      v64 = &v41[v62];
      v65 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v66 = *(_QWORD *)(v65 - 8);
      v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
      v68 = v67(v63, 1, v65);
      v69 = v67(v64, 1, v65);
      if (v68)
      {
        if (!v69)
        {
          *(_QWORD *)v63 = *(_QWORD *)v64;
          v70 = *(int *)(v65 + 20);
          v71 = &v63[v70];
          v72 = &v64[v70];
          v73 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
          swift_bridgeObjectRetain();
          v73(v71, v72, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
          return v21;
        }
      }
      else
      {
        if (!v69)
        {
          *(_QWORD *)v63 = *(_QWORD *)v64;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          __dst((uint64_t)&v63[*(int *)(v65 + 20)], (uint64_t)&v64[*(int *)(v65 + 20)], v6);
          return v21;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v63, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      v38 = v63;
      v39 = v64;
      goto LABEL_14;
    }
    outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                              - 8)
                  + 64);
  v38 = (void *)v23;
  v39 = v41;
LABEL_14:
  memcpy(v38, v39, v37);
  return v21;
}

uint64_t initializeWithTake for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 24);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v20 = *(int *)(v17 + 20);
    v21 = &v15[v20];
    v22 = &v16[v20];
    v23 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v21, (uint64_t)v22, v6);
      v26 = *(int *)(v23 + 20);
      v32 = v21;
      __dst = &v21[v26];
      v27 = &v22[v26];
      v28 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v31 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v27, 1, v28))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v27;
        v7((uint64_t)&__dst[*(int *)(v28 + 20)], (uint64_t)&v27[*(int *)(v28 + 20)], v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v28);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v32, 0, 1, v23);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeSerializedEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  char *v64;
  void (*__dst)(uint64_t, uint64_t, uint64_t);
  char *__dsta;
  uint64_t v67;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  __dst(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v67 = a1;
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireHeSerializedGaloisKey);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_bridgeObjectRelease();
  __dst((uint64_t)&v9[*(int *)(v11 + 20)], (uint64_t)&v10[*(int *)(v11 + 20)], v6);
LABEL_7:
  v17 = v67;
  v18 = *(int *)(a3 + 24);
  v19 = v67 + v18;
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23((uint64_t)v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v26 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v26(v19, v20, v6);
      v27 = *(int *)(v21 + 20);
      v28 = (char *)(v19 + v27);
      v29 = &v20[v27];
      v30 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v26((uint64_t)v28, v29, v6);
        v49 = *(int *)(v30 + 20);
        v64 = v28;
        __dsta = &v28[v49];
        v50 = &v29[v49];
        v51 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v52 = *(_QWORD *)(v51 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dsta, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dsta = *(_QWORD *)v50;
          v26((uint64_t)&__dsta[*(int *)(v51 + 20)], &v50[*(int *)(v51 + 20)], v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(__dsta, 0, 1, v51);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v64, 0, 1, v30);
      }
      v17 = v67;
      v54 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56);
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  if (v25)
  {
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedRelinKey);
LABEL_13:
    v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v34 = (void *)v19;
    v35 = v20;
    goto LABEL_14;
  }
  __dst(v19, (uint64_t)v20, v6);
  v36 = *(int *)(v21 + 20);
  v19 += v36;
  v37 = &v20[v36];
  v21 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v38 = *(_QWORD *)(v21 - 8);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v19, 1, v21);
  v41 = v39((uint64_t)v37, 1, v21);
  if (v40)
  {
    if (!v41)
    {
      v42 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v42(v19, v37, v6);
      v43 = *(int *)(v21 + 20);
      v44 = (_QWORD *)(v19 + v43);
      v45 = &v37[v43];
      v46 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        *v44 = *(_QWORD *)v45;
        v42((uint64_t)v44 + *(int *)(v46 + 20), &v45[*(int *)(v46 + 20)], v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      v54 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56);
LABEL_28:
      v54(v19, 0, 1, v21);
      return v17;
    }
  }
  else
  {
    if (!v41)
    {
      __dst(v19, (uint64_t)v37, v6);
      v56 = *(int *)(v21 + 20);
      v57 = (char *)(v19 + v56);
      v58 = &v37[v56];
      v59 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v60 = *(_QWORD *)(v59 - 8);
      v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
      v62 = v61(v57, 1, v59);
      v63 = v61(v58, 1, v59);
      if (v62)
      {
        if (!v63)
        {
          *(_QWORD *)v57 = *(_QWORD *)v58;
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v57[*(int *)(v59 + 20)], &v58[*(int *)(v59 + 20)], v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
          return v17;
        }
      }
      else
      {
        if (!v63)
        {
          *(_QWORD *)v57 = *(_QWORD *)v58;
          swift_bridgeObjectRelease();
          __dst((uint64_t)&v57[*(int *)(v59 + 20)], (uint64_t)&v58[*(int *)(v59 + 20)], v6);
          return v17;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v57, type metadata accessor for AspireHeSerializedCiphertextVec);
      }
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      v34 = v57;
      v35 = v58;
      goto LABEL_14;
    }
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                              - 8)
                  + 64);
  v34 = (void *)v19;
  v35 = v37;
LABEL_14:
  memcpy(v34, v35, v33);
  return v17;
}

uint64_t getEnumTagSinglePayload for AspireHeSerializedEvaluationKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0E784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspireHeSerializedEvaluationKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0E830(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireHeSerializedEvaluationKey()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeSerializedGaloisKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedGaloisKey);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeSerializedRelinKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedRelinKey);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_OWORD *)(v7 + v13);
    v15 = (_OWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for AspireHeEncryptionParameters(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v19 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v14 + 3) = v19;
      *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
      *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
      *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
      v20 = *(int *)(v16 + 40);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 40), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 3) = v17;
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
    v18 = *(int *)(v14 + 40);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v14 + 24);
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
      *(_QWORD *)(v13 + 24) = v28;
      v29 = *(_QWORD *)(v14 + 40);
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 40) = v29;
      v30 = *(_QWORD *)(v14 + 56);
      *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
      *(_QWORD *)(v13 + 56) = v30;
      v11(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v9);
      return a1;
    }
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  v19 = *(_QWORD *)(v14 + 24);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_QWORD *)(v13 + 24) = v19;
  v20 = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 40) = v20;
  v21 = *(_QWORD *)(v14 + 56);
  *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
  *(_QWORD *)(v13 + 56) = v21;
  v22 = *(int *)(v15 + 40);
  v23 = v13 + v22;
  v24 = v14 + v22;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v25(v23, v24, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 3) = v17;
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
    v10((char *)v12 + *(int *)(v14 + 40), (char *)v13 + *(int *)(v14 + 40), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AspireHeEvaluationKeyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
      v11(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v9);
      return a1;
    }
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v19 = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = v19;
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeEvaluationKeyConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0F254(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeEvaluationKeyConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237D0F304(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireHeEvaluationKeyConfig()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AspireHeEncryptionParameters(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 56) = a2[7];
    v6 = *(int *)(a3 + 40);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(int *)(a3 + 40);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for AspireHeEncryptionParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(int *)(a3 + 40);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 64) = v6;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v9, v8, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireHeEncryptionParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0F7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireHeEncryptionParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D0F87C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireHeEncryptionParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t RequestContext.useCase.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_useCase);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t RequestContext.networkManager()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[5];

  v5 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NetworkConfig((uint64_t)v2 + *(int *)(a1 + 32), (uint64_t)v7);
  v11 = objc_msgSend(*v2, sel_sourceApplicationBundleIdentifier);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  outlined init with take of NetworkConfig((uint64_t)v7, (uint64_t)v10);
  v16 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v16 = v13;
  v16[1] = v15;
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(_QWORD *__return_ptr, char *))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(v20, v10);
  outlined destroy of NetworkManagerConfig((uint64_t)v10);
  outlined init with copy of NetworkManager?((uint64_t)v20, (uint64_t)&v18);
  if (v19)
  {
    outlined destroy of NetworkManager?((uint64_t)v20);
    return outlined init with take of LocalizedError(&v18, a2);
  }
  else
  {
    outlined destroy of NetworkManager?((uint64_t)&v18);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return outlined destroy of NetworkManager?((uint64_t)v20);
  }
}

uint64_t outlined destroy of NetworkManagerConfig(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NetworkManagerConfig(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of NetworkManager?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NetworkManager?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RequestContext.init(clientConfig:staticConfig:networkConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;

  *(_QWORD *)a5 = a1;
  v9 = type metadata accessor for RequestContext(0, a4, a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a5[*(int *)(v9 + 28)], a2, a4);
  return outlined init with take of NetworkConfig(a3, (uint64_t)&a5[*(int *)(v9 + 32)]);
}

uint64_t type metadata accessor for RequestContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RequestContext);
}

id RequestContext.clientConfig.getter()
{
  id *v0;

  return *v0;
}

uint64_t RequestContext.staticConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t RequestContext.networkConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of NetworkConfig(v2 + *(int *)(a1 + 32), a2);
}

uint64_t type metadata instantiation function for RequestContext()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for RequestContext()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NetworkConfig(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for RequestContext(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  int v19;
  char *v20;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  int v51;
  int v52;
  size_t v53;
  uint64_t v54;
  size_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v59 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = v12 | 7;
  if ((_DWORD)v11)
    v14 = v11 - 1;
  else
    v14 = 0;
  if (v11 <= 0xFE)
    v15 = 254;
  else
    v15 = *(_DWORD *)(v10 + 84);
  v16 = *(_QWORD *)(v10 + 64);
  v17 = (v16 + v12) & ~v12;
  if ((_DWORD)v11)
    v18 = *(_QWORD *)(v10 + 64);
  else
    v18 = v16 + 1;
  v19 = (*(_DWORD *)(v10 + 80) | v6) & 0x100000;
  v20 = (char *)*a2;
  *a1 = *a2;
  if ((v12 | (unint64_t)v6) <= 7
    && v19 == 0
    && (((v12 | 7) + v8 + ((v6 + 8) & ~(unint64_t)v6)) & ~(v12 | 7))
     + ((v17 + v18 + 31) & 0xFFFFFFFFFFFFFFF8)
     + 16 <= 0x18)
  {
    v51 = v15;
    v52 = v14;
    v57 = v16 + v12;
    v58 = (v16 + v12) & ~v12;
    v53 = v17 + v18;
    v54 = v9;
    v55 = v18;
    v56 = a1;
    v24 = ~v13;
    v25 = ~v12;
    v26 = (char *)a2 + v7;
    v27 = ((unint64_t)a1 + v7 + 8) & ~v7;
    v28 = (unint64_t)(v26 + 8) & ~v7;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v30 = v20;
    v29(v27, v28, v59);
    v31 = (v27 + v8 + v13) & v24;
    v32 = (v28 + v8 + v13) & v24;
    if (v11 <= 0xFD)
    {
      v36 = (char *)((v57 + v32) & v25);
      if (v52 == v51)
      {
        if (v11 < 2)
        {
          v34 = v54;
          v35 = v55;
          v37 = v57;
LABEL_28:
          v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
          v39(v31, v32, v34);
          v40 = (void *)((v37 + v31) & v25);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v36, 1, v34))
          {
            memcpy(v40, v36, v35);
          }
          else
          {
            v39((uint64_t)v40, (uint64_t)v36, v34);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v40, 0, 1, v34);
          }
          v41 = v58;
          v42 = ((unint64_t)v40 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
          v43 = (unint64_t)&v36[v35 + 7];
          v44 = v43 & 0xFFFFFFFFFFFFFFF8;
          v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 8);
          if ((v45 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v42 = *(_OWORD *)v44;
          }
          else
          {
            v46 = *(_QWORD *)v44;
            outlined copy of Data._Representation(*(_QWORD *)v44, *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 8));
            v41 = v58;
            *(_QWORD *)v42 = v46;
            *(_QWORD *)(v42 + 8) = v45;
          }
          v23 = v56;
          *(_BYTE *)(v42 + 16) = *(_BYTE *)(v44 + 16);
          goto LABEL_36;
        }
        v34 = v54;
        v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))((v57 + v32) & v25, v11, v54);
        v35 = v55;
        v37 = v57;
        if (v38 < 2)
          goto LABEL_28;
      }
      else
      {
        v34 = v54;
        v35 = v55;
        if (*(unsigned __int8 *)(((unint64_t)&v36[v55 + 7] & 0xFFFFFFFFFFFFF8) + 0x10) < 2u)
        {
LABEL_26:
          v37 = v57;
          v36 = (char *)((v57 + v32) & v25);
          goto LABEL_28;
        }
      }
    }
    else
    {
      v33 = (v28 + v8 + v13) & v24;
      v34 = v54;
      v35 = v55;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33, v11, v54))
        goto LABEL_26;
    }
    memcpy((void *)v31, (const void *)v32, ((v53 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    v23 = v56;
    v41 = v58;
LABEL_36:
    v47 = ((v41 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    v48 = (_QWORD *)((v31 | 7) + v47);
    v49 = (_QWORD *)((v32 | 7) + v47);
    *v48 = *v49;
    v48[1] = v49[1];
    swift_bridgeObjectRetain();
    return v23;
  }
  v23 = (void **)&v20[((v12 | v6) & 0xF8 ^ 0x1F8) & ((v12 | v6) + 16)];
  swift_retain();
  return v23;
}

uint64_t destroy for RequestContext(id *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v6 + (v9 | 7)) & ~(v9 | 7);
  v11 = *(_DWORD *)(v8 + 84);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = ~v9;
  if (v11 <= 0xFD)
  {
    v14 = (v12 + v9 + v10) & v13;
    if (v11)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v12 + 1;
    if (*(unsigned __int8 *)(((v14 + v15 + 7) & 0xFFFFFFFFFFFFF8) + 0x10) >= 2u)
      return swift_bridgeObjectRelease();
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))(v10, *(unsigned int *)(v8 + 84), v7))
      return swift_bridgeObjectRelease();
    v14 = (v12 + v9 + v10) & v13;
  }
  v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v16(v10, v7);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7))
    v16(v14, v7);
  if (v11)
    v17 = v12;
  else
    v17 = v12 + 1;
  v18 = (uint64_t *)((v17 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  if ((v19 & 0x3000000000000000) == 0)
    outlined consume of Data._Representation(*v18, v19);
  return swift_bridgeObjectRelease();
}

void **initializeWithCopy for RequestContext(void **a1, void **a2, uint64_t a3)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  size_t v38;
  void **v39;

  v3 = a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v4;
  v10(v8, v9, v5);
  v12 = *(_QWORD *)(v6 + 64);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + v12;
  v17 = (v16 + v8) & ~(v15 | 7);
  v18 = (v16 + v9) & ~(v15 | 7);
  v19 = *(_DWORD *)(v14 + 84);
  v20 = *(_QWORD *)(v14 + 64);
  v21 = ~v15;
  v22 = v20 + v15;
  v23 = (v20 + v15) & ~v15;
  if (v19 <= 0xFD)
  {
    if (v19)
      v25 = *(_QWORD *)(v14 + 64);
    else
      v25 = v20 + 1;
    if (*(unsigned __int8 *)(((((v22 + v18) & v21) + v25 + 7) & 0xFFFFFFFFFFFFF8) + 0x10) >= 2u)
      goto LABEL_3;
  }
  else if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v14 + 48))(v18, *(unsigned int *)(v14 + 84), v13))
  {
LABEL_3:
    if (v19)
      v24 = v20;
    else
      v24 = v20 + 1;
    memcpy((void *)v17, (const void *)v18, ((v24 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_23;
  }
  v38 = v23;
  v39 = v3;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v26(v17, v18, v13);
  v27 = (void *)((v22 + v17) & v21);
  v28 = (char *)((v22 + v18) & v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v28, 1, v13))
  {
    if (v19)
      v24 = v20;
    else
      v24 = v20 + 1;
    memcpy(v27, v28, v24);
  }
  else
  {
    v26((uint64_t)v27, (uint64_t)v28, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
    if (v19)
      v24 = v20;
    else
      v24 = v20 + 1;
  }
  v29 = ((unint64_t)v27 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (unint64_t)&v28[v24 + 7];
  v31 = v30 & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 8);
  if ((v32 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v29 = *(_OWORD *)v31;
  }
  else
  {
    v33 = *(_QWORD *)v31;
    outlined copy of Data._Representation(*(_QWORD *)v31, *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v29 = v33;
    *(_QWORD *)(v29 + 8) = v32;
  }
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v31 + 16);
  v23 = v38;
  v3 = v39;
LABEL_23:
  v34 = ((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  v35 = (_QWORD *)((v17 | 7) + v34);
  v36 = (_QWORD *)((v18 | 7) + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  return v3;
}

void **assignWithCopy for RequestContext(void **a1, void **a2, uint64_t a3)
{
  void **v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  _BOOL8 v28;
  size_t v29;
  size_t v30;
  unsigned int v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  char *v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  void *v39;
  size_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  size_t v43;
  size_t v44;
  uint64_t *v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  size_t v54;
  size_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  size_t v70;
  void **v71;

  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  v12 = ((unint64_t)a2 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 | 7) + v13;
  v18 = (v17 + v11) & ~(v16 | 7);
  v19 = (v17 + v12) & ~(v16 | 7);
  v20 = *(unsigned int *)(v15 + 84);
  v21 = *(_QWORD *)(v15 + 64);
  v22 = ~v16;
  v23 = v21 + v16;
  v24 = (v21 + v16) & ~v16;
  v70 = v24;
  v71 = v5;
  if (v20 <= 0xFD)
  {
    if ((_DWORD)v20)
      v30 = *(_QWORD *)(v15 + 64);
    else
      v30 = v21 + 1;
    v31 = *(unsigned __int8 *)(((((v23 + v19) & v22) + v30 + 7) & 0xFFFFFFFFFFFFF8) + 0x10);
    if (*(unsigned __int8 *)(((((v23 + v18) & v22) + v30 + 7) & 0xFFFFFFFFFFFFF8) + 0x10) >= 2u)
    {
      if (v31 >= 2)
        goto LABEL_4;
      goto LABEL_17;
    }
    if (v31 >= 2)
      goto LABEL_23;
    goto LABEL_13;
  }
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v26 = v25(v18, v20, v14);
  v27 = v25(v19, v20, v14);
  if (!v26)
  {
    if (v27)
    {
LABEL_23:
      v41 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v41(v18, v14);
      v42 = (v23 + v18) & v22;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v42, 1, v14))
        v41((v23 + v18) & v22, v14);
      v28 = (_DWORD)v20 == 0;
      if ((_DWORD)v20)
        v43 = v21;
      else
        v43 = v21 + 1;
      v44 = v43 + 7;
      v45 = (uint64_t *)((v43 + 7 + v42) & 0xFFFFFFFFFFFFFFF8);
      v46 = v45[1];
      if ((v46 & 0x3000000000000000) == 0)
        outlined consume of Data._Representation(*v45, v46);
      v47 = v44 + v70;
      v24 = v70;
      memcpy((void *)v18, (const void *)v19, (v47 & 0xFFFFFFFFFFFFFFF8) + 17);
      goto LABEL_54;
    }
LABEL_13:
    v32 = (void *)((v23 + v19) & v22);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
    v69(v18, v19, v14);
    v33 = (void *)((v23 + v18) & v22);
    v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
    v35 = v34(v33, 1, v14);
    v36 = v34(v32, 1, v14);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v33, v32, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v33, 0, 1, v14);
        goto LABEL_44;
      }
    }
    else
    {
      if (!v36)
      {
        v69((uint64_t)v33, (uint64_t)v32, v14);
        goto LABEL_44;
      }
      (*(void (**)(void *, uint64_t))(v15 + 8))(v33, v14);
    }
    if ((_DWORD)v20)
      v53 = v21;
    else
      v53 = v21 + 1;
    memcpy(v33, v32, v53);
LABEL_44:
    v24 = v70;
    v28 = (_DWORD)v20 == 0;
    if ((_DWORD)v20)
      v54 = v21;
    else
      v54 = v21 + 1;
    v55 = v54 + 7;
    v56 = ((unint64_t)v33 + v55) & 0xFFFFFFFFFFFFFFF8;
    v57 = ((unint64_t)v32 + v55) & 0xFFFFFFFFFFFFFFF8;
    v58 = *(_QWORD *)(v56 + 8);
    v59 = *(_QWORD *)(v57 + 8);
    v60 = v59 & 0x3000000000000000;
    if ((v58 & 0x3000000000000000) != 0)
    {
      if (!v60)
      {
        v61 = *(_QWORD *)v57;
        outlined copy of Data._Representation(*(_QWORD *)v57, *(_QWORD *)(v57 + 8));
        *(_QWORD *)v56 = v61;
        *(_QWORD *)(v56 + 8) = v59;
LABEL_53:
        *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
LABEL_54:
        v5 = v71;
        goto LABEL_55;
      }
    }
    else
    {
      if (!v60)
      {
        v66 = *(_QWORD *)v57;
        outlined copy of Data._Representation(*(_QWORD *)v57, *(_QWORD *)(v57 + 8));
        v67 = *(_QWORD *)v56;
        v68 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)v56 = v66;
        *(_QWORD *)(v56 + 8) = v59;
        outlined consume of Data._Representation(v67, v68);
        goto LABEL_53;
      }
      outlined consume of Data._Representation(*(_QWORD *)v56, v58);
    }
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_53;
  }
  v24 = v70;
  v5 = v71;
  if (v27)
  {
LABEL_4:
    v28 = (_DWORD)v20 == 0;
    if ((_DWORD)v20)
      v29 = v21;
    else
      v29 = v21 + 1;
    memcpy((void *)v18, (const void *)v19, ((v29 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_55;
  }
LABEL_17:
  v37 = (char *)((v23 + v19) & v22);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v38(v18, v19, v14);
  v39 = (void *)((v23 + v18) & v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v37, 1, v14))
  {
    v28 = (_DWORD)v20 == 0;
    if ((_DWORD)v20)
      v40 = v21;
    else
      v40 = v21 + 1;
    memcpy(v39, v37, v40);
  }
  else
  {
    v38((uint64_t)v39, (uint64_t)v37, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v39, 0, 1, v14);
    v28 = (_DWORD)v20 == 0;
    if ((_DWORD)v20)
      v40 = v21;
    else
      v40 = v21 + 1;
  }
  v48 = ((unint64_t)v39 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = (unint64_t)&v37[v40 + 7];
  v50 = v49 & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 8);
  if ((v51 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v48 = *(_OWORD *)v50;
  }
  else
  {
    v52 = *(_QWORD *)v50;
    outlined copy of Data._Representation(*(_QWORD *)v50, *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v48 = v52;
    *(_QWORD *)(v48 + 8) = v51;
  }
  *(_BYTE *)(v48 + 16) = *(_BYTE *)(v50 + 16);
  v24 = v70;
  v5 = v71;
LABEL_55:
  v62 = ((v21 + v28 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  v63 = (_QWORD *)((v18 | 7) + v62);
  v64 = (_QWORD *)((v19 | 7) + v62);
  *v63 = *v64;
  v63[1] = v64[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

_QWORD *initializeWithTake for RequestContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  void *v22;
  const void *v23;
  unint64_t v24;
  unint64_t v25;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  size_t v28;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + v8;
  v13 = (v12 + v6) & ~(v11 | 7);
  v14 = (v12 + v7) & ~(v11 | 7);
  v15 = *(_DWORD *)(v10 + 84);
  v16 = *(_QWORD *)(v10 + 64);
  v17 = ~v11;
  v18 = v16 + v11;
  v19 = (v16 + v11) & ~v11;
  if (v15 <= 0xFD)
  {
    if (v15)
      v21 = *(_QWORD *)(v10 + 64);
    else
      v21 = v16 + 1;
    if (*(unsigned __int8 *)(((((v18 + v14) & v17) + v21 + 7) & 0xFFFFFFFFFFFFF8) + 0x10) >= 2u)
      goto LABEL_3;
  }
  else if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(v14, *(unsigned int *)(v10 + 84), v9))
  {
LABEL_3:
    if (v15)
      v20 = v16;
    else
      v20 = v16 + 1;
    memcpy((void *)v13, (const void *)v14, ((v20 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_20;
  }
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v28 = v19;
  v27(v13, v14, v9);
  v22 = (void *)((v18 + v13) & v17);
  v23 = (const void *)((v18 + v14) & v17);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v23, 1, v9))
  {
    if (v15)
      v20 = v16;
    else
      v20 = v16 + 1;
    memcpy(v22, v23, v20);
  }
  else
  {
    v27((uint64_t)v22, (uint64_t)v23, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v22, 0, 1, v9);
    if (v15)
      v20 = v16;
    else
      v20 = v16 + 1;
  }
  v24 = ((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v23 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  v19 = v28;
LABEL_20:
  *(_OWORD *)((v13 | 7) + ((v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) = *(_OWORD *)((v14 | 7)
                                                                                     + ((v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 17);
  return a1;
}

void **assignWithTake for RequestContext(void **a1, void **a2, uint64_t a3)
{
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  _BOOL8 v26;
  size_t v27;
  size_t v28;
  unsigned int v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  const void *v35;
  const void *v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  void *v38;
  size_t v39;
  void (*v40)(uint64_t, uint64_t);
  size_t v41;
  size_t v42;
  uint64_t *v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  size_t v61;
  void **v62;

  v5 = a1;
  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 | 7) + v11;
  v16 = (v15 + v9) & ~(v14 | 7);
  v17 = (v15 + v10) & ~(v14 | 7);
  v18 = *(unsigned int *)(v13 + 84);
  v19 = *(_QWORD *)(v13 + 64);
  v20 = ~v14;
  v21 = v19 + v14;
  v22 = (v19 + v14) & ~v14;
  v61 = v22;
  v62 = v5;
  if (v18 <= 0xFD)
  {
    if ((_DWORD)v18)
      v28 = *(_QWORD *)(v13 + 64);
    else
      v28 = v19 + 1;
    v29 = *(unsigned __int8 *)(((((v21 + v17) & v20) + v28 + 7) & 0xFFFFFFFFFFFFF8) + 0x10);
    if (*(unsigned __int8 *)(((((v21 + v16) & v20) + v28 + 7) & 0xFFFFFFFFFFFFF8) + 0x10) >= 2u)
    {
      if (v29 >= 2)
        goto LABEL_4;
      goto LABEL_17;
    }
    if (v29 >= 2)
      goto LABEL_23;
    goto LABEL_13;
  }
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v24 = v23(v16, v18, v12);
  v25 = v23(v17, v18, v12);
  if (!v24)
  {
    if (v25)
    {
LABEL_23:
      v40 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v40(v16, v12);
      if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v13 + 48))((v21 + v16) & v20, 1, v12))
        v40((v21 + v16) & v20, v12);
      v26 = (_DWORD)v18 == 0;
      if ((_DWORD)v18)
        v41 = v19;
      else
        v41 = v19 + 1;
      v42 = v41 + 7;
      v43 = (uint64_t *)((v41 + 7 + ((v21 + v16) & v20)) & 0xFFFFFFFFFFFFFFF8);
      v44 = v43[1];
      if ((v44 & 0x3000000000000000) == 0)
        outlined consume of Data._Representation(*v43, v44);
      v45 = v42 + v61;
      v22 = v61;
      memcpy((void *)v16, (const void *)v17, (v45 & 0xFFFFFFFFFFFFFFF8) + 17);
      goto LABEL_49;
    }
LABEL_13:
    v30 = (void *)((v21 + v17) & v20);
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40);
    v60(v16, v17, v12);
    v31 = (void *)((v21 + v16) & v20);
    v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
    v33 = v32(v31, 1, v12);
    v34 = v32(v30, 1, v12);
    if (v33)
    {
      if (!v34)
      {
        v35 = v30;
        (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v31, v30, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v12);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v34)
      {
        v35 = v30;
        v60((uint64_t)v31, (uint64_t)v30, v12);
        goto LABEL_41;
      }
      (*(void (**)(void *, uint64_t))(v13 + 8))(v31, v12);
    }
    if ((_DWORD)v18)
      v48 = v19;
    else
      v48 = v19 + 1;
    v35 = v30;
    memcpy(v31, v30, v48);
LABEL_41:
    v22 = v61;
    v26 = (_DWORD)v18 == 0;
    if ((_DWORD)v18)
      v49 = v19;
    else
      v49 = v19 + 1;
    v50 = v49 + 7;
    v51 = ((unint64_t)v31 + v50) & 0xFFFFFFFFFFFFFFF8;
    v52 = ((unint64_t)v35 + v50) & 0xFFFFFFFFFFFFFFF8;
    v53 = *(_QWORD *)(v51 + 8);
    if ((v53 & 0x3000000000000000) == 0)
    {
      v54 = *(_QWORD *)(v52 + 8);
      if ((v54 & 0x3000000000000000) == 0)
      {
        v59 = *(_QWORD *)v51;
        *(_QWORD *)v51 = *(_QWORD *)v52;
        *(_QWORD *)(v51 + 8) = v54;
        outlined consume of Data._Representation(v59, v53);
        goto LABEL_48;
      }
      outlined consume of Data._Representation(*(_QWORD *)v51, v53);
    }
    *(_OWORD *)v51 = *(_OWORD *)v52;
LABEL_48:
    *(_BYTE *)(v51 + 16) = *(_BYTE *)(v52 + 16);
LABEL_49:
    v5 = v62;
    goto LABEL_50;
  }
  v22 = v61;
  v5 = v62;
  if (v25)
  {
LABEL_4:
    v26 = (_DWORD)v18 == 0;
    if ((_DWORD)v18)
      v27 = v19;
    else
      v27 = v19 + 1;
    memcpy((void *)v16, (const void *)v17, ((v27 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
    goto LABEL_50;
  }
LABEL_17:
  v36 = (const void *)((v21 + v17) & v20);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v37(v16, v17, v12);
  v38 = (void *)((v21 + v16) & v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v36, 1, v12))
  {
    v26 = (_DWORD)v18 == 0;
    if ((_DWORD)v18)
      v39 = v19;
    else
      v39 = v19 + 1;
    memcpy(v38, v36, v39);
  }
  else
  {
    v37((uint64_t)v38, (uint64_t)v36, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
    v26 = (_DWORD)v18 == 0;
    if ((_DWORD)v18)
      v39 = v19;
    else
      v39 = v19 + 1;
  }
  v46 = ((unint64_t)v38 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = ((unint64_t)v36 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
  v22 = v61;
  v5 = v62;
LABEL_50:
  v55 = ((v19 + v26 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  v56 = (_QWORD *)((v16 | 7) + v55);
  v57 = (_QWORD *)((v17 | 7) + v55);
  *v56 = *v57;
  v56[1] = v57[1];
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t getEnumTagSinglePayload for RequestContext(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (v9 <= 0xFE)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v8 + 84);
  v12 = v11 - 2;
  if ((v11 - 2) <= 0x7FFFFFFE)
    v12 = 2147483646;
  if (v7 <= v12)
    v13 = v12;
  else
    v13 = v7;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  v15 = *(_QWORD *)(v8 + 64);
  if (v9)
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = v15 + 1;
  if (!a2)
    return 0;
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = *(_QWORD *)(v6 + 64);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = v19 | 7;
  v21 = v15 + v19;
  v22 = v16 + (v21 & ~v19);
  if (v14 < a2)
  {
    if (((((v20 + v18 + ((v17 + 8) & ~v17)) & ~v20) + ((v22 + 31) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v23 = 2;
    else
      v23 = a2 - v14 + 1;
    if (v23 >= 0x10000)
      v24 = 4;
    else
      v24 = 2;
    if (v23 < 0x100)
      v24 = 1;
    if (v23 >= 2)
      v25 = v24;
    else
      v25 = 0;
    __asm { BR              X22 }
  }
  if ((v13 & 0x80000000) == 0)
  {
    v26 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v26) = -1;
    return (v26 + 1);
  }
  v28 = ((unint64_t)a1 + v17 + 8) & ~v17;
  if ((_DWORD)v7 == v14)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v28, v7, v5);
  v29 = (v28 + v18 + v20) & ~v20;
  if (v11 <= 1)
  {
    if (v9 < 0xFE)
    {
      v33 = (v21 + v29) & ~v19;
      if (v10 == v11)
      {
        if (v9 < 2)
          return 0;
        v34 = (*(uint64_t (**)(uint64_t))(v8 + 48))(v33);
        if (v34 < 2)
          return 0;
        v30 = v34 - 1;
      }
      else
      {
        v35 = *(unsigned __int8 *)(((v33 + v16 + 7) & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v35 < 2)
          return 0;
        v30 = ((v35 + 2147483646) & 0x7FFFFFFF) + 1;
      }
    }
    else
    {
      v30 = (*(uint64_t (**)(uint64_t))(v8 + 48))(v29);
    }
    v31 = v30 >= 2;
    result = v30 - 2;
    if ((_DWORD)result != 0 && v31)
      return result;
    return 0;
  }
  v32 = *(_QWORD *)(v29 + ((v22 + 7) & 0xFFFFFFFFFFFFF8) + 32);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  if ((v32 + 1) >= 2)
    return v32;
  else
    return 0;
}

void storeEnumTagSinglePayload for RequestContext(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= 0xFE)
    v12 = 254;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if ((v12 - 2) <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = v12 - 2;
  if (v8 <= v13)
    v14 = v13;
  else
    v14 = v8;
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = v14;
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = *(_QWORD *)(v10 + 64);
  v18 = (v17 + v16) & ~v16;
  if (!v11)
    ++v17;
  if (v15 < a3)
  {
    if ((((v16 | 7)
         + *(_DWORD *)(v7 + 64)
         + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~(v16 | 7))
       + (((_DWORD)v17 + (_DWORD)v18 + 31) & 0xFFFFFFF8) == -16)
      v19 = a3 - v15 + 1;
    else
      v19 = 2;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 >= 2)
      v9 = v20;
    else
      v9 = 0;
  }
  if (a2 > v15)
  {
    if ((((v16 | 7)
         + *(_DWORD *)(v7 + 64)
         + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & ~(v16 | 7))
       + (((_DWORD)v17 + (_DWORD)v18 + 31) & 0xFFFFFFF8) != -16)
    {
      v21 = ~v15 + a2;
      bzero(a1, (((v16 | 7)+ *(_QWORD *)(v7 + 64)+ ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(v16 | 7))+ ((v17 + v18 + 31) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v21;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X26 }
}

void sub_237D11440(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int a8@<W8>)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _BYTE *v27;
  int v28;
  size_t v29;
  int v30;
  _QWORD *v31;

  *((_BYTE *)v18 + v21) = 0;
  if (!(_DWORD)v17)
    return;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) != 0)
      v23 = v17 ^ 0x80000000;
    else
      v23 = (v17 - 1);
    *v18 = v23;
    return;
  }
  v24 = ((unint64_t)v18 + a1 + 8) & a7;
  if ((_DWORD)v20 == v13)
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v26 = v17;
    a3 = v20;
    a4 = v19;
LABEL_7:
    v25(v24, v26, a3, a4);
    return;
  }
  v27 = (_BYTE *)((v24 + v14 + a2) & a6);
  if (v10 > 1)
  {
    v31 = &v27[((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 24];
    if (v17 > 0x7FFFFFFE)
    {
      *v31 = 0;
      *(_QWORD *)&v27[((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 32] = 0;
      *(_DWORD *)v31 = v17 - 0x7FFFFFFF;
    }
    else
    {
      *(_QWORD *)&v27[((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 32] = v17;
    }
    return;
  }
  v28 = (v15 + 7) & 0xFFFFFFF8;
  v29 = (v28 + 17);
  if (a8 >= v17 && (int)v17 + 2 <= v10)
  {
    if ((_DWORD)v17 == -2)
      return;
    if (a3 >= 0xFE)
    {
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v24 = (uint64_t)v27;
      v26 = (v17 + 2);
      goto LABEL_7;
    }
    v24 = (unint64_t)&v27[v12] & a5;
    if (v9 != v10)
    {
      *(_BYTE *)(((v24 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) = v17 + 3;
      return;
    }
    if (a3 >= 2)
    {
      v26 = (v17 + 3);
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      goto LABEL_7;
    }
  }
  else
  {
    if (v29 >= 4)
      v30 = v17 - v10 + 1;
    else
      v30 = (v17 - v10 + 1);
    bzero(v27, v29);
    if (v28 == -16)
      *v27 = v30;
    else
      *(_DWORD *)v27 = v30;
  }
}

uint64_t KeyRotation.__allocating_init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v17 + 216) = 0;
  *(_OWORD *)(v17 + 200) = 0u;
  *(_OWORD *)(v17 + 184) = 0u;
  *(_QWORD *)(v17 + 112) = a1;
  *(_QWORD *)(v17 + 120) = a2;
  *(_QWORD *)(v17 + 128) = a3;
  *(_QWORD *)(v17 + 136) = a4;
  *(_QWORD *)(v17 + 168) = a6;
  *(_QWORD *)(v17 + 176) = a7;
  *(_QWORD *)(v17 + 144) = a5;
  *(_QWORD *)(v17 + 152) = a8;
  *(_QWORD *)(v17 + 160) = a9;
  return v17;
}

uint64_t (*default argument 5 of KeyRotation.init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiKeyStatus?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AspireApiKeyStatus(0);
  v9 = MEMORY[0x24BDAC7A8](v28);
  v27 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v25 = (uint64_t)&v22 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x24BEE4AF8];
  v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v22 = a3;
  v23 = v14;
  v15 = a3 + v14;
  v26 = v11;
  v16 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x24BEE4AF8];
  v24 = a1;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v28) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireApiKeyStatus?);
    }
    else
    {
      v18 = v25;
      outlined init with take of SecretKey((uint64_t)v8, v25, type metadata accessor for AspireApiKeyStatus);
      outlined init with take of SecretKey(v18, v27, type metadata accessor for AspireApiKeyStatus);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
      v20 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      if (v20 >= v19 >> 1)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
      *(_QWORD *)(v17 + 16) = v20 + 1;
      outlined init with take of SecretKey(v27, v17 + v23 + v20 * v16, type metadata accessor for AspireApiKeyStatus);
      a1 = v24;
    }
    v15 += v16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t KeyRotation.configCache.getter()
{
  return swift_retain();
}

uint64_t KeyRotation.keyStorage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t KeyRotation.allowList.getter()
{
  return swift_retain();
}

uint64_t KeyRotation.activeUseCaseTracker.getter()
{
  return swift_retain();
}

uint64_t KeyRotation.currentTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_retain();
  return v1;
}

uint64_t KeyRotation.networkDelegation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for KeyRotation.keyUploadService : KeyRotation(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v5, &demangling cache variable for type metadata for NetworkManager?);
  v3 = *a2 + 184;
  swift_beginAccess();
  outlined assign with take of NetworkManager?((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t KeyRotation.keyUploadService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + 184, a1, &demangling cache variable for type metadata for NetworkManager?);
}

uint64_t KeyRotation.keyUploadService.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  outlined assign with take of NetworkManager?(a1, v1 + 184);
  return swift_endAccess();
}

uint64_t (*KeyRotation.keyUploadService.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t KeyRotation.init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  swift_defaultActor_initialize();
  *(_QWORD *)(v9 + 216) = 0;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_QWORD *)(v9 + 112) = a1;
  *(_QWORD *)(v9 + 120) = a2;
  *(_QWORD *)(v9 + 128) = a3;
  *(_QWORD *)(v9 + 136) = a4;
  *(_QWORD *)(v9 + 168) = a6;
  *(_QWORD *)(v9 + 176) = a7;
  *(_QWORD *)(v9 + 144) = a5;
  *(_QWORD *)(v9 + 152) = a8;
  *(_QWORD *)(v9 + 160) = a9;
  return v9;
}

uint64_t outlined assign with take of NetworkManager?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t KeyRotation.activeGroups(activeUseCases:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized KeyRotation.activeGroups(activeUseCases:)
                             + async function pointer to specialized KeyRotation.activeGroups(activeUseCases:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = KeyRotation.activeGroups(activeUseCases:);
  return v3();
}

uint64_t KeyRotation.activeGroups(activeUseCases:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t KeyRotation.keyCreationCutoff(groupName:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t result;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v31[1] = a3;
  v32 = type metadata accessor for Date();
  v31[0] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UseCaseGroup();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 32);
  v17 = *(_QWORD *)(v16 + 16);
  v33 = a1;
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v19 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v13 + 72) * v18, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v20 = 0;
    }
    else
    {
      v20 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v20, 1, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      result = outlined init with take of SecretKey((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v30 = *(_QWORD *)&v15[*(int *)(v12 + 20)];
      if ((unsigned __int128)(v30 * (__int128)60) >> 64 == (60 * v30) >> 63)
      {
        (*(void (**)(uint64_t))(v4 + 152))(result);
        Date.addingTimeInterval(_:)();
        (*(void (**)(char *, uint64_t))(v31[0] + 8))(v8, v32);
        return outlined destroy of AspireApiPECConfig((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for UseCaseGroup?);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = v33;
  if (v24)
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v35 = v27;
    *(_DWORD *)v26 = 136446210;
    swift_bridgeObjectRetain();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v22, v23, "Invalid group '%{public}s'", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v27, -1, -1);
    MEMORY[0x23B822DA8](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  *v28 = v25;
  v28[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t KeyRotation.areKeysExpired(groupName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[5] = swift_task_alloc();
  v4 = type metadata accessor for UserIdentifier();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v5 = type metadata accessor for Date();
  v3[9] = v5;
  v3[10] = *(_QWORD *)(v5 - 8);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t KeyRotation.areKeysExpired(groupName:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  KeyRotation.keyCreationCutoff(groupName:)(v0[2], v0[3], v0[11]);
  v1 = *(_QWORD *)(v0[4] + 128);
  ObjectType = swift_getObjectType();
  v5 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v1 + 8) + *(_QWORD *)(v1 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  v0[12] = v3;
  *v3 = v0;
  v3[1] = KeyRotation.areKeysExpired(groupName:);
  return v5(v0[5], v0[2], v0[3], ObjectType, v1);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 48))(v1, 1, *(_QWORD *)(v0 + 48));
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  if (v2 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
LABEL_5:
    v8 = 1;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 64);
  outlined init with take of SecretKey(v1, v6, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  v7 = static Date.> infix(_:_:)();
  outlined destroy of AspireApiPECConfig(v6, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v8 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t KeyRotation.rotateUserId(groupName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v4[7] = swift_task_alloc();
  v4[8] = swift_task_alloc();
  v5 = type metadata accessor for UserIdentifier();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v6 = type metadata accessor for Date();
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[18] = swift_task_alloc();
  v7 = type metadata accessor for UseCaseGroup();
  v4[19] = v7;
  v4[20] = *(_QWORD *)(v7 - 8);
  v4[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t KeyRotation.rotateUserId(groupName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  _QWORD *v28;
  uint64_t (*v29)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 136) + 32);
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 32);
    v2 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 160) + 72) * v4, *(_QWORD *)(v0 + 144), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v6 = 0;
    }
    else
    {
      v6 = 1;
    }
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, v6, 1, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) != 1)
    {
      v21 = *(_QWORD *)(v0 + 168);
      v22 = *(_QWORD *)(v0 + 152);
      result = outlined init with take of SecretKey(*(_QWORD *)(v0 + 144), v21, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v23 = *(_QWORD *)(v21 + *(int *)(v22 + 24));
      if ((unsigned __int128)(v23 * (__int128)60) >> 64 == (60 * v23) >> 63)
      {
        KeyRotation.keyCreationCutoff(groupName:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 136));
        v25 = *(_QWORD *)(v0 + 48);
        Date.addingTimeInterval(_:)();
        *(_QWORD *)(v0 + 176) = *(_QWORD *)(v25 + 120);
        v26 = *(_QWORD *)(v25 + 128);
        *(_QWORD *)(v0 + 184) = v26;
        ObjectType = swift_getObjectType();
        *(_QWORD *)(v0 + 192) = ObjectType;
        v29 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v26 + 8)
                                                                               + *(_QWORD *)(v26 + 8));
        v28 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 200) = v28;
        *v28 = v0;
        v28[1] = KeyRotation.rotateUserId(groupName:);
        return v29(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), ObjectType, v26);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 56))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 152));
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 144), &demangling cache variable for type metadata for UseCaseGroup?);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 40);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 32);
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v30 = v17;
    *(_DWORD *)v16 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v11, v12, "Invalid group '%{public}s'", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v17, -1, -1);
    MEMORY[0x23B822DA8](v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v19 = *(_QWORD *)(v0 + 32);
  v18 = *(_QWORD *)(v0 + 40);
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  *v20 = v19;
  v20[1] = v18;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 48))(v1, 1, *(_QWORD *)(v0 + 72)) == 1)
  {
    v2 = outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  }
  else
  {
    outlined init with take of SecretKey(v1, *(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    if ((static Date.> infix(_:_:)() & 1) != 0)
    {
      v3 = *(_QWORD *)(v0 + 168);
      v4 = *(_QWORD *)(v0 + 136);
      v5 = *(_QWORD *)(v0 + 104);
      v6 = *(_QWORD *)(v0 + 96);
      v7 = *(_QWORD *)(v0 + 24);
      v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 8);
      v8(*(_QWORD *)(v0 + 128), v5);
      v8(v4, v5);
      outlined destroy of AspireApiPECConfig(v3, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      outlined init with take of SecretKey(v6, v7, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v2 = outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  }
  v21 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 48) + 152))(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v10, v12);
  UUID.init()();
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(_QWORD *)(v0 + 208) = v19;
  v19(v10, v12);
  *(_QWORD *)(v13 + *(int *)(v15 + 24)) = v18;
  outlined init with take of SecretKey(v13, v17, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined init with copy of SecretKey(v17, v16, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v15);
  v22 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v21 + 16) + *(_QWORD *)(v21 + 16));
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v20;
  *v20 = v0;
  v20[1] = KeyRotation.rotateUserId(groupName:);
  return v22(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 184));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v1(*(_QWORD *)(v0 + 128), v4);
  v1(v3, v4);
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a6;
  v53 = a5;
  v48 = a1;
  v49 = a4;
  v9 = type metadata accessor for UserIdentifier();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v54 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UseCaseGroup();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v45 - v19;
  v50 = v6;
  v21 = *(_QWORD **)(v6 + 136);
  v22 = v21[4];
  v23 = *(_QWORD *)(v22 + 16);
  v55 = a2;
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v25 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v12 + 72) * v24, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, 1, 1, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))((char *)&v45 - v19, 1, 1, v11);
  }
  v26 = (uint64_t)v14;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for UseCaseGroup?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, v11) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for UseCaseGroup?);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *v27 = v55;
    v27[1] = a3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v28 = v54;
    outlined init with copy of SecretKey(v49, v54, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    v29 = v21[7];
    v30 = v55;
    if (*(_QWORD *)(v29 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v30, a3);
      if ((v32 & 1) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v31);
        swift_bridgeObjectRetain();
      }
      else
      {
        v33 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v33 = MEMORY[0x24BEE4AF8];
    }
    v34 = v51;
    swift_bridgeObjectRetain();
    v35 = specialized _NativeSet.genericIntersection<A>(_:)(v33, v34, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.genericIntersection<A>(_:));
    swift_bridgeObjectRelease();
    v36 = v50;
    swift_retain();
    v37 = v52;
    specialized Sequence.compactMap<A>(_:)(v35, v36);
    v39 = v38;
    v21 = v37;
    swift_release();
    v40 = swift_release();
    MEMORY[0x24BDAC7A8](v40);
    *(&v45 - 4) = v36;
    *(&v45 - 3) = v26;
    *(&v45 - 2) = v39;
    *(&v45 - 1) = v28;
    v41 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:), (uint64_t)(&v45 - 6), v53);
    if (v37)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for UseCaseGroup?);
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig(v26, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      outlined destroy of AspireApiPECConfig(v28, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    }
    else
    {
      v21 = (_QWORD *)v41;
      swift_bridgeObjectRelease();
      if (v21[2])
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for UseCaseGroup?);
        outlined destroy of AspireApiPECConfig(v26, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
        v43 = v48;
        outlined init with copy of SecretKey(v28, v48, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
        v44 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for UseCaseGroup?);
        outlined destroy of AspireApiPECConfig(v26, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v44 = 1;
        v43 = v48;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v43, v44, 1, v47);
      outlined destroy of AspireApiPECConfig(v28, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    }
  }
  return v21;
}

uint64_t closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)@<X0>(_QWORD *a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t result;
  _QWORD *v47;
  unint64_t v48;
  unsigned int (*v49)(char *, uint64_t, unint64_t);
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, unint64_t);
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint8_t *v102;
  uint64_t v103;
  Swift::String v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  int v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  double v130;
  double v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  double v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;

  v163 = a4;
  v164 = a5;
  v166 = a2;
  v167 = a3;
  v172 = a1;
  v169 = a6;
  v6 = type metadata accessor for Date();
  v159 = *(_QWORD *)(v6 - 8);
  v160 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v158 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for AspireApiKeyStatus(0);
  v168 = *(_QWORD *)(v173 - 8);
  v8 = MEMORY[0x24BDAC7A8](v173);
  v155 = (uint64_t)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v156 = (uint64_t *)((char *)&v142 - v10);
  v11 = type metadata accessor for SecretKey();
  v161 = *(_QWORD *)(v11 - 8);
  v162 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v151 = (uint64_t *)((char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v154 = (uint64_t *)((char *)&v142 - v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v152 = (uint64_t *)((char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v16);
  v157 = (uint64_t)&v142 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v153 = (uint64_t)&v142 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v21);
  v165 = (uint64_t)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v170 = *(_QWORD **)(v23 - 8);
  v171 = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v142 - v27;
  v29 = type metadata accessor for AspireHeEncryptionParameters(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v142 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v142 - v34;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v142 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v37);
  v42 = (char *)&v142 - v41;
  MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)&v142 - v43;
  v45 = (uint64_t)v174;
  result = static Task<>.checkCancellation()();
  if (!v45)
  {
    v146 = v42;
    v150 = v28;
    v143 = v39;
    v147 = v30;
    v144 = v26;
    v145 = v33;
    v148 = v29;
    v149 = v35;
    v174 = 0;
    v47 = (_QWORD *)((char *)v172 + *(int *)(v173 + 24));
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v47, (uint64_t)v44, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    v48 = v171;
    v49 = (unsigned int (*)(char *, uint64_t, unint64_t))v170[6];
    v50 = v49(v44, 1, v171);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v44, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v50 == 1)
    {
      v52 = v168;
      v51 = v169;
      if (one-time initialization token for daemon != -1)
        swift_once();
      v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.daemon);
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.error.getter();
      v56 = os_log_type_enabled(v54, v55);
      v57 = v173;
      if (v56)
      {
        v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v58 = 0;
        _os_log_impl(&dword_237BC8000, v54, v55, "Skipping key with empty key configuration", v58, 2u);
        MEMORY[0x23B822DA8](v58, -1, -1);
      }

      v59 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, v59, 1, v57);
    }
    v170 = v47;
    v60 = (uint64_t)v47;
    v61 = (uint64_t)v146;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, (uint64_t)v146, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    v62 = (unsigned int (*)(uint64_t, uint64_t, unint64_t))v49;
    if (v49((char *)v61, 1, v48) == 1)
    {
      v63 = v150;
      *v150 = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v63 + 8) = 0;
      UnknownStorage.init()();
      v64 = v147;
      v65 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56))((char *)v63 + *(int *)(v48 + 28), 1, 1, v148);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v61, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v66 = (uint64_t)v174;
      v67 = (uint64_t)v149;
      v68 = v167;
    }
    else
    {
      v63 = v150;
      outlined init with take of SecretKey(v61, (uint64_t)v150, type metadata accessor for AspireHeEvaluationKeyConfig);
      v66 = (uint64_t)v174;
      v67 = (uint64_t)v149;
      v68 = v167;
      v65 = v148;
      v64 = v147;
    }
    v69 = (uint64_t)v63 + *(int *)(v48 + 28);
    v70 = v165;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v69, v165, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v70, 1, v65) == 1)
    {
      *(_QWORD *)v67 = 0;
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v67 + 16) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v67 + 24) = 0;
      *(_BYTE *)(v67 + 32) = 1;
      *(_QWORD *)(v67 + 40) = 0;
      *(_BYTE *)(v67 + 48) = 1;
      *(_QWORD *)(v67 + 56) = 0;
      *(_BYTE *)(v67 + 64) = 1;
      UnknownStorage.init()();
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v70, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    }
    else
    {
      outlined init with take of SecretKey(v70, v67, type metadata accessor for AspireHeEncryptionParameters);
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v150, type metadata accessor for AspireHeEvaluationKeyConfig);
    v71 = AllowList.isAllowListed(group:encryptionParameters:)(v68, v67);
    if (v66)
      return outlined destroy of AspireApiPECConfig(v67, type metadata accessor for AspireHeEncryptionParameters);
    if ((v71 & 1) != 0)
    {
      v72 = (uint64_t)v143;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v170, (uint64_t)v143, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if (v62(v72, 1, v48) == 1)
      {
        v73 = v144;
        *v144 = MEMORY[0x24BEE4AF8];
        *((_BYTE *)v73 + 8) = 0;
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56))((char *)v73 + *(int *)(v48 + 28), 1, 1, v65);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        v73 = v144;
        outlined init with take of SecretKey(v72, (uint64_t)v144, type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      v82 = specialized Message.hash()();
      v84 = v83;
      outlined destroy of AspireApiPECConfig((uint64_t)v73, type metadata accessor for AspireHeEvaluationKeyConfig);
      v85 = v164;
      v86 = specialized Sequence<>.contains(_:)((uint64_t)v82, v84, v163);
      v174 = v82;
      v171 = v84;
      if ((v86 & 1) != 0)
      {
        v170 = (_QWORD *)(v85 + *(int *)(type metadata accessor for UserIdentifier() + 24));
        v87 = *v170;
        if (*(_QWORD *)(*v170 + 16))
        {
          outlined copy of Data._Representation((uint64_t)v82, v84);
          v88 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v82, v84);
          v89 = v162;
          v90 = v153;
          v92 = v161;
          if ((v91 & 1) != 0)
          {
            outlined init with copy of SecretKey(*(_QWORD *)(v87 + 56) + *(_QWORD *)(v161 + 72) * v88, v153, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
            v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56);
            v94 = v90;
            v95 = 0;
          }
          else
          {
            v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56);
            v94 = v153;
            v95 = 1;
          }
          v166 = v93;
          v93(v94, v95, 1, v89);
          outlined consume of Data._Representation((uint64_t)v82, v84);
        }
        else
        {
          v92 = v161;
          v89 = v162;
          v90 = v153;
          v166 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56);
          v166(v153, 1, 1, v162);
        }
        v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
        v106 = v105(v90, 1, v89);
        v107 = v156;
        v108 = v154;
        if (v106)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v90, &demangling cache variable for type metadata for SecretKey?);
          v109 = 0;
        }
        else
        {
          outlined init with copy of SecretKey(v90, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v90, &demangling cache variable for type metadata for SecretKey?);
          v109 = *v108;
          outlined destroy of AspireApiPECConfig((uint64_t)v108, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
        }
        v110 = v172;
        if (one-time initialization token for daemon != -1)
          swift_once();
        v111 = type metadata accessor for Logger();
        __swift_project_value_buffer(v111, (uint64_t)static Logger.daemon);
        outlined init with copy of SecretKey((uint64_t)v110, (uint64_t)v107, type metadata accessor for AspireApiKeyStatus);
        v112 = Logger.logObject.getter();
        v113 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v112, v113))
        {
          v114 = swift_slowAlloc();
          *(_DWORD *)v114 = 134218240;
          v115 = (uint64_t)v107;
          v116 = *v107;
          outlined destroy of AspireApiPECConfig(v115, type metadata accessor for AspireApiKeyStatus);
          v176 = v116;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v114 + 12) = 2048;
          v176 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_237BC8000, v112, v113, "keyStatus.timestamp = %llu, secretKey.timestamp = %llu", (uint8_t *)v114, 0x16u);
          v117 = v114;
          v89 = v162;
          MEMORY[0x23B822DA8](v117, -1, -1);
        }
        else
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v107, type metadata accessor for AspireApiKeyStatus);
        }
        v119 = v159;
        v118 = v160;
        v120 = v158;

        v121 = v171;
        v122 = *v170;
        if (*(_QWORD *)(*v170 + 16))
        {
          v123 = (uint64_t)v174;
          outlined copy of Data._Representation((uint64_t)v174, v171);
          v124 = specialized __RawDictionaryStorage.find<A>(_:)(v123, v121);
          if ((v125 & 1) != 0)
          {
            v126 = *(_QWORD *)(v122 + 56) + *(_QWORD *)(v161 + 72) * v124;
            v127 = v157;
            outlined init with copy of SecretKey(v126, v157, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
            v128 = 0;
            v129 = v151;
          }
          else
          {
            v128 = 1;
            v129 = v151;
            v127 = v157;
          }
          v166(v127, v128, 1, v89);
          outlined consume of Data._Representation((uint64_t)v174, v121);
          if (v105(v127, 1, v89) != 1)
          {
            outlined init with take of SecretKey(v127, (uint64_t)v129, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
            if ((*(_BYTE *)(v167 + *(int *)(type metadata accessor for UseCaseGroup() + 28)) & 1) != 0
              || *v172 == *v129)
            {
              outlined consume of Data._Representation((uint64_t)v174, v121);
              outlined destroy of AspireApiPECConfig((uint64_t)v129, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
              outlined destroy of AspireApiPECConfig((uint64_t)v149, type metadata accessor for AspireHeEncryptionParameters);
              v59 = 1;
              v51 = v169;
              goto LABEL_63;
            }
            outlined copy of Data._Representation((uint64_t)v174, v121);
            Date.init()();
            Date.timeIntervalSince1970.getter();
            v138 = v137;
            result = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v120, v118);
            if ((~*(_QWORD *)&v138 & 0x7FF0000000000000) != 0)
            {
              v139 = v152;
              v133 = v172;
              if (v138 > -1.0)
              {
                if (v138 < 1.84467441e19)
                {
                  *v152 = (unint64_t)v138;
                  HE.SerializedSecretKey.init()();
                  v166((uint64_t)v139, 0, 1, v89);
                  v140 = (uint64_t)v139;
                  v141 = (uint64_t)v174;
                  specialized Dictionary.subscript.setter(v140, (uint64_t)v174, v121);
                  outlined consume of Data._Representation(v141, v121);
                  outlined destroy of AspireApiPECConfig((uint64_t)v151, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
                  goto LABEL_59;
                }
LABEL_73:
                __break(1u);
                return result;
              }
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
        }
        else
        {
          v127 = v157;
          v166(v157, 1, 1, v89);
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v127, &demangling cache variable for type metadata for SecretKey?);
        outlined copy of Data._Representation((uint64_t)v174, v121);
        Date.init()();
        Date.timeIntervalSince1970.getter();
        v131 = v130;
        result = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v120, v118);
        if ((~*(_QWORD *)&v131 & 0x7FF0000000000000) != 0)
        {
          v132 = v152;
          v133 = v172;
          if (v131 > -1.0)
          {
            if (v131 < 1.84467441e19)
            {
              *v152 = (unint64_t)v131;
              HE.SerializedSecretKey.init()();
              v166((uint64_t)v132, 0, 1, v89);
              v134 = (uint64_t)v132;
              v135 = (uint64_t)v174;
              specialized Dictionary.subscript.setter(v134, (uint64_t)v174, v121);
              outlined consume of Data._Representation(v135, v121);
LABEL_59:
              outlined destroy of AspireApiPECConfig((uint64_t)v149, type metadata accessor for AspireHeEncryptionParameters);
              v136 = (uint64_t)v133;
              v51 = v169;
              outlined init with copy of SecretKey(v136, v169, type metadata accessor for AspireApiKeyStatus);
              v59 = 0;
LABEL_63:
              v57 = v173;
              v52 = v168;
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, v59, 1, v57);
            }
            goto LABEL_70;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (one-time initialization token for daemon != -1)
        swift_once();
      v97 = type metadata accessor for Logger();
      __swift_project_value_buffer(v97, (uint64_t)static Logger.daemon);
      v98 = v155;
      outlined init with copy of SecretKey((uint64_t)v172, v155, type metadata accessor for AspireApiKeyStatus);
      v99 = Logger.logObject.getter();
      v100 = static os_log_type_t.debug.getter();
      v101 = os_log_type_enabled(v99, v100);
      v57 = v173;
      if (v101)
      {
        v102 = (uint8_t *)swift_slowAlloc();
        v103 = swift_slowAlloc();
        v176 = v103;
        *(_DWORD *)v102 = 136446210;
        v172 = v102 + 4;
        lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, 255, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
        v104 = Message.textFormatString()();
        v175 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104._countAndFlagsBits, (unint64_t)v104._object, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AspireApiPECConfig(v98, type metadata accessor for AspireApiKeyStatus);
        _os_log_impl(&dword_237BC8000, v99, v100, "Skipping non-active key: %{public}s", v102, 0xCu);
        v59 = 1;
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v103, -1, -1);
        MEMORY[0x23B822DA8](v102, -1, -1);

        outlined consume of Data._Representation((uint64_t)v174, v171);
        outlined destroy of AspireApiPECConfig((uint64_t)v149, type metadata accessor for AspireHeEncryptionParameters);
        goto LABEL_32;
      }

      outlined consume of Data._Representation((uint64_t)v174, v171);
      outlined destroy of AspireApiPECConfig(v98, type metadata accessor for AspireApiKeyStatus);
      v96 = v67;
    }
    else
    {
      v57 = v173;
      if (one-time initialization token for daemon != -1)
        swift_once();
      v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.daemon);
      v75 = (uint64_t)v145;
      outlined init with copy of SecretKey(v67, (uint64_t)v145, type metadata accessor for AspireHeEncryptionParameters);
      v76 = Logger.logObject.getter();
      v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v174 = 0;
        v80 = v79;
        v176 = v79;
        *(_DWORD *)v78 = 136446210;
        lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, 255, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
        v81 = Message.textFormatString()();
        v175 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81._countAndFlagsBits, (unint64_t)v81._object, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AspireApiPECConfig(v75, type metadata accessor for AspireHeEncryptionParameters);
        _os_log_impl(&dword_237BC8000, v76, v77, "Skipping key with invalid encryption parameters: '%{public}s'", v78, 0xCu);
        v59 = 1;
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v80, -1, -1);
        MEMORY[0x23B822DA8](v78, -1, -1);

        outlined destroy of AspireApiPECConfig((uint64_t)v149, type metadata accessor for AspireHeEncryptionParameters);
LABEL_32:
        v52 = v168;
        v51 = v169;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v51, v59, 1, v57);
      }

      outlined destroy of AspireApiPECConfig(v75, type metadata accessor for AspireHeEncryptionParameters);
      v96 = v67;
    }
    outlined destroy of AspireApiPECConfig(v96, type metadata accessor for AspireHeEncryptionParameters);
    v59 = 1;
    goto LABEL_32;
  }
  return result;
}

uint64_t KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[77] = v3;
  v4[76] = a3;
  v4[75] = a2;
  v4[74] = a1;
  v4[78] = type metadata accessor for AspireApiEvaluationKeys(0);
  v4[79] = swift_task_alloc();
  type metadata accessor for AspireApiEvaluationKey(0);
  v4[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v4[81] = swift_task_alloc();
  v5 = type metadata accessor for SecretKey();
  v4[82] = v5;
  v4[83] = *(_QWORD *)(v5 - 8);
  v4[84] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v4[85] = swift_task_alloc();
  v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v4[86] = v6;
  v4[87] = *(_QWORD *)(v6 - 8);
  v4[88] = swift_task_alloc();
  v7 = type metadata accessor for AspireApiKeyStatus(0);
  v4[89] = v7;
  v4[90] = *(_QWORD *)(v7 - 8);
  v4[91] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v49;
  uint64_t (*v50)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v51;

  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(_QWORD))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(*(_QWORD *)(v0 + 608));
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 616);
    v2 = *(_QWORD *)(v0 + 600);
    outlined init with take of LocalizedError((__int128 *)(v0 + 56), v0 + 16);
    v49 = (_QWORD *)(v0 + 16);
    outlined init with copy of NetworkManager(v0 + 16, v0 + 136);
    outlined init with take of RequestContext<StaticPIRParameters>(v0 + 136, v0 + 176, &demangling cache variable for type metadata for NetworkManager?);
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 176, v1 + 184);
    swift_endAccess();
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 736) = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 720);
      *(_DWORD *)(v0 + 792) = *(_DWORD *)(v4 + 80);
      *(_QWORD *)(v0 + 744) = *(_QWORD *)(v4 + 72);
      swift_bridgeObjectRetain();
      v5 = 0;
      do
      {
        *(_QWORD *)(v0 + 752) = v5;
        outlined init with copy of SecretKey(*(_QWORD *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 792) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 792))+ *(_QWORD *)(v0 + 744) * v5, *(_QWORD *)(v0 + 728), type metadata accessor for AspireApiKeyStatus);
        static Task<>.checkCancellation()();
        v9 = *(_QWORD *)(v0 + 696);
        v10 = *(_QWORD *)(v0 + 688);
        v11 = *(_QWORD *)(v0 + 680);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 728) + *(int *)(*(_QWORD *)(v0 + 712) + 24), v11, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10);
        v13 = *(_QWORD *)(v0 + 704);
        if (v12 == 1)
        {
          v14 = *(_QWORD *)(v0 + 688);
          v15 = *(_QWORD *)(v0 + 680);
          *(_QWORD *)v13 = MEMORY[0x24BEE4AF8];
          *(_BYTE *)(v13 + 8) = 0;
          UnknownStorage.init()();
          v16 = v13 + *(int *)(v14 + 28);
          v17 = type metadata accessor for AspireHeEncryptionParameters(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        }
        else
        {
          outlined init with take of SecretKey(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 704), type metadata accessor for AspireHeEvaluationKeyConfig);
        }
        v18 = specialized Message.hash()();
        *(_QWORD *)(v0 + 760) = v18;
        *(_QWORD *)(v0 + 768) = v19;
        v20 = (uint64_t)v18;
        v21 = v19;
        v22 = *(_QWORD *)(v0 + 592);
        v23 = type metadata accessor for UserIdentifier();
        v24 = *(_QWORD *)(v22 + *(int *)(v23 + 24));
        if (*(_QWORD *)(v24 + 16))
        {
          v25 = v23;
          outlined copy of Data._Representation(v20, v21);
          v26 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if ((v27 & 1) != 0)
          {
            outlined init with copy of SecretKey(*(_QWORD *)(v24 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 664) + 72) * v26, *(_QWORD *)(v0 + 648), (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
            v28 = 0;
          }
          else
          {
            v28 = 1;
          }
          v29 = *(_QWORD *)(v0 + 664);
          v30 = *(_QWORD *)(v0 + 656);
          v31 = *(_QWORD *)(v0 + 648);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v31, v28, 1, v30);
          outlined consume of Data._Representation(v20, v21);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) != 1)
          {
            v32 = *(_QWORD *)(v0 + 704);
            v33 = *(_QWORD *)(v0 + 672);
            v34 = *(_QWORD *)(v0 + 640);
            outlined init with take of SecretKey(*(_QWORD *)(v0 + 648), v33, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
            generateEvaluationKey(secretKey:config:)(v33, v32, v34);
            v42 = *(_QWORD *)(v0 + 640);
            *(_QWORD *)(swift_task_alloc() + 16) = v42;
            lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, 255, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
            static Message.with(_:)();
            swift_task_dealloc();
            static Task<>.checkCancellation()();
            v43 = *(_QWORD *)(v0 + 592);
            v44 = *(_QWORD *)(v0 + 40);
            v45 = *(_QWORD *)(v0 + 48);
            __swift_project_boxed_opaque_existential_1(v49, v44);
            v46 = v43 + *(int *)(v25 + 20);
            v50 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v45 + 24)
                                                                            + *(_QWORD *)(v45 + 24));
            v47 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 776) = v47;
            *v47 = v0;
            v47[1] = KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:);
            return v50(*(_QWORD *)(v0 + 632), v46, v44, v45);
          }
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 664) + 56))(*(_QWORD *)(v0 + 648), 1, 1, *(_QWORD *)(v0 + 656));
        }
        v6 = *(_QWORD *)(v0 + 728);
        v7 = *(_QWORD *)(v0 + 704);
        v8 = *(_QWORD *)(v0 + 648);
        outlined consume of Data._Representation(v20, v21);
        outlined destroy of AspireApiPECConfig(v7, type metadata accessor for AspireHeEvaluationKeyConfig);
        outlined destroy of AspireApiPECConfig(v6, type metadata accessor for AspireApiKeyStatus);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for SecretKey?);
        v5 = *(_QWORD *)(v0 + 752) + 1;
      }
      while (v5 != *(_QWORD *)(v0 + 736));
      swift_bridgeObjectRelease();
    }
    v41 = *(_QWORD *)(v0 + 616) + 184;
    *(_QWORD *)(v0 + 408) = 0;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 376, v41);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v40 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
    if (one-time initialization token for daemon != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.daemon);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v51 = v39;
      *(_DWORD *)v38 = 136315138;
      *(_QWORD *)(v0 + 584) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003CLL, 0x8000000237D645F0, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237BC8000, v36, v37, "%s called with offline network manager", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v39, -1, -1);
      MEMORY[0x23B822DA8](v38, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v40 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v40();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 784) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD *v48;
  _QWORD *v49;
  uint64_t (*v50)(_QWORD, uint64_t, uint64_t, uint64_t);

  v49 = (_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 632);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768));
  outlined destroy of AspireApiPECConfig(v5, type metadata accessor for AspireApiEvaluationKeys);
  outlined destroy of AspireApiPECConfig(v3, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspireApiPECConfig(v4, type metadata accessor for AspireApiEvaluationKey);
  v6 = *(_QWORD *)(v0 + 752) + 1;
  if (v6 == *(_QWORD *)(v0 + 736))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 616) + 184;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
    *(_QWORD *)(v0 + 408) = 0;
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 376, v7);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v48 = (_OWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 784);
    while (1)
    {
      *(_QWORD *)(v0 + 752) = v6;
      outlined init with copy of SecretKey(*(_QWORD *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 792) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 792))+ *(_QWORD *)(v0 + 744) * v6, *(_QWORD *)(v0 + 728), type metadata accessor for AspireApiKeyStatus);
      static Task<>.checkCancellation()();
      v13 = *(_QWORD *)(v0 + 728);
      if (v9)
        break;
      v14 = *(_QWORD *)(v0 + 696);
      v15 = *(_QWORD *)(v0 + 688);
      v16 = *(_QWORD *)(v0 + 680);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v13 + *(int *)(*(_QWORD *)(v0 + 712) + 24), v16, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15);
      v18 = *(_QWORD *)(v0 + 704);
      if (v17 == 1)
      {
        v19 = *(_QWORD *)(v0 + 688);
        v20 = *(_QWORD *)(v0 + 680);
        *(_QWORD *)v18 = MEMORY[0x24BEE4AF8];
        *(_BYTE *)(v18 + 8) = 0;
        UnknownStorage.init()();
        v21 = v18 + *(int *)(v19 + 28);
        v22 = type metadata accessor for AspireHeEncryptionParameters(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        outlined init with take of SecretKey(*(_QWORD *)(v0 + 680), *(_QWORD *)(v0 + 704), type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      v23 = specialized Message.hash()();
      *(_QWORD *)(v0 + 760) = v23;
      *(_QWORD *)(v0 + 768) = v24;
      v25 = (uint64_t)v23;
      v26 = v24;
      v27 = *(_QWORD *)(v0 + 592);
      v28 = type metadata accessor for UserIdentifier();
      v29 = *(_QWORD *)(v27 + *(int *)(v28 + 24));
      if (*(_QWORD *)(v29 + 16))
      {
        v30 = v28;
        outlined copy of Data._Representation(v25, v26);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
        if ((v32 & 1) != 0)
        {
          outlined init with copy of SecretKey(*(_QWORD *)(v29 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 664) + 72) * v31, *(_QWORD *)(v0 + 648), (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
          v33 = 0;
        }
        else
        {
          v33 = 1;
        }
        v34 = *(_QWORD *)(v0 + 664);
        v35 = *(_QWORD *)(v0 + 656);
        v36 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v36, v33, 1, v35);
        outlined consume of Data._Representation(v25, v26);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) != 1)
        {
          v37 = *(_QWORD *)(v0 + 704);
          v38 = *(_QWORD *)(v0 + 672);
          v39 = *(_QWORD *)(v0 + 640);
          outlined init with take of SecretKey(*(_QWORD *)(v0 + 648), v38, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
          generateEvaluationKey(secretKey:config:)(v38, v37, v39);
          v41 = *(_QWORD *)(v0 + 640);
          *(_QWORD *)(swift_task_alloc() + 16) = v41;
          lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, 255, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
          static Message.with(_:)();
          swift_task_dealloc();
          static Task<>.checkCancellation()();
          v42 = *(_QWORD *)(v0 + 592);
          v43 = *(_QWORD *)(v0 + 40);
          v44 = *(_QWORD *)(v0 + 48);
          __swift_project_boxed_opaque_existential_1(v49, v43);
          v45 = v42 + *(int *)(v30 + 20);
          v50 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v44 + 24) + *(_QWORD *)(v44 + 24));
          v46 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 776) = v46;
          *v46 = v0;
          v46[1] = KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:);
          return v50(*(_QWORD *)(v0 + 632), v45, v43, v44);
        }
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 664) + 56))(*(_QWORD *)(v0 + 648), 1, 1, *(_QWORD *)(v0 + 656));
      }
      v10 = *(_QWORD *)(v0 + 728);
      v11 = *(_QWORD *)(v0 + 704);
      v12 = *(_QWORD *)(v0 + 648);
      outlined consume of Data._Representation(v25, v26);
      outlined destroy of AspireApiPECConfig(v11, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AspireApiPECConfig(v10, type metadata accessor for AspireApiKeyStatus);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for SecretKey?);
      v9 = 0;
      v6 = *(_QWORD *)(v0 + 752) + 1;
      if (v6 == *(_QWORD *)(v0 + 736))
        goto LABEL_2;
    }
    v40 = *(_QWORD *)(v0 + 616) + 184;
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireApiKeyStatus);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 288) = 0;
    *v48 = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    swift_beginAccess();
    outlined assign with take of NetworkManager?((uint64_t)v48, v40);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 632);
  v6 = *(_QWORD *)(v0 + 616) + 184;
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768));
  outlined destroy of AspireApiPECConfig(v5, type metadata accessor for AspireApiEvaluationKeys);
  outlined destroy of AspireApiPECConfig(v3, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspireApiPECConfig(v4, type metadata accessor for AspireApiEvaluationKey);
  *(_OWORD *)(v0 + 112) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  swift_beginAccess();
  outlined assign with take of NetworkManager?(v0 + 96, v6);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiEvaluationKey>);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AspireApiEvaluationKey(0) - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_237D540E0;
  outlined init with copy of SecretKey(a2, v6 + v5, type metadata accessor for AspireApiEvaluationKey);
  result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[13] = a6;
  v7[14] = v6;
  v7[11] = a4;
  v7[12] = a5;
  v7[9] = a2;
  v7[10] = a3;
  v7[8] = a1;
  v7[15] = type metadata accessor for NetworkManagerConfig(0);
  v7[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v7[17] = swift_task_alloc();
  v8 = type metadata accessor for UseCaseGroup();
  v7[18] = v8;
  v7[19] = *(_QWORD *)(v8 - 8);
  v7[20] = swift_task_alloc();
  v9 = type metadata accessor for UserIdentifier();
  v7[21] = v9;
  v7[22] = *(_QWORD *)(v9 - 8);
  v7[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  v1 = v0[13];
  v47 = v0[25];
  v3 = v0[11];
  v2 = v0[12];
  v5 = v0[9];
  v4 = v0[10];
  v6 = (void *)MEMORY[0x23B821F68](0xD000000000000021, 0x8000000237D61BE0);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v4;
  v0[2] = MEMORY[0x24BDAC760];
  v7[4] = v2;
  v7[5] = v1;
  v0[6] = partial apply for closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:);
  v0[7] = v7;
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v0[5] = &block_descriptor_5;
  v8 = _Block_copy(v0 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v8);

  v9 = KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(v47, v5, v4, v3, v2, v1);
  v0[26] = v9;
  v10 = (uint64_t)v9;
  v11 = v9[2];
  v12 = v0[25];
  if (!v11)
  {
    v18 = v0[21];
    v19 = v0[22];
    v20 = v0[8];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for UserIdentifier?);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
    goto LABEL_5;
  }
  v13 = v0[24];
  v14 = v0[21];
  v15 = v0[22];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, v13, &demangling cache variable for type metadata for UserIdentifier?);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  v17 = v0[24];
  if (v16 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v17, &demangling cache variable for type metadata for UserIdentifier?);
    outlined init with take of RequestContext<StaticPIRParameters>(v0[25], v0[8], &demangling cache variable for type metadata for UserIdentifier?);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  v23 = v0[14];
  outlined init with take of SecretKey(v0[24], v0[23], (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 136) + 32);
  if (!*(_QWORD *)(v24 + 16))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[19] + 56))(v0[17], 1, 1, v0[18]);
LABEL_13:
    v33 = v0[25];
    v34 = v0[23];
    v35 = v0[17];
    v37 = v0[9];
    v36 = v0[10];
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for UseCaseGroup?);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *v38 = v37;
    v38[1] = v36;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v34, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for UserIdentifier?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  v26 = v0[9];
  v25 = v0[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
  if ((v28 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(v24 + 56) + *(_QWORD *)(v0[19] + 72) * v27, v0[17], (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  v30 = v0[18];
  v31 = v0[19];
  v32 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v32, v29, 1, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) == 1)
    goto LABEL_13;
  v39 = v0[20];
  v40 = v0[18];
  v42 = v0[15];
  v41 = v0[16];
  v43 = v0[14];
  outlined init with take of SecretKey(v0[17], v39, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  outlined init with copy of SecretKey(v39 + *(int *)(v40 + 36), v41, type metadata accessor for NetworkConfig);
  v44 = *(_QWORD *)(v43 + 176);
  v45 = (_QWORD *)(v41 + *(int *)(v42 + 20));
  *v45 = *(_QWORD *)(v43 + 168);
  v45[1] = v44;
  swift_bridgeObjectRetain();
  v46 = (_QWORD *)swift_task_alloc();
  v0[27] = v46;
  *v46 = v0;
  v46[1] = KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:);
  return KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(v0[23], v10, v0[16]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 128), type metadata accessor for NetworkManagerConfig);
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined init with take of RequestContext<StaticPIRParameters>(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 64), &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 128), type metadata accessor for NetworkManagerConfig);
  outlined destroy of AspireApiPECConfig(v3, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t KeyRotation.rotateGroup(groupName:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[29] = a3;
  v4[30] = v3;
  v4[27] = a1;
  v4[28] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v4[33] = swift_task_alloc();
  v5 = type metadata accessor for AspireApiConfig(0);
  v4[34] = v5;
  v4[35] = *(_QWORD *)(v5 - 8);
  v4[36] = swift_task_alloc();
  v4[37] = type metadata accessor for NetworkManagerConfig(0);
  v4[38] = swift_task_alloc();
  v4[39] = type metadata accessor for AspireApiConfigResponse(0);
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v6 = type metadata accessor for UserIdentifier();
  v4[43] = v6;
  v4[44] = *(_QWORD *)(v6 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[47] = swift_task_alloc();
  v7 = type metadata accessor for UseCaseGroup();
  v4[48] = v7;
  v4[49] = *(_QWORD *)(v7 - 8);
  v4[50] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t KeyRotation.rotateGroup(groupName:activeUseCases:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 240) + 136) + 32);
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 216);
    v2 = *(_QWORD *)(v0 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 392) + 72) * v4, *(_QWORD *)(v0 + 376), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v6 = 0;
    }
    else
    {
      v6 = 1;
    }
    v7 = *(_QWORD *)(v0 + 384);
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 376);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, v6, 1, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) != 1)
    {
      outlined init with take of SecretKey(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 400), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 408) = v19;
      *v19 = v0;
      v19[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
      return KeyRotation.rotateUserId(groupName:)(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 392) + 56))(*(_QWORD *)(v0 + 376), 1, 1, *(_QWORD *)(v0 + 384));
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 376), &demangling cache variable for type metadata for UseCaseGroup?);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 224);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 216);
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v20 = v17;
    *(_DWORD *)v16 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v11, v12, "RotationTask: did not find group '%{public}s'", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v17, -1, -1);
    MEMORY[0x23B822DA8](v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 256);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 400);
    v5 = *(_QWORD *)(v0 + 336);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 368), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    outlined destroy of AspireApiPECConfig(v4, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of AspireApiPECConfig(v5, type metadata accessor for AspireApiConfigResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 360);
    v9 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 248);
    outlined init with take of SecretKey(v3, v7, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    *(_QWORD *)(v0 + 472) = *(_QWORD *)(v9 + 120);
    v10 = *(_QWORD *)(v9 + 128);
    *(_QWORD *)(v0 + 480) = v10;
    ObjectType = swift_getObjectType();
    *(_QWORD *)(v0 + 488) = ObjectType;
    outlined init with copy of SecretKey(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v8, 0, 1, v1);
    v13 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v10 + 16) + *(_QWORD *)(v10 + 16));
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 496) = v12;
    *v12 = v0;
    v12[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
    return v13(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 248), ObjectType, v10);
  }
}

{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD);
  uint64_t v7;

  v1 = (_QWORD *)*v0;
  v2 = *(_QWORD *)(*v0 + 480);
  v3 = *(_QWORD *)(*v0 + 248);
  v7 = *v0;
  swift_task_dealloc();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for UserIdentifier?);
  v6 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v2 + 24) + *(_QWORD *)(v2 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  v1[63] = v4;
  *v4 = v7;
  v4[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
  return v6(v1[61], v1[60]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 512) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 336);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 360), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 400), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 400);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 368), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 336);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 368), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for daemon != -1)
    swift_once();
  v1 = *(void **)(v0 + 512);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 512);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 168) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v5, v6, "RotationTask: failed to synchronize key storage, but continuing anyway: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);

  }
  else
  {

  }
  v13 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 336);

  outlined destroy of AspireApiPECConfig(v15, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AspireApiPECConfig(v14, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AspireApiPECConfig(v13, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  outlined destroy of AspireApiPECConfig(v16, type metadata accessor for AspireApiConfigResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void KeyRotation.rotateGroup(groupName:activeUseCases:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _NativeSet.genericIntersection<A>(_:)(v2, v1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.genericIntersection<A>(_:));
  swift_bridgeObjectRelease();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  *(_QWORD *)(v0 + 424) = v4;
  swift_release();
  v5 = *(_QWORD *)(v0 + 400);
  if (!v4[2])
  {
    v19 = *(_QWORD *)(v0 + 368);
    swift_release();
    outlined destroy of AspireApiPECConfig(v19, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    outlined destroy of AspireApiPECConfig(v5, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v20 = *(void (**)(void))(v0 + 8);
LABEL_7:
    v20();
    return;
  }
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 240);
  outlined init with copy of SecretKey(v5 + *(int *)(*(_QWORD *)(v0 + 384) + 36), v7, type metadata accessor for NetworkConfig);
  v9 = *(_QWORD *)(v8 + 176);
  v10 = (_QWORD *)(v7 + *(int *)(v6 + 20));
  *v10 = *(_QWORD *)(v8 + 168);
  v10[1] = v9;
  v11 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = *(_QWORD *)(v0 + 304);
  (*(void (**)(uint64_t))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(v12);
  outlined destroy of AspireApiPECConfig(v12, type metadata accessor for NetworkManagerConfig);
  if (*(_QWORD *)(v0 + 80))
  {
    v13 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 344);
    outlined init with take of LocalizedError((__int128 *)(v0 + 56), v0 + 16);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v15);
    v17 = v13 + *(int *)(v14 + 20);
    v51 = (void (*)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))(**(int **)(v16 + 16) + *(_QWORD *)(v16 + 16));
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 432) = v18;
    *v18 = v0;
    v18[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
    v51(*(_QWORD *)(v0 + 328), v4, v17, v15, v16);
    return;
  }
  v21 = *(_QWORD *)(v0 + 416);
  v22 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 216);
  v24 = *(_QWORD *)(v0 + 224);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
  v26 = *(os_unfair_lock_s **)(*(_QWORD *)(v23 + 112) + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v27 = swift_task_alloc();
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v24;
  v28 = (uint64_t *)&v26[4];
  v26 += 6;
  os_unfair_lock_lock(v26);
  closure #1 in ConfigCache.subscript.getter(v28, *(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24), v22);
  os_unfair_lock_unlock(v26);
  if (!v21)
  {
    v29 = *(_QWORD *)(v0 + 272);
    v30 = *(_QWORD *)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 264), &demangling cache variable for type metadata for AspireApiConfig?);
      if (one-time initialization token for daemon != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.daemon);
      swift_bridgeObjectRetain_n();
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.default.getter();
      v35 = os_log_type_enabled(v33, v34);
      v36 = *(_QWORD *)(v0 + 224);
      if (v35)
      {
        v37 = *(_QWORD *)(v0 + 216);
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        v52 = v39;
        *(_DWORD *)v38 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v33, v34, "Missing cached configuration for group: %{public}s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v39, -1, -1);
        MEMORY[0x23B822DA8](v38, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v46 = *(_QWORD *)(v0 + 400);
      v47 = *(_QWORD *)(v0 + 368);
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, 255, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined destroy of AspireApiPECConfig(v47, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
      outlined destroy of AspireApiPECConfig(v46, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v20 = *(void (**)(void))(v0 + 8);
      goto LABEL_7;
    }
    v40 = *(_QWORD *)(v0 + 336);
    v41 = *(_QWORD *)(v0 + 320);
    v42 = *(_QWORD *)(v0 + 288);
    v44 = *(_QWORD *)(v0 + 216);
    v43 = *(_QWORD *)(v0 + 224);
    outlined init with take of SecretKey(*(_QWORD *)(v0 + 264), v42, type metadata accessor for AspireApiConfig);
    v45 = (_QWORD *)swift_task_alloc();
    v45[2] = v44;
    v45[3] = v43;
    v45[4] = v42;
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, 255, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
    static Message.with(_:)();
    swift_task_dealloc();
    outlined destroy of AspireApiPECConfig(v42, type metadata accessor for AspireApiConfig);
    outlined init with take of SecretKey(v41, v40, type metadata accessor for AspireApiConfigResponse);
    static Task<>.checkCancellation()();
    v48 = *(_QWORD *)(v0 + 336);
    swift_beginAccess();
    v49 = *(_QWORD *)(v48 + 8);
    *(_QWORD *)(v0 + 448) = v49;
    swift_bridgeObjectRetain();
    v50 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 456) = v50;
    *v50 = v0;
    v50[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
    KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 368), v49, *(_QWORD *)(v0 + 232));
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21[2];

  outlined init with take of SecretKey(v0[41], v0[42], type metadata accessor for AspireApiConfigResponse);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v20 = v0[27];
    v4 = (_QWORD *)v0[42];
    v5 = v0[28];
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v21[0] = v7;
    *(_DWORD *)v6 = 134349570;
    swift_beginAccess();
    v0[24] = *(_QWORD *)(*v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2050;
    v0[25] = *(_QWORD *)(v4[1] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2082;
    swift_bridgeObjectRetain();
    v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v5, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "Received configurations: %{public}ld usecase(s), %{public}ld key(s) for group '%{public}s'", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v7, -1, -1);
    MEMORY[0x23B822DA8](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v8 = v0[55];
  v9 = v0[53];
  v10 = (uint64_t *)v0[42];
  v11 = *(_QWORD *)(v0[30] + 112);
  swift_beginAccess();
  v12 = *v10;
  v13 = *(os_unfair_lock_s **)(v11 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v14 = swift_task_alloc();
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = (uint64_t *)&v13[4];
  v13 += 6;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v13);
  closure #1 in ConfigCache.update(keys:with:)(v15, *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), v21);
  os_unfair_lock_unlock(v13);
  if (!v8)
  {
    v16 = v21[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
    static Task<>.checkCancellation()();
    v17 = v0[42];
    swift_beginAccess();
    v18 = *(_QWORD *)(v17 + 8);
    v0[56] = v18;
    swift_bridgeObjectRetain();
    v19 = (_QWORD *)swift_task_alloc();
    v0[57] = v19;
    *v19 = v0;
    v19[1] = KeyRotation.rotateGroup(groupName:activeUseCases:);
    KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(v0[32], v0[27], v0[28], v0[46], v18, v0[29]);
  }
}

uint64_t closure #1 in KeyRotation.rotateGroup(groupName:activeUseCases:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AspireApiConfig)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AspireApiConfig));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_237D540E0;
  v12 = (_QWORD *)(v11 + v10);
  v13 = v11 + v10 + *(int *)(v8 + 48);
  *v12 = a2;
  v12[1] = a3;
  outlined init with copy of SecretKey(a4, v13, type metadata accessor for AspireApiConfig);
  swift_bridgeObjectRetain();
  v14 = specialized Dictionary.init(dictionaryLiteral:)(v11);
  result = swift_bridgeObjectRelease();
  *a1 = v14;
  return result;
}

uint64_t KeyRotation.run()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[5] = v0;
  v2 = type metadata accessor for Date();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 144);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[9];
  v2 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[6];
  (*(void (**)(void))(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))();
  Date.addingTimeInterval(_:)();
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  v8 = *v7;
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v1;
  swift_bridgeObjectRetain();
  v10 = specialized _NativeDictionary.filter(_:)((uint64_t)partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter, v9, v8);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v0[11] = specialized Set.init<A>(_:)(v10);
  v6(v1, v5);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[11];
  v2 = v0[5];
  v3 = swift_task_alloc();
  v0[12] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type KeyRotation and conformance KeyRotation, v4, (uint64_t (*)(uint64_t))type metadata accessor for KeyRotation, (uint64_t)&protocol conformance descriptor for KeyRotation);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = KeyRotation.run();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in KeyRotation.run()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v6[3] = a3;
  v6[4] = a2;
  return swift_task_switch();
}

uint64_t closure #2 in KeyRotation.run()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = a1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for TaskPriority?);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &async function pointer to partial apply for closure #1 in closure #2 in KeyRotation.run();
  *(_QWORD *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in closure #2 in KeyRotation.run()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  v6[18] = a4;
  return swift_task_switch();
}

uint64_t KeyRotation.run(activeUseCases:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t KeyRotation.run(activeUseCases:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t (__cdecl *v11)();
  uint64_t v12;

  if (one-time initialization token for daemon != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v12 = v5;
    *(_DWORD *)v4 = 136446210;
    swift_bridgeObjectRetain();
    v6 = Set.description.getter();
    v8 = v7;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "Running rotation task for %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v5, -1, -1);
    MEMORY[0x23B822DA8](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v11 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized KeyRotation.activeGroups(activeUseCases:)
                              + async function pointer to specialized KeyRotation.activeGroups(activeUseCases:));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v9;
  *v9 = v0;
  v9[1] = KeyRotation.run(activeUseCases:);
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 104) = v2;
  v3 = -1;
  v4 = -1 << v2;
  v5 = *(_QWORD *)(v1 + 56);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  *(_QWORD *)(v0 + 56) = 0;
  v6 = v3 & v5;
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
LABEL_5:
    *(_QWORD *)(v0 + 64) = v7;
    *(_QWORD *)(v0 + 72) = v9;
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    *(_QWORD *)(v0 + 80) = v12;
    swift_bridgeObjectRetain();
    static Task<>.checkCancellation()();
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v15;
    *v15 = v0;
    v15[1] = KeyRotation.run(activeUseCases:);
    return KeyRotation.rotateGroup(groupName:activeUseCases:)(v11, v12, *(_QWORD *)(v0 + 24));
  }
  v13 = 63 - v4;
  if (v13 > 0x7F)
  {
    v14 = *(_QWORD *)(v1 + 64);
    if (v14)
    {
      v7 = 1;
LABEL_9:
      v9 = (v14 - 1) & v14;
      v8 = __clz(__rbit64(v14)) + (v7 << 6);
      goto LABEL_5;
    }
    if (v13 >= 0xC0)
    {
      v14 = *(_QWORD *)(v1 + 72);
      if (v14)
      {
        v7 = 2;
        goto LABEL_9;
      }
      if (v13 >= 0x100)
      {
        v14 = *(_QWORD *)(v1 + 80);
        if (v14)
        {
          v7 = 3;
          goto LABEL_9;
        }
        if (v13 >= 0x140)
        {
          v14 = *(_QWORD *)(v1 + 88);
          if (v14)
          {
            v7 = 4;
            goto LABEL_9;
          }
          v17 = 0;
          v18 = v13 >> 6;
          if (v18 <= 5)
            v18 = 5;
          v19 = v18 - 5;
          while (v19 != v17)
          {
            v14 = *(_QWORD *)(v1 + 96 + 8 * v17++);
            if (v14)
            {
              v7 = v17 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void KeyRotation.run(activeUseCases:)()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(void);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  if (v3)
  {
    v4 = __clz(__rbit64(v3));
    v5 = (v3 - 1) & v3;
    v6 = v4 | (v2 << 6);
    v7 = *(_QWORD *)(v0 + 48);
LABEL_3:
    *(_QWORD *)(v0 + 64) = v2;
    *(_QWORD *)(v0 + 72) = v5;
    v8 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    *(_QWORD *)(v0 + 80) = v10;
    swift_bridgeObjectRetain();
    static Task<>.checkCancellation()();
    if (!v1)
    {
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v16;
      *v16 = v0;
      v16[1] = KeyRotation.run(activeUseCases:);
      KeyRotation.rotateGroup(groupName:activeUseCases:)(v9, v10, *(_QWORD *)(v0 + 24));
      return;
    }
    v11 = *(void **)(v0 + 56);
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v12 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 104)) + 63) >> 6;
    v7 = *(_QWORD *)(v0 + 48);
    if (v12 >= v13)
      goto LABEL_20;
    v14 = v7 + 56;
    v15 = *(_QWORD *)(v7 + 56 + 8 * v12);
    ++v2;
    if (v15)
    {
LABEL_8:
      v5 = (v15 - 1) & v15;
      v6 = __clz(__rbit64(v15)) + (v2 << 6);
      goto LABEL_3;
    }
    v2 = v12 + 1;
    if (v12 + 1 >= v13)
      goto LABEL_20;
    v15 = *(_QWORD *)(v14 + 8 * v2);
    if (v15)
      goto LABEL_8;
    v2 = v12 + 2;
    if (v12 + 2 >= v13)
      goto LABEL_20;
    v15 = *(_QWORD *)(v14 + 8 * v2);
    if (v15)
      goto LABEL_8;
    v17 = v12 + 3;
    if (v17 >= v13)
    {
LABEL_20:
      v18 = *(_QWORD *)(v0 + 56);
      swift_release();
      if (!v18)
      {
        v19 = *(void (**)(void))(v0 + 8);
        goto LABEL_23;
      }
      swift_willThrow();
LABEL_22:
      v19 = *(void (**)(void))(v0 + 8);
LABEL_23:
      v19();
      return;
    }
    v15 = *(_QWORD *)(v14 + 8 * v17);
    if (v15)
    {
      v2 = v17;
      goto LABEL_8;
    }
    while (1)
    {
      v2 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v2 >= v13)
        goto LABEL_20;
      v15 = *(_QWORD *)(v14 + 8 * v2);
      ++v17;
      if (v15)
        goto LABEL_8;
    }
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;

  v1 = *(_QWORD *)(v0 + 96);

  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 56) = v1;
  if (v3)
  {
    v4 = __clz(__rbit64(v3));
    v5 = (v3 - 1) & v3;
    v6 = v4 | (v2 << 6);
    v7 = *(_QWORD *)(v0 + 48);
LABEL_3:
    *(_QWORD *)(v0 + 64) = v2;
    *(_QWORD *)(v0 + 72) = v5;
    v8 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    *(_QWORD *)(v0 + 80) = v10;
    swift_bridgeObjectRetain();
    static Task<>.checkCancellation()();
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v15;
    *v15 = v0;
    v15[1] = KeyRotation.run(activeUseCases:);
    KeyRotation.rotateGroup(groupName:activeUseCases:)(v9, v10, *(_QWORD *)(v0 + 24));
    return;
  }
  v11 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }
  v12 = (unint64_t)((1 << *(_BYTE *)(v0 + 104)) + 63) >> 6;
  v7 = *(_QWORD *)(v0 + 48);
  if (v11 < v12)
  {
    v13 = v7 + 56;
    v14 = *(_QWORD *)(v7 + 56 + 8 * v11);
    ++v2;
    if (v14)
    {
LABEL_7:
      v5 = (v14 - 1) & v14;
      v6 = __clz(__rbit64(v14)) + (v2 << 6);
      goto LABEL_3;
    }
    v2 = v11 + 1;
    if (v11 + 1 < v12)
    {
      v14 = *(_QWORD *)(v13 + 8 * v2);
      if (v14)
        goto LABEL_7;
      v2 = v11 + 2;
      if (v11 + 2 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * v2);
        if (v14)
          goto LABEL_7;
        v16 = v11 + 3;
        if (v16 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * v16);
          if (v14)
          {
            v2 = v16;
            goto LABEL_7;
          }
          while (1)
          {
            v2 = v16 + 1;
            if (__OFADD__(v16, 1))
              goto LABEL_23;
            if (v2 >= v12)
              break;
            v14 = *(_QWORD *)(v13 + 8 * v2);
            ++v16;
            if (v14)
              goto LABEL_7;
          }
        }
      }
    }
  }
  swift_release();
  if (v1)
    swift_willThrow();
  (*(void (**)(void))(v0 + 8))();
}

uint64_t KeyRotation.cancel()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 144) + 184;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with take of LocalizedError((__int128 *)(v0 + 56), v0 + 16);
    if (one-time initialization token for daemon != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_237BC8000, v3, v4, "Canceling key upload", v5, 2u);
      MEMORY[0x23B822DA8](v5, -1, -1);
    }

    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
    *(_QWORD *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    swift_beginAccess();
    outlined assign with take of NetworkManager?(v0 + 56, v1);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 56, &demangling cache variable for type metadata for NetworkManager?);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t KeyRotation.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 184, &demangling cache variable for type metadata for NetworkManager?);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t KeyRotation.__deallocating_deinit()
{
  KeyRotation.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t KeyRotation.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, v2);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  return v2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  int64_t v50;

  v37 = a2;
  v38 = a1;
  v4 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  v6 = MEMORY[0x24BDAC7A8](v47);
  v46 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v37 - v8;
  v9 = type metadata accessor for UseCaseGroup();
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  result = MEMORY[0x24BDAC7A8](v9);
  v43 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v49 = (_QWORD *)a3;
  v13 = *(_QWORD *)(a3 + 64);
  v39 = 0;
  v40 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v42;
  v17 = (uint64_t)v43;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v50 = v12;
      v20 = v19 | (v12 << 6);
      goto LABEL_5;
    }
    v32 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v32 >= v41)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v49, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
    v33 = *(_QWORD *)(v40 + 8 * v32);
    v34 = v12 + 1;
    if (!v33)
    {
      v34 = v12 + 2;
      if (v12 + 2 >= v41)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v49, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
      v33 = *(_QWORD *)(v40 + 8 * v34);
      if (!v33)
      {
        v34 = v12 + 3;
        if (v12 + 3 >= v41)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v49, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
        v33 = *(_QWORD *)(v40 + 8 * v34);
        if (!v33)
          break;
      }
    }
LABEL_20:
    v16 = (v33 - 1) & v33;
    v50 = v34;
    v20 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_5:
    v21 = (uint64_t *)(v49[6] + 16 * v20);
    v23 = *v21;
    v22 = v21[1];
    outlined init with copy of SecretKey(v49[7] + *(_QWORD *)(v44 + 72) * v20, v17, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v24 = v47;
    v25 = (uint64_t)v18 + *(int *)(v47 + 48);
    *v18 = v23;
    v18[1] = v22;
    outlined init with copy of SecretKey(v17, v25, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v26 = *(int *)(v24 + 48);
    v27 = v46;
    v28 = (uint64_t)v46 + v26;
    *v46 = v23;
    v27[1] = v22;
    outlined init with copy of SecretKey(v25, (uint64_t)v27 + v26, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v29 = v28 + *(int *)(v45 + 36);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v31 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v48, 2, 2, v30);
    swift_bridgeObjectRetain_n();
    LOBYTE(v29) = specialized static NetworkManagerType.== infix(_:_:)(v29, v31);
    outlined destroy of AspireApiPECConfig(v31, type metadata accessor for NetworkManagerType);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    outlined destroy of AspireApiPECConfig(v28, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    outlined destroy of AspireApiPECConfig(v17, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    result = swift_bridgeObjectRelease();
    v12 = v50;
    if ((v29 & 1) != 0)
    {
      *(unint64_t *)((char *)v38 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (__OFADD__(v39++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v49, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
      }
    }
  }
  v35 = v12 + 4;
  if (v12 + 4 >= v41)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v49, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
  v33 = *(_QWORD *)(v40 + 8 * v35);
  if (v33)
  {
    v34 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v34 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v34 >= v41)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v38, v37, v39, v49, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
    v33 = *(_QWORD *)(v40 + 8 * v34);
    ++v35;
    if (v33)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v8 = type metadata accessor for Date();
  v49 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)&v43 - v12;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  v47 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v14 = result;
  v44 = a1;
  v45 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  v18 = v47;
  v19 = v48;
  v46 = a4;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v50 = v16;
      v21 = v20 | (v16 << 6);
    }
    else
    {
      v22 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v22 >= v45)
        return v14;
      v23 = v44[v22];
      v24 = v16 + 1;
      if (!v23)
      {
        v24 = v16 + 2;
        if (v16 + 2 >= v45)
          return v14;
        v23 = v44[v24];
        if (!v23)
        {
          v24 = v16 + 3;
          if (v16 + 3 >= v45)
            return v14;
          v23 = v44[v24];
          if (!v23)
          {
            v25 = v16 + 4;
            if (v16 + 4 >= v45)
              return v14;
            v23 = v44[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v45)
                  return v14;
                v23 = v44[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v16 + 4;
          }
        }
      }
LABEL_24:
      v15 = (v23 - 1) & v23;
      v50 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = a4[7];
    v27 = (uint64_t *)(a4[6] + 16 * v21);
    v28 = *v27;
    v29 = v27[1];
    v30 = v49;
    v31 = *(_QWORD *)(v49 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v19, v26 + v31 * v21, v18);
    v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v32(v51, v19, v18);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v14 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v36 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      v18 = v47;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v33) >> 6;
      v18 = v47;
      do
      {
        if (++v35 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v39 = v35 == v38;
        if (v35 == v38)
          v35 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v40 == -1);
      v36 = __clz(__rbit64(~v40)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    v41 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v36);
    *v41 = v28;
    v41[1] = v29;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(*(_QWORD *)(v14 + 56) + v36 * v31, v51, v18);
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v46;
    v16 = v50;
    if (!a3)
      return v14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, a3, a4, type metadata accessor for AspireApiConfig, &demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);

  v50 = a5;
  v11 = a5(0);
  v47 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v49 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v46 = (char *)&v44 - v14;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(a6);
  result = static _DictionaryStorage.allocate(capacity:)();
  v16 = result;
  v44 = a1;
  v45 = a2;
  if (a2 < 1)
    v17 = 0;
  else
    v17 = *a1;
  v18 = 0;
  v19 = result + 64;
  v20 = (uint64_t)v46;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v48 = v18;
      v22 = v21 | (v18 << 6);
    }
    else
    {
      v23 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_40;
      if (v23 >= v45)
        return v16;
      v24 = v44[v23];
      v25 = v18 + 1;
      if (!v24)
      {
        v25 = v18 + 2;
        if (v18 + 2 >= v45)
          return v16;
        v24 = v44[v25];
        if (!v24)
        {
          v25 = v18 + 3;
          if (v18 + 3 >= v45)
            return v16;
          v24 = v44[v25];
          if (!v24)
          {
            v26 = v18 + 4;
            if (v18 + 4 >= v45)
              return v16;
            v24 = v44[v26];
            if (!v24)
            {
              while (1)
              {
                v25 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v25 >= v45)
                  return v16;
                v24 = v44[v25];
                ++v26;
                if (v24)
                  goto LABEL_24;
              }
            }
            v25 = v18 + 4;
          }
        }
      }
LABEL_24:
      v17 = (v24 - 1) & v24;
      v48 = v25;
      v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    v27 = a4[7];
    v28 = a4;
    v29 = (uint64_t *)(a4[6] + 16 * v22);
    v30 = *v29;
    v31 = v29[1];
    v32 = *(_QWORD *)(v47 + 72);
    v33 = v50;
    outlined init with copy of SecretKey(v27 + v32 * v22, v20, v50);
    outlined init with take of SecretKey(v20, v49, v33);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v16 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v37 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v40 = v36 == v39;
        if (v36 == v39)
          v36 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v41 == -1);
      v37 = __clz(__rbit64(~v41)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
    v42 = (_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v37);
    *v42 = v30;
    v42[1] = v31;
    result = outlined init with take of SecretKey(v49, *(_QWORD *)(v16 + 56) + v37 * v32, v50);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v28;
    v18 = v48;
    if (!a3)
      return v16;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t isStackAllocationSafe;
  char v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  v28 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v26 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      v6 = (uint64_t *)(v25[0] + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      ++v5;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v2 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(v2 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          isStackAllocationSafe = swift_bridgeObjectRelease();
          v27 = v5;
LABEL_19:
          v19 = *(_BYTE *)(v2 + 32);
          v20 = (unint64_t)((1 << v19) + 63) >> 6;
          v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
          {
            MEMORY[0x24BDAC7A8](isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            v22 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            v22 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            MEMORY[0x23B822DA8](v23, -1, -1);
          }
          return v22;
        }
        v15 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v15;
          if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            break;
          v16 = (_QWORD *)(v12 + 16 * v11);
          v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v27 = v5;
            isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return v2;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v30 = (unint64_t *)result;
  v31 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v30, a2, v31, a3);
  }
  v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_29;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = 1 << v16;
    if (((1 << v16) & *(_QWORD *)(v32 + 8 * (v16 >> 6))) == 0)
      goto LABEL_4;
    v19 = *(_QWORD *)(a3 + 48);
    v20 = (_QWORD *)(v19 + 16 * v16);
    v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v24 = ~v15;
      for (i = v16 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v19 + 16 * v26);
        v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v17 = v26 >> 6;
          v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    result = swift_bridgeObjectRelease();
LABEL_15:
    v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      v23 = v31 - 1;
      if (__OFSUB__(v31, 1))
        goto LABEL_30;
      --v31;
      if (!v23)
        return MEMORY[0x24BEE4B08];
    }
LABEL_5:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.genericIntersection<A>(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a2 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = a3((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    swift_release();
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v9 = a3((char *)v10, v7, v5, a2);
    swift_release();
    MEMORY[0x23B822DA8](v10, -1, -1);
  }
  return v9;
}

uint64_t specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v21;
  unint64_t j;
  unint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a2;
  v31 = *(_QWORD *)(a3 + 16);
  if (!v31)
  {
    v26 = 0;
    goto LABEL_27;
  }
  v32 = a4 + 56;
  v30 = a3 + 32;
  swift_bridgeObjectRetain();
  v28 = 0;
  for (i = 0; i != v31; ++i)
  {
    v7 = (uint64_t *)(v30 + 16 * i);
    v9 = *v7;
    v8 = v7[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(a4 + 32);
    v12 = v10 & ~v11;
    v13 = v12 >> 6;
    v14 = 1 << v12;
    if (((1 << v12) & *(_QWORD *)(v32 + 8 * (v12 >> 6))) == 0)
      goto LABEL_3;
    v15 = *(_QWORD *)(a4 + 48);
    v16 = (_QWORD *)(v15 + 16 * v12);
    v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v21 = ~v11;
      for (j = v12 + 1; ; j = v23 + 1)
      {
        v23 = j & v21;
        if (((*(_QWORD *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0)
          break;
        v24 = (_QWORD *)(v15 + 16 * v23);
        v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v13 = v23 >> 6;
          v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    result = swift_bridgeObjectRelease();
LABEL_12:
    v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  v5 = a2;
  v26 = v28;
LABEL_27:
  swift_retain();
  return specialized _NativeSet.extractSubset(using:count:)(a1, v5, v26, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v39;

  v35 = a3 + 64;
  v4 = 1 << *(_BYTE *)(a3 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a3 + 64);
  v36 = (unint64_t)(v4 + 63) >> 6;
  v39 = a4 + 56;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
LABEL_5:
  v33 = v8;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_25;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v12 >= v36)
      goto LABEL_46;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v36)
        goto LABEL_46;
      v13 = *(_QWORD *)(v35 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v36)
          goto LABEL_46;
        v13 = *(_QWORD *)(v35 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v36)
            goto LABEL_46;
          v13 = *(_QWORD *)(v35 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    v22 = 1 << v20;
    if (((1 << v20) & *(_QWORD *)(v39 + 8 * (v20 >> 6))) == 0)
      goto LABEL_6;
    v23 = *(_QWORD *)(a4 + 48);
    v24 = (_QWORD *)(v23 + 16 * v20);
    v25 = *v24 == v17 && v24[1] == v16;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
LABEL_32:
      v26 = a1[v21];
      a1[v21] = v22 | v26;
      if ((v22 & v26) == 0)
      {
        v8 = v33 + 1;
        if (!__OFADD__(v33, 1))
          goto LABEL_5;
        __break(1u);
LABEL_46:
        swift_release();
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(a1, a2, v33, a4);
      }
    }
    else
    {
      v27 = ~v19;
      for (i = v20 + 1; ; i = v29 + 1)
      {
        v29 = i & v27;
        if (((*(_QWORD *)(v39 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0)
          break;
        v30 = (_QWORD *)(v23 + 16 * v29);
        v31 = *v30 == v17 && v30[1] == v16;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v21 = v29 >> 6;
          v22 = 1 << v29;
          goto LABEL_32;
        }
      }
LABEL_6:
      result = swift_bridgeObjectRelease();
    }
  }
  v14 = v12 + 4;
  if (v14 >= v36)
    goto LABEL_46;
  v13 = *(_QWORD *)(v35 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v36)
      goto LABEL_46;
    v13 = *(_QWORD *)(v35 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t i;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v2;
  v48 = a2;
  v6 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x24BDAC7A8](v8);
  v43 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v13);
  v49 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 56);
  v46 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v47 = (unint64_t)(v16 + 63) >> 6;
  v50 = a1;
  swift_bridgeObjectRetain();
  v19 = 0;
  v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v20 | (v19 << 6); ; i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * i);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(*(_QWORD *)(v48 + 112) + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v29 = (uint64_t *)(v28 + 16);
    v3 = (os_unfair_lock_s *)(v28 + 24);
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v3);
    closure #1 in ConfigCache.subscript.getter(v29, v27, v26, (uint64_t)v12);
    if (v4)
      break;
    v4 = 0;
    os_unfair_lock_unlock(v3);
    v30 = type metadata accessor for AspireApiConfig(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v12, 1, v30))
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig?);
      v31 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v49, 1, 1, v31);
LABEL_22:
      swift_bridgeObjectRelease();
      if (v18)
        goto LABEL_4;
      goto LABEL_5;
    }
    v32 = v49;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, v49, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig?);
    v3 = (os_unfair_lock_s *)type metadata accessor for AspireApiConfig.OneOf_Config(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, os_unfair_lock_s *))(*(_QWORD *)&v3[-2]._os_unfair_lock_opaque
                                                                              + 48))(v32, 1, v3) == 1)goto LABEL_22;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v33 = v32;
      v34 = (uint64_t)v43;
      v35 = (uint64_t)v43;
      v36 = type metadata accessor for AspireApiPECConfig;
    }
    else
    {
      v33 = v32;
      v34 = (uint64_t)v44;
      v35 = (uint64_t)v44;
      v36 = type metadata accessor for AspireApiPIRConfig;
    }
    outlined init with take of SecretKey(v33, v35, v36);
    v37 = *(_QWORD *)(v34 + 32);
    v3 = *(os_unfair_lock_s **)(v34 + 40);
    outlined copy of Data._Representation(v37, (unint64_t)v3);
    outlined destroy of AspireApiPECConfig(v34, v36);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    v39 = v45[2];
    v38 = v45[3];
    if (v39 >= v38 >> 1)
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v45);
    v40 = v45;
    v45[2] = v39 + 1;
    v41 = &v40[2 * v39];
    v41[4] = v37;
    v41[5] = v3;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      break;
    }
    if (v19 >= v47)
      goto LABEL_37;
    v23 = *(_QWORD *)(v46 + 8 * v19);
    if (!v23)
    {
      v24 = v19 + 1;
      if (v19 + 1 >= v47)
        goto LABEL_37;
      v23 = *(_QWORD *)(v46 + 8 * v24);
      if (!v23)
      {
        v24 = v19 + 2;
        if (v19 + 2 >= v47)
          goto LABEL_37;
        v23 = *(_QWORD *)(v46 + 8 * v24);
        if (!v23)
        {
          v24 = v19 + 3;
          if (v19 + 3 >= v47)
            goto LABEL_37;
          v23 = *(_QWORD *)(v46 + 8 * v24);
          if (!v23)
          {
            v24 = v19 + 4;
            if (v19 + 4 >= v47)
            {
LABEL_37:
              swift_release();
              return;
            }
            v23 = *(_QWORD *)(v46 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                v19 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_39;
                if (v19 >= v47)
                  goto LABEL_37;
                v23 = *(_QWORD *)(v46 + 8 * v19);
                ++v24;
                if (v23)
                  goto LABEL_17;
              }
            }
          }
        }
      }
      v19 = v24;
    }
LABEL_17:
    v18 = (v23 - 1) & v23;
  }
  os_unfair_lock_unlock(v3);
  __break(1u);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;

  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v10 << 6);
LABEL_22:
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 48);
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
      v18 = *v17;
      v19 = v17[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      if ((v21 & 1) != 0)
      {
        v22 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 16 * v20);
        v23 = v22[1];
        v27 = *v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
          v28 = (_QWORD *)result;
        }
        v25 = v28[2];
        v24 = v28[3];
        if (v25 >= v24 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v28);
          v28 = (_QWORD *)result;
        }
        v28[2] = v25 + 1;
        v26 = &v28[2 * v25];
        v26[4] = v27;
        v26[5] = v23;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        result = swift_bridgeObjectRelease();
      }
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v13 >= v8)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_21;
  v10 = v13 + 1;
  if (v13 + 1 >= v8)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 2;
  if (v13 + 2 >= v8)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 3;
  if (v13 + 3 >= v8)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_21:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_30:
    swift_release();
    return (uint64_t)v28;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_30;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized KeyRotation.activeGroups(activeUseCases:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[6] = v0;
  v2 = type metadata accessor for Date();
  v1[7] = v2;
  v1[8] = *(_QWORD *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v45;
  int64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;

  v1 = swift_bridgeObjectRetain();
  v2 = specialized _NativeDictionary.filter(_:)(v1);
  v45 = v0 + 6;
  v0[16] = 0;
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    swift_release();
    v23 = MEMORY[0x24BEE4AF8];
LABEL_29:
    v0[17] = v23;
    if (one-time initialization token for daemon != -1)
      goto LABEL_40;
    goto LABEL_30;
  }
  v55 = v0[11];
  v61 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = specialized Dictionary.startIndex.getter(v2);
  if (v4 < 0)
    goto LABEL_39;
  v6 = v4;
  if (v4 >= 1 << *(_BYTE *)(v2 + 32))
    goto LABEL_39;
  v7 = 0;
  v8 = v2 + 64;
  v52 = v0[14];
  v53 = v0[15];
  v56 = v2 + 80;
  v50 = v0[12];
  v51 = v0[13];
  v46 = v3;
  v47 = v0;
  v54 = v2;
  v48 = v5;
  v49 = v2 + 64;
  while (1)
  {
    v9 = v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
      break;
    if (*(_DWORD *)(v2 + 36) != v5)
      goto LABEL_35;
    v57 = v7;
    v58 = 1 << v6;
    v11 = (_QWORD *)v0[14];
    v10 = (_QWORD *)v0[15];
    v12 = (uint64_t)v10 + *(int *)(v55 + 48);
    v13 = (uint64_t *)v0[13];
    v59 = (uint64_t *)v0[12];
    v14 = *(_QWORD *)(v2 + 56);
    v15 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v6);
    v16 = *v15;
    v17 = v15[1];
    v18 = type metadata accessor for UseCaseGroup();
    v60 = v6;
    outlined init with copy of SecretKey(v14 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v6, v12, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    *v10 = v16;
    *(_QWORD *)(v53 + 8) = v17;
    *v11 = v16;
    *(_QWORD *)(v52 + 8) = v17;
    outlined init with copy of SecretKey(v12, (uint64_t)v11 + *(int *)(v55 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v0 = &demangling cache variable for type metadata for (key: String, value: UseCaseGroup);
    outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    swift_bridgeObjectRetain_n();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    v19 = *(int *)(v55 + 48);
    v20 = (uint64_t)v59 + v19;
    v21 = *v13;
    v22 = *(_QWORD *)(v51 + 8);
    *v59 = *v13;
    *(_QWORD *)(v50 + 8) = v22;
    outlined init with copy of SecretKey((uint64_t)v13 + v19, (uint64_t)v59 + v19, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    swift_bridgeObjectRetain();
    outlined destroy of AspireApiPECConfig(v20, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    v23 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1);
      v23 = v61;
    }
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    v26 = v60;
    if (v25 >= v24 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v26 = v60;
      v23 = v61;
    }
    *(_QWORD *)(v23 + 16) = v25 + 1;
    v27 = v23 + 16 * v25;
    *(_QWORD *)(v27 + 32) = v21;
    *(_QWORD *)(v27 + 40) = v22;
    v2 = v54;
    v28 = 1 << *(_BYTE *)(v54 + 32);
    if (v26 >= v28)
      goto LABEL_36;
    v8 = v49;
    v29 = *(_QWORD *)(v49 + 8 * v9);
    if ((v29 & v58) == 0)
      goto LABEL_37;
    v5 = v48;
    if (*(_DWORD *)(v54 + 36) != v48)
      goto LABEL_38;
    v30 = v29 & (-2 << (v26 & 0x3F));
    if (v30)
    {
      v6 = __clz(__rbit64(v30)) | v26 & 0xFFFFFFFFFFFFFFC0;
      v31 = v46;
      v0 = v47;
      goto LABEL_23;
    }
    v32 = v9 + 1;
    v33 = (unint64_t)(v28 + 63) >> 6;
    v31 = v46;
    v0 = v47;
    if (v9 + 1 < v33)
    {
      v34 = *(_QWORD *)(v49 + 8 * v32);
      if (v34)
      {
LABEL_21:
        v6 = __clz(__rbit64(v34)) + (v32 << 6);
        goto LABEL_23;
      }
      while (v33 - 2 != v9)
      {
        v34 = *(_QWORD *)(v56 + 8 * v9++);
        if (v34)
        {
          v32 = v9 + 1;
          goto LABEL_21;
        }
      }
    }
    v6 = 1 << *(_BYTE *)(v54 + 32);
LABEL_23:
    v7 = v57 + 1;
    if (v57 + 1 == v31)
    {
      swift_release();
      goto LABEL_29;
    }
    if ((v6 & 0x8000000000000000) != 0 || (uint64_t)v6 >= v28)
      goto LABEL_39;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  swift_once();
LABEL_30:
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    *(_DWORD *)v38 = 136315138;
    v61 = v39;
    v40 = swift_bridgeObjectRetain();
    v41 = MEMORY[0x23B822070](v40, MEMORY[0x24BEE0D00]);
    v43 = v42;
    swift_bridgeObjectRelease();
    *(v45 - 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v36, v37, "Skipping groups that manage their own networking: %s", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v39, -1, -1);
    MEMORY[0x23B822DA8](v38, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v0[18] = *(_QWORD *)(v0[6] + 144);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0[18];
  v2 = v0[16];
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  (*(void (**)(void))(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))();
  Date.addingTimeInterval(_:)();
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  v9 = *v8;
  v10 = swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v3;
  swift_bridgeObjectRetain();
  v11 = specialized _NativeDictionary.filter(_:)((uint64_t)closure #1 in ActiveUseCaseTracker.activeUseCases.getterpartial apply, v10, v9);
  v0[19] = v2;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v0[20] = specialized Set.init<A>(_:)(v11);
  v7(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 48);
  swift_retain();
  v4 = specialized Sequence.compactMap<A>(_:)(v1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  v5 = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  v6 = specialized _NativeSet.subtracting<A>(_:)(v2, v5);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t partial apply for closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(a1, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t outlined init with copy of NetworkManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_237D1B744()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in KeyRotation.rotateGroup(groupName:activeUseCases:)(unint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in KeyRotation.rotateGroup(groupName:activeUseCases:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in KeyRotation.run()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in KeyRotation.run()(a1, v5, v4);
}

uint64_t partial apply for closure #2 in KeyRotation.run()()
{
  uint64_t v0;

  return closure #2 in KeyRotation.run()(v0);
}

uint64_t type metadata accessor for KeyRotation()
{
  return objc_opt_self();
}

uint64_t sub_237D1B838@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 184;
  swift_beginAccess();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3, a2, &demangling cache variable for type metadata for NetworkManager?);
}

uint64_t method lookup function for KeyRotation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KeyRotation.keyUploadService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of KeyRotation.keyUploadService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of KeyRotation.keyUploadService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of KeyRotation.__allocating_init(configCache:keyStorage:allowList:activeUseCaseTracker:networkDelegation:currentTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of KeyRotation.activeGroups(activeUseCases:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of KeyRotation.activeGroups(activeUseCases:);
  return v6(a1);
}

uint64_t dispatch thunk of KeyRotation.keyCreationCutoff(groupName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of KeyRotation.areKeysExpired(groupName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 192) + *(_QWORD *)(*(_QWORD *)v2 + 192));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.queryStatus(for:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of KeyRotation.rotateUserId(groupName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 200)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 200));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of KeyRotation.uploadKeys(userId:keyStatusesToUpload:networkManagerConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 216)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 216));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of KeyRotation.rotateKeys(groupName:userId:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 224)
                                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 224));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of KeyRotation.rotateGroup(groupName:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 232)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 232));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of KeyRotation.run()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 240) + *(_QWORD *)(*(_QWORD *)v0 + 240));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t dispatch thunk of KeyRotation.run(activeUseCases:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 248) + *(_QWORD *)(*(_QWORD *)v1 + 248));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v6(a1);
}

uint64_t dispatch thunk of KeyRotation.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 256) + *(_QWORD *)(*(_QWORD *)v0 + 256));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t sub_237D1BD0C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in KeyRotation.run()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  v4[18] = v2;
  return swift_task_switch();
}

uint64_t sub_237D1BDB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in ActiveUseCaseTracker.activeUseCases.getterpartial apply(uint64_t *a1, uint64_t a2)
{
  return partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter(a1, a2) & 1;
}

uint64_t ScheduledActivity.__allocating_init(handler:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), a1);
  return v2;
}

Swift::Void __swiftcall ScheduledActivity.register()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v15[6];

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v4 = *(_QWORD *)(v2 + 88);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  v8 = implicit closure #1 in ScheduledActivity.register()((uint64_t)v1 + *(_QWORD *)(*v1 + 96), v3, v4);
  v10 = v9;
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedScheduler);
  v12 = (void *)MEMORY[0x23B821F68](v5, v7);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v5;
  v13[3] = v7;
  v13[4] = v8;
  v13[5] = v10;
  v15[4] = partial apply for closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  v15[5] = v13;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v15[3] = &block_descriptor_6;
  v14 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v12, 0, v14);
  _Block_release(v14);
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t SendableBGSystemTask.lock.getter()
{
  return swift_retain();
}

uint64_t SendableBGSystemTask.__allocating_init(task:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<BGSystemTask, os_unfair_lock_s>);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v2 + 16) = v3;
  return v2;
}

uint64_t SendableBGSystemTask.init(task:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<BGSystemTask, os_unfair_lock_s>);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v1 + 16) = v3;
  return v1;
}

Swift::Void __swiftcall SendableBGSystemTask.setTaskCompleted()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  objc_msgSend(*(id *)(v1 + 16), sel_setTaskCompleted);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(Swift::Double a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  void **v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(v1 + 16);
  v3 = (void **)&v2[4];
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(v3);
  os_unfair_lock_unlock(v4);
}

id closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(void **a1)
{
  void *v1;
  id v3;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v4[0] = 0;
  if (objc_msgSend(v1, sel_setTaskExpiredWithRetryAfter_error_, v4))
    return v4[0];
  v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void SendableBGSystemTask.setExpirationHandler(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  void **v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (void **)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

void closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  _QWORD v5[6];

  v3 = *a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  v5[3] = &block_descriptor_4;
  v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_setExpirationHandler_, v4);
  _Block_release(v4);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t SendableBGSystemTask.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SendableBGSystemTask.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ScheduledActivity.handler.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t ScheduledActivity.init(handler:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
  return v1;
}

void *implicit closure #1 in ScheduledActivity.register()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
}

uint64_t implicit closure #2 in implicit closure #1 in ScheduledActivity.register()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a2, a3);
}

uint64_t closure #1 in ScheduledActivity.registerTask(identifier:handler:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  os_unfair_lock_s *v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v33 = a5;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v35 = v18;
    v32 = a1;
    *(_DWORD *)v17 = 136446210;
    swift_bridgeObjectRetain();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v35);
    a1 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v14, v15, "ScheduledActivity(%{public}s) run", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v18, -1, -1);
    v19 = v17;
    a5 = v33;
    MEMORY[0x23B822DA8](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for SendableBGSystemTask();
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<BGSystemTask, os_unfair_lock_s>);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v20 + 16) = v21;
  v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = a2;
  v23[5] = a3;
  v23[6] = v20;
  v23[7] = a4;
  v23[8] = a5;
  swift_bridgeObjectRetain();
  v24 = a1;
  swift_retain();
  swift_retain();
  v25 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:), (uint64_t)v23);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a2;
  v26[3] = a3;
  v26[4] = v25;
  v27 = *(_QWORD *)(v20 + 16);
  v28 = (void **)(v27 + 16);
  v29 = (os_unfair_lock_s *)(v27 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v29);
  closure #1 in SendableBGSystemTask.setExpirationHandler(_:)(v28, (uint64_t)partial apply for closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:), (uint64_t)v26);
  os_unfair_lock_unlock(v29);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  *(_QWORD *)(v7 + 48) = a5;
  *(_QWORD *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 40) = a4;
  v9 = type metadata accessor for CancellationError();
  *(_QWORD *)(v7 + 64) = v9;
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 80) = swift_task_alloc();
  *(_BYTE *)(v7 + 104) = 0;
  v12 = (uint64_t (*)(void))((char *)a7 + *a7);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 88) = v10;
  *v10 = v7;
  v10[1] = closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  return v12();
}

uint64_t closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  $defer #1 <A>() in closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)((_BYTE *)(v0 + 104), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (_BYTE *)(v0 + 104);
  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 64);

    *(_BYTE *)(v0 + 104) = 1;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);

  }
  else
  {

    if (one-time initialization token for daemon != -1)
      swift_once();
    v7 = *(void **)(v0 + 96);
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain();
    v9 = v7;
    swift_bridgeObjectRetain();
    v10 = v7;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void **)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 48);
    if (v13)
    {
      v21 = *(_QWORD *)(v0 + 40);
      v16 = swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v23 = v22;
      *(_DWORD *)v16 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v15, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2114;
      v18 = v14;
      v19 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 32) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v17 = v19;

      _os_log_impl(&dword_237BC8000, v11, v12, "ScheduledActivity(%{public}s) threw error: %{public}@", (uint8_t *)v16, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v17, -1, -1);
      swift_arrayDestroy();
      v2 = (_BYTE *)(v0 + 104);
      MEMORY[0x23B822DA8](v22, -1, -1);
      MEMORY[0x23B822DA8](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  $defer #1 <A>() in closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(v2, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void $defer #1 <A>() in closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(_BYTE *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  void **v19;
  os_unfair_lock_s *v20;
  uint64_t v21[2];

  if (*a1 == 1)
  {
    if (one-time initialization token for daemon != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v21[0] = v11;
      *(_DWORD *)v10 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v8, v9, "ScheduledActivity(%{public}s) expired", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v11, -1, -1);
      MEMORY[0x23B822DA8](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v18 = *(os_unfair_lock_s **)(a4 + 16);
    v19 = (void **)&v18[4];
    v20 = v18 + 6;
    os_unfair_lock_lock(v18 + 6);
    closure #1 in SendableBGSystemTask.setTaskExpiredWithRetryAfter(_:)(v19);
    os_unfair_lock_unlock(v20);
  }
  else
  {
    v12 = *(_QWORD *)(a4 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
    objc_msgSend(*(id *)(v12 + 16), sel_setTaskCompleted);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
    if (one-time initialization token for daemon != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v21[0] = v17;
      *(_DWORD *)v16 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v14, v15, "ScheduledActivity(%{public}s) completed", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v17, -1, -1);
      MEMORY[0x23B822DA8](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for daemon != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v7, v8, "ScheduledActivity(%{public}s) deferred", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return MEMORY[0x23B82210C](a3, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
}

uint64_t ScheduledActivity.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return v0;
}

uint64_t ScheduledActivity.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_deallocClassInstance();
}

void specialized ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v12[6];

  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedScheduler);
  v9 = (void *)MEMORY[0x23B821F68](a1, a2);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v12[4] = closure #1 in ScheduledActivity.registerTask(identifier:handler:)partial apply;
  v12[5] = v10;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v12[3] = &block_descriptor_21;
  v11 = _Block_copy(v12);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v9, 0, v11);
  _Block_release(v11);

}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t dispatch thunk of static ScheduledActivityHandler.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScheduledActivityHandler.run@Sendable ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v7(a1, a2);
}

uint64_t type metadata accessor for SendableBGSystemTask()
{
  return objc_opt_self();
}

uint64_t method lookup function for SendableBGSystemTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SendableBGSystemTask.__allocating_init(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata completion function for ScheduledActivity()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ScheduledActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScheduledActivity);
}

uint64_t method lookup function for ScheduledActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduledActivity.__allocating_init(handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_237D1D62C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (int *)v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return closure #1 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_237D1D6FC()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in ScheduledActivity.registerTask(identifier:handler:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_237D1D738()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ScheduledActivity.register()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 16) + *(_QWORD *)(v3 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  v4[2] = v5;
  *v5 = v4;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v7(v2, v3);
}

uint64_t specialized TokenIssuerDirectory.isValid(tokenKey:currentTime:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[20];
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + *(int *)(type metadata accessor for TokenIssuerDirectory() + 20)) + 16);
  if (v10)
  {
    v20[0] = v9;
    v20[1] = v7;
    v20[2] = v6;
    v25 = a2 >> 62;
    v20[15] = HIDWORD(a1);
    v11 = __OFSUB__(HIDWORD(a1), (_DWORD)a1);
    v21 = v11;
    v20[18] = HIDWORD(a1) - (int)a1;
    v23 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    v20[16] = (int)a1;
    v20[14] = a1 >> 32;
    v20[12] = (a1 >> 32) - (int)a1;
    v20[19] = BYTE6(a2);
    v20[13] = (char *)&v32 + BYTE6(a2);
    v12 = swift_bridgeObjectRetain();
    v24 = 0;
    v20[17] = v12;
    v13 = (unsigned __int8 *)(v12 + 64);
    v22 = a2;
    do
    {
      if (*((_WORD *)v13 - 16) == 2)
      {
        v14 = *((_QWORD *)v13 - 2);
        v26 = *((_QWORD *)v13 - 1);
        v27 = *v13;
        v32 = *((_QWORD *)v13 - 3);
        v33 = v14;
        v30 = 45;
        v31 = 0xE100000000000000;
        v28 = 43;
        v29 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v33 = v15;
        v30 = 95;
        v31 = 0xE100000000000000;
        v28 = 47;
        v29 = 0xE100000000000000;
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        v16 = Data.init(base64Encoded:options:)();
        v18 = v17;
        outlined copy of Data?(v16, v17);
        swift_bridgeObjectRelease();
        if (v18 >> 60 != 15)
        {
          outlined consume of Data?(v16, v18);
          __asm { BR              X8 }
        }
        outlined copy of Data._Representation(a1, a2);
        outlined consume of Data?(a1, a2);
        outlined consume of Data?(v16, v18);
        swift_bridgeObjectRelease();
      }
      v13 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t TokenIssuerDirectory.isValid(tokenKey:currentTime:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[22];
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v22[17] = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + *(int *)(type metadata accessor for TokenIssuerDirectory() + 20)) + 16);
  if (v12)
  {
    v22[0] = v10;
    v22[1] = a4;
    v22[2] = a3;
    v22[3] = v9;
    v27 = a2 >> 62;
    v22[16] = HIDWORD(a1);
    v13 = __OFSUB__(HIDWORD(a1), (_DWORD)a1);
    v23 = v13;
    v22[20] = HIDWORD(a1) - (int)a1;
    v25 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    v22[18] = (int)a1;
    v22[15] = a1 >> 32;
    v22[13] = (a1 >> 32) - (int)a1;
    v22[21] = BYTE6(a2);
    v22[14] = (char *)&v34 + BYTE6(a2);
    v14 = swift_bridgeObjectRetain();
    v26 = 0;
    v22[19] = v14;
    v15 = (unsigned __int8 *)(v14 + 64);
    v24 = a2;
    do
    {
      if (*((_WORD *)v15 - 16) == 2)
      {
        v16 = *((_QWORD *)v15 - 2);
        v28 = *((_QWORD *)v15 - 1);
        v29 = *v15;
        v34 = *((_QWORD *)v15 - 3);
        v35 = v16;
        v32 = 45;
        v33 = 0xE100000000000000;
        v30 = 43;
        v31 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        v34 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v35 = v17;
        v32 = 95;
        v33 = 0xE100000000000000;
        v30 = 47;
        v31 = 0xE100000000000000;
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        v18 = Data.init(base64Encoded:options:)();
        v20 = v19;
        outlined copy of Data?(v18, v19);
        swift_bridgeObjectRelease();
        if (v20 >> 60 != 15)
        {
          outlined consume of Data?(v18, v20);
          __asm { BR              X8 }
        }
        outlined copy of Data._Representation(a1, a2);
        outlined consume of Data?(a1, a2);
        outlined consume of Data?(v18, v20);
        swift_bridgeObjectRelease();
      }
      v15 += 40;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  return 0;
}

CipherML::TokenKey::CodingKeys_optional __swiftcall TokenKey.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenKey.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return (CipherML::TokenKey::CodingKeys_optional)3;
  else
    return (CipherML::TokenKey::CodingKeys_optional)v3;
}

CipherML::TokenKey::CodingKeys_optional __swiftcall TokenKey.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::TokenKey::CodingKeys_optional)3;
}

uint64_t TokenKey.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TokenKey.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 0x79742D6E656B6F74;
  if (a1 == 1)
    return 0x656B2D6E656B6F74;
  return 0x6F6665622D746F6ELL;
}

uint64_t TokenKey.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x79742D6E656B6F74;
  if (a1 == 1)
    return 0x656B2D6E656B6F74;
  return 0x6F6665622D746F6ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenKey.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x656B2D6E656B6F74;
  v4 = 0xE900000000000079;
  v5 = 0xEA00000000006572;
  if (v2 != 1)
  {
    v3 = 0x6F6665622D746F6ELL;
    v4 = 0xEA00000000006572;
  }
  if (*a1)
    v6 = v3;
  else
    v6 = 0x79742D6E656B6F74;
  if (v2)
    v7 = v4;
  else
    v7 = 0xEA00000000006570;
  v8 = 0x656B2D6E656B6F74;
  if (*a2 == 1)
    v5 = 0xE900000000000079;
  else
    v8 = 0x6F6665622D746F6ELL;
  if (*a2)
    v9 = v8;
  else
    v9 = 0x79742D6E656B6F74;
  if (*a2)
    v10 = v5;
  else
    v10 = 0xEA00000000006570;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TokenKey.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TokenKey.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TokenKey.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TokenKey.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TokenKey.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TokenKey.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xEA00000000006570;
  v3 = *v1;
  v4 = 0xE900000000000079;
  v5 = 0x656B2D6E656B6F74;
  if (v3 != 1)
  {
    v5 = 0x6F6665622D746F6ELL;
    v4 = 0xEA00000000006572;
  }
  v6 = v3 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x79742D6E656B6F74;
  if (!v6)
    v2 = v4;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenKey.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656B2D6E656B6F74;
  if (*v0 != 1)
    v1 = 0x6F6665622D746F6ELL;
  if (*v0)
    return v1;
  else
    return 0x79742D6E656B6F74;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TokenKey.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenKey.CodingKeys()
{
  lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenKey.CodingKeys()
{
  lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TokenKey.tokenType.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

uint64_t TokenKey.tokenKeyBase64Url.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TokenKey.notBefore.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t TokenKey.tokenKey.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v0 = Data.init(base64Encoded:options:)();
  v2 = v1;
  outlined copy of Data?(v0, v1);
  swift_bridgeObjectRelease();
  if (v2 >> 60 != 15)
    outlined consume of Data?(v0, v2);
  return v0;
}

uint64_t TokenKey.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenKey.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

double TokenKey.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized TokenKey.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t TokenKey.init(tokenType:tokenKeyBase64Url:notBefore:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_WORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance TokenKey@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized TokenKey.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenKey(_QWORD *a1)
{
  return TokenKey.encode(to:)(a1);
}

CipherML::TokenIssuerDirectory::CodingKeys_optional __swiftcall TokenIssuerDirectory.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CipherML::TokenIssuerDirectory::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_tokenKeys;
  else
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

CipherML::TokenIssuerDirectory::CodingKeys_optional __swiftcall TokenIssuerDirectory.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CipherML::TokenIssuerDirectory::CodingKeys_optional v4;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_tokenKeys;
  else
    v4.value = CipherML_TokenIssuerDirectory_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

CipherML::TokenIssuerDirectory::CodingKeys_optional __swiftcall TokenIssuerDirectory.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::TokenIssuerDirectory::CodingKeys_optional)2;
}

uint64_t TokenIssuerDirectory.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TokenIssuerDirectory.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656B2D6E656B6F74;
  else
    return 0xD000000000000012;
}

uint64_t TokenIssuerDirectory.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656B2D6E656B6F74;
  else
    return 0xD000000000000012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenIssuerDirectory.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x656B2D6E656B6F74;
  else
    v3 = 0xD000000000000012;
  if (v2)
    v4 = 0x8000000237D60C40;
  else
    v4 = 0xEA00000000007379;
  if (*a2)
    v5 = 0x656B2D6E656B6F74;
  else
    v5 = 0xD000000000000012;
  if (*a2)
    v6 = 0xEA00000000007379;
  else
    v6 = 0x8000000237D60C40;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TokenIssuerDirectory.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TokenIssuerDirectory.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TokenIssuerDirectory.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TokenIssuerDirectory.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TokenIssuerDirectory.CodingKeys(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000012;
  if (*v1)
    v2 = 0x656B2D6E656B6F74;
  v3 = 0x8000000237D60C40;
  if (*v1)
    v3 = 0xEA00000000007379;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenIssuerDirectory.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656B2D6E656B6F74;
  else
    return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenIssuerDirectory.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenIssuerDirectory.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenIssuerDirectory.CodingKeys()
{
  lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenIssuerDirectory.CodingKeys()
{
  lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TokenIssuerDirectory.issuerRequestUri.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TokenIssuerDirectory.tokenKeys.getter()
{
  type metadata accessor for TokenIssuerDirectory();
  return swift_bridgeObjectRetain();
}

uint64_t TokenIssuerDirectory.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenIssuerDirectory.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 0;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDAE0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for TokenIssuerDirectory() + 20));
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TokenKey]);
    lazy protocol witness table accessor for type [TokenKey] and conformance <A> [A](&lazy protocol witness table cache variable for type [TokenKey] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TokenKey and conformance TokenKey, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TokenIssuerDirectory.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v19 = a2;
  v23 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v20 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenIssuerDirectory.CodingKeys>);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TokenIssuerDirectory();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys();
  v21 = v7;
  v11 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v18 = a1;
  v24 = v5;
  v12 = (uint64_t)v10;
  v27 = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB10]);
  v14 = v20;
  v13 = v21;
  v15 = v22;
  v16 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v12, v14, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TokenKey]);
  v26 = 1;
  lazy protocol witness table accessor for type [TokenKey] and conformance <A> [A](&lazy protocol witness table cache variable for type [TokenKey] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type TokenKey and conformance TokenKey, MEMORY[0x24BEE12D0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v15);
  *(_QWORD *)(v12 + *(int *)(v8 + 20)) = v25;
  outlined init with copy of TokenIssuerDirectory(v12, v19);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  return outlined destroy of TokenIssuerDirectory(v12);
}

uint64_t TokenIssuerDirectory.init(issuerRequestUri:tokenKeys:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for TokenIssuerDirectory();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenIssuerDirectory@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenIssuerDirectory.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenIssuerDirectory(_QWORD *a1)
{
  return TokenIssuerDirectory.encode(to:)(a1);
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_237D1FF20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x237D20104);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t type metadata accessor for TokenIssuerDirectory()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TokenIssuerDirectory;
  if (!type metadata singleton initialization cache for TokenIssuerDirectory)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t specialized TokenKey.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TokenKey.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenKey.CodingKeys, &type metadata for TokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenKey.CodingKeys, &type metadata for TokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenKey.CodingKeys, &type metadata for TokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenKey.CodingKeys, &type metadata for TokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys);
  }
  return result;
}

uint64_t specialized TokenKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenKey.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenKey.CodingKeys and conformance TokenKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v22 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v21 = 1;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  v19 = v10;
  v20 = 2;
  swift_bridgeObjectRetain();
  v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v14 = v8;
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  result = swift_bridgeObjectRelease();
  *(_WORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v16 & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenIssuerDirectory.CodingKeys, &type metadata for TokenIssuerDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenIssuerDirectory.CodingKeys, &type metadata for TokenIssuerDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenIssuerDirectory.CodingKeys, &type metadata for TokenIssuerDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenIssuerDirectory.CodingKeys, &type metadata for TokenIssuerDirectory.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenIssuerDirectory.CodingKeys and conformance TokenIssuerDirectory.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenKey and conformance TokenKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenKey and conformance TokenKey;
  if (!lazy protocol witness table cache variable for type TokenKey and conformance TokenKey)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenKey, &type metadata for TokenKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey and conformance TokenKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenKey and conformance TokenKey;
  if (!lazy protocol witness table cache variable for type TokenKey and conformance TokenKey)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenKey, &type metadata for TokenKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenKey and conformance TokenKey);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL();
    result = MEMORY[0x23B822CDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TokenKey] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TokenKey]);
    v8 = a2();
    result = MEMORY[0x23B822CDC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TokenIssuerDirectory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenIssuerDirectory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TokenIssuerDirectory(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TokenIssuerDirectory();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for TokenKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for TokenKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenKey()
{
  return &type metadata for TokenKey;
}

uint64_t storeEnumTagSinglePayload for TokenKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237D20AD4 + 4 * byte_237D5E4D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237D20B08 + 4 * asc_237D5E4D0[v4]))();
}

uint64_t sub_237D20B08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237D20B10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237D20B18);
  return result;
}

uint64_t sub_237D20B24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237D20B2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237D20B30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237D20B38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TokenKey.CodingKeys()
{
  return &type metadata for TokenKey.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenIssuerDirectory(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TokenIssuerDirectory(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TokenIssuerDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenIssuerDirectory()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D20DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenIssuerDirectory()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D20E44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for TokenIssuerDirectory()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TokenIssuerDirectory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237D20F7C + 4 * byte_237D5E4DF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237D20FB0 + 4 * byte_237D5E4DA[v4]))();
}

uint64_t sub_237D20FB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237D20FB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237D20FC0);
  return result;
}

uint64_t sub_237D20FCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237D20FD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237D20FD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237D20FE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TokenIssuerDirectory.CodingKeys()
{
  return &type metadata for TokenIssuerDirectory.CodingKeys;
}

uint64_t AspireSimilarityPlaintextPacking.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPacking(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPacking);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.init()@<X0>(_QWORD *a1@<X8>)
{
  return AspireSimilaritySerializedCiphertextMatrix.init()(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, a1);
}

uint64_t type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD v14[7];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = type metadata accessor for AspireHeSerializedDcrtPlaintext(0);
  v4 = MEMORY[0x24BDAC7A8](v15);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v14 - v8;
  v16 = a1;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (v10 && v16 != a2)
    {
      v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v14[5] = *(_QWORD *)(v7 + 72);
      v14[3] = a2;
      v14[6] = v6;
      outlined init with copy of SecretKey(v16 + v11, (uint64_t)v14 - v8, type metadata accessor for AspireHeSerializedDcrtPlaintext);
      outlined init with copy of SecretKey(a2 + v11, (uint64_t)v6, type metadata accessor for AspireHeSerializedDcrtPlaintext);
      __asm { BR              X10 }
    }
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v15 = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  v4 = MEMORY[0x24BDAC7A8](v15);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v14 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (v10 && a1 != a2)
    {
      v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v14[4] = *(_QWORD *)(v7 + 72);
      v14[3] = a2;
      v14[5] = a1;
      v14[7] = v10 - 1;
      outlined init with copy of SecretKey(a1 + v11, (uint64_t)v14 - v8, type metadata accessor for AspirePirSerializedKeywordDbRow);
      outlined init with copy of SecretKey(a2 + v11, (uint64_t)v6, type metadata accessor for AspirePirSerializedKeywordDbRow);
      __asm { BR              X10 }
    }
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(_BYTE *, uint64_t, uint64_t);
  unsigned int v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  BOOL v67;
  _BYTE *v68;
  uint64_t v69;
  int EnumCaseMultiPayload;
  _BYTE *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t *v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t (*v91)(uint64_t);
  uint64_t v92;
  _BYTE v93[24];
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v93[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v8);
  v111 = &v93[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v115);
  v116 = &v93[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v112 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v112);
  v128 = &v93[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v114 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v114);
  v122 = &v93[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v118);
  v121 = &v93[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v126 = *(_QWORD *)(v14 - 8);
  v127 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v119 = &v93[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v93[-v18];
  MEMORY[0x24BDAC7A8](v17);
  v123 = &v93[-v20];
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v125);
  v131 = &v93[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v124 = &v93[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = MEMORY[0x24BDAC7A8](v23);
  v130 = &v93[-v26];
  MEMORY[0x24BDAC7A8](v25);
  v129 = &v93[-v27];
  v120 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v113 = *(_QWORD *)(v120 - 8);
  v28 = MEMORY[0x24BDAC7A8](v120);
  v132 = &v93[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v28);
  v31 = &v93[-v30];
  v32 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = &v93[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = MEMORY[0x24BDAC7A8](v33);
  v39 = &v93[-v38];
  v40 = *(_QWORD *)(a1 + 16);
  if (v40 != *(_QWORD *)(a2 + 16))
  {
LABEL_36:
    v84 = 0;
    return v84 & 1;
  }
  if (v40 && a1 != a2)
  {
    v104 = v36;
    v95 = v19;
    v94 = v7;
    v100 = v5;
    v101 = v4;
    v41 = 0;
    v103 = 0;
    v42 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v43 = a1 + v42;
    v44 = a2 + v42;
    v45 = *(_QWORD *)(v37 + 72);
    v46 = (uint64_t)v121;
    v99 = v40;
    v98 = v43;
    v97 = v44;
    v96 = v45;
    while (1)
    {
      v102 = v41;
      v47 = v45 * v41;
      outlined init with copy of SecretKey(v43 + v45 * v41, (uint64_t)v39, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined init with copy of SecretKey(v44 + v47, (uint64_t)v35, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      if (*(_DWORD *)v39 != *(_DWORD *)v35)
        break;
      if (*((_DWORD *)v39 + 1) != *((_DWORD *)v35 + 1))
        break;
      v48 = *((_QWORD *)v39 + 1);
      v49 = *((_QWORD *)v35 + 1);
      v50 = *(_QWORD *)(v48 + 16);
      if (v50 != *(_QWORD *)(v49 + 16))
        break;
      if (v50 && v48 != v49)
      {
        v51 = 0;
        v52 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
        v109 = v48 + v52;
        v107 = v49 + v52;
        v108 = *(_QWORD *)(v113 + 72);
        v110 = v35;
        v117 = v31;
        v106 = v49;
        v105 = v50;
        while (1)
        {
          v53 = v108 * v51;
          outlined init with copy of SecretKey(v109 + v108 * v51, (uint64_t)v31, type metadata accessor for AspireHeSerializedCiphertext);
          if (v51 >= *(_QWORD *)(v49 + 16))
          {
            __break(1u);
            JUMPOUT(0x237D242A8);
          }
          v54 = v39;
          v55 = v107 + v53;
          v56 = v132;
          outlined init with copy of SecretKey(v55, (uint64_t)v132, type metadata accessor for AspireHeSerializedCiphertext);
          v57 = v129;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v129, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v58 = v130;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v56, (uint64_t)v130, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v59 = v131;
          v60 = (uint64_t)&v131[*(int *)(v125 + 48)];
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v57, (uint64_t)v131, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v58, v60, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v61 = v127;
          v62 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v126 + 48);
          if (v62(v59, 1, v127) != 1)
            break;
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v58, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v57, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v63 = v62((_BYTE *)v60, 1, v61);
          v35 = v110;
          v39 = v54;
          if (v63 != 1)
          {
            v86 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            v87 = (uint64_t)v117;
            goto LABEL_34;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v59, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v31 = v117;
          v71 = v132;
          type metadata accessor for UnknownStorage();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v72 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireHeSerializedCiphertext);
          outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireHeSerializedCiphertext);
          v49 = v106;
          if ((v72 & 1) == 0)
            goto LABEL_35;
          if (++v51 == v105)
            goto LABEL_24;
        }
        v64 = v124;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v59, (uint64_t)v124, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        if (v62((_BYTE *)v60, 1, v61) == 1)
        {
          v88 = v64;
          v90 = v129;
          v89 = v130;
          v39 = v54;
          v86 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v87 = (uint64_t)v117;
        }
        else
        {
          v65 = v123;
          outlined init with take of SecretKey(v60, (uint64_t)v123, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          v66 = v46 + *(int *)(v118 + 48);
          outlined init with copy of SecretKey((uint64_t)v64, v46, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          outlined init with copy of SecretKey((uint64_t)v65, v66, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          v67 = swift_getEnumCaseMultiPayload() == 1;
          v39 = v54;
          v87 = (uint64_t)v117;
          if (v67)
          {
            v68 = v119;
            outlined init with copy of SecretKey(v46, (uint64_t)v119, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              outlined init with take of SecretKey(v66, (uint64_t)v128, type metadata accessor for AspireHeSerializedFullCiphertext);
              __asm { BR              X10 }
            }
            v91 = type metadata accessor for AspireHeSerializedFullCiphertext;
            v92 = (uint64_t)v68;
          }
          else
          {
            v69 = (uint64_t)v95;
            outlined init with copy of SecretKey(v46, (uint64_t)v95, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload != 1)
            {
              outlined init with take of SecretKey(v66, (uint64_t)v122, type metadata accessor for AspireHeSerializedSeededCiphertext);
              __asm { BR              X10 }
            }
            v91 = type metadata accessor for AspireHeSerializedSeededCiphertext;
            v92 = v69;
          }
          outlined destroy of AspireApiPECConfig(v92, v91);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
          v88 = v124;
          v90 = v129;
          v89 = v130;
          outlined destroy of AspireApiPECConfig((uint64_t)v123, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          v86 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v89, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v90, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AspireApiPECConfig((uint64_t)v88, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        v35 = v110;
LABEL_34:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v131, v86);
        outlined destroy of AspireApiPECConfig((uint64_t)v132, type metadata accessor for AspireHeSerializedCiphertext);
        outlined destroy of AspireApiPECConfig(v87, type metadata accessor for AspireHeSerializedCiphertext);
        break;
      }
LABEL_24:
      v73 = *(int *)(v104 + 32);
      v74 = (uint64_t)&v35[v73];
      v75 = v116;
      v76 = (uint64_t)&v116[*(int *)(v115 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v39[v73], (uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v74, v76, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
      v78 = v101;
      if (v77((uint64_t)v75, 1, v101) == 1)
      {
        if (v77(v76, 1, v78) != 1)
          goto LABEL_43;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        v79 = (uint64_t)v75;
        v80 = (uint64_t)v75;
        v81 = v111;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v79, (uint64_t)v111, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        if (v77(v76, 1, v78) == 1)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v81, type metadata accessor for AspireSimilarityPlaintextPacking);
          v75 = (_BYTE *)v80;
LABEL_43:
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
          break;
        }
        v82 = (uint64_t)v94;
        outlined init with take of SecretKey(v76, (uint64_t)v94, type metadata accessor for AspireSimilarityPlaintextPacking);
        v83 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)((uint64_t)v81, v82);
        outlined destroy of AspireApiPECConfig(v82, type metadata accessor for AspireSimilarityPlaintextPacking);
        outlined destroy of AspireApiPECConfig((uint64_t)v81, type metadata accessor for AspireSimilarityPlaintextPacking);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v80, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v46 = (uint64_t)v121;
        if ((v83 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v84 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AspireApiPECConfig((uint64_t)v39, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      if ((v84 & 1) != 0)
      {
        v41 = v102 + 1;
        v43 = v98;
        v44 = v97;
        v45 = v96;
        if (v102 + 1 != v99)
          continue;
      }
      return v84 & 1;
    }
LABEL_35:
    outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AspireApiPECConfig((uint64_t)v39, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    goto LABEL_36;
  }
  v84 = 1;
  return v84 & 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for AspireApiEvaluationKey, (uint64_t (*)(char *, char *))static AspireApiEvaluationKey.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  uint64_t *v74;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;

  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v85 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v7);
  v84 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v86);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v88 = *(_QWORD *)(v11 - 8);
  v89 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v90 = (unsigned __int8 *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (unsigned __int8 *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x24BDAC7A8](v87);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for AspireApiKeyStatus(0);
  v18 = MEMORY[0x24BDAC7A8](v91);
  v20 = (char **)((char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char **)((char *)&v76 - v22);
  v24 = *(_QWORD *)(a1 + 16);
  if (v24 == *(_QWORD *)(a2 + 16))
  {
    if (v24 && a1 != a2)
    {
      v78 = v5;
      v79 = v4;
      v25 = 0;
      v26 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v82 = a2 + v26;
      v83 = a1 + v26;
      v81 = *(_QWORD *)(v21 + 72);
      v77 = v17;
      v80 = v24;
      while (1)
      {
        v27 = v81 * v25;
        outlined init with copy of SecretKey(v83 + v81 * v25, (uint64_t)v23, type metadata accessor for AspireApiKeyStatus);
        outlined init with copy of SecretKey(v82 + v27, (uint64_t)v20, type metadata accessor for AspireApiKeyStatus);
        if (*v23 != *v20)
        {
LABEL_71:
          outlined destroy of AspireApiPECConfig((uint64_t)v20, type metadata accessor for AspireApiKeyStatus);
          outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireApiKeyStatus);
          goto LABEL_72;
        }
        v28 = *(int *)(v91 + 24);
        v29 = (uint64_t)v20 + v28;
        v30 = (uint64_t)&v17[*(int *)(v87 + 48)];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23 + v28, (uint64_t)v17, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29, v30, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        v31 = v89;
        v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
        if (v32(v17, 1, v89) != 1)
          break;
        if (v32((char *)v30, 1, v31) != 1)
        {
          v74 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
          goto LABEL_70;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
LABEL_61:
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v72 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireApiPECConfig((uint64_t)v20, type metadata accessor for AspireApiKeyStatus);
        outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireApiKeyStatus);
        if ((v72 & 1) != 0 && ++v25 != v80)
          continue;
        return v72 & 1;
      }
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if (v32((char *)v30, 1, v31) == 1)
      {
        v74 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
        goto LABEL_69;
      }
      v33 = v30;
      v34 = v90;
      outlined init with take of SecretKey(v33, (uint64_t)v90, type metadata accessor for AspireHeEvaluationKeyConfig);
      v35 = *(int *)(v31 + 28);
      v36 = (uint64_t)&v34[v35];
      v37 = (uint64_t)&v10[*(int *)(v86 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v15[v35], (uint64_t)v10, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v37, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v38 = v79;
      v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
      if (v39((uint64_t)v10, 1, v79) == 1)
      {
        if (v39(v37, 1, v38) != 1)
        {
          v73 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
          goto LABEL_67;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        goto LABEL_51;
      }
      v76 = v10;
      v40 = (uint64_t)v10;
      v41 = v84;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v84, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if (v39(v37, 1, v38) == 1)
      {
        v73 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
LABEL_66:
        outlined destroy of AspireApiPECConfig(v84, type metadata accessor for AspireHeEncryptionParameters);
        v10 = v76;
LABEL_67:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, v73);
LABEL_68:
        outlined destroy of AspireApiPECConfig((uint64_t)v90, type metadata accessor for AspireHeEvaluationKeyConfig);
        v74 = &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?;
LABEL_69:
        outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_70:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, v74);
        goto LABEL_71;
      }
      v42 = v37;
      v43 = v85;
      outlined init with take of SecretKey(v42, v85, type metadata accessor for AspireHeEncryptionParameters);
      if (*(_QWORD *)v41 != *(_QWORD *)v43
        || *(_QWORD *)(v41 + 8) != *(_QWORD *)(v43 + 8)
        || (v44 = *(_QWORD **)(v41 + 16), v45 = *(_QWORD **)(v43 + 16), v46 = v44[2], v46 != v45[2]))
      {
LABEL_65:
        outlined destroy of AspireApiPECConfig(v43, type metadata accessor for AspireHeEncryptionParameters);
        v73 = &demangling cache variable for type metadata for AspireHeEncryptionParameters?;
        goto LABEL_66;
      }
      if (v46 && v44 != v45)
      {
        if (v44[4] != v45[4])
          goto LABEL_65;
        v47 = v44 + 5;
        v48 = v45 + 5;
        v49 = v46 - 1;
        while (v49)
        {
          v51 = *v47++;
          v50 = v51;
          v52 = *v48++;
          --v49;
          if (v50 != v52)
            goto LABEL_65;
        }
      }
      if ((*(_BYTE *)(v41 + 32) & 1) != 0)
      {
        if ((*(_BYTE *)(v43 + 32) & 1) != 0)
          goto LABEL_31;
        v53 = 0;
      }
      else
      {
        v53 = *(_QWORD *)(v41 + 24);
        if ((*(_BYTE *)(v43 + 32) & 1) != 0)
        {
          if (v53)
            goto LABEL_65;
          goto LABEL_31;
        }
      }
      if (v53 != *(_QWORD *)(v43 + 24))
        goto LABEL_65;
LABEL_31:
      v54 = *(_QWORD *)(v41 + 40);
      v55 = *(_QWORD *)(v43 + 40);
      if (*(_BYTE *)(v41 + 48))
        v54 = v54 != 0;
      if (*(_BYTE *)(v43 + 48) == 1)
      {
        if (v55)
        {
          if (v54 != 1)
            goto LABEL_65;
        }
        else if (v54)
        {
          goto LABEL_65;
        }
      }
      else if (v54 != v55)
      {
        goto LABEL_65;
      }
      v56 = *(_QWORD *)(v41 + 56);
      v57 = *(_QWORD *)(v43 + 56);
      if (*(_BYTE *)(v43 + 64) == 1)
      {
        if (v57)
        {
          if (v57 == 1)
          {
            if (v56 != 1)
              goto LABEL_65;
          }
          else if (v56 != 2)
          {
            goto LABEL_65;
          }
        }
        else if (v56)
        {
          goto LABEL_65;
        }
      }
      else if (v56 != v57)
      {
        goto LABEL_65;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig(v85, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AspireApiPECConfig(v41, type metadata accessor for AspireHeEncryptionParameters);
      v10 = v76;
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if ((v58 & 1) == 0)
        goto LABEL_68;
LABEL_51:
      v59 = *(_QWORD *)v15;
      v60 = *(_QWORD *)v90;
      v61 = *(_QWORD *)(*(_QWORD *)v15 + 16);
      if (v61 != *(_QWORD *)(*(_QWORD *)v90 + 16))
        goto LABEL_68;
      if (v61 && v59 != v60)
      {
        if (*(_DWORD *)(v59 + 32) != *(_DWORD *)(v60 + 32))
          goto LABEL_68;
        v62 = (int *)(v59 + 36);
        v63 = (int *)(v60 + 36);
        v64 = v61 - 1;
        while (v64)
        {
          v66 = *v62++;
          v65 = v66;
          v67 = *v63++;
          --v64;
          if (v65 != v67)
            goto LABEL_68;
        }
      }
      if (v15[8] != v90[8])
        goto LABEL_68;
      v68 = (uint64_t)v15;
      v69 = v90;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v70 = dispatch thunk of static Equatable.== infix(_:_:)();
      v71 = (uint64_t)v69;
      v15 = (unsigned __int8 *)v68;
      v17 = v77;
      outlined destroy of AspireApiPECConfig(v71, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AspireApiPECConfig(v68, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if ((v70 & 1) == 0)
        goto LABEL_71;
      goto LABEL_61;
    }
    v72 = 1;
  }
  else
  {
LABEL_72:
    v72 = 0;
  }
  return v72 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  int EnumCaseMultiPayload;
  _BYTE *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  int v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  char v112;
  _BYTE *v113;
  char v114;
  _BYTE *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  BOOL v120;
  _BYTE *v121;
  _BYTE *v122;
  char v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v131;
  uint64_t *v132;
  uint64_t (*v133)(uint64_t);
  uint64_t v134;
  uint64_t *v135;
  _BYTE v136[96];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  _BYTE *v186;
  _BYTE *v187;
  _BYTE *v188;
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  v163 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v4 = *(_QWORD *)(v163 - 8);
  MEMORY[0x24BDAC7A8](v163);
  v160 = &v136[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v6);
  v161 = &v136[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
  MEMORY[0x24BDAC7A8](v162);
  v168 = &v136[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v173 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v170 = &v136[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v11);
  v171 = &v136[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v172);
  v176 = &v136[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v166 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v166);
  v184 = &v136[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v167 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v167);
  v178 = &v136[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v174);
  v190 = &v136[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v182 = *(_QWORD *)(v17 - 8);
  v183 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = &v136[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = &v136[-v22];
  MEMORY[0x24BDAC7A8](v21);
  v179 = &v136[-v24];
  v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v181);
  v26 = &v136[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v180 = &v136[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = MEMORY[0x24BDAC7A8](v28);
  v186 = &v136[-v31];
  MEMORY[0x24BDAC7A8](v30);
  v33 = &v136[-v32];
  v177 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v164 = *(_QWORD *)(v177 - 8);
  v34 = MEMORY[0x24BDAC7A8](v177);
  v189 = &v136[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v34);
  v37 = &v136[-v36];
  v175 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v169 = *(_QWORD *)(v175 - 8);
  v38 = MEMORY[0x24BDAC7A8](v175);
  v191 = &v136[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v38);
  v41 = &v136[-v40];
  v42 = type metadata accessor for AspireApiPECShardResponse(0);
  v43 = MEMORY[0x24BDAC7A8](v42);
  v188 = &v136[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v45 = MEMORY[0x24BDAC7A8](v43);
  v187 = &v136[-v47];
  v48 = *(_QWORD *)(a1 + 16);
  if (v48 != *(_QWORD *)(a2 + 16))
    goto LABEL_62;
  if (!v48 || a1 == a2)
  {
    v123 = 1;
    return v123 & 1;
  }
  v149 = v9;
  v146 = v45;
  v137 = v4;
  v49 = 0;
  v150 = 0;
  v50 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = *(_QWORD *)(v46 + 72);
  v151 = v26;
  v185 = v41;
  v159 = v37;
  v147 = v23;
  v143 = v52;
  v54 = (uint64_t)v20;
  v145 = v48;
  v144 = v51;
  v142 = v53;
  while (1)
  {
    v152 = v49;
    v55 = v53 * v49;
    v56 = v187;
    outlined init with copy of SecretKey(v51 + v53 * v49, (uint64_t)v187, type metadata accessor for AspireApiPECShardResponse);
    v57 = v52 + v55;
    v58 = v188;
    outlined init with copy of SecretKey(v57, (uint64_t)v188, type metadata accessor for AspireApiPECShardResponse);
    v59 = *(_QWORD *)v56;
    v60 = *(_QWORD *)v58;
    v61 = *(_QWORD *)(*(_QWORD *)v56 + 16);
    v62 = (uint64_t)v190;
    v63 = (uint64_t)v33;
    if (v61 != *(_QWORD *)(*(_QWORD *)v58 + 16))
      goto LABEL_61;
    if (v61 && v59 != v60)
      break;
LABEL_41:
    v117 = (_QWORD *)*((_QWORD *)v187 + 1);
    v118 = (_QWORD *)*((_QWORD *)v188 + 1);
    v119 = v117[2];
    if (v119 != v118[2])
      goto LABEL_61;
    if (v119)
      v120 = v117 == v118;
    else
      v120 = 1;
    if (!v120)
    {
      if (v117[4] != v118[4])
        goto LABEL_61;
      if (v119 != 1)
      {
        if (v117[5] != v118[5])
          goto LABEL_61;
        v124 = v117 + 6;
        v125 = v118 + 6;
        v126 = v119 - 2;
        while (v126)
        {
          v128 = *v124++;
          v127 = v128;
          v129 = *v125++;
          --v126;
          if (v127 != v129)
            goto LABEL_61;
        }
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v187 + 2), *((_QWORD *)v188 + 2)) & 1) == 0)
      goto LABEL_61;
    v122 = v187;
    v121 = v188;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v123 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v121, type metadata accessor for AspireApiPECShardResponse);
    outlined destroy of AspireApiPECConfig((uint64_t)v122, type metadata accessor for AspireApiPECShardResponse);
    if ((v123 & 1) != 0)
    {
      v49 = v152 + 1;
      v41 = v185;
      v37 = v159;
      v33 = (_BYTE *)v63;
      v51 = v144;
      v52 = v143;
      v53 = v142;
      if (v152 + 1 != v145)
        continue;
    }
    return v123 & 1;
  }
  v64 = 0;
  v65 = (*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
  v66 = v59 + v65;
  v148 = v60 + v65;
  v67 = *(_QWORD *)(v169 + 72);
  v68 = v60;
  v141 = v60;
  v140 = v61;
  v139 = v66;
  v138 = v67;
  while (1)
  {
    v158 = v64;
    v69 = v67 * v64;
    outlined init with copy of SecretKey(v66 + v67 * v64, (uint64_t)v41, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    if (v158 >= *(_QWORD *)(v68 + 16))
      goto LABEL_75;
    v70 = v148 + v69;
    v71 = v191;
    outlined init with copy of SecretKey(v70, (uint64_t)v191, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    if (*(_DWORD *)v41 != *v71)
      goto LABEL_60;
    if (*((_DWORD *)v41 + 1) != *((_DWORD *)v191 + 1))
      goto LABEL_60;
    v72 = *((_QWORD *)v41 + 1);
    v73 = *((_QWORD *)v191 + 1);
    v74 = *(_QWORD *)(v72 + 16);
    if (v74 != *(_QWORD *)(v73 + 16))
      goto LABEL_60;
    if (v74 && v72 != v73)
      break;
LABEL_29:
    v94 = *(int *)(v175 + 32);
    v95 = (uint64_t)&v41[v94];
    v96 = (uint64_t)&v191[v94];
    v97 = v176;
    v98 = (uint64_t)&v176[*(int *)(v172 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v95, (uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v96, v98, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
    v100 = v149;
    if (v99((uint64_t)v97, 1, v149) == 1)
    {
      if (v99(v98, 1, v100) != 1)
        goto LABEL_69;
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    }
    else
    {
      v101 = v171;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v176, (uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if (v99(v98, 1, v100) == 1)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v101, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_69:
        v135 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
        goto LABEL_73;
      }
      v102 = v54;
      v103 = v170;
      outlined init with take of SecretKey(v98, (uint64_t)v170, type metadata accessor for AspireSimilarityPlaintextPacking);
      v104 = v168;
      v105 = (uint64_t)&v168[*(int *)(v162 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v101, (uint64_t)v168, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v103, v105, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
      v107 = v163;
      if (v106((uint64_t)v104, 1, v163) == 1)
      {
        v108 = v106(v105, 1, v107);
        v109 = v171;
        if (v108 != 1)
          goto LABEL_71;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v168, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      }
      else
      {
        v110 = v161;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104, (uint64_t)v161, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        if (v106(v105, 1, v107) == 1)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v110, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          v109 = v171;
LABEL_71:
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v168, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
LABEL_72:
          outlined destroy of AspireApiPECConfig((uint64_t)v170, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AspireApiPECConfig((uint64_t)v109, type metadata accessor for AspireSimilarityPlaintextPacking);
          v135 = (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?;
LABEL_73:
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v176, v135);
          v41 = v185;
          goto LABEL_60;
        }
        v111 = v160;
        outlined init with take of SecretKey(v105, (uint64_t)v160, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        v112 = specialized static AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType.== infix(_:_:)((uint64_t)v110, (uint64_t)v111);
        outlined destroy of AspireApiPECConfig((uint64_t)v111, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        outlined destroy of AspireApiPECConfig((uint64_t)v110, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        v109 = v171;
        if ((v112 & 1) == 0)
          goto LABEL_72;
      }
      v113 = v170;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v114 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v113, type metadata accessor for AspireSimilarityPlaintextPacking);
      v37 = v159;
      v115 = v176;
      v26 = v151;
      outlined destroy of AspireApiPECConfig((uint64_t)v109, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      v41 = v185;
      v54 = v102;
      if ((v114 & 1) == 0)
        goto LABEL_60;
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v41 = v185;
    v62 = (uint64_t)v190;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      goto LABEL_60;
    v116 = v158 + 1;
    outlined destroy of AspireApiPECConfig((uint64_t)v191, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AspireApiPECConfig((uint64_t)v41, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    v64 = v116;
    v68 = v141;
    v66 = v139;
    v67 = v138;
    if (v116 == v140)
      goto LABEL_41;
  }
  v75 = 0;
  v76 = (*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
  v157 = v72 + v76;
  v155 = v73 + v76;
  v156 = *(_QWORD *)(v164 + 72);
  v154 = v73;
  v153 = v74;
  while (1)
  {
    v77 = v75;
    v78 = v156 * v75;
    outlined init with copy of SecretKey(v157 + v156 * v75, (uint64_t)v37, type metadata accessor for AspireHeSerializedCiphertext);
    v79 = *(_QWORD *)(v73 + 16);
    v165 = v77;
    if (v77 >= v79)
    {
      __break(1u);
LABEL_75:
      __break(1u);
      JUMPOUT(0x237D27A30);
    }
    v80 = v155 + v78;
    v81 = v189;
    outlined init with copy of SecretKey(v80, (uint64_t)v189, type metadata accessor for AspireHeSerializedCiphertext);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, v63, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v82 = v186;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v81, (uint64_t)v186, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v83 = (uint64_t)&v26[*(int *)(v181 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v63, (uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v82, v83, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v84 = v183;
    v85 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v182 + 48);
    if (v85(v26, 1, v183) != 1)
      break;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v82, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    if (v85((_BYTE *)v83, 1, v84) != 1)
    {
      v41 = v185;
      v132 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      goto LABEL_59;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v91 = v189;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v62 = (uint64_t)v190;
    v92 = dispatch thunk of static Equatable.== infix(_:_:)();
    v93 = (uint64_t)v91;
    v37 = v159;
    outlined destroy of AspireApiPECConfig(v93, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireHeSerializedCiphertext);
    v41 = v185;
    v73 = v154;
    if ((v92 & 1) == 0)
      goto LABEL_60;
    v75 = v165 + 1;
    if (v165 + 1 == v153)
      goto LABEL_29;
  }
  v86 = v180;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, (uint64_t)v180, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v85((_BYTE *)v83, 1, v84) == 1)
  {
    v41 = v185;
    v131 = v186;
    v132 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  else
  {
    v87 = v179;
    outlined init with take of SecretKey(v83, (uint64_t)v179, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v88 = v62 + *(int *)(v174 + 48);
    outlined init with copy of SecretKey((uint64_t)v86, v62, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined init with copy of SecretKey((uint64_t)v87, v88, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v120 = swift_getEnumCaseMultiPayload() == 1;
    v41 = v185;
    if (v120)
    {
      outlined init with copy of SecretKey(v62, v54, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of SecretKey(v88, (uint64_t)v184, type metadata accessor for AspireHeSerializedFullCiphertext);
        __asm { BR              X8 }
      }
      v133 = type metadata accessor for AspireHeSerializedFullCiphertext;
      v134 = v54;
    }
    else
    {
      v89 = (uint64_t)v147;
      outlined init with copy of SecretKey(v62, (uint64_t)v147, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 1)
      {
        outlined init with take of SecretKey(v88, (uint64_t)v178, type metadata accessor for AspireHeSerializedSeededCiphertext);
        __asm { BR              X10 }
      }
      v133 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      v134 = v89;
    }
    outlined destroy of AspireApiPECConfig(v134, v133);
    v86 = v180;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    outlined destroy of AspireApiPECConfig((uint64_t)v179, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v132 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
    v131 = v186;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v131, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AspireApiPECConfig((uint64_t)v86, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_59:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, v132);
  outlined destroy of AspireApiPECConfig((uint64_t)v189, type metadata accessor for AspireHeSerializedCiphertext);
  outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_60:
  outlined destroy of AspireApiPECConfig((uint64_t)v191, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  outlined destroy of AspireApiPECConfig((uint64_t)v41, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
LABEL_61:
  outlined destroy of AspireApiPECConfig((uint64_t)v188, type metadata accessor for AspireApiPECShardResponse);
  outlined destroy of AspireApiPECConfig((uint64_t)v187, type metadata accessor for AspireApiPECShardResponse);
LABEL_62:
  v123 = 0;
  return v123 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  _QWORD v50[7];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v4);
  v64 = (uint64_t)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v55);
  v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v62 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v56 = (uint64_t)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v63 = (uint64_t)v50 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v59 = (uint64_t)v50 - v15;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v61);
  v17 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v60 = (uint64_t)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v66 = (uint64_t)v50 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v65 = (uint64_t)v50 - v23;
  v57 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v24 = MEMORY[0x24BDAC7A8](v57);
  v67 = (uint64_t)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v50 - v27;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29 != *(_QWORD *)(a2 + 16))
  {
LABEL_20:
    v45 = 0;
    return v45 & 1;
  }
  if (v29 && a1 != a2)
  {
    v50[4] = v6;
    v50[3] = v4;
    v30 = 0;
    v50[6] = 0;
    v31 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v53 = a2 + v31;
    v54 = a1 + v31;
    v52 = *(_QWORD *)(v26 + 72);
    v50[5] = v9;
    v51 = v29;
    while (1)
    {
      v32 = v52 * v30;
      outlined init with copy of SecretKey(v54 + v52 * v30, (uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertext);
      v33 = v53 + v32;
      v34 = v67;
      outlined init with copy of SecretKey(v33, v67, type metadata accessor for AspireHeSerializedCiphertext);
      v35 = v10;
      v36 = v65;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v65, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v37 = v66;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v66, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v38 = (uint64_t)&v17[*(int *)(v61 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t)v17, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v38, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
      if (v39(v17, 1, v35) != 1)
        break;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v10 = v35;
      if (v39((char *)v38, 1, v35) != 1)
      {
        v47 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        goto LABEL_19;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v44 = v67;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig(v44, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertext);
      if ((v45 & 1) != 0 && ++v30 != v51)
        continue;
      return v45 & 1;
    }
    v40 = v60;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, v60, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    if (v39((char *)v38, 1, v35) == 1)
    {
      v47 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v48 = v65;
    }
    else
    {
      v41 = v59;
      outlined init with take of SecretKey(v38, v59, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      v42 = (uint64_t)&v9[*(int *)(v55 + 48)];
      outlined init with copy of SecretKey(v40, (uint64_t)v9, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      outlined init with copy of SecretKey(v41, v42, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v43 = v56;
        outlined init with copy of SecretKey((uint64_t)v9, v56, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          outlined init with take of SecretKey(v42, v64, type metadata accessor for AspireHeSerializedFullCiphertext);
          __asm { BR              X10 }
        }
        v49 = type metadata accessor for AspireHeSerializedFullCiphertext;
      }
      else
      {
        v43 = v63;
        outlined init with copy of SecretKey((uint64_t)v9, v63, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          outlined init with take of SecretKey(v42, v58, type metadata accessor for AspireHeSerializedSeededCiphertext);
          __asm { BR              X10 }
        }
        v49 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      }
      outlined destroy of AspireApiPECConfig(v43, v49);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
      v48 = v65;
      outlined destroy of AspireApiPECConfig(v59, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      v47 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v66, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_19:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, v47);
    outlined destroy of AspireApiPECConfig(v67, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertext);
    goto LABEL_20;
  }
  v45 = 1;
  return v45 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for AMDPbEvaluationKey, (uint64_t (*)(char *, char *))static AMDPbEvaluationKey.== infix(_:_:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  char v52;
  char v53;
  char v54;
  BOOL v56;
  uint64_t *v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;

  v78 = a1;
  v65 = type metadata accessor for AspireApiPECResponse(0);
  MEMORY[0x24BDAC7A8](v65);
  v76 = (uint64_t *)((char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x24BDAC7A8](v64);
  v68 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response, AspireApiResponse.OneOf_Response));
  MEMORY[0x24BDAC7A8](v71);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (uint64_t *)((char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (uint64_t *)((char *)&v61 - v13);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v61 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AspireApiResponse(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v29 = *(_QWORD *)(v78 + 16);
  if (v29 != *(_QWORD *)(a2 + 16))
    goto LABEL_35;
  v66 = v20;
  v67 = v11;
  v61 = v14;
  v77 = v8;
  v63 = v7;
  v74 = v16;
  v75 = v19;
  if (!v29 || v78 == a2)
  {
    v54 = 1;
    return v54 & 1;
  }
  v30 = (uint64_t)v6;
  v72 = v25;
  v31 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v69 = *(_QWORD *)(v26 + 72);
  v32 = v29 - 1;
  v73 = v30;
  v33 = v63;
  v34 = v28;
  v35 = (char *)&v61 - v27;
  v36 = v66;
  v70 = a2;
  v62 = (char *)&v61 - v27;
  while (1)
  {
    outlined init with copy of SecretKey(v78 + v31, (uint64_t)v35, type metadata accessor for AspireApiResponse);
    outlined init with copy of SecretKey(a2 + v31, v34, type metadata accessor for AspireApiResponse);
    v37 = (uint64_t)&v22[*(int *)(v36 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35, (uint64_t)v22, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v37, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
    if (v38(v22, 1, v33) != 1)
      break;
    if (v38((char *)v37, 1, v33) != 1)
    {
      v57 = &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?);
      goto LABEL_34;
    }
LABEL_19:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig(v34, type metadata accessor for AspireApiResponse);
    outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireApiResponse);
    v56 = v32-- != 0;
    if ((v54 & 1) != 0)
    {
      a2 = v70;
      v31 += v69;
      if (v56)
        continue;
    }
    return v54 & 1;
  }
  v39 = (uint64_t)v75;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v75, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  if (v38((char *)v37, 1, v33) == 1)
  {
    v57 = &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?);
    goto LABEL_33;
  }
  v40 = (uint64_t)v74;
  outlined init with take of SecretKey(v37, (uint64_t)v74, type metadata accessor for AspireApiResponse.OneOf_Response);
  v41 = v73;
  v42 = v73 + *(int *)(v71 + 48);
  outlined init with copy of SecretKey(v39, v73, type metadata accessor for AspireApiResponse.OneOf_Response);
  outlined init with copy of SecretKey(v40, v42, type metadata accessor for AspireApiResponse.OneOf_Response);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v43 = v67;
    outlined init with copy of SecretKey(v41, (uint64_t)v67, type metadata accessor for AspireApiResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v58 = type metadata accessor for AspireApiPECResponse;
      v59 = (uint64_t)v43;
      goto LABEL_31;
    }
    v44 = v76;
    outlined init with take of SecretKey(v42, (uint64_t)v76, type metadata accessor for AspireApiPECResponse);
    v45 = specialized static Array<A>.== infix(_:_:)(*v43, *v44);
    v46 = (uint64_t)v43;
    v35 = v62;
    if ((v45 & 1) == 0
      || (type metadata accessor for UnknownStorage(),
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]), v39 = (uint64_t)v75, v44 = v76, v47 = dispatch thunk of static Equatable.== infix(_:_:)(), v46 = (uint64_t)v67, (v47 & 1) == 0))
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v44, type metadata accessor for AspireApiPECResponse);
      outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireApiPECResponse);
      outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspireApiResponse.OneOf_Response);
      v40 = (uint64_t)v74;
      goto LABEL_32;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v44, type metadata accessor for AspireApiPECResponse);
    outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireApiPECResponse);
    v40 = (uint64_t)v74;
    v33 = v63;
    goto LABEL_18;
  }
  v48 = v41;
  v49 = v61;
  outlined init with copy of SecretKey(v48, (uint64_t)v61, type metadata accessor for AspireApiResponse.OneOf_Response);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v50 = v42;
    v51 = v68;
    outlined init with take of SecretKey(v50, (uint64_t)v68, type metadata accessor for AspireApiPIRResponse);
    v52 = specialized static Array<A>.== infix(_:_:)(*v49, *v51);
    v35 = v62;
    if ((v52 & 1) == 0
      || (type metadata accessor for UnknownStorage(),
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]), v40 = (uint64_t)v74, v39 = (uint64_t)v75, v53 = dispatch thunk of static Equatable.== infix(_:_:)(), v51 = v68, (v53 & 1) == 0))
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v51, type metadata accessor for AspireApiPIRResponse);
      outlined destroy of AspireApiPECConfig((uint64_t)v49, type metadata accessor for AspireApiPIRResponse);
      outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspireApiResponse.OneOf_Response);
      goto LABEL_32;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v68, type metadata accessor for AspireApiPIRResponse);
    outlined destroy of AspireApiPECConfig((uint64_t)v49, type metadata accessor for AspireApiPIRResponse);
LABEL_18:
    v36 = v66;
    outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined destroy of AspireApiPECConfig(v39, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_19;
  }
  v58 = type metadata accessor for AspireApiPIRResponse;
  v59 = (uint64_t)v49;
LABEL_31:
  outlined destroy of AspireApiPECConfig(v59, v58);
  v35 = v62;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v73, &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response, AspireApiResponse.OneOf_Response));
LABEL_32:
  outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireApiResponse.OneOf_Response);
  v57 = &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?;
LABEL_33:
  outlined destroy of AspireApiPECConfig(v39, type metadata accessor for AspireApiResponse.OneOf_Response);
LABEL_34:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, v57);
  outlined destroy of AspireApiPECConfig(v34, type metadata accessor for AspireApiResponse);
  outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireApiResponse);
LABEL_35:
  v54 = 0;
  return v54 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  unsigned int (*v58)(_BYTE *, uint64_t, uint64_t);
  unsigned int v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  char v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  char v69;
  uint64_t *v71;
  uint64_t (*v72)(uint64_t);
  _BYTE v73[96];
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v89 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v89);
  v95 = &v73[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v90 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v90);
  v97 = &v73[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v94);
  v99 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v103 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = &v73[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = &v73[-v12];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v73[-v14];
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v102);
  v106 = &v73[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = &v73[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = &v73[-v22];
  MEMORY[0x24BDAC7A8](v21);
  v104 = &v73[-v24];
  v96 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v88 = *(_QWORD *)(v96 - 8);
  v25 = MEMORY[0x24BDAC7A8](v96);
  v105 = &v73[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v25);
  v28 = &v73[-v27];
  v29 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v101 = &v73[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = MEMORY[0x24BDAC7A8](v30);
  v100 = &v73[-v34];
  v35 = *(_QWORD *)(a1 + 16);
  if (v35 != *(_QWORD *)(a2 + 16))
  {
LABEL_28:
    v69 = 0;
    return v69 & 1;
  }
  if (v35 && a1 != a2)
  {
    v79 = v32;
    v74 = v13;
    v82 = v10;
    v36 = 0;
    v83 = 0;
    v37 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v38 = a1 + v37;
    v39 = a2 + v37;
    v40 = *(_QWORD *)(v33 + 72);
    v81 = v15;
    v80 = v20;
    v84 = v7;
    v76 = v39;
    v78 = v35;
    v77 = v38;
    v75 = v40;
    while (1)
    {
      v85 = v36;
      v41 = v40 * v36;
      v42 = v100;
      outlined init with copy of SecretKey(v38 + v40 * v36, (uint64_t)v100, type metadata accessor for AspireHeSerializedCiphertextVec);
      v43 = v39 + v41;
      v44 = v101;
      outlined init with copy of SecretKey(v43, (uint64_t)v101, type metadata accessor for AspireHeSerializedCiphertextVec);
      v45 = *(_QWORD *)v42;
      v46 = *(_QWORD *)v44;
      v47 = *(_QWORD *)(*(_QWORD *)v42 + 16);
      if (v47 != *(_QWORD *)(*(_QWORD *)v44 + 16))
        break;
      if (v47 && v45 != v46)
      {
        v48 = 0;
        v49 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
        v93 = v45 + v49;
        v91 = v46 + v49;
        v92 = *(_QWORD *)(v88 + 72);
        v87 = v46;
        v86 = v47;
        while (1)
        {
          v50 = v92 * v48;
          outlined init with copy of SecretKey(v93 + v92 * v48, (uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertext);
          v51 = *(_QWORD *)(v46 + 16);
          v98 = v48;
          if (v48 >= v51)
          {
            __break(1u);
            JUMPOUT(0x237D2B644);
          }
          v52 = v91 + v50;
          v53 = v105;
          outlined init with copy of SecretKey(v52, (uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertext);
          v54 = v104;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, (uint64_t)v104, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v55 = (uint64_t)v23;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v53, (uint64_t)v23, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v56 = v106;
          v57 = (uint64_t)&v106[*(int *)(v102 + 48)];
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v54, (uint64_t)v106, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55, v57, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v58 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v103 + 48);
          if (v58(v56, 1, v7) != 1)
            break;
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v55, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          if (v58((_BYTE *)v57, 1, v7) != 1)
          {
            v71 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
            goto LABEL_26;
          }
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v106, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          v23 = (_BYTE *)v55;
          v63 = (uint64_t)v28;
          v64 = v105;
          type metadata accessor for UnknownStorage();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v65 = dispatch thunk of static Equatable.== infix(_:_:)();
          v66 = (uint64_t)v64;
          v28 = (_BYTE *)v63;
          outlined destroy of AspireApiPECConfig(v66, type metadata accessor for AspireHeSerializedCiphertext);
          outlined destroy of AspireApiPECConfig(v63, type metadata accessor for AspireHeSerializedCiphertext);
          v46 = v87;
          if ((v65 & 1) == 0)
            goto LABEL_27;
          v48 = v98 + 1;
          if (v98 + 1 == v86)
            goto LABEL_21;
        }
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v106, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v59 = v58((_BYTE *)v57, 1, v7);
        v60 = (uint64_t)v82;
        if (v59 == 1)
        {
          v71 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        }
        else
        {
          outlined init with take of SecretKey(v57, (uint64_t)v15, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          v61 = v99;
          v62 = (uint64_t)&v99[*(int *)(v94 + 48)];
          outlined init with copy of SecretKey((uint64_t)v20, (uint64_t)v99, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          outlined init with copy of SecretKey((uint64_t)v15, v62, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            outlined init with copy of SecretKey((uint64_t)v61, v60, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              outlined init with take of SecretKey(v62, (uint64_t)v95, type metadata accessor for AspireHeSerializedFullCiphertext);
              __asm { BR              X10 }
            }
            v72 = type metadata accessor for AspireHeSerializedFullCiphertext;
          }
          else
          {
            v60 = (uint64_t)v74;
            outlined init with copy of SecretKey((uint64_t)v61, (uint64_t)v74, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
            if (swift_getEnumCaseMultiPayload() != 1)
            {
              outlined init with take of SecretKey(v62, (uint64_t)v97, type metadata accessor for AspireHeSerializedSeededCiphertext);
              __asm { BR              X10 }
            }
            v72 = type metadata accessor for AspireHeSerializedSeededCiphertext;
          }
          outlined destroy of AspireApiPECConfig(v60, v72);
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v61, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
          outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          v71 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v55, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AspireApiPECConfig((uint64_t)v20, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_26:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v106, v71);
        outlined destroy of AspireApiPECConfig((uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertext);
        outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireHeSerializedCiphertext);
        break;
      }
LABEL_21:
      v67 = v100;
      v68 = v101;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v68, type metadata accessor for AspireHeSerializedCiphertextVec);
      outlined destroy of AspireApiPECConfig((uint64_t)v67, type metadata accessor for AspireHeSerializedCiphertextVec);
      if ((v69 & 1) != 0)
      {
        v36 = v85 + 1;
        v7 = v84;
        v38 = v77;
        v39 = v76;
        v40 = v75;
        if (v85 + 1 != v78)
          continue;
      }
      return v69 & 1;
    }
LABEL_27:
    outlined destroy of AspireApiPECConfig((uint64_t)v101, type metadata accessor for AspireHeSerializedCiphertextVec);
    outlined destroy of AspireApiPECConfig((uint64_t)v100, type metadata accessor for AspireHeSerializedCiphertextVec);
    goto LABEL_28;
  }
  v69 = 1;
  return v69 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int EnumCaseMultiPayload;
  uint64_t *v50;
  uint64_t (*v51)(uint64_t);
  char v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  BOOL v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;

  v76 = a2;
  v3 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x24BDAC7A8](v3);
  v73 = (uint64_t *)((char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x24BDAC7A8](v5);
  v72 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request, AspireApiRequest.OneOf_Request));
  MEMORY[0x24BDAC7A8](v7);
  v83 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v9 = *(_QWORD *)(v81 - 8);
  v10 = MEMORY[0x24BDAC7A8](v81);
  v12 = (uint64_t *)((char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (uint64_t *)((char *)&v69 - v14);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v69 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AspireApiRequest(0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v30 = a1;
  v31 = *(_QWORD *)(a1 + 16);
  v32 = v76;
  if (v31 != *(_QWORD *)(v76 + 16))
  {
LABEL_36:
    v62 = 0;
    return v62 & 1;
  }
  v79 = v21;
  v80 = v9;
  v85 = (uint64_t *)((char *)&v69 - v28);
  v86 = (_QWORD *)v29;
  v70 = v15;
  v74 = v12;
  v82 = v23;
  v77 = v20;
  if (v31 && v30 != v76)
  {
    v84 = v26;
    v71 = v7;
    v33 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v75 = *(_QWORD *)(v27 + 72);
    v34 = v31 - 1;
    v78 = v17;
    while (1)
    {
      v35 = v85;
      outlined init with copy of SecretKey(v30 + v33, (uint64_t)v85, type metadata accessor for AspireApiRequest);
      v36 = v86;
      outlined init with copy of SecretKey(v32 + v33, (uint64_t)v86, type metadata accessor for AspireApiRequest);
      v37 = *v35 == *v36 && v35[1] == v36[1];
      if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v38 = *(int *)(v84 + 20);
      v39 = (uint64_t)v36 + v38;
      v40 = (uint64_t)v82;
      v41 = (uint64_t)&v82[*(int *)(v79 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35 + v38, (uint64_t)v82, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v41, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      v42 = v81;
      v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
      if (v43(v40, 1, v81) == 1)
      {
        if (v43(v41, 1, v42) != 1)
        {
          v35 = v85;
          v36 = v86;
          v65 = &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?);
          goto LABEL_34;
        }
      }
      else
      {
        v44 = v40;
        v45 = (uint64_t)v77;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t)v77, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        if (v43(v41, 1, v42) == 1)
        {
          v66 = v45;
          v40 = (uint64_t)v82;
          v35 = v85;
          v36 = v86;
          v65 = &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?);
          goto LABEL_33;
        }
        v46 = (uint64_t)v17;
        outlined init with take of SecretKey(v41, (uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
        v47 = v83 + *(int *)(v71 + 48);
        outlined init with copy of SecretKey(v45, v83, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined init with copy of SecretKey((uint64_t)v17, v47, type metadata accessor for AspireApiRequest.OneOf_Request);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v48 = v74;
          outlined init with copy of SecretKey(v83, (uint64_t)v74, type metadata accessor for AspireApiRequest.OneOf_Request);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          v40 = (uint64_t)v82;
          if (EnumCaseMultiPayload != 1)
          {
            v67 = type metadata accessor for AspireApiPECRequest;
LABEL_31:
            outlined destroy of AspireApiPECConfig((uint64_t)v48, v67);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request, AspireApiRequest.OneOf_Request));
LABEL_32:
            outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireApiRequest.OneOf_Request);
            v65 = &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?;
            v66 = (uint64_t)v77;
            v35 = v85;
            v36 = v86;
LABEL_33:
            outlined destroy of AspireApiPECConfig(v66, type metadata accessor for AspireApiRequest.OneOf_Request);
LABEL_34:
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, v65);
            break;
          }
          v50 = v73;
          v51 = type metadata accessor for AspireApiPECRequest;
          outlined init with take of SecretKey(v47, (uint64_t)v73, type metadata accessor for AspireApiPECRequest);
          v52 = specialized static AspireApiPECRequest.== infix(_:_:)(v74, v50);
          outlined destroy of AspireApiPECConfig((uint64_t)v50, type metadata accessor for AspireApiPECRequest);
          v53 = v74;
        }
        else
        {
          v48 = v70;
          outlined init with copy of SecretKey(v83, (uint64_t)v70, type metadata accessor for AspireApiRequest.OneOf_Request);
          v54 = swift_getEnumCaseMultiPayload();
          v40 = (uint64_t)v82;
          if (v54 == 1)
          {
            v67 = type metadata accessor for AspireApiPIRRequest;
            goto LABEL_31;
          }
          v55 = v72;
          v51 = type metadata accessor for AspireApiPIRRequest;
          outlined init with take of SecretKey(v47, v72, type metadata accessor for AspireApiPIRRequest);
          v52 = static AspireApiPIRRequest.== infix(_:_:)(v48, v55);
          v56 = v55;
          v46 = (uint64_t)v78;
          outlined destroy of AspireApiPECConfig(v56, type metadata accessor for AspireApiPIRRequest);
          v53 = v48;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v53, v51);
        outlined destroy of AspireApiPECConfig(v83, type metadata accessor for AspireApiRequest.OneOf_Request);
        if ((v52 & 1) == 0)
          goto LABEL_32;
        outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AspireApiPECConfig((uint64_t)v77, type metadata accessor for AspireApiRequest.OneOf_Request);
      }
      v57 = v30;
      v58 = v40;
      v59 = v32;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      v60 = (uint64_t)v85;
      v61 = (uint64_t)v86;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig(v61, type metadata accessor for AspireApiRequest);
      outlined destroy of AspireApiPECConfig(v60, type metadata accessor for AspireApiRequest);
      v64 = v34-- != 0;
      if ((v62 & 1) != 0)
      {
        v33 += v75;
        v32 = v59;
        v30 = v57;
        v17 = v78;
        if (v64)
          continue;
      }
      return v62 & 1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v36, type metadata accessor for AspireApiRequest);
    outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AspireApiRequest);
    goto LABEL_36;
  }
  v62 = 1;
  return v62 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  int v39;
  char v40;
  uint64_t v42;
  uint64_t v43;

  v4 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v10 = (uint64_t *)((char *)&v42 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_43:
    v40 = 0;
    return v40 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v43 = a1 + v13;
    v14 = a2 + v13;
    v15 = *(_QWORD *)(v8 + 72);
    v42 = v15;
    while (1)
    {
      outlined init with copy of SecretKey(v43 + v15 * v12, (uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
      outlined init with copy of SecretKey(v14 + v15 * v12, (uint64_t)v7, type metadata accessor for AspireApiPIRShardConfig);
      if (*v10 != *v7)
        break;
      if (v10[1] != v7[1])
        break;
      v16 = (_QWORD *)v10[2];
      v17 = (_QWORD *)v7[2];
      v18 = v16[2];
      if (v18 != v17[2])
        break;
      if (v18)
        v19 = v16 == v17;
      else
        v19 = 1;
      if (!v19)
      {
        if (v16[4] != v17[4])
          break;
        v26 = v16 + 5;
        v27 = v17 + 5;
        v28 = v18 - 1;
        while (v28)
        {
          v30 = *v26++;
          v29 = v30;
          v31 = *v27++;
          --v28;
          if (v29 != v31)
            goto LABEL_42;
        }
      }
      v20 = v4[8];
      v21 = (_QWORD *)((char *)v10 + v20);
      v22 = *(_QWORD *)((char *)v10 + v20 + 8);
      v23 = (_QWORD *)((char *)v7 + v20);
      v24 = v23[1];
      if (v22)
      {
        if (!v24)
          break;
        v25 = *v21 == *v23 && v22 == v24;
        if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          break;
      }
      else if (v24)
      {
        break;
      }
      v32 = v4[9];
      v33 = *((unsigned __int8 *)v10 + v32);
      v34 = *((unsigned __int8 *)v7 + v32);
      if (v33 == 2)
      {
        if (v34 != 2)
          break;
      }
      else if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
      {
        break;
      }
      v35 = v4[10];
      v36 = (_QWORD *)((char *)v10 + v35);
      v37 = *((_BYTE *)v10 + v35 + 8);
      v38 = (_QWORD *)((char *)v7 + v35);
      v39 = *((unsigned __int8 *)v7 + v35 + 8);
      if ((v37 & 1) != 0)
      {
        if (!v39)
          break;
      }
      else
      {
        if (*v36 != *v38)
          LOBYTE(v39) = 1;
        if ((v39 & 1) != 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRShardConfig);
      outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
      if ((v40 & 1) != 0)
      {
        ++v12;
        v15 = v42;
        if (v12 != v11)
          continue;
      }
      return v40 & 1;
    }
LABEL_42:
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRShardConfig);
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireApiPIRShardConfig);
    goto LABEL_43;
  }
  v40 = 1;
  return v40 & 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  for (i = (_BYTE *)(a2 + 40); ; i += 16)
  {
    v6 = *v3;
    v3 += 2;
    v5 = v6;
    v7 = *((_QWORD *)i - 1);
    if (*i == 1)
      break;
    if (v5 != v7)
      return 0;
    if (!--v2)
      return 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_237D2C188 + 4 * byte_237D5E870[v7]))();
}

{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int *v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  char v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;

  v94 = a2;
  v95 = a1;
  v92 = type metadata accessor for AspireHeEncryptionParameters(0);
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v3 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (unsigned __int8 *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (unsigned __int8 *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AMDPbHEKeyStatus(0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v27 = *(_QWORD *)(v95 + 16);
  if (v27 == *(_QWORD *)(v26 + 16))
  {
    v87 = v17;
    v88 = v11;
    v91 = v10;
    v93 = (char *)&v81 - v24;
    v96 = v25;
    v84 = v3;
    if (v27 && v95 != v26)
    {
      v90 = v22;
      v28 = 0;
      v29 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v94 = v26 + v29;
      v95 += v29;
      v30 = *(_QWORD *)(v23 + 72);
      v85 = v27;
      v86 = v30;
      v81 = v6;
      v82 = v19;
      v31 = (uint64_t)v9;
      v32 = v13;
      v33 = v16;
      v83 = v7;
      v34 = v96;
      v35 = v93;
      while (1)
      {
        v36 = v86 * v28;
        outlined init with copy of SecretKey(v95 + v86 * v28, (uint64_t)v35, type metadata accessor for AMDPbHEKeyStatus);
        outlined init with copy of SecretKey(v94 + v36, (uint64_t)v34, type metadata accessor for AMDPbHEKeyStatus);
        if (*v35 != *v34)
        {
LABEL_74:
          outlined destroy of AspireApiPECConfig((uint64_t)v34, type metadata accessor for AMDPbHEKeyStatus);
          outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AMDPbHEKeyStatus);
          goto LABEL_75;
        }
        v37 = *(int *)(v90 + 28);
        v38 = (uint64_t)v35 + v37;
        v39 = (uint64_t)v34 + v37;
        v40 = (uint64_t)&v19[*(int *)(v87 + 48)];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, (uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v40, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
        v42 = v91;
        if (v41(v19, 1, v91) != 1)
          break;
        if (v41((char *)v40, 1, v42) != 1)
        {
          v34 = v96;
          v35 = v93;
          v79 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
          goto LABEL_73;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        v34 = v96;
        v35 = v93;
LABEL_61:
        if ((v35[1] != v34[1] || v35[2] != v34[2]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_74;
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v34 = v96;
        v35 = v93;
        v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireApiPECConfig((uint64_t)v34, type metadata accessor for AMDPbHEKeyStatus);
        outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AMDPbHEKeyStatus);
        if ((v77 & 1) != 0 && ++v28 != v85)
          continue;
        return v77 & 1;
      }
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, (uint64_t)v33, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if (v41((char *)v40, 1, v42) == 1)
      {
        v34 = v96;
        v35 = v93;
        v79 = &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?);
        goto LABEL_72;
      }
      outlined init with take of SecretKey(v40, (uint64_t)v32, type metadata accessor for AspireHeEvaluationKeyConfig);
      v43 = *(int *)(v42 + 28);
      v44 = (uint64_t)&v32[v43];
      v45 = v31 + *(int *)(v83 + 48);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v33[v43], v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v45, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
      v47 = v92;
      if (v46(v31, 1, v92) == 1)
      {
        if (v46(v45, 1, v47) != 1)
        {
          v78 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
          v19 = v82;
          goto LABEL_70;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        v19 = v82;
        goto LABEL_51;
      }
      v48 = (uint64_t)v81;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v31, (uint64_t)v81, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if (v46(v45, 1, v47) == 1)
      {
        v78 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
        v19 = v82;
LABEL_69:
        outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireHeEncryptionParameters);
LABEL_70:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, v78);
LABEL_71:
        outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireHeEvaluationKeyConfig);
        v79 = &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?;
        v34 = v96;
        v35 = v93;
LABEL_72:
        outlined destroy of AspireApiPECConfig((uint64_t)v33, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_73:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v79);
        goto LABEL_74;
      }
      v49 = v45;
      v50 = (uint64_t)v84;
      outlined init with take of SecretKey(v49, (uint64_t)v84, type metadata accessor for AspireHeEncryptionParameters);
      v19 = v82;
      if (*(_QWORD *)v48 != *(_QWORD *)v50
        || *(_QWORD *)(v48 + 8) != *(_QWORD *)(v50 + 8)
        || (v51 = *(_QWORD **)(v48 + 16), v52 = *(_QWORD **)(v50 + 16), v53 = v51[2], v53 != v52[2]))
      {
LABEL_68:
        outlined destroy of AspireApiPECConfig(v50, type metadata accessor for AspireHeEncryptionParameters);
        v78 = &demangling cache variable for type metadata for AspireHeEncryptionParameters?;
        goto LABEL_69;
      }
      if (v53 && v51 != v52)
      {
        if (v51[4] != v52[4])
          goto LABEL_68;
        v54 = v51 + 5;
        v55 = v52 + 5;
        v56 = v53 - 1;
        while (v56)
        {
          v58 = *v54++;
          v57 = v58;
          v59 = *v55++;
          --v56;
          if (v57 != v59)
            goto LABEL_68;
        }
      }
      if ((*(_BYTE *)(v48 + 32) & 1) != 0)
      {
        if ((*(_BYTE *)(v50 + 32) & 1) != 0)
          goto LABEL_31;
        v60 = 0;
      }
      else
      {
        v60 = *(_QWORD *)(v48 + 24);
        if ((*(_BYTE *)(v50 + 32) & 1) != 0)
        {
          if (v60)
            goto LABEL_68;
          goto LABEL_31;
        }
      }
      if (v60 != *(_QWORD *)(v50 + 24))
        goto LABEL_68;
LABEL_31:
      v61 = *(_QWORD *)(v48 + 40);
      v62 = *(_QWORD *)(v50 + 40);
      if (*(_BYTE *)(v48 + 48))
        v61 = v61 != 0;
      if (*(_BYTE *)(v50 + 48) == 1)
      {
        if (v62)
        {
          if (v61 != 1)
            goto LABEL_68;
        }
        else if (v61)
        {
          goto LABEL_68;
        }
      }
      else if (v61 != v62)
      {
        goto LABEL_68;
      }
      v63 = *(_QWORD *)(v48 + 56);
      v64 = *(_QWORD *)(v50 + 56);
      if (*(_BYTE *)(v50 + 64) == 1)
      {
        if (v64)
        {
          if (v64 == 1)
          {
            if (v63 != 1)
              goto LABEL_68;
          }
          else if (v63 != 2)
          {
            goto LABEL_68;
          }
        }
        else if (v63)
        {
          goto LABEL_68;
        }
      }
      else if (v63 != v64)
      {
        goto LABEL_68;
      }
      type metadata accessor for UnknownStorage();
      v65 = v50;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v66 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig(v65, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      if ((v66 & 1) == 0)
        goto LABEL_71;
LABEL_51:
      v67 = *(_QWORD *)v33;
      v68 = *(_QWORD *)v32;
      v69 = *(_QWORD *)(*(_QWORD *)v33 + 16);
      if (v69 != *(_QWORD *)(*(_QWORD *)v32 + 16))
        goto LABEL_71;
      if (v69 && v67 != v68)
      {
        if (*(_DWORD *)(v67 + 32) != *(_DWORD *)(v68 + 32))
          goto LABEL_71;
        v70 = (int *)(v67 + 36);
        v71 = (int *)(v68 + 36);
        v72 = v69 - 1;
        while (v72)
        {
          v74 = *v70++;
          v73 = v74;
          v75 = *v71++;
          --v72;
          if (v73 != v75)
            goto LABEL_71;
        }
      }
      if (v33[8] != v32[8])
        goto LABEL_71;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AspireApiPECConfig((uint64_t)v33, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v34 = v96;
      v35 = v93;
      if ((v76 & 1) == 0)
        goto LABEL_74;
      goto LABEL_61;
    }
    v77 = 1;
  }
  else
  {
LABEL_75:
    v77 = 0;
  }
  return v77 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  _DWORD *v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  unint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  unint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  unsigned int v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  unsigned int (*v150)(uint64_t, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  int v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _BYTE *v164;
  char v165;
  _BYTE *v166;
  char v167;
  _BYTE *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t *v185;
  char v186;
  _BYTE *v187;
  _BYTE *v188;
  char v189;
  uint64_t *v190;
  _BYTE *v191;
  uint64_t (*v192)(uint64_t);
  uint64_t v193;
  _BYTE *v194;
  uint64_t *v195;
  uint64_t *v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t (*v199)(uint64_t);
  uint64_t v200;
  _BYTE v202[32];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  _BYTE *v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  _BYTE *v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE *v242;
  _BYTE *v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  _BYTE *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE *v256;
  _BYTE *v257;
  _BYTE *v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  _BYTE *v264;
  _BYTE *v265;
  _BYTE *v266;
  uint64_t *v267;
  uint64_t *v268;
  _BYTE *v269;
  uint64_t v270;
  _BYTE *v271;
  uint64_t *v272;
  uint64_t *v273;
  _BYTE *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _BYTE *v278;
  _BYTE *v279;
  _BYTE *v280;
  _BYTE *v281;
  _BYTE *v282;
  uint64_t v283;

  v283 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v221 = &v202[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v202[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
  MEMORY[0x24BDAC7A8](v222);
  v227 = &v202[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v234 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v231 = *(_QWORD *)(v234 - 8);
  MEMORY[0x24BDAC7A8](v234);
  v228 = &v202[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v12);
  v229 = &v202[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v230);
  v238 = &v202[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v223 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v223);
  v248 = &v202[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v226 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v226);
  v241 = &v202[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v233);
  v251 = &v202[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v247 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v246 = *(_QWORD *)(v247 - 8);
  v18 = MEMORY[0x24BDAC7A8](v247);
  v235 = &v202[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v242 = &v202[-v21];
  MEMORY[0x24BDAC7A8](v20);
  v243 = &v202[-v22];
  v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v245);
  v258 = &v202[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v244 = &v202[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = MEMORY[0x24BDAC7A8](v25);
  v256 = &v202[-v28];
  MEMORY[0x24BDAC7A8](v27);
  v257 = &v202[-v29];
  v239 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v224 = *(_QWORD *)(v239 - 8);
  v30 = MEMORY[0x24BDAC7A8](v239);
  v262 = &v202[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v30);
  v269 = &v202[-v32];
  v260 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v250 = *(_QWORD *)(v260 - 8);
  MEMORY[0x24BDAC7A8](v260);
  v265 = &v202[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x24BDAC7A8](v249);
  v264 = &v202[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v271 = &v202[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = MEMORY[0x24BDAC7A8](v36);
  v263 = &v202[-v39];
  MEMORY[0x24BDAC7A8](v38);
  v259 = &v202[-v40];
  v261 = type metadata accessor for AMDPbPECShardReply(0);
  v236 = *(_QWORD *)(v261 - 8);
  v41 = MEMORY[0x24BDAC7A8](v261);
  v273 = (uint64_t *)&v202[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v41);
  v267 = (uint64_t *)&v202[-v43];
  v240 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x24BDAC7A8](v240);
  v272 = (uint64_t *)&v202[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v252 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x24BDAC7A8](v252);
  v268 = (uint64_t *)&v202[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
  MEMORY[0x24BDAC7A8](v270);
  v278 = &v202[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v276 = *(_QWORD *)(v47 - 8);
  v277 = v47;
  v48 = MEMORY[0x24BDAC7A8](v47);
  v50 = &v202[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v51 = MEMORY[0x24BDAC7A8](v48);
  v53 = (uint64_t *)&v202[-v52];
  MEMORY[0x24BDAC7A8](v51);
  v274 = &v202[-v54];
  v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?));
  MEMORY[0x24BDAC7A8](v275);
  v56 = &v202[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v58 = MEMORY[0x24BDAC7A8](v57);
  v266 = &v202[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = MEMORY[0x24BDAC7A8](v58);
  v280 = &v202[-v61];
  MEMORY[0x24BDAC7A8](v60);
  v279 = &v202[-v62];
  v63 = type metadata accessor for AMDPbHEReply(0);
  v64 = MEMORY[0x24BDAC7A8](v63);
  v282 = &v202[-((v65 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v64);
  v281 = &v202[-v67];
  v68 = *(_QWORD *)(a1 + 16);
  if (v68 != *(_QWORD *)(a2 + 16))
    goto LABEL_92;
  if (!v68 || a1 == a2)
  {
    v189 = 1;
    return v189 & 1;
  }
  v220 = v50;
  v212 = v5;
  v213 = v4;
  v215 = 0;
  v69 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
  v255 = a1 + v69;
  v70 = 0;
  v254 = a2 + v69;
  v253 = *(_QWORD *)(v66 + 72);
  v211 = v9;
  v71 = (uint64_t)v266;
  v225 = v63;
  v232 = v68;
  v218 = v53;
  while (1)
  {
    v72 = v63;
    v73 = v71;
    v74 = v253 * v70;
    v75 = v281;
    outlined init with copy of SecretKey(v255 + v253 * v70, (uint64_t)v281, type metadata accessor for AMDPbHEReply);
    v76 = v254 + v74;
    v77 = v282;
    outlined init with copy of SecretKey(v76, (uint64_t)v282, type metadata accessor for AMDPbHEReply);
    v78 = v279;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75, (uint64_t)v279, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    v79 = v280;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v77, (uint64_t)v280, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    v80 = (uint64_t)&v56[*(int *)(v275 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v78, (uint64_t)v56, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, v80, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    v81 = v277;
    v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v276 + 48);
    if (v82((uint64_t)v56, 1, v277) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v78, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      v71 = v73;
      v63 = v72;
      if (v82(v80, 1, v81) != 1)
      {
        v190 = &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?);
        goto LABEL_91;
      }
      goto LABEL_67;
    }
    v71 = v73;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v56, v73, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    if (v82(v80, 1, v81) == 1)
    {
      v191 = v279;
      v190 = &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?);
      goto LABEL_90;
    }
    v237 = v70;
    v83 = v274;
    outlined init with take of SecretKey(v80, (uint64_t)v274, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    v84 = v278;
    v85 = (uint64_t)&v278[*(int *)(v270 + 48)];
    outlined init with copy of SecretKey(v73, (uint64_t)v278, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined init with copy of SecretKey((uint64_t)v83, v85, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v183 = v218;
      outlined init with copy of SecretKey((uint64_t)v84, (uint64_t)v218, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        v184 = v85;
        v185 = v268;
        outlined init with take of SecretKey(v184, (uint64_t)v268, type metadata accessor for AMDPbPIRReply);
        if ((specialized static Array<A>.== infix(_:_:)(*v183, *v185) & 1) == 0
          || (type metadata accessor for UnknownStorage(),
              lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]), v79 = v280, v84 = v278, v186 = dispatch thunk of static Equatable.== infix(_:_:)(), v185 = v268, (v186 & 1) == 0))
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v185, type metadata accessor for AMDPbPIRReply);
          outlined destroy of AspireApiPECConfig((uint64_t)v183, type metadata accessor for AMDPbPIRReply);
          outlined destroy of AspireApiPECConfig((uint64_t)v84, type metadata accessor for AMDPbHEReply.OneOf_Reply);
          v191 = v279;
          goto LABEL_89;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v268, type metadata accessor for AMDPbPIRReply);
        outlined destroy of AspireApiPECConfig((uint64_t)v183, type metadata accessor for AMDPbPIRReply);
        v63 = v225;
        v70 = v237;
        goto LABEL_66;
      }
      v192 = type metadata accessor for AMDPbPIRReply;
      v193 = (uint64_t)v183;
LABEL_75:
      outlined destroy of AspireApiPECConfig(v193, v192);
      v191 = v279;
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v84, &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
      goto LABEL_89;
    }
    v86 = (uint64_t)v220;
    outlined init with copy of SecretKey((uint64_t)v84, (uint64_t)v220, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v192 = type metadata accessor for AMDPbPECReply;
      v193 = v86;
      goto LABEL_75;
    }
    v87 = (_BYTE *)v73;
    v88 = v85;
    v89 = v272;
    outlined init with take of SecretKey(v88, (uint64_t)v272, type metadata accessor for AMDPbPECReply);
    v90 = *(_QWORD *)v86;
    v91 = *(_QWORD *)(*(_QWORD *)v86 + 16);
    v219 = *v89;
    v63 = v225;
    v70 = v237;
    v92 = (uint64_t)v271;
    if (v91 != *(_QWORD *)(v219 + 16))
      goto LABEL_88;
    if (v91)
    {
      v93 = v219;
      v94 = v263;
      v95 = (uint64_t)v267;
      if (v90 != v219)
        break;
    }
LABEL_60:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v84 = v278;
    v79 = v280;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      goto LABEL_88;
    outlined destroy of AspireApiPECConfig((uint64_t)v272, type metadata accessor for AMDPbPECReply);
    outlined destroy of AspireApiPECConfig((uint64_t)v220, type metadata accessor for AMDPbPECReply);
    v71 = (uint64_t)v87;
LABEL_66:
    outlined destroy of AspireApiPECConfig((uint64_t)v84, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined destroy of AspireApiPECConfig((uint64_t)v274, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v279, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AspireApiPECConfig(v71, type metadata accessor for AMDPbHEReply.OneOf_Reply);
LABEL_67:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v56, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    v187 = v281;
    v188 = v282;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v189 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v188, type metadata accessor for AMDPbHEReply);
    outlined destroy of AspireApiPECConfig((uint64_t)v187, type metadata accessor for AMDPbHEReply);
    if ((v189 & 1) != 0 && ++v70 != v232)
      continue;
    return v189 & 1;
  }
  v96 = 0;
  v97 = (*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80);
  v98 = v90 + v97;
  v214 = v219 + v97;
  v99 = *(_QWORD *)(v236 + 72);
  v207 = v91;
  v206 = v98;
  v205 = v99;
  while (1)
  {
    v100 = v96;
    v101 = v99 * v96;
    outlined init with copy of SecretKey(v98 + v99 * v96, v95, type metadata accessor for AMDPbPECShardReply);
    v102 = *(_QWORD *)(v93 + 16);
    v216 = v100;
    if (v100 >= v102)
    {
      __break(1u);
LABEL_100:
      __break(1u);
      JUMPOUT(0x237D2F348);
    }
    v103 = v214 + v101;
    v104 = v273;
    outlined init with copy of SecretKey(v103, (uint64_t)v273, type metadata accessor for AMDPbPECShardReply);
    v105 = v261;
    v106 = v95 + *(int *)(v261 + 28);
    v107 = v259;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v106, (uint64_t)v259, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104 + *(int *)(v105 + 28), (uint64_t)v94, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v108 = v264;
    v109 = (uint64_t)&v264[*(int *)(v249 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v107, (uint64_t)v264, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v94, v109, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v110 = (uint64_t)v94;
    v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v250 + 48);
    v112 = v260;
    if (v111((uint64_t)v108, 1, v260) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v110, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v107, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      if (v111(v109, 1, v112) != 1)
      {
        v194 = v264;
        v87 = v266;
        v195 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
        goto LABEL_86;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v264, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      v87 = v266;
      v63 = v225;
      v113 = v267;
      goto LABEL_49;
    }
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v108, v92, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    if (v111(v109, 1, v112) == 1)
    {
      v87 = v266;
      v195 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
      goto LABEL_85;
    }
    v114 = v109;
    v115 = v265;
    outlined init with take of SecretKey(v114, (uint64_t)v265, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    v116 = v266;
    v63 = v225;
    if (*(_DWORD *)v92 != *v115)
      goto LABEL_84;
    if (*(_DWORD *)(v92 + 4) != *((_DWORD *)v265 + 1))
      goto LABEL_84;
    v117 = *(_QWORD *)(v92 + 8);
    v118 = *((_QWORD *)v265 + 1);
    v119 = *(_QWORD *)(v117 + 16);
    if (v119 != *(_QWORD *)(v118 + 16))
      goto LABEL_84;
    if (v119)
    {
      v120 = (uint64_t)v258;
      v121 = (uint64_t)v257;
      if (v117 != v118)
        break;
    }
LABEL_38:
    v146 = *(int *)(v260 + 32);
    v147 = (uint64_t)&v265[v146];
    v148 = v238;
    v149 = (uint64_t)&v238[*(int *)(v230 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v92 + v146, (uint64_t)v238, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v147, v149, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    v150 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48);
    v151 = v234;
    if (v150((uint64_t)v148, 1, v234) == 1)
    {
      if (v150(v149, 1, v151) != 1)
        goto LABEL_95;
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v238, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    }
    else
    {
      v152 = (uint64_t)v148;
      v153 = v229;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v152, (uint64_t)v229, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if (v150(v149, 1, v151) == 1)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v153, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_95:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v238, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
        v92 = (uint64_t)v271;
        goto LABEL_84;
      }
      v154 = v228;
      outlined init with take of SecretKey(v149, (uint64_t)v228, type metadata accessor for AspireSimilarityPlaintextPacking);
      v155 = v227;
      v156 = (uint64_t)&v227[*(int *)(v222 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v153, (uint64_t)v227, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v154, v156, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
      v158 = v213;
      if (v157((uint64_t)v155, 1, v213) == 1)
      {
        v159 = v157(v156, 1, v158);
        v92 = (uint64_t)v271;
        if (v159 != 1)
          goto LABEL_97;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v155, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        v160 = v229;
      }
      else
      {
        v161 = (uint64_t)v155;
        v162 = (uint64_t)v211;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v161, (uint64_t)v211, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        v163 = v157(v156, 1, v158);
        v92 = (uint64_t)v271;
        if (v163 == 1)
        {
          outlined destroy of AspireApiPECConfig(v162, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          v155 = v227;
LABEL_97:
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v155, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
          v160 = v229;
LABEL_98:
          outlined destroy of AspireApiPECConfig((uint64_t)v228, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AspireApiPECConfig((uint64_t)v160, type metadata accessor for AspireSimilarityPlaintextPacking);
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v238, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          goto LABEL_84;
        }
        v164 = v221;
        outlined init with take of SecretKey(v156, (uint64_t)v221, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        v165 = specialized static AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType.== infix(_:_:)(v162, (uint64_t)v164);
        outlined destroy of AspireApiPECConfig((uint64_t)v164, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        outlined destroy of AspireApiPECConfig(v162, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v227, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        v160 = v229;
        if ((v165 & 1) == 0)
          goto LABEL_98;
      }
      v166 = v228;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v167 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v166, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AspireApiPECConfig((uint64_t)v160, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v238, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if ((v167 & 1) == 0)
        goto LABEL_84;
    }
    v87 = v116;
    v168 = v265;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v169 = dispatch thunk of static Equatable.== infix(_:_:)();
    v113 = v267;
    v92 = (uint64_t)v271;
    outlined destroy of AspireApiPECConfig((uint64_t)v168, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v263, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v259, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AspireApiPECConfig(v92, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v264, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    if ((v169 & 1) == 0)
      goto LABEL_87;
LABEL_49:
    v170 = *v113;
    v171 = *v273;
    v172 = *(_QWORD *)(*v113 + 16);
    if (v172 != *(_QWORD *)(*v273 + 16))
      goto LABEL_87;
    if (v172 && v170 != v171)
    {
      if (*(_QWORD *)(v170 + 32) != *(_QWORD *)(v171 + 32))
        goto LABEL_87;
      v173 = (uint64_t *)(v170 + 40);
      v174 = (uint64_t *)(v171 + 40);
      v175 = v172 - 1;
      while (v175)
      {
        v177 = *v173++;
        v176 = v177;
        v178 = *v174++;
        --v175;
        if (v176 != v178)
          goto LABEL_87;
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(v113[1], v273[1]) & 1) == 0)
      goto LABEL_87;
    v179 = v273;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v180 = dispatch thunk of static Equatable.== infix(_:_:)();
    v181 = (uint64_t)v179;
    v182 = (uint64_t)v267;
    outlined destroy of AspireApiPECConfig(v181, type metadata accessor for AMDPbPECShardReply);
    v95 = v182;
    outlined destroy of AspireApiPECConfig(v182, type metadata accessor for AMDPbPECShardReply);
    v84 = v278;
    v79 = v280;
    v70 = v237;
    if ((v180 & 1) == 0)
      goto LABEL_88;
    v96 = v216 + 1;
    v94 = v263;
    v93 = v219;
    v98 = v206;
    v99 = v205;
    if (v216 + 1 == v207)
      goto LABEL_60;
  }
  v122 = 0;
  v123 = (*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80);
  v210 = v117 + v123;
  v208 = v118 + v123;
  v209 = *(_QWORD *)(v224 + 72);
  v204 = v118;
  v203 = v119;
  while (1)
  {
    v124 = v116;
    v125 = v122;
    v126 = v209 * v122;
    v127 = v269;
    outlined init with copy of SecretKey(v210 + v209 * v122, (uint64_t)v269, type metadata accessor for AspireHeSerializedCiphertext);
    v128 = *(_QWORD *)(v118 + 16);
    v217 = v125;
    if (v125 >= v128)
      goto LABEL_100;
    v129 = v208 + v126;
    v130 = v262;
    outlined init with copy of SecretKey(v129, (uint64_t)v262, type metadata accessor for AspireHeSerializedCiphertext);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v127, v121, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v131 = v256;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v130, (uint64_t)v256, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v132 = v120;
    v133 = v120 + *(int *)(v245 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v121, v120, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v131, v133, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v134 = v121;
    v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48);
    v136 = v247;
    if (v135(v120, 1, v247) != 1)
      break;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v131, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v134, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v137 = v135(v133, 1, v136);
    v116 = v124;
    v63 = v225;
    v92 = (uint64_t)v271;
    if (v137 != 1)
    {
      v196 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      goto LABEL_83;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v120, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v144 = v262;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v145 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v144, type metadata accessor for AspireHeSerializedCiphertext);
    outlined destroy of AspireApiPECConfig((uint64_t)v269, type metadata accessor for AspireHeSerializedCiphertext);
    v118 = v204;
    if ((v145 & 1) == 0)
      goto LABEL_84;
    v122 = v217 + 1;
    v120 = (uint64_t)v258;
    v121 = (uint64_t)v257;
    if (v217 + 1 == v203)
      goto LABEL_38;
  }
  v138 = v244;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v120, (uint64_t)v244, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  if (v135(v133, 1, v136) == 1)
  {
    v197 = v256;
    v198 = (uint64_t)v257;
    v116 = v124;
    v196 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
    v92 = (uint64_t)v271;
    v132 = v120;
  }
  else
  {
    v139 = v243;
    outlined init with take of SecretKey(v133, (uint64_t)v243, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v140 = v251;
    v141 = (uint64_t)&v251[*(int *)(v233 + 48)];
    outlined init with copy of SecretKey((uint64_t)v138, (uint64_t)v251, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    outlined init with copy of SecretKey((uint64_t)v139, v141, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v142 = v235;
      outlined init with copy of SecretKey((uint64_t)v140, (uint64_t)v235, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of SecretKey(v141, (uint64_t)v248, type metadata accessor for AspireHeSerializedFullCiphertext);
        __asm { BR              X10 }
      }
      v199 = type metadata accessor for AspireHeSerializedFullCiphertext;
      v200 = (uint64_t)v142;
    }
    else
    {
      v143 = v242;
      outlined init with copy of SecretKey((uint64_t)v140, (uint64_t)v242, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        outlined init with take of SecretKey(v141, (uint64_t)v241, type metadata accessor for AspireHeSerializedSeededCiphertext);
        __asm { BR              X10 }
      }
      v199 = type metadata accessor for AspireHeSerializedSeededCiphertext;
      v200 = (uint64_t)v143;
    }
    outlined destroy of AspireApiPECConfig(v200, v199);
    v116 = v124;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v140, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
    v197 = v256;
    v92 = (uint64_t)v271;
    v132 = v120;
    outlined destroy of AspireApiPECConfig((uint64_t)v243, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
    v196 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
    v198 = (uint64_t)v257;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v197, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v198, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  outlined destroy of AspireApiPECConfig((uint64_t)v244, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_83:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v132, v196);
  outlined destroy of AspireApiPECConfig((uint64_t)v262, type metadata accessor for AspireHeSerializedCiphertext);
  outlined destroy of AspireApiPECConfig((uint64_t)v269, type metadata accessor for AspireHeSerializedCiphertext);
LABEL_84:
  v87 = v116;
  outlined destroy of AspireApiPECConfig((uint64_t)v265, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  v195 = &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?;
LABEL_85:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v263, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v259, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AspireApiPECConfig(v92, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  v194 = v264;
LABEL_86:
  v113 = v267;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v194, v195);
LABEL_87:
  outlined destroy of AspireApiPECConfig((uint64_t)v273, type metadata accessor for AMDPbPECShardReply);
  outlined destroy of AspireApiPECConfig((uint64_t)v113, type metadata accessor for AMDPbPECShardReply);
  v84 = v278;
  v79 = v280;
LABEL_88:
  outlined destroy of AspireApiPECConfig((uint64_t)v272, type metadata accessor for AMDPbPECReply);
  outlined destroy of AspireApiPECConfig((uint64_t)v220, type metadata accessor for AMDPbPECReply);
  outlined destroy of AspireApiPECConfig((uint64_t)v84, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  v191 = v279;
  v71 = (uint64_t)v87;
LABEL_89:
  outlined destroy of AspireApiPECConfig((uint64_t)v274, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  v190 = &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?;
LABEL_90:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v79, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v191, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined destroy of AspireApiPECConfig(v71, type metadata accessor for AMDPbHEReply.OneOf_Reply);
LABEL_91:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v56, v190);
  outlined destroy of AspireApiPECConfig((uint64_t)v282, type metadata accessor for AMDPbHEReply);
  outlined destroy of AspireApiPECConfig((uint64_t)v281, type metadata accessor for AMDPbHEReply);
LABEL_92:
  v189 = 0;
  return v189 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  BOOL v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;

  v76 = a2;
  v3 = type metadata accessor for AMDPbPECQuery(0);
  MEMORY[0x24BDAC7A8](v3);
  v73 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPIRQuery(0);
  MEMORY[0x24BDAC7A8](v5);
  v72 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
  MEMORY[0x24BDAC7A8](v7);
  v83 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v9 = *(_QWORD *)(v81 - 8);
  v10 = MEMORY[0x24BDAC7A8](v81);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v69 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v69 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?));
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AMDPbHEQuery(0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v30 = a1;
  v31 = *(_QWORD *)(a1 + 16);
  v32 = v76;
  if (v31 != *(_QWORD *)(v76 + 16))
  {
LABEL_36:
    v62 = 0;
    return v62 & 1;
  }
  v79 = v21;
  v80 = v9;
  v85 = (uint64_t *)((char *)&v69 - v28);
  v86 = (_QWORD *)v29;
  v70 = v15;
  v74 = v12;
  v82 = v23;
  v77 = v20;
  if (v31 && v30 != v76)
  {
    v84 = v26;
    v71 = v7;
    v33 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v75 = *(_QWORD *)(v27 + 72);
    v34 = v31 - 1;
    v78 = v17;
    while (1)
    {
      v35 = v85;
      outlined init with copy of SecretKey(v30 + v33, (uint64_t)v85, type metadata accessor for AMDPbHEQuery);
      v36 = v86;
      outlined init with copy of SecretKey(v32 + v33, (uint64_t)v86, type metadata accessor for AMDPbHEQuery);
      v37 = *v35 == *v36 && v35[1] == v36[1];
      if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v38 = *(int *)(v84 + 20);
      v39 = (uint64_t)v36 + v38;
      v40 = (uint64_t)v82;
      v41 = (uint64_t)&v82[*(int *)(v79 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35 + v38, (uint64_t)v82, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v41, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      v42 = v81;
      v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
      if (v43(v40, 1, v81) == 1)
      {
        if (v43(v41, 1, v42) != 1)
        {
          v35 = v85;
          v36 = v86;
          v65 = &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?);
          goto LABEL_34;
        }
      }
      else
      {
        v44 = v40;
        v45 = (uint64_t)v77;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t)v77, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        if (v43(v41, 1, v42) == 1)
        {
          v66 = v45;
          v40 = (uint64_t)v82;
          v35 = v85;
          v36 = v86;
          v65 = &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?);
          goto LABEL_33;
        }
        v46 = (uint64_t)v17;
        outlined init with take of SecretKey(v41, (uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        v47 = v83 + *(int *)(v71 + 48);
        outlined init with copy of SecretKey(v45, v83, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined init with copy of SecretKey((uint64_t)v17, v47, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v48 = (uint64_t)v74;
          outlined init with copy of SecretKey(v83, (uint64_t)v74, type metadata accessor for AMDPbHEQuery.OneOf_Query);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          v40 = (uint64_t)v82;
          if (EnumCaseMultiPayload != 1)
          {
            v67 = type metadata accessor for AMDPbPECQuery;
LABEL_31:
            outlined destroy of AspireApiPECConfig(v48, v67);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
LABEL_32:
            outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AMDPbHEQuery.OneOf_Query);
            v65 = &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?;
            v66 = (uint64_t)v77;
            v35 = v85;
            v36 = v86;
LABEL_33:
            outlined destroy of AspireApiPECConfig(v66, type metadata accessor for AMDPbHEQuery.OneOf_Query);
LABEL_34:
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, v65);
            break;
          }
          v50 = v73;
          v51 = type metadata accessor for AMDPbPECQuery;
          outlined init with take of SecretKey(v47, v73, type metadata accessor for AMDPbPECQuery);
          v52 = static AMDPbPECQuery.== infix(_:_:)(v74, v50);
          outlined destroy of AspireApiPECConfig(v50, type metadata accessor for AMDPbPECQuery);
          v53 = (uint64_t)v74;
        }
        else
        {
          v48 = (uint64_t)v70;
          outlined init with copy of SecretKey(v83, (uint64_t)v70, type metadata accessor for AMDPbHEQuery.OneOf_Query);
          v54 = swift_getEnumCaseMultiPayload();
          v40 = (uint64_t)v82;
          if (v54 == 1)
          {
            v67 = type metadata accessor for AMDPbPIRQuery;
            goto LABEL_31;
          }
          v55 = v72;
          v51 = type metadata accessor for AMDPbPIRQuery;
          outlined init with take of SecretKey(v47, v72, type metadata accessor for AMDPbPIRQuery);
          v52 = static AMDPbPIRQuery.== infix(_:_:)(v48, v55);
          v56 = v55;
          v46 = (uint64_t)v78;
          outlined destroy of AspireApiPECConfig(v56, type metadata accessor for AMDPbPIRQuery);
          v53 = v48;
        }
        outlined destroy of AspireApiPECConfig(v53, v51);
        outlined destroy of AspireApiPECConfig(v83, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        if ((v52 & 1) == 0)
          goto LABEL_32;
        outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined destroy of AspireApiPECConfig((uint64_t)v77, type metadata accessor for AMDPbHEQuery.OneOf_Query);
      }
      v57 = v30;
      v58 = v40;
      v59 = v32;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v58, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      v60 = (uint64_t)v85;
      v61 = (uint64_t)v86;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig(v61, type metadata accessor for AMDPbHEQuery);
      outlined destroy of AspireApiPECConfig(v60, type metadata accessor for AMDPbHEQuery);
      v64 = v34-- != 0;
      if ((v62 & 1) != 0)
      {
        v33 += v75;
        v32 = v59;
        v30 = v57;
        v17 = v78;
        if (v64)
          continue;
      }
      return v62 & 1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v36, type metadata accessor for AMDPbHEQuery);
    outlined destroy of AspireApiPECConfig((uint64_t)v35, type metadata accessor for AMDPbHEQuery);
    goto LABEL_36;
  }
  v62 = 1;
  return v62 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  unsigned int (*v60)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int (*v79)(_BYTE *, uint64_t, uint64_t);
  unsigned int v80;
  _BYTE *v81;
  unsigned int v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  char v98;
  _BYTE *v99;
  _BYTE *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t *v112;
  uint64_t *v114;
  uint64_t (*v115)(uint64_t);
  _BYTE v116[24];
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v140 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v134 = &v116[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v116[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v139);
  v150 = &v116[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v135 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v135);
  v147 = &v116[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v136 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v136);
  v142 = &v116[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
  MEMORY[0x24BDAC7A8](v12);
  v151 = &v116[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  v146 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v138 = &v116[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v137 = &v116[-v18];
  MEMORY[0x24BDAC7A8](v17);
  v143 = &v116[-v19];
  v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?));
  MEMORY[0x24BDAC7A8](v145);
  v159 = &v116[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v144 = &v116[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = MEMORY[0x24BDAC7A8](v22);
  v157 = &v116[-v25];
  MEMORY[0x24BDAC7A8](v24);
  v152 = &v116[-v26];
  v141 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v27 = *(_QWORD *)(v141 - 8);
  v28 = MEMORY[0x24BDAC7A8](v141);
  v158 = &v116[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v28);
  v162 = &v116[-v30];
  v156 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v149 = *(_QWORD *)(v156 - 8);
  MEMORY[0x24BDAC7A8](v156);
  v160 = &v116[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x24BDAC7A8](v148);
  v161 = &v116[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v163 = &v116[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = MEMORY[0x24BDAC7A8](v34);
  v153 = &v116[-v37];
  MEMORY[0x24BDAC7A8](v36);
  v39 = &v116[-v38];
  v40 = type metadata accessor for AMDPbPECShardReply(0);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v155 = (uint64_t *)&v116[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v43 = MEMORY[0x24BDAC7A8](v41);
  v154 = (uint64_t *)&v116[-v45];
  v46 = *(_QWORD *)(a1 + 16);
  if (v46 != *(_QWORD *)(a2 + 16))
    goto LABEL_52;
  if (!v46 || a1 == a2)
  {
    v111 = 1;
    return v111 & 1;
  }
  v133 = v43;
  v47 = 0;
  v121 = 0;
  v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = *(_QWORD *)(v44 + 72);
  v117 = v8;
  v129 = v12;
  v53 = v154;
  v52 = v155;
  v119 = v4;
  v131 = v14;
  v118 = v27;
  v125 = v46;
  v124 = v49;
  v123 = a2 + v48;
  v122 = v51;
  v132 = v39;
  while (1)
  {
    v130 = v47;
    v54 = v51 * v47;
    outlined init with copy of SecretKey(v49 + v51 * v47, (uint64_t)v53, type metadata accessor for AMDPbPECShardReply);
    outlined init with copy of SecretKey(v50 + v54, (uint64_t)v52, type metadata accessor for AMDPbPECShardReply);
    v55 = v133;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v53 + *(int *)(v133 + 28), (uint64_t)v39, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v56 = (uint64_t)v39;
    v57 = v153;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v52 + *(int *)(v55 + 28), (uint64_t)v153, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v58 = v161;
    v59 = (uint64_t)&v161[*(int *)(v148 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v56, (uint64_t)v161, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v57, v59, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v60 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v149 + 48);
    v61 = v58;
    v62 = v156;
    if (v60(v61, 1, v156) == 1)
      break;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v161, (uint64_t)v163, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v63 = v60((_BYTE *)v59, 1, v62);
    v64 = (uint64_t)v150;
    if (v63 == 1)
    {
      v39 = v132;
      v112 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
      goto LABEL_49;
    }
    v65 = v160;
    outlined init with take of SecretKey(v59, (uint64_t)v160, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    v39 = v132;
    v66 = v131;
    if (*(_DWORD *)v163 != *v65)
      goto LABEL_48;
    if (*((_DWORD *)v163 + 1) != *((_DWORD *)v160 + 1))
      goto LABEL_48;
    v67 = *((_QWORD *)v163 + 1);
    v68 = *((_QWORD *)v160 + 1);
    v69 = *(_QWORD *)(v67 + 16);
    if (v69 != *(_QWORD *)(v68 + 16))
      goto LABEL_48;
    if (v69 && v67 != v68)
    {
      v70 = 0;
      v71 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
      v128 = v67 + v71;
      v126 = v68 + v71;
      v127 = *(_QWORD *)(v118 + 72);
      v120 = v68;
      while (1)
      {
        v72 = v127 * v70;
        outlined init with copy of SecretKey(v128 + v127 * v70, (uint64_t)v162, type metadata accessor for AspireHeSerializedCiphertext);
        if (v70 >= *(_QWORD *)(v68 + 16))
        {
          __break(1u);
          JUMPOUT(0x237D314E4);
        }
        v73 = v126 + v72;
        v74 = v158;
        outlined init with copy of SecretKey(v73, (uint64_t)v158, type metadata accessor for AspireHeSerializedCiphertext);
        v75 = v152;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v162, (uint64_t)v152, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v76 = v157;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v74, (uint64_t)v157, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v77 = v159;
        v78 = (uint64_t)&v159[*(int *)(v145 + 48)];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75, (uint64_t)v159, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76, v78, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v79 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v146 + 48);
        if (v79(v77, 1, v66) != 1)
          break;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v157, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v80 = v79((_BYTE *)v78, 1, v66);
        v39 = v132;
        if (v80 != 1)
        {
          v114 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
          goto LABEL_47;
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v159, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v86 = v162;
        v87 = v158;
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v88 = dispatch thunk of static Equatable.== infix(_:_:)();
        v66 = v131;
        v12 = v129;
        outlined destroy of AspireApiPECConfig((uint64_t)v87, type metadata accessor for AspireHeSerializedCiphertext);
        outlined destroy of AspireApiPECConfig((uint64_t)v86, type metadata accessor for AspireHeSerializedCiphertext);
        v64 = (uint64_t)v150;
        v68 = v120;
        if ((v88 & 1) == 0)
          goto LABEL_48;
        if (++v70 == v69)
          goto LABEL_27;
      }
      v81 = v144;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v159, (uint64_t)v144, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v82 = v79((_BYTE *)v78, 1, v66);
      v39 = v132;
      if (v82 == 1)
      {
        v114 = &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      }
      else
      {
        v83 = v143;
        outlined init with take of SecretKey(v78, (uint64_t)v143, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        v84 = (uint64_t)&v151[*(int *)(v12 + 48)];
        outlined init with copy of SecretKey((uint64_t)v81, (uint64_t)v151, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        outlined init with copy of SecretKey((uint64_t)v83, v84, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v85 = v138;
          outlined init with copy of SecretKey((uint64_t)v151, (uint64_t)v138, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            outlined init with take of SecretKey(v84, (uint64_t)v147, type metadata accessor for AspireHeSerializedFullCiphertext);
            __asm { BR              X10 }
          }
          v115 = type metadata accessor for AspireHeSerializedFullCiphertext;
        }
        else
        {
          v85 = v137;
          outlined init with copy of SecretKey((uint64_t)v151, (uint64_t)v137, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            outlined init with take of SecretKey(v84, (uint64_t)v142, type metadata accessor for AspireHeSerializedSeededCiphertext);
            __asm { BR              X10 }
          }
          v115 = type metadata accessor for AspireHeSerializedSeededCiphertext;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v85, v115);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v151, &demangling cache variable for type metadata for (AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType, AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType));
        outlined destroy of AspireApiPECConfig((uint64_t)v143, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
        v114 = &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v157, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v152, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      outlined destroy of AspireApiPECConfig((uint64_t)v81, type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType);
LABEL_47:
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v159, v114);
      outlined destroy of AspireApiPECConfig((uint64_t)v158, type metadata accessor for AspireHeSerializedCiphertext);
      outlined destroy of AspireApiPECConfig((uint64_t)v162, type metadata accessor for AspireHeSerializedCiphertext);
      goto LABEL_48;
    }
LABEL_27:
    v89 = *(int *)(v156 + 32);
    v90 = (uint64_t)&v160[v89];
    v91 = v64 + *(int *)(v139 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v163[v89], v64, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v90, v91, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
    v93 = v119;
    if (v92(v64, 1, v119) == 1)
    {
      if (v92(v91, 1, v93) != 1)
        goto LABEL_61;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v64, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    }
    else
    {
      v94 = v64;
      v95 = v64;
      v96 = (uint64_t)v117;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v94, (uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if (v92(v91, 1, v93) == 1)
      {
        outlined destroy of AspireApiPECConfig(v96, type metadata accessor for AspireSimilarityPlaintextPacking);
        v64 = v95;
LABEL_61:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v64, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
LABEL_48:
        outlined destroy of AspireApiPECConfig((uint64_t)v160, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
        v112 = &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?;
LABEL_49:
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v153, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        outlined destroy of AspireApiPECConfig((uint64_t)v163, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
        v53 = v154;
        v52 = v155;
        goto LABEL_50;
      }
      v97 = v134;
      outlined init with take of SecretKey(v91, (uint64_t)v134, type metadata accessor for AspireSimilarityPlaintextPacking);
      v98 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v96, (uint64_t)v97);
      outlined destroy of AspireApiPECConfig((uint64_t)v97, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AspireApiPECConfig(v96, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v95, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      v12 = v129;
      if ((v98 & 1) == 0)
        goto LABEL_48;
    }
    v99 = v163;
    v100 = v160;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v101 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v100, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v153, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AspireApiPECConfig((uint64_t)v99, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v161, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    v53 = v154;
    v52 = v155;
    if ((v101 & 1) == 0)
      goto LABEL_51;
LABEL_33:
    v102 = *v53;
    v103 = *v52;
    v104 = *(_QWORD *)(*v53 + 16);
    if (v104 != *(_QWORD *)(*v52 + 16))
      goto LABEL_51;
    if (v104 && v102 != v103)
    {
      if (*(_QWORD *)(v102 + 32) != *(_QWORD *)(v103 + 32))
        goto LABEL_51;
      v105 = (uint64_t *)(v102 + 40);
      v106 = (uint64_t *)(v103 + 40);
      v107 = v104 - 1;
      while (v107)
      {
        v109 = *v105++;
        v108 = v109;
        v110 = *v106++;
        --v107;
        if (v108 != v110)
          goto LABEL_51;
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(v53[1], v52[1]) & 1) == 0)
      goto LABEL_51;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v53 = v154;
    v52 = v155;
    v111 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AMDPbPECShardReply);
    outlined destroy of AspireApiPECConfig((uint64_t)v53, type metadata accessor for AMDPbPECShardReply);
    if ((v111 & 1) != 0)
    {
      v47 = v130 + 1;
      v49 = v124;
      v50 = v123;
      v51 = v122;
      if (v130 + 1 != v125)
        continue;
    }
    return v111 & 1;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v57, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v56, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if (v60((_BYTE *)v59, 1, v62) == 1)
  {
    v39 = (_BYTE *)v56;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v161, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    goto LABEL_33;
  }
  v112 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
LABEL_50:
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v161, v112);
LABEL_51:
  outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AMDPbPECShardReply);
  outlined destroy of AspireApiPECConfig((uint64_t)v53, type metadata accessor for AMDPbPECShardReply);
LABEL_52:
  v111 = 0;
  return v111 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for AMDPbPIRShardConfig(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v10 = (uint64_t *)((char *)&v27 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v19 = 1;
      return v19 & 1;
    }
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v27 = a2 + v13;
    v28 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of SecretKey(v28 + v14 * v12, (uint64_t)v10, type metadata accessor for AMDPbPIRShardConfig);
      outlined init with copy of SecretKey(v27 + v14 * v12, (uint64_t)v7, type metadata accessor for AMDPbPIRShardConfig);
      if (*v10 != *v7)
        break;
      if (v10[1] != v7[1])
        break;
      v15 = (_QWORD *)v10[2];
      v16 = (_QWORD *)v7[2];
      v17 = v15[2];
      if (v17 != v16[2])
        break;
      if (v17)
        v18 = v15 == v16;
      else
        v18 = 1;
      if (!v18)
      {
        if (v15[4] != v16[4])
          break;
        if (v17 != 1)
        {
          if (v15[5] != v16[5])
            break;
          v20 = v15 + 6;
          v21 = v16 + 6;
          v22 = v17 - 2;
          while (v22)
          {
            v24 = *v20++;
            v23 = v24;
            v25 = *v21++;
            --v22;
            if (v23 != v25)
              goto LABEL_21;
          }
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRShardConfig);
      outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AMDPbPIRShardConfig);
      if ((v19 & 1) != 0 && ++v12 != v11)
        continue;
      return v19 & 1;
    }
LABEL_21:
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRShardConfig);
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AMDPbPIRShardConfig);
  }
  v19 = 0;
  return v19 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(0);
  v14 = MEMORY[0x24BDAC7A8](v41);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v34 - v18;
  v20 = *(_QWORD *)(a1 + 16);
  v40 = a2;
  if (v20 != *(_QWORD *)(a2 + 16))
  {
LABEL_20:
    v32 = 0;
    return v32 & 1;
  }
  if (v20 && a1 != v40)
  {
    v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v22 = *(_QWORD *)(v17 + 72);
    v35 = v7;
    v36 = v22;
    v23 = v20 - 1;
    v39 = (char *)&v34 - v18;
    while (1)
    {
      v38 = v23;
      v24 = v21;
      outlined init with copy of SecretKey(a1 + v21, (uint64_t)v19, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
      v37 = v24;
      outlined init with copy of SecretKey(v40 + v24, (uint64_t)v16, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
      if (*(_DWORD *)v19 != *(_DWORD *)v16
        || *((_DWORD *)v19 + 1) != *((_DWORD *)v16 + 1)
        || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v19 + 1), *((_QWORD *)v16 + 1)) & 1) == 0)
      {
        break;
      }
      v25 = *(int *)(v41 + 32);
      v26 = (uint64_t)&v19[v25];
      v27 = (uint64_t)&v16[v25];
      v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v27, v28, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v29((uint64_t)v13, 1, v4) == 1)
      {
        if (v29(v28, 1, v4) != 1)
          goto LABEL_18;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        if (v29(v28, 1, v4) == 1)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_18:
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
          v19 = v39;
          break;
        }
        v30 = (uint64_t)v35;
        outlined init with take of SecretKey(v28, (uint64_t)v35, type metadata accessor for AspireSimilarityPlaintextPacking);
        v31 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)((uint64_t)v10, v30);
        outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireSimilarityPlaintextPacking);
        outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireSimilarityPlaintextPacking);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v19 = v39;
        if ((v31 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v19 = v39;
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
      outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
      v23 = v38 - 1;
      if ((v32 & 1) != 0)
      {
        v21 = v37 + v36;
        if (v38)
          continue;
      }
      return v32 & 1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
    outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
    goto LABEL_20;
  }
  v32 = 1;
  return v32 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AspireSimilaritySimilarityDbRow(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (_QWORD *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v10 = (_QWORD *)((char *)v16 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v14 = 1;
      return v14 & 1;
    }
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v17 = a2 + v12;
    v18 = a1 + v12;
    v13 = *(_QWORD *)(v8 + 72);
    v16[2] = v4;
    v16[3] = v13;
    v16[1] = v11;
    outlined init with copy of SecretKey(v18, (uint64_t)v16 - v9, type metadata accessor for AspireSimilaritySimilarityDbRow);
    outlined init with copy of SecretKey(v17, (uint64_t)v7, type metadata accessor for AspireSimilaritySimilarityDbRow);
    if (*v10 == *v7)
      __asm { BR              X10 }
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireSimilaritySimilarityDbRow);
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireSimilaritySimilarityDbRow);
  }
  v14 = 0;
  return v14 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        outlined init with copy of SecretKey(a1 + v16, (uint64_t)v14, a3);
        outlined init with copy of SecretKey(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        outlined destroy of AspireApiPECConfig((uint64_t)v11, a3);
        outlined destroy of AspireApiPECConfig((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.packing.setter(uint64_t a1)
{
  return AspireSimilaritySerializedCiphertextMatrix.packing.setter(a1, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.packing.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireSimilaritySerializedCiphertextMatrix.packing.getter(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, a1);
}

void AspireSimilaritySimilarityMetric.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t AspireSimilaritySimilarityMetric.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t AspireSimilaritySimilarityMetric.rawValue.getter()
{
  _BYTE *v0;

  if ((v0[8] & 1) != 0)
    return 0;
  else
    return *(_QWORD *)v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySimilarityMetric()
{
  lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
  return Enum.hash(into:)();
}

uint64_t static AspireSimilaritySimilarityMetric.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspireSimilaritySimilarityMetric@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static AspireSimilaritySimilarityMetric.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t AspireSimilarityPlaintextPacking.plaintextPackingType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
}

uint64_t AspireSimilarityPlaintextPacking.plaintextPackingType.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
}

uint64_t (*AspireSimilarityPlaintextPacking.plaintextPackingType.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilarityPlaintextPacking.denseRow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    return UnknownStorage.init()();
  }
  return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPackingDenseRow(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t key path getter for AspireSimilarityPlaintextPacking.denseRow : AspireSimilarityPlaintextPacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    return UnknownStorage.init()();
  }
  return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t AspireSimilarityPlaintextPacking.denseRow.setter(uint64_t a1)
{
  return AspireSimilarityPlaintextPacking.denseRow.setter(a1, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
}

void (*AspireSimilarityPlaintextPacking.denseRow.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireSimilarityPlaintextPackingDenseRow(0) - 8) + 64);
  v4[2] = malloc(v7);
  v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v4[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
      return AspireSimilarityPlaintextPacking.denseRow.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
  UnknownStorage.init()();
  return AspireSimilarityPlaintextPacking.denseRow.modify;
}

void AspireSimilarityPlaintextPacking.denseRow.modify(uint64_t **a1, char a2)
{
  AspireSimilarityPlaintextPacking.denseRow.modify(a1, a2, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t AspireSimilarityPlaintextPacking.diagonal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPackingDiagonal(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t key path getter for AspireSimilarityPlaintextPacking.diagonal : AspireSimilarityPlaintextPacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
  return UnknownStorage.init()();
}

uint64_t AspireSimilarityPlaintextPacking.diagonal.setter(uint64_t a1)
{
  return AspireSimilarityPlaintextPacking.denseRow.setter(a1, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
}

void (*AspireSimilarityPlaintextPacking.diagonal.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireSimilarityPlaintextPackingDiagonal(0) - 8) + 64);
  v4[2] = malloc(v7);
  v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v4[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
LABEL_6:
    UnknownStorage.init()();
    return AspireSimilarityPlaintextPacking.diagonal.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
  return AspireSimilarityPlaintextPacking.diagonal.modify;
}

void AspireSimilarityPlaintextPacking.diagonal.modify(uint64_t **a1, char a2)
{
  AspireSimilarityPlaintextPacking.denseRow.modify(a1, a2, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t AspireSimilarityPlaintextPacking.denseColumn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t key path getter for AspireSimilarityPlaintextPacking.denseColumn : AspireSimilarityPlaintextPacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
  return UnknownStorage.init()();
}

uint64_t key path setter for AspireSimilarityPlaintextPacking.denseRow : AspireSimilarityPlaintextPacking(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - v9;
  outlined init with copy of SecretKey(a1, (uint64_t)&v13 - v9, a5);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  outlined init with take of SecretKey((uint64_t)v10, a2, a5);
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
}

uint64_t AspireSimilarityPlaintextPacking.denseColumn.setter(uint64_t a1)
{
  return AspireSimilarityPlaintextPacking.denseRow.setter(a1, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t AspireSimilarityPlaintextPacking.denseRow.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  outlined init with take of SecretKey(a1, v2, a2);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
}

void (*AspireSimilarityPlaintextPacking.denseColumn.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn(0) - 8) + 64);
  v4[2] = malloc(v7);
  v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v4[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
LABEL_6:
    UnknownStorage.init()();
    return AspireSimilarityPlaintextPacking.denseColumn.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v8, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
  return AspireSimilarityPlaintextPacking.denseColumn.modify;
}

void AspireSimilarityPlaintextPacking.denseColumn.modify(uint64_t **a1, char a2)
{
  AspireSimilarityPlaintextPacking.denseRow.modify(a1, a2, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
}

void AspireSimilarityPlaintextPacking.denseRow.modify(uint64_t **a1, char a2, uint64_t (*a3)(_QWORD))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v4 = *a1;
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (void *)(*a1)[2];
  v8 = (void *)(*a1)[3];
  v10 = **a1;
  v9 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey((*a1)[3], (uint64_t)v7, a3);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v10, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined init with take of SecretKey((uint64_t)v7, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
    outlined destroy of AspireApiPECConfig((uint64_t)v8, a3);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined init with take of SecretKey((uint64_t)v8, v10, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  free(v8);
  free(v7);
  free(v9);
  free(v4);
}

uint64_t AspireSimilarityPlaintextPacking.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireSimilarityPlaintextPacking, a1);
}

uint64_t AspireSimilarityPlaintextPacking.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t (*AspireSimilarityPlaintextPacking.unknownFields.modify())()
{
  type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilarityPlaintextPackingDenseRow.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilarityPlaintextPackingDiagonal.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilarityPlaintextPackingDenseColumn.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.nrows.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.nrows.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspireSimilaritySerializedCiphertextMatrix.nrows.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.ncols.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.ncols.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AspireSimilaritySerializedCiphertextMatrix.ncols.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilaritySerializedCiphertextMatrix.ciphertexts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void (*AspireSimilaritySerializedCiphertextMatrix.packing.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AspireSimilaritySerializedCiphertextMatrix.packing.modify;
}

void AspireSimilaritySerializedCiphertextMatrix.packing.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

BOOL AspireSimilaritySerializedCiphertextMatrix.hasPacking.getter()
{
  return AspireSimilaritySerializedCiphertextMatrix.hasPacking.getter((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilarityPlaintextPacking);
}

Swift::Void __swiftcall AspireSimilaritySerializedCiphertextMatrix.clearPacking()()
{
  AspireSimilaritySerializedCiphertextMatrix.clearPacking()(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, a1);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t (*AspireSimilaritySerializedCiphertextMatrix.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilaritySerializedDcrtPlaintextMatrix.numRows.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilaritySerializedDcrtPlaintextMatrix.numCols.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilaritySerializedDcrtPlaintextMatrix.plaintexts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.packing.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireSimilaritySerializedCiphertextMatrix.packing.getter(type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, a1);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.packing.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 32), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of SecretKey((uint64_t)v7, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  v10 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path getter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v9 + 32), (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v10 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of SecretKey((uint64_t)v8, a3, type metadata accessor for AspireSimilarityPlaintextPacking);
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.packing.setter(uint64_t a1)
{
  return AspireSimilaritySerializedCiphertextMatrix.packing.setter(a1, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

void (*AspireSimilaritySerializedDcrtPlaintextMatrix.packing.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AspireSimilaritySerializedCiphertextMatrix.packing.modify;
}

BOOL AspireSimilaritySerializedDcrtPlaintextMatrix.hasPacking.getter()
{
  return AspireSimilaritySerializedCiphertextMatrix.hasPacking.getter((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilarityPlaintextPacking);
}

BOOL AspireSimilaritySerializedCiphertextMatrix.hasPacking.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AspireSimilaritySerializedDcrtPlaintextMatrix.clearPacking()()
{
  AspireSimilaritySerializedCiphertextMatrix.clearPacking()(type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.clearPacking()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, a1);
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t (*AspireSimilaritySerializedDcrtPlaintextMatrix.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.init()@<X0>(_QWORD *a1@<X8>)
{
  return AspireSimilaritySerializedCiphertextMatrix.init()(type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, a1);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = MEMORY[0x24BEE4AF8];
  v3 = a1(0);
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(v3 + 32);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t AspireSimilaritySimilarityClientConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t key path setter for AspireSimilaritySimilarityClientConfig.encryptionParameters : AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireHeEncryptionParameters);
  v8 = a2 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireHeEncryptionParameters);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireSimilaritySimilarityClientConfig.encryptionParameters.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireHeEncryptionParameters);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspireSimilaritySimilarityClientConfig.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

BOOL AspireSimilaritySimilarityClientConfig.hasEncryptionParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 40), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  return v6;
}

Swift::Void __swiftcall AspireSimilaritySimilarityClientConfig.clearEncryptionParameters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireSimilaritySimilarityClientConfig.scalingFactor.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AspireSimilaritySimilarityClientConfig.scalingFactor.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspireSimilaritySimilarityClientConfig.scalingFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityClientConfig.plaintextPacking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 44), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path getter for AspireSimilaritySimilarityClientConfig.plaintextPacking : AspireSimilaritySimilarityClientConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 44), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path setter for AspireSimilaritySimilarityClientConfig.plaintextPacking : AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = a2 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireSimilarityPlaintextPacking);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireSimilaritySimilarityClientConfig.plaintextPacking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireSimilarityPlaintextPacking);
  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspireSimilaritySimilarityClientConfig.plaintextPacking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 44);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AspireSimilaritySerializedCiphertextMatrix.packing.modify;
}

BOOL AspireSimilaritySimilarityClientConfig.hasPlaintextPacking.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 44), (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  return v6;
}

Swift::Void __swiftcall AspireSimilaritySimilarityClientConfig.clearPlaintextPacking()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v2 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireSimilaritySimilarityClientConfig.embeddingDimension.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t AspireSimilaritySimilarityClientConfig.embeddingDimension.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireSimilaritySimilarityClientConfig.embeddingDimension.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityClientConfig.galoisElts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireSimilaritySimilarityClientConfig.galoisElts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspireSimilaritySimilarityClientConfig.galoisElts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireSimilaritySimilarityClientConfig.similarityMetric.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AspireSimilaritySimilarityClientConfig.similarityMetric.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AspireSimilaritySimilarityClientConfig.similarityMetric.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityClientConfig.extraPlaintextModuli.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireSimilaritySimilarityClientConfig.extraPlaintextModuli.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*AspireSimilaritySimilarityClientConfig.extraPlaintextModuli.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityClientConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 36);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspireSimilaritySimilarityClientConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireSimilaritySimilarityClientConfig(0) + 36);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspireSimilaritySimilarityClientConfig.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityClientConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = v2;
  v3 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  UnknownStorage.init()();
  v4 = a1 + *(int *)(v3 + 40);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + *(int *)(v3 + 44);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AspireSimilaritySimilarityServerConfig.clientConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v7 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = v8;
  UnknownStorage.init()();
  v9 = a1 + *(int *)(v7 + 40);
  v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + *(int *)(v7 + 44);
  v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
}

uint64_t key path getter for AspireSimilaritySimilarityServerConfig.clientConfig : AspireSimilaritySimilarityServerConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v8 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = v9;
  UnknownStorage.init()();
  v10 = a2 + *(int *)(v8 + 40);
  v11 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a2 + *(int *)(v8 + 44);
  v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
}

uint64_t key path setter for AspireSimilaritySimilarityServerConfig.clientConfig : AspireSimilaritySimilarityServerConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  v8 = a2 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireSimilaritySimilarityServerConfig.clientConfig.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  v4 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspireSimilaritySimilarityServerConfig.clientConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[2] = 0;
    v11 = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v9 + 2) = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v9 + 3) = 0;
    *((_BYTE *)v9 + 32) = 1;
    *((_QWORD *)v9 + 5) = v11;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v6 + 40);
    v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = (char *)v9 + *(int *)(v6 + 44);
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  }
  return AspireSimilaritySimilarityServerConfig.clientConfig.modify;
}

void AspireSimilaritySimilarityServerConfig.clientConfig.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?, type metadata accessor for AspireSimilaritySimilarityClientConfig);
}

BOOL AspireSimilaritySimilarityServerConfig.hasClientConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v5 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  return v6;
}

Swift::Void __swiftcall AspireSimilaritySimilarityServerConfig.clearClientConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v2 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireSimilaritySimilarityServerConfig.dbPacking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path getter for AspireSimilaritySimilarityServerConfig.dbPacking : AspireSimilaritySimilarityServerConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path setter for AspireSimilaritySimilarityServerConfig.dbPacking : AspireSimilaritySimilarityServerConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = a2 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireSimilarityPlaintextPacking);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireSimilaritySimilarityServerConfig.dbPacking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireSimilarityPlaintextPacking);
  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspireSimilaritySimilarityServerConfig.dbPacking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AspireSimilaritySerializedCiphertextMatrix.packing.modify;
}

BOOL AspireSimilaritySimilarityServerConfig.hasDbPacking.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  return v6;
}

Swift::Void __swiftcall AspireSimilaritySimilarityServerConfig.clearDbPacking()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v2 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireSimilaritySimilarityServerConfig.parallel.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AspireSimilaritySimilarityServerConfig.parallel.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspireSimilaritySimilarityServerConfig.parallel.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityServerConfig.babyStep.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 32));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t AspireSimilaritySimilarityServerConfig.babyStep.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*AspireSimilaritySimilarityServerConfig.babyStep.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return AspireSimilaritySimilarityServerConfig.babyStep.modify;
}

uint64_t AspireSimilaritySimilarityServerConfig.babyStep.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result + *(int *)(result + 12);
  *(_DWORD *)v1 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

BOOL AspireSimilaritySimilarityServerConfig.hasBabyStep.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 32) + 4) & 1) == 0;
}

Swift::Void __swiftcall AspireSimilaritySimilarityServerConfig.clearBabyStep()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for AspireSimilaritySimilarityServerConfig(0) + 32);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t AspireSimilaritySimilarityServerConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireSimilaritySimilarityServerConfig, a1);
}

uint64_t AspireSimilaritySimilarityServerConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

uint64_t (*AspireSimilaritySimilarityServerConfig.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityServerConfig.init()@<X0>(_BYTE *a1@<X8>)
{
  int *v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t result;
  _BYTE *v8;

  *a1 = 0;
  v2 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  UnknownStorage.init()();
  v3 = &a1[v2[6]];
  v4 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &a1[v2[7]];
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = &a1[v2[8]];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  return result;
}

uint64_t (*AspireSimilaritySerializedProcessedSimilarityDb.plaintextMatrices.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.entryIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.entryIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AspireSimilaritySerializedProcessedSimilarityDb.entryIds.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireSimilaritySerializedProcessedSimilarityDb.entryMetadatas.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.serverConfig.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v7 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  *a1 = 0;
  UnknownStorage.init()();
  v8 = &a1[v7[6]];
  v9 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = &a1[v7[7]];
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = &a1[v7[8]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
}

uint64_t key path getter for AspireSimilaritySerializedProcessedSimilarityDb.serverConfig : AspireSimilaritySerializedProcessedSimilarityDb@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v8 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  *a2 = 0;
  UnknownStorage.init()();
  v9 = &a2[v8[6]];
  v10 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = &a2[v8[7]];
  v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = &a2[v8[8]];
  *(_DWORD *)v13 = 0;
  v13[4] = 1;
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
}

uint64_t key path setter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of SecretKey(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, a7);
  outlined init with take of SecretKey((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.serverConfig.setter(uint64_t a1)
{
  return AspireSimilaritySerializedCiphertextMatrix.packing.setter(a1, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.packing.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, a3);
  outlined init with take of SecretKey(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AspireSimilaritySerializedProcessedSimilarityDb.serverConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    UnknownStorage.init()();
    v11 = &v9[v6[6]];
    v12 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[7]];
    v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  }
  return AspireSimilaritySerializedProcessedSimilarityDb.serverConfig.modify;
}

void AspireSimilaritySerializedProcessedSimilarityDb.serverConfig.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

BOOL AspireSimilaritySerializedProcessedSimilarityDb.hasServerConfig.getter()
{
  return AspireSimilaritySerializedCiphertextMatrix.hasPacking.getter(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

Swift::Void __swiftcall AspireSimilaritySerializedProcessedSimilarityDb.clearServerConfig()()
{
  AspireSimilaritySerializedCiphertextMatrix.clearPacking()(type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, a1);
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t (*AspireSimilaritySerializedProcessedSimilarityDb.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  a1[2] = v2;
  v3 = type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 32);
  v5 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t (*AspireSimilaritySimilarityDbRow.entryID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityDbRow.entryMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t AspireSimilaritySimilarityDbRow.entryMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AspireSimilaritySimilarityDbRow.entryMetadata.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityDbRow.embedding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireSimilaritySimilarityDbRow.embedding.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AspireSimilaritySimilarityDbRow.embedding.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityDbRow.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireSimilaritySimilarityDbRow, a1);
}

uint64_t AspireSimilaritySimilarityDbRow.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilaritySimilarityDbRow);
}

uint64_t (*AspireSimilaritySimilarityDbRow.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySimilarityDbRow(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityDbRow.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0;
  v1 = MEMORY[0x24BEE4AF8];
  a1[2] = 0xC000000000000000;
  a1[3] = v1;
  type metadata accessor for AspireSimilaritySimilarityDbRow(0);
  return UnknownStorage.init()();
}

uint64_t AspireSimilaritySimilarityDb.rows.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireSimilaritySimilarityDb.rows.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AspireSimilaritySimilarityDb.rows.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityDb.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireSimilaritySimilarityDb, a1);
}

uint64_t AspireSimilaritySimilarityDb.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireSimilaritySimilarityDb);
}

uint64_t (*AspireSimilaritySimilarityDb.unknownFields.modify())()
{
  type metadata accessor for AspireSimilaritySimilarityDb(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilaritySimilarityDb.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AspireSimilaritySimilarityDb(0);
  return UnknownStorage.init()();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.inputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 24))
    v2 = *(_QWORD *)(v1 + 16);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.inputDatabase : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 24))
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.inputDatabase : AspireSimilarityPecPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.inputDatabase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspireSimilarityPecPreprocessDbArgs.inputDatabase.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 24))
  {
    v6 = *(_QWORD *)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 24);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.inputDatabase.modify;
}

void AspireSimilarityPecPreprocessDbArgs.inputDatabase.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 16) = v3;
    *(_QWORD *)(v14 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasInputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 24) != 0;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearInputDatabase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.outputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 40))
    v2 = *(_QWORD *)(v1 + 32);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.outputDatabase : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 40))
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.outputDatabase : AspireSimilarityPecPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 32) = v4;
  *(_QWORD *)(v8 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.outputDatabase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspireSimilarityPecPreprocessDbArgs.outputDatabase.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 40))
  {
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.outputDatabase.modify;
}

void AspireSimilarityPecPreprocessDbArgs.outputDatabase.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 32) = v3;
    *(_QWORD *)(v9 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 32) = v3;
    *(_QWORD *)(v14 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasOutputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 40) != 0;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearOutputDatabase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.outputServerConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 56))
    v2 = *(_QWORD *)(v1 + 48);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.outputServerConfig : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 56))
  {
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 56);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.outputServerConfig : AspireSimilarityPecPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 48) = v4;
  *(_QWORD *)(v8 + 56) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.outputServerConfig.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 48) = a1;
  *(_QWORD *)(v9 + 56) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspireSimilarityPecPreprocessDbArgs.outputServerConfig.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 56))
  {
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(_QWORD *)(v5 + 56);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.outputServerConfig.modify;
}

void AspireSimilarityPecPreprocessDbArgs.outputServerConfig.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 48) = v3;
    *(_QWORD *)(v9 + 56) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 48) = v3;
    *(_QWORD *)(v14 + 56) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasOutputServerConfig.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 56) != 0;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearOutputServerConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.inputServerConfig.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v7 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  *a1 = 0;
  UnknownStorage.init()();
  v8 = &a1[v7[6]];
  v9 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = &a1[v7[7]];
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = &a1[v7[8]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.inputServerConfig : AspireSimilarityPecPreprocessDbArgs(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v7;

  v2 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v4, v5);
  return AspireSimilarityPecPreprocessDbArgs.inputServerConfig.setter((uint64_t)v4);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.inputServerConfig.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v11 = (_QWORD *)swift_retain();
    v12 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v11);
    swift_release();
    *(_QWORD *)(v2 + v10) = v12;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of SecretKey(a1, (uint64_t)v9, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  v14 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of AspireSimilaritySimilarityServerConfig?((uint64_t)v9, (uint64_t)v7);
  v15 = v13
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, v15, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  swift_endAccess();
  return swift_release();
}

void (*AspireSimilarityPecPreprocessDbArgs.inputServerConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    UnknownStorage.init()();
    v11 = &v9[v6[6]];
    v12 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[7]];
    v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  }
  return AspireSimilarityPecPreprocessDbArgs.inputServerConfig.modify;
}

void AspireSimilarityPecPreprocessDbArgs.inputServerConfig.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v3, type metadata accessor for AspireSimilaritySimilarityServerConfig);
    AspireSimilarityPecPreprocessDbArgs.inputServerConfig.setter((uint64_t)v3);
    outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  }
  else
  {
    AspireSimilarityPecPreprocessDbArgs.inputServerConfig.setter(*(_QWORD *)(*(_QWORD *)a1 + 48));
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasInputServerConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v4, (uint64_t)v3, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v5 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  return v6;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearInputServerConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v1 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, v10, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  swift_endAccess();
  swift_release();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.entryID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.entryID.setter(uint64_t a1, uint64_t a2)
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.setter(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
}

void (*AspireSimilarityPecPreprocessDbArgs.entryID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.entryID.modify;
}

void AspireSimilarityPecPreprocessDbArgs.entryID.modify(uint64_t *a1, char a2)
{
  AspireSimilarityPecPreprocessDbArgs.entryID.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearEntryID()()
{
  AspireSimilarityPecPreprocessDbArgs.clearEntryID()(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.entryMetadataID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.entryID.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
                 + *a1);
  swift_beginAccess();
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (uint64_t *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
                 + *a2);
  swift_beginAccess();
  if (v4[1])
  {
    v5 = *v4;
    v6 = v4[1];
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a3 = v5;
  a3[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *a1;
  v7 = a1[1];
  v9 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v10 = (_QWORD *)swift_retain();
    v11 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v10);
    swift_release();
    *(_QWORD *)(a2 + v9) = v11;
    swift_release();
  }
  v12 = (_QWORD *)(*(_QWORD *)(a2 + v9) + *a5);
  swift_beginAccess();
  *v12 = v8;
  v12[1] = v7;
  return swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.entryMetadataID.setter(uint64_t a1, uint64_t a2)
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.setter(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.entryID.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = v3;
  v8 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    v10 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v5 + v8) = v10;
    swift_release();
  }
  v11 = (_QWORD *)(*(_QWORD *)(v5 + v8) + *a3);
  swift_beginAccess();
  *v11 = a1;
  v11[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*AspireSimilarityPecPreprocessDbArgs.entryMetadataID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.entryMetadataID.modify;
}

void AspireSimilarityPecPreprocessDbArgs.entryMetadataID.modify(uint64_t *a1, char a2)
{
  AspireSimilarityPecPreprocessDbArgs.entryID.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
}

void AspireSimilarityPecPreprocessDbArgs.entryID.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  v6 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v7 = *(int *)(v4 + 96);
      v8 = *(_QWORD *)(v4 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v9 = (_QWORD *)swift_retain();
      v10 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v9);
      swift_release();
      *(_QWORD *)(v8 + v7) = v10;
      swift_release();
    }
    v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *v11 = v5;
    v11[1] = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v12 = *(int *)(v4 + 96);
      v13 = *(_QWORD *)(v4 + 88);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v14 = (_QWORD *)swift_retain();
      v15 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v14);
      swift_release();
      *(_QWORD *)(v13 + v12) = v15;
      swift_release();
    }
    v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *v16 = v5;
    v16[1] = v6;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasEntryMetadataID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20)) + *a1;
  swift_beginAccess();
  return *(_QWORD *)(v2 + 8) != 0;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearEntryMetadataID()()
{
  AspireSimilarityPecPreprocessDbArgs.clearEntryID()(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.clearEntryID()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  v7 = (_QWORD *)(*(_QWORD *)(v3 + v4) + *a1);
  swift_beginAccess();
  *v7 = 0;
  v7[1] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.embeddingID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.embeddingID.setter(uint64_t a1, uint64_t a2)
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.setter(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
}

void (*AspireSimilarityPecPreprocessDbArgs.embeddingID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.embeddingID.modify;
}

void AspireSimilarityPecPreprocessDbArgs.embeddingID.modify(uint64_t *a1, char a2)
{
  AspireSimilarityPecPreprocessDbArgs.entryID.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasEmbeddingID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearEmbeddingID()()
{
  AspireSimilarityPecPreprocessDbArgs.clearEntryID()(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.shardID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.shardID.setter(uint64_t a1, uint64_t a2)
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.setter(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
}

void (*AspireSimilarityPecPreprocessDbArgs.shardID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.shardID.modify;
}

void AspireSimilarityPecPreprocessDbArgs.shardID.modify(uint64_t *a1, char a2)
{
  AspireSimilarityPecPreprocessDbArgs.entryID.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasShardID.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearShardID()()
{
  AspireSimilarityPecPreprocessDbArgs.clearEntryID()(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.predefinedEncryptionParameters.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.predefinedEncryptionParameters.setter(uint64_t a1, uint64_t a2)
{
  return AspireSimilarityPecPreprocessDbArgs.entryID.setter(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
}

void (*AspireSimilarityPecPreprocessDbArgs.predefinedEncryptionParameters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.predefinedEncryptionParameters.modify;
}

void AspireSimilarityPecPreprocessDbArgs.predefinedEncryptionParameters.modify(uint64_t *a1, char a2)
{
  AspireSimilarityPecPreprocessDbArgs.entryID.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasPredefinedEncryptionParameters.getter()
{
  return AspireSimilarityPecPreprocessDbArgs.hasEntryID.getter(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearPredefinedEncryptionParameters()()
{
  AspireSimilarityPecPreprocessDbArgs.clearEntryID()(&OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.heScheme.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v3 + 9) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = *(_QWORD *)v3;
    v6 = *(_BYTE *)(v3 + 8) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.heScheme : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  result = swift_beginAccess();
  v5 = *(_QWORD *)v3;
  v6 = *(_BYTE *)(v3 + 8);
  v7 = *(_BYTE *)(v3 + 9);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.heScheme : AspireSimilarityPecPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  result = swift_beginAccess();
  *(_QWORD *)v8 = v3;
  *(_BYTE *)(v8 + 8) = v4;
  *(_BYTE *)(v8 + 9) = 0;
  return result;
}

uint64_t AspireSimilarityPecPreprocessDbArgs.heScheme.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = v1;
  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v5)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  result = swift_beginAccess();
  *(_QWORD *)v8 = v3;
  *(_BYTE *)(v8 + 8) = v4;
  *(_BYTE *)(v8 + 9) = 0;
  return result;
}

void (*AspireSimilarityPecPreprocessDbArgs.heScheme.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  swift_beginAccess();
  if ((*(_BYTE *)(v5 + 9) & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v6 = *(_QWORD *)v5;
    v7 = *(_BYTE *)(v5 + 8) & 1;
  }
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = v7;
  return AspireSimilarityPecPreprocessDbArgs.heScheme.modify;
}

void AspireSimilarityPecPreprocessDbArgs.heScheme.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    v10 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v8 + v7) = v10;
    swift_release();
  }
LABEL_4:
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  swift_beginAccess();
  *(_QWORD *)v11 = v4;
  *(_BYTE *)(v11 + 8) = v5;
  *(_BYTE *)(v11 + 9) = 0;
  free((void *)v3);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasHeScheme.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 9) & 1) == 0;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearHeScheme()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  swift_beginAccess();
  *(_QWORD *)v5 = 0;
  *(_WORD *)(v5 + 8) = 256;
}

uint64_t AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli.getter()
{
  type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli : AspireSimilarityPecPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = (_QWORD *)(*(_QWORD *)(a2 + v4)
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
  swift_beginAccess();
  *v7 = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = (_QWORD *)(*(_QWORD *)(v2 + v4)
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
  swift_beginAccess();
  *v7 = a1;
  return swift_bridgeObjectRelease();
}

void (*AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli.modify;
}

void AspireSimilarityPecPreprocessDbArgs.extraPlaintextModuli.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v6 = (_QWORD *)swift_retain();
      v7 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v6);
      swift_release();
      *(_QWORD *)(v5 + v4) = v7;
      swift_release();
    }
    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
    swift_beginAccess();
    *v8 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 80);
      type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      v12 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
      *(_QWORD *)(v10 + v9) = v12;
      swift_release();
    }
    v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
    swift_beginAccess();
    *v13 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t AspireSimilarityPecPreprocessDbArgs.babyStep.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep);
  swift_beginAccess();
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t key path getter for AspireSimilarityPecPreprocessDbArgs.babyStep : AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  result = swift_beginAccess();
  v5 = *(_DWORD *)v3;
  if (*(_BYTE *)(v3 + 4))
    v5 = 0;
  *a2 = v5;
  return result;
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.babyStep : AspireSimilarityPecPreprocessDbArgs(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v4)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  result = swift_beginAccess();
  *(_DWORD *)v7 = v3;
  *(_BYTE *)(v7 + 4) = 0;
  return result;
}

uint64_t AspireSimilarityPecPreprocessDbArgs.babyStep.setter(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  result = swift_beginAccess();
  *(_DWORD *)v7 = a1;
  *(_BYTE *)(v7 + 4) = 0;
  return result;
}

void (*AspireSimilarityPecPreprocessDbArgs.babyStep.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return AspireSimilarityPecPreprocessDbArgs.babyStep.modify;
}

void AspireSimilarityPecPreprocessDbArgs.babyStep.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    v9 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  swift_beginAccess();
  *(_DWORD *)v10 = v4;
  *(_BYTE *)(v10 + 4) = 0;
  free((void *)v3);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasBabyStep.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 4) & 1) == 0;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearBabyStep()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2)
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  swift_beginAccess();
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
}

uint64_t AspireSimilarityPecPreprocessDbArgs.parallel.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  swift_beginAccess();
  return *v1 & 1;
}

uint64_t key path setter for AspireSimilarityPecPreprocessDbArgs.parallel : AspireSimilarityPecPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = (_BYTE *)(*(_QWORD *)(a2 + v4)
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  result = swift_beginAccess();
  *v7 = v3;
  return result;
}

uint64_t AspireSimilarityPecPreprocessDbArgs.parallel.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = a1 & 1;
  v8 = (_BYTE *)(*(_QWORD *)(v2 + v4)
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  result = swift_beginAccess();
  *v8 = v7;
  return result;
}

void (*AspireSimilarityPecPreprocessDbArgs.parallel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return AspireSimilarityPecPreprocessDbArgs.parallel.modify;
}

void AspireSimilarityPecPreprocessDbArgs.parallel.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    v9 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL AspireSimilarityPecPreprocessDbArgs.hasParallel.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
                         + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  swift_beginAccess();
  return *v1 != 2;
}

Swift::Void __swiftcall AspireSimilarityPecPreprocessDbArgs.clearParallel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t (*AspireSimilarityPecPreprocessDbArgs.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireSimilarityPecPreprocessDbArgs.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static AspireSimilarityPecPreprocessDbArgs._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t static AspireSimilaritySimilarityMetric._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityMetric._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySimilarityMetric@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityMetric._protobuf_nameMap, a1);
}

unint64_t static AspireSimilarityPlaintextPacking.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t static AspireSimilarityPlaintextPacking._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPacking._protobuf_nameMap, a1);
}

uint64_t AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        closure #1 in AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireSimilarityPlaintextPackingDenseRow(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseRow?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireSimilarityPlaintextPackingDiagonal(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDiagonal?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilarityPlaintextPackingDenseColumn?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AspireSimilarityPlaintextPacking.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_8;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      closure #2 in AspireSimilarityPlaintextPacking.traverse<A>(visitor:)(v0);
    else
      closure #3 in AspireSimilarityPlaintextPacking.traverse<A>(visitor:)(v0);
  }
  else
  {
    closure #1 in AspireSimilarityPlaintextPacking.traverse<A>(visitor:)(v0);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AspireSimilarityPlaintextPacking(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireSimilarityPlaintextPacking.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireSimilarityPlaintextPackingDenseRow(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireSimilarityPlaintextPacking.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireSimilarityPlaintextPackingDiagonal(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  __break(1u);
  return result;
}

uint64_t closure #3 in AspireSimilarityPlaintextPacking.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  __break(1u);
  return result;
}

Swift::Int AspireSimilarityPlaintextPacking.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilarityPlaintextPacking, &lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilarityPlaintextPacking@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilarityPlaintextPacking()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilarityPlaintextPacking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilarityPlaintextPacking.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilarityPlaintextPacking()
{
  return AspireSimilarityPlaintextPacking.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilarityPlaintextPacking()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilarityPlaintextPacking@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPacking._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilarityPlaintextPacking()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilarityPlaintextPacking()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  return Message.hash(into:)();
}

unint64_t static AspireSimilarityPlaintextPackingDenseRow.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static AspireSimilarityPlaintextPackingDenseRow._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPackingDenseRow._protobuf_nameMap, a1);
}

uint64_t AspireSimilarityPlaintextPackingDenseRow.decodeMessage<A>(decoder:)()
{
  return AspireSimilarityPlaintextPackingDenseRow.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t AspireSimilarityPlaintextPackingDenseRow.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int AspireSimilarityPlaintextPackingDenseRow.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, &lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilarityPlaintextPackingDenseRow()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilarityPlaintextPackingDenseRow()
{
  return AspireSimilarityPlaintextPackingDenseRow.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilarityPlaintextPackingDenseRow()
{
  return AspireSimilarityPlaintextPackingDenseRow.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilarityPlaintextPackingDenseRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilarityPlaintextPackingDenseRow@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPackingDenseRow._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilarityPlaintextPackingDenseRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilarityPlaintextPackingDenseRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
  return Message.hash(into:)();
}

unint64_t static AspireSimilarityPlaintextPackingDiagonal.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static AspireSimilarityPlaintextPackingDiagonal._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPackingDiagonal._protobuf_nameMap, a1);
}

uint64_t AspireSimilarityPlaintextPackingDiagonal.decodeMessage<A>(decoder:)()
{
  return AspireSimilarityPlaintextPackingDenseRow.decodeMessage<A>(decoder:)();
}

Swift::Int AspireSimilarityPlaintextPackingDiagonal.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, &lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilarityPlaintextPackingDiagonal()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilarityPlaintextPackingDiagonal()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilarityPlaintextPackingDiagonal@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPackingDiagonal._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilarityPlaintextPackingDiagonal()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilarityPlaintextPackingDiagonal()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
  return Message.hash(into:)();
}

unint64_t static AspireSimilarityPlaintextPackingDenseColumn.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t static AspireSimilarityPlaintextPackingDenseColumn._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPackingDenseColumn._protobuf_nameMap, a1);
}

uint64_t AspireSimilarityPlaintextPackingDenseColumn.decodeMessage<A>(decoder:)()
{
  return AspireSimilarityPlaintextPackingDenseRow.decodeMessage<A>(decoder:)();
}

Swift::Int AspireSimilarityPlaintextPackingDenseColumn.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, &lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilarityPlaintextPackingDenseColumn()
{
  return 0xD00000000000002DLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilarityPlaintextPackingDenseColumn()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilarityPlaintextPackingDenseColumn@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPlaintextPackingDenseColumn._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilarityPlaintextPackingDenseColumn()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilarityPlaintextPackingDenseColumn()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
  return Message.hash(into:)();
}

unint64_t static AspireSimilaritySerializedCiphertextMatrix.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireHeSerializedCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext, (void (*)(_QWORD))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireHeSerializedCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t static AspireSimilaritySerializedCiphertextMatrix.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireSimilaritySerializedDcrtPlaintextMatrix.== infix(_:_:)(a1, a2, (char *)specialized static Array<A>.== infix(_:_:), (uint64_t)type metadata accessor for AspireSimilaritySerializedCiphertextMatrix) & 1;
}

Swift::Int AspireSimilaritySerializedCiphertextMatrix.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, &lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySerializedCiphertextMatrix()
{
  return 0xD00000000000002CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySerializedCiphertextMatrix()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySerializedCiphertextMatrix@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySerializedCiphertextMatrix()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySerializedCiphertextMatrix()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
  return Message.hash(into:)();
}

unint64_t static AspireSimilaritySerializedDcrtPlaintextMatrix.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireHeSerializedDcrtPlaintext, &lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext, (void (*)(_QWORD))type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;
  char v18;

  v13 = v7;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v8)
  {
    while ((v18 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
          a4(0);
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a5, a4, a6);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 4:
          closure #4 in AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a7, type metadata accessor for AspireSimilarityPlaintextPacking, &lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireSimilaritySerializedDcrtPlaintextMatrix.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireHeSerializedDcrtPlaintext, &lazy protocol witness table cache variable for type AspireHeSerializedDcrtPlaintext and conformance AspireHeSerializedDcrtPlaintext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedDcrtPlaintext, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;

  v13 = v7;
  if (!*(_DWORD *)v13 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v8))
  {
    if (!*(_DWORD *)(v13 + 4)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v8))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v13 + 8) + 16)
        || (a4(0),
            lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a5, a4, a6),
            result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
            !v8))
      {
        result = closure #1 in AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(v13, a1, a2, a3, a7);
        if (!v8)
        {
          a7(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AspireSimilaritySerializedCiphertextMatrix.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v14 + 32), (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t static AspireSimilaritySerializedDcrtPlaintextMatrix.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireSimilaritySerializedDcrtPlaintextMatrix.== infix(_:_:)(a1, a2, (char *)specialized static Array<A>.== infix(_:_:), (uint64_t)type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix) & 1;
}

Swift::Int AspireSimilaritySerializedDcrtPlaintextMatrix.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, &lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilaritySerializedCiphertextMatrix@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return 0xD00000000000002FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySerializedDcrtPlaintextMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedDcrtPlaintextMatrix.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySerializedDcrtPlaintextMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedDcrtPlaintextMatrix.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySerializedDcrtPlaintextMatrix@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireSimilaritySerializedDcrtPlaintextMatrix(uint64_t a1, uint64_t a2)
{
  return specialized static AspireSimilaritySerializedDcrtPlaintextMatrix.== infix(_:_:)(a1, a2, (char *)specialized static Array<A>.== infix(_:_:), (uint64_t)type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix) & 1;
}

unint64_t static AspireSimilaritySimilarityClientConfig.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t static AspireSimilaritySimilarityClientConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityClientConfig._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySimilarityClientConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AspireSimilaritySimilarityClientConfig.decodeMessage<A>(decoder:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 3:
          closure #3 in AspireSimilaritySimilarityClientConfig.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 6:
          lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireSimilaritySimilarityClientConfig.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  type metadata accessor for AspireHeEncryptionParameters(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AspireSimilaritySimilarityClientConfig.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  type metadata accessor for AspireSimilarityPlaintextPacking(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireSimilaritySimilarityClientConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireSimilaritySimilarityClientConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)v3)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    closure #2 in AspireSimilaritySimilarityClientConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_DWORD *)(v3 + 8))
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
      dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v3 + 32) & 1) == 0 && *(_QWORD *)(v3 + 24))
    {
      lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 16))
      dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
    type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireSimilaritySimilarityClientConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in AspireSimilaritySimilarityClientConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 44), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
}

Swift::Int AspireSimilaritySimilarityClientConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySimilarityClientConfig, &lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilaritySimilarityClientConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = v4;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 40);
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(a1 + 44);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySimilarityClientConfig()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySimilarityClientConfig()
{
  return AspireSimilaritySimilarityClientConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySimilarityClientConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySimilarityClientConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySimilarityClientConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityClientConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySimilarityClientConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySimilarityClientConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
  return Message.hash(into:)();
}

unint64_t static AspireSimilaritySimilarityServerConfig.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t static AspireSimilaritySimilarityServerConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityServerConfig._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySimilarityServerConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          closure #1 in AspireSimilaritySimilarityServerConfig.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          closure #2 in AspireSimilaritySimilarityServerConfig.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireSimilaritySimilarityServerConfig.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AspireSimilaritySimilarityServerConfig.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  type metadata accessor for AspireSimilarityPlaintextPacking(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (*v3 == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #3 in AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)((uint64_t)v3);
    type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilaritySimilarityClientConfig);
}

uint64_t closure #2 in AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t closure #3 in AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

Swift::Int AspireSimilaritySimilarityServerConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySimilarityServerConfig, &lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilaritySimilarityServerConfig@<X0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  _BYTE *v9;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = &a2[a1[6]];
  v5 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = &a2[a1[7]];
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = &a2[a1[8]];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySimilarityServerConfig()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySimilarityServerConfig()
{
  return AspireSimilaritySimilarityServerConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySimilarityServerConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySimilarityServerConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySimilarityServerConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySimilarityServerConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityServerConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySimilarityServerConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySimilarityServerConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
  return Message.hash(into:)();
}

unint64_t static AspireSimilaritySerializedProcessedSimilarityDb.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(0);
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          goto LABEL_5;
        case 4:
          v12 = v11;
          closure #4 in AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySimilarityServerConfig, &lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in AspireSimilaritySerializedCiphertextMatrix.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireSimilaritySerializedProcessedSimilarityDb.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = v3;
  if (!*(_QWORD *)(*v5 + 16)
    || (type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5[1] + 16)
      || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_QWORD *)(v5[2] + 16)
        || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v4))
      {
        result = closure #1 in AspireSimilaritySerializedProcessedSimilarityDb.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AspireSimilaritySerializedProcessedSimilarityDb.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

Swift::Int AspireSimilaritySerializedProcessedSimilarityDb.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, &lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilaritySerializedProcessedSimilarityDb@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  a2[2] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 32);
  v6 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySerializedProcessedSimilarityDb()
{
  return 0xD000000000000031;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySerializedProcessedSimilarityDb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedProcessedSimilarityDb.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySerializedProcessedSimilarityDb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilaritySerializedProcessedSimilarityDb.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySerializedProcessedSimilarityDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySerializedProcessedSimilarityDb@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySerializedProcessedSimilarityDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySerializedProcessedSimilarityDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
  return Message.hash(into:)();
}

unint64_t static AspireSimilaritySimilarityDbRow.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t static AspireSimilaritySimilarityDbRow._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityDbRow._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySimilarityDbRow.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireSimilaritySimilarityDbRow.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

Swift::Int AspireSimilaritySimilarityDbRow.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySimilarityDbRow, &lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilaritySimilarityDbRow@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0;
  v1 = MEMORY[0x24BEE4AF8];
  a1[2] = 0xC000000000000000;
  a1[3] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySimilarityDbRow()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySimilarityDbRow()
{
  return AspireSimilaritySimilarityDbRow.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySimilarityDbRow()
{
  return AspireSimilaritySimilarityDbRow.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySimilarityDbRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySimilarityDbRow@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityDbRow._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySimilarityDbRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySimilarityDbRow()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
  return Message.hash(into:)();
}

unint64_t static AspireSimilaritySimilarityDb.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static AspireSimilaritySimilarityDb._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityDb._protobuf_nameMap, a1);
}

uint64_t AspireSimilaritySimilarityDb.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for AspireSimilaritySimilarityDbRow(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireSimilaritySimilarityDb.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for AspireSimilaritySimilarityDbRow(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireSimilaritySimilarityDb(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AspireSimilaritySimilarityDb.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilaritySimilarityDb, &lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilaritySimilarityDb()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilaritySimilarityDb()
{
  return AspireSimilaritySimilarityDb.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilaritySimilarityDb()
{
  return AspireSimilaritySimilarityDb.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilaritySimilarityDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilaritySimilarityDb@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilaritySimilarityDb._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilaritySimilarityDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilaritySimilarityDb()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
  return Message.hash(into:)();
}

unint64_t static AspireSimilarityPecPreprocessDbArgs.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap, a1);
}

_OWORD *one-time initialization function for defaultInstance()
{
  _OWORD *result;

  type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
  swift_allocObject();
  result = AspireSimilarityPecPreprocessDbArgs._StorageClass.init()();
  static AspireSimilarityPecPreprocessDbArgs._StorageClass.defaultInstance = (uint64_t)result;
  return result;
}

_OWORD *AspireSimilarityPecPreprocessDbArgs._StorageClass.init()()
{
  _OWORD *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  char *v9;

  v0[2] = 0u;
  v0[3] = 0u;
  v0[1] = 0u;
  v1 = (char *)v0
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  v2 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
  *v7 = 0;
  v7[1] = 0;
  v8 = (char *)v0
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 256;
  *(_QWORD *)((char *)v0
            + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli) = MEMORY[0x24BEE4AF8];
  v9 = (char *)v0
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  *((_BYTE *)v0
  + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel) = 2;
  return v0;
}

uint64_t AspireSimilarityPecPreprocessDbArgs._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0+ OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AspireSimilarityPecPreprocessDbArgs._StorageClass.__deallocating_deinit()
{
  AspireSimilarityPecPreprocessDbArgs._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  swift_retain();
  closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0);
  v7 = swift_retain();
  closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = closure #1 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
  if (!v4)
  {
    closure #2 in closure #1 in AspirePirPirPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1);
    closure #4 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
    closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
    closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
    closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
    closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
    closure #10 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1);
    v10 = a1
        + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v10 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #11 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1);
    return closure #12 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1);
  }
  return result;
}

uint64_t closure #3 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 56))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #4 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

uint64_t closure #5 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #10 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type AspireHeHeScheme and conformance AspireHeHeScheme();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #11 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #12 in closure #1 in AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(a1
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  result = swift_beginAccess();
  if (*v1 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #1 in static AspireSimilarityPecPreprocessDbArgs.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char v67;
  char *v68;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD **v71;
  char *v72;
  int v73;
  char v74;
  char *v75;
  uint64_t v76;
  BOOL v77;
  unsigned __int8 *v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  _QWORD *v84;

  v4 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v82 = (unsigned __int8 *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySimilarityServerConfig?, AspireSimilaritySimilarityServerConfig?));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v83 = (unsigned __int8 *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v82 - v13;
  swift_beginAccess();
  v16 = a1[2];
  v15 = a1[3];
  swift_beginAccess();
  v84 = a2;
  v17 = a2[3];
  if (!v15)
  {
    if (v17)
      return 0;
    goto LABEL_8;
  }
  if (!v17)
    return 0;
  if (v16 == v84[2] && v15 == v17
    || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v18 & 1) != 0))
  {
LABEL_8:
    swift_beginAccess();
    v20 = a1[4];
    v21 = a1[5];
    v22 = v84;
    swift_beginAccess();
    v23 = v22[5];
    if (v21)
    {
      if (!v23)
        return 0;
      if (v20 != v84[4] || v21 != v23)
      {
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v24 & 1) == 0)
          return result;
      }
    }
    else if (v23)
    {
      return 0;
    }
    swift_beginAccess();
    v25 = a1[6];
    v26 = a1[7];
    v27 = v84;
    swift_beginAccess();
    v28 = v27[7];
    if (v26)
    {
      if (v28)
      {
        if (v25 != v84[6] || v26 != v28)
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v29 & 1) == 0)
            return result;
        }
LABEL_22:
        v30 = (uint64_t)a1
            + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
        swift_beginAccess();
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v30, (uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
        v31 = v84;
        v32 = (uint64_t)v84
            + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
        swift_beginAccess();
        v33 = (uint64_t)&v9[*(int *)(v7 + 48)];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, (uint64_t)v9, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v32, v33, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
        v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v34((uint64_t)v9, 1, v4) == 1)
        {
          swift_retain();
          swift_retain();
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
          v35 = v34(v33, 1, v4);
          v36 = v31;
          if (v35 == 1)
          {
            outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
LABEL_31:
            v40 = (_QWORD *)((char *)a1
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
            swift_beginAccess();
            v41 = *v40;
            v42 = v40[1];
            v43 = (_QWORD *)((char *)v36
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
            swift_beginAccess();
            v44 = v43[1];
            if (v42)
            {
              if (!v44 || (v41 != *v43 || v42 != v44) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_28;
            }
            else if (v44)
            {
              goto LABEL_28;
            }
            v45 = (_QWORD *)((char *)a1
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
            swift_beginAccess();
            v46 = *v45;
            v47 = v45[1];
            v48 = (_QWORD *)((char *)v36
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
            swift_beginAccess();
            v49 = v48[1];
            if (v47)
            {
              if (!v49 || (v46 != *v48 || v47 != v49) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_28;
            }
            else if (v49)
            {
              goto LABEL_28;
            }
            v50 = (_QWORD *)((char *)a1
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
            swift_beginAccess();
            v51 = *v50;
            v52 = v50[1];
            v53 = (_QWORD *)((char *)v36
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
            swift_beginAccess();
            v54 = v53[1];
            if (v52)
            {
              if (!v54 || (v51 != *v53 || v52 != v54) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_28;
            }
            else if (v54)
            {
              goto LABEL_28;
            }
            v55 = (_QWORD *)((char *)a1
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
            swift_beginAccess();
            v56 = *v55;
            v57 = v55[1];
            v58 = (_QWORD *)((char *)v36
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
            swift_beginAccess();
            v59 = v58[1];
            if (v57)
            {
              if (!v59 || (v56 != *v58 || v57 != v59) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_28;
            }
            else if (v59)
            {
              goto LABEL_28;
            }
            v60 = (_QWORD *)((char *)a1
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
            swift_beginAccess();
            v61 = *v60;
            v62 = v60[1];
            v63 = (_QWORD *)((char *)v36
                           + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
            swift_beginAccess();
            v64 = v63[1];
            if (v62)
            {
              if (!v64 || (v61 != *v63 || v62 != v64) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_28;
            }
            else if (v64)
            {
              goto LABEL_28;
            }
            v65 = (char *)a1
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
            swift_beginAccess();
            v66 = *(_QWORD *)v65;
            v67 = v65[9];
            v68 = (char *)v36
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
            swift_beginAccess();
            if ((v67 & 1) != 0)
            {
              if ((v68[9] & 1) == 0)
                goto LABEL_28;
            }
            else
            {
              if ((v68[9] & 1) != 0)
                goto LABEL_28;
              v76 = *(_QWORD *)v68;
              if ((v68[8] & 1) != 0)
              {
                if (v76)
                {
                  if (v76 == 1)
                    v77 = v66 == 1;
                  else
                    v77 = v66 == 2;
                  v36 = v84;
                  if (!v77)
                    goto LABEL_28;
                }
                else
                {
                  v36 = v84;
                  if (v66)
                    goto LABEL_28;
                }
              }
              else if (v66 != v76)
              {
                goto LABEL_28;
              }
            }
            v69 = (_QWORD **)((char *)a1
                            + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
            swift_beginAccess();
            v70 = *v69;
            v71 = (_QWORD **)((char *)v36
                            + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
            swift_beginAccess();
            if (specialized static Array<A>.== infix(_:_:)(v70, *v71))
            {
              v72 = (char *)a1
                  + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
              swift_beginAccess();
              v73 = *(_DWORD *)v72;
              v74 = v72[4];
              v75 = (char *)v36
                  + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
              swift_beginAccess();
              if ((v74 & 1) != 0)
              {
                if ((v75[4] & 1) == 0)
                  goto LABEL_28;
              }
              else if ((v75[4] & 1) != 0 || v73 != *(_DWORD *)v75)
              {
                goto LABEL_28;
              }
              v78 = (unsigned __int8 *)a1
                  + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel;
              swift_beginAccess();
              v79 = *v78;
              swift_release();
              v80 = (unsigned __int8 *)v84
                  + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel;
              swift_beginAccess();
              v81 = *v80;
              swift_release();
              if (v79 == 2)
              {
                if (v81 != 2)
                  return 0;
              }
              else if (v81 == 2 || ((((v81 & 1) == 0) ^ v79) & 1) == 0)
              {
                return 0;
              }
              return 1;
            }
LABEL_28:
            swift_release();
            swift_release();
            return 0;
          }
        }
        else
        {
          v37 = v83;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, (uint64_t)v83, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
          if (v34(v33, 1, v4) != 1)
          {
            v38 = v82;
            outlined init with take of SecretKey(v33, (uint64_t)v82, type metadata accessor for AspireSimilaritySimilarityServerConfig);
            swift_retain();
            v36 = v84;
            swift_retain();
            v39 = specialized static AspireSimilaritySimilarityServerConfig.== infix(_:_:)(v37, v38);
            outlined destroy of AspireApiPECConfig((uint64_t)v38, type metadata accessor for AspireSimilaritySimilarityServerConfig);
            outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
            outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireSimilaritySimilarityServerConfig);
            outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
            if ((v39 & 1) == 0)
              goto LABEL_28;
            goto LABEL_31;
          }
          swift_retain();
          swift_retain();
          outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
          outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireSimilaritySimilarityServerConfig);
        }
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for (AspireSimilaritySimilarityServerConfig?, AspireSimilaritySimilarityServerConfig?));
        goto LABEL_28;
      }
    }
    else if (!v28)
    {
      goto LABEL_22;
    }
    return 0;
  }
  return result;
}

Swift::Int AspireSimilarityPecPreprocessDbArgs.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireSimilarityPecPreprocessDbArgs, &lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
}

uint64_t protocol witness for Message.init() in conformance AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static AspireSimilarityPecPreprocessDbArgs._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireSimilarityPecPreprocessDbArgs()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireSimilarityPecPreprocessDbArgs()
{
  return AspireSimilarityPecPreprocessDbArgs.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireSimilarityPecPreprocessDbArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireSimilarityPecPreprocessDbArgs.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireSimilarityPecPreprocessDbArgs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireSimilarityPecPreprocessDbArgs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireSimilarityPecPreprocessDbArgs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireSimilarityPecPreprocessDbArgs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
  return Message.hash(into:)();
}

uint64_t closure #1 in closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, BOOL *a4@<X8>)
{
  if (__s1)
  {
    if (__s2)
    {
      __s2 = memcmp(__s1, (const void *)__s2, a3 - __s2);
      *a4 = (_DWORD)__s2 == 0;
      return __s2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return __s2;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static AspireSimilarityPecPreprocessDbArgs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20);
  v12 = *(_QWORD **)(a1 + v11);
  v13 = *(_QWORD **)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static AspireSimilarityPecPreprocessDbArgs.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static AspireSimilaritySerializedCiphertextMatrix.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AspireSimilaritySerializedDcrtPlaintextMatrix.== infix(_:_:)(a1, a2, (char *)specialized static Array<A>.== infix(_:_:), (uint64_t)type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t specialized static AspireSimilaritySerializedDcrtPlaintextMatrix.== infix(_:_:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v52 = a4;
  v53 = a3;
  v51 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v51 - 8);
  v6 = MEMORY[0x24BDAC7A8](v51);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v44 - v9;
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v44 - v21;
  MEMORY[0x24BDAC7A8](v20);
  if (*(_DWORD *)a1 != *(_DWORD *)v24)
    goto LABEL_10;
  v46 = v14;
  v47 = v10;
  v49 = v5;
  v50 = v17;
  v48 = v8;
  if (*(_DWORD *)(a1 + 4) != *((_DWORD *)v24 + 1))
    goto LABEL_10;
  v44 = v25;
  v45 = (uint64_t)&v44 - v23;
  v26 = v24;
  if ((((uint64_t (*)(_QWORD, _QWORD))v53)(*(_QWORD *)(a1 + 8), *((_QWORD *)v24 + 1)) & 1) == 0)
    goto LABEL_10;
  v27 = ((uint64_t (*)(_QWORD))v52)(0);
  v28 = v45;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v27 + 32), v45, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v52 = v27;
  v53 = v26;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v26[*(int *)(v27 + 32)], (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v29 = (uint64_t)v50;
  v30 = (uint64_t)&v50[*(int *)(v15 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v28, (uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, v30, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v31(v29, 1, v11) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v31(v30, 1, v11) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
LABEL_13:
      v38 = v51;
      v37 = v52;
      v39 = v49;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
      v41 = v47;
      v40(v47, a1 + *(int *)(v52 + 28), v51);
      v42 = v48;
      v40(v48, (uint64_t)&v53[*(int *)(v37 + 28)], v38);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v38);
      v43(v41, v38);
      return v33 & 1;
    }
    goto LABEL_9;
  }
  v32 = v44;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29, v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v31(v30, 1, v11) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AspireApiPECConfig(v32, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_9:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
    goto LABEL_10;
  }
  v35 = (uint64_t)v46;
  outlined init with take of SecretKey(v30, (uint64_t)v46, type metadata accessor for AspireSimilarityPlaintextPacking);
  v36 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v32, v35);
  outlined destroy of AspireApiPECConfig(v35, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AspireApiPECConfig(v32, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((v36 & 1) != 0)
    goto LABEL_13;
LABEL_10:
  v33 = 0;
  return v33 & 1;
}

uint64_t specialized static AspireSimilaritySerializedProcessedSimilarityDb.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v33;
  char v34;
  unsigned __int8 *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;

  v58 = a2;
  v54 = type metadata accessor for UnknownStorage();
  v57 = *(_QWORD *)(v54 - 8);
  v3 = MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)&v47 - v5;
  v6 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (unsigned __int8 *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySimilarityServerConfig?, AspireSimilaritySimilarityServerConfig?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (unsigned __int8 *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v47 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v47 - v20;
  v22 = a1;
  v23 = *a1;
  v24 = v58;
  if ((specialized static Array<A>.== infix(_:_:)(v23, *v58) & 1) == 0)
    goto LABEL_10;
  v49 = v16;
  v50 = v10;
  v52 = v19;
  v53 = v21;
  v48 = v9;
  v51 = v12;
  if (!specialized static Array<A>.== infix(_:_:)((_QWORD *)v22[1], (_QWORD *)v24[1]))
    goto LABEL_10;
  v25 = v24;
  v26 = v22;
  if ((specialized static Array<A>.== infix(_:_:)(v22[2], v24[2]) & 1) == 0)
    goto LABEL_10;
  v27 = type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(0);
  v28 = (uint64_t)v53;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26 + *(int *)(v27 + 32), (uint64_t)v53, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v29 = (uint64_t)v52;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24 + *(int *)(v27 + 32), (uint64_t)v52, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v30 = (uint64_t)v51;
  v31 = (uint64_t)&v51[*(int *)(v50 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v28, (uint64_t)v51, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v29, v31, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v32(v30, 1, v6) == 1)
  {
    v50 = v27;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    if (v32(v31, 1, v6) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
LABEL_13:
      v38 = v50;
      v39 = (uint64_t)v26 + *(int *)(v50 + 28);
      v40 = v25;
      v41 = v57;
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
      v43 = v54;
      v44 = v55;
      v42(v55, v39, v54);
      v45 = v56;
      v42(v56, (uint64_t)v40 + *(int *)(v38 + 28), v43);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v46 = *(void (**)(char *, uint64_t))(v41 + 8);
      v46(v45, v43);
      v46(v44, v43);
      return v34 & 1;
    }
    goto LABEL_9;
  }
  v33 = v49;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v30, (uint64_t)v49, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  if (v32(v31, 1, v6) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v52, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v53, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    outlined destroy of AspireApiPECConfig((uint64_t)v33, type metadata accessor for AspireSimilaritySimilarityServerConfig);
LABEL_9:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for (AspireSimilaritySimilarityServerConfig?, AspireSimilaritySimilarityServerConfig?));
    goto LABEL_10;
  }
  v50 = v27;
  v36 = v48;
  outlined init with take of SecretKey(v31, (uint64_t)v48, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  v37 = specialized static AspireSimilaritySimilarityServerConfig.== infix(_:_:)(v33, v36);
  outlined destroy of AspireApiPECConfig((uint64_t)v36, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v52, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v53, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  outlined destroy of AspireApiPECConfig((uint64_t)v33, type metadata accessor for AspireSimilaritySimilarityServerConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  if ((v37 & 1) != 0)
    goto LABEL_13;
LABEL_10:
  v34 = 0;
  return v34 & 1;
}

uint64_t specialized static AspireSimilaritySimilarityDbRow.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *(_QWORD *)a2
    && (specialized static Data.== infix(_:_:)(a1[1], a1[2]), (v11 & 1) != 0)
    && specialized static Array<A>.== infix(_:_:)(a1[3], *((_QWORD *)a2 + 3)))
  {
    v12 = type metadata accessor for AspireSimilaritySimilarityDbRow(0);
    v13 = (char *)a1 + *(int *)(v12 + 28);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 28)], v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AspireSimilaritySimilarityDb.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v11 = type metadata accessor for AspireSimilaritySimilarityDb(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn(0);
  MEMORY[0x24BDAC7A8](v4);
  v37 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireSimilarityPlaintextPackingDiagonal(0);
  MEMORY[0x24BDAC7A8](v6);
  v36 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilarityPlaintextPackingDenseRow(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v36 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType));
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  outlined init with copy of SecretKey(a2, v24, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of SecretKey((uint64_t)v23, (uint64_t)v17, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v26 = type metadata accessor for AspireSimilarityPlaintextPackingDiagonal;
        v27 = v24;
        v28 = v36;
        outlined init with take of SecretKey(v27, v36, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
        v30 = (uint64_t)v17;
LABEL_13:
        outlined destroy of AspireApiPECConfig(v30, v26);
        outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        return v29 & 1;
      }
      v31 = type metadata accessor for AspireSimilarityPlaintextPackingDiagonal;
      v32 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of SecretKey((uint64_t)v23, (uint64_t)v14, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v26 = type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn;
        v33 = v24;
        v34 = v37;
        outlined init with take of SecretKey(v33, v37, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireApiPECConfig(v34, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
        v30 = (uint64_t)v14;
        goto LABEL_13;
      }
      v31 = type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn;
      v32 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v23, (uint64_t)v19, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    if (!swift_getEnumCaseMultiPayload())
    {
      v26 = type metadata accessor for AspireSimilarityPlaintextPackingDenseRow;
      outlined init with take of SecretKey(v24, (uint64_t)v10, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
      v30 = (uint64_t)v19;
      goto LABEL_13;
    }
    v31 = type metadata accessor for AspireSimilarityPlaintextPackingDenseRow;
    v32 = (uint64_t)v19;
  }
  outlined destroy of AspireApiPECConfig(v32, v31);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType));
  v29 = 0;
  return v29 & 1;
}

uint64_t type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t type metadata accessor for AspireSimilaritySimilarityClientConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySimilarityClientConfig);
}

uint64_t type metadata accessor for AspireSimilaritySimilarityServerConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySimilarityServerConfig);
}

uint64_t type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t type metadata accessor for AspireSimilaritySimilarityDbRow(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySimilarityDbRow);
}

uint64_t type metadata accessor for AspireSimilaritySimilarityDb(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilaritySimilarityDb);
}

uint64_t type metadata accessor for AspireSimilarityPecPreprocessDbArgs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPecPreprocessDbArgs);
}

uint64_t type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireSimilarityPecPreprocessDbArgs._StorageClass);
}

uint64_t specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v39 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of SecretKey(v22, v36, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      v25 = specialized static AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
LABEL_8:
  v26 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AspireSimilaritySimilarityServerConfig.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  int *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  unsigned __int8 *v53;
  int v54;
  int *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, unsigned __int8 *, uint64_t);
  char *v60;
  unsigned __int8 *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;

  v78 = a1;
  v79 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v67 = *(_QWORD *)(v2 - 8);
  v68 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v66 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v65 = (char *)&v64 - v5;
  v75 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v72 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v69 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v71);
  v76 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v70 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v73 = (uint64_t)&v64 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v74 = (uint64_t)&v64 - v13;
  v14 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySimilarityClientConfig?, AspireSimilaritySimilarityClientConfig?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v64 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v64 - v28;
  v30 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v78[*(int *)(v30 + 24)], (uint64_t)v29, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v77 = (int *)v30;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v79[*(int *)(v30 + 24)], (uint64_t)v27, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, v31, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (AspireSimilaritySimilarityClientConfig?, AspireSimilaritySimilarityClientConfig?);
    v34 = (uint64_t)v20;
LABEL_14:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, v33);
    goto LABEL_15;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspireSimilaritySimilarityClientConfig);
    goto LABEL_6;
  }
  outlined init with take of SecretKey(v31, (uint64_t)v17, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  v35 = specialized static AspireSimilaritySimilarityClientConfig.== infix(_:_:)(v24, v17);
  outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspireSimilaritySimilarityClientConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
  if ((v35 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v36 = v77;
  v37 = v78;
  v38 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v78[v77[7]], v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v39 = v79;
  v40 = v73;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v79[v36[7]], v73, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v41 = v76;
  v42 = v76 + *(int *)(v71 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v76, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  v44 = v75;
  if (v43(v41, 1, v75) != 1)
  {
    v45 = v70;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v70, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v43(v42, 1, v44) != 1)
    {
      v48 = v69;
      outlined init with take of SecretKey(v42, v69, type metadata accessor for AspireSimilarityPlaintextPacking);
      v49 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v45, v48);
      outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined destroy of AspireApiPECConfig(v45, type metadata accessor for AspireSimilarityPlaintextPacking);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if ((v49 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AspireApiPECConfig(v45, type metadata accessor for AspireSimilarityPlaintextPacking);
    goto LABEL_13;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_13:
    v33 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
    v34 = v41;
    goto LABEL_14;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
LABEL_18:
  if (*v37 == *v39)
  {
    v50 = v77[8];
    v51 = &v37[v50];
    v52 = v37[v50 + 4];
    v53 = &v39[v50];
    v54 = v39[v50 + 4];
    if ((v52 & 1) != 0)
    {
      if (v54)
      {
LABEL_25:
        v55 = v77;
        v56 = &v37[v77[5]];
        v58 = v67;
        v57 = v68;
        v59 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v67 + 16);
        v60 = v65;
        v59(v65, v56, v68);
        v61 = &v39[v55[5]];
        v62 = v66;
        v59(v66, v61, v57);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        v63 = *(void (**)(char *, uint64_t))(v58 + 8);
        v63(v62, v57);
        v63(v60, v57);
        return v46 & 1;
      }
    }
    else
    {
      if (*(_DWORD *)v51 != *(_DWORD *)v53)
        LOBYTE(v54) = 1;
      if ((v54 & 1) == 0)
        goto LABEL_25;
    }
  }
LABEL_15:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static AspireSimilaritySimilarityClientConfig.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;

  v75 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v62 = (char *)&v62 - v6;
  v71 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v69 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v66 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v68);
  v72 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v67 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v73 = (uint64_t)&v62 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v70 = (uint64_t)&v62 - v14;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v62 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v62 - v29;
  v31 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v32 = *(int *)(v31 + 40);
  v74 = a1;
  v33 = (uint64_t)a1 + v32;
  v34 = (int *)v31;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75 + v34[10], (uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v35, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v36((uint64_t)v21, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v36(v35, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    v37 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    v38 = (uint64_t)v21;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, v37);
    goto LABEL_28;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v36(v35, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of SecretKey(v35, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  v39 = specialized static AspireHeEncryptionParameters.== infix(_:_:)((uint64_t)v25, (uint64_t)v18);
  outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AspireApiPECConfig((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v39 & 1) == 0)
    goto LABEL_28;
LABEL_9:
  v41 = v74;
  v40 = v75;
  if (*v74 != *v75)
    goto LABEL_28;
  v42 = v70;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v74 + v34[11], v70, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v43 = v73;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v40 + v34[11], v73, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v44 = v72;
  v45 = v72 + *(int *)(v68 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v72, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v45, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v47 = v71;
  if (v46(v44, 1, v71) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v46(v45, 1, v47) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v48 = v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v67, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v46(v45, 1, v47) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v73, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_15:
    v37 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
    v38 = v44;
    goto LABEL_7;
  }
  v49 = v66;
  outlined init with take of SecretKey(v45, v66, type metadata accessor for AspireSimilarityPlaintextPacking);
  v50 = specialized static AspireSimilarityPlaintextPacking.== infix(_:_:)(v48, v49);
  outlined destroy of AspireApiPECConfig(v49, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v73, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((v50 & 1) == 0)
    goto LABEL_28;
LABEL_17:
  if (*((_DWORD *)v41 + 2) != *((_DWORD *)v40 + 2) || !specialized static Array<A>.== infix(_:_:)(v41[2], v40[2]))
    goto LABEL_28;
  if ((v41[4] & 1) != 0)
  {
    if ((v40[4] & 1) != 0)
      goto LABEL_26;
    v51 = 0;
LABEL_25:
    if (v51 == v40[3])
      goto LABEL_26;
LABEL_28:
    v59 = 0;
    return v59 & 1;
  }
  v51 = v41[3];
  if ((v40[4] & 1) == 0)
    goto LABEL_25;
  if (v51)
    goto LABEL_28;
LABEL_26:
  if (!specialized static Array<A>.== infix(_:_:)((_QWORD *)v41[5], (_QWORD *)v40[5]))
    goto LABEL_28;
  v52 = (char *)v41 + v34[9];
  v54 = v64;
  v53 = v65;
  v55 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v56 = v62;
  v55(v62, v52, v65);
  v57 = (char *)v40 + v34[9];
  v58 = v63;
  v55(v63, v57, v53);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  v60 = *(void (**)(char *, uint64_t))(v54 + 8);
  v60(v58, v53);
  v60(v56, v53);
  return v59 & 1;
}

uint64_t specialized AspireSimilarityPecPreprocessDbArgs._StorageClass.init(copying:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _BYTE *v64;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v57 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 48) = 0u;
  v55 = (_QWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 32) = 0u;
  v6 = (_QWORD *)(v1 + 32);
  *(_OWORD *)(v1 + 16) = 0u;
  v7 = v1
     + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  v56 = v1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  v8 = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
  v58 = v11;
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
  v59 = v12;
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
  v60 = v13;
  *v13 = 0;
  v13[1] = 0;
  v14 = v1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  v61 = v14;
  *(_QWORD *)v14 = 0;
  *(_WORD *)(v14 + 8) = 256;
  v62 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
  *v62 = MEMORY[0x24BEE4AF8];
  v15 = v1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  v63 = v15;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v64 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  *v64 = 2;
  swift_beginAccess();
  v16 = a1[2];
  v17 = a1[3];
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v16;
  *(_QWORD *)(v1 + 24) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = a1[4];
  v18 = a1[5];
  swift_beginAccess();
  *v6 = v19;
  *(_QWORD *)(v2 + 40) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v21 = a1[6];
  v20 = a1[7];
  v22 = v55;
  swift_beginAccess();
  *v22 = v21;
  *(_QWORD *)(v2 + 56) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = (uint64_t)a1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__inputServerConfig;
  swift_beginAccess();
  v24 = v57;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v23, v57, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  v25 = v56;
  swift_beginAccess();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?(v24, v25, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  swift_endAccess();
  v26 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
  swift_beginAccess();
  v28 = *v26;
  v27 = v26[1];
  swift_beginAccess();
  *v9 = v28;
  v9[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
  swift_beginAccess();
  v31 = *v29;
  v30 = v29[1];
  swift_beginAccess();
  *v10 = v31;
  v10[1] = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
  swift_beginAccess();
  v34 = *v32;
  v33 = v32[1];
  v35 = v58;
  swift_beginAccess();
  *v35 = v34;
  v35[1] = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
  swift_beginAccess();
  v38 = *v36;
  v37 = v36[1];
  v39 = v59;
  swift_beginAccess();
  *v39 = v38;
  v39[1] = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
  swift_beginAccess();
  v42 = *v40;
  v41 = v40[1];
  v43 = v60;
  swift_beginAccess();
  *v43 = v42;
  v43[1] = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = (char *)a1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__heScheme;
  swift_beginAccess();
  v45 = *(_QWORD *)v44;
  LOBYTE(v42) = v44[8];
  LOBYTE(v44) = v44[9];
  v46 = v61;
  swift_beginAccess();
  *(_QWORD *)v46 = v45;
  *(_BYTE *)(v46 + 8) = v42;
  *(_BYTE *)(v46 + 9) = (_BYTE)v44;
  v47 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__extraPlaintextModuli);
  swift_beginAccess();
  v48 = *v47;
  v49 = v62;
  swift_beginAccess();
  *v49 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = (char *)a1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__babyStep;
  swift_beginAccess();
  LODWORD(v45) = *(_DWORD *)v50;
  LOBYTE(v50) = v50[4];
  v51 = v63;
  swift_beginAccess();
  *(_DWORD *)v51 = v45;
  *(_BYTE *)(v51 + 4) = (_BYTE)v50;
  v52 = (char *)a1
      + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel;
  swift_beginAccess();
  LOBYTE(v52) = *v52;
  v53 = v64;
  swift_beginAccess();
  *v53 = (_BYTE)v52;
  return v2;
}

uint64_t outlined init with take of AspireSimilaritySimilarityServerConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [AspireSimilaritySimilarityMetric] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AspireSimilaritySimilarityMetric] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AspireSimilaritySimilarityMetric] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AspireSimilaritySimilarityMetric]);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AspireSimilaritySimilarityMetric] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilarityPlaintextPacking()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
}

uint64_t base witness table accessor for Message in AspireSimilarityPlaintextPacking()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
}

uint64_t base witness table accessor for Hashable in AspireSimilarityPlaintextPacking()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
}

uint64_t base witness table accessor for Equatable in AspireSimilarityPlaintextPacking()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilarityPlaintextPackingDenseRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t base witness table accessor for Message in AspireSimilarityPlaintextPackingDenseRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t base witness table accessor for Hashable in AspireSimilarityPlaintextPackingDenseRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t base witness table accessor for Equatable in AspireSimilarityPlaintextPackingDenseRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseRow and conformance AspireSimilarityPlaintextPackingDenseRow, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilarityPlaintextPackingDiagonal()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t base witness table accessor for Message in AspireSimilarityPlaintextPackingDiagonal()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t base witness table accessor for Hashable in AspireSimilarityPlaintextPackingDiagonal()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t base witness table accessor for Equatable in AspireSimilarityPlaintextPackingDiagonal()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDiagonal and conformance AspireSimilarityPlaintextPackingDiagonal, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilarityPlaintextPackingDenseColumn()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t base witness table accessor for Message in AspireSimilarityPlaintextPackingDenseColumn()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t base witness table accessor for Hashable in AspireSimilarityPlaintextPackingDenseColumn()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t base witness table accessor for Equatable in AspireSimilarityPlaintextPackingDenseColumn()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPackingDenseColumn and conformance AspireSimilarityPlaintextPackingDenseColumn, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySerializedCiphertextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t base witness table accessor for Message in AspireSimilaritySerializedCiphertextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySerializedCiphertextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySerializedCiphertextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t base witness table accessor for Message in AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedDcrtPlaintextMatrix and conformance AspireSimilaritySerializedDcrtPlaintextMatrix, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedDcrtPlaintextMatrix);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySimilarityClientConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
}

uint64_t base witness table accessor for Message in AspireSimilaritySimilarityClientConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySimilarityClientConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySimilarityClientConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityClientConfig and conformance AspireSimilaritySimilarityClientConfig, type metadata accessor for AspireSimilaritySimilarityClientConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityClientConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySimilarityServerConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
}

uint64_t base witness table accessor for Message in AspireSimilaritySimilarityServerConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySimilarityServerConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySimilarityServerConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityServerConfig and conformance AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySimilarityServerConfig, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityServerConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySerializedProcessedSimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t base witness table accessor for Message in AspireSimilaritySerializedProcessedSimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySerializedProcessedSimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySerializedProcessedSimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedProcessedSimilarityDb and conformance AspireSimilaritySerializedProcessedSimilarityDb, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedProcessedSimilarityDb);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySimilarityDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
}

uint64_t base witness table accessor for Message in AspireSimilaritySimilarityDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySimilarityDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySimilarityDbRow()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDbRow and conformance AspireSimilaritySimilarityDbRow, type metadata accessor for AspireSimilaritySimilarityDbRow, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDbRow);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilaritySimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
}

uint64_t base witness table accessor for Message in AspireSimilaritySimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
}

uint64_t base witness table accessor for Hashable in AspireSimilaritySimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
}

uint64_t base witness table accessor for Equatable in AspireSimilaritySimilarityDb()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySimilarityDb and conformance AspireSimilaritySimilarityDb, type metadata accessor for AspireSimilaritySimilarityDb, (uint64_t)&protocol conformance descriptor for AspireSimilaritySimilarityDb);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireSimilarityPecPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
}

uint64_t base witness table accessor for Message in AspireSimilarityPecPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
}

uint64_t base witness table accessor for Hashable in AspireSimilarityPecPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
}

uint64_t base witness table accessor for Equatable in AspireSimilarityPecPreprocessDbArgs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPecPreprocessDbArgs and conformance AspireSimilarityPecPreprocessDbArgs, type metadata accessor for AspireSimilarityPecPreprocessDbArgs, (uint64_t)&protocol conformance descriptor for AspireSimilarityPecPreprocessDbArgs);
}

uint64_t sub_237D43980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPlaintextPacking.denseRow : AspireSimilarityPlaintextPacking(a1, a2, a3, a4, type metadata accessor for AspireSimilarityPlaintextPackingDenseRow);
}

uint64_t sub_237D439A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPlaintextPacking.denseRow : AspireSimilarityPlaintextPacking(a1, a2, a3, a4, type metadata accessor for AspireSimilarityPlaintextPackingDiagonal);
}

uint64_t sub_237D439C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPlaintextPacking.denseRow : AspireSimilarityPlaintextPacking(a1, a2, a3, a4, type metadata accessor for AspireSimilarityPlaintextPackingDenseColumn);
}

uint64_t sub_237D439E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix(a1, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, a2);
}

uint64_t sub_237D43A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix(a1, a2, a3, a4, type metadata accessor for AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t sub_237D43A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix(a1, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, a2);
}

uint64_t sub_237D43A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix(a1, a2, a3, a4, type metadata accessor for AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilaritySerializedDcrtPlaintextMatrix, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t sub_237D43A78@<X0>(uint64_t a1@<X8>)
{
  return AspireSimilaritySimilarityClientConfig.encryptionParameters.getter(a1);
}

uint64_t sub_237D43AB4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;

  result = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v5 = (int *)(a1 + *(int *)(result + 32));
  if (*((_BYTE *)v5 + 4))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_237D43AF8(int *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v5 = a2 + *(int *)(result + 32);
  *(_DWORD *)v5 = v3;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t sub_237D43B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilaritySerializedCiphertextMatrix.packing : AspireSimilaritySerializedCiphertextMatrix(a1, a2, a3, a4, type metadata accessor for AspireSimilaritySimilarityServerConfig, type metadata accessor for AspireSimilaritySerializedProcessedSimilarityDb, &demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
}

uint64_t sub_237D43B78@<X0>(_BYTE *a1@<X8>)
{
  return AspireSimilarityPecPreprocessDbArgs.inputServerConfig.getter(a1);
}

uint64_t sub_237D43B9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID, a2);
}

uint64_t sub_237D43BB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryID);
}

uint64_t sub_237D43BD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID, a2);
}

uint64_t sub_237D43BF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__entryMetadataID);
}

uint64_t sub_237D43C0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID, a2);
}

uint64_t sub_237D43C28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__embeddingID);
}

uint64_t sub_237D43C44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID, a2);
}

uint64_t sub_237D43C60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__shardID);
}

uint64_t sub_237D43C7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters, a2);
}

uint64_t sub_237D43C98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireSimilarityPecPreprocessDbArgs.entryID : AspireSimilarityPecPreprocessDbArgs(a1, a2, a3, a4, &OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__predefinedEncryptionParameters);
}

uint64_t sub_237D43CCC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AspireSimilarityPecPreprocessDbArgs(0) + 20))
               + OBJC_IVAR____TtCV8CipherML35AspireSimilarityPecPreprocessDbArgsP33_4D7576BA24B7551E27E183CD62A8FB2B13_StorageClass__parallel);
  result = swift_beginAccess();
  *a2 = *v3 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AspireSimilaritySimilarityMetric()
{
  return &type metadata for AspireSimilaritySimilarityMetric;
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireSimilarityPlaintextPacking(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for AspireSimilarityPlaintextPacking(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4)
    && swift_getEnumCaseMultiPayload() <= 2)
  {
    v5 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

char *initializeWithCopy for AspireSimilarityPlaintextPacking(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

char *assignWithCopy for AspireSimilarityPlaintextPacking(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      swift_getEnumCaseMultiPayload();
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
LABEL_6:
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    goto LABEL_6;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    swift_getEnumCaseMultiPayload();
    v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
    swift_storeEnumTagMultiPayload();
  }
LABEL_7:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

char *initializeWithTake for AspireSimilarityPlaintextPacking(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

char *assignWithTake for AspireSimilarityPlaintextPacking(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      swift_getEnumCaseMultiPayload();
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
LABEL_6:
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    goto LABEL_6;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    swift_getEnumCaseMultiPayload();
    v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
    swift_storeEnumTagMultiPayload();
  }
LABEL_7:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireSimilarityPlaintextPacking()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4454C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspireSimilarityPlaintextPacking()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D445D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireSimilarityPlaintextPacking()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v6 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    v3 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    swift_getEnumCaseMultiPayload();
    v4 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_getEnumCaseMultiPayload();
  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    swift_getEnumCaseMultiPayload();
    v4 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireSimilarityPlaintextPackingDenseRow()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireSimilarityPlaintextPackingDenseRow()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for AspireSimilarityPlaintextPackingDiagonal()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireSimilarityPlaintextPackingDiagonal()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for AspireSimilarityPlaintextPackingDenseColumn()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_47Tm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AspireSimilarityPlaintextPackingDenseColumn()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_48Tm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySerializedCiphertextMatrix()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySerializedCiphertextMatrix()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AspireSimilaritySerializedCiphertextMatrix(a1, a2, a3, MEMORY[0x24BEE0170] + 64, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireSimilaritySerializedCiphertextMatrix(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    a1[1] = a2[1];
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 32);
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v11(v13, v14, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v19);
      }
      v11(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v10(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v10(v6, v5);
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for AspireSimilaritySerializedCiphertextMatrix(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v10(v12, v13, v9);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
    }
    v10(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  BOOL v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 24);
  v36 = v9;
  v11(v7, v8);
  v12 = *(int *)(a3 + 32);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    v35 = (void (*)(char *, char *, uint64_t))v11;
    if (v19)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_7;
    }
    v24 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    v27 = v26(v13, 1, v24);
    v28 = v26(v14, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v36);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v13, 0, 1, v24);
        v35(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v36);
        return a1;
      }
    }
    else
    {
      if (!v28)
      {
        v34 = a1 == a2;
        v32 = v35;
        v31 = v36;
        if (!v34)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v36);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_16;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    v32 = v35;
    v31 = v36;
LABEL_16:
    v32(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v31);
    return a1;
  }
  if (v19)
  {
LABEL_7:
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v20 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v36);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v29 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v29(v13, v14, v36);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, v20);
    v29(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v36);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for AspireSimilaritySerializedCiphertextMatrix(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v10(v12, v13, v9);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
    }
    v10(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for AspireSimilaritySerializedCiphertextMatrix(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  BOOL v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *))(v10 + 40);
  v36 = v9;
  v11(v7, v8);
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    v35 = (void (*)(char *, char *, uint64_t))v11;
    if (v19)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_7;
    }
    v24 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    v27 = v26(v13, 1, v24);
    v28 = v26(v14, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v36);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v13, 0, 1, v24);
        v35(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v36);
        return a1;
      }
    }
    else
    {
      if (!v28)
      {
        v34 = a1 == a2;
        v32 = v35;
        v31 = v36;
        if (!v34)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v36);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_16;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    v32 = v35;
    v31 = v36;
LABEL_16:
    v32(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v31);
    return a1;
  }
  if (v19)
  {
LABEL_7:
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v20 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v36);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v29 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v29(v13, v14, v36);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, v20);
    v29(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v36);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_53Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySerializedDcrtPlaintextMatrix()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_54Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = a3[9];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 40) = a2[5];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[10];
    v14 = (_OWORD *)((char *)v4 + v13);
    v15 = (_OWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for AspireHeEncryptionParameters(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v20 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v14 + 3) = v20;
      *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
      *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
      *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
      *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
      *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
      v21 = *(int *)(v16 + 40);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v24 = a3[11];
    v25 = (char *)v4 + v24;
    v26 = (char *)a2 + v24;
    v27 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v26, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v12((uint64_t)v25, (uint64_t)v26, v11);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v25, 0, 1, v30);
      }
      v12((uint64_t)&v25[*(int *)(v27 + 20)], (uint64_t)&v26[*(int *)(v27 + 20)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t destroy for AspireSimilaritySimilarityClientConfig(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[9];
  v5 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v12(v4, v5);
  v6 = a1 + a2[10];
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 40), v5);
  }
  v8 = a1 + a2[11];
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v12(v8, v5);
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[10];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v18 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *((_QWORD *)v13 + 3) = v18;
    *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
    *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
    *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
    v19 = *(int *)(v15 + 40);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v22 = a3[11];
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v11((uint64_t)v23, (uint64_t)v24, v10);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
    }
    v11((uint64_t)&v23[*(int *)(v25 + 20)], (uint64_t)&v24[*(int *)(v25 + 20)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  return a1;
}

uint64_t assignWithCopy for AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v10 - 8);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 24);
  v50(v8, v9, v10);
  v11 = a3[10];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
      v19 = *(_QWORD *)(v13 + 24);
      *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
      *(_QWORD *)(v12 + 24) = v19;
      v20 = *(_QWORD *)(v13 + 40);
      *(_BYTE *)(v12 + 48) = *(_BYTE *)(v13 + 48);
      *(_QWORD *)(v12 + 40) = v20;
      v21 = *(_QWORD *)(v13 + 56);
      *(_BYTE *)(v12 + 64) = *(_BYTE *)(v13 + 64);
      *(_QWORD *)(v12 + 56) = v21;
      v22 = *(int *)(v14 + 40);
      v23 = v12 + v22;
      v24 = v13 + v22;
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
      swift_bridgeObjectRetain();
      v25(v23, v24, v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of AspireApiPECConfig(v12, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v13 + 24);
  *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
  *(_QWORD *)(v12 + 24) = v39;
  v40 = *(_QWORD *)(v13 + 40);
  *(_BYTE *)(v12 + 48) = *(_BYTE *)(v13 + 48);
  *(_QWORD *)(v12 + 40) = v40;
  v41 = *(_QWORD *)(v13 + 56);
  *(_BYTE *)(v12 + 64) = *(_BYTE *)(v13 + 64);
  *(_QWORD *)(v12 + 56) = v41;
  v50(v12 + *(int *)(v14 + 40), v13 + *(int *)(v14 + 40), v10);
LABEL_7:
  v27 = a3[11];
  v28 = (char *)(a1 + v27);
  v29 = (char *)(a2 + v27);
  v30 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (v34)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v42 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
    v45 = v44(v28, 1, v42);
    v46 = v44(v29, 1, v42);
    if (v45)
    {
      if (!v46)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v28, v29, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v28, 0, 1, v42);
LABEL_23:
        v50((uint64_t)&v28[*(int *)(v30 + 20)], (uint64_t)&v29[*(int *)(v30 + 20)], v10);
        return a1;
      }
    }
    else
    {
      if (!v46)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v28, v29, v10);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_23;
  }
  if (v34)
  {
LABEL_13:
    v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  v35 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v29, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(&v28[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v10);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v47 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v47(v28, v29, v10);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v28, 0, 1, v35);
    v47(&v28[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v10);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  return a1;
}

uint64_t initializeWithTake for AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[10];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v18 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *((_QWORD *)v13 + 3) = v18;
    *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
    *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
    *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
    v11((uint64_t)v13 + *(int *)(v15 + 40), (uint64_t)v14 + *(int *)(v15 + 40), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[11];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v11((uint64_t)v20, (uint64_t)v21, v10);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    }
    v11((uint64_t)&v20[*(int *)(v22 + 20)], (uint64_t)&v21[*(int *)(v22 + 20)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for AspireSimilaritySimilarityClientConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v41 = *(_QWORD *)(v9 - 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 40);
  v40(v7, v8, v9);
  v10 = a3[10];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      v18 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v11 + 24) = v18;
      *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
      *(_BYTE *)(v11 + 48) = *(_BYTE *)(v12 + 48);
      *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
      *(_BYTE *)(v11 + 64) = *(_BYTE *)(v12 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v11 + *(int *)(v13 + 40), v12 + *(int *)(v13 + 40), v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of AspireApiPECConfig(v11, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  *(_BYTE *)(v11 + 48) = *(_BYTE *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
  *(_BYTE *)(v11 + 64) = *(_BYTE *)(v12 + 64);
  v40(v11 + *(int *)(v13 + 40), v12 + *(int *)(v13 + 40), v9);
LABEL_7:
  v20 = a3[11];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (v27)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v21, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v32 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v21, 1, v32);
    v36 = v34(v22, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v21, v22, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v21, 0, 1, v32);
LABEL_23:
        v40((uint64_t)&v21[*(int *)(v23 + 20)], (uint64_t)&v22[*(int *)(v23 + 20)], v9);
        return a1;
      }
    }
    else
    {
      if (!v36)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v21, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v21, v22, v9);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v21, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_23;
  }
  if (v27)
  {
LABEL_13:
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  v28 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v22, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v9);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v37 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v37(v21, v22, v9);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v21, 0, 1, v28);
    v37(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v9);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySimilarityClientConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D46E10(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[9];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[10];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[11];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySimilarityClientConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D46EE8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[9];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[10];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[11];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireSimilaritySimilarityClientConfig()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AspireSimilaritySimilarityServerConfig(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);

  v3 = a2;
  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[6];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (_QWORD *)((char *)v3 + v12);
    v15 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    v16 = *(_QWORD *)(v15 - 8);
    v62 = v11;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v58 = v3;
      v60 = v16;
      *v13 = *v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      v19 = v14[3];
      v13[2] = v14[2];
      v13[3] = v19;
      *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
      v13[5] = v14[5];
      v20 = *(int *)(v15 + 36);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v21, v22, v10);
      v59 = v15;
      v23 = *(int *)(v15 + 40);
      v24 = (_OWORD *)((char *)v13 + v23);
      v25 = (_OWORD *)((char *)v14 + v23);
      v26 = type metadata accessor for AspireHeEncryptionParameters(0);
      v27 = *(_QWORD *)(v26 - 8);
      v61 = v10;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *v24 = *v25;
        v29 = *((_QWORD *)v25 + 3);
        *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
        *((_QWORD *)v24 + 3) = v29;
        *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
        *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
        *((_BYTE *)v24 + 48) = *((_BYTE *)v25 + 48);
        *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
        *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
        v30 = *(int *)(v26 + 40);
        v31 = (char *)v24 + v30;
        v32 = (char *)v25 + v30;
        swift_bridgeObjectRetain();
        v62(v31, v32, v10);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v33 = *(int *)(v59 + 44);
      v34 = (char *)v13 + v33;
      v35 = (char *)v14 + v33;
      v36 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v37 = *(_QWORD *)(v36 - 8);
      v3 = v58;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v57 = v37;
        v39 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v40 = *(_QWORD *)(v39 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v35, 1, v39))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
          v10 = v61;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v62(v34, v35, v61);
          swift_storeEnumTagMultiPayload();
          v42 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
          v10 = v61;
          v42(v34, 0, 1, v39);
        }
        v62(&v34[*(int *)(v36 + 20)], &v35[*(int *)(v36 + 20)], v61);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v34, 0, 1, v36);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v13, 0, 1, v59);
    }
    v43 = a3[7];
    v44 = (char *)v4 + v43;
    v45 = (char *)v3 + v43;
    v46 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v49 = v10;
      v50 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v45, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v62(v44, v45, v49);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v44, 0, 1, v50);
      }
      v62(&v44[*(int *)(v46 + 20)], &v45[*(int *)(v46 + 20)], v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v53 = a3[8];
    v54 = (char *)v4 + v53;
    v55 = (char *)v3 + v53;
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
  }
  return v4;
}

uint64_t destroy for AspireSimilaritySimilarityServerConfig(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v17(v4, v5);
  v6 = a1 + a2[6];
  v7 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17(v6 + v7[9], v5);
    v8 = v6 + v7[10];
    v9 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      v17(v8 + *(int *)(v9 + 40), v5);
    }
    v10 = v6 + v7[11];
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      v12 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v17(v10, v5);
      }
      v17(v10 + *(int *)(v11 + 20), v5);
    }
  }
  v13 = a1 + a2[7];
  v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  if (!(_DWORD)result)
  {
    v16 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v13, 1, v16)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v17(v13, v5);
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v17)(v13 + *(int *)(v14 + 20), v5);
  }
  return result;
}

_BYTE *initializeWithCopy for AspireSimilaritySimilarityServerConfig(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);

  v3 = a3;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = v3[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v15 = *((_QWORD *)v14 - 1);
  v58 = v10;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v55 = v15;
    v56 = v3;
    *v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    v12[5] = v13[5];
    v18 = v14[9];
    v19 = (char *)v12 + v18;
    v20 = v10;
    v21 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v19, v21, v9);
    v22 = v14[10];
    v23 = (_OWORD *)((char *)v12 + v22);
    v24 = (_OWORD *)((char *)v13 + v22);
    v25 = type metadata accessor for AspireHeEncryptionParameters(0);
    v57 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v57 + 48))(v24, 1, v25))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      v27 = *((_QWORD *)v24 + 3);
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      *((_QWORD *)v23 + 3) = v27;
      *((_BYTE *)v23 + 32) = *((_BYTE *)v24 + 32);
      *((_QWORD *)v23 + 5) = *((_QWORD *)v24 + 5);
      *((_BYTE *)v23 + 48) = *((_BYTE *)v24 + 48);
      *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
      *((_BYTE *)v23 + 64) = *((_BYTE *)v24 + 64);
      v28 = *(int *)(v25 + 40);
      v53 = (char *)v23 + v28;
      v29 = (char *)v24 + v28;
      swift_bridgeObjectRetain();
      v20(v53, v29, v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v23, 0, 1, v25);
    }
    v30 = v14[11];
    v31 = (char *)v12 + v30;
    v32 = (char *)v13 + v30;
    v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v34 = *(_QWORD *)(v33 - 8);
    v3 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v54 = v34;
      v36 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v32, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v58(v31, v32, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v31, 0, 1, v36);
      }
      v3 = v56;
      v58(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v31, 0, 1, v33);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v55 + 56))(v12, 0, 1, v14);
  }
  v39 = v3[7];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v45 = v9;
    v46 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v41, 1, v46))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v58(v40, v41, v45);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v40, 0, 1, v46);
    }
    v58(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v49 = v3[8];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_DWORD *)v50 = *(_DWORD *)v51;
  v50[4] = v51[4];
  return a1;
}

_BYTE *assignWithCopy for AspireSimilaritySimilarityServerConfig(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  void (*v47)(uint64_t, _BYTE *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  int v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(char *, uint64_t, uint64_t);
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  int *v117;
  int *v118;
  int *v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v121 = *(_QWORD *)(v9 - 8);
  v120 = *(void (**)(char *, char *, uint64_t))(v121 + 24);
  v120(v7, v8, v9);
  v10 = v3[6];
  v11 = (uint64_t)&v5[v10];
  v12 = &v4[v10];
  v13 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  v122 = v9;
  if (v16)
  {
    if (!v17)
    {
      v114 = v5;
      v115 = v4;
      v117 = v3;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v12 + 2);
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
      v18 = *((_QWORD *)v12 + 3);
      *(_BYTE *)(v11 + 32) = v12[32];
      *(_QWORD *)(v11 + 24) = v18;
      *(_QWORD *)(v11 + 40) = *((_QWORD *)v12 + 5);
      v19 = v13[9];
      v20 = (char *)(v11 + v19);
      v21 = &v12[v19];
      v22 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22(v20, v21, v9);
      v23 = v13[10];
      v24 = (_QWORD *)(v11 + v23);
      v25 = &v12[v23];
      v26 = type metadata accessor for AspireHeEncryptionParameters(0);
      v27 = *(_QWORD *)(v26 - 8);
      v113 = v22;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *v24 = *v25;
        v24[1] = v25[1];
        v24[2] = v25[2];
        v48 = v25[3];
        *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
        v24[3] = v48;
        v49 = v25[5];
        *((_BYTE *)v24 + 48) = *((_BYTE *)v25 + 48);
        v24[5] = v49;
        v50 = v25[7];
        *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
        v24[7] = v50;
        v51 = *(int *)(v26 + 40);
        v52 = (char *)v24 + v51;
        v53 = (char *)v25 + v51;
        swift_bridgeObjectRetain();
        v22(v52, v53, v122);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v54 = v13[11];
      v55 = (char *)(v11 + v54);
      v56 = &v12[v54];
      v57 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v58 = *(_QWORD *)(v57 - 8);
      v5 = v114;
      v4 = v115;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        v60 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v56, 1, v60))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v113(v55, v56, v122);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v55, 0, 1, v60);
        }
        v4 = v115;
        v113(&v55[*(int *)(v57 + 20)], &v56[*(int *)(v57 + 20)], v122);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        v5 = v114;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      v3 = v117;
      goto LABEL_30;
    }
    goto LABEL_7;
  }
  if (v17)
  {
    outlined destroy of AspireApiPECConfig(v11, type metadata accessor for AspireSimilaritySimilarityClientConfig);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?)
                                - 8)
                    + 64);
    v30 = (void *)v11;
    v31 = v12;
LABEL_8:
    memcpy(v30, v31, v29);
    goto LABEL_30;
  }
  v116 = v4;
  v118 = v3;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)v12 + 2);
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = *((_QWORD *)v12 + 3);
  *(_BYTE *)(v11 + 32) = v12[32];
  *(_QWORD *)(v11 + 24) = v32;
  *(_QWORD *)(v11 + 40) = *((_QWORD *)v12 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v120((char *)(v11 + v13[9]), &v12[v13[9]], v9);
  v33 = v13[10];
  v34 = v11 + v33;
  v35 = &v12[v33];
  v36 = type metadata accessor for AspireHeEncryptionParameters(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38((uint64_t)v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
      *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
      v41 = *((_QWORD *)v35 + 3);
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_QWORD *)(v34 + 24) = v41;
      v42 = *((_QWORD *)v35 + 5);
      *(_BYTE *)(v34 + 48) = v35[48];
      *(_QWORD *)(v34 + 40) = v42;
      v43 = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      *(_QWORD *)(v34 + 56) = v43;
      v44 = *(int *)(v36 + 40);
      v45 = v34 + v44;
      v46 = &v35[v44];
      v47 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v121 + 16);
      swift_bridgeObjectRetain();
      v47(v45, v46, v122);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v40)
  {
    outlined destroy of AspireApiPECConfig(v34, type metadata accessor for AspireHeEncryptionParameters);
LABEL_19:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_20;
  }
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
  *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v103 = *((_QWORD *)v35 + 3);
  *(_BYTE *)(v34 + 32) = v35[32];
  *(_QWORD *)(v34 + 24) = v103;
  v104 = *((_QWORD *)v35 + 5);
  *(_BYTE *)(v34 + 48) = v35[48];
  *(_QWORD *)(v34 + 40) = v104;
  v105 = *((_QWORD *)v35 + 7);
  *(_BYTE *)(v34 + 64) = v35[64];
  *(_QWORD *)(v34 + 56) = v105;
  v120((char *)(v34 + *(int *)(v36 + 40)), &v35[*(int *)(v36 + 40)], v122);
LABEL_20:
  v4 = v116;
  v64 = v13[11];
  v65 = (char *)(v11 + v64);
  v66 = &v12[v64];
  v67 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  v3 = v118;
  if (!v70)
  {
    if (v71)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_26;
    }
    v106 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v107 = *(_QWORD *)(v106 - 8);
    v108 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v107 + 48);
    v109 = v108(v65, 1, v106);
    v110 = v108(v66, 1, v106);
    if (v109)
    {
      v111 = v122;
      if (!v110)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v65, v66, v122);
        v111 = v122;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v65, 0, 1, v106);
LABEL_58:
        v120(&v65[*(int *)(v67 + 20)], &v66[*(int *)(v67 + 20)], v111);
        goto LABEL_30;
      }
    }
    else
    {
      v111 = v122;
      if (!v110)
      {
        if (v5 != v116)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v65, v66, v122);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_58;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
    goto LABEL_58;
  }
  if (v71)
  {
LABEL_26:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                - 8)
                    + 64);
    v30 = v65;
    v31 = v66;
    goto LABEL_8;
  }
  v72 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v73 = *(_QWORD *)(v72 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v66, 1, v72))
  {
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    v75 = v122;
    v76 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v75 = v122;
    v76 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
    v76(v65, v66, v122);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v65, 0, 1, v72);
  }
  v3 = v118;
  v76(&v65[*(int *)(v67 + 20)], &v66[*(int *)(v67 + 20)], v75);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
LABEL_30:
  v77 = v3[7];
  v78 = &v5[v77];
  v79 = &v4[v77];
  v80 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
  v83 = v82(v78, 1, v80);
  v84 = v82(v79, 1, v80);
  if (!v83)
  {
    if (v84)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v78, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_36;
    }
    v91 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v92 = *(_QWORD *)(v91 - 8);
    v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
    v94 = v93(v78, 1, v91);
    v95 = v93(v79, 1, v91);
    if (v94)
    {
      if (!v95)
      {
        swift_getEnumCaseMultiPayload();
        v96 = v122;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v78, v79, v122);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v78, 0, 1, v91);
LABEL_45:
        v120(&v78[*(int *)(v80 + 20)], &v79[*(int *)(v80 + 20)], v96);
        goto LABEL_46;
      }
    }
    else
    {
      if (!v95)
      {
        v96 = v122;
        if (v5 != v4)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v78, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v78, v79, v122);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_45;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v78, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    v96 = v122;
    goto LABEL_45;
  }
  if (v84)
  {
LABEL_36:
    v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_46;
  }
  v119 = v3;
  v85 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v86 = *(_QWORD *)(v85 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v79, 1, v85))
  {
    v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    v88 = v122;
    v89 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v88 = v122;
    v89 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
    v89(v78, v79, v122);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v78, 0, 1, v85);
  }
  v3 = v119;
  v89(&v78[*(int *)(v80 + 20)], &v79[*(int *)(v80 + 20)], v88);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
LABEL_46:
  v98 = v3[8];
  v99 = &v5[v98];
  v100 = &v4[v98];
  v101 = *(_DWORD *)v100;
  v99[4] = v100[4];
  *(_DWORD *)v99 = v101;
  return v5;
}

_BYTE *initializeWithTake for AspireSimilaritySimilarityServerConfig(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  void (*v51)(char *, char *, uint64_t);

  v3 = a3;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = v3[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v15 = *((_QWORD *)v14 - 1);
  v51 = v10;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v48 = v15;
    v50 = v3;
    *v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    v12[5] = v13[5];
    v10((char *)v12 + v14[9], (char *)v13 + v14[9], v9);
    v18 = v14[10];
    v19 = (_OWORD *)((char *)v12 + v18);
    v49 = v9;
    v20 = (_OWORD *)((char *)v13 + v18);
    v21 = type metadata accessor for AspireHeEncryptionParameters(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *v19 = *v20;
      v24 = *((_QWORD *)v20 + 3);
      *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
      *((_QWORD *)v19 + 3) = v24;
      *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
      *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
      *((_BYTE *)v19 + 48) = *((_BYTE *)v20 + 48);
      *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
      *((_BYTE *)v19 + 64) = *((_BYTE *)v20 + 64);
      v10((char *)v19 + *(int *)(v21 + 40), (char *)v20 + *(int *)(v21 + 40), v49);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v25 = v14[11];
    v26 = (char *)v12 + v25;
    v27 = (char *)v13 + v25;
    v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v29 = *(_QWORD *)(v28 - 8);
    v3 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v47 = v29;
      v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v51(v26, v27, v49);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
      }
      v51(&v26[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v26, 0, 1, v28);
      v3 = v50;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56))(v12, 0, 1, v14);
    v9 = v49;
  }
  v34 = v3[7];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v36, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v51(v35, v36, v9);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v35, 0, 1, v40);
    }
    v51(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  v43 = v3[8];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_DWORD *)v44 = *(_DWORD *)v45;
  v44[4] = v45[4];
  return a1;
}

_BYTE *assignWithTake for AspireSimilaritySimilarityServerConfig(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t);
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  _BYTE *v96;
  int *v97;
  int *v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  uint64_t v105;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v105 = *(_QWORD *)(v9 - 8);
  v103 = *(void (**)(char *, char *, uint64_t))(v105 + 40);
  v103(v7, v8, v9);
  v10 = v3[6];
  v11 = (uint64_t)&v5[v10];
  v12 = &v4[v10];
  v13 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  v104 = v9;
  if (v16)
  {
    if (!v17)
    {
      v96 = v5;
      v97 = v3;
      v99 = v4;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v12 + 2);
      v18 = *((_QWORD *)v12 + 3);
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
      *(_QWORD *)(v11 + 24) = v18;
      *(_BYTE *)(v11 + 32) = v12[32];
      *(_QWORD *)(v11 + 40) = *((_QWORD *)v12 + 5);
      v19 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
      v19((char *)(v11 + v13[9]), &v12[v13[9]], v9);
      v20 = v13[10];
      v21 = (_OWORD *)(v11 + v20);
      v22 = v9;
      v23 = &v12[v20];
      v24 = type metadata accessor for AspireHeEncryptionParameters(0);
      v25 = *(_QWORD *)(v24 - 8);
      v95 = v19;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v21, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        *v21 = *v23;
        v38 = *((_QWORD *)v23 + 3);
        *((_QWORD *)v21 + 2) = *((_QWORD *)v23 + 2);
        *((_QWORD *)v21 + 3) = v38;
        *((_BYTE *)v21 + 32) = *((_BYTE *)v23 + 32);
        *((_QWORD *)v21 + 5) = *((_QWORD *)v23 + 5);
        *((_BYTE *)v21 + 48) = *((_BYTE *)v23 + 48);
        *((_QWORD *)v21 + 7) = *((_QWORD *)v23 + 7);
        *((_BYTE *)v21 + 64) = *((_BYTE *)v23 + 64);
        v19((char *)v21 + *(int *)(v24 + 40), (char *)v23 + *(int *)(v24 + 40), v22);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      v39 = v13[11];
      v40 = (char *)(v11 + v39);
      v41 = &v12[v39];
      v42 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v43 = *(_QWORD *)(v42 - 8);
      v3 = v97;
      v4 = v99;
      v5 = v96;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v45 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v95(v40, v41, v104);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
        }
        v3 = v97;
        v95(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v104);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        v4 = v99;
        v5 = v96;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_30;
    }
    goto LABEL_7;
  }
  if (v17)
  {
    outlined destroy of AspireApiPECConfig(v11, type metadata accessor for AspireSimilaritySimilarityClientConfig);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?)
                                - 8)
                    + 64);
    v28 = (void *)v11;
    v29 = v12;
LABEL_8:
    memcpy(v28, v29, v27);
    goto LABEL_30;
  }
  v98 = v3;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)v12 + 2);
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 24) = *((_QWORD *)v12 + 3);
  *(_BYTE *)(v11 + 32) = v12[32];
  *(_QWORD *)(v11 + 40) = *((_QWORD *)v12 + 5);
  swift_bridgeObjectRelease();
  v103((char *)(v11 + v13[9]), &v12[v13[9]], v9);
  v30 = v13[10];
  v31 = v11 + v30;
  v32 = &v12[v30];
  v33 = type metadata accessor for AspireHeEncryptionParameters(0);
  v100 = *(_QWORD *)(v33 - 8);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  v35 = v34(v31, 1, v33);
  v36 = v34((uint64_t)v32, 1, v33);
  if (v35)
  {
    if (!v36)
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v37 = *((_QWORD *)v32 + 3);
      *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
      *(_QWORD *)(v31 + 24) = v37;
      *(_BYTE *)(v31 + 32) = v32[32];
      *(_BYTE *)(v31 + 48) = v32[48];
      *(_QWORD *)(v31 + 40) = *((_QWORD *)v32 + 5);
      *(_QWORD *)(v31 + 56) = *((_QWORD *)v32 + 7);
      *(_BYTE *)(v31 + 64) = v32[64];
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v105 + 32))(v31 + *(int *)(v33 + 40), &v32[*(int *)(v33 + 40)], v104);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v31, 0, 1, v33);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v36)
  {
    outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireHeEncryptionParameters);
LABEL_19:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v31, v32, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_20;
  }
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v31 + 24) = *((_QWORD *)v32 + 3);
  *(_BYTE *)(v31 + 32) = v32[32];
  *(_QWORD *)(v31 + 40) = *((_QWORD *)v32 + 5);
  *(_BYTE *)(v31 + 48) = v32[48];
  *(_QWORD *)(v31 + 56) = *((_QWORD *)v32 + 7);
  *(_BYTE *)(v31 + 64) = v32[64];
  v103((char *)(v31 + *(int *)(v33 + 40)), &v32[*(int *)(v33 + 40)], v104);
LABEL_20:
  v3 = v98;
  v49 = v13[11];
  v50 = (char *)(v11 + v49);
  v51 = &v12[v49];
  v52 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (v56)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v50, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_26;
    }
    v88 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v89 = *(_QWORD *)(v88 - 8);
    v90 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
    v91 = v90(v50, 1, v88);
    v92 = v90(v51, 1, v88);
    if (v91)
    {
      v93 = v104;
      if (!v92)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v50, v51, v104);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v50, 0, 1, v88);
LABEL_58:
        v103(&v50[*(int *)(v52 + 20)], &v51[*(int *)(v52 + 20)], v93);
        goto LABEL_30;
      }
    }
    else
    {
      v93 = v104;
      if (!v92)
      {
        if (v5 != v4)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v50, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v50, v51, v104);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_58;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v50, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_58;
  }
  if (v56)
  {
LABEL_26:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                - 8)
                    + 64);
    v28 = v50;
    v29 = v51;
    goto LABEL_8;
  }
  v101 = v4;
  v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v58 = *(_QWORD *)(v57 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v51, 1, v57))
  {
    v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    v60 = v104;
    v61 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v60 = v104;
    v61 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
    v61(v50, v51, v104);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v50, 0, 1, v57);
  }
  v3 = v98;
  v61(&v50[*(int *)(v52 + 20)], &v51[*(int *)(v52 + 20)], v60);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  v4 = v101;
LABEL_30:
  v62 = v3[7];
  v63 = &v5[v62];
  v64 = &v4[v62];
  v65 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (v69)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v63, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_36;
    }
    v77 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v78 = *(_QWORD *)(v77 - 8);
    v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
    v80 = v79(v63, 1, v77);
    v81 = v79(v64, 1, v77);
    if (v80)
    {
      v82 = v104;
      if (!v81)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v63, v64, v104);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v63, 0, 1, v77);
LABEL_45:
        v103(&v63[*(int *)(v65 + 20)], &v64[*(int *)(v65 + 20)], v82);
        goto LABEL_46;
      }
    }
    else
    {
      v82 = v104;
      if (!v81)
      {
        if (v5 != v4)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v63, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v63, v64, v104);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_45;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v63, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_45;
  }
  if (v69)
  {
LABEL_36:
    v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_46;
  }
  v102 = v4;
  v70 = v3;
  v71 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v64, 1, v71))
  {
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    v74 = v104;
    v75 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v74 = v104;
    v75 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
    v75(v63, v64, v104);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v63, 0, 1, v71);
  }
  v3 = v70;
  v75(&v63[*(int *)(v65 + 20)], &v64[*(int *)(v65 + 20)], v74);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  v4 = v102;
LABEL_46:
  v84 = v3[8];
  v85 = &v5[v84];
  v86 = &v4[v84];
  *(_DWORD *)v85 = *(_DWORD *)v86;
  v85[4] = v86[4];
  return v5;
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySimilarityServerConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D49848(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[5];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[6];
      }
      else
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v11 = *(_QWORD *)(v12 - 8);
        v13 = a3[7];
      }
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySimilarityServerConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_237D49920(_BYTE *result, uint64_t a2, int a3, int *a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireSimilaritySimilarityServerConfig()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilaritySimilarityClientConfig?, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySimilarityClientConfig);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireSimilaritySerializedProcessedSimilarityDb(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v72;
  uint64_t v73;
  char *__srca;
  char *__src;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  _BYTE *v84;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 32);
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    v17 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
    v18 = *((_QWORD *)v17 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v13(&v15[v17[5]], &v16[v17[5]], v12);
      v20 = v17[6];
      v21 = &v15[v20];
      v84 = v16;
      v22 = &v16[v20];
      v23 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
      v24 = v12;
      v25 = *(_QWORD *)(v23 - 8);
      v83 = v13;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        v27 = v24;
        v28 = v84;
      }
      else
      {
        v78 = v25;
        v76 = v15;
        v81 = v18;
        *v21 = *v22;
        *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
        v29 = v22[3];
        v21[2] = v22[2];
        v21[3] = v29;
        *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
        v21[5] = v22[5];
        v30 = *(int *)(v23 + 36);
        v31 = (char *)v21 + v30;
        v32 = v13;
        v33 = (char *)v22 + v30;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v34 = v24;
        v32(v31, v33, v24);
        v79 = v23;
        v35 = *(int *)(v23 + 40);
        v36 = (_OWORD *)((char *)v21 + v35);
        v37 = (_OWORD *)((char *)v22 + v35);
        v38 = type metadata accessor for AspireHeEncryptionParameters(0);
        v39 = *(_QWORD *)(v38 - 8);
        v77 = v34;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        {
          v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        else
        {
          *v36 = *v37;
          v41 = *((_QWORD *)v37 + 3);
          *((_QWORD *)v36 + 2) = *((_QWORD *)v37 + 2);
          *((_QWORD *)v36 + 3) = v41;
          *((_BYTE *)v36 + 32) = *((_BYTE *)v37 + 32);
          *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 5);
          *((_BYTE *)v36 + 48) = *((_BYTE *)v37 + 48);
          *((_QWORD *)v36 + 7) = *((_QWORD *)v37 + 7);
          *((_BYTE *)v36 + 64) = *((_BYTE *)v37 + 64);
          v42 = *(int *)(v38 + 40);
          __srca = (char *)v36 + v42;
          v43 = (char *)v37 + v42;
          swift_bridgeObjectRetain();
          v32(__srca, v43, v34);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
        }
        v28 = v84;
        v44 = v79;
        v45 = *(int *)(v79 + 44);
        v46 = (char *)v21 + v45;
        v47 = (char *)v22 + v45;
        v48 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v49 = v21;
        v50 = *(_QWORD *)(v48 - 8);
        __src = v47;
        v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v47, 1, v48);
        v15 = v76;
        v52 = v78;
        if (v51)
        {
          v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v46, __src, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          v54 = v49;
        }
        else
        {
          v72 = v48;
          v73 = v50;
          v55 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v56 = *(_QWORD *)(v55 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(__src, 1, v55))
          {
            v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v46, __src, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
            v58 = v83;
            v59 = v77;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v59 = v77;
            v58 = v83;
            v83(v46, __src, v77);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v46, 0, 1, v55);
          }
          v58(&v46[*(int *)(v72 + 20)], &__src[*(int *)(v72 + 20)], v59);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v46, 0, 1, v72);
          v52 = v78;
          v44 = v79;
          v54 = v49;
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v54, 0, 1, v44);
        v18 = v81;
        v27 = v77;
      }
      v60 = v17[7];
      v61 = &v15[v60];
      v62 = &v28[v60];
      v63 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v82 = v18;
        v66 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v80 = *(_QWORD *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v62, 1, v66))
        {
          v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v83(v61, v62, v27);
          v28 = v84;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v61, 0, 1, v66);
        }
        v18 = v82;
        v83(&v61[*(int *)(v63 + 20)], &v62[*(int *)(v63 + 20)], v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      v68 = v17[8];
      v69 = &v15[v68];
      v70 = &v28[v68];
      *(_DWORD *)v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v7;
}

uint64_t destroy for AspireSimilaritySerializedProcessedSimilarityDb(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t result;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v19(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v19(v6 + v7[5], v5);
    v9 = v6 + v7[6];
    v10 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19(v9 + v10[9], v5);
      v11 = v9 + v10[10];
      v12 = type metadata accessor for AspireHeEncryptionParameters(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
      {
        swift_bridgeObjectRelease();
        v19(v11 + *(int *)(v12 + 40), v5);
      }
      v13 = v9 + v10[11];
      v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
      {
        v15 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15)
          && swift_getEnumCaseMultiPayload() <= 2)
        {
          v19(v13, v5);
        }
        v19(v13 + *(int *)(v14 + 20), v5);
      }
    }
    v16 = v6 + v7[7];
    v17 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
    if (!(_DWORD)result)
    {
      v18 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v16, 1, v18)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v19(v16, v5);
      }
      return ((uint64_t (*)(uint64_t, uint64_t))v19)(v16 + *(int *)(v17 + 20), v5);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AspireSimilaritySerializedProcessedSimilarityDb(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v70;
  uint64_t v71;
  char *__srca;
  char *__src;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  _BYTE *v82;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11(&v13[v15[5]], &v14[v15[5]], v10);
    v18 = v15[6];
    v19 = &v13[v18];
    v82 = v14;
    v20 = &v14[v18];
    v21 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    v22 = v10;
    v23 = *(_QWORD *)(v21 - 8);
    v81 = v11;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      v25 = v22;
      v26 = v82;
    }
    else
    {
      v76 = v23;
      v74 = v13;
      v79 = v16;
      *v19 = *v20;
      *((_DWORD *)v19 + 2) = *((_DWORD *)v20 + 2);
      v27 = v20[3];
      v19[2] = v20[2];
      v19[3] = v27;
      *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
      v19[5] = v20[5];
      v28 = *(int *)(v21 + 36);
      v29 = (char *)v19 + v28;
      v30 = v11;
      v31 = (char *)v20 + v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = v22;
      v30(v29, v31, v22);
      v77 = v21;
      v33 = *(int *)(v21 + 40);
      v34 = (_OWORD *)((char *)v19 + v33);
      v35 = (_OWORD *)((char *)v20 + v33);
      v36 = type metadata accessor for AspireHeEncryptionParameters(0);
      v37 = *(_QWORD *)(v36 - 8);
      v75 = v32;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v34 = *v35;
        v39 = *((_QWORD *)v35 + 3);
        *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
        *((_QWORD *)v34 + 3) = v39;
        *((_BYTE *)v34 + 32) = *((_BYTE *)v35 + 32);
        *((_QWORD *)v34 + 5) = *((_QWORD *)v35 + 5);
        *((_BYTE *)v34 + 48) = *((_BYTE *)v35 + 48);
        *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
        *((_BYTE *)v34 + 64) = *((_BYTE *)v35 + 64);
        v40 = *(int *)(v36 + 40);
        __srca = (char *)v34 + v40;
        v41 = (char *)v35 + v40;
        swift_bridgeObjectRetain();
        v30(__srca, v41, v32);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v26 = v82;
      v42 = v77;
      v43 = *(int *)(v77 + 44);
      v44 = (char *)v19 + v43;
      v45 = (char *)v20 + v43;
      v46 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v47 = v19;
      v48 = *(_QWORD *)(v46 - 8);
      __src = v45;
      v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v45, 1, v46);
      v13 = v74;
      v50 = v76;
      if (v49)
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v44, __src, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        v52 = v47;
      }
      else
      {
        v70 = v46;
        v71 = v48;
        v53 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v54 = *(_QWORD *)(v53 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(__src, 1, v53))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v44, __src, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
          v56 = v81;
          v57 = v75;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v57 = v75;
          v56 = v81;
          v81(v44, __src, v75);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v44, 0, 1, v53);
        }
        v56(&v44[*(int *)(v70 + 20)], &__src[*(int *)(v70 + 20)], v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v44, 0, 1, v70);
        v50 = v76;
        v42 = v77;
        v52 = v47;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v42);
      v16 = v79;
      v25 = v75;
    }
    v58 = v15[7];
    v59 = &v13[v58];
    v60 = &v26[v58];
    v61 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v62 = *(_QWORD *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v80 = v16;
      v64 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v78 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v60, 1, v64))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v81(v59, v60, v25);
        v26 = v82;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v59, 0, 1, v64);
      }
      v16 = v80;
      v81(&v59[*(int *)(v61 + 20)], &v60[*(int *)(v61 + 20)], v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
    }
    v66 = v15[8];
    v67 = &v13[v66];
    v68 = &v26[v66];
    *(_DWORD *)v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for AspireSimilaritySerializedProcessedSimilarityDb(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, int *);
  int v17;
  int v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  size_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  void (*v123)(uint64_t, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(char *, uint64_t, uint64_t);
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(char *, uint64_t, uint64_t);
  int v141;
  int v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  _BYTE *v147;
  _BYTE *v148;
  int v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(char *, uint64_t, uint64_t);
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (*v169)(char *, uint64_t, uint64_t);
  int v170;
  int v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  _QWORD *__dst;
  char *__dsta;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  int *v182;
  int *v183;
  int *v184;
  int *v185;
  void (*v186)(char *, char *, uint64_t);
  uint64_t v187;
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  uint64_t v194;
  void (*v195)(_BYTE *, _BYTE *, uint64_t);
  void (*v196)(char *, char *, uint64_t);

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v194 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v194 + 24);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    v186 = v10;
    if (v18)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspireSimilaritySimilarityServerConfig);
      goto LABEL_7;
    }
    *v12 = *v13;
    v10(&v12[v14[5]], &v13[v14[5]], v9);
    v27 = v14[6];
    v188 = v12;
    v28 = (uint64_t)&v12[v27];
    v29 = &v13[v27];
    v30 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    v178 = *(_QWORD *)(v30 - 8);
    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v178 + 48);
    v32 = v31(v28, 1, v30);
    v180 = v30;
    v33 = v31((uint64_t)v29, 1, v30);
    v191 = v9;
    v193 = v13;
    if (v32)
    {
      if (!v33)
      {
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *(_DWORD *)(v28 + 8) = *((_DWORD *)v29 + 2);
        *(_QWORD *)(v28 + 16) = *((_QWORD *)v29 + 2);
        v34 = *((_QWORD *)v29 + 3);
        *(_BYTE *)(v28 + 32) = v29[32];
        *(_QWORD *)(v28 + 24) = v34;
        *(_QWORD *)(v28 + 40) = *((_QWORD *)v29 + 5);
        v35 = *(int *)(v30 + 36);
        v36 = (char *)(v28 + v35);
        v37 = &v29[v35];
        v38 = *(void (**)(char *, char *, uint64_t))(v194 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v177 = v38;
        v38(v36, v37, v191);
        v39 = *(int *)(v30 + 40);
        v40 = (_QWORD *)(v28 + v39);
        v41 = &v29[v39];
        v42 = type metadata accessor for AspireHeEncryptionParameters(0);
        v43 = *(_QWORD *)(v42 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        }
        else
        {
          *v40 = *v41;
          v40[1] = v41[1];
          v40[2] = v41[2];
          v85 = v41[3];
          *((_BYTE *)v40 + 32) = *((_BYTE *)v41 + 32);
          v40[3] = v85;
          v86 = v41[5];
          *((_BYTE *)v40 + 48) = *((_BYTE *)v41 + 48);
          v40[5] = v86;
          v87 = v41[7];
          *((_BYTE *)v40 + 64) = *((_BYTE *)v41 + 64);
          v40[7] = v87;
          v88 = *(int *)(v42 + 40);
          v89 = (char *)v40 + v88;
          v90 = (char *)v41 + v88;
          swift_bridgeObjectRetain();
          v177(v89, v90, v191);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        }
        v91 = v178;
        v92 = *(int *)(v180 + 44);
        v93 = (char *)(v28 + v92);
        v94 = &v29[v92];
        v95 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v96 = *(_QWORD *)(v95 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
        }
        else
        {
          __dsta = v93;
          v112 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v113 = *(_QWORD *)(v112 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v94, 1, v112))
          {
            v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            v115 = __dsta;
            memcpy(__dsta, v94, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v177(__dsta, v94, v191);
            swift_storeEnumTagMultiPayload();
            v125 = v112;
            v115 = __dsta;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(__dsta, 0, 1, v125);
          }
          v177(&__dsta[*(int *)(v95 + 20)], &v94[*(int *)(v95 + 20)], v191);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v115, 0, 1, v95);
          v91 = v178;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v28, 0, 1, v180);
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (v33)
    {
      outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireSimilaritySimilarityClientConfig);
LABEL_16:
      v57 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?)
                                  - 8)
                      + 64);
      v58 = (void *)v28;
      v59 = v29;
LABEL_17:
      memcpy(v58, v59, v57);
      goto LABEL_48;
    }
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_DWORD *)(v28 + 8) = *((_DWORD *)v29 + 2);
    *(_QWORD *)(v28 + 16) = *((_QWORD *)v29 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v76 = *((_QWORD *)v29 + 3);
    *(_BYTE *)(v28 + 32) = v29[32];
    *(_QWORD *)(v28 + 24) = v76;
    *(_QWORD *)(v28 + 40) = *((_QWORD *)v29 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v186((char *)(v28 + *(int *)(v30 + 36)), &v29[*(int *)(v30 + 36)], v9);
    v77 = *(int *)(v30 + 40);
    v78 = v28 + v77;
    v79 = &v29[v77];
    v80 = type metadata accessor for AspireHeEncryptionParameters(0);
    __dst = *(_QWORD **)(v80 - 8);
    v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dst[6];
    v179 = v78;
    LODWORD(v78) = v81(v78, 1, v80);
    v82 = v81((uint64_t)v79, 1, v80);
    if ((_DWORD)v78)
    {
      if (v82)
      {
        v83 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                    - 8)
                        + 64);
        v84 = (void *)v179;
LABEL_43:
        memcpy(v84, v79, v83);
        goto LABEL_68;
      }
      *(_QWORD *)v179 = *v79;
      *(_QWORD *)(v179 + 8) = v79[1];
      *(_QWORD *)(v179 + 16) = v79[2];
      v116 = v79[3];
      *(_BYTE *)(v179 + 32) = *((_BYTE *)v79 + 32);
      *(_QWORD *)(v179 + 24) = v116;
      v117 = v79[5];
      *(_BYTE *)(v179 + 48) = *((_BYTE *)v79 + 48);
      *(_QWORD *)(v179 + 40) = v117;
      v118 = v79[7];
      *(_BYTE *)(v179 + 64) = *((_BYTE *)v79 + 64);
      *(_QWORD *)(v179 + 56) = v118;
      v119 = *(int *)(v80 + 40);
      v120 = v179 + v119;
      v184 = v14;
      v121 = v9;
      v122 = (char *)v79 + v119;
      v123 = *(void (**)(uint64_t, char *, uint64_t))(v194 + 16);
      swift_bridgeObjectRetain();
      v124 = v121;
      v14 = v184;
      v123(v120, v122, v124);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dst[7])(v179, 0, 1, v80);
    }
    else
    {
      if (v82)
      {
        outlined destroy of AspireApiPECConfig(v179, type metadata accessor for AspireHeEncryptionParameters);
        v83 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                    - 8)
                        + 64);
        v84 = (void *)v179;
        goto LABEL_43;
      }
      *(_QWORD *)v179 = *v79;
      *(_QWORD *)(v179 + 8) = v79[1];
      *(_QWORD *)(v179 + 16) = v79[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v151 = v79[3];
      *(_BYTE *)(v179 + 32) = *((_BYTE *)v79 + 32);
      *(_QWORD *)(v179 + 24) = v151;
      v152 = v79[5];
      *(_BYTE *)(v179 + 48) = *((_BYTE *)v79 + 48);
      *(_QWORD *)(v179 + 40) = v152;
      v153 = v79[7];
      *(_BYTE *)(v179 + 64) = *((_BYTE *)v79 + 64);
      *(_QWORD *)(v179 + 56) = v153;
      v186((char *)(v179 + *(int *)(v80 + 40)), (char *)v79 + *(int *)(v80 + 40), v9);
    }
LABEL_68:
    v154 = *(int *)(v180 + 44);
    v155 = (char *)(v28 + v154);
    v156 = &v29[v154];
    v157 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v158 = *(_QWORD *)(v157 - 8);
    v159 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158 + 48);
    v160 = v159(v155, 1, v157);
    v161 = v159(v156, 1, v157);
    if (v160)
    {
      if (!v161)
      {
        v185 = v14;
        v162 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v163 = *(_QWORD *)(v162 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v156, 1, v162))
        {
          v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          v165 = *(void (**)(char *, char *, uint64_t))(v194 + 16);
          v166 = v191;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v165 = *(void (**)(char *, char *, uint64_t))(v194 + 16);
          v166 = v191;
          v165(v155, v156, v191);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v155, 0, 1, v162);
        }
        v14 = v185;
        v165(&v155[*(int *)(v157 + 20)], &v156[*(int *)(v157 + 20)], v166);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
        goto LABEL_48;
      }
    }
    else
    {
      if (!v161)
      {
        v167 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v168 = *(_QWORD *)(v167 - 8);
        v169 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v168 + 48);
        v170 = v169(v155, 1, v167);
        v171 = v169(v156, 1, v167);
        if (v170)
        {
          if (v171)
          {
            v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v155, v156, v191);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v168 + 56))(v155, 0, 1, v167);
          }
          v173 = v186;
        }
        else
        {
          v173 = v186;
          if (v171)
          {
            outlined destroy of AspireApiPECConfig((uint64_t)v155, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
            v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
          }
          else if (a1 != a2)
          {
            outlined destroy of AspireApiPECConfig((uint64_t)v155, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
            swift_getEnumCaseMultiPayload();
            (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v155, v156, v191);
            swift_storeEnumTagMultiPayload();
          }
        }
        v173(&v155[*(int *)(v157 + 20)], &v156[*(int *)(v157 + 20)], v191);
LABEL_48:
        v126 = v14[7];
        v127 = &v188[v126];
        v128 = &v193[v126];
        v129 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v130 = *(_QWORD *)(v129 - 8);
        v131 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 48);
        v132 = v131(v127, 1, v129);
        v133 = v131(v128, 1, v129);
        if (v132)
        {
          if (!v133)
          {
            v134 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
            v135 = *(_QWORD *)(v134 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v128, 1, v134))
            {
              v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
              memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
              (*(void (**)(char *, char *, uint64_t))(v194 + 16))(&v127[*(int *)(v129 + 20)], &v128[*(int *)(v129 + 20)], v191);
            }
            else
            {
              swift_getEnumCaseMultiPayload();
              v143 = *(void (**)(char *, char *, uint64_t))(v194 + 16);
              v143(v127, v128, v191);
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v127, 0, 1, v134);
              v143(&v127[*(int *)(v129 + 20)], &v128[*(int *)(v129 + 20)], v191);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
            goto LABEL_65;
          }
          goto LABEL_54;
        }
        if (v133)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v127, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_54:
          v137 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
LABEL_65:
          v146 = v14[8];
          v147 = &v188[v146];
          v148 = &v193[v146];
          v149 = *(_DWORD *)v148;
          v147[4] = v148[4];
          *(_DWORD *)v147 = v149;
          return a1;
        }
        v138 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v139 = *(_QWORD *)(v138 - 8);
        v140 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48);
        v141 = v140(v127, 1, v138);
        v142 = v140(v128, 1, v138);
        if (v141)
        {
          if (!v142)
          {
            swift_getEnumCaseMultiPayload();
            (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v127, v128, v191);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v127, 0, 1, v138);
LABEL_63:
            v145 = v186;
LABEL_64:
            v145(&v127[*(int *)(v129 + 20)], &v128[*(int *)(v129 + 20)], v191);
            goto LABEL_65;
          }
        }
        else
        {
          if (!v142)
          {
            v145 = v186;
            if (a1 != a2)
            {
              outlined destroy of AspireApiPECConfig((uint64_t)v127, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
              swift_getEnumCaseMultiPayload();
              (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v127, v128, v191);
              swift_storeEnumTagMultiPayload();
            }
            goto LABEL_64;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v127, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        }
        v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
        goto LABEL_63;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v155, type metadata accessor for AspireSimilarityPlaintextPacking);
    }
    v57 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                - 8)
                    + 64);
    v58 = v155;
    v59 = v156;
    goto LABEL_17;
  }
  if (v18)
  {
LABEL_7:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  *v12 = *v13;
  v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 16);
  v19(&v12[v14[5]], &v13[v14[5]], v9);
  v20 = v14[6];
  v21 = &v12[v20];
  v190 = v9;
  v22 = &v13[v20];
  v23 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v24 = *((_QWORD *)v23 - 1);
  v192 = v13;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v183 = v14;
    v187 = v24;
    v189 = v12;
    *v21 = *v22;
    *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
    v21[2] = v22[2];
    v45 = v22[3];
    *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
    v21[3] = v45;
    v46 = v19;
    v21[5] = v22[5];
    v47 = v23[9];
    v48 = (char *)v21 + v47;
    v49 = (char *)v22 + v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v48, v49, v190);
    v50 = v23[10];
    v51 = v21;
    v52 = (_QWORD *)((char *)v21 + v50);
    v53 = (_QWORD *)((char *)v22 + v50);
    v54 = type metadata accessor for AspireHeEncryptionParameters(0);
    v55 = *(_QWORD *)(v54 - 8);
    v195 = v46;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      *v52 = *v53;
      v52[1] = v53[1];
      v52[2] = v53[2];
      v60 = v53[3];
      *((_BYTE *)v52 + 32) = *((_BYTE *)v53 + 32);
      v52[3] = v60;
      v61 = v53[5];
      *((_BYTE *)v52 + 48) = *((_BYTE *)v53 + 48);
      v52[5] = v61;
      v62 = v53[7];
      *((_BYTE *)v52 + 64) = *((_BYTE *)v53 + 64);
      v52[7] = v62;
      v63 = *(int *)(v54 + 40);
      v181 = (char *)v52 + v63;
      v64 = (char *)v53 + v63;
      swift_bridgeObjectRetain();
      v46(v181, v64, v190);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    v182 = v23;
    v65 = v23[11];
    v66 = v51;
    v67 = (char *)v51 + v65;
    v68 = (char *)v22 + v65;
    v69 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v70 = *(_QWORD *)(v69 - 8);
    v14 = v183;
    v71 = v187;
    v19 = v195;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      v73 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v68, 1, v73))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        v14 = v183;
        v19 = v195;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v195(v67, v68, v190);
        swift_storeEnumTagMultiPayload();
        v98 = v73;
        v19 = v195;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v67, 0, 1, v98);
        v14 = v183;
      }
      v195(&v67[*(int *)(v69 + 20)], &v68[*(int *)(v69 + 20)], v190);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
      v71 = v187;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v71 + 56))(v66, 0, 1, v182);
    v12 = v189;
    v13 = v192;
  }
  v99 = v14[7];
  v100 = &v12[v99];
  v101 = &v13[v99];
  v102 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v103 = *(_QWORD *)(v102 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
  {
    v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    v196 = v19;
    v105 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v106 = *(_QWORD *)(v105 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v101, 1, v105))
    {
      v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v196(v100, v101, v190);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v100, 0, 1, v105);
    }
    v196(&v100[*(int *)(v102 + 20)], &v101[*(int *)(v102 + 20)], v190);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
  }
  v108 = v14[8];
  v109 = &v12[v108];
  v110 = &v192[v108];
  v111 = *(_DWORD *)v110;
  v109[4] = v110[4];
  *(_DWORD *)v109 = v111;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for AspireSimilaritySerializedProcessedSimilarityDb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(void);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v57;
  char *__dst;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  _BYTE *v68;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  v14 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v10)(&v12[v14[5]], &v13[v14[5]], v9);
    v17 = v14[6];
    v68 = v12;
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    v21 = *(_QWORD *)(v20 - 8);
    v67 = v10;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v23 = v68;
    }
    else
    {
      v61 = v21;
      v65 = v15;
      *v18 = *v19;
      *((_DWORD *)v18 + 2) = *((_DWORD *)v19 + 2);
      v24 = v19[3];
      v18[2] = v19[2];
      v18[3] = v24;
      *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
      v18[5] = v19[5];
      ((void (*)(char *, char *, uint64_t))v10)((char *)v18 + *(int *)(v20 + 36), (char *)v19 + *(int *)(v20 + 36), v9);
      v63 = v20;
      v25 = *(int *)(v20 + 40);
      v26 = (_OWORD *)((char *)v18 + v25);
      v27 = (_OWORD *)((char *)v19 + v25);
      v28 = v10;
      v29 = type metadata accessor for AspireHeEncryptionParameters(0);
      v59 = *(_QWORD *)(v29 - 8);
      v62 = v18;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v59 + 48))(v27, 1, v29))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        *v26 = *v27;
        v31 = *((_QWORD *)v27 + 3);
        *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
        *((_QWORD *)v26 + 3) = v31;
        *((_BYTE *)v26 + 32) = *((_BYTE *)v27 + 32);
        *((_QWORD *)v26 + 5) = *((_QWORD *)v27 + 5);
        *((_BYTE *)v26 + 48) = *((_BYTE *)v27 + 48);
        *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
        *((_BYTE *)v26 + 64) = *((_BYTE *)v27 + 64);
        ((void (*)(char *, char *, uint64_t))v28)((char *)v26 + *(int *)(v29 + 40), (char *)v27 + *(int *)(v29 + 40), v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v26, 0, 1, v29);
      }
      v23 = v68;
      v32 = v62;
      v33 = *(int *)(v63 + 44);
      v34 = (char *)v62 + v33;
      v35 = (char *)v19 + v33;
      v36 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        v39 = v61;
      }
      else
      {
        __dst = v34;
        v60 = v37;
        v40 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v35, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          v43 = __dst;
          memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          v44 = v67;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v57 = v41;
          v43 = __dst;
          v44 = v67;
          v67();
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v40);
        }
        v39 = v61;
        ((void (*)(char *, char *, uint64_t))v44)(&v43[*(int *)(v36 + 20)], &v35[*(int *)(v36 + 20)], v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v43, 0, 1, v36);
        v32 = v62;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v32, 0, 1, v63);
      v15 = v65;
    }
    v45 = v14[7];
    v46 = &v23[v45];
    v47 = &v13[v45];
    v48 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v66 = v15;
      v51 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v64 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v47, 1, v51))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        ((void (*)(char *, char *, uint64_t))v67)(v46, v47, v9);
        v23 = v68;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v46, 0, 1, v51);
      }
      v15 = v66;
      ((void (*)(char *, char *, uint64_t))v67)(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v53 = v14[8];
    v54 = &v23[v53];
    v55 = &v13[v53];
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v15 + 56))(v23, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for AspireSimilaritySerializedProcessedSimilarityDb(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, int *);
  int v17;
  int v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  void (*v49)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  int v73;
  size_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  void (*v118)(char *, char *, uint64_t);
  void (*v119)(char *, char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(char *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(char *, uint64_t, uint64_t);
  int v141;
  int v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  int *__src;
  int *__srca;
  int *__srcb;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  void (*v164)(_BYTE *, _BYTE *, uint64_t);
  void (*v165)(char *, char *, uint64_t);

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v163 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v163 + 40);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for AspireSimilaritySimilarityServerConfig(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    v156 = v10;
    if (v18)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspireSimilaritySimilarityServerConfig);
      goto LABEL_7;
    }
    *v12 = *v13;
    v10(&v12[v14[5]], &v13[v14[5]], v9);
    v28 = v14[6];
    v159 = v12;
    v29 = (uint64_t)&v12[v28];
    v30 = &v13[v28];
    v31 = type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
    v147 = *(_QWORD *)(v31 - 8);
    v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
    v33 = v32(v29, 1, v31);
    v150 = (int *)v31;
    v34 = v32((uint64_t)v30, 1, v31);
    v162 = v13;
    v158 = v9;
    if (v33)
    {
      if (!v34)
      {
        *(_QWORD *)v29 = *(_QWORD *)v30;
        *(_DWORD *)(v29 + 8) = *((_DWORD *)v30 + 2);
        v35 = *((_QWORD *)v30 + 3);
        *(_QWORD *)(v29 + 16) = *((_QWORD *)v30 + 2);
        *(_QWORD *)(v29 + 24) = v35;
        *(_BYTE *)(v29 + 32) = v30[32];
        *(_QWORD *)(v29 + 40) = *((_QWORD *)v30 + 5);
        v36 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
        v36((char *)(v29 + v150[9]), &v30[v150[9]], v9);
        v37 = v150[10];
        v38 = (_OWORD *)(v29 + v37);
        v39 = v9;
        v40 = &v30[v37];
        v41 = type metadata accessor for AspireHeEncryptionParameters(0);
        v42 = *(_QWORD *)(v41 - 8);
        __src = (int *)v41;
        v145 = v36;
        if ((*(unsigned int (**)(_OWORD *, uint64_t))(v42 + 48))(v40, 1))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v38, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          *v38 = *v40;
          v76 = *((_QWORD *)v40 + 3);
          *((_QWORD *)v38 + 2) = *((_QWORD *)v40 + 2);
          *((_QWORD *)v38 + 3) = v76;
          *((_BYTE *)v38 + 32) = *((_BYTE *)v40 + 32);
          *((_QWORD *)v38 + 5) = *((_QWORD *)v40 + 5);
          *((_BYTE *)v38 + 48) = *((_BYTE *)v40 + 48);
          *((_QWORD *)v38 + 7) = *((_QWORD *)v40 + 7);
          *((_BYTE *)v38 + 64) = *((_BYTE *)v40 + 64);
          v36((char *)v38 + __src[10], (char *)v40 + __src[10], v39);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v42 + 56))(v38, 0, 1, __src);
        }
        v77 = v147;
        v78 = v150[11];
        v79 = (char *)(v29 + v78);
        v80 = &v30[v78];
        v81 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v82 = *(_QWORD *)(v81 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
        {
          v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          v97 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v98 = *(_QWORD *)(v97 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v80, 1, v97))
          {
            v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v145(v79, v80, v158);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v79, 0, 1, v97);
          }
          v145(&v79[*(int *)(v81 + 20)], &v80[*(int *)(v81 + 20)], v158);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
          v77 = v147;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v77 + 56))(v29, 0, 1, v150);
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (v34)
    {
      outlined destroy of AspireApiPECConfig(v29, type metadata accessor for AspireSimilaritySimilarityClientConfig);
LABEL_16:
      v53 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?)
                                  - 8)
                      + 64);
      v54 = (void *)v29;
      v55 = v30;
LABEL_17:
      memcpy(v54, v55, v53);
      goto LABEL_48;
    }
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_DWORD *)(v29 + 8) = *((_DWORD *)v30 + 2);
    *(_QWORD *)(v29 + 16) = *((_QWORD *)v30 + 2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 24) = *((_QWORD *)v30 + 3);
    *(_BYTE *)(v29 + 32) = v30[32];
    *(_QWORD *)(v29 + 40) = *((_QWORD *)v30 + 5);
    swift_bridgeObjectRelease();
    v156((char *)(v29 + *(int *)(v31 + 36)), &v30[*(int *)(v31 + 36)], v9);
    v68 = *(int *)(v31 + 40);
    v69 = v29 + v68;
    v70 = &v30[v68];
    v71 = type metadata accessor for AspireHeEncryptionParameters(0);
    v146 = *(_QWORD *)(v71 - 8);
    v149 = v69;
    v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
    LODWORD(v69) = v72(v69, 1, v71);
    v73 = v72((uint64_t)v70, 1, v71);
    if ((_DWORD)v69)
    {
      if (v73)
      {
        v74 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                    - 8)
                        + 64);
        v75 = (void *)v149;
LABEL_43:
        memcpy(v75, v70, v74);
        goto LABEL_67;
      }
      *(_OWORD *)v149 = *v70;
      v100 = *((_QWORD *)v70 + 3);
      *(_QWORD *)(v149 + 16) = *((_QWORD *)v70 + 2);
      *(_QWORD *)(v149 + 24) = v100;
      *(_BYTE *)(v149 + 32) = *((_BYTE *)v70 + 32);
      *(_BYTE *)(v149 + 48) = *((_BYTE *)v70 + 48);
      *(_QWORD *)(v149 + 40) = *((_QWORD *)v70 + 5);
      *(_QWORD *)(v149 + 56) = *((_QWORD *)v70 + 7);
      *(_BYTE *)(v149 + 64) = *((_BYTE *)v70 + 64);
      (*(void (**)(uint64_t, char *, uint64_t))(v163 + 32))(v149 + *(int *)(v71 + 40), (char *)v70 + *(int *)(v71 + 40), v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v146 + 56))(v149, 0, 1, v71);
    }
    else
    {
      if (v73)
      {
        outlined destroy of AspireApiPECConfig(v149, type metadata accessor for AspireHeEncryptionParameters);
        v74 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                    - 8)
                        + 64);
        v75 = (void *)v149;
        goto LABEL_43;
      }
      *(_OWORD *)v149 = *v70;
      *(_QWORD *)(v149 + 16) = *((_QWORD *)v70 + 2);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v149 + 24) = *((_QWORD *)v70 + 3);
      *(_BYTE *)(v149 + 32) = *((_BYTE *)v70 + 32);
      *(_QWORD *)(v149 + 40) = *((_QWORD *)v70 + 5);
      *(_BYTE *)(v149 + 48) = *((_BYTE *)v70 + 48);
      *(_QWORD *)(v149 + 56) = *((_QWORD *)v70 + 7);
      *(_BYTE *)(v149 + 64) = *((_BYTE *)v70 + 64);
      v156((char *)(v149 + *(int *)(v71 + 40)), (char *)v70 + *(int *)(v71 + 40), v9);
    }
LABEL_67:
    v125 = v150[11];
    v126 = (char *)(v29 + v125);
    v127 = &v30[v125];
    v128 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v129 = *(_QWORD *)(v128 - 8);
    v130 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v129 + 48);
    v131 = v130(v126, 1, v128);
    v132 = v130(v127, 1, v128);
    if (v131)
    {
      if (!v132)
      {
        __srcb = v14;
        v133 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v134 = *(_QWORD *)(v133 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v127, 1, v133))
        {
          v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
          v136 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
          v137 = v158;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v136 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
          v137 = v158;
          v136(v126, v127, v158);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v126, 0, 1, v133);
        }
        v14 = __srcb;
        v136(&v126[*(int *)(v128 + 20)], &v127[*(int *)(v128 + 20)], v137);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
LABEL_48:
        v101 = v14[7];
        v102 = &v159[v101];
        v103 = &v162[v101];
        v104 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v105 = *(_QWORD *)(v104 - 8);
        v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
        v107 = v106(v102, 1, v104);
        v108 = v106(v103, 1, v104);
        if (v107)
        {
          if (!v108)
          {
            v109 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
            v110 = *(_QWORD *)(v109 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v103, 1, v109))
            {
              v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
              memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
              (*(void (**)(char *, char *, uint64_t))(v163 + 32))(&v102[*(int *)(v104 + 20)], &v103[*(int *)(v104 + 20)], v158);
            }
            else
            {
              swift_getEnumCaseMultiPayload();
              v119 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
              v119(v102, v103, v158);
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v102, 0, 1, v109);
              v119(&v102[*(int *)(v104 + 20)], &v103[*(int *)(v104 + 20)], v158);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
            goto LABEL_64;
          }
          goto LABEL_54;
        }
        if (v108)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v102, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_54:
          v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
LABEL_64:
          v121 = v14[8];
          v122 = &v159[v121];
          v123 = &v162[v121];
          *(_DWORD *)v122 = *(_DWORD *)v123;
          v122[4] = v123[4];
          return a1;
        }
        v113 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v114 = *(_QWORD *)(v113 - 8);
        v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
        v116 = v115(v102, 1, v113);
        v117 = v115(v103, 1, v113);
        if (v116)
        {
          v118 = v156;
          if (!v117)
          {
            swift_getEnumCaseMultiPayload();
            (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v102, v103, v158);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v102, 0, 1, v113);
LABEL_63:
            v118(&v102[*(int *)(v104 + 20)], &v103[*(int *)(v104 + 20)], v158);
            goto LABEL_64;
          }
        }
        else
        {
          v118 = v156;
          if (!v117)
          {
            if (a1 != a2)
            {
              outlined destroy of AspireApiPECConfig((uint64_t)v102, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
              swift_getEnumCaseMultiPayload();
              (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v102, v103, v158);
              swift_storeEnumTagMultiPayload();
            }
            goto LABEL_63;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v102, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
        }
        v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
        goto LABEL_63;
      }
      goto LABEL_73;
    }
    if (v132)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v126, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_73:
      v53 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      v54 = v126;
      v55 = v127;
      goto LABEL_17;
    }
    v138 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v139 = *(_QWORD *)(v138 - 8);
    v140 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v139 + 48);
    v141 = v140(v126, 1, v138);
    v142 = v140(v127, 1, v138);
    if (v141)
    {
      v143 = v156;
      if (!v142)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v126, v127, v158);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v126, 0, 1, v138);
LABEL_84:
        v143(&v126[*(int *)(v128 + 20)], &v127[*(int *)(v128 + 20)], v158);
        goto LABEL_48;
      }
    }
    else
    {
      v143 = v156;
      if (!v142)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v126, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v126, v127, v158);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_84;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v126, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
    goto LABEL_84;
  }
  if (v18)
  {
LABEL_7:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  v155 = v15;
  *v12 = *v13;
  v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v163 + 32);
  v19(&v12[v14[5]], &v13[v14[5]], v9);
  v20 = v14[6];
  v21 = &v12[v20];
  v22 = v9;
  v23 = &v13[v20];
  v24 = (int *)type metadata accessor for AspireSimilaritySimilarityClientConfig(0);
  v25 = *((_QWORD *)v24 - 1);
  v161 = v13;
  v157 = v22;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityClientConfig?);
    memcpy(v21, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v151 = v25;
    __srca = v14;
    v160 = v12;
    *v21 = *v23;
    *((_DWORD *)v21 + 2) = *((_DWORD *)v23 + 2);
    v44 = v23[3];
    v21[2] = v23[2];
    v21[3] = v44;
    *((_BYTE *)v21 + 32) = *((_BYTE *)v23 + 32);
    v21[5] = v23[5];
    v19((_BYTE *)v21 + v24[9], (_BYTE *)v23 + v24[9], v22);
    v45 = v24[10];
    v46 = v21;
    v47 = (_OWORD *)((char *)v21 + v45);
    v48 = (_OWORD *)((char *)v23 + v45);
    v49 = v19;
    v50 = type metadata accessor for AspireHeEncryptionParameters(0);
    v51 = *(_QWORD *)(v50 - 8);
    v164 = v49;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      *v47 = *v48;
      v56 = *((_QWORD *)v48 + 3);
      *((_QWORD *)v47 + 2) = *((_QWORD *)v48 + 2);
      *((_QWORD *)v47 + 3) = v56;
      *((_BYTE *)v47 + 32) = *((_BYTE *)v48 + 32);
      *((_QWORD *)v47 + 5) = *((_QWORD *)v48 + 5);
      *((_BYTE *)v47 + 48) = *((_BYTE *)v48 + 48);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      *((_BYTE *)v47 + 64) = *((_BYTE *)v48 + 64);
      v49((_BYTE *)v47 + *(int *)(v50 + 40), (_BYTE *)v48 + *(int *)(v50 + 40), v22);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v47, 0, 1, v50);
    }
    v148 = v24;
    v57 = v24[11];
    v58 = v46;
    v59 = (char *)v46 + v57;
    v60 = (char *)v23 + v57;
    v61 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v62 = *(_QWORD *)(v61 - 8);
    v63 = v151;
    v14 = __srca;
    v19 = v164;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v65 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v66 = *(_QWORD *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v60, 1, v65))
      {
        v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        v14 = __srca;
        v19 = v164;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v164(v59, v60, v157);
        swift_storeEnumTagMultiPayload();
        v84 = v65;
        v19 = v164;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v59, 0, 1, v84);
        v14 = __srca;
      }
      v164(&v59[*(int *)(v61 + 20)], &v60[*(int *)(v61 + 20)], v157);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      v63 = v151;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v63 + 56))(v58, 0, 1, v148);
    v12 = v160;
    v13 = v161;
  }
  v85 = v14[7];
  v86 = &v12[v85];
  v87 = &v13[v85];
  v88 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v89 = *(_QWORD *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    v165 = v19;
    v91 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v92 = *(_QWORD *)(v91 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v87, 1, v91))
    {
      v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v165(v86, v87, v157);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v86, 0, 1, v91);
    }
    v165(&v86[*(int *)(v88 + 20)], &v87[*(int *)(v88 + 20)], v157);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
  }
  v94 = v14[8];
  v95 = &v12[v94];
  v96 = &v161[v94];
  *(_DWORD *)v95 = *(_DWORD *)v96;
  v95[4] = v96[4];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v155 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySerializedProcessedSimilarityDb()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4D100(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySerializedProcessedSimilarityDb()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237D4D1B0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySimilarityServerConfig?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireSimilaritySerializedProcessedSimilarityDb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AspireSimilaritySerializedCiphertextMatrix(a1, a2, a3, MEMORY[0x24BEE0158] + 64, &lazy cache variable for type metadata for AspireSimilaritySimilarityServerConfig?, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySimilarityServerConfig);
}

void type metadata completion function for AspireSimilaritySerializedCiphertextMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a5, a6);
    if (v9 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireSimilaritySimilarityDbRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v4[3] = a2[3];
    v9 = *(int *)(a3 + 28);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for AspireSimilaritySimilarityDbRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AspireSimilaritySimilarityDbRow(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = a2[3];
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

_QWORD *assignWithCopy for AspireSimilaritySimilarityDbRow(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AspireSimilaritySimilarityDbRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AspireSimilaritySimilarityDbRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySimilarityDbRow()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4D668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySimilarityDbRow()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4D6F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireSimilaritySimilarityDbRow()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireSimilaritySimilarityDb()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4D800(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireSimilaritySimilarityDb()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237D4D888(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireSimilarityPecPreprocessDbArgs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4D908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AspireSimilarityPecPreprocessDbArgs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237D4D990(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t ObjC metadata update function for AspireSimilarityPecPreprocessDbArgs._StorageClass()
{
  return type metadata accessor for AspireSimilarityPecPreprocessDbArgs._StorageClass(0);
}

void type metadata completion function for AspireSimilarityPecPreprocessDbArgs._StorageClass()
{
  unint64_t v0;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilaritySimilarityServerConfig?, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySimilarityServerConfig);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t AspireSimilarityPlaintextPackingDiagonal.traverse<A>(visitor:)()
{
  return AspireSimilarityPlaintextPackingDenseRow.traverse<A>(visitor:)();
}

uint64_t AspireSimilarityPlaintextPackingDenseColumn.traverse<A>(visitor:)()
{
  return AspireSimilarityPlaintextPackingDenseRow.traverse<A>(visitor:)();
}

_QWORD *CacheCleaner.__allocating_init(allowListLock:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t CacheCleaner.allowListLock.getter()
{
  return swift_retain();
}

uint64_t CacheCleaner.currentDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t (*default argument 1 of CacheCleaner.init(allowListLock:getCurrentDate:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

_QWORD *CacheCleaner.init(allowListLock:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t CacheCleaner.run()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t **v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v7;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = (uint64_t **)static TokenCache.shared;
  v2 = *(os_unfair_lock_s **)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v3 = (uint64_t *)&v2[4];
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  closure #1 in TokenCache.pruneCache()(v3, v1);
  os_unfair_lock_unlock(v4);
  TokenCache.save()();
  if (v5)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v7;
  *v7 = v0;
  v7[1] = specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v7[2] = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

uint64_t CacheCleaner.cleanPirCaches()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16) + 16);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, &v29);
  os_unfair_lock_unlock(v3);
  v25 = v0;
  v4 = *(_QWORD *)(v29 + 40);
  v27 = v4 + 64;
  v26 = *(_QWORD *)(v0 + 16);
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(v4 + 64);
  v28 = (unint64_t)(63 - v6) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v28)
      goto LABEL_29;
    v13 = *(_QWORD *)(v27 + 8 * v9);
    if (!v13)
      break;
LABEL_16:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_17:
    v15 = *(_QWORD *)(v4 + 56) + 48 * v11;
    if (*(char *)(v15 + 40) < 0 && (*(_QWORD *)(v15 + 16) & 1) == 0)
    {
      v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v11);
      v18 = *v16;
      v17 = (void *)v16[1];
      v19 = *(_QWORD *)(v15 + 8);
      if ((*(_BYTE *)(v15 + 32) & 1) != 0)
      {
        v21 = one-time initialization token for defaultCacheEntryMinutesToLive;
        swift_bridgeObjectRetain();
        if (v21 != -1)
          swift_once();
        v20 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      }
      else
      {
        v20 = *(_QWORD *)(v15 + 24);
        swift_bridgeObjectRetain();
      }
      v22 = *(void (**)(uint64_t))(v26 + 24);
      v23 = *(_QWORD *)(v26 + 32);
      type metadata accessor for SqliteCache();
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      v24 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v18, v17, v19, v20, v22, v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 144))(v24);
      swift_bridgeObjectRelease();
      result = swift_release();
    }
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v28)
    goto LABEL_29;
  v13 = *(_QWORD *)(v27 + 8 * v14);
  if (v13)
    goto LABEL_15;
  v14 = v9 + 2;
  if (v9 + 2 >= v28)
    goto LABEL_29;
  v13 = *(_QWORD *)(v27 + 8 * v14);
  if (v13)
    goto LABEL_15;
  v14 = v9 + 3;
  if (v9 + 3 >= v28)
  {
LABEL_29:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(void))(v25 + 8))();
  }
  v13 = *(_QWORD *)(v27 + 8 * v14);
  if (v13)
  {
LABEL_15:
    v9 = v14;
    goto LABEL_16;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v28)
      goto LABEL_29;
    v13 = *(_QWORD *)(v27 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t CacheCleaner.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t CacheCleaner.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ScheduledActivityHandler.run@Sendable () in conformance CacheCleaner()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v6;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = *(os_unfair_lock_s **)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  partial apply for closure #1 in TokenCache.pruneCache()(v2);
  os_unfair_lock_unlock(v3);
  TokenCache.save()();
  if (v4)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v6[2] = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

uint64_t type metadata accessor for CacheCleaner()
{
  return objc_opt_self();
}

uint64_t method lookup function for CacheCleaner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CacheCleaner.__allocating_init(allowListLock:getCurrentDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ConfigCache.__allocating_init(cacheFile:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ConfigCache.init(cacheFile:)(a1);
  return v2;
}

uint64_t ConfigCache.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v8 = v7 + 4;
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  closure #1 in ConfigCache.subscript.setter(v8, a2, a3, a1, &v12);
  os_unfair_lock_unlock(v9);
  v10 = v12;
  swift_bridgeObjectRelease();
  ConfigCache.tryToSaveCache(configs:)(v10);
  swift_bridgeObjectRelease();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for AspireApiConfig?);
}

void ConfigCache.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  os_unfair_lock_s *v9;

  v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v8 = (uint64_t *)&v7[4];
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  closure #1 in ConfigCache.subscript.getter(v8, a1, a2, a3);
  os_unfair_lock_unlock(v9);
}

Swift::Void __swiftcall ConfigCache.clearCache(useCase:)(Swift::String useCase)
{
  ConfigCache.clearCache(useCase:)(useCase._countAndFlagsBits, (uint64_t)useCase._object, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))closure #1 in ConfigCache.clearCache(useCase:));
}

Swift::Void __swiftcall ConfigCache.update(keys:with:)(Swift::OpaquePointer keys, Swift::OpaquePointer with)
{
  ConfigCache.clearCache(useCase:)((uint64_t)keys._rawValue, (uint64_t)with._rawValue, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))closure #1 in ConfigCache.update(keys:with:));
}

uint64_t ConfigCache.clearCache(useCase:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v11;

  v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v8 = v7 + 4;
  v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  a3(&v11, v8, a1, a2);
  os_unfair_lock_unlock(v9);
  ConfigCache.tryToSaveCache(configs:)(v11);
  return swift_bridgeObjectRelease();
}

uint64_t ConfigCache.cacheFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + OBJC_IVAR____TtC8CipherML11ConfigCache_cacheFile, a1, &demangling cache variable for type metadata for URL?);
}

uint64_t ConfigCache.configsLock.getter()
{
  return swift_retain();
}

uint64_t ConfigCache.init(cacheFile:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, v2 + OBJC_IVAR____TtC8CipherML11ConfigCache_cacheFile, &demangling cache variable for type metadata for URL?);
  v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[String : AspireApiConfig], os_unfair_lock_s>);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock) = v13;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for URL?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v22 = a1;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v14 = Data.init(contentsOf:options:)();
    v16 = v15;
    v21 = v11;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    v18 = specialized _NativeDictionary.mapValues<A>(_:)(v23);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    os_unfair_lock_lock((os_unfair_lock_t)(v19 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v19 + 16) = v18;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 24));
    swift_release();
    outlined consume of Data._Representation(v14, v16);
    swift_release();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v7);
  }
  return v2;
}

uint64_t closure #1 in ConfigCache.clearCache(useCase:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, type metadata accessor for AspireApiConfig, (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v10);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for AspireApiConfig?);
  *a4 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t ConfigCache.tryToSaveCache(configs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v12[-v9];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + OBJC_IVAR____TtC8CipherML11ConfigCache_cacheFile, (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v5, v6);
  specialized static ConfigCache.saveCache(to:configs:)((uint64_t)v10, a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

Swift::Void __swiftcall ConfigCache.update(configs:)(Swift::OpaquePointer configs)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v3 = swift_bridgeObjectRetain();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v6 = (uint64_t *)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  closure #1 in ConfigCache.update(keys:with:)(v6, v4, (uint64_t)configs._rawValue, &v8);
  os_unfair_lock_unlock(v7);
  ConfigCache.tryToSaveCache(configs:)(v8);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in ConfigCache.update(keys:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  char v41;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiConfig(0);
  v13 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  v59 = v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v56 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v55 = (uint64_t)&v50 - v16;
  v17 = *(_QWORD *)(a2 + 16);
  if (!v17)
  {
LABEL_24:
    *a4 = *a1;
    return swift_bridgeObjectRetain();
  }
  v51 = a4;
  v52 = v4;
  swift_bridgeObjectRetain();
  v50 = a2;
  v18 = (uint64_t *)(a2 + 40);
  v53 = a1;
  v54 = v11;
  v57 = a3;
  while (1)
  {
    v21 = *(v18 - 1);
    v22 = *v18;
    v23 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    if (!v23 || (v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v25 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
      v41 = v40;
      swift_bridgeObjectRelease();
      if ((v41 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v43 = *a1;
        v60 = (_QWORD *)*a1;
        *a1 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v43 = (uint64_t)v60;
        }
        swift_bridgeObjectRelease();
        v20 = v59;
        outlined init with take of SecretKey(*(_QWORD *)(v43 + 56) + *(_QWORD *)(v59 + 72) * v39, (uint64_t)v11, type metadata accessor for AspireApiConfig);
        specialized _NativeDictionary._delete(at:)(v39, v43, type metadata accessor for AspireApiConfig);
        *a1 = v43;
        swift_bridgeObjectRelease();
        v19 = 0;
        a3 = v57;
      }
      else
      {
        v19 = 1;
        v20 = v59;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v11, v19, 1, v58);
      swift_bridgeObjectRelease();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for AspireApiConfig?);
      goto LABEL_5;
    }
    v26 = *(_QWORD *)(a3 + 56);
    v27 = *(_QWORD *)(v59 + 72);
    v28 = v55;
    outlined init with copy of AspireApiConfig(v26 + v27 * v24, v55);
    outlined init with take of SecretKey(v28, v56, type metadata accessor for AspireApiConfig);
    v29 = swift_isUniquelyReferenced_nonNull_native();
    v60 = (_QWORD *)*a1;
    v30 = v60;
    *a1 = 0x8000000000000000;
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
    v33 = v30[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v30[3] >= v35)
    {
      if ((v29 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v29);
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_27;
      v32 = v37;
    }
    v11 = v54;
    v44 = v60;
    if ((v36 & 1) != 0)
    {
      outlined assign with take of AspireApiConfig(v56, v60[7] + v32 * v27);
    }
    else
    {
      v60[(v32 >> 6) + 8] |= 1 << v32;
      v45 = (uint64_t *)(v44[6] + 16 * v32);
      *v45 = v21;
      v45[1] = v22;
      outlined init with take of SecretKey(v56, v44[7] + v32 * v27, type metadata accessor for AspireApiConfig);
      v46 = v44[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_26;
      v44[2] = v48;
      swift_bridgeObjectRetain();
    }
    a1 = v53;
    *v53 = (uint64_t)v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = v57;
LABEL_5:
    v18 += 2;
    if (!--v17)
    {
      swift_bridgeObjectRelease();
      a4 = v51;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void key path getter for ConfigCache.subscript(_:) : ConfigCache(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(*a1 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  closure #1 in ConfigCache.subscript.getterpartial apply(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t key path setter for ConfigCache.subscript(_:) : ConfigCache(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *a3;
  v9 = a3[1];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v8, &demangling cache variable for type metadata for AspireApiConfig?);
  v11 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v17 = v10;
  v18 = v9;
  v19 = v8;
  v12 = (_QWORD *)(v11 + 16);
  v13 = (os_unfair_lock_s *)(v11 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v13);
  closure #1 in ConfigCache.subscript.setterpartial apply(v12, &v20);
  os_unfair_lock_unlock(v13);
  v14 = v20;
  swift_bridgeObjectRelease();
  ConfigCache.tryToSaveCache(configs:)(v14);
  swift_bridgeObjectRelease();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireApiConfig?);
}

uint64_t closure #1 in ConfigCache.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      v11 = *(_QWORD *)(v5 + 56);
      v12 = type metadata accessor for AspireApiConfig(0);
      v13 = *(_QWORD *)(v12 - 8);
      outlined init with copy of AspireApiConfig(v11 + *(_QWORD *)(v13 + 72) * v10, a4);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a4, 0, 1, v12);
    }
    else
    {
      v16 = type metadata accessor for AspireApiConfig(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a4, 1, 1, v16);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for AspireApiConfig(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 1, 1, v14);
  }
}

uint64_t closure #1 in ConfigCache.subscript.setter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a4, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v12, a2, a3);
  *a5 = *a1;
  return swift_bridgeObjectRetain();
}

void (*ConfigCache.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;
  void *v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  os_unfair_lock_s *v12;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?)
                             - 8)
                 + 64);
  v7[3] = malloc(v8);
  v9 = malloc(v8);
  v10 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v7[4] = v9;
  v7[5] = v10;
  v11 = (uint64_t *)&v10[4];
  v12 = v10 + 6;
  os_unfair_lock_lock(v10 + 6);
  closure #1 in ConfigCache.subscript.getter(v11, a2, a3, (uint64_t)v9);
  v7[6] = 0;
  os_unfair_lock_unlock(v12);
  return ConfigCache.subscript.modify;
}

void ConfigCache.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v2 = *a1;
  v3 = (*a1)[5];
  v4 = (void *)(*a1)[3];
  v5 = (void *)(*a1)[4];
  v6 = (*a1)[1];
  v7 = **a1;
  v8 = (os_unfair_lock_s *)(v3 + 24);
  v9 = (_QWORD *)(v3 + 16);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((*a1)[4], (uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig?);
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v8);
    closure #1 in ConfigCache.subscript.setter(v9, v7, v6, (uint64_t)v4, v12);
    os_unfair_lock_unlock(v8);
    v10 = v12[0];
    swift_bridgeObjectRelease();
    ConfigCache.tryToSaveCache(configs:)(v10);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig?);
  }
  else
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v8);
    closure #1 in ConfigCache.subscript.setter(v9, v7, v6, (uint64_t)v5, v12);
    os_unfair_lock_unlock(v8);
    v11 = v12[0];
    swift_bridgeObjectRelease();
    ConfigCache.tryToSaveCache(configs:)(v11);
    swift_bridgeObjectRelease();
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiConfig?);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t ConfigCache.deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML11ConfigCache_cacheFile, &demangling cache variable for type metadata for URL?);
  swift_release();
  return v0;
}

uint64_t ConfigCache.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML11ConfigCache_cacheFile, &demangling cache variable for type metadata for URL?);
  swift_release();
  return swift_deallocClassInstance();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v18 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v18;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for Date();
    v14 = MEMORY[0x24BDCE900];
    v15 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v12 + *(_QWORD *)(v15 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11, (uint64_t (*)(_QWORD))v14);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v17 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v17;
    }
    outlined consume of Data._Representation(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8 + 8));
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for SecretKey();
    v14 = *(_QWORD *)(v13 - 8);
    outlined init with take of SecretKey(v12 + *(_QWORD *)(v14 + 72) * v8, a3, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for SecretKey();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, type metadata accessor for AspireApiConfig, (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  unint64_t v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8 = v5;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v8;
    v21 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v15 = v21;
    }
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 56);
    v17 = a3(0);
    v18 = *(_QWORD *)(v17 - 8);
    outlined init with take of SecretKey(v16 + *(_QWORD *)(v18 + 72) * v12, a5, a3);
    specialized _NativeDictionary._delete(at:)(v12, v15, a3);
    *v8 = v15;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a5, 0, 1, v17);
  }
  else
  {
    v20 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a5, 1, 1, v20);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v10, v11);
        Data.hash(into:)();
        v12 = Hasher._finalize()();
        result = outlined consume of Data._Representation(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v10, v11);
        Data.hash(into:)();
        v12 = Hasher._finalize()();
        result = outlined consume of Data._Representation(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for SecretKey() - 8) + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v12 < v10)
          goto LABEL_11;
LABEL_12:
        v13 = *(_QWORD *)(a2 + 48);
        v14 = (_OWORD *)(v13 + 16 * v4);
        v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1)
          *v14 = *v15;
        v16 = *(_QWORD *)(a2 + 56);
        v17 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v18 = v17 * v4;
        result = v16 + v17 * v4;
        v19 = v17 * v7;
        v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v18 == v19)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v12 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v12)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v23 = *v22;
    v24 = (-1 << v4) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_237D50A28()
{
  return 0;
}

uint64_t ObjC metadata update function for ConfigCache()
{
  return type metadata accessor for ConfigCache();
}

uint64_t type metadata accessor for ConfigCache()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConfigCache;
  if (!type metadata singleton initialization cache for ConfigCache)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ConfigCache()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ConfigCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConfigCache.__allocating_init(cacheFile:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t closure #1 in ConfigCache.subscript.setterpartial apply@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ConfigCache.subscript.setter(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t closure #1 in ConfigCache.subscript.getterpartial apply@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ConfigCache.subscript.getter(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t outlined init with copy of AspireApiConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AspireApiConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of AspireApiConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AspireApiConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized static ConfigCache.saveCache(to:configs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = specialized _NativeDictionary.mapValues<A>(_:)(a2);
  if (!v2)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v6 = v5;
    swift_release();
    Data.write(to:options:)();
    outlined consume of Data._Representation(v4, v6);
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of AspireApiConfig(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireApiConfig(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of KeyStorage.get(group:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of KeyStorage.set(group:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of KeyStorage.synchronize()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 24) + *(_QWORD *)(a2 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v7(a1, a2);
}

uint64_t __getAMDClientClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return +[CMLXPC createConnection].cold.1(v0);
}

uint64_t URLRequest.httpMethod.setter()
{
  return MEMORY[0x24BDCAFF8]();
}

uint64_t static URLRequest._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCB068]();
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)()
{
  return MEMORY[0x24BDCB070]();
}

uint64_t URLRequest.httpBody.setter()
{
  return MEMORY[0x24BDCB0A8]();
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)(Swift::String_optional _, Swift::String forHTTPHeaderField)
{
  MEMORY[0x24BDCB0B0](_.value._countAndFlagsBits, _.value._object, forHTTPHeaderField._countAndFlagsBits, forHTTPHeaderField._object);
}

uint64_t type metadata accessor for URLRequest()
{
  return MEMORY[0x24BDCB0C0]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t DataProtocol.copyBytes(to:)()
{
  return MEMORY[0x24BDCB7E0]();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return MEMORY[0x24BDCB958]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x24BDCBBF8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t dispatch thunk of LocalizedError.errorDescription.getter()
{
  return MEMORY[0x24BDCBE48]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x24BDCCA58]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = MEMORY[0x24BDCD9D0](percentEncoded);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.init(string:relativeTo:)()
{
  return MEMORY[0x24BDCDA50]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t URL.appending(queryItems:)()
{
  return MEMORY[0x24BDCDA90]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x24BDCDAA8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDB60]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDBC8]();
}

uint64_t Data.datatypeValue.getter()
{
  return MEMORY[0x24BEB3140]();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return MEMORY[0x24BDCDC08]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x24BDCDC40]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x24BDCDD40]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t Data.Iterator.init(_:at:)()
{
  return MEMORY[0x24BDCDD88]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t Date.ISO8601Format(_:)()
{
  return MEMORY[0x24BDCE2F0]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return MEMORY[0x24BDCE350]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return MEMORY[0x24BDCE378]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return MEMORY[0x24BDCE3A0]();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return MEMORY[0x24BDCE3B8]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return MEMORY[0x24BDCE3E8]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return MEMORY[0x24BDCE448]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x24BDCE468]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return MEMORY[0x24BDCE778]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t Date.advanced(by:)()
{
  return MEMORY[0x24BDCE8A8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return MEMORY[0x24BDCF4C8]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t Connection.run(_:_:)()
{
  return MEMORY[0x24BEB3160]();
}

uint64_t Connection.run(_:)()
{
  return MEMORY[0x24BEB3168]();
}

{
  return MEMORY[0x24BEB3170]();
}

uint64_t Connection.scalar(_:_:)()
{
  return MEMORY[0x24BEB3180]();
}

uint64_t Connection.scalar<A>(_:)()
{
  return MEMORY[0x24BEB3188]();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.execute(_:)(Swift::String a1)
{
  MEMORY[0x24BEB3190](a1._countAndFlagsBits, a1._object);
}

uint64_t Connection.prepare(_:_:)()
{
  return MEMORY[0x24BEB3198]();
}

uint64_t type metadata accessor for Connection()
{
  return MEMORY[0x24BEB31D8]();
}

uint64_t Connection.__allocating_init(_:readonly:)()
{
  return MEMORY[0x24BEB31F0]();
}

uint64_t SchemaType.count.getter()
{
  return MEMORY[0x24BEB3220]();
}

Swift::String __swiftcall Expressible.asSQL()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEB3240]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t TableBuilder.column<A>(_:primaryKey:check:defaultValue:)()
{
  return MEMORY[0x24BEB3250]();
}

uint64_t TableBuilder.column<A>(_:unique:check:defaultValue:)()
{
  return MEMORY[0x24BEB3258]();
}

{
  return MEMORY[0x24BEB3260]();
}

uint64_t ExpressionType.init(_:)()
{
  return MEMORY[0x24BEB3270]();
}

uint64_t < infix<A>(_:_:)()
{
  return MEMORY[0x24BEB3278]();
}

uint64_t <- infix<A>(_:_:)()
{
  return MEMORY[0x24BEB3290]();
}

{
  return MEMORY[0x24BEB3298]();
}

uint64_t Blob.bytes.getter()
{
  return MEMORY[0x24BEB32B8]();
}

uint64_t type metadata accessor for Blob()
{
  return MEMORY[0x24BEB32C8]();
}

uint64_t Table.createIndex(_:unique:ifNotExists:)()
{
  return MEMORY[0x24BEB32D8]();
}

uint64_t Table.create(temporary:ifNotExists:withoutRowid:block:)()
{
  return MEMORY[0x24BEB32E0]();
}

uint64_t Table.addColumn<A>(_:check:defaultValue:)()
{
  return MEMORY[0x24BEB32E8]();
}

uint64_t type metadata accessor for Table()
{
  return MEMORY[0x24BEB3300]();
}

uint64_t Table.init(_:database:)()
{
  return MEMORY[0x24BEB3310]();
}

uint64_t type metadata accessor for Cursor()
{
  return MEMORY[0x24BEB3320]();
}

uint64_t Cursor.subscript.getter()
{
  return MEMORY[0x24BEB3328]();
}

uint64_t type metadata accessor for Delete()
{
  return MEMORY[0x24BEB3330]();
}

uint64_t type metadata accessor for Insert()
{
  return MEMORY[0x24BEB3338]();
}

uint64_t type metadata accessor for Setter()
{
  return MEMORY[0x24BEB3340]();
}

uint64_t QueryType.limit(_:)()
{
  return MEMORY[0x24BEB3358]();
}

uint64_t QueryType.order(_:)()
{
  return MEMORY[0x24BEB3360]();
}

uint64_t QueryType.delete()()
{
  return MEMORY[0x24BEB3368]();
}

uint64_t QueryType.filter(_:)()
{
  return MEMORY[0x24BEB3370]();
}

uint64_t QueryType.upsert(_:onConflictOf:set:)()
{
  return MEMORY[0x24BEB3380]();
}

uint64_t Statement.row.getter()
{
  return MEMORY[0x24BEB3388]();
}

uint64_t Statement.run(_:)()
{
  return MEMORY[0x24BEB3390]();
}

uint64_t Statement.bind(_:)()
{
  return MEMORY[0x24BEB3398]();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.step()()
{
  return MEMORY[0x24BEB33A0]();
}

uint64_t type metadata accessor for Statement()
{
  return MEMORY[0x24BEB33A8]();
}

uint64_t HE.RlweParams.securityLevel.getter()
{
  return MEMORY[0x24BE29FE0]();
}

uint64_t HE.RlweParams.plaintextModulus.getter()
{
  return MEMORY[0x24BE29FE8]();
}

uint64_t HE.RlweParams.polynomialDegree.getter()
{
  return MEMORY[0x24BE29FF0]();
}

uint64_t HE.RlweParams.coefficientModuli.getter()
{
  return MEMORY[0x24BE29FF8]();
}

uint64_t static HE.RlweParams.allCases.getter()
{
  return MEMORY[0x24BE2A080]();
}

uint64_t type metadata accessor for HE.RlweParams()
{
  return MEMORY[0x24BE2A088]();
}

uint64_t HE.SecurityLevel.rawValue.getter()
{
  return MEMORY[0x24BE2A0B8]();
}

uint64_t type metadata accessor for HE.SecurityLevel()
{
  return MEMORY[0x24BE2A0C8]();
}

uint64_t HE.EncryptionParams.init(rlweParams:scheme:)()
{
  return MEMORY[0x24BE2A100]();
}

uint64_t HE.EncryptionParams.rlweParams.getter()
{
  return MEMORY[0x24BE2A108]();
}

uint64_t HE.EncryptionParams.scheme.getter()
{
  return MEMORY[0x24BE2A110]();
}

uint64_t type metadata accessor for HE.EncryptionParams()
{
  return MEMORY[0x24BE2A118]();
}

uint64_t HE.SerializedRelinKey.relinKey.getter()
{
  return MEMORY[0x24BE2A120]();
}

uint64_t type metadata accessor for HE.SerializedRelinKey()
{
  return MEMORY[0x24BE2A128]();
}

uint64_t HE.EvaluationKeyConfig.init(encryptionParams:galoisElements:hasRelinKey:)()
{
  return MEMORY[0x24BE2A138]();
}

uint64_t type metadata accessor for HE.EvaluationKeyConfig()
{
  return MEMORY[0x24BE2A140]();
}

uint64_t HE.SerializedGaloisKey.galoisKey.getter()
{
  return MEMORY[0x24BE2A148]();
}

uint64_t type metadata accessor for HE.SerializedGaloisKey()
{
  return MEMORY[0x24BE2A150]();
}

uint64_t HE.SerializedSecretKey.seed.getter()
{
  return MEMORY[0x24BE2A160]();
}

uint64_t HE.SerializedSecretKey.init(seed:)()
{
  return MEMORY[0x24BE2A168]();
}

uint64_t HE.SerializedSecretKey.init()()
{
  return MEMORY[0x24BE2A170]();
}

uint64_t type metadata accessor for HE.SerializedSecretKey()
{
  return MEMORY[0x24BE2A178]();
}

uint64_t type metadata accessor for HE.SerializedCiphertext()
{
  return MEMORY[0x24BE2A198]();
}

uint64_t HE.SerializedEvaluationKey.relinKey.getter()
{
  return MEMORY[0x24BE2A1A8]();
}

uint64_t HE.SerializedEvaluationKey.galoisKey.getter()
{
  return MEMORY[0x24BE2A1B0]();
}

uint64_t HE.SerializedEvaluationKey.init(config:secretKey:scheme:)()
{
  return MEMORY[0x24BE2A1B8]();
}

uint64_t type metadata accessor for HE.SerializedEvaluationKey()
{
  return MEMORY[0x24BE2A1C0]();
}

uint64_t type metadata accessor for HE.Scheme()
{
  return MEMORY[0x24BE2A1D8]();
}

uint64_t type metadata accessor for PEC.PlaintextPacking()
{
  return MEMORY[0x24BE2A220]();
}

uint64_t PEC.SimilarityClient.decryptCrt(reply:)()
{
  return MEMORY[0x24BE2A228]();
}

uint64_t PEC.SimilarityClient.similarityConfig.getter()
{
  return MEMORY[0x24BE2A230]();
}

uint64_t PEC.SimilarityClient.init(config:secretKey:)()
{
  return MEMORY[0x24BE2A238]();
}

uint64_t PEC.SimilarityClient.queryCrt(values:)()
{
  return MEMORY[0x24BE2A240]();
}

uint64_t type metadata accessor for PEC.SimilarityClient()
{
  return MEMORY[0x24BE2A248]();
}

uint64_t type metadata accessor for PEC.SimilarityMetric()
{
  return MEMORY[0x24BE2A260]();
}

uint64_t PEC.PlaintextMatrixDims.init(rowCount:colCount:)()
{
  return MEMORY[0x24BE2A268]();
}

uint64_t type metadata accessor for PEC.PlaintextMatrixDims()
{
  return MEMORY[0x24BE2A270]();
}

uint64_t PEC.SimilarityClientConfig.init(encryptionParams:scalingFactor:plaintextPacking:embeddingDimension:galoisElements:similarityMetric:extraPlaintextModuli:)()
{
  return MEMORY[0x24BE2A278]();
}

uint64_t PEC.SimilarityClientConfig.encryptionParams.getter()
{
  return MEMORY[0x24BE2A280]();
}

uint64_t PEC.SimilarityClientConfig.embeddingDimension.getter()
{
  return MEMORY[0x24BE2A288]();
}

uint64_t type metadata accessor for PEC.SimilarityClientConfig()
{
  return MEMORY[0x24BE2A290]();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.ciphertexts.getter()
{
  return MEMORY[0x24BE2A298]();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)()
{
  return MEMORY[0x24BE2A2A0]();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.packing.getter()
{
  return MEMORY[0x24BE2A2A8]();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.colCount.getter()
{
  return MEMORY[0x24BE2A2B0]();
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.rowCount.getter()
{
  return MEMORY[0x24BE2A2B8]();
}

uint64_t type metadata accessor for PEC.SerializedCiphertextCoeffMatrix()
{
  return MEMORY[0x24BE2A2C0]();
}

uint64_t type metadata accessor for PIR.PirAlgorithm()
{
  return MEMORY[0x24BE2A2E8]();
}

uint64_t PIR.IndexPirClient.query(indices:)()
{
  return MEMORY[0x24BE2A2F0]();
}

uint64_t PIR.IndexPirClient.decrypt(reply:index:)()
{
  return MEMORY[0x24BE2A2F8]();
}

uint64_t PIR.IndexPirClient.init(pirParams:secretKey:)()
{
  return MEMORY[0x24BE2A300]();
}

uint64_t type metadata accessor for PIR.IndexPirClient()
{
  return MEMORY[0x24BE2A308]();
}

uint64_t PIR.KeywordPirClient.query(keyword:)()
{
  return MEMORY[0x24BE2A318]();
}

uint64_t PIR.KeywordPirClient.decrypt(replies:keyword:)()
{
  return MEMORY[0x24BE2A320]();
}

uint64_t PIR.KeywordPirClient.init(pirParams:hashFunctionCount:secretKey:)()
{
  return MEMORY[0x24BE2A328]();
}

uint64_t type metadata accessor for PIR.KeywordPirClient()
{
  return MEMORY[0x24BE2A330]();
}

uint64_t PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)()
{
  return MEMORY[0x24BE2A340]();
}

uint64_t PIR.PirParams.encryptionParams.getter()
{
  return MEMORY[0x24BE2A348]();
}

uint64_t PIR.PirParams.dimensions.getter()
{
  return MEMORY[0x24BE2A350]();
}

uint64_t PIR.PirParams.entriesCount.getter()
{
  return MEMORY[0x24BE2A358]();
}

uint64_t PIR.PirParams.algorithm.getter()
{
  return MEMORY[0x24BE2A360]();
}

uint64_t PIR.PirParams.entrySize.getter()
{
  return MEMORY[0x24BE2A368]();
}

uint64_t type metadata accessor for PIR.PirParams()
{
  return MEMORY[0x24BE2A370]();
}

uint64_t type metadata accessor for ProtobufString()
{
  return MEMORY[0x24BE5BEC0]();
}

uint64_t type metadata accessor for ProtobufUInt64()
{
  return MEMORY[0x24BE5BEF0]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t Enum.hash(into:)()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)()
{
  return MEMORY[0x24BE5C028]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x24BE5C048]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C058]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x24BE5C060]();
}

{
  return MEMORY[0x24BE5C068]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C070]();
}

{
  return MEMORY[0x24BE5C078]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedBytesField(value:)()
{
  return MEMORY[0x24BE5C080]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedFloatField(value:)()
{
  return MEMORY[0x24BE5C088]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return MEMORY[0x24BE5C0E8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)()
{
  return MEMORY[0x24BE5C0F0]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)()
{
  return MEMORY[0x24BE5C0F8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return MEMORY[0x24BE5C108]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x24BE5C118]();
}

{
  return MEMORY[0x24BE5C120]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x24BE5C128]();
}

{
  return MEMORY[0x24BE5C130]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x24BE5C138]();
}

{
  return MEMORY[0x24BE5C140]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t dispatch thunk of Message.unknownFields.getter()
{
  return MEMORY[0x24BE5C170]();
}

uint64_t dispatch thunk of Message.unknownFields.setter()
{
  return MEMORY[0x24BE5C178]();
}

uint64_t dispatch thunk of Message.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C180]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x24BE5C1D0]();
}

Swift::String __swiftcall Message.textFormatString()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BE5C1E0]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t static Message.with(_:)()
{
  return MEMORY[0x24BE5C1F0]();
}

uint64_t dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)()
{
  return MEMORY[0x24BE5C210]();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C230]();
}

uint64_t dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C238]();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C258]();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C260]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C280]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2C0]();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2D8]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F0]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t _NameMap.init()()
{
  return MEMORY[0x24BE5C348]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x24BEE7738]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x24BEE7748]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x24BEE7758]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x24BEE7790]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x24BEE77C0]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x24BEE77F0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDC62E0]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t static BinaryFloatingPoint<>.random<A>(in:using:)()
{
  return MEMORY[0x24BEE0230]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE0290]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x24BEE0370]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE0BB0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x24BEE0BE8]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t static TaskPriority.background.getter()
{
  return MEMORY[0x24BEE6938]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x24BEE17F8]();
}

uint64_t Collection<>.contains(_:)()
{
  return MEMORY[0x24BEB33F0]();
}

uint64_t NSURLSession.data(for:delegate:)()
{
  return MEMORY[0x24BDCFED8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x24BEE7940]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x24BEE7948]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t dispatch thunk of static BinaryInteger./ infix(_:_:)()
{
  return MEMORY[0x24BEE1FE0]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x24BEE2F68]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x24BEE2F70]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

{
  return MEMORY[0x24BEE32E0]();
}

{
  return MEMORY[0x24BEE3348]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3360]();
}

{
  return MEMORY[0x24BEE3370]();
}

{
  return MEMORY[0x24BEE33B0]();
}

{
  return MEMORY[0x24BEE33C0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedDecodingContainer.contains(_:)()
{
  return MEMORY[0x24BEE33D0]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3490]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34B0]();
}

{
  return MEMORY[0x24BEE34C0]();
}

{
  return MEMORY[0x24BEE3500]();
}

{
  return MEMORY[0x24BEE3510]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  return MEMORY[0x24BEE7098]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  return MEMORY[0x24BEE70F0]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD0810]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x24BDAD160](__buf, __nbytes);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t container_copy_sandbox_token()
{
  return MEMORY[0x24BDADA40]();
}

uint64_t container_error_copy_unlocalized_description()
{
  return MEMORY[0x24BDADA88]();
}

uint64_t container_get_path()
{
  return MEMORY[0x24BDADAC0]();
}

uint64_t container_query_create()
{
  return MEMORY[0x24BDADB18]();
}

uint64_t container_query_free()
{
  return MEMORY[0x24BDADB20]();
}

uint64_t container_query_get_last_error()
{
  return MEMORY[0x24BDADB28]();
}

uint64_t container_query_get_single_result()
{
  return MEMORY[0x24BDADB30]();
}

uint64_t container_query_operation_set_flags()
{
  return MEMORY[0x24BDADB48]();
}

uint64_t container_query_set_class()
{
  return MEMORY[0x24BDADB58]();
}

uint64_t container_query_set_group_identifiers()
{
  return MEMORY[0x24BDADB60]();
}

uint64_t container_query_set_persona_unique_string()
{
  return MEMORY[0x24BDADB78]();
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x24BDAF438]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x24BDAFC00]();
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x24BEE7198]();
}

uint64_t swift_asyncLet_finish()
{
  return MEMORY[0x24BEE71A0]();
}

uint64_t swift_asyncLet_get_throwing()
{
  return MEMORY[0x24BEE71B0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x24BEE4DD8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x24BEE4E80]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x24BDB0B80](string);
}

